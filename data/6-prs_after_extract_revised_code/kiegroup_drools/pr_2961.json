{"pr_number": 2961, "pr_title": "[DROOLS-5448] Add TransformationDictionary to \"compiler\" stack method", "pr_createdAt": "2020-06-23T16:46:01Z", "pr_url": "https://github.com/kiegroup/drools/pull/2961", "timeline": [{"oid": "85a162ead002405e8762b88ef681eb2f58a98b5d", "url": "https://github.com/kiegroup/drools/commit/85a162ead002405e8762b88ef681eb2f58a98b5d", "message": "[DROOLS-5448] Add TransformationDictionary to \"compiler\" stack methods. Implemented transformations flow inside Runtime.", "committedDate": "2020-06-23T16:43:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ0Nzc1Nw==", "url": "https://github.com/kiegroup/drools/pull/2961#discussion_r444447757", "bodyText": "final on last parameter", "author": "danielezonca", "createdAt": "2020-06-23T19:10:53Z", "path": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/main/java/org/kie/pmml/compiler/api/provider/ModelImplementationProvider.java", "diffHunk": "@@ -29,24 +30,26 @@\n     PMML_MODEL getPMMLModelType();\n \n     /**\n+     *\n      * @param dataDictionary\n+     * @param transformationDictionary\n      * @param model\n      * @param kBuilder Using <code>Object</code> to avoid coupling with drools\n      * @return\n      * @throws KiePMMLInternalException\n      */\n-    E getKiePMMLModel(DataDictionary dataDictionary, T model, Object kBuilder);\n+    E getKiePMMLModel(final DataDictionary dataDictionary, final TransformationDictionary transformationDictionary, final T model, Object kBuilder);", "originalCommit": "85a162ead002405e8762b88ef681eb2f58a98b5d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "48dfe1575e04da10aa84dc9b0abe69e8b4beeed9", "chunk": "diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/main/java/org/kie/pmml/compiler/api/provider/ModelImplementationProvider.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/main/java/org/kie/pmml/compiler/api/provider/ModelImplementationProvider.java\nindex e854b7fe08..41f236ee56 100644\n--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/main/java/org/kie/pmml/compiler/api/provider/ModelImplementationProvider.java\n+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/main/java/org/kie/pmml/compiler/api/provider/ModelImplementationProvider.java\n\n@@ -38,7 +38,7 @@ public interface ModelImplementationProvider<T extends Model, E extends KiePMMLM\n      * @return\n      * @throws KiePMMLInternalException\n      */\n-    E getKiePMMLModel(final DataDictionary dataDictionary, final TransformationDictionary transformationDictionary, final T model, Object kBuilder);\n+    E getKiePMMLModel(final DataDictionary dataDictionary, final TransformationDictionary transformationDictionary, final T model, final Object kBuilder);\n \n     /**\n      * Method to be called following a <b>kie-maven-plugin</b> invocation\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ0Nzg3Ng==", "url": "https://github.com/kiegroup/drools/pull/2961#discussion_r444447876", "bodyText": "Final on first and last parameters", "author": "danielezonca", "createdAt": "2020-06-23T19:11:07Z", "path": "kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/main/java/org/kie/pmml/compiler/api/provider/ModelImplementationProvider.java", "diffHunk": "@@ -29,24 +30,26 @@\n     PMML_MODEL getPMMLModelType();\n \n     /**\n+     *\n      * @param dataDictionary\n+     * @param transformationDictionary\n      * @param model\n      * @param kBuilder Using <code>Object</code> to avoid coupling with drools\n      * @return\n      * @throws KiePMMLInternalException\n      */\n-    E getKiePMMLModel(DataDictionary dataDictionary, T model, Object kBuilder);\n+    E getKiePMMLModel(final DataDictionary dataDictionary, final TransformationDictionary transformationDictionary, final T model, Object kBuilder);\n \n     /**\n      * Method to be called following a <b>kie-maven-plugin</b> invocation\n      *\n      * @param packageName the package into which put all the generated classes out of the given <code>Model</code>\n-     *\n      * @param dataDictionary\n+     * @param transformationDictionary\n      * @param model\n      * @param kBuilder Using <code>Object</code> to avoid coupling with drools\n      * @return\n      * @throws KiePMMLInternalException\n      */\n-    E getKiePMMLModelFromPlugin(String packageName, DataDictionary dataDictionary, T model, Object kBuilder);\n+    E getKiePMMLModelFromPlugin(String packageName, final DataDictionary dataDictionary, final TransformationDictionary transformationDictionary, final T model, Object kBuilder);", "originalCommit": "85a162ead002405e8762b88ef681eb2f58a98b5d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "48dfe1575e04da10aa84dc9b0abe69e8b4beeed9", "chunk": "diff --git a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/main/java/org/kie/pmml/compiler/api/provider/ModelImplementationProvider.java b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/main/java/org/kie/pmml/compiler/api/provider/ModelImplementationProvider.java\nindex e854b7fe08..41f236ee56 100644\n--- a/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/main/java/org/kie/pmml/compiler/api/provider/ModelImplementationProvider.java\n+++ b/kie-pmml-trusty/kie-pmml-compiler/kie-pmml-compiler-api/src/main/java/org/kie/pmml/compiler/api/provider/ModelImplementationProvider.java\n\n@@ -38,7 +38,7 @@ public interface ModelImplementationProvider<T extends Model, E extends KiePMMLM\n      * @return\n      * @throws KiePMMLInternalException\n      */\n-    E getKiePMMLModel(final DataDictionary dataDictionary, final TransformationDictionary transformationDictionary, final T model, Object kBuilder);\n+    E getKiePMMLModel(final DataDictionary dataDictionary, final TransformationDictionary transformationDictionary, final T model, final Object kBuilder);\n \n     /**\n      * Method to be called following a <b>kie-maven-plugin</b> invocation\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ1MDIxMw==", "url": "https://github.com/kiegroup/drools/pull/2961#discussion_r444450213", "bodyText": "Unmodifiable wrapper missing", "author": "danielezonca", "createdAt": "2020-06-23T19:15:32Z", "path": "kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/PMMLContextImpl.java", "diffHunk": "@@ -44,8 +45,28 @@ public void addMissingValueReplaced(String fieldName, Object missingValueReplace\n         missingValueReplacedMap.put(fieldName, missingValueReplaced);\n     }\n \n+    @Override\n+    public void addCommonTranformation(String fieldName, Object commonTranformation) {\n+        localTransformationMap.put(fieldName, commonTranformation);\n+    }\n+\n+    @Override\n+    public void addLocalTranformation(String fieldName, Object commonTranformation) {\n+        commonTransformationMap.put(fieldName, commonTranformation);\n+    }\n+\n     @Override\n     public Map<String, Object> getMissingValueReplacedMap() {\n         return Collections.unmodifiableMap(missingValueReplacedMap);\n     }\n+\n+    @Override\n+    public Map<String, Object> getCommonTransformationMap() {\n+        return commonTransformationMap;", "originalCommit": "85a162ead002405e8762b88ef681eb2f58a98b5d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "48dfe1575e04da10aa84dc9b0abe69e8b4beeed9", "chunk": "diff --git a/kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/PMMLContextImpl.java b/kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/PMMLContextImpl.java\nindex 6c09392bc6..c0af222763 100644\n--- a/kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/PMMLContextImpl.java\n+++ b/kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/PMMLContextImpl.java\n\n@@ -41,17 +41,17 @@ public class PMMLContextImpl extends ContextImpl implements PMMLContext {\n     }\n \n     @Override\n-    public void addMissingValueReplaced(String fieldName, Object missingValueReplaced) {\n+    public void addMissingValueReplaced(final String fieldName, final Object missingValueReplaced) {\n         missingValueReplacedMap.put(fieldName, missingValueReplaced);\n     }\n \n     @Override\n-    public void addCommonTranformation(String fieldName, Object commonTranformation) {\n+    public void addCommonTranformation(final String fieldName, final Object commonTranformation) {\n         localTransformationMap.put(fieldName, commonTranformation);\n     }\n \n     @Override\n-    public void addLocalTranformation(String fieldName, Object commonTranformation) {\n+    public void addLocalTranformation(final String fieldName, final Object commonTranformation) {\n         commonTransformationMap.put(fieldName, commonTranformation);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ1MDM1OQ==", "url": "https://github.com/kiegroup/drools/pull/2961#discussion_r444450359", "bodyText": "Unmodifiable wrapper missing", "author": "danielezonca", "createdAt": "2020-06-23T19:15:47Z", "path": "kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/PMMLContextImpl.java", "diffHunk": "@@ -44,8 +45,28 @@ public void addMissingValueReplaced(String fieldName, Object missingValueReplace\n         missingValueReplacedMap.put(fieldName, missingValueReplaced);\n     }\n \n+    @Override\n+    public void addCommonTranformation(String fieldName, Object commonTranformation) {\n+        localTransformationMap.put(fieldName, commonTranformation);\n+    }\n+\n+    @Override\n+    public void addLocalTranformation(String fieldName, Object commonTranformation) {\n+        commonTransformationMap.put(fieldName, commonTranformation);\n+    }\n+\n     @Override\n     public Map<String, Object> getMissingValueReplacedMap() {\n         return Collections.unmodifiableMap(missingValueReplacedMap);\n     }\n+\n+    @Override\n+    public Map<String, Object> getCommonTransformationMap() {\n+        return commonTransformationMap;\n+    }\n+\n+    @Override\n+    public Map<String, Object> getLocalTransformationMap() {\n+        return localTransformationMap;", "originalCommit": "85a162ead002405e8762b88ef681eb2f58a98b5d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "48dfe1575e04da10aa84dc9b0abe69e8b4beeed9", "chunk": "diff --git a/kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/PMMLContextImpl.java b/kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/PMMLContextImpl.java\nindex 6c09392bc6..c0af222763 100644\n--- a/kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/PMMLContextImpl.java\n+++ b/kie-pmml-trusty/kie-pmml-evaluator/kie-pmml-evaluator-core/src/main/java/org/kie/pmml/evaluator/core/PMMLContextImpl.java\n\n@@ -41,17 +41,17 @@ public class PMMLContextImpl extends ContextImpl implements PMMLContext {\n     }\n \n     @Override\n-    public void addMissingValueReplaced(String fieldName, Object missingValueReplaced) {\n+    public void addMissingValueReplaced(final String fieldName, final Object missingValueReplaced) {\n         missingValueReplacedMap.put(fieldName, missingValueReplaced);\n     }\n \n     @Override\n-    public void addCommonTranformation(String fieldName, Object commonTranformation) {\n+    public void addCommonTranformation(final String fieldName, final Object commonTranformation) {\n         localTransformationMap.put(fieldName, commonTranformation);\n     }\n \n     @Override\n-    public void addLocalTranformation(String fieldName, Object commonTranformation) {\n+    public void addLocalTranformation(final String fieldName, final Object commonTranformation) {\n         commonTransformationMap.put(fieldName, commonTranformation);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ1MTE3Nw==", "url": "https://github.com/kiegroup/drools/pull/2961#discussion_r444451177", "bodyText": "Final on last parameter.\nMissing TransformationDictionary parameter?", "author": "danielezonca", "createdAt": "2020-06-23T19:17:22Z", "path": "kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/provider/DroolsModelProvider.java", "diffHunk": "@@ -76,11 +76,12 @@ public E getKiePMMLModelFromPlugin(String packageName, DataDictionary dataDictio\n         }\n     }\n \n-    public abstract E getKiePMMLDroolsModel(DataDictionary dataDictionary, T model, Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap);\n+    public abstract E getKiePMMLDroolsModel(final DataDictionary dataDictionary, final TransformationDictionary transformationDictionary, final T model, Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap);\n \n-    public abstract KiePMMLDroolsAST getKiePMMLDroolsAST(DataDictionary dataDictionary, T model, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap);\n+    public abstract KiePMMLDroolsAST getKiePMMLDroolsAST(final DataDictionary dataDictionary, final T model, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap);", "originalCommit": "85a162ead002405e8762b88ef681eb2f58a98b5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcyNzIwNA==", "url": "https://github.com/kiegroup/drools/pull/2961#discussion_r444727204", "bodyText": "@danielezonca\nTransformations need to be executed on input data before evaluation. Rules are used only for evaluation, so it should not be needed", "author": "gitgabrio", "createdAt": "2020-06-24T08:23:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ1MTE3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "48dfe1575e04da10aa84dc9b0abe69e8b4beeed9", "chunk": "diff --git a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/provider/DroolsModelProvider.java b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/provider/DroolsModelProvider.java\nindex 3a9e1d96e7..2904952f3d 100644\n--- a/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/provider/DroolsModelProvider.java\n+++ b/kie-pmml-trusty/kie-pmml-models/kie-pmml-models-drools/kie-pmml-models-drools-common/src/main/java/org/kie/pmml/models/drools/provider/DroolsModelProvider.java\n\n@@ -76,7 +76,7 @@ public abstract class DroolsModelProvider<T extends Model, E extends KiePMMLDroo\n         }\n     }\n \n-    public abstract E getKiePMMLDroolsModel(final DataDictionary dataDictionary, final TransformationDictionary transformationDictionary, final T model, Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap);\n+    public abstract E getKiePMMLDroolsModel(final DataDictionary dataDictionary, final TransformationDictionary transformationDictionary, final T model, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap);\n \n     public abstract KiePMMLDroolsAST getKiePMMLDroolsAST(final DataDictionary dataDictionary, final T model, final Map<String, KiePMMLOriginalTypeGeneratedType> fieldTypeMap);\n \n"}}, {"oid": "48dfe1575e04da10aa84dc9b0abe69e8b4beeed9", "url": "https://github.com/kiegroup/drools/commit/48dfe1575e04da10aa84dc9b0abe69e8b4beeed9", "message": "[DROOLS-5448] Make all parameters \"final\" in modified classes. Fixed local transformations logic inside PMMLRuntimeImpl", "committedDate": "2020-06-24T08:19:50Z", "type": "commit"}, {"oid": "2cf24e7ad6d2f45ebcf43b83c6bd068a58d8099c", "url": "https://github.com/kiegroup/drools/commit/2cf24e7ad6d2f45ebcf43b83c6bd068a58d8099c", "message": "[DROOLS-5448] Return unmodifiable maps from PMMLContextImpl", "committedDate": "2020-06-24T08:27:49Z", "type": "commit"}]}