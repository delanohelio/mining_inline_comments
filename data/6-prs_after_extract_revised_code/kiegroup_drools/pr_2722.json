{"pr_number": 2722, "pr_title": "DROOLS-4936 : Unsaved changes dialog appears even if it just have been saved", "pr_createdAt": "2020-01-15T14:46:56Z", "pr_url": "https://github.com/kiegroup/drools/pull/2722", "timeline": [{"oid": "f804fe1ba20c4fa9d6c374661bf3d233444eb590", "url": "https://github.com/kiegroup/drools/commit/f804fe1ba20c4fa9d6c374661bf3d233444eb590", "message": "DROOLS-4936 : Unsaved changes dialog appears even if it just have been saved", "committedDate": "2020-01-20T11:14:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQxMDc1NA==", "url": "https://github.com/kiegroup/drools/pull/2722#discussion_r369410754", "bodyText": "What about case if only parameters or only operator is set to null?", "author": "dupliaka", "createdAt": "2020-01-22T07:54:12Z", "path": "drools-workbench-models/drools-workbench-models-datamodel-api/src/test/java/org/drools/workbench/models/datamodel/rule/CEPWindowTest.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package org.drools.workbench.models.datamodel.rule;\n+\n+import org.junit.Test;\n+\n+import java.util.HashMap;\n+\n+import static org.junit.Assert.*;\n+\n+public class CEPWindowTest {\n+\n+    @Test\n+    public void genericValues() {\n+        final CEPWindow cepWindow = new CEPWindow();\n+        cepWindow.setOperator(\"over window:time\");\n+        cepWindow.setParameters(new HashMap<>());\n+        assertNotNull(cepWindow.hashCode());\n+    }\n+\n+    @Test\n+    public void defaultValues() {\n+        final CEPWindow cepWindow = new CEPWindow();\n+\n+        assertNotNull(cepWindow.hashCode());\n+    }\n+\n+    @Test\n+    public void checkNulls() {", "originalCommit": "f804fe1ba20c4fa9d6c374661bf3d233444eb590", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQxOTc5OQ==", "url": "https://github.com/kiegroup/drools/pull/2722#discussion_r369419799", "bodyText": "I added more test coverage for these situations.", "author": "Rikkola", "createdAt": "2020-01-22T08:20:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQxMDc1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUyMDQ2Mg==", "url": "https://github.com/kiegroup/drools/pull/2722#discussion_r369520462", "bodyText": "IDK if it's an overkill but (at least) one test creating two equal instances of CEPWindow and verifying hashCodes are equal may be nice....", "author": "manstis", "createdAt": "2020-01-22T12:00:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQxMDc1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk5NTMwNg==", "url": "https://github.com/kiegroup/drools/pull/2722#discussion_r369995306", "bodyText": "@manstis I improved this test to not only check the hashcode, but to compare hashcodes between other instances. I hope the other workbench objects do not get jealous :)", "author": "Rikkola", "createdAt": "2020-01-23T08:57:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQxMDc1NA=="}], "type": "inlineReview", "revised_code": {"commit": "c2467ffd191e8d66803790288e664bb767c46656", "chunk": "diff --git a/drools-workbench-models/drools-workbench-models-datamodel-api/src/test/java/org/drools/workbench/models/datamodel/rule/CEPWindowTest.java b/drools-workbench-models/drools-workbench-models-datamodel-api/src/test/java/org/drools/workbench/models/datamodel/rule/CEPWindowTest.java\nindex bcd1cd4605..828bb6a432 100644\n--- a/drools-workbench-models/drools-workbench-models-datamodel-api/src/test/java/org/drools/workbench/models/datamodel/rule/CEPWindowTest.java\n+++ b/drools-workbench-models/drools-workbench-models-datamodel-api/src/test/java/org/drools/workbench/models/datamodel/rule/CEPWindowTest.java\n\n@@ -31,4 +31,22 @@ public class CEPWindowTest {\n \n         assertNotNull(cepWindow.hashCode());\n     }\n+\n+    @Test\n+    public void nullParameters() {\n+        final CEPWindow cepWindow = new CEPWindow();\n+        cepWindow.setOperator(\"over window:time\");\n+        cepWindow.setParameters(null);\n+\n+        assertNotNull(cepWindow.hashCode());\n+    }\n+\n+    @Test\n+    public void nullOperator() {\n+        final CEPWindow cepWindow = new CEPWindow();\n+        cepWindow.setOperator(null);\n+        cepWindow.setParameters(new HashMap<>());\n+\n+        assertNotNull(cepWindow.hashCode());\n+    }\n }\n\\ No newline at end of file\n"}}, {"oid": "c2467ffd191e8d66803790288e664bb767c46656", "url": "https://github.com/kiegroup/drools/commit/c2467ffd191e8d66803790288e664bb767c46656", "message": "DROOLS-4936 : Unsaved changes dialog appears even if it just have been saved", "committedDate": "2020-01-22T08:20:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTUxMTAzOA==", "url": "https://github.com/kiegroup/drools/pull/2722#discussion_r369511038", "bodyText": "License please.", "author": "manstis", "createdAt": "2020-01-22T11:39:33Z", "path": "drools-workbench-models/drools-workbench-models-datamodel-api/src/test/java/org/drools/workbench/models/datamodel/rule/CEPWindowTest.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package org.drools.workbench.models.datamodel.rule;", "originalCommit": "c2467ffd191e8d66803790288e664bb767c46656", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "274510f4cd9a310432909567a235f4ec0b19e65e", "chunk": "diff --git a/drools-workbench-models/drools-workbench-models-datamodel-api/src/test/java/org/drools/workbench/models/datamodel/rule/CEPWindowTest.java b/drools-workbench-models/drools-workbench-models-datamodel-api/src/test/java/org/drools/workbench/models/datamodel/rule/CEPWindowTest.java\nindex 828bb6a432..2641e9556e 100644\n--- a/drools-workbench-models/drools-workbench-models-datamodel-api/src/test/java/org/drools/workbench/models/datamodel/rule/CEPWindowTest.java\n+++ b/drools-workbench-models/drools-workbench-models-datamodel-api/src/test/java/org/drools/workbench/models/datamodel/rule/CEPWindowTest.java\n\n@@ -1,52 +1,167 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n package org.drools.workbench.models.datamodel.rule;\n \n+import org.junit.Before;\n import org.junit.Test;\n \n import java.util.HashMap;\n+import java.util.Map;\n \n import static org.junit.Assert.*;\n \n public class CEPWindowTest {\n \n+    private CEPWindow cepWindowAllFieldsFilled;\n+    private CEPWindow cepWindowDefaultValues;\n+    private CEPWindow cepWindowNullValues;\n+    private CEPWindow cepWindowNullParameters;\n+    private CEPWindow cepWindowNullOperator;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+\n+        cepWindowAllFieldsFilled = new CEPWindow();\n+        cepWindowAllFieldsFilled.setOperator(\"over window:time\");\n+        cepWindowAllFieldsFilled.setParameters(makeTestParameters());\n+\n+        cepWindowDefaultValues = new CEPWindow();\n+\n+        cepWindowNullValues = new CEPWindow();\n+        cepWindowNullValues.setOperator(null);\n+        cepWindowNullValues.setParameters(null);\n+\n+        cepWindowNullParameters = new CEPWindow();\n+        cepWindowNullParameters.setOperator(\"over window:time\");\n+        cepWindowNullParameters.setParameters(null);\n+\n+        cepWindowNullOperator = new CEPWindow();\n+        cepWindowNullOperator.setOperator(null);\n+        cepWindowNullOperator.setParameters(makeTestParameters());\n+    }\n+\n+    private Map<String, String> makeTestParameters() {\n+        final HashMap<String, String> result = new HashMap<>();\n+        result.put(\"a\", \"b\");\n+        return result;\n+    }\n+\n     @Test\n     public void genericValues() {\n-        final CEPWindow cepWindow = new CEPWindow();\n-        cepWindow.setOperator(\"over window:time\");\n-        cepWindow.setParameters(new HashMap<>());\n-        assertNotNull(cepWindow.hashCode());\n+\n+        final CEPWindow other = new CEPWindow();\n+        other.setOperator(\"over window:time\");\n+        other.setParameters(makeTestParameters());\n+\n+        assertNotNull(cepWindowAllFieldsFilled.hashCode());\n+        assertNotNull(other.hashCode());\n+\n+        assertEquals(cepWindowAllFieldsFilled.hashCode(), other.hashCode());\n+    }\n+\n+    @Test\n+    public void genericValuesDifferentParameters() {\n+\n+        final CEPWindow other = new CEPWindow();\n+        other.setOperator(\"over window:time\");\n+        final HashMap<String, String> parameters = new HashMap<>();\n+        parameters.put(\"c\", \"d\");\n+        other.setParameters(parameters);\n+\n+        assertNotNull(cepWindowAllFieldsFilled.hashCode());\n+        assertNotNull(other.hashCode());\n+\n+        assertNotEquals(cepWindowAllFieldsFilled.hashCode(), other.hashCode());\n+    }\n+    @Test\n+    public void genericValuesDifferentOperator() {\n+\n+        final CEPWindow other = new CEPWindow();\n+        other.setOperator(\"over window:time\");\n+        other.setParameters(makeTestParameters());\n+\n+        assertNotNull(cepWindowAllFieldsFilled.hashCode());\n+        assertNotNull(other.hashCode());\n+\n+        assertNotEquals(cepWindowAllFieldsFilled.hashCode(), other.hashCode());\n     }\n \n     @Test\n     public void defaultValues() {\n-        final CEPWindow cepWindow = new CEPWindow();\n+        final CEPWindow other = new CEPWindow();\n \n-        assertNotNull(cepWindow.hashCode());\n+        assertNotNull(cepWindowDefaultValues.hashCode());\n+        assertNotNull(other.hashCode());\n+\n+        assertEquals(cepWindowDefaultValues.hashCode(), other.hashCode());\n     }\n \n     @Test\n     public void checkNulls() {\n-        final CEPWindow cepWindow = new CEPWindow();\n-        cepWindow.setOperator(null);\n-        cepWindow.setParameters(null);\n \n-        assertNotNull(cepWindow.hashCode());\n+        final CEPWindow other = new CEPWindow();\n+        other.setOperator(null);\n+        other.setParameters(null);\n+\n+        assertNotNull(cepWindowNullValues.hashCode());\n+        assertNotNull(other.hashCode());\n+\n+        assertEquals(cepWindowNullValues.hashCode(), other.hashCode());\n     }\n \n     @Test\n     public void nullParameters() {\n-        final CEPWindow cepWindow = new CEPWindow();\n-        cepWindow.setOperator(\"over window:time\");\n-        cepWindow.setParameters(null);\n \n-        assertNotNull(cepWindow.hashCode());\n+        final CEPWindow other = new CEPWindow();\n+        other.setOperator(\"over window:time\");\n+        other.setParameters(null);\n+\n+        assertNotNull(cepWindowNullParameters.hashCode());\n+        assertNotNull(other.hashCode());\n+\n+        assertEquals(cepWindowNullParameters.hashCode(), other.hashCode());\n     }\n \n     @Test\n     public void nullOperator() {\n-        final CEPWindow cepWindow = new CEPWindow();\n-        cepWindow.setOperator(null);\n-        cepWindow.setParameters(new HashMap<>());\n+        final CEPWindow other = new CEPWindow();\n+        other.setOperator(null);\n+        other.setParameters(makeTestParameters());\n+\n+        assertNotNull(cepWindowNullOperator.hashCode());\n+        assertNotNull(other.hashCode());\n+\n+        assertEquals(cepWindowNullOperator.hashCode(), other.hashCode());\n+    }\n+\n+    @Test\n+    public void hashCodesShouldNotBeEqual() {\n+\n+        assertNotEquals(cepWindowAllFieldsFilled.hashCode(), cepWindowDefaultValues.hashCode());\n+        assertNotEquals(cepWindowAllFieldsFilled.hashCode(), cepWindowNullValues.hashCode());\n+        assertNotEquals(cepWindowAllFieldsFilled.hashCode(), cepWindowNullParameters.hashCode());\n+        assertNotEquals(cepWindowAllFieldsFilled.hashCode(), cepWindowNullOperator.hashCode());\n+\n+        assertEquals(cepWindowDefaultValues.hashCode(), cepWindowNullValues.hashCode()); // equals because at least at the moment nulls are defaults\n+        assertNotEquals(cepWindowDefaultValues.hashCode(), cepWindowNullParameters.hashCode());\n+        assertNotEquals(cepWindowDefaultValues.hashCode(), cepWindowNullOperator.hashCode());\n+\n+        assertNotEquals(cepWindowNullValues.hashCode(), cepWindowNullParameters.hashCode());\n+        assertNotEquals(cepWindowNullValues.hashCode(), cepWindowNullOperator.hashCode());\n \n-        assertNotNull(cepWindow.hashCode());\n+        assertNotEquals(cepWindowNullParameters.hashCode(), cepWindowNullOperator.hashCode());\n     }\n }\n\\ No newline at end of file\n"}}, {"oid": "274510f4cd9a310432909567a235f4ec0b19e65e", "url": "https://github.com/kiegroup/drools/commit/274510f4cd9a310432909567a235f4ec0b19e65e", "message": "DROOLS-4936 : Unsaved changes dialog appears even if it just have been saved", "committedDate": "2020-01-23T08:55:56Z", "type": "forcePushed"}, {"oid": "c5dafcacea6b64fda5184e5b6cba27d564c11d0d", "url": "https://github.com/kiegroup/drools/commit/c5dafcacea6b64fda5184e5b6cba27d564c11d0d", "message": "DROOLS-4936 : Unsaved changes dialog appears even if it just have been saved", "committedDate": "2020-01-23T08:58:48Z", "type": "forcePushed"}, {"oid": "fcfd59e58e09663a863c417eecaf9060c5f8995f", "url": "https://github.com/kiegroup/drools/commit/fcfd59e58e09663a863c417eecaf9060c5f8995f", "message": "DROOLS-4936 : Unsaved changes dialog appears even if it just have been saved", "committedDate": "2020-01-23T08:59:44Z", "type": "commit"}, {"oid": "fcfd59e58e09663a863c417eecaf9060c5f8995f", "url": "https://github.com/kiegroup/drools/commit/fcfd59e58e09663a863c417eecaf9060c5f8995f", "message": "DROOLS-4936 : Unsaved changes dialog appears even if it just have been saved", "committedDate": "2020-01-23T08:59:44Z", "type": "forcePushed"}]}