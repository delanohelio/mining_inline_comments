{"pr_number": 2736, "pr_title": "DROOLS-4973: Adding additional test cases for FEEL expressions", "pr_createdAt": "2020-01-28T10:24:00Z", "pr_url": "https://github.com/kiegroup/drools/pull/2736", "timeline": [{"oid": "76b31c0f346225db64eaabe2f0596a2b38bafad1", "url": "https://github.com/kiegroup/drools/commit/76b31c0f346225db64eaabe2f0596a2b38bafad1", "message": "DROOLS-4973: Adding additional test cases for FEEL expressions", "committedDate": "2020-01-28T10:22:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM5NjI5Mw==", "url": "https://github.com/kiegroup/drools/pull/2736#discussion_r372396293", "bodyText": "Also different value, not just order, wee need to fix", "author": "jomarko", "createdAt": "2020-01-29T13:58:26Z", "path": "drools-scenario-simulation/drools-scenario-simulation-backend/src/test/java/org/drools/scenariosimulation/backend/expression/DMNFeelExpressionEvaluatorTest.java", "diffHunk": "@@ -78,6 +78,27 @@ public void evaluateUnaryExpression() {\n         assertTrue(expressionEvaluator.evaluateUnaryExpression(new TextNode(\" ?[1] = 23\").toString(), contextListValue2, List.class));\n         assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\" ?[1] = 32\").toString(), contextListValue2, List.class));\n \n+        Map<String, Object> firstMap = new HashMap<>();\n+        firstMap.put(\"Price\", new BigDecimal(2000));\n+        firstMap.put(\"Name\", \"PC\");\n+        Map<String, Object> secondMap = new HashMap<>();\n+        secondMap.put(\"Price\", new BigDecimal(3300));\n+        secondMap.put(\"Name\", \"CAR\");\n+        List<Map<String, Object>> context = Arrays.asList(firstMap, secondMap);\n+        assertTrue(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Price: 2000,Name:\\\"PC\\\"}, {Price:3300,Name:\\\"CAR\\\"}]\").toString(), context, List.class));\n+        assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Price: 2001,Name:\\\"PC\\\"}, {Price:3301,Name:\\\"CAR\\\"}]\").toString(), context, List.class));\n+        assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Price: 2000, Name:\\\"PCA\\\"}, {Price:3300,Name:\\\"CARE\\\"}]\").toString(), context, List.class));\n+        assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Pric: 2000, Name:\\\"PC\\\"}, {Price:3300,Names:\\\"CARE\\\"}]\").toString(), context, List.class));\n+        /* Different order: Failure */\n+        assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Price:3300,Name:\\\"CARE\\\"}, {Price: 2000,Name:\\\"PC\\\"}]\").toString(), context, List.class));", "originalCommit": "76b31c0f346225db64eaabe2f0596a2b38bafad1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQxMzk1NA==", "url": "https://github.com/kiegroup/drools/pull/2736#discussion_r372413954", "bodyText": "@jomarko Done, thank you!", "author": "yesamer", "createdAt": "2020-01-29T14:29:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM5NjI5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "d99b67a2ef83033d64bf16768fcefdf9c5329442", "chunk": "diff --git a/drools-scenario-simulation/drools-scenario-simulation-backend/src/test/java/org/drools/scenariosimulation/backend/expression/DMNFeelExpressionEvaluatorTest.java b/drools-scenario-simulation/drools-scenario-simulation-backend/src/test/java/org/drools/scenariosimulation/backend/expression/DMNFeelExpressionEvaluatorTest.java\nindex d9bfec01a1..072c48d177 100644\n--- a/drools-scenario-simulation/drools-scenario-simulation-backend/src/test/java/org/drools/scenariosimulation/backend/expression/DMNFeelExpressionEvaluatorTest.java\n+++ b/drools-scenario-simulation/drools-scenario-simulation-backend/src/test/java/org/drools/scenariosimulation/backend/expression/DMNFeelExpressionEvaluatorTest.java\n\n@@ -84,20 +84,22 @@ public class DMNFeelExpressionEvaluatorTest {\n         Map<String, Object> secondMap = new HashMap<>();\n         secondMap.put(\"Price\", new BigDecimal(3300));\n         secondMap.put(\"Name\", \"CAR\");\n+        String firstParameter = \"{Price: 2000,Name:\\\"PC\\\"}\";\n+        String secondParameter = \"{Price:3300, Name:\\\"CAR\\\"}\";\n         List<Map<String, Object>> context = Arrays.asList(firstMap, secondMap);\n-        assertTrue(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Price: 2000,Name:\\\"PC\\\"}, {Price:3300,Name:\\\"CAR\\\"}]\").toString(), context, List.class));\n+        assertTrue(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[\" + firstParameter + \", \" + secondParameter + \"]\").toString(), context, List.class));\n         assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Price: 2001,Name:\\\"PC\\\"}, {Price:3301,Name:\\\"CAR\\\"}]\").toString(), context, List.class));\n         assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Price: 2000, Name:\\\"PCA\\\"}, {Price:3300,Name:\\\"CARE\\\"}]\").toString(), context, List.class));\n         assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Pric: 2000, Name:\\\"PC\\\"}, {Price:3300,Names:\\\"CARE\\\"}]\").toString(), context, List.class));\n         /* Different order: Failure */\n-        assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Price:3300,Name:\\\"CARE\\\"}, {Price: 2000,Name:\\\"PC\\\"}]\").toString(), context, List.class));\n+        assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[\" + secondParameter + \", \" + firstParameter + \"]\").toString(), context, List.class));\n         /* IN operator */\n-        assertTrue(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"{Price: 2000,Name:\\\"PC\\\"} in ?\").toString(), context, List.class));\n-        assertTrue(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"{Price: 2000,Name:\\\"PC\\\"} in ?\").toString(), context, List.class));\n+        assertTrue(expressionEvaluator.evaluateUnaryExpression(new TextNode(firstParameter + \" in ?\").toString(), context, List.class));\n+        assertTrue(expressionEvaluator.evaluateUnaryExpression(new TextNode(secondParameter + \" in ?\").toString(), context, List.class));\n         assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"{Price: 2001,Name:\\\"PC\\\"} in ?\").toString(), context, List.class));\n         assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"{Price: 3300,Name:\\\"CARE\\\"} in ?\").toString(), context, List.class));\n-        assertTrue(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"({Price: 2000,Name:\\\"PC\\\"} in ?) and ({Price:3300,Name:\\\"CAR\\\"} in ?)\").toString(), context, List.class));\n-        assertTrue(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"({Price:3300,Name:\\\"CAR\\\"} in ?) and ({Price: 2000,Name:\\\"PC\\\"} in ?)\").toString(), context, List.class));\n+        assertTrue(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"(\" + firstParameter + \" in ?) and (\"+ secondParameter +\" in ?)\").toString(), context, List.class));\n+        assertTrue(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"(\" + secondParameter + \" in ?) and (\"+ firstParameter +\" in ?)\").toString(), context, List.class));\n \n         assertThatThrownBy(() -> expressionEvaluator.evaluateUnaryExpression(\"variable\", null, null))\n                 .isInstanceOf(IllegalArgumentException.class)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM5NjcyMg==", "url": "https://github.com/kiegroup/drools/pull/2736#discussion_r372396722", "bodyText": "same lines", "author": "jomarko", "createdAt": "2020-01-29T13:59:11Z", "path": "drools-scenario-simulation/drools-scenario-simulation-backend/src/test/java/org/drools/scenariosimulation/backend/expression/DMNFeelExpressionEvaluatorTest.java", "diffHunk": "@@ -78,6 +78,27 @@ public void evaluateUnaryExpression() {\n         assertTrue(expressionEvaluator.evaluateUnaryExpression(new TextNode(\" ?[1] = 23\").toString(), contextListValue2, List.class));\n         assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\" ?[1] = 32\").toString(), contextListValue2, List.class));\n \n+        Map<String, Object> firstMap = new HashMap<>();\n+        firstMap.put(\"Price\", new BigDecimal(2000));\n+        firstMap.put(\"Name\", \"PC\");\n+        Map<String, Object> secondMap = new HashMap<>();\n+        secondMap.put(\"Price\", new BigDecimal(3300));\n+        secondMap.put(\"Name\", \"CAR\");\n+        List<Map<String, Object>> context = Arrays.asList(firstMap, secondMap);\n+        assertTrue(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Price: 2000,Name:\\\"PC\\\"}, {Price:3300,Name:\\\"CAR\\\"}]\").toString(), context, List.class));\n+        assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Price: 2001,Name:\\\"PC\\\"}, {Price:3301,Name:\\\"CAR\\\"}]\").toString(), context, List.class));\n+        assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Price: 2000, Name:\\\"PCA\\\"}, {Price:3300,Name:\\\"CARE\\\"}]\").toString(), context, List.class));\n+        assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Pric: 2000, Name:\\\"PC\\\"}, {Price:3300,Names:\\\"CARE\\\"}]\").toString(), context, List.class));\n+        /* Different order: Failure */\n+        assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Price:3300,Name:\\\"CARE\\\"}, {Price: 2000,Name:\\\"PC\\\"}]\").toString(), context, List.class));\n+        /* IN operator */\n+        assertTrue(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"{Price: 2000,Name:\\\"PC\\\"} in ?\").toString(), context, List.class));\n+        assertTrue(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"{Price: 2000,Name:\\\"PC\\\"} in ?\").toString(), context, List.class));", "originalCommit": "76b31c0f346225db64eaabe2f0596a2b38bafad1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQxNDAxMQ==", "url": "https://github.com/kiegroup/drools/pull/2736#discussion_r372414011", "bodyText": "@jomarko Done, thank you!", "author": "yesamer", "createdAt": "2020-01-29T14:29:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM5NjcyMg=="}], "type": "inlineReview", "revised_code": {"commit": "d99b67a2ef83033d64bf16768fcefdf9c5329442", "chunk": "diff --git a/drools-scenario-simulation/drools-scenario-simulation-backend/src/test/java/org/drools/scenariosimulation/backend/expression/DMNFeelExpressionEvaluatorTest.java b/drools-scenario-simulation/drools-scenario-simulation-backend/src/test/java/org/drools/scenariosimulation/backend/expression/DMNFeelExpressionEvaluatorTest.java\nindex d9bfec01a1..072c48d177 100644\n--- a/drools-scenario-simulation/drools-scenario-simulation-backend/src/test/java/org/drools/scenariosimulation/backend/expression/DMNFeelExpressionEvaluatorTest.java\n+++ b/drools-scenario-simulation/drools-scenario-simulation-backend/src/test/java/org/drools/scenariosimulation/backend/expression/DMNFeelExpressionEvaluatorTest.java\n\n@@ -84,20 +84,22 @@ public class DMNFeelExpressionEvaluatorTest {\n         Map<String, Object> secondMap = new HashMap<>();\n         secondMap.put(\"Price\", new BigDecimal(3300));\n         secondMap.put(\"Name\", \"CAR\");\n+        String firstParameter = \"{Price: 2000,Name:\\\"PC\\\"}\";\n+        String secondParameter = \"{Price:3300, Name:\\\"CAR\\\"}\";\n         List<Map<String, Object>> context = Arrays.asList(firstMap, secondMap);\n-        assertTrue(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Price: 2000,Name:\\\"PC\\\"}, {Price:3300,Name:\\\"CAR\\\"}]\").toString(), context, List.class));\n+        assertTrue(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[\" + firstParameter + \", \" + secondParameter + \"]\").toString(), context, List.class));\n         assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Price: 2001,Name:\\\"PC\\\"}, {Price:3301,Name:\\\"CAR\\\"}]\").toString(), context, List.class));\n         assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Price: 2000, Name:\\\"PCA\\\"}, {Price:3300,Name:\\\"CARE\\\"}]\").toString(), context, List.class));\n         assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Pric: 2000, Name:\\\"PC\\\"}, {Price:3300,Names:\\\"CARE\\\"}]\").toString(), context, List.class));\n         /* Different order: Failure */\n-        assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[{Price:3300,Name:\\\"CARE\\\"}, {Price: 2000,Name:\\\"PC\\\"}]\").toString(), context, List.class));\n+        assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"?=[\" + secondParameter + \", \" + firstParameter + \"]\").toString(), context, List.class));\n         /* IN operator */\n-        assertTrue(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"{Price: 2000,Name:\\\"PC\\\"} in ?\").toString(), context, List.class));\n-        assertTrue(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"{Price: 2000,Name:\\\"PC\\\"} in ?\").toString(), context, List.class));\n+        assertTrue(expressionEvaluator.evaluateUnaryExpression(new TextNode(firstParameter + \" in ?\").toString(), context, List.class));\n+        assertTrue(expressionEvaluator.evaluateUnaryExpression(new TextNode(secondParameter + \" in ?\").toString(), context, List.class));\n         assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"{Price: 2001,Name:\\\"PC\\\"} in ?\").toString(), context, List.class));\n         assertFalse(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"{Price: 3300,Name:\\\"CARE\\\"} in ?\").toString(), context, List.class));\n-        assertTrue(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"({Price: 2000,Name:\\\"PC\\\"} in ?) and ({Price:3300,Name:\\\"CAR\\\"} in ?)\").toString(), context, List.class));\n-        assertTrue(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"({Price:3300,Name:\\\"CAR\\\"} in ?) and ({Price: 2000,Name:\\\"PC\\\"} in ?)\").toString(), context, List.class));\n+        assertTrue(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"(\" + firstParameter + \" in ?) and (\"+ secondParameter +\" in ?)\").toString(), context, List.class));\n+        assertTrue(expressionEvaluator.evaluateUnaryExpression(new TextNode(\"(\" + secondParameter + \" in ?) and (\"+ firstParameter +\" in ?)\").toString(), context, List.class));\n \n         assertThatThrownBy(() -> expressionEvaluator.evaluateUnaryExpression(\"variable\", null, null))\n                 .isInstanceOf(IllegalArgumentException.class)\n"}}, {"oid": "d99b67a2ef83033d64bf16768fcefdf9c5329442", "url": "https://github.com/kiegroup/drools/commit/d99b67a2ef83033d64bf16768fcefdf9c5329442", "message": "DROOLS-4973: Adding additional test cases for FEEL expressions", "committedDate": "2020-01-29T14:29:15Z", "type": "commit"}]}