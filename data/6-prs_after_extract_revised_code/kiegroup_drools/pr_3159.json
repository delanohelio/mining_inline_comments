{"pr_number": 3159, "pr_title": "[DROOLS-5658] [DROOLS-4844] [DROOLS-5657] [DROOLS-2836] [DROOLS-5699]", "pr_createdAt": "2020-10-12T14:23:52Z", "pr_url": "https://github.com/kiegroup/drools/pull/3159", "timeline": [{"oid": "7cac3d73e5b271449f23472bb077791456933e98", "url": "https://github.com/kiegroup/drools/commit/7cac3d73e5b271449f23472bb077791456933e98", "message": "Sonarcloud", "committedDate": "2020-10-12T21:28:42Z", "type": "forcePushed"}, {"oid": "c51fa98beb73ec23d0ded4482d1bfcacad30c750", "url": "https://github.com/kiegroup/drools/commit/c51fa98beb73ec23d0ded4482d1bfcacad30c750", "message": "Sonarcloud", "committedDate": "2020-10-13T08:04:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgwODM1OA==", "url": "https://github.com/kiegroup/drools/pull/3159#discussion_r503808358", "bodyText": "It's better to change the variable name from \"kproj\"? (e.g. to \"model\")", "author": "tkobayas", "createdAt": "2020-10-13T09:34:50Z", "path": "drools-model/drools-model-compiler/src/test/java/org/drools/modelcompiler/BaseModelTest.java", "diffHunk": "@@ -210,7 +215,7 @@ public KieFile( String path, String content ) {\n \n     private KieModuleModel getKieModuleModelWithAlphaNetworkCompiler() {\n         KieModuleModel kproj = KieServices.get().newKieModuleModel();\n-        kproj.setConfigurationProperty( org.drools.compiler.kie.builder.impl.KieContainerImpl.ALPHA_NETWORK_COMPILER_OPTION, \"true\" );\n+        kproj.setConfigurationProperty(AlphaNetworkCompilerOption.PROPERTY_NAME, AlphaNetworkCompilerOption.INMEMORY.toString());\n         return kproj;", "originalCommit": "c51fa98beb73ec23d0ded4482d1bfcacad30c750", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e30d54b8fdc994abac85f49043faee61993e55a4", "chunk": "diff --git a/drools-model/drools-model-compiler/src/test/java/org/drools/modelcompiler/BaseModelTest.java b/drools-model/drools-model-compiler/src/test/java/org/drools/modelcompiler/BaseModelTest.java\nindex 243e8d25eb..083355b2ce 100644\n--- a/drools-model/drools-model-compiler/src/test/java/org/drools/modelcompiler/BaseModelTest.java\n+++ b/drools-model/drools-model-compiler/src/test/java/org/drools/modelcompiler/BaseModelTest.java\n\n@@ -214,8 +214,8 @@ public abstract class BaseModelTest {\n     }\n \n     private KieModuleModel getKieModuleModelWithAlphaNetworkCompiler() {\n-        KieModuleModel kproj = KieServices.get().newKieModuleModel();\n-        kproj.setConfigurationProperty(AlphaNetworkCompilerOption.PROPERTY_NAME, AlphaNetworkCompilerOption.INMEMORY.toString());\n-        return kproj;\n+        KieModuleModel model = KieServices.get().newKieModuleModel();\n+        model.setConfigurationProperty(AlphaNetworkCompilerOption.PROPERTY_NAME, AlphaNetworkCompilerOption.INMEMORY.toString());\n+        return model;\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgwODczOQ==", "url": "https://github.com/kiegroup/drools/pull/3159#discussion_r503808739", "bodyText": "It's better to change the variable name from \"kproj\"? (e.g. to \"model\")", "author": "tkobayas", "createdAt": "2020-10-13T09:35:21Z", "path": "drools-alphanetwork-compiler/src/test/java/org/drools/ancompiler/BaseModelTest.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * Copyright 2005 JBoss Inc\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.ancompiler;\n+\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import org.drools.compiler.kie.builder.impl.DrlProject;\n+import org.drools.compiler.kie.builder.impl.InternalKieModule;\n+import org.drools.core.impl.InternalKnowledgeBase;\n+import org.drools.core.reteoo.ObjectTypeNode;\n+import org.drools.core.reteoo.Rete;\n+import org.drools.modelcompiler.ExecutableModelFlowProject;\n+import org.drools.modelcompiler.ExecutableModelProject;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.KieBuilder;\n+import org.kie.api.builder.KieFileSystem;\n+import org.kie.api.builder.Message;\n+import org.kie.api.builder.ReleaseId;\n+import org.kie.api.builder.model.KieModuleModel;\n+import org.kie.api.runtime.ClassObjectFilter;\n+import org.kie.api.runtime.KieContainer;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.builder.conf.AlphaNetworkCompilerOption;\n+\n+import static java.util.Arrays.asList;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+@RunWith(Parameterized.class)\n+public abstract class BaseModelTest {\n+    public enum RUN_TYPE {\n+        FLOW_DSL( false ),\n+        PATTERN_DSL( false ),\n+        STANDARD_FROM_DRL( false ),\n+        STANDARD_WITH_ALPHA_NETWORK( true ),\n+        PATTERN_WITH_ALPHA_NETWORK( true ),\n+        FLOW_WITH_ALPHA_NETWORK( true );\n+\n+        private boolean alphaNetworkCompiler;\n+\n+        RUN_TYPE( boolean isAlphaNetworkCompiler ) {\n+            this.alphaNetworkCompiler = isAlphaNetworkCompiler;\n+        }\n+\n+        public boolean isAlphaNetworkCompiler() {\n+            return alphaNetworkCompiler;\n+        }\n+    }\n+\n+\n+    final static Object[] WITH_ALPHA_NETWORK = {\n+            RUN_TYPE.STANDARD_FROM_DRL,\n+            RUN_TYPE.FLOW_DSL,\n+            RUN_TYPE.PATTERN_DSL,\n+            RUN_TYPE.STANDARD_WITH_ALPHA_NETWORK,\n+            RUN_TYPE.PATTERN_WITH_ALPHA_NETWORK,\n+            RUN_TYPE.FLOW_WITH_ALPHA_NETWORK,\n+    };\n+\n+    @Parameters(name = \"{0}\")\n+    public static Object[] params() {\n+        return WITH_ALPHA_NETWORK;\n+    }\n+\n+    protected final RUN_TYPE testRunType;\n+\n+    public BaseModelTest(RUN_TYPE testRunType ) {\n+        this.testRunType = testRunType;\n+    }\n+\n+    protected KieSession getKieSession(String... rules) {\n+        KieModuleModel kproj = testRunType.isAlphaNetworkCompiler() ? getKieModuleModelWithAlphaNetworkCompiler() : null;\n+        return getKieSession(kproj, rules);", "originalCommit": "c51fa98beb73ec23d0ded4482d1bfcacad30c750", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e30d54b8fdc994abac85f49043faee61993e55a4", "chunk": "diff --git a/drools-alphanetwork-compiler/src/test/java/org/drools/ancompiler/BaseModelTest.java b/drools-alphanetwork-compiler/src/test/java/org/drools/ancompiler/BaseModelTest.java\nindex 020d8ed3cb..0db4bf5b31 100644\n--- a/drools-alphanetwork-compiler/src/test/java/org/drools/ancompiler/BaseModelTest.java\n+++ b/drools-alphanetwork-compiler/src/test/java/org/drools/ancompiler/BaseModelTest.java\n\n@@ -45,6 +45,7 @@ import static java.util.Arrays.asList;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n+// Copied from org.drools.modelcompiler.BaseModelTest. To be removed after https://issues.redhat.com/browse/DROOLS-5485\n @RunWith(Parameterized.class)\n public abstract class BaseModelTest {\n     public enum RUN_TYPE {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgwOTAwMA==", "url": "https://github.com/kiegroup/drools/pull/3159#discussion_r503809000", "bodyText": "It's better to change the variable name from \"kproj\"? (e.g. to \"model\")", "author": "tkobayas", "createdAt": "2020-10-13T09:35:42Z", "path": "drools-alphanetwork-compiler/src/test/java/org/drools/ancompiler/BaseModelTest.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * Copyright 2005 JBoss Inc\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.ancompiler;\n+\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import org.drools.compiler.kie.builder.impl.DrlProject;\n+import org.drools.compiler.kie.builder.impl.InternalKieModule;\n+import org.drools.core.impl.InternalKnowledgeBase;\n+import org.drools.core.reteoo.ObjectTypeNode;\n+import org.drools.core.reteoo.Rete;\n+import org.drools.modelcompiler.ExecutableModelFlowProject;\n+import org.drools.modelcompiler.ExecutableModelProject;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.KieBuilder;\n+import org.kie.api.builder.KieFileSystem;\n+import org.kie.api.builder.Message;\n+import org.kie.api.builder.ReleaseId;\n+import org.kie.api.builder.model.KieModuleModel;\n+import org.kie.api.runtime.ClassObjectFilter;\n+import org.kie.api.runtime.KieContainer;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.builder.conf.AlphaNetworkCompilerOption;\n+\n+import static java.util.Arrays.asList;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+@RunWith(Parameterized.class)\n+public abstract class BaseModelTest {\n+    public enum RUN_TYPE {\n+        FLOW_DSL( false ),\n+        PATTERN_DSL( false ),\n+        STANDARD_FROM_DRL( false ),\n+        STANDARD_WITH_ALPHA_NETWORK( true ),\n+        PATTERN_WITH_ALPHA_NETWORK( true ),\n+        FLOW_WITH_ALPHA_NETWORK( true );\n+\n+        private boolean alphaNetworkCompiler;\n+\n+        RUN_TYPE( boolean isAlphaNetworkCompiler ) {\n+            this.alphaNetworkCompiler = isAlphaNetworkCompiler;\n+        }\n+\n+        public boolean isAlphaNetworkCompiler() {\n+            return alphaNetworkCompiler;\n+        }\n+    }\n+\n+\n+    final static Object[] WITH_ALPHA_NETWORK = {\n+            RUN_TYPE.STANDARD_FROM_DRL,\n+            RUN_TYPE.FLOW_DSL,\n+            RUN_TYPE.PATTERN_DSL,\n+            RUN_TYPE.STANDARD_WITH_ALPHA_NETWORK,\n+            RUN_TYPE.PATTERN_WITH_ALPHA_NETWORK,\n+            RUN_TYPE.FLOW_WITH_ALPHA_NETWORK,\n+    };\n+\n+    @Parameters(name = \"{0}\")\n+    public static Object[] params() {\n+        return WITH_ALPHA_NETWORK;\n+    }\n+\n+    protected final RUN_TYPE testRunType;\n+\n+    public BaseModelTest(RUN_TYPE testRunType ) {\n+        this.testRunType = testRunType;\n+    }\n+\n+    protected KieSession getKieSession(String... rules) {\n+        KieModuleModel kproj = testRunType.isAlphaNetworkCompiler() ? getKieModuleModelWithAlphaNetworkCompiler() : null;\n+        return getKieSession(kproj, rules);\n+    }\n+\n+    protected KieSession getKieSession(KieModuleModel model, String... stringRules) {\n+        return getKieContainer( model, stringRules ).newKieSession();\n+    }\n+\n+    protected KieContainer getKieContainer( KieModuleModel model, String... stringRules ) {\n+        return getKieContainer( model, toKieFiles( stringRules ) );\n+    }\n+\n+    protected KieContainer getKieContainer( KieModuleModel model, KieFile... stringRules ) {\n+        KieServices ks = KieServices.get();\n+        ReleaseId releaseId = ks.newReleaseId( \"org.kie\", \"kjar-test-\" + UUID.randomUUID(), \"1.0\" );\n+\n+        KieBuilder kieBuilder = createKieBuilder( ks, model, releaseId, stringRules );\n+        return ks.newKieContainer( releaseId );\n+    }\n+\n+    protected KieBuilder createKieBuilder( String... stringRules ) {\n+        KieServices ks = KieServices.get();\n+        ReleaseId releaseId = ks.newReleaseId( \"org.kie\", \"kjar-test-\" + UUID.randomUUID(), \"1.0\" );\n+        return createKieBuilder( ks, null, releaseId, false, toKieFiles( stringRules ) );\n+    }\n+\n+    protected KieBuilder createKieBuilder( KieServices ks, KieModuleModel model, ReleaseId releaseId, KieFile... stringRules ) {\n+        return createKieBuilder( ks, model, releaseId, true, stringRules );\n+    }\n+\n+    protected KieBuilder createKieBuilder( KieServices ks, KieModuleModel model, ReleaseId releaseId, boolean failIfBuildError, KieFile... stringRules ) {\n+        ks.getRepository().removeKieModule( releaseId );\n+\n+        KieFileSystem kfs = ks.newKieFileSystem();\n+        if ( model != null ) {\n+            kfs.writeKModuleXML( model.toXML() );\n+        }\n+        kfs.writePomXML( KJARUtils.getPom( releaseId ) );\n+        for (int i = 0; i < stringRules.length; i++) {\n+            kfs.write( stringRules[i].path, stringRules[i].content );\n+        }\n+\n+        KieBuilder kieBuilder;\n+        if (asList(RUN_TYPE.FLOW_DSL, RUN_TYPE.FLOW_WITH_ALPHA_NETWORK).contains(testRunType)) {\n+            kieBuilder = ks.newKieBuilder(kfs).buildAll(ExecutableModelFlowProject.class);\n+        } else if (asList(RUN_TYPE.PATTERN_DSL, RUN_TYPE.PATTERN_WITH_ALPHA_NETWORK).contains(testRunType)) {\n+            kieBuilder = ks.newKieBuilder(kfs).buildAll(ExecutableModelProject.class);\n+        } else {\n+            kieBuilder = ks.newKieBuilder(kfs).buildAll(DrlProject.class);\n+        }\n+\n+        if ( failIfBuildError ) {\n+            List<Message> messages = kieBuilder.getResults().getMessages();\n+            if ( !messages.isEmpty() ) {\n+                fail( messages.toString() );\n+            }\n+        }\n+\n+        return kieBuilder;\n+    }\n+\n+    protected KieModuleModel getDefaultKieModuleModel( KieServices ks ) {\n+        KieModuleModel kproj = ks.newKieModuleModel();\n+        kproj.newKieBaseModel( \"kbase\" ).setDefault( true ).newKieSessionModel( \"ksession\" ).setDefault( true );\n+        return kproj;", "originalCommit": "c51fa98beb73ec23d0ded4482d1bfcacad30c750", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e30d54b8fdc994abac85f49043faee61993e55a4", "chunk": "diff --git a/drools-alphanetwork-compiler/src/test/java/org/drools/ancompiler/BaseModelTest.java b/drools-alphanetwork-compiler/src/test/java/org/drools/ancompiler/BaseModelTest.java\nindex 020d8ed3cb..0db4bf5b31 100644\n--- a/drools-alphanetwork-compiler/src/test/java/org/drools/ancompiler/BaseModelTest.java\n+++ b/drools-alphanetwork-compiler/src/test/java/org/drools/ancompiler/BaseModelTest.java\n\n@@ -45,6 +45,7 @@ import static java.util.Arrays.asList;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n+// Copied from org.drools.modelcompiler.BaseModelTest. To be removed after https://issues.redhat.com/browse/DROOLS-5485\n @RunWith(Parameterized.class)\n public abstract class BaseModelTest {\n     public enum RUN_TYPE {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzgwOTE2Nw==", "url": "https://github.com/kiegroup/drools/pull/3159#discussion_r503809167", "bodyText": "It's better to change the variable name from \"kproj\"? (e.g. to \"model\")", "author": "tkobayas", "createdAt": "2020-10-13T09:35:56Z", "path": "drools-alphanetwork-compiler/src/test/java/org/drools/ancompiler/BaseModelTest.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * Copyright 2005 JBoss Inc\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.drools.ancompiler;\n+\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import org.drools.compiler.kie.builder.impl.DrlProject;\n+import org.drools.compiler.kie.builder.impl.InternalKieModule;\n+import org.drools.core.impl.InternalKnowledgeBase;\n+import org.drools.core.reteoo.ObjectTypeNode;\n+import org.drools.core.reteoo.Rete;\n+import org.drools.modelcompiler.ExecutableModelFlowProject;\n+import org.drools.modelcompiler.ExecutableModelProject;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+import org.kie.api.KieServices;\n+import org.kie.api.builder.KieBuilder;\n+import org.kie.api.builder.KieFileSystem;\n+import org.kie.api.builder.Message;\n+import org.kie.api.builder.ReleaseId;\n+import org.kie.api.builder.model.KieModuleModel;\n+import org.kie.api.runtime.ClassObjectFilter;\n+import org.kie.api.runtime.KieContainer;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.builder.conf.AlphaNetworkCompilerOption;\n+\n+import static java.util.Arrays.asList;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+@RunWith(Parameterized.class)\n+public abstract class BaseModelTest {\n+    public enum RUN_TYPE {\n+        FLOW_DSL( false ),\n+        PATTERN_DSL( false ),\n+        STANDARD_FROM_DRL( false ),\n+        STANDARD_WITH_ALPHA_NETWORK( true ),\n+        PATTERN_WITH_ALPHA_NETWORK( true ),\n+        FLOW_WITH_ALPHA_NETWORK( true );\n+\n+        private boolean alphaNetworkCompiler;\n+\n+        RUN_TYPE( boolean isAlphaNetworkCompiler ) {\n+            this.alphaNetworkCompiler = isAlphaNetworkCompiler;\n+        }\n+\n+        public boolean isAlphaNetworkCompiler() {\n+            return alphaNetworkCompiler;\n+        }\n+    }\n+\n+\n+    final static Object[] WITH_ALPHA_NETWORK = {\n+            RUN_TYPE.STANDARD_FROM_DRL,\n+            RUN_TYPE.FLOW_DSL,\n+            RUN_TYPE.PATTERN_DSL,\n+            RUN_TYPE.STANDARD_WITH_ALPHA_NETWORK,\n+            RUN_TYPE.PATTERN_WITH_ALPHA_NETWORK,\n+            RUN_TYPE.FLOW_WITH_ALPHA_NETWORK,\n+    };\n+\n+    @Parameters(name = \"{0}\")\n+    public static Object[] params() {\n+        return WITH_ALPHA_NETWORK;\n+    }\n+\n+    protected final RUN_TYPE testRunType;\n+\n+    public BaseModelTest(RUN_TYPE testRunType ) {\n+        this.testRunType = testRunType;\n+    }\n+\n+    protected KieSession getKieSession(String... rules) {\n+        KieModuleModel kproj = testRunType.isAlphaNetworkCompiler() ? getKieModuleModelWithAlphaNetworkCompiler() : null;\n+        return getKieSession(kproj, rules);\n+    }\n+\n+    protected KieSession getKieSession(KieModuleModel model, String... stringRules) {\n+        return getKieContainer( model, stringRules ).newKieSession();\n+    }\n+\n+    protected KieContainer getKieContainer( KieModuleModel model, String... stringRules ) {\n+        return getKieContainer( model, toKieFiles( stringRules ) );\n+    }\n+\n+    protected KieContainer getKieContainer( KieModuleModel model, KieFile... stringRules ) {\n+        KieServices ks = KieServices.get();\n+        ReleaseId releaseId = ks.newReleaseId( \"org.kie\", \"kjar-test-\" + UUID.randomUUID(), \"1.0\" );\n+\n+        KieBuilder kieBuilder = createKieBuilder( ks, model, releaseId, stringRules );\n+        return ks.newKieContainer( releaseId );\n+    }\n+\n+    protected KieBuilder createKieBuilder( String... stringRules ) {\n+        KieServices ks = KieServices.get();\n+        ReleaseId releaseId = ks.newReleaseId( \"org.kie\", \"kjar-test-\" + UUID.randomUUID(), \"1.0\" );\n+        return createKieBuilder( ks, null, releaseId, false, toKieFiles( stringRules ) );\n+    }\n+\n+    protected KieBuilder createKieBuilder( KieServices ks, KieModuleModel model, ReleaseId releaseId, KieFile... stringRules ) {\n+        return createKieBuilder( ks, model, releaseId, true, stringRules );\n+    }\n+\n+    protected KieBuilder createKieBuilder( KieServices ks, KieModuleModel model, ReleaseId releaseId, boolean failIfBuildError, KieFile... stringRules ) {\n+        ks.getRepository().removeKieModule( releaseId );\n+\n+        KieFileSystem kfs = ks.newKieFileSystem();\n+        if ( model != null ) {\n+            kfs.writeKModuleXML( model.toXML() );\n+        }\n+        kfs.writePomXML( KJARUtils.getPom( releaseId ) );\n+        for (int i = 0; i < stringRules.length; i++) {\n+            kfs.write( stringRules[i].path, stringRules[i].content );\n+        }\n+\n+        KieBuilder kieBuilder;\n+        if (asList(RUN_TYPE.FLOW_DSL, RUN_TYPE.FLOW_WITH_ALPHA_NETWORK).contains(testRunType)) {\n+            kieBuilder = ks.newKieBuilder(kfs).buildAll(ExecutableModelFlowProject.class);\n+        } else if (asList(RUN_TYPE.PATTERN_DSL, RUN_TYPE.PATTERN_WITH_ALPHA_NETWORK).contains(testRunType)) {\n+            kieBuilder = ks.newKieBuilder(kfs).buildAll(ExecutableModelProject.class);\n+        } else {\n+            kieBuilder = ks.newKieBuilder(kfs).buildAll(DrlProject.class);\n+        }\n+\n+        if ( failIfBuildError ) {\n+            List<Message> messages = kieBuilder.getResults().getMessages();\n+            if ( !messages.isEmpty() ) {\n+                fail( messages.toString() );\n+            }\n+        }\n+\n+        return kieBuilder;\n+    }\n+\n+    protected KieModuleModel getDefaultKieModuleModel( KieServices ks ) {\n+        KieModuleModel kproj = ks.newKieModuleModel();\n+        kproj.newKieBaseModel( \"kbase\" ).setDefault( true ).newKieSessionModel( \"ksession\" ).setDefault( true );\n+        return kproj;\n+    }\n+\n+    public static <T> List<T> getObjectsIntoList(KieSession ksession, Class<T> clazz) {\n+        return (List<T>) ksession.getObjects(new ClassObjectFilter(clazz)).stream().collect(Collectors.toList());\n+    }\n+\n+    protected void createAndDeployJar( KieServices ks, ReleaseId releaseId, String... drls ) {\n+        createAndDeployJar( ks, null, releaseId, drls );\n+    }\n+\n+    protected void createAndDeployJar( KieServices ks, ReleaseId releaseId, KieFile... ruleFiles ) {\n+        createAndDeployJar( ks, null, releaseId, ruleFiles );\n+    }\n+\n+    protected void createAndDeployJar( KieServices ks, KieModuleModel model, ReleaseId releaseId, String... drls ) {\n+        createAndDeployJar( ks, model, releaseId, toKieFiles( drls ) );\n+    }\n+\n+    protected void createAndDeployJar( KieServices ks, KieModuleModel model, ReleaseId releaseId, KieFile... ruleFiles ) {\n+        KieBuilder kieBuilder = createKieBuilder( ks, model, releaseId, ruleFiles );\n+        InternalKieModule kieModule = (InternalKieModule) kieBuilder.getKieModule();\n+        ks.getRepository().addKieModule( kieModule );\n+    }\n+\n+    public static class KieFile {\n+\n+        public final String path;\n+        public final String content;\n+\n+        public KieFile( int index, String content ) {\n+            this( String.format(\"src/main/resources/r%d.drl\", index), content );\n+        }\n+\n+        public KieFile( String path, String content ) {\n+            this.path = path;\n+            this.content = content;\n+        }\n+    }\n+\n+    public KieFile[] toKieFiles(String[] stringRules) {\n+        KieFile[] kieFiles = new KieFile[stringRules.length];\n+        for (int i = 0; i < stringRules.length; i++) {\n+            kieFiles[i] = new KieFile( i, stringRules[i] );\n+        }\n+        return kieFiles;\n+    }\n+\n+    private KieModuleModel getKieModuleModelWithAlphaNetworkCompiler() {\n+        KieModuleModel kproj = KieServices.get().newKieModuleModel();\n+        kproj.setConfigurationProperty(AlphaNetworkCompilerOption.PROPERTY_NAME, AlphaNetworkCompilerOption.INMEMORY.toString());\n+        return kproj;", "originalCommit": "c51fa98beb73ec23d0ded4482d1bfcacad30c750", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e30d54b8fdc994abac85f49043faee61993e55a4", "chunk": "diff --git a/drools-alphanetwork-compiler/src/test/java/org/drools/ancompiler/BaseModelTest.java b/drools-alphanetwork-compiler/src/test/java/org/drools/ancompiler/BaseModelTest.java\nindex 020d8ed3cb..0db4bf5b31 100644\n--- a/drools-alphanetwork-compiler/src/test/java/org/drools/ancompiler/BaseModelTest.java\n+++ b/drools-alphanetwork-compiler/src/test/java/org/drools/ancompiler/BaseModelTest.java\n\n@@ -45,6 +45,7 @@ import static java.util.Arrays.asList;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n+// Copied from org.drools.modelcompiler.BaseModelTest. To be removed after https://issues.redhat.com/browse/DROOLS-5485\n @RunWith(Parameterized.class)\n public abstract class BaseModelTest {\n     public enum RUN_TYPE {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUwNzA4MQ==", "url": "https://github.com/kiegroup/drools/pull/3159#discussion_r504507081", "bodyText": "@lucamolteni for sure I'm missing something but it seems to me that this LOAD option is covering the case when the compiled alpha network is in the kjar so this could be actually replaced with COMPILE. Can you please clarify?", "author": "mariofusco", "createdAt": "2020-10-14T08:46:11Z", "path": "drools-alphanetwork-compiler/src/main/java/org/drools/ancompiler/KieBaseUpdaterANC.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package org.drools.ancompiler;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.drools.compiler.kie.builder.impl.KieBaseUpdater;\n+import org.drools.compiler.kie.builder.impl.KieBaseUpdatersContext;\n+import org.drools.core.reteoo.Rete;\n+import org.kie.api.conf.Option;\n+import org.kie.internal.builder.conf.AlphaNetworkCompilerOption;\n+import org.kie.memorycompiler.KieMemoryCompiler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.drools.core.util.MapUtils.mapValues;\n+\n+public class KieBaseUpdaterANC implements KieBaseUpdater {\n+\n+    private final Logger logger = LoggerFactory.getLogger(KieBaseUpdaterANC.class);\n+\n+    private final KieBaseUpdatersContext ctx;\n+\n+    public KieBaseUpdaterANC(KieBaseUpdatersContext ctx) {\n+        this.ctx = ctx;\n+    }\n+\n+    public void run() {\n+        Optional<Option> ancMode = ctx.getOption(AlphaNetworkCompilerOption.class);\n+\n+        // find the new compiled alpha network in the classpath, if it's not there,\n+        // generate compile it and reattach it\n+        if (ancMode.filter(AlphaNetworkCompilerOption.INMEMORY::equals).isPresent()) {\n+            inMemoryUpdate(ctx.getClassLoader(), ctx.getRete());\n+        } // load it from the kjar\n+        else if (ancMode.filter(AlphaNetworkCompilerOption.LOAD::equals).isPresent()) {", "originalCommit": "2ef8fae363a6c0d1737e62b3e309222ad761e01b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYzMzU5Mg==", "url": "https://github.com/kiegroup/drools/pull/3159#discussion_r504633592", "bodyText": "when the drools-anc-compiler file exists, the option LOAD is set, so that the updater listeners doesn't have to depend on the full module\nsee https://github.com/kiegroup/drools/pull/3159/files#diff-947e341bb9ead75ab95767577467570b3a13c9068a09a4255e169050f21343d8R246", "author": "lucamolteni", "createdAt": "2020-10-14T12:25:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUwNzA4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "526fed68476e2424039a7287d6f407728c315000", "chunk": "diff --git a/drools-alphanetwork-compiler/src/main/java/org/drools/ancompiler/KieBaseUpdaterANC.java b/drools-alphanetwork-compiler/src/main/java/org/drools/ancompiler/KieBaseUpdaterANC.java\ndeleted file mode 100644\nindex 8d58b4a900..0000000000\n--- a/drools-alphanetwork-compiler/src/main/java/org/drools/ancompiler/KieBaseUpdaterANC.java\n+++ /dev/null\n\n@@ -1,74 +0,0 @@\n-package org.drools.ancompiler;\n-\n-import java.util.Map;\n-import java.util.Optional;\n-\n-import org.drools.compiler.kie.builder.impl.KieBaseUpdater;\n-import org.drools.compiler.kie.builder.impl.KieBaseUpdatersContext;\n-import org.drools.core.reteoo.Rete;\n-import org.kie.api.conf.Option;\n-import org.kie.internal.builder.conf.AlphaNetworkCompilerOption;\n-import org.kie.memorycompiler.KieMemoryCompiler;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import static org.drools.core.util.MapUtils.mapValues;\n-\n-public class KieBaseUpdaterANC implements KieBaseUpdater {\n-\n-    private final Logger logger = LoggerFactory.getLogger(KieBaseUpdaterANC.class);\n-\n-    private final KieBaseUpdatersContext ctx;\n-\n-    public KieBaseUpdaterANC(KieBaseUpdatersContext ctx) {\n-        this.ctx = ctx;\n-    }\n-\n-    public void run() {\n-        Optional<Option> ancMode = ctx.getOption(AlphaNetworkCompilerOption.class);\n-\n-        // find the new compiled alpha network in the classpath, if it's not there,\n-        // generate compile it and reattach it\n-        if (ancMode.filter(AlphaNetworkCompilerOption.INMEMORY::equals).isPresent()) {\n-            inMemoryUpdate(ctx.getClassLoader(), ctx.getRete());\n-        } // load it from the kjar\n-        else if (ancMode.filter(AlphaNetworkCompilerOption.LOAD::equals).isPresent()) {\n-            logger.debug(\"Loading compiled alpha network from KJar\");\n-            loadFromKJar(ctx.getClassLoader(), ctx.getRete());\n-        }\n-    }\n-\n-    /**\n-     * This assumes the kie-memory-compiler module is provided at runtime\n-     */\n-    private void inMemoryUpdate(ClassLoader rootClassLoader, Rete rete) {\n-        Map<String, CompiledNetworkSource> compiledNetworkSourcesMap = ObjectTypeNodeCompiler.compiledNetworkSourceMap(rete);\n-        if (!compiledNetworkSourcesMap.isEmpty()) {\n-            Map<String, Class<?>> compiledClasses = KieMemoryCompiler.compile(mapValues(compiledNetworkSourcesMap, CompiledNetworkSource::getSource),\n-                                                                              rootClassLoader);\n-            // No need to clear previous sinks/ANC compiled instances\n-            // as they are removed by ReteOOBuilder.removeTerminalNode after standard KieBaseUpdaterImpl\n-            compiledNetworkSourcesMap.values().forEach(c -> {\n-                Class<?> aClass = compiledClasses.get(c.getName());\n-                c.setCompiledNetwork(aClass);\n-            });\n-        }\n-    }\n-\n-    private void loadFromKJar(ClassLoader rootClassLoader, Rete rete) {\n-        // There's not actual need to regenerate the source here but the indexableConstraint is parsed throughout the generation\n-        // It should be possible to get the indexable constraint without generating the full source\n-        // see https://issues.redhat.com/browse/DROOLS-5718\n-        Map<String, CompiledNetworkSource> compiledNetworkSourcesMap = ObjectTypeNodeCompiler.compiledNetworkSourceMap(rete);\n-        for (Map.Entry<String, CompiledNetworkSource> kv : compiledNetworkSourcesMap.entrySet()) {\n-            String compiledNetworkClassName = kv.getValue().getName();\n-            Class<?> aClass;\n-            try {\n-                aClass = rootClassLoader.loadClass(compiledNetworkClassName);\n-            } catch (ClassNotFoundException e) {\n-                throw new CouldNotCreateAlphaNetworkCompilerException(e);\n-            }\n-            kv.getValue().setCompiledNetwork(aClass);\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUxOTU0Mw==", "url": "https://github.com/kiegroup/drools/pull/3159#discussion_r504519543", "bodyText": "It seems you're creating this variable but never using it.", "author": "mariofusco", "createdAt": "2020-10-14T09:04:27Z", "path": "drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/MemoryKieModule.java", "diffHunk": "@@ -110,6 +116,33 @@ public long getCreationTimestamp() {\n         return creationTimestamp;\n     }\n \n+    @Override\n+    public void afterKieBaseCreationUpdate(String kBaseName, InternalKnowledgeBase kBase) {\n+        KnowledgeBuilder knowledgeBuilderForKieBase = getKnowledgeBuilderForKieBase(kBaseName);\n+\n+        if(knowledgeBuilderForKieBase instanceof KnowledgeBuilderImpl) {\n+            KnowledgeBuilderImpl knowledgeBuilderForImpl = (KnowledgeBuilderImpl)knowledgeBuilderForKieBase;\n+            KnowledgeBuilderConfigurationImpl builderConfiguration = knowledgeBuilderForImpl.getBuilderConfiguration();\n+\n+            // TODO LUCA ask Mario if we need to enqueue this or we can just run it\n+            KieContainerImpl.CompositeRunnable compositeUpdater = new KieContainerImpl.CompositeRunnable();", "originalCommit": "2ef8fae363a6c0d1737e62b3e309222ad761e01b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e30d54b8fdc994abac85f49043faee61993e55a4", "chunk": "diff --git a/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/MemoryKieModule.java b/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/MemoryKieModule.java\nindex aa5d20c59d..ef70ad4713 100644\n--- a/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/MemoryKieModule.java\n+++ b/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/MemoryKieModule.java\n\n@@ -124,7 +124,6 @@ public class MemoryKieModule extends AbstractKieModule\n             KnowledgeBuilderImpl knowledgeBuilderForImpl = (KnowledgeBuilderImpl)knowledgeBuilderForKieBase;\n             KnowledgeBuilderConfigurationImpl builderConfiguration = knowledgeBuilderForImpl.getBuilderConfiguration();\n \n-            // TODO LUCA ask Mario if we need to enqueue this or we can just run it\n             KieContainerImpl.CompositeRunnable compositeUpdater = new KieContainerImpl.CompositeRunnable();\n \n             KieBaseUpdaterOptions kieBaseUpdaterOptions = new KieBaseUpdaterOptions(new KieBaseUpdaterOptions.OptionEntry(\n"}}, {"oid": "e30d54b8fdc994abac85f49043faee61993e55a4", "url": "https://github.com/kiegroup/drools/commit/e30d54b8fdc994abac85f49043faee61993e55a4", "message": "Avoid enque the updaters and run them directly", "committedDate": "2020-10-14T13:01:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUzNDg2OA==", "url": "https://github.com/kiegroup/drools/pull/3159#discussion_r504534868", "bodyText": "Is it possible to reach this code? What about a log.debug?", "author": "danielezonca", "createdAt": "2020-10-14T09:28:45Z", "path": "drools-alphanetwork-compiler/src/main/java/org/drools/ancompiler/CompiledNetwork.java", "diffHunk": "@@ -65,7 +74,6 @@ public RuleBasePartitionId getPartitionId() {\n      * method of this Externalizable class.\n      */\n     public void writeExternal(ObjectOutput out) throws IOException {\n-        // todo is this needed??", "originalCommit": "2ef8fae363a6c0d1737e62b3e309222ad761e01b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc5MTk0Mg==", "url": "https://github.com/kiegroup/drools/pull/3159#discussion_r504791942", "bodyText": "not sure it was there before", "author": "lucamolteni", "createdAt": "2020-10-14T15:56:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUzNDg2OA=="}], "type": "inlineReview", "revised_code": {"commit": "526fed68476e2424039a7287d6f407728c315000", "chunk": "diff --git a/drools-alphanetwork-compiler/src/main/java/org/drools/ancompiler/CompiledNetwork.java b/drools-alphanetwork-compiler/src/main/java/org/drools/ancompiler/CompiledNetwork.java\nindex 6444d7133f..2791ffceeb 100644\n--- a/drools-alphanetwork-compiler/src/main/java/org/drools/ancompiler/CompiledNetwork.java\n+++ b/drools-alphanetwork-compiler/src/main/java/org/drools/ancompiler/CompiledNetwork.java\n\n@@ -74,6 +65,7 @@ public abstract class CompiledNetwork implements ObjectSinkPropagator {\n      * method of this Externalizable class.\n      */\n     public void writeExternal(ObjectOutput out) throws IOException {\n+        // todo is this needed??\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUzNDkzMg==", "url": "https://github.com/kiegroup/drools/pull/3159#discussion_r504534932", "bodyText": "Is it possible to reach this code? What about a log.debug?", "author": "danielezonca", "createdAt": "2020-10-14T09:28:52Z", "path": "drools-alphanetwork-compiler/src/main/java/org/drools/ancompiler/CompiledNetwork.java", "diffHunk": "@@ -81,22 +89,39 @@ public void writeExternal(ObjectOutput out) throws IOException {\n      *                                restored cannot be found.\n      */\n     public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {\n-        // todo is this needed??", "originalCommit": "2ef8fae363a6c0d1737e62b3e309222ad761e01b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "526fed68476e2424039a7287d6f407728c315000", "chunk": "diff --git a/drools-alphanetwork-compiler/src/main/java/org/drools/ancompiler/CompiledNetwork.java b/drools-alphanetwork-compiler/src/main/java/org/drools/ancompiler/CompiledNetwork.java\nindex 6444d7133f..2791ffceeb 100644\n--- a/drools-alphanetwork-compiler/src/main/java/org/drools/ancompiler/CompiledNetwork.java\n+++ b/drools-alphanetwork-compiler/src/main/java/org/drools/ancompiler/CompiledNetwork.java\n\n@@ -89,39 +81,22 @@ public abstract class CompiledNetwork implements ObjectSinkPropagator {\n      *                                restored cannot be found.\n      */\n     public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {\n+        // todo is this needed??\n     }\n \n     /**\n      * Sets the OTN for this network. Calling this method will set all variables in the generated subclasses\n      * by walking the {@link org.kie.reteoo.ObjectTypeNode} using a {@link ObjectTypeNodeParser}.\n-     *\n      * @param objectTypeNode node for whom this network was created\n      */\n     public final void setObjectTypeNode(final ObjectTypeNode objectTypeNode) {\n         this.objectTypeNode = objectTypeNode;\n \n-        NodeReferenceSetter setter = new NodeReferenceSetter();\n+        NodeReferenceSetter setter= new NodeReferenceSetter();\n         ObjectTypeNodeParser parser = new ObjectTypeNodeParser(objectTypeNode);\n         parser.accept(setter);\n     }\n \n-    public void setNetwork(ObjectTypeNode objectTypeNode) {\n-        setObjectTypeNode(objectTypeNode);\n-        setOriginalSinkPropagator(objectTypeNode.getObjectSinkPropagator());\n-        objectTypeNode.setObjectSinkPropagator(this);\n-    }\n-\n-    public void setOriginalSinkPropagator(ObjectSinkPropagator originalSinkPropagator) {\n-        this.originalSinkPropagator = originalSinkPropagator;\n-    }\n-\n-    /*\n-        Use this only for testing\n-     */\n-    public ObjectSinkPropagator getOriginalSinkPropagator() {\n-        return originalSinkPropagator;\n-    }\n-\n     /**\n      * Generated subclasses need to implement this method to set member variables based on the specified\n      * NetworkNode.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUzNzU3OQ==", "url": "https://github.com/kiegroup/drools/pull/3159#discussion_r504537579", "bodyText": "License", "author": "danielezonca", "createdAt": "2020-10-14T09:33:13Z", "path": "drools-alphanetwork-compiler/src/main/java/org/drools/ancompiler/CompiledNetworkSource.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package org.drools.ancompiler;", "originalCommit": "2ef8fae363a6c0d1737e62b3e309222ad761e01b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "526fed68476e2424039a7287d6f407728c315000", "chunk": "diff --git a/drools-alphanetwork-compiler/src/main/java/org/drools/ancompiler/CompiledNetworkSource.java b/drools-alphanetwork-compiler/src/main/java/org/drools/ancompiler/CompiledNetworkSource.java\ndeleted file mode 100644\nindex adbf763879..0000000000\n--- a/drools-alphanetwork-compiler/src/main/java/org/drools/ancompiler/CompiledNetworkSource.java\n+++ /dev/null\n\n@@ -1,63 +0,0 @@\n-package org.drools.ancompiler;\n-\n-import org.drools.core.reteoo.ObjectTypeNode;\n-import org.drools.core.rule.IndexableConstraint;\n-import org.drools.core.spi.InternalReadAccessor;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-public class CompiledNetworkSource {\n-\n-    private final Logger logger = LoggerFactory.getLogger(CompiledNetworkSource.class);\n-\n-    private final String source;\n-    private final IndexableConstraint indexableConstraint;\n-    private final String name;\n-    private final String sourceName;\n-    private final ObjectTypeNode objectTypeNode;\n-\n-    public CompiledNetworkSource(String source,\n-                                 IndexableConstraint indexableConstraint,\n-                                 String name,\n-                                 String sourceName,\n-                                 ObjectTypeNode objectTypeNode) {\n-        this.source = source;\n-        this.indexableConstraint = indexableConstraint;\n-        this.name = name;\n-        this.sourceName = sourceName;\n-        this.objectTypeNode = objectTypeNode;\n-    }\n-\n-    public String getSource() {\n-        return source;\n-    }\n-\n-    public String getName() {\n-        return name;\n-    }\n-\n-    public String getSourceName() {\n-        return sourceName;\n-    }\n-\n-    public void setCompiledNetwork(Class<?> compiledNetworkClass) {\n-        CompiledNetwork compiledNetwork = newCompiledNetworkInstance(compiledNetworkClass);\n-        compiledNetwork.setNetwork(objectTypeNode);\n-        logger.debug(\"Updating {} with instance of class: {}\",\n-                     objectTypeNode,\n-                     compiledNetworkClass.getName());\n-    }\n-\n-    public CompiledNetwork newCompiledNetworkInstance(Class<?> aClass) {\n-        try {\n-            return (CompiledNetwork) aClass.getDeclaredConstructor(org.drools.core.spi.InternalReadAccessor.class)\n-                    .newInstance(getFieldExtractor());\n-        } catch (Exception e) {\n-            throw new CouldNotCreateAlphaNetworkCompilerException(e);\n-        }\n-    }\n-\n-    private InternalReadAccessor getFieldExtractor() {\n-        return indexableConstraint == null ? null : indexableConstraint.getFieldExtractor();\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUzODE5NQ==", "url": "https://github.com/kiegroup/drools/pull/3159#discussion_r504538195", "bodyText": "License", "author": "danielezonca", "createdAt": "2020-10-14T09:34:19Z", "path": "drools-alphanetwork-compiler/src/main/java/org/drools/ancompiler/CouldNotCreateAlphaNetworkCompilerException.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package org.drools.ancompiler;", "originalCommit": "2ef8fae363a6c0d1737e62b3e309222ad761e01b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "526fed68476e2424039a7287d6f407728c315000", "chunk": "diff --git a/drools-alphanetwork-compiler/src/main/java/org/drools/ancompiler/CouldNotCreateAlphaNetworkCompilerException.java b/drools-alphanetwork-compiler/src/main/java/org/drools/ancompiler/CouldNotCreateAlphaNetworkCompilerException.java\ndeleted file mode 100644\nindex 21e759a6c7..0000000000\n--- a/drools-alphanetwork-compiler/src/main/java/org/drools/ancompiler/CouldNotCreateAlphaNetworkCompilerException.java\n+++ /dev/null\n\n@@ -1,8 +0,0 @@\n-package org.drools.ancompiler;\n-\n-public class CouldNotCreateAlphaNetworkCompilerException extends RuntimeException {\n-\n-    public CouldNotCreateAlphaNetworkCompilerException(Exception e) {\n-        super(\"Cannot create Compiled Alpha Network\", e);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUzOTIyMg==", "url": "https://github.com/kiegroup/drools/pull/3159#discussion_r504539222", "bodyText": "License", "author": "danielezonca", "createdAt": "2020-10-14T09:35:55Z", "path": "drools-alphanetwork-compiler/src/main/java/org/drools/ancompiler/KieBaseUpdaterANC.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package org.drools.ancompiler;", "originalCommit": "2ef8fae363a6c0d1737e62b3e309222ad761e01b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "526fed68476e2424039a7287d6f407728c315000", "chunk": "diff --git a/drools-alphanetwork-compiler/src/main/java/org/drools/ancompiler/KieBaseUpdaterANC.java b/drools-alphanetwork-compiler/src/main/java/org/drools/ancompiler/KieBaseUpdaterANC.java\ndeleted file mode 100644\nindex 8d58b4a900..0000000000\n--- a/drools-alphanetwork-compiler/src/main/java/org/drools/ancompiler/KieBaseUpdaterANC.java\n+++ /dev/null\n\n@@ -1,74 +0,0 @@\n-package org.drools.ancompiler;\n-\n-import java.util.Map;\n-import java.util.Optional;\n-\n-import org.drools.compiler.kie.builder.impl.KieBaseUpdater;\n-import org.drools.compiler.kie.builder.impl.KieBaseUpdatersContext;\n-import org.drools.core.reteoo.Rete;\n-import org.kie.api.conf.Option;\n-import org.kie.internal.builder.conf.AlphaNetworkCompilerOption;\n-import org.kie.memorycompiler.KieMemoryCompiler;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import static org.drools.core.util.MapUtils.mapValues;\n-\n-public class KieBaseUpdaterANC implements KieBaseUpdater {\n-\n-    private final Logger logger = LoggerFactory.getLogger(KieBaseUpdaterANC.class);\n-\n-    private final KieBaseUpdatersContext ctx;\n-\n-    public KieBaseUpdaterANC(KieBaseUpdatersContext ctx) {\n-        this.ctx = ctx;\n-    }\n-\n-    public void run() {\n-        Optional<Option> ancMode = ctx.getOption(AlphaNetworkCompilerOption.class);\n-\n-        // find the new compiled alpha network in the classpath, if it's not there,\n-        // generate compile it and reattach it\n-        if (ancMode.filter(AlphaNetworkCompilerOption.INMEMORY::equals).isPresent()) {\n-            inMemoryUpdate(ctx.getClassLoader(), ctx.getRete());\n-        } // load it from the kjar\n-        else if (ancMode.filter(AlphaNetworkCompilerOption.LOAD::equals).isPresent()) {\n-            logger.debug(\"Loading compiled alpha network from KJar\");\n-            loadFromKJar(ctx.getClassLoader(), ctx.getRete());\n-        }\n-    }\n-\n-    /**\n-     * This assumes the kie-memory-compiler module is provided at runtime\n-     */\n-    private void inMemoryUpdate(ClassLoader rootClassLoader, Rete rete) {\n-        Map<String, CompiledNetworkSource> compiledNetworkSourcesMap = ObjectTypeNodeCompiler.compiledNetworkSourceMap(rete);\n-        if (!compiledNetworkSourcesMap.isEmpty()) {\n-            Map<String, Class<?>> compiledClasses = KieMemoryCompiler.compile(mapValues(compiledNetworkSourcesMap, CompiledNetworkSource::getSource),\n-                                                                              rootClassLoader);\n-            // No need to clear previous sinks/ANC compiled instances\n-            // as they are removed by ReteOOBuilder.removeTerminalNode after standard KieBaseUpdaterImpl\n-            compiledNetworkSourcesMap.values().forEach(c -> {\n-                Class<?> aClass = compiledClasses.get(c.getName());\n-                c.setCompiledNetwork(aClass);\n-            });\n-        }\n-    }\n-\n-    private void loadFromKJar(ClassLoader rootClassLoader, Rete rete) {\n-        // There's not actual need to regenerate the source here but the indexableConstraint is parsed throughout the generation\n-        // It should be possible to get the indexable constraint without generating the full source\n-        // see https://issues.redhat.com/browse/DROOLS-5718\n-        Map<String, CompiledNetworkSource> compiledNetworkSourcesMap = ObjectTypeNodeCompiler.compiledNetworkSourceMap(rete);\n-        for (Map.Entry<String, CompiledNetworkSource> kv : compiledNetworkSourcesMap.entrySet()) {\n-            String compiledNetworkClassName = kv.getValue().getName();\n-            Class<?> aClass;\n-            try {\n-                aClass = rootClassLoader.loadClass(compiledNetworkClassName);\n-            } catch (ClassNotFoundException e) {\n-                throw new CouldNotCreateAlphaNetworkCompilerException(e);\n-            }\n-            kv.getValue().setCompiledNetwork(aClass);\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUzOTM1Mg==", "url": "https://github.com/kiegroup/drools/pull/3159#discussion_r504539352", "bodyText": "License", "author": "danielezonca", "createdAt": "2020-10-14T09:36:07Z", "path": "drools-alphanetwork-compiler/src/main/java/org/drools/ancompiler/KieBaseUpdaterANCFactory.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package org.drools.ancompiler;", "originalCommit": "2ef8fae363a6c0d1737e62b3e309222ad761e01b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "526fed68476e2424039a7287d6f407728c315000", "chunk": "diff --git a/drools-alphanetwork-compiler/src/main/java/org/drools/ancompiler/KieBaseUpdaterANCFactory.java b/drools-alphanetwork-compiler/src/main/java/org/drools/ancompiler/KieBaseUpdaterANCFactory.java\ndeleted file mode 100644\nindex 228846cc69..0000000000\n--- a/drools-alphanetwork-compiler/src/main/java/org/drools/ancompiler/KieBaseUpdaterANCFactory.java\n+++ /dev/null\n\n@@ -1,13 +0,0 @@\n-package org.drools.ancompiler;\n-\n-import org.drools.compiler.kie.builder.impl.KieBaseUpdater;\n-import org.drools.compiler.kie.builder.impl.KieBaseUpdaterFactory;\n-import org.drools.compiler.kie.builder.impl.KieBaseUpdatersContext;\n-\n-public class KieBaseUpdaterANCFactory implements KieBaseUpdaterFactory {\n-\n-    @Override\n-    public KieBaseUpdater create(KieBaseUpdatersContext ctx) {\n-        return new KieBaseUpdaterANC(ctx);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU0MDM2OQ==", "url": "https://github.com/kiegroup/drools/pull/3159#discussion_r504540369", "bodyText": "Log?", "author": "danielezonca", "createdAt": "2020-10-14T09:37:45Z", "path": "drools-traits/src/main/java/org/drools/traits/core/reteoo/TraitObjectTypeNode.java", "diffHunk": "@@ -142,29 +142,22 @@ public void modifyObject( InternalFactHandle factHandle,\n \n         checkDirty();\n \n-        if ( compiledNetwork != null ) {\n-            compiledNetwork.modifyObject( factHandle,\n-                    modifyPreviousTuples,\n-                    context.adaptModificationMaskForObjectType( objectType, workingMemory ),\n-                    workingMemory );\n-        } else {\n-            if ( factHandle.isTraiting() )  {\n-                if ( isModifyAllowed( factHandle )  ) {\n-                    this.sink.propagateModifyObject( factHandle,\n-                                                     modifyPreviousTuples,\n-                                                     context.adaptModificationMaskForObjectType( objectType, workingMemory ),\n-                                                     workingMemory );\n-                } else {\n-                    //System.err.println( ((ClassObjectType) this.getObjectType()).getClassName() + \" : MODIFY BLOCK !! \" + ( (TraitProxy) factHandle.getObject() ).getTraitName() + \" \" + ( (TraitProxy) factHandle.getObject() )._getTypeCode() + \" >> \" + \" checks in \" + typeMask );\n-                }\n+        if (factHandle.isTraiting()) {\n+            if (isModifyAllowed(factHandle)) {\n+                this.sink.propagateModifyObject(factHandle,\n+                                                modifyPreviousTuples,\n+                                                context.adaptModificationMaskForObjectType(objectType, workingMemory),\n+                                                workingMemory);\n             } else {\n-                this.sink.propagateModifyObject( factHandle,\n-                                                 modifyPreviousTuples,\n-                                                 !context.getModificationMask().isSet(PropertySpecificUtil.TRAITABLE_BIT) ?\n-                                                        context.adaptModificationMaskForObjectType( objectType, workingMemory ) :\n-                                                        context,\n-                                                 workingMemory );\n+                //System.err.println( ((ClassObjectType) this.getObjectType()).getClassName() + \" : MODIFY BLOCK !! \" + ( (TraitProxy) factHandle.getObject() ).getTraitName() + \" \" + ( (TraitProxy) factHandle.getObject() )._getTypeCode() + \" >> \" + \" checks in \" + typeMask );", "originalCommit": "2ef8fae363a6c0d1737e62b3e309222ad761e01b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc5NDY4Ng==", "url": "https://github.com/kiegroup/drools/pull/3159#discussion_r504794686", "bodyText": "not sure it was there before", "author": "lucamolteni", "createdAt": "2020-10-14T15:59:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU0MDM2OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcxNzM3NQ==", "url": "https://github.com/kiegroup/drools/pull/3159#discussion_r504717375", "bodyText": "License", "author": "danielezonca", "createdAt": "2020-10-14T14:20:28Z", "path": "drools-alphanetwork-compiler/src/test/java/org/drools/ancompiler/KJARUtils.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package org.drools.ancompiler;", "originalCommit": "e30d54b8fdc994abac85f49043faee61993e55a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "526fed68476e2424039a7287d6f407728c315000", "chunk": "diff --git a/drools-alphanetwork-compiler/src/test/java/org/drools/ancompiler/KJARUtils.java b/drools-alphanetwork-compiler/src/test/java/org/drools/ancompiler/KJARUtils.java\ndeleted file mode 100644\nindex 1ee2152e82..0000000000\n--- a/drools-alphanetwork-compiler/src/test/java/org/drools/ancompiler/KJARUtils.java\n+++ /dev/null\n\n@@ -1,19 +0,0 @@\n-package org.drools.ancompiler;\n-\n-import org.kie.api.builder.ReleaseId;\n-\n-public class KJARUtils {\n-    public static String getPom(ReleaseId releaseId) {\n-        String pom =\n-                \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n-                \"<project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\\n\" +\n-                \"         xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\\\">\\n\" +\n-                \"  <modelVersion>4.0.0</modelVersion>\\n\" +\n-                \"\\n\" +\n-                \"  <groupId>\" + releaseId.getGroupId() + \"</groupId>\\n\" +\n-                \"  <artifactId>\" + releaseId.getArtifactId() + \"</artifactId>\\n\" +\n-                \"  <version>\" + releaseId.getVersion() + \"</version>\\n\" +\n-                \"</project>\";\n-        return pom;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcxNzQ2NQ==", "url": "https://github.com/kiegroup/drools/pull/3159#discussion_r504717465", "bodyText": "License", "author": "danielezonca", "createdAt": "2020-10-14T14:20:36Z", "path": "drools-alphanetwork-compiler/src/test/java/org/drools/ancompiler/Person.java", "diffHunk": "@@ -0,0 +1,206 @@\n+package org.drools.ancompiler;", "originalCommit": "e30d54b8fdc994abac85f49043faee61993e55a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "526fed68476e2424039a7287d6f407728c315000", "chunk": "diff --git a/drools-alphanetwork-compiler/src/test/java/org/drools/ancompiler/Person.java b/drools-alphanetwork-compiler/src/test/java/org/drools/ancompiler/Person.java\ndeleted file mode 100644\nindex 94b0089711..0000000000\n--- a/drools-alphanetwork-compiler/src/test/java/org/drools/ancompiler/Person.java\n+++ /dev/null\n\n@@ -1,206 +0,0 @@\n-package org.drools.ancompiler;\n-\n-import java.math.BigDecimal;\n-import java.math.BigInteger;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import org.drools.core.phreak.AbstractReactiveObject;\n-import org.kie.api.definition.type.Position;\n-\n-public class Person extends AbstractReactiveObject {\n-\n-    @Position(0)\n-    private String name;\n-\n-    @Position(1)\n-    private int age;\n-\n-\n-    private long ageLong;\n-\n-    private int id = 0;\n-    private String likes;\n-    private Boolean employed;\n-\n-\n-    private Integer salary;\n-\n-    private BigDecimal money;\n-\n-    private BigInteger ageInSeconds;\n-\n-    private Map<Integer, Integer> items = new HashMap<>();\n-    private Map<String, String> itemsString = new HashMap<>();\n-\n-    public static int countItems(Map<?, ?> items) {\n-        return items.size();\n-    }\n-\n-    public static boolean evaluate(Map<?, ?> items) {\n-        return items.size() > 0;\n-    }\n-\n-    private int numberOfItems;\n-\n-    public int getNumberOfItems() {\n-        return numberOfItems;\n-    }\n-\n-    public void setNumberOfItems(int numberOfItems) {\n-        this.numberOfItems = numberOfItems;\n-    }\n-\n-    private Person ParentP;\n-\n-    public Person() { }\n-\n-    public Person(String name) {\n-        this.name = name;\n-    }\n-\n-\n-    public Person(String name, BigDecimal money) {\n-        this.name = name;\n-        this.money = money;\n-    }\n-\n-    public Person(String name, int age) {\n-        this.name = name;\n-        this.age = age;\n-    }\n-\n-    public String getName() {\n-        return name;\n-    }\n-\n-    public void setName(String name) {\n-        this.name = name;\n-    }\n-\n-    public int getAge() {\n-        return age;\n-    }\n-\n-    public Integer getAgeBoxed() {\n-        return age;\n-    }\n-\n-    public Short getAgeAsShort() {\n-        return (short)age;\n-    }\n-\n-    public void setAge(int age) {\n-        this.age = age;\n-        notifyModification();\n-    }\n-\n-    public long getAgeLong() {\n-        return ageLong;\n-    }\n-\n-    public Person setAgeLong(long ageLong) {\n-        this.ageLong = ageLong;\n-        return this;\n-    }\n-\n-    public int getId() {\n-        return id;\n-    }\n-\n-    public void setId( int id ) {\n-        this.id = id;\n-    }\n-\n-    public String getLikes() {\n-        return likes;\n-    }\n-\n-    public void setLikes( String likes ) {\n-        this.likes = likes;\n-    }\n-\n-    public Boolean getEmployed() {\n-        return employed;\n-    }\n-\n-    public void setEmployed(Boolean employed) {\n-        this.employed = employed;\n-    }\n-\n-    /**\n-     * WARN: this toString() implementation is actually used in some tests.\n-     */\n-    @Override\n-    public String toString() {\n-        return name;\n-    }\n-\n-    public BigDecimal getMoney() {\n-        return money;\n-    }\n-\n-    public Person setMoney(BigDecimal money) {\n-        this.money = money;\n-        return this;\n-    }\n-\n-    public Integer getSalary() {\n-        return salary;\n-    }\n-\n-    public void setSalary( Integer salary ) {\n-        this.salary = salary;\n-    }\n-\n-    public void setItems( Map<Integer, Integer> items) {\n-        this.items = items;\n-    }\n-\n-    public Map<Integer, Integer> getItems() {\n-        return items;\n-    }\n-\n-    public Person getParentP() {\n-        return ParentP;\n-    }\n-\n-    public Person setParentP(Person parentP) {\n-        ParentP = parentP;\n-        return this;\n-    }\n-\n-    public BigInteger getAgeInSeconds() {\n-        return ageInSeconds;\n-    }\n-\n-    public Person setAgeInSeconds(BigInteger ageInSeconds) {\n-        this.ageInSeconds = ageInSeconds;\n-        return this;\n-    }\n-\n-    public Map<String, String> getItemsString() {\n-        return itemsString;\n-    }\n-\n-    public void setItemsString(Map<String, String> itemsString) {\n-        this.itemsString = itemsString;\n-    }\n-\n-    @Override\n-    public boolean equals(Object o) {\n-        if (this == o) return true;\n-        if (o == null || getClass() != o.getClass()) return false;\n-\n-        Person person = (Person) o;\n-        return age == person.age && name.equals(person.name);\n-\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        int result = name != null ? name.hashCode() : 0;\n-        result = 31 * result + age;\n-        return result;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcxODkzOA==", "url": "https://github.com/kiegroup/drools/pull/3159#discussion_r504718938", "bodyText": "Isn't this a fatal error? If user is explicitly asking for AlphaNetworkCompilerOption and it fails to load it I expect we should log and propagate the exception.", "author": "danielezonca", "createdAt": "2020-10-14T14:22:30Z", "path": "drools-compiler/src/main/java/org/drools/compiler/builder/impl/KnowledgeBuilderConfigurationImpl.java", "diffHunk": "@@ -328,6 +330,12 @@ public void setProperty(String name,\n         \tsetParallelRulesBuildThreshold(Integer.valueOf(value));\n         }  else if (name.equals(ExternaliseCanonicalModelLambdaOption.PROPERTY_NAME)) {\n             setExternaliseCanonicalModelLambda(Boolean.valueOf(value));\n+        } else if (name.equals(AlphaNetworkCompilerOption.PROPERTY_NAME)) {\n+            try {\n+                setAlphaNetworkCompilerOption(AlphaNetworkCompilerOption.determineAlphaNetworkCompilerMode(value.toUpperCase()));\n+            } catch (IllegalArgumentException e) {\n+                log.warn(\"Invalid value \" + value + \" for option \" + LanguageLevelOption.PROPERTY_NAME);", "originalCommit": "e30d54b8fdc994abac85f49043faee61993e55a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc5NjE1OA==", "url": "https://github.com/kiegroup/drools/pull/3159#discussion_r504796158", "bodyText": "I'd put the same behaviour as the other options for consistency", "author": "lucamolteni", "createdAt": "2020-10-14T16:02:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcxODkzOA=="}], "type": "inlineReview", "revised_code": {"commit": "526fed68476e2424039a7287d6f407728c315000", "chunk": "diff --git a/drools-compiler/src/main/java/org/drools/compiler/builder/impl/KnowledgeBuilderConfigurationImpl.java b/drools-compiler/src/main/java/org/drools/compiler/builder/impl/KnowledgeBuilderConfigurationImpl.java\nindex 084d20abd3..097a5f7edf 100644\n--- a/drools-compiler/src/main/java/org/drools/compiler/builder/impl/KnowledgeBuilderConfigurationImpl.java\n+++ b/drools-compiler/src/main/java/org/drools/compiler/builder/impl/KnowledgeBuilderConfigurationImpl.java\n\n@@ -330,12 +328,6 @@ public class KnowledgeBuilderConfigurationImpl\n         \tsetParallelRulesBuildThreshold(Integer.valueOf(value));\n         }  else if (name.equals(ExternaliseCanonicalModelLambdaOption.PROPERTY_NAME)) {\n             setExternaliseCanonicalModelLambda(Boolean.valueOf(value));\n-        } else if (name.equals(AlphaNetworkCompilerOption.PROPERTY_NAME)) {\n-            try {\n-                setAlphaNetworkCompilerOption(AlphaNetworkCompilerOption.determineAlphaNetworkCompilerMode(value.toUpperCase()));\n-            } catch (IllegalArgumentException e) {\n-                log.warn(\"Invalid value \" + value + \" for option \" + LanguageLevelOption.PROPERTY_NAME);\n-            }\n         } else {\n             // if the property from the kmodule was not intercepted above, just add it to the chained properties.\n             Properties additionalProperty = new Properties();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcyMDI0MQ==", "url": "https://github.com/kiegroup/drools/pull/3159#discussion_r504720241", "bodyText": "Unused import?", "author": "danielezonca", "createdAt": "2020-10-14T14:24:03Z", "path": "drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/FileKieModule.java", "diffHunk": "@@ -21,6 +21,7 @@\n import java.io.Serializable;\n import java.util.Collection;\n \n+import org.drools.core.impl.InternalKnowledgeBase;", "originalCommit": "e30d54b8fdc994abac85f49043faee61993e55a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "526fed68476e2424039a7287d6f407728c315000", "chunk": "diff --git a/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/FileKieModule.java b/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/FileKieModule.java\nindex e7b63c555a..9f9e508440 100644\n--- a/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/FileKieModule.java\n+++ b/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/FileKieModule.java\n\n@@ -21,7 +21,6 @@ import java.io.IOException;\n import java.io.Serializable;\n import java.util.Collection;\n \n-import org.drools.core.impl.InternalKnowledgeBase;\n import org.drools.core.io.internal.InternalResource;\n import org.drools.core.util.IoUtils;\n import org.kie.api.builder.ReleaseId;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcyMDU5NQ==", "url": "https://github.com/kiegroup/drools/pull/3159#discussion_r504720595", "bodyText": "License", "author": "danielezonca", "createdAt": "2020-10-14T14:24:29Z", "path": "drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBaseUpdater.java", "diffHunk": "@@ -1,249 +1,6 @@\n-/*\n- * Copyright 2005 JBoss Inc\n- *\n- * Licensed under the Apache License; private final  Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing; private final  software\n- * distributed under the License is distributed on an \"AS IS\" BASIS; private final \n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND; private final  either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n package org.drools.compiler.kie.builder.impl;", "originalCommit": "e30d54b8fdc994abac85f49043faee61993e55a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "526fed68476e2424039a7287d6f407728c315000", "chunk": "diff --git a/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBaseUpdater.java b/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBaseUpdater.java\nindex d1f20c833d..bd85714819 100644\n--- a/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBaseUpdater.java\n+++ b/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBaseUpdater.java\n\n@@ -1,6 +1,235 @@\n+/*\n+ * Copyright 2005 JBoss Inc\n+ *\n+ * Licensed under the Apache License; private final  Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing; private final  software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS; private final \n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND; private final  either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n package org.drools.compiler.kie.builder.impl;\n \n-public interface KieBaseUpdater extends Runnable {\n+import java.util.List;\n+\n+import org.drools.compiler.builder.InternalKnowledgeBuilder;\n+import org.drools.compiler.compiler.PackageBuilderErrors;\n+import org.drools.core.base.ClassObjectType;\n+import org.drools.core.common.ClassAwareObjectStore;\n+import org.drools.core.common.InternalWorkingMemory;\n+import org.drools.core.common.InternalWorkingMemoryEntryPoint;\n+import org.drools.core.definitions.InternalKnowledgePackage;\n+import org.drools.core.definitions.impl.KnowledgePackageImpl;\n+import org.drools.core.definitions.rule.impl.RuleImpl;\n+import org.drools.core.reteoo.EntryPointNode;\n+import org.drools.core.rule.DialectRuntimeData;\n+import org.kie.api.builder.model.KieBaseModel;\n+import org.kie.api.io.Resource;\n+import org.kie.api.runtime.rule.EntryPoint;\n+import org.kie.internal.builder.ChangeType;\n+import org.kie.internal.builder.CompositeKnowledgeBuilder;\n+import org.kie.internal.builder.KnowledgeBuilderError;\n+import org.kie.internal.builder.KnowledgeBuilderFactory;\n+import org.kie.internal.builder.ResourceChange;\n+import org.kie.internal.builder.ResourceChangeSet;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class KieBaseUpdater implements Runnable {\n+\n+    private static final Logger log = LoggerFactory.getLogger( KieBaseUpdater.class );\n+    \n+    protected final KieBaseUpdateContext ctx;\n+\n+    public KieBaseUpdater( KieBaseUpdateContext ctx ) {\n+        this.ctx = ctx;\n+    }\n+\n+    @Override\n+    public void run() {\n+        InternalKnowledgeBuilder kbuilder = (InternalKnowledgeBuilder) KnowledgeBuilderFactory.newKnowledgeBuilder( ctx.kBase, ctx.newKM.getBuilderConfiguration( ctx.newKieBaseModel, ctx.kBase.getRootClassLoader() ) );\n+        CompositeKnowledgeBuilder ckbuilder = kbuilder.batch();\n+\n+        boolean shouldRebuild = applyResourceChanges(kbuilder, ckbuilder);\n+        removeResources(kbuilder);\n+\n+        // remove all ObjectTypeNodes for the modified classes\n+        if (ctx.modifyingUsedClass) {\n+            for (Class<?> cls : ctx.modifiedClasses ) {\n+                clearInstancesOfModifiedClass( cls );\n+            }\n+            for (InternalKnowledgePackage pkg : ctx.kBase.getPackagesMap().values()) {\n+                DialectRuntimeData mvel = pkg.getDialectRuntimeRegistry().getDialectData(\"mvel\");\n+                if(mvel != null) {\n+                    mvel.resetParserConfiguration();\n+                }\n+            }\n+        }\n+\n+        if ( shouldRebuild ) {\n+            // readd unchanged dsl files to the kbuilder\n+            for (String dslFile : ctx.unchangedResources) {\n+                if (isFileInKBase(ctx.newKM, ctx.newKieBaseModel, dslFile)) {\n+                    ctx.newKM.addResourceToCompiler(ckbuilder, ctx.newKieBaseModel, dslFile);\n+                }\n+            }\n+            rebuildAll(kbuilder, ckbuilder);\n+        }\n+\n+        ctx.kBase.setResolvedReleaseId(ctx.newReleaseId);\n+\n+        for ( InternalWorkingMemory wm : ctx.kBase.getWorkingMemories() ) {\n+            wm.notifyWaitOnRest();\n+        }\n+\n+        afterUpdate(kbuilder);\n+    }\n+\n+    public void afterUpdate(InternalKnowledgeBuilder kbuilder) {\n+\n+    }\n+\n+    protected void removeResources(InternalKnowledgeBuilder kBuilder) {\n+        // remove resources first\n+        for ( ResourceChangeSet rcs : ctx.cs.getChanges().values()) {\n+            if ( rcs.getChangeType() == ChangeType.REMOVED ) {\n+                String resourceName = rcs.getResourceName();\n+                if ( !resourceName.endsWith( \".properties\" ) && isFileInKBase(ctx.currentKM, ctx.currentKieBaseModel, resourceName) ) {\n+                    kBuilder.removeObjectsGeneratedFromResource( ctx.currentKM.getResource( resourceName ) );\n+                }\n+            }\n+        }\n+    }\n+\n+    protected void clearInstancesOfModifiedClass( Class<?> cls ) {\n+        // remove all ObjectTypeNodes for the modified classes\n+        ClassObjectType objectType = new ClassObjectType( cls );\n+        for ( EntryPointNode epn : ctx.kBase.getRete().getEntryPointNodes().values() ) {\n+            epn.removeObjectType( objectType );\n+        }\n+\n+        // remove all instance of the old class from the object stores\n+        for (InternalWorkingMemory wm : ctx.kBase.getWorkingMemories()) {\n+            for (EntryPoint ep : wm.getEntryPoints()) {\n+                InternalWorkingMemoryEntryPoint wmEp = (InternalWorkingMemoryEntryPoint) wm.getWorkingMemoryEntryPoint( ep.getEntryPointId() );\n+                ClassAwareObjectStore store = ( (ClassAwareObjectStore) wmEp.getObjectStore() );\n+                if ( store.clearClassStore( cls ) ) {\n+                    log.warn( \"Class \" + cls.getName() + \" has been modified and therfore its old instances will no longer match\" );\n+                }\n+            }\n+        }\n+    }\n+\n+    private void rebuildAll(InternalKnowledgeBuilder kbuilder, CompositeKnowledgeBuilder ckbuilder) {\n+        ckbuilder.build();\n+\n+        PackageBuilderErrors errors = (PackageBuilderErrors) kbuilder.getErrors();\n+        if ( !errors.isEmpty() ) {\n+            for ( KnowledgeBuilderError error : errors.getErrors() ) {\n+                ctx.results.addMessage(error).setKieBaseName( ctx.newKieBaseModel.getName() );\n+            }\n+            log.error(\"Unable to update KieBase: \" + ctx.newKieBaseModel.getName() + \" to release \" + ctx.newReleaseId + \"\\n\" + errors.toString());\n+        }\n+\n+        if (ctx.modifyingUsedClass) {\n+            kbuilder.rewireAllClassObjectTypes();\n+        }\n+    }\n+\n+    private boolean applyResourceChanges( InternalKnowledgeBuilder kbuilder, CompositeKnowledgeBuilder ckbuilder) {\n+        boolean shouldRebuild = ctx.modifyingUsedClass;\n+        if (ctx.modifyingUsedClass) {\n+            // invalidate accessors for old class\n+            invalidateAccessorForOldClass();\n+            // there are modified classes used by this kbase, so it has to be completely updated\n+            updateAllResources(kbuilder, ckbuilder);\n+        } else {\n+            // there are no modified classes used by this kbase, so update it incrementally\n+            shouldRebuild = updateResourcesIncrementally(kbuilder, ckbuilder) > 0;\n+        }\n+        return shouldRebuild;\n+    }\n+\n+    protected void invalidateAccessorForOldClass() {\n+        for (Class<?> cls : ctx.modifiedClasses) {\n+            InternalKnowledgePackage kpackage = ( (InternalKnowledgePackage) ctx.kBase.getKiePackage(cls.getPackage().getName() ) );\n+            if (kpackage != null) {\n+                kpackage.getClassFieldAccessorStore().removeClass( cls );\n+            }\n+        }\n+    }\n+\n+    private int updateResourcesIncrementally(InternalKnowledgeBuilder kbuilder, CompositeKnowledgeBuilder ckbuilder) {\n+        int fileCount = ctx.modifiedClasses.size();\n+        for ( ResourceChangeSet rcs : ctx.cs.getChanges().values()) {\n+            fileCount += updateResource(kbuilder, ckbuilder, rcs);\n+        }\n+        return fileCount;\n+    }\n+\n+    protected int updateResource(InternalKnowledgeBuilder kbuilder, CompositeKnowledgeBuilder ckbuilder, ResourceChangeSet rcs) {\n+        int fileCount = 0;\n+        if ( rcs.getChangeType() != ChangeType.REMOVED ) {\n+            String resourceName = rcs.getResourceName();\n+            if ( !resourceName.endsWith( \".properties\" ) && isFileInKBase(ctx.newKM, ctx.newKieBaseModel, resourceName) ) {\n+                List<ResourceChange> changes = rcs.getChanges();\n+                if ( ! changes.isEmpty() ) {\n+                    // we need to deal with individual parts of the resource\n+                    fileCount += AbstractKieModule.updateResource(ckbuilder, ctx.newKM, resourceName, rcs) ? 1 : 0;\n+                } else {\n+                    // the whole resource has to handled\n+                    if( rcs.getChangeType() == ChangeType.UPDATED ) {\n+                        Resource resource = ctx.currentKM.getResource(resourceName);\n+                        kbuilder.removeObjectsGeneratedFromResource(resource);\n+                    }\n+                    fileCount += ctx.newKM.addResourceToCompiler(ckbuilder, ctx.newKieBaseModel, resourceName, rcs) ? 1 : 0;\n+                }\n+            }\n+        }\n+\n+        for ( ResourceChangeSet.RuleLoadOrder loadOrder : rcs.getLoadOrder() ) {\n+            KnowledgePackageImpl pkg = (KnowledgePackageImpl)ctx.kBase.getKiePackage(loadOrder.getPkgName() );\n+            if( pkg != null ) {\n+                RuleImpl rule = pkg.getRule(loadOrder.getRuleName() );\n+                if ( rule != null ) {\n+                    // rule can be null, if it didn't exist before\n+                    rule.setLoadOrder( loadOrder.getLoadOrder() );\n+                }\n+            }\n+        }\n+        return fileCount;\n+    }\n \n+    private boolean isFileInKBase(InternalKieModule kieModule, KieBaseModel kieBase, String fileName) {\n+        if (kieModule.isFileInKBase(kieBase, fileName)) {\n+            return true;\n+        }\n+        for (String include : ctx.kProject.getTransitiveIncludes(kieBase)) {\n+            InternalKieModule includeModule = ctx.kProject.getKieModuleForKBase(include);\n+            if (includeModule != null && includeModule.isFileInKBase(ctx.kProject.getKieBaseModel(include), fileName)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n \n+    protected void updateAllResources(InternalKnowledgeBuilder kbuilder, CompositeKnowledgeBuilder ckbuilder) {\n+        for (String resourceName : ctx.currentKM.getFileNames()) {\n+            if ( !resourceName.endsWith( \".properties\" ) && isFileInKBase(ctx.currentKM, ctx.newKieBaseModel, resourceName) ) {\n+                Resource resource = ctx.currentKM.getResource(resourceName);\n+                kbuilder.removeObjectsGeneratedFromResource(resource);\n+            }\n+        }\n+        for (String resourceName : ctx.newKM.getFileNames()) {\n+            if ( !resourceName.endsWith( \".properties\" ) && isFileInKBase(ctx.newKM, ctx.newKieBaseModel, resourceName) ) {\n+                ctx.newKM.addResourceToCompiler(ckbuilder, ctx.newKieBaseModel, resourceName);\n+            }\n+        }\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcyMDg4NA==", "url": "https://github.com/kiegroup/drools/pull/3159#discussion_r504720884", "bodyText": "License", "author": "danielezonca", "createdAt": "2020-10-14T14:24:52Z", "path": "drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBaseUpdaterFactory.java", "diffHunk": "@@ -0,0 +1,6 @@\n+package org.drools.compiler.kie.builder.impl;", "originalCommit": "e30d54b8fdc994abac85f49043faee61993e55a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "526fed68476e2424039a7287d6f407728c315000", "chunk": "diff --git a/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBaseUpdaterFactory.java b/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBaseUpdaterFactory.java\ndeleted file mode 100644\nindex 5ef72d3d73..0000000000\n--- a/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBaseUpdaterFactory.java\n+++ /dev/null\n\n@@ -1,6 +0,0 @@\n-package org.drools.compiler.kie.builder.impl;\n-\n-public interface KieBaseUpdaterFactory {\n-\n-    KieBaseUpdater create(KieBaseUpdatersContext ctx);\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcyMzYzNw==", "url": "https://github.com/kiegroup/drools/pull/3159#discussion_r504723637", "bodyText": "Is this field used somewhere? If so, can you please add a getter?", "author": "danielezonca", "createdAt": "2020-10-14T14:28:18Z", "path": "drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBaseUpdaterImplContext.java", "diffHunk": "@@ -54,5 +57,6 @@ public KieBaseUpdateContext( KieProject kProject, InternalKnowledgeBase kBase, I\n         this.results = results;\n         this.newKieBaseModel = newKieBaseModel;\n         this.currentKieBaseModel = currentKieBaseModel;\n+        this.kbuilder = kbuilder;", "originalCommit": "e30d54b8fdc994abac85f49043faee61993e55a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc5NzA1Ng==", "url": "https://github.com/kiegroup/drools/pull/3159#discussion_r504797056", "bodyText": "every other field in the context class is set to public", "author": "lucamolteni", "createdAt": "2020-10-14T16:03:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcyMzYzNw=="}], "type": "inlineReview", "revised_code": {"commit": "526fed68476e2424039a7287d6f407728c315000", "chunk": "diff --git a/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBaseUpdaterImplContext.java b/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBaseUpdateContext.java\nsimilarity index 72%\nrename from drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBaseUpdaterImplContext.java\nrename to drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBaseUpdateContext.java\nindex 3907ae0c46..87be72ca0e 100644\n--- a/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBaseUpdaterImplContext.java\n+++ b/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBaseUpdateContext.java\n\n@@ -57,6 +54,5 @@ public class KieBaseUpdaterImplContext {\n         this.results = results;\n         this.newKieBaseModel = newKieBaseModel;\n         this.currentKieBaseModel = currentKieBaseModel;\n-        this.kbuilder = kbuilder;\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcyMzc4Mg==", "url": "https://github.com/kiegroup/drools/pull/3159#discussion_r504723782", "bodyText": "License", "author": "danielezonca", "createdAt": "2020-10-14T14:28:27Z", "path": "drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBaseUpdaterOptions.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package org.drools.compiler.kie.builder.impl;", "originalCommit": "e30d54b8fdc994abac85f49043faee61993e55a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "526fed68476e2424039a7287d6f407728c315000", "chunk": "diff --git a/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBaseUpdaterOptions.java b/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBaseUpdaterOptions.java\ndeleted file mode 100644\nindex d7977966dd..0000000000\n--- a/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBaseUpdaterOptions.java\n+++ /dev/null\n\n@@ -1,37 +0,0 @@\n-package org.drools.compiler.kie.builder.impl;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Optional;\n-\n-import org.kie.api.conf.Option;\n-\n-// An Option map wrapper class so that modularized containers don't have to depend on concrete configuration\n-public class KieBaseUpdaterOptions {\n-\n-    private final Map<Class<? extends Option>, Option> optionMap = new HashMap<>();\n-\n-    public KieBaseUpdaterOptions(OptionEntry... options) {\n-        for (OptionEntry o : options) {\n-            if(o != null) {\n-                optionMap.put(o.key, o.value);\n-            }\n-        }\n-    }\n-\n-    public Optional<Option> getOption(Class<? extends Option> optionClazz) {\n-        return Optional.ofNullable(optionMap.get(optionClazz));\n-    }\n-\n-    public static class OptionEntry {\n-        final Class<? extends Option> key;\n-        final Option value;\n-\n-        public OptionEntry(Class<? extends Option> key, Option value) {\n-            this.key = key;\n-            this.value = value;\n-        }\n-\n-\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcyOTA0Nw==", "url": "https://github.com/kiegroup/drools/pull/3159#discussion_r504729047", "bodyText": "License", "author": "danielezonca", "createdAt": "2020-10-14T14:34:52Z", "path": "drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBaseUpdaters.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package org.drools.compiler.kie.builder.impl;", "originalCommit": "e30d54b8fdc994abac85f49043faee61993e55a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "526fed68476e2424039a7287d6f407728c315000", "chunk": "diff --git a/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBaseUpdaters.java b/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBaseUpdaters.java\ndeleted file mode 100644\nindex 72cb28e0d1..0000000000\n--- a/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBaseUpdaters.java\n+++ /dev/null\n\n@@ -1,8 +0,0 @@\n-package org.drools.compiler.kie.builder.impl;\n-\n-import java.util.List;\n-\n-public interface KieBaseUpdaters {\n-\n-    List<KieBaseUpdaterFactory> getChildren();\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcyOTE0OA==", "url": "https://github.com/kiegroup/drools/pull/3159#discussion_r504729148", "bodyText": "License", "author": "danielezonca", "createdAt": "2020-10-14T14:34:59Z", "path": "drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBaseUpdatersContext.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package org.drools.compiler.kie.builder.impl;", "originalCommit": "e30d54b8fdc994abac85f49043faee61993e55a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "526fed68476e2424039a7287d6f407728c315000", "chunk": "diff --git a/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBaseUpdatersContext.java b/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBaseUpdatersContext.java\ndeleted file mode 100644\nindex e2199c48f9..0000000000\n--- a/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBaseUpdatersContext.java\n+++ /dev/null\n\n@@ -1,33 +0,0 @@\n-package org.drools.compiler.kie.builder.impl;\n-\n-import java.util.Optional;\n-\n-import org.drools.core.reteoo.Rete;\n-import org.kie.api.conf.Option;\n-\n-public class KieBaseUpdatersContext {\n-\n-    private final KieBaseUpdaterOptions options;\n-    private final Rete rete;\n-    private final ClassLoader classLoader;\n-\n-    public KieBaseUpdatersContext(KieBaseUpdaterOptions options,\n-                                  Rete rete,\n-                                  ClassLoader classLoader) {\n-        this.options = options;\n-        this.rete = rete;\n-        this.classLoader = classLoader;\n-    }\n-\n-    public Optional<Option> getOption(Class<? extends Option> optionClazz) {\n-        return options.getOption(optionClazz);\n-    }\n-\n-    public Rete getRete() {\n-        return rete;\n-    }\n-\n-    public ClassLoader getClassLoader() {\n-        return classLoader;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcyOTUxMg==", "url": "https://github.com/kiegroup/drools/pull/3159#discussion_r504729512", "bodyText": "License", "author": "danielezonca", "createdAt": "2020-10-14T14:35:20Z", "path": "drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBaseUpdatersImpl.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package org.drools.compiler.kie.builder.impl;", "originalCommit": "e30d54b8fdc994abac85f49043faee61993e55a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "526fed68476e2424039a7287d6f407728c315000", "chunk": "diff --git a/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBaseUpdatersImpl.java b/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBaseUpdatersImpl.java\ndeleted file mode 100644\nindex 4e57e7fdc5..0000000000\n--- a/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBaseUpdatersImpl.java\n+++ /dev/null\n\n@@ -1,24 +0,0 @@\n-package org.drools.compiler.kie.builder.impl;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.function.Consumer;\n-\n-public class KieBaseUpdatersImpl implements Consumer<KieBaseUpdaterFactory>,\n-                                            KieBaseUpdaters {\n-\n-    List<KieBaseUpdaterFactory> children = new ArrayList<>();\n-\n-    public KieBaseUpdatersImpl() {\n-    }\n-\n-    @Override\n-    public List<KieBaseUpdaterFactory> getChildren() {\n-        return children;\n-    }\n-\n-    @Override\n-    public void accept(KieBaseUpdaterFactory o) {\n-        children.add(o);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcyOTcwNw==", "url": "https://github.com/kiegroup/drools/pull/3159#discussion_r504729707", "bodyText": "Why an explicit empty constructor?", "author": "danielezonca", "createdAt": "2020-10-14T14:35:34Z", "path": "drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBaseUpdatersImpl.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package org.drools.compiler.kie.builder.impl;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Consumer;\n+\n+public class KieBaseUpdatersImpl implements Consumer<KieBaseUpdaterFactory>,\n+                                            KieBaseUpdaters {\n+\n+    List<KieBaseUpdaterFactory> children = new ArrayList<>();\n+\n+    public KieBaseUpdatersImpl() {\n+    }", "originalCommit": "e30d54b8fdc994abac85f49043faee61993e55a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "526fed68476e2424039a7287d6f407728c315000", "chunk": "diff --git a/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBaseUpdatersImpl.java b/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBaseUpdatersImpl.java\ndeleted file mode 100644\nindex 4e57e7fdc5..0000000000\n--- a/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBaseUpdatersImpl.java\n+++ /dev/null\n\n@@ -1,24 +0,0 @@\n-package org.drools.compiler.kie.builder.impl;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.function.Consumer;\n-\n-public class KieBaseUpdatersImpl implements Consumer<KieBaseUpdaterFactory>,\n-                                            KieBaseUpdaters {\n-\n-    List<KieBaseUpdaterFactory> children = new ArrayList<>();\n-\n-    public KieBaseUpdatersImpl() {\n-    }\n-\n-    @Override\n-    public List<KieBaseUpdaterFactory> getChildren() {\n-        return children;\n-    }\n-\n-    @Override\n-    public void accept(KieBaseUpdaterFactory o) {\n-        children.add(o);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDczMDc3Nw==", "url": "https://github.com/kiegroup/drools/pull/3159#discussion_r504730777", "bodyText": "Unused import?", "author": "danielezonca", "createdAt": "2020-10-14T14:36:51Z", "path": "drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/ZipKieModule.java", "diffHunk": "@@ -31,6 +31,7 @@\n import java.util.zip.ZipEntry;\n import java.util.zip.ZipInputStream;\n \n+import org.drools.core.impl.InternalKnowledgeBase;", "originalCommit": "e30d54b8fdc994abac85f49043faee61993e55a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "526fed68476e2424039a7287d6f407728c315000", "chunk": "diff --git a/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/ZipKieModule.java b/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/ZipKieModule.java\nindex 16b2f83c72..1dfc8449c8 100644\n--- a/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/ZipKieModule.java\n+++ b/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/ZipKieModule.java\n\n@@ -31,7 +31,6 @@ import java.util.Map;\n import java.util.zip.ZipEntry;\n import java.util.zip.ZipInputStream;\n \n-import org.drools.core.impl.InternalKnowledgeBase;\n import org.drools.core.io.internal.InternalResource;\n import org.kie.api.builder.ReleaseId;\n import org.kie.api.builder.model.KieModuleModel;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDczMTk0Mw==", "url": "https://github.com/kiegroup/drools/pull/3159#discussion_r504731943", "bodyText": "What is the reason of this change?", "author": "danielezonca", "createdAt": "2020-10-14T14:38:14Z", "path": "drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/ZipKieModule.java", "diffHunk": "@@ -57,7 +58,7 @@ public ZipKieModule(ReleaseId releaseId,\n     @Override\n     public InternalResource getResource( String fileName) {\n         byte[] bytes = getBytes(fileName);\n-        if (bytes != null && bytes.length > 0) {\n+        if (bytes != null) {", "originalCommit": "e30d54b8fdc994abac85f49043faee61993e55a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgwNjM1NA==", "url": "https://github.com/kiegroup/drools/pull/3159#discussion_r504806354", "bodyText": "Allow 0 byte file in a zipkiemodule", "author": "lucamolteni", "createdAt": "2020-10-14T16:16:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDczMTk0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "526fed68476e2424039a7287d6f407728c315000", "chunk": "diff --git a/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/ZipKieModule.java b/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/ZipKieModule.java\nindex 16b2f83c72..1dfc8449c8 100644\n--- a/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/ZipKieModule.java\n+++ b/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/ZipKieModule.java\n\n@@ -58,7 +57,7 @@ public class ZipKieModule extends AbstractKieModule implements InternalKieModule\n     @Override\n     public InternalResource getResource( String fileName) {\n         byte[] bytes = getBytes(fileName);\n-        if (bytes != null) {\n+        if (bytes != null && bytes.length > 0) {\n             return (InternalResource) ResourceFactory.newByteArrayResource(bytes).setSourcePath(fileName);\n         }\n         return null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDczMjMyMQ==", "url": "https://github.com/kiegroup/drools/pull/3159#discussion_r504732321", "bodyText": "License", "author": "danielezonca", "createdAt": "2020-10-14T14:38:43Z", "path": "drools-core/src/main/java/org/drools/core/util/MapUtils.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package org.drools.core.util;", "originalCommit": "e30d54b8fdc994abac85f49043faee61993e55a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "526fed68476e2424039a7287d6f407728c315000", "chunk": "diff --git a/drools-core/src/main/java/org/drools/core/util/MapUtils.java b/drools-core/src/main/java/org/drools/core/util/MapUtils.java\ndeleted file mode 100644\nindex d314fc54d0..0000000000\n--- a/drools-core/src/main/java/org/drools/core/util/MapUtils.java\n+++ /dev/null\n\n@@ -1,19 +0,0 @@\n-package org.drools.core.util;\n-\n-import java.util.Map;\n-import java.util.function.Function;\n-import java.util.stream.Collectors;\n-\n-public class MapUtils {\n-\n-    private MapUtils() {\n-\n-    }\n-\n-    public static <K, V1, V2> Map<K, V2> mapValues(Map<K, V1> map, Function<V1, V2> mapper) {\n-        return map\n-                .entrySet()\n-                .stream()\n-                .collect(Collectors.toMap(Map.Entry::getKey, v -> mapper.apply(v.getValue())));\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDczMzAzNA==", "url": "https://github.com/kiegroup/drools/pull/3159#discussion_r504733034", "bodyText": "Please remove the license", "author": "danielezonca", "createdAt": "2020-10-14T14:39:39Z", "path": "drools-core/src/main/java/org/drools/core/util/StreamUtils.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright (c) 2020. Red Hat, Inc. and/or its affiliates.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */", "originalCommit": "e30d54b8fdc994abac85f49043faee61993e55a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "526fed68476e2424039a7287d6f407728c315000", "chunk": "diff --git a/drools-core/src/main/java/org/drools/core/util/StreamUtils.java b/drools-core/src/main/java/org/drools/core/util/StreamUtils.java\ndeleted file mode 100644\nindex 634da4e82e..0000000000\n--- a/drools-core/src/main/java/org/drools/core/util/StreamUtils.java\n+++ /dev/null\n\n@@ -1,29 +0,0 @@\n-/*\n- * Copyright (c) 2020. Red Hat, Inc. and/or its affiliates.\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.drools.core.util;\n-\n-import java.util.Optional;\n-import java.util.stream.Stream;\n-\n-public class StreamUtils {\n-\n-    private StreamUtils() {\n-\n-    }\n-\n-    public static <T> Stream<T> optionalToStream(Optional<T> opt) {\n-        return opt.map(Stream::of).orElse(Stream.empty());\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDczMzk1NA==", "url": "https://github.com/kiegroup/drools/pull/3159#discussion_r504733954", "bodyText": "License", "author": "danielezonca", "createdAt": "2020-10-14T14:40:41Z", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/AdditionalFileGenerator.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package org.drools.modelcompiler.builder;", "originalCommit": "e30d54b8fdc994abac85f49043faee61993e55a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "526fed68476e2424039a7287d6f407728c315000", "chunk": "diff --git a/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/AdditionalFileGenerator.java b/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/AdditionalFileGenerator.java\ndeleted file mode 100644\nindex 7f4f6c22a3..0000000000\n--- a/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/AdditionalFileGenerator.java\n+++ /dev/null\n\n@@ -1,11 +0,0 @@\n-package org.drools.modelcompiler.builder;\n-\n-import java.util.List;\n-\n-import org.drools.compiler.builder.impl.KnowledgeBuilderConfigurationImpl;\n-import org.drools.core.reteoo.Rete;\n-\n-public interface AdditionalFileGenerator {\n-\n-    List<GeneratedFile> additionalFiles(KnowledgeBuilderConfigurationImpl builderConfiguration, Rete rete);\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDczNDEyMg==", "url": "https://github.com/kiegroup/drools/pull/3159#discussion_r504734122", "bodyText": "License", "author": "danielezonca", "createdAt": "2020-10-14T14:40:52Z", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/AdditionalFileGenerators.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package org.drools.modelcompiler.builder;", "originalCommit": "e30d54b8fdc994abac85f49043faee61993e55a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "526fed68476e2424039a7287d6f407728c315000", "chunk": "diff --git a/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/AdditionalFileGenerators.java b/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/AdditionalFileGenerators.java\ndeleted file mode 100644\nindex 8cfd7a00d5..0000000000\n--- a/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/AdditionalFileGenerators.java\n+++ /dev/null\n\n@@ -1,8 +0,0 @@\n-package org.drools.modelcompiler.builder;\n-\n-import java.util.List;\n-\n-public interface AdditionalFileGenerators {\n-\n-    List<AdditionalFileGenerator> getChildren();\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDczNDIzNA==", "url": "https://github.com/kiegroup/drools/pull/3159#discussion_r504734234", "bodyText": "License", "author": "danielezonca", "createdAt": "2020-10-14T14:41:01Z", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/AdditionalFileGeneratorsImpl.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package org.drools.modelcompiler.builder;", "originalCommit": "e30d54b8fdc994abac85f49043faee61993e55a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "526fed68476e2424039a7287d6f407728c315000", "chunk": "diff --git a/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/AdditionalFileGeneratorsImpl.java b/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/AdditionalFileGeneratorsImpl.java\ndeleted file mode 100644\nindex 66496bc9c7..0000000000\n--- a/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/builder/AdditionalFileGeneratorsImpl.java\n+++ /dev/null\n\n@@ -1,21 +0,0 @@\n-package org.drools.modelcompiler.builder;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.function.Consumer;\n-\n-public class AdditionalFileGeneratorsImpl implements Consumer<AdditionalFileGenerator>,\n-                                                     AdditionalFileGenerators {\n-\n-    List<AdditionalFileGenerator> children = new ArrayList<>();\n-\n-    @Override\n-    public List<AdditionalFileGenerator> getChildren() {\n-        return children;\n-    }\n-\n-    @Override\n-    public void accept(AdditionalFileGenerator additionalFileGenerator) {\n-        children.add(additionalFileGenerator);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDczOTU5MQ==", "url": "https://github.com/kiegroup/drools/pull/3159#discussion_r504739591", "bodyText": "Is this case possible? If yes please add a comment.\nAs far as I can see this will produce a NPE inside KieBaseUpdaterOptions because it iterates over this value. Can you please verify?", "author": "danielezonca", "createdAt": "2020-10-14T14:47:42Z", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/CanonicalKieModule.java", "diffHunk": "@@ -218,6 +231,35 @@ public InternalKnowledgeBase createKieBase(KieBaseModelImpl kBaseModel, KieProje\n         return kieBase;\n     }\n \n+    @Override\n+    public void afterKieBaseCreationUpdate(String name, InternalKnowledgeBase kBase) {\n+        KnowledgeBuilder knowledgeBuilderForKieBase = getKnowledgeBuilderForKieBase(name);\n+\n+\n+        final KieBaseUpdaterOptions.OptionEntry options;\n+        if(knowledgeBuilderForKieBase instanceof KnowledgeBuilderImpl) {\n+            KnowledgeBuilderImpl knowledgeBuilderForImpl = (KnowledgeBuilderImpl) knowledgeBuilderForKieBase;\n+            KnowledgeBuilderConfigurationImpl builderConfiguration = knowledgeBuilderForImpl.getBuilderConfiguration();\n+            options = new KieBaseUpdaterOptions.OptionEntry(AlphaNetworkCompilerOption.class, builderConfiguration.getAlphaNetworkCompilerOption());\n+        } else if(resourceFileExists(getANCFile(internalKieModule.getReleaseId()))) {\n+            options = new KieBaseUpdaterOptions.OptionEntry(AlphaNetworkCompilerOption.class, AlphaNetworkCompilerOption.LOAD);\n+        } else {\n+            options = null;", "originalCommit": "e30d54b8fdc994abac85f49043faee61993e55a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMxMjQ3MA==", "url": "https://github.com/kiegroup/drools/pull/3159#discussion_r505312470", "bodyText": "https://github.com/lucamolteni/drools/blob/86432a855251e12de1ae29426d8f5eb84794ca01/drools-compiler/src/main/java/org/drools/compiler/kie/builder/impl/KieBaseUpdaterOptions.java#L32\nI agree this is not as nice as it could be though", "author": "lucamolteni", "createdAt": "2020-10-15T08:08:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDczOTU5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQxODYxMw==", "url": "https://github.com/kiegroup/drools/pull/3159#discussion_r505418613", "bodyText": "Replaced with singletonlist", "author": "lucamolteni", "createdAt": "2020-10-15T10:01:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDczOTU5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "526fed68476e2424039a7287d6f407728c315000", "chunk": "diff --git a/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/CanonicalKieModule.java b/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/CanonicalKieModule.java\nindex 7a5264718c..c051b5bcb2 100644\n--- a/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/CanonicalKieModule.java\n+++ b/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/CanonicalKieModule.java\n\n@@ -231,35 +218,6 @@ public class CanonicalKieModule implements InternalKieModule {\n         return kieBase;\n     }\n \n-    @Override\n-    public void afterKieBaseCreationUpdate(String name, InternalKnowledgeBase kBase) {\n-        KnowledgeBuilder knowledgeBuilderForKieBase = getKnowledgeBuilderForKieBase(name);\n-\n-\n-        final KieBaseUpdaterOptions.OptionEntry options;\n-        if(knowledgeBuilderForKieBase instanceof KnowledgeBuilderImpl) {\n-            KnowledgeBuilderImpl knowledgeBuilderForImpl = (KnowledgeBuilderImpl) knowledgeBuilderForKieBase;\n-            KnowledgeBuilderConfigurationImpl builderConfiguration = knowledgeBuilderForImpl.getBuilderConfiguration();\n-            options = new KieBaseUpdaterOptions.OptionEntry(AlphaNetworkCompilerOption.class, builderConfiguration.getAlphaNetworkCompilerOption());\n-        } else if(resourceFileExists(getANCFile(internalKieModule.getReleaseId()))) {\n-            options = new KieBaseUpdaterOptions.OptionEntry(AlphaNetworkCompilerOption.class, AlphaNetworkCompilerOption.LOAD);\n-        } else {\n-            options = null;\n-        }\n-\n-        KieContainerImpl.CompositeRunnable compositeUpdater = new KieContainerImpl.CompositeRunnable();\n-        KieBaseUpdaters updaters = ServiceRegistry.getService(KieBaseUpdaters.class);\n-        updaters.getChildren()\n-                .stream()\n-                .map(kbu -> kbu.create(new KieBaseUpdatersContext(new KieBaseUpdaterOptions(options),\n-                                                              kBase.getRete(),\n-                                                              kBase.getRootClassLoader()\n-                )))\n-                .forEach(compositeUpdater::add);\n-\n-        compositeUpdater.run();\n-    }\n-\n     private void buildNonNativeResources( KieBaseModelImpl kBaseModel, KieProject kieProject, ResultsImpl messages, InternalKnowledgeBase kieBase ) {\n         KnowledgeBuilder kbuilder = kieProject.buildKnowledgePackages(kBaseModel, messages, NON_MODEL_RESOURCES);\n         if ( !kbuilder.hasErrors() ) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc2OTA1MA==", "url": "https://github.com/kiegroup/drools/pull/3159#discussion_r504769050", "bodyText": "Why in similar other classes (i.e. MemoryKieModule.java) the code is\nkBase.enqueueModification(compositeUpdater);\nwhile here it is executed in place?", "author": "danielezonca", "createdAt": "2020-10-14T15:25:15Z", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/CanonicalKieModule.java", "diffHunk": "@@ -218,6 +231,35 @@ public InternalKnowledgeBase createKieBase(KieBaseModelImpl kBaseModel, KieProje\n         return kieBase;\n     }\n \n+    @Override\n+    public void afterKieBaseCreationUpdate(String name, InternalKnowledgeBase kBase) {\n+        KnowledgeBuilder knowledgeBuilderForKieBase = getKnowledgeBuilderForKieBase(name);\n+\n+\n+        final KieBaseUpdaterOptions.OptionEntry options;\n+        if(knowledgeBuilderForKieBase instanceof KnowledgeBuilderImpl) {\n+            KnowledgeBuilderImpl knowledgeBuilderForImpl = (KnowledgeBuilderImpl) knowledgeBuilderForKieBase;\n+            KnowledgeBuilderConfigurationImpl builderConfiguration = knowledgeBuilderForImpl.getBuilderConfiguration();\n+            options = new KieBaseUpdaterOptions.OptionEntry(AlphaNetworkCompilerOption.class, builderConfiguration.getAlphaNetworkCompilerOption());\n+        } else if(resourceFileExists(getANCFile(internalKieModule.getReleaseId()))) {\n+            options = new KieBaseUpdaterOptions.OptionEntry(AlphaNetworkCompilerOption.class, AlphaNetworkCompilerOption.LOAD);\n+        } else {\n+            options = null;\n+        }\n+\n+        KieContainerImpl.CompositeRunnable compositeUpdater = new KieContainerImpl.CompositeRunnable();\n+        KieBaseUpdaters updaters = ServiceRegistry.getService(KieBaseUpdaters.class);\n+        updaters.getChildren()\n+                .stream()\n+                .map(kbu -> kbu.create(new KieBaseUpdatersContext(new KieBaseUpdaterOptions(options),\n+                                                              kBase.getRete(),\n+                                                              kBase.getRootClassLoader()\n+                )))\n+                .forEach(compositeUpdater::add);\n+\n+        compositeUpdater.run();", "originalCommit": "e30d54b8fdc994abac85f49043faee61993e55a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMyNjQyNQ==", "url": "https://github.com/kiegroup/drools/pull/3159#discussion_r505326425", "bodyText": "During incremental compilation we need to enqueue(lock?) the kbase as it's being used\n\n  \n    \n      drools/drools-core/src/main/java/org/drools/core/impl/KnowledgeBaseImpl.java\n    \n    \n         Line 743\n      in\n      3df9c20\n    \n    \n    \n    \n\n        \n          \n           try { \n        \n    \n  \n\n\nJust after creation we don't need that", "author": "lucamolteni", "createdAt": "2020-10-15T08:20:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc2OTA1MA=="}], "type": "inlineReview", "revised_code": {"commit": "526fed68476e2424039a7287d6f407728c315000", "chunk": "diff --git a/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/CanonicalKieModule.java b/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/CanonicalKieModule.java\nindex 7a5264718c..c051b5bcb2 100644\n--- a/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/CanonicalKieModule.java\n+++ b/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/CanonicalKieModule.java\n\n@@ -231,35 +218,6 @@ public class CanonicalKieModule implements InternalKieModule {\n         return kieBase;\n     }\n \n-    @Override\n-    public void afterKieBaseCreationUpdate(String name, InternalKnowledgeBase kBase) {\n-        KnowledgeBuilder knowledgeBuilderForKieBase = getKnowledgeBuilderForKieBase(name);\n-\n-\n-        final KieBaseUpdaterOptions.OptionEntry options;\n-        if(knowledgeBuilderForKieBase instanceof KnowledgeBuilderImpl) {\n-            KnowledgeBuilderImpl knowledgeBuilderForImpl = (KnowledgeBuilderImpl) knowledgeBuilderForKieBase;\n-            KnowledgeBuilderConfigurationImpl builderConfiguration = knowledgeBuilderForImpl.getBuilderConfiguration();\n-            options = new KieBaseUpdaterOptions.OptionEntry(AlphaNetworkCompilerOption.class, builderConfiguration.getAlphaNetworkCompilerOption());\n-        } else if(resourceFileExists(getANCFile(internalKieModule.getReleaseId()))) {\n-            options = new KieBaseUpdaterOptions.OptionEntry(AlphaNetworkCompilerOption.class, AlphaNetworkCompilerOption.LOAD);\n-        } else {\n-            options = null;\n-        }\n-\n-        KieContainerImpl.CompositeRunnable compositeUpdater = new KieContainerImpl.CompositeRunnable();\n-        KieBaseUpdaters updaters = ServiceRegistry.getService(KieBaseUpdaters.class);\n-        updaters.getChildren()\n-                .stream()\n-                .map(kbu -> kbu.create(new KieBaseUpdatersContext(new KieBaseUpdaterOptions(options),\n-                                                              kBase.getRete(),\n-                                                              kBase.getRootClassLoader()\n-                )))\n-                .forEach(compositeUpdater::add);\n-\n-        compositeUpdater.run();\n-    }\n-\n     private void buildNonNativeResources( KieBaseModelImpl kBaseModel, KieProject kieProject, ResultsImpl messages, InternalKnowledgeBase kieBase ) {\n         KnowledgeBuilder kbuilder = kieProject.buildKnowledgePackages(kBaseModel, messages, NON_MODEL_RESOURCES);\n         if ( !kbuilder.hasErrors() ) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc2OTYxMg==", "url": "https://github.com/kiegroup/drools/pull/3159#discussion_r504769612", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new RuntimeException(e);\n          \n          \n            \n                        throw new UncheckedIOException(e);", "author": "danielezonca", "createdAt": "2020-10-14T15:25:57Z", "path": "drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/CanonicalKieModule.java", "diffHunk": "@@ -437,6 +473,22 @@ private void initModels(CanonicalKieModuleModel kmodel) throws ClassNotFoundExce\n         return Stream.of(lines).skip(1).collect(toList());\n     }\n \n+    private String readExistingResourceWithName(String fileName) {\n+        String modelFiles;\n+        try {\n+            Resource modelFile = internalKieModule.getResource(fileName);\n+            modelFiles = new String(IoUtils.readBytesFromInputStream(modelFile.getInputStream()));\n+        } catch (IOException e) {\n+            throw new RuntimeException(e);", "originalCommit": "e30d54b8fdc994abac85f49043faee61993e55a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "526fed68476e2424039a7287d6f407728c315000", "chunk": "diff --git a/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/CanonicalKieModule.java b/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/CanonicalKieModule.java\nindex 7a5264718c..c051b5bcb2 100644\n--- a/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/CanonicalKieModule.java\n+++ b/drools-model/drools-model-compiler/src/main/java/org/drools/modelcompiler/CanonicalKieModule.java\n\n@@ -473,22 +437,6 @@ public class CanonicalKieModule implements InternalKieModule {\n         return Stream.of(lines).skip(1).collect(toList());\n     }\n \n-    private String readExistingResourceWithName(String fileName) {\n-        String modelFiles;\n-        try {\n-            Resource modelFile = internalKieModule.getResource(fileName);\n-            modelFiles = new String(IoUtils.readBytesFromInputStream(modelFile.getInputStream()));\n-        } catch (IOException e) {\n-            throw new RuntimeException(e);\n-        }\n-        return modelFiles;\n-    }\n-\n-    private boolean resourceFileExists(String fileName) {\n-        Resource modelFile = internalKieModule.getResource(fileName);\n-        return modelFile != null;\n-    }\n-\n     @Override\n     public KieJarChangeSet getChanges(InternalKieModule newKieModule) {\n         KieJarChangeSet result = findChanges(newKieModule);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc3NDgxOA==", "url": "https://github.com/kiegroup/drools/pull/3159#discussion_r504774818", "bodyText": "Is it possible to add a type bound to prevent arbitrary classes?", "author": "danielezonca", "createdAt": "2020-10-14T15:32:38Z", "path": "drools-alphanetwork-compiler/src/main/java/org/drools/ancompiler/CompiledNetworkSource.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package org.drools.ancompiler;\n+\n+import org.drools.core.reteoo.ObjectTypeNode;\n+import org.drools.core.rule.IndexableConstraint;\n+import org.drools.core.spi.InternalReadAccessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class CompiledNetworkSource {\n+\n+    private final Logger logger = LoggerFactory.getLogger(CompiledNetworkSource.class);\n+\n+    private final String source;\n+    private final IndexableConstraint indexableConstraint;\n+    private final String name;\n+    private final String sourceName;\n+    private final ObjectTypeNode objectTypeNode;\n+\n+    public CompiledNetworkSource(String source,\n+                                 IndexableConstraint indexableConstraint,\n+                                 String name,\n+                                 String sourceName,\n+                                 ObjectTypeNode objectTypeNode) {\n+        this.source = source;\n+        this.indexableConstraint = indexableConstraint;\n+        this.name = name;\n+        this.sourceName = sourceName;\n+        this.objectTypeNode = objectTypeNode;\n+    }\n+\n+    public String getSource() {\n+        return source;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getSourceName() {\n+        return sourceName;\n+    }\n+\n+    public void setCompiledNetwork(Class<?> compiledNetworkClass) {\n+        CompiledNetwork compiledNetwork = newCompiledNetworkInstance(compiledNetworkClass);\n+        compiledNetwork.setNetwork(objectTypeNode);\n+        logger.debug(\"Updating {} with instance of class: {}\",\n+                     objectTypeNode,\n+                     compiledNetworkClass.getName());\n+    }\n+\n+    public CompiledNetwork newCompiledNetworkInstance(Class<?> aClass) {", "originalCommit": "e30d54b8fdc994abac85f49043faee61993e55a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "526fed68476e2424039a7287d6f407728c315000", "chunk": "diff --git a/drools-alphanetwork-compiler/src/main/java/org/drools/ancompiler/CompiledNetworkSource.java b/drools-alphanetwork-compiler/src/main/java/org/drools/ancompiler/CompiledNetworkSource.java\ndeleted file mode 100644\nindex adbf763879..0000000000\n--- a/drools-alphanetwork-compiler/src/main/java/org/drools/ancompiler/CompiledNetworkSource.java\n+++ /dev/null\n\n@@ -1,63 +0,0 @@\n-package org.drools.ancompiler;\n-\n-import org.drools.core.reteoo.ObjectTypeNode;\n-import org.drools.core.rule.IndexableConstraint;\n-import org.drools.core.spi.InternalReadAccessor;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-public class CompiledNetworkSource {\n-\n-    private final Logger logger = LoggerFactory.getLogger(CompiledNetworkSource.class);\n-\n-    private final String source;\n-    private final IndexableConstraint indexableConstraint;\n-    private final String name;\n-    private final String sourceName;\n-    private final ObjectTypeNode objectTypeNode;\n-\n-    public CompiledNetworkSource(String source,\n-                                 IndexableConstraint indexableConstraint,\n-                                 String name,\n-                                 String sourceName,\n-                                 ObjectTypeNode objectTypeNode) {\n-        this.source = source;\n-        this.indexableConstraint = indexableConstraint;\n-        this.name = name;\n-        this.sourceName = sourceName;\n-        this.objectTypeNode = objectTypeNode;\n-    }\n-\n-    public String getSource() {\n-        return source;\n-    }\n-\n-    public String getName() {\n-        return name;\n-    }\n-\n-    public String getSourceName() {\n-        return sourceName;\n-    }\n-\n-    public void setCompiledNetwork(Class<?> compiledNetworkClass) {\n-        CompiledNetwork compiledNetwork = newCompiledNetworkInstance(compiledNetworkClass);\n-        compiledNetwork.setNetwork(objectTypeNode);\n-        logger.debug(\"Updating {} with instance of class: {}\",\n-                     objectTypeNode,\n-                     compiledNetworkClass.getName());\n-    }\n-\n-    public CompiledNetwork newCompiledNetworkInstance(Class<?> aClass) {\n-        try {\n-            return (CompiledNetwork) aClass.getDeclaredConstructor(org.drools.core.spi.InternalReadAccessor.class)\n-                    .newInstance(getFieldExtractor());\n-        } catch (Exception e) {\n-            throw new CouldNotCreateAlphaNetworkCompilerException(e);\n-        }\n-    }\n-\n-    private InternalReadAccessor getFieldExtractor() {\n-        return indexableConstraint == null ? null : indexableConstraint.getFieldExtractor();\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc3NzY3Mw==", "url": "https://github.com/kiegroup/drools/pull/3159#discussion_r504777673", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .collect(Collectors.toMap(CompiledNetworkSource::getName, c -> c));\n          \n          \n            \n                            .collect(Collectors.toMap(CompiledNetworkSource::getName, Function.identity()));", "author": "danielezonca", "createdAt": "2020-10-14T15:36:24Z", "path": "drools-alphanetwork-compiler/src/main/java/org/drools/ancompiler/ObjectTypeNodeCompiler.java", "diffHunk": "@@ -221,59 +201,38 @@ private String getPackageName() {\n         return PACKAGE_NAME;\n     }\n \n-    private static final JavaCompiler JAVA_COMPILER = JavaCompilerFactory.INSTANCE.loadCompiler( JavaConfiguration.CompilerType.NATIVE, \"1.8\");\n-\n-    /**\n-     * Creates a {@link CompiledNetwork} for the specified {@link ObjectTypeNode}. The {@link PackageBuilder} is used\n-     * to compile the generated source and load the class.\n-     *\n-     * @param kBuilder     builder used to compile and load class\n-     * @param objectTypeNode OTN we are generating a compiled network for\n-     * @return CompiledNetwork\n-     */\n-    public static CompiledNetwork compile( InternalKnowledgeBuilder kBuilder, ObjectTypeNode objectTypeNode) {\n-        if (objectTypeNode == null) {\n-            throw new IllegalArgumentException(\"ObjectTypeNode cannot be null!\");\n-        }\n-        if (kBuilder == null) {\n-            throw new IllegalArgumentException(\"PackageBuilder cannot be null!\");\n-        }\n-        ObjectTypeNodeCompiler compiler = new ObjectTypeNodeCompiler(objectTypeNode);\n-\n-        String packageName = compiler.getPackageName();\n-\n-        PackageRegistry pkgReg = kBuilder.getPackageRegistry(packageName);\n-        if (pkgReg == null) {\n-            kBuilder.addPackage(new PackageDescr(packageName));\n-            pkgReg = kBuilder.getPackageRegistry(packageName);\n-        }\n-\n-        SourceGenerated source = compiler.generateSource();\n-\n-        logger.debug(\"Generated alpha node compiled network source:\\n\" + source.source);\n-\n-        MemoryFileSystem mfs = new MemoryFileSystem();\n-        mfs.write(compiler.getSourceName(), source.source.getBytes(IoUtils.UTF8_CHARSET));\n-\n-        MemoryFileSystem trg = new MemoryFileSystem();\n-        ProjectClassLoader rootClassLoader = (ProjectClassLoader) kBuilder.getRootClassLoader();\n-        CompilationResult compiled = JAVA_COMPILER.compile(new String[]{compiler.getSourceName()}, mfs, trg, rootClassLoader);\n+    public static List<CompiledNetworkSource> compiledNetworkSources(Rete rete) {\n+        return objectTypeNodeCompiler(rete)\n+                .stream()\n+                .map(ObjectTypeNodeCompiler::generateSource)\n+                .collect(Collectors.toList());\n+    }\n \n-        if (compiled.getErrors().length > 0) {\n-            throw new RuntimeException(\"This is a bug. Please contact the development team:\\n\" + Arrays.toString(compiled.getErrors()));\n-        }\n+    public static List<ObjectTypeNodeCompiler> objectTypeNodeCompiler(Rete rete) {\n+        return objectTypeNodes(rete)\n+                .stream()\n+                .map(ObjectTypeNodeCompiler::new)\n+                .collect(Collectors.toList());\n+    }\n \n-        rootClassLoader.defineClass(compiler.getName(), trg.getBytes(compiler.getBinaryName()));\n+    public static List<ObjectTypeNode> objectTypeNodes(Rete rete) {\n+        return rete.getEntryPointNodes().values().stream()\n+                .flatMap(ep -> ep.getObjectTypeNodes().values().stream())\n+                .filter(f -> !InitialFact.class.isAssignableFrom(f.getObjectType().getClassType()))\n+                .collect(Collectors.toList());\n+    }\n \n-        CompiledNetwork network;\n-        try {\n-            final Class<?> aClass = Class.forName(compiler.getName(), true, rootClassLoader);\n-            final IndexableConstraint indexableConstraint = source.indexableConstraint;\n-            network = (CompiledNetwork) aClass.getConstructor(InternalReadAccessor.class).newInstance(indexableConstraint != null ? indexableConstraint.getFieldExtractor(): null);\n-        } catch (Exception e) {\n-            throw new RuntimeException(\"This is a bug. Please contact the development team\", e);\n-        }\n+    public static Map<String, CompiledNetworkSource> compiledNetworkSourceMap(Rete rete) {\n+        List<CompiledNetworkSource> compiledNetworkSources = ObjectTypeNodeCompiler.compiledNetworkSources(rete);\n+        return compiledNetworkSources\n+                .stream()\n+                .collect(Collectors.toMap(CompiledNetworkSource::getName, c -> c));", "originalCommit": "e30d54b8fdc994abac85f49043faee61993e55a4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "526fed68476e2424039a7287d6f407728c315000", "chunk": "diff --git a/drools-alphanetwork-compiler/src/main/java/org/drools/ancompiler/ObjectTypeNodeCompiler.java b/drools-alphanetwork-compiler/src/main/java/org/drools/ancompiler/ObjectTypeNodeCompiler.java\nindex b0cd9022dd..450b0a2884 100644\n--- a/drools-alphanetwork-compiler/src/main/java/org/drools/ancompiler/ObjectTypeNodeCompiler.java\n+++ b/drools-alphanetwork-compiler/src/main/java/org/drools/ancompiler/ObjectTypeNodeCompiler.java\n\n@@ -201,38 +213,61 @@ public class ObjectTypeNodeCompiler {\n         return PACKAGE_NAME;\n     }\n \n-    public static List<CompiledNetworkSource> compiledNetworkSources(Rete rete) {\n-        return objectTypeNodeCompiler(rete)\n-                .stream()\n-                .map(ObjectTypeNodeCompiler::generateSource)\n-                .collect(Collectors.toList());\n-    }\n+    private static final JavaCompiler JAVA_COMPILER = JavaCompilerFactory.INSTANCE.loadCompiler( JavaConfiguration.CompilerType.NATIVE, \"1.8\");\n \n-    public static List<ObjectTypeNodeCompiler> objectTypeNodeCompiler(Rete rete) {\n-        return objectTypeNodes(rete)\n-                .stream()\n-                .map(ObjectTypeNodeCompiler::new)\n-                .collect(Collectors.toList());\n-    }\n+    /**\n+     * Creates a {@link CompiledNetwork} for the specified {@link ObjectTypeNode}. The {@link PackageBuilder} is used\n+     * to compile the generated source and load the class.\n+     *\n+     * @param kBuilder     builder used to compile and load class\n+     * @param objectTypeNode OTN we are generating a compiled network for\n+     * @return CompiledNetwork\n+     */\n+    public static CompiledNetwork compile( InternalKnowledgeBuilder kBuilder, ObjectTypeNode objectTypeNode) {\n+        if (objectTypeNode == null) {\n+            throw new IllegalArgumentException(\"ObjectTypeNode cannot be null!\");\n+        }\n+        if (kBuilder == null) {\n+            throw new IllegalArgumentException(\"PackageBuilder cannot be null!\");\n+        }\n+        ObjectTypeNodeCompiler compiler = new ObjectTypeNodeCompiler(objectTypeNode);\n \n-    public static List<ObjectTypeNode> objectTypeNodes(Rete rete) {\n-        return rete.getEntryPointNodes().values().stream()\n-                .flatMap(ep -> ep.getObjectTypeNodes().values().stream())\n-                .filter(f -> !InitialFact.class.isAssignableFrom(f.getObjectType().getClassType()))\n-                .collect(Collectors.toList());\n-    }\n+        String packageName = compiler.getPackageName();\n \n-    public static Map<String, CompiledNetworkSource> compiledNetworkSourceMap(Rete rete) {\n-        List<CompiledNetworkSource> compiledNetworkSources = ObjectTypeNodeCompiler.compiledNetworkSources(rete);\n-        return compiledNetworkSources\n-                .stream()\n-                .collect(Collectors.toMap(CompiledNetworkSource::getName, c -> c));\n-    }\n+        PackageRegistry pkgReg = kBuilder.getPackageRegistry(packageName);\n+        if (pkgReg == null) {\n+            kBuilder.addPackage(new PackageDescr(packageName));\n+            pkgReg = kBuilder.getPackageRegistry(packageName);\n+        }\n+\n+        SourceGenerated source = compiler.generateSource();\n+\n+        // TODO Luca avoid in memory compilation\n+\n+        logger.debug(\"Generated alpha node compiled network source:\\n\" + source.source);\n+\n+        MemoryFileSystem mfs = new MemoryFileSystem();\n+        mfs.write(compiler.getSourceName(), source.source.getBytes(IoUtils.UTF8_CHARSET));\n+\n+        MemoryFileSystem trg = new MemoryFileSystem();\n+        ProjectClassLoader rootClassLoader = (ProjectClassLoader) kBuilder.getRootClassLoader();\n+        CompilationResult compiled = JAVA_COMPILER.compile(new String[]{compiler.getSourceName()}, mfs, trg, rootClassLoader);\n+\n+        if (compiled.getErrors().length > 0) {\n+            throw new RuntimeException(\"This is a bug. Please contact the development team:\\n\" + Arrays.toString(compiled.getErrors()));\n+        }\n+\n+        rootClassLoader.defineClass(compiler.getName(), trg.getBytes(compiler.getBinaryName()));\n+\n+        CompiledNetwork network;\n+        try {\n+            final Class<?> aClass = Class.forName(compiler.getName(), true, rootClassLoader);\n+            final IndexableConstraint indexableConstraint = source.indexableConstraint;\n+            network = (CompiledNetwork) aClass.getConstructor(InternalReadAccessor.class).newInstance(indexableConstraint != null ? indexableConstraint.getFieldExtractor(): null);\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"This is a bug. Please contact the development team\", e);\n+        }\n \n-    public static Map<ObjectTypeNode, String> otnWithClassName(Rete rete) {\n-        List<ObjectTypeNodeCompiler> compiledNetworkSources = ObjectTypeNodeCompiler.objectTypeNodeCompiler(rete);\n-        return compiledNetworkSources\n-                .stream()\n-                .collect(Collectors.toMap(k -> k.objectTypeNode, ObjectTypeNodeCompiler::getName));\n+        return network;\n     }\n }\n"}}, {"oid": "526fed68476e2424039a7287d6f407728c315000", "url": "https://github.com/kiegroup/drools/commit/526fed68476e2424039a7287d6f407728c315000", "message": "ANC module compiling, but not created", "committedDate": "2020-10-15T07:28:57Z", "type": "commit"}, {"oid": "93778f642a874bebbdeba0080cb87f9f3970f553", "url": "https://github.com/kiegroup/drools/commit/93778f642a874bebbdeba0080cb87f9f3970f553", "message": "Fix pom", "committedDate": "2020-10-15T07:28:57Z", "type": "commit"}, {"oid": "1647be10fdd4ae9395c1b492a97416c8f34dd47b", "url": "https://github.com/kiegroup/drools/commit/1647be10fdd4ae9395c1b492a97416c8f34dd47b", "message": "New field for source results", "committedDate": "2020-10-15T07:28:57Z", "type": "commit"}, {"oid": "873b1c8d0707d64efdd8a4be5bafd67c59c0d66f", "url": "https://github.com/kiegroup/drools/commit/873b1c8d0707d64efdd8a4be5bafd67c59c0d66f", "message": "Removed in memory compilation", "committedDate": "2020-10-15T07:28:57Z", "type": "commit"}, {"oid": "b606d0fec95579a66e2af0759685d0576d69e24e", "url": "https://github.com/kiegroup/drools/commit/b606d0fec95579a66e2af0759685d0576d69e24e", "message": "Start compiling in test", "committedDate": "2020-10-15T07:28:57Z", "type": "commit"}, {"oid": "ff87ea35bf16b30ff641296b302b57060c7b3e34", "url": "https://github.com/kiegroup/drools/commit/ff87ea35bf16b30ff641296b302b57060c7b3e34", "message": "Compiling", "committedDate": "2020-10-15T07:28:57Z", "type": "commit"}, {"oid": "aea28524c6439736749c54d0f53f6ccdcb81a8f8", "url": "https://github.com/kiegroup/drools/commit/aea28524c6439736749c54d0f53f6ccdcb81a8f8", "message": "CompiledNetwork is a ObjectSinkPropagator, threfore avoiding having a specific ObjectTypeNode for ANC", "committedDate": "2020-10-15T07:28:57Z", "type": "commit"}, {"oid": "4c0d982b3084e014b4912c7ad4e6bfeb02cff5c7", "url": "https://github.com/kiegroup/drools/commit/4c0d982b3084e014b4912c7ad4e6bfeb02cff5c7", "message": "Small refactor", "committedDate": "2020-10-15T07:28:57Z", "type": "commit"}, {"oid": "c395704c6c3760973d08147c3976cadbbc414506", "url": "https://github.com/kiegroup/drools/commit/c395704c6c3760973d08147c3976cadbbc414506", "message": "Avoiding compiling empty", "committedDate": "2020-10-15T07:28:57Z", "type": "commit"}, {"oid": "45171eee0e1893145c674896218e741d888906e3", "url": "https://github.com/kiegroup/drools/commit/45171eee0e1893145c674896218e741d888906e3", "message": "Wrap originalSinkPropagator in CompiledNetwork", "committedDate": "2020-10-15T07:28:57Z", "type": "commit"}, {"oid": "abe3c88e00151f48a78a90b9f513ad976555e70e", "url": "https://github.com/kiegroup/drools/commit/abe3c88e00151f48a78a90b9f513ad976555e70e", "message": "Fix test accessing the objectSinkPropagator()", "committedDate": "2020-10-15T07:28:57Z", "type": "commit"}, {"oid": "5af54984386d721a3132c9a8883d34b066ad7235", "url": "https://github.com/kiegroup/drools/commit/5af54984386d721a3132c9a8883d34b066ad7235", "message": "Fix other test", "committedDate": "2020-10-15T07:28:57Z", "type": "commit"}, {"oid": "f89ee9f91bcf5576fe2ae571d5abbcf6f7e15f0a", "url": "https://github.com/kiegroup/drools/commit/f89ee9f91bcf5576fe2ae571d5abbcf6f7e15f0a", "message": "New KieModule", "committedDate": "2020-10-15T07:28:57Z", "type": "commit"}, {"oid": "0b2e1d8d897b799828143f74af3895b933f9c59b", "url": "https://github.com/kiegroup/drools/commit/0b2e1d8d897b799828143f74af3895b933f9c59b", "message": "Moved test to drools-test-coverage", "committedDate": "2020-10-15T07:28:57Z", "type": "commit"}, {"oid": "048868986a2f40e7177ddff32a20aa58596f9eb6", "url": "https://github.com/kiegroup/drools/commit/048868986a2f40e7177ddff32a20aa58596f9eb6", "message": "Example of injection of multiple services", "committedDate": "2020-10-15T07:28:57Z", "type": "commit"}, {"oid": "96bc8b8d05ecd8d3ea848d1685fa0b938f48e323", "url": "https://github.com/kiegroup/drools/commit/96bc8b8d05ecd8d3ea848d1685fa0b938f48e323", "message": "Renamed KieBaseUpdater", "committedDate": "2020-10-15T07:28:57Z", "type": "commit"}, {"oid": "2ea464232af9bcf42802b507f3bd28302278fca1", "url": "https://github.com/kiegroup/drools/commit/2ea464232af9bcf42802b507f3bd28302278fca1", "message": "Split KieBaseUpdater and Factory", "committedDate": "2020-10-15T07:28:57Z", "type": "commit"}, {"oid": "9ac0056e29150ea3afb8477ac12e90981387cc16", "url": "https://github.com/kiegroup/drools/commit/9ac0056e29150ea3afb8477ac12e90981387cc16", "message": "First draft of KieBaseUpdaterANC", "committedDate": "2020-10-15T07:28:58Z", "type": "commit"}, {"oid": "7aa881ff7bff243d251a6a48f03ab18490ba2a06", "url": "https://github.com/kiegroup/drools/commit/7aa881ff7bff243d251a6a48f03ab18490ba2a06", "message": "Fix typo", "committedDate": "2020-10-15T07:28:58Z", "type": "commit"}, {"oid": "f944924c73f739985ced3a47b18557e575f796c4", "url": "https://github.com/kiegroup/drools/commit/f944924c73f739985ced3a47b18557e575f796c4", "message": "First draft of test", "committedDate": "2020-10-15T07:28:58Z", "type": "commit"}, {"oid": "ebf931f25cce30d3eeaa501ea64d4594252d9b9a", "url": "https://github.com/kiegroup/drools/commit/ebf931f25cce30d3eeaa501ea64d4594252d9b9a", "message": "In memory update", "committedDate": "2020-10-15T07:28:58Z", "type": "commit"}, {"oid": "70b5506716222313ffb1eeb15e3d0a0a0550aaee", "url": "https://github.com/kiegroup/drools/commit/70b5506716222313ffb1eeb15e3d0a0a0550aaee", "message": "Update only when using alpha network compiler", "committedDate": "2020-10-15T07:28:58Z", "type": "commit"}, {"oid": "df93db3a1a2648f0a5fe4e03c98148ac807288e4", "url": "https://github.com/kiegroup/drools/commit/df93db3a1a2648f0a5fe4e03c98148ac807288e4", "message": "Update to 7.45", "committedDate": "2020-10-15T07:28:58Z", "type": "commit"}, {"oid": "e15942237193597f1cd5fbf0ad4900c17bb4f420", "url": "https://github.com/kiegroup/drools/commit/e15942237193597f1cd5fbf0ad4900c17bb4f420", "message": "IncrementalCompilationTest enabled for ANC", "committedDate": "2020-10-15T07:28:58Z", "type": "commit"}, {"oid": "b287311b58e90dba762f204b1a25a7af9e4ad7d5", "url": "https://github.com/kiegroup/drools/commit/b287311b58e90dba762f204b1a25a7af9e4ad7d5", "message": "Correct testing for IncrementalCompilationTest.testKJarUpgradeWithDeclaredType", "committedDate": "2020-10-15T07:28:58Z", "type": "commit"}, {"oid": "f232706847085236a94e8a65c67a99a497b0e2cf", "url": "https://github.com/kiegroup/drools/commit/f232706847085236a94e8a65c67a99a497b0e2cf", "message": "Reverted moving DynamicRuleLoadTest to drools-test-coverage", "committedDate": "2020-10-15T07:28:58Z", "type": "commit"}, {"oid": "21669e02ea601376342de6ba7c7b7c2cc9386726", "url": "https://github.com/kiegroup/drools/commit/21669e02ea601376342de6ba7c7b7c2cc9386726", "message": "Reverted some more changes", "committedDate": "2020-10-15T07:28:58Z", "type": "commit"}, {"oid": "c55504bba00e95411ff134bb0b917bf592224ef4", "url": "https://github.com/kiegroup/drools/commit/c55504bba00e95411ff134bb0b917bf592224ef4", "message": "Removed previous compiling of ANC", "committedDate": "2020-10-15T07:28:58Z", "type": "commit"}, {"oid": "c076ead5e99b94c1aac82099e315ea91a0656d31", "url": "https://github.com/kiegroup/drools/commit/c076ead5e99b94c1aac82099e315ea91a0656d31", "message": "Removed unused dependency", "committedDate": "2020-10-15T07:28:58Z", "type": "commit"}, {"oid": "fbbe10f6cc9a1edd8a50df14cd43100ebde1053c", "url": "https://github.com/kiegroup/drools/commit/fbbe10f6cc9a1edd8a50df14cd43100ebde1053c", "message": "Use configuration option", "committedDate": "2020-10-15T07:28:58Z", "type": "commit"}, {"oid": "e2355e0616d01d9c77d278451d1911403408a8ec", "url": "https://github.com/kiegroup/drools/commit/e2355e0616d01d9c77d278451d1911403408a8ec", "message": "Fix update of CanonicalKieBaseUpdater", "committedDate": "2020-10-15T07:28:58Z", "type": "commit"}, {"oid": "527b18e86d7682ffb5d3dfcd0d37ec013f045403", "url": "https://github.com/kiegroup/drools/commit/527b18e86d7682ffb5d3dfcd0d37ec013f045403", "message": "Avoid deadlock in .fireUntilHalt", "committedDate": "2020-10-15T07:28:58Z", "type": "commit"}, {"oid": "456dcc52527c27a434b44ea37a18640d077ea244", "url": "https://github.com/kiegroup/drools/commit/456dcc52527c27a434b44ea37a18640d077ea244", "message": "Create KnowledgeBuilder outside the updater", "committedDate": "2020-10-15T07:28:58Z", "type": "commit"}, {"oid": "f60773ce232e4678024ade445eaf84a8c95964fc", "url": "https://github.com/kiegroup/drools/commit/f60773ce232e4678024ade445eaf84a8c95964fc", "message": "Fix after rebase", "committedDate": "2020-10-15T07:28:58Z", "type": "commit"}, {"oid": "00a09af34aee54b01b4e94c77bf02b42270e805c", "url": "https://github.com/kiegroup/drools/commit/00a09af34aee54b01b4e94c77bf02b42270e805c", "message": "Slimmer context for additional updaters", "committedDate": "2020-10-15T07:28:58Z", "type": "commit"}, {"oid": "20007d6682012d79247f475cce56f516bce47812", "url": "https://github.com/kiegroup/drools/commit/20007d6682012d79247f475cce56f516bce47812", "message": "Moved ANC to RuleBaseConfiguration, default to disabled. InMemoryCompilation in KieContainerImpl", "committedDate": "2020-10-15T07:28:58Z", "type": "commit"}, {"oid": "f3657923c532ad1a876f4f9733c70e33a90f29c0", "url": "https://github.com/kiegroup/drools/commit/f3657923c532ad1a876f4f9733c70e33a90f29c0", "message": "Fix default and test", "committedDate": "2020-10-15T07:28:58Z", "type": "commit"}, {"oid": "d5c705e39144cc7a14739f6b0dea521d5fac3d4b", "url": "https://github.com/kiegroup/drools/commit/d5c705e39144cc7a14739f6b0dea521d5fac3d4b", "message": "Revert back to KnowledgeBuilderConfigurationImpl", "committedDate": "2020-10-15T07:28:58Z", "type": "commit"}, {"oid": "c2566f9d3556f58d03ff60833432e93ae7dfb2d5", "url": "https://github.com/kiegroup/drools/commit/c2566f9d3556f58d03ff60833432e93ae7dfb2d5", "message": "Revert \"Moved ANC to RuleBaseConfiguration, default to disabled. InMemoryCompilation in KieContainerImpl\"\n\nThis reverts commit a4685723", "committedDate": "2020-10-15T07:28:58Z", "type": "commit"}, {"oid": "b47d24f226d2cbbfbc0bf12bee51dbf15c309b16", "url": "https://github.com/kiegroup/drools/commit/b47d24f226d2cbbfbc0bf12bee51dbf15c309b16", "message": "Fix running of InMemory ANC", "committedDate": "2020-10-15T07:28:58Z", "type": "commit"}, {"oid": "5946f8b502d33f22d05793c0219d4c741b190925", "url": "https://github.com/kiegroup/drools/commit/5946f8b502d33f22d05793c0219d4c741b190925", "message": "Fix running of InMemory ANC", "committedDate": "2020-10-15T07:28:58Z", "type": "commit"}, {"oid": "019feedb28d7f1b860d1c83442f68655e40a03d8", "url": "https://github.com/kiegroup/drools/commit/019feedb28d7f1b860d1c83442f68655e40a03d8", "message": "[DROOLS-4844] Alpha Network Compiler should be an option in Kie-API", "committedDate": "2020-10-15T07:28:58Z", "type": "commit"}, {"oid": "d1de0eb05432b6f21fd7da7606a839f48fefec0c", "url": "https://github.com/kiegroup/drools/commit/d1de0eb05432b6f21fd7da7606a839f48fefec0c", "message": "Added TODO", "committedDate": "2020-10-15T07:28:58Z", "type": "commit"}, {"oid": "0ea48549b71cebdd4f92f429f5c5aa57f3b31099", "url": "https://github.com/kiegroup/drools/commit/0ea48549b71cebdd4f92f429f5c5aa57f3b31099", "message": "Moved ANC test to module", "committedDate": "2020-10-15T07:28:58Z", "type": "commit"}, {"oid": "1a4eb9bb1456fd70b0ba7da0a597927d9555deee", "url": "https://github.com/kiegroup/drools/commit/1a4eb9bb1456fd70b0ba7da0a597927d9555deee", "message": "Additional files generator for exec model", "committedDate": "2020-10-15T07:28:58Z", "type": "commit"}, {"oid": "a34fbd4eeea927a7d6e5e4e2fb3ed29cde9df713", "url": "https://github.com/kiegroup/drools/commit/a34fbd4eeea927a7d6e5e4e2fb3ed29cde9df713", "message": "Experiment with new callbabck after writeProjectOutput with kiebase name", "committedDate": "2020-10-15T07:28:58Z", "type": "commit"}, {"oid": "8f0715a43c9e7a46ea3a5ff07a5520df8352be12", "url": "https://github.com/kiegroup/drools/commit/8f0715a43c9e7a46ea3a5ff07a5520df8352be12", "message": "Revert \"Experiment with new callbabck after writeProjectOutput with kiebase name\"\n\nThis reverts commit 60864351", "committedDate": "2020-10-15T07:28:58Z", "type": "commit"}, {"oid": "d056a6c909196199b366abde42050e6abdfdfd71", "url": "https://github.com/kiegroup/drools/commit/d056a6c909196199b366abde42050e6abdfdfd71", "message": "Remove this", "committedDate": "2020-10-15T07:28:58Z", "type": "commit"}, {"oid": "9d37a5e9d68203baa9becc42ab06c03d1c4384cb", "url": "https://github.com/kiegroup/drools/commit/9d37a5e9d68203baa9becc42ab06c03d1c4384cb", "message": "ANC Loading from KJar", "committedDate": "2020-10-15T07:28:58Z", "type": "commit"}, {"oid": "2a23dbfa301394c146851406254eba876e15aab2", "url": "https://github.com/kiegroup/drools/commit/2a23dbfa301394c146851406254eba876e15aab2", "message": "Abstract configuration from updater, read anc file to instantiate ANC from the kie-maven-plugin", "committedDate": "2020-10-15T07:28:58Z", "type": "commit"}, {"oid": "25b13dc29fc4baaf1348b800c4a032e724c54185", "url": "https://github.com/kiegroup/drools/commit/25b13dc29fc4baaf1348b800c4a032e724c54185", "message": "Do not silently fail when class not found", "committedDate": "2020-10-15T07:28:58Z", "type": "commit"}, {"oid": "fb34a735c9d0c29e57099f4dc4dbc93796884386", "url": "https://github.com/kiegroup/drools/commit/fb34a735c9d0c29e57099f4dc4dbc93796884386", "message": "Stable class name for ObjectTypeNodeCompiler", "committedDate": "2020-10-15T07:28:58Z", "type": "commit"}, {"oid": "3c3354b021f47617965516df9abe48a194aa53d4", "url": "https://github.com/kiegroup/drools/commit/3c3354b021f47617965516df9abe48a194aa53d4", "message": "Correct loading of ANC from Kjar, with unfortunately regeneration of source", "committedDate": "2020-10-15T07:28:58Z", "type": "commit"}, {"oid": "4f532c7903306794758a61435fbd09ce0fab9b5f", "url": "https://github.com/kiegroup/drools/commit/4f532c7903306794758a61435fbd09ce0fab9b5f", "message": "Added tracing, changed package for generated compiled an", "committedDate": "2020-10-15T07:28:59Z", "type": "commit"}, {"oid": "b5d1162968cd5a93141e23ce6c2b17bb011383c4", "url": "https://github.com/kiegroup/drools/commit/b5d1162968cd5a93141e23ce6c2b17bb011383c4", "message": "Added some more tracing", "committedDate": "2020-10-15T07:28:59Z", "type": "commit"}, {"oid": "43461d6d58f8526de9930065c8b96db4a651a5f6", "url": "https://github.com/kiegroup/drools/commit/43461d6d58f8526de9930065c8b96db4a651a5f6", "message": "Removed check for empty files", "committedDate": "2020-10-15T07:28:59Z", "type": "commit"}, {"oid": "2ad248529e9243e987047faa94bdfb76725c636a", "url": "https://github.com/kiegroup/drools/commit/2ad248529e9243e987047faa94bdfb76725c636a", "message": "Removed additional source file generators", "committedDate": "2020-10-15T07:28:59Z", "type": "commit"}, {"oid": "a41baf1324eb72b772b7fee86da568814570103e", "url": "https://github.com/kiegroup/drools/commit/a41baf1324eb72b772b7fee86da568814570103e", "message": "Changed package in OSGi", "committedDate": "2020-10-15T07:28:59Z", "type": "commit"}, {"oid": "c07b0b7f8ce3475ec0f0c216ef08164ca3148aa8", "url": "https://github.com/kiegroup/drools/commit/c07b0b7f8ce3475ec0f0c216ef08164ca3148aa8", "message": "Specific exception for ANC", "committedDate": "2020-10-15T07:28:59Z", "type": "commit"}, {"oid": "cbd132094e77b21ee6f5acd48ef6616ffacce0c7", "url": "https://github.com/kiegroup/drools/commit/cbd132094e77b21ee6f5acd48ef6616ffacce0c7", "message": "Refactor", "committedDate": "2020-10-15T07:28:59Z", "type": "commit"}, {"oid": "6b77cd42fc33606430b33f9a5ba7ab906de4d729", "url": "https://github.com/kiegroup/drools/commit/6b77cd42fc33606430b33f9a5ba7ab906de4d729", "message": "Added Jira to remember to get IndexableConstraint without generating the whole source code", "committedDate": "2020-10-15T07:28:59Z", "type": "commit"}, {"oid": "fae65d9801bbf871af7b7b59327da17df4436179", "url": "https://github.com/kiegroup/drools/commit/fae65d9801bbf871af7b7b59327da17df4436179", "message": "Removed comment", "committedDate": "2020-10-15T07:28:59Z", "type": "commit"}, {"oid": "4b5dc6f47c309c6d25ce72ece803bb81992de615", "url": "https://github.com/kiegroup/drools/commit/4b5dc6f47c309c6d25ce72ece803bb81992de615", "message": "Restored source name for kie-maven-plugin", "committedDate": "2020-10-15T07:28:59Z", "type": "commit"}, {"oid": "7c5669dd38312482eca1b87c11b1e9b4e882d2a9", "url": "https://github.com/kiegroup/drools/commit/7c5669dd38312482eca1b87c11b1e9b4e882d2a9", "message": "Reverted useless code", "committedDate": "2020-10-15T07:28:59Z", "type": "commit"}, {"oid": "2bdbff5e51428c3b4a571bdb1a9cb2ab3ac45524", "url": "https://github.com/kiegroup/drools/commit/2bdbff5e51428c3b4a571bdb1a9cb2ab3ac45524", "message": "Do not use Math.abs of hashcode", "committedDate": "2020-10-15T07:28:59Z", "type": "commit"}, {"oid": "912ebfb2387525865e25c299d037e81c5f47513c", "url": "https://github.com/kiegroup/drools/commit/912ebfb2387525865e25c299d037e81c5f47513c", "message": "Sonarcloud", "committedDate": "2020-10-15T07:28:59Z", "type": "commit"}, {"oid": "9d60dd7434816f717e4948213fbbba3ffc44950e", "url": "https://github.com/kiegroup/drools/commit/9d60dd7434816f717e4948213fbbba3ffc44950e", "message": "Removed OSGi", "committedDate": "2020-10-15T07:28:59Z", "type": "commit"}, {"oid": "01f28b01e79d6fe9e989fb7047ac3c8f9beceda1", "url": "https://github.com/kiegroup/drools/commit/01f28b01e79d6fe9e989fb7047ac3c8f9beceda1", "message": "Renamed variable", "committedDate": "2020-10-15T07:28:59Z", "type": "commit"}, {"oid": "a6dc9e7d5eebc3f6c0d1aae96858fa5cce31e005", "url": "https://github.com/kiegroup/drools/commit/a6dc9e7d5eebc3f6c0d1aae96858fa5cce31e005", "message": "Renamed variable", "committedDate": "2020-10-15T07:28:59Z", "type": "commit"}, {"oid": "c7e1b263bcba4c2de3188a1c5f6711e41734759b", "url": "https://github.com/kiegroup/drools/commit/c7e1b263bcba4c2de3188a1c5f6711e41734759b", "message": "OSGi again", "committedDate": "2020-10-15T07:28:59Z", "type": "commit"}, {"oid": "60db0a357060549024e3c36f1cf791250e4efaea", "url": "https://github.com/kiegroup/drools/commit/60db0a357060549024e3c36f1cf791250e4efaea", "message": "Removed OSGi again", "committedDate": "2020-10-15T07:28:59Z", "type": "commit"}, {"oid": "21812a475f959885bd422e6bbcc7d463fdec4507", "url": "https://github.com/kiegroup/drools/commit/21812a475f959885bd422e6bbcc7d463fdec4507", "message": "Avoid enque the updaters and run them directly", "committedDate": "2020-10-15T07:28:59Z", "type": "commit"}, {"oid": "86432a855251e12de1ae29426d8f5eb84794ca01", "url": "https://github.com/kiegroup/drools/commit/86432a855251e12de1ae29426d8f5eb84794ca01", "message": "PR Review", "committedDate": "2020-10-15T07:28:59Z", "type": "commit"}, {"oid": "17b1917a0a75d4a279160b8aa3f346ac259de555", "url": "https://github.com/kiegroup/drools/commit/17b1917a0a75d4a279160b8aa3f346ac259de555", "message": "License after PR review", "committedDate": "2020-10-15T07:28:59Z", "type": "commit"}, {"oid": "9fec98d8adfafefbdf4f0bf91b15f3bc37e5cd8d", "url": "https://github.com/kiegroup/drools/commit/9fec98d8adfafefbdf4f0bf91b15f3bc37e5cd8d", "message": "Removed useless in-memory-compiler", "committedDate": "2020-10-15T07:55:50Z", "type": "commit"}, {"oid": "9fec98d8adfafefbdf4f0bf91b15f3bc37e5cd8d", "url": "https://github.com/kiegroup/drools/commit/9fec98d8adfafefbdf4f0bf91b15f3bc37e5cd8d", "message": "Removed useless in-memory-compiler", "committedDate": "2020-10-15T07:55:50Z", "type": "forcePushed"}, {"oid": "8138c46c6400ecfb08e06f964b473218ebcf8640", "url": "https://github.com/kiegroup/drools/commit/8138c46c6400ecfb08e06f964b473218ebcf8640", "message": "Added comment after release", "committedDate": "2020-10-15T08:10:37Z", "type": "commit"}, {"oid": "bda0f8849e2bd364bb930bf3f272d570cd30f05d", "url": "https://github.com/kiegroup/drools/commit/bda0f8849e2bd364bb930bf3f272d570cd30f05d", "message": "Replaced null check with list/singletonList", "committedDate": "2020-10-15T10:00:35Z", "type": "commit"}, {"oid": "d017a66d3a6d960e5ffb37cdd58e928b8e3731fe", "url": "https://github.com/kiegroup/drools/commit/d017a66d3a6d960e5ffb37cdd58e928b8e3731fe", "message": "Licenses on ANC", "committedDate": "2020-10-15T10:26:51Z", "type": "commit"}, {"oid": "8ac23d41c15793b78c1179b8810c829f84283287", "url": "https://github.com/kiegroup/drools/commit/8ac23d41c15793b78c1179b8810c829f84283287", "message": "Licenses on ANC", "committedDate": "2020-10-15T10:31:22Z", "type": "commit"}, {"oid": "6318d8121a32359548f3ce68987567cfc95d0e26", "url": "https://github.com/kiegroup/drools/commit/6318d8121a32359548f3ce68987567cfc95d0e26", "message": "Licenses on ANC", "committedDate": "2020-10-15T10:33:33Z", "type": "commit"}]}