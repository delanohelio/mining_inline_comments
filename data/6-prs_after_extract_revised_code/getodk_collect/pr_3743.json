{"pr_number": 3743, "pr_title": "Improved QRCode design", "pr_createdAt": "2020-03-24T22:51:07Z", "pr_url": "https://github.com/getodk/collect/pull/3743", "timeline": [{"oid": "8b80f1a7f344bd06ff0aa1d539bd312b45805775", "url": "https://github.com/getodk/collect/commit/8b80f1a7f344bd06ff0aa1d539bd312b45805775", "message": "removed unused", "committedDate": "2020-03-25T00:03:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyMTM3NA==", "url": "https://github.com/getodk/collect/pull/3743#discussion_r400021374", "bodyText": "We should really be using ViewPager2 and FragmentStateAdapter here. ViewPager was recently deprecated so adding it in now is queuing up rework in the future unfortunately! Would you be able to have a look and see much work it would be to convert these changes over?", "author": "seadowg", "createdAt": "2020-03-30T08:43:34Z", "path": "collect_app/src/main/java/org/odk/collect/android/adapters/TabAdapter.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package org.odk.collect.android.adapters;\n+\n+import android.view.ViewGroup;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.fragment.app.Fragment;\n+import androidx.fragment.app.FragmentManager;\n+import androidx.fragment.app.FragmentPagerAdapter;\n+\n+import org.odk.collect.android.fragments.QRScannerFragment;\n+import org.odk.collect.android.fragments.ShowQRCodeFragment;\n+\n+public class TabAdapter extends FragmentPagerAdapter  {", "originalCommit": "82b2f1c278ebd1408422502882504a969b09f376", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI3MzYyNw==", "url": "https://github.com/getodk/collect/pull/3743#discussion_r401273627", "bodyText": "yep, updated now! thanks!", "author": "hypercubestart", "createdAt": "2020-03-31T23:31:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAyMTM3NA=="}], "type": "inlineReview", "revised_code": {"commit": "b15e1e3c600111d7d9095e74b89336b2df037c7a", "chunk": "diff --git a/collect_app/src/main/java/org/odk/collect/android/adapters/TabAdapter.java b/collect_app/src/main/java/org/odk/collect/android/adapters/TabAdapter.java\nindex 5ec1f791f..7e540ed1e 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/adapters/TabAdapter.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/adapters/TabAdapter.java\n\n@@ -1,24 +1,21 @@\n package org.odk.collect.android.adapters;\n \n-import android.view.ViewGroup;\n-\n import androidx.annotation.NonNull;\n-import androidx.annotation.Nullable;\n import androidx.fragment.app.Fragment;\n-import androidx.fragment.app.FragmentManager;\n-import androidx.fragment.app.FragmentPagerAdapter;\n+import androidx.fragment.app.FragmentActivity;\n+import androidx.viewpager2.adapter.FragmentStateAdapter;\n \n import org.odk.collect.android.fragments.QRScannerFragment;\n import org.odk.collect.android.fragments.ShowQRCodeFragment;\n \n-public class TabAdapter extends FragmentPagerAdapter  {\n-    private final Fragment[] myFragments = new Fragment[2];\n-    private final String[] myFragmentTitleList = {\"Scan\", \"QR Code\"};\n-    public TabAdapter(FragmentManager fm) {\n-        super(fm);\n+public class TabAdapter extends FragmentStateAdapter {\n+    public TabAdapter(FragmentActivity fa) {\n+        super(fa);\n     }\n+\n+    @NonNull\n     @Override\n-    public Fragment getItem(int position) {\n+    public Fragment createFragment(int position) {\n         switch (position) {\n             case 0:\n                 return new QRScannerFragment();\n"}}, {"oid": "b15e1e3c600111d7d9095e74b89336b2df037c7a", "url": "https://github.com/getodk/collect/commit/b15e1e3c600111d7d9095e74b89336b2df037c7a", "message": "styling", "committedDate": "2020-03-31T23:15:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY5NTEzNw==", "url": "https://github.com/getodk/collect/pull/3743#discussion_r401695137", "bodyText": "I'd be happy with this throwing a IllegalArgumentException instead. I'm pretty sure a null will result in a crash anyway so might as well have something that's easy to diagnose!", "author": "seadowg", "createdAt": "2020-04-01T15:15:39Z", "path": "collect_app/src/main/java/org/odk/collect/android/adapters/TabAdapter.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package org.odk.collect.android.adapters;\n+\n+import androidx.annotation.NonNull;\n+import androidx.fragment.app.Fragment;\n+import androidx.fragment.app.FragmentActivity;\n+import androidx.viewpager2.adapter.FragmentStateAdapter;\n+\n+import org.odk.collect.android.fragments.QRScannerFragment;\n+import org.odk.collect.android.fragments.ShowQRCodeFragment;\n+\n+public class TabAdapter extends FragmentStateAdapter {\n+    public TabAdapter(FragmentActivity fa) {\n+        super(fa);\n+    }\n+\n+    @NonNull\n+    @Override\n+    public Fragment createFragment(int position) {\n+        switch (position) {\n+            case 0:\n+                return new QRScannerFragment();\n+            case 1:\n+                return new ShowQRCodeFragment();\n+            default:\n+                // should never reach here\n+                return null;", "originalCommit": "b15e1e3c600111d7d9095e74b89336b2df037c7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIyNTgxMw==", "url": "https://github.com/getodk/collect/pull/3743#discussion_r403225813", "bodyText": "thanks for review, done!", "author": "hypercubestart", "createdAt": "2020-04-03T18:29:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY5NTEzNw=="}], "type": "inlineReview", "revised_code": {"commit": "c454ed5a5852771563b916c9caa71ae2e8b00fda", "chunk": "diff --git a/collect_app/src/main/java/org/odk/collect/android/adapters/TabAdapter.java b/collect_app/src/main/java/org/odk/collect/android/preferences/qr/QRCodeTabsAdapter.java\nsimilarity index 67%\nrename from collect_app/src/main/java/org/odk/collect/android/adapters/TabAdapter.java\nrename to collect_app/src/main/java/org/odk/collect/android/preferences/qr/QRCodeTabsAdapter.java\nindex 7e540ed1e..97e032365 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/adapters/TabAdapter.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/preferences/qr/QRCodeTabsAdapter.java\n\n@@ -1,15 +1,12 @@\n-package org.odk.collect.android.adapters;\n+package org.odk.collect.android.preferences.qr;\n \n import androidx.annotation.NonNull;\n import androidx.fragment.app.Fragment;\n import androidx.fragment.app.FragmentActivity;\n import androidx.viewpager2.adapter.FragmentStateAdapter;\n \n-import org.odk.collect.android.fragments.QRScannerFragment;\n-import org.odk.collect.android.fragments.ShowQRCodeFragment;\n-\n-public class TabAdapter extends FragmentStateAdapter {\n-    public TabAdapter(FragmentActivity fa) {\n+public class QRCodeTabsAdapter extends FragmentStateAdapter {\n+    public QRCodeTabsAdapter(FragmentActivity fa) {\n         super(fa);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY5NzI2MQ==", "url": "https://github.com/getodk/collect/pull/3743#discussion_r401697261", "bodyText": "Why do we need this? This method has generally always been a little dangerous as it changes how the Fragment lifecycle works and it also looks like it's going to be deprecated: https://developer.android.com/reference/androidx/fragment/app/Fragment#setRetainInstance(boolean)", "author": "seadowg", "createdAt": "2020-04-01T15:18:26Z", "path": "collect_app/src/main/java/org/odk/collect/android/fragments/QRScannerFragment.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/* Copyright (C) 2017 Shobhit\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.odk.collect.android.fragments;\n+import android.content.pm.PackageManager;\n+import android.os.Bundle;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.Button;\n+\n+import androidx.annotation.Nullable;\n+import androidx.fragment.app.Fragment;\n+import timber.log.Timber;\n+\n+import com.google.zxing.ResultPoint;\n+import com.google.zxing.client.android.BeepManager;\n+import com.journeyapps.barcodescanner.BarcodeCallback;\n+import com.journeyapps.barcodescanner.BarcodeResult;\n+import com.journeyapps.barcodescanner.DecoratedBarcodeView;\n+\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.preferences.QRCodeTabs;\n+import org.odk.collect.android.utilities.CompressionUtils;\n+import org.odk.collect.android.utilities.ToastUtils;\n+\n+import org.odk.collect.android.listeners.PermissionListener;\n+import org.odk.collect.android.utilities.PermissionUtils;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.zip.DataFormatException;\n+\n+public class QRScannerFragment extends Fragment implements DecoratedBarcodeView.TorchListener {\n+\n+    DecoratedBarcodeView barcodeScannerView;\n+    private Button switchFlashlightButton;\n+    private BeepManager beepManager;\n+\n+    @Override\n+    public void onCreate(@Nullable Bundle savedInstanceState) {\n+        super.onCreate(savedInstanceState);\n+        setRetainInstance(true);", "originalCommit": "b15e1e3c600111d7d9095e74b89336b2df037c7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIzMzAyMA==", "url": "https://github.com/getodk/collect/pull/3743#discussion_r403233020", "bodyText": "I was testing different behaviors, forgot to delete this. Sorry, I will delete this.", "author": "hypercubestart", "createdAt": "2020-04-03T18:38:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY5NzI2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "c454ed5a5852771563b916c9caa71ae2e8b00fda", "chunk": "diff --git a/collect_app/src/main/java/org/odk/collect/android/fragments/QRScannerFragment.java b/collect_app/src/main/java/org/odk/collect/android/preferences/qr/QRScannerFragment.java\nsimilarity index 91%\nrename from collect_app/src/main/java/org/odk/collect/android/fragments/QRScannerFragment.java\nrename to collect_app/src/main/java/org/odk/collect/android/preferences/qr/QRScannerFragment.java\nindex 0d265a8af..538edcbfe 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/fragments/QRScannerFragment.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/preferences/qr/QRScannerFragment.java\n\n@@ -11,7 +11,7 @@\n  * the License.\n  */\n \n-package org.odk.collect.android.fragments;\n+package org.odk.collect.android.preferences.qr;\n import android.content.pm.PackageManager;\n import android.os.Bundle;\n import android.view.LayoutInflater;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcwMTQ5Mg==", "url": "https://github.com/getodk/collect/pull/3743#discussion_r401701492", "bodyText": "Should this static method move out of the activity now? Seems weird for the logic to live there given it's being called from a Fragment.", "author": "seadowg", "createdAt": "2020-04-01T15:24:08Z", "path": "collect_app/src/main/java/org/odk/collect/android/fragments/QRScannerFragment.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/* Copyright (C) 2017 Shobhit\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.odk.collect.android.fragments;\n+import android.content.pm.PackageManager;\n+import android.os.Bundle;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.Button;\n+\n+import androidx.annotation.Nullable;\n+import androidx.fragment.app.Fragment;\n+import timber.log.Timber;\n+\n+import com.google.zxing.ResultPoint;\n+import com.google.zxing.client.android.BeepManager;\n+import com.journeyapps.barcodescanner.BarcodeCallback;\n+import com.journeyapps.barcodescanner.BarcodeResult;\n+import com.journeyapps.barcodescanner.DecoratedBarcodeView;\n+\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.preferences.QRCodeTabs;\n+import org.odk.collect.android.utilities.CompressionUtils;\n+import org.odk.collect.android.utilities.ToastUtils;\n+\n+import org.odk.collect.android.listeners.PermissionListener;\n+import org.odk.collect.android.utilities.PermissionUtils;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.zip.DataFormatException;\n+\n+public class QRScannerFragment extends Fragment implements DecoratedBarcodeView.TorchListener {\n+\n+    DecoratedBarcodeView barcodeScannerView;\n+    private Button switchFlashlightButton;\n+    private BeepManager beepManager;\n+\n+    @Override\n+    public void onCreate(@Nullable Bundle savedInstanceState) {\n+        super.onCreate(savedInstanceState);\n+        setRetainInstance(true);\n+    }\n+\n+    @Override\n+    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n+        View rootView = inflater.inflate(R.layout.fragment_scan, container, false);\n+        beepManager = new BeepManager(getActivity());\n+        barcodeScannerView = rootView.findViewById(R.id.barcode_view);\n+        switchFlashlightButton = rootView.findViewById(R.id.switch_flashlight);\n+\n+        barcodeScannerView.setTorchListener(this);\n+\n+        switchFlashlightButton.setOnClickListener(new View.OnClickListener() {\n+            @Override\n+            public void onClick(View v) {\n+                switchFlashlight(v);\n+            }\n+        });\n+        new PermissionUtils().requestCameraPermission(getActivity(), new PermissionListener() {\n+            @Override\n+            public void granted() {\n+                barcodeScannerView.decodeSingle(new BarcodeCallback() {\n+                    @Override\n+                    public void barcodeResult(BarcodeResult result) {\n+                        beepManager.playBeepSoundAndVibrate();\n+                        try {\n+                            QRCodeTabs.applySettings(getActivity(), CompressionUtils.decompress(result.getText()));", "originalCommit": "b15e1e3c600111d7d9095e74b89336b2df037c7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIzNjA4NA==", "url": "https://github.com/getodk/collect/pull/3743#discussion_r403236084", "bodyText": "I put the applySettings method in QRCodeTabs activity because both QRScannerFragment and ShowQRCodeFragment use it. Does this make sense or should the static method be moved somewhere else?", "author": "hypercubestart", "createdAt": "2020-04-03T18:42:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcwMTQ5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkwNDk2OA==", "url": "https://github.com/getodk/collect/pull/3743#discussion_r403904968", "bodyText": "Yeah ideally the fragments shouldn't have to know anything about the activity. I'd maybe move it to a new SettingsUtils in the preferences packages. Saying that actually I realize all of this code should live in the preferences package. Would you be able to move it?", "author": "seadowg", "createdAt": "2020-04-06T08:12:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcwMTQ5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "c454ed5a5852771563b916c9caa71ae2e8b00fda", "chunk": "diff --git a/collect_app/src/main/java/org/odk/collect/android/fragments/QRScannerFragment.java b/collect_app/src/main/java/org/odk/collect/android/preferences/qr/QRScannerFragment.java\nsimilarity index 91%\nrename from collect_app/src/main/java/org/odk/collect/android/fragments/QRScannerFragment.java\nrename to collect_app/src/main/java/org/odk/collect/android/preferences/qr/QRScannerFragment.java\nindex 0d265a8af..538edcbfe 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/fragments/QRScannerFragment.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/preferences/qr/QRScannerFragment.java\n\n@@ -11,7 +11,7 @@\n  * the License.\n  */\n \n-package org.odk.collect.android.fragments;\n+package org.odk.collect.android.preferences.qr;\n import android.content.pm.PackageManager;\n import android.os.Bundle;\n import android.view.LayoutInflater;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcwMzMwMA==", "url": "https://github.com/getodk/collect/pull/3743#discussion_r401703300", "bodyText": "The getInstance() methods here are deprecated. You should see warning in Android Studio about this. As the comment on them says it would be better to use Dagger injection to fetch these.", "author": "seadowg", "createdAt": "2020-04-01T15:26:36Z", "path": "collect_app/src/main/java/org/odk/collect/android/fragments/ShowQRCodeFragment.java", "diffHunk": "@@ -96,10 +95,11 @@\n     @Override\n     public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, Bundle savedInstanceState) {\n         View view = inflater.inflate(R.layout.show_qrcode_fragment, container, false);\n-        ((CollectAbstractActivity) getActivity()).initToolbar(getString(R.string.configure_via_qr_code));\n         ButterKnife.bind(this, view);\n         setHasOptionsMenu(true);\n         setRetainInstance(true);\n+        passwordsSet[0] = !((String) AdminSharedPreferences.getInstance().get(KEY_ADMIN_PW)).isEmpty();", "originalCommit": "b15e1e3c600111d7d9095e74b89336b2df037c7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzYzODczMQ==", "url": "https://github.com/getodk/collect/pull/3743#discussion_r403638731", "bodyText": "done thanks!", "author": "hypercubestart", "createdAt": "2020-04-05T02:20:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcwMzMwMA=="}], "type": "inlineReview", "revised_code": {"commit": "c454ed5a5852771563b916c9caa71ae2e8b00fda", "chunk": "diff --git a/collect_app/src/main/java/org/odk/collect/android/fragments/ShowQRCodeFragment.java b/collect_app/src/main/java/org/odk/collect/android/preferences/qr/ShowQRCodeFragment.java\nsimilarity index 91%\nrename from collect_app/src/main/java/org/odk/collect/android/fragments/ShowQRCodeFragment.java\nrename to collect_app/src/main/java/org/odk/collect/android/preferences/qr/ShowQRCodeFragment.java\nindex 0bb5340d0..6c43826c5 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/fragments/ShowQRCodeFragment.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/preferences/qr/ShowQRCodeFragment.java\n\n@@ -90,6 +90,12 @@ public class ShowQRCodeFragment extends Fragment {\n \n     @Inject\n     public Analytics analytics;\n+    @Inject\n+    public AdminSharedPreferences adminSharedPreferences;\n+    @Inject\n+    public GeneralSharedPreferences generalSharedPreferences;\n+    @Inject\n+    public QRCodeGenerator qrCodeGenerator;\n \n     @Nullable\n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxMzI5Mg==", "url": "https://github.com/getodk/collect/pull/3743#discussion_r401713292", "bodyText": "This should be QRCodeTabsActivity", "author": "seadowg", "createdAt": "2020-04-01T15:39:50Z", "path": "collect_app/src/main/java/org/odk/collect/android/preferences/QRCodeTabs.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package org.odk.collect.android.preferences;\n+\n+import android.app.Activity;\n+import android.content.Intent;\n+import android.net.Uri;\n+import android.os.Bundle;\n+import android.view.Menu;\n+import android.view.MenuItem;\n+\n+import org.odk.collect.android.BuildConfig;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.CollectAbstractActivity;\n+import org.odk.collect.android.activities.MainMenuActivity;\n+import org.odk.collect.android.adapters.TabAdapter;\n+import org.odk.collect.android.application.Collect;\n+import org.odk.collect.android.listeners.ActionListener;\n+import org.odk.collect.android.utilities.FileUtils;\n+import org.odk.collect.android.utilities.LocaleHelper;\n+import org.odk.collect.android.utilities.QRCodeUtils;\n+import org.odk.collect.android.utilities.ToastUtils;\n+\n+import java.io.File;\n+\n+import timber.log.Timber;\n+\n+import androidx.annotation.NonNull;\n+import androidx.appcompat.widget.Toolbar;\n+import androidx.core.content.FileProvider;\n+import androidx.viewpager2.widget.ViewPager2;\n+\n+import com.google.android.material.tabs.TabLayout;\n+import com.google.android.material.tabs.TabLayoutMediator;\n+\n+import static org.odk.collect.android.activities.ActivityUtils.startActivityAndCloseAllOthers;\n+\n+public class QRCodeTabs extends CollectAbstractActivity {", "originalCommit": "b15e1e3c600111d7d9095e74b89336b2df037c7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzYzODQ4MQ==", "url": "https://github.com/getodk/collect/pull/3743#discussion_r403638481", "bodyText": "done! @seadowg should this also be moved to collect/android/activities folder?", "author": "hypercubestart", "createdAt": "2020-04-05T02:17:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxMzI5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkwNzg5Mw==", "url": "https://github.com/getodk/collect/pull/3743#discussion_r403907893", "bodyText": "As above I think it moves to preferences. Maybe all of it should go in a preferences.qr packakge... what do you think? We're trying to organize our code by function/domain rather than component type.", "author": "seadowg", "createdAt": "2020-04-06T08:17:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxMzI5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI1NDMxMA==", "url": "https://github.com/getodk/collect/pull/3743#discussion_r405254310", "bodyText": "I like the idea of a preferences.qr package. There's a few files in here and it feels a lot cleaner than forcing even more items into the crowded preferences package.", "author": "hypercubestart", "createdAt": "2020-04-08T04:41:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcxMzI5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "c454ed5a5852771563b916c9caa71ae2e8b00fda", "chunk": "diff --git a/collect_app/src/main/java/org/odk/collect/android/preferences/QRCodeTabs.java b/collect_app/src/main/java/org/odk/collect/android/preferences/qr/QRCodeTabsActivity.java\nsimilarity index 62%\nrename from collect_app/src/main/java/org/odk/collect/android/preferences/QRCodeTabs.java\nrename to collect_app/src/main/java/org/odk/collect/android/preferences/qr/QRCodeTabsActivity.java\nindex f06f3f054..a668c0ef1 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/preferences/QRCodeTabs.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/preferences/qr/QRCodeTabsActivity.java\n\n@@ -1,6 +1,5 @@\n-package org.odk.collect.android.preferences;\n+package org.odk.collect.android.preferences.qr;\n \n-import android.app.Activity;\n import android.content.Intent;\n import android.net.Uri;\n import android.os.Bundle;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMxNzc3OA==", "url": "https://github.com/getodk/collect/pull/3743#discussion_r405317778", "bodyText": "Did this come from a file that had a copyright notice on it?\n@lognaturel should we have this kind of copyright notice in the code? I know copyright headers like this can be useful for relicensing projects (as you can scan for all the copyright holders) but as far as I know we don't have them for every contribution so we'd probably need to get that info from Git anyway.", "author": "seadowg", "createdAt": "2020-04-08T07:37:00Z", "path": "collect_app/src/main/java/org/odk/collect/android/preferences/qr/QRScannerFragment.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/* Copyright (C) 2017 Shobhit", "originalCommit": "fb92976b13167d1b6750d136739fa3dd5d86b554", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIxODk2NQ==", "url": "https://github.com/getodk/collect/pull/3743#discussion_r408218965", "bodyText": "getodk/governance#2 For unresolved governance issue. I go back and forth on what I think is best and so have stopped making any code review comments. I think that yes, git is and should be the ultimate source for authorship and copyright info. I also think that for forks, it's nice to have an ongoing reminder that they're pulling in code from another source. I find the license header more compelling than the copyright notice. I (intend to) always include the header on new files I create.\nThis specific file was renamed. On one hand, the header does capture original copyright. On the other, the file has changed enough that it's not super meaningful.\nSo I don't have strong feelings about what happens to this header.", "author": "lognaturel", "createdAt": "2020-04-14T15:15:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMxNzc3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI3MDUwNA==", "url": "https://github.com/getodk/collect/pull/3743#discussion_r408270504", "bodyText": "Yeah totally agree a license header is a different story. I'd be up for getting rid of author specific copyright notices like this where we see them as they're usually just inaccurate - they don't have copyright for this entire file. I'd generally ask people not to include them unless they feel strongly they want it as part of the PR.\nGetting rid of them without lawyers is pretty scary but I'd say we can remove this as it looks autogenerated and doesn't actually reference anyone by email/full name. I'll CC our pal @shobhitagarwal1612 (who I'm guessing is our \"shobit\" here) and see if he's ok getting rid of it. At least that will be one gone!", "author": "seadowg", "createdAt": "2020-04-14T16:26:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMxNzc3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI3OTAxMQ==", "url": "https://github.com/getodk/collect/pull/3743#discussion_r408279011", "bodyText": "I have no issues. Please remove it. Happy to see the progress happening to the project \ud83d\ude04 \ud83d\ude80\nI have always been nervous while adding a new file without a copyright. But since that issue is still a gray area, I'd leave the final decision to @lognaturel.", "author": "shobhitagarwal1612", "createdAt": "2020-04-14T16:38:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMxNzc3OA=="}], "type": "inlineReview", "revised_code": {"commit": "54442693c5c350814309524a8d2f5643f04a4c3e", "chunk": "diff --git a/collect_app/src/main/java/org/odk/collect/android/preferences/qr/QRScannerFragment.java b/collect_app/src/main/java/org/odk/collect/android/preferences/qr/QRScannerFragment.java\ndeleted file mode 100644\nindex 538edcbfe..000000000\n--- a/collect_app/src/main/java/org/odk/collect/android/preferences/qr/QRScannerFragment.java\n+++ /dev/null\n\n@@ -1,138 +0,0 @@\n-/* Copyright (C) 2017 Shobhit\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n- * in compliance with the License. You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License\n- * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n- * or implied. See the License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-\n-package org.odk.collect.android.preferences.qr;\n-import android.content.pm.PackageManager;\n-import android.os.Bundle;\n-import android.view.LayoutInflater;\n-import android.view.View;\n-import android.view.ViewGroup;\n-import android.widget.Button;\n-\n-import androidx.fragment.app.Fragment;\n-import timber.log.Timber;\n-\n-import com.google.zxing.ResultPoint;\n-import com.google.zxing.client.android.BeepManager;\n-import com.journeyapps.barcodescanner.BarcodeCallback;\n-import com.journeyapps.barcodescanner.BarcodeResult;\n-import com.journeyapps.barcodescanner.DecoratedBarcodeView;\n-\n-import org.odk.collect.android.R;\n-import org.odk.collect.android.preferences.utilities.SettingsUtils;\n-import org.odk.collect.android.utilities.CompressionUtils;\n-import org.odk.collect.android.utilities.ToastUtils;\n-\n-import org.odk.collect.android.listeners.PermissionListener;\n-import org.odk.collect.android.utilities.PermissionUtils;\n-\n-import java.io.IOException;\n-import java.util.List;\n-import java.util.zip.DataFormatException;\n-\n-public class QRScannerFragment extends Fragment implements DecoratedBarcodeView.TorchListener {\n-\n-    DecoratedBarcodeView barcodeScannerView;\n-    private Button switchFlashlightButton;\n-    private BeepManager beepManager;\n-\n-    @Override\n-    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n-        View rootView = inflater.inflate(R.layout.fragment_scan, container, false);\n-        beepManager = new BeepManager(getActivity());\n-        barcodeScannerView = rootView.findViewById(R.id.barcode_view);\n-        switchFlashlightButton = rootView.findViewById(R.id.switch_flashlight);\n-\n-        barcodeScannerView.setTorchListener(this);\n-\n-        switchFlashlightButton.setOnClickListener(new View.OnClickListener() {\n-            @Override\n-            public void onClick(View v) {\n-                switchFlashlight(v);\n-            }\n-        });\n-        new PermissionUtils().requestCameraPermission(getActivity(), new PermissionListener() {\n-            @Override\n-            public void granted() {\n-                barcodeScannerView.decodeSingle(new BarcodeCallback() {\n-                    @Override\n-                    public void barcodeResult(BarcodeResult result) {\n-                        beepManager.playBeepSoundAndVibrate();\n-                        try {\n-                            SettingsUtils.applySettings(getActivity(), CompressionUtils.decompress(result.getText()));\n-                        } catch (IOException | DataFormatException | IllegalArgumentException e) {\n-                            Timber.e(e);\n-                            ToastUtils.showShortToast(getString(R.string.invalid_qrcode));\n-                        }\n-                    }\n-\n-                    @Override\n-                    public void possibleResultPoints(List<ResultPoint> resultPoints) {\n-\n-                    }\n-                });\n-            }\n-\n-            @Override\n-            public void denied() {\n-\n-            }\n-        });\n-\n-        if (!hasFlash()) {\n-            switchFlashlightButton.setVisibility(View.GONE);\n-        }\n-\n-        return rootView;\n-    }\n-\n-    @Override\n-    public void onPause() {\n-        super.onPause();\n-        barcodeScannerView.pauseAndWait();\n-    }\n-\n-    @Override\n-    public void onResume() {\n-        super.onResume();\n-        barcodeScannerView.resume();\n-    }\n-\n-    /**\n-     * Check if the device's camera has a Flashlight.\n-     *\n-     * @return true if there is Flashlight, otherwise false.\n-     */\n-    private boolean hasFlash() {\n-        return getActivity().getApplicationContext().getPackageManager()\n-                .hasSystemFeature(PackageManager.FEATURE_CAMERA_FLASH);\n-    }\n-\n-    public void switchFlashlight(View view) {\n-        if (getString(R.string.turn_on_flashlight).equals(switchFlashlightButton.getText())) {\n-            barcodeScannerView.setTorchOn();\n-        } else {\n-            barcodeScannerView.setTorchOff();\n-        }\n-    }\n-\n-    @Override\n-    public void onTorchOn() {\n-        switchFlashlightButton.setText(R.string.turn_off_flashlight);\n-    }\n-\n-    @Override\n-    public void onTorchOff() {\n-        switchFlashlightButton.setText(R.string.turn_on_flashlight);\n-    }\n-}\n"}}, {"oid": "c454ed5a5852771563b916c9caa71ae2e8b00fda", "url": "https://github.com/getodk/collect/commit/c454ed5a5852771563b916c9caa71ae2e8b00fda", "message": "remove copyright", "committedDate": "2020-04-28T02:41:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyNDcxMA==", "url": "https://github.com/getodk/collect/pull/3743#discussion_r417324710", "bodyText": "I'd try and name this around the \"feature\" rather than the components under test (as this test shouldn't really care about them). Maybe ConfigureWithQRCodeTest?", "author": "seadowg", "createdAt": "2020-04-29T13:43:37Z", "path": "collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/QrCodeActivitiesTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package org.odk.collect.android.preferences.qr;\n+\n+import android.Manifest;\n+import android.app.Activity;\n+import android.app.Instrumentation;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.GrantPermissionRule;\n+import dagger.Provides;\n+import io.reactivex.Observable;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.MainMenuActivity;\n+import org.odk.collect.android.injection.config.AppDependencyModule;\n+import org.odk.collect.android.support.ResetStateRule;\n+import org.odk.collect.android.support.pages.MainMenuPage;\n+\n+import java.util.Collection;\n+\n+import static androidx.test.espresso.intent.Intents.intended;\n+import static androidx.test.espresso.intent.Intents.intending;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasAction;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasType;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.isInternal;\n+import static org.hamcrest.Matchers.not;\n+\n+\n+@RunWith(AndroidJUnit4.class)\n+public class QrCodeActivitiesTest {", "originalCommit": "c454ed5a5852771563b916c9caa71ae2e8b00fda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2NDMyNA==", "url": "https://github.com/getodk/collect/pull/3743#discussion_r418364324", "bodyText": "done, thanks!", "author": "hypercubestart", "createdAt": "2020-05-01T00:37:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyNDcxMA=="}], "type": "inlineReview", "revised_code": {"commit": "54442693c5c350814309524a8d2f5643f04a4c3e", "chunk": "diff --git a/collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/QrCodeActivitiesTest.java b/collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/QrCodeActivitiesTest.java\ndeleted file mode 100644\nindex b4b09b15e..000000000\n--- a/collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/QrCodeActivitiesTest.java\n+++ /dev/null\n\n@@ -1,126 +0,0 @@\n-package org.odk.collect.android.preferences.qr;\n-\n-import android.Manifest;\n-import android.app.Activity;\n-import android.app.Instrumentation;\n-import android.content.Intent;\n-import android.graphics.Bitmap;\n-import android.graphics.BitmapFactory;\n-\n-import androidx.test.core.app.ApplicationProvider;\n-import androidx.test.espresso.intent.rule.IntentsTestRule;\n-import androidx.test.ext.junit.runners.AndroidJUnit4;\n-import androidx.test.rule.GrantPermissionRule;\n-import dagger.Provides;\n-import io.reactivex.Observable;\n-\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.RuleChain;\n-import org.junit.runner.RunWith;\n-import org.odk.collect.android.R;\n-import org.odk.collect.android.activities.MainMenuActivity;\n-import org.odk.collect.android.injection.config.AppDependencyModule;\n-import org.odk.collect.android.support.ResetStateRule;\n-import org.odk.collect.android.support.pages.MainMenuPage;\n-\n-import java.util.Collection;\n-\n-import static androidx.test.espresso.intent.Intents.intended;\n-import static androidx.test.espresso.intent.Intents.intending;\n-import static androidx.test.espresso.intent.matcher.IntentMatchers.hasAction;\n-import static androidx.test.espresso.intent.matcher.IntentMatchers.hasType;\n-import static androidx.test.espresso.intent.matcher.IntentMatchers.isInternal;\n-import static org.hamcrest.Matchers.not;\n-\n-\n-@RunWith(AndroidJUnit4.class)\n-public class QrCodeActivitiesTest {\n-    // drawable resource that will act as \"qr code\" in this test\n-    private final int checkerBackgroundDrawableId = R.drawable.checker_background;\n-\n-    @Rule\n-    public IntentsTestRule<MainMenuActivity> rule = new IntentsTestRule<>(MainMenuActivity.class);\n-\n-    @Rule\n-    public RuleChain copyFormChain = RuleChain\n-            .outerRule(GrantPermissionRule.grant(\n-                    Manifest.permission.READ_EXTERNAL_STORAGE,\n-                    Manifest.permission.WRITE_EXTERNAL_STORAGE,\n-                    Manifest.permission.READ_PHONE_STATE\n-            ))\n-            .around(new ResetStateRule(new AppDependencyModule() {\n-                @Override\n-                @Provides\n-                public QRCodeGenerator providesQRCodeGenerator() {\n-                    return new QRCodeGenerator() {\n-                        @Override\n-                        public Observable<Bitmap> generateQRCode(Collection<String> selectedPasswordKeys) {\n-                            return Observable.create(emitter -> {\n-                                Bitmap bitmap =\n-                                        BitmapFactory.decodeResource(\n-                                                ApplicationProvider.getApplicationContext().getResources(),\n-                                                checkerBackgroundDrawableId);\n-                                emitter.onNext(bitmap);\n-                                emitter.onComplete();\n-                            });\n-                        }\n-                    };\n-                }\n-            }));\n-\n-    @Before\n-    public void stubAllExternalIntents() {\n-        // By default Espresso Intents does not stub any Intents. Stubbing needs to be setup before\n-        // every test run. In this case all external Intents will be blocked.\n-        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, null));\n-    }\n-\n-    @Test\n-    public void checkQRScannerIsInitiated() {\n-        new MainMenuPage(rule)\n-                .assertOnPage()\n-                .clickOnMenu()\n-                .clickConfigureQR()\n-                .clickScanFragment()\n-                .checkIsIdDisplayed(R.id.zxing_barcode_surface);\n-    }\n-\n-    @Test\n-    public void checkQRCodeImageViewDisplaysImage() {\n-        new MainMenuPage(rule)\n-                .assertOnPage()\n-                .clickOnMenu()\n-                .clickConfigureQR()\n-                .clickViewQRFragment()\n-                .assertImageViewShowsImage(R.id.ivQRcode, BitmapFactory.decodeResource(\n-                        ApplicationProvider.getApplicationContext().getResources(),\n-                        checkerBackgroundDrawableId\n-                ));\n-    }\n-\n-    @Test\n-    public void pressImportQRCode() {\n-        new MainMenuPage(rule)\n-                .assertOnPage()\n-                .clickOnMenu()\n-                .clickConfigureQR()\n-                .clickOnMenu()\n-                .clickOnString(R.string.import_qrcode_sd);\n-        \n-        intended(hasAction(Intent.ACTION_PICK));\n-        intended(hasType(\"image/*\"));\n-    }\n-\n-    @Test\n-    public void pressShareQRCode() {\n-        new MainMenuPage(rule)\n-                .assertOnPage()\n-                .clickOnMenu()\n-                .clickConfigureQR()\n-                .clickOnId(R.id.menu_item_share);\n-\n-        intended(hasAction(Intent.ACTION_CHOOSER));\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyNTE1Ng==", "url": "https://github.com/getodk/collect/pull/3743#discussion_r417325156", "bodyText": "This should probably be a static and use constant syntax (CHECKER_BACKGROUND_DRAWABLE_ID).", "author": "seadowg", "createdAt": "2020-04-29T13:44:13Z", "path": "collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/QrCodeActivitiesTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package org.odk.collect.android.preferences.qr;\n+\n+import android.Manifest;\n+import android.app.Activity;\n+import android.app.Instrumentation;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.GrantPermissionRule;\n+import dagger.Provides;\n+import io.reactivex.Observable;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.MainMenuActivity;\n+import org.odk.collect.android.injection.config.AppDependencyModule;\n+import org.odk.collect.android.support.ResetStateRule;\n+import org.odk.collect.android.support.pages.MainMenuPage;\n+\n+import java.util.Collection;\n+\n+import static androidx.test.espresso.intent.Intents.intended;\n+import static androidx.test.espresso.intent.Intents.intending;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasAction;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasType;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.isInternal;\n+import static org.hamcrest.Matchers.not;\n+\n+\n+@RunWith(AndroidJUnit4.class)\n+public class QrCodeActivitiesTest {\n+    // drawable resource that will act as \"qr code\" in this test\n+    private final int checkerBackgroundDrawableId = R.drawable.checker_background;", "originalCommit": "c454ed5a5852771563b916c9caa71ae2e8b00fda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2NDQ1Mw==", "url": "https://github.com/getodk/collect/pull/3743#discussion_r418364453", "bodyText": "yes you are right, thanks!", "author": "hypercubestart", "createdAt": "2020-05-01T00:37:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyNTE1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "54442693c5c350814309524a8d2f5643f04a4c3e", "chunk": "diff --git a/collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/QrCodeActivitiesTest.java b/collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/QrCodeActivitiesTest.java\ndeleted file mode 100644\nindex b4b09b15e..000000000\n--- a/collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/QrCodeActivitiesTest.java\n+++ /dev/null\n\n@@ -1,126 +0,0 @@\n-package org.odk.collect.android.preferences.qr;\n-\n-import android.Manifest;\n-import android.app.Activity;\n-import android.app.Instrumentation;\n-import android.content.Intent;\n-import android.graphics.Bitmap;\n-import android.graphics.BitmapFactory;\n-\n-import androidx.test.core.app.ApplicationProvider;\n-import androidx.test.espresso.intent.rule.IntentsTestRule;\n-import androidx.test.ext.junit.runners.AndroidJUnit4;\n-import androidx.test.rule.GrantPermissionRule;\n-import dagger.Provides;\n-import io.reactivex.Observable;\n-\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.RuleChain;\n-import org.junit.runner.RunWith;\n-import org.odk.collect.android.R;\n-import org.odk.collect.android.activities.MainMenuActivity;\n-import org.odk.collect.android.injection.config.AppDependencyModule;\n-import org.odk.collect.android.support.ResetStateRule;\n-import org.odk.collect.android.support.pages.MainMenuPage;\n-\n-import java.util.Collection;\n-\n-import static androidx.test.espresso.intent.Intents.intended;\n-import static androidx.test.espresso.intent.Intents.intending;\n-import static androidx.test.espresso.intent.matcher.IntentMatchers.hasAction;\n-import static androidx.test.espresso.intent.matcher.IntentMatchers.hasType;\n-import static androidx.test.espresso.intent.matcher.IntentMatchers.isInternal;\n-import static org.hamcrest.Matchers.not;\n-\n-\n-@RunWith(AndroidJUnit4.class)\n-public class QrCodeActivitiesTest {\n-    // drawable resource that will act as \"qr code\" in this test\n-    private final int checkerBackgroundDrawableId = R.drawable.checker_background;\n-\n-    @Rule\n-    public IntentsTestRule<MainMenuActivity> rule = new IntentsTestRule<>(MainMenuActivity.class);\n-\n-    @Rule\n-    public RuleChain copyFormChain = RuleChain\n-            .outerRule(GrantPermissionRule.grant(\n-                    Manifest.permission.READ_EXTERNAL_STORAGE,\n-                    Manifest.permission.WRITE_EXTERNAL_STORAGE,\n-                    Manifest.permission.READ_PHONE_STATE\n-            ))\n-            .around(new ResetStateRule(new AppDependencyModule() {\n-                @Override\n-                @Provides\n-                public QRCodeGenerator providesQRCodeGenerator() {\n-                    return new QRCodeGenerator() {\n-                        @Override\n-                        public Observable<Bitmap> generateQRCode(Collection<String> selectedPasswordKeys) {\n-                            return Observable.create(emitter -> {\n-                                Bitmap bitmap =\n-                                        BitmapFactory.decodeResource(\n-                                                ApplicationProvider.getApplicationContext().getResources(),\n-                                                checkerBackgroundDrawableId);\n-                                emitter.onNext(bitmap);\n-                                emitter.onComplete();\n-                            });\n-                        }\n-                    };\n-                }\n-            }));\n-\n-    @Before\n-    public void stubAllExternalIntents() {\n-        // By default Espresso Intents does not stub any Intents. Stubbing needs to be setup before\n-        // every test run. In this case all external Intents will be blocked.\n-        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, null));\n-    }\n-\n-    @Test\n-    public void checkQRScannerIsInitiated() {\n-        new MainMenuPage(rule)\n-                .assertOnPage()\n-                .clickOnMenu()\n-                .clickConfigureQR()\n-                .clickScanFragment()\n-                .checkIsIdDisplayed(R.id.zxing_barcode_surface);\n-    }\n-\n-    @Test\n-    public void checkQRCodeImageViewDisplaysImage() {\n-        new MainMenuPage(rule)\n-                .assertOnPage()\n-                .clickOnMenu()\n-                .clickConfigureQR()\n-                .clickViewQRFragment()\n-                .assertImageViewShowsImage(R.id.ivQRcode, BitmapFactory.decodeResource(\n-                        ApplicationProvider.getApplicationContext().getResources(),\n-                        checkerBackgroundDrawableId\n-                ));\n-    }\n-\n-    @Test\n-    public void pressImportQRCode() {\n-        new MainMenuPage(rule)\n-                .assertOnPage()\n-                .clickOnMenu()\n-                .clickConfigureQR()\n-                .clickOnMenu()\n-                .clickOnString(R.string.import_qrcode_sd);\n-        \n-        intended(hasAction(Intent.ACTION_PICK));\n-        intended(hasType(\"image/*\"));\n-    }\n-\n-    @Test\n-    public void pressShareQRCode() {\n-        new MainMenuPage(rule)\n-                .assertOnPage()\n-                .clickOnMenu()\n-                .clickConfigureQR()\n-                .clickOnId(R.id.menu_item_share);\n-\n-        intended(hasAction(Intent.ACTION_CHOOSER));\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyNTkyNQ==", "url": "https://github.com/getodk/collect/pull/3743#discussion_r417325925", "bodyText": "Maybe this stub version could be a private static inner class here so you're able to just do new StubQRCodeGenerator().", "author": "seadowg", "createdAt": "2020-04-29T13:45:17Z", "path": "collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/QrCodeActivitiesTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package org.odk.collect.android.preferences.qr;\n+\n+import android.Manifest;\n+import android.app.Activity;\n+import android.app.Instrumentation;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.GrantPermissionRule;\n+import dagger.Provides;\n+import io.reactivex.Observable;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.MainMenuActivity;\n+import org.odk.collect.android.injection.config.AppDependencyModule;\n+import org.odk.collect.android.support.ResetStateRule;\n+import org.odk.collect.android.support.pages.MainMenuPage;\n+\n+import java.util.Collection;\n+\n+import static androidx.test.espresso.intent.Intents.intended;\n+import static androidx.test.espresso.intent.Intents.intending;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasAction;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasType;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.isInternal;\n+import static org.hamcrest.Matchers.not;\n+\n+\n+@RunWith(AndroidJUnit4.class)\n+public class QrCodeActivitiesTest {\n+    // drawable resource that will act as \"qr code\" in this test\n+    private final int checkerBackgroundDrawableId = R.drawable.checker_background;\n+\n+    @Rule\n+    public IntentsTestRule<MainMenuActivity> rule = new IntentsTestRule<>(MainMenuActivity.class);\n+\n+    @Rule\n+    public RuleChain copyFormChain = RuleChain\n+            .outerRule(GrantPermissionRule.grant(\n+                    Manifest.permission.READ_EXTERNAL_STORAGE,\n+                    Manifest.permission.WRITE_EXTERNAL_STORAGE,\n+                    Manifest.permission.READ_PHONE_STATE\n+            ))\n+            .around(new ResetStateRule(new AppDependencyModule() {\n+                @Override\n+                @Provides\n+                public QRCodeGenerator providesQRCodeGenerator() {\n+                    return new QRCodeGenerator() {", "originalCommit": "c454ed5a5852771563b916c9caa71ae2e8b00fda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2NTQ5Mw==", "url": "https://github.com/getodk/collect/pull/3743#discussion_r418365493", "bodyText": "done, thanks!", "author": "hypercubestart", "createdAt": "2020-05-01T00:41:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyNTkyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "54442693c5c350814309524a8d2f5643f04a4c3e", "chunk": "diff --git a/collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/QrCodeActivitiesTest.java b/collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/QrCodeActivitiesTest.java\ndeleted file mode 100644\nindex b4b09b15e..000000000\n--- a/collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/QrCodeActivitiesTest.java\n+++ /dev/null\n\n@@ -1,126 +0,0 @@\n-package org.odk.collect.android.preferences.qr;\n-\n-import android.Manifest;\n-import android.app.Activity;\n-import android.app.Instrumentation;\n-import android.content.Intent;\n-import android.graphics.Bitmap;\n-import android.graphics.BitmapFactory;\n-\n-import androidx.test.core.app.ApplicationProvider;\n-import androidx.test.espresso.intent.rule.IntentsTestRule;\n-import androidx.test.ext.junit.runners.AndroidJUnit4;\n-import androidx.test.rule.GrantPermissionRule;\n-import dagger.Provides;\n-import io.reactivex.Observable;\n-\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.RuleChain;\n-import org.junit.runner.RunWith;\n-import org.odk.collect.android.R;\n-import org.odk.collect.android.activities.MainMenuActivity;\n-import org.odk.collect.android.injection.config.AppDependencyModule;\n-import org.odk.collect.android.support.ResetStateRule;\n-import org.odk.collect.android.support.pages.MainMenuPage;\n-\n-import java.util.Collection;\n-\n-import static androidx.test.espresso.intent.Intents.intended;\n-import static androidx.test.espresso.intent.Intents.intending;\n-import static androidx.test.espresso.intent.matcher.IntentMatchers.hasAction;\n-import static androidx.test.espresso.intent.matcher.IntentMatchers.hasType;\n-import static androidx.test.espresso.intent.matcher.IntentMatchers.isInternal;\n-import static org.hamcrest.Matchers.not;\n-\n-\n-@RunWith(AndroidJUnit4.class)\n-public class QrCodeActivitiesTest {\n-    // drawable resource that will act as \"qr code\" in this test\n-    private final int checkerBackgroundDrawableId = R.drawable.checker_background;\n-\n-    @Rule\n-    public IntentsTestRule<MainMenuActivity> rule = new IntentsTestRule<>(MainMenuActivity.class);\n-\n-    @Rule\n-    public RuleChain copyFormChain = RuleChain\n-            .outerRule(GrantPermissionRule.grant(\n-                    Manifest.permission.READ_EXTERNAL_STORAGE,\n-                    Manifest.permission.WRITE_EXTERNAL_STORAGE,\n-                    Manifest.permission.READ_PHONE_STATE\n-            ))\n-            .around(new ResetStateRule(new AppDependencyModule() {\n-                @Override\n-                @Provides\n-                public QRCodeGenerator providesQRCodeGenerator() {\n-                    return new QRCodeGenerator() {\n-                        @Override\n-                        public Observable<Bitmap> generateQRCode(Collection<String> selectedPasswordKeys) {\n-                            return Observable.create(emitter -> {\n-                                Bitmap bitmap =\n-                                        BitmapFactory.decodeResource(\n-                                                ApplicationProvider.getApplicationContext().getResources(),\n-                                                checkerBackgroundDrawableId);\n-                                emitter.onNext(bitmap);\n-                                emitter.onComplete();\n-                            });\n-                        }\n-                    };\n-                }\n-            }));\n-\n-    @Before\n-    public void stubAllExternalIntents() {\n-        // By default Espresso Intents does not stub any Intents. Stubbing needs to be setup before\n-        // every test run. In this case all external Intents will be blocked.\n-        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, null));\n-    }\n-\n-    @Test\n-    public void checkQRScannerIsInitiated() {\n-        new MainMenuPage(rule)\n-                .assertOnPage()\n-                .clickOnMenu()\n-                .clickConfigureQR()\n-                .clickScanFragment()\n-                .checkIsIdDisplayed(R.id.zxing_barcode_surface);\n-    }\n-\n-    @Test\n-    public void checkQRCodeImageViewDisplaysImage() {\n-        new MainMenuPage(rule)\n-                .assertOnPage()\n-                .clickOnMenu()\n-                .clickConfigureQR()\n-                .clickViewQRFragment()\n-                .assertImageViewShowsImage(R.id.ivQRcode, BitmapFactory.decodeResource(\n-                        ApplicationProvider.getApplicationContext().getResources(),\n-                        checkerBackgroundDrawableId\n-                ));\n-    }\n-\n-    @Test\n-    public void pressImportQRCode() {\n-        new MainMenuPage(rule)\n-                .assertOnPage()\n-                .clickOnMenu()\n-                .clickConfigureQR()\n-                .clickOnMenu()\n-                .clickOnString(R.string.import_qrcode_sd);\n-        \n-        intended(hasAction(Intent.ACTION_PICK));\n-        intended(hasType(\"image/*\"));\n-    }\n-\n-    @Test\n-    public void pressShareQRCode() {\n-        new MainMenuPage(rule)\n-                .assertOnPage()\n-                .clickOnMenu()\n-                .clickConfigureQR()\n-                .clickOnId(R.id.menu_item_share);\n-\n-        intended(hasAction(Intent.ACTION_CHOOSER));\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyNzIzNw==", "url": "https://github.com/getodk/collect/pull/3743#discussion_r417327237", "bodyText": "Again just in terms of naming lets try and get closer to describing the feature. onMainMenu_clickConfigureQRCode_andClickingOnScan_opensScanner() for this as an example. I'd try doing a similar \"given-when-then\" style for all these tests.", "author": "seadowg", "createdAt": "2020-04-29T13:47:01Z", "path": "collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/QrCodeActivitiesTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package org.odk.collect.android.preferences.qr;\n+\n+import android.Manifest;\n+import android.app.Activity;\n+import android.app.Instrumentation;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.GrantPermissionRule;\n+import dagger.Provides;\n+import io.reactivex.Observable;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.MainMenuActivity;\n+import org.odk.collect.android.injection.config.AppDependencyModule;\n+import org.odk.collect.android.support.ResetStateRule;\n+import org.odk.collect.android.support.pages.MainMenuPage;\n+\n+import java.util.Collection;\n+\n+import static androidx.test.espresso.intent.Intents.intended;\n+import static androidx.test.espresso.intent.Intents.intending;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasAction;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasType;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.isInternal;\n+import static org.hamcrest.Matchers.not;\n+\n+\n+@RunWith(AndroidJUnit4.class)\n+public class QrCodeActivitiesTest {\n+    // drawable resource that will act as \"qr code\" in this test\n+    private final int checkerBackgroundDrawableId = R.drawable.checker_background;\n+\n+    @Rule\n+    public IntentsTestRule<MainMenuActivity> rule = new IntentsTestRule<>(MainMenuActivity.class);\n+\n+    @Rule\n+    public RuleChain copyFormChain = RuleChain\n+            .outerRule(GrantPermissionRule.grant(\n+                    Manifest.permission.READ_EXTERNAL_STORAGE,\n+                    Manifest.permission.WRITE_EXTERNAL_STORAGE,\n+                    Manifest.permission.READ_PHONE_STATE\n+            ))\n+            .around(new ResetStateRule(new AppDependencyModule() {\n+                @Override\n+                @Provides\n+                public QRCodeGenerator providesQRCodeGenerator() {\n+                    return new QRCodeGenerator() {\n+                        @Override\n+                        public Observable<Bitmap> generateQRCode(Collection<String> selectedPasswordKeys) {\n+                            return Observable.create(emitter -> {\n+                                Bitmap bitmap =\n+                                        BitmapFactory.decodeResource(\n+                                                ApplicationProvider.getApplicationContext().getResources(),\n+                                                checkerBackgroundDrawableId);\n+                                emitter.onNext(bitmap);\n+                                emitter.onComplete();\n+                            });\n+                        }\n+                    };\n+                }\n+            }));\n+\n+    @Before\n+    public void stubAllExternalIntents() {\n+        // By default Espresso Intents does not stub any Intents. Stubbing needs to be setup before\n+        // every test run. In this case all external Intents will be blocked.\n+        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, null));\n+    }\n+\n+    @Test\n+    public void checkQRScannerIsInitiated() {", "originalCommit": "c454ed5a5852771563b916c9caa71ae2e8b00fda", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "54442693c5c350814309524a8d2f5643f04a4c3e", "chunk": "diff --git a/collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/QrCodeActivitiesTest.java b/collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/QrCodeActivitiesTest.java\ndeleted file mode 100644\nindex b4b09b15e..000000000\n--- a/collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/QrCodeActivitiesTest.java\n+++ /dev/null\n\n@@ -1,126 +0,0 @@\n-package org.odk.collect.android.preferences.qr;\n-\n-import android.Manifest;\n-import android.app.Activity;\n-import android.app.Instrumentation;\n-import android.content.Intent;\n-import android.graphics.Bitmap;\n-import android.graphics.BitmapFactory;\n-\n-import androidx.test.core.app.ApplicationProvider;\n-import androidx.test.espresso.intent.rule.IntentsTestRule;\n-import androidx.test.ext.junit.runners.AndroidJUnit4;\n-import androidx.test.rule.GrantPermissionRule;\n-import dagger.Provides;\n-import io.reactivex.Observable;\n-\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.RuleChain;\n-import org.junit.runner.RunWith;\n-import org.odk.collect.android.R;\n-import org.odk.collect.android.activities.MainMenuActivity;\n-import org.odk.collect.android.injection.config.AppDependencyModule;\n-import org.odk.collect.android.support.ResetStateRule;\n-import org.odk.collect.android.support.pages.MainMenuPage;\n-\n-import java.util.Collection;\n-\n-import static androidx.test.espresso.intent.Intents.intended;\n-import static androidx.test.espresso.intent.Intents.intending;\n-import static androidx.test.espresso.intent.matcher.IntentMatchers.hasAction;\n-import static androidx.test.espresso.intent.matcher.IntentMatchers.hasType;\n-import static androidx.test.espresso.intent.matcher.IntentMatchers.isInternal;\n-import static org.hamcrest.Matchers.not;\n-\n-\n-@RunWith(AndroidJUnit4.class)\n-public class QrCodeActivitiesTest {\n-    // drawable resource that will act as \"qr code\" in this test\n-    private final int checkerBackgroundDrawableId = R.drawable.checker_background;\n-\n-    @Rule\n-    public IntentsTestRule<MainMenuActivity> rule = new IntentsTestRule<>(MainMenuActivity.class);\n-\n-    @Rule\n-    public RuleChain copyFormChain = RuleChain\n-            .outerRule(GrantPermissionRule.grant(\n-                    Manifest.permission.READ_EXTERNAL_STORAGE,\n-                    Manifest.permission.WRITE_EXTERNAL_STORAGE,\n-                    Manifest.permission.READ_PHONE_STATE\n-            ))\n-            .around(new ResetStateRule(new AppDependencyModule() {\n-                @Override\n-                @Provides\n-                public QRCodeGenerator providesQRCodeGenerator() {\n-                    return new QRCodeGenerator() {\n-                        @Override\n-                        public Observable<Bitmap> generateQRCode(Collection<String> selectedPasswordKeys) {\n-                            return Observable.create(emitter -> {\n-                                Bitmap bitmap =\n-                                        BitmapFactory.decodeResource(\n-                                                ApplicationProvider.getApplicationContext().getResources(),\n-                                                checkerBackgroundDrawableId);\n-                                emitter.onNext(bitmap);\n-                                emitter.onComplete();\n-                            });\n-                        }\n-                    };\n-                }\n-            }));\n-\n-    @Before\n-    public void stubAllExternalIntents() {\n-        // By default Espresso Intents does not stub any Intents. Stubbing needs to be setup before\n-        // every test run. In this case all external Intents will be blocked.\n-        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, null));\n-    }\n-\n-    @Test\n-    public void checkQRScannerIsInitiated() {\n-        new MainMenuPage(rule)\n-                .assertOnPage()\n-                .clickOnMenu()\n-                .clickConfigureQR()\n-                .clickScanFragment()\n-                .checkIsIdDisplayed(R.id.zxing_barcode_surface);\n-    }\n-\n-    @Test\n-    public void checkQRCodeImageViewDisplaysImage() {\n-        new MainMenuPage(rule)\n-                .assertOnPage()\n-                .clickOnMenu()\n-                .clickConfigureQR()\n-                .clickViewQRFragment()\n-                .assertImageViewShowsImage(R.id.ivQRcode, BitmapFactory.decodeResource(\n-                        ApplicationProvider.getApplicationContext().getResources(),\n-                        checkerBackgroundDrawableId\n-                ));\n-    }\n-\n-    @Test\n-    public void pressImportQRCode() {\n-        new MainMenuPage(rule)\n-                .assertOnPage()\n-                .clickOnMenu()\n-                .clickConfigureQR()\n-                .clickOnMenu()\n-                .clickOnString(R.string.import_qrcode_sd);\n-        \n-        intended(hasAction(Intent.ACTION_PICK));\n-        intended(hasType(\"image/*\"));\n-    }\n-\n-    @Test\n-    public void pressShareQRCode() {\n-        new MainMenuPage(rule)\n-                .assertOnPage()\n-                .clickOnMenu()\n-                .clickConfigureQR()\n-                .clickOnId(R.id.menu_item_share);\n-\n-        intended(hasAction(Intent.ACTION_CHOOSER));\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyODI5NA==", "url": "https://github.com/getodk/collect/pull/3743#discussion_r417328294", "bodyText": "I think you still want another assertion here on the file that's sent right?", "author": "seadowg", "createdAt": "2020-04-29T13:48:31Z", "path": "collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/QrCodeActivitiesTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package org.odk.collect.android.preferences.qr;\n+\n+import android.Manifest;\n+import android.app.Activity;\n+import android.app.Instrumentation;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.GrantPermissionRule;\n+import dagger.Provides;\n+import io.reactivex.Observable;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.MainMenuActivity;\n+import org.odk.collect.android.injection.config.AppDependencyModule;\n+import org.odk.collect.android.support.ResetStateRule;\n+import org.odk.collect.android.support.pages.MainMenuPage;\n+\n+import java.util.Collection;\n+\n+import static androidx.test.espresso.intent.Intents.intended;\n+import static androidx.test.espresso.intent.Intents.intending;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasAction;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasType;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.isInternal;\n+import static org.hamcrest.Matchers.not;\n+\n+\n+@RunWith(AndroidJUnit4.class)\n+public class QrCodeActivitiesTest {\n+    // drawable resource that will act as \"qr code\" in this test\n+    private final int checkerBackgroundDrawableId = R.drawable.checker_background;\n+\n+    @Rule\n+    public IntentsTestRule<MainMenuActivity> rule = new IntentsTestRule<>(MainMenuActivity.class);\n+\n+    @Rule\n+    public RuleChain copyFormChain = RuleChain\n+            .outerRule(GrantPermissionRule.grant(\n+                    Manifest.permission.READ_EXTERNAL_STORAGE,\n+                    Manifest.permission.WRITE_EXTERNAL_STORAGE,\n+                    Manifest.permission.READ_PHONE_STATE\n+            ))\n+            .around(new ResetStateRule(new AppDependencyModule() {\n+                @Override\n+                @Provides\n+                public QRCodeGenerator providesQRCodeGenerator() {\n+                    return new QRCodeGenerator() {\n+                        @Override\n+                        public Observable<Bitmap> generateQRCode(Collection<String> selectedPasswordKeys) {\n+                            return Observable.create(emitter -> {\n+                                Bitmap bitmap =\n+                                        BitmapFactory.decodeResource(\n+                                                ApplicationProvider.getApplicationContext().getResources(),\n+                                                checkerBackgroundDrawableId);\n+                                emitter.onNext(bitmap);\n+                                emitter.onComplete();\n+                            });\n+                        }\n+                    };\n+                }\n+            }));\n+\n+    @Before\n+    public void stubAllExternalIntents() {\n+        // By default Espresso Intents does not stub any Intents. Stubbing needs to be setup before\n+        // every test run. In this case all external Intents will be blocked.\n+        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, null));\n+    }\n+\n+    @Test\n+    public void checkQRScannerIsInitiated() {\n+        new MainMenuPage(rule)\n+                .assertOnPage()\n+                .clickOnMenu()\n+                .clickConfigureQR()\n+                .clickScanFragment()\n+                .checkIsIdDisplayed(R.id.zxing_barcode_surface);\n+    }\n+\n+    @Test\n+    public void checkQRCodeImageViewDisplaysImage() {\n+        new MainMenuPage(rule)\n+                .assertOnPage()\n+                .clickOnMenu()\n+                .clickConfigureQR()\n+                .clickViewQRFragment()\n+                .assertImageViewShowsImage(R.id.ivQRcode, BitmapFactory.decodeResource(\n+                        ApplicationProvider.getApplicationContext().getResources(),\n+                        checkerBackgroundDrawableId\n+                ));\n+    }\n+\n+    @Test\n+    public void pressImportQRCode() {\n+        new MainMenuPage(rule)\n+                .assertOnPage()\n+                .clickOnMenu()\n+                .clickConfigureQR()\n+                .clickOnMenu()\n+                .clickOnString(R.string.import_qrcode_sd);\n+        \n+        intended(hasAction(Intent.ACTION_PICK));\n+        intended(hasType(\"image/*\"));\n+    }\n+\n+    @Test\n+    public void pressShareQRCode() {\n+        new MainMenuPage(rule)\n+                .assertOnPage()\n+                .clickOnMenu()\n+                .clickConfigureQR()\n+                .clickOnId(R.id.menu_item_share);\n+\n+        intended(hasAction(Intent.ACTION_CHOOSER));", "originalCommit": "c454ed5a5852771563b916c9caa71ae2e8b00fda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc2MTE0NQ==", "url": "https://github.com/getodk/collect/pull/3743#discussion_r417761145", "bodyText": "yes, I'm not quite sure how though, because it may also be helpful to check that the stream is valid", "author": "hypercubestart", "createdAt": "2020-04-30T05:27:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyODI5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzgyNzM2Mg==", "url": "https://github.com/getodk/collect/pull/3743#discussion_r417827362", "bodyText": "I think you want to check that the intent has the URI in it right?", "author": "seadowg", "createdAt": "2020-04-30T08:01:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyODI5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMzNTYyMw==", "url": "https://github.com/getodk/collect/pull/3743#discussion_r418335623", "bodyText": "yes, but this Intent wraps another Intent with contains the URI as an Extra. I'm having trouble testing this inner intent.", "author": "hypercubestart", "createdAt": "2020-04-30T22:59:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyODI5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE2NjY5OQ==", "url": "https://github.com/getodk/collect/pull/3743#discussion_r421166699", "bodyText": "nvm, figured it out! can you please take another look? I'm a little worried now that the test is too coupled with the code, especially the expectedUri part\nhttps://github.com/hypercubestart/collect/blob/4005fe290c0d61bdd52271c16e0ce4a9f53cf4ba/collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/ConfigureWithQRCodeTest.java#L125\nUri expected = FileProvider.getUriForFile(ApplicationProvider.getApplicationContext(),\nBuildConfig.APPLICATION_ID + \".provider\",\nnew File(path));\nwhich I copied over directly", "author": "hypercubestart", "createdAt": "2020-05-07T00:21:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyODI5NA=="}], "type": "inlineReview", "revised_code": {"commit": "54442693c5c350814309524a8d2f5643f04a4c3e", "chunk": "diff --git a/collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/QrCodeActivitiesTest.java b/collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/QrCodeActivitiesTest.java\ndeleted file mode 100644\nindex b4b09b15e..000000000\n--- a/collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/QrCodeActivitiesTest.java\n+++ /dev/null\n\n@@ -1,126 +0,0 @@\n-package org.odk.collect.android.preferences.qr;\n-\n-import android.Manifest;\n-import android.app.Activity;\n-import android.app.Instrumentation;\n-import android.content.Intent;\n-import android.graphics.Bitmap;\n-import android.graphics.BitmapFactory;\n-\n-import androidx.test.core.app.ApplicationProvider;\n-import androidx.test.espresso.intent.rule.IntentsTestRule;\n-import androidx.test.ext.junit.runners.AndroidJUnit4;\n-import androidx.test.rule.GrantPermissionRule;\n-import dagger.Provides;\n-import io.reactivex.Observable;\n-\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.RuleChain;\n-import org.junit.runner.RunWith;\n-import org.odk.collect.android.R;\n-import org.odk.collect.android.activities.MainMenuActivity;\n-import org.odk.collect.android.injection.config.AppDependencyModule;\n-import org.odk.collect.android.support.ResetStateRule;\n-import org.odk.collect.android.support.pages.MainMenuPage;\n-\n-import java.util.Collection;\n-\n-import static androidx.test.espresso.intent.Intents.intended;\n-import static androidx.test.espresso.intent.Intents.intending;\n-import static androidx.test.espresso.intent.matcher.IntentMatchers.hasAction;\n-import static androidx.test.espresso.intent.matcher.IntentMatchers.hasType;\n-import static androidx.test.espresso.intent.matcher.IntentMatchers.isInternal;\n-import static org.hamcrest.Matchers.not;\n-\n-\n-@RunWith(AndroidJUnit4.class)\n-public class QrCodeActivitiesTest {\n-    // drawable resource that will act as \"qr code\" in this test\n-    private final int checkerBackgroundDrawableId = R.drawable.checker_background;\n-\n-    @Rule\n-    public IntentsTestRule<MainMenuActivity> rule = new IntentsTestRule<>(MainMenuActivity.class);\n-\n-    @Rule\n-    public RuleChain copyFormChain = RuleChain\n-            .outerRule(GrantPermissionRule.grant(\n-                    Manifest.permission.READ_EXTERNAL_STORAGE,\n-                    Manifest.permission.WRITE_EXTERNAL_STORAGE,\n-                    Manifest.permission.READ_PHONE_STATE\n-            ))\n-            .around(new ResetStateRule(new AppDependencyModule() {\n-                @Override\n-                @Provides\n-                public QRCodeGenerator providesQRCodeGenerator() {\n-                    return new QRCodeGenerator() {\n-                        @Override\n-                        public Observable<Bitmap> generateQRCode(Collection<String> selectedPasswordKeys) {\n-                            return Observable.create(emitter -> {\n-                                Bitmap bitmap =\n-                                        BitmapFactory.decodeResource(\n-                                                ApplicationProvider.getApplicationContext().getResources(),\n-                                                checkerBackgroundDrawableId);\n-                                emitter.onNext(bitmap);\n-                                emitter.onComplete();\n-                            });\n-                        }\n-                    };\n-                }\n-            }));\n-\n-    @Before\n-    public void stubAllExternalIntents() {\n-        // By default Espresso Intents does not stub any Intents. Stubbing needs to be setup before\n-        // every test run. In this case all external Intents will be blocked.\n-        intending(not(isInternal())).respondWith(new Instrumentation.ActivityResult(Activity.RESULT_OK, null));\n-    }\n-\n-    @Test\n-    public void checkQRScannerIsInitiated() {\n-        new MainMenuPage(rule)\n-                .assertOnPage()\n-                .clickOnMenu()\n-                .clickConfigureQR()\n-                .clickScanFragment()\n-                .checkIsIdDisplayed(R.id.zxing_barcode_surface);\n-    }\n-\n-    @Test\n-    public void checkQRCodeImageViewDisplaysImage() {\n-        new MainMenuPage(rule)\n-                .assertOnPage()\n-                .clickOnMenu()\n-                .clickConfigureQR()\n-                .clickViewQRFragment()\n-                .assertImageViewShowsImage(R.id.ivQRcode, BitmapFactory.decodeResource(\n-                        ApplicationProvider.getApplicationContext().getResources(),\n-                        checkerBackgroundDrawableId\n-                ));\n-    }\n-\n-    @Test\n-    public void pressImportQRCode() {\n-        new MainMenuPage(rule)\n-                .assertOnPage()\n-                .clickOnMenu()\n-                .clickConfigureQR()\n-                .clickOnMenu()\n-                .clickOnString(R.string.import_qrcode_sd);\n-        \n-        intended(hasAction(Intent.ACTION_PICK));\n-        intended(hasType(\"image/*\"));\n-    }\n-\n-    @Test\n-    public void pressShareQRCode() {\n-        new MainMenuPage(rule)\n-                .assertOnPage()\n-                .clickOnMenu()\n-                .clickConfigureQR()\n-                .clickOnId(R.id.menu_item_share);\n-\n-        intended(hasAction(Intent.ACTION_CHOOSER));\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyOTU3OQ==", "url": "https://github.com/getodk/collect/pull/3743#discussion_r417329579", "bodyText": "If possible it'd be nicer for QRCodeUtils.getQRCodeGeneratorObservable's logic to move to this implementation (and probably have it in its own class file). Wrapping like this is a nice trick for dealing with statics we don't control but we do control this one!", "author": "seadowg", "createdAt": "2020-04-29T13:50:13Z", "path": "collect_app/src/main/java/org/odk/collect/android/injection/config/AppDependencyModule.java", "diffHunk": "@@ -265,4 +271,14 @@ public BackgroundWorkManager providesBackgroundWorkManager() {\n     public NetworkStateProvider providesConnectivityProvider() {\n         return new ConnectivityProvider();\n     }\n+\n+    @Provides\n+    public QRCodeGenerator providesQRCodeGenerator() {\n+        return new QRCodeGenerator() {\n+            @Override\n+            public Observable<Bitmap> generateQRCode(Collection<String> selectedPasswordKeys) {\n+                return QRCodeUtils.getQRCodeGeneratorObservable(selectedPasswordKeys);", "originalCommit": "c454ed5a5852771563b916c9caa71ae2e8b00fda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM3NjI4Mw==", "url": "https://github.com/getodk/collect/pull/3743#discussion_r418376283", "bodyText": "Is it okay to break up QRCodeUtils logic like this? Because it uses certain functions/static constants that aren't accessible outside the QRCodeUtils or outside the utils package?\nMy concern is that If this is the only thing that needs to be moved out, I'm not sure if it's worth it to separate it from the other QRCodeUtils functions which may decrease readability.", "author": "hypercubestart", "createdAt": "2020-05-01T01:27:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyOTU3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQ3NTU2Ng==", "url": "https://github.com/getodk/collect/pull/3743#discussion_r418475566", "bodyText": "I do see your point but it seems to be that everything in that utils provides information about a single QR code image (the image itself, it's path etc) other than decodeFromBitmap. Could it be broken into a QRCodeGenerator and a QRCodeReader interface?", "author": "seadowg", "createdAt": "2020-05-01T09:24:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyOTU3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE2Njk4NA==", "url": "https://github.com/getodk/collect/pull/3743#discussion_r421166984", "bodyText": "If its okay with you, I went ahead and broke it into QRCodeGenerator interface, and left the remaining functions untouched in the QRCodeUtils.java", "author": "hypercubestart", "createdAt": "2020-05-07T00:22:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMyOTU3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "54442693c5c350814309524a8d2f5643f04a4c3e", "chunk": "diff --git a/collect_app/src/main/java/org/odk/collect/android/injection/config/AppDependencyModule.java b/collect_app/src/main/java/org/odk/collect/android/injection/config/AppDependencyModule.java\nindex e639474ef..aaf880a53 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/injection/config/AppDependencyModule.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/injection/config/AppDependencyModule.java\n\n@@ -271,14 +265,4 @@ public class AppDependencyModule {\n     public NetworkStateProvider providesConnectivityProvider() {\n         return new ConnectivityProvider();\n     }\n-\n-    @Provides\n-    public QRCodeGenerator providesQRCodeGenerator() {\n-        return new QRCodeGenerator() {\n-            @Override\n-            public Observable<Bitmap> generateQRCode(Collection<String> selectedPasswordKeys) {\n-                return QRCodeUtils.getQRCodeGeneratorObservable(selectedPasswordKeys);\n-            }\n-        };\n-    }\n }\n"}}, {"oid": "54442693c5c350814309524a8d2f5643f04a4c3e", "url": "https://github.com/getodk/collect/commit/54442693c5c350814309524a8d2f5643f04a4c3e", "message": "moved some functions to qrcode tabs", "committedDate": "2020-05-06T21:28:39Z", "type": "commit"}, {"oid": "dba05b0af00ae247caeb648bd4f17a20cf58a5f8", "url": "https://github.com/getodk/collect/commit/dba05b0af00ae247caeb648bd4f17a20cf58a5f8", "message": "added scan button in toolbar", "committedDate": "2020-05-06T21:28:39Z", "type": "commit"}, {"oid": "80ea5f980d2b81a38449889f861d8340d023f642", "url": "https://github.com/getodk/collect/commit/80ea5f980d2b81a38449889f861d8340d023f642", "message": "Added embedded scan (WIP)", "committedDate": "2020-05-06T21:28:39Z", "type": "commit"}, {"oid": "a7c571c8fd13f1422894f13cbaee28c9ed570cf5", "url": "https://github.com/getodk/collect/commit/a7c571c8fd13f1422894f13cbaee28c9ed570cf5", "message": "scan ulitity", "committedDate": "2020-05-06T21:28:39Z", "type": "commit"}, {"oid": "3c9c99522e4130363178fab4b729df15af576058", "url": "https://github.com/getodk/collect/commit/3c9c99522e4130363178fab4b729df15af576058", "message": "added permission request", "committedDate": "2020-05-06T21:28:39Z", "type": "commit"}, {"oid": "5116c3b042460367a9d6feb49b0c7e2184088e0a", "url": "https://github.com/getodk/collect/commit/5116c3b042460367a9d6feb49b0c7e2184088e0a", "message": "scanner works", "committedDate": "2020-05-06T21:28:39Z", "type": "commit"}, {"oid": "46843718cd59a3afeef9c4d32fd1b85125ea6ae7", "url": "https://github.com/getodk/collect/commit/46843718cd59a3afeef9c4d32fd1b85125ea6ae7", "message": "beep sound and flashlight for embedded qr camera", "committedDate": "2020-05-06T21:28:39Z", "type": "commit"}, {"oid": "8904e1d8d262407a7c9fbd5aeb62d3325d55e8a9", "url": "https://github.com/getodk/collect/commit/8904e1d8d262407a7c9fbd5aeb62d3325d55e8a9", "message": "add files from merge commit", "committedDate": "2020-05-06T21:28:39Z", "type": "commit"}, {"oid": "3bcdf633b6eed3b8eb36c66f550a8e1c87c46be4", "url": "https://github.com/getodk/collect/commit/3bcdf633b6eed3b8eb36c66f550a8e1c87c46be4", "message": "moved import qrcode item to overflow for QRCodeTabs", "committedDate": "2020-05-06T21:28:39Z", "type": "commit"}, {"oid": "b04c7ca8b55976f5048490691b8b1492b72dd415", "url": "https://github.com/getodk/collect/commit/b04c7ca8b55976f5048490691b8b1492b72dd415", "message": "qr_code redesign", "committedDate": "2020-05-06T21:28:39Z", "type": "commit"}, {"oid": "0b22c7553ef9e9e22236d52cd9e3af415df620da", "url": "https://github.com/getodk/collect/commit/0b22c7553ef9e9e22236d52cd9e3af415df620da", "message": "minor fixes", "committedDate": "2020-05-06T21:28:39Z", "type": "commit"}, {"oid": "bcd27b93128ee62248084a16a1f657d49226b1ad", "url": "https://github.com/getodk/collect/commit/bcd27b93128ee62248084a16a1f657d49226b1ad", "message": "hook menu item with new QRCodeTabs and fix qrcode generation", "committedDate": "2020-05-06T21:28:39Z", "type": "commit"}, {"oid": "092365a095e279069a3a5e9486ed0bd31e878f0d", "url": "https://github.com/getodk/collect/commit/092365a095e279069a3a5e9486ed0bd31e878f0d", "message": "removed unused", "committedDate": "2020-05-06T21:28:40Z", "type": "commit"}, {"oid": "647138ab0ae1132f34d22284faa57ff9b8a51446", "url": "https://github.com/getodk/collect/commit/647138ab0ae1132f34d22284faa57ff9b8a51446", "message": "change test name", "committedDate": "2020-05-06T21:28:40Z", "type": "commit"}, {"oid": "f43aa172d31166cd924ada764b2cf263998ceadb", "url": "https://github.com/getodk/collect/commit/f43aa172d31166cd924ada764b2cf263998ceadb", "message": "fix NPE bug", "committedDate": "2020-05-06T21:28:40Z", "type": "commit"}, {"oid": "5b8ecbab76a28ec4b134ffbc0bf8ecfdb3af418a", "url": "https://github.com/getodk/collect/commit/5b8ecbab76a28ec4b134ffbc0bf8ecfdb3af418a", "message": "add analytics and minor issues", "committedDate": "2020-05-06T21:28:40Z", "type": "commit"}, {"oid": "2eec6483d6d82cd519e16e5c92a34c2274c3d86c", "url": "https://github.com/getodk/collect/commit/2eec6483d6d82cd519e16e5c92a34c2274c3d86c", "message": "update to viewpager2", "committedDate": "2020-05-06T21:28:40Z", "type": "commit"}, {"oid": "01f9cb2777c3f99519b0de24691a7fc79cb83bb3", "url": "https://github.com/getodk/collect/commit/01f9cb2777c3f99519b0de24691a7fc79cb83bb3", "message": "styling", "committedDate": "2020-05-06T21:28:40Z", "type": "commit"}, {"oid": "d7d548a2317f3eb07bb93cf28d7e62b0300abb3f", "url": "https://github.com/getodk/collect/commit/d7d548a2317f3eb07bb93cf28d7e62b0300abb3f", "message": "review", "committedDate": "2020-05-06T21:28:40Z", "type": "commit"}, {"oid": "f16c57eb086452266fcd3388fb69bf1e0549582f", "url": "https://github.com/getodk/collect/commit/f16c57eb086452266fcd3388fb69bf1e0549582f", "message": "address review comments", "committedDate": "2020-05-06T21:28:40Z", "type": "commit"}, {"oid": "817ee550986e2440f53f1294298afad5b0f87c87", "url": "https://github.com/getodk/collect/commit/817ee550986e2440f53f1294298afad5b0f87c87", "message": "update flash button to be materialbutton", "committedDate": "2020-05-06T21:28:40Z", "type": "commit"}, {"oid": "9718beb9979db5a9d018fdda1d7a28e62b5edef5", "url": "https://github.com/getodk/collect/commit/9718beb9979db5a9d018fdda1d7a28e62b5edef5", "message": "refactor into preferences.qr", "committedDate": "2020-05-06T21:28:40Z", "type": "commit"}, {"oid": "cb0adfad1ecbb2a2e1deb87b4f582ed175c92e84", "url": "https://github.com/getodk/collect/commit/cb0adfad1ecbb2a2e1deb87b4f582ed175c92e84", "message": "QrCodeFragmentAction test", "committedDate": "2020-05-06T21:28:40Z", "type": "commit"}, {"oid": "29356d78cf88fb14dd2da397bc89b555c7b75b2c", "url": "https://github.com/getodk/collect/commit/29356d78cf88fb14dd2da397bc89b555c7b75b2c", "message": "fixed test", "committedDate": "2020-05-06T21:28:40Z", "type": "commit"}, {"oid": "9f3a5d5c664802939123b75ebe472e1661c8c84d", "url": "https://github.com/getodk/collect/commit/9f3a5d5c664802939123b75ebe472e1661c8c84d", "message": "ShowQRFragmentAction test", "committedDate": "2020-05-06T21:28:40Z", "type": "commit"}, {"oid": "f341ca35612e90c3900fbef87e7bcf9c97a794e4", "url": "https://github.com/getodk/collect/commit/f341ca35612e90c3900fbef87e7bcf9c97a794e4", "message": "QRCodeTabsActivityPage", "committedDate": "2020-05-06T21:28:40Z", "type": "commit"}, {"oid": "9658e21df88ac74e611855b191e5050a1b34b22e", "url": "https://github.com/getodk/collect/commit/9658e21df88ac74e611855b191e5050a1b34b22e", "message": "fix bug share qr code doesnt work if qr code not generated yet", "committedDate": "2020-05-06T21:28:40Z", "type": "commit"}, {"oid": "8c5a9629fc324a32c784db2710c203182aa95dce", "url": "https://github.com/getodk/collect/commit/8c5a9629fc324a32c784db2710c203182aa95dce", "message": "fix tests", "committedDate": "2020-05-06T21:28:40Z", "type": "commit"}, {"oid": "a544327929fda67d3e7889044e35f2957b716cf8", "url": "https://github.com/getodk/collect/commit/a544327929fda67d3e7889044e35f2957b716cf8", "message": "remove copyright", "committedDate": "2020-05-06T21:28:40Z", "type": "commit"}, {"oid": "6a4b27e0d93e2066bec0be4af32bc305f7ebe70d", "url": "https://github.com/getodk/collect/commit/6a4b27e0d93e2066bec0be4af32bc305f7ebe70d", "message": "fix tests", "committedDate": "2020-05-06T21:28:40Z", "type": "commit"}, {"oid": "d2c4bf08a446434726bf8df835431ebc7ca61085", "url": "https://github.com/getodk/collect/commit/d2c4bf08a446434726bf8df835431ebc7ca61085", "message": "style", "committedDate": "2020-05-06T21:37:10Z", "type": "commit"}, {"oid": "d2c4bf08a446434726bf8df835431ebc7ca61085", "url": "https://github.com/getodk/collect/commit/d2c4bf08a446434726bf8df835431ebc7ca61085", "message": "style", "committedDate": "2020-05-06T21:37:10Z", "type": "forcePushed"}, {"oid": "4959cba3e515229bc77e49999767f248f8bb48b6", "url": "https://github.com/getodk/collect/commit/4959cba3e515229bc77e49999767f248f8bb48b6", "message": "update qrcodeutilstest", "committedDate": "2020-05-06T22:20:41Z", "type": "commit"}, {"oid": "4005fe290c0d61bdd52271c16e0ce4a9f53cf4ba", "url": "https://github.com/getodk/collect/commit/4005fe290c0d61bdd52271c16e0ce4a9f53cf4ba", "message": "comments", "committedDate": "2020-05-06T23:36:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA2MzIzNg==", "url": "https://github.com/getodk/collect/pull/3743#discussion_r422063236", "bodyText": "We've found recently that we could run into ordering problems with rules so it'd be best if this rule was also part of the RuleChain below. Just remove the @Rule and add around(rule) to the end of the chain.", "author": "seadowg", "createdAt": "2020-05-08T10:15:09Z", "path": "collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/ConfigureWithQRCodeTest.java", "diffHunk": "@@ -0,0 +1,192 @@\n+package org.odk.collect.android.preferences.qr;\n+\n+import android.Manifest;\n+import android.app.Activity;\n+import android.app.Instrumentation;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+import android.net.Uri;\n+\n+import com.google.zxing.WriterException;\n+\n+import androidx.core.content.FileProvider;\n+import androidx.test.core.app.ApplicationProvider;\n+import androidx.test.espresso.intent.Intents;\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.rule.GrantPermissionRule;\n+import dagger.Provides;\n+import io.reactivex.Observable;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.BuildConfig;\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.activities.MainMenuActivity;\n+import org.odk.collect.android.injection.config.AppDependencyModule;\n+import org.odk.collect.android.storage.StoragePathProvider;\n+import org.odk.collect.android.storage.StorageSubdirectory;\n+import org.odk.collect.android.support.ResetStateRule;\n+import org.odk.collect.android.support.pages.MainMenuPage;\n+import org.odk.collect.android.utilities.FileUtils;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Collection;\n+\n+import static androidx.test.espresso.intent.Intents.intended;\n+import static androidx.test.espresso.intent.Intents.intending;\n+import static androidx.test.espresso.intent.matcher.BundleMatchers.hasEntry;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasAction;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasExtraWithKey;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasExtras;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasType;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.isInternal;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.not;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+\n+@RunWith(AndroidJUnit4.class)\n+public class ConfigureWithQRCodeTest {\n+    // drawable resource that will act as \"qr code\" in this test\n+    private static final int CHECKER_BACKGROUND_DRAWABLE_ID = R.drawable.checker_background;\n+\n+    @Rule\n+    public IntentsTestRule<MainMenuActivity> rule = new IntentsTestRule<>(MainMenuActivity.class);", "originalCommit": "4005fe290c0d61bdd52271c16e0ce4a9f53cf4ba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "644f35700483225ac5a116f29cf95c0dc181f1d7", "chunk": "diff --git a/collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/ConfigureWithQRCodeTest.java b/collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/ConfigureWithQRCodeTest.java\nindex 55d691217..960525f36 100644\n--- a/collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/ConfigureWithQRCodeTest.java\n+++ b/collect_app/src/androidTest/java/org/odk/collect/android/preferences/qr/ConfigureWithQRCodeTest.java\n\n@@ -58,9 +58,6 @@ public class ConfigureWithQRCodeTest {\n     // drawable resource that will act as \"qr code\" in this test\n     private static final int CHECKER_BACKGROUND_DRAWABLE_ID = R.drawable.checker_background;\n \n-    @Rule\n-    public IntentsTestRule<MainMenuActivity> rule = new IntentsTestRule<>(MainMenuActivity.class);\n-\n     @Rule\n     public RuleChain copyFormChain = RuleChain\n             .outerRule(GrantPermissionRule.grant(\n"}}, {"oid": "644f35700483225ac5a116f29cf95c0dc181f1d7", "url": "https://github.com/getodk/collect/commit/644f35700483225ac5a116f29cf95c0dc181f1d7", "message": "rule fixing", "committedDate": "2020-05-08T23:37:16Z", "type": "commit"}, {"oid": "ee35d8a4efe3aade182667d480fcda3ec5a71bf4", "url": "https://github.com/getodk/collect/commit/ee35d8a4efe3aade182667d480fcda3ec5a71bf4", "message": "merge", "committedDate": "2020-05-08T23:45:11Z", "type": "commit"}, {"oid": "9fb6b6dd77c0f1ff701b8ba7d1669cd439c8e806", "url": "https://github.com/getodk/collect/commit/9fb6b6dd77c0f1ff701b8ba7d1669cd439c8e806", "message": "fix RuleChain", "committedDate": "2020-05-08T23:48:19Z", "type": "commit"}, {"oid": "ee53a505c3251ab4df70a05f6400686cb10527c4", "url": "https://github.com/getodk/collect/commit/ee53a505c3251ab4df70a05f6400686cb10527c4", "message": "fix", "committedDate": "2020-05-08T23:57:18Z", "type": "commit"}, {"oid": "b267f6532fe59179001b6814cc1e54cf30d16533", "url": "https://github.com/getodk/collect/commit/b267f6532fe59179001b6814cc1e54cf30d16533", "message": "remove @rule", "committedDate": "2020-05-09T00:13:28Z", "type": "commit"}, {"oid": "65e9dff0d25aa249d8dac5652ac33207081c149a", "url": "https://github.com/getodk/collect/commit/65e9dff0d25aa249d8dac5652ac33207081c149a", "message": "dark color qr code tabs", "committedDate": "2020-05-11T17:53:09Z", "type": "commit"}, {"oid": "1810f6cf392e39e3313604e6c15a9cf1a78cb250", "url": "https://github.com/getodk/collect/commit/1810f6cf392e39e3313604e6c15a9cf1a78cb250", "message": "continuous qr code + handle import qrcode", "committedDate": "2020-05-11T18:14:59Z", "type": "commit"}, {"oid": "5318fc1594bf597661d8af6a6e40df4038b0f01b", "url": "https://github.com/getodk/collect/commit/5318fc1594bf597661d8af6a6e40df4038b0f01b", "message": "fix typo", "committedDate": "2020-05-12T18:00:33Z", "type": "commit"}]}