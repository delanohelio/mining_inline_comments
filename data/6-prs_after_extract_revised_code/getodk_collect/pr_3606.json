{"pr_number": 3606, "pr_title": "Implemented classes to handle database operations for both sdcard and scoped storage", "pr_createdAt": "2020-01-23T20:00:52Z", "pr_url": "https://github.com/getodk/collect/pull/3606", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgzMzI5MQ==", "url": "https://github.com/getodk/collect/pull/3606#discussion_r370833291", "bodyText": "Should be getOfflineLayersPath to match the others.", "author": "lognaturel", "createdAt": "2020-01-24T20:42:30Z", "path": "collect_app/src/main/java/org/odk/collect/android/storage/StorageManager.java", "diffHunk": "@@ -68,4 +67,8 @@ public static String getMetadataPath() {\n     public static String getCachePath() {\n         return getOdkRoot() + File.separator + \".cache\";\n     }\n+\n+    public static String getOfflineLayers() {", "originalCommit": "c32fa40cadbfef936b6e5ce2460083859652fe0c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ3NzI3Mg==", "url": "https://github.com/getodk/collect/pull/3606#discussion_r371477272", "bodyText": "It is called getOfflineLayersDirPath() (which matches all the others) in the final version so probably you looked at a commit where I moved the static filed from Collect class here and created a method everything using Android Studio so it wasn't even a name that I created.", "author": "grzesiek2010", "createdAt": "2020-01-27T20:55:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgzMzI5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "59cf8172ece10847638b5e20db7074c7523b095c", "chunk": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/StorageManager.java b/collect_app/src/main/java/org/odk/collect/android/storage/StorageManager.java\nindex 05e6e9438..14a3e380b 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/StorageManager.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/StorageManager.java\n\n@@ -48,27 +42,145 @@ public class StorageManager {\n         }\n     }\n \n-    public static String getOdkRoot() {\n-        return Environment.getExternalStorageDirectory() + File.separator + \"odk\";\n+    private boolean isStorageAvailable() {\n+        return getStorageState().equals(Environment.MEDIA_MOUNTED);\n+    }\n+\n+    private String getStorageState() {\n+        return Environment.getExternalStorageState();\n+    }\n+\n+    public String[] getODKDirPaths() {\n+        return new String[]{\n+                getMainODKDirPath(),\n+                getFormsDirPath(),\n+                getInstancesDirPath(),\n+                getCacheDirPath(),\n+                getMetadataDirPath(),\n+                getOfflineLayersDirPath()\n+            };\n+    }\n+\n+    private String getStoragePath() {\n+        return isScopedStorageUsed()\n+                ? getPrimaryExternalStorageFilePath()\n+                : getSecondaryExternalStorageFilePath();\n+    }\n+\n+    String getPrimaryExternalStorageFilePath() {\n+        File primaryStorageFile = Collect.getInstance().getExternalFilesDir(null);\n+        if (primaryStorageFile != null) {\n+            return primaryStorageFile.getAbsolutePath();\n+        }\n+        return \"\";\n     }\n \n-    public static String getFormsPath() {\n-        return getOdkRoot() + File.separator + \"forms\";\n+    String getSecondaryExternalStorageFilePath() {\n+        return Environment.getExternalStorageDirectory().getAbsolutePath();\n     }\n \n-    public static String getInstancesPath() {\n-        return getOdkRoot() + File.separator + \"instances\";\n+    public String getMainODKDirPath() {\n+        return getStoragePath() + File.separator + \"odk\";\n     }\n \n-    public static String getMetadataPath() {\n-        return getOdkRoot() + File.separator + \"metadata\";\n+    public String getFormsDirPath() {\n+        return getMainODKDirPath() + File.separator + \"forms\";\n     }\n \n-    public static String getCachePath() {\n-        return getOdkRoot() + File.separator + \".cache\";\n+    public String getInstancesDirPath() {\n+        return getMainODKDirPath() + File.separator + \"instances\";\n+    }\n+\n+    public String getMetadataDirPath() {\n+        return getMainODKDirPath() + File.separator + \"metadata\";\n+    }\n+\n+    public String getCacheDirPath() {\n+        return getMainODKDirPath() + File.separator + \".cache\";\n+    }\n+\n+    public String getOfflineLayersDirPath() {\n+        return getMainODKDirPath() + File.separator + \"layers\";\n+    }\n+\n+    public String getSettingsDirPath() {\n+        return getMainODKDirPath() + File.separator + \"settings\";\n+    }\n+\n+    public String getTmpFilePath() {\n+        return getCacheDirPath() + File.separator + \"tmp.jpg\";\n+    }\n+\n+    public String getTmpDrawFilePath() {\n+        return getCacheDirPath() + File.separator + \"tmpDraw.jpg\";\n+    }\n+\n+    boolean isScopedStorageUsed() {\n+        return GeneralSharedPreferences.getInstance().getBoolean(KEY_SCOPED_STORAGE_USED, false);\n+    }\n+\n+    public void recordMigrationToScopedStorage() {\n+        GeneralSharedPreferences.getInstance().save(KEY_SCOPED_STORAGE_USED, true);\n+    }\n+\n+    // TODO the method should be removed once using Scoped storage became required\n+    public String getCacheFilePathToStoreInDatabaseBasingOnRelativePath(String relativePath) {\n+        return isScopedStorageUsed()\n+                ? relativePath\n+                : getCacheDirPath() + File.separator + relativePath;\n+    }\n+\n+    public String getAbsoluteCacheFilePath(String filePath) {\n+        if (filePath == null) {\n+            return null;\n+        }\n+        return filePath.startsWith(getCacheDirPath())\n+                ? filePath\n+                : getCacheDirPath() + File.separator + filePath;\n+    }\n+\n+    // TODO the method should be removed once using Scoped storage became required\n+    public String getFormFilePathToStoreInDatabaseBasingOnRelativePath(String relativePath) {\n+        return isScopedStorageUsed()\n+                ? relativePath\n+                : getFormsDirPath() + File.separator + relativePath;\n+    }\n+\n+    // TODO the method should be removed once using Scoped storage became required\n+    public String getRelativeFormFilePath(String filePath) {\n+        return filePath.startsWith(getFormsDirPath())\n+                ? filePath.substring(getFormsDirPath().length() + 1)\n+                : filePath;\n+    }\n+\n+    public String getAbsoluteFormFilePath(String filePath) {\n+        if (filePath == null) {\n+            return null;\n+        }\n+        return filePath.startsWith(getFormsDirPath())\n+                ? filePath\n+                : getFormsDirPath() + File.separator + filePath;\n+    }\n+\n+    // TODO the method should be removed once using Scoped storage became required\n+    public String getInstanceFilePathToStoreInDatabaseBasingOnRelativePath(String relativePath) {\n+        return isScopedStorageUsed()\n+                ? relativePath\n+                : getInstancesDirPath() + File.separator + relativePath;\n+    }\n+\n+    public String getAbsoluteInstanceFilePath(String filePath) {\n+        if (filePath == null) {\n+            return null;\n+        }\n+        return filePath.startsWith(getInstancesDirPath())\n+                ? filePath\n+                : getInstancesDirPath() + File.separator + filePath;\n     }\n \n-    public static String getOfflineLayers() {\n-        return getOdkRoot() + File.separator + \"layers\";\n+    public String getRelativeInstanceFilePath(String filePath) {\n+        return filePath.startsWith(getInstancesDirPath())\n+                ? filePath.substring(getInstancesDirPath().length() + 1)\n+                : filePath;\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgzMzc0Mw==", "url": "https://github.com/getodk/collect/pull/3606#discussion_r370833743", "bodyText": "Do these really belong here?", "author": "lognaturel", "createdAt": "2020-01-24T20:43:45Z", "path": "collect_app/src/main/java/org/odk/collect/android/storage/StorageManager.java", "diffHunk": "@@ -77,4 +75,8 @@ public static String getSETTINGS() {\n     public static String getTmpfilePath() {", "originalCommit": "edfb2d2235e2dd35bedef90376fbf6b47911b23b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ3OTIxMA==", "url": "https://github.com/getodk/collect/pull/3606#discussion_r371479210", "bodyText": "In my opinion yes but you can try to change it :)", "author": "grzesiek2010", "createdAt": "2020-01-27T20:59:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgzMzc0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "59cf8172ece10847638b5e20db7074c7523b095c", "chunk": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/StorageManager.java b/collect_app/src/main/java/org/odk/collect/android/storage/StorageManager.java\nindex 92b647572..14a3e380b 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/StorageManager.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/StorageManager.java\n\n@@ -44,39 +42,145 @@ public class StorageManager {\n         }\n     }\n \n-    public static String getOdkRoot() {\n-        return Environment.getExternalStorageDirectory() + File.separator + \"odk\";\n+    private boolean isStorageAvailable() {\n+        return getStorageState().equals(Environment.MEDIA_MOUNTED);\n+    }\n+\n+    private String getStorageState() {\n+        return Environment.getExternalStorageState();\n+    }\n+\n+    public String[] getODKDirPaths() {\n+        return new String[]{\n+                getMainODKDirPath(),\n+                getFormsDirPath(),\n+                getInstancesDirPath(),\n+                getCacheDirPath(),\n+                getMetadataDirPath(),\n+                getOfflineLayersDirPath()\n+            };\n+    }\n+\n+    private String getStoragePath() {\n+        return isScopedStorageUsed()\n+                ? getPrimaryExternalStorageFilePath()\n+                : getSecondaryExternalStorageFilePath();\n+    }\n+\n+    String getPrimaryExternalStorageFilePath() {\n+        File primaryStorageFile = Collect.getInstance().getExternalFilesDir(null);\n+        if (primaryStorageFile != null) {\n+            return primaryStorageFile.getAbsolutePath();\n+        }\n+        return \"\";\n+    }\n+\n+    String getSecondaryExternalStorageFilePath() {\n+        return Environment.getExternalStorageDirectory().getAbsolutePath();\n+    }\n+\n+    public String getMainODKDirPath() {\n+        return getStoragePath() + File.separator + \"odk\";\n+    }\n+\n+    public String getFormsDirPath() {\n+        return getMainODKDirPath() + File.separator + \"forms\";\n+    }\n+\n+    public String getInstancesDirPath() {\n+        return getMainODKDirPath() + File.separator + \"instances\";\n     }\n \n-    public static String getFormsPath() {\n-        return getOdkRoot() + File.separator + \"forms\";\n+    public String getMetadataDirPath() {\n+        return getMainODKDirPath() + File.separator + \"metadata\";\n     }\n \n-    public static String getInstancesPath() {\n-        return getOdkRoot() + File.separator + \"instances\";\n+    public String getCacheDirPath() {\n+        return getMainODKDirPath() + File.separator + \".cache\";\n     }\n \n-    public static String getMetadataPath() {\n-        return getOdkRoot() + File.separator + \"metadata\";\n+    public String getOfflineLayersDirPath() {\n+        return getMainODKDirPath() + File.separator + \"layers\";\n     }\n \n-    public static String getCachePath() {\n-        return getOdkRoot() + File.separator + \".cache\";\n+    public String getSettingsDirPath() {\n+        return getMainODKDirPath() + File.separator + \"settings\";\n     }\n \n-    public static String getOfflineLayers() {\n-        return getOdkRoot() + File.separator + \"layers\";\n+    public String getTmpFilePath() {\n+        return getCacheDirPath() + File.separator + \"tmp.jpg\";\n     }\n \n-    public static String getSETTINGS() {\n-        return getOdkRoot() + File.separator + \"settings\";\n+    public String getTmpDrawFilePath() {\n+        return getCacheDirPath() + File.separator + \"tmpDraw.jpg\";\n     }\n \n-    public static String getTmpfilePath() {\n-        return getCachePath() + File.separator + \"tmp.jpg\";\n+    boolean isScopedStorageUsed() {\n+        return GeneralSharedPreferences.getInstance().getBoolean(KEY_SCOPED_STORAGE_USED, false);\n+    }\n+\n+    public void recordMigrationToScopedStorage() {\n+        GeneralSharedPreferences.getInstance().save(KEY_SCOPED_STORAGE_USED, true);\n+    }\n+\n+    // TODO the method should be removed once using Scoped storage became required\n+    public String getCacheFilePathToStoreInDatabaseBasingOnRelativePath(String relativePath) {\n+        return isScopedStorageUsed()\n+                ? relativePath\n+                : getCacheDirPath() + File.separator + relativePath;\n+    }\n+\n+    public String getAbsoluteCacheFilePath(String filePath) {\n+        if (filePath == null) {\n+            return null;\n+        }\n+        return filePath.startsWith(getCacheDirPath())\n+                ? filePath\n+                : getCacheDirPath() + File.separator + filePath;\n+    }\n+\n+    // TODO the method should be removed once using Scoped storage became required\n+    public String getFormFilePathToStoreInDatabaseBasingOnRelativePath(String relativePath) {\n+        return isScopedStorageUsed()\n+                ? relativePath\n+                : getFormsDirPath() + File.separator + relativePath;\n+    }\n+\n+    // TODO the method should be removed once using Scoped storage became required\n+    public String getRelativeFormFilePath(String filePath) {\n+        return filePath.startsWith(getFormsDirPath())\n+                ? filePath.substring(getFormsDirPath().length() + 1)\n+                : filePath;\n+    }\n+\n+    public String getAbsoluteFormFilePath(String filePath) {\n+        if (filePath == null) {\n+            return null;\n+        }\n+        return filePath.startsWith(getFormsDirPath())\n+                ? filePath\n+                : getFormsDirPath() + File.separator + filePath;\n+    }\n+\n+    // TODO the method should be removed once using Scoped storage became required\n+    public String getInstanceFilePathToStoreInDatabaseBasingOnRelativePath(String relativePath) {\n+        return isScopedStorageUsed()\n+                ? relativePath\n+                : getInstancesDirPath() + File.separator + relativePath;\n+    }\n+\n+    public String getAbsoluteInstanceFilePath(String filePath) {\n+        if (filePath == null) {\n+            return null;\n+        }\n+        return filePath.startsWith(getInstancesDirPath())\n+                ? filePath\n+                : getInstancesDirPath() + File.separator + filePath;\n     }\n \n-    public static String getTmpdrawfilePath() {\n-        return getCachePath() + File.separator + \"tmpDraw.jpg\";\n+    public String getRelativeInstanceFilePath(String filePath) {\n+        return filePath.startsWith(getInstancesDirPath())\n+                ? filePath.substring(getInstancesDirPath().length() + 1)\n+                : filePath;\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgzNDg0MQ==", "url": "https://github.com/getodk/collect/pull/3606#discussion_r370834841", "bodyText": "By naming conventions, it should be Odk. How about getStorageRootPath?", "author": "lognaturel", "createdAt": "2020-01-24T20:46:46Z", "path": "collect_app/src/main/java/org/odk/collect/android/storage/StorageManager.java", "diffHunk": "@@ -40,50 +40,50 @@ public static void createODKDirs() throws RuntimeException {\n         }\n     }\n \n-    public static String[] getODKDirs() {\n+    public static String[] getODKDirPaths() {\n         return new String[]{\n-                getOdkRoot(),\n-                getFormsPath(),\n-                getInstancesPath(),\n-                getCachePath(),\n-                getMetadataPath(),\n-                getOfflineLayers()\n+                getMainODKDirPath(),\n+                getFormsDirPath(),\n+                getInstancesDirPath(),\n+                getCacheDirPath(),\n+                getMetadataDirPath(),\n+                getOfflineLayersDirPath()\n             };\n     }\n \n-    public static String getOdkRoot() {\n+    public static String getMainODKDirPath() {", "originalCommit": "f548d71bf541c40e22bebd01f7c72d18031a6a4c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ3ODU3Nw==", "url": "https://github.com/getodk/collect/pull/3606#discussion_r371478577", "bodyText": "I have a method called getStoragePath() which returns a path to sd card/scoped storage so getStorageRootPath would be too similar... wee need to emphasize it's odk dir.", "author": "grzesiek2010", "createdAt": "2020-01-27T20:58:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgzNDg0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "59cf8172ece10847638b5e20db7074c7523b095c", "chunk": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/StorageManager.java b/collect_app/src/main/java/org/odk/collect/android/storage/StorageManager.java\nindex 489a46771..14a3e380b 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/StorageManager.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/StorageManager.java\n\n@@ -4,35 +4,37 @@ import android.os.Environment;\n \n import org.odk.collect.android.R;\n import org.odk.collect.android.application.Collect;\n+import org.odk.collect.android.preferences.GeneralSharedPreferences;\n \n import java.io.File;\n \n import timber.log.Timber;\n \n+import static org.odk.collect.android.preferences.GeneralKeys.KEY_SCOPED_STORAGE_USED;\n+\n public class StorageManager {\n     /**\n      * Creates required directories on the SDCard (or other external storage)\n      *\n      * @throws RuntimeException if there is no SDCard or the directory exists as a non directory\n      */\n-    public static void createODKDirs() throws RuntimeException {\n-        String cardstatus = Environment.getExternalStorageState();\n-        if (!cardstatus.equals(Environment.MEDIA_MOUNTED)) {\n+    public void createODKDirs() throws RuntimeException {\n+        if (!isStorageAvailable()) {\n             throw new RuntimeException(\n-                    Collect.getInstance().getString(R.string.sdcard_unmounted, cardstatus));\n+                    Collect.getInstance().getString(R.string.sdcard_unmounted, getStorageState()));\n         }\n \n-        for (String dirName : getODKDirPaths()) {\n-            File dir = new File(dirName);\n+        for (String dirPath : getODKDirPaths()) {\n+            File dir = new File(dirPath);\n             if (!dir.exists()) {\n                 if (!dir.mkdirs()) {\n-                    String message = Collect.getInstance().getString(R.string.cannot_create_directory, dirName);\n+                    String message = Collect.getInstance().getString(R.string.cannot_create_directory, dirPath);\n                     Timber.w(message);\n                     throw new RuntimeException(message);\n                 }\n             } else {\n                 if (!dir.isDirectory()) {\n-                    String message = Collect.getInstance().getString(R.string.not_a_directory, dirName);\n+                    String message = Collect.getInstance().getString(R.string.not_a_directory, dirPath);\n                     Timber.w(message);\n                     throw new RuntimeException(message);\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgzNjc0Mg==", "url": "https://github.com/getodk/collect/pull/3606#discussion_r370836742", "bodyText": "I don't think primary/secondary is easy to understand. How about:\n\ngetScopedExternalFilesDir or getAppExternalFilesDir\ngetUnscopedExternalFilesDir or getRootExternalFilesDir", "author": "lognaturel", "createdAt": "2020-01-24T20:52:05Z", "path": "collect_app/src/main/java/org/odk/collect/android/storage/StorageManager.java", "diffHunk": "@@ -54,8 +54,26 @@ public static void createODKDirs() throws RuntimeException {\n             };\n     }\n \n+    private static String getStoragePath() {\n+        return isScopedStorageUsed()\n+                ? getPrimaryExternalStorageFilePath()", "originalCommit": "153da3fe08282ddcd004ae23f4de7954103907d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ4Mjg2OQ==", "url": "https://github.com/getodk/collect/pull/3606#discussion_r371482869", "bodyText": "Primary and secondary are words used across Android doc. I feel like Scoped Storage is something more, it represents the whole change which forces use to use the primary external storage so to be honest I prefer my naming. What do you think @seadowg?", "author": "grzesiek2010", "createdAt": "2020-01-27T21:08:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgzNjc0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ4NTQ3Mw==", "url": "https://github.com/getodk/collect/pull/3606#discussion_r371485473", "bodyText": "Can you link out to the Android doc you're referring to? I think that in Android primary would refer to internal storage and secondary to the (first) physical sdcard.\nI think that means the primary/secondary naming is inaccurate if it intends to match Android so it's important to change:\n\nEnvironment.getExternalStorageDirectory(): \"Return the primary shared/external storage directory.\"\nContext.getExternalFilesDir(): \"Returns the absolute path to the directory on the primary shared/external storage device where the application can place persistent files it owns\"\n\nSo the paths are on the same media. The difference is whether the storage area is scoped or not / belongs to the app or not.", "author": "lognaturel", "createdAt": "2020-01-27T21:13:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgzNjc0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc0MTYxMg==", "url": "https://github.com/getodk/collect/pull/3606#discussion_r371741612", "bodyText": "Ahh ok i think I read this answer https://stackoverflow.com/a/29404440/5479029 which is obviously wrong. Sorry I think you are right and the names you proposed make sense.", "author": "grzesiek2010", "createdAt": "2020-01-28T11:14:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgzNjc0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "59cf8172ece10847638b5e20db7074c7523b095c", "chunk": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/StorageManager.java b/collect_app/src/main/java/org/odk/collect/android/storage/StorageManager.java\nindex 5d328aed0..14a3e380b 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/StorageManager.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/StorageManager.java\n\n@@ -54,13 +61,13 @@ public class StorageManager {\n             };\n     }\n \n-    private static String getStoragePath() {\n+    private String getStoragePath() {\n         return isScopedStorageUsed()\n                 ? getPrimaryExternalStorageFilePath()\n                 : getSecondaryExternalStorageFilePath();\n     }\n \n-    private static String getPrimaryExternalStorageFilePath() {\n+    String getPrimaryExternalStorageFilePath() {\n         File primaryStorageFile = Collect.getInstance().getExternalFilesDir(null);\n         if (primaryStorageFile != null) {\n             return primaryStorageFile.getAbsolutePath();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgzNzU1Mw==", "url": "https://github.com/getodk/collect/pull/3606#discussion_r370837553", "bodyText": "Inlining this in isStorageAvailable would be clearer, I think.", "author": "lognaturel", "createdAt": "2020-01-24T20:54:16Z", "path": "collect_app/src/main/java/org/odk/collect/android/storage/StorageManager.java", "diffHunk": "@@ -43,6 +42,14 @@ public static void createODKDirs() throws RuntimeException {\n         }\n     }\n \n+    private static boolean isStorageAvailable() {\n+        return getStorageState().equals(Environment.MEDIA_MOUNTED);\n+    }\n+\n+    private static String getStorageState() {\n+        return Environment.getExternalStorageState();", "originalCommit": "6cac66bd4d1f5daf2087befd434a9f9164bcef61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ5NDI4OA==", "url": "https://github.com/getodk/collect/pull/3606#discussion_r371494288", "bodyText": "I agree this method is not needed.", "author": "grzesiek2010", "createdAt": "2020-01-27T21:33:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDgzNzU1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "59cf8172ece10847638b5e20db7074c7523b095c", "chunk": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/StorageManager.java b/collect_app/src/main/java/org/odk/collect/android/storage/StorageManager.java\nindex 00913bdf9..14a3e380b 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/StorageManager.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/StorageManager.java\n\n@@ -18,23 +18,23 @@ public class StorageManager {\n      *\n      * @throws RuntimeException if there is no SDCard or the directory exists as a non directory\n      */\n-    public static void createODKDirs() throws RuntimeException {\n+    public void createODKDirs() throws RuntimeException {\n         if (!isStorageAvailable()) {\n             throw new RuntimeException(\n                     Collect.getInstance().getString(R.string.sdcard_unmounted, getStorageState()));\n         }\n \n-        for (String dirName : getODKDirPaths()) {\n-            File dir = new File(dirName);\n+        for (String dirPath : getODKDirPaths()) {\n+            File dir = new File(dirPath);\n             if (!dir.exists()) {\n                 if (!dir.mkdirs()) {\n-                    String message = Collect.getInstance().getString(R.string.cannot_create_directory, dirName);\n+                    String message = Collect.getInstance().getString(R.string.cannot_create_directory, dirPath);\n                     Timber.w(message);\n                     throw new RuntimeException(message);\n                 }\n             } else {\n                 if (!dir.isDirectory()) {\n-                    String message = Collect.getInstance().getString(R.string.not_a_directory, dirName);\n+                    String message = Collect.getInstance().getString(R.string.not_a_directory, dirPath);\n                     Timber.w(message);\n                     throw new RuntimeException(message);\n                 }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg1MTU2MQ==", "url": "https://github.com/getodk/collect/pull/3606#discussion_r370851561", "bodyText": "This looks like it would have different behavior from what was there before. If this is based on the path, I'd expect needing to go through getFormFilePath (the method that builds database paths based on whether or not scoped storage is used).", "author": "lognaturel", "createdAt": "2020-01-24T21:31:33Z", "path": "collect_app/src/main/java/org/odk/collect/android/tasks/FormLoaderTask.java", "diffHunk": "@@ -258,7 +259,7 @@ private void processItemSets(File formMediaDir) {\n             ida.open();\n             // get the database entry (if exists) for this itemsets.csv, based\n             // on the path\n-            final Cursor c = ida.getItemsets(csv.getAbsolutePath());\n+            final Cursor c = ida.getItemsets(relativeCsvFilePath);", "originalCommit": "59b6e6466f426233cbdfbc708bd6da30453a0c1f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQzNjQyNw==", "url": "https://github.com/getodk/collect/pull/3606#discussion_r372436427", "bodyText": "Like below. I changed the approach a bit so now those methods responsible for returning database paths deal with both relative and absolute paths so those changes are not needed.", "author": "grzesiek2010", "createdAt": "2020-01-29T15:05:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg1MTU2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "e69a95fee25b7927de7ace66b116b058ccde2504", "chunk": "diff --git a/collect_app/src/main/java/org/odk/collect/android/tasks/FormLoaderTask.java b/collect_app/src/main/java/org/odk/collect/android/tasks/FormLoaderTask.java\nindex 22f85b3bb..a8166a715 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/tasks/FormLoaderTask.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/tasks/FormLoaderTask.java\n\n@@ -259,7 +258,7 @@ public class FormLoaderTask extends AsyncTask<String, String, FormLoaderTask.FEC\n             ida.open();\n             // get the database entry (if exists) for this itemsets.csv, based\n             // on the path\n-            final Cursor c = ida.getItemsets(relativeCsvFilePath);\n+            final Cursor c = ida.getItemsets(csv.getAbsolutePath());\n             if (c != null) {\n                 if (c.getCount() == 1) {\n                     c.moveToFirst(); // should be only one, ever, if any\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg1MTkxNg==", "url": "https://github.com/getodk/collect/pull/3606#discussion_r370851916", "bodyText": "relativeCsvFilePath and csv are redundant. Can you do a substring? Generally not understanding 59b6e64.", "author": "lognaturel", "createdAt": "2020-01-24T21:32:33Z", "path": "collect_app/src/main/java/org/odk/collect/android/tasks/FormLoaderTask.java", "diffHunk": "@@ -508,7 +508,7 @@ public void setActivityResult(int requestCode, int resultCode, Intent intent) {\n         this.intent = intent;\n     }\n \n-    private void readCSV(File csv, String formHash, String pathHash) {\n+    private void readCSV(File csv, String formHash, String pathHash, String relativeCsvFilePath) {", "originalCommit": "59b6e6466f426233cbdfbc708bd6da30453a0c1f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQzNjE5Mw==", "url": "https://github.com/getodk/collect/pull/3606#discussion_r372436193", "bodyText": "I changed the approach a bit so now those methods responsible for returning database paths deal with both relative and absolute paths so those changes are not needed.", "author": "grzesiek2010", "createdAt": "2020-01-29T15:04:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg1MTkxNg=="}], "type": "inlineReview", "revised_code": {"commit": "e69a95fee25b7927de7ace66b116b058ccde2504", "chunk": "diff --git a/collect_app/src/main/java/org/odk/collect/android/tasks/FormLoaderTask.java b/collect_app/src/main/java/org/odk/collect/android/tasks/FormLoaderTask.java\nindex 22f85b3bb..a8166a715 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/tasks/FormLoaderTask.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/tasks/FormLoaderTask.java\n\n@@ -508,7 +508,7 @@ public class FormLoaderTask extends AsyncTask<String, String, FormLoaderTask.FEC\n         this.intent = intent;\n     }\n \n-    private void readCSV(File csv, String formHash, String pathHash, String relativeCsvFilePath) {\n+    private void readCSV(File csv, String formHash, String pathHash) {\n \n         CSVReader reader;\n         ItemsetDbAdapter ida = new ItemsetDbAdapter();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg1MjQ0OQ==", "url": "https://github.com/getodk/collect/pull/3606#discussion_r370852449", "bodyText": "Why does it have to be relativized first? Can't getFormFilePath deal with it?", "author": "lognaturel", "createdAt": "2020-01-24T21:34:06Z", "path": "collect_app/src/main/java/org/odk/collect/android/activities/FormEntryActivity.java", "diffHunk": "@@ -2027,7 +2027,7 @@ public void onClick(DialogInterface dialog,\n                                         languages[whichButton]);\n                                 String selection = FormsColumns.FORM_FILE_PATH\n                                         + \"=?\";\n-                                String[] selectArgs = {formPath};\n+                                String[] selectArgs = {StorageManager.getFormFilePath(StorageManager.getRelativeFormFilePath(formPath))};", "originalCommit": "1c30d3cc5eac177901cdec4355b633a0ffacb33c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTczOTczOA==", "url": "https://github.com/getodk/collect/pull/3606#discussion_r371739738", "bodyText": "Because getFormFilePath() (final name getFormFilePathToStoreInDatabaseBasingOnRelativePath()) expects a relative path as a parameter. Theoretically I could have a method in which as a passed value I would accept both relative and absolute paths and then deal with it but I'm not sure it's better, somehow I decided to do that in this way. I'll look at it again.", "author": "grzesiek2010", "createdAt": "2020-01-28T11:09:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg1MjQ0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQzNTQxNA==", "url": "https://github.com/getodk/collect/pull/3606#discussion_r372435414", "bodyText": "Fixed, now one method deals with it.", "author": "grzesiek2010", "createdAt": "2020-01-29T15:03:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg1MjQ0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "59cf8172ece10847638b5e20db7074c7523b095c", "chunk": "diff --git a/collect_app/src/main/java/org/odk/collect/android/activities/FormEntryActivity.java b/collect_app/src/main/java/org/odk/collect/android/activities/FormEntryActivity.java\nindex 7238bdfe5..bd6ec6744 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/activities/FormEntryActivity.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/activities/FormEntryActivity.java\n\n@@ -2027,7 +2069,8 @@ public class FormEntryActivity extends CollectAbstractActivity implements Animat\n                                         languages[whichButton]);\n                                 String selection = FormsColumns.FORM_FILE_PATH\n                                         + \"=?\";\n-                                String[] selectArgs = {StorageManager.getFormFilePath(StorageManager.getRelativeFormFilePath(formPath))};\n+                                StorageManager storageManager = new StorageManager();\n+                                String[] selectArgs = {storageManager.getFormFilePathToStoreInDatabaseBasingOnRelativePath(storageManager.getRelativeFormFilePath(formPath))};\n                                 int updated = new FormsDao().updateForm(values, selection, selectArgs);\n                                 Timber.i(\"Updated language to: %s in %d rows\",\n                                         languages[whichButton],\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg1NDYwOA==", "url": "https://github.com/getodk/collect/pull/3606#discussion_r370854608", "bodyText": "Quick stylistic note you don't need to do anything about but I wanted to share for your consideration:\nassertThat(storageManager.getMainODKDirPath(), is(\"/storage/emulated/0/odk\")) reads more like English. Here we have to go to the end of the assertions to find out what code is under test and then look at what the expected value is.", "author": "lognaturel", "createdAt": "2020-01-24T21:40:14Z", "path": "collect_app/src/test/java/org/odk/collect/android/storage/StorageManagerTest.java", "diffHunk": "@@ -0,0 +1,139 @@\n+package org.odk.collect.android.storage;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.spy;\n+\n+public class StorageManagerTest {\n+\n+    private StorageManager storageManager = spy(StorageManager.class);\n+\n+    @Before\n+    public void setup() {\n+        doReturn(\"/storage/emulated/0/Android/data/org.odk.collect.android/files\").when(storageManager).getPrimaryExternalStorageFilePath();\n+        doReturn(\"/storage/emulated/0\").when(storageManager).getSecondaryExternalStorageFilePath();\n+    }\n+\n+    private void mockUsingScopedStorage() {\n+        doReturn(true).when(storageManager).isScopedStorageUsed();\n+    }\n+\n+    private void mockUsingSdCard() {\n+        doReturn(false).when(storageManager).isScopedStorageUsed();\n+    }\n+\n+    @Test\n+    public void when_scopedStorageNotUsed_should_sdCardPathsBeUsed() {\n+        mockUsingSdCard();\n+\n+        assertEquals(\"/storage/emulated/0/odk\", storageManager.getMainODKDirPath());", "originalCommit": "0fb732dfffcbc3cdd4eba67497e55a52a9250877", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ4MzkwNQ==", "url": "https://github.com/getodk/collect/pull/3606#discussion_r371483905", "bodyText": "Yes sometimes I use assertThat sometimes assertEquals I should choose one approach (assertThat).", "author": "grzesiek2010", "createdAt": "2020-01-27T21:10:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg1NDYwOA=="}], "type": "inlineReview", "revised_code": {"commit": "59cf8172ece10847638b5e20db7074c7523b095c", "chunk": "diff --git a/collect_app/src/test/java/org/odk/collect/android/storage/StorageManagerTest.java b/collect_app/src/test/java/org/odk/collect/android/storage/StorageManagerTest.java\nindex 72d9bbd0e..84f86a160 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/storage/StorageManagerTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/storage/StorageManagerTest.java\n\n@@ -9,7 +9,7 @@ import static org.mockito.Mockito.spy;\n \n public class StorageManagerTest {\n \n-    private StorageManager storageManager = spy(StorageManager.class);\n+    private final StorageManager storageManager = spy(StorageManager.class);\n \n     @Before\n     public void setup() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg1ODEwMw==", "url": "https://github.com/getodk/collect/pull/3606#discussion_r370858103", "bodyText": "The naming here is really tricky. It's something I had flagged when the methods were first introduced so I'm glad to see you looking for something more specific. I must say that even for me who loves words, these are a bit long. \ud83d\ude0a Here are some other ideas:\n\ngetCacheFilePathForDatabase\ngetDatabasePathFromRelativePath(Enum fileType (e.g. CACHE, FORM, INSTANCE), String relativePath)\nrelativePathToDatabasePath(String relativePath, Enum fileType)", "author": "lognaturel", "createdAt": "2020-01-24T21:50:25Z", "path": "collect_app/src/main/java/org/odk/collect/android/storage/StorageManager.java", "diffHunk": "@@ -124,7 +124,7 @@ public void recordMigrationToScopedStorage() {\n     }\n \n     // TODO the method should be removed once using Scoped storage became required\n-    public String getCacheFilePath(String relativePath) {\n+    public String getCacheFilePathToStoreInDatabaseBasingOnRelativePath(String relativePath) {", "originalCommit": "74d4c277e320975ac9724ec894ed3659bda72f88", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM1NjEzNA==", "url": "https://github.com/getodk/collect/pull/3606#discussion_r371356134", "bodyText": "If you don't want to go the enum route (totally fine), what about getCacheDbPath/getInstanceDbPath/etc? I think that given the parameter name, it's not critical to state in the name that the incoming path must be relative. But getCacheDbPathFromRelativePath also works for me.", "author": "lognaturel", "createdAt": "2020-01-27T16:48:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg1ODEwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTczMzgxNA==", "url": "https://github.com/getodk/collect/pull/3606#discussion_r371733814", "bodyText": "Yeah I agree that it could be improved. I'll rethink it.", "author": "grzesiek2010", "createdAt": "2020-01-28T10:56:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg1ODEwMw=="}], "type": "inlineReview", "revised_code": {"commit": "108ca8f8b2e8d90d47d2233566cd52cb428f9cd8", "chunk": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/StorageManager.java b/collect_app/src/main/java/org/odk/collect/android/storage/StoragePathProvider.java\nsimilarity index 52%\nrename from collect_app/src/main/java/org/odk/collect/android/storage/StorageManager.java\nrename to collect_app/src/main/java/org/odk/collect/android/storage/StoragePathProvider.java\nindex 14a3e380b..81bd5fcd5 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/StorageManager.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/StoragePathProvider.java\n\n@@ -115,17 +82,9 @@ public class StorageManager {\n         return getCacheDirPath() + File.separator + \"tmpDraw.jpg\";\n     }\n \n-    boolean isScopedStorageUsed() {\n-        return GeneralSharedPreferences.getInstance().getBoolean(KEY_SCOPED_STORAGE_USED, false);\n-    }\n-\n-    public void recordMigrationToScopedStorage() {\n-        GeneralSharedPreferences.getInstance().save(KEY_SCOPED_STORAGE_USED, true);\n-    }\n-\n     // TODO the method should be removed once using Scoped storage became required\n-    public String getCacheFilePathToStoreInDatabaseBasingOnRelativePath(String relativePath) {\n-        return isScopedStorageUsed()\n+    public String getCacheDbPathFromRelativePath(String relativePath) {\n+        return storageStateProvider.isScopedStorageUsed()\n                 ? relativePath\n                 : getCacheDirPath() + File.separator + relativePath;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg4Mjk1NA==", "url": "https://github.com/getodk/collect/pull/3606#discussion_r370882954", "bodyText": "This seems like it would be catastrophic. It means no media is available, right? Would having an empty string here just cause things to crash downstream?", "author": "lognaturel", "createdAt": "2020-01-24T23:17:09Z", "path": "collect_app/src/main/java/org/odk/collect/android/storage/StorageManager.java", "diffHunk": "@@ -0,0 +1,186 @@\n+package org.odk.collect.android.storage;\n+\n+import android.os.Environment;\n+\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.application.Collect;\n+import org.odk.collect.android.preferences.GeneralSharedPreferences;\n+\n+import java.io.File;\n+\n+import timber.log.Timber;\n+\n+import static org.odk.collect.android.preferences.GeneralKeys.KEY_SCOPED_STORAGE_USED;\n+\n+public class StorageManager {\n+    /**\n+     * Creates required directories on the SDCard (or other external storage)\n+     *\n+     * @throws RuntimeException if there is no SDCard or the directory exists as a non directory\n+     */\n+    public void createODKDirs() throws RuntimeException {\n+        if (!isStorageAvailable()) {\n+            throw new RuntimeException(\n+                    Collect.getInstance().getString(R.string.sdcard_unmounted, getStorageState()));\n+        }\n+\n+        for (String dirPath : getODKDirPaths()) {\n+            File dir = new File(dirPath);\n+            if (!dir.exists()) {\n+                if (!dir.mkdirs()) {\n+                    String message = Collect.getInstance().getString(R.string.cannot_create_directory, dirPath);\n+                    Timber.w(message);\n+                    throw new RuntimeException(message);\n+                }\n+            } else {\n+                if (!dir.isDirectory()) {\n+                    String message = Collect.getInstance().getString(R.string.not_a_directory, dirPath);\n+                    Timber.w(message);\n+                    throw new RuntimeException(message);\n+                }\n+            }\n+        }\n+    }\n+\n+    private boolean isStorageAvailable() {\n+        return getStorageState().equals(Environment.MEDIA_MOUNTED);\n+    }\n+\n+    private String getStorageState() {\n+        return Environment.getExternalStorageState();\n+    }\n+\n+    public String[] getODKDirPaths() {\n+        return new String[]{\n+                getMainODKDirPath(),\n+                getFormsDirPath(),\n+                getInstancesDirPath(),\n+                getCacheDirPath(),\n+                getMetadataDirPath(),\n+                getOfflineLayersDirPath()\n+            };\n+    }\n+\n+    private String getStoragePath() {\n+        return isScopedStorageUsed()\n+                ? getPrimaryExternalStorageFilePath()\n+                : getSecondaryExternalStorageFilePath();\n+    }\n+\n+    String getPrimaryExternalStorageFilePath() {\n+        File primaryStorageFile = Collect.getInstance().getExternalFilesDir(null);\n+        if (primaryStorageFile != null) {\n+            return primaryStorageFile.getAbsolutePath();\n+        }\n+        return \"\";", "originalCommit": "bf709c55d17f9318ba41fa33e80f005dd36d05ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg1NTc0OA==", "url": "https://github.com/getodk/collect/pull/3606#discussion_r371855748", "bodyText": "Yes, I hardcoded it for testing and it returns:\n\nhttps://github.com/opendatakit/collect/pull/3606/files#diff-294c525d328b50b03236414b1f1ef7a7R33\nProbably we should improve the message?", "author": "grzesiek2010", "createdAt": "2020-01-28T15:01:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg4Mjk1NA=="}], "type": "inlineReview", "revised_code": {"commit": "108ca8f8b2e8d90d47d2233566cd52cb428f9cd8", "chunk": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/StorageManager.java b/collect_app/src/main/java/org/odk/collect/android/storage/StoragePathProvider.java\nsimilarity index 52%\nrename from collect_app/src/main/java/org/odk/collect/android/storage/StorageManager.java\nrename to collect_app/src/main/java/org/odk/collect/android/storage/StoragePathProvider.java\nindex 14a3e380b..81bd5fcd5 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/StorageManager.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/StoragePathProvider.java\n\n@@ -2,57 +2,24 @@ package org.odk.collect.android.storage;\n \n import android.os.Environment;\n \n-import org.odk.collect.android.R;\n import org.odk.collect.android.application.Collect;\n-import org.odk.collect.android.preferences.GeneralSharedPreferences;\n \n import java.io.File;\n \n-import timber.log.Timber;\n+import javax.inject.Inject;\n \n-import static org.odk.collect.android.preferences.GeneralKeys.KEY_SCOPED_STORAGE_USED;\n+public class StoragePathProvider {\n \n-public class StorageManager {\n-    /**\n-     * Creates required directories on the SDCard (or other external storage)\n-     *\n-     * @throws RuntimeException if there is no SDCard or the directory exists as a non directory\n-     */\n-    public void createODKDirs() throws RuntimeException {\n-        if (!isStorageAvailable()) {\n-            throw new RuntimeException(\n-                    Collect.getInstance().getString(R.string.sdcard_unmounted, getStorageState()));\n-        }\n-\n-        for (String dirPath : getODKDirPaths()) {\n-            File dir = new File(dirPath);\n-            if (!dir.exists()) {\n-                if (!dir.mkdirs()) {\n-                    String message = Collect.getInstance().getString(R.string.cannot_create_directory, dirPath);\n-                    Timber.w(message);\n-                    throw new RuntimeException(message);\n-                }\n-            } else {\n-                if (!dir.isDirectory()) {\n-                    String message = Collect.getInstance().getString(R.string.not_a_directory, dirPath);\n-                    Timber.w(message);\n-                    throw new RuntimeException(message);\n-                }\n-            }\n-        }\n-    }\n-\n-    private boolean isStorageAvailable() {\n-        return getStorageState().equals(Environment.MEDIA_MOUNTED);\n-    }\n+    @Inject\n+    StorageStateProvider storageStateProvider;\n \n-    private String getStorageState() {\n-        return Environment.getExternalStorageState();\n+    public StoragePathProvider() {\n+        Collect.getComponent().inject(this);\n     }\n \n     public String[] getODKDirPaths() {\n         return new String[]{\n-                getMainODKDirPath(),\n+                getRootOdkDirPath(),\n                 getFormsDirPath(),\n                 getInstancesDirPath(),\n                 getCacheDirPath(),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAzNDUxMQ==", "url": "https://github.com/getodk/collect/pull/3606#discussion_r371034511", "bodyText": "This is going to do a database query, right? So it seems like it should match whatever is in the database? I'd expect no transformation needed here.", "author": "lognaturel", "createdAt": "2020-01-26T22:37:58Z", "path": "collect_app/src/main/java/org/odk/collect/android/provider/FormsProvider.java", "diffHunk": "@@ -325,21 +324,20 @@ public int delete(@NonNull Uri uri, String where, String[] whereArgs) {\n                         if (c != null && c.getCount() > 0) {\n                             c.moveToFirst();\n                             do {\n-                                deleteFileOrDir(c.getString(c\n-                                        .getColumnIndex(FormsColumns.JRCACHE_FILE_PATH)));\n-                                String formFilePath = c.getString(c\n-                                        .getColumnIndex(FormsColumns.FORM_FILE_PATH));\n-                                deleteFileOrDir(formFilePath);\n-                                deleteFileOrDir(c.getString(c\n-                                        .getColumnIndex(FormsColumns.FORM_MEDIA_PATH)));\n+                                deleteFileOrDir(storageManager.getAbsoluteCacheFilePath(c.getString(c\n+                                        .getColumnIndex(FormsColumns.JRCACHE_FILE_PATH))));\n+                                deleteFileOrDir(storageManager.getAbsoluteFormFilePath(c.getString(c\n+                                        .getColumnIndex(FormsColumns.FORM_FILE_PATH))));\n+                                deleteFileOrDir(storageManager.getAbsoluteFormFilePath(c.getString(c\n+                                        .getColumnIndex(FormsColumns.FORM_MEDIA_PATH))));\n \n                                 try {\n                                     // get rid of the old tables\n                                     ItemsetDbAdapter ida = new ItemsetDbAdapter();\n                                     ida.open();\n-                                    ida.delete(c.getString(c\n+                                    ida.delete(storageManager.getRelativeFormFilePath(c.getString(c", "originalCommit": "bf709c55d17f9318ba41fa33e80f005dd36d05ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQ1Mjg3NA==", "url": "https://github.com/getodk/collect/pull/3606#discussion_r372452874", "bodyText": "Right, fixed.", "author": "grzesiek2010", "createdAt": "2020-01-29T15:30:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTAzNDUxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "108ca8f8b2e8d90d47d2233566cd52cb428f9cd8", "chunk": "diff --git a/collect_app/src/main/java/org/odk/collect/android/provider/FormsProvider.java b/collect_app/src/main/java/org/odk/collect/android/provider/FormsProvider.java\nindex 605fe4952..ce11b22ca 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/provider/FormsProvider.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/provider/FormsProvider.java\n\n@@ -324,18 +325,18 @@ public class FormsProvider extends ContentProvider {\n                         if (c != null && c.getCount() > 0) {\n                             c.moveToFirst();\n                             do {\n-                                deleteFileOrDir(storageManager.getAbsoluteCacheFilePath(c.getString(c\n+                                deleteFileOrDir(storagePathProvider.getAbsoluteCacheFilePath(c.getString(c\n                                         .getColumnIndex(FormsColumns.JRCACHE_FILE_PATH))));\n-                                deleteFileOrDir(storageManager.getAbsoluteFormFilePath(c.getString(c\n+                                deleteFileOrDir(storagePathProvider.getAbsoluteFormFilePath(c.getString(c\n                                         .getColumnIndex(FormsColumns.FORM_FILE_PATH))));\n-                                deleteFileOrDir(storageManager.getAbsoluteFormFilePath(c.getString(c\n+                                deleteFileOrDir(storagePathProvider.getAbsoluteFormFilePath(c.getString(c\n                                         .getColumnIndex(FormsColumns.FORM_MEDIA_PATH))));\n \n                                 try {\n                                     // get rid of the old tables\n                                     ItemsetDbAdapter ida = new ItemsetDbAdapter();\n                                     ida.open();\n-                                    ida.delete(storageManager.getRelativeFormFilePath(c.getString(c\n+                                    ida.delete(storagePathProvider.getRelativeFormFilePath(c.getString(c\n                                             .getColumnIndex(FormsColumns.FORM_MEDIA_PATH))\n                                             + \"/itemsets.csv\"));\n                                     ida.close();\n"}}, {"oid": "59cf8172ece10847638b5e20db7074c7523b095c", "url": "https://github.com/getodk/collect/commit/59cf8172ece10847638b5e20db7074c7523b095c", "message": "Fixed test", "committedDate": "2020-01-28T11:18:06Z", "type": "forcePushed"}, {"oid": "108ca8f8b2e8d90d47d2233566cd52cb428f9cd8", "url": "https://github.com/getodk/collect/commit/108ca8f8b2e8d90d47d2233566cd52cb428f9cd8", "message": "Naming improvements", "committedDate": "2020-01-28T15:04:34Z", "type": "forcePushed"}, {"oid": "e69a95fee25b7927de7ace66b116b058ccde2504", "url": "https://github.com/getodk/collect/commit/e69a95fee25b7927de7ace66b116b058ccde2504", "message": "Implemented changes to handle paths in Form and Instance classes", "committedDate": "2020-01-29T14:44:02Z", "type": "forcePushed"}, {"oid": "1b6cb777e7a249ae2aaa9e667bde7ca046fd4dbb", "url": "https://github.com/getodk/collect/commit/1b6cb777e7a249ae2aaa9e667bde7ca046fd4dbb", "message": "Removed redundant storagePathProvider.getAbsoluteFormFilePath() call", "committedDate": "2020-01-29T17:22:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU0ODYzNw==", "url": "https://github.com/getodk/collect/pull/3606#discussion_r372548637", "bodyText": "This is going to do a db request. Shouldn't it use the getDbPath method? As written, this code will always build an absolute path but when we flip the switch to scoped storage, there won't be absolute paths in the db to query against.", "author": "lognaturel", "createdAt": "2020-01-29T18:16:20Z", "path": "collect_app/src/androidTest/java/org/odk/collect/android/dao/FormsDaoTest.java", "diffHunk": "@@ -126,7 +128,7 @@ public void getFormsCursorTest() {\n \n     @Test\n     public void getFormsCursorForFormFilePathTest() {\n-        Cursor cursor = formsDao.getFormsCursorForFormFilePath(Collect.FORMS_PATH + \"/Miramare.xml\");\n+        Cursor cursor = formsDao.getFormsCursorForFormFilePath(storagePathProvider.getDirPath(StorageSubdirectory.FORMS) + \"/Miramare.xml\");", "originalCommit": "1b6cb777e7a249ae2aaa9e667bde7ca046fd4dbb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgwMzM1Ng==", "url": "https://github.com/getodk/collect/pull/3606#discussion_r372803356", "bodyText": "getFormsCursorForFormFilePath() used here deals with it.", "author": "grzesiek2010", "createdAt": "2020-01-30T08:01:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU0ODYzNw=="}], "type": "inlineReview", "revised_code": {"commit": "afffe60f1f0e321199f0bb41d13f0750cb97167f", "chunk": "diff --git a/collect_app/src/androidTest/java/org/odk/collect/android/dao/FormsDaoTest.java b/collect_app/src/androidTest/java/org/odk/collect/android/dao/FormsDaoTest.java\nindex f40129802..feb1f1525 100644\n--- a/collect_app/src/androidTest/java/org/odk/collect/android/dao/FormsDaoTest.java\n+++ b/collect_app/src/androidTest/java/org/odk/collect/android/dao/FormsDaoTest.java\n\n@@ -128,7 +126,7 @@ public class FormsDaoTest {\n \n     @Test\n     public void getFormsCursorForFormFilePathTest() {\n-        Cursor cursor = formsDao.getFormsCursorForFormFilePath(storagePathProvider.getDirPath(StorageSubdirectory.FORMS) + \"/Miramare.xml\");\n+        Cursor cursor = formsDao.getFormsCursorForFormFilePath(Collect.FORMS_PATH + \"/Miramare.xml\");\n         List<Form> forms = formsDao.getFormsFromCursor(cursor);\n         assertEquals(1, forms.size());\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU1MjY3Mw==", "url": "https://github.com/getodk/collect/pull/3606#discussion_r372552673", "bodyText": "This should be a db path, right?", "author": "lognaturel", "createdAt": "2020-01-29T18:24:01Z", "path": "collect_app/src/main/java/org/odk/collect/android/provider/FormsProvider.java", "diffHunk": "@@ -200,19 +203,19 @@ public synchronized Uri insert(@NonNull Uri uri, ContentValues initialValues) {\n             values.put(FormsColumns.MD5_HASH, md5);\n \n             if (!values.containsKey(FormsColumns.JRCACHE_FILE_PATH)) {\n-                String cachePath = Collect.CACHE_PATH + File.separator + md5\n+                String cachePath = storagePathProvider.getDirPath(StorageSubdirectory.CACHE) + File.separator + md5", "originalCommit": "1b6cb777e7a249ae2aaa9e667bde7ca046fd4dbb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgwNjkxMA==", "url": "https://github.com/getodk/collect/pull/3606#discussion_r372806910", "bodyText": "Ohh yes generaly that line was redundant at all because it was just:\nString cachePath = storagePathProvider.getDirPath(StorageSubdirectory.CACHE) + File.separator + md5 + \".formdef\";\nvalues.put(FormsColumns.JRCACHE_FILE_PATH, storagePathProvider.getCacheDbPath(cachePath));\nso first I an absolute path was created and then used in getCacheDbPath() which deals with relative paths as well.\nThat means we can just use:\nvalues.put(FormsColumns.JRCACHE_FILE_PATH, storagePathProvider.getCacheDbPath(md5 + \".formdef\"));\nFixed.", "author": "grzesiek2010", "createdAt": "2020-01-30T08:12:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU1MjY3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "7e81acc0ef9961cef4a0d3d7d2e077cfa727513e", "chunk": "diff --git a/collect_app/src/main/java/org/odk/collect/android/provider/FormsProvider.java b/collect_app/src/main/java/org/odk/collect/android/provider/FormsProvider.java\nindex 6e272957d..34bb02d7b 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/provider/FormsProvider.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/provider/FormsProvider.java\n\n@@ -203,9 +203,7 @@ public class FormsProvider extends ContentProvider {\n             values.put(FormsColumns.MD5_HASH, md5);\n \n             if (!values.containsKey(FormsColumns.JRCACHE_FILE_PATH)) {\n-                String cachePath = storagePathProvider.getDirPath(StorageSubdirectory.CACHE) + File.separator + md5\n-                        + \".formdef\";\n-                values.put(FormsColumns.JRCACHE_FILE_PATH, storagePathProvider.getCacheDbPath(cachePath));\n+                values.put(FormsColumns.JRCACHE_FILE_PATH, storagePathProvider.getCacheDbPath(md5 + \".formdef\"));\n             }\n             if (!values.containsKey(FormsColumns.FORM_MEDIA_PATH)) {\n                 values.put(FormsColumns.FORM_MEDIA_PATH, storagePathProvider.getFormDbPath(FileUtils.constructMediaPath(filePath)));\n"}}, {"oid": "7e81acc0ef9961cef4a0d3d7d2e077cfa727513e", "url": "https://github.com/getodk/collect/commit/7e81acc0ef9961cef4a0d3d7d2e077cfa727513e", "message": "Cleaned the code", "committedDate": "2020-01-30T08:03:59Z", "type": "forcePushed"}, {"oid": "af48ee7cee531b8a1f7fbec1850ce844febc2183", "url": "https://github.com/getodk/collect/commit/af48ee7cee531b8a1f7fbec1850ce844febc2183", "message": "Cleaned the code", "committedDate": "2020-01-30T08:04:37Z", "type": "forcePushed"}, {"oid": "afffe60f1f0e321199f0bb41d13f0750cb97167f", "url": "https://github.com/getodk/collect/commit/afffe60f1f0e321199f0bb41d13f0750cb97167f", "message": "Created StorageManager class", "committedDate": "2020-01-30T08:46:20Z", "type": "commit"}, {"oid": "97cdd9dcbc4f76ff568bd4fcc7dbaca7d2460a8f", "url": "https://github.com/getodk/collect/commit/97cdd9dcbc4f76ff568bd4fcc7dbaca7d2460a8f", "message": "Moved ODK_ROOT field from Collect to StorageManager", "committedDate": "2020-01-30T08:46:20Z", "type": "commit"}, {"oid": "3862705ca874c98d8b793af6d6f40a57ffefe735", "url": "https://github.com/getodk/collect/commit/3862705ca874c98d8b793af6d6f40a57ffefe735", "message": "Moved FORMS_PATH field from Collect to StorageManager", "committedDate": "2020-01-30T08:46:20Z", "type": "commit"}, {"oid": "7894d8a50b8a256e27b5c0ecbf89f2a9e35e1b94", "url": "https://github.com/getodk/collect/commit/7894d8a50b8a256e27b5c0ecbf89f2a9e35e1b94", "message": "Moved INSTANCES_PATH field from Collect to StorageManager", "committedDate": "2020-01-30T08:46:20Z", "type": "commit"}, {"oid": "033d0ab8b618ec27c986a3b6c1cb4f7c97b6d609", "url": "https://github.com/getodk/collect/commit/033d0ab8b618ec27c986a3b6c1cb4f7c97b6d609", "message": "Moved CACHE_PATH field from Collect to StorageManager", "committedDate": "2020-01-30T08:46:20Z", "type": "commit"}, {"oid": "fff4091784b767727b8d53e6bb06b493f330e430", "url": "https://github.com/getodk/collect/commit/fff4091784b767727b8d53e6bb06b493f330e430", "message": "Moved METADATA_PATH field from Collect to StorageManager", "committedDate": "2020-01-30T08:46:20Z", "type": "commit"}, {"oid": "0c75515880c929735533f9c390f18f450dea673f", "url": "https://github.com/getodk/collect/commit/0c75515880c929735533f9c390f18f450dea673f", "message": "Moved OFFLINE_LAYERS field from Collect to StorageManager", "committedDate": "2020-01-30T08:46:20Z", "type": "commit"}, {"oid": "d11dcd61ae05d0406a93e7f93a23a71f460fdf2c", "url": "https://github.com/getodk/collect/commit/d11dcd61ae05d0406a93e7f93a23a71f460fdf2c", "message": "Moved SETTINGS field from Collect to StorageManager", "committedDate": "2020-01-30T08:46:20Z", "type": "commit"}, {"oid": "1c98477342988216b77412210dc3aa3df8499846", "url": "https://github.com/getodk/collect/commit/1c98477342988216b77412210dc3aa3df8499846", "message": "Moved TMPFILE_PATH field from Collect to StorageManager", "committedDate": "2020-01-30T08:52:06Z", "type": "commit"}, {"oid": "7259f0511291c2d64ccc922920184f030ff8ff4a", "url": "https://github.com/getodk/collect/commit/7259f0511291c2d64ccc922920184f030ff8ff4a", "message": "Moved TMPDRAWFILE_PATH field from Collect to StorageManager", "committedDate": "2020-01-30T08:52:46Z", "type": "commit"}, {"oid": "f6ec17f9ea0f82df9dff1cef6da32e0d85ac21ce", "url": "https://github.com/getodk/collect/commit/f6ec17f9ea0f82df9dff1cef6da32e0d85ac21ce", "message": "Moved createODKDirs() method from Collect to StorageManager", "committedDate": "2020-01-30T08:52:46Z", "type": "commit"}, {"oid": "c2ea868ef7fe66c5099f541dddf6bc7ad57cddd0", "url": "https://github.com/getodk/collect/commit/c2ea868ef7fe66c5099f541dddf6bc7ad57cddd0", "message": "Turned ODK_ROOT field to a method", "committedDate": "2020-01-30T08:52:46Z", "type": "commit"}, {"oid": "48f063f2bfa706b7a876fffc1ed65c3afc4f5a28", "url": "https://github.com/getodk/collect/commit/48f063f2bfa706b7a876fffc1ed65c3afc4f5a28", "message": "Turned FORMS_PATH field to a method", "committedDate": "2020-01-30T08:52:46Z", "type": "commit"}, {"oid": "b182e319f957260591ed4aa6b8e953afa301c2ad", "url": "https://github.com/getodk/collect/commit/b182e319f957260591ed4aa6b8e953afa301c2ad", "message": "Turned INSTANCES_PATH field to a method", "committedDate": "2020-01-30T08:52:46Z", "type": "commit"}, {"oid": "ec7b8183c595f5423667ca635ebdecb460da34fc", "url": "https://github.com/getodk/collect/commit/ec7b8183c595f5423667ca635ebdecb460da34fc", "message": "Turned METADATA_PATH field to a method", "committedDate": "2020-01-30T08:52:46Z", "type": "commit"}, {"oid": "bba29ef22d8352ff3a592073651e140fdf2e5a8e", "url": "https://github.com/getodk/collect/commit/bba29ef22d8352ff3a592073651e140fdf2e5a8e", "message": "Turned CACHE_PATH field to a method", "committedDate": "2020-01-30T08:52:46Z", "type": "commit"}, {"oid": "02ed497aacedc5a12fe7ba34a87271ff465d51ad", "url": "https://github.com/getodk/collect/commit/02ed497aacedc5a12fe7ba34a87271ff465d51ad", "message": "Turned OFFLINE_LAYERS field to a method", "committedDate": "2020-01-30T08:52:46Z", "type": "commit"}, {"oid": "774e0de7491dde1e4fe972c44ebc4cc6494c5025", "url": "https://github.com/getodk/collect/commit/774e0de7491dde1e4fe972c44ebc4cc6494c5025", "message": "Turned SETTINGS field to a method", "committedDate": "2020-01-30T08:52:46Z", "type": "commit"}, {"oid": "20d3053eca6ef248892fdbfd3c24ab3867c2cd4c", "url": "https://github.com/getodk/collect/commit/20d3053eca6ef248892fdbfd3c24ab3867c2cd4c", "message": "Turned TMPFILE_PATH field to a method", "committedDate": "2020-01-30T08:52:46Z", "type": "commit"}, {"oid": "bbe94cddf3d541ed8bac517c3e210089f1d87ae3", "url": "https://github.com/getodk/collect/commit/bbe94cddf3d541ed8bac517c3e210089f1d87ae3", "message": "Turned TMPDRAWFILE_PATH field to a method", "committedDate": "2020-01-30T08:52:46Z", "type": "commit"}, {"oid": "2c5b7335d3e3dc90c12486cf259e0624bd4a7e5a", "url": "https://github.com/getodk/collect/commit/2c5b7335d3e3dc90c12486cf259e0624bd4a7e5a", "message": "Removed unused imports", "committedDate": "2020-01-30T08:52:46Z", "type": "commit"}, {"oid": "59f150ca76c7fab71fc4c3a75547c6f32ad8d1e8", "url": "https://github.com/getodk/collect/commit/59f150ca76c7fab71fc4c3a75547c6f32ad8d1e8", "message": "Factored out getODKDirs() method", "committedDate": "2020-01-30T08:52:46Z", "type": "commit"}, {"oid": "0968411648fd5cc9e15dbb66544ad027d8667d6d", "url": "https://github.com/getodk/collect/commit/0968411648fd5cc9e15dbb66544ad027d8667d6d", "message": "Naming improvements", "committedDate": "2020-01-30T08:52:46Z", "type": "commit"}, {"oid": "683a25a27a2fb7eb2ae74b455c958711788f94f8", "url": "https://github.com/getodk/collect/commit/683a25a27a2fb7eb2ae74b455c958711788f94f8", "message": "Added a new preference to manage the scoped storage", "committedDate": "2020-01-30T08:52:46Z", "type": "commit"}, {"oid": "5388908edaf684936919d163a21882e8b727a528", "url": "https://github.com/getodk/collect/commit/5388908edaf684936919d163a21882e8b727a528", "message": "Use a path to storage that is currently used", "committedDate": "2020-01-30T08:52:46Z", "type": "commit"}, {"oid": "111d10e67c4b920c2397a2ceb1fc629e72f3e77e", "url": "https://github.com/getodk/collect/commit/111d10e67c4b920c2397a2ceb1fc629e72f3e77e", "message": "Factored out isStorageAvailable() method", "committedDate": "2020-01-30T08:52:46Z", "type": "commit"}, {"oid": "62f38c6ebea1dcdc68ba1f768a506b0f3afbfd42", "url": "https://github.com/getodk/collect/commit/62f38c6ebea1dcdc68ba1f768a506b0f3afbfd42", "message": "Naming improvements", "committedDate": "2020-01-30T08:52:46Z", "type": "commit"}, {"oid": "74f5069ada8b2d64cd8d58c3422097e3f6ecc227", "url": "https://github.com/getodk/collect/commit/74f5069ada8b2d64cd8d58c3422097e3f6ecc227", "message": "Added methods to deal with paths in INSTANCE_FILE_PATH", "committedDate": "2020-01-30T08:52:46Z", "type": "commit"}, {"oid": "c6b2fbc446ba0bb4ba2bb33a559ae84560d7215d", "url": "https://github.com/getodk/collect/commit/c6b2fbc446ba0bb4ba2bb33a559ae84560d7215d", "message": "Added methods to deal with paths in FORM_FILE_PATH", "committedDate": "2020-01-30T08:52:46Z", "type": "commit"}, {"oid": "f71ecd3ed37717b44e087020763219822f0b36cb", "url": "https://github.com/getodk/collect/commit/f71ecd3ed37717b44e087020763219822f0b36cb", "message": "Added methods to deal with paths in FORM_MEDIA_PATH", "committedDate": "2020-01-30T08:52:46Z", "type": "commit"}, {"oid": "17a168028953c5574d3f0f232b03dfe49119b31b", "url": "https://github.com/getodk/collect/commit/17a168028953c5574d3f0f232b03dfe49119b31b", "message": "Added methods to deal with paths in JRCACHE_FILE_PATH", "committedDate": "2020-01-30T08:52:46Z", "type": "commit"}, {"oid": "631695f3b2d829e694e5199f560a588ff097f42b", "url": "https://github.com/getodk/collect/commit/631695f3b2d829e694e5199f560a588ff097f42b", "message": "Added methods to deal with paths in KEY_PATH", "committedDate": "2020-01-30T08:52:46Z", "type": "commit"}, {"oid": "b3455784d879e53d435f6577c38eb80a44bbc16e", "url": "https://github.com/getodk/collect/commit/b3455784d879e53d435f6577c38eb80a44bbc16e", "message": "Make methods in Storage manager non-static", "committedDate": "2020-01-30T08:52:46Z", "type": "commit"}, {"oid": "638b6ed15609f734bad9df736be7cd1e303a8df9", "url": "https://github.com/getodk/collect/commit/638b6ed15609f734bad9df736be7cd1e303a8df9", "message": "Renamed StorageManager to StoragePathProvider", "committedDate": "2020-01-30T08:53:08Z", "type": "commit"}, {"oid": "bf48739ba204af651284d0e5e5669f00ac25cb5d", "url": "https://github.com/getodk/collect/commit/bf48739ba204af651284d0e5e5669f00ac25cb5d", "message": "Implemented StorageInitializer class and moved some code from StoragePathProvider there", "committedDate": "2020-01-30T08:53:08Z", "type": "commit"}, {"oid": "3bfb46d6aefa1877bc930117a0d90090960b0d4f", "url": "https://github.com/getodk/collect/commit/3bfb46d6aefa1877bc930117a0d90090960b0d4f", "message": "Implemented StorageStateProvider", "committedDate": "2020-01-30T08:53:08Z", "type": "commit"}, {"oid": "4406dec1833e84953e7bb4a64b60f0a01c75326b", "url": "https://github.com/getodk/collect/commit/4406dec1833e84953e7bb4a64b60f0a01c75326b", "message": "Use single method for all subdirectory paths", "committedDate": "2020-01-30T08:53:08Z", "type": "commit"}, {"oid": "b102381dcc73ba3b5f1867f2668d09c65fe1641b", "url": "https://github.com/getodk/collect/commit/b102381dcc73ba3b5f1867f2668d09c65fe1641b", "message": "Fixed imports", "committedDate": "2020-01-30T08:53:08Z", "type": "commit"}, {"oid": "f4d20093027be8a7ac1ef8111102d302a93bf407", "url": "https://github.com/getodk/collect/commit/f4d20093027be8a7ac1ef8111102d302a93bf407", "message": "Fixed bugs in getXDbPath() methods and added automated tests", "committedDate": "2020-01-30T08:53:08Z", "type": "commit"}, {"oid": "1899cc76e181c7508375c63245a70bce36f13004", "url": "https://github.com/getodk/collect/commit/1899cc76e181c7508375c63245a70bce36f13004", "message": "Removed redundant getMainODKDirPath() method", "committedDate": "2020-01-30T08:53:08Z", "type": "commit"}, {"oid": "48db97b6dedf4f54fcd3f3233a6ec4bef7a8b84e", "url": "https://github.com/getodk/collect/commit/48db97b6dedf4f54fcd3f3233a6ec4bef7a8b84e", "message": "Code improvements", "committedDate": "2020-01-30T08:53:08Z", "type": "commit"}, {"oid": "bf65dac7a635664c27d490ae27ec18314a7f89d1", "url": "https://github.com/getodk/collect/commit/bf65dac7a635664c27d490ae27ec18314a7f89d1", "message": "Implemented changes to handle paths in Form and Instance classes", "committedDate": "2020-01-30T08:53:08Z", "type": "commit"}, {"oid": "387ff4160b94f1dcf8a8411abb995d757571b556", "url": "https://github.com/getodk/collect/commit/387ff4160b94f1dcf8a8411abb995d757571b556", "message": "Cleaned the code", "committedDate": "2020-01-30T08:53:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgyNTQzOQ==", "url": "https://github.com/getodk/collect/pull/3606#discussion_r372825439", "bodyText": "I think it'd be nice to pull this out as a constructor argument. For me that helps to signal that this is a dependency for the object and I think we'll want to move to having these objects constructed in Dagger to allow us to mock/fake them in tests. For the moment you could also just have a no arg constructor as well like you have in StoragePathProvider.", "author": "seadowg", "createdAt": "2020-01-30T08:58:04Z", "path": "collect_app/src/main/java/org/odk/collect/android/storage/StorageInitializer.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package org.odk.collect.android.storage;\n+\n+import android.os.Environment;\n+\n+import org.odk.collect.android.R;\n+import org.odk.collect.android.application.Collect;\n+\n+import java.io.File;\n+\n+import timber.log.Timber;\n+\n+public class StorageInitializer {\n+    /**\n+     * Creates required directories on the SDCard (or other external storage)\n+     *\n+     * @throws RuntimeException if there is no SDCard or the directory exists as a non directory\n+     */\n+    public void createODKDirs() throws RuntimeException {\n+        if (!new StorageStateProvider().isStorageMounted()) {", "originalCommit": "387ff4160b94f1dcf8a8411abb995d757571b556", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg1NzYzOQ==", "url": "https://github.com/getodk/collect/pull/3606#discussion_r372857639", "bodyText": "Done.", "author": "grzesiek2010", "createdAt": "2020-01-30T10:05:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgyNTQzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "f6130b0d095d014484b6dc287ac69ef6a1763510", "chunk": "diff --git a/collect_app/src/main/java/org/odk/collect/android/storage/StorageInitializer.java b/collect_app/src/main/java/org/odk/collect/android/storage/StorageInitializer.java\nindex eb82a1d59..e0c9e6f50 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/storage/StorageInitializer.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/storage/StorageInitializer.java\n\n@@ -1,5 +1,6 @@\n package org.odk.collect.android.storage;\n \n+import android.content.Context;\n import android.os.Environment;\n \n import org.odk.collect.android.R;\n"}}, {"oid": "947f14b9e98980d7b5e7620e0cc8a183eda1f592", "url": "https://github.com/getodk/collect/commit/947f14b9e98980d7b5e7620e0cc8a183eda1f592", "message": "Cleaned the code", "committedDate": "2020-01-30T09:25:32Z", "type": "commit"}, {"oid": "947f14b9e98980d7b5e7620e0cc8a183eda1f592", "url": "https://github.com/getodk/collect/commit/947f14b9e98980d7b5e7620e0cc8a183eda1f592", "message": "Cleaned the code", "committedDate": "2020-01-30T09:25:32Z", "type": "forcePushed"}, {"oid": "f6130b0d095d014484b6dc287ac69ef6a1763510", "url": "https://github.com/getodk/collect/commit/f6130b0d095d014484b6dc287ac69ef6a1763510", "message": "Pulled out dependencies in StorageInitializer", "committedDate": "2020-01-30T09:42:06Z", "type": "commit"}, {"oid": "02b71c9edd8d0cb745c0d6d7650c3a57d721ee45", "url": "https://github.com/getodk/collect/commit/02b71c9edd8d0cb745c0d6d7650c3a57d721ee45", "message": "Merge branch 'master' into storageManager", "committedDate": "2020-02-03T20:21:46Z", "type": "commit"}]}