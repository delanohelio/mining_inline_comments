{"pr_number": 3937, "pr_title": "Reworking Rating Widget", "pr_createdAt": "2020-06-23T03:51:21Z", "pr_url": "https://github.com/getodk/collect/pull/3937", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM3NzUxNQ==", "url": "https://github.com/getodk/collect/pull/3937#discussion_r447377515", "bodyText": "I have three Ratingbar with different styles In the XML file. All of thems visibility is turned off by default. This part of code checks which Ratingbar needs to be displayed depending on the number of stars and screen dimensions.", "author": "SaumiaSinghal", "createdAt": "2020-06-30T02:53:48Z", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -14,116 +14,92 @@\n \n package org.odk.collect.android.widgets;\n \n+import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n+import android.widget.RatingBar;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n+@SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n \n-    final GridLayout gridLayout;\n-    Integer answer;\n+    private RatingBar ratingBar;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n+    }\n \n-        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        RatingWidgetAnswerBinding binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n \n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n \n-        renderGrid(context, numberOfStars, columns, rows);\n+        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n+        int columns = calculateColumns(48);\n \n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n+        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+\n+        if (rows == 1) {\n+            binding.ratingBar.setVisibility(VISIBLE);\n+            this.ratingBar = binding.ratingBar;\n+        } else {\n+            binding.ratingBar.setVisibility(GONE);\n+            columns = calculateColumns(36);\n+            rows = (int) Math.ceil((double) numberOfStars / columns);\n+            if (rows == 1) {\n+                binding.ratingBar2.setVisibility(VISIBLE);\n+                this.ratingBar = binding.ratingBar2;\n+            } else {\n+                binding.ratingBar3.setVisibility(VISIBLE);\n+                this.ratingBar = binding.ratingBar3;", "originalCommit": "4e2628edce2fac55388024b25f5885182e6aeb0e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "25f6dc25ee36f51487563156a3399a4c578b769a", "chunk": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 92366b7ca..377090d76 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n\n@@ -17,7 +17,6 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.util.DisplayMetrics;\n import android.view.View;\n import android.widget.RatingBar;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA3OTEwOA==", "url": "https://github.com/getodk/collect/pull/3937#discussion_r450079108", "bodyText": "I think you can  use ScreenUtils.getScreenWidth() here and get rid of getScreenDimensions() at all.", "author": "grzesiek2010", "createdAt": "2020-07-06T08:55:12Z", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -14,116 +14,92 @@\n \n package org.odk.collect.android.widgets;\n \n+import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n+import android.widget.RatingBar;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n+@SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n \n-    final GridLayout gridLayout;\n-    Integer answer;\n+    private RatingBar ratingBar;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n+    }\n \n-        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        RatingWidgetAnswerBinding binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n \n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n \n-        renderGrid(context, numberOfStars, columns, rows);\n+        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n+        int columns = calculateColumns(48);\n \n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n+        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+\n+        if (rows == 1) {\n+            binding.ratingBar.setVisibility(VISIBLE);\n+            this.ratingBar = binding.ratingBar;\n+        } else {\n+            binding.ratingBar.setVisibility(GONE);\n+            columns = calculateColumns(36);\n+            rows = (int) Math.ceil((double) numberOfStars / columns);\n+            if (rows == 1) {\n+                binding.ratingBar2.setVisibility(VISIBLE);\n+                this.ratingBar = binding.ratingBar2;\n+            } else {\n+                binding.ratingBar3.setVisibility(VISIBLE);\n+                this.ratingBar = binding.ratingBar3;\n             }\n         }\n \n-        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n-    }\n-\n-    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n-        gridLayout.setColumnCount(columns);\n-        gridLayout.setRowCount(rows);\n+        ratingBar.setNumStars(rangeQuestion.getRangeEnd().intValue());\n+        ratingBar.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> widgetValueChanged());\n+        ratingBar.setEnabled(!prompt.isReadOnly());\n \n-        for (int column = 0,\n-             starId = 0;\n-             starId < numberOfStars;\n-             column++, starId++) {\n-            column = column == columns ? 0 : column;\n-\n-            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n-            gridLayout.addView(imageButton);\n+        if (prompt.getAnswerText() != null) {\n+            ratingBar.setRating(Integer.parseInt(prompt.getAnswerText()));\n         }\n-    }\n-\n-    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n-        ImageButton imageButton = new ImageButton(context);\n-        imageButton.setImageResource(R.drawable.ic_star_border);\n-        imageButton.setId(total);\n-        imageButton.setPadding(0, 0, 0, 0);\n-        imageButton.setBackground(null);\n-        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n-        imageButton.setOnClickListener(view -> {\n-            int position = view.getId();\n-            for (int i = 0; i < numberOfStars; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n-            }\n-            answer = position + 1;\n-\n-            widgetValueChanged();\n-        });\n-        return imageButton;\n+        return answerView;\n     }\n \n     @Override\n     public void setOnLongClickListener(OnLongClickListener l) {\n-        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n-            gridLayout.getChildAt(i).setOnLongClickListener(l);\n-        }\n+        ratingBar.setOnLongClickListener(l);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return answer != null ? new IntegerData(answer) : null;\n+        return ratingBar.getRating() == 0.0F ? null : new IntegerData((int) ratingBar.getRating());\n     }\n \n     @Override\n     public void clearAnswer() {\n-        if (answer != null) {\n-            for (int i = 0; i < answer; i++) {\n-                ((ImageButton) gridLayout.getChildAt(i)).setImageResource(R.drawable.ic_star_border);\n-            }\n-        }\n+        ratingBar.setRating(0.0F);\n+    }\n \n-        answer = null;\n-        widgetValueChanged();\n+    protected RatingBar getRatingBar() {\n+        return ratingBar;\n     }\n \n-    private int calculateColumns() {\n-        Drawable starDrawable = getResources().getDrawable(R.drawable.ic_star);\n+    private int calculateColumns(int widthOfStar) {\n         DisplayMetrics dm = getScreenDimensions((Activity) getContext());\n-        int widthOfStar = starDrawable.getIntrinsicWidth();\n-        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / widthOfStar;\n+        return (dm.widthPixels - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET) / ((int) UiUtils.convertDpToPixel(widthOfStar, getContext()));", "originalCommit": "4e2628edce2fac55388024b25f5885182e6aeb0e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "25f6dc25ee36f51487563156a3399a4c578b769a", "chunk": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 92366b7ca..377090d76 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n\n@@ -17,7 +17,6 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.util.DisplayMetrics;\n import android.view.View;\n import android.widget.RatingBar;\n \n"}}, {"oid": "25f6dc25ee36f51487563156a3399a4c578b769a", "url": "https://github.com/getodk/collect/commit/25f6dc25ee36f51487563156a3399a4c578b769a", "message": "refactor gradle file", "committedDate": "2020-07-06T10:59:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUzNzY2MA==", "url": "https://github.com/getodk/collect/pull/3937#discussion_r451537660", "bodyText": "You have two blank lines here please remove one.", "author": "grzesiek2010", "createdAt": "2020-07-08T13:19:31Z", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -14,121 +14,91 @@\n \n package org.odk.collect.android.widgets;\n \n+import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n+import android.widget.RatingBar;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n+@SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n \n-    final GridLayout gridLayout;\n-    Integer answer;\n+    private RatingBar ratingBar;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n+    }\n \n-        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        RatingWidgetAnswerBinding binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n \n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n ", "originalCommit": "25f6dc25ee36f51487563156a3399a4c578b769a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bc853175de6bed2d48928afe6ef6da6cde687eba", "chunk": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 377090d76..a60489839 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n\n@@ -18,7 +18,6 @@ import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n import android.view.View;\n-import android.widget.RatingBar;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU0NTY2NA==", "url": "https://github.com/getodk/collect/pull/3937#discussion_r451545664", "bodyText": "This is just for tests right? I would change access modifier (of the field) to package-private and use that field directly without any getter method like this one.", "author": "grzesiek2010", "createdAt": "2020-07-08T13:30:52Z", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -17,69 +17,89 @@\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n import android.util.DisplayMetrics;\n import android.view.View;\n+import android.widget.RatingBar;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n import org.javarosa.form.api.FormEntryPrompt;\n-import org.odk.collect.android.R;\n import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n+import org.odk.collect.android.utilities.UiUtils;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n \n-    private RatingWidgetAnswerBinding binding;\n+    private RatingBar ratingBar;\n \n-    public RatingWidget(Context context, QuestionDetails questionDetails, RangeQuestion rangeQuestion) {\n+    public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n-        binding.ratingBar.setNumStars(rangeQuestion.getRangeEnd().intValue());\n-        binding.ratingBar.setStepSize(1.0F);\n     }\n \n     @Override\n     protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n-        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        RatingWidgetAnswerBinding binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n         View answerView = binding.getRoot();\n \n-        binding.ratingBar.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> widgetValueChanged());\n-        binding.ratingBar.setEnabled(!prompt.isReadOnly());\n+\n+        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n+        int columns = calculateColumns(48);\n+\n+        int rows = (int) Math.ceil((double) numberOfStars / columns);\n+\n+        if (rows == 1) {\n+            binding.ratingBar.setVisibility(VISIBLE);\n+            this.ratingBar = binding.ratingBar;\n+        } else {\n+            binding.ratingBar.setVisibility(GONE);\n+            columns = calculateColumns(36);\n+            rows = (int) Math.ceil((double) numberOfStars / columns);\n+            if (rows == 1) {\n+                binding.ratingBar2.setVisibility(VISIBLE);\n+                this.ratingBar = binding.ratingBar2;\n+            } else {\n+                binding.ratingBar3.setVisibility(VISIBLE);\n+                this.ratingBar = binding.ratingBar3;\n+            }\n+        }\n+\n+        ratingBar.setNumStars(rangeQuestion.getRangeEnd().intValue());\n+        ratingBar.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> widgetValueChanged());\n+        ratingBar.setEnabled(!prompt.isReadOnly());\n \n         if (prompt.getAnswerText() != null) {\n-            binding.ratingBar.setRating(Integer.parseInt(prompt.getAnswerText()));\n+            ratingBar.setRating(Integer.parseInt(prompt.getAnswerText()));\n         }\n         return answerView;\n     }\n \n     @Override\n     public void setOnLongClickListener(OnLongClickListener l) {\n-        binding.ratingBar.setOnLongClickListener(l);\n+        ratingBar.setOnLongClickListener(l);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return binding.ratingBar.getRating() == 0.0F ? null : new IntegerData((int) binding.ratingBar.getRating());\n+        return ratingBar.getRating() == 0.0F ? null : new IntegerData((int) ratingBar.getRating());\n     }\n \n     @Override\n     public void clearAnswer() {\n-        binding.ratingBar.setRating(0.0F);\n+        ratingBar.setRating(0.0F);\n     }\n \n-    protected RatingWidgetAnswerBinding getBinding() {\n-        return binding;\n+    protected RatingBar getRatingBar() {", "originalCommit": "35dbc239935239af8b99df525fc63209b85c9c37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA1MDUxNw==", "url": "https://github.com/getodk/collect/pull/3937#discussion_r452050517", "bodyText": "Thanks @grzesiek2010! That's a better approach.", "author": "SaumiaSinghal", "createdAt": "2020-07-09T08:27:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU0NTY2NA=="}], "type": "inlineReview", "revised_code": {"commit": "bc853175de6bed2d48928afe6ef6da6cde687eba", "chunk": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 92366b7ca..a60489839 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n\n@@ -17,9 +17,7 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.util.DisplayMetrics;\n import android.view.View;\n-import android.widget.RatingBar;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU0OTIwMA==", "url": "https://github.com/getodk/collect/pull/3937#discussion_r451549200", "bodyText": "Why do we need this extra field at all? Why can't you use binding.ratingBar everywhere?", "author": "grzesiek2010", "createdAt": "2020-07-08T13:36:06Z", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -17,69 +17,89 @@\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n import android.util.DisplayMetrics;\n import android.view.View;\n+import android.widget.RatingBar;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n import org.javarosa.form.api.FormEntryPrompt;\n-import org.odk.collect.android.R;\n import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n+import org.odk.collect.android.utilities.UiUtils;\n \n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n \n-    private RatingWidgetAnswerBinding binding;\n+    private RatingBar ratingBar;", "originalCommit": "35dbc239935239af8b99df525fc63209b85c9c37", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bc853175de6bed2d48928afe6ef6da6cde687eba", "chunk": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 92366b7ca..a60489839 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n\n@@ -17,9 +17,7 @@ package org.odk.collect.android.widgets;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.util.DisplayMetrics;\n import android.view.View;\n-import android.widget.RatingBar;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU1NjUxMg==", "url": "https://github.com/getodk/collect/pull/3937#discussion_r451556512", "bodyText": "Should be returns null not zero right?", "author": "grzesiek2010", "createdAt": "2020-07-08T13:46:31Z", "path": "collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java", "diffHunk": "@@ -2,60 +2,130 @@\n \n import android.view.View;\n \n-import androidx.annotation.NonNull;\n-\n import org.javarosa.core.model.RangeQuestion;\n-import org.javarosa.core.model.data.IntegerData;\n+import org.javarosa.core.model.data.StringData;\n+import org.javarosa.form.api.FormEntryPrompt;\n import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.widgets.base.QuestionWidgetTest;\n+import org.odk.collect.android.listeners.WidgetValueChangedListener;\n+import org.robolectric.RobolectricTestRunner;\n \n import java.math.BigDecimal;\n \n import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.mockValueChangedListener;\n+\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithRangeQuestionAndAnswer;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithReadOnlyAndRangeQuestion;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.widgetTestActivity;\n \n-public class RatingWidgetTest extends QuestionWidgetTest<RatingWidget, IntegerData> {\n+@RunWith(RobolectricTestRunner.class)\n+public class RatingWidgetTest {\n \n-    private final IntegerData answer = new IntegerData(4);\n+    private RangeQuestion rangeQuestion;\n \n     @Before\n-    public void setUp() throws Exception {\n-        super.setUp();\n+    public void setup() {\n+        rangeQuestion = mock(RangeQuestion.class);\n+        when(rangeQuestion.getRangeEnd()).thenReturn(BigDecimal.valueOf(5));\n+    }\n+\n+    @Test\n+    public void ratingBarShowsCorrectNumberOfStars() {\n+        RatingWidget widget = createWidget(promptWithReadOnlyAndRangeQuestion(rangeQuestion));\n+        assertThat(widget.getRatingBar().getNumStars(), equalTo(5));\n+    }\n+\n+    @Test\n+    public void getAnswer_whenPromptAnswerDoesNotHaveAnswer_returnsZero() {", "originalCommit": "25f6dc25ee36f51487563156a3399a4c578b769a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bc853175de6bed2d48928afe6ef6da6cde687eba", "chunk": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java b/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java\nindex 7cde77257..98138381f 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/RatingWidgetTest.java\n\n@@ -22,8 +22,8 @@ import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.mockValueChangedListener;\n \n-import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithRangeQuestionAndAnswer;\n-import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithReadOnlyAndRangeQuestion;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithQuestionAndAnswer;\n+import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.promptWithReadOnlyAndQuestion;\n import static org.odk.collect.android.widgets.support.QuestionWidgetHelpers.widgetTestActivity;\n \n @RunWith(RobolectricTestRunner.class)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU1OTg3Mw==", "url": "https://github.com/getodk/collect/pull/3937#discussion_r451559873", "bodyText": "You can use it in other widgets as well so you should''t use Range word here.", "author": "grzesiek2010", "createdAt": "2020-07-08T13:51:08Z", "path": "collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java", "diffHunk": "@@ -37,4 +38,18 @@ public static FormEntryPrompt promptWithReadOnly() {\n                 .withReadOnly(true)\n                 .build();\n     }\n+\n+    public static FormEntryPrompt promptWithRangeQuestionAndAnswer(QuestionDef questionDef, IAnswerData answer) {", "originalCommit": "25f6dc25ee36f51487563156a3399a4c578b769a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bc853175de6bed2d48928afe6ef6da6cde687eba", "chunk": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java b/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java\nindex 46a01b873..bcf9477dd 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java\n\n@@ -39,14 +39,27 @@ public class QuestionWidgetHelpers {\n                 .build();\n     }\n \n-    public static FormEntryPrompt promptWithRangeQuestionAndAnswer(QuestionDef questionDef, IAnswerData answer) {\n+    public static FormEntryPrompt promptWithReadOnlyAndAnswer(IAnswerData answer) {\n+        return new MockFormEntryPromptBuilder()\n+                .withReadOnly(true)\n+                .withAnswer(answer)\n+                .build();\n+    }\n+\n+    public static FormEntryPrompt promptWithQuestionAndAnswer(QuestionDef questionDef, IAnswerData answer) {\n         return new MockFormEntryPromptBuilder()\n                 .withQuestion(questionDef)\n                 .withAnswer(answer)\n                 .build();\n     }\n \n-    public static FormEntryPrompt promptWithReadOnlyAndRangeQuestion(QuestionDef questionDef) {\n+    public static FormEntryPrompt promptWithAppearance(String appearance) {\n+        return new MockFormEntryPromptBuilder()\n+                .withAppearance(appearance)\n+                .build();\n+    }\n+\n+    public static FormEntryPrompt promptWithReadOnlyAndQuestion(QuestionDef questionDef) {\n         return new MockFormEntryPromptBuilder()\n                 .withReadOnly(true)\n                 .withQuestion(questionDef)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU2MDA5Nw==", "url": "https://github.com/getodk/collect/pull/3937#discussion_r451560097", "bodyText": "Same as above it's not just for range widgets.", "author": "grzesiek2010", "createdAt": "2020-07-08T13:51:26Z", "path": "collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java", "diffHunk": "@@ -37,4 +38,18 @@ public static FormEntryPrompt promptWithReadOnly() {\n                 .withReadOnly(true)\n                 .build();\n     }\n+\n+    public static FormEntryPrompt promptWithRangeQuestionAndAnswer(QuestionDef questionDef, IAnswerData answer) {\n+        return new MockFormEntryPromptBuilder()\n+                .withQuestion(questionDef)\n+                .withAnswer(answer)\n+                .build();\n+    }\n+\n+    public static FormEntryPrompt promptWithReadOnlyAndRangeQuestion(QuestionDef questionDef) {", "originalCommit": "25f6dc25ee36f51487563156a3399a4c578b769a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bc853175de6bed2d48928afe6ef6da6cde687eba", "chunk": "diff --git a/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java b/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java\nindex 46a01b873..bcf9477dd 100644\n--- a/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java\n+++ b/collect_app/src/test/java/org/odk/collect/android/widgets/support/QuestionWidgetHelpers.java\n\n@@ -39,14 +39,27 @@ public class QuestionWidgetHelpers {\n                 .build();\n     }\n \n-    public static FormEntryPrompt promptWithRangeQuestionAndAnswer(QuestionDef questionDef, IAnswerData answer) {\n+    public static FormEntryPrompt promptWithReadOnlyAndAnswer(IAnswerData answer) {\n+        return new MockFormEntryPromptBuilder()\n+                .withReadOnly(true)\n+                .withAnswer(answer)\n+                .build();\n+    }\n+\n+    public static FormEntryPrompt promptWithQuestionAndAnswer(QuestionDef questionDef, IAnswerData answer) {\n         return new MockFormEntryPromptBuilder()\n                 .withQuestion(questionDef)\n                 .withAnswer(answer)\n                 .build();\n     }\n \n-    public static FormEntryPrompt promptWithReadOnlyAndRangeQuestion(QuestionDef questionDef) {\n+    public static FormEntryPrompt promptWithAppearance(String appearance) {\n+        return new MockFormEntryPromptBuilder()\n+                .withAppearance(appearance)\n+                .build();\n+    }\n+\n+    public static FormEntryPrompt promptWithReadOnlyAndQuestion(QuestionDef questionDef) {\n         return new MockFormEntryPromptBuilder()\n                 .withReadOnly(true)\n                 .withQuestion(questionDef)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIxNzg1OQ==", "url": "https://github.com/getodk/collect/pull/3937#discussion_r457217859", "bodyText": "Both can be private.", "author": "grzesiek2010", "createdAt": "2020-07-20T09:28:27Z", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -14,121 +14,95 @@\n \n package org.odk.collect.android.widgets;\n \n+import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n+@SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    public static final int STANDARD_WIDTH_OF_STAR = 48;", "originalCommit": "65d76f7c84fb4b4bf64ba9b8917be98678b50cab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bc853175de6bed2d48928afe6ef6da6cde687eba", "chunk": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 319826c7e..a60489839 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n\n@@ -31,8 +31,8 @@ import org.odk.collect.android.utilities.UiUtils;\n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n-    public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n-    public static final int STANDARD_WIDTH_OF_STAR = 48;\n+    private static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    private static final int STANDARD_WIDTH_OF_STAR = 48;\n \n     RatingWidgetAnswerBinding binding;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIxODU4Mg==", "url": "https://github.com/getodk/collect/pull/3937#discussion_r457218582", "bodyText": "Please factor it out to a separate method, I mean the calculation because you can keep the variable.", "author": "grzesiek2010", "createdAt": "2020-07-20T09:29:21Z", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -14,121 +14,95 @@\n \n package org.odk.collect.android.widgets;\n \n+import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n+@SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    public static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    final GridLayout gridLayout;\n-    Integer answer;\n+    RatingWidgetAnswerBinding binding;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n+    }\n \n-        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n-\n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n-\n-        renderGrid(context, numberOfStars, columns, rows);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n \n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n-            }\n-        }\n+        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n \n-        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n-    }\n+        int maxNumberOfStars = (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)", "originalCommit": "65d76f7c84fb4b4bf64ba9b8917be98678b50cab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bc853175de6bed2d48928afe6ef6da6cde687eba", "chunk": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 319826c7e..a60489839 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n\n@@ -31,8 +31,8 @@ import org.odk.collect.android.utilities.UiUtils;\n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n-    public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n-    public static final int STANDARD_WIDTH_OF_STAR = 48;\n+    private static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    private static final int STANDARD_WIDTH_OF_STAR = 48;\n \n     RatingWidgetAnswerBinding binding;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIyMDcyNw==", "url": "https://github.com/getodk/collect/pull/3937#discussion_r457220727", "bodyText": "I think more readable way of using the ternarry operator in this case would be:\nreturn binding.ratingBar1.getRating() == 0.0F \n                        ? null \n                        : new IntegerData((int) (binding.ratingBar1.getRating() + binding.ratingBar2.getRating()));\n\nso new line for each option.", "author": "grzesiek2010", "createdAt": "2020-07-20T09:31:54Z", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -14,121 +14,95 @@\n \n package org.odk.collect.android.widgets;\n \n+import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n+@SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    public static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    final GridLayout gridLayout;\n-    Integer answer;\n+    RatingWidgetAnswerBinding binding;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n+    }\n \n-        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n-\n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n-\n-        renderGrid(context, numberOfStars, columns, rows);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n \n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n-            }\n-        }\n+        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n \n-        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n-    }\n+        int maxNumberOfStars = (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n \n-    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n-        gridLayout.setColumnCount(columns);\n-        gridLayout.setRowCount(rows);\n+        binding.ratingBar1.setStepSize(1.0F);\n+        binding.ratingBar2.setStepSize(1.0F);\n \n-        for (int column = 0,\n-             starId = 0;\n-             starId < numberOfStars;\n-             column++, starId++) {\n-            column = column == columns ? 0 : column;\n+        if (maxNumberOfStars < numberOfStars) {\n+            binding.ratingBar1.setNumStars(maxNumberOfStars);\n+            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n \n-            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n-            gridLayout.addView(imageButton);\n+            binding.ratingBar2.setVisibility(View.VISIBLE);\n+        } else {\n+            binding.ratingBar1.setNumStars(numberOfStars);\n         }\n-    }\n \n-    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n-        ImageButton imageButton = new ImageButton(context);\n-        imageButton.setImageResource(R.drawable.ic_star_border);\n-        imageButton.setId(total);\n-        imageButton.setPadding(0, 0, 0, 0);\n-        imageButton.setBackground(null);\n-        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n-        imageButton.setOnClickListener(view -> {\n-            int position = view.getId();\n-            for (int i = 0; i < numberOfStars; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n-            }\n-            answer = position + 1;\n+        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(rating);\n+            binding.ratingBar2.setRating(0.0F);\n+            widgetValueChanged();\n+        });\n \n+        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(maxNumberOfStars);\n+            binding.ratingBar2.setRating(rating);\n             widgetValueChanged();\n         });\n-        return imageButton;\n+\n+        binding.ratingBar1.setEnabled(!prompt.isReadOnly());\n+        binding.ratingBar2.setEnabled(!prompt.isReadOnly());\n+\n+        if (prompt.getAnswerText() != null) {\n+            int rating = Integer.parseInt(prompt.getAnswerText());\n+            if (rating > maxNumberOfStars) {\n+                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n+            } else {\n+                binding.ratingBar1.setRating(rating);\n+            }\n+        }\n+        return answerView;\n     }\n \n     @Override\n     public void setOnLongClickListener(OnLongClickListener l) {\n-        for (int i = 0; i < gridLayout.getChildCount(); i++) {\n-            gridLayout.getChildAt(i).setOnLongClickListener(l);\n-        }\n+        binding.ratingBar1.setOnLongClickListener(l);\n+        binding.ratingBar2.setOnLongClickListener(l);\n     }\n \n     @Override\n     public IAnswerData getAnswer() {\n-        return answer != null ? new IntegerData(answer) : null;\n+        return binding.ratingBar1.getRating() == 0.0F ? null :", "originalCommit": "65d76f7c84fb4b4bf64ba9b8917be98678b50cab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bc853175de6bed2d48928afe6ef6da6cde687eba", "chunk": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 319826c7e..a60489839 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n\n@@ -31,8 +31,8 @@ import org.odk.collect.android.utilities.UiUtils;\n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n-    public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n-    public static final int STANDARD_WIDTH_OF_STAR = 48;\n+    private static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    private static final int STANDARD_WIDTH_OF_STAR = 48;\n \n     RatingWidgetAnswerBinding binding;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIyMTkyOQ==", "url": "https://github.com/getodk/collect/pull/3937#discussion_r457221929", "bodyText": "Please fix this one-char parameter name, even simple listener would be better.", "author": "grzesiek2010", "createdAt": "2020-07-20T09:33:19Z", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -14,121 +14,95 @@\n \n package org.odk.collect.android.widgets;\n \n+import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n+@SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    public static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    final GridLayout gridLayout;\n-    Integer answer;\n+    RatingWidgetAnswerBinding binding;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n+    }\n \n-        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n-\n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n-\n-        renderGrid(context, numberOfStars, columns, rows);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n \n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n-            }\n-        }\n+        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n \n-        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n-    }\n+        int maxNumberOfStars = (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n \n-    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n-        gridLayout.setColumnCount(columns);\n-        gridLayout.setRowCount(rows);\n+        binding.ratingBar1.setStepSize(1.0F);\n+        binding.ratingBar2.setStepSize(1.0F);\n \n-        for (int column = 0,\n-             starId = 0;\n-             starId < numberOfStars;\n-             column++, starId++) {\n-            column = column == columns ? 0 : column;\n+        if (maxNumberOfStars < numberOfStars) {\n+            binding.ratingBar1.setNumStars(maxNumberOfStars);\n+            binding.ratingBar2.setNumStars(Math.min(numberOfStars - maxNumberOfStars, maxNumberOfStars));\n \n-            ImageButton imageButton = createImageButton(context, numberOfStars, starId);\n-            gridLayout.addView(imageButton);\n+            binding.ratingBar2.setVisibility(View.VISIBLE);\n+        } else {\n+            binding.ratingBar1.setNumStars(numberOfStars);\n         }\n-    }\n \n-    private ImageButton createImageButton(Context context, int numberOfStars, int total) {\n-        ImageButton imageButton = new ImageButton(context);\n-        imageButton.setImageResource(R.drawable.ic_star_border);\n-        imageButton.setId(total);\n-        imageButton.setPadding(0, 0, 0, 0);\n-        imageButton.setBackground(null);\n-        imageButton.setEnabled(!getFormEntryPrompt().isReadOnly());\n-        imageButton.setOnClickListener(view -> {\n-            int position = view.getId();\n-            for (int i = 0; i < numberOfStars; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(i <= position ? R.drawable.ic_star : R.drawable.ic_star_border);\n-            }\n-            answer = position + 1;\n+        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(rating);\n+            binding.ratingBar2.setRating(0.0F);\n+            widgetValueChanged();\n+        });\n \n+        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n+            binding.ratingBar1.setRating(maxNumberOfStars);\n+            binding.ratingBar2.setRating(rating);\n             widgetValueChanged();\n         });\n-        return imageButton;\n+\n+        binding.ratingBar1.setEnabled(!prompt.isReadOnly());\n+        binding.ratingBar2.setEnabled(!prompt.isReadOnly());\n+\n+        if (prompt.getAnswerText() != null) {\n+            int rating = Integer.parseInt(prompt.getAnswerText());\n+            if (rating > maxNumberOfStars) {\n+                binding.ratingBar2.setRating(rating - maxNumberOfStars);\n+            } else {\n+                binding.ratingBar1.setRating(rating);\n+            }\n+        }\n+        return answerView;\n     }\n \n     @Override\n     public void setOnLongClickListener(OnLongClickListener l) {", "originalCommit": "65d76f7c84fb4b4bf64ba9b8917be98678b50cab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bc853175de6bed2d48928afe6ef6da6cde687eba", "chunk": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 319826c7e..a60489839 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n\n@@ -31,8 +31,8 @@ import org.odk.collect.android.utilities.UiUtils;\n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n-    public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n-    public static final int STANDARD_WIDTH_OF_STAR = 48;\n+    private static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    private static final int STANDARD_WIDTH_OF_STAR = 48;\n \n     RatingWidgetAnswerBinding binding;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIyNDUwOA==", "url": "https://github.com/getodk/collect/pull/3937#discussion_r457224508", "bodyText": "This also could be factored out to a new method (again the calculation, you can keep the variable - as I said below).", "author": "grzesiek2010", "createdAt": "2020-07-20T09:36:39Z", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -14,121 +14,95 @@\n \n package org.odk.collect.android.widgets;\n \n+import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n+@SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    public static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    final GridLayout gridLayout;\n-    Integer answer;\n+    RatingWidgetAnswerBinding binding;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n+    }\n \n-        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n-\n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n-\n-        renderGrid(context, numberOfStars, columns, rows);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n \n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n-            }\n-        }\n+        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();", "originalCommit": "65d76f7c84fb4b4bf64ba9b8917be98678b50cab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bc853175de6bed2d48928afe6ef6da6cde687eba", "chunk": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 319826c7e..a60489839 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n\n@@ -31,8 +31,8 @@ import org.odk.collect.android.utilities.UiUtils;\n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n-    public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n-    public static final int STANDARD_WIDTH_OF_STAR = 48;\n+    private static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    private static final int STANDARD_WIDTH_OF_STAR = 48;\n \n     RatingWidgetAnswerBinding binding;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIyNTYzOA==", "url": "https://github.com/getodk/collect/pull/3937#discussion_r457225638", "bodyText": "You already have `android:stepSize in the layout file so why do you need this here too?", "author": "grzesiek2010", "createdAt": "2020-07-20T09:38:19Z", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -14,121 +14,95 @@\n \n package org.odk.collect.android.widgets;\n \n+import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n-import android.graphics.drawable.Drawable;\n-import android.util.DisplayMetrics;\n-import android.widget.GridLayout;\n-import android.widget.ImageButton;\n+import android.view.View;\n \n import org.javarosa.core.model.RangeQuestion;\n import org.javarosa.core.model.data.IAnswerData;\n import org.javarosa.core.model.data.IntegerData;\n-import org.odk.collect.android.R;\n+import org.javarosa.form.api.FormEntryPrompt;\n+import org.odk.collect.android.databinding.RatingWidgetAnswerBinding;\n import org.odk.collect.android.formentry.questions.QuestionDetails;\n-import org.odk.collect.android.formentry.questions.WidgetViewUtils;\n+import org.odk.collect.android.utilities.ScreenUtils;\n+import org.odk.collect.android.utilities.UiUtils;\n \n+@SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n     public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    public static final int STANDARD_WIDTH_OF_STAR = 48;\n \n-    final GridLayout gridLayout;\n-    Integer answer;\n+    RatingWidgetAnswerBinding binding;\n \n     public RatingWidget(Context context, QuestionDetails questionDetails) {\n         super(context, questionDetails);\n+    }\n \n-        RangeQuestion rangeQuestion = (RangeQuestion) getFormEntryPrompt().getQuestion();\n-        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n-        int columns = calculateColumns();\n-        int rows = (int) Math.ceil((double) numberOfStars / columns);\n-\n-        gridLayout = new GridLayout(context);\n-        gridLayout.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n-\n-        renderGrid(context, numberOfStars, columns, rows);\n+    @Override\n+    protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int answerFontSize) {\n+        binding = RatingWidgetAnswerBinding.inflate(((Activity) context).getLayoutInflater());\n+        View answerView = binding.getRoot();\n \n-        String answerText = questionDetails.getPrompt().getAnswerText();\n-        if (answerText != null) {\n-            answer = Integer.parseInt(answerText);\n-            for (int i = 0; i < answer; i++) {\n-                ImageButton button = (ImageButton) gridLayout.getChildAt(i);\n-                button.setImageResource(R.drawable.ic_star);\n-            }\n-        }\n+        RangeQuestion rangeQuestion = (RangeQuestion) prompt.getQuestion();\n+        int numberOfStars = rangeQuestion.getRangeEnd().intValue();\n \n-        addAnswerView(gridLayout, WidgetViewUtils.getStandardMargin(context));\n-    }\n+        int maxNumberOfStars = (int) ((ScreenUtils.getScreenWidth() - ASSUMED_TOTAL_MARGIN_AROUND_WIDGET)\n+                / UiUtils.convertDpToPixel(STANDARD_WIDTH_OF_STAR, getContext()));\n \n-    private void renderGrid(Context context, int numberOfStars, int columns, int rows) {\n-        gridLayout.setColumnCount(columns);\n-        gridLayout.setRowCount(rows);\n+        binding.ratingBar1.setStepSize(1.0F);\n+        binding.ratingBar2.setStepSize(1.0F);", "originalCommit": "65d76f7c84fb4b4bf64ba9b8917be98678b50cab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI0MDAyMQ==", "url": "https://github.com/getodk/collect/pull/3937#discussion_r457240021", "bodyText": "I'll fix this. Thanks for pointing out", "author": "SaumiaSinghal", "createdAt": "2020-07-20T09:58:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIyNTYzOA=="}], "type": "inlineReview", "revised_code": {"commit": "bc853175de6bed2d48928afe6ef6da6cde687eba", "chunk": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 319826c7e..a60489839 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n\n@@ -31,8 +31,8 @@ import org.odk.collect.android.utilities.UiUtils;\n @SuppressLint(\"ViewConstructor\")\n public class RatingWidget extends QuestionWidget {\n \n-    public static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n-    public static final int STANDARD_WIDTH_OF_STAR = 48;\n+    private static final int ASSUMED_TOTAL_MARGIN_AROUND_WIDGET = 40;\n+    private static final int STANDARD_WIDTH_OF_STAR = 48;\n \n     RatingWidgetAnswerBinding binding;\n \n"}}, {"oid": "bc853175de6bed2d48928afe6ef6da6cde687eba", "url": "https://github.com/getodk/collect/commit/bc853175de6bed2d48928afe6ef6da6cde687eba", "message": "fix stars highlight issue", "committedDate": "2020-07-25T16:25:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTczMjg4Nw==", "url": "https://github.com/getodk/collect/pull/3937#discussion_r461732887", "bodyText": "Could this change have been driven out with a test? Maybe there was one and I missed it!", "author": "seadowg", "createdAt": "2020-07-28T16:59:08Z", "path": "collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java", "diffHunk": "@@ -61,8 +61,8 @@ protected View onCreateAnswerView(Context context, FormEntryPrompt prompt, int a\n         }\n \n         binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(rating);\n             binding.ratingBar2.setRating(0.0F);\n+            binding.ratingBar1.setRating(rating);", "originalCommit": "1fe52b0bc1a72fa30dbe1187c1b5013d58943354", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc1NzQ5OA==", "url": "https://github.com/getodk/collect/pull/3937#discussion_r461757498", "bodyText": "Sorry @seadowg for missing the tests. I added unit tests and confirmed that unit testchangingRating_updatesAnswer_forRatingBarInMultipleLines() fails for the last commit, and passes on the latest one.", "author": "SaumiaSinghal", "createdAt": "2020-07-28T17:40:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTczMjg4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "32ecc694ff96cc73ee9aa268a291feda2fdcb4ba", "chunk": "diff --git a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\nindex 253333554..54cc324a0 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/widgets/RatingWidget.java\n\n@@ -60,21 +66,12 @@ public class RatingWidget extends QuestionWidget {\n             binding.ratingBar1.setMax(numberOfStars);\n         }\n \n-        binding.ratingBar1.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar2.setRating(0.0F);\n-            binding.ratingBar1.setRating(rating);\n-            widgetValueChanged();\n-        });\n-\n-        binding.ratingBar2.setOnRatingBarChangeListener((ratingBar, rating, fromUser) -> {\n-            binding.ratingBar1.setRating(maxNumberOfStars);\n-            binding.ratingBar2.setRating(rating);\n-            widgetValueChanged();\n-        });\n-\n-\n-        binding.ratingBar1.setEnabled(!prompt.isReadOnly());\n-        binding.ratingBar2.setEnabled(!prompt.isReadOnly());\n+        if (prompt.isReadOnly()) {\n+            binding.ratingBar1.setEnabled(false);\n+            binding.ratingBar2.setEnabled(false);\n+        } else {\n+            setUpRatingBar(maxNumberOfStars);\n+        }\n \n         if (prompt.getAnswerText() != null) {\n             int rating = Integer.parseInt(prompt.getAnswerText());\n"}}, {"oid": "32ecc694ff96cc73ee9aa268a291feda2fdcb4ba", "url": "https://github.com/getodk/collect/commit/32ecc694ff96cc73ee9aa268a291feda2fdcb4ba", "message": "add touch listener to change rating in other rating bar simulataneously", "committedDate": "2020-08-25T11:17:27Z", "type": "forcePushed"}, {"oid": "35bd8466ba578161fe9cf4e4f64a1c16bc3ae8f2", "url": "https://github.com/getodk/collect/commit/35bd8466ba578161fe9cf4e4f64a1c16bc3ae8f2", "message": "add unit test", "committedDate": "2020-10-20T17:50:31Z", "type": "commit"}, {"oid": "bfb5a081d5fb247a95cbc928dfa1f47a0da0dc96", "url": "https://github.com/getodk/collect/commit/bfb5a081d5fb247a95cbc928dfa1f47a0da0dc96", "message": "create rating_widget_answer_xml", "committedDate": "2020-10-20T17:50:32Z", "type": "commit"}, {"oid": "f9684f595f504cef4ecd689b6b55deed522c2497", "url": "https://github.com/getodk/collect/commit/f9684f595f504cef4ecd689b6b55deed522c2497", "message": "rework RatingWidget.java", "committedDate": "2020-10-20T17:50:32Z", "type": "commit"}, {"oid": "276359a7b17f1baf59c1626f55a2370db511bde0", "url": "https://github.com/getodk/collect/commit/276359a7b17f1baf59c1626f55a2370db511bde0", "message": "enable view binding", "committedDate": "2020-10-20T17:50:32Z", "type": "commit"}, {"oid": "e44bf3e071acdb477b29a9e15b2ef717f2c7c077", "url": "https://github.com/getodk/collect/commit/e44bf3e071acdb477b29a9e15b2ef717f2c7c077", "message": "add unit tests", "committedDate": "2020-10-20T17:50:32Z", "type": "commit"}, {"oid": "60a9adf69f45a446351ff54804942c8027361081", "url": "https://github.com/getodk/collect/commit/60a9adf69f45a446351ff54804942c8027361081", "message": "add unit tests", "committedDate": "2020-10-20T17:50:32Z", "type": "commit"}, {"oid": "f2942d635cffe3e4b579927d98ec408f07bc9184", "url": "https://github.com/getodk/collect/commit/f2942d635cffe3e4b579927d98ec408f07bc9184", "message": "code refactor", "committedDate": "2020-10-20T17:50:32Z", "type": "commit"}, {"oid": "999eab4a035a695cccfaf5031b62dfd38f1057e1", "url": "https://github.com/getodk/collect/commit/999eab4a035a695cccfaf5031b62dfd38f1057e1", "message": "make unit tests green", "committedDate": "2020-10-20T17:50:32Z", "type": "commit"}, {"oid": "9acb1e1b8c5ce835e60449dc148f8e66a5533ea2", "url": "https://github.com/getodk/collect/commit/9acb1e1b8c5ce835e60449dc148f8e66a5533ea2", "message": "fix rating bar setNumOfStars", "committedDate": "2020-10-20T17:50:32Z", "type": "commit"}, {"oid": "9c6d8e6764b1dfc343c6173b53806cf41d81f1d2", "url": "https://github.com/getodk/collect/commit/9c6d8e6764b1dfc343c6173b53806cf41d81f1d2", "message": "set rating bar style", "committedDate": "2020-10-20T17:51:45Z", "type": "commit"}, {"oid": "a8afa6a13b4739314aa54d735e1735b990a9f56d", "url": "https://github.com/getodk/collect/commit/a8afa6a13b4739314aa54d735e1735b990a9f56d", "message": "fix lint error", "committedDate": "2020-10-20T17:51:51Z", "type": "commit"}, {"oid": "6bb71d8a150b39dc0419cf94839ed2364021fe52", "url": "https://github.com/getodk/collect/commit/6bb71d8a150b39dc0419cf94839ed2364021fe52", "message": "code refactor", "committedDate": "2020-10-20T17:51:51Z", "type": "commit"}, {"oid": "d72cb04dcc833d86acb525f300e4f09eb6f93f35", "url": "https://github.com/getodk/collect/commit/d72cb04dcc833d86acb525f300e4f09eb6f93f35", "message": "refactor gradle file", "committedDate": "2020-10-20T17:51:51Z", "type": "commit"}, {"oid": "32ea188912d6279747bced50dc3ad50790b4bb6f", "url": "https://github.com/getodk/collect/commit/32ea188912d6279747bced50dc3ad50790b4bb6f", "message": "show rating bar in two lines", "committedDate": "2020-10-20T17:51:51Z", "type": "commit"}, {"oid": "d0c053a25ab6fd7a91361d08ce6cc9baecabeaf6", "url": "https://github.com/getodk/collect/commit/d0c053a25ab6fd7a91361d08ce6cc9baecabeaf6", "message": "use two rating bars", "committedDate": "2020-10-20T17:51:51Z", "type": "commit"}, {"oid": "ea7cd1ae54063565223afa7e3aacc6955d5a4606", "url": "https://github.com/getodk/collect/commit/ea7cd1ae54063565223afa7e3aacc6955d5a4606", "message": "use default package private access modifier for RatingWidgetBinding", "committedDate": "2020-10-20T17:51:51Z", "type": "commit"}, {"oid": "6135be68fe81eeffad26d0ed9918e01c203233d2", "url": "https://github.com/getodk/collect/commit/6135be68fe81eeffad26d0ed9918e01c203233d2", "message": "code refactor", "committedDate": "2020-10-20T17:52:15Z", "type": "commit"}, {"oid": "757d09965497b154c4a527709e83d6577c06274f", "url": "https://github.com/getodk/collect/commit/757d09965497b154c4a527709e83d6577c06274f", "message": "fix code style", "committedDate": "2020-10-20T17:52:16Z", "type": "commit"}, {"oid": "ff87f43f08b4475f9cef0e3bcf381900aecc57a0", "url": "https://github.com/getodk/collect/commit/ff87f43f08b4475f9cef0e3bcf381900aecc57a0", "message": "code refactor", "committedDate": "2020-10-20T17:52:16Z", "type": "commit"}, {"oid": "c2712dfe61ed06dcba5267869945a25d187fc76d", "url": "https://github.com/getodk/collect/commit/c2712dfe61ed06dcba5267869945a25d187fc76d", "message": "fix stars highlight issue", "committedDate": "2020-10-20T17:52:16Z", "type": "commit"}, {"oid": "7eae83ed3681b6247ca7d8a282d62dbe752f5548", "url": "https://github.com/getodk/collect/commit/7eae83ed3681b6247ca7d8a282d62dbe752f5548", "message": "fix set rating problem", "committedDate": "2020-10-20T17:52:17Z", "type": "commit"}, {"oid": "6d7242d4df11e02679dd2fd7e025247c1e4a98bb", "url": "https://github.com/getodk/collect/commit/6d7242d4df11e02679dd2fd7e025247c1e4a98bb", "message": "add unit tests", "committedDate": "2020-10-20T17:52:17Z", "type": "commit"}, {"oid": "9e86567f4bf495cc4990027eb0bf0d285f1fe3dc", "url": "https://github.com/getodk/collect/commit/9e86567f4bf495cc4990027eb0bf0d285f1fe3dc", "message": "update unt tests", "committedDate": "2020-10-20T17:52:17Z", "type": "commit"}, {"oid": "d25c7a21f91a1133a91b5ccd005e89d854b85871", "url": "https://github.com/getodk/collect/commit/d25c7a21f91a1133a91b5ccd005e89d854b85871", "message": "fix rating bar showing wrong rating value on Android 7", "committedDate": "2020-10-20T17:52:17Z", "type": "commit"}, {"oid": "97a1c519be2d0d24fcf27da92e7074646e520a37", "url": "https://github.com/getodk/collect/commit/97a1c519be2d0d24fcf27da92e7074646e520a37", "message": "add touch listener to change rating in other rating bar simulataneously", "committedDate": "2020-10-20T17:52:17Z", "type": "commit"}, {"oid": "d8af4f2870583565c95259608984281233564e49", "url": "https://github.com/getodk/collect/commit/d8af4f2870583565c95259608984281233564e49", "message": "update unit tests", "committedDate": "2020-10-20T17:55:06Z", "type": "commit"}, {"oid": "d8af4f2870583565c95259608984281233564e49", "url": "https://github.com/getodk/collect/commit/d8af4f2870583565c95259608984281233564e49", "message": "update unit tests", "committedDate": "2020-10-20T17:55:06Z", "type": "forcePushed"}, {"oid": "8642fb129605b6dbe635ba48116f7b446c3284ad", "url": "https://github.com/getodk/collect/commit/8642fb129605b6dbe635ba48116f7b446c3284ad", "message": "set saveEnabled to false to prevent rating bar from retaining values on screen rotation", "committedDate": "2020-10-23T15:53:29Z", "type": "commit"}]}