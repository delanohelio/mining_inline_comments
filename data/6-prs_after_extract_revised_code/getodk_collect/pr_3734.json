{"pr_number": 3734, "pr_title": "Revise `DialogUtils.showIfNotShowing` helper", "pr_createdAt": "2020-03-23T15:41:58Z", "pr_url": "https://github.com/getodk/collect/pull/3734", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE5Nzc4Nw==", "url": "https://github.com/getodk/collect/pull/3734#discussion_r398197787", "bodyText": "Super small thing but I'd recommend using title rather than name. I think title is very clearly from the title tag but name feels more ambiguous to me.", "author": "lognaturel", "createdAt": "2020-03-25T22:02:44Z", "path": "collect_app/src/main/java/org/odk/collect/android/formentry/audit/IdentityPromptViewModel.java", "diffHunk": "@@ -59,4 +63,8 @@ private void updateRequiresIdentity() {\n     private static boolean userIsValid(String user) {\n         return user != null && !user.isEmpty() && !isBlank(user);\n     }\n+\n+    public String getFormName() {", "originalCommit": "bc0f15bec0a28e093695d473c4f36aaca25c9e1f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ3MjIyMQ==", "url": "https://github.com/getodk/collect/pull/3734#discussion_r398472221", "bodyText": "Seems fair! Will change", "author": "seadowg", "createdAt": "2020-03-26T10:40:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE5Nzc4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "088eefddc6b3ab206a42a4513505d01bd1c79bfe", "chunk": "diff --git a/collect_app/src/main/java/org/odk/collect/android/formentry/audit/IdentityPromptViewModel.java b/collect_app/src/main/java/org/odk/collect/android/formentry/audit/IdentityPromptViewModel.java\nindex d31537a6f..608a99adc 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/formentry/audit/IdentityPromptViewModel.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/formentry/audit/IdentityPromptViewModel.java\n\n@@ -64,7 +64,7 @@ public class IdentityPromptViewModel extends ViewModel {\n         return user != null && !user.isEmpty() && !isBlank(user);\n     }\n \n-    public String getFormName() {\n+    public String getFormTitle() {\n         return formName;\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwNTc5Ng==", "url": "https://github.com/getodk/collect/pull/3734#discussion_r398205796", "bodyText": "This feels more like a spy to me since it's keeping extra state and verifying it rather than holding an expectation of what it's supposed to receive. Not that important but would be good to be somewhat aligned. I'm referring to https://martinfowler.com/articles/mocksArentStubs.html.", "author": "lognaturel", "createdAt": "2020-03-25T22:21:09Z", "path": "collect_app/src/test/java/org/odk/collect/android/preferences/AdminPasswordDialogFragmentTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.odk.collect.android.preferences;\n+\n+import android.app.AlertDialog;\n+\n+import androidx.fragment.app.FragmentActivity;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.injection.config.AppDependencyModule;\n+import org.odk.collect.android.support.RobolectricHelpers;\n+import org.odk.collect.android.support.TestActivityScenario;\n+import org.odk.collect.android.utilities.AdminPasswordProvider;\n+import org.robolectric.annotation.LooperMode;\n+\n+import static android.os.Looper.getMainLooper;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.odk.collect.android.preferences.AdminPasswordDialogFragment.Action.STORAGE_MIGRATION;\n+import static org.robolectric.Shadows.shadowOf;\n+import static org.robolectric.annotation.LooperMode.Mode.PAUSED;\n+\n+@RunWith(AndroidJUnit4.class)\n+@LooperMode(PAUSED)\n+public class AdminPasswordDialogFragmentTest {\n+\n+    @Before\n+    public void setup() {\n+        RobolectricHelpers.overrideAppDependencyModule(new AppDependencyModule() {\n+            @Override\n+            public AdminPasswordProvider providesAdminPasswordProvider() {\n+                return new StubAdminPasswordProvider();\n+            }\n+        });\n+    }\n+\n+    @Test\n+    public void enteringPassword_andClickingOK_callsOnCorrectAdminPasswordWithAction() {\n+        TestActivityScenario<MockAdminPasswordDialogCallback> activityScenario = TestActivityScenario.launch(MockAdminPasswordDialogCallback.class);\n+        activityScenario.onActivity(activity -> {\n+            AdminPasswordDialogFragment fragment = new AdminPasswordDialogFragment();\n+            fragment.setAction(STORAGE_MIGRATION);\n+            fragment.show(activity.getSupportFragmentManager(), \"tag\");\n+            shadowOf(getMainLooper()).idle();\n+\n+            fragment.getInput().setText(\"password\");\n+            ((AlertDialog) fragment.getDialog()).getButton(AlertDialog.BUTTON_POSITIVE).performClick();\n+            shadowOf(getMainLooper()).idle();\n+\n+            assertThat(activity.onCorrectAdminPasswordCalledWith, equalTo(STORAGE_MIGRATION));\n+        });\n+    }\n+\n+    @Test\n+    public void afterRecreating_enteringPassword_andClickingOK_callsOnCorrectAdminPasswordWithAction() {\n+        TestActivityScenario<MockAdminPasswordDialogCallback> activityScenario = TestActivityScenario.launch(MockAdminPasswordDialogCallback.class);\n+        activityScenario.onActivity(activity -> {\n+            AdminPasswordDialogFragment fragment = new AdminPasswordDialogFragment();\n+            fragment.setAction(STORAGE_MIGRATION);\n+            fragment.show(activity.getSupportFragmentManager(), \"tag\");\n+            shadowOf(getMainLooper()).idle();\n+        });\n+\n+        activityScenario.recreate();\n+        activityScenario.onActivity(activity -> {\n+            AdminPasswordDialogFragment fragment = (AdminPasswordDialogFragment) activity.getSupportFragmentManager().findFragmentByTag(\"tag\");\n+\n+            fragment.getInput().setText(\"password\");\n+            ((AlertDialog) fragment.getDialog()).getButton(AlertDialog.BUTTON_POSITIVE).performClick();\n+            shadowOf(getMainLooper()).idle();\n+\n+            assertThat(activity.onCorrectAdminPasswordCalledWith, equalTo(STORAGE_MIGRATION));\n+        });\n+    }\n+\n+    private static class StubAdminPasswordProvider extends AdminPasswordProvider {\n+\n+        StubAdminPasswordProvider() {\n+            super(null);\n+        }\n+\n+        @Override\n+        public boolean isAdminPasswordSet() {\n+            return true;\n+        }\n+\n+        @Override\n+        public String getAdminPassword() {\n+            return \"password\";\n+        }\n+    }\n+\n+    private static class MockAdminPasswordDialogCallback extends FragmentActivity implements AdminPasswordDialogFragment.AdminPasswordDialogCallback  {", "originalCommit": "ff9d1e52d3c0376bf09ab36de3e663f34c757895", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ3NjM0NQ==", "url": "https://github.com/getodk/collect/pull/3734#discussion_r398476345", "bodyText": "Ach my fav article. Hoisted with my own petard! Yeah you're dead on. In my head was using for \"verification\" but you're right that it's doing \"recording\". I'll fix this!", "author": "seadowg", "createdAt": "2020-03-26T10:46:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwNTc5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc2MTk4Nw==", "url": "https://github.com/getodk/collect/pull/3734#discussion_r398761987", "bodyText": "Hoisted with my own petard!\n\nWhat a lovely expression. \ud83d\udca5 @grzesiek2010 do you know this one?!", "author": "lognaturel", "createdAt": "2020-03-26T17:35:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwNTc5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "ce959f0c5a0bb09bfc4f1bc29ab2ae493a025084", "chunk": "diff --git a/collect_app/src/test/java/org/odk/collect/android/preferences/AdminPasswordDialogFragmentTest.java b/collect_app/src/test/java/org/odk/collect/android/preferences/AdminPasswordDialogFragmentTest.java\ndeleted file mode 100644\nindex dd651bcb6..000000000\n--- a/collect_app/src/test/java/org/odk/collect/android/preferences/AdminPasswordDialogFragmentTest.java\n+++ /dev/null\n\n@@ -1,108 +0,0 @@\n-package org.odk.collect.android.preferences;\n-\n-import android.app.AlertDialog;\n-\n-import androidx.fragment.app.FragmentActivity;\n-import androidx.test.ext.junit.runners.AndroidJUnit4;\n-\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.odk.collect.android.injection.config.AppDependencyModule;\n-import org.odk.collect.android.support.RobolectricHelpers;\n-import org.odk.collect.android.support.TestActivityScenario;\n-import org.odk.collect.android.utilities.AdminPasswordProvider;\n-import org.robolectric.annotation.LooperMode;\n-\n-import static android.os.Looper.getMainLooper;\n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.equalTo;\n-import static org.odk.collect.android.preferences.AdminPasswordDialogFragment.Action.STORAGE_MIGRATION;\n-import static org.robolectric.Shadows.shadowOf;\n-import static org.robolectric.annotation.LooperMode.Mode.PAUSED;\n-\n-@RunWith(AndroidJUnit4.class)\n-@LooperMode(PAUSED)\n-public class AdminPasswordDialogFragmentTest {\n-\n-    @Before\n-    public void setup() {\n-        RobolectricHelpers.overrideAppDependencyModule(new AppDependencyModule() {\n-            @Override\n-            public AdminPasswordProvider providesAdminPasswordProvider() {\n-                return new StubAdminPasswordProvider();\n-            }\n-        });\n-    }\n-\n-    @Test\n-    public void enteringPassword_andClickingOK_callsOnCorrectAdminPasswordWithAction() {\n-        TestActivityScenario<MockAdminPasswordDialogCallback> activityScenario = TestActivityScenario.launch(MockAdminPasswordDialogCallback.class);\n-        activityScenario.onActivity(activity -> {\n-            AdminPasswordDialogFragment fragment = new AdminPasswordDialogFragment();\n-            fragment.setAction(STORAGE_MIGRATION);\n-            fragment.show(activity.getSupportFragmentManager(), \"tag\");\n-            shadowOf(getMainLooper()).idle();\n-\n-            fragment.getInput().setText(\"password\");\n-            ((AlertDialog) fragment.getDialog()).getButton(AlertDialog.BUTTON_POSITIVE).performClick();\n-            shadowOf(getMainLooper()).idle();\n-\n-            assertThat(activity.onCorrectAdminPasswordCalledWith, equalTo(STORAGE_MIGRATION));\n-        });\n-    }\n-\n-    @Test\n-    public void afterRecreating_enteringPassword_andClickingOK_callsOnCorrectAdminPasswordWithAction() {\n-        TestActivityScenario<MockAdminPasswordDialogCallback> activityScenario = TestActivityScenario.launch(MockAdminPasswordDialogCallback.class);\n-        activityScenario.onActivity(activity -> {\n-            AdminPasswordDialogFragment fragment = new AdminPasswordDialogFragment();\n-            fragment.setAction(STORAGE_MIGRATION);\n-            fragment.show(activity.getSupportFragmentManager(), \"tag\");\n-            shadowOf(getMainLooper()).idle();\n-        });\n-\n-        activityScenario.recreate();\n-        activityScenario.onActivity(activity -> {\n-            AdminPasswordDialogFragment fragment = (AdminPasswordDialogFragment) activity.getSupportFragmentManager().findFragmentByTag(\"tag\");\n-\n-            fragment.getInput().setText(\"password\");\n-            ((AlertDialog) fragment.getDialog()).getButton(AlertDialog.BUTTON_POSITIVE).performClick();\n-            shadowOf(getMainLooper()).idle();\n-\n-            assertThat(activity.onCorrectAdminPasswordCalledWith, equalTo(STORAGE_MIGRATION));\n-        });\n-    }\n-\n-    private static class StubAdminPasswordProvider extends AdminPasswordProvider {\n-\n-        StubAdminPasswordProvider() {\n-            super(null);\n-        }\n-\n-        @Override\n-        public boolean isAdminPasswordSet() {\n-            return true;\n-        }\n-\n-        @Override\n-        public String getAdminPassword() {\n-            return \"password\";\n-        }\n-    }\n-\n-    private static class MockAdminPasswordDialogCallback extends FragmentActivity implements AdminPasswordDialogFragment.AdminPasswordDialogCallback  {\n-\n-        private AdminPasswordDialogFragment.Action onCorrectAdminPasswordCalledWith;\n-\n-        @Override\n-        public void onCorrectAdminPassword(AdminPasswordDialogFragment.Action action) {\n-            onCorrectAdminPasswordCalledWith = action;\n-        }\n-\n-        @Override\n-        public void onIncorrectAdminPassword() {\n-\n-        }\n-    }\n-}\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwODg3Mw==", "url": "https://github.com/getodk/collect/pull/3734#discussion_r398208873", "bodyText": "I can't wrap my brain around why you can call a private MockAdminPasswordDialogCallback field here?", "author": "lognaturel", "createdAt": "2020-03-25T22:28:25Z", "path": "collect_app/src/test/java/org/odk/collect/android/preferences/AdminPasswordDialogFragmentTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.odk.collect.android.preferences;\n+\n+import android.app.AlertDialog;\n+\n+import androidx.fragment.app.FragmentActivity;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.injection.config.AppDependencyModule;\n+import org.odk.collect.android.support.RobolectricHelpers;\n+import org.odk.collect.android.support.TestActivityScenario;\n+import org.odk.collect.android.utilities.AdminPasswordProvider;\n+import org.robolectric.annotation.LooperMode;\n+\n+import static android.os.Looper.getMainLooper;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.odk.collect.android.preferences.AdminPasswordDialogFragment.Action.STORAGE_MIGRATION;\n+import static org.robolectric.Shadows.shadowOf;\n+import static org.robolectric.annotation.LooperMode.Mode.PAUSED;\n+\n+@RunWith(AndroidJUnit4.class)\n+@LooperMode(PAUSED)\n+public class AdminPasswordDialogFragmentTest {\n+\n+    @Before\n+    public void setup() {\n+        RobolectricHelpers.overrideAppDependencyModule(new AppDependencyModule() {\n+            @Override\n+            public AdminPasswordProvider providesAdminPasswordProvider() {\n+                return new StubAdminPasswordProvider();\n+            }\n+        });\n+    }\n+\n+    @Test\n+    public void enteringPassword_andClickingOK_callsOnCorrectAdminPasswordWithAction() {\n+        TestActivityScenario<MockAdminPasswordDialogCallback> activityScenario = TestActivityScenario.launch(MockAdminPasswordDialogCallback.class);\n+        activityScenario.onActivity(activity -> {\n+            AdminPasswordDialogFragment fragment = new AdminPasswordDialogFragment();\n+            fragment.setAction(STORAGE_MIGRATION);\n+            fragment.show(activity.getSupportFragmentManager(), \"tag\");\n+            shadowOf(getMainLooper()).idle();\n+\n+            fragment.getInput().setText(\"password\");\n+            ((AlertDialog) fragment.getDialog()).getButton(AlertDialog.BUTTON_POSITIVE).performClick();\n+            shadowOf(getMainLooper()).idle();\n+\n+            assertThat(activity.onCorrectAdminPasswordCalledWith, equalTo(STORAGE_MIGRATION));\n+        });\n+    }\n+\n+    @Test\n+    public void afterRecreating_enteringPassword_andClickingOK_callsOnCorrectAdminPasswordWithAction() {\n+        TestActivityScenario<MockAdminPasswordDialogCallback> activityScenario = TestActivityScenario.launch(MockAdminPasswordDialogCallback.class);\n+        activityScenario.onActivity(activity -> {\n+            AdminPasswordDialogFragment fragment = new AdminPasswordDialogFragment();\n+            fragment.setAction(STORAGE_MIGRATION);\n+            fragment.show(activity.getSupportFragmentManager(), \"tag\");\n+            shadowOf(getMainLooper()).idle();\n+        });\n+\n+        activityScenario.recreate();\n+        activityScenario.onActivity(activity -> {\n+            AdminPasswordDialogFragment fragment = (AdminPasswordDialogFragment) activity.getSupportFragmentManager().findFragmentByTag(\"tag\");\n+\n+            fragment.getInput().setText(\"password\");\n+            ((AlertDialog) fragment.getDialog()).getButton(AlertDialog.BUTTON_POSITIVE).performClick();\n+            shadowOf(getMainLooper()).idle();\n+\n+            assertThat(activity.onCorrectAdminPasswordCalledWith, equalTo(STORAGE_MIGRATION));", "originalCommit": "ff9d1e52d3c0376bf09ab36de3e663f34c757895", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ4MTQ3OA==", "url": "https://github.com/getodk/collect/pull/3734#discussion_r398481478", "bodyText": "Because in onAttach we have:\nif (context instanceof AdminPasswordDialogCallback) {\n    callback = (AdminPasswordDialogCallback) context;\n}\nThe dialog assumes expects its host activity to implement the listener. We could decouple this but I didn't want to get into that. I'm not a fan of the pattern as it's awkward for testing (which is always a sign that the design is a little awkward) but it is actually how the Android docs suggest this should be done. Using an actual listener object would be a problem as it could cause weirdness with Fragment recreation.", "author": "seadowg", "createdAt": "2020-03-26T10:55:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIwODg3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "ce959f0c5a0bb09bfc4f1bc29ab2ae493a025084", "chunk": "diff --git a/collect_app/src/test/java/org/odk/collect/android/preferences/AdminPasswordDialogFragmentTest.java b/collect_app/src/test/java/org/odk/collect/android/preferences/AdminPasswordDialogFragmentTest.java\ndeleted file mode 100644\nindex dd651bcb6..000000000\n--- a/collect_app/src/test/java/org/odk/collect/android/preferences/AdminPasswordDialogFragmentTest.java\n+++ /dev/null\n\n@@ -1,108 +0,0 @@\n-package org.odk.collect.android.preferences;\n-\n-import android.app.AlertDialog;\n-\n-import androidx.fragment.app.FragmentActivity;\n-import androidx.test.ext.junit.runners.AndroidJUnit4;\n-\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.odk.collect.android.injection.config.AppDependencyModule;\n-import org.odk.collect.android.support.RobolectricHelpers;\n-import org.odk.collect.android.support.TestActivityScenario;\n-import org.odk.collect.android.utilities.AdminPasswordProvider;\n-import org.robolectric.annotation.LooperMode;\n-\n-import static android.os.Looper.getMainLooper;\n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.equalTo;\n-import static org.odk.collect.android.preferences.AdminPasswordDialogFragment.Action.STORAGE_MIGRATION;\n-import static org.robolectric.Shadows.shadowOf;\n-import static org.robolectric.annotation.LooperMode.Mode.PAUSED;\n-\n-@RunWith(AndroidJUnit4.class)\n-@LooperMode(PAUSED)\n-public class AdminPasswordDialogFragmentTest {\n-\n-    @Before\n-    public void setup() {\n-        RobolectricHelpers.overrideAppDependencyModule(new AppDependencyModule() {\n-            @Override\n-            public AdminPasswordProvider providesAdminPasswordProvider() {\n-                return new StubAdminPasswordProvider();\n-            }\n-        });\n-    }\n-\n-    @Test\n-    public void enteringPassword_andClickingOK_callsOnCorrectAdminPasswordWithAction() {\n-        TestActivityScenario<MockAdminPasswordDialogCallback> activityScenario = TestActivityScenario.launch(MockAdminPasswordDialogCallback.class);\n-        activityScenario.onActivity(activity -> {\n-            AdminPasswordDialogFragment fragment = new AdminPasswordDialogFragment();\n-            fragment.setAction(STORAGE_MIGRATION);\n-            fragment.show(activity.getSupportFragmentManager(), \"tag\");\n-            shadowOf(getMainLooper()).idle();\n-\n-            fragment.getInput().setText(\"password\");\n-            ((AlertDialog) fragment.getDialog()).getButton(AlertDialog.BUTTON_POSITIVE).performClick();\n-            shadowOf(getMainLooper()).idle();\n-\n-            assertThat(activity.onCorrectAdminPasswordCalledWith, equalTo(STORAGE_MIGRATION));\n-        });\n-    }\n-\n-    @Test\n-    public void afterRecreating_enteringPassword_andClickingOK_callsOnCorrectAdminPasswordWithAction() {\n-        TestActivityScenario<MockAdminPasswordDialogCallback> activityScenario = TestActivityScenario.launch(MockAdminPasswordDialogCallback.class);\n-        activityScenario.onActivity(activity -> {\n-            AdminPasswordDialogFragment fragment = new AdminPasswordDialogFragment();\n-            fragment.setAction(STORAGE_MIGRATION);\n-            fragment.show(activity.getSupportFragmentManager(), \"tag\");\n-            shadowOf(getMainLooper()).idle();\n-        });\n-\n-        activityScenario.recreate();\n-        activityScenario.onActivity(activity -> {\n-            AdminPasswordDialogFragment fragment = (AdminPasswordDialogFragment) activity.getSupportFragmentManager().findFragmentByTag(\"tag\");\n-\n-            fragment.getInput().setText(\"password\");\n-            ((AlertDialog) fragment.getDialog()).getButton(AlertDialog.BUTTON_POSITIVE).performClick();\n-            shadowOf(getMainLooper()).idle();\n-\n-            assertThat(activity.onCorrectAdminPasswordCalledWith, equalTo(STORAGE_MIGRATION));\n-        });\n-    }\n-\n-    private static class StubAdminPasswordProvider extends AdminPasswordProvider {\n-\n-        StubAdminPasswordProvider() {\n-            super(null);\n-        }\n-\n-        @Override\n-        public boolean isAdminPasswordSet() {\n-            return true;\n-        }\n-\n-        @Override\n-        public String getAdminPassword() {\n-            return \"password\";\n-        }\n-    }\n-\n-    private static class MockAdminPasswordDialogCallback extends FragmentActivity implements AdminPasswordDialogFragment.AdminPasswordDialogCallback  {\n-\n-        private AdminPasswordDialogFragment.Action onCorrectAdminPasswordCalledWith;\n-\n-        @Override\n-        public void onCorrectAdminPassword(AdminPasswordDialogFragment.Action action) {\n-            onCorrectAdminPasswordCalledWith = action;\n-        }\n-\n-        @Override\n-        public void onIncorrectAdminPassword() {\n-\n-        }\n-    }\n-}\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIxNDU3OQ==", "url": "https://github.com/getodk/collect/pull/3734#discussion_r398214579", "bodyText": "While you're here, would you consider testing that the correct callback method is called if the password is incorrect?", "author": "lognaturel", "createdAt": "2020-03-25T22:41:04Z", "path": "collect_app/src/test/java/org/odk/collect/android/preferences/AdminPasswordDialogFragmentTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package org.odk.collect.android.preferences;\n+\n+import android.app.AlertDialog;\n+import android.os.Bundle;\n+\n+import androidx.fragment.app.FragmentActivity;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.odk.collect.android.injection.config.AppDependencyModule;\n+import org.odk.collect.android.support.RobolectricHelpers;\n+import org.odk.collect.android.support.TestActivityScenario;\n+import org.odk.collect.android.utilities.AdminPasswordProvider;\n+import org.robolectric.annotation.LooperMode;\n+\n+import static android.os.Looper.getMainLooper;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.odk.collect.android.preferences.AdminPasswordDialogFragment.ARG_ACTION;\n+import static org.odk.collect.android.preferences.AdminPasswordDialogFragment.Action.STORAGE_MIGRATION;\n+import static org.robolectric.Shadows.shadowOf;\n+import static org.robolectric.annotation.LooperMode.Mode.PAUSED;\n+\n+@RunWith(AndroidJUnit4.class)\n+@LooperMode(PAUSED)\n+public class AdminPasswordDialogFragmentTest {\n+\n+    @Before\n+    public void setup() {\n+        RobolectricHelpers.overrideAppDependencyModule(new AppDependencyModule() {\n+            @Override\n+            public AdminPasswordProvider providesAdminPasswordProvider() {\n+                return new StubAdminPasswordProvider();\n+            }\n+        });\n+    }\n+\n+    @Test\n+    public void enteringPassword_andClickingOK_callsOnCorrectAdminPasswordWithAction() {\n+        TestActivityScenario<MockAdminPasswordDialogCallback> activityScenario = TestActivityScenario.launch(MockAdminPasswordDialogCallback.class);\n+        activityScenario.onActivity(activity -> {\n+            AdminPasswordDialogFragment fragment = createFragment();\n+            fragment.show(activity.getSupportFragmentManager(), \"tag\");\n+            shadowOf(getMainLooper()).idle();\n+\n+            fragment.getInput().setText(\"password\");\n+            ((AlertDialog) fragment.getDialog()).getButton(AlertDialog.BUTTON_POSITIVE).performClick();\n+            shadowOf(getMainLooper()).idle();\n+\n+            assertThat(activity.onCorrectAdminPasswordCalledWith, equalTo(STORAGE_MIGRATION));\n+        });\n+    }\n+\n+    @Test\n+    public void afterRecreating_enteringPassword_andClickingOK_callsOnCorrectAdminPasswordWithAction() {\n+        TestActivityScenario<MockAdminPasswordDialogCallback> activityScenario = TestActivityScenario.launch(MockAdminPasswordDialogCallback.class);\n+        activityScenario.onActivity(activity -> {\n+            AdminPasswordDialogFragment fragment = createFragment();\n+            fragment.show(activity.getSupportFragmentManager(), \"tag\");\n+            shadowOf(getMainLooper()).idle();\n+        });\n+\n+        activityScenario.recreate();\n+        activityScenario.onActivity(activity -> {\n+            AdminPasswordDialogFragment fragment = (AdminPasswordDialogFragment) activity.getSupportFragmentManager().findFragmentByTag(\"tag\");\n+\n+            fragment.getInput().setText(\"password\");\n+            ((AlertDialog) fragment.getDialog()).getButton(AlertDialog.BUTTON_POSITIVE).performClick();\n+            shadowOf(getMainLooper()).idle();\n+\n+            assertThat(activity.onCorrectAdminPasswordCalledWith, equalTo(STORAGE_MIGRATION));\n+        });\n+    }\n+", "originalCommit": "b9477ff1122b0fd1bbe837a329e76ecddd9a9771", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ4MTYzNQ==", "url": "https://github.com/getodk/collect/pull/3734#discussion_r398481635", "bodyText": "Yeah sounds good", "author": "seadowg", "createdAt": "2020-03-26T10:56:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIxNDU3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "ce959f0c5a0bb09bfc4f1bc29ab2ae493a025084", "chunk": "diff --git a/collect_app/src/test/java/org/odk/collect/android/preferences/AdminPasswordDialogFragmentTest.java b/collect_app/src/test/java/org/odk/collect/android/preferences/AdminPasswordDialogFragmentTest.java\ndeleted file mode 100644\nindex 0e2b3f412..000000000\n--- a/collect_app/src/test/java/org/odk/collect/android/preferences/AdminPasswordDialogFragmentTest.java\n+++ /dev/null\n\n@@ -1,116 +0,0 @@\n-package org.odk.collect.android.preferences;\n-\n-import android.app.AlertDialog;\n-import android.os.Bundle;\n-\n-import androidx.fragment.app.FragmentActivity;\n-import androidx.test.ext.junit.runners.AndroidJUnit4;\n-\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.odk.collect.android.injection.config.AppDependencyModule;\n-import org.odk.collect.android.support.RobolectricHelpers;\n-import org.odk.collect.android.support.TestActivityScenario;\n-import org.odk.collect.android.utilities.AdminPasswordProvider;\n-import org.robolectric.annotation.LooperMode;\n-\n-import static android.os.Looper.getMainLooper;\n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.equalTo;\n-import static org.odk.collect.android.preferences.AdminPasswordDialogFragment.ARG_ACTION;\n-import static org.odk.collect.android.preferences.AdminPasswordDialogFragment.Action.STORAGE_MIGRATION;\n-import static org.robolectric.Shadows.shadowOf;\n-import static org.robolectric.annotation.LooperMode.Mode.PAUSED;\n-\n-@RunWith(AndroidJUnit4.class)\n-@LooperMode(PAUSED)\n-public class AdminPasswordDialogFragmentTest {\n-\n-    @Before\n-    public void setup() {\n-        RobolectricHelpers.overrideAppDependencyModule(new AppDependencyModule() {\n-            @Override\n-            public AdminPasswordProvider providesAdminPasswordProvider() {\n-                return new StubAdminPasswordProvider();\n-            }\n-        });\n-    }\n-\n-    @Test\n-    public void enteringPassword_andClickingOK_callsOnCorrectAdminPasswordWithAction() {\n-        TestActivityScenario<MockAdminPasswordDialogCallback> activityScenario = TestActivityScenario.launch(MockAdminPasswordDialogCallback.class);\n-        activityScenario.onActivity(activity -> {\n-            AdminPasswordDialogFragment fragment = createFragment();\n-            fragment.show(activity.getSupportFragmentManager(), \"tag\");\n-            shadowOf(getMainLooper()).idle();\n-\n-            fragment.getInput().setText(\"password\");\n-            ((AlertDialog) fragment.getDialog()).getButton(AlertDialog.BUTTON_POSITIVE).performClick();\n-            shadowOf(getMainLooper()).idle();\n-\n-            assertThat(activity.onCorrectAdminPasswordCalledWith, equalTo(STORAGE_MIGRATION));\n-        });\n-    }\n-\n-    @Test\n-    public void afterRecreating_enteringPassword_andClickingOK_callsOnCorrectAdminPasswordWithAction() {\n-        TestActivityScenario<MockAdminPasswordDialogCallback> activityScenario = TestActivityScenario.launch(MockAdminPasswordDialogCallback.class);\n-        activityScenario.onActivity(activity -> {\n-            AdminPasswordDialogFragment fragment = createFragment();\n-            fragment.show(activity.getSupportFragmentManager(), \"tag\");\n-            shadowOf(getMainLooper()).idle();\n-        });\n-\n-        activityScenario.recreate();\n-        activityScenario.onActivity(activity -> {\n-            AdminPasswordDialogFragment fragment = (AdminPasswordDialogFragment) activity.getSupportFragmentManager().findFragmentByTag(\"tag\");\n-\n-            fragment.getInput().setText(\"password\");\n-            ((AlertDialog) fragment.getDialog()).getButton(AlertDialog.BUTTON_POSITIVE).performClick();\n-            shadowOf(getMainLooper()).idle();\n-\n-            assertThat(activity.onCorrectAdminPasswordCalledWith, equalTo(STORAGE_MIGRATION));\n-        });\n-    }\n-\n-    private AdminPasswordDialogFragment createFragment() {\n-        AdminPasswordDialogFragment fragment = new AdminPasswordDialogFragment();\n-        Bundle args = new Bundle();\n-        args.putSerializable(ARG_ACTION, STORAGE_MIGRATION);\n-        fragment.setArguments(args);\n-        return fragment;\n-    }\n-\n-    private static class StubAdminPasswordProvider extends AdminPasswordProvider {\n-\n-        StubAdminPasswordProvider() {\n-            super(null);\n-        }\n-\n-        @Override\n-        public boolean isAdminPasswordSet() {\n-            return true;\n-        }\n-\n-        @Override\n-        public String getAdminPassword() {\n-            return \"password\";\n-        }\n-    }\n-\n-    private static class MockAdminPasswordDialogCallback extends FragmentActivity implements AdminPasswordDialogFragment.AdminPasswordDialogCallback  {\n-\n-        private AdminPasswordDialogFragment.Action onCorrectAdminPasswordCalledWith;\n-\n-        @Override\n-        public void onCorrectAdminPassword(AdminPasswordDialogFragment.Action action) {\n-            onCorrectAdminPasswordCalledWith = action;\n-        }\n-\n-        @Override\n-        public void onIncorrectAdminPassword() {\n-\n-        }\n-    }\n-}\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIxNTI1Nw==", "url": "https://github.com/getodk/collect/pull/3734#discussion_r398215257", "bodyText": "How about adding the notice from the PR here? (\"as much as possible we should be using arguments (for static data the dialog needs), Dagger (for dependencies) or ViewModel (for non static data) to get things into fragments so as to avoid crashes or weirdness when they are recreated.\")", "author": "lognaturel", "createdAt": "2020-03-25T22:42:46Z", "path": "collect_app/src/main/java/org/odk/collect/android/utilities/DialogUtils.java", "diffHunk": "@@ -154,13 +154,18 @@ public static Dialog createErrorDialog(@NonNull Activity activity, String errorM\n         return alertDialog;\n     }\n \n-    public static <T extends DialogFragment> T showIfNotShowing(Class<T> dialogClass, FragmentManager fragmentManager) {\n-        return showIfNotShowing(dialogClass, null, fragmentManager);\n+    @Nullable\n+    public static <T extends DialogFragment> T getDialog(Class<T> dialogClass, FragmentManager fragmentManager) {", "originalCommit": "b9477ff1122b0fd1bbe837a329e76ecddd9a9771", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ4MTkwNg==", "url": "https://github.com/getodk/collect/pull/3734#discussion_r398481906", "bodyText": "Ah I actually meant to do this but it slipped my mind. Will do!", "author": "seadowg", "createdAt": "2020-03-26T10:56:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIxNTI1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "ce959f0c5a0bb09bfc4f1bc29ab2ae493a025084", "chunk": "diff --git a/collect_app/src/main/java/org/odk/collect/android/utilities/DialogUtils.java b/collect_app/src/main/java/org/odk/collect/android/utilities/DialogUtils.java\nindex 60c3ea052..98f97c8b9 100644\n--- a/collect_app/src/main/java/org/odk/collect/android/utilities/DialogUtils.java\n+++ b/collect_app/src/main/java/org/odk/collect/android/utilities/DialogUtils.java\n\n@@ -154,31 +152,53 @@ public final class DialogUtils {\n         return alertDialog;\n     }\n \n-    @Nullable\n-    public static <T extends DialogFragment> T getDialog(Class<T> dialogClass, FragmentManager fragmentManager) {\n-        return (T) fragmentManager.findFragmentByTag(dialogClass.getName());\n-    }\n+    public static <T extends DialogFragment> T showIfNotShowing(Class<T> dialogClass, FragmentManager fragmentManager) {\n+        if (fragmentManager.isStateSaved()) {\n+            return createNewInstance(dialogClass);\n+        }\n+\n+        String tag = dialogClass.getName();\n+        T existingDialog = (T) fragmentManager.findFragmentByTag(tag);\n+\n+        if (existingDialog == null) {\n+            T newDialog = createNewInstance(dialogClass);\n+            newDialog.show(fragmentManager.beginTransaction(), tag);\n+\n+            // We need to execute this transaction. Otherwise a follow up call to this method\n+            // could happen before the Fragment exists in the Fragment Manager and so the\n+            // call to findFragmentByTag would return null and result in second dialog being show.\n+            fragmentManager.executePendingTransactions();\n \n-    public static <T extends DialogFragment> void showIfNotShowing(Class<T> dialogClass, FragmentManager fragmentManager) {\n-        showIfNotShowing(dialogClass, null, fragmentManager);\n+            return newDialog;\n+        } else {\n+            return existingDialog;\n+        }\n     }\n \n-    public static <T extends DialogFragment> void showIfNotShowing(Class<T> dialogClass, @Nullable Bundle args, FragmentManager fragmentManager) {\n+    /**\n+     * Use {@link #showIfNotShowing(Class, FragmentManager)} instead to avoid creating extra instances\n+     * and creating confusion around which instance is actually visible\n+     */\n+    @Deprecated\n+    public static <T extends DialogFragment> T showIfNotShowing(T newDialog, FragmentManager fragmentManager) {\n         if (fragmentManager.isStateSaved()) {\n-            return;\n+            return newDialog;\n         }\n \n-        String tag = dialogClass.getName();\n+        String tag = newDialog.getClass().getName();\n         T existingDialog = (T) fragmentManager.findFragmentByTag(tag);\n \n         if (existingDialog == null) {\n-            T newDialog = createNewInstance(dialogClass, args);\n             newDialog.show(fragmentManager.beginTransaction(), tag);\n \n             // We need to execute this transaction. Otherwise a follow up call to this method\n             // could happen before the Fragment exists in the Fragment Manager and so the\n             // call to findFragmentByTag would return null and result in second dialog being show.\n             fragmentManager.executePendingTransactions();\n+\n+            return newDialog;\n+        } else {\n+            return existingDialog;\n         }\n     }\n \n"}}, {"oid": "ce959f0c5a0bb09bfc4f1bc29ab2ae493a025084", "url": "https://github.com/getodk/collect/commit/ce959f0c5a0bb09bfc4f1bc29ab2ae493a025084", "message": "Remove deprecated dialog helper from FormEntryActivity", "committedDate": "2020-04-02T16:17:41Z", "type": "commit"}, {"oid": "a16ba70f36a3c34f8dd02ebf71ef1994c7204974", "url": "https://github.com/getodk/collect/commit/a16ba70f36a3c34f8dd02ebf71ef1994c7204974", "message": "Add idling resource to prevent flakes in migration test", "committedDate": "2020-04-02T16:17:41Z", "type": "commit"}, {"oid": "a44bc4c5f18f33873a32eff5e1bd9d81887ca75b", "url": "https://github.com/getodk/collect/commit/a44bc4c5f18f33873a32eff5e1bd9d81887ca75b", "message": "Allow AdminPasswordDialogFragment to be rotated", "committedDate": "2020-04-02T16:20:34Z", "type": "commit"}, {"oid": "04939493a39ae6ed234dfb2b33b08b1906c67643", "url": "https://github.com/getodk/collect/commit/04939493a39ae6ed234dfb2b33b08b1906c67643", "message": "Remove old showIfNotShowing", "committedDate": "2020-04-02T16:20:36Z", "type": "commit"}, {"oid": "c9cde2680f5789feab96f3aed660d14206e79a18", "url": "https://github.com/getodk/collect/commit/c9cde2680f5789feab96f3aed660d14206e79a18", "message": "Stop returning dialog from show helper", "committedDate": "2020-04-02T16:20:36Z", "type": "commit"}, {"oid": "088eefddc6b3ab206a42a4513505d01bd1c79bfe", "url": "https://github.com/getodk/collect/commit/088eefddc6b3ab206a42a4513505d01bd1c79bfe", "message": "Rename method", "committedDate": "2020-04-02T16:20:36Z", "type": "commit"}, {"oid": "8e4b09b866a0220d9b6b3bb42a36a6b68172cbed", "url": "https://github.com/getodk/collect/commit/8e4b09b866a0220d9b6b3bb42a36a6b68172cbed", "message": "Correct name of test double", "committedDate": "2020-04-02T16:20:36Z", "type": "commit"}, {"oid": "1da34129fa85702b97506ef0440b45db21b41d14", "url": "https://github.com/getodk/collect/commit/1da34129fa85702b97506ef0440b45db21b41d14", "message": "Test incorrect password path for AdminPasswordDialogFragment", "committedDate": "2020-04-02T16:20:36Z", "type": "commit"}, {"oid": "59f2995beb443b20d303caef79a28bede83d06de", "url": "https://github.com/getodk/collect/commit/59f2995beb443b20d303caef79a28bede83d06de", "message": "Add note to getDialog", "committedDate": "2020-04-02T16:20:36Z", "type": "commit"}, {"oid": "59f2995beb443b20d303caef79a28bede83d06de", "url": "https://github.com/getodk/collect/commit/59f2995beb443b20d303caef79a28bede83d06de", "message": "Add note to getDialog", "committedDate": "2020-04-02T16:20:36Z", "type": "forcePushed"}]}