{"pr_number": 2466, "pr_title": "Firestore - automatic id generation", "pr_createdAt": "2020-07-15T22:03:11Z", "pr_url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2466", "timeline": [{"oid": "ff44857ed60975d61fd3fb5e34141649e1255e65", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/ff44857ed60975d61fd3fb5e34141649e1255e65", "message": "automatic id generation", "committedDate": "2020-07-15T21:56:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQxNDA1NA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2466#discussion_r455414054", "bodyText": "Would be nice to add a javadoc for this one describing purpose of method something like \"Creates a single (non-batched) document in Firestore; ID generation is only available for non-batched created documents.\"", "author": "dzou", "createdAt": "2020-07-15T23:04:09Z", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "diffHunk": "@@ -189,6 +193,26 @@ public boolean isUsingStreamTokens() {\n \t\treturn saveAll(Mono.just(entity)).next();\n \t}\n \n+\tprivate <T> Flux<T> create(Publisher<T> entities) {\n+\t\treturn Flux.from(entities).flatMap(this::create);\n+\t}\n+\n+\tprivate <T> Mono<T> create(T entity) {", "originalCommit": "ff44857ed60975d61fd3fb5e34141649e1255e65", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "04232836872df71c7462d73e9b9d84bf9eead6ea", "chunk": "diff --git a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java\nindex eb81cc5e..488b74fd 100644\n--- a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java\n+++ b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java\n\n@@ -193,26 +200,6 @@ public class FirestoreTemplate implements FirestoreReactiveOperations {\n \t\treturn saveAll(Mono.just(entity)).next();\n \t}\n \n-\tprivate <T> Flux<T> create(Publisher<T> entities) {\n-\t\treturn Flux.from(entities).flatMap(this::create);\n-\t}\n-\n-\tprivate <T> Mono<T> create(T entity) {\n-\t\treturn ObservableReactiveUtil\n-\t\t\t\t\t\t.<Document>unaryCall(obs -> {\n-\t\t\t\t\t\t\tFirestorePersistentEntity<?> persistentEntity =\n-\t\t\t\t\t\t\t\t\t\t\tthis.mappingContext.getPersistentEntity(entity.getClass());\n-\t\t\t\t\t\t\tCreateDocumentRequest documentRequest = CreateDocumentRequest.newBuilder()\n-\t\t\t\t\t\t\t\t\t\t\t.setParent(this.parent)\n-\t\t\t\t\t\t\t\t\t\t\t.setCollectionId(persistentEntity.collectionName())\n-\t\t\t\t\t\t\t\t\t\t\t.setDocument(getClassMapper()\n-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.entityToDocument(entity, null))\n-\t\t\t\t\t\t\t\t\t\t\t.build();\n-\t\t\t\t\t\t\tthis.firestore.createDocument(documentRequest, obs);\n-\t\t\t\t\t\t})\n-\t\t\t\t\t\t.map(document -> (T) getClassMapper().documentToEntity(document, entity.getClass()));\n-\t}\n-\n \t/**\n \t * {@inheritDoc}\n \t *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQxNTQ1Ng==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2466#discussion_r455415456", "bodyText": "Minor nit, would prefer if you can format this section so each operator gets its own line like this:\nreturn  Flux.from(instances)\n    .groupBy(t -> getIdValue(t) == null)\n    .flatMap(groupedFlux -> groupedFlux.key() ? create(groupedFlux) : upsert(groupedFlux));\n\nClever usage of Group By!", "author": "dzou", "createdAt": "2020-07-15T23:08:04Z", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "diffHunk": "@@ -207,12 +231,18 @@ public boolean isUsingStreamTokens() {\n \t\t\t\treturn Flux.from(instances).doOnNext(t -> writes.add(createUpdateWrite(t)));\n \t\t\t}\n \n-\t\t\tFlux<List<T>> inputs = Flux.from(instances).bufferTimeout(this.writeBufferSize, this.writeBufferTimeout);\n-\t\t\treturn ObservableReactiveUtil.streamingBidirectionalCall(\n-\t\t\t\t\tthis::openWriteStream, inputs, this::buildWriteRequest);\n+\t\t\treturn  Flux.from(instances)\n+\t\t\t\t\t\t\t.groupBy(t -> getIdValue(t) == null).flatMap(groupedFlux ->", "originalCommit": "ff44857ed60975d61fd3fb5e34141649e1255e65", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f38a658949a14efae9bfe4f70afc808a53e94fb9", "chunk": "diff --git a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java\nindex eb81cc5e..3041f9b0 100644\n--- a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java\n+++ b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java\n\n@@ -231,18 +239,12 @@ public class FirestoreTemplate implements FirestoreReactiveOperations {\n \t\t\t\treturn Flux.from(instances).doOnNext(t -> writes.add(createUpdateWrite(t)));\n \t\t\t}\n \n-\t\t\treturn  Flux.from(instances)\n-\t\t\t\t\t\t\t.groupBy(t -> getIdValue(t) == null).flatMap(groupedFlux ->\n-\t\t\t\t\t\t\t\t\t\t\tgroupedFlux.key() ? create(groupedFlux) : upsert(groupedFlux));\n+\t\t\tFlux<List<T>> inputs = Flux.from(instances).bufferTimeout(this.writeBufferSize, this.writeBufferTimeout);\n+\t\t\treturn ObservableReactiveUtil.streamingBidirectionalCall(\n+\t\t\t\t\tthis::openWriteStream, inputs, this::buildWriteRequest);\n \t\t});\n \t}\n \n-\tprivate <T> Publisher<? extends T> upsert(Publisher<T> instances) {\n-\t\tFlux<List<T>> inputs = Flux.from(instances).bufferTimeout(this.writeBufferSize, this.writeBufferTimeout);\n-\t\treturn ObservableReactiveUtil.streamingBidirectionalCall(\n-\t\t\t\tthis::openWriteStream, inputs, this::buildWriteRequest);\n-\t}\n-\n \t@Override\n \tpublic <T> Flux<T> findAll(Class<T> clazz) {\n \t\treturn Flux.defer(() ->\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQxNzU1Mg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2466#discussion_r455417552", "bodyText": "I see; I would avoid introducing a new class here if possible -\nI think if you include it, you will have to write a lot more docs to describe what it means for future readers of this code - i.e. it would at least require a class-level javadoc, and also - generated is too general (i.e. generated what?); you may have to rename to needsGeneratedId or add comment; similarly name is too general as well - i.e. (name of what?)\nIt's not worth the burden of adding this class in my opinion if it is avoidable.", "author": "dzou", "createdAt": "2020-07-15T23:14:28Z", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "diffHunk": "@@ -400,34 +430,65 @@ private void doIfTransaction(Context ctx, Consumer<ReactiveFirestoreResourceHold\n \t}\n \n \tprivate <T> Write createUpdateWrite(T entity) {\n-\t\tString documentResourceName = buildResourceName(entity);\n-\t\tDocument document = getClassMapper().entityToDocument(entity, documentResourceName);\n-\t\treturn Write.newBuilder()\n-\t\t\t\t.setUpdate(document)\n-\t\t\t\t.build();\n+\t\tResourceName resourceName = buildResourceName(entity);\n+\t\tDocument document = getClassMapper().entityToDocument(entity, resourceName.getName());\n+\t\tBuilder builder = Write.newBuilder().setUpdate(document);\n+\t\tif (resourceName.isGenerated()) {\n+\t\t\tbuilder.setCurrentDocument(Precondition.newBuilder().setExists(false).build());\n+\t\t}\n+\t\treturn builder.build();\n \t}\n \n-\tprivate <T> String buildResourceName(T entity) {\n+\tprivate <T> ResourceName buildResourceName(T entity) {\n \t\tFirestorePersistentEntity<?> persistentEntity =\n \t\t\t\tthis.mappingContext.getPersistentEntity(entity.getClass());\n \t\tFirestorePersistentProperty idProperty = persistentEntity.getIdPropertyOrFail();\n \t\tObject idVal = persistentEntity.getPropertyAccessor(entity).getProperty(idProperty);\n-\n-\t\treturn buildResourceName(persistentEntity, idVal.toString());\n+\t\tboolean generated = false;\n+\t\tif (idVal == null) {\n+\t\t\tgenerated = true;\n+\t\t\tif (idProperty.getType() != String.class) {\n+\t\t\t\tthrow new FirestoreDataException(\"Automatic ID generation only supported for String type\");\n+\t\t\t}\n+\t\t\tidVal = Internal.autoId();\n+\t\t\tpersistentEntity.getPropertyAccessor(entity).setProperty(idProperty, idVal);\n+\t\t}\n+\t\treturn new ResourceName(buildResourceName(persistentEntity, idVal.toString()), generated);\n \t}\n \n \tprivate String buildResourceName(FirestorePersistentEntity<?> persistentEntity, String s) {\n \t\treturn this.parent + \"/\" + persistentEntity.collectionName() + \"/\" + s;\n \t}\n \n-\tprivate String getIdValue(Object entity, FirestorePersistentEntity persistentEntity) {\n+\tprivate Object getIdValue(Object entity) {\n+\t\tFirestorePersistentEntity<?> persistentEntity =\n+\t\t\t\t\t\tthis.mappingContext.getPersistentEntity(entity.getClass());\n \t\tFirestorePersistentProperty idProperty = persistentEntity.getIdPropertyOrFail();\n \t\tObject idVal = persistentEntity.getPropertyAccessor(entity).getProperty(idProperty);\n \n-\t\treturn idVal.toString();\n+\t\treturn idVal;\n \t}\n \n \tpublic FirestoreClassMapper getClassMapper() {\n \t\treturn this.classMapper;\n \t}\n+\n+\tprivate static class ResourceName {", "originalCommit": "ff44857ed60975d61fd3fb5e34141649e1255e65", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f38a658949a14efae9bfe4f70afc808a53e94fb9", "chunk": "diff --git a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java\nindex eb81cc5e..3041f9b0 100644\n--- a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java\n+++ b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java\n\n@@ -450,7 +452,9 @@ public class FirestoreTemplate implements FirestoreReactiveOperations {\n \t\t\tif (idProperty.getType() != String.class) {\n \t\t\t\tthrow new FirestoreDataException(\"Automatic ID generation only supported for String type\");\n \t\t\t}\n-\t\t\tidVal = Internal.autoId();\n+\n+\t\t\t//TODO: replace with Internal.autoId() when it is available\n+\t\t\tidVal = autoId();\n \t\t\tpersistentEntity.getPropertyAccessor(entity).setProperty(idProperty, idVal);\n \t\t}\n \t\treturn new ResourceName(buildResourceName(persistentEntity, idVal.toString()), generated);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQyMDI5Nw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2466#discussion_r455420297", "bodyText": "I would avoid introducing the ResourceName class to avoid coupling the resource name with whether the id was generated or not. Also mentioned below; I think it's not worth the documentation burden.\nInstead, maybe refactor so it's like:\nObject idVal = getOrGenerateEntityId(entity);\nString resourceName = buildResourceName(Class<?> entityType, Object idVal);", "author": "dzou", "createdAt": "2020-07-15T23:22:48Z", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "diffHunk": "@@ -400,34 +430,65 @@ private void doIfTransaction(Context ctx, Consumer<ReactiveFirestoreResourceHold\n \t}\n \n \tprivate <T> Write createUpdateWrite(T entity) {\n-\t\tString documentResourceName = buildResourceName(entity);\n-\t\tDocument document = getClassMapper().entityToDocument(entity, documentResourceName);\n-\t\treturn Write.newBuilder()\n-\t\t\t\t.setUpdate(document)\n-\t\t\t\t.build();\n+\t\tResourceName resourceName = buildResourceName(entity);", "originalCommit": "ff44857ed60975d61fd3fb5e34141649e1255e65", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f38a658949a14efae9bfe4f70afc808a53e94fb9", "chunk": "diff --git a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java\nindex eb81cc5e..3041f9b0 100644\n--- a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java\n+++ b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java\n\n@@ -450,7 +452,9 @@ public class FirestoreTemplate implements FirestoreReactiveOperations {\n \t\t\tif (idProperty.getType() != String.class) {\n \t\t\t\tthrow new FirestoreDataException(\"Automatic ID generation only supported for String type\");\n \t\t\t}\n-\t\t\tidVal = Internal.autoId();\n+\n+\t\t\t//TODO: replace with Internal.autoId() when it is available\n+\t\t\tidVal = autoId();\n \t\t\tpersistentEntity.getPropertyAccessor(entity).setProperty(idProperty, idVal);\n \t\t}\n \t\treturn new ResourceName(buildResourceName(persistentEntity, idVal.toString()), generated);\n"}}, {"oid": "f38a658949a14efae9bfe4f70afc808a53e94fb9", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/f38a658949a14efae9bfe4f70afc808a53e94fb9", "message": "switch to write with precondition", "committedDate": "2020-07-16T21:37:17Z", "type": "commit"}, {"oid": "04232836872df71c7462d73e9b9d84bf9eead6ea", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/04232836872df71c7462d73e9b9d84bf9eead6ea", "message": "remove createDocument", "committedDate": "2020-07-16T21:42:15Z", "type": "commit"}, {"oid": "fdee3a3300d359a594a9b094cd764a983b94b3dc", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/fdee3a3300d359a594a9b094cd764a983b94b3dc", "message": "remove ResourceName class", "committedDate": "2020-07-16T22:09:18Z", "type": "commit"}, {"oid": "1869d36cbbdb5de914a9fcf596560450ee2e5e31", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/1869d36cbbdb5de914a9fcf596560450ee2e5e31", "message": "improve readability", "committedDate": "2020-07-16T23:27:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE5OTY4OA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2466#discussion_r456199688", "bodyText": "I don't really see the point of having this needsAutoId local variable, since it's only used once.\nI would just put getIdValue(entity) == null directly in the if.", "author": "meltsufin", "createdAt": "2020-07-17T03:35:29Z", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "diffHunk": "@@ -400,34 +411,56 @@ private void doIfTransaction(Context ctx, Consumer<ReactiveFirestoreResourceHold\n \t}\n \n \tprivate <T> Write createUpdateWrite(T entity) {\n-\t\tString documentResourceName = buildResourceName(entity);\n-\t\tDocument document = getClassMapper().entityToDocument(entity, documentResourceName);\n-\t\treturn Write.newBuilder()\n-\t\t\t\t.setUpdate(document)\n-\t\t\t\t.build();\n+\t\tboolean needsAutoId = getIdValue(entity) == null;\n+\t\tString resourceName = buildResourceName(entity);\n+\t\tDocument document = getClassMapper().entityToDocument(entity, resourceName);\n+\t\tBuilder builder = Write.newBuilder().setUpdate(document);\n+\t\tif (needsAutoId) {", "originalCommit": "1869d36cbbdb5de914a9fcf596560450ee2e5e31", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cd32aeee63d3d549f55a4991703bb9585513df59", "chunk": "diff --git a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java\nindex ae87ffbe..abb64521 100644\n--- a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java\n+++ b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java\n\n@@ -431,7 +431,7 @@ public class FirestoreTemplate implements FirestoreReactiveOperations {\n \t\t\t\tthrow new FirestoreDataException(\"Automatic ID generation only supported for String type\");\n \t\t\t}\n \n-\t\t\t//TODO: replace with Internal.autoId() when it is available\n+\t\t\t//TODO: replace with com.google.cloud.firestore.Internal.autoId() when it is available\n \t\t\tidVal = autoId();\n \t\t\tpersistentEntity.getPropertyAccessor(entity).setProperty(idProperty, idVal);\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIwMDA5Mg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2466#discussion_r456200092", "bodyText": "Indicate the package of Internal? Otherwise, it's ambiguous.", "author": "meltsufin", "createdAt": "2020-07-17T03:37:13Z", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "diffHunk": "@@ -400,34 +411,56 @@ private void doIfTransaction(Context ctx, Consumer<ReactiveFirestoreResourceHold\n \t}\n \n \tprivate <T> Write createUpdateWrite(T entity) {\n-\t\tString documentResourceName = buildResourceName(entity);\n-\t\tDocument document = getClassMapper().entityToDocument(entity, documentResourceName);\n-\t\treturn Write.newBuilder()\n-\t\t\t\t.setUpdate(document)\n-\t\t\t\t.build();\n+\t\tboolean needsAutoId = getIdValue(entity) == null;\n+\t\tString resourceName = buildResourceName(entity);\n+\t\tDocument document = getClassMapper().entityToDocument(entity, resourceName);\n+\t\tBuilder builder = Write.newBuilder().setUpdate(document);\n+\t\tif (needsAutoId) {\n+\t\t\tbuilder.setCurrentDocument(Precondition.newBuilder().setExists(false).build());\n+\t\t}\n+\t\treturn builder.build();\n \t}\n \n \tprivate <T> String buildResourceName(T entity) {\n \t\tFirestorePersistentEntity<?> persistentEntity =\n \t\t\t\tthis.mappingContext.getPersistentEntity(entity.getClass());\n \t\tFirestorePersistentProperty idProperty = persistentEntity.getIdPropertyOrFail();\n \t\tObject idVal = persistentEntity.getPropertyAccessor(entity).getProperty(idProperty);\n+\t\tif (idVal == null) {\n+\t\t\tif (idProperty.getType() != String.class) {\n+\t\t\t\tthrow new FirestoreDataException(\"Automatic ID generation only supported for String type\");\n+\t\t\t}\n \n+\t\t\t//TODO: replace with Internal.autoId() when it is available", "originalCommit": "1869d36cbbdb5de914a9fcf596560450ee2e5e31", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cd32aeee63d3d549f55a4991703bb9585513df59", "chunk": "diff --git a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java\nindex ae87ffbe..abb64521 100644\n--- a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java\n+++ b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java\n\n@@ -431,7 +431,7 @@ public class FirestoreTemplate implements FirestoreReactiveOperations {\n \t\t\t\tthrow new FirestoreDataException(\"Automatic ID generation only supported for String type\");\n \t\t\t}\n \n-\t\t\t//TODO: replace with Internal.autoId() when it is available\n+\t\t\t//TODO: replace with com.google.cloud.firestore.Internal.autoId() when it is available\n \t\t\tidVal = autoId();\n \t\t\tpersistentEntity.getPropertyAccessor(entity).setProperty(idProperty, idVal);\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIwMDUxNA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2466#discussion_r456200514", "bodyText": "Maybe also say that id was null and what its type was to make the exception more clear.", "author": "meltsufin", "createdAt": "2020-07-17T03:39:04Z", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "diffHunk": "@@ -400,34 +411,56 @@ private void doIfTransaction(Context ctx, Consumer<ReactiveFirestoreResourceHold\n \t}\n \n \tprivate <T> Write createUpdateWrite(T entity) {\n-\t\tString documentResourceName = buildResourceName(entity);\n-\t\tDocument document = getClassMapper().entityToDocument(entity, documentResourceName);\n-\t\treturn Write.newBuilder()\n-\t\t\t\t.setUpdate(document)\n-\t\t\t\t.build();\n+\t\tboolean needsAutoId = getIdValue(entity) == null;\n+\t\tString resourceName = buildResourceName(entity);\n+\t\tDocument document = getClassMapper().entityToDocument(entity, resourceName);\n+\t\tBuilder builder = Write.newBuilder().setUpdate(document);\n+\t\tif (needsAutoId) {\n+\t\t\tbuilder.setCurrentDocument(Precondition.newBuilder().setExists(false).build());\n+\t\t}\n+\t\treturn builder.build();\n \t}\n \n \tprivate <T> String buildResourceName(T entity) {\n \t\tFirestorePersistentEntity<?> persistentEntity =\n \t\t\t\tthis.mappingContext.getPersistentEntity(entity.getClass());\n \t\tFirestorePersistentProperty idProperty = persistentEntity.getIdPropertyOrFail();\n \t\tObject idVal = persistentEntity.getPropertyAccessor(entity).getProperty(idProperty);\n+\t\tif (idVal == null) {\n+\t\t\tif (idProperty.getType() != String.class) {\n+\t\t\t\tthrow new FirestoreDataException(\"Automatic ID generation only supported for String type\");", "originalCommit": "1869d36cbbdb5de914a9fcf596560450ee2e5e31", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cd32aeee63d3d549f55a4991703bb9585513df59", "chunk": "diff --git a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java\nindex ae87ffbe..abb64521 100644\n--- a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java\n+++ b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java\n\n@@ -431,7 +431,7 @@ public class FirestoreTemplate implements FirestoreReactiveOperations {\n \t\t\t\tthrow new FirestoreDataException(\"Automatic ID generation only supported for String type\");\n \t\t\t}\n \n-\t\t\t//TODO: replace with Internal.autoId() when it is available\n+\t\t\t//TODO: replace with com.google.cloud.firestore.Internal.autoId() when it is available\n \t\t\tidVal = autoId();\n \t\t\tpersistentEntity.getPropertyAccessor(entity).setProperty(idProperty, idVal);\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIwMTAxNQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2466#discussion_r456201015", "bodyText": "Can you indicate where it was copied from?", "author": "meltsufin", "createdAt": "2020-07-17T03:40:58Z", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "diffHunk": "@@ -400,34 +411,56 @@ private void doIfTransaction(Context ctx, Consumer<ReactiveFirestoreResourceHold\n \t}\n \n \tprivate <T> Write createUpdateWrite(T entity) {\n-\t\tString documentResourceName = buildResourceName(entity);\n-\t\tDocument document = getClassMapper().entityToDocument(entity, documentResourceName);\n-\t\treturn Write.newBuilder()\n-\t\t\t\t.setUpdate(document)\n-\t\t\t\t.build();\n+\t\tboolean needsAutoId = getIdValue(entity) == null;\n+\t\tString resourceName = buildResourceName(entity);\n+\t\tDocument document = getClassMapper().entityToDocument(entity, resourceName);\n+\t\tBuilder builder = Write.newBuilder().setUpdate(document);\n+\t\tif (needsAutoId) {\n+\t\t\tbuilder.setCurrentDocument(Precondition.newBuilder().setExists(false).build());\n+\t\t}\n+\t\treturn builder.build();\n \t}\n \n \tprivate <T> String buildResourceName(T entity) {\n \t\tFirestorePersistentEntity<?> persistentEntity =\n \t\t\t\tthis.mappingContext.getPersistentEntity(entity.getClass());\n \t\tFirestorePersistentProperty idProperty = persistentEntity.getIdPropertyOrFail();\n \t\tObject idVal = persistentEntity.getPropertyAccessor(entity).getProperty(idProperty);\n+\t\tif (idVal == null) {\n+\t\t\tif (idProperty.getType() != String.class) {\n+\t\t\t\tthrow new FirestoreDataException(\"Automatic ID generation only supported for String type\");\n+\t\t\t}\n \n+\t\t\t//TODO: replace with Internal.autoId() when it is available\n+\t\t\tidVal = autoId();\n+\t\t\tpersistentEntity.getPropertyAccessor(entity).setProperty(idProperty, idVal);\n+\t\t}\n \t\treturn buildResourceName(persistentEntity, idVal.toString());\n \t}\n \n \tprivate String buildResourceName(FirestorePersistentEntity<?> persistentEntity, String s) {\n \t\treturn this.parent + \"/\" + persistentEntity.collectionName() + \"/\" + s;\n \t}\n \n-\tprivate String getIdValue(Object entity, FirestorePersistentEntity persistentEntity) {\n+\tprivate Object getIdValue(Object entity) {\n+\t\tFirestorePersistentEntity<?> persistentEntity =\n+\t\t\t\t\t\tthis.mappingContext.getPersistentEntity(entity.getClass());\n \t\tFirestorePersistentProperty idProperty = persistentEntity.getIdPropertyOrFail();\n-\t\tObject idVal = persistentEntity.getPropertyAccessor(entity).getProperty(idProperty);\n \n-\t\treturn idVal.toString();\n+\t\treturn persistentEntity.getPropertyAccessor(entity).getProperty(idProperty);\n \t}\n \n \tpublic FirestoreClassMapper getClassMapper() {\n \t\treturn this.classMapper;\n \t}\n+\n+\t/** Creates a pseudo-random 20-character ID that can be used for Firestore documents. */", "originalCommit": "1869d36cbbdb5de914a9fcf596560450ee2e5e31", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cd32aeee63d3d549f55a4991703bb9585513df59", "chunk": "diff --git a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java\nindex ae87ffbe..abb64521 100644\n--- a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java\n+++ b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java\n\n@@ -431,7 +431,7 @@ public class FirestoreTemplate implements FirestoreReactiveOperations {\n \t\t\t\tthrow new FirestoreDataException(\"Automatic ID generation only supported for String type\");\n \t\t\t}\n \n-\t\t\t//TODO: replace with Internal.autoId() when it is available\n+\t\t\t//TODO: replace with com.google.cloud.firestore.Internal.autoId() when it is available\n \t\t\tidVal = autoId();\n \t\t\tpersistentEntity.getPropertyAccessor(entity).setProperty(idProperty, idVal);\n \t\t}\n"}}, {"oid": "cd32aeee63d3d549f55a4991703bb9585513df59", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/cd32aeee63d3d549f55a4991703bb9585513df59", "message": "PR comments", "committedDate": "2020-07-17T14:00:15Z", "type": "commit"}, {"oid": "947d6f942dc8003bd5cfe882162b2bef9e315632", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/947d6f942dc8003bd5cfe882162b2bef9e315632", "message": "PR comments", "committedDate": "2020-07-17T14:04:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwNTYxOQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2466#discussion_r456605619", "bodyText": "Why is it now possible for documentResourceName to be null?", "author": "dzou", "createdAt": "2020-07-17T18:26:18Z", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/mapping/FirestoreDefaultClassMapper.java", "diffHunk": "@@ -56,9 +57,12 @@ public FirestoreDefaultClassMapper() {\n \tpublic <T> Document entityToDocument(T entity, String documentResourceName) {\n \t\tDocumentSnapshot documentSnapshot = INTERNAL.snapshotFromObject(NOT_USED_PATH, entity);\n \t\tMap<String, Value> valuesMap = INTERNAL.protoFromSnapshot(documentSnapshot);\n-\t\treturn Document.newBuilder()\n-\t\t\t\t.putAllFields(valuesMap)\n-\t\t\t\t.setName(documentResourceName).build();\n+\t\tBuilder builder = Document.newBuilder().putAllFields(valuesMap);\n+\t\tif (documentResourceName != null) {", "originalCommit": "947d6f942dc8003bd5cfe882162b2bef9e315632", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b35e69bcae7b249ab48995713d853a3659f880c2", "chunk": "diff --git a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/mapping/FirestoreDefaultClassMapper.java b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/mapping/FirestoreDefaultClassMapper.java\nindex aee9cd46..e111cba8 100644\n--- a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/mapping/FirestoreDefaultClassMapper.java\n+++ b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/mapping/FirestoreDefaultClassMapper.java\n\n@@ -58,10 +58,8 @@ public final class FirestoreDefaultClassMapper implements FirestoreClassMapper {\n \t\tDocumentSnapshot documentSnapshot = INTERNAL.snapshotFromObject(NOT_USED_PATH, entity);\n \t\tMap<String, Value> valuesMap = INTERNAL.protoFromSnapshot(documentSnapshot);\n \t\tBuilder builder = Document.newBuilder().putAllFields(valuesMap);\n-\t\tif (documentResourceName != null) {\n-\t\t\tbuilder.setName(documentResourceName);\n-\t\t}\n-\t\treturn builder.build();\n+\n+\t\treturn builder.setName(documentResourceName).build();\n \n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYwODQ0OA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2466#discussion_r456608448", "bodyText": "Could you move the Id generating helper method autoId() to a package-private class? maybe something like FirestoreIdGenerator.\nThis way you can move all the code and fields in there related to ID generation; which allows you to remember what to delete once com.google.cloud.firestore.Internal.autoId() becomes available. Otherwise you will have to comb through the code a little bit more in the future to do this removal.", "author": "dzou", "createdAt": "2020-07-17T18:31:49Z", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "diffHunk": "@@ -400,34 +411,56 @@ private void doIfTransaction(Context ctx, Consumer<ReactiveFirestoreResourceHold\n \t}\n \n \tprivate <T> Write createUpdateWrite(T entity) {\n-\t\tString documentResourceName = buildResourceName(entity);\n-\t\tDocument document = getClassMapper().entityToDocument(entity, documentResourceName);\n-\t\treturn Write.newBuilder()\n-\t\t\t\t.setUpdate(document)\n-\t\t\t\t.build();\n+\t\tBuilder builder = Write.newBuilder();\n+\t\tif (getIdValue(entity) == null) {\n+\t\t\tbuilder.setCurrentDocument(Precondition.newBuilder().setExists(false).build());\n+\t\t}\n+\t\tString resourceName = buildResourceName(entity);\n+\t\tDocument document = getClassMapper().entityToDocument(entity, resourceName);\n+\t\treturn builder.setUpdate(document).build();\n \t}\n \n \tprivate <T> String buildResourceName(T entity) {\n \t\tFirestorePersistentEntity<?> persistentEntity =\n \t\t\t\tthis.mappingContext.getPersistentEntity(entity.getClass());\n \t\tFirestorePersistentProperty idProperty = persistentEntity.getIdPropertyOrFail();\n \t\tObject idVal = persistentEntity.getPropertyAccessor(entity).getProperty(idProperty);\n+\t\tif (idVal == null) {\n+\t\t\tif (idProperty.getType() != String.class) {\n+\t\t\t\tthrow new FirestoreDataException(\"Automatic ID generation only supported for String type\");\n+\t\t\t}\n \n+\t\t\t//TODO: replace with com.google.cloud.firestore.Internal.autoId() when it is available\n+\t\t\tidVal = autoId();\n+\t\t\tpersistentEntity.getPropertyAccessor(entity).setProperty(idProperty, idVal);\n+\t\t}\n \t\treturn buildResourceName(persistentEntity, idVal.toString());\n \t}\n \n \tprivate String buildResourceName(FirestorePersistentEntity<?> persistentEntity, String s) {\n \t\treturn this.parent + \"/\" + persistentEntity.collectionName() + \"/\" + s;\n \t}\n \n-\tprivate String getIdValue(Object entity, FirestorePersistentEntity persistentEntity) {\n+\tprivate Object getIdValue(Object entity) {\n+\t\tFirestorePersistentEntity<?> persistentEntity =\n+\t\t\t\t\t\tthis.mappingContext.getPersistentEntity(entity.getClass());\n \t\tFirestorePersistentProperty idProperty = persistentEntity.getIdPropertyOrFail();\n-\t\tObject idVal = persistentEntity.getPropertyAccessor(entity).getProperty(idProperty);\n \n-\t\treturn idVal.toString();\n+\t\treturn persistentEntity.getPropertyAccessor(entity).getProperty(idProperty);\n \t}\n \n \tpublic FirestoreClassMapper getClassMapper() {\n \t\treturn this.classMapper;\n \t}\n+\n+\t//Creates a pseudo-random 20-character ID that can be used for Firestore documents.\n+\t//Copied from com.google.cloud.firestore.FirestoreImpl\n+\tprivate static String autoId() {", "originalCommit": "947d6f942dc8003bd5cfe882162b2bef9e315632", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b35e69bcae7b249ab48995713d853a3659f880c2", "chunk": "diff --git a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java\nindex 8b5b1fdf..b4368f8b 100644\n--- a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java\n+++ b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java\n\n@@ -427,11 +418,12 @@ public class FirestoreTemplate implements FirestoreReactiveOperations {\n \t\tObject idVal = persistentEntity.getPropertyAccessor(entity).getProperty(idProperty);\n \t\tif (idVal == null) {\n \t\t\tif (idProperty.getType() != String.class) {\n-\t\t\t\tthrow new FirestoreDataException(\"Automatic ID generation only supported for String type\");\n+\t\t\t\tthrow new FirestoreDataException(\n+\t\t\t\t\t\t\t\t\"ID property was null; automatic ID generation is only supported for String type\");\n \t\t\t}\n \n \t\t\t//TODO: replace with com.google.cloud.firestore.Internal.autoId() when it is available\n-\t\t\tidVal = autoId();\n+\t\t\tidVal = AutoId.autoId();\n \t\t\tpersistentEntity.getPropertyAccessor(entity).setProperty(idProperty, idVal);\n \t\t}\n \t\treturn buildResourceName(persistentEntity, idVal.toString());\n"}}, {"oid": "b35e69bcae7b249ab48995713d853a3659f880c2", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/b35e69bcae7b249ab48995713d853a3659f880c2", "message": "PR comments", "committedDate": "2020-07-17T19:02:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMTEzNQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2466#discussion_r456631135", "bodyText": "For new classes, add a top level Javadoc :) i.e. with the author tag and brief description etc.", "author": "dzou", "createdAt": "2020-07-17T19:21:37Z", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/AutoId.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2019-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.firestore;\n+\n+import java.security.SecureRandom;\n+import java.util.Random;\n+\n+//Copied from com.google.cloud.firestore.FirestoreImpl", "originalCommit": "b35e69bcae7b249ab48995713d853a3659f880c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY4NTE3Nw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2466#discussion_r456685177", "bodyText": "That's why I didn't want to introduce a new class :)", "author": "dmitry-s", "createdAt": "2020-07-17T21:38:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMTEzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQyMDcxMg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2466#discussion_r457420712", "bodyText": "Lol sorry for the inconvenience. At least it will be deleted shortly though! (Once they expose auto id).", "author": "dzou", "createdAt": "2020-07-20T14:09:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMTEzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "b86fc0afce4dc82e4ec30facea8c6c9e6931e742", "chunk": "diff --git a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/AutoId.java b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/AutoId.java\nindex ebc88740..eae3af5b 100644\n--- a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/AutoId.java\n+++ b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/AutoId.java\n\n@@ -19,7 +19,14 @@ package org.springframework.cloud.gcp.data.firestore;\n import java.security.SecureRandom;\n import java.util.Random;\n \n-//Copied from com.google.cloud.firestore.FirestoreImpl\n+/**\n+ * This class is used to generate Id values.\n+ * Copied from com.google.cloud.firestore.FirestoreImpl\n+ *\n+ * @author Dmitry Solomakha\n+ * @since 1.3\n+ */\n+\n final class AutoId {\n \tprivate static final String AUTO_ID_ALPHABET =\n \t\t\t\t\t\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYzMTY2OQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2466#discussion_r456631669", "bodyText": "Might as well just revert this file then if there are no changes.", "author": "dzou", "createdAt": "2020-07-17T19:22:56Z", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/mapping/FirestoreDefaultClassMapper.java", "diffHunk": "@@ -56,9 +57,10 @@ public FirestoreDefaultClassMapper() {\n \tpublic <T> Document entityToDocument(T entity, String documentResourceName) {\n \t\tDocumentSnapshot documentSnapshot = INTERNAL.snapshotFromObject(NOT_USED_PATH, entity);\n \t\tMap<String, Value> valuesMap = INTERNAL.protoFromSnapshot(documentSnapshot);\n-\t\treturn Document.newBuilder()\n-\t\t\t\t.putAllFields(valuesMap)\n-\t\t\t\t.setName(documentResourceName).build();\n+\t\tBuilder builder = Document.newBuilder().putAllFields(valuesMap);", "originalCommit": "b35e69bcae7b249ab48995713d853a3659f880c2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6de9ca160a2cddd4c25b53aaf3d0c4007576d228", "chunk": "diff --git a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/mapping/FirestoreDefaultClassMapper.java b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/mapping/FirestoreDefaultClassMapper.java\nindex e111cba8..d398bcab 100644\n--- a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/mapping/FirestoreDefaultClassMapper.java\n+++ b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/mapping/FirestoreDefaultClassMapper.java\n\n@@ -57,10 +56,9 @@ public final class FirestoreDefaultClassMapper implements FirestoreClassMapper {\n \tpublic <T> Document entityToDocument(T entity, String documentResourceName) {\n \t\tDocumentSnapshot documentSnapshot = INTERNAL.snapshotFromObject(NOT_USED_PATH, entity);\n \t\tMap<String, Value> valuesMap = INTERNAL.protoFromSnapshot(documentSnapshot);\n-\t\tBuilder builder = Document.newBuilder().putAllFields(valuesMap);\n-\n-\t\treturn builder.setName(documentResourceName).build();\n-\n+\t\treturn Document.newBuilder()\n+\t\t\t\t.putAllFields(valuesMap)\n+\t\t\t\t.setName(documentResourceName).build();\n \t}\n \n \tpublic <T> T documentToEntity(Document document, Class<T> clazz) {\n"}}, {"oid": "b86fc0afce4dc82e4ec30facea8c6c9e6931e742", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/b86fc0afce4dc82e4ec30facea8c6c9e6931e742", "message": "PR comments", "committedDate": "2020-07-20T17:52:00Z", "type": "commit"}, {"oid": "6de9ca160a2cddd4c25b53aaf3d0c4007576d228", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/6de9ca160a2cddd4c25b53aaf3d0c4007576d228", "message": "PR comments", "committedDate": "2020-07-20T17:56:29Z", "type": "commit"}]}