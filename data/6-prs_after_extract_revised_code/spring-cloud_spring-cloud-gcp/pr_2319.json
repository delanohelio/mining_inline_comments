{"pr_number": 2319, "pr_title": "Suppress exception in Pub/Sub adapter in AUTO_ACK and MANUAL modes", "pr_createdAt": "2020-04-14T19:31:00Z", "pr_url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2319", "timeline": [{"oid": "6768ce76c688efc6e15418a635f0a2acee9fa71f", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/6768ce76c688efc6e15418a635f0a2acee9fa71f", "message": "suppress exception in AUTO_ACK and MANUAL modes", "committedDate": "2020-04-14T19:11:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQyMDQxMA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2319#discussion_r408420410", "bodyText": "It verifies that in AUTO_ACK mode, the message is neither acked nor nacked\n\nHow does it verify that it's not nacked?\nIf this test in fact takes around 2 minutes to pass, I think it's too much to add to the build.\nCan we just verify that the message is not redelivered immediately because that was the original problem anyway?\nIn fact, it doesn't look like this test is verifying that aspect at all? The message can be redelivered immediately, and it will pass.", "author": "meltsufin", "createdAt": "2020-04-14T20:38:38Z", "path": "spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/pubsub/it/PubSubChannelAdaptersIntegrationTests.java", "diffHunk": "@@ -201,6 +205,57 @@ public void sendAndReceiveMessageManualAck() {\n \t\t});\n \t}\n \n+\t// If this test flakes, delete it.\n+\t// It verifies that in AUTO_ACK mode, the message is neither acked nor nacked, and that\n+\t// redelivery happens after subscription's ackDeadline passes.\n+\t// There is also a client library bug (https://github.com/googleapis/java-pubsub/issues/141) that\n+\t// results in ackDeadline being extended by 60 seconds even when maxAckExtensionPeriod is zero,\n+\t// making minimum redelivery time is ackDeadline + 60.\n+\t@Test\n+\tpublic void sendAndReceiveMessageAutoAckWithFailure() {\n+\t\tApplicationContextRunner customContextRunner = new ApplicationContextRunner()\n+\t\t\t\t.withConfiguration(AutoConfigurations.of(\n+\t\t\t\t\t\tGcpContextAutoConfiguration.class,\n+\t\t\t\t\t\tGcpPubSubAutoConfiguration.class))\n+\t\t\t\t.withUserConfiguration(SubscribableConfiguration.class, CommonConfiguration.class);\n+\n+\t\tcustomContextRunner.run((context) -> {\n+\t\t\ttry {\n+\t\t\t\tcontext.getBean(PubSubInboundChannelAdapter.class).setAckMode(AckMode.AUTO_ACK);\n+\t\t\t\tcontext.getBean(\"inputChannel\", MessageChannel.class).send(\n+\t\t\t\t\t\tMessageBuilder.withPayload(\"This message is in trouble.\".getBytes()).build());\n+\n+\t\t\t\tSubscribableChannel channel = context.getBean(\"outputChannel\", SubscribableChannel.class);\n+\n+\t\t\t\tAtomicInteger numReceivedMessages = new AtomicInteger(0);\n+\t\t\t\tchannel.subscribe(msg -> {\n+\t\t\t\t\tif (numReceivedMessages.incrementAndGet() == 1) {\n+\t\t\t\t\t\tthrow new RuntimeException(\"BOOM!\");\n+\t\t\t\t\t}\n+\t\t\t\t});\n+\n+\t\t\t\t// wait for initial delivery\n+\t\t\t\tAwaitility.await().atMost(10, TimeUnit.SECONDS)\n+\t\t\t\t\t\t.until(() -> numReceivedMessages.get() > 0);\n+\t\t\t\tassertThat(numReceivedMessages.get()).isEqualTo(1);\n+\n+\t\t\t\t// Expect redelivery within 2 minutes:\n+\t\t\t\t// 30 seconds subscription ackDeadline\n+\t\t\t\t// + 60 seconds https://github.com/googleapis/java-pubsub/issues/141\n+\t\t\t\t// + 30 seconds anti-flake buffer\n+\t\t\t\tAwaitility.await().atMost(120, TimeUnit.SECONDS)", "originalCommit": "6768ce76c688efc6e15418a635f0a2acee9fa71f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQzMDcwMA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2319#discussion_r408430700", "bodyText": "In theory, assertThat(numReceivedMessages.get()).isEqualTo(1); could catch immediate redelivery, but I don't think it would be reliable.\nI had another check there waiting for 10 seconds and making sure the message count was still 1, but that relied on Thread.sleep(). I think invariants verfiication was added into a later version of Awaitility... going to try using that.", "author": "elefeint", "createdAt": "2020-04-14T20:57:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQyMDQxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQzNTMwNg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2319#discussion_r408435306", "bodyText": "I'd like to verify eventual redelivery (provided I can do it without creating a flake) since we also had a bug where the message got accidentally acked, and so never redelivered.", "author": "elefeint", "createdAt": "2020-04-14T21:06:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQyMDQxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ0MjAyOA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2319#discussion_r408442028", "bodyText": "Actually, await().atLeast() does the job.", "author": "elefeint", "createdAt": "2020-04-14T21:19:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQyMDQxMA=="}], "type": "inlineReview", "revised_code": {"commit": "4ff89e9ad580d568a98af336e12ab54aa4cdaeee", "chunk": "diff --git a/spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/pubsub/it/PubSubChannelAdaptersIntegrationTests.java b/spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/pubsub/it/PubSubChannelAdaptersIntegrationTests.java\nindex 19b45beb2..4eb8b95c3 100644\n--- a/spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/pubsub/it/PubSubChannelAdaptersIntegrationTests.java\n+++ b/spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/pubsub/it/PubSubChannelAdaptersIntegrationTests.java\n\n@@ -240,10 +240,12 @@ public class PubSubChannelAdaptersIntegrationTests {\n \t\t\t\tassertThat(numReceivedMessages.get()).isEqualTo(1);\n \n \t\t\t\t// Expect redelivery within 2 minutes:\n-\t\t\t\t// 30 seconds subscription ackDeadline\n+\t\t\t\t// 10 seconds subscription ackDeadline\n \t\t\t\t// + 60 seconds https://github.com/googleapis/java-pubsub/issues/141\n-\t\t\t\t// + 30 seconds anti-flake buffer\n-\t\t\t\tAwaitility.await().atMost(120, TimeUnit.SECONDS)\n+\t\t\t\t// + 20 seconds anti-flake buffer\n+\t\t\t\tAwaitility.await()\n+\t\t\t\t\t\t.atLeast(10, TimeUnit.SECONDS)\n+\t\t\t\t\t\t.atMost(90, TimeUnit.SECONDS)\n \t\t\t\t\t\t.until(() -> numReceivedMessages.get() > 1);\n \t\t\t\tassertThat(numReceivedMessages.get()).isEqualTo(2);\n \t\t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQyMTk3Mw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2319#discussion_r408421973", "bodyText": "Can we do this in @After this kind of code seems to be repeated across tests.", "author": "meltsufin", "createdAt": "2020-04-14T20:41:24Z", "path": "spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/pubsub/it/PubSubChannelAdaptersIntegrationTests.java", "diffHunk": "@@ -201,6 +205,57 @@ public void sendAndReceiveMessageManualAck() {\n \t\t});\n \t}\n \n+\t// If this test flakes, delete it.\n+\t// It verifies that in AUTO_ACK mode, the message is neither acked nor nacked, and that\n+\t// redelivery happens after subscription's ackDeadline passes.\n+\t// There is also a client library bug (https://github.com/googleapis/java-pubsub/issues/141) that\n+\t// results in ackDeadline being extended by 60 seconds even when maxAckExtensionPeriod is zero,\n+\t// making minimum redelivery time is ackDeadline + 60.\n+\t@Test\n+\tpublic void sendAndReceiveMessageAutoAckWithFailure() {\n+\t\tApplicationContextRunner customContextRunner = new ApplicationContextRunner()\n+\t\t\t\t.withConfiguration(AutoConfigurations.of(\n+\t\t\t\t\t\tGcpContextAutoConfiguration.class,\n+\t\t\t\t\t\tGcpPubSubAutoConfiguration.class))\n+\t\t\t\t.withUserConfiguration(SubscribableConfiguration.class, CommonConfiguration.class);\n+\n+\t\tcustomContextRunner.run((context) -> {\n+\t\t\ttry {\n+\t\t\t\tcontext.getBean(PubSubInboundChannelAdapter.class).setAckMode(AckMode.AUTO_ACK);\n+\t\t\t\tcontext.getBean(\"inputChannel\", MessageChannel.class).send(\n+\t\t\t\t\t\tMessageBuilder.withPayload(\"This message is in trouble.\".getBytes()).build());\n+\n+\t\t\t\tSubscribableChannel channel = context.getBean(\"outputChannel\", SubscribableChannel.class);\n+\n+\t\t\t\tAtomicInteger numReceivedMessages = new AtomicInteger(0);\n+\t\t\t\tchannel.subscribe(msg -> {\n+\t\t\t\t\tif (numReceivedMessages.incrementAndGet() == 1) {\n+\t\t\t\t\t\tthrow new RuntimeException(\"BOOM!\");\n+\t\t\t\t\t}\n+\t\t\t\t});\n+\n+\t\t\t\t// wait for initial delivery\n+\t\t\t\tAwaitility.await().atMost(10, TimeUnit.SECONDS)\n+\t\t\t\t\t\t.until(() -> numReceivedMessages.get() > 0);\n+\t\t\t\tassertThat(numReceivedMessages.get()).isEqualTo(1);\n+\n+\t\t\t\t// Expect redelivery within 2 minutes:\n+\t\t\t\t// 30 seconds subscription ackDeadline\n+\t\t\t\t// + 60 seconds https://github.com/googleapis/java-pubsub/issues/141\n+\t\t\t\t// + 30 seconds anti-flake buffer\n+\t\t\t\tAwaitility.await().atMost(120, TimeUnit.SECONDS)\n+\t\t\t\t\t\t.until(() -> numReceivedMessages.get() > 1);\n+\t\t\t\tassertThat(numReceivedMessages.get()).isEqualTo(2);\n+\t\t\t}\n+\t\t\tfinally {\n+\t\t\t\tcontext.getBean(PubSubInboundChannelAdapter.class).stop();\n+\t\t\t\tPubSubAdmin pubSubAdmin = context.getBean(PubSubAdmin.class);\n+\t\t\t\tpubSubAdmin.deleteSubscription((String) context.getBean(\"subscriptionName\"));\n+\t\t\t\tpubSubAdmin.deleteTopic((String) context.getBean(\"topicName\"));", "originalCommit": "6768ce76c688efc6e15418a635f0a2acee9fa71f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQzMTIxNg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2319#discussion_r408431216", "bodyText": "Not the way it is right now, since it requires spring context to find the name of topic/subscription.\nI can refactor the tests in a different PR, so that before/after are both done outside of the context.", "author": "elefeint", "createdAt": "2020-04-14T20:58:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQyMTk3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQzMTUyMA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2319#discussion_r408431520", "bodyText": "This would allow not relying on custom integration test configuration, I think. We could just rely on autoconfig.", "author": "elefeint", "createdAt": "2020-04-14T20:59:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQyMTk3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ0ODYzNQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2319#discussion_r408448635", "bodyText": "#2321 to track", "author": "elefeint", "createdAt": "2020-04-14T21:32:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQyMTk3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "4ff89e9ad580d568a98af336e12ab54aa4cdaeee", "chunk": "diff --git a/spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/pubsub/it/PubSubChannelAdaptersIntegrationTests.java b/spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/pubsub/it/PubSubChannelAdaptersIntegrationTests.java\nindex 19b45beb2..4eb8b95c3 100644\n--- a/spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/pubsub/it/PubSubChannelAdaptersIntegrationTests.java\n+++ b/spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/pubsub/it/PubSubChannelAdaptersIntegrationTests.java\n\n@@ -240,10 +240,12 @@ public class PubSubChannelAdaptersIntegrationTests {\n \t\t\t\tassertThat(numReceivedMessages.get()).isEqualTo(1);\n \n \t\t\t\t// Expect redelivery within 2 minutes:\n-\t\t\t\t// 30 seconds subscription ackDeadline\n+\t\t\t\t// 10 seconds subscription ackDeadline\n \t\t\t\t// + 60 seconds https://github.com/googleapis/java-pubsub/issues/141\n-\t\t\t\t// + 30 seconds anti-flake buffer\n-\t\t\t\tAwaitility.await().atMost(120, TimeUnit.SECONDS)\n+\t\t\t\t// + 20 seconds anti-flake buffer\n+\t\t\t\tAwaitility.await()\n+\t\t\t\t\t\t.atLeast(10, TimeUnit.SECONDS)\n+\t\t\t\t\t\t.atMost(90, TimeUnit.SECONDS)\n \t\t\t\t\t\t.until(() -> numReceivedMessages.get() > 1);\n \t\t\t\tassertThat(numReceivedMessages.get()).isEqualTo(2);\n \t\t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQyMzE4Ng==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2319#discussion_r408423186", "bodyText": "In the interests of making this test pass faster, can we go lower than 30s?", "author": "meltsufin", "createdAt": "2020-04-14T20:43:35Z", "path": "spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/pubsub/it/PubSubChannelAdaptersIntegrationTests.java", "diffHunk": "@@ -324,7 +390,7 @@ public SubscriberFactory defaultSubscriberFactory(\n \t\t\t\tGcpProjectIdProvider projectIdProvider,\n \t\t\t\tCredentialsProvider credentialsProvider) {\n \t\t\tif (pubSubAdmin.getSubscription(this.subscriptionName) == null) {\n-\t\t\t\tpubSubAdmin.createSubscription(this.subscriptionName, this.topicName);\n+\t\t\t\tpubSubAdmin.createSubscription(this.subscriptionName, this.topicName, 30);", "originalCommit": "6768ce76c688efc6e15418a635f0a2acee9fa71f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQzMzU1MQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2319#discussion_r408433551", "bodyText": "Yes, 10 seconds is the minimum.", "author": "elefeint", "createdAt": "2020-04-14T21:02:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQyMzE4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "4ff89e9ad580d568a98af336e12ab54aa4cdaeee", "chunk": "diff --git a/spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/pubsub/it/PubSubChannelAdaptersIntegrationTests.java b/spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/pubsub/it/PubSubChannelAdaptersIntegrationTests.java\nindex 19b45beb2..4eb8b95c3 100644\n--- a/spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/pubsub/it/PubSubChannelAdaptersIntegrationTests.java\n+++ b/spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/pubsub/it/PubSubChannelAdaptersIntegrationTests.java\n\n@@ -390,7 +392,7 @@ public class PubSubChannelAdaptersIntegrationTests {\n \t\t\t\tGcpProjectIdProvider projectIdProvider,\n \t\t\t\tCredentialsProvider credentialsProvider) {\n \t\t\tif (pubSubAdmin.getSubscription(this.subscriptionName) == null) {\n-\t\t\t\tpubSubAdmin.createSubscription(this.subscriptionName, this.topicName, 30);\n+\t\t\t\tpubSubAdmin.createSubscription(this.subscriptionName, this.topicName, 10);\n \t\t\t}\n \n \t\t\tDefaultSubscriberFactory factory = new DefaultSubscriberFactory(projectIdProvider);\n"}}, {"oid": "4ff89e9ad580d568a98af336e12ab54aa4cdaeee", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/4ff89e9ad580d568a98af336e12ab54aa4cdaeee", "message": "reduce test run; verify no immediate redelivery", "committedDate": "2020-04-14T21:20:12Z", "type": "commit"}, {"oid": "65d763627021236bbf4aeeda662db7da731b36a7", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/65d763627021236bbf4aeeda662db7da731b36a7", "message": "update comment; err on the side of caution for minimum redelivery", "committedDate": "2020-04-14T21:28:52Z", "type": "commit"}]}