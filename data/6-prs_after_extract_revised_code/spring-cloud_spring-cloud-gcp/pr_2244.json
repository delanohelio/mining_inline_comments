{"pr_number": 2244, "pr_title": "Setup the Autoconfiguration for Firestore Emulator", "pr_createdAt": "2020-03-09T18:29:20Z", "pr_url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244", "timeline": [{"oid": "f0f1cb282055c855f515ada0cb2775e2618279ad", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/f0f1cb282055c855f515ada0cb2775e2618279ad", "message": "Firestore Emulator setup WIP.", "committedDate": "2020-03-09T18:22:50Z", "type": "commit"}, {"oid": "06f48f9225d7fe2397f7e55066837cd6a756dbc7", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/06f48f9225d7fe2397f7e55066837cd6a756dbc7", "message": "Merge branch 'master' into firestore-emulator-wip", "committedDate": "2020-04-13T18:47:19Z", "type": "commit"}, {"oid": "c6012dbac38e65556d2f30b8f87d2f912ba94889", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/c6012dbac38e65556d2f30b8f87d2f912ba94889", "message": "fix property for emulator", "committedDate": "2020-04-13T20:27:49Z", "type": "commit"}, {"oid": "b22c30a7b935e8166f52bcbe463032e822fa2981", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/b22c30a7b935e8166f52bcbe463032e822fa2981", "message": "Merge branch 'master' into firestore-emulator-wip", "committedDate": "2020-04-15T18:13:59Z", "type": "commit"}, {"oid": "641444a2d706aa20b7701b67b3ec038e932bd21b", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/641444a2d706aa20b7701b67b3ec038e932bd21b", "message": "template changes", "committedDate": "2020-04-15T18:35:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2MDE4Ng==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r409060186", "bodyText": "-2020?", "author": "eddumelendez", "createdAt": "2020-04-15T18:49:58Z", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2019-2019 the original author or authors.", "originalCommit": "641444a2d706aa20b7701b67b3ec038e932bd21b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTExNDcxOQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r409114719", "bodyText": "Nice catch, thanks.", "author": "dzou", "createdAt": "2020-04-15T20:29:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2MDE4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "e9c76a34be07d75da288c7c74e06c01e50255b01", "chunk": "diff --git a/spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java b/spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java\nindex bd6651ae5..9dfc31558 100644\n--- a/spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java\n+++ b/spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java\n\n@@ -30,8 +30,10 @@ import com.google.firestore.v1.FirestoreGrpc;\n import io.grpc.ManagedChannel;\n import io.grpc.ManagedChannelBuilder;\n import io.grpc.auth.MoreCallCredentials;\n+import reactor.core.publisher.Flux;\n \n import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2MDU4Mg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r409060582", "bodyText": "this property should be added in additional-spring-configuration-metadata.json", "author": "eddumelendez", "createdAt": "2020-04-15T18:50:41Z", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2019-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.firestore;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;\n+import com.google.auth.Credentials;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.firestore.v1.FirestoreGrpc;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.auth.MoreCallCredentials;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.autoconfigure.firestore.GcpFirestoreAutoConfiguration.FirestoreReactiveAutoConfiguration;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.data.firestore.FirestoreTemplate;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreClassMapper;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreMappingContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides autoconfiguration to use the Firestore emulator if enabled.\n+ *\n+ * @since 1.2.3\n+ * @author Daniel Zou\n+ */\n+@Configuration\n+@ConditionalOnProperty(\"spring.cloud.gcp.firestore.emulator.enabled\")", "originalCommit": "641444a2d706aa20b7701b67b3ec038e932bd21b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTExNTQwNQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r409115405", "bodyText": "Thanks. I ultimately decided to rely on our other property spring.cloud.gcp.firestore.host-port being set to enable the configuration and removed this property.", "author": "dzou", "createdAt": "2020-04-15T20:31:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2MDU4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e9c76a34be07d75da288c7c74e06c01e50255b01", "chunk": "diff --git a/spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java b/spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java\nindex bd6651ae5..9dfc31558 100644\n--- a/spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java\n+++ b/spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java\n\n@@ -30,8 +30,10 @@ import com.google.firestore.v1.FirestoreGrpc;\n import io.grpc.ManagedChannel;\n import io.grpc.ManagedChannelBuilder;\n import io.grpc.auth.MoreCallCredentials;\n+import reactor.core.publisher.Flux;\n \n import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2MTQ1Nw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r409061457", "bodyText": "emulatorCredentials sounds better. WDYT?", "author": "eddumelendez", "createdAt": "2020-04-15T18:52:10Z", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2019-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.firestore;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;\n+import com.google.auth.Credentials;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.firestore.v1.FirestoreGrpc;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.auth.MoreCallCredentials;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.autoconfigure.firestore.GcpFirestoreAutoConfiguration.FirestoreReactiveAutoConfiguration;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.data.firestore.FirestoreTemplate;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreClassMapper;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreMappingContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides autoconfiguration to use the Firestore emulator if enabled.\n+ *\n+ * @since 1.2.3\n+ * @author Daniel Zou\n+ */\n+@Configuration\n+@ConditionalOnProperty(\"spring.cloud.gcp.firestore.emulator.enabled\")\n+@AutoConfigureBefore({\n+\t\tFirestoreReactiveAutoConfiguration.class, GcpFirestoreAutoConfiguration.class})\n+@EnableConfigurationProperties(GcpFirestoreProperties.class)\n+public class GcpFirestoreEmulatorAutoConfiguration {\n+\n+\tprivate static final String ROOT_PATH_FORMAT = \"projects/%s/databases/(default)/documents\";\n+\n+\tprivate final String projectId;\n+\n+\tprivate final String hostPort;\n+\n+\tprivate final String firestoreRootPath;\n+\n+\tGcpFirestoreEmulatorAutoConfiguration(\n+\t\t\tGcpFirestoreProperties properties,\n+\t\t\tGcpProjectIdProvider projectIdProvider) throws IOException {\n+\t\tthis.projectId = projectIdProvider.getProjectId();\n+\t\tthis.hostPort = properties.getHostPort();\n+\t\tthis.firestoreRootPath = String.format(ROOT_PATH_FORMAT, this.projectId);\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic FirestoreOptions firestoreOptions() {\n+\t\treturn FirestoreOptions.newBuilder()\n+\t\t\t\t.setCredentials(fakeCredentials())\n+\t\t\t\t.setProjectId(this.projectId)\n+\t\t\t\t.setChannelProvider(\n+\t\t\t\t\t\tInstantiatingGrpcChannelProvider.newBuilder()\n+\t\t\t\t\t\t\t\t.setEndpoint(this.hostPort)\n+\t\t\t\t\t\t\t\t.setChannelConfigurator(input -> input.usePlaintext())\n+\t\t\t\t\t\t\t\t.build())\n+\t\t\t\t.build();\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic FirestoreGrpc.FirestoreStub firestoreGrpcStub() throws IOException {\n+\t\tManagedChannel channel = ManagedChannelBuilder\n+\t\t\t\t.forTarget(this.hostPort)\n+\t\t\t\t.usePlaintext()\n+\t\t\t\t.build();\n+\n+\t\treturn FirestoreGrpc.newStub(channel)\n+\t\t\t\t.withCallCredentials(MoreCallCredentials.from(fakeCredentials()))\n+\t\t\t\t.withExecutor(Runnable::run);\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic FirestoreTemplate firestoreTemplate(FirestoreGrpc.FirestoreStub firestoreStub,\n+\t\t\tFirestoreClassMapper classMapper, FirestoreMappingContext firestoreMappingContext) {\n+\t\tFirestoreTemplate template = new FirestoreTemplate(\n+\t\t\t\tfirestoreStub, this.firestoreRootPath, classMapper, firestoreMappingContext);\n+\t\ttemplate.setUsingStreamTokens(false);\n+\t\treturn template;\n+\t}\n+\n+\n+\tprivate static Credentials fakeCredentials() {", "originalCommit": "641444a2d706aa20b7701b67b3ec038e932bd21b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTExNTQ2OQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r409115469", "bodyText": "Done, sounds good.", "author": "dzou", "createdAt": "2020-04-15T20:31:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2MTQ1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "e9c76a34be07d75da288c7c74e06c01e50255b01", "chunk": "diff --git a/spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java b/spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java\nindex bd6651ae5..9dfc31558 100644\n--- a/spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java\n+++ b/spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java\n\n@@ -30,8 +30,10 @@ import com.google.firestore.v1.FirestoreGrpc;\n import io.grpc.ManagedChannel;\n import io.grpc.ManagedChannelBuilder;\n import io.grpc.auth.MoreCallCredentials;\n+import reactor.core.publisher.Flux;\n \n import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n"}}, {"oid": "e9c76a34be07d75da288c7c74e06c01e50255b01", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/e9c76a34be07d75da288c7c74e06c01e50255b01", "message": "add best-effort tests", "committedDate": "2020-04-15T19:49:58Z", "type": "commit"}, {"oid": "ef44d548a4df64ffc60157a5db3b62a395eb2502", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/ef44d548a4df64ffc60157a5db3b62a395eb2502", "message": "PR Comments", "committedDate": "2020-04-15T20:10:37Z", "type": "commit"}, {"oid": "2d7abd65152df32fc225f5065dcd18a714eedddd", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/2d7abd65152df32fc225f5065dcd18a714eedddd", "message": "PR Comments", "committedDate": "2020-04-15T20:15:07Z", "type": "commit"}, {"oid": "c76548a81462b6ec697a76af5e1313e5163d511d", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/c76548a81462b6ec697a76af5e1313e5163d511d", "message": "checkstyle", "committedDate": "2020-04-15T20:21:02Z", "type": "commit"}, {"oid": "c3ec70929c023b978f4d9a21381a227dd6144d15", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/c3ec70929c023b978f4d9a21381a227dd6144d15", "message": "checkstyle", "committedDate": "2020-04-15T20:22:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTExODQxOQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r409118419", "bodyText": "Don't need curly braces for a single class.", "author": "elefeint", "createdAt": "2020-04-15T20:37:00Z", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.firestore;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;\n+import com.google.auth.Credentials;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.firestore.v1.FirestoreGrpc;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.auth.MoreCallCredentials;\n+import reactor.core.publisher.Flux;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.autoconfigure.firestore.GcpFirestoreAutoConfiguration.FirestoreReactiveAutoConfiguration;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.data.firestore.FirestoreTemplate;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreClassMapper;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreMappingContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides autoconfiguration to use the Firestore emulator if enabled.\n+ *\n+ * @since 1.2.3\n+ * @author Daniel Zou\n+ */\n+@Configuration\n+@ConditionalOnProperty(\"spring.cloud.gcp.firestore.host-port\")\n+@AutoConfigureBefore({GcpFirestoreAutoConfiguration.class})", "originalCommit": "c3ec70929c023b978f4d9a21381a227dd6144d15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5NDI2OA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r410494268", "bodyText": "Done.", "author": "dzou", "createdAt": "2020-04-17T22:11:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTExODQxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "f017e12cd71848a76e4a748c7e7707b322377508", "chunk": "diff --git a/spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java b/spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java\nindex 0d10e402b..c364b43f0 100644\n--- a/spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java\n+++ b/spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java\n\n@@ -52,8 +52,8 @@ import org.springframework.context.annotation.Configuration;\n  * @author Daniel Zou\n  */\n @Configuration\n-@ConditionalOnProperty(\"spring.cloud.gcp.firestore.host-port\")\n-@AutoConfigureBefore({GcpFirestoreAutoConfiguration.class})\n+@ConditionalOnProperty(\"spring.cloud.gcp.firestore.emulator.enabled\")\n+@AutoConfigureBefore(GcpFirestoreAutoConfiguration.class)\n @EnableConfigurationProperties(GcpFirestoreProperties.class)\n public class GcpFirestoreEmulatorAutoConfiguration {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTExOTc5Mw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r409119793", "bodyText": "\"my-project\" -- is it because it's a fake value that's unused? Can you leave a comment about that?", "author": "elefeint", "createdAt": "2020-04-15T20:39:45Z", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.firestore;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;\n+import com.google.auth.Credentials;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.firestore.v1.FirestoreGrpc;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.auth.MoreCallCredentials;\n+import reactor.core.publisher.Flux;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.autoconfigure.firestore.GcpFirestoreAutoConfiguration.FirestoreReactiveAutoConfiguration;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.data.firestore.FirestoreTemplate;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreClassMapper;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreMappingContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides autoconfiguration to use the Firestore emulator if enabled.\n+ *\n+ * @since 1.2.3\n+ * @author Daniel Zou\n+ */\n+@Configuration\n+@ConditionalOnProperty(\"spring.cloud.gcp.firestore.host-port\")\n+@AutoConfigureBefore({GcpFirestoreAutoConfiguration.class})\n+@EnableConfigurationProperties(GcpFirestoreProperties.class)\n+public class GcpFirestoreEmulatorAutoConfiguration {\n+\n+\tprivate static final String ROOT_PATH_FORMAT = \"projects/%s/databases/(default)/documents\";\n+\n+\tprivate final String projectId;\n+\n+\tprivate final String hostPort;\n+\n+\tprivate final String firestoreRootPath;\n+\n+\tGcpFirestoreEmulatorAutoConfiguration(\n+\t\t\tGcpFirestoreProperties properties,\n+\t\t\tGcpProjectIdProvider projectIdProvider) throws IOException {\n+\t\tthis.projectId = projectIdProvider.getProjectId();\n+\t\tthis.hostPort = properties.getHostPort();\n+\t\tthis.firestoreRootPath = String.format(ROOT_PATH_FORMAT, this.projectId);\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic FirestoreOptions firestoreOptions() {\n+\t\treturn FirestoreOptions.newBuilder()\n+\t\t\t\t.setCredentials(emulatorCredentials())\n+\t\t\t\t.setProjectId(this.projectId)\n+\t\t\t\t.setChannelProvider(\n+\t\t\t\t\t\tInstantiatingGrpcChannelProvider.newBuilder()\n+\t\t\t\t\t\t\t\t.setEndpoint(this.hostPort)\n+\t\t\t\t\t\t\t\t.setChannelConfigurator(input -> input.usePlaintext())\n+\t\t\t\t\t\t\t\t.build())\n+\t\t\t\t.build();\n+\t}\n+\n+\tprivate static Credentials emulatorCredentials() {\n+\t\tfinal Map<String, List<String>> headerMap = new HashMap<>();\n+\t\theaderMap.put(\"Authorization\", Collections.singletonList(\"Bearer owner\"));\n+\t\theaderMap.put(\"google-cloud-resource-prefix\", Collections.singletonList(\"projects/my-project/databases/(default)\"));", "originalCommit": "c3ec70929c023b978f4d9a21381a227dd6144d15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5NDU4Mg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r410494582", "bodyText": "Done. I just changed it to plug in the current project-id. I guess this is more technically correct.", "author": "dzou", "createdAt": "2020-04-17T22:12:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTExOTc5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5NTY1OA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r410495658", "bodyText": "Or maybe I should make this so the emulator config doesn't require a real project (and not inject a projectIdProvider into the configuration)... Maybe that would make more sense; what do you think?", "author": "dzou", "createdAt": "2020-04-17T22:15:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTExOTc5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ2MTQwNw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r411461407", "bodyText": "Maybe just hardcode \"unused\" as project ID?", "author": "elefeint", "createdAt": "2020-04-20T15:15:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTExOTc5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "f017e12cd71848a76e4a748c7e7707b322377508", "chunk": "diff --git a/spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java b/spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java\nindex 0d10e402b..c364b43f0 100644\n--- a/spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java\n+++ b/spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java\n\n@@ -52,8 +52,8 @@ import org.springframework.context.annotation.Configuration;\n  * @author Daniel Zou\n  */\n @Configuration\n-@ConditionalOnProperty(\"spring.cloud.gcp.firestore.host-port\")\n-@AutoConfigureBefore({GcpFirestoreAutoConfiguration.class})\n+@ConditionalOnProperty(\"spring.cloud.gcp.firestore.emulator.enabled\")\n+@AutoConfigureBefore(GcpFirestoreAutoConfiguration.class)\n @EnableConfigurationProperties(GcpFirestoreProperties.class)\n public class GcpFirestoreEmulatorAutoConfiguration {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEyMDIyNA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r409120224", "bodyText": "static?", "author": "elefeint", "createdAt": "2020-04-15T20:40:35Z", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.firestore;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;\n+import com.google.auth.Credentials;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.firestore.v1.FirestoreGrpc;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.auth.MoreCallCredentials;\n+import reactor.core.publisher.Flux;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.autoconfigure.firestore.GcpFirestoreAutoConfiguration.FirestoreReactiveAutoConfiguration;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.data.firestore.FirestoreTemplate;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreClassMapper;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreMappingContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides autoconfiguration to use the Firestore emulator if enabled.\n+ *\n+ * @since 1.2.3\n+ * @author Daniel Zou\n+ */\n+@Configuration\n+@ConditionalOnProperty(\"spring.cloud.gcp.firestore.host-port\")\n+@AutoConfigureBefore({GcpFirestoreAutoConfiguration.class})\n+@EnableConfigurationProperties(GcpFirestoreProperties.class)\n+public class GcpFirestoreEmulatorAutoConfiguration {\n+\n+\tprivate static final String ROOT_PATH_FORMAT = \"projects/%s/databases/(default)/documents\";\n+\n+\tprivate final String projectId;\n+\n+\tprivate final String hostPort;\n+\n+\tprivate final String firestoreRootPath;\n+\n+\tGcpFirestoreEmulatorAutoConfiguration(\n+\t\t\tGcpFirestoreProperties properties,\n+\t\t\tGcpProjectIdProvider projectIdProvider) throws IOException {\n+\t\tthis.projectId = projectIdProvider.getProjectId();\n+\t\tthis.hostPort = properties.getHostPort();\n+\t\tthis.firestoreRootPath = String.format(ROOT_PATH_FORMAT, this.projectId);\n+\t}\n+\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic FirestoreOptions firestoreOptions() {\n+\t\treturn FirestoreOptions.newBuilder()\n+\t\t\t\t.setCredentials(emulatorCredentials())\n+\t\t\t\t.setProjectId(this.projectId)\n+\t\t\t\t.setChannelProvider(\n+\t\t\t\t\t\tInstantiatingGrpcChannelProvider.newBuilder()\n+\t\t\t\t\t\t\t\t.setEndpoint(this.hostPort)\n+\t\t\t\t\t\t\t\t.setChannelConfigurator(input -> input.usePlaintext())\n+\t\t\t\t\t\t\t\t.build())\n+\t\t\t\t.build();\n+\t}\n+\n+\tprivate static Credentials emulatorCredentials() {\n+\t\tfinal Map<String, List<String>> headerMap = new HashMap<>();\n+\t\theaderMap.put(\"Authorization\", Collections.singletonList(\"Bearer owner\"));\n+\t\theaderMap.put(\"google-cloud-resource-prefix\", Collections.singletonList(\"projects/my-project/databases/(default)\"));\n+\n+\t\treturn new Credentials() {\n+\t\t\t@Override\n+\t\t\tpublic String getAuthenticationType() {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic Map<String, List<String>> getRequestMetadata(URI uri) {\n+\t\t\t\treturn headerMap;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic boolean hasRequestMetadata() {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic boolean hasRequestMetadataOnly() {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void refresh() {\n+\t\t\t\t// no-op\n+\t\t\t}\n+\t\t};\n+\t}\n+\n+\t/**\n+\t * Reactive Firestore autoconfiguration to enable emulator use.\n+\t */\n+\t@ConditionalOnClass({ FirestoreGrpc.FirestoreStub.class, Flux.class })\n+\t@AutoConfigureBefore({ FirestoreReactiveAutoConfiguration.class })\n+\tclass ReactiveFirestoreEmulatorAutoConfiguration {", "originalCommit": "c3ec70929c023b978f4d9a21381a227dd6144d15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5NTkyMQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r410495921", "bodyText": "Right now I depend on the hostPort instance variable of the parent so I couldn't make static unfortunately.", "author": "dzou", "createdAt": "2020-04-17T22:16:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEyMDIyNA=="}], "type": "inlineReview", "revised_code": {"commit": "f017e12cd71848a76e4a748c7e7707b322377508", "chunk": "diff --git a/spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java b/spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java\nindex 0d10e402b..c364b43f0 100644\n--- a/spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java\n+++ b/spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java\n\n@@ -52,8 +52,8 @@ import org.springframework.context.annotation.Configuration;\n  * @author Daniel Zou\n  */\n @Configuration\n-@ConditionalOnProperty(\"spring.cloud.gcp.firestore.host-port\")\n-@AutoConfigureBefore({GcpFirestoreAutoConfiguration.class})\n+@ConditionalOnProperty(\"spring.cloud.gcp.firestore.emulator.enabled\")\n+@AutoConfigureBefore(GcpFirestoreAutoConfiguration.class)\n @EnableConfigurationProperties(GcpFirestoreProperties.class)\n public class GcpFirestoreEmulatorAutoConfiguration {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU3NjQ1MQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r409576451", "bodyText": "This is inconsistent with the Datastore emulator autoconfiguration that uses spring.cloud.gcp.datastore.emulator.enabled. We should instead use spring.cloud.gcp.firestore.emulator.enabled.", "author": "meltsufin", "createdAt": "2020-04-16T13:56:30Z", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.firestore;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;\n+import com.google.auth.Credentials;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.firestore.v1.FirestoreGrpc;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.auth.MoreCallCredentials;\n+import reactor.core.publisher.Flux;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.autoconfigure.firestore.GcpFirestoreAutoConfiguration.FirestoreReactiveAutoConfiguration;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.data.firestore.FirestoreTemplate;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreClassMapper;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreMappingContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides autoconfiguration to use the Firestore emulator if enabled.\n+ *\n+ * @since 1.2.3\n+ * @author Daniel Zou\n+ */\n+@Configuration\n+@ConditionalOnProperty(\"spring.cloud.gcp.firestore.host-port\")", "originalCommit": "c3ec70929c023b978f4d9a21381a227dd6144d15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5NTk1OA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r410495958", "bodyText": "Done.", "author": "dzou", "createdAt": "2020-04-17T22:16:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU3NjQ1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwOTU4OA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r411609588", "bodyText": "It still says @ConditionalOnProperty(\"spring.cloud.gcp.firestore.host-port\").", "author": "meltsufin", "createdAt": "2020-04-20T18:48:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU3NjQ1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY4NzA0OQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r411687049", "bodyText": "Done. Sorry. forgot to push my last commit!", "author": "dzou", "createdAt": "2020-04-20T20:57:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU3NjQ1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "f017e12cd71848a76e4a748c7e7707b322377508", "chunk": "diff --git a/spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java b/spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java\nindex 0d10e402b..c364b43f0 100644\n--- a/spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java\n+++ b/spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java\n\n@@ -52,8 +52,8 @@ import org.springframework.context.annotation.Configuration;\n  * @author Daniel Zou\n  */\n @Configuration\n-@ConditionalOnProperty(\"spring.cloud.gcp.firestore.host-port\")\n-@AutoConfigureBefore({GcpFirestoreAutoConfiguration.class})\n+@ConditionalOnProperty(\"spring.cloud.gcp.firestore.emulator.enabled\")\n+@AutoConfigureBefore(GcpFirestoreAutoConfiguration.class)\n @EnableConfigurationProperties(GcpFirestoreProperties.class)\n public class GcpFirestoreEmulatorAutoConfiguration {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY3MTcyMA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r409671720", "bodyText": "Is there some better way to automatically detect that we're using the emulator by inspecting the FirestoreStub and looking for the host or something?", "author": "meltsufin", "createdAt": "2020-04-16T16:01:17Z", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "diffHunk": "@@ -82,6 +82,8 @@\n \n \tprivate int writeBufferSize = FIRESTORE_WRITE_MAX_SIZE;\n \n+\tprivate boolean usingStreamTokens = true;", "originalCommit": "c3ec70929c023b978f4d9a21381a227dd6144d15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5Nzk4MQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r410497981", "bodyText": "Yeah this method would work.\nHowever I am not sure if I like the coupling this introduces and what kind of logic is needed to make it robust. I feel it's cleaner to just let the emulator autoconfiguration configure whether the template should include the stream token or not.", "author": "dzou", "createdAt": "2020-04-17T22:24:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY3MTcyMA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "f017e12cd71848a76e4a748c7e7707b322377508", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/f017e12cd71848a76e4a748c7e7707b322377508", "message": "PR Comments", "committedDate": "2020-04-17T22:10:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYxMDgzNg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r411610836", "bodyText": "@since 1.2.3?", "author": "meltsufin", "createdAt": "2020-04-20T18:49:58Z", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "diffHunk": "@@ -129,6 +131,24 @@ public int getWriteBufferSize() {\n \t\treturn this.writeBufferSize;\n \t}\n \n+\t/**\n+\t * Sets whether the {@link FirestoreTemplate} should attach stream resume tokens to write\n+\t * requests.\n+\t *\n+\t * <p>Note that this should always be set to true unless you are using the\n+\t * Firestore emulator in which case it should be set to false because the emulator\n+\t * does not support using resume tokens.\n+\t *\n+\t * @param usingStreamTokens whether the template\n+\t */\n+\tpublic void setUsingStreamTokens(boolean usingStreamTokens) {", "originalCommit": "c3ec70929c023b978f4d9a21381a227dd6144d15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY4NzEzMA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r411687130", "bodyText": "Done", "author": "dzou", "createdAt": "2020-04-20T20:57:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYxMDgzNg=="}], "type": "inlineReview", "revised_code": {"commit": "e0589fd236f2b2611e8796e7158656dc2d513683", "chunk": "diff --git a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java\nindex e911e91a0..170efdc43 100644\n--- a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java\n+++ b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java\n\n@@ -139,7 +139,8 @@ public class FirestoreTemplate implements FirestoreReactiveOperations {\n \t * Firestore emulator in which case it should be set to false because the emulator\n \t * does not support using resume tokens.\n \t *\n-\t * @param usingStreamTokens whether the template\n+\t * @param usingStreamTokens whether the template should use stream tokens\n+   * @since 1.2.3\n \t */\n \tpublic void setUsingStreamTokens(boolean usingStreamTokens) {\n \t\tthis.usingStreamTokens = usingStreamTokens;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYxMjAzMA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r411612030", "bodyText": "Can we have some basic test for this class, even if we don't actually start the emulator as part of it? For example, we can test that the property used to turn it on actually works.", "author": "meltsufin", "createdAt": "2020-04-20T18:51:52Z", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.autoconfigure.firestore;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.google.api.gax.grpc.InstantiatingGrpcChannelProvider;\n+import com.google.auth.Credentials;\n+import com.google.cloud.firestore.FirestoreOptions;\n+import com.google.firestore.v1.FirestoreGrpc;\n+import io.grpc.ManagedChannel;\n+import io.grpc.ManagedChannelBuilder;\n+import io.grpc.auth.MoreCallCredentials;\n+import reactor.core.publisher.Flux;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.cloud.gcp.autoconfigure.firestore.GcpFirestoreAutoConfiguration.FirestoreReactiveAutoConfiguration;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.data.firestore.FirestoreTemplate;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreClassMapper;\n+import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreMappingContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Provides autoconfiguration to use the Firestore emulator if enabled.\n+ *\n+ * @since 1.2.3\n+ * @author Daniel Zou\n+ */\n+@Configuration\n+@ConditionalOnProperty(\"spring.cloud.gcp.firestore.host-port\")\n+@AutoConfigureBefore({GcpFirestoreAutoConfiguration.class})\n+@EnableConfigurationProperties(GcpFirestoreProperties.class)\n+public class GcpFirestoreEmulatorAutoConfiguration {", "originalCommit": "c3ec70929c023b978f4d9a21381a227dd6144d15", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY4NzE4Mg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2244#discussion_r411687182", "bodyText": "Done", "author": "dzou", "createdAt": "2020-04-20T20:57:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYxMjAzMA=="}], "type": "inlineReview", "revised_code": {"commit": "e0589fd236f2b2611e8796e7158656dc2d513683", "chunk": "diff --git a/spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java b/spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java\nindex 0d10e402b..e7a1bd0e5 100644\n--- a/spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java\n+++ b/spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/firestore/GcpFirestoreEmulatorAutoConfiguration.java\n\n@@ -38,7 +38,6 @@ import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.cloud.gcp.autoconfigure.firestore.GcpFirestoreAutoConfiguration.FirestoreReactiveAutoConfiguration;\n-import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n import org.springframework.cloud.gcp.data.firestore.FirestoreTemplate;\n import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreClassMapper;\n import org.springframework.cloud.gcp.data.firestore.mapping.FirestoreMappingContext;\n"}}, {"oid": "e0589fd236f2b2611e8796e7158656dc2d513683", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/e0589fd236f2b2611e8796e7158656dc2d513683", "message": "add docs and test", "committedDate": "2020-04-20T20:47:36Z", "type": "commit"}]}