{"pr_number": 2311, "pr_title": "Cleanup Secret Manager module organization", "pr_createdAt": "2020-04-10T21:14:50Z", "pr_url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2311", "timeline": [{"oid": "bb6e67abada0ca2ae2322fd2d16606c274586f85", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/bb6e67abada0ca2ae2322fd2d16606c274586f85", "message": "Cleanup secret manager module", "committedDate": "2020-04-10T21:02:49Z", "type": "commit"}, {"oid": "d010fdc592c84374259e7d745931fe82eb5bf9c6", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/d010fdc592c84374259e7d745931fe82eb5bf9c6", "message": "rename it", "committedDate": "2020-04-10T21:11:57Z", "type": "commit"}, {"oid": "305b3239b341a06d781b265585e67881b7a83e91", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/305b3239b341a06d781b265585e67881b7a83e91", "message": "revert SM test changes", "committedDate": "2020-04-10T21:13:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk1MTE5MA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2311#discussion_r406951190", "bodyText": "We're losing this test now.", "author": "meltsufin", "createdAt": "2020-04-10T21:27:32Z", "path": "spring-cloud-gcp-secretmanager/src/test/java/org/springframework/cloud/gcp/secretmanager/it/SecretManagerPropertySourceIntegrationTests.java", "diffHunk": "@@ -101,28 +99,14 @@ public void testConfiguration() {\n \t\tassertThat(byteArraySecret).isEqualTo(\"the secret data.\".getBytes());\n \t}\n \n-\t@Test\n-\tpublic void testConfigurationDisabled() {", "originalCommit": "305b3239b341a06d781b265585e67881b7a83e91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYwMTM3Nw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2311#discussion_r407601377", "bodyText": "Gotcha - I moved this test to the configuration unit tests you wrote: SecretManagerBootstrapConfigurationTests", "author": "dzou", "createdAt": "2020-04-13T17:24:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk1MTE5MA=="}], "type": "inlineReview", "revised_code": {"commit": "0a83dff344b11dc8400f36b6a02bdd41bc2ada50", "chunk": "diff --git a/spring-cloud-gcp-secretmanager/src/test/java/org/springframework/cloud/gcp/secretmanager/it/SecretManagerPropertySourceIntegrationTests.java b/spring-cloud-gcp-secretmanager/src/test/java/org/springframework/cloud/gcp/secretmanager/it/SecretManagerPropertySourceIntegrationTests.java\nindex 9629ec86..350fe495 100644\n--- a/spring-cloud-gcp-secretmanager/src/test/java/org/springframework/cloud/gcp/secretmanager/it/SecretManagerPropertySourceIntegrationTests.java\n+++ b/spring-cloud-gcp-secretmanager/src/test/java/org/springframework/cloud/gcp/secretmanager/it/SecretManagerPropertySourceIntegrationTests.java\n\n@@ -100,101 +71,28 @@ public class SecretManagerPropertySourceIntegrationTests {\n \t}\n \n \t@Test\n-\tpublic void testSecretsWithSpecificVersion() {\n-\t\tcreateSecret(VERSIONED_SECRET_ID, \"the secret data\");\n-\t\tcreateSecret(VERSIONED_SECRET_ID, \"the secret data v2\");\n-\t\tcreateSecret(VERSIONED_SECRET_ID, \"the secret data v3\");\n-\n-\t\tConfigurableApplicationContext context = new SpringApplicationBuilder()\n-\t\t\t\t.sources(SecretManagerTestConfiguration.class)\n-\t\t\t\t.web(WebApplicationType.NONE)\n-\t\t\t\t.run();\n-\n-\t\tString versionedSecret = context.getEnvironment().getProperty(\n-\t\t\t\t\"sm://\" + VERSIONED_SECRET_ID + \"/2\", String.class);\n-\t\tassertThat(versionedSecret).isEqualTo(\"the secret data v2\");\n+\tpublic void testValueAnnotation() {\n+\t\tString secret = context.getBean(\"secret\", String.class);\n+\t\tassertThat(secret).isEqualTo(\"the secret data.\");\n \t}\n \n \t@Test\n \tpublic void testMissingSecret() {\n-\t\tcreateSecret(VERSIONED_SECRET_ID, \"the secret data\");\n-\n-\t\tConfigurableApplicationContext context = new SpringApplicationBuilder()\n-\t\t\t\t.sources(SecretManagerTestConfiguration.class)\n-\t\t\t\t.web(WebApplicationType.NONE)\n-\t\t\t\t.run();\n-\n \t\tassertThatThrownBy(() ->\n-\t\t\t\tcontext.getEnvironment().getProperty(\"sm://\" + VERSIONED_SECRET_ID + \"/2\", String.class))\n+\t\t\t\tcontext.getEnvironment().getProperty(\"sm://missing-secret/10\", String.class))\n \t\t\t\t.hasCauseInstanceOf(StatusRuntimeException.class)\n \t\t\t\t.hasMessageContaining(\"NOT_FOUND\");\n \t}\n-\t/**\n-\t * Creates the secret with the specified payload if the secret does not already exist.\n-\t * Otherwise creates a new version of the secret under the existing {@code secretId}.\n-\t */\n-\tprivate void createSecret(String secretId, String payload) {\n-\t\tProjectName projectName = ProjectName.of(projectIdProvider.getProjectId());\n-\n-\t\tif (!secretExists(secretId)) {\n-\t\t\t// Creates the secret.\n-\t\t\tSecret secret = Secret.newBuilder()\n-\t\t\t\t\t.setReplication(\n-\t\t\t\t\t\t\tReplication.newBuilder()\n-\t\t\t\t\t\t\t\t\t.setAutomatic(Replication.Automatic.newBuilder().build())\n-\t\t\t\t\t\t\t\t\t.build())\n-\t\t\t\t\t.build();\n-\t\t\tCreateSecretRequest request = CreateSecretRequest.newBuilder()\n-\t\t\t\t\t.setParent(projectName.toString())\n-\t\t\t\t\t.setSecretId(secretId)\n-\t\t\t\t\t.setSecret(secret)\n-\t\t\t\t\t.build();\n-\t\t\tclient.createSecret(request);\n-\t\t}\n \n-\t\tcreateSecretPayload(secretId, payload);\n-\t}\n-\n-\tprivate void createSecretPayload(String secretId, String data) {\n-\t\t// Create the secret payload.\n-\t\tSecretName name = SecretName.of(projectIdProvider.getProjectId(), secretId);\n-\t\tSecretPayload payloadObject = SecretPayload.newBuilder()\n-\t\t\t\t.setData(ByteString.copyFromUtf8(data))\n-\t\t\t\t.build();\n-\t\tAddSecretVersionRequest payloadRequest = AddSecretVersionRequest.newBuilder()\n-\t\t\t\t.setParent(name.toString())\n-\t\t\t\t.setPayload(payloadObject)\n-\t\t\t\t.build();\n-\t\tclient.addSecretVersion(payloadRequest);\n-\t}\n+\t@Configuration\n+\tstatic class TestConfiguration {\n \n-\tprivate boolean secretExists(String secretId) {\n-\t\ttry {\n-\t\t\tSecretVersionName secretVersionName =\n-\t\t\t\t\tSecretVersionName.newBuilder()\n-\t\t\t\t\t\t\t.setProject(projectIdProvider.getProjectId())\n-\t\t\t\t\t\t\t.setSecret(secretId)\n-\t\t\t\t\t\t\t.setSecretVersion(\"latest\")\n-\t\t\t\t\t\t\t.build();\n-\t\t\tthis.client.accessSecretVersion(secretVersionName);\n-\t\t}\n-\t\tcatch (NotFoundException e) {\n-\t\t\treturn false;\n-\t\t}\n+\t\t@Value(\"${sm://\" + TEST_SECRET_ID + \"}\")\n+\t\tprivate String secret;\n \n-\t\treturn true;\n-\t}\n-\n-\tprivate void deleteSecret(String secretId) {\n-\t\ttry {\n-\t\t\tthis.client.deleteSecret(SecretName.of(this.projectIdProvider.getProjectId(), secretId));\n-\n-\t\t\t// Wait for the secret to be successfully removed from the project in the backend.\n-\t\t\tawait().pollInterval(Duration.ONE_SECOND)\n-\t\t\t\t\t.atMost(20, TimeUnit.SECONDS).until(() -> !secretExists(secretId));\n-\t\t}\n-\t\tcatch (NotFoundException e) {\n-\t\t\tLOGGER.debug(\"Skipped deleting \" + secretId + \" because it does not exist.\");\n+\t\t@Bean\n+\t\tpublic String secret() {\n+\t\t\treturn secret;\n \t\t}\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk1NDAyNQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2311#discussion_r406954025", "bodyText": "Would it be possible to add the @Value test here as well like what we're doing in the other PR:\n\t@Test\n\tpublic void test() {\n\t\ttry (ConfigurableApplicationContext c = applicationBuilder.run()) {\n\t\t\tString secret = c.getBean(\"secret\", String.class);\n\t\t\tassertThat(secret).isEqualTo(\"hello\");\n\t\t}\n\t}\n\n\t@Configuration\n\tstatic class TestConfiguration {\n\n\t\t@Value(\"${sm://spring-cloud-gcp-it-secret\")\n\t\tprivate String secret;\n\n\t\t@Bean\n\t\tpublic String secret() {\n\t\t\treturn secret;\n\t\t}\n\t}", "author": "meltsufin", "createdAt": "2020-04-10T21:36:29Z", "path": "spring-cloud-gcp-secretmanager/src/test/java/org/springframework/cloud/gcp/secretmanager/it/SecretManagerPropertySourceIntegrationTests.java", "diffHunk": "@@ -49,9 +47,9 @@\n import static org.assertj.core.api.Assumptions.assumeThat;\n import static org.awaitility.Awaitility.await;\n \n-public class SecretManagerIntegrationTests {\n+public class SecretManagerPropertySourceIntegrationTests {", "originalCommit": "305b3239b341a06d781b265585e67881b7a83e91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYwMTQzNg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2311#discussion_r407601436", "bodyText": "Done.", "author": "dzou", "createdAt": "2020-04-13T17:24:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk1NDAyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "0a83dff344b11dc8400f36b6a02bdd41bc2ada50", "chunk": "diff --git a/spring-cloud-gcp-secretmanager/src/test/java/org/springframework/cloud/gcp/secretmanager/it/SecretManagerPropertySourceIntegrationTests.java b/spring-cloud-gcp-secretmanager/src/test/java/org/springframework/cloud/gcp/secretmanager/it/SecretManagerPropertySourceIntegrationTests.java\nindex 9629ec86..350fe495 100644\n--- a/spring-cloud-gcp-secretmanager/src/test/java/org/springframework/cloud/gcp/secretmanager/it/SecretManagerPropertySourceIntegrationTests.java\n+++ b/spring-cloud-gcp-secretmanager/src/test/java/org/springframework/cloud/gcp/secretmanager/it/SecretManagerPropertySourceIntegrationTests.java\n\n@@ -16,48 +16,33 @@\n \n package org.springframework.cloud.gcp.secretmanager.it;\n \n-import java.util.concurrent.TimeUnit;\n-\n-import com.google.api.gax.rpc.NotFoundException;\n-import com.google.cloud.secretmanager.v1beta1.AddSecretVersionRequest;\n-import com.google.cloud.secretmanager.v1beta1.CreateSecretRequest;\n-import com.google.cloud.secretmanager.v1beta1.ProjectName;\n-import com.google.cloud.secretmanager.v1beta1.Replication;\n-import com.google.cloud.secretmanager.v1beta1.Secret;\n-import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n-import com.google.cloud.secretmanager.v1beta1.SecretName;\n-import com.google.cloud.secretmanager.v1beta1.SecretPayload;\n-import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n-import com.google.protobuf.ByteString;\n import io.grpc.StatusRuntimeException;\n-import org.apache.commons.logging.Log;\n-import org.apache.commons.logging.LogFactory;\n-import org.awaitility.Duration;\n import org.junit.Before;\n import org.junit.BeforeClass;\n import org.junit.Test;\n \n+import org.springframework.beans.factory.annotation.Value;\n import org.springframework.boot.WebApplicationType;\n import org.springframework.boot.builder.SpringApplicationBuilder;\n-import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.cloud.gcp.secretmanager.SecretManagerTemplate;\n import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.assertThatThrownBy;\n import static org.assertj.core.api.Assumptions.assumeThat;\n-import static org.awaitility.Awaitility.await;\n \n public class SecretManagerPropertySourceIntegrationTests {\n \n-\tprivate static final Log LOGGER = LogFactory.getLog(SecretManagerPropertySourceIntegrationTests.class);\n+\tprivate ConfigurableApplicationContext context =\n+\t\t\tnew SpringApplicationBuilder(TestConfiguration.class, SecretManagerTestConfiguration.class)\n+\t\t\t\t\t.web(WebApplicationType.NONE)\n+\t\t\t\t\t.run();\n \n \tprivate static final String TEST_SECRET_ID = \"spring-cloud-gcp-it-secret\";\n \n-\tprivate static final String VERSIONED_SECRET_ID = \"spring-cloud-gcp-it-versioned-secret\";\n-\n-\tprivate GcpProjectIdProvider projectIdProvider;\n-\n-\tprivate SecretManagerServiceClient client;\n+\tprivate SecretManagerTemplate template;\n \n \t@BeforeClass\n \tpublic static void prepare() {\n"}}, {"oid": "3a583743964c58ab5f692b7883893de4c975da9d", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/3a583743964c58ab5f692b7883893de4c975da9d", "message": "Merge branch 'master' into sm-cleanup", "committedDate": "2020-04-13T14:55:49Z", "type": "commit"}, {"oid": "0a83dff344b11dc8400f36b6a02bdd41bc2ada50", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/0a83dff344b11dc8400f36b6a02bdd41bc2ada50", "message": "PR Comments + test cleanup", "committedDate": "2020-04-13T17:21:59Z", "type": "commit"}, {"oid": "55d617866ce07c886b4154f1b4c76de42f94b47c", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/55d617866ce07c886b4154f1b4c76de42f94b47c", "message": "add additional version test case", "committedDate": "2020-04-13T17:27:31Z", "type": "commit"}]}