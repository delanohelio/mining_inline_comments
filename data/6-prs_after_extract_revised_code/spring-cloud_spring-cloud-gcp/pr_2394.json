{"pr_number": 2394, "pr_title": "allow Pageable and Sort in PartTree methods", "pr_createdAt": "2020-05-27T22:08:56Z", "pr_url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2394", "timeline": [{"oid": "225e3e8b28c9f3460f7f960f64841cf2a746486a", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/225e3e8b28c9f3460f7f960f64841cf2a746486a", "message": "allow Pageable and Sort in PartTree methods", "committedDate": "2020-05-27T22:07:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAwOTMxMw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2394#discussion_r432009313", "bodyText": "I would rename this method to buildPartTreeSqlQuery since it is returning a custom object rather than a string.\nAlso see below; suggestions for renaming SqlAndTags which I think would be more clear.", "author": "dzou", "createdAt": "2020-05-28T17:37:31Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -419,8 +419,8 @@ private static String getChildrenSubquery(\n \t\treturn joiner.toString();\n \t}\n \n-\tprivate static Pair<String, List<String>> buildPartTreeSqlString(PartTree tree,\n-\t\t\tSpannerMappingContext spannerMappingContext, Class type) {\n+\tprivate static SqlAndTags buildPartTreeSqlString(PartTree tree,", "originalCommit": "225e3e8b28c9f3460f7f960f64841cf2a746486a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE0NzU0Mw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2394#discussion_r432147543", "bodyText": "I think the name reflects what this method does.", "author": "dmitry-s", "createdAt": "2020-05-28T21:58:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAwOTMxMw=="}], "type": "inlineReview", "revised_code": {"commit": "71f813d0c6b3c657e53f0dc7251e87e6bfe552a5", "chunk": "diff --git a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java\nindex 8ef98c1d..120be8a1 100644\n--- a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java\n+++ b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java\n\n@@ -419,7 +422,7 @@ public final class SpannerStatementQueryExecutor {\n \t\treturn joiner.toString();\n \t}\n \n-\tprivate static SqlAndTags buildPartTreeSqlString(PartTree tree,\n+\tprivate static SqlStringAndPlaceholders buildPartTreeSqlString(PartTree tree,\n \t\t\tSpannerMappingContext spannerMappingContext, Class type, ParameterAccessor params) {\n \n \t\tSpannerPersistentEntity<?> persistentEntity = spannerMappingContext\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAxMDI2Ng==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2394#discussion_r432010266", "bodyText": "I would rename this to SpannerPartTreeQuery or something to indicate that this object is the result of parsing the PartTree and was created from that.", "author": "dzou", "createdAt": "2020-05-28T17:39:15Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SqlAndTags.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2017-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.spanner.repository.query;\n+\n+import java.util.List;\n+\n+public class SqlAndTags {", "originalCommit": "225e3e8b28c9f3460f7f960f64841cf2a746486a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEzNzY1MA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2394#discussion_r432137650", "bodyText": "I think it's better to name it based on how it's used instead of how it was created.", "author": "dmitry-s", "createdAt": "2020-05-28T21:35:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAxMDI2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "71f813d0c6b3c657e53f0dc7251e87e6bfe552a5", "chunk": "diff --git a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SqlAndTags.java b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SqlStringAndPlaceholders.java\nsimilarity index 60%\nrename from spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SqlAndTags.java\nrename to spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SqlStringAndPlaceholders.java\nindex b6a05f91..eab2505a 100644\n--- a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SqlAndTags.java\n+++ b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SqlStringAndPlaceholders.java\n\n@@ -18,21 +18,33 @@ package org.springframework.cloud.gcp.data.spanner.repository.query;\n \n import java.util.List;\n \n-public class SqlAndTags {\n+/**\n+ * Holds SQL query string and a list of placeholders.\n+ * For sql string like this\n+ * SELECT * FROM trades WHERE ( action=@tag0 AND ticker=@tag1 )\n+ * the list of placeholders would look like this:\n+ * [tag0, tag1]\n+ *\n+ * @author Dmitry Solomakha\n+ *\n+ * @since 1.2\n+ */\n+\n+class SqlStringAndPlaceholders {\n \tprivate String sql;\n \n-\tprivate List<String> tags;\n+\tprivate List<String> placeholders;\n \n-\tpublic SqlAndTags(String finalSql, List<String> tags) {\n+\tSqlStringAndPlaceholders(String finalSql, List<String> placeholders) {\n \t\tthis.sql = finalSql;\n-\t\tthis.tags = tags;\n+\t\tthis.placeholders = placeholders;\n \t}\n \n-\tpublic String getSql() {\n+\tString getSql() {\n \t\treturn sql;\n \t}\n \n-\tpublic List<String> getTags() {\n-\t\treturn tags;\n+\tList<String> getPlaceholders() {\n+\t\treturn placeholders;\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAxMDkyMA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2394#discussion_r432010920", "bodyText": "Also I think this class needs Javadoc explaining what the class is; where it's used etc. In particular it is not clear what \"tags\" refers to.", "author": "dzou", "createdAt": "2020-05-28T17:40:23Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SqlAndTags.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2017-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.spanner.repository.query;\n+\n+import java.util.List;\n+\n+public class SqlAndTags {", "originalCommit": "225e3e8b28c9f3460f7f960f64841cf2a746486a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE0MjA2NA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2394#discussion_r432142064", "bodyText": "done", "author": "dmitry-s", "createdAt": "2020-05-28T21:45:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAxMDkyMA=="}], "type": "inlineReview", "revised_code": {"commit": "71f813d0c6b3c657e53f0dc7251e87e6bfe552a5", "chunk": "diff --git a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SqlAndTags.java b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SqlStringAndPlaceholders.java\nsimilarity index 60%\nrename from spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SqlAndTags.java\nrename to spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SqlStringAndPlaceholders.java\nindex b6a05f91..eab2505a 100644\n--- a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SqlAndTags.java\n+++ b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SqlStringAndPlaceholders.java\n\n@@ -18,21 +18,33 @@ package org.springframework.cloud.gcp.data.spanner.repository.query;\n \n import java.util.List;\n \n-public class SqlAndTags {\n+/**\n+ * Holds SQL query string and a list of placeholders.\n+ * For sql string like this\n+ * SELECT * FROM trades WHERE ( action=@tag0 AND ticker=@tag1 )\n+ * the list of placeholders would look like this:\n+ * [tag0, tag1]\n+ *\n+ * @author Dmitry Solomakha\n+ *\n+ * @since 1.2\n+ */\n+\n+class SqlStringAndPlaceholders {\n \tprivate String sql;\n \n-\tprivate List<String> tags;\n+\tprivate List<String> placeholders;\n \n-\tpublic SqlAndTags(String finalSql, List<String> tags) {\n+\tSqlStringAndPlaceholders(String finalSql, List<String> placeholders) {\n \t\tthis.sql = finalSql;\n-\t\tthis.tags = tags;\n+\t\tthis.placeholders = placeholders;\n \t}\n \n-\tpublic String getSql() {\n+\tString getSql() {\n \t\treturn sql;\n \t}\n \n-\tpublic List<String> getTags() {\n-\t\treturn tags;\n+\tList<String> getPlaceholders() {\n+\t\treturn placeholders;\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAxMTI0Ng==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2394#discussion_r432011246", "bodyText": "Visibility of this class and all methods should be package private to indicate it is only used in parttree context.", "author": "dzou", "createdAt": "2020-05-28T17:41:00Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SqlAndTags.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2017-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.spanner.repository.query;\n+\n+import java.util.List;\n+\n+public class SqlAndTags {", "originalCommit": "225e3e8b28c9f3460f7f960f64841cf2a746486a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEzNzAxNg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2394#discussion_r432137016", "bodyText": "done", "author": "dmitry-s", "createdAt": "2020-05-28T21:34:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAxMTI0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "71f813d0c6b3c657e53f0dc7251e87e6bfe552a5", "chunk": "diff --git a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SqlAndTags.java b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SqlStringAndPlaceholders.java\nsimilarity index 60%\nrename from spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SqlAndTags.java\nrename to spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SqlStringAndPlaceholders.java\nindex b6a05f91..eab2505a 100644\n--- a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SqlAndTags.java\n+++ b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SqlStringAndPlaceholders.java\n\n@@ -18,21 +18,33 @@ package org.springframework.cloud.gcp.data.spanner.repository.query;\n \n import java.util.List;\n \n-public class SqlAndTags {\n+/**\n+ * Holds SQL query string and a list of placeholders.\n+ * For sql string like this\n+ * SELECT * FROM trades WHERE ( action=@tag0 AND ticker=@tag1 )\n+ * the list of placeholders would look like this:\n+ * [tag0, tag1]\n+ *\n+ * @author Dmitry Solomakha\n+ *\n+ * @since 1.2\n+ */\n+\n+class SqlStringAndPlaceholders {\n \tprivate String sql;\n \n-\tprivate List<String> tags;\n+\tprivate List<String> placeholders;\n \n-\tpublic SqlAndTags(String finalSql, List<String> tags) {\n+\tSqlStringAndPlaceholders(String finalSql, List<String> placeholders) {\n \t\tthis.sql = finalSql;\n-\t\tthis.tags = tags;\n+\t\tthis.placeholders = placeholders;\n \t}\n \n-\tpublic String getSql() {\n+\tString getSql() {\n \t\treturn sql;\n \t}\n \n-\tpublic List<String> getTags() {\n-\t\treturn tags;\n+\tList<String> getPlaceholders() {\n+\t\treturn placeholders;\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAxNTE2MQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2394#discussion_r432015161", "bodyText": "I think the dummyMethods here is starting to be unclear; (I see you're just following what was done previously).\nDo these represent methods in a repository? If so, I think you can rename it to something like testRepositoryMethodX to be more clear. Also the QueryHolder outer class should have a comment now to indicate what these dummy methods are used fo.", "author": "dzou", "createdAt": "2020-05-28T17:48:08Z", "path": "spring-cloud-gcp-data-spanner/src/test/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryTests.java", "diffHunk": "@@ -278,5 +358,26 @@ public long dummyMethod(Object tag0, Object tag1, Object tag2, Object tag3, Obje\n \t\t\t// tag12 is intentionally List<Integer> instead of List<Long> to trigger conversion.\n \t\t\treturn 0;\n \t\t}\n+\n+\t\tpublic long dummyMethod2(Object tag0, Object tag1, Object tag2, Object tag3, Object tag4, Trade tag5, Object tag6) {", "originalCommit": "225e3e8b28c9f3460f7f960f64841cf2a746486a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE0NDAzNQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2394#discussion_r432144035", "bodyText": "done", "author": "dmitry-s", "createdAt": "2020-05-28T21:50:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAxNTE2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "71f813d0c6b3c657e53f0dc7251e87e6bfe552a5", "chunk": "diff --git a/spring-cloud-gcp-data-spanner/src/test/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryTests.java b/spring-cloud-gcp-data-spanner/src/test/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryTests.java\nindex edc04ec5..a3056f8b 100644\n--- a/spring-cloud-gcp-data-spanner/src/test/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryTests.java\n+++ b/spring-cloud-gcp-data-spanner/src/test/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryTests.java\n\n@@ -352,31 +352,32 @@ public class SpannerStatementQueryTests {\n \t\t}\n \t}\n \n+\t//The methods in this class are used to emulate repository methods\n \tprivate static class QueryHolder {\n-\t\tpublic long dummyMethod(Object tag0, Object tag1, Object tag2, Object tag3, Object tag4, Object tag5,\n+\t\tpublic long repositoryMethod1(Object tag0, Object tag1, Object tag2, Object tag3, Object tag4, Object tag5,\n \t\t\t\tObject tag6, Object tag7, Object tag8, Object tag9, Object tag10, Object tag11, List<Integer> tag12) {\n \t\t\t// tag12 is intentionally List<Integer> instead of List<Long> to trigger conversion.\n \t\t\treturn 0;\n \t\t}\n \n-\t\tpublic long dummyMethod2(Object tag0, Object tag1, Object tag2, Object tag3, Object tag4, Trade tag5, Object tag6) {\n+\t\tpublic long repositoryMethod2(Object tag0, Object tag1, Object tag2, Object tag3, Object tag4, Trade tag5, Object tag6) {\n \t\t\treturn 0;\n \t\t}\n \n-\t\tpublic long dummyMethod3(Object tag0, Object tag1, Object tag2, Object tag3, Object tag4, Object tag5,\n+\t\tpublic long repositoryMethod3(Object tag0, Object tag1, Object tag2, Object tag3, Object tag4, Object tag5,\n \t\t\t\tObject tag6, Object tag7, Object tag8, Object tag9, Object tag10, Object tag11) {\n \t\t\treturn 0;\n \t\t}\n \n-\t\tpublic long dummyMethod4(Object tag0, Object tag1, Object tag2) {\n+\t\tpublic long repositoryMethod4(Object tag0, Object tag1, Object tag2) {\n \t\t\treturn 0;\n \t\t}\n \n-\t\tpublic long dummyMethod5(Double tag0, Pageable tag1) {\n+\t\tpublic long repositoryMethod5(Double tag0, Pageable tag1) {\n \t\t\treturn 0;\n \t\t}\n \n-\t\tpublic long dummyMethod6(Double tag0, Sort tag1) {\n+\t\tpublic long repositoryMethod6(Double tag0, Sort tag1) {\n \t\t\treturn 0;\n \t\t}\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAxNTc1MQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2394#discussion_r432015751", "bodyText": "can be made private", "author": "dzou", "createdAt": "2020-05-28T17:49:14Z", "path": "spring-cloud-gcp-data-spanner/src/test/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryTests.java", "diffHunk": "@@ -209,13 +221,74 @@ public void compoundNameConventionCountTest() {\n \t}\n \n \t@Test\n-\tpublic void unspecifiedParametersTest() {\n+\tpublic void pageableTest() throws NoSuchMethodException {\n+\t\tObject[] params = new Object[] { 8.88, PageRequest.of(1, 10, Sort.by(\"traderId\")) };\n+\t\tMethod method = QueryHolder.class.getMethod(\"dummyMethod5\",\n+\t\t\t\tDouble.class, Pageable.class);\n+\t\tString expectedSql = \"SELECT shares, trader_id, ticker, price, action, id \"\n+\t\t\t\t+ \"FROM trades WHERE ( price<@tag0 ) \"\n+\t\t\t\t+ \"ORDER BY trader_id ASC LIMIT 10 OFFSET 10\";\n+\n+\t\trunPageableOrSortTest(params, method, expectedSql);\n+\t}\n+\n+\n+\t@Test\n+\tpublic void sortTest() throws NoSuchMethodException {\n+\t\tObject[] params = new Object[] { 8.88, Sort.by(Order.desc(\"traderId\"), Order.asc(\"price\"), Order.desc(\"action\")) };\n+\t\tMethod method = QueryHolder.class.getMethod(\"dummyMethod6\",\n+\t\t\t\tDouble.class, Sort.class);\n+\t\tString expectedSql = \"SELECT shares, trader_id, ticker, price, action, id \"\n+\t\t\t\t+ \"FROM trades WHERE ( price<@tag0 ) \"\n+\t\t\t\t+ \"ORDER BY trader_id DESC , price ASC , action DESC\";\n+\n+\t\trunPageableOrSortTest(params, method, expectedSql);\n+\t}\n+\n+\tvoid runPageableOrSortTest(Object[] params, Method method, String expectedSql) {", "originalCommit": "225e3e8b28c9f3460f7f960f64841cf2a746486a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE0MjQwNw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2394#discussion_r432142407", "bodyText": "done", "author": "dmitry-s", "createdAt": "2020-05-28T21:46:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAxNTc1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "71f813d0c6b3c657e53f0dc7251e87e6bfe552a5", "chunk": "diff --git a/spring-cloud-gcp-data-spanner/src/test/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryTests.java b/spring-cloud-gcp-data-spanner/src/test/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryTests.java\nindex edc04ec5..a3056f8b 100644\n--- a/spring-cloud-gcp-data-spanner/src/test/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryTests.java\n+++ b/spring-cloud-gcp-data-spanner/src/test/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryTests.java\n\n@@ -223,7 +223,7 @@ public class SpannerStatementQueryTests {\n \t@Test\n \tpublic void pageableTest() throws NoSuchMethodException {\n \t\tObject[] params = new Object[] { 8.88, PageRequest.of(1, 10, Sort.by(\"traderId\")) };\n-\t\tMethod method = QueryHolder.class.getMethod(\"dummyMethod5\",\n+\t\tMethod method = QueryHolder.class.getMethod(\"repositoryMethod5\",\n \t\t\t\tDouble.class, Pageable.class);\n \t\tString expectedSql = \"SELECT shares, trader_id, ticker, price, action, id \"\n \t\t\t\t+ \"FROM trades WHERE ( price<@tag0 ) \"\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAyNzk3Mg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2394#discussion_r432027972", "bodyText": "I think this method would be more clear with shorter variable names; i.e.\n\tprivate static Map<String, Parameter> preparePartTreeSqlTagParameterMap(\n\t\t\tParameter[] queryMethodParams, SqlAndTags sqlAndTags) {\n\n\t\tMap<String, Parameter> paramMetadataMap = new HashMap<>();\n\t\tfor (int i = 0; i < queryMethodParams.length; i++) {\n\t\t\tParameter param = queryMethodParams[i];\n\t\t\tif (param.getType() != Pageable.class && param.getType() != Sort.class) {\n\t\t\t\tparamMetadataMap.put(sqlAndTags.getTags().get(i), param);\n\t\t\t}\n\t\t}\n\t\treturn paramMetadataMap;\n\t}", "author": "dzou", "createdAt": "2020-05-28T18:11:45Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -72,31 +73,34 @@ private SpannerStatementQueryExecutor() {\n \t * Executes a PartTree-based query.\n \t * @param type the type of the underlying entity\n \t * @param tree the parsed metadata of the query\n-\t * @param params the parameters of this specific query\n+\t * @param parameterAccessor the parameters of this specific query\n \t * @param queryMethodParamsMetadata parameter metadata from Query Method\n \t * @param spannerTemplate used to execute the query\n \t * @param spannerMappingContext used to get metadata about the entity type\n \t * @param <T> the type of the underlying entity\n \t * @return list of entities.\n \t */\n-\tpublic static <T> List<T> executeQuery(Class<T> type, PartTree tree, Object[] params,\n+\tpublic static <T> List<T> executeQuery(Class<T> type, PartTree tree, ParameterAccessor parameterAccessor,\n \t\t\tParameter[] queryMethodParamsMetadata,\n \t\t\tSpannerTemplate spannerTemplate,\n \t\t\tSpannerMappingContext spannerMappingContext) {\n-\t\tPair<String, List<String>> sqlAndTags = buildPartTreeSqlString(tree,\n-\t\t\t\tspannerMappingContext, type);\n+\t\tSqlAndTags sqlAndTags = buildPartTreeSqlString(tree, spannerMappingContext, type, parameterAccessor);\n \t\tMap<String, Parameter> paramMetadataMap = preparePartTreeSqlTagParameterMap(queryMethodParamsMetadata,\n \t\t\t\tsqlAndTags);\n+\t\tObject[] params = StreamSupport.stream(parameterAccessor.spliterator(), false).toArray();\n \t\treturn spannerTemplate.query(type, buildStatementFromSqlWithArgs(\n-\t\t\t\tsqlAndTags.getFirst(), sqlAndTags.getSecond(), null,\n+\t\t\t\tsqlAndTags.getSql(), sqlAndTags.getTags(), null,\n \t\t\t\tspannerTemplate.getSpannerEntityProcessor().getWriteConverter(), params, paramMetadataMap), null);\n \t}\n \n \tprivate static Map<String, Parameter> preparePartTreeSqlTagParameterMap(Parameter[] queryMethodParamsMetadata,\n-\t\t\tPair<String, List<String>> sqlAndTags) {\n+\t\t\tSqlAndTags sqlAndTags) {\n \t\tMap<String, Parameter> paramMetadataMap = new HashMap<>();\n \t\tfor (int i = 0; i < queryMethodParamsMetadata.length; i++) {\n-\t\t\tparamMetadataMap.put(sqlAndTags.getSecond().get(i), queryMethodParamsMetadata[i]);\n+\t\t\tParameter queryMethodParamsMetadatum = queryMethodParamsMetadata[i];", "originalCommit": "225e3e8b28c9f3460f7f960f64841cf2a746486a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEzNTM2Mw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2394#discussion_r432135363", "bodyText": "done", "author": "dmitry-s", "createdAt": "2020-05-28T21:30:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAyNzk3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "71f813d0c6b3c657e53f0dc7251e87e6bfe552a5", "chunk": "diff --git a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java\nindex 8ef98c1d..120be8a1 100644\n--- a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java\n+++ b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java\n\n@@ -84,22 +85,24 @@ public final class SpannerStatementQueryExecutor {\n \t\t\tParameter[] queryMethodParamsMetadata,\n \t\t\tSpannerTemplate spannerTemplate,\n \t\t\tSpannerMappingContext spannerMappingContext) {\n-\t\tSqlAndTags sqlAndTags = buildPartTreeSqlString(tree, spannerMappingContext, type, parameterAccessor);\n+\t\tSqlStringAndPlaceholders sqlStringAndPlaceholders = buildPartTreeSqlString(tree, spannerMappingContext, type, parameterAccessor);\n \t\tMap<String, Parameter> paramMetadataMap = preparePartTreeSqlTagParameterMap(queryMethodParamsMetadata,\n-\t\t\t\tsqlAndTags);\n+\t\t\t\tsqlStringAndPlaceholders);\n \t\tObject[] params = StreamSupport.stream(parameterAccessor.spliterator(), false).toArray();\n \t\treturn spannerTemplate.query(type, buildStatementFromSqlWithArgs(\n-\t\t\t\tsqlAndTags.getSql(), sqlAndTags.getTags(), null,\n+\t\t\t\tsqlStringAndPlaceholders.getSql(), sqlStringAndPlaceholders.getPlaceholders(), null,\n \t\t\t\tspannerTemplate.getSpannerEntityProcessor().getWriteConverter(), params, paramMetadataMap), null);\n \t}\n \n-\tprivate static Map<String, Parameter> preparePartTreeSqlTagParameterMap(Parameter[] queryMethodParamsMetadata,\n-\t\t\tSqlAndTags sqlAndTags) {\n+\tprivate static Map<String, Parameter> preparePartTreeSqlTagParameterMap(Parameter[] paramsMetadata,\n+\t\t\tSqlStringAndPlaceholders sqlStringAndPlaceholders) {\n \t\tMap<String, Parameter> paramMetadataMap = new HashMap<>();\n-\t\tfor (int i = 0; i < queryMethodParamsMetadata.length; i++) {\n-\t\t\tParameter queryMethodParamsMetadatum = queryMethodParamsMetadata[i];\n-\t\t\tif (queryMethodParamsMetadatum.getType() != Pageable.class && queryMethodParamsMetadatum.getType() != Sort.class) {\n-\t\t\t\tparamMetadataMap.put(sqlAndTags.getTags().get(i), queryMethodParamsMetadatum);\n+\t\tfor (int i = 0; i < paramsMetadata.length; i++) {\n+\t\t\tParameter param = paramsMetadata[i];\n+\t\t\t//Skip Pageable and Sort parameters because they don't need to be bound to the tags in the query.\n+\t\t\t//They are processed separately in applySort and buildLimit methods.\n+\t\t\tif (param.getType() != Pageable.class && param.getType() != Sort.class) {\n+\t\t\t\tparamMetadataMap.put(sqlStringAndPlaceholders.getPlaceholders().get(i), param);\n \t\t\t}\n \t\t}\n \t\treturn paramMetadataMap;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAyODMxOA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2394#discussion_r432028318", "bodyText": "I think a comment is necessary to explain why the params are filtered by queryMethodParamsMetadatum.getType() != Pageable.class && queryMethodParamsMetadatum.getType() != Sort.class", "author": "dzou", "createdAt": "2020-05-28T18:12:19Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -72,31 +73,34 @@ private SpannerStatementQueryExecutor() {\n \t * Executes a PartTree-based query.\n \t * @param type the type of the underlying entity\n \t * @param tree the parsed metadata of the query\n-\t * @param params the parameters of this specific query\n+\t * @param parameterAccessor the parameters of this specific query\n \t * @param queryMethodParamsMetadata parameter metadata from Query Method\n \t * @param spannerTemplate used to execute the query\n \t * @param spannerMappingContext used to get metadata about the entity type\n \t * @param <T> the type of the underlying entity\n \t * @return list of entities.\n \t */\n-\tpublic static <T> List<T> executeQuery(Class<T> type, PartTree tree, Object[] params,\n+\tpublic static <T> List<T> executeQuery(Class<T> type, PartTree tree, ParameterAccessor parameterAccessor,\n \t\t\tParameter[] queryMethodParamsMetadata,\n \t\t\tSpannerTemplate spannerTemplate,\n \t\t\tSpannerMappingContext spannerMappingContext) {\n-\t\tPair<String, List<String>> sqlAndTags = buildPartTreeSqlString(tree,\n-\t\t\t\tspannerMappingContext, type);\n+\t\tSqlAndTags sqlAndTags = buildPartTreeSqlString(tree, spannerMappingContext, type, parameterAccessor);\n \t\tMap<String, Parameter> paramMetadataMap = preparePartTreeSqlTagParameterMap(queryMethodParamsMetadata,\n \t\t\t\tsqlAndTags);\n+\t\tObject[] params = StreamSupport.stream(parameterAccessor.spliterator(), false).toArray();\n \t\treturn spannerTemplate.query(type, buildStatementFromSqlWithArgs(\n-\t\t\t\tsqlAndTags.getFirst(), sqlAndTags.getSecond(), null,\n+\t\t\t\tsqlAndTags.getSql(), sqlAndTags.getTags(), null,\n \t\t\t\tspannerTemplate.getSpannerEntityProcessor().getWriteConverter(), params, paramMetadataMap), null);\n \t}\n \n \tprivate static Map<String, Parameter> preparePartTreeSqlTagParameterMap(Parameter[] queryMethodParamsMetadata,\n-\t\t\tPair<String, List<String>> sqlAndTags) {\n+\t\t\tSqlAndTags sqlAndTags) {", "originalCommit": "225e3e8b28c9f3460f7f960f64841cf2a746486a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEzNTMxMA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2394#discussion_r432135310", "bodyText": "done", "author": "dmitry-s", "createdAt": "2020-05-28T21:30:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAyODMxOA=="}], "type": "inlineReview", "revised_code": {"commit": "71f813d0c6b3c657e53f0dc7251e87e6bfe552a5", "chunk": "diff --git a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java\nindex 8ef98c1d..120be8a1 100644\n--- a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java\n+++ b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java\n\n@@ -84,22 +85,24 @@ public final class SpannerStatementQueryExecutor {\n \t\t\tParameter[] queryMethodParamsMetadata,\n \t\t\tSpannerTemplate spannerTemplate,\n \t\t\tSpannerMappingContext spannerMappingContext) {\n-\t\tSqlAndTags sqlAndTags = buildPartTreeSqlString(tree, spannerMappingContext, type, parameterAccessor);\n+\t\tSqlStringAndPlaceholders sqlStringAndPlaceholders = buildPartTreeSqlString(tree, spannerMappingContext, type, parameterAccessor);\n \t\tMap<String, Parameter> paramMetadataMap = preparePartTreeSqlTagParameterMap(queryMethodParamsMetadata,\n-\t\t\t\tsqlAndTags);\n+\t\t\t\tsqlStringAndPlaceholders);\n \t\tObject[] params = StreamSupport.stream(parameterAccessor.spliterator(), false).toArray();\n \t\treturn spannerTemplate.query(type, buildStatementFromSqlWithArgs(\n-\t\t\t\tsqlAndTags.getSql(), sqlAndTags.getTags(), null,\n+\t\t\t\tsqlStringAndPlaceholders.getSql(), sqlStringAndPlaceholders.getPlaceholders(), null,\n \t\t\t\tspannerTemplate.getSpannerEntityProcessor().getWriteConverter(), params, paramMetadataMap), null);\n \t}\n \n-\tprivate static Map<String, Parameter> preparePartTreeSqlTagParameterMap(Parameter[] queryMethodParamsMetadata,\n-\t\t\tSqlAndTags sqlAndTags) {\n+\tprivate static Map<String, Parameter> preparePartTreeSqlTagParameterMap(Parameter[] paramsMetadata,\n+\t\t\tSqlStringAndPlaceholders sqlStringAndPlaceholders) {\n \t\tMap<String, Parameter> paramMetadataMap = new HashMap<>();\n-\t\tfor (int i = 0; i < queryMethodParamsMetadata.length; i++) {\n-\t\t\tParameter queryMethodParamsMetadatum = queryMethodParamsMetadata[i];\n-\t\t\tif (queryMethodParamsMetadatum.getType() != Pageable.class && queryMethodParamsMetadatum.getType() != Sort.class) {\n-\t\t\t\tparamMetadataMap.put(sqlAndTags.getTags().get(i), queryMethodParamsMetadatum);\n+\t\tfor (int i = 0; i < paramsMetadata.length; i++) {\n+\t\t\tParameter param = paramsMetadata[i];\n+\t\t\t//Skip Pageable and Sort parameters because they don't need to be bound to the tags in the query.\n+\t\t\t//They are processed separately in applySort and buildLimit methods.\n+\t\t\tif (param.getType() != Pageable.class && param.getType() != Sort.class) {\n+\t\t\t\tparamMetadataMap.put(sqlStringAndPlaceholders.getPlaceholders().get(i), param);\n \t\t\t}\n \t\t}\n \t\treturn paramMetadataMap;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAzMDY0Mw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2394#discussion_r432030643", "bodyText": "since Pageable is the one containing the limit info, I would just pass in Pageable instead of the full ParamAccessor here.", "author": "dzou", "createdAt": "2020-05-28T18:16:37Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -582,12 +582,19 @@ else if (part.shouldIgnoreCase() != IgnoreCaseType.NEVER) {\n \t\t}\n \t}\n \n-\tprivate static void buildLimit(PartTree tree, StringBuilder stringBuilder) {\n+\tprivate static void buildLimit(PartTree tree, StringBuilder stringBuilder, ParameterAccessor params) {", "originalCommit": "225e3e8b28c9f3460f7f960f64841cf2a746486a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjEzNjIzNA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2394#discussion_r432136234", "bodyText": "done", "author": "dmitry-s", "createdAt": "2020-05-28T21:32:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAzMDY0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "71f813d0c6b3c657e53f0dc7251e87e6bfe552a5", "chunk": "diff --git a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java\nindex 8ef98c1d..120be8a1 100644\n--- a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java\n+++ b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java\n\n@@ -582,7 +585,7 @@ public final class SpannerStatementQueryExecutor {\n \t\t}\n \t}\n \n-\tprivate static void buildLimit(PartTree tree, StringBuilder stringBuilder, ParameterAccessor params) {\n+\tprivate static void buildLimit(PartTree tree, StringBuilder stringBuilder, Pageable pageable) {\n \t\tif (tree.isExistsProjection()) {\n \t\t\tstringBuilder.append(\" LIMIT 1\");\n \t\t}\n"}}, {"oid": "71f813d0c6b3c657e53f0dc7251e87e6bfe552a5", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/71f813d0c6b3c657e53f0dc7251e87e6bfe552a5", "message": "PR comments", "committedDate": "2020-05-28T22:00:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU2MTQzNQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2394#discussion_r432561435", "bodyText": "can do else if", "author": "meltsufin", "createdAt": "2020-05-29T15:25:27Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -582,12 +585,18 @@ else if (part.shouldIgnoreCase() != IgnoreCaseType.NEVER) {\n \t\t}\n \t}\n \n-\tprivate static void buildLimit(PartTree tree, StringBuilder stringBuilder) {\n+\tprivate static void buildLimit(PartTree tree, StringBuilder stringBuilder, Pageable pageable) {\n \t\tif (tree.isExistsProjection()) {\n \t\t\tstringBuilder.append(\" LIMIT 1\");\n \t\t}\n \t\telse if (tree.isLimiting()) {\n \t\t\tstringBuilder.append(\" LIMIT \").append(tree.getMaxResults());\n \t\t}\n+\t\telse {", "originalCommit": "71f813d0c6b3c657e53f0dc7251e87e6bfe552a5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2697ebd07943e5464de1624fd7f80ed498e07410", "chunk": "diff --git a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java\nindex 120be8a1..878241c6 100644\n--- a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java\n+++ b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java\n\n@@ -589,14 +589,12 @@ public final class SpannerStatementQueryExecutor {\n \t\tif (tree.isExistsProjection()) {\n \t\t\tstringBuilder.append(\" LIMIT 1\");\n \t\t}\n+\t\telse if (pageable.isPaged()) {\n+\t\t\tstringBuilder.append(\" LIMIT \").append(pageable.getPageSize())\n+\t\t\t\t\t.append(\" OFFSET \").append(pageable.getOffset());\n+\t\t}\n \t\telse if (tree.isLimiting()) {\n \t\t\tstringBuilder.append(\" LIMIT \").append(tree.getMaxResults());\n \t\t}\n-\t\telse {\n-\t\t\tif (pageable.isPaged()) {\n-\t\t\t\tstringBuilder.append(\" LIMIT \").append(pageable.getPageSize())\n-\t\t\t\t.append(\" OFFSET \").append(pageable.getOffset());\n-\t\t\t}\n-\t\t}\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU2MTc5Mg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2394#discussion_r432561792", "bodyText": "1.2.4", "author": "meltsufin", "createdAt": "2020-05-29T15:26:00Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SqlStringAndPlaceholders.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2017-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.spanner.repository.query;\n+\n+import java.util.List;\n+\n+/**\n+ * Holds SQL query string and a list of placeholders.\n+ * For sql string like this\n+ * SELECT * FROM trades WHERE ( action=@tag0 AND ticker=@tag1 )\n+ * the list of placeholders would look like this:\n+ * [tag0, tag1]\n+ *\n+ * @author Dmitry Solomakha\n+ *\n+ * @since 1.2", "originalCommit": "71f813d0c6b3c657e53f0dc7251e87e6bfe552a5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2697ebd07943e5464de1624fd7f80ed498e07410", "chunk": "diff --git a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SqlStringAndPlaceholders.java b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SqlStringAndPlaceholders.java\nindex eab2505a..ac04e85e 100644\n--- a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SqlStringAndPlaceholders.java\n+++ b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SqlStringAndPlaceholders.java\n\n@@ -27,9 +27,8 @@ import java.util.List;\n  *\n  * @author Dmitry Solomakha\n  *\n- * @since 1.2\n+ * @since 1.2.4\n  */\n-\n class SqlStringAndPlaceholders {\n \tprivate String sql;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU2MjAyMw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2394#discussion_r432562023", "bodyText": "extra space", "author": "meltsufin", "createdAt": "2020-05-29T15:26:21Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SqlStringAndPlaceholders.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2017-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.spanner.repository.query;\n+\n+import java.util.List;\n+\n+/**\n+ * Holds SQL query string and a list of placeholders.\n+ * For sql string like this\n+ * SELECT * FROM trades WHERE ( action=@tag0 AND ticker=@tag1 )\n+ * the list of placeholders would look like this:\n+ * [tag0, tag1]\n+ *\n+ * @author Dmitry Solomakha\n+ *\n+ * @since 1.2\n+ */\n+", "originalCommit": "71f813d0c6b3c657e53f0dc7251e87e6bfe552a5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2697ebd07943e5464de1624fd7f80ed498e07410", "chunk": "diff --git a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SqlStringAndPlaceholders.java b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SqlStringAndPlaceholders.java\nindex eab2505a..ac04e85e 100644\n--- a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SqlStringAndPlaceholders.java\n+++ b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SqlStringAndPlaceholders.java\n\n@@ -27,9 +27,8 @@ import java.util.List;\n  *\n  * @author Dmitry Solomakha\n  *\n- * @since 1.2\n+ * @since 1.2.4\n  */\n-\n class SqlStringAndPlaceholders {\n \tprivate String sql;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU2NTM1Mg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2394#discussion_r432565352", "bodyText": "If you want, add test for limit in the method name and page request in the params. Which takes precedence?", "author": "meltsufin", "createdAt": "2020-05-29T15:31:46Z", "path": "spring-cloud-gcp-data-spanner/src/test/java/org/springframework/cloud/gcp/data/spanner/repository/it/SpannerRepositoryIntegrationTests.java", "diffHunk": "@@ -181,6 +182,22 @@ public void queryMethodsTest() {\n \t\t\t\t.findByTraderId(\"trader2\");\n \t\tassertThat(trader2TradesRetrieved).containsExactlyInAnyOrderElementsOf(trader2Trades);\n \n+\t\tassertThat(this.tradeRepository", "originalCommit": "71f813d0c6b3c657e53f0dc7251e87e6bfe552a5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2697ebd07943e5464de1624fd7f80ed498e07410", "chunk": "diff --git a/spring-cloud-gcp-data-spanner/src/test/java/org/springframework/cloud/gcp/data/spanner/repository/it/SpannerRepositoryIntegrationTests.java b/spring-cloud-gcp-data-spanner/src/test/java/org/springframework/cloud/gcp/data/spanner/repository/it/SpannerRepositoryIntegrationTests.java\nindex b68f111a..e38663f5 100644\n--- a/spring-cloud-gcp-data-spanner/src/test/java/org/springframework/cloud/gcp/data/spanner/repository/it/SpannerRepositoryIntegrationTests.java\n+++ b/spring-cloud-gcp-data-spanner/src/test/java/org/springframework/cloud/gcp/data/spanner/repository/it/SpannerRepositoryIntegrationTests.java\n\n@@ -198,6 +199,18 @@ public class SpannerRepositoryIntegrationTests extends AbstractSpannerIntegratio\n \t\t\t\t.findByTraderId(\"trader2\", PageRequest.of(1, 2, Sort.by(Direction.DESC, \"tradeTime\"))))\n \t\t\t\t.containsExactlyInAnyOrder(trader2Trades.get(0));\n \n+\t\tassertThat(this.tradeRepository\n+\t\t\t\t.findTop2ByTraderIdOrderByTradeTimeAsc(\"trader2\", Pageable.unpaged()))\n+\t\t\t\t.containsExactlyInAnyOrder(trader2Trades.get(0), trader2Trades.get(1));\n+\n+\t\tassertThat(this.tradeRepository\n+\t\t\t\t.findTop2ByTraderIdOrderByTradeTimeAsc(\"trader2\", PageRequest.of(0, 1)))\n+\t\t\t\t.containsExactlyInAnyOrder(trader2Trades.get(0));\n+\n+\t\tassertThat(this.tradeRepository\n+\t\t\t\t.findTop2ByTraderIdOrderByTradeTimeAsc(\"trader2\", PageRequest.of(0, 1, Sort.by(Direction.DESC, \"tradeTime\"))))\n+\t\t\t\t.containsExactlyInAnyOrder(trader2Trades.get(2));\n+\n \t\tList<TradeProjection> tradeProjectionsRetrieved = this.tradeRepository\n \t\t\t\t.findByActionIgnoreCase(\"bUy\");\n \t\tassertThat(tradeProjectionsRetrieved).hasSize(3);\n"}}, {"oid": "2697ebd07943e5464de1624fd7f80ed498e07410", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/2697ebd07943e5464de1624fd7f80ed498e07410", "message": "PR comments", "committedDate": "2020-05-29T16:39:18Z", "type": "commit"}]}