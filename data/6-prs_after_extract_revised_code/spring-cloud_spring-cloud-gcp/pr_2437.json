{"pr_number": 2437, "pr_title": "Replaced DatastoreTemplate with DatastoreOperations", "pr_createdAt": "2020-06-17T02:19:32Z", "pr_url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2437", "timeline": [{"oid": "5781a25e34e4fe645fd3bc9eee75f62426222595", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/5781a25e34e4fe645fd3bc9eee75f62426222595", "message": "Replaced DatastoreTemplate with DatastoreOperations", "committedDate": "2020-06-17T02:12:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2ODE1Nw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2437#discussion_r441268157", "bodyText": "We should javadoc here, since it's the interface.", "author": "meltsufin", "createdAt": "2020-06-17T04:05:07Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java", "diffHunk": "@@ -260,4 +262,23 @@\n \t * @return result keys\n \t */\n \t<T> Iterable<Key> keyQueryByExample(Example<T> example, DatastoreQueryOptions queryOptions);\n+\n+\t/**\n+\t * Get the {@link DatastoreEntityConverter} used by this template.\n+\t * @return the converter.\n+\t */\n+\tDatastoreEntityConverter getDatastoreEntityConverter();\n+\n+\t/**\n+\t * Finds objects by using a Cloud Datastore query. If the query is a key-query, then keys are\n+\t * returned.\n+\t * @param query the query to execute.\n+\t * @param entityClass the type of object to retrieve.\n+\t * @param <T> the type of object to retrieve.\n+\t * @return a list of the objects found. If no keys could be found the list will be\n+\t * empty.\n+\t */\n+\t<T> DatastoreResultsIterable<?> queryKeysOrEntities(Query query, Class<T> entityClass);\n+\n+\t<A, T> DatastoreResultsIterable<T> queryIterable(Query<A> query, Function<A, T> entityFunc);", "originalCommit": "5781a25e34e4fe645fd3bc9eee75f62426222595", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2c905b84eb9a3c578d03f8251396f94ae2b18edd", "chunk": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java\nindex d5e24fb9b..96e04973d 100644\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java\n+++ b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreOperations.java\n\n@@ -280,5 +280,14 @@ public interface DatastoreOperations {\n \t */\n \t<T> DatastoreResultsIterable<?> queryKeysOrEntities(Query query, Class<T> entityClass);\n \n+\t/**\n+\t * Runs given query and applies given function to each entity in the result.\n+\t * @param query the query to run.\n+\t * @param entityFunc the function to apply to each found entity or key.\n+\t * @param <A> the row type of the query. This type can be either {@code Key} or a\n+\t * Cloud Datastore entity.\n+\t * @param <T> the type to map each entity or key to.\n+\t * @return the mapped entities or keys.\n+\t */\n \t<A, T> DatastoreResultsIterable<T> queryIterable(Query<A> query, Function<A, T> entityFunc);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2ODI3Ng==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2437#discussion_r441268276", "bodyText": "Unintentional spacing change?", "author": "meltsufin", "createdAt": "2020-06-17T04:05:42Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/AbstractDatastoreQuery.java", "diffHunk": "@@ -40,12 +40,12 @@\n \n \tfinal DatastoreQueryMethod queryMethod;\n \n-\tfinal DatastoreTemplate datastoreTemplate;\n+\tfinal DatastoreOperations datastoreTemplate;\n \n \tfinal Class<T> entityType;\n \n \tpublic AbstractDatastoreQuery(DatastoreQueryMethod queryMethod,\n-\t\t\tDatastoreTemplate datastoreTemplate,\n+\t\t\t\t\t\t\tDatastoreOperations datastoreTemplate,", "originalCommit": "5781a25e34e4fe645fd3bc9eee75f62426222595", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2c905b84eb9a3c578d03f8251396f94ae2b18edd", "chunk": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/AbstractDatastoreQuery.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/AbstractDatastoreQuery.java\nindex be7db563e..2251334ad 100644\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/AbstractDatastoreQuery.java\n+++ b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/AbstractDatastoreQuery.java\n\n@@ -40,15 +40,15 @@ public abstract class AbstractDatastoreQuery<T> implements RepositoryQuery {\n \n \tfinal DatastoreQueryMethod queryMethod;\n \n-\tfinal DatastoreOperations datastoreTemplate;\n+\tfinal DatastoreOperations datastoreOperations;\n \n \tfinal Class<T> entityType;\n \n \tpublic AbstractDatastoreQuery(DatastoreQueryMethod queryMethod,\n-\t\t\t\t\t\t\tDatastoreOperations datastoreTemplate,\n+\t\t\t\t\t\t\tDatastoreOperations datastoreOperations,\n \t\t\tDatastoreMappingContext datastoreMappingContext, Class<T> entityType) {\n \t\tthis.queryMethod = queryMethod;\n-\t\tthis.datastoreTemplate = datastoreTemplate;\n+\t\tthis.datastoreOperations = datastoreOperations;\n \t\tthis.datastoreMappingContext = datastoreMappingContext;\n \t\tthis.entityType = entityType;\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2ODU1MA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2437#discussion_r441268550", "bodyText": "Shouldn't it be getDatastoreOperations then?", "author": "meltsufin", "createdAt": "2020-06-17T04:06:50Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/AbstractDatastoreQuery.java", "diffHunk": "@@ -79,7 +79,7 @@ Object processRawObjectForProjection(Object object) {\n \t\treturn this.queryMethod.getResultProcessor().processResult(object);\n \t}\n \n-\tpublic DatastoreTemplate getDatastoreTemplate() {\n+\tpublic DatastoreOperations getDatastoreTemplate() {", "originalCommit": "5781a25e34e4fe645fd3bc9eee75f62426222595", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2c905b84eb9a3c578d03f8251396f94ae2b18edd", "chunk": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/AbstractDatastoreQuery.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/AbstractDatastoreQuery.java\nindex be7db563e..2251334ad 100644\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/AbstractDatastoreQuery.java\n+++ b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/AbstractDatastoreQuery.java\n\n@@ -79,8 +79,8 @@ public abstract class AbstractDatastoreQuery<T> implements RepositoryQuery {\n \t\treturn this.queryMethod.getResultProcessor().processResult(object);\n \t}\n \n-\tpublic DatastoreOperations getDatastoreTemplate() {\n-\t\treturn this.datastoreTemplate;\n+\tpublic DatastoreOperations getDatastoreOperations() {\n+\t\treturn this.datastoreOperations;\n \t}\n \n \tboolean isPageQuery() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2ODY0MA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2437#discussion_r441268640", "bodyText": "Unintentional spacing change?", "author": "meltsufin", "createdAt": "2020-06-17T04:07:15Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/support/DatastoreRepositoryFactory.java", "diffHunk": "@@ -66,7 +66,7 @@\n \t * repositories.\n \t */\n \tDatastoreRepositoryFactory(DatastoreMappingContext datastoreMappingContext,\n-\t\t\tDatastoreTemplate datastoreTemplate) {\n+\t\t\t\t\t\t\tDatastoreOperations datastoreTemplate) {", "originalCommit": "5781a25e34e4fe645fd3bc9eee75f62426222595", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2c905b84eb9a3c578d03f8251396f94ae2b18edd", "chunk": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/support/DatastoreRepositoryFactory.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/support/DatastoreRepositoryFactory.java\nindex 56ee6270e..ca9f6a23b 100644\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/support/DatastoreRepositoryFactory.java\n+++ b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/support/DatastoreRepositoryFactory.java\n\n@@ -62,17 +62,17 @@ public class DatastoreRepositoryFactory extends RepositoryFactorySupport\n \t * Constructor.\n \t * @param datastoreMappingContext the mapping context used to get mapping metadata for\n \t * entity types.\n-\t * @param datastoreTemplate the Datastore operations object used by Datastore\n+\t * @param datastoreOperations the Datastore operations object used by Datastore\n \t * repositories.\n \t */\n \tDatastoreRepositoryFactory(DatastoreMappingContext datastoreMappingContext,\n-\t\t\t\t\t\t\tDatastoreOperations datastoreTemplate) {\n+\t\t\tDatastoreOperations datastoreOperations) {\n \t\tAssert.notNull(datastoreMappingContext,\n \t\t\t\t\"A non-null Datastore mapping context is required.\");\n-\t\tAssert.notNull(datastoreTemplate,\n+\t\tAssert.notNull(datastoreOperations,\n \t\t\t\t\"A non-null Datastore template object is required.\");\n \t\tthis.datastoreMappingContext = datastoreMappingContext;\n-\t\tthis.datastoreTemplate = datastoreTemplate;\n+\t\tthis.datastoreOperations = datastoreOperations;\n \t}\n \n \t@Override\n"}}, {"oid": "2c905b84eb9a3c578d03f8251396f94ae2b18edd", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/2c905b84eb9a3c578d03f8251396f94ae2b18edd", "message": "fixed PR comments", "committedDate": "2020-06-18T14:41:19Z", "type": "commit"}]}