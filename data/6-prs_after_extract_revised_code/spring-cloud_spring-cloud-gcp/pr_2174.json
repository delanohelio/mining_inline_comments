{"pr_number": 2174, "pr_title": "Eager Interleaved support added to a @Query annotation (#2165)", "pr_createdAt": "2020-02-04T23:07:52Z", "pr_url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTMzMDc4NQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r375330785", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * Otherwise an SQL will be wrapped to eager-load lists with {@link Interleaved#lazy()} equals fo \"false\".\n          \n          \n            \n            \t * Otherwise an SQL will be wrapped to eager-load lists with {@link Interleaved#lazy()} equals to {@code false} .", "author": "dmitry-s", "createdAt": "2020-02-05T15:36:31Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java", "diffHunk": "@@ -51,4 +52,11 @@\n \t * query method is executed as a DML query.\n \t */\n \tboolean dmlStatement() default false;\n+\n+\t/**\n+\t * When {@code false} then any {@link Interleaved} lists of the fetched entity will be lazy-loaded.\n+\t * Otherwise an SQL will be wrapped to eager-load lists with {@link Interleaved#lazy()} equals fo \"false\".", "originalCommit": "bcd27c37d9057cfd65d9aababce1ddea11d41a27", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e70f46fc9240e72e2cabcffc6a3f8a530b45555d", "chunk": "diff --git a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java\nindex 450933b7d..05a1e0468 100644\n--- a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java\n+++ b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java\n\n@@ -55,8 +55,8 @@ public @interface Query {\n \n \t/**\n \t * When {@code false} then any {@link Interleaved} lists of the fetched entity will be lazy-loaded.\n-\t * Otherwise an SQL will be wrapped to eager-load lists with {@link Interleaved#lazy()} equals fo \"false\".\n-\t * @return {@code false} if {@link Interleaved} lists should be skipped.\n+\t * Otherwise an SQL will be wrapped to eager-load lists with {@link Interleaved#lazy()} equals to {@code false} .\n+\t * @return {@code true} if {@link Interleaved} lists should be fetched eagerly.\n \t */\n \tboolean fetchInterleaved() default false;\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTMzMTkzNg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r375331936", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * @return {@code false} if {@link Interleaved} lists should be skipped.\n          \n          \n            \n            \t * @return {@code true} if {@link Interleaved} lists should be fetched eagerly.", "author": "dmitry-s", "createdAt": "2020-02-05T15:38:14Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java", "diffHunk": "@@ -51,4 +52,11 @@\n \t * query method is executed as a DML query.\n \t */\n \tboolean dmlStatement() default false;\n+\n+\t/**\n+\t * When {@code false} then any {@link Interleaved} lists of the fetched entity will be lazy-loaded.\n+\t * Otherwise an SQL will be wrapped to eager-load lists with {@link Interleaved#lazy()} equals fo \"false\".\n+\t * @return {@code false} if {@link Interleaved} lists should be skipped.", "originalCommit": "bcd27c37d9057cfd65d9aababce1ddea11d41a27", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e70f46fc9240e72e2cabcffc6a3f8a530b45555d", "chunk": "diff --git a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java\nindex 450933b7d..05a1e0468 100644\n--- a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java\n+++ b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java\n\n@@ -55,8 +55,8 @@ public @interface Query {\n \n \t/**\n \t * When {@code false} then any {@link Interleaved} lists of the fetched entity will be lazy-loaded.\n-\t * Otherwise an SQL will be wrapped to eager-load lists with {@link Interleaved#lazy()} equals fo \"false\".\n-\t * @return {@code false} if {@link Interleaved} lists should be skipped.\n+\t * Otherwise an SQL will be wrapped to eager-load lists with {@link Interleaved#lazy()} equals to {@code false} .\n+\t * @return {@code true} if {@link Interleaved} lists should be fetched eagerly.\n \t */\n \tboolean fetchInterleaved() default false;\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTMzODEzOQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r375338139", "bodyText": "I think we should call it fetchInterleavedEagerly to make the name more precise.", "author": "dmitry-s", "createdAt": "2020-02-05T15:47:44Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java", "diffHunk": "@@ -51,4 +52,11 @@\n \t * query method is executed as a DML query.\n \t */\n \tboolean dmlStatement() default false;\n+\n+\t/**\n+\t * When {@code false} then any {@link Interleaved} lists of the fetched entity will be lazy-loaded.\n+\t * Otherwise an SQL will be wrapped to eager-load lists with {@link Interleaved#lazy()} equals fo \"false\".\n+\t * @return {@code false} if {@link Interleaved} lists should be skipped.\n+\t */\n+\tboolean fetchInterleaved() default false;", "originalCommit": "bcd27c37d9057cfd65d9aababce1ddea11d41a27", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUyMjMwOA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r375522308", "bodyText": "Well, it still not a perfect name. I hear it like \"fetchAnyInterleavedAlwaysEagerly\". And the fetchInterleavedEagerly is still a very long name.\nIn the worst situation, any interleaved will be proxied and lazy-fetched in any case.\nHow about to rename it to eagerFetch? it sounds like - by default we have a lazy-fetch but we can enable eager-fetch when needed.\n\"There are only two hard things in Computer Science: cache invalidation and naming things.\"\n-- Phil Karlton", "author": "s13o", "createdAt": "2020-02-05T21:38:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTMzODEzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUzNzk3OQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r375537979", "bodyText": "I'm OK with fetchInterleaved. I would just ask to create an integration test that uses @Query(.... fetchInterleaved=true) directly on an actual repository.", "author": "meltsufin", "createdAt": "2020-02-05T22:13:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTMzODEzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "e70f46fc9240e72e2cabcffc6a3f8a530b45555d", "chunk": "diff --git a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java\nindex 450933b7d..05a1e0468 100644\n--- a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java\n+++ b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java\n\n@@ -55,8 +55,8 @@ public @interface Query {\n \n \t/**\n \t * When {@code false} then any {@link Interleaved} lists of the fetched entity will be lazy-loaded.\n-\t * Otherwise an SQL will be wrapped to eager-load lists with {@link Interleaved#lazy()} equals fo \"false\".\n-\t * @return {@code false} if {@link Interleaved} lists should be skipped.\n+\t * Otherwise an SQL will be wrapped to eager-load lists with {@link Interleaved#lazy()} equals to {@code false} .\n+\t * @return {@code true} if {@link Interleaved} lists should be fetched eagerly.\n \t */\n \tboolean fetchInterleaved() default false;\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM0Mjc2Mg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r375342762", "bodyText": "move \" \" + persistentEntity.tableName() to the line where you initialize final String subquery, then you could just use .append(subquery) here", "author": "dmitry-s", "createdAt": "2020-02-05T15:54:30Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -131,24 +131,29 @@ private SpannerStatementQueryExecutor() {\n \t * @param sql the sql that will be wrapped with sorting and paging options.\n \t * @param mappingContext a mapping context to convert between Cloud Spanner column names\n \t *     and underlying property names.\n+\t * @param fetchInterleaved when {@code true} additional subqueries will be added\n+\t *     to fetch eager-Interleaved lists with a single query.   .\n \t * @param <T> the domain type.\n \t * @return the final SQL string with paging and sorting applied.\n \t */\n \tpublic static <T> String applySortingPagingQueryOptions(Class<T> entityClass,\n \t\t\tSpannerPageableQueryOptions options, String sql,\n-\t\t\tSpannerMappingContext mappingContext) {\n+\t\t\tSpannerMappingContext mappingContext, boolean fetchInterleaved) {\n \t\tSpannerPersistentEntity<?> persistentEntity = mappingContext\n \t\t\t\t.getPersistentEntity(entityClass);\n \n \t\t// Cloud Spanner does not preserve the order of derived tables so we must not wrap the\n \t\t// derived table\n \t\t// in SELECT * FROM () if there is no overriding pageable param.\n \t\tif ((options.getSort() == null || options.getSort().isUnsorted()) && options.getLimit() == null\n-\t\t\t\t&& options.getOffset() == null) {\n+\t\t\t\t&& options.getOffset() == null && !fetchInterleaved) {\n \t\t\treturn sql;\n \t\t}\n-\t\tStringBuilder sb = SpannerStatementQueryExecutor.applySort(options.getSort(),\n-\t\t\t\tnew StringBuilder(\"SELECT * FROM (\").append(sql).append(\")\"), (o) -> {\n+\t\tfinal String subquery = fetchInterleaved ? getChildrenSubquery(persistentEntity, mappingContext) : \"\";\n+\t\tStringBuilder sb = applySort(options.getSort(),\n+\t\t\t\tnew StringBuilder(\"SELECT *\").append(subquery)\n+\t\t\t\t\t\t.append(\" FROM (\").append(sql).append(\")\")\n+\t\t\t\t\t\t.append(subquery.isEmpty() ? \"\" : \" \" + persistentEntity.tableName()), (o) -> {", "originalCommit": "bcd27c37d9057cfd65d9aababce1ddea11d41a27", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e70f46fc9240e72e2cabcffc6a3f8a530b45555d", "chunk": "diff --git a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java\nindex 15d69be1f..67c3a3f6c 100644\n--- a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java\n+++ b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java\n\n@@ -150,10 +150,11 @@ public final class SpannerStatementQueryExecutor {\n \t\t\treturn sql;\n \t\t}\n \t\tfinal String subquery = fetchInterleaved ? getChildrenSubquery(persistentEntity, mappingContext) : \"\";\n+\t\tfinal String alias = subquery.isEmpty() ? \"\" : \" \" + persistentEntity.tableName();\n \t\tStringBuilder sb = applySort(options.getSort(),\n \t\t\t\tnew StringBuilder(\"SELECT *\").append(subquery)\n-\t\t\t\t\t\t.append(\" FROM (\").append(sql).append(\")\")\n-\t\t\t\t\t\t.append(subquery.isEmpty() ? \"\" : \" \" + persistentEntity.tableName()), (o) -> {\n+\t\t\t\t\t\t.append(\" FROM (\").append(sql).append(\")\").append(alias),\n+\t\t\t\t(o) -> {\n \t\t\t\t\tSpannerPersistentProperty property = persistentEntity\n \t\t\t\t\t\t\t.getPersistentProperty(o.getProperty());\n \t\t\t\t\treturn (property != null) ? property.getColumnName() : o.getProperty();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM0Njc4Mg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r375346782", "bodyText": "why was String.join(\", \", spannerPersistentEntity.columns()) removed?", "author": "dmitry-s", "createdAt": "2020-02-05T16:00:25Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -303,18 +308,23 @@ private static void bindParameter(ValueBinder<Statement.Builder> bind,\n \n \tpublic static String getColumnsStringForSelect(\n \t\t\tSpannerPersistentEntity<?> spannerPersistentEntity, SpannerMappingContext mappingContext) {\n+\t\treturn String.join(\", \", spannerPersistentEntity.columns())\n+\t\t\t\t+ getChildrenSubquery(spannerPersistentEntity, mappingContext);\n+\t}\n+\n+\tprivate static String getChildrenSubquery(\n+\t\t\tSpannerPersistentEntity<?> spannerPersistentEntity, SpannerMappingContext mappingContext) {\n \t\tStringJoiner joiner = new StringJoiner(\", \");\n \t\tspannerPersistentEntity.doWithInterleavedProperties(spannerPersistentProperty -> {\n \t\t\tif (spannerPersistentProperty.isEagerInterleaved()) {\n \t\t\t\tClass childType = spannerPersistentProperty.getColumnInnerType();\n \t\t\t\tSpannerPersistentEntity childPersistentEntity = mappingContext.getPersistentEntity(childType);\n \t\t\t\tjoiner.add(getChildrenStructsQuery(\n-\t\t\t\t\tchildPersistentEntity, spannerPersistentEntity, mappingContext, spannerPersistentProperty.getColumnName()));\n+\t\t\t\t\t\tchildPersistentEntity, spannerPersistentEntity, mappingContext, spannerPersistentProperty.getColumnName()));\n \t\t\t}\n \t\t});\n-\t\tString childrenSubquery = joiner.toString();\n-\t\treturn String.join(\", \", spannerPersistentEntity.columns())", "originalCommit": "bcd27c37d9057cfd65d9aababce1ddea11d41a27", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUyNTI0Nw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r375525247", "bodyText": "It is not removed - I've split an old method getColumnsStringForSelect on two - a new method getChildrenSubquery + old method getColumnsStringForSelect\nSo the old method now looks like\n\tpublic static String getColumnsStringForSelect(\n\t\t\tSpannerPersistentEntity<?> spannerPersistentEntity, SpannerMappingContext mappingContext) {\n\t\treturn String.join(\", \", spannerPersistentEntity.columns())\n\t\t\t\t+ getChildrenSubquery(spannerPersistentEntity, mappingContext);\n\t}\nand all \"joins\" are in place", "author": "s13o", "createdAt": "2020-02-05T21:44:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM0Njc4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk2MTczMg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r375961732", "bodyText": "I see, makes sense", "author": "dmitry-s", "createdAt": "2020-02-06T17:01:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM0Njc4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "46ef7f0f0db65300c97c5a8f7781a9fa35e15ffa", "chunk": "diff --git a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java\nindex 15d69be1f..dc320683c 100644\n--- a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java\n+++ b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java\n\n@@ -306,10 +331,10 @@ public final class SpannerStatementQueryExecutor {\n \t\t}\n \t}\n \n-\tpublic static String getColumnsStringForSelect(\n-\t\t\tSpannerPersistentEntity<?> spannerPersistentEntity, SpannerMappingContext mappingContext) {\n-\t\treturn String.join(\", \", spannerPersistentEntity.columns())\n-\t\t\t\t+ getChildrenSubquery(spannerPersistentEntity, mappingContext);\n+\tpublic static String getColumnsStringForSelect(SpannerPersistentEntity<?> spannerPersistentEntity,\n+\t\t\tSpannerMappingContext mappingContext, boolean fetchInterleaved) {\n+\t\tfinal String sql = String.join(\", \", spannerPersistentEntity.columns());\n+\t\treturn fetchInterleaved ? sql + getChildrenSubquery(spannerPersistentEntity, mappingContext) : sql;\n \t}\n \n \tprivate static String getChildrenSubquery(\n"}}, {"oid": "e70f46fc9240e72e2cabcffc6a3f8a530b45555d", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/e70f46fc9240e72e2cabcffc6a3f8a530b45555d", "message": "Integration test added (#2165)", "committedDate": "2020-02-06T02:52:21Z", "type": "forcePushed"}, {"oid": "710f66fc50da4836297175698b6d79135f694c71", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/710f66fc50da4836297175698b6d79135f694c71", "message": "Integration test added (#2165)", "committedDate": "2020-02-06T14:11:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxOTMxNw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r375619317", "bodyText": "The test fails on line 279 - the \"lazy-fetch\" is not work as expected (as it was before merge PR #2132) and the t.getSubTrades() returns an empty collection. Is it OK?\nThe Mockito.verify on line 280 also fails - a \"lazy-load-logic\" is not invoked.\nI did a separate local branch from rev 26e9adf and run a similar test against it.\nIn that brach, the followed test passed fine\n\t\tMockito.clearInvocations(spannerTemplate);\n\t\tassertThat(tradeRepository.fetchByIdLazy(aTrade.getId()))\n\t\t\t\t.isNotEmpty()\n\t\t\t\t.hasValueSatisfying(t -> assertThat(t.getId()).isEqualTo(aTrade.getId()))\n\t\t\t\t.hasValueSatisfying(t -> assertThat(t.getTraderId()).isEqualTo(aTrade.getTraderId()))\n\t\t\t\t.hasValueSatisfying(t -> assertThat(t.getSymbol()).isEqualTo(aTrade.getSymbol()))\n\t\t\t\t.hasValueSatisfying(t -> assertThat(t.getSubTrades()).hasSize(aTrade.getSubTrades().size()));\n\t\tMockito.verify(spannerTemplate, Mockito.times(2))\n\t\t\t\t.executeQuery(any(Statement.class), any());\n\t\tMockito.verify(spannerTemplate, Mockito.times(1))\n\t\t\t\t.query(eq(Trade.class), any(Statement.class), any(SpannerQueryOptions.class));\nI think the PR #2132 did a bug with @query annotation.\nWill try to find & fix it with next commits", "author": "s13o", "createdAt": "2020-02-06T03:00:24Z", "path": "spring-cloud-gcp-data-spanner/src/test/java/org/springframework/cloud/gcp/data/spanner/repository/it/SpannerRepositoryIntegrationTests.java", "diffHunk": "@@ -246,6 +255,28 @@ public void queryMethodsTest() {\n \t\tassertThat(this.subTradeRepository.count()).isEqualTo(2);\n \t\tassertThat(this.subTradeComponentRepository.count()).isEqualTo(3);\n \n+\t\t// test eager-fetch in @Query\n+\t\tMockito.clearInvocations(spannerTemplate);\n+\t\tfinal Trade aTrade = someTrade;\n+\t\tassertThat(tradeRepository.fetchByIdEagerly(aTrade.getId()))\n+\t\t\t\t.isNotEmpty()\n+\t\t\t\t.hasValueSatisfying(t -> assertThat(t.getId()).isEqualTo(aTrade.getId()))\n+\t\t\t\t.hasValueSatisfying(t -> assertThat(t.getTraderId()).isEqualTo(aTrade.getTraderId()))\n+\t\t\t\t.hasValueSatisfying(t -> assertThat(t.getSymbol()).isEqualTo(aTrade.getSymbol()))\n+\t\t\t\t.hasValueSatisfying(t -> assertThat(t.getSubTrades()).hasSize(aTrade.getSubTrades().size()));\n+\t\tMockito.verify(spannerTemplate, Mockito.times(1))\n+\t\t\t\t.executeQuery(any(Statement.class), any(SpannerQueryOptions.class));\n+\n+\t\tMockito.clearInvocations(spannerTemplate);\n+\t\tassertThat(tradeRepository.fetchByIdLazy(aTrade.getId()))\n+\t\t\t\t.isNotEmpty()\n+\t\t\t\t.hasValueSatisfying(t -> assertThat(t.getId()).isEqualTo(aTrade.getId()))\n+\t\t\t\t.hasValueSatisfying(t -> assertThat(t.getTraderId()).isEqualTo(aTrade.getTraderId()))\n+\t\t\t\t.hasValueSatisfying(t -> assertThat(t.getSymbol()).isEqualTo(aTrade.getSymbol()))\n+\t\t\t\t.hasValueSatisfying(t -> assertThat(t.getSubTrades()).hasSize(aTrade.getSubTrades().size()));", "originalCommit": "e70f46fc9240e72e2cabcffc6a3f8a530b45555d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTg5MjAyNg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r375892026", "bodyText": "the Trade has default value for subTrades field like\n\t@Interleaved\n\tprivate List<SubTrade> subTrades = Collections.emptyList();\nThan is why such non-null validation in class SpannerTemplate line 588 is not enouph\n\t\t\t\t\t//an interleaved property can only be List\n\t\t\t\t\tList propertyValue = (List) accessor.getProperty(spannerPersistentProperty);\n\t\t\t\t\tif (propertyValue != null) {\n\t\t\t\t\t\tresolveChildEntities(propertyValue, null);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\nIt was added after the rev: 26e9adf", "author": "s13o", "createdAt": "2020-02-06T15:12:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxOTMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk2MjkzMA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r375962930", "bodyText": "Good catch. How do you think that can be fixed?\nMaybe we should nullify the laze loaded fields on the parent entity retrieval?", "author": "dmitry-s", "createdAt": "2020-02-06T17:03:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxOTMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk3MTcxOA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r375971718", "bodyText": "I've tried to tell about this problem we could potentially have before but my Eng is not so fluent to be clear, sorry.\nI have no clever idea yet :(\nI think the most strong solution could be to have some additional flag in aspannerPersistentProperty that it has been populated already.\n\"nulling\" of fields is not a good idea - the field could be created by Lombok builder and it could be a business logic (like enty-to-json transformers) that expect the field can never be null", "author": "s13o", "createdAt": "2020-02-06T17:19:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxOTMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk5OTExMQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r375999111", "bodyText": "Discussing with @dmitry-s offline, he pointed out that it would just be null until someone tries to access it, at which point it will be lazy-loaded. So, no one should ever see it as null.", "author": "meltsufin", "createdAt": "2020-02-06T18:13:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxOTMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAwMDk2OQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r376000969", "bodyText": "It sounds like a hack.\nWhat the next step should be? Are we going to merge this PR and will do a fix later or we can collaborate somehow in another way?", "author": "s13o", "createdAt": "2020-02-06T18:17:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxOTMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA0NzQ5OA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r376047498", "bodyText": "I will add a fix in this branch.", "author": "dmitry-s", "createdAt": "2020-02-06T19:51:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxOTMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA0OTUxMA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r376049510", "bodyText": "so few I know about the GitHub : (", "author": "s13o", "createdAt": "2020-02-06T19:55:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxOTMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEwMzMwNA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r376103304", "bodyText": "Sorry, my test was wrong. You are right, it is because of the default value.", "author": "dmitry-s", "createdAt": "2020-02-06T21:53:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxOTMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEwNDQ3NQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r376104475", "bodyText": "in theory, we can to some \"magic proxy\" for each interleaved ... but it seems to be too complex to be stable", "author": "s13o", "createdAt": "2020-02-06T21:56:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxOTMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEwNzEyMw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r376107123", "bodyText": "we can do a very simple decision - if the code reached line 593 of SpannerTemplate line it means that any eager-interleaved is already fetched so any other should be a proxy for \"lazy-interleaved\"\nI think the only scenario when it is not true - it is @query(fetchInterleaved=false)\nIs not it?\nProbably I'm wrong...", "author": "s13o", "createdAt": "2020-02-06T22:02:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxOTMxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjExMTkyOQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r376111929", "bodyText": "in my implementation of PR #2132 I built an SQL-query (ResultSet) and a function to process it at the same time in parallel - it was a \"pair\". So when I'm started to process RS I had only to invoke a function.\nYour PR is much simple so it is better, but there is a single place here where it is difficult to understand which fields are populated already.\nI don't understand how this magic method works (ConverterAwareMappingSpannerEntityProcessor#mapToList(com.google.cloud.spanner.ResultSet, java.lang.Class, java.util.Set<java.lang.String>, boolean))\nentityReader.read(entityClass,\n\tresultSet.getCurrentRowAsStruct(),\n\tincludeColumns,\n\tallowMissingColumns)\n\nAnd I can't propose any solution yet :(\nBut this method is a good place to mark any Interleaved as 'populated' at processing of it", "author": "s13o", "createdAt": "2020-02-06T22:13:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxOTMxNw=="}], "type": "inlineReview", "revised_code": {"commit": "710f66fc50da4836297175698b6d79135f694c71", "chunk": "diff --git a/spring-cloud-gcp-data-spanner/src/test/java/org/springframework/cloud/gcp/data/spanner/repository/it/SpannerRepositoryIntegrationTests.java b/spring-cloud-gcp-data-spanner/src/test/java/org/springframework/cloud/gcp/data/spanner/repository/it/SpannerRepositoryIntegrationTests.java\nindex ac8beaaae..977d80d48 100644\n--- a/spring-cloud-gcp-data-spanner/src/test/java/org/springframework/cloud/gcp/data/spanner/repository/it/SpannerRepositoryIntegrationTests.java\n+++ b/spring-cloud-gcp-data-spanner/src/test/java/org/springframework/cloud/gcp/data/spanner/repository/it/SpannerRepositoryIntegrationTests.java\n\n@@ -265,7 +266,9 @@ public class SpannerRepositoryIntegrationTests extends AbstractSpannerIntegratio\n \t\t\t\t.hasValueSatisfying(t -> assertThat(t.getSymbol()).isEqualTo(aTrade.getSymbol()))\n \t\t\t\t.hasValueSatisfying(t -> assertThat(t.getSubTrades()).hasSize(aTrade.getSubTrades().size()));\n \t\tMockito.verify(spannerTemplate, Mockito.times(1))\n-\t\t\t\t.executeQuery(any(Statement.class), any(SpannerQueryOptions.class));\n+\t\t\t\t.executeQuery(any(Statement.class), any());\n+\t\tMockito.verify(spannerTemplate, Mockito.times(1))\n+\t\t\t\t.query(eq(Trade.class), any(Statement.class), any(SpannerQueryOptions.class));\n \n \t\tMockito.clearInvocations(spannerTemplate);\n \t\tassertThat(tradeRepository.fetchByIdLazy(aTrade.getId()))\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5NzE4MQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r377297181", "bodyText": "Could you clarify what is this method for?", "author": "dmitry-s", "createdAt": "2020-02-10T20:26:02Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -162,6 +171,27 @@ private SpannerStatementQueryExecutor() {\n \t\treturn sb.toString();\n \t}\n \n+\tprivate static String fetchInterleaved(String sql,\n+\t\t\tSpannerPersistentEntity<?> persistentEntity, SpannerMappingContext mappingContext, boolean fetchInterleaved) {\n+\t\tif (!fetchInterleaved) {\n+\t\t\treturn sql;\n+\t\t}\n+\n+\t\tfinal String subquery = getChildrenSubquery(persistentEntity, mappingContext);\n+\t\tif (subquery.isEmpty()) {\n+\t\t\treturn sql;\n+\t\t}\n+\n+\t\tfinal Pair<String, String> parts = splitSelectAll(sql);\n+\t\treturn parts.getSecond().isEmpty() ? sql : parts.getFirst() + subquery + parts.getSecond();\n+\t}\n+\n+\tprivate static Pair<String, String> splitSelectAll(String sql) {", "originalCommit": "025386048f0175c53d25bdda0f81ff6fb81446ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY1NDk1Nw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r377654957", "bodyText": "The method name is probably bad, but...\nThe initial idea of interleaved eager-fetching was to use wrapped query SELECT *, <interlieved-sub-select> FROM (<initial query>) in the same way as the method applySort at line 160. It was fine until we decided to use the fetchInterleaved as permanently true. After a number of failed integration tests and attempts to fix them, I understood that the wrapped query will not work in general. Mainly because of Spanner does not preserve sort ordering of wrapped queries.\nThen I concluded - when the user has created an SQL with a complete list of fields to select it is not really good idea to add some more fields with additional sub-selects - it could really affect performance to select fields that were not requested. But when the query is like \"select * from Table ...\" - it is the best candidate to split it into two parts an add interleaved fields into the middle. Like \"select *, \" + <interlieved> + \" from Table ...\" and it does not break any skip\\limit or sorting conditions.", "author": "s13o", "createdAt": "2020-02-11T14:07:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5NzE4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc4ODgyNA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r377788824", "bodyText": "I don't really like that we have to rely on SELECT_ALL_PATTERN, there could be cases where it doesn't work and that would lead to inconsistent behavior. It is not transparent and would be hard to detect.\nIs there a way to avoid regex matching? What if we use joins instead of sub-queries?", "author": "dmitry-s", "createdAt": "2020-02-11T17:34:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5NzE4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA5MDY2NA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r379090664", "bodyText": "To clarify, the query I'm thinking about would be something like that:\nSELECT    singers.*,\n          array_agg(struct(albumid, albumtitle, array\n          (\n                 select as struct *\n                 FROM   songs\n                 WHERE  songs.singerid = albums.singerid\n                 AND    songs.albumid = albums.albumid))) AS albums\nFROM      (\n                 SELECT *\n                 FROM   singers\n                 WHERE  singerid = 1) AS singers\nLEFT JOIN albums\nON        albums.singerid = singers.singerid\nGROUP BY  singers.singerid,\n          singers.name \nLIMIT      10\nOFFSET     30 \n\nwhere SELECT * FROM   singers WHERE  singerid = 1 is the user-provided query.\nWhat do you think about that approach?", "author": "dmitry-s", "createdAt": "2020-02-13T20:06:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5NzE4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTExNDI1OQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r379114259", "bodyText": "I understood\nIt looks more complex but the main - it is not clear how to process such resultset", "author": "s13o", "createdAt": "2020-02-13T20:57:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5NzE4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyMzI4MA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r379123280", "bodyText": "the new version is better :)", "author": "s13o", "createdAt": "2020-02-13T21:17:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5NzE4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzMjI1MQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r379132251", "bodyText": "here we have original SQL as a source for a new query - it is pointed in \"... FROM (SELECT * FROM   singers WHERE  singerid = 1)\".\nBut the sort order of such SQL is not preserved", "author": "s13o", "createdAt": "2020-02-13T21:36:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5NzE4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE2NTU3Mw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r379165573", "bodyText": "Does it preserve order in current implementation? I believe we wrap the user-provided query in SELECT * FROM (<query>) LIMIT .. OFFSET ..", "author": "dmitry-s", "createdAt": "2020-02-13T22:55:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5NzE4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM1NjAwNA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r379356004", "bodyText": "No, it does not.\nThat is a major problem. :(\nWe have an integration test that will fail.\nWith such \"wrapping\" some test from SpannerRepositoryIntegrationTests#queryMethodsTest line ~ 192 could fails unpredictable on assertions isGreaterThan like\n\t\tList<Trade> buyTradesRetrieved = this.tradeRepository\n\t\t\t\t.annotatedTradesByAction(\"BUY\");\n\t\tassertThat(buyTradesRetrieved).containsExactlyInAnyOrderElementsOf(trader1BuyTrades);\n\t\tassertThat(buyTradesRetrieved.get(0).getId()).isGreaterThan(buyTradesRetrieved.get(1).getId());\n\t\tassertThat(buyTradesRetrieved.get(1).getId()).isGreaterThan(buyTradesRetrieved.get(2).getId());", "author": "s13o", "createdAt": "2020-02-14T10:26:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5NzE4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM1OTE5MA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r379359190", "bodyText": "We really wrap the user-provided queries by SELECT * FROM (<query>) LIMIT .. OFFSET ... We doing it ONLY when we have a SpannerPageableQueryOptions parameter - in such case any \"sorting\" from it will overwrite the pointed by the SQL itself. And we should at least specify it in the documentation I believe.", "author": "s13o", "createdAt": "2020-02-14T10:33:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5NzE4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUwODM2MQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r379508361", "bodyText": "I think we should just accept the fact that the sort order in custom @Querys will not be preserved. The solutions is to pass in the sort order in the Pageable argument. This is definitely something that needs to be in our refdoc.", "author": "meltsufin", "createdAt": "2020-02-14T15:57:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5NzE4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUxODg3OA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r379518878", "bodyText": "@s13o I think it's ok if ordering is not preserved. We apply ordering from Pageable, and that's how it should be passed.\nCould you roll back changes that introduced regexp?\nI think after that we should be able to merge this PR.\nThanks", "author": "dmitry-s", "createdAt": "2020-02-14T16:16:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5NzE4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU1NzEyOA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r379557128", "bodyText": "oops, will try\nbut I'll have to change the test SpannerRepositoryIntegrationTests#queryMethodsTest line ~ 192", "author": "s13o", "createdAt": "2020-02-14T17:35:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5NzE4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU2MDc0Mg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r379560742", "bodyText": "May I ask you, why you don't like the idea to inject child-subquery after \"select *\"? It seems to be simple enough. I can't really imagine a case when it could fail. Right now - the only leading spaces can affect it. Ok, the regex could be like\nPattern.compile(\"^\\\\s+?select(\\\\s+?all|\\\\s+?distinct)*(?<star>\\\\s+?\\\\*)\", Pattern.CASE_INSENSITIVE);\nThe query is parsed only once, it is from an annotation, so we can cache the result and it should not affect performance.", "author": "s13o", "createdAt": "2020-02-14T17:44:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5NzE4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU2MTE2NA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r379561164", "bodyText": "Sounds good. The sort order should be determined by the Pageable that is passed to the method. That is:\nPageRequest.of(2, 2, org.springframework.data.domain.Sort.by(Order.asc(\"id\")))\n\nlines 188-189", "author": "dmitry-s", "createdAt": "2020-02-14T17:45:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5NzE4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU2MjI2MQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r379562261", "bodyText": "but you didn't answer me about the regex.\nYou probably don't like Pearl :)", "author": "s13o", "createdAt": "2020-02-14T17:47:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5NzE4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU2MzMyNg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r379563326", "bodyText": "I need to have it merged so I'll revert the regex, but, please your opinion is very important to me.", "author": "s13o", "createdAt": "2020-02-14T17:50:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5NzE4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5MDM5OQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r379590399", "bodyText": "@s13o We avoid parsing the SQL in principle. Experience has taught us that it's a rather risky option. Even augmenting queries is risky, but we decided to go with it in the absence of better alternatives.\nFor example, note that Spanner SQL may contain query hints. That's one situation where parsing can fall apart.", "author": "meltsufin", "createdAt": "2020-02-14T18:53:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5NzE4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5NDk5OQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r379594999", "bodyText": "@s13o You don't have to merge it to undo a commit. I think git revert <commit hash> should do the trick.", "author": "dmitry-s", "createdAt": "2020-02-14T19:03:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5NzE4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5NTQ3Ng==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r379595476", "bodyText": "You goddamn right. I also hated the idea to parse the SQL from the beginning but saw no other alternative to satisfy failed IT tests.\nMany thanks for the beautiful explanation.", "author": "s13o", "createdAt": "2020-02-14T19:05:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5NzE4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY3NTY1OA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r380675658", "bodyText": "@s13o You don't have to merge it to undo a commit. I think git revert <commit hash> should do the trick.\n\nFinally, I found a time to complete the PR!\nSorry for the delay, please review.", "author": "s13o", "createdAt": "2020-02-18T13:38:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5NzE4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "4536248b7b90a93befb989532b5e5f92637de135", "chunk": "diff --git a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java\nindex dc320683c..15d69be1f 100644\n--- a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java\n+++ b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java\n\n@@ -171,27 +167,6 @@ public final class SpannerStatementQueryExecutor {\n \t\treturn sb.toString();\n \t}\n \n-\tprivate static String fetchInterleaved(String sql,\n-\t\t\tSpannerPersistentEntity<?> persistentEntity, SpannerMappingContext mappingContext, boolean fetchInterleaved) {\n-\t\tif (!fetchInterleaved) {\n-\t\t\treturn sql;\n-\t\t}\n-\n-\t\tfinal String subquery = getChildrenSubquery(persistentEntity, mappingContext);\n-\t\tif (subquery.isEmpty()) {\n-\t\t\treturn sql;\n-\t\t}\n-\n-\t\tfinal Pair<String, String> parts = splitSelectAll(sql);\n-\t\treturn parts.getSecond().isEmpty() ? sql : parts.getFirst() + subquery + parts.getSecond();\n-\t}\n-\n-\tprivate static Pair<String, String> splitSelectAll(String sql) {\n-\t\tMatcher matcher = SELECT_ALL_PATTERN.matcher(sql);\n-\t\treturn !matcher.find() ? Pair.of(sql, \"\")\n-\t\t\t\t: Pair.of(sql.substring(0, matcher.end(\"star\")), sql.substring(matcher.end(\"star\")));\n-\t}\n-\n \t/**\n \t * Gets a {@link Statement} that returns the rows associated with a parent entity. This function is\n \t * intended to be used with parent-child interleaved tables, so that the retrieval of all\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5NzUzMg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r377297532", "bodyText": "T is never used, please remove", "author": "dmitry-s", "createdAt": "2020-02-10T20:26:44Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerTemplate.java", "diffHunk": "@@ -352,25 +352,25 @@ private void applyDeleteMutations(Iterable<?> objects, List<Mutation> mutations)\n \t}\n \n \t@Override\n-\tpublic void delete(Class entityClass, Key key) {\n+\tpublic <T> void delete(Class<T> entityClass, Key key) {", "originalCommit": "025386048f0175c53d25bdda0f81ff6fb81446ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY0MzAxNQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r377643015", "bodyText": "Inherited from the SpannerOperations", "author": "s13o", "createdAt": "2020-02-11T13:47:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5NzUzMg=="}], "type": "inlineReview", "revised_code": {"commit": "4536248b7b90a93befb989532b5e5f92637de135", "chunk": "diff --git a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerTemplate.java b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerTemplate.java\nindex 6241974e8..71c2b8608 100644\n--- a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerTemplate.java\n+++ b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerTemplate.java\n\n@@ -352,25 +352,25 @@ public class SpannerTemplate implements SpannerOperations, ApplicationEventPubli\n \t}\n \n \t@Override\n-\tpublic <T> void delete(Class<T> entityClass, Key key) {\n+\tpublic void delete(Class entityClass, Key key) {\n \t\tapplyDeleteMutations(entityClass, KeySet.newBuilder().addKey(key).build(),\n \t\t\t\tCollections.singletonList(this.mutationFactory.delete(entityClass, key)));\n \t}\n \n \t@Override\n-\tpublic <T> void delete(Class<T> entityClass, KeySet keys) {\n+\tpublic void delete(Class entityClass, KeySet keys) {\n \t\tapplyDeleteMutations(entityClass, keys, Collections\n \t\t\t\t.singletonList(this.mutationFactory.delete(entityClass, keys)));\n \t}\n \n-\tprivate <T> void applyDeleteMutations(Class<T> entityClass, KeySet keys, List<Mutation> mutations) {\n+\tprivate void applyDeleteMutations(Class entityClass, KeySet keys, List<Mutation> mutations) {\n \t\tmaybeEmitEvent(new BeforeDeleteEvent(mutations, null, keys, entityClass));\n \t\tapplyMutations(mutations);\n \t\tmaybeEmitEvent(new AfterDeleteEvent(mutations, null, keys, entityClass));\n \t}\n \n \t@Override\n-\tpublic <T> long count(Class<T> entityClass) {\n+\tpublic long count(Class entityClass) {\n \t\tSpannerPersistentEntity<?> persistentEntity = this.mappingContext\n \t\t\t\t.getPersistentEntity(entityClass);\n \t\tStatement statement = Statement.of(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5NzU3Nw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r377297577", "bodyText": "T is never used, please remove", "author": "dmitry-s", "createdAt": "2020-02-10T20:26:49Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerTemplate.java", "diffHunk": "@@ -352,25 +352,25 @@ private void applyDeleteMutations(Iterable<?> objects, List<Mutation> mutations)\n \t}\n \n \t@Override\n-\tpublic void delete(Class entityClass, Key key) {\n+\tpublic <T> void delete(Class<T> entityClass, Key key) {\n \t\tapplyDeleteMutations(entityClass, KeySet.newBuilder().addKey(key).build(),\n \t\t\t\tCollections.singletonList(this.mutationFactory.delete(entityClass, key)));\n \t}\n \n \t@Override\n-\tpublic void delete(Class entityClass, KeySet keys) {\n+\tpublic <T> void delete(Class<T> entityClass, KeySet keys) {", "originalCommit": "025386048f0175c53d25bdda0f81ff6fb81446ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY0MjYxMA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r377642610", "bodyText": "Inherited from the SpannerOperations", "author": "s13o", "createdAt": "2020-02-11T13:46:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5NzU3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "4536248b7b90a93befb989532b5e5f92637de135", "chunk": "diff --git a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerTemplate.java b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerTemplate.java\nindex 6241974e8..71c2b8608 100644\n--- a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerTemplate.java\n+++ b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerTemplate.java\n\n@@ -352,25 +352,25 @@ public class SpannerTemplate implements SpannerOperations, ApplicationEventPubli\n \t}\n \n \t@Override\n-\tpublic <T> void delete(Class<T> entityClass, Key key) {\n+\tpublic void delete(Class entityClass, Key key) {\n \t\tapplyDeleteMutations(entityClass, KeySet.newBuilder().addKey(key).build(),\n \t\t\t\tCollections.singletonList(this.mutationFactory.delete(entityClass, key)));\n \t}\n \n \t@Override\n-\tpublic <T> void delete(Class<T> entityClass, KeySet keys) {\n+\tpublic void delete(Class entityClass, KeySet keys) {\n \t\tapplyDeleteMutations(entityClass, keys, Collections\n \t\t\t\t.singletonList(this.mutationFactory.delete(entityClass, keys)));\n \t}\n \n-\tprivate <T> void applyDeleteMutations(Class<T> entityClass, KeySet keys, List<Mutation> mutations) {\n+\tprivate void applyDeleteMutations(Class entityClass, KeySet keys, List<Mutation> mutations) {\n \t\tmaybeEmitEvent(new BeforeDeleteEvent(mutations, null, keys, entityClass));\n \t\tapplyMutations(mutations);\n \t\tmaybeEmitEvent(new AfterDeleteEvent(mutations, null, keys, entityClass));\n \t}\n \n \t@Override\n-\tpublic <T> long count(Class<T> entityClass) {\n+\tpublic long count(Class entityClass) {\n \t\tSpannerPersistentEntity<?> persistentEntity = this.mappingContext\n \t\t\t\t.getPersistentEntity(entityClass);\n \t\tStatement statement = Statement.of(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5NzYzNQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r377297635", "bodyText": "T is never used, please remove", "author": "dmitry-s", "createdAt": "2020-02-10T20:26:57Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerTemplate.java", "diffHunk": "@@ -352,25 +352,25 @@ private void applyDeleteMutations(Iterable<?> objects, List<Mutation> mutations)\n \t}\n \n \t@Override\n-\tpublic void delete(Class entityClass, Key key) {\n+\tpublic <T> void delete(Class<T> entityClass, Key key) {\n \t\tapplyDeleteMutations(entityClass, KeySet.newBuilder().addKey(key).build(),\n \t\t\t\tCollections.singletonList(this.mutationFactory.delete(entityClass, key)));\n \t}\n \n \t@Override\n-\tpublic void delete(Class entityClass, KeySet keys) {\n+\tpublic <T> void delete(Class<T> entityClass, KeySet keys) {\n \t\tapplyDeleteMutations(entityClass, keys, Collections\n \t\t\t\t.singletonList(this.mutationFactory.delete(entityClass, keys)));\n \t}\n \n-\tprivate void applyDeleteMutations(Class entityClass, KeySet keys, List<Mutation> mutations) {\n+\tprivate <T> void applyDeleteMutations(Class<T> entityClass, KeySet keys, List<Mutation> mutations) {", "originalCommit": "025386048f0175c53d25bdda0f81ff6fb81446ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4536248b7b90a93befb989532b5e5f92637de135", "chunk": "diff --git a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerTemplate.java b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerTemplate.java\nindex 6241974e8..71c2b8608 100644\n--- a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerTemplate.java\n+++ b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerTemplate.java\n\n@@ -352,25 +352,25 @@ public class SpannerTemplate implements SpannerOperations, ApplicationEventPubli\n \t}\n \n \t@Override\n-\tpublic <T> void delete(Class<T> entityClass, Key key) {\n+\tpublic void delete(Class entityClass, Key key) {\n \t\tapplyDeleteMutations(entityClass, KeySet.newBuilder().addKey(key).build(),\n \t\t\t\tCollections.singletonList(this.mutationFactory.delete(entityClass, key)));\n \t}\n \n \t@Override\n-\tpublic <T> void delete(Class<T> entityClass, KeySet keys) {\n+\tpublic void delete(Class entityClass, KeySet keys) {\n \t\tapplyDeleteMutations(entityClass, keys, Collections\n \t\t\t\t.singletonList(this.mutationFactory.delete(entityClass, keys)));\n \t}\n \n-\tprivate <T> void applyDeleteMutations(Class<T> entityClass, KeySet keys, List<Mutation> mutations) {\n+\tprivate void applyDeleteMutations(Class entityClass, KeySet keys, List<Mutation> mutations) {\n \t\tmaybeEmitEvent(new BeforeDeleteEvent(mutations, null, keys, entityClass));\n \t\tapplyMutations(mutations);\n \t\tmaybeEmitEvent(new AfterDeleteEvent(mutations, null, keys, entityClass));\n \t}\n \n \t@Override\n-\tpublic <T> long count(Class<T> entityClass) {\n+\tpublic long count(Class entityClass) {\n \t\tSpannerPersistentEntity<?> persistentEntity = this.mappingContext\n \t\t\t\t.getPersistentEntity(entityClass);\n \t\tStatement statement = Statement.of(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5NzY4Mg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r377297682", "bodyText": "T is never used, please remove", "author": "dmitry-s", "createdAt": "2020-02-10T20:27:02Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerTemplate.java", "diffHunk": "@@ -352,25 +352,25 @@ private void applyDeleteMutations(Iterable<?> objects, List<Mutation> mutations)\n \t}\n \n \t@Override\n-\tpublic void delete(Class entityClass, Key key) {\n+\tpublic <T> void delete(Class<T> entityClass, Key key) {\n \t\tapplyDeleteMutations(entityClass, KeySet.newBuilder().addKey(key).build(),\n \t\t\t\tCollections.singletonList(this.mutationFactory.delete(entityClass, key)));\n \t}\n \n \t@Override\n-\tpublic void delete(Class entityClass, KeySet keys) {\n+\tpublic <T> void delete(Class<T> entityClass, KeySet keys) {\n \t\tapplyDeleteMutations(entityClass, keys, Collections\n \t\t\t\t.singletonList(this.mutationFactory.delete(entityClass, keys)));\n \t}\n \n-\tprivate void applyDeleteMutations(Class entityClass, KeySet keys, List<Mutation> mutations) {\n+\tprivate <T> void applyDeleteMutations(Class<T> entityClass, KeySet keys, List<Mutation> mutations) {\n \t\tmaybeEmitEvent(new BeforeDeleteEvent(mutations, null, keys, entityClass));\n \t\tapplyMutations(mutations);\n \t\tmaybeEmitEvent(new AfterDeleteEvent(mutations, null, keys, entityClass));\n \t}\n \n \t@Override\n-\tpublic long count(Class entityClass) {\n+\tpublic <T> long count(Class<T> entityClass) {", "originalCommit": "025386048f0175c53d25bdda0f81ff6fb81446ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMwMTMxMQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r377301311", "bodyText": "np, but it was declared in SpannerOperations.\nIt was done mainly to remove the warning with code inspection about \"Raw use of parametrized class 'Class'\".\nStill, remove?", "author": "s13o", "createdAt": "2020-02-10T20:35:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5NzY4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMwMjM4OQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r377302389", "bodyText": "Matching what's in SpannerOperations makes sense to me.", "author": "meltsufin", "createdAt": "2020-02-10T20:37:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5NzY4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM0MzUxNg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r377343516", "bodyText": "Makes sense, let's keep it.", "author": "dmitry-s", "createdAt": "2020-02-10T22:02:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5NzY4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "4536248b7b90a93befb989532b5e5f92637de135", "chunk": "diff --git a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerTemplate.java b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerTemplate.java\nindex 6241974e8..71c2b8608 100644\n--- a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerTemplate.java\n+++ b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/SpannerTemplate.java\n\n@@ -352,25 +352,25 @@ public class SpannerTemplate implements SpannerOperations, ApplicationEventPubli\n \t}\n \n \t@Override\n-\tpublic <T> void delete(Class<T> entityClass, Key key) {\n+\tpublic void delete(Class entityClass, Key key) {\n \t\tapplyDeleteMutations(entityClass, KeySet.newBuilder().addKey(key).build(),\n \t\t\t\tCollections.singletonList(this.mutationFactory.delete(entityClass, key)));\n \t}\n \n \t@Override\n-\tpublic <T> void delete(Class<T> entityClass, KeySet keys) {\n+\tpublic void delete(Class entityClass, KeySet keys) {\n \t\tapplyDeleteMutations(entityClass, keys, Collections\n \t\t\t\t.singletonList(this.mutationFactory.delete(entityClass, keys)));\n \t}\n \n-\tprivate <T> void applyDeleteMutations(Class<T> entityClass, KeySet keys, List<Mutation> mutations) {\n+\tprivate void applyDeleteMutations(Class entityClass, KeySet keys, List<Mutation> mutations) {\n \t\tmaybeEmitEvent(new BeforeDeleteEvent(mutations, null, keys, entityClass));\n \t\tapplyMutations(mutations);\n \t\tmaybeEmitEvent(new AfterDeleteEvent(mutations, null, keys, entityClass));\n \t}\n \n \t@Override\n-\tpublic <T> long count(Class<T> entityClass) {\n+\tpublic long count(Class entityClass) {\n \t\tSpannerPersistentEntity<?> persistentEntity = this.mappingContext\n \t\t\t\t.getPersistentEntity(entityClass);\n \t\tStatement statement = Statement.of(\n"}}, {"oid": "4536248b7b90a93befb989532b5e5f92637de135", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/4536248b7b90a93befb989532b5e5f92637de135", "message": "Eager Interleaved support added to a @Query annotation (#2165)", "committedDate": "2020-02-18T14:13:20Z", "type": "commit"}, {"oid": "765f5b512d7a5923248e8166f9a3a4596777598c", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/765f5b512d7a5923248e8166f9a3a4596777598c", "message": "Update spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java\n\nCo-Authored-By: dmitry-s <dsolomakha@google.com>", "committedDate": "2020-02-18T14:13:20Z", "type": "commit"}, {"oid": "0efdfe11ddf979a8712b9ad1b9499fb2ccef15d5", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/0efdfe11ddf979a8712b9ad1b9499fb2ccef15d5", "message": "Update spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java\n\nCo-Authored-By: dmitry-s <dsolomakha@google.com>", "committedDate": "2020-02-18T14:13:20Z", "type": "commit"}, {"oid": "29f7316bf94252465fec60fb2bbc863d711865bb", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/29f7316bf94252465fec60fb2bbc863d711865bb", "message": "Integration test added (#2165)", "committedDate": "2020-02-18T14:13:20Z", "type": "commit"}, {"oid": "46ef7f0f0db65300c97c5a8f7781a9fa35e15ffa", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/46ef7f0f0db65300c97c5a8f7781a9fa35e15ffa", "message": "Make @Interleaved eager again (#2165)", "committedDate": "2020-02-18T14:13:20Z", "type": "commit"}, {"oid": "657aa3968a1de5951d7c4a11003d962170f535eb", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/657aa3968a1de5951d7c4a11003d962170f535eb", "message": "Make @Interleaved eager again (#2165)", "committedDate": "2020-02-18T14:13:20Z", "type": "commit"}, {"oid": "dfdeafe2dcdadb923ea42e57f407a9ca6d1b219a", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/dfdeafe2dcdadb923ea42e57f407a9ca6d1b219a", "message": "Make @Interleaved eager again and again (#2165)", "committedDate": "2020-02-18T14:13:20Z", "type": "commit"}, {"oid": "dfdeafe2dcdadb923ea42e57f407a9ca6d1b219a", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/dfdeafe2dcdadb923ea42e57f407a9ca6d1b219a", "message": "Make @Interleaved eager again and again (#2165)", "committedDate": "2020-02-18T14:13:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2MTUwOA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r380861508", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * <p/>Please, pay attention that sorting conditions should be passed by a {@link Pageable} parameter\n          \n          \n            \n            \t * <p/>Please note that sorting options should be passed by a {@link Pageable} parameter", "author": "dmitry-s", "createdAt": "2020-02-18T18:41:12Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java", "diffHunk": "@@ -40,6 +41,9 @@\n \t/**\n \t * Takes a Cloud Spanner SQL string to define the actual query to be executed. This one will\n \t * take precedence over the method name then.\n+\t * <p/>Please, pay attention that sorting conditions should be passed by a {@link Pageable} parameter", "originalCommit": "dfdeafe2dcdadb923ea42e57f407a9ca6d1b219a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b951e0e729aea2d0b860ddaa596f857dc94d15e6", "chunk": "diff --git a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java\nindex d7bdd249e..3d1e099dd 100644\n--- a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java\n+++ b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java\n\n@@ -41,7 +41,7 @@ public @interface Query {\n \t/**\n \t * Takes a Cloud Spanner SQL string to define the actual query to be executed. This one will\n \t * take precedence over the method name then.\n-\t * <p/>Please, pay attention that sorting conditions should be passed by a {@link Pageable} parameter\n+\t * <p/>Please note that sorting options should be passed by a {@link Pageable} parameter\n \t * instead of the query part. Otherwise, with the current implementation, the sorting could be broken\n \t * by a logic that fetches eager-interleaved fields when they are in the query result.\n \t *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2MTk4NQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r380861985", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * instead of the query part. Otherwise, with the current implementation, the sorting could be broken\n          \n          \n            \n            \t * instead of the query. Otherwise the sorting could be broken", "author": "dmitry-s", "createdAt": "2020-02-18T18:42:13Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java", "diffHunk": "@@ -40,6 +41,9 @@\n \t/**\n \t * Takes a Cloud Spanner SQL string to define the actual query to be executed. This one will\n \t * take precedence over the method name then.\n+\t * <p/>Please, pay attention that sorting conditions should be passed by a {@link Pageable} parameter\n+\t * instead of the query part. Otherwise, with the current implementation, the sorting could be broken", "originalCommit": "dfdeafe2dcdadb923ea42e57f407a9ca6d1b219a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b951e0e729aea2d0b860ddaa596f857dc94d15e6", "chunk": "diff --git a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java\nindex d7bdd249e..3d1e099dd 100644\n--- a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java\n+++ b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java\n\n@@ -41,7 +41,7 @@ public @interface Query {\n \t/**\n \t * Takes a Cloud Spanner SQL string to define the actual query to be executed. This one will\n \t * take precedence over the method name then.\n-\t * <p/>Please, pay attention that sorting conditions should be passed by a {@link Pageable} parameter\n+\t * <p/>Please note that sorting options should be passed by a {@link Pageable} parameter\n \t * instead of the query part. Otherwise, with the current implementation, the sorting could be broken\n \t * by a logic that fetches eager-interleaved fields when they are in the query result.\n \t *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2Mjc5NQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r380862795", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * by a logic that fetches eager-interleaved fields when they are in the query result.\n          \n          \n            \n            \t * by logic that fetches eager-interleaved fields.", "author": "dmitry-s", "createdAt": "2020-02-18T18:43:43Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java", "diffHunk": "@@ -40,6 +41,9 @@\n \t/**\n \t * Takes a Cloud Spanner SQL string to define the actual query to be executed. This one will\n \t * take precedence over the method name then.\n+\t * <p/>Please, pay attention that sorting conditions should be passed by a {@link Pageable} parameter\n+\t * instead of the query part. Otherwise, with the current implementation, the sorting could be broken\n+\t * by a logic that fetches eager-interleaved fields when they are in the query result.", "originalCommit": "dfdeafe2dcdadb923ea42e57f407a9ca6d1b219a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b951e0e729aea2d0b860ddaa596f857dc94d15e6", "chunk": "diff --git a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java\nindex d7bdd249e..3d1e099dd 100644\n--- a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java\n+++ b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java\n\n@@ -41,7 +41,7 @@ public @interface Query {\n \t/**\n \t * Takes a Cloud Spanner SQL string to define the actual query to be executed. This one will\n \t * take precedence over the method name then.\n-\t * <p/>Please, pay attention that sorting conditions should be passed by a {@link Pageable} parameter\n+\t * <p/>Please note that sorting options should be passed by a {@link Pageable} parameter\n \t * instead of the query part. Otherwise, with the current implementation, the sorting could be broken\n \t * by a logic that fetches eager-interleaved fields when they are in the query result.\n \t *\n"}}, {"oid": "b951e0e729aea2d0b860ddaa596f857dc94d15e6", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/b951e0e729aea2d0b860ddaa596f857dc94d15e6", "message": "Update spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java\n\nCo-Authored-By: dmitry-s <dsolomakha@google.com>", "committedDate": "2020-02-18T18:46:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2NDE0Mw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2174#discussion_r380864143", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t *     Please, pay attention there is no sense to pass it as {@code true} when the {@param sql} already contains\n          \n          \n            \n            \t *     Please note there is no sense to pass it as {@code true} when the {@param sql} already contains", "author": "dmitry-s", "createdAt": "2020-02-18T18:46:26Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -131,24 +131,33 @@ private SpannerStatementQueryExecutor() {\n \t * @param sql the sql that will be wrapped with sorting and paging options.\n \t * @param mappingContext a mapping context to convert between Cloud Spanner column names\n \t *     and underlying property names.\n+\t * @param fetchInterleaved when {@code true} additional subqueries will be added\n+\t *     to fetch eager-Interleaved lists with a single query.\n+\t *     Please, pay attention there is no sense to pass it as {@code true} when the {@param sql} already contains", "originalCommit": "dfdeafe2dcdadb923ea42e57f407a9ca6d1b219a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "98e6abfe9dd1254e3f7f5ce158010d97428b90cb", "chunk": "diff --git a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java\nindex c1ab93ddd..998f313c9 100644\n--- a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java\n+++ b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java\n\n@@ -133,7 +133,7 @@ public final class SpannerStatementQueryExecutor {\n \t *     and underlying property names.\n \t * @param fetchInterleaved when {@code true} additional subqueries will be added\n \t *     to fetch eager-Interleaved lists with a single query.\n-\t *     Please, pay attention there is no sense to pass it as {@code true} when the {@param sql} already contains\n+\t *     Please note there is no sense to pass it as {@code true} when the {@param sql} already contains\n \t *     a complete lists of all eager-Interleaved properties generated by the method {@link #getColumnsStringForSelect}.\n \t * @param <T> the domain type.\n \t * @return the final SQL string with paging and sorting applied.\n"}}, {"oid": "5a6c7d6d17092c8b3cad69f1c09b6a0fd7c554fa", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/5a6c7d6d17092c8b3cad69f1c09b6a0fd7c554fa", "message": "Update spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java\n\nCo-Authored-By: dmitry-s <dsolomakha@google.com>", "committedDate": "2020-02-18T18:47:32Z", "type": "commit"}, {"oid": "f265d764be0b9c44393eada38e43174f676b4f39", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/f265d764be0b9c44393eada38e43174f676b4f39", "message": "Update spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/Query.java\n\nCo-Authored-By: dmitry-s <dsolomakha@google.com>", "committedDate": "2020-02-18T18:47:48Z", "type": "commit"}, {"oid": "98e6abfe9dd1254e3f7f5ce158010d97428b90cb", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/98e6abfe9dd1254e3f7f5ce158010d97428b90cb", "message": "Update spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java\n\nCo-Authored-By: dmitry-s <dsolomakha@google.com>", "committedDate": "2020-02-18T18:48:24Z", "type": "commit"}, {"oid": "848c4b17aa693faefeacfdff6e837dbaf42721e0", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/848c4b17aa693faefeacfdff6e837dbaf42721e0", "message": "fix CI tests", "committedDate": "2020-02-19T19:20:33Z", "type": "commit"}, {"oid": "054b440e8993773a6fc5c94d1977df7257dacccc", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/054b440e8993773a6fc5c94d1977df7257dacccc", "message": "fix CI tests", "committedDate": "2020-02-19T19:30:01Z", "type": "commit"}]}