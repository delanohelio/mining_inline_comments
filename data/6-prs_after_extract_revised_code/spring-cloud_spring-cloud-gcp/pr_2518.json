{"pr_number": 2518, "pr_title": "Spanner - add NUMERIC type", "pr_createdAt": "2020-09-10T21:42:06Z", "pr_url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2518", "timeline": [{"oid": "653f7609722bc4e4f6e8057b4764df3cb72852dd", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/653f7609722bc4e4f6e8057b4764df3cb72852dd", "message": "add NUMERIC type", "committedDate": "2020-09-10T21:37:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2ODE5NQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2518#discussion_r486668195", "bodyText": "This looks like a duplicate of the above map, but there's probably some obscure reason for it. :)", "author": "meltsufin", "createdAt": "2020-09-10T22:27:26Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/convert/StructAccessor.java", "diffHunk": "@@ -91,6 +94,7 @@\n \t\t\t\t.put(double[].class, AbstractStructReader::getDoubleArray)\n \t\t\t\t.put(long[].class, AbstractStructReader::getLongArray)\n \t\t\t\t.put(boolean[].class, AbstractStructReader::getBooleanArray)\n+\t\t\t\t.put(BigDecimal.class, AbstractStructReader::getBigDecimal)", "originalCommit": "653f7609722bc4e4f6e8057b4764df3cb72852dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a7bb71833c04b888eaf20d70d88828fa7708169", "chunk": "diff --git a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/convert/StructAccessor.java b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/convert/StructAccessor.java\nindex 0f24f2f8..c1425107 100644\n--- a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/convert/StructAccessor.java\n+++ b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/convert/StructAccessor.java\n\n@@ -90,11 +90,11 @@ public class StructAccessor {\n \t\t\t\t.put(double.class, AbstractStructReader::getDouble)\n \t\t\t\t.put(Timestamp.class, AbstractStructReader::getTimestamp)\n \t\t\t\t.put(Date.class, AbstractStructReader::getDate)\n+\t\t\t\t.put(BigDecimal.class, AbstractStructReader::getBigDecimal)\n \t\t\t\t.put(ByteArray.class, AbstractStructReader::getBytes)\n \t\t\t\t.put(double[].class, AbstractStructReader::getDoubleArray)\n \t\t\t\t.put(long[].class, AbstractStructReader::getLongArray)\n \t\t\t\t.put(boolean[].class, AbstractStructReader::getBooleanArray)\n-\t\t\t\t.put(BigDecimal.class, AbstractStructReader::getBigDecimal)\n \t\t\t\t// Note that Struct.class appears in this map. While we support\n \t\t\t\t// converting structs into POJO fields of POJOs, the value in this map\n \t\t\t\t// is for\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2OTI2Mg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2518#discussion_r486669262", "bodyText": "price is actually a perfect field to use BigDecimal for.", "author": "meltsufin", "createdAt": "2020-09-10T22:30:32Z", "path": "spring-cloud-gcp-data-spanner/src/test/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryTests.java", "diffHunk": "@@ -100,26 +102,28 @@ public void compoundNameConventionTest() throws NoSuchMethodException {\n \t\twhen(this.queryMethod.getName()).thenReturn(\n \t\t\t\t\"findTop3DistinctByActionIgnoreCaseAndSymbolOrTraderIdAndPriceLessThanOrPriceGreater\"\n \t\t\t\t\t\t+ \"ThanEqualAndIdIsNotNullAndTraderIdIsNullAndTraderIdLikeAndPriceTrueAndPriceFalse\"\n-\t\t\t\t\t\t+ \"AndPriceGreaterThanAndPriceLessThanEqualAndPriceInOrderByIdDesc\");\n+\t\t\t\t\t\t+ \"AndPriceGreaterThanAndPriceLessThanEqualAndPriceIn\"\n+\t\t\t\t\t\t+ \"AndValueLessThanOrderByIdDesc\");\n \t\tthis.partTreeSpannerQuery = spy(createQuery());\n \n \t\tObject[] params = new Object[] { Trade.Action.BUY, \"abcd\", \"abc123\",\n \t\t\t\t8, // an int is not a natively supported type, and is intentionally used to use custom\n \t\t\t\t\t// converters\n \t\t\t\t3.33, \"ignored\",\n-\t\t\t\t\"ignored\", \"blahblah\", \"ignored\", \"ignored\", 1.11, 2.22, Arrays.asList(1, 2) };\n+\t\t\t\t\"ignored\", \"blahblah\", \"ignored\", \"ignored\", 1.11, 2.22, Arrays.asList(1, 2), BigDecimal.ONE };\n \n \t\twhen(this.spannerTemplate.query((Class<Object>) any(), any(), any()))\n \t\t\t\t.thenAnswer((invocation) -> {\n \t\t\t\t\tStatement statement = invocation.getArgument(1);\n \n \t\t\t\t\tString expectedQuery =\n-\t\t\t\t\t\t\t\"SELECT DISTINCT shares, trader_id, ticker, price, action, id \"\n+\t\t\t\t\t\t\t\"SELECT DISTINCT shares, trader_id, ticker, price, action, id, value \"\n \t\t\t\t\t\t\t\t\t+ \"FROM trades WHERE ( LOWER(action)=LOWER(@tag0) \"\n \t\t\t\t\t\t\t\t\t+ \"AND ticker=@tag1 ) OR \"\n \t\t\t\t\t\t\t\t\t+ \"( trader_id=@tag2 AND price<@tag3 ) OR ( price>=@tag4 AND id<>NULL AND \"\n \t\t\t\t\t\t\t\t\t+ \"trader_id=NULL AND trader_id LIKE @tag7 AND price=TRUE AND price=FALSE AND \"\n-\t\t\t\t\t\t\t\t\t+ \"price>@tag10 AND price<=@tag11 AND price IN UNNEST(@tag12) ) ORDER BY id DESC LIMIT 3\";\n+\t\t\t\t\t\t\t\t\t+ \"price>@tag10 AND price<=@tag11 AND price IN UNNEST(@tag12) \"", "originalCommit": "653f7609722bc4e4f6e8057b4764df3cb72852dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2OTY3Ng==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2518#discussion_r486669676", "bodyText": "same nit -- should this go before the primitive arrays?", "author": "elefeint", "createdAt": "2020-09-10T22:31:47Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/convert/StructAccessor.java", "diffHunk": "@@ -91,6 +94,7 @@\n \t\t\t\t.put(double[].class, AbstractStructReader::getDoubleArray)\n \t\t\t\t.put(long[].class, AbstractStructReader::getLongArray)\n \t\t\t\t.put(boolean[].class, AbstractStructReader::getBooleanArray)\n+\t\t\t\t.put(BigDecimal.class, AbstractStructReader::getBigDecimal)", "originalCommit": "653f7609722bc4e4f6e8057b4764df3cb72852dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a7bb71833c04b888eaf20d70d88828fa7708169", "chunk": "diff --git a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/convert/StructAccessor.java b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/convert/StructAccessor.java\nindex 0f24f2f8..c1425107 100644\n--- a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/convert/StructAccessor.java\n+++ b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/convert/StructAccessor.java\n\n@@ -90,11 +90,11 @@ public class StructAccessor {\n \t\t\t\t.put(double.class, AbstractStructReader::getDouble)\n \t\t\t\t.put(Timestamp.class, AbstractStructReader::getTimestamp)\n \t\t\t\t.put(Date.class, AbstractStructReader::getDate)\n+\t\t\t\t.put(BigDecimal.class, AbstractStructReader::getBigDecimal)\n \t\t\t\t.put(ByteArray.class, AbstractStructReader::getBytes)\n \t\t\t\t.put(double[].class, AbstractStructReader::getDoubleArray)\n \t\t\t\t.put(long[].class, AbstractStructReader::getLongArray)\n \t\t\t\t.put(boolean[].class, AbstractStructReader::getBooleanArray)\n-\t\t\t\t.put(BigDecimal.class, AbstractStructReader::getBigDecimal)\n \t\t\t\t// Note that Struct.class appears in this map. While we support\n \t\t\t\t// converting structs into POJO fields of POJOs, the value in this map\n \t\t\t\t// is for\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3MDE0MA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2518#discussion_r486670140", "bodyText": "nit: Should this go to before array types?", "author": "elefeint", "createdAt": "2020-09-10T22:33:03Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/convert/StructAccessor.java", "diffHunk": "@@ -71,6 +73,7 @@\n \t\t\t\t.put(double[].class, AbstractStructReader::getDoubleArray)\n \t\t\t\t.put(long[].class, AbstractStructReader::getLongArray)\n \t\t\t\t.put(boolean[].class, AbstractStructReader::getBooleanArray)\n+\t\t\t\t.put(BigDecimal.class, AbstractStructReader::getBigDecimal)", "originalCommit": "653f7609722bc4e4f6e8057b4764df3cb72852dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9a7bb71833c04b888eaf20d70d88828fa7708169", "chunk": "diff --git a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/convert/StructAccessor.java b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/convert/StructAccessor.java\nindex 0f24f2f8..c1425107 100644\n--- a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/convert/StructAccessor.java\n+++ b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/core/convert/StructAccessor.java\n\n@@ -69,11 +69,11 @@ public class StructAccessor {\n \t\t\t\t.put(double.class, AbstractStructReader::getDouble)\n \t\t\t\t.put(Timestamp.class, AbstractStructReader::getTimestamp)\n \t\t\t\t.put(Date.class, AbstractStructReader::getDate)\n+\t\t\t\t.put(BigDecimal.class, AbstractStructReader::getBigDecimal)\n \t\t\t\t.put(ByteArray.class, AbstractStructReader::getBytes)\n \t\t\t\t.put(double[].class, AbstractStructReader::getDoubleArray)\n \t\t\t\t.put(long[].class, AbstractStructReader::getLongArray)\n \t\t\t\t.put(boolean[].class, AbstractStructReader::getBooleanArray)\n-\t\t\t\t.put(BigDecimal.class, AbstractStructReader::getBigDecimal)\n \t\t\t\t// Note that Struct.class appears in this map. While we support\n \t\t\t\t// converting structs into POJO fields of POJOs, the value in this map is for\n \t\t\t\t// the case where the field within the POJO is Struct.\n"}}, {"oid": "939b1d777c432e151a9545274b9d24cdf6b54951", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/939b1d777c432e151a9545274b9d24cdf6b54951", "message": "Merge branch 'master' of github.com:spring-cloud/spring-cloud-gcp into spanner-numeric-type", "committedDate": "2020-09-14T23:39:02Z", "type": "commit"}, {"oid": "9a7bb71833c04b888eaf20d70d88828fa7708169", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/9a7bb71833c04b888eaf20d70d88828fa7708169", "message": "PR comments", "committedDate": "2020-09-15T00:02:34Z", "type": "commit"}, {"oid": "907b613477ad252e7718cfbf9d63e2540274eff9", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/907b613477ad252e7718cfbf9d63e2540274eff9", "message": "fix firestore dependency issue", "committedDate": "2020-09-15T01:08:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM0NDkzMg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2518#discussion_r488344932", "bodyText": "This is unrelated. Can we please put it in a separate PR?", "author": "meltsufin", "createdAt": "2020-09-15T02:29:11Z", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/util/Util.java", "diffHunk": "@@ -27,7 +25,20 @@ private Util() {\n \t}\n \n \tpublic static String extractDatabasePath(String parent) {\n-\t\treturn parent.substring(0, StringUtils.ordinalIndexOf(parent, \"/\", 4));\n+\t\t//the parent looks like this: projects/{project_id}/databases/{database_id}/...", "originalCommit": "907b613477ad252e7718cfbf9d63e2540274eff9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "e296093ebfe2e85ca4f6225b7f07828ccece73ad", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/e296093ebfe2e85ca4f6225b7f07828ccece73ad", "message": "Merge branch 'master' of github.com:spring-cloud/spring-cloud-gcp into spanner-numeric-type", "committedDate": "2020-09-15T20:33:43Z", "type": "commit"}]}