{"pr_number": 2270, "pr_title": "Polish Secret Manager Code", "pr_createdAt": "2020-03-24T00:04:29Z", "pr_url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2270", "timeline": [{"oid": "3b8ea9d6cb4dd12da780b44a244d566c5d78ef8d", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/3b8ea9d6cb4dd12da780b44a244d566c5d78ef8d", "message": "Polish Secret Manager code", "committedDate": "2020-03-23T23:55:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE2Mjc2NA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2270#discussion_r397162764", "bodyText": "Why not just catch NotFoundException here?", "author": "meltsufin", "createdAt": "2020-03-24T13:45:17Z", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -87,43 +86,49 @@ public Object getProperty(String name) {\n \t}\n \n \tprivate static Map<String, Object> createSecretsPropertiesMap(\n-\t\t\tSecretManagerServiceClient client, String projectId, String secretsPrefix, String version, Map<String, String> versions) {\n+\t\t\tSecretManagerServiceClient client, String projectId, String secretsPrefix, String defaultVersion, Map<String, String> versions) {\n \n \t\tListSecretsPagedResponse response = client.listSecrets(ProjectName.of(projectId));\n-\n \t\tMap<String, Object> secretsMap = new HashMap<>();\n \t\tfor (Secret secret : response.iterateAll()) {\n \t\t\tString secretId = extractSecretId(secret);\n-\t\t\tByteString secretPayload = resolveSecretVersion(client, projectId, version, versions, secretId);\n-\t\t\tsecretsMap.put(secretsPrefix + secretId, secretPayload);\n+\t\t\tByteString secretPayload = getSecretPayload(client, projectId, secretId, defaultVersion, versions);\n+\t\t\tif (secretPayload != null) {\n+\t\t\t\tsecretsMap.put(secretsPrefix + secretId, secretPayload);\n+\t\t\t}\n \t\t}\n \n \t\treturn secretsMap;\n \t}\n \n-\tprivate static ByteString resolveSecretVersion(SecretManagerServiceClient client, String projectId, String version, Map<String, String> versions, String secretId) {\n-\t\tif (!versions.isEmpty() && versions.containsKey(secretId)) {\n-\t\t\tString secretVersion = versions.get(secretId);\n-\t\t\treturn getSecretPayload(client, projectId, secretId, secretVersion);\n-\t\t}\n-\t\treturn getSecretPayload(client, projectId, secretId, resolveVersion(version));\n-\t}\n-\n-\tprivate static String resolveVersion(String version) {\n-\t\treturn StringUtils.hasText(version) ? version : LATEST_VERSION_STRING;\n-\t}\n-\n \tprivate static ByteString getSecretPayload(\n-\t\t\tSecretManagerServiceClient client, String projectId, String secretId, String version) {\n+\t\t\tSecretManagerServiceClient client,\n+\t\t\tString projectId,\n+\t\t\tString secretId,\n+\t\t\tString defaultVersion,\n+\t\t\tMap<String, String> versions) {\n+\t\tString version = versions.containsKey(secretId) ? versions.get(secretId) : defaultVersion;\n \n \t\tSecretVersionName secretVersionName = SecretVersionName.newBuilder()\n \t\t\t\t.setProject(projectId)\n \t\t\t\t.setSecret(secretId)\n \t\t\t\t.setSecretVersion(version)\n \t\t\t\t.build();\n \n-\t\tAccessSecretVersionResponse response = client.accessSecretVersion(secretVersionName);\n-\t\treturn response.getPayload().getData();\n+\t\ttry {\n+\t\t\tAccessSecretVersionResponse response = client.accessSecretVersion(secretVersionName);\n+\t\t\treturn response.getPayload().getData();\n+\t\t}\n+\t\tcatch (Exception e) {", "originalCommit": "3b8ea9d6cb4dd12da780b44a244d566c5d78ef8d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIyMTIwMg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2270#discussion_r397221202", "bodyText": "Ooops forgot I could do this; done.", "author": "dzou", "createdAt": "2020-03-24T15:01:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE2Mjc2NA=="}], "type": "inlineReview", "revised_code": {"commit": "1a07f087fa4d85b2264719a110482496e7861a4c", "chunk": "diff --git a/spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java b/spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java\nindex cb764338..59d5b3f2 100644\n--- a/spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java\n+++ b/spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java\n\n@@ -107,7 +107,9 @@ public class SecretManagerPropertySource extends EnumerablePropertySource<Secret\n \t\t\tString secretId,\n \t\t\tString defaultVersion,\n \t\t\tMap<String, String> versions) {\n-\t\tString version = versions.containsKey(secretId) ? versions.get(secretId) : defaultVersion;\n+\n+\t\tboolean usingSpecificVersion = versions.containsKey(secretId);\n+\t\tString version = usingSpecificVersion ? versions.get(secretId) : defaultVersion;\n \n \t\tSecretVersionName secretVersionName = SecretVersionName.newBuilder()\n \t\t\t\t.setProject(projectId)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE2Njc5Ng==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2270#discussion_r397166796", "bodyText": "Notice that this will also happen when a specific secret.version is specified.\nI fear that this make it hard to debug mistakes in the client code.\nConsider adding another property to chose whether to skip silently or fail.\nSomething like failOnMissingSecretVersion.", "author": "meltsufin", "createdAt": "2020-03-24T13:50:48Z", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java", "diffHunk": "@@ -87,43 +86,49 @@ public Object getProperty(String name) {\n \t}\n \n \tprivate static Map<String, Object> createSecretsPropertiesMap(\n-\t\t\tSecretManagerServiceClient client, String projectId, String secretsPrefix, String version, Map<String, String> versions) {\n+\t\t\tSecretManagerServiceClient client, String projectId, String secretsPrefix, String defaultVersion, Map<String, String> versions) {\n \n \t\tListSecretsPagedResponse response = client.listSecrets(ProjectName.of(projectId));\n-\n \t\tMap<String, Object> secretsMap = new HashMap<>();\n \t\tfor (Secret secret : response.iterateAll()) {\n \t\t\tString secretId = extractSecretId(secret);\n-\t\t\tByteString secretPayload = resolveSecretVersion(client, projectId, version, versions, secretId);\n-\t\t\tsecretsMap.put(secretsPrefix + secretId, secretPayload);\n+\t\t\tByteString secretPayload = getSecretPayload(client, projectId, secretId, defaultVersion, versions);\n+\t\t\tif (secretPayload != null) {\n+\t\t\t\tsecretsMap.put(secretsPrefix + secretId, secretPayload);\n+\t\t\t}\n \t\t}\n \n \t\treturn secretsMap;\n \t}\n \n-\tprivate static ByteString resolveSecretVersion(SecretManagerServiceClient client, String projectId, String version, Map<String, String> versions, String secretId) {\n-\t\tif (!versions.isEmpty() && versions.containsKey(secretId)) {\n-\t\t\tString secretVersion = versions.get(secretId);\n-\t\t\treturn getSecretPayload(client, projectId, secretId, secretVersion);\n-\t\t}\n-\t\treturn getSecretPayload(client, projectId, secretId, resolveVersion(version));\n-\t}\n-\n-\tprivate static String resolveVersion(String version) {\n-\t\treturn StringUtils.hasText(version) ? version : LATEST_VERSION_STRING;\n-\t}\n-\n \tprivate static ByteString getSecretPayload(\n-\t\t\tSecretManagerServiceClient client, String projectId, String secretId, String version) {\n+\t\t\tSecretManagerServiceClient client,\n+\t\t\tString projectId,\n+\t\t\tString secretId,\n+\t\t\tString defaultVersion,\n+\t\t\tMap<String, String> versions) {\n+\t\tString version = versions.containsKey(secretId) ? versions.get(secretId) : defaultVersion;\n \n \t\tSecretVersionName secretVersionName = SecretVersionName.newBuilder()\n \t\t\t\t.setProject(projectId)\n \t\t\t\t.setSecret(secretId)\n \t\t\t\t.setSecretVersion(version)\n \t\t\t\t.build();\n \n-\t\tAccessSecretVersionResponse response = client.accessSecretVersion(secretVersionName);\n-\t\treturn response.getPayload().getData();\n+\t\ttry {\n+\t\t\tAccessSecretVersionResponse response = client.accessSecretVersion(secretVersionName);\n+\t\t\treturn response.getPayload().getData();\n+\t\t}\n+\t\tcatch (Exception e) {\n+\t\t\tif (e instanceof NotFoundException) {\n+\t\t\t\tLOGGER.debug(\"Skipped loading secret \" + secretId + \" because it does not have version \" + defaultVersion);", "originalCommit": "3b8ea9d6cb4dd12da780b44a244d566c5d78ef8d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIyOTU1Mw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2270#discussion_r397229553", "bodyText": "For this one, this is what I think makes the most sense:\n\nIf a user-specified version doesn't exist, throw an error.\nIf a default version doesn't exist for a secret, ignore the secret.\n\nI think this makes the most sense for the default version handling because most users will have multiple secrets in their project, and they might all be at different versions (like some you'll be at version 5 and maybe some at version 1 or 2).\nIn practice, for any value of default-version other than \"latest\", there is a low chance that every secret in the project is up to that version. For example, if you choose to set default-version to 2, this bootstrap loading would fail if any secret in the project was only at version 1. So I think the default-version option is only useful if you skip the secrets that aren't up to the default version.", "author": "dzou", "createdAt": "2020-03-24T15:11:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE2Njc5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyMTg3Ng==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2270#discussion_r397521876", "bodyText": "Your reasoning makes sense, but I still feel that it's just too complicated and will leave room for some surprises for people who do not carefully read the documentation. You can argue that the default version setting should never be used, unless the project keeps all of the secrets at the same version. Maybe they have a convention where each version of the application has a corresponding version of the secrets. In that case, as a developer I would like a hard fail if I make a mistake and forget to include a secret with the right version that follows that convention.\nOf course there could be exceptions. Therefore, I'm suggesting to add a property to allow skipping secrets with non-existing versions.\nI guess we're struggling here partly because we're not sure what is the common use-case for default-version.\nMaybe @eddumelendez can help us out here.", "author": "meltsufin", "createdAt": "2020-03-24T23:26:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE2Njc5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUzMzIyMQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2270#discussion_r397533221", "bodyText": "I see. I just was not a fan of the additional setting because I imagine most projects will have secrets of different versions.\nI don't see it being likely that each version of an application will have its own version of secrets - like a password to your MySQL database might stay the same across all of your application versions but some other secret might be updated more frequently. And what if you have to add a new secret to an application? If you're at version 5 for your current secrets, the new secret must be updated 5 times to hit version 5. (The only way to increment a secret version is to create a new version of it in the APIs; you can't create a new secret and set it to 5 directly)\nHmm, the more I think about it, the less useful overriding the default-version is. It feels like defaulting to latest makes the most sense and overriding secret versions should be done on an individual level per secret. What do you guys think? @meltsufin @eddumelendez", "author": "dzou", "createdAt": "2020-03-24T23:59:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE2Njc5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUzNzYzMg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2270#discussion_r397537632", "bodyText": "I didn't realize that the version cannot be set directly.\nI happy to remove the default version feature.\n@saturnism @eddumelendez WDYT?", "author": "meltsufin", "createdAt": "2020-03-25T00:13:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE2Njc5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIzODk1Mw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2270#discussion_r398238953", "bodyText": "It feels like defaulting to latest makes the most sense and overriding secret versions should be done on an individual level per secret.\n\nI'm in favor of this.\nThere is just two options for every secret which is use the latest or a specific version. Given that, default-version doesn't make much sense.\nAlso, regarding to:\n\nIf a user-specified version doesn't exist, throw an error.\nIf a default version doesn't exist for a secret, ignore the secret\n\nSo, if the secret is ignored then @Value will not resolve it, right? I think the docs are pretty clear about the context but not sure if will be hard to figure it out is we are missing to read the docs.", "author": "eddumelendez", "createdAt": "2020-03-25T23:50:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE2Njc5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU5MDYyNw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2270#discussion_r398590627", "bodyText": "Sounds like we're all leaning towards just removal of default-version and hard fail in case a specified version doesn't exist.", "author": "meltsufin", "createdAt": "2020-03-26T13:55:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE2Njc5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY3Nzg1MA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2270#discussion_r398677850", "bodyText": "Thank you both for the input, this is much appreiciated. Yes in that case, let's go in that direction.", "author": "dzou", "createdAt": "2020-03-26T15:45:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE2Njc5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "1a07f087fa4d85b2264719a110482496e7861a4c", "chunk": "diff --git a/spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java b/spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java\nindex cb764338..59d5b3f2 100644\n--- a/spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java\n+++ b/spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/SecretManagerPropertySource.java\n\n@@ -107,7 +107,9 @@ public class SecretManagerPropertySource extends EnumerablePropertySource<Secret\n \t\t\tString secretId,\n \t\t\tString defaultVersion,\n \t\t\tMap<String, String> versions) {\n-\t\tString version = versions.containsKey(secretId) ? versions.get(secretId) : defaultVersion;\n+\n+\t\tboolean usingSpecificVersion = versions.containsKey(secretId);\n+\t\tString version = usingSpecificVersion ? versions.get(secretId) : defaultVersion;\n \n \t\tSecretVersionName secretVersionName = SecretVersionName.newBuilder()\n \t\t\t\t.setProject(projectId)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE2NzA5Mw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2270#discussion_r397167093", "bodyText": "Again, why not just catch NotFoundException?", "author": "meltsufin", "createdAt": "2020-03-24T13:51:13Z", "path": "spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/it/SecretManagerIntegrationTests.java", "diffHunk": "@@ -202,19 +185,21 @@ private void createSecretPayload(String data) {\n \t\tclient.addSecretVersion(payloadRequest);\n \t}\n \n-\tprivate boolean secretExists(String secretId, String version) {\n-\t\tString projectId = projectIdProvider.getProjectId();\n-\t\tProjectName projectName = ProjectName.of(projectId);\n+\tprivate boolean secretExists(String secretId) {\n+\t\tProjectName projectName = ProjectName.of(projectIdProvider.getProjectId());\n \t\tListSecretsPagedResponse listSecretsResponse = this.client.listSecrets(projectName);\n \t\treturn StreamSupport.stream(listSecretsResponse.iterateAll().spliterator(), false)\n-\t\t\t\t.filter(secret -> secret.getName().contains(secretId))\n-\t\t\t\t.anyMatch(secret -> {\n-\t\t\t\t\tSecretVersionName secretVersionName = SecretVersionName.newBuilder()\n-\t\t\t\t\t\t\t.setProject(projectId)\n-\t\t\t\t\t\t\t.setSecret(secretId)\n-\t\t\t\t\t\t\t.setSecretVersion(version)\n-\t\t\t\t\t\t\t.build();\n-\t\t\t\t\treturn this.client.accessSecretVersion(secretVersionName) != null;\n-\t\t\t\t});\n+\t\t\t\t.anyMatch(secret -> secret.getName().contains(secretId));\n+\t}\n+\n+\tprivate void deleteSecret(String secretId) {\n+\t\ttry {\n+\t\t\tthis.client.deleteSecret(SecretName.of(this.projectIdProvider.getProjectId(), secretId));\n+\t\t}\n+\t\tcatch (Exception e) {", "originalCommit": "3b8ea9d6cb4dd12da780b44a244d566c5d78ef8d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIyMTI4NQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2270#discussion_r397221285", "bodyText": "Done.", "author": "dzou", "createdAt": "2020-03-24T15:01:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE2NzA5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "1a07f087fa4d85b2264719a110482496e7861a4c", "chunk": "diff --git a/spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/it/SecretManagerIntegrationTests.java b/spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/it/SecretManagerIntegrationTests.java\nindex 088500ba..ba4be502 100644\n--- a/spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/it/SecretManagerIntegrationTests.java\n+++ b/spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/secretmanager/it/SecretManagerIntegrationTests.java\n\n@@ -196,10 +216,8 @@ public class SecretManagerIntegrationTests {\n \t\ttry {\n \t\t\tthis.client.deleteSecret(SecretName.of(this.projectIdProvider.getProjectId(), secretId));\n \t\t}\n-\t\tcatch (Exception e) {\n-\t\t\tif (!(e instanceof NotFoundException)) {\n-\t\t\t\tthrow e;\n-\t\t\t}\n+\t\tcatch (NotFoundException e) {\n+\t\t\tLOGGER.debug(\"Skipped deleting \" + secretId + \" because it does not exist.\");\n \t\t}\n \t}\n }\n"}}, {"oid": "1a07f087fa4d85b2264719a110482496e7861a4c", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/1a07f087fa4d85b2264719a110482496e7861a4c", "message": "PR Comments", "committedDate": "2020-03-24T15:00:01Z", "type": "commit"}, {"oid": "c0effcb4445f876e1e8aeec7593ca59846a82e9a", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/c0effcb4445f876e1e8aeec7593ca59846a82e9a", "message": "remove default version", "committedDate": "2020-03-26T15:40:52Z", "type": "commit"}, {"oid": "f6c723c634e89804678537d20a463e487a3e799b", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/f6c723c634e89804678537d20a463e487a3e799b", "message": "Merge branch 'master' into polish-secretmanager\n\n# Conflicts:\n#\tdocs/src/main/asciidoc/secretmanager.adoc", "committedDate": "2020-03-26T15:43:21Z", "type": "commit"}, {"oid": "c7ef782e0859dcf8499f5f45f7b8a78bfe936745", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/c7ef782e0859dcf8499f5f45f7b8a78bfe936745", "message": "fix build", "committedDate": "2020-03-26T23:02:18Z", "type": "commit"}]}