{"pr_number": 2471, "pr_title": "fix null handling for id in query by example", "pr_createdAt": "2020-07-20T21:50:42Z", "pr_url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2471", "timeline": [{"oid": "edcb08150d201d400599ce64b5be69be0426326b", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/edcb08150d201d400599ce64b5be69be0426326b", "message": "fix null handling for id in query by example", "committedDate": "2020-07-20T21:47:34Z", "type": "commit"}, {"oid": "5bf279d7fa1135764545c8ffe4c791a98a4ef243", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/5bf279d7fa1135764545c8ffe4c791a98a4ef243", "message": "refactoring", "committedDate": "2020-07-21T16:58:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI2NzQ1NQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2471#discussion_r458267455", "bodyText": "So the check for value instanceof NullValue is not needed?", "author": "elefeint", "createdAt": "2020-07-21T17:28:14Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java", "diffHunk": "@@ -765,31 +767,13 @@ private DatastoreReaderWriter getDatastoreReadWriter() {\n \t\tmatcherAccessor.getPropertySpecifiers();\n \t\tLinkedList<StructuredQuery.Filter> filters = new LinkedList<>();\n \t\tpersistentEntity.doWithColumnBackedProperties((persistentProperty) -> {\n-\n-\t\t\tif (!example.getMatcher().isIgnoredPath(persistentProperty.getName())) {\n-\t\t\t\t// ID properties are not stored as regular fields in Datastore.\n-\t\t\t\tString fieldName = persistentProperty.getFieldName();\n-\t\t\t\tValue<?> value;\n-\t\t\t\tif (persistentProperty.isIdProperty()) {\n-\t\t\t\t\tPersistentPropertyAccessor accessor = persistentEntity.getPropertyAccessor(probe);\n-\t\t\t\t\tObject property = accessor.getProperty(persistentProperty);\n-\t\t\t\t\tvalue = property != null\n-\t\t\t\t\t\t\t\t\t? KeyValue.of(createKey(persistentEntity.kindName(), property))\n-\t\t\t\t\t\t\t\t\t: NullValue.of();\n-\t\t\t\t}\n-\t\t\t\telse {\n-\t\t\t\t\tvalue = probeEntity.getValue(fieldName);\n-\t\t\t\t}\n-\t\t\t\tif (value instanceof NullValue\n-\t\t\t\t\t\t&& example.getMatcher().getNullHandler() != ExampleMatcher.NullHandler.INCLUDE) {\n-\t\t\t\t\t//skip null value\n-\t\t\t\t\treturn;\n-\t\t\t\t}\n-\t\t\t\tfilters.add(StructuredQuery.PropertyFilter.eq(fieldName, value));\n+\t\t\tif (notIgnoredProperty(example, persistentProperty)) {\n+\t\t\t\tValue<?> value = getValue(example, probeEntity, persistentEntity, persistentProperty);\n+\t\t\t\tNullHandler nullHandler = example.getMatcher().getNullHandler();", "originalCommit": "5bf279d7fa1135764545c8ffe4c791a98a4ef243", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM0NDM5MA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2471#discussion_r458344390", "bodyText": "It is still required. NullHandler just indicates if we need to include null valued fields or not, and value instanceof NullValue is a check to see if a field holds a null value.", "author": "dmitry-s", "createdAt": "2020-07-21T19:43:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI2NzQ1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM3NzIwNw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2471#discussion_r458377207", "bodyText": "Oh, it's in addFilter now. I missed it.", "author": "elefeint", "createdAt": "2020-07-21T20:46:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI2NzQ1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "639030c9aeef0b96aed82a03364c54c3a8f9885d", "chunk": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\nindex 5ea390ce4..be82a191e 100644\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\n+++ b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\n\n@@ -767,7 +767,7 @@ public class DatastoreTemplate implements DatastoreOperations, ApplicationEventP\n \t\tmatcherAccessor.getPropertySpecifiers();\n \t\tLinkedList<StructuredQuery.Filter> filters = new LinkedList<>();\n \t\tpersistentEntity.doWithColumnBackedProperties((persistentProperty) -> {\n-\t\t\tif (notIgnoredProperty(example, persistentProperty)) {\n+\t\t\tif (!ignoredProperty(example, persistentProperty)) {\n \t\t\t\tValue<?> value = getValue(example, probeEntity, persistentEntity, persistentProperty);\n \t\t\t\tNullHandler nullHandler = example.getMatcher().getNullHandler();\n \t\t\t\taddFilter(nullHandler, filters, persistentProperty.getFieldName(), value);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI2ODEzMw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2471#discussion_r458268133", "bodyText": "It may be easier to read as isIgnoredProperty(), removing the negation here and putting the negation in getDatastoreReadWriter() method instead. Our brains are very used to the isBlah pattern.", "author": "elefeint", "createdAt": "2020-07-21T17:29:22Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java", "diffHunk": "@@ -799,6 +783,43 @@ private DatastoreReaderWriter getDatastoreReadWriter() {\n \t\treturn builder.build();\n \t}\n \n+\tprivate <T> Value<?> getValue(Example<T> example, FullEntity<IncompleteKey> probeEntity,\n+\t\t\t\t\tDatastorePersistentEntity<?> persistentEntity, DatastorePersistentProperty persistentProperty) {\n+\t\tValue<?> value;\n+\t\tif (persistentProperty.isIdProperty()) {\n+\t\t\tvalue = getIdValue(example, persistentEntity, persistentProperty);\n+\t\t}\n+\t\telse {\n+\t\t\tvalue = probeEntity.getValue(persistentProperty.getFieldName());\n+\t\t}\n+\t\treturn value;\n+\t}\n+\n+\tprivate <T> boolean notIgnoredProperty(Example<T> example, DatastorePersistentProperty persistentProperty) {", "originalCommit": "5bf279d7fa1135764545c8ffe4c791a98a4ef243", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "639030c9aeef0b96aed82a03364c54c3a8f9885d", "chunk": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\nindex 5ea390ce4..be82a191e 100644\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\n+++ b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java\n\n@@ -795,8 +795,8 @@ public class DatastoreTemplate implements DatastoreOperations, ApplicationEventP\n \t\treturn value;\n \t}\n \n-\tprivate <T> boolean notIgnoredProperty(Example<T> example, DatastorePersistentProperty persistentProperty) {\n-\t\treturn !example.getMatcher().isIgnoredPath(persistentProperty.getName());\n+\tprivate <T> boolean ignoredProperty(Example<T> example, DatastorePersistentProperty persistentProperty) {\n+\t\treturn example.getMatcher().isIgnoredPath(persistentProperty.getName());\n \t}\n \n \tprivate <T> Value<?> getIdValue(Example<T> example, DatastorePersistentEntity<?> persistentEntity,\n"}}, {"oid": "639030c9aeef0b96aed82a03364c54c3a8f9885d", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/639030c9aeef0b96aed82a03364c54c3a8f9885d", "message": "PR comments", "committedDate": "2020-07-21T19:54:20Z", "type": "commit"}]}