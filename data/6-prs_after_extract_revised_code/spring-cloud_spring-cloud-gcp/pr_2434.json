{"pr_number": 2434, "pr_title": "Add subcollection support for FirestoreTemplate", "pr_createdAt": "2020-06-16T22:26:42Z", "pr_url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2434", "timeline": [{"oid": "09b9a144f677935f315ff893bcd96064925e7b89", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/09b9a144f677935f315ff893bcd96064925e7b89", "message": "add subcollection support", "committedDate": "2020-06-16T22:24:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2MjQ4Ng==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2434#discussion_r441262486", "bodyText": "The actual return type is Flux though?", "author": "meltsufin", "createdAt": "2020-06-17T03:40:23Z", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java", "diffHunk": "@@ -129,6 +129,22 @@\n \t */\n \t<T> Mono<Void> deleteById(Publisher<String> idPublisher, Class entityClass);\n \n+\t/**\n+\t * Executes a query represented as query builder and returns results of the given domain type.\n+\t * @param <T> the type param of the domain type.\n+\t * @param builder the query builder.\n+\t * @param entityClass the domain type of entities.\n+\t * @return {@link Mono} signaling when operation has completed.", "originalCommit": "09b9a144f677935f315ff893bcd96064925e7b89", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "04307f207a50bebb65ae36c5b3126f65a8fa6f18", "chunk": "diff --git a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java\nindex 1749054e..17a2390b 100644\n--- a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java\n+++ b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java\n\n@@ -134,17 +134,18 @@ public interface FirestoreReactiveOperations {\n \t * @param <T> the type param of the domain type.\n \t * @param builder the query builder.\n \t * @param entityClass the domain type of entities.\n-\t * @return {@link Mono} signaling when operation has completed.\n+\t * @return {@link Flux} emitting the found entities.\n \t */\n-\t<T> Flux execute(StructuredQuery.Builder builder, Class<T> entityClass);\n+\t<T> Flux<T> execute(StructuredQuery.Builder builder, Class<T> entityClass);\n \n \t/**\n \t * Creates FirestoreReactiveOperations object with a provided parent.\n \t * The parent doesn't have to exist in Firestore, but should have a non-empty id field.\n \t * @param <T> the type param of the parent.\n \t * @param parent the query builder.\n-\t * @return {@link Mono} signaling when operation has completed.\n+\t * @return template with a given parent.\n+   * @since 1.2.4\n \t */\n-\t<T> FirestoreReactiveOperations operationsWithParent(T parent);\n+\t<T> FirestoreReactiveOperations withParent(T parent);\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2MjU4Ng==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2434#discussion_r441262586", "bodyText": "No Mono returned.", "author": "meltsufin", "createdAt": "2020-06-17T03:40:50Z", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java", "diffHunk": "@@ -129,6 +129,22 @@\n \t */\n \t<T> Mono<Void> deleteById(Publisher<String> idPublisher, Class entityClass);\n \n+\t/**\n+\t * Executes a query represented as query builder and returns results of the given domain type.\n+\t * @param <T> the type param of the domain type.\n+\t * @param builder the query builder.\n+\t * @param entityClass the domain type of entities.\n+\t * @return {@link Mono} signaling when operation has completed.\n+\t */\n+\t<T> Flux execute(StructuredQuery.Builder builder, Class<T> entityClass);\n+\n+\t/**\n+\t * Creates FirestoreReactiveOperations object with a provided parent.\n+\t * The parent doesn't have to exist in Firestore, but should have a non-empty id field.\n+\t * @param <T> the type param of the parent.\n+\t * @param parent the query builder.\n+\t * @return {@link Mono} signaling when operation has completed.", "originalCommit": "09b9a144f677935f315ff893bcd96064925e7b89", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "04307f207a50bebb65ae36c5b3126f65a8fa6f18", "chunk": "diff --git a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java\nindex 1749054e..17a2390b 100644\n--- a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java\n+++ b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java\n\n@@ -134,17 +134,18 @@ public interface FirestoreReactiveOperations {\n \t * @param <T> the type param of the domain type.\n \t * @param builder the query builder.\n \t * @param entityClass the domain type of entities.\n-\t * @return {@link Mono} signaling when operation has completed.\n+\t * @return {@link Flux} emitting the found entities.\n \t */\n-\t<T> Flux execute(StructuredQuery.Builder builder, Class<T> entityClass);\n+\t<T> Flux<T> execute(StructuredQuery.Builder builder, Class<T> entityClass);\n \n \t/**\n \t * Creates FirestoreReactiveOperations object with a provided parent.\n \t * The parent doesn't have to exist in Firestore, but should have a non-empty id field.\n \t * @param <T> the type param of the parent.\n \t * @param parent the query builder.\n-\t * @return {@link Mono} signaling when operation has completed.\n+\t * @return template with a given parent.\n+   * @since 1.2.4\n \t */\n-\t<T> FirestoreReactiveOperations operationsWithParent(T parent);\n+\t<T> FirestoreReactiveOperations withParent(T parent);\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2MjgzOA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2434#discussion_r441262838", "bodyText": "And version don't seem accurate.", "author": "meltsufin", "createdAt": "2020-06-17T03:41:53Z", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/Subcollection.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2017-2018 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.firestore;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Annotation for Datastore property that indicates it holds child entities that are\n+ * linked to this entity by the Cloud Datastore Ancestor relationship.\n+ *\n+ * @author Chengyuan Zhao", "originalCommit": "09b9a144f677935f315ff893bcd96064925e7b89", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "04307f207a50bebb65ae36c5b3126f65a8fa6f18", "chunk": "diff --git a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/Subcollection.java b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/Subcollection.java\ndeleted file mode 100644\nindex 0893682c..00000000\n--- a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/Subcollection.java\n+++ /dev/null\n\n@@ -1,38 +0,0 @@\n-/*\n- * Copyright 2017-2018 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.springframework.cloud.gcp.data.firestore;\n-\n-import java.lang.annotation.Documented;\n-import java.lang.annotation.ElementType;\n-import java.lang.annotation.Retention;\n-import java.lang.annotation.RetentionPolicy;\n-import java.lang.annotation.Target;\n-\n-/**\n- * Annotation for Datastore property that indicates it holds child entities that are\n- * linked to this entity by the Cloud Datastore Ancestor relationship.\n- *\n- * @author Chengyuan Zhao\n- *\n- * @since 1.1\n- */\n-@Documented\n-@Target(ElementType.FIELD)\n-@Retention(RetentionPolicy.RUNTIME)\n-public @interface Subcollection {\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2MjkxNA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2434#discussion_r441262914", "bodyText": "Add @since 1.2.4", "author": "meltsufin", "createdAt": "2020-06-17T03:42:16Z", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java", "diffHunk": "@@ -129,6 +129,22 @@\n \t */\n \t<T> Mono<Void> deleteById(Publisher<String> idPublisher, Class entityClass);\n \n+\t/**\n+\t * Executes a query represented as query builder and returns results of the given domain type.\n+\t * @param <T> the type param of the domain type.\n+\t * @param builder the query builder.\n+\t * @param entityClass the domain type of entities.\n+\t * @return {@link Mono} signaling when operation has completed.\n+\t */", "originalCommit": "09b9a144f677935f315ff893bcd96064925e7b89", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "04307f207a50bebb65ae36c5b3126f65a8fa6f18", "chunk": "diff --git a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java\nindex 1749054e..17a2390b 100644\n--- a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java\n+++ b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java\n\n@@ -134,17 +134,18 @@ public interface FirestoreReactiveOperations {\n \t * @param <T> the type param of the domain type.\n \t * @param builder the query builder.\n \t * @param entityClass the domain type of entities.\n-\t * @return {@link Mono} signaling when operation has completed.\n+\t * @return {@link Flux} emitting the found entities.\n \t */\n-\t<T> Flux execute(StructuredQuery.Builder builder, Class<T> entityClass);\n+\t<T> Flux<T> execute(StructuredQuery.Builder builder, Class<T> entityClass);\n \n \t/**\n \t * Creates FirestoreReactiveOperations object with a provided parent.\n \t * The parent doesn't have to exist in Firestore, but should have a non-empty id field.\n \t * @param <T> the type param of the parent.\n \t * @param parent the query builder.\n-\t * @return {@link Mono} signaling when operation has completed.\n+\t * @return template with a given parent.\n+   * @since 1.2.4\n \t */\n-\t<T> FirestoreReactiveOperations operationsWithParent(T parent);\n+\t<T> FirestoreReactiveOperations withParent(T parent);\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2Mjk3NA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2434#discussion_r441262974", "bodyText": "Add @since 1.2.4", "author": "meltsufin", "createdAt": "2020-06-17T03:42:29Z", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java", "diffHunk": "@@ -129,6 +129,22 @@\n \t */\n \t<T> Mono<Void> deleteById(Publisher<String> idPublisher, Class entityClass);\n \n+\t/**\n+\t * Executes a query represented as query builder and returns results of the given domain type.\n+\t * @param <T> the type param of the domain type.\n+\t * @param builder the query builder.\n+\t * @param entityClass the domain type of entities.\n+\t * @return {@link Mono} signaling when operation has completed.\n+\t */\n+\t<T> Flux execute(StructuredQuery.Builder builder, Class<T> entityClass);\n+\n+\t/**\n+\t * Creates FirestoreReactiveOperations object with a provided parent.\n+\t * The parent doesn't have to exist in Firestore, but should have a non-empty id field.\n+\t * @param <T> the type param of the parent.\n+\t * @param parent the query builder.\n+\t * @return {@link Mono} signaling when operation has completed.\n+\t */", "originalCommit": "09b9a144f677935f315ff893bcd96064925e7b89", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "04307f207a50bebb65ae36c5b3126f65a8fa6f18", "chunk": "diff --git a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java\nindex 1749054e..17a2390b 100644\n--- a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java\n+++ b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java\n\n@@ -134,17 +134,18 @@ public interface FirestoreReactiveOperations {\n \t * @param <T> the type param of the domain type.\n \t * @param builder the query builder.\n \t * @param entityClass the domain type of entities.\n-\t * @return {@link Mono} signaling when operation has completed.\n+\t * @return {@link Flux} emitting the found entities.\n \t */\n-\t<T> Flux execute(StructuredQuery.Builder builder, Class<T> entityClass);\n+\t<T> Flux<T> execute(StructuredQuery.Builder builder, Class<T> entityClass);\n \n \t/**\n \t * Creates FirestoreReactiveOperations object with a provided parent.\n \t * The parent doesn't have to exist in Firestore, but should have a non-empty id field.\n \t * @param <T> the type param of the parent.\n \t * @param parent the query builder.\n-\t * @return {@link Mono} signaling when operation has completed.\n+\t * @return template with a given parent.\n+   * @since 1.2.4\n \t */\n-\t<T> FirestoreReactiveOperations operationsWithParent(T parent);\n+\t<T> FirestoreReactiveOperations withParent(T parent);\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2NDMzNg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2434#discussion_r441264336", "bodyText": "Where is this used? I don't see it.", "author": "meltsufin", "createdAt": "2020-06-17T03:48:27Z", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/Subcollection.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2017-2018 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.firestore;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Annotation for Datastore property that indicates it holds child entities that are\n+ * linked to this entity by the Cloud Datastore Ancestor relationship.\n+ *\n+ * @author Chengyuan Zhao\n+ *\n+ * @since 1.1\n+ */\n+@Documented\n+@Target(ElementType.FIELD)\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface Subcollection {", "originalCommit": "09b9a144f677935f315ff893bcd96064925e7b89", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "04307f207a50bebb65ae36c5b3126f65a8fa6f18", "chunk": "diff --git a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/Subcollection.java b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/Subcollection.java\ndeleted file mode 100644\nindex 0893682c..00000000\n--- a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/Subcollection.java\n+++ /dev/null\n\n@@ -1,38 +0,0 @@\n-/*\n- * Copyright 2017-2018 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.springframework.cloud.gcp.data.firestore;\n-\n-import java.lang.annotation.Documented;\n-import java.lang.annotation.ElementType;\n-import java.lang.annotation.Retention;\n-import java.lang.annotation.RetentionPolicy;\n-import java.lang.annotation.Target;\n-\n-/**\n- * Annotation for Datastore property that indicates it holds child entities that are\n- * linked to this entity by the Cloud Datastore Ancestor relationship.\n- *\n- * @author Chengyuan Zhao\n- *\n- * @since 1.1\n- */\n-@Documented\n-@Target(ElementType.FIELD)\n-@Retention(RetentionPolicy.RUNTIME)\n-public @interface Subcollection {\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI2NDYyNA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2434#discussion_r441264624", "bodyText": "How is this related to subcollections?", "author": "meltsufin", "createdAt": "2020-06-17T03:49:40Z", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java", "diffHunk": "@@ -129,6 +129,22 @@\n \t */\n \t<T> Mono<Void> deleteById(Publisher<String> idPublisher, Class entityClass);\n \n+\t/**\n+\t * Executes a query represented as query builder and returns results of the given domain type.\n+\t * @param <T> the type param of the domain type.\n+\t * @param builder the query builder.\n+\t * @param entityClass the domain type of entities.\n+\t * @return {@link Mono} signaling when operation has completed.\n+\t */\n+\t<T> Flux execute(StructuredQuery.Builder builder, Class<T> entityClass);", "originalCommit": "09b9a144f677935f315ff893bcd96064925e7b89", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "04307f207a50bebb65ae36c5b3126f65a8fa6f18", "chunk": "diff --git a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java\nindex 1749054e..17a2390b 100644\n--- a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java\n+++ b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java\n\n@@ -134,17 +134,18 @@ public interface FirestoreReactiveOperations {\n \t * @param <T> the type param of the domain type.\n \t * @param builder the query builder.\n \t * @param entityClass the domain type of entities.\n-\t * @return {@link Mono} signaling when operation has completed.\n+\t * @return {@link Flux} emitting the found entities.\n \t */\n-\t<T> Flux execute(StructuredQuery.Builder builder, Class<T> entityClass);\n+\t<T> Flux<T> execute(StructuredQuery.Builder builder, Class<T> entityClass);\n \n \t/**\n \t * Creates FirestoreReactiveOperations object with a provided parent.\n \t * The parent doesn't have to exist in Firestore, but should have a non-empty id field.\n \t * @param <T> the type param of the parent.\n \t * @param parent the query builder.\n-\t * @return {@link Mono} signaling when operation has completed.\n+\t * @return template with a given parent.\n+   * @since 1.2.4\n \t */\n-\t<T> FirestoreReactiveOperations operationsWithParent(T parent);\n+\t<T> FirestoreReactiveOperations withParent(T parent);\n \n }\n"}}, {"oid": "db497c96eb900d30e03f81bf40304935488fd5da", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/db497c96eb900d30e03f81bf40304935488fd5da", "message": "checkstyle", "committedDate": "2020-06-17T17:25:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3NzQ1Ng==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2434#discussion_r441777456", "bodyText": "I think you may need to invent a new abstraction here which implements FirestoreReactiveOperations and just has a reference to the subcollection and the FirestoreTemplate and then delegates calls to the firestoretemplate.\nI think copying the whole FirestoreTemplate object is too heavyweight for just setting the root; feels like there is too much redundant information being copied each time the method is called. Another reason why it doesn't feel quite right is because you are also going to need to call all the setter methods to copy over the settings that were set outside the constructor to do this right.", "author": "dzou", "createdAt": "2020-06-17T19:17:32Z", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "diffHunk": "@@ -101,6 +101,10 @@ public FirestoreTemplate(FirestoreStub firestore, String parent, FirestoreClassM\n \t\tthis.mappingContext = mappingContext;\n \t}\n \n+\tpublic <T> FirestoreReactiveOperations operationsWithParent(T parent) {\n+\t\treturn new FirestoreTemplate(this.firestore, buildResourceName(parent), this.classMapper, this.mappingContext);", "originalCommit": "db497c96eb900d30e03f81bf40304935488fd5da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgyODI1OQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2434#discussion_r441828259", "bodyText": "It only \"copies\" references. What setter do you mean?", "author": "dmitry-s", "createdAt": "2020-06-17T20:54:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3NzQ1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgzMzA0Mw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2434#discussion_r441833043", "bodyText": "FirestoreTemplate has settings like bufferSize or useTokens which are not set through constructor but setters, these would have to be copied as well", "author": "dzou", "createdAt": "2020-06-17T21:03:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3NzQ1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgzOTM1Mg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2434#discussion_r441839352", "bodyText": "I guess for now you can just call the setters so that you set the properties of the child template in the same way as the parent; and if the future if we need to optimize we can do it later.", "author": "dzou", "createdAt": "2020-06-17T21:16:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc3NzQ1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "04307f207a50bebb65ae36c5b3126f65a8fa6f18", "chunk": "diff --git a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java\nindex f1521ab5..444bf869 100644\n--- a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java\n+++ b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java\n\n@@ -101,8 +101,15 @@ public class FirestoreTemplate implements FirestoreReactiveOperations {\n \t\tthis.mappingContext = mappingContext;\n \t}\n \n-\tpublic <T> FirestoreReactiveOperations operationsWithParent(T parent) {\n-\t\treturn new FirestoreTemplate(this.firestore, buildResourceName(parent), this.classMapper, this.mappingContext);\n+\t@Override\n+\tpublic <T> FirestoreReactiveOperations withParent(T parent) {\n+    FirestoreTemplate firestoreTemplate =\n+            new FirestoreTemplate(this.firestore, buildResourceName(parent), this.classMapper, this.mappingContext);\n+    firestoreTemplate.setUsingStreamTokens(this.usingStreamTokens);\n+    firestoreTemplate.setWriteBufferSize(this.writeBufferSize);\n+    firestoreTemplate.setWriteBufferTimeout(this.writeBufferTimeout);\n+\n+    return firestoreTemplate;\n \t}\n \n \t/**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4MjE2Mw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2434#discussion_r441782163", "bodyText": "I think you should add to docs how you intend users to use this method. I am imagining something like this:\n@Autowired\nFirestoreTemplate template;\n\ntemplate.withRoot(user1).delete(...)\ntemplate.withRoot(user2).find(...)\n\nAlso I think we should consider renaming it from operationsWithParent to something like: withCollectionRoot(...), withRoot(...), or withParent(..), etc. The method name should be short and also be clear that we are doing our operations from a different parent other than /.", "author": "dzou", "createdAt": "2020-06-17T19:26:43Z", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "diffHunk": "@@ -101,6 +101,10 @@ public FirestoreTemplate(FirestoreStub firestore, String parent, FirestoreClassM\n \t\tthis.mappingContext = mappingContext;\n \t}\n \n+\tpublic <T> FirestoreReactiveOperations operationsWithParent(T parent) {", "originalCommit": "db497c96eb900d30e03f81bf40304935488fd5da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgyODYzNA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2434#discussion_r441828634", "bodyText": "the docs are there in the docs submodule", "author": "dmitry-s", "createdAt": "2020-06-17T20:54:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4MjE2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "04307f207a50bebb65ae36c5b3126f65a8fa6f18", "chunk": "diff --git a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java\nindex f1521ab5..444bf869 100644\n--- a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java\n+++ b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java\n\n@@ -101,8 +101,15 @@ public class FirestoreTemplate implements FirestoreReactiveOperations {\n \t\tthis.mappingContext = mappingContext;\n \t}\n \n-\tpublic <T> FirestoreReactiveOperations operationsWithParent(T parent) {\n-\t\treturn new FirestoreTemplate(this.firestore, buildResourceName(parent), this.classMapper, this.mappingContext);\n+\t@Override\n+\tpublic <T> FirestoreReactiveOperations withParent(T parent) {\n+    FirestoreTemplate firestoreTemplate =\n+            new FirestoreTemplate(this.firestore, buildResourceName(parent), this.classMapper, this.mappingContext);\n+    firestoreTemplate.setUsingStreamTokens(this.usingStreamTokens);\n+    firestoreTemplate.setWriteBufferSize(this.writeBufferSize);\n+    firestoreTemplate.setWriteBufferTimeout(this.writeBufferTimeout);\n+\n+    return firestoreTemplate;\n \t}\n \n \t/**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc4NDIyNA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2434#discussion_r441784224", "bodyText": "This also needs a @Override.", "author": "dzou", "createdAt": "2020-06-17T19:30:48Z", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "diffHunk": "@@ -101,6 +101,10 @@ public FirestoreTemplate(FirestoreStub firestore, String parent, FirestoreClassM\n \t\tthis.mappingContext = mappingContext;\n \t}\n \n+\tpublic <T> FirestoreReactiveOperations operationsWithParent(T parent) {", "originalCommit": "db497c96eb900d30e03f81bf40304935488fd5da", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "04307f207a50bebb65ae36c5b3126f65a8fa6f18", "chunk": "diff --git a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java\nindex f1521ab5..444bf869 100644\n--- a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java\n+++ b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java\n\n@@ -101,8 +101,15 @@ public class FirestoreTemplate implements FirestoreReactiveOperations {\n \t\tthis.mappingContext = mappingContext;\n \t}\n \n-\tpublic <T> FirestoreReactiveOperations operationsWithParent(T parent) {\n-\t\treturn new FirestoreTemplate(this.firestore, buildResourceName(parent), this.classMapper, this.mappingContext);\n+\t@Override\n+\tpublic <T> FirestoreReactiveOperations withParent(T parent) {\n+    FirestoreTemplate firestoreTemplate =\n+            new FirestoreTemplate(this.firestore, buildResourceName(parent), this.classMapper, this.mappingContext);\n+    firestoreTemplate.setUsingStreamTokens(this.usingStreamTokens);\n+    firestoreTemplate.setWriteBufferSize(this.writeBufferSize);\n+    firestoreTemplate.setWriteBufferTimeout(this.writeBufferTimeout);\n+\n+    return firestoreTemplate;\n \t}\n \n \t/**\n"}}, {"oid": "04307f207a50bebb65ae36c5b3126f65a8fa6f18", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/04307f207a50bebb65ae36c5b3126f65a8fa6f18", "message": "PR comments", "committedDate": "2020-06-17T21:41:25Z", "type": "commit"}, {"oid": "0e68a05156661405e74936cbc35af7bb47ae5af8", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/0e68a05156661405e74936cbc35af7bb47ae5af8", "message": "PR comments", "committedDate": "2020-06-17T21:44:48Z", "type": "commit"}, {"oid": "bf7dfa157d63fe385d56bc0c4e159579e5d007b9", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/bf7dfa157d63fe385d56bc0c4e159579e5d007b9", "message": "PR comments", "committedDate": "2020-06-17T21:46:34Z", "type": "commit"}, {"oid": "fa507e888da6168c1ebb80abf244e97cc3c9f97f", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/fa507e888da6168c1ebb80abf244e97cc3c9f97f", "message": "Merge branch 'master' of github.com:spring-cloud/spring-cloud-gcp into firestore-subcollections", "committedDate": "2020-06-18T21:50:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAwODQ2NA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2434#discussion_r443008464", "bodyText": "indents need to be fixed to tabs instead of spaces.", "author": "dzou", "createdAt": "2020-06-19T19:22:41Z", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java", "diffHunk": "@@ -129,6 +129,24 @@\n \t */\n \t<T> Mono<Void> deleteById(Publisher<String> idPublisher, Class entityClass);\n \n+  /**\n+   * Executes a query represented as query builder and returns results of the given domain type.\n+   * @param <T> the type param of the domain type.\n+   * @param builder the query builder.\n+   * @param entityClass the domain type of entities.\n+   * @return {@link Flux} emitting the found entities.\n+   * @since 1.2.4\n+   */\n+  <T> Flux<T> execute(StructuredQuery.Builder builder, Class<T> entityClass);\n+\n+  /**", "originalCommit": "bf7dfa157d63fe385d56bc0c4e159579e5d007b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6c282707cfc33ba348b57108a16610ab54eb182f", "chunk": "diff --git a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java\nindex 6f129628..0430ae76 100644\n--- a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java\n+++ b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java\n\n@@ -129,24 +129,26 @@ public interface FirestoreReactiveOperations {\n \t */\n \t<T> Mono<Void> deleteById(Publisher<String> idPublisher, Class entityClass);\n \n-  /**\n-   * Executes a query represented as query builder and returns results of the given domain type.\n-   * @param <T> the type param of the domain type.\n-   * @param builder the query builder.\n-   * @param entityClass the domain type of entities.\n-   * @return {@link Flux} emitting the found entities.\n-   * @since 1.2.4\n-   */\n-  <T> Flux<T> execute(StructuredQuery.Builder builder, Class<T> entityClass);\n-\n-  /**\n-   * Creates FirestoreReactiveOperations object with a provided parent.\n-   * The parent doesn't have to exist in Firestore, but should have a non-empty id field.\n-   * @param <T> the type param of the parent.\n-   * @param parent the query builder.\n-   * @return template with a given parent.\n-   * @since 1.2.4\n-   */\n-  <T> FirestoreReactiveOperations withParent(T parent);\n+\t/**\n+\t * Executes a query represented as query builder and returns results of the given domain type.\n+\t * @param <T> the type param of the domain type.\n+\t * @param builder the query builder.\n+\t * @param entityClass the domain type of entities.\n+\t * @return {@link Flux} emitting the found entities.\n+\t * @since 1.2.4\n+\t */\n+\t<T> Flux<T> execute(StructuredQuery.Builder builder, Class<T> entityClass);\n+\n+\t/**\n+\t * Creates FirestoreReactiveOperations object with a provided parent.\n+\t * The parent doesn't have to exist in Firestore, but should have a non-empty id field.\n+\t * All operations and queries will be scoped to that parent's subcollections.\n+\t * By default, FirestoreReactiveOperations uses the root as a \"parent\".\n+\t * @param <T> the type param of the parent.\n+\t * @param parent the query builder.\n+\t * @return template with a given parent.\n+\t * @since 1.2.4\n+\t */\n+\t<T> FirestoreReactiveOperations withParent(T parent);\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAwODg0OA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2434#discussion_r443008848", "bodyText": "This javadoc needs a little bit more description; I think you have to define \"parent\" more clearly.\nThere needs to be something that says that by default the template operates at the root level collection / and then once you pass an entity in here, a new template is created with that entity at the root collection and that all operations/queries will be scoped to that document's subcollections.\nAlso need to clarify what happens if you pass in an entity in here that is not a child of the current parent with withParent(..) - does it still work?", "author": "dzou", "createdAt": "2020-06-19T19:23:52Z", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java", "diffHunk": "@@ -129,6 +129,24 @@\n \t */\n \t<T> Mono<Void> deleteById(Publisher<String> idPublisher, Class entityClass);\n \n+  /**\n+   * Executes a query represented as query builder and returns results of the given domain type.\n+   * @param <T> the type param of the domain type.\n+   * @param builder the query builder.\n+   * @param entityClass the domain type of entities.\n+   * @return {@link Flux} emitting the found entities.\n+   * @since 1.2.4\n+   */\n+  <T> Flux<T> execute(StructuredQuery.Builder builder, Class<T> entityClass);\n+\n+  /**\n+   * Creates FirestoreReactiveOperations object with a provided parent.\n+   * The parent doesn't have to exist in Firestore, but should have a non-empty id field.", "originalCommit": "bf7dfa157d63fe385d56bc0c4e159579e5d007b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg0Nzc3Mg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2434#discussion_r445847772", "bodyText": "The \"scope\" actually explains it. When you save any entity, it is saved within the scope of this parent's subcollections.", "author": "dmitry-s", "createdAt": "2020-06-25T21:27:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzAwODg0OA=="}], "type": "inlineReview", "revised_code": {"commit": "6c282707cfc33ba348b57108a16610ab54eb182f", "chunk": "diff --git a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java\nindex 6f129628..0430ae76 100644\n--- a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java\n+++ b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreReactiveOperations.java\n\n@@ -129,24 +129,26 @@ public interface FirestoreReactiveOperations {\n \t */\n \t<T> Mono<Void> deleteById(Publisher<String> idPublisher, Class entityClass);\n \n-  /**\n-   * Executes a query represented as query builder and returns results of the given domain type.\n-   * @param <T> the type param of the domain type.\n-   * @param builder the query builder.\n-   * @param entityClass the domain type of entities.\n-   * @return {@link Flux} emitting the found entities.\n-   * @since 1.2.4\n-   */\n-  <T> Flux<T> execute(StructuredQuery.Builder builder, Class<T> entityClass);\n-\n-  /**\n-   * Creates FirestoreReactiveOperations object with a provided parent.\n-   * The parent doesn't have to exist in Firestore, but should have a non-empty id field.\n-   * @param <T> the type param of the parent.\n-   * @param parent the query builder.\n-   * @return template with a given parent.\n-   * @since 1.2.4\n-   */\n-  <T> FirestoreReactiveOperations withParent(T parent);\n+\t/**\n+\t * Executes a query represented as query builder and returns results of the given domain type.\n+\t * @param <T> the type param of the domain type.\n+\t * @param builder the query builder.\n+\t * @param entityClass the domain type of entities.\n+\t * @return {@link Flux} emitting the found entities.\n+\t * @since 1.2.4\n+\t */\n+\t<T> Flux<T> execute(StructuredQuery.Builder builder, Class<T> entityClass);\n+\n+\t/**\n+\t * Creates FirestoreReactiveOperations object with a provided parent.\n+\t * The parent doesn't have to exist in Firestore, but should have a non-empty id field.\n+\t * All operations and queries will be scoped to that parent's subcollections.\n+\t * By default, FirestoreReactiveOperations uses the root as a \"parent\".\n+\t * @param <T> the type param of the parent.\n+\t * @param parent the query builder.\n+\t * @return template with a given parent.\n+\t * @since 1.2.4\n+\t */\n+\t<T> FirestoreReactiveOperations withParent(T parent);\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY0NTM3NQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2434#discussion_r445645375", "bodyText": "tabs vs spaces", "author": "meltsufin", "createdAt": "2020-06-25T15:28:08Z", "path": "spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java", "diffHunk": "@@ -101,6 +101,17 @@ public FirestoreTemplate(FirestoreStub firestore, String parent, FirestoreClassM\n \t\tthis.mappingContext = mappingContext;\n \t}\n \n+  @Override", "originalCommit": "bf7dfa157d63fe385d56bc0c4e159579e5d007b9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6c282707cfc33ba348b57108a16610ab54eb182f", "chunk": "diff --git a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java\nindex 9c87e5bf..18822a74 100644\n--- a/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java\n+++ b/spring-cloud-gcp-data-firestore/src/main/java/org/springframework/cloud/gcp/data/firestore/FirestoreTemplate.java\n\n@@ -101,16 +101,16 @@ public class FirestoreTemplate implements FirestoreReactiveOperations {\n \t\tthis.mappingContext = mappingContext;\n \t}\n \n-  @Override\n-  public <T> FirestoreReactiveOperations withParent(T parent) {\n-    FirestoreTemplate firestoreTemplate =\n-            new FirestoreTemplate(this.firestore, buildResourceName(parent), this.classMapper, this.mappingContext);\n-    firestoreTemplate.setUsingStreamTokens(this.usingStreamTokens);\n-    firestoreTemplate.setWriteBufferSize(this.writeBufferSize);\n-    firestoreTemplate.setWriteBufferTimeout(this.writeBufferTimeout);\n-\n-    return firestoreTemplate;\n-  }\n+\t@Override\n+\tpublic <T> FirestoreReactiveOperations withParent(T parent) {\n+\t\tFirestoreTemplate firestoreTemplate =\n+\t\t\t\t\t\tnew FirestoreTemplate(this.firestore, buildResourceName(parent), this.classMapper, this.mappingContext);\n+\t\tfirestoreTemplate.setUsingStreamTokens(this.usingStreamTokens);\n+\t\tfirestoreTemplate.setWriteBufferSize(this.writeBufferSize);\n+\t\tfirestoreTemplate.setWriteBufferTimeout(this.writeBufferTimeout);\n+\n+\t\treturn firestoreTemplate;\n+\t}\n \n \t/**\n \t * Sets the {@link Duration} for how long to wait for the entity buffer to fill before sending\n"}}, {"oid": "6c282707cfc33ba348b57108a16610ab54eb182f", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/6c282707cfc33ba348b57108a16610ab54eb182f", "message": "addressing PR comments", "committedDate": "2020-06-25T21:27:58Z", "type": "commit"}, {"oid": "2691b91ccd8c0a07933982bf6e210fb69827a77e", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/2691b91ccd8c0a07933982bf6e210fb69827a77e", "message": "fix checkstyle issues", "committedDate": "2020-06-26T19:26:08Z", "type": "commit"}]}