{"pr_number": 2448, "pr_title": "Handle null params in Spring Data Spanner", "pr_createdAt": "2020-06-22T21:31:26Z", "pr_url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2448", "timeline": [{"oid": "8f6d7db10dfc5d7783bd845dc741fa73b2e30166", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/8f6d7db10dfc5d7783bd845dc741fa73b2e30166", "message": "handle null params", "committedDate": "2020-06-22T21:29:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg3ODA2NQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2448#discussion_r443878065", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t@Test\n          \n          \n            \n            \t@Test", "author": "dzou", "createdAt": "2020-06-22T23:26:16Z", "path": "spring-cloud-gcp-data-spanner/src/test/java/org/springframework/cloud/gcp/data/spanner/repository/it/SpannerRepositoryInsertIntegrationTests.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2017-2019 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.data.spanner.repository.it;\n+\n+import java.util.Collections;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.cloud.gcp.data.spanner.core.SpannerTemplate;\n+import org.springframework.cloud.gcp.data.spanner.core.admin.SpannerDatabaseAdminTemplate;\n+import org.springframework.cloud.gcp.data.spanner.core.admin.SpannerSchemaUtils;\n+import org.springframework.cloud.gcp.data.spanner.test.IntegrationTestConfiguration;\n+import org.springframework.cloud.gcp.data.spanner.test.domain.Singer;\n+import org.springframework.cloud.gcp.data.spanner.test.domain.SingerRepository;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+/**\n+ * Integration tests for Spanner Repository.\n+ *\n+ */\n+@RunWith(SpringRunner.class)\n+@ContextConfiguration(classes = { IntegrationTestConfiguration.class })\n+public class SpannerRepositoryInsertIntegrationTests {\n+\n+\t@Autowired\n+\tSingerRepository singerRepository;\n+\n+\t@Autowired\n+\tSpannerTemplate spannerTemplate;\n+\n+\t@Autowired\n+\tprotected SpannerSchemaUtils spannerSchemaUtils;\n+\n+\t@Autowired\n+\tSpannerDatabaseAdminTemplate spannerDatabaseAdminTemplate;\n+\n+\t@Before\n+\tpublic void setUp() {\n+\t\tif (!this.spannerDatabaseAdminTemplate.tableExists(\"singers_list\")) {\n+\t\t\tthis.spannerDatabaseAdminTemplate.executeDdlStrings(\n+\t\t\t\t\t\t\tCollections.singleton(this.spannerSchemaUtils.getCreateTableDdlString(Singer.class)),\n+\t\t\t\t\t\t\ttrue);\n+\t\t}\n+\t\tthis.singerRepository.deleteAll();\n+\t}\n+\n+\t@After\n+\tpublic void clearData() {\n+\t\tthis.singerRepository.deleteAll();\n+\t}\n+\n+\t\t@Test", "originalCommit": "8f6d7db10dfc5d7783bd845dc741fa73b2e30166", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2c677b3afbf5efc19ed173af8af28a46afdd4223", "chunk": "diff --git a/spring-cloud-gcp-data-spanner/src/test/java/org/springframework/cloud/gcp/data/spanner/repository/it/SpannerRepositoryInsertIntegrationTests.java b/spring-cloud-gcp-data-spanner/src/test/java/org/springframework/cloud/gcp/data/spanner/repository/it/SpannerRepositoryInsertIntegrationTests.java\nindex 048ad63a..523ccff6 100644\n--- a/spring-cloud-gcp-data-spanner/src/test/java/org/springframework/cloud/gcp/data/spanner/repository/it/SpannerRepositoryInsertIntegrationTests.java\n+++ b/spring-cloud-gcp-data-spanner/src/test/java/org/springframework/cloud/gcp/data/spanner/repository/it/SpannerRepositoryInsertIntegrationTests.java\n\n@@ -70,7 +70,7 @@ public class SpannerRepositoryInsertIntegrationTests {\n \t\tthis.singerRepository.deleteAll();\n \t}\n \n-\t\t@Test\n+\t@Test\n \tpublic void insertTest() {\n \t\tsingerRepository.insert(1, \"Cher\", null);\n \t\tIterable<Singer> singers = singerRepository.findAll();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg3OTIwMQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2448#discussion_r443879201", "bodyText": "Can you add a comment here about how you need to know the type of the parameter (even if you bind null) which is why the type information is relevant for null?", "author": "dzou", "createdAt": "2020-06-22T23:30:19Z", "path": "spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java", "diffHunk": "@@ -361,7 +361,8 @@ public static Statement buildStatementFromSqlWithArgs(String sql, List<String> t\n \tprivate static void bindParameter(ValueBinder<Statement.Builder> bind,\n \t\t\tFunction<Object, Struct> paramStructConvertFunc, SpannerCustomConverter spannerCustomConverter,\n \t\t\tObject originalParam, Parameter paramMetadata) {\n-\t\tif (ConversionUtils.isIterableNonByteArrayType(originalParam.getClass())) {\n+\t\tClass propType = originalParam != null ? originalParam.getClass() : paramMetadata.getType();", "originalCommit": "8f6d7db10dfc5d7783bd845dc741fa73b2e30166", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6d12ab3a5fbfb4690749eb176b7f941ce0a58e65", "chunk": "diff --git a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java\nindex 59c0d056..b01ed913 100644\n--- a/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java\n+++ b/spring-cloud-gcp-data-spanner/src/main/java/org/springframework/cloud/gcp/data/spanner/repository/query/SpannerStatementQueryExecutor.java\n\n@@ -361,6 +361,8 @@ public final class SpannerStatementQueryExecutor {\n \tprivate static void bindParameter(ValueBinder<Statement.Builder> bind,\n \t\t\tFunction<Object, Struct> paramStructConvertFunc, SpannerCustomConverter spannerCustomConverter,\n \t\t\tObject originalParam, Parameter paramMetadata) {\n+\n+\t\t// Gets the type of the bind parameter; if null then infer the type from the parameter metadata.\n \t\tClass propType = originalParam != null ? originalParam.getClass() : paramMetadata.getType();\n \t\tif (ConversionUtils.isIterableNonByteArrayType(propType)) {\n \t\t\tif (!ConverterAwareMappingSpannerEntityWriter.attemptSetIterableValueOnBinder((Iterable) originalParam,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDIzMTgwMA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2448#discussion_r444231800", "bodyText": "What's replacing these 3 tests that you deleted?", "author": "meltsufin", "createdAt": "2020-06-23T13:40:20Z", "path": "spring-cloud-gcp-data-spanner/src/test/java/org/springframework/cloud/gcp/data/spanner/repository/query/SqlSpannerQueryTests.java", "diffHunk": "@@ -426,72 +365,18 @@ public void compoundNameConventionTest() throws NoSuchMethodException {\n \n \t\t// This dummy method was created so the metadata for the ARRAY param inner type is\n \t\t// provided.\n-\t\tMethod method = QueryHolder.class.getMethod(\"dummyMethod\", Object.class, Object.class, Object.class,\n+\t\tMethod method = QueryHolder.class.getMethod(\"dummyMethod\", Object.class, Pageable.class, Object.class,\n \t\t\t\tObject.class, Object.class, Object.class, Object.class, Object.class, Object.class, Object.class,\n \t\t\t\tObject.class, List.class);\n \t\twhen(this.queryMethod.getMethod()).thenReturn(method);\n-\n+\t\tMockito.<Parameters>when(this.queryMethod.getParameters()).thenReturn(new DefaultParameters(method));\n \t\tsqlSpannerQuery.execute(params);\n \n \t\tverify(this.spannerTemplate, times(1)).executeQuery(any(), any());\n \t}\n \n \t@Test\n-\tpublic void multiplePageableSortTest() {", "originalCommit": "8f6d7db10dfc5d7783bd845dc741fa73b2e30166", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "2c677b3afbf5efc19ed173af8af28a46afdd4223", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/2c677b3afbf5efc19ed173af8af28a46afdd4223", "message": "Update spring-cloud-gcp-data-spanner/src/test/java/org/springframework/cloud/gcp/data/spanner/repository/it/SpannerRepositoryInsertIntegrationTests.java\n\nCo-authored-by: Daniel Zou <dzou@users.noreply.github.com>", "committedDate": "2020-06-23T17:16:36Z", "type": "commit"}, {"oid": "6d12ab3a5fbfb4690749eb176b7f941ce0a58e65", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/6d12ab3a5fbfb4690749eb176b7f941ce0a58e65", "message": "PR comments", "committedDate": "2020-06-23T17:25:59Z", "type": "commit"}, {"oid": "98351d3c3cce72b7bfabbfc5f2c6bad74caa5116", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/98351d3c3cce72b7bfabbfc5f2c6bad74caa5116", "message": "guard IT test by it.spanner", "committedDate": "2020-06-25T20:38:17Z", "type": "commit"}]}