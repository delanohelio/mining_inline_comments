{"pr_number": 2146, "pr_title": "Enable usage of projections within Slice repository queries", "pr_createdAt": "2020-01-28T19:29:42Z", "pr_url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2146", "timeline": [{"oid": "ef97fc21a0ea67bfdd2da86f2a368f3f818e356a", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/ef97fc21a0ea67bfdd2da86f2a368f3f818e356a", "message": "Surface-level fix for projections queries.", "committedDate": "2020-01-28T19:15:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAzNDgwOA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2146#discussion_r372034808", "bodyText": "remove @Param annotation", "author": "dmitry-s", "createdAt": "2020-01-28T20:20:17Z", "path": "spring-cloud-gcp-data-datastore/src/test/java/org/springframework/cloud/gcp/data/datastore/it/TestEntityRepository.java", "diffHunk": "@@ -107,6 +107,8 @@\n \t@Query(\"select * from  test_entities_ci where size = @size\")\n \tTestEntityProjection getBySize(@Param(\"size\") long size);\n \n+\tSlice<TestEntityProjection> findBySize(@Param(\"size\") long size, Pageable pageable);", "originalCommit": "ef97fc21a0ea67bfdd2da86f2a368f3f818e356a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA5NTM0Nw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2146#discussion_r372095347", "bodyText": "Done.", "author": "dzou", "createdAt": "2020-01-28T22:30:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAzNDgwOA=="}], "type": "inlineReview", "revised_code": {"commit": "f3cdc15eb418f9ebf43115109dd21827289c7815", "chunk": "diff --git a/spring-cloud-gcp-data-datastore/src/test/java/org/springframework/cloud/gcp/data/datastore/it/TestEntityRepository.java b/spring-cloud-gcp-data-datastore/src/test/java/org/springframework/cloud/gcp/data/datastore/it/TestEntityRepository.java\nindex 7f6982c2..bd47364e 100644\n--- a/spring-cloud-gcp-data-datastore/src/test/java/org/springframework/cloud/gcp/data/datastore/it/TestEntityRepository.java\n+++ b/spring-cloud-gcp-data-datastore/src/test/java/org/springframework/cloud/gcp/data/datastore/it/TestEntityRepository.java\n\n@@ -107,7 +107,7 @@ public interface TestEntityRepository extends DatastoreRepository<TestEntity, Lo\n \t@Query(\"select * from  test_entities_ci where size = @size\")\n \tTestEntityProjection getBySize(@Param(\"size\") long size);\n \n-\tSlice<TestEntityProjection> findBySize(@Param(\"size\") long size, Pageable pageable);\n+\tSlice<TestEntityProjection> findBySize(long size, Pageable pageable);\n \n \tPage<TestEntity> findByShape(Shape shape, Pageable pageable);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA2MjIzNQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2146#discussion_r372062235", "bodyText": "Add assert on the property values.", "author": "meltsufin", "createdAt": "2020-01-28T21:16:52Z", "path": "spring-cloud-gcp-data-datastore/src/test/java/org/springframework/cloud/gcp/data/datastore/it/DatastoreIntegrationTests.java", "diffHunk": "@@ -793,6 +793,23 @@ public void sameClassDescendantsTest() {\n \t\tassertThat(readCompany.leaders).hasSize(1);\n \t\tassertThat(readCompany.leaders.get(0).id).isEqualTo(entity1.id);\n \t}\n+\n+\t@Test\n+\tpublic void testSlicedEntityProjections() {\n+\t\ttestEntityRepository.saveAll(this.allTestEntities);\n+\t\ttestEntityRepository.save(new TestEntity(123L, \"red\", 1L, Shape.CIRCLE, null));\n+\t\ttestEntityRepository.save(new TestEntity(456L, \"blue\", 2L, Shape.CIRCLE, null));\n+\n+\t\tSlice<TestEntityProjection> testEntityProjectionSlice =\n+\t\t\t\ttestEntityRepository.findBySize(1L, PageRequest.of(0, 1));\n+\n+\t\tList<TestEntityProjection> testEntityProjections =\n+\t\t\t\ttestEntityProjectionSlice.get().collect(Collectors.toList());\n+\n+\t\tassertThat(testEntityProjections).hasSize(1);\n+\t\tassertThat(testEntityProjections.get(0)).isInstanceOf(TestEntityProjection.class);", "originalCommit": "ef97fc21a0ea67bfdd2da86f2a368f3f818e356a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA5NTI5MQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2146#discussion_r372095291", "bodyText": "Done.", "author": "dzou", "createdAt": "2020-01-28T22:30:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA2MjIzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "f3cdc15eb418f9ebf43115109dd21827289c7815", "chunk": "diff --git a/spring-cloud-gcp-data-datastore/src/test/java/org/springframework/cloud/gcp/data/datastore/it/DatastoreIntegrationTests.java b/spring-cloud-gcp-data-datastore/src/test/java/org/springframework/cloud/gcp/data/datastore/it/DatastoreIntegrationTests.java\nindex 4172ef40..d5b160d6 100644\n--- a/spring-cloud-gcp-data-datastore/src/test/java/org/springframework/cloud/gcp/data/datastore/it/DatastoreIntegrationTests.java\n+++ b/spring-cloud-gcp-data-datastore/src/test/java/org/springframework/cloud/gcp/data/datastore/it/DatastoreIntegrationTests.java\n\n@@ -796,12 +796,8 @@ public class DatastoreIntegrationTests extends AbstractDatastoreIntegrationTests\n \n \t@Test\n \tpublic void testSlicedEntityProjections() {\n-\t\ttestEntityRepository.saveAll(this.allTestEntities);\n-\t\ttestEntityRepository.save(new TestEntity(123L, \"red\", 1L, Shape.CIRCLE, null));\n-\t\ttestEntityRepository.save(new TestEntity(456L, \"blue\", 2L, Shape.CIRCLE, null));\n-\n \t\tSlice<TestEntityProjection> testEntityProjectionSlice =\n-\t\t\t\ttestEntityRepository.findBySize(1L, PageRequest.of(0, 1));\n+\t\t\t\ttestEntityRepository.findBySize(2L, PageRequest.of(0, 1));\n \n \t\tList<TestEntityProjection> testEntityProjections =\n \t\t\t\ttestEntityProjectionSlice.get().collect(Collectors.toList());\n"}}, {"oid": "f3cdc15eb418f9ebf43115109dd21827289c7815", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/f3cdc15eb418f9ebf43115109dd21827289c7815", "message": "PR Comments", "committedDate": "2020-01-28T22:29:11Z", "type": "commit"}]}