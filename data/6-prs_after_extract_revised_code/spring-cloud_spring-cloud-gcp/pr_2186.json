{"pr_number": 2186, "pr_title": "Datastore slice query projection", "pr_createdAt": "2020-02-07T17:33:54Z", "pr_url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2186", "timeline": [{"oid": "a70dce6452a6e8e848dd83ba5ca818f13fd45669", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/a70dce6452a6e8e848dd83ba5ca818f13fd45669", "message": "fix slice projection for @Query annotated methods", "committedDate": "2020-02-07T17:08:01Z", "type": "commit"}, {"oid": "5b6addbd627b4db7d642c877a14b7fb8f609196d", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/5b6addbd627b4db7d642c877a14b7fb8f609196d", "message": "fix slice projection for @Query annotated methods", "committedDate": "2020-02-07T17:22:13Z", "type": "commit"}, {"oid": "31e3f656996531d00a9098e41a406e74fb99241c", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/31e3f656996531d00a9098e41a406e74fb99241c", "message": "fix slice projection for @Query annotated methods", "committedDate": "2020-02-07T17:31:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU3MTc5OQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2186#discussion_r376571799", "bodyText": "found could be null as Sonar points out.", "author": "meltsufin", "createdAt": "2020-02-07T19:40:06Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/GqlDatastoreQuery.java", "diffHunk": "@@ -169,6 +157,19 @@ else if (this.queryMethod.isCollectionQuery()) {\n \t\treturn result;\n \t}\n \n+\tprivate Object buildPageOrSlice(Object[] parameters, ParsedQueryWithTagsAndValues parsedQueryWithTagsAndValues,\n+\t\t\tDatastoreResultsIterable found) {\n+\t\tPageable pageableParam =\n+\t\t\t\tnew ParametersParameterAccessor(getQueryMethod().getParameters(), parameters).getPageable();\n+\t\tList resultsList = found == null ? Collections.emptyList()\n+\t\t\t\t: (List) StreamSupport.stream(found.spliterator(), false).collect(Collectors.toList());\n+\n+\t\tObject result = isPageQuery()\n+\t\t\t\t? buildPage(pageableParam, parsedQueryWithTagsAndValues, found.getCursor(), resultsList)", "originalCommit": "31e3f656996531d00a9098e41a406e74fb99241c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dbe69248d65712dfdbd113b8481fe2ed9cb59b80", "chunk": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/GqlDatastoreQuery.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/GqlDatastoreQuery.java\nindex ee880516..4c8c85f4 100644\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/GqlDatastoreQuery.java\n+++ b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/GqlDatastoreQuery.java\n\n@@ -164,13 +166,14 @@ public class GqlDatastoreQuery<T> extends AbstractDatastoreQuery<T> {\n \t\tList resultsList = found == null ? Collections.emptyList()\n \t\t\t\t: (List) StreamSupport.stream(found.spliterator(), false).collect(Collectors.toList());\n \n-\t\tObject result = isPageQuery()\n-\t\t\t\t? buildPage(pageableParam, parsedQueryWithTagsAndValues, found.getCursor(), resultsList)\n-\t\t\t\t: buildSlice(pageableParam, parsedQueryWithTagsAndValues, found.getCursor(), resultsList);\n+\t\tCursor cursor = found != null ? found.getCursor() : null;\n+\t\tSlice result = isPageQuery()\n+\t\t\t\t? buildPage(pageableParam, parsedQueryWithTagsAndValues, cursor, resultsList)\n+\t\t\t\t: buildSlice(pageableParam, parsedQueryWithTagsAndValues, cursor, resultsList);\n \t\treturn processRawObjectForProjection(result);\n \t}\n \n-\tprivate Object buildSlice(Pageable pageableParam, ParsedQueryWithTagsAndValues parsedQueryWithTagsAndValues,\n+\tprivate Slice buildSlice(Pageable pageableParam, ParsedQueryWithTagsAndValues parsedQueryWithTagsAndValues,\n \t\t\tCursor cursor, List resultsList) {\n \t\tGqlQuery nextQuery = parsedQueryWithTagsAndValues.bindArgsToGqlQuery(cursor, 1);\n \t\tDatastoreResultsIterable<?> next = this.datastoreTemplate.queryKeysOrEntities(nextQuery, this.entityType);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU3NDk4MA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2186#discussion_r376574980", "bodyText": "Why do we no longer need to convertOnRead and applyProjection?\nI'm having a hard time following what the fix is conceptually.", "author": "meltsufin", "createdAt": "2020-02-07T19:47:25Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/GqlDatastoreQuery.java", "diffHunk": "@@ -169,6 +157,19 @@ else if (this.queryMethod.isCollectionQuery()) {\n \t\treturn result;\n \t}\n \n+\tprivate Object buildPageOrSlice(Object[] parameters, ParsedQueryWithTagsAndValues parsedQueryWithTagsAndValues,\n+\t\t\tDatastoreResultsIterable found) {\n+\t\tPageable pageableParam =\n+\t\t\t\tnew ParametersParameterAccessor(getQueryMethod().getParameters(), parameters).getPageable();\n+\t\tList resultsList = found == null ? Collections.emptyList()\n+\t\t\t\t: (List) StreamSupport.stream(found.spliterator(), false).collect(Collectors.toList());", "originalCommit": "31e3f656996531d00a9098e41a406e74fb99241c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU5MTgwNg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2186#discussion_r376591806", "bodyText": "it is already converted at this point", "author": "dmitry-s", "createdAt": "2020-02-07T20:28:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU3NDk4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU5MzE4Mw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2186#discussion_r376593183", "bodyText": "Perhaps a PR description would help? I am equally confused, BTW :)", "author": "elefeint", "createdAt": "2020-02-07T20:31:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU3NDk4MA=="}], "type": "inlineReview", "revised_code": {"commit": "dbe69248d65712dfdbd113b8481fe2ed9cb59b80", "chunk": "diff --git a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/GqlDatastoreQuery.java b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/GqlDatastoreQuery.java\nindex ee880516..4c8c85f4 100644\n--- a/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/GqlDatastoreQuery.java\n+++ b/spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/repository/query/GqlDatastoreQuery.java\n\n@@ -164,13 +166,14 @@ public class GqlDatastoreQuery<T> extends AbstractDatastoreQuery<T> {\n \t\tList resultsList = found == null ? Collections.emptyList()\n \t\t\t\t: (List) StreamSupport.stream(found.spliterator(), false).collect(Collectors.toList());\n \n-\t\tObject result = isPageQuery()\n-\t\t\t\t? buildPage(pageableParam, parsedQueryWithTagsAndValues, found.getCursor(), resultsList)\n-\t\t\t\t: buildSlice(pageableParam, parsedQueryWithTagsAndValues, found.getCursor(), resultsList);\n+\t\tCursor cursor = found != null ? found.getCursor() : null;\n+\t\tSlice result = isPageQuery()\n+\t\t\t\t? buildPage(pageableParam, parsedQueryWithTagsAndValues, cursor, resultsList)\n+\t\t\t\t: buildSlice(pageableParam, parsedQueryWithTagsAndValues, cursor, resultsList);\n \t\treturn processRawObjectForProjection(result);\n \t}\n \n-\tprivate Object buildSlice(Pageable pageableParam, ParsedQueryWithTagsAndValues parsedQueryWithTagsAndValues,\n+\tprivate Slice buildSlice(Pageable pageableParam, ParsedQueryWithTagsAndValues parsedQueryWithTagsAndValues,\n \t\t\tCursor cursor, List resultsList) {\n \t\tGqlQuery nextQuery = parsedQueryWithTagsAndValues.bindArgsToGqlQuery(cursor, 1);\n \t\tDatastoreResultsIterable<?> next = this.datastoreTemplate.queryKeysOrEntities(nextQuery, this.entityType);\n"}}, {"oid": "dbe69248d65712dfdbd113b8481fe2ed9cb59b80", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/dbe69248d65712dfdbd113b8481fe2ed9cb59b80", "message": "fix slice projection for @Query annotated methods", "committedDate": "2020-02-07T21:42:34Z", "type": "commit"}]}