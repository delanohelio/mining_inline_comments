{"pr_number": 8850, "pr_title": "Test fixes", "pr_createdAt": "2020-07-19T13:48:50Z", "pr_url": "https://github.com/JMRI/JMRI/pull/8850", "timeline": [{"oid": "4e236ea9388387849f7a5b518209384020b42428", "url": "https://github.com/JMRI/JMRI/commit/4e236ea9388387849f7a5b518209384020b42428", "message": "remove unnecessary reference to apps", "committedDate": "2020-07-13T17:17:10Z", "type": "commit"}, {"oid": "34a4d8d1d1d767c5ccbbc86bf5a4814361873537", "url": "https://github.com/JMRI/JMRI/commit/34a4d8d1d1d767c5ccbbc86bf5a4814361873537", "message": "remove apps references from JUnitUtil", "committedDate": "2020-07-13T21:58:26Z", "type": "commit"}, {"oid": "74fc5ae45db6539b16f027c02817a0edd98b85b1", "url": "https://github.com/JMRI/JMRI/commit/74fc5ae45db6539b16f027c02817a0edd98b85b1", "message": "use the right logger", "committedDate": "2020-07-13T22:42:56Z", "type": "commit"}, {"oid": "ba5ff9dda9c52dfbe8718c9969d1df1989e11edd", "url": "https://github.com/JMRI/JMRI/commit/ba5ff9dda9c52dfbe8718c9969d1df1989e11edd", "message": "Merge branch 'master' of https://github.com/JMRI/JMRI into TestFixes", "committedDate": "2020-07-14T01:00:47Z", "type": "commit"}, {"oid": "d66d372e096ef4cd51ebf8cfec7e0858848aa25a", "url": "https://github.com/JMRI/JMRI/commit/d66d372e096ef4cd51ebf8cfec7e0858848aa25a", "message": "Merge branch 'master' of https://github.com/JMRI/JMRI into TestFixes", "committedDate": "2020-07-17T19:04:30Z", "type": "commit"}, {"oid": "427c2092db59ec40d0a8a4f74bf15bfb758a0877", "url": "https://github.com/JMRI/JMRI/commit/427c2092db59ec40d0a8a4f74bf15bfb758a0877", "message": "linting;fix bitwise operation bug", "committedDate": "2020-07-17T22:42:27Z", "type": "commit"}, {"oid": "8f6e24055c862abf6bbf6d9c590ef907873eceaa", "url": "https://github.com/JMRI/JMRI/commit/8f6e24055c862abf6bbf6d9c590ef907873eceaa", "message": "test linting", "committedDate": "2020-07-18T00:49:49Z", "type": "commit"}, {"oid": "619428684fa3b8157af61dc046f5b01790ea3be0", "url": "https://github.com/JMRI/JMRI/commit/619428684fa3b8157af61dc046f5b01790ea3be0", "message": "check for logging init by looking for appenders.", "committedDate": "2020-07-18T05:38:02Z", "type": "commit"}, {"oid": "f5c61750324a49aa035ee13124bb2de5c6e060ad", "url": "https://github.com/JMRI/JMRI/commit/f5c61750324a49aa035ee13124bb2de5c6e060ad", "message": "test linting; and some tolelrance for window positioning", "committedDate": "2020-07-18T12:23:45Z", "type": "commit"}, {"oid": "701d4c169e4a90c76c0055b73ac8be9ab4aed4d1", "url": "https://github.com/JMRI/JMRI/commit/701d4c169e4a90c76c0055b73ac8be9ab4aed4d1", "message": "remove unused variable", "committedDate": "2020-07-18T14:50:42Z", "type": "commit"}, {"oid": "39ea430637a4081a2ab2fa1940d73c555d972124", "url": "https://github.com/JMRI/JMRI/commit/39ea430637a4081a2ab2fa1940d73c555d972124", "message": "test linting; use disable instead of assume", "committedDate": "2020-07-18T19:06:15Z", "type": "commit"}, {"oid": "b5ad4a68b8bab855f1ba8dbcea079aabf946b849", "url": "https://github.com/JMRI/JMRI/commit/b5ad4a68b8bab855f1ba8dbcea079aabf946b849", "message": "linting; one graphics disable per file (for file of all graphical tests)", "committedDate": "2020-07-19T01:58:09Z", "type": "commit"}, {"oid": "c22476c864ef991d7d19d03494b5d735cc200a46", "url": "https://github.com/JMRI/JMRI/commit/c22476c864ef991d7d19d03494b5d735cc200a46", "message": "include Disable intermittent annotation", "committedDate": "2020-07-19T02:56:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkxMjAwMw==", "url": "https://github.com/JMRI/JMRI/pull/8850#discussion_r456912003", "bodyText": "Why a new class and not adding logging initialization to jmri.util.JUnitLoggingUtil? (its likely going to be confusing having JUnitLoggingUtil and LoggingTestUtil)", "author": "rhwood", "createdAt": "2020-07-19T13:56:39Z", "path": "java/test/jmri/util/LoggingTestUtil.java", "diffHunk": "@@ -0,0 +1,151 @@\n+package jmri.util;\n+\n+import java.io.*;\n+import java.nio.file.Files;\n+import java.util.*;\n+\n+import javax.annotation.Nonnull;\n+\n+import jmri.util.exceptionhandler.UncaughtExceptionHandler;\n+\n+import org.apache.log4j.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Common utility methods for working with Log4J in tests.\n+ * <p>\n+ * Two system properties influence how logging is configured in JMRI:\n+ * <dl>\n+ * <dt>jmri.log</dt><dd>The logging control file. If this file is not an\n+ * absolute path, this file is searched for in the following order:<ol>\n+ * <li>JMRI settings directory</li>\n+ * <li>JMRI installation (program) directory</li>\n+ * </ol>\n+ * If this property is not specified, the logging control file\n+ * <i>default.lcf</i> is used, following the above search order to find it.\n+ * </dd>\n+ * <dt>jmri.log.path</dt><dd>The directory for storing logs. If not specified,\n+ * logs are stored in the JMRI preferences directory.</dd>\n+ * </dl>\n+ *\n+ * @author Bob Jacobsen Copyright 2009, 2010\n+ * @author Randall Wood Copyright 2014, 2020\n+ */\n+public class LoggingTestUtil {", "originalCommit": "c22476c864ef991d7d19d03494b5d735cc200a46", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkxODE1Mw==", "url": "https://github.com/JMRI/JMRI/pull/8850#discussion_r456918153", "bodyText": "LoggingTestUtil handles initialization of the logger.\nJUnitLoggingUtil is, per the the class description, utilities for handling special case logging messages in tests.\nPutting both tasks in a single class violates the single responsibility principle.\nI would have named the new class Log4JUtil, but there is a, now deprecated, class with that name already in the package.", "author": "pabender", "createdAt": "2020-07-19T14:53:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkxMjAwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk1MjkwOA==", "url": "https://github.com/JMRI/JMRI/pull/8850#discussion_r456952908", "bodyText": "@rhwood I renamed the class TesttingLoggerConfiguration. That should eliminate the confusion.", "author": "pabender", "createdAt": "2020-07-19T20:38:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkxMjAwMw=="}], "type": "inlineReview", "revised_code": {"commit": "cbc6f64612f1a1d70e51373d7da3ceb69b570728", "chunk": "diff --git a/java/test/jmri/util/LoggingTestUtil.java b/java/test/jmri/util/TestingLoggerConfiguration.java\nsimilarity index 97%\nrename from java/test/jmri/util/LoggingTestUtil.java\nrename to java/test/jmri/util/TestingLoggerConfiguration.java\nindex 1baeae061b..855e0b2d69 100644\n--- a/java/test/jmri/util/LoggingTestUtil.java\n+++ b/java/test/jmri/util/TestingLoggerConfiguration.java\n\n@@ -32,10 +32,10 @@ import org.slf4j.LoggerFactory;\n  * @author Bob Jacobsen Copyright 2009, 2010\n  * @author Randall Wood Copyright 2014, 2020\n  */\n-public class LoggingTestUtil {\n+public class TestingLoggerConfiguration {\n \n     private static final String LOG_HEADER = \"****** JMRI log *******\";\n-    private static final Logger log = LoggerFactory.getLogger(LoggingTestUtil.class);\n+    private static final Logger log = LoggerFactory.getLogger(TestingLoggerConfiguration.class);\n \n     /**\n      * Initialize logging, specifying a control file.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjkxOTU5Nw==", "url": "https://github.com/JMRI/JMRI/pull/8850#discussion_r456919597", "bodyText": "I just wanted to point out the subtle bug in this line.\nThe & happens before the |, so the result of the & doesn\u2019t matter because the | with a constant always makes the value nonzero.\nThe solution is to put the | in parentheses. I moved that line to the oBlockOccupiedOrAllocated method.", "author": "pabender", "createdAt": "2020-07-19T15:05:25Z", "path": "java/test/jmri/jmrit/logix/LearnWarrantTest.java", "diffHunk": "@@ -96,24 +84,18 @@ public void testLearnWarrant() throws Exception {\n         Sensor sensor = block0.getSensor();\n         NXFrameTest.setAndConfirmSensorAction(sensor, Sensor.ACTIVE, block0);\n \n-        JUnitUtil.waitFor(() -> {\n-            return  (block0.getState() & OBlock.ALLOCATED | OBlock.OCCUPIED) != 0;", "originalCommit": "c22476c864ef991d7d19d03494b5d735cc200a46", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "cbc6f64612f1a1d70e51373d7da3ceb69b570728", "url": "https://github.com/JMRI/JMRI/commit/cbc6f64612f1a1d70e51373d7da3ceb69b570728", "message": "better name for class", "committedDate": "2020-07-19T20:36:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5NTM4OA==", "url": "https://github.com/JMRI/JMRI/pull/8850#discussion_r456995388", "bodyText": "Please do this for X as well as Y. When I run this test on my laptop with Debian Linux, I consistent get wrong X values on some items. I don't know why, but by adding your code, but for the X axis, removes the problem.\nIn the tests that failes, x=0 is expected, but I get x=-5.", "author": "danielb987", "createdAt": "2020-07-20T02:23:39Z", "path": "java/test/jmri/configurexml/LoadAndStoreTestBase.java", "diffHunk": "@@ -196,6 +196,24 @@ public static void checkFile(File inFile1, File inFile2) throws Exception {\n                 }\n             }\n \n+            // window y positions will sometimes differ based on window decorations.\n+            if (!match) {\n+                if (line1.contains(\"  <LayoutEditor\") ||\n+                    line1.contains(\" <switchboardeditor\")) {\n+                    // if either line contains a y position attribute\n+                    String yposition_regexe = \"( y=\\\"[^\\\"]*\\\")\";\n+                    String[] splits1 = line1.split(yposition_regexe);\n+                    if (splits1.length == 2) {  // (yes) remove it\n+                        line1 = splits1[0] + splits1[1];\n+                    }\n+                    String[] splits2 = line2.split(yposition_regexe);\n+                    if (splits2.length == 2) {  // (yes) remove it\n+                        line2 = splits2[0] + splits2[1];\n+                    }", "originalCommit": "cbc6f64612f1a1d70e51373d7da3ceb69b570728", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA1ODQzNQ==", "url": "https://github.com/JMRI/JMRI/pull/8850#discussion_r457058435", "bodyText": "sure, thanks for the suggestion.  I did a little refactoring at the same time.", "author": "pabender", "createdAt": "2020-07-20T05:15:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5NTM4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA2Mjg3NQ==", "url": "https://github.com/JMRI/JMRI/pull/8850#discussion_r457062875", "bodyText": "Thanks. The static analysis failed since line 197 and 198 of LoadAndStoreTestBase should have xposition_regexe instead of yposition_regexe.", "author": "danielb987", "createdAt": "2020-07-20T05:25:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5NTM4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA2Mzg2MQ==", "url": "https://github.com/JMRI/JMRI/pull/8850#discussion_r457063861", "bodyText": "Yeah, I saw that.  should be fixed now.", "author": "pabender", "createdAt": "2020-07-20T05:27:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk5NTM4OA=="}], "type": "inlineReview", "revised_code": {"commit": "393bb6988ab388c3b6ec98e0cdc7277ab5dd643a", "chunk": "diff --git a/java/test/jmri/configurexml/LoadAndStoreTestBase.java b/java/test/jmri/configurexml/LoadAndStoreTestBase.java\nindex 07480c5339..8f90ecd3ad 100644\n--- a/java/test/jmri/configurexml/LoadAndStoreTestBase.java\n+++ b/java/test/jmri/configurexml/LoadAndStoreTestBase.java\n\n@@ -175,42 +175,27 @@ public class LoadAndStoreTestBase {\n                 if (line1.contains(\"  <LayoutEditor\")) {\n                     // if either line contains a windowheight attribute\n                     String windowheight_regexe = \"( windowheight=\\\"[^\\\"]*\\\")\";\n-                    String[] splits1 = line1.split(windowheight_regexe);\n-                    if (splits1.length == 2) {  // (yes) remove it\n-                        line1 = splits1[0] + splits1[1];\n-                    }\n-                    String[] splits2 = line2.split(windowheight_regexe);\n-                    if (splits2.length == 2) {  // (yes) remove it\n-                        line2 = splits2[0] + splits2[1];\n-                    }\n+                    line1 = filterLineUsingRegEx(line1, windowheight_regexe);\n+                    line2 = filterLineUsingRegEx(line2, windowheight_regexe);\n                     // if either line contains a windowheight attribute\n                     String windowwidth_regexe = \"( windowwidth=\\\"[^\\\"]*\\\")\";\n-                    splits1 = line1.split(windowwidth_regexe);\n-                    if (splits1.length == 2) {  // (yes) remove it\n-                        line1 = splits1[0] + splits1[1];\n-                    }\n-                    splits2 = line2.split(windowwidth_regexe);\n-                    if (splits2.length == 2) {  // (yes) remove it\n-                        line2 = splits2[0] + splits2[1];\n-                    }\n+                    line1 = filterLineUsingRegEx(line1, windowwidth_regexe);\n+                    line2 = filterLineUsingRegEx(line2, windowwidth_regexe);\n                 }\n             }\n \n-            // window y positions will sometimes differ based on window decorations.\n+            // window positions will sometimes differ based on window decorations.\n             if (!match) {\n                 if (line1.contains(\"  <LayoutEditor\") ||\n                     line1.contains(\" <switchboardeditor\")) {\n                     // if either line contains a y position attribute\n                     String yposition_regexe = \"( y=\\\"[^\\\"]*\\\")\";\n-                    String[] splits1 = line1.split(yposition_regexe);\n-                    if (splits1.length == 2) {  // (yes) remove it\n-                        line1 = splits1[0] + splits1[1];\n-                    }\n-                    String[] splits2 = line2.split(yposition_regexe);\n-                    if (splits2.length == 2) {  // (yes) remove it\n-                        line2 = splits2[0] + splits2[1];\n-                    }\n-\n+                    line1 = filterLineUsingRegEx(line1, yposition_regexe);\n+                    line2 = filterLineUsingRegEx(line2, yposition_regexe);\n+                    // if either line contains an x position attribute\n+                    String xposition_regexe = \"( x=\\\"[^\\\"]*\\\")\";\n+                    line1 = filterLineUsingRegEx(line1, yposition_regexe);\n+                    line2 = filterLineUsingRegEx(line2, yposition_regexe);\n                 }\n             }\n \n"}}, {"oid": "393bb6988ab388c3b6ec98e0cdc7277ab5dd643a", "url": "https://github.com/JMRI/JMRI/commit/393bb6988ab388c3b6ec98e0cdc7277ab5dd643a", "message": "filter out both x and y coordinates.  some refactoring", "committedDate": "2020-07-20T05:13:43Z", "type": "commit"}, {"oid": "482e80ee3704baa74c095d578694b5f67a448f07", "url": "https://github.com/JMRI/JMRI/commit/482e80ee3704baa74c095d578694b5f67a448f07", "message": "use correct regex", "committedDate": "2020-07-20T05:26:27Z", "type": "commit"}]}