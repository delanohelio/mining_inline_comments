{"pr_number": 9033, "pr_title": "Split Multimeter into Meter", "pr_createdAt": "2020-09-23T01:19:16Z", "pr_url": "https://github.com/JMRI/JMRI/pull/9033", "timeline": [{"oid": "410367525bbf76aa86c32094aa126d2cf1f8d961", "url": "https://github.com/JMRI/JMRI/commit/410367525bbf76aa86c32094aa126d2cf1f8d961", "message": "Add Meter interface", "committedDate": "2020-08-25T02:14:42Z", "type": "commit"}, {"oid": "e540f948fd1d90d3e57099d0e54de8ae5da2b77d", "url": "https://github.com/JMRI/JMRI/commit/e540f948fd1d90d3e57099d0e54de8ae5da2b77d", "message": "Fix checkstyle warnings", "committedDate": "2020-08-25T20:04:12Z", "type": "commit"}, {"oid": "34dc4e5f5736e5e433bd96dea4225f1dfa840c1e", "url": "https://github.com/JMRI/JMRI/commit/34dc4e5f5736e5e433bd96dea4225f1dfa840c1e", "message": "Merge branch 'master' into multimeter2", "committedDate": "2020-08-27T07:28:43Z", "type": "commit"}, {"oid": "f63ac9c765c24b36ffce442d1a70544eb118703f", "url": "https://github.com/JMRI/JMRI/commit/f63ac9c765c24b36ffce442d1a70544eb118703f", "message": "Update meters and their implementations", "committedDate": "2020-08-29T04:58:24Z", "type": "commit"}, {"oid": "ce8c8e7403a90c3fdab1942e86c8e6aa870a18b7", "url": "https://github.com/JMRI/JMRI/commit/ce8c8e7403a90c3fdab1942e86c8e6aa870a18b7", "message": "Update Meter implementations", "committedDate": "2020-08-30T17:14:39Z", "type": "commit"}, {"oid": "b80a3abc8447279a16024656ed1c813b3bc4141c", "url": "https://github.com/JMRI/JMRI/commit/b80a3abc8447279a16024656ed1c813b3bc4141c", "message": "Remove deprecated methods", "committedDate": "2020-08-30T18:39:53Z", "type": "commit"}, {"oid": "5a9cb5b30e4747ecf0a131320d7466e38c25285c", "url": "https://github.com/JMRI/JMRI/commit/5a9cb5b30e4747ecf0a131320d7466e38c25285c", "message": "Rename MultiMeter to MeterGroup. Fix tests", "committedDate": "2020-08-30T23:07:17Z", "type": "commit"}, {"oid": "5ebdf3619cd358551f0b32bb7349c9988e4273b7", "url": "https://github.com/JMRI/JMRI/commit/5ebdf3619cd358551f0b32bb7349c9988e4273b7", "message": "Remove redundant imports", "committedDate": "2020-08-30T23:32:29Z", "type": "commit"}, {"oid": "61fe2636dd0cf77136d4aa27820c15b7ae8ee223", "url": "https://github.com/JMRI/JMRI/commit/61fe2636dd0cf77136d4aa27820c15b7ae8ee223", "message": "Fix bugs in Meter code. Update tests", "committedDate": "2020-08-31T03:03:18Z", "type": "commit"}, {"oid": "196788abbddc8f07b5946ea7d03520c2b688c93b", "url": "https://github.com/JMRI/JMRI/commit/196788abbddc8f07b5946ea7d03520c2b688c93b", "message": "Clean up Meter code", "committedDate": "2020-08-31T04:58:27Z", "type": "commit"}, {"oid": "a4908b95765a7470e76cadcf95e398abe63ffdaf", "url": "https://github.com/JMRI/JMRI/commit/a4908b95765a7470e76cadcf95e398abe63ffdaf", "message": "Use correct system names", "committedDate": "2020-08-31T07:00:34Z", "type": "commit"}, {"oid": "3e220ea5ae6ff2834496bbaaeedb75dd24ca3d47", "url": "https://github.com/JMRI/JMRI/commit/3e220ea5ae6ff2834496bbaaeedb75dd24ca3d47", "message": "Update MeterManager.getXMLOrder()", "committedDate": "2020-08-31T07:05:06Z", "type": "commit"}, {"oid": "870775dab475b3ecee4ec6c25f819515eacf4d35", "url": "https://github.com/JMRI/JMRI/commit/870775dab475b3ecee4ec6c25f819515eacf4d35", "message": "Use correct menu item text", "committedDate": "2020-08-31T10:59:55Z", "type": "commit"}, {"oid": "4e0bff39a198063612aa704692e50bb4997a4e7a", "url": "https://github.com/JMRI/JMRI/commit/4e0bff39a198063612aa704692e50bb4997a4e7a", "message": "Send \"read slot request\"", "committedDate": "2020-08-31T12:05:38Z", "type": "commit"}, {"oid": "f51e0f2d6006c2495a1b1f3e3da26a1535b5f6c4", "url": "https://github.com/JMRI/JMRI/commit/f51e0f2d6006c2495a1b1f3e3da26a1535b5f6c4", "message": "Add menu bar to VoltMeterFrame", "committedDate": "2020-08-31T13:25:18Z", "type": "commit"}, {"oid": "3fc1e6a4bd5ec0c071b14ab45c990f9d4144d967", "url": "https://github.com/JMRI/JMRI/commit/3fc1e6a4bd5ec0c071b14ab45c990f9d4144d967", "message": "Update max value for Cbus meter", "committedDate": "2020-09-02T11:27:48Z", "type": "commit"}, {"oid": "59464342e3c93f5ddf903a4ef0c6dced9bd90bd9", "url": "https://github.com/JMRI/JMRI/commit/59464342e3c93f5ddf903a4ef0c6dced9bd90bd9", "message": "Update max value for LocoNet meter", "committedDate": "2020-09-02T11:30:39Z", "type": "commit"}, {"oid": "a3aeb1017c1265bd4d4a231c9570d7358bd1d681", "url": "https://github.com/JMRI/JMRI/commit/a3aeb1017c1265bd4d4a231c9570d7358bd1d681", "message": "Remove unused parameters", "committedDate": "2020-09-02T14:59:40Z", "type": "commit"}, {"oid": "97bba3c48f1feb80eea5c75d81e7013aec32666b", "url": "https://github.com/JMRI/JMRI/commit/97bba3c48f1feb80eea5c75d81e7013aec32666b", "message": "Use correct property name", "committedDate": "2020-09-03T22:26:50Z", "type": "commit"}, {"oid": "8a900fe8b14aaab01732861cd315c214821bf9fa", "url": "https://github.com/JMRI/JMRI/commit/8a900fe8b14aaab01732861cd315c214821bf9fa", "message": "Use correct voltage and current meters", "committedDate": "2020-09-04T02:58:33Z", "type": "commit"}, {"oid": "9e0b609b50a23339300788d723d95202c373f738", "url": "https://github.com/JMRI/JMRI/commit/9e0b609b50a23339300788d723d95202c373f738", "message": "Update property change code", "committedDate": "2020-09-04T07:22:01Z", "type": "commit"}, {"oid": "b710e0ddef95bab70e03281aff687d3bed38c461", "url": "https://github.com/JMRI/JMRI/commit/b710e0ddef95bab70e03281aff687d3bed38c461", "message": "Remove menu", "committedDate": "2020-09-04T08:50:02Z", "type": "commit"}, {"oid": "8c524ebba9f96ed5750aaad0a9959c44b78c2920", "url": "https://github.com/JMRI/JMRI/commit/8c524ebba9f96ed5750aaad0a9959c44b78c2920", "message": "Update VoltageMeterFrame", "committedDate": "2020-09-06T23:35:52Z", "type": "commit"}, {"oid": "1e3a579dd99c52ea8acacd4b0f7505ac53ad153a", "url": "https://github.com/JMRI/JMRI/commit/1e3a579dd99c52ea8acacd4b0f7505ac53ad153a", "message": "Remove AmpMeterFrame. Rename VoltMeterFrame to MeterFrame\n\nRemoves AmpMeterFrame.\nRenames VoltMeterFrame to MeterFrame\nMoves MeterFrame to package jmri.jmrit.swing.meter.\n\nMeterFrame handles both voltage meters and current meters.", "committedDate": "2020-09-07T01:31:39Z", "type": "commit"}, {"oid": "4b5b49f426b4638c748a260ea1795187226f19ed", "url": "https://github.com/JMRI/JMRI/commit/4b5b49f426b4638c748a260ea1795187226f19ed", "message": "Merge branch 'master' into multimeter8", "committedDate": "2020-09-07T01:32:10Z", "type": "commit"}, {"oid": "524b7add2f332edbe8f9310c2708abc6ff46a53c", "url": "https://github.com/JMRI/JMRI/commit/524b7add2f332edbe8f9310c2708abc6ff46a53c", "message": "Update bundle", "committedDate": "2020-09-07T03:12:43Z", "type": "commit"}, {"oid": "77d619a7b453294b08b121a9d8c0d87eb6edd84d", "url": "https://github.com/JMRI/JMRI/commit/77d619a7b453294b08b121a9d8c0d87eb6edd84d", "message": "Have bundle string on one place only", "committedDate": "2020-09-07T09:16:02Z", "type": "commit"}, {"oid": "3ff15411d8058a0e57e28bcd6c7a549d1fa9fe10", "url": "https://github.com/JMRI/JMRI/commit/3ff15411d8058a0e57e28bcd6c7a549d1fa9fe10", "message": "Update MeterFrame menu", "committedDate": "2020-09-07T22:21:40Z", "type": "commit"}, {"oid": "6b877b642f9a4e85b1c63c298703c0d01f8ac864", "url": "https://github.com/JMRI/JMRI/commit/6b877b642f9a4e85b1c63c298703c0d01f8ac864", "message": "Update Meter and its manager", "committedDate": "2020-09-16T12:58:09Z", "type": "commit"}, {"oid": "0acc1028dd80180323537a3f061e3f79b1aa5024", "url": "https://github.com/JMRI/JMRI/commit/0acc1028dd80180323537a3f061e3f79b1aa5024", "message": "Merge branch 'master' into multimeter9", "committedDate": "2020-09-16T14:44:39Z", "type": "commit"}, {"oid": "3cab771fbbe11a3f9f959ff02dd647d883b43206", "url": "https://github.com/JMRI/JMRI/commit/3cab771fbbe11a3f9f959ff02dd647d883b43206", "message": "Remove MeterGroup", "committedDate": "2020-09-17T00:44:29Z", "type": "commit"}, {"oid": "8b01907b0c252ca744dfcd132044b6d926cb3c8e", "url": "https://github.com/JMRI/JMRI/commit/8b01907b0c252ca744dfcd132044b6d926cb3c8e", "message": "Fix unnecessary cast", "committedDate": "2020-09-17T16:43:56Z", "type": "commit"}, {"oid": "7fe07cbd6e1baef866d08b82eb25bc792d76c2e2", "url": "https://github.com/JMRI/JMRI/commit/7fe07cbd6e1baef866d08b82eb25bc792d76c2e2", "message": "Add tests for Z21PredefinedMeters", "committedDate": "2020-09-17T19:21:14Z", "type": "commit"}, {"oid": "fc977089dff4d90b0f3413a12928f83e8197b1e0", "url": "https://github.com/JMRI/JMRI/commit/fc977089dff4d90b0f3413a12928f83e8197b1e0", "message": "Fix tests", "committedDate": "2020-09-17T22:47:32Z", "type": "commit"}, {"oid": "c88e080224736c4d71db20630a400ee080862ea7", "url": "https://github.com/JMRI/JMRI/commit/c88e080224736c4d71db20630a400ee080862ea7", "message": "Fix tests", "committedDate": "2020-09-18T00:44:10Z", "type": "commit"}, {"oid": "b4985472fa4875513af73a99f722387e69016b49", "url": "https://github.com/JMRI/JMRI/commit/b4985472fa4875513af73a99f722387e69016b49", "message": "Remove unused variable", "committedDate": "2020-09-18T00:55:01Z", "type": "commit"}, {"oid": "9bf236fe4d0ca703e972713752539cc3ee7c27bc", "url": "https://github.com/JMRI/JMRI/commit/9bf236fe4d0ca703e972713752539cc3ee7c27bc", "message": "Add test for meter frame xml storage", "committedDate": "2020-09-18T02:50:21Z", "type": "commit"}, {"oid": "caaf3ccec5001b87bf7174db02ffc8f9da750e4a", "url": "https://github.com/JMRI/JMRI/commit/caaf3ccec5001b87bf7174db02ffc8f9da750e4a", "message": "Remove unused variable", "committedDate": "2020-09-18T03:01:00Z", "type": "commit"}, {"oid": "6e0ee2cd5c82b025a0fab338f7a656e043041460", "url": "https://github.com/JMRI/JMRI/commit/6e0ee2cd5c82b025a0fab338f7a656e043041460", "message": "Merge remote-tracking branch 'upstream/master' into multimeter9", "committedDate": "2020-09-18T04:34:14Z", "type": "commit"}, {"oid": "3b5c1468a4be27814268eeae5b6decb3d5429d1b", "url": "https://github.com/JMRI/JMRI/commit/3b5c1468a4be27814268eeae5b6decb3d5429d1b", "message": "Clean up code. Add copyright notices", "committedDate": "2020-09-18T07:08:43Z", "type": "commit"}, {"oid": "cefccfbff15bd2b1d4c9af1c45a4b33bec00c303", "url": "https://github.com/JMRI/JMRI/commit/cefccfbff15bd2b1d4c9af1c45a4b33bec00c303", "message": "Select current meter in the menu when the frame is loaded", "committedDate": "2020-09-18T08:34:56Z", "type": "commit"}, {"oid": "9a40d76ee0e7b0e9eae0345e3e97ac22fc51a691", "url": "https://github.com/JMRI/JMRI/commit/9a40d76ee0e7b0e9eae0345e3e97ac22fc51a691", "message": "Store window position and size in panel file", "committedDate": "2020-09-18T09:10:55Z", "type": "commit"}, {"oid": "30dff23231251e17f2c769a4e60e02dca8ecbeca", "url": "https://github.com/JMRI/JMRI/commit/30dff23231251e17f2c769a4e60e02dca8ecbeca", "message": "Update MeterFrame", "committedDate": "2020-09-22T15:26:23Z", "type": "commit"}, {"oid": "7c3142c579bd9eb6593f8d993cac58a74b63beea", "url": "https://github.com/JMRI/JMRI/commit/7c3142c579bd9eb6593f8d993cac58a74b63beea", "message": "Merge remote-tracking branch 'upstream/master' into multimeter9", "committedDate": "2020-09-22T15:28:20Z", "type": "commit"}, {"oid": "34fb8b557bcef5dad8336e29dde10580f7005c0c", "url": "https://github.com/JMRI/JMRI/commit/34fb8b557bcef5dad8336e29dde10580f7005c0c", "message": "Add support for micro and kilo volt and ampere", "committedDate": "2020-09-22T23:13:54Z", "type": "commit"}, {"oid": "6940320522309fc3df0e92f654754ea0cfe0c95c", "url": "https://github.com/JMRI/JMRI/commit/6940320522309fc3df0e92f654754ea0cfe0c95c", "message": "Fix bug in MeterFrame", "committedDate": "2020-09-23T00:13:24Z", "type": "commit"}, {"oid": "14fed15ff6902423853c88486de3366beebde76a", "url": "https://github.com/JMRI/JMRI/commit/14fed15ff6902423853c88486de3366beebde76a", "message": "Fix spotbugs errors. Fix LoadAndStore test", "committedDate": "2020-09-23T00:25:49Z", "type": "commit"}, {"oid": "efd1927cbeb1c2db2fb4a1edaa805960fcdf9961", "url": "https://github.com/JMRI/JMRI/commit/efd1927cbeb1c2db2fb4a1edaa805960fcdf9961", "message": "Update draft note. Show error sign digits if no meter", "committedDate": "2020-09-23T01:04:48Z", "type": "commit"}, {"oid": "0a83d9d0b19e99bada282abcc2b4ddfa8c8bbc5e", "url": "https://github.com/JMRI/JMRI/commit/0a83d9d0b19e99bada282abcc2b4ddfa8c8bbc5e", "message": "Fix spotbugs error", "committedDate": "2020-09-23T01:17:45Z", "type": "commit"}, {"oid": "4dbbc90ce9d3ed9b825009ca40e49295a09c1158", "url": "https://github.com/JMRI/JMRI/commit/4dbbc90ce9d3ed9b825009ca40e49295a09c1158", "message": "Add support for Kilo and Micro in Meter. Show error if too few digits", "committedDate": "2020-09-24T20:54:50Z", "type": "commit"}, {"oid": "25060a04889dee13d05a769573134b85157bf930", "url": "https://github.com/JMRI/JMRI/commit/25060a04889dee13d05a769573134b85157bf930", "message": "Fix javadoc", "committedDate": "2020-09-24T21:15:31Z", "type": "commit"}, {"oid": "57155a11114bab02ebd7fa7fdf5b596df54a51b7", "url": "https://github.com/JMRI/JMRI/commit/57155a11114bab02ebd7fa7fdf5b596df54a51b7", "message": "Store unit and num digits in panel xml file", "committedDate": "2020-09-25T19:20:34Z", "type": "commit"}, {"oid": "309b45891cc8258fa58b7a60903053fb6842cbb6", "url": "https://github.com/JMRI/JMRI/commit/309b45891cc8258fa58b7a60903053fb6842cbb6", "message": "Update panel xml file", "committedDate": "2020-09-25T20:05:19Z", "type": "commit"}, {"oid": "cb4422ded8d37d69f4deef3b026c93f86fefb87e", "url": "https://github.com/JMRI/JMRI/commit/cb4422ded8d37d69f4deef3b026c93f86fefb87e", "message": "Select right item om the menu when the panel is loaded", "committedDate": "2020-09-25T23:37:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTM4MzMyNg==", "url": "https://github.com/JMRI/JMRI/pull/9033#discussion_r495383326", "bodyText": "This structure \"forces\" all displayed titles on the GUI to be specifically \"track voltage\" or \"track current\", as specified in the bundle associated with jmrit/swing/meter.  This is limiting.\nReported voltages can be \"other than track\" voltages.  Reported currents can be \"other than track\" currents.\nPresumably, other \"meter\" types, such as a fictitious \"LocoNet Message Traffic Meter\" would need some other title (and probably some other \"units\").  It seems silly to me that the title and units would be effectively hard-coded in the MeterFrame and its bundle, rather than provided by the concrete implementation which provides the meter data.\nI would recommend that some future implementation move the \"title\" information out of the MeterFrame and its bundle, into the concrete implementations of the meter data sources.  Ditto for \"default number of whole-unit digits\" and \"default number of fractional-unit digits\", and the units themselves.", "author": "devel-bobm", "createdAt": "2020-09-26T02:15:22Z", "path": "java/src/jmri/jmrit/swing/meter/MeterFrame.java", "diffHunk": "@@ -0,0 +1,661 @@\n+package jmri.jmrit.swing.meter;\n+\n+import java.awt.event.*;\n+import java.beans.PropertyChangeListener;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import javax.swing.*;\n+\n+import jmri.*;\n+import jmri.jmrit.catalog.NamedIcon;\n+import jmri.util.JmriJFrame;\n+\n+/**\n+ * Frame providing a simple LCD-based display of track voltage.\n+ * <p>\n+ * @author Ken Cameron        Copyright (C) 2007\n+ * @author Mark Underwood     Copyright (C) 2007\n+ * @author Andrew Crosland    Copyright (C) 2020\n+ * @author Daniel Bergqvist   Copyright (C) 2020\n+ *\n+ * Adapted from ampmeter to display voltage and current.\n+ */\n+public class MeterFrame extends JmriJFrame {\n+\n+    public enum Unit {\n+        Percent(1.0),    // Not a unit, but here anyway\n+        MicroVolt(1000*1000),\n+        MilliVolt(1000),\n+        Volt(1.0),\n+        KiloVolt(1/1000.0),\n+        MicroAmpere(1000*1000),\n+        MilliAmpere(1000),\n+        Ampere(1.0),\n+        KiloAmpere(1/1000.0);\n+        \n+        private final double multiply;\n+        \n+        private Unit(double m) { multiply = m; }\n+    }\n+    \n+    private static final int MAX_INTEGER_DIGITS = 7;\n+    private static final int MAX_DECIMAL_DIGITS = 3;\n+    \n+    private final UUID uuid;\n+    \n+    private final List<Meter> voltageMeters = new ArrayList<>();\n+    private final List<Meter> currentMeters = new ArrayList<>();\n+    \n+    // GUI member declarations\n+    private JMenuBar menuBar;\n+    ArrayList<JLabel> integerDigitIcons;\n+    ArrayList<JLabel> decimalDigitIcons;\n+    JLabel decimal;\n+    Map<Unit, JLabel> unitLabels = new HashMap<>();\n+    \n+    Map<Meter, JCheckBoxMenuItem> meter_MenuItemMap = new HashMap<>();\n+    Map<Unit, JCheckBoxMenuItem> units_MenuItemMap = new HashMap<>();\n+    Map<Integer, JCheckBoxMenuItem> integerDigits_MenuItemMap = new HashMap<>();\n+    Map<Integer, JCheckBoxMenuItem> decimalDigits_MenuItemMap = new HashMap<>();\n+    JMenuItem lastSelectedMeterMenuItem;\n+    JMenuItem lastSelectedIntegerDigitsMenuItem;\n+    JMenuItem lastSelectedDecimalDigitsMenuItem;\n+    int numIntegerDigits = 3;\n+    int numDecimalDigits = 0;\n+    int lastNumDecimalDigits = -1;\n+    int widthOfAllIconsToDisplay = 0;\n+    int oldWidthOfAllIconsToDisplay = -1;\n+    boolean frameIsInitialized = false;\n+    Unit selectedUnit = Unit.Volt;\n+    \n+    int digitIconWidth;\n+    int decimalIconWidth;\n+    int unitIconWidth;\n+    int iconHeight;\n+\n+    private PropertyChangeListener propertyChangeListener;\n+\n+    private Meter meter;\n+\n+    NamedIcon integerDigits[] = new NamedIcon[10];\n+    NamedIcon decimalDigits[] = new NamedIcon[10];\n+    NamedIcon decimalIcon;\n+    NamedIcon microVoltIcon;\n+    NamedIcon milliVoltIcon;\n+    NamedIcon voltIcon;\n+    NamedIcon kiloVoltIcon;\n+    NamedIcon microAmpIcon;\n+    NamedIcon milliAmpIcon;\n+    NamedIcon ampIcon;\n+    NamedIcon kiloAmpIcon;\n+    NamedIcon percentIcon;\n+    NamedIcon errorIcon;\n+\n+    JPanel pane1;\n+    JPanel meterPane;\n+    \n+    public MeterFrame() {\n+        this(UUID.randomUUID());\n+    }\n+    \n+    public MeterFrame(UUID uuid) {\n+        super(Bundle.getMessage(\"TrackVoltageMeterTitle\"));\n+        \n+        this.uuid = uuid;\n+        \n+        MeterManager mm = InstanceManager.getNullableDefault(MeterManager.class);\n+        if (mm == null) throw new RuntimeException(\"No meter manager exists\");\n+        \n+        for (Meter m : mm.getNamedBeanSet()) {\n+            if ((m != null) && (m instanceof VoltageMeter)) voltageMeters.add(m);\n+            if ((m != null) && (m instanceof CurrentMeter)) currentMeters.add(m);\n+        }\n+        \n+        if (!voltageMeters.isEmpty()) {\n+            setMeter(voltageMeters.get(0));\n+        } else if (!currentMeters.isEmpty()) {\n+            setMeter(currentMeters.get(0));\n+        } else {\n+            setTitle(Bundle.getMessage(\"TrackVoltageMeterTitle\"));\n+        }\n+        \n+        MeterFrameManager.getInstance().register(this);\n+    }\n+    \n+    /**\n+     * Get the UUID of this frame.\n+     * <P>\n+     * The UUID is used if two different panel files are loaded with the same\n+     * meter frame.\n+     * \n+     * @return the UUID of this frame\n+     */\n+    public UUID getUUID() {\n+        return uuid;\n+    }\n+    \n+    /**\n+     * Get the meter that is displayed\n+     * @return the meter\n+     */\n+    public Meter getMeter() {\n+        return meter;\n+    }\n+    \n+    /**\n+     * Set the meter that is displayed.\n+     * @param m the meter or null if no meter is to be shown\n+     */\n+    public void setMeter(Meter m) {\n+        if (lastSelectedMeterMenuItem != null) lastSelectedMeterMenuItem.setSelected(false);\n+\n+        if (meter != null) {\n+            meter.disable();\n+            meter.removePropertyChangeListener(NamedBean.PROPERTY_STATE, propertyChangeListener);\n+        }\n+\n+        meter = m;\n+        \n+        if (meter == null) return;\n+        \n+        meter.addPropertyChangeListener(NamedBean.PROPERTY_STATE, propertyChangeListener);\n+        meter.enable();\n+\n+        if (frameIsInitialized) {\n+            // Initially we want to scale the icons to fit the previously saved window size\n+            scaleImage();\n+\n+            JCheckBoxMenuItem menuItem = meter_MenuItemMap.get(meter);\n+            menuItem.setSelected(true);\n+            lastSelectedMeterMenuItem = menuItem;\n+            \n+            updateMenuUnits();\n+            initSelectedUnit();\n+        }\n+\n+        if (meter instanceof VoltageMeter) {\n+            setTitle(Bundle.getMessage(\"TrackVoltageMeterTitle2\", m.getDisplayName()));\n+        } else {\n+            setTitle(Bundle.getMessage(\"TrackCurrentMeterTitle2\", m.getDisplayName()));\n+        }", "originalCommit": "cb4422ded8d37d69f4deef3b026c93f86fefb87e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQwOTYwMQ==", "url": "https://github.com/JMRI/JMRI/pull/9033#discussion_r495409601", "bodyText": "I have removed the string \"Track\" from the title. It's not needed. The meters are NamedBeans and their display name (system name and possibly the user name) are displayed in the title of MeterFrame. So one simple solution is to give the predefined meters a decent name, for example \"Track voltage\".", "author": "danielb987", "createdAt": "2020-09-26T03:40:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTM4MzMyNg=="}], "type": "inlineReview", "revised_code": {"commit": "dff34c2a170c9d79f22d82b6439f20e79e365705", "chunk": "diff --git a/java/src/jmri/jmrit/swing/meter/MeterFrame.java b/java/src/jmri/jmrit/swing/meter/MeterFrame.java\nindex e5c65d1cc1..7028628217 100644\n--- a/java/src/jmri/jmrit/swing/meter/MeterFrame.java\n+++ b/java/src/jmri/jmrit/swing/meter/MeterFrame.java\n\n@@ -103,7 +103,7 @@ public class MeterFrame extends JmriJFrame {\n     }\n     \n     public MeterFrame(UUID uuid) {\n-        super(Bundle.getMessage(\"TrackVoltageMeterTitle\"));\n+        super(Bundle.getMessage(\"VoltageMeterTitle\"));\n         \n         this.uuid = uuid;\n         \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTM4ODIxNQ==", "url": "https://github.com/JMRI/JMRI/pull/9033#discussion_r495388215", "bodyText": "I assume that a concrete, system-specific MeterManager implementation may register its  VoltageMeter and CurrentMeter objects, and that registered objects of those types will be available for display in the MeterFrame GUI.  I assume that this loop construct makes all registered Meter objects available for selection for display by the MeterFrame.\nQuestion: can a given concrete MeterManager implementation register more than one VoltageMeter and/or more than one CurrentMeter object?  For example, \"track current from booster 1\" and \"track current from booster 2\" and \"track current from booster N\"?  If so, how are these multiple current meters differentiatable so that he/she can select the appropriate Meter object to display in the MeterFrame?", "author": "devel-bobm", "createdAt": "2020-09-26T02:27:50Z", "path": "java/src/jmri/jmrit/swing/meter/MeterFrame.java", "diffHunk": "@@ -0,0 +1,661 @@\n+package jmri.jmrit.swing.meter;\n+\n+import java.awt.event.*;\n+import java.beans.PropertyChangeListener;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import javax.swing.*;\n+\n+import jmri.*;\n+import jmri.jmrit.catalog.NamedIcon;\n+import jmri.util.JmriJFrame;\n+\n+/**\n+ * Frame providing a simple LCD-based display of track voltage.\n+ * <p>\n+ * @author Ken Cameron        Copyright (C) 2007\n+ * @author Mark Underwood     Copyright (C) 2007\n+ * @author Andrew Crosland    Copyright (C) 2020\n+ * @author Daniel Bergqvist   Copyright (C) 2020\n+ *\n+ * Adapted from ampmeter to display voltage and current.\n+ */\n+public class MeterFrame extends JmriJFrame {\n+\n+    public enum Unit {\n+        Percent(1.0),    // Not a unit, but here anyway\n+        MicroVolt(1000*1000),\n+        MilliVolt(1000),\n+        Volt(1.0),\n+        KiloVolt(1/1000.0),\n+        MicroAmpere(1000*1000),\n+        MilliAmpere(1000),\n+        Ampere(1.0),\n+        KiloAmpere(1/1000.0);\n+        \n+        private final double multiply;\n+        \n+        private Unit(double m) { multiply = m; }\n+    }\n+    \n+    private static final int MAX_INTEGER_DIGITS = 7;\n+    private static final int MAX_DECIMAL_DIGITS = 3;\n+    \n+    private final UUID uuid;\n+    \n+    private final List<Meter> voltageMeters = new ArrayList<>();\n+    private final List<Meter> currentMeters = new ArrayList<>();\n+    \n+    // GUI member declarations\n+    private JMenuBar menuBar;\n+    ArrayList<JLabel> integerDigitIcons;\n+    ArrayList<JLabel> decimalDigitIcons;\n+    JLabel decimal;\n+    Map<Unit, JLabel> unitLabels = new HashMap<>();\n+    \n+    Map<Meter, JCheckBoxMenuItem> meter_MenuItemMap = new HashMap<>();\n+    Map<Unit, JCheckBoxMenuItem> units_MenuItemMap = new HashMap<>();\n+    Map<Integer, JCheckBoxMenuItem> integerDigits_MenuItemMap = new HashMap<>();\n+    Map<Integer, JCheckBoxMenuItem> decimalDigits_MenuItemMap = new HashMap<>();\n+    JMenuItem lastSelectedMeterMenuItem;\n+    JMenuItem lastSelectedIntegerDigitsMenuItem;\n+    JMenuItem lastSelectedDecimalDigitsMenuItem;\n+    int numIntegerDigits = 3;\n+    int numDecimalDigits = 0;\n+    int lastNumDecimalDigits = -1;\n+    int widthOfAllIconsToDisplay = 0;\n+    int oldWidthOfAllIconsToDisplay = -1;\n+    boolean frameIsInitialized = false;\n+    Unit selectedUnit = Unit.Volt;\n+    \n+    int digitIconWidth;\n+    int decimalIconWidth;\n+    int unitIconWidth;\n+    int iconHeight;\n+\n+    private PropertyChangeListener propertyChangeListener;\n+\n+    private Meter meter;\n+\n+    NamedIcon integerDigits[] = new NamedIcon[10];\n+    NamedIcon decimalDigits[] = new NamedIcon[10];\n+    NamedIcon decimalIcon;\n+    NamedIcon microVoltIcon;\n+    NamedIcon milliVoltIcon;\n+    NamedIcon voltIcon;\n+    NamedIcon kiloVoltIcon;\n+    NamedIcon microAmpIcon;\n+    NamedIcon milliAmpIcon;\n+    NamedIcon ampIcon;\n+    NamedIcon kiloAmpIcon;\n+    NamedIcon percentIcon;\n+    NamedIcon errorIcon;\n+\n+    JPanel pane1;\n+    JPanel meterPane;\n+    \n+    public MeterFrame() {\n+        this(UUID.randomUUID());\n+    }\n+    \n+    public MeterFrame(UUID uuid) {\n+        super(Bundle.getMessage(\"TrackVoltageMeterTitle\"));\n+        \n+        this.uuid = uuid;\n+        \n+        MeterManager mm = InstanceManager.getNullableDefault(MeterManager.class);\n+        if (mm == null) throw new RuntimeException(\"No meter manager exists\");\n+        \n+        for (Meter m : mm.getNamedBeanSet()) {\n+            if ((m != null) && (m instanceof VoltageMeter)) voltageMeters.add(m);\n+            if ((m != null) && (m instanceof CurrentMeter)) currentMeters.add(m);\n+        }", "originalCommit": "cb4422ded8d37d69f4deef3b026c93f86fefb87e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQwNzE3Nw==", "url": "https://github.com/JMRI/JMRI/pull/9033#discussion_r495407177", "bodyText": "VoltageMeter and CurrentMeter extends Meter, that extends AnalogIO that extends NamedBean. So each meter has a system name and possible an user name. I use the method getDisplayName() to get the system name and the user name if it exists.\nSo yes, any concrete MeterManager can have any number of VoltageMeters and CurrentMeters. And all these meters are available in the MeterFrame.", "author": "danielb987", "createdAt": "2020-09-26T03:15:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTM4ODIxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxMTYxMQ==", "url": "https://github.com/JMRI/JMRI/pull/9033#discussion_r495411611", "bodyText": "If a manager implements multiple meters of a given type, they will all have an identical title in the MeterFrame GUI?  I don't see any reference to either UserName or SystemName when generating the Title for the MeterFrame GUI.", "author": "devel-bobm", "createdAt": "2020-09-26T04:06:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTM4ODIxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxMTgyNQ==", "url": "https://github.com/JMRI/JMRI/pull/9033#discussion_r495411825", "bodyText": "And, curiously, even without reference to UserName or SystemName, the GUI shows up with the \"system name\", such as \"LVCommandStationVoltage\".  Guess I need to look more carefully at the code!", "author": "devel-bobm", "createdAt": "2020-09-26T04:09:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTM4ODIxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxMzYxNw==", "url": "https://github.com/JMRI/JMRI/pull/9033#discussion_r495413617", "bodyText": "The method MeterFrame.setMeter(Meter m), line 180-184:\nif (meter instanceof VoltageMeter) {\n    setTitle(Bundle.getMessage(\"VoltageMeterTitle2\", m.getDisplayName()));\n} else {\n    setTitle(Bundle.getMessage(\"CurrentMeterTitle2\", m.getDisplayName()));\n}\n\ngetDisplayName() returns a string with system name and possibly the user name, if the user name is not empty.", "author": "danielb987", "createdAt": "2020-09-26T04:33:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTM4ODIxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "dff34c2a170c9d79f22d82b6439f20e79e365705", "chunk": "diff --git a/java/src/jmri/jmrit/swing/meter/MeterFrame.java b/java/src/jmri/jmrit/swing/meter/MeterFrame.java\nindex e5c65d1cc1..7028628217 100644\n--- a/java/src/jmri/jmrit/swing/meter/MeterFrame.java\n+++ b/java/src/jmri/jmrit/swing/meter/MeterFrame.java\n\n@@ -103,7 +103,7 @@ public class MeterFrame extends JmriJFrame {\n     }\n     \n     public MeterFrame(UUID uuid) {\n-        super(Bundle.getMessage(\"TrackVoltageMeterTitle\"));\n+        super(Bundle.getMessage(\"VoltageMeterTitle\"));\n         \n         this.uuid = uuid;\n         \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTM5NDQ4MA==", "url": "https://github.com/JMRI/JMRI/pull/9033#discussion_r495394480", "bodyText": "A technical, nit-picky issue:\nIf a LocoNet has more than one of \"DCS240\", \"DCS210\" and/or \"DCS52\" (with one or more of them being configured as booster), then there will be a sequence of reports, one from each reportable device, in response to the query, all going to the same Meter object, and presumably the GUI would be rapidly updated from each source.  It is unclear to me whether this would result in a predictable sequence by device type, so it may be difficult to predict whether the reporting will actually make sense and/or come from a given device.\nUntil some specific plan is put in place for LocoNet Meters and interpretation by \"serial number\" or some other uniquely-identifying information, I would suggest a comment somewhere in help/en/html/hardware/loconet/... stating something like \"LocoNet 'Meter's may give unpredictable results when more than one device on LocoNet is capable of reporting 'Query Mode' voltage and current information.  In such a case, it is unclear exactly which device provides which 'Query Mode' data, so it is unclear exactly which device's data will be reported\".", "author": "devel-bobm", "createdAt": "2020-09-26T02:44:03Z", "path": "java/src/jmri/jmrix/loconet/LnPredefinedMeters.java", "diffHunk": "@@ -0,0 +1,110 @@\n+package jmri.jmrix.loconet;\n+\n+import jmri.*;\n+import jmri.implementation.DefaultMeter;\n+import jmri.implementation.MeterUpdateTask;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Provide access to current and voltage meter from some LocoNet command stations\n+ *\n+ * @author Steve G           Copyright (C) 2019\n+ * @author Bob Jacobsen      Copyright (C) 2019\n+ * @author Egbert Boerse     Copyright (C) 2019\n+ * @author Daniel Bergqvist  Copyright (C) 2020\n+ */\n+public class LnPredefinedMeters implements LocoNetListener {\n+\n+    private SlotManager sm = null;\n+    private LnTrafficController tc = null;\n+    private final MeterUpdateTask updateTask;\n+    private final Meter currentMeter;\n+    private final Meter voltageMeter;\n+\n+    /**\n+     * Create a LnPredefinedMeters object\n+     *\n+     * @param scm  connection memo\n+     */\n+    public LnPredefinedMeters(LocoNetSystemConnectionMemo scm) {\n+        \n+        this.sm = scm.getSlotManager();\n+        this.tc = scm.getLnTrafficController();\n+        \n+        updateTask = new MeterUpdateTask(LnConstants.METER_INTERVAL_MS) {\n+            @Override\n+            public void requestUpdateFromLayout() {\n+                sm.sendReadSlot(249);\n+            }\n+        };\n+        \n+        currentMeter = new DefaultMeter.DefaultCurrentMeter(\n+                scm.getSystemPrefix() + \"V\" + \"CommandStationCurrent\",\n+                Meter.Unit.NoPrefix, 0, 12.7, 0.1, updateTask);\n+        \n+        voltageMeter = new DefaultMeter.DefaultVoltageMeter(\n+                scm.getSystemPrefix() + \"V\" + \"CommandStationVoltage\",\n+                Meter.Unit.NoPrefix, 0, 25.4, 0.2, updateTask);\n+        \n+        InstanceManager.getDefault(MeterManager.class).register(currentMeter);\n+        InstanceManager.getDefault(MeterManager.class).register(voltageMeter);\n+        \n+        tc.addLocoNetListener(~0, this);\n+        \n+        updateTask.initTimer();\n+    }\n+\n+    @Override\n+    public void message(LocoNetMessage msg) {\n+        try {\n+            if (msg.getOpCode() != LnConstants.OPC_EXP_RD_SL_DATA\n+                    || msg.getElement(1) != 21\n+                    || msg.getElement(2) != 1\n+                    || msg.getElement(3) != 0x79) {\n+                return;\n+            }\n+            log.debug(\"Found slot 249\");\n+            // CS Types supported\n+            switch (msg.getElement(16)) {\n+                case LnConstants.RE_IPL_DIGITRAX_HOST_DCS240:\n+                case LnConstants.RE_IPL_DIGITRAX_HOST_DCS210:\n+                case LnConstants.RE_IPL_DIGITRAX_HOST_DCS52:", "originalCommit": "cb4422ded8d37d69f4deef3b026c93f86fefb87e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTM5NjY0Nw==", "url": "https://github.com/JMRI/JMRI/pull/9033#discussion_r495396647", "bodyText": "An additional test might be to verify the \"serial number\" portion of the 'Query Mode' message against a known serial number from the command station.  One way to get the active command station's serial number is by a one-time 'Query Mode' request of the \"identity\" data: filter the replies for the \"active command station\" bit, and extract and save the serial number from the one marked as \"active command staiton\" for later use in qualifying the individual 'Query Mode' track voltage/current reply data.\nI expect that any such changes would be made as some future pull-request, and will not hold up this pull-request because of the technical issues mentioned in this comment.", "author": "devel-bobm", "createdAt": "2020-09-26T02:49:33Z", "path": "java/src/jmri/jmrix/loconet/LnPredefinedMeters.java", "diffHunk": "@@ -0,0 +1,110 @@\n+package jmri.jmrix.loconet;\n+\n+import jmri.*;\n+import jmri.implementation.DefaultMeter;\n+import jmri.implementation.MeterUpdateTask;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Provide access to current and voltage meter from some LocoNet command stations\n+ *\n+ * @author Steve G           Copyright (C) 2019\n+ * @author Bob Jacobsen      Copyright (C) 2019\n+ * @author Egbert Boerse     Copyright (C) 2019\n+ * @author Daniel Bergqvist  Copyright (C) 2020\n+ */\n+public class LnPredefinedMeters implements LocoNetListener {\n+\n+    private SlotManager sm = null;\n+    private LnTrafficController tc = null;\n+    private final MeterUpdateTask updateTask;\n+    private final Meter currentMeter;\n+    private final Meter voltageMeter;\n+\n+    /**\n+     * Create a LnPredefinedMeters object\n+     *\n+     * @param scm  connection memo\n+     */\n+    public LnPredefinedMeters(LocoNetSystemConnectionMemo scm) {\n+        \n+        this.sm = scm.getSlotManager();\n+        this.tc = scm.getLnTrafficController();\n+        \n+        updateTask = new MeterUpdateTask(LnConstants.METER_INTERVAL_MS) {\n+            @Override\n+            public void requestUpdateFromLayout() {\n+                sm.sendReadSlot(249);\n+            }\n+        };\n+        \n+        currentMeter = new DefaultMeter.DefaultCurrentMeter(\n+                scm.getSystemPrefix() + \"V\" + \"CommandStationCurrent\",\n+                Meter.Unit.NoPrefix, 0, 12.7, 0.1, updateTask);\n+        \n+        voltageMeter = new DefaultMeter.DefaultVoltageMeter(\n+                scm.getSystemPrefix() + \"V\" + \"CommandStationVoltage\",\n+                Meter.Unit.NoPrefix, 0, 25.4, 0.2, updateTask);\n+        \n+        InstanceManager.getDefault(MeterManager.class).register(currentMeter);\n+        InstanceManager.getDefault(MeterManager.class).register(voltageMeter);\n+        \n+        tc.addLocoNetListener(~0, this);\n+        \n+        updateTask.initTimer();\n+    }\n+\n+    @Override\n+    public void message(LocoNetMessage msg) {\n+        try {\n+            if (msg.getOpCode() != LnConstants.OPC_EXP_RD_SL_DATA\n+                    || msg.getElement(1) != 21\n+                    || msg.getElement(2) != 1\n+                    || msg.getElement(3) != 0x79) {\n+                return;\n+            }\n+            log.debug(\"Found slot 249\");\n+            // CS Types supported\n+            switch (msg.getElement(16)) {\n+                case LnConstants.RE_IPL_DIGITRAX_HOST_DCS240:\n+                case LnConstants.RE_IPL_DIGITRAX_HOST_DCS210:\n+                case LnConstants.RE_IPL_DIGITRAX_HOST_DCS52:\n+                    log.debug(\"Found Evolution CS Amps[{}] Max[{}]\",msg.getElement(6) / 10.0f, (msg.getElement(7) / 10.0f));", "originalCommit": "cb4422ded8d37d69f4deef3b026c93f86fefb87e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTM5ODU3Mw==", "url": "https://github.com/JMRI/JMRI/pull/9033#discussion_r495398573", "bodyText": "This construct assumes that the connection configuration is established in a way that accurately represents the actual command station.  JMRI has never required such an accurate configuration.\nAs I commented previously, it may be useful to perform a one-time 'Query Mode' request and filter for \"active command station\" bit set, and then extract command station type and serial number, as part of the initialization.  This is an idea for a future pull-request and not something I deem important to resolve before the current pull request is merged.", "author": "devel-bobm", "createdAt": "2020-09-26T02:54:32Z", "path": "java/src/jmri/jmrix/loconet/LocoNetSystemConnectionMemo.java", "diffHunk": "@@ -285,11 +287,27 @@ public LnLightManager getLightManager() {\n         return (LnLightManager) classObjectMap.computeIfAbsent(LightManager.class, (Class c) -> new LnLightManager(this));\n     }\n \n-    public LnMultiMeter getMultiMeter() {\n+    protected LnPredefinedMeters predefinedMeters;\n+\n+    public LnPredefinedMeters getPredefinedMeters() {\n         if (getDisabled()) {\n             return null;\n         }\n-        return (LnMultiMeter) classObjectMap.computeIfAbsent(MultiMeter.class,(Class c) -> new LnMultiMeter(this));\n+        switch (getSlotManager().commandStationType) {\n+            case COMMAND_STATION_USB_DCS240_ALONE:\n+            case COMMAND_STATION_DCS240:\n+            case COMMAND_STATION_DCS210:\n+            case COMMAND_STATION_USB_DCS52_ALONE:\n+            case COMMAND_STATION_DCS052:\n+                break;\n+            default:\n+                // The command station does not support these meters\n+                return null;\n+        }", "originalCommit": "cb4422ded8d37d69f4deef3b026c93f86fefb87e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQwODExMw==", "url": "https://github.com/JMRI/JMRI/pull/9033#discussion_r495408113", "bodyText": "FYI: The reason for why I added this was that Z21 has two connections, one XpressNet connection and one LocoNet connection. Before I added this check, I got two voltage meters and two current meters for the Z21, but only the XpressNet voltage meter and current meter works for the Z21 as far as I know.", "author": "danielb987", "createdAt": "2020-09-26T03:21:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTM5ODU3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxMTI3OQ==", "url": "https://github.com/JMRI/JMRI/pull/9033#discussion_r495411279", "bodyText": "The code is entirely acceptable until you have a single LocoNet segment with more than one of DCS240, DCS210, DCS52, (and DCS210+ which has firmware which implements Query Mode voltage/current values in a different/broken way!).\nWhen more than one such device is installed on a LocoNet, the one LV bean might report the sequence of values from the different reporting devices, and it is unclear to me what order they would report in, and whether the command station is guaranteed to be the last reporter.  That will lead to unexpected results in the meter, and therefore lead to user confusion.", "author": "devel-bobm", "createdAt": "2020-09-26T04:02:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTM5ODU3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxMTI5Ng==", "url": "https://github.com/JMRI/JMRI/pull/9033#discussion_r495411296", "bodyText": "This is a problem to resolve at a future date...", "author": "devel-bobm", "createdAt": "2020-09-26T04:02:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTM5ODU3Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTM5OTUzMg==", "url": "https://github.com/JMRI/JMRI/pull/9033#discussion_r495399532", "bodyText": "Is AnalogIOManager the correct class name?", "author": "devel-bobm", "createdAt": "2020-09-26T02:56:48Z", "path": "java/src/jmri/managers/AbstractMeterManager.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package jmri.managers;\n+\n+import javax.annotation.Nonnull;\n+import jmri.Manager;\n+import jmri.Meter;\n+import jmri.MeterManager;\n+import jmri.SystemConnectionMemo;\n+\n+/**\n+ * Default implementation of a MeterManager.\n+ *\n+ * @author Dave Duchamp      Copyright (C) 2004\n+ * @author Daniel Bergqvist  Copyright (C) 2020\n+ */\n+public class AbstractMeterManager extends AbstractManager<Meter>\n+        implements MeterManager {\n+\n+    /**\n+     * Create a new AnalogIOManager instance.", "originalCommit": "cb4422ded8d37d69f4deef3b026c93f86fefb87e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQwODUwOQ==", "url": "https://github.com/JMRI/JMRI/pull/9033#discussion_r495408509", "bodyText": "No. Copy-paste error. Thanks.", "author": "danielb987", "createdAt": "2020-09-26T03:25:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTM5OTUzMg=="}], "type": "inlineReview", "revised_code": {"commit": "d6d9a1121ad92fa0a3639bd372c19c0f5dcfc39b", "chunk": "diff --git a/java/src/jmri/managers/AbstractMeterManager.java b/java/src/jmri/managers/AbstractMeterManager.java\nindex 4fd02ba47f..e8c6393110 100644\n--- a/java/src/jmri/managers/AbstractMeterManager.java\n+++ b/java/src/jmri/managers/AbstractMeterManager.java\n\n@@ -16,7 +16,7 @@ public class AbstractMeterManager extends AbstractManager<Meter>\n         implements MeterManager {\n \n     /**\n-     * Create a new AnalogIOManager instance.\n+     * Create a new MeterManager instance.\n      * \n      * @param memo the system connection\n      */\n"}}, {"oid": "d6d9a1121ad92fa0a3639bd372c19c0f5dcfc39b", "url": "https://github.com/JMRI/JMRI/commit/d6d9a1121ad92fa0a3639bd372c19c0f5dcfc39b", "message": "Fix javadoc", "committedDate": "2020-09-26T03:25:04Z", "type": "commit"}, {"oid": "dff34c2a170c9d79f22d82b6439f20e79e365705", "url": "https://github.com/JMRI/JMRI/commit/dff34c2a170c9d79f22d82b6439f20e79e365705", "message": "Remove \"Track\" from title. Move bundle strings to right bundle file.", "committedDate": "2020-09-26T03:40:00Z", "type": "commit"}]}