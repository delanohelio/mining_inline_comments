{"pr_number": 8838, "pr_title": "ThrottleServers - use standard function method over reflection", "pr_createdAt": "2020-07-15T13:54:24Z", "pr_url": "https://github.com/JMRI/JMRI/pull/8838", "timeline": [{"oid": "a339bbe43c37d3f28c08a6e6ead6ec20d88a1f28", "url": "https://github.com/JMRI/JMRI/commit/a339bbe43c37d3f28c08a6e6ead6ec20d88a1f28", "message": "ThrottleServers - use standard function method over reflection", "committedDate": "2020-07-15T13:14:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMxNDUxNA==", "url": "https://github.com/JMRI/JMRI/pull/8838#discussion_r455314514", "bodyText": "This sets the function value and then ALWAYS sends an error status.  That isn't right.\nThe If statement needs to be before the t.setFunction() call with the send of error status as the else.", "author": "pabender", "createdAt": "2020-07-15T20:13:48Z", "path": "java/src/jmri/jmris/AbstractThrottleServer.java", "diffHunk": "@@ -66,14 +66,8 @@ public void setThrottleFunctions(LocoAddress l, ArrayList<Boolean> fList) {\n         throttleList.forEach(t -> {\n             if (t.getLocoAddress() == l) {\n                 for (int i = 0; i < fList.size(); i++) {\n-                    try {\n-                        java.lang.reflect.Method setter = t.getClass()\n-                                .getMethod(\"setF\" + i, boolean.class);\n-                        setter.invoke(t, fList.get(i));\n-                    } catch (java.lang.NoSuchMethodException\n-                            | java.lang.IllegalAccessException\n-                            | java.lang.reflect.InvocationTargetException ex1) {\n-                        log.error(\"\", ex1);\n+                    t.setFunction(i, fList.get(i));\n+                    if ( i > t.getFunctions().length-1) {", "originalCommit": "a339bbe43c37d3f28c08a6e6ead6ec20d88a1f28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc1NjQ5Ng==", "url": "https://github.com/JMRI/JMRI/pull/8838#discussion_r455756496", "bodyText": "It won't alway send the error status, only if i is greater than the number of functions on the Throttle, console error logging provided by the Throttle.setFunction() method.\nI'll update to if / else though to make easier to read, it's also flagged as duplicate code so I'll move the loop to a new method.", "author": "icklesteve", "createdAt": "2020-07-16T12:43:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMxNDUxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc3NTU2Mg==", "url": "https://github.com/JMRI/JMRI/pull/8838#discussion_r455775562", "bodyText": "I think you misunderstand what I meant there.\nit needs to read (in psudocode)\nif(i<number of functions)\n    setFunction i\nelse\n    send error.\n\n\nThis is what the old code effectively did using the try/catch blocks.", "author": "pabender", "createdAt": "2020-07-16T13:14:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMxNDUxNA=="}], "type": "inlineReview", "revised_code": {"commit": "105ce350a6ecdf42b835826dba158410f9680409", "chunk": "diff --git a/java/src/jmri/jmris/AbstractThrottleServer.java b/java/src/jmri/jmris/AbstractThrottleServer.java\nindex 75dfb54e0c..5ad5991e1d 100644\n--- a/java/src/jmri/jmris/AbstractThrottleServer.java\n+++ b/java/src/jmri/jmris/AbstractThrottleServer.java\n\n@@ -65,20 +65,32 @@ abstract public class AbstractThrottleServer implements ThrottleListener {\n         // get the throttle for the address.\n         throttleList.forEach(t -> {\n             if (t.getLocoAddress() == l) {\n-                for (int i = 0; i < fList.size(); i++) {\n-                    t.setFunction(i, fList.get(i));\n-                    if ( i > t.getFunctions().length-1) {\n-                        try {\n-                            sendErrorStatus();\n-                        } catch (IOException ioe) {\n-                            log.error(\"Error writing to network port\");\n-                        }\n-                    }\n-                }\n+                setFunctionsByThrottle(t,fList);\n             }\n         });\n     }\n-\n+    \n+    /**\n+     * Set Throttle Functions on/off.\n+     *\n+     * @param t Throttle to change speed of.\n+     * @param fList an ArrayList of boolean values indicating whether the\n+     *         function is active or not.\n+     */\n+    protected void setFunctionsByThrottle(Throttle t, ArrayList<Boolean> fList){\n+        for (int i = 0; i < fList.size(); i++) {\n+            if ( i > t.getFunctions().length-1) {\n+                log.error(\"Unable to set Function {} on Throttle {}\",i,t.getLocoAddress());\n+                try {\n+                    sendErrorStatus();\n+                } catch (IOException ioe) {\n+                    log.error(\"Error writing to network port\");\n+                }\n+            } else {\n+                t.setFunction(i, fList.get(i));\n+            }\n+        }\n+    }\n \n     /*\n      * Request a throttle for the specified address from the default\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMxNDYxNQ==", "url": "https://github.com/JMRI/JMRI/pull/8838#discussion_r455314615", "bodyText": "This sets the function value and then ALWAYS sends an error status.  That isn't right.\nThe If statement needs to be before the t.setFunction() call with the send of error status as the else.", "author": "pabender", "createdAt": "2020-07-15T20:14:02Z", "path": "java/src/jmri/jmris/srcp/JmriSRCPThrottleServer.java", "diffHunk": "@@ -331,14 +331,8 @@ public void setThrottleFunctions(int bus, int address, ArrayList<Boolean> fList)\n                 log.debug(\"Throttle in throttle list\");\n                 Throttle t = throttleList.get(addressList.indexOf(addr));\n                 for (int i = 0; i < fList.size(); i++) {\n-                    try {\n-                        java.lang.reflect.Method setter = t.getClass()\n-                                .getMethod(\"setF\" + i, boolean.class);\n-                        setter.invoke(t, fList.get(i));\n-                    } catch (java.lang.NoSuchMethodException\n-                            | java.lang.IllegalAccessException\n-                            | java.lang.reflect.InvocationTargetException ex1) {\n-                        log.error(\"\", ex1);\n+                    t.setFunction(i, fList.get(i));\n+                    if ( i > t.getFunctions().length-1) {", "originalCommit": "a339bbe43c37d3f28c08a6e6ead6ec20d88a1f28", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc1NjY1NA==", "url": "https://github.com/JMRI/JMRI/pull/8838#discussion_r455756654", "bodyText": "See prev. comment", "author": "icklesteve", "createdAt": "2020-07-16T12:43:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMxNDYxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "105ce350a6ecdf42b835826dba158410f9680409", "chunk": "diff --git a/java/src/jmri/jmris/srcp/JmriSRCPThrottleServer.java b/java/src/jmri/jmris/srcp/JmriSRCPThrottleServer.java\nindex 60970cabe0..b872fa7917 100644\n--- a/java/src/jmri/jmris/srcp/JmriSRCPThrottleServer.java\n+++ b/java/src/jmri/jmris/srcp/JmriSRCPThrottleServer.java\n\n@@ -330,16 +330,7 @@ public class JmriSRCPThrottleServer extends AbstractThrottleServer {\n             if (addressList.contains(addr)) {\n                 log.debug(\"Throttle in throttle list\");\n                 Throttle t = throttleList.get(addressList.indexOf(addr));\n-                for (int i = 0; i < fList.size(); i++) {\n-                    t.setFunction(i, fList.get(i));\n-                    if ( i > t.getFunctions().length-1) {\n-                        try {\n-                            sendErrorStatus();\n-                        } catch (IOException ioe) {\n-                            log.error(\"Error writing to network port\");\n-                        }\n-                    }\n-                }\n+                setFunctionsByThrottle(t,fList);\n \n             }\n         }\n"}}, {"oid": "105ce350a6ecdf42b835826dba158410f9680409", "url": "https://github.com/JMRI/JMRI/commit/105ce350a6ecdf42b835826dba158410f9680409", "message": "add setFunctionsByThrottle method\n\nmove setFunction to else\nnow setFunction isn't called, add error logging to fail", "committedDate": "2020-07-16T12:44:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc1ODEwMw==", "url": "https://github.com/JMRI/JMRI/pull/8838#discussion_r457758103", "bodyText": "I think i >= ... would much clearer than i > ... -1", "author": "rhwood", "createdAt": "2020-07-21T00:02:23Z", "path": "java/src/jmri/jmris/AbstractThrottleServer.java", "diffHunk": "@@ -65,26 +65,32 @@ public void setThrottleFunctions(LocoAddress l, ArrayList<Boolean> fList) {\n         // get the throttle for the address.\n         throttleList.forEach(t -> {\n             if (t.getLocoAddress() == l) {\n-                for (int i = 0; i < fList.size(); i++) {\n-                    try {\n-                        java.lang.reflect.Method setter = t.getClass()\n-                                .getMethod(\"setF\" + i, boolean.class);\n-                        setter.invoke(t, fList.get(i));\n-                    } catch (java.lang.NoSuchMethodException\n-                            | java.lang.IllegalAccessException\n-                            | java.lang.reflect.InvocationTargetException ex1) {\n-                        log.error(\"\", ex1);\n-                        try {\n-                            sendErrorStatus();\n-                        } catch (IOException ioe) {\n-                            log.error(\"Error writing to network port\");\n-                        }\n-                    }\n-                }\n+                setFunctionsByThrottle(t,fList);\n             }\n         });\n     }\n-\n+    \n+    /**\n+     * Set Throttle Functions on/off.\n+     *\n+     * @param t Throttle to change speed of.\n+     * @param fList an ArrayList of boolean values indicating whether the\n+     *         function is active or not.\n+     */\n+    protected void setFunctionsByThrottle(Throttle t, ArrayList<Boolean> fList){\n+        for (int i = 0; i < fList.size(); i++) {\n+            if ( i > t.getFunctions().length-1) {", "originalCommit": "105ce350a6ecdf42b835826dba158410f9680409", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}