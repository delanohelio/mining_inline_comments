{"pr_number": 9257, "pr_title": "messaging enhancements and cleanup, retry some timed-out messages", "pr_createdAt": "2020-12-25T01:58:01Z", "pr_url": "https://github.com/JMRI/JMRI/pull/9257", "timeline": [{"oid": "c83c0a3f832a6e6c1f25fe919cba71345956a94f", "url": "https://github.com/JMRI/JMRI/commit/c83c0a3f832a6e6c1f25fe919cba71345956a94f", "message": "messaging enhancements and cleanup, retry some failed messages", "committedDate": "2020-12-24T00:54:47Z", "type": "commit"}, {"oid": "a2345f61c9a4060c93878fbece622ac75710ea03", "url": "https://github.com/JMRI/JMRI/commit/a2345f61c9a4060c93878fbece622ac75710ea03", "message": "also request list of Output defs at startup", "committedDate": "2020-12-25T01:36:04Z", "type": "commit"}, {"oid": "4a7450732137294f89b6348fe015c0d23c0eb69a", "url": "https://github.com/JMRI/JMRI/commit/4a7450732137294f89b6348fe015c0d23c0eb69a", "message": "request periodic 's'tatus messages for USB (already in Network)", "committedDate": "2020-12-25T03:32:03Z", "type": "commit"}, {"oid": "244171d1faf400f2c8d0760b769d380aeff57522", "url": "https://github.com/JMRI/JMRI/commit/244171d1faf400f2c8d0760b769d380aeff57522", "message": "a few comment corrections (to restart Travis)", "committedDate": "2020-12-25T14:07:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4OTkxNA==", "url": "https://github.com/JMRI/JMRI/pull/9257#discussion_r548889914", "bodyText": "Is toString() required here? I'm not sure, but I think you can remove the toString() call.\nMaybe the toString() call is cheap and if so, not a problem. But the reason for the check of log.isDebugEnabled() is to not call toString() if debug is disabled.\nIf you have this line as below instead, this problem goes away:\nlog.debug(\"Notified of timeout on message '{}'\", msg);\nI think this will work since I think log.debug will call msg.toString(), but I'm not sure and I haven't tested it lately.", "author": "danielb987", "createdAt": "2020-12-25T16:24:00Z", "path": "java/src/jmri/jmrix/dccpp/DCCppProgrammer.java", "diffHunk": "@@ -264,9 +264,7 @@ synchronized public void message(DCCppMessage l) {\n     // Handle a timeout notification\n     @Override\n     public void notifyTimeout(DCCppMessage msg) {\n-        if (log.isDebugEnabled()) {\n-            log.debug(\"Notified of timeout on message{}\", msg.toString());\n-        }\n+        log.debug(\"Notified of timeout on message '{}'\", msg.toString());", "originalCommit": "244171d1faf400f2c8d0760b769d380aeff57522", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkzNTA1NQ==", "url": "https://github.com/JMRI/JMRI/pull/9257#discussion_r548935055", "bodyText": "My understanding is that the arguments are not evaluated unless the log statement is enabled. This is documented here: http://www.slf4j.org/faq.html#logging_performance", "author": "mstevetodd", "createdAt": "2020-12-26T02:50:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4OTkxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk0NzIxNA==", "url": "https://github.com/JMRI/JMRI/pull/9257#discussion_r548947214", "bodyText": "The arguments are evaluated as part of collecting for the function call.  That's inevitable given how the JVM works.\nWhat's not evaluated is the creation of the final logging string.  That includes inserting the arguments into the string, and that includes converting the arguments to strings as needed.\nSo if you put foo.toString() as an argument in the function call, that .toString() will be evaluated at every call, whether or not the statement actually logs.  If you just put foo as the argument, the .toString() is invoked only when the statement is actually going to log.", "author": "bobjacobsen", "createdAt": "2020-12-26T05:47:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4OTkxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAwODU2Mg==", "url": "https://github.com/JMRI/JMRI/pull/9257#discussion_r549008562", "bodyText": "OK, thanks for that explanation. I missed that distinction.", "author": "mstevetodd", "createdAt": "2020-12-26T16:28:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4OTkxNA=="}], "type": "inlineReview", "revised_code": {"commit": "212609cc65cc7422b8ee34f0d0537355d4a9b3cb", "chunk": "diff --git a/java/src/jmri/jmrix/dccpp/DCCppProgrammer.java b/java/src/jmri/jmrix/dccpp/DCCppProgrammer.java\nindex 39be7d277d..ed8a1abc91 100644\n--- a/java/src/jmri/jmrix/dccpp/DCCppProgrammer.java\n+++ b/java/src/jmri/jmrix/dccpp/DCCppProgrammer.java\n\n@@ -264,7 +264,7 @@ public class DCCppProgrammer extends AbstractProgrammer implements DCCppListener\n     // Handle a timeout notification\n     @Override\n     public void notifyTimeout(DCCppMessage msg) {\n-        log.debug(\"Notified of timeout on message '{}'\", msg.toString());\n+        log.debug(\"Notified of timeout on message '{}'\", msg);\n     }\n \n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg5MTEyNg==", "url": "https://github.com/JMRI/JMRI/pull/9257#discussion_r548891126", "bodyText": "I'm afraid that this will not work.\nhttps://docs.oracle.com/javase/7/docs/api/java/util/Timer.html#schedule(java.util.TimerTask,%20java.util.Date)\nQuote from the Timer javadoc:\nIllegalStateException - if task was already scheduled or cancelled, timer was cancelled, or timer thread terminated.\nSo if the timer task has been cancelled, can it then be scheduled again? I'm not sure about that.\nI think you always need to create a new timer task.", "author": "danielb987", "createdAt": "2020-12-25T16:37:09Z", "path": "java/src/jmri/jmrix/dccpp/serial/DCCppAdapter.java", "diffHunk": "@@ -151,6 +156,28 @@ public DataOutputStream getOutputStream() {\n         return null;\n     }\n \n+    /**\n+     * Set up the keepAliveTimer, and start it.\n+     */\n+    private void keepAliveTimer() {\n+        if (keepAliveTimer == null) {\n+            keepAliveTimer = new java.util.TimerTask(){\n+                    @Override\n+                    public void run() {\n+                        // If the timer times out, send a request for status\n+                        DCCppAdapter.this.getSystemConnectionMemo().getDCCppTrafficController()\n+                            .sendDCCppMessage(\n+                                              jmri.jmrix.dccpp.DCCppMessage.makeCSStatusMsg(),\n+                                              null);\n+                    }\n+                };\n+        } else {\n+            keepAliveTimer.cancel();\n+        }\n+        jmri.util.TimerUtil.schedule(keepAliveTimer, keepAliveTimeoutValue, keepAliveTimeoutValue);", "originalCommit": "244171d1faf400f2c8d0760b769d380aeff57522", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODkzMjU0OQ==", "url": "https://github.com/JMRI/JMRI/pull/9257#discussion_r548932549", "bodyText": "Thanks for the feedback, but I copied that verbatim from DCCppEthernetAdapter. I've tested it and it works fine.", "author": "mstevetodd", "createdAt": "2020-12-26T02:12:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg5MTEyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODk3MDczNw==", "url": "https://github.com/JMRI/JMRI/pull/9257#discussion_r548970737", "bodyText": "Thanks.", "author": "danielb987", "createdAt": "2020-12-26T10:56:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg5MTEyNg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "212609cc65cc7422b8ee34f0d0537355d4a9b3cb", "url": "https://github.com/JMRI/JMRI/commit/212609cc65cc7422b8ee34f0d0537355d4a9b3cb", "message": "avoid overhead of msg.toString() in debug messages", "committedDate": "2020-12-26T16:14:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAxNTIzNg==", "url": "https://github.com/JMRI/JMRI/pull/9257#discussion_r549015236", "bodyText": "This toString() can be removed too.", "author": "danielb987", "createdAt": "2020-12-26T17:53:08Z", "path": "java/src/jmri/jmrix/dccpp/DCCppTurnoutManager.java", "diffHunk": "@@ -71,10 +72,8 @@ public Turnout createNewTurnout(@Nonnull String systemName, String userName) {\n      */\n     @Override\n     public void message(DCCppReply l) {\n-        if (log.isDebugEnabled()) {\n-            log.debug(\"received message: {}\", l.toString());\n-        }\n         if (l.isTurnoutReply()) {\n+            log.debug(\"received Turnout Reply message: {}\", l.toString());", "originalCommit": "212609cc65cc7422b8ee34f0d0537355d4a9b3cb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ef5800cd699b67ff8f11e6c83da145f0dd663a4b", "chunk": "diff --git a/java/src/jmri/jmrix/dccpp/DCCppTurnoutManager.java b/java/src/jmri/jmrix/dccpp/DCCppTurnoutManager.java\nindex 9c79be8a4c..6a6269be66 100644\n--- a/java/src/jmri/jmrix/dccpp/DCCppTurnoutManager.java\n+++ b/java/src/jmri/jmrix/dccpp/DCCppTurnoutManager.java\n\n@@ -73,7 +73,7 @@ public class DCCppTurnoutManager extends jmri.managers.AbstractTurnoutManager im\n     @Override\n     public void message(DCCppReply l) {\n         if (l.isTurnoutReply()) {\n-            log.debug(\"received Turnout Reply message: {}\", l.toString());\n+            log.debug(\"received Turnout Reply message: '{}'\", l);\n             // parse message type\n             int addr = l.getTOIDInt();\n             if (addr >= 0) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAxNTI1MQ==", "url": "https://github.com/JMRI/JMRI/pull/9257#discussion_r549015251", "bodyText": "This toString() can be removed too.", "author": "danielb987", "createdAt": "2020-12-26T17:53:18Z", "path": "java/src/jmri/jmrix/dccpp/DCCppTurnoutManager.java", "diffHunk": "@@ -97,6 +96,7 @@ public void message(DCCppReply l) {\n                 }\n             }\n         } else if (l.isOutputCmdReply()) {\n+            log.debug(\"received Output Cmd Reply message: {}\", l.toString());", "originalCommit": "212609cc65cc7422b8ee34f0d0537355d4a9b3cb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ef5800cd699b67ff8f11e6c83da145f0dd663a4b", "chunk": "diff --git a/java/src/jmri/jmrix/dccpp/DCCppTurnoutManager.java b/java/src/jmri/jmrix/dccpp/DCCppTurnoutManager.java\nindex 9c79be8a4c..6a6269be66 100644\n--- a/java/src/jmri/jmrix/dccpp/DCCppTurnoutManager.java\n+++ b/java/src/jmri/jmrix/dccpp/DCCppTurnoutManager.java\n\n@@ -96,7 +96,7 @@ public class DCCppTurnoutManager extends jmri.managers.AbstractTurnoutManager im\n                 }\n             }\n         } else if (l.isOutputCmdReply()) {\n-            log.debug(\"received Output Cmd Reply message: {}\", l.toString());\n+            log.debug(\"received Output Cmd Reply message: '{}'\", l);\n             // parse message type\n             int addr = l.getOutputNumInt();\n             if (addr >= 0) {\n"}}, {"oid": "ef5800cd699b67ff8f11e6c83da145f0dd663a4b", "url": "https://github.com/JMRI/JMRI/commit/ef5800cd699b67ff8f11e6c83da145f0dd663a4b", "message": "more debug message improvements", "committedDate": "2020-12-27T01:57:09Z", "type": "commit"}]}