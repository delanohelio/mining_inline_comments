{"pr_number": 8845, "pr_title": "Add new tests for preference panels.", "pr_createdAt": "2020-07-16T06:28:29Z", "pr_url": "https://github.com/JMRI/JMRI/pull/8845", "timeline": [{"oid": "da5861076f271f4dbcf95e9dd3e5950e79b9c2ee", "url": "https://github.com/JMRI/JMRI/commit/da5861076f271f4dbcf95e9dd3e5950e79b9c2ee", "message": "add tests for decendents of PreferencesPanel", "committedDate": "2020-07-16T00:10:23Z", "type": "commit"}, {"oid": "6e708b8d5e3bc1827dab743bf56c8e998bf94d18", "url": "https://github.com/JMRI/JMRI/commit/6e708b8d5e3bc1827dab743bf56c8e998bf94d18", "message": "Newline at end of file.", "committedDate": "2020-07-16T00:37:18Z", "type": "commit"}, {"oid": "ca9bfda6ec3fe7d70e1b86b27c90b26caf83a157", "url": "https://github.com/JMRI/JMRI/commit/ca9bfda6ec3fe7d70e1b86b27c90b26caf83a157", "message": "fix test", "committedDate": "2020-07-16T02:34:12Z", "type": "commit"}, {"oid": "8404a6a2f29312cb92ff0427070637c2f3703059", "url": "https://github.com/JMRI/JMRI/commit/8404a6a2f29312cb92ff0427070637c2f3703059", "message": "add missing test annotations", "committedDate": "2020-07-16T02:52:04Z", "type": "commit"}, {"oid": "271ec3f36df8832d93f1390b4055a84aa14d1a8f", "url": "https://github.com/JMRI/JMRI/commit/271ec3f36df8832d93f1390b4055a84aa14d1a8f", "message": "fix tests", "committedDate": "2020-07-16T05:00:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYyOTMxNA==", "url": "https://github.com/JMRI/JMRI/pull/8845#discussion_r455629314", "bodyText": "This class should use a generic PreferencesPanelTestBase<P extends PreferencesPanel> to avoid any potential need to cast prefsPanel to the tested class in the actual test classes.", "author": "rhwood", "createdAt": "2020-07-16T08:52:08Z", "path": "java/test/jmri/swing/PreferencesPanelTestBase.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package jmri.swing;\n+\n+import jmri.util.JUnitUtil;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.assertj.core.api.Java6Assertions.assertThat;\n+import static org.assertj.core.api.Java6Assertions.catchThrowable;\n+\n+/**\n+ *  Base Tests for implementations of the PreferenesPanel interface.\n+ *\n+ * @author Paul Bender Colyright (C) 2020\n+ */\n+abstract public class PreferencesPanelTestBase {", "originalCommit": "271ec3f36df8832d93f1390b4055a84aa14d1a8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTczNjc2OA==", "url": "https://github.com/JMRI/JMRI/pull/8845#discussion_r455736768", "bodyText": "thanks. will fix", "author": "pabender", "createdAt": "2020-07-16T12:07:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYyOTMxNA=="}], "type": "inlineReview", "revised_code": {"commit": "d30ef32951845adadfca0fc8ff49841541532a25", "chunk": "diff --git a/java/test/jmri/swing/PreferencesPanelTestBase.java b/java/test/jmri/swing/PreferencesPanelTestBase.java\nindex 0b6f85276f..b95a6ce6e8 100644\n--- a/java/test/jmri/swing/PreferencesPanelTestBase.java\n+++ b/java/test/jmri/swing/PreferencesPanelTestBase.java\n\n@@ -1,5 +1,6 @@\n package jmri.swing;\n \n+import cucumber.api.java8.Th;\n import jmri.util.JUnitUtil;\n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYzNTc5MQ==", "url": "https://github.com/JMRI/JMRI/pull/8845#discussion_r455635791", "bodyText": "We have not stipulated that all preferences tabs in a tabbed pane require a tooltip, so, yes, those classes that return null for the preferences tooltip should return null (the method that cares is javax.swing.JTabbedPane.insertTab(...) and it accepts null for a tooltip).", "author": "rhwood", "createdAt": "2020-07-16T09:02:29Z", "path": "java/test/apps/FileLocationPaneTest.java", "diffHunk": "@@ -1,33 +1,41 @@\n package apps;\n \n+import jmri.InstanceManager;\n+import jmri.implementation.FileLocationsPreferences;\n+import jmri.swing.PreferencesPanelTestBase;\n import jmri.util.JUnitUtil;\n \n import org.junit.jupiter.api.*;\n import org.junit.Assert;\n import org.junit.Assume;\n+import org.mockito.Mockito;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n \n /**\n  *\n  * @author Paul Bender Copyright (C) 2017\n  */\n-public class FileLocationPaneTest {\n-\n-    @Test\n-    public void testCTor() {\n-        Assume.assumeFalse(java.awt.GraphicsEnvironment.isHeadless());\n-        \n-        FileLocationPane t = new FileLocationPane();\n-        Assert.assertNotNull(\"exists\",t);\n-    }\n+public class FileLocationPaneTest extends PreferencesPanelTestBase {\n \n     @BeforeEach\n     public void setUp() {\n         JUnitUtil.setUp();\n+        InstanceManager.setDefault(FileLocationsPreferences.class, Mockito.mock(FileLocationsPreferences.class));\n+        prefsPanel = new FileLocationPane();\n     }\n \n-    @AfterEach\n-    public void tearDown() {\n-        JUnitUtil.tearDown();\n+    @Override\n+    @Test\n+    public void isPersistant() {\n+        assertThat(prefsPanel.isPersistant()).isTrue();\n+    }\n+\n+    @Override\n+    @Test\n+    public void getPreferencesTooltip() {\n+        // should this actually return null?", "originalCommit": "271ec3f36df8832d93f1390b4055a84aa14d1a8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTcyNDg3MQ==", "url": "https://github.com/JMRI/JMRI/pull/8845#discussion_r455724871", "bodyText": "Thanks.  Will Fix", "author": "pabender", "createdAt": "2020-07-16T11:43:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYzNTc5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "d30ef32951845adadfca0fc8ff49841541532a25", "chunk": "diff --git a/java/test/apps/FileLocationPaneTest.java b/java/test/apps/FileLocationPaneTest.java\nindex 71b40bb6a8..cdd586e38f 100644\n--- a/java/test/apps/FileLocationPaneTest.java\n+++ b/java/test/apps/FileLocationPaneTest.java\n\n@@ -16,7 +16,7 @@ import static org.assertj.core.api.Assertions.assertThat;\n  *\n  * @author Paul Bender Copyright (C) 2017\n  */\n-public class FileLocationPaneTest extends PreferencesPanelTestBase {\n+public class FileLocationPaneTest extends PreferencesPanelTestBase<FileLocationPane> {\n \n     @BeforeEach\n     public void setUp() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYzODgwNg==", "url": "https://github.com/JMRI/JMRI/pull/8845#discussion_r455638806", "bodyText": "Yes it should.", "author": "rhwood", "createdAt": "2020-07-16T09:07:22Z", "path": "java/test/apps/ManagerDefaultsConfigPaneTest.java", "diffHunk": "@@ -1,35 +1,39 @@\n package apps;\n \n+import jmri.swing.PreferencesPanelTestBase;\n import jmri.util.JUnitUtil;\n \n import org.junit.jupiter.api.*;\n-import org.junit.Assert;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n \n /**\n  *\n  * @author Paul Bender Copyright (C) 2017\n  */\n-public class ManagerDefaultsConfigPaneTest {\n-\n-    @Test\n-    public void testCTor() {\n-        ManagerDefaultsConfigPane t = new ManagerDefaultsConfigPane();\n-        Assert.assertNotNull(\"exists\",t);\n-    }\n+public class ManagerDefaultsConfigPaneTest extends PreferencesPanelTestBase {\n \n     @BeforeEach\n     public void setUp() {\n         JUnitUtil.setUp();\n         JUnitUtil.resetInstanceManager();\n         JUnitUtil.resetPreferencesProviders();\n         JUnitUtil.initConfigureManager();\n+        prefsPanel = new ManagerDefaultsConfigPane();\n     }\n \n-    @AfterEach\n-    public void tearDown() {\n-        JUnitUtil.tearDown();\n+    @Override\n+    @Test\n+    public void isPersistant() {\n+        assertThat(prefsPanel.isPersistant()).isTrue();\n     }\n \n+    @Override\n+    @Test\n+    public void getPreferencesTooltip() {\n+        // should this actually return null?", "originalCommit": "271ec3f36df8832d93f1390b4055a84aa14d1a8f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d30ef32951845adadfca0fc8ff49841541532a25", "chunk": "diff --git a/java/test/apps/ManagerDefaultsConfigPaneTest.java b/java/test/apps/ManagerDefaultsConfigPaneTest.java\nindex 4609f3317c..9b0f4931dd 100644\n--- a/java/test/apps/ManagerDefaultsConfigPaneTest.java\n+++ b/java/test/apps/ManagerDefaultsConfigPaneTest.java\n\n@@ -11,7 +11,7 @@ import static org.assertj.core.api.Assertions.assertThat;\n  *\n  * @author Paul Bender Copyright (C) 2017\n  */\n-public class ManagerDefaultsConfigPaneTest extends PreferencesPanelTestBase {\n+public class ManagerDefaultsConfigPaneTest extends PreferencesPanelTestBase<ManagerDefaultsConfigPane> {\n \n     @BeforeEach\n     public void setUp() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYzODk1Ng==", "url": "https://github.com/JMRI/JMRI/pull/8845#discussion_r455638956", "bodyText": "Yes, it should.", "author": "rhwood", "createdAt": "2020-07-16T09:07:35Z", "path": "java/test/apps/SystemConsoleConfigPanelTest.java", "diffHunk": "@@ -1,33 +1,38 @@\n package apps;\n \n+import jmri.swing.PreferencesPanelTestBase;\n import jmri.util.JUnitUtil;\n \n import org.junit.jupiter.api.*;\n-import org.junit.Assert;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n \n /**\n  *\n  * @author Paul Bender Copyright (C) 2017\n  */\n-public class SystemConsoleConfigPanelTest {\n-\n-    @Test\n-    public void testCTor() {\n-        SystemConsoleConfigPanel t = new SystemConsoleConfigPanel();\n-        Assert.assertNotNull(\"exists\",t);\n-    }\n+public class SystemConsoleConfigPanelTest extends PreferencesPanelTestBase {\n \n+    @Override\n     @BeforeEach\n     public void setUp() {\n         JUnitUtil.setUp();\n         jmri.InstanceManager.setDefault(apps.systemconsole.SystemConsolePreferencesManager.class,new apps.systemconsole.SystemConsolePreferencesManager());\n+        prefsPanel = new SystemConsoleConfigPanel();\n     }\n \n-    @AfterEach\n-    public void tearDown() {\n-        JUnitUtil.tearDown();\n+    @Override\n+    @Test\n+    public void isPersistant() {\n+        assertThat(prefsPanel.isPersistant()).isTrue();\n     }\n \n+    @Override\n+    @Test\n+    public void getPreferencesTooltip() {\n+        // should this actually return null?", "originalCommit": "271ec3f36df8832d93f1390b4055a84aa14d1a8f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d30ef32951845adadfca0fc8ff49841541532a25", "chunk": "diff --git a/java/test/apps/SystemConsoleConfigPanelTest.java b/java/test/apps/SystemConsoleConfigPanelTest.java\nindex 4c7e543a02..a5d236b3f0 100644\n--- a/java/test/apps/SystemConsoleConfigPanelTest.java\n+++ b/java/test/apps/SystemConsoleConfigPanelTest.java\n\n@@ -11,7 +11,7 @@ import static org.assertj.core.api.Assertions.assertThat;\n  *\n  * @author Paul Bender Copyright (C) 2017\n  */\n-public class SystemConsoleConfigPanelTest extends PreferencesPanelTestBase {\n+public class SystemConsoleConfigPanelTest extends PreferencesPanelTestBase<SystemConsoleConfigPanel> {\n \n     @Override\n     @BeforeEach\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYzOTI1Nw==", "url": "https://github.com/JMRI/JMRI/pull/8845#discussion_r455639257", "bodyText": "Yes, it should.", "author": "rhwood", "createdAt": "2020-07-16T09:08:05Z", "path": "java/test/apps/startup/StartupActionsPreferencesPanelTest.java", "diffHunk": "@@ -1,32 +1,52 @@\n package apps.startup;\n \n+import jmri.swing.PreferencesPanelTestBase;\n import jmri.util.JUnitUtil;\n \n import org.junit.jupiter.api.*;\n import org.junit.Assert;\n \n+import static org.assertj.core.api.Assertions.assertThat;\n+\n /**\n- *\n  * @author Paul Bender Copyright (C) 2017\n  */\n-public class StartupActionsPreferencesPanelTest {\n+public class StartupActionsPreferencesPanelTest extends PreferencesPanelTestBase {\n+\n+    @Override\n+    @BeforeEach\n+    public void setUp() {\n+        JUnitUtil.setUp();\n+        jmri.util.JUnitUtil.initStartupActionsManager();\n+        prefsPanel = new StartupActionsPreferencesPanel();\n+    }\n \n+    @Override\n     @Test\n-    public void testCTor() {\n-        StartupActionsPreferencesPanel t = new StartupActionsPreferencesPanel();\n-        Assert.assertNotNull(\"exists\",t);\n+    public void getLabelKey(){\n+        // This class returns null for label key, but should it?\n+        assertThat(prefsPanel.getLabelKey()).isNull();\n     }\n \n-    @BeforeEach\n-    public void setUp() {\n-        JUnitUtil.setUp();        jmri.util.JUnitUtil.initStartupActionsManager();\n+    @Override\n+    @Test\n+    public void getPreferencesTooltip(){\n+        // This class returns null for preferences tool tip, but should it?", "originalCommit": "271ec3f36df8832d93f1390b4055a84aa14d1a8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTcyNzM2MQ==", "url": "https://github.com/JMRI/JMRI/pull/8845#discussion_r455727361", "bodyText": "thanks. will fix.", "author": "pabender", "createdAt": "2020-07-16T11:48:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYzOTI1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "d30ef32951845adadfca0fc8ff49841541532a25", "chunk": "diff --git a/java/test/apps/startup/StartupActionsPreferencesPanelTest.java b/java/test/apps/startup/StartupActionsPreferencesPanelTest.java\nindex c7619c3bc3..999c911908 100644\n--- a/java/test/apps/startup/StartupActionsPreferencesPanelTest.java\n+++ b/java/test/apps/startup/StartupActionsPreferencesPanelTest.java\n\n@@ -11,7 +11,7 @@ import static org.assertj.core.api.Assertions.assertThat;\n /**\n  * @author Paul Bender Copyright (C) 2017\n  */\n-public class StartupActionsPreferencesPanelTest extends PreferencesPanelTestBase {\n+public class StartupActionsPreferencesPanelTest extends PreferencesPanelTestBase<StartupActionsPreferencesPanel> {\n \n     @Override\n     @BeforeEach\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY0MDM1MA==", "url": "https://github.com/JMRI/JMRI/pull/8845#discussion_r455640350", "bodyText": "Since a preferences panel controls if it is put into a tab with another preference panel or not, you should expect that preferences panels that are not under tabs will return null for the title for the tab.", "author": "rhwood", "createdAt": "2020-07-16T09:09:46Z", "path": "java/test/apps/startup/StartupActionsPreferencesPanelTest.java", "diffHunk": "@@ -1,32 +1,52 @@\n package apps.startup;\n \n+import jmri.swing.PreferencesPanelTestBase;\n import jmri.util.JUnitUtil;\n \n import org.junit.jupiter.api.*;\n import org.junit.Assert;\n \n+import static org.assertj.core.api.Assertions.assertThat;\n+\n /**\n- *\n  * @author Paul Bender Copyright (C) 2017\n  */\n-public class StartupActionsPreferencesPanelTest {\n+public class StartupActionsPreferencesPanelTest extends PreferencesPanelTestBase {\n+\n+    @Override\n+    @BeforeEach\n+    public void setUp() {\n+        JUnitUtil.setUp();\n+        jmri.util.JUnitUtil.initStartupActionsManager();\n+        prefsPanel = new StartupActionsPreferencesPanel();\n+    }\n \n+    @Override\n     @Test\n-    public void testCTor() {\n-        StartupActionsPreferencesPanel t = new StartupActionsPreferencesPanel();\n-        Assert.assertNotNull(\"exists\",t);\n+    public void getLabelKey(){\n+        // This class returns null for label key, but should it?\n+        assertThat(prefsPanel.getLabelKey()).isNull();\n     }\n \n-    @BeforeEach\n-    public void setUp() {\n-        JUnitUtil.setUp();        jmri.util.JUnitUtil.initStartupActionsManager();\n+    @Override\n+    @Test\n+    public void getPreferencesTooltip(){\n+        // This class returns null for preferences tool tip, but should it?\n+        assertThat(prefsPanel.getPreferencesTooltip()).isNull();\n     }\n \n-    @AfterEach\n-    public void tearDown() {\n-        JUnitUtil.tearDown();\n+    @Override\n+    @Test\n+    public void getTabbedPreferencesTitle(){", "originalCommit": "271ec3f36df8832d93f1390b4055a84aa14d1a8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTcyNzYwNw==", "url": "https://github.com/JMRI/JMRI/pull/8845#discussion_r455727607", "bodyText": "thanks.  will fix.", "author": "pabender", "createdAt": "2020-07-16T11:49:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY0MDM1MA=="}], "type": "inlineReview", "revised_code": {"commit": "d30ef32951845adadfca0fc8ff49841541532a25", "chunk": "diff --git a/java/test/apps/startup/StartupActionsPreferencesPanelTest.java b/java/test/apps/startup/StartupActionsPreferencesPanelTest.java\nindex c7619c3bc3..999c911908 100644\n--- a/java/test/apps/startup/StartupActionsPreferencesPanelTest.java\n+++ b/java/test/apps/startup/StartupActionsPreferencesPanelTest.java\n\n@@ -11,7 +11,7 @@ import static org.assertj.core.api.Assertions.assertThat;\n /**\n  * @author Paul Bender Copyright (C) 2017\n  */\n-public class StartupActionsPreferencesPanelTest extends PreferencesPanelTestBase {\n+public class StartupActionsPreferencesPanelTest extends PreferencesPanelTestBase<StartupActionsPreferencesPanel> {\n \n     @Override\n     @BeforeEach\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY0MTUyOA==", "url": "https://github.com/JMRI/JMRI/pull/8845#discussion_r455641528", "bodyText": "The only preferences panels that should not be returning null label keys are preferences panels that are tabbed together with other preferences panels. Panels showing up in the list on the preferences window should be returning null for label keys.", "author": "rhwood", "createdAt": "2020-07-16T09:11:38Z", "path": "java/test/jmri/jmris/json/JsonServerPreferencesPanelTest.java", "diffHunk": "@@ -11,23 +12,21 @@\n  *\n  * @author Paul Bender Copyright (C) 2017\n  */\n-public class JsonServerPreferencesPanelTest {\n-\n-    @Test\n-    public void testCTor() {\n-        JsonServerPreferencesPanel t = new JsonServerPreferencesPanel();\n-        assertThat(t).withFailMessage(\"exists\").isNotNull();\n-    }\n+public class JsonServerPreferencesPanelTest extends PreferencesPanelTestBase {\n \n+    @Override\n     @BeforeEach\n     public void setUp() {\n         JUnitUtil.setUp();\n         jmri.util.JUnitUtil.resetProfileManager();\n+        prefsPanel = new JsonServerPreferencesPanel();\n     }\n \n-    @AfterEach\n-    public void tearDown() {\n-        JUnitUtil.tearDown();\n+    @Override\n+    @Test\n+    public void getLabelKey(){\n+        // This class returns null for label key, but should it?", "originalCommit": "271ec3f36df8832d93f1390b4055a84aa14d1a8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTczMDc4NQ==", "url": "https://github.com/JMRI/JMRI/pull/8845#discussion_r455730785", "bodyText": "Thanks, will fix", "author": "pabender", "createdAt": "2020-07-16T11:55:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY0MTUyOA=="}], "type": "inlineReview", "revised_code": {"commit": "d30ef32951845adadfca0fc8ff49841541532a25", "chunk": "diff --git a/java/test/jmri/jmris/json/JsonServerPreferencesPanelTest.java b/java/test/jmri/jmris/json/JsonServerPreferencesPanelTest.java\nindex acad9aa063..e1cfef7597 100644\n--- a/java/test/jmri/jmris/json/JsonServerPreferencesPanelTest.java\n+++ b/java/test/jmri/jmris/json/JsonServerPreferencesPanelTest.java\n\n@@ -12,7 +12,7 @@ import static org.assertj.core.api.Assertions.assertThat;\n  *\n  * @author Paul Bender Copyright (C) 2017\n  */\n-public class JsonServerPreferencesPanelTest extends PreferencesPanelTestBase {\n+public class JsonServerPreferencesPanelTest extends PreferencesPanelTestBase<JsonServerPreferencesPanel> {\n \n     @Override\n     @BeforeEach\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY0NDM4NA==", "url": "https://github.com/JMRI/JMRI/pull/8845#discussion_r455644384", "bodyText": "Since the PreferencesPanel interface stipulates no requirement of nullness, this test should not assert is not null. If it is to assert anything, it should assert there is no exception.", "author": "rhwood", "createdAt": "2020-07-16T09:16:25Z", "path": "java/test/jmri/swing/PreferencesPanelTestBase.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package jmri.swing;\n+\n+import jmri.util.JUnitUtil;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.assertj.core.api.Java6Assertions.assertThat;\n+import static org.assertj.core.api.Java6Assertions.catchThrowable;\n+\n+/**\n+ *  Base Tests for implementations of the PreferenesPanel interface.\n+ *\n+ * @author Paul Bender Colyright (C) 2020\n+ */\n+abstract public class PreferencesPanelTestBase {\n+\n+    protected PreferencesPanel prefsPanel;\n+\n+    /**\n+     * Implementing classes should set the value of prefsPanel in setUp.\n+     */\n+    @BeforeEach\n+    abstract public void setUp();\n+\n+    @AfterEach\n+    public void tearDown(){\n+        prefsPanel = null;\n+        JUnitUtil.tearDown();\n+    }\n+\n+    @Test\n+    public void testCtor(){\n+        assertThat(prefsPanel).isNotNull();\n+    }\n+\n+    @Test\n+    public void getPreferencesItem() {\n+        assertThat(prefsPanel.getPreferencesItem()).isNotNull();\n+    }\n+\n+    @Test\n+    public void getPreferencesItemText() {\n+        assertThat(prefsPanel.getPreferencesItemText()).isNotNull();\n+    }\n+\n+    @Test\n+    public void getTabbedPreferencesTitle() {\n+        assertThat(prefsPanel.getTabbedPreferencesTitle()).isNotNull();\n+    }\n+\n+    @Test\n+    public void getLabelKey() {\n+        assertThat(prefsPanel.getLabelKey()).isNotNull();\n+    }\n+\n+    @Test\n+    public void getPreferencesComponent() {\n+        assertThat(prefsPanel.getPreferencesComponent()).isNotNull();\n+    }\n+\n+    @Test\n+    public void isPersistant() {\n+        assertThat(prefsPanel.isPersistant()).isFalse();\n+    }\n+\n+    @Test\n+    public void getPreferencesTooltip() {", "originalCommit": "271ec3f36df8832d93f1390b4055a84aa14d1a8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTczNzEyMg==", "url": "https://github.com/JMRI/JMRI/pull/8845#discussion_r455737122", "bodyText": "thanks, will fix", "author": "pabender", "createdAt": "2020-07-16T12:07:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY0NDM4NA=="}], "type": "inlineReview", "revised_code": {"commit": "d30ef32951845adadfca0fc8ff49841541532a25", "chunk": "diff --git a/java/test/jmri/swing/PreferencesPanelTestBase.java b/java/test/jmri/swing/PreferencesPanelTestBase.java\nindex 0b6f85276f..b95a6ce6e8 100644\n--- a/java/test/jmri/swing/PreferencesPanelTestBase.java\n+++ b/java/test/jmri/swing/PreferencesPanelTestBase.java\n\n@@ -1,5 +1,6 @@\n package jmri.swing;\n \n+import cucumber.api.java8.Th;\n import jmri.util.JUnitUtil;\n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY0NDU1OA==", "url": "https://github.com/JMRI/JMRI/pull/8845#discussion_r455644558", "bodyText": "Since the PreferencesPanel interface stipulates no requirement of nullness, this test should not assert is not null. If it is to assert anything, it should assert there is no exception.", "author": "rhwood", "createdAt": "2020-07-16T09:16:42Z", "path": "java/test/jmri/swing/PreferencesPanelTestBase.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package jmri.swing;\n+\n+import jmri.util.JUnitUtil;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.assertj.core.api.Java6Assertions.assertThat;\n+import static org.assertj.core.api.Java6Assertions.catchThrowable;\n+\n+/**\n+ *  Base Tests for implementations of the PreferenesPanel interface.\n+ *\n+ * @author Paul Bender Colyright (C) 2020\n+ */\n+abstract public class PreferencesPanelTestBase {\n+\n+    protected PreferencesPanel prefsPanel;\n+\n+    /**\n+     * Implementing classes should set the value of prefsPanel in setUp.\n+     */\n+    @BeforeEach\n+    abstract public void setUp();\n+\n+    @AfterEach\n+    public void tearDown(){\n+        prefsPanel = null;\n+        JUnitUtil.tearDown();\n+    }\n+\n+    @Test\n+    public void testCtor(){\n+        assertThat(prefsPanel).isNotNull();\n+    }\n+\n+    @Test\n+    public void getPreferencesItem() {\n+        assertThat(prefsPanel.getPreferencesItem()).isNotNull();\n+    }\n+\n+    @Test\n+    public void getPreferencesItemText() {\n+        assertThat(prefsPanel.getPreferencesItemText()).isNotNull();\n+    }\n+\n+    @Test\n+    public void getTabbedPreferencesTitle() {\n+        assertThat(prefsPanel.getTabbedPreferencesTitle()).isNotNull();\n+    }\n+\n+    @Test\n+    public void getLabelKey() {\n+        assertThat(prefsPanel.getLabelKey()).isNotNull();", "originalCommit": "271ec3f36df8832d93f1390b4055a84aa14d1a8f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTczNjk5Mw==", "url": "https://github.com/JMRI/JMRI/pull/8845#discussion_r455736993", "bodyText": "thanks, will fix", "author": "pabender", "createdAt": "2020-07-16T12:07:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY0NDU1OA=="}], "type": "inlineReview", "revised_code": {"commit": "d30ef32951845adadfca0fc8ff49841541532a25", "chunk": "diff --git a/java/test/jmri/swing/PreferencesPanelTestBase.java b/java/test/jmri/swing/PreferencesPanelTestBase.java\nindex 0b6f85276f..b95a6ce6e8 100644\n--- a/java/test/jmri/swing/PreferencesPanelTestBase.java\n+++ b/java/test/jmri/swing/PreferencesPanelTestBase.java\n\n@@ -1,5 +1,6 @@\n package jmri.swing;\n \n+import cucumber.api.java8.Th;\n import jmri.util.JUnitUtil;\n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n"}}, {"oid": "d30ef32951845adadfca0fc8ff49841541532a25", "url": "https://github.com/JMRI/JMRI/commit/d30ef32951845adadfca0fc8ff49841541532a25", "message": "implement review recomendations", "committedDate": "2020-07-16T12:19:23Z", "type": "commit"}, {"oid": "8d3bbb3ccf344c4d820627692c39e6511f5f5784", "url": "https://github.com/JMRI/JMRI/commit/8d3bbb3ccf344c4d820627692c39e6511f5f5784", "message": "fix test", "committedDate": "2020-07-16T13:04:38Z", "type": "commit"}, {"oid": "cad321d545765bf0eefbf8739a2be65d65e1b623", "url": "https://github.com/JMRI/JMRI/commit/cad321d545765bf0eefbf8739a2be65d65e1b623", "message": "remove unused import", "committedDate": "2020-07-17T19:04:07Z", "type": "commit"}, {"oid": "bafe809e7870fb1417da6a2318592441863c49d5", "url": "https://github.com/JMRI/JMRI/commit/bafe809e7870fb1417da6a2318592441863c49d5", "message": "Merge branch 'master' of https://github.com/JMRI/JMRI", "committedDate": "2020-07-26T14:32:55Z", "type": "commit"}, {"oid": "438e7c2aae3c3290bae3ff7f2312c465441eed61", "url": "https://github.com/JMRI/JMRI/commit/438e7c2aae3c3290bae3ff7f2312c465441eed61", "message": "Add Eason to disabled tests.", "committedDate": "2020-08-03T03:29:11Z", "type": "commit"}]}