{"pr_number": 503, "pr_title": "started work on ui-test GitBlamer", "pr_createdAt": "2020-05-29T16:02:35Z", "pr_url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/503", "timeline": [{"oid": "b4233acee68e4ea6b8f36d707a9beaff6385f238", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/b4233acee68e4ea6b8f36d707a9beaff6385f238", "message": "started work on ui-test GitBlamer", "committedDate": "2020-05-29T16:01:20Z", "type": "commit"}, {"oid": "61042f1ce8290bb04be7992fda7e3b1196426755", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/61042f1ce8290bb04be7992fda7e3b1196426755", "message": "cloned GitRepo", "committedDate": "2020-06-02T07:15:40Z", "type": "commit"}, {"oid": "dc11578e932b6e3f59611631cc2c7811b91ff305", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/dc11578e932b6e3f59611631cc2c7811b91ff305", "message": "- saving working copy", "committedDate": "2020-06-03T15:46:24Z", "type": "commit"}, {"oid": "4dd6f7e03a7be5af21c5823f4893936993e8c519", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/4dd6f7e03a7be5af21c5823f4893936993e8c519", "message": "- saving working copy", "committedDate": "2020-06-03T16:26:35Z", "type": "commit"}, {"oid": "8155c503fbc10743a659ea4e28464b0b34546a40", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/8155c503fbc10743a659ea4e28464b0b34546a40", "message": "Merge branch 'master' into Selenium_UI_Tests_GitBlamer", "committedDate": "2020-06-03T16:27:00Z", "type": "commit"}, {"oid": "31681cccfe4b1a626f82ae9389a768ee7b2f3363", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/31681cccfe4b1a626f82ae9389a768ee7b2f3363", "message": "- saving working copy", "committedDate": "2020-06-05T10:09:28Z", "type": "commit"}, {"oid": "ab75419376ccea7c02ccc11fe2b4cae75bc60500", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/ab75419376ccea7c02ccc11fe2b4cae75bc60500", "message": "- started integrating WorflowJob", "committedDate": "2020-06-08T13:19:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY5NTc3NA==", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/503#discussion_r436695774", "bodyText": "@uhafner\nHier taucht dann letztendlich das Problem auf, das zu verlinkter Konsolenausgabe f\u00fchrt.", "author": "MxKilian", "createdAt": "2020-06-08T13:22:49Z", "path": "ui-tests/src/test/java/core/GitBlamerUITest.java", "diffHunk": "@@ -120,6 +208,38 @@ private Build generate(final GitRepo repo) {\n         return job.startBuild().waitUntilFinished();\n     }\n \n+    private Build generateWorkflowJob(final GitRepo repo) {\n+        repo.transferToDockerContainer(host, port);\n+\n+        // workflowJob.sandbox.check();\n+        /* workflowJob.useScm(GitScm.class)\n+                .url(repoUrl)\n+                .credentials(USERNAME); */\n+        workflowJob.setJenkinsFileRepository(repoUrl, USERNAME);", "originalCommit": "ab75419376ccea7c02ccc11fe2b4cae75bc60500", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "626793dfbb25db3c10c949c51920a2c1dc0faed6", "chunk": "diff --git a/ui-tests/src/test/java/core/GitBlamerUITest.java b/ui-tests/src/test/java/core/GitBlamerUITest.java\nindex 2bf5259c2..f4456db40 100644\n--- a/ui-tests/src/test/java/core/GitBlamerUITest.java\n+++ b/ui-tests/src/test/java/core/GitBlamerUITest.java\n\n@@ -197,45 +260,24 @@ public class GitBlamerUITest extends AbstractJUnitTest {\n     }\n \n     private Build generateFreeStyleJob(final GitRepo repo) {\n+        FreeStyleJob freestyleJob = jenkins.jobs.create();\n+        freestyleJob.configure();\n         repo.transferToDockerContainer(host, port);\n-        job.useScm(GitScm.class)\n+        freestyleJob.useScm(GitScm.class)\n                 .url(repoUrl)\n                 .credentials(USERNAME);\n \n-        addRecorder((FreeStyleJob) job);\n-        job.save();\n+        addRecorder(freestyleJob);\n+        freestyleJob.save();\n \n-        return job.startBuild().waitUntilFinished();\n+        return freestyleJob.startBuild().waitUntilFinished();\n     }\n \n     private Build generateWorkflowJob(final GitRepo repo) {\n+        WorkflowJob workflowJob = jenkins.jobs.create(WorkflowJob.class);\n+        workflowJob.configure();\n         repo.transferToDockerContainer(host, port);\n-\n-        // workflowJob.sandbox.check();\n-        /* workflowJob.useScm(GitScm.class)\n-                .url(repoUrl)\n-                .credentials(USERNAME); */\n         workflowJob.setJenkinsFileRepository(repoUrl, USERNAME);\n-        workflowJob.script.set(\"node {\\n\"\n-                + \"  stage ('Checkout') {\\n\"\n-                + \"    checkout scm\\n\"\n-                + \"  }\\n\"\n-                + \"  stage ('Build and Analysis') {\"\n-                + \"    echo '[javac] Test.java:1: warning: Test Warning for Jenkins'\\n\"\n-                + \"    echo '[javac] Test.java:2: warning: Test Warning for Jenkins'\\n\"\n-                + \"    echo '[javac] Test.java:3: warning: Test Warning for Jenkins'\\n\"\n-                // + \"    echo '[javac] Test.java:4: warning: Test Warning for Jenkins'\\n\"\n-                + \"    echo '[javac] LoremIpsum.java:1: warning: Another Warning for Jenkins'\\n\"\n-                + \"    echo '[javac] LoremIpsum.java:2: warning: Another Warning for Jenkins'\\n\"\n-                + \"    echo '[javac] LoremIpsum.java:3: warning: Another Warning for Jenkins'\\n\"\n-                + \"    echo '[javac] LoremIpsum.java:4: warning: Another Warning for Jenkins'\\n\"\n-                + \"    echo '[javac] Bob.java:1: warning: Bobs Warning for Jenkins'\\n\"\n-                + \"    echo '[javac] Bob.java:2: warning: Bobs Warning for Jenkins'\\n\"\n-                + \"    echo '[javac] Bob.java:3: warning: Bobs Warning for Jenkins'\\n\"\n-                + \"    recordIssues tools: [java()]\\n\"\n-                + \"  }\\n\"\n-                + \"}\"\n-        );\n         workflowJob.save();\n         return workflowJob.startBuild().waitUntilFinished();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU1OTc2Mw==", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/503#discussion_r437559763", "bodyText": "Das muss einkommentiert werden, damit das Jenkinsfile im Repo ist.", "author": "uhafner", "createdAt": "2020-06-09T16:23:28Z", "path": "ui-tests/src/test/java/core/GitBlamerUITest.java", "diffHunk": "@@ -0,0 +1,287 @@\n+package core;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.inject.Inject;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import org.jenkinsci.test.acceptance.docker.DockerContainerHolder;\n+import org.jenkinsci.test.acceptance.docker.fixtures.GitContainer;\n+import org.jenkinsci.test.acceptance.junit.AbstractJUnitTest;\n+import org.jenkinsci.test.acceptance.junit.DockerTest;\n+import org.jenkinsci.test.acceptance.junit.WithCredentials;\n+import org.jenkinsci.test.acceptance.junit.WithDocker;\n+import org.jenkinsci.test.acceptance.junit.WithPlugins;\n+import org.jenkinsci.test.acceptance.plugins.git.GitScm;\n+import org.jenkinsci.test.acceptance.po.Build;\n+import org.jenkinsci.test.acceptance.po.FreeStyleJob;\n+import org.jenkinsci.test.acceptance.po.Job;\n+import org.jenkinsci.test.acceptance.po.WorkflowJob;\n+\n+import io.jenkins.plugins.analysis.warnings.AnalysisResult;\n+import io.jenkins.plugins.analysis.warnings.AnalysisSummary;\n+import io.jenkins.plugins.analysis.warnings.BlamesTable;\n+import io.jenkins.plugins.analysis.warnings.BlamesTableRow;\n+import io.jenkins.plugins.analysis.warnings.IssuesRecorder;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@WithDocker\n+@Category(DockerTest.class)\n+@WithPlugins({\"git\", \"git-forensics\"})\n+@WithCredentials(credentialType = WithCredentials.SSH_USERNAME_PRIVATE_KEY, values = {\"gitplugin\", \"/org/jenkinsci/test/acceptance/docker/fixtures/GitContainer/unsafe\"})\n+public class GitBlamerUITest extends AbstractJUnitTest {\n+\n+    @Inject\n+    DockerContainerHolder<GitContainer> gitServer;\n+\n+    private static final String USERNAME = \"gitplugin\";\n+    private Job job;\n+    private WorkflowJob workflowJob;\n+    private GitContainer container;\n+    private String repoUrl;\n+    private String host;\n+    private int port;\n+\n+    private static final String DETAILS = \"Details\";\n+    private static final String FILE = \"File\";\n+    private static final String AGE = \"Age\";\n+    private static final String AUTHOR = \"Author\";\n+    private static final String EMAIL = \"Email\";\n+    private static final String COMMIT = \"Commit\";\n+    private static final String ADDED = \"Added\";\n+\n+    @Before\n+    public void initGitRepository() {\n+        container = gitServer.get();\n+        repoUrl = container.getRepoUrl();\n+        host = container.host();\n+        port = container.port();\n+        // job = jenkins.jobs.create();    // creates freestyle job\n+        workflowJob = jenkins.jobs.create(WorkflowJob.class);\n+        // job.configure();\n+        workflowJob.configure();\n+    }\n+\n+    // TODO: reactivate the posix file settings before final commit\n+\n+    @Test\n+    public void shouldBlameOneIssueWithFreestyle() {\n+        GitRepo repo = setupInitialGitRepository();\n+        repo.commitFileWithMessage(\"commit\", \"Test.java\",\n+                \"public class Test {}\");\n+        String commitId = repo.getLastSha1();\n+        repo.commitFileWithMessage(\"commit\", \"warnings.txt\",\n+                \"[javac] Test.java:1: warning: Test Warning for Jenkins\");\n+\n+        Build build = generateFreeStyleJob(repo);\n+        build.open();\n+\n+        AnalysisSummary blame = new AnalysisSummary(build, \"java\");\n+        AnalysisResult resultPage = blame.openOverallResult();\n+        BlamesTable blamesTable = resultPage.openBlamesTable();\n+        BlamesTableRow row = blamesTable.getRowAs(0, BlamesTableRow.class);\n+\n+        assertThat(blamesTable.getTableRows()).hasSize(1);\n+        assertColumnHeader(blamesTable);\n+        assertColumnsOfTest(row, commitId);\n+    }\n+\n+    @Test\n+    public void shouldBlameElevenIssuesWithPipeline() throws Exception {\n+        GitRepo repo = new GitRepo();\n+\n+        /*", "originalCommit": "ab75419376ccea7c02ccc11fe2b4cae75bc60500", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "626793dfbb25db3c10c949c51920a2c1dc0faed6", "chunk": "diff --git a/ui-tests/src/test/java/core/GitBlamerUITest.java b/ui-tests/src/test/java/core/GitBlamerUITest.java\nindex 2bf5259c2..f4456db40 100644\n--- a/ui-tests/src/test/java/core/GitBlamerUITest.java\n+++ b/ui-tests/src/test/java/core/GitBlamerUITest.java\n\n@@ -7,6 +7,7 @@ import javax.inject.Inject;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.experimental.categories.Category;\n+import org.jvnet.hudson.test.Issue;\n \n import org.jenkinsci.test.acceptance.docker.DockerContainerHolder;\n import org.jenkinsci.test.acceptance.docker.fixtures.GitContainer;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzU2MDg1MQ==", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/503#discussion_r437560851", "bodyText": "workflowJob.script.set das gibt es nur falls nicht das Repository verwendet wird. Am besten mal selbst im Jenkins UI anschauen.\nD.h. das Script wird nicht hier gesetzt sondern als Datei in Git abgelegt", "author": "uhafner", "createdAt": "2020-06-09T16:25:11Z", "path": "ui-tests/src/test/java/core/GitBlamerUITest.java", "diffHunk": "@@ -0,0 +1,287 @@\n+package core;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.inject.Inject;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import org.jenkinsci.test.acceptance.docker.DockerContainerHolder;\n+import org.jenkinsci.test.acceptance.docker.fixtures.GitContainer;\n+import org.jenkinsci.test.acceptance.junit.AbstractJUnitTest;\n+import org.jenkinsci.test.acceptance.junit.DockerTest;\n+import org.jenkinsci.test.acceptance.junit.WithCredentials;\n+import org.jenkinsci.test.acceptance.junit.WithDocker;\n+import org.jenkinsci.test.acceptance.junit.WithPlugins;\n+import org.jenkinsci.test.acceptance.plugins.git.GitScm;\n+import org.jenkinsci.test.acceptance.po.Build;\n+import org.jenkinsci.test.acceptance.po.FreeStyleJob;\n+import org.jenkinsci.test.acceptance.po.Job;\n+import org.jenkinsci.test.acceptance.po.WorkflowJob;\n+\n+import io.jenkins.plugins.analysis.warnings.AnalysisResult;\n+import io.jenkins.plugins.analysis.warnings.AnalysisSummary;\n+import io.jenkins.plugins.analysis.warnings.BlamesTable;\n+import io.jenkins.plugins.analysis.warnings.BlamesTableRow;\n+import io.jenkins.plugins.analysis.warnings.IssuesRecorder;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@WithDocker\n+@Category(DockerTest.class)\n+@WithPlugins({\"git\", \"git-forensics\"})\n+@WithCredentials(credentialType = WithCredentials.SSH_USERNAME_PRIVATE_KEY, values = {\"gitplugin\", \"/org/jenkinsci/test/acceptance/docker/fixtures/GitContainer/unsafe\"})\n+public class GitBlamerUITest extends AbstractJUnitTest {\n+\n+    @Inject\n+    DockerContainerHolder<GitContainer> gitServer;\n+\n+    private static final String USERNAME = \"gitplugin\";\n+    private Job job;\n+    private WorkflowJob workflowJob;\n+    private GitContainer container;\n+    private String repoUrl;\n+    private String host;\n+    private int port;\n+\n+    private static final String DETAILS = \"Details\";\n+    private static final String FILE = \"File\";\n+    private static final String AGE = \"Age\";\n+    private static final String AUTHOR = \"Author\";\n+    private static final String EMAIL = \"Email\";\n+    private static final String COMMIT = \"Commit\";\n+    private static final String ADDED = \"Added\";\n+\n+    @Before\n+    public void initGitRepository() {\n+        container = gitServer.get();\n+        repoUrl = container.getRepoUrl();\n+        host = container.host();\n+        port = container.port();\n+        // job = jenkins.jobs.create();    // creates freestyle job\n+        workflowJob = jenkins.jobs.create(WorkflowJob.class);\n+        // job.configure();\n+        workflowJob.configure();\n+    }\n+\n+    // TODO: reactivate the posix file settings before final commit\n+\n+    @Test\n+    public void shouldBlameOneIssueWithFreestyle() {\n+        GitRepo repo = setupInitialGitRepository();\n+        repo.commitFileWithMessage(\"commit\", \"Test.java\",\n+                \"public class Test {}\");\n+        String commitId = repo.getLastSha1();\n+        repo.commitFileWithMessage(\"commit\", \"warnings.txt\",\n+                \"[javac] Test.java:1: warning: Test Warning for Jenkins\");\n+\n+        Build build = generateFreeStyleJob(repo);\n+        build.open();\n+\n+        AnalysisSummary blame = new AnalysisSummary(build, \"java\");\n+        AnalysisResult resultPage = blame.openOverallResult();\n+        BlamesTable blamesTable = resultPage.openBlamesTable();\n+        BlamesTableRow row = blamesTable.getRowAs(0, BlamesTableRow.class);\n+\n+        assertThat(blamesTable.getTableRows()).hasSize(1);\n+        assertColumnHeader(blamesTable);\n+        assertColumnsOfTest(row, commitId);\n+    }\n+\n+    @Test\n+    public void shouldBlameElevenIssuesWithPipeline() throws Exception {\n+        GitRepo repo = new GitRepo();\n+\n+        /*\n+        repo.commitFileWithMessage(\"commit\", \"Jenkinsfile\",\n+                \"node {\\n\"\n+                        + \"  stage ('Checkout') {\\n\"\n+                        + \"    checkout scm\\n\"\n+                        + \"  }\\n\"\n+                        + \"  stage ('Build and Analysis') {\"\n+                        + \"    echo '[javac] Test.java:1: warning: Test Warning for Jenkins'\\n\"\n+                        + \"    echo '[javac] Test.java:2: warning: Test Warning for Jenkins'\\n\"\n+                        + \"    echo '[javac] Test.java:3: warning: Test Warning for Jenkins'\\n\"\n+                        // + \"    echo '[javac] Test.java:4: warning: Test Warning for Jenkins'\\n\"\n+                        + \"    echo '[javac] LoremIpsum.java:1: warning: Another Warning for Jenkins'\\n\"\n+                        + \"    echo '[javac] LoremIpsum.java:2: warning: Another Warning for Jenkins'\\n\"\n+                        + \"    echo '[javac] LoremIpsum.java:3: warning: Another Warning for Jenkins'\\n\"\n+                        + \"    echo '[javac] LoremIpsum.java:4: warning: Another Warning for Jenkins'\\n\"\n+                        + \"    echo '[javac] Bob.java:1: warning: Bobs Warning for Jenkins'\\n\"\n+                        + \"    echo '[javac] Bob.java:2: warning: Bobs Warning for Jenkins'\\n\"\n+                        + \"    echo '[javac] Bob.java:3: warning: Bobs Warning for Jenkins'\\n\"\n+                        + \"    recordIssues tools: [java()]\\n\"\n+                        + \"  }\\n\"\n+                        + \"}\"\n+        );*/\n+\n+        Build build = generateWorkflowJob(repo);\n+        build.open();\n+\n+        System.out.println(\"Test\");\n+\n+    }\n+\n+    @Test\n+    public void shouldBlameElevenIssuesWithFreestyle() throws Exception {\n+        GitRepo repo = new GitRepo();\n+        Map<String, String> commits = commitDifferentFilesToGitRepository(repo);\n+        repo.commitFileWithMessage(\"commit\", \"warnings.txt\",\n+                \"[javac] Test.java:1: warning: Test Warning for Jenkins\\n\"\n+                        + \"[javac] Test.java:2: warning: Test Warning for Jenkins\\n\"\n+                        + \"[javac] Test.java:3: warning: Test Warning for Jenkins\\n\"\n+                        + \"[javac] LoremIpsum.java:1: warning: Another Warning for Jenkins\\n\"\n+                        + \"[javac] LoremIpsum.java:2: warning: Another Warning for Jenkins\\n\"\n+                        + \"[javac] LoremIpsum.java:3: warning: Another Warning for Jenkins\\n\"\n+                        + \"[javac] LoremIpsum.java:4: warning: Another Warning for Jenkins\\n\"\n+                        + \"[javac] Bob.java:1: warning: Bobs Warning for Jenkins\\n\"\n+                        + \"[javac] Bob.java:2: warning: Bobs Warning for Jenkins\\n\"\n+                        + \"[javac] Bob.java:3: warning: Bobs Warning for Jenkins\");\n+\n+        Build build = generateFreeStyleJob(repo);\n+        build.open();\n+\n+        AnalysisSummary blame = new AnalysisSummary(build, \"java\");\n+        AnalysisResult resultPage = blame.openOverallResult();\n+        BlamesTable blamesTable = resultPage.openBlamesTable();\n+\n+        assertThat(blamesTable.getTableRows()).hasSize(10);\n+        assertColumnHeader(blamesTable);\n+        assertElevenIssues(commits, blamesTable);\n+    }\n+\n+    private void assertElevenIssues(final Map<String, String> commits, final BlamesTable table) {\n+        assertColumnsOfRowBob(table.getRowAs(0, BlamesTableRow.class), commits.get(\"Bob\"));\n+        assertColumnsOfRowBob(table.getRowAs(1, BlamesTableRow.class), commits.get(\"Bob\"));\n+        assertColumnsOfRowBob(table.getRowAs(2, BlamesTableRow.class), commits.get(\"Bob\"));\n+\n+        assertColumnsOfRowLoremIpsum(table.getRowAs(3, BlamesTableRow.class), commits.get(\"LoremIpsum\"));\n+        assertColumnsOfRowLoremIpsum(table.getRowAs(4, BlamesTableRow.class), commits.get(\"LoremIpsum\"));\n+        assertColumnsOfRowLoremIpsum(table.getRowAs(5, BlamesTableRow.class), commits.get(\"LoremIpsum\"));\n+        assertColumnsOfRowLoremIpsum(table.getRowAs(6, BlamesTableRow.class), commits.get(\"LoremIpsum\"));\n+\n+        assertColumnsOfTest(table.getRowAs(0, BlamesTableRow.class), commits.get(\"Test\"));\n+        assertColumnsOfTest(table.getRowAs(1, BlamesTableRow.class), commits.get(\"Test\"));\n+        assertColumnsOfTest(table.getRowAs(2, BlamesTableRow.class), commits.get(\"Test\"));\n+        assertColumnsOfTest(table.getRowAs(3, BlamesTableRow.class), commits.get(\"Test\"));\n+    }\n+\n+    private void assertColumnsOfTest(final BlamesTableRow row, final String commit) {\n+        assertThat(row.getAuthor()).isEqualTo(\"Git SampleRepoRule\");\n+        assertThat(row.getEmail()).isEqualTo(\"gits@mplereporule\");\n+        assertThat(row.getFileName()).isEqualTo(\"Test.java\");\n+        assertThat(row.getCommit()).isEqualTo(commit);\n+        assertThat(row.getAge()).isEqualTo(1);\n+    }\n+\n+    private void assertColumnsOfRowBob(final BlamesTableRow row, final String commit) {\n+        assertThat(row.getAuthor()).isEqualTo(\"Alice Miller\");\n+        assertThat(row.getEmail()).isEqualTo(\"alice@miller\");\n+        assertThat(row.getFileName()).isEqualTo(\"Bob.java\");\n+        assertThat(row.getCommit()).isEqualTo(commit);\n+        assertThat(row.getAge()).isEqualTo(1);\n+    }\n+\n+    private void assertColumnsOfRowLoremIpsum(final BlamesTableRow row, final String commit) {\n+        assertThat(row.getAuthor()).isEqualTo(\"John Doe\");\n+        assertThat(row.getEmail()).isEqualTo(\"john@doe.de\");\n+        assertThat(row.getFileName()).isEqualTo(\"LoremIpsum.java\");\n+        assertThat(row.getCommit()).isEqualTo(commit);\n+        assertThat(row.getAge()).isEqualTo(1);\n+    }\n+\n+    private void assertColumnHeader(final BlamesTable table) {\n+        assertThat(table.getHeaders()).containsExactly(DETAILS, FILE, AGE, AUTHOR, EMAIL, COMMIT, ADDED);\n+    }\n+\n+    private Build generateFreeStyleJob(final GitRepo repo) {\n+        repo.transferToDockerContainer(host, port);\n+        job.useScm(GitScm.class)\n+                .url(repoUrl)\n+                .credentials(USERNAME);\n+\n+        addRecorder((FreeStyleJob) job);\n+        job.save();\n+\n+        return job.startBuild().waitUntilFinished();\n+    }\n+\n+    private Build generateWorkflowJob(final GitRepo repo) {\n+        repo.transferToDockerContainer(host, port);\n+\n+        // workflowJob.sandbox.check();\n+        /* workflowJob.useScm(GitScm.class)\n+                .url(repoUrl)\n+                .credentials(USERNAME); */\n+        workflowJob.setJenkinsFileRepository(repoUrl, USERNAME);\n+        workflowJob.script.set(\"node {\\n\"", "originalCommit": "ab75419376ccea7c02ccc11fe2b4cae75bc60500", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "626793dfbb25db3c10c949c51920a2c1dc0faed6", "chunk": "diff --git a/ui-tests/src/test/java/core/GitBlamerUITest.java b/ui-tests/src/test/java/core/GitBlamerUITest.java\nindex 2bf5259c2..f4456db40 100644\n--- a/ui-tests/src/test/java/core/GitBlamerUITest.java\n+++ b/ui-tests/src/test/java/core/GitBlamerUITest.java\n\n@@ -7,6 +7,7 @@ import javax.inject.Inject;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.experimental.categories.Category;\n+import org.jvnet.hudson.test.Issue;\n \n import org.jenkinsci.test.acceptance.docker.DockerContainerHolder;\n import org.jenkinsci.test.acceptance.docker.fixtures.GitContainer;\n"}}, {"oid": "626793dfbb25db3c10c949c51920a2c1dc0faed6", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/626793dfbb25db3c10c949c51920a2c1dc0faed6", "message": "- finished the implementation of the refactored ui tests", "committedDate": "2020-06-10T09:50:38Z", "type": "commit"}, {"oid": "56f62e13bd3e7216628fa9b6a32be57755861740", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/56f62e13bd3e7216628fa9b6a32be57755861740", "message": "- fixed comments", "committedDate": "2020-06-10T09:51:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEzNjQyMw==", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/503#discussion_r438136423", "bodyText": "Das ist eine Maus auf der Tastatur herumgelaufen \ud83d\ude09", "author": "uhafner", "createdAt": "2020-06-10T13:49:12Z", "path": "plugin/src/test/java/io/jenkins/plugins/analysis/core/scm/GitBlamerITest.java", "diffHunk": "@@ -364,7 +364,7 @@ private void assertElevenIssues(final Map<String, String> commits, final TableMo\n \n         gitRepo.git(\"config\", \"user.name\", \"John Doe\");\n         gitRepo.git(\"config\", \"user.email\", \"john@doe\");\n-        createAndCommitFile(\"LoremIpsum.java\", \"public class LoremIpsum {\\n\"\n+        createAndCommitFile(\"2Lorem^1Ipsum.java\", \"public class wQ  a BVGTC^!$&/(LoremIpsum {\\n\"", "originalCommit": "56f62e13bd3e7216628fa9b6a32be57755861740", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEzNzkwNg==", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/503#discussion_r438137906", "bodyText": "Oh, das GitBlamerITest-File sollte eigentlich gar nicht innerhalb dieses Commits liegen ... letztendlich geht es nur um das GitBlamerUITest-File. Das muss mir wohl irgendwie untergerutscht sein", "author": "MxKilian", "createdAt": "2020-06-10T13:51:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEzNjQyMw=="}], "type": "inlineReview", "revised_code": {"commit": "08e9591a0ac2fb0787e517953103b8c1a74e7414", "chunk": "diff --git a/plugin/src/test/java/io/jenkins/plugins/analysis/core/scm/GitBlamerITest.java b/plugin/src/test/java/io/jenkins/plugins/analysis/core/scm/GitBlamerITest.java\ndeleted file mode 100644\nindex ebe6cb269..000000000\n--- a/plugin/src/test/java/io/jenkins/plugins/analysis/core/scm/GitBlamerITest.java\n+++ /dev/null\n\n@@ -1,393 +0,0 @@\n-package io.jenkins.plugins.analysis.core.scm;\n-\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.jvnet.hudson.test.CreateFileBuilder;\n-import org.jvnet.hudson.test.Issue;\n-\n-import org.jenkinsci.plugins.workflow.cps.CpsScmFlowDefinition;\n-import org.jenkinsci.plugins.workflow.job.WorkflowJob;\n-import hudson.model.FreeStyleProject;\n-import hudson.model.Run;\n-import hudson.plugins.git.GitSCM;\n-import jenkins.plugins.git.GitSampleRepoRule;\n-\n-import io.jenkins.plugins.analysis.core.model.AnalysisResult;\n-import io.jenkins.plugins.analysis.core.model.BlamesModel.BlamesRow;\n-import io.jenkins.plugins.analysis.core.model.IssuesDetail;\n-import io.jenkins.plugins.analysis.core.model.ResultAction;\n-import io.jenkins.plugins.analysis.core.testutil.IntegrationTestWithJenkinsPerTest;\n-import io.jenkins.plugins.analysis.warnings.Java;\n-import io.jenkins.plugins.datatables.TableColumn;\n-import io.jenkins.plugins.datatables.TableModel;\n-import io.jenkins.plugins.forensics.blame.Blamer;\n-\n-import static io.jenkins.plugins.analysis.core.assertions.Assertions.*;\n-\n-/**\n- * Tests the {@link Blamer GitBlamer} in several jobs that uses a real Git repository.\n- *\n- * @author Fabian Janker\n- * @author Andreas Pabst\n- */\n-@SuppressWarnings(\"PMD.SignatureDeclareThrowsException\")\n-public class GitBlamerITest extends IntegrationTestWithJenkinsPerTest {\n-    private static final String DETAILS = \"Details\";\n-    private static final String FILE = \"File\";\n-    private static final String AGE = \"Age\";\n-    private static final String AUTHOR = \"Author\";\n-    private static final String EMAIL = \"Email\";\n-    private static final String COMMIT = \"Commit\";\n-    private static final String ADDED = \"Added\";\n-\n-    /** The Git repository for the test. */\n-    @Rule\n-    public GitSampleRepoRule gitRepo = new GitSampleRepoRule();\n-\n-    /**\n-     * Verifies that a pipeline with one issue will be correctly blamed.\n-     *\n-     * @throws Exception\n-     *         if there is a problem with the git repository\n-     */\n-    @Test\n-    public void shouldBlameOneIssueWithPipeline() throws Exception {\n-        WorkflowJob job = createJob(\"\");\n-\n-        Run<?, ?> build = buildSuccessfully(job);\n-\n-        AnalysisResult result = scheduleSuccessfulBuild(job);\n-        assertSuccessfulBlame(result, 1, 1);\n-\n-        TableModel table = getBlamesTableModel(build);\n-        assertOneIssue(gitRepo.head(), table);\n-    }\n-\n-    /**\n-     * Verifies that the repository blamer can be disabled.\n-     *\n-     * @throws Exception\n-     *         if there is a problem with the git repository\n-     */\n-    @Test\n-    public void shouldDisableBlames() throws Exception {\n-        WorkflowJob job = createJob(\"blameDisabled: 'true', \");\n-\n-        AnalysisResult result = scheduleSuccessfulBuild(job);\n-\n-        assertThat(result.getBlames().getFiles()).isEmpty();\n-        assertThat(result.getInfoMessages()).contains(\"Skipping SCM blames as requested\");\n-    }\n-\n-    private WorkflowJob createJob(final String disableBlamesParameter) throws Exception {\n-        gitRepo.init();\n-\n-        createAndCommitFile(\"Jenkinsfile\", \"node {\\n\"\n-                + \"  stage ('Checkout') {\\n\"\n-                + \"    checkout scm\\n\"\n-                + \"  }\\n\"\n-                + \"  stage ('Build and Analysis') {\"\n-                + \"    echo '[javac] Test.java:1: warning: Test Warning for Jenkins'\\n\"\n-                + \"    recordIssues \" + disableBlamesParameter + \"tools: [java()]\\n\"\n-                + \"  }\\n\"\n-                + \"}\");\n-        createAndCommitFile(\"Test.java\", \"public class Test {}\");\n-\n-        WorkflowJob project = createPipeline();\n-        project.setDefinition(new CpsScmFlowDefinition(new GitSCM(gitRepo.toString()), \"Jenkinsfile\"));\n-        return project;\n-    }\n-\n-    /**\n-     * Verifies that a freestyle job with one issue will be correctly blamed.\n-     *\n-     * @throws Exception\n-     *         if there is a problem with the git repository\n-     */\n-    @Test\n-    public void shouldBlameOneIssueWithFreestyle() throws Exception {\n-        gitRepo.init();\n-        createAndCommitFile(\"Test.java\", \"public class Test {}\");\n-\n-        String testCommit = gitRepo.head();\n-\n-        FreeStyleProject project = createFreeStyleProject();\n-        project.setScm(new GitSCM(gitRepo.toString()));\n-        project.getBuildersList()\n-                .add(new CreateFileBuilder(\"warnings.txt\", \"[javac] Test.java:1: warning: Test Warning for Jenkins\"));\n-\n-        Java javaJob = new Java();\n-        javaJob.setPattern(\"warnings.txt\");\n-        enableWarnings(project, javaJob);\n-\n-        AnalysisResult result = scheduleSuccessfulBuild(project);\n-        assertSuccessfulBlame(result, 1, 1);\n-\n-        Run<?, ?> build = buildSuccessfully(project);\n-\n-        TableModel table = getBlamesTableModel(build);\n-        assertOneIssue(testCommit, table);\n-    }\n-\n-    /**\n-     * Tests blaming eleven issues with a fake git repository. Test run from a pipeline script.\n-     *\n-     * @throws Exception\n-     *         if there is a problem with the git repository\n-     */\n-    @Test\n-    public void shouldBlameElevenIssuesWithPipeline() throws Exception {\n-        Map<String, String> commits = createGitRepository();\n-\n-        createAndCommitFile(\"Jenkinsfile\", \"node {\\n\"\n-                + \"  stage ('Checkout') {\\n\"\n-                + \"    checkout scm\\n\"\n-                + \"  }\\n\"\n-                + \"  stage ('Build and Analysis') {\"\n-                + \"    echo '[javac] Test.java:1: warning: Test Warning for Jenkins'\\n\"\n-                + \"    echo '[javac] Test.java:2: warning: Test Warning for Jenkins'\\n\"\n-                + \"    echo '[javac] Test.java:3: warning: Test Warning for Jenkins'\\n\"\n-                + \"    echo '[javac] Test.java:4: warning: Test Warning for Jenkins'\\n\"\n-                + \"    echo '[javac] LoremIpsum.java:1: warning: Another Warning for Jenkins'\\n\"\n-                + \"    echo '[javac] LoremIpsum.java:2: warning: Another Warning for Jenkins'\\n\"\n-                + \"    echo '[javac] LoremIpsum.java:3: warning: Another Warning for Jenkins'\\n\"\n-                + \"    echo '[javac] LoremIpsum.java:4: warning: Another Warning for Jenkins'\\n\"\n-                + \"    echo '[javac] Bob.java:1: warning: Bobs Warning for Jenkins'\\n\"\n-                + \"    echo '[javac] Bob.java:2: warning: Bobs Warning for Jenkins'\\n\"\n-                + \"    echo '[javac] Bob.java:3: warning: Bobs Warning for Jenkins'\\n\"\n-                + \"    recordIssues tools: [java()]\\n\"\n-                + \"  }\\n\"\n-                + \"}\");\n-\n-        WorkflowJob project = createPipeline();\n-        project.setDefinition(new CpsScmFlowDefinition(new GitSCM(gitRepo.toString()), \"Jenkinsfile\"));\n-\n-        AnalysisResult result = scheduleSuccessfulBuild(project);\n-        assertSuccessfulBlame(result, 11, 3);\n-\n-        Run<?, ?> build = buildSuccessfully(project);\n-\n-        TableModel table = getBlamesTableModel(build);\n-        assertElevenIssues(commits, table);\n-    }\n-\n-    /**\n-     * Tests blaming eleven issues with a fake git repository. Test run with a freestyle job.\n-     *\n-     * @throws Exception\n-     *         if there is a problem with the git repository\n-     */\n-    @Test\n-    public void shouldBlameElevenIssuesWithFreestyle() throws Exception {\n-        Map<String, String> commits = createGitRepository();\n-\n-        FreeStyleProject project = createFreeStyleProject();\n-        project.setScm(new GitSCM(gitRepo.toString()));\n-        project.getBuildersList()\n-                .add(new CreateFileBuilder(\"warnings.txt\",\n-                        \"[javac] Test.java:1: warning: Test Warning for Jenkins\\n\"\n-                                + \"[javac] Test.java:2: warning: Test Warning for Jenkins\\n\"\n-                                + \"[javac] Test.java:3: warning: Test Warning for Jenkins\\n\"\n-                                + \"[javac] Test.java:4: warning: Test Warning for Jenkins\\n\"\n-                                + \"[javac] LoremIpsum.java:1: warning: Another Warning for Jenkins\\n\"\n-                                + \"[javac] LoremIpsum.java:2: warning: Another Warning for Jenkins\\n\"\n-                                + \"[javac] LoremIpsum.java:3: warning: Another Warning for Jenkins\\n\"\n-                                + \"[javac] LoremIpsum.java:4: warning: Another Warning for Jenkins\\n\"\n-                                + \"[javac] Bob.java:1: warning: Bobs Warning for Jenkins\\n\"\n-                                + \"[javac] Bob.java:2: warning: Bobs Warning for Jenkins\\n\"\n-                                + \"[javac] Bob.java:3: warning: Bobs Warning for Jenkins\"));\n-\n-        Java javaJob = new Java();\n-        javaJob.setPattern(\"warnings.txt\");\n-        enableWarnings(project, javaJob);\n-\n-        AnalysisResult result = scheduleSuccessfulBuild(project);\n-        assertSuccessfulBlame(result, 11, 3);\n-\n-        Run<?, ?> build = buildSuccessfully(project);\n-\n-        TableModel table = getBlamesTableModel(build);\n-\n-        assertElevenIssues(commits, table);\n-    }\n-\n-    /**\n-     * Test if blaming works on a build out of tree. See JENKINS-57260.\n-     *\n-     * @throws Exception\n-     *         if there is a problem with the git repository\n-     */\n-    @Test\n-    @Issue(\"JENKINS-57260\")\n-    public void shouldBlameWithBuildOutOfTree() throws Exception {\n-        gitRepo.init();\n-        createAndCommitFile(\"Test.h\", \"#ifdef \\\"\");\n-\n-        String firstCommit = gitRepo.head();\n-\n-        createAndCommitFile(\"Jenkinsfile\", \"pipeline {\\n\"\n-                + \"  agent any\\n\"\n-                + \"  options {\\n\"\n-                + \"    skipDefaultCheckout()\\n\"\n-                + \"  }\\n\"\n-                + \"  stages {\\n\"\n-                + \"    stage('Prepare') {\\n\"\n-                + \"      steps {\\n\"\n-                + \"        dir('source') {\\n\"\n-                + \"          checkout scm\\n\"\n-                + \"        }\\n\"\n-                + \"      }\\n\"\n-                + \"    }\\n\"\n-                + \"    stage('Doxygen') {\\n\"\n-                + \"      steps {\\n\"\n-                + \"        dir('build/doxygen') {\\n\"\n-                + \"          echo 'Test.h:1: Error: Unexpected character'\\n\"\n-                + \"        }\\n\"\n-                + \"        recordIssues(aggregatingResults: true, \"\n-                + \"             enabledForFailure: true, \"\n-                + \"             tool: doxygen(name: 'Doxygen'), \"\n-                + \"             sourceDirectory: 'source'\"\n-                + \"        )\\n\"\n-                + \"      }\\n\"\n-                + \"    }\\n\"\n-                + \"  }\\n\"\n-                + \"}\");\n-\n-        WorkflowJob project = createPipeline();\n-        project.setDefinition(new CpsScmFlowDefinition(new GitSCM(gitRepo.toString()), \"Jenkinsfile\"));\n-\n-        AnalysisResult result = scheduleSuccessfulBuild(project);\n-        assertSuccessfulBlame(result, 1, 1);\n-\n-        Run<?, ?> build = buildSuccessfully(project);\n-        TableModel table = getBlamesTableModel(build);\n-        List<Object> rows = table.getRows();\n-\n-        assertThat(rows).hasSize(1);\n-        BlamesRow row = (BlamesRow) rows.get(0);\n-\n-        assertThat(row.getDescription()).contains(\"Unexpected character\");\n-        assertThat(row.getFileName().getSort()).isEqualTo(\"Test.h:0000001\");\n-        assertThat(row.getAge()).contains(\"1\");\n-\n-        assertThat(row).hasAuthor(\"Git SampleRepoRule\")\n-                .hasEmail(\"gits@mplereporule\")\n-                .hasCommit(firstCommit);\n-    }\n-\n-    private TableModel getBlamesTableModel(final Run<?, ?> build) {\n-        IssuesDetail issuesDetail = (IssuesDetail) build.getAction(ResultAction.class).getTarget();\n-        return issuesDetail.getTableModel(\"blames\");\n-    }\n-\n-    private void assertSuccessfulBlame(final AnalysisResult result, final int numberOfIssues, final int numberOfFiles) {\n-        assertThat(result).hasNoErrorMessages();\n-        assertThat(result).hasTotalSize(numberOfIssues);\n-        assertThat(result).hasInfoMessages(\n-                \"Invoking Git blamer to create author and commit information for \" + numberOfFiles + \" affected files\",\n-                \"-> blamed authors of issues in \" + numberOfFiles + \" files\");\n-    }\n-\n-    private void assertColumnHeaders(final TableModel table) {\n-        List<String> columnHeaders = table.getColumns().stream().map(TableColumn::getHeaderLabel).collect(\n-                Collectors.toList());\n-        assertThat(columnHeaders)\n-                .containsExactly(DETAILS, FILE, AGE, AUTHOR, EMAIL, COMMIT, ADDED);\n-    }\n-\n-    private void assertOneIssue(final String commit, final TableModel table) {\n-        assertColumnHeaders(table);\n-\n-        List<Object> rows = table.getRows();\n-        assertThat(rows).hasSize(1);\n-        assertColumnsOfTest((BlamesRow) rows.get(0), commit, 1);\n-    }\n-\n-    private void assertColumnsOfTest(final BlamesRow row, final String commit, final int lineNumber) {\n-        assertThat(row.getDescription()).contains(\"Test Warning for Jenkins\");\n-        assertThat(row.getFileName().getSort()).isEqualTo(\"Test.java:000000\" + lineNumber);\n-        assertThat(row.getAge()).contains(\"1\");\n-        assertThat(row).hasAuthor(\"Git SampleRepoRule\").hasEmail(\"gits@mplereporule\").hasCommit(commit);\n-    }\n-\n-    private void assertColumnsOfRowLoremIpsum(final BlamesRow row, final String commitId, final int lineNumber) {\n-        assertThat(row.getDescription()).contains(\"Another Warning for Jenkins\");\n-        assertThat(row.getFileName().getSort()).isEqualTo(\"LoremIpsum.java:000000\" + lineNumber);\n-        assertThat(row.getAge()).contains(\"1\");\n-        assertThat(row).hasAuthor(\"John Doe\").hasEmail(\"john@doe\").hasCommit(commitId);\n-    }\n-\n-    private void assertColumnsOfRowBob(final BlamesRow row, final String commitId, final int lineNumber) {\n-        assertThat(row.getDescription()).contains(\"Bobs Warning for Jenkins\");\n-        assertThat(row.getFileName().getSort()).isEqualTo(\"Bob.java:000000\" + lineNumber);\n-        assertThat(row.getAge()).contains(\"1\");\n-        assertThat(row).hasAuthor(\"Alice Miller\").hasEmail(\"alice@miller\").hasCommit(commitId);\n-    }\n-\n-    private void assertElevenIssues(final Map<String, String> commits, final TableModel table) {\n-        assertColumnHeaders(table);\n-\n-        List<Object> rows = table.getRows();\n-        assertThat(rows).hasSize(11);\n-\n-        assertColumnsOfTest((BlamesRow) rows.get(0), commits.get(\"Test\"), 1);\n-        assertColumnsOfTest((BlamesRow) rows.get(1), commits.get(\"Test\"), 2);\n-        assertColumnsOfTest((BlamesRow) rows.get(2), commits.get(\"Test\"), 3);\n-        assertColumnsOfTest((BlamesRow) rows.get(3), commits.get(\"Test\"), 4);\n-\n-        assertColumnsOfRowLoremIpsum((BlamesRow) rows.get(4), commits.get(\"LoremIpsum\"), 1);\n-        assertColumnsOfRowLoremIpsum((BlamesRow) rows.get(5), commits.get(\"LoremIpsum\"), 2);\n-        assertColumnsOfRowLoremIpsum((BlamesRow) rows.get(6), commits.get(\"LoremIpsum\"), 3);\n-        assertColumnsOfRowLoremIpsum((BlamesRow) rows.get(7), commits.get(\"LoremIpsum\"), 4);\n-\n-        assertColumnsOfRowBob((BlamesRow) rows.get(8), commits.get(\"Bob\"), 1);\n-        assertColumnsOfRowBob((BlamesRow) rows.get(9), commits.get(\"Bob\"), 2);\n-        assertColumnsOfRowBob((BlamesRow) rows.get(10), commits.get(\"Bob\"), 3);\n-    }\n-\n-    private Map<String, String> createGitRepository() throws Exception {\n-        Map<String, String> commits = new HashMap<>();\n-\n-        gitRepo.init();\n-        createAndCommitFile(\"Test.java\", \"public class Test {\\n\"\n-                + \"    public Test() {\\n\"\n-                + \"        System.out.println(\\\"Test\\\");\"\n-                + \"    }\\n\"\n-                + \"}\");\n-\n-        commits.put(\"Test\", gitRepo.head());\n-\n-        gitRepo.git(\"config\", \"user.name\", \"John Doe\");\n-        gitRepo.git(\"config\", \"user.email\", \"john@doe\");\n-        createAndCommitFile(\"2Lorem^1Ipsum.java\", \"public class wQ  a BVGTC^!$&/(LoremIpsum {\\n\"\n-                + \"    public LoremIpsum() {\\n\"\n-                + \"        Log.log(\\\"Lorem ipsum dolor sit amet\\\");\"\n-                + \"    }\\n\"\n-                + \"}\");\n-\n-        commits.put(\"LoremIpsum\", gitRepo.head());\n-\n-        gitRepo.git(\"config\", \"user.name\", \"Alice Miller\");\n-        gitRepo.git(\"config\", \"user.email\", \"alice@miller\");\n-        createAndCommitFile(\"Bob.java\", \"public class Bob {\\n\"\n-                + \"    public Bob() {\\n\"\n-                + \"        Log.log(\\\"Bob: 'Where are you?'\\\");\"\n-                + \"    }\\n\"\n-                + \"}\");\n-\n-        commits.put(\"Bob\", gitRepo.head());\n-\n-        return commits;\n-    }\n-\n-    private void createAndCommitFile(final String fileName, final String content) throws Exception {\n-        gitRepo.write(fileName, content);\n-        gitRepo.git(\"add\", fileName);\n-        gitRepo.git(\"commit\", \"--message=\" + fileName + \" created\");\n-    }\n-}\n"}}, {"oid": "806b36600e3095699919d08cecccab53b0e87dba", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/806b36600e3095699919d08cecccab53b0e87dba", "message": "Add page objects for ForensicsTable", "committedDate": "2020-06-13T09:15:43Z", "type": "commit"}, {"oid": "349ea40c55e914e9e86e90936e106830036e3146", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/349ea40c55e914e9e86e90936e106830036e3146", "message": "Add GitForensicsUITest", "committedDate": "2020-06-13T09:18:42Z", "type": "commit"}, {"oid": "11df0a13a5f1b9f9f45e521e13125a91f89bb01b", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/11df0a13a5f1b9f9f45e521e13125a91f89bb01b", "message": "- Merged GitBlamer and GitForensics test into one\n- fixed javadoc warnings", "committedDate": "2020-06-16T14:57:50Z", "type": "commit"}, {"oid": "8e495c5e324cccbc26bf5f08fb4dea753184da1f", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/8e495c5e324cccbc26bf5f08fb4dea753184da1f", "message": "Add assertion for multiple authors", "committedDate": "2020-06-18T09:55:03Z", "type": "commit"}, {"oid": "08e9591a0ac2fb0787e517953103b8c1a74e7414", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/08e9591a0ac2fb0787e517953103b8c1a74e7414", "message": "Resolve merge conflicts", "committedDate": "2020-06-19T14:11:15Z", "type": "commit"}]}