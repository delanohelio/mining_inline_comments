{"pr_number": 478, "pr_title": "JENKINS-62190: Add UI test for Freestyle Configuration", "pr_createdAt": "2020-05-16T10:10:21Z", "pr_url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/478", "timeline": [{"oid": "e94b3d2f8c28e42fd056c867e2d468649c76b56e", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/e94b3d2f8c28e42fd056c867e2d468649c76b56e", "message": "Initial SnippetGeneratorUiTest", "committedDate": "2020-05-16T10:03:44Z", "type": "commit"}, {"oid": "813a73ae934b6f2e3d278e5b7f6fded15c375db9", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/813a73ae934b6f2e3d278e5b7f6fded15c375db9", "message": "first step for recorder configuration ui test\n\nadded some getter and setter to page object", "committedDate": "2020-05-16T12:22:19Z", "type": "commit"}, {"oid": "f3b0bef13e6cb6e96cf81cbe74826eff597597ca", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/f3b0bef13e6cb6e96cf81cbe74826eff597597ca", "message": "create ui test for recorderConfiguration\n\nadd all necessary setters and getters for issuesrecorder", "committedDate": "2020-05-17T14:29:16Z", "type": "commit"}, {"oid": "287f389f1ac3c1be44d2a26d6907490d5ef2a34f", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/287f389f1ac3c1be44d2a26d6907490d5ef2a34f", "message": "Transforming the SnippetGeneratorITest to a UI test", "committedDate": "2020-05-21T11:23:30Z", "type": "commit"}, {"oid": "0f88ba51dd039c8817cab4d534a0875090279a0b", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/0f88ba51dd039c8817cab4d534a0875090279a0b", "message": "Merge branch 'uiTestsFreestyleConfig' of github.com:kosiuk/warnings-ng-plugin into uiTestsFreestyleConfig", "committedDate": "2020-05-21T11:26:41Z", "type": "commit"}, {"oid": "dd78667f7fb97711f7cb79167dfd1120227a2c5c", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/dd78667f7fb97711f7cb79167dfd1120227a2c5c", "message": "Merge branch 'autogradingApiITest' of github.com:kosiuk/warnings-ng-plugin into uiTestsFreestyleConfig", "committedDate": "2020-05-22T07:22:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ1MDk3Mg==", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/478#discussion_r431450972", "bodyText": "Custom assertions machen den Test besser lesbar:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(issuesRecorder.getSourceCodeEncoding()).isEqualTo(ENCODING);\n          \n          \n            \n                   assertThat(issuesRecorder).hasSourceCodeEncoding(ENCODING);", "author": "uhafner", "createdAt": "2020-05-27T21:24:15Z", "path": "ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/FreeStyleConfigurationUITest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package io.jenkins.plugins.analysis.warnings;\n+\n+import org.junit.Test;\n+import org.jenkinsci.test.acceptance.junit.AbstractJUnitTest;\n+import org.jenkinsci.test.acceptance.junit.WithPlugins;\n+import org.jenkinsci.test.acceptance.po.FreeStyleJob;\n+import io.jenkins.plugins.analysis.warnings.IssuesRecorder.TrendChartType;\n+import static io.jenkins.plugins.analysis.warnings.Assertions.*;\n+\n+/**\n+ * Acceptance tests for the Warnings Next Generation Plugin.\n+\n+ */\n+@WithPlugins(\"warnings-ng\")\n+@SuppressWarnings({\"checkstyle:ClassFanOutComplexity\", \"PMD.SystemPrintln\", \"PMD.ExcessiveImports\"})\n+public class FreeStyleConfigurationUITest extends AbstractJUnitTest {\n+\n+    private static final String PATTERN = \"**/*.txt\";\n+    private static final String ENCODING = \"UTF-8\";\n+    private static final String REFERENCE = \"reference\";\n+    private static final String SOURCE_DIRECTORY = \"relative\";\n+    private static final String SERVERITY = \"NORMAL\";\n+\n+    /**\n+     * Verifies that job configuration screen correctly modifies the properties of an {@link IssuesRecorder} instance.\n+     */\n+    @Test\n+    public void shouldSetPropertiesInJobConfiguration() {\n+        FreeStyleJob job = jenkins.getJobs().create(FreeStyleJob.class);\n+\n+\n+        IssuesRecorder issuesRecorder = job.addPublisher(IssuesRecorder.class, recorder -> {\n+            recorder.setTool(\"Eclipse ECJ\");\n+        });\n+\n+        issuesRecorder.setSourceCodeEncoding(ENCODING);\n+        issuesRecorder.setSourceDirectory(SOURCE_DIRECTORY);\n+        issuesRecorder.setAggregatingResults(true);\n+        issuesRecorder.setTrendChartType(TrendChartType.TOOLS_ONLY);\n+        issuesRecorder.setBlameDisabled(true);\n+        issuesRecorder.setForensicsDisabled(true);\n+        issuesRecorder.setEnabledForFailure(true);\n+        issuesRecorder.setIgnoreQualityGate(true);\n+        issuesRecorder.setIgnoreFailedBuilds(true);\n+        issuesRecorder.setFailOnError(true);\n+        issuesRecorder.setReferenceJobField(REFERENCE);\n+        issuesRecorder.setHealthReport(1, 9, SERVERITY);\n+        issuesRecorder.setReportFilePattern(PATTERN);\n+\n+\n+        job.save();\n+        job.configure();\n+        issuesRecorder.openAdvancedOptions();\n+        assertThat(issuesRecorder.getSourceCodeEncoding()).isEqualTo(ENCODING);", "originalCommit": "0f88ba51dd039c8817cab4d534a0875090279a0b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b19683878d1905305a21f3b744374b5bff9f39f5", "chunk": "diff --git a/ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/FreeStyleConfigurationUITest.java b/ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/FreeStyleConfigurationUITest.java\nindex 7fb8124d9..40cfd3f5a 100644\n--- a/ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/FreeStyleConfigurationUITest.java\n+++ b/ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/FreeStyleConfigurationUITest.java\n\n@@ -8,7 +8,7 @@ import io.jenkins.plugins.analysis.warnings.IssuesRecorder.TrendChartType;\n import static io.jenkins.plugins.analysis.warnings.Assertions.*;\n \n /**\n- * Acceptance tests for the Warnings Next Generation Plugin.\n+ * Acceptance tests for the Freestyle configuration of the Warnings Next Generation Plugin.\n \n  */\n @WithPlugins(\"warnings-ng\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ1NDA0Mw==", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/478#discussion_r431454043", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Acceptance tests for the Warnings Next Generation Plugin.\n          \n          \n            \n             * Acceptance tests for the Freestyle configuration of the Warnings Next Generation Plugin.", "author": "uhafner", "createdAt": "2020-05-27T21:30:37Z", "path": "ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/FreeStyleConfigurationUITest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package io.jenkins.plugins.analysis.warnings;\n+\n+import org.junit.Test;\n+import org.jenkinsci.test.acceptance.junit.AbstractJUnitTest;\n+import org.jenkinsci.test.acceptance.junit.WithPlugins;\n+import org.jenkinsci.test.acceptance.po.FreeStyleJob;\n+import io.jenkins.plugins.analysis.warnings.IssuesRecorder.TrendChartType;\n+import static io.jenkins.plugins.analysis.warnings.Assertions.*;\n+\n+/**\n+ * Acceptance tests for the Warnings Next Generation Plugin.\n+", "originalCommit": "0f88ba51dd039c8817cab4d534a0875090279a0b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b19683878d1905305a21f3b744374b5bff9f39f5", "chunk": "diff --git a/ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/FreeStyleConfigurationUITest.java b/ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/FreeStyleConfigurationUITest.java\nindex 7fb8124d9..40cfd3f5a 100644\n--- a/ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/FreeStyleConfigurationUITest.java\n+++ b/ui-tests/src/test/java/io/jenkins/plugins/analysis/warnings/FreeStyleConfigurationUITest.java\n\n@@ -8,7 +8,7 @@ import io.jenkins.plugins.analysis.warnings.IssuesRecorder.TrendChartType;\n import static io.jenkins.plugins.analysis.warnings.Assertions.*;\n \n /**\n- * Acceptance tests for the Warnings Next Generation Plugin.\n+ * Acceptance tests for the Freestyle configuration of the Warnings Next Generation Plugin.\n \n  */\n @WithPlugins(\"warnings-ng\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ1NzI0OA==", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/478#discussion_r431457248", "bodyText": "Das wurde umbenannt und kann entfallen.", "author": "uhafner", "createdAt": "2020-05-27T21:37:52Z", "path": "ui-tests/src/main/java/io/jenkins/plugins/analysis/warnings/IssuesRecorder.java", "diffHunk": "@@ -150,6 +162,88 @@ public StaticAnalysisTool addTool(final String toolName, final String pattern) {\n         return addTool(toolName, tool -> tool.setPattern(pattern));\n     }\n \n+    /**\n+     * Returns the value of the Source code encoding field\n+     *\n+     * @return the source code encoding\n+     */\n+    public String getSourceCodeEncoding(){return sourceCodeEncoding.get();}\n+\n+    /**\n+     * Returns if the run always / enabled for failure checkbox is checked\n+     *\n+     * @return the enabled for failure checkbox value\n+     */\n+    public boolean getEnabledForFailure(){return enabledForFailureCheckBox.resolve().isSelected();}\n+\n+    /**\n+     * Returns  if the aggregate results checkbox is checked\n+     *\n+     * @return the aggregate results checkbox value\n+     */\n+    public boolean getAggregatingResults(){return aggregatingResultsCheckBox.resolve().isSelected();}\n+\n+    /**\n+     * Returns if the ignore quality gate checkbox is checked\n+     *\n+     * @return the ignore quality gate checkbox value\n+     */\n+    public boolean getIgnoreQualityGate(){return ignoreQualityGate.resolve().isSelected();}\n+\n+    /**\n+     * Returns if\n+     *  TODO What checkbox is this?", "originalCommit": "0f88ba51dd039c8817cab4d534a0875090279a0b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b19683878d1905305a21f3b744374b5bff9f39f5", "chunk": "diff --git a/ui-tests/src/main/java/io/jenkins/plugins/analysis/warnings/IssuesRecorder.java b/ui-tests/src/main/java/io/jenkins/plugins/analysis/warnings/IssuesRecorder.java\nindex d08bf9d20..f54a4058e 100644\n--- a/ui-tests/src/main/java/io/jenkins/plugins/analysis/warnings/IssuesRecorder.java\n+++ b/ui-tests/src/main/java/io/jenkins/plugins/analysis/warnings/IssuesRecorder.java\n\n@@ -162,47 +162,17 @@ public class IssuesRecorder extends AbstractStep implements PostBuildStep {\n         return addTool(toolName, tool -> tool.setPattern(pattern));\n     }\n \n-    /**\n-     * Returns the value of the Source code encoding field\n-     *\n-     * @return the source code encoding\n-     */\n-    public String getSourceCodeEncoding(){return sourceCodeEncoding.get();}\n+    public String getSourceCodeEncoding(){return sourceCodeEncoding.get(); }\n \n-    /**\n-     * Returns if the run always / enabled for failure checkbox is checked\n-     *\n-     * @return the enabled for failure checkbox value\n-     */\n-    public boolean getEnabledForFailure(){return enabledForFailureCheckBox.resolve().isSelected();}\n+    public boolean getEnabledForFailure(){return enabledForFailureCheckBox.resolve().isSelected(); }\n \n-    /**\n-     * Returns  if the aggregate results checkbox is checked\n-     *\n-     * @return the aggregate results checkbox value\n-     */\n-    public boolean getAggregatingResults(){return aggregatingResultsCheckBox.resolve().isSelected();}\n+    public boolean getAggregatingResults(){return aggregatingResultsCheckBox.resolve().isSelected(); }\n \n-    /**\n-     * Returns if the ignore quality gate checkbox is checked\n-     *\n-     * @return the ignore quality gate checkbox value\n-     */\n-    public boolean getIgnoreQualityGate(){return ignoreQualityGate.resolve().isSelected();}\n+    public boolean getIgnoreQualityGate(){return ignoreQualityGate.resolve().isSelected(); }\n \n-    /**\n-     * Returns if\n-     *  TODO What checkbox is this?\n-     * @return\n-     */\n-    public String getOverallResultMustBeSuccess(){return overallResultMustBeSuccessCheckBox.get();}\n+    public String getOverallResultMustBeSuccess(){return overallResultMustBeSuccessCheckBox.get(); }\n \n-    /**\n-     * Returns the value of the reference job field\n-     *\n-     * @return the reference job value\n-     */\n-    public String getReferenceJobField(){return referenceJobField.get();}\n+    public String getReferenceJobField(){return referenceJobField.get(); }\n \n     public String getSourceDirectory() {\n         return sourceDirectory.get();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ1NzgxMw==", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/478#discussion_r431457813", "bodyText": "Ich glaube, diese JavaDocs k\u00f6nnen entfallen. (Oder einen Punkt am Ende setzen, sonst meckert CheckStyle)", "author": "uhafner", "createdAt": "2020-05-27T21:39:05Z", "path": "ui-tests/src/main/java/io/jenkins/plugins/analysis/warnings/IssuesRecorder.java", "diffHunk": "@@ -150,6 +162,88 @@ public StaticAnalysisTool addTool(final String toolName, final String pattern) {\n         return addTool(toolName, tool -> tool.setPattern(pattern));\n     }\n \n+    /**\n+     * Returns the value of the Source code encoding field", "originalCommit": "0f88ba51dd039c8817cab4d534a0875090279a0b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b19683878d1905305a21f3b744374b5bff9f39f5", "chunk": "diff --git a/ui-tests/src/main/java/io/jenkins/plugins/analysis/warnings/IssuesRecorder.java b/ui-tests/src/main/java/io/jenkins/plugins/analysis/warnings/IssuesRecorder.java\nindex d08bf9d20..f54a4058e 100644\n--- a/ui-tests/src/main/java/io/jenkins/plugins/analysis/warnings/IssuesRecorder.java\n+++ b/ui-tests/src/main/java/io/jenkins/plugins/analysis/warnings/IssuesRecorder.java\n\n@@ -162,47 +162,17 @@ public class IssuesRecorder extends AbstractStep implements PostBuildStep {\n         return addTool(toolName, tool -> tool.setPattern(pattern));\n     }\n \n-    /**\n-     * Returns the value of the Source code encoding field\n-     *\n-     * @return the source code encoding\n-     */\n-    public String getSourceCodeEncoding(){return sourceCodeEncoding.get();}\n+    public String getSourceCodeEncoding(){return sourceCodeEncoding.get(); }\n \n-    /**\n-     * Returns if the run always / enabled for failure checkbox is checked\n-     *\n-     * @return the enabled for failure checkbox value\n-     */\n-    public boolean getEnabledForFailure(){return enabledForFailureCheckBox.resolve().isSelected();}\n+    public boolean getEnabledForFailure(){return enabledForFailureCheckBox.resolve().isSelected(); }\n \n-    /**\n-     * Returns  if the aggregate results checkbox is checked\n-     *\n-     * @return the aggregate results checkbox value\n-     */\n-    public boolean getAggregatingResults(){return aggregatingResultsCheckBox.resolve().isSelected();}\n+    public boolean getAggregatingResults(){return aggregatingResultsCheckBox.resolve().isSelected(); }\n \n-    /**\n-     * Returns if the ignore quality gate checkbox is checked\n-     *\n-     * @return the ignore quality gate checkbox value\n-     */\n-    public boolean getIgnoreQualityGate(){return ignoreQualityGate.resolve().isSelected();}\n+    public boolean getIgnoreQualityGate(){return ignoreQualityGate.resolve().isSelected(); }\n \n-    /**\n-     * Returns if\n-     *  TODO What checkbox is this?\n-     * @return\n-     */\n-    public String getOverallResultMustBeSuccess(){return overallResultMustBeSuccessCheckBox.get();}\n+    public String getOverallResultMustBeSuccess(){return overallResultMustBeSuccessCheckBox.get(); }\n \n-    /**\n-     * Returns the value of the reference job field\n-     *\n-     * @return the reference job value\n-     */\n-    public String getReferenceJobField(){return referenceJobField.get();}\n+    public String getReferenceJobField(){return referenceJobField.get(); }\n \n     public String getSourceDirectory() {\n         return sourceDirectory.get();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ1ODIxMA==", "url": "https://github.com/jenkinsci/warnings-ng-plugin/pull/478#discussion_r431458210", "bodyText": "Hier w\u00e4re es erlaubt, die Kommentare vom IssueRecorder zu kopieren.", "author": "uhafner", "createdAt": "2020-05-27T21:39:58Z", "path": "ui-tests/src/main/java/io/jenkins/plugins/analysis/warnings/IssuesRecorder.java", "diffHunk": "@@ -210,10 +304,54 @@ public void setReferenceJobField(final String referenceJob) {\n         referenceJobField.set(referenceJob);\n     }\n \n+    /**", "originalCommit": "0f88ba51dd039c8817cab4d534a0875090279a0b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "05a9719d3eaf7d9fc84b17b849cbf58d7d43e3f6", "chunk": "diff --git a/ui-tests/src/main/java/io/jenkins/plugins/analysis/warnings/IssuesRecorder.java b/ui-tests/src/main/java/io/jenkins/plugins/analysis/warnings/IssuesRecorder.java\nindex d08bf9d20..a5d51b6d7 100644\n--- a/ui-tests/src/main/java/io/jenkins/plugins/analysis/warnings/IssuesRecorder.java\n+++ b/ui-tests/src/main/java/io/jenkins/plugins/analysis/warnings/IssuesRecorder.java\n\n@@ -295,57 +340,108 @@ public class IssuesRecorder extends AbstractStep implements PostBuildStep {\n     }\n \n     /**\n-     * Sets the value of the input field 'referenceJob'.\n+     * Sets the reference job to get the results for the issue difference computation.\n      *\n-     * @param referenceJob\n-     *         the name of the referenceJob\n+     * @param referenceJobName\n+     *         the name of reference job\n      */\n-    public void setReferenceJobField(final String referenceJob) {\n-        referenceJobField.set(referenceJob);\n+    public void setReferenceJobName(final String referenceJobName) {\n+        this.referenceJobName.set(referenceJobName);\n     }\n \n     /**\n-     * Sets the value of the input field 'Source Directory'.\n+     * Sets the path to the folder that contains the source code. If not relative and thus not part of the workspace\n+     * then this folder needs to be added in Jenkins global configuration.\n      *\n-     * @param directory\n-     *         the name of the sourceDirectory\n+     * @param sourceDirectory\n+     *         a folder containing the source code\n      */\n-    public void setSourceDirectory(final String directory) {\n-        sourceDirectory.set(directory);\n+    public void setSourceDirectory(final String sourceDirectory) {\n+        this.sourceDirectory.set(sourceDirectory);\n     }\n \n+    /**\n+     * Sets the Aggregate esult checkbox.\n+     *\n+     * @param isChecked\n+     */\n     public void setAggregatingResults(final boolean isChecked) {\n         aggregatingResultsCheckBox.check(isChecked);\n     }\n \n-    public void setBlameDisabled(final boolean b) {\n-        blameDisabled.check(b);\n+    /**\n+     * Sets the Disable SCM Blames checkbox.\n+     *\n+     * @param blameDisabled\n+     */\n+    public void setBlameDisabled(final boolean blameDisabled) {\n+        this.blameDisabled.check(blameDisabled);\n     }\n \n-    public void setForensicsDisabled(final boolean b) {\n-        forensicsDisabled.check(b);\n+    /**\n+     * Sets the Disable SCM Forensics checkbox.\n+     *\n+     * @param forensicsDisabled\n+     */\n+    public void setForensicsDisabled(final boolean forensicsDisabled) {\n+        this.forensicsDisabled.check(forensicsDisabled);\n     }\n \n-    public void setIgnoreFailedBuilds(final boolean b) {\n-        ignoreFailedBuilds.check(b);\n+    /**\n+     * If {@code true}, then only successful or unstable reference builds will be considered. This option is enabled by\n+     * default, since analysis results might be inaccurate if the build failed. If {@code false}, every build that\n+     * contains a static analysis result is considered, even if the build failed.\n+     *\n+     * @param ignoreFailedBuilds\n+     *         if {@code true} then a stable build is used as reference\n+     */\n+    public void setIgnoreFailedBuilds(final boolean ignoreFailedBuilds) {\n+        this.ignoreFailedBuilds.check(ignoreFailedBuilds);\n     }\n \n-    public void setFailOnError(final boolean b) {\n-        failOnError.check(b);\n+    /**\n+     * Determines whether to fail the build on errors during the step of recording issues.\n+     *\n+     * @param failOnError\n+     *         if {@code true} then the build will be failed on errors, {@code false} then errors are only reported in\n+     *         the UI\n+     */\n+    public void setFailOnError(final boolean failOnError) {\n+        this.failOnError.check(failOnError);\n     }\n \n+    /**\n+     * Sets the report file pattern.\n+     * @param pattern\n+     */\n     public void setReportFilePattern(final String pattern) {\n         reportFilePattern.set(pattern);\n     }\n \n-    public void setTrendChartType(final TrendChartType selection) {\n-        trendChartType.select(selection.toString());\n+    /**\n+     * Sets the type of the trend chart that should be shown on the job page.\n+     *\n+     * @param trendChartType\n+     *         the type of the trend chart to use\n+     */\n+    public void setTrendChartType(final TrendChartType trendChartType) {\n+        this.trendChartType.select(trendChartType.toString());\n     }\n \n-    public void setHealthReport(final int healthy, final int unhealthy, final String severity) {\n+    /**\n+     * Sets the healthy report values.\n+     *\n+     * @param healthy\n+     *         the number of issues when health is reported as 100%\n+     * @param unhealthy\n+     *         the number of issues when health is reported as 0%\n+     * @param minimumSeverity\n+     *         the severity to consider\n+     */\n+    public void setHealthReport(final int healthy, final int unhealthy, final String minimumSeverity) {\n         healthyThreshold.set(healthy);\n         unhealthyThreshold.set(unhealthy);\n-        healthSeverity.select(severity);\n+        healthSeverity.select(minimumSeverity);\n     }\n \n     /**\n"}}, {"oid": "b19683878d1905305a21f3b744374b5bff9f39f5", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/b19683878d1905305a21f3b744374b5bff9f39f5", "message": "change assertions and remove unnecesary docu", "committedDate": "2020-05-28T07:28:07Z", "type": "commit"}, {"oid": "d7277dcf851ba298a00b8cfaf900ad33867ddd8f", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/d7277dcf851ba298a00b8cfaf900ad33867ddd8f", "message": "Remove the dependency to analysis-model", "committedDate": "2020-05-28T07:40:22Z", "type": "commit"}, {"oid": "3ae281a0539be517ba4123c1de5b06267517f2bf", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/3ae281a0539be517ba4123c1de5b06267517f2bf", "message": "Merge branch 'uiTestsFreestyleConfig' of github.com:kosiuk/warnings-ng-plugin into uiTestsFreestyleConfig", "committedDate": "2020-05-28T07:45:02Z", "type": "commit"}, {"oid": "6a1a86a8b18a1c801d77447f533cd2692d0c8380", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/6a1a86a8b18a1c801d77447f533cd2692d0c8380", "message": "Merge branch 'master' into uiTestsFreestyleConfig", "committedDate": "2020-05-28T07:49:39Z", "type": "commit"}, {"oid": "c4b9076da0a12ff10f3ad9949bde0e84bd259f8a", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/c4b9076da0a12ff10f3ad9949bde0e84bd259f8a", "message": "Update pom.xml", "committedDate": "2020-05-28T07:53:46Z", "type": "commit"}, {"oid": "d12d23c1e7bd243ed57bd121d882ece284896777", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/d12d23c1e7bd243ed57bd121d882ece284896777", "message": "Update pom.xml", "committedDate": "2020-05-28T07:54:20Z", "type": "commit"}, {"oid": "e9e4009232a4373b3f8d778e8178501d77b7c706", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/e9e4009232a4373b3f8d778e8178501d77b7c706", "message": "Update Documentation.md", "committedDate": "2020-05-28T07:58:53Z", "type": "commit"}, {"oid": "a310c5d125b6553043bb891e2f207174ef4ada8c", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/a310c5d125b6553043bb891e2f207174ef4ada8c", "message": "Fix Javadoc in SnippetGenerator", "committedDate": "2020-05-28T08:21:21Z", "type": "commit"}, {"oid": "342ce40f48352e67e42bd1b10990df99a22f59c5", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/342ce40f48352e67e42bd1b10990df99a22f59c5", "message": "Add qualityGate and filter check", "committedDate": "2020-05-28T08:57:18Z", "type": "commit"}, {"oid": "05a9719d3eaf7d9fc84b17b849cbf58d7d43e3f6", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/05a9719d3eaf7d9fc84b17b849cbf58d7d43e3f6", "message": "add more controls and javadoc", "committedDate": "2020-05-28T10:46:04Z", "type": "commit"}, {"oid": "a89f8018ed3629deb30f4818d364a19f57479fbe", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/a89f8018ed3629deb30f4818d364a19f57479fbe", "message": "Merge branch 'uiTestsFreestyleConfig' of github.com:kosiuk/warnings-ng-plugin into uiTestsFreestyleConfig", "committedDate": "2020-05-28T10:47:57Z", "type": "commit"}, {"oid": "84b0f37ca1530b9cabcb35f4cc74fde5c31b0a4a", "url": "https://github.com/jenkinsci/warnings-ng-plugin/commit/84b0f37ca1530b9cabcb35f4cc74fde5c31b0a4a", "message": "Merge branch 'master' into uiTestsFreestyleConfig", "committedDate": "2020-06-01T11:21:18Z", "type": "commit"}]}