{"pr_number": 3453, "pr_title": "HHH-14097 Fix redundant SQLs issue for fetch entity graph", "pr_createdAt": "2020-07-04T11:26:15Z", "pr_url": "https://github.com/hibernate/hibernate-orm/pull/3453", "timeline": [{"oid": "ee8244368eaab6c4df55bb2d4157ea15abb41a4b", "url": "https://github.com/hibernate/hibernate-orm/commit/ee8244368eaab6c4df55bb2d4157ea15abb41a4b", "message": "HHH-14097 fix bug that redundant SQLs might be issued for 'FETCH' entity graph", "committedDate": "2020-07-07T13:17:04Z", "type": "commit"}, {"oid": "ee8244368eaab6c4df55bb2d4157ea15abb41a4b", "url": "https://github.com/hibernate/hibernate-orm/commit/ee8244368eaab6c4df55bb2d4157ea15abb41a4b", "message": "HHH-14097 fix bug that redundant SQLs might be issued for 'FETCH' entity graph", "committedDate": "2020-07-07T13:17:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk4NTM3NQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3453#discussion_r450985375", "bodyText": "just a minor but I think the session.setFetchGraphLoadContext( null ); is redundant", "author": "dreab8", "createdAt": "2020-07-07T16:16:54Z", "path": "hibernate-core/src/main/java/org/hibernate/engine/internal/TwoPhaseLoad.java", "diffHunk": "@@ -206,62 +206,91 @@ public static void initializeEntityEntryLoadedState(\n \t\tString entityName = persister.getEntityName();\n \t\tString[] propertyNames = persister.getPropertyNames();\n \t\tfinal Type[] types = persister.getPropertyTypes();\n-\t\t\n-\t\tfinal GraphImplementor<?> fetchGraphContext = session.getFetchGraphLoadContext();\n-\t\t\n-\t\tfor ( int i = 0; i < hydratedState.length; i++ ) {\n-\t\t\tfinal Object value = hydratedState[i];\n-\t\t\tif ( debugEnabled ) {\n-\t\t\t\tLOG.debugf(\n-\t\t\t\t\t\"Processing attribute `%s` : value = %s\",\n-\t\t\t\t\tpropertyNames[i],\n-\t\t\t\t\tvalue == LazyPropertyInitializer.UNFETCHED_PROPERTY ? \"<un-fetched>\" : value == PropertyAccessStrategyBackRefImpl.UNKNOWN ? \"<unknown>\" : value\n-\t\t\t\t);\n-\t\t\t}\n \n-\t\t\tif ( value == LazyPropertyInitializer.UNFETCHED_PROPERTY ) {\n+\t\tGraphImplementor fetchGraphContext = session.getFetchGraphLoadContext();\n+\t\tif ( fetchGraphContext != null && !fetchGraphContext.appliesTo( entity.getClass() ) ) {\n+\t\t\tLOG.warnf( \"Entity graph specified is not applicable to the entity [%s]. Ignored.\", entity);\n+\t\t\tfetchGraphContext = null;\n+\t\t\tsession.setFetchGraphLoadContext( null );", "originalCommit": "ee8244368eaab6c4df55bb2d4157ea15abb41a4b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA1MDE0NQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3453#discussion_r451050145", "bodyText": "I think it is necessary because without setting it, the downstream will still try to locate some property as per the context grabbed from session.getFetchGraphLoadContext(), not from the local variable of fetchGraphContext. See the org.hibernate.engine.internal.TwoPhaseLoad#isEagerFetchGraph(SharedSessionContractImplementor session, String associationName, Type associationType) for details.\nI am sorry the current fetch entity graph implementation is so difficult to understand (and maintain). Luckily its status is improved much more in v6.", "author": "NathanQingyangXu", "createdAt": "2020-07-07T18:06:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk4NTM3NQ=="}], "type": "inlineReview", "revised_code": null}]}