{"pr_number": 3254, "pr_title": "HHH-12338 - Incorrect metamodel for basic collections", "pr_createdAt": "2020-02-21T08:14:18Z", "pr_url": "https://github.com/hibernate/hibernate-orm/pull/3254", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYwMjQ0Ng==", "url": "https://github.com/hibernate/hibernate-orm/pull/3254#discussion_r382602446", "bodyText": "One-shot usage of TypeUtils.containsAnnotation(Element, String) is okay, but multiple invocations won't be as efficient as\nAnnotationMirror annotationMirrors =  element.getAnnotationMirrors();\n// go about checking based on one-pass on the `AnnotationMirror` collection using methods from TypeUtil\n\nFurthermore, I do think we can reformat the above code in some way to improve readability. For instance, I spent quite some time figuring out how the parenthesis pairs match up above.\nIgnore the performance concern if irrelevant; but I do think we can improve the code as following\nif ( TypeUtils.containsAnnotation( element, Constants.CONVERT, Constants.HIBERNATE_TYPE ) && ! TypeUtils.containsAnnotation( element, Constants.ONE_TO_MANY, Constants.MANY_TO_MANY, Constants.ELEMENT_COLLECTION) ) {\n... ...\n}\n\nprovided performance concern could be ignored", "author": "NathanQingyangXu", "createdAt": "2020-02-21T14:14:27Z", "path": "tooling/metamodel-generator/src/main/java/org/hibernate/jpamodelgen/annotation/MetaAttributeGenerationVisitor.java", "diffHunk": "@@ -138,6 +138,16 @@ private AnnotationMetaAttribute createMetaCollectionAttribute(DeclaredType decla\n \t\t\t\taccessTypeInfo.setDefaultAccessType( entity.getEntityAccessTypeInfo().getAccessType() );\n \t\t\t}\n \t\t}\n+\t\tif (( TypeUtils.containsAnnotation( element, Constants.CONVERT ) ||\n+\t\t\t\tTypeUtils.containsAnnotation( element, Constants.HIBERNATE_TYPE ) ) &&\n+\t\t\t\t!isCollectionAssociation( element )\n+\t\t) {", "originalCommit": "c10d266ffa51b9a50d3617ee641d8005f6fd6451", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYwOTk2NQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3254#discussion_r382609965", "bodyText": "Sure thing. Feel free to modify it any way you want and push the commit.", "author": "vladmihalcea", "createdAt": "2020-02-21T14:28:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYwMjQ0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYzNTExNg==", "url": "https://github.com/hibernate/hibernate-orm/pull/3254#discussion_r382635116", "bodyText": "I don't think I have such rights, but I can create a PR after yours is merged.", "author": "NathanQingyangXu", "createdAt": "2020-02-21T15:12:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYwMjQ0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY0Mzg0Nw==", "url": "https://github.com/hibernate/hibernate-orm/pull/3254#discussion_r382643847", "bodyText": "I think you can fork my repository, and your change and send a Pull Request.", "author": "vladmihalcea", "createdAt": "2020-02-21T15:28:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYwMjQ0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3NzQ1OQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3254#discussion_r382677459", "bodyText": "Thanks for the tip, but I would approve the PR if you made the code cleaning as I proposed, :).", "author": "NathanQingyangXu", "createdAt": "2020-02-21T16:25:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYwMjQ0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY4NDk5OA==", "url": "https://github.com/hibernate/hibernate-orm/pull/3254#discussion_r382684998", "bodyText": "I don't know exactly what changes you want to make, so it's better if you cherry-pick my commit, add your changes and submit a new PR to the main fork.\nI'll close my PR once you do that.", "author": "vladmihalcea", "createdAt": "2020-02-21T16:39:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYwMjQ0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcwNjEwNw==", "url": "https://github.com/hibernate/hibernate-orm/pull/3254#discussion_r382706107", "bodyText": "Sorry for the misunderstanding. I think\nif (( TypeUtils.containsAnnotation( element, Constants.CONVERT ) ||\n\t\t\t\tTypeUtils.containsAnnotation( element, Constants.HIBERNATE_TYPE ) ) &&\n\t\t\t\t!isCollectionAssociation( element )\n\t\t) {\n\ncould be simplified dramatically by\nif ( TypeUtils.containsAnnotation( element, Constants.CONVERT, Constants.HIBERNATE_TYPE ) && ! TypeUtils.containsAnnotation( element, Constants.ONE_TO_MANY, Constants.MANY_TO_MANY, Constants.ELEMENT_COLLECTION) ) {", "author": "NathanQingyangXu", "createdAt": "2020-02-21T17:20:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYwMjQ0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0NjA1Mw==", "url": "https://github.com/hibernate/hibernate-orm/pull/3254#discussion_r382746053", "bodyText": "@NathanQingyangXu I pushed a new commit based on your changes.", "author": "vladmihalcea", "createdAt": "2020-02-21T18:48:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYwMjQ0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1NTYzMA==", "url": "https://github.com/hibernate/hibernate-orm/pull/3254#discussion_r382755630", "bodyText": "thanks. I approved. I would let other reviewer focus on business logic stuff.", "author": "NathanQingyangXu", "createdAt": "2020-02-21T19:09:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYwMjQ0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "abd55044946e6e6d4a252b2aad4f2411482df7aa", "chunk": "diff --git a/tooling/metamodel-generator/src/main/java/org/hibernate/jpamodelgen/annotation/MetaAttributeGenerationVisitor.java b/tooling/metamodel-generator/src/main/java/org/hibernate/jpamodelgen/annotation/MetaAttributeGenerationVisitor.java\nindex c5c115edc6..58226681d7 100644\n--- a/tooling/metamodel-generator/src/main/java/org/hibernate/jpamodelgen/annotation/MetaAttributeGenerationVisitor.java\n+++ b/tooling/metamodel-generator/src/main/java/org/hibernate/jpamodelgen/annotation/MetaAttributeGenerationVisitor.java\n\n@@ -138,10 +138,17 @@ public class MetaAttributeGenerationVisitor extends SimpleTypeVisitor6<Annotatio\n \t\t\t\taccessTypeInfo.setDefaultAccessType( entity.getEntityAccessTypeInfo().getAccessType() );\n \t\t\t}\n \t\t}\n-\t\tif (( TypeUtils.containsAnnotation( element, Constants.CONVERT ) ||\n-\t\t\t\tTypeUtils.containsAnnotation( element, Constants.HIBERNATE_TYPE ) ) &&\n-\t\t\t\t!isCollectionAssociation( element )\n-\t\t) {\n+\t\tif ( TypeUtils.containsAnnotation(\n+\t\t\t\telement,\n+\t\t\t\tConstants.BASIC,\n+\t\t\t\tConstants.CONVERT,\n+\t\t\t\tConstants.HIBERNATE_TYPE\n+\t\t) && !TypeUtils.containsAnnotation(\n+\t\t\t\telement,\n+\t\t\t\tConstants.ONE_TO_MANY,\n+\t\t\t\tConstants.MANY_TO_MANY,\n+\t\t\t\tConstants.ELEMENT_COLLECTION\n+\t\t) ) {\n \t\t\treturn new AnnotationMetaSingleAttribute(\n \t\t\t\t\tentity,\n \t\t\t\t\telement,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc3ODE4Ng==", "url": "https://github.com/hibernate/hibernate-orm/pull/3254#discussion_r503778186", "bodyText": "I don't think this is according to the JPA specification, but I didn't look into it to find a reference. My gut tells me, this should be fixed by annotating the target attribute with @Basic so IMO it should look like the following:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tif ( TypeUtils.containsAnnotation(\n          \n          \n            \n            \t\t\t\telement,\n          \n          \n            \n            \t\t\t\tConstants.CONVERT,\n          \n          \n            \n            \t\t\t\tConstants.HIBERNATE_TYPE\n          \n          \n            \n            \t\t) && !TypeUtils.containsAnnotation(\n          \n          \n            \n            \t\t\t\telement,\n          \n          \n            \n            \t\t\t\tConstants.ONE_TO_MANY,\n          \n          \n            \n            \t\t\t\tConstants.MANY_TO_MANY,\n          \n          \n            \n            \t\t\t\tConstants.ELEMENT_COLLECTION\n          \n          \n            \n            \t\t) ) {\n          \n          \n            \n            \t\t\treturn new AnnotationMetaSingleAttribute(\n          \n          \n            \n            \t\t\t\t\tentity,\n          \n          \n            \n            \t\t\t\t\telement,\n          \n          \n            \n            \t\t\t\t\tTypeUtils.toTypeString( declaredType )\n          \n          \n            \n            \t\t\t);\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \t\tif ( TypeUtils.containsAnnotation(\n          \n          \n            \n            \t\t\t\telement,\n          \n          \n            \n            \t\t\t\tConstants.CONVERT,\n          \n          \n            \n            \t\t\t\tConstants.HIBERNATE_TYPE,\n          \n          \n            \n            \t\t\t\tConstants.BASIC\n          \n          \n            \n            \t\t) ) {\n          \n          \n            \n            \t\t\treturn new AnnotationMetaSingleAttribute(\n          \n          \n            \n            \t\t\t\t\tentity,\n          \n          \n            \n            \t\t\t\t\telement,\n          \n          \n            \n            \t\t\t\t\tTypeUtils.toTypeString( declaredType )\n          \n          \n            \n            \t\t\t);\n          \n          \n            \n            \t\t}", "author": "beikov", "createdAt": "2020-10-13T08:50:22Z", "path": "tooling/metamodel-generator/src/main/java/org/hibernate/jpamodelgen/annotation/MetaAttributeGenerationVisitor.java", "diffHunk": "@@ -138,6 +138,22 @@ private AnnotationMetaAttribute createMetaCollectionAttribute(DeclaredType decla\n \t\t\t\taccessTypeInfo.setDefaultAccessType( entity.getEntityAccessTypeInfo().getAccessType() );\n \t\t\t}\n \t\t}\n+\t\tif ( TypeUtils.containsAnnotation(\n+\t\t\t\telement,\n+\t\t\t\tConstants.CONVERT,\n+\t\t\t\tConstants.HIBERNATE_TYPE\n+\t\t) && !TypeUtils.containsAnnotation(\n+\t\t\t\telement,\n+\t\t\t\tConstants.ONE_TO_MANY,\n+\t\t\t\tConstants.MANY_TO_MANY,\n+\t\t\t\tConstants.ELEMENT_COLLECTION\n+\t\t) ) {\n+\t\t\treturn new AnnotationMetaSingleAttribute(\n+\t\t\t\t\tentity,\n+\t\t\t\t\telement,\n+\t\t\t\t\tTypeUtils.toTypeString( declaredType )\n+\t\t\t);\n+\t\t}", "originalCommit": "12f4244f78d22f2ebbc03f25b7ef26f9728cb847", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "abd55044946e6e6d4a252b2aad4f2411482df7aa", "chunk": "diff --git a/tooling/metamodel-generator/src/main/java/org/hibernate/jpamodelgen/annotation/MetaAttributeGenerationVisitor.java b/tooling/metamodel-generator/src/main/java/org/hibernate/jpamodelgen/annotation/MetaAttributeGenerationVisitor.java\nindex bbd137e03c..58226681d7 100644\n--- a/tooling/metamodel-generator/src/main/java/org/hibernate/jpamodelgen/annotation/MetaAttributeGenerationVisitor.java\n+++ b/tooling/metamodel-generator/src/main/java/org/hibernate/jpamodelgen/annotation/MetaAttributeGenerationVisitor.java\n\n@@ -140,6 +140,7 @@ public class MetaAttributeGenerationVisitor extends SimpleTypeVisitor6<Annotatio\n \t\t}\n \t\tif ( TypeUtils.containsAnnotation(\n \t\t\t\telement,\n+\t\t\t\tConstants.BASIC,\n \t\t\t\tConstants.CONVERT,\n \t\t\t\tConstants.HIBERNATE_TYPE\n \t\t) && !TypeUtils.containsAnnotation(\n"}}, {"oid": "abd55044946e6e6d4a252b2aad4f2411482df7aa", "url": "https://github.com/hibernate/hibernate-orm/commit/abd55044946e6e6d4a252b2aad4f2411482df7aa", "message": "HHH-12338 - Incorrect metamodel for basic collections", "committedDate": "2021-03-04T11:29:37Z", "type": "commit"}, {"oid": "abd55044946e6e6d4a252b2aad4f2411482df7aa", "url": "https://github.com/hibernate/hibernate-orm/commit/abd55044946e6e6d4a252b2aad4f2411482df7aa", "message": "HHH-12338 - Incorrect metamodel for basic collections", "committedDate": "2021-03-04T11:29:37Z", "type": "forcePushed"}]}