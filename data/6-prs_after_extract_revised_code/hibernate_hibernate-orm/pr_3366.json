{"pr_number": 3366, "pr_title": "wip/6.0 implement @Where and @WhereJoinTable", "pr_createdAt": "2020-04-22T19:44:47Z", "pr_url": "https://github.com/hibernate/hibernate-orm/pull/3366", "timeline": [{"oid": "336d3d739e13de22ef21722af4de60ad39f5d5b8", "url": "https://github.com/hibernate/hibernate-orm/commit/336d3d739e13de22ef21722af4de60ad39f5d5b8", "message": "implement @where and @whereJoinTable", "committedDate": "2020-04-23T12:50:32Z", "type": "commit"}, {"oid": "336d3d739e13de22ef21722af4de60ad39f5d5b8", "url": "https://github.com/hibernate/hibernate-orm/commit/336d3d739e13de22ef21722af4de60ad39f5d5b8", "message": "implement @where and @whereJoinTable", "committedDate": "2020-04-23T12:50:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc4OTg3NQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3366#discussion_r413789875", "bodyText": "The above code change is to revert back erroneous changes in some previous PR.", "author": "NathanQingyangXu", "createdAt": "2020-04-23T12:53:02Z", "path": "hibernate-core/src/main/java/org/hibernate/cfg/annotations/CollectionBinder.java", "diffHunk": "@@ -990,7 +990,7 @@ private void bindFilters(boolean hasAssociationTable) {\n \t\tif ( filterJoinTables != null ) {\n \t\t\tfor (FilterJoinTable filter : filterJoinTables.value()) {\n \t\t\t\tif ( hasAssociationTable ) {\n-\t\t\t\t\tcollection.addManyToManyFilter(filter.name(), filter.condition(),\n+\t\t\t\t\tcollection.addFilter(filter.name(), filter.condition(),\n \t\t\t\t\t\t\tfilter.deduceAliasInjectionPoints(),\n \t\t\t\t\t\t\ttoAliasTableMap(filter.aliases()), toAliasEntityMap(filter.aliases()));\n \t\t\t\t}", "originalCommit": "336d3d739e13de22ef21722af4de60ad39f5d5b8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc5NDI3MA==", "url": "https://github.com/hibernate/hibernate-orm/pull/3366#discussion_r413794270", "bodyText": "The above change is simply to get rid of if ( loadQueryInfluencers.hasEnabledFilters() ) { for it will add @Where and @WhereJoinTable filter content as well. This is the gist of this PR.", "author": "NathanQingyangXu", "createdAt": "2020-04-23T12:59:09Z", "path": "hibernate-core/src/main/java/org/hibernate/loader/ast/internal/LoaderSelectBuilder.java", "diffHunk": "@@ -380,22 +381,20 @@ private void applyKeyRestriction(\n \t}\n \n \tprivate void applyFiltering(QuerySpec querySpec, TableGroup tableGroup, PluralAttributeMapping pluralAttributeMapping) {\n-\t\tif ( loadQueryInfluencers.hasEnabledFilters() ) {\n-\t\t\tfinal Joinable joinable = pluralAttributeMapping\n-\t\t\t\t\t.getCollectionDescriptor()\n-\t\t\t\t\t.getCollectionType()\n-\t\t\t\t\t.getAssociatedJoinable( creationContext.getSessionFactory() );\n-\t\t\tassert joinable instanceof AbstractCollectionPersister;\n-\t\t\tfinal String tableExpression = joinable.getTableName();\n-\t\t\tfinal String tableAlias = tableGroup.resolveTableReference( tableExpression ).getIdentificationVariable();\n-\t\t\tfinal Predicate filterPredicate = FilterHelper.createFilterPredicate(\n-\t\t\t\t\tloadQueryInfluencers,\n-\t\t\t\t\tjoinable,\n-\t\t\t\t\ttableAlias\n-\t\t\t);\n-\t\t\tif ( filterPredicate != null ) {\n-\t\t\t\tquerySpec.applyPredicate( filterPredicate );\n-\t\t\t}\n+\t\tfinal Joinable joinable = pluralAttributeMapping\n+\t\t\t\t.getCollectionDescriptor()\n+\t\t\t\t.getCollectionType()\n+\t\t\t\t.getAssociatedJoinable( creationContext.getSessionFactory() );\n+\t\tassert joinable instanceof AbstractCollectionPersister;\n+\t\tfinal String tableExpression = joinable.getTableName();\n+\t\tfinal String tableAlias = tableGroup.resolveTableReference( tableExpression ).getIdentificationVariable();\n+\t\tfinal Predicate filterPredicate = FilterHelper.createFilterPredicate(\n+\t\t\t\tloadQueryInfluencers,\n+\t\t\t\tjoinable,\n+\t\t\t\ttableAlias\n+\t\t);\n+\t\tif ( filterPredicate != null ) {\n+\t\t\tquerySpec.applyPredicate( filterPredicate );", "originalCommit": "336d3d739e13de22ef21722af4de60ad39f5d5b8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}