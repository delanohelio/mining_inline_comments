{"pr_number": 3436, "pr_title": "HHH-14075: Changes to loaders and TwoPhaseLoad to allow \"internal\" loading to be\u2026", "pr_createdAt": "2020-06-17T23:16:18Z", "pr_url": "https://github.com/hibernate/hibernate-orm/pull/3436", "timeline": [{"oid": "843395b6a6ab7d701b43f2092fcf06495410dc65", "url": "https://github.com/hibernate/hibernate-orm/commit/843395b6a6ab7d701b43f2092fcf06495410dc65", "message": "HHH-14075 : Changes to loaders and TwoPhaseLoad to allow \"internal\" loading to be reused by hibernate-reactive", "committedDate": "2020-06-17T23:11:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk0OTUxMw==", "url": "https://github.com/hibernate/hibernate-orm/pull/3436#discussion_r442949513", "bodyText": "If this method is exposed to the public, we might change the last parameter type to Iterable<? extends PreloadEventListener> to be more robust. Not 100% sure, though.", "author": "NathanQingyangXu", "createdAt": "2020-06-19T16:56:11Z", "path": "hibernate-core/src/main/java/org/hibernate/engine/internal/TwoPhaseLoad.java", "diffHunk": "@@ -229,18 +248,36 @@ else if ( value != PropertyAccessStrategyBackRefImpl.UNKNOWN ) {\n \n \t\t\t\t// we know value != LazyPropertyInitializer.UNFETCHED_PROPERTY\n \t\t\t\tBoolean overridingEager = getOverridingEager( session, entityName, propertyNames[i], types[i], debugEnabled );\n-\t\t\t\thydratedState[i] = types[i].resolve( value, session, entity, overridingEager );\n+\t\t\t\thydratedState[i] = types[i].isEntityType()\n+\t\t\t\t\t\t? entityResolver.resolve( (EntityType) types[i], value, session, entity, overridingEager )\n+\t\t\t\t\t\t: types[i].resolve( value, session, entity, overridingEager );\n \t\t\t}\n \t\t\telse {\n \t\t\t\tif ( debugEnabled ) {\n \t\t\t\t\tLOG.debugf( \"Skipping <unknown> attribute : `%s`\", propertyNames[i] );\n \t\t\t\t}\n \t\t\t}\n-\t\t\t\n+\n \t\t\tif ( session.getFetchGraphLoadContext() != fetchGraphContext ) {\n \t\t\t\tsession.setFetchGraphLoadContext( fetchGraphContext );\n \t\t\t}\n \t\t}\n+\t}\n+\n+\tpublic static void initializeEntityFromEntityEntryLoadedState(\n+\t\t\tfinal Object entity,\n+\t\t\tfinal EntityEntry entityEntry,\n+\t\t\tfinal boolean readOnly,\n+\t\t\tfinal SharedSessionContractImplementor session,\n+\t\t\tfinal PreLoadEvent preLoadEvent,\n+\t\t\tfinal Iterable<PreLoadEventListener> preLoadEventListeners) throws HibernateException {", "originalCommit": "843395b6a6ab7d701b43f2092fcf06495410dc65", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}