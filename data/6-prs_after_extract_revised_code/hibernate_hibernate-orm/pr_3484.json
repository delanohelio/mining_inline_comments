{"pr_number": 3484, "pr_title": "HHH-14124 Entity graph (fetch graph) is incorrectly applied to query results beyond the first one", "pr_createdAt": "2020-07-29T14:04:01Z", "pr_url": "https://github.com/hibernate/hibernate-orm/pull/3484", "timeline": [{"oid": "1879711f75592ef16eb218f71d20a83d3d442e0a", "url": "https://github.com/hibernate/hibernate-orm/commit/1879711f75592ef16eb218f71d20a83d3d442e0a", "message": "HHH-14124 Work around side-effects of TwoPhaseLoad.initializeEntity", "committedDate": "2020-07-29T11:27:00Z", "type": "commit"}, {"oid": "f82826b81d1a9a0cf2aeaaa8a1642108625abb7d", "url": "https://github.com/hibernate/hibernate-orm/commit/f82826b81d1a9a0cf2aeaaa8a1642108625abb7d", "message": "HHH-14124 Avoid too many list allocations when hydrating query results\n\nI suspect the original goal of having a single list of hydrated objects\nfor all rows was to avoid instantiating one list per row, but we did\njust that in the fix in the last commit.\n\nThis introduces a hack to signal that we're starting to process a new\nrow while still keeping a flat, single-list structure: we inserting\nnull elements in the list of hydrated objects.\n\nThis is admittedly very ugly, but it's the only solution I can come up\nwith if we want to keep the number of memory allocations similar to what\nwe used to have. And hopefully this code will disappear in ORM 6.0.", "committedDate": "2020-07-29T11:27:01Z", "type": "commit"}, {"oid": "5656622ed54fdd707ae3fec1e78b47af128fb363", "url": "https://github.com/hibernate/hibernate-orm/commit/5656622ed54fdd707ae3fec1e78b47af128fb363", "message": "HHH-14124 Test that the FETCH entitygraph semantic overrides EAGER associations to LAZY", "committedDate": "2020-07-29T12:31:18Z", "type": "commit"}, {"oid": "ea5825bc943796305f873548b0c92b81046a4b50", "url": "https://github.com/hibernate/hibernate-orm/commit/ea5825bc943796305f873548b0c92b81046a4b50", "message": "HHH-14124 Test that the FETCH entitygraph semantic overrides EAGER associations to LAZY for all results", "committedDate": "2020-07-29T12:31:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM1NjMzMg==", "url": "https://github.com/hibernate/hibernate-orm/pull/3484#discussion_r462356332", "bodyText": "It seems a good catch. I am the community developer who implemented 'fetch graph' in v5. Also I implemented entity graph fully in v6. Yeah, I agree. The current implementation is buggy and difficult to maintain. That is because v5 infrastructure and design makes it difficult to implement and that is why 'fetch graph' was not implemented for a long time. The status has been changed in v6 and I think we have implemented the whole entity graph elegantly there already.\nI would take a look at the PR and thanks for the two options to choose from. However, I am community contributor and have very limited free cycles out of my daily job. Seems an endless fixing of entity graph in v5, :(.", "author": "NathanQingyangXu", "createdAt": "2020-07-29T14:45:25Z", "path": "hibernate-core/src/main/java/org/hibernate/loader/Loader.java", "diffHunk": "@@ -68,6 +68,7 @@\n import org.hibernate.event.spi.PostLoadEvent;", "originalCommit": "ea5825bc943796305f873548b0c92b81046a4b50", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM1ODAzNA==", "url": "https://github.com/hibernate/hibernate-orm/pull/3484#discussion_r462358034", "bodyText": "Right, I also noticed that a better solution to handle fetch graphs would require very significant changes to ORM 5. That's why I didn't even try :)", "author": "yrodiere", "createdAt": "2020-07-29T14:47:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM1NjMzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2MjcwMQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3484#discussion_r462362701", "bodyText": "I would prefer non-intrusive approach to fix the issue without much performance cost. The improvement in v6 is we have complete access to the navigation role path of the entity to be loaded. There might be such role info already in TwoPhaseLoad, though no time to investigate. Another concern is to avoid merging the PR into v6 for the entity graph implementation is totally changed (TwoPhaseLoad is phased out in v6 as well) so the more centralized code changes, the better.", "author": "NathanQingyangXu", "createdAt": "2020-07-29T14:53:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM1NjMzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM3Mjg2Mg==", "url": "https://github.com/hibernate/hibernate-orm/pull/3484#discussion_r462372862", "bodyText": "Would you mind my creating another PR if I can solve the issue without changing Loader or creating any new data structure (reusing existing info instead)? Not necessarily possible. Just in case.", "author": "NathanQingyangXu", "createdAt": "2020-07-29T15:07:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM1NjMzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQxODE0OQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3484#discussion_r462418149", "bodyText": "I wouldn't mind as long as my tests still pass, but I'd rather you create another ticket and a follow-up PR if you want to make more changes to address more problems. You know, one step at a time.\nI also think it might not be the best use of your time, since 6.0 is the future, but that's your time :)", "author": "yrodiere", "createdAt": "2020-07-29T16:10:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM1NjMzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU0Njc0MA==", "url": "https://github.com/hibernate/hibernate-orm/pull/3484#discussion_r462546740", "bodyText": "I tried to create my PR but failed. Especially there is no way to even know some hydrated object is of root entity or not (the relationship among them is totally lost in TwoPhaseLoad class). Seems no better way to solve the issue. Great job and thanks a ton.", "author": "NathanQingyangXu", "createdAt": "2020-07-29T19:48:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM1NjMzMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwNzM5Mw==", "url": "https://github.com/hibernate/hibernate-orm/pull/3484#discussion_r462407393", "bodyText": "Did you conduct some MPH benchmark comparison to justify the hack? It would be great to avoid such hack for the entity graph implementation logic has been so difficult to understand and maintain.", "author": "NathanQingyangXu", "createdAt": "2020-07-29T15:55:00Z", "path": "hibernate-core/src/main/java/org/hibernate/loader/Loader.java", "diffHunk": "@@ -1215,8 +1242,13 @@ private void initializeEntitiesAndCollections(\n \t\t\t}\n \t\t}\n \n-\t\tif ( hydratedObjects != null ) {\n-\t\t\tfor ( Object hydratedObject : hydratedObjects ) {\n+\t\tif ( nullSeparatedHydratedObjects != null ) {\n+\t\t\tfor ( Object hydratedObject : nullSeparatedHydratedObjects ) {\n+\t\t\t\tif ( hydratedObject == null ) {\n+\t\t\t\t\t// This is a hack to signal that we're starting to process a new row\n+\t\t\t\t\t// Ignore\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}", "originalCommit": "ea5825bc943796305f873548b0c92b81046a4b50", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQxNjI1MQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3484#discussion_r462416251", "bodyText": "I did not. I'm just considering that keeping the same data structure (a List) and adding a few elements is less change than moving to a List<List<?>>. I'm not saying it's the same, mind you. Just that it's the closest I can get.", "author": "yrodiere", "createdAt": "2020-07-29T16:07:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwNzM5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ1NjMwNQ==", "url": "https://github.com/hibernate/hibernate-orm/pull/3484#discussion_r462456305", "bodyText": "I am not against such hack as long as it turns out to be the hot spot. Also, the fetch graph impl in v5 has been based on hack already. Overall the PR looks good from a quick review. I might focus on it more later in my off hours to finalize the review. Thanks for the bug reporting and quick fixing.", "author": "NathanQingyangXu", "createdAt": "2020-07-29T17:12:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQwNzM5Mw=="}], "type": "inlineReview", "revised_code": null}]}