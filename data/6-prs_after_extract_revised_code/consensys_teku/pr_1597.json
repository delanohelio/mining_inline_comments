{"pr_number": 1597, "pr_title": "Prune Eth1DataCache based on latest block timestamp", "pr_createdAt": "2020-04-15T22:25:31Z", "pr_url": "https://github.com/ConsenSys/teku/pull/1597", "timeline": [{"oid": "73d93c9c4c10a0432661fee3c5cd8eb03ba8016b", "url": "https://github.com/ConsenSys/teku/commit/73d93c9c4c10a0432661fee3c5cd8eb03ba8016b", "message": "Prune Eth1DataCache based on latest block timestamp rather than tick or slot events.", "committedDate": "2020-04-15T22:23:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE4NDUxMQ==", "url": "https://github.com/ConsenSys/teku/pull/1597#discussion_r409184511", "bodyText": "This one I do not understand the reasoning well but I do get that a buffer is necessary anyway.", "author": "cemozerr", "createdAt": "2020-04-15T23:04:50Z", "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/Eth1DataCache.java", "diffHunk": "@@ -113,13 +80,34 @@ public Eth1Data get_eth1_vote(BeaconState state) {\n     return vote.orElse(defaultVote);\n   }\n \n-  private NavigableMap<UnsignedLong, Eth1Data> getVotesToConsider() {\n-    return eth1ChainCache.subMap(getSpecRangeLowerBound(), true, getSpecRangeUpperBound(), true);\n+  private NavigableMap<UnsignedLong, Eth1Data> getVotesToConsider(final UnsignedLong slot) {\n+    return eth1ChainCache.subMap(\n+        getSpecRangeLowerBound(slot), true, getSpecRangeUpperBound(slot), true);\n+  }\n+\n+  private UnsignedLong calculateCacheDuration() {\n+    // Worst case we're in the very last moment of the current slot\n+    long cacheDurationSeconds = SECONDS_PER_SLOT;\n+\n+    // Worst case this slot is at the very end of the current voting period\n+    cacheDurationSeconds += (EPOCHS_PER_ETH1_VOTING_PERIOD * SLOTS_PER_EPOCH * SECONDS_PER_SLOT);\n+\n+    // We need 2 * ETH1_FOLLOW_DISTANCE prior to that\n+    cacheDurationSeconds +=\n+        SECONDS_PER_ETH1_BLOCK.longValue() * ETH1_FOLLOW_DISTANCE.longValue() * 2;\n+\n+    // And we want to be able to create blocks for at least the past epoch", "originalCommit": "73d93c9c4c10a0432661fee3c5cd8eb03ba8016b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE4NjA3Nw==", "url": "https://github.com/ConsenSys/teku/pull/1597#discussion_r409186077", "bodyText": "The validator APIs allow the validator to specify the slot they need to create a block for, so there's no guarantee that the block we're building is at our current node slot - it could be somewhere before that (or after but that doesn't affect this).", "author": "ajsutton", "createdAt": "2020-04-15T23:09:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE4NDUxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "be5a83dc8e732355adbf5a547b29cef3f5e9483f", "chunk": "diff --git a/validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/Eth1DataCache.java b/validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/Eth1DataCache.java\nindex 7980b460f0..622d262dbf 100644\n--- a/validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/Eth1DataCache.java\n+++ b/validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/Eth1DataCache.java\n\n@@ -92,9 +92,9 @@ public class Eth1DataCache {\n     // Worst case this slot is at the very end of the current voting period\n     cacheDurationSeconds += (EPOCHS_PER_ETH1_VOTING_PERIOD * SLOTS_PER_EPOCH * SECONDS_PER_SLOT);\n \n-    // We need 2 * ETH1_FOLLOW_DISTANCE prior to that\n-    cacheDurationSeconds +=\n-        SECONDS_PER_ETH1_BLOCK.longValue() * ETH1_FOLLOW_DISTANCE.longValue() * 2;\n+    // We need 2 * ETH1_FOLLOW_DISTANCE prior to that but the blocks we get from Eth1DataManager are\n+    // already ETH1_FOLLOW_DISTANCE behind head and the current time is taken from that.\n+    cacheDurationSeconds += SECONDS_PER_ETH1_BLOCK.longValue() * ETH1_FOLLOW_DISTANCE.longValue();\n \n     // And we want to be able to create blocks for at least the past epoch\n     cacheDurationSeconds += SLOTS_PER_EPOCH * SECONDS_PER_SLOT;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE4ODY2MA==", "url": "https://github.com/ConsenSys/teku/pull/1597#discussion_r409188660", "bodyText": "I think this only needs to be 1 * ETH1_FOLLOW_DISTANCE prior, because the latest block events coming from Eth1DataManager already have time, t = (t - (Eth1 Follow Distance Time) + Request Buffer))", "author": "cemozerr", "createdAt": "2020-04-15T23:17:14Z", "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/Eth1DataCache.java", "diffHunk": "@@ -113,13 +80,34 @@ public Eth1Data get_eth1_vote(BeaconState state) {\n     return vote.orElse(defaultVote);\n   }\n \n-  private NavigableMap<UnsignedLong, Eth1Data> getVotesToConsider() {\n-    return eth1ChainCache.subMap(getSpecRangeLowerBound(), true, getSpecRangeUpperBound(), true);\n+  private NavigableMap<UnsignedLong, Eth1Data> getVotesToConsider(final UnsignedLong slot) {\n+    return eth1ChainCache.subMap(\n+        getSpecRangeLowerBound(slot), true, getSpecRangeUpperBound(slot), true);\n+  }\n+\n+  private UnsignedLong calculateCacheDuration() {\n+    // Worst case we're in the very last moment of the current slot\n+    long cacheDurationSeconds = SECONDS_PER_SLOT;\n+\n+    // Worst case this slot is at the very end of the current voting period\n+    cacheDurationSeconds += (EPOCHS_PER_ETH1_VOTING_PERIOD * SLOTS_PER_EPOCH * SECONDS_PER_SLOT);\n+\n+    // We need 2 * ETH1_FOLLOW_DISTANCE prior to that\n+    cacheDurationSeconds +=", "originalCommit": "73d93c9c4c10a0432661fee3c5cd8eb03ba8016b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE4OTY4MA==", "url": "https://github.com/ConsenSys/teku/pull/1597#discussion_r409189680", "bodyText": "Good spot, fixed.", "author": "ajsutton", "createdAt": "2020-04-15T23:20:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE4ODY2MA=="}], "type": "inlineReview", "revised_code": {"commit": "be5a83dc8e732355adbf5a547b29cef3f5e9483f", "chunk": "diff --git a/validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/Eth1DataCache.java b/validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/Eth1DataCache.java\nindex 7980b460f0..622d262dbf 100644\n--- a/validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/Eth1DataCache.java\n+++ b/validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/Eth1DataCache.java\n\n@@ -92,9 +92,9 @@ public class Eth1DataCache {\n     // Worst case this slot is at the very end of the current voting period\n     cacheDurationSeconds += (EPOCHS_PER_ETH1_VOTING_PERIOD * SLOTS_PER_EPOCH * SECONDS_PER_SLOT);\n \n-    // We need 2 * ETH1_FOLLOW_DISTANCE prior to that\n-    cacheDurationSeconds +=\n-        SECONDS_PER_ETH1_BLOCK.longValue() * ETH1_FOLLOW_DISTANCE.longValue() * 2;\n+    // We need 2 * ETH1_FOLLOW_DISTANCE prior to that but the blocks we get from Eth1DataManager are\n+    // already ETH1_FOLLOW_DISTANCE behind head and the current time is taken from that.\n+    cacheDurationSeconds += SECONDS_PER_ETH1_BLOCK.longValue() * ETH1_FOLLOW_DISTANCE.longValue();\n \n     // And we want to be able to create blocks for at least the past epoch\n     cacheDurationSeconds += SLOTS_PER_EPOCH * SECONDS_PER_SLOT;\n"}}, {"oid": "be5a83dc8e732355adbf5a547b29cef3f5e9483f", "url": "https://github.com/ConsenSys/teku/commit/be5a83dc8e732355adbf5a547b29cef3f5e9483f", "message": "Only need 1 * ETH1_FOLLOW_DISTANCE.", "committedDate": "2020-04-15T23:20:01Z", "type": "commit"}]}