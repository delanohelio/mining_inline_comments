{"pr_number": 1179, "pr_title": "#1158 add openApi documentation to beacon head handler", "pr_createdAt": "2020-02-17T03:22:37Z", "pr_url": "https://github.com/ConsenSys/teku/pull/1179", "timeline": [{"oid": "b94f6927738aae5f3c4aeec676bc660e29c71c26", "url": "https://github.com/ConsenSys/teku/commit/b94f6927738aae5f3c4aeec676bc660e29c71c26", "message": "#1158 add openApi documentation to beacon head handler\n\nAdd an object level abstraction for the response object, so that openApi can render what the response will be similar to. Not sure if the builder pattern is overkill, but having private member variables and getters didnt output in openApi.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-02-17T03:20:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTk4MTgyNQ==", "url": "https://github.com/ConsenSys/teku/pull/1179#discussion_r379981825", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  summary = \"Get the head of the beacon chain from the nodes perspective.\",\n          \n          \n            \n                  summary = \"Get the head of the beacon chain from the node's perspective.\",", "author": "macfarla", "createdAt": "2020-02-17T04:31:55Z", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconHeadHandler.java", "diffHunk": "@@ -13,38 +13,64 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n-import com.google.common.primitives.UnsignedLong;\n-import java.util.HashMap;\n-import java.util.Map;\n+import static javax.servlet.http.HttpServletResponse.SC_NO_CONTENT;\n+\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n import org.apache.tuweni.bytes.Bytes32;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler;\n+import tech.pegasys.artemis.beaconrestapi.schema.BeaconHeadResponse;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n \n-public class BeaconHeadHandler implements BeaconRestApiHandler {\n+public class BeaconHeadHandler implements Handler {\n+  private final Logger LOG = LogManager.getLogger();\n+  public static final String ROUTE = \"/beacon/head\";\n \n   private final ChainStorageClient client;\n \n   public BeaconHeadHandler(ChainStorageClient client) {\n     this.client = client;\n   }\n \n-  @Override\n-  public String getPath() {\n-    return \"/beacon/head\";\n+  private BeaconHeadResponse getBeaconHead() {\n+    Bytes32 headBlockRoot = client.getBestBlockRoot();\n+    if (headBlockRoot == null) {\n+      return null;\n+    }\n+    Bytes32 headStateRoot = client.getBestBlockRootState().hash_tree_root();\n+    return BeaconHeadResponse.builder()\n+        .best_slot(client.getBestSlot().longValue())\n+        .block_root(headBlockRoot.toHexString())\n+        .state_root(headStateRoot.toHexString())\n+        .build();\n   }\n \n+  @OpenApi(\n+      path = BeaconHeadHandler.ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get the head of the beacon chain from the nodes perspective.\",", "originalCommit": "b94f6927738aae5f3c4aeec676bc660e29c71c26", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d491c335cf7eb7416d8ec46bb84da3e2e16bd0ee", "chunk": "diff --git a/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconHeadHandler.java b/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconHeadHandler.java\nindex 10c04f24f9..524ea5349a 100644\n--- a/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconHeadHandler.java\n+++ b/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconHeadHandler.java\n\n@@ -54,7 +54,7 @@ public class BeaconHeadHandler implements Handler {\n   @OpenApi(\n       path = BeaconHeadHandler.ROUTE,\n       method = HttpMethod.GET,\n-      summary = \"Get the head of the beacon chain from the nodes perspective.\",\n+      summary = \"Get the head of the beacon chain from the node's perspective.\",\n       tags = {\"Beacon\"},\n       description = \"Requests the context of the best slot and head block from the beacon node.\",\n       responses = {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTk4MTk4MA==", "url": "https://github.com/ConsenSys/teku/pull/1179#discussion_r379981980", "bodyText": "slot here but best_slot on the builder", "author": "macfarla", "createdAt": "2020-02-17T04:32:58Z", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/schema/BeaconHeadResponse.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi.schema;\n+\n+public class BeaconHeadResponse {\n+  public final long slot;", "originalCommit": "b94f6927738aae5f3c4aeec676bc660e29c71c26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM1NjIzOQ==", "url": "https://github.com/ConsenSys/teku/pull/1179#discussion_r380356239", "bodyText": "fair call, i'll rename it. I was kind of more interested in whether I should be doing a builder at all, but all feedback welcome.", "author": "rolfyone", "createdAt": "2020-02-17T20:30:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTk4MTk4MA=="}], "type": "inlineReview", "revised_code": {"commit": "c80b9bab671f22abbcc817884e87d0fdcc34b09d", "chunk": "diff --git a/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/schema/BeaconHeadResponse.java b/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/schema/BeaconHeadResponse.java\nindex 60bb7c046a..c59ffe3561 100644\n--- a/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/schema/BeaconHeadResponse.java\n+++ b/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/schema/BeaconHeadResponse.java\n\n@@ -23,14 +23,14 @@ public class BeaconHeadResponse {\n   }\n \n   public static class Builder {\n-    private long best_slot;\n+    private long slot;\n     private String block_root;\n     private String state_root;\n \n     private Builder() {}\n \n-    public Builder best_slot(long slot) {\n-      this.best_slot = slot;\n+    public Builder slot(long slot) {\n+      this.slot = slot;\n \n       return this;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTk4MjAyOQ==", "url": "https://github.com/ConsenSys/teku/pull/1179#discussion_r379982029", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void RestApiShouldHaveBeaconHeadEndpoint() throws Exception {\n          \n          \n            \n              public void restApiShouldHaveBeaconHeadEndpoint() throws Exception {", "author": "macfarla", "createdAt": "2020-02-17T04:33:23Z", "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApiTest.java", "diffHunk": "@@ -57,4 +58,12 @@ public void RestApiShouldHaveVersionEndpoint() throws Exception {\n \n     verify(mockApp).get(eq(VersionHandler.ROUTE), any(VersionHandler.class));\n   }\n+\n+  @Test\n+  public void RestApiShouldHaveBeaconHeadEndpoint() throws Exception {", "originalCommit": "b94f6927738aae5f3c4aeec676bc660e29c71c26", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0530d2e95e41d3cfa299b289d22efce012a39924", "chunk": "diff --git a/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApiTest.java b/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApiTest.java\nindex 88bfbb86b9..6abf747eb9 100644\n--- a/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApiTest.java\n+++ b/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApiTest.java\n\n@@ -60,7 +60,7 @@ class BeaconRestApiTest {\n   }\n \n   @Test\n-  public void RestApiShouldHaveBeaconHeadEndpoint() throws Exception {\n+  public void restApiShouldHaveBeaconHeadEndpoint() throws Exception {\n     when(mockApp.server()).thenReturn(mockServer);\n     new BeaconRestApi(storageClient, null, null, THE_PORT, mockApp);\n \n"}}, {"oid": "0530d2e95e41d3cfa299b289d22efce012a39924", "url": "https://github.com/ConsenSys/teku/commit/0530d2e95e41d3cfa299b289d22efce012a39924", "message": "Update data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApiTest.java\n\nCo-Authored-By: Sally MacFarlane <sally.macfarlane@consensys.net>", "committedDate": "2020-02-17T05:03:51Z", "type": "commit"}, {"oid": "d491c335cf7eb7416d8ec46bb84da3e2e16bd0ee", "url": "https://github.com/ConsenSys/teku/commit/d491c335cf7eb7416d8ec46bb84da3e2e16bd0ee", "message": "Update data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconHeadHandler.java\n\nCo-Authored-By: Sally MacFarlane <sally.macfarlane@consensys.net>", "committedDate": "2020-02-17T05:03:58Z", "type": "commit"}, {"oid": "c80b9bab671f22abbcc817884e87d0fdcc34b09d", "url": "https://github.com/ConsenSys/teku/commit/c80b9bab671f22abbcc817884e87d0fdcc34b09d", "message": "#1158 changes per review comments.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-02-17T20:30:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM2NTE3Mw==", "url": "https://github.com/ConsenSys/teku/pull/1179#discussion_r380365173", "bodyText": "I thought we were going to separate the logic for getting the answer from the Javalin HTTP handling?", "author": "ajsutton", "createdAt": "2020-02-17T21:03:56Z", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconHeadHandler.java", "diffHunk": "@@ -13,38 +13,64 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n-import com.google.common.primitives.UnsignedLong;\n-import java.util.HashMap;\n-import java.util.Map;\n+import static javax.servlet.http.HttpServletResponse.SC_NO_CONTENT;\n+\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n import org.apache.tuweni.bytes.Bytes32;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler;\n+import tech.pegasys.artemis.beaconrestapi.schema.BeaconHeadResponse;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n \n-public class BeaconHeadHandler implements BeaconRestApiHandler {\n+public class BeaconHeadHandler implements Handler {\n+  private final Logger LOG = LogManager.getLogger();\n+  public static final String ROUTE = \"/beacon/head\";\n \n   private final ChainStorageClient client;\n \n   public BeaconHeadHandler(ChainStorageClient client) {\n     this.client = client;\n   }\n \n-  @Override\n-  public String getPath() {\n-    return \"/beacon/head\";\n+  private BeaconHeadResponse getBeaconHead() {\n+    Bytes32 headBlockRoot = client.getBestBlockRoot();\n+    if (headBlockRoot == null) {\n+      return null;\n+    }\n+    Bytes32 headStateRoot = client.getBestBlockRootState().hash_tree_root();\n+    return BeaconHeadResponse.builder()\n+        .slot(client.getBestSlot().longValue())\n+        .block_root(headBlockRoot.toHexString())\n+        .state_root(headStateRoot.toHexString())\n+        .build();\n   }", "originalCommit": "c80b9bab671f22abbcc817884e87d0fdcc34b09d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "609bf8091979229276b3999259a32389e96c54d5", "chunk": "diff --git a/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconHeadHandler.java b/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconHeadHandler.java\nindex c5f79776e7..042b8b4c57 100644\n--- a/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconHeadHandler.java\n+++ b/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconHeadHandler.java\n\n@@ -44,11 +44,7 @@ public class BeaconHeadHandler implements Handler {\n       return null;\n     }\n     Bytes32 headStateRoot = client.getBestBlockRootState().hash_tree_root();\n-    return BeaconHeadResponse.builder()\n-        .slot(client.getBestSlot().longValue())\n-        .block_root(headBlockRoot.toHexString())\n-        .state_root(headStateRoot.toHexString())\n-        .build();\n+    return new BeaconHeadResponse(client.getBestSlot(), headBlockRoot, headStateRoot);\n   }\n \n   @OpenApi(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQxMDM0Mw==", "url": "https://github.com/ConsenSys/teku/pull/1179#discussion_r380410343", "bodyText": "Are we able to provide a message to explain what this status means? It won't be obvious to people that you'd get no content pre-genesis.", "author": "ajsutton", "createdAt": "2020-02-18T00:54:23Z", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconHeadHandler.java", "diffHunk": "@@ -13,38 +13,64 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n-import com.google.common.primitives.UnsignedLong;\n-import java.util.HashMap;\n-import java.util.Map;\n+import static javax.servlet.http.HttpServletResponse.SC_NO_CONTENT;\n+\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n import org.apache.tuweni.bytes.Bytes32;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler;\n+import tech.pegasys.artemis.beaconrestapi.schema.BeaconHeadResponse;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n \n-public class BeaconHeadHandler implements BeaconRestApiHandler {\n+public class BeaconHeadHandler implements Handler {\n+  private final Logger LOG = LogManager.getLogger();\n+  public static final String ROUTE = \"/beacon/head\";\n \n   private final ChainStorageClient client;\n \n   public BeaconHeadHandler(ChainStorageClient client) {\n     this.client = client;\n   }\n \n-  @Override\n-  public String getPath() {\n-    return \"/beacon/head\";\n+  private BeaconHeadResponse getBeaconHead() {\n+    Bytes32 headBlockRoot = client.getBestBlockRoot();\n+    if (headBlockRoot == null) {\n+      return null;\n+    }\n+    Bytes32 headStateRoot = client.getBestBlockRootState().hash_tree_root();\n+    return BeaconHeadResponse.builder()\n+        .slot(client.getBestSlot().longValue())\n+        .block_root(headBlockRoot.toHexString())\n+        .state_root(headStateRoot.toHexString())\n+        .build();\n   }\n \n+  @OpenApi(\n+      path = BeaconHeadHandler.ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get the head of the beacon chain from the node's perspective.\",\n+      tags = {\"Beacon\"},\n+      description = \"Requests the context of the best slot and head block from the beacon node.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = \"200\",\n+            content = @OpenApiContent(from = BeaconHeadResponse.class)),\n+        @OpenApiResponse(status = \"204\")", "originalCommit": "c80b9bab671f22abbcc817884e87d0fdcc34b09d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "609bf8091979229276b3999259a32389e96c54d5", "chunk": "diff --git a/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconHeadHandler.java b/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconHeadHandler.java\nindex c5f79776e7..042b8b4c57 100644\n--- a/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconHeadHandler.java\n+++ b/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconHeadHandler.java\n\n@@ -44,11 +44,7 @@ public class BeaconHeadHandler implements Handler {\n       return null;\n     }\n     Bytes32 headStateRoot = client.getBestBlockRootState().hash_tree_root();\n-    return BeaconHeadResponse.builder()\n-        .slot(client.getBestSlot().longValue())\n-        .block_root(headBlockRoot.toHexString())\n-        .state_root(headStateRoot.toHexString())\n-        .build();\n+    return new BeaconHeadResponse(client.getBestSlot(), headBlockRoot, headStateRoot);\n   }\n \n   @OpenApi(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQxMTMxNQ==", "url": "https://github.com/ConsenSys/teku/pull/1179#discussion_r380411315", "bodyText": "Suspect this should be trace level.  It's going to happen on every call pre-genesis and is pretty easy to detect as you get a no content response back.", "author": "ajsutton", "createdAt": "2020-02-18T01:00:03Z", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconHeadHandler.java", "diffHunk": "@@ -13,38 +13,64 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n-import com.google.common.primitives.UnsignedLong;\n-import java.util.HashMap;\n-import java.util.Map;\n+import static javax.servlet.http.HttpServletResponse.SC_NO_CONTENT;\n+\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n import org.apache.tuweni.bytes.Bytes32;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler;\n+import tech.pegasys.artemis.beaconrestapi.schema.BeaconHeadResponse;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n \n-public class BeaconHeadHandler implements BeaconRestApiHandler {\n+public class BeaconHeadHandler implements Handler {\n+  private final Logger LOG = LogManager.getLogger();\n+  public static final String ROUTE = \"/beacon/head\";\n \n   private final ChainStorageClient client;\n \n   public BeaconHeadHandler(ChainStorageClient client) {\n     this.client = client;\n   }\n \n-  @Override\n-  public String getPath() {\n-    return \"/beacon/head\";\n+  private BeaconHeadResponse getBeaconHead() {\n+    Bytes32 headBlockRoot = client.getBestBlockRoot();\n+    if (headBlockRoot == null) {\n+      return null;\n+    }\n+    Bytes32 headStateRoot = client.getBestBlockRootState().hash_tree_root();\n+    return BeaconHeadResponse.builder()\n+        .slot(client.getBestSlot().longValue())\n+        .block_root(headBlockRoot.toHexString())\n+        .state_root(headStateRoot.toHexString())\n+        .build();\n   }\n \n+  @OpenApi(\n+      path = BeaconHeadHandler.ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get the head of the beacon chain from the node's perspective.\",\n+      tags = {\"Beacon\"},\n+      description = \"Requests the context of the best slot and head block from the beacon node.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = \"200\",\n+            content = @OpenApiContent(from = BeaconHeadResponse.class)),\n+        @OpenApiResponse(status = \"204\")\n+      })\n   @Override\n-  public Object handleRequest(RequestParams params) {\n-    Bytes32 head_block_root = client.getBestBlockRoot();\n-    if (head_block_root == null) {\n-      return null;\n+  public void handle(Context ctx) throws Exception {\n+    BeaconHeadResponse result = getBeaconHead();\n+    if (result == null) {\n+      LOG.debug(\"Failed to get beacon head\");", "originalCommit": "c80b9bab671f22abbcc817884e87d0fdcc34b09d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA3MjE5OQ==", "url": "https://github.com/ConsenSys/teku/pull/1179#discussion_r381072199", "bodyText": "ok", "author": "rolfyone", "createdAt": "2020-02-19T04:32:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQxMTMxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "609bf8091979229276b3999259a32389e96c54d5", "chunk": "diff --git a/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconHeadHandler.java b/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconHeadHandler.java\nindex c5f79776e7..042b8b4c57 100644\n--- a/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconHeadHandler.java\n+++ b/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconHeadHandler.java\n\n@@ -44,11 +44,7 @@ public class BeaconHeadHandler implements Handler {\n       return null;\n     }\n     Bytes32 headStateRoot = client.getBestBlockRootState().hash_tree_root();\n-    return BeaconHeadResponse.builder()\n-        .slot(client.getBestSlot().longValue())\n-        .block_root(headBlockRoot.toHexString())\n-        .state_root(headStateRoot.toHexString())\n-        .build();\n+    return new BeaconHeadResponse(client.getBestSlot(), headBlockRoot, headStateRoot);\n   }\n \n   @OpenApi(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQxNTY1Mg==", "url": "https://github.com/ConsenSys/teku/pull/1179#discussion_r380415652", "bodyText": "I'm not sure I'd bother with a builder in this case.  It's a lot of extra boiler plate code for not a lot of value.  Just using the constructor directly is just as clear.  It also means that the compiler won't detect cases where fields are not being set which makes adding new fields in the future more error prone.", "author": "ajsutton", "createdAt": "2020-02-18T01:24:48Z", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/schema/BeaconHeadResponse.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi.schema;\n+\n+public class BeaconHeadResponse {\n+  public final long slot;\n+  public final String block_root;\n+  public final String state_root;\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  public static class Builder {", "originalCommit": "c80b9bab671f22abbcc817884e87d0fdcc34b09d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "609bf8091979229276b3999259a32389e96c54d5", "chunk": "diff --git a/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/schema/BeaconHeadResponse.java b/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/schema/BeaconHeadResponse.java\nindex c59ffe3561..12230388e1 100644\n--- a/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/schema/BeaconHeadResponse.java\n+++ b/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/schema/BeaconHeadResponse.java\n\n@@ -13,44 +13,15 @@\n \n package tech.pegasys.artemis.beaconrestapi.schema;\n \n-public class BeaconHeadResponse {\n-  public final long slot;\n-  public final String block_root;\n-  public final String state_root;\n-\n-  public static Builder builder() {\n-    return new Builder();\n-  }\n-\n-  public static class Builder {\n-    private long slot;\n-    private String block_root;\n-    private String state_root;\n-\n-    private Builder() {}\n-\n-    public Builder slot(long slot) {\n-      this.slot = slot;\n+import com.google.common.primitives.UnsignedLong;\n+import org.apache.tuweni.bytes.Bytes32;\n \n-      return this;\n-    }\n-\n-    public Builder block_root(String block_root) {\n-      this.block_root = block_root;\n-      return this;\n-    }\n-\n-    public Builder state_root(String state_root) {\n-      this.state_root = state_root;\n-      return this;\n-    }\n-\n-    public BeaconHeadResponse build() {\n-      return new BeaconHeadResponse(slot, block_root, state_root);\n-    }\n-  }\n+public class BeaconHeadResponse {\n+  public final UnsignedLong slot;\n+  public final Bytes32 block_root;\n+  public final Bytes32 state_root;\n \n-  private BeaconHeadResponse(long slot, String block_root, String state_root) {\n+  public BeaconHeadResponse(UnsignedLong slot, Bytes32 block_root, Bytes32 state_root) {\n     this.slot = slot;\n     this.block_root = block_root;\n     this.state_root = state_root;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQxNjI1Ng==", "url": "https://github.com/ConsenSys/teku/pull/1179#discussion_r380416256", "bodyText": "I'm not sure these tests are providing any real value.  They aren't checking it's actually wired up correctly and are essentially just duplicating the internal logic of the class being tested.\nIf you can get a list of registered routes from the server and compare to the expected set that could be useful and lower maintenance but the risk of not registering the API at all seems fairly low.", "author": "ajsutton", "createdAt": "2020-02-18T01:28:13Z", "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApiTest.java", "diffHunk": "@@ -57,4 +58,12 @@ public void RestApiShouldHaveVersionEndpoint() throws Exception {\n \n     verify(mockApp).get(eq(VersionHandler.ROUTE), any(VersionHandler.class));\n   }\n+\n+  @Test\n+  public void restApiShouldHaveBeaconHeadEndpoint() throws Exception {", "originalCommit": "c80b9bab671f22abbcc817884e87d0fdcc34b09d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA3MjYzOA==", "url": "https://github.com/ConsenSys/teku/pull/1179#discussion_r381072638", "bodyText": "It's checking that the route has been linked to the correct class during startup. I added these because I'm working on the assumption that this is my altitude for testing - the object is handling correctly, and its linked to javalin, and beyond that javalin does its job...", "author": "rolfyone", "createdAt": "2020-02-19T04:34:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQxNjI1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE5NjM1NA==", "url": "https://github.com/ConsenSys/teku/pull/1179#discussion_r381196354", "bodyText": "if this was not wired in right, and this test fails, would ALL the tests fail?", "author": "macfarla", "createdAt": "2020-02-19T10:13:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQxNjI1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ4NDUxOQ==", "url": "https://github.com/ConsenSys/teku/pull/1179#discussion_r381484519", "bodyText": "depends on the test. this specific case is only looking at where this specific route is wired, so just this would fail... If we break the whole app object, then yes a lot of tests might fail", "author": "rolfyone", "createdAt": "2020-02-19T19:09:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQxNjI1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "e6b03b70626ea4ad28e8dde055fae070509641dd", "chunk": "diff --git a/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApiTest.java b/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApiTest.java\nindex 6abf747eb9..24974524e1 100644\n--- a/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApiTest.java\n+++ b/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApiTest.java\n\n@@ -24,46 +24,64 @@ import io.javalin.Javalin;\n import io.javalin.core.JavalinServer;\n import org.junit.jupiter.api.Test;\n import tech.pegasys.artemis.beaconrestapi.beaconhandlers.BeaconHeadHandler;\n+import tech.pegasys.artemis.beaconrestapi.beaconhandlers.FinalizedCheckpointHandler;\n import tech.pegasys.artemis.beaconrestapi.beaconhandlers.GenesisTimeHandler;\n import tech.pegasys.artemis.beaconrestapi.beaconhandlers.VersionHandler;\n+import tech.pegasys.artemis.beaconrestapi.networkhandlers.PeerIdHandler;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n \n class BeaconRestApiTest {\n   private final ChainStorageClient storageClient =\n       ChainStorageClient.memoryOnlyClient(new EventBus());\n-  private final JavalinServer mockServer = mock(JavalinServer.class);\n-  private final Javalin mockApp = mock(Javalin.class);\n+  private final JavalinServer server = mock(JavalinServer.class);\n+  private final Javalin app = mock(Javalin.class);\n   private static final Integer THE_PORT = 12345;\n \n   @Test\n   public void RestApiShouldHaveServerPortSet() {\n-    when(mockApp.server()).thenReturn(mockServer);\n-    new BeaconRestApi(storageClient, null, null, THE_PORT, mockApp);\n+    when(app.server()).thenReturn(server);\n+    new BeaconRestApi(storageClient, null, null, THE_PORT, app);\n \n-    verify(mockServer).setServerPort(THE_PORT);\n+    verify(server).setServerPort(THE_PORT);\n   }\n \n   @Test\n   public void RestApiShouldHaveGenesisTimeEndpoint() throws Exception {\n-    when(mockApp.server()).thenReturn(mockServer);\n-    new BeaconRestApi(storageClient, null, null, THE_PORT, mockApp);\n+    when(app.server()).thenReturn(server);\n+    new BeaconRestApi(storageClient, null, null, THE_PORT, app);\n \n-    verify(mockApp).get(eq(GenesisTimeHandler.ROUTE), any(GenesisTimeHandler.class));\n+    verify(app).get(eq(GenesisTimeHandler.ROUTE), any(GenesisTimeHandler.class));\n   }\n \n   @Test\n   public void RestApiShouldHaveVersionEndpoint() throws Exception {\n-    when(mockApp.server()).thenReturn(mockServer);\n-    new BeaconRestApi(storageClient, null, null, THE_PORT, mockApp);\n+    when(app.server()).thenReturn(server);\n+    new BeaconRestApi(storageClient, null, null, THE_PORT, app);\n \n-    verify(mockApp).get(eq(VersionHandler.ROUTE), any(VersionHandler.class));\n+    verify(app).get(eq(VersionHandler.ROUTE), any(VersionHandler.class));\n+  }\n+\n+  @Test\n+  public void RestApiShouldHavePeerIdEndpoint() {\n+    when(app.server()).thenReturn(server);\n+    new BeaconRestApi(storageClient, null, null, THE_PORT, app);\n+\n+    verify(app).get(eq(PeerIdHandler.ROUTE), any(PeerIdHandler.class));\n+  }\n+\n+  @Test\n+  public void RestApiShouldHaveFinalizedCheckpointEndpoint() {\n+    when(app.server()).thenReturn(server);\n+    new BeaconRestApi(storageClient, null, null, THE_PORT, app);\n+\n+    verify(app).get(eq(FinalizedCheckpointHandler.ROUTE), any(FinalizedCheckpointHandler.class));\n   }\n \n   @Test\n   public void restApiShouldHaveBeaconHeadEndpoint() throws Exception {\n-    when(mockApp.server()).thenReturn(mockServer);\n-    new BeaconRestApi(storageClient, null, null, THE_PORT, mockApp);\n+    when(app.server()).thenReturn(server);\n+    new BeaconRestApi(storageClient, null, null, THE_PORT, app);\n \n-    verify(mockApp).get(eq(BeaconHeadHandler.ROUTE), any(BeaconHeadHandler.class));\n+    verify(app).get(eq(BeaconHeadHandler.ROUTE), any(BeaconHeadHandler.class));\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQxNjU3MQ==", "url": "https://github.com/ConsenSys/teku/pull/1179#discussion_r380416571", "bodyText": "I'd use DataStructureUtils.randomBeaconState rather than a mock.  It's generally better to use real instances of data structure classes rather than mocks since there's no functionality to be stubbed out.", "author": "ajsutton", "createdAt": "2020-02-18T01:29:56Z", "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconHeadHandlerTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_NO_CONTENT;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import io.javalin.http.Context;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.artemis.beaconrestapi.schema.BeaconHeadResponse;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.provider.JsonProvider;\n+import tech.pegasys.artemis.storage.ChainStorageClient;\n+\n+public class BeaconHeadHandlerTest {\n+  private Context mockContext = mock(Context.class);\n+  private BeaconState mockRootState = mock(BeaconState.class);", "originalCommit": "c80b9bab671f22abbcc817884e87d0fdcc34b09d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ4ODY1MQ==", "url": "https://github.com/ConsenSys/teku/pull/1179#discussion_r381488651", "bodyText": "i'll have to have a look at that utils class, thanks!", "author": "rolfyone", "createdAt": "2020-02-19T19:16:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQxNjU3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "d0c6f035b690df15bb6d046197bacfcf6bf3c250", "chunk": "diff --git a/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconHeadHandlerTest.java b/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconHeadHandlerTest.java\nindex 69525b8ff3..7b744c02cc 100644\n--- a/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconHeadHandlerTest.java\n+++ b/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconHeadHandlerTest.java\n\n@@ -28,8 +28,8 @@ import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n \n public class BeaconHeadHandlerTest {\n-  private Context mockContext = mock(Context.class);\n-  private BeaconState mockRootState = mock(BeaconState.class);\n+  private Context context = mock(Context.class);\n+  private BeaconState rootState = mock(BeaconState.class);\n   private final UnsignedLong bestSlot = UnsignedLong.valueOf(51234);\n \n   private final ChainStorageClient storageClient = mock(ChainStorageClient.class);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQxNzE1Ng==", "url": "https://github.com/ConsenSys/teku/pull/1179#discussion_r380417156", "bodyText": "It's kind of weird that we're mixing patterns for adding handlers.", "author": "ajsutton", "createdAt": "2020-02-18T01:33:00Z", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApi.java", "diffHunk": "@@ -132,11 +132,11 @@ private void addNodeHandlers(ChainStorageClient chainStorageClient) {\n \n   private void addBeaconHandlers(\n       ChainStorageClient chainStorageClient, HistoricalChainData historicalChainData) {\n+    app.get(BeaconHeadHandler.ROUTE, new BeaconHeadHandler(chainStorageClient));", "originalCommit": "c80b9bab671f22abbcc817884e87d0fdcc34b09d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA3MjAxOA==", "url": "https://github.com/ConsenSys/teku/pull/1179#discussion_r381072018", "bodyText": "we're moving to this pattern, the intent is definitely not to mix pattern.  The handlers array will cease to exist in the next few days hopefully.", "author": "rolfyone", "createdAt": "2020-02-19T04:31:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQxNzE1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "e6b03b70626ea4ad28e8dde055fae070509641dd", "chunk": "diff --git a/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApi.java b/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApi.java\nindex 0381e8d5bb..be92bf4689 100644\n--- a/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApi.java\n+++ b/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApi.java\n\n@@ -133,12 +133,12 @@ public class BeaconRestApi {\n   private void addBeaconHandlers(\n       ChainStorageClient chainStorageClient, HistoricalChainData historicalChainData) {\n     app.get(BeaconHeadHandler.ROUTE, new BeaconHeadHandler(chainStorageClient));\n+    app.get(FinalizedCheckpointHandler.ROUTE, new FinalizedCheckpointHandler(chainStorageClient));\n     // TODO: not in Minimal or optional specified set - some are similar to lighthouse\n     // implementation\n     handlers.add(new BeaconBlockHandler(chainStorageClient, historicalChainData));\n     handlers.add(new BeaconChainHeadHandler(chainStorageClient));\n     handlers.add(new BeaconStateHandler(chainStorageClient));\n-    handlers.add(new FinalizedCheckpointHandler(chainStorageClient));\n   }\n \n   private void addValidatorHandlers() {\n"}}, {"oid": "d0c6f035b690df15bb6d046197bacfcf6bf3c250", "url": "https://github.com/ConsenSys/teku/commit/d0c6f035b690df15bb6d046197bacfcf6bf3c250", "message": "remove prefix from mock objects\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-02-18T19:37:03Z", "type": "commit"}, {"oid": "e6b03b70626ea4ad28e8dde055fae070509641dd", "url": "https://github.com/ConsenSys/teku/commit/e6b03b70626ea4ad28e8dde055fae070509641dd", "message": "Merge remote-tracking branch 'upstream/master' into artemis-1158", "committedDate": "2020-02-19T01:12:04Z", "type": "commit"}, {"oid": "609bf8091979229276b3999259a32389e96c54d5", "url": "https://github.com/ConsenSys/teku/commit/609bf8091979229276b3999259a32389e96c54d5", "message": "changes per review comments", "committedDate": "2020-02-19T04:27:37Z", "type": "commit"}, {"oid": "0193ba538e1f2d1bc6132867f2069a61c4653aaf", "url": "https://github.com/ConsenSys/teku/commit/0193ba538e1f2d1bc6132867f2069a61c4653aaf", "message": "changes per review comments", "committedDate": "2020-02-19T04:34:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE5MDc4OQ==", "url": "https://github.com/ConsenSys/teku/pull/1179#discussion_r381190789", "bodyText": "can this just be ROUTE ?", "author": "macfarla", "createdAt": "2020-02-19T10:04:08Z", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconHeadHandler.java", "diffHunk": "@@ -13,38 +13,63 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n-import com.google.common.primitives.UnsignedLong;\n-import java.util.HashMap;\n-import java.util.Map;\n+import static javax.servlet.http.HttpServletResponse.SC_NO_CONTENT;\n+\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n import org.apache.tuweni.bytes.Bytes32;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler;\n+import tech.pegasys.artemis.beaconrestapi.schema.BeaconHeadResponse;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n \n-public class BeaconHeadHandler implements BeaconRestApiHandler {\n+public class BeaconHeadHandler implements Handler {\n+  private final Logger LOG = LogManager.getLogger();\n+  public static final String ROUTE = \"/beacon/head\";\n \n   private final ChainStorageClient client;\n \n   public BeaconHeadHandler(ChainStorageClient client) {\n     this.client = client;\n   }\n \n-  @Override\n-  public String getPath() {\n-    return \"/beacon/head\";\n+  private BeaconHeadResponse getBeaconHead() {\n+    Bytes32 headBlockRoot = client.getBestBlockRoot();\n+    if (headBlockRoot == null) {\n+      return null;\n+    }\n+    Bytes32 headStateRoot = client.getBestBlockRootState().hash_tree_root();\n+    return new BeaconHeadResponse(client.getBestSlot(), headBlockRoot, headStateRoot);\n   }\n \n+  @OpenApi(\n+      path = BeaconHeadHandler.ROUTE,", "originalCommit": "0193ba538e1f2d1bc6132867f2069a61c4653aaf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ4ODgwMw==", "url": "https://github.com/ConsenSys/teku/pull/1179#discussion_r381488803", "bodyText": "yep. changed.", "author": "rolfyone", "createdAt": "2020-02-19T19:16:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE5MDc4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "5f8a94c5539667e3dfcc24c70e079987d979d674", "chunk": "diff --git a/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconHeadHandler.java b/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconHeadHandler.java\nindex e8ccff8e45..cb1ce4e18b 100644\n--- a/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconHeadHandler.java\n+++ b/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconHeadHandler.java\n\n@@ -48,7 +48,7 @@ public class BeaconHeadHandler implements Handler {\n   }\n \n   @OpenApi(\n-      path = BeaconHeadHandler.ROUTE,\n+      path = ROUTE,\n       method = HttpMethod.GET,\n       summary = \"Get the head of the beacon chain from the node's perspective.\",\n       tags = {\"Beacon\"},\n"}}, {"oid": "5f8a94c5539667e3dfcc24c70e079987d979d674", "url": "https://github.com/ConsenSys/teku/commit/5f8a94c5539667e3dfcc24c70e079987d979d674", "message": "changes per review comments", "committedDate": "2020-02-19T19:06:06Z", "type": "commit"}, {"oid": "e0ec7e8fcf87a4ae8dfe6e2a168b765777828454", "url": "https://github.com/ConsenSys/teku/commit/e0ec7e8fcf87a4ae8dfe6e2a168b765777828454", "message": "changes per review comments", "committedDate": "2020-02-19T19:16:21Z", "type": "commit"}, {"oid": "5e57ad6a49f31e5921c0f362440ebc5c743f46d7", "url": "https://github.com/ConsenSys/teku/commit/5e57ad6a49f31e5921c0f362440ebc5c743f46d7", "message": "fix spotless", "committedDate": "2020-02-19T22:14:25Z", "type": "commit"}, {"oid": "fc1ce25cf974dac56c0c547c645f6848d6131802", "url": "https://github.com/ConsenSys/teku/commit/fc1ce25cf974dac56c0c547c645f6848d6131802", "message": "Merge remote-tracking branch 'upstream/master' into artemis-1158", "committedDate": "2020-02-19T22:57:38Z", "type": "commit"}, {"oid": "770205d2b3045427380ec0a130c9a791bdde56ae", "url": "https://github.com/ConsenSys/teku/commit/770205d2b3045427380ec0a130c9a791bdde56ae", "message": "Merge remote-tracking branch 'upstream/master' into artemis-1158", "committedDate": "2020-02-19T23:12:09Z", "type": "commit"}, {"oid": "4fdf008f6c046ca28a1d4328e3dc5c3f94f6a834", "url": "https://github.com/ConsenSys/teku/commit/4fdf008f6c046ca28a1d4328e3dc5c3f94f6a834", "message": "Merge remote-tracking branch 'upstream/master' into artemis-1158\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-02-20T03:45:16Z", "type": "commit"}, {"oid": "852b7cbf284e0743a3e5b0beba54c0c98ff66a49", "url": "https://github.com/ConsenSys/teku/commit/852b7cbf284e0743a3e5b0beba54c0c98ff66a49", "message": "Merge remote-tracking branch 'upstream/master' into artemis-1158", "committedDate": "2020-02-20T04:04:05Z", "type": "commit"}, {"oid": "a55e8eda60c39a7bf68be4349c6e1a6061826f76", "url": "https://github.com/ConsenSys/teku/commit/a55e8eda60c39a7bf68be4349c6e1a6061826f76", "message": "Merge remote-tracking branch 'upstream/master' into artemis-1158\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-02-20T04:25:36Z", "type": "commit"}]}