{"pr_number": 2460, "pr_title": "add finalised storage for stateRoot to slot for missed slots", "pr_createdAt": "2020-07-28T02:45:21Z", "pr_url": "https://github.com/ConsenSys/teku/pull/2460", "timeline": [{"oid": "3537da2fe6b40c92361d8b613425ff5547e4b81b", "url": "https://github.com/ConsenSys/teku/commit/3537da2fe6b40c92361d8b613425ff5547e4b81b", "message": "add finalized storage for stateRoot to slot for missed slots\n\n - add test to show retrieval of a finalized state by state root\n\nfixes #2184\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-07-28T02:43:17Z", "type": "commit"}, {"oid": "ef75109998894fa9a4e0d3de6094d49affce6c17", "url": "https://github.com/ConsenSys/teku/commit/ef75109998894fa9a4e0d3de6094d49affce6c17", "message": "Merge remote-tracking branch 'upstream/master' into missed-finalized-block-state-hash", "committedDate": "2020-07-28T02:46:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI4ODcyMw==", "url": "https://github.com/ConsenSys/teku/pull/2460#discussion_r461288723", "bodyText": "We should log a WARN level message in this case.", "author": "ajsutton", "createdAt": "2020-07-28T03:00:44Z", "path": "storage/src/main/java/tech/pegasys/teku/storage/server/state/StateRootRecorder.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server.state;\n+\n+import static tech.pegasys.teku.util.config.Constants.SLOTS_PER_HISTORICAL_ROOT;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.function.BiConsumer;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+\n+public class StateRootRecorder {\n+  private final UnsignedLong slotsPerHistoricalRoot;\n+  private UnsignedLong slot;\n+  private final BiConsumer<Bytes32, UnsignedLong> stateRootConsumer;\n+\n+  public StateRootRecorder(\n+      final UnsignedLong slot, final BiConsumer<Bytes32, UnsignedLong> stateRootConsumer) {\n+    this.stateRootConsumer = stateRootConsumer;\n+    this.slot = slot;\n+    this.slotsPerHistoricalRoot = UnsignedLong.valueOf(SLOTS_PER_HISTORICAL_ROOT);\n+  }\n+\n+  public void acceptNextState(final BeaconState state) {\n+    // if there are more than SLOTS_PER_HISTORICAL_ROOT of missed blocks,\n+    // then we will end up missing some state roots, because they aren't available to record\n+    if (slot.plus(slotsPerHistoricalRoot).compareTo(state.getSlot()) < 0) {\n+      slot = state.getSlot().minus(slotsPerHistoricalRoot);\n+    }", "originalCommit": "ef75109998894fa9a4e0d3de6094d49affce6c17", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f6857661a74e7b4c54bf2a100dc8e026625fd27", "chunk": "diff --git a/storage/src/main/java/tech/pegasys/teku/storage/server/state/StateRootRecorder.java b/storage/src/main/java/tech/pegasys/teku/storage/server/state/StateRootRecorder.java\nindex 2aa63f597f..b9ef82a216 100644\n--- a/storage/src/main/java/tech/pegasys/teku/storage/server/state/StateRootRecorder.java\n+++ b/storage/src/main/java/tech/pegasys/teku/storage/server/state/StateRootRecorder.java\n\n@@ -17,10 +17,13 @@ import static tech.pegasys.teku.util.config.Constants.SLOTS_PER_HISTORICAL_ROOT;\n \n import com.google.common.primitives.UnsignedLong;\n import java.util.function.BiConsumer;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n import org.apache.tuweni.bytes.Bytes32;\n import tech.pegasys.teku.datastructures.state.BeaconState;\n \n public class StateRootRecorder {\n+  private static final Logger LOG = LogManager.getLogger();\n   private final UnsignedLong slotsPerHistoricalRoot;\n   private UnsignedLong slot;\n   private final BiConsumer<Bytes32, UnsignedLong> stateRootConsumer;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI4OTc5MA==", "url": "https://github.com/ConsenSys/teku/pull/2460#discussion_r461289790", "bodyText": "I think this winds up recording the state root for the slot of the last block rather than starting at the slot after that block.  It will get the stateRoot right for that slot, it's just needlessly performing two database writes.\nRather than having\nupdater.addFinalizedStateRoot(state.hash_tree_root(), state.getSlot());\n\nin RocksDbDatabase, I'd be tempted to move it here after the while loop exits and then increment slot so that when acceptNextState returns slot == state.getSlot() + 1.  That way this class is responsible for recording all the state roots and we avoid double recording the state root when a block is present.", "author": "ajsutton", "createdAt": "2020-07-28T03:05:05Z", "path": "storage/src/main/java/tech/pegasys/teku/storage/server/state/StateRootRecorder.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server.state;\n+\n+import static tech.pegasys.teku.util.config.Constants.SLOTS_PER_HISTORICAL_ROOT;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.function.BiConsumer;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+\n+public class StateRootRecorder {\n+  private final UnsignedLong slotsPerHistoricalRoot;\n+  private UnsignedLong slot;\n+  private final BiConsumer<Bytes32, UnsignedLong> stateRootConsumer;\n+\n+  public StateRootRecorder(\n+      final UnsignedLong slot, final BiConsumer<Bytes32, UnsignedLong> stateRootConsumer) {\n+    this.stateRootConsumer = stateRootConsumer;\n+    this.slot = slot;\n+    this.slotsPerHistoricalRoot = UnsignedLong.valueOf(SLOTS_PER_HISTORICAL_ROOT);\n+  }\n+\n+  public void acceptNextState(final BeaconState state) {\n+    // if there are more than SLOTS_PER_HISTORICAL_ROOT of missed blocks,\n+    // then we will end up missing some state roots, because they aren't available to record\n+    if (slot.plus(slotsPerHistoricalRoot).compareTo(state.getSlot()) < 0) {\n+      slot = state.getSlot().minus(slotsPerHistoricalRoot);\n+    }\n+\n+    while (slot.compareTo(state.getSlot()) < 0) {\n+      stateRootConsumer.accept(\n+          state.getState_roots().get(slot.mod(slotsPerHistoricalRoot).intValue()), slot);\n+      slot = slot.plus(UnsignedLong.ONE);", "originalCommit": "ef75109998894fa9a4e0d3de6094d49affce6c17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI5MjQ2Nw==", "url": "https://github.com/ConsenSys/teku/pull/2460#discussion_r461292467", "bodyText": "I did think about that, having all the processing in that other class, just that the logic for the hash_tree_root is distinct (it cant have its own root in its tree) so i'd need to do it outside the while loop, but not a big issue...", "author": "rolfyone", "createdAt": "2020-07-28T03:15:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI4OTc5MA=="}], "type": "inlineReview", "revised_code": {"commit": "3f6857661a74e7b4c54bf2a100dc8e026625fd27", "chunk": "diff --git a/storage/src/main/java/tech/pegasys/teku/storage/server/state/StateRootRecorder.java b/storage/src/main/java/tech/pegasys/teku/storage/server/state/StateRootRecorder.java\nindex 2aa63f597f..b9ef82a216 100644\n--- a/storage/src/main/java/tech/pegasys/teku/storage/server/state/StateRootRecorder.java\n+++ b/storage/src/main/java/tech/pegasys/teku/storage/server/state/StateRootRecorder.java\n\n@@ -17,10 +17,13 @@ import static tech.pegasys.teku.util.config.Constants.SLOTS_PER_HISTORICAL_ROOT;\n \n import com.google.common.primitives.UnsignedLong;\n import java.util.function.BiConsumer;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n import org.apache.tuweni.bytes.Bytes32;\n import tech.pegasys.teku.datastructures.state.BeaconState;\n \n public class StateRootRecorder {\n+  private static final Logger LOG = LogManager.getLogger();\n   private final UnsignedLong slotsPerHistoricalRoot;\n   private UnsignedLong slot;\n   private final BiConsumer<Bytes32, UnsignedLong> stateRootConsumer;\n"}}, {"oid": "3f6857661a74e7b4c54bf2a100dc8e026625fd27", "url": "https://github.com/ConsenSys/teku/commit/3f6857661a74e7b4c54bf2a100dc8e026625fd27", "message": "review feedback\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-07-28T04:08:06Z", "type": "commit"}, {"oid": "973abb95d16c0d404fc3bc1a56c16fbc4914f104", "url": "https://github.com/ConsenSys/teku/commit/973abb95d16c0d404fc3bc1a56c16fbc4914f104", "message": "Merge remote-tracking branch 'upstream/master' into missed-finalized-block-state-hash", "committedDate": "2020-07-28T04:08:44Z", "type": "commit"}]}