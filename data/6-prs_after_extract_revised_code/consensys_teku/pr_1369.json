{"pr_number": 1369, "pr_title": "[#1297] - teku validator register subcommand - use private key from encrypted keystore  ", "pr_createdAt": "2020-03-12T23:29:37Z", "pr_url": "https://github.com/ConsenSys/teku/pull/1369", "timeline": [{"oid": "d8198ecf87ce3ecce998abf475179b4193dabe53", "url": "https://github.com/ConsenSys/teku/commit/d8198ecf87ce3ecce998abf475179b4193dabe53", "message": "Signer keystore options for validator register command\n\n -- Refactored common methods to KeystorePasswordOptions\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-03-12T07:46:55Z", "type": "commit"}, {"oid": "9c7d91bf096c5d007f646c440a850dadf984b241", "url": "https://github.com/ConsenSys/teku/commit/9c7d91bf096c5d007f646c440a850dadf984b241", "message": "Adding unit test cases\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-03-12T08:23:09Z", "type": "commit"}, {"oid": "a14250803437cd647033b2ad577f328ced3787c1", "url": "https://github.com/ConsenSys/teku/commit/a14250803437cd647033b2ad577f328ced3787c1", "message": "Removing unused variable\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-03-12T23:46:31Z", "type": "commit"}, {"oid": "a261b73462f6277957b019c96aea7b7a7f22426b", "url": "https://github.com/ConsenSys/teku/commit/a261b73462f6277957b019c96aea7b7a7f22426b", "message": "Merge remote-tracking branch 'upstream/master' into 1297_validator_register_keystore\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-03-12T23:46:46Z", "type": "commit"}, {"oid": "647b805eee6da49e439bc62bdcd6fd329e4a711f", "url": "https://github.com/ConsenSys/teku/commit/647b805eee6da49e439bc62bdcd6fd329e4a711f", "message": "Fixing NPE\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-03-13T00:43:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk5MDg2MA==", "url": "https://github.com/ConsenSys/teku/pull/1369#discussion_r391990860", "bodyText": "Since you already have a tempDir you could just resolve two new paths i.e. tempDir.resolve(\"keystore\") to represent the keyfile and password and let junit clean up the files.", "author": "jframe", "createdAt": "2020-03-13T01:54:03Z", "path": "artemis/src/test/java/tech/pegasys/artemis/cli/deposit/DepositRegisterCommandTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.cli.deposit;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static tech.pegasys.artemis.util.async.SafeFuture.completedFuture;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.function.Consumer;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.apache.tuweni.bytes.Bytes48;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+import picocli.CommandLine;\n+import tech.pegasys.artemis.bls.keystore.KeyStore;\n+import tech.pegasys.artemis.bls.keystore.KeyStoreLoader;\n+import tech.pegasys.artemis.bls.keystore.model.Cipher;\n+import tech.pegasys.artemis.bls.keystore.model.KdfParam;\n+import tech.pegasys.artemis.bls.keystore.model.KeyStoreData;\n+import tech.pegasys.artemis.bls.keystore.model.SCryptParam;\n+import tech.pegasys.artemis.cli.deposit.DepositRegisterCommand.ValidatorKeyOptions;\n+import tech.pegasys.artemis.cli.deposit.DepositRegisterCommand.ValidatorKeyStoreOptions;\n+import tech.pegasys.artemis.services.powchain.DepositTransactionSender;\n+\n+class DepositRegisterCommandTest {\n+  private static final Consumer<Integer> shutdownFunction = status -> {};\n+  private static final String PASSWORD = \"testpassword\";\n+  private static final Bytes BLS_PRIVATE_KEY =\n+      Bytes48.fromHexStringLenient(\"19d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\");\n+  private static final Bytes32 SALT =\n+      Bytes32.fromHexString(\"d4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3\");\n+  private static final Bytes AES_IV_PARAM = Bytes.fromHexString(\"264daa3f303d7259501c93d997d84fe6\");\n+  private static final Cipher CIPHER = new Cipher(AES_IV_PARAM);\n+  private static final KdfParam KDF_PARAM = new SCryptParam(32, 262144, 1, 8, SALT);\n+  private static final KeyStoreData VALIDATOR_KEYSTORE =\n+      KeyStore.encrypt(BLS_PRIVATE_KEY, PASSWORD, \"\", KDF_PARAM, CIPHER);\n+  private CommonParams commonParams;\n+  private CommandLine.Model.CommandSpec commandSpec;\n+\n+  @BeforeEach\n+  void setUp() {\n+    commonParams = mock(CommonParams.class);\n+    commandSpec = mock(CommandLine.Model.CommandSpec.class);\n+    final CommandLine commandLine = mock(CommandLine.class);\n+    final DepositTransactionSender depositTransactionSender = mock(DepositTransactionSender.class);\n+\n+    when(commandSpec.commandLine()).thenReturn(commandLine);\n+    when(commonParams.createTransactionSender()).thenReturn(depositTransactionSender);\n+    when(depositTransactionSender.sendDepositTransaction(any(), any(), any()))\n+        .thenReturn(completedFuture(null));\n+  }\n+\n+  @Test\n+  void registerWithEncryptedValidatorKeystore(@TempDir final Path tempDir) throws IOException {\n+    final Path keyStoreFile = Files.createTempFile(tempDir, \"keystore\", \".json\");", "originalCommit": "647b805eee6da49e439bc62bdcd6fd329e4a711f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA1OTE2MQ==", "url": "https://github.com/ConsenSys/teku/pull/1369#discussion_r392059161", "bodyText": "Updated.", "author": "usmansaleem", "createdAt": "2020-03-13T07:02:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk5MDg2MA=="}], "type": "inlineReview", "revised_code": {"commit": "714c008e76fab0d026dd0ede3e5da1042e5232f1", "chunk": "diff --git a/artemis/src/test/java/tech/pegasys/artemis/cli/deposit/DepositRegisterCommandTest.java b/artemis/src/test/java/tech/pegasys/artemis/cli/deposit/DepositRegisterCommandTest.java\nindex 893adcb830..b004440322 100644\n--- a/artemis/src/test/java/tech/pegasys/artemis/cli/deposit/DepositRegisterCommandTest.java\n+++ b/artemis/src/test/java/tech/pegasys/artemis/cli/deposit/DepositRegisterCommandTest.java\n\n@@ -13,8 +13,10 @@\n \n package tech.pegasys.artemis.cli.deposit;\n \n+import static org.assertj.core.api.Assertions.assertThatCode;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n import static tech.pegasys.artemis.util.async.SafeFuture.completedFuture;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk5MTA4Mg==", "url": "https://github.com/ConsenSys/teku/pull/1369#discussion_r391991082", "bodyText": "What is this testing? There are no assertions or verifications happening that I can see.", "author": "jframe", "createdAt": "2020-03-13T01:55:19Z", "path": "artemis/src/test/java/tech/pegasys/artemis/cli/deposit/DepositRegisterCommandTest.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.cli.deposit;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static tech.pegasys.artemis.util.async.SafeFuture.completedFuture;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.function.Consumer;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.apache.tuweni.bytes.Bytes48;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+import picocli.CommandLine;\n+import tech.pegasys.artemis.bls.keystore.KeyStore;\n+import tech.pegasys.artemis.bls.keystore.KeyStoreLoader;\n+import tech.pegasys.artemis.bls.keystore.model.Cipher;\n+import tech.pegasys.artemis.bls.keystore.model.KdfParam;\n+import tech.pegasys.artemis.bls.keystore.model.KeyStoreData;\n+import tech.pegasys.artemis.bls.keystore.model.SCryptParam;\n+import tech.pegasys.artemis.cli.deposit.DepositRegisterCommand.ValidatorKeyOptions;\n+import tech.pegasys.artemis.cli.deposit.DepositRegisterCommand.ValidatorKeyStoreOptions;\n+import tech.pegasys.artemis.services.powchain.DepositTransactionSender;\n+\n+class DepositRegisterCommandTest {\n+  private static final Consumer<Integer> shutdownFunction = status -> {};\n+  private static final String PASSWORD = \"testpassword\";\n+  private static final Bytes BLS_PRIVATE_KEY =\n+      Bytes48.fromHexStringLenient(\"19d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\");\n+  private static final Bytes32 SALT =\n+      Bytes32.fromHexString(\"d4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3\");\n+  private static final Bytes AES_IV_PARAM = Bytes.fromHexString(\"264daa3f303d7259501c93d997d84fe6\");\n+  private static final Cipher CIPHER = new Cipher(AES_IV_PARAM);\n+  private static final KdfParam KDF_PARAM = new SCryptParam(32, 262144, 1, 8, SALT);\n+  private static final KeyStoreData VALIDATOR_KEYSTORE =\n+      KeyStore.encrypt(BLS_PRIVATE_KEY, PASSWORD, \"\", KDF_PARAM, CIPHER);\n+  private CommonParams commonParams;\n+  private CommandLine.Model.CommandSpec commandSpec;\n+\n+  @BeforeEach\n+  void setUp() {\n+    commonParams = mock(CommonParams.class);\n+    commandSpec = mock(CommandLine.Model.CommandSpec.class);\n+    final CommandLine commandLine = mock(CommandLine.class);\n+    final DepositTransactionSender depositTransactionSender = mock(DepositTransactionSender.class);\n+\n+    when(commandSpec.commandLine()).thenReturn(commandLine);\n+    when(commonParams.createTransactionSender()).thenReturn(depositTransactionSender);\n+    when(depositTransactionSender.sendDepositTransaction(any(), any(), any()))\n+        .thenReturn(completedFuture(null));\n+  }\n+\n+  @Test\n+  void registerWithEncryptedValidatorKeystore(@TempDir final Path tempDir) throws IOException {\n+    final Path keyStoreFile = Files.createTempFile(tempDir, \"keystore\", \".json\");\n+    KeyStoreLoader.saveToFile(keyStoreFile, VALIDATOR_KEYSTORE);\n+\n+    final Path keystorePassword = Files.createTempFile(tempDir, \"password\", \".txt\");\n+    Files.writeString(keystorePassword, PASSWORD);\n+\n+    ValidatorKeyOptions validatorKeyOptions =\n+        buildValidatorKeyOptions(keyStoreFile, keystorePassword);\n+\n+    final DepositRegisterCommand depositRegisterCommand =\n+        new DepositRegisterCommand(\n+            shutdownFunction, commandSpec, commonParams, validatorKeyOptions, \"\");\n+\n+    depositRegisterCommand.run();", "originalCommit": "647b805eee6da49e439bc62bdcd6fd329e4a711f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA1OTI4MQ==", "url": "https://github.com/ConsenSys/teku/pull/1369#discussion_r392059281", "bodyText": "Updated to include couple of assertions.", "author": "usmansaleem", "createdAt": "2020-03-13T07:02:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk5MTA4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "714c008e76fab0d026dd0ede3e5da1042e5232f1", "chunk": "diff --git a/artemis/src/test/java/tech/pegasys/artemis/cli/deposit/DepositRegisterCommandTest.java b/artemis/src/test/java/tech/pegasys/artemis/cli/deposit/DepositRegisterCommandTest.java\nindex 893adcb830..b004440322 100644\n--- a/artemis/src/test/java/tech/pegasys/artemis/cli/deposit/DepositRegisterCommandTest.java\n+++ b/artemis/src/test/java/tech/pegasys/artemis/cli/deposit/DepositRegisterCommandTest.java\n\n@@ -13,8 +13,10 @@\n \n package tech.pegasys.artemis.cli.deposit;\n \n+import static org.assertj.core.api.Assertions.assertThatCode;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n import static tech.pegasys.artemis.util.async.SafeFuture.completedFuture;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk5MTc3Mw==", "url": "https://github.com/ConsenSys/teku/pull/1369#discussion_r391991773", "bodyText": "Would be good to have a unit test for these", "author": "jframe", "createdAt": "2020-03-13T01:58:20Z", "path": "artemis/src/main/java/tech/pegasys/artemis/cli/deposit/KeystorePasswordOptions.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.cli.deposit;\n+\n+import static org.apache.commons.lang3.StringUtils.isBlank;\n+\n+import com.google.common.io.Files;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.function.Function;\n+import picocli.CommandLine;\n+import picocli.CommandLine.ParameterException;\n+\n+public interface KeystorePasswordOptions {\n+  File getPasswordFile();\n+\n+  String getPasswordEnvironmentVariable();\n+\n+  static String readFromFile(final CommandLine commandLine, final File passwordFile) {", "originalCommit": "647b805eee6da49e439bc62bdcd6fd329e4a711f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjA1OTMzMg==", "url": "https://github.com/ConsenSys/teku/pull/1369#discussion_r392059332", "bodyText": "Added test cases.", "author": "usmansaleem", "createdAt": "2020-03-13T07:02:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk5MTc3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "ca6b547219c9dd1f04a1f0f18b15ad92f3208a90", "chunk": "diff --git a/artemis/src/main/java/tech/pegasys/artemis/cli/deposit/KeystorePasswordOptions.java b/artemis/src/main/java/tech/pegasys/artemis/cli/deposit/KeystorePasswordOptions.java\nindex 4b962c5a40..96756071c4 100644\n--- a/artemis/src/main/java/tech/pegasys/artemis/cli/deposit/KeystorePasswordOptions.java\n+++ b/artemis/src/main/java/tech/pegasys/artemis/cli/deposit/KeystorePasswordOptions.java\n\n@@ -52,7 +52,7 @@ public interface KeystorePasswordOptions {\n       final Function<String, String> envSupplier,\n       final String environmentVariable) {\n     final String password = envSupplier.apply(environmentVariable);\n-    if (password == null) {\n+    if (isBlank(password)) {\n       throw new ParameterException(\n           commandLine,\n           \"Error: Password cannot be read from environment variable: \" + environmentVariable);\n"}}, {"oid": "714c008e76fab0d026dd0ede3e5da1042e5232f1", "url": "https://github.com/ConsenSys/teku/commit/714c008e76fab0d026dd0ede3e5da1042e5232f1", "message": "add option to read keystore password from environment variable\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-03-13T06:38:27Z", "type": "commit"}, {"oid": "63df35c4a962e4a726ff44aea9e9133102cb30c2", "url": "https://github.com/ConsenSys/teku/commit/63df35c4a962e4a726ff44aea9e9133102cb30c2", "message": "unit test cases for utility methods in KeystorePasswordOptions\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-03-13T07:00:50Z", "type": "commit"}, {"oid": "b6fa26c1d9851b2d55bb7d596dda9baf88d89cd2", "url": "https://github.com/ConsenSys/teku/commit/b6fa26c1d9851b2d55bb7d596dda9baf88d89cd2", "message": "Merge remote-tracking branch 'upstream/master' into 1297_validator_register_keystore\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-03-13T07:03:17Z", "type": "commit"}, {"oid": "a7b5643cfc124788d972a129641bee903360e345", "url": "https://github.com/ConsenSys/teku/commit/a7b5643cfc124788d972a129641bee903360e345", "message": "Merge remote-tracking branch 'upstream/master' into 1297_validator_register_keystore\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-03-15T23:17:20Z", "type": "commit"}, {"oid": "ca6b547219c9dd1f04a1f0f18b15ad92f3208a90", "url": "https://github.com/ConsenSys/teku/commit/ca6b547219c9dd1f04a1f0f18b15ad92f3208a90", "message": "Updating blank password check when reading from env variable\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-03-15T23:31:37Z", "type": "commit"}, {"oid": "262dfb256a7a5b8a5d1aa5a800f7215d6d6465ec", "url": "https://github.com/ConsenSys/teku/commit/262dfb256a7a5b8a5d1aa5a800f7215d6d6465ec", "message": "Adding more unit test cases\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-03-15T23:44:51Z", "type": "commit"}]}