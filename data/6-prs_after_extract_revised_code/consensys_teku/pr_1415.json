{"pr_number": 1415, "pr_title": "/validator/duties - Add Proposal slots", "pr_createdAt": "2020-03-19T05:36:21Z", "pr_url": "https://github.com/ConsenSys/teku/pull/1415", "timeline": [{"oid": "22c4fc1e0a6f9fb7f2cf72e36622849ad224da7b", "url": "https://github.com/ConsenSys/teku/commit/22c4fc1e0a6f9fb7f2cf72e36622849ad224da7b", "message": "draft\n\nSigned-off-by: Sally MacFarlane <sally.macfarlane@consensys.net>", "committedDate": "2020-03-18T20:23:51Z", "type": "commit"}, {"oid": "c320a35f3af9a29ec81cb1774444dff791e103f9", "url": "https://github.com/ConsenSys/teku/commit/c320a35f3af9a29ec81cb1774444dff791e103f9", "message": "Merge branch 'master' of github.com:PegaSysEng/teku into proposer-slot", "committedDate": "2020-03-19T02:00:38Z", "type": "commit"}, {"oid": "01bd87e394a18baf52152db2c086ee32e7ad2718", "url": "https://github.com/ConsenSys/teku/commit/01bd87e394a18baf52152db2c086ee32e7ad2718", "message": "name\n\nSigned-off-by: Sally MacFarlane <sally.macfarlane@consensys.net>", "committedDate": "2020-03-19T03:24:20Z", "type": "commit"}, {"oid": "583ab4be8af3c4f84602ea07ab1639c9c0fc3f49", "url": "https://github.com/ConsenSys/teku/commit/583ab4be8af3c4f84602ea07ab1639c9c0fc3f49", "message": "merge\n\nSigned-off-by: Sally MacFarlane <sally.macfarlane@consensys.net>", "committedDate": "2020-03-19T03:25:23Z", "type": "commit"}, {"oid": "8d5da2181c36c75cf92185849e9ec93de34ebb51", "url": "https://github.com/ConsenSys/teku/commit/8d5da2181c36c75cf92185849e9ec93de34ebb51", "message": "added proposal slots to validator duties\n\nSigned-off-by: Sally MacFarlane <sally.macfarlane@consensys.net>", "committedDate": "2020-03-19T05:16:34Z", "type": "commit"}, {"oid": "529d4fb126f2b608d4597c28bfcf320db2e174e3", "url": "https://github.com/ConsenSys/teku/commit/529d4fb126f2b608d4597c28bfcf320db2e174e3", "message": "tests\n\nSigned-off-by: Sally MacFarlane <sally.macfarlane@consensys.net>", "committedDate": "2020-03-19T05:23:02Z", "type": "commit"}, {"oid": "44f42096d6cf49943b51cc4fffd885954526d799", "url": "https://github.com/ConsenSys/teku/commit/44f42096d6cf49943b51cc4fffd885954526d799", "message": "merge\n\nSigned-off-by: Sally MacFarlane <sally.macfarlane@consensys.net>", "committedDate": "2020-03-20T01:39:20Z", "type": "commit"}, {"oid": "bf9fe825499957b776fc0ef74ec9a8608bece466", "url": "https://github.com/ConsenSys/teku/commit/bf9fe825499957b776fc0ef74ec9a8608bece466", "message": "ChainDataUnavailableException\n\nSigned-off-by: Sally MacFarlane <sally.macfarlane@consensys.net>", "committedDate": "2020-03-20T03:59:15Z", "type": "commit"}, {"oid": "20bb724c73ced10bde2e71127028fd7050d7876e", "url": "https://github.com/ConsenSys/teku/commit/20bb724c73ced10bde2e71127028fd7050d7876e", "message": "MERGE\n\nSigned-off-by: Sally MacFarlane <sally.macfarlane@consensys.net>", "committedDate": "2020-03-20T04:26:27Z", "type": "commit"}, {"oid": "0a1f98b0a32212bc194d6e2d03c625358c29ead2", "url": "https://github.com/ConsenSys/teku/commit/0a1f98b0a32212bc194d6e2d03c625358c29ead2", "message": "fixed test\n\nSigned-off-by: Sally MacFarlane <sally.macfarlane@consensys.net>", "committedDate": "2020-03-20T04:35:06Z", "type": "commit"}, {"oid": "46ea0e5bcf056b71d4b3ccdf32c848f9450b7747", "url": "https://github.com/ConsenSys/teku/commit/46ea0e5bcf056b71d4b3ccdf32c848f9450b7747", "message": "MERGE more\n\nSigned-off-by: Sally MacFarlane <sally.macfarlane@consensys.net>", "committedDate": "2020-03-20T04:45:04Z", "type": "commit"}, {"oid": "0ee9adbbe5fc4431b167db88ae998d0f7a81d520", "url": "https://github.com/ConsenSys/teku/commit/0ee9adbbe5fc4431b167db88ae998d0f7a81d520", "message": "moved test\n\nSigned-off-by: Sally MacFarlane <sally.macfarlane@consensys.net>", "committedDate": "2020-03-20T05:24:14Z", "type": "commit"}, {"oid": "480ab775fee5eb2049829b1b7a46d6716542510d", "url": "https://github.com/ConsenSys/teku/commit/480ab775fee5eb2049829b1b7a46d6716542510d", "message": "fixed test\n\nSigned-off-by: Sally MacFarlane <sally.macfarlane@consensys.net>", "committedDate": "2020-03-20T05:33:01Z", "type": "commit"}, {"oid": "343dd60a45409749cc6973753203a7f32bc4be58", "url": "https://github.com/ConsenSys/teku/commit/343dd60a45409749cc6973753203a7f32bc4be58", "message": "merge\n\nSigned-off-by: Sally MacFarlane <sally.macfarlane@consensys.net>", "committedDate": "2020-03-20T05:54:54Z", "type": "commit"}, {"oid": "96b2901cdfec7d8bf8a2f082b74c7c81bf1ae976", "url": "https://github.com/ConsenSys/teku/commit/96b2901cdfec7d8bf8a2f082b74c7c81bf1ae976", "message": "merge\n\nSigned-off-by: Sally MacFarlane <sally.macfarlane@consensys.net>", "committedDate": "2020-03-20T05:56:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjEzNjE1Mg==", "url": "https://github.com/ConsenSys/teku/pull/1415#discussion_r396136152", "bodyText": "final", "author": "rolfyone", "createdAt": "2020-03-22T20:17:06Z", "path": "data/provider/src/main/java/tech/pegasys/artemis/api/ValidatorDataProvider.java", "diffHunk": "@@ -13,21 +13,48 @@\n \n package tech.pegasys.artemis.api;\n \n+import static tech.pegasys.artemis.util.async.SafeFuture.completedFuture;\n+\n+import com.google.common.annotations.VisibleForTesting;\n import com.google.common.primitives.UnsignedLong;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n import java.util.Optional;\n+import java.util.stream.Collectors;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.apache.tuweni.bytes.Bytes48;\n+import tech.pegasys.artemis.api.exceptions.ChainDataUnavailableException;\n import tech.pegasys.artemis.api.schema.Attestation;\n+import tech.pegasys.artemis.api.schema.BLSPubKey;\n import tech.pegasys.artemis.api.schema.BLSSignature;\n import tech.pegasys.artemis.api.schema.BeaconBlock;\n+import tech.pegasys.artemis.api.schema.ValidatorDuties;\n+import tech.pegasys.artemis.api.schema.ValidatorDutiesRequest;\n+import tech.pegasys.artemis.datastructures.state.CommitteeAssignment;\n+import tech.pegasys.artemis.datastructures.util.BeaconStateUtil;\n+import tech.pegasys.artemis.storage.CombinedChainDataClient;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+import tech.pegasys.artemis.util.bls.BLSPublicKey;\n+import tech.pegasys.artemis.util.config.Constants;\n import tech.pegasys.artemis.validator.coordinator.ValidatorCoordinator;\n \n public class ValidatorDataProvider {\n   private volatile ValidatorCoordinator validatorCoordinator;\n+  private CombinedChainDataClient combinedChainDataClient;\n   private static final Logger LOG = LogManager.getLogger();\n \n-  public ValidatorDataProvider(ValidatorCoordinator validatorCoordinator) {\n+  public ValidatorDataProvider(\n+      ValidatorCoordinator validatorCoordinator, CombinedChainDataClient combinedChainDataClient) {", "originalCommit": "343dd60a45409749cc6973753203a7f32bc4be58", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3ebe343f6d8a9c8a8a3725062c8ec7f528abe433", "chunk": "diff --git a/data/provider/src/main/java/tech/pegasys/artemis/api/ValidatorDataProvider.java b/data/provider/src/main/java/tech/pegasys/artemis/api/ValidatorDataProvider.java\nindex bf83b95b0..1f62fc906 100644\n--- a/data/provider/src/main/java/tech/pegasys/artemis/api/ValidatorDataProvider.java\n+++ b/data/provider/src/main/java/tech/pegasys/artemis/api/ValidatorDataProvider.java\n\n@@ -48,7 +48,8 @@ public class ValidatorDataProvider {\n   private static final Logger LOG = LogManager.getLogger();\n \n   public ValidatorDataProvider(\n-      ValidatorCoordinator validatorCoordinator, CombinedChainDataClient combinedChainDataClient) {\n+      final ValidatorCoordinator validatorCoordinator,\n+      final CombinedChainDataClient combinedChainDataClient) {\n     this.validatorCoordinator = validatorCoordinator;\n     this.combinedChainDataClient = combinedChainDataClient;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjEzNjE5NA==", "url": "https://github.com/ConsenSys/teku/pull/1415#discussion_r396136194", "bodyText": "final", "author": "rolfyone", "createdAt": "2020-03-22T20:17:29Z", "path": "data/provider/src/main/java/tech/pegasys/artemis/api/ChainDataProvider.java", "diffHunk": "@@ -197,85 +188,32 @@ CombinedChainDataClient getCombinedChainDataClient() {\n     return Optional.of(attestation);\n   }\n \n-  public boolean isFinalized(SignedBeaconBlock signedBeaconBlock) {\n-    return combinedChainDataClient.isFinalized(signedBeaconBlock.message.slot);\n-  }\n-\n-  public boolean isFinalized(UnsignedLong slot) {\n-    return combinedChainDataClient.isFinalized(slot);\n-  }\n-\n   public SafeFuture<Optional<BeaconValidators>> getValidatorsByValidatorsRequest(\n       final ValidatorsRequest request) {\n     UnsignedLong slot =\n         request.epoch == null\n-            ? chainStorageClient.getBestSlot()\n+            ? combinedChainDataClient.getBestSlot()\n             : BeaconStateUtil.compute_start_slot_at_epoch(request.epoch);\n \n-    return getStateAtSlot(slot)\n+    return combinedChainDataClient\n+        .getStateAtSlot(slot)\n         .thenApply(\n             optionalBeaconState -> {\n               if (optionalBeaconState.isEmpty()) {\n                 return Optional.empty();\n               }\n-              return Optional.of(new BeaconValidators(optionalBeaconState.get(), request.pubkeys));\n+              return Optional.of(\n+                  new BeaconValidators(\n+                      new BeaconState(optionalBeaconState.get()), request.pubkeys));\n             });\n   }\n \n-  public SafeFuture<List<ValidatorDuties>> getValidatorDutiesByRequest(\n-      final ValidatorDutiesRequest validatorDutiesRequest) {\n-\n-    if (validatorDutiesRequest == null || !isStoreAvailable()) {\n-      return SafeFuture.failedFuture(new ChainDataUnavailableException());\n-    }\n-    final Optional<Bytes32> optionalBlockRoot = getBestBlockRoot();\n-    if (optionalBlockRoot.isEmpty()) {\n-      return completedFuture(List.of());\n-    }\n-\n-    UnsignedLong epoch = validatorDutiesRequest.epoch;\n-    UnsignedLong slot = BeaconStateUtil.compute_start_slot_at_epoch(epoch);\n-    final Bytes32 headBlockRoot = optionalBlockRoot.get();\n-    return combinedChainDataClient\n-        .getStateAtSlot(slot, headBlockRoot)\n-        .thenApply(\n-            state -> getValidatorDutiesFromState(state.get(), validatorDutiesRequest.pubkeys))\n-        .exceptionally(err -> List.of());\n-  }\n-\n-  @VisibleForTesting\n-  protected List<ValidatorDuties> getValidatorDutiesFromState(\n-      final tech.pegasys.artemis.datastructures.state.BeaconState state,\n-      final List<BLSPubKey> pubKeys) {\n-    final List<ValidatorDuties> dutiesList = new ArrayList<>();\n-\n-    final List<CommitteeAssignment> committees =\n-        combinedChainDataClient.getCommitteesFromState(state, state.getSlot());\n-\n-    for (final BLSPubKey pubKey : pubKeys) {\n-      final ValidatorDuties validatorDuties =\n-          ValidatorsUtil.getValidatorIndex(state, BLSPublicKey.fromBytes(pubKey.toBytes()))\n-              .map(\n-                  validatorIndex ->\n-                      new ValidatorDuties(\n-                          pubKey, validatorIndex, getCommitteeIndex(committees, validatorIndex)))\n-              .orElseGet(() -> new ValidatorDuties(pubKey, null, null));\n-      dutiesList.add(validatorDuties);\n-    }\n-    return dutiesList;\n+  public boolean isFinalized(SignedBeaconBlock signedBeaconBlock) {", "originalCommit": "343dd60a45409749cc6973753203a7f32bc4be58", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3ebe343f6d8a9c8a8a3725062c8ec7f528abe433", "chunk": "diff --git a/data/provider/src/main/java/tech/pegasys/artemis/api/ChainDataProvider.java b/data/provider/src/main/java/tech/pegasys/artemis/api/ChainDataProvider.java\nindex 729af0025..6de7b49ae 100644\n--- a/data/provider/src/main/java/tech/pegasys/artemis/api/ChainDataProvider.java\n+++ b/data/provider/src/main/java/tech/pegasys/artemis/api/ChainDataProvider.java\n\n@@ -208,11 +208,11 @@ public class ChainDataProvider {\n             });\n   }\n \n-  public boolean isFinalized(SignedBeaconBlock signedBeaconBlock) {\n+  public boolean isFinalized(final SignedBeaconBlock signedBeaconBlock) {\n     return combinedChainDataClient.isFinalized(signedBeaconBlock.message.slot);\n   }\n \n-  public boolean isFinalized(UnsignedLong slot) {\n+  public boolean isFinalized(final UnsignedLong slot) {\n     return combinedChainDataClient.isFinalized(slot);\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjEzNjI4MQ==", "url": "https://github.com/ConsenSys/teku/pull/1415#discussion_r396136281", "bodyText": "final", "author": "rolfyone", "createdAt": "2020-03-22T20:18:09Z", "path": "data/provider/src/main/java/tech/pegasys/artemis/api/ChainDataProvider.java", "diffHunk": "@@ -197,85 +188,32 @@ CombinedChainDataClient getCombinedChainDataClient() {\n     return Optional.of(attestation);\n   }\n \n-  public boolean isFinalized(SignedBeaconBlock signedBeaconBlock) {\n-    return combinedChainDataClient.isFinalized(signedBeaconBlock.message.slot);\n-  }\n-\n-  public boolean isFinalized(UnsignedLong slot) {\n-    return combinedChainDataClient.isFinalized(slot);\n-  }\n-\n   public SafeFuture<Optional<BeaconValidators>> getValidatorsByValidatorsRequest(\n       final ValidatorsRequest request) {\n     UnsignedLong slot =\n         request.epoch == null\n-            ? chainStorageClient.getBestSlot()\n+            ? combinedChainDataClient.getBestSlot()\n             : BeaconStateUtil.compute_start_slot_at_epoch(request.epoch);\n \n-    return getStateAtSlot(slot)\n+    return combinedChainDataClient\n+        .getStateAtSlot(slot)\n         .thenApply(\n             optionalBeaconState -> {\n               if (optionalBeaconState.isEmpty()) {\n                 return Optional.empty();\n               }\n-              return Optional.of(new BeaconValidators(optionalBeaconState.get(), request.pubkeys));\n+              return Optional.of(\n+                  new BeaconValidators(\n+                      new BeaconState(optionalBeaconState.get()), request.pubkeys));\n             });\n   }\n \n-  public SafeFuture<List<ValidatorDuties>> getValidatorDutiesByRequest(\n-      final ValidatorDutiesRequest validatorDutiesRequest) {\n-\n-    if (validatorDutiesRequest == null || !isStoreAvailable()) {\n-      return SafeFuture.failedFuture(new ChainDataUnavailableException());\n-    }\n-    final Optional<Bytes32> optionalBlockRoot = getBestBlockRoot();\n-    if (optionalBlockRoot.isEmpty()) {\n-      return completedFuture(List.of());\n-    }\n-\n-    UnsignedLong epoch = validatorDutiesRequest.epoch;\n-    UnsignedLong slot = BeaconStateUtil.compute_start_slot_at_epoch(epoch);\n-    final Bytes32 headBlockRoot = optionalBlockRoot.get();\n-    return combinedChainDataClient\n-        .getStateAtSlot(slot, headBlockRoot)\n-        .thenApply(\n-            state -> getValidatorDutiesFromState(state.get(), validatorDutiesRequest.pubkeys))\n-        .exceptionally(err -> List.of());\n-  }\n-\n-  @VisibleForTesting\n-  protected List<ValidatorDuties> getValidatorDutiesFromState(\n-      final tech.pegasys.artemis.datastructures.state.BeaconState state,\n-      final List<BLSPubKey> pubKeys) {\n-    final List<ValidatorDuties> dutiesList = new ArrayList<>();\n-\n-    final List<CommitteeAssignment> committees =\n-        combinedChainDataClient.getCommitteesFromState(state, state.getSlot());\n-\n-    for (final BLSPubKey pubKey : pubKeys) {\n-      final ValidatorDuties validatorDuties =\n-          ValidatorsUtil.getValidatorIndex(state, BLSPublicKey.fromBytes(pubKey.toBytes()))\n-              .map(\n-                  validatorIndex ->\n-                      new ValidatorDuties(\n-                          pubKey, validatorIndex, getCommitteeIndex(committees, validatorIndex)))\n-              .orElseGet(() -> new ValidatorDuties(pubKey, null, null));\n-      dutiesList.add(validatorDuties);\n-    }\n-    return dutiesList;\n+  public boolean isFinalized(SignedBeaconBlock signedBeaconBlock) {\n+    return combinedChainDataClient.isFinalized(signedBeaconBlock.message.slot);\n   }\n \n-  @VisibleForTesting\n-  protected Integer getCommitteeIndex(List<CommitteeAssignment> committees, int validatorIndex) {\n-    Optional<CommitteeAssignment> matchingCommittee =\n-        committees.stream()\n-            .filter(committee -> committee.getCommittee().contains(validatorIndex))\n-            .findFirst();\n-    if (matchingCommittee.isPresent()) {\n-      return committees.indexOf(matchingCommittee.get());\n-    } else {\n-      return null;\n-    }\n+  public boolean isFinalized(UnsignedLong slot) {", "originalCommit": "343dd60a45409749cc6973753203a7f32bc4be58", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3ebe343f6d8a9c8a8a3725062c8ec7f528abe433", "chunk": "diff --git a/data/provider/src/main/java/tech/pegasys/artemis/api/ChainDataProvider.java b/data/provider/src/main/java/tech/pegasys/artemis/api/ChainDataProvider.java\nindex 729af0025..6de7b49ae 100644\n--- a/data/provider/src/main/java/tech/pegasys/artemis/api/ChainDataProvider.java\n+++ b/data/provider/src/main/java/tech/pegasys/artemis/api/ChainDataProvider.java\n\n@@ -208,11 +208,11 @@ public class ChainDataProvider {\n             });\n   }\n \n-  public boolean isFinalized(SignedBeaconBlock signedBeaconBlock) {\n+  public boolean isFinalized(final SignedBeaconBlock signedBeaconBlock) {\n     return combinedChainDataClient.isFinalized(signedBeaconBlock.message.slot);\n   }\n \n-  public boolean isFinalized(UnsignedLong slot) {\n+  public boolean isFinalized(final UnsignedLong slot) {\n     return combinedChainDataClient.isFinalized(slot);\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjEzNjM4Mw==", "url": "https://github.com/ConsenSys/teku/pull/1415#discussion_r396136383", "bodyText": "nice", "author": "rolfyone", "createdAt": "2020-03-22T20:19:29Z", "path": "data/provider/src/main/java/tech/pegasys/artemis/api/ValidatorDataProvider.java", "diffHunk": "@@ -53,6 +80,96 @@ public ValidatorDataProvider(ValidatorCoordinator validatorCoordinator) {\n     return Optional.empty();\n   }\n \n+  public SafeFuture<List<ValidatorDuties>> getValidatorDutiesByRequest(\n+      final ValidatorDutiesRequest validatorDutiesRequest) {\n+\n+    if (validatorDutiesRequest == null || !combinedChainDataClient.isStoreAvailable()) {\n+      return SafeFuture.failedFuture(new ChainDataUnavailableException());", "originalCommit": "343dd60a45409749cc6973753203a7f32bc4be58", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjEzNjU2OA==", "url": "https://github.com/ConsenSys/teku/pull/1415#discussion_r396136568", "bodyText": "can probably use a bytes constructor here, haven't looked at bytes48 and publickey specifically, but most of those structures are allowing it", "author": "rolfyone", "createdAt": "2020-03-22T20:21:33Z", "path": "data/provider/src/main/java/tech/pegasys/artemis/api/ValidatorDataProvider.java", "diffHunk": "@@ -53,6 +80,96 @@ public ValidatorDataProvider(ValidatorCoordinator validatorCoordinator) {\n     return Optional.empty();\n   }\n \n+  public SafeFuture<List<ValidatorDuties>> getValidatorDutiesByRequest(\n+      final ValidatorDutiesRequest validatorDutiesRequest) {\n+\n+    if (validatorDutiesRequest == null || !combinedChainDataClient.isStoreAvailable()) {\n+      return SafeFuture.failedFuture(new ChainDataUnavailableException());\n+    }\n+    final Optional<Bytes32> optionalBlockRoot = combinedChainDataClient.getBestBlockRoot();\n+    if (optionalBlockRoot.isEmpty()) {\n+      return completedFuture(List.of());\n+    }\n+\n+    UnsignedLong epoch = validatorDutiesRequest.epoch;\n+    UnsignedLong slot = BeaconStateUtil.compute_start_slot_at_epoch(epoch);\n+    final Bytes32 headBlockRoot = optionalBlockRoot.get();\n+    return combinedChainDataClient\n+        .getStateAtSlot(slot, headBlockRoot)\n+        .thenApply(\n+            state -> getValidatorDutiesFromState(state.get(), validatorDutiesRequest.pubkeys))\n+        .exceptionally(err -> List.of());\n+  }\n+\n+  @VisibleForTesting\n+  protected List<ValidatorDuties> getValidatorDutiesFromState(\n+      final tech.pegasys.artemis.datastructures.state.BeaconState state,\n+      final List<BLSPubKey> pubKeys) {\n+    final List<ValidatorDuties> dutiesList = new ArrayList<>();\n+\n+    final List<CommitteeAssignment> committees =\n+        combinedChainDataClient.getCommitteesFromState(state, state.getSlot());\n+    final UnsignedLong firstSlot = state.getSlot();\n+    Map<BLSPubKey, List<UnsignedLong>> proposers = new HashMap<>();\n+\n+    for (int i = 0; i < Constants.SLOTS_PER_EPOCH; i++) {\n+      final UnsignedLong thisSlot = firstSlot.plus(UnsignedLong.valueOf(i));\n+      BLSPublicKey publicKey = validatorCoordinator.getProposerForSlot(state, thisSlot);\n+      BLSPubKey pubkey = new BLSPubKey(publicKey.toBytes());\n+      if (proposers.containsKey(pubkey)) {\n+        List<UnsignedLong> proposalSlots = proposers.get(pubkey);\n+        proposalSlots.add(thisSlot);\n+      } else {\n+        proposers.put(pubkey, List.of(thisSlot).stream().collect(Collectors.toList()));\n+      }\n+    }\n+\n+    for (final BLSPubKey pubKey : pubKeys) {\n+      final Integer validatorIndex = getValidatorIndex(state.getValidators().asList(), pubKey);\n+      if (validatorIndex == null) {\n+        dutiesList.add(new ValidatorDuties(pubKey, null, null, List.of()));\n+      } else {\n+        List<UnsignedLong> proposedSlots = proposers.getOrDefault(pubKey, List.of());\n+        dutiesList.add(\n+            new ValidatorDuties(\n+                pubKey,\n+                validatorIndex,\n+                getCommitteeIndex(committees, validatorIndex),\n+                proposedSlots));\n+      }\n+    }\n+    return dutiesList;\n+  }\n+\n+  @VisibleForTesting\n+  protected static Integer getValidatorIndex(\n+      final List<tech.pegasys.artemis.datastructures.state.Validator> validators,\n+      final BLSPubKey publicKey) {\n+    Optional<tech.pegasys.artemis.datastructures.state.Validator> optionalValidator =\n+        validators.stream()\n+            .filter(\n+                v -> Bytes48.fromHexString(publicKey.toHexString()).equals(v.getPubkey().toBytes()))", "originalCommit": "343dd60a45409749cc6973753203a7f32bc4be58", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjEzNjYxOQ==", "url": "https://github.com/ConsenSys/teku/pull/1415#discussion_r396136619", "bodyText": "final", "author": "rolfyone", "createdAt": "2020-03-22T20:22:09Z", "path": "data/provider/src/main/java/tech/pegasys/artemis/api/ValidatorDataProvider.java", "diffHunk": "@@ -53,6 +80,96 @@ public ValidatorDataProvider(ValidatorCoordinator validatorCoordinator) {\n     return Optional.empty();\n   }\n \n+  public SafeFuture<List<ValidatorDuties>> getValidatorDutiesByRequest(\n+      final ValidatorDutiesRequest validatorDutiesRequest) {\n+\n+    if (validatorDutiesRequest == null || !combinedChainDataClient.isStoreAvailable()) {\n+      return SafeFuture.failedFuture(new ChainDataUnavailableException());\n+    }\n+    final Optional<Bytes32> optionalBlockRoot = combinedChainDataClient.getBestBlockRoot();\n+    if (optionalBlockRoot.isEmpty()) {\n+      return completedFuture(List.of());\n+    }\n+\n+    UnsignedLong epoch = validatorDutiesRequest.epoch;\n+    UnsignedLong slot = BeaconStateUtil.compute_start_slot_at_epoch(epoch);\n+    final Bytes32 headBlockRoot = optionalBlockRoot.get();\n+    return combinedChainDataClient\n+        .getStateAtSlot(slot, headBlockRoot)\n+        .thenApply(\n+            state -> getValidatorDutiesFromState(state.get(), validatorDutiesRequest.pubkeys))\n+        .exceptionally(err -> List.of());\n+  }\n+\n+  @VisibleForTesting\n+  protected List<ValidatorDuties> getValidatorDutiesFromState(\n+      final tech.pegasys.artemis.datastructures.state.BeaconState state,\n+      final List<BLSPubKey> pubKeys) {\n+    final List<ValidatorDuties> dutiesList = new ArrayList<>();\n+\n+    final List<CommitteeAssignment> committees =\n+        combinedChainDataClient.getCommitteesFromState(state, state.getSlot());\n+    final UnsignedLong firstSlot = state.getSlot();\n+    Map<BLSPubKey, List<UnsignedLong>> proposers = new HashMap<>();\n+\n+    for (int i = 0; i < Constants.SLOTS_PER_EPOCH; i++) {\n+      final UnsignedLong thisSlot = firstSlot.plus(UnsignedLong.valueOf(i));\n+      BLSPublicKey publicKey = validatorCoordinator.getProposerForSlot(state, thisSlot);\n+      BLSPubKey pubkey = new BLSPubKey(publicKey.toBytes());\n+      if (proposers.containsKey(pubkey)) {\n+        List<UnsignedLong> proposalSlots = proposers.get(pubkey);\n+        proposalSlots.add(thisSlot);\n+      } else {\n+        proposers.put(pubkey, List.of(thisSlot).stream().collect(Collectors.toList()));\n+      }\n+    }\n+\n+    for (final BLSPubKey pubKey : pubKeys) {\n+      final Integer validatorIndex = getValidatorIndex(state.getValidators().asList(), pubKey);\n+      if (validatorIndex == null) {\n+        dutiesList.add(new ValidatorDuties(pubKey, null, null, List.of()));\n+      } else {\n+        List<UnsignedLong> proposedSlots = proposers.getOrDefault(pubKey, List.of());\n+        dutiesList.add(\n+            new ValidatorDuties(\n+                pubKey,\n+                validatorIndex,\n+                getCommitteeIndex(committees, validatorIndex),\n+                proposedSlots));\n+      }\n+    }\n+    return dutiesList;\n+  }\n+\n+  @VisibleForTesting\n+  protected static Integer getValidatorIndex(\n+      final List<tech.pegasys.artemis.datastructures.state.Validator> validators,\n+      final BLSPubKey publicKey) {\n+    Optional<tech.pegasys.artemis.datastructures.state.Validator> optionalValidator =\n+        validators.stream()\n+            .filter(\n+                v -> Bytes48.fromHexString(publicKey.toHexString()).equals(v.getPubkey().toBytes()))\n+            .findFirst();\n+    if (optionalValidator.isPresent()) {\n+      return validators.indexOf(optionalValidator.get());\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  @VisibleForTesting\n+  protected Integer getCommitteeIndex(List<CommitteeAssignment> committees, int validatorIndex) {", "originalCommit": "343dd60a45409749cc6973753203a7f32bc4be58", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjEzNzMzMw==", "url": "https://github.com/ConsenSys/teku/pull/1415#discussion_r396137333", "bodyText": "to have this much code before the function under test is of concern to me. i'm not sure if we need to refactor, break out the setup, or something, but this is huge for a unit test...", "author": "rolfyone", "createdAt": "2020-03-22T20:29:30Z", "path": "data/provider/src/test/java/tech/pegasys/artemis/api/ValidatorDataProviderTest.java", "diffHunk": "@@ -102,6 +133,170 @@ private void shouldThrowDataProviderExceptionAfterGettingException(Exception ex)\n   }\n \n   @Test\n+  void getValidatorIndex_shouldReturnNotFoundIfNotFound() {\n+    BLSPubKey pubKey = new BLSPubKey(dataStructureUtil.randomPublicKey().toBytes());\n+    Integer validatorIndex = ValidatorDataProvider.getValidatorIndex(List.of(), pubKey);\n+    assertThat(validatorIndex).isEqualTo(null);\n+  }\n+\n+  @Test\n+  void getValidatorIndex_shouldReturnIndexIfFound() {\n+    tech.pegasys.artemis.datastructures.state.BeaconState beaconStateInternal =\n+        dataStructureUtil.randomBeaconState();\n+    BeaconState state = new BeaconState(beaconStateInternal);\n+    // all the validators are the same so the first one will match\n+    int expectedValidatorIndex = 0;\n+    BLSPubKey pubKey = state.validators.get(expectedValidatorIndex).pubkey;\n+    int actualValidatorIndex =\n+        ValidatorDataProvider.getValidatorIndex(\n+            beaconStateInternal.getValidators().asList(), pubKey);\n+    assertThat(actualValidatorIndex).isEqualTo(expectedValidatorIndex);\n+  }\n+\n+  @Test\n+  void getCommitteeIndex_shouldReturnNotFoundIfNotFound() {\n+    ValidatorDataProvider provider =\n+        new ValidatorDataProvider(validatorCoordinator, combinedChainDataClient);\n+    Integer committeeIndex = provider.getCommitteeIndex(List.of(), 99);\n+    assertThat(committeeIndex).isEqualTo(null);\n+  }\n+\n+  @Test\n+  void getCommitteeIndex_shouldReturnIndexIfFound() {\n+    ValidatorDataProvider provider =\n+        new ValidatorDataProvider(validatorCoordinator, combinedChainDataClient);\n+    UnsignedLong committeeIndex = dataStructureUtil.randomUnsignedLong();\n+    CommitteeAssignment committeeAssignment1 =\n+        new CommitteeAssignment(List.of(4, 5, 6), committeeIndex, slot);\n+    CommitteeAssignment committeeAssignment2 =\n+        new CommitteeAssignment(List.of(3, 2, 1), committeeIndex, slot);\n+    int validatorCommitteeIndex =\n+        provider.getCommitteeIndex(List.of(committeeAssignment1, committeeAssignment2), 1);\n+    assertThat(validatorCommitteeIndex).isEqualTo(1);\n+  }\n+\n+  @Test\n+  void getValidatorDutiesFromState() {\n+    tech.pegasys.artemis.datastructures.state.BeaconState beaconStateInternal =\n+        dataStructureUtil.randomBeaconState();\n+    ValidatorDataProvider provider =\n+        new ValidatorDataProvider(validatorCoordinator, combinedChainDataClient);\n+    List<CommitteeAssignment> committees = List.of();\n+    when(combinedChainDataClient.getCommitteesFromState(any(), any())).thenReturn(committees);\n+    when(validatorCoordinator.getProposerForSlot(any(), any())).thenReturn(pubKey1);\n+\n+    List<ValidatorDuties> dutiesList =\n+        provider.getValidatorDutiesFromState(\n+            beaconStateInternal,\n+            List.of(pubKey1, pubKey2).stream()\n+                .map(k -> new BLSPubKey(k.toBytes()))\n+                .collect(Collectors.toList()));\n+    // TODO can do better than this\n+    assertThat(dutiesList.size()).isEqualTo(2);\n+    verify(combinedChainDataClient).getCommitteesFromState(any(), any());\n+    verify(validatorCoordinator, times(8)).getProposerForSlot(any(), any());\n+  }\n+\n+  @Test\n+  void getValidatorsDutiesByRequest_shouldIncludeMissingValidators()\n+      throws ExecutionException, InterruptedException {\n+    ValidatorDataProvider provider =\n+        new ValidatorDataProvider(validatorCoordinator, combinedChainDataClient);\n+    ValidatorDutiesRequest smallRequest =\n+        new ValidatorDutiesRequest(\n+            compute_epoch_at_slot(beaconState.slot), List.of(BLSPubKey.empty()));\n+    when(validatorCoordinator.getProposerForSlot(any(), any())).thenReturn(pubKey1);\n+    when(combinedChainDataClient.isStoreAvailable()).thenReturn(true);\n+    when(combinedChainDataClient.getBestBlockRoot()).thenReturn(Optional.of(blockRoot));\n+    when(combinedChainDataClient.getStateAtSlot(any(), any()))\n+        .thenReturn(completedFuture(Optional.of(beaconStateInternal)));\n+    when(combinedChainDataClient.getCommitteesFromState(any(), eq(beaconState.slot)))\n+        .thenReturn(List.of());\n+\n+    SafeFuture<List<ValidatorDuties>> future = provider.getValidatorDutiesByRequest(smallRequest);\n+    List<ValidatorDuties> validatorDuties = future.get();\n+\n+    assertThat(validatorDuties.size()).isEqualTo(1);\n+    ValidatorDuties expected = new ValidatorDuties(BLSPubKey.empty(), null, null, List.of());\n+    assertThat(validatorDuties.get(0)).isEqualToComparingFieldByField(expected);\n+  }\n+\n+  @Test\n+  void getValidatorDutiesByRequest_shouldIncludeValidatorDuties()\n+      throws ExecutionException, InterruptedException {\n+    // add a validator with a different pubkey since by default they are all the same\n+    tech.pegasys.artemis.datastructures.state.BeaconState alteredInternalState =\n+        addValidator(beaconStateInternal);\n+\n+    BeaconState alteredState = new BeaconState(alteredInternalState);\n+    int addedValidatorIndex = alteredState.validators.size() - 1;\n+    when(validatorCoordinator.getProposerForSlot(any(), any()))\n+        .thenReturn(alteredInternalState.getValidators().get(addedValidatorIndex).getPubkey());\n+\n+    ValidatorDataProvider provider =\n+        new ValidatorDataProvider(validatorCoordinator, combinedChainDataClient);\n+    ValidatorDutiesRequest validatorDutiesByRequest =\n+        new ValidatorDutiesRequest(\n+            compute_epoch_at_slot(beaconState.slot),\n+            List.of(\n+                alteredState.validators.get(0).pubkey,\n+                alteredState.validators.get(11).pubkey,\n+                alteredState.validators.get(addedValidatorIndex).pubkey));\n+    CommitteeAssignment ca1 = new CommitteeAssignment(List.of(3, 2, 1, 0), ZERO, alteredState.slot);\n+    CommitteeAssignment ca2 =\n+        new CommitteeAssignment(List.of(11, 22, 33, addedValidatorIndex), ZERO, alteredState.slot);\n+    List<CommitteeAssignment> committeeAssignments = List.of(ca1, ca2);\n+    List<UnsignedLong> allEpochSlots = getEpochSlotsFromStartSlot(beaconState.slot);\n+\n+    when(combinedChainDataClient.isStoreAvailable()).thenReturn(true);\n+    when(combinedChainDataClient.getBestBlockRoot()).thenReturn(Optional.of(blockRoot));\n+    when(combinedChainDataClient.getStateAtSlot(any(), any()))\n+        .thenReturn(completedFuture(Optional.of(alteredInternalState)));\n+    when(combinedChainDataClient.getCommitteesFromState(any(), eq(alteredInternalState.getSlot())))\n+        .thenReturn(committeeAssignments);", "originalCommit": "343dd60a45409749cc6973753203a7f32bc4be58", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjEzNzM3Mw==", "url": "https://github.com/ConsenSys/teku/pull/1415#discussion_r396137373", "bodyText": "ok so is this meant to stay here? can we word it nicely? what's not right?", "author": "rolfyone", "createdAt": "2020-03-22T20:30:04Z", "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/ValidatorsUtil.java", "diffHunk": "@@ -107,7 +107,8 @@ public static boolean is_eligible_for_activation(BeaconState state, Validator va\n                       return i;\n                     }\n                   }\n-                  return null;\n+                  // TODO this ain't right", "originalCommit": "343dd60a45409749cc6973753203a7f32bc4be58", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99b4fd0188d7b8ceceaf6e3cd79bf86331029b32", "chunk": "diff --git a/ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/ValidatorsUtil.java b/ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/ValidatorsUtil.java\nindex 132c135c5..e31dd6a9c 100644\n--- a/ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/ValidatorsUtil.java\n+++ b/ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/ValidatorsUtil.java\n\n@@ -107,7 +107,7 @@ public class ValidatorsUtil {\n                       return i;\n                     }\n                   }\n-                  // TODO this ain't right\n+                  // TODO this ain't right but it will be filtered out by the line below\n                   return Integer.MAX_VALUE;\n                 });\n     return Optional.ofNullable(validatorIndex)\n"}}, {"oid": "99b4fd0188d7b8ceceaf6e3cd79bf86331029b32", "url": "https://github.com/ConsenSys/teku/commit/99b4fd0188d7b8ceceaf6e3cd79bf86331029b32", "message": "Merge branch 'master' of github.com:PegaSysEng/teku into proposer-slot", "committedDate": "2020-03-23T00:13:32Z", "type": "commit"}, {"oid": "3ccbe8472ed8ddf6998ec738d995b2b6e040e47d", "url": "https://github.com/ConsenSys/teku/commit/3ccbe8472ed8ddf6998ec738d995b2b6e040e47d", "message": "merge\n\nSigned-off-by: Sally MacFarlane <sally.macfarlane@consensys.net>", "committedDate": "2020-03-23T00:17:59Z", "type": "commit"}, {"oid": "3ebe343f6d8a9c8a8a3725062c8ec7f528abe433", "url": "https://github.com/ConsenSys/teku/commit/3ebe343f6d8a9c8a8a3725062c8ec7f528abe433", "message": "finals\n\nSigned-off-by: Sally MacFarlane <sally.macfarlane@consensys.net>", "committedDate": "2020-03-23T00:20:21Z", "type": "commit"}]}