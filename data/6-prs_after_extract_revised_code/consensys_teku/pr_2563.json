{"pr_number": 2563, "pr_title": "[issue 2003] added a new option to load keystore files in bulk", "pr_createdAt": "2020-08-12T02:09:45Z", "pr_url": "https://github.com/ConsenSys/teku/pull/2563", "timeline": [{"oid": "3e59cfe7a7a7b6af662c3f12c044c170399884da", "url": "https://github.com/ConsenSys/teku/commit/3e59cfe7a7a7b6af662c3f12c044c170399884da", "message": "WIP\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-08-12T00:00:49Z", "type": "commit"}, {"oid": "eb2b9c9c8ee5c08d4dc3feb699f07036bd4646ff", "url": "https://github.com/ConsenSys/teku/commit/eb2b9c9c8ee5c08d4dc3feb699f07036bd4646ff", "message": "Merge remote-tracking branch 'upstream/master' into 2003-keys-directory", "committedDate": "2020-08-12T00:01:07Z", "type": "commit"}, {"oid": "7d2fa560d4e3809ceb6f8c2285befbf0e6cd7cb2", "url": "https://github.com/ConsenSys/teku/commit/7d2fa560d4e3809ceb6f8c2285befbf0e6cd7cb2", "message": "added a new option to load keystore files in bulk\n\n - `--validator-keys` takes a path separated list of paths to allow bulk loading of key files and password files\n\n - each pair keyDir:passDir (separated by ; on windows)  will be loaded as one logical grouping of key and password files.\n\n - the file locator looks for json files if a directory was passed in, and matches all json files with a .txt password file in the password path.\n\n Fixes #2003\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-08-12T02:06:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk2NDY0Mw==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r468964643", "bodyText": "@bgravenorst wondering if I could get some help explaining this? It's currently pretty long, and you might have ideas about how i can clean it up", "author": "rolfyone", "createdAt": "2020-08-12T02:11:45Z", "path": "teku/src/main/java/tech/pegasys/teku/cli/options/ValidatorOptions.java", "diffHunk": "@@ -20,12 +20,25 @@\n import tech.pegasys.teku.util.cli.GraffitiConverter;\n \n public class ValidatorOptions {\n+  @Option(\n+      names = {\"--validator-keys\"},\n+      paramLabel = \"<KEY_PATH>:<PASS_PATH>\",\n+      description =\n+          \"Where KEY_PATH is either a directory or file, and PASS_PATH is the associated password path. \"\n+              + \"keysDir:passDir will find keysDir/**.json, and expect to find passDir/**.txt. \"\n+              + \"keyFile:passFile will expect that the file 'keyFile' exists, \"\n+              + \"and the file containing the password for it is 'passFile'. \"\n+              + \"The path separator is operating system dependent, and should be ';' in windows rather than ':'.\",", "originalCommit": "7d2fa560d4e3809ceb6f8c2285befbf0e6cd7cb2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a2877192f859317636e697c9ca1ec55953e73d71", "chunk": "diff --git a/teku/src/main/java/tech/pegasys/teku/cli/options/ValidatorOptions.java b/teku/src/main/java/tech/pegasys/teku/cli/options/ValidatorOptions.java\nindex efa2a9bb0f..d7cc722e03 100644\n--- a/teku/src/main/java/tech/pegasys/teku/cli/options/ValidatorOptions.java\n+++ b/teku/src/main/java/tech/pegasys/teku/cli/options/ValidatorOptions.java\n\n@@ -22,12 +22,11 @@ import tech.pegasys.teku.util.cli.GraffitiConverter;\n public class ValidatorOptions {\n   @Option(\n       names = {\"--validator-keys\"},\n-      paramLabel = \"<KEY_PATH>:<PASS_PATH>\",\n+      paramLabel = \"<KEY_DIR>:<PASS_DIR> | <KEY_FILE>:<PASS_FILE>\",\n       description =\n-          \"Where KEY_PATH is either a directory or file, and PASS_PATH is the associated password path. \"\n-              + \"keysDir:passDir will find keysDir/**.json, and expect to find passDir/**.txt. \"\n-              + \"keyFile:passFile will expect that the file 'keyFile' exists, \"\n-              + \"and the file containing the password for it is 'passFile'. \"\n+          \"<KEY_DIR>:<PASS_DIR> will find <KEY_DIR>/**.json, and expect to find <PASS_DIR>/**.txt.\\n\"\n+              + \"<KEY_FILE>:<PASS_FILE> will expect that the file <KEY_FILE> exists, \"\n+              + \"and the file containing the password for it is <PASS_FILE>.\\n\"\n               + \"The path separator is operating system dependent, and should be ';' in windows rather than ':'.\",\n       split = \",\",\n       arity = \"1..*\")\n"}}, {"oid": "3192baf115162757ee8bda174908001ab04ce807", "url": "https://github.com/ConsenSys/teku/commit/3192baf115162757ee8bda174908001ab04ce807", "message": "Merge remote-tracking branch 'upstream/master' into 2003-keys-directory", "committedDate": "2020-08-12T02:58:34Z", "type": "commit"}, {"oid": "a2877192f859317636e697c9ca1ec55953e73d71", "url": "https://github.com/ConsenSys/teku/commit/a2877192f859317636e697c9ca1ec55953e73d71", "message": "update command line options description.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-08-12T03:59:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwMzg2NA==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r469003864", "bodyText": "Can we initialise this to new ArrayList<>() so that it's always non-null?", "author": "ajsutton", "createdAt": "2020-08-12T04:52:38Z", "path": "teku/src/main/java/tech/pegasys/teku/cli/options/ValidatorOptions.java", "diffHunk": "@@ -20,12 +20,24 @@\n import tech.pegasys.teku.util.cli.GraffitiConverter;\n \n public class ValidatorOptions {\n+  @Option(\n+      names = {\"--validator-keys\"},\n+      paramLabel = \"<KEY_DIR>:<PASS_DIR> | <KEY_FILE>:<PASS_FILE>\",\n+      description =\n+          \"<KEY_DIR>:<PASS_DIR> will find <KEY_DIR>/**.json, and expect to find <PASS_DIR>/**.txt.\\n\"\n+              + \"<KEY_FILE>:<PASS_FILE> will expect that the file <KEY_FILE> exists, \"\n+              + \"and the file containing the password for it is <PASS_FILE>.\\n\"\n+              + \"The path separator is operating system dependent, and should be ';' in windows rather than ':'.\",\n+      split = \",\",\n+      arity = \"1..*\")\n+  private List<String> validatorKeys;", "originalCommit": "a2877192f859317636e697c9ca1ec55953e73d71", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "20241fe2f46bf26833336cf41110fd5628f361a0", "chunk": "diff --git a/teku/src/main/java/tech/pegasys/teku/cli/options/ValidatorOptions.java b/teku/src/main/java/tech/pegasys/teku/cli/options/ValidatorOptions.java\nindex d7cc722e03..c1f61445d8 100644\n--- a/teku/src/main/java/tech/pegasys/teku/cli/options/ValidatorOptions.java\n+++ b/teku/src/main/java/tech/pegasys/teku/cli/options/ValidatorOptions.java\n\n@@ -30,7 +30,7 @@ public class ValidatorOptions {\n               + \"The path separator is operating system dependent, and should be ';' in windows rather than ':'.\",\n       split = \",\",\n       arity = \"1..*\")\n-  private List<String> validatorKeys;\n+  private List<String> validatorKeys = new ArrayList<>();\n \n   @Option(\n       names = {\"--validators-key-files\"},\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwNDIyMQ==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r469004221", "bodyText": "And can we then make this just take List<String>?  Optional<List> is better avoided unless there's some important difference between empty and not set.", "author": "ajsutton", "createdAt": "2020-08-12T04:54:08Z", "path": "util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.util.config;\n+\n+import com.google.common.base.Splitter;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class KeyStoreFilesLocator {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final List<Pair<Path, Path>> filePairs;\n+  private final Map<Path, Path> pathMap;\n+  private final List<String> colonSeparatedPairs;\n+  private final String pathSeparator;\n+\n+  public KeyStoreFilesLocator(\n+      Optional<List<String>> maybeColonSeparatedPairs, final String pathSeparator) {", "originalCommit": "a2877192f859317636e697c9ca1ec55953e73d71", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUxMTc3NA==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r469511774", "bodyText": "this was purely because the cmdline was giving me a null and i figured null checks were going to get me pinged...", "author": "rolfyone", "createdAt": "2020-08-12T20:10:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwNDIyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "20241fe2f46bf26833336cf41110fd5628f361a0", "chunk": "diff --git a/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java b/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java\nindex 770aae678a..4787939262 100644\n--- a/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java\n+++ b/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java\n\n@@ -13,12 +13,13 @@\n \n package tech.pegasys.teku.util.config;\n \n+import static java.util.stream.Collectors.toList;\n+\n import com.google.common.base.Splitter;\n import java.io.File;\n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n-import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwNTA5OA==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r469005098", "bodyText": "This isn't using the file separator char correctly.  Suspect we can just drop this check and just use the first instance of the separator to split the parts.  If there are multiple separators it's likely to be rejected because the password isn't found but if it happens to work out that's ok.", "author": "ajsutton", "createdAt": "2020-08-12T04:57:22Z", "path": "util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.util.config;\n+\n+import com.google.common.base.Splitter;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class KeyStoreFilesLocator {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final List<Pair<Path, Path>> filePairs;\n+  private final Map<Path, Path> pathMap;\n+  private final List<String> colonSeparatedPairs;\n+  private final String pathSeparator;\n+\n+  public KeyStoreFilesLocator(\n+      Optional<List<String>> maybeColonSeparatedPairs, final String pathSeparator) {\n+    this.filePairs = new ArrayList<>();\n+    this.colonSeparatedPairs = maybeColonSeparatedPairs.orElse(List.of());\n+    this.pathMap = new HashMap<>();\n+    this.pathSeparator = pathSeparator;\n+  }\n+\n+  public void parse() {\n+    for (final String currentEntry : colonSeparatedPairs) {\n+      if (!currentEntry.contains(pathSeparator)) {\n+        throw new InvalidConfigurationException(\n+            \"validatorKeys entry (\"\n+                + currentEntry\n+                + \") did not contain key and password separated by '\"\n+                + pathSeparator\n+                + \"' as expected.\");\n+      }\n+      if (currentEntry.matches(\".*:.*:.*\")) {", "originalCommit": "a2877192f859317636e697c9ca1ec55953e73d71", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUxMjE0OQ==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r469512149", "bodyText": "eep that's a good find, i thought i got everywhere.", "author": "rolfyone", "createdAt": "2020-08-12T20:11:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwNTA5OA=="}], "type": "inlineReview", "revised_code": {"commit": "20241fe2f46bf26833336cf41110fd5628f361a0", "chunk": "diff --git a/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java b/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java\nindex 770aae678a..4787939262 100644\n--- a/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java\n+++ b/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java\n\n@@ -13,12 +13,13 @@\n \n package tech.pegasys.teku.util.config;\n \n+import static java.util.stream.Collectors.toList;\n+\n import com.google.common.base.Splitter;\n import java.io.File;\n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n-import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwNTUxMw==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r469005513", "bodyText": "This would then be\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  final List<String> entry = Splitter.on(pathSeparator).splitToList(currentEntry);\n          \n          \n            \n                  parseEntry(entry.get(0), entry.get(1));\n          \n          \n            \n                  final List<String> entry = Splitter.on(pathSeparator).limit(2).splitToList(currentEntry);\n          \n          \n            \n                  parseEntry(entry.get(0), entry.get(1));", "author": "ajsutton", "createdAt": "2020-08-12T04:58:55Z", "path": "util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.util.config;\n+\n+import com.google.common.base.Splitter;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class KeyStoreFilesLocator {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final List<Pair<Path, Path>> filePairs;\n+  private final Map<Path, Path> pathMap;\n+  private final List<String> colonSeparatedPairs;\n+  private final String pathSeparator;\n+\n+  public KeyStoreFilesLocator(\n+      Optional<List<String>> maybeColonSeparatedPairs, final String pathSeparator) {\n+    this.filePairs = new ArrayList<>();\n+    this.colonSeparatedPairs = maybeColonSeparatedPairs.orElse(List.of());\n+    this.pathMap = new HashMap<>();\n+    this.pathSeparator = pathSeparator;\n+  }\n+\n+  public void parse() {\n+    for (final String currentEntry : colonSeparatedPairs) {\n+      if (!currentEntry.contains(pathSeparator)) {\n+        throw new InvalidConfigurationException(\n+            \"validatorKeys entry (\"\n+                + currentEntry\n+                + \") did not contain key and password separated by '\"\n+                + pathSeparator\n+                + \"' as expected.\");\n+      }\n+      if (currentEntry.matches(\".*:.*:.*\")) {\n+        throw new InvalidConfigurationException(\n+            \"validatorKeys entry (\"\n+                + currentEntry\n+                + \") contained more than one '\"\n+                + pathSeparator\n+                + \"', not keyFile'\"\n+                + pathSeparator\n+                + \"'passFile as expected.\");\n+      }\n+      final List<String> entry = Splitter.on(pathSeparator).splitToList(currentEntry);\n+      parseEntry(entry.get(0), entry.get(1));", "originalCommit": "a2877192f859317636e697c9ca1ec55953e73d71", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "20241fe2f46bf26833336cf41110fd5628f361a0", "chunk": "diff --git a/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java b/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java\nindex 770aae678a..4787939262 100644\n--- a/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java\n+++ b/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java\n\n@@ -13,12 +13,13 @@\n \n package tech.pegasys.teku.util.config;\n \n+import static java.util.stream.Collectors.toList;\n+\n import com.google.common.base.Splitter;\n import java.io.File;\n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n-import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwNjA0Nw==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r469006047", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      String.format(\"Invalid configuration. could not find the key file (%s).\", keyFileName));\n          \n          \n            \n                      String.format(\"Invalid configuration. Could not find the keystore file (%s).\", keyFileName));", "author": "ajsutton", "createdAt": "2020-08-12T05:01:05Z", "path": "util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.util.config;\n+\n+import com.google.common.base.Splitter;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class KeyStoreFilesLocator {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final List<Pair<Path, Path>> filePairs;\n+  private final Map<Path, Path> pathMap;\n+  private final List<String> colonSeparatedPairs;\n+  private final String pathSeparator;\n+\n+  public KeyStoreFilesLocator(\n+      Optional<List<String>> maybeColonSeparatedPairs, final String pathSeparator) {\n+    this.filePairs = new ArrayList<>();\n+    this.colonSeparatedPairs = maybeColonSeparatedPairs.orElse(List.of());\n+    this.pathMap = new HashMap<>();\n+    this.pathSeparator = pathSeparator;\n+  }\n+\n+  public void parse() {\n+    for (final String currentEntry : colonSeparatedPairs) {\n+      if (!currentEntry.contains(pathSeparator)) {\n+        throw new InvalidConfigurationException(\n+            \"validatorKeys entry (\"\n+                + currentEntry\n+                + \") did not contain key and password separated by '\"\n+                + pathSeparator\n+                + \"' as expected.\");\n+      }\n+      if (currentEntry.matches(\".*:.*:.*\")) {\n+        throw new InvalidConfigurationException(\n+            \"validatorKeys entry (\"\n+                + currentEntry\n+                + \") contained more than one '\"\n+                + pathSeparator\n+                + \"', not keyFile'\"\n+                + pathSeparator\n+                + \"'passFile as expected.\");\n+      }\n+      final List<String> entry = Splitter.on(pathSeparator).splitToList(currentEntry);\n+      parseEntry(entry.get(0), entry.get(1));\n+    }\n+  }\n+\n+  public void parseKeyAndPasswordList(\n+      final List<String> keystoreFiles, final List<String> keystorePasswordFiles) {\n+    for (int i = 0; i < keystoreFiles.size(); i++) {\n+      parseEntry(keystoreFiles.get(i), keystorePasswordFiles.get(i));\n+    }\n+  }\n+\n+  void parseEntry(final String keyFileName, final String passwordFileName) {\n+    final File keyFile = new File(keyFileName);\n+    final File passwordFile = new File(passwordFileName);\n+\n+    if (!keyFile.exists()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\"Invalid configuration. could not find the key file (%s).\", keyFileName));", "originalCommit": "a2877192f859317636e697c9ca1ec55953e73d71", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "20241fe2f46bf26833336cf41110fd5628f361a0", "chunk": "diff --git a/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java b/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java\nindex 770aae678a..4787939262 100644\n--- a/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java\n+++ b/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java\n\n@@ -13,12 +13,13 @@\n \n package tech.pegasys.teku.util.config;\n \n+import static java.util.stream.Collectors.toList;\n+\n import com.google.common.base.Splitter;\n import java.io.File;\n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n-import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwNjA4Mg==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r469006082", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          \"Invalid configuration. could not find the password file (%s).\", passwordFileName));\n          \n          \n            \n                          \"Invalid configuration. Could not find the password file (%s).\", passwordFileName));", "author": "ajsutton", "createdAt": "2020-08-12T05:01:13Z", "path": "util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.util.config;\n+\n+import com.google.common.base.Splitter;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class KeyStoreFilesLocator {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final List<Pair<Path, Path>> filePairs;\n+  private final Map<Path, Path> pathMap;\n+  private final List<String> colonSeparatedPairs;\n+  private final String pathSeparator;\n+\n+  public KeyStoreFilesLocator(\n+      Optional<List<String>> maybeColonSeparatedPairs, final String pathSeparator) {\n+    this.filePairs = new ArrayList<>();\n+    this.colonSeparatedPairs = maybeColonSeparatedPairs.orElse(List.of());\n+    this.pathMap = new HashMap<>();\n+    this.pathSeparator = pathSeparator;\n+  }\n+\n+  public void parse() {\n+    for (final String currentEntry : colonSeparatedPairs) {\n+      if (!currentEntry.contains(pathSeparator)) {\n+        throw new InvalidConfigurationException(\n+            \"validatorKeys entry (\"\n+                + currentEntry\n+                + \") did not contain key and password separated by '\"\n+                + pathSeparator\n+                + \"' as expected.\");\n+      }\n+      if (currentEntry.matches(\".*:.*:.*\")) {\n+        throw new InvalidConfigurationException(\n+            \"validatorKeys entry (\"\n+                + currentEntry\n+                + \") contained more than one '\"\n+                + pathSeparator\n+                + \"', not keyFile'\"\n+                + pathSeparator\n+                + \"'passFile as expected.\");\n+      }\n+      final List<String> entry = Splitter.on(pathSeparator).splitToList(currentEntry);\n+      parseEntry(entry.get(0), entry.get(1));\n+    }\n+  }\n+\n+  public void parseKeyAndPasswordList(\n+      final List<String> keystoreFiles, final List<String> keystorePasswordFiles) {\n+    for (int i = 0; i < keystoreFiles.size(); i++) {\n+      parseEntry(keystoreFiles.get(i), keystorePasswordFiles.get(i));\n+    }\n+  }\n+\n+  void parseEntry(final String keyFileName, final String passwordFileName) {\n+    final File keyFile = new File(keyFileName);\n+    final File passwordFile = new File(passwordFileName);\n+\n+    if (!keyFile.exists()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\"Invalid configuration. could not find the key file (%s).\", keyFileName));\n+    }\n+    if (!passwordFile.exists()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\n+              \"Invalid configuration. could not find the password file (%s).\", passwordFileName));", "originalCommit": "a2877192f859317636e697c9ca1ec55953e73d71", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "20241fe2f46bf26833336cf41110fd5628f361a0", "chunk": "diff --git a/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java b/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java\nindex 770aae678a..4787939262 100644\n--- a/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java\n+++ b/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java\n\n@@ -13,12 +13,13 @@\n \n package tech.pegasys.teku.util.config;\n \n+import static java.util.stream.Collectors.toList;\n+\n import com.google.common.base.Splitter;\n import java.io.File;\n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n-import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwNjM5Mg==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r469006392", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          \"Invalid configuration. validatorKeys entry (%s\"\n          \n          \n            \n                              + pathSeparator\n          \n          \n            \n                              + \"%s) must be both directories or both files\",\n          \n          \n            \n                          \"Invalid configuration. --validatorKeys entry (%s\"\n          \n          \n            \n                              + pathSeparator\n          \n          \n            \n                              + \"%s) must be both directories or both files.\",", "author": "ajsutton", "createdAt": "2020-08-12T05:02:30Z", "path": "util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.util.config;\n+\n+import com.google.common.base.Splitter;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class KeyStoreFilesLocator {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final List<Pair<Path, Path>> filePairs;\n+  private final Map<Path, Path> pathMap;\n+  private final List<String> colonSeparatedPairs;\n+  private final String pathSeparator;\n+\n+  public KeyStoreFilesLocator(\n+      Optional<List<String>> maybeColonSeparatedPairs, final String pathSeparator) {\n+    this.filePairs = new ArrayList<>();\n+    this.colonSeparatedPairs = maybeColonSeparatedPairs.orElse(List.of());\n+    this.pathMap = new HashMap<>();\n+    this.pathSeparator = pathSeparator;\n+  }\n+\n+  public void parse() {\n+    for (final String currentEntry : colonSeparatedPairs) {\n+      if (!currentEntry.contains(pathSeparator)) {\n+        throw new InvalidConfigurationException(\n+            \"validatorKeys entry (\"\n+                + currentEntry\n+                + \") did not contain key and password separated by '\"\n+                + pathSeparator\n+                + \"' as expected.\");\n+      }\n+      if (currentEntry.matches(\".*:.*:.*\")) {\n+        throw new InvalidConfigurationException(\n+            \"validatorKeys entry (\"\n+                + currentEntry\n+                + \") contained more than one '\"\n+                + pathSeparator\n+                + \"', not keyFile'\"\n+                + pathSeparator\n+                + \"'passFile as expected.\");\n+      }\n+      final List<String> entry = Splitter.on(pathSeparator).splitToList(currentEntry);\n+      parseEntry(entry.get(0), entry.get(1));\n+    }\n+  }\n+\n+  public void parseKeyAndPasswordList(\n+      final List<String> keystoreFiles, final List<String> keystorePasswordFiles) {\n+    for (int i = 0; i < keystoreFiles.size(); i++) {\n+      parseEntry(keystoreFiles.get(i), keystorePasswordFiles.get(i));\n+    }\n+  }\n+\n+  void parseEntry(final String keyFileName, final String passwordFileName) {\n+    final File keyFile = new File(keyFileName);\n+    final File passwordFile = new File(passwordFileName);\n+\n+    if (!keyFile.exists()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\"Invalid configuration. could not find the key file (%s).\", keyFileName));\n+    }\n+    if (!passwordFile.exists()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\n+              \"Invalid configuration. could not find the password file (%s).\", passwordFileName));\n+    }\n+    if (keyFile.isDirectory() != passwordFile.isDirectory()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\n+              \"Invalid configuration. validatorKeys entry (%s\"\n+                  + pathSeparator\n+                  + \"%s) must be both directories or both files\",", "originalCommit": "a2877192f859317636e697c9ca1ec55953e73d71", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "20241fe2f46bf26833336cf41110fd5628f361a0", "chunk": "diff --git a/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java b/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java\nindex 770aae678a..4787939262 100644\n--- a/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java\n+++ b/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java\n\n@@ -13,12 +13,13 @@\n \n package tech.pegasys.teku.util.config;\n \n+import static java.util.stream.Collectors.toList;\n+\n import com.google.common.base.Splitter;\n import java.io.File;\n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n-import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwNjkzMw==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r469006933", "bodyText": "I'm not sure filePairs is doing anything useful, do we still need it?", "author": "ajsutton", "createdAt": "2020-08-12T05:04:44Z", "path": "util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.util.config;\n+\n+import com.google.common.base.Splitter;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class KeyStoreFilesLocator {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final List<Pair<Path, Path>> filePairs;\n+  private final Map<Path, Path> pathMap;\n+  private final List<String> colonSeparatedPairs;\n+  private final String pathSeparator;\n+\n+  public KeyStoreFilesLocator(\n+      Optional<List<String>> maybeColonSeparatedPairs, final String pathSeparator) {\n+    this.filePairs = new ArrayList<>();\n+    this.colonSeparatedPairs = maybeColonSeparatedPairs.orElse(List.of());\n+    this.pathMap = new HashMap<>();\n+    this.pathSeparator = pathSeparator;\n+  }\n+\n+  public void parse() {\n+    for (final String currentEntry : colonSeparatedPairs) {\n+      if (!currentEntry.contains(pathSeparator)) {\n+        throw new InvalidConfigurationException(\n+            \"validatorKeys entry (\"\n+                + currentEntry\n+                + \") did not contain key and password separated by '\"\n+                + pathSeparator\n+                + \"' as expected.\");\n+      }\n+      if (currentEntry.matches(\".*:.*:.*\")) {\n+        throw new InvalidConfigurationException(\n+            \"validatorKeys entry (\"\n+                + currentEntry\n+                + \") contained more than one '\"\n+                + pathSeparator\n+                + \"', not keyFile'\"\n+                + pathSeparator\n+                + \"'passFile as expected.\");\n+      }\n+      final List<String> entry = Splitter.on(pathSeparator).splitToList(currentEntry);\n+      parseEntry(entry.get(0), entry.get(1));\n+    }\n+  }\n+\n+  public void parseKeyAndPasswordList(\n+      final List<String> keystoreFiles, final List<String> keystorePasswordFiles) {\n+    for (int i = 0; i < keystoreFiles.size(); i++) {\n+      parseEntry(keystoreFiles.get(i), keystorePasswordFiles.get(i));\n+    }\n+  }\n+\n+  void parseEntry(final String keyFileName, final String passwordFileName) {\n+    final File keyFile = new File(keyFileName);\n+    final File passwordFile = new File(passwordFileName);\n+\n+    if (!keyFile.exists()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\"Invalid configuration. could not find the key file (%s).\", keyFileName));\n+    }\n+    if (!passwordFile.exists()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\n+              \"Invalid configuration. could not find the password file (%s).\", passwordFileName));\n+    }\n+    if (keyFile.isDirectory() != passwordFile.isDirectory()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\n+              \"Invalid configuration. validatorKeys entry (%s\"\n+                  + pathSeparator\n+                  + \"%s) must be both directories or both files\",\n+              keyFileName,\n+              passwordFileName));\n+    }\n+    if (keyFile.isFile()) {\n+      pathMap.putIfAbsent(keyFile.toPath(), passwordFile.toPath());\n+      filePairs.add(Pair.of(keyFile.toPath(), passwordFile.toPath()));", "originalCommit": "a2877192f859317636e697c9ca1ec55953e73d71", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUxODkzMA==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r469518930", "bodyText": "that was v.0 implementation floating around that i managed not to clean up :/ the map gives us easier de-duping, and i removed some but apparently not all of the old list.", "author": "rolfyone", "createdAt": "2020-08-12T20:25:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwNjkzMw=="}], "type": "inlineReview", "revised_code": {"commit": "20241fe2f46bf26833336cf41110fd5628f361a0", "chunk": "diff --git a/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java b/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java\nindex 770aae678a..4787939262 100644\n--- a/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java\n+++ b/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java\n\n@@ -13,12 +13,13 @@\n \n package tech.pegasys.teku.util.config;\n \n+import static java.util.stream.Collectors.toList;\n+\n import com.google.common.base.Splitter;\n import java.io.File;\n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n-import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwNzIyNw==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r469007227", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final List<Pair<Path, Path>> pairs = new ArrayList<>();\n          \n          \n            \n                pathMap.forEach((k, v) -> pairs.add(Pair.of(k, v)));\n          \n          \n            \n                return pairs;\n          \n          \n            \n                return pathMap.entrySet().stream().map(entry -> Pair.of(entry.getKey(), entry.getValue())).collect(toList());", "author": "ajsutton", "createdAt": "2020-08-12T05:05:52Z", "path": "util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.util.config;\n+\n+import com.google.common.base.Splitter;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class KeyStoreFilesLocator {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final List<Pair<Path, Path>> filePairs;\n+  private final Map<Path, Path> pathMap;\n+  private final List<String> colonSeparatedPairs;\n+  private final String pathSeparator;\n+\n+  public KeyStoreFilesLocator(\n+      Optional<List<String>> maybeColonSeparatedPairs, final String pathSeparator) {\n+    this.filePairs = new ArrayList<>();\n+    this.colonSeparatedPairs = maybeColonSeparatedPairs.orElse(List.of());\n+    this.pathMap = new HashMap<>();\n+    this.pathSeparator = pathSeparator;\n+  }\n+\n+  public void parse() {\n+    for (final String currentEntry : colonSeparatedPairs) {\n+      if (!currentEntry.contains(pathSeparator)) {\n+        throw new InvalidConfigurationException(\n+            \"validatorKeys entry (\"\n+                + currentEntry\n+                + \") did not contain key and password separated by '\"\n+                + pathSeparator\n+                + \"' as expected.\");\n+      }\n+      if (currentEntry.matches(\".*:.*:.*\")) {\n+        throw new InvalidConfigurationException(\n+            \"validatorKeys entry (\"\n+                + currentEntry\n+                + \") contained more than one '\"\n+                + pathSeparator\n+                + \"', not keyFile'\"\n+                + pathSeparator\n+                + \"'passFile as expected.\");\n+      }\n+      final List<String> entry = Splitter.on(pathSeparator).splitToList(currentEntry);\n+      parseEntry(entry.get(0), entry.get(1));\n+    }\n+  }\n+\n+  public void parseKeyAndPasswordList(\n+      final List<String> keystoreFiles, final List<String> keystorePasswordFiles) {\n+    for (int i = 0; i < keystoreFiles.size(); i++) {\n+      parseEntry(keystoreFiles.get(i), keystorePasswordFiles.get(i));\n+    }\n+  }\n+\n+  void parseEntry(final String keyFileName, final String passwordFileName) {\n+    final File keyFile = new File(keyFileName);\n+    final File passwordFile = new File(passwordFileName);\n+\n+    if (!keyFile.exists()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\"Invalid configuration. could not find the key file (%s).\", keyFileName));\n+    }\n+    if (!passwordFile.exists()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\n+              \"Invalid configuration. could not find the password file (%s).\", passwordFileName));\n+    }\n+    if (keyFile.isDirectory() != passwordFile.isDirectory()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\n+              \"Invalid configuration. validatorKeys entry (%s\"\n+                  + pathSeparator\n+                  + \"%s) must be both directories or both files\",\n+              keyFileName,\n+              passwordFileName));\n+    }\n+    if (keyFile.isFile()) {\n+      pathMap.putIfAbsent(keyFile.toPath(), passwordFile.toPath());\n+      filePairs.add(Pair.of(keyFile.toPath(), passwordFile.toPath()));\n+    } else {\n+      parseDirectory(keyFile, passwordFile);\n+    }\n+  }\n+\n+  void parseDirectory(final File keyDirectory, final File passwordDirectory) {\n+    final String keyBasePath = keyDirectory.getAbsolutePath();\n+    final String passwordBasePath = passwordDirectory.getAbsolutePath();\n+    try (Stream<Path> walk = Files.walk(keyDirectory.toPath())) {\n+      walk.filter(Files::isRegularFile)\n+          .filter(\n+              (path) ->\n+                  !path.getFileName().toString().startsWith(\".\")\n+                      && path.toString().endsWith(\".json\"))\n+          .forEach(\n+              path -> {\n+                final String keyFilename = path.toAbsolutePath().toString();\n+                final String passwordFileExpectedLocation =\n+                    keyFilename\n+                        .substring(0, keyFilename.length() - 5)\n+                        .replace(keyBasePath, passwordBasePath);\n+                final Optional<File> maybePassFile = findPassFile(passwordFileExpectedLocation);\n+                if (maybePassFile.isEmpty()) {\n+                  throw new InvalidConfigurationException(\n+                      String.format(\n+                          \"Invalid configuration. No matching password file for (%s) in the key path. \"\n+                              + \"For key file 'f.json', expect to see password 'f.txt'.\",\n+                          path.toAbsolutePath().toString()));\n+                }\n+                pathMap.putIfAbsent(path, maybePassFile.get().toPath());\n+              });\n+    } catch (IOException e) {\n+      LOG.fatal(\"Failed to load keys from keystore\", e);\n+    }\n+  }\n+\n+  private Optional<File> findPassFile(final String absolutePassPathWithoutExtension) {\n+    // bin type will be added here soon most likely.\n+    List<String> extensions = List.of(\"txt\");\n+    for (String ext : extensions) {\n+      final File file = new File(absolutePassPathWithoutExtension + \".\" + ext);\n+      if (file.exists() && file.isFile()) {\n+        return Optional.of(file);\n+      }\n+    }\n+    return Optional.empty();\n+  }\n+\n+  public List<Pair<Path, Path>> getFilePairs() {\n+    final List<Pair<Path, Path>> pairs = new ArrayList<>();\n+    pathMap.forEach((k, v) -> pairs.add(Pair.of(k, v)));\n+    return pairs;", "originalCommit": "a2877192f859317636e697c9ca1ec55953e73d71", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "20241fe2f46bf26833336cf41110fd5628f361a0", "chunk": "diff --git a/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java b/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java\nindex 770aae678a..4787939262 100644\n--- a/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java\n+++ b/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java\n\n@@ -13,12 +13,13 @@\n \n package tech.pegasys.teku.util.config;\n \n+import static java.util.stream.Collectors.toList;\n+\n import com.google.common.base.Splitter;\n import java.io.File;\n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n-import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAxMDA5Ng==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r469010096", "bodyText": "The example f.json in this message is quite misleading for users. It should list the specific file paths that we attempted to load.", "author": "ajsutton", "createdAt": "2020-08-12T05:17:00Z", "path": "util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.util.config;\n+\n+import com.google.common.base.Splitter;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class KeyStoreFilesLocator {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final List<Pair<Path, Path>> filePairs;\n+  private final Map<Path, Path> pathMap;\n+  private final List<String> colonSeparatedPairs;\n+  private final String pathSeparator;\n+\n+  public KeyStoreFilesLocator(\n+      Optional<List<String>> maybeColonSeparatedPairs, final String pathSeparator) {\n+    this.filePairs = new ArrayList<>();\n+    this.colonSeparatedPairs = maybeColonSeparatedPairs.orElse(List.of());\n+    this.pathMap = new HashMap<>();\n+    this.pathSeparator = pathSeparator;\n+  }\n+\n+  public void parse() {\n+    for (final String currentEntry : colonSeparatedPairs) {\n+      if (!currentEntry.contains(pathSeparator)) {\n+        throw new InvalidConfigurationException(\n+            \"validatorKeys entry (\"\n+                + currentEntry\n+                + \") did not contain key and password separated by '\"\n+                + pathSeparator\n+                + \"' as expected.\");\n+      }\n+      if (currentEntry.matches(\".*:.*:.*\")) {\n+        throw new InvalidConfigurationException(\n+            \"validatorKeys entry (\"\n+                + currentEntry\n+                + \") contained more than one '\"\n+                + pathSeparator\n+                + \"', not keyFile'\"\n+                + pathSeparator\n+                + \"'passFile as expected.\");\n+      }\n+      final List<String> entry = Splitter.on(pathSeparator).splitToList(currentEntry);\n+      parseEntry(entry.get(0), entry.get(1));\n+    }\n+  }\n+\n+  public void parseKeyAndPasswordList(\n+      final List<String> keystoreFiles, final List<String> keystorePasswordFiles) {\n+    for (int i = 0; i < keystoreFiles.size(); i++) {\n+      parseEntry(keystoreFiles.get(i), keystorePasswordFiles.get(i));\n+    }\n+  }\n+\n+  void parseEntry(final String keyFileName, final String passwordFileName) {\n+    final File keyFile = new File(keyFileName);\n+    final File passwordFile = new File(passwordFileName);\n+\n+    if (!keyFile.exists()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\"Invalid configuration. could not find the key file (%s).\", keyFileName));\n+    }\n+    if (!passwordFile.exists()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\n+              \"Invalid configuration. could not find the password file (%s).\", passwordFileName));\n+    }\n+    if (keyFile.isDirectory() != passwordFile.isDirectory()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\n+              \"Invalid configuration. validatorKeys entry (%s\"\n+                  + pathSeparator\n+                  + \"%s) must be both directories or both files\",\n+              keyFileName,\n+              passwordFileName));\n+    }\n+    if (keyFile.isFile()) {\n+      pathMap.putIfAbsent(keyFile.toPath(), passwordFile.toPath());\n+      filePairs.add(Pair.of(keyFile.toPath(), passwordFile.toPath()));\n+    } else {\n+      parseDirectory(keyFile, passwordFile);\n+    }\n+  }\n+\n+  void parseDirectory(final File keyDirectory, final File passwordDirectory) {\n+    final String keyBasePath = keyDirectory.getAbsolutePath();\n+    final String passwordBasePath = passwordDirectory.getAbsolutePath();\n+    try (Stream<Path> walk = Files.walk(keyDirectory.toPath())) {\n+      walk.filter(Files::isRegularFile)\n+          .filter(\n+              (path) ->\n+                  !path.getFileName().toString().startsWith(\".\")\n+                      && path.toString().endsWith(\".json\"))\n+          .forEach(\n+              path -> {\n+                final String keyFilename = path.toAbsolutePath().toString();\n+                final String passwordFileExpectedLocation =\n+                    keyFilename\n+                        .substring(0, keyFilename.length() - 5)\n+                        .replace(keyBasePath, passwordBasePath);\n+                final Optional<File> maybePassFile = findPassFile(passwordFileExpectedLocation);\n+                if (maybePassFile.isEmpty()) {\n+                  throw new InvalidConfigurationException(\n+                      String.format(\n+                          \"Invalid configuration. No matching password file for (%s) in the key path. \"\n+                              + \"For key file 'f.json', expect to see password 'f.txt'.\",", "originalCommit": "a2877192f859317636e697c9ca1ec55953e73d71", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUyMTgwOQ==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r469521809", "bodyText": "hrm ok. i was attempting to give a concrete example of the expectation, because 'no matching password file' didnt seem to me to do the whole job, but i can remove the example?", "author": "rolfyone", "createdAt": "2020-08-12T20:30:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAxMDA5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "20241fe2f46bf26833336cf41110fd5628f361a0", "chunk": "diff --git a/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java b/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java\nindex 770aae678a..4787939262 100644\n--- a/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java\n+++ b/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java\n\n@@ -13,12 +13,13 @@\n \n package tech.pegasys.teku.util.config;\n \n+import static java.util.stream.Collectors.toList;\n+\n import com.google.common.base.Splitter;\n import java.io.File;\n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n-import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAxMTEzNQ==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r469011135", "bodyText": "This won't necessarily handle symlinks correctly as toAbsolutePath sometimes returns the resolved path (it's filesystem dependent).\nI think it will have to be:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            final String keyFilename = path.toAbsolutePath().toString();\n          \n          \n            \n                            final String passwordFileExpectedLocation =\n          \n          \n            \n                                keyFilename\n          \n          \n            \n                                    .substring(0, keyFilename.length() - 5)\n          \n          \n            \n                                    .replace(keyBasePath, passwordBasePath);\n          \n          \n            \n                            final Optional<File> maybePassFile = findPassFile(passwordFileExpectedLocation);\n          \n          \n            \n                            final Path relativeDirectoryPath = keyDirectory.toPath().relativize(path.getParent());\n          \n          \n            \n                            final String keystoreName = path.getFileName().toString();\n          \n          \n            \n                            final Path passwordPath =\n          \n          \n            \n                                passwordDirectory\n          \n          \n            \n                                    .toPath()\n          \n          \n            \n                                    .resolve(relativeDirectoryPath)\n          \n          \n            \n                                    .resolve(\n          \n          \n            \n                                        keystoreName.substring(0, keystoreName.length() - \".json\".length()));\n          \n          \n            \n                            final Optional<File> maybePassFile =\n          \n          \n            \n                                findPassFile(passwordPath.toAbsolutePath().toString());", "author": "ajsutton", "createdAt": "2020-08-12T05:21:05Z", "path": "util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.util.config;\n+\n+import com.google.common.base.Splitter;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class KeyStoreFilesLocator {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final List<Pair<Path, Path>> filePairs;\n+  private final Map<Path, Path> pathMap;\n+  private final List<String> colonSeparatedPairs;\n+  private final String pathSeparator;\n+\n+  public KeyStoreFilesLocator(\n+      Optional<List<String>> maybeColonSeparatedPairs, final String pathSeparator) {\n+    this.filePairs = new ArrayList<>();\n+    this.colonSeparatedPairs = maybeColonSeparatedPairs.orElse(List.of());\n+    this.pathMap = new HashMap<>();\n+    this.pathSeparator = pathSeparator;\n+  }\n+\n+  public void parse() {\n+    for (final String currentEntry : colonSeparatedPairs) {\n+      if (!currentEntry.contains(pathSeparator)) {\n+        throw new InvalidConfigurationException(\n+            \"validatorKeys entry (\"\n+                + currentEntry\n+                + \") did not contain key and password separated by '\"\n+                + pathSeparator\n+                + \"' as expected.\");\n+      }\n+      if (currentEntry.matches(\".*:.*:.*\")) {\n+        throw new InvalidConfigurationException(\n+            \"validatorKeys entry (\"\n+                + currentEntry\n+                + \") contained more than one '\"\n+                + pathSeparator\n+                + \"', not keyFile'\"\n+                + pathSeparator\n+                + \"'passFile as expected.\");\n+      }\n+      final List<String> entry = Splitter.on(pathSeparator).splitToList(currentEntry);\n+      parseEntry(entry.get(0), entry.get(1));\n+    }\n+  }\n+\n+  public void parseKeyAndPasswordList(\n+      final List<String> keystoreFiles, final List<String> keystorePasswordFiles) {\n+    for (int i = 0; i < keystoreFiles.size(); i++) {\n+      parseEntry(keystoreFiles.get(i), keystorePasswordFiles.get(i));\n+    }\n+  }\n+\n+  void parseEntry(final String keyFileName, final String passwordFileName) {\n+    final File keyFile = new File(keyFileName);\n+    final File passwordFile = new File(passwordFileName);\n+\n+    if (!keyFile.exists()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\"Invalid configuration. could not find the key file (%s).\", keyFileName));\n+    }\n+    if (!passwordFile.exists()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\n+              \"Invalid configuration. could not find the password file (%s).\", passwordFileName));\n+    }\n+    if (keyFile.isDirectory() != passwordFile.isDirectory()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\n+              \"Invalid configuration. validatorKeys entry (%s\"\n+                  + pathSeparator\n+                  + \"%s) must be both directories or both files\",\n+              keyFileName,\n+              passwordFileName));\n+    }\n+    if (keyFile.isFile()) {\n+      pathMap.putIfAbsent(keyFile.toPath(), passwordFile.toPath());\n+      filePairs.add(Pair.of(keyFile.toPath(), passwordFile.toPath()));\n+    } else {\n+      parseDirectory(keyFile, passwordFile);\n+    }\n+  }\n+\n+  void parseDirectory(final File keyDirectory, final File passwordDirectory) {\n+    final String keyBasePath = keyDirectory.getAbsolutePath();\n+    final String passwordBasePath = passwordDirectory.getAbsolutePath();\n+    try (Stream<Path> walk = Files.walk(keyDirectory.toPath())) {\n+      walk.filter(Files::isRegularFile)\n+          .filter(\n+              (path) ->\n+                  !path.getFileName().toString().startsWith(\".\")\n+                      && path.toString().endsWith(\".json\"))\n+          .forEach(\n+              path -> {\n+                final String keyFilename = path.toAbsolutePath().toString();\n+                final String passwordFileExpectedLocation =\n+                    keyFilename\n+                        .substring(0, keyFilename.length() - 5)\n+                        .replace(keyBasePath, passwordBasePath);\n+                final Optional<File> maybePassFile = findPassFile(passwordFileExpectedLocation);", "originalCommit": "a2877192f859317636e697c9ca1ec55953e73d71", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "20241fe2f46bf26833336cf41110fd5628f361a0", "chunk": "diff --git a/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java b/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java\nindex 770aae678a..4787939262 100644\n--- a/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java\n+++ b/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java\n\n@@ -13,12 +13,13 @@\n \n package tech.pegasys.teku.util.config;\n \n+import static java.util.stream.Collectors.toList;\n+\n import com.google.common.base.Splitter;\n import java.io.File;\n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n-import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAxMTU0MA==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r469011540", "bodyText": "I'd remove this comment while you're passing through here (it would be the next 6 options that moved anyway and the TODO is just not useful).", "author": "ajsutton", "createdAt": "2020-08-12T05:22:40Z", "path": "util/src/main/java/tech/pegasys/teku/util/config/TekuConfiguration.java", "diffHunk": "@@ -67,6 +67,7 @@\n   // TODO (#1918): The following two options will eventually be moved to the validator subcommand", "originalCommit": "a2877192f859317636e697c9ca1ec55953e73d71", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "20241fe2f46bf26833336cf41110fd5628f361a0", "chunk": "diff --git a/util/src/main/java/tech/pegasys/teku/util/config/TekuConfiguration.java b/util/src/main/java/tech/pegasys/teku/util/config/TekuConfiguration.java\nindex f52476fe41..69c63222be 100644\n--- a/util/src/main/java/tech/pegasys/teku/util/config/TekuConfiguration.java\n+++ b/util/src/main/java/tech/pegasys/teku/util/config/TekuConfiguration.java\n\n@@ -64,7 +64,6 @@ public class TekuConfiguration implements MetricsConfig {\n \n   // Validator\n   private final String validatorsKeyFile;\n-  // TODO (#1918): The following two options will eventually be moved to the validator subcommand\n   private final List<String> validatorKeystoreFiles;\n   private final List<String> validatorKeystorePasswordFiles;\n   private final List<String> validatorKeys;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAxMTg1MA==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r469011850", "bodyText": "Minor thing but since we're going to need to manipulate the filename later I'd make this:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                  && path.toString().endsWith(\".json\"))\n          \n          \n            \n                                  && getFileName().toString().endsWith(\".json\"))", "author": "ajsutton", "createdAt": "2020-08-12T05:23:50Z", "path": "util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.util.config;\n+\n+import com.google.common.base.Splitter;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class KeyStoreFilesLocator {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final List<Pair<Path, Path>> filePairs;\n+  private final Map<Path, Path> pathMap;\n+  private final List<String> colonSeparatedPairs;\n+  private final String pathSeparator;\n+\n+  public KeyStoreFilesLocator(\n+      Optional<List<String>> maybeColonSeparatedPairs, final String pathSeparator) {\n+    this.filePairs = new ArrayList<>();\n+    this.colonSeparatedPairs = maybeColonSeparatedPairs.orElse(List.of());\n+    this.pathMap = new HashMap<>();\n+    this.pathSeparator = pathSeparator;\n+  }\n+\n+  public void parse() {\n+    for (final String currentEntry : colonSeparatedPairs) {\n+      if (!currentEntry.contains(pathSeparator)) {\n+        throw new InvalidConfigurationException(\n+            \"validatorKeys entry (\"\n+                + currentEntry\n+                + \") did not contain key and password separated by '\"\n+                + pathSeparator\n+                + \"' as expected.\");\n+      }\n+      if (currentEntry.matches(\".*:.*:.*\")) {\n+        throw new InvalidConfigurationException(\n+            \"validatorKeys entry (\"\n+                + currentEntry\n+                + \") contained more than one '\"\n+                + pathSeparator\n+                + \"', not keyFile'\"\n+                + pathSeparator\n+                + \"'passFile as expected.\");\n+      }\n+      final List<String> entry = Splitter.on(pathSeparator).splitToList(currentEntry);\n+      parseEntry(entry.get(0), entry.get(1));\n+    }\n+  }\n+\n+  public void parseKeyAndPasswordList(\n+      final List<String> keystoreFiles, final List<String> keystorePasswordFiles) {\n+    for (int i = 0; i < keystoreFiles.size(); i++) {\n+      parseEntry(keystoreFiles.get(i), keystorePasswordFiles.get(i));\n+    }\n+  }\n+\n+  void parseEntry(final String keyFileName, final String passwordFileName) {\n+    final File keyFile = new File(keyFileName);\n+    final File passwordFile = new File(passwordFileName);\n+\n+    if (!keyFile.exists()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\"Invalid configuration. could not find the key file (%s).\", keyFileName));\n+    }\n+    if (!passwordFile.exists()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\n+              \"Invalid configuration. could not find the password file (%s).\", passwordFileName));\n+    }\n+    if (keyFile.isDirectory() != passwordFile.isDirectory()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\n+              \"Invalid configuration. validatorKeys entry (%s\"\n+                  + pathSeparator\n+                  + \"%s) must be both directories or both files\",\n+              keyFileName,\n+              passwordFileName));\n+    }\n+    if (keyFile.isFile()) {\n+      pathMap.putIfAbsent(keyFile.toPath(), passwordFile.toPath());\n+      filePairs.add(Pair.of(keyFile.toPath(), passwordFile.toPath()));\n+    } else {\n+      parseDirectory(keyFile, passwordFile);\n+    }\n+  }\n+\n+  void parseDirectory(final File keyDirectory, final File passwordDirectory) {\n+    final String keyBasePath = keyDirectory.getAbsolutePath();\n+    final String passwordBasePath = passwordDirectory.getAbsolutePath();\n+    try (Stream<Path> walk = Files.walk(keyDirectory.toPath())) {\n+      walk.filter(Files::isRegularFile)\n+          .filter(\n+              (path) ->\n+                  !path.getFileName().toString().startsWith(\".\")\n+                      && path.toString().endsWith(\".json\"))", "originalCommit": "a2877192f859317636e697c9ca1ec55953e73d71", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "20241fe2f46bf26833336cf41110fd5628f361a0", "chunk": "diff --git a/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java b/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java\nindex 770aae678a..4787939262 100644\n--- a/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java\n+++ b/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java\n\n@@ -13,12 +13,13 @@\n \n package tech.pegasys.teku.util.config;\n \n+import static java.util.stream.Collectors.toList;\n+\n import com.google.common.base.Splitter;\n import java.io.File;\n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n-import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAxMjQxOA==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r469012418", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    new File(String.format(\"%s/%s\", tempStr, k)).toPath(),\n          \n          \n            \n                    new File(String.format(\"%s/%s\", tempStr, p)).toPath());\n          \n          \n            \n                    new File(tempStr, k).toPath(),\n          \n          \n            \n                    new File(tempStr, p).toPath());", "author": "ajsutton", "createdAt": "2020-08-12T05:25:43Z", "path": "util/src/test/java/tech/pegasys/teku/util/config/KeyStoreFilesLocatorTest.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.util.config;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Optional;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+public class KeyStoreFilesLocatorTest {\n+  @Test\n+  public void shouldFindPairsAtDepth(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key/1/2/3\", \"pass/1/2/3\");\n+    createFiles(tempDir, \"key/a.json\", \"pass/a.txt\", \"key/1/2/3/b.json\", \"pass/1/2/3/b.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key:%s/pass\", tempStr, tempStr))), \":\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs())\n+        .containsExactlyInAnyOrder(\n+            tuple(tempStr, \"key/a.json\", \"pass/a.txt\"),\n+            tuple(tempStr, \"key/1/2/3/b.json\", \"pass/1/2/3/b.txt\"));\n+  }\n+\n+  @Test\n+  public void shouldFindMissingPasswordAtDepth(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key/1/2/3\", \"pass/1/2/3\");\n+    createFiles(tempDir, \"key/a.json\", \"pass/a.txt\", \"key/1/2/3/b.json\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key:%s/pass\", tempStr, tempStr))), \":\");\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  public void shouldFindKeyPairOfFiles(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"key/a\", \"pass/a.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key/a;%s/pass/a.txt\", tempStr, tempStr))), \";\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs()).containsExactly(tuple(tempStr, \"key/a\", \"pass/a.txt\"));\n+  }\n+\n+  @Test\n+  public void shouldIgnoreSomeFiles(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(\n+        tempDir, \"key/.asdf.json\", \"key/.hidden2\", \"key/ignored\", \"key/a.json\", \"pass/a.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key;%s/pass\", tempStr, tempStr))), \";\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs()).containsExactly(tuple(tempStr, \"key/a.json\", \"pass/a.txt\"));\n+  }\n+\n+  @Test\n+  public void shouldHandleFilesAndFoldersInOneArgument(@TempDir final Path tempDir)\n+      throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"key/a\", \"pass/a.txt\", \"keyStore\", \"password\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(\n+                List.of(\n+                    String.format(\"%s/key/a:%s/pass/a.txt\", tempStr, tempStr),\n+                    String.format(\"%s/keyStore:%s/password\", tempStr, tempStr))),\n+            \":\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs().size()).isEqualTo(2);\n+  }\n+\n+  @Test\n+  public void shouldDetectMissingPasswordFileWhenDirectoryIsPresent(@TempDir final Path tempDir)\n+      throws IOException {\n+    createFolders(tempDir, \"key\", \"pass/a.txt\");\n+    createFiles(tempDir, \"key/a\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key/a;%s/pass/a.txt\", tempStr, tempStr))), \";\");\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  public void shouldDetectMissingPasswordFile(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"pass/a.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key/a:%s/pass/a.txt\", tempStr, tempStr))), \":\");\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  public void shouldDetectMissingKeyFile(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"key/a\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key/a:%s/pass/a.txt\", tempStr, tempStr))), \":\");\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  public void shouldSucceedCallingParseOnEmptyList() {\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(Optional.empty(), \":\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs()).isEmpty();\n+  }\n+\n+  @Test\n+  public void shouldHandleOldArgs(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"key/a\", \"pass/a.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(Optional.empty(), \":\");\n+    locator.parseKeyAndPasswordList(List.of(tempStr + \"/key/a\"), List.of(tempStr + \"/pass/a.txt\"));\n+    assertThat(locator.getFilePairs())\n+        .containsExactly(tuple(tempDir.toString(), \"key/a\", \"pass/a.txt\"));\n+  }\n+\n+  private void createFolders(final Path tempDir, String... paths) {\n+    for (String path : paths) {\n+      File file = new File(tempDir.toString() + File.separator + path);\n+      file.mkdirs();\n+    }\n+  }\n+\n+  private void createFiles(final Path tempDir, String... paths) throws IOException {\n+    for (String path : paths) {\n+      File file = new File(tempDir.toString() + File.separator + path);\n+      file.createNewFile();\n+    }\n+  }\n+\n+  private Pair<Path, Path> tuple(final String tempStr, final String k, final String p) {\n+    return Pair.of(\n+        new File(String.format(\"%s/%s\", tempStr, k)).toPath(),\n+        new File(String.format(\"%s/%s\", tempStr, p)).toPath());", "originalCommit": "a2877192f859317636e697c9ca1ec55953e73d71", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "20241fe2f46bf26833336cf41110fd5628f361a0", "chunk": "diff --git a/util/src/test/java/tech/pegasys/teku/util/config/KeyStoreFilesLocatorTest.java b/util/src/test/java/tech/pegasys/teku/util/config/KeyStoreFilesLocatorTest.java\nindex b29a9d67a5..b2c2e47162 100644\n--- a/util/src/test/java/tech/pegasys/teku/util/config/KeyStoreFilesLocatorTest.java\n+++ b/util/src/test/java/tech/pegasys/teku/util/config/KeyStoreFilesLocatorTest.java\n\n@@ -20,149 +20,227 @@ import java.io.File;\n import java.io.IOException;\n import java.nio.file.Path;\n import java.util.List;\n-import java.util.Optional;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.io.TempDir;\n \n public class KeyStoreFilesLocatorTest {\n+  private static final String PATH_SEP = \":\";\n+  private static final String PATH_SEP_WIN = \";\";\n+\n   @Test\n   public void shouldFindPairsAtDepth(@TempDir final Path tempDir) throws IOException {\n-    createFolders(tempDir, \"key/1/2/3\", \"pass/1/2/3\");\n-    createFiles(tempDir, \"key/a.json\", \"pass/a.txt\", \"key/1/2/3/b.json\", \"pass/1/2/3/b.txt\");\n-    final String tempStr = tempDir.toString();\n-    KeyStoreFilesLocator locator =\n-        new KeyStoreFilesLocator(\n-            Optional.of(List.of(String.format(\"%s/key:%s/pass\", tempStr, tempStr))), \":\");\n+    createFolders(tempDir, Path.of(\"key\", \"1\", \"2\", \"3\"), Path.of(\"pass\", \"1\", \"2\", \"3\"));\n+    createFiles(\n+        tempDir,\n+        Path.of(\"key\", \"a.json\"),\n+        Path.of(\"pass\", \"a.txt\"),\n+        Path.of(\"key\", \"1\", \"2\", \"3\", \"b.json\"),\n+        Path.of(\"pass\", \"1\", \"2\", \"3\", \"b.txt\"));\n+    final String p1 = generatePath(tempDir, PATH_SEP, \"key\", \"pass\");\n+    final KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(p1), PATH_SEP);\n     locator.parse();\n+\n     assertThat(locator.getFilePairs())\n         .containsExactlyInAnyOrder(\n-            tuple(tempStr, \"key/a.json\", \"pass/a.txt\"),\n-            tuple(tempStr, \"key/1/2/3/b.json\", \"pass/1/2/3/b.txt\"));\n+            tuple(\n+                tempDir, Path.of(\"key\", \"a.json\").toString(), Path.of(\"pass\", \"a.txt\").toString()),\n+            tuple(\n+                tempDir,\n+                Path.of(\"key\", \"1\", \"2\", \"3\", \"b.json\").toString(),\n+                Path.of(\"pass\", \"1\", \"2\", \"3\", \"b.txt\").toString()));\n   }\n \n   @Test\n   public void shouldFindMissingPasswordAtDepth(@TempDir final Path tempDir) throws IOException {\n-    createFolders(tempDir, \"key/1/2/3\", \"pass/1/2/3\");\n-    createFiles(tempDir, \"key/a.json\", \"pass/a.txt\", \"key/1/2/3/b.json\");\n-    final String tempStr = tempDir.toString();\n-    KeyStoreFilesLocator locator =\n-        new KeyStoreFilesLocator(\n-            Optional.of(List.of(String.format(\"%s/key:%s/pass\", tempStr, tempStr))), \":\");\n+    createFolders(tempDir, Path.of(\"key\", \"1\", \"2\", \"3\"), Path.of(\"pass\", \"1\", \"2\", \"3\"));\n+    createFiles(\n+        tempDir,\n+        Path.of(\"key\", \"a.json\"),\n+        Path.of(\"pass\", \"a.txt\"),\n+        Path.of(\"key\", \"1\", \"2\", \"3\", \"b.json\"));\n+    final String p1 = generatePath(tempDir, PATH_SEP, \"key\", \"pass\");\n+    final KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(p1), PATH_SEP);\n+\n     assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n   }\n \n   @Test\n   public void shouldFindKeyPairOfFiles(@TempDir final Path tempDir) throws IOException {\n     createFolders(tempDir, \"key\", \"pass\");\n-    createFiles(tempDir, \"key/a\", \"pass/a.txt\");\n-    final String tempStr = tempDir.toString();\n-    KeyStoreFilesLocator locator =\n-        new KeyStoreFilesLocator(\n-            Optional.of(List.of(String.format(\"%s/key/a;%s/pass/a.txt\", tempStr, tempStr))), \";\");\n+    createFiles(tempDir, Path.of(\"key\", \"a\"), Path.of(\"pass\", \"a.txt\"));\n+    final String p1 =\n+        generatePath(tempDir, PATH_SEP_WIN, List.of(\"key\", \"a\"), List.of(\"pass\", \"a.txt\"));\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(p1), PATH_SEP_WIN);\n     locator.parse();\n-    assertThat(locator.getFilePairs()).containsExactly(tuple(tempStr, \"key/a\", \"pass/a.txt\"));\n+\n+    assertThat(locator.getFilePairs())\n+        .containsExactly(\n+            tuple(tempDir, Path.of(\"key\", \"a\").toString(), Path.of(\"pass\", \"a.txt\").toString()));\n   }\n \n   @Test\n   public void shouldIgnoreSomeFiles(@TempDir final Path tempDir) throws IOException {\n     createFolders(tempDir, \"key\", \"pass\");\n     createFiles(\n-        tempDir, \"key/.asdf.json\", \"key/.hidden2\", \"key/ignored\", \"key/a.json\", \"pass/a.txt\");\n-    final String tempStr = tempDir.toString();\n-    KeyStoreFilesLocator locator =\n-        new KeyStoreFilesLocator(\n-            Optional.of(List.of(String.format(\"%s/key;%s/pass\", tempStr, tempStr))), \";\");\n+        tempDir,\n+        Path.of(\"key\", \".asdf.json\"),\n+        Path.of(\"key\", \".hidden2\"),\n+        Path.of(\"key\", \"ignored\"),\n+        Path.of(\"key\", \"a.json\"),\n+        Path.of(\"pass\", \"a.txt\"));\n+    final String p1 = generatePath(tempDir, PATH_SEP_WIN, \"key\", \"pass\");\n+    final KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(p1), PATH_SEP_WIN);\n     locator.parse();\n-    assertThat(locator.getFilePairs()).containsExactly(tuple(tempStr, \"key/a.json\", \"pass/a.txt\"));\n+\n+    assertThat(locator.getFilePairs())\n+        .containsExactly(\n+            tuple(\n+                tempDir, Path.of(\"key\", \"a.json\").toString(), Path.of(\"pass\", \"a.txt\").toString()));\n   }\n \n   @Test\n   public void shouldHandleFilesAndFoldersInOneArgument(@TempDir final Path tempDir)\n       throws IOException {\n     createFolders(tempDir, \"key\", \"pass\");\n-    createFiles(tempDir, \"key/a\", \"pass/a.txt\", \"keyStore\", \"password\");\n-    final String tempStr = tempDir.toString();\n-    KeyStoreFilesLocator locator =\n-        new KeyStoreFilesLocator(\n-            Optional.of(\n-                List.of(\n-                    String.format(\"%s/key/a:%s/pass/a.txt\", tempStr, tempStr),\n-                    String.format(\"%s/keyStore:%s/password\", tempStr, tempStr))),\n-            \":\");\n+    createFiles(\n+        tempDir,\n+        Path.of(\"key\", \"a\"),\n+        Path.of(\"pass\", \"a.txt\"),\n+        Path.of(\"keyStore\"),\n+        Path.of(\"password\"));\n+    final String p1 =\n+        generatePath(tempDir, PATH_SEP, List.of(\"key\", \"a\"), List.of(\"pass\", \"a.txt\"));\n+    final String p2 = generatePath(tempDir, PATH_SEP, \"keyStore\", \"password\");\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(p1, p2), PATH_SEP);\n     locator.parse();\n-    assertThat(locator.getFilePairs().size()).isEqualTo(2);\n+\n+    assertThat(locator.getFilePairs())\n+        .containsExactlyInAnyOrder(\n+            tuple(tempDir, Path.of(\"key\", \"a\").toString(), Path.of(\"pass\", \"a.txt\").toString()),\n+            tuple(tempDir, \"keyStore\", \"password\"));\n   }\n \n   @Test\n   public void shouldDetectMissingPasswordFileWhenDirectoryIsPresent(@TempDir final Path tempDir)\n       throws IOException {\n-    createFolders(tempDir, \"key\", \"pass/a.txt\");\n-    createFiles(tempDir, \"key/a\");\n-    final String tempStr = tempDir.toString();\n-    KeyStoreFilesLocator locator =\n-        new KeyStoreFilesLocator(\n-            Optional.of(List.of(String.format(\"%s/key/a;%s/pass/a.txt\", tempStr, tempStr))), \";\");\n+    createFolders(tempDir, Path.of(\"key\"), Path.of(\"pass\", \"a.txt\"));\n+    createFiles(tempDir, Path.of(\"key\", \"a\"));\n+    final String p1 =\n+        generatePath(tempDir, PATH_SEP_WIN, List.of(\"key\", \"a\"), List.of(\"pass\", \"a.txt\"));\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(p1), PATH_SEP_WIN);\n+\n     assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n   }\n \n   @Test\n   public void shouldDetectMissingPasswordFile(@TempDir final Path tempDir) throws IOException {\n     createFolders(tempDir, \"key\", \"pass\");\n-    createFiles(tempDir, \"pass/a.txt\");\n-    final String tempStr = tempDir.toString();\n-    KeyStoreFilesLocator locator =\n-        new KeyStoreFilesLocator(\n-            Optional.of(List.of(String.format(\"%s/key/a:%s/pass/a.txt\", tempStr, tempStr))), \":\");\n+    createFiles(tempDir, Path.of(\"pass\", \"a.txt\"));\n+    final String p1 =\n+        generatePath(tempDir, PATH_SEP, List.of(\"key\", \"a\"), List.of(\"pass\", \"a.txt\"));\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(p1), PATH_SEP);\n+\n     assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n   }\n \n   @Test\n   public void shouldDetectMissingKeyFile(@TempDir final Path tempDir) throws IOException {\n     createFolders(tempDir, \"key\", \"pass\");\n-    createFiles(tempDir, \"key/a\");\n-    final String tempStr = tempDir.toString();\n-    KeyStoreFilesLocator locator =\n-        new KeyStoreFilesLocator(\n-            Optional.of(List.of(String.format(\"%s/key/a:%s/pass/a.txt\", tempStr, tempStr))), \":\");\n+    createFiles(tempDir, Path.of(\"key\", \"a\"));\n+    final String p1 =\n+        generatePath(tempDir, PATH_SEP, List.of(\"key\", \"a\"), List.of(\"pass\", \"a.txt\"));\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(p1), PATH_SEP);\n+\n     assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n   }\n \n   @Test\n   public void shouldSucceedCallingParseOnEmptyList() {\n-    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(Optional.empty(), \":\");\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(), PATH_SEP);\n     locator.parse();\n     assertThat(locator.getFilePairs()).isEmpty();\n   }\n \n+  @Test\n+  public void shouldFailWhenSplittingTooManySeparators() {\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(\"a:b:c\"), PATH_SEP);\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  public void shouldFailWhenStringContainsOnlyKey() {\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(\"key\"), PATH_SEP);\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n   @Test\n   public void shouldHandleOldArgs(@TempDir final Path tempDir) throws IOException {\n-    createFolders(tempDir, \"key\", \"pass\");\n-    createFiles(tempDir, \"key/a\", \"pass/a.txt\");\n+    createFolders(tempDir, Path.of(\"key\"), Path.of(\"pass\"));\n+    createFiles(tempDir, Path.of(\"key\", \"a\"), Path.of(\"pass\", \"a.txt\"));\n     final String tempStr = tempDir.toString();\n-    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(Optional.empty(), \":\");\n-    locator.parseKeyAndPasswordList(List.of(tempStr + \"/key/a\"), List.of(tempStr + \"/pass/a.txt\"));\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(), PATH_SEP);\n+    locator.parseKeyAndPasswordList(\n+        List.of(Path.of(tempStr, \"key\", \"a\").toString()),\n+        List.of(Path.of(tempStr, \"pass\", \"a.txt\").toString()));\n+\n     assertThat(locator.getFilePairs())\n-        .containsExactly(tuple(tempDir.toString(), \"key/a\", \"pass/a.txt\"));\n+        .containsExactly(tuple(tempDir, List.of(\"key\", \"a\"), List.of(\"pass\", \"a.txt\")));\n   }\n \n   private void createFolders(final Path tempDir, String... paths) {\n     for (String path : paths) {\n-      File file = new File(tempDir.toString() + File.separator + path);\n-      file.mkdirs();\n+      File file = tempDir.resolve(path).toFile();\n+      if (!file.mkdirs() && !file.isDirectory()) {\n+        Assertions.fail(\"Failed to create directory \" + file);\n+      }\n     }\n   }\n \n-  private void createFiles(final Path tempDir, String... paths) throws IOException {\n-    for (String path : paths) {\n-      File file = new File(tempDir.toString() + File.separator + path);\n+  private void createFolders(final Path tempDir, Path... paths) {\n+    for (Path path : paths) {\n+      File file = tempDir.resolve(path).toFile();\n+      if (!file.mkdirs() && !file.isDirectory()) {\n+        Assertions.fail(\"Failed to create directory \" + file);\n+      }\n+    }\n+  }\n+\n+  private void createFiles(final Path tempDir, Path... paths) throws IOException {\n+    for (Path path : paths) {\n+      File file = tempDir.resolve(path).toFile();\n       file.createNewFile();\n     }\n   }\n \n-  private Pair<Path, Path> tuple(final String tempStr, final String k, final String p) {\n+  private String generatePath(\n+      final Path tempDir, final String separator, final String key, final String pass) {\n+    return generatePath(tempDir, separator, List.of(key), List.of(pass));\n+  }\n+\n+  private String generatePath(\n+      final Path tempDir,\n+      final String separator,\n+      final List<String> keyList,\n+      final List<String> passList) {\n+    final String tempStr = tempDir.toString();\n+    return String.join(\n+        separator,\n+        Path.of(tempStr, keyList.toArray(new String[0])).toString(),\n+        Path.of(tempStr, passList.toArray(new String[0])).toString());\n+  }\n+\n+  private Pair<Path, Path> tuple(\n+      final Path tempDir, final List<String> key, final List<String> path) {\n+    final String tempStr = tempDir.toString();\n     return Pair.of(\n-        new File(String.format(\"%s/%s\", tempStr, k)).toPath(),\n-        new File(String.format(\"%s/%s\", tempStr, p)).toPath());\n+        Path.of(tempStr, key.toArray(new String[0])),\n+        Path.of(tempStr, path.toArray(new String[0])));\n+  }\n+\n+  private Pair<Path, Path> tuple(final Path tempDir, final String k, final String p) {\n+    final String tempStr = tempDir.toString();\n+    return Pair.of(new File(tempStr, k).toPath(), new File(tempStr, p).toPath());\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAxMjU3Mw==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r469012573", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  File file = new File(tempDir.toString() + File.separator + path);\n          \n          \n            \n                  File file = tempDir.resolve(path).toFile();", "author": "ajsutton", "createdAt": "2020-08-12T05:26:17Z", "path": "util/src/test/java/tech/pegasys/teku/util/config/KeyStoreFilesLocatorTest.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.util.config;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Optional;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+public class KeyStoreFilesLocatorTest {\n+  @Test\n+  public void shouldFindPairsAtDepth(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key/1/2/3\", \"pass/1/2/3\");\n+    createFiles(tempDir, \"key/a.json\", \"pass/a.txt\", \"key/1/2/3/b.json\", \"pass/1/2/3/b.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key:%s/pass\", tempStr, tempStr))), \":\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs())\n+        .containsExactlyInAnyOrder(\n+            tuple(tempStr, \"key/a.json\", \"pass/a.txt\"),\n+            tuple(tempStr, \"key/1/2/3/b.json\", \"pass/1/2/3/b.txt\"));\n+  }\n+\n+  @Test\n+  public void shouldFindMissingPasswordAtDepth(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key/1/2/3\", \"pass/1/2/3\");\n+    createFiles(tempDir, \"key/a.json\", \"pass/a.txt\", \"key/1/2/3/b.json\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key:%s/pass\", tempStr, tempStr))), \":\");\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  public void shouldFindKeyPairOfFiles(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"key/a\", \"pass/a.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key/a;%s/pass/a.txt\", tempStr, tempStr))), \";\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs()).containsExactly(tuple(tempStr, \"key/a\", \"pass/a.txt\"));\n+  }\n+\n+  @Test\n+  public void shouldIgnoreSomeFiles(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(\n+        tempDir, \"key/.asdf.json\", \"key/.hidden2\", \"key/ignored\", \"key/a.json\", \"pass/a.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key;%s/pass\", tempStr, tempStr))), \";\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs()).containsExactly(tuple(tempStr, \"key/a.json\", \"pass/a.txt\"));\n+  }\n+\n+  @Test\n+  public void shouldHandleFilesAndFoldersInOneArgument(@TempDir final Path tempDir)\n+      throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"key/a\", \"pass/a.txt\", \"keyStore\", \"password\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(\n+                List.of(\n+                    String.format(\"%s/key/a:%s/pass/a.txt\", tempStr, tempStr),\n+                    String.format(\"%s/keyStore:%s/password\", tempStr, tempStr))),\n+            \":\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs().size()).isEqualTo(2);\n+  }\n+\n+  @Test\n+  public void shouldDetectMissingPasswordFileWhenDirectoryIsPresent(@TempDir final Path tempDir)\n+      throws IOException {\n+    createFolders(tempDir, \"key\", \"pass/a.txt\");\n+    createFiles(tempDir, \"key/a\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key/a;%s/pass/a.txt\", tempStr, tempStr))), \";\");\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  public void shouldDetectMissingPasswordFile(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"pass/a.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key/a:%s/pass/a.txt\", tempStr, tempStr))), \":\");\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  public void shouldDetectMissingKeyFile(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"key/a\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key/a:%s/pass/a.txt\", tempStr, tempStr))), \":\");\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  public void shouldSucceedCallingParseOnEmptyList() {\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(Optional.empty(), \":\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs()).isEmpty();\n+  }\n+\n+  @Test\n+  public void shouldHandleOldArgs(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"key/a\", \"pass/a.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(Optional.empty(), \":\");\n+    locator.parseKeyAndPasswordList(List.of(tempStr + \"/key/a\"), List.of(tempStr + \"/pass/a.txt\"));\n+    assertThat(locator.getFilePairs())\n+        .containsExactly(tuple(tempDir.toString(), \"key/a\", \"pass/a.txt\"));\n+  }\n+\n+  private void createFolders(final Path tempDir, String... paths) {\n+    for (String path : paths) {\n+      File file = new File(tempDir.toString() + File.separator + path);\n+      file.mkdirs();\n+    }\n+  }\n+\n+  private void createFiles(final Path tempDir, String... paths) throws IOException {\n+    for (String path : paths) {\n+      File file = new File(tempDir.toString() + File.separator + path);", "originalCommit": "a2877192f859317636e697c9ca1ec55953e73d71", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "20241fe2f46bf26833336cf41110fd5628f361a0", "chunk": "diff --git a/util/src/test/java/tech/pegasys/teku/util/config/KeyStoreFilesLocatorTest.java b/util/src/test/java/tech/pegasys/teku/util/config/KeyStoreFilesLocatorTest.java\nindex b29a9d67a5..b2c2e47162 100644\n--- a/util/src/test/java/tech/pegasys/teku/util/config/KeyStoreFilesLocatorTest.java\n+++ b/util/src/test/java/tech/pegasys/teku/util/config/KeyStoreFilesLocatorTest.java\n\n@@ -20,149 +20,227 @@ import java.io.File;\n import java.io.IOException;\n import java.nio.file.Path;\n import java.util.List;\n-import java.util.Optional;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.io.TempDir;\n \n public class KeyStoreFilesLocatorTest {\n+  private static final String PATH_SEP = \":\";\n+  private static final String PATH_SEP_WIN = \";\";\n+\n   @Test\n   public void shouldFindPairsAtDepth(@TempDir final Path tempDir) throws IOException {\n-    createFolders(tempDir, \"key/1/2/3\", \"pass/1/2/3\");\n-    createFiles(tempDir, \"key/a.json\", \"pass/a.txt\", \"key/1/2/3/b.json\", \"pass/1/2/3/b.txt\");\n-    final String tempStr = tempDir.toString();\n-    KeyStoreFilesLocator locator =\n-        new KeyStoreFilesLocator(\n-            Optional.of(List.of(String.format(\"%s/key:%s/pass\", tempStr, tempStr))), \":\");\n+    createFolders(tempDir, Path.of(\"key\", \"1\", \"2\", \"3\"), Path.of(\"pass\", \"1\", \"2\", \"3\"));\n+    createFiles(\n+        tempDir,\n+        Path.of(\"key\", \"a.json\"),\n+        Path.of(\"pass\", \"a.txt\"),\n+        Path.of(\"key\", \"1\", \"2\", \"3\", \"b.json\"),\n+        Path.of(\"pass\", \"1\", \"2\", \"3\", \"b.txt\"));\n+    final String p1 = generatePath(tempDir, PATH_SEP, \"key\", \"pass\");\n+    final KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(p1), PATH_SEP);\n     locator.parse();\n+\n     assertThat(locator.getFilePairs())\n         .containsExactlyInAnyOrder(\n-            tuple(tempStr, \"key/a.json\", \"pass/a.txt\"),\n-            tuple(tempStr, \"key/1/2/3/b.json\", \"pass/1/2/3/b.txt\"));\n+            tuple(\n+                tempDir, Path.of(\"key\", \"a.json\").toString(), Path.of(\"pass\", \"a.txt\").toString()),\n+            tuple(\n+                tempDir,\n+                Path.of(\"key\", \"1\", \"2\", \"3\", \"b.json\").toString(),\n+                Path.of(\"pass\", \"1\", \"2\", \"3\", \"b.txt\").toString()));\n   }\n \n   @Test\n   public void shouldFindMissingPasswordAtDepth(@TempDir final Path tempDir) throws IOException {\n-    createFolders(tempDir, \"key/1/2/3\", \"pass/1/2/3\");\n-    createFiles(tempDir, \"key/a.json\", \"pass/a.txt\", \"key/1/2/3/b.json\");\n-    final String tempStr = tempDir.toString();\n-    KeyStoreFilesLocator locator =\n-        new KeyStoreFilesLocator(\n-            Optional.of(List.of(String.format(\"%s/key:%s/pass\", tempStr, tempStr))), \":\");\n+    createFolders(tempDir, Path.of(\"key\", \"1\", \"2\", \"3\"), Path.of(\"pass\", \"1\", \"2\", \"3\"));\n+    createFiles(\n+        tempDir,\n+        Path.of(\"key\", \"a.json\"),\n+        Path.of(\"pass\", \"a.txt\"),\n+        Path.of(\"key\", \"1\", \"2\", \"3\", \"b.json\"));\n+    final String p1 = generatePath(tempDir, PATH_SEP, \"key\", \"pass\");\n+    final KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(p1), PATH_SEP);\n+\n     assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n   }\n \n   @Test\n   public void shouldFindKeyPairOfFiles(@TempDir final Path tempDir) throws IOException {\n     createFolders(tempDir, \"key\", \"pass\");\n-    createFiles(tempDir, \"key/a\", \"pass/a.txt\");\n-    final String tempStr = tempDir.toString();\n-    KeyStoreFilesLocator locator =\n-        new KeyStoreFilesLocator(\n-            Optional.of(List.of(String.format(\"%s/key/a;%s/pass/a.txt\", tempStr, tempStr))), \";\");\n+    createFiles(tempDir, Path.of(\"key\", \"a\"), Path.of(\"pass\", \"a.txt\"));\n+    final String p1 =\n+        generatePath(tempDir, PATH_SEP_WIN, List.of(\"key\", \"a\"), List.of(\"pass\", \"a.txt\"));\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(p1), PATH_SEP_WIN);\n     locator.parse();\n-    assertThat(locator.getFilePairs()).containsExactly(tuple(tempStr, \"key/a\", \"pass/a.txt\"));\n+\n+    assertThat(locator.getFilePairs())\n+        .containsExactly(\n+            tuple(tempDir, Path.of(\"key\", \"a\").toString(), Path.of(\"pass\", \"a.txt\").toString()));\n   }\n \n   @Test\n   public void shouldIgnoreSomeFiles(@TempDir final Path tempDir) throws IOException {\n     createFolders(tempDir, \"key\", \"pass\");\n     createFiles(\n-        tempDir, \"key/.asdf.json\", \"key/.hidden2\", \"key/ignored\", \"key/a.json\", \"pass/a.txt\");\n-    final String tempStr = tempDir.toString();\n-    KeyStoreFilesLocator locator =\n-        new KeyStoreFilesLocator(\n-            Optional.of(List.of(String.format(\"%s/key;%s/pass\", tempStr, tempStr))), \";\");\n+        tempDir,\n+        Path.of(\"key\", \".asdf.json\"),\n+        Path.of(\"key\", \".hidden2\"),\n+        Path.of(\"key\", \"ignored\"),\n+        Path.of(\"key\", \"a.json\"),\n+        Path.of(\"pass\", \"a.txt\"));\n+    final String p1 = generatePath(tempDir, PATH_SEP_WIN, \"key\", \"pass\");\n+    final KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(p1), PATH_SEP_WIN);\n     locator.parse();\n-    assertThat(locator.getFilePairs()).containsExactly(tuple(tempStr, \"key/a.json\", \"pass/a.txt\"));\n+\n+    assertThat(locator.getFilePairs())\n+        .containsExactly(\n+            tuple(\n+                tempDir, Path.of(\"key\", \"a.json\").toString(), Path.of(\"pass\", \"a.txt\").toString()));\n   }\n \n   @Test\n   public void shouldHandleFilesAndFoldersInOneArgument(@TempDir final Path tempDir)\n       throws IOException {\n     createFolders(tempDir, \"key\", \"pass\");\n-    createFiles(tempDir, \"key/a\", \"pass/a.txt\", \"keyStore\", \"password\");\n-    final String tempStr = tempDir.toString();\n-    KeyStoreFilesLocator locator =\n-        new KeyStoreFilesLocator(\n-            Optional.of(\n-                List.of(\n-                    String.format(\"%s/key/a:%s/pass/a.txt\", tempStr, tempStr),\n-                    String.format(\"%s/keyStore:%s/password\", tempStr, tempStr))),\n-            \":\");\n+    createFiles(\n+        tempDir,\n+        Path.of(\"key\", \"a\"),\n+        Path.of(\"pass\", \"a.txt\"),\n+        Path.of(\"keyStore\"),\n+        Path.of(\"password\"));\n+    final String p1 =\n+        generatePath(tempDir, PATH_SEP, List.of(\"key\", \"a\"), List.of(\"pass\", \"a.txt\"));\n+    final String p2 = generatePath(tempDir, PATH_SEP, \"keyStore\", \"password\");\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(p1, p2), PATH_SEP);\n     locator.parse();\n-    assertThat(locator.getFilePairs().size()).isEqualTo(2);\n+\n+    assertThat(locator.getFilePairs())\n+        .containsExactlyInAnyOrder(\n+            tuple(tempDir, Path.of(\"key\", \"a\").toString(), Path.of(\"pass\", \"a.txt\").toString()),\n+            tuple(tempDir, \"keyStore\", \"password\"));\n   }\n \n   @Test\n   public void shouldDetectMissingPasswordFileWhenDirectoryIsPresent(@TempDir final Path tempDir)\n       throws IOException {\n-    createFolders(tempDir, \"key\", \"pass/a.txt\");\n-    createFiles(tempDir, \"key/a\");\n-    final String tempStr = tempDir.toString();\n-    KeyStoreFilesLocator locator =\n-        new KeyStoreFilesLocator(\n-            Optional.of(List.of(String.format(\"%s/key/a;%s/pass/a.txt\", tempStr, tempStr))), \";\");\n+    createFolders(tempDir, Path.of(\"key\"), Path.of(\"pass\", \"a.txt\"));\n+    createFiles(tempDir, Path.of(\"key\", \"a\"));\n+    final String p1 =\n+        generatePath(tempDir, PATH_SEP_WIN, List.of(\"key\", \"a\"), List.of(\"pass\", \"a.txt\"));\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(p1), PATH_SEP_WIN);\n+\n     assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n   }\n \n   @Test\n   public void shouldDetectMissingPasswordFile(@TempDir final Path tempDir) throws IOException {\n     createFolders(tempDir, \"key\", \"pass\");\n-    createFiles(tempDir, \"pass/a.txt\");\n-    final String tempStr = tempDir.toString();\n-    KeyStoreFilesLocator locator =\n-        new KeyStoreFilesLocator(\n-            Optional.of(List.of(String.format(\"%s/key/a:%s/pass/a.txt\", tempStr, tempStr))), \":\");\n+    createFiles(tempDir, Path.of(\"pass\", \"a.txt\"));\n+    final String p1 =\n+        generatePath(tempDir, PATH_SEP, List.of(\"key\", \"a\"), List.of(\"pass\", \"a.txt\"));\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(p1), PATH_SEP);\n+\n     assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n   }\n \n   @Test\n   public void shouldDetectMissingKeyFile(@TempDir final Path tempDir) throws IOException {\n     createFolders(tempDir, \"key\", \"pass\");\n-    createFiles(tempDir, \"key/a\");\n-    final String tempStr = tempDir.toString();\n-    KeyStoreFilesLocator locator =\n-        new KeyStoreFilesLocator(\n-            Optional.of(List.of(String.format(\"%s/key/a:%s/pass/a.txt\", tempStr, tempStr))), \":\");\n+    createFiles(tempDir, Path.of(\"key\", \"a\"));\n+    final String p1 =\n+        generatePath(tempDir, PATH_SEP, List.of(\"key\", \"a\"), List.of(\"pass\", \"a.txt\"));\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(p1), PATH_SEP);\n+\n     assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n   }\n \n   @Test\n   public void shouldSucceedCallingParseOnEmptyList() {\n-    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(Optional.empty(), \":\");\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(), PATH_SEP);\n     locator.parse();\n     assertThat(locator.getFilePairs()).isEmpty();\n   }\n \n+  @Test\n+  public void shouldFailWhenSplittingTooManySeparators() {\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(\"a:b:c\"), PATH_SEP);\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  public void shouldFailWhenStringContainsOnlyKey() {\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(\"key\"), PATH_SEP);\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n   @Test\n   public void shouldHandleOldArgs(@TempDir final Path tempDir) throws IOException {\n-    createFolders(tempDir, \"key\", \"pass\");\n-    createFiles(tempDir, \"key/a\", \"pass/a.txt\");\n+    createFolders(tempDir, Path.of(\"key\"), Path.of(\"pass\"));\n+    createFiles(tempDir, Path.of(\"key\", \"a\"), Path.of(\"pass\", \"a.txt\"));\n     final String tempStr = tempDir.toString();\n-    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(Optional.empty(), \":\");\n-    locator.parseKeyAndPasswordList(List.of(tempStr + \"/key/a\"), List.of(tempStr + \"/pass/a.txt\"));\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(), PATH_SEP);\n+    locator.parseKeyAndPasswordList(\n+        List.of(Path.of(tempStr, \"key\", \"a\").toString()),\n+        List.of(Path.of(tempStr, \"pass\", \"a.txt\").toString()));\n+\n     assertThat(locator.getFilePairs())\n-        .containsExactly(tuple(tempDir.toString(), \"key/a\", \"pass/a.txt\"));\n+        .containsExactly(tuple(tempDir, List.of(\"key\", \"a\"), List.of(\"pass\", \"a.txt\")));\n   }\n \n   private void createFolders(final Path tempDir, String... paths) {\n     for (String path : paths) {\n-      File file = new File(tempDir.toString() + File.separator + path);\n-      file.mkdirs();\n+      File file = tempDir.resolve(path).toFile();\n+      if (!file.mkdirs() && !file.isDirectory()) {\n+        Assertions.fail(\"Failed to create directory \" + file);\n+      }\n     }\n   }\n \n-  private void createFiles(final Path tempDir, String... paths) throws IOException {\n-    for (String path : paths) {\n-      File file = new File(tempDir.toString() + File.separator + path);\n+  private void createFolders(final Path tempDir, Path... paths) {\n+    for (Path path : paths) {\n+      File file = tempDir.resolve(path).toFile();\n+      if (!file.mkdirs() && !file.isDirectory()) {\n+        Assertions.fail(\"Failed to create directory \" + file);\n+      }\n+    }\n+  }\n+\n+  private void createFiles(final Path tempDir, Path... paths) throws IOException {\n+    for (Path path : paths) {\n+      File file = tempDir.resolve(path).toFile();\n       file.createNewFile();\n     }\n   }\n \n-  private Pair<Path, Path> tuple(final String tempStr, final String k, final String p) {\n+  private String generatePath(\n+      final Path tempDir, final String separator, final String key, final String pass) {\n+    return generatePath(tempDir, separator, List.of(key), List.of(pass));\n+  }\n+\n+  private String generatePath(\n+      final Path tempDir,\n+      final String separator,\n+      final List<String> keyList,\n+      final List<String> passList) {\n+    final String tempStr = tempDir.toString();\n+    return String.join(\n+        separator,\n+        Path.of(tempStr, keyList.toArray(new String[0])).toString(),\n+        Path.of(tempStr, passList.toArray(new String[0])).toString());\n+  }\n+\n+  private Pair<Path, Path> tuple(\n+      final Path tempDir, final List<String> key, final List<String> path) {\n+    final String tempStr = tempDir.toString();\n     return Pair.of(\n-        new File(String.format(\"%s/%s\", tempStr, k)).toPath(),\n-        new File(String.format(\"%s/%s\", tempStr, p)).toPath());\n+        Path.of(tempStr, key.toArray(new String[0])),\n+        Path.of(tempStr, path.toArray(new String[0])));\n+  }\n+\n+  private Pair<Path, Path> tuple(final Path tempDir, final String k, final String p) {\n+    final String tempStr = tempDir.toString();\n+    return Pair.of(new File(tempStr, k).toPath(), new File(tempStr, p).toPath());\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAxMjY2Nw==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r469012667", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  File file = new File(tempDir.toString() + File.separator + path);\n          \n          \n            \n                  File file = tempDir.resolve(path).toFile();", "author": "ajsutton", "createdAt": "2020-08-12T05:26:37Z", "path": "util/src/test/java/tech/pegasys/teku/util/config/KeyStoreFilesLocatorTest.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.util.config;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Optional;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+public class KeyStoreFilesLocatorTest {\n+  @Test\n+  public void shouldFindPairsAtDepth(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key/1/2/3\", \"pass/1/2/3\");\n+    createFiles(tempDir, \"key/a.json\", \"pass/a.txt\", \"key/1/2/3/b.json\", \"pass/1/2/3/b.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key:%s/pass\", tempStr, tempStr))), \":\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs())\n+        .containsExactlyInAnyOrder(\n+            tuple(tempStr, \"key/a.json\", \"pass/a.txt\"),\n+            tuple(tempStr, \"key/1/2/3/b.json\", \"pass/1/2/3/b.txt\"));\n+  }\n+\n+  @Test\n+  public void shouldFindMissingPasswordAtDepth(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key/1/2/3\", \"pass/1/2/3\");\n+    createFiles(tempDir, \"key/a.json\", \"pass/a.txt\", \"key/1/2/3/b.json\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key:%s/pass\", tempStr, tempStr))), \":\");\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  public void shouldFindKeyPairOfFiles(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"key/a\", \"pass/a.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key/a;%s/pass/a.txt\", tempStr, tempStr))), \";\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs()).containsExactly(tuple(tempStr, \"key/a\", \"pass/a.txt\"));\n+  }\n+\n+  @Test\n+  public void shouldIgnoreSomeFiles(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(\n+        tempDir, \"key/.asdf.json\", \"key/.hidden2\", \"key/ignored\", \"key/a.json\", \"pass/a.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key;%s/pass\", tempStr, tempStr))), \";\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs()).containsExactly(tuple(tempStr, \"key/a.json\", \"pass/a.txt\"));\n+  }\n+\n+  @Test\n+  public void shouldHandleFilesAndFoldersInOneArgument(@TempDir final Path tempDir)\n+      throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"key/a\", \"pass/a.txt\", \"keyStore\", \"password\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(\n+                List.of(\n+                    String.format(\"%s/key/a:%s/pass/a.txt\", tempStr, tempStr),\n+                    String.format(\"%s/keyStore:%s/password\", tempStr, tempStr))),\n+            \":\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs().size()).isEqualTo(2);\n+  }\n+\n+  @Test\n+  public void shouldDetectMissingPasswordFileWhenDirectoryIsPresent(@TempDir final Path tempDir)\n+      throws IOException {\n+    createFolders(tempDir, \"key\", \"pass/a.txt\");\n+    createFiles(tempDir, \"key/a\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key/a;%s/pass/a.txt\", tempStr, tempStr))), \";\");\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  public void shouldDetectMissingPasswordFile(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"pass/a.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key/a:%s/pass/a.txt\", tempStr, tempStr))), \":\");\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  public void shouldDetectMissingKeyFile(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"key/a\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key/a:%s/pass/a.txt\", tempStr, tempStr))), \":\");\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  public void shouldSucceedCallingParseOnEmptyList() {\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(Optional.empty(), \":\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs()).isEmpty();\n+  }\n+\n+  @Test\n+  public void shouldHandleOldArgs(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"key/a\", \"pass/a.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(Optional.empty(), \":\");\n+    locator.parseKeyAndPasswordList(List.of(tempStr + \"/key/a\"), List.of(tempStr + \"/pass/a.txt\"));\n+    assertThat(locator.getFilePairs())\n+        .containsExactly(tuple(tempDir.toString(), \"key/a\", \"pass/a.txt\"));\n+  }\n+\n+  private void createFolders(final Path tempDir, String... paths) {\n+    for (String path : paths) {\n+      File file = new File(tempDir.toString() + File.separator + path);", "originalCommit": "a2877192f859317636e697c9ca1ec55953e73d71", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "20241fe2f46bf26833336cf41110fd5628f361a0", "chunk": "diff --git a/util/src/test/java/tech/pegasys/teku/util/config/KeyStoreFilesLocatorTest.java b/util/src/test/java/tech/pegasys/teku/util/config/KeyStoreFilesLocatorTest.java\nindex b29a9d67a5..b2c2e47162 100644\n--- a/util/src/test/java/tech/pegasys/teku/util/config/KeyStoreFilesLocatorTest.java\n+++ b/util/src/test/java/tech/pegasys/teku/util/config/KeyStoreFilesLocatorTest.java\n\n@@ -20,149 +20,227 @@ import java.io.File;\n import java.io.IOException;\n import java.nio.file.Path;\n import java.util.List;\n-import java.util.Optional;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.io.TempDir;\n \n public class KeyStoreFilesLocatorTest {\n+  private static final String PATH_SEP = \":\";\n+  private static final String PATH_SEP_WIN = \";\";\n+\n   @Test\n   public void shouldFindPairsAtDepth(@TempDir final Path tempDir) throws IOException {\n-    createFolders(tempDir, \"key/1/2/3\", \"pass/1/2/3\");\n-    createFiles(tempDir, \"key/a.json\", \"pass/a.txt\", \"key/1/2/3/b.json\", \"pass/1/2/3/b.txt\");\n-    final String tempStr = tempDir.toString();\n-    KeyStoreFilesLocator locator =\n-        new KeyStoreFilesLocator(\n-            Optional.of(List.of(String.format(\"%s/key:%s/pass\", tempStr, tempStr))), \":\");\n+    createFolders(tempDir, Path.of(\"key\", \"1\", \"2\", \"3\"), Path.of(\"pass\", \"1\", \"2\", \"3\"));\n+    createFiles(\n+        tempDir,\n+        Path.of(\"key\", \"a.json\"),\n+        Path.of(\"pass\", \"a.txt\"),\n+        Path.of(\"key\", \"1\", \"2\", \"3\", \"b.json\"),\n+        Path.of(\"pass\", \"1\", \"2\", \"3\", \"b.txt\"));\n+    final String p1 = generatePath(tempDir, PATH_SEP, \"key\", \"pass\");\n+    final KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(p1), PATH_SEP);\n     locator.parse();\n+\n     assertThat(locator.getFilePairs())\n         .containsExactlyInAnyOrder(\n-            tuple(tempStr, \"key/a.json\", \"pass/a.txt\"),\n-            tuple(tempStr, \"key/1/2/3/b.json\", \"pass/1/2/3/b.txt\"));\n+            tuple(\n+                tempDir, Path.of(\"key\", \"a.json\").toString(), Path.of(\"pass\", \"a.txt\").toString()),\n+            tuple(\n+                tempDir,\n+                Path.of(\"key\", \"1\", \"2\", \"3\", \"b.json\").toString(),\n+                Path.of(\"pass\", \"1\", \"2\", \"3\", \"b.txt\").toString()));\n   }\n \n   @Test\n   public void shouldFindMissingPasswordAtDepth(@TempDir final Path tempDir) throws IOException {\n-    createFolders(tempDir, \"key/1/2/3\", \"pass/1/2/3\");\n-    createFiles(tempDir, \"key/a.json\", \"pass/a.txt\", \"key/1/2/3/b.json\");\n-    final String tempStr = tempDir.toString();\n-    KeyStoreFilesLocator locator =\n-        new KeyStoreFilesLocator(\n-            Optional.of(List.of(String.format(\"%s/key:%s/pass\", tempStr, tempStr))), \":\");\n+    createFolders(tempDir, Path.of(\"key\", \"1\", \"2\", \"3\"), Path.of(\"pass\", \"1\", \"2\", \"3\"));\n+    createFiles(\n+        tempDir,\n+        Path.of(\"key\", \"a.json\"),\n+        Path.of(\"pass\", \"a.txt\"),\n+        Path.of(\"key\", \"1\", \"2\", \"3\", \"b.json\"));\n+    final String p1 = generatePath(tempDir, PATH_SEP, \"key\", \"pass\");\n+    final KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(p1), PATH_SEP);\n+\n     assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n   }\n \n   @Test\n   public void shouldFindKeyPairOfFiles(@TempDir final Path tempDir) throws IOException {\n     createFolders(tempDir, \"key\", \"pass\");\n-    createFiles(tempDir, \"key/a\", \"pass/a.txt\");\n-    final String tempStr = tempDir.toString();\n-    KeyStoreFilesLocator locator =\n-        new KeyStoreFilesLocator(\n-            Optional.of(List.of(String.format(\"%s/key/a;%s/pass/a.txt\", tempStr, tempStr))), \";\");\n+    createFiles(tempDir, Path.of(\"key\", \"a\"), Path.of(\"pass\", \"a.txt\"));\n+    final String p1 =\n+        generatePath(tempDir, PATH_SEP_WIN, List.of(\"key\", \"a\"), List.of(\"pass\", \"a.txt\"));\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(p1), PATH_SEP_WIN);\n     locator.parse();\n-    assertThat(locator.getFilePairs()).containsExactly(tuple(tempStr, \"key/a\", \"pass/a.txt\"));\n+\n+    assertThat(locator.getFilePairs())\n+        .containsExactly(\n+            tuple(tempDir, Path.of(\"key\", \"a\").toString(), Path.of(\"pass\", \"a.txt\").toString()));\n   }\n \n   @Test\n   public void shouldIgnoreSomeFiles(@TempDir final Path tempDir) throws IOException {\n     createFolders(tempDir, \"key\", \"pass\");\n     createFiles(\n-        tempDir, \"key/.asdf.json\", \"key/.hidden2\", \"key/ignored\", \"key/a.json\", \"pass/a.txt\");\n-    final String tempStr = tempDir.toString();\n-    KeyStoreFilesLocator locator =\n-        new KeyStoreFilesLocator(\n-            Optional.of(List.of(String.format(\"%s/key;%s/pass\", tempStr, tempStr))), \";\");\n+        tempDir,\n+        Path.of(\"key\", \".asdf.json\"),\n+        Path.of(\"key\", \".hidden2\"),\n+        Path.of(\"key\", \"ignored\"),\n+        Path.of(\"key\", \"a.json\"),\n+        Path.of(\"pass\", \"a.txt\"));\n+    final String p1 = generatePath(tempDir, PATH_SEP_WIN, \"key\", \"pass\");\n+    final KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(p1), PATH_SEP_WIN);\n     locator.parse();\n-    assertThat(locator.getFilePairs()).containsExactly(tuple(tempStr, \"key/a.json\", \"pass/a.txt\"));\n+\n+    assertThat(locator.getFilePairs())\n+        .containsExactly(\n+            tuple(\n+                tempDir, Path.of(\"key\", \"a.json\").toString(), Path.of(\"pass\", \"a.txt\").toString()));\n   }\n \n   @Test\n   public void shouldHandleFilesAndFoldersInOneArgument(@TempDir final Path tempDir)\n       throws IOException {\n     createFolders(tempDir, \"key\", \"pass\");\n-    createFiles(tempDir, \"key/a\", \"pass/a.txt\", \"keyStore\", \"password\");\n-    final String tempStr = tempDir.toString();\n-    KeyStoreFilesLocator locator =\n-        new KeyStoreFilesLocator(\n-            Optional.of(\n-                List.of(\n-                    String.format(\"%s/key/a:%s/pass/a.txt\", tempStr, tempStr),\n-                    String.format(\"%s/keyStore:%s/password\", tempStr, tempStr))),\n-            \":\");\n+    createFiles(\n+        tempDir,\n+        Path.of(\"key\", \"a\"),\n+        Path.of(\"pass\", \"a.txt\"),\n+        Path.of(\"keyStore\"),\n+        Path.of(\"password\"));\n+    final String p1 =\n+        generatePath(tempDir, PATH_SEP, List.of(\"key\", \"a\"), List.of(\"pass\", \"a.txt\"));\n+    final String p2 = generatePath(tempDir, PATH_SEP, \"keyStore\", \"password\");\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(p1, p2), PATH_SEP);\n     locator.parse();\n-    assertThat(locator.getFilePairs().size()).isEqualTo(2);\n+\n+    assertThat(locator.getFilePairs())\n+        .containsExactlyInAnyOrder(\n+            tuple(tempDir, Path.of(\"key\", \"a\").toString(), Path.of(\"pass\", \"a.txt\").toString()),\n+            tuple(tempDir, \"keyStore\", \"password\"));\n   }\n \n   @Test\n   public void shouldDetectMissingPasswordFileWhenDirectoryIsPresent(@TempDir final Path tempDir)\n       throws IOException {\n-    createFolders(tempDir, \"key\", \"pass/a.txt\");\n-    createFiles(tempDir, \"key/a\");\n-    final String tempStr = tempDir.toString();\n-    KeyStoreFilesLocator locator =\n-        new KeyStoreFilesLocator(\n-            Optional.of(List.of(String.format(\"%s/key/a;%s/pass/a.txt\", tempStr, tempStr))), \";\");\n+    createFolders(tempDir, Path.of(\"key\"), Path.of(\"pass\", \"a.txt\"));\n+    createFiles(tempDir, Path.of(\"key\", \"a\"));\n+    final String p1 =\n+        generatePath(tempDir, PATH_SEP_WIN, List.of(\"key\", \"a\"), List.of(\"pass\", \"a.txt\"));\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(p1), PATH_SEP_WIN);\n+\n     assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n   }\n \n   @Test\n   public void shouldDetectMissingPasswordFile(@TempDir final Path tempDir) throws IOException {\n     createFolders(tempDir, \"key\", \"pass\");\n-    createFiles(tempDir, \"pass/a.txt\");\n-    final String tempStr = tempDir.toString();\n-    KeyStoreFilesLocator locator =\n-        new KeyStoreFilesLocator(\n-            Optional.of(List.of(String.format(\"%s/key/a:%s/pass/a.txt\", tempStr, tempStr))), \":\");\n+    createFiles(tempDir, Path.of(\"pass\", \"a.txt\"));\n+    final String p1 =\n+        generatePath(tempDir, PATH_SEP, List.of(\"key\", \"a\"), List.of(\"pass\", \"a.txt\"));\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(p1), PATH_SEP);\n+\n     assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n   }\n \n   @Test\n   public void shouldDetectMissingKeyFile(@TempDir final Path tempDir) throws IOException {\n     createFolders(tempDir, \"key\", \"pass\");\n-    createFiles(tempDir, \"key/a\");\n-    final String tempStr = tempDir.toString();\n-    KeyStoreFilesLocator locator =\n-        new KeyStoreFilesLocator(\n-            Optional.of(List.of(String.format(\"%s/key/a:%s/pass/a.txt\", tempStr, tempStr))), \":\");\n+    createFiles(tempDir, Path.of(\"key\", \"a\"));\n+    final String p1 =\n+        generatePath(tempDir, PATH_SEP, List.of(\"key\", \"a\"), List.of(\"pass\", \"a.txt\"));\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(p1), PATH_SEP);\n+\n     assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n   }\n \n   @Test\n   public void shouldSucceedCallingParseOnEmptyList() {\n-    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(Optional.empty(), \":\");\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(), PATH_SEP);\n     locator.parse();\n     assertThat(locator.getFilePairs()).isEmpty();\n   }\n \n+  @Test\n+  public void shouldFailWhenSplittingTooManySeparators() {\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(\"a:b:c\"), PATH_SEP);\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  public void shouldFailWhenStringContainsOnlyKey() {\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(\"key\"), PATH_SEP);\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n   @Test\n   public void shouldHandleOldArgs(@TempDir final Path tempDir) throws IOException {\n-    createFolders(tempDir, \"key\", \"pass\");\n-    createFiles(tempDir, \"key/a\", \"pass/a.txt\");\n+    createFolders(tempDir, Path.of(\"key\"), Path.of(\"pass\"));\n+    createFiles(tempDir, Path.of(\"key\", \"a\"), Path.of(\"pass\", \"a.txt\"));\n     final String tempStr = tempDir.toString();\n-    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(Optional.empty(), \":\");\n-    locator.parseKeyAndPasswordList(List.of(tempStr + \"/key/a\"), List.of(tempStr + \"/pass/a.txt\"));\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(), PATH_SEP);\n+    locator.parseKeyAndPasswordList(\n+        List.of(Path.of(tempStr, \"key\", \"a\").toString()),\n+        List.of(Path.of(tempStr, \"pass\", \"a.txt\").toString()));\n+\n     assertThat(locator.getFilePairs())\n-        .containsExactly(tuple(tempDir.toString(), \"key/a\", \"pass/a.txt\"));\n+        .containsExactly(tuple(tempDir, List.of(\"key\", \"a\"), List.of(\"pass\", \"a.txt\")));\n   }\n \n   private void createFolders(final Path tempDir, String... paths) {\n     for (String path : paths) {\n-      File file = new File(tempDir.toString() + File.separator + path);\n-      file.mkdirs();\n+      File file = tempDir.resolve(path).toFile();\n+      if (!file.mkdirs() && !file.isDirectory()) {\n+        Assertions.fail(\"Failed to create directory \" + file);\n+      }\n     }\n   }\n \n-  private void createFiles(final Path tempDir, String... paths) throws IOException {\n-    for (String path : paths) {\n-      File file = new File(tempDir.toString() + File.separator + path);\n+  private void createFolders(final Path tempDir, Path... paths) {\n+    for (Path path : paths) {\n+      File file = tempDir.resolve(path).toFile();\n+      if (!file.mkdirs() && !file.isDirectory()) {\n+        Assertions.fail(\"Failed to create directory \" + file);\n+      }\n+    }\n+  }\n+\n+  private void createFiles(final Path tempDir, Path... paths) throws IOException {\n+    for (Path path : paths) {\n+      File file = tempDir.resolve(path).toFile();\n       file.createNewFile();\n     }\n   }\n \n-  private Pair<Path, Path> tuple(final String tempStr, final String k, final String p) {\n+  private String generatePath(\n+      final Path tempDir, final String separator, final String key, final String pass) {\n+    return generatePath(tempDir, separator, List.of(key), List.of(pass));\n+  }\n+\n+  private String generatePath(\n+      final Path tempDir,\n+      final String separator,\n+      final List<String> keyList,\n+      final List<String> passList) {\n+    final String tempStr = tempDir.toString();\n+    return String.join(\n+        separator,\n+        Path.of(tempStr, keyList.toArray(new String[0])).toString(),\n+        Path.of(tempStr, passList.toArray(new String[0])).toString());\n+  }\n+\n+  private Pair<Path, Path> tuple(\n+      final Path tempDir, final List<String> key, final List<String> path) {\n+    final String tempStr = tempDir.toString();\n     return Pair.of(\n-        new File(String.format(\"%s/%s\", tempStr, k)).toPath(),\n-        new File(String.format(\"%s/%s\", tempStr, p)).toPath());\n+        Path.of(tempStr, key.toArray(new String[0])),\n+        Path.of(tempStr, path.toArray(new String[0])));\n+  }\n+\n+  private Pair<Path, Path> tuple(final Path tempDir, final String k, final String p) {\n+    final String tempStr = tempDir.toString();\n+    return Pair.of(new File(tempStr, k).toPath(), new File(tempStr, p).toPath());\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAxMjg1NA==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r469012854", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  file.mkdirs();\n          \n          \n            \n                  if (!file.mkdirs() && !file.isDirectory()) {\n          \n          \n            \n                    Assertions.fail(\"Failed to create directory \" + file);\n          \n          \n            \n                  }", "author": "ajsutton", "createdAt": "2020-08-12T05:27:15Z", "path": "util/src/test/java/tech/pegasys/teku/util/config/KeyStoreFilesLocatorTest.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.util.config;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Optional;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+public class KeyStoreFilesLocatorTest {\n+  @Test\n+  public void shouldFindPairsAtDepth(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key/1/2/3\", \"pass/1/2/3\");\n+    createFiles(tempDir, \"key/a.json\", \"pass/a.txt\", \"key/1/2/3/b.json\", \"pass/1/2/3/b.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key:%s/pass\", tempStr, tempStr))), \":\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs())\n+        .containsExactlyInAnyOrder(\n+            tuple(tempStr, \"key/a.json\", \"pass/a.txt\"),\n+            tuple(tempStr, \"key/1/2/3/b.json\", \"pass/1/2/3/b.txt\"));\n+  }\n+\n+  @Test\n+  public void shouldFindMissingPasswordAtDepth(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key/1/2/3\", \"pass/1/2/3\");\n+    createFiles(tempDir, \"key/a.json\", \"pass/a.txt\", \"key/1/2/3/b.json\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key:%s/pass\", tempStr, tempStr))), \":\");\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  public void shouldFindKeyPairOfFiles(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"key/a\", \"pass/a.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key/a;%s/pass/a.txt\", tempStr, tempStr))), \";\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs()).containsExactly(tuple(tempStr, \"key/a\", \"pass/a.txt\"));\n+  }\n+\n+  @Test\n+  public void shouldIgnoreSomeFiles(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(\n+        tempDir, \"key/.asdf.json\", \"key/.hidden2\", \"key/ignored\", \"key/a.json\", \"pass/a.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key;%s/pass\", tempStr, tempStr))), \";\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs()).containsExactly(tuple(tempStr, \"key/a.json\", \"pass/a.txt\"));\n+  }\n+\n+  @Test\n+  public void shouldHandleFilesAndFoldersInOneArgument(@TempDir final Path tempDir)\n+      throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"key/a\", \"pass/a.txt\", \"keyStore\", \"password\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(\n+                List.of(\n+                    String.format(\"%s/key/a:%s/pass/a.txt\", tempStr, tempStr),\n+                    String.format(\"%s/keyStore:%s/password\", tempStr, tempStr))),\n+            \":\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs().size()).isEqualTo(2);\n+  }\n+\n+  @Test\n+  public void shouldDetectMissingPasswordFileWhenDirectoryIsPresent(@TempDir final Path tempDir)\n+      throws IOException {\n+    createFolders(tempDir, \"key\", \"pass/a.txt\");\n+    createFiles(tempDir, \"key/a\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key/a;%s/pass/a.txt\", tempStr, tempStr))), \";\");\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  public void shouldDetectMissingPasswordFile(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"pass/a.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key/a:%s/pass/a.txt\", tempStr, tempStr))), \":\");\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  public void shouldDetectMissingKeyFile(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"key/a\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key/a:%s/pass/a.txt\", tempStr, tempStr))), \":\");\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  public void shouldSucceedCallingParseOnEmptyList() {\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(Optional.empty(), \":\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs()).isEmpty();\n+  }\n+\n+  @Test\n+  public void shouldHandleOldArgs(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"key/a\", \"pass/a.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(Optional.empty(), \":\");\n+    locator.parseKeyAndPasswordList(List.of(tempStr + \"/key/a\"), List.of(tempStr + \"/pass/a.txt\"));\n+    assertThat(locator.getFilePairs())\n+        .containsExactly(tuple(tempDir.toString(), \"key/a\", \"pass/a.txt\"));\n+  }\n+\n+  private void createFolders(final Path tempDir, String... paths) {\n+    for (String path : paths) {\n+      File file = new File(tempDir.toString() + File.separator + path);\n+      file.mkdirs();", "originalCommit": "a2877192f859317636e697c9ca1ec55953e73d71", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "20241fe2f46bf26833336cf41110fd5628f361a0", "chunk": "diff --git a/util/src/test/java/tech/pegasys/teku/util/config/KeyStoreFilesLocatorTest.java b/util/src/test/java/tech/pegasys/teku/util/config/KeyStoreFilesLocatorTest.java\nindex b29a9d67a5..b2c2e47162 100644\n--- a/util/src/test/java/tech/pegasys/teku/util/config/KeyStoreFilesLocatorTest.java\n+++ b/util/src/test/java/tech/pegasys/teku/util/config/KeyStoreFilesLocatorTest.java\n\n@@ -20,149 +20,227 @@ import java.io.File;\n import java.io.IOException;\n import java.nio.file.Path;\n import java.util.List;\n-import java.util.Optional;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.io.TempDir;\n \n public class KeyStoreFilesLocatorTest {\n+  private static final String PATH_SEP = \":\";\n+  private static final String PATH_SEP_WIN = \";\";\n+\n   @Test\n   public void shouldFindPairsAtDepth(@TempDir final Path tempDir) throws IOException {\n-    createFolders(tempDir, \"key/1/2/3\", \"pass/1/2/3\");\n-    createFiles(tempDir, \"key/a.json\", \"pass/a.txt\", \"key/1/2/3/b.json\", \"pass/1/2/3/b.txt\");\n-    final String tempStr = tempDir.toString();\n-    KeyStoreFilesLocator locator =\n-        new KeyStoreFilesLocator(\n-            Optional.of(List.of(String.format(\"%s/key:%s/pass\", tempStr, tempStr))), \":\");\n+    createFolders(tempDir, Path.of(\"key\", \"1\", \"2\", \"3\"), Path.of(\"pass\", \"1\", \"2\", \"3\"));\n+    createFiles(\n+        tempDir,\n+        Path.of(\"key\", \"a.json\"),\n+        Path.of(\"pass\", \"a.txt\"),\n+        Path.of(\"key\", \"1\", \"2\", \"3\", \"b.json\"),\n+        Path.of(\"pass\", \"1\", \"2\", \"3\", \"b.txt\"));\n+    final String p1 = generatePath(tempDir, PATH_SEP, \"key\", \"pass\");\n+    final KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(p1), PATH_SEP);\n     locator.parse();\n+\n     assertThat(locator.getFilePairs())\n         .containsExactlyInAnyOrder(\n-            tuple(tempStr, \"key/a.json\", \"pass/a.txt\"),\n-            tuple(tempStr, \"key/1/2/3/b.json\", \"pass/1/2/3/b.txt\"));\n+            tuple(\n+                tempDir, Path.of(\"key\", \"a.json\").toString(), Path.of(\"pass\", \"a.txt\").toString()),\n+            tuple(\n+                tempDir,\n+                Path.of(\"key\", \"1\", \"2\", \"3\", \"b.json\").toString(),\n+                Path.of(\"pass\", \"1\", \"2\", \"3\", \"b.txt\").toString()));\n   }\n \n   @Test\n   public void shouldFindMissingPasswordAtDepth(@TempDir final Path tempDir) throws IOException {\n-    createFolders(tempDir, \"key/1/2/3\", \"pass/1/2/3\");\n-    createFiles(tempDir, \"key/a.json\", \"pass/a.txt\", \"key/1/2/3/b.json\");\n-    final String tempStr = tempDir.toString();\n-    KeyStoreFilesLocator locator =\n-        new KeyStoreFilesLocator(\n-            Optional.of(List.of(String.format(\"%s/key:%s/pass\", tempStr, tempStr))), \":\");\n+    createFolders(tempDir, Path.of(\"key\", \"1\", \"2\", \"3\"), Path.of(\"pass\", \"1\", \"2\", \"3\"));\n+    createFiles(\n+        tempDir,\n+        Path.of(\"key\", \"a.json\"),\n+        Path.of(\"pass\", \"a.txt\"),\n+        Path.of(\"key\", \"1\", \"2\", \"3\", \"b.json\"));\n+    final String p1 = generatePath(tempDir, PATH_SEP, \"key\", \"pass\");\n+    final KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(p1), PATH_SEP);\n+\n     assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n   }\n \n   @Test\n   public void shouldFindKeyPairOfFiles(@TempDir final Path tempDir) throws IOException {\n     createFolders(tempDir, \"key\", \"pass\");\n-    createFiles(tempDir, \"key/a\", \"pass/a.txt\");\n-    final String tempStr = tempDir.toString();\n-    KeyStoreFilesLocator locator =\n-        new KeyStoreFilesLocator(\n-            Optional.of(List.of(String.format(\"%s/key/a;%s/pass/a.txt\", tempStr, tempStr))), \";\");\n+    createFiles(tempDir, Path.of(\"key\", \"a\"), Path.of(\"pass\", \"a.txt\"));\n+    final String p1 =\n+        generatePath(tempDir, PATH_SEP_WIN, List.of(\"key\", \"a\"), List.of(\"pass\", \"a.txt\"));\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(p1), PATH_SEP_WIN);\n     locator.parse();\n-    assertThat(locator.getFilePairs()).containsExactly(tuple(tempStr, \"key/a\", \"pass/a.txt\"));\n+\n+    assertThat(locator.getFilePairs())\n+        .containsExactly(\n+            tuple(tempDir, Path.of(\"key\", \"a\").toString(), Path.of(\"pass\", \"a.txt\").toString()));\n   }\n \n   @Test\n   public void shouldIgnoreSomeFiles(@TempDir final Path tempDir) throws IOException {\n     createFolders(tempDir, \"key\", \"pass\");\n     createFiles(\n-        tempDir, \"key/.asdf.json\", \"key/.hidden2\", \"key/ignored\", \"key/a.json\", \"pass/a.txt\");\n-    final String tempStr = tempDir.toString();\n-    KeyStoreFilesLocator locator =\n-        new KeyStoreFilesLocator(\n-            Optional.of(List.of(String.format(\"%s/key;%s/pass\", tempStr, tempStr))), \";\");\n+        tempDir,\n+        Path.of(\"key\", \".asdf.json\"),\n+        Path.of(\"key\", \".hidden2\"),\n+        Path.of(\"key\", \"ignored\"),\n+        Path.of(\"key\", \"a.json\"),\n+        Path.of(\"pass\", \"a.txt\"));\n+    final String p1 = generatePath(tempDir, PATH_SEP_WIN, \"key\", \"pass\");\n+    final KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(p1), PATH_SEP_WIN);\n     locator.parse();\n-    assertThat(locator.getFilePairs()).containsExactly(tuple(tempStr, \"key/a.json\", \"pass/a.txt\"));\n+\n+    assertThat(locator.getFilePairs())\n+        .containsExactly(\n+            tuple(\n+                tempDir, Path.of(\"key\", \"a.json\").toString(), Path.of(\"pass\", \"a.txt\").toString()));\n   }\n \n   @Test\n   public void shouldHandleFilesAndFoldersInOneArgument(@TempDir final Path tempDir)\n       throws IOException {\n     createFolders(tempDir, \"key\", \"pass\");\n-    createFiles(tempDir, \"key/a\", \"pass/a.txt\", \"keyStore\", \"password\");\n-    final String tempStr = tempDir.toString();\n-    KeyStoreFilesLocator locator =\n-        new KeyStoreFilesLocator(\n-            Optional.of(\n-                List.of(\n-                    String.format(\"%s/key/a:%s/pass/a.txt\", tempStr, tempStr),\n-                    String.format(\"%s/keyStore:%s/password\", tempStr, tempStr))),\n-            \":\");\n+    createFiles(\n+        tempDir,\n+        Path.of(\"key\", \"a\"),\n+        Path.of(\"pass\", \"a.txt\"),\n+        Path.of(\"keyStore\"),\n+        Path.of(\"password\"));\n+    final String p1 =\n+        generatePath(tempDir, PATH_SEP, List.of(\"key\", \"a\"), List.of(\"pass\", \"a.txt\"));\n+    final String p2 = generatePath(tempDir, PATH_SEP, \"keyStore\", \"password\");\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(p1, p2), PATH_SEP);\n     locator.parse();\n-    assertThat(locator.getFilePairs().size()).isEqualTo(2);\n+\n+    assertThat(locator.getFilePairs())\n+        .containsExactlyInAnyOrder(\n+            tuple(tempDir, Path.of(\"key\", \"a\").toString(), Path.of(\"pass\", \"a.txt\").toString()),\n+            tuple(tempDir, \"keyStore\", \"password\"));\n   }\n \n   @Test\n   public void shouldDetectMissingPasswordFileWhenDirectoryIsPresent(@TempDir final Path tempDir)\n       throws IOException {\n-    createFolders(tempDir, \"key\", \"pass/a.txt\");\n-    createFiles(tempDir, \"key/a\");\n-    final String tempStr = tempDir.toString();\n-    KeyStoreFilesLocator locator =\n-        new KeyStoreFilesLocator(\n-            Optional.of(List.of(String.format(\"%s/key/a;%s/pass/a.txt\", tempStr, tempStr))), \";\");\n+    createFolders(tempDir, Path.of(\"key\"), Path.of(\"pass\", \"a.txt\"));\n+    createFiles(tempDir, Path.of(\"key\", \"a\"));\n+    final String p1 =\n+        generatePath(tempDir, PATH_SEP_WIN, List.of(\"key\", \"a\"), List.of(\"pass\", \"a.txt\"));\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(p1), PATH_SEP_WIN);\n+\n     assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n   }\n \n   @Test\n   public void shouldDetectMissingPasswordFile(@TempDir final Path tempDir) throws IOException {\n     createFolders(tempDir, \"key\", \"pass\");\n-    createFiles(tempDir, \"pass/a.txt\");\n-    final String tempStr = tempDir.toString();\n-    KeyStoreFilesLocator locator =\n-        new KeyStoreFilesLocator(\n-            Optional.of(List.of(String.format(\"%s/key/a:%s/pass/a.txt\", tempStr, tempStr))), \":\");\n+    createFiles(tempDir, Path.of(\"pass\", \"a.txt\"));\n+    final String p1 =\n+        generatePath(tempDir, PATH_SEP, List.of(\"key\", \"a\"), List.of(\"pass\", \"a.txt\"));\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(p1), PATH_SEP);\n+\n     assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n   }\n \n   @Test\n   public void shouldDetectMissingKeyFile(@TempDir final Path tempDir) throws IOException {\n     createFolders(tempDir, \"key\", \"pass\");\n-    createFiles(tempDir, \"key/a\");\n-    final String tempStr = tempDir.toString();\n-    KeyStoreFilesLocator locator =\n-        new KeyStoreFilesLocator(\n-            Optional.of(List.of(String.format(\"%s/key/a:%s/pass/a.txt\", tempStr, tempStr))), \":\");\n+    createFiles(tempDir, Path.of(\"key\", \"a\"));\n+    final String p1 =\n+        generatePath(tempDir, PATH_SEP, List.of(\"key\", \"a\"), List.of(\"pass\", \"a.txt\"));\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(p1), PATH_SEP);\n+\n     assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n   }\n \n   @Test\n   public void shouldSucceedCallingParseOnEmptyList() {\n-    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(Optional.empty(), \":\");\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(), PATH_SEP);\n     locator.parse();\n     assertThat(locator.getFilePairs()).isEmpty();\n   }\n \n+  @Test\n+  public void shouldFailWhenSplittingTooManySeparators() {\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(\"a:b:c\"), PATH_SEP);\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  public void shouldFailWhenStringContainsOnlyKey() {\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(\"key\"), PATH_SEP);\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n   @Test\n   public void shouldHandleOldArgs(@TempDir final Path tempDir) throws IOException {\n-    createFolders(tempDir, \"key\", \"pass\");\n-    createFiles(tempDir, \"key/a\", \"pass/a.txt\");\n+    createFolders(tempDir, Path.of(\"key\"), Path.of(\"pass\"));\n+    createFiles(tempDir, Path.of(\"key\", \"a\"), Path.of(\"pass\", \"a.txt\"));\n     final String tempStr = tempDir.toString();\n-    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(Optional.empty(), \":\");\n-    locator.parseKeyAndPasswordList(List.of(tempStr + \"/key/a\"), List.of(tempStr + \"/pass/a.txt\"));\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(), PATH_SEP);\n+    locator.parseKeyAndPasswordList(\n+        List.of(Path.of(tempStr, \"key\", \"a\").toString()),\n+        List.of(Path.of(tempStr, \"pass\", \"a.txt\").toString()));\n+\n     assertThat(locator.getFilePairs())\n-        .containsExactly(tuple(tempDir.toString(), \"key/a\", \"pass/a.txt\"));\n+        .containsExactly(tuple(tempDir, List.of(\"key\", \"a\"), List.of(\"pass\", \"a.txt\")));\n   }\n \n   private void createFolders(final Path tempDir, String... paths) {\n     for (String path : paths) {\n-      File file = new File(tempDir.toString() + File.separator + path);\n-      file.mkdirs();\n+      File file = tempDir.resolve(path).toFile();\n+      if (!file.mkdirs() && !file.isDirectory()) {\n+        Assertions.fail(\"Failed to create directory \" + file);\n+      }\n     }\n   }\n \n-  private void createFiles(final Path tempDir, String... paths) throws IOException {\n-    for (String path : paths) {\n-      File file = new File(tempDir.toString() + File.separator + path);\n+  private void createFolders(final Path tempDir, Path... paths) {\n+    for (Path path : paths) {\n+      File file = tempDir.resolve(path).toFile();\n+      if (!file.mkdirs() && !file.isDirectory()) {\n+        Assertions.fail(\"Failed to create directory \" + file);\n+      }\n+    }\n+  }\n+\n+  private void createFiles(final Path tempDir, Path... paths) throws IOException {\n+    for (Path path : paths) {\n+      File file = tempDir.resolve(path).toFile();\n       file.createNewFile();\n     }\n   }\n \n-  private Pair<Path, Path> tuple(final String tempStr, final String k, final String p) {\n+  private String generatePath(\n+      final Path tempDir, final String separator, final String key, final String pass) {\n+    return generatePath(tempDir, separator, List.of(key), List.of(pass));\n+  }\n+\n+  private String generatePath(\n+      final Path tempDir,\n+      final String separator,\n+      final List<String> keyList,\n+      final List<String> passList) {\n+    final String tempStr = tempDir.toString();\n+    return String.join(\n+        separator,\n+        Path.of(tempStr, keyList.toArray(new String[0])).toString(),\n+        Path.of(tempStr, passList.toArray(new String[0])).toString());\n+  }\n+\n+  private Pair<Path, Path> tuple(\n+      final Path tempDir, final List<String> key, final List<String> path) {\n+    final String tempStr = tempDir.toString();\n     return Pair.of(\n-        new File(String.format(\"%s/%s\", tempStr, k)).toPath(),\n-        new File(String.format(\"%s/%s\", tempStr, p)).toPath());\n+        Path.of(tempStr, key.toArray(new String[0])),\n+        Path.of(tempStr, path.toArray(new String[0])));\n+  }\n+\n+  private Pair<Path, Path> tuple(final Path tempDir, final String k, final String p) {\n+    final String tempStr = tempDir.toString();\n+    return Pair.of(new File(tempStr, k).toPath(), new File(tempStr, p).toPath());\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAxMzEyNg==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r469013126", "bodyText": "Need to avoid hard coding / as the path separator and use Path.resolve or Path.of to join the pieces.", "author": "ajsutton", "createdAt": "2020-08-12T05:28:22Z", "path": "util/src/test/java/tech/pegasys/teku/util/config/KeyStoreFilesLocatorTest.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.util.config;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Optional;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+\n+public class KeyStoreFilesLocatorTest {\n+  @Test\n+  public void shouldFindPairsAtDepth(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key/1/2/3\", \"pass/1/2/3\");\n+    createFiles(tempDir, \"key/a.json\", \"pass/a.txt\", \"key/1/2/3/b.json\", \"pass/1/2/3/b.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key:%s/pass\", tempStr, tempStr))), \":\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs())\n+        .containsExactlyInAnyOrder(\n+            tuple(tempStr, \"key/a.json\", \"pass/a.txt\"),\n+            tuple(tempStr, \"key/1/2/3/b.json\", \"pass/1/2/3/b.txt\"));\n+  }\n+\n+  @Test\n+  public void shouldFindMissingPasswordAtDepth(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key/1/2/3\", \"pass/1/2/3\");\n+    createFiles(tempDir, \"key/a.json\", \"pass/a.txt\", \"key/1/2/3/b.json\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key:%s/pass\", tempStr, tempStr))), \":\");\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  public void shouldFindKeyPairOfFiles(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"key/a\", \"pass/a.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key/a;%s/pass/a.txt\", tempStr, tempStr))), \";\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs()).containsExactly(tuple(tempStr, \"key/a\", \"pass/a.txt\"));\n+  }\n+\n+  @Test\n+  public void shouldIgnoreSomeFiles(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(\n+        tempDir, \"key/.asdf.json\", \"key/.hidden2\", \"key/ignored\", \"key/a.json\", \"pass/a.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key;%s/pass\", tempStr, tempStr))), \";\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs()).containsExactly(tuple(tempStr, \"key/a.json\", \"pass/a.txt\"));\n+  }\n+\n+  @Test\n+  public void shouldHandleFilesAndFoldersInOneArgument(@TempDir final Path tempDir)\n+      throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"key/a\", \"pass/a.txt\", \"keyStore\", \"password\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(\n+                List.of(\n+                    String.format(\"%s/key/a:%s/pass/a.txt\", tempStr, tempStr),\n+                    String.format(\"%s/keyStore:%s/password\", tempStr, tempStr))),\n+            \":\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs().size()).isEqualTo(2);\n+  }\n+\n+  @Test\n+  public void shouldDetectMissingPasswordFileWhenDirectoryIsPresent(@TempDir final Path tempDir)\n+      throws IOException {\n+    createFolders(tempDir, \"key\", \"pass/a.txt\");\n+    createFiles(tempDir, \"key/a\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key/a;%s/pass/a.txt\", tempStr, tempStr))), \";\");\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  public void shouldDetectMissingPasswordFile(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"pass/a.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key/a:%s/pass/a.txt\", tempStr, tempStr))), \":\");\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  public void shouldDetectMissingKeyFile(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"key/a\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator =\n+        new KeyStoreFilesLocator(\n+            Optional.of(List.of(String.format(\"%s/key/a:%s/pass/a.txt\", tempStr, tempStr))), \":\");\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  public void shouldSucceedCallingParseOnEmptyList() {\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(Optional.empty(), \":\");\n+    locator.parse();\n+    assertThat(locator.getFilePairs()).isEmpty();\n+  }\n+\n+  @Test\n+  public void shouldHandleOldArgs(@TempDir final Path tempDir) throws IOException {\n+    createFolders(tempDir, \"key\", \"pass\");\n+    createFiles(tempDir, \"key/a\", \"pass/a.txt\");\n+    final String tempStr = tempDir.toString();\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(Optional.empty(), \":\");\n+    locator.parseKeyAndPasswordList(List.of(tempStr + \"/key/a\"), List.of(tempStr + \"/pass/a.txt\"));", "originalCommit": "a2877192f859317636e697c9ca1ec55953e73d71", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "20241fe2f46bf26833336cf41110fd5628f361a0", "chunk": "diff --git a/util/src/test/java/tech/pegasys/teku/util/config/KeyStoreFilesLocatorTest.java b/util/src/test/java/tech/pegasys/teku/util/config/KeyStoreFilesLocatorTest.java\nindex b29a9d67a5..b2c2e47162 100644\n--- a/util/src/test/java/tech/pegasys/teku/util/config/KeyStoreFilesLocatorTest.java\n+++ b/util/src/test/java/tech/pegasys/teku/util/config/KeyStoreFilesLocatorTest.java\n\n@@ -20,149 +20,227 @@ import java.io.File;\n import java.io.IOException;\n import java.nio.file.Path;\n import java.util.List;\n-import java.util.Optional;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.io.TempDir;\n \n public class KeyStoreFilesLocatorTest {\n+  private static final String PATH_SEP = \":\";\n+  private static final String PATH_SEP_WIN = \";\";\n+\n   @Test\n   public void shouldFindPairsAtDepth(@TempDir final Path tempDir) throws IOException {\n-    createFolders(tempDir, \"key/1/2/3\", \"pass/1/2/3\");\n-    createFiles(tempDir, \"key/a.json\", \"pass/a.txt\", \"key/1/2/3/b.json\", \"pass/1/2/3/b.txt\");\n-    final String tempStr = tempDir.toString();\n-    KeyStoreFilesLocator locator =\n-        new KeyStoreFilesLocator(\n-            Optional.of(List.of(String.format(\"%s/key:%s/pass\", tempStr, tempStr))), \":\");\n+    createFolders(tempDir, Path.of(\"key\", \"1\", \"2\", \"3\"), Path.of(\"pass\", \"1\", \"2\", \"3\"));\n+    createFiles(\n+        tempDir,\n+        Path.of(\"key\", \"a.json\"),\n+        Path.of(\"pass\", \"a.txt\"),\n+        Path.of(\"key\", \"1\", \"2\", \"3\", \"b.json\"),\n+        Path.of(\"pass\", \"1\", \"2\", \"3\", \"b.txt\"));\n+    final String p1 = generatePath(tempDir, PATH_SEP, \"key\", \"pass\");\n+    final KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(p1), PATH_SEP);\n     locator.parse();\n+\n     assertThat(locator.getFilePairs())\n         .containsExactlyInAnyOrder(\n-            tuple(tempStr, \"key/a.json\", \"pass/a.txt\"),\n-            tuple(tempStr, \"key/1/2/3/b.json\", \"pass/1/2/3/b.txt\"));\n+            tuple(\n+                tempDir, Path.of(\"key\", \"a.json\").toString(), Path.of(\"pass\", \"a.txt\").toString()),\n+            tuple(\n+                tempDir,\n+                Path.of(\"key\", \"1\", \"2\", \"3\", \"b.json\").toString(),\n+                Path.of(\"pass\", \"1\", \"2\", \"3\", \"b.txt\").toString()));\n   }\n \n   @Test\n   public void shouldFindMissingPasswordAtDepth(@TempDir final Path tempDir) throws IOException {\n-    createFolders(tempDir, \"key/1/2/3\", \"pass/1/2/3\");\n-    createFiles(tempDir, \"key/a.json\", \"pass/a.txt\", \"key/1/2/3/b.json\");\n-    final String tempStr = tempDir.toString();\n-    KeyStoreFilesLocator locator =\n-        new KeyStoreFilesLocator(\n-            Optional.of(List.of(String.format(\"%s/key:%s/pass\", tempStr, tempStr))), \":\");\n+    createFolders(tempDir, Path.of(\"key\", \"1\", \"2\", \"3\"), Path.of(\"pass\", \"1\", \"2\", \"3\"));\n+    createFiles(\n+        tempDir,\n+        Path.of(\"key\", \"a.json\"),\n+        Path.of(\"pass\", \"a.txt\"),\n+        Path.of(\"key\", \"1\", \"2\", \"3\", \"b.json\"));\n+    final String p1 = generatePath(tempDir, PATH_SEP, \"key\", \"pass\");\n+    final KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(p1), PATH_SEP);\n+\n     assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n   }\n \n   @Test\n   public void shouldFindKeyPairOfFiles(@TempDir final Path tempDir) throws IOException {\n     createFolders(tempDir, \"key\", \"pass\");\n-    createFiles(tempDir, \"key/a\", \"pass/a.txt\");\n-    final String tempStr = tempDir.toString();\n-    KeyStoreFilesLocator locator =\n-        new KeyStoreFilesLocator(\n-            Optional.of(List.of(String.format(\"%s/key/a;%s/pass/a.txt\", tempStr, tempStr))), \";\");\n+    createFiles(tempDir, Path.of(\"key\", \"a\"), Path.of(\"pass\", \"a.txt\"));\n+    final String p1 =\n+        generatePath(tempDir, PATH_SEP_WIN, List.of(\"key\", \"a\"), List.of(\"pass\", \"a.txt\"));\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(p1), PATH_SEP_WIN);\n     locator.parse();\n-    assertThat(locator.getFilePairs()).containsExactly(tuple(tempStr, \"key/a\", \"pass/a.txt\"));\n+\n+    assertThat(locator.getFilePairs())\n+        .containsExactly(\n+            tuple(tempDir, Path.of(\"key\", \"a\").toString(), Path.of(\"pass\", \"a.txt\").toString()));\n   }\n \n   @Test\n   public void shouldIgnoreSomeFiles(@TempDir final Path tempDir) throws IOException {\n     createFolders(tempDir, \"key\", \"pass\");\n     createFiles(\n-        tempDir, \"key/.asdf.json\", \"key/.hidden2\", \"key/ignored\", \"key/a.json\", \"pass/a.txt\");\n-    final String tempStr = tempDir.toString();\n-    KeyStoreFilesLocator locator =\n-        new KeyStoreFilesLocator(\n-            Optional.of(List.of(String.format(\"%s/key;%s/pass\", tempStr, tempStr))), \";\");\n+        tempDir,\n+        Path.of(\"key\", \".asdf.json\"),\n+        Path.of(\"key\", \".hidden2\"),\n+        Path.of(\"key\", \"ignored\"),\n+        Path.of(\"key\", \"a.json\"),\n+        Path.of(\"pass\", \"a.txt\"));\n+    final String p1 = generatePath(tempDir, PATH_SEP_WIN, \"key\", \"pass\");\n+    final KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(p1), PATH_SEP_WIN);\n     locator.parse();\n-    assertThat(locator.getFilePairs()).containsExactly(tuple(tempStr, \"key/a.json\", \"pass/a.txt\"));\n+\n+    assertThat(locator.getFilePairs())\n+        .containsExactly(\n+            tuple(\n+                tempDir, Path.of(\"key\", \"a.json\").toString(), Path.of(\"pass\", \"a.txt\").toString()));\n   }\n \n   @Test\n   public void shouldHandleFilesAndFoldersInOneArgument(@TempDir final Path tempDir)\n       throws IOException {\n     createFolders(tempDir, \"key\", \"pass\");\n-    createFiles(tempDir, \"key/a\", \"pass/a.txt\", \"keyStore\", \"password\");\n-    final String tempStr = tempDir.toString();\n-    KeyStoreFilesLocator locator =\n-        new KeyStoreFilesLocator(\n-            Optional.of(\n-                List.of(\n-                    String.format(\"%s/key/a:%s/pass/a.txt\", tempStr, tempStr),\n-                    String.format(\"%s/keyStore:%s/password\", tempStr, tempStr))),\n-            \":\");\n+    createFiles(\n+        tempDir,\n+        Path.of(\"key\", \"a\"),\n+        Path.of(\"pass\", \"a.txt\"),\n+        Path.of(\"keyStore\"),\n+        Path.of(\"password\"));\n+    final String p1 =\n+        generatePath(tempDir, PATH_SEP, List.of(\"key\", \"a\"), List.of(\"pass\", \"a.txt\"));\n+    final String p2 = generatePath(tempDir, PATH_SEP, \"keyStore\", \"password\");\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(p1, p2), PATH_SEP);\n     locator.parse();\n-    assertThat(locator.getFilePairs().size()).isEqualTo(2);\n+\n+    assertThat(locator.getFilePairs())\n+        .containsExactlyInAnyOrder(\n+            tuple(tempDir, Path.of(\"key\", \"a\").toString(), Path.of(\"pass\", \"a.txt\").toString()),\n+            tuple(tempDir, \"keyStore\", \"password\"));\n   }\n \n   @Test\n   public void shouldDetectMissingPasswordFileWhenDirectoryIsPresent(@TempDir final Path tempDir)\n       throws IOException {\n-    createFolders(tempDir, \"key\", \"pass/a.txt\");\n-    createFiles(tempDir, \"key/a\");\n-    final String tempStr = tempDir.toString();\n-    KeyStoreFilesLocator locator =\n-        new KeyStoreFilesLocator(\n-            Optional.of(List.of(String.format(\"%s/key/a;%s/pass/a.txt\", tempStr, tempStr))), \";\");\n+    createFolders(tempDir, Path.of(\"key\"), Path.of(\"pass\", \"a.txt\"));\n+    createFiles(tempDir, Path.of(\"key\", \"a\"));\n+    final String p1 =\n+        generatePath(tempDir, PATH_SEP_WIN, List.of(\"key\", \"a\"), List.of(\"pass\", \"a.txt\"));\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(p1), PATH_SEP_WIN);\n+\n     assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n   }\n \n   @Test\n   public void shouldDetectMissingPasswordFile(@TempDir final Path tempDir) throws IOException {\n     createFolders(tempDir, \"key\", \"pass\");\n-    createFiles(tempDir, \"pass/a.txt\");\n-    final String tempStr = tempDir.toString();\n-    KeyStoreFilesLocator locator =\n-        new KeyStoreFilesLocator(\n-            Optional.of(List.of(String.format(\"%s/key/a:%s/pass/a.txt\", tempStr, tempStr))), \":\");\n+    createFiles(tempDir, Path.of(\"pass\", \"a.txt\"));\n+    final String p1 =\n+        generatePath(tempDir, PATH_SEP, List.of(\"key\", \"a\"), List.of(\"pass\", \"a.txt\"));\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(p1), PATH_SEP);\n+\n     assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n   }\n \n   @Test\n   public void shouldDetectMissingKeyFile(@TempDir final Path tempDir) throws IOException {\n     createFolders(tempDir, \"key\", \"pass\");\n-    createFiles(tempDir, \"key/a\");\n-    final String tempStr = tempDir.toString();\n-    KeyStoreFilesLocator locator =\n-        new KeyStoreFilesLocator(\n-            Optional.of(List.of(String.format(\"%s/key/a:%s/pass/a.txt\", tempStr, tempStr))), \":\");\n+    createFiles(tempDir, Path.of(\"key\", \"a\"));\n+    final String p1 =\n+        generatePath(tempDir, PATH_SEP, List.of(\"key\", \"a\"), List.of(\"pass\", \"a.txt\"));\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(p1), PATH_SEP);\n+\n     assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n   }\n \n   @Test\n   public void shouldSucceedCallingParseOnEmptyList() {\n-    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(Optional.empty(), \":\");\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(), PATH_SEP);\n     locator.parse();\n     assertThat(locator.getFilePairs()).isEmpty();\n   }\n \n+  @Test\n+  public void shouldFailWhenSplittingTooManySeparators() {\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(\"a:b:c\"), PATH_SEP);\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n+  @Test\n+  public void shouldFailWhenStringContainsOnlyKey() {\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(\"key\"), PATH_SEP);\n+    assertThatThrownBy(locator::parse).isInstanceOf(InvalidConfigurationException.class);\n+  }\n+\n   @Test\n   public void shouldHandleOldArgs(@TempDir final Path tempDir) throws IOException {\n-    createFolders(tempDir, \"key\", \"pass\");\n-    createFiles(tempDir, \"key/a\", \"pass/a.txt\");\n+    createFolders(tempDir, Path.of(\"key\"), Path.of(\"pass\"));\n+    createFiles(tempDir, Path.of(\"key\", \"a\"), Path.of(\"pass\", \"a.txt\"));\n     final String tempStr = tempDir.toString();\n-    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(Optional.empty(), \":\");\n-    locator.parseKeyAndPasswordList(List.of(tempStr + \"/key/a\"), List.of(tempStr + \"/pass/a.txt\"));\n+    KeyStoreFilesLocator locator = new KeyStoreFilesLocator(List.of(), PATH_SEP);\n+    locator.parseKeyAndPasswordList(\n+        List.of(Path.of(tempStr, \"key\", \"a\").toString()),\n+        List.of(Path.of(tempStr, \"pass\", \"a.txt\").toString()));\n+\n     assertThat(locator.getFilePairs())\n-        .containsExactly(tuple(tempDir.toString(), \"key/a\", \"pass/a.txt\"));\n+        .containsExactly(tuple(tempDir, List.of(\"key\", \"a\"), List.of(\"pass\", \"a.txt\")));\n   }\n \n   private void createFolders(final Path tempDir, String... paths) {\n     for (String path : paths) {\n-      File file = new File(tempDir.toString() + File.separator + path);\n-      file.mkdirs();\n+      File file = tempDir.resolve(path).toFile();\n+      if (!file.mkdirs() && !file.isDirectory()) {\n+        Assertions.fail(\"Failed to create directory \" + file);\n+      }\n     }\n   }\n \n-  private void createFiles(final Path tempDir, String... paths) throws IOException {\n-    for (String path : paths) {\n-      File file = new File(tempDir.toString() + File.separator + path);\n+  private void createFolders(final Path tempDir, Path... paths) {\n+    for (Path path : paths) {\n+      File file = tempDir.resolve(path).toFile();\n+      if (!file.mkdirs() && !file.isDirectory()) {\n+        Assertions.fail(\"Failed to create directory \" + file);\n+      }\n+    }\n+  }\n+\n+  private void createFiles(final Path tempDir, Path... paths) throws IOException {\n+    for (Path path : paths) {\n+      File file = tempDir.resolve(path).toFile();\n       file.createNewFile();\n     }\n   }\n \n-  private Pair<Path, Path> tuple(final String tempStr, final String k, final String p) {\n+  private String generatePath(\n+      final Path tempDir, final String separator, final String key, final String pass) {\n+    return generatePath(tempDir, separator, List.of(key), List.of(pass));\n+  }\n+\n+  private String generatePath(\n+      final Path tempDir,\n+      final String separator,\n+      final List<String> keyList,\n+      final List<String> passList) {\n+    final String tempStr = tempDir.toString();\n+    return String.join(\n+        separator,\n+        Path.of(tempStr, keyList.toArray(new String[0])).toString(),\n+        Path.of(tempStr, passList.toArray(new String[0])).toString());\n+  }\n+\n+  private Pair<Path, Path> tuple(\n+      final Path tempDir, final List<String> key, final List<String> path) {\n+    final String tempStr = tempDir.toString();\n     return Pair.of(\n-        new File(String.format(\"%s/%s\", tempStr, k)).toPath(),\n-        new File(String.format(\"%s/%s\", tempStr, p)).toPath());\n+        Path.of(tempStr, key.toArray(new String[0])),\n+        Path.of(tempStr, path.toArray(new String[0])));\n+  }\n+\n+  private Pair<Path, Path> tuple(final Path tempDir, final String k, final String p) {\n+    final String tempStr = tempDir.toString();\n+    return Pair.of(new File(tempStr, k).toPath(), new File(tempStr, p).toPath());\n   }\n }\n"}}, {"oid": "20241fe2f46bf26833336cf41110fd5628f361a0", "url": "https://github.com/ConsenSys/teku/commit/20241fe2f46bf26833336cf41110fd5628f361a0", "message": "review feedback.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-08-13T02:11:46Z", "type": "commit"}, {"oid": "c71c0aae9a53de77548ccdd8561f0ece5078b937", "url": "https://github.com/ConsenSys/teku/commit/c71c0aae9a53de77548ccdd8561f0ece5078b937", "message": "Merge remote-tracking branch 'upstream/master' into 2003-keys-directory", "committedDate": "2020-08-13T02:51:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY3MDQwNQ==", "url": "https://github.com/ConsenSys/teku/pull/2563#discussion_r469670405", "bodyText": "I've only just learnt this but we should use File.isHidden for this so:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                              !path.getFileName().toString().startsWith(\".\")\n          \n          \n            \n                              !path.toFile().isHidden()", "author": "ajsutton", "createdAt": "2020-08-13T03:09:24Z", "path": "util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.util.config;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import com.google.common.base.Splitter;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class KeyStoreFilesLocator {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final Map<Path, Path> pathMap = new HashMap<>();\n+  private final List<String> colonSeparatedPairs;\n+  private final String pathSeparator;\n+\n+  public KeyStoreFilesLocator(final List<String> colonSeparatedPairs, final String pathSeparator) {\n+    this.colonSeparatedPairs = colonSeparatedPairs;\n+    this.pathSeparator = pathSeparator;\n+  }\n+\n+  public void parse() {\n+    for (final String currentEntry : colonSeparatedPairs) {\n+      if (!currentEntry.contains(pathSeparator)) {\n+        throw new InvalidConfigurationException(\n+            \"validatorKeys entry (\"\n+                + currentEntry\n+                + \") did not contain key and password separated by '\"\n+                + pathSeparator\n+                + \"' as expected.\");\n+      }\n+\n+      final List<String> entry = Splitter.on(pathSeparator).limit(2).splitToList(currentEntry);\n+      parseEntry(entry.get(0), entry.get(1));\n+    }\n+  }\n+\n+  public void parseKeyAndPasswordList(\n+      final List<String> keystoreFiles, final List<String> keystorePasswordFiles) {\n+    for (int i = 0; i < keystoreFiles.size(); i++) {\n+      parseEntry(keystoreFiles.get(i), keystorePasswordFiles.get(i));\n+    }\n+  }\n+\n+  void parseEntry(final String keyFileName, final String passwordFileName) {\n+    final File keyFile = new File(keyFileName);\n+    final File passwordFile = new File(passwordFileName);\n+\n+    if (!keyFile.exists()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\"Invalid configuration. Could not find the key file (%s).\", keyFileName));\n+    }\n+    if (!passwordFile.exists()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\n+              \"Invalid configuration. Could not find the password file (%s).\", passwordFileName));\n+    }\n+    if (keyFile.isDirectory() != passwordFile.isDirectory()) {\n+      throw new InvalidConfigurationException(\n+          String.format(\n+              \"Invalid configuration. --validator-keys entry (%s\"\n+                  + pathSeparator\n+                  + \"%s) must be both directories or both files\",\n+              keyFileName,\n+              passwordFileName));\n+    }\n+    if (keyFile.isFile()) {\n+      pathMap.putIfAbsent(keyFile.toPath(), passwordFile.toPath());\n+    } else {\n+      parseDirectory(keyFile, passwordFile);\n+    }\n+  }\n+\n+  void parseDirectory(final File keyDirectory, final File passwordDirectory) {\n+    try (Stream<Path> walk = Files.walk(keyDirectory.toPath())) {\n+      walk.filter(Files::isRegularFile)\n+          .filter(\n+              (path) ->\n+                  !path.getFileName().toString().startsWith(\".\")", "originalCommit": "c71c0aae9a53de77548ccdd8561f0ece5078b937", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c5b81cfced5bbcd3cceec3d510f0bbfe7c937337", "chunk": "diff --git a/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java b/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java\nindex 4787939262..fd0b3e694f 100644\n--- a/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java\n+++ b/util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java\n\n@@ -97,7 +97,7 @@ public class KeyStoreFilesLocator {\n       walk.filter(Files::isRegularFile)\n           .filter(\n               (path) ->\n-                  !path.getFileName().toString().startsWith(\".\")\n+                  !path.toFile().isHidden()\n                       && path.getFileName().toString().endsWith(\".json\"))\n           .forEach(\n               path -> {\n"}}, {"oid": "c5b81cfced5bbcd3cceec3d510f0bbfe7c937337", "url": "https://github.com/ConsenSys/teku/commit/c5b81cfced5bbcd3cceec3d510f0bbfe7c937337", "message": "Update util/src/main/java/tech/pegasys/teku/util/config/KeyStoreFilesLocator.java\n\nCo-authored-by: Adrian Sutton <adrian@symphonious.net>", "committedDate": "2020-08-13T03:49:26Z", "type": "commit"}, {"oid": "8491f1996032544a22157cb4623e7521adfcae98", "url": "https://github.com/ConsenSys/teku/commit/8491f1996032544a22157cb4623e7521adfcae98", "message": "spotless\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-08-13T03:52:00Z", "type": "commit"}]}