{"pr_number": 3192, "pr_title": "Make some tests Win compatible", "pr_createdAt": "2020-11-10T11:13:41Z", "pr_url": "https://github.com/ConsenSys/teku/pull/3192", "timeline": [{"oid": "0d9bf8c900fd1c247b20f2112e7984a347689d12", "url": "https://github.com/ConsenSys/teku/commit/0d9bf8c900fd1c247b20f2112e7984a347689d12", "message": "Use system path separator for test", "committedDate": "2020-11-10T10:07:31Z", "type": "commit"}, {"oid": "ccf96d0d7d56d20e379e3769908b08c16bc7df24", "url": "https://github.com/ConsenSys/teku/commit/ccf96d0d7d56d20e379e3769908b08c16bc7df24", "message": "For Windows '.*' files are not hidden so just ignore these cases", "committedDate": "2020-11-10T10:16:07Z", "type": "commit"}, {"oid": "0af2777a5beef4a2e1f32e683141ca38ed9841df", "url": "https://github.com/ConsenSys/teku/commit/0af2777a5beef4a2e1f32e683141ca38ed9841df", "message": "Creating symbolic links requires elevated privileges on Windows. Without them FileSystemException is thrown. So just catching any IOException on a link creation attempt would handle the Windows case (the test would be ignored)", "committedDate": "2020-11-10T10:34:27Z", "type": "commit"}, {"oid": "82b6eac730467b8cdcfbe84638391230b1304560", "url": "https://github.com/ConsenSys/teku/commit/82b6eac730467b8cdcfbe84638391230b1304560", "message": "Spotless", "committedDate": "2020-11-10T10:40:46Z", "type": "commit"}, {"oid": "97f9a676208e23fb973a496e2e179e47e3d1f8a4", "url": "https://github.com/ConsenSys/teku/commit/97f9a676208e23fb973a496e2e179e47e3d1f8a4", "message": "Make comparing multi-line strings cross-platform", "committedDate": "2020-11-10T11:08:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ4ODkxMg==", "url": "https://github.com/ConsenSys/teku/pull/3192#discussion_r520488912", "bodyText": "hmm, the JavaDoc explicitly says it will throw UnsupportedOperationException if symlinks aren't supported.  Probably should catch both exception types to be safe.", "author": "ajsutton", "createdAt": "2020-11-10T11:24:13Z", "path": "util/src/test/java/tech/pegasys/teku/util/config/KeyStoreFilesLocatorTest.java", "diffHunk": "@@ -201,7 +199,7 @@ public void shouldHandleSymlinkedDirectories(@TempDir final Path tempDir) throws\n     try {\n       Files.createSymbolicLink(tempDir.resolve(\"key\"), realKeyDir);\n       Files.createSymbolicLink(tempDir.resolve(\"pass\"), realPassDir);\n-    } catch (UnsupportedOperationException e) {\n+    } catch (IOException e) {", "originalCommit": "97f9a676208e23fb973a496e2e179e47e3d1f8a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUzOTUzNg==", "url": "https://github.com/ConsenSys/teku/pull/3192#discussion_r520539536", "bodyText": "FileSystemException is thrown when not enough privilege on Win (which is usually the case). I think we could better just disable this case for Windows: 5af79c0", "author": "Nashatyrev", "createdAt": "2020-11-10T12:54:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ4ODkxMg=="}], "type": "inlineReview", "revised_code": {"commit": "5af79c02d2655f5a04d362c64f318724f9bb816c", "chunk": "diff --git a/util/src/test/java/tech/pegasys/teku/util/config/KeyStoreFilesLocatorTest.java b/util/src/test/java/tech/pegasys/teku/util/config/KeyStoreFilesLocatorTest.java\nindex 079078219..e76fda5c1 100644\n--- a/util/src/test/java/tech/pegasys/teku/util/config/KeyStoreFilesLocatorTest.java\n+++ b/util/src/test/java/tech/pegasys/teku/util/config/KeyStoreFilesLocatorTest.java\n\n@@ -199,8 +202,8 @@ public class KeyStoreFilesLocatorTest {\n     try {\n       Files.createSymbolicLink(tempDir.resolve(\"key\"), realKeyDir);\n       Files.createSymbolicLink(tempDir.resolve(\"pass\"), realPassDir);\n-    } catch (IOException e) {\n-      throw new TestAbortedException(\"Symbolic links not supported on this file system\");\n+    } catch (UnsupportedOperationException e) {\n+      throw new TestAbortedException(\"Couldn't create symlink on this system\");\n     }\n \n     final String p1 = generatePath(tempDir, PATH_SEP, \"key\", \"pass\");\n"}}, {"oid": "355985a1ed0b2dcd80681bdacf4ed837daf05482", "url": "https://github.com/ConsenSys/teku/commit/355985a1ed0b2dcd80681bdacf4ed837daf05482", "message": "Temporarily adjust test to not fail on Windows", "committedDate": "2020-11-10T12:45:39Z", "type": "commit"}, {"oid": "5af79c02d2655f5a04d362c64f318724f9bb816c", "url": "https://github.com/ConsenSys/teku/commit/5af79c02d2655f5a04d362c64f318724f9bb816c", "message": "Exclude KeyStoreFilesLocatorTest symlink testcase for Windows platform", "committedDate": "2020-11-10T12:52:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU0NTE3Nw==", "url": "https://github.com/ConsenSys/teku/pull/3192#discussion_r520545177", "bodyText": "This is a temporary change to discuss this test case\n@ajsutton when calling Files.newInputStream(path) with directory path on Windows there is the following exception:\njava.nio.file.AccessDeniedException: C:\\Users\\Admin\\AppData\\Local\\Temp\\junit10004047955021046840\n\n\tat java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:89)\n\tat java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)\n\tat java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)\n\tat java.base/sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:235)\n\tat java.base/java.nio.file.Files.newByteChannel(Files.java:370)\n\tat java.base/java.nio.file.Files.newByteChannel(Files.java:421)\n\tat java.base/java.nio.file.spi.FileSystemProvider.newInputStream(FileSystemProvider.java:420)\n\tat java.base/java.nio.file.Files.newInputStream(Files.java:155)\n\tat tech.pegasys.teku.infrastructure.io.resource.FileResourceLoader.load(FileResourceLoader.java:30)\n\tat tech.pegasys.teku.infrastructure.io.resource.FileResourceLoaderTest.shouldCreateInputStreamWhenPathIsADirectory(FileResourceLoaderTest.java:49)\n\nNot sure I got the rationale behind your comment and what InputStream should be returned in case of directory.\nI would suggest to either return empty when the path is directory or throw an exception.", "author": "Nashatyrev", "createdAt": "2020-11-10T13:03:38Z", "path": "infrastructure/io/src/test/java/tech/pegasys/teku/infrastructure/io/resource/FileResourceLoaderTest.java", "diffHunk": "@@ -43,10 +43,7 @@ public void shouldReturnEmptyWhenFileDoesNotExist(@TempDir Path tempDir) throws\n   }\n \n   @Test\n-  public void shouldCreateInputStreamWhenPathIsADirectory(@TempDir Path tempDir) throws Exception {\n-    // We could potentially return empty for directories, but it is going to be confusing for users\n-    // to say we couldn't find something that exists. We should report that we couldn't read it.\n-    assertThat(loader.load(tempDir.toAbsolutePath().toString())).isNotEmpty();", "originalCommit": "5af79c02d2655f5a04d362c64f318724f9bb816c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg0OTQ3Nw==", "url": "https://github.com/ConsenSys/teku/pull/3192#discussion_r520849477", "bodyText": "You'll get an IOException of some form on all systems trying to actually read a directory.  The point of this behaviour is that this method returns an empty optional if the file couldn't be found, it throws an IOException if it can't be read.  Since directories do exist but can't be read, the expected behaviour is to throw IOException (or any subclass).  Both ways fail, but this way gives a much more accurate error message to the user.", "author": "ajsutton", "createdAt": "2020-11-10T20:19:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU0NTE3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEyNDY2Mg==", "url": "https://github.com/ConsenSys/teku/pull/3192#discussion_r521124662", "bodyText": "Ah I see, on Windows it throws earlier than on UNIX.  Throwing is still the right answer rather than returning empty, just need to update the test to handle the exception being thrown either from load or from the read call.", "author": "ajsutton", "createdAt": "2020-11-11T05:40:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU0NTE3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "fce07bf82bf05bfd01e02b13dca1385d4436bac3", "chunk": "diff --git a/infrastructure/io/src/test/java/tech/pegasys/teku/infrastructure/io/resource/FileResourceLoaderTest.java b/infrastructure/io/src/test/java/tech/pegasys/teku/infrastructure/io/resource/FileResourceLoaderTest.java\nindex fbded0d3c..f88969b5f 100644\n--- a/infrastructure/io/src/test/java/tech/pegasys/teku/infrastructure/io/resource/FileResourceLoaderTest.java\n+++ b/infrastructure/io/src/test/java/tech/pegasys/teku/infrastructure/io/resource/FileResourceLoaderTest.java\n\n@@ -44,6 +46,24 @@ class FileResourceLoaderTest {\n \n   @Test\n   public void shouldThrowWhenPathIsADirectory(@TempDir Path tempDir) throws Exception {\n+\n+    // should throw either on opening InputStream from directory or reading from created InputStream\n+    assertThatThrownBy(\n+            () -> {\n+              Optional<InputStream> inputStream = loader.load(tempDir.toAbsolutePath().toString());\n+\n+              // if load() call didn't cause exception then InputStream should exist\n+              // We could potentially return empty for directories, but it is going to be confusing\n+              // for users\n+              // to say we couldn't find something that exists. We should report that we couldn't\n+              // read it.\n+              assertThat(inputStream).isNotEmpty();\n+\n+              // At least the read() call should throw\n+              inputStream.get().read();\n+            })\n+        .isInstanceOf(IOException.class);\n+\n     assertThatThrownBy(() -> loader.loadBytes(tempDir.toAbsolutePath().toString()))\n         .isInstanceOf(IOException.class);\n   }\n"}}, {"oid": "fce07bf82bf05bfd01e02b13dca1385d4436bac3", "url": "https://github.com/ConsenSys/teku/commit/fce07bf82bf05bfd01e02b13dca1385d4436bac3", "message": "Adjust FileResourceLoaderTest to work correctly on all platforms", "committedDate": "2020-11-11T07:44:01Z", "type": "commit"}, {"oid": "60633e2933c5db033399768c7e26864185764e96", "url": "https://github.com/ConsenSys/teku/commit/60633e2933c5db033399768c7e26864185764e96", "message": "Merge branch 'master' into fix/win-keys-file-test", "committedDate": "2020-11-11T07:53:55Z", "type": "commit"}]}