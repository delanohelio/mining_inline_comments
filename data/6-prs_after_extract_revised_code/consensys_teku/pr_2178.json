{"pr_number": 2178, "pr_title": "Move fork choice processing into Store", "pr_createdAt": "2020-06-20T22:58:19Z", "pr_url": "https://github.com/ConsenSys/teku/pull/2178", "timeline": [{"oid": "167d04f189d4cd4a748d1c421c05c478e6d524ec", "url": "https://github.com/ConsenSys/teku/commit/167d04f189d4cd4a748d1c421c05c478e6d524ec", "message": "Move forkChoice block processing into RecentChainData", "committedDate": "2020-06-19T00:39:27Z", "type": "commit"}, {"oid": "6520dde42f2667b354e7f807f2fb1cd368595646", "url": "https://github.com/ConsenSys/teku/commit/6520dde42f2667b354e7f807f2fb1cd368595646", "message": "Fix tests - use valid block / state pairs", "committedDate": "2020-06-19T00:39:27Z", "type": "commit"}, {"oid": "d8a14f4e4b45030db99fa135fb15254888046df1", "url": "https://github.com/ConsenSys/teku/commit/d8a14f4e4b45030db99fa135fb15254888046df1", "message": "Make sure blocks are processed in order", "committedDate": "2020-06-19T00:39:27Z", "type": "commit"}, {"oid": "de02b1088c7e5b61b344bd73b45e57a6e1c2c105", "url": "https://github.com/ConsenSys/teku/commit/de02b1088c7e5b61b344bd73b45e57a6e1c2c105", "message": "Move forkChoice into Store", "committedDate": "2020-06-19T21:22:05Z", "type": "commit"}, {"oid": "7821c7b1aeb7e3a072f0be8d0e170d2229073983", "url": "https://github.com/ConsenSys/teku/commit/7821c7b1aeb7e3a072f0be8d0e170d2229073983", "message": "Fix fork choice logic - move processing out of tx.commit()", "committedDate": "2020-06-20T21:33:20Z", "type": "commit"}, {"oid": "c74d9b78c72d21aefdad122fe6270fc104398b73", "url": "https://github.com/ConsenSys/teku/commit/c74d9b78c72d21aefdad122fe6270fc104398b73", "message": "Fix Transaction getters", "committedDate": "2020-06-20T21:33:41Z", "type": "commit"}, {"oid": "dfd43aff9bbe8c24c013dc1b12fae054a8475e09", "url": "https://github.com/ConsenSys/teku/commit/dfd43aff9bbe8c24c013dc1b12fae054a8475e09", "message": "Fix tests - set checkpoint state, update justified checkpoint", "committedDate": "2020-06-21T00:54:55Z", "type": "commit"}, {"oid": "e577d8d7b77e51ab1ddef0a497cc17a7a4468f75", "url": "https://github.com/ConsenSys/teku/commit/e577d8d7b77e51ab1ddef0a497cc17a7a4468f75", "message": "Fix rest api tests", "committedDate": "2020-06-21T01:41:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI3ODczOQ==", "url": "https://github.com/ConsenSys/teku/pull/2178#discussion_r443278739", "bodyText": "I feel like we should just delete this and OrigForkChoiceStrategy now.  We only use this as part of the fork choice reference tests - the original idea for keeping it around was to compare results with the protoarray fork choice but the reference tests are a better way to confirm it's behaviour is right.\nDoesn't need to be in this PR though.", "author": "ajsutton", "createdAt": "2020-06-22T01:21:06Z", "path": "eth-reference-tests/src/referenceTest/java/tech/pegasys/teku/reference/phase0/fork_choice/implementatations/OrigForkChoiceProcessor.java", "diffHunk": "@@ -0,0 +1,277 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.reference.phase0.fork_choice.implementatations;\n+\n+import static tech.pegasys.teku.datastructures.util.BeaconStateUtil.get_current_epoch;\n+import static tech.pegasys.teku.datastructures.util.ValidatorsUtil.get_active_validator_indices;\n+import static tech.pegasys.teku.util.config.Constants.GENESIS_EPOCH;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.core.ForkChoiceUtil;\n+import tech.pegasys.teku.core.results.BlockImportResult;\n+import tech.pegasys.teku.datastructures.attestation.ValidateableAttestation;\n+import tech.pegasys.teku.datastructures.blocks.BeaconBlock;\n+import tech.pegasys.teku.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.teku.datastructures.forkchoice.MutableForkChoiceState;\n+import tech.pegasys.teku.datastructures.forkchoice.MutableStore;\n+import tech.pegasys.teku.datastructures.forkchoice.ReadOnlyStore;\n+import tech.pegasys.teku.datastructures.operations.Attestation;\n+import tech.pegasys.teku.datastructures.operations.IndexedAttestation;\n+import tech.pegasys.teku.datastructures.state.BeaconState;\n+import tech.pegasys.teku.datastructures.state.Checkpoint;\n+import tech.pegasys.teku.datastructures.state.CheckpointAndBlock;\n+import tech.pegasys.teku.datastructures.util.AttestationProcessingResult;\n+import tech.pegasys.teku.storage.client.RecentChainData;\n+import tech.pegasys.teku.storage.store.UpdatableStore;\n+import tech.pegasys.teku.util.config.Constants;\n+\n+public class OrigForkChoiceProcessor extends ForkChoiceProcessor {", "originalCommit": "e577d8d7b77e51ab1ddef0a497cc17a7a4468f75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY5NDc2Mg==", "url": "https://github.com/ConsenSys/teku/pull/2178#discussion_r443694762", "bodyText": "There will have to be another PR for cleaning up the Fork Choice Reference Tests anyway in the near future, so this can be left for that PR.", "author": "cemozerr", "createdAt": "2020-06-22T16:48:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI3ODczOQ=="}], "type": "inlineReview", "revised_code": {"commit": "fb0cc2f9dffb9bf0a298f775de419048746538b5", "chunk": "diff --git a/eth-reference-tests/src/referenceTest/java/tech/pegasys/teku/reference/phase0/fork_choice/implementatations/OrigForkChoiceProcessor.java b/eth-reference-tests/src/referenceTest/java/tech/pegasys/teku/reference/phase0/fork_choice/implementatations/OrigForkChoiceProcessor.java\nindex 83affdcc15..ae9c857df0 100644\n--- a/eth-reference-tests/src/referenceTest/java/tech/pegasys/teku/reference/phase0/fork_choice/implementatations/OrigForkChoiceProcessor.java\n+++ b/eth-reference-tests/src/referenceTest/java/tech/pegasys/teku/reference/phase0/fork_choice/implementatations/OrigForkChoiceProcessor.java\n\n@@ -31,8 +31,8 @@ import tech.pegasys.teku.core.results.BlockImportResult;\n import tech.pegasys.teku.datastructures.attestation.ValidateableAttestation;\n import tech.pegasys.teku.datastructures.blocks.BeaconBlock;\n import tech.pegasys.teku.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.teku.datastructures.blocks.SignedBlockAndState;\n import tech.pegasys.teku.datastructures.forkchoice.MutableForkChoiceState;\n-import tech.pegasys.teku.datastructures.forkchoice.MutableStore;\n import tech.pegasys.teku.datastructures.forkchoice.ReadOnlyStore;\n import tech.pegasys.teku.datastructures.operations.Attestation;\n import tech.pegasys.teku.datastructures.operations.IndexedAttestation;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI5NTU0Mg==", "url": "https://github.com/ConsenSys/teku/pull/2178#discussion_r443295542", "bodyText": "nit: Probably better to use .join() or assert it's completed.  reportExceptions will allow the test to continue even if the commit fails.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                tx.commit().reportExceptions();\n          \n          \n            \n                assertThat(tx.commit()).isCompleted();", "author": "ajsutton", "createdAt": "2020-06-22T02:59:08Z", "path": "ethereum/statetransition/src/testFixtures/java/tech/pegasys/teku/statetransition/BeaconChainUtil.java", "diffHunk": "@@ -193,7 +179,11 @@ public SignedBeaconBlock createAndImportBlockAtSlot(\n               + \": \"\n               + block);\n     }\n-    forkChoice.processHead();\n+\n+    final StoreTransaction tx = recentChainData.startStoreTransaction();\n+    tx.updateHead();\n+    tx.commit().reportExceptions();", "originalCommit": "e577d8d7b77e51ab1ddef0a497cc17a7a4468f75", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "af6fb34f117c2314a44540b00e9cc2443ac793ea", "chunk": "diff --git a/ethereum/statetransition/src/testFixtures/java/tech/pegasys/teku/statetransition/BeaconChainUtil.java b/ethereum/statetransition/src/testFixtures/java/tech/pegasys/teku/statetransition/BeaconChainUtil.java\nindex 5a7ce9bc3f..a53a2e3f29 100644\n--- a/ethereum/statetransition/src/testFixtures/java/tech/pegasys/teku/statetransition/BeaconChainUtil.java\n+++ b/ethereum/statetransition/src/testFixtures/java/tech/pegasys/teku/statetransition/BeaconChainUtil.java\n\n@@ -182,7 +182,7 @@ public class BeaconChainUtil {\n \n     final StoreTransaction tx = recentChainData.startStoreTransaction();\n     tx.updateHead();\n-    tx.commit().reportExceptions();\n+    tx.commit().join();\n \n     return importResult.getBlock();\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI5ODUwOQ==", "url": "https://github.com/ConsenSys/teku/pull/2178#discussion_r443298509", "bodyText": "We need to hold the protoArrayLock readLock here so that it's safe to access protoArray.  Given that justifiedCheckpoint is only updated in updateForkChoiceWeights which holds the protoArray write lock that will also make the access to justifiedCheckpoint safe.  Probably should add a comment that justifiedCheckpoint is guarded by protoArrayLock as it might not be obvious.", "author": "ajsutton", "createdAt": "2020-06-22T03:15:13Z", "path": "protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoArrayForkChoiceStrategy.java", "diffHunk": "@@ -32,55 +32,69 @@\n import org.apache.logging.log4j.Logger;\n import org.apache.tuweni.bytes.Bytes32;\n import tech.pegasys.teku.datastructures.blocks.BeaconBlock;\n+import tech.pegasys.teku.datastructures.forkchoice.MutableForkChoiceState;\n import tech.pegasys.teku.datastructures.forkchoice.MutableStore;\n-import tech.pegasys.teku.datastructures.forkchoice.ReadOnlyStore;\n import tech.pegasys.teku.datastructures.forkchoice.VoteTracker;\n import tech.pegasys.teku.datastructures.operations.IndexedAttestation;\n import tech.pegasys.teku.datastructures.state.BeaconState;\n import tech.pegasys.teku.datastructures.state.Checkpoint;\n import tech.pegasys.teku.util.config.Constants;\n \n-public class ProtoArrayForkChoiceStrategy implements ForkChoiceStrategy {\n+public class ProtoArrayForkChoiceStrategy implements MutableForkChoiceState {\n   private static final Logger LOG = LogManager.getLogger();\n \n   private final ReadWriteLock protoArrayLock = new ReentrantReadWriteLock();\n   private final ReadWriteLock votesLock = new ReentrantReadWriteLock();\n   private final ReadWriteLock balancesLock = new ReentrantReadWriteLock();\n   private final ProtoArray protoArray;\n \n+  private Checkpoint justifiedCheckpoint;\n   private List<UnsignedLong> balances;\n \n-  private ProtoArrayForkChoiceStrategy(ProtoArray protoArray, List<UnsignedLong> balances) {\n+  private ProtoArrayForkChoiceStrategy(\n+      ProtoArray protoArray, List<UnsignedLong> balances, final Checkpoint justifiedCheckpoint) {\n     this.protoArray = protoArray;\n     this.balances = balances;\n+    this.justifiedCheckpoint = justifiedCheckpoint;\n   }\n \n   // Public\n-  public static ProtoArrayForkChoiceStrategy create(ReadOnlyStore store) {\n+  public static ProtoArrayForkChoiceStrategy create(\n+      final Checkpoint finalizedCheckpoint, final Checkpoint justifiedCheckpoint) {\n+    return create(\n+        finalizedCheckpoint, justifiedCheckpoint, Constants.PROTOARRAY_FORKCHOICE_PRUNE_THRESHOLD);\n+  }\n+\n+  private static ProtoArrayForkChoiceStrategy create(\n+      final Checkpoint finalizedCheckpoint,\n+      final Checkpoint justifiedCheckpoint,\n+      final int pruningThreshold) {\n     ProtoArray protoArray =\n         new ProtoArray(\n-            Constants.PROTOARRAY_FORKCHOICE_PRUNE_THRESHOLD,\n-            store.getJustifiedCheckpoint().getEpoch(),\n-            store.getFinalizedCheckpoint().getEpoch(),\n+            pruningThreshold,\n+            justifiedCheckpoint.getEpoch(),\n+            finalizedCheckpoint.getEpoch(),\n             new ArrayList<>(),\n             new HashMap<>());\n \n-    processBlocksInStoreAtStartup(store, protoArray);\n-\n-    return new ProtoArrayForkChoiceStrategy(protoArray, new ArrayList<>());\n+    return new ProtoArrayForkChoiceStrategy(protoArray, new ArrayList<>(), justifiedCheckpoint);\n   }\n \n   @Override\n-  public Bytes32 findHead(final MutableStore store) {\n+  public void updateHead(final MutableStore store) {\n     Checkpoint justifiedCheckpoint = store.getJustifiedCheckpoint();\n-    return findHead(\n+    updateForkChoiceWeights(\n         store,\n-        justifiedCheckpoint.getEpoch(),\n-        justifiedCheckpoint.getRoot(),\n+        justifiedCheckpoint,\n         store.getFinalizedCheckpoint().getEpoch(),\n         store.getCheckpointState(justifiedCheckpoint).getBalances().asList());\n   }\n \n+  @Override\n+  public Bytes32 getHead() {\n+    return protoArray.findHead(justifiedCheckpoint.getRoot());", "originalCommit": "e577d8d7b77e51ab1ddef0a497cc17a7a4468f75", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d586af5fb4376815de687d56c5a5c0e55ee5f2f", "chunk": "diff --git a/protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoArrayForkChoiceStrategy.java b/protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoArrayForkChoiceStrategy.java\nindex 3cbcaa8500..5a46358ba6 100644\n--- a/protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoArrayForkChoiceStrategy.java\n+++ b/protoarray/src/main/java/tech/pegasys/teku/protoarray/ProtoArrayForkChoiceStrategy.java\n\n@@ -92,7 +92,13 @@ public class ProtoArrayForkChoiceStrategy implements MutableForkChoiceState {\n \n   @Override\n   public Bytes32 getHead() {\n-    return protoArray.findHead(justifiedCheckpoint.getRoot());\n+    protoArrayLock.readLock().lock();\n+    try {\n+      // justifiedCheckpoint is guarded by justifiedCheckpoint\n+      return protoArray.findHead(justifiedCheckpoint.getRoot());\n+    } finally {\n+      protoArrayLock.readLock().unlock();\n+    }\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMwMTEzOA==", "url": "https://github.com/ConsenSys/teku/pull/2178#discussion_r443301138", "bodyText": "forkChoiceState has its own locks and the variable in Store is final so we don't need to hold the read lock here.", "author": "ajsutton", "createdAt": "2020-06-22T03:30:22Z", "path": "storage/src/main/java/tech/pegasys/teku/storage/store/Store.java", "diffHunk": "@@ -302,6 +314,31 @@ public SignedBeaconBlock getSignedBlock(Bytes32 blockRoot) {\n     return getOrGenerateBlockState(blockRoot).map((state) -> new SignedBlockAndState(block, state));\n   }\n \n+  @Override\n+  public Bytes32 getHead() {\n+    return forkChoiceState.getHead();\n+  }\n+\n+  @Override\n+  public Optional<UnsignedLong> getBlockSlot(final Bytes32 blockRoot) {\n+    readLock.lock();\n+    try {\n+      return forkChoiceState.getBlockSlot(blockRoot);\n+    } finally {\n+      readLock.unlock();\n+    }", "originalCommit": "e577d8d7b77e51ab1ddef0a497cc17a7a4468f75", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d586af5fb4376815de687d56c5a5c0e55ee5f2f", "chunk": "diff --git a/storage/src/main/java/tech/pegasys/teku/storage/store/Store.java b/storage/src/main/java/tech/pegasys/teku/storage/store/Store.java\nindex 10e99bdf54..7ad7749e0b 100644\n--- a/storage/src/main/java/tech/pegasys/teku/storage/store/Store.java\n+++ b/storage/src/main/java/tech/pegasys/teku/storage/store/Store.java\n\n@@ -321,22 +321,12 @@ class Store implements UpdatableStore {\n \n   @Override\n   public Optional<UnsignedLong> getBlockSlot(final Bytes32 blockRoot) {\n-    readLock.lock();\n-    try {\n-      return forkChoiceState.getBlockSlot(blockRoot);\n-    } finally {\n-      readLock.unlock();\n-    }\n+    return forkChoiceState.getBlockSlot(blockRoot);\n   }\n \n   @Override\n   public Optional<Bytes32> getBlockParent(final Bytes32 blockRoot) {\n-    readLock.lock();\n-    try {\n-      return forkChoiceState.getBlockParent(blockRoot);\n-    } finally {\n-      readLock.unlock();\n-    }\n+    return forkChoiceState.getBlockParent(blockRoot);\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMwMTE2MQ==", "url": "https://github.com/ConsenSys/teku/pull/2178#discussion_r443301161", "bodyText": "We don't need the read lock here either.", "author": "ajsutton", "createdAt": "2020-06-22T03:30:31Z", "path": "storage/src/main/java/tech/pegasys/teku/storage/store/Store.java", "diffHunk": "@@ -302,6 +314,31 @@ public SignedBeaconBlock getSignedBlock(Bytes32 blockRoot) {\n     return getOrGenerateBlockState(blockRoot).map((state) -> new SignedBlockAndState(block, state));\n   }\n \n+  @Override\n+  public Bytes32 getHead() {\n+    return forkChoiceState.getHead();\n+  }\n+\n+  @Override\n+  public Optional<UnsignedLong> getBlockSlot(final Bytes32 blockRoot) {\n+    readLock.lock();\n+    try {\n+      return forkChoiceState.getBlockSlot(blockRoot);\n+    } finally {\n+      readLock.unlock();\n+    }\n+  }\n+\n+  @Override\n+  public Optional<Bytes32> getBlockParent(final Bytes32 blockRoot) {\n+    readLock.lock();\n+    try {\n+      return forkChoiceState.getBlockParent(blockRoot);\n+    } finally {\n+      readLock.unlock();\n+    }", "originalCommit": "e577d8d7b77e51ab1ddef0a497cc17a7a4468f75", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d586af5fb4376815de687d56c5a5c0e55ee5f2f", "chunk": "diff --git a/storage/src/main/java/tech/pegasys/teku/storage/store/Store.java b/storage/src/main/java/tech/pegasys/teku/storage/store/Store.java\nindex 10e99bdf54..7ad7749e0b 100644\n--- a/storage/src/main/java/tech/pegasys/teku/storage/store/Store.java\n+++ b/storage/src/main/java/tech/pegasys/teku/storage/store/Store.java\n\n@@ -321,22 +321,12 @@ class Store implements UpdatableStore {\n \n   @Override\n   public Optional<UnsignedLong> getBlockSlot(final Bytes32 blockRoot) {\n-    readLock.lock();\n-    try {\n-      return forkChoiceState.getBlockSlot(blockRoot);\n-    } finally {\n-      readLock.unlock();\n-    }\n+    return forkChoiceState.getBlockSlot(blockRoot);\n   }\n \n   @Override\n   public Optional<Bytes32> getBlockParent(final Bytes32 blockRoot) {\n-    readLock.lock();\n-    try {\n-      return forkChoiceState.getBlockParent(blockRoot);\n-    } finally {\n-      readLock.unlock();\n-    }\n+    return forkChoiceState.getBlockParent(blockRoot);\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMwMjkwOA==", "url": "https://github.com/ConsenSys/teku/pull/2178#discussion_r443302908", "bodyText": "There's a bit of a clash going on here - every other method in Store.Transaction has no effect on the underlying Store until commit is called, except this one.\nupdateHead probably shouldn't be on Store.Transaction at all as the transaction is always immediately committed and no other changes are made to the store, so it probably should just be a method directly on UpdatableStore.", "author": "ajsutton", "createdAt": "2020-06-22T03:40:18Z", "path": "storage/src/main/java/tech/pegasys/teku/storage/store/Store.java", "diffHunk": "@@ -651,6 +716,17 @@ public boolean containsCheckpointState(final Checkpoint checkpoint) {\n       return checkpoint_states.containsKey(checkpoint)\n           || Store.this.containsCheckpointState(checkpoint);\n     }\n+\n+    @Override\n+    public void updateHead() {\n+      Store.this.forkChoiceState.updateHead(this);\n+      this.headUpdated = true;\n+    }", "originalCommit": "e577d8d7b77e51ab1ddef0a497cc17a7a4468f75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc4OTk0Nw==", "url": "https://github.com/ConsenSys/teku/pull/2178#discussion_r443789947", "bodyText": "Yeah - I was thinking that we were only updating votes here, but that's not the case.  I ended up creating an Updater object to handle forkChoice updates - have a look here: fb0cc2f", "author": "mbaxter", "createdAt": "2020-06-22T19:54:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMwMjkwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzgzNTQzMQ==", "url": "https://github.com/ConsenSys/teku/pull/2178#discussion_r443835431", "bodyText": "Yep that makes sense to me.  Looks good.", "author": "ajsutton", "createdAt": "2020-06-22T21:25:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMwMjkwOA=="}], "type": "inlineReview", "revised_code": {"commit": "fb0cc2f9dffb9bf0a298f775de419048746538b5", "chunk": "diff --git a/storage/src/main/java/tech/pegasys/teku/storage/store/Store.java b/storage/src/main/java/tech/pegasys/teku/storage/store/Store.java\nindex 10e99bdf54..d87dde27f9 100644\n--- a/storage/src/main/java/tech/pegasys/teku/storage/store/Store.java\n+++ b/storage/src/main/java/tech/pegasys/teku/storage/store/Store.java\n\n@@ -719,13 +684,20 @@ class Store implements UpdatableStore {\n \n     @Override\n     public void updateHead() {\n-      Store.this.forkChoiceState.updateHead(this);\n+      final Checkpoint finalized = getFinalizedCheckpoint();\n+      final Checkpoint justified = getJustifiedCheckpoint();\n+      final BeaconState justifiedState = getCheckpointState(justified);\n+      forkChoiceUpdater.updateHead(finalized, justified, justifiedState);\n       this.headUpdated = true;\n     }\n \n     @Override\n     public void processAttestation(final IndexedAttestation attestation) {\n-      Store.this.forkChoiceState.onAttestation(this, attestation);\n+      forkChoiceUpdater.onAttestation(attestation);\n+    }\n+\n+    Map<UnsignedLong, VoteTracker> getForkChoiceVotes() {\n+      return forkChoiceUpdater.getVotes();\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMwMzI1NQ==", "url": "https://github.com/ConsenSys/teku/pull/2178#discussion_r443303255", "bodyText": "This ones slightly interesting - I was expecting that it would wind up making changes to forkChoice immediately, but it actually only changes votes which are stored in Store and so no changes are applied until commit is called.  So it all works as long as forkChoiceState.onAttestation isn't changed in the future to change things other than votes.", "author": "ajsutton", "createdAt": "2020-06-22T03:41:55Z", "path": "storage/src/main/java/tech/pegasys/teku/storage/store/Store.java", "diffHunk": "@@ -651,6 +716,17 @@ public boolean containsCheckpointState(final Checkpoint checkpoint) {\n       return checkpoint_states.containsKey(checkpoint)\n           || Store.this.containsCheckpointState(checkpoint);\n     }\n+\n+    @Override\n+    public void updateHead() {\n+      Store.this.forkChoiceState.updateHead(this);\n+      this.headUpdated = true;\n+    }\n+\n+    @Override\n+    public void processAttestation(final IndexedAttestation attestation) {\n+      Store.this.forkChoiceState.onAttestation(this, attestation);\n+    }", "originalCommit": "e577d8d7b77e51ab1ddef0a497cc17a7a4468f75", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fb0cc2f9dffb9bf0a298f775de419048746538b5", "chunk": "diff --git a/storage/src/main/java/tech/pegasys/teku/storage/store/Store.java b/storage/src/main/java/tech/pegasys/teku/storage/store/Store.java\nindex 10e99bdf54..d87dde27f9 100644\n--- a/storage/src/main/java/tech/pegasys/teku/storage/store/Store.java\n+++ b/storage/src/main/java/tech/pegasys/teku/storage/store/Store.java\n\n@@ -719,13 +684,20 @@ class Store implements UpdatableStore {\n \n     @Override\n     public void updateHead() {\n-      Store.this.forkChoiceState.updateHead(this);\n+      final Checkpoint finalized = getFinalizedCheckpoint();\n+      final Checkpoint justified = getJustifiedCheckpoint();\n+      final BeaconState justifiedState = getCheckpointState(justified);\n+      forkChoiceUpdater.updateHead(finalized, justified, justifiedState);\n       this.headUpdated = true;\n     }\n \n     @Override\n     public void processAttestation(final IndexedAttestation attestation) {\n-      Store.this.forkChoiceState.onAttestation(this, attestation);\n+      forkChoiceUpdater.onAttestation(attestation);\n+    }\n+\n+    Map<UnsignedLong, VoteTracker> getForkChoiceVotes() {\n+      return forkChoiceUpdater.getVotes();\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMwMzk4Mg==", "url": "https://github.com/ConsenSys/teku/pull/2178#discussion_r443303982", "bodyText": "nit: No need to wrap and unwrap the block and state here:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  store.forkChoiceState.onBlock(new SignedBlockAndState(newBlock, newState));\n          \n          \n            \n                  store.forkChoiceState.onBlock(newBlock.getMessage(), newState);", "author": "ajsutton", "createdAt": "2020-06-22T03:45:53Z", "path": "storage/src/main/java/tech/pegasys/teku/storage/store/StoreTransactionUpdates.java", "diffHunk": "@@ -266,6 +269,36 @@ public void applyToStore(final Store store) {\n                 removeBlockRootFromSlotIndex(store.rootsBySlotLookup, slot, root);\n               });\n         });\n+\n+    // Update forkchoice\n+    applyForkChoiceUpdates(store);\n+  }\n+\n+  private void applyForkChoiceUpdates(final Store store) {\n+    // Process new blocks and states\n+    final List<SignedBeaconBlock> sortedBlocks = new ArrayList<>(hotBlocks.values());\n+    sortedBlocks.sort(Comparator.comparing(SignedBeaconBlock::getSlot));\n+    for (SignedBeaconBlock newBlock : sortedBlocks) {\n+      final BeaconState newState = hotStates.get(newBlock.getRoot());\n+      store.forkChoiceState.onBlock(new SignedBlockAndState(newBlock, newState));", "originalCommit": "e577d8d7b77e51ab1ddef0a497cc17a7a4468f75", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "43675a59cf2c3c4ce2dcf7709e2a459dbfd517a4", "chunk": "diff --git a/storage/src/main/java/tech/pegasys/teku/storage/store/StoreTransactionUpdates.java b/storage/src/main/java/tech/pegasys/teku/storage/store/StoreTransactionUpdates.java\nindex f2d25d9f0b..c03395e007 100644\n--- a/storage/src/main/java/tech/pegasys/teku/storage/store/StoreTransactionUpdates.java\n+++ b/storage/src/main/java/tech/pegasys/teku/storage/store/StoreTransactionUpdates.java\n\n@@ -280,7 +280,7 @@ class StoreTransactionUpdates {\n     sortedBlocks.sort(Comparator.comparing(SignedBeaconBlock::getSlot));\n     for (SignedBeaconBlock newBlock : sortedBlocks) {\n       final BeaconState newState = hotStates.get(newBlock.getRoot());\n-      store.forkChoiceState.onBlock(new SignedBlockAndState(newBlock, newState));\n+      store.forkChoiceState.onBlock(newBlock.getMessage(), newState);\n     }\n \n     // Handle finalization update\n"}}, {"oid": "af6fb34f117c2314a44540b00e9cc2443ac793ea", "url": "https://github.com/ConsenSys/teku/commit/af6fb34f117c2314a44540b00e9cc2443ac793ea", "message": "In tests, join on transaction commit results", "committedDate": "2020-06-22T14:32:18Z", "type": "commit"}, {"oid": "8d586af5fb4376815de687d56c5a5c0e55ee5f2f", "url": "https://github.com/ConsenSys/teku/commit/8d586af5fb4376815de687d56c5a5c0e55ee5f2f", "message": "Fix locks", "committedDate": "2020-06-22T14:57:53Z", "type": "commit"}, {"oid": "43675a59cf2c3c4ce2dcf7709e2a459dbfd517a4", "url": "https://github.com/ConsenSys/teku/commit/43675a59cf2c3c4ce2dcf7709e2a459dbfd517a4", "message": "Cut unnecessary object creation", "committedDate": "2020-06-22T15:01:19Z", "type": "commit"}, {"oid": "fb0cc2f9dffb9bf0a298f775de419048746538b5", "url": "https://github.com/ConsenSys/teku/commit/fb0cc2f9dffb9bf0a298f775de419048746538b5", "message": "Move forkChoice mutations to an Updater object", "committedDate": "2020-06-22T19:35:33Z", "type": "commit"}, {"oid": "1401fb9bcc031765227f8e58dea64314fd042ddf", "url": "https://github.com/ConsenSys/teku/commit/1401fb9bcc031765227f8e58dea64314fd042ddf", "message": "Merge branch 'master' into issue-2037/move-fork-choice-into-store", "committedDate": "2020-06-22T20:24:03Z", "type": "commit"}]}