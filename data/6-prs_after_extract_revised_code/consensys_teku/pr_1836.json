{"pr_number": 1836, "pr_title": "Validate future checks latest & pass attestations to pool", "pr_createdAt": "2020-05-21T19:20:58Z", "pr_url": "https://github.com/ConsenSys/teku/pull/1836", "timeline": [{"oid": "c0e6e6542f0d437fdf506f938d89815540163915", "url": "https://github.com/ConsenSys/teku/commit/c0e6e6542f0d437fdf506f938d89815540163915", "message": "Validate future checks latest & pass attestations to Pool", "committedDate": "2020-05-21T19:12:52Z", "type": "commit"}, {"oid": "738dba85c6abfe609c59d93ab012b575468bae2f", "url": "https://github.com/ConsenSys/teku/commit/738dba85c6abfe609c59d93ab012b575468bae2f", "message": "Simplify indented code", "committedDate": "2020-05-21T19:43:24Z", "type": "commit"}, {"oid": "628c22b4a8d745eecdeb75ca6895935c5f82f5f5", "url": "https://github.com/ConsenSys/teku/commit/628c22b4a8d745eecdeb75ca6895935c5f82f5f5", "message": "Pass pool to attestation manager", "committedDate": "2020-05-21T19:47:02Z", "type": "commit"}, {"oid": "e199ed07dff7bca30ed21fe290f6d3d1eabe3670", "url": "https://github.com/ConsenSys/teku/commit/e199ed07dff7bca30ed21fe290f6d3d1eabe3670", "message": "Close of future Attestation DOS vector", "committedDate": "2020-05-21T21:30:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk3NjEwMQ==", "url": "https://github.com/ConsenSys/teku/pull/1836#discussion_r428976101", "bodyText": "This should be volatile as it could potentially be accessed from multiple threads.", "author": "ajsutton", "createdAt": "2020-05-22T00:00:27Z", "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/forkchoice/DelayableAttestation.java", "diffHunk": "@@ -11,29 +11,43 @@\n  * specific language governing permissions and limitations under the License.\n  */\n \n-package tech.pegasys.teku.sync;\n+package tech.pegasys.teku.datastructures.forkchoice;\n \n import com.google.common.primitives.UnsignedLong;\n import java.util.Collection;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+\n import org.apache.tuweni.bytes.Bytes32;\n import tech.pegasys.teku.datastructures.operations.Attestation;\n+import tech.pegasys.teku.datastructures.operations.IndexedAttestation;\n \n public class DelayableAttestation {\n   private final Attestation attestation;\n-  private final Runnable onSuccessfulProcessing;\n+  private final Consumer<Attestation> onSuccessfulProcessing;\n+\n+  private Optional<IndexedAttestation> maybeIndexedAttestation = Optional.empty();", "originalCommit": "628c22b4a8d745eecdeb75ca6895935c5f82f5f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3NjY0NQ==", "url": "https://github.com/ConsenSys/teku/pull/1836#discussion_r429376645", "bodyText": "Makes sense.", "author": "cemozerr", "createdAt": "2020-05-22T17:43:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk3NjEwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "630f441ce25eb5de7ba1d7ea248b7c53f602562e", "chunk": "diff --git a/ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/forkchoice/DelayableAttestation.java b/ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/forkchoice/DelayableAttestation.java\nindex 0dff1b9457..19e0f82423 100644\n--- a/ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/forkchoice/DelayableAttestation.java\n+++ b/ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/forkchoice/DelayableAttestation.java\n\n@@ -26,7 +26,7 @@ public class DelayableAttestation {\n   private final Attestation attestation;\n   private final Consumer<Attestation> onSuccessfulProcessing;\n \n-  private Optional<IndexedAttestation> maybeIndexedAttestation = Optional.empty();\n+  private volatile Optional<IndexedAttestation> maybeIndexedAttestation = Optional.empty();\n \n   public DelayableAttestation(\n       final Attestation attestation, final Consumer<Attestation> onSuccessfulProcessing) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk3Nzc3NA==", "url": "https://github.com/ConsenSys/teku/pull/1836#discussion_r428977774", "bodyText": "I'd say this should just take an IndexedAttestation and push responsibility for ensuring IndexedAttestation all the way up to AttestationManager.  It shouldn't ever add an attestation to FutureAttestation that hasn't passed validation.", "author": "ajsutton", "createdAt": "2020-05-22T00:06:56Z", "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/forkchoice/ForkChoice.java", "diffHunk": "@@ -71,11 +72,19 @@ public synchronized BlockImportResult onBlock(final SignedBeaconBlock block) {\n   }\n \n   public AttestationProcessingResult onAttestation(\n-      final MutableStore store, final Attestation attestation) {\n+      final MutableStore store, final DelayableAttestation attestation) {\n     return on_attestation(store, attestation, stateTransition, protoArrayForkChoiceStrategy);\n   }\n \n-  @Override\n+  public void applyIndexedAttestation(\n+          final MutableStore store, final DelayableAttestation attestation) {\n+    protoArrayForkChoiceStrategy.onAttestation(store, attestation.getIndexedAttestation()\n+            .orElseThrow(() -> new IllegalStateException(\"Future attestation should have had a proper indexed attestation.\"))\n+    );", "originalCommit": "628c22b4a8d745eecdeb75ca6895935c5f82f5f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3ODgwNA==", "url": "https://github.com/ConsenSys/teku/pull/1836#discussion_r429378804", "bodyText": "In that case, would FutureAttestation only holding IndexedAttestations make sense?", "author": "cemozerr", "createdAt": "2020-05-22T17:49:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk3Nzc3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM4MTE0Mw==", "url": "https://github.com/ConsenSys/teku/pull/1836#discussion_r429381143", "bodyText": "One downside is that maybe we want to pass the attestation back to the networking layer once we take it out from FutureAttestation. Also, keeping a reference to the DelayableAttestation (the higher-level object) is more in line with the ValidateableAttestation concept, so I might just keep items in FutureAttestation as DelayableAttestations.", "author": "cemozerr", "createdAt": "2020-05-22T17:53:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk3Nzc3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM4MzAyMA==", "url": "https://github.com/ConsenSys/teku/pull/1836#discussion_r429383020", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-05-22T17:57:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk3Nzc3NA=="}], "type": "inlineReview", "revised_code": {"commit": "7c1e7b59f3b8c8cb25c6c1899313ba00a9c95ccf", "chunk": "diff --git a/ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/forkchoice/ForkChoice.java b/ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/forkchoice/ForkChoice.java\nindex 892d11224f..d3c769a4a2 100644\n--- a/ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/forkchoice/ForkChoice.java\n+++ b/ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/forkchoice/ForkChoice.java\n\n@@ -77,10 +78,8 @@ public class ForkChoice implements FinalizedCheckpointChannel {\n   }\n \n   public void applyIndexedAttestation(\n-          final MutableStore store, final DelayableAttestation attestation) {\n-    protoArrayForkChoiceStrategy.onAttestation(store, attestation.getIndexedAttestation()\n-            .orElseThrow(() -> new IllegalStateException(\"Future attestation should have had a proper indexed attestation.\"))\n-    );\n+          final MutableStore store, final IndexedAttestation indexedAttestation) {\n+    protoArrayForkChoiceStrategy.onAttestation(store, indexedAttestation);\n   }\n \n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk3ODYyOQ==", "url": "https://github.com/ConsenSys/teku/pull/1836#discussion_r428978629", "bodyText": "Just take an IndexedAttestation here.", "author": "ajsutton", "createdAt": "2020-05-22T00:10:11Z", "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/ForkChoiceAttestationProcessor.java", "diffHunk": "@@ -30,12 +31,18 @@ public ForkChoiceAttestationProcessor(\n     this.forkChoice = forkChoice;\n   }\n \n-  public AttestationProcessingResult processAttestation(final Attestation attestation) {\n+  public AttestationProcessingResult processAttestation(final DelayableAttestation attestation) {\n     final Store.Transaction transaction = recentChainData.startStoreTransaction();\n     final AttestationProcessingResult result = forkChoice.onAttestation(transaction, attestation);\n     if (result.isSuccessful()) {\n       transaction.commit(() -> {}, \"Failed to persist attestation result\");\n     }\n     return result;\n   }\n+\n+  public void applyAttestationToForkChoice(final DelayableAttestation attestation) {\n+    final Store.Transaction transaction = recentChainData.startStoreTransaction();\n+    forkChoice.applyIndexedAttestation(transaction, attestation);\n+    transaction.commit(() -> {}, \"Failed to persist attestation result\");", "originalCommit": "628c22b4a8d745eecdeb75ca6895935c5f82f5f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM4MzE5OQ==", "url": "https://github.com/ConsenSys/teku/pull/1836#discussion_r429383199", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-05-22T17:58:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk3ODYyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "7c1e7b59f3b8c8cb25c6c1899313ba00a9c95ccf", "chunk": "diff --git a/ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/ForkChoiceAttestationProcessor.java b/ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/ForkChoiceAttestationProcessor.java\nindex 0a9c04b807..e2918a2d84 100644\n--- a/ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/ForkChoiceAttestationProcessor.java\n+++ b/ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/ForkChoiceAttestationProcessor.java\n\n@@ -40,7 +41,7 @@ public class ForkChoiceAttestationProcessor {\n     return result;\n   }\n \n-  public void applyAttestationToForkChoice(final DelayableAttestation attestation) {\n+  public void applyIndexedAttestationToForkChoice(final IndexedAttestation attestation) {\n     final Store.Transaction transaction = recentChainData.startStoreTransaction();\n     forkChoice.applyIndexedAttestation(transaction, attestation);\n     transaction.commit(() -> {}, \"Failed to persist attestation result\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk3OTMwOA==", "url": "https://github.com/ConsenSys/teku/pull/1836#discussion_r428979308", "bodyText": "This is where I'd check the IndexedAttestation exists and log an error if it doesn't indicating that somehow an unvalidated attestation got into the future pool (then don't process it obviously).\nAt the moment you could actually make futureAttestations just hold IndexedAttestation but that's only because we aren't currently calling delayableAttestation.onAttestationProcessedSuccessfully for attestations we process from futureAttestations.", "author": "ajsutton", "createdAt": "2020-05-22T00:12:28Z", "path": "sync/src/main/java/tech/pegasys/teku/sync/AttestationManager.java", "diffHunk": "@@ -41,47 +41,48 @@\n \n   private final PendingPool<DelayableAttestation> pendingAttestations;\n   private final FutureItems<DelayableAttestation> futureAttestations;\n+  private final AggregatingAttestationPool aggregatingAttestationPool;\n \n   AttestationManager(\n-      final EventBus eventBus,\n-      final ForkChoiceAttestationProcessor attestationProcessor,\n-      final PendingPool<DelayableAttestation> pendingAttestations,\n-      final FutureItems<DelayableAttestation> futureAttestations) {\n+          final EventBus eventBus,\n+          final ForkChoiceAttestationProcessor attestationProcessor,\n+          final PendingPool<DelayableAttestation> pendingAttestations,\n+          final FutureItems<DelayableAttestation> futureAttestations,\n+          final AggregatingAttestationPool aggregatingAttestationPool) {\n     this.eventBus = eventBus;\n     this.attestationProcessor = attestationProcessor;\n     this.pendingAttestations = pendingAttestations;\n     this.futureAttestations = futureAttestations;\n+    this.aggregatingAttestationPool = aggregatingAttestationPool;\n   }\n \n   public static AttestationManager create(\n       final EventBus eventBus,\n       final PendingPool<DelayableAttestation> pendingAttestations,\n       final FutureItems<DelayableAttestation> futureAttestations,\n-      final ForkChoiceAttestationProcessor forkChoiceAttestationProcessor) {\n+      final ForkChoiceAttestationProcessor forkChoiceAttestationProcessor,\n+      final AggregatingAttestationPool aggregatingAttestationPool) {\n     return new AttestationManager(\n-        eventBus, forkChoiceAttestationProcessor, pendingAttestations, futureAttestations);\n+        eventBus, forkChoiceAttestationProcessor, pendingAttestations, futureAttestations, aggregatingAttestationPool);\n   }\n \n   @Subscribe\n   @SuppressWarnings(\"unused\")\n   private void onGossipedAttestation(final Attestation attestation) {\n-    processAttestation(\n-        new DelayableAttestation(\n-            attestation, () -> eventBus.post(new ProcessedAttestationEvent(attestation))));\n+    processAttestation(new DelayableAttestation(attestation, aggregatingAttestationPool::add));\n   }\n \n   @Subscribe\n   @SuppressWarnings(\"unused\")\n   private void onAggregateAndProof(final SignedAggregateAndProof aggregateAndProof) {\n-    final Attestation aggregate = aggregateAndProof.getMessage().getAggregate();\n-    processAttestation(\n-        new DelayableAttestation(\n-            aggregate, () -> eventBus.post(new ProcessedAggregateEvent(aggregate))));\n+    final Attestation aggregateAttestation = aggregateAndProof.getMessage().getAggregate();\n+    processAttestation(new DelayableAttestation(aggregateAttestation, aggregatingAttestationPool::add));\n+\n   }\n \n   @Override\n   public void onSlot(final UnsignedLong slot) {\n-    futureAttestations.prune(slot).forEach(this::processAttestation);\n+    futureAttestations.prune(slot).forEach(attestationProcessor::applyAttestationToForkChoice);", "originalCommit": "628c22b4a8d745eecdeb75ca6895935c5f82f5f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM4MzkzMw==", "url": "https://github.com/ConsenSys/teku/pull/1836#discussion_r429383933", "bodyText": "This is exactly what I did after reading your previous comment and having not seen this :D", "author": "cemozerr", "createdAt": "2020-05-22T18:00:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk3OTMwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY3NzE1Nw==", "url": "https://github.com/ConsenSys/teku/pull/1836#discussion_r429677157", "bodyText": "But now we're never even able to call onAttestationProcessedSuccessfully when the delayed attestation is actually processed.   I guess the event it fires doesn't actually do anything for now, but we'll probably have to change this back when we want to start gossiping attestations after we process them (if we haven't already).\nAlthough, whether we gossiped something or not seems like a nice thing to track in ValidatableAttestation so maybe it will work out...", "author": "ajsutton", "createdAt": "2020-05-24T21:29:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk3OTMwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY3ODU1OQ==", "url": "https://github.com/ConsenSys/teku/pull/1836#discussion_r429678559", "bodyText": "Looking at how all the code has worked out this bit now makes more sense - we're not firing the unused events any more - the on processed event just adds it to the aggregate pool which we've already done for saved attestations.", "author": "ajsutton", "createdAt": "2020-05-24T21:50:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk3OTMwOA=="}], "type": "inlineReview", "revised_code": {"commit": "7c1e7b59f3b8c8cb25c6c1899313ba00a9c95ccf", "chunk": "diff --git a/sync/src/main/java/tech/pegasys/teku/sync/AttestationManager.java b/sync/src/main/java/tech/pegasys/teku/sync/AttestationManager.java\nindex a5784c64ff..98ff733d4b 100644\n--- a/sync/src/main/java/tech/pegasys/teku/sync/AttestationManager.java\n+++ b/sync/src/main/java/tech/pegasys/teku/sync/AttestationManager.java\n\n@@ -82,7 +83,11 @@ public class AttestationManager extends Service implements SlotEventsChannel {\n \n   @Override\n   public void onSlot(final UnsignedLong slot) {\n-    futureAttestations.prune(slot).forEach(attestationProcessor::applyAttestationToForkChoice);\n+    futureAttestations.prune(slot).stream()\n+            .map(DelayableAttestation::getIndexedAttestation)\n+            .map(optional -> optional.orElseThrow(() ->\n+                    new UnsupportedOperationException(\"FutureAttestation should contain indexed attestation\")))\n+            .forEach(attestationProcessor::applyIndexedAttestationToForkChoice);\n   }\n \n   @Subscribe\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk4MTk2MA==", "url": "https://github.com/ConsenSys/teku/pull/1836#discussion_r428981960", "bodyText": "10 is probably too generous actually.  Really the only reason for this to happen is clock drift or if Teku is lagging behind slightly so 99% of the time it will only be one slot ahead so I'd probably limit it to something like 3 - that gives a 36 second buffer which should be plenty.", "author": "ajsutton", "createdAt": "2020-05-22T00:22:53Z", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/topics/validation/AttestationValidator.java", "diffHunk": "@@ -41,6 +41,7 @@\n \n public class AttestationValidator {\n \n+  private static final UnsignedLong MAX_FUTURE_SLOT_ALLOWANCE = UnsignedLong.valueOf(10);", "originalCommit": "e199ed07dff7bca30ed21fe290f6d3d1eabe3670", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM4NDM2NA==", "url": "https://github.com/ConsenSys/teku/pull/1836#discussion_r429384364", "bodyText": "Yeah that makes sense. Can't believe I gave a 120 second buffer \ud83d\ude02", "author": "cemozerr", "createdAt": "2020-05-22T18:01:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk4MTk2MA=="}], "type": "inlineReview", "revised_code": {"commit": "7c1e7b59f3b8c8cb25c6c1899313ba00a9c95ccf", "chunk": "diff --git a/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/topics/validation/AttestationValidator.java b/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/topics/validation/AttestationValidator.java\nindex 3598496b5e..9a46874106 100644\n--- a/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/topics/validation/AttestationValidator.java\n+++ b/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/topics/validation/AttestationValidator.java\n\n@@ -41,7 +41,7 @@ import tech.pegasys.teku.util.config.Constants;\n \n public class AttestationValidator {\n \n-  private static final UnsignedLong MAX_FUTURE_SLOT_ALLOWANCE = UnsignedLong.valueOf(10);\n+  private static final UnsignedLong MAX_FUTURE_SLOT_ALLOWANCE = UnsignedLong.valueOf(3);\n   private static final UnsignedLong MILLIS_PER_SECOND = UnsignedLong.valueOf(1000);\n   private static final UnsignedLong MAXIMUM_GOSSIP_CLOCK_DISPARITY =\n       UnsignedLong.valueOf(Constants.MAXIMUM_GOSSIP_CLOCK_DISPARITY);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk4MjQyOA==", "url": "https://github.com/ConsenSys/teku/pull/1836#discussion_r428982428", "bodyText": "Is it just me or should isAfterPropagationSlotRange really be isBeforePropagationSlotRange?  ie it's valid if it's after the propagation slot range and invalid if it's from too far back.", "author": "ajsutton", "createdAt": "2020-05-22T00:24:38Z", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/topics/validation/AttestationValidator.java", "diffHunk": "@@ -105,7 +106,8 @@ ValidationResult singleOrAggregateAttestationChecks(final Attestation attestatio\n     // queue\n     // future attestations for processing at the appropriate slot).\n     final UnsignedLong currentTimeMillis = secondsToMillis(recentChainData.getStore().getTime());\n-    if (isAfterPropagationSlotRange(currentTimeMillis, attestation)) {\n+    if (isAfterPropagationSlotRange(currentTimeMillis, attestation)", "originalCommit": "e199ed07dff7bca30ed21fe290f6d3d1eabe3670", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM4NDY5OQ==", "url": "https://github.com/ConsenSys/teku/pull/1836#discussion_r429384699", "bodyText": "Yes it should be isBefore, I'll do the switch.", "author": "cemozerr", "createdAt": "2020-05-22T18:01:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk4MjQyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM4ODgyNw==", "url": "https://github.com/ConsenSys/teku/pull/1836#discussion_r429388827", "bodyText": "No, on second thought, isAfterPropagationSlotRange is correct. Because it does not refer to the attestation, it refers to the current time. Current time is after the attestations propagation slot range, thus the naming. I'll change these methods to:\n\nisCurrentTimeAfterAttestationPropagationSlotRange\nisCurrentTimeBeforeMinimumAttestationBroadcastTime", "author": "cemozerr", "createdAt": "2020-05-22T18:11:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk4MjQyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM4OTA0OA==", "url": "https://github.com/ConsenSys/teku/pull/1836#discussion_r429389048", "bodyText": "all for 50 character method names.", "author": "cemozerr", "createdAt": "2020-05-22T18:12:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk4MjQyOA=="}], "type": "inlineReview", "revised_code": {"commit": "7c1e7b59f3b8c8cb25c6c1899313ba00a9c95ccf", "chunk": "diff --git a/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/topics/validation/AttestationValidator.java b/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/topics/validation/AttestationValidator.java\nindex 3598496b5e..9a46874106 100644\n--- a/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/topics/validation/AttestationValidator.java\n+++ b/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/topics/validation/AttestationValidator.java\n\n@@ -106,11 +106,11 @@ public class AttestationValidator {\n     // queue\n     // future attestations for processing at the appropriate slot).\n     final UnsignedLong currentTimeMillis = secondsToMillis(recentChainData.getStore().getTime());\n-    if (isAfterPropagationSlotRange(currentTimeMillis, attestation)\n+    if (isCurrentTimeAfterAttestationPropagationSlotRange(currentTimeMillis, attestation)\n             || isFromFarFuture(attestation, currentTimeMillis)) {\n       return INVALID;\n     }\n-    if (isBeforeMinimumBroadcastTime(attestation, currentTimeMillis)) {\n+    if (isCurrentTimeBeforeMinimumAttestationBroadcastTime(attestation, currentTimeMillis)) {\n       return SAVED_FOR_FUTURE;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk4NTI3NQ==", "url": "https://github.com/ConsenSys/teku/pull/1836#discussion_r428985275", "bodyText": "nit: Suggest extracting the currentTimeMillis.plus bit to a variable - something like discardAttestationsAfterMillis.  Just makes the comparison clearer.", "author": "ajsutton", "createdAt": "2020-05-22T00:36:02Z", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/topics/validation/AttestationValidator.java", "diffHunk": "@@ -152,6 +154,18 @@ private boolean isBeforeMinimumBroadcastTime(\n     return currentTimeMillis.compareTo(minimumBroadcastTimeMillis) < 0;\n   }\n \n+  private boolean isFromFarFuture(\n+          final Attestation attestation, final UnsignedLong currentTimeMillis) {\n+    final UnsignedLong attestationSlotTimeMillis =\n+            secondsToMillis(recentChainData\n+                    .getGenesisTime()\n+                    .plus(attestation.getEarliestSlotForForkChoiceProcessing()\n+                            .times(UnsignedLong.valueOf(SECONDS_PER_SLOT))\n+                    ));\n+    return attestationSlotTimeMillis.compareTo(currentTimeMillis\n+            .plus(secondsToMillis(MAX_FUTURE_SLOT_ALLOWANCE.times(UnsignedLong.valueOf(SECONDS_PER_SLOT))))) > 0;", "originalCommit": "e199ed07dff7bca30ed21fe290f6d3d1eabe3670", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM4OTY0MQ==", "url": "https://github.com/ConsenSys/teku/pull/1836#discussion_r429389641", "bodyText": "Makes sense. Done.", "author": "cemozerr", "createdAt": "2020-05-22T18:14:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk4NTI3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "7c1e7b59f3b8c8cb25c6c1899313ba00a9c95ccf", "chunk": "diff --git a/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/topics/validation/AttestationValidator.java b/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/topics/validation/AttestationValidator.java\nindex 3598496b5e..9a46874106 100644\n--- a/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/topics/validation/AttestationValidator.java\n+++ b/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/topics/validation/AttestationValidator.java\n\n@@ -147,7 +147,7 @@ public class AttestationValidator {\n         attestation.getAggregation_bits().streamAllSetBits().findFirst().orElseThrow());\n   }\n \n-  private boolean isBeforeMinimumBroadcastTime(\n+  private boolean isCurrentTimeBeforeMinimumAttestationBroadcastTime(\n       final Attestation attestation, final UnsignedLong currentTimeMillis) {\n     final UnsignedLong minimumBroadcastTimeMillis =\n         minimumBroadcastTimeMillis(attestation.getData().getSlot());\n"}}, {"oid": "630f441ce25eb5de7ba1d7ea248b7c53f602562e", "url": "https://github.com/ConsenSys/teku/commit/630f441ce25eb5de7ba1d7ea248b7c53f602562e", "message": "Make indexedAttestation variable volatile", "committedDate": "2020-05-22T17:45:11Z", "type": "commit"}, {"oid": "7c1e7b59f3b8c8cb25c6c1899313ba00a9c95ccf", "url": "https://github.com/ConsenSys/teku/commit/7c1e7b59f3b8c8cb25c6c1899313ba00a9c95ccf", "message": "Pass indexed attestation around & change method names", "committedDate": "2020-05-22T18:16:00Z", "type": "commit"}, {"oid": "6207ae8a3b9e0d64bd853b50ffc825275f3559ac", "url": "https://github.com/ConsenSys/teku/commit/6207ae8a3b9e0d64bd853b50ffc825275f3559ac", "message": "Refactor tests to match refactored AttestationManager", "committedDate": "2020-05-22T20:56:38Z", "type": "commit"}, {"oid": "6b18991dc1239fb9143972232e418f9753d9a4b1", "url": "https://github.com/ConsenSys/teku/commit/6b18991dc1239fb9143972232e418f9753d9a4b1", "message": "Run spotless", "committedDate": "2020-05-22T21:02:07Z", "type": "commit"}, {"oid": "21be5ad414e7f9df65209ccc2cf01831aa51cd78", "url": "https://github.com/ConsenSys/teku/commit/21be5ad414e7f9df65209ccc2cf01831aa51cd78", "message": "Fix unit test", "committedDate": "2020-05-22T21:14:21Z", "type": "commit"}, {"oid": "f745abfeb309b414a3ffa9b291c610ece57aade9", "url": "https://github.com/ConsenSys/teku/commit/f745abfeb309b414a3ffa9b291c610ece57aade9", "message": "Merge branch 'master' into validateAtestationFutureChecksLatest", "committedDate": "2020-05-22T21:31:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY3ODQyNA==", "url": "https://github.com/ConsenSys/teku/pull/1836#discussion_r429678424", "bodyText": "ewww, spies...  All the checks on on these can be done quite effectively just using it's size method to see if anything has been added or not.\nI'd also suggest adding a method:\nprivate void verifyAttestationProcessed(final Attestation attestation) {\n    ArgumentCaptor<DelayableAttestation> captor =\n        ArgumentCaptor.forClass(DelayableAttestation.class);\n    verify(attestationProcessor).processAttestation(captor.capture());\n    assertThat(captor.getValue().getAttestation()).isSameAs(attestation);\n  }\n\nwhich will let you be more specific instead of using verify(attestationProcessor).processAttestation(attestation).", "author": "ajsutton", "createdAt": "2020-05-24T21:48:14Z", "path": "sync/src/test/java/tech/pegasys/teku/sync/AttestationManagerTest.java", "diffHunk": "@@ -25,45 +30,41 @@\n \n import com.google.common.eventbus.EventBus;\n import com.google.common.primitives.UnsignedLong;\n-import java.util.List;\n import org.apache.tuweni.bytes.Bytes32;\n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n import tech.pegasys.teku.bls.BLSSignature;\n import tech.pegasys.teku.core.results.AttestationProcessingResult;\n import tech.pegasys.teku.datastructures.blocks.SignedBeaconBlock;\n-import tech.pegasys.teku.datastructures.operations.AggregateAndProof;\n+import tech.pegasys.teku.datastructures.forkchoice.DelayableAttestation;\n import tech.pegasys.teku.datastructures.operations.Attestation;\n import tech.pegasys.teku.datastructures.operations.AttestationData;\n+import tech.pegasys.teku.datastructures.operations.IndexedAttestation;\n import tech.pegasys.teku.datastructures.operations.SignedAggregateAndProof;\n import tech.pegasys.teku.datastructures.state.Checkpoint;\n import tech.pegasys.teku.datastructures.util.DataStructureUtil;\n import tech.pegasys.teku.ssz.SSZTypes.Bitlist;\n+import tech.pegasys.teku.statetransition.attestation.AggregatingAttestationPool;\n import tech.pegasys.teku.statetransition.attestation.ForkChoiceAttestationProcessor;\n-import tech.pegasys.teku.statetransition.events.attestation.ProcessedAggregateEvent;\n-import tech.pegasys.teku.statetransition.events.attestation.ProcessedAttestationEvent;\n import tech.pegasys.teku.statetransition.events.block.ImportedBlockEvent;\n-import tech.pegasys.teku.util.EventSink;\n \n class AttestationManagerTest {\n   private final DataStructureUtil dataStructureUtil = new DataStructureUtil();\n   private final EventBus eventBus = new EventBus();\n-  private final PendingPool<DelayableAttestation> pendingAttestations =\n-      PendingPool.createForAttestations();\n-  private final FutureItems<DelayableAttestation> futureAttestations =\n-      new FutureItems<>(DelayableAttestation::getEarliestSlotForForkChoiceProcessing);\n \n-  private final ForkChoiceAttestationProcessor attestationProcessor =\n+  private AggregatingAttestationPool attestationPool = mock(AggregatingAttestationPool.class);\n+  private ForkChoiceAttestationProcessor attestationProcessor =\n       mock(ForkChoiceAttestationProcessor.class);\n-  private final List<ProcessedAttestationEvent> processedAttestationEvents =\n-      EventSink.capture(eventBus, ProcessedAttestationEvent.class);\n-  private final List<ProcessedAggregateEvent> processedAggregateEvents =\n-      EventSink.capture(eventBus, ProcessedAggregateEvent.class);\n+  private final PendingPool<DelayableAttestation> pendingAttestations =\n+      spy(PendingPool.createForAttestations());", "originalCommit": "f745abfeb309b414a3ffa9b291c610ece57aade9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU3MTg2Ng==", "url": "https://github.com/ConsenSys/teku/pull/1836#discussion_r430571866", "bodyText": "Done :D. Thanks for the suggestion.", "author": "cemozerr", "createdAt": "2020-05-26T17:06:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY3ODQyNA=="}], "type": "inlineReview", "revised_code": {"commit": "07c21f4c5f4e011912025851d71d8ed113efe90f", "chunk": "diff --git a/sync/src/test/java/tech/pegasys/teku/sync/AttestationManagerTest.java b/sync/src/test/java/tech/pegasys/teku/sync/AttestationManagerTest.java\nindex 6a9dd69a9c..f746f005da 100644\n--- a/sync/src/test/java/tech/pegasys/teku/sync/AttestationManagerTest.java\n+++ b/sync/src/test/java/tech/pegasys/teku/sync/AttestationManagerTest.java\n\n@@ -58,9 +58,9 @@ class AttestationManagerTest {\n   private ForkChoiceAttestationProcessor attestationProcessor =\n       mock(ForkChoiceAttestationProcessor.class);\n   private final PendingPool<DelayableAttestation> pendingAttestations =\n-      spy(PendingPool.createForAttestations());\n+      PendingPool.createForAttestations();\n   private final FutureItems<DelayableAttestation> futureAttestations =\n-      spy(new FutureItems<>(DelayableAttestation::getEarliestSlotForForkChoiceProcessing));\n+      new FutureItems<>(DelayableAttestation::getEarliestSlotForForkChoiceProcessing);\n \n   private final AttestationManager attestationManager =\n       new AttestationManager(\n"}}, {"oid": "07c21f4c5f4e011912025851d71d8ed113efe90f", "url": "https://github.com/ConsenSys/teku/commit/07c21f4c5f4e011912025851d71d8ed113efe90f", "message": "Remove usage of spies in test", "committedDate": "2020-05-26T17:06:29Z", "type": "commit"}, {"oid": "ff1c1657e59b867e106a5a82d4eddf411f087f48", "url": "https://github.com/ConsenSys/teku/commit/ff1c1657e59b867e106a5a82d4eddf411f087f48", "message": "Merge branch 'master' into validateAtestationFutureChecksLatest", "committedDate": "2020-05-26T17:07:02Z", "type": "commit"}, {"oid": "8ae990290a7c5aa1ed4acad3c207206a957e4806", "url": "https://github.com/ConsenSys/teku/commit/8ae990290a7c5aa1ed4acad3c207206a957e4806", "message": "Run spotless", "committedDate": "2020-05-26T17:18:37Z", "type": "commit"}, {"oid": "f718557e4d1a4184ededaf1e9d295169ebeab692", "url": "https://github.com/ConsenSys/teku/commit/f718557e4d1a4184ededaf1e9d295169ebeab692", "message": "Merge branch 'master' of github.com:PegaSysEng/teku into validateAtestationFutureChecksLatest", "committedDate": "2020-05-27T00:07:42Z", "type": "commit"}]}