{"pr_number": 2097, "pr_title": "Added user-friendly console logging for eth1 service success + failure.", "pr_createdAt": "2020-06-09T14:49:49Z", "pr_url": "https://github.com/ConsenSys/teku/pull/2097", "timeline": [{"oid": "bb1a216e9b97a0f45f1af2ddaf52b39ade49ed42", "url": "https://github.com/ConsenSys/teku/commit/bb1a216e9b97a0f45f1af2ddaf52b39ade49ed42", "message": "Added user-friendly logging for eth1 service success + failure.", "committedDate": "2020-06-09T14:36:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5NTY3MQ==", "url": "https://github.com/ConsenSys/teku/pull/2097#discussion_r437795671", "bodyText": "The modern version of Timer is ScheduledThreadPoolExecutor which is probably better to use.", "author": "ajsutton", "createdAt": "2020-06-10T00:32:44Z", "path": "pow/src/main/java/tech/pegasys/teku/pow/Eth1StatusLogger.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.pow;\n+\n+import static tech.pegasys.teku.logging.StatusLogger.STATUS_LOG;\n+\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+public class Eth1StatusLogger {\n+  private final AtomicBoolean timerActive = new AtomicBoolean();\n+  private final AtomicInteger failCount = new AtomicInteger(0);\n+  private final long interval;\n+  private final TimerTask timerTask;\n+  private Timer timer;", "originalCommit": "bb1a216e9b97a0f45f1af2ddaf52b39ade49ed42", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d592d866e2d414f30d118cfcd1d6481b62985db", "chunk": "diff --git a/pow/src/main/java/tech/pegasys/teku/pow/Eth1StatusLogger.java b/pow/src/main/java/tech/pegasys/teku/pow/Eth1StatusLogger.java\nindex 8097d68d2a..99c6651027 100644\n--- a/pow/src/main/java/tech/pegasys/teku/pow/Eth1StatusLogger.java\n+++ b/pow/src/main/java/tech/pegasys/teku/pow/Eth1StatusLogger.java\n\n@@ -15,51 +15,47 @@ package tech.pegasys.teku.pow;\n \n import static tech.pegasys.teku.logging.StatusLogger.STATUS_LOG;\n \n-import java.util.Timer;\n-import java.util.TimerTask;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicBoolean;\n-import java.util.concurrent.atomic.AtomicInteger;\n \n public class Eth1StatusLogger {\n-  private final AtomicBoolean timerActive = new AtomicBoolean();\n-  private final AtomicInteger failCount = new AtomicInteger(0);\n-  private final long interval;\n-  private final TimerTask timerTask;\n-  private Timer timer;\n-\n-  public Eth1StatusLogger(final long interval) {\n-    this.interval = interval;\n-    this.timerTask =\n-        new TimerTask() {\n-          @Override\n-          public void run() {\n-            if (failCount.get() > 1) {\n-              STATUS_LOG.eth1ServiceDown(Eth1StatusLogger.this.interval);\n-              failCount.set(0);\n-            } else {\n-              stop();\n-            }\n-          }\n-        };\n-  }\n+  private static final int LOG_INTERVAL = 30000;\n+  private final AtomicBoolean timerActive = new AtomicBoolean(false);\n+  private Instant startInstant;\n+  private ScheduledExecutorService executor;\n \n   private void start() {\n-    this.timer = new Timer();\n-    this.timer.scheduleAtFixedRate(timerTask, interval / 2, interval);\n+    this.startInstant = Instant.now();\n     this.timerActive.set(true);\n+    this.executor = Executors.newScheduledThreadPool(1);\n+    executor.scheduleAtFixedRate(\n+        () ->\n+            STATUS_LOG.eth1ServiceDown(Duration.between(startInstant, Instant.now()).getSeconds()),\n+        LOG_INTERVAL,\n+        LOG_INTERVAL,\n+        TimeUnit.MILLISECONDS);\n   }\n \n   private void stop() {\n-    this.timer.cancel();\n+    this.executor.shutdownNow();\n+    this.executor = null;\n     this.timerActive.set(false);\n-    this.failCount.set(0);\n-    this.timer = null;\n+    this.startInstant = null;\n   }\n \n-  synchronized void incrementFail() {\n+  synchronized void fail() {\n     if (!this.timerActive.get()) {\n       start();\n     }\n-    failCount.incrementAndGet();\n+  }\n+\n+  synchronized void success() {\n+    if (this.timerActive.get()) {\n+      stop();\n+    }\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5NjU4Nw==", "url": "https://github.com/ConsenSys/teku/pull/2097#discussion_r437796587", "bodyText": "If we have a single request fail and everything else work, this will wind up reporting that the ETH1 service has been down for the entire timer interval which is misleading.  We really want to ignore individual errors but report when there is problem for a sustained period.  If the errors persist for more than one interval we'd also want the time reported in the logs to increase so each log reports the total outage period, not just repeatedly report the same period.\nSo I'd say we nee to report when requests start working to this class.  Then it can track how long requests have been failing for and alert as needed.  Having a ErrorTrackingEth1Provider which implements Eth1Provider and delegates much like ThrottlingEth1Provider does is probably the neatest way to do this - then it automatically tracks all the ETH1 requests we make and all the error tracking is kept in one place.", "author": "ajsutton", "createdAt": "2020-06-10T00:36:46Z", "path": "pow/src/main/java/tech/pegasys/teku/pow/Eth1StatusLogger.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.pow;\n+\n+import static tech.pegasys.teku.logging.StatusLogger.STATUS_LOG;\n+\n+import java.util.Timer;\n+import java.util.TimerTask;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+public class Eth1StatusLogger {\n+  private final AtomicBoolean timerActive = new AtomicBoolean();\n+  private final AtomicInteger failCount = new AtomicInteger(0);\n+  private final long interval;\n+  private final TimerTask timerTask;\n+  private Timer timer;\n+\n+  public Eth1StatusLogger(final long interval) {\n+    this.interval = interval;\n+    this.timerTask =\n+        new TimerTask() {\n+          @Override\n+          public void run() {\n+            if (failCount.get() > 1) {\n+              STATUS_LOG.eth1ServiceDown(Eth1StatusLogger.this.interval);", "originalCommit": "bb1a216e9b97a0f45f1af2ddaf52b39ade49ed42", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d592d866e2d414f30d118cfcd1d6481b62985db", "chunk": "diff --git a/pow/src/main/java/tech/pegasys/teku/pow/Eth1StatusLogger.java b/pow/src/main/java/tech/pegasys/teku/pow/Eth1StatusLogger.java\nindex 8097d68d2a..99c6651027 100644\n--- a/pow/src/main/java/tech/pegasys/teku/pow/Eth1StatusLogger.java\n+++ b/pow/src/main/java/tech/pegasys/teku/pow/Eth1StatusLogger.java\n\n@@ -15,51 +15,47 @@ package tech.pegasys.teku.pow;\n \n import static tech.pegasys.teku.logging.StatusLogger.STATUS_LOG;\n \n-import java.util.Timer;\n-import java.util.TimerTask;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicBoolean;\n-import java.util.concurrent.atomic.AtomicInteger;\n \n public class Eth1StatusLogger {\n-  private final AtomicBoolean timerActive = new AtomicBoolean();\n-  private final AtomicInteger failCount = new AtomicInteger(0);\n-  private final long interval;\n-  private final TimerTask timerTask;\n-  private Timer timer;\n-\n-  public Eth1StatusLogger(final long interval) {\n-    this.interval = interval;\n-    this.timerTask =\n-        new TimerTask() {\n-          @Override\n-          public void run() {\n-            if (failCount.get() > 1) {\n-              STATUS_LOG.eth1ServiceDown(Eth1StatusLogger.this.interval);\n-              failCount.set(0);\n-            } else {\n-              stop();\n-            }\n-          }\n-        };\n-  }\n+  private static final int LOG_INTERVAL = 30000;\n+  private final AtomicBoolean timerActive = new AtomicBoolean(false);\n+  private Instant startInstant;\n+  private ScheduledExecutorService executor;\n \n   private void start() {\n-    this.timer = new Timer();\n-    this.timer.scheduleAtFixedRate(timerTask, interval / 2, interval);\n+    this.startInstant = Instant.now();\n     this.timerActive.set(true);\n+    this.executor = Executors.newScheduledThreadPool(1);\n+    executor.scheduleAtFixedRate(\n+        () ->\n+            STATUS_LOG.eth1ServiceDown(Duration.between(startInstant, Instant.now()).getSeconds()),\n+        LOG_INTERVAL,\n+        LOG_INTERVAL,\n+        TimeUnit.MILLISECONDS);\n   }\n \n   private void stop() {\n-    this.timer.cancel();\n+    this.executor.shutdownNow();\n+    this.executor = null;\n     this.timerActive.set(false);\n-    this.failCount.set(0);\n-    this.timer = null;\n+    this.startInstant = null;\n   }\n \n-  synchronized void incrementFail() {\n+  synchronized void fail() {\n     if (!this.timerActive.get()) {\n       start();\n     }\n-    failCount.incrementAndGet();\n+  }\n+\n+  synchronized void success() {\n+    if (this.timerActive.get()) {\n+      stop();\n+    }\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5NzMwNA==", "url": "https://github.com/ConsenSys/teku/pull/2097#discussion_r437797304", "bodyText": "reachedHead will need to be an AtomicBoolean as multiple threads could be involved.", "author": "ajsutton", "createdAt": "2020-06-10T00:39:40Z", "path": "pow/src/main/java/tech/pegasys/teku/pow/Eth1HeadTracker.java", "diffHunk": "@@ -82,6 +90,10 @@ private void onLatestBlockHead(final Block headBlock) {\n     if (headAtFollowDistance\n         .map(current -> current.compareTo(newHeadAtFollowDistance) < 0)\n         .orElse(true)) {\n+      if (!reachedHead) {", "originalCommit": "bb1a216e9b97a0f45f1af2ddaf52b39ade49ed42", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d592d866e2d414f30d118cfcd1d6481b62985db", "chunk": "diff --git a/pow/src/main/java/tech/pegasys/teku/pow/Eth1HeadTracker.java b/pow/src/main/java/tech/pegasys/teku/pow/Eth1HeadTracker.java\nindex 8fa649942f..0adc5e97d1 100644\n--- a/pow/src/main/java/tech/pegasys/teku/pow/Eth1HeadTracker.java\n+++ b/pow/src/main/java/tech/pegasys/teku/pow/Eth1HeadTracker.java\n\n@@ -90,9 +90,9 @@ public class Eth1HeadTracker {\n     if (headAtFollowDistance\n         .map(current -> current.compareTo(newHeadAtFollowDistance) < 0)\n         .orElse(true)) {\n-      if (!reachedHead) {\n+      if (!reachedHead.get()) {\n         STATUS_LOG.eth1AtHead();\n-        reachedHead = true;\n+        reachedHead.set(true);\n       }\n       headAtFollowDistance = Optional.of(newHeadAtFollowDistance);\n       LOG.debug(\"ETH1 block at follow distance updated to {}\", newHeadAtFollowDistance);\n"}}, {"oid": "6b20988578023b80212e97c6358c335f69ca6d48", "url": "https://github.com/ConsenSys/teku/commit/6b20988578023b80212e97c6358c335f69ca6d48", "message": "Merge branch 'master' into 1796-better", "committedDate": "2020-06-10T04:27:14Z", "type": "commit"}, {"oid": "8d592d866e2d414f30d118cfcd1d6481b62985db", "url": "https://github.com/ConsenSys/teku/commit/8d592d866e2d414f30d118cfcd1d6481b62985db", "message": "PR fixes.", "committedDate": "2020-06-11T13:42:44Z", "type": "commit"}, {"oid": "109e7a346b6517d667772e9289555c772fc2f246", "url": "https://github.com/ConsenSys/teku/commit/109e7a346b6517d667772e9289555c772fc2f246", "message": "Build fix.", "committedDate": "2020-06-11T23:13:49Z", "type": "commit"}, {"oid": "1c1ececa5566514a6e096fac129a49e7c9d79128", "url": "https://github.com/ConsenSys/teku/commit/1c1ececa5566514a6e096fac129a49e7c9d79128", "message": "Merge branch 'master' into 1796-better", "committedDate": "2020-06-11T23:19:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE1Mjc4Mg==", "url": "https://github.com/ConsenSys/teku/pull/2097#discussion_r439152782", "bodyText": "Couldn't this also be handled by ErrorTrackignEth1Provider? It can just use the catchAndRethrow method of SafeFuture.", "author": "ajsutton", "createdAt": "2020-06-12T00:59:07Z", "path": "pow/src/main/java/tech/pegasys/teku/pow/DepositFetcher.java", "diffHunk": "@@ -94,11 +97,12 @@ public DepositFetcher(\n         .depositEventInRange(fromBlock, toBlock)\n         .exceptionallyCompose(\n             (err) -> {\n-              LOG.warn(\n+              LOG.debug(\n                   \"Failed to request deposit events for block numbers in the range ({}, {}). Retrying.\",\n                   fromBlockNumber,\n                   toBlockNumber,\n                   err);\n+              eth1StatusLogger.fail();", "originalCommit": "1c1ececa5566514a6e096fac129a49e7c9d79128", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb880bd856fa8815147df73a62eeb18cb19c25f5", "chunk": "diff --git a/pow/src/main/java/tech/pegasys/teku/pow/DepositFetcher.java b/pow/src/main/java/tech/pegasys/teku/pow/DepositFetcher.java\nindex 780511138c..835717ada2 100644\n--- a/pow/src/main/java/tech/pegasys/teku/pow/DepositFetcher.java\n+++ b/pow/src/main/java/tech/pegasys/teku/pow/DepositFetcher.java\n\n@@ -102,7 +99,6 @@ public class DepositFetcher {\n                   fromBlockNumber,\n                   toBlockNumber,\n                   err);\n-              eth1StatusLogger.fail();\n \n               return asyncRunner.runAfterDelay(\n                   () -> getDepositEventsInRangeFromContract(fromBlockNumber, toBlockNumber),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE1MzM3Mw==", "url": "https://github.com/ConsenSys/teku/pull/2097#discussion_r439153373", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (!reachedHead.get()) {\n          \n          \n            \n                  if (reachedHead.compareAndSet(false, true)) {\n          \n      \n    \n    \n  \n\nThen drop the reachedHead.set(true).  That way you're using a single atomic operation to check and update so it's thread safe.", "author": "ajsutton", "createdAt": "2020-06-12T01:01:25Z", "path": "pow/src/main/java/tech/pegasys/teku/pow/Eth1HeadTracker.java", "diffHunk": "@@ -82,6 +90,10 @@ private void onLatestBlockHead(final Block headBlock) {\n     if (headAtFollowDistance\n         .map(current -> current.compareTo(newHeadAtFollowDistance) < 0)\n         .orElse(true)) {\n+      if (!reachedHead.get()) {", "originalCommit": "1c1ececa5566514a6e096fac129a49e7c9d79128", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1ef1189c4fa8bd09cc064de71be9d42802a33e99", "chunk": "diff --git a/pow/src/main/java/tech/pegasys/teku/pow/Eth1HeadTracker.java b/pow/src/main/java/tech/pegasys/teku/pow/Eth1HeadTracker.java\nindex 0adc5e97d1..6951424701 100644\n--- a/pow/src/main/java/tech/pegasys/teku/pow/Eth1HeadTracker.java\n+++ b/pow/src/main/java/tech/pegasys/teku/pow/Eth1HeadTracker.java\n\n@@ -90,7 +90,7 @@ public class Eth1HeadTracker {\n     if (headAtFollowDistance\n         .map(current -> current.compareTo(newHeadAtFollowDistance) < 0)\n         .orElse(true)) {\n-      if (!reachedHead.get()) {\n+      if (reachedHead.compareAndSet(false, true)) {\n         STATUS_LOG.eth1AtHead();\n         reachedHead.set(true);\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE1NzEzNg==", "url": "https://github.com/ConsenSys/teku/pull/2097#discussion_r439157136", "bodyText": "Probably should make this just a local variable.  Ultimately we should only need to provide it to ErrorTrackingEth1Provider.", "author": "ajsutton", "createdAt": "2020-06-12T01:17:17Z", "path": "services/powchain/src/main/java/tech/pegasys/teku/services/powchain/PowchainService.java", "diffHunk": "@@ -41,6 +43,7 @@\n \n   private final Eth1DepositManager eth1DepositManager;\n   private final Eth1HeadTracker headTracker;\n+  private final Eth1StatusLogger eth1StatusLogger = new Eth1StatusLogger();", "originalCommit": "1c1ececa5566514a6e096fac129a49e7c9d79128", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb880bd856fa8815147df73a62eeb18cb19c25f5", "chunk": "diff --git a/services/powchain/src/main/java/tech/pegasys/teku/services/powchain/PowchainService.java b/services/powchain/src/main/java/tech/pegasys/teku/services/powchain/PowchainService.java\nindex 60333da2fe..c438ada97f 100644\n--- a/services/powchain/src/main/java/tech/pegasys/teku/services/powchain/PowchainService.java\n+++ b/services/powchain/src/main/java/tech/pegasys/teku/services/powchain/PowchainService.java\n\n@@ -43,7 +42,6 @@ public class PowchainService extends Service {\n \n   private final Eth1DepositManager eth1DepositManager;\n   private final Eth1HeadTracker headTracker;\n-  private final Eth1StatusLogger eth1StatusLogger = new Eth1StatusLogger();\n \n   public PowchainService(final ServiceConfig config) {\n     TekuConfiguration tekuConfig = config.getConfig();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE1OTk2NQ==", "url": "https://github.com/ConsenSys/teku/pull/2097#discussion_r439159965", "bodyText": "Sorry, I led you astray here - don't know why I didn't think of this when I mentioned ScheduledExecutorService.  We have an abstraction (AsyncRunner) that makes running things after some period a lot more testable and generally makes managing life cycle easier.  And we also have one for accessing time - TimeProvider (which you can get from the ServiceConfig passed into PowchainService constructor).\nSo using those I think we wind up with:\npublic class Eth1StatusLogger {\n  private static final Logger LOG = LogManager.getLogger();\n  private static final int LOG_INTERVAL = 30000;\n\n  private final AsyncRunner asyncRunner;\n  private final TimeProvider timeProvider;\n\n  private Optional<Cancellable> activeReporter = Optional.empty();\n\n  public Eth1StatusLogger(final AsyncRunner asyncRunner, final TimeProvider timeProvider) {\n    this.asyncRunner = asyncRunner;\n    this.timeProvider = timeProvider;\n  }\n\n  synchronized void success() {\n    activeReporter.ifPresent(\n        reporter -> {\n          reporter.cancel();\n          activeReporter = Optional.empty();\n        });\n  }\n\n  synchronized void fail() {\n    if (activeReporter.isEmpty()) {\n      final UnsignedLong outageStartInSeconds = timeProvider.getTimeInSeconds();\n      final Cancellable reporter =\n          asyncRunner.runWithFixedDelay(\n              () -> reportOutage(outageStartInSeconds),\n              LOG_INTERVAL,\n              TimeUnit.MILLISECONDS,\n              error -> LOG.error(\"Failed to check ETH1 status\", error));\n      activeReporter = Optional.of(reporter);\n    }\n  }\n\n  private void reportOutage(final UnsignedLong outageStartInSeconds) {\n    STATUS_LOG.eth1ServiceDown(timeProvider.getTimeInSeconds().minus(outageStartInSeconds));\n  }\n}\n\nSo basically when a failure comes in, start a periodic report of how long the failure has been happening and when success happens cancel that reporting.", "author": "ajsutton", "createdAt": "2020-06-12T01:29:07Z", "path": "pow/src/main/java/tech/pegasys/teku/pow/Eth1StatusLogger.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.pow;\n+\n+import static tech.pegasys.teku.logging.StatusLogger.STATUS_LOG;\n+\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+public class Eth1StatusLogger {\n+  private static final int LOG_INTERVAL = 30000;\n+  private final AtomicBoolean timerActive = new AtomicBoolean(false);\n+  private Instant startInstant;\n+  private ScheduledExecutorService executor;\n+  private ScheduledFuture<?> scheduledFuture;\n+\n+  private void start() {\n+    this.startInstant = Instant.now();\n+    this.timerActive.set(true);\n+    this.executor = Executors.newScheduledThreadPool(1);\n+    scheduledFuture =\n+        executor.scheduleAtFixedRate(\n+            () ->\n+                STATUS_LOG.eth1ServiceDown(\n+                    Duration.between(startInstant, Instant.now()).getSeconds()),\n+            LOG_INTERVAL,\n+            LOG_INTERVAL,\n+            TimeUnit.MILLISECONDS);\n+  }", "originalCommit": "1c1ececa5566514a6e096fac129a49e7c9d79128", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb880bd856fa8815147df73a62eeb18cb19c25f5", "chunk": "diff --git a/pow/src/main/java/tech/pegasys/teku/pow/Eth1StatusLogger.java b/pow/src/main/java/tech/pegasys/teku/pow/Eth1StatusLogger.java\nindex cd4fd25bf8..d6abe4702e 100644\n--- a/pow/src/main/java/tech/pegasys/teku/pow/Eth1StatusLogger.java\n+++ b/pow/src/main/java/tech/pegasys/teku/pow/Eth1StatusLogger.java\n\n@@ -15,52 +15,52 @@ package tech.pegasys.teku.pow;\n \n import static tech.pegasys.teku.logging.StatusLogger.STATUS_LOG;\n \n-import java.time.Duration;\n-import java.time.Instant;\n-import java.util.concurrent.Executors;\n-import java.util.concurrent.ScheduledExecutorService;\n-import java.util.concurrent.ScheduledFuture;\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Optional;\n import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicBoolean;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.teku.util.async.AsyncRunner;\n+import tech.pegasys.teku.util.async.Cancellable;\n+import tech.pegasys.teku.util.time.TimeProvider;\n \n public class Eth1StatusLogger {\n+  private static final Logger LOG = LogManager.getLogger();\n   private static final int LOG_INTERVAL = 30000;\n-  private final AtomicBoolean timerActive = new AtomicBoolean(false);\n-  private Instant startInstant;\n-  private ScheduledExecutorService executor;\n-  private ScheduledFuture<?> scheduledFuture;\n \n-  private void start() {\n-    this.startInstant = Instant.now();\n-    this.timerActive.set(true);\n-    this.executor = Executors.newScheduledThreadPool(1);\n-    scheduledFuture =\n-        executor.scheduleAtFixedRate(\n-            () ->\n-                STATUS_LOG.eth1ServiceDown(\n-                    Duration.between(startInstant, Instant.now()).getSeconds()),\n-            LOG_INTERVAL,\n-            LOG_INTERVAL,\n-            TimeUnit.MILLISECONDS);\n+  private final AsyncRunner asyncRunner;\n+  private final TimeProvider timeProvider;\n+\n+  private Optional<Cancellable> activeReporter = Optional.empty();\n+\n+  public Eth1StatusLogger(final AsyncRunner asyncRunner, final TimeProvider timeProvider) {\n+    this.asyncRunner = asyncRunner;\n+    this.timeProvider = timeProvider;\n   }\n \n-  private void stop() {\n-    this.scheduledFuture.isCancelled();\n-    this.executor.shutdownNow();\n-    this.executor = null;\n-    this.timerActive.set(false);\n-    this.startInstant = null;\n+  synchronized void success() {\n+    activeReporter.ifPresent(\n+        reporter -> {\n+          reporter.cancel();\n+          activeReporter = Optional.empty();\n+        });\n   }\n \n   synchronized void fail() {\n-    if (!this.timerActive.get()) {\n-      start();\n+    if (activeReporter.isEmpty()) {\n+      final UnsignedLong outageStartInSeconds = timeProvider.getTimeInSeconds();\n+      final Cancellable reporter =\n+          asyncRunner.runWithFixedDelay(\n+              () -> reportOutage(outageStartInSeconds),\n+              LOG_INTERVAL,\n+              TimeUnit.MILLISECONDS,\n+              error -> LOG.error(\"Failed to check ETH1 status\", error));\n+      activeReporter = Optional.of(reporter);\n     }\n   }\n \n-  synchronized void success() {\n-    if (this.timerActive.get()) {\n-      stop();\n-    }\n+  private void reportOutage(final UnsignedLong outageStartInSeconds) {\n+    STATUS_LOG.eth1ServiceDown(\n+        timeProvider.getTimeInSeconds().minus(outageStartInSeconds).longValue());\n   }\n }\n"}}, {"oid": "ebeae9269b60e6da67b80f6911f32ad92fff7224", "url": "https://github.com/ConsenSys/teku/commit/ebeae9269b60e6da67b80f6911f32ad92fff7224", "message": "Merge branch 'master' into 1796-better", "committedDate": "2020-06-12T02:30:04Z", "type": "commit"}, {"oid": "1ef1189c4fa8bd09cc064de71be9d42802a33e99", "url": "https://github.com/ConsenSys/teku/commit/1ef1189c4fa8bd09cc064de71be9d42802a33e99", "message": "Update pow/src/main/java/tech/pegasys/teku/pow/Eth1HeadTracker.java\r\n\r\nImproved AtomicBoolean usage.\n\nCo-authored-by: Adrian Sutton <adrian@symphonious.net>", "committedDate": "2020-06-12T02:40:29Z", "type": "commit"}, {"oid": "eb880bd856fa8815147df73a62eeb18cb19c25f5", "url": "https://github.com/ConsenSys/teku/commit/eb880bd856fa8815147df73a62eeb18cb19c25f5", "message": "Updated Eth1StatusLogger implementation to use Asyncrunner.", "committedDate": "2020-06-17T12:57:28Z", "type": "commit"}, {"oid": "eeccd37abd101ece92507aaf8dda3525ee2a89b5", "url": "https://github.com/ConsenSys/teku/commit/eeccd37abd101ece92507aaf8dda3525ee2a89b5", "message": "Merge branch 'master' into 1796-better", "committedDate": "2020-06-17T12:57:49Z", "type": "commit"}, {"oid": "75b1e8d82adbb5f10b46d36656f90104363a6431", "url": "https://github.com/ConsenSys/teku/commit/75b1e8d82adbb5f10b46d36656f90104363a6431", "message": "Test..", "committedDate": "2020-06-17T13:31:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc2NjgwMA==", "url": "https://github.com/ConsenSys/teku/pull/2097#discussion_r441766800", "bodyText": "nit: Eth1 is used elsewhere rather than ETH1", "author": "macfarla", "createdAt": "2020-06-17T18:58:19Z", "path": "pow/src/main/java/tech/pegasys/teku/pow/Eth1StatusLogger.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.pow;\n+\n+import static tech.pegasys.teku.logging.StatusLogger.STATUS_LOG;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.teku.util.async.AsyncRunner;\n+import tech.pegasys.teku.util.async.Cancellable;\n+import tech.pegasys.teku.util.time.TimeProvider;\n+\n+public class Eth1StatusLogger {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private static final int LOG_INTERVAL = 30000;\n+\n+  private final AsyncRunner asyncRunner;\n+  private final TimeProvider timeProvider;\n+\n+  private Optional<Cancellable> activeReporter = Optional.empty();\n+\n+  public Eth1StatusLogger(final AsyncRunner asyncRunner, final TimeProvider timeProvider) {\n+    this.asyncRunner = asyncRunner;\n+    this.timeProvider = timeProvider;\n+  }\n+\n+  synchronized void success() {\n+    activeReporter.ifPresent(\n+        reporter -> {\n+          reporter.cancel();\n+          activeReporter = Optional.empty();\n+        });\n+  }\n+\n+  synchronized void fail() {\n+    if (activeReporter.isEmpty()) {\n+      final UnsignedLong outageStartInSeconds = timeProvider.getTimeInSeconds();\n+      final Cancellable reporter =\n+          asyncRunner.runWithFixedDelay(\n+              () -> reportOutage(outageStartInSeconds),\n+              LOG_INTERVAL,\n+              TimeUnit.MILLISECONDS,\n+              error -> LOG.error(\"Failed to check ETH1 status\", error));", "originalCommit": "75b1e8d82adbb5f10b46d36656f90104363a6431", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c90bdb36077b80d6d9f8088fbeb043521351a57f", "chunk": "diff --git a/pow/src/main/java/tech/pegasys/teku/pow/Eth1StatusLogger.java b/pow/src/main/java/tech/pegasys/teku/pow/Eth1StatusLogger.java\nindex d6abe4702e..8f298f4c84 100644\n--- a/pow/src/main/java/tech/pegasys/teku/pow/Eth1StatusLogger.java\n+++ b/pow/src/main/java/tech/pegasys/teku/pow/Eth1StatusLogger.java\n\n@@ -54,7 +54,7 @@ public class Eth1StatusLogger {\n               () -> reportOutage(outageStartInSeconds),\n               LOG_INTERVAL,\n               TimeUnit.MILLISECONDS,\n-              error -> LOG.error(\"Failed to check ETH1 status\", error));\n+              error -> LOG.error(\"Failed to check Eth1 status\", error));\n       activeReporter = Optional.of(reporter);\n     }\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc2Nzk2NQ==", "url": "https://github.com/ConsenSys/teku/pull/2097#discussion_r441767965", "bodyText": "Nit: Eth1 used elsewhere rather than ETH1", "author": "macfarla", "createdAt": "2020-06-17T18:59:32Z", "path": "pow/src/main/java/tech/pegasys/teku/pow/Eth1HeadTracker.java", "diffHunk": "@@ -56,7 +58,7 @@ private void pollLatestHead() {\n         .thenAccept(this::onLatestBlockHead)\n         .exceptionally(\n             error -> {\n-              LOG.warn(\"Failed to get latest ETH1 chain head. Will retry.\", error);\n+              LOG.debug(\"Failed to get latest ETH1 chain head. Will retry.\", error);", "originalCommit": "75b1e8d82adbb5f10b46d36656f90104363a6431", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c90bdb36077b80d6d9f8088fbeb043521351a57f", "chunk": "diff --git a/pow/src/main/java/tech/pegasys/teku/pow/Eth1HeadTracker.java b/pow/src/main/java/tech/pegasys/teku/pow/Eth1HeadTracker.java\nindex 41561f1050..2ec5fe0fd0 100644\n--- a/pow/src/main/java/tech/pegasys/teku/pow/Eth1HeadTracker.java\n+++ b/pow/src/main/java/tech/pegasys/teku/pow/Eth1HeadTracker.java\n\n@@ -58,7 +58,7 @@ public class Eth1HeadTracker {\n         .thenAccept(this::onLatestBlockHead)\n         .exceptionally(\n             error -> {\n-              LOG.debug(\"Failed to get latest ETH1 chain head. Will retry.\", error);\n+              LOG.debug(\"Failed to get latest Eth1 chain head. Will retry.\", error);\n               return null;\n             })\n         .always(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc2ODA1OA==", "url": "https://github.com/ConsenSys/teku/pull/2097#discussion_r441768058", "bodyText": "Nit: Eth1 used elsewhere rather than ETH1", "author": "macfarla", "createdAt": "2020-06-17T18:59:42Z", "path": "pow/src/main/java/tech/pegasys/teku/pow/Eth1HeadTracker.java", "diffHunk": "@@ -82,6 +84,10 @@ private void onLatestBlockHead(final Block headBlock) {\n     if (headAtFollowDistance\n         .map(current -> current.compareTo(newHeadAtFollowDistance) < 0)\n         .orElse(true)) {\n+      if (reachedHead.compareAndSet(false, true)) {\n+        STATUS_LOG.eth1AtHead();\n+        reachedHead.set(true);\n+      }\n       headAtFollowDistance = Optional.of(newHeadAtFollowDistance);\n       LOG.debug(\"ETH1 block at follow distance updated to {}\", newHeadAtFollowDistance);", "originalCommit": "75b1e8d82adbb5f10b46d36656f90104363a6431", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c90bdb36077b80d6d9f8088fbeb043521351a57f", "chunk": "diff --git a/pow/src/main/java/tech/pegasys/teku/pow/Eth1HeadTracker.java b/pow/src/main/java/tech/pegasys/teku/pow/Eth1HeadTracker.java\nindex 41561f1050..2ec5fe0fd0 100644\n--- a/pow/src/main/java/tech/pegasys/teku/pow/Eth1HeadTracker.java\n+++ b/pow/src/main/java/tech/pegasys/teku/pow/Eth1HeadTracker.java\n\n@@ -71,13 +71,13 @@ public class Eth1HeadTracker {\n                     .finish(\n                         () -> {},\n                         error ->\n-                            LOG.error(\"Scheduling next check of ETH1 chain head failed\", error)));\n+                            LOG.error(\"Scheduling next check of Eth1 chain head failed\", error)));\n   }\n \n   private void onLatestBlockHead(final Block headBlock) {\n     final UnsignedLong headBlockNumber = UnsignedLong.valueOf(headBlock.getNumber());\n     if (headBlockNumber.compareTo(ETH1_FOLLOW_DISTANCE) < 0) {\n-      LOG.debug(\"Not processing ETH1 blocks because chain has not reached minimum follow distance\");\n+      LOG.debug(\"Not processing Eth1 blocks because chain has not reached minimum follow distance\");\n       return;\n     }\n     final UnsignedLong newHeadAtFollowDistance = headBlockNumber.minus(ETH1_FOLLOW_DISTANCE);\n"}}, {"oid": "c90bdb36077b80d6d9f8088fbeb043521351a57f", "url": "https://github.com/ConsenSys/teku/commit/c90bdb36077b80d6d9f8088fbeb043521351a57f", "message": "PR fixes.", "committedDate": "2020-06-18T00:03:18Z", "type": "commit"}, {"oid": "04ad4554939747bd57088399c5cf9916c52ad7ee", "url": "https://github.com/ConsenSys/teku/commit/04ad4554939747bd57088399c5cf9916c52ad7ee", "message": "Merge branch 'master' into 1796-better", "committedDate": "2020-06-18T00:03:37Z", "type": "commit"}]}