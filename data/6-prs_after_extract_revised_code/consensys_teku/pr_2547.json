{"pr_number": 2547, "pr_title": "[Issue-2438] Rework checks to trigger peer sync", "pr_createdAt": "2020-08-10T21:00:35Z", "pr_url": "https://github.com/ConsenSys/teku/pull/2547", "timeline": [{"oid": "bfd13945d9939c43bec3087c37ad6423b9777305", "url": "https://github.com/ConsenSys/teku/commit/bfd13945d9939c43bec3087c37ad6423b9777305", "message": "Rework checks to trigger peer sync", "committedDate": "2020-08-10T20:45:05Z", "type": "commit"}, {"oid": "123d6c24c5446988026cf3011d6033888cb5fefd", "url": "https://github.com/ConsenSys/teku/commit/123d6c24c5446988026cf3011d6033888cb5fefd", "message": "Save slot-based threshold to constant", "committedDate": "2020-08-10T21:03:34Z", "type": "commit"}, {"oid": "7a17ea5a25a532712c8baccbe742be84407ec366", "url": "https://github.com/ConsenSys/teku/commit/7a17ea5a25a532712c8baccbe742be84407ec366", "message": "Merge branch 'master' into issue-2438/rework-sync-trigger", "committedDate": "2020-08-10T21:16:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE5NTU2OA==", "url": "https://github.com/ConsenSys/teku/pull/2547#discussion_r468195568", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return peerStatus.getFinalizedEpoch().compareTo(currentEpoch) <= 0\n          \n          \n            \n                    && peerStatus.getHeadSlot().compareTo(currentSlot.plus(slotErrorThreshold)) <= 0;\n          \n          \n            \n                return peerStatus.getFinalizedEpoch().isLessThanOrEqualTo(currentEpoch)\n          \n          \n            \n                    && peerStatus.getHeadSlot().isLessThanOrEqualTo(currentSlot.plus(slotErrorThreshold));", "author": "ajsutton", "createdAt": "2020-08-10T21:27:03Z", "path": "sync/src/main/java/tech/pegasys/teku/sync/SyncManager.java", "diffHunk": "@@ -255,14 +260,35 @@ private boolean isPeerSyncSuitable(Eth2Peer peer) {\n         \"Looking for suitable peer (out of {}) with finalized epoch > {}.\",\n         network.getPeerCount(),\n         ourFinalizedEpoch);\n+\n+    final PeerStatus peerStatus = peer.getStatus();\n     return !peersWithSyncErrors.contains(peer.getId())\n-        && (peer.getStatus().getFinalizedEpoch().compareTo(ourFinalizedEpoch) > 0\n-            || isHeadMoreThanAnEpochAhead(peer));\n+        && peerStatusIsConsistentWithOurNode(peerStatus)\n+        && peerIsAheadOfOurNode(peerStatus, ourFinalizedEpoch);\n+  }\n+\n+  /** Make sure remote peer is not broadcasting a chain state from the future. */\n+  private boolean peerStatusIsConsistentWithOurNode(final PeerStatus peerStatus) {\n+    final UInt64 currentSlot = storageClient.getCurrentSlot().orElse(UInt64.ZERO);\n+    final UInt64 currentEpoch = compute_epoch_at_slot(currentSlot);\n+    final UInt64 slotErrorThreshold = UInt64.ONE;\n+\n+    return peerStatus.getFinalizedEpoch().compareTo(currentEpoch) <= 0\n+        && peerStatus.getHeadSlot().compareTo(currentSlot.plus(slotErrorThreshold)) <= 0;", "originalCommit": "7a17ea5a25a532712c8baccbe742be84407ec366", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "29256419baec5749a60904c158fc9bc277fa1864", "chunk": "diff --git a/sync/src/main/java/tech/pegasys/teku/sync/SyncManager.java b/sync/src/main/java/tech/pegasys/teku/sync/SyncManager.java\nindex 2d09241f6..6f338cee7 100644\n--- a/sync/src/main/java/tech/pegasys/teku/sync/SyncManager.java\n+++ b/sync/src/main/java/tech/pegasys/teku/sync/SyncManager.java\n\n@@ -273,15 +273,15 @@ public class SyncManager extends Service {\n     final UInt64 currentEpoch = compute_epoch_at_slot(currentSlot);\n     final UInt64 slotErrorThreshold = UInt64.ONE;\n \n-    return peerStatus.getFinalizedEpoch().compareTo(currentEpoch) <= 0\n-        && peerStatus.getHeadSlot().compareTo(currentSlot.plus(slotErrorThreshold)) <= 0;\n+    return peerStatus.getFinalizedEpoch().isLessThanOrEqualTo(currentEpoch)\n+        && peerStatus.getHeadSlot().isLessThanOrEqualTo(currentSlot.plus(slotErrorThreshold));\n   }\n \n   private boolean peerIsAheadOfOurNode(\n       final PeerStatus peerStatus, final UInt64 ourFinalizedEpoch) {\n     final UInt64 finalizedEpochThreshold = ourFinalizedEpoch.plus(SYNC_THRESHOLD_IN_EPOCHS);\n \n-    return peerStatus.getFinalizedEpoch().compareTo(finalizedEpochThreshold) > 0\n+    return peerStatus.getFinalizedEpoch().isGreaterThan(finalizedEpochThreshold)\n         || isPeerHeadSlotAhead(peerStatus);\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE5NTgzNA==", "url": "https://github.com/ConsenSys/teku/pull/2547#discussion_r468195834", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return peerStatus.getFinalizedEpoch().compareTo(finalizedEpochThreshold) > 0\n          \n          \n            \n                return peerStatus.getFinalizedEpoch().isGreaterThan(finalizedEpochThreshold)", "author": "ajsutton", "createdAt": "2020-08-10T21:27:38Z", "path": "sync/src/main/java/tech/pegasys/teku/sync/SyncManager.java", "diffHunk": "@@ -255,14 +260,35 @@ private boolean isPeerSyncSuitable(Eth2Peer peer) {\n         \"Looking for suitable peer (out of {}) with finalized epoch > {}.\",\n         network.getPeerCount(),\n         ourFinalizedEpoch);\n+\n+    final PeerStatus peerStatus = peer.getStatus();\n     return !peersWithSyncErrors.contains(peer.getId())\n-        && (peer.getStatus().getFinalizedEpoch().compareTo(ourFinalizedEpoch) > 0\n-            || isHeadMoreThanAnEpochAhead(peer));\n+        && peerStatusIsConsistentWithOurNode(peerStatus)\n+        && peerIsAheadOfOurNode(peerStatus, ourFinalizedEpoch);\n+  }\n+\n+  /** Make sure remote peer is not broadcasting a chain state from the future. */\n+  private boolean peerStatusIsConsistentWithOurNode(final PeerStatus peerStatus) {\n+    final UInt64 currentSlot = storageClient.getCurrentSlot().orElse(UInt64.ZERO);\n+    final UInt64 currentEpoch = compute_epoch_at_slot(currentSlot);\n+    final UInt64 slotErrorThreshold = UInt64.ONE;\n+\n+    return peerStatus.getFinalizedEpoch().compareTo(currentEpoch) <= 0\n+        && peerStatus.getHeadSlot().compareTo(currentSlot.plus(slotErrorThreshold)) <= 0;\n   }\n \n-  private boolean isHeadMoreThanAnEpochAhead(final Eth2Peer peer) {\n+  private boolean peerIsAheadOfOurNode(\n+      final PeerStatus peerStatus, final UInt64 ourFinalizedEpoch) {\n+    final UInt64 finalizedEpochThreshold = ourFinalizedEpoch.plus(SYNC_THRESHOLD_IN_EPOCHS);\n+\n+    return peerStatus.getFinalizedEpoch().compareTo(finalizedEpochThreshold) > 0", "originalCommit": "7a17ea5a25a532712c8baccbe742be84407ec366", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "29256419baec5749a60904c158fc9bc277fa1864", "chunk": "diff --git a/sync/src/main/java/tech/pegasys/teku/sync/SyncManager.java b/sync/src/main/java/tech/pegasys/teku/sync/SyncManager.java\nindex 2d09241f6..6f338cee7 100644\n--- a/sync/src/main/java/tech/pegasys/teku/sync/SyncManager.java\n+++ b/sync/src/main/java/tech/pegasys/teku/sync/SyncManager.java\n\n@@ -273,15 +273,15 @@ public class SyncManager extends Service {\n     final UInt64 currentEpoch = compute_epoch_at_slot(currentSlot);\n     final UInt64 slotErrorThreshold = UInt64.ONE;\n \n-    return peerStatus.getFinalizedEpoch().compareTo(currentEpoch) <= 0\n-        && peerStatus.getHeadSlot().compareTo(currentSlot.plus(slotErrorThreshold)) <= 0;\n+    return peerStatus.getFinalizedEpoch().isLessThanOrEqualTo(currentEpoch)\n+        && peerStatus.getHeadSlot().isLessThanOrEqualTo(currentSlot.plus(slotErrorThreshold));\n   }\n \n   private boolean peerIsAheadOfOurNode(\n       final PeerStatus peerStatus, final UInt64 ourFinalizedEpoch) {\n     final UInt64 finalizedEpochThreshold = ourFinalizedEpoch.plus(SYNC_THRESHOLD_IN_EPOCHS);\n \n-    return peerStatus.getFinalizedEpoch().compareTo(finalizedEpochThreshold) > 0\n+    return peerStatus.getFinalizedEpoch().isGreaterThan(finalizedEpochThreshold)\n         || isPeerHeadSlotAhead(peerStatus);\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE5NTk5NQ==", "url": "https://github.com/ConsenSys/teku/pull/2547#discussion_r468195995", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return peerStatus.getHeadSlot().compareTo(headSlotThreshold) > 0;\n          \n          \n            \n                return peerStatus.getHeadSlot().isGreaterThan(headSlotThreshold);", "author": "ajsutton", "createdAt": "2020-08-10T21:27:59Z", "path": "sync/src/main/java/tech/pegasys/teku/sync/SyncManager.java", "diffHunk": "@@ -255,14 +260,35 @@ private boolean isPeerSyncSuitable(Eth2Peer peer) {\n         \"Looking for suitable peer (out of {}) with finalized epoch > {}.\",\n         network.getPeerCount(),\n         ourFinalizedEpoch);\n+\n+    final PeerStatus peerStatus = peer.getStatus();\n     return !peersWithSyncErrors.contains(peer.getId())\n-        && (peer.getStatus().getFinalizedEpoch().compareTo(ourFinalizedEpoch) > 0\n-            || isHeadMoreThanAnEpochAhead(peer));\n+        && peerStatusIsConsistentWithOurNode(peerStatus)\n+        && peerIsAheadOfOurNode(peerStatus, ourFinalizedEpoch);\n+  }\n+\n+  /** Make sure remote peer is not broadcasting a chain state from the future. */\n+  private boolean peerStatusIsConsistentWithOurNode(final PeerStatus peerStatus) {\n+    final UInt64 currentSlot = storageClient.getCurrentSlot().orElse(UInt64.ZERO);\n+    final UInt64 currentEpoch = compute_epoch_at_slot(currentSlot);\n+    final UInt64 slotErrorThreshold = UInt64.ONE;\n+\n+    return peerStatus.getFinalizedEpoch().compareTo(currentEpoch) <= 0\n+        && peerStatus.getHeadSlot().compareTo(currentSlot.plus(slotErrorThreshold)) <= 0;\n   }\n \n-  private boolean isHeadMoreThanAnEpochAhead(final Eth2Peer peer) {\n+  private boolean peerIsAheadOfOurNode(\n+      final PeerStatus peerStatus, final UInt64 ourFinalizedEpoch) {\n+    final UInt64 finalizedEpochThreshold = ourFinalizedEpoch.plus(SYNC_THRESHOLD_IN_EPOCHS);\n+\n+    return peerStatus.getFinalizedEpoch().compareTo(finalizedEpochThreshold) > 0\n+        || isPeerHeadSlotAhead(peerStatus);\n+  }\n+\n+  private boolean isPeerHeadSlotAhead(final PeerStatus peerStatus) {\n     final UInt64 ourHeadSlot = storageClient.getBestSlot();\n-    final UInt64 theirHeadSlot = peer.getStatus().getHeadSlot();\n-    return theirHeadSlot.compareTo(ourHeadSlot.plus(UInt64.valueOf(SLOTS_PER_EPOCH))) > 0;\n+    final UInt64 headSlotThreshold = ourHeadSlot.plus(SYNC_THRESHOLD_IN_SLOTS);\n+\n+    return peerStatus.getHeadSlot().compareTo(headSlotThreshold) > 0;", "originalCommit": "7a17ea5a25a532712c8baccbe742be84407ec366", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "29256419baec5749a60904c158fc9bc277fa1864", "chunk": "diff --git a/sync/src/main/java/tech/pegasys/teku/sync/SyncManager.java b/sync/src/main/java/tech/pegasys/teku/sync/SyncManager.java\nindex 2d09241f6..6f338cee7 100644\n--- a/sync/src/main/java/tech/pegasys/teku/sync/SyncManager.java\n+++ b/sync/src/main/java/tech/pegasys/teku/sync/SyncManager.java\n\n@@ -273,15 +273,15 @@ public class SyncManager extends Service {\n     final UInt64 currentEpoch = compute_epoch_at_slot(currentSlot);\n     final UInt64 slotErrorThreshold = UInt64.ONE;\n \n-    return peerStatus.getFinalizedEpoch().compareTo(currentEpoch) <= 0\n-        && peerStatus.getHeadSlot().compareTo(currentSlot.plus(slotErrorThreshold)) <= 0;\n+    return peerStatus.getFinalizedEpoch().isLessThanOrEqualTo(currentEpoch)\n+        && peerStatus.getHeadSlot().isLessThanOrEqualTo(currentSlot.plus(slotErrorThreshold));\n   }\n \n   private boolean peerIsAheadOfOurNode(\n       final PeerStatus peerStatus, final UInt64 ourFinalizedEpoch) {\n     final UInt64 finalizedEpochThreshold = ourFinalizedEpoch.plus(SYNC_THRESHOLD_IN_EPOCHS);\n \n-    return peerStatus.getFinalizedEpoch().compareTo(finalizedEpochThreshold) > 0\n+    return peerStatus.getFinalizedEpoch().isGreaterThan(finalizedEpochThreshold)\n         || isPeerHeadSlotAhead(peerStatus);\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE5NjYzNA==", "url": "https://github.com/ConsenSys/teku/pull/2547#discussion_r468196634", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    PEER_STATUS.getHeadSlot().minus(UInt64.valueOf(Constants.SLOTS_PER_EPOCH + 1));\n          \n          \n            \n                    PEER_STATUS.getHeadSlot().minus(Constants.SLOTS_PER_EPOCH + 1);", "author": "ajsutton", "createdAt": "2020-08-10T21:29:17Z", "path": "sync/src/test/java/tech/pegasys/teku/sync/SyncManagerTest.java", "diffHunk": "@@ -116,12 +168,59 @@ void sync_existingPeers() {\n     assertThat(syncManager.isSyncQueued()).isFalse();\n   }\n \n+  @Test\n+  void sync_existingPeers_remoteHeadSlotIsAheadButWithinErrorThreshold() {\n+    final UInt64 headSlot = PEER_HEAD_SLOT.minus(UInt64.ONE);\n+    localSlot.set(headSlot);\n+\n+    when(network.streamPeers()).thenReturn(Stream.of(peer));\n+\n+    final SafeFuture<PeerSyncResult> syncFuture = new SafeFuture<>();\n+    when(peerSync.sync(peer)).thenReturn(syncFuture);\n+\n+    assertThat(syncManager.start()).isCompleted();\n+    assertThat(syncManager.isSyncActive()).isTrue();\n+    assertThat(syncManager.isSyncQueued()).isFalse();\n+\n+    verify(peerSync).sync(peer);\n+\n+    // Signal the peer sync is complete\n+    syncFuture.complete(PeerSyncResult.SUCCESSFUL_SYNC);\n+\n+    // Check that the sync is done and the peer was not disconnected.\n+    assertThat(syncManager.isSyncActive()).isFalse();\n+    assertThat(syncManager.isSyncQueued()).isFalse();\n+  }\n+\n+  @Test\n+  void sync_existingPeers_peerFinalizedEpochMoreThan1EpochAhead() {\n+    setLocalChainState(\n+        PEER_STATUS.getHeadSlot(), PEER_STATUS.getFinalizedEpoch().minus(UInt64.valueOf(2)));\n+    when(network.streamPeers()).thenReturn(Stream.of(peer));\n+\n+    final SafeFuture<PeerSyncResult> syncFuture = new SafeFuture<>();\n+    when(peerSync.sync(peer)).thenReturn(syncFuture);\n+\n+    assertThat(syncManager.start()).isCompleted();\n+    assertThat(syncManager.isSyncActive()).isTrue();\n+    assertThat(syncManager.isSyncQueued()).isFalse();\n+\n+    verify(peerSync).sync(peer);\n+\n+    // Signal the peer sync is complete\n+    syncFuture.complete(PeerSyncResult.SUCCESSFUL_SYNC);\n+\n+    // Check that the sync is done and the peer was not disconnected.\n+    assertThat(syncManager.isSyncActive()).isFalse();\n+    assertThat(syncManager.isSyncQueued()).isFalse();\n+  }\n+\n   @Test\n   void sync_existingPeerWithSameFinalizedEpochButMuchBetterHeadSlot() {\n     when(network.streamPeers()).thenReturn(Stream.of(peer));\n-    when(storageClient.getFinalizedEpoch()).thenReturn(PEER_STATUS.getFinalizedEpoch());\n-    when(storageClient.getBestSlot())\n-        .thenReturn(PEER_STATUS.getHeadSlot().minus(UInt64.valueOf(Constants.SLOTS_PER_EPOCH + 1)));\n+    final UInt64 oldHeadSlot =\n+        PEER_STATUS.getHeadSlot().minus(UInt64.valueOf(Constants.SLOTS_PER_EPOCH + 1));", "originalCommit": "7a17ea5a25a532712c8baccbe742be84407ec366", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "29256419baec5749a60904c158fc9bc277fa1864", "chunk": "diff --git a/sync/src/test/java/tech/pegasys/teku/sync/SyncManagerTest.java b/sync/src/test/java/tech/pegasys/teku/sync/SyncManagerTest.java\nindex 314f212e6..640542f8b 100644\n--- a/sync/src/test/java/tech/pegasys/teku/sync/SyncManagerTest.java\n+++ b/sync/src/test/java/tech/pegasys/teku/sync/SyncManagerTest.java\n\n@@ -170,7 +170,7 @@ public class SyncManagerTest {\n \n   @Test\n   void sync_existingPeers_remoteHeadSlotIsAheadButWithinErrorThreshold() {\n-    final UInt64 headSlot = PEER_HEAD_SLOT.minus(UInt64.ONE);\n+    final UInt64 headSlot = PEER_HEAD_SLOT.minus(1);\n     localSlot.set(headSlot);\n \n     when(network.streamPeers()).thenReturn(Stream.of(peer));\n"}}, {"oid": "29256419baec5749a60904c158fc9bc277fa1864", "url": "https://github.com/ConsenSys/teku/commit/29256419baec5749a60904c158fc9bc277fa1864", "message": "Use new UInt64 helpers", "committedDate": "2020-08-10T21:56:41Z", "type": "commit"}]}