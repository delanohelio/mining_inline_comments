{"pr_number": 3381, "pr_title": "Queue requests to external signers and limit the number of concurrent requests made", "pr_createdAt": "2020-12-09T06:53:43Z", "pr_url": "https://github.com/ConsenSys/teku/pull/3381", "timeline": [{"oid": "88dd258045b1bcc542d494ff2ed2166841a13369", "url": "https://github.com/ConsenSys/teku/commit/88dd258045b1bcc542d494ff2ed2166841a13369", "message": "Queue requests to external signers and limit the number of concurrent requests made.\n\n - The specific external signer requests that are rate limited are the signing of aggregation slots, which are done in bulk on epoch change, to determine of a validator needs to be an aggregator for a given slot.\n\n - new command line option `--Xvalidators-external-signer-concurrent-limit=<INTEGER>` defaults to 32. This only affects the rate at which external signer requests to sign aggregations are performed.\n\n - Metrics added for the new queue, but only for the number of items in the queue. It may stay at 0 often, the queue gets processed very quickly, so I didnt add a metric for active requests because they started finished so fast. `validator_ExternalSigner_tasks_queued`\n\n - there will now be items listed for `beacon_eth1Queue_tasks_queued`, which was an existing task queue that previously had no metrics, but may be useful to be able to see.\n\nfixes #2860\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-12-09T06:50:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA2MDA1OQ==", "url": "https://github.com/ConsenSys/teku/pull/3381#discussion_r539060059", "bodyText": "@ajsutton processQueuedResults and requestComplete were synchronized in their original spot.\nI've added an atomic integer to act as the limit counter, and made them not synchronized, but I'll be interested to get your take on the best way to go here...", "author": "rolfyone", "createdAt": "2020-12-09T07:09:48Z", "path": "infrastructure/async/src/main/java/tech/pegasys/teku/infrastructure/async/ThrottlingTaskQueue.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.infrastructure.async;\n+\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.function.Supplier;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.hyperledger.besu.plugin.services.MetricsSystem;\n+import tech.pegasys.teku.infrastructure.metrics.SettableGauge;\n+import tech.pegasys.teku.infrastructure.metrics.TekuMetricCategory;\n+\n+public class ThrottlingTaskQueue {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final int maximumConcurrentRequests;\n+  private volatile Queue<Runnable> queuedRequests = new ConcurrentLinkedQueue<>();\n+  private volatile AtomicInteger activeTasks = new AtomicInteger(0);\n+\n+  private final SettableGauge queueSizeGauge;\n+\n+  public ThrottlingTaskQueue(\n+      final int maximumConcurrentRequests,\n+      final MetricsSystem metricsSystem,\n+      final TekuMetricCategory metricCategory,\n+      final String metricsPrefix) {\n+    this.maximumConcurrentRequests = maximumConcurrentRequests;\n+\n+    this.queueSizeGauge =\n+        SettableGauge.create(\n+            metricsSystem,\n+            metricCategory,\n+            metricsPrefix + \"_tasks_queued\",\n+            \"Number of tasks queued\");\n+  }\n+\n+  public <T> SafeFuture<T> queueRequest(final Supplier<SafeFuture<T>> request) {\n+    final SafeFuture<T> future = new SafeFuture<>();\n+    queuedRequests.add(\n+        () -> {\n+          final SafeFuture<T> requestFuture = request.get();\n+          requestFuture.propagateTo(future);\n+          requestFuture.always(this::requestComplete);\n+        });\n+    queueSizeGauge.set(queuedRequests.size());\n+    processQueuedRequests();\n+    return future;\n+  }\n+\n+  private void requestComplete() {\n+    activeTasks.decrementAndGet();\n+    processQueuedRequests();\n+  }\n+\n+  private void processQueuedRequests() {", "originalCommit": "88dd258045b1bcc542d494ff2ed2166841a13369", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY4MTQ1Nw==", "url": "https://github.com/ConsenSys/teku/pull/3381#discussion_r539681457", "bodyText": "The synchronized was essential and you'll need it back. :). The first key race condition here is that there's a race between when you check queuedRequests.isEmpty() and queuedRequests.remove().run() - the latter will give you either a NoSuchElementException or NullPointerException if the last item in the queue is removed by a different thread between the two calls.\nThe next race condition you'll hit once you fix that is that after you call incrementAndGet and find that it's actually too high, some tasks may complete which will then decrement but still not make any new requests because the limit is still reached.  Then you'll decrement to below the limit but not make any new requests and we're left underutilising the limit.\nA throttling queue is actually incredibly complex to get right with a lock free approach and there's actually no performance benefit to avoiding locks anyway.", "author": "ajsutton", "createdAt": "2020-12-09T22:02:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA2MDA1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "61a5f2381667a56bfd539de643e32104d543f5b2", "chunk": "diff --git a/infrastructure/async/src/main/java/tech/pegasys/teku/infrastructure/async/ThrottlingTaskQueue.java b/infrastructure/async/src/main/java/tech/pegasys/teku/infrastructure/async/ThrottlingTaskQueue.java\nindex 97412ea248..55c15f08d8 100644\n--- a/infrastructure/async/src/main/java/tech/pegasys/teku/infrastructure/async/ThrottlingTaskQueue.java\n+++ b/infrastructure/async/src/main/java/tech/pegasys/teku/infrastructure/async/ThrottlingTaskQueue.java\n\n@@ -15,19 +15,15 @@ package tech.pegasys.teku.infrastructure.async;\n \n import java.util.Queue;\n import java.util.concurrent.ConcurrentLinkedQueue;\n-import java.util.concurrent.atomic.AtomicInteger;\n import java.util.function.Supplier;\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n import org.hyperledger.besu.plugin.services.MetricsSystem;\n import tech.pegasys.teku.infrastructure.metrics.SettableGauge;\n import tech.pegasys.teku.infrastructure.metrics.TekuMetricCategory;\n \n public class ThrottlingTaskQueue {\n-  private static final Logger LOG = LogManager.getLogger();\n   private final int maximumConcurrentRequests;\n   private volatile Queue<Runnable> queuedRequests = new ConcurrentLinkedQueue<>();\n-  private volatile AtomicInteger activeTasks = new AtomicInteger(0);\n+  private int inflightRequestCount = 0;\n \n   private final SettableGauge queueSizeGauge;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA3MDc2NA==", "url": "https://github.com/ConsenSys/teku/pull/3381#discussion_r539070764", "bodyText": "I seemed to hit timeouts fairly quickly, I wonder if that's a good reason to actually make this option not hidden?\nRunning everything on my machine with 64 validators, a queue of 64 was enough to start not completing within timeouts, and 50 was ok to complete signing without dropping anything, but this was on web3signer with no slashing protection enabled...", "author": "rolfyone", "createdAt": "2020-12-09T07:32:36Z", "path": "teku/src/main/java/tech/pegasys/teku/cli/options/ValidatorKeysOptions.java", "diffHunk": "@@ -80,13 +80,23 @@\n       arity = \"1\")\n   private int validatorExternalSignerTimeout = 1000;\n \n+  @CommandLine.Option(\n+      names = {\"--Xvalidators-external-signer-concurrent-limit\"},\n+      paramLabel = \"<INTEGER>\",\n+      description = \"The maximum number of concurrent background requests to make to the signer.\",\n+      hidden = true,", "originalCommit": "88dd258045b1bcc542d494ff2ed2166841a13369", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY4NzE4Ng==", "url": "https://github.com/ConsenSys/teku/pull/3381#discussion_r539687186", "bodyText": "I think the increased timeout will help.  I'd say keep it hidden to start with until we know more.  Wouldn't surprise me if we do make it a fully supported option at some point though.", "author": "ajsutton", "createdAt": "2020-12-09T22:13:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTA3MDc2NA=="}], "type": "inlineReview", "revised_code": {"commit": "663419340d657cffdec970ae5a03dcc0925f24e1", "chunk": "diff --git a/teku/src/main/java/tech/pegasys/teku/cli/options/ValidatorKeysOptions.java b/teku/src/main/java/tech/pegasys/teku/cli/options/ValidatorKeysOptions.java\nindex 7867514814..c73a6696c5 100644\n--- a/teku/src/main/java/tech/pegasys/teku/cli/options/ValidatorKeysOptions.java\n+++ b/teku/src/main/java/tech/pegasys/teku/cli/options/ValidatorKeysOptions.java\n\n@@ -78,7 +80,38 @@ public class ValidatorKeysOptions {\n       paramLabel = \"<INTEGER>\",\n       description = \"Timeout (in milliseconds) for the external signing service\",\n       arity = \"1\")\n-  private int validatorExternalSignerTimeout = 1000;\n+  private long validatorExternalSignerTimeout = 5000;\n+\n+  @CommandLine.Option(\n+      names = {\"--validators-external-signer-keystore\"},\n+      paramLabel = \"<FILE>\",\n+      description =\n+          \"Keystore (PKCS12/JKS) to use for TLS mutual authentication with external signer\",\n+      arity = \"1\")\n+  private String validatorExternalSignerKeystore = null;\n+\n+  @CommandLine.Option(\n+      names = {\"--validators-external-signer-keystore-password-file\"},\n+      paramLabel = \"<FILE>\",\n+      description =\n+          \"Password file to decrypt keystore (PKCS12/JKS) that will be used for TLS mutual authentication with external signer\",\n+      arity = \"1\")\n+  private String validatorExternalSignerKeystorePasswordFile = null;\n+\n+  @CommandLine.Option(\n+      names = {\"--validators-external-signer-truststore\"},\n+      paramLabel = \"<FILE>\",\n+      description = \"Keystore (PKCS12/JKS) to trust external signer's self-signed certificate\",\n+      arity = \"1\")\n+  private String validatorExternalSignerTruststore = null;\n+\n+  @CommandLine.Option(\n+      names = {\"--validators-external-signer-truststore-password-file\"},\n+      paramLabel = \"<FILE>\",\n+      description =\n+          \"Password file to decrypt keystore (PKCS12/JKS) that will be used to trust external signer's self-signed certificate\",\n+      arity = \"1\")\n+  private String validatorExternalSignerTruststorePasswordFile = null;\n \n   @CommandLine.Option(\n       names = {\"--Xvalidators-external-signer-concurrent-limit\"},\n"}}, {"oid": "663419340d657cffdec970ae5a03dcc0925f24e1", "url": "https://github.com/ConsenSys/teku/commit/663419340d657cffdec970ae5a03dcc0925f24e1", "message": "Merge remote-tracking branch 'upstream/master' into 2860\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>\n\n# Conflicts:\n#\tteku/src/main/java/tech/pegasys/teku/cli/options/ValidatorKeysOptions.java\n#\tteku/src/test/java/tech/pegasys/teku/cli/BeaconNodeCommandTest.java\n#\tvalidator/api/src/main/java/tech/pegasys/teku/validator/api/ValidatorConfig.java\n#\tvalidator/client/src/integration-test/java/tech/pegasys/teku/validator/client/signer/ExternalSignerIntegrationTest.java\n#\tvalidator/client/src/main/java/tech/pegasys/teku/validator/client/loader/ValidatorLoader.java\n#\tvalidator/client/src/test/java/tech/pegasys/teku/validator/client/loader/ValidatorLoaderTest.java", "committedDate": "2020-12-09T22:39:50Z", "type": "commit"}, {"oid": "61a5f2381667a56bfd539de643e32104d543f5b2", "url": "https://github.com/ConsenSys/teku/commit/61a5f2381667a56bfd539de643e32104d543f5b2", "message": "changes from review comments.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-12-10T01:25:03Z", "type": "commit"}, {"oid": "d1d75ec4b1a940ea2321c9073b6bb7ffbaf1e4c6", "url": "https://github.com/ConsenSys/teku/commit/d1d75ec4b1a940ea2321c9073b6bb7ffbaf1e4c6", "message": "Merge remote-tracking branch 'upstream/master' into 2860", "committedDate": "2020-12-10T01:26:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgwNDk0NA==", "url": "https://github.com/ConsenSys/teku/pull/3381#discussion_r539804944", "bodyText": "Suspect this should be final and not volatile.", "author": "ajsutton", "createdAt": "2020-12-10T02:52:01Z", "path": "infrastructure/async/src/main/java/tech/pegasys/teku/infrastructure/async/ThrottlingTaskQueue.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.infrastructure.async;\n+\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.function.Supplier;\n+import org.hyperledger.besu.plugin.services.MetricsSystem;\n+import tech.pegasys.teku.infrastructure.metrics.SettableGauge;\n+import tech.pegasys.teku.infrastructure.metrics.TekuMetricCategory;\n+\n+public class ThrottlingTaskQueue {\n+  private final int maximumConcurrentRequests;\n+  private volatile Queue<Runnable> queuedRequests = new ConcurrentLinkedQueue<>();", "originalCommit": "d1d75ec4b1a940ea2321c9073b6bb7ffbaf1e4c6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c572ff6697bf6f5cb8366e257ad1c07f3f3d0055", "chunk": "diff --git a/infrastructure/async/src/main/java/tech/pegasys/teku/infrastructure/async/ThrottlingTaskQueue.java b/infrastructure/async/src/main/java/tech/pegasys/teku/infrastructure/async/ThrottlingTaskQueue.java\nindex 55c15f08d8..df03275d8c 100644\n--- a/infrastructure/async/src/main/java/tech/pegasys/teku/infrastructure/async/ThrottlingTaskQueue.java\n+++ b/infrastructure/async/src/main/java/tech/pegasys/teku/infrastructure/async/ThrottlingTaskQueue.java\n\n@@ -17,54 +17,45 @@ import java.util.Queue;\n import java.util.concurrent.ConcurrentLinkedQueue;\n import java.util.function.Supplier;\n import org.hyperledger.besu.plugin.services.MetricsSystem;\n-import tech.pegasys.teku.infrastructure.metrics.SettableGauge;\n import tech.pegasys.teku.infrastructure.metrics.TekuMetricCategory;\n \n public class ThrottlingTaskQueue {\n-  private final int maximumConcurrentRequests;\n-  private volatile Queue<Runnable> queuedRequests = new ConcurrentLinkedQueue<>();\n-  private int inflightRequestCount = 0;\n-\n-  private final SettableGauge queueSizeGauge;\n+  private final int maximumConcurrentTasks;\n+  private final Queue<Runnable> queuedTasks = new ConcurrentLinkedQueue<>();\n+  private int inflightTaskCount = 0;\n \n   public ThrottlingTaskQueue(\n-      final int maximumConcurrentRequests,\n+      final int maximumConcurrentTasks,\n       final MetricsSystem metricsSystem,\n       final TekuMetricCategory metricCategory,\n-      final String metricsPrefix) {\n-    this.maximumConcurrentRequests = maximumConcurrentRequests;\n+      final String metricName) {\n+    this.maximumConcurrentTasks = maximumConcurrentTasks;\n \n-    this.queueSizeGauge =\n-        SettableGauge.create(\n-            metricsSystem,\n-            metricCategory,\n-            metricsPrefix + \"_tasks_queued\",\n-            \"Number of tasks queued\");\n+    metricsSystem.createGauge(\n+        metricCategory, metricName, \"Number of tasks queued\", queuedTasks::size);\n   }\n \n-  public <T> SafeFuture<T> queueRequest(final Supplier<SafeFuture<T>> request) {\n+  public <T> SafeFuture<T> queueTask(final Supplier<SafeFuture<T>> request) {\n     final SafeFuture<T> future = new SafeFuture<>();\n-    queuedRequests.add(\n+    queuedTasks.add(\n         () -> {\n           final SafeFuture<T> requestFuture = request.get();\n           requestFuture.propagateTo(future);\n-          requestFuture.always(this::requestComplete);\n+          requestFuture.always(this::taskComplete);\n         });\n-    queueSizeGauge.set(queuedRequests.size());\n-    processQueuedRequests();\n+    processQueuedTasks();\n     return future;\n   }\n \n-  private synchronized void requestComplete() {\n-    inflightRequestCount--;\n-    processQueuedRequests();\n+  private synchronized void taskComplete() {\n+    inflightTaskCount--;\n+    processQueuedTasks();\n   }\n \n-  private synchronized void processQueuedRequests() {\n-    while (inflightRequestCount < maximumConcurrentRequests && !queuedRequests.isEmpty()) {\n-      inflightRequestCount++;\n-      queuedRequests.remove().run();\n+  private synchronized void processQueuedTasks() {\n+    while (inflightTaskCount < maximumConcurrentTasks && !queuedTasks.isEmpty()) {\n+      inflightTaskCount++;\n+      queuedTasks.remove().run();\n     }\n-    queueSizeGauge.set(queuedRequests.size());\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgwNTUwNA==", "url": "https://github.com/ConsenSys/teku/pull/3381#discussion_r539805504", "bodyText": "You can just use a normal gauge here rather than SettableGuage and pass queuedRequests::size as the supplier.  It's a concurrent queue anyway so safe to access from the metrics thread.", "author": "ajsutton", "createdAt": "2020-12-10T02:53:38Z", "path": "infrastructure/async/src/main/java/tech/pegasys/teku/infrastructure/async/ThrottlingTaskQueue.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.infrastructure.async;\n+\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.function.Supplier;\n+import org.hyperledger.besu.plugin.services.MetricsSystem;\n+import tech.pegasys.teku.infrastructure.metrics.SettableGauge;\n+import tech.pegasys.teku.infrastructure.metrics.TekuMetricCategory;\n+\n+public class ThrottlingTaskQueue {\n+  private final int maximumConcurrentRequests;\n+  private volatile Queue<Runnable> queuedRequests = new ConcurrentLinkedQueue<>();\n+  private int inflightRequestCount = 0;\n+\n+  private final SettableGauge queueSizeGauge;\n+\n+  public ThrottlingTaskQueue(\n+      final int maximumConcurrentRequests,\n+      final MetricsSystem metricsSystem,\n+      final TekuMetricCategory metricCategory,\n+      final String metricsPrefix) {\n+    this.maximumConcurrentRequests = maximumConcurrentRequests;\n+\n+    this.queueSizeGauge =\n+        SettableGauge.create(\n+            metricsSystem,\n+            metricCategory,\n+            metricsPrefix + \"_tasks_queued\",\n+            \"Number of tasks queued\");", "originalCommit": "d1d75ec4b1a940ea2321c9073b6bb7ffbaf1e4c6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c572ff6697bf6f5cb8366e257ad1c07f3f3d0055", "chunk": "diff --git a/infrastructure/async/src/main/java/tech/pegasys/teku/infrastructure/async/ThrottlingTaskQueue.java b/infrastructure/async/src/main/java/tech/pegasys/teku/infrastructure/async/ThrottlingTaskQueue.java\nindex 55c15f08d8..df03275d8c 100644\n--- a/infrastructure/async/src/main/java/tech/pegasys/teku/infrastructure/async/ThrottlingTaskQueue.java\n+++ b/infrastructure/async/src/main/java/tech/pegasys/teku/infrastructure/async/ThrottlingTaskQueue.java\n\n@@ -17,54 +17,45 @@ import java.util.Queue;\n import java.util.concurrent.ConcurrentLinkedQueue;\n import java.util.function.Supplier;\n import org.hyperledger.besu.plugin.services.MetricsSystem;\n-import tech.pegasys.teku.infrastructure.metrics.SettableGauge;\n import tech.pegasys.teku.infrastructure.metrics.TekuMetricCategory;\n \n public class ThrottlingTaskQueue {\n-  private final int maximumConcurrentRequests;\n-  private volatile Queue<Runnable> queuedRequests = new ConcurrentLinkedQueue<>();\n-  private int inflightRequestCount = 0;\n-\n-  private final SettableGauge queueSizeGauge;\n+  private final int maximumConcurrentTasks;\n+  private final Queue<Runnable> queuedTasks = new ConcurrentLinkedQueue<>();\n+  private int inflightTaskCount = 0;\n \n   public ThrottlingTaskQueue(\n-      final int maximumConcurrentRequests,\n+      final int maximumConcurrentTasks,\n       final MetricsSystem metricsSystem,\n       final TekuMetricCategory metricCategory,\n-      final String metricsPrefix) {\n-    this.maximumConcurrentRequests = maximumConcurrentRequests;\n+      final String metricName) {\n+    this.maximumConcurrentTasks = maximumConcurrentTasks;\n \n-    this.queueSizeGauge =\n-        SettableGauge.create(\n-            metricsSystem,\n-            metricCategory,\n-            metricsPrefix + \"_tasks_queued\",\n-            \"Number of tasks queued\");\n+    metricsSystem.createGauge(\n+        metricCategory, metricName, \"Number of tasks queued\", queuedTasks::size);\n   }\n \n-  public <T> SafeFuture<T> queueRequest(final Supplier<SafeFuture<T>> request) {\n+  public <T> SafeFuture<T> queueTask(final Supplier<SafeFuture<T>> request) {\n     final SafeFuture<T> future = new SafeFuture<>();\n-    queuedRequests.add(\n+    queuedTasks.add(\n         () -> {\n           final SafeFuture<T> requestFuture = request.get();\n           requestFuture.propagateTo(future);\n-          requestFuture.always(this::requestComplete);\n+          requestFuture.always(this::taskComplete);\n         });\n-    queueSizeGauge.set(queuedRequests.size());\n-    processQueuedRequests();\n+    processQueuedTasks();\n     return future;\n   }\n \n-  private synchronized void requestComplete() {\n-    inflightRequestCount--;\n-    processQueuedRequests();\n+  private synchronized void taskComplete() {\n+    inflightTaskCount--;\n+    processQueuedTasks();\n   }\n \n-  private synchronized void processQueuedRequests() {\n-    while (inflightRequestCount < maximumConcurrentRequests && !queuedRequests.isEmpty()) {\n-      inflightRequestCount++;\n-      queuedRequests.remove().run();\n+  private synchronized void processQueuedTasks() {\n+    while (inflightTaskCount < maximumConcurrentTasks && !queuedTasks.isEmpty()) {\n+      inflightTaskCount++;\n+      queuedTasks.remove().run();\n     }\n-    queueSizeGauge.set(queuedRequests.size());\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgwNTk2MA==", "url": "https://github.com/ConsenSys/teku/pull/3381#discussion_r539805960", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        maximumConcurrentRequests, metricsSystem, TekuMetricCategory.BEACON, \"eth1Queue\");\n          \n          \n            \n                        maximumConcurrentRequests, metricsSystem, TekuMetricCategory.BEACON, \"eth1_request_queue_size\");", "author": "ajsutton", "createdAt": "2020-12-10T02:54:54Z", "path": "pow/src/main/java/tech/pegasys/teku/pow/ThrottlingEth1Provider.java", "diffHunk": "@@ -16,94 +16,75 @@\n import java.math.BigInteger;\n import java.time.Duration;\n import java.util.Optional;\n-import java.util.Queue;\n-import java.util.concurrent.ConcurrentLinkedQueue;\n-import java.util.function.Supplier;\n+import org.hyperledger.besu.plugin.services.MetricsSystem;\n import org.web3j.protocol.core.methods.response.EthBlock.Block;\n import org.web3j.protocol.core.methods.response.EthCall;\n import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.infrastructure.async.ThrottlingTaskQueue;\n+import tech.pegasys.teku.infrastructure.metrics.TekuMetricCategory;\n import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n \n public class ThrottlingEth1Provider implements Eth1Provider {\n   private final Eth1Provider delegate;\n-  private final int maximumConcurrentRequests;\n-  private final Queue<Runnable> queuedRequests = new ConcurrentLinkedQueue<>();\n-  private int inflightRequestCount = 0;\n+  private final ThrottlingTaskQueue taskQueue;\n \n-  public ThrottlingEth1Provider(final Eth1Provider delegate, final int maximumConcurrentRequests) {\n+  public ThrottlingEth1Provider(\n+      final Eth1Provider delegate,\n+      final int maximumConcurrentRequests,\n+      final MetricsSystem metricsSystem) {\n     this.delegate = delegate;\n-    this.maximumConcurrentRequests = maximumConcurrentRequests;\n+    taskQueue =\n+        new ThrottlingTaskQueue(\n+            maximumConcurrentRequests, metricsSystem, TekuMetricCategory.BEACON, \"eth1Queue\");", "originalCommit": "d1d75ec4b1a940ea2321c9073b6bb7ffbaf1e4c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgyOTE3Mg==", "url": "https://github.com/ConsenSys/teku/pull/3381#discussion_r539829172", "bodyText": "it'll get queue_size from the task queue, just need the prefix... i'll set it to eth1_request", "author": "rolfyone", "createdAt": "2020-12-10T04:05:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgwNTk2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgzMTcxMA==", "url": "https://github.com/ConsenSys/teku/pull/3381#discussion_r539831710", "bodyText": "I think I'd probably just put the whole metric name here rather than appending to what's given.  Makes searching for the metric a lot easier.", "author": "ajsutton", "createdAt": "2020-12-10T04:13:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgwNTk2MA=="}], "type": "inlineReview", "revised_code": {"commit": "c572ff6697bf6f5cb8366e257ad1c07f3f3d0055", "chunk": "diff --git a/pow/src/main/java/tech/pegasys/teku/pow/ThrottlingEth1Provider.java b/pow/src/main/java/tech/pegasys/teku/pow/ThrottlingEth1Provider.java\nindex 9fe1a8bc71..74db1c545a 100644\n--- a/pow/src/main/java/tech/pegasys/teku/pow/ThrottlingEth1Provider.java\n+++ b/pow/src/main/java/tech/pegasys/teku/pow/ThrottlingEth1Provider.java\n\n@@ -35,56 +35,59 @@ public class ThrottlingEth1Provider implements Eth1Provider {\n     this.delegate = delegate;\n     taskQueue =\n         new ThrottlingTaskQueue(\n-            maximumConcurrentRequests, metricsSystem, TekuMetricCategory.BEACON, \"eth1Queue\");\n+            maximumConcurrentRequests,\n+            metricsSystem,\n+            TekuMetricCategory.BEACON,\n+            \"eth1_request_queue_size\");\n   }\n \n   @Override\n   public SafeFuture<Optional<Block>> getEth1Block(final UInt64 blockNumber) {\n-    return taskQueue.queueRequest(() -> delegate.getEth1Block(blockNumber));\n+    return taskQueue.queueTask(() -> delegate.getEth1Block(blockNumber));\n   }\n \n   @Override\n   public SafeFuture<Optional<Block>> getEth1BlockWithRetry(\n       final UInt64 blockNumber, final Duration retryDelay, final int maxRetries) {\n-    return taskQueue.queueRequest(\n+    return taskQueue.queueTask(\n         () -> delegate.getEth1BlockWithRetry(blockNumber, retryDelay, maxRetries));\n   }\n \n   @Override\n   public SafeFuture<Block> getGuaranteedEth1Block(final String blockHash) {\n-    return taskQueue.queueRequest(() -> delegate.getGuaranteedEth1Block(blockHash));\n+    return taskQueue.queueTask(() -> delegate.getGuaranteedEth1Block(blockHash));\n   }\n \n   @Override\n   public SafeFuture<Block> getGuaranteedEth1Block(final UInt64 blockNumber) {\n-    return taskQueue.queueRequest(() -> delegate.getGuaranteedEth1Block(blockNumber));\n+    return taskQueue.queueTask(() -> delegate.getGuaranteedEth1Block(blockNumber));\n   }\n \n   @Override\n   public SafeFuture<Optional<Block>> getEth1Block(final String blockHash) {\n-    return taskQueue.queueRequest(() -> delegate.getEth1Block(blockHash));\n+    return taskQueue.queueTask(() -> delegate.getEth1Block(blockHash));\n   }\n \n   @Override\n   public SafeFuture<Optional<Block>> getEth1BlockWithRetry(\n       final String blockHash, final Duration retryDelay, final int maxRetries) {\n-    return taskQueue.queueRequest(\n+    return taskQueue.queueTask(\n         () -> delegate.getEth1BlockWithRetry(blockHash, retryDelay, maxRetries));\n   }\n \n   @Override\n   public SafeFuture<Block> getLatestEth1Block() {\n-    return taskQueue.queueRequest(delegate::getLatestEth1Block);\n+    return taskQueue.queueTask(delegate::getLatestEth1Block);\n   }\n \n   @Override\n   public SafeFuture<EthCall> ethCall(\n       final String from, final String to, final String data, final UInt64 blockNumber) {\n-    return taskQueue.queueRequest(() -> delegate.ethCall(from, to, data, blockNumber));\n+    return taskQueue.queueTask(() -> delegate.ethCall(from, to, data, blockNumber));\n   }\n \n   @Override\n   public SafeFuture<BigInteger> getChainId() {\n-    return taskQueue.queueRequest(delegate::getChainId);\n+    return taskQueue.queueTask(delegate::getChainId);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgwNjE4Ng==", "url": "https://github.com/ConsenSys/teku/pull/3381#discussion_r539806186", "bodyText": "nit: Tasks aren't necessarily requests so this should probably just be queue or queueTask?", "author": "ajsutton", "createdAt": "2020-12-10T02:55:31Z", "path": "infrastructure/async/src/main/java/tech/pegasys/teku/infrastructure/async/ThrottlingTaskQueue.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.infrastructure.async;\n+\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.function.Supplier;\n+import org.hyperledger.besu.plugin.services.MetricsSystem;\n+import tech.pegasys.teku.infrastructure.metrics.SettableGauge;\n+import tech.pegasys.teku.infrastructure.metrics.TekuMetricCategory;\n+\n+public class ThrottlingTaskQueue {\n+  private final int maximumConcurrentRequests;\n+  private volatile Queue<Runnable> queuedRequests = new ConcurrentLinkedQueue<>();\n+  private int inflightRequestCount = 0;\n+\n+  private final SettableGauge queueSizeGauge;\n+\n+  public ThrottlingTaskQueue(\n+      final int maximumConcurrentRequests,\n+      final MetricsSystem metricsSystem,\n+      final TekuMetricCategory metricCategory,\n+      final String metricsPrefix) {\n+    this.maximumConcurrentRequests = maximumConcurrentRequests;\n+\n+    this.queueSizeGauge =\n+        SettableGauge.create(\n+            metricsSystem,\n+            metricCategory,\n+            metricsPrefix + \"_tasks_queued\",\n+            \"Number of tasks queued\");\n+  }\n+\n+  public <T> SafeFuture<T> queueRequest(final Supplier<SafeFuture<T>> request) {", "originalCommit": "d1d75ec4b1a940ea2321c9073b6bb7ffbaf1e4c6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c572ff6697bf6f5cb8366e257ad1c07f3f3d0055", "chunk": "diff --git a/infrastructure/async/src/main/java/tech/pegasys/teku/infrastructure/async/ThrottlingTaskQueue.java b/infrastructure/async/src/main/java/tech/pegasys/teku/infrastructure/async/ThrottlingTaskQueue.java\nindex 55c15f08d8..df03275d8c 100644\n--- a/infrastructure/async/src/main/java/tech/pegasys/teku/infrastructure/async/ThrottlingTaskQueue.java\n+++ b/infrastructure/async/src/main/java/tech/pegasys/teku/infrastructure/async/ThrottlingTaskQueue.java\n\n@@ -17,54 +17,45 @@ import java.util.Queue;\n import java.util.concurrent.ConcurrentLinkedQueue;\n import java.util.function.Supplier;\n import org.hyperledger.besu.plugin.services.MetricsSystem;\n-import tech.pegasys.teku.infrastructure.metrics.SettableGauge;\n import tech.pegasys.teku.infrastructure.metrics.TekuMetricCategory;\n \n public class ThrottlingTaskQueue {\n-  private final int maximumConcurrentRequests;\n-  private volatile Queue<Runnable> queuedRequests = new ConcurrentLinkedQueue<>();\n-  private int inflightRequestCount = 0;\n-\n-  private final SettableGauge queueSizeGauge;\n+  private final int maximumConcurrentTasks;\n+  private final Queue<Runnable> queuedTasks = new ConcurrentLinkedQueue<>();\n+  private int inflightTaskCount = 0;\n \n   public ThrottlingTaskQueue(\n-      final int maximumConcurrentRequests,\n+      final int maximumConcurrentTasks,\n       final MetricsSystem metricsSystem,\n       final TekuMetricCategory metricCategory,\n-      final String metricsPrefix) {\n-    this.maximumConcurrentRequests = maximumConcurrentRequests;\n+      final String metricName) {\n+    this.maximumConcurrentTasks = maximumConcurrentTasks;\n \n-    this.queueSizeGauge =\n-        SettableGauge.create(\n-            metricsSystem,\n-            metricCategory,\n-            metricsPrefix + \"_tasks_queued\",\n-            \"Number of tasks queued\");\n+    metricsSystem.createGauge(\n+        metricCategory, metricName, \"Number of tasks queued\", queuedTasks::size);\n   }\n \n-  public <T> SafeFuture<T> queueRequest(final Supplier<SafeFuture<T>> request) {\n+  public <T> SafeFuture<T> queueTask(final Supplier<SafeFuture<T>> request) {\n     final SafeFuture<T> future = new SafeFuture<>();\n-    queuedRequests.add(\n+    queuedTasks.add(\n         () -> {\n           final SafeFuture<T> requestFuture = request.get();\n           requestFuture.propagateTo(future);\n-          requestFuture.always(this::requestComplete);\n+          requestFuture.always(this::taskComplete);\n         });\n-    queueSizeGauge.set(queuedRequests.size());\n-    processQueuedRequests();\n+    processQueuedTasks();\n     return future;\n   }\n \n-  private synchronized void requestComplete() {\n-    inflightRequestCount--;\n-    processQueuedRequests();\n+  private synchronized void taskComplete() {\n+    inflightTaskCount--;\n+    processQueuedTasks();\n   }\n \n-  private synchronized void processQueuedRequests() {\n-    while (inflightRequestCount < maximumConcurrentRequests && !queuedRequests.isEmpty()) {\n-      inflightRequestCount++;\n-      queuedRequests.remove().run();\n+  private synchronized void processQueuedTasks() {\n+    while (inflightTaskCount < maximumConcurrentTasks && !queuedTasks.isEmpty()) {\n+      inflightTaskCount++;\n+      queuedTasks.remove().run();\n     }\n-    queueSizeGauge.set(queuedRequests.size());\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgwNzA3Ng==", "url": "https://github.com/ConsenSys/teku/pull/3381#discussion_r539807076", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"ExternalSigner\");\n          \n          \n            \n                        \"external_signer_request_queue_size\");", "author": "ajsutton", "createdAt": "2020-12-10T02:58:02Z", "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/ValidatorLoader.java", "diffHunk": "@@ -104,6 +114,12 @@ public static ValidatorLoader create(\n     if (config.getValidatorExternalSignerPublicKeys().isEmpty()) {\n       return Collections.emptyMap();\n     }\n+    externalSignerTaskQueue =\n+        new ThrottlingTaskQueue(\n+            config.getValidatorExternalSignerConcurrentRequestLimit(),\n+            metricsSystem,\n+            TekuMetricCategory.VALIDATOR,\n+            \"ExternalSigner\");", "originalCommit": "d1d75ec4b1a940ea2321c9073b6bb7ffbaf1e4c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgzMDI0MA==", "url": "https://github.com/ConsenSys/teku/pull/3381#discussion_r539830240", "bodyText": "same theory as above, i'll rename to external_signer as the prefix", "author": "rolfyone", "createdAt": "2020-12-10T04:08:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgwNzA3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "c572ff6697bf6f5cb8366e257ad1c07f3f3d0055", "chunk": "diff --git a/validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/ValidatorLoader.java b/validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/ValidatorLoader.java\nindex 520ce78c20..526b38cb70 100644\n--- a/validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/ValidatorLoader.java\n+++ b/validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/ValidatorLoader.java\n\n@@ -114,12 +113,12 @@ public class ValidatorLoader {\n     if (config.getValidatorExternalSignerPublicKeys().isEmpty()) {\n       return Collections.emptyMap();\n     }\n-    externalSignerTaskQueue =\n+    final ThrottlingTaskQueue externalSignerTaskQueue =\n         new ThrottlingTaskQueue(\n             config.getValidatorExternalSignerConcurrentRequestLimit(),\n             metricsSystem,\n             TekuMetricCategory.VALIDATOR,\n-            \"ExternalSigner\");\n+            \"external_signer_request_queue_size\");\n \n     setupExternalSignerStatusLogging(config, externalSignerHttpClientFactory);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgxMDE3NA==", "url": "https://github.com/ConsenSys/teku/pull/3381#discussion_r539810174", "bodyText": "This doesn't seem to need to be a field.", "author": "ajsutton", "createdAt": "2020-12-10T03:07:03Z", "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/ValidatorLoader.java", "diffHunk": "@@ -104,6 +114,12 @@ public static ValidatorLoader create(\n     if (config.getValidatorExternalSignerPublicKeys().isEmpty()) {\n       return Collections.emptyMap();\n     }\n+    externalSignerTaskQueue =", "originalCommit": "d1d75ec4b1a940ea2321c9073b6bb7ffbaf1e4c6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c572ff6697bf6f5cb8366e257ad1c07f3f3d0055", "chunk": "diff --git a/validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/ValidatorLoader.java b/validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/ValidatorLoader.java\nindex 520ce78c20..526b38cb70 100644\n--- a/validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/ValidatorLoader.java\n+++ b/validator/client/src/main/java/tech/pegasys/teku/validator/client/loader/ValidatorLoader.java\n\n@@ -114,12 +113,12 @@ public class ValidatorLoader {\n     if (config.getValidatorExternalSignerPublicKeys().isEmpty()) {\n       return Collections.emptyMap();\n     }\n-    externalSignerTaskQueue =\n+    final ThrottlingTaskQueue externalSignerTaskQueue =\n         new ThrottlingTaskQueue(\n             config.getValidatorExternalSignerConcurrentRequestLimit(),\n             metricsSystem,\n             TekuMetricCategory.VALIDATOR,\n-            \"ExternalSigner\");\n+            \"external_signer_request_queue_size\");\n \n     setupExternalSignerStatusLogging(config, externalSignerHttpClientFactory);\n \n"}}, {"oid": "c572ff6697bf6f5cb8366e257ad1c07f3f3d0055", "url": "https://github.com/ConsenSys/teku/commit/c572ff6697bf6f5cb8366e257ad1c07f3f3d0055", "message": "review feedback\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-12-10T04:36:32Z", "type": "commit"}]}