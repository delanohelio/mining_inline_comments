{"pr_number": 2751, "pr_title": "Passing additional metadata to external signers", "pr_createdAt": "2020-09-08T07:44:13Z", "pr_url": "https://github.com/ConsenSys/teku/pull/2751", "timeline": [{"oid": "cbfcac4bd2216db6db1e9a3148da660044691cd4", "url": "https://github.com/ConsenSys/teku/commit/cbfcac4bd2216db6db1e9a3148da660044691cd4", "message": "Passing additional metadata to external signer\n\n -- so that external signer can apply slash protection rules\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-09-08T07:41:45Z", "type": "commit"}, {"oid": "a8ffba31b142c7b175883d4c340ab994ebe38345", "url": "https://github.com/ConsenSys/teku/commit/a8ffba31b142c7b175883d4c340ab994ebe38345", "message": "Merge remote-tracking branch 'upstream/master' into external_signer_with_slash_protection\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-09-08T07:44:37Z", "type": "commit"}, {"oid": "4330f4c069d3cc44ed9ecfeb325ccd9cdcf6593a", "url": "https://github.com/ConsenSys/teku/commit/4330f4c069d3cc44ed9ecfeb325ccd9cdcf6593a", "message": "Fixing LocalMessageSignerServiceTest\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-09-08T23:30:02Z", "type": "commit"}, {"oid": "2a858c5f3b80f41780e5161cd9c56f453183d18c", "url": "https://github.com/ConsenSys/teku/commit/2a858c5f3b80f41780e5161cd9c56f453183d18c", "message": "Fixing SignerTest\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-09-09T00:39:30Z", "type": "commit"}, {"oid": "996a194adf2fd8a1ffffe395ec5bd757fe80c0c6", "url": "https://github.com/ConsenSys/teku/commit/996a194adf2fd8a1ffffe395ec5bd757fe80c0c6", "message": "Merge remote-tracking branch 'upstream/master' into external_signer_with_slash_protection\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-09-09T00:39:43Z", "type": "commit"}, {"oid": "ec92b2168ac04edc9fc37ce3a3beee36e25ef699", "url": "https://github.com/ConsenSys/teku/commit/ec92b2168ac04edc9fc37ce3a3beee36e25ef699", "message": "Merge remote-tracking branch 'upstream/master' into external_signer_with_slash_protection\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-09-09T01:48:48Z", "type": "commit"}, {"oid": "bb7c875789fd83a378df221f2a2742156cf6b6f8", "url": "https://github.com/ConsenSys/teku/commit/bb7c875789fd83a378df221f2a2742156cf6b6f8", "message": "MessageSignerService sign method signatures to take additionalProperties\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-09-09T04:21:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMyOTM1Ng==", "url": "https://github.com/ConsenSys/teku/pull/2751#discussion_r485329356", "bodyText": "I'm not sure this is the right approach.  We shouldn't need to create a map of properties when we already have the required data in a suitable format.  I'd suggest that the MessageSignerService interface is removed and just move everything up to the Signer interface which has the required data and is where the built-in slashing protection hooks in.\nMay need to extract a helper class to compute the signing root for data rather than having to duplicate that logic but that's doable.", "author": "ajsutton", "createdAt": "2020-09-09T04:25:23Z", "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/signatures/LocalMessageSignerService.java", "diffHunk": "@@ -43,22 +43,26 @@ public LocalMessageSignerService(final BLSKeyPair keypair, final AsyncRunner asy\n   }\n \n   @Override\n-  public SafeFuture<BLSSignature> signAggregationSlot(final Bytes signingRoot) {\n+  public SafeFuture<BLSSignature> signAggregationSlot(\n+      final Bytes signingRoot, final Map<String, Object> additionalProperties) {", "originalCommit": "bb7c875789fd83a378df221f2a2742156cf6b6f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMyOTgzOA==", "url": "https://github.com/ConsenSys/teku/pull/2751#discussion_r485329838", "bodyText": "\ud83d\udc4d", "author": "usmansaleem", "createdAt": "2020-09-09T04:27:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMyOTM1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMzMzEzOQ==", "url": "https://github.com/ConsenSys/teku/pull/2751#discussion_r485333139", "bodyText": "The primary purpose for this map was to serialize it as json to external signing service. If we delete MessageSignerService, that would mean LocalSigner and ExternalSigner extends Signer, is that correct assumption?", "author": "usmansaleem", "createdAt": "2020-09-09T04:40:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMyOTM1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM0NzcxMA==", "url": "https://github.com/ConsenSys/teku/pull/2751#discussion_r485347710", "bodyText": "Yep.", "author": "ajsutton", "createdAt": "2020-09-09T05:31:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMyOTM1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM0NzgzNA==", "url": "https://github.com/ConsenSys/teku/pull/2751#discussion_r485347834", "bodyText": "Well, they'd implement Signer since its an interface but same idea. :)", "author": "ajsutton", "createdAt": "2020-09-09T05:31:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMyOTM1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA0NjQwNA==", "url": "https://github.com/ConsenSys/teku/pull/2751#discussion_r486046404", "bodyText": "MessageSignerService has been removed. Refactored signingRoot calculation in a util class. Signer is now implemented directly by LocalSigner and ExternalSigner. Do we still want to wrap externalSigner in SlashingProtectedSigner (in ValidatorLoader)?", "author": "usmansaleem", "createdAt": "2020-09-10T03:50:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMyOTM1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA0OTE4Mw==", "url": "https://github.com/ConsenSys/teku/pull/2751#discussion_r486049183", "bodyText": "Yes definitely by default, but (possibly in a follow up PR) it would be good to have an option to disable the built-in slashing protection for external signers (it should not be possible to disable it for local validators).", "author": "ajsutton", "createdAt": "2020-09-10T04:02:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMyOTM1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA4NTM5MQ==", "url": "https://github.com/ConsenSys/teku/pull/2751#discussion_r486085391", "bodyText": "\ud83d\udc4d  Thank you, that make sense.", "author": "usmansaleem", "createdAt": "2020-09-10T06:04:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMyOTM1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "1084cd018fc59ea580e6ee67e63b89554988b2f7", "chunk": "diff --git a/ethereum/core/src/main/java/tech/pegasys/teku/core/signatures/LocalMessageSignerService.java b/ethereum/core/src/main/java/tech/pegasys/teku/core/signatures/LocalMessageSignerService.java\ndeleted file mode 100644\nindex 3e2051825b..0000000000\n--- a/ethereum/core/src/main/java/tech/pegasys/teku/core/signatures/LocalMessageSignerService.java\n+++ /dev/null\n\n@@ -1,78 +0,0 @@\n-/*\n- * Copyright 2019 ConsenSys AG.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n- */\n-\n-package tech.pegasys.teku.core.signatures;\n-\n-import java.util.Map;\n-import org.apache.tuweni.bytes.Bytes;\n-import tech.pegasys.teku.bls.BLS;\n-import tech.pegasys.teku.bls.BLSKeyPair;\n-import tech.pegasys.teku.bls.BLSSignature;\n-import tech.pegasys.teku.infrastructure.async.AsyncRunner;\n-import tech.pegasys.teku.infrastructure.async.SafeFuture;\n-\n-public class LocalMessageSignerService implements MessageSignerService {\n-  private final BLSKeyPair keypair;\n-  private final AsyncRunner asyncRunner;\n-\n-  public LocalMessageSignerService(final BLSKeyPair keypair, final AsyncRunner asyncRunner) {\n-    this.keypair = keypair;\n-    this.asyncRunner = asyncRunner;\n-  }\n-\n-  @Override\n-  public SafeFuture<BLSSignature> signBlock(\n-      final Bytes signingRoot, final Map<String, Object> additionalProperties) {\n-    return sign(signingRoot);\n-  }\n-\n-  @Override\n-  public SafeFuture<BLSSignature> signAttestation(\n-      final Bytes signingRoot, final Map<String, Object> additionalProperties) {\n-    return sign(signingRoot);\n-  }\n-\n-  @Override\n-  public SafeFuture<BLSSignature> signAggregationSlot(\n-      final Bytes signingRoot, final Map<String, Object> additionalProperties) {\n-    return sign(signingRoot);\n-  }\n-\n-  @Override\n-  public SafeFuture<BLSSignature> signAggregateAndProof(\n-      final Bytes signingRoot, final Map<String, Object> additionalProperties) {\n-    return sign(signingRoot);\n-  }\n-\n-  @Override\n-  public SafeFuture<BLSSignature> signRandaoReveal(\n-      final Bytes signingRoot, final Map<String, Object> additionalProperties) {\n-    return sign(signingRoot);\n-  }\n-\n-  @Override\n-  public SafeFuture<BLSSignature> signVoluntaryExit(\n-      final Bytes signingRoot, final Map<String, Object> additionalProperties) {\n-    return sign(signingRoot);\n-  }\n-\n-  @Override\n-  public boolean isLocal() {\n-    return true;\n-  }\n-\n-  private SafeFuture<BLSSignature> sign(final Bytes signing_root) {\n-    return asyncRunner.runAsync(\n-        () -> SafeFuture.completedFuture(BLS.sign(keypair.getSecretKey(), signing_root)));\n-  }\n-}\n"}}, {"oid": "bf7a48b8fd68077d040554be1e880f088a2aeab4", "url": "https://github.com/ConsenSys/teku/commit/bf7a48b8fd68077d040554be1e880f088a2aeab4", "message": "Fixing LocalMessageSignerServiceTest\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-09-09T04:25:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM0ODM3Nw==", "url": "https://github.com/ConsenSys/teku/pull/2751#discussion_r485348377", "bodyText": "This and the below sign methods don't require any additional parameters for the signing protection it's only the attestation and block", "author": "jframe", "createdAt": "2020-09-09T05:33:45Z", "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/signatures/LocalMessageSignerService.java", "diffHunk": "@@ -30,32 +31,38 @@ public LocalMessageSignerService(final BLSKeyPair keypair, final AsyncRunner asy\n   }\n \n   @Override\n-  public SafeFuture<BLSSignature> signBlock(final Bytes signingRoot) {\n+  public SafeFuture<BLSSignature> signBlock(\n+      final Bytes signingRoot, final Map<String, Object> additionalProperties) {\n     return sign(signingRoot);\n   }\n \n   @Override\n-  public SafeFuture<BLSSignature> signAttestation(final Bytes signingRoot) {\n+  public SafeFuture<BLSSignature> signAttestation(\n+      final Bytes signingRoot, final Map<String, Object> additionalProperties) {\n     return sign(signingRoot);\n   }\n \n   @Override\n-  public SafeFuture<BLSSignature> signAggregationSlot(final Bytes signingRoot) {\n+  public SafeFuture<BLSSignature> signAggregationSlot(\n+      final Bytes signingRoot, final Map<String, Object> additionalProperties) {\n     return sign(signingRoot);\n   }\n \n   @Override\n-  public SafeFuture<BLSSignature> signAggregateAndProof(final Bytes signingRoot) {\n+  public SafeFuture<BLSSignature> signAggregateAndProof(", "originalCommit": "bf7a48b8fd68077d040554be1e880f088a2aeab4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAzOTM5OQ==", "url": "https://github.com/ConsenSys/teku/pull/2751#discussion_r486039399", "bodyText": "fixed in ExternalSigner.", "author": "usmansaleem", "createdAt": "2020-09-10T03:22:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM0ODM3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "1084cd018fc59ea580e6ee67e63b89554988b2f7", "chunk": "diff --git a/ethereum/core/src/main/java/tech/pegasys/teku/core/signatures/LocalMessageSignerService.java b/ethereum/core/src/main/java/tech/pegasys/teku/core/signatures/LocalMessageSignerService.java\ndeleted file mode 100644\nindex 3e2051825b..0000000000\n--- a/ethereum/core/src/main/java/tech/pegasys/teku/core/signatures/LocalMessageSignerService.java\n+++ /dev/null\n\n@@ -1,78 +0,0 @@\n-/*\n- * Copyright 2019 ConsenSys AG.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n- */\n-\n-package tech.pegasys.teku.core.signatures;\n-\n-import java.util.Map;\n-import org.apache.tuweni.bytes.Bytes;\n-import tech.pegasys.teku.bls.BLS;\n-import tech.pegasys.teku.bls.BLSKeyPair;\n-import tech.pegasys.teku.bls.BLSSignature;\n-import tech.pegasys.teku.infrastructure.async.AsyncRunner;\n-import tech.pegasys.teku.infrastructure.async.SafeFuture;\n-\n-public class LocalMessageSignerService implements MessageSignerService {\n-  private final BLSKeyPair keypair;\n-  private final AsyncRunner asyncRunner;\n-\n-  public LocalMessageSignerService(final BLSKeyPair keypair, final AsyncRunner asyncRunner) {\n-    this.keypair = keypair;\n-    this.asyncRunner = asyncRunner;\n-  }\n-\n-  @Override\n-  public SafeFuture<BLSSignature> signBlock(\n-      final Bytes signingRoot, final Map<String, Object> additionalProperties) {\n-    return sign(signingRoot);\n-  }\n-\n-  @Override\n-  public SafeFuture<BLSSignature> signAttestation(\n-      final Bytes signingRoot, final Map<String, Object> additionalProperties) {\n-    return sign(signingRoot);\n-  }\n-\n-  @Override\n-  public SafeFuture<BLSSignature> signAggregationSlot(\n-      final Bytes signingRoot, final Map<String, Object> additionalProperties) {\n-    return sign(signingRoot);\n-  }\n-\n-  @Override\n-  public SafeFuture<BLSSignature> signAggregateAndProof(\n-      final Bytes signingRoot, final Map<String, Object> additionalProperties) {\n-    return sign(signingRoot);\n-  }\n-\n-  @Override\n-  public SafeFuture<BLSSignature> signRandaoReveal(\n-      final Bytes signingRoot, final Map<String, Object> additionalProperties) {\n-    return sign(signingRoot);\n-  }\n-\n-  @Override\n-  public SafeFuture<BLSSignature> signVoluntaryExit(\n-      final Bytes signingRoot, final Map<String, Object> additionalProperties) {\n-    return sign(signingRoot);\n-  }\n-\n-  @Override\n-  public boolean isLocal() {\n-    return true;\n-  }\n-\n-  private SafeFuture<BLSSignature> sign(final Bytes signing_root) {\n-    return asyncRunner.runAsync(\n-        () -> SafeFuture.completedFuture(BLS.sign(keypair.getSecretKey(), signing_root)));\n-  }\n-}\n"}}, {"oid": "939e0d8e8abbeda4b83ef6eb8a2821f6b9fa44f1", "url": "https://github.com/ConsenSys/teku/commit/939e0d8e8abbeda4b83ef6eb8a2821f6b9fa44f1", "message": "Merge remote-tracking branch 'upstream/master' into external_signer_with_slash_protection\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-09-09T09:39:37Z", "type": "commit"}, {"oid": "1084cd018fc59ea580e6ee67e63b89554988b2f7", "url": "https://github.com/ConsenSys/teku/commit/1084cd018fc59ea580e6ee67e63b89554988b2f7", "message": "Review suggestion - remove MessageSignerService\n\n -- LocalSigner and ExternalSigner implements Signer interface\n-- Update references and test cases\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-09-10T03:19:48Z", "type": "commit"}, {"oid": "057bde7f5df928259c443343098d03d9b4819572", "url": "https://github.com/ConsenSys/teku/commit/057bde7f5df928259c443343098d03d9b4819572", "message": "Merge remote-tracking branch 'upstream/master' into external_signer_with_slash_protection\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-09-10T03:20:01Z", "type": "commit"}, {"oid": "351f772158a0fd66306a071cf790cc1c7a2c04e3", "url": "https://github.com/ConsenSys/teku/commit/351f772158a0fd66306a071cf790cc1c7a2c04e3", "message": "minor refactoring signingrequestbody\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-09-10T03:31:46Z", "type": "commit"}, {"oid": "bb2092bdd9c76546c6ba47711e2287f214e8bdab", "url": "https://github.com/ConsenSys/teku/commit/bb2092bdd9c76546c6ba47711e2287f214e8bdab", "message": "cleaning SigningRequestBody\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-09-10T03:45:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1MDU4Ng==", "url": "https://github.com/ConsenSys/teku/pull/2751#discussion_r486050586", "bodyText": "This name seems odd, shouldSignBlock?", "author": "jframe", "createdAt": "2020-09-10T04:08:20Z", "path": "ethereum/core/src/test/java/tech/pegasys/teku/core/signatures/LocalSignerTest.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.core.signatures;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.bls.BLSKeyPair;\n+import tech.pegasys.teku.bls.BLSSignature;\n+import tech.pegasys.teku.datastructures.blocks.BeaconBlock;\n+import tech.pegasys.teku.datastructures.operations.AggregateAndProof;\n+import tech.pegasys.teku.datastructures.operations.AttestationData;\n+import tech.pegasys.teku.datastructures.operations.VoluntaryExit;\n+import tech.pegasys.teku.datastructures.state.ForkInfo;\n+import tech.pegasys.teku.datastructures.util.DataStructureUtil;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.infrastructure.async.StubAsyncRunner;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+\n+class LocalSignerTest {\n+  private final DataStructureUtil dataStructureUtil = new DataStructureUtil();\n+  private final ForkInfo fork = dataStructureUtil.randomForkInfo();\n+\n+  private static final BLSKeyPair KEYPAIR = BLSKeyPair.random(1234);\n+  private final StubAsyncRunner asyncRunner = new StubAsyncRunner();\n+\n+  private final LocalSigner signer = new LocalSigner(KEYPAIR, asyncRunner);\n+\n+  @Test\n+  public void shouldSignBlock1() {", "originalCommit": "bb2092bdd9c76546c6ba47711e2287f214e8bdab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA4NTU0Mw==", "url": "https://github.com/ConsenSys/teku/pull/2751#discussion_r486085543", "bodyText": "copied over from now deleted \"SignerTest\". Let me fix it.", "author": "usmansaleem", "createdAt": "2020-09-10T06:04:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1MDU4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "c737ce56bbb28ccd924f346ec507e97869dea408", "chunk": "diff --git a/ethereum/core/src/test/java/tech/pegasys/teku/core/signatures/LocalSignerTest.java b/ethereum/core/src/test/java/tech/pegasys/teku/core/signatures/LocalSignerTest.java\nindex bc37ae8ee2..23e94175e1 100644\n--- a/ethereum/core/src/test/java/tech/pegasys/teku/core/signatures/LocalSignerTest.java\n+++ b/ethereum/core/src/test/java/tech/pegasys/teku/core/signatures/LocalSignerTest.java\n\n@@ -39,7 +39,7 @@ class LocalSignerTest {\n   private final LocalSigner signer = new LocalSigner(KEYPAIR, asyncRunner);\n \n   @Test\n-  public void shouldSignBlock1() {\n+  public void shouldSignBlock() {\n     final BeaconBlock block = dataStructureUtil.randomBeaconBlock(10);\n     final BLSSignature expectedSignature =\n         BLSSignature.fromBytesCompressed(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1MTAyMA==", "url": "https://github.com/ConsenSys/teku/pull/2751#discussion_r486051020", "bodyText": "Is this needed? It looks almost the same as the LocalSigner.", "author": "jframe", "createdAt": "2020-09-10T04:10:12Z", "path": "ethereum/core/src/testFixtures/java/tech/pegasys/teku/core/signatures/TestSigner.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.core.signatures;\n+\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignAggregateAndProof;\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignAggregationSlot;\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignAttestationData;\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignBlock;\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignVoluntaryExit;\n+\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.teku.bls.BLS;\n+import tech.pegasys.teku.bls.BLSKeyPair;\n+import tech.pegasys.teku.bls.BLSSignature;\n+import tech.pegasys.teku.datastructures.blocks.BeaconBlock;\n+import tech.pegasys.teku.datastructures.operations.AggregateAndProof;\n+import tech.pegasys.teku.datastructures.operations.AttestationData;\n+import tech.pegasys.teku.datastructures.operations.VoluntaryExit;\n+import tech.pegasys.teku.datastructures.state.ForkInfo;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+\n+public class TestSigner implements Signer {", "originalCommit": "bb2092bdd9c76546c6ba47711e2287f214e8bdab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA4NjA0OQ==", "url": "https://github.com/ConsenSys/teku/pull/2751#discussion_r486086049", "bodyText": "LocalSigner uses asyncRunner. This one doesn't. May be I can modify LocalSigner slightly so that it can sign both sync and async mode. Then this can be deleted.", "author": "usmansaleem", "createdAt": "2020-09-10T06:05:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1MTAyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA5MzM0OA==", "url": "https://github.com/ConsenSys/teku/pull/2751#discussion_r486093348", "bodyText": "Just use LocalSigner with SyncAsyncRunner like we do in all the other tests.", "author": "ajsutton", "createdAt": "2020-09-10T06:25:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1MTAyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjEwNDU2Mw==", "url": "https://github.com/ConsenSys/teku/pull/2751#discussion_r486104563", "bodyText": "Thanks for this hint @ajsutton, I was missing this bit :).", "author": "usmansaleem", "createdAt": "2020-09-10T06:50:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1MTAyMA=="}], "type": "inlineReview", "revised_code": {"commit": "c737ce56bbb28ccd924f346ec507e97869dea408", "chunk": "diff --git a/ethereum/core/src/testFixtures/java/tech/pegasys/teku/core/signatures/TestSigner.java b/ethereum/core/src/testFixtures/java/tech/pegasys/teku/core/signatures/TestSigner.java\ndeleted file mode 100644\nindex 4b14fda538..0000000000\n--- a/ethereum/core/src/testFixtures/java/tech/pegasys/teku/core/signatures/TestSigner.java\n+++ /dev/null\n\n@@ -1,83 +0,0 @@\n-/*\n- * Copyright 2020 ConsenSys AG.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n- */\n-\n-package tech.pegasys.teku.core.signatures;\n-\n-import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignAggregateAndProof;\n-import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignAggregationSlot;\n-import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignAttestationData;\n-import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignBlock;\n-import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignVoluntaryExit;\n-\n-import org.apache.tuweni.bytes.Bytes;\n-import tech.pegasys.teku.bls.BLS;\n-import tech.pegasys.teku.bls.BLSKeyPair;\n-import tech.pegasys.teku.bls.BLSSignature;\n-import tech.pegasys.teku.datastructures.blocks.BeaconBlock;\n-import tech.pegasys.teku.datastructures.operations.AggregateAndProof;\n-import tech.pegasys.teku.datastructures.operations.AttestationData;\n-import tech.pegasys.teku.datastructures.operations.VoluntaryExit;\n-import tech.pegasys.teku.datastructures.state.ForkInfo;\n-import tech.pegasys.teku.infrastructure.async.SafeFuture;\n-import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n-\n-public class TestSigner implements Signer {\n-\n-  private BLSKeyPair blsKeyPair;\n-\n-  public TestSigner(final BLSKeyPair blsKeyPair) {\n-    this.blsKeyPair = blsKeyPair;\n-  }\n-\n-  @Override\n-  public SafeFuture<BLSSignature> createRandaoReveal(final UInt64 epoch, final ForkInfo forkInfo) {\n-    return sign(SigningRootUtil.signingRootForRandaoReveal(epoch, forkInfo));\n-  }\n-\n-  @Override\n-  public SafeFuture<BLSSignature> signBlock(final BeaconBlock block, final ForkInfo forkInfo) {\n-    return sign(signingRootForSignBlock(block, forkInfo));\n-  }\n-\n-  @Override\n-  public SafeFuture<BLSSignature> signAttestationData(\n-      final AttestationData attestationData, final ForkInfo forkInfo) {\n-    return sign(signingRootForSignAttestationData(attestationData, forkInfo));\n-  }\n-\n-  @Override\n-  public SafeFuture<BLSSignature> signAggregationSlot(final UInt64 slot, final ForkInfo forkInfo) {\n-    return sign(signingRootForSignAggregationSlot(slot, forkInfo));\n-  }\n-\n-  @Override\n-  public SafeFuture<BLSSignature> signAggregateAndProof(\n-      final AggregateAndProof aggregateAndProof, final ForkInfo forkInfo) {\n-    return sign(signingRootForSignAggregateAndProof(aggregateAndProof, forkInfo));\n-  }\n-\n-  @Override\n-  public SafeFuture<BLSSignature> signVoluntaryExit(\n-      final VoluntaryExit voluntaryExit, final ForkInfo forkInfo) {\n-    return sign(signingRootForSignVoluntaryExit(voluntaryExit, forkInfo));\n-  }\n-\n-  @Override\n-  public boolean isLocal() {\n-    return true;\n-  }\n-\n-  private SafeFuture<BLSSignature> sign(final Bytes signingRoot) {\n-    return SafeFuture.completedFuture(BLS.sign(blsKeyPair.getSecretKey(), signingRoot));\n-  }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1MjA3Mw==", "url": "https://github.com/ConsenSys/teku/pull/2751#discussion_r486052073", "bodyText": "can we include the type on all the sign requests. although there will be no additional data it would be nice for our metrics to seperate the type of signing request.", "author": "jframe", "createdAt": "2020-09-10T04:14:27Z", "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/signer/ExternalSigner.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client.signer;\n+\n+import static java.util.Collections.emptyMap;\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForRandaoReveal;\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignAggregateAndProof;\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignAggregationSlot;\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignAttestationData;\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignBlock;\n+import static tech.pegasys.teku.core.signatures.SigningRootUtil.signingRootForSignVoluntaryExit;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import java.net.URI;\n+import java.net.URL;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpRequest.BodyPublishers;\n+import java.net.http.HttpResponse;\n+import java.net.http.HttpResponse.BodyHandlers;\n+import java.time.Duration;\n+import java.util.Map;\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.teku.bls.BLSPublicKey;\n+import tech.pegasys.teku.bls.BLSSignature;\n+import tech.pegasys.teku.core.signatures.Signer;\n+import tech.pegasys.teku.datastructures.blocks.BeaconBlock;\n+import tech.pegasys.teku.datastructures.operations.AggregateAndProof;\n+import tech.pegasys.teku.datastructures.operations.AttestationData;\n+import tech.pegasys.teku.datastructures.operations.VoluntaryExit;\n+import tech.pegasys.teku.datastructures.state.ForkInfo;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class ExternalSigner implements Signer {\n+  public static final String EXTERNAL_SIGNER_ENDPOINT = \"/api/v1/eth2/sign\";\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private final URL signingServiceUrl;\n+  private final BLSPublicKey blsPublicKey;\n+  private final Duration timeout;\n+  private final HttpClient httpClient = HttpClient.newHttpClient();\n+\n+  public ExternalSigner(\n+      final URL signingServiceUrl, final BLSPublicKey blsPublicKey, final Duration timeout) {\n+    this.signingServiceUrl = signingServiceUrl;\n+    this.blsPublicKey = blsPublicKey;\n+    this.timeout = timeout;\n+  }\n+\n+  @Override\n+  public SafeFuture<BLSSignature> createRandaoReveal(final UInt64 epoch, final ForkInfo forkInfo) {\n+    return sign(signingRootForRandaoReveal(epoch, forkInfo), emptyMap());", "originalCommit": "bb2092bdd9c76546c6ba47711e2287f214e8bdab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA4NjEyNw==", "url": "https://github.com/ConsenSys/teku/pull/2751#discussion_r486086127", "bodyText": "will do.", "author": "usmansaleem", "createdAt": "2020-09-10T06:06:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1MjA3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjEwNDY3MA==", "url": "https://github.com/ConsenSys/teku/pull/2751#discussion_r486104670", "bodyText": "done", "author": "usmansaleem", "createdAt": "2020-09-10T06:50:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjA1MjA3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "9e22c17ba39254a91c8fddf2da293f00e790bd03", "chunk": "diff --git a/validator/client/src/main/java/tech/pegasys/teku/validator/client/signer/ExternalSigner.java b/validator/client/src/main/java/tech/pegasys/teku/validator/client/signer/ExternalSigner.java\nindex 38969c216e..c4e3465b01 100644\n--- a/validator/client/src/main/java/tech/pegasys/teku/validator/client/signer/ExternalSigner.java\n+++ b/validator/client/src/main/java/tech/pegasys/teku/validator/client/signer/ExternalSigner.java\n\n@@ -61,17 +61,16 @@ public class ExternalSigner implements Signer {\n \n   @Override\n   public SafeFuture<BLSSignature> createRandaoReveal(final UInt64 epoch, final ForkInfo forkInfo) {\n-    return sign(signingRootForRandaoReveal(epoch, forkInfo), emptyMap());\n+    return sign(signingRootForRandaoReveal(epoch, forkInfo), SignType.RANDAO_REVEAL, emptyMap());\n   }\n \n   @Override\n   public SafeFuture<BLSSignature> signBlock(final BeaconBlock block, final ForkInfo forkInfo) {\n     return sign(\n         signingRootForSignBlock(block, forkInfo),\n+        SignType.BLOCK,\n         Map.of(\n-            \"type\", \"block\",\n-            \"genesisValidatorRoot\", forkInfo.getGenesisValidatorsRoot(),\n-            \"slot\", block.getSlot()));\n+            \"genesisValidatorRoot\", forkInfo.getGenesisValidatorsRoot(), \"slot\", block.getSlot()));\n   }\n \n   @Override\n"}}, {"oid": "c737ce56bbb28ccd924f346ec507e97869dea408", "url": "https://github.com/ConsenSys/teku/commit/c737ce56bbb28ccd924f346ec507e97869dea408", "message": "Removing TestSigner as LocalSigner can be used instead\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-09-10T06:15:10Z", "type": "commit"}, {"oid": "9e22c17ba39254a91c8fddf2da293f00e790bd03", "url": "https://github.com/ConsenSys/teku/commit/9e22c17ba39254a91c8fddf2da293f00e790bd03", "message": "Send sign type to external signer\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-09-10T06:44:44Z", "type": "commit"}, {"oid": "45117ceefbfd1a105de5da64f11521729e5ccf0f", "url": "https://github.com/ConsenSys/teku/commit/45117ceefbfd1a105de5da64f11521729e5ccf0f", "message": "Using SyncRunner in tests\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-09-10T06:49:54Z", "type": "commit"}, {"oid": "c2f048f8739ec778a712c5b0a8c53693547d443d", "url": "https://github.com/ConsenSys/teku/commit/c2f048f8739ec778a712c5b0a8c53693547d443d", "message": "Merge remote-tracking branch 'upstream/master' into external_signer_with_slash_protection\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-09-10T06:51:13Z", "type": "commit"}, {"oid": "b00410a30da2117401bd4487821985be5a1aa6f4", "url": "https://github.com/ConsenSys/teku/commit/b00410a30da2117401bd4487821985be5a1aa6f4", "message": "Adding test fixture dependency\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-09-10T07:00:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY4ODM5Nw==", "url": "https://github.com/ConsenSys/teku/pull/2751#discussion_r486688397", "bodyText": "Any particular reason to used a LinkedHashMap instead of just HashMap here?", "author": "ajsutton", "createdAt": "2020-09-10T23:29:39Z", "path": "validator/client/src/main/java/tech/pegasys/teku/validator/client/signer/SigningRequestBody.java", "diffHunk": "@@ -13,28 +13,51 @@\n \n package tech.pegasys.teku.validator.client.signer;\n \n-import com.fasterxml.jackson.annotation.JsonCreator;\n-import com.fasterxml.jackson.annotation.JsonGetter;\n-import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonAnyGetter;\n+import com.fasterxml.jackson.annotation.JsonAnySetter;\n import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n import org.apache.tuweni.bytes.Bytes;\n \n-@JsonIgnoreProperties(ignoreUnknown = true)\n public class SigningRequestBody {\n+  @JsonProperty(\"signingRoot\")\n+  private Bytes signingRoot;\n \n-  private final Bytes data;\n+  @JsonProperty(\"type\")\n+  private SignType type;\n \n-  @JsonCreator\n-  public SigningRequestBody(@JsonProperty(\"data\") final String data) {\n-    this.data = Bytes.fromHexString(data);\n+  @JsonAnySetter private final Map<String, Object> metadata = new LinkedHashMap<>();", "originalCommit": "b00410a30da2117401bd4487821985be5a1aa6f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY5NDE1Mg==", "url": "https://github.com/ConsenSys/teku/pull/2751#discussion_r486694152", "bodyText": "Not for any particular performance reason I recall, I can switch it back to HashMap.", "author": "usmansaleem", "createdAt": "2020-09-10T23:49:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY4ODM5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY5NDc0OA==", "url": "https://github.com/ConsenSys/teku/pull/2751#discussion_r486694748", "bodyText": "Simpler is better. :). The only reason I can think of is if you're asserting the order of the content somehow in tests.  As long as you're using .equals comparison of two HashMap instances they won't care about order.", "author": "ajsutton", "createdAt": "2020-09-10T23:51:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY4ODM5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY5NjExMA==", "url": "https://github.com/ConsenSys/teku/pull/2751#discussion_r486696110", "bodyText": "The tests are asserting only outgoing json data in integration test, so using HashMap is working there.", "author": "usmansaleem", "createdAt": "2020-09-10T23:55:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY4ODM5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "8355564f956026fd781c68e732dd496a300a7bbb", "chunk": "diff --git a/validator/client/src/main/java/tech/pegasys/teku/validator/client/signer/SigningRequestBody.java b/validator/client/src/main/java/tech/pegasys/teku/validator/client/signer/SigningRequestBody.java\nindex 19b829cd43..bd4079eaaf 100644\n--- a/validator/client/src/main/java/tech/pegasys/teku/validator/client/signer/SigningRequestBody.java\n+++ b/validator/client/src/main/java/tech/pegasys/teku/validator/client/signer/SigningRequestBody.java\n\n@@ -16,7 +16,7 @@ package tech.pegasys.teku.validator.client.signer;\n import com.fasterxml.jackson.annotation.JsonAnyGetter;\n import com.fasterxml.jackson.annotation.JsonAnySetter;\n import com.fasterxml.jackson.annotation.JsonProperty;\n-import java.util.LinkedHashMap;\n+import java.util.HashMap;\n import java.util.Map;\n import org.apache.tuweni.bytes.Bytes;\n \n"}}, {"oid": "c29fa046a1478b98965ee1c85357ca4bf2a651c7", "url": "https://github.com/ConsenSys/teku/commit/c29fa046a1478b98965ee1c85357ca4bf2a651c7", "message": "Merge remote-tracking branch 'upstream/master' into external_signer_with_slash_protection\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-09-10T23:49:49Z", "type": "commit"}, {"oid": "8355564f956026fd781c68e732dd496a300a7bbb", "url": "https://github.com/ConsenSys/teku/commit/8355564f956026fd781c68e732dd496a300a7bbb", "message": "review suggestion - using Hashmap in SigningRequestBody\n\nSigned-off-by: Usman Saleem <usman@usmans.info>", "committedDate": "2020-09-10T23:51:19Z", "type": "commit"}]}