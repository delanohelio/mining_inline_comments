{"pr_number": 1722, "pr_title": "[BC-376] Support snappy over gossip", "pr_createdAt": "2020-05-05T21:36:40Z", "pr_url": "https://github.com/ConsenSys/teku/pull/1722", "timeline": [{"oid": "f0bcb615f8188e2b7f5aba84f048a4108014b0f0", "url": "https://github.com/ConsenSys/teku/commit/f0bcb615f8188e2b7f5aba84f048a4108014b0f0", "message": "Rework Compressor API for use with gossip", "committedDate": "2020-05-05T15:31:33Z", "type": "commit"}, {"oid": "c9443d5775715fcd1fa45e4c2f9a96331436232c", "url": "https://github.com/ConsenSys/teku/commit/c9443d5775715fcd1fa45e4c2f9a96331436232c", "message": "Make SimpleOffsetSerializer more robust / stricter, add tests", "committedDate": "2020-05-05T17:33:45Z", "type": "commit"}, {"oid": "b26dfff436be79c047ed9aef7b3d690273f4565c", "url": "https://github.com/ConsenSys/teku/commit/b26dfff436be79c047ed9aef7b3d690273f4565c", "message": "Add GossipEncoding classes", "committedDate": "2020-05-05T17:34:10Z", "type": "commit"}, {"oid": "36564e3a1957968e7a02ea17352a2f1505e78dc9", "url": "https://github.com/ConsenSys/teku/commit/36564e3a1957968e7a02ea17352a2f1505e78dc9", "message": "Use new GossipEncoder's when handling gossip", "committedDate": "2020-05-05T18:31:35Z", "type": "commit"}, {"oid": "542c6d2e8192f648843798c5b5ae829eae3919ea", "url": "https://github.com/ConsenSys/teku/commit/542c6d2e8192f648843798c5b5ae829eae3919ea", "message": "Update integration tests to run across different gossip encodings", "committedDate": "2020-05-05T20:14:25Z", "type": "commit"}, {"oid": "0a56399c9ac0955fcfd4dda674854bd37a1b48a9", "url": "https://github.com/ConsenSys/teku/commit/0a56399c9ac0955fcfd4dda674854bd37a1b48a9", "message": "Merge branch 'master' into bc-376/support-snappy-over-gossip\n\nReconcile filename changes", "committedDate": "2020-05-05T20:57:52Z", "type": "commit"}, {"oid": "5774cbeb2d4f1baef20d8b6a980cf6af5a794e84", "url": "https://github.com/ConsenSys/teku/commit/5774cbeb2d4f1baef20d8b6a980cf6af5a794e84", "message": "Add more roundtrip encoding tests for relevant gossip datastructures", "committedDate": "2020-05-05T21:07:40Z", "type": "commit"}, {"oid": "490b01e0a575626353559c51ce5c6ef8ea7d5766", "url": "https://github.com/ConsenSys/teku/commit/490b01e0a575626353559c51ce5c6ef8ea7d5766", "message": "Fix null result handling", "committedDate": "2020-05-05T21:24:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQzMzM0Mg==", "url": "https://github.com/ConsenSys/teku/pull/1722#discussion_r420433342", "bodyText": "Shouldn't we be doing this check in all cases? ie even if we don't know what the expected uncompressed size is, we should check that we actually read all bytes from the gossip message.", "author": "ajsutton", "createdAt": "2020-05-05T22:02:30Z", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/compression/SnappyCompressor.java", "diffHunk": "@@ -45,31 +47,60 @@ public Bytes compress(final Bytes data) {\n     }\n   }\n \n+  @Override\n+  public Bytes uncompress(final Bytes data) throws CompressionException {\n+    try (final InputStream byteStream = new ByteArrayInputStream(data.toArrayUnsafe())) {\n+      // Read everything\n+      return uncompress(byteStream, OptionalInt.empty());\n+    } catch (IOException e) {\n+      throw new RuntimeException(\n+          \"Unexpected error encountered while preparing to uncompress bytes\", e);\n+    }\n+  }\n+\n   @Override\n   public Bytes uncompress(final InputStream input, final int uncompressedPayloadSize)\n       throws CompressionException {\n+    return uncompress(input, OptionalInt.of(uncompressedPayloadSize));\n+  }\n+\n+  @Override\n+  public int getMaxCompressedLength(final int uncompressedLength) {\n+    // Return worst-case compression size\n+    // See:\n+    // https://github.com/google/snappy/blob/537f4ad6240e586970fe554614542e9717df7902/snappy.cc#L98\n+    return 32 + uncompressedLength + uncompressedLength / 6;\n+  }\n+\n+  private Bytes uncompress(final InputStream input, OptionalInt uncompressedPayloadSize)\n+      throws CompressionException {\n     // This is a bit of a hack - but we don't want to close the underlying stream when\n     // we close the SnappyFramedInputStream\n-    final UncloseableInputStream unclosableStream = new UncloseableInputStream(input);\n-    // Limit the max number of bytes we're allowed to read\n-    final InputStream limitedStream =\n-        ByteStreams.limit(unclosableStream, getMaxCompressedLength(uncompressedPayloadSize));\n+    InputStream srcStream = new UncloseableInputStream(input);\n \n-    try (final InputStream snappyIn = new SnappyFramedInputStream(limitedStream)) {\n-      final Bytes uncompressed = Bytes.wrap(snappyIn.readNBytes(uncompressedPayloadSize));\n+    if (uncompressedPayloadSize.isPresent()) {\n+      // Limit the max number of bytes we're allowed to read if we know the payload size\n+      final int maxCompressedBytes = getMaxCompressedLength(uncompressedPayloadSize.getAsInt());\n+      srcStream = ByteStreams.limit(srcStream, maxCompressedBytes);\n+    }\n+\n+    final int maxBytesToRead = uncompressedPayloadSize.orElse(Integer.MAX_VALUE);\n+    try (final InputStream snappyIn = new SnappyFramedInputStream(srcStream)) {\n+      final Bytes uncompressed = Bytes.wrap(snappyIn.readNBytes(maxBytesToRead));\n \n       // Validate payload is of expected size\n-      if (uncompressed.size() < uncompressedPayloadSize) {\n+      final boolean validateSize = uncompressedPayloadSize.isPresent();\n+      if (validateSize && uncompressed.size() < uncompressedPayloadSize.getAsInt()) {\n         throw new PayloadSmallerThanExpectedException(\n             String.format(\n                 \"Expected %d bytes but only uncompressed %d bytes\",\n-                uncompressedPayloadSize, uncompressed.size()));\n+                uncompressedPayloadSize.getAsInt(), uncompressed.size()));\n       }\n-      if (snappyIn.available() > 0) {\n+      if (validateSize && snappyIn.available() > 0) {", "originalCommit": "490b01e0a575626353559c51ce5c6ef8ea7d5766", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkxMDg2OA==", "url": "https://github.com/ConsenSys/teku/pull/1722#discussion_r420910868", "bodyText": "It turns out we're supposed to use different compression strategies for gossip vs rpc requests (snappy block-format vs framed-format compression).  So, reverted these changes.", "author": "mbaxter", "createdAt": "2020-05-06T16:05:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQzMzM0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e619b3446633ea5ac7d35be55989fabe14655cbf", "chunk": "diff --git a/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/compression/SnappyCompressor.java b/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/compression/SnappyCompressor.java\nindex e4cc3d8ae..4a5c7351d 100644\n--- a/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/compression/SnappyCompressor.java\n+++ b/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/compression/SnappyCompressor.java\n\n@@ -47,60 +45,31 @@ public class SnappyCompressor implements Compressor {\n     }\n   }\n \n-  @Override\n-  public Bytes uncompress(final Bytes data) throws CompressionException {\n-    try (final InputStream byteStream = new ByteArrayInputStream(data.toArrayUnsafe())) {\n-      // Read everything\n-      return uncompress(byteStream, OptionalInt.empty());\n-    } catch (IOException e) {\n-      throw new RuntimeException(\n-          \"Unexpected error encountered while preparing to uncompress bytes\", e);\n-    }\n-  }\n-\n   @Override\n   public Bytes uncompress(final InputStream input, final int uncompressedPayloadSize)\n       throws CompressionException {\n-    return uncompress(input, OptionalInt.of(uncompressedPayloadSize));\n-  }\n-\n-  @Override\n-  public int getMaxCompressedLength(final int uncompressedLength) {\n-    // Return worst-case compression size\n-    // See:\n-    // https://github.com/google/snappy/blob/537f4ad6240e586970fe554614542e9717df7902/snappy.cc#L98\n-    return 32 + uncompressedLength + uncompressedLength / 6;\n-  }\n-\n-  private Bytes uncompress(final InputStream input, OptionalInt uncompressedPayloadSize)\n-      throws CompressionException {\n     // This is a bit of a hack - but we don't want to close the underlying stream when\n     // we close the SnappyFramedInputStream\n-    InputStream srcStream = new UncloseableInputStream(input);\n+    final UncloseableInputStream unclosableStream = new UncloseableInputStream(input);\n+    // Limit the max number of bytes we're allowed to read\n+    final InputStream limitedStream =\n+        ByteStreams.limit(unclosableStream, getMaxCompressedLength(uncompressedPayloadSize));\n \n-    if (uncompressedPayloadSize.isPresent()) {\n-      // Limit the max number of bytes we're allowed to read if we know the payload size\n-      final int maxCompressedBytes = getMaxCompressedLength(uncompressedPayloadSize.getAsInt());\n-      srcStream = ByteStreams.limit(srcStream, maxCompressedBytes);\n-    }\n-\n-    final int maxBytesToRead = uncompressedPayloadSize.orElse(Integer.MAX_VALUE);\n-    try (final InputStream snappyIn = new SnappyFramedInputStream(srcStream)) {\n-      final Bytes uncompressed = Bytes.wrap(snappyIn.readNBytes(maxBytesToRead));\n+    try (final InputStream snappyIn = new SnappyFramedInputStream(limitedStream)) {\n+      final Bytes uncompressed = Bytes.wrap(snappyIn.readNBytes(uncompressedPayloadSize));\n \n       // Validate payload is of expected size\n-      final boolean validateSize = uncompressedPayloadSize.isPresent();\n-      if (validateSize && uncompressed.size() < uncompressedPayloadSize.getAsInt()) {\n+      if (uncompressed.size() < uncompressedPayloadSize) {\n         throw new PayloadSmallerThanExpectedException(\n             String.format(\n                 \"Expected %d bytes but only uncompressed %d bytes\",\n-                uncompressedPayloadSize.getAsInt(), uncompressed.size()));\n+                uncompressedPayloadSize, uncompressed.size()));\n       }\n-      if (validateSize && snappyIn.available() > 0) {\n+      if (snappyIn.available() > 0) {\n         throw new PayloadLargerThanExpectedException(\n             String.format(\n                 \"Expected %d bytes, but at least %d extra bytes are appended\",\n-                uncompressedPayloadSize.getAsInt(), snappyIn.available()));\n+                uncompressedPayloadSize, snappyIn.available()));\n       }\n \n       return uncompressed;\n"}}, {"oid": "db49c2beb989a00b0c49e02ee7fb71aa0fa9b979", "url": "https://github.com/ConsenSys/teku/commit/db49c2beb989a00b0c49e02ee7fb71aa0fa9b979", "message": "Merge branch 'master' into bc-376/support-snappy-over-gossip", "committedDate": "2020-05-06T15:00:33Z", "type": "commit"}, {"oid": "e619b3446633ea5ac7d35be55989fabe14655cbf", "url": "https://github.com/ConsenSys/teku/commit/e619b3446633ea5ac7d35be55989fabe14655cbf", "message": "Revert \"Rework Compressor API for use with gossip\"\n\nThis reverts commit f0bcb615f8188e2b7f5aba84f048a4108014b0f0.", "committedDate": "2020-05-06T15:04:45Z", "type": "commit"}, {"oid": "adfb78dc473b6f8be2dfd4d6a7cee819fd120e58", "url": "https://github.com/ConsenSys/teku/commit/adfb78dc473b6f8be2dfd4d6a7cee819fd120e58", "message": "Use distinct compression strategies for gossip vs rpc requests\n\nGossip compression uses snappy block format, rpc request use the snappy\nframed format.", "committedDate": "2020-05-06T15:26:53Z", "type": "commit"}, {"oid": "50779d34cd79ce4b5bc1799330ac328ecb20df5c", "url": "https://github.com/ConsenSys/teku/commit/50779d34cd79ce4b5bc1799330ac328ecb20df5c", "message": "Add logging around topic subscription", "committedDate": "2020-05-06T15:56:20Z", "type": "commit"}, {"oid": "0354886e155867c6ebbb2dcad082d743b9d319c7", "url": "https://github.com/ConsenSys/teku/commit/0354886e155867c6ebbb2dcad082d743b9d319c7", "message": "Fix snappy gossip encoding name", "committedDate": "2020-05-06T15:56:37Z", "type": "commit"}]}