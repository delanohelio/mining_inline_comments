{"pr_number": 1603, "pr_title": "1356 smaller 1", "pr_createdAt": "2020-04-16T02:51:48Z", "pr_url": "https://github.com/ConsenSys/teku/pull/1603", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM0NjcwNw==", "url": "https://github.com/ConsenSys/teku/pull/1603#discussion_r409346707", "bodyText": "is this return actually required? i would have thought it to be redundant..", "author": "rolfyone", "createdAt": "2020-04-16T07:42:16Z", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/handlers/validator/PostBlock.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi.handlers.validator;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n+import static javax.servlet.http.HttpServletResponse.SC_SERVICE_UNAVAILABLE;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_ACCEPTED;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_SERVICE_UNAVAILABLE;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.TAG_VALIDATOR;\n+\n+import com.fasterxml.jackson.core.JsonParseException;\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiRequestBody;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import tech.pegasys.artemis.api.SyncDataProvider;\n+import tech.pegasys.artemis.api.ValidatorDataProvider;\n+import tech.pegasys.artemis.api.schema.SignedBeaconBlock;\n+import tech.pegasys.artemis.provider.JsonProvider;\n+\n+public class PostBlock implements Handler {\n+  public static final String ROUTE = \"/validator/block\";\n+\n+  private final JsonProvider jsonProvider;\n+  private final ValidatorDataProvider validatorDataProvider;\n+  private final SyncDataProvider syncDataProvider;\n+\n+  public PostBlock(\n+      final ValidatorDataProvider validatorDataProvider,\n+      final SyncDataProvider syncDataProvider,\n+      final JsonProvider jsonProvider) {\n+    this.jsonProvider = jsonProvider;\n+    this.validatorDataProvider = validatorDataProvider;\n+    this.syncDataProvider = syncDataProvider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.POST,\n+      summary = \"Submit a signed transaction to be imported.\",\n+      tags = {TAG_VALIDATOR},\n+      requestBody =\n+          @OpenApiRequestBody(content = {@OpenApiContent(from = SignedBeaconBlock.class)}),\n+      description =\n+          \"Submit a signed beacon block to the beacon node to be imported.\"\n+              + \" Validation is expected to be performed by the beacon node.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            description = \"Block has been successfully broadcast, validated and imported.\"),\n+        @OpenApiResponse(\n+            status = RES_ACCEPTED,\n+            description =\n+                \"Block has been successfully broadcast, but failed validation and has not been imported.\"),\n+        @OpenApiResponse(status = RES_BAD_REQUEST, description = \"Unable to parse request body.\"),\n+        @OpenApiResponse(\n+            status = RES_INTERNAL_ERROR,\n+            description = \"Beacon node experienced an internal error.\"),\n+        @OpenApiResponse(\n+            status = RES_SERVICE_UNAVAILABLE,\n+            description = \"Beacon node is currently syncing.\")\n+      })\n+  @SuppressWarnings(\"FutureReturnValueIgnored\")\n+  @Override\n+  public void handle(final Context ctx) throws Exception {\n+    try {\n+      if (syncDataProvider.getSyncStatus().isSyncing()) {\n+        ctx.status(SC_SERVICE_UNAVAILABLE);\n+        return;\n+      }\n+\n+      final SignedBeaconBlock signedBeaconBlock =\n+          jsonProvider.jsonToObject(ctx.body(), SignedBeaconBlock.class);\n+\n+      validatorDataProvider\n+          .submitSignedBlock(signedBeaconBlock)\n+          .thenApplyChecked(\n+              validatorBlockResult -> {\n+                ctx.status(validatorBlockResult.getResponseCode());\n+                if (validatorBlockResult.getFailureReason().isPresent()) {\n+                  ctx.result(\n+                      jsonProvider.objectToJSON(\n+                          validatorBlockResult.getFailureReason().get().getMessage()));\n+                } else {\n+                  ctx.result(jsonProvider.objectToJSON(validatorBlockResult.getHash_tree_root()));\n+                }\n+                return null;", "originalCommit": "011cbf446ec9b397e5b57a3bae04611709ff80e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY2NTg0NQ==", "url": "https://github.com/ConsenSys/teku/pull/1603#discussion_r409665845", "bodyText": "thenApplyChecked needs a return object.", "author": "mark-terry", "createdAt": "2020-04-16T15:52:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM0NjcwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk0NTM2Nw==", "url": "https://github.com/ConsenSys/teku/pull/1603#discussion_r409945367", "bodyText": "Please don't add @SuppressWarnings(\"FutureReturnValueIgnored\").  This code is broken as written and will silently ignore any failures because the returned future from thenApplyChecked is being ignored.", "author": "ajsutton", "createdAt": "2020-04-17T01:45:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTM0NjcwNw=="}], "type": "inlineReview", "revised_code": {"commit": "919145fe71acf1fd9b2261eb91fb796d4c9f8f86", "chunk": "diff --git a/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/handlers/validator/PostBlock.java b/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/handlers/validator/PostBlock.java\nindex b76d9c5d1..b25b7be08 100644\n--- a/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/handlers/validator/PostBlock.java\n+++ b/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/handlers/validator/PostBlock.java\n\n@@ -17,10 +17,8 @@ import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n import static javax.servlet.http.HttpServletResponse.SC_SERVICE_UNAVAILABLE;\n import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_ACCEPTED;\n-import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_OK;\n-import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_SERVICE_UNAVAILABLE;\n import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.TAG_VALIDATOR;\n \n import com.fasterxml.jackson.core.JsonParseException;\n"}}, {"oid": "919145fe71acf1fd9b2261eb91fb796d4c9f8f86", "url": "https://github.com/ConsenSys/teku/commit/919145fe71acf1fd9b2261eb91fb796d4c9f8f86", "message": "[1356] validator/block endpoint implementation.", "committedDate": "2020-04-19T09:42:41Z", "type": "commit"}, {"oid": "05aa72661d3a727574ea780ec1a3e6fa0aa4f3cf", "url": "https://github.com/ConsenSys/teku/commit/05aa72661d3a727574ea780ec1a3e6fa0aa4f3cf", "message": "[1356] Removed non-useful error.", "committedDate": "2020-04-19T09:42:42Z", "type": "commit"}, {"oid": "809d16f7fb042fb81ccb3622ab2ffc90413c3c3c", "url": "https://github.com/ConsenSys/teku/commit/809d16f7fb042fb81ccb3622ab2ffc90413c3c3c", "message": "[1356] Improved OpenAPI definition.", "committedDate": "2020-04-19T09:42:42Z", "type": "commit"}, {"oid": "8e275571b83ae360ef40dca7a648dedd1a5512d3", "url": "https://github.com/ConsenSys/teku/commit/8e275571b83ae360ef40dca7a648dedd1a5512d3", "message": "[1356] PR fixes.", "committedDate": "2020-04-19T09:42:42Z", "type": "commit"}, {"oid": "a57e67b4136e6f71ff888b125f08ec552c22f7fc", "url": "https://github.com/ConsenSys/teku/commit/a57e67b4136e6f71ff888b125f08ec552c22f7fc", "message": "[1356] Small refactoring.", "committedDate": "2020-04-19T09:42:42Z", "type": "commit"}, {"oid": "a57e67b4136e6f71ff888b125f08ec552c22f7fc", "url": "https://github.com/ConsenSys/teku/commit/a57e67b4136e6f71ff888b125f08ec552c22f7fc", "message": "[1356] Small refactoring.", "committedDate": "2020-04-19T09:42:42Z", "type": "forcePushed"}, {"oid": "af30a6bec8248e975596ebd4e1e551a156087654", "url": "https://github.com/ConsenSys/teku/commit/af30a6bec8248e975596ebd4e1e551a156087654", "message": "[1356] Build fix.", "committedDate": "2020-04-19T10:28:26Z", "type": "commit"}]}