{"pr_number": 3237, "pr_title": "Add `correct` validator metrics", "pr_createdAt": "2020-11-16T21:15:37Z", "pr_url": "https://github.com/ConsenSys/teku/pull/3237", "timeline": [{"oid": "ff2c2b5486f53a55990fc53d9840a933bbab1a0e", "url": "https://github.com/ConsenSys/teku/commit/ff2c2b5486f53a55990fc53d9840a933bbab1a0e", "message": "Add 'correct' validator metrics", "committedDate": "2020-11-16T21:11:41Z", "type": "commit"}, {"oid": "97a59406618a2e4435af011ac0490a1fed567fb1", "url": "https://github.com/ConsenSys/teku/commit/97a59406618a2e4435af011ac0490a1fed567fb1", "message": "Remove redundant line", "committedDate": "2020-11-16T21:39:33Z", "type": "commit"}, {"oid": "3908927657f0ea1965dbe0998036c91c554facee", "url": "https://github.com/ConsenSys/teku/commit/3908927657f0ea1965dbe0998036c91c554facee", "message": "Merge branch 'master' into addCorrectValidatorsMetrics", "committedDate": "2020-11-16T21:45:29Z", "type": "commit"}, {"oid": "611b9cd8f3553a8218c682699cb1d2e8607401c7", "url": "https://github.com/ConsenSys/teku/commit/611b9cd8f3553a8218c682699cb1d2e8607401c7", "message": "Fix old test breaking change", "committedDate": "2020-11-16T22:33:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDczMTk2OQ==", "url": "https://github.com/ConsenSys/teku/pull/3237#discussion_r524731969", "bodyText": "I think we should avoid iterating through all the attestations twice. We just need to iterate through once, counting both total validators and correct validators.  Likely that will be easiest if you just an old fashioned for loop rather than streams.", "author": "ajsutton", "createdAt": "2020-11-16T23:16:28Z", "path": "services/beaconchain/src/main/java/tech/pegasys/teku/services/beaconchain/BeaconChainMetrics.java", "diffHunk": "@@ -173,15 +194,35 @@ private void updateMetrics(final BeaconState state) {\n   }\n \n   private int getLiveValidators(final SSZList<PendingAttestation> attestations) {\n-    final Map<UInt64, Map<UInt64, Bitlist>> aggregationBitsBySlotAndCommittee = new HashMap<>();\n-    attestations.forEach(\n+    return getNumberOfValidators(attestations, (__) -> true);", "originalCommit": "611b9cd8f3553a8218c682699cb1d2e8607401c7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1f44cf4ed87b44f203d4598d95850e7bea62a266", "chunk": "diff --git a/services/beaconchain/src/main/java/tech/pegasys/teku/services/beaconchain/BeaconChainMetrics.java b/services/beaconchain/src/main/java/tech/pegasys/teku/services/beaconchain/BeaconChainMetrics.java\nindex 774ff01d4..2111c62da 100644\n--- a/services/beaconchain/src/main/java/tech/pegasys/teku/services/beaconchain/BeaconChainMetrics.java\n+++ b/services/beaconchain/src/main/java/tech/pegasys/teku/services/beaconchain/BeaconChainMetrics.java\n\n@@ -193,41 +193,50 @@ public class BeaconChainMetrics implements SlotEventsChannel {\n     previousJustifiedRoot.set(getLongFromRoot(previousJustifiedCheckpoint.getRoot()));\n   }\n \n-  private int getLiveValidators(final SSZList<PendingAttestation> attestations) {\n-    return getNumberOfValidators(attestations, (__) -> true);\n-  }\n+  private CorrectAndLiveValidators getNumberOfValidators(final BeaconState state, final SSZList<PendingAttestation> attestations) {\n \n-  private int getCorrectValidators(\n-      final BeaconState state, final SSZList<PendingAttestation> attestations) {\n-    final Predicate<PendingAttestation> predicate =\n-        attestation ->\n-            attestation\n-                .getData()\n-                .getTarget()\n-                .getRoot()\n-                .equals(get_block_root(state, compute_epoch_at_slot(state.getSlot())));\n-    return getNumberOfValidators(attestations, predicate);\n-  }\n+    final Predicate<PendingAttestation> isCorrectValidatorPredicate =\n+            attestation ->\n+                    attestation\n+                            .getData()\n+                            .getTarget()\n+                            .getRoot()\n+                            .equals(get_block_root(state, compute_epoch_at_slot(state.getSlot())));\n+\n+    final Map<UInt64, Map<UInt64, Bitlist>> liveValidatorsAggregationBitsBySlotAndCommittee = new HashMap<>();\n+    final Map<UInt64, Map<UInt64, Bitlist>> correctValidatorsAggregationBitsBySlotAndCommittee = new HashMap<>();\n \n-  private int getNumberOfValidators(\n-      final SSZList<PendingAttestation> attestations,\n-      final Predicate<PendingAttestation> attestationPredicate) {\n-    final Map<UInt64, Map<UInt64, Bitlist>> aggregationBitsBySlotAndCommittee = new HashMap<>();\n     attestations\n-        .filter(attestationPredicate)\n-        .forEach(\n-            attestation ->\n-                aggregationBitsBySlotAndCommittee\n-                    .computeIfAbsent(attestation.getData().getSlot(), __ -> new HashMap<>())\n-                    .computeIfAbsent(\n-                        attestation.getData().getIndex(),\n-                        __ -> attestation.getAggregation_bits().copy())\n-                    .setAllBits(attestation.getAggregation_bits()));\n-\n-    return aggregationBitsBySlotAndCommittee.values().stream()\n+            .forEach(\n+                    attestation -> {\n+                      if (isCorrectValidatorPredicate.test(attestation)) {\n+                        correctValidatorsAggregationBitsBySlotAndCommittee\n+                                .computeIfAbsent(attestation.getData().getSlot(), __ -> new HashMap<>())\n+                                .computeIfAbsent(\n+                                        attestation.getData().getIndex(),\n+                                        __ -> attestation.getAggregation_bits().copy())\n+                                .setAllBits(attestation.getAggregation_bits());\n+                      }\n+\n+                      liveValidatorsAggregationBitsBySlotAndCommittee\n+                              .computeIfAbsent(attestation.getData().getSlot(), __ -> new HashMap<>())\n+                              .computeIfAbsent(\n+                                      attestation.getData().getIndex(),\n+                                      __ -> attestation.getAggregation_bits().copy())\n+                              .setAllBits(attestation.getAggregation_bits()));\n+                    });\n+\n+    final int numberOfCorrectValidators = correctValidatorsAggregationBitsBySlotAndCommittee.values().stream()\n         .flatMap(aggregationBitsByCommittee -> aggregationBitsByCommittee.values().stream())\n         .mapToInt(Bitlist::getBitCount)\n         .sum();\n+\n+    final int numberOfLiveValidators = liveValidatorsAggregationBitsBySlotAndCommittee.values().stream()\n+            .flatMap(aggregationBitsByCommittee -> aggregationBitsByCommittee.values().stream())\n+            .mapToInt(Bitlist::getBitCount)\n+            .sum();\n+\n+    return new CorrectAndLiveValidators(numberOfCorrectValidators, numberOfLiveValidators);\n   }\n \n   static long getLongFromRoot(Bytes32 root) {\n"}}, {"oid": "1f44cf4ed87b44f203d4598d95850e7bea62a266", "url": "https://github.com/ConsenSys/teku/commit/1f44cf4ed87b44f203d4598d95850e7bea62a266", "message": "Pass through attesation lists once", "committedDate": "2020-11-17T17:48:43Z", "type": "commit"}, {"oid": "2027940ead7f1606d83c30b244a91aa83848c55d", "url": "https://github.com/ConsenSys/teku/commit/2027940ead7f1606d83c30b244a91aa83848c55d", "message": "Remove extra parantheses", "committedDate": "2020-11-17T18:15:47Z", "type": "commit"}, {"oid": "4f5e1864c63dc36592d133a0f761bcd52100cde6", "url": "https://github.com/ConsenSys/teku/commit/4f5e1864c63dc36592d133a0f761bcd52100cde6", "message": "Merge branch 'master' into addCorrectValidatorsMetrics", "committedDate": "2020-11-18T12:58:16Z", "type": "commit"}]}