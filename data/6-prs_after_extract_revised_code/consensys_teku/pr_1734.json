{"pr_number": 1734, "pr_title": "[BC-415] Rework CombinedChainDataClient.getStateAtSlot()", "pr_createdAt": "2020-05-07T19:57:11Z", "pr_url": "https://github.com/ConsenSys/teku/pull/1734", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc1OTQyMA==", "url": "https://github.com/ConsenSys/teku/pull/1734#discussion_r421759420", "bodyText": "I don't see why we need a special case for the first epoch / genesis block, so I cut this.  But if there's a valid reason, I can add this back in.", "author": "mbaxter", "createdAt": "2020-05-07T20:00:12Z", "path": "storage/src/main/java/tech/pegasys/teku/storage/client/CombinedChainDataClient.java", "diffHunk": "@@ -149,11 +147,6 @@ public CombinedChainDataClient(\n     return getBlockByBlockRoot(get_block_root_at_slot(state, slot));\n   }\n \n-  private boolean isHistoricalData(final UnsignedLong slot) {\n-    final boolean finalizedPastFirstEpoch = !recentChainData.getFinalizedEpoch().equals(ZERO);", "originalCommit": "518e985375492373d2a2073b1d0dc12cca1d151f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc4NDY1Ng==", "url": "https://github.com/ConsenSys/teku/pull/1734#discussion_r421784656", "bodyText": "I believe it was added because we were always going to disk to retrieve the genesis state due to it being inherently finalised.  But I think we've fixed isFinalized now so the last finalized slot is expected to be in memory.\nBasically as long as the genesis state is retrieved from the memory store instead of disk it's fine to cut it.", "author": "ajsutton", "createdAt": "2020-05-07T20:48:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc1OTQyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc5NDI3OQ==", "url": "https://github.com/ConsenSys/teku/pull/1734#discussion_r421794279", "bodyText": "Ok, so basically we want to retrieve latest finalized data from memory, whether or not its on the epoch boundary?  And this applies for all finalized data, not just genesis?", "author": "mbaxter", "createdAt": "2020-05-07T21:06:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc1OTQyMA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "36c4a0dbf342275d25bff8bb624dbbf6582125d9", "url": "https://github.com/ConsenSys/teku/commit/36c4a0dbf342275d25bff8bb624dbbf6582125d9", "message": "Rework CombinedChainDataClient.getStateAtSlot()\n\nDon't query based on head block root.  First try to query from recent\ndata, and then query from historical state to control for case where\nblocks are being rapidly imported, and the slot being queried is\nfinalized during processing.", "committedDate": "2020-05-11T21:23:36Z", "type": "commit"}, {"oid": "d231373a6a0495e480b0c2d37f3d9f397542ac4a", "url": "https://github.com/ConsenSys/teku/commit/d231373a6a0495e480b0c2d37f3d9f397542ac4a", "message": "Revert store check change", "committedDate": "2020-05-11T21:23:36Z", "type": "commit"}, {"oid": "aa41141fe55cbd368555dd0c20ca794531fd8a8a", "url": "https://github.com/ConsenSys/teku/commit/aa41141fe55cbd368555dd0c20ca794531fd8a8a", "message": "Rework historical data check", "committedDate": "2020-05-11T21:23:36Z", "type": "commit"}, {"oid": "54230c305655690043978c82399255c3377b18c3", "url": "https://github.com/ConsenSys/teku/commit/54230c305655690043978c82399255c3377b18c3", "message": "Break up ChainBuilder logic", "committedDate": "2020-05-11T21:23:36Z", "type": "commit"}, {"oid": "bc5d5abfaa504602850edf7cf55c54c044804a4b", "url": "https://github.com/ConsenSys/teku/commit/bc5d5abfaa504602850edf7cf55c54c044804a4b", "message": "Create in-memory RocksDbDatabase system", "committedDate": "2020-05-11T21:23:36Z", "type": "commit"}, {"oid": "7103bf6cbf6d363c2820c4b9dc6e0542a48c7aad", "url": "https://github.com/ConsenSys/teku/commit/7103bf6cbf6d363c2820c4b9dc6e0542a48c7aad", "message": "Fix datastructures ssz dependencies", "committedDate": "2020-05-11T21:23:36Z", "type": "commit"}, {"oid": "d2b4f7801a69bdf4cd525433b81a6451e48fbae9", "url": "https://github.com/ConsenSys/teku/commit/d2b4f7801a69bdf4cd525433b81a6451e48fbae9", "message": "Add InMemoryStorageSySystem utility", "committedDate": "2020-05-11T21:23:36Z", "type": "commit"}, {"oid": "90ec46afef55aeafe14c1ea6587f7701fd1a5e78", "url": "https://github.com/ConsenSys/teku/commit/90ec46afef55aeafe14c1ea6587f7701fd1a5e78", "message": "Add CombinedChainData integration tests", "committedDate": "2020-05-11T21:23:36Z", "type": "commit"}, {"oid": "90ec46afef55aeafe14c1ea6587f7701fd1a5e78", "url": "https://github.com/ConsenSys/teku/commit/90ec46afef55aeafe14c1ea6587f7701fd1a5e78", "message": "Add CombinedChainData integration tests", "committedDate": "2020-05-11T21:23:36Z", "type": "forcePushed"}, {"oid": "c490c5684361d864811f46aa38556dcc4d72fb72", "url": "https://github.com/ConsenSys/teku/commit/c490c5684361d864811f46aa38556dcc4d72fb72", "message": "Revert \"Break up ChainBuilder logic\"\n\nThis reverts commit 54230c305655690043978c82399255c3377b18c3.", "committedDate": "2020-05-11T21:28:41Z", "type": "commit"}, {"oid": "3c71a002b40d0ec0fba634ece24f2c7dc2adf4cc", "url": "https://github.com/ConsenSys/teku/commit/3c71a002b40d0ec0fba634ece24f2c7dc2adf4cc", "message": "Fix spotless errors", "committedDate": "2020-05-11T22:03:03Z", "type": "commit"}, {"oid": "c3ab1f4f47ad4d4c8814fb98f41e0d66a07ebf05", "url": "https://github.com/ConsenSys/teku/commit/c3ab1f4f47ad4d4c8814fb98f41e0d66a07ebf05", "message": "Remove unit tests duplicated by integration tests", "committedDate": "2020-05-11T22:04:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM0ODUzMg==", "url": "https://github.com/ConsenSys/teku/pull/1734#discussion_r423348532", "bodyText": "Created this RocksDbAccessor interface so that we could have a mock in-memory replacement for the core RocksDB access logic.  Not super happy with the current implementation, but leaving a larger refactor for the future since we have active development in this area.", "author": "mbaxter", "createdAt": "2020-05-11T22:09:17Z", "path": "storage/src/main/java/tech/pegasys/teku/storage/server/rocksdb/RocksDbDatabase.java", "diffHunk": "@@ -53,7 +53,11 @@\n \n   public static Database createV3(\n       final RocksDbConfiguration configuration, final StateStorageMode stateStorageMode) {\n-    final RocksDbInstance db = RocksDbInstanceFactory.create(configuration, V3Schema.class);\n+    final RocksDbAccessor db = RocksDbInstanceFactory.create(configuration, V3Schema.class);\n+    return createV3(db, stateStorageMode);\n+  }\n+\n+  static Database createV3(final RocksDbAccessor db, final StateStorageMode stateStorageMode) {", "originalCommit": "c3ab1f4f47ad4d4c8814fb98f41e0d66a07ebf05", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "ca5968a7e94eb866c2528baa5e5c98d3fdd404c1", "url": "https://github.com/ConsenSys/teku/commit/ca5968a7e94eb866c2528baa5e5c98d3fdd404c1", "message": "Add more tests, fix bug\n\nConsistently return the latest state in effect when querying from\nrecent or historical chain data", "committedDate": "2020-05-11T23:10:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUxNjcwOQ==", "url": "https://github.com/ConsenSys/teku/pull/1734#discussion_r423516709", "bodyText": "Aren't we at risk of race conditions here?  ie we check if the slot is recent and it is, but then before we actually get the block the store is changed and the slot we're interested in is dropped.  Seems like we should try to get it from the Store and if it's not there, then fall back to getting it from disk.  That would be a reasonable way to handle the case where we need to request a block that's more than SLOTS_PER_HISTORICAL_ROOT behind the current state as well - we'd fail to get it from the store and fallback to getting it from disk.", "author": "ajsutton", "createdAt": "2020-05-12T07:24:02Z", "path": "storage/src/main/java/tech/pegasys/teku/storage/client/CombinedChainDataClient.java", "diffHunk": "@@ -107,7 +106,7 @@ public CombinedChainDataClient(\n       LOG.trace(\"Block root at slot {} is the specified head block root\", slot);\n       return getBlockByBlockRoot(headBlockRoot);\n     }\n-    if (isHistoricalData(slot)) {\n+    if (!isRecentData(slot)) {\n       LOG.trace(\"Block at slot {} is in a finalized epoch. Retrieving from historical data\", slot);\n       return historicalChainData.getLatestFinalizedBlockAtSlot(slot);\n     }", "originalCommit": "ca5968a7e94eb866c2528baa5e5c98d3fdd404c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgyMjczMQ==", "url": "https://github.com/ConsenSys/teku/pull/1734#discussion_r423822731", "bodyText": "I think this method currently has a few problems - coming back to it in a follow-up PR.", "author": "mbaxter", "createdAt": "2020-05-12T15:23:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUxNjcwOQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUxODk3Ng==", "url": "https://github.com/ConsenSys/teku/pull/1734#discussion_r423518976", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    .filter(f -> (f.getModifiers() & Modifier.STATIC) > 0)\n          \n          \n            \n                    .filter(f -> Modifiers.isState(f.getModifiers()))\n          \n      \n    \n    \n  \n\nand could apply the same change above in streamColumns because apparently you should use the java.lang.reflect.Modifiers class to decode modifiers...", "author": "ajsutton", "createdAt": "2020-05-12T07:28:11Z", "path": "storage/src/main/java/tech/pegasys/teku/storage/server/rocksdb/schema/Schema.java", "diffHunk": "@@ -35,4 +35,18 @@\n               }\n             });\n   }\n+\n+  static Stream<RocksDbVariable<?>> streamVariables(Class<? extends Schema> schema) {\n+    return Arrays.stream(schema.getDeclaredFields())\n+        .filter(f -> (f.getModifiers() & Modifier.STATIC) > 0)", "originalCommit": "ca5968a7e94eb866c2528baa5e5c98d3fdd404c1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9fa193405141634f8b8d486cccced58e5b0fa117", "chunk": "diff --git a/storage/src/main/java/tech/pegasys/teku/storage/server/rocksdb/schema/Schema.java b/storage/src/main/java/tech/pegasys/teku/storage/server/rocksdb/schema/Schema.java\nindex 5a5c3a872..7f64f118b 100644\n--- a/storage/src/main/java/tech/pegasys/teku/storage/server/rocksdb/schema/Schema.java\n+++ b/storage/src/main/java/tech/pegasys/teku/storage/server/rocksdb/schema/Schema.java\n\n@@ -38,7 +38,7 @@ public interface Schema {\n \n   static Stream<RocksDbVariable<?>> streamVariables(Class<? extends Schema> schema) {\n     return Arrays.stream(schema.getDeclaredFields())\n-        .filter(f -> (f.getModifiers() & Modifier.STATIC) > 0)\n+        .filter(f -> Modifier.isStatic(f.getModifiers()))\n         .filter(f -> f.getType() == RocksDbVariable.class)\n         .map(\n             f -> {\n"}}, {"oid": "f22040423dcfed44ce7bfc24a4048dad8278f7b9", "url": "https://github.com/ConsenSys/teku/commit/f22040423dcfed44ce7bfc24a4048dad8278f7b9", "message": "Merge branch 'master' into bc-415/rework-get-state-at-slot", "committedDate": "2020-05-12T15:17:52Z", "type": "commit"}, {"oid": "9fa193405141634f8b8d486cccced58e5b0fa117", "url": "https://github.com/ConsenSys/teku/commit/9fa193405141634f8b8d486cccced58e5b0fa117", "message": "Fix static field check", "committedDate": "2020-05-12T15:28:54Z", "type": "commit"}]}