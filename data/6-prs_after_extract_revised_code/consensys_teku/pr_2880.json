{"pr_number": 2880, "pr_title": "[QS-1] Add hard limits to gossip queues", "pr_createdAt": "2020-10-05T19:41:46Z", "pr_url": "https://github.com/ConsenSys/teku/pull/2880", "timeline": [{"oid": "529462517a461fed90091c8747862433b28d2726", "url": "https://github.com/ConsenSys/teku/commit/529462517a461fed90091c8747862433b28d2726", "message": "Ignore future items from the far future", "committedDate": "2020-10-05T19:32:26Z", "type": "commit"}, {"oid": "9224b1c410f889eb12a14b2ad39c8a359d38dafc", "url": "https://github.com/ConsenSys/teku/commit/9224b1c410f889eb12a14b2ad39c8a359d38dafc", "message": "Increase future limit for attestations", "committedDate": "2020-10-05T19:32:26Z", "type": "commit"}, {"oid": "41731dc10490595a398c6d5314de5201c8c0f45f", "url": "https://github.com/ConsenSys/teku/commit/41731dc10490595a398c6d5314de5201c8c0f45f", "message": "Keep ordering information on pending items", "committedDate": "2020-10-05T19:32:26Z", "type": "commit"}, {"oid": "a38d9af1eb64f8c190269f4df246b14a3304e580", "url": "https://github.com/ConsenSys/teku/commit/a38d9af1eb64f8c190269f4df246b14a3304e580", "message": "Use non-concurrent collections and synchronize access", "committedDate": "2020-10-05T19:32:38Z", "type": "commit"}, {"oid": "77423bbba27531292593adfb1f31e9d586a89a46", "url": "https://github.com/ConsenSys/teku/commit/77423bbba27531292593adfb1f31e9d586a89a46", "message": "Set hard limit on number of items in PendingPool", "committedDate": "2020-10-05T19:32:38Z", "type": "commit"}, {"oid": "34fd7e9c04cde0af0c7675569adb5c6e58c351a0", "url": "https://github.com/ConsenSys/teku/commit/34fd7e9c04cde0af0c7675569adb5c6e58c351a0", "message": "Fix compile errors, clean up", "committedDate": "2020-10-05T19:50:29Z", "type": "commit"}, {"oid": "e6d63b2279ebb7db57d516a4fcb01619232fd393", "url": "https://github.com/ConsenSys/teku/commit/e6d63b2279ebb7db57d516a4fcb01619232fd393", "message": "Fix test", "committedDate": "2020-10-05T20:38:37Z", "type": "commit"}, {"oid": "d1a068d87f984223b7503d7bb71b39a7dd6f3872", "url": "https://github.com/ConsenSys/teku/commit/d1a068d87f984223b7503d7bb71b39a7dd6f3872", "message": "Merge branch 'master' into qs-1/add-hard-limits-to-gossip-queues", "committedDate": "2020-10-06T15:21:47Z", "type": "commit"}, {"oid": "eade5149a13d5cd863031e52b72ecfce7478bfb5", "url": "https://github.com/ConsenSys/teku/commit/eade5149a13d5cd863031e52b72ecfce7478bfb5", "message": "Merge branch 'master' into qs-1/add-hard-limits-to-gossip-queues", "committedDate": "2020-10-07T16:04:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEzOTUyMw==", "url": "https://github.com/ConsenSys/teku/pull/2880#discussion_r501139523", "bodyText": "if the while clause is true and the to remove item is null, doesn't that mean the max items is less than 1? It seems a bit redundant, or we might want to just throw an error in this scenario to show that max items shouldn't have been set to 1. Or am I missing something?", "author": "cemozerr", "createdAt": "2020-10-07T16:14:33Z", "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/util/PendingPool.java", "diffHunk": "@@ -95,32 +109,39 @@\n   public static PendingPool<ValidateableAttestation> createForAttestations() {\n     return new PendingPool<>(\n         DEFAULT_HISTORICAL_SLOT_TOLERANCE,\n-        DEFAULT_FUTURE_SLOT_TOLERANCE,\n+        FutureItems.DEFAULT_FUTURE_SLOT_TOLERANCE,\n+        DEFAULT_MAX_ITEMS,\n         ValidateableAttestation::hash_tree_root,\n         ValidateableAttestation::getDependentBlockRoots,\n         ValidateableAttestation::getEarliestSlotForForkChoiceProcessing);\n   }\n \n-  public void add(T item) {\n+  public synchronized void add(T item) {\n     if (shouldIgnoreItem(item)) {\n       // Ignore items outside of the range we care about\n       return;\n     }\n \n+    // Make room for the new item\n+    while (pendingItems.size() > (maxItems - 1)) {\n+      final SlotAndRoot toRemove = orderedPendingItems.pollFirst();\n+      if (toRemove == null) {", "originalCommit": "eade5149a13d5cd863031e52b72ecfce7478bfb5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIzOTI5Nw==", "url": "https://github.com/ConsenSys/teku/pull/2880#discussion_r501239297", "bodyText": "It is redundant - only added it because IntelliJ was complaining about a possible NullPointerException.  I don't think it hurts anything to be extra careful about nulls though.", "author": "mbaxter", "createdAt": "2020-10-07T18:54:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEzOTUyMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0NTcxMQ==", "url": "https://github.com/ConsenSys/teku/pull/2880#discussion_r501145711", "bodyText": "I think you forgot to add the item root to the dependants set here.", "author": "cemozerr", "createdAt": "2020-10-07T16:23:39Z", "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/util/PendingPool.java", "diffHunk": "@@ -95,32 +109,39 @@\n   public static PendingPool<ValidateableAttestation> createForAttestations() {\n     return new PendingPool<>(\n         DEFAULT_HISTORICAL_SLOT_TOLERANCE,\n-        DEFAULT_FUTURE_SLOT_TOLERANCE,\n+        FutureItems.DEFAULT_FUTURE_SLOT_TOLERANCE,\n+        DEFAULT_MAX_ITEMS,\n         ValidateableAttestation::hash_tree_root,\n         ValidateableAttestation::getDependentBlockRoots,\n         ValidateableAttestation::getEarliestSlotForForkChoiceProcessing);\n   }\n \n-  public void add(T item) {\n+  public synchronized void add(T item) {\n     if (shouldIgnoreItem(item)) {\n       // Ignore items outside of the range we care about\n       return;\n     }\n \n+    // Make room for the new item\n+    while (pendingItems.size() > (maxItems - 1)) {\n+      final SlotAndRoot toRemove = orderedPendingItems.pollFirst();\n+      if (toRemove == null) {\n+        break;\n+      }\n+      remove(pendingItems.get(toRemove.getRoot()));\n+    }\n+\n     final Bytes32 itemRoot = hashTreeRootFunction.apply(item);\n     final Collection<Bytes32> requiredRoots = requiredBlockRootsFunction.apply(item);\n \n     requiredRoots.forEach(\n         requiredRoot ->\n             // Index item by required roots\n             pendingItemsByRequiredBlockRoot\n-                // Go ahead and add our root when the set is constructed to ensure we don't\n-                // accidentally\n-                // drop this set when we prune empty sets\n                 .computeIfAbsent(\n                     requiredRoot,\n                     (key) -> {\n-                      final Set<Bytes32> dependants = createRootSet(itemRoot);\n+                      final Set<Bytes32> dependants = new HashSet<>();", "originalCommit": "eade5149a13d5cd863031e52b72ecfce7478bfb5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI0MDI3Nw==", "url": "https://github.com/ConsenSys/teku/pull/2880#discussion_r501240277", "bodyText": "I cut this on purpose because it's no longer needed since these methods are all synchronized now.  See the comment I removed above.  The item is added below on line 149.", "author": "mbaxter", "createdAt": "2020-10-07T18:55:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0NTcxMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0OTc2Nw==", "url": "https://github.com/ConsenSys/teku/pull/2880#discussion_r501149767", "bodyText": "Did we change our prune methodology to make it more efficient?", "author": "cemozerr", "createdAt": "2020-10-07T16:29:35Z", "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/util/PendingPool.java", "diffHunk": "@@ -266,8 +290,18 @@ public void onNewFinalizedCheckpoint(final Checkpoint checkpoint) {\n   }\n \n   @VisibleForTesting\n-  void prune() {\n-    pruneItems(this::isTooOld);\n+  synchronized void prune() {\n+    final UInt64 slotLimit = latestFinalizedSlot.max(calculateItemAgeLimit());\n+\n+    final List<T> toRemove = new ArrayList<>();\n+    for (SlotAndRoot slotAndRoot : orderedPendingItems) {", "originalCommit": "eade5149a13d5cd863031e52b72ecfce7478bfb5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI0MTI3MA==", "url": "https://github.com/ConsenSys/teku/pull/2880#discussion_r501241270", "bodyText": "Yeah - added a new collection (orderedPendingItems) to track the items ordered by slot.  We can now prune things faster by only iterating over the out-of-date items.", "author": "mbaxter", "createdAt": "2020-10-07T18:57:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0OTc2Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE1NDg3NA==", "url": "https://github.com/ConsenSys/teku/pull/2880#discussion_r501154874", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                assertThat(pendingPool.size()).isEqualTo(15);\n          \n          \n            \n                assertThat(pendingPool.size()).isEqualTo(maxItems);", "author": "cemozerr", "createdAt": "2020-10-07T16:37:24Z", "path": "ethereum/statetransition/src/test/java/tech/pegasys/teku/statetransition/util/PendingPoolTest.java", "diffHunk": "@@ -159,6 +160,86 @@ public void add_finalizedBlock() {\n     assertThat(requiredRootDroppedEvents).isEmpty();\n   }\n \n+  @Test\n+  public void add_moreThanMaxItems() {\n+    for (int i = 0; i < maxItems * 2; i++) {\n+      final SignedBeaconBlock block =\n+          dataStructureUtil.randomSignedBeaconBlock(currentSlot.longValue());\n+      pendingPool.add(block);\n+\n+      final int expectedSize = Math.min(maxItems, i + 1);\n+      assertThat(pendingPool.contains(block)).isTrue();\n+      assertThat(pendingPool.size()).isEqualTo(expectedSize);\n+    }\n+\n+    // Final sanity check\n+    assertThat(pendingPool.size()).isEqualTo(15);", "originalCommit": "eade5149a13d5cd863031e52b72ecfce7478bfb5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b07752ffc6be104718e65f6792bb180d2bf2212", "chunk": "diff --git a/ethereum/statetransition/src/test/java/tech/pegasys/teku/statetransition/util/PendingPoolTest.java b/ethereum/statetransition/src/test/java/tech/pegasys/teku/statetransition/util/PendingPoolTest.java\nindex 0e380912a..94ee74a9c 100644\n--- a/ethereum/statetransition/src/test/java/tech/pegasys/teku/statetransition/util/PendingPoolTest.java\n+++ b/ethereum/statetransition/src/test/java/tech/pegasys/teku/statetransition/util/PendingPoolTest.java\n\n@@ -173,7 +173,7 @@ public class PendingPoolTest {\n     }\n \n     // Final sanity check\n-    assertThat(pendingPool.size()).isEqualTo(15);\n+    assertThat(pendingPool.size()).isEqualTo(maxItems);\n   }\n \n   @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE1NjY4Mg==", "url": "https://github.com/ConsenSys/teku/pull/2880#discussion_r501156682", "bodyText": "Should we be adding the older block in the first place? if it's older than the rest of the items in PendingItems?", "author": "cemozerr", "createdAt": "2020-10-07T16:40:12Z", "path": "ethereum/statetransition/src/test/java/tech/pegasys/teku/statetransition/util/PendingPoolTest.java", "diffHunk": "@@ -159,6 +160,86 @@ public void add_finalizedBlock() {\n     assertThat(requiredRootDroppedEvents).isEmpty();\n   }\n \n+  @Test\n+  public void add_moreThanMaxItems() {\n+    for (int i = 0; i < maxItems * 2; i++) {\n+      final SignedBeaconBlock block =\n+          dataStructureUtil.randomSignedBeaconBlock(currentSlot.longValue());\n+      pendingPool.add(block);\n+\n+      final int expectedSize = Math.min(maxItems, i + 1);\n+      assertThat(pendingPool.contains(block)).isTrue();\n+      assertThat(pendingPool.size()).isEqualTo(expectedSize);\n+    }\n+\n+    // Final sanity check\n+    assertThat(pendingPool.size()).isEqualTo(15);\n+  }\n+\n+  @Test\n+  public void add_dontDropItemsWhenNewItemsIgnored() {\n+    final List<SignedBeaconBlock> blocks = new ArrayList<>();\n+    for (int i = 0; i < maxItems; i++) {\n+      final SignedBeaconBlock block =\n+          dataStructureUtil.randomSignedBeaconBlock(currentSlot.longValue());\n+      pendingPool.add(block);\n+      blocks.add(block);\n+\n+      final int expectedSize = Math.min(maxItems, i + 1);\n+      assertThat(pendingPool.contains(block)).isTrue();\n+      assertThat(pendingPool.size()).isEqualTo(expectedSize);\n+    }\n+    assertThat(pendingPool.size()).isEqualTo(maxItems);\n+\n+    // Add some blocks that should be ignored\n+    SignedBeaconBlock ignoredBlock =\n+        dataStructureUtil.randomSignedBeaconBlock(currentSlot.plus(futureTolerance).plus(1));\n+    pendingPool.add(ignoredBlock);\n+    ignoredBlock =\n+        dataStructureUtil.randomSignedBeaconBlock(currentSlot.minus(historicalTolerance).minus(1));\n+    pendingPool.add(ignoredBlock);\n+\n+    // All initial blocks should still be present\n+    assertThat(pendingPool.size()).isEqualTo(maxItems);\n+    blocks.forEach(b -> assertThat(pendingPool.contains(b)).isTrue());\n+  }\n+\n+  @Test\n+  public void add_shouldDropOldestItemsWhenEnforcingLimits() {\n+    final UInt64 olderSlot = currentSlot;\n+    final UInt64 newerSlot = currentSlot.plus(1);\n+    SignedBeaconBlock block;\n+\n+    // Add older block\n+    SignedBeaconBlock olderBlock = dataStructureUtil.randomSignedBeaconBlock(olderSlot);\n+    pendingPool.add(olderBlock);\n+    assertThat(pendingPool.contains(olderBlock)).isTrue();\n+\n+    // Add max newer blocks\n+    for (int i = 0; i < maxItems; i++) {\n+      block = dataStructureUtil.randomSignedBeaconBlock(newerSlot);\n+      pendingPool.add(block);\n+\n+      assertThat(pendingPool.contains(block)).isTrue();\n+      assertThat(pendingPool.size()).isLessThanOrEqualTo(maxItems);\n+    }\n+\n+    // Older block should've been dropped\n+    assertThat(pendingPool.contains(olderBlock)).isFalse();\n+\n+    // Add older block\n+    olderBlock = dataStructureUtil.randomSignedBeaconBlock(olderSlot);\n+    pendingPool.add(olderBlock);\n+    assertThat(pendingPool.contains(olderBlock)).isTrue();\n+    // Add newer block\n+    block = dataStructureUtil.randomSignedBeaconBlock(newerSlot);\n+    pendingPool.add(block);\n+\n+    // Older block should be dropped when newer block is added", "originalCommit": "eade5149a13d5cd863031e52b72ecfce7478bfb5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI1MDg4OA==", "url": "https://github.com/ConsenSys/teku/pull/2880#discussion_r501250888", "bodyText": "Not sure how much it matters ... but I could pretty easily switch it to ignore newly added items if they're older than the oldest item.  My reasoning was that this way we're always able to add new items to the pending pool.\nThinking about possible attacks:\n\nWith the current version (always add new items):\n\nYou could flood the node with new messages and knock everything else out of the pending pool\nBut you'd have to keep flooding the node with new messages to keep knocking out valid items\n\n\nWith the version where we only keep the newest items:\n\nYou could potentially flood the node with future items and knock everything else out\nThen for some period of time you could potentially block any other items from being added (until the slot ticks forward some number of times and you start to receive more messages in this range) without continuing to flood the node\n\n\n\nIt feels like the current option is a bit safer.", "author": "mbaxter", "createdAt": "2020-10-07T19:15:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE1NjY4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "4b07752ffc6be104718e65f6792bb180d2bf2212", "chunk": "diff --git a/ethereum/statetransition/src/test/java/tech/pegasys/teku/statetransition/util/PendingPoolTest.java b/ethereum/statetransition/src/test/java/tech/pegasys/teku/statetransition/util/PendingPoolTest.java\nindex 0e380912a..94ee74a9c 100644\n--- a/ethereum/statetransition/src/test/java/tech/pegasys/teku/statetransition/util/PendingPoolTest.java\n+++ b/ethereum/statetransition/src/test/java/tech/pegasys/teku/statetransition/util/PendingPoolTest.java\n\n@@ -173,7 +173,7 @@ public class PendingPoolTest {\n     }\n \n     // Final sanity check\n-    assertThat(pendingPool.size()).isEqualTo(15);\n+    assertThat(pendingPool.size()).isEqualTo(maxItems);\n   }\n \n   @Test\n"}}, {"oid": "2d3001ca89f6052e0c403293e874100bd9aea17b", "url": "https://github.com/ConsenSys/teku/commit/2d3001ca89f6052e0c403293e874100bd9aea17b", "message": "Merge branch 'master' into qs-1/add-hard-limits-to-gossip-queues", "committedDate": "2020-10-07T18:52:18Z", "type": "commit"}, {"oid": "4b07752ffc6be104718e65f6792bb180d2bf2212", "url": "https://github.com/ConsenSys/teku/commit/4b07752ffc6be104718e65f6792bb180d2bf2212", "message": "Use maxItems variable\n\nCo-authored-by: Cem Ozer <cemozer2018@u.northwestern.edu>", "committedDate": "2020-10-07T19:19:19Z", "type": "commit"}, {"oid": "552bdd58726e7994fcaacc76e1b0b7c122c3402b", "url": "https://github.com/ConsenSys/teku/commit/552bdd58726e7994fcaacc76e1b0b7c122c3402b", "message": "Merge branch 'master' into qs-1/add-hard-limits-to-gossip-queues", "committedDate": "2020-10-07T20:11:50Z", "type": "commit"}, {"oid": "dfa2e624e677c1fa8787f2491d2446ef7ababf8b", "url": "https://github.com/ConsenSys/teku/commit/dfa2e624e677c1fa8787f2491d2446ef7ababf8b", "message": "Merge branch 'master' into qs-1/add-hard-limits-to-gossip-queues", "committedDate": "2020-10-08T14:29:29Z", "type": "commit"}, {"oid": "f2eff437a107477695e1b88943cd5b136b83ad62", "url": "https://github.com/ConsenSys/teku/commit/f2eff437a107477695e1b88943cd5b136b83ad62", "message": "Merge branch 'master' into qs-1/add-hard-limits-to-gossip-queues", "committedDate": "2020-10-08T21:16:16Z", "type": "commit"}, {"oid": "0c4cb74dba6c5fe9c66ddc05bd498bbaaa662eb8", "url": "https://github.com/ConsenSys/teku/commit/0c4cb74dba6c5fe9c66ddc05bd498bbaaa662eb8", "message": "Merge branch 'master' into qs-1/add-hard-limits-to-gossip-queues", "committedDate": "2020-10-09T14:47:49Z", "type": "commit"}]}