{"pr_number": 1510, "pr_title": "[BC-315] Add RocksDB Database implementation", "pr_createdAt": "2020-03-31T21:27:31Z", "pr_url": "https://github.com/ConsenSys/teku/pull/1510", "timeline": [{"oid": "71710bc14a2af41c6871afebcf1272f8f7528793", "url": "https://github.com/ConsenSys/teku/commit/71710bc14a2af41c6871afebcf1272f8f7528793", "message": "(In progress) Start adding rocksdb database", "committedDate": "2020-03-23T14:50:07Z", "type": "commit"}, {"oid": "3b578eeb1d6b3999be97c235346a2d72346d485f", "url": "https://github.com/ConsenSys/teku/commit/3b578eeb1d6b3999be97c235346a2d72346d485f", "message": "Close to compiling version of the RocksDbDatabase.", "committedDate": "2020-03-23T14:50:07Z", "type": "commit"}, {"oid": "1e10121097a5d8cf62235d38eea96a5b126e28a3", "url": "https://github.com/ConsenSys/teku/commit/1e10121097a5d8cf62235d38eea96a5b126e28a3", "message": "Implemented methods, got code compiling, handle transactions and iterators properly.", "committedDate": "2020-03-23T14:50:07Z", "type": "commit"}, {"oid": "525ebbd7286a7cd37162739307d8d9695c2d22eb", "url": "https://github.com/ConsenSys/teku/commit/525ebbd7286a7cd37162739307d8d9695c2d22eb", "message": "fixed static import.", "committedDate": "2020-03-23T14:56:35Z", "type": "commit"}, {"oid": "f0236b37d514907c699dda3d5620bd942f817656", "url": "https://github.com/ConsenSys/teku/commit/f0236b37d514907c699dda3d5620bd942f817656", "message": "Set column family options", "committedDate": "2020-03-23T18:36:09Z", "type": "commit"}, {"oid": "5e21eec60f7f7ef892b5f74366312cdfceb04581", "url": "https://github.com/ConsenSys/teku/commit/5e21eec60f7f7ef892b5f74366312cdfceb04581", "message": "Merge branch 'master' into bc-315/add-rocksdb-impl", "committedDate": "2020-03-25T18:19:55Z", "type": "commit"}, {"oid": "47320082a96d0dcf97427009cb157053eabeadc1", "url": "https://github.com/ConsenSys/teku/commit/47320082a96d0dcf97427009cb157053eabeadc1", "message": "Merge branch 'master' into bc-315/add-rocksdb-impl", "committedDate": "2020-03-30T16:01:49Z", "type": "commit"}, {"oid": "7f4bdfc6b91fc29af68fbe6440d8d55b4016d8f3", "url": "https://github.com/ConsenSys/teku/commit/7f4bdfc6b91fc29af68fbe6440d8d55b4016d8f3", "message": "Incorporate changes from merge", "committedDate": "2020-03-30T16:08:48Z", "type": "commit"}, {"oid": "2f9cc58b1b0355044291f8c96380ff13ac350593", "url": "https://github.com/ConsenSys/teku/commit/2f9cc58b1b0355044291f8c96380ff13ac350593", "message": "Add rocksdb config defaults, update factory to create v2 database", "committedDate": "2020-03-30T16:43:49Z", "type": "commit"}, {"oid": "f82dd14090d2e97295f52fe1674698ead8745718", "url": "https://github.com/ConsenSys/teku/commit/f82dd14090d2e97295f52fe1674698ead8745718", "message": "Make database test generic across implementations", "committedDate": "2020-03-30T19:08:00Z", "type": "commit"}, {"oid": "b9d53496a002826d0ca0709ba21d66aacf44a1b6", "url": "https://github.com/ConsenSys/teku/commit/b9d53496a002826d0ca0709ba21d66aacf44a1b6", "message": "Merge branch 'master' into bc-315/add-rocksdb-impl", "committedDate": "2020-03-30T19:12:41Z", "type": "commit"}, {"oid": "44890020a262d86b69b077286c61ff24dd265577", "url": "https://github.com/ConsenSys/teku/commit/44890020a262d86b69b077286c61ff24dd265577", "message": "Use expected identifier for rocksdb default column", "committedDate": "2020-03-31T16:19:39Z", "type": "commit"}, {"oid": "ba1ff02a0389d9d1702a68447bec5a939888ef89", "url": "https://github.com/ConsenSys/teku/commit/ba1ff02a0389d9d1702a68447bec5a939888ef89", "message": "Deserialize state using concrete class", "committedDate": "2020-03-31T16:23:29Z", "type": "commit"}, {"oid": "8a871d35f67ff5e121c0914b360513e70dccef5e", "url": "https://github.com/ConsenSys/teku/commit/8a871d35f67ff5e121c0914b360513e70dccef5e", "message": "Fix spotless error", "committedDate": "2020-03-31T16:23:41Z", "type": "commit"}, {"oid": "cb0b95419a425122b0cd4f82dff1e8c9bb42bbfa", "url": "https://github.com/ConsenSys/teku/commit/cb0b95419a425122b0cd4f82dff1e8c9bb42bbfa", "message": "Fix column reference", "committedDate": "2020-03-31T16:37:04Z", "type": "commit"}, {"oid": "11e8be2c851e4f9e4f7d562a28fb3b0620a7bda1", "url": "https://github.com/ConsenSys/teku/commit/11e8be2c851e4f9e4f7d562a28fb3b0620a7bda1", "message": "Upgrade rocksdb version", "committedDate": "2020-03-31T21:17:39Z", "type": "commit"}, {"oid": "c2b635f4ed0618944e0dc80e17fa7bd369ec2198", "url": "https://github.com/ConsenSys/teku/commit/c2b635f4ed0618944e0dc80e17fa7bd369ec2198", "message": "Use junit @TempDir annotation", "committedDate": "2020-03-31T21:19:00Z", "type": "commit"}, {"oid": "a5689133d11a469075d20c4bb640eef9703cd86c", "url": "https://github.com/ConsenSys/teku/commit/a5689133d11a469075d20c4bb640eef9703cd86c", "message": "Fix a few issues in RocksDbDatabase implementation\n\nFix columng reference, fix unintentionally skipped keys.  Handle null\nvalues when deserializing.", "committedDate": "2020-03-31T21:20:28Z", "type": "commit"}, {"oid": "cefe0d28c48fee5563bc0fb02a096bbcfaefa93e", "url": "https://github.com/ConsenSys/teku/commit/cefe0d28c48fee5563bc0fb02a096bbcfaefa93e", "message": "Merge branch 'master' into bc-315/add-rocksdb-impl", "committedDate": "2020-03-31T21:21:09Z", "type": "commit"}, {"oid": "0854e863ab2e6ac565916341775df7639c3dee78", "url": "https://github.com/ConsenSys/teku/commit/0854e863ab2e6ac565916341775df7639c3dee78", "message": "Merge branch 'master' into bc-315/add-rocksdb-impl", "committedDate": "2020-04-01T15:36:42Z", "type": "commit"}, {"oid": "2b526ae433d8f76cd424a10ac258ada6a6367957", "url": "https://github.com/ConsenSys/teku/commit/2b526ae433d8f76cd424a10ac258ada6a6367957", "message": "Move rocksdb classes into server package", "committedDate": "2020-04-01T15:42:55Z", "type": "commit"}, {"oid": "e1db0d91bd4ea24b507cb19448ca533add4abe7a", "url": "https://github.com/ConsenSys/teku/commit/e1db0d91bd4ea24b507cb19448ca533add4abe7a", "message": "Reorganize files, some cleanup to RocksDbDatabase\n\nMove MapDbDatabase and related utils to mapdb package.  Fix some issues\nwith exception handling, update var names, reorganize methods in\nRocksDbDatabase.", "committedDate": "2020-04-01T19:34:13Z", "type": "commit"}, {"oid": "c49ca5232736b32339c9ad17761af72d83f541c2", "url": "https://github.com/ConsenSys/teku/commit/c49ca5232736b32339c9ad17761af72d83f541c2", "message": "Add test that stores block with a very large slot", "committedDate": "2020-04-01T22:00:48Z", "type": "commit"}, {"oid": "101a012c1523e2af515a4febc436ea6168cc2aae", "url": "https://github.com/ConsenSys/teku/commit/101a012c1523e2af515a4febc436ea6168cc2aae", "message": "Merge branch 'master' into bc-315/add-rocksdb-impl", "committedDate": "2020-04-01T22:03:02Z", "type": "commit"}, {"oid": "8f967b1517ec73cfe6ce75b248405e69a0025c26", "url": "https://github.com/ConsenSys/teku/commit/8f967b1517ec73cfe6ce75b248405e69a0025c26", "message": "Standarize exception handling", "committedDate": "2020-04-01T22:17:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkxMzgyNg==", "url": "https://github.com/ConsenSys/teku/pull/1510#discussion_r401913826", "bodyText": "Seems suspicious that we're storing the state in hot states and the blocks in finalised.  Suspect this should just be storing hot blocks by root.", "author": "ajsutton", "createdAt": "2020-04-01T21:15:04Z", "path": "storage/src/main/java/tech/pegasys/artemis/storage/rocksdb/RocksDbDatabase.java", "diffHunk": "@@ -0,0 +1,669 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.storage.rocksdb;\n+\n+import static tech.pegasys.artemis.storage.rocksdb.RocksDbColumn.CHECKPOINT_STATES;\n+import static tech.pegasys.artemis.storage.rocksdb.RocksDbColumn.DEFAULT;\n+import static tech.pegasys.artemis.storage.rocksdb.RocksDbColumn.FINALIZED_BLOCKS_BY_ROOT;\n+import static tech.pegasys.artemis.storage.rocksdb.RocksDbColumn.FINALIZED_ROOTS_BY_SLOT;\n+import static tech.pegasys.artemis.storage.rocksdb.RocksDbColumn.FINALIZED_STATES_BY_ROOT;\n+import static tech.pegasys.artemis.storage.rocksdb.RocksDbColumn.HOT_BLOCKS_BY_ROOT;\n+import static tech.pegasys.artemis.storage.rocksdb.RocksDbColumn.HOT_STATES_BY_ROOT;\n+import static tech.pegasys.artemis.storage.rocksdb.RocksDbColumn.LATEST_MESSAGES;\n+import static tech.pegasys.artemis.storage.rocksdb.RocksDbDefaultColumnKey.BEST_JUSTIFIED_CHECKPOINT_KEY;\n+import static tech.pegasys.artemis.storage.rocksdb.RocksDbDefaultColumnKey.FINALIZED_CHECKPOINT_KEY;\n+import static tech.pegasys.artemis.storage.rocksdb.RocksDbDefaultColumnKey.GENESIS_TIME_KEY;\n+import static tech.pegasys.artemis.storage.rocksdb.RocksDbDefaultColumnKey.JUSTIFIED_CHECKPOINT_KEY;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.primitives.Longs;\n+import com.google.common.primitives.UnsignedLong;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentNavigableMap;\n+import java.util.concurrent.ConcurrentSkipListMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.rocksdb.BlockBasedTableConfig;\n+import org.rocksdb.ColumnFamilyDescriptor;\n+import org.rocksdb.ColumnFamilyHandle;\n+import org.rocksdb.ColumnFamilyOptions;\n+import org.rocksdb.DBOptions;\n+import org.rocksdb.Env;\n+import org.rocksdb.LRUCache;\n+import org.rocksdb.RocksDBException;\n+import org.rocksdb.RocksIterator;\n+import org.rocksdb.Statistics;\n+import org.rocksdb.Transaction;\n+import org.rocksdb.Transaction.TransactionState;\n+import org.rocksdb.TransactionDB;\n+import org.rocksdb.TransactionDBOptions;\n+import org.rocksdb.WriteOptions;\n+import tech.pegasys.artemis.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.datastructures.state.BeaconStateImpl;\n+import tech.pegasys.artemis.datastructures.state.Checkpoint;\n+import tech.pegasys.artemis.datastructures.util.SimpleOffsetSerializer;\n+import tech.pegasys.artemis.storage.Store;\n+import tech.pegasys.artemis.storage.events.StorageUpdate;\n+import tech.pegasys.artemis.storage.events.StorageUpdateResult;\n+import tech.pegasys.artemis.storage.server.Database;\n+import tech.pegasys.artemis.storage.server.DatabaseStorageException;\n+import tech.pegasys.artemis.storage.server.StateStorageMode;\n+import tech.pegasys.artemis.util.sos.SimpleOffsetSerializable;\n+\n+public class RocksDbDatabase implements Database {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  static {\n+    RocksDbUtil.loadNativeLibrary();\n+  }\n+\n+  private final DBOptions options;\n+  private final TransactionDBOptions txOptions;\n+  private final AtomicBoolean closed = new AtomicBoolean(false);\n+  private final TransactionDB db;\n+  private final ImmutableMap<RocksDbColumn, ColumnFamilyHandle> columnHandlesByName;\n+  private final StateStorageMode stateStorageMode;\n+\n+  // In memory only\n+  private final ConcurrentNavigableMap<UnsignedLong, Set<Bytes32>> hotRootsBySlotCache =\n+      new ConcurrentSkipListMap<>();\n+\n+  public static Database createOnDisk(\n+      final RocksDbConfiguration configuration, final StateStorageMode stateStorageMode) {\n+    return new RocksDbDatabase(configuration, stateStorageMode);\n+  }\n+\n+  private RocksDbDatabase(\n+      final RocksDbConfiguration configuration, final StateStorageMode stateStorageMode) {\n+    this.stateStorageMode = stateStorageMode;\n+    final Statistics stats = new Statistics();\n+\n+    options =\n+        new DBOptions()\n+            .setCreateIfMissing(true)\n+            .setMaxOpenFiles(configuration.getMaxOpenFiles())\n+            .setMaxBackgroundCompactions(configuration.getMaxBackgroundCompactions())\n+            .setStatistics(stats)\n+            .setCreateMissingColumnFamilies(true)\n+            .setEnv(\n+                Env.getDefault().setBackgroundThreads(configuration.getBackgroundThreadCount()));\n+\n+    final ColumnFamilyOptions columnFamilyOptions =\n+        new ColumnFamilyOptions().setTableFormatConfig(createBlockBasedTableConfig(configuration));\n+    List<ColumnFamilyDescriptor> columnDescriptors =\n+        EnumSet.allOf(RocksDbColumn.class).stream()\n+            .map(col -> new ColumnFamilyDescriptor(col.getId(), columnFamilyOptions))\n+            .collect(Collectors.toList());\n+\n+    final List<ColumnFamilyHandle> columnHandles = new ArrayList<>(columnDescriptors.size());\n+\n+    Map<Bytes, RocksDbColumn> columnsById =\n+        EnumSet.allOf(RocksDbColumn.class).stream()\n+            .collect(Collectors.toMap(col -> Bytes.wrap(col.getId()), Function.identity()));\n+    txOptions = new TransactionDBOptions();\n+    try {\n+      db =\n+          TransactionDB.open(\n+              options,\n+              txOptions,\n+              configuration.getDatabaseDir().toString(),\n+              columnDescriptors,\n+              columnHandles);\n+\n+      final ImmutableMap.Builder<RocksDbColumn, ColumnFamilyHandle> builder =\n+          ImmutableMap.builder();\n+      for (ColumnFamilyHandle columnHandle : columnHandles) {\n+        final RocksDbColumn rocksDbColumn = columnsById.get(Bytes.wrap(columnHandle.getName()));\n+        builder.put(rocksDbColumn, columnHandle);\n+      }\n+      columnHandlesByName = builder.build();\n+\n+    } catch (RocksDBException e) {\n+      throw new DatabaseStorageException(\n+          \"Failed to open database at path: \" + configuration.getDatabaseDir(), e);\n+    }\n+  }\n+\n+  private BlockBasedTableConfig createBlockBasedTableConfig(final RocksDbConfiguration config) {\n+    final LRUCache cache = new LRUCache(config.getCacheCapacity());\n+    return new BlockBasedTableConfig().setBlockCache(cache);\n+  }\n+\n+  @Override\n+  public void storeGenesis(final Store store) {\n+    throwIfClosed();\n+    final WriteOptions options = new WriteOptions();\n+    try (Transaction transaction = db.beginTransaction(options)) {\n+      try {\n+        ColumnFamilyHandle defaultColumn = columnHandlesByName.get(DEFAULT);\n+        transaction.put(\n+            defaultColumn,\n+            GENESIS_TIME_KEY.getId(),\n+            Longs.toByteArray(store.getGenesisTime().longValue()));\n+        transaction.put(\n+            defaultColumn,\n+            RocksDbDefaultColumnKey.JUSTIFIED_CHECKPOINT_KEY.getId(),\n+            serialize(store.getJustifiedCheckpoint()));\n+        transaction.put(\n+            defaultColumn,\n+            RocksDbDefaultColumnKey.BEST_JUSTIFIED_CHECKPOINT_KEY.getId(),\n+            serialize(store.getBestJustifiedCheckpoint()));\n+        transaction.put(\n+            defaultColumn,\n+            FINALIZED_CHECKPOINT_KEY.getId(),\n+            serialize(store.getFinalizedCheckpoint()));\n+        store\n+            .getBlockRoots()\n+            .forEach(\n+                root -> {\n+                  final SignedBeaconBlock block = store.getSignedBlock(root);\n+                  final BeaconState state = store.getBlockState(root);\n+                  try {\n+                    addHotBlock(transaction, root, block);\n+                    byte[] rootArray = root.toArrayUnsafe();\n+                    transaction.put(\n+                        columnHandlesByName.get(HOT_STATES_BY_ROOT), rootArray, serialize(state));\n+                    transaction.put(\n+                        columnHandlesByName.get(FINALIZED_ROOTS_BY_SLOT),\n+                        Longs.toByteArray(block.getSlot().longValue()),\n+                        rootArray);\n+                    transaction.put(\n+                        columnHandlesByName.get(FINALIZED_BLOCKS_BY_ROOT),\n+                        rootArray,\n+                        serialize(block));", "originalCommit": "0854e863ab2e6ac565916341775df7639c3dee78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM3ODAxNA==", "url": "https://github.com/ConsenSys/teku/pull/1510#discussion_r402378014", "bodyText": "We're storing state and blocks in both hot and cold storage here (we should only have 1 block / state here since we're handling genesis - the forEach is a little misleading): see addHotBlock on 190 and putFinalizedState on line 202.  We need the latest finalized block and state in both hot and cold storage - if we don't have any hot blocks / state we won't be able to restart because the fork choice and block import logic runs on top of RecentChainData.", "author": "mbaxter", "createdAt": "2020-04-02T14:54:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkxMzgyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM5OTE3MA==", "url": "https://github.com/ConsenSys/teku/pull/1510#discussion_r402399170", "bodyText": "I've added some extra comments to make this clearer.  And verified we have tests to cover this.", "author": "mbaxter", "createdAt": "2020-04-02T15:21:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkxMzgyNg=="}], "type": "inlineReview", "revised_code": {"commit": "c49ca5232736b32339c9ad17761af72d83f541c2", "chunk": "diff --git a/storage/src/main/java/tech/pegasys/artemis/storage/rocksdb/RocksDbDatabase.java b/storage/src/main/java/tech/pegasys/artemis/storage/server/rocksdb/RocksDbDatabase.java\nsimilarity index 78%\nrename from storage/src/main/java/tech/pegasys/artemis/storage/rocksdb/RocksDbDatabase.java\nrename to storage/src/main/java/tech/pegasys/artemis/storage/server/rocksdb/RocksDbDatabase.java\nindex e12038d304..90e372427c 100644\n--- a/storage/src/main/java/tech/pegasys/artemis/storage/rocksdb/RocksDbDatabase.java\n+++ b/storage/src/main/java/tech/pegasys/artemis/storage/server/rocksdb/RocksDbDatabase.java\n\n@@ -11,20 +11,20 @@\n  * specific language governing permissions and limitations under the License.\n  */\n \n-package tech.pegasys.artemis.storage.rocksdb;\n-\n-import static tech.pegasys.artemis.storage.rocksdb.RocksDbColumn.CHECKPOINT_STATES;\n-import static tech.pegasys.artemis.storage.rocksdb.RocksDbColumn.DEFAULT;\n-import static tech.pegasys.artemis.storage.rocksdb.RocksDbColumn.FINALIZED_BLOCKS_BY_ROOT;\n-import static tech.pegasys.artemis.storage.rocksdb.RocksDbColumn.FINALIZED_ROOTS_BY_SLOT;\n-import static tech.pegasys.artemis.storage.rocksdb.RocksDbColumn.FINALIZED_STATES_BY_ROOT;\n-import static tech.pegasys.artemis.storage.rocksdb.RocksDbColumn.HOT_BLOCKS_BY_ROOT;\n-import static tech.pegasys.artemis.storage.rocksdb.RocksDbColumn.HOT_STATES_BY_ROOT;\n-import static tech.pegasys.artemis.storage.rocksdb.RocksDbColumn.LATEST_MESSAGES;\n-import static tech.pegasys.artemis.storage.rocksdb.RocksDbDefaultColumnKey.BEST_JUSTIFIED_CHECKPOINT_KEY;\n-import static tech.pegasys.artemis.storage.rocksdb.RocksDbDefaultColumnKey.FINALIZED_CHECKPOINT_KEY;\n-import static tech.pegasys.artemis.storage.rocksdb.RocksDbDefaultColumnKey.GENESIS_TIME_KEY;\n-import static tech.pegasys.artemis.storage.rocksdb.RocksDbDefaultColumnKey.JUSTIFIED_CHECKPOINT_KEY;\n+package tech.pegasys.artemis.storage.server.rocksdb;\n+\n+import static tech.pegasys.artemis.storage.server.rocksdb.RocksDbColumn.CHECKPOINT_STATES;\n+import static tech.pegasys.artemis.storage.server.rocksdb.RocksDbColumn.DEFAULT;\n+import static tech.pegasys.artemis.storage.server.rocksdb.RocksDbColumn.FINALIZED_BLOCKS_BY_ROOT;\n+import static tech.pegasys.artemis.storage.server.rocksdb.RocksDbColumn.FINALIZED_ROOTS_BY_SLOT;\n+import static tech.pegasys.artemis.storage.server.rocksdb.RocksDbColumn.FINALIZED_STATES_BY_ROOT;\n+import static tech.pegasys.artemis.storage.server.rocksdb.RocksDbColumn.HOT_BLOCKS_BY_ROOT;\n+import static tech.pegasys.artemis.storage.server.rocksdb.RocksDbColumn.HOT_STATES_BY_ROOT;\n+import static tech.pegasys.artemis.storage.server.rocksdb.RocksDbColumn.LATEST_MESSAGES;\n+import static tech.pegasys.artemis.storage.server.rocksdb.RocksDbDefaultColumnKey.BEST_JUSTIFIED_CHECKPOINT_KEY;\n+import static tech.pegasys.artemis.storage.server.rocksdb.RocksDbDefaultColumnKey.FINALIZED_CHECKPOINT_KEY;\n+import static tech.pegasys.artemis.storage.server.rocksdb.RocksDbDefaultColumnKey.GENESIS_TIME_KEY;\n+import static tech.pegasys.artemis.storage.server.rocksdb.RocksDbDefaultColumnKey.JUSTIFIED_CHECKPOINT_KEY;\n \n import com.google.common.collect.ImmutableMap;\n import com.google.common.primitives.Longs;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1NzU5Mw==", "url": "https://github.com/ConsenSys/teku/pull/1510#discussion_r401957593", "bodyText": "Why doesn't this use the @TempDir support?", "author": "ajsutton", "createdAt": "2020-04-01T22:56:31Z", "path": "storage/src/test/java/tech/pegasys/artemis/storage/server/AbstractStorageBackedDatabaseTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.storage.server;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.google.common.io.Files;\n+import com.google.common.primitives.UnsignedLong;\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+import tech.pegasys.artemis.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.datastructures.state.Checkpoint;\n+import tech.pegasys.artemis.storage.TrackingStorageUpdateChannel;\n+\n+public abstract class AbstractStorageBackedDatabaseTest extends AbstractDatabaseTest {\n+\n+  protected abstract Database createDatabase(\n+      final File tempDir, final StateStorageMode storageMode);\n+\n+  @Override\n+  protected Database createDatabase(final StateStorageMode storageMode) {\n+    final File tmpDir = Files.createTempDir();", "originalCommit": "8f967b1517ec73cfe6ce75b248405e69a0025c26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM5ODQyNw==", "url": "https://github.com/ConsenSys/teku/pull/1510#discussion_r402398427", "bodyText": "This is overriding the db create method from AbstractDatabaseTest, which covers all databases and doesn't assume that databases are storage-backed.  So, I didn't see a simple way to inject the @TempDir via a parameter without adding unnecessary file creation for memory-backed Database implementations.", "author": "mbaxter", "createdAt": "2020-04-02T15:20:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1NzU5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "38d939cf47b37ee05acfb2637511ca0e96a74306", "chunk": "diff --git a/storage/src/test/java/tech/pegasys/artemis/storage/server/AbstractStorageBackedDatabaseTest.java b/storage/src/test/java/tech/pegasys/artemis/storage/server/AbstractStorageBackedDatabaseTest.java\nindex dc743db52b..50443a44b6 100644\n--- a/storage/src/test/java/tech/pegasys/artemis/storage/server/AbstractStorageBackedDatabaseTest.java\n+++ b/storage/src/test/java/tech/pegasys/artemis/storage/server/AbstractStorageBackedDatabaseTest.java\n\n@@ -16,15 +16,22 @@ package tech.pegasys.artemis.storage.server;\n import static org.assertj.core.api.Assertions.assertThat;\n \n import com.google.common.io.Files;\n+import com.google.common.io.MoreFiles;\n+import com.google.common.io.RecursiveDeleteOption;\n import com.google.common.primitives.UnsignedLong;\n import java.io.File;\n+import java.io.IOException;\n import java.nio.file.Path;\n+import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import java.util.stream.Collectors;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.io.TempDir;\n import tech.pegasys.artemis.datastructures.blocks.SignedBeaconBlock;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1NzY5Nw==", "url": "https://github.com/ConsenSys/teku/pull/1510#discussion_r401957697", "bodyText": "Does this work for a directory given it won't be empty by the time the test finishes?", "author": "ajsutton", "createdAt": "2020-04-01T22:56:45Z", "path": "storage/src/test/java/tech/pegasys/artemis/storage/server/AbstractStorageBackedDatabaseTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.storage.server;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.google.common.io.Files;\n+import com.google.common.primitives.UnsignedLong;\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+import tech.pegasys.artemis.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.datastructures.state.Checkpoint;\n+import tech.pegasys.artemis.storage.TrackingStorageUpdateChannel;\n+\n+public abstract class AbstractStorageBackedDatabaseTest extends AbstractDatabaseTest {\n+\n+  protected abstract Database createDatabase(\n+      final File tempDir, final StateStorageMode storageMode);\n+\n+  @Override\n+  protected Database createDatabase(final StateStorageMode storageMode) {\n+    final File tmpDir = Files.createTempDir();\n+    tmpDir.deleteOnExit();", "originalCommit": "8f967b1517ec73cfe6ce75b248405e69a0025c26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM5ODc0OA==", "url": "https://github.com/ConsenSys/teku/pull/1510#discussion_r402398748", "bodyText": "Good catch - I've added extra cleanup logic for this.", "author": "mbaxter", "createdAt": "2020-04-02T15:21:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1NzY5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "38d939cf47b37ee05acfb2637511ca0e96a74306", "chunk": "diff --git a/storage/src/test/java/tech/pegasys/artemis/storage/server/AbstractStorageBackedDatabaseTest.java b/storage/src/test/java/tech/pegasys/artemis/storage/server/AbstractStorageBackedDatabaseTest.java\nindex dc743db52b..50443a44b6 100644\n--- a/storage/src/test/java/tech/pegasys/artemis/storage/server/AbstractStorageBackedDatabaseTest.java\n+++ b/storage/src/test/java/tech/pegasys/artemis/storage/server/AbstractStorageBackedDatabaseTest.java\n\n@@ -16,15 +16,22 @@ package tech.pegasys.artemis.storage.server;\n import static org.assertj.core.api.Assertions.assertThat;\n \n import com.google.common.io.Files;\n+import com.google.common.io.MoreFiles;\n+import com.google.common.io.RecursiveDeleteOption;\n import com.google.common.primitives.UnsignedLong;\n import java.io.File;\n+import java.io.IOException;\n import java.nio.file.Path;\n+import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import java.util.stream.Collectors;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.io.TempDir;\n import tech.pegasys.artemis.datastructures.blocks.SignedBeaconBlock;\n"}}, {"oid": "411108d3bf5111a76a612f16d313f104921dedd4", "url": "https://github.com/ConsenSys/teku/commit/411108d3bf5111a76a612f16d313f104921dedd4", "message": "Add some clarifying comments around genesis persistence", "committedDate": "2020-04-02T15:02:10Z", "type": "commit"}, {"oid": "38d939cf47b37ee05acfb2637511ca0e96a74306", "url": "https://github.com/ConsenSys/teku/commit/38d939cf47b37ee05acfb2637511ca0e96a74306", "message": "Make sure tmp directories get cleaned up on teardown", "committedDate": "2020-04-02T15:22:25Z", "type": "commit"}, {"oid": "f16a1030839c97a494818e2505e4abdcd58639e7", "url": "https://github.com/ConsenSys/teku/commit/f16a1030839c97a494818e2505e4abdcd58639e7", "message": "Merge branch 'master' into bc-315/add-rocksdb-impl", "committedDate": "2020-04-02T15:25:57Z", "type": "commit"}]}