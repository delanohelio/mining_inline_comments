{"pr_number": 1153, "pr_title": "Add open API to allow rest framework to be documented.", "pr_createdAt": "2020-02-13T05:39:01Z", "pr_url": "https://github.com/ConsenSys/teku/pull/1153", "timeline": [{"oid": "269784ded33ead3f31e07a83f47dc86efd2cea2c", "url": "https://github.com/ConsenSys/teku/commit/269784ded33ead3f31e07a83f47dc86efd2cea2c", "message": "[WIP] add libraries required to get swagger displaying.\n\nRestructured GenesisTimeHandler to allow custom Summary, Description, tags (grouping)\n\nfor some reason the licence string for MIT was not the same as other libraries, updated the licence check script.\n\nRefactored BeaconRestApi class to be singleton, which allows us to follow the standard context pattern when we build the API endpoints.", "committedDate": "2020-02-10T04:50:18Z", "type": "commit"}, {"oid": "1c4ff16d11fe4e320a27285aa3700deb6a3cc7b8", "url": "https://github.com/ConsenSys/teku/commit/1c4ff16d11fe4e320a27285aa3700deb6a3cc7b8", "message": "[WIP] put some basic structure around adding different handlers. also fix openapi description in genesis_time.", "committedDate": "2020-02-11T05:41:08Z", "type": "commit"}, {"oid": "3e268f2276fd399c21f4059ad2bf4c5e8d04d682", "url": "https://github.com/ConsenSys/teku/commit/3e268f2276fd399c21f4059ad2bf4c5e8d04d682", "message": "update test cases, refactor a little after chat with Adrian.", "committedDate": "2020-02-13T05:33:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2Njk2NA==", "url": "https://github.com/ConsenSys/teku/pull/1153#discussion_r378666964", "bodyText": "Very recently I've added beaconChainHead and modified beaconBlock to expose Alethio a similar API to Prysm's. FYI. It would be nice to connect you guys actually (with Alethio) since they are going to be using this API a lot.", "author": "cemozerr", "createdAt": "2020-02-13T06:08:11Z", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApi.java", "diffHunk": "@@ -75,6 +80,70 @@ public void start() {\n                     ctx.status(SC_NOT_FOUND).result(JsonProvider.objectToJSON(\"Not found\"));\n                   }\n                 }));\n+\n+    app.start();\n+  }\n+\n+  private OpenApiOptions getOpenApiOptions() {\n+    // TODO: Need real values for version etc\n+    Info applicationInfo =\n+        new Info()\n+            .version(\"0.1.0\")\n+            .title(\"Minimal Beacon Node API for Validator\")\n+            .description(\n+                \"A minimal API specification for the beacon node, which enables a validator \"\n+                    + \"to connect and perform its obligations on the Ethereum 2.0 phase 0 beacon chain.\")\n+            .license(\n+                new License()\n+                    .name(\"Apache 2.0\")\n+                    .url(\"https://www.apache.org/licenses/LICENSE-2.0.html\"));\n+    OpenApiOptions options =\n+        new OpenApiOptions(applicationInfo)\n+            .activateAnnotationScanningFor(\"tech.pegasys.artemis.beaconrestapi\")\n+            .path(\"/swagger-docs\")\n+            .swagger(new SwaggerOptions(\"/swagger-ui\"));\n+    // TODO: allow swagger-ui to be turned off - ideally still leave swagger-docs, just dont add the\n+    // swagger-ui endpoint\n+    return options;\n+  }\n+\n+  private void addNodeHandlers() {\n+    app.get(GenesisTimeHandler.ROUTE, new GenesisTimeHandler(chainStorageClient));\n+    /*\n+     * TODO:\n+     *    /node/version\n+     *    /node/syncing\n+     *  Optional:\n+     *    /node/fork\n+     */\n+  }\n+\n+  private void addBeaconHandlers() {\n+    // TODO: not in Minimal or optional specified set - some are similar to lighthouse", "originalCommit": "3e268f2276fd399c21f4059ad2bf4c5e8d04d682", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA2MjA0Ng==", "url": "https://github.com/ConsenSys/teku/pull/1153#discussion_r379062046", "bodyText": "absolutely! Arash is coordinating as PO, we should get together and understand where things are at.", "author": "rolfyone", "createdAt": "2020-02-13T19:10:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY2Njk2NA=="}], "type": "inlineReview", "revised_code": {"commit": "9867307c683bcb0ee1364a92b33e35aa55f3b3e4", "chunk": "diff --git a/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApi.java b/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApi.java\nindex 904d311ec..dcf4a3a6e 100644\n--- a/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApi.java\n+++ b/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApi.java\n\n@@ -85,11 +88,10 @@ public class BeaconRestApi {\n   }\n \n   private OpenApiOptions getOpenApiOptions() {\n-    // TODO: Need real values for version etc\n     Info applicationInfo =\n         new Info()\n-            .version(\"0.1.0\")\n-            .title(\"Minimal Beacon Node API for Validator\")\n+            .title(StringUtils.capitalize(VersionProvider.CLIENT_IDENTITY))\n+            .version(VersionProvider.IMPLEMENTATION_VERSION)\n             .description(\n                 \"A minimal API specification for the beacon node, which enables a validator \"\n                     + \"to connect and perform its obligations on the Ethereum 2.0 phase 0 beacon chain.\")\n"}}, {"oid": "9867307c683bcb0ee1364a92b33e35aa55f3b3e4", "url": "https://github.com/ConsenSys/teku/commit/9867307c683bcb0ee1364a92b33e35aa55f3b3e4", "message": "add version information for openApi to use, implement VersionHandler to show the version string on request and associated test case.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-02-14T04:05:04Z", "type": "commit"}, {"oid": "b7ff2de3960b4767d003e26cff372b80841775f4", "url": "https://github.com/ConsenSys/teku/commit/b7ff2de3960b4767d003e26cff372b80841775f4", "message": "Merge remote-tracking branch 'upstream/master' into openApi", "committedDate": "2020-02-14T04:31:32Z", "type": "commit"}, {"oid": "aa126d6408a9eabafde8e51c8867dbd65cdfc74d", "url": "https://github.com/ConsenSys/teku/commit/aa126d6408a9eabafde8e51c8867dbd65cdfc74d", "message": "added version prefix to genesis_time call, which is a breaking change and shown in acceptance test.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-02-14T04:57:34Z", "type": "commit"}, {"oid": "7ee7ce88092543ff7527745c8e0d722d325fb4f9", "url": "https://github.com/ConsenSys/teku/commit/7ee7ce88092543ff7527745c8e0d722d325fb4f9", "message": "Add test to show that Javalin is created and that the GenesisTimeHandler and VersionHandler are added to that Javalin instance.\n\nThis is sufficient to show that endpoints are linked correctly to Javalin, and there are already at least some acceptance tests calling some endpoints, so the test gap was basically that we didn't show the endpoints get linked to Javalin on a specific route.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-02-14T23:41:57Z", "type": "commit"}, {"oid": "5070af10f402c247ed98b66b618291581aa3c513", "url": "https://github.com/ConsenSys/teku/commit/5070af10f402c247ed98b66b618291581aa3c513", "message": "Merge remote-tracking branch 'upstream/master' into openApi", "committedDate": "2020-02-16T19:42:50Z", "type": "commit"}, {"oid": "c9f93e47ef7c9a7e16ac5766eb4b63692099da6c", "url": "https://github.com/ConsenSys/teku/commit/c9f93e47ef7c9a7e16ac5766eb4b63692099da6c", "message": "remove /v1 prefix, versioning would be via adding /v2 later for specific endpoints\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-02-16T20:37:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzMzQ5NQ==", "url": "https://github.com/ConsenSys/teku/pull/1153#discussion_r379933495", "bodyText": "nit: We don't typically use the @NotNull annotations (IntelliJ does sneak them in from time to time). They are unfortunately on the class path because of Kotlin dependencies.", "author": "ajsutton", "createdAt": "2020-02-16T21:08:24Z", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/GenesisTimeHandler.java", "diffHunk": "@@ -13,24 +13,49 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler;\n-import tech.pegasys.artemis.storage.ChainStorageClient;\n+import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n \n-public class GenesisTimeHandler implements BeaconRestApiHandler {\n+import com.google.common.primitives.UnsignedLong;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jetbrains.annotations.NotNull;\n+import tech.pegasys.artemis.provider.JsonProvider;\n+import tech.pegasys.artemis.storage.ChainStorageClient;\n \n-  private final ChainStorageClient client;\n+public class GenesisTimeHandler implements Handler {\n+  private final Logger LOG = LogManager.getLogger();\n+  public static final String ROUTE = \"/node/genesis_time/\";\n+  ChainStorageClient chainStorageClient;\n \n-  public GenesisTimeHandler(final ChainStorageClient client) {\n-    this.client = client;\n-  }\n-\n-  @Override\n-  public String getPath() {\n-    return \"/node/genesis_time\";\n+  public GenesisTimeHandler(ChainStorageClient chainStorageClient) {\n+    this.chainStorageClient = chainStorageClient;\n   }\n \n+  @OpenApi(\n+      path = GenesisTimeHandler.ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get the genesis_time parameter from beacon node configuration.\",\n+      tags = {\"Node\"},\n+      description =\n+          \"Requests the genesis_time parameter from the beacon node, which should be consistent across all beacon nodes that follow the same beacon chain.\",\n+      responses = {\n+        @OpenApiResponse(status = \"200\", content = @OpenApiContent(from = UnsignedLong.class)),\n+        @OpenApiResponse(status = \"500\")\n+      })\n   @Override\n-  public Object handleRequest(RequestParams params) {\n-    return client.getGenesisTime();\n+  public void handle(@NotNull Context ctx) throws Exception {", "originalCommit": "c9f93e47ef7c9a7e16ac5766eb4b63692099da6c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8efd608eaa02f883b614310b74a9addf5ceb9623", "chunk": "diff --git a/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/GenesisTimeHandler.java b/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/GenesisTimeHandler.java\nindex 0f4909c3e..01402287b 100644\n--- a/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/GenesisTimeHandler.java\n+++ b/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/GenesisTimeHandler.java\n\n@@ -13,7 +13,7 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n-import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n+import static javax.servlet.http.HttpServletResponse.SC_NO_CONTENT;\n \n import com.google.common.primitives.UnsignedLong;\n import io.javalin.http.Context;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzMzYxMQ==", "url": "https://github.com/ConsenSys/teku/pull/1153#discussion_r379933611", "bodyText": "nit: Use a static import for mock.", "author": "ajsutton", "createdAt": "2020-02-16T21:10:26Z", "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApiTest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.eventbus.EventBus;\n+import io.javalin.Javalin;\n+import io.javalin.core.JavalinServer;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+import tech.pegasys.artemis.beaconrestapi.beaconhandlers.GenesisTimeHandler;\n+import tech.pegasys.artemis.beaconrestapi.beaconhandlers.VersionHandler;\n+import tech.pegasys.artemis.storage.ChainStorageClient;\n+\n+class BeaconRestApiTest {\n+  private final ChainStorageClient storageClient =\n+      ChainStorageClient.memoryOnlyClient(new EventBus());\n+  private final JavalinServer mockServer = Mockito.mock(JavalinServer.class);", "originalCommit": "c9f93e47ef7c9a7e16ac5766eb4b63692099da6c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8efd608eaa02f883b614310b74a9addf5ceb9623", "chunk": "diff --git a/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApiTest.java b/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApiTest.java\nindex 75eeb525d..a6c5220d7 100644\n--- a/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApiTest.java\n+++ b/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApiTest.java\n\n@@ -15,13 +15,14 @@ package tech.pegasys.artemis.beaconrestapi;\n \n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n import com.google.common.eventbus.EventBus;\n import io.javalin.Javalin;\n import io.javalin.core.JavalinServer;\n import org.junit.jupiter.api.Test;\n-import org.mockito.Mockito;\n import tech.pegasys.artemis.beaconrestapi.beaconhandlers.GenesisTimeHandler;\n import tech.pegasys.artemis.beaconrestapi.beaconhandlers.VersionHandler;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzMzY0Ng==", "url": "https://github.com/ConsenSys/teku/pull/1153#discussion_r379933646", "bodyText": "nit: static import for verify.", "author": "ajsutton", "createdAt": "2020-02-16T21:10:52Z", "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApiTest.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.eventbus.EventBus;\n+import io.javalin.Javalin;\n+import io.javalin.core.JavalinServer;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+import tech.pegasys.artemis.beaconrestapi.beaconhandlers.GenesisTimeHandler;\n+import tech.pegasys.artemis.beaconrestapi.beaconhandlers.VersionHandler;\n+import tech.pegasys.artemis.storage.ChainStorageClient;\n+\n+class BeaconRestApiTest {\n+  private final ChainStorageClient storageClient =\n+      ChainStorageClient.memoryOnlyClient(new EventBus());\n+  private final JavalinServer mockServer = Mockito.mock(JavalinServer.class);\n+  private final Javalin mockApp = Mockito.mock(Javalin.class);\n+  private static final Integer THE_PORT = 12345;\n+\n+  @Test\n+  public void RestApiShouldHaveServerPortSet() {\n+    when(mockApp.server()).thenReturn(mockServer);\n+    new BeaconRestApi(storageClient, null, null, THE_PORT, mockApp);\n+\n+    Mockito.verify(mockServer).setServerPort(THE_PORT);\n+  }\n+\n+  @Test\n+  public void RestApiShouldHaveGenesisTimeEndpoint() throws Exception {\n+    when(mockApp.server()).thenReturn(mockServer);\n+    new BeaconRestApi(storageClient, null, null, THE_PORT, mockApp);\n+\n+    Mockito.verify(mockApp).get(eq(GenesisTimeHandler.ROUTE), any(GenesisTimeHandler.class));\n+  }\n+\n+  @Test\n+  public void RestApiShouldHaveVersionEndpoint() throws Exception {\n+    when(mockApp.server()).thenReturn(mockServer);\n+    new BeaconRestApi(storageClient, null, null, THE_PORT, mockApp);\n+\n+    Mockito.verify(mockApp).get(eq(VersionHandler.ROUTE), any(VersionHandler.class));", "originalCommit": "c9f93e47ef7c9a7e16ac5766eb4b63692099da6c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8efd608eaa02f883b614310b74a9addf5ceb9623", "chunk": "diff --git a/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApiTest.java b/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApiTest.java\nindex 75eeb525d..a6c5220d7 100644\n--- a/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApiTest.java\n+++ b/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApiTest.java\n\n@@ -15,13 +15,14 @@ package tech.pegasys.artemis.beaconrestapi;\n \n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n import com.google.common.eventbus.EventBus;\n import io.javalin.Javalin;\n import io.javalin.core.JavalinServer;\n import org.junit.jupiter.api.Test;\n-import org.mockito.Mockito;\n import tech.pegasys.artemis.beaconrestapi.beaconhandlers.GenesisTimeHandler;\n import tech.pegasys.artemis.beaconrestapi.beaconhandlers.VersionHandler;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzMzY2OA==", "url": "https://github.com/ConsenSys/teku/pull/1153#discussion_r379933668", "bodyText": "nit: static import :)", "author": "ajsutton", "createdAt": "2020-02-16T21:11:20Z", "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/GenesisTimeHandlerTest.java", "diffHunk": "@@ -13,30 +13,37 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n-import static org.assertj.core.api.Assertions.assertThat;\n+import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n \n import com.google.common.eventbus.EventBus;\n import com.google.common.primitives.UnsignedLong;\n+import io.javalin.http.Context;\n import org.junit.jupiter.api.Test;\n import org.mockito.Mockito;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler.RequestParams;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n \n-class GenesisTimeHandlerTest {\n-  private final RequestParams requestParams = Mockito.mock(RequestParams.class);\n+public class GenesisTimeHandlerTest {\n+  private Context mockContext = Mockito.mock(Context.class);\n+  private final UnsignedLong genesisTime = UnsignedLong.valueOf(51234);\n+\n   private final ChainStorageClient storageClient =\n       ChainStorageClient.memoryOnlyClient(new EventBus());\n-  private final GenesisTimeHandler handler = new GenesisTimeHandler(storageClient);\n \n   @Test\n-  public void shouldReturnEmptyObjectWhenGenesisTimeIsNotSet() {\n-    assertThat(handler.handleRequest(requestParams)).isEqualTo(null);\n+  public void shouldRaiseInternalErrorWhenGenesisTimeIsNotSet() throws Exception {\n+    GenesisTimeHandler subject = new GenesisTimeHandler(null);\n+    subject.handle(mockContext);\n+\n+    Mockito.verify(mockContext).status(SC_INTERNAL_SERVER_ERROR);", "originalCommit": "c9f93e47ef7c9a7e16ac5766eb4b63692099da6c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8efd608eaa02f883b614310b74a9addf5ceb9623", "chunk": "diff --git a/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/GenesisTimeHandlerTest.java b/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/GenesisTimeHandlerTest.java\nindex c474a3ed2..a0792253c 100644\n--- a/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/GenesisTimeHandlerTest.java\n+++ b/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/GenesisTimeHandlerTest.java\n\n@@ -13,37 +13,38 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n-import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n+import static javax.servlet.http.HttpServletResponse.SC_NO_CONTENT;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n \n import com.google.common.eventbus.EventBus;\n import com.google.common.primitives.UnsignedLong;\n import io.javalin.http.Context;\n import org.junit.jupiter.api.Test;\n-import org.mockito.Mockito;\n import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n \n public class GenesisTimeHandlerTest {\n-  private Context mockContext = Mockito.mock(Context.class);\n+  private Context mockContext = mock(Context.class);\n   private final UnsignedLong genesisTime = UnsignedLong.valueOf(51234);\n \n   private final ChainStorageClient storageClient =\n       ChainStorageClient.memoryOnlyClient(new EventBus());\n \n   @Test\n-  public void shouldRaiseInternalErrorWhenGenesisTimeIsNotSet() throws Exception {\n-    GenesisTimeHandler subject = new GenesisTimeHandler(null);\n-    subject.handle(mockContext);\n+  public void shouldReturnNoContentGenesisTimeIsNotSet() throws Exception {\n+    GenesisTimeHandler handler = new GenesisTimeHandler(null);\n+    handler.handle(mockContext);\n \n-    Mockito.verify(mockContext).status(SC_INTERNAL_SERVER_ERROR);\n+    verify(mockContext).status(SC_NO_CONTENT);\n   }\n \n   @Test\n   public void shouldReturnGenesisTimeWhenSet() throws Exception {\n     storageClient.setGenesisTime(genesisTime);\n-    GenesisTimeHandler subject = new GenesisTimeHandler(storageClient);\n-    subject.handle(mockContext);\n+    GenesisTimeHandler handler = new GenesisTimeHandler(storageClient);\n+    handler.handle(mockContext);\n \n-    Mockito.verify(mockContext).result(JsonProvider.objectToJSON(genesisTime));\n+    verify(mockContext).result(JsonProvider.objectToJSON(genesisTime));\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzMzc2NQ==", "url": "https://github.com/ConsenSys/teku/pull/1153#discussion_r379933765", "bodyText": "nit: We rarely use names like subject for test subjects in the codebase - typically this would just be handler.", "author": "ajsutton", "createdAt": "2020-02-16T21:12:42Z", "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/GenesisTimeHandlerTest.java", "diffHunk": "@@ -13,30 +13,37 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n-import static org.assertj.core.api.Assertions.assertThat;\n+import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n \n import com.google.common.eventbus.EventBus;\n import com.google.common.primitives.UnsignedLong;\n+import io.javalin.http.Context;\n import org.junit.jupiter.api.Test;\n import org.mockito.Mockito;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler.RequestParams;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n \n-class GenesisTimeHandlerTest {\n-  private final RequestParams requestParams = Mockito.mock(RequestParams.class);\n+public class GenesisTimeHandlerTest {\n+  private Context mockContext = Mockito.mock(Context.class);\n+  private final UnsignedLong genesisTime = UnsignedLong.valueOf(51234);\n+\n   private final ChainStorageClient storageClient =\n       ChainStorageClient.memoryOnlyClient(new EventBus());\n-  private final GenesisTimeHandler handler = new GenesisTimeHandler(storageClient);\n \n   @Test\n-  public void shouldReturnEmptyObjectWhenGenesisTimeIsNotSet() {\n-    assertThat(handler.handleRequest(requestParams)).isEqualTo(null);\n+  public void shouldRaiseInternalErrorWhenGenesisTimeIsNotSet() throws Exception {\n+    GenesisTimeHandler subject = new GenesisTimeHandler(null);", "originalCommit": "c9f93e47ef7c9a7e16ac5766eb4b63692099da6c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8efd608eaa02f883b614310b74a9addf5ceb9623", "chunk": "diff --git a/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/GenesisTimeHandlerTest.java b/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/GenesisTimeHandlerTest.java\nindex c474a3ed2..a0792253c 100644\n--- a/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/GenesisTimeHandlerTest.java\n+++ b/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/GenesisTimeHandlerTest.java\n\n@@ -13,37 +13,38 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n-import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n+import static javax.servlet.http.HttpServletResponse.SC_NO_CONTENT;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n \n import com.google.common.eventbus.EventBus;\n import com.google.common.primitives.UnsignedLong;\n import io.javalin.http.Context;\n import org.junit.jupiter.api.Test;\n-import org.mockito.Mockito;\n import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n \n public class GenesisTimeHandlerTest {\n-  private Context mockContext = Mockito.mock(Context.class);\n+  private Context mockContext = mock(Context.class);\n   private final UnsignedLong genesisTime = UnsignedLong.valueOf(51234);\n \n   private final ChainStorageClient storageClient =\n       ChainStorageClient.memoryOnlyClient(new EventBus());\n \n   @Test\n-  public void shouldRaiseInternalErrorWhenGenesisTimeIsNotSet() throws Exception {\n-    GenesisTimeHandler subject = new GenesisTimeHandler(null);\n-    subject.handle(mockContext);\n+  public void shouldReturnNoContentGenesisTimeIsNotSet() throws Exception {\n+    GenesisTimeHandler handler = new GenesisTimeHandler(null);\n+    handler.handle(mockContext);\n \n-    Mockito.verify(mockContext).status(SC_INTERNAL_SERVER_ERROR);\n+    verify(mockContext).status(SC_NO_CONTENT);\n   }\n \n   @Test\n   public void shouldReturnGenesisTimeWhenSet() throws Exception {\n     storageClient.setGenesisTime(genesisTime);\n-    GenesisTimeHandler subject = new GenesisTimeHandler(storageClient);\n-    subject.handle(mockContext);\n+    GenesisTimeHandler handler = new GenesisTimeHandler(storageClient);\n+    handler.handle(mockContext);\n \n-    Mockito.verify(mockContext).result(JsonProvider.objectToJSON(genesisTime));\n+    verify(mockContext).result(JsonProvider.objectToJSON(genesisTime));\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzMzg0OA==", "url": "https://github.com/ConsenSys/teku/pull/1153#discussion_r379933848", "bodyText": "I'm not sure this should be an internal server error.  There is a, potentially long, period where a node is running prior to the genesis event occurring and we should have some meaningful response during that time (it may still be an error, but an expected one, not an internal server error).  404 Not found is probably the most accurate in REST terms but likely to be confusing for users who may think they got the URL wrong.\nDuring that period we would have a storageClient but it's store and genesisTime fields would be null.", "author": "ajsutton", "createdAt": "2020-02-16T21:13:42Z", "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/GenesisTimeHandlerTest.java", "diffHunk": "@@ -13,30 +13,37 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n-import static org.assertj.core.api.Assertions.assertThat;\n+import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n \n import com.google.common.eventbus.EventBus;\n import com.google.common.primitives.UnsignedLong;\n+import io.javalin.http.Context;\n import org.junit.jupiter.api.Test;\n import org.mockito.Mockito;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler.RequestParams;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n \n-class GenesisTimeHandlerTest {\n-  private final RequestParams requestParams = Mockito.mock(RequestParams.class);\n+public class GenesisTimeHandlerTest {\n+  private Context mockContext = Mockito.mock(Context.class);\n+  private final UnsignedLong genesisTime = UnsignedLong.valueOf(51234);\n+\n   private final ChainStorageClient storageClient =\n       ChainStorageClient.memoryOnlyClient(new EventBus());\n-  private final GenesisTimeHandler handler = new GenesisTimeHandler(storageClient);\n \n   @Test\n-  public void shouldReturnEmptyObjectWhenGenesisTimeIsNotSet() {\n-    assertThat(handler.handleRequest(requestParams)).isEqualTo(null);\n+  public void shouldRaiseInternalErrorWhenGenesisTimeIsNotSet() throws Exception {", "originalCommit": "c9f93e47ef7c9a7e16ac5766eb4b63692099da6c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8efd608eaa02f883b614310b74a9addf5ceb9623", "chunk": "diff --git a/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/GenesisTimeHandlerTest.java b/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/GenesisTimeHandlerTest.java\nindex c474a3ed2..a0792253c 100644\n--- a/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/GenesisTimeHandlerTest.java\n+++ b/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/GenesisTimeHandlerTest.java\n\n@@ -13,37 +13,38 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n-import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;\n+import static javax.servlet.http.HttpServletResponse.SC_NO_CONTENT;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n \n import com.google.common.eventbus.EventBus;\n import com.google.common.primitives.UnsignedLong;\n import io.javalin.http.Context;\n import org.junit.jupiter.api.Test;\n-import org.mockito.Mockito;\n import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n \n public class GenesisTimeHandlerTest {\n-  private Context mockContext = Mockito.mock(Context.class);\n+  private Context mockContext = mock(Context.class);\n   private final UnsignedLong genesisTime = UnsignedLong.valueOf(51234);\n \n   private final ChainStorageClient storageClient =\n       ChainStorageClient.memoryOnlyClient(new EventBus());\n \n   @Test\n-  public void shouldRaiseInternalErrorWhenGenesisTimeIsNotSet() throws Exception {\n-    GenesisTimeHandler subject = new GenesisTimeHandler(null);\n-    subject.handle(mockContext);\n+  public void shouldReturnNoContentGenesisTimeIsNotSet() throws Exception {\n+    GenesisTimeHandler handler = new GenesisTimeHandler(null);\n+    handler.handle(mockContext);\n \n-    Mockito.verify(mockContext).status(SC_INTERNAL_SERVER_ERROR);\n+    verify(mockContext).status(SC_NO_CONTENT);\n   }\n \n   @Test\n   public void shouldReturnGenesisTimeWhenSet() throws Exception {\n     storageClient.setGenesisTime(genesisTime);\n-    GenesisTimeHandler subject = new GenesisTimeHandler(storageClient);\n-    subject.handle(mockContext);\n+    GenesisTimeHandler handler = new GenesisTimeHandler(storageClient);\n+    handler.handle(mockContext);\n \n-    Mockito.verify(mockContext).result(JsonProvider.objectToJSON(genesisTime));\n+    verify(mockContext).result(JsonProvider.objectToJSON(genesisTime));\n   }\n }\n"}}, {"oid": "8efd608eaa02f883b614310b74a9addf5ceb9623", "url": "https://github.com/ConsenSys/teku/commit/8efd608eaa02f883b614310b74a9addf5ceb9623", "message": "changes per review comments.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-02-16T22:23:28Z", "type": "commit"}, {"oid": "6143a2fc3f0d107e7b8f815f43f83600349c0f40", "url": "https://github.com/ConsenSys/teku/commit/6143a2fc3f0d107e7b8f815f43f83600349c0f40", "message": "started a readme to try to capture any decisions we're making and store references to important resources.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-02-16T23:22:36Z", "type": "commit"}, {"oid": "c0f47b626a69f3c08e71edf2ec967bce4b1cb11a", "url": "https://github.com/ConsenSys/teku/commit/c0f47b626a69f3c08e71edf2ec967bce4b1cb11a", "message": "Merge branch 'master' into openApi", "committedDate": "2020-02-17T00:05:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTk1MTE4Nw==", "url": "https://github.com/ConsenSys/teku/pull/1153#discussion_r379951187", "bodyText": "nit: any reason for this ordering? why aren't all the beacon ones together", "author": "macfarla", "createdAt": "2020-02-17T01:00:10Z", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApi.java", "diffHunk": "@@ -77,6 +94,69 @@ public void start() {\n                     ctx.status(SC_NOT_FOUND).result(JsonProvider.objectToJSON(\"Not found\"));\n                   }\n                 }));\n+\n+    app.start();\n+  }\n+\n+  private static OpenApiOptions getOpenApiOptions() {\n+    Info applicationInfo =\n+        new Info()\n+            .title(StringUtils.capitalize(VersionProvider.CLIENT_IDENTITY))\n+            .version(VersionProvider.IMPLEMENTATION_VERSION)\n+            .description(\n+                \"A minimal API specification for the beacon node, which enables a validator \"\n+                    + \"to connect and perform its obligations on the Ethereum 2.0 phase 0 beacon chain.\")\n+            .license(\n+                new License()\n+                    .name(\"Apache 2.0\")\n+                    .url(\"https://www.apache.org/licenses/LICENSE-2.0.html\"));\n+    OpenApiOptions options =\n+        new OpenApiOptions(applicationInfo)\n+            .path(\"/swagger-docs\")\n+            .swagger(new SwaggerOptions(\"/swagger-ui\"));\n+    // TODO: allow swagger-ui to be turned off - ideally still leave swagger-docs, just dont add the\n+    // swagger-ui endpoint\n+    return options;\n+  }\n+\n+  private void addNodeHandlers(ChainStorageClient chainStorageClient) {\n+    app.get(GenesisTimeHandler.ROUTE, new GenesisTimeHandler(chainStorageClient));\n+    app.get(VersionHandler.ROUTE, new VersionHandler());\n+    /*\n+     * TODO:\n+     *    /node/syncing\n+     *  Optional:\n+     *    /node/fork\n+     */\n+  }\n+\n+  private void addBeaconHandlers(\n+      ChainStorageClient chainStorageClient, HistoricalChainData historicalChainData) {\n+    // TODO: not in Minimal or optional specified set - some are similar to lighthouse\n+    // implementation\n+    handlers.add(new BeaconHeadHandler(chainStorageClient));\n+    handlers.add(new BeaconChainHeadHandler(chainStorageClient));\n+    handlers.add(new BeaconStateHandler(chainStorageClient));\n+    handlers.add(new FinalizedCheckpointHandler(chainStorageClient));\n+    handlers.add(new BeaconBlockHandler(chainStorageClient, historicalChainData));", "originalCommit": "c0f47b626a69f3c08e71edf2ec967bce4b1cb11a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTk1NTM1NQ==", "url": "https://github.com/ConsenSys/teku/pull/1153#discussion_r379955355", "bodyText": "these are all slated for deletion by the time we're done... I will re-order them if you prefer, but they're on borrowed time.", "author": "rolfyone", "createdAt": "2020-02-17T01:35:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTk1MTE4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "65ec0a50cb8eb85061513b80eda8d1085a2b2296", "chunk": "diff --git a/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApi.java b/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApi.java\nindex 946a13c08..b12563504 100644\n--- a/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApi.java\n+++ b/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApi.java\n\n@@ -134,11 +134,11 @@ public class BeaconRestApi {\n       ChainStorageClient chainStorageClient, HistoricalChainData historicalChainData) {\n     // TODO: not in Minimal or optional specified set - some are similar to lighthouse\n     // implementation\n-    handlers.add(new BeaconHeadHandler(chainStorageClient));\n+    handlers.add(new BeaconBlockHandler(chainStorageClient, historicalChainData));\n     handlers.add(new BeaconChainHeadHandler(chainStorageClient));\n+    handlers.add(new BeaconHeadHandler(chainStorageClient));\n     handlers.add(new BeaconStateHandler(chainStorageClient));\n     handlers.add(new FinalizedCheckpointHandler(chainStorageClient));\n-    handlers.add(new BeaconBlockHandler(chainStorageClient, historicalChainData));\n   }\n \n   private void addValidatorHandlers() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTk1MTI1NQ==", "url": "https://github.com/ConsenSys/teku/pull/1153#discussion_r379951255", "bodyText": "nit: EnrHandler ?", "author": "macfarla", "createdAt": "2020-02-17T01:00:43Z", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApi.java", "diffHunk": "@@ -77,6 +94,69 @@ public void start() {\n                     ctx.status(SC_NOT_FOUND).result(JsonProvider.objectToJSON(\"Not found\"));\n                   }\n                 }));\n+\n+    app.start();\n+  }\n+\n+  private static OpenApiOptions getOpenApiOptions() {\n+    Info applicationInfo =\n+        new Info()\n+            .title(StringUtils.capitalize(VersionProvider.CLIENT_IDENTITY))\n+            .version(VersionProvider.IMPLEMENTATION_VERSION)\n+            .description(\n+                \"A minimal API specification for the beacon node, which enables a validator \"\n+                    + \"to connect and perform its obligations on the Ethereum 2.0 phase 0 beacon chain.\")\n+            .license(\n+                new License()\n+                    .name(\"Apache 2.0\")\n+                    .url(\"https://www.apache.org/licenses/LICENSE-2.0.html\"));\n+    OpenApiOptions options =\n+        new OpenApiOptions(applicationInfo)\n+            .path(\"/swagger-docs\")\n+            .swagger(new SwaggerOptions(\"/swagger-ui\"));\n+    // TODO: allow swagger-ui to be turned off - ideally still leave swagger-docs, just dont add the\n+    // swagger-ui endpoint\n+    return options;\n+  }\n+\n+  private void addNodeHandlers(ChainStorageClient chainStorageClient) {\n+    app.get(GenesisTimeHandler.ROUTE, new GenesisTimeHandler(chainStorageClient));\n+    app.get(VersionHandler.ROUTE, new VersionHandler());\n+    /*\n+     * TODO:\n+     *    /node/syncing\n+     *  Optional:\n+     *    /node/fork\n+     */\n+  }\n+\n+  private void addBeaconHandlers(\n+      ChainStorageClient chainStorageClient, HistoricalChainData historicalChainData) {\n+    // TODO: not in Minimal or optional specified set - some are similar to lighthouse\n+    // implementation\n+    handlers.add(new BeaconHeadHandler(chainStorageClient));\n+    handlers.add(new BeaconChainHeadHandler(chainStorageClient));\n+    handlers.add(new BeaconStateHandler(chainStorageClient));\n+    handlers.add(new FinalizedCheckpointHandler(chainStorageClient));\n+    handlers.add(new BeaconBlockHandler(chainStorageClient, historicalChainData));\n+  }\n+\n+  private void addValidatorHandlers() {\n+    /*\n+     * TODO:\n+     *   reference: https://ethereum.github.io/eth2.0-APIs/#/\n+     *   /validator/{pubkey}\n+     *   /validator/duties\n+     *   /validator/block (GET/POST)\n+     *   /validator/attestation (GET/POST)\n+     **/\n+  }\n+\n+  private void addNetworkHandlers(P2PNetwork<?> p2pNetwork) {\n+    // not in Minimal or optional specified set\n+    handlers.add(new PeerIdHandler(p2pNetwork));\n+    handlers.add(new PeersHandler(p2pNetwork));\n+    handlers.add(new ENRHandler());", "originalCommit": "c0f47b626a69f3c08e71edf2ec967bce4b1cb11a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTk1NjE3Mw==", "url": "https://github.com/ConsenSys/teku/pull/1153#discussion_r379956173", "bodyText": "leaving for this PR, per discussion.", "author": "rolfyone", "createdAt": "2020-02-17T01:41:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTk1MTI1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "65ec0a50cb8eb85061513b80eda8d1085a2b2296", "chunk": "diff --git a/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApi.java b/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApi.java\nindex 946a13c08..b12563504 100644\n--- a/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApi.java\n+++ b/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApi.java\n\n@@ -134,11 +134,11 @@ public class BeaconRestApi {\n       ChainStorageClient chainStorageClient, HistoricalChainData historicalChainData) {\n     // TODO: not in Minimal or optional specified set - some are similar to lighthouse\n     // implementation\n-    handlers.add(new BeaconHeadHandler(chainStorageClient));\n+    handlers.add(new BeaconBlockHandler(chainStorageClient, historicalChainData));\n     handlers.add(new BeaconChainHeadHandler(chainStorageClient));\n+    handlers.add(new BeaconHeadHandler(chainStorageClient));\n     handlers.add(new BeaconStateHandler(chainStorageClient));\n     handlers.add(new FinalizedCheckpointHandler(chainStorageClient));\n-    handlers.add(new BeaconBlockHandler(chainStorageClient, historicalChainData));\n   }\n \n   private void addValidatorHandlers() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTk1NDM0Ng==", "url": "https://github.com/ConsenSys/teku/pull/1153#discussion_r379954346", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void shouldReturnNoContentGenesisTimeIsNotSet() throws Exception {\n          \n          \n            \n              public void shouldReturnNoContentWhenGenesisTimeIsNotSet() throws Exception {", "author": "macfarla", "createdAt": "2020-02-17T01:27:28Z", "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/GenesisTimeHandlerTest.java", "diffHunk": "@@ -13,30 +13,38 @@\n \n package tech.pegasys.artemis.beaconrestapi.beaconhandlers;\n \n-import static org.assertj.core.api.Assertions.assertThat;\n+import static javax.servlet.http.HttpServletResponse.SC_NO_CONTENT;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n \n import com.google.common.eventbus.EventBus;\n import com.google.common.primitives.UnsignedLong;\n+import io.javalin.http.Context;\n import org.junit.jupiter.api.Test;\n-import org.mockito.Mockito;\n-import tech.pegasys.artemis.beaconrestapi.handlerinterfaces.BeaconRestApiHandler.RequestParams;\n+import tech.pegasys.artemis.provider.JsonProvider;\n import tech.pegasys.artemis.storage.ChainStorageClient;\n \n-class GenesisTimeHandlerTest {\n-  private final RequestParams requestParams = Mockito.mock(RequestParams.class);\n+public class GenesisTimeHandlerTest {\n+  private Context mockContext = mock(Context.class);\n+  private final UnsignedLong genesisTime = UnsignedLong.valueOf(51234);\n+\n   private final ChainStorageClient storageClient =\n       ChainStorageClient.memoryOnlyClient(new EventBus());\n-  private final GenesisTimeHandler handler = new GenesisTimeHandler(storageClient);\n \n   @Test\n-  public void shouldReturnEmptyObjectWhenGenesisTimeIsNotSet() {\n-    assertThat(handler.handleRequest(requestParams)).isEqualTo(null);\n+  public void shouldReturnNoContentGenesisTimeIsNotSet() throws Exception {", "originalCommit": "c0f47b626a69f3c08e71edf2ec967bce4b1cb11a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1fd13fe93acb5182201527bf207d61edcaf7f01f", "chunk": "diff --git a/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/GenesisTimeHandlerTest.java b/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/GenesisTimeHandlerTest.java\nindex a0792253c..cca3d415d 100644\n--- a/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/GenesisTimeHandlerTest.java\n+++ b/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/GenesisTimeHandlerTest.java\n\n@@ -32,7 +32,7 @@ public class GenesisTimeHandlerTest {\n       ChainStorageClient.memoryOnlyClient(new EventBus());\n \n   @Test\n-  public void shouldReturnNoContentGenesisTimeIsNotSet() throws Exception {\n+  public void shouldReturnNoContentWhenGenesisTimeIsNotSet() throws Exception {\n     GenesisTimeHandler handler = new GenesisTimeHandler(null);\n     handler.handle(mockContext);\n \n"}}, {"oid": "1fd13fe93acb5182201527bf207d61edcaf7f01f", "url": "https://github.com/ConsenSys/teku/commit/1fd13fe93acb5182201527bf207d61edcaf7f01f", "message": "Update data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/GenesisTimeHandlerTest.java\n\nCo-Authored-By: Sally MacFarlane <sally.macfarlane@consensys.net>", "committedDate": "2020-02-17T01:33:54Z", "type": "commit"}, {"oid": "65ec0a50cb8eb85061513b80eda8d1085a2b2296", "url": "https://github.com/ConsenSys/teku/commit/65ec0a50cb8eb85061513b80eda8d1085a2b2296", "message": "changes from review comments.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-02-17T01:56:56Z", "type": "commit"}]}