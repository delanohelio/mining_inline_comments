{"pr_number": 1340, "pr_title": "/validator/attestations endpoint for rest api", "pr_createdAt": "2020-03-10T07:37:04Z", "pr_url": "https://github.com/ConsenSys/teku/pull/1340", "timeline": [{"oid": "6ae9da6f4e469da53572dc4e14b7199be4647994", "url": "https://github.com/ConsenSys/teku/commit/6ae9da6f4e469da53572dc4e14b7199be4647994", "message": "generate an unsigned attestation via rest api.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-03-10T07:35:17Z", "type": "commit"}, {"oid": "92cc9c0f113a57461dc171e1513d559139afa3c5", "url": "https://github.com/ConsenSys/teku/commit/92cc9c0f113a57461dc171e1513d559139afa3c5", "message": "Merge remote-tracking branch 'upstream/master' into 1181-attestations", "committedDate": "2020-03-10T07:36:04Z", "type": "commit"}, {"oid": "dfa94182eccbffa8bcbe7e80a9ffafad9fb47764", "url": "https://github.com/ConsenSys/teku/commit/dfa94182eccbffa8bcbe7e80a9ffafad9fb47764", "message": "Merge remote-tracking branch 'upstream/master' into 1181-attestations", "committedDate": "2020-03-10T22:25:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY0NjM1MA==", "url": "https://github.com/ConsenSys/teku/pull/1340#discussion_r390646350", "bodyText": "what happens if it's == committeeCount? This msg doesn't quite match the if statement", "author": "macfarla", "createdAt": "2020-03-10T22:23:36Z", "path": "data/provider/src/main/java/tech/pegasys/artemis/api/ChainDataProvider.java", "diffHunk": "@@ -139,6 +146,36 @@ CombinedChainDataClient getCombinedChainDataClient() {\n         .exceptionally(err -> Optional.empty());\n   }\n \n+  public Optional<Attestation> getUnsignedAttestationAtSlot(\n+      UnsignedLong slot, Integer committeeIndex) {\n+    if (!isStoreAvailable()) {\n+      return Optional.empty();\n+    }\n+    if (isFinalized(slot)) {\n+      throw new IllegalArgumentException(\n+          String.format(\"Slot %s is finalized, no attestation will be created.\", slot.toString()));\n+    }\n+    Optional<BeaconBlock> block = chainStorageClient.getBlockBySlot(slot);\n+    if (block.isEmpty()) {\n+      return Optional.empty();\n+    }\n+\n+    tech.pegasys.artemis.datastructures.state.BeaconState state =\n+        chainStorageClient.getBestBlockRootState();\n+    int committeeCount = get_committee_count_at_slot(state, slot).intValue();\n+    if (committeeIndex < 0 || committeeIndex > committeeCount) {\n+      throw new IllegalArgumentException(\n+          \"Invalid committee index provided - expected between 0 and \" + (committeeCount - 1));", "originalCommit": "92cc9c0f113a57461dc171e1513d559139afa3c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2MTg2Mw==", "url": "https://github.com/ConsenSys/teku/pull/1340#discussion_r390661863", "bodyText": "i'll fix this, but i'll also look at an upper boundary test, it looks like its not done if that check is wrong like that.", "author": "rolfyone", "createdAt": "2020-03-10T23:08:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY0NjM1MA=="}], "type": "inlineReview", "revised_code": {"commit": "53458d7d45b0fb40a610f287c0c35f5103a74fea", "chunk": "diff --git a/data/provider/src/main/java/tech/pegasys/artemis/api/ChainDataProvider.java b/data/provider/src/main/java/tech/pegasys/artemis/api/ChainDataProvider.java\nindex ea9848c425..812f8260ac 100644\n--- a/data/provider/src/main/java/tech/pegasys/artemis/api/ChainDataProvider.java\n+++ b/data/provider/src/main/java/tech/pegasys/artemis/api/ChainDataProvider.java\n\n@@ -163,7 +163,7 @@ public class ChainDataProvider {\n     tech.pegasys.artemis.datastructures.state.BeaconState state =\n         chainStorageClient.getBestBlockRootState();\n     int committeeCount = get_committee_count_at_slot(state, slot).intValue();\n-    if (committeeIndex < 0 || committeeIndex > committeeCount) {\n+    if (committeeIndex < 0 || committeeIndex >= committeeCount) {\n       throw new IllegalArgumentException(\n           \"Invalid committee index provided - expected between 0 and \" + (committeeCount - 1));\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY1NTA3Mg==", "url": "https://github.com/ConsenSys/teku/pull/1340#discussion_r390655072", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              void shouldHaveAttestationReturned() throws Exception {\n          \n          \n            \n              void shouldReturnAttestation() throws Exception {", "author": "macfarla", "createdAt": "2020-03-10T22:47:25Z", "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/validatorhandlers/AttestationHandlerTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi.validatorhandlers;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.COMMITTEE_INDEX;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.SLOT;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import io.javalin.http.Context;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import tech.pegasys.artemis.api.ChainDataProvider;\n+import tech.pegasys.artemis.api.schema.Attestation;\n+import tech.pegasys.artemis.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.artemis.datastructures.util.DataStructureUtil;\n+import tech.pegasys.artemis.provider.JsonProvider;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class AttestationHandlerTest {\n+  @Mock private Context context;\n+  @Mock private ChainDataProvider provider;\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private AttestationHandler handler;\n+  private Attestation attestation = new Attestation(DataStructureUtil.randomAttestation(1111));\n+\n+  @BeforeEach\n+  public void setup() {\n+    handler = new AttestationHandler(provider, jsonProvider);\n+  }\n+\n+  private void badRequestParamsTest(final Map<String, List<String>> params, String message)\n+      throws Exception {\n+    when(context.queryParamMap()).thenReturn(params);\n+\n+    handler.handle(context);\n+    verify(context).status(SC_BAD_REQUEST);\n+\n+    if (StringUtils.isNotEmpty(message)) {\n+      BadRequest badRequest = new BadRequest(message);\n+      verify(context).result(jsonProvider.objectToJSON(badRequest));\n+    }\n+  }\n+\n+  @Test\n+  void shouldRejectTooFewArguments() throws Exception {\n+    badRequestParamsTest(Map.of(), \"Please specify both slot and committee_index\");\n+  }\n+\n+  @Test\n+  void shouldRejectWithoutSlot() throws Exception {\n+    badRequestParamsTest(\n+        Map.of(\"foo\", List.of(), \"Foo2\", List.of()), \"'slot' cannot be null or empty.\");\n+  }\n+\n+  @Test\n+  void shouldRejectWithoutCommitteeIndex() throws Exception {\n+    badRequestParamsTest(\n+        Map.of(SLOT, List.of(\"1\"), \"Foo2\", List.of()),\n+        \"'committee_index' cannot be null or empty.\");\n+  }\n+\n+  @Test\n+  void shouldRejectNegativeCommitteeIndex() throws Exception {\n+    badRequestParamsTest(\n+        Map.of(SLOT, List.of(\"1\"), COMMITTEE_INDEX, List.of(\"-1\")),\n+        \"'committee_index' needs to be greater than or equal to 0.\");\n+  }\n+\n+  @Test\n+  void shouldReturnNoContentIfNotReady() throws Exception {\n+    Map<String, List<String>> params = Map.of(SLOT, List.of(\"1\"), COMMITTEE_INDEX, List.of(\"1\"));\n+\n+    when(context.queryParamMap()).thenReturn(params);\n+    when(provider.isStoreAvailable()).thenReturn(false);\n+    handler.handle(context);\n+\n+    verify(provider).isStoreAvailable();\n+  }\n+\n+  @Test\n+  void shouldHaveAttestationReturned() throws Exception {", "originalCommit": "dfa94182eccbffa8bcbe7e80a9ffafad9fb47764", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f75374bf049a5bbdd8a1426ed692f7fa611ef8ae", "chunk": "diff --git a/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/validatorhandlers/AttestationHandlerTest.java b/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/validatorhandlers/AttestationHandlerTest.java\nindex d1db37b0a4..c81203f117 100644\n--- a/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/validatorhandlers/AttestationHandlerTest.java\n+++ b/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/validatorhandlers/AttestationHandlerTest.java\n\n@@ -100,7 +100,7 @@ public class AttestationHandlerTest {\n   }\n \n   @Test\n-  void shouldHaveAttestationReturned() throws Exception {\n+  void shouldReturnAttestation() throws Exception {\n     Map<String, List<String>> params = Map.of(SLOT, List.of(\"1\"), COMMITTEE_INDEX, List.of(\"1\"));\n \n     when(context.queryParamMap()).thenReturn(params);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY1NTIwOQ==", "url": "https://github.com/ConsenSys/teku/pull/1340#discussion_r390655209", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              void shouldHaveNoAttestationReturnedIfNotFound() throws Exception {\n          \n          \n            \n              void shouldReturnNoAttestationIfNotFound() throws Exception {", "author": "macfarla", "createdAt": "2020-03-10T22:47:49Z", "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/validatorhandlers/AttestationHandlerTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi.validatorhandlers;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.COMMITTEE_INDEX;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.SLOT;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import io.javalin.http.Context;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import tech.pegasys.artemis.api.ChainDataProvider;\n+import tech.pegasys.artemis.api.schema.Attestation;\n+import tech.pegasys.artemis.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.artemis.datastructures.util.DataStructureUtil;\n+import tech.pegasys.artemis.provider.JsonProvider;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class AttestationHandlerTest {\n+  @Mock private Context context;\n+  @Mock private ChainDataProvider provider;\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private AttestationHandler handler;\n+  private Attestation attestation = new Attestation(DataStructureUtil.randomAttestation(1111));\n+\n+  @BeforeEach\n+  public void setup() {\n+    handler = new AttestationHandler(provider, jsonProvider);\n+  }\n+\n+  private void badRequestParamsTest(final Map<String, List<String>> params, String message)\n+      throws Exception {\n+    when(context.queryParamMap()).thenReturn(params);\n+\n+    handler.handle(context);\n+    verify(context).status(SC_BAD_REQUEST);\n+\n+    if (StringUtils.isNotEmpty(message)) {\n+      BadRequest badRequest = new BadRequest(message);\n+      verify(context).result(jsonProvider.objectToJSON(badRequest));\n+    }\n+  }\n+\n+  @Test\n+  void shouldRejectTooFewArguments() throws Exception {\n+    badRequestParamsTest(Map.of(), \"Please specify both slot and committee_index\");\n+  }\n+\n+  @Test\n+  void shouldRejectWithoutSlot() throws Exception {\n+    badRequestParamsTest(\n+        Map.of(\"foo\", List.of(), \"Foo2\", List.of()), \"'slot' cannot be null or empty.\");\n+  }\n+\n+  @Test\n+  void shouldRejectWithoutCommitteeIndex() throws Exception {\n+    badRequestParamsTest(\n+        Map.of(SLOT, List.of(\"1\"), \"Foo2\", List.of()),\n+        \"'committee_index' cannot be null or empty.\");\n+  }\n+\n+  @Test\n+  void shouldRejectNegativeCommitteeIndex() throws Exception {\n+    badRequestParamsTest(\n+        Map.of(SLOT, List.of(\"1\"), COMMITTEE_INDEX, List.of(\"-1\")),\n+        \"'committee_index' needs to be greater than or equal to 0.\");\n+  }\n+\n+  @Test\n+  void shouldReturnNoContentIfNotReady() throws Exception {\n+    Map<String, List<String>> params = Map.of(SLOT, List.of(\"1\"), COMMITTEE_INDEX, List.of(\"1\"));\n+\n+    when(context.queryParamMap()).thenReturn(params);\n+    when(provider.isStoreAvailable()).thenReturn(false);\n+    handler.handle(context);\n+\n+    verify(provider).isStoreAvailable();\n+  }\n+\n+  @Test\n+  void shouldHaveAttestationReturned() throws Exception {\n+    Map<String, List<String>> params = Map.of(SLOT, List.of(\"1\"), COMMITTEE_INDEX, List.of(\"1\"));\n+\n+    when(context.queryParamMap()).thenReturn(params);\n+    when(provider.isStoreAvailable()).thenReturn(true);\n+    when(provider.getUnsignedAttestationAtSlot(UnsignedLong.ONE, 1))\n+        .thenReturn(Optional.of(attestation));\n+    handler.handle(context);\n+\n+    verify(provider).isStoreAvailable();\n+    verify(context).result(jsonProvider.objectToJSON(attestation));\n+  }\n+\n+  @Test\n+  void shouldHaveNoAttestationReturnedIfNotFound() throws Exception {", "originalCommit": "dfa94182eccbffa8bcbe7e80a9ffafad9fb47764", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY1ODg2MA==", "url": "https://github.com/ConsenSys/teku/pull/1340#discussion_r390658860", "bodyText": "or shouldReturnNotFoundIfNoAttestationFound ?", "author": "macfarla", "createdAt": "2020-03-10T22:58:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY1NTIwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "f75374bf049a5bbdd8a1426ed692f7fa611ef8ae", "chunk": "diff --git a/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/validatorhandlers/AttestationHandlerTest.java b/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/validatorhandlers/AttestationHandlerTest.java\nindex d1db37b0a4..c81203f117 100644\n--- a/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/validatorhandlers/AttestationHandlerTest.java\n+++ b/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/validatorhandlers/AttestationHandlerTest.java\n\n@@ -100,7 +100,7 @@ public class AttestationHandlerTest {\n   }\n \n   @Test\n-  void shouldHaveAttestationReturned() throws Exception {\n+  void shouldReturnAttestation() throws Exception {\n     Map<String, List<String>> params = Map.of(SLOT, List.of(\"1\"), COMMITTEE_INDEX, List.of(\"1\"));\n \n     when(context.queryParamMap()).thenReturn(params);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY1NjQ4Mw==", "url": "https://github.com/ConsenSys/teku/pull/1340#discussion_r390656483", "bodyText": "this ain't right", "author": "macfarla", "createdAt": "2020-03-10T22:51:39Z", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/validatorhandlers/AttestationHandler.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi.validatorhandlers;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static javax.servlet.http.HttpServletResponse.SC_NO_CONTENT;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.COMMITTEE_INDEX;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_NOT_FOUND;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.SLOT;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.TAG_VALIDATOR;\n+import static tech.pegasys.artemis.beaconrestapi.SingleQueryParameterUtils.getParameterValueAsInt;\n+import static tech.pegasys.artemis.beaconrestapi.SingleQueryParameterUtils.getParameterValueAsUnsignedLong;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import tech.pegasys.artemis.api.ChainDataProvider;\n+import tech.pegasys.artemis.api.schema.Attestation;\n+import tech.pegasys.artemis.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.artemis.provider.JsonProvider;\n+\n+public class AttestationHandler implements Handler {\n+  public static final String ROUTE = \"/validator/attestation\";\n+\n+  private final ChainDataProvider provider;\n+  private final JsonProvider jsonProvider;\n+\n+  public AttestationHandler(final ChainDataProvider provider, final JsonProvider jsonProvider) {\n+    this.jsonProvider = jsonProvider;\n+    this.provider = provider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get an unsigned attestation of a slot from the current state.\",\n+      tags = {TAG_VALIDATOR},\n+      queryParams = {\n+        @OpenApiParam(\n+            name = SLOT,\n+            description = \"The slot to create the attestation for (uint64)\",\n+            required = true),\n+        @OpenApiParam(\n+            name = COMMITTEE_INDEX,\n+            description = \"The index of the committee making the attestation.\",\n+            required = true)\n+      },\n+      description =\n+          \"Request that the node return the beacon chain block that matches the provided criteria.\",", "originalCommit": "dfa94182eccbffa8bcbe7e80a9ffafad9fb47764", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY1ODYzNA==", "url": "https://github.com/ConsenSys/teku/pull/1340#discussion_r390658634", "bodyText": "this is copy/paste and not update :/", "author": "rolfyone", "createdAt": "2020-03-10T22:58:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY1NjQ4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "53458d7d45b0fb40a610f287c0c35f5103a74fea", "chunk": "diff --git a/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/validatorhandlers/AttestationHandler.java b/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/validatorhandlers/AttestationHandler.java\nindex 3b77acf049..3d4f5b5a27 100644\n--- a/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/validatorhandlers/AttestationHandler.java\n+++ b/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/validatorhandlers/AttestationHandler.java\n\n@@ -60,7 +60,7 @@ public class AttestationHandler implements Handler {\n       queryParams = {\n         @OpenApiParam(\n             name = SLOT,\n-            description = \"The slot to create the attestation for (uint64)\",\n+            description = \"The non-finalized slot to create the attestation for (uint64)\",\n             required = true),\n         @OpenApiParam(\n             name = COMMITTEE_INDEX,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY1NjcxNQ==", "url": "https://github.com/ConsenSys/teku/pull/1340#discussion_r390656715", "bodyText": "slot not found?", "author": "macfarla", "createdAt": "2020-03-10T22:52:22Z", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/validatorhandlers/AttestationHandler.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi.validatorhandlers;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static javax.servlet.http.HttpServletResponse.SC_NO_CONTENT;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.COMMITTEE_INDEX;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_NOT_FOUND;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.SLOT;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.TAG_VALIDATOR;\n+import static tech.pegasys.artemis.beaconrestapi.SingleQueryParameterUtils.getParameterValueAsInt;\n+import static tech.pegasys.artemis.beaconrestapi.SingleQueryParameterUtils.getParameterValueAsUnsignedLong;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import tech.pegasys.artemis.api.ChainDataProvider;\n+import tech.pegasys.artemis.api.schema.Attestation;\n+import tech.pegasys.artemis.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.artemis.provider.JsonProvider;\n+\n+public class AttestationHandler implements Handler {\n+  public static final String ROUTE = \"/validator/attestation\";\n+\n+  private final ChainDataProvider provider;\n+  private final JsonProvider jsonProvider;\n+\n+  public AttestationHandler(final ChainDataProvider provider, final JsonProvider jsonProvider) {\n+    this.jsonProvider = jsonProvider;\n+    this.provider = provider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get an unsigned attestation of a slot from the current state.\",\n+      tags = {TAG_VALIDATOR},\n+      queryParams = {\n+        @OpenApiParam(\n+            name = SLOT,\n+            description = \"The slot to create the attestation for (uint64)\",\n+            required = true),\n+        @OpenApiParam(\n+            name = COMMITTEE_INDEX,\n+            description = \"The index of the committee making the attestation.\",\n+            required = true)\n+      },\n+      description =\n+          \"Request that the node return the beacon chain block that matches the provided criteria.\",\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            content = @OpenApiContent(from = Attestation.class),\n+            description = \"Returns an attestation with a default signature.\"),\n+        @OpenApiResponse(status = RES_BAD_REQUEST, description = \"Invalid parameter supplied\"),\n+        @OpenApiResponse(status = RES_NOT_FOUND, description = \"Specified block not found\")", "originalCommit": "dfa94182eccbffa8bcbe7e80a9ffafad9fb47764", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "53458d7d45b0fb40a610f287c0c35f5103a74fea", "chunk": "diff --git a/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/validatorhandlers/AttestationHandler.java b/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/validatorhandlers/AttestationHandler.java\nindex 3b77acf049..3d4f5b5a27 100644\n--- a/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/validatorhandlers/AttestationHandler.java\n+++ b/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/validatorhandlers/AttestationHandler.java\n\n@@ -60,7 +60,7 @@ public class AttestationHandler implements Handler {\n       queryParams = {\n         @OpenApiParam(\n             name = SLOT,\n-            description = \"The slot to create the attestation for (uint64)\",\n+            description = \"The non-finalized slot to create the attestation for (uint64)\",\n             required = true),\n         @OpenApiParam(\n             name = COMMITTEE_INDEX,\n"}}, {"oid": "f75374bf049a5bbdd8a1426ed692f7fa611ef8ae", "url": "https://github.com/ConsenSys/teku/commit/f75374bf049a5bbdd8a1426ed692f7fa611ef8ae", "message": "Update data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/validatorhandlers/AttestationHandlerTest.java\n\nCo-Authored-By: Sally MacFarlane <sally.macfarlane@consensys.net>", "committedDate": "2020-03-10T22:56:52Z", "type": "commit"}, {"oid": "eda1ec0be295083e4a300b5e19efb7f43b15e482", "url": "https://github.com/ConsenSys/teku/commit/eda1ec0be295083e4a300b5e19efb7f43b15e482", "message": "Update data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/validatorhandlers/AttestationHandlerTest.java\n\nCo-Authored-By: Sally MacFarlane <sally.macfarlane@consensys.net>", "committedDate": "2020-03-10T22:57:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY1ODAyOQ==", "url": "https://github.com/ConsenSys/teku/pull/1340#discussion_r390658029", "bodyText": "convention but we normally put non-test util methods at the bottom after all the tests", "author": "macfarla", "createdAt": "2020-03-10T22:56:11Z", "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/validatorhandlers/AttestationHandlerTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.beaconrestapi.validatorhandlers;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.COMMITTEE_INDEX;\n+import static tech.pegasys.artemis.beaconrestapi.RestApiConstants.SLOT;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import io.javalin.http.Context;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.apache.commons.lang3.StringUtils;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import tech.pegasys.artemis.api.ChainDataProvider;\n+import tech.pegasys.artemis.api.schema.Attestation;\n+import tech.pegasys.artemis.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.artemis.datastructures.util.DataStructureUtil;\n+import tech.pegasys.artemis.provider.JsonProvider;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class AttestationHandlerTest {\n+  @Mock private Context context;\n+  @Mock private ChainDataProvider provider;\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private AttestationHandler handler;\n+  private Attestation attestation = new Attestation(DataStructureUtil.randomAttestation(1111));\n+\n+  @BeforeEach\n+  public void setup() {\n+    handler = new AttestationHandler(provider, jsonProvider);\n+  }\n+\n+  private void badRequestParamsTest(final Map<String, List<String>> params, String message)", "originalCommit": "dfa94182eccbffa8bcbe7e80a9ffafad9fb47764", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2MjQzMg==", "url": "https://github.com/ConsenSys/teku/pull/1340#discussion_r390662432", "bodyText": "this is the actual test method all the following tests use... i can move it if you'd prefer...", "author": "rolfyone", "createdAt": "2020-03-10T23:10:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY1ODAyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "f75374bf049a5bbdd8a1426ed692f7fa611ef8ae", "chunk": "diff --git a/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/validatorhandlers/AttestationHandlerTest.java b/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/validatorhandlers/AttestationHandlerTest.java\nindex d1db37b0a4..c81203f117 100644\n--- a/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/validatorhandlers/AttestationHandlerTest.java\n+++ b/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/validatorhandlers/AttestationHandlerTest.java\n\n@@ -100,7 +100,7 @@ public class AttestationHandlerTest {\n   }\n \n   @Test\n-  void shouldHaveAttestationReturned() throws Exception {\n+  void shouldReturnAttestation() throws Exception {\n     Map<String, List<String>> params = Map.of(SLOT, List.of(\"1\"), COMMITTEE_INDEX, List.of(\"1\"));\n \n     when(context.queryParamMap()).thenReturn(params);\n"}}, {"oid": "53458d7d45b0fb40a610f287c0c35f5103a74fea", "url": "https://github.com/ConsenSys/teku/commit/53458d7d45b0fb40a610f287c0c35f5103a74fea", "message": "commit feedback", "committedDate": "2020-03-10T23:08:36Z", "type": "commit"}, {"oid": "42d5118b5bc53aa4b2c70c41d8e48864734f2d28", "url": "https://github.com/ConsenSys/teku/commit/42d5118b5bc53aa4b2c70c41d8e48864734f2d28", "message": "commit feedback", "committedDate": "2020-03-10T23:11:53Z", "type": "commit"}, {"oid": "0d0bc02169c6b13177cf5d1256157b90bd624667", "url": "https://github.com/ConsenSys/teku/commit/0d0bc02169c6b13177cf5d1256157b90bd624667", "message": "Merge remote-tracking branch 'upstream/master' into 1181-attestations", "committedDate": "2020-03-10T23:13:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2NzU3MQ==", "url": "https://github.com/ConsenSys/teku/pull/1340#discussion_r390667571", "bodyText": "these 3 tests are almost the same - wonder if we can refactor to make the differences clear?", "author": "macfarla", "createdAt": "2020-03-10T23:24:13Z", "path": "data/provider/src/test/java/tech/pegasys/artemis/api/ChainDataProviderTest.java", "diffHunk": "@@ -315,4 +318,78 @@ void getStateByBlockRoot_shouldReturnBeaconStateWhenFound()\n     BeaconState result = future.get().get();\n     assertThat(result).usingRecursiveComparison().isEqualTo(beaconState);\n   }\n+\n+  @Test\n+  void getUnsignedAttestationAtSlot_shouldReturnEmptyIfStoreNotFound() {\n+    ChainDataProvider provider =\n+        new ChainDataProvider(chainStorageClient, mockCombinedChainDataClient);\n+    when(mockCombinedChainDataClient.isStoreAvailable()).thenReturn(false);\n+    Optional<Attestation> optional = provider.getUnsignedAttestationAtSlot(ZERO, 0);\n+    verify(mockCombinedChainDataClient).isStoreAvailable();\n+    assertTrue(optional.isEmpty());\n+  }\n+\n+  @Test\n+  void getUnsignedAttestationAtSlot_shouldReturnEmptyIfSlotIsFinalized() {\n+    ChainDataProvider provider =\n+        new ChainDataProvider(chainStorageClient, mockCombinedChainDataClient);\n+    when(mockCombinedChainDataClient.isStoreAvailable()).thenReturn(true);\n+    when(mockCombinedChainDataClient.isFinalized(ZERO)).thenReturn(true);\n+    assertThrows(\n+        IllegalArgumentException.class, () -> provider.getUnsignedAttestationAtSlot(ZERO, 0));\n+    verify(mockCombinedChainDataClient).isStoreAvailable();\n+    verify(mockCombinedChainDataClient).isFinalized(ZERO);\n+  }\n+\n+  @Test\n+  void getUnsignedAttestationAtSlot_shouldReturnEmptyIfCommitteeBelowRange() {\n+    ChainDataProvider provider =\n+        new ChainDataProvider(chainStorageClient, mockCombinedChainDataClient);\n+    when(mockCombinedChainDataClient.isStoreAvailable()).thenReturn(true);\n+    when(mockCombinedChainDataClient.isFinalized(ZERO)).thenReturn(false);\n+    assertThrows(\n+        IllegalArgumentException.class, () -> provider.getUnsignedAttestationAtSlot(ZERO, -1));\n+    verify(mockCombinedChainDataClient).isStoreAvailable();\n+    verify(mockCombinedChainDataClient).isFinalized(ZERO);\n+  }\n+\n+  @Test\n+  void getUnsignedAttestationAtSlot_shouldReturnEmptyIfCommitteeAboveRange() {\n+    ChainDataProvider provider =\n+        new ChainDataProvider(chainStorageClient, mockCombinedChainDataClient);\n+    when(mockCombinedChainDataClient.isStoreAvailable()).thenReturn(true);\n+    when(mockCombinedChainDataClient.isFinalized(ZERO)).thenReturn(false);\n+    assertThrows(\n+        IllegalArgumentException.class, () -> provider.getUnsignedAttestationAtSlot(ZERO, 1));\n+    verify(mockCombinedChainDataClient).isStoreAvailable();\n+    verify(mockCombinedChainDataClient).isFinalized(ZERO);", "originalCommit": "0d0bc02169c6b13177cf5d1256157b90bd624667", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY4NjcxMw==", "url": "https://github.com/ConsenSys/teku/pull/1340#discussion_r390686713", "bodyText": "refactored.", "author": "rolfyone", "createdAt": "2020-03-11T00:32:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY2NzU3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "7527f4544cccff85bb8bc768fe2e74a510d04635", "chunk": "diff --git a/data/provider/src/test/java/tech/pegasys/artemis/api/ChainDataProviderTest.java b/data/provider/src/test/java/tech/pegasys/artemis/api/ChainDataProviderTest.java\nindex 5a8612b5d8..7c9b7eb922 100644\n--- a/data/provider/src/test/java/tech/pegasys/artemis/api/ChainDataProviderTest.java\n+++ b/data/provider/src/test/java/tech/pegasys/artemis/api/ChainDataProviderTest.java\n\n@@ -331,38 +331,17 @@ public class ChainDataProviderTest {\n \n   @Test\n   void getUnsignedAttestationAtSlot_shouldReturnEmptyIfSlotIsFinalized() {\n-    ChainDataProvider provider =\n-        new ChainDataProvider(chainStorageClient, mockCombinedChainDataClient);\n-    when(mockCombinedChainDataClient.isStoreAvailable()).thenReturn(true);\n-    when(mockCombinedChainDataClient.isFinalized(ZERO)).thenReturn(true);\n-    assertThrows(\n-        IllegalArgumentException.class, () -> provider.getUnsignedAttestationAtSlot(ZERO, 0));\n-    verify(mockCombinedChainDataClient).isStoreAvailable();\n-    verify(mockCombinedChainDataClient).isFinalized(ZERO);\n+    getUnsignedAttestationAtSlot_throwsIllegalArgumentException(0, true);\n   }\n \n   @Test\n   void getUnsignedAttestationAtSlot_shouldReturnEmptyIfCommitteeBelowRange() {\n-    ChainDataProvider provider =\n-        new ChainDataProvider(chainStorageClient, mockCombinedChainDataClient);\n-    when(mockCombinedChainDataClient.isStoreAvailable()).thenReturn(true);\n-    when(mockCombinedChainDataClient.isFinalized(ZERO)).thenReturn(false);\n-    assertThrows(\n-        IllegalArgumentException.class, () -> provider.getUnsignedAttestationAtSlot(ZERO, -1));\n-    verify(mockCombinedChainDataClient).isStoreAvailable();\n-    verify(mockCombinedChainDataClient).isFinalized(ZERO);\n+    getUnsignedAttestationAtSlot_throwsIllegalArgumentException(-1, false);\n   }\n \n   @Test\n   void getUnsignedAttestationAtSlot_shouldReturnEmptyIfCommitteeAboveRange() {\n-    ChainDataProvider provider =\n-        new ChainDataProvider(chainStorageClient, mockCombinedChainDataClient);\n-    when(mockCombinedChainDataClient.isStoreAvailable()).thenReturn(true);\n-    when(mockCombinedChainDataClient.isFinalized(ZERO)).thenReturn(false);\n-    assertThrows(\n-        IllegalArgumentException.class, () -> provider.getUnsignedAttestationAtSlot(ZERO, 1));\n-    verify(mockCombinedChainDataClient).isStoreAvailable();\n-    verify(mockCombinedChainDataClient).isFinalized(ZERO);\n+    getUnsignedAttestationAtSlot_throwsIllegalArgumentException(1, false);\n   }\n \n   @Test\n"}}, {"oid": "7527f4544cccff85bb8bc768fe2e74a510d04635", "url": "https://github.com/ConsenSys/teku/commit/7527f4544cccff85bb8bc768fe2e74a510d04635", "message": "commit feedback", "committedDate": "2020-03-11T00:31:13Z", "type": "commit"}, {"oid": "465f36de1bed5ad723484f0cff5a3d5636b493d6", "url": "https://github.com/ConsenSys/teku/commit/465f36de1bed5ad723484f0cff5a3d5636b493d6", "message": "commit feedback", "committedDate": "2020-03-11T00:32:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY5MDEwOQ==", "url": "https://github.com/ConsenSys/teku/pull/1340#discussion_r390690109", "bodyText": "nice", "author": "macfarla", "createdAt": "2020-03-11T00:46:36Z", "path": "data/provider/src/test/java/tech/pegasys/artemis/api/ChainDataProviderTest.java", "diffHunk": "@@ -315,4 +318,70 @@ void getStateByBlockRoot_shouldReturnBeaconStateWhenFound()\n     BeaconState result = future.get().get();\n     assertThat(result).usingRecursiveComparison().isEqualTo(beaconState);\n   }\n+\n+  @Test\n+  void getUnsignedAttestationAtSlot_shouldReturnEmptyIfStoreNotFound() {\n+    ChainDataProvider provider =\n+        new ChainDataProvider(chainStorageClient, mockCombinedChainDataClient);\n+    when(mockCombinedChainDataClient.isStoreAvailable()).thenReturn(false);\n+    Optional<Attestation> optional = provider.getUnsignedAttestationAtSlot(ZERO, 0);\n+    verify(mockCombinedChainDataClient).isStoreAvailable();\n+    assertTrue(optional.isEmpty());\n+  }\n+\n+  @Test\n+  void getUnsignedAttestationAtSlot_shouldReturnEmptyIfSlotIsFinalized() {\n+    getUnsignedAttestationAtSlot_throwsIllegalArgumentException(0, true);\n+  }", "originalCommit": "465f36de1bed5ad723484f0cff5a3d5636b493d6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}