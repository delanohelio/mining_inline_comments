{"pr_number": 1471, "pr_title": "[BC-312] Update api handling of missing state", "pr_createdAt": "2020-03-25T18:00:10Z", "pr_url": "https://github.com/ConsenSys/teku/pull/1471", "timeline": [{"oid": "856f3c9ce766c0ca8f9076573b7b1d904a277519", "url": "https://github.com/ConsenSys/teku/commit/856f3c9ce766c0ca8f9076573b7b1d904a277519", "message": "Update validator/duties to handle missing state", "committedDate": "2020-03-25T17:52:47Z", "type": "commit"}, {"oid": "7d2e140d8ce4f07c845d9dbcadeaabda351ffd83", "url": "https://github.com/ConsenSys/teku/commit/7d2e140d8ce4f07c845d9dbcadeaabda351ffd83", "message": "Update /beacon/state handling of missing state", "committedDate": "2020-03-25T17:52:51Z", "type": "commit"}, {"oid": "0327ebae6457473c1626379f2f4d5b5cf1d9d865", "url": "https://github.com/ConsenSys/teku/commit/0327ebae6457473c1626379f2f4d5b5cf1d9d865", "message": "Update /beacon/validators handling of missing state", "committedDate": "2020-03-25T17:52:52Z", "type": "commit"}, {"oid": "95bde279bdbfb569c530d31cce8a62f5e5b66921", "url": "https://github.com/ConsenSys/teku/commit/95bde279bdbfb569c530d31cce8a62f5e5b66921", "message": "Get state root from block rather than state", "committedDate": "2020-03-25T17:52:52Z", "type": "commit"}, {"oid": "c4297c4ab91d49af8a756f55e6de07d79e0cf9e2", "url": "https://github.com/ConsenSys/teku/commit/c4297c4ab91d49af8a756f55e6de07d79e0cf9e2", "message": "Update /beacon/validators to return gone status when state is missing", "committedDate": "2020-03-25T17:52:52Z", "type": "commit"}, {"oid": "c2ec7015b6823d212abf15c32693354101806079", "url": "https://github.com/ConsenSys/teku/commit/c2ec7015b6823d212abf15c32693354101806079", "message": "Update beacon/committees to handle missing state", "committedDate": "2020-03-25T17:52:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODExNjgzMA==", "url": "https://github.com/ConsenSys/teku/pull/1471#discussion_r398116830", "bodyText": "nit: most of the time function name, then should, like queryBySlot_shouldReturnNoContentIfHeadRootMissing", "author": "rolfyone", "createdAt": "2020-03-25T19:32:30Z", "path": "data/beaconrestapi/src/integration-test/java/tech/pegasys/artemis/beaconrestapi/beacon/GetStateIntegrationTest.java", "diffHunk": "@@ -42,6 +48,50 @@ public void shouldReturnNoContentIfStoreNotDefined_queryBySlot() throws Exceptio\n     assertNoContent(response);\n   }\n \n+  @Test\n+  public void shouldReturnNoContentIfHeadRootMissing_queryBySlot() throws Exception {", "originalCommit": "c2ec7015b6823d212abf15c32693354101806079", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5Mjc2Mg==", "url": "https://github.com/ConsenSys/teku/pull/1471#discussion_r398792762", "bodyText": "There are 2 styles of test names that I typically use / have seen:\n\nmethodName_variationA_variationB\nshouldDoX_variationA\n\nI prefer the first style, but these tests are just invoking an http endpoint, so there's not really a method name to use.", "author": "mbaxter", "createdAt": "2020-03-26T18:19:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODExNjgzMA=="}], "type": "inlineReview", "revised_code": {"commit": "169831ceb1e572d2eb7df542cc9fcd764190bb5a", "chunk": "diff --git a/data/beaconrestapi/src/integration-test/java/tech/pegasys/artemis/beaconrestapi/beacon/GetStateIntegrationTest.java b/data/beaconrestapi/src/integration-test/java/tech/pegasys/artemis/beaconrestapi/beacon/GetStateIntegrationTest.java\nindex 819337ba30..7ee4e8995a 100644\n--- a/data/beaconrestapi/src/integration-test/java/tech/pegasys/artemis/beaconrestapi/beacon/GetStateIntegrationTest.java\n+++ b/data/beaconrestapi/src/integration-test/java/tech/pegasys/artemis/beaconrestapi/beacon/GetStateIntegrationTest.java\n\n@@ -43,6 +44,7 @@ public class GetStateIntegrationTest extends AbstractBeaconRestAPIIntegrationTes\n   @Test\n   public void shouldReturnNoContentIfStoreNotDefined_queryBySlot() throws Exception {\n     when(chainStorageClient.getStore()).thenReturn(null);\n+    when(chainStorageClient.getFinalizedEpoch()).thenReturn(UnsignedLong.ZERO);\n \n     final Response response = getBySlot(1);\n     assertNoContent(response);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODExNzA3NQ==", "url": "https://github.com/ConsenSys/teku/pull/1471#discussion_r398117075", "bodyText": "queryBySlot_shouldHandleMissingState", "author": "rolfyone", "createdAt": "2020-03-25T19:32:59Z", "path": "data/beaconrestapi/src/integration-test/java/tech/pegasys/artemis/beaconrestapi/beacon/GetStateIntegrationTest.java", "diffHunk": "@@ -42,6 +48,50 @@ public void shouldReturnNoContentIfStoreNotDefined_queryBySlot() throws Exceptio\n     assertNoContent(response);\n   }\n \n+  @Test\n+  public void shouldReturnNoContentIfHeadRootMissing_queryBySlot() throws Exception {\n+    final Store store = mock(Store.class);\n+    when(chainStorageClient.getStore()).thenReturn(store);\n+    when(chainStorageClient.getBestBlockRoot()).thenReturn(Optional.empty());\n+\n+    final Response response = getBySlot(1);\n+    assertNoContent(response);\n+  }\n+\n+  @Test\n+  public void handleMissingState_queryBySlot() throws Exception {", "originalCommit": "c2ec7015b6823d212abf15c32693354101806079", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "169831ceb1e572d2eb7df542cc9fcd764190bb5a", "chunk": "diff --git a/data/beaconrestapi/src/integration-test/java/tech/pegasys/artemis/beaconrestapi/beacon/GetStateIntegrationTest.java b/data/beaconrestapi/src/integration-test/java/tech/pegasys/artemis/beaconrestapi/beacon/GetStateIntegrationTest.java\nindex 819337ba30..7ee4e8995a 100644\n--- a/data/beaconrestapi/src/integration-test/java/tech/pegasys/artemis/beaconrestapi/beacon/GetStateIntegrationTest.java\n+++ b/data/beaconrestapi/src/integration-test/java/tech/pegasys/artemis/beaconrestapi/beacon/GetStateIntegrationTest.java\n\n@@ -43,6 +44,7 @@ public class GetStateIntegrationTest extends AbstractBeaconRestAPIIntegrationTes\n   @Test\n   public void shouldReturnNoContentIfStoreNotDefined_queryBySlot() throws Exception {\n     when(chainStorageClient.getStore()).thenReturn(null);\n+    when(chainStorageClient.getFinalizedEpoch()).thenReturn(UnsignedLong.ZERO);\n \n     final Response response = getBySlot(1);\n     assertNoContent(response);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODExNzU5NQ==", "url": "https://github.com/ConsenSys/teku/pull/1471#discussion_r398117595", "bodyText": "nit: queryBySlot_shouldReturnNoContentIfHeadRootUnavailable", "author": "rolfyone", "createdAt": "2020-03-25T19:33:56Z", "path": "data/beaconrestapi/src/integration-test/java/tech/pegasys/artemis/beaconrestapi/beacon/GetStateRootIntegrationTest.java", "diffHunk": "@@ -33,6 +36,16 @@ public void shouldReturnNoContentIfStoreNotDefined_queryBySlot() throws Exceptio\n     assertNoContent(response);\n   }\n \n+  @Test\n+  public void shouldReturnNoContentIfHeadRootUnavailable_queryBySlot() throws Exception {", "originalCommit": "c2ec7015b6823d212abf15c32693354101806079", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEyMDg5NA==", "url": "https://github.com/ConsenSys/teku/pull/1471#discussion_r398120894", "bodyText": "have we removed this test and re-tasked it?\nthe intent of this test was to show that an empty list is returned on an empty list passed in, and that's to be consistent with another API, so we should retain that intent in the testing.", "author": "rolfyone", "createdAt": "2020-03-25T19:39:58Z", "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/handlers/validator/PostDutiesTest.java", "diffHunk": "@@ -58,19 +58,20 @@ public void shouldReturnBadRequestWhenNegativeEpochNumberInBody() throws Excepti\n   }\n \n   @Test\n-  public void shouldReturnEmptyListWhenNoValidatorDuties() throws Exception {", "originalCommit": "c2ec7015b6823d212abf15c32693354101806079", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc5Nzg5Mg==", "url": "https://github.com/ConsenSys/teku/pull/1471#discussion_r398797892", "bodyText": "It looked to me as if we were using the empty list to just represent no data, so I cut this since we're now using Optional's to represent no data.  I've gone back and added some short-circuit logic that will return an empty list if an empty list of public keys are provided, and added some more tests.", "author": "mbaxter", "createdAt": "2020-03-26T18:26:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEyMDg5NA=="}], "type": "inlineReview", "revised_code": {"commit": "ed3ddc805ae9d4a5e0ac320bc53c43ab231a9e3a", "chunk": "diff --git a/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/handlers/validator/PostDutiesTest.java b/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/handlers/validator/PostDutiesTest.java\nindex 7e9c7cd8f1..d91337e4be 100644\n--- a/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/handlers/validator/PostDutiesTest.java\n+++ b/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/handlers/validator/PostDutiesTest.java\n\n@@ -58,12 +73,15 @@ public class PostDutiesTest {\n   }\n \n   @Test\n-  public void shouldHandleMissingResult() throws Exception {\n-    final String body = \"{\\\"epoch\\\":0,\\\"pubkeys\\\":[]}\";\n+  public void shouldHandleMissingResultForFinalizedEpoch() throws Exception {\n+    final UnsignedLong epoch = UnsignedLong.ZERO;\n+    final String body =\n+        String.format(\"{\\\"epoch\\\":%s, \\\"pubkeys\\\":[\\\"%s\\\"]}\", epoch, pubKeys.get(0));\n \n     PostDuties handler = new PostDuties(provider, jsonProvider);\n     when(provider.isStoreAvailable()).thenReturn(true);\n     when(context.body()).thenReturn(body);\n+    when(provider.isEpochFinalized(epoch)).thenReturn(true);\n     when(provider.getValidatorDutiesByRequest(any()))\n         .thenReturn(SafeFuture.completedFuture(Optional.empty()));\n     handler.handle(context);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEyMjI2NQ==", "url": "https://github.com/ConsenSys/teku/pull/1471#discussion_r398122265", "bodyText": "i'd still like a test to show behaviour on future epoch, and we definitely want that not cached", "author": "rolfyone", "createdAt": "2020-03-25T19:42:29Z", "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/handlers/beacon/GetCommitteesTest.java", "diffHunk": "@@ -101,20 +86,21 @@ public void shouldReturnBadRequestWhenNoEpochIsSupplied() throws Exception {\n   }\n \n   @Test\n-  public void shouldReturnEmptyListWhenAFutureEpochIsRequested() throws Exception {", "originalCommit": "c2ec7015b6823d212abf15c32693354101806079", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwNjE2NQ==", "url": "https://github.com/ConsenSys/teku/pull/1471#discussion_r398806165", "bodyText": "Added shouldHandleFutureEpoch and shouldHandleMissingFinalizedState", "author": "mbaxter", "createdAt": "2020-03-26T18:39:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEyMjI2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "169ceac812724640cf55a2a96b2ee5c3ba6d9425", "chunk": "diff --git a/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/handlers/beacon/GetCommitteesTest.java b/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/handlers/beacon/GetCommitteesTest.java\nindex 99715cc62c..9864388fd1 100644\n--- a/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/handlers/beacon/GetCommitteesTest.java\n+++ b/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/handlers/beacon/GetCommitteesTest.java\n\n@@ -86,17 +89,39 @@ public class GetCommitteesTest {\n   }\n \n   @Test\n-  public void shouldHandleMissingResult() throws Exception {\n+  public void shouldHandleFutureEpoch() throws Exception {\n+    final GetCommittees handler = new GetCommittees(provider, jsonProvider);\n+\n+    final UnsignedLong futureEpoch = epoch.plus(UnsignedLong.ONE);\n+    final UnsignedLong epochSlot = compute_start_slot_at_epoch(futureEpoch);\n+    when(context.queryParamMap()).thenReturn(Map.of(EPOCH, List.of(futureEpoch.toString())));\n+    when(provider.isStoreAvailable()).thenReturn(true);\n+    when(provider.isFinalized(epochSlot)).thenReturn(false);\n+    when(provider.getCommitteesAtEpoch(futureEpoch))\n+        .thenReturn(SafeFuture.completedFuture(Optional.empty()));\n+    handler.handle(context);\n+\n+    verify(context).result(args.capture());\n+    verify(context).header(Header.CACHE_CONTROL, CACHE_NONE);\n+    verify(provider).getCommitteesAtEpoch(futureEpoch);\n+    SafeFuture<String> future = args.getValue();\n+    verify(context).status(SC_NOT_FOUND);\n+    assertThat(future.get()).isNull();\n+  }\n+\n+  @Test\n+  public void shouldHandleMissingFinalizedState() throws Exception {\n     final GetCommittees handler = new GetCommittees(provider, jsonProvider);\n \n     when(context.queryParamMap()).thenReturn(Map.of(EPOCH, List.of(\"0\")));\n     when(provider.isStoreAvailable()).thenReturn(true);\n+    when(provider.isFinalized(ZERO)).thenReturn(true);\n     when(provider.getCommitteesAtEpoch(ZERO))\n         .thenReturn(SafeFuture.completedFuture(Optional.empty()));\n     handler.handle(context);\n \n     verify(context).result(args.capture());\n-    verify(context).header(Header.CACHE_CONTROL, CACHE_NONE);\n+    verify(context).header(Header.CACHE_CONTROL, CACHE_FINALIZED);\n     verify(provider).getCommitteesAtEpoch(ZERO);\n     SafeFuture<String> future = args.getValue();\n     verify(context).status(SC_GONE);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEyMjg2Ng==", "url": "https://github.com/ConsenSys/teku/pull/1471#discussion_r398122866", "bodyText": "if we're returning a result of 'SC_GONE', that can totally be cached, so this does look like a scenario we want to dig into if cache says none here. We'd be better off not setting the header at all and letting default behaviour happen potentially", "author": "rolfyone", "createdAt": "2020-03-25T19:43:38Z", "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/handlers/beacon/GetCommitteesTest.java", "diffHunk": "@@ -101,20 +86,21 @@ public void shouldReturnBadRequestWhenNoEpochIsSupplied() throws Exception {\n   }\n \n   @Test\n-  public void shouldReturnEmptyListWhenAFutureEpochIsRequested() throws Exception {\n+  public void shouldHandleMissingResult() throws Exception {\n     final GetCommittees handler = new GetCommittees(provider, jsonProvider);\n-    final UnsignedLong futureEpoch = slot.plus(UnsignedLong.valueOf(SLOTS_PER_EPOCH));\n \n+    when(context.queryParamMap()).thenReturn(Map.of(EPOCH, List.of(\"0\")));\n     when(provider.isStoreAvailable()).thenReturn(true);\n-    when(provider.getCommitteesAtEpoch(futureEpoch))\n-        .thenReturn(SafeFuture.completedFuture(List.of()));\n-    when(context.queryParamMap()).thenReturn(Map.of(EPOCH, List.of(futureEpoch.toString())));\n+    when(provider.getCommitteesAtEpoch(ZERO))\n+        .thenReturn(SafeFuture.completedFuture(Optional.empty()));\n     handler.handle(context);\n \n     verify(context).result(args.capture());\n     verify(context).header(Header.CACHE_CONTROL, CACHE_NONE);", "originalCommit": "c2ec7015b6823d212abf15c32693354101806079", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwNzM2Nw==", "url": "https://github.com/ConsenSys/teku/pull/1471#discussion_r398807367", "bodyText": "Added tests to check the cache.  If we're querying against a finalized state, we'll set CACHE_FINALIZED otherwise CACHE_NONE.", "author": "mbaxter", "createdAt": "2020-03-26T18:41:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEyMjg2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "169ceac812724640cf55a2a96b2ee5c3ba6d9425", "chunk": "diff --git a/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/handlers/beacon/GetCommitteesTest.java b/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/handlers/beacon/GetCommitteesTest.java\nindex 99715cc62c..9864388fd1 100644\n--- a/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/handlers/beacon/GetCommitteesTest.java\n+++ b/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/handlers/beacon/GetCommitteesTest.java\n\n@@ -86,17 +89,39 @@ public class GetCommitteesTest {\n   }\n \n   @Test\n-  public void shouldHandleMissingResult() throws Exception {\n+  public void shouldHandleFutureEpoch() throws Exception {\n+    final GetCommittees handler = new GetCommittees(provider, jsonProvider);\n+\n+    final UnsignedLong futureEpoch = epoch.plus(UnsignedLong.ONE);\n+    final UnsignedLong epochSlot = compute_start_slot_at_epoch(futureEpoch);\n+    when(context.queryParamMap()).thenReturn(Map.of(EPOCH, List.of(futureEpoch.toString())));\n+    when(provider.isStoreAvailable()).thenReturn(true);\n+    when(provider.isFinalized(epochSlot)).thenReturn(false);\n+    when(provider.getCommitteesAtEpoch(futureEpoch))\n+        .thenReturn(SafeFuture.completedFuture(Optional.empty()));\n+    handler.handle(context);\n+\n+    verify(context).result(args.capture());\n+    verify(context).header(Header.CACHE_CONTROL, CACHE_NONE);\n+    verify(provider).getCommitteesAtEpoch(futureEpoch);\n+    SafeFuture<String> future = args.getValue();\n+    verify(context).status(SC_NOT_FOUND);\n+    assertThat(future.get()).isNull();\n+  }\n+\n+  @Test\n+  public void shouldHandleMissingFinalizedState() throws Exception {\n     final GetCommittees handler = new GetCommittees(provider, jsonProvider);\n \n     when(context.queryParamMap()).thenReturn(Map.of(EPOCH, List.of(\"0\")));\n     when(provider.isStoreAvailable()).thenReturn(true);\n+    when(provider.isFinalized(ZERO)).thenReturn(true);\n     when(provider.getCommitteesAtEpoch(ZERO))\n         .thenReturn(SafeFuture.completedFuture(Optional.empty()));\n     handler.handle(context);\n \n     verify(context).result(args.capture());\n-    verify(context).header(Header.CACHE_CONTROL, CACHE_NONE);\n+    verify(context).header(Header.CACHE_CONTROL, CACHE_FINALIZED);\n     verify(provider).getCommitteesAtEpoch(ZERO);\n     SafeFuture<String> future = args.getValue();\n     verify(context).status(SC_GONE);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEyMzgxNA==", "url": "https://github.com/ConsenSys/teku/pull/1471#discussion_r398123814", "bodyText": "as long as the slot is historical this is probably ok, might need another test case showing a future slot is not setting SC_GONE", "author": "rolfyone", "createdAt": "2020-03-25T19:45:12Z", "path": "data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/handlers/beacon/GetStateTest.java", "diffHunk": "@@ -198,6 +198,6 @@ public void shouldReturnNotFoundWhenQueryByMissingSlot() throws Exception {\n \n     handler.handle(context);\n \n-    verify(context).status(SC_NOT_FOUND);", "originalCommit": "c2ec7015b6823d212abf15c32693354101806079", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwODY5NQ==", "url": "https://github.com/ConsenSys/teku/pull/1471#discussion_r398808695", "bodyText": "Updated to set the status based on whether slot is finalized.  If its finalized, we'll set the status to 410 GONE, if non-final we set it to 404 NOT_FOUND.  Added tests shouldHandleMissingStateAtFinalizedSlot and shouldHandleMissingStateAtNonFinalSlot.", "author": "mbaxter", "createdAt": "2020-03-26T18:43:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEyMzgxNA=="}], "type": "inlineReview", "revised_code": {"commit": "25e5916f25a034c9631f7bc1dd8c76017a93a7d1", "chunk": "diff --git a/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/handlers/beacon/GetStateTest.java b/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/handlers/beacon/GetStateTest.java\nindex fe8e8416c8..07553666b9 100644\n--- a/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/handlers/beacon/GetStateTest.java\n+++ b/data/beaconrestapi/src/test/java/tech/pegasys/artemis/beaconrestapi/handlers/beacon/GetStateTest.java\n\n@@ -188,11 +189,13 @@ public class GetStateTest {\n   }\n \n   @Test\n-  public void shouldReturnNotFoundWhenQueryByMissingSlot() throws Exception {\n+  public void shouldHandleMissingStateAtFinalizedSlot() throws Exception {\n     final GetState handler = new GetState(dataProvider, jsonProvider);\n+    final UnsignedLong slot = UnsignedLong.valueOf(11223344L);\n \n     when(dataProvider.isStoreAvailable()).thenReturn(true);\n-    when(context.queryParamMap()).thenReturn(Map.of(SLOT, List.of(\"11223344\")));\n+    when(context.queryParamMap()).thenReturn(Map.of(SLOT, List.of(slot.toString())));\n+    when(dataProvider.isFinalized(slot)).thenReturn(true);\n     when(dataProvider.getStateAtSlot(any()))\n         .thenReturn(SafeFuture.completedFuture(Optional.empty()));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEyNTQ0MQ==", "url": "https://github.com/ConsenSys/teku/pull/1471#discussion_r398125441", "bodyText": "nit: static import failedFuture?", "author": "rolfyone", "createdAt": "2020-03-25T19:48:08Z", "path": "data/provider/src/main/java/tech/pegasys/artemis/api/ChainDataProvider.java", "diffHunk": "@@ -133,28 +135,39 @@ CombinedChainDataClient getCombinedChainDataClient() {\n     }\n     return combinedChainDataClient\n         .getStateByBlockRoot(blockRoot)\n-        .thenApply(state -> state.map(BeaconState::new))\n-        .exceptionally(err -> Optional.empty());\n+        .thenApply(state -> state.map(BeaconState::new));\n   }\n \n   public SafeFuture<Optional<BeaconState>> getStateAtSlot(UnsignedLong slot) {\n-    if (!isStoreAvailable()) {\n-      return SafeFuture.failedFuture(new ChainDataUnavailableException());\n-    }\n-    return combinedChainDataClient\n-        .getStateAtSlot(slot)\n-        .thenApply(state -> state.map(BeaconState::new))\n-        .exceptionally(err -> Optional.empty());\n+    return SafeFuture.of(\n+        () -> {\n+          if (!isStoreAvailable()) {\n+            return SafeFuture.failedFuture(new ChainDataUnavailableException());", "originalCommit": "c2ec7015b6823d212abf15c32693354101806079", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODgwOTM3Mw==", "url": "https://github.com/ConsenSys/teku/pull/1471#discussion_r398809373", "bodyText": "I tend to stay away from static imports for the most part \ud83e\udd37\u200d\u2640", "author": "mbaxter", "createdAt": "2020-03-26T18:44:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEyNTQ0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "98247d3f6a97be6cb6d2b50a68b8501858b41781", "chunk": "diff --git a/data/provider/src/main/java/tech/pegasys/artemis/api/ChainDataProvider.java b/data/provider/src/main/java/tech/pegasys/artemis/api/ChainDataProvider.java\nindex 8073e5f44b..33fbc1de96 100644\n--- a/data/provider/src/main/java/tech/pegasys/artemis/api/ChainDataProvider.java\n+++ b/data/provider/src/main/java/tech/pegasys/artemis/api/ChainDataProvider.java\n\n@@ -170,39 +155,13 @@ public class ChainDataProvider {\n         });\n   }\n \n-  public Optional<Attestation> getUnsignedAttestationAtSlot(\n-      UnsignedLong slot, Integer committeeIndex) {\n-    if (!isStoreAvailable()) {\n-      throw new ChainDataUnavailableException();\n-    }\n-    if (isFinalized(slot)) {\n-      throw new IllegalArgumentException(\n-          String.format(\"Slot %s is finalized, no attestation will be created.\", slot.toString()));\n-    }\n-    Optional<tech.pegasys.artemis.datastructures.blocks.BeaconBlock> block =\n-        chainStorageClient.getBlockBySlot(slot);\n-    Optional<tech.pegasys.artemis.datastructures.state.BeaconState> state =\n-        chainStorageClient.getBestBlockRootState();\n-    if (block.isEmpty() || state.isEmpty()) {\n-      return Optional.empty();\n-    }\n-\n-    int committeeCount = get_committee_count_at_slot(state.get(), slot).intValue();\n-    if (committeeIndex < 0 || committeeIndex >= committeeCount) {\n-      throw new IllegalArgumentException(\n-          \"Invalid committee index provided - expected between 0 and \" + (committeeCount - 1));\n-    }\n-\n-    tech.pegasys.artemis.datastructures.operations.AttestationData internalAttestation =\n-        AttestationUtil.getGenericAttestationData(state.get(), block.get());\n-    AttestationData data = new AttestationData(internalAttestation);\n-    Bitlist aggregationBits = AttestationUtil.getAggregationBits(committeeCount, committeeIndex);\n-    Attestation attestation = new Attestation(aggregationBits, data, BLSSignature.empty());\n-    return Optional.of(attestation);\n-  }\n-\n   public SafeFuture<Optional<BeaconValidators>> getValidatorsByValidatorsRequest(\n       final ValidatorsRequest request) {\n+    if (request.pubkeys.isEmpty()) {\n+      // Short-circuit if we're not requesting anything\n+      return SafeFuture.completedFuture(Optional.of(BeaconValidators.emptySet()));\n+    }\n+\n     return SafeFuture.of(\n         () -> {\n           final Bytes32 bestBlockRoot =\n"}}, {"oid": "169ceac812724640cf55a2a96b2ee5c3ba6d9425", "url": "https://github.com/ConsenSys/teku/commit/169ceac812724640cf55a2a96b2ee5c3ba6d9425", "message": "If epoch is non-final, return 404 in /beacon/committees", "committedDate": "2020-03-25T22:04:00Z", "type": "commit"}, {"oid": "25e5916f25a034c9631f7bc1dd8c76017a93a7d1", "url": "https://github.com/ConsenSys/teku/commit/25e5916f25a034c9631f7bc1dd8c76017a93a7d1", "message": "Update beacon/state to set status based on finalization status of slot", "committedDate": "2020-03-26T15:32:58Z", "type": "commit"}, {"oid": "ed3ddc805ae9d4a5e0ac320bc53c43ab231a9e3a", "url": "https://github.com/ConsenSys/teku/commit/ed3ddc805ae9d4a5e0ac320bc53c43ab231a9e3a", "message": "Update /validator/duties to set status based on epoch finalization", "committedDate": "2020-03-26T15:57:01Z", "type": "commit"}, {"oid": "61cb397f82425e6dd558817b2508ced781edb128", "url": "https://github.com/ConsenSys/teku/commit/61cb397f82425e6dd558817b2508ced781edb128", "message": "Update /validator/duties to return empty list if no keys are supplied", "committedDate": "2020-03-26T16:03:29Z", "type": "commit"}, {"oid": "f45ba697c3486a51f7a8296217c563ceccc52744", "url": "https://github.com/ConsenSys/teku/commit/f45ba697c3486a51f7a8296217c563ceccc52744", "message": "Update /beacon/validators to return status depending on finalization", "committedDate": "2020-03-26T17:34:40Z", "type": "commit"}, {"oid": "1af5b1ab37b4cdd4ef2584acf5d9df46a39cfc35", "url": "https://github.com/ConsenSys/teku/commit/1af5b1ab37b4cdd4ef2584acf5d9df46a39cfc35", "message": "Update /beacon/validators to set status based on epoch finalization", "committedDate": "2020-03-26T18:08:26Z", "type": "commit"}, {"oid": "50927f72e4e8a0d2f64c178bd9ab15bc643a1f75", "url": "https://github.com/ConsenSys/teku/commit/50927f72e4e8a0d2f64c178bd9ab15bc643a1f75", "message": "Update /beacon/validators to return empty list if pubkeys is empty", "committedDate": "2020-03-26T18:09:29Z", "type": "commit"}, {"oid": "16efa4cd32291ce59076c98bcefaa1a18ac3fc7e", "url": "https://github.com/ConsenSys/teku/commit/16efa4cd32291ce59076c98bcefaa1a18ac3fc7e", "message": "Run code formatter", "committedDate": "2020-03-26T18:15:50Z", "type": "commit"}, {"oid": "169831ceb1e572d2eb7df542cc9fcd764190bb5a", "url": "https://github.com/ConsenSys/teku/commit/169831ceb1e572d2eb7df542cc9fcd764190bb5a", "message": "Update GetState integration tests", "committedDate": "2020-03-26T18:33:14Z", "type": "commit"}, {"oid": "63a115b8542a6f7b9c1a6b7392cc350cda12ceb9", "url": "https://github.com/ConsenSys/teku/commit/63a115b8542a6f7b9c1a6b7392cc350cda12ceb9", "message": "Merge branch 'master' into bc-312/update-api-handling-of-missing-state", "committedDate": "2020-03-26T18:45:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg4MjM3NA==", "url": "https://github.com/ConsenSys/teku/pull/1471#discussion_r398882374", "bodyText": "i wasn't too worried about the literal '1', i was just saying UnsignedLong.ONE could easily be static imported and just ONE...", "author": "rolfyone", "createdAt": "2020-03-26T20:49:01Z", "path": "data/beaconrestapi/src/integration-test/java/tech/pegasys/artemis/beaconrestapi/beacon/PostDutiesIntegrationTest.java", "diffHunk": "@@ -36,22 +39,40 @@\n \n   @Test\n   public void shouldReturnNoContentIfStoreNotDefined() throws Exception {\n+    final UnsignedLong epoch = UnsignedLong.ONE;\n     when(chainStorageClient.getStore()).thenReturn(null);\n+    when(chainStorageClient.getFinalizedEpoch()).thenReturn(epoch);\n \n-    final Response response = post(1, keys);\n+    final Response response = post(epoch.intValue(), keys);", "originalCommit": "63a115b8542a6f7b9c1a6b7392cc350cda12ceb9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c6b96f6825481dc548163947b1e315d8871b8846", "chunk": "diff --git a/data/beaconrestapi/src/integration-test/java/tech/pegasys/artemis/beaconrestapi/beacon/PostDutiesIntegrationTest.java b/data/beaconrestapi/src/integration-test/java/tech/pegasys/artemis/beaconrestapi/beacon/PostDutiesIntegrationTest.java\nindex 70ba73f0fe..813b78d3a0 100644\n--- a/data/beaconrestapi/src/integration-test/java/tech/pegasys/artemis/beaconrestapi/beacon/PostDutiesIntegrationTest.java\n+++ b/data/beaconrestapi/src/integration-test/java/tech/pegasys/artemis/beaconrestapi/beacon/PostDutiesIntegrationTest.java\n\n@@ -63,10 +62,6 @@ public class PostDutiesIntegrationTest extends AbstractBeaconRestAPIIntegrationT\n   @Test\n   public void shouldReturnEmptyListWhenNoPubKeysSupplied() throws Exception {\n     final UnsignedLong epoch = UnsignedLong.ONE;\n-    final Bytes32 root = dataStructureUtil.randomBytes32();\n-    final Store store = mock(Store.class);\n-    when(chainStorageClient.getStore()).thenReturn(store);\n-    when(chainStorageClient.getBestBlockRoot()).thenReturn(Optional.of(root));\n     when(chainStorageClient.getFinalizedEpoch()).thenReturn(epoch);\n \n     final Response response = post(epoch.intValue(), Collections.emptyList());\n"}}, {"oid": "98247d3f6a97be6cb6d2b50a68b8501858b41781", "url": "https://github.com/ConsenSys/teku/commit/98247d3f6a97be6cb6d2b50a68b8501858b41781", "message": "Merge branch 'master' into bc-312/update-api-handling-of-missing-state", "committedDate": "2020-03-27T14:17:42Z", "type": "commit"}, {"oid": "c6b96f6825481dc548163947b1e315d8871b8846", "url": "https://github.com/ConsenSys/teku/commit/c6b96f6825481dc548163947b1e315d8871b8846", "message": "Short-circuit empty responses consistently", "committedDate": "2020-03-27T15:35:11Z", "type": "commit"}]}