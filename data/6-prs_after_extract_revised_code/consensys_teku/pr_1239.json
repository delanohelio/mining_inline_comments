{"pr_number": 1239, "pr_title": "Introduce ConnectionManager and integrate discovery", "pr_createdAt": "2020-02-27T04:51:35Z", "pr_url": "https://github.com/ConsenSys/teku/pull/1239", "timeline": [{"oid": "736e81cb27d79324070e9a530121f535e998aeeb", "url": "https://github.com/ConsenSys/teku/commit/736e81cb27d79324070e9a530121f535e998aeeb", "message": "Introduce ConnectionManager and integrate discovery into our P2P network.", "committedDate": "2020-02-27T04:39:29Z", "type": "commit"}, {"oid": "3d7f709f31621361f0f9d40633939f81a940e698", "url": "https://github.com/ConsenSys/teku/commit/3d7f709f31621361f0f9d40633939f81a940e698", "message": "Use interface as return type.", "committedDate": "2020-02-27T04:41:06Z", "type": "commit"}, {"oid": "6f3a820ea78eba40adc64320f66b6284b24f46ce", "url": "https://github.com/ConsenSys/teku/commit/6f3a820ea78eba40adc64320f66b6284b24f46ce", "message": "Merge branch 'master' of github.com:PegaSysEng/artemis into connection-manager", "committedDate": "2020-02-27T04:51:52Z", "type": "commit"}, {"oid": "ce23bbe717dd5fa818e73f4dc30e3b56c0f6a12a", "url": "https://github.com/ConsenSys/teku/commit/ce23bbe717dd5fa818e73f4dc30e3b56c0f6a12a", "message": "Fix integration and add timeout.", "committedDate": "2020-02-27T05:14:28Z", "type": "commit"}, {"oid": "3e8840ef5224173f94aec6f5a6b872af3420d37f", "url": "https://github.com/ConsenSys/teku/commit/3e8840ef5224173f94aec6f5a6b872af3420d37f", "message": "Merge branch 'master' of github.com:PegaSysEng/artemis into connection-manager", "committedDate": "2020-02-27T05:16:11Z", "type": "commit"}, {"oid": "ccc5b0e12b02e0d58f7f9ec3d99c60a40898c6f0", "url": "https://github.com/ConsenSys/teku/commit/ccc5b0e12b02e0d58f7f9ec3d99c60a40898c6f0", "message": "Spotless.", "committedDate": "2020-02-27T05:16:56Z", "type": "commit"}, {"oid": "2617b922b0d18fa31b16ec996becfbb484cbd373", "url": "https://github.com/ConsenSys/teku/commit/2617b922b0d18fa31b16ec996becfbb484cbd373", "message": "Suppress warning.", "committedDate": "2020-02-27T05:19:27Z", "type": "commit"}, {"oid": "b2d72b29428c4483b435d1363c00b2a6a8ebff5e", "url": "https://github.com/ConsenSys/teku/commit/b2d72b29428c4483b435d1363c00b2a6a8ebff5e", "message": "Convert to LibP2P PeerIDs the right way.", "committedDate": "2020-02-27T09:05:03Z", "type": "commit"}, {"oid": "fc187152e857d85cb2cef8decf8f0f92476d5cee", "url": "https://github.com/ConsenSys/teku/commit/fc187152e857d85cb2cef8decf8f0f92476d5cee", "message": "Merge branch 'master' of github.com:PegaSysEng/artemis into connection-manager", "committedDate": "2020-02-27T20:31:40Z", "type": "commit"}, {"oid": "b44d97c1aaa240486ed5d628819e19d6b3330462", "url": "https://github.com/ConsenSys/teku/commit/b44d97c1aaa240486ed5d628819e19d6b3330462", "message": "Add getEnr.", "committedDate": "2020-02-27T22:07:04Z", "type": "commit"}, {"oid": "34fb4f7e4070f9a5107c1b05291d6eaa49c3cffc", "url": "https://github.com/ConsenSys/teku/commit/34fb4f7e4070f9a5107c1b05291d6eaa49c3cffc", "message": "Fix compile.", "committedDate": "2020-02-27T22:11:10Z", "type": "commit"}, {"oid": "61171fe7b84f352556eef9efec414499f9883f71", "url": "https://github.com/ConsenSys/teku/commit/61171fe7b84f352556eef9efec414499f9883f71", "message": "Fix test.", "committedDate": "2020-02-27T22:48:48Z", "type": "commit"}, {"oid": "d1c8c9f6e26da7c6e5c40c028b37cd2597a3bf71", "url": "https://github.com/ConsenSys/teku/commit/d1c8c9f6e26da7c6e5c40c028b37cd2597a3bf71", "message": "MockP2PNetwork never actually uses peers, so it can have a generic Peer type and we can avoid casting.", "committedDate": "2020-02-27T23:16:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcxOTMxNQ==", "url": "https://github.com/ConsenSys/teku/pull/1239#discussion_r385719315", "bodyText": "nice", "author": "mbaxter", "createdAt": "2020-02-28T14:18:38Z", "path": "networking/p2p/src/main/java/tech/pegasys/artemis/networking/p2p/discovery/ConnectionManager.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.networking.p2p.discovery;\n+\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.artemis.networking.p2p.network.P2PNetwork;\n+import tech.pegasys.artemis.networking.p2p.peer.Peer;\n+import tech.pegasys.artemis.service.serviceutils.Service;\n+import tech.pegasys.artemis.util.async.AsyncRunner;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+\n+public class ConnectionManager extends Service {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private static final Duration RECONNECT_TIMEOUT = Duration.ofSeconds(20);\n+  private static final Duration DISCOVERY_INTERVAL = Duration.ofSeconds(30);\n+  private final AsyncRunner asyncRunner;\n+  private final P2PNetwork<? extends Peer> network;\n+  private final List<String> staticPeers;\n+  private final DiscoveryService discoveryService;\n+\n+  public ConnectionManager(\n+      final DiscoveryService discoveryService,\n+      final AsyncRunner asyncRunner,\n+      final P2PNetwork<? extends Peer> network,\n+      final List<String> staticPeers) {\n+    this.asyncRunner = asyncRunner;\n+    this.network = network;\n+    this.staticPeers = staticPeers;\n+    this.discoveryService = discoveryService;\n+  }\n+\n+  @Override\n+  protected SafeFuture<?> doStart() {\n+    staticPeers.forEach(this::createPersistentConnection);\n+    connectToKnownPeers();\n+    searchForPeers().reportExceptions();\n+    return SafeFuture.COMPLETE;\n+  }\n+\n+  private void connectToKnownPeers() {\n+    discoveryService.streamKnownPeers().forEach(this::attemptConnection);\n+  }\n+\n+  private SafeFuture<Void> searchForPeers() {\n+    if (!isRunning()) {\n+      return SafeFuture.COMPLETE;\n+    }\n+    return SafeFuture.of(discoveryService.searchForPeers())\n+        .orTimeout(10, TimeUnit.SECONDS)\n+        .exceptionally(\n+            error -> {\n+              LOG.debug(\"Discovery failed\", error);\n+              return null;\n+            })\n+        .thenCompose(\n+            __ -> {\n+              connectToKnownPeers();\n+              return asyncRunner.runAfterDelay(\n+                  this::searchForPeers, DISCOVERY_INTERVAL.toMillis(), TimeUnit.MILLISECONDS);\n+            });\n+  }\n+\n+  private void attemptConnection(final DiscoveryPeer discoveryPeer) {\n+    network\n+        .connect(discoveryPeer)\n+        .finish(\n+            peer -> LOG.trace(\"Successfully connected to peer {}\", peer.getId()),\n+            error ->\n+                LOG.trace(\n+                    () -> \"Failed to connect to peer: \" + discoveryPeer.getPublicKey(), error));\n+  }\n+\n+  @Override\n+  protected SafeFuture<?> doStop() {\n+    return SafeFuture.COMPLETE;\n+  }\n+\n+  private void createPersistentConnection(final String peerAddress) {\n+    maintainPersistentConnection(peerAddress).reportExceptions();\n+  }\n+\n+  private SafeFuture<Peer> maintainPersistentConnection(final String peerAddress) {\n+    LOG.debug(\"Connecting to peer {}\", peerAddress);\n+    return network\n+        .connect(peerAddress)\n+        .exceptionallyCompose(\n+            error -> {\n+              if (!isRunning()) {\n+                // We've been stopped so halt the process.\n+                return new SafeFuture<>();\n+              }\n+              LOG.debug(\n+                  \"Connection to {} failed: {}. Will retry in {} sec\",\n+                  peerAddress,\n+                  error,\n+                  RECONNECT_TIMEOUT.toSeconds());\n+              return asyncRunner.runAfterDelay(\n+                  () -> maintainPersistentConnection(peerAddress),\n+                  RECONNECT_TIMEOUT.toMillis(),\n+                  TimeUnit.MILLISECONDS);\n+            })\n+        .thenApply(\n+            peer -> {\n+              LOG.debug(\"Connection to peer {} was successful\", peer.getId());\n+              peer.subscribeDisconnect(() -> createPersistentConnection(peerAddress));", "originalCommit": "d1c8c9f6e26da7c6e5c40c028b37cd2597a3bf71", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcyMTIzNQ==", "url": "https://github.com/ConsenSys/teku/pull/1239#discussion_r385721235", "bodyText": "Isn't this going to create multiple connections to each discovered peer?", "author": "mbaxter", "createdAt": "2020-02-28T14:22:19Z", "path": "networking/p2p/src/main/java/tech/pegasys/artemis/networking/p2p/discovery/ConnectionManager.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.networking.p2p.discovery;\n+\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import tech.pegasys.artemis.networking.p2p.network.P2PNetwork;\n+import tech.pegasys.artemis.networking.p2p.peer.Peer;\n+import tech.pegasys.artemis.service.serviceutils.Service;\n+import tech.pegasys.artemis.util.async.AsyncRunner;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+\n+public class ConnectionManager extends Service {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private static final Duration RECONNECT_TIMEOUT = Duration.ofSeconds(20);\n+  private static final Duration DISCOVERY_INTERVAL = Duration.ofSeconds(30);\n+  private final AsyncRunner asyncRunner;\n+  private final P2PNetwork<? extends Peer> network;\n+  private final List<String> staticPeers;\n+  private final DiscoveryService discoveryService;\n+\n+  public ConnectionManager(\n+      final DiscoveryService discoveryService,\n+      final AsyncRunner asyncRunner,\n+      final P2PNetwork<? extends Peer> network,\n+      final List<String> staticPeers) {\n+    this.asyncRunner = asyncRunner;\n+    this.network = network;\n+    this.staticPeers = staticPeers;\n+    this.discoveryService = discoveryService;\n+  }\n+\n+  @Override\n+  protected SafeFuture<?> doStart() {\n+    staticPeers.forEach(this::createPersistentConnection);\n+    connectToKnownPeers();\n+    searchForPeers().reportExceptions();\n+    return SafeFuture.COMPLETE;\n+  }\n+\n+  private void connectToKnownPeers() {\n+    discoveryService.streamKnownPeers().forEach(this::attemptConnection);", "originalCommit": "d1c8c9f6e26da7c6e5c40c028b37cd2597a3bf71", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM2MTU0NQ==", "url": "https://github.com/ConsenSys/teku/pull/1239#discussion_r387361545", "bodyText": "Logged https://pegasys1.atlassian.net/browse/BC-284 and https://pegasys1.atlassian.net/browse/BC-285 to limit the total connected peers and avoid connecting to duplicates.\nAs discussed elsewhere, we probably want to have a target number of peers with some variance allowed above and below that before we take action. That makes a lot of things easier to implement but particularly allows us to accept connections from new peers then evaluate if they are better than existing ones to decide who to drop instead of always rejecting the new peer.", "author": "ajsutton", "createdAt": "2020-03-03T23:43:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcyMTIzNQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcyMjkwOA==", "url": "https://github.com/ConsenSys/teku/pull/1239#discussion_r385722908", "bodyText": "We no longer need to manage static peers here, right?", "author": "mbaxter", "createdAt": "2020-02-28T14:25:25Z", "path": "networking/p2p/src/main/java/tech/pegasys/artemis/networking/p2p/libp2p/LibP2PNetwork.java", "diffHunk": "@@ -154,7 +153,7 @@ public LibP2PNetwork(\n               STDOUT.log(Level.INFO, \"Listening for connections on: \" + getNodeAddress());\n               return null;\n             })\n-        .thenRun(() -> config.getPeers().forEach(reportExceptions(this::connect)));\n+        .thenRun(() -> config.getStaticPeers().forEach(reportExceptions(this::connect)));", "originalCommit": "d1c8c9f6e26da7c6e5c40c028b37cd2597a3bf71", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE0MzY2Ng==", "url": "https://github.com/ConsenSys/teku/pull/1239#discussion_r386143666", "bodyText": "True.", "author": "ajsutton", "createdAt": "2020-03-01T21:46:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcyMjkwOA=="}], "type": "inlineReview", "revised_code": {"commit": "52bc166c35d29609ca50d5b27b5c9b7bc5f4b9b9", "chunk": "diff --git a/networking/p2p/src/main/java/tech/pegasys/artemis/networking/p2p/libp2p/LibP2PNetwork.java b/networking/p2p/src/main/java/tech/pegasys/artemis/networking/p2p/libp2p/LibP2PNetwork.java\nindex 8b8296bd2..b35966f5c 100644\n--- a/networking/p2p/src/main/java/tech/pegasys/artemis/networking/p2p/libp2p/LibP2PNetwork.java\n+++ b/networking/p2p/src/main/java/tech/pegasys/artemis/networking/p2p/libp2p/LibP2PNetwork.java\n\n@@ -152,8 +152,7 @@ public class LibP2PNetwork implements P2PNetwork<Peer> {\n             i -> {\n               STDOUT.log(Level.INFO, \"Listening for connections on: \" + getNodeAddress());\n               return null;\n-            })\n-        .thenRun(() -> config.getStaticPeers().forEach(reportExceptions(this::connect)));\n+            });\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTczODcyMw==", "url": "https://github.com/ConsenSys/teku/pull/1239#discussion_r385738723", "bodyText": "This won't necessarily give us the right answer if we end up connecting to different endpoints using the same node id.  That sounds sort of theoretical, but the prysm node i've been running seems to be tracking lots of peers with the same node id but different addresses.  It also won't handle duplicate connections to the same endpoint.\nWe should probably make connectedPeerMap map from Connection to Peer.", "author": "mbaxter", "createdAt": "2020-02-28T14:54:19Z", "path": "networking/p2p/src/main/java/tech/pegasys/artemis/networking/p2p/libp2p/PeerManager.java", "diffHunk": "@@ -81,36 +74,12 @@ public void unsubscribeConnect(final long subscriptionId) {\n     connectSubscribers.unsubscribe(subscriptionId);\n   }\n \n-  public SafeFuture<?> connect(final Multiaddr peer, final Network network) {\n+  public SafeFuture<Peer> connect(final Multiaddr peer, final Network network) {\n     LOG.debug(\"Connecting to {}\", peer);\n-    final SafeFuture<Connection> initialConnectionFuture = SafeFuture.of(network.connect(peer));\n-\n-    // Retry if peer disconnects or we fail to connect\n-    initialConnectionFuture\n-        .thenCompose(\n-            conn -> {\n-              LOG.debug(\"Connection to peer {} was successful\", conn.secureSession().getRemoteId());\n-              return SafeFuture.of(conn.closeFuture());\n-            })\n-        .exceptionally(\n-            (err) -> {\n-              LOG.debug(\"Connection to {} failed: {}\", peer, err);\n-              return null;\n-            })\n-        .thenCompose(\n-            (res) -> {\n-              LOG.debug(\n-                  \"Connection to {} was closed. Will retry in {} sec\",\n-                  peer,\n-                  RECONNECT_TIMEOUT.toSeconds());\n-              return asyncRunner.runAfterDelay(\n-                  () -> connect(peer, network).exceptionally(err -> null),\n-                  RECONNECT_TIMEOUT.toMillis(),\n-                  TimeUnit.MILLISECONDS);\n-            })\n-        .reportExceptions();\n-\n-    return initialConnectionFuture;\n+    return SafeFuture.of(network.connect(peer))\n+        .thenApply(\n+            connection ->\n+                connectedPeerMap.get(new LibP2PNodeId(connection.secureSession().getRemoteId())));", "originalCommit": "d1c8c9f6e26da7c6e5c40c028b37cd2597a3bf71", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM2MTk1NQ==", "url": "https://github.com/ConsenSys/teku/pull/1239#discussion_r387361955", "bodyText": "PeerManager isn't really dealing that case properly now so we can deal with this as part of https://pegasys1.atlassian.net/browse/BC-285", "author": "ajsutton", "createdAt": "2020-03-03T23:44:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTczODcyMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1MzU0OQ==", "url": "https://github.com/ConsenSys/teku/pull/1239#discussion_r385753549", "bodyText": "I'm not sure this is the right structure long-term.  At some point, the eth2 logic will need to be able to ask the ConnectionManager to find and maintain connections to peers who support specific topics.\nI was thinking we could have an independent p2p.connection package with a ConnectionManager that holds a P2PNetwork and a DiscoveryService, and could expose methods for setting static peers, max connections, and other peer requirements (like required topics).  Eth2NetworkFactory could then build a ConnectionManager configured however it wants.", "author": "mbaxter", "createdAt": "2020-02-28T15:19:52Z", "path": "networking/p2p/src/main/java/tech/pegasys/artemis/networking/p2p/DiscoveryNetwork.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.networking.p2p;\n+\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.artemis.networking.p2p.discovery.ConnectionManager;\n+import tech.pegasys.artemis.networking.p2p.discovery.DiscoveryService;\n+import tech.pegasys.artemis.networking.p2p.discovery.discv5.DiscV5Service;\n+import tech.pegasys.artemis.networking.p2p.network.DelegatingP2PNetwork;\n+import tech.pegasys.artemis.networking.p2p.network.NetworkConfig;\n+import tech.pegasys.artemis.networking.p2p.network.P2PNetwork;\n+import tech.pegasys.artemis.networking.p2p.peer.NodeId;\n+import tech.pegasys.artemis.networking.p2p.peer.Peer;\n+import tech.pegasys.artemis.networking.p2p.peer.PeerConnectedSubscriber;\n+import tech.pegasys.artemis.util.async.DelayedExecutorAsyncRunner;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+\n+public class DiscoveryNetwork<P extends Peer> extends DelegatingP2PNetwork<P> {\n+  private static final Logger LOG = LogManager.getLogger();\n+  private final P2PNetwork<P> p2pNetwork;\n+  private final DiscoveryService discoveryService;\n+  private final ConnectionManager connectionManager;\n+\n+  public DiscoveryNetwork(\n+      final P2PNetwork<P> p2pNetwork,\n+      final DiscoveryService discoveryService,\n+      final ConnectionManager connectionManager) {\n+    super(p2pNetwork);\n+    this.p2pNetwork = p2pNetwork;\n+    this.discoveryService = discoveryService;\n+    this.connectionManager = connectionManager;", "originalCommit": "d1c8c9f6e26da7c6e5c40c028b37cd2597a3bf71", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE2OTk4NA==", "url": "https://github.com/ConsenSys/teku/pull/1239#discussion_r386169984", "bodyText": "Yeah I'm not sure what the final design will be.  The trouble with a stand-alone ConnectionManager is that you wind up with a cycle of dependencies because the ConnectionManager needs the P2PNetwork but Eth2P2PNetwork wants access to the ConnectionManager.\nWe can push the construction of DiscoveryNetwork inside Eth2NetworkBuilder but it doesn't really change all that much.  It wouldn't surprise me if we do refactor this area, but I'm really not sure what it winds up looking like just yet.  The whole architecture of how topic discovery works seems to still be up in the air a bit.", "author": "ajsutton", "createdAt": "2020-03-02T02:08:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1MzU0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ1NDk2MQ==", "url": "https://github.com/ConsenSys/teku/pull/1239#discussion_r386454961", "bodyText": "If ConnectionManager holds the base P2PNetwork (LibP2PNetwork) rather than the higher-level Eth2Network, you don't get circular dependencies.", "author": "mbaxter", "createdAt": "2020-03-02T15:18:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1MzU0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc5MDk4NQ==", "url": "https://github.com/ConsenSys/teku/pull/1239#discussion_r386790985", "bodyText": "ok yeah I see how that works.  So for now I'm giving it DiscoveryNetwork but Eth2Network is still just treating it as any old P2PNetwork.  I suspect once we start addressing topic discovery it will wind up taking either explicitly a DiscoveryNetwork or some interface that extends P2PNetwork but with extra methods for subscribing to topics etc.", "author": "ajsutton", "createdAt": "2020-03-03T04:16:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1MzU0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "99f8c419af3f075f25de12deeb455a0dab9cd638", "chunk": "diff --git a/networking/p2p/src/main/java/tech/pegasys/artemis/networking/p2p/DiscoveryNetwork.java b/networking/p2p/src/main/java/tech/pegasys/artemis/networking/p2p/DiscoveryNetwork.java\nindex 700ed9cae..08c22ae67 100644\n--- a/networking/p2p/src/main/java/tech/pegasys/artemis/networking/p2p/DiscoveryNetwork.java\n+++ b/networking/p2p/src/main/java/tech/pegasys/artemis/networking/p2p/DiscoveryNetwork.java\n\n@@ -21,6 +21,7 @@ import org.apache.tuweni.bytes.Bytes;\n import tech.pegasys.artemis.networking.p2p.discovery.ConnectionManager;\n import tech.pegasys.artemis.networking.p2p.discovery.DiscoveryService;\n import tech.pegasys.artemis.networking.p2p.discovery.discv5.DiscV5Service;\n+import tech.pegasys.artemis.networking.p2p.discovery.noop.NoOpDiscoveryService;\n import tech.pegasys.artemis.networking.p2p.network.DelegatingP2PNetwork;\n import tech.pegasys.artemis.networking.p2p.network.NetworkConfig;\n import tech.pegasys.artemis.networking.p2p.network.P2PNetwork;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1ODI5MA==", "url": "https://github.com/ConsenSys/teku/pull/1239#discussion_r385758290", "bodyText": "With everything now hooked up, can we get an integration test similar to: https://github.com/mbaxter/artemis/blob/488fbba1ef9b554912c0d513f09945394e31f76f/networking/eth2/src/integration-test/java/tech/pegasys/artemis/networking/eth2/DiscoveryIntegrationTest.java#L48-L63 ??", "author": "mbaxter", "createdAt": "2020-02-28T15:27:52Z", "path": "networking/p2p/src/main/java/tech/pegasys/artemis/networking/p2p/DiscoveryNetwork.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.networking.p2p;\n+\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes;\n+import tech.pegasys.artemis.networking.p2p.discovery.ConnectionManager;\n+import tech.pegasys.artemis.networking.p2p.discovery.DiscoveryService;\n+import tech.pegasys.artemis.networking.p2p.discovery.discv5.DiscV5Service;\n+import tech.pegasys.artemis.networking.p2p.network.DelegatingP2PNetwork;\n+import tech.pegasys.artemis.networking.p2p.network.NetworkConfig;\n+import tech.pegasys.artemis.networking.p2p.network.P2PNetwork;\n+import tech.pegasys.artemis.networking.p2p.peer.NodeId;\n+import tech.pegasys.artemis.networking.p2p.peer.Peer;\n+import tech.pegasys.artemis.networking.p2p.peer.PeerConnectedSubscriber;\n+import tech.pegasys.artemis.util.async.DelayedExecutorAsyncRunner;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n+\n+public class DiscoveryNetwork<P extends Peer> extends DelegatingP2PNetwork<P> {", "originalCommit": "d1c8c9f6e26da7c6e5c40c028b37cd2597a3bf71", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE2NzY1Ng==", "url": "https://github.com/ConsenSys/teku/pull/1239#discussion_r386167656", "bodyText": "Added DiscoveryNetworkIntegrationTest to test it all comes together - unfortunately the underlying discovery library doesn't respond to requests to find peers correctly yet (only works if we request peers from some other implementation).  The static peer management is working though.", "author": "ajsutton", "createdAt": "2020-03-02T01:52:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1ODI5MA=="}], "type": "inlineReview", "revised_code": {"commit": "99f8c419af3f075f25de12deeb455a0dab9cd638", "chunk": "diff --git a/networking/p2p/src/main/java/tech/pegasys/artemis/networking/p2p/DiscoveryNetwork.java b/networking/p2p/src/main/java/tech/pegasys/artemis/networking/p2p/DiscoveryNetwork.java\nindex 700ed9cae..08c22ae67 100644\n--- a/networking/p2p/src/main/java/tech/pegasys/artemis/networking/p2p/DiscoveryNetwork.java\n+++ b/networking/p2p/src/main/java/tech/pegasys/artemis/networking/p2p/DiscoveryNetwork.java\n\n@@ -21,6 +21,7 @@ import org.apache.tuweni.bytes.Bytes;\n import tech.pegasys.artemis.networking.p2p.discovery.ConnectionManager;\n import tech.pegasys.artemis.networking.p2p.discovery.DiscoveryService;\n import tech.pegasys.artemis.networking.p2p.discovery.discv5.DiscV5Service;\n+import tech.pegasys.artemis.networking.p2p.discovery.noop.NoOpDiscoveryService;\n import tech.pegasys.artemis.networking.p2p.network.DelegatingP2PNetwork;\n import tech.pegasys.artemis.networking.p2p.network.NetworkConfig;\n import tech.pegasys.artemis.networking.p2p.network.P2PNetwork;\n"}}, {"oid": "3988df3c75c3ddc2f94f175417c7acd0f2079b05", "url": "https://github.com/ConsenSys/teku/commit/3988df3c75c3ddc2f94f175417c7acd0f2079b05", "message": "Merge branch 'master' of github.com:PegaSysEng/teku into connection-manager", "committedDate": "2020-03-01T21:44:34Z", "type": "commit"}, {"oid": "52bc166c35d29609ca50d5b27b5c9b7bc5f4b9b9", "url": "https://github.com/ConsenSys/teku/commit/52bc166c35d29609ca50d5b27b5c9b7bc5f4b9b9", "message": "Remove last bit of static peer handling from LipP2PNetwork", "committedDate": "2020-03-01T21:56:52Z", "type": "commit"}, {"oid": "eb9792ba6cd0747256a9a5640f5bdb46d72520db", "url": "https://github.com/ConsenSys/teku/commit/eb9792ba6cd0747256a9a5640f5bdb46d72520db", "message": "Add discovery network integration test.", "committedDate": "2020-03-01T23:48:19Z", "type": "commit"}, {"oid": "4db8db6082952ba6c936cc2cb461e0ee5e8381da", "url": "https://github.com/ConsenSys/teku/commit/4db8db6082952ba6c936cc2cb461e0ee5e8381da", "message": "Remove unused variable.", "committedDate": "2020-03-01T23:53:08Z", "type": "commit"}, {"oid": "64191c5f816802f3538be73d4517238ecd411429", "url": "https://github.com/ConsenSys/teku/commit/64191c5f816802f3538be73d4517238ecd411429", "message": "Manually connect to static peers in Eth2NetworkFactory.", "committedDate": "2020-03-02T00:04:02Z", "type": "commit"}, {"oid": "ce37480388530460d8c18f4ecbfec5ca57a60f34", "url": "https://github.com/ConsenSys/teku/commit/ce37480388530460d8c18f4ecbfec5ca57a60f34", "message": "Don't ignore future.", "committedDate": "2020-03-02T00:08:13Z", "type": "commit"}, {"oid": "386a26de7d16b354e7f02fc4cc5c6f99d57a73e7", "url": "https://github.com/ConsenSys/teku/commit/386a26de7d16b354e7f02fc4cc5c6f99d57a73e7", "message": "Push creation of DiscoveryNetwork inside Eth2NetworkBuilder.", "committedDate": "2020-03-02T02:07:07Z", "type": "commit"}, {"oid": "8d75b76374c55f52e0523511a499db9a74f2818e", "url": "https://github.com/ConsenSys/teku/commit/8d75b76374c55f52e0523511a499db9a74f2818e", "message": "Merge branch 'master' of github.com:PegaSysEng/teku into connection-manager", "committedDate": "2020-03-02T03:58:58Z", "type": "commit"}, {"oid": "99f8c419af3f075f25de12deeb455a0dab9cd638", "url": "https://github.com/ConsenSys/teku/commit/99f8c419af3f075f25de12deeb455a0dab9cd638", "message": "Respect the discovery config option so discv5 can be enabled and disabled.", "committedDate": "2020-03-02T04:38:12Z", "type": "commit"}, {"oid": "f5233a54c824c91c1c98a030feaa0524f580368b", "url": "https://github.com/ConsenSys/teku/commit/f5233a54c824c91c1c98a030feaa0524f580368b", "message": "Spotless.", "committedDate": "2020-03-02T04:41:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ0ODk1OQ==", "url": "https://github.com/ConsenSys/teku/pull/1239#discussion_r386448959", "bodyText": "What about wrapping it the other way:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return DiscoveryNetwork.create(\n          \n          \n            \n                final P2PNetwork discoveryNetwork = DiscoveryNetwork.create(network, config);\n          \n          \n            \n                return new Eth2Network(discoveryNetwork, eth2PeerManager, eventBus, chainStorageClient);", "author": "mbaxter", "createdAt": "2020-03-02T15:09:05Z", "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/Eth2NetworkBuilder.java", "diffHunk": "@@ -58,7 +60,8 @@ public Eth2Network build() {\n     // Build core network and inject eth2 handlers\n     final P2PNetwork<?> network = buildNetwork();\n \n-    return new Eth2Network(network, eth2PeerManager, eventBus, chainStorageClient);\n+    return DiscoveryNetwork.create(", "originalCommit": "f5233a54c824c91c1c98a030feaa0524f580368b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc3NzA0Ng==", "url": "https://github.com/ConsenSys/teku/pull/1239#discussion_r386777046", "bodyText": "Yeah that makes sense.", "author": "ajsutton", "createdAt": "2020-03-03T03:11:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ0ODk1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "e807f9c10a89a9d278285a654b40e07d068dbfb3", "chunk": "diff --git a/networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/Eth2NetworkBuilder.java b/networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/Eth2NetworkBuilder.java\nindex adc7b383e..a1bb5ce87 100644\n--- a/networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/Eth2NetworkBuilder.java\n+++ b/networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/Eth2NetworkBuilder.java\n\n@@ -60,12 +60,12 @@ public class Eth2NetworkBuilder {\n     // Build core network and inject eth2 handlers\n     final P2PNetwork<?> network = buildNetwork();\n \n-    return DiscoveryNetwork.create(\n-        new Eth2Network(network, eth2PeerManager, eventBus, chainStorageClient), config);\n+    return new Eth2Network(network, eth2PeerManager, eventBus, chainStorageClient);\n   }\n \n   protected P2PNetwork<?> buildNetwork() {\n-    return new LibP2PNetwork(config, metricsSystem, rpcMethods, peerHandlers);\n+    return DiscoveryNetwork.create(\n+        new LibP2PNetwork(config, metricsSystem, rpcMethods, peerHandlers), config);\n   }\n \n   private void validate() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ1MTI5Mg==", "url": "https://github.com/ConsenSys/teku/pull/1239#discussion_r386451292", "bodyText": "Why add explicit connection logic here instead of just configuring the static peers?", "author": "mbaxter", "createdAt": "2020-03-02T15:12:52Z", "path": "networking/eth2/src/test-support/java/tech/pegasys/artemis/networking/eth2/Eth2NetworkFactory.java", "diffHunk": "@@ -80,6 +80,9 @@ protected Eth2Network buildAndStartNetwork() throws Exception {\n         try {\n           network.start().get(30, TimeUnit.SECONDS);\n           networks.add(network);\n+          for (Eth2Network peer : peers) {\n+            network.connect(peer.getNodeAddress()).join();\n+          }", "originalCommit": "f5233a54c824c91c1c98a030feaa0524f580368b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc3NzQ4NQ==", "url": "https://github.com/ConsenSys/teku/pull/1239#discussion_r386777485", "bodyText": "With Eth2Network now holding a DiscoveryNetwork rather than the other way around we can go back to just using static peers.  Previously there was no ConnectionManager created so nothing actually used the static peers config.  Now that it's switched around it makes sense to create DiscoveryNetwork with a static discovery system and we can use the config again.  Good sign that having it this way round makes more sense.", "author": "ajsutton", "createdAt": "2020-03-03T03:13:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ1MTI5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e807f9c10a89a9d278285a654b40e07d068dbfb3", "chunk": "diff --git a/networking/eth2/src/test-support/java/tech/pegasys/artemis/networking/eth2/Eth2NetworkFactory.java b/networking/eth2/src/test-support/java/tech/pegasys/artemis/networking/eth2/Eth2NetworkFactory.java\nindex 081dc82de..abcb78fb5 100644\n--- a/networking/eth2/src/test-support/java/tech/pegasys/artemis/networking/eth2/Eth2NetworkFactory.java\n+++ b/networking/eth2/src/test-support/java/tech/pegasys/artemis/networking/eth2/Eth2NetworkFactory.java\n\n@@ -80,9 +82,6 @@ public class Eth2NetworkFactory {\n         try {\n           network.start().get(30, TimeUnit.SECONDS);\n           networks.add(network);\n-          for (Eth2Network peer : peers) {\n-            network.connect(peer.getNodeAddress()).join();\n-          }\n           Waiter.waitFor(() -> assertThat(network.getPeerCount()).isEqualTo(peers.size()));\n           return network;\n         } catch (ExecutionException e) {\n"}}, {"oid": "e807f9c10a89a9d278285a654b40e07d068dbfb3", "url": "https://github.com/ConsenSys/teku/commit/e807f9c10a89a9d278285a654b40e07d068dbfb3", "message": "Eth2Network delegates to DiscoveryNetwork rather than the other way around.", "committedDate": "2020-03-03T03:13:39Z", "type": "commit"}, {"oid": "9d68550774f4e0216e6729ae7cbbd6c1b2cee798", "url": "https://github.com/ConsenSys/teku/commit/9d68550774f4e0216e6729ae7cbbd6c1b2cee798", "message": "Merge branch 'master' of github.com:PegaSysEng/teku into connection-manager", "committedDate": "2020-03-03T03:13:46Z", "type": "commit"}, {"oid": "fb20bf9efaa2129c13a742f250acea34fe8e2fef", "url": "https://github.com/ConsenSys/teku/commit/fb20bf9efaa2129c13a742f250acea34fe8e2fef", "message": "Merge branch 'master' into connection-manager", "committedDate": "2020-03-03T23:43:39Z", "type": "commit"}, {"oid": "75c8b095d6b641843633368a47ae433ea3566693", "url": "https://github.com/ConsenSys/teku/commit/75c8b095d6b641843633368a47ae433ea3566693", "message": "Merge branch 'master' into connection-manager", "committedDate": "2020-03-04T20:22:05Z", "type": "commit"}]}