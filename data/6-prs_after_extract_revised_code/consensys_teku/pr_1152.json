{"pr_number": 1152, "pr_title": "Implement DepositProvider", "pr_createdAt": "2020-02-13T05:10:26Z", "pr_url": "https://github.com/ConsenSys/teku/pull/1152", "timeline": [{"oid": "6bae72d7bc8a62c2f6fc376449a198ceceae25dc", "url": "https://github.com/ConsenSys/teku/commit/6bae72d7bc8a62c2f6fc376449a198ceceae25dc", "message": "WIP: Implement DepositProvider", "committedDate": "2020-02-13T05:09:51Z", "type": "commit"}, {"oid": "d0da02e8d81906fa54b06a229666d552056c6466", "url": "https://github.com/ConsenSys/teku/commit/d0da02e8d81906fa54b06a229666d552056c6466", "message": "Fix merkle tree getViewWithBoundary method", "committedDate": "2020-02-14T21:58:12Z", "type": "commit"}, {"oid": "85c13de11c431030ee0ba7687c964d61c3ad6443", "url": "https://github.com/ConsenSys/teku/commit/85c13de11c431030ee0ba7687c964d61c3ad6443", "message": "Run spotless", "committedDate": "2020-02-14T23:01:51Z", "type": "commit"}, {"oid": "c121e93e116698aa611dc4f2eaba36b3a04e4fa0", "url": "https://github.com/ConsenSys/teku/commit/c121e93e116698aa611dc4f2eaba36b3a04e4fa0", "message": "Fix test", "committedDate": "2020-02-14T23:38:57Z", "type": "commit"}, {"oid": "f8dcac1374cab638d4d7eca18e12e8bf661bbf66", "url": "https://github.com/ConsenSys/teku/commit/f8dcac1374cab638d4d7eca18e12e8bf661bbf66", "message": "Remove unnecessary variable and print out", "committedDate": "2020-02-15T02:44:20Z", "type": "commit"}, {"oid": "01f338be5abde63c640f685bff93e57709305467", "url": "https://github.com/ConsenSys/teku/commit/01f338be5abde63c640f685bff93e57709305467", "message": "Remove redundant deposits code", "committedDate": "2020-02-15T02:50:32Z", "type": "commit"}, {"oid": "3044d741c22a38f35dcb79616eddb164ec86b057", "url": "https://github.com/ConsenSys/teku/commit/3044d741c22a38f35dcb79616eddb164ec86b057", "message": "Run spotless", "committedDate": "2020-02-15T02:58:51Z", "type": "commit"}, {"oid": "dbda195f19b8176ceb063aebf0a1ad09030b38f5", "url": "https://github.com/ConsenSys/teku/commit/dbda195f19b8176ceb063aebf0a1ad09030b38f5", "message": "Merge branch 'master' into implementDepositProvider", "committedDate": "2020-02-15T03:04:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNTA1MQ==", "url": "https://github.com/ConsenSys/teku/pull/1152#discussion_r379935051", "bodyText": "nit: found not find", "author": "ajsutton", "createdAt": "2020-02-16T21:32:16Z", "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/DepositProvider.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.validator.coordinator;\n+\n+import static java.lang.StrictMath.toIntExact;\n+import static tech.pegasys.artemis.util.config.Constants.DEPOSIT_CONTRACT_TREE_DEPTH;\n+import static tech.pegasys.artemis.util.config.Constants.MAX_DEPOSITS;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.List;\n+import java.util.NavigableMap;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+import tech.pegasys.artemis.datastructures.operations.Deposit;\n+import tech.pegasys.artemis.datastructures.operations.DepositData;\n+import tech.pegasys.artemis.datastructures.operations.DepositWithIndex;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.datastructures.util.DepositUtil;\n+import tech.pegasys.artemis.datastructures.util.MerkleTree;\n+import tech.pegasys.artemis.datastructures.util.OptimizedMerkleTree;\n+import tech.pegasys.artemis.pow.api.DepositEventChannel;\n+import tech.pegasys.artemis.pow.event.DepositsFromBlockEvent;\n+import tech.pegasys.artemis.storage.ChainStorageClient;\n+import tech.pegasys.artemis.storage.api.FinalizedCheckpointEventChannel;\n+import tech.pegasys.artemis.storage.events.FinalizedCheckpointEvent;\n+import tech.pegasys.artemis.util.SSZTypes.SSZList;\n+\n+public class DepositProvider implements DepositEventChannel, FinalizedCheckpointEventChannel {\n+\n+  private final ChainStorageClient chainStorageClient;\n+  private final MerkleTree depositMerkleTree = new OptimizedMerkleTree(DEPOSIT_CONTRACT_TREE_DEPTH);\n+\n+  @VisibleForTesting\n+  NavigableMap<UnsignedLong, DepositWithIndex> depositNavigableMap = new TreeMap<>();\n+\n+  public DepositProvider(ChainStorageClient chainStorageClient) {\n+    this.chainStorageClient = chainStorageClient;\n+  }\n+\n+  @Override\n+  public void onDepositsFromBlock(DepositsFromBlockEvent event) {\n+    event.getDeposits().stream()\n+        .map(DepositUtil::convertDepositEventToOperationDeposit)\n+        .peek(deposit -> depositNavigableMap.put(deposit.getIndex(), deposit))\n+        .map(Deposit::getData)\n+        .map(DepositData::hash_tree_root)\n+        .forEachOrdered(depositMerkleTree::add);\n+  }\n+\n+  @Override\n+  public void onFinalizedCheckpoint(FinalizedCheckpointEvent event) {\n+    BeaconState finalizedState =\n+        chainStorageClient\n+            .getBlockState(event.getCheckpoint().getRoot())\n+            .orElseThrow(\n+                () -> new IllegalArgumentException(\"Finalized Checkpoint state can not be find.\"));", "originalCommit": "dbda195f19b8176ceb063aebf0a1ad09030b38f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0MTI4NQ==", "url": "https://github.com/ConsenSys/teku/pull/1152#discussion_r380841285", "bodyText": "done.", "author": "cemozerr", "createdAt": "2020-02-18T18:01:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNTA1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "f40129e2415718b75d65ed23c8b8e7978ce3a85c", "chunk": "diff --git a/validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/DepositProvider.java b/validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/DepositProvider.java\nindex e1084dc1a7..5db5583b4b 100644\n--- a/validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/DepositProvider.java\n+++ b/validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/DepositProvider.java\n\n@@ -17,14 +17,12 @@ import static java.lang.StrictMath.toIntExact;\n import static tech.pegasys.artemis.util.config.Constants.DEPOSIT_CONTRACT_TREE_DEPTH;\n import static tech.pegasys.artemis.util.config.Constants.MAX_DEPOSITS;\n \n-import com.google.common.annotations.VisibleForTesting;\n import com.google.common.primitives.UnsignedLong;\n import java.util.List;\n import java.util.NavigableMap;\n import java.util.TreeMap;\n import java.util.stream.Collectors;\n import tech.pegasys.artemis.datastructures.operations.Deposit;\n-import tech.pegasys.artemis.datastructures.operations.DepositData;\n import tech.pegasys.artemis.datastructures.operations.DepositWithIndex;\n import tech.pegasys.artemis.datastructures.state.BeaconState;\n import tech.pegasys.artemis.datastructures.util.DepositUtil;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNTM2NA==", "url": "https://github.com/ConsenSys/teku/pull/1152#discussion_r379935364", "bodyText": "This is probably a misuse of the peek API and it makes it more complex to see what's going on here (it looks like a single operation but actually it's two).\nI'd just use:\nevent.getDeposits().stream()\n  .map(DepositUtil::convertDepositEventToOperationDeposit)\n  .forEach(deposit -> {\n    depositNavigableMap.put(deposit.getIndex(), deposit);\n    depositMerkleTree.add(deposit.getData().hash_tree_root());\n  });\n\nFor the record, the only time you need to use forEachOrdered rather than forEach is when you've moved to a parallel stream somewhere.  It doesn't hurt because a sequential stream just implements forEachOrdered as forEach but it makes me stop and go looking for the parallel call every time I see forEachOrdered.", "author": "ajsutton", "createdAt": "2020-02-16T21:36:41Z", "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/DepositProvider.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.validator.coordinator;\n+\n+import static java.lang.StrictMath.toIntExact;\n+import static tech.pegasys.artemis.util.config.Constants.DEPOSIT_CONTRACT_TREE_DEPTH;\n+import static tech.pegasys.artemis.util.config.Constants.MAX_DEPOSITS;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.List;\n+import java.util.NavigableMap;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+import tech.pegasys.artemis.datastructures.operations.Deposit;\n+import tech.pegasys.artemis.datastructures.operations.DepositData;\n+import tech.pegasys.artemis.datastructures.operations.DepositWithIndex;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.datastructures.util.DepositUtil;\n+import tech.pegasys.artemis.datastructures.util.MerkleTree;\n+import tech.pegasys.artemis.datastructures.util.OptimizedMerkleTree;\n+import tech.pegasys.artemis.pow.api.DepositEventChannel;\n+import tech.pegasys.artemis.pow.event.DepositsFromBlockEvent;\n+import tech.pegasys.artemis.storage.ChainStorageClient;\n+import tech.pegasys.artemis.storage.api.FinalizedCheckpointEventChannel;\n+import tech.pegasys.artemis.storage.events.FinalizedCheckpointEvent;\n+import tech.pegasys.artemis.util.SSZTypes.SSZList;\n+\n+public class DepositProvider implements DepositEventChannel, FinalizedCheckpointEventChannel {\n+\n+  private final ChainStorageClient chainStorageClient;\n+  private final MerkleTree depositMerkleTree = new OptimizedMerkleTree(DEPOSIT_CONTRACT_TREE_DEPTH);\n+\n+  @VisibleForTesting\n+  NavigableMap<UnsignedLong, DepositWithIndex> depositNavigableMap = new TreeMap<>();\n+\n+  public DepositProvider(ChainStorageClient chainStorageClient) {\n+    this.chainStorageClient = chainStorageClient;\n+  }\n+\n+  @Override\n+  public void onDepositsFromBlock(DepositsFromBlockEvent event) {\n+    event.getDeposits().stream()\n+        .map(DepositUtil::convertDepositEventToOperationDeposit)\n+        .peek(deposit -> depositNavigableMap.put(deposit.getIndex(), deposit))\n+        .map(Deposit::getData)\n+        .map(DepositData::hash_tree_root)\n+        .forEachOrdered(depositMerkleTree::add);", "originalCommit": "dbda195f19b8176ceb063aebf0a1ad09030b38f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0MTcwMQ==", "url": "https://github.com/ConsenSys/teku/pull/1152#discussion_r380841701", "bodyText": "makes sense. done.", "author": "cemozerr", "createdAt": "2020-02-18T18:02:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNTM2NA=="}], "type": "inlineReview", "revised_code": {"commit": "f40129e2415718b75d65ed23c8b8e7978ce3a85c", "chunk": "diff --git a/validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/DepositProvider.java b/validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/DepositProvider.java\nindex e1084dc1a7..5db5583b4b 100644\n--- a/validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/DepositProvider.java\n+++ b/validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/DepositProvider.java\n\n@@ -17,14 +17,12 @@ import static java.lang.StrictMath.toIntExact;\n import static tech.pegasys.artemis.util.config.Constants.DEPOSIT_CONTRACT_TREE_DEPTH;\n import static tech.pegasys.artemis.util.config.Constants.MAX_DEPOSITS;\n \n-import com.google.common.annotations.VisibleForTesting;\n import com.google.common.primitives.UnsignedLong;\n import java.util.List;\n import java.util.NavigableMap;\n import java.util.TreeMap;\n import java.util.stream.Collectors;\n import tech.pegasys.artemis.datastructures.operations.Deposit;\n-import tech.pegasys.artemis.datastructures.operations.DepositData;\n import tech.pegasys.artemis.datastructures.operations.DepositWithIndex;\n import tech.pegasys.artemis.datastructures.state.BeaconState;\n import tech.pegasys.artemis.datastructures.util.DepositUtil;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNTgwNA==", "url": "https://github.com/ConsenSys/teku/pull/1152#discussion_r379935804", "bodyText": "This will actually leak memory because tailMap returns a view into the original map - it doesn't create a new, smaller copy.  We'll need to get the set of keys to remove (probably something using the navigableKeySet() method) and then use removeAll.\nThis method is called from a different event channel to onDeposits so two different threads will be used and we'll have to synchronise access to depositMerkleTree and depositNavigableMap.  getDeposits would be called from different threads as well.", "author": "ajsutton", "createdAt": "2020-02-16T21:43:15Z", "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/DepositProvider.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.validator.coordinator;\n+\n+import static java.lang.StrictMath.toIntExact;\n+import static tech.pegasys.artemis.util.config.Constants.DEPOSIT_CONTRACT_TREE_DEPTH;\n+import static tech.pegasys.artemis.util.config.Constants.MAX_DEPOSITS;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.List;\n+import java.util.NavigableMap;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+import tech.pegasys.artemis.datastructures.operations.Deposit;\n+import tech.pegasys.artemis.datastructures.operations.DepositData;\n+import tech.pegasys.artemis.datastructures.operations.DepositWithIndex;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.datastructures.util.DepositUtil;\n+import tech.pegasys.artemis.datastructures.util.MerkleTree;\n+import tech.pegasys.artemis.datastructures.util.OptimizedMerkleTree;\n+import tech.pegasys.artemis.pow.api.DepositEventChannel;\n+import tech.pegasys.artemis.pow.event.DepositsFromBlockEvent;\n+import tech.pegasys.artemis.storage.ChainStorageClient;\n+import tech.pegasys.artemis.storage.api.FinalizedCheckpointEventChannel;\n+import tech.pegasys.artemis.storage.events.FinalizedCheckpointEvent;\n+import tech.pegasys.artemis.util.SSZTypes.SSZList;\n+\n+public class DepositProvider implements DepositEventChannel, FinalizedCheckpointEventChannel {\n+\n+  private final ChainStorageClient chainStorageClient;\n+  private final MerkleTree depositMerkleTree = new OptimizedMerkleTree(DEPOSIT_CONTRACT_TREE_DEPTH);\n+\n+  @VisibleForTesting\n+  NavigableMap<UnsignedLong, DepositWithIndex> depositNavigableMap = new TreeMap<>();\n+\n+  public DepositProvider(ChainStorageClient chainStorageClient) {\n+    this.chainStorageClient = chainStorageClient;\n+  }\n+\n+  @Override\n+  public void onDepositsFromBlock(DepositsFromBlockEvent event) {\n+    event.getDeposits().stream()\n+        .map(DepositUtil::convertDepositEventToOperationDeposit)\n+        .peek(deposit -> depositNavigableMap.put(deposit.getIndex(), deposit))\n+        .map(Deposit::getData)\n+        .map(DepositData::hash_tree_root)\n+        .forEachOrdered(depositMerkleTree::add);\n+  }\n+\n+  @Override\n+  public void onFinalizedCheckpoint(FinalizedCheckpointEvent event) {\n+    BeaconState finalizedState =\n+        chainStorageClient\n+            .getBlockState(event.getCheckpoint().getRoot())\n+            .orElseThrow(\n+                () -> new IllegalArgumentException(\"Finalized Checkpoint state can not be find.\"));\n+\n+    depositNavigableMap = depositNavigableMap.tailMap(finalizedState.getEth1_deposit_index(), true);", "originalCommit": "dbda195f19b8176ceb063aebf0a1ad09030b38f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0NDQ5Mg==", "url": "https://github.com/ConsenSys/teku/pull/1152#discussion_r380844492", "bodyText": "RemoveAll was not available so I used this instead:\n    depositNavigableMap.headMap(finalizedState.getEth1_deposit_index()).clear();", "author": "cemozerr", "createdAt": "2020-02-18T18:08:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNTgwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1MDc4MQ==", "url": "https://github.com/ConsenSys/teku/pull/1152#discussion_r380850781", "bodyText": "synchronization is done as well.", "author": "cemozerr", "createdAt": "2020-02-18T18:20:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNTgwNA=="}], "type": "inlineReview", "revised_code": {"commit": "f40129e2415718b75d65ed23c8b8e7978ce3a85c", "chunk": "diff --git a/validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/DepositProvider.java b/validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/DepositProvider.java\nindex e1084dc1a7..5db5583b4b 100644\n--- a/validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/DepositProvider.java\n+++ b/validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/DepositProvider.java\n\n@@ -17,14 +17,12 @@ import static java.lang.StrictMath.toIntExact;\n import static tech.pegasys.artemis.util.config.Constants.DEPOSIT_CONTRACT_TREE_DEPTH;\n import static tech.pegasys.artemis.util.config.Constants.MAX_DEPOSITS;\n \n-import com.google.common.annotations.VisibleForTesting;\n import com.google.common.primitives.UnsignedLong;\n import java.util.List;\n import java.util.NavigableMap;\n import java.util.TreeMap;\n import java.util.stream.Collectors;\n import tech.pegasys.artemis.datastructures.operations.Deposit;\n-import tech.pegasys.artemis.datastructures.operations.DepositData;\n import tech.pegasys.artemis.datastructures.operations.DepositWithIndex;\n import tech.pegasys.artemis.datastructures.state.BeaconState;\n import tech.pegasys.artemis.datastructures.util.DepositUtil;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNjE2Ng==", "url": "https://github.com/ConsenSys/teku/pull/1152#discussion_r379936166", "bodyText": "This probably isn't a good place to use peek - we're performing two separate operations so we should make that clear.\nWe also have an issue here because the Deposit instances are all being shared, but being mutated to set different deposit proofs based on the state.  That's not going to end well as different threads might change the proof before it actually gets used and the block winds up invalid. So we really need to make a copy of the deposits here before setting the proof.  With a bit of luck we can remove the setProof method from Deposit to move it towards being immutable (the DepositData method still has a setSignature unfortunately so it won't get us all the way there).", "author": "ajsutton", "createdAt": "2020-02-16T21:49:02Z", "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/DepositProvider.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.validator.coordinator;\n+\n+import static java.lang.StrictMath.toIntExact;\n+import static tech.pegasys.artemis.util.config.Constants.DEPOSIT_CONTRACT_TREE_DEPTH;\n+import static tech.pegasys.artemis.util.config.Constants.MAX_DEPOSITS;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.List;\n+import java.util.NavigableMap;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+import tech.pegasys.artemis.datastructures.operations.Deposit;\n+import tech.pegasys.artemis.datastructures.operations.DepositData;\n+import tech.pegasys.artemis.datastructures.operations.DepositWithIndex;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.datastructures.util.DepositUtil;\n+import tech.pegasys.artemis.datastructures.util.MerkleTree;\n+import tech.pegasys.artemis.datastructures.util.OptimizedMerkleTree;\n+import tech.pegasys.artemis.pow.api.DepositEventChannel;\n+import tech.pegasys.artemis.pow.event.DepositsFromBlockEvent;\n+import tech.pegasys.artemis.storage.ChainStorageClient;\n+import tech.pegasys.artemis.storage.api.FinalizedCheckpointEventChannel;\n+import tech.pegasys.artemis.storage.events.FinalizedCheckpointEvent;\n+import tech.pegasys.artemis.util.SSZTypes.SSZList;\n+\n+public class DepositProvider implements DepositEventChannel, FinalizedCheckpointEventChannel {\n+\n+  private final ChainStorageClient chainStorageClient;\n+  private final MerkleTree depositMerkleTree = new OptimizedMerkleTree(DEPOSIT_CONTRACT_TREE_DEPTH);\n+\n+  @VisibleForTesting\n+  NavigableMap<UnsignedLong, DepositWithIndex> depositNavigableMap = new TreeMap<>();\n+\n+  public DepositProvider(ChainStorageClient chainStorageClient) {\n+    this.chainStorageClient = chainStorageClient;\n+  }\n+\n+  @Override\n+  public void onDepositsFromBlock(DepositsFromBlockEvent event) {\n+    event.getDeposits().stream()\n+        .map(DepositUtil::convertDepositEventToOperationDeposit)\n+        .peek(deposit -> depositNavigableMap.put(deposit.getIndex(), deposit))\n+        .map(Deposit::getData)\n+        .map(DepositData::hash_tree_root)\n+        .forEachOrdered(depositMerkleTree::add);\n+  }\n+\n+  @Override\n+  public void onFinalizedCheckpoint(FinalizedCheckpointEvent event) {\n+    BeaconState finalizedState =\n+        chainStorageClient\n+            .getBlockState(event.getCheckpoint().getRoot())\n+            .orElseThrow(\n+                () -> new IllegalArgumentException(\"Finalized Checkpoint state can not be find.\"));\n+\n+    depositNavigableMap = depositNavigableMap.tailMap(finalizedState.getEth1_deposit_index(), true);\n+  }\n+\n+  public SSZList<Deposit> getDeposits(BeaconState state) {\n+    UnsignedLong eth1DepositCount = state.getEth1_data().getDeposit_count();\n+\n+    UnsignedLong fromDepositIndex = state.getEth1_deposit_index();\n+    UnsignedLong latestDepositIndexWithMaxBlock =\n+        fromDepositIndex.plus(UnsignedLong.valueOf(MAX_DEPOSITS));\n+\n+    UnsignedLong toDepositIndex =\n+        latestDepositIndexWithMaxBlock.compareTo(eth1DepositCount) > 0\n+            ? eth1DepositCount\n+            : latestDepositIndexWithMaxBlock;\n+\n+    return new SSZList<>(\n+        getDepositsWithProof(fromDepositIndex, toDepositIndex, eth1DepositCount),\n+        MAX_DEPOSITS,\n+        Deposit.class);\n+  }\n+\n+  // TODO: switch the MerkleTree to use UnsignedLongs instead of using toIntExact() here,\n+  //  it will result in an overflow at some point\n+  /**\n+   * @param fromDepositIndex inclusive\n+   * @param toDepositIndex exclusive\n+   * @param eth1DepositCount number of deposits in the merkle tree according to Eth1Data in state\n+   * @return\n+   */\n+  private List<Deposit> getDepositsWithProof(\n+      UnsignedLong fromDepositIndex, UnsignedLong toDepositIndex, UnsignedLong eth1DepositCount) {\n+    return depositNavigableMap.subMap(fromDepositIndex, toDepositIndex).values().stream()\n+        .peek(\n+            deposit ->\n+                deposit.setProof(\n+                    depositMerkleTree.getProofWithViewBoundary(\n+                        toIntExact(deposit.getIndex().longValue()),\n+                        toIntExact(eth1DepositCount.longValue()))))", "originalCommit": "dbda195f19b8176ceb063aebf0a1ad09030b38f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1NDA4OA==", "url": "https://github.com/ConsenSys/teku/pull/1152#discussion_r380854088", "bodyText": "done.", "author": "cemozerr", "createdAt": "2020-02-18T18:26:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzNjE2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "f40129e2415718b75d65ed23c8b8e7978ce3a85c", "chunk": "diff --git a/validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/DepositProvider.java b/validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/DepositProvider.java\nindex e1084dc1a7..5db5583b4b 100644\n--- a/validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/DepositProvider.java\n+++ b/validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/DepositProvider.java\n\n@@ -17,14 +17,12 @@ import static java.lang.StrictMath.toIntExact;\n import static tech.pegasys.artemis.util.config.Constants.DEPOSIT_CONTRACT_TREE_DEPTH;\n import static tech.pegasys.artemis.util.config.Constants.MAX_DEPOSITS;\n \n-import com.google.common.annotations.VisibleForTesting;\n import com.google.common.primitives.UnsignedLong;\n import java.util.List;\n import java.util.NavigableMap;\n import java.util.TreeMap;\n import java.util.stream.Collectors;\n import tech.pegasys.artemis.datastructures.operations.Deposit;\n-import tech.pegasys.artemis.datastructures.operations.DepositData;\n import tech.pegasys.artemis.datastructures.operations.DepositWithIndex;\n import tech.pegasys.artemis.datastructures.state.BeaconState;\n import tech.pegasys.artemis.datastructures.util.DepositUtil;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTk0MzY5Mw==", "url": "https://github.com/ConsenSys/teku/pull/1152#discussion_r379943693", "bodyText": "Rather than expose this map, I'd add a size or depositCount method to return how many deposits are still stored, then check that is reduced after a finalised block and that the expected remaining deposits are still returned on subsequent calls to getDeposits.  That way we're testing the expected behaviours of the API rather than internal details of the implementation.  While we don't strictly need a size method, it's a sensible addition to the API which could be used by monitoring and is better than exposing the internal map directly.", "author": "ajsutton", "createdAt": "2020-02-16T23:33:11Z", "path": "validator/coordinator/src/test/java/tech/pegasys/artemis/validator/coordinator/DepositProviderTest.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.validator.coordinator;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.is_valid_merkle_branch;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.artemis.datastructures.blocks.Eth1Data;\n+import tech.pegasys.artemis.datastructures.operations.Deposit;\n+import tech.pegasys.artemis.datastructures.operations.DepositData;\n+import tech.pegasys.artemis.datastructures.operations.DepositWithIndex;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.datastructures.state.Checkpoint;\n+import tech.pegasys.artemis.datastructures.util.DataStructureUtil;\n+import tech.pegasys.artemis.datastructures.util.DepositUtil;\n+import tech.pegasys.artemis.datastructures.util.MerkleTree;\n+import tech.pegasys.artemis.datastructures.util.OptimizedMerkleTree;\n+import tech.pegasys.artemis.pow.event.DepositsFromBlockEvent;\n+import tech.pegasys.artemis.storage.ChainStorageClient;\n+import tech.pegasys.artemis.storage.events.FinalizedCheckpointEvent;\n+import tech.pegasys.artemis.util.SSZTypes.SSZList;\n+import tech.pegasys.artemis.util.config.Constants;\n+\n+public class DepositProviderTest {\n+\n+  private int seed = 0;\n+\n+  private List<tech.pegasys.artemis.pow.event.Deposit> allSeenDepositsList;\n+  private DepositProvider depositProvider;\n+  private ChainStorageClient chainStorageClient;\n+  private BeaconState beaconState;\n+  private MerkleTree depositMerkleTree;\n+\n+  @BeforeEach\n+  void setUp() {\n+    chainStorageClient = mock(ChainStorageClient.class);\n+    beaconState = mock(BeaconState.class);\n+\n+    depositMerkleTree = new OptimizedMerkleTree(Constants.DEPOSIT_CONTRACT_TREE_DEPTH);\n+    depositProvider = new DepositProvider(chainStorageClient);\n+\n+    createDepositEvents(40);\n+  }\n+\n+  @Test\n+  void stateEth1DepositIndexIsEqualToEth1DataDepositCount_NoDepositReturned() {\n+    Constants.MAX_DEPOSITS = 5;\n+    mockStateEth1DepositIndex(2);\n+    mockEth1DataDepositCount(2);\n+    mockDepositsFromEth1Block(0, 10);\n+    SSZList<Deposit> deposits = depositProvider.getDeposits(beaconState);\n+    assertThat(deposits).isEmpty();\n+  }\n+\n+  @Test\n+  void numberOfDepositsThatCanBeIncludedLessThanMaxDeposits() {\n+    mockStateEth1DepositIndex(5);\n+    mockEth1DataDepositCount(20);\n+\n+    Constants.MAX_DEPOSITS = 16;\n+\n+    mockDepositsFromEth1Block(0, 10);\n+    mockDepositsFromEth1Block(10, 20);\n+\n+    SSZList<Deposit> deposits = depositProvider.getDeposits(beaconState);\n+    assertThat(deposits).hasSize(15);\n+    checkThatDepositProofIsValid(deposits);\n+  }\n+\n+  @Test\n+  void numberOfDepositsThatCanBeIncludedMoreThanMaxDeposits() {\n+    mockStateEth1DepositIndex(5);\n+    mockEth1DataDepositCount(20);\n+\n+    Constants.MAX_DEPOSITS = 10;\n+\n+    mockDepositsFromEth1Block(0, 10);\n+    mockDepositsFromEth1Block(10, 20);\n+\n+    SSZList<Deposit> deposits = depositProvider.getDeposits(beaconState);\n+    assertThat(deposits).hasSize(10);\n+    checkThatDepositProofIsValid(deposits);\n+  }\n+\n+  @Test\n+  void depositsWithFinalizedIndicesGetPrunedFromMap() {\n+    Bytes32 finalizedBlockRoot = Bytes32.fromHexString(\"0x01\");\n+    mockStateEth1DepositIndex(10);\n+    mockDepositsFromEth1Block(0, 20);\n+    when(chainStorageClient.getBlockState(eq(finalizedBlockRoot)))\n+        .thenReturn(Optional.ofNullable(beaconState));\n+\n+    depositProvider.onFinalizedCheckpoint(\n+        new FinalizedCheckpointEvent(new Checkpoint(UnsignedLong.ONE, finalizedBlockRoot)));\n+\n+    assertThat(depositProvider.depositNavigableMap)", "originalCommit": "dbda195f19b8176ceb063aebf0a1ad09030b38f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1NTY0Ng==", "url": "https://github.com/ConsenSys/teku/pull/1152#discussion_r380855646", "bodyText": "Makes sense. done.", "author": "cemozerr", "createdAt": "2020-02-18T18:29:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTk0MzY5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "f40129e2415718b75d65ed23c8b8e7978ce3a85c", "chunk": "diff --git a/validator/coordinator/src/test/java/tech/pegasys/artemis/validator/coordinator/DepositProviderTest.java b/validator/coordinator/src/test/java/tech/pegasys/artemis/validator/coordinator/DepositProviderTest.java\nindex bd32107ee0..ecd010fd5a 100644\n--- a/validator/coordinator/src/test/java/tech/pegasys/artemis/validator/coordinator/DepositProviderTest.java\n+++ b/validator/coordinator/src/test/java/tech/pegasys/artemis/validator/coordinator/DepositProviderTest.java\n\n@@ -112,21 +112,12 @@ public class DepositProviderTest {\n     when(chainStorageClient.getBlockState(eq(finalizedBlockRoot)))\n         .thenReturn(Optional.ofNullable(beaconState));\n \n+    assertThat(depositProvider.getDepositMapSize()).isEqualTo(20);\n+\n     depositProvider.onFinalizedCheckpoint(\n         new FinalizedCheckpointEvent(new Checkpoint(UnsignedLong.ONE, finalizedBlockRoot)));\n \n-    assertThat(depositProvider.depositNavigableMap)\n-        .doesNotContainKeys(\n-            UnsignedLong.valueOf(0),\n-            UnsignedLong.valueOf(1),\n-            UnsignedLong.valueOf(2),\n-            UnsignedLong.valueOf(3),\n-            UnsignedLong.valueOf(4),\n-            UnsignedLong.valueOf(5),\n-            UnsignedLong.valueOf(6),\n-            UnsignedLong.valueOf(7),\n-            UnsignedLong.valueOf(8),\n-            UnsignedLong.valueOf(9));\n+    assertThat(depositProvider.getDepositMapSize()).isEqualTo(10);\n   }\n \n   private void checkThatDepositProofIsValid(List<Deposit> deposits) {\n"}}, {"oid": "f40129e2415718b75d65ed23c8b8e7978ce3a85c", "url": "https://github.com/ConsenSys/teku/commit/f40129e2415718b75d65ed23c8b8e7978ce3a85c", "message": "Resolve comments", "committedDate": "2020-02-18T18:31:09Z", "type": "commit"}, {"oid": "3204216f945671aaa007e69de7b4bad95ba2e55b", "url": "https://github.com/ConsenSys/teku/commit/3204216f945671aaa007e69de7b4bad95ba2e55b", "message": "Fix test", "committedDate": "2020-02-18T18:47:17Z", "type": "commit"}, {"oid": "78ac95d44b2ca5874bd91422b48580816975624c", "url": "https://github.com/ConsenSys/teku/commit/78ac95d44b2ca5874bd91422b48580816975624c", "message": "Merge branch 'master' into implementDepositProvider", "committedDate": "2020-02-18T18:48:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkyNzA3Mw==", "url": "https://github.com/ConsenSys/teku/pull/1152#discussion_r380927073", "bodyText": "Can we make sure we have a ticket for this please? Will take a while to get that many deposits but definitely don't want to be caught by surprise.", "author": "ajsutton", "createdAt": "2020-02-18T20:50:59Z", "path": "validator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/DepositProvider.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.validator.coordinator;\n+\n+import static java.lang.StrictMath.toIntExact;\n+import static tech.pegasys.artemis.util.config.Constants.DEPOSIT_CONTRACT_TREE_DEPTH;\n+import static tech.pegasys.artemis.util.config.Constants.MAX_DEPOSITS;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.List;\n+import java.util.NavigableMap;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+import tech.pegasys.artemis.datastructures.operations.Deposit;\n+import tech.pegasys.artemis.datastructures.operations.DepositWithIndex;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.datastructures.util.DepositUtil;\n+import tech.pegasys.artemis.datastructures.util.MerkleTree;\n+import tech.pegasys.artemis.datastructures.util.OptimizedMerkleTree;\n+import tech.pegasys.artemis.pow.api.DepositEventChannel;\n+import tech.pegasys.artemis.pow.event.DepositsFromBlockEvent;\n+import tech.pegasys.artemis.storage.ChainStorageClient;\n+import tech.pegasys.artemis.storage.api.FinalizedCheckpointEventChannel;\n+import tech.pegasys.artemis.storage.events.FinalizedCheckpointEvent;\n+import tech.pegasys.artemis.util.SSZTypes.SSZList;\n+\n+public class DepositProvider implements DepositEventChannel, FinalizedCheckpointEventChannel {\n+\n+  private final ChainStorageClient chainStorageClient;\n+  private final MerkleTree depositMerkleTree = new OptimizedMerkleTree(DEPOSIT_CONTRACT_TREE_DEPTH);\n+\n+  private NavigableMap<UnsignedLong, DepositWithIndex> depositNavigableMap = new TreeMap<>();\n+\n+  public DepositProvider(ChainStorageClient chainStorageClient) {\n+    this.chainStorageClient = chainStorageClient;\n+  }\n+\n+  @Override\n+  public void onDepositsFromBlock(DepositsFromBlockEvent event) {\n+    event.getDeposits().stream()\n+        .map(DepositUtil::convertDepositEventToOperationDeposit)\n+        .forEach(\n+            deposit -> {\n+              synchronized (DepositProvider.this) {\n+                depositNavigableMap.put(deposit.getIndex(), deposit);\n+                depositMerkleTree.add(deposit.getData().hash_tree_root());\n+              }\n+            });\n+  }\n+\n+  @Override\n+  public synchronized void onFinalizedCheckpoint(FinalizedCheckpointEvent event) {\n+    BeaconState finalizedState =\n+        chainStorageClient\n+            .getBlockState(event.getCheckpoint().getRoot())\n+            .orElseThrow(\n+                () -> new IllegalArgumentException(\"Finalized Checkpoint state can not be found.\"));\n+\n+    depositNavigableMap.headMap(finalizedState.getEth1_deposit_index()).clear();\n+  }\n+\n+  public SSZList<Deposit> getDeposits(BeaconState state) {\n+    UnsignedLong eth1DepositCount = state.getEth1_data().getDeposit_count();\n+\n+    UnsignedLong fromDepositIndex = state.getEth1_deposit_index();\n+    UnsignedLong latestDepositIndexWithMaxBlock =\n+        fromDepositIndex.plus(UnsignedLong.valueOf(MAX_DEPOSITS));\n+\n+    UnsignedLong toDepositIndex =\n+        latestDepositIndexWithMaxBlock.compareTo(eth1DepositCount) > 0\n+            ? eth1DepositCount\n+            : latestDepositIndexWithMaxBlock;\n+\n+    return new SSZList<>(\n+        getDepositsWithProof(fromDepositIndex, toDepositIndex, eth1DepositCount),\n+        MAX_DEPOSITS,\n+        Deposit.class);\n+  }\n+\n+  public int getDepositMapSize() {\n+    return depositNavigableMap.size();\n+  }\n+\n+  // TODO: switch the MerkleTree to use UnsignedLongs instead of using toIntExact() here,\n+  //  it will result in an overflow at some point", "originalCommit": "78ac95d44b2ca5874bd91422b48580816975624c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkyOTE4Mg==", "url": "https://github.com/ConsenSys/teku/pull/1152#discussion_r380929182", "bodyText": "https://pegasys1.atlassian.net/browse/BC-269", "author": "cemozerr", "createdAt": "2020-02-18T20:55:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkyNzA3Mw=="}], "type": "inlineReview", "revised_code": null}]}