{"pr_number": 1600, "pr_title": "[BC-355] Calculate subnet id from committee", "pr_createdAt": "2020-04-16T00:18:18Z", "pr_url": "https://github.com/ConsenSys/teku/pull/1600", "timeline": [{"oid": "5fea6b71714318e51981e5eafc637f073742f321", "url": "https://github.com/ConsenSys/teku/commit/5fea6b71714318e51981e5eafc637f073742f321", "message": "Add utility for managing subnet subscriptions, fix topic definitions", "committedDate": "2020-04-15T19:34:46Z", "type": "commit"}, {"oid": "09de53e0c1d15f24a16ac84bcc003b118824da52", "url": "https://github.com/ConsenSys/teku/commit/09de53e0c1d15f24a16ac84bcc003b118824da52", "message": "Merge remote-tracking branch 'remotes/origin/master' into bc-355/calculate-subnet-id-from-committee-id\n\n# Conflicts:\n#\tnetworking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationGossipManager.java\n#\tvalidator/coordinator/src/main/java/tech/pegasys/artemis/validator/coordinator/ValidatorApiHandler.java\n#\tvalidator/coordinator/src/test/java/tech/pegasys/artemis/validator/coordinator/ValidatorApiHandlerTest.java", "committedDate": "2020-04-16T00:03:18Z", "type": "commit"}, {"oid": "0bb7b80d3da82fd36cee5dbe441316343fa847b8", "url": "https://github.com/ConsenSys/teku/commit/0bb7b80d3da82fd36cee5dbe441316343fa847b8", "message": "Fix merge issues", "committedDate": "2020-04-16T00:22:21Z", "type": "commit"}, {"oid": "f3512923655c71ab49cacf8347f0e502890df3e9", "url": "https://github.com/ConsenSys/teku/commit/f3512923655c71ab49cacf8347f0e502890df3e9", "message": "Merge remote-tracking branch 'remotes/origin/master' into bc-355/calculate-subnet-id-from-committee-id", "committedDate": "2020-04-22T20:04:33Z", "type": "commit"}, {"oid": "06ae20f862df80e5fbaae1142b8dfeceb340e79a", "url": "https://github.com/ConsenSys/teku/commit/06ae20f862df80e5fbaae1142b8dfeceb340e79a", "message": "Rename test file to match main file", "committedDate": "2020-04-22T20:06:36Z", "type": "commit"}, {"oid": "49962f40fdf86d1b2317e78fdb7de89c52ec3857", "url": "https://github.com/ConsenSys/teku/commit/49962f40fdf86d1b2317e78fdb7de89c52ec3857", "message": "Remove file level constant", "committedDate": "2020-04-22T20:24:07Z", "type": "commit"}, {"oid": "c29316d143fc8dee85188d8f03d234ac86e9ad89", "url": "https://github.com/ConsenSys/teku/commit/c29316d143fc8dee85188d8f03d234ac86e9ad89", "message": "Add test & refactor for dependency injection", "committedDate": "2020-04-22T22:28:19Z", "type": "commit"}, {"oid": "6f48a3c8de6007ed51dcba38fefe9773e3d9f239", "url": "https://github.com/ConsenSys/teku/commit/6f48a3c8de6007ed51dcba38fefe9773e3d9f239", "message": "Merge branch 'master' into bc-355/calculate-subnet-id-from-committee-id", "committedDate": "2020-04-22T22:30:01Z", "type": "commit"}, {"oid": "caec0a4774ad40398b3a20b45f03c05f1b43413f", "url": "https://github.com/ConsenSys/teku/commit/caec0a4774ad40398b3a20b45f03c05f1b43413f", "message": "Merge branch 'master' into bc-355/calculate-subnet-id-from-committee-id", "committedDate": "2020-04-22T22:44:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM4OTIzNQ==", "url": "https://github.com/ConsenSys/teku/pull/1600#discussion_r413389235", "bodyText": "Meredith may disagree with me but I'd do:\n    subnetSubscriptions\n        .getChannel(committeeIndex)\n        .ifPresentOrElse(\n            channel -> channel.gossip(SimpleOffsetSerializer.serialize(attestation)),\n            () ->\n                LOG.trace(\n                    \"Ignoring attestation for committee {}, which does not correspond to any currently assigned committee.\",\n                    committeeIndex));", "author": "ajsutton", "createdAt": "2020-04-22T22:59:07Z", "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationGossipManager.java", "diffHunk": "@@ -13,82 +13,60 @@\n \n package tech.pegasys.artemis.networking.eth2.gossip;\n \n-import static java.lang.StrictMath.toIntExact;\n-\n import com.google.common.eventbus.EventBus;\n import com.google.common.eventbus.Subscribe;\n-import java.util.Map;\n-import java.util.concurrent.ConcurrentHashMap;\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Optional;\n import java.util.concurrent.atomic.AtomicBoolean;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.apache.tuweni.bytes.Bytes;\n import tech.pegasys.artemis.datastructures.operations.Attestation;\n import tech.pegasys.artemis.datastructures.util.SimpleOffsetSerializer;\n-import tech.pegasys.artemis.networking.eth2.gossip.topics.AttestationTopicHandler;\n-import tech.pegasys.artemis.networking.p2p.gossip.GossipNetwork;\n import tech.pegasys.artemis.networking.p2p.gossip.TopicChannel;\n-import tech.pegasys.artemis.storage.client.RecentChainData;\n \n public class AttestationGossipManager {\n   private static final Logger LOG = LogManager.getLogger();\n \n-  private final GossipNetwork gossipNetwork;\n   private final EventBus eventBus;\n-  private final RecentChainData recentChainData;\n-\n-  private final Map<Integer, TopicChannel> attestationChannels = new ConcurrentHashMap<>();\n+  private final AttestationSubnetSubscriptions subnetSubscriptions;\n   private final AtomicBoolean shutdown = new AtomicBoolean(false);\n \n   public AttestationGossipManager(\n-      final GossipNetwork gossipNetwork,\n       final EventBus eventBus,\n-      final RecentChainData recentChainData) {\n-    this.gossipNetwork = gossipNetwork;\n+      final AttestationSubnetSubscriptions attestationSubnetSubscriptions) {\n+    subnetSubscriptions = attestationSubnetSubscriptions;\n     this.eventBus = eventBus;\n-    this.recentChainData = recentChainData;\n     eventBus.register(this);\n   }\n \n   @Subscribe\n   public void onNewAttestation(final Attestation attestation) {\n-    final int committeeIndex = toIntExact(attestation.getData().getIndex().longValue());\n-    final TopicChannel channel = attestationChannels.get(committeeIndex);\n-    if (channel == null) {\n+    final UnsignedLong committeeIndex = attestation.getData().getIndex();\n+    final Optional<TopicChannel> channel = subnetSubscriptions.getChannel(committeeIndex);\n+    if (channel.isEmpty()) {\n       // We're not managing attestations for this committee right now\n       LOG.trace(\n           \"Ignoring attestation for committee {}, which does not correspond to any currently assigned committee.\",\n           committeeIndex);\n       return;\n     }\n     final Bytes data = SimpleOffsetSerializer.serialize(attestation);\n-    channel.gossip(data);\n+    channel.get().gossip(data);", "originalCommit": "caec0a4774ad40398b3a20b45f03c05f1b43413f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkyMTE4OA==", "url": "https://github.com/ConsenSys/teku/pull/1600#discussion_r413921188", "bodyText": "Functional programming is strong with this one... I like it.", "author": "cemozerr", "createdAt": "2020-04-23T15:59:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM4OTIzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkyMTg0OA==", "url": "https://github.com/ConsenSys/teku/pull/1600#discussion_r413921848", "bodyText": "Was not a huge fan of channel.get().gossip()", "author": "cemozerr", "createdAt": "2020-04-23T15:59:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM4OTIzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "20e4d6970f89a8e2daf94e8cfa67b695de98e505", "chunk": "diff --git a/networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationGossipManager.java b/networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationGossipManager.java\nindex e8179e75df..c95c9d1969 100644\n--- a/networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationGossipManager.java\n+++ b/networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationGossipManager.java\n\n@@ -16,14 +16,11 @@ package tech.pegasys.artemis.networking.eth2.gossip;\n import com.google.common.eventbus.EventBus;\n import com.google.common.eventbus.Subscribe;\n import com.google.common.primitives.UnsignedLong;\n-import java.util.Optional;\n import java.util.concurrent.atomic.AtomicBoolean;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n-import org.apache.tuweni.bytes.Bytes;\n import tech.pegasys.artemis.datastructures.operations.Attestation;\n import tech.pegasys.artemis.datastructures.util.SimpleOffsetSerializer;\n-import tech.pegasys.artemis.networking.p2p.gossip.TopicChannel;\n \n public class AttestationGossipManager {\n   private static final Logger LOG = LogManager.getLogger();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM5NTgxNg==", "url": "https://github.com/ConsenSys/teku/pull/1600#discussion_r413395816", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    .computeIfAbsent(subnetId, __ -> Collections.emptySet())\n          \n          \n            \n                    .getOrDefault(subnetId, Collections.emptySet())\n          \n      \n    \n    \n  \n\nWhile it looks like Collections.emptySet() would create a new object on every call, it actually doesn't and always returns the same instance. One of the advantages of Java generics being stripped at runtime. :)\nAnd computeIfAbsent would add the immutable empty set to the collection, likely causing issues later.  Suspect you should add a test for getting a channel when nothing subscribes and then later trying to subscribe to it to reveal the bug. :)", "author": "ajsutton", "createdAt": "2020-04-22T23:15:34Z", "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationSubnetSubscriptions.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.networking.eth2.gossip;\n+\n+import static java.lang.StrictMath.toIntExact;\n+import static tech.pegasys.artemis.util.config.Constants.ATTESTATION_SUBNET_COUNT;\n+\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.primitives.UnsignedLong;\n+import io.vertx.core.impl.ConcurrentHashSet;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import tech.pegasys.artemis.networking.eth2.gossip.topics.AttestationTopicHandler;\n+import tech.pegasys.artemis.networking.p2p.gossip.GossipNetwork;\n+import tech.pegasys.artemis.networking.p2p.gossip.TopicChannel;\n+import tech.pegasys.artemis.storage.client.RecentChainData;\n+\n+public class AttestationSubnetSubscriptions implements AutoCloseable {\n+  private final GossipNetwork gossipNetwork;\n+  private final RecentChainData recentChainData;\n+  private final EventBus eventBus;\n+\n+  private final Map<Integer, Set<UnsignedLong>> subnetIdToCommittees = new ConcurrentHashMap<>();\n+  private final Map<Integer, TopicChannel> subnetIdToTopicChannel = new ConcurrentHashMap<>();\n+\n+  public AttestationSubnetSubscriptions(\n+      final GossipNetwork gossipNetwork,\n+      final RecentChainData recentChainData,\n+      final EventBus eventBus) {\n+    this.gossipNetwork = gossipNetwork;\n+    this.recentChainData = recentChainData;\n+    this.eventBus = eventBus;\n+  }\n+\n+  public Optional<TopicChannel> getChannel(final UnsignedLong committeeIndex) {\n+    final int subnetId = committeeIndexToSubnetId(committeeIndex);\n+    if (!subnetIdToCommittees\n+        .computeIfAbsent(subnetId, __ -> Collections.emptySet())", "originalCommit": "caec0a4774ad40398b3a20b45f03c05f1b43413f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM5ODY4NA==", "url": "https://github.com/ConsenSys/teku/pull/1600#discussion_r413398684", "bodyText": "I'm also a little unclear on why we'd want to check if we're subscribed to the specific committee index.  If we needed to publish something to a committee we aren't subscribed to but happen to be subscribed to a different committee on the same subnet, wouldn't we want to just use the subnet we are subscribed to?  Effectively when we subscribe to a subnet we subscribe to all the committee that use that subnet.", "author": "ajsutton", "createdAt": "2020-04-22T23:22:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM5NTgxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkwMTI2OA==", "url": "https://github.com/ConsenSys/teku/pull/1600#discussion_r413901268", "bodyText": "I agree. If we are subscribed to the subnet already, there is no reason not to use it. Will make the change.", "author": "cemozerr", "createdAt": "2020-04-23T15:34:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM5NTgxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkwODE3MQ==", "url": "https://github.com/ConsenSys/teku/pull/1600#discussion_r413908171", "bodyText": "Removed the part of code where we check for committee indices in getChannel. Now we only compute the subnet index and return the topic channel of that subnet index if we're subscribed to it, or an empty Optional if not.", "author": "cemozerr", "createdAt": "2020-04-23T15:42:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM5NTgxNg=="}], "type": "inlineReview", "revised_code": {"commit": "20e4d6970f89a8e2daf94e8cfa67b695de98e505", "chunk": "diff --git a/networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationSubnetSubscriptions.java b/networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationSubnetSubscriptions.java\nindex d6a4d265b2..99a7528215 100644\n--- a/networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationSubnetSubscriptions.java\n+++ b/networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationSubnetSubscriptions.java\n\n@@ -13,17 +13,16 @@\n \n package tech.pegasys.artemis.networking.eth2.gossip;\n \n-import static java.lang.StrictMath.toIntExact;\n import static tech.pegasys.artemis.util.config.Constants.ATTESTATION_SUBNET_COUNT;\n \n import com.google.common.eventbus.EventBus;\n import com.google.common.primitives.UnsignedLong;\n-import io.vertx.core.impl.ConcurrentHashSet;\n import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n-import java.util.concurrent.ConcurrentHashMap;\n import tech.pegasys.artemis.networking.eth2.gossip.topics.AttestationTopicHandler;\n import tech.pegasys.artemis.networking.p2p.gossip.GossipNetwork;\n import tech.pegasys.artemis.networking.p2p.gossip.TopicChannel;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQwMTMzMQ==", "url": "https://github.com/ConsenSys/teku/pull/1600#discussion_r413401331", "bodyText": "We should pick either using synchronized or using concurrent collections rather than mixing both.  With the current approach of using two maps I think we'd need synchronized so probably just make them all a normal HashMap and HashSet and add synchronized to getChannel and close.", "author": "ajsutton", "createdAt": "2020-04-22T23:29:23Z", "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationSubnetSubscriptions.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.networking.eth2.gossip;\n+\n+import static java.lang.StrictMath.toIntExact;\n+import static tech.pegasys.artemis.util.config.Constants.ATTESTATION_SUBNET_COUNT;\n+\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.primitives.UnsignedLong;\n+import io.vertx.core.impl.ConcurrentHashSet;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import tech.pegasys.artemis.networking.eth2.gossip.topics.AttestationTopicHandler;\n+import tech.pegasys.artemis.networking.p2p.gossip.GossipNetwork;\n+import tech.pegasys.artemis.networking.p2p.gossip.TopicChannel;\n+import tech.pegasys.artemis.storage.client.RecentChainData;\n+\n+public class AttestationSubnetSubscriptions implements AutoCloseable {\n+  private final GossipNetwork gossipNetwork;\n+  private final RecentChainData recentChainData;\n+  private final EventBus eventBus;\n+\n+  private final Map<Integer, Set<UnsignedLong>> subnetIdToCommittees = new ConcurrentHashMap<>();\n+  private final Map<Integer, TopicChannel> subnetIdToTopicChannel = new ConcurrentHashMap<>();\n+\n+  public AttestationSubnetSubscriptions(\n+      final GossipNetwork gossipNetwork,\n+      final RecentChainData recentChainData,\n+      final EventBus eventBus) {\n+    this.gossipNetwork = gossipNetwork;\n+    this.recentChainData = recentChainData;\n+    this.eventBus = eventBus;\n+  }\n+\n+  public Optional<TopicChannel> getChannel(final UnsignedLong committeeIndex) {\n+    final int subnetId = committeeIndexToSubnetId(committeeIndex);\n+    if (!subnetIdToCommittees\n+        .computeIfAbsent(subnetId, __ -> Collections.emptySet())\n+        .contains(committeeIndex)) {\n+      // We're not subscribed to this committee subnet\n+      return Optional.empty();\n+    }\n+    return Optional.ofNullable(subnetIdToTopicChannel.get(subnetId));\n+  }\n+\n+  public synchronized void subscribeToCommitteeTopic(final UnsignedLong committeeIndex) {", "originalCommit": "caec0a4774ad40398b3a20b45f03c05f1b43413f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkxMjE1Mw==", "url": "https://github.com/ConsenSys/teku/pull/1600#discussion_r413912153", "bodyText": "Makes sense. Done.", "author": "cemozerr", "createdAt": "2020-04-23T15:47:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQwMTMzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "20e4d6970f89a8e2daf94e8cfa67b695de98e505", "chunk": "diff --git a/networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationSubnetSubscriptions.java b/networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationSubnetSubscriptions.java\nindex d6a4d265b2..99a7528215 100644\n--- a/networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationSubnetSubscriptions.java\n+++ b/networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationSubnetSubscriptions.java\n\n@@ -13,17 +13,16 @@\n \n package tech.pegasys.artemis.networking.eth2.gossip;\n \n-import static java.lang.StrictMath.toIntExact;\n import static tech.pegasys.artemis.util.config.Constants.ATTESTATION_SUBNET_COUNT;\n \n import com.google.common.eventbus.EventBus;\n import com.google.common.primitives.UnsignedLong;\n-import io.vertx.core.impl.ConcurrentHashSet;\n import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n-import java.util.concurrent.ConcurrentHashMap;\n import tech.pegasys.artemis.networking.eth2.gossip.topics.AttestationTopicHandler;\n import tech.pegasys.artemis.networking.p2p.gossip.GossipNetwork;\n import tech.pegasys.artemis.networking.p2p.gossip.TopicChannel;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQwNDI1MA==", "url": "https://github.com/ConsenSys/teku/pull/1600#discussion_r413404250", "bodyText": "As an added bonus to using synchronized you can then stop using all the concurrency-safe approaches to updating so this method simplifies to something like:\nfinal Set<UnsignedLong> committees =\n        subnetIdToCommittees.getOrDefault(subnetId, Collections.emptySet());\n    committees.remove(committeeIndex);\n    if (!committees.isEmpty()) {\n      // We still have some subscribers, don't actually unsubscribe\n      return;\n    }\n    subnetIdToCommittees.remove(subnetId);\n    final TopicChannel topicChannel = subnetIdToTopicChannel.remove(subnetId);\n    topicChannel.close();", "author": "ajsutton", "createdAt": "2020-04-22T23:36:52Z", "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationSubnetSubscriptions.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.networking.eth2.gossip;\n+\n+import static java.lang.StrictMath.toIntExact;\n+import static tech.pegasys.artemis.util.config.Constants.ATTESTATION_SUBNET_COUNT;\n+\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.primitives.UnsignedLong;\n+import io.vertx.core.impl.ConcurrentHashSet;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import tech.pegasys.artemis.networking.eth2.gossip.topics.AttestationTopicHandler;\n+import tech.pegasys.artemis.networking.p2p.gossip.GossipNetwork;\n+import tech.pegasys.artemis.networking.p2p.gossip.TopicChannel;\n+import tech.pegasys.artemis.storage.client.RecentChainData;\n+\n+public class AttestationSubnetSubscriptions implements AutoCloseable {\n+  private final GossipNetwork gossipNetwork;\n+  private final RecentChainData recentChainData;\n+  private final EventBus eventBus;\n+\n+  private final Map<Integer, Set<UnsignedLong>> subnetIdToCommittees = new ConcurrentHashMap<>();\n+  private final Map<Integer, TopicChannel> subnetIdToTopicChannel = new ConcurrentHashMap<>();\n+\n+  public AttestationSubnetSubscriptions(\n+      final GossipNetwork gossipNetwork,\n+      final RecentChainData recentChainData,\n+      final EventBus eventBus) {\n+    this.gossipNetwork = gossipNetwork;\n+    this.recentChainData = recentChainData;\n+    this.eventBus = eventBus;\n+  }\n+\n+  public Optional<TopicChannel> getChannel(final UnsignedLong committeeIndex) {\n+    final int subnetId = committeeIndexToSubnetId(committeeIndex);\n+    if (!subnetIdToCommittees\n+        .computeIfAbsent(subnetId, __ -> Collections.emptySet())\n+        .contains(committeeIndex)) {\n+      // We're not subscribed to this committee subnet\n+      return Optional.empty();\n+    }\n+    return Optional.ofNullable(subnetIdToTopicChannel.get(subnetId));\n+  }\n+\n+  public synchronized void subscribeToCommitteeTopic(final UnsignedLong committeeIndex) {\n+    final int subnetId = committeeIndexToSubnetId(committeeIndex);\n+    final Set<UnsignedLong> subscribedCommittees =\n+        subnetIdToCommittees.computeIfAbsent(subnetId, __ -> new ConcurrentHashSet<>());\n+    subscribedCommittees.add(committeeIndex);\n+    subnetIdToTopicChannel.computeIfAbsent(subnetId, this::createChannelForSubnetId);\n+  }\n+\n+  public synchronized void unsubscribeFromCommitteeTopic(final UnsignedLong committeeIndex) {\n+    final int subnetId = committeeIndexToSubnetId(committeeIndex);\n+    final Set<UnsignedLong> subscribedCommittees =\n+        subnetIdToCommittees.compute(\n+            subnetId,\n+            (subnet, committees) -> {\n+              if (committees == null) {\n+                return null;\n+              }\n+              committees.remove(committeeIndex);\n+              if (committees.isEmpty()) {\n+                return null;\n+              }\n+              return committees;\n+            });\n+\n+    if (subscribedCommittees != null) {\n+      // We still have some subscribers, don't actually unsubscribe\n+      return;\n+    }\n+\n+    subnetIdToTopicChannel.computeIfPresent(\n+        subnetId,\n+        (index, channel) -> {\n+          channel.close();\n+          return null;\n+        });", "originalCommit": "caec0a4774ad40398b3a20b45f03c05f1b43413f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkyMDQwMQ==", "url": "https://github.com/ConsenSys/teku/pull/1600#discussion_r413920401", "bodyText": "This definitely looks cleaner, although I'm a bit confused about which methods were concurrency-safe whereas the ones you suggested are not.", "author": "cemozerr", "createdAt": "2020-04-23T15:58:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQwNDI1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDExMDg4Mg==", "url": "https://github.com/ConsenSys/teku/pull/1600#discussion_r414110882", "bodyText": "You don't need to write thread-safe code if each public method is synchronised - there will only ever be one thread at a time in the class and memory access between calls is guaranteed to be consistent (ie if call A executes before call B, then call B is guaranteed to see all of call A's changes)", "author": "ajsutton", "createdAt": "2020-04-23T20:44:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQwNDI1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE3MjQzOQ==", "url": "https://github.com/ConsenSys/teku/pull/1600#discussion_r414172439", "bodyText": "Thanks for the explanation. I was also curious about what \"all the concurrency-safe approaches\" in that code were. Because I'm not sure which one of those was concurrency-safe or not.", "author": "cemozerr", "createdAt": "2020-04-23T22:43:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQwNDI1MA=="}], "type": "inlineReview", "revised_code": {"commit": "20e4d6970f89a8e2daf94e8cfa67b695de98e505", "chunk": "diff --git a/networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationSubnetSubscriptions.java b/networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationSubnetSubscriptions.java\nindex d6a4d265b2..99a7528215 100644\n--- a/networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationSubnetSubscriptions.java\n+++ b/networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationSubnetSubscriptions.java\n\n@@ -13,17 +13,16 @@\n \n package tech.pegasys.artemis.networking.eth2.gossip;\n \n-import static java.lang.StrictMath.toIntExact;\n import static tech.pegasys.artemis.util.config.Constants.ATTESTATION_SUBNET_COUNT;\n \n import com.google.common.eventbus.EventBus;\n import com.google.common.primitives.UnsignedLong;\n-import io.vertx.core.impl.ConcurrentHashSet;\n import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n-import java.util.concurrent.ConcurrentHashMap;\n import tech.pegasys.artemis.networking.eth2.gossip.topics.AttestationTopicHandler;\n import tech.pegasys.artemis.networking.p2p.gossip.GossipNetwork;\n import tech.pegasys.artemis.networking.p2p.gossip.TopicChannel;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQwNjQ2Nw==", "url": "https://github.com/ConsenSys/teku/pull/1600#discussion_r413406467", "bodyText": "We probably should match these up based on the topic name rather than depending on the call order (the argThat(i -> i.contains(...)) approach is a good one).", "author": "ajsutton", "createdAt": "2020-04-22T23:42:40Z", "path": "networking/eth2/src/test/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationSubnetSubscriptionsTest.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.networking.eth2.gossip;\n+\n+import static com.google.common.primitives.UnsignedLong.valueOf;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.argThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.when;\n+import static tech.pegasys.artemis.util.config.Constants.ATTESTATION_SUBNET_COUNT;\n+\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Optional;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.artemis.networking.p2p.gossip.GossipNetwork;\n+import tech.pegasys.artemis.networking.p2p.gossip.TopicChannel;\n+import tech.pegasys.artemis.storage.client.RecentChainData;\n+\n+public class AttestationSubnetSubscriptionsTest {\n+  private AttestationSubnetSubscriptions subnetSubscriptions;\n+  private GossipNetwork gossipNetwork = mock(GossipNetwork.class);\n+  private EventBus eventBus = mock(EventBus.class);\n+\n+  @BeforeEach\n+  void setUp() {\n+    subnetSubscriptions =\n+        new AttestationSubnetSubscriptions(gossipNetwork, mock(RecentChainData.class), eventBus);\n+\n+    when(gossipNetwork.subscribe(any(), any())).thenReturn(mock(TopicChannel.class));\n+  }\n+\n+  @Test\n+  void getChannelReturnsEmptyIfNotSubscribedToSpecificCommittee() {\n+    UnsignedLong COMMITTEE_INDEX = UnsignedLong.ONE;\n+    subnetSubscriptions.subscribeToCommitteeTopic(COMMITTEE_INDEX);\n+    assertThat(subnetSubscriptions.getChannel(COMMITTEE_INDEX)).isNotEqualTo(Optional.empty());\n+    assertThat(subnetSubscriptions.getChannel(COMMITTEE_INDEX.plus(UnsignedLong.ONE)))\n+        .isEqualTo(Optional.empty());\n+  }\n+\n+  @Test\n+  void getChannelReturnsEmptyIfNotSubscribedToSpecificCommitteeEvenIfSubscribedToSameSubnet() {\n+    UnsignedLong COMMITTEE_INDEX = UnsignedLong.ONE;\n+    subnetSubscriptions.subscribeToCommitteeTopic(COMMITTEE_INDEX);\n+    assertThat(subnetSubscriptions.getChannel(COMMITTEE_INDEX)).isNotEqualTo(Optional.empty());\n+    assertThat(\n+            subnetSubscriptions.getChannel(COMMITTEE_INDEX.plus(valueOf(ATTESTATION_SUBNET_COUNT))))\n+        .isEqualTo(Optional.empty());\n+  }\n+\n+  @Test\n+  void subscribeAndUnsubscribeCorrectTopics() {\n+    TopicChannel topicChannel1 = mock(TopicChannel.class);\n+    TopicChannel topicChannel2 = mock(TopicChannel.class);\n+    when(gossipNetwork.subscribe(any(), any())).thenReturn(topicChannel1).thenReturn(topicChannel2);", "originalCommit": "caec0a4774ad40398b3a20b45f03c05f1b43413f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkyNDgwMg==", "url": "https://github.com/ConsenSys/teku/pull/1600#discussion_r413924802", "bodyText": "Great point.", "author": "cemozerr", "createdAt": "2020-04-23T16:03:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQwNjQ2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk3NTM0NQ==", "url": "https://github.com/ConsenSys/teku/pull/1600#discussion_r413975345", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-04-23T17:11:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQwNjQ2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "20e4d6970f89a8e2daf94e8cfa67b695de98e505", "chunk": "diff --git a/networking/eth2/src/test/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationSubnetSubscriptionsTest.java b/networking/eth2/src/test/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationSubnetSubscriptionsTest.java\nindex 86d9bdf7c5..3f49a7be60 100644\n--- a/networking/eth2/src/test/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationSubnetSubscriptionsTest.java\n+++ b/networking/eth2/src/test/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationSubnetSubscriptionsTest.java\n\n@@ -17,6 +17,7 @@ import static com.google.common.primitives.UnsignedLong.valueOf;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.ArgumentMatchers.argThat;\n+import static org.mockito.ArgumentMatchers.contains;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.verifyNoInteractions;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQwNzM2OQ==", "url": "https://github.com/ConsenSys/teku/pull/1600#discussion_r413407369", "bodyText": "I'd be very tempted to split this into multiple tests so it's clear what's being covered.  I think we'd have:\n\nshouldSubscribeToCommitteesOnDifferentSubnets\nshouldSubscribeToCommitteesOnSameSubnet (verify gossipNetwork.subscribe is only called once)\nshouldUnsubscribeFromOnlyCommitteeOnSubnet\nshouldNotUnsubscribeFromSubnetWhenOtherCommitteesStillRequireIt (or a better name...)", "author": "ajsutton", "createdAt": "2020-04-22T23:44:59Z", "path": "networking/eth2/src/test/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationSubnetSubscriptionsTest.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.networking.eth2.gossip;\n+\n+import static com.google.common.primitives.UnsignedLong.valueOf;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.argThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.when;\n+import static tech.pegasys.artemis.util.config.Constants.ATTESTATION_SUBNET_COUNT;\n+\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Optional;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.artemis.networking.p2p.gossip.GossipNetwork;\n+import tech.pegasys.artemis.networking.p2p.gossip.TopicChannel;\n+import tech.pegasys.artemis.storage.client.RecentChainData;\n+\n+public class AttestationSubnetSubscriptionsTest {\n+  private AttestationSubnetSubscriptions subnetSubscriptions;\n+  private GossipNetwork gossipNetwork = mock(GossipNetwork.class);\n+  private EventBus eventBus = mock(EventBus.class);\n+\n+  @BeforeEach\n+  void setUp() {\n+    subnetSubscriptions =\n+        new AttestationSubnetSubscriptions(gossipNetwork, mock(RecentChainData.class), eventBus);\n+\n+    when(gossipNetwork.subscribe(any(), any())).thenReturn(mock(TopicChannel.class));\n+  }\n+\n+  @Test\n+  void getChannelReturnsEmptyIfNotSubscribedToSpecificCommittee() {\n+    UnsignedLong COMMITTEE_INDEX = UnsignedLong.ONE;\n+    subnetSubscriptions.subscribeToCommitteeTopic(COMMITTEE_INDEX);\n+    assertThat(subnetSubscriptions.getChannel(COMMITTEE_INDEX)).isNotEqualTo(Optional.empty());\n+    assertThat(subnetSubscriptions.getChannel(COMMITTEE_INDEX.plus(UnsignedLong.ONE)))\n+        .isEqualTo(Optional.empty());\n+  }\n+\n+  @Test\n+  void getChannelReturnsEmptyIfNotSubscribedToSpecificCommitteeEvenIfSubscribedToSameSubnet() {\n+    UnsignedLong COMMITTEE_INDEX = UnsignedLong.ONE;\n+    subnetSubscriptions.subscribeToCommitteeTopic(COMMITTEE_INDEX);\n+    assertThat(subnetSubscriptions.getChannel(COMMITTEE_INDEX)).isNotEqualTo(Optional.empty());\n+    assertThat(\n+            subnetSubscriptions.getChannel(COMMITTEE_INDEX.plus(valueOf(ATTESTATION_SUBNET_COUNT))))\n+        .isEqualTo(Optional.empty());\n+  }\n+\n+  @Test\n+  void subscribeAndUnsubscribeCorrectTopics() {", "originalCommit": "caec0a4774ad40398b3a20b45f03c05f1b43413f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk3NTExMA==", "url": "https://github.com/ConsenSys/teku/pull/1600#discussion_r413975110", "bodyText": "Definitely, it would be way more legible that way.", "author": "cemozerr", "createdAt": "2020-04-23T17:11:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQwNzM2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk3NTI4NA==", "url": "https://github.com/ConsenSys/teku/pull/1600#discussion_r413975284", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-04-23T17:11:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQwNzM2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "20e4d6970f89a8e2daf94e8cfa67b695de98e505", "chunk": "diff --git a/networking/eth2/src/test/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationSubnetSubscriptionsTest.java b/networking/eth2/src/test/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationSubnetSubscriptionsTest.java\nindex 86d9bdf7c5..3f49a7be60 100644\n--- a/networking/eth2/src/test/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationSubnetSubscriptionsTest.java\n+++ b/networking/eth2/src/test/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationSubnetSubscriptionsTest.java\n\n@@ -17,6 +17,7 @@ import static com.google.common.primitives.UnsignedLong.valueOf;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.ArgumentMatchers.argThat;\n+import static org.mockito.ArgumentMatchers.contains;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.verifyNoInteractions;\n"}}, {"oid": "20e4d6970f89a8e2daf94e8cfa67b695de98e505", "url": "https://github.com/ConsenSys/teku/commit/20e4d6970f89a8e2daf94e8cfa67b695de98e505", "message": "Fix concurrency issues & break up tests", "committedDate": "2020-04-23T17:10:59Z", "type": "commit"}, {"oid": "1c623ba30cc714c2771ba4601a03dd2f0db91cd7", "url": "https://github.com/ConsenSys/teku/commit/1c623ba30cc714c2771ba4601a03dd2f0db91cd7", "message": "Merge branch 'master' into bc-355/calculate-subnet-id-from-committee-id", "committedDate": "2020-04-23T17:11:18Z", "type": "commit"}, {"oid": "7c92150e661f3a367cf9f0fd596128ad71e60565", "url": "https://github.com/ConsenSys/teku/commit/7c92150e661f3a367cf9f0fd596128ad71e60565", "message": "Fix AttesationGossipManagerTests", "committedDate": "2020-04-23T17:55:32Z", "type": "commit"}, {"oid": "2be09312bd5844b4fd85a6e45f8ade486548a68d", "url": "https://github.com/ConsenSys/teku/commit/2be09312bd5844b4fd85a6e45f8ade486548a68d", "message": "Merge branch 'master' into bc-355/calculate-subnet-id-from-committee-id", "committedDate": "2020-04-23T19:17:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDExNTg5Mw==", "url": "https://github.com/ConsenSys/teku/pull/1600#discussion_r414115893", "bodyText": "nit: Inline the variable\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final UnsignedLong subnetId =\n          \n          \n            \n                    committeeIndex.mod(UnsignedLong.valueOf(ATTESTATION_SUBNET_COUNT));\n          \n          \n            \n                return subnetId;\n          \n          \n            \n                return committeeIndex.mod(UnsignedLong.valueOf(ATTESTATION_SUBNET_COUNT));", "author": "ajsutton", "createdAt": "2020-04-23T20:52:37Z", "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationSubnetSubscriptions.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.networking.eth2.gossip;\n+\n+import static tech.pegasys.artemis.util.config.Constants.ATTESTATION_SUBNET_COUNT;\n+\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import tech.pegasys.artemis.networking.eth2.gossip.topics.AttestationTopicHandler;\n+import tech.pegasys.artemis.networking.p2p.gossip.GossipNetwork;\n+import tech.pegasys.artemis.networking.p2p.gossip.TopicChannel;\n+import tech.pegasys.artemis.storage.client.RecentChainData;\n+\n+public class AttestationSubnetSubscriptions implements AutoCloseable {\n+  private final GossipNetwork gossipNetwork;\n+  private final RecentChainData recentChainData;\n+  private final EventBus eventBus;\n+\n+  private final Map<UnsignedLong, Set<UnsignedLong>> subnetIdToCommittees = new HashMap<>();\n+  private final Map<UnsignedLong, TopicChannel> subnetIdToTopicChannel = new HashMap<>();\n+\n+  public AttestationSubnetSubscriptions(\n+      final GossipNetwork gossipNetwork,\n+      final RecentChainData recentChainData,\n+      final EventBus eventBus) {\n+    this.gossipNetwork = gossipNetwork;\n+    this.recentChainData = recentChainData;\n+    this.eventBus = eventBus;\n+  }\n+\n+  public synchronized Optional<TopicChannel> getChannel(final UnsignedLong committeeIndex) {\n+    final UnsignedLong subnetId = committeeIndexToSubnetId(committeeIndex);\n+    return Optional.ofNullable(subnetIdToTopicChannel.get(subnetId));\n+  }\n+\n+  public synchronized void subscribeToCommitteeTopic(final UnsignedLong committeeIndex) {\n+    final UnsignedLong subnetId = committeeIndexToSubnetId(committeeIndex);\n+    final Set<UnsignedLong> subscribedCommittees =\n+        subnetIdToCommittees.computeIfAbsent(subnetId, __ -> new HashSet<>());\n+    subscribedCommittees.add(committeeIndex);\n+    subnetIdToTopicChannel.computeIfAbsent(subnetId, this::createChannelForSubnetId);\n+  }\n+\n+  public synchronized void unsubscribeFromCommitteeTopic(final UnsignedLong committeeIndex) {\n+    final UnsignedLong subnetId = committeeIndexToSubnetId(committeeIndex);\n+    final Set<UnsignedLong> committees =\n+        subnetIdToCommittees.getOrDefault(subnetId, Collections.emptySet());\n+    committees.remove(committeeIndex);\n+    if (!committees.isEmpty()) {\n+      // We still have some subscribers, don't actually unsubscribe\n+      return;\n+    }\n+    subnetIdToCommittees.remove(subnetId);\n+    final TopicChannel topicChannel = subnetIdToTopicChannel.remove(subnetId);\n+    if (topicChannel != null) {\n+      topicChannel.close();\n+    }\n+  }\n+\n+  private UnsignedLong committeeIndexToSubnetId(final UnsignedLong committeeIndex) {\n+    final UnsignedLong subnetId =\n+        committeeIndex.mod(UnsignedLong.valueOf(ATTESTATION_SUBNET_COUNT));\n+    return subnetId;", "originalCommit": "2be09312bd5844b4fd85a6e45f8ade486548a68d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE3MTc3Mg==", "url": "https://github.com/ConsenSys/teku/pull/1600#discussion_r414171772", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-04-23T22:42:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDExNTg5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "3011739e81ef8f8ca145d940dc0cdb0524ab8b5a", "chunk": "diff --git a/networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationSubnetSubscriptions.java b/networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationSubnetSubscriptions.java\nindex ce85a98b97..c767b28ac2 100644\n--- a/networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationSubnetSubscriptions.java\n+++ b/networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationSubnetSubscriptions.java\n\n@@ -75,9 +75,7 @@ public class AttestationSubnetSubscriptions implements AutoCloseable {\n   }\n \n   private UnsignedLong committeeIndexToSubnetId(final UnsignedLong committeeIndex) {\n-    final UnsignedLong subnetId =\n-        committeeIndex.mod(UnsignedLong.valueOf(ATTESTATION_SUBNET_COUNT));\n-    return subnetId;\n+    return committeeIndex.mod(UnsignedLong.valueOf(ATTESTATION_SUBNET_COUNT));\n   }\n \n   private TopicChannel createChannelForSubnetId(final UnsignedLong subnetId) {\n"}}, {"oid": "75cd45ae6b80215d26dd1b9fb6d9d6ab134efe7f", "url": "https://github.com/ConsenSys/teku/commit/75cd45ae6b80215d26dd1b9fb6d9d6ab134efe7f", "message": "Merge branch 'master' into bc-355/calculate-subnet-id-from-committee-id", "committedDate": "2020-04-23T22:41:10Z", "type": "commit"}, {"oid": "3011739e81ef8f8ca145d940dc0cdb0524ab8b5a", "url": "https://github.com/ConsenSys/teku/commit/3011739e81ef8f8ca145d940dc0cdb0524ab8b5a", "message": "Fix nit", "committedDate": "2020-04-23T22:44:05Z", "type": "commit"}, {"oid": "c01a2bab70d5b985f54671207f5b6484b490276f", "url": "https://github.com/ConsenSys/teku/commit/c01a2bab70d5b985f54671207f5b6484b490276f", "message": "Merge branch 'master' into bc-355/calculate-subnet-id-from-committee-id", "committedDate": "2020-04-23T23:14:18Z", "type": "commit"}]}