{"pr_number": 1126, "pr_title": "Generate genesis state incrementally", "pr_createdAt": "2020-01-31T02:42:33Z", "pr_url": "https://github.com/ConsenSys/teku/pull/1126", "timeline": [{"oid": "4dd6aa3933c555c061c23446a72b43dd88f6c1df", "url": "https://github.com/ConsenSys/teku/commit/4dd6aa3933c555c061c23446a72b43dd88f6c1df", "message": "Incrementally generate genesis state as deposits are received.", "committedDate": "2020-01-30T23:23:42Z", "type": "commit"}, {"oid": "51477eeaa58fb4e3be65da99a5c64424542737f5", "url": "https://github.com/ConsenSys/teku/commit/51477eeaa58fb4e3be65da99a5c64424542737f5", "message": "Merge branch 'master' of github.com:PegaSysEng/artemis into incremental-genesis", "committedDate": "2020-01-30T23:53:24Z", "type": "commit"}, {"oid": "3b6f5e9595a2d111c4560bcc7cad96be806cbf48", "url": "https://github.com/ConsenSys/teku/commit/3b6f5e9595a2d111c4560bcc7cad96be806cbf48", "message": "More tests.", "committedDate": "2020-01-31T02:24:11Z", "type": "commit"}, {"oid": "fbcc6b213857178bdbb9dc0790111ad246d0f1f2", "url": "https://github.com/ConsenSys/teku/commit/fbcc6b213857178bdbb9dc0790111ad246d0f1f2", "message": "Simplify", "committedDate": "2020-01-31T02:26:36Z", "type": "commit"}, {"oid": "5fd26c0ed32dab4fa42df7814e50f093aa0109c0", "url": "https://github.com/ConsenSys/teku/commit/5fd26c0ed32dab4fa42df7814e50f093aa0109c0", "message": "Simplify how caching is avoided.", "committedDate": "2020-01-31T02:40:26Z", "type": "commit"}, {"oid": "040f11a695e2462560383771568b50d441711cd9", "url": "https://github.com/ConsenSys/teku/commit/040f11a695e2462560383771568b50d441711cd9", "message": "Remove noise.", "committedDate": "2020-01-31T02:42:57Z", "type": "commit"}, {"oid": "e3ecd3c3e72007a6c6855743d7043b5590917708", "url": "https://github.com/ConsenSys/teku/commit/e3ecd3c3e72007a6c6855743d7043b5590917708", "message": "Provide accessor to unconditionally get genesis state.", "committedDate": "2020-01-31T02:45:24Z", "type": "commit"}, {"oid": "1e38d439e24383183df9565cce57c3baa0c299fd", "url": "https://github.com/ConsenSys/teku/commit/1e38d439e24383183df9565cce57c3baa0c299fd", "message": "Extract methods for clarity.", "committedDate": "2020-01-31T02:49:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI5NDgwNg==", "url": "https://github.com/ConsenSys/teku/pull/1126#discussion_r373294806", "bodyText": "We were incorrectly storing the validator index even if the deposit was invalid. We would have incremented the wrong balance if there was a later, valid deposit for that validator as it would have used the cached index from the invalid deposit even though the validator didn't actually get created then.", "author": "ajsutton", "createdAt": "2020-01-31T02:47:02Z", "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/BeaconStateUtil.java", "diffHunk": "@@ -220,6 +152,10 @@ private static void process_deposit(\n                     compute_domain(DOMAIN_DEPOSIT));\n         if (!proof_is_valid) {\n           STDOUT.log(Level.DEBUG, \"Skipping invalid deposit\");\n+          if (pubKeyToIndexMap != null) {\n+            // The validator won't be created so the calculated index won't be correct\n+            pubKeyToIndexMap.remove(pubkey);\n+          }", "originalCommit": "5fd26c0ed32dab4fa42df7814e50f093aa0109c0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU1OTQwOA==", "url": "https://github.com/ConsenSys/teku/pull/1126#discussion_r373559408", "bodyText": "(nit) why not initialize a beaconStateWithCache, since it was like that previously too.", "author": "cemozerr", "createdAt": "2020-01-31T16:11:26Z", "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/GenesisGenerator.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.datastructures.util;\n+\n+import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.process_deposit_without_checking_merkle_proof;\n+import static tech.pegasys.artemis.util.alogger.ALogger.STDOUT;\n+import static tech.pegasys.artemis.util.config.Constants.DEPOSIT_CONTRACT_TREE_DEPTH;\n+import static tech.pegasys.artemis.util.config.Constants.EFFECTIVE_BALANCE_INCREMENT;\n+import static tech.pegasys.artemis.util.config.Constants.GENESIS_EPOCH;\n+import static tech.pegasys.artemis.util.config.Constants.MAX_EFFECTIVE_BALANCE;\n+import static tech.pegasys.artemis.util.config.Constants.SECONDS_PER_DAY;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import org.apache.logging.log4j.Level;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.artemis.datastructures.blocks.BeaconBlockBody;\n+import tech.pegasys.artemis.datastructures.blocks.BeaconBlockHeader;\n+import tech.pegasys.artemis.datastructures.blocks.Eth1Data;\n+import tech.pegasys.artemis.datastructures.operations.Deposit;\n+import tech.pegasys.artemis.datastructures.operations.DepositData;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.datastructures.state.BeaconStateWithCache;\n+import tech.pegasys.artemis.datastructures.state.Validator;\n+import tech.pegasys.artemis.util.SSZTypes.SSZList;\n+import tech.pegasys.artemis.util.bls.BLSPublicKey;\n+import tech.pegasys.artemis.util.hashtree.HashTreeUtil;\n+\n+public class GenesisGenerator {\n+  private final MerkleTree<Bytes32> depositMerkleTree =\n+      new MerkleTree<>(DEPOSIT_CONTRACT_TREE_DEPTH);\n+  private final BeaconState state = new BeaconState();", "originalCommit": "1e38d439e24383183df9565cce57c3baa0c299fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY1MzY4NA==", "url": "https://github.com/ConsenSys/teku/pull/1126#discussion_r373653684", "bodyText": "Try it and run the tests. :)  Or you can cheat by looking at https://github.com/PegaSysEng/artemis/pull/1126/files#diff-904923335514a38af0c32d5d241ab8eaR97", "author": "ajsutton", "createdAt": "2020-01-31T19:44:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU1OTQwOA=="}], "type": "inlineReview", "revised_code": {"commit": "afff270b1c8be0ab1e2d8cc3d803ae7d3fec61f4", "chunk": "diff --git a/ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/GenesisGenerator.java b/ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/GenesisGenerator.java\nindex 7bb9840b02..3cba221b18 100644\n--- a/ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/GenesisGenerator.java\n+++ b/ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/GenesisGenerator.java\n\n@@ -84,19 +84,21 @@ public class GenesisGenerator {\n \n   private void processActivation(final Deposit deposit) {\n     final Integer index = keyCache.get(deposit.getData().getPubkey());\n-    if (index != null) { // Could be null if the deposit was invalid\n-      Validator validator = state.getValidators().get(index);\n-      UnsignedLong balance = state.getBalances().get(index);\n-      UnsignedLong effective_balance =\n-          BeaconStateUtil.min(\n-              balance.minus(balance.mod(UnsignedLong.valueOf(EFFECTIVE_BALANCE_INCREMENT))),\n-              UnsignedLong.valueOf(MAX_EFFECTIVE_BALANCE));\n-      validator.setEffective_balance(effective_balance);\n-\n-      if (validator.getEffective_balance().equals(UnsignedLong.valueOf(MAX_EFFECTIVE_BALANCE))) {\n-        validator.setActivation_eligibility_epoch(UnsignedLong.valueOf(GENESIS_EPOCH));\n-        validator.setActivation_epoch(UnsignedLong.valueOf(GENESIS_EPOCH));\n-      }\n+    if (index == null) {\n+      // Could be null if the deposit was invalid\n+      return;\n+    }\n+    Validator validator = state.getValidators().get(index);\n+    UnsignedLong balance = state.getBalances().get(index);\n+    UnsignedLong effective_balance =\n+        BeaconStateUtil.min(\n+            balance.minus(balance.mod(UnsignedLong.valueOf(EFFECTIVE_BALANCE_INCREMENT))),\n+            UnsignedLong.valueOf(MAX_EFFECTIVE_BALANCE));\n+    validator.setEffective_balance(effective_balance);\n+\n+    if (validator.getEffective_balance().equals(UnsignedLong.valueOf(MAX_EFFECTIVE_BALANCE))) {\n+      validator.setActivation_eligibility_epoch(UnsignedLong.valueOf(GENESIS_EPOCH));\n+      validator.setActivation_epoch(UnsignedLong.valueOf(GENESIS_EPOCH));\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU3NDk1Ng==", "url": "https://github.com/ConsenSys/teku/pull/1126#discussion_r373574956", "bodyText": "(nit) we can avoid nesting:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (index != null) { // Could be null if the deposit was invalid\n          \n          \n            \n                if (index == null) return  // Could be null if the deposit was invalid", "author": "cemozerr", "createdAt": "2020-01-31T16:42:11Z", "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/GenesisGenerator.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.datastructures.util;\n+\n+import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.process_deposit_without_checking_merkle_proof;\n+import static tech.pegasys.artemis.util.alogger.ALogger.STDOUT;\n+import static tech.pegasys.artemis.util.config.Constants.DEPOSIT_CONTRACT_TREE_DEPTH;\n+import static tech.pegasys.artemis.util.config.Constants.EFFECTIVE_BALANCE_INCREMENT;\n+import static tech.pegasys.artemis.util.config.Constants.GENESIS_EPOCH;\n+import static tech.pegasys.artemis.util.config.Constants.MAX_EFFECTIVE_BALANCE;\n+import static tech.pegasys.artemis.util.config.Constants.SECONDS_PER_DAY;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import org.apache.logging.log4j.Level;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.artemis.datastructures.blocks.BeaconBlockBody;\n+import tech.pegasys.artemis.datastructures.blocks.BeaconBlockHeader;\n+import tech.pegasys.artemis.datastructures.blocks.Eth1Data;\n+import tech.pegasys.artemis.datastructures.operations.Deposit;\n+import tech.pegasys.artemis.datastructures.operations.DepositData;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.datastructures.state.BeaconStateWithCache;\n+import tech.pegasys.artemis.datastructures.state.Validator;\n+import tech.pegasys.artemis.util.SSZTypes.SSZList;\n+import tech.pegasys.artemis.util.bls.BLSPublicKey;\n+import tech.pegasys.artemis.util.hashtree.HashTreeUtil;\n+\n+public class GenesisGenerator {\n+  private final MerkleTree<Bytes32> depositMerkleTree =\n+      new MerkleTree<>(DEPOSIT_CONTRACT_TREE_DEPTH);\n+  private final BeaconState state = new BeaconState();\n+  private final Map<BLSPublicKey, Integer> keyCache = new HashMap<>();\n+  private final long depositListLength = ((long) 1) << DEPOSIT_CONTRACT_TREE_DEPTH;\n+  private final SSZList<DepositData> depositDataList =\n+      new SSZList<>(DepositData.class, depositListLength);\n+\n+  public GenesisGenerator() {\n+    BeaconBlockHeader beaconBlockHeader = new BeaconBlockHeader();\n+    Bytes32 latestBlockRoot = new BeaconBlockBody().hash_tree_root();\n+    beaconBlockHeader.setBody_root(latestBlockRoot);\n+    state.setLatest_block_header(beaconBlockHeader);\n+  }\n+\n+  public void addDepositsFromBlock(\n+      Bytes32 eth1BlockHash, UnsignedLong eth1Timestamp, List<? extends Deposit> deposits) {\n+    updateGenesisTime(eth1Timestamp);\n+\n+    final Eth1Data eth1Data = state.getEth1_data();\n+    eth1Data.setBlock_hash(eth1BlockHash);\n+    eth1Data.setDeposit_count(UnsignedLong.valueOf(depositDataList.size() + deposits.size()));\n+\n+    // Process deposits\n+    deposits.forEach(\n+        deposit -> {\n+          if (BeaconStateUtil.DEPOSIT_PROOFS_ENABLED) {\n+            calculateDepositProof(deposit);\n+          }\n+          STDOUT.log(Level.DEBUG, \"About to process deposit: \" + depositDataList.size());\n+          depositDataList.add(deposit.getData());\n+\n+          // Skip verifing the merkle proof as we'll only generate one at the end\n+          // We do still verify the signature\n+          process_deposit_without_checking_merkle_proof(state, deposit, keyCache);\n+\n+          processActivation(deposit);\n+        });\n+  }\n+\n+  private void processActivation(final Deposit deposit) {\n+    final Integer index = keyCache.get(deposit.getData().getPubkey());\n+    if (index != null) { // Could be null if the deposit was invalid", "originalCommit": "1e38d439e24383183df9565cce57c3baa0c299fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY1NTg5OQ==", "url": "https://github.com/ConsenSys/teku/pull/1126#discussion_r373655899", "bodyText": "Good point.", "author": "ajsutton", "createdAt": "2020-01-31T19:49:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU3NDk1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "afff270b1c8be0ab1e2d8cc3d803ae7d3fec61f4", "chunk": "diff --git a/ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/GenesisGenerator.java b/ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/GenesisGenerator.java\nindex 7bb9840b02..3cba221b18 100644\n--- a/ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/GenesisGenerator.java\n+++ b/ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/GenesisGenerator.java\n\n@@ -84,19 +84,21 @@ public class GenesisGenerator {\n \n   private void processActivation(final Deposit deposit) {\n     final Integer index = keyCache.get(deposit.getData().getPubkey());\n-    if (index != null) { // Could be null if the deposit was invalid\n-      Validator validator = state.getValidators().get(index);\n-      UnsignedLong balance = state.getBalances().get(index);\n-      UnsignedLong effective_balance =\n-          BeaconStateUtil.min(\n-              balance.minus(balance.mod(UnsignedLong.valueOf(EFFECTIVE_BALANCE_INCREMENT))),\n-              UnsignedLong.valueOf(MAX_EFFECTIVE_BALANCE));\n-      validator.setEffective_balance(effective_balance);\n-\n-      if (validator.getEffective_balance().equals(UnsignedLong.valueOf(MAX_EFFECTIVE_BALANCE))) {\n-        validator.setActivation_eligibility_epoch(UnsignedLong.valueOf(GENESIS_EPOCH));\n-        validator.setActivation_epoch(UnsignedLong.valueOf(GENESIS_EPOCH));\n-      }\n+    if (index == null) {\n+      // Could be null if the deposit was invalid\n+      return;\n+    }\n+    Validator validator = state.getValidators().get(index);\n+    UnsignedLong balance = state.getBalances().get(index);\n+    UnsignedLong effective_balance =\n+        BeaconStateUtil.min(\n+            balance.minus(balance.mod(UnsignedLong.valueOf(EFFECTIVE_BALANCE_INCREMENT))),\n+            UnsignedLong.valueOf(MAX_EFFECTIVE_BALANCE));\n+    validator.setEffective_balance(effective_balance);\n+\n+    if (validator.getEffective_balance().equals(UnsignedLong.valueOf(MAX_EFFECTIVE_BALANCE))) {\n+      validator.setActivation_eligibility_epoch(UnsignedLong.valueOf(GENESIS_EPOCH));\n+      validator.setActivation_epoch(UnsignedLong.valueOf(GENESIS_EPOCH));\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU4MTU3OA==", "url": "https://github.com/ConsenSys/teku/pull/1126#discussion_r373581578", "bodyText": "I couldn't find where we verify the merkle proof that we've generated. Or do you mean that we don't need to since we only generate one merkle proof here?", "author": "cemozerr", "createdAt": "2020-01-31T16:55:56Z", "path": "ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/GenesisGenerator.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.artemis.datastructures.util;\n+\n+import static tech.pegasys.artemis.datastructures.util.BeaconStateUtil.process_deposit_without_checking_merkle_proof;\n+import static tech.pegasys.artemis.util.alogger.ALogger.STDOUT;\n+import static tech.pegasys.artemis.util.config.Constants.DEPOSIT_CONTRACT_TREE_DEPTH;\n+import static tech.pegasys.artemis.util.config.Constants.EFFECTIVE_BALANCE_INCREMENT;\n+import static tech.pegasys.artemis.util.config.Constants.GENESIS_EPOCH;\n+import static tech.pegasys.artemis.util.config.Constants.MAX_EFFECTIVE_BALANCE;\n+import static tech.pegasys.artemis.util.config.Constants.SECONDS_PER_DAY;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import org.apache.logging.log4j.Level;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.artemis.datastructures.blocks.BeaconBlockBody;\n+import tech.pegasys.artemis.datastructures.blocks.BeaconBlockHeader;\n+import tech.pegasys.artemis.datastructures.blocks.Eth1Data;\n+import tech.pegasys.artemis.datastructures.operations.Deposit;\n+import tech.pegasys.artemis.datastructures.operations.DepositData;\n+import tech.pegasys.artemis.datastructures.state.BeaconState;\n+import tech.pegasys.artemis.datastructures.state.BeaconStateWithCache;\n+import tech.pegasys.artemis.datastructures.state.Validator;\n+import tech.pegasys.artemis.util.SSZTypes.SSZList;\n+import tech.pegasys.artemis.util.bls.BLSPublicKey;\n+import tech.pegasys.artemis.util.hashtree.HashTreeUtil;\n+\n+public class GenesisGenerator {\n+  private final MerkleTree<Bytes32> depositMerkleTree =\n+      new MerkleTree<>(DEPOSIT_CONTRACT_TREE_DEPTH);\n+  private final BeaconState state = new BeaconState();\n+  private final Map<BLSPublicKey, Integer> keyCache = new HashMap<>();\n+  private final long depositListLength = ((long) 1) << DEPOSIT_CONTRACT_TREE_DEPTH;\n+  private final SSZList<DepositData> depositDataList =\n+      new SSZList<>(DepositData.class, depositListLength);\n+\n+  public GenesisGenerator() {\n+    BeaconBlockHeader beaconBlockHeader = new BeaconBlockHeader();\n+    Bytes32 latestBlockRoot = new BeaconBlockBody().hash_tree_root();\n+    beaconBlockHeader.setBody_root(latestBlockRoot);\n+    state.setLatest_block_header(beaconBlockHeader);\n+  }\n+\n+  public void addDepositsFromBlock(\n+      Bytes32 eth1BlockHash, UnsignedLong eth1Timestamp, List<? extends Deposit> deposits) {\n+    updateGenesisTime(eth1Timestamp);\n+\n+    final Eth1Data eth1Data = state.getEth1_data();\n+    eth1Data.setBlock_hash(eth1BlockHash);\n+    eth1Data.setDeposit_count(UnsignedLong.valueOf(depositDataList.size() + deposits.size()));\n+\n+    // Process deposits\n+    deposits.forEach(\n+        deposit -> {\n+          if (BeaconStateUtil.DEPOSIT_PROOFS_ENABLED) {\n+            calculateDepositProof(deposit);\n+          }\n+          STDOUT.log(Level.DEBUG, \"About to process deposit: \" + depositDataList.size());\n+          depositDataList.add(deposit.getData());\n+\n+          // Skip verifing the merkle proof as we'll only generate one at the end\n+          // We do still verify the signature\n+          process_deposit_without_checking_merkle_proof(state, deposit, keyCache);", "originalCommit": "1e38d439e24383183df9565cce57c3baa0c299fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY1MzA2OQ==", "url": "https://github.com/ConsenSys/teku/pull/1126#discussion_r373653069", "bodyText": "Correct, we don't verify the Merkle proof - both the proof in the deposit and the Merkle root are generated by us, so we'd just be verifying that we generated it right.  We do have a test that checks we generate it right, but we don't need it in the production code.", "author": "ajsutton", "createdAt": "2020-01-31T19:42:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU4MTU3OA=="}], "type": "inlineReview", "revised_code": {"commit": "afff270b1c8be0ab1e2d8cc3d803ae7d3fec61f4", "chunk": "diff --git a/ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/GenesisGenerator.java b/ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/GenesisGenerator.java\nindex 7bb9840b02..3cba221b18 100644\n--- a/ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/GenesisGenerator.java\n+++ b/ethereum/datastructures/src/main/java/tech/pegasys/artemis/datastructures/util/GenesisGenerator.java\n\n@@ -84,19 +84,21 @@ public class GenesisGenerator {\n \n   private void processActivation(final Deposit deposit) {\n     final Integer index = keyCache.get(deposit.getData().getPubkey());\n-    if (index != null) { // Could be null if the deposit was invalid\n-      Validator validator = state.getValidators().get(index);\n-      UnsignedLong balance = state.getBalances().get(index);\n-      UnsignedLong effective_balance =\n-          BeaconStateUtil.min(\n-              balance.minus(balance.mod(UnsignedLong.valueOf(EFFECTIVE_BALANCE_INCREMENT))),\n-              UnsignedLong.valueOf(MAX_EFFECTIVE_BALANCE));\n-      validator.setEffective_balance(effective_balance);\n-\n-      if (validator.getEffective_balance().equals(UnsignedLong.valueOf(MAX_EFFECTIVE_BALANCE))) {\n-        validator.setActivation_eligibility_epoch(UnsignedLong.valueOf(GENESIS_EPOCH));\n-        validator.setActivation_epoch(UnsignedLong.valueOf(GENESIS_EPOCH));\n-      }\n+    if (index == null) {\n+      // Could be null if the deposit was invalid\n+      return;\n+    }\n+    Validator validator = state.getValidators().get(index);\n+    UnsignedLong balance = state.getBalances().get(index);\n+    UnsignedLong effective_balance =\n+        BeaconStateUtil.min(\n+            balance.minus(balance.mod(UnsignedLong.valueOf(EFFECTIVE_BALANCE_INCREMENT))),\n+            UnsignedLong.valueOf(MAX_EFFECTIVE_BALANCE));\n+    validator.setEffective_balance(effective_balance);\n+\n+    if (validator.getEffective_balance().equals(UnsignedLong.valueOf(MAX_EFFECTIVE_BALANCE))) {\n+      validator.setActivation_eligibility_epoch(UnsignedLong.valueOf(GENESIS_EPOCH));\n+      validator.setActivation_epoch(UnsignedLong.valueOf(GENESIS_EPOCH));\n     }\n   }\n \n"}}, {"oid": "cf91fba54bcbe86b25092eb9970b7ac78bd0af44", "url": "https://github.com/ConsenSys/teku/commit/cf91fba54bcbe86b25092eb9970b7ac78bd0af44", "message": "Merge branch 'master' into incremental-genesis", "committedDate": "2020-01-31T18:37:17Z", "type": "commit"}, {"oid": "765407163ee65e2c7e56eb5ea21c8c992a178f45", "url": "https://github.com/ConsenSys/teku/commit/765407163ee65e2c7e56eb5ea21c8c992a178f45", "message": "Fix imports.", "committedDate": "2020-01-31T19:48:08Z", "type": "commit"}, {"oid": "afff270b1c8be0ab1e2d8cc3d803ae7d3fec61f4", "url": "https://github.com/ConsenSys/teku/commit/afff270b1c8be0ab1e2d8cc3d803ae7d3fec61f4", "message": "Early exit.", "committedDate": "2020-01-31T19:49:01Z", "type": "commit"}]}