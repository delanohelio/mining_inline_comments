{"pr_number": 2045, "pr_title": "load eth1 deposits from storage on startup", "pr_createdAt": "2020-06-03T09:16:31Z", "pr_url": "https://github.com/ConsenSys/teku/pull/2045", "timeline": [{"oid": "1328c302bc6cd3fb547a63ec6a4ddd88c7d7af3a", "url": "https://github.com/ConsenSys/teku/commit/1328c302bc6cd3fb547a63ec6a4ddd88c7d7af3a", "message": "initial commit of startup change for deposit storage\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-06-03T09:15:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQyNjU4OA==", "url": "https://github.com/ConsenSys/teku/pull/2045#discussion_r434426588", "bodyText": "not a huge fan of this any ideas @ajsutton", "author": "rolfyone", "createdAt": "2020-06-03T09:17:20Z", "path": "pow/src/main/java/tech/pegasys/teku/pow/Eth1DepositManager.java", "diffHunk": "@@ -50,16 +50,13 @@ public Eth1DepositManager(\n     this.minimumGenesisTimeBlockFinder = minimumGenesisTimeBlockFinder;\n   }\n \n+  @SuppressWarnings(\"FutureReturnValueIgnored\")", "originalCommit": "1328c302bc6cd3fb547a63ec6a4ddd88c7d7af3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ4MzcxNA==", "url": "https://github.com/ConsenSys/teku/pull/2045#discussion_r434483714", "bodyText": "Will look through the PR properly in the morning, but yeah that's definitely wrong.  Need to find which future is being ignored and shove a .finish call on it at least to report any exceptions.", "author": "ajsutton", "createdAt": "2020-06-03T11:00:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQyNjU4OA=="}], "type": "inlineReview", "revised_code": {"commit": "5bc1e1e04efddc0d50cb3e50cccb5062577b4404", "chunk": "diff --git a/pow/src/main/java/tech/pegasys/teku/pow/Eth1DepositManager.java b/pow/src/main/java/tech/pegasys/teku/pow/Eth1DepositManager.java\nindex 4b40f1d785..4598f6fdf3 100644\n--- a/pow/src/main/java/tech/pegasys/teku/pow/Eth1DepositManager.java\n+++ b/pow/src/main/java/tech/pegasys/teku/pow/Eth1DepositManager.java\n\n@@ -34,18 +36,21 @@ public class Eth1DepositManager {\n   private final Eth1Provider eth1Provider;\n   private final AsyncRunner asyncRunner;\n   private final Eth1EventsChannel eth1EventsChannel;\n+  private final Eth1DepositStorageChannel eth1DepositStorageChannel;\n   private final DepositProcessingController depositProcessingController;\n   private final MinimumGenesisTimeBlockFinder minimumGenesisTimeBlockFinder;\n \n   public Eth1DepositManager(\n-      Eth1Provider eth1Provider,\n-      AsyncRunner asyncRunner,\n-      Eth1EventsChannel eth1EventsChannel,\n-      DepositProcessingController depositProcessingController,\n-      MinimumGenesisTimeBlockFinder minimumGenesisTimeBlockFinder) {\n+      final Eth1Provider eth1Provider,\n+      final AsyncRunner asyncRunner,\n+      final Eth1EventsChannel eth1EventsChannel,\n+      final Eth1DepositStorageChannel eth1DepositStorageChannel,\n+      final DepositProcessingController depositProcessingController,\n+      final MinimumGenesisTimeBlockFinder minimumGenesisTimeBlockFinder) {\n     this.eth1Provider = eth1Provider;\n     this.asyncRunner = asyncRunner;\n     this.eth1EventsChannel = eth1EventsChannel;\n+    this.eth1DepositStorageChannel = eth1DepositStorageChannel;\n     this.depositProcessingController = depositProcessingController;\n     this.minimumGenesisTimeBlockFinder = minimumGenesisTimeBlockFinder;\n   }\n"}}, {"oid": "5bc1e1e04efddc0d50cb3e50cccb5062577b4404", "url": "https://github.com/ConsenSys/teku/commit/5bc1e1e04efddc0d50cb3e50cccb5062577b4404", "message": "from changelist, got missed in commit.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-06-03T21:01:04Z", "type": "commit"}, {"oid": "1b4cea2302baced5a9b19c536bf8dc64f0a8ab59", "url": "https://github.com/ConsenSys/teku/commit/1b4cea2302baced5a9b19c536bf8dc64f0a8ab59", "message": "removed suppressWarnings annotations\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-06-03T21:35:41Z", "type": "commit"}, {"oid": "8f0cd14e8627a9f83ccfdd9f9c58287a7af66b2c", "url": "https://github.com/ConsenSys/teku/commit/8f0cd14e8627a9f83ccfdd9f9c58287a7af66b2c", "message": "add eth1-deposits-from-storage-enabled option, and disable by default.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-06-03T23:19:19Z", "type": "commit"}, {"oid": "2bcc3fc7cc75ce632a698162a68964de66cfd2d4", "url": "https://github.com/ConsenSys/teku/commit/2bcc3fc7cc75ce632a698162a68964de66cfd2d4", "message": "Merge remote-tracking branch 'upstream/master' into 1412-startup", "committedDate": "2020-06-03T23:20:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkzNjMzMg==", "url": "https://github.com/ConsenSys/teku/pull/2045#discussion_r434936332", "bodyText": "If the head block isn't after the start block number, we appear to not do anything and so never start tracking head. So even when the chain progresses past our start block we won't process any new blocks.\nI suspect we need a depositProcessingController.startSubscription(startBlockNumber) in the else case for this outer if.", "author": "ajsutton", "createdAt": "2020-06-04T01:05:48Z", "path": "pow/src/main/java/tech/pegasys/teku/pow/Eth1DepositManager.java", "diffHunk": "@@ -69,23 +70,55 @@ public void stop() {\n     depositProcessingController.stopIfSubscribed();\n   }\n \n-  private SafeFuture<Void> headBeforeMinGenesisMode(EthBlock.Block headBlock) {\n+  private SafeFuture<Void> processStart(\n+      final EthBlock.Block headBlock, final ReplayDepositsResult replayDepositsResult) {\n+    BigInteger startBlockNumber =\n+        replayDepositsResult.getBlockNumber().orElse(UnsignedLong.ZERO).bigIntegerValue();\n+    if (headBlock.getNumber().compareTo(startBlockNumber) > 0) {", "originalCommit": "2bcc3fc7cc75ce632a698162a68964de66cfd2d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk2OTMxMg==", "url": "https://github.com/ConsenSys/teku/pull/2045#discussion_r434969312", "bodyText": "good catch.", "author": "rolfyone", "createdAt": "2020-06-04T03:18:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkzNjMzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk4MDY0MQ==", "url": "https://github.com/ConsenSys/teku/pull/2045#discussion_r434980641", "bodyText": "So turns out I lied about the right solution.  If min genesis has already happened we need to run depositProcessingController.startSubscription(startBlockNumber) but if it hasn't we need to run preGenesisSubscription(startBlockNumber).", "author": "ajsutton", "createdAt": "2020-06-04T04:06:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkzNjMzMg=="}], "type": "inlineReview", "revised_code": {"commit": "1389616db8b7289cf2d56ec43379977d351eb5d1", "chunk": "diff --git a/pow/src/main/java/tech/pegasys/teku/pow/Eth1DepositManager.java b/pow/src/main/java/tech/pegasys/teku/pow/Eth1DepositManager.java\nindex 730b0f34c6..4c570a403b 100644\n--- a/pow/src/main/java/tech/pegasys/teku/pow/Eth1DepositManager.java\n+++ b/pow/src/main/java/tech/pegasys/teku/pow/Eth1DepositManager.java\n\n@@ -72,32 +72,31 @@ public class Eth1DepositManager {\n \n   private SafeFuture<Void> processStart(\n       final EthBlock.Block headBlock, final ReplayDepositsResult replayDepositsResult) {\n-    BigInteger startBlockNumber =\n-        replayDepositsResult.getBlockNumber().orElse(UnsignedLong.ZERO).bigIntegerValue();\n+    BigInteger startBlockNumber = replayDepositsResult.getBlockNumberOrZero();\n     if (headBlock.getNumber().compareTo(startBlockNumber) > 0) {\n       if (isBlockAfterMinGenesis(headBlock)) {\n         return headAfterMinGenesisMode(headBlock, replayDepositsResult);\n       } else {\n-        return headBeforeMinGenesisMode(headBlock, replayDepositsResult);\n+        return headBeforeMinGenesisMode(headBlock, startBlockNumber);\n       }\n     }\n+\n+    depositProcessingController.startSubscription(startBlockNumber);\n     return SafeFuture.COMPLETE;\n   }\n \n   private SafeFuture<Void> headBeforeMinGenesisMode(\n-      final EthBlock.Block headBlock, final ReplayDepositsResult replayDepositsResult) {\n+      final EthBlock.Block headBlock, final BigInteger startBlockNumber) {\n     LOG.debug(\"Eth1DepositsManager initiating head before genesis mode\");\n     BigInteger headBlockNumber = headBlock.getNumber();\n-    BigInteger startBlockNumber =\n-        replayDepositsResult.getBlockNumber().orElse(UnsignedLong.ZERO).bigIntegerValue();\n     if (startBlockNumber.compareTo(headBlockNumber) < 0) {\n       return depositProcessingController\n           .fetchDepositsInRange(startBlockNumber, headBlockNumber)\n           .thenRun(() -> preGenesisSubscription(headBlockNumber));\n-    } else {\n-      preGenesisSubscription(headBlockNumber);\n-      return SafeFuture.COMPLETE;\n     }\n+\n+    preGenesisSubscription(headBlockNumber);\n+    return SafeFuture.COMPLETE;\n   }\n \n   private void preGenesisSubscription(final BigInteger headBlockNumber) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkzNjgxOA==", "url": "https://github.com/ConsenSys/teku/pull/2045#discussion_r434936818", "bodyText": "We've got this logic in at least three places - probably worth either extracting a method for it or calculating up-front and passing the value down.", "author": "ajsutton", "createdAt": "2020-06-04T01:07:54Z", "path": "pow/src/main/java/tech/pegasys/teku/pow/Eth1DepositManager.java", "diffHunk": "@@ -69,23 +70,55 @@ public void stop() {\n     depositProcessingController.stopIfSubscribed();\n   }\n \n-  private SafeFuture<Void> headBeforeMinGenesisMode(EthBlock.Block headBlock) {\n+  private SafeFuture<Void> processStart(\n+      final EthBlock.Block headBlock, final ReplayDepositsResult replayDepositsResult) {\n+    BigInteger startBlockNumber =\n+        replayDepositsResult.getBlockNumber().orElse(UnsignedLong.ZERO).bigIntegerValue();", "originalCommit": "2bcc3fc7cc75ce632a698162a68964de66cfd2d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1389616db8b7289cf2d56ec43379977d351eb5d1", "chunk": "diff --git a/pow/src/main/java/tech/pegasys/teku/pow/Eth1DepositManager.java b/pow/src/main/java/tech/pegasys/teku/pow/Eth1DepositManager.java\nindex 730b0f34c6..4c570a403b 100644\n--- a/pow/src/main/java/tech/pegasys/teku/pow/Eth1DepositManager.java\n+++ b/pow/src/main/java/tech/pegasys/teku/pow/Eth1DepositManager.java\n\n@@ -72,32 +72,31 @@ public class Eth1DepositManager {\n \n   private SafeFuture<Void> processStart(\n       final EthBlock.Block headBlock, final ReplayDepositsResult replayDepositsResult) {\n-    BigInteger startBlockNumber =\n-        replayDepositsResult.getBlockNumber().orElse(UnsignedLong.ZERO).bigIntegerValue();\n+    BigInteger startBlockNumber = replayDepositsResult.getBlockNumberOrZero();\n     if (headBlock.getNumber().compareTo(startBlockNumber) > 0) {\n       if (isBlockAfterMinGenesis(headBlock)) {\n         return headAfterMinGenesisMode(headBlock, replayDepositsResult);\n       } else {\n-        return headBeforeMinGenesisMode(headBlock, replayDepositsResult);\n+        return headBeforeMinGenesisMode(headBlock, startBlockNumber);\n       }\n     }\n+\n+    depositProcessingController.startSubscription(startBlockNumber);\n     return SafeFuture.COMPLETE;\n   }\n \n   private SafeFuture<Void> headBeforeMinGenesisMode(\n-      final EthBlock.Block headBlock, final ReplayDepositsResult replayDepositsResult) {\n+      final EthBlock.Block headBlock, final BigInteger startBlockNumber) {\n     LOG.debug(\"Eth1DepositsManager initiating head before genesis mode\");\n     BigInteger headBlockNumber = headBlock.getNumber();\n-    BigInteger startBlockNumber =\n-        replayDepositsResult.getBlockNumber().orElse(UnsignedLong.ZERO).bigIntegerValue();\n     if (startBlockNumber.compareTo(headBlockNumber) < 0) {\n       return depositProcessingController\n           .fetchDepositsInRange(startBlockNumber, headBlockNumber)\n           .thenRun(() -> preGenesisSubscription(headBlockNumber));\n-    } else {\n-      preGenesisSubscription(headBlockNumber);\n-      return SafeFuture.COMPLETE;\n     }\n+\n+    preGenesisSubscription(headBlockNumber);\n+    return SafeFuture.COMPLETE;\n   }\n \n   private void preGenesisSubscription(final BigInteger headBlockNumber) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkzODA5MQ==", "url": "https://github.com/ConsenSys/teku/pull/2045#discussion_r434938091", "bodyText": "Switch java.util.function.Supplier instead of the google version.  It's only the package that needs to change.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import com.google.common.base.Supplier;\n          \n          \n            \n            import java.util.function.Supplier;", "author": "ajsutton", "createdAt": "2020-06-04T01:13:22Z", "path": "storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java", "diffHunk": "@@ -16,6 +16,7 @@\n import com.google.common.base.Supplier;", "originalCommit": "2bcc3fc7cc75ce632a698162a68964de66cfd2d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk2OTgxOA==", "url": "https://github.com/ConsenSys/teku/pull/2045#discussion_r434969818", "bodyText": "what about the Suppliers? use that from google still?", "author": "rolfyone", "createdAt": "2020-06-04T03:20:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkzODA5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk3MjU0OQ==", "url": "https://github.com/ConsenSys/teku/pull/2045#discussion_r434972549", "bodyText": "Yep that still comes from the google package.", "author": "ajsutton", "createdAt": "2020-06-04T03:31:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDkzODA5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "1389616db8b7289cf2d56ec43379977d351eb5d1", "chunk": "diff --git a/storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java b/storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java\nindex 48b0079141..bc975fcffe 100644\n--- a/storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java\n+++ b/storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java\n\n@@ -13,11 +13,11 @@\n \n package tech.pegasys.teku.storage.server;\n \n-import com.google.common.base.Supplier;\n import com.google.common.base.Suppliers;\n import com.google.common.primitives.UnsignedLong;\n import java.math.BigInteger;\n import java.util.Optional;\n+import java.util.function.Supplier;\n import java.util.stream.Stream;\n import tech.pegasys.teku.pow.api.Eth1EventsChannel;\n import tech.pegasys.teku.pow.event.DepositsFromBlockEvent;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk0MDQ4Ng==", "url": "https://github.com/ConsenSys/teku/pull/2045#discussion_r434940486", "bodyText": "nit: Couldn't we just have depositsComplete() return the ReplayDepositsResult?", "author": "ajsutton", "createdAt": "2020-06-04T01:23:09Z", "path": "storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java", "diffHunk": "@@ -52,27 +60,41 @@ public void stop() {}\n   }\n \n   private ReplayDepositsResult replayDeposits() {\n-    isSyncingFromDatabase = true;\n+    if (!eth1DepositsFromStorageEnabled) {\n+      startingBlock = Optional.of(BigInteger.valueOf(-1L));\n+      return new ReplayDepositsResult(UnsignedLong.ZERO, false);\n+    }\n+\n     final DepositSequencer depositSequencer =\n         new DepositSequencer(eth1EventsChannel, database.getMinGenesisTimeBlock());\n     try (Stream<DepositsFromBlockEvent> eventStream = database.streamDepositsFromBlocks()) {\n       eventStream.forEach(depositSequencer::depositEvent);\n     }\n     depositSequencer.depositsComplete();\n-    isSyncingFromDatabase = false;\n-    return depositSequencer.done();\n+    ReplayDepositsResult result = depositSequencer.done();", "originalCommit": "2bcc3fc7cc75ce632a698162a68964de66cfd2d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1389616db8b7289cf2d56ec43379977d351eb5d1", "chunk": "diff --git a/storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java b/storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java\nindex 48b0079141..bc975fcffe 100644\n--- a/storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java\n+++ b/storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java\n\n@@ -70,19 +70,17 @@ public class DepositStorage implements Eth1DepositStorageChannel, Eth1EventsChan\n     try (Stream<DepositsFromBlockEvent> eventStream = database.streamDepositsFromBlocks()) {\n       eventStream.forEach(depositSequencer::depositEvent);\n     }\n-    depositSequencer.depositsComplete();\n-    ReplayDepositsResult result = depositSequencer.done();\n-    if (result.getBlockNumber().isPresent()) {\n-      startingBlock =\n-          Optional.of(result.getBlockNumber().get().plus(UnsignedLong.ONE).bigIntegerValue());\n-    } else {\n-      startingBlock = Optional.of(BigInteger.valueOf(-1L));\n-    }\n+    ReplayDepositsResult result = depositSequencer.depositsComplete();\n+    startingBlock =\n+        result\n+            .getBlockNumber()\n+            .map(number -> number.plus(UnsignedLong.ONE).bigIntegerValue())\n+            .or(() -> Optional.of(BigInteger.valueOf(-1)));\n     return result;\n   }\n \n   private boolean shouldProcessEvent(final BigInteger blockNumber) {\n-    return startingBlock.isPresent() && startingBlock.get().compareTo(blockNumber) < 0;\n+    return startingBlock.map(block -> block.compareTo(blockNumber) < 0).orElse(false);\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk0MDg1Mg==", "url": "https://github.com/ConsenSys/teku/pull/2045#discussion_r434940852", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (result.getBlockNumber().isPresent()) {\n          \n          \n            \n                  startingBlock =\n          \n          \n            \n                      Optional.of(result.getBlockNumber().get().plus(UnsignedLong.ONE).bigIntegerValue());\n          \n          \n            \n                } else {\n          \n          \n            \n                  startingBlock = Optional.of(BigInteger.valueOf(-1L));\n          \n          \n            \n                }\n          \n          \n            \n                startingBlock =\n          \n          \n            \n                    result\n          \n          \n            \n                        .getBlockNumber()\n          \n          \n            \n                        .map(number -> number.plus(UnsignedLong.ONE).bigIntegerValue())\n          \n          \n            \n                        .or(() -> Optional.of(BigInteger.valueOf(-1)));", "author": "ajsutton", "createdAt": "2020-06-04T01:24:44Z", "path": "storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java", "diffHunk": "@@ -52,27 +60,41 @@ public void stop() {}\n   }\n \n   private ReplayDepositsResult replayDeposits() {\n-    isSyncingFromDatabase = true;\n+    if (!eth1DepositsFromStorageEnabled) {\n+      startingBlock = Optional.of(BigInteger.valueOf(-1L));\n+      return new ReplayDepositsResult(UnsignedLong.ZERO, false);\n+    }\n+\n     final DepositSequencer depositSequencer =\n         new DepositSequencer(eth1EventsChannel, database.getMinGenesisTimeBlock());\n     try (Stream<DepositsFromBlockEvent> eventStream = database.streamDepositsFromBlocks()) {\n       eventStream.forEach(depositSequencer::depositEvent);\n     }\n     depositSequencer.depositsComplete();\n-    isSyncingFromDatabase = false;\n-    return depositSequencer.done();\n+    ReplayDepositsResult result = depositSequencer.done();\n+    if (result.getBlockNumber().isPresent()) {\n+      startingBlock =\n+          Optional.of(result.getBlockNumber().get().plus(UnsignedLong.ONE).bigIntegerValue());\n+    } else {\n+      startingBlock = Optional.of(BigInteger.valueOf(-1L));\n+    }", "originalCommit": "2bcc3fc7cc75ce632a698162a68964de66cfd2d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1389616db8b7289cf2d56ec43379977d351eb5d1", "chunk": "diff --git a/storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java b/storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java\nindex 48b0079141..bc975fcffe 100644\n--- a/storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java\n+++ b/storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java\n\n@@ -70,19 +70,17 @@ public class DepositStorage implements Eth1DepositStorageChannel, Eth1EventsChan\n     try (Stream<DepositsFromBlockEvent> eventStream = database.streamDepositsFromBlocks()) {\n       eventStream.forEach(depositSequencer::depositEvent);\n     }\n-    depositSequencer.depositsComplete();\n-    ReplayDepositsResult result = depositSequencer.done();\n-    if (result.getBlockNumber().isPresent()) {\n-      startingBlock =\n-          Optional.of(result.getBlockNumber().get().plus(UnsignedLong.ONE).bigIntegerValue());\n-    } else {\n-      startingBlock = Optional.of(BigInteger.valueOf(-1L));\n-    }\n+    ReplayDepositsResult result = depositSequencer.depositsComplete();\n+    startingBlock =\n+        result\n+            .getBlockNumber()\n+            .map(number -> number.plus(UnsignedLong.ONE).bigIntegerValue())\n+            .or(() -> Optional.of(BigInteger.valueOf(-1)));\n     return result;\n   }\n \n   private boolean shouldProcessEvent(final BigInteger blockNumber) {\n-    return startingBlock.isPresent() && startingBlock.get().compareTo(blockNumber) < 0;\n+    return startingBlock.map(block -> block.compareTo(blockNumber) < 0).orElse(false);\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk0MTM4MQ==", "url": "https://github.com/ConsenSys/teku/pull/2045#discussion_r434941381", "bodyText": "This probably works out but the thread safety is questionable and it's causing IntelliJ to flag warnings.  Better would be to only load the current value of startingBlock once.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return startingBlock.isPresent() && startingBlock.get().compareTo(blockNumber) < 0;\n          \n          \n            \n                return startingBlock.map(block -> block.compareTo(blockNumber) < 0).orElse(false)", "author": "ajsutton", "createdAt": "2020-06-04T01:26:30Z", "path": "storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java", "diffHunk": "@@ -52,27 +60,41 @@ public void stop() {}\n   }\n \n   private ReplayDepositsResult replayDeposits() {\n-    isSyncingFromDatabase = true;\n+    if (!eth1DepositsFromStorageEnabled) {\n+      startingBlock = Optional.of(BigInteger.valueOf(-1L));\n+      return new ReplayDepositsResult(UnsignedLong.ZERO, false);\n+    }\n+\n     final DepositSequencer depositSequencer =\n         new DepositSequencer(eth1EventsChannel, database.getMinGenesisTimeBlock());\n     try (Stream<DepositsFromBlockEvent> eventStream = database.streamDepositsFromBlocks()) {\n       eventStream.forEach(depositSequencer::depositEvent);\n     }\n     depositSequencer.depositsComplete();\n-    isSyncingFromDatabase = false;\n-    return depositSequencer.done();\n+    ReplayDepositsResult result = depositSequencer.done();\n+    if (result.getBlockNumber().isPresent()) {\n+      startingBlock =\n+          Optional.of(result.getBlockNumber().get().plus(UnsignedLong.ONE).bigIntegerValue());\n+    } else {\n+      startingBlock = Optional.of(BigInteger.valueOf(-1L));\n+    }\n+    return result;\n+  }\n+\n+  private boolean shouldProcessEvent(final BigInteger blockNumber) {\n+    return startingBlock.isPresent() && startingBlock.get().compareTo(blockNumber) < 0;", "originalCommit": "2bcc3fc7cc75ce632a698162a68964de66cfd2d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk0MTY3Mg==", "url": "https://github.com/ConsenSys/teku/pull/2045#discussion_r434941672", "bodyText": "I'd be tempted to make this take an UnsignedLong as parameter and do the .bigIntegerValue() once in here instead of in the two places it's called.", "author": "ajsutton", "createdAt": "2020-06-04T01:27:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk0MTM4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "1389616db8b7289cf2d56ec43379977d351eb5d1", "chunk": "diff --git a/storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java b/storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java\nindex 48b0079141..bc975fcffe 100644\n--- a/storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java\n+++ b/storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java\n\n@@ -70,19 +70,17 @@ public class DepositStorage implements Eth1DepositStorageChannel, Eth1EventsChan\n     try (Stream<DepositsFromBlockEvent> eventStream = database.streamDepositsFromBlocks()) {\n       eventStream.forEach(depositSequencer::depositEvent);\n     }\n-    depositSequencer.depositsComplete();\n-    ReplayDepositsResult result = depositSequencer.done();\n-    if (result.getBlockNumber().isPresent()) {\n-      startingBlock =\n-          Optional.of(result.getBlockNumber().get().plus(UnsignedLong.ONE).bigIntegerValue());\n-    } else {\n-      startingBlock = Optional.of(BigInteger.valueOf(-1L));\n-    }\n+    ReplayDepositsResult result = depositSequencer.depositsComplete();\n+    startingBlock =\n+        result\n+            .getBlockNumber()\n+            .map(number -> number.plus(UnsignedLong.ONE).bigIntegerValue())\n+            .or(() -> Optional.of(BigInteger.valueOf(-1)));\n     return result;\n   }\n \n   private boolean shouldProcessEvent(final BigInteger blockNumber) {\n-    return startingBlock.isPresent() && startingBlock.get().compareTo(blockNumber) < 0;\n+    return startingBlock.map(block -> block.compareTo(blockNumber) < 0).orElse(false);\n   }\n \n   @Override\n"}}, {"oid": "1389616db8b7289cf2d56ec43379977d351eb5d1", "url": "https://github.com/ConsenSys/teku/commit/1389616db8b7289cf2d56ec43379977d351eb5d1", "message": "review feedback\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-06-04T04:03:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk4MDk1Ng==", "url": "https://github.com/ConsenSys/teku/pull/2045#discussion_r434980956", "bodyText": "nit: can use replayDepositsResult.getBockNumberOrZero() here too.", "author": "ajsutton", "createdAt": "2020-06-04T04:08:19Z", "path": "pow/src/main/java/tech/pegasys/teku/pow/Eth1DepositManager.java", "diffHunk": "@@ -94,9 +124,11 @@ public void stop() {\n   }\n \n   private SafeFuture<EthBlock.Block> sendDepositsUpToMinGenesis(\n-      final EthBlock.Block minGenesisTimeBlock) {\n+      final EthBlock.Block minGenesisTimeBlock, final ReplayDepositsResult replayDepositsResult) {\n+    BigInteger startBlockNumber =\n+        replayDepositsResult.getBlockNumber().orElse(UnsignedLong.ZERO).bigIntegerValue();", "originalCommit": "1389616db8b7289cf2d56ec43379977d351eb5d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b2c242cce889cc5c71f1b6a90fcf3aa9c184cfb3", "chunk": "diff --git a/pow/src/main/java/tech/pegasys/teku/pow/Eth1DepositManager.java b/pow/src/main/java/tech/pegasys/teku/pow/Eth1DepositManager.java\nindex 4c570a403b..bdb39228f0 100644\n--- a/pow/src/main/java/tech/pegasys/teku/pow/Eth1DepositManager.java\n+++ b/pow/src/main/java/tech/pegasys/teku/pow/Eth1DepositManager.java\n\n@@ -125,10 +129,9 @@ public class Eth1DepositManager {\n \n   private SafeFuture<EthBlock.Block> sendDepositsUpToMinGenesis(\n       final EthBlock.Block minGenesisTimeBlock, final ReplayDepositsResult replayDepositsResult) {\n-    BigInteger startBlockNumber =\n-        replayDepositsResult.getBlockNumber().orElse(UnsignedLong.ZERO).bigIntegerValue();\n     return depositProcessingController\n-        .fetchDepositsInRange(startBlockNumber, minGenesisTimeBlock.getNumber())\n+        .fetchDepositsInRange(\n+            replayDepositsResult.getBlockNumberOrZero(), minGenesisTimeBlock.getNumber())\n         .thenApply(__ -> minGenesisTimeBlock);\n   }\n \n"}}, {"oid": "b2c242cce889cc5c71f1b6a90fcf3aa9c184cfb3", "url": "https://github.com/ConsenSys/teku/commit/b2c242cce889cc5c71f1b6a90fcf3aa9c184cfb3", "message": "review feedback\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-06-04T04:48:40Z", "type": "commit"}, {"oid": "b254b1e52283afd37797f537d0395a0311fbdc07", "url": "https://github.com/ConsenSys/teku/commit/b254b1e52283afd37797f537d0395a0311fbdc07", "message": "Merge remote-tracking branch 'upstream/master' into 1412-startup", "committedDate": "2020-06-04T04:49:55Z", "type": "commit"}, {"oid": "4809254c9b040936a2bb918ee50bb259822df528", "url": "https://github.com/ConsenSys/teku/commit/4809254c9b040936a2bb918ee50bb259822df528", "message": "review feedback\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-06-04T05:26:33Z", "type": "commit"}]}