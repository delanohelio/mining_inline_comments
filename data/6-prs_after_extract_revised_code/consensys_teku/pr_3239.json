{"pr_number": 3239, "pr_title": "implement an SSZ state download `/teku/v1/beacon/blocks/:block_id/state`", "pr_createdAt": "2020-11-16T23:29:52Z", "pr_url": "https://github.com/ConsenSys/teku/pull/3239", "timeline": [{"oid": "de8be07c40d50bfce6df6b57568465f8d5a77020", "url": "https://github.com/ConsenSys/teku/commit/de8be07c40d50bfce6df6b57568465f8d5a77020", "message": "implement an SSZ state download `/teku/v1/beacon/blocks/:block_id/state`\n\n - allows the download of an SSZ state given a block root, which is helpful for weak subjectivity.\n\n - if slot, finalized, genesis, or head are specified, the behaviour is identical to `/teku/v1/beacon/states/:state_id`, but when a root is specified, it is the block root being specified rather than the state root.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-11-16T23:28:48Z", "type": "commit"}, {"oid": "6993fea07c24e4219029b259f8ea877726934320", "url": "https://github.com/ConsenSys/teku/commit/6993fea07c24e4219029b259f8ea877726934320", "message": "Merge remote-tracking branch 'upstream/master' into weak-subjectivity-state", "committedDate": "2020-11-16T23:29:02Z", "type": "commit"}, {"oid": "ef2b7fac4227b54faa197d2b4b0d59ead2555919", "url": "https://github.com/ConsenSys/teku/commit/ef2b7fac4227b54faa197d2b4b0d59ead2555919", "message": "Merge remote-tracking branch 'upstream/master' into weak-subjectivity-state", "committedDate": "2020-11-16T23:37:50Z", "type": "commit"}, {"oid": "629a89de20d3fa3ea0d532c84dd6842dc4ed4fb5", "url": "https://github.com/ConsenSys/teku/commit/629a89de20d3fa3ea0d532c84dd6842dc4ed4fb5", "message": "spotless\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-11-16T23:39:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc1MTc1OA==", "url": "https://github.com/ConsenSys/teku/pull/3239#discussion_r524751758", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  description = \"Download the state SSZ object for given identifier- by block root, keyword, or slot.\",\n          \n          \n            \n                  description = \"Download the state SSZ object for given identifier - by block root, keyword, or slot.\",", "author": "ajsutton", "createdAt": "2020-11-16T23:32:19Z", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/tekuv1/beacon/GetStateByBlockRoot.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.tekuv1.beacon;\n+\n+import static tech.pegasys.teku.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.PARAM_BLOCK_ID;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.PARAM_BLOCK_ID_DESCRIPTION;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_NOT_FOUND;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_SERVICE_UNAVAILABLE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.SERVICE_UNAVAILABLE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_TEKU;\n+import static tech.pegasys.teku.infrastructure.http.HttpStatusCodes.SC_NOT_FOUND;\n+\n+import io.javalin.core.util.Header;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.jetbrains.annotations.NotNull;\n+import tech.pegasys.teku.api.ChainDataProvider;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.response.StateSszResponse;\n+import tech.pegasys.teku.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetStateByBlockRoot implements Handler {\n+  public static final String ROUTE = \"/teku/v1/beacon/blocks/:block_id/state\";\n+  private final ChainDataProvider chainDataProvider;\n+  private final JsonProvider jsonProvider;\n+\n+  public GetStateByBlockRoot(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    this(dataProvider.getChainDataProvider(), jsonProvider);\n+  }\n+\n+  public GetStateByBlockRoot(\n+      final ChainDataProvider chainDataProvider, final JsonProvider jsonProvider) {\n+    this.jsonProvider = jsonProvider;\n+    this.chainDataProvider = chainDataProvider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get SSZ State By Block id\",\n+      tags = {TAG_TEKU},\n+      description = \"Download the state SSZ object for given identifier- by block root, keyword, or slot.\",", "originalCommit": "6993fea07c24e4219029b259f8ea877726934320", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "629a89de20d3fa3ea0d532c84dd6842dc4ed4fb5", "chunk": "diff --git a/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/tekuv1/beacon/GetStateByBlockRoot.java b/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/tekuv1/beacon/GetStateByBlockRoot.java\nindex 66c30d50e..0b83a8f9e 100644\n--- a/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/tekuv1/beacon/GetStateByBlockRoot.java\n+++ b/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/tekuv1/beacon/GetStateByBlockRoot.java\n\n@@ -63,7 +63,8 @@ public class GetStateByBlockRoot implements Handler {\n       method = HttpMethod.GET,\n       summary = \"Get SSZ State By Block id\",\n       tags = {TAG_TEKU},\n-      description = \"Download the state SSZ object for given identifier- by block root, keyword, or slot.\",\n+      description =\n+          \"Download the state SSZ object for given identifier- by block root, keyword, or slot.\",\n       pathParams = {@OpenApiParam(name = PARAM_BLOCK_ID, description = PARAM_BLOCK_ID_DESCRIPTION)},\n       responses = {\n         @OpenApiResponse(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc1MjM4NQ==", "url": "https://github.com/ConsenSys/teku/pull/3239#discussion_r524752385", "bodyText": "This could be cached if the block is finalized.  Not sure if its worth the effort though.", "author": "ajsutton", "createdAt": "2020-11-16T23:32:56Z", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/tekuv1/beacon/GetStateByBlockRoot.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.tekuv1.beacon;\n+\n+import static tech.pegasys.teku.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.PARAM_BLOCK_ID;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.PARAM_BLOCK_ID_DESCRIPTION;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_NOT_FOUND;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_SERVICE_UNAVAILABLE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.SERVICE_UNAVAILABLE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_TEKU;\n+import static tech.pegasys.teku.infrastructure.http.HttpStatusCodes.SC_NOT_FOUND;\n+\n+import io.javalin.core.util.Header;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.jetbrains.annotations.NotNull;\n+import tech.pegasys.teku.api.ChainDataProvider;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.response.StateSszResponse;\n+import tech.pegasys.teku.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetStateByBlockRoot implements Handler {\n+  public static final String ROUTE = \"/teku/v1/beacon/blocks/:block_id/state\";\n+  private final ChainDataProvider chainDataProvider;\n+  private final JsonProvider jsonProvider;\n+\n+  public GetStateByBlockRoot(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    this(dataProvider.getChainDataProvider(), jsonProvider);\n+  }\n+\n+  public GetStateByBlockRoot(\n+      final ChainDataProvider chainDataProvider, final JsonProvider jsonProvider) {\n+    this.jsonProvider = jsonProvider;\n+    this.chainDataProvider = chainDataProvider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get SSZ State By Block id\",\n+      tags = {TAG_TEKU},\n+      description = \"Download the state SSZ object for given identifier- by block root, keyword, or slot.\",\n+      pathParams = {@OpenApiParam(name = PARAM_BLOCK_ID, description = PARAM_BLOCK_ID_DESCRIPTION)},\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            content = @OpenApiContent(type = \"application/octet-stream\")),\n+        @OpenApiResponse(status = RES_BAD_REQUEST),\n+        @OpenApiResponse(status = RES_NOT_FOUND),\n+        @OpenApiResponse(status = RES_INTERNAL_ERROR),\n+        @OpenApiResponse(status = RES_SERVICE_UNAVAILABLE, description = SERVICE_UNAVAILABLE)\n+      })\n+  @Override\n+  public void handle(@NotNull final Context ctx) throws Exception {\n+    final Map<String, String> pathParamMap = ctx.pathParamMap();\n+    ctx.header(Header.CACHE_CONTROL, CACHE_NONE);", "originalCommit": "6993fea07c24e4219029b259f8ea877726934320", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "629a89de20d3fa3ea0d532c84dd6842dc4ed4fb5", "chunk": "diff --git a/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/tekuv1/beacon/GetStateByBlockRoot.java b/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/tekuv1/beacon/GetStateByBlockRoot.java\nindex 66c30d50e..0b83a8f9e 100644\n--- a/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/tekuv1/beacon/GetStateByBlockRoot.java\n+++ b/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/tekuv1/beacon/GetStateByBlockRoot.java\n\n@@ -63,7 +63,8 @@ public class GetStateByBlockRoot implements Handler {\n       method = HttpMethod.GET,\n       summary = \"Get SSZ State By Block id\",\n       tags = {TAG_TEKU},\n-      description = \"Download the state SSZ object for given identifier- by block root, keyword, or slot.\",\n+      description =\n+          \"Download the state SSZ object for given identifier- by block root, keyword, or slot.\",\n       pathParams = {@OpenApiParam(name = PARAM_BLOCK_ID, description = PARAM_BLOCK_ID_DESCRIPTION)},\n       responses = {\n         @OpenApiResponse(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc1NjczNA==", "url": "https://github.com/ConsenSys/teku/pull/3239#discussion_r524756734", "bodyText": "Feels odd to be calling ctx.result twice rather than just returning the serialised JSON.  You'd have to make it future.<Object>thenApplyChecked above I believe.\nThough the result javadoc does say it overwrites the existing result so I guess it works...", "author": "ajsutton", "createdAt": "2020-11-16T23:37:16Z", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/tekuv1/beacon/GetStateByBlockRoot.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.tekuv1.beacon;\n+\n+import static tech.pegasys.teku.beaconrestapi.CacheControlUtils.CACHE_NONE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.PARAM_BLOCK_ID;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.PARAM_BLOCK_ID_DESCRIPTION;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_NOT_FOUND;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_SERVICE_UNAVAILABLE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.SERVICE_UNAVAILABLE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_TEKU;\n+import static tech.pegasys.teku.infrastructure.http.HttpStatusCodes.SC_NOT_FOUND;\n+\n+import io.javalin.core.util.Header;\n+import io.javalin.http.Context;\n+import io.javalin.http.Handler;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.jetbrains.annotations.NotNull;\n+import tech.pegasys.teku.api.ChainDataProvider;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.response.StateSszResponse;\n+import tech.pegasys.teku.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.provider.JsonProvider;\n+\n+public class GetStateByBlockRoot implements Handler {\n+  public static final String ROUTE = \"/teku/v1/beacon/blocks/:block_id/state\";\n+  private final ChainDataProvider chainDataProvider;\n+  private final JsonProvider jsonProvider;\n+\n+  public GetStateByBlockRoot(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    this(dataProvider.getChainDataProvider(), jsonProvider);\n+  }\n+\n+  public GetStateByBlockRoot(\n+      final ChainDataProvider chainDataProvider, final JsonProvider jsonProvider) {\n+    this.jsonProvider = jsonProvider;\n+    this.chainDataProvider = chainDataProvider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get SSZ State By Block id\",\n+      tags = {TAG_TEKU},\n+      description = \"Download the state SSZ object for given identifier- by block root, keyword, or slot.\",\n+      pathParams = {@OpenApiParam(name = PARAM_BLOCK_ID, description = PARAM_BLOCK_ID_DESCRIPTION)},\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            content = @OpenApiContent(type = \"application/octet-stream\")),\n+        @OpenApiResponse(status = RES_BAD_REQUEST),\n+        @OpenApiResponse(status = RES_NOT_FOUND),\n+        @OpenApiResponse(status = RES_INTERNAL_ERROR),\n+        @OpenApiResponse(status = RES_SERVICE_UNAVAILABLE, description = SERVICE_UNAVAILABLE)\n+      })\n+  @Override\n+  public void handle(@NotNull final Context ctx) throws Exception {\n+    final Map<String, String> pathParamMap = ctx.pathParamMap();\n+    ctx.header(Header.CACHE_CONTROL, CACHE_NONE);\n+\n+    SafeFuture<Optional<StateSszResponse>> future =\n+        chainDataProvider.getBeaconStateSszByBlockRoot(pathParamMap.get(PARAM_BLOCK_ID));\n+    ctx.result(\n+        future.thenApplyChecked(\n+            result -> {\n+              if (result.isEmpty()) {\n+                ctx.status(SC_NOT_FOUND);\n+                ctx.result(\n+                    BadRequest.serialize(\n+                        jsonProvider,\n+                        SC_NOT_FOUND,\n+                        \"State by block root not found: \" + pathParamMap.get(PARAM_BLOCK_ID)));", "originalCommit": "6993fea07c24e4219029b259f8ea877726934320", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc2NDk0Mw==", "url": "https://github.com/ConsenSys/teku/pull/3239#discussion_r524764943", "bodyText": "yep it should just return the string. fixed", "author": "rolfyone", "createdAt": "2020-11-16T23:45:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc1NjczNA=="}], "type": "inlineReview", "revised_code": {"commit": "629a89de20d3fa3ea0d532c84dd6842dc4ed4fb5", "chunk": "diff --git a/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/tekuv1/beacon/GetStateByBlockRoot.java b/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/tekuv1/beacon/GetStateByBlockRoot.java\nindex 66c30d50e..0b83a8f9e 100644\n--- a/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/tekuv1/beacon/GetStateByBlockRoot.java\n+++ b/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/tekuv1/beacon/GetStateByBlockRoot.java\n\n@@ -63,7 +63,8 @@ public class GetStateByBlockRoot implements Handler {\n       method = HttpMethod.GET,\n       summary = \"Get SSZ State By Block id\",\n       tags = {TAG_TEKU},\n-      description = \"Download the state SSZ object for given identifier- by block root, keyword, or slot.\",\n+      description =\n+          \"Download the state SSZ object for given identifier- by block root, keyword, or slot.\",\n       pathParams = {@OpenApiParam(name = PARAM_BLOCK_ID, description = PARAM_BLOCK_ID_DESCRIPTION)},\n       responses = {\n         @OpenApiResponse(\n"}}, {"oid": "df76758ff535f492d709d9b81a925dcb8ba08687", "url": "https://github.com/ConsenSys/teku/commit/df76758ff535f492d709d9b81a925dcb8ba08687", "message": "review feedback\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-11-17T00:01:15Z", "type": "commit"}, {"oid": "57d887f134f7b8f1b8a32d5f6b5284ef4c7db934", "url": "https://github.com/ConsenSys/teku/commit/57d887f134f7b8f1b8a32d5f6b5284ef4c7db934", "message": "Merge remote-tracking branch 'upstream/master' into weak-subjectivity-state", "committedDate": "2020-11-17T00:02:51Z", "type": "commit"}, {"oid": "648f83b4ac2144e38eef769abb248afaeedb464f", "url": "https://github.com/ConsenSys/teku/commit/648f83b4ac2144e38eef769abb248afaeedb464f", "message": "Merge remote-tracking branch 'upstream/master' into weak-subjectivity-state", "committedDate": "2020-11-17T00:05:02Z", "type": "commit"}]}