{"pr_number": 2389, "pr_title": "add and maintain state by state root table in hot database.", "pr_createdAt": "2020-07-20T04:34:56Z", "pr_url": "https://github.com/ConsenSys/teku/pull/2389", "timeline": [{"oid": "6b352a5b91178edf930d1cb3cc08076dd21b53bb", "url": "https://github.com/ConsenSys/teku/commit/6b352a5b91178edf930d1cb3cc08076dd21b53bb", "message": "add and maintain state by state root table in hot database.\n\n - added tests to show slots missing blocks get added\n\n - update getState to allow search by state root, currently will only work for hot states.\n\n - state by state root table is cleaned up periodically.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-07-20T04:34:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA0NjkxOQ==", "url": "https://github.com/ConsenSys/teku/pull/2389#discussion_r457046919", "bodyText": "nit: Probably not the most accurate name.  Maybe just putStateRoot?", "author": "ajsutton", "createdAt": "2020-07-20T04:49:16Z", "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/forkchoice/MutableStore.java", "diffHunk": "@@ -27,6 +29,8 @@ default void putBlockAndState(SignedBlockAndState blockAndState) {\n     putBlockAndState(blockAndState.getBlock(), blockAndState.getState());\n   }\n \n+  void putStateRootToBlockRoot(Bytes32 stateRoot, SlotAndBlockRoot slotAndBlockRoot);", "originalCommit": "6b352a5b91178edf930d1cb3cc08076dd21b53bb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b9cca5442541aa7316976199dc82bd9b2a08009f", "chunk": "diff --git a/ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/forkchoice/MutableStore.java b/ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/forkchoice/MutableStore.java\nindex a66c1391ba..7dd28bc024 100644\n--- a/ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/forkchoice/MutableStore.java\n+++ b/ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/forkchoice/MutableStore.java\n\n@@ -29,7 +29,7 @@ public interface MutableStore extends ReadOnlyStore {\n     putBlockAndState(blockAndState.getBlock(), blockAndState.getState());\n   }\n \n-  void putStateRootToBlockRoot(Bytes32 stateRoot, SlotAndBlockRoot slotAndBlockRoot);\n+  void putStateRoot(Bytes32 stateRoot, SlotAndBlockRoot slotAndBlockRoot);\n \n   void setTime(UnsignedLong time);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA0NzgyOA==", "url": "https://github.com/ConsenSys/teku/pull/2389#discussion_r457047828", "bodyText": "nit: inline variable.", "author": "ajsutton", "createdAt": "2020-07-20T04:51:26Z", "path": "storage/src/main/java/tech/pegasys/teku/storage/client/CombinedChainDataClient.java", "diffHunk": "@@ -187,6 +202,45 @@ public boolean isFinalizedEpoch(final UnsignedLong epoch) {\n     return historicalChainData.getFinalizedStateByBlockRoot(blockRoot);\n   }\n \n+  public SafeFuture<Optional<BeaconState>> getStateByStateRoot(final Bytes32 stateRoot) {\n+    final UpdatableStore store = getStore();\n+    if (store == null) {\n+      LOG.trace(\"No state at stateRoot {} because the store is not set\", stateRoot);\n+      return STATE_NOT_AVAILABLE;\n+    }\n+    return historicalChainData\n+        .getSlotAndBlockRootByStateRoot(stateRoot)\n+        .thenCompose(\n+            maybeSlotAndBlockRoot -> {\n+              if (maybeSlotAndBlockRoot.isEmpty()) {\n+                return STATE_NOT_AVAILABLE;\n+              }\n+              return getStateFromSlotAndBlock(maybeSlotAndBlockRoot.get());\n+            });\n+  }\n+\n+  private SafeFuture<Optional<BeaconState>> getStateFromSlotAndBlock(\n+      final SlotAndBlockRoot slotAndBlockRoot) {\n+    return getStateByBlockRoot(slotAndBlockRoot.getBlockRoot())\n+        .thenApply(\n+            maybeState ->\n+                maybeState.map(\n+                    preState -> regenerateBeaconState(preState, slotAndBlockRoot.getSlot())));\n+  }\n+\n+  private BeaconState regenerateBeaconState(final BeaconState preState, final UnsignedLong slot) {\n+    if (preState.getSlot().equals(slot)) {\n+      return preState;\n+    }\n+    try {\n+      final BeaconState desiredState = stateTransition.process_slots(preState, slot);\n+      return desiredState;", "originalCommit": "6b352a5b91178edf930d1cb3cc08076dd21b53bb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2b3b586d27fa71b4111bbce3d0a44fd0cda63255", "chunk": "diff --git a/storage/src/main/java/tech/pegasys/teku/storage/client/CombinedChainDataClient.java b/storage/src/main/java/tech/pegasys/teku/storage/client/CombinedChainDataClient.java\nindex a7c8145104..b3878b8f49 100644\n--- a/storage/src/main/java/tech/pegasys/teku/storage/client/CombinedChainDataClient.java\n+++ b/storage/src/main/java/tech/pegasys/teku/storage/client/CombinedChainDataClient.java\n\n@@ -202,42 +206,19 @@ public class CombinedChainDataClient {\n     return historicalChainData.getFinalizedStateByBlockRoot(blockRoot);\n   }\n \n-  public SafeFuture<Optional<BeaconState>> getStateByStateRoot(final Bytes32 stateRoot) {\n-    final UpdatableStore store = getStore();\n-    if (store == null) {\n-      LOG.trace(\"No state at stateRoot {} because the store is not set\", stateRoot);\n-      return STATE_NOT_AVAILABLE;\n-    }\n-    return historicalChainData\n-        .getSlotAndBlockRootByStateRoot(stateRoot)\n-        .thenCompose(\n-            maybeSlotAndBlockRoot -> {\n-              if (maybeSlotAndBlockRoot.isEmpty()) {\n-                return STATE_NOT_AVAILABLE;\n-              }\n-              return getStateFromSlotAndBlock(maybeSlotAndBlockRoot.get());\n-            });\n-  }\n-\n-  private SafeFuture<Optional<BeaconState>> getStateFromSlotAndBlock(\n-      final SlotAndBlockRoot slotAndBlockRoot) {\n-    return getStateByBlockRoot(slotAndBlockRoot.getBlockRoot())\n-        .thenApply(\n-            maybeState ->\n-                maybeState.map(\n-                    preState -> regenerateBeaconState(preState, slotAndBlockRoot.getSlot())));\n-  }\n-\n-  private BeaconState regenerateBeaconState(final BeaconState preState, final UnsignedLong slot) {\n+  private Optional<BeaconState> regenerateBeaconState(\n+      final BeaconState preState, final UnsignedLong slot) {\n     if (preState.getSlot().equals(slot)) {\n-      return preState;\n+      return Optional.of(preState);\n+    } else if (slot.compareTo(getBestSlot()) > 0) {\n+      LOG.debug(\"Attempted to wind forward to a future state: {}\", slot.toString());\n+      return Optional.empty();\n     }\n     try {\n-      final BeaconState desiredState = stateTransition.process_slots(preState, slot);\n-      return desiredState;\n+      return Optional.of(stateTransition.process_slots(preState, slot));\n     } catch (SlotProcessingException | EpochProcessingException | IllegalArgumentException e) {\n-      LOG.warn(\"State Transition error\", e);\n-      throw new IllegalStateException();\n+      LOG.debug(\"State Transition error\", e);\n+      return Optional.empty();\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA1MDEyNQ==", "url": "https://github.com/ConsenSys/teku/pull/2389#discussion_r457050125", "bodyText": "We should probably either name this to be clear that it only contains state roots for empty slots or update StateTransition to also put the state root after each processed block. I kind of like the idea of StateTransition putting all states and then you can avoid iterating through the hot blocks in RocksDbDatabase to record their state roots.  Either way is fine though - not sure if there are potential issues with doing it in StateTransition.", "author": "ajsutton", "createdAt": "2020-07-20T04:56:27Z", "path": "storage/src/main/java/tech/pegasys/teku/storage/events/StorageUpdate.java", "diffHunk": "@@ -106,4 +110,8 @@ public boolean isEmpty() {\n   public Map<UnsignedLong, VoteTracker> getVotes() {\n     return votes;\n   }\n+\n+  public Map<Bytes32, SlotAndBlockRoot> getStateRootsToBlockRoots() {\n+    return stateRootsToBlockRoots;\n+  }", "originalCommit": "6b352a5b91178edf930d1cb3cc08076dd21b53bb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUxNTIyOQ==", "url": "https://github.com/ConsenSys/teku/pull/2389#discussion_r458515229", "bodyText": "its now called stateRoots and everything that's putting into the hot storage is putting into that list, so hopefully i've resolved this comment.", "author": "rolfyone", "createdAt": "2020-07-22T03:40:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA1MDEyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "b9cca5442541aa7316976199dc82bd9b2a08009f", "chunk": "diff --git a/storage/src/main/java/tech/pegasys/teku/storage/events/StorageUpdate.java b/storage/src/main/java/tech/pegasys/teku/storage/events/StorageUpdate.java\nindex e2cdebc24e..49e7905ca4 100644\n--- a/storage/src/main/java/tech/pegasys/teku/storage/events/StorageUpdate.java\n+++ b/storage/src/main/java/tech/pegasys/teku/storage/events/StorageUpdate.java\n\n@@ -111,7 +112,7 @@ public class StorageUpdate {\n     return votes;\n   }\n \n-  public Map<Bytes32, SlotAndBlockRoot> getStateRootsToBlockRoots() {\n-    return stateRootsToBlockRoots;\n+  public Map<Bytes32, SlotAndBlockRoot> getStateRoots() {\n+    return stateRoots;\n   }\n }\n"}}, {"oid": "2b3b586d27fa71b4111bbce3d0a44fd0cda63255", "url": "https://github.com/ConsenSys/teku/commit/2b3b586d27fa71b4111bbce3d0a44fd0cda63255", "message": "Merge remote-tracking branch 'upstream/master' into 2184-hotblock-stateroot-lookups", "committedDate": "2020-07-21T20:10:37Z", "type": "commit"}, {"oid": "b9cca5442541aa7316976199dc82bd9b2a08009f", "url": "https://github.com/ConsenSys/teku/commit/b9cca5442541aa7316976199dc82bd9b2a08009f", "message": "hot state roots now map to the correct block root.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-07-22T03:25:47Z", "type": "commit"}, {"oid": "52d81500c9894f530d7c5577e83b00de076dfe20", "url": "https://github.com/ConsenSys/teku/commit/52d81500c9894f530d7c5577e83b00de076dfe20", "message": "Merge remote-tracking branch 'upstream/master' into 2184-hotblock-stateroot-lookups", "committedDate": "2020-07-22T03:38:25Z", "type": "commit"}, {"oid": "b73552155ce9b04055a83cfdc55a301b52097f14", "url": "https://github.com/ConsenSys/teku/commit/b73552155ce9b04055a83cfdc55a301b52097f14", "message": "these test cases are covered fairly easily at the ChainDataProvider layer, so i'm removing these to cut down on duplication.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-07-22T03:50:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUyMDI4NQ==", "url": "https://github.com/ConsenSys/teku/pull/2389#discussion_r458520285", "bodyText": "Mocking BeaconChainUtil is unexpected given its a test util class. I think I'd just always use the real BeaconChainUtil. The only place it's used is for the non-mock version anyway.", "author": "ajsutton", "createdAt": "2020-07-22T04:01:05Z", "path": "data/beaconrestapi/src/integration-test/java/tech/pegasys/teku/beaconrestapi/AbstractDataBackedRestAPIIntegrationTest.java", "diffHunk": "@@ -109,10 +112,13 @@ private void setupStorage(final StorageSystem storageSystem, final boolean useMo\n     recentChainData = storageSystem.recentChainData();\n     chainBuilder = ChainBuilder.create(VALIDATOR_KEYS);\n     chainUpdater = new ChainUpdater(recentChainData, chainBuilder);\n-    this.forkChoice =\n-        useMockForkChoice\n-            ? mock(ForkChoice.class)\n-            : new ForkChoice(recentChainData, stateTransition);\n+    if (useMockForkChoice) {\n+      beaconChainUtil = mock(BeaconChainUtil.class);", "originalCommit": "b73552155ce9b04055a83cfdc55a301b52097f14", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUyOTE3OQ==", "url": "https://github.com/ConsenSys/teku/pull/2389#discussion_r458529179", "bodyText": "its only while mocking the fork choice so that tests pass, otherwise the 'not ready' tests fail... i can investigate if there's another way to do this...", "author": "rolfyone", "createdAt": "2020-07-22T04:36:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUyMDI4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUzMDk5NA==", "url": "https://github.com/ConsenSys/teku/pull/2389#discussion_r458530994", "bodyText": "They passed when I ran them with the change.  Which ones were failing for you?", "author": "ajsutton", "createdAt": "2020-07-22T04:44:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUyMDI4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUzMTEzNw==", "url": "https://github.com/ConsenSys/teku/pull/2389#discussion_r458531137", "bodyText": "There's only a couple of tests that ever call the method that uses beaconChainUtil - the others should be unaffected (we'd still mock FockChoice just not BeaconChainUtil.", "author": "ajsutton", "createdAt": "2020-07-22T04:45:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUyMDI4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "1f265c7bd7caf8300f72d1b911e5061b7f0de7b9", "chunk": "diff --git a/data/beaconrestapi/src/integration-test/java/tech/pegasys/teku/beaconrestapi/AbstractDataBackedRestAPIIntegrationTest.java b/data/beaconrestapi/src/integration-test/java/tech/pegasys/teku/beaconrestapi/AbstractDataBackedRestAPIIntegrationTest.java\nindex a86c8ee922..d06830b266 100644\n--- a/data/beaconrestapi/src/integration-test/java/tech/pegasys/teku/beaconrestapi/AbstractDataBackedRestAPIIntegrationTest.java\n+++ b/data/beaconrestapi/src/integration-test/java/tech/pegasys/teku/beaconrestapi/AbstractDataBackedRestAPIIntegrationTest.java\n\n@@ -112,13 +112,12 @@ public abstract class AbstractDataBackedRestAPIIntegrationTest {\n     recentChainData = storageSystem.recentChainData();\n     chainBuilder = ChainBuilder.create(VALIDATOR_KEYS);\n     chainUpdater = new ChainUpdater(recentChainData, chainBuilder);\n-    if (useMockForkChoice) {\n-      beaconChainUtil = mock(BeaconChainUtil.class);\n-      forkChoice = mock(ForkChoice.class);\n-    } else {\n-      beaconChainUtil = BeaconChainUtil.create(recentChainData, chainBuilder.getValidatorKeys());\n-      forkChoice = new ForkChoice(recentChainData, stateTransition);\n-    }\n+    forkChoice =\n+        useMockForkChoice\n+            ? mock(ForkChoice.class)\n+            : new ForkChoice(recentChainData, stateTransition);\n+    beaconChainUtil =\n+        BeaconChainUtil.create(recentChainData, chainBuilder.getValidatorKeys(), forkChoice, true);\n   }\n \n   private void setupAndStartRestAPI(TekuConfiguration config) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODUyNjUzMQ==", "url": "https://github.com/ConsenSys/teku/pull/2389#discussion_r458526531", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        maybeSlotAndBlockRoot -> {\n          \n          \n            \n                          if (maybeSlotAndBlockRoot.isEmpty()) {\n          \n          \n            \n                            return STATE_NOT_AVAILABLE;\n          \n          \n            \n                          }\n          \n          \n            \n                          return getStateFromSlotAndBlock(maybeSlotAndBlockRoot.get());\n          \n          \n            \n                        });\n          \n          \n            \n                        maybeSlotAndBlockRoot ->\n          \n          \n            \n                            maybeSlotAndBlockRoot\n          \n          \n            \n                                .map(this::getStateFromSlotAndBlock)\n          \n          \n            \n                                .orElse(STATE_NOT_AVAILABLE));\n          \n          \n            \n                        });", "author": "ajsutton", "createdAt": "2020-07-22T04:26:19Z", "path": "storage/src/main/java/tech/pegasys/teku/storage/client/CombinedChainDataClient.java", "diffHunk": "@@ -205,6 +206,32 @@ public boolean isFinalizedEpoch(final UnsignedLong epoch) {\n     return historicalChainData.getFinalizedStateByBlockRoot(blockRoot);\n   }\n \n+  public SafeFuture<Optional<BeaconState>> getStateByStateRoot(final Bytes32 stateRoot) {\n+    final UpdatableStore store = getStore();\n+    if (store == null) {\n+      LOG.trace(\"No state at stateRoot {} because the store is not set\", stateRoot);\n+      return STATE_NOT_AVAILABLE;\n+    }\n+    return historicalChainData\n+        .getSlotAndBlockRootByStateRoot(stateRoot)\n+        .thenCompose(\n+            maybeSlotAndBlockRoot -> {\n+              if (maybeSlotAndBlockRoot.isEmpty()) {\n+                return STATE_NOT_AVAILABLE;\n+              }\n+              return getStateFromSlotAndBlock(maybeSlotAndBlockRoot.get());\n+            });", "originalCommit": "b73552155ce9b04055a83cfdc55a301b52097f14", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1f265c7bd7caf8300f72d1b911e5061b7f0de7b9", "chunk": "diff --git a/storage/src/main/java/tech/pegasys/teku/storage/client/CombinedChainDataClient.java b/storage/src/main/java/tech/pegasys/teku/storage/client/CombinedChainDataClient.java\nindex 9f1df0d8b5..b97d178b61 100644\n--- a/storage/src/main/java/tech/pegasys/teku/storage/client/CombinedChainDataClient.java\n+++ b/storage/src/main/java/tech/pegasys/teku/storage/client/CombinedChainDataClient.java\n\n@@ -215,12 +215,10 @@ public class CombinedChainDataClient {\n     return historicalChainData\n         .getSlotAndBlockRootByStateRoot(stateRoot)\n         .thenCompose(\n-            maybeSlotAndBlockRoot -> {\n-              if (maybeSlotAndBlockRoot.isEmpty()) {\n-                return STATE_NOT_AVAILABLE;\n-              }\n-              return getStateFromSlotAndBlock(maybeSlotAndBlockRoot.get());\n-            });\n+            maybeSlotAndBlockRoot ->\n+                maybeSlotAndBlockRoot\n+                    .map(this::getStateFromSlotAndBlock)\n+                    .orElse(STATE_NOT_AVAILABLE));\n   }\n \n   private SafeFuture<Optional<BeaconState>> getStateFromSlotAndBlock(\n"}}, {"oid": "95f89f9ccebbcc29bc3021967c9c46e7c24c97fe", "url": "https://github.com/ConsenSys/teku/commit/95f89f9ccebbcc29bc3021967c9c46e7c24c97fe", "message": "moved SlotAndBlockRoot to :ethereum:datastructures to remove the dependency on :storage:api\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-07-22T05:06:01Z", "type": "commit"}, {"oid": "1f265c7bd7caf8300f72d1b911e5061b7f0de7b9", "url": "https://github.com/ConsenSys/teku/commit/1f265c7bd7caf8300f72d1b911e5061b7f0de7b9", "message": "review feedback.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-07-22T05:52:52Z", "type": "commit"}, {"oid": "c3ab066b19b0cd524d5f33e450e62ca115261030", "url": "https://github.com/ConsenSys/teku/commit/c3ab066b19b0cd524d5f33e450e62ca115261030", "message": "Merge remote-tracking branch 'upstream/master' into 2184-hotblock-stateroot-lookups", "committedDate": "2020-07-22T06:04:24Z", "type": "commit"}]}