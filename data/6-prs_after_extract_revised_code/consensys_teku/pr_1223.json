{"pr_number": 1223, "pr_title": "Allow query by slot number on the /beacon/state endpoint.", "pr_createdAt": "2020-02-24T22:54:03Z", "pr_url": "https://github.com/ConsenSys/teku/pull/1223", "timeline": [{"oid": "007babd0725b10823d4ef060cacbbe0be8ccd5a1", "url": "https://github.com/ConsenSys/teku/commit/007babd0725b10823d4ef060cacbbe0be8ccd5a1", "message": "Allow query by slot number on the /beacon/state endpoint.\n\nAddresses #1184\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-02-24T22:52:51Z", "type": "commit"}, {"oid": "68fd5990dd31c49e391aeebbffb42b8e0764cecd", "url": "https://github.com/ConsenSys/teku/commit/68fd5990dd31c49e391aeebbffb42b8e0764cecd", "message": "Merge remote-tracking branch 'upstream/master' into 1184-state-retrieval-by-slot\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-02-25T00:40:08Z", "type": "commit"}, {"oid": "8e2432703bf45fa2c4441ba7d5bc2fd72592d6a8", "url": "https://github.com/ConsenSys/teku/commit/8e2432703bf45fa2c4441ba7d5bc2fd72592d6a8", "message": "cleanup\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-02-25T00:54:39Z", "type": "commit"}, {"oid": "ed48dc22e23be64a435e0268001f1db00cc8fac2", "url": "https://github.com/ConsenSys/teku/commit/ed48dc22e23be64a435e0268001f1db00cc8fac2", "message": "add test cases\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-02-25T02:04:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0OTczNw==", "url": "https://github.com/ConsenSys/teku/pull/1223#discussion_r383649737", "bodyText": "As something to work towards, it makes sense to me that the REST-APIs would only have a CombinedChainDataClient. It contains both current and historical data so just a matter of ensuring it has the right methods to delegate through.  Then the REST APIs never need to worry about whether something has been finalised or not as they always use the same API.", "author": "ajsutton", "createdAt": "2020-02-25T04:12:50Z", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/BeaconRestApi.java", "diffHunk": "@@ -52,11 +53,12 @@ private void initialise(\n       ChainStorageClient chainStorageClient,\n       P2PNetwork<?> p2pNetwork,\n       HistoricalChainData historicalChainData,\n+      CombinedChainDataClient combinedChainDataClient,\n       final int requestedPortNumber) {\n     app.server().setServerPort(requestedPortNumber);\n \n     addNodeHandlers(chainStorageClient);\n-    addBeaconHandlers(chainStorageClient, historicalChainData);\n+    addBeaconHandlers(chainStorageClient, historicalChainData, combinedChainDataClient);", "originalCommit": "ed48dc22e23be64a435e0268001f1db00cc8fac2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc3NjE4Ng==", "url": "https://github.com/ConsenSys/teku/pull/1223#discussion_r383776186", "bodyText": "Yep I think that's where I'm heading with this change... it makes sense that the interface shouldn't need to understand the storage scheme etc. and combined client gives us that abstraction.", "author": "rolfyone", "createdAt": "2020-02-25T10:03:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY0OTczNw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY1MDQwMw==", "url": "https://github.com/ConsenSys/teku/pull/1223#discussion_r383650403", "bodyText": "I'm surprised putting the @OpenApi on this private method works. Shouldn't it be on the handle method?", "author": "ajsutton", "createdAt": "2020-02-25T04:16:15Z", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconStateHandler.java", "diffHunk": "@@ -69,22 +85,39 @@ private BeaconState queryByRootHash(String root) {\n             description = \"The beacon state matching the supplied query parameter was not found.\"),\n         @OpenApiResponse(status = \"400\", description = \"Missing a query parameter\")\n       })\n+  private String validateParams(final Map<String, List<String>> params, final String key) {", "originalCommit": "ed48dc22e23be64a435e0268001f1db00cc8fac2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY1Mzk0NQ==", "url": "https://github.com/ConsenSys/teku/pull/1223#discussion_r383653945", "bodyText": "that's just me being an idiot... it's not the handle method. it was a late change to centralise the validation...", "author": "rolfyone", "createdAt": "2020-02-25T04:34:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY1MDQwMw=="}], "type": "inlineReview", "revised_code": {"commit": "302931ea958b424ff243570067995420394c718e", "chunk": "diff --git a/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconStateHandler.java b/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconStateHandler.java\nindex cc8fcb4d32..ed2d579aae 100644\n--- a/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconStateHandler.java\n+++ b/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconStateHandler.java\n\n@@ -85,39 +69,53 @@ public class BeaconStateHandler implements Handler {\n             description = \"The beacon state matching the supplied query parameter was not found.\"),\n         @OpenApiResponse(status = \"400\", description = \"Missing a query parameter\")\n       })\n-  private String validateParams(final Map<String, List<String>> params, final String key) {\n-    if (params.containsKey(key)\n-        && params.get(key).size() == 1\n-        && !StringUtils.isEmpty(params.get(key).get(0))) {\n-      return params.get(key).get(0);\n-    } else {\n-      throw new IllegalArgumentException(String.format(\"'%s' cannot be null or empty.\", key));\n-    }\n-  }\n-\n   @Override\n   public void handle(Context ctx) throws Exception {\n     try {\n       final Map<String, List<String>> parameters = ctx.queryParamMap();\n-      Optional<BeaconState> result = Optional.empty();\n+      SafeFuture<Optional<BeaconState>> future = null;\n       if (parameters.size() == 0) {\n         throw new IllegalArgumentException(\"No query parameters specified\");\n       }\n \n       if (parameters.containsKey(ROOT)) {\n-        result = queryByRootHash(validateParams(parameters, ROOT));\n+        future = queryByRootHash(validateParams(parameters, ROOT));\n       } else if (parameters.containsKey(SLOT)) {\n-        result = queryBySlot(validateParams(parameters, SLOT));\n-      }\n-\n-      if (result.isPresent()) {\n-        ctx.result(jsonProvider.objectToJSON(result.get()));\n-        return;\n+        future = queryBySlot(validateParams(parameters, SLOT));\n       }\n-      ctx.status(SC_NOT_FOUND);\n+      ctx.result(\n+          future.thenApplyChecked(\n+              state -> {\n+                if (state.isEmpty()) {\n+                  ctx.status(SC_NOT_FOUND);\n+                  return null;\n+                }\n+                return jsonProvider.objectToJSON(state.get());\n+              }));\n     } catch (final IllegalArgumentException e) {\n       ctx.result(jsonProvider.objectToJSON(new BadRequest(e.getMessage())));\n       ctx.status(SC_BAD_REQUEST);\n     }\n   }\n+\n+  private SafeFuture<Optional<BeaconState>> queryByRootHash(final String root) {\n+    final Bytes32 root32 = Bytes32.fromHexString(root);\n+    return combinedClient.getStateByBlockRoot(root32);\n+  }\n+\n+  private SafeFuture<Optional<BeaconState>> queryBySlot(final String slotString) {\n+    final UnsignedLong slot = UnsignedLong.valueOf(slotString);\n+    final Bytes32 head = combinedClient.getBestBlockRoot().orElse(null);\n+    return combinedClient.getStateAtSlot(slot, head);\n+  }\n+\n+  private String validateParams(final Map<String, List<String>> params, final String key) {\n+    if (params.containsKey(key)\n+        && params.get(key).size() == 1\n+        && !StringUtils.isEmpty(params.get(key).get(0))) {\n+      return params.get(key).get(0);\n+    } else {\n+      throw new IllegalArgumentException(String.format(\"'%s' cannot be null or empty.\", key));\n+    }\n+  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY1MDQ1Mg==", "url": "https://github.com/ConsenSys/teku/pull/1223#discussion_r383650452", "bodyText": "nittiest of nits: I'd push these private methods below handle then the class reads more in order.", "author": "ajsutton", "createdAt": "2020-02-25T04:16:30Z", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconStateHandler.java", "diffHunk": "@@ -16,40 +16,52 @@\n import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n \n+import com.google.common.primitives.UnsignedLong;\n import io.javalin.http.Context;\n import io.javalin.http.Handler;\n import io.javalin.plugin.openapi.annotations.HttpMethod;\n import io.javalin.plugin.openapi.annotations.OpenApi;\n import io.javalin.plugin.openapi.annotations.OpenApiContent;\n import io.javalin.plugin.openapi.annotations.OpenApiParam;\n import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.tuweni.bytes.Bytes32;\n import tech.pegasys.artemis.beaconrestapi.schema.BadRequest;\n import tech.pegasys.artemis.datastructures.state.BeaconState;\n import tech.pegasys.artemis.provider.JsonProvider;\n-import tech.pegasys.artemis.storage.ChainStorageClient;\n-import tech.pegasys.artemis.storage.Store;\n+import tech.pegasys.artemis.storage.CombinedChainDataClient;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n \n public class BeaconStateHandler implements Handler {\n   public static final String ROUTE = \"/beacon/state\";\n-  private final Logger LOG = LogManager.getLogger();\n-  private final ChainStorageClient client;\n+  public static final String ROOT = \"root\";\n+  public static final String SLOT = \"slot\";\n+  private final CombinedChainDataClient combinedClient;\n   private final JsonProvider jsonProvider;\n \n-  public BeaconStateHandler(ChainStorageClient client, JsonProvider jsonProvider) {\n-    this.client = client;\n+  public BeaconStateHandler(\n+      final CombinedChainDataClient combinedClient, final JsonProvider jsonProvider) {\n+    this.combinedClient = combinedClient;\n     this.jsonProvider = jsonProvider;\n   }\n \n-  private BeaconState queryByRootHash(String root) {\n-    Bytes32 root32 = Bytes32.fromHexString(root);\n-    Store store = client.getStore();\n-    if (store == null) {\n-      return client.getBlockState(root32).orElse(null);\n-    }\n-    return store.getBlockState(root32);\n+  private Optional<BeaconState> queryByRootHash(final String root)", "originalCommit": "ed48dc22e23be64a435e0268001f1db00cc8fac2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "302931ea958b424ff243570067995420394c718e", "chunk": "diff --git a/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconStateHandler.java b/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconStateHandler.java\nindex cc8fcb4d32..ed2d579aae 100644\n--- a/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconStateHandler.java\n+++ b/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconStateHandler.java\n\n@@ -27,7 +27,6 @@ import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n-import java.util.concurrent.ExecutionException;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.tuweni.bytes.Bytes32;\n import tech.pegasys.artemis.beaconrestapi.schema.BadRequest;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY1MDc2Ng==", "url": "https://github.com/ConsenSys/teku/pull/1223#discussion_r383650766", "bodyText": "It looks like Javalin's ctx.result can be passed a future and it will handle it all for us rather than blocking the thread.  So this and queryBySlot would return a SafeFuture and use thenApply to do the processing async.", "author": "ajsutton", "createdAt": "2020-02-25T04:18:13Z", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconStateHandler.java", "diffHunk": "@@ -16,40 +16,52 @@\n import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;\n \n+import com.google.common.primitives.UnsignedLong;\n import io.javalin.http.Context;\n import io.javalin.http.Handler;\n import io.javalin.plugin.openapi.annotations.HttpMethod;\n import io.javalin.plugin.openapi.annotations.OpenApi;\n import io.javalin.plugin.openapi.annotations.OpenApiContent;\n import io.javalin.plugin.openapi.annotations.OpenApiParam;\n import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.tuweni.bytes.Bytes32;\n import tech.pegasys.artemis.beaconrestapi.schema.BadRequest;\n import tech.pegasys.artemis.datastructures.state.BeaconState;\n import tech.pegasys.artemis.provider.JsonProvider;\n-import tech.pegasys.artemis.storage.ChainStorageClient;\n-import tech.pegasys.artemis.storage.Store;\n+import tech.pegasys.artemis.storage.CombinedChainDataClient;\n+import tech.pegasys.artemis.util.async.SafeFuture;\n \n public class BeaconStateHandler implements Handler {\n   public static final String ROUTE = \"/beacon/state\";\n-  private final Logger LOG = LogManager.getLogger();\n-  private final ChainStorageClient client;\n+  public static final String ROOT = \"root\";\n+  public static final String SLOT = \"slot\";\n+  private final CombinedChainDataClient combinedClient;\n   private final JsonProvider jsonProvider;\n \n-  public BeaconStateHandler(ChainStorageClient client, JsonProvider jsonProvider) {\n-    this.client = client;\n+  public BeaconStateHandler(\n+      final CombinedChainDataClient combinedClient, final JsonProvider jsonProvider) {\n+    this.combinedClient = combinedClient;\n     this.jsonProvider = jsonProvider;\n   }\n \n-  private BeaconState queryByRootHash(String root) {\n-    Bytes32 root32 = Bytes32.fromHexString(root);\n-    Store store = client.getStore();\n-    if (store == null) {\n-      return client.getBlockState(root32).orElse(null);\n-    }\n-    return store.getBlockState(root32);\n+  private Optional<BeaconState> queryByRootHash(final String root)\n+      throws ExecutionException, InterruptedException {\n+    final Bytes32 root32 = Bytes32.fromHexString(root);\n+    final SafeFuture<Optional<BeaconState>> future = combinedClient.getStateAtBlock(root32);\n+    return future.get();", "originalCommit": "ed48dc22e23be64a435e0268001f1db00cc8fac2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzczMTIwNg==", "url": "https://github.com/ConsenSys/teku/pull/1223#discussion_r383731206", "bodyText": "good plan", "author": "rolfyone", "createdAt": "2020-02-25T08:46:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY1MDc2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "302931ea958b424ff243570067995420394c718e", "chunk": "diff --git a/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconStateHandler.java b/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconStateHandler.java\nindex cc8fcb4d32..ed2d579aae 100644\n--- a/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconStateHandler.java\n+++ b/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconStateHandler.java\n\n@@ -27,7 +27,6 @@ import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n-import java.util.concurrent.ExecutionException;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.tuweni.bytes.Bytes32;\n import tech.pegasys.artemis.beaconrestapi.schema.BadRequest;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY1MjEyMA==", "url": "https://github.com/ConsenSys/teku/pull/1223#discussion_r383652120", "bodyText": "You can't propose a state - every slot just has a state.  We should check what other clients do when requesting the state for a slot that doesn't contain a block.  Do they return the state from the last full slot or do they actually process the skipped slots?  The block_root is the same in both cases (because there's no new block) but the state root and state slot number would be different.", "author": "ajsutton", "createdAt": "2020-02-25T04:25:31Z", "path": "storage/src/main/java/tech/pegasys/artemis/storage/CombinedChainDataClient.java", "diffHunk": "@@ -126,4 +128,56 @@ private boolean isFinalized(final UnsignedLong slot) {\n   public Optional<BeaconState> getNonfinalizedBlockState(final Bytes32 blockRoot) {\n     return recentChainData.getBlockState(blockRoot);\n   }\n+\n+  /**\n+   * Returns the state which was proposed in or most recently before the requested slot on the chain\n+   * specified by <code>headBlockRoot</code>. If the slot was empty, the state at the last filled\n+   * slot is returned.", "originalCommit": "ed48dc22e23be64a435e0268001f1db00cc8fac2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzczMjcwNQ==", "url": "https://github.com/ConsenSys/teku/pull/1223#discussion_r383732705", "bodyText": "copy / paste :/ i'll clean that up - hopefully my interpretation is correct with my update.", "author": "rolfyone", "createdAt": "2020-02-25T08:49:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY1MjEyMA=="}], "type": "inlineReview", "revised_code": {"commit": "5597be7066a2acdbb19506ac86712a252d657a9a", "chunk": "diff --git a/storage/src/main/java/tech/pegasys/artemis/storage/CombinedChainDataClient.java b/storage/src/main/java/tech/pegasys/artemis/storage/CombinedChainDataClient.java\nindex 205d423724..05fb9ae1ff 100644\n--- a/storage/src/main/java/tech/pegasys/artemis/storage/CombinedChainDataClient.java\n+++ b/storage/src/main/java/tech/pegasys/artemis/storage/CombinedChainDataClient.java\n\n@@ -161,7 +161,7 @@ public class CombinedChainDataClient {\n   public SafeFuture<Optional<BeaconState>> getStateAtBlock(final Bytes32 block) {\n     final Store store = recentChainData.getStore();\n     if (store == null) {\n-      LOG.trace(\"No state at block {} because the store is not set\", block);\n+      LOG.trace(\"No state for block root {} because the store is not set\", block);\n       return STATE_NOT_AVAILABLE;\n     }\n     final BeaconState state = store.getBlockState(block);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY1MjMyOA==", "url": "https://github.com/ConsenSys/teku/pull/1223#discussion_r383652328", "bodyText": "getStateAtBlock probably isn't the right term - getStateByBlockRoot(final Bytes32 blockRoot) would be more what I'd expect.", "author": "ajsutton", "createdAt": "2020-02-25T04:26:28Z", "path": "storage/src/main/java/tech/pegasys/artemis/storage/CombinedChainDataClient.java", "diffHunk": "@@ -126,4 +128,56 @@ private boolean isFinalized(final UnsignedLong slot) {\n   public Optional<BeaconState> getNonfinalizedBlockState(final Bytes32 blockRoot) {\n     return recentChainData.getBlockState(blockRoot);\n   }\n+\n+  /**\n+   * Returns the state which was proposed in or most recently before the requested slot on the chain\n+   * specified by <code>headBlockRoot</code>. If the slot was empty, the state at the last filled\n+   * slot is returned.\n+   *\n+   * @param slot the slot to get the effective block for\n+   * @return the State at slot or the closest previous slot if empty\n+   */\n+  public SafeFuture<Optional<BeaconState>> getStateAtSlot(\n+      final UnsignedLong slot, final Bytes32 headBlockRoot) {\n+\n+    final Store store = recentChainData.getStore();\n+    if (store == null) {\n+      LOG.trace(\"No state at slot {} because the store is not set\", slot);\n+      return STATE_NOT_AVAILABLE;\n+    }\n+\n+    if (isFinalized(slot)) {\n+      return historicalChainData.getFinalizedStateAtSlot(slot);\n+    }\n+\n+    final BeaconState headState = store.getBlockState(headBlockRoot);\n+    if (headState.getSlot().equals(slot)) {\n+      return completedFuture(Optional.ofNullable(headState));\n+    }\n+\n+    return completedFuture(recentChainData.getStateBySlot(slot));\n+  }\n+\n+  public SafeFuture<Optional<BeaconState>> getStateAtBlock(final Bytes32 block) {", "originalCommit": "ed48dc22e23be64a435e0268001f1db00cc8fac2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5597be7066a2acdbb19506ac86712a252d657a9a", "chunk": "diff --git a/storage/src/main/java/tech/pegasys/artemis/storage/CombinedChainDataClient.java b/storage/src/main/java/tech/pegasys/artemis/storage/CombinedChainDataClient.java\nindex 205d423724..05fb9ae1ff 100644\n--- a/storage/src/main/java/tech/pegasys/artemis/storage/CombinedChainDataClient.java\n+++ b/storage/src/main/java/tech/pegasys/artemis/storage/CombinedChainDataClient.java\n\n@@ -161,7 +161,7 @@ public class CombinedChainDataClient {\n   public SafeFuture<Optional<BeaconState>> getStateAtBlock(final Bytes32 block) {\n     final Store store = recentChainData.getStore();\n     if (store == null) {\n-      LOG.trace(\"No state at block {} because the store is not set\", block);\n+      LOG.trace(\"No state for block root {} because the store is not set\", block);\n       return STATE_NOT_AVAILABLE;\n     }\n     final BeaconState state = store.getBlockState(block);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY1MjM3Ng==", "url": "https://github.com/ConsenSys/teku/pull/1223#discussion_r383652376", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  LOG.trace(\"No state at block {} because the store is not set\", block);\n          \n          \n            \n                  LOG.trace(\"No state for block root {} because the store is not set\", block);", "author": "ajsutton", "createdAt": "2020-02-25T04:26:42Z", "path": "storage/src/main/java/tech/pegasys/artemis/storage/CombinedChainDataClient.java", "diffHunk": "@@ -126,4 +128,56 @@ private boolean isFinalized(final UnsignedLong slot) {\n   public Optional<BeaconState> getNonfinalizedBlockState(final Bytes32 blockRoot) {\n     return recentChainData.getBlockState(blockRoot);\n   }\n+\n+  /**\n+   * Returns the state which was proposed in or most recently before the requested slot on the chain\n+   * specified by <code>headBlockRoot</code>. If the slot was empty, the state at the last filled\n+   * slot is returned.\n+   *\n+   * @param slot the slot to get the effective block for\n+   * @return the State at slot or the closest previous slot if empty\n+   */\n+  public SafeFuture<Optional<BeaconState>> getStateAtSlot(\n+      final UnsignedLong slot, final Bytes32 headBlockRoot) {\n+\n+    final Store store = recentChainData.getStore();\n+    if (store == null) {\n+      LOG.trace(\"No state at slot {} because the store is not set\", slot);\n+      return STATE_NOT_AVAILABLE;\n+    }\n+\n+    if (isFinalized(slot)) {\n+      return historicalChainData.getFinalizedStateAtSlot(slot);\n+    }\n+\n+    final BeaconState headState = store.getBlockState(headBlockRoot);\n+    if (headState.getSlot().equals(slot)) {\n+      return completedFuture(Optional.ofNullable(headState));\n+    }\n+\n+    return completedFuture(recentChainData.getStateBySlot(slot));\n+  }\n+\n+  public SafeFuture<Optional<BeaconState>> getStateAtBlock(final Bytes32 block) {\n+    final Store store = recentChainData.getStore();\n+    if (store == null) {\n+      LOG.trace(\"No state at block {} because the store is not set\", block);", "originalCommit": "ed48dc22e23be64a435e0268001f1db00cc8fac2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5597be7066a2acdbb19506ac86712a252d657a9a", "chunk": "diff --git a/storage/src/main/java/tech/pegasys/artemis/storage/CombinedChainDataClient.java b/storage/src/main/java/tech/pegasys/artemis/storage/CombinedChainDataClient.java\nindex 205d423724..05fb9ae1ff 100644\n--- a/storage/src/main/java/tech/pegasys/artemis/storage/CombinedChainDataClient.java\n+++ b/storage/src/main/java/tech/pegasys/artemis/storage/CombinedChainDataClient.java\n\n@@ -161,7 +161,7 @@ public class CombinedChainDataClient {\n   public SafeFuture<Optional<BeaconState>> getStateAtBlock(final Bytes32 block) {\n     final Store store = recentChainData.getStore();\n     if (store == null) {\n-      LOG.trace(\"No state at block {} because the store is not set\", block);\n+      LOG.trace(\"No state for block root {} because the store is not set\", block);\n       return STATE_NOT_AVAILABLE;\n     }\n     final BeaconState state = store.getBlockState(block);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY1MjUxMQ==", "url": "https://github.com/ConsenSys/teku/pull/1223#discussion_r383652511", "bodyText": "Probably getFinalizedStateByBlockRoot(final Bytes32 blockRoot) and that terminology change flows through the various events etc.", "author": "ajsutton", "createdAt": "2020-02-25T04:27:30Z", "path": "storage/src/main/java/tech/pegasys/artemis/storage/HistoricalChainData.java", "diffHunk": "@@ -50,6 +60,16 @@ public HistoricalChainData(final EventBus eventBus) {\n         slot, new GetLatestFinalizedBlockAtSlotRequest(slot), QUERY_TIMEOUT);\n   }\n \n+  public SafeFuture<Optional<BeaconState>> getFinalizedStateAtSlot(final UnsignedLong slot) {\n+    return stateAtSlotRequests.sendRequest(\n+        slot, new GetFinalizedStateAtSlotRequest(slot), QUERY_TIMEOUT);\n+  }\n+\n+  public SafeFuture<Optional<BeaconState>> getFinalizedStateAtBlock(final Bytes32 block) {", "originalCommit": "ed48dc22e23be64a435e0268001f1db00cc8fac2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "302931ea958b424ff243570067995420394c718e", "chunk": "diff --git a/storage/src/main/java/tech/pegasys/artemis/storage/HistoricalChainData.java b/storage/src/main/java/tech/pegasys/artemis/storage/HistoricalChainData.java\nindex 2e429f5849..13327afd42 100644\n--- a/storage/src/main/java/tech/pegasys/artemis/storage/HistoricalChainData.java\n+++ b/storage/src/main/java/tech/pegasys/artemis/storage/HistoricalChainData.java\n\n@@ -65,9 +65,9 @@ public class HistoricalChainData {\n         slot, new GetFinalizedStateAtSlotRequest(slot), QUERY_TIMEOUT);\n   }\n \n-  public SafeFuture<Optional<BeaconState>> getFinalizedStateAtBlock(final Bytes32 block) {\n-    return stateAtBlockRequests.sendRequest(\n-        block, new GetFinalizedStateAtBlockRequest(block), QUERY_TIMEOUT);\n+  public SafeFuture<Optional<BeaconState>> getFinalizedStateByBlockRoot(final Bytes32 blockRoot) {\n+    return stateByBlockRootRequests.sendRequest(\n+        blockRoot, new GetFinalizedStateByBlockRootRequest(blockRoot), QUERY_TIMEOUT);\n   }\n \n   @Subscribe\n"}}, {"oid": "5597be7066a2acdbb19506ac86712a252d657a9a", "url": "https://github.com/ConsenSys/teku/commit/5597be7066a2acdbb19506ac86712a252d657a9a", "message": "Update storage/src/main/java/tech/pegasys/artemis/storage/CombinedChainDataClient.java\n\nCo-Authored-By: Adrian Sutton <adrian@symphonious.net>", "committedDate": "2020-02-25T08:51:33Z", "type": "commit"}, {"oid": "302931ea958b424ff243570067995420394c718e", "url": "https://github.com/ConsenSys/teku/commit/302931ea958b424ff243570067995420394c718e", "message": "changes from review comments.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-02-25T09:58:33Z", "type": "commit"}, {"oid": "4ed36f610ff33a5018896a435e930d41daec5d0a", "url": "https://github.com/ConsenSys/teku/commit/4ed36f610ff33a5018896a435e930d41daec5d0a", "message": "Merge remote-tracking branch 'origin/1184-state-retrieval-by-slot' into 1184-state-retrieval-by-slot", "committedDate": "2020-02-25T10:01:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYyNTA4MQ==", "url": "https://github.com/ConsenSys/teku/pull/1223#discussion_r383625081", "bodyText": "nitpicking here but would be nice to have consistency on param descriptions - eg SLOT description maybe should be \"slot number to query...\"", "author": "macfarla", "createdAt": "2020-02-25T02:23:32Z", "path": "data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconStateHandler.java", "diffHunk": "@@ -58,7 +70,11 @@ private BeaconState queryByRootHash(String root) {\n       summary = \"Get the beacon chain state that matches the specified tree hash root.\",\n       tags = {\"Beacon\"},\n       queryParams = {\n-        @OpenApiParam(name = \"root\", description = \"Tree hash root to query (Bytes32)\")\n+        @OpenApiParam(name = ROOT, description = \"Tree hash root to query (Bytes32)\"),\n+        @OpenApiParam(\n+            name = SLOT,\n+            description =\n+                \"Query by slot number in the canonical chain (head or ancestor of the head)\")", "originalCommit": "ed48dc22e23be64a435e0268001f1db00cc8fac2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEwODQwNA==", "url": "https://github.com/ConsenSys/teku/pull/1223#discussion_r384108404", "bodyText": "ok that really is nit-picking, but i'll change :)", "author": "rolfyone", "createdAt": "2020-02-25T20:28:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYyNTA4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "302931ea958b424ff243570067995420394c718e", "chunk": "diff --git a/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconStateHandler.java b/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconStateHandler.java\nindex cc8fcb4d32..ed2d579aae 100644\n--- a/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconStateHandler.java\n+++ b/data/beaconrestapi/src/main/java/tech/pegasys/artemis/beaconrestapi/beaconhandlers/BeaconStateHandler.java\n\n@@ -49,21 +48,6 @@ public class BeaconStateHandler implements Handler {\n     this.jsonProvider = jsonProvider;\n   }\n \n-  private Optional<BeaconState> queryByRootHash(final String root)\n-      throws ExecutionException, InterruptedException {\n-    final Bytes32 root32 = Bytes32.fromHexString(root);\n-    final SafeFuture<Optional<BeaconState>> future = combinedClient.getStateAtBlock(root32);\n-    return future.get();\n-  }\n-\n-  private Optional<BeaconState> queryBySlot(final String slotString)\n-      throws ExecutionException, InterruptedException {\n-    final UnsignedLong slot = UnsignedLong.valueOf(slotString);\n-    final Bytes32 head = combinedClient.getBestBlockRoot().orElse(null);\n-    final SafeFuture<Optional<BeaconState>> future = combinedClient.getStateAtSlot(slot, head);\n-    return future.get();\n-  }\n-\n   @OpenApi(\n       path = ROUTE,\n       method = HttpMethod.GET,\n"}}, {"oid": "b8fb51b17cbee2f254c2d06f6583abfa1e49c170", "url": "https://github.com/ConsenSys/teku/commit/b8fb51b17cbee2f254c2d06f6583abfa1e49c170", "message": "changes from review comments.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-02-25T20:32:38Z", "type": "commit"}]}