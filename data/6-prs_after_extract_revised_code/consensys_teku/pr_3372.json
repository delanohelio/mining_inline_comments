{"pr_number": 3372, "pr_title": "Avoid BigInteger multiplication when calculating base rewards", "pr_createdAt": "2020-12-07T22:27:49Z", "pr_url": "https://github.com/ConsenSys/teku/pull/3372", "timeline": [{"oid": "3ad66b566d764f3af37d752295c120b7ba2ea333", "url": "https://github.com/ConsenSys/teku/commit/3ad66b566d764f3af37d752295c120b7ba2ea333", "message": "Avoid BigInteger multiplication when calculating base rewards.\n\nPreviously UInt64.times switched to using BigInteger to perform multiplication when either multiplicand is bigger than the square root of UInt64.MAX_VALUE to provide overflow protection.\nEpoch transition multiplies the sum of effective balances by 64 and the effective balances were greater than the square root value, causing the more expensive path to be taken.\nAdd an additional check that if one multiplicand is 64 or less and the other is less than MAX_VALUE / 64, use the fast path as the result is known to not overflow.", "committedDate": "2020-12-07T22:26:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg4NzI0Mw==", "url": "https://github.com/ConsenSys/teku/pull/3372#discussion_r537887243", "bodyText": "more efficient to store as long and 64L?", "author": "rolfyone", "createdAt": "2020-12-07T22:39:05Z", "path": "infrastructure/unsigned/src/main/java/tech/pegasys/teku/infrastructure/unsigned/UInt64.java", "diffHunk": "@@ -37,6 +37,10 @@\n    */\n   static final long SQRT_MAX_VALUE = 4294967295L;\n \n+  static final int SPECIAL_CASE_MULTIPLICAND = 64;", "originalCommit": "3ad66b566d764f3af37d752295c120b7ba2ea333", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg4Nzc0Ng==", "url": "https://github.com/ConsenSys/teku/pull/3372#discussion_r537887746", "bodyText": "Probably neater to store as long but no difference to efficiency I don't think.", "author": "ajsutton", "createdAt": "2020-12-07T22:39:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg4NzI0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg4ODI0Ng==", "url": "https://github.com/ConsenSys/teku/pull/3372#discussion_r537888246", "bodyText": "Changed.", "author": "ajsutton", "createdAt": "2020-12-07T22:40:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg4NzI0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "8fd542a84fa8ff6fbf1c4efc9d5b94a9e7b06431", "chunk": "diff --git a/infrastructure/unsigned/src/main/java/tech/pegasys/teku/infrastructure/unsigned/UInt64.java b/infrastructure/unsigned/src/main/java/tech/pegasys/teku/infrastructure/unsigned/UInt64.java\nindex 7e6ef4d70d..c292697b33 100644\n--- a/infrastructure/unsigned/src/main/java/tech/pegasys/teku/infrastructure/unsigned/UInt64.java\n+++ b/infrastructure/unsigned/src/main/java/tech/pegasys/teku/infrastructure/unsigned/UInt64.java\n\n@@ -37,7 +37,7 @@ public final class UInt64 implements Comparable<UInt64> {\n    */\n   static final long SQRT_MAX_VALUE = 4294967295L;\n \n-  static final int SPECIAL_CASE_MULTIPLICAND = 64;\n+  static final long SPECIAL_CASE_MULTIPLICAND = 64L;\n   static final long MAX_SAFE_VALUE_WITH_SPECIAL_CASE_MULTIPLICAND =\n       Long.divideUnsigned(-1L, SPECIAL_CASE_MULTIPLICAND);\n \n"}}, {"oid": "8fd542a84fa8ff6fbf1c4efc9d5b94a9e7b06431", "url": "https://github.com/ConsenSys/teku/commit/8fd542a84fa8ff6fbf1c4efc9d5b94a9e7b06431", "message": "Use long.", "committedDate": "2020-12-07T22:40:18Z", "type": "commit"}, {"oid": "1c43b463c75d4cade2492f47bdb9eae31956dddf", "url": "https://github.com/ConsenSys/teku/commit/1c43b463c75d4cade2492f47bdb9eae31956dddf", "message": "Merge branch 'master' of github.com:ConsenSys/teku into uint64-times", "committedDate": "2020-12-07T22:40:23Z", "type": "commit"}]}