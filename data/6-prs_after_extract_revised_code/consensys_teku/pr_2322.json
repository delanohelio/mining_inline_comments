{"pr_number": 2322, "pr_title": "Access genesis data through genesis event rather than Store", "pr_createdAt": "2020-07-06T20:52:37Z", "pr_url": "https://github.com/ConsenSys/teku/pull/2322", "timeline": [{"oid": "fe9833889cd7bc6c4971bcedcee6494d9640ac76", "url": "https://github.com/ConsenSys/teku/commit/fe9833889cd7bc6c4971bcedcee6494d9640ac76", "message": "Access genesis data through GenesisEvent rather than Store", "committedDate": "2020-07-06T20:49:35Z", "type": "commit"}, {"oid": "cba4245303a664045495392c30bb5f4381cf9b46", "url": "https://github.com/ConsenSys/teku/commit/cba4245303a664045495392c30bb5f4381cf9b46", "message": "Merge branch 'master' into issue-2291/add-genesis-event", "committedDate": "2020-07-06T20:53:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUwNjk0Mw==", "url": "https://github.com/ConsenSys/teku/pull/2322#discussion_r450506943", "bodyText": "Would it be difficult to switch this over to using the EventChannel interface to get this event rather than the EventBus while you're here?  Don't worry if it takes more than a couple of minutes but it would be nice to get rid of one more usage of EventBus.", "author": "ajsutton", "createdAt": "2020-07-06T22:13:48Z", "path": "data/recorder/src/main/java/tech/pegasys/teku/data/recorder/SSZTransitionRecorder.java", "diffHunk": "@@ -41,13 +40,12 @@ public SSZTransitionRecorder(final Path outputDirectory) {\n   }\n \n   @Subscribe\n-  public void onGenesis(final UpdatableStore store) {\n-    final Checkpoint finalizedCheckpoint = store.getFinalizedCheckpoint();\n+  public void onGenesis(final GenesisEvent genesis) {\n+    final Checkpoint finalizedCheckpoint = genesis.getCheckpoint();", "originalCommit": "cba4245303a664045495392c30bb5f4381cf9b46", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk2NDAxOA==", "url": "https://github.com/ConsenSys/teku/pull/2322#discussion_r450964018", "bodyText": "Started looking into this, but I wanted to make a generic ChainUpdates channel to consolidate various chain events and decided it was too much to put into this PR.", "author": "mbaxter", "createdAt": "2020-07-07T15:45:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUwNjk0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "6aafc7db58bff4e61771897f1f6e410e601d0b5b", "chunk": "diff --git a/data/recorder/src/main/java/tech/pegasys/teku/data/recorder/SSZTransitionRecorder.java b/data/recorder/src/main/java/tech/pegasys/teku/data/recorder/SSZTransitionRecorder.java\nindex def5f36564..287e5d652a 100644\n--- a/data/recorder/src/main/java/tech/pegasys/teku/data/recorder/SSZTransitionRecorder.java\n+++ b/data/recorder/src/main/java/tech/pegasys/teku/data/recorder/SSZTransitionRecorder.java\n\n@@ -40,21 +38,14 @@ public class SSZTransitionRecorder {\n   }\n \n   @Subscribe\n-  public void onGenesis(final GenesisEvent genesis) {\n-    final Checkpoint finalizedCheckpoint = genesis.getCheckpoint();\n-    if (isNotGenesis(finalizedCheckpoint)) {\n+  public void onGenesis(final AnchorPoint anchor) {\n+    if (!anchor.isGenesis()) {\n       return;\n     }\n-    final BeaconState genesisState = genesis.getState();\n+    final BeaconState genesisState = anchor.getState();\n     store(outputDirectory.resolve(\"genesis.ssz\"), genesisState);\n   }\n \n-  private boolean isNotGenesis(final Checkpoint finalizedCheckpoint) {\n-    final UnsignedLong genesisEpoch = UnsignedLong.valueOf(Constants.GENESIS_EPOCH);\n-    return finalizedCheckpoint == null\n-        || finalizedCheckpoint.getEpoch().compareTo(genesisEpoch) != 0;\n-  }\n-\n   @Subscribe\n   public void onBlockProcessingRecord(final BlockProcessingRecord record) {\n     final Path slotDirectory = slotDirectory(record.getBlock().getSlot());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUwNzczMg==", "url": "https://github.com/ConsenSys/teku/pull/2322#discussion_r450507732", "bodyText": "anchorState is the more correct term (and possibly we should update a lot of places that refer to Genesis).  We might be starting from a state that isn't slot 0.", "author": "ajsutton", "createdAt": "2020-07-06T22:15:57Z", "path": "storage/src/main/java/tech/pegasys/teku/storage/store/StoreBuilder.java", "diffHunk": "@@ -54,40 +51,49 @@ public static StoreBuilder create() {\n   public static UpdatableStore buildForkChoiceStore(\n       final MetricsSystem metricsSystem,\n       final BlockProvider blockProvider,\n-      final BeaconState anchorState) {\n-    return forkChoiceStoreBuilder(metricsSystem, blockProvider, anchorState).build();\n+      final BeaconState genesisState) {", "originalCommit": "cba4245303a664045495392c30bb5f4381cf9b46", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk2Mjg2Mw==", "url": "https://github.com/ConsenSys/teku/pull/2322#discussion_r450962863", "bodyText": "When we process the genesis state, we construct an empty block from the state and apply an empty signature - which I don't think we want to do for non-genesis anchors.  But, I went ahead and changed GenesisEvent to AnchorPoint so that we have a more generic object to work with, and changed this builder to just work with AnchorPoint's.", "author": "mbaxter", "createdAt": "2020-07-07T15:43:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUwNzczMg=="}], "type": "inlineReview", "revised_code": {"commit": "6aafc7db58bff4e61771897f1f6e410e601d0b5b", "chunk": "diff --git a/storage/src/main/java/tech/pegasys/teku/storage/store/StoreBuilder.java b/storage/src/main/java/tech/pegasys/teku/storage/store/StoreBuilder.java\nindex 7db6c85bb4..0a10f9eae0 100644\n--- a/storage/src/main/java/tech/pegasys/teku/storage/store/StoreBuilder.java\n+++ b/storage/src/main/java/tech/pegasys/teku/storage/store/StoreBuilder.java\n\n@@ -51,50 +50,32 @@ public class StoreBuilder {\n   public static UpdatableStore buildForkChoiceStore(\n       final MetricsSystem metricsSystem,\n       final BlockProvider blockProvider,\n-      final BeaconState genesisState) {\n-    return forkChoiceStoreBuilder(metricsSystem, blockProvider, genesisState).build();\n-  }\n-\n-  public static UpdatableStore buildForkChoiceStore(\n-      final MetricsSystem metricsSystem,\n-      final BlockProvider blockProvider,\n-      final GenesisEvent genesis) {\n-    return forkChoiceStoreBuilder(metricsSystem, blockProvider, genesis).build();\n+      final AnchorPoint anchor) {\n+    return forkChoiceStoreBuilder(metricsSystem, blockProvider, anchor).build();\n   }\n \n   public static StoreBuilder forkChoiceStoreBuilder(\n       final MetricsSystem metricsSystem,\n       final BlockProvider blockProvider,\n-      final BeaconState genesisState) {\n-    return forkChoiceStoreBuilder(\n-        metricsSystem, blockProvider, GenesisEvent.fromGenesisState(genesisState));\n-  }\n-\n-  public static StoreBuilder forkChoiceStoreBuilder(\n-      final MetricsSystem metricsSystem,\n-      final BlockProvider blockProvider,\n-      final GenesisEvent genesis) {\n-    final UnsignedLong genesisTime = genesis.getState().getGenesis_time();\n-    final UnsignedLong time =\n-        genesisTime.plus(\n-            UnsignedLong.valueOf(SECONDS_PER_SLOT).times(genesis.getState().getSlot()));\n+      final AnchorPoint anchor) {\n+    final UnsignedLong genesisTime = anchor.getState().getGenesis_time();\n+    final UnsignedLong slot = anchor.getState().getSlot();\n+    final UnsignedLong time = genesisTime.plus(UnsignedLong.valueOf(SECONDS_PER_SLOT).times(slot));\n \n     Map<Bytes32, Bytes32> childToParentMap = new HashMap<>();\n-    Map<UnsignedLong, VoteTracker> votes = new HashMap<>();\n-\n-    childToParentMap.put(genesis.getRoot(), genesis.getParentRoot());\n+    childToParentMap.put(anchor.getRoot(), anchor.getParentRoot());\n \n     return create()\n         .metricsSystem(metricsSystem)\n         .blockProvider(blockProvider)\n         .time(time)\n         .genesisTime(genesisTime)\n-        .finalizedCheckpoint(genesis.getCheckpoint())\n-        .justifiedCheckpoint(genesis.getCheckpoint())\n-        .bestJustifiedCheckpoint(genesis.getCheckpoint())\n+        .finalizedCheckpoint(anchor.getCheckpoint())\n+        .justifiedCheckpoint(anchor.getCheckpoint())\n+        .bestJustifiedCheckpoint(anchor.getCheckpoint())\n         .childToParentMap(childToParentMap)\n-        .latestFinalized(genesis.toSignedBlockAndState())\n-        .votes(votes);\n+        .latestFinalized(anchor.toSignedBlockAndState())\n+        .votes(new HashMap<>());\n   }\n \n   public UpdatableStore build() {\n"}}, {"oid": "4333f359f50cfd2340cb31a828e0946fd1da4c51", "url": "https://github.com/ConsenSys/teku/commit/4333f359f50cfd2340cb31a828e0946fd1da4c51", "message": "Merge branch 'master' into issue-2291/add-genesis-event", "committedDate": "2020-07-07T14:37:35Z", "type": "commit"}, {"oid": "6aafc7db58bff4e61771897f1f6e410e601d0b5b", "url": "https://github.com/ConsenSys/teku/commit/6aafc7db58bff4e61771897f1f6e410e601d0b5b", "message": "Use more generic anchor event in place of genesis event", "committedDate": "2020-07-07T15:16:55Z", "type": "commit"}, {"oid": "19fb989e537ce5f595b97018f74ac8bd57d8a775", "url": "https://github.com/ConsenSys/teku/commit/19fb989e537ce5f595b97018f74ac8bd57d8a775", "message": "Check that genesis state argument is valid, rename variables", "committedDate": "2020-07-07T15:33:45Z", "type": "commit"}, {"oid": "f4e378138c40dbd164ed9736590c50295e6d33aa", "url": "https://github.com/ConsenSys/teku/commit/f4e378138c40dbd164ed9736590c50295e6d33aa", "message": "Fix tests", "committedDate": "2020-07-07T16:03:54Z", "type": "commit"}, {"oid": "6da08a3a5601fd584f3d4f60bd3cf333dc974560", "url": "https://github.com/ConsenSys/teku/commit/6da08a3a5601fd584f3d4f60bd3cf333dc974560", "message": "Fix ChainDataProviderTest - use valid genesis state", "committedDate": "2020-07-07T17:23:07Z", "type": "commit"}, {"oid": "34575c2b5683b024f18ff2bb4eb782e15b0d7bf8", "url": "https://github.com/ConsenSys/teku/commit/34575c2b5683b024f18ff2bb4eb782e15b0d7bf8", "message": "Fix SlotProcessorTest", "committedDate": "2020-07-07T17:34:39Z", "type": "commit"}]}