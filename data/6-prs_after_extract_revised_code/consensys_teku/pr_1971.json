{"pr_number": 1971, "pr_title": "Validateable attestations", "pr_createdAt": "2020-05-26T23:33:32Z", "pr_url": "https://github.com/ConsenSys/teku/pull/1971", "timeline": [{"oid": "c0e6e6542f0d437fdf506f938d89815540163915", "url": "https://github.com/ConsenSys/teku/commit/c0e6e6542f0d437fdf506f938d89815540163915", "message": "Validate future checks latest & pass attestations to Pool", "committedDate": "2020-05-21T19:12:52Z", "type": "commit"}, {"oid": "738dba85c6abfe609c59d93ab012b575468bae2f", "url": "https://github.com/ConsenSys/teku/commit/738dba85c6abfe609c59d93ab012b575468bae2f", "message": "Simplify indented code", "committedDate": "2020-05-21T19:43:24Z", "type": "commit"}, {"oid": "628c22b4a8d745eecdeb75ca6895935c5f82f5f5", "url": "https://github.com/ConsenSys/teku/commit/628c22b4a8d745eecdeb75ca6895935c5f82f5f5", "message": "Pass pool to attestation manager", "committedDate": "2020-05-21T19:47:02Z", "type": "commit"}, {"oid": "e199ed07dff7bca30ed21fe290f6d3d1eabe3670", "url": "https://github.com/ConsenSys/teku/commit/e199ed07dff7bca30ed21fe290f6d3d1eabe3670", "message": "Close of future Attestation DOS vector", "committedDate": "2020-05-21T21:30:22Z", "type": "commit"}, {"oid": "630f441ce25eb5de7ba1d7ea248b7c53f602562e", "url": "https://github.com/ConsenSys/teku/commit/630f441ce25eb5de7ba1d7ea248b7c53f602562e", "message": "Make indexedAttestation variable volatile", "committedDate": "2020-05-22T17:45:11Z", "type": "commit"}, {"oid": "7c1e7b59f3b8c8cb25c6c1899313ba00a9c95ccf", "url": "https://github.com/ConsenSys/teku/commit/7c1e7b59f3b8c8cb25c6c1899313ba00a9c95ccf", "message": "Pass indexed attestation around & change method names", "committedDate": "2020-05-22T18:16:00Z", "type": "commit"}, {"oid": "6207ae8a3b9e0d64bd853b50ffc825275f3559ac", "url": "https://github.com/ConsenSys/teku/commit/6207ae8a3b9e0d64bd853b50ffc825275f3559ac", "message": "Refactor tests to match refactored AttestationManager", "committedDate": "2020-05-22T20:56:38Z", "type": "commit"}, {"oid": "6b18991dc1239fb9143972232e418f9753d9a4b1", "url": "https://github.com/ConsenSys/teku/commit/6b18991dc1239fb9143972232e418f9753d9a4b1", "message": "Run spotless", "committedDate": "2020-05-22T21:02:07Z", "type": "commit"}, {"oid": "21be5ad414e7f9df65209ccc2cf01831aa51cd78", "url": "https://github.com/ConsenSys/teku/commit/21be5ad414e7f9df65209ccc2cf01831aa51cd78", "message": "Fix unit test", "committedDate": "2020-05-22T21:14:21Z", "type": "commit"}, {"oid": "f745abfeb309b414a3ffa9b291c610ece57aade9", "url": "https://github.com/ConsenSys/teku/commit/f745abfeb309b414a3ffa9b291c610ece57aade9", "message": "Merge branch 'master' into validateAtestationFutureChecksLatest", "committedDate": "2020-05-22T21:31:54Z", "type": "commit"}, {"oid": "07c21f4c5f4e011912025851d71d8ed113efe90f", "url": "https://github.com/ConsenSys/teku/commit/07c21f4c5f4e011912025851d71d8ed113efe90f", "message": "Remove usage of spies in test", "committedDate": "2020-05-26T17:06:29Z", "type": "commit"}, {"oid": "ff1c1657e59b867e106a5a82d4eddf411f087f48", "url": "https://github.com/ConsenSys/teku/commit/ff1c1657e59b867e106a5a82d4eddf411f087f48", "message": "Merge branch 'master' into validateAtestationFutureChecksLatest", "committedDate": "2020-05-26T17:07:02Z", "type": "commit"}, {"oid": "8ae990290a7c5aa1ed4acad3c207206a957e4806", "url": "https://github.com/ConsenSys/teku/commit/8ae990290a7c5aa1ed4acad3c207206a957e4806", "message": "Run spotless", "committedDate": "2020-05-26T17:18:37Z", "type": "commit"}, {"oid": "b7602f4792b1c0e4098d291df9a40122e237bce2", "url": "https://github.com/ConsenSys/teku/commit/b7602f4792b1c0e4098d291df9a40122e237bce2", "message": "Switch to using ValidateableAttestations in code\n\n- Replace all Attestations with ValidateableAttestations\n- Use a custom interface to pass ValidateableAttestations from\nnetwork layer to AttestationManager\n- Make Eth2TopicHandler an interface instead of a base class\n- Move AttestationManager to ethereum:statetransition package\nsince sync was not the right place for it", "committedDate": "2020-05-26T23:29:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgyNjYyOA==", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r430826628", "bodyText": "Maybe not for the first pass, but I wonder if DelayableAttestation can just be removed and use ValidatableAttestation instead.  It would move to using a listener/subscriber pattern for onSuccessfulProcessing rather than passing a consumer to the constructor but that makes sense to me.", "author": "ajsutton", "createdAt": "2020-05-27T02:43:14Z", "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/DelayableAttestation.java", "diffHunk": "@@ -22,14 +22,15 @@\n import tech.pegasys.teku.datastructures.operations.IndexedAttestation;\n \n public class DelayableAttestation {", "originalCommit": "b7602f4792b1c0e4098d291df9a40122e237bce2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI3NDU0NQ==", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431274545", "bodyText": "I'll add this to this PR's todos, and depending on how long this test fixings take, might work on this in this PR or another.", "author": "cemozerr", "createdAt": "2020-05-27T16:23:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgyNjYyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3NDU4MQ==", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431474581", "bodyText": "Did this.", "author": "cemozerr", "createdAt": "2020-05-27T22:17:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgyNjYyOA=="}], "type": "inlineReview", "revised_code": {"commit": "b0e7c1f69580fa7e1860651972058614e8ae382b", "chunk": "diff --git a/ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/DelayableAttestation.java b/ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/DelayableAttestation.java\nindex 710629ffc..4585cd35b 100644\n--- a/ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/DelayableAttestation.java\n+++ b/ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/DelayableAttestation.java\n\n@@ -28,8 +28,8 @@ public class DelayableAttestation {\n   private volatile Optional<IndexedAttestation> maybeIndexedAttestation = Optional.empty();\n \n   public DelayableAttestation(\n-          final ValidateableAttestation validateableAttestation,\n-          final Consumer<ValidateableAttestation> onSuccessfulProcessing) {\n+      final ValidateableAttestation validateableAttestation,\n+      final Consumer<ValidateableAttestation> onSuccessfulProcessing) {\n     this.validateableAttestation = validateableAttestation;\n     this.onSuccessfulProcessing = onSuccessfulProcessing;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgyNjc1OA==", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r430826758", "bodyText": "nit: probably make the constructor private since we have the two static factory methods.  And since it's then private, I'd be tempted to just have one constructor that takes Attestation, Optional<SignedAggregateAndProof> because the static methods still provide a nice external API.", "author": "ajsutton", "createdAt": "2020-05-27T02:43:47Z", "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package tech.pegasys.teku.datastructures.attestation;\n+\n+import tech.pegasys.teku.datastructures.operations.Attestation;\n+import tech.pegasys.teku.datastructures.operations.SignedAggregateAndProof;\n+\n+import java.util.Optional;\n+\n+public class ValidateableAttestation {\n+  private final Attestation attestation;\n+  private Optional<SignedAggregateAndProof> maybeAggregate = Optional.empty();\n+\n+  public static ValidateableAttestation fromSingle(Attestation attestation) {\n+    return new ValidateableAttestation(attestation);\n+  }\n+\n+  public static ValidateableAttestation fromAggregate(SignedAggregateAndProof attestation) {\n+    return new ValidateableAttestation(attestation);\n+  }\n+\n+  public ValidateableAttestation(Attestation attestation) {", "originalCommit": "b7602f4792b1c0e4098d291df9a40122e237bce2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIzOTc4MQ==", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431239781", "bodyText": "Makes sense. Done. Looks really clean after the change.", "author": "cemozerr", "createdAt": "2020-05-27T15:38:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgyNjc1OA=="}], "type": "inlineReview", "revised_code": {"commit": "b0e7c1f69580fa7e1860651972058614e8ae382b", "chunk": "diff --git a/ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java b/ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java\nindex 91cff08b8..9816dc32c 100644\n--- a/ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java\n+++ b/ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java\n\n@@ -1,10 +1,22 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n package tech.pegasys.teku.datastructures.attestation;\n \n+import java.util.Optional;\n import tech.pegasys.teku.datastructures.operations.Attestation;\n import tech.pegasys.teku.datastructures.operations.SignedAggregateAndProof;\n \n-import java.util.Optional;\n-\n public class ValidateableAttestation {\n   private final Attestation attestation;\n   private Optional<SignedAggregateAndProof> maybeAggregate = Optional.empty();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgyNzA4OA==", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r430827088", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (!isAggregate()) {\n          \n          \n            \n                  throw new UnsupportedOperationException(\"ValidateableAttestation is not an aggregate.\");\n          \n          \n            \n                }\n          \n          \n            \n                return maybeAggregate.get();\n          \n          \n            \n                return maybeAggregate.orElseThrow(() -> new UnsupportedOperationException(\"ValidateableAttestation is not an aggregate.\"));", "author": "ajsutton", "createdAt": "2020-05-27T02:45:09Z", "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package tech.pegasys.teku.datastructures.attestation;\n+\n+import tech.pegasys.teku.datastructures.operations.Attestation;\n+import tech.pegasys.teku.datastructures.operations.SignedAggregateAndProof;\n+\n+import java.util.Optional;\n+\n+public class ValidateableAttestation {\n+  private final Attestation attestation;\n+  private Optional<SignedAggregateAndProof> maybeAggregate = Optional.empty();\n+\n+  public static ValidateableAttestation fromSingle(Attestation attestation) {\n+    return new ValidateableAttestation(attestation);\n+  }\n+\n+  public static ValidateableAttestation fromAggregate(SignedAggregateAndProof attestation) {\n+    return new ValidateableAttestation(attestation);\n+  }\n+\n+  public ValidateableAttestation(Attestation attestation) {\n+    this.attestation = attestation;\n+  }\n+\n+  private ValidateableAttestation(SignedAggregateAndProof attestation) {\n+    maybeAggregate = Optional.of(attestation);\n+    this.attestation = attestation.getMessage().getAggregate();\n+  }\n+\n+  public boolean isAggregate() {\n+    return maybeAggregate.isPresent();\n+  }\n+\n+  public Attestation getAttestation() {\n+    return attestation;\n+  }\n+\n+  public SignedAggregateAndProof getSignedAggregateAndProof() {\n+    if (!isAggregate()) {\n+      throw new UnsupportedOperationException(\"ValidateableAttestation is not an aggregate.\");\n+    }\n+    return maybeAggregate.get();", "originalCommit": "b7602f4792b1c0e4098d291df9a40122e237bce2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI0MDE3Nw==", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431240177", "bodyText": "Nice suggestion!", "author": "cemozerr", "createdAt": "2020-05-27T15:39:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgyNzA4OA=="}], "type": "inlineReview", "revised_code": {"commit": "b0e7c1f69580fa7e1860651972058614e8ae382b", "chunk": "diff --git a/ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java b/ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java\nindex 91cff08b8..9816dc32c 100644\n--- a/ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java\n+++ b/ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java\n\n@@ -1,10 +1,22 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n package tech.pegasys.teku.datastructures.attestation;\n \n+import java.util.Optional;\n import tech.pegasys.teku.datastructures.operations.Attestation;\n import tech.pegasys.teku.datastructures.operations.SignedAggregateAndProof;\n \n-import java.util.Optional;\n-\n public class ValidateableAttestation {\n   private final Attestation attestation;\n   private Optional<SignedAggregateAndProof> maybeAggregate = Optional.empty();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgyODAzNg==", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r430828036", "bodyText": "This is an interesting case. We're really creating a ValidatableAttestation in the middle of processing which we were aiming to avoid.  We will have already performed some validation on the input attestations so theoretically could skip some of those (e.g. we should know the signature is valid).  Some things like the index attestation would have to be rebuilt though...\nProbably best to leave it as-is for now and just consider an aggregate as a completely new attestation, but interesting source of new ValidatableAttestation instances.", "author": "ajsutton", "createdAt": "2020-05-27T02:49:18Z", "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/AggregateAttestationBuilder.java", "diffHunk": "@@ -28,42 +29,47 @@\n  * made redundant by the current aggregate.\n  */\n class AggregateAttestationBuilder {\n-  private final Set<Attestation> includedAttestations = new HashSet<>();\n+  private final Set<ValidateableAttestation> includedAttestations = new HashSet<>();\n   private final AttestationData attestationData;\n   private Bitlist currentAggregateBits;\n \n   AggregateAttestationBuilder(final AttestationData attestationData) {\n     this.attestationData = attestationData;\n   }\n \n-  public boolean canAggregate(final Attestation candidate) {\n+  public boolean canAggregate(final ValidateableAttestation candidate) {\n     return currentAggregateBits == null\n-        || !currentAggregateBits.intersects(candidate.getAggregation_bits());\n+        || !currentAggregateBits.intersects(candidate.getAttestation().getAggregation_bits());\n   }\n \n-  public boolean isFullyIncluded(final Attestation candidate) {\n+  public boolean isFullyIncluded(final ValidateableAttestation candidate) {\n     return currentAggregateBits != null\n-        && currentAggregateBits.isSuperSetOf(candidate.getAggregation_bits());\n+        && currentAggregateBits.isSuperSetOf(candidate.getAttestation().getAggregation_bits());\n   }\n \n-  public void aggregate(final Attestation attestation) {\n+  public void aggregate(final ValidateableAttestation attestation) {\n     includedAttestations.add(attestation);\n     if (currentAggregateBits == null) {\n-      currentAggregateBits = attestation.getAggregation_bits().copy();\n+      currentAggregateBits = attestation.getAttestation().getAggregation_bits().copy();\n     } else {\n-      currentAggregateBits.setAllBits(attestation.getAggregation_bits());\n+      currentAggregateBits.setAllBits(attestation.getAttestation().getAggregation_bits());\n     }\n   }\n \n-  public Attestation buildAggregate() {\n+  public ValidateableAttestation buildAggregate() {\n     checkState(currentAggregateBits != null, \"Must aggregate at least one attestation\");\n-    return new Attestation(\n-        currentAggregateBits,\n-        attestationData,\n-        BLS.aggregate(includedAttestations.stream().map(Attestation::getAggregate_signature)));\n+    return ValidateableAttestation.fromSingle(new Attestation(\n+            currentAggregateBits,\n+            attestationData,\n+            BLS.aggregate(\n+                    includedAttestations\n+                            .stream()\n+                            .map(ValidateableAttestation::getAttestation)\n+                            .map(Attestation::getAggregate_signature))", "originalCommit": "b7602f4792b1c0e4098d291df9a40122e237bce2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0e7c1f69580fa7e1860651972058614e8ae382b", "chunk": "diff --git a/ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/AggregateAttestationBuilder.java b/ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/AggregateAttestationBuilder.java\nindex cceb0df76..9326f31c2 100644\n--- a/ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/AggregateAttestationBuilder.java\n+++ b/ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/AggregateAttestationBuilder.java\n\n@@ -58,15 +58,14 @@ class AggregateAttestationBuilder {\n \n   public ValidateableAttestation buildAggregate() {\n     checkState(currentAggregateBits != null, \"Must aggregate at least one attestation\");\n-    return ValidateableAttestation.fromSingle(new Attestation(\n+    return ValidateableAttestation.fromSingle(\n+        new Attestation(\n             currentAggregateBits,\n             attestationData,\n             BLS.aggregate(\n-                    includedAttestations\n-                            .stream()\n-                            .map(ValidateableAttestation::getAttestation)\n-                            .map(Attestation::getAggregate_signature))\n-    ));\n+                includedAttestations.stream()\n+                    .map(ValidateableAttestation::getAttestation)\n+                    .map(Attestation::getAggregate_signature))));\n   }\n \n   public Collection<ValidateableAttestation> getIncludedAttestations() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgyOTY4Mg==", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r430829682", "bodyText": "It's a small detail, but I would actually return a ValidatableAttestation from here.  It will wind up being immediately unwrapped in ValidatorApiHandler because that is the boundary between beacon chain and validator client so shouldn't share validation state, but if something else winds up using this in the future it would be handy to keep any information about what's been validated around.", "author": "ajsutton", "createdAt": "2020-05-27T02:55:41Z", "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/AggregatingAttestationPool.java", "diffHunk": "@@ -100,13 +103,15 @@ private void removeFromSlotMappings(final UnsignedLong slot, final Bytes32 dataR\n         .filter(group -> group.getAttestationData().canIncludeInBlockAtSlot(slot))\n         .flatMap(MatchingDataAttestationGroup::stream)\n         .limit(attestations.getMaxSize())\n+        .map(ValidateableAttestation::getAttestation)\n         .forEach(attestations::add);\n     return attestations;\n   }\n \n   public synchronized Optional<Attestation> createAggregateFor(\n       final AttestationData attestationData) {\n     return Optional.ofNullable(attestationGroupByDataHash.get(attestationData.hash_tree_root()))\n-        .flatMap(attestations -> attestations.stream().findFirst());\n+            .flatMap(attestations -> attestations.stream().findFirst())\n+            .map(ValidateableAttestation::getAttestation);", "originalCommit": "b7602f4792b1c0e4098d291df9a40122e237bce2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI2OTgzNg==", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431269836", "bodyText": "This makes me think that inheritance might be easier to manage ValidateableAttestation than delegation. If we chose inheritance, we would have access to both ValidateableAttestation and normal Attestation of the same attestation instance. Any thoughts on this?", "author": "cemozerr", "createdAt": "2020-05-27T16:15:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgyOTY4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI3MTE3Mw==", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431271173", "bodyText": "Made the change btw.", "author": "cemozerr", "createdAt": "2020-05-27T16:18:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgyOTY4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1MjAyMg==", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r432152022", "bodyText": "I missed this comment. Inheritance is tempting but I'd avoid it.  Generally preferring delegation over inheritance leads to much better composability and less complexity.\nI had considered if we should make Attestation an interface and then we'd have ValidatableAttestation and AttestationImpl (the current class for want of a better name) both implement it so you could still use a ValidatableAttestation as an Attestation.  But the lack of ability to find a good name is a sign that this isn't a great design and things like SSZ serialisation would likely cause us a lot of grief (another good reason to avoid reflection based magic).", "author": "ajsutton", "createdAt": "2020-05-28T22:09:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgyOTY4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "b0e7c1f69580fa7e1860651972058614e8ae382b", "chunk": "diff --git a/ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/AggregatingAttestationPool.java b/ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/AggregatingAttestationPool.java\nindex 54dfa8f8d..080226ab0 100644\n--- a/ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/AggregatingAttestationPool.java\n+++ b/ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/AggregatingAttestationPool.java\n\n@@ -111,7 +111,7 @@ public class AggregatingAttestationPool implements SlotEventsChannel {\n   public synchronized Optional<Attestation> createAggregateFor(\n       final AttestationData attestationData) {\n     return Optional.ofNullable(attestationGroupByDataHash.get(attestationData.hash_tree_root()))\n-            .flatMap(attestations -> attestations.stream().findFirst())\n-            .map(ValidateableAttestation::getAttestation);\n+        .flatMap(attestations -> attestations.stream().findFirst())\n+        .map(ValidateableAttestation::getAttestation);\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgyOTgzNA==", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r430829834", "bodyText": "I think you can use:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return SafeFuture.completedFuture(null);\n          \n          \n            \n                return SafeFuture.COMPLETE;", "author": "ajsutton", "createdAt": "2020-05-27T02:56:19Z", "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/AttestationManager.java", "diffHunk": "@@ -141,12 +130,12 @@ private void processAttestation(final DelayableAttestation delayableAttestation)\n   @Override\n   protected SafeFuture<?> doStart() {\n     eventBus.register(this);\n-    return this.pendingAttestations.start();\n+    return SafeFuture.completedFuture(null);", "originalCommit": "b7602f4792b1c0e4098d291df9a40122e237bce2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI0NTc0MQ==", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431245741", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-05-27T15:46:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgyOTgzNA=="}], "type": "inlineReview", "revised_code": {"commit": "2a8206762b46874f283d5124cf8555a77f0fe606", "chunk": "diff --git a/ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/AttestationManager.java b/ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/AttestationManager.java\nindex 23fc59454..22e616054 100644\n--- a/ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/AttestationManager.java\n+++ b/ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/AttestationManager.java\n\n@@ -130,12 +130,12 @@ public class AttestationManager extends Service implements SlotEventsChannel {\n   @Override\n   protected SafeFuture<?> doStart() {\n     eventBus.register(this);\n-    return SafeFuture.completedFuture(null);\n+    return SafeFuture.COMPLETE;\n   }\n \n   @Override\n   protected SafeFuture<?> doStop() {\n     eventBus.unregister(this);\n-    return SafeFuture.completedFuture(null);\n+    return SafeFuture.COMPLETE;\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgzMTIyNQ==", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r430831225", "bodyText": "Need to think about how we name this.  It's not really a pipe, but it's also not really a handler. Maybe just GossipedAttestationConsumer?  Not sure...", "author": "ajsutton", "createdAt": "2020-05-27T03:01:58Z", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/topics/UpstreamAttestationPipe.java", "diffHunk": "@@ -0,0 +1,7 @@\n+package tech.pegasys.teku.networking.eth2.gossip.topics;\n+\n+import tech.pegasys.teku.datastructures.attestation.ValidateableAttestation;\n+\n+public interface UpstreamAttestationPipe {", "originalCommit": "b7602f4792b1c0e4098d291df9a40122e237bce2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI1MzkyNg==", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431253926", "bodyText": "I like GossipedAttestationConsumer. I made the change. Although, I have to say, UpstreamAttestationPipe really made me feel like an old engineer dealing with serious plumbing issues :D", "author": "cemozerr", "createdAt": "2020-05-27T15:56:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgzMTIyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "b0e7c1f69580fa7e1860651972058614e8ae382b", "chunk": "diff --git a/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/topics/UpstreamAttestationPipe.java b/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/topics/UpstreamAttestationPipe.java\nindex 1ece80c0b..e405d46f5 100644\n--- a/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/topics/UpstreamAttestationPipe.java\n+++ b/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/topics/UpstreamAttestationPipe.java\n\n@@ -1,3 +1,16 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n package tech.pegasys.teku.networking.eth2.gossip.topics;\n \n import tech.pegasys.teku.datastructures.attestation.ValidateableAttestation;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgzMTY4Nw==", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r430831687", "bodyText": "I think we'll need to start sending these attestations to the AttestationManager since it won't pick it up from the eventBus anymore.  That's really what we want anyway design-wise.", "author": "ajsutton", "createdAt": "2020-05-27T03:04:01Z", "path": "validator/coordinator/src/main/java/tech/pegasys/teku/validator/coordinator/ValidatorApiHandler.java", "diffHunk": "@@ -213,13 +214,13 @@ public void subscribeToPersistentSubnets(Set<SubnetSubscription> subnetSubscript\n \n   @Override\n   public void sendSignedAttestation(final Attestation attestation) {\n-    attestationPool.add(attestation);\n+    attestationPool.add(ValidateableAttestation.fromSingle(attestation));\n     eventBus.post(attestation);\n   }\n \n   @Override\n   public void sendAggregateAndProof(final SignedAggregateAndProof aggregateAndProof) {\n-    attestationPool.add(aggregateAndProof.getMessage().getAggregate());\n+    attestationPool.add(ValidateableAttestation.fromAggregate(aggregateAndProof));\n     eventBus.post(aggregateAndProof);", "originalCommit": "b7602f4792b1c0e4098d291df9a40122e237bce2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI1MDY5Nw==", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431250697", "bodyText": "We still use EventBus at GossipManagers to take these attestations and put them on the wire. We could of course change that, but AttestationManager does not currently have a way of communicating downstream. On a different note, to add to your point, we have to consider our own attestations for our fork choice processing too, and sending them to AttestationManager would help fix that.", "author": "cemozerr", "createdAt": "2020-05-27T15:52:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgzMTY4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI1MTkzNw==", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431251937", "bodyText": "Sounds like we need to have a way of sending some attestations downstream from AttestationManager. This would be applicable both for network layer SAVED_FOR_FUTURE labeled attestations, and attestations that we generated ourselves.", "author": "cemozerr", "createdAt": "2020-05-27T15:54:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgzMTY4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3NDUwOA==", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431474508", "bodyText": "I've implemented passing ungossiped attestations downstream.", "author": "cemozerr", "createdAt": "2020-05-27T22:17:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDgzMTY4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "fa7a4e6e58ed95fe35e0e531aedce2ea3b0b4612", "chunk": "diff --git a/validator/coordinator/src/main/java/tech/pegasys/teku/validator/coordinator/ValidatorApiHandler.java b/validator/coordinator/src/main/java/tech/pegasys/teku/validator/coordinator/ValidatorApiHandler.java\nindex 262401456..72cc66094 100644\n--- a/validator/coordinator/src/main/java/tech/pegasys/teku/validator/coordinator/ValidatorApiHandler.java\n+++ b/validator/coordinator/src/main/java/tech/pegasys/teku/validator/coordinator/ValidatorApiHandler.java\n\n@@ -214,13 +221,13 @@ public class ValidatorApiHandler implements ValidatorApiChannel {\n \n   @Override\n   public void sendSignedAttestation(final Attestation attestation) {\n-    attestationPool.add(ValidateableAttestation.fromSingle(attestation));\n+    attestationManager.onAttestation(ValidateableAttestation.fromSingle(attestation));\n     eventBus.post(attestation);\n   }\n \n   @Override\n   public void sendAggregateAndProof(final SignedAggregateAndProof aggregateAndProof) {\n-    attestationPool.add(ValidateableAttestation.fromAggregate(aggregateAndProof));\n+    attestationManager.onAttestation(ValidateableAttestation.fromAggregate(aggregateAndProof));\n     eventBus.post(aggregateAndProof);\n   }\n \n"}}, {"oid": "b0e7c1f69580fa7e1860651972058614e8ae382b", "url": "https://github.com/ConsenSys/teku/commit/b0e7c1f69580fa7e1860651972058614e8ae382b", "message": "Run spotless", "committedDate": "2020-05-27T15:42:59Z", "type": "commit"}, {"oid": "bc8190f66382ff39680d2fd4b1e8e450ade193bf", "url": "https://github.com/ConsenSys/teku/commit/bc8190f66382ff39680d2fd4b1e8e450ade193bf", "message": "Have only one constructor", "committedDate": "2020-05-27T15:45:07Z", "type": "commit"}, {"oid": "87ed9c4efbc0217a4a3a91d3ed58e9aff205dddd", "url": "https://github.com/ConsenSys/teku/commit/87ed9c4efbc0217a4a3a91d3ed58e9aff205dddd", "message": "Refactor method", "committedDate": "2020-05-27T15:45:40Z", "type": "commit"}, {"oid": "55b1bea6b3aa0ebf1bc4e1b62a61109584fa03ee", "url": "https://github.com/ConsenSys/teku/commit/55b1bea6b3aa0ebf1bc4e1b62a61109584fa03ee", "message": "Run spotless", "committedDate": "2020-05-27T15:47:04Z", "type": "commit"}, {"oid": "2a8206762b46874f283d5124cf8555a77f0fe606", "url": "https://github.com/ConsenSys/teku/commit/2a8206762b46874f283d5124cf8555a77f0fe606", "message": "Use SafeFuture static variable", "committedDate": "2020-05-27T15:47:56Z", "type": "commit"}, {"oid": "90e3316e6c5543fb0ee7338ed62e79060ec6b301", "url": "https://github.com/ConsenSys/teku/commit/90e3316e6c5543fb0ee7338ed62e79060ec6b301", "message": "Rename custom attestation consuming interface", "committedDate": "2020-05-27T15:55:46Z", "type": "commit"}, {"oid": "bf4c50df876f8ddbea4d30c50d2232f7b8f28195", "url": "https://github.com/ConsenSys/teku/commit/bf4c50df876f8ddbea4d30c50d2232f7b8f28195", "message": "Return Validateable from createAggregate", "committedDate": "2020-05-27T16:21:38Z", "type": "commit"}, {"oid": "b9355865b8adda5ad6ee92d7c203f2e778199f24", "url": "https://github.com/ConsenSys/teku/commit/b9355865b8adda5ad6ee92d7c203f2e778199f24", "message": "Run spotless", "committedDate": "2020-05-27T16:26:50Z", "type": "commit"}, {"oid": "3c194951c6b55620e40c30368b14f932650b7364", "url": "https://github.com/ConsenSys/teku/commit/3c194951c6b55620e40c30368b14f932650b7364", "message": "Fix all tests", "committedDate": "2020-05-27T17:33:22Z", "type": "commit"}, {"oid": "8de16fe80b93c32e59175602ad72283a843d7d3b", "url": "https://github.com/ConsenSys/teku/commit/8de16fe80b93c32e59175602ad72283a843d7d3b", "message": "Add equals method to ValidateableAttestation", "committedDate": "2020-05-27T19:13:51Z", "type": "commit"}, {"oid": "1ecab24dccd51eb5ddf5f8112542f5ee43b41364", "url": "https://github.com/ConsenSys/teku/commit/1ecab24dccd51eb5ddf5f8112542f5ee43b41364", "message": "Fix test", "committedDate": "2020-05-27T19:16:29Z", "type": "commit"}, {"oid": "935e91c927dec40f0b17bf35a841c989c25f4329", "url": "https://github.com/ConsenSys/teku/commit/935e91c927dec40f0b17bf35a841c989c25f4329", "message": "Run spotless", "committedDate": "2020-05-27T19:18:56Z", "type": "commit"}, {"oid": "fa7a4e6e58ed95fe35e0e531aedce2ea3b0b4612", "url": "https://github.com/ConsenSys/teku/commit/fa7a4e6e58ed95fe35e0e531aedce2ea3b0b4612", "message": "Remove DelayableAttestations & pass ungossipped attestations to network", "committedDate": "2020-05-27T21:23:34Z", "type": "commit"}, {"oid": "91022bc495f5fe2df9240fe2f1e9d2b0b57c3742", "url": "https://github.com/ConsenSys/teku/commit/91022bc495f5fe2df9240fe2f1e9d2b0b57c3742", "message": "Run spotless", "committedDate": "2020-05-27T21:24:15Z", "type": "commit"}, {"oid": "8ab6e32d9faac8fcfe332bc4f8938370ad6f22cb", "url": "https://github.com/ConsenSys/teku/commit/8ab6e32d9faac8fcfe332bc4f8938370ad6f22cb", "message": "Fix tests again", "committedDate": "2020-05-27T22:20:34Z", "type": "commit"}, {"oid": "2b186c15e78b9036e06449537114112fa8743152", "url": "https://github.com/ConsenSys/teku/commit/2b186c15e78b9036e06449537114112fa8743152", "message": "Fix unit tests", "committedDate": "2020-05-28T02:41:02Z", "type": "commit"}, {"oid": "840aa20edc2aba32f67f20777b3bb300dfe72ea3", "url": "https://github.com/ConsenSys/teku/commit/840aa20edc2aba32f67f20777b3bb300dfe72ea3", "message": "Run spotless", "committedDate": "2020-05-28T02:41:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4MTUyOA==", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431581528", "bodyText": "I feel like we should always set the indexed attestation - we've calculated it now so may as well keep it for as long as we keep the Attestation around.  It shouldn't get used but just feels wrong to have a system setup to cache things like this and then not always cache them.", "author": "ajsutton", "createdAt": "2020-05-28T04:58:03Z", "path": "ethereum/core/src/main/java/tech/pegasys/teku/core/ForkChoiceUtil.java", "diffHunk": "@@ -290,24 +292,48 @@ private static boolean blockDescendsFromLatestFinalizedBlock(\n   @CheckReturnValue\n   public static AttestationProcessingResult on_attestation(\n       final MutableStore store,\n-      final Attestation attestation,\n+      final ValidateableAttestation validateableAttestation,\n       final StateTransition stateTransition,\n       final ForkChoiceStrategy forkChoiceStrategy) {\n \n+    Attestation attestation = validateableAttestation.getAttestation();\n     Checkpoint target = attestation.getData().getTarget();\n \n     return validateOnAttestation(store, attestation)\n         .ifSuccessful(() -> storeTargetCheckpointState(store, stateTransition, target))\n         .ifSuccessful(\n-            () ->\n-                validateAndApplyIndexedAttestation(store, attestation, target, forkChoiceStrategy));\n+            () -> {\n+              Optional<IndexedAttestation> maybeIndexedAttestation =\n+                  indexAndValidateAttestation(store, attestation, target);\n+\n+              if (maybeIndexedAttestation.isEmpty()) {\n+                return INVALID;\n+              }\n+\n+              IndexedAttestation indexedAttestation = maybeIndexedAttestation.get();\n+              AttestationProcessingResult result =\n+                  checkIfAttestationShouldBeSavedForFuture(store, attestation);\n+\n+              if (result.isSuccessful()) {\n+                forkChoiceStrategy.onAttestation(store, indexedAttestation);\n+              } else {\n+                validateableAttestation.setIndexedAttestation(indexedAttestation);", "originalCommit": "840aa20edc2aba32f67f20777b3bb300dfe72ea3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkzODA0OQ==", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431938049", "bodyText": "Makes sense. Done.", "author": "cemozerr", "createdAt": "2020-05-28T15:44:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4MTUyOA=="}], "type": "inlineReview", "revised_code": {"commit": "6822a1ed59e26e8a7208d2afcffb4061036ada6d", "chunk": "diff --git a/ethereum/core/src/main/java/tech/pegasys/teku/core/ForkChoiceUtil.java b/ethereum/core/src/main/java/tech/pegasys/teku/core/ForkChoiceUtil.java\nindex 6a91ef3ee..21eae07b9 100644\n--- a/ethereum/core/src/main/java/tech/pegasys/teku/core/ForkChoiceUtil.java\n+++ b/ethereum/core/src/main/java/tech/pegasys/teku/core/ForkChoiceUtil.java\n\n@@ -311,13 +311,12 @@ public class ForkChoiceUtil {\n               }\n \n               IndexedAttestation indexedAttestation = maybeIndexedAttestation.get();\n+              validateableAttestation.setIndexedAttestation(indexedAttestation);\n               AttestationProcessingResult result =\n                   checkIfAttestationShouldBeSavedForFuture(store, attestation);\n \n               if (result.isSuccessful()) {\n                 forkChoiceStrategy.onAttestation(store, indexedAttestation);\n-              } else {\n-                validateableAttestation.setIndexedAttestation(indexedAttestation);\n               }\n \n               return result;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4MTg5Nw==", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431581897", "bodyText": "These should be volatile since we might access from multiple threads.", "author": "ajsutton", "createdAt": "2020-05-28T04:59:40Z", "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.datastructures.attestation;\n+\n+import com.google.common.base.Objects;\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.datastructures.operations.Attestation;\n+import tech.pegasys.teku.datastructures.operations.IndexedAttestation;\n+import tech.pegasys.teku.datastructures.operations.SignedAggregateAndProof;\n+\n+public class ValidateableAttestation {\n+  private final Attestation attestation;\n+  private final Optional<SignedAggregateAndProof> maybeAggregate;\n+  private final AtomicBoolean gossiped;\n+\n+  private Optional<IndexedAttestation> maybeIndexedAttestation = Optional.empty();\n+  private Optional<Bytes32> hashTreeRoot = Optional.empty();", "originalCommit": "840aa20edc2aba32f67f20777b3bb300dfe72ea3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkzODg1NQ==", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431938855", "bodyText": "Make sense. Done.", "author": "cemozerr", "createdAt": "2020-05-28T15:45:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4MTg5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "178240960aafe60f06e391e1e98e9b8a5fa728c0", "chunk": "diff --git a/ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java b/ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java\nindex fe17afadb..2763c5b75 100644\n--- a/ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java\n+++ b/ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java\n\n@@ -28,8 +28,8 @@ public class ValidateableAttestation {\n   private final Optional<SignedAggregateAndProof> maybeAggregate;\n   private final AtomicBoolean gossiped;\n \n-  private Optional<IndexedAttestation> maybeIndexedAttestation = Optional.empty();\n-  private Optional<Bytes32> hashTreeRoot = Optional.empty();\n+  private volatile Optional<IndexedAttestation> maybeIndexedAttestation = Optional.empty();\n+  private volatile Optional<Bytes32> hashTreeRoot = Optional.empty();\n \n   public static ValidateableAttestation fromSingle(Attestation attestation) {\n     return new ValidateableAttestation(attestation, Optional.empty(), false);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4MjE2OA==", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431582168", "bodyText": "Initial value is always false so probably should just use\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private final AtomicBoolean gossiped;\n          \n          \n            \n              private final AtomicBoolean gossiped = new AtomicBoolean(false);", "author": "ajsutton", "createdAt": "2020-05-28T05:00:41Z", "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.datastructures.attestation;\n+\n+import com.google.common.base.Objects;\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.datastructures.operations.Attestation;\n+import tech.pegasys.teku.datastructures.operations.IndexedAttestation;\n+import tech.pegasys.teku.datastructures.operations.SignedAggregateAndProof;\n+\n+public class ValidateableAttestation {\n+  private final Attestation attestation;\n+  private final Optional<SignedAggregateAndProof> maybeAggregate;\n+  private final AtomicBoolean gossiped;", "originalCommit": "840aa20edc2aba32f67f20777b3bb300dfe72ea3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkzOTU0NQ==", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431939545", "bodyText": "Makes sense. Done.", "author": "cemozerr", "createdAt": "2020-05-28T15:47:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4MjE2OA=="}], "type": "inlineReview", "revised_code": {"commit": "178240960aafe60f06e391e1e98e9b8a5fa728c0", "chunk": "diff --git a/ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java b/ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java\nindex fe17afadb..2763c5b75 100644\n--- a/ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java\n+++ b/ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java\n\n@@ -28,8 +28,8 @@ public class ValidateableAttestation {\n   private final Optional<SignedAggregateAndProof> maybeAggregate;\n   private final AtomicBoolean gossiped;\n \n-  private Optional<IndexedAttestation> maybeIndexedAttestation = Optional.empty();\n-  private Optional<Bytes32> hashTreeRoot = Optional.empty();\n+  private volatile Optional<IndexedAttestation> maybeIndexedAttestation = Optional.empty();\n+  private volatile Optional<Bytes32> hashTreeRoot = Optional.empty();\n \n   public static ValidateableAttestation fromSingle(Attestation attestation) {\n     return new ValidateableAttestation(attestation, Optional.empty(), false);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4Mjc3OA==", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431582778", "bodyText": "Nothing appears to set hashTreeRoot.  Would probably make more sense to use guava's memoize function: this.hashTreeRoot = Suppliers.memoize(() -> attestation.hash_tree_root())  in the constructor (would then be Supplier<Bytes32> hashTreeRoot and just call hashTreeRoot.get() here.  The memoize function will handle ensuring the root is only calculated once and cached properly.", "author": "ajsutton", "createdAt": "2020-05-28T05:03:22Z", "path": "ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.datastructures.attestation;\n+\n+import com.google.common.base.Objects;\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.datastructures.operations.Attestation;\n+import tech.pegasys.teku.datastructures.operations.IndexedAttestation;\n+import tech.pegasys.teku.datastructures.operations.SignedAggregateAndProof;\n+\n+public class ValidateableAttestation {\n+  private final Attestation attestation;\n+  private final Optional<SignedAggregateAndProof> maybeAggregate;\n+  private final AtomicBoolean gossiped;\n+\n+  private Optional<IndexedAttestation> maybeIndexedAttestation = Optional.empty();\n+  private Optional<Bytes32> hashTreeRoot = Optional.empty();\n+\n+  public static ValidateableAttestation fromSingle(Attestation attestation) {\n+    return new ValidateableAttestation(attestation, Optional.empty(), false);\n+  }\n+\n+  public static ValidateableAttestation fromAggregate(SignedAggregateAndProof attestation) {\n+    return new ValidateableAttestation(\n+        attestation.getMessage().getAggregate(), Optional.of(attestation), false);\n+  }\n+\n+  private ValidateableAttestation(\n+      Attestation attestation,\n+      Optional<SignedAggregateAndProof> aggregateAndProof,\n+      boolean gossiped) {\n+    this.maybeAggregate = aggregateAndProof;\n+    this.attestation = attestation;\n+    this.gossiped = new AtomicBoolean(gossiped);\n+  }\n+\n+  public IndexedAttestation getIndexedAttestation() {\n+    return maybeIndexedAttestation.orElseThrow(\n+        () ->\n+            new UnsupportedOperationException(\n+                \"ValidateableAttestation does not have an IndexedAttestation yet.\"));\n+  }\n+\n+  public void setIndexedAttestation(IndexedAttestation maybeIndexedAttestation) {\n+    this.maybeIndexedAttestation = Optional.of(maybeIndexedAttestation);\n+  }\n+\n+  public boolean markGossiped() {\n+    return gossiped.compareAndSet(false, true);\n+  }\n+\n+  public boolean isGossiped() {\n+    return gossiped.get();\n+  }\n+\n+  public boolean isAggregate() {\n+    return maybeAggregate.isPresent();\n+  }\n+\n+  public Attestation getAttestation() {\n+    return attestation;\n+  }\n+\n+  public SignedAggregateAndProof getSignedAggregateAndProof() {\n+    return maybeAggregate.orElseThrow(\n+        () -> new UnsupportedOperationException(\"ValidateableAttestation is not an aggregate.\"));\n+  }\n+\n+  public UnsignedLong getEarliestSlotForForkChoiceProcessing() {\n+    return attestation.getEarliestSlotForForkChoiceProcessing();\n+  }\n+\n+  public Collection<Bytes32> getDependentBlockRoots() {\n+    return attestation.getDependentBlockRoots();\n+  }\n+\n+  public Bytes32 hash_tree_root() {\n+    return hashTreeRoot.orElse(attestation.hash_tree_root());", "originalCommit": "840aa20edc2aba32f67f20777b3bb300dfe72ea3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk0MDM4MQ==", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431940381", "bodyText": "I really was looking forward to using the Suppliers.memoize after Paul's PR. Cool!", "author": "cemozerr", "createdAt": "2020-05-28T15:48:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4Mjc3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk0MzI2MQ==", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431943261", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-05-28T15:52:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4Mjc3OA=="}], "type": "inlineReview", "revised_code": {"commit": "178240960aafe60f06e391e1e98e9b8a5fa728c0", "chunk": "diff --git a/ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java b/ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java\nindex fe17afadb..2763c5b75 100644\n--- a/ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java\n+++ b/ethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/attestation/ValidateableAttestation.java\n\n@@ -28,8 +28,8 @@ public class ValidateableAttestation {\n   private final Optional<SignedAggregateAndProof> maybeAggregate;\n   private final AtomicBoolean gossiped;\n \n-  private Optional<IndexedAttestation> maybeIndexedAttestation = Optional.empty();\n-  private Optional<Bytes32> hashTreeRoot = Optional.empty();\n+  private volatile Optional<IndexedAttestation> maybeIndexedAttestation = Optional.empty();\n+  private volatile Optional<Bytes32> hashTreeRoot = Optional.empty();\n \n   public static ValidateableAttestation fromSingle(Attestation attestation) {\n     return new ValidateableAttestation(attestation, Optional.empty(), false);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4MzQyOA==", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431583428", "bodyText": "Not sure it makes sense to only notify listeners if the attestation hasn't been gossiped.  We don't know that the listener is gossiping it and we aren't marking it as gossiped.  Suspect here we should always notify subscribers, and then the subscriber that does the gossiping can check if it has already gossiped the attestation and ignore the notification if required.\nThis method would then just be notifySubscribers\nSlightly tempted not to differentiate between single and aggregate attestations here either and again let consumers decide if they need to differentiate between the two.", "author": "ajsutton", "createdAt": "2020-05-28T05:06:05Z", "path": "ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/AttestationManager.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.statetransition.attestation;\n+\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.eventbus.Subscribe;\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.List;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.tuweni.bytes.Bytes32;\n+import tech.pegasys.teku.datastructures.attestation.ProcessedAggregateConsumer;\n+import tech.pegasys.teku.datastructures.attestation.ProcessedAttestationConsumer;\n+import tech.pegasys.teku.datastructures.attestation.ValidateableAttestation;\n+import tech.pegasys.teku.datastructures.blocks.SignedBeaconBlock;\n+import tech.pegasys.teku.service.serviceutils.Service;\n+import tech.pegasys.teku.statetransition.events.block.ImportedBlockEvent;\n+import tech.pegasys.teku.statetransition.util.FutureItems;\n+import tech.pegasys.teku.statetransition.util.PendingPool;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+import tech.pegasys.teku.util.events.Subscribers;\n+import tech.pegasys.teku.util.time.channels.SlotEventsChannel;\n+\n+public class AttestationManager extends Service implements SlotEventsChannel {\n+\n+  private static final Logger LOG = LogManager.getLogger();\n+\n+  private final EventBus eventBus;\n+  private final ForkChoiceAttestationProcessor attestationProcessor;\n+\n+  private final PendingPool<ValidateableAttestation> pendingAttestations;\n+  private final FutureItems<ValidateableAttestation> futureAttestations;\n+  private final AggregatingAttestationPool aggregatingAttestationPool;\n+\n+  private final Subscribers<ProcessedAttestationConsumer> processedAttestationSubscriber =\n+      Subscribers.create(true);\n+  private final Subscribers<ProcessedAggregateConsumer> processedAggregateSubscriber =\n+      Subscribers.create(true);\n+\n+  AttestationManager(\n+      final EventBus eventBus,\n+      final ForkChoiceAttestationProcessor attestationProcessor,\n+      final PendingPool<ValidateableAttestation> pendingAttestations,\n+      final FutureItems<ValidateableAttestation> futureAttestations,\n+      final AggregatingAttestationPool aggregatingAttestationPool) {\n+    this.eventBus = eventBus;\n+    this.attestationProcessor = attestationProcessor;\n+    this.pendingAttestations = pendingAttestations;\n+    this.futureAttestations = futureAttestations;\n+    this.aggregatingAttestationPool = aggregatingAttestationPool;\n+  }\n+\n+  public static AttestationManager create(\n+      final EventBus eventBus,\n+      final PendingPool<ValidateableAttestation> pendingAttestations,\n+      final FutureItems<ValidateableAttestation> futureAttestations,\n+      final ForkChoiceAttestationProcessor forkChoiceAttestationProcessor,\n+      final AggregatingAttestationPool aggregatingAttestationPool) {\n+    return new AttestationManager(\n+        eventBus,\n+        forkChoiceAttestationProcessor,\n+        pendingAttestations,\n+        futureAttestations,\n+        aggregatingAttestationPool);\n+  }\n+\n+  public void subscribeToProcessedAttestations(\n+      ProcessedAttestationConsumer processedAttestationConsumer) {\n+    processedAttestationSubscriber.subscribe(processedAttestationConsumer);\n+  }\n+\n+  public void subscribeToProcessedAggregates(\n+      ProcessedAggregateConsumer processedAggregateConsumer) {\n+    processedAggregateSubscriber.subscribe(processedAggregateConsumer);\n+  }\n+\n+  @Override\n+  public void onSlot(final UnsignedLong slot) {\n+    List<ValidateableAttestation> attestations = futureAttestations.prune(slot);\n+    attestations.stream()\n+        .map(ValidateableAttestation::getIndexedAttestation)\n+        .forEach(attestationProcessor::applyIndexedAttestationToForkChoice);\n+\n+    attestations.forEach(this::gossipAttestationIfNeeded);\n+  }\n+\n+  private void gossipAttestationIfNeeded(ValidateableAttestation attestation) {\n+    if (attestation.isGossiped()) {\n+      return;\n+    }\n+\n+    if (attestation.isAggregate()) {\n+      processedAggregateSubscriber.forEach(s -> s.accept(attestation));\n+    } else {\n+      processedAttestationSubscriber.forEach(s -> s.accept(attestation));\n+    }", "originalCommit": "840aa20edc2aba32f67f20777b3bb300dfe72ea3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk0NzE2Mg==", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431947162", "bodyText": "I was really on the line with both of your points here, and just did the way I did to make a decision and get feedback. Both points make sense to me.", "author": "cemozerr", "createdAt": "2020-05-28T15:57:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4MzQyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk1MTE3MQ==", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431951171", "bodyText": "The second point especially makes sense since AttestationManager normally does not care about aggregate or not, and ValidataeableAttestation itself handles the difference. So it doesn't make much sense for AttestationManager to separate the two in this one method.", "author": "cemozerr", "createdAt": "2020-05-28T16:03:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4MzQyOA=="}], "type": "inlineReview", "revised_code": {"commit": "7c4ce1153d44ca982b1f98b8fb23be0b310dbe67", "chunk": "diff --git a/ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/AttestationManager.java b/ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/AttestationManager.java\nindex 9f9b725e9..b71b3af98 100644\n--- a/ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/AttestationManager.java\n+++ b/ethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/AttestationManager.java\n\n@@ -20,8 +20,7 @@ import java.util.List;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.apache.tuweni.bytes.Bytes32;\n-import tech.pegasys.teku.datastructures.attestation.ProcessedAggregateConsumer;\n-import tech.pegasys.teku.datastructures.attestation.ProcessedAttestationConsumer;\n+import tech.pegasys.teku.datastructures.attestation.ProcessedAttestationListener;\n import tech.pegasys.teku.datastructures.attestation.ValidateableAttestation;\n import tech.pegasys.teku.datastructures.blocks.SignedBeaconBlock;\n import tech.pegasys.teku.service.serviceutils.Service;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4Njc4Mw==", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431586783", "bodyText": "I'd introduce an AttestationListener interface and use it here instead of AttestationManager.  Actually I think the same interface could be used here and for processed attestations (instead of ProcessedAttestationConsumer.  It's the same role for a listener (tell me about attestations) just applied in different contexts (and it's still much more specific than just Consumer<Attestation> which I think is useful.", "author": "ajsutton", "createdAt": "2020-05-28T05:18:44Z", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/Eth2Network.java", "diffHunk": "@@ -23,4 +24,6 @@\n   void unsubscribeFromAttestationSubnetId(final int subnetId);\n \n   void setLongTermAttestationSubnetSubscriptions(final Iterable<Integer> subnetIndices);\n+\n+  void subscribeToAttestations(AttestationManager attestationManager);", "originalCommit": "840aa20edc2aba32f67f20777b3bb300dfe72ea3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk3NzQzMg==", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431977432", "bodyText": "I believe you might have gotten this wrong. This method is for the networking layer to subscribe to the attestations processed by AttestationManager. The networking layer does not expose its gossip managers so I can't do AttestationManager.subscribeToProcessedAttestations(attestationGossipManager::onNewAttestation) at the BeaconChainController. I basically need to have access to both AttestationManager and GossipManagers in the same place and that's how I solved it. Does that make sense?", "author": "cemozerr", "createdAt": "2020-05-28T16:44:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4Njc4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk4NDczOA==", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431984738", "bodyText": "I've actually removed this method, and instead, I now pass in a Consumer<ProcessedAttestationListener> processedAttestationSubscription when constructing the ActiveEth2Network.  (I might make this a custom interface soon). At ActiveEt2Network initialization, I set this consumer to AttestationManager::subscribeToProcessedAttestations. Then at ActiveEth2Network startup, I use this consumer to pass in gossipManagers onAttestation methods to the AttestationManager.subscribeToProcessedAttestations.", "author": "cemozerr", "createdAt": "2020-05-28T16:56:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4Njc4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "7c4ce1153d44ca982b1f98b8fb23be0b310dbe67", "chunk": "diff --git a/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/Eth2Network.java b/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/Eth2Network.java\nindex 39bbdcd05..e67866060 100644\n--- a/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/Eth2Network.java\n+++ b/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/Eth2Network.java\n\n@@ -24,6 +25,4 @@ public interface Eth2Network extends P2PNetwork<Eth2Peer> {\n   void unsubscribeFromAttestationSubnetId(final int subnetId);\n \n   void setLongTermAttestationSubnetSubscriptions(final Iterable<Integer> subnetIndices);\n-\n-  void subscribeToAttestations(AttestationManager attestationManager);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4Njk0MQ==", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431586941", "bodyText": "nit: Probably could rename the method to attestationListener or attestationConsumer.", "author": "ajsutton", "createdAt": "2020-05-28T05:19:22Z", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/Eth2NetworkBuilder.java", "diffHunk": "@@ -151,6 +154,13 @@ public Eth2NetworkBuilder recentChainData(final RecentChainData recentChainData)\n     return this;\n   }\n \n+  public Eth2NetworkBuilder upstreamAttestationPipe(", "originalCommit": "840aa20edc2aba32f67f20777b3bb300dfe72ea3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAwNTQxNQ==", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r432005415", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-05-28T17:30:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4Njk0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "7c4ce1153d44ca982b1f98b8fb23be0b310dbe67", "chunk": "diff --git a/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/Eth2NetworkBuilder.java b/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/Eth2NetworkBuilder.java\nindex d08b52c54..06db13d76 100644\n--- a/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/Eth2NetworkBuilder.java\n+++ b/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/Eth2NetworkBuilder.java\n\n@@ -154,7 +160,14 @@ public class Eth2NetworkBuilder {\n     return this;\n   }\n \n-  public Eth2NetworkBuilder upstreamAttestationPipe(\n+  public Eth2NetworkBuilder processedAttestationSubscriptionProvider(\n+          final ProcessedAttestationSubscriptionProvider processedAttestationSubscriptionProvider) {\n+    checkNotNull(processedAttestationSubscriptionProvider);\n+    this.processedAttestationSubscriptionProvider = processedAttestationSubscriptionProvider;\n+    return this;\n+  }\n+\n+  public Eth2NetworkBuilder gossipedAttestationConsumer(\n       final GossipedAttestationConsumer gossipedAttestationConsumer) {\n     checkNotNull(gossipedAttestationConsumer);\n     this.gossipedAttestationConsumer = gossipedAttestationConsumer;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4OTQ5OA==", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r431589498", "bodyText": "nit: Probably rename this method too.", "author": "ajsutton", "createdAt": "2020-05-28T05:28:42Z", "path": "networking/eth2/src/testFixtures/java/tech/pegasys/teku/networking/eth2/Eth2NetworkFactory.java", "diffHunk": "@@ -246,6 +249,13 @@ public Eth2P2PNetworkBuilder recentChainData(final RecentChainData recentChainDa\n       return this;\n     }\n \n+    public Eth2P2PNetworkBuilder upstreamAttestationPipe(", "originalCommit": "840aa20edc2aba32f67f20777b3bb300dfe72ea3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAwNTM4OA==", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r432005388", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-05-28T17:30:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4OTQ5OA=="}], "type": "inlineReview", "revised_code": {"commit": "7c4ce1153d44ca982b1f98b8fb23be0b310dbe67", "chunk": "diff --git a/networking/eth2/src/testFixtures/java/tech/pegasys/teku/networking/eth2/Eth2NetworkFactory.java b/networking/eth2/src/testFixtures/java/tech/pegasys/teku/networking/eth2/Eth2NetworkFactory.java\nindex 241088afe..68f47eaf9 100644\n--- a/networking/eth2/src/testFixtures/java/tech/pegasys/teku/networking/eth2/Eth2NetworkFactory.java\n+++ b/networking/eth2/src/testFixtures/java/tech/pegasys/teku/networking/eth2/Eth2NetworkFactory.java\n\n@@ -249,13 +258,20 @@ public class Eth2NetworkFactory {\n       return this;\n     }\n \n-    public Eth2P2PNetworkBuilder upstreamAttestationPipe(\n+    public Eth2P2PNetworkBuilder gossipedAttestationConsumer(\n         final GossipedAttestationConsumer gossipedAttestationConsumer) {\n       checkNotNull(gossipedAttestationConsumer);\n       this.gossipedAttestationConsumer = gossipedAttestationConsumer;\n       return this;\n     }\n \n+    public Eth2P2PNetworkBuilder processedAttestationSubscriptionProvider(\n+            final ProcessedAttestationSubscriptionProvider processedAttestationSubscriptionProvider) {\n+      checkNotNull(processedAttestationSubscriptionProvider);\n+      this.processedAttestationSubscriptionProvider = processedAttestationSubscriptionProvider;\n+      return this;\n+    }\n+\n     public Eth2P2PNetworkBuilder rpcMethodsModifier(\n         Function<RpcMethod, Stream<RpcMethod>> rpcMethodsModifier) {\n       checkNotNull(rpcMethodsModifier);\n"}}, {"oid": "6822a1ed59e26e8a7208d2afcffb4061036ada6d", "url": "https://github.com/ConsenSys/teku/commit/6822a1ed59e26e8a7208d2afcffb4061036ada6d", "message": "Set indexed attestation cache regardless of attestation label", "committedDate": "2020-05-28T15:45:15Z", "type": "commit"}, {"oid": "178240960aafe60f06e391e1e98e9b8a5fa728c0", "url": "https://github.com/ConsenSys/teku/commit/178240960aafe60f06e391e1e98e9b8a5fa728c0", "message": "Make variables volatile", "committedDate": "2020-05-28T15:46:11Z", "type": "commit"}, {"oid": "2ce5fdcd21983e28201e14e9d704a50cf8f8792d", "url": "https://github.com/ConsenSys/teku/commit/2ce5fdcd21983e28201e14e9d704a50cf8f8792d", "message": "Set gossiped false on declaration", "committedDate": "2020-05-28T15:47:20Z", "type": "commit"}, {"oid": "30db74181ff15fe850066d922ce21e87f4b7781b", "url": "https://github.com/ConsenSys/teku/commit/30db74181ff15fe850066d922ce21e87f4b7781b", "message": "Use suppliers.memoize to cache the hashTreeRoot", "committedDate": "2020-05-28T15:52:36Z", "type": "commit"}, {"oid": "7c4ce1153d44ca982b1f98b8fb23be0b310dbe67", "url": "https://github.com/ConsenSys/teku/commit/7c4ce1153d44ca982b1f98b8fb23be0b310dbe67", "message": "Move gossiping logic to Networking layer & fix integration tests", "committedDate": "2020-05-28T17:31:53Z", "type": "commit"}, {"oid": "f100339ccd23d3b2a2ca736c262e03aebbb90885", "url": "https://github.com/ConsenSys/teku/commit/f100339ccd23d3b2a2ca736c262e03aebbb90885", "message": "Run spotless", "committedDate": "2020-05-28T17:35:01Z", "type": "commit"}, {"oid": "2c505b4e670ee0efeb3dbb59cf446546ca8c004f", "url": "https://github.com/ConsenSys/teku/commit/2c505b4e670ee0efeb3dbb59cf446546ca8c004f", "message": "Merge remote-tracking branch 'remotes/origin/master' into validateableAttestations\n\n# Conflicts:\n#\tethereum/core/src/main/java/tech/pegasys/teku/core/ForkChoiceUtil.java\n#\tethereum/datastructures/src/main/java/tech/pegasys/teku/datastructures/forkchoice/DelayableAttestation.java\n#\tethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/AttestationManager.java\n#\tethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/attestation/ForkChoiceAttestationProcessor.java\n#\tethereum/statetransition/src/main/java/tech/pegasys/teku/statetransition/forkchoice/ForkChoice.java\n#\tnetworking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/ActiveEth2Network.java\n#\tsync/src/test/java/tech/pegasys/teku/sync/AttestationManagerTest.java", "committedDate": "2020-05-28T17:54:04Z", "type": "commit"}, {"oid": "57f0b3b20c489fe075cf600aaff917a1f04f8d20", "url": "https://github.com/ConsenSys/teku/commit/57f0b3b20c489fe075cf600aaff917a1f04f8d20", "message": "Delete redundant file", "committedDate": "2020-05-28T18:12:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1NTE2NQ==", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r432155165", "bodyText": "Given you cleverly made markGossiped return a boolean, I'd do\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (validateableAttestation.isGossiped() || validateableAttestation.isAggregate()) {\n          \n          \n            \n                if (validateableAttestation.isAggregate() || !validateableAttestation.markedGossiped()) {\n          \n      \n    \n    \n  \n\nThen you have no risk of two thread gossiping it at the same time.  In any case you need to markGossiped here to be sure we don't gossip it again later (we shouldn't with the current flow of things but that may change).", "author": "ajsutton", "createdAt": "2020-05-28T22:17:40Z", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/AttestationGossipManager.java", "diffHunk": "@@ -28,22 +27,21 @@\n \n   private final GossipEncoding gossipEncoding;\n   private final AttestationSubnetSubscriptions subnetSubscriptions;\n-  private final EventBus eventBus;\n \n   private final AtomicBoolean shutdown = new AtomicBoolean(false);\n \n   public AttestationGossipManager(\n       final GossipEncoding gossipEncoding,\n-      final AttestationSubnetSubscriptions attestationSubnetSubscriptions,\n-      final EventBus eventBus) {\n+      final AttestationSubnetSubscriptions attestationSubnetSubscriptions) {\n     this.gossipEncoding = gossipEncoding;\n     subnetSubscriptions = attestationSubnetSubscriptions;\n-    this.eventBus = eventBus;\n-    eventBus.register(this);\n   }\n \n-  @Subscribe\n-  public void onNewAttestation(final Attestation attestation) {\n+  public void onNewAttestation(final ValidateableAttestation validateableAttestation) {\n+    if (validateableAttestation.isGossiped() || validateableAttestation.isAggregate()) {", "originalCommit": "57f0b3b20c489fe075cf600aaff917a1f04f8d20", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE3MDgwNQ==", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r432170805", "bodyText": "Oh good catch! Done.", "author": "cemozerr", "createdAt": "2020-05-28T23:03:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1NTE2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "57ea522431ec6882932af76af196b55a0bc354a2", "chunk": "diff --git a/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/AttestationGossipManager.java b/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/AttestationGossipManager.java\nindex 5fec7c558..46df9945e 100644\n--- a/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/AttestationGossipManager.java\n+++ b/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/AttestationGossipManager.java\n\n@@ -38,7 +38,7 @@ public class AttestationGossipManager {\n   }\n \n   public void onNewAttestation(final ValidateableAttestation validateableAttestation) {\n-    if (validateableAttestation.isGossiped() || validateableAttestation.isAggregate()) {\n+    if (validateableAttestation.isAggregate() || !validateableAttestation.markGossiped()) {\n       return;\n     }\n     final Attestation attestation = validateableAttestation.getAttestation();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1NTg3OQ==", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r432155879", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (validateableAttestation.isGossiped() || !validateableAttestation.isAggregate()) {\n          \n          \n            \n                if (!validateableAttestation.isAggregate() || !validateableAttestation.markGossiped()) {\n          \n      \n    \n    \n  \n\nas per comments below.", "author": "ajsutton", "createdAt": "2020-05-28T22:19:40Z", "path": "networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/AggregateGossipManager.java", "diffHunk": "@@ -37,26 +35,26 @@ public AggregateGossipManager(\n       final GossipEncoding gossipEncoding,\n       final ForkInfo forkInfo,\n       final SignedAggregateAndProofValidator validator,\n-      final EventBus eventBus) {\n+      final GossipedAttestationConsumer gossipedAttestationConsumer) {\n     this.gossipEncoding = gossipEncoding;\n-\n-    final AggregateTopicHandler aggregateTopicHandler =\n-        new AggregateTopicHandler(gossipEncoding, forkInfo, validator, eventBus);\n-    this.channel = gossipNetwork.subscribe(aggregateTopicHandler.getTopic(), aggregateTopicHandler);\n-\n-    this.eventBus = eventBus;\n-    eventBus.register(this);\n+    final AggregateAttestationTopicHandler aggregateAttestationTopicHandler =\n+        new AggregateAttestationTopicHandler(\n+            gossipEncoding, forkInfo, validator, gossipedAttestationConsumer);\n+    this.channel =\n+        gossipNetwork.subscribe(\n+            aggregateAttestationTopicHandler.getTopic(), aggregateAttestationTopicHandler);\n   }\n \n-  @Subscribe\n-  public void onNewAggregate(final SignedAggregateAndProof aggregateAndProof) {\n-    final Bytes data = gossipEncoding.encode(aggregateAndProof);\n+  public void onNewAggregate(final ValidateableAttestation validateableAttestation) {\n+    if (validateableAttestation.isGossiped() || !validateableAttestation.isAggregate()) {", "originalCommit": "57f0b3b20c489fe075cf600aaff917a1f04f8d20", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE3MjE1Mw==", "url": "https://github.com/ConsenSys/teku/pull/1971#discussion_r432172153", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-05-28T23:08:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE1NTg3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "57ea522431ec6882932af76af196b55a0bc354a2", "chunk": "diff --git a/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/AggregateGossipManager.java b/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/AggregateGossipManager.java\nindex 56e613743..ab7203f19 100644\n--- a/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/AggregateGossipManager.java\n+++ b/networking/eth2/src/main/java/tech/pegasys/teku/networking/eth2/gossip/AggregateGossipManager.java\n\n@@ -46,7 +46,7 @@ public class AggregateGossipManager {\n   }\n \n   public void onNewAggregate(final ValidateableAttestation validateableAttestation) {\n-    if (validateableAttestation.isGossiped() || !validateableAttestation.isAggregate()) {\n+    if (!validateableAttestation.isAggregate() || !validateableAttestation.markGossiped()) {\n       return;\n     }\n     final Bytes data = gossipEncoding.encode(validateableAttestation.getSignedAggregateAndProof());\n"}}, {"oid": "57ea522431ec6882932af76af196b55a0bc354a2", "url": "https://github.com/ConsenSys/teku/commit/57ea522431ec6882932af76af196b55a0bc354a2", "message": "Mark gossiped attestations", "committedDate": "2020-05-28T23:09:02Z", "type": "commit"}, {"oid": "6c17d278b2debbba598fa099a6f70a10e5363a47", "url": "https://github.com/ConsenSys/teku/commit/6c17d278b2debbba598fa099a6f70a10e5363a47", "message": "Mark valid attestations from network gossiped", "committedDate": "2020-05-28T23:10:18Z", "type": "commit"}, {"oid": "0fcd72f93f382c5ad6369576a30d9abec07fa20d", "url": "https://github.com/ConsenSys/teku/commit/0fcd72f93f382c5ad6369576a30d9abec07fa20d", "message": "Merge branch 'master' into validateableAttestations", "committedDate": "2020-05-28T23:12:29Z", "type": "commit"}, {"oid": "242ffdce5b3ca4c157512d1f165127229f205e43", "url": "https://github.com/ConsenSys/teku/commit/242ffdce5b3ca4c157512d1f165127229f205e43", "message": "Merge branch 'master' into validateableAttestations", "committedDate": "2020-05-28T23:30:11Z", "type": "commit"}, {"oid": "df7b15ddf77445020ae7558ff79e32f69203a8c7", "url": "https://github.com/ConsenSys/teku/commit/df7b15ddf77445020ae7558ff79e32f69203a8c7", "message": "Merge branch 'master' into validateableAttestations", "committedDate": "2020-05-29T01:13:03Z", "type": "commit"}]}