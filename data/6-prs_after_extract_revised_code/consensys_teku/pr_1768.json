{"pr_number": 1768, "pr_title": "Add validator client metrics", "pr_createdAt": "2020-05-12T03:54:14Z", "pr_url": "https://github.com/ConsenSys/teku/pull/1768", "timeline": [{"oid": "d4aa50190015f271c4e8ec8bdd9432c5de4f3edd", "url": "https://github.com/ConsenSys/teku/commit/d4aa50190015f271c4e8ec8bdd9432c5de4f3edd", "message": "Switch BeaconChainMetricsTest to actually test the metrics, not just the accessor methods.", "committedDate": "2020-05-12T00:38:09Z", "type": "commit"}, {"oid": "e05ea4dba9a75aef410909d3166bc869f125ee63", "url": "https://github.com/ConsenSys/teku/commit/e05ea4dba9a75aef410909d3166bc869f125ee63", "message": "Use api to automatically inherit the metrics classes for things that depend on our metrics model since they're inevitably going to be required.", "committedDate": "2020-05-12T01:13:27Z", "type": "commit"}, {"oid": "d155b07b30fc0aceff3cfb9dda06aecc62624f4f", "url": "https://github.com/ConsenSys/teku/commit/d155b07b30fc0aceff3cfb9dda06aecc62624f4f", "message": "Record metrics in the validator client:\n * Number of local validators\n * Counters for requests made to the beacon chain node\n * Current number of scheduled duties", "committedDate": "2020-05-12T03:47:19Z", "type": "commit"}, {"oid": "57efe37a754f8aa7aeb402be6dbc24e6c5553ffc", "url": "https://github.com/ConsenSys/teku/commit/57efe37a754f8aa7aeb402be6dbc24e6c5553ffc", "message": "Merge branch 'master' of github.com:PegaSysEng/teku into more-metrics", "committedDate": "2020-05-12T03:51:11Z", "type": "commit"}, {"oid": "095deebe94b86d9c5d8809bbab63dafa3e537136", "url": "https://github.com/ConsenSys/teku/commit/095deebe94b86d9c5d8809bbab63dafa3e537136", "message": "Check expected result is returned.", "committedDate": "2020-05-12T03:54:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg4OTk4MQ==", "url": "https://github.com/ConsenSys/teku/pull/1768#discussion_r423889981", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private Map<MetricCategory, Map<String, StubGauge>> guages = new ConcurrentHashMap<>();\n          \n          \n            \n              private Map<MetricCategory, Map<String, StubGauge>> gauges = new ConcurrentHashMap<>();", "author": "cemozerr", "createdAt": "2020-05-12T16:58:04Z", "path": "data/metrics/src/testFixtures/java/tech/pegasys/teku/metrics/StubMetricsSystem.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.metrics;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.DoubleSupplier;\n+import org.hyperledger.besu.plugin.services.MetricsSystem;\n+import org.hyperledger.besu.plugin.services.metrics.Counter;\n+import org.hyperledger.besu.plugin.services.metrics.LabelledMetric;\n+import org.hyperledger.besu.plugin.services.metrics.MetricCategory;\n+import org.hyperledger.besu.plugin.services.metrics.OperationTimer;\n+\n+public class StubMetricsSystem implements MetricsSystem {\n+\n+  private Map<MetricCategory, Map<String, StubCounter>> counters = new ConcurrentHashMap<>();\n+  private Map<MetricCategory, Map<String, StubGauge>> guages = new ConcurrentHashMap<>();", "originalCommit": "095deebe94b86d9c5d8809bbab63dafa3e537136", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAzMjM1Nw==", "url": "https://github.com/ConsenSys/teku/pull/1768#discussion_r424032357", "bodyText": "ugh, I hate that word! Get the spelling wrong all the time....", "author": "ajsutton", "createdAt": "2020-05-12T21:03:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg4OTk4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "8235ef3673b37e36dc750a1e35d312cd4f6f605a", "chunk": "diff --git a/data/metrics/src/testFixtures/java/tech/pegasys/teku/metrics/StubMetricsSystem.java b/data/metrics/src/testFixtures/java/tech/pegasys/teku/metrics/StubMetricsSystem.java\nindex 65404164a2..ac15d2c883 100644\n--- a/data/metrics/src/testFixtures/java/tech/pegasys/teku/metrics/StubMetricsSystem.java\n+++ b/data/metrics/src/testFixtures/java/tech/pegasys/teku/metrics/StubMetricsSystem.java\n\n@@ -26,7 +26,7 @@ import org.hyperledger.besu.plugin.services.metrics.OperationTimer;\n public class StubMetricsSystem implements MetricsSystem {\n \n   private Map<MetricCategory, Map<String, StubCounter>> counters = new ConcurrentHashMap<>();\n-  private Map<MetricCategory, Map<String, StubGauge>> guages = new ConcurrentHashMap<>();\n+  private Map<MetricCategory, Map<String, StubGauge>> gauges = new ConcurrentHashMap<>();\n \n   @Override\n   public LabelledMetric<Counter> createLabelledCounter(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg5MjI2Mg==", "url": "https://github.com/ConsenSys/teku/pull/1768#discussion_r423892262", "bodyText": "In line with how you did in createGauge, wouldn't it make more sense to check if a labeled counter with the same name exists? and throw an error if yes?", "author": "cemozerr", "createdAt": "2020-05-12T17:01:28Z", "path": "data/metrics/src/testFixtures/java/tech/pegasys/teku/metrics/StubMetricsSystem.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.metrics;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.DoubleSupplier;\n+import org.hyperledger.besu.plugin.services.MetricsSystem;\n+import org.hyperledger.besu.plugin.services.metrics.Counter;\n+import org.hyperledger.besu.plugin.services.metrics.LabelledMetric;\n+import org.hyperledger.besu.plugin.services.metrics.MetricCategory;\n+import org.hyperledger.besu.plugin.services.metrics.OperationTimer;\n+\n+public class StubMetricsSystem implements MetricsSystem {\n+\n+  private Map<MetricCategory, Map<String, StubCounter>> counters = new ConcurrentHashMap<>();\n+  private Map<MetricCategory, Map<String, StubGauge>> guages = new ConcurrentHashMap<>();\n+\n+  @Override\n+  public LabelledMetric<Counter> createLabelledCounter(\n+      final MetricCategory category,\n+      final String name,\n+      final String help,\n+      final String... labelNames) {\n+    return counters", "originalCommit": "095deebe94b86d9c5d8809bbab63dafa3e537136", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAzMTg4NA==", "url": "https://github.com/ConsenSys/teku/pull/1768#discussion_r424031884", "bodyText": "No, the stub matches what the real system does - if you create the same counter twice it makes sense to just give you the same one as you're just incrementing each time.  That makes life a lot easier when counters are created in classes that get created multiple times etc.\nFor gauges though you can't just sum the values - if you have two with the same name you have to pick one to use and if you're recreating the same gauge all the time it can lead to a memory leak because the value supplier typically has a reference back to the parent class to access data and now the metrics system has a reference to the value supplier to the parent and everything it references can't be GC'd.", "author": "ajsutton", "createdAt": "2020-05-12T21:02:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg5MjI2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "8235ef3673b37e36dc750a1e35d312cd4f6f605a", "chunk": "diff --git a/data/metrics/src/testFixtures/java/tech/pegasys/teku/metrics/StubMetricsSystem.java b/data/metrics/src/testFixtures/java/tech/pegasys/teku/metrics/StubMetricsSystem.java\nindex 65404164a2..ac15d2c883 100644\n--- a/data/metrics/src/testFixtures/java/tech/pegasys/teku/metrics/StubMetricsSystem.java\n+++ b/data/metrics/src/testFixtures/java/tech/pegasys/teku/metrics/StubMetricsSystem.java\n\n@@ -26,7 +26,7 @@ import org.hyperledger.besu.plugin.services.metrics.OperationTimer;\n public class StubMetricsSystem implements MetricsSystem {\n \n   private Map<MetricCategory, Map<String, StubCounter>> counters = new ConcurrentHashMap<>();\n-  private Map<MetricCategory, Map<String, StubGauge>> guages = new ConcurrentHashMap<>();\n+  private Map<MetricCategory, Map<String, StubGauge>> gauges = new ConcurrentHashMap<>();\n \n   @Override\n   public LabelledMetric<Counter> createLabelledCounter(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkxMjk5Nw==", "url": "https://github.com/ConsenSys/teku/pull/1768#discussion_r423912997", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    MetricRecordingValidatorApiChannelTest.requestDataTest(\n          \n          \n            \n                    requestDataTest(", "author": "cemozerr", "createdAt": "2020-05-12T17:35:17Z", "path": "validator/client/src/test/java/tech/pegasys/teku/validator/client/metrics/MetricRecordingValidatorApiChannelTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.validator.client.metrics;\n+\n+import static java.util.Collections.emptySet;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Collections;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import tech.pegasys.teku.bls.BLSSignature;\n+import tech.pegasys.teku.datastructures.operations.AttestationData;\n+import tech.pegasys.teku.datastructures.util.DataStructureUtil;\n+import tech.pegasys.teku.metrics.StubMetricsSystem;\n+import tech.pegasys.teku.metrics.TekuMetricCategory;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+import tech.pegasys.teku.validator.api.ValidatorApiChannel;\n+import tech.pegasys.teku.validator.client.metrics.BeaconChainRequestCounter.RequestOutcome;\n+\n+class MetricRecordingValidatorApiChannelTest {\n+\n+  private final ValidatorApiChannel delegate = mock(ValidatorApiChannel.class);\n+  private final StubMetricsSystem metricsSystem = new StubMetricsSystem();\n+  private final MetricRecordingValidatorApiChannel apiChannel =\n+      new MetricRecordingValidatorApiChannel(metricsSystem, delegate);\n+\n+  @ParameterizedTest(name = \"{displayName} - {0}\")\n+  @MethodSource(\"getDataRequestArguments\")\n+  public void shouldRecordSuccessfulRequestForData(\n+      final String name,\n+      final Function<ValidatorApiChannel, SafeFuture<Optional<Object>>> method,\n+      final String counterName,\n+      final Object value) {\n+    final Optional<Object> response = Optional.of(value);\n+    when(method.apply(delegate)).thenReturn(SafeFuture.completedFuture(response));\n+\n+    final SafeFuture<Optional<Object>> result = method.apply(apiChannel);\n+\n+    assertThat(result).isCompletedWithValue(response);\n+\n+    assertThat(getCounterValue(counterName, RequestOutcome.SUCCESS)).isEqualTo(1);\n+    assertThat(getCounterValue(counterName, RequestOutcome.ERROR)).isZero();\n+    assertThat(getCounterValue(counterName, RequestOutcome.DATA_UNAVAILABLE)).isZero();\n+  }\n+\n+  @ParameterizedTest(name = \"{displayName} - {0}\")\n+  @MethodSource(\"getDataRequestArguments\")\n+  public void shouldRecordFailedRequestForData(\n+      final String name,\n+      final Function<ValidatorApiChannel, SafeFuture<Optional<Object>>> method,\n+      final String counterName,\n+      final Object value) {\n+    final RuntimeException exception = new RuntimeException(\"Nope\");\n+    when(method.apply(delegate)).thenReturn(SafeFuture.failedFuture(exception));\n+\n+    final SafeFuture<Optional<Object>> result = method.apply(apiChannel);\n+    assertThat(result).isCompletedExceptionally();\n+    assertThatThrownBy(result::join).hasRootCause(exception);\n+\n+    assertThat(getCounterValue(counterName, RequestOutcome.ERROR)).isEqualTo(1);\n+    assertThat(getCounterValue(counterName, RequestOutcome.SUCCESS)).isZero();\n+    assertThat(getCounterValue(counterName, RequestOutcome.DATA_UNAVAILABLE)).isZero();\n+  }\n+\n+  @ParameterizedTest(name = \"{displayName} - {0}\")\n+  @MethodSource(\"getDataRequestArguments\")\n+  public void shouldRecordRequestForDataWhenDataUnavailable(\n+      final String name,\n+      final Function<ValidatorApiChannel, SafeFuture<Optional<Object>>> method,\n+      final String counterName,\n+      final Object value) {\n+    when(method.apply(delegate)).thenReturn(SafeFuture.completedFuture(Optional.empty()));\n+\n+    final SafeFuture<Optional<Object>> result = method.apply(apiChannel);\n+    assertThat(result).isCompletedWithValue(Optional.empty());\n+\n+    assertThat(getCounterValue(counterName, RequestOutcome.DATA_UNAVAILABLE)).isEqualTo(1);\n+    assertThat(getCounterValue(counterName, RequestOutcome.SUCCESS)).isZero();\n+    assertThat(getCounterValue(counterName, RequestOutcome.ERROR)).isZero();\n+  }\n+\n+  @ParameterizedTest(name = \"{displayName} - {0}\")\n+  @MethodSource(\"getNoResponseCallArguments\")\n+  public void shouldRecordCallsWithNoResponse(\n+      final String name, final Consumer<ValidatorApiChannel> method, final String counterName) {\n+    method.accept(apiChannel);\n+\n+    assertThat(metricsSystem.getCounter(TekuMetricCategory.VALIDATOR, counterName).getValue())\n+        .isEqualTo(1);\n+  }\n+\n+  public static Stream<Arguments> getNoResponseCallArguments() {\n+    final DataStructureUtil dataStructureUtil = new DataStructureUtil();\n+    return Stream.of(\n+        noResponseTest(\n+            \"subscribeToBeaconCommitteeForAggregation\",\n+            channel -> channel.subscribeToBeaconCommitteeForAggregation(1, UnsignedLong.ZERO),\n+            MetricRecordingValidatorApiChannel.AGGREGATION_SUBSCRIPTION_COUNTER_NAME),\n+        noResponseTest(\n+            \"subscribeToPersistentSubnets\",\n+            channel -> channel.subscribeToPersistentSubnets(emptySet()),\n+            MetricRecordingValidatorApiChannel.PERSISTENT_SUBSCRIPTION_COUNTER_NAME),\n+        noResponseTest(\n+            \"sendSignedAttestation\",\n+            channel -> channel.sendSignedAttestation(dataStructureUtil.randomAttestation()),\n+            MetricRecordingValidatorApiChannel.PUBLISHED_ATTESTATION_COUNTER_NAME),\n+        noResponseTest(\n+            \"sendAggregateAndProof\",\n+            channel ->\n+                channel.sendAggregateAndProof(dataStructureUtil.randomSignedAggregateAndProof()),\n+            MetricRecordingValidatorApiChannel.PUBLISHED_AGGREGATE_COUNTER_NAME),\n+        noResponseTest(\n+            \"sendSignedBlock\",\n+            channel -> channel.sendSignedBlock(dataStructureUtil.randomSignedBeaconBlock(1)),\n+            MetricRecordingValidatorApiChannel.PUBLISHED_BLOCK_COUNTER_NAME));\n+  }\n+\n+  private static Arguments noResponseTest(\n+      final String name, final Consumer<ValidatorApiChannel> method, final String counterName) {\n+    return Arguments.of(name, method, counterName);\n+  }\n+\n+  public static Stream<Arguments> getDataRequestArguments() {\n+    final DataStructureUtil dataStructureUtil = new DataStructureUtil();\n+    final UnsignedLong slot = dataStructureUtil.randomUnsignedLong();\n+    final BLSSignature signature = dataStructureUtil.randomSignature();\n+    final AttestationData attestationData = dataStructureUtil.randomAttestationData();\n+    return Stream.of(\n+        requestDataTest(\n+            \"getForkInfo\",\n+            ValidatorApiChannel::getForkInfo,\n+            MetricRecordingValidatorApiChannel.FORK_REQUESTS_COUNTER_NAME,\n+            dataStructureUtil.randomForkInfo()),\n+        MetricRecordingValidatorApiChannelTest.requestDataTest(", "originalCommit": "095deebe94b86d9c5d8809bbab63dafa3e537136", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8235ef3673b37e36dc750a1e35d312cd4f6f605a", "chunk": "diff --git a/validator/client/src/test/java/tech/pegasys/teku/validator/client/metrics/MetricRecordingValidatorApiChannelTest.java b/validator/client/src/test/java/tech/pegasys/teku/validator/client/metrics/MetricRecordingValidatorApiChannelTest.java\nindex 62fa64ed3c..65c3f3a41f 100644\n--- a/validator/client/src/test/java/tech/pegasys/teku/validator/client/metrics/MetricRecordingValidatorApiChannelTest.java\n+++ b/validator/client/src/test/java/tech/pegasys/teku/validator/client/metrics/MetricRecordingValidatorApiChannelTest.java\n\n@@ -151,7 +151,7 @@ class MetricRecordingValidatorApiChannelTest {\n             ValidatorApiChannel::getForkInfo,\n             MetricRecordingValidatorApiChannel.FORK_REQUESTS_COUNTER_NAME,\n             dataStructureUtil.randomForkInfo()),\n-        MetricRecordingValidatorApiChannelTest.requestDataTest(\n+        requestDataTest(\n             \"getDuties\",\n             channel -> channel.getDuties(slot, Collections.emptyList()),\n             MetricRecordingValidatorApiChannel.DUTIES_REQUESTS_COUNTER_NAME,\n"}}, {"oid": "8235ef3673b37e36dc750a1e35d312cd4f6f605a", "url": "https://github.com/ConsenSys/teku/commit/8235ef3673b37e36dc750a1e35d312cd4f6f605a", "message": "Tidy ups.", "committedDate": "2020-05-12T21:04:11Z", "type": "commit"}, {"oid": "2d8848c9f8e698ed24be688b1c347b74b21b5a17", "url": "https://github.com/ConsenSys/teku/commit/2d8848c9f8e698ed24be688b1c347b74b21b5a17", "message": "Merge branch 'master' of github.com:PegaSysEng/teku into more-metrics", "committedDate": "2020-05-12T21:04:17Z", "type": "commit"}]}