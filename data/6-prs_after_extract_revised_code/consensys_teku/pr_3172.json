{"pr_number": 3172, "pr_title": "Implement post attester slashing handler", "pr_createdAt": "2020-11-06T20:13:13Z", "pr_url": "https://github.com/ConsenSys/teku/pull/3172", "timeline": [{"oid": "174d1c1a1302fdb48d0683cfaa5cf2108ce91d33", "url": "https://github.com/ConsenSys/teku/commit/174d1c1a1302fdb48d0683cfaa5cf2108ce91d33", "message": "Implement post attester slashing handler and unit tests", "committedDate": "2020-11-06T20:12:28Z", "type": "commit"}, {"oid": "dbdeafda2259528ccc86fd275a7fed2f03e470d2", "url": "https://github.com/ConsenSys/teku/commit/dbdeafda2259528ccc86fd275a7fed2f03e470d2", "message": "Fix async code", "committedDate": "2020-11-06T21:24:27Z", "type": "commit"}, {"oid": "e9f4f6d479c313c867a7c6f4a55f4bbf30adba92", "url": "https://github.com/ConsenSys/teku/commit/e9f4f6d479c313c867a7c6f4a55f4bbf30adba92", "message": "Add unit test", "committedDate": "2020-11-06T21:50:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3ODYwNA==", "url": "https://github.com/ConsenSys/teku/pull/3172#discussion_r519478604", "bodyText": "could just call your other constructor that requires nodeDataProvider like in PostAttestation...", "author": "rolfyone", "createdAt": "2020-11-08T21:20:38Z", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostAttesterSlashing.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_V1_BEACON;\n+import static tech.pegasys.teku.infrastructure.http.HttpStatusCodes.SC_BAD_REQUEST;\n+import static tech.pegasys.teku.infrastructure.http.HttpStatusCodes.SC_OK;\n+\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import io.javalin.http.Context;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiRequestBody;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.schema.AttesterSlashing;\n+import tech.pegasys.teku.beaconrestapi.handlers.AbstractHandler;\n+import tech.pegasys.teku.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.teku.provider.JsonProvider;\n+import tech.pegasys.teku.statetransition.validation.InternalValidationResult;\n+\n+public class PostAttesterSlashing extends AbstractHandler {\n+  public static final String ROUTE = \"/eth/v1/beacon/pool/attester_slashings\";\n+  private final NodeDataProvider nodeDataProvider;\n+\n+  public PostAttesterSlashing(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = dataProvider.getNodeDataProvider();", "originalCommit": "e9f4f6d479c313c867a7c6f4a55f4bbf30adba92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAxNjczMA==", "url": "https://github.com/ConsenSys/teku/pull/3172#discussion_r520016730", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-11-09T18:11:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3ODYwNA=="}], "type": "inlineReview", "revised_code": {"commit": "8d91c84311fe128e3bf3b604a3a5221a7abb740f", "chunk": "diff --git a/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostAttesterSlashing.java b/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostAttesterSlashing.java\nindex ba9ee1f517..e41ea8ae1d 100644\n--- a/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostAttesterSlashing.java\n+++ b/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostAttesterSlashing.java\n\n@@ -40,8 +40,7 @@ public class PostAttesterSlashing extends AbstractHandler {\n   private final NodeDataProvider nodeDataProvider;\n \n   public PostAttesterSlashing(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n-    super(jsonProvider);\n-    this.nodeDataProvider = dataProvider.getNodeDataProvider();\n+    this(dataProvider.getNodeDataProvider(), jsonProvider);\n   }\n \n   public PostAttesterSlashing(final NodeDataProvider provider, final JsonProvider jsonProvider) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3OTQxNw==", "url": "https://github.com/ConsenSys/teku/pull/3172#discussion_r519479417", "bodyText": "can't do this and get decent json.\nctx.result(BadRequest.badRequest(jsonProvider, \"Invalid attester slashing, it will never pass validation so it's rejected.\"));", "author": "rolfyone", "createdAt": "2020-11-08T21:29:10Z", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostAttesterSlashing.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_V1_BEACON;\n+import static tech.pegasys.teku.infrastructure.http.HttpStatusCodes.SC_BAD_REQUEST;\n+import static tech.pegasys.teku.infrastructure.http.HttpStatusCodes.SC_OK;\n+\n+import com.fasterxml.jackson.databind.JsonMappingException;\n+import io.javalin.http.Context;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiRequestBody;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.schema.AttesterSlashing;\n+import tech.pegasys.teku.beaconrestapi.handlers.AbstractHandler;\n+import tech.pegasys.teku.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.teku.provider.JsonProvider;\n+import tech.pegasys.teku.statetransition.validation.InternalValidationResult;\n+\n+public class PostAttesterSlashing extends AbstractHandler {\n+  public static final String ROUTE = \"/eth/v1/beacon/pool/attester_slashings\";\n+  private final NodeDataProvider nodeDataProvider;\n+\n+  public PostAttesterSlashing(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = dataProvider.getNodeDataProvider();\n+  }\n+\n+  public PostAttesterSlashing(final NodeDataProvider provider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.nodeDataProvider = provider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.POST,\n+      summary = \"Submit attester slashing object\",\n+      tags = {TAG_V1_BEACON},\n+      description =\n+          \"Submits attester slashing object to node's pool and if passes validation node MUST broadcast it to network.\",\n+      requestBody = @OpenApiRequestBody(content = {@OpenApiContent(from = AttesterSlashing.class)}),\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            description =\n+                \"Attester Slashing has been successfully validated, added to the pool, and broadcast.\"),\n+        @OpenApiResponse(\n+            status = RES_BAD_REQUEST,\n+            description =\n+                \"Invalid attester slashing, it will never pass validation so it's rejected\"),\n+        @OpenApiResponse(status = RES_INTERNAL_ERROR),\n+      })\n+  @Override\n+  public void handle(final Context ctx) throws Exception {\n+    try {\n+      final AttesterSlashing attesterSlashing =\n+          jsonProvider.jsonToObject(ctx.body(), AttesterSlashing.class);\n+      InternalValidationResult result =\n+          nodeDataProvider.postAttesterSlashing(attesterSlashing).join();\n+      if (result.equals(InternalValidationResult.IGNORE)\n+          || result.equals(InternalValidationResult.REJECT)) {\n+        ctx.status(SC_BAD_REQUEST);\n+        ctx.result(\"Invalid attester slashing, it will never pass validation so it's rejected\");", "originalCommit": "e9f4f6d479c313c867a7c6f4a55f4bbf30adba92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAxNjkzMQ==", "url": "https://github.com/ConsenSys/teku/pull/3172#discussion_r520016931", "bodyText": "Done.", "author": "cemozerr", "createdAt": "2020-11-09T18:11:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3OTQxNw=="}], "type": "inlineReview", "revised_code": {"commit": "8d91c84311fe128e3bf3b604a3a5221a7abb740f", "chunk": "diff --git a/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostAttesterSlashing.java b/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostAttesterSlashing.java\nindex ba9ee1f517..e41ea8ae1d 100644\n--- a/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostAttesterSlashing.java\n+++ b/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostAttesterSlashing.java\n\n@@ -40,8 +40,7 @@ public class PostAttesterSlashing extends AbstractHandler {\n   private final NodeDataProvider nodeDataProvider;\n \n   public PostAttesterSlashing(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n-    super(jsonProvider);\n-    this.nodeDataProvider = dataProvider.getNodeDataProvider();\n+    this(dataProvider.getNodeDataProvider(), jsonProvider);\n   }\n \n   public PostAttesterSlashing(final NodeDataProvider provider, final JsonProvider jsonProvider) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ4MDU5NQ==", "url": "https://github.com/ConsenSys/teku/pull/3172#discussion_r519480595", "bodyText": "can probably accept slashing rather than any", "author": "rolfyone", "createdAt": "2020-11-08T21:39:55Z", "path": "data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostAttesterSlashingTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import io.javalin.http.Context;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.schema.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.util.DataStructureUtil;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.provider.JsonProvider;\n+import tech.pegasys.teku.statetransition.validation.InternalValidationResult;\n+\n+public class PostAttesterSlashingTest {\n+  private final DataStructureUtil dataStructureUtil = new DataStructureUtil();\n+  private Context context = mock(Context.class);\n+  private NodeDataProvider provider = mock(NodeDataProvider.class);\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private PostAttesterSlashing handler;\n+\n+  @BeforeEach\n+  public void setup() {\n+    handler = new PostAttesterSlashing(provider, jsonProvider);\n+  }\n+\n+  @Test\n+  void shouldBeAbleToSubmitSlashing() throws Exception {\n+    final AttesterSlashing slashing =\n+        new AttesterSlashing(dataStructureUtil.randomAttesterSlashing());\n+    when(context.body()).thenReturn(jsonProvider.objectToJSON(slashing));\n+    when(provider.postAttesterSlashing(any()))", "originalCommit": "e9f4f6d479c313c867a7c6f4a55f4bbf30adba92", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d91c84311fe128e3bf3b604a3a5221a7abb740f", "chunk": "diff --git a/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostAttesterSlashingTest.java b/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostAttesterSlashingTest.java\nindex a7b7ae29f4..8121b3f730 100644\n--- a/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostAttesterSlashingTest.java\n+++ b/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostAttesterSlashingTest.java\n\n@@ -17,6 +17,7 @@ import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n import static javax.servlet.http.HttpServletResponse.SC_OK;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ4MDYzMA==", "url": "https://github.com/ConsenSys/teku/pull/3172#discussion_r519480630", "bodyText": "accept slashing rather than any", "author": "rolfyone", "createdAt": "2020-11-08T21:40:09Z", "path": "data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostAttesterSlashingTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import io.javalin.http.Context;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.schema.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.util.DataStructureUtil;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.provider.JsonProvider;\n+import tech.pegasys.teku.statetransition.validation.InternalValidationResult;\n+\n+public class PostAttesterSlashingTest {\n+  private final DataStructureUtil dataStructureUtil = new DataStructureUtil();\n+  private Context context = mock(Context.class);\n+  private NodeDataProvider provider = mock(NodeDataProvider.class);\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private PostAttesterSlashing handler;\n+\n+  @BeforeEach\n+  public void setup() {\n+    handler = new PostAttesterSlashing(provider, jsonProvider);\n+  }\n+\n+  @Test\n+  void shouldBeAbleToSubmitSlashing() throws Exception {\n+    final AttesterSlashing slashing =\n+        new AttesterSlashing(dataStructureUtil.randomAttesterSlashing());\n+    when(context.body()).thenReturn(jsonProvider.objectToJSON(slashing));\n+    when(provider.postAttesterSlashing(any()))\n+        .thenReturn(SafeFuture.completedFuture(InternalValidationResult.ACCEPT));\n+    handler.handle(context);\n+\n+    verify(context).status(SC_OK);\n+  }\n+\n+  @Test\n+  void shouldReturnBadRequestIfAttesterSlashingIsInvalid() throws Exception {\n+    final AttesterSlashing slashing =\n+        new AttesterSlashing(dataStructureUtil.randomAttesterSlashing());\n+    when(context.body()).thenReturn(jsonProvider.objectToJSON(slashing));\n+    when(provider.postAttesterSlashing(any()))", "originalCommit": "e9f4f6d479c313c867a7c6f4a55f4bbf30adba92", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d91c84311fe128e3bf3b604a3a5221a7abb740f", "chunk": "diff --git a/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostAttesterSlashingTest.java b/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostAttesterSlashingTest.java\nindex a7b7ae29f4..8121b3f730 100644\n--- a/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostAttesterSlashingTest.java\n+++ b/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostAttesterSlashingTest.java\n\n@@ -17,6 +17,7 @@ import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n import static javax.servlet.http.HttpServletResponse.SC_OK;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ4MDY3OQ==", "url": "https://github.com/ConsenSys/teku/pull/3172#discussion_r519480679", "bodyText": "verify provider.postAttesterSlashing was never called", "author": "rolfyone", "createdAt": "2020-11-08T21:40:29Z", "path": "data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostAttesterSlashingTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import io.javalin.http.Context;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.schema.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.util.DataStructureUtil;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.provider.JsonProvider;\n+import tech.pegasys.teku.statetransition.validation.InternalValidationResult;\n+\n+public class PostAttesterSlashingTest {\n+  private final DataStructureUtil dataStructureUtil = new DataStructureUtil();\n+  private Context context = mock(Context.class);\n+  private NodeDataProvider provider = mock(NodeDataProvider.class);\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private PostAttesterSlashing handler;\n+\n+  @BeforeEach\n+  public void setup() {\n+    handler = new PostAttesterSlashing(provider, jsonProvider);\n+  }\n+\n+  @Test\n+  void shouldBeAbleToSubmitSlashing() throws Exception {\n+    final AttesterSlashing slashing =\n+        new AttesterSlashing(dataStructureUtil.randomAttesterSlashing());\n+    when(context.body()).thenReturn(jsonProvider.objectToJSON(slashing));\n+    when(provider.postAttesterSlashing(any()))\n+        .thenReturn(SafeFuture.completedFuture(InternalValidationResult.ACCEPT));\n+    handler.handle(context);\n+\n+    verify(context).status(SC_OK);\n+  }\n+\n+  @Test\n+  void shouldReturnBadRequestIfAttesterSlashingIsInvalid() throws Exception {\n+    final AttesterSlashing slashing =\n+        new AttesterSlashing(dataStructureUtil.randomAttesterSlashing());\n+    when(context.body()).thenReturn(jsonProvider.objectToJSON(slashing));\n+    when(provider.postAttesterSlashing(any()))\n+        .thenReturn(SafeFuture.completedFuture(InternalValidationResult.REJECT));\n+    handler.handle(context);\n+\n+    verify(context).status(SC_BAD_REQUEST);\n+  }\n+\n+  @Test\n+  void shouldReturnBadRequestIfAttestationInvalid() throws Exception {\n+    when(context.body()).thenReturn(\"{\\\"a\\\": \\\"field\\\"}\");\n+    handler.handle(context);\n+\n+    verify(context).status(SC_BAD_REQUEST);", "originalCommit": "e9f4f6d479c313c867a7c6f4a55f4bbf30adba92", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d91c84311fe128e3bf3b604a3a5221a7abb740f", "chunk": "diff --git a/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostAttesterSlashingTest.java b/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostAttesterSlashingTest.java\nindex a7b7ae29f4..8121b3f730 100644\n--- a/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostAttesterSlashingTest.java\n+++ b/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostAttesterSlashingTest.java\n\n@@ -17,6 +17,7 @@ import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n import static javax.servlet.http.HttpServletResponse.SC_OK;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ4MTczNg==", "url": "https://github.com/ConsenSys/teku/pull/3172#discussion_r519481736", "bodyText": "also verify provider.postAttesterSlashing called", "author": "rolfyone", "createdAt": "2020-11-08T21:49:35Z", "path": "data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostAttesterSlashingTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import io.javalin.http.Context;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.schema.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.util.DataStructureUtil;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.provider.JsonProvider;\n+import tech.pegasys.teku.statetransition.validation.InternalValidationResult;\n+\n+public class PostAttesterSlashingTest {\n+  private final DataStructureUtil dataStructureUtil = new DataStructureUtil();\n+  private Context context = mock(Context.class);\n+  private NodeDataProvider provider = mock(NodeDataProvider.class);\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private PostAttesterSlashing handler;\n+\n+  @BeforeEach\n+  public void setup() {\n+    handler = new PostAttesterSlashing(provider, jsonProvider);\n+  }\n+\n+  @Test\n+  void shouldBeAbleToSubmitSlashing() throws Exception {\n+    final AttesterSlashing slashing =\n+        new AttesterSlashing(dataStructureUtil.randomAttesterSlashing());\n+    when(context.body()).thenReturn(jsonProvider.objectToJSON(slashing));\n+    when(provider.postAttesterSlashing(any()))\n+        .thenReturn(SafeFuture.completedFuture(InternalValidationResult.ACCEPT));\n+    handler.handle(context);\n+\n+    verify(context).status(SC_OK);", "originalCommit": "e9f4f6d479c313c867a7c6f4a55f4bbf30adba92", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d91c84311fe128e3bf3b604a3a5221a7abb740f", "chunk": "diff --git a/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostAttesterSlashingTest.java b/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostAttesterSlashingTest.java\nindex a7b7ae29f4..8121b3f730 100644\n--- a/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostAttesterSlashingTest.java\n+++ b/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostAttesterSlashingTest.java\n\n@@ -17,6 +17,7 @@ import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n import static javax.servlet.http.HttpServletResponse.SC_OK;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ4MTc0OQ==", "url": "https://github.com/ConsenSys/teku/pull/3172#discussion_r519481749", "bodyText": "also verify provider.postAttesterSlashing called", "author": "rolfyone", "createdAt": "2020-11-08T21:49:43Z", "path": "data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostAttesterSlashingTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_OK;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import io.javalin.http.Context;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.api.NodeDataProvider;\n+import tech.pegasys.teku.api.schema.AttesterSlashing;\n+import tech.pegasys.teku.datastructures.util.DataStructureUtil;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.provider.JsonProvider;\n+import tech.pegasys.teku.statetransition.validation.InternalValidationResult;\n+\n+public class PostAttesterSlashingTest {\n+  private final DataStructureUtil dataStructureUtil = new DataStructureUtil();\n+  private Context context = mock(Context.class);\n+  private NodeDataProvider provider = mock(NodeDataProvider.class);\n+  private final JsonProvider jsonProvider = new JsonProvider();\n+  private PostAttesterSlashing handler;\n+\n+  @BeforeEach\n+  public void setup() {\n+    handler = new PostAttesterSlashing(provider, jsonProvider);\n+  }\n+\n+  @Test\n+  void shouldBeAbleToSubmitSlashing() throws Exception {\n+    final AttesterSlashing slashing =\n+        new AttesterSlashing(dataStructureUtil.randomAttesterSlashing());\n+    when(context.body()).thenReturn(jsonProvider.objectToJSON(slashing));\n+    when(provider.postAttesterSlashing(any()))\n+        .thenReturn(SafeFuture.completedFuture(InternalValidationResult.ACCEPT));\n+    handler.handle(context);\n+\n+    verify(context).status(SC_OK);\n+  }\n+\n+  @Test\n+  void shouldReturnBadRequestIfAttesterSlashingIsInvalid() throws Exception {\n+    final AttesterSlashing slashing =\n+        new AttesterSlashing(dataStructureUtil.randomAttesterSlashing());\n+    when(context.body()).thenReturn(jsonProvider.objectToJSON(slashing));\n+    when(provider.postAttesterSlashing(any()))\n+        .thenReturn(SafeFuture.completedFuture(InternalValidationResult.REJECT));\n+    handler.handle(context);\n+\n+    verify(context).status(SC_BAD_REQUEST);", "originalCommit": "e9f4f6d479c313c867a7c6f4a55f4bbf30adba92", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d91c84311fe128e3bf3b604a3a5221a7abb740f", "chunk": "diff --git a/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostAttesterSlashingTest.java b/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostAttesterSlashingTest.java\nindex a7b7ae29f4..8121b3f730 100644\n--- a/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostAttesterSlashingTest.java\n+++ b/data/beaconrestapi/src/test/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/PostAttesterSlashingTest.java\n\n@@ -17,6 +17,7 @@ import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n import static javax.servlet.http.HttpServletResponse.SC_OK;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n"}}, {"oid": "8d91c84311fe128e3bf3b604a3a5221a7abb740f", "url": "https://github.com/ConsenSys/teku/commit/8d91c84311fe128e3bf3b604a3a5221a7abb740f", "message": "Incorporate feedback", "committedDate": "2020-11-09T18:14:11Z", "type": "commit"}, {"oid": "4bec64e5be339115102f563a5755673c59844e8d", "url": "https://github.com/ConsenSys/teku/commit/4bec64e5be339115102f563a5755673c59844e8d", "message": "Merge branch 'master' into implementAttestaterSlashingPostHandler", "committedDate": "2020-11-09T18:14:20Z", "type": "commit"}, {"oid": "4a3cd36cff0a783d1a61c7027cb9945c29dc900b", "url": "https://github.com/ConsenSys/teku/commit/4a3cd36cff0a783d1a61c7027cb9945c29dc900b", "message": "Integrate and add integration test", "committedDate": "2020-11-09T18:45:47Z", "type": "commit"}, {"oid": "15bcaa2a4072d32a0282dc438314d685032ceba0", "url": "https://github.com/ConsenSys/teku/commit/15bcaa2a4072d32a0282dc438314d685032ceba0", "message": "Merge remote-tracking branch 'remotes/origin/master' into implementAttestaterSlashingPostHandler\n\n# Conflicts:\n#\tdata/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/BeaconRestApi.java\n#\tdata/provider/src/main/java/tech/pegasys/teku/api/NodeDataProvider.java", "committedDate": "2020-11-09T20:40:24Z", "type": "commit"}]}