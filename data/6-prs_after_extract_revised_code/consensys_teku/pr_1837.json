{"pr_number": 1837, "pr_title": "1412 - added channels for streaming block events back from storage", "pr_createdAt": "2020-05-22T03:28:29Z", "pr_url": "https://github.com/ConsenSys/teku/pull/1837", "timeline": [{"oid": "34194887412e7b654d20aca0be0b592256e63df1", "url": "https://github.com/ConsenSys/teku/commit/34194887412e7b654d20aca0be0b592256e63df1", "message": "1412 - added channels for streaming block events back from storage\n\n - renamed ChainStorageService and ChainStorageServer\n\n - added DepositStorage to allow reading back from deposit events\n\n - test cases to demonstrate read/write from Storage\n\n - the StorageService now creates the database before starting services and subscribing them to events\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-05-22T03:26:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyNjkxNg==", "url": "https://github.com/ConsenSys/teku/pull/1837#discussion_r429026916", "bodyText": "nit: these will need to be volatile as start and stop might be called from different threads.", "author": "ajsutton", "createdAt": "2020-05-22T03:41:10Z", "path": "services/chainstorage/src/main/java/tech/pegasys/teku/services/chainstorage/StorageService.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2019 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.services.chainstorage;\n+\n+import static tech.pegasys.teku.util.config.Constants.STORAGE_QUERY_CHANNEL_PARALLELISM;\n+\n+import tech.pegasys.teku.pow.api.Eth1EventsChannel;\n+import tech.pegasys.teku.service.serviceutils.Service;\n+import tech.pegasys.teku.service.serviceutils.ServiceConfig;\n+import tech.pegasys.teku.storage.api.Eth1DepositChannel;\n+import tech.pegasys.teku.storage.api.StorageQueryChannel;\n+import tech.pegasys.teku.storage.api.StorageUpdateChannel;\n+import tech.pegasys.teku.storage.server.ChainStorage;\n+import tech.pegasys.teku.storage.server.Database;\n+import tech.pegasys.teku.storage.server.DepositStorage;\n+import tech.pegasys.teku.storage.server.VersionedDatabaseFactory;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+\n+public class StorageService extends Service {\n+  private ChainStorage chainStorage;\n+  private DepositStorage depositStorage;\n+  private ServiceConfig serviceConfig;\n+  private Database database;", "originalCommit": "34194887412e7b654d20aca0be0b592256e63df1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5a62e7afb5dc04b1313d2ef87e9642b895ee1f98", "chunk": "diff --git a/services/chainstorage/src/main/java/tech/pegasys/teku/services/chainstorage/StorageService.java b/services/chainstorage/src/main/java/tech/pegasys/teku/services/chainstorage/StorageService.java\nindex 443e73eb19..e305cb75a2 100644\n--- a/services/chainstorage/src/main/java/tech/pegasys/teku/services/chainstorage/StorageService.java\n+++ b/services/chainstorage/src/main/java/tech/pegasys/teku/services/chainstorage/StorageService.java\n\n@@ -28,10 +28,10 @@ import tech.pegasys.teku.storage.server.VersionedDatabaseFactory;\n import tech.pegasys.teku.util.async.SafeFuture;\n \n public class StorageService extends Service {\n-  private ChainStorage chainStorage;\n-  private DepositStorage depositStorage;\n-  private ServiceConfig serviceConfig;\n-  private Database database;\n+  private volatile ChainStorage chainStorage;\n+  private volatile DepositStorage depositStorage;\n+  private final ServiceConfig serviceConfig;\n+  private volatile Database database;\n \n   public StorageService(final ServiceConfig serviceConfig) {\n     this.serviceConfig = serviceConfig;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyNzYzMQ==", "url": "https://github.com/ConsenSys/teku/pull/1837#discussion_r429027631", "bodyText": "We shouldn't be returning a Stream here.  This should just be SafeFuture<WherePowServiceShouldStartFrom> replayDepositEvents().  The returned value will actually be read from a different thread so you'd wind up accessing the Stream from multiple threads and its all going to get weird.\nGenerally anything that goes via a channel should still work if it were serialised and sent to the receiver running in another process (so it winds up with a different instance).  In some cases, we'll actually do that in the future but it's a useful model to follow anyway to make the boundaries between components clearer.\nThe WherePowServiceShouldStartFrom is probably just the block number that the last deposit came from and whether the min genesis event has already fired or not.  The PoWService would then ignore all the blocks equal to or before that block number (ie start it's subscription to deposit log events from that block number + 1).", "author": "ajsutton", "createdAt": "2020-05-22T03:44:56Z", "path": "storage/src/main/java/tech/pegasys/teku/storage/api/Eth1DepositChannel.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.api;\n+\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import tech.pegasys.teku.pow.event.DepositsFromBlockEvent;\n+import tech.pegasys.teku.pow.event.MinGenesisTimeBlockEvent;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+\n+public interface Eth1DepositChannel {\n+\n+  SafeFuture<Stream<DepositsFromBlockEvent>> streamDepositFromBlockEvents();", "originalCommit": "34194887412e7b654d20aca0be0b592256e63df1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1682a87d1ab4bcdb17db451387d0fc5a93fb1d68", "chunk": "diff --git a/storage/src/main/java/tech/pegasys/teku/storage/api/Eth1DepositChannel.java b/storage/src/main/java/tech/pegasys/teku/storage/api/Eth1DepositChannel.java\nindex 493d9e5396..eb32dbccfd 100644\n--- a/storage/src/main/java/tech/pegasys/teku/storage/api/Eth1DepositChannel.java\n+++ b/storage/src/main/java/tech/pegasys/teku/storage/api/Eth1DepositChannel.java\n\n@@ -13,15 +13,10 @@\n \n package tech.pegasys.teku.storage.api;\n \n-import java.util.Optional;\n-import java.util.stream.Stream;\n-import tech.pegasys.teku.pow.event.DepositsFromBlockEvent;\n-import tech.pegasys.teku.pow.event.MinGenesisTimeBlockEvent;\n+import tech.pegasys.teku.storage.server.ReplayDepositsResult;\n import tech.pegasys.teku.util.async.SafeFuture;\n \n public interface Eth1DepositChannel {\n \n-  SafeFuture<Stream<DepositsFromBlockEvent>> streamDepositFromBlockEvents();\n-\n-  SafeFuture<Optional<MinGenesisTimeBlockEvent>> getMinGenesisTimeBlockEvent();\n+  SafeFuture<ReplayDepositsResult> replayDepositEvents();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyODM5OA==", "url": "https://github.com/ConsenSys/teku/pull/1837#discussion_r429028398", "bodyText": "So this class will need to be given a publisher for the Eth1DepositChannel and it streams the events from the database and publishes them to that channel - ensuring the MinGenesisTimeBlockEvent is sent at the right point in that deposit event stream.", "author": "ajsutton", "createdAt": "2020-05-22T03:48:54Z", "path": "storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server;\n+\n+import com.google.common.eventbus.EventBus;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import tech.pegasys.teku.pow.api.Eth1EventsChannel;\n+import tech.pegasys.teku.pow.event.DepositsFromBlockEvent;\n+import tech.pegasys.teku.pow.event.MinGenesisTimeBlockEvent;\n+import tech.pegasys.teku.storage.api.Eth1DepositChannel;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+\n+public class DepositStorage implements Eth1DepositChannel, Eth1EventsChannel {\n+  private final EventBus eventBus;\n+  private final Database database;\n+\n+  private DepositStorage(final EventBus eventBus, final Database database) {\n+    this.eventBus = eventBus;\n+    this.database = database;\n+  }\n+\n+  public static DepositStorage create(final EventBus eventBus, final Database database) {\n+    return new DepositStorage(eventBus, database);\n+  }\n+\n+  public void start() {\n+    eventBus.register(this);\n+  }\n+\n+  public void stop() {\n+    eventBus.unregister(this);\n+  }\n+\n+  @Override\n+  public SafeFuture<Stream<DepositsFromBlockEvent>> streamDepositFromBlockEvents() {\n+    return SafeFuture.completedFuture(database.streamDepositsFromBlocks());\n+  }", "originalCommit": "34194887412e7b654d20aca0be0b592256e63df1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1682a87d1ab4bcdb17db451387d0fc5a93fb1d68", "chunk": "diff --git a/storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java b/storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java\nindex 28cf8961cf..c0747d9a0e 100644\n--- a/storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java\n+++ b/storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java\n\n@@ -13,8 +13,12 @@\n \n package tech.pegasys.teku.storage.server;\n \n+import com.google.common.base.Supplier;\n+import com.google.common.base.Suppliers;\n import com.google.common.eventbus.EventBus;\n+import com.google.common.primitives.UnsignedLong;\n import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicReference;\n import java.util.stream.Stream;\n import tech.pegasys.teku.pow.api.Eth1EventsChannel;\n import tech.pegasys.teku.pow.event.DepositsFromBlockEvent;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyODQ1MQ==", "url": "https://github.com/ConsenSys/teku/pull/1837#discussion_r429028451", "bodyText": "This shouldn't be necessary because it would just happen as part of replaying blocks.", "author": "ajsutton", "createdAt": "2020-05-22T03:49:14Z", "path": "storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server;\n+\n+import com.google.common.eventbus.EventBus;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import tech.pegasys.teku.pow.api.Eth1EventsChannel;\n+import tech.pegasys.teku.pow.event.DepositsFromBlockEvent;\n+import tech.pegasys.teku.pow.event.MinGenesisTimeBlockEvent;\n+import tech.pegasys.teku.storage.api.Eth1DepositChannel;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+\n+public class DepositStorage implements Eth1DepositChannel, Eth1EventsChannel {\n+  private final EventBus eventBus;\n+  private final Database database;\n+\n+  private DepositStorage(final EventBus eventBus, final Database database) {\n+    this.eventBus = eventBus;\n+    this.database = database;\n+  }\n+\n+  public static DepositStorage create(final EventBus eventBus, final Database database) {\n+    return new DepositStorage(eventBus, database);\n+  }\n+\n+  public void start() {\n+    eventBus.register(this);\n+  }\n+\n+  public void stop() {\n+    eventBus.unregister(this);\n+  }\n+\n+  @Override\n+  public SafeFuture<Stream<DepositsFromBlockEvent>> streamDepositFromBlockEvents() {\n+    return SafeFuture.completedFuture(database.streamDepositsFromBlocks());\n+  }\n+\n+  @Override\n+  public SafeFuture<Optional<MinGenesisTimeBlockEvent>> getMinGenesisTimeBlockEvent() {\n+    return SafeFuture.completedFuture(database.getMinGenesisTimeBlock());\n+  }", "originalCommit": "34194887412e7b654d20aca0be0b592256e63df1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1682a87d1ab4bcdb17db451387d0fc5a93fb1d68", "chunk": "diff --git a/storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java b/storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java\nindex 28cf8961cf..c0747d9a0e 100644\n--- a/storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java\n+++ b/storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java\n\n@@ -13,8 +13,12 @@\n \n package tech.pegasys.teku.storage.server;\n \n+import com.google.common.base.Supplier;\n+import com.google.common.base.Suppliers;\n import com.google.common.eventbus.EventBus;\n+import com.google.common.primitives.UnsignedLong;\n import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicReference;\n import java.util.stream.Stream;\n import tech.pegasys.teku.pow.api.Eth1EventsChannel;\n import tech.pegasys.teku.pow.event.DepositsFromBlockEvent;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyODc0Mg==", "url": "https://github.com/ConsenSys/teku/pull/1837#discussion_r429028742", "bodyText": "The catch with having the storage system replay events is that these handlers will need to ignore events that come from us replaying - but that's easy enough to do with an volatile boolean isReplaying field.", "author": "ajsutton", "createdAt": "2020-05-22T03:50:44Z", "path": "storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server;\n+\n+import com.google.common.eventbus.EventBus;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import tech.pegasys.teku.pow.api.Eth1EventsChannel;\n+import tech.pegasys.teku.pow.event.DepositsFromBlockEvent;\n+import tech.pegasys.teku.pow.event.MinGenesisTimeBlockEvent;\n+import tech.pegasys.teku.storage.api.Eth1DepositChannel;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+\n+public class DepositStorage implements Eth1DepositChannel, Eth1EventsChannel {\n+  private final EventBus eventBus;\n+  private final Database database;\n+\n+  private DepositStorage(final EventBus eventBus, final Database database) {\n+    this.eventBus = eventBus;\n+    this.database = database;\n+  }\n+\n+  public static DepositStorage create(final EventBus eventBus, final Database database) {\n+    return new DepositStorage(eventBus, database);\n+  }\n+\n+  public void start() {\n+    eventBus.register(this);\n+  }\n+\n+  public void stop() {\n+    eventBus.unregister(this);\n+  }\n+\n+  @Override\n+  public SafeFuture<Stream<DepositsFromBlockEvent>> streamDepositFromBlockEvents() {\n+    return SafeFuture.completedFuture(database.streamDepositsFromBlocks());\n+  }\n+\n+  @Override\n+  public SafeFuture<Optional<MinGenesisTimeBlockEvent>> getMinGenesisTimeBlockEvent() {\n+    return SafeFuture.completedFuture(database.getMinGenesisTimeBlock());\n+  }\n+\n+  @Override\n+  public void onDepositsFromBlock(final DepositsFromBlockEvent event) {\n+    database.addDepositsFromBlockEvent(event);\n+  }\n+\n+  @Override\n+  public void onMinGenesisTimeBlock(final MinGenesisTimeBlockEvent event) {\n+    database.addMinGenesisTimeBlock(event);\n+  }", "originalCommit": "34194887412e7b654d20aca0be0b592256e63df1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3NTAzOQ==", "url": "https://github.com/ConsenSys/teku/pull/1837#discussion_r429375039", "bodyText": "Also, another catch is potentially the PowService missing the events that StorageSystem publishes. That will depend on how the replay will occur. If we implement another EventChannel that the PowService would subscribe to, and StorageSystem would publish to (or use the same channel as Adrian suggested and make StorageSystem a publisher), then, have methods that return confirmation, similar to the model we have in StorageBackedRecentChainData, we could retry replaying this information until PowService is surely alive, and confirm it received each event.", "author": "cemozerr", "createdAt": "2020-05-22T17:40:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAyODc0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "1682a87d1ab4bcdb17db451387d0fc5a93fb1d68", "chunk": "diff --git a/storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java b/storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java\nindex 28cf8961cf..c0747d9a0e 100644\n--- a/storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java\n+++ b/storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java\n\n@@ -13,8 +13,12 @@\n \n package tech.pegasys.teku.storage.server;\n \n+import com.google.common.base.Supplier;\n+import com.google.common.base.Suppliers;\n import com.google.common.eventbus.EventBus;\n+import com.google.common.primitives.UnsignedLong;\n import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicReference;\n import java.util.stream.Stream;\n import tech.pegasys.teku.pow.api.Eth1EventsChannel;\n import tech.pegasys.teku.pow.event.DepositsFromBlockEvent;\n"}}, {"oid": "5a62e7afb5dc04b1313d2ef87e9642b895ee1f98", "url": "https://github.com/ConsenSys/teku/commit/5a62e7afb5dc04b1313d2ef87e9642b895ee1f98", "message": "review feedback\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-05-22T04:31:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2OTQwMg==", "url": "https://github.com/ConsenSys/teku/pull/1837#discussion_r429369402", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return db.stream(V3Schema.DEPOSITS_FORM_BLOCK_EVENTS).map(ColumnEntry::getValue);\n          \n          \n            \n                return db.stream(V3Schema.DEPOSITS_FROM_BLOCK_EVENTS).map(ColumnEntry::getValue);", "author": "cemozerr", "createdAt": "2020-05-22T17:27:23Z", "path": "storage/src/main/java/tech/pegasys/teku/storage/server/rocksdb/dataaccess/V3RocksDbDao.java", "diffHunk": "@@ -140,6 +142,16 @@ public V3RocksDbDao(final RocksDbInstance db) {\n     return db.getAll(V3Schema.VOTES);\n   }\n \n+  @Override\n+  public Stream<DepositsFromBlockEvent> streamDepositsFromBlocks() {\n+    return db.stream(V3Schema.DEPOSITS_FORM_BLOCK_EVENTS).map(ColumnEntry::getValue);", "originalCommit": "5a62e7afb5dc04b1313d2ef87e9642b895ee1f98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1682a87d1ab4bcdb17db451387d0fc5a93fb1d68", "chunk": "diff --git a/storage/src/main/java/tech/pegasys/teku/storage/server/rocksdb/dataaccess/V3RocksDbDao.java b/storage/src/main/java/tech/pegasys/teku/storage/server/rocksdb/dataaccess/V3RocksDbDao.java\nindex 0dd0845824..20de71efca 100644\n--- a/storage/src/main/java/tech/pegasys/teku/storage/server/rocksdb/dataaccess/V3RocksDbDao.java\n+++ b/storage/src/main/java/tech/pegasys/teku/storage/server/rocksdb/dataaccess/V3RocksDbDao.java\n\n@@ -143,8 +145,9 @@ public class V3RocksDbDao implements RocksDbDao {\n   }\n \n   @Override\n+  @MustBeClosed\n   public Stream<DepositsFromBlockEvent> streamDepositsFromBlocks() {\n-    return db.stream(V3Schema.DEPOSITS_FORM_BLOCK_EVENTS).map(ColumnEntry::getValue);\n+    return db.stream(V3Schema.DEPOSITS_FROM_BLOCK_EVENTS).map(ColumnEntry::getValue);\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2OTUyNQ==", "url": "https://github.com/ConsenSys/teku/pull/1837#discussion_r429369525", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              RocksDbColumn<UnsignedLong, DepositsFromBlockEvent> DEPOSITS_FORM_BLOCK_EVENTS =\n          \n          \n            \n              RocksDbColumn<UnsignedLong, DepositsFromBlockEvent> DEPOSITS_FROM_BLOCK_EVENTS =", "author": "cemozerr", "createdAt": "2020-05-22T17:27:41Z", "path": "storage/src/main/java/tech/pegasys/teku/storage/server/rocksdb/schema/V3Schema.java", "diffHunk": "@@ -42,6 +46,8 @@\n       RocksDbColumn.create(5, CHECKPOINT_SERIALIZER, STATE_SERIALIZER);\n   RocksDbColumn<UnsignedLong, VoteTracker> VOTES =\n       RocksDbColumn.create(6, UNSIGNED_LONG_SERIALIZER, VOTES_SERIALIZER);\n+  RocksDbColumn<UnsignedLong, DepositsFromBlockEvent> DEPOSITS_FORM_BLOCK_EVENTS =", "originalCommit": "5a62e7afb5dc04b1313d2ef87e9642b895ee1f98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1682a87d1ab4bcdb17db451387d0fc5a93fb1d68", "chunk": "diff --git a/storage/src/main/java/tech/pegasys/teku/storage/server/rocksdb/schema/V3Schema.java b/storage/src/main/java/tech/pegasys/teku/storage/server/rocksdb/schema/V3Schema.java\nindex 883e77a0fd..c75fcadeb3 100644\n--- a/storage/src/main/java/tech/pegasys/teku/storage/server/rocksdb/schema/V3Schema.java\n+++ b/storage/src/main/java/tech/pegasys/teku/storage/server/rocksdb/schema/V3Schema.java\n\n@@ -46,7 +46,7 @@ public interface V3Schema extends Schema {\n       RocksDbColumn.create(5, CHECKPOINT_SERIALIZER, STATE_SERIALIZER);\n   RocksDbColumn<UnsignedLong, VoteTracker> VOTES =\n       RocksDbColumn.create(6, UNSIGNED_LONG_SERIALIZER, VOTES_SERIALIZER);\n-  RocksDbColumn<UnsignedLong, DepositsFromBlockEvent> DEPOSITS_FORM_BLOCK_EVENTS =\n+  RocksDbColumn<UnsignedLong, DepositsFromBlockEvent> DEPOSITS_FROM_BLOCK_EVENTS =\n       RocksDbColumn.create(7, UNSIGNED_LONG_SERIALIZER, DEPOSITS_FROM_BLOCK_EVENT_SERIALIZER);\n \n   // Variables\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3MjIzOA==", "url": "https://github.com/ConsenSys/teku/pull/1837#discussion_r429372238", "bodyText": "If we make the DepositsFromBlockEvents implement SimpleOffsetSerializable, and add DepositsFromBlockEvents to the list of classes parsed for deserialization in setConstants, we should be able to use SSZ for serialization and deserialization here:\n\n\nSimpleOffsetSerializer.serialize(depositsFromBlockEvents)\n\n\nSimpleOffsetSerializer.deserialize(depositsFromBlockEvents, DepositsFromBlockEvents.class)", "author": "cemozerr", "createdAt": "2020-05-22T17:33:37Z", "path": "storage/src/main/java/tech/pegasys/teku/storage/server/rocksdb/serialization/DepositsFromBlockEventSerializer.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server.rocksdb.serialization;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.List;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.apache.tuweni.ssz.SSZ;\n+import tech.pegasys.teku.bls.BLSPublicKey;\n+import tech.pegasys.teku.bls.BLSSignature;\n+import tech.pegasys.teku.pow.event.Deposit;\n+import tech.pegasys.teku.pow.event.DepositsFromBlockEvent;\n+\n+public class DepositsFromBlockEventSerializer implements RocksDbSerializer<DepositsFromBlockEvent> {\n+\n+  @Override\n+  public DepositsFromBlockEvent deserialize(final byte[] data) {\n+    return SSZ.decode(\n+        Bytes.of(data),\n+        reader -> {\n+          final UnsignedLong blockNumber = UnsignedLong.fromLongBits(reader.readUInt64());", "originalCommit": "5a62e7afb5dc04b1313d2ef87e9642b895ee1f98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY3MjY3Mw==", "url": "https://github.com/ConsenSys/teku/pull/1837#discussion_r429672673", "bodyText": "Yep, we started there, but it got complicated with the list. in the end @ajsutton said the SimpleOffsetSerializable was probably going to be going away at some point, and we wrote our own serializers...", "author": "rolfyone", "createdAt": "2020-05-24T20:36:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3MjIzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY3NDA4Mg==", "url": "https://github.com/ConsenSys/teku/pull/1837#discussion_r429674082", "bodyText": "The bigger factor was that we don't want DepositsFromBlockEvents to be a subtle but critical piece of database compatibility.  SimpleOffsetSerializer will happily just serialise something different and fail to deserialise old versions if there's ever a change to even the order of fields in DepositsFromBlockEvents whereas this separate serialiser will maintain the same format (and if fields are added or removed a compiler error will make us deal with them - very clearly in a database related class).", "author": "ajsutton", "createdAt": "2020-05-24T20:51:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3MjIzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU2MzY4NA==", "url": "https://github.com/ConsenSys/teku/pull/1837#discussion_r430563684", "bodyText": "That makes sense.", "author": "cemozerr", "createdAt": "2020-05-26T16:53:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3MjIzOA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3Mjc3NA==", "url": "https://github.com/ConsenSys/teku/pull/1837#discussion_r429372774", "bodyText": "We could use SimpleOffsetSerializer here too.", "author": "cemozerr", "createdAt": "2020-05-22T17:34:51Z", "path": "storage/src/main/java/tech/pegasys/teku/storage/server/rocksdb/serialization/MinGenesisTimeBlockEventSerializer.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server.rocksdb.serialization;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.apache.tuweni.ssz.SSZ;\n+import tech.pegasys.teku.pow.event.MinGenesisTimeBlockEvent;\n+\n+public class MinGenesisTimeBlockEventSerializer\n+    implements RocksDbSerializer<MinGenesisTimeBlockEvent> {\n+  @Override\n+  public MinGenesisTimeBlockEvent deserialize(final byte[] data) {", "originalCommit": "5a62e7afb5dc04b1313d2ef87e9642b895ee1f98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "1682a87d1ab4bcdb17db451387d0fc5a93fb1d68", "url": "https://github.com/ConsenSys/teku/commit/1682a87d1ab4bcdb17db451387d0fc5a93fb1d68", "message": "DepositStorage can now replay events from storage in the right order\n\n - added test cases for ordering\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-05-27T03:49:56Z", "type": "commit"}, {"oid": "b237c9be71262d09ab4a0167a1f509b603a1f259", "url": "https://github.com/ConsenSys/teku/commit/b237c9be71262d09ab4a0167a1f509b603a1f259", "message": "created a class to handle sequencing of deposits and the genesis event.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-05-27T04:38:20Z", "type": "commit"}, {"oid": "585dc3d342f75876b628924265a8a34903e0305a", "url": "https://github.com/ConsenSys/teku/commit/585dc3d342f75876b628924265a8a34903e0305a", "message": "Merge remote-tracking branch 'upstream/master' into 1412-depositsFromBlock-storage\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-05-27T05:01:45Z", "type": "commit"}, {"oid": "93d71630bf103f0ea2fb193fdd0b06ebf59c8b5a", "url": "https://github.com/ConsenSys/teku/commit/93d71630bf103f0ea2fb193fdd0b06ebf59c8b5a", "message": "Merge remote-tracking branch 'upstream/master' into 1412-depositsFromBlock-storage", "committedDate": "2020-05-27T05:02:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2MTIxNg==", "url": "https://github.com/ConsenSys/teku/pull/1837#discussion_r430861216", "bodyText": "nit: Eth1DepositStorageChannel is probably clearer.", "author": "ajsutton", "createdAt": "2020-05-27T05:14:28Z", "path": "storage/src/main/java/tech/pegasys/teku/storage/api/Eth1DepositChannel.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.api;\n+\n+import tech.pegasys.teku.storage.server.ReplayDepositsResult;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+\n+public interface Eth1DepositChannel {", "originalCommit": "93d71630bf103f0ea2fb193fdd0b06ebf59c8b5a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "568d1aef97608f4e06b714f9735feefe5e7667ad", "chunk": "diff --git a/storage/src/main/java/tech/pegasys/teku/storage/api/Eth1DepositChannel.java b/storage/src/main/java/tech/pegasys/teku/storage/api/Eth1DepositStorageChannel.java\nsimilarity index 94%\nrename from storage/src/main/java/tech/pegasys/teku/storage/api/Eth1DepositChannel.java\nrename to storage/src/main/java/tech/pegasys/teku/storage/api/Eth1DepositStorageChannel.java\nindex eb32dbccfd..5bbfbc77d1 100644\n--- a/storage/src/main/java/tech/pegasys/teku/storage/api/Eth1DepositChannel.java\n+++ b/storage/src/main/java/tech/pegasys/teku/storage/api/Eth1DepositStorageChannel.java\n\n@@ -16,7 +16,7 @@ package tech.pegasys.teku.storage.api;\n import tech.pegasys.teku.storage.server.ReplayDepositsResult;\n import tech.pegasys.teku.util.async.SafeFuture;\n \n-public interface Eth1DepositChannel {\n+public interface Eth1DepositStorageChannel {\n \n   SafeFuture<ReplayDepositsResult> replayDepositEvents();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2MTU5MA==", "url": "https://github.com/ConsenSys/teku/pull/1837#discussion_r430861590", "bodyText": "This doesn't need to be volatile but should be final (it's assigned in the constructor and never changes).", "author": "ajsutton", "createdAt": "2020-05-27T05:15:58Z", "path": "storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server;\n+\n+import com.google.common.base.Supplier;\n+import com.google.common.base.Suppliers;\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import tech.pegasys.teku.pow.api.Eth1EventsChannel;\n+import tech.pegasys.teku.pow.event.DepositsFromBlockEvent;\n+import tech.pegasys.teku.pow.event.MinGenesisTimeBlockEvent;\n+import tech.pegasys.teku.storage.api.Eth1DepositChannel;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+\n+public class DepositStorage implements Eth1DepositChannel, Eth1EventsChannel {\n+  private final EventBus eventBus;\n+  private final Database database;\n+  private final Eth1EventsChannel eth1EventsChannel;\n+  private volatile boolean isSyncingFromDatabase = false;\n+  private volatile Supplier<SafeFuture<ReplayDepositsResult>> replayResult;", "originalCommit": "93d71630bf103f0ea2fb193fdd0b06ebf59c8b5a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "568d1aef97608f4e06b714f9735feefe5e7667ad", "chunk": "diff --git a/storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java b/storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java\nindex 9683becc29..f0817aa283 100644\n--- a/storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java\n+++ b/storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java\n\n@@ -15,43 +15,35 @@ package tech.pegasys.teku.storage.server;\n \n import com.google.common.base.Supplier;\n import com.google.common.base.Suppliers;\n-import com.google.common.eventbus.EventBus;\n import com.google.common.primitives.UnsignedLong;\n import java.util.Optional;\n import java.util.stream.Stream;\n import tech.pegasys.teku.pow.api.Eth1EventsChannel;\n import tech.pegasys.teku.pow.event.DepositsFromBlockEvent;\n import tech.pegasys.teku.pow.event.MinGenesisTimeBlockEvent;\n-import tech.pegasys.teku.storage.api.Eth1DepositChannel;\n+import tech.pegasys.teku.storage.api.Eth1DepositStorageChannel;\n import tech.pegasys.teku.util.async.SafeFuture;\n \n-public class DepositStorage implements Eth1DepositChannel, Eth1EventsChannel {\n-  private final EventBus eventBus;\n+public class DepositStorage implements Eth1DepositStorageChannel, Eth1EventsChannel {\n   private final Database database;\n   private final Eth1EventsChannel eth1EventsChannel;\n   private volatile boolean isSyncingFromDatabase = false;\n-  private volatile Supplier<SafeFuture<ReplayDepositsResult>> replayResult;\n+  private final Supplier<SafeFuture<ReplayDepositsResult>> replayResult;\n \n-  private DepositStorage(\n-      final EventBus eventBus, final Eth1EventsChannel eth1EventsChannel, final Database database) {\n-    this.eventBus = eventBus;\n+  private DepositStorage(final Eth1EventsChannel eth1EventsChannel, final Database database) {\n     this.eth1EventsChannel = eth1EventsChannel;\n     this.database = database;\n     this.replayResult = Suppliers.memoize(() -> SafeFuture.of(this::replayDeposits));\n   }\n \n   public static DepositStorage create(\n-      final EventBus eventBus, final Eth1EventsChannel eth1EventsChannel, final Database database) {\n-    return new DepositStorage(eventBus, eth1EventsChannel, database);\n+      final Eth1EventsChannel eth1EventsChannel, final Database database) {\n+    return new DepositStorage(eth1EventsChannel, database);\n   }\n \n-  public void start() {\n-    eventBus.register(this);\n-  }\n+  public void start() {}\n \n-  public void stop() {\n-    eventBus.unregister(this);\n-  }\n+  public void stop() {}\n \n   @Override\n   public SafeFuture<ReplayDepositsResult> replayDepositEvents() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2MTgwMQ==", "url": "https://github.com/ConsenSys/teku/pull/1837#discussion_r430861801", "bodyText": "This class doesn't have any @Subscribe methods so no need to register with the event bus and I think you should be able to avoid passing it in entirely.", "author": "ajsutton", "createdAt": "2020-05-27T05:16:59Z", "path": "storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server;\n+\n+import com.google.common.base.Supplier;\n+import com.google.common.base.Suppliers;\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import tech.pegasys.teku.pow.api.Eth1EventsChannel;\n+import tech.pegasys.teku.pow.event.DepositsFromBlockEvent;\n+import tech.pegasys.teku.pow.event.MinGenesisTimeBlockEvent;\n+import tech.pegasys.teku.storage.api.Eth1DepositChannel;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+\n+public class DepositStorage implements Eth1DepositChannel, Eth1EventsChannel {\n+  private final EventBus eventBus;\n+  private final Database database;\n+  private final Eth1EventsChannel eth1EventsChannel;\n+  private volatile boolean isSyncingFromDatabase = false;\n+  private volatile Supplier<SafeFuture<ReplayDepositsResult>> replayResult;\n+\n+  private DepositStorage(\n+      final EventBus eventBus, final Eth1EventsChannel eth1EventsChannel, final Database database) {\n+    this.eventBus = eventBus;\n+    this.eth1EventsChannel = eth1EventsChannel;\n+    this.database = database;\n+    this.replayResult = Suppliers.memoize(() -> SafeFuture.of(this::replayDeposits));\n+  }\n+\n+  public static DepositStorage create(\n+      final EventBus eventBus, final Eth1EventsChannel eth1EventsChannel, final Database database) {\n+    return new DepositStorage(eventBus, eth1EventsChannel, database);\n+  }\n+\n+  public void start() {\n+    eventBus.register(this);", "originalCommit": "93d71630bf103f0ea2fb193fdd0b06ebf59c8b5a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "568d1aef97608f4e06b714f9735feefe5e7667ad", "chunk": "diff --git a/storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java b/storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java\nindex 9683becc29..f0817aa283 100644\n--- a/storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java\n+++ b/storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java\n\n@@ -15,43 +15,35 @@ package tech.pegasys.teku.storage.server;\n \n import com.google.common.base.Supplier;\n import com.google.common.base.Suppliers;\n-import com.google.common.eventbus.EventBus;\n import com.google.common.primitives.UnsignedLong;\n import java.util.Optional;\n import java.util.stream.Stream;\n import tech.pegasys.teku.pow.api.Eth1EventsChannel;\n import tech.pegasys.teku.pow.event.DepositsFromBlockEvent;\n import tech.pegasys.teku.pow.event.MinGenesisTimeBlockEvent;\n-import tech.pegasys.teku.storage.api.Eth1DepositChannel;\n+import tech.pegasys.teku.storage.api.Eth1DepositStorageChannel;\n import tech.pegasys.teku.util.async.SafeFuture;\n \n-public class DepositStorage implements Eth1DepositChannel, Eth1EventsChannel {\n-  private final EventBus eventBus;\n+public class DepositStorage implements Eth1DepositStorageChannel, Eth1EventsChannel {\n   private final Database database;\n   private final Eth1EventsChannel eth1EventsChannel;\n   private volatile boolean isSyncingFromDatabase = false;\n-  private volatile Supplier<SafeFuture<ReplayDepositsResult>> replayResult;\n+  private final Supplier<SafeFuture<ReplayDepositsResult>> replayResult;\n \n-  private DepositStorage(\n-      final EventBus eventBus, final Eth1EventsChannel eth1EventsChannel, final Database database) {\n-    this.eventBus = eventBus;\n+  private DepositStorage(final Eth1EventsChannel eth1EventsChannel, final Database database) {\n     this.eth1EventsChannel = eth1EventsChannel;\n     this.database = database;\n     this.replayResult = Suppliers.memoize(() -> SafeFuture.of(this::replayDeposits));\n   }\n \n   public static DepositStorage create(\n-      final EventBus eventBus, final Eth1EventsChannel eth1EventsChannel, final Database database) {\n-    return new DepositStorage(eventBus, eth1EventsChannel, database);\n+      final Eth1EventsChannel eth1EventsChannel, final Database database) {\n+    return new DepositStorage(eth1EventsChannel, database);\n   }\n \n-  public void start() {\n-    eventBus.register(this);\n-  }\n+  public void start() {}\n \n-  public void stop() {\n-    eventBus.unregister(this);\n-  }\n+  public void stop() {}\n \n   @Override\n   public SafeFuture<ReplayDepositsResult> replayDepositEvents() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2MjQxMQ==", "url": "https://github.com/ConsenSys/teku/pull/1837#discussion_r430862411", "bodyText": "nit: class can be private.", "author": "ajsutton", "createdAt": "2020-05-27T05:19:22Z", "path": "storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server;\n+\n+import com.google.common.base.Supplier;\n+import com.google.common.base.Suppliers;\n+import com.google.common.eventbus.EventBus;\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+import tech.pegasys.teku.pow.api.Eth1EventsChannel;\n+import tech.pegasys.teku.pow.event.DepositsFromBlockEvent;\n+import tech.pegasys.teku.pow.event.MinGenesisTimeBlockEvent;\n+import tech.pegasys.teku.storage.api.Eth1DepositChannel;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+\n+public class DepositStorage implements Eth1DepositChannel, Eth1EventsChannel {\n+  private final EventBus eventBus;\n+  private final Database database;\n+  private final Eth1EventsChannel eth1EventsChannel;\n+  private volatile boolean isSyncingFromDatabase = false;\n+  private volatile Supplier<SafeFuture<ReplayDepositsResult>> replayResult;\n+\n+  private DepositStorage(\n+      final EventBus eventBus, final Eth1EventsChannel eth1EventsChannel, final Database database) {\n+    this.eventBus = eventBus;\n+    this.eth1EventsChannel = eth1EventsChannel;\n+    this.database = database;\n+    this.replayResult = Suppliers.memoize(() -> SafeFuture.of(this::replayDeposits));\n+  }\n+\n+  public static DepositStorage create(\n+      final EventBus eventBus, final Eth1EventsChannel eth1EventsChannel, final Database database) {\n+    return new DepositStorage(eventBus, eth1EventsChannel, database);\n+  }\n+\n+  public void start() {\n+    eventBus.register(this);\n+  }\n+\n+  public void stop() {\n+    eventBus.unregister(this);\n+  }\n+\n+  @Override\n+  public SafeFuture<ReplayDepositsResult> replayDepositEvents() {\n+    return replayResult.get();\n+  }\n+\n+  private ReplayDepositsResult replayDeposits() {\n+    isSyncingFromDatabase = true;\n+    final DepositSequencer depositSequencer =\n+        new DepositSequencer(eth1EventsChannel, database.getMinGenesisTimeBlock());\n+    try (Stream<DepositsFromBlockEvent> eventStream = database.streamDepositsFromBlocks()) {\n+      eventStream.forEach(depositSequencer::depositEvent);\n+    }\n+    depositSequencer.depositsComplete();\n+    isSyncingFromDatabase = false;\n+    return depositSequencer.done();\n+  }\n+\n+  @Override\n+  public void onDepositsFromBlock(final DepositsFromBlockEvent event) {\n+    if (!isSyncingFromDatabase) {\n+      database.addDepositsFromBlockEvent(event);\n+    }\n+  }\n+\n+  @Override\n+  public void onMinGenesisTimeBlock(final MinGenesisTimeBlockEvent event) {\n+    if (!isSyncingFromDatabase) {\n+      database.addMinGenesisTimeBlock(event);\n+    }\n+  }\n+\n+  static class DepositSequencer {", "originalCommit": "93d71630bf103f0ea2fb193fdd0b06ebf59c8b5a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "568d1aef97608f4e06b714f9735feefe5e7667ad", "chunk": "diff --git a/storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java b/storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java\nindex 9683becc29..f0817aa283 100644\n--- a/storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java\n+++ b/storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java\n\n@@ -15,43 +15,35 @@ package tech.pegasys.teku.storage.server;\n \n import com.google.common.base.Supplier;\n import com.google.common.base.Suppliers;\n-import com.google.common.eventbus.EventBus;\n import com.google.common.primitives.UnsignedLong;\n import java.util.Optional;\n import java.util.stream.Stream;\n import tech.pegasys.teku.pow.api.Eth1EventsChannel;\n import tech.pegasys.teku.pow.event.DepositsFromBlockEvent;\n import tech.pegasys.teku.pow.event.MinGenesisTimeBlockEvent;\n-import tech.pegasys.teku.storage.api.Eth1DepositChannel;\n+import tech.pegasys.teku.storage.api.Eth1DepositStorageChannel;\n import tech.pegasys.teku.util.async.SafeFuture;\n \n-public class DepositStorage implements Eth1DepositChannel, Eth1EventsChannel {\n-  private final EventBus eventBus;\n+public class DepositStorage implements Eth1DepositStorageChannel, Eth1EventsChannel {\n   private final Database database;\n   private final Eth1EventsChannel eth1EventsChannel;\n   private volatile boolean isSyncingFromDatabase = false;\n-  private volatile Supplier<SafeFuture<ReplayDepositsResult>> replayResult;\n+  private final Supplier<SafeFuture<ReplayDepositsResult>> replayResult;\n \n-  private DepositStorage(\n-      final EventBus eventBus, final Eth1EventsChannel eth1EventsChannel, final Database database) {\n-    this.eventBus = eventBus;\n+  private DepositStorage(final Eth1EventsChannel eth1EventsChannel, final Database database) {\n     this.eth1EventsChannel = eth1EventsChannel;\n     this.database = database;\n     this.replayResult = Suppliers.memoize(() -> SafeFuture.of(this::replayDeposits));\n   }\n \n   public static DepositStorage create(\n-      final EventBus eventBus, final Eth1EventsChannel eth1EventsChannel, final Database database) {\n-    return new DepositStorage(eventBus, eth1EventsChannel, database);\n+      final Eth1EventsChannel eth1EventsChannel, final Database database) {\n+    return new DepositStorage(eth1EventsChannel, database);\n   }\n \n-  public void start() {\n-    eventBus.register(this);\n-  }\n+  public void start() {}\n \n-  public void stop() {\n-    eventBus.unregister(this);\n-  }\n+  public void stop() {}\n \n   @Override\n   public SafeFuture<ReplayDepositsResult> replayDepositEvents() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2MzE1NA==", "url": "https://github.com/ConsenSys/teku/pull/1837#discussion_r430863154", "bodyText": "nit: rename to pastMinGenesisBlock - it's the block that meets the timestamp criteria but may not actually trigger genesis as it may not have enough validators.", "author": "ajsutton", "createdAt": "2020-05-27T05:22:28Z", "path": "storage/src/main/java/tech/pegasys/teku/storage/server/ReplayDepositsResult.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server;\n+\n+import com.google.common.primitives.UnsignedLong;\n+import java.util.Optional;\n+\n+public class ReplayDepositsResult {\n+  private final Optional<UnsignedLong> blockNumber;\n+  private final boolean pastGenesisBlock;\n+\n+  public ReplayDepositsResult(final UnsignedLong blockNumber, final boolean pastGenesisBlock) {\n+    this.blockNumber = Optional.ofNullable(blockNumber);\n+    this.pastGenesisBlock = pastGenesisBlock;\n+  }\n+\n+  public Optional<UnsignedLong> getBlockNumber() {\n+    return blockNumber;\n+  }\n+\n+  public boolean isPastGenesisBlock() {\n+    return pastGenesisBlock;", "originalCommit": "93d71630bf103f0ea2fb193fdd0b06ebf59c8b5a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "568d1aef97608f4e06b714f9735feefe5e7667ad", "chunk": "diff --git a/storage/src/main/java/tech/pegasys/teku/storage/server/ReplayDepositsResult.java b/storage/src/main/java/tech/pegasys/teku/storage/server/ReplayDepositsResult.java\nindex ea65422781..20c871a62c 100644\n--- a/storage/src/main/java/tech/pegasys/teku/storage/server/ReplayDepositsResult.java\n+++ b/storage/src/main/java/tech/pegasys/teku/storage/server/ReplayDepositsResult.java\n\n@@ -18,18 +18,18 @@ import java.util.Optional;\n \n public class ReplayDepositsResult {\n   private final Optional<UnsignedLong> blockNumber;\n-  private final boolean pastGenesisBlock;\n+  private final boolean pastMinGenesisBlock;\n \n-  public ReplayDepositsResult(final UnsignedLong blockNumber, final boolean pastGenesisBlock) {\n+  public ReplayDepositsResult(final UnsignedLong blockNumber, final boolean pastMinGenesisBlock) {\n     this.blockNumber = Optional.ofNullable(blockNumber);\n-    this.pastGenesisBlock = pastGenesisBlock;\n+    this.pastMinGenesisBlock = pastMinGenesisBlock;\n   }\n \n   public Optional<UnsignedLong> getBlockNumber() {\n     return blockNumber;\n   }\n \n-  public boolean isPastGenesisBlock() {\n-    return pastGenesisBlock;\n+  public boolean isPastMinGenesisBlock() {\n+    return pastMinGenesisBlock;\n   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2MzcyNg==", "url": "https://github.com/ConsenSys/teku/pull/1837#discussion_r430863726", "bodyText": "nit: the tests will be slightly easier to read if we add deposits and min genesis events in the order they actually happen.  That also means the test follows the sequence requirements that apply in the real code as well (won't affect the result but good to be accurate).", "author": "ajsutton", "createdAt": "2020-05-27T05:24:49Z", "path": "storage/src/test/java/tech/pegasys/teku/storage/server/DepositStorageTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.google.common.eventbus.EventBus;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.datastructures.util.DataStructureUtil;\n+import tech.pegasys.teku.pow.api.Eth1EventsChannel;\n+import tech.pegasys.teku.pow.event.DepositsFromBlockEvent;\n+import tech.pegasys.teku.pow.event.MinGenesisTimeBlockEvent;\n+import tech.pegasys.teku.storage.server.rocksdb.AbstractRocksDbDatabaseTest;\n+import tech.pegasys.teku.storage.server.rocksdb.RocksDbConfiguration;\n+import tech.pegasys.teku.storage.server.rocksdb.RocksDbDatabase;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+import tech.pegasys.teku.util.config.StateStorageMode;\n+\n+public class DepositStorageTest extends AbstractRocksDbDatabaseTest {\n+  private final EventBus eventBus = new EventBus();\n+  private final TrackingEth1EventsChannel eventsChannel = new TrackingEth1EventsChannel();\n+  final DataStructureUtil dataStructureUtil = new DataStructureUtil();\n+  private DepositStorage depositStorage;\n+\n+  @BeforeEach\n+  public void beforeEach() {\n+    depositStorage = DepositStorage.create(eventBus, eventsChannel, database);\n+    depositStorage.start();\n+  }\n+\n+  @Test\n+  public void shouldSendGenesisBeforeFirstDeposit()\n+      throws ExecutionException, InterruptedException {\n+    DepositsFromBlockEvent blockEvent = dataStructureUtil.randomDepositsFromBlockEvent(100L, 10);\n+    MinGenesisTimeBlockEvent genesis = dataStructureUtil.randomMinGenesisTimeBlockEvent(1L);\n+    database.addDepositsFromBlockEvent(blockEvent);\n+    database.addMinGenesisTimeBlock(genesis);", "originalCommit": "93d71630bf103f0ea2fb193fdd0b06ebf59c8b5a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "568d1aef97608f4e06b714f9735feefe5e7667ad", "chunk": "diff --git a/storage/src/test/java/tech/pegasys/teku/storage/server/DepositStorageTest.java b/storage/src/test/java/tech/pegasys/teku/storage/server/DepositStorageTest.java\nindex 047483a03d..64d8a75cfe 100644\n--- a/storage/src/test/java/tech/pegasys/teku/storage/server/DepositStorageTest.java\n+++ b/storage/src/test/java/tech/pegasys/teku/storage/server/DepositStorageTest.java\n\n@@ -15,7 +15,6 @@ package tech.pegasys.teku.storage.server;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n-import com.google.common.eventbus.EventBus;\n import java.io.File;\n import java.util.ArrayList;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2NDI0Ng==", "url": "https://github.com/ConsenSys/teku/pull/1837#discussion_r430864246", "bodyText": "Probably worth adding a test for the genesis event being after all deposits.  In that case the block number to start from should be the min-genesis block, not the last deposit block.", "author": "ajsutton", "createdAt": "2020-05-27T05:26:52Z", "path": "storage/src/test/java/tech/pegasys/teku/storage/server/DepositStorageTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.google.common.eventbus.EventBus;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.datastructures.util.DataStructureUtil;\n+import tech.pegasys.teku.pow.api.Eth1EventsChannel;\n+import tech.pegasys.teku.pow.event.DepositsFromBlockEvent;\n+import tech.pegasys.teku.pow.event.MinGenesisTimeBlockEvent;\n+import tech.pegasys.teku.storage.server.rocksdb.AbstractRocksDbDatabaseTest;\n+import tech.pegasys.teku.storage.server.rocksdb.RocksDbConfiguration;\n+import tech.pegasys.teku.storage.server.rocksdb.RocksDbDatabase;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+import tech.pegasys.teku.util.config.StateStorageMode;\n+\n+public class DepositStorageTest extends AbstractRocksDbDatabaseTest {\n+  private final EventBus eventBus = new EventBus();\n+  private final TrackingEth1EventsChannel eventsChannel = new TrackingEth1EventsChannel();\n+  final DataStructureUtil dataStructureUtil = new DataStructureUtil();\n+  private DepositStorage depositStorage;\n+\n+  @BeforeEach\n+  public void beforeEach() {\n+    depositStorage = DepositStorage.create(eventBus, eventsChannel, database);\n+    depositStorage.start();\n+  }\n+\n+  @Test\n+  public void shouldSendGenesisBeforeFirstDeposit()\n+      throws ExecutionException, InterruptedException {\n+    DepositsFromBlockEvent blockEvent = dataStructureUtil.randomDepositsFromBlockEvent(100L, 10);\n+    MinGenesisTimeBlockEvent genesis = dataStructureUtil.randomMinGenesisTimeBlockEvent(1L);\n+    database.addDepositsFromBlockEvent(blockEvent);\n+    database.addMinGenesisTimeBlock(genesis);\n+\n+    SafeFuture<ReplayDepositsResult> future = depositStorage.replayDepositEvents();\n+    assertThat(future.isDone()).isTrue();\n+\n+    assertThat(eventsChannel.getOrderedList()).containsExactly(genesis, blockEvent);\n+    assertThat(eventsChannel.getGenesis()).isEqualToComparingFieldByField(genesis);\n+    assertThat(future.get().getBlockNumber().get()).isEqualTo(blockEvent.getBlockNumber());\n+    assertThat(future.get().isPastGenesisBlock()).isTrue();\n+    depositStorage.stop();\n+  }\n+\n+  @Test\n+  public void shouldSendGenesisAfterFirstDeposit() throws ExecutionException, InterruptedException {", "originalCommit": "93d71630bf103f0ea2fb193fdd0b06ebf59c8b5a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "568d1aef97608f4e06b714f9735feefe5e7667ad", "chunk": "diff --git a/storage/src/test/java/tech/pegasys/teku/storage/server/DepositStorageTest.java b/storage/src/test/java/tech/pegasys/teku/storage/server/DepositStorageTest.java\nindex 047483a03d..64d8a75cfe 100644\n--- a/storage/src/test/java/tech/pegasys/teku/storage/server/DepositStorageTest.java\n+++ b/storage/src/test/java/tech/pegasys/teku/storage/server/DepositStorageTest.java\n\n@@ -15,7 +15,6 @@ package tech.pegasys.teku.storage.server;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n-import com.google.common.eventbus.EventBus;\n import java.io.File;\n import java.util.ArrayList;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2NDUyNQ==", "url": "https://github.com/ConsenSys/teku/pull/1837#discussion_r430864525", "bodyText": "Worth checking that the ReplayDepositsResult has the genesis block as the block to start from and true for isPastGenesisBlock", "author": "ajsutton", "createdAt": "2020-05-27T05:27:53Z", "path": "storage/src/test/java/tech/pegasys/teku/storage/server/DepositStorageTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.storage.server;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.google.common.eventbus.EventBus;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutionException;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.datastructures.util.DataStructureUtil;\n+import tech.pegasys.teku.pow.api.Eth1EventsChannel;\n+import tech.pegasys.teku.pow.event.DepositsFromBlockEvent;\n+import tech.pegasys.teku.pow.event.MinGenesisTimeBlockEvent;\n+import tech.pegasys.teku.storage.server.rocksdb.AbstractRocksDbDatabaseTest;\n+import tech.pegasys.teku.storage.server.rocksdb.RocksDbConfiguration;\n+import tech.pegasys.teku.storage.server.rocksdb.RocksDbDatabase;\n+import tech.pegasys.teku.util.async.SafeFuture;\n+import tech.pegasys.teku.util.config.StateStorageMode;\n+\n+public class DepositStorageTest extends AbstractRocksDbDatabaseTest {\n+  private final EventBus eventBus = new EventBus();\n+  private final TrackingEth1EventsChannel eventsChannel = new TrackingEth1EventsChannel();\n+  final DataStructureUtil dataStructureUtil = new DataStructureUtil();\n+  private DepositStorage depositStorage;\n+\n+  @BeforeEach\n+  public void beforeEach() {\n+    depositStorage = DepositStorage.create(eventBus, eventsChannel, database);\n+    depositStorage.start();\n+  }\n+\n+  @Test\n+  public void shouldSendGenesisBeforeFirstDeposit()\n+      throws ExecutionException, InterruptedException {\n+    DepositsFromBlockEvent blockEvent = dataStructureUtil.randomDepositsFromBlockEvent(100L, 10);\n+    MinGenesisTimeBlockEvent genesis = dataStructureUtil.randomMinGenesisTimeBlockEvent(1L);\n+    database.addDepositsFromBlockEvent(blockEvent);\n+    database.addMinGenesisTimeBlock(genesis);\n+\n+    SafeFuture<ReplayDepositsResult> future = depositStorage.replayDepositEvents();\n+    assertThat(future.isDone()).isTrue();\n+\n+    assertThat(eventsChannel.getOrderedList()).containsExactly(genesis, blockEvent);\n+    assertThat(eventsChannel.getGenesis()).isEqualToComparingFieldByField(genesis);\n+    assertThat(future.get().getBlockNumber().get()).isEqualTo(blockEvent.getBlockNumber());\n+    assertThat(future.get().isPastGenesisBlock()).isTrue();\n+    depositStorage.stop();\n+  }\n+\n+  @Test\n+  public void shouldSendGenesisAfterFirstDeposit() throws ExecutionException, InterruptedException {\n+    DepositsFromBlockEvent blockEvent = dataStructureUtil.randomDepositsFromBlockEvent(100L, 10);\n+    DepositsFromBlockEvent blockEvent2 = dataStructureUtil.randomDepositsFromBlockEvent(102L, 10);\n+    MinGenesisTimeBlockEvent genesis = dataStructureUtil.randomMinGenesisTimeBlockEvent(101L);\n+\n+    database.addDepositsFromBlockEvent(blockEvent);\n+    database.addDepositsFromBlockEvent(blockEvent2);\n+    database.addMinGenesisTimeBlock(genesis);\n+\n+    SafeFuture<ReplayDepositsResult> future = depositStorage.replayDepositEvents();\n+    assertThat(future.isDone()).isTrue();\n+    assertThat(eventsChannel.getOrderedList()).containsExactly(blockEvent, genesis, blockEvent2);\n+    assertThat(eventsChannel.getGenesis()).isEqualToComparingFieldByField(genesis);\n+    assertThat(future.get().getBlockNumber().get()).isEqualTo(blockEvent2.getBlockNumber());\n+    assertThat(future.get().isPastGenesisBlock()).isTrue();\n+    depositStorage.stop();\n+  }\n+\n+  @Test\n+  public void shouldReplayMultipleDeposits() throws ExecutionException, InterruptedException {\n+    DepositsFromBlockEvent blockEvent = dataStructureUtil.randomDepositsFromBlockEvent(100L, 10);\n+    DepositsFromBlockEvent blockEvent2 = dataStructureUtil.randomDepositsFromBlockEvent(101L, 10);\n+    database.addDepositsFromBlockEvent(blockEvent);\n+    database.addDepositsFromBlockEvent(blockEvent2);\n+\n+    SafeFuture<ReplayDepositsResult> future = depositStorage.replayDepositEvents();\n+    assertThat(future.isDone()).isTrue();\n+    assertThat(eventsChannel.getOrderedList()).containsExactly(blockEvent, blockEvent2);\n+    assertThat(eventsChannel.getGenesis()).isNull();\n+    assertThat(future.get().getBlockNumber().get()).isEqualTo(blockEvent2.getBlockNumber());\n+    assertThat(future.get().isPastGenesisBlock()).isFalse();\n+    depositStorage.stop();\n+  }\n+\n+  @Test\n+  public void shouldSendBlockThenGenesisWhenBlockNumberIsTheSame() {\n+    DepositsFromBlockEvent blockEvent = dataStructureUtil.randomDepositsFromBlockEvent(100L, 10);\n+    MinGenesisTimeBlockEvent genesis = dataStructureUtil.randomMinGenesisTimeBlockEvent(100L);\n+    database.addDepositsFromBlockEvent(blockEvent);\n+    database.addMinGenesisTimeBlock(genesis);\n+\n+    SafeFuture<ReplayDepositsResult> future = depositStorage.replayDepositEvents();\n+    assertThat(future.isDone()).isTrue();\n+    assertThat(eventsChannel.getOrderedList()).containsExactly(blockEvent, genesis);\n+    assertThat(eventsChannel.getGenesis()).isEqualToComparingFieldByField(genesis);\n+    depositStorage.stop();\n+  }\n+\n+  @Test\n+  public void shouldJustSendGenesis() {\n+    MinGenesisTimeBlockEvent genesis = dataStructureUtil.randomMinGenesisTimeBlockEvent(100L);\n+    database.addMinGenesisTimeBlock(genesis);\n+\n+    SafeFuture<ReplayDepositsResult> future = depositStorage.replayDepositEvents();\n+    assertThat(future.isDone()).isTrue();\n+    assertThat(eventsChannel.getOrderedList()).containsExactly(genesis);\n+    assertThat(eventsChannel.getGenesis()).isEqualToComparingFieldByField(genesis);", "originalCommit": "93d71630bf103f0ea2fb193fdd0b06ebf59c8b5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ1OTc0Ng==", "url": "https://github.com/ConsenSys/teku/pull/1837#discussion_r431459746", "bodyText": "picking up the last block number from min genesis event I wasn't aware of, so i'll need to fix the response", "author": "rolfyone", "createdAt": "2020-05-27T21:43:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2NDUyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "568d1aef97608f4e06b714f9735feefe5e7667ad", "chunk": "diff --git a/storage/src/test/java/tech/pegasys/teku/storage/server/DepositStorageTest.java b/storage/src/test/java/tech/pegasys/teku/storage/server/DepositStorageTest.java\nindex 047483a03d..64d8a75cfe 100644\n--- a/storage/src/test/java/tech/pegasys/teku/storage/server/DepositStorageTest.java\n+++ b/storage/src/test/java/tech/pegasys/teku/storage/server/DepositStorageTest.java\n\n@@ -15,7 +15,6 @@ package tech.pegasys.teku.storage.server;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n-import com.google.common.eventbus.EventBus;\n import java.io.File;\n import java.util.ArrayList;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM0NDM0OA==", "url": "https://github.com/ConsenSys/teku/pull/1837#discussion_r431344348", "bodyText": "This way you would not need a depositsComplete method. Also, it would be more in line with how we do min genesis block notification from Pow Service side. (I'm assuming streamDepositsFromBlocks returns DepositsFromBlockEvents in order)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void depositEvent(final DepositsFromBlockEvent event) {\n          \n          \n            \n                  if (genesis.isPresent()\n          \n          \n            \n                      && !isGenesisDone\n          \n          \n            \n                      && genesis.get().getBlockNumber().compareTo(event.getBlockNumber()) < 0) {\n          \n          \n            \n                    this.eth1EventsChannel.onMinGenesisTimeBlock(genesis.get());\n          \n          \n            \n                    isGenesisDone = true;\n          \n          \n            \n                  }\n          \n          \n            \n                  eth1EventsChannel.onDepositsFromBlock(event);\n          \n          \n            \n                  lastDeposit = event.getBlockNumber();\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                public void depositsComplete() {\n          \n          \n            \n                  if (genesis.isPresent() && !isGenesisDone) {\n          \n          \n            \n                    this.eth1EventsChannel.onMinGenesisTimeBlock(genesis.get());\n          \n          \n            \n                    isGenesisDone = true;\n          \n          \n            \n                  }\n          \n          \n            \n                }\n          \n          \n            \n                public void depositEvent(final DepositsFromBlockEvent event) {\n          \n          \n            \n                  eth1EventsChannel.onDepositsFromBlock(event);\n          \n          \n            \n                  if (genesis.isPresent()\n          \n          \n            \n                      && !isGenesisDone\n          \n          \n            \n                      && genesis.get().getTimestamp().compareTo(event.getBlockTimestamp()) >= 0) {\n          \n          \n            \n                    this.eth1EventsChannel.onMinGenesisTimeBlock(genesis.get());\n          \n          \n            \n                    isGenesisDone = true;\n          \n          \n            \n                  }\n          \n          \n            \n                  lastDeposit = event.getBlockNumber();\n          \n          \n            \n                }", "author": "cemozerr", "createdAt": "2020-05-27T18:08:51Z", "path": "storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java", "diffHunk": "@@ -44,22 +54,69 @@ public void stop() {\n   }\n \n   @Override\n-  public SafeFuture<Stream<DepositsFromBlockEvent>> streamDepositFromBlockEvents() {\n-    return SafeFuture.completedFuture(database.streamDepositsFromBlocks());\n+  public SafeFuture<ReplayDepositsResult> replayDepositEvents() {\n+    return replayResult.get();\n   }\n \n-  @Override\n-  public SafeFuture<Optional<MinGenesisTimeBlockEvent>> getMinGenesisTimeBlockEvent() {\n-    return SafeFuture.completedFuture(database.getMinGenesisTimeBlock());\n+  private ReplayDepositsResult replayDeposits() {\n+    isSyncingFromDatabase = true;\n+    final DepositSequencer depositSequencer =\n+        new DepositSequencer(eth1EventsChannel, database.getMinGenesisTimeBlock());\n+    try (Stream<DepositsFromBlockEvent> eventStream = database.streamDepositsFromBlocks()) {\n+      eventStream.forEach(depositSequencer::depositEvent);\n+    }\n+    depositSequencer.depositsComplete();\n+    isSyncingFromDatabase = false;\n+    return depositSequencer.done();\n   }\n \n   @Override\n   public void onDepositsFromBlock(final DepositsFromBlockEvent event) {\n-    database.addDepositsFromBlockEvent(event);\n+    if (!isSyncingFromDatabase) {\n+      database.addDepositsFromBlockEvent(event);\n+    }\n   }\n \n   @Override\n   public void onMinGenesisTimeBlock(final MinGenesisTimeBlockEvent event) {\n-    database.addMinGenesisTimeBlock(event);\n+    if (!isSyncingFromDatabase) {\n+      database.addMinGenesisTimeBlock(event);\n+    }\n+  }\n+\n+  static class DepositSequencer {\n+    private final Eth1EventsChannel eth1EventsChannel;\n+    private final Optional<MinGenesisTimeBlockEvent> genesis;\n+    private boolean isGenesisDone;\n+    private UnsignedLong lastDeposit;\n+\n+    public DepositSequencer(\n+        Eth1EventsChannel eventChannel, Optional<MinGenesisTimeBlockEvent> genesis) {\n+      this.eth1EventsChannel = eventChannel;\n+      this.genesis = genesis;\n+      this.isGenesisDone = false;\n+    }\n+\n+    public void depositEvent(final DepositsFromBlockEvent event) {\n+      if (genesis.isPresent()\n+          && !isGenesisDone\n+          && genesis.get().getBlockNumber().compareTo(event.getBlockNumber()) < 0) {\n+        this.eth1EventsChannel.onMinGenesisTimeBlock(genesis.get());\n+        isGenesisDone = true;\n+      }\n+      eth1EventsChannel.onDepositsFromBlock(event);\n+      lastDeposit = event.getBlockNumber();\n+    }\n+\n+    public void depositsComplete() {\n+      if (genesis.isPresent() && !isGenesisDone) {\n+        this.eth1EventsChannel.onMinGenesisTimeBlock(genesis.get());\n+        isGenesisDone = true;\n+      }\n+    }", "originalCommit": "93d71630bf103f0ea2fb193fdd0b06ebf59c8b5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ3NjQ3Ng==", "url": "https://github.com/ConsenSys/teku/pull/1837#discussion_r431476476", "bodyText": "had a chat, we'll leave it because of the possibility of minGenesis being after the last block", "author": "rolfyone", "createdAt": "2020-05-27T22:22:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM0NDM0OA=="}], "type": "inlineReview", "revised_code": {"commit": "568d1aef97608f4e06b714f9735feefe5e7667ad", "chunk": "diff --git a/storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java b/storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java\nindex 9683becc29..f0817aa283 100644\n--- a/storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java\n+++ b/storage/src/main/java/tech/pegasys/teku/storage/server/DepositStorage.java\n\n@@ -15,43 +15,35 @@ package tech.pegasys.teku.storage.server;\n \n import com.google.common.base.Supplier;\n import com.google.common.base.Suppliers;\n-import com.google.common.eventbus.EventBus;\n import com.google.common.primitives.UnsignedLong;\n import java.util.Optional;\n import java.util.stream.Stream;\n import tech.pegasys.teku.pow.api.Eth1EventsChannel;\n import tech.pegasys.teku.pow.event.DepositsFromBlockEvent;\n import tech.pegasys.teku.pow.event.MinGenesisTimeBlockEvent;\n-import tech.pegasys.teku.storage.api.Eth1DepositChannel;\n+import tech.pegasys.teku.storage.api.Eth1DepositStorageChannel;\n import tech.pegasys.teku.util.async.SafeFuture;\n \n-public class DepositStorage implements Eth1DepositChannel, Eth1EventsChannel {\n-  private final EventBus eventBus;\n+public class DepositStorage implements Eth1DepositStorageChannel, Eth1EventsChannel {\n   private final Database database;\n   private final Eth1EventsChannel eth1EventsChannel;\n   private volatile boolean isSyncingFromDatabase = false;\n-  private volatile Supplier<SafeFuture<ReplayDepositsResult>> replayResult;\n+  private final Supplier<SafeFuture<ReplayDepositsResult>> replayResult;\n \n-  private DepositStorage(\n-      final EventBus eventBus, final Eth1EventsChannel eth1EventsChannel, final Database database) {\n-    this.eventBus = eventBus;\n+  private DepositStorage(final Eth1EventsChannel eth1EventsChannel, final Database database) {\n     this.eth1EventsChannel = eth1EventsChannel;\n     this.database = database;\n     this.replayResult = Suppliers.memoize(() -> SafeFuture.of(this::replayDeposits));\n   }\n \n   public static DepositStorage create(\n-      final EventBus eventBus, final Eth1EventsChannel eth1EventsChannel, final Database database) {\n-    return new DepositStorage(eventBus, eth1EventsChannel, database);\n+      final Eth1EventsChannel eth1EventsChannel, final Database database) {\n+    return new DepositStorage(eth1EventsChannel, database);\n   }\n \n-  public void start() {\n-    eventBus.register(this);\n-  }\n+  public void start() {}\n \n-  public void stop() {\n-    eventBus.unregister(this);\n-  }\n+  public void stop() {}\n \n   @Override\n   public SafeFuture<ReplayDepositsResult> replayDepositEvents() {\n"}}, {"oid": "568d1aef97608f4e06b714f9735feefe5e7667ad", "url": "https://github.com/ConsenSys/teku/commit/568d1aef97608f4e06b714f9735feefe5e7667ad", "message": "changes from review feedback\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-05-27T22:35:55Z", "type": "commit"}, {"oid": "91deae86af0442417bdec83afe7675ca828492a6", "url": "https://github.com/ConsenSys/teku/commit/91deae86af0442417bdec83afe7675ca828492a6", "message": "Merge remote-tracking branch 'upstream/master' into 1412-depositsFromBlock-storage", "committedDate": "2020-05-27T22:41:18Z", "type": "commit"}, {"oid": "4fae0f7cc5d723ab937702cc5aa3e1b2467327c6", "url": "https://github.com/ConsenSys/teku/commit/4fae0f7cc5d723ab937702cc5aa3e1b2467327c6", "message": "Merge remote-tracking branch 'upstream/master' into 1412-depositsFromBlock-storage", "committedDate": "2020-05-27T23:07:23Z", "type": "commit"}, {"oid": "a2dc163c48e883ee39eaab0aada152e486a11d3b", "url": "https://github.com/ConsenSys/teku/commit/a2dc163c48e883ee39eaab0aada152e486a11d3b", "message": "Merge remote-tracking branch 'upstream/master' into 1412-depositsFromBlock-storage", "committedDate": "2020-05-27T23:13:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU4OTEwMw==", "url": "https://github.com/ConsenSys/teku/pull/1837#discussion_r432589103", "bodyText": "Instead of committing inside of the Updater, we should move the call to commit() out to where the Updater was created.", "author": "mbaxter", "createdAt": "2020-05-29T16:09:45Z", "path": "storage/src/main/java/tech/pegasys/teku/storage/server/rocksdb/dataaccess/V3RocksDbDao.java", "diffHunk": "@@ -400,6 +415,18 @@ public void deleteCheckpointState(final Checkpoint checkpoint) {\n       return prunedRoots;\n     }\n \n+    @Override\n+    public void addMinGenesisTimeBlock(final MinGenesisTimeBlockEvent event) {\n+      transaction.put(V3Schema.MIN_GENESIS_TIME_BLOCK, event);\n+      transaction.commit();", "originalCommit": "a2dc163c48e883ee39eaab0aada152e486a11d3b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}