{"pr_number": 1596, "pr_title": "Expose interface to update ENR according to subscribed attestation subnets", "pr_createdAt": "2020-04-15T18:39:21Z", "pr_url": "https://github.com/ConsenSys/teku/pull/1596", "timeline": [{"oid": "208289c7e37584a41127527fecee18d74e0f7b17", "url": "https://github.com/ConsenSys/teku/commit/208289c7e37584a41127527fecee18d74e0f7b17", "message": "Update ENR bitfield acording to subscribed attestation subnets", "committedDate": "2020-04-15T18:38:45Z", "type": "commit"}, {"oid": "31ee1c99c42a77ddaad2ced5a97703d88e49a418", "url": "https://github.com/ConsenSys/teku/commit/31ee1c99c42a77ddaad2ced5a97703d88e49a418", "message": "Fix noop class", "committedDate": "2020-04-15T18:49:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NDQ3Nw==", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r409064477", "bodyText": "Some of these constants are defined closer to the classes that use them - so you should make sure to deduplicate.", "author": "mbaxter", "createdAt": "2020-04-15T18:56:49Z", "path": "util/src/main/java/tech/pegasys/artemis/util/config/Constants.java", "diffHunk": "@@ -147,6 +147,15 @@\n   public static final long FORK_RETRY_DELAY_SECONDS = 10; // in sec\n   public static final long FORK_REFRESH_TIME_SECONDS = TimeUnit.MINUTES.toSeconds(5); // in sec\n \n+  // Networking\n+  public static final int GOSSIP_MAX_SIZE = 1048576; // bytes", "originalCommit": "31ee1c99c42a77ddaad2ced5a97703d88e49a418", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE5NjI4Mw==", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r409196283", "bodyText": "done.", "author": "cemozerr", "createdAt": "2020-04-15T23:41:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NDQ3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "393122fb61586fd3047c8492da975e390976cb61", "chunk": "diff --git a/util/src/main/java/tech/pegasys/artemis/util/config/Constants.java b/util/src/main/java/tech/pegasys/artemis/util/config/Constants.java\nindex 00566a20bb..113209bbce 100644\n--- a/util/src/main/java/tech/pegasys/artemis/util/config/Constants.java\n+++ b/util/src/main/java/tech/pegasys/artemis/util/config/Constants.java\n\n@@ -126,21 +126,23 @@ public class Constants {\n   public static UnsignedLong ETH1_FOLLOW_DISTANCE = UnsignedLong.valueOf(1024);\n \n   // Artemis specific\n-  public static Bytes32 ZERO_HASH = Bytes32.ZERO;\n-  public static double TIME_TICKER_REFRESH_RATE = 2; // per sec\n-  public static UnsignedLong GENESIS_START_DELAY = UnsignedLong.valueOf(5);\n-  public static int COMMITTEE_INDEX_SUBSCRIPTION_LENGTH = 2; // in epochs\n+  public static final Bytes32 ZERO_HASH = Bytes32.ZERO;\n+  public static final double TIME_TICKER_REFRESH_RATE = 2; // per sec\n+  public static final UnsignedLong GENESIS_START_DELAY = UnsignedLong.valueOf(5);\n+  public static final int COMMITTEE_INDEX_SUBSCRIPTION_LENGTH = 2; // in epochs\n   public static UnsignedLong ETH1_REQUEST_BUFFER = UnsignedLong.valueOf(10); // in sec\n-  public static long ETH1_CACHE_STARTUP_RETRY_TIMEOUT = 10; // in sec\n-  public static long ETH1_CACHE_STARTUP_RETRY_GIVEUP = 5; // in #\n-  public static long ETH1_INDIVIDUAL_BLOCK_RETRY_TIMEOUT = 500; // in milli sec\n-  public static long ETH1_DEPOSIT_REQUEST_RETRY_TIMEOUT = 2; // in sec\n-  public static long ETH1_SUBSCRIPTION_RETRY_TIMEOUT = 5; // in sec\n+  public static final long ETH1_CACHE_STARTUP_RETRY_TIMEOUT = 10; // in sec\n+  public static final long ETH1_CACHE_STARTUP_RETRY_GIVEUP = 5; // in #\n+  public static final long ETH1_INDIVIDUAL_BLOCK_RETRY_TIMEOUT = 500; // in milli sec\n+  public static final long ETH1_DEPOSIT_REQUEST_RETRY_TIMEOUT = 2; // in sec\n+  public static final long ETH1_SUBSCRIPTION_RETRY_TIMEOUT = 5; // in sec\n   public static final int MAXIMUM_CONCURRENT_ETH1_REQUESTS = 5;\n   public static final int REPUTATION_MANAGER_CAPACITY = 100;\n-  public static long STORAGE_REQUEST_TIMEOUT = 3; // in sec\n-  public static int STORAGE_QUERY_CHANNEL_PARALLELISM = 10; // # threads\n-  public static int PROTOARRAY_FORKCHOICE_PRUNE_THRESHOLD = 256;\n+  public static final long STORAGE_REQUEST_TIMEOUT = 3; // in sec\n+  public static final int STORAGE_QUERY_CHANNEL_PARALLELISM = 10; // # threads\n+  public static final int PROTOARRAY_FORKCHOICE_PRUNE_THRESHOLD = 256;\n+  public static final int DEFAULT_STARTUP_TARGET_PEER_COUNT = 5;\n+  public static final int DEFAULT_STARTUP_TIMEOUT_SECONDS = 30;\n \n   // Teku Validator Client Specific\n   public static final long VALIDATOR_DUTIES_TIMEOUT = 15; // in sec\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2ODEzNg==", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r409068136", "bodyText": "(nit) Maybe just:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              void updateCustomENRField(String fieldName, Bytes value);\n          \n          \n            \n              void setENRField(String fieldName, Bytes value);", "author": "mbaxter", "createdAt": "2020-04-15T19:02:57Z", "path": "networking/p2p/src/main/java/tech/pegasys/artemis/networking/p2p/network/P2PNetwork.java", "diffHunk": "@@ -88,6 +89,15 @@\n    */\n   Optional<String> getEnr();\n \n+  /**\n+   * Updates the value of or creates a field for the Ethereum Node Record (ENR) for the local node,\n+   * if one exists.\n+   *\n+   * @param fieldName\n+   * @param value\n+   */\n+  void updateCustomENRField(String fieldName, Bytes value);", "originalCommit": "31ee1c99c42a77ddaad2ced5a97703d88e49a418", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTEwMTE2Nw==", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r409101167", "bodyText": "updateCustomENRField is not the best, but there can be multiple different custom fields, so set wouldn't be too correct either. I'm undecided.", "author": "cemozerr", "createdAt": "2020-04-15T20:03:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2ODEzNg=="}], "type": "inlineReview", "revised_code": {"commit": "8c606c948a3017c9ee370b7105e669ca79179cdc", "chunk": "diff --git a/networking/p2p/src/main/java/tech/pegasys/artemis/networking/p2p/network/P2PNetwork.java b/networking/p2p/src/main/java/tech/pegasys/artemis/networking/p2p/network/P2PNetwork.java\nindex 4fcae933b6..a0908063a0 100644\n--- a/networking/p2p/src/main/java/tech/pegasys/artemis/networking/p2p/network/P2PNetwork.java\n+++ b/networking/p2p/src/main/java/tech/pegasys/artemis/networking/p2p/network/P2PNetwork.java\n\n@@ -89,15 +88,6 @@ public interface P2PNetwork<T extends Peer> extends GossipNetwork {\n    */\n   Optional<String> getEnr();\n \n-  /**\n-   * Updates the value of or creates a field for the Ethereum Node Record (ENR) for the local node,\n-   * if one exists.\n-   *\n-   * @param fieldName\n-   * @param value\n-   */\n-  void updateCustomENRField(String fieldName, Bytes value);\n-\n   /**\n    * starts the p2p network layer\n    *\n"}}, {"oid": "a6fe79db2c298d3d1aa469fe2c066be9a7da7dc0", "url": "https://github.com/ConsenSys/teku/commit/a6fe79db2c298d3d1aa469fe2c066be9a7da7dc0", "message": "Merge branch 'master' into attestationSubnetBitfield", "committedDate": "2020-04-15T19:59:17Z", "type": "commit"}, {"oid": "222242d2e36e1c6aabe90d6932e071a8903be425", "url": "https://github.com/ConsenSys/teku/commit/222242d2e36e1c6aabe90d6932e071a8903be425", "message": "Merge branch 'master' into attestationSubnetBitfield", "committedDate": "2020-04-15T20:43:47Z", "type": "commit"}, {"oid": "73678c43ef14026cef7351991dc12d3061cd3f1e", "url": "https://github.com/ConsenSys/teku/commit/73678c43ef14026cef7351991dc12d3061cd3f1e", "message": "Deduplicate constants", "committedDate": "2020-04-15T21:19:14Z", "type": "commit"}, {"oid": "5625e2203af6943857d84bbc3d6f3a822a784a91", "url": "https://github.com/ConsenSys/teku/commit/5625e2203af6943857d84bbc3d6f3a822a784a91", "message": "Use new clearBit method", "committedDate": "2020-04-15T21:24:10Z", "type": "commit"}, {"oid": "56c67e0d7df4b790ba11c1093886d2f7556f63bf", "url": "https://github.com/ConsenSys/teku/commit/56c67e0d7df4b790ba11c1093886d2f7556f63bf", "message": "Add test", "committedDate": "2020-04-15T22:36:01Z", "type": "commit"}, {"oid": "77b4f9acbcb4b9748d6d9e8039d09a558a9a1040", "url": "https://github.com/ConsenSys/teku/commit/77b4f9acbcb4b9748d6d9e8039d09a558a9a1040", "message": "Update discovery version", "committedDate": "2020-04-15T23:24:36Z", "type": "commit"}, {"oid": "a678e998ea97808c297619b3825f44cb962be224", "url": "https://github.com/ConsenSys/teku/commit/a678e998ea97808c297619b3825f44cb962be224", "message": "Merge branch 'master' into attestationSubnetBitfield", "committedDate": "2020-04-15T23:36:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIwMDE5MQ==", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r409200191", "bodyText": "The ENR should only report the subnets that we randomly selected to subscribe to long term, not the ones that we temporarily subscribe to as part of our aggregation duties:\nhttps://github.com/ethereum/eth2.0-specs/blob/dev/specs/phase0/validator.md#phase-0-attestation-subnet-stability:\n\nMaintain advertisement of the randomly selected subnets in their node's ENR attnets entry by setting the randomly selected subnet_id bits to True (e.g. ENR[\"attnets\"][subnet_id] = True) for all persistent attestation subnets\n\nRight now I think that's always an empty set because we aren't selecting long term subnets.", "author": "ajsutton", "createdAt": "2020-04-15T23:53:30Z", "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationTopicSubscriptions.java", "diffHunk": "@@ -38,6 +47,7 @@ public synchronized void subscribeToCommittee(\n     final UnsignedLong currentUnsubscribeSlot =\n         unsubscriptionSlotByCommittee.getOrDefault(committeeIndex, ZERO);\n     unsubscriptionSlotByCommittee.put(committeeIndex, max(currentUnsubscribeSlot, aggregationSlot));\n+    handleCommitteeSubscriptionENRChange(committeeIndex);", "originalCommit": "a678e998ea97808c297619b3825f44cb962be224", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY3ODY3MQ==", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r409678671", "bodyText": "My thinking was that, since we don't have the random selection of persistent subnets yet, for now, the new ENR attestation subnet bitfield functionality would be used to display attestation subnets we're subscribing for aggregation. That was probably an assumption I should have made more explicitly, and maybe not the best assumption to make. I will refactor this PR to explicitly expose an interface to subscribe and unsubscribe from randomly selected persistent attestation subnets.", "author": "cemozerr", "createdAt": "2020-04-16T16:11:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIwMDE5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "8c606c948a3017c9ee370b7105e669ca79179cdc", "chunk": "diff --git a/networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationTopicSubscriptions.java b/networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationTopicSubscriptions.java\nindex 04a3acd693..ab15948255 100644\n--- a/networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationTopicSubscriptions.java\n+++ b/networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationTopicSubscriptions.java\n\n@@ -47,7 +38,6 @@ public class AttestationTopicSubscriptions implements SlotEventsChannel {\n     final UnsignedLong currentUnsubscribeSlot =\n         unsubscriptionSlotByCommittee.getOrDefault(committeeIndex, ZERO);\n     unsubscriptionSlotByCommittee.put(committeeIndex, max(currentUnsubscribeSlot, aggregationSlot));\n-    handleCommitteeSubscriptionENRChange(committeeIndex);\n   }\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIwMTAxMw==", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r409201013", "bodyText": "We're going to have to have a conversation about shoving every constant into one file at some point - it's getting very crowded in there....", "author": "ajsutton", "createdAt": "2020-04-15T23:56:09Z", "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/rpc/core/RpcTimeouts.java", "diffHunk": "@@ -23,9 +24,9 @@\n public abstract class RpcTimeouts {\n \n   // The maximum time to wait for first byte of request response (time-to-first-byte).\n-  static final Duration TTFB_TIMEOUT = Duration.ofSeconds(5);\n+  static final Duration TTFB_TIMEOUT = Duration.ofSeconds(Constants.TTFB_TIMEOUT);\n   // The maximum time for complete response transfer.\n-  static final Duration RESP_TIMEOUT = Duration.ofSeconds(10);\n+  static final Duration RESP_TIMEOUT = Duration.ofSeconds(Constants.RESP_TIMEOUT);", "originalCommit": "a678e998ea97808c297619b3825f44cb962be224", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY1Nzk1NQ==", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r409657955", "bodyText": "I understand, but I'm trying to be as consistent as possible. If we did decide to move the constants out of that file to individual files, I would not shove them there.", "author": "cemozerr", "createdAt": "2020-04-16T15:41:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIwMTAxMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIwNjY4Nw==", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r409206687", "bodyText": "I think we've wound up mixing committeeIndex and attestation subnet in this interface with the subscribe/unsubscribe talking in terms of committee index but the attestation subnet defining subnet indices. Prior to v0.11 that was a 1-1 mapping but now that the topic index is committeeIndex % ATTESTATION_SUBNET_COUNT they wind up different and something has to handle cases where two committees map to the same subnet (especially when we unsubscribe from one but not the other).\nI'd be tempted to define this entirely in terms of subnet index so the AttestationTopicSubscriptions class is responsible for the mapping from committee index to subnet index and working out which subnets we should be subscribed from that.\nBut I'd also be very tempted to change updateAttestationSubnetENRField to be more discovery system agnostic so it's just setLongTermAttestationSubnetSubscriptions(List<Integer> subnetIndices) and that flows all the way down to DiscoveryNetwork which is responsible for converting the indices to the right format to put in an ENR.  Outside of DiscoveryNetwork shouldn't need to know how it's represented (or really even that it goes in the ENR).  In the future it might use discv5 topic searches rather than an enr field and ideally only DiscoveryNetwork would have to change.", "author": "ajsutton", "createdAt": "2020-04-16T00:14:46Z", "path": "networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/Eth2Network.java", "diffHunk": "@@ -21,4 +22,6 @@\n   void subscribeToAttestationCommitteeTopic(int committeeIndex);\n \n   void unsubscribeFromAttestationCommitteeTopic(int committeeIndex);\n+\n+  void updateAttestationSubnetENRField(Bytes value);", "originalCommit": "a678e998ea97808c297619b3825f44cb962be224", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY4ODIyOA==", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r409688228", "bodyText": "changing updateAttestationSubnetENRField to setLongTermAttestationSubnetSubscriptions(List<Integer> subnetIndices) makes a lot of sense to me.", "author": "cemozerr", "createdAt": "2020-04-16T16:25:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIwNjY4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcxNDk5OA==", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r409714998", "bodyText": "However, the fact that DiscoveryNetwork is an instance of the P2PNetwork makes it impossible, as far as I understand, to keep any Discovery specific implementation detail out of P2PNetwork, DelegatingP2PNetwork, LibP2PNetwork, MockP2PNetwork etc. Any DiscoveryNetwork specific API I need to implement, I need to implement for all these classes as well.", "author": "cemozerr", "createdAt": "2020-04-16T17:07:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIwNjY4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTgyNzQ0Mg==", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r409827442", "bodyText": "I think all the discovery specific stuff should be inside DiscoveryNetwork, not exposed by it's API.  Just like the discovery library dependency is entire inside DiscoveryNetwork.", "author": "ajsutton", "createdAt": "2020-04-16T20:25:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIwNjY4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDMzOTIyMg==", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r410339222", "bodyText": "Makes total sense to me as discussed offline.", "author": "cemozerr", "createdAt": "2020-04-17T16:36:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIwNjY4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "8c606c948a3017c9ee370b7105e669ca79179cdc", "chunk": "diff --git a/networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/Eth2Network.java b/networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/Eth2Network.java\nindex a136b3d57b..7cb0fbd802 100644\n--- a/networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/Eth2Network.java\n+++ b/networking/eth2/src/main/java/tech/pegasys/artemis/networking/eth2/Eth2Network.java\n\n@@ -23,5 +23,5 @@ public interface Eth2Network extends P2PNetwork<Eth2Peer> {\n \n   void unsubscribeFromAttestationCommitteeTopic(int committeeIndex);\n \n-  void updateAttestationSubnetENRField(Bytes value);\n+  void setLongTermAttestationSubnetSubscriptions(List<Integer> subnetIndices);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIwNzc0Nw==", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r409207747", "bodyText": "We shouldn't be calling unsubscribeFromCommittee when the subnet overlaps with one we stay subscribed to either.", "author": "ajsutton", "createdAt": "2020-04-16T00:18:15Z", "path": "networking/eth2/src/test/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationTopicSubscriptionsTest.java", "diffHunk": "@@ -82,12 +85,67 @@ public void shouldPreserveLaterSubscriptionPeriodWhenEarlierSlotAdded() {\n     final UnsignedLong secondSlot = UnsignedLong.valueOf(15);\n \n     subscriptions.subscribeToCommittee(committeeIndex, secondSlot);\n-    subscriptions.subscribeToCommittee(committeeIndex, firstSlot);\n \n     subscriptions.onSlot(firstSlot.plus(ONE));\n     verify(eth2Network, never()).unsubscribeFromAttestationCommitteeTopic(committeeIndex);\n \n     subscriptions.onSlot(secondSlot.plus(ONE));\n     verify(eth2Network).unsubscribeFromAttestationCommitteeTopic(committeeIndex);\n   }\n+\n+  @Test\n+  public void shouldSubscribeToSubnet() {\n+    final int committeeIndex = 3;\n+\n+    final UnsignedLong firstSlot = UnsignedLong.valueOf(10);\n+    subscriptions.subscribeToCommittee(committeeIndex, firstSlot);\n+    int subnetIndex = committeeIndex % ATTESTATION_SUBNET_COUNT;\n+    Bitvector bitvector = new Bitvector(ATTESTATION_SUBNET_COUNT);\n+    bitvector.setBit(subnetIndex);\n+\n+    verify(eth2Network).updateAttestationSubnetENRField(bitvector.serialize());\n+  }\n+\n+  @Test\n+  public void shouldSubscribeToMultipleSubnets() {\n+    final int committeeIndex1 = 3;\n+    final int committeeIndex2 = 10;\n+\n+    final UnsignedLong firstSlot = UnsignedLong.valueOf(10);\n+    subscriptions.subscribeToCommittee(committeeIndex1, firstSlot);\n+    subscriptions.subscribeToCommittee(committeeIndex2, firstSlot);\n+    int subnetIndex1 = committeeIndex1 % ATTESTATION_SUBNET_COUNT;\n+    int subnetIndex2 = committeeIndex2 % ATTESTATION_SUBNET_COUNT;\n+    Bitvector bitvector = new Bitvector(ATTESTATION_SUBNET_COUNT);\n+\n+    bitvector.setBit(subnetIndex1);\n+    verify(eth2Network).updateAttestationSubnetENRField(bitvector.serialize());\n+\n+    bitvector.setBit(subnetIndex2);\n+    verify(eth2Network).updateAttestationSubnetENRField(bitvector.serialize());\n+  }\n+\n+  @Test\n+  public void shouldNotUnsubscribeWhenThereAreOtherCommitteeThatMapToSameSubnet() {\n+\n+    final int committeeIndex1 = 4;\n+    final int committeeIndex2 = 4 + ATTESTATION_SUBNET_COUNT;\n+\n+    final UnsignedLong slot1 = UnsignedLong.valueOf(10);\n+    final UnsignedLong slot2 = UnsignedLong.valueOf(13);\n+    subscriptions.subscribeToCommittee(committeeIndex1, slot1);\n+    subscriptions.subscribeToCommittee(committeeIndex2, slot2);\n+\n+    Bitvector bitvector = new Bitvector(ATTESTATION_SUBNET_COUNT);\n+    bitvector.setBit(4);\n+\n+    verify(eth2Network, times(1)).updateAttestationSubnetENRField(bitvector.serialize());\n+\n+    subscriptions.onSlot(slot1.plus(ONE));\n+    verify(eth2Network, times(1)).updateAttestationSubnetENRField(bitvector.serialize());\n+\n+    bitvector.clearBit(4);\n+    subscriptions.onSlot(slot2.plus(ONE));\n+    verify(eth2Network).updateAttestationSubnetENRField(bitvector.serialize());", "originalCommit": "a678e998ea97808c297619b3825f44cb962be224", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8c606c948a3017c9ee370b7105e669ca79179cdc", "chunk": "diff --git a/networking/eth2/src/test/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationTopicSubscriptionsTest.java b/networking/eth2/src/test/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationTopicSubscriptionsTest.java\nindex 0c0619912f..6cc503775a 100644\n--- a/networking/eth2/src/test/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationTopicSubscriptionsTest.java\n+++ b/networking/eth2/src/test/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationTopicSubscriptionsTest.java\n\n@@ -92,60 +89,4 @@ class AttestationTopicSubscriptionsTest {\n     subscriptions.onSlot(secondSlot.plus(ONE));\n     verify(eth2Network).unsubscribeFromAttestationCommitteeTopic(committeeIndex);\n   }\n-\n-  @Test\n-  public void shouldSubscribeToSubnet() {\n-    final int committeeIndex = 3;\n-\n-    final UnsignedLong firstSlot = UnsignedLong.valueOf(10);\n-    subscriptions.subscribeToCommittee(committeeIndex, firstSlot);\n-    int subnetIndex = committeeIndex % ATTESTATION_SUBNET_COUNT;\n-    Bitvector bitvector = new Bitvector(ATTESTATION_SUBNET_COUNT);\n-    bitvector.setBit(subnetIndex);\n-\n-    verify(eth2Network).updateAttestationSubnetENRField(bitvector.serialize());\n-  }\n-\n-  @Test\n-  public void shouldSubscribeToMultipleSubnets() {\n-    final int committeeIndex1 = 3;\n-    final int committeeIndex2 = 10;\n-\n-    final UnsignedLong firstSlot = UnsignedLong.valueOf(10);\n-    subscriptions.subscribeToCommittee(committeeIndex1, firstSlot);\n-    subscriptions.subscribeToCommittee(committeeIndex2, firstSlot);\n-    int subnetIndex1 = committeeIndex1 % ATTESTATION_SUBNET_COUNT;\n-    int subnetIndex2 = committeeIndex2 % ATTESTATION_SUBNET_COUNT;\n-    Bitvector bitvector = new Bitvector(ATTESTATION_SUBNET_COUNT);\n-\n-    bitvector.setBit(subnetIndex1);\n-    verify(eth2Network).updateAttestationSubnetENRField(bitvector.serialize());\n-\n-    bitvector.setBit(subnetIndex2);\n-    verify(eth2Network).updateAttestationSubnetENRField(bitvector.serialize());\n-  }\n-\n-  @Test\n-  public void shouldNotUnsubscribeWhenThereAreOtherCommitteeThatMapToSameSubnet() {\n-\n-    final int committeeIndex1 = 4;\n-    final int committeeIndex2 = 4 + ATTESTATION_SUBNET_COUNT;\n-\n-    final UnsignedLong slot1 = UnsignedLong.valueOf(10);\n-    final UnsignedLong slot2 = UnsignedLong.valueOf(13);\n-    subscriptions.subscribeToCommittee(committeeIndex1, slot1);\n-    subscriptions.subscribeToCommittee(committeeIndex2, slot2);\n-\n-    Bitvector bitvector = new Bitvector(ATTESTATION_SUBNET_COUNT);\n-    bitvector.setBit(4);\n-\n-    verify(eth2Network, times(1)).updateAttestationSubnetENRField(bitvector.serialize());\n-\n-    subscriptions.onSlot(slot1.plus(ONE));\n-    verify(eth2Network, times(1)).updateAttestationSubnetENRField(bitvector.serialize());\n-\n-    bitvector.clearBit(4);\n-    subscriptions.onSlot(slot2.plus(ONE));\n-    verify(eth2Network).updateAttestationSubnetENRField(bitvector.serialize());\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIwODA2Mw==", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r409208063", "bodyText": "I suspect this should be\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                verify(eth2Network, times(1)).updateAttestationSubnetENRField(bitvector.serialize());\n          \n          \n            \n                verify(eth2Network, times(1)).updateAttestationSubnetENRField(any());\n          \n      \n    \n    \n  \n\nOtherwise the test will pass if the ENR field is updated with a different value because it's only asserting that particular value is only set once.", "author": "ajsutton", "createdAt": "2020-04-16T00:19:20Z", "path": "networking/eth2/src/test/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationTopicSubscriptionsTest.java", "diffHunk": "@@ -82,12 +85,67 @@ public void shouldPreserveLaterSubscriptionPeriodWhenEarlierSlotAdded() {\n     final UnsignedLong secondSlot = UnsignedLong.valueOf(15);\n \n     subscriptions.subscribeToCommittee(committeeIndex, secondSlot);\n-    subscriptions.subscribeToCommittee(committeeIndex, firstSlot);\n \n     subscriptions.onSlot(firstSlot.plus(ONE));\n     verify(eth2Network, never()).unsubscribeFromAttestationCommitteeTopic(committeeIndex);\n \n     subscriptions.onSlot(secondSlot.plus(ONE));\n     verify(eth2Network).unsubscribeFromAttestationCommitteeTopic(committeeIndex);\n   }\n+\n+  @Test\n+  public void shouldSubscribeToSubnet() {\n+    final int committeeIndex = 3;\n+\n+    final UnsignedLong firstSlot = UnsignedLong.valueOf(10);\n+    subscriptions.subscribeToCommittee(committeeIndex, firstSlot);\n+    int subnetIndex = committeeIndex % ATTESTATION_SUBNET_COUNT;\n+    Bitvector bitvector = new Bitvector(ATTESTATION_SUBNET_COUNT);\n+    bitvector.setBit(subnetIndex);\n+\n+    verify(eth2Network).updateAttestationSubnetENRField(bitvector.serialize());\n+  }\n+\n+  @Test\n+  public void shouldSubscribeToMultipleSubnets() {\n+    final int committeeIndex1 = 3;\n+    final int committeeIndex2 = 10;\n+\n+    final UnsignedLong firstSlot = UnsignedLong.valueOf(10);\n+    subscriptions.subscribeToCommittee(committeeIndex1, firstSlot);\n+    subscriptions.subscribeToCommittee(committeeIndex2, firstSlot);\n+    int subnetIndex1 = committeeIndex1 % ATTESTATION_SUBNET_COUNT;\n+    int subnetIndex2 = committeeIndex2 % ATTESTATION_SUBNET_COUNT;\n+    Bitvector bitvector = new Bitvector(ATTESTATION_SUBNET_COUNT);\n+\n+    bitvector.setBit(subnetIndex1);\n+    verify(eth2Network).updateAttestationSubnetENRField(bitvector.serialize());\n+\n+    bitvector.setBit(subnetIndex2);\n+    verify(eth2Network).updateAttestationSubnetENRField(bitvector.serialize());\n+  }\n+\n+  @Test\n+  public void shouldNotUnsubscribeWhenThereAreOtherCommitteeThatMapToSameSubnet() {\n+\n+    final int committeeIndex1 = 4;\n+    final int committeeIndex2 = 4 + ATTESTATION_SUBNET_COUNT;\n+\n+    final UnsignedLong slot1 = UnsignedLong.valueOf(10);\n+    final UnsignedLong slot2 = UnsignedLong.valueOf(13);\n+    subscriptions.subscribeToCommittee(committeeIndex1, slot1);\n+    subscriptions.subscribeToCommittee(committeeIndex2, slot2);\n+\n+    Bitvector bitvector = new Bitvector(ATTESTATION_SUBNET_COUNT);\n+    bitvector.setBit(4);\n+\n+    verify(eth2Network, times(1)).updateAttestationSubnetENRField(bitvector.serialize());\n+\n+    subscriptions.onSlot(slot1.plus(ONE));\n+    verify(eth2Network, times(1)).updateAttestationSubnetENRField(bitvector.serialize());", "originalCommit": "a678e998ea97808c297619b3825f44cb962be224", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIxMzcyMA==", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r409213720", "bodyText": "Yeah. Good catch.", "author": "cemozerr", "createdAt": "2020-04-16T00:39:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTIwODA2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "8c606c948a3017c9ee370b7105e669ca79179cdc", "chunk": "diff --git a/networking/eth2/src/test/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationTopicSubscriptionsTest.java b/networking/eth2/src/test/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationTopicSubscriptionsTest.java\nindex 0c0619912f..6cc503775a 100644\n--- a/networking/eth2/src/test/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationTopicSubscriptionsTest.java\n+++ b/networking/eth2/src/test/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationTopicSubscriptionsTest.java\n\n@@ -92,60 +89,4 @@ class AttestationTopicSubscriptionsTest {\n     subscriptions.onSlot(secondSlot.plus(ONE));\n     verify(eth2Network).unsubscribeFromAttestationCommitteeTopic(committeeIndex);\n   }\n-\n-  @Test\n-  public void shouldSubscribeToSubnet() {\n-    final int committeeIndex = 3;\n-\n-    final UnsignedLong firstSlot = UnsignedLong.valueOf(10);\n-    subscriptions.subscribeToCommittee(committeeIndex, firstSlot);\n-    int subnetIndex = committeeIndex % ATTESTATION_SUBNET_COUNT;\n-    Bitvector bitvector = new Bitvector(ATTESTATION_SUBNET_COUNT);\n-    bitvector.setBit(subnetIndex);\n-\n-    verify(eth2Network).updateAttestationSubnetENRField(bitvector.serialize());\n-  }\n-\n-  @Test\n-  public void shouldSubscribeToMultipleSubnets() {\n-    final int committeeIndex1 = 3;\n-    final int committeeIndex2 = 10;\n-\n-    final UnsignedLong firstSlot = UnsignedLong.valueOf(10);\n-    subscriptions.subscribeToCommittee(committeeIndex1, firstSlot);\n-    subscriptions.subscribeToCommittee(committeeIndex2, firstSlot);\n-    int subnetIndex1 = committeeIndex1 % ATTESTATION_SUBNET_COUNT;\n-    int subnetIndex2 = committeeIndex2 % ATTESTATION_SUBNET_COUNT;\n-    Bitvector bitvector = new Bitvector(ATTESTATION_SUBNET_COUNT);\n-\n-    bitvector.setBit(subnetIndex1);\n-    verify(eth2Network).updateAttestationSubnetENRField(bitvector.serialize());\n-\n-    bitvector.setBit(subnetIndex2);\n-    verify(eth2Network).updateAttestationSubnetENRField(bitvector.serialize());\n-  }\n-\n-  @Test\n-  public void shouldNotUnsubscribeWhenThereAreOtherCommitteeThatMapToSameSubnet() {\n-\n-    final int committeeIndex1 = 4;\n-    final int committeeIndex2 = 4 + ATTESTATION_SUBNET_COUNT;\n-\n-    final UnsignedLong slot1 = UnsignedLong.valueOf(10);\n-    final UnsignedLong slot2 = UnsignedLong.valueOf(13);\n-    subscriptions.subscribeToCommittee(committeeIndex1, slot1);\n-    subscriptions.subscribeToCommittee(committeeIndex2, slot2);\n-\n-    Bitvector bitvector = new Bitvector(ATTESTATION_SUBNET_COUNT);\n-    bitvector.setBit(4);\n-\n-    verify(eth2Network, times(1)).updateAttestationSubnetENRField(bitvector.serialize());\n-\n-    subscriptions.onSlot(slot1.plus(ONE));\n-    verify(eth2Network, times(1)).updateAttestationSubnetENRField(bitvector.serialize());\n-\n-    bitvector.clearBit(4);\n-    subscriptions.onSlot(slot2.plus(ONE));\n-    verify(eth2Network).updateAttestationSubnetENRField(bitvector.serialize());\n-  }\n }\n"}}, {"oid": "8c606c948a3017c9ee370b7105e669ca79179cdc", "url": "https://github.com/ConsenSys/teku/commit/8c606c948a3017c9ee370b7105e669ca79179cdc", "message": "Make ActiveEth2Network know DiscoveryNetwork & remove premature attestation subnet subscription", "committedDate": "2020-04-17T16:39:26Z", "type": "commit"}, {"oid": "ff94cb679c847f3de55afff79c68fb0d44f638c5", "url": "https://github.com/ConsenSys/teku/commit/ff94cb679c847f3de55afff79c68fb0d44f638c5", "message": "Merge branch 'master' into attestationSubnetBitfield", "committedDate": "2020-04-17T16:53:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3MTQ2Ng==", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r410371466", "bodyText": "Why was this line removed?", "author": "mbaxter", "createdAt": "2020-04-17T17:36:57Z", "path": "networking/eth2/src/test/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationTopicSubscriptionsTest.java", "diffHunk": "@@ -82,7 +82,6 @@ public void shouldPreserveLaterSubscriptionPeriodWhenEarlierSlotAdded() {\n     final UnsignedLong secondSlot = UnsignedLong.valueOf(15);\n \n     subscriptions.subscribeToCommittee(committeeIndex, secondSlot);\n-    subscriptions.subscribeToCommittee(committeeIndex, firstSlot);", "originalCommit": "ff94cb679c847f3de55afff79c68fb0d44f638c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUyMjE2Ng==", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r410522166", "bodyText": "My bad. Thanks for the catch.", "author": "cemozerr", "createdAt": "2020-04-18T00:14:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3MTQ2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "69421e27633f8abf881e983c8574339b67bfcc05", "chunk": "diff --git a/networking/eth2/src/test/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationTopicSubscriptionsTest.java b/networking/eth2/src/test/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationTopicSubscriptionsTest.java\nindex 6cc503775a..071fa71195 100644\n--- a/networking/eth2/src/test/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationTopicSubscriptionsTest.java\n+++ b/networking/eth2/src/test/java/tech/pegasys/artemis/networking/eth2/gossip/AttestationTopicSubscriptionsTest.java\n\n@@ -82,6 +82,7 @@ class AttestationTopicSubscriptionsTest {\n     final UnsignedLong secondSlot = UnsignedLong.valueOf(15);\n \n     subscriptions.subscribeToCommittee(committeeIndex, secondSlot);\n+    subscriptions.subscribeToCommittee(committeeIndex, firstSlot);\n \n     subscriptions.onSlot(firstSlot.plus(ONE));\n     verify(eth2Network, never()).unsubscribeFromAttestationCommitteeTopic(committeeIndex);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3NTI3MQ==", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r410375271", "bodyText": "Instead of adding a check here, you could just accept a Set of indices:\npublic Bitvector(Set<Integer> indicesToSet, int size) {", "author": "mbaxter", "createdAt": "2020-04-17T17:44:27Z", "path": "ssz/src/main/java/tech/pegasys/artemis/ssz/SSZTypes/Bitvector.java", "diffHunk": "@@ -40,6 +42,26 @@ public Bitvector(Bitvector bitvector) {\n     this.size = bitvector.size;\n   }\n \n+  public Bitvector(List<Integer> indicesToSet, int size) {\n+    this.size = size;\n+    this.data = new BitSet(size);\n+    if (indicesToSet.size() == 0) {\n+      return;\n+    }\n+    checkArgument(\n+        indicesToSet.stream().distinct().count() != indicesToSet.size(),\n+        \"Bitvector: Bit indices to set are not distinct\");", "originalCommit": "ff94cb679c847f3de55afff79c68fb0d44f638c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUwMDQ5NQ==", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r410500495", "bodyText": "That's quite an expensive check to add as well and I'm not sure it actually matters.  It's like creating a Set from a List - duplicates should just be ignored.", "author": "ajsutton", "createdAt": "2020-04-17T22:33:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3NTI3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "69421e27633f8abf881e983c8574339b67bfcc05", "chunk": "diff --git a/ssz/src/main/java/tech/pegasys/artemis/ssz/SSZTypes/Bitvector.java b/ssz/src/main/java/tech/pegasys/artemis/ssz/SSZTypes/Bitvector.java\nindex abc9b68b5d..b328bbe1df 100644\n--- a/ssz/src/main/java/tech/pegasys/artemis/ssz/SSZTypes/Bitvector.java\n+++ b/ssz/src/main/java/tech/pegasys/artemis/ssz/SSZTypes/Bitvector.java\n\n@@ -42,23 +40,10 @@ public class Bitvector {\n     this.size = bitvector.size;\n   }\n \n-  public Bitvector(List<Integer> indicesToSet, int size) {\n-    this.size = size;\n-    this.data = new BitSet(size);\n-    if (indicesToSet.size() == 0) {\n-      return;\n-    }\n-    checkArgument(\n-        indicesToSet.stream().distinct().count() != indicesToSet.size(),\n-        \"Bitvector: Bit indices to set are not distinct\");\n-    checkArgument(\n-        indicesToSet.stream().min(Integer::compareTo).get() > -1,\n-        \"Bitvector: Bit index less than 0\");\n-    checkArgument(\n-        indicesToSet.stream().max(Integer::compareTo).get() > size,\n-        \"Bitvector: Bit index greater than vector size\");\n+  public Bitvector(Iterable<Integer> indicesToSet, int size) {\n+    this(size);\n     for (int i : indicesToSet) {\n-      data.set(i);\n+      setBit(i);\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3NTQ2Ng==", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r410375466", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    indicesToSet.stream().max(Integer::compareTo).get() > size,\n          \n          \n            \n                    indicesToSet.stream().max(Integer::compareTo).get() >= size,", "author": "mbaxter", "createdAt": "2020-04-17T17:44:49Z", "path": "ssz/src/main/java/tech/pegasys/artemis/ssz/SSZTypes/Bitvector.java", "diffHunk": "@@ -40,6 +42,26 @@ public Bitvector(Bitvector bitvector) {\n     this.size = bitvector.size;\n   }\n \n+  public Bitvector(List<Integer> indicesToSet, int size) {\n+    this.size = size;\n+    this.data = new BitSet(size);\n+    if (indicesToSet.size() == 0) {\n+      return;\n+    }\n+    checkArgument(\n+        indicesToSet.stream().distinct().count() != indicesToSet.size(),\n+        \"Bitvector: Bit indices to set are not distinct\");\n+    checkArgument(\n+        indicesToSet.stream().min(Integer::compareTo).get() > -1,\n+        \"Bitvector: Bit index less than 0\");\n+    checkArgument(\n+        indicesToSet.stream().max(Integer::compareTo).get() > size,", "originalCommit": "ff94cb679c847f3de55afff79c68fb0d44f638c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUwMzAwMA==", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r410503000", "bodyText": "This check is requiring us to iterate through the List a second time.  I'd suggest the constructor would just be:\npublic Bitvector(Iterable<Integer> indicesToSet, int size) {\n  this(size);\n  for (int i : indicesToSet) {\n    setBit(i);\n  }\n}\n\nThe element index is then check as part of setting each bit so we only iterate once and any checks added in the future are automatically applied.  It basically just becomes syntactic sugar to make converting a list of ints to a Bitvector easy but does exactly the same thing as if you'd use the public APIs yourself.", "author": "ajsutton", "createdAt": "2020-04-17T22:42:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3NTQ2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUyMjQ4Nw==", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r410522487", "bodyText": "Makes a lot of sense. Done.", "author": "cemozerr", "createdAt": "2020-04-18T00:17:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM3NTQ2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "69421e27633f8abf881e983c8574339b67bfcc05", "chunk": "diff --git a/ssz/src/main/java/tech/pegasys/artemis/ssz/SSZTypes/Bitvector.java b/ssz/src/main/java/tech/pegasys/artemis/ssz/SSZTypes/Bitvector.java\nindex abc9b68b5d..b328bbe1df 100644\n--- a/ssz/src/main/java/tech/pegasys/artemis/ssz/SSZTypes/Bitvector.java\n+++ b/ssz/src/main/java/tech/pegasys/artemis/ssz/SSZTypes/Bitvector.java\n\n@@ -42,23 +40,10 @@ public class Bitvector {\n     this.size = bitvector.size;\n   }\n \n-  public Bitvector(List<Integer> indicesToSet, int size) {\n-    this.size = size;\n-    this.data = new BitSet(size);\n-    if (indicesToSet.size() == 0) {\n-      return;\n-    }\n-    checkArgument(\n-        indicesToSet.stream().distinct().count() != indicesToSet.size(),\n-        \"Bitvector: Bit indices to set are not distinct\");\n-    checkArgument(\n-        indicesToSet.stream().min(Integer::compareTo).get() > -1,\n-        \"Bitvector: Bit index less than 0\");\n-    checkArgument(\n-        indicesToSet.stream().max(Integer::compareTo).get() > size,\n-        \"Bitvector: Bit index greater than vector size\");\n+  public Bitvector(Iterable<Integer> indicesToSet, int size) {\n+    this(size);\n     for (int i : indicesToSet) {\n-      data.set(i);\n+      setBit(i);\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM4MDA4Nw==", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r410380087", "bodyText": "What about:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void setLongTermAttestationSubnetSubscriptions(List<Integer> subnetIds) {\n          \n          \n            \n              public void advertiseLongTermAttestationSubnetSubscriptions(final Set<Integer> subnetIds) {\n          \n      \n    \n    \n  \n\nSince the discovery network's role is limited to advertisements.", "author": "mbaxter", "createdAt": "2020-04-17T17:53:26Z", "path": "networking/p2p/src/main/java/tech/pegasys/artemis/networking/p2p/DiscoveryNetwork.java", "diffHunk": "@@ -119,6 +124,12 @@ public void addStaticPeer(final String peerAddress) {\n     return discoveryService.getEnr();\n   }\n \n+  public void setLongTermAttestationSubnetSubscriptions(List<Integer> subnetIds) {", "originalCommit": "ff94cb679c847f3de55afff79c68fb0d44f638c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUwNDA1NA==", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r410504054", "bodyText": "Following on from Meredith's suggestion to use a Set in the Bitvector constructor, we should probably use a Collection here to allow callers to choose either a List or Set.  The order doesn't matter to us so being flexible is quite useful.\nAnd when we add the piece to call this building up the indices as a Set would make a lot of sense.", "author": "ajsutton", "createdAt": "2020-04-17T22:46:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM4MDA4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUyMzA1Nw==", "url": "https://github.com/ConsenSys/teku/pull/1596#discussion_r410523057", "bodyText": "Makes sense.", "author": "cemozerr", "createdAt": "2020-04-18T00:20:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDM4MDA4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "69421e27633f8abf881e983c8574339b67bfcc05", "chunk": "diff --git a/networking/p2p/src/main/java/tech/pegasys/artemis/networking/p2p/DiscoveryNetwork.java b/networking/p2p/src/main/java/tech/pegasys/artemis/networking/p2p/DiscoveryNetwork.java\nindex 077068f2ba..27f1dbb100 100644\n--- a/networking/p2p/src/main/java/tech/pegasys/artemis/networking/p2p/DiscoveryNetwork.java\n+++ b/networking/p2p/src/main/java/tech/pegasys/artemis/networking/p2p/DiscoveryNetwork.java\n\n@@ -124,7 +123,7 @@ public class DiscoveryNetwork<P extends Peer> extends DelegatingP2PNetwork<P> {\n     return discoveryService.getEnr();\n   }\n \n-  public void setLongTermAttestationSubnetSubscriptions(List<Integer> subnetIds) {\n+  public void setLongTermAttestationSubnetSubscriptions(Iterable<Integer> subnetIds) {\n     discoveryService.updateCustomENRField(\n         ATTESTATION_SUBNET_ENR_FIELD,\n         new Bitvector(subnetIds, ATTESTATION_SUBNET_COUNT).serialize());\n"}}, {"oid": "69421e27633f8abf881e983c8574339b67bfcc05", "url": "https://github.com/ConsenSys/teku/commit/69421e27633f8abf881e983c8574339b67bfcc05", "message": "Simplify Bitvector constructor & switch interface method argument", "committedDate": "2020-04-18T00:28:15Z", "type": "commit"}, {"oid": "393122fb61586fd3047c8492da975e390976cb61", "url": "https://github.com/ConsenSys/teku/commit/393122fb61586fd3047c8492da975e390976cb61", "message": "Merge branch 'master' into attestationSubnetBitfield", "committedDate": "2020-04-18T00:28:58Z", "type": "commit"}]}