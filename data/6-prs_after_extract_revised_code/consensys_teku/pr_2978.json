{"pr_number": 2978, "pr_title": "Rename GenesisTimeProvider to GenesisDataProvider and add genesis validators root", "pr_createdAt": "2020-10-15T03:23:45Z", "pr_url": "https://github.com/ConsenSys/teku/pull/2978", "timeline": [{"oid": "144ad0df72b9cdbf8900bdc5fd776c52212c6ed5", "url": "https://github.com/ConsenSys/teku/commit/144ad0df72b9cdbf8900bdc5fd776c52212c6ed5", "message": "Update validator client to call the standard Rest api to get fork.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-10-15T03:23:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE0MjE1Nw==", "url": "https://github.com/ConsenSys/teku/pull/2978#discussion_r505142157", "bodyText": "Could this continue using genesisDataProvider.getGenesisTime()?", "author": "ajsutton", "createdAt": "2020-10-15T03:25:34Z", "path": "validator/beaconnode/src/main/java/tech/pegasys/teku/validator/beaconnode/TimeBasedEventAdapter.java", "diffHunk": "@@ -87,7 +88,7 @@ private boolean isTooLate(final UInt64 scheduledTime, final UInt64 actualTime) {\n   public SafeFuture<Void> start() {\n     // Don't wait for the genesis time to be available before considering startup complete\n     // The beacon node may not be available or genesis may not yet be known.\n-    genesisTimeProvider.getGenesisTime().thenAccept(this::start).reportExceptions();\n+    genesisDataProvider.getGenesisData().thenAccept(this::start).reportExceptions();", "originalCommit": "144ad0df72b9cdbf8900bdc5fd776c52212c6ed5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE0NzEzOQ==", "url": "https://github.com/ConsenSys/teku/pull/2978#discussion_r505147139", "bodyText": "yep it got caught in a rename", "author": "rolfyone", "createdAt": "2020-10-15T03:45:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE0MjE1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "f45120523918585c9b957d520f8e250f1b86b688", "chunk": "diff --git a/validator/beaconnode/src/main/java/tech/pegasys/teku/validator/beaconnode/TimeBasedEventAdapter.java b/validator/beaconnode/src/main/java/tech/pegasys/teku/validator/beaconnode/TimeBasedEventAdapter.java\nindex 79432bc1b2..5abe6373c0 100644\n--- a/validator/beaconnode/src/main/java/tech/pegasys/teku/validator/beaconnode/TimeBasedEventAdapter.java\n+++ b/validator/beaconnode/src/main/java/tech/pegasys/teku/validator/beaconnode/TimeBasedEventAdapter.java\n\n@@ -88,7 +87,7 @@ public class TimeBasedEventAdapter implements BeaconChainEventAdapter {\n   public SafeFuture<Void> start() {\n     // Don't wait for the genesis time to be available before considering startup complete\n     // The beacon node may not be available or genesis may not yet be known.\n-    genesisDataProvider.getGenesisData().thenAccept(this::start).reportExceptions();\n+    genesisDataProvider.getGenesisTime().thenAccept(this::start).reportExceptions();\n     return SafeFuture.COMPLETE;\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE0MjQ5Ng==", "url": "https://github.com/ConsenSys/teku/pull/2978#discussion_r505142496", "bodyText": "This case is the same as shouldRetryWhenGenesisTimeIsNotYetKnown", "author": "ajsutton", "createdAt": "2020-10-15T03:26:59Z", "path": "validator/beaconnode/src/test/java/tech/pegasys/teku/validator/beaconnode/GenesisDataProviderTest.java", "diffHunk": "@@ -23,79 +23,107 @@\n import static tech.pegasys.teku.infrastructure.async.SafeFuture.failedFuture;\n \n import java.util.Optional;\n+import org.apache.tuweni.bytes.Bytes32;\n import org.assertj.core.api.Assertions;\n import org.junit.jupiter.api.Test;\n+import tech.pegasys.teku.datastructures.genesis.GenesisData;\n import tech.pegasys.teku.infrastructure.async.SafeFuture;\n import tech.pegasys.teku.infrastructure.async.StubAsyncRunner;\n import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n import tech.pegasys.teku.validator.api.ValidatorApiChannel;\n \n-class GenesisTimeProviderTest {\n+class GenesisDataProviderTest {\n \n   private static final UInt64 GENESIS_TIME = UInt64.valueOf(12341234);\n+  private static final Bytes32 GENESIS_VALIDATORS_ROOT = Bytes32.fromHexString(\"0x01\");\n   private final StubAsyncRunner asyncRunner = new StubAsyncRunner();\n   private final ValidatorApiChannel validatorApiChannel = mock(ValidatorApiChannel.class);\n \n-  private final GenesisTimeProvider genesisTimeProvider =\n-      new GenesisTimeProvider(asyncRunner, validatorApiChannel);\n+  private final GenesisDataProvider genesisDataProvider =\n+      new GenesisDataProvider(asyncRunner, validatorApiChannel);\n \n   @Test\n   void shouldRequestGenesisTimeWhenNotPreviouslyLoaded() {\n-    final SafeFuture<Optional<UInt64>> request = new SafeFuture<>();\n-    when(validatorApiChannel.getGenesisTime()).thenReturn(request);\n+    final SafeFuture<Optional<GenesisData>> request = new SafeFuture<>();\n+    when(validatorApiChannel.getGenesisData()).thenReturn(request);\n \n-    final SafeFuture<UInt64> result = genesisTimeProvider.getGenesisTime();\n+    final SafeFuture<UInt64> result = genesisDataProvider.getGenesisTime();\n     assertThat(result).isNotDone();\n \n-    request.complete(Optional.of(GENESIS_TIME));\n+    request.complete(Optional.of(new GenesisData(GENESIS_TIME, GENESIS_VALIDATORS_ROOT)));\n     assertThat(result).isCompletedWithValue(GENESIS_TIME);\n   }\n \n   @Test\n   void shouldReturnCachedGenesisTimeWhenPreviouslyLoaded() {\n-    when(validatorApiChannel.getGenesisTime())\n-        .thenReturn(SafeFuture.completedFuture(Optional.of(GENESIS_TIME)));\n-    assertThat(genesisTimeProvider.getGenesisTime()).isCompletedWithValue(GENESIS_TIME);\n-    verify(validatorApiChannel).getGenesisTime();\n+    when(validatorApiChannel.getGenesisData())\n+        .thenReturn(\n+            SafeFuture.completedFuture(\n+                Optional.of(new GenesisData(GENESIS_TIME, GENESIS_VALIDATORS_ROOT))));\n+    assertThat(genesisDataProvider.getGenesisData())\n+        .isCompletedWithValue(new GenesisData(GENESIS_TIME, GENESIS_VALIDATORS_ROOT));\n+    verify(validatorApiChannel).getGenesisData();\n \n     // Subsequent requests just return the cached version\n-    assertThat(genesisTimeProvider.getGenesisTime()).isCompletedWithValue(GENESIS_TIME);\n+    assertThat(genesisDataProvider.getGenesisData())\n+        .isCompletedWithValue(new GenesisData(GENESIS_TIME, GENESIS_VALIDATORS_ROOT));\n     verifyNoMoreInteractions(validatorApiChannel);\n   }\n \n   @Test\n   void shouldRetryWhenGenesisTimeFailsToLoad() {\n-    when(validatorApiChannel.getGenesisTime())\n+    when(validatorApiChannel.getGenesisData())\n         .thenReturn(failedFuture(new RuntimeException(\"Nope\")))\n-        .thenReturn(completedFuture(Optional.of(GENESIS_TIME)));\n+        .thenReturn(\n+            completedFuture(Optional.of(new GenesisData(GENESIS_TIME, GENESIS_VALIDATORS_ROOT))));\n \n     // First request fails\n-    final SafeFuture<UInt64> result = genesisTimeProvider.getGenesisTime();\n-    verify(validatorApiChannel).getGenesisTime();\n+    final SafeFuture<UInt64> result = genesisDataProvider.getGenesisTime();\n+    verify(validatorApiChannel).getGenesisData();\n     assertThat(result).isNotDone();\n     Assertions.assertThat(asyncRunner.hasDelayedActions()).isTrue();\n \n     // Retry is scheduled.\n     asyncRunner.executeQueuedActions();\n-    verify(validatorApiChannel, times(2)).getGenesisTime();\n+    verify(validatorApiChannel, times(2)).getGenesisData();\n     assertThat(result).isCompletedWithValue(GENESIS_TIME);\n   }\n \n   @Test\n   void shouldRetryWhenGenesisTimeIsNotYetKnown() {\n-    when(validatorApiChannel.getGenesisTime())\n+    when(validatorApiChannel.getGenesisData())\n         .thenReturn(completedFuture(Optional.empty()))\n-        .thenReturn(completedFuture(Optional.of(GENESIS_TIME)));\n+        .thenReturn(\n+            completedFuture(Optional.of(new GenesisData(GENESIS_TIME, GENESIS_VALIDATORS_ROOT))));\n \n     // First request fails\n-    final SafeFuture<UInt64> result = genesisTimeProvider.getGenesisTime();\n-    verify(validatorApiChannel).getGenesisTime();\n+    final SafeFuture<UInt64> result = genesisDataProvider.getGenesisTime();\n+    verify(validatorApiChannel).getGenesisData();\n     assertThat(result).isNotDone();\n     Assertions.assertThat(asyncRunner.hasDelayedActions()).isTrue();\n \n     // Retry is scheduled.\n     asyncRunner.executeQueuedActions();\n-    verify(validatorApiChannel, times(2)).getGenesisTime();\n+    verify(validatorApiChannel, times(2)).getGenesisData();\n     assertThat(result).isCompletedWithValue(GENESIS_TIME);\n   }\n+\n+  @Test\n+  void shouldRetryWhenGenesisValidatorsRootIsNotYetKnown() {", "originalCommit": "144ad0df72b9cdbf8900bdc5fd776c52212c6ed5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE0NzI1OQ==", "url": "https://github.com/ConsenSys/teku/pull/2978#discussion_r505147259", "bodyText": "yep that's what i copied, i wanted to show that validatorsRoot would work, i'll think of something trivial", "author": "rolfyone", "createdAt": "2020-10-15T03:46:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE0MjQ5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE0ODE4OA==", "url": "https://github.com/ConsenSys/teku/pull/2978#discussion_r505148188", "bodyText": "But both are just testing getGenesisData.  I don't think we need to individually check that the shortcut getGenesisTime and getGenesisValidatorRoot methods work - they are a trivial map from getGenesisData.", "author": "ajsutton", "createdAt": "2020-10-15T03:50:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE0MjQ5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "f45120523918585c9b957d520f8e250f1b86b688", "chunk": "diff --git a/validator/beaconnode/src/test/java/tech/pegasys/teku/validator/beaconnode/GenesisDataProviderTest.java b/validator/beaconnode/src/test/java/tech/pegasys/teku/validator/beaconnode/GenesisDataProviderTest.java\nindex e9852a217f..103431468c 100644\n--- a/validator/beaconnode/src/test/java/tech/pegasys/teku/validator/beaconnode/GenesisDataProviderTest.java\n+++ b/validator/beaconnode/src/test/java/tech/pegasys/teku/validator/beaconnode/GenesisDataProviderTest.java\n\n@@ -107,23 +107,4 @@ class GenesisDataProviderTest {\n     verify(validatorApiChannel, times(2)).getGenesisData();\n     assertThat(result).isCompletedWithValue(GENESIS_TIME);\n   }\n-\n-  @Test\n-  void shouldRetryWhenGenesisValidatorsRootIsNotYetKnown() {\n-    when(validatorApiChannel.getGenesisData())\n-        .thenReturn(completedFuture(Optional.empty()))\n-        .thenReturn(\n-            completedFuture(Optional.of(new GenesisData(GENESIS_TIME, GENESIS_VALIDATORS_ROOT))));\n-\n-    // First request fails\n-    final SafeFuture<Bytes32> result = genesisDataProvider.getGenesisValidatorsRoot();\n-    verify(validatorApiChannel).getGenesisData();\n-    assertThat(result).isNotDone();\n-    Assertions.assertThat(asyncRunner.hasDelayedActions()).isTrue();\n-\n-    // Retry is scheduled.\n-    asyncRunner.executeQueuedActions();\n-    verify(validatorApiChannel, times(2)).getGenesisData();\n-    assertThat(result).isCompletedWithValue(GENESIS_VALIDATORS_ROOT);\n-  }\n }\n"}}, {"oid": "f45120523918585c9b957d520f8e250f1b86b688", "url": "https://github.com/ConsenSys/teku/commit/f45120523918585c9b957d520f8e250f1b86b688", "message": "changes from review feedback.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-10-15T03:53:03Z", "type": "commit"}, {"oid": "fd607f96db77e56f6e4616ec87157e5898a1c598", "url": "https://github.com/ConsenSys/teku/commit/fd607f96db77e56f6e4616ec87157e5898a1c598", "message": "Merge remote-tracking branch 'upstream/master' into validator-get-fork", "committedDate": "2020-10-15T03:55:39Z", "type": "commit"}, {"oid": "0afdd5bf9f3201ac134c587df7f30f05aaab376e", "url": "https://github.com/ConsenSys/teku/commit/0afdd5bf9f3201ac134c587df7f30f05aaab376e", "message": "changes from review feedback.\n\nSigned-off-by: Paul Harris <paul.harris@consensys.net>", "committedDate": "2020-10-15T04:12:14Z", "type": "commit"}]}