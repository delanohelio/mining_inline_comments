{"pr_number": 2946, "pr_title": "Implement state/validators endpoint", "pr_createdAt": "2020-10-12T01:55:51Z", "pr_url": "https://github.com/ConsenSys/teku/pull/2946", "timeline": [{"oid": "dd25c1011bf780554e3a09dd8fd97ec0b0b57b5c", "url": "https://github.com/ConsenSys/teku/commit/dd25c1011bf780554e3a09dd8fd97ec0b0b57b5c", "message": "Implement state/validators endpoint.", "committedDate": "2020-10-12T01:54:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzAyMTAxMQ==", "url": "https://github.com/ConsenSys/teku/pull/2946#discussion_r503021011", "bodyText": "you'll need to set the result here too, like below, BadMessage.serviceUnavailable was just added, should make that trivial", "author": "rolfyone", "createdAt": "2020-10-12T03:31:32Z", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetStateValidators.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_SERVICE_UNAVAILABLE;\n+import static tech.pegasys.teku.beaconrestapi.CacheControlUtils.getMaxAgeForSlot;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.PARAM_STATE_ID;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.PARAM_STATE_ID_DESCRIPTION;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.PARAM_VALIDATOR_DESCRIPTION;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.PARAM_VALIDATOR_ID;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_SERVICE_UNAVAILABLE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.SERVICE_UNAVAILABLE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_V1_BEACON;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_VALIDATOR_REQUIRED;\n+\n+import io.javalin.core.util.Header;\n+import io.javalin.http.Context;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jetbrains.annotations.NotNull;\n+import tech.pegasys.teku.api.ChainDataProvider;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.response.v1.beacon.GetStateValidatorsResponse;\n+import tech.pegasys.teku.beaconrestapi.ListQueryParameterUtils;\n+import tech.pegasys.teku.beaconrestapi.handlers.AbstractHandler;\n+import tech.pegasys.teku.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+import tech.pegasys.teku.storage.client.ChainDataUnavailableException;\n+\n+public class GetStateValidators extends AbstractHandler {\n+  private static final Logger LOG = LogManager.getLogger();\n+  public static final String ROUTE = \"/eth/v1/beacon/states/:state_id/validators\";\n+\n+  private final ChainDataProvider provider;\n+\n+  public GetStateValidators(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    this(dataProvider.getChainDataProvider(), jsonProvider);\n+  }\n+\n+  GetStateValidators(final ChainDataProvider provider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.provider = provider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get validators from state\",\n+      tags = {TAG_V1_BEACON, TAG_VALIDATOR_REQUIRED},\n+      description = \"Returns filterable list of validators with their balance, status and index.\",\n+      pathParams = {\n+        @OpenApiParam(name = PARAM_STATE_ID, description = PARAM_STATE_ID_DESCRIPTION),\n+      },\n+      queryParams = {\n+        @OpenApiParam(\n+            name = PARAM_VALIDATOR_ID,\n+            description = PARAM_VALIDATOR_DESCRIPTION,\n+            isRepeatable = true)\n+      },\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            content = @OpenApiContent(from = GetStateValidatorsResponse.class)),\n+        @OpenApiResponse(status = RES_BAD_REQUEST),\n+        @OpenApiResponse(status = RES_INTERNAL_ERROR),\n+        @OpenApiResponse(status = RES_SERVICE_UNAVAILABLE, description = SERVICE_UNAVAILABLE)\n+      })\n+  @Override\n+  public void handle(@NotNull final Context ctx) throws Exception {\n+    try {\n+      final UInt64 slot = parseSlotParam(ctx);\n+\n+      final List<Integer> validatorIndices = parseValidatorsParam(ctx);\n+\n+      SafeFuture<Optional<GetStateValidatorsResponse>> future =\n+          provider\n+              .getValidatorsDetails(slot, validatorIndices)\n+              .thenApply(result -> result.map(GetStateValidatorsResponse::new));\n+\n+      ctx.header(Header.CACHE_CONTROL, getMaxAgeForSlot(provider, slot));\n+      if (provider.isFinalized(slot)) {\n+        handlePossiblyGoneResult(ctx, future);\n+      } else {\n+        handlePossiblyMissingResult(ctx, future);\n+      }\n+    } catch (ChainDataUnavailableException ex) {\n+      LOG.trace(ex);\n+      ctx.status(SC_SERVICE_UNAVAILABLE);", "originalCommit": "dd25c1011bf780554e3a09dd8fd97ec0b0b57b5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzAyNDIzMg==", "url": "https://github.com/ConsenSys/teku/pull/2946#discussion_r503024232", "bodyText": "Done. Also updated the single validator version that I based this off.", "author": "ajsutton", "createdAt": "2020-10-12T03:47:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzAyMTAxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "6a3577b1962d466e75bd404d996991f0d0a5afe7", "chunk": "diff --git a/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetStateValidators.java b/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetStateValidators.java\nindex 7629fed48..42b4b8ced 100644\n--- a/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetStateValidators.java\n+++ b/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetStateValidators.java\n\n@@ -111,10 +111,11 @@ public class GetStateValidators extends AbstractHandler {\n     } catch (ChainDataUnavailableException ex) {\n       LOG.trace(ex);\n       ctx.status(SC_SERVICE_UNAVAILABLE);\n+      ctx.result(BadRequest.serviceUnavailable(jsonProvider));\n     } catch (IllegalArgumentException ex) {\n       LOG.trace(ex);\n       ctx.status(SC_BAD_REQUEST);\n-      ctx.result(jsonProvider.objectToJSON(new BadRequest(ex.getMessage())));\n+      ctx.result(BadRequest.badRequest(jsonProvider, ex.getMessage()));\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzAyMTM4OA==", "url": "https://github.com/ConsenSys/teku/pull/2946#discussion_r503021388", "bodyText": "nit: may not have existed when you wrote this, but now a BadRequest.badRequest(jsonProvider, ex.getMessage()) if you want to be consistent with the other comment", "author": "rolfyone", "createdAt": "2020-10-12T03:33:15Z", "path": "data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetStateValidators.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package tech.pegasys.teku.beaconrestapi.handlers.v1.beacon;\n+\n+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;\n+import static javax.servlet.http.HttpServletResponse.SC_SERVICE_UNAVAILABLE;\n+import static tech.pegasys.teku.beaconrestapi.CacheControlUtils.getMaxAgeForSlot;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.PARAM_STATE_ID;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.PARAM_STATE_ID_DESCRIPTION;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.PARAM_VALIDATOR_DESCRIPTION;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.PARAM_VALIDATOR_ID;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_BAD_REQUEST;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_INTERNAL_ERROR;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_OK;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.RES_SERVICE_UNAVAILABLE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.SERVICE_UNAVAILABLE;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_V1_BEACON;\n+import static tech.pegasys.teku.beaconrestapi.RestApiConstants.TAG_VALIDATOR_REQUIRED;\n+\n+import io.javalin.core.util.Header;\n+import io.javalin.http.Context;\n+import io.javalin.plugin.openapi.annotations.HttpMethod;\n+import io.javalin.plugin.openapi.annotations.OpenApi;\n+import io.javalin.plugin.openapi.annotations.OpenApiContent;\n+import io.javalin.plugin.openapi.annotations.OpenApiParam;\n+import io.javalin.plugin.openapi.annotations.OpenApiResponse;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.jetbrains.annotations.NotNull;\n+import tech.pegasys.teku.api.ChainDataProvider;\n+import tech.pegasys.teku.api.DataProvider;\n+import tech.pegasys.teku.api.response.v1.beacon.GetStateValidatorsResponse;\n+import tech.pegasys.teku.beaconrestapi.ListQueryParameterUtils;\n+import tech.pegasys.teku.beaconrestapi.handlers.AbstractHandler;\n+import tech.pegasys.teku.beaconrestapi.schema.BadRequest;\n+import tech.pegasys.teku.infrastructure.async.SafeFuture;\n+import tech.pegasys.teku.infrastructure.unsigned.UInt64;\n+import tech.pegasys.teku.provider.JsonProvider;\n+import tech.pegasys.teku.storage.client.ChainDataUnavailableException;\n+\n+public class GetStateValidators extends AbstractHandler {\n+  private static final Logger LOG = LogManager.getLogger();\n+  public static final String ROUTE = \"/eth/v1/beacon/states/:state_id/validators\";\n+\n+  private final ChainDataProvider provider;\n+\n+  public GetStateValidators(final DataProvider dataProvider, final JsonProvider jsonProvider) {\n+    this(dataProvider.getChainDataProvider(), jsonProvider);\n+  }\n+\n+  GetStateValidators(final ChainDataProvider provider, final JsonProvider jsonProvider) {\n+    super(jsonProvider);\n+    this.provider = provider;\n+  }\n+\n+  @OpenApi(\n+      path = ROUTE,\n+      method = HttpMethod.GET,\n+      summary = \"Get validators from state\",\n+      tags = {TAG_V1_BEACON, TAG_VALIDATOR_REQUIRED},\n+      description = \"Returns filterable list of validators with their balance, status and index.\",\n+      pathParams = {\n+        @OpenApiParam(name = PARAM_STATE_ID, description = PARAM_STATE_ID_DESCRIPTION),\n+      },\n+      queryParams = {\n+        @OpenApiParam(\n+            name = PARAM_VALIDATOR_ID,\n+            description = PARAM_VALIDATOR_DESCRIPTION,\n+            isRepeatable = true)\n+      },\n+      responses = {\n+        @OpenApiResponse(\n+            status = RES_OK,\n+            content = @OpenApiContent(from = GetStateValidatorsResponse.class)),\n+        @OpenApiResponse(status = RES_BAD_REQUEST),\n+        @OpenApiResponse(status = RES_INTERNAL_ERROR),\n+        @OpenApiResponse(status = RES_SERVICE_UNAVAILABLE, description = SERVICE_UNAVAILABLE)\n+      })\n+  @Override\n+  public void handle(@NotNull final Context ctx) throws Exception {\n+    try {\n+      final UInt64 slot = parseSlotParam(ctx);\n+\n+      final List<Integer> validatorIndices = parseValidatorsParam(ctx);\n+\n+      SafeFuture<Optional<GetStateValidatorsResponse>> future =\n+          provider\n+              .getValidatorsDetails(slot, validatorIndices)\n+              .thenApply(result -> result.map(GetStateValidatorsResponse::new));\n+\n+      ctx.header(Header.CACHE_CONTROL, getMaxAgeForSlot(provider, slot));\n+      if (provider.isFinalized(slot)) {\n+        handlePossiblyGoneResult(ctx, future);\n+      } else {\n+        handlePossiblyMissingResult(ctx, future);\n+      }\n+    } catch (ChainDataUnavailableException ex) {\n+      LOG.trace(ex);\n+      ctx.status(SC_SERVICE_UNAVAILABLE);\n+    } catch (IllegalArgumentException ex) {\n+      LOG.trace(ex);\n+      ctx.status(SC_BAD_REQUEST);\n+      ctx.result(jsonProvider.objectToJSON(new BadRequest(ex.getMessage())));", "originalCommit": "dd25c1011bf780554e3a09dd8fd97ec0b0b57b5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzAyNDI0NQ==", "url": "https://github.com/ConsenSys/teku/pull/2946#discussion_r503024245", "bodyText": "Done. Also updated the single validator version that I based this off.", "author": "ajsutton", "createdAt": "2020-10-12T03:47:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzAyMTM4OA=="}], "type": "inlineReview", "revised_code": {"commit": "6a3577b1962d466e75bd404d996991f0d0a5afe7", "chunk": "diff --git a/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetStateValidators.java b/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetStateValidators.java\nindex 7629fed48..42b4b8ced 100644\n--- a/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetStateValidators.java\n+++ b/data/beaconrestapi/src/main/java/tech/pegasys/teku/beaconrestapi/handlers/v1/beacon/GetStateValidators.java\n\n@@ -111,10 +111,11 @@ public class GetStateValidators extends AbstractHandler {\n     } catch (ChainDataUnavailableException ex) {\n       LOG.trace(ex);\n       ctx.status(SC_SERVICE_UNAVAILABLE);\n+      ctx.result(BadRequest.serviceUnavailable(jsonProvider));\n     } catch (IllegalArgumentException ex) {\n       LOG.trace(ex);\n       ctx.status(SC_BAD_REQUEST);\n-      ctx.result(jsonProvider.objectToJSON(new BadRequest(ex.getMessage())));\n+      ctx.result(BadRequest.badRequest(jsonProvider, ex.getMessage()));\n     }\n   }\n \n"}}, {"oid": "6a3577b1962d466e75bd404d996991f0d0a5afe7", "url": "https://github.com/ConsenSys/teku/commit/6a3577b1962d466e75bd404d996991f0d0a5afe7", "message": "Add bad request error responses.", "committedDate": "2020-10-12T03:47:20Z", "type": "commit"}, {"oid": "b5b861a9569a628567d9a6f892a66916ff6a0a3b", "url": "https://github.com/ConsenSys/teku/commit/b5b861a9569a628567d9a6f892a66916ff6a0a3b", "message": "Merge branch 'master' of github.com:PegaSysEng/teku into get-state-validators", "committedDate": "2020-10-12T03:47:27Z", "type": "commit"}]}