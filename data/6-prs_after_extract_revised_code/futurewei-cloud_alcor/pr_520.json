{"pr_number": 520, "pr_title": "Private IP Manager to Support IP Address Replacement", "pr_createdAt": "2020-12-18T06:38:54Z", "pr_url": "https://github.com/futurewei-cloud/alcor/pull/520", "timeline": [{"oid": "134441da3c6f0260b372de46a6bef1f16b28ab5e", "url": "https://github.com/futurewei-cloud/alcor/commit/134441da3c6f0260b372de46a6bef1f16b28ab5e", "message": "Merge pull request #1 from futurewei-cloud/master\n\nmerge", "committedDate": "2020-12-08T11:12:30Z", "type": "commit"}, {"oid": "a97ec5cc735063fa7c94f0f9d755d8f6a6e94bfc", "url": "https://github.com/futurewei-cloud/alcor/commit/a97ec5cc735063fa7c94f0f9d755d8f6a6e94bfc", "message": "Merge remote-tracking branch 'upstream/master'", "committedDate": "2020-12-15T10:43:01Z", "type": "commit"}, {"oid": "cc9781c19680265600ee5d60f86202a14a6b98bf", "url": "https://github.com/futurewei-cloud/alcor/commit/cc9781c19680265600ee5d60f86202a14a6b98bf", "message": "[New API Request] Private IP Manager to support IP address replacement #218", "committedDate": "2020-12-16T08:13:12Z", "type": "commit"}, {"oid": "ae97d93ab24c82d9878197b6a966ebeb1caeae98", "url": "https://github.com/futurewei-cloud/alcor/commit/ae97d93ab24c82d9878197b6a966ebeb1caeae98", "message": "[New API Request] Private IP Manager to support IP address replacement #218", "committedDate": "2020-12-17T09:15:07Z", "type": "commit"}, {"oid": "1a12c5cce8445a88df5326f4c5c80a9772253a60", "url": "https://github.com/futurewei-cloud/alcor/commit/1a12c5cce8445a88df5326f4c5c80a9772253a60", "message": "Merge remote-tracking branch 'origin/master'\n\n# Conflicts:\n#\tservices/port_manager/src/main/java/com/futurewei/alcor/portmanager/processor/FixedIpsProcessor.java\n#\tservices/port_manager/src/main/java/com/futurewei/alcor/portmanager/request/RequestManager.java\n#\tservices/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/controller/IpAddrController.java\n#\tservices/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/repo/IpAddrRangeRepo.java\n#\tservices/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/service/implement/IpAddrServiceImpl.java", "committedDate": "2020-12-17T09:24:32Z", "type": "commit"}, {"oid": "80691ecb714b1a18da6781d9cc784c258db83c4f", "url": "https://github.com/futurewei-cloud/alcor/commit/80691ecb714b1a18da6781d9cc784c258db83c4f", "message": "fix some problems", "committedDate": "2020-12-17T11:47:00Z", "type": "commit"}, {"oid": "1fedc028caca6c4f4bb018d8f3689cc51bae76cb", "url": "https://github.com/futurewei-cloud/alcor/commit/1fedc028caca6c4f4bb018d8f3689cc51bae76cb", "message": "resolve conflict", "committedDate": "2020-12-18T06:11:46Z", "type": "commit"}, {"oid": "30c5956db3967edf44ab3ce0631dadeb8dd98ac6", "url": "https://github.com/futurewei-cloud/alcor/commit/30c5956db3967edf44ab3ce0631dadeb8dd98ac6", "message": "resolve conflict", "committedDate": "2020-12-18T06:19:19Z", "type": "commit"}, {"oid": "331c46c81332b000e9fc95d1fe7407881c2f2585", "url": "https://github.com/futurewei-cloud/alcor/commit/331c46c81332b000e9fc95d1fe7407881c2f2585", "message": "Merge remote-tracking branch 'upstream/master'", "committedDate": "2020-12-18T06:23:23Z", "type": "commit"}, {"oid": "41a0012c080f833f337e3276848d8a23f52e92a0", "url": "https://github.com/futurewei-cloud/alcor/commit/41a0012c080f833f337e3276848d8a23f52e92a0", "message": "Merge branch 'master' into master", "committedDate": "2020-12-22T06:31:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzOTg2Mw==", "url": "https://github.com/futurewei-cloud/alcor/pull/520#discussion_r546539863", "bodyText": "Since PortContext is shared by multiple modules, is the meaning of the name result unclear?", "author": "chenpiaoping", "createdAt": "2020-12-21T07:01:26Z", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/processor/PortContext.java", "diffHunk": "@@ -42,6 +43,10 @@\n     private Map<String, List<SubnetEntity>> routerSubnetEntities;\n     private Map<String, InternalRouterInfo> routers;\n     private List<NodeInfo> nodeInfos;\n+    private List<PortEntity.FixedIp> newFixedIps;\n+    private List<PortEntity.FixedIp> oldFixedIps;\n+    private List<IpAddrUpdateRequest> result;", "originalCommit": "331c46c81332b000e9fc95d1fe7407881c2f2585", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg0MTIwNw==", "url": "https://github.com/futurewei-cloud/alcor/pull/520#discussion_r548841207", "bodyText": "I will update the name 'result' to 'FixedIpsResult'", "author": "songxiaoyan", "createdAt": "2020-12-25T09:18:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzOTg2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "8e266299b8e870a2cf14adc1a136131b862ff909", "chunk": "diff --git a/services/port_manager/src/main/java/com/futurewei/alcor/portmanager/processor/PortContext.java b/services/port_manager/src/main/java/com/futurewei/alcor/portmanager/processor/PortContext.java\nindex d802b6cb..c23a23bc 100644\n--- a/services/port_manager/src/main/java/com/futurewei/alcor/portmanager/processor/PortContext.java\n+++ b/services/port_manager/src/main/java/com/futurewei/alcor/portmanager/processor/PortContext.java\n\n@@ -45,7 +45,7 @@ public class PortContext {\n     private List<NodeInfo> nodeInfos;\n     private List<PortEntity.FixedIp> newFixedIps;\n     private List<PortEntity.FixedIp> oldFixedIps;\n-    private List<IpAddrUpdateRequest> result;\n+    private List<IpAddrUpdateRequest> fixedIpsresult;\n \n \n     public PortContext() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcwMDEwMg==", "url": "https://github.com/futurewei-cloud/alcor/pull/520#discussion_r547700102", "bodyText": "There is no need to set FixedIps for oldPortEntity, please refer to the latest code: https://github.com/futurewei-cloud/alcor/blob/master/services/port_manager/src/main/java/com/futurewei/alcor/portmanager/processor/PortProcessor.java", "author": "chenpiaoping", "createdAt": "2020-12-23T06:21:27Z", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/processor/FixedIpsProcessor.java", "diffHunk": "@@ -356,10 +543,31 @@ void updateProcess(PortContext context) {\n         List<PortEntity.FixedIp> newFixedIps = new ArrayList<>(newPortEntity.getFixedIps());\n         List<PortEntity.FixedIp> oldFixedIps = new ArrayList<>(oldPortEntity.getFixedIps());\n \n+        if(newFixedIps != null){\n+            context.setNewFixedIps(newFixedIps);\n+        }\n+\n+        if(oldFixedIps != null){\n+            context.setOldFixedIps(oldFixedIps);\n+        }\n+\n         if (newFixedIps != null && newFixedIps.size() > 0) {\n-            List<PortEntity.FixedIp> commonFixedIps = ArrayUtil.findCommonItems(newFixedIps, oldFixedIps);\n+\n+            List<PortEntity.FixedIp> newFixedIpsCopy = newFixedIps.stream().map(e -> {\n+                PortEntity.FixedIp fixedIp = new PortEntity.FixedIp();\n+                BeanUtils.copyProperties(e,fixedIp);\n+                return fixedIp;\n+            }).collect(Collectors.toList());\n+\n+            oldPortEntity.setFixedIps(newFixedIpsCopy);", "originalCommit": "41a0012c080f833f337e3276848d8a23f52e92a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg0MTM3Nw==", "url": "https://github.com/futurewei-cloud/alcor/pull/520#discussion_r548841377", "bodyText": "ok,I get it", "author": "songxiaoyan", "createdAt": "2020-12-25T09:19:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcwMDEwMg=="}], "type": "inlineReview", "revised_code": {"commit": "0b7f1fa9d6edb42be54609e951c7273f5c995617", "chunk": "diff --git a/services/port_manager/src/main/java/com/futurewei/alcor/portmanager/processor/FixedIpsProcessor.java b/services/port_manager/src/main/java/com/futurewei/alcor/portmanager/processor/FixedIpsProcessor.java\nindex aeab0126..e1d3e171 100644\n--- a/services/port_manager/src/main/java/com/futurewei/alcor/portmanager/processor/FixedIpsProcessor.java\n+++ b/services/port_manager/src/main/java/com/futurewei/alcor/portmanager/processor/FixedIpsProcessor.java\n\n@@ -540,8 +540,8 @@ public class FixedIpsProcessor extends AbstractProcessor {\n         PortEntity newPortEntity = context.getNewPortEntity();\n         PortEntity oldPortEntity = context.getOldPortEntity();\n \n-        List<PortEntity.FixedIp> newFixedIps = new ArrayList<>(newPortEntity.getFixedIps());\n-        List<PortEntity.FixedIp> oldFixedIps = new ArrayList<>(oldPortEntity.getFixedIps());\n+        List<PortEntity.FixedIp> newFixedIps = newPortEntity.getFixedIps();\n+        List<PortEntity.FixedIp> oldFixedIps = oldPortEntity.getFixedIps();\n \n         if(newFixedIps != null){\n             context.setNewFixedIps(newFixedIps);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcwMDg5NA==", "url": "https://github.com/futurewei-cloud/alcor/pull/520#discussion_r547700894", "bodyText": "Please delete the useless code", "author": "chenpiaoping", "createdAt": "2020-12-23T06:22:28Z", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/processor/FixedIpsProcessor.java", "diffHunk": "@@ -356,10 +543,31 @@ void updateProcess(PortContext context) {\n         List<PortEntity.FixedIp> newFixedIps = new ArrayList<>(newPortEntity.getFixedIps());\n         List<PortEntity.FixedIp> oldFixedIps = new ArrayList<>(oldPortEntity.getFixedIps());\n \n+        if(newFixedIps != null){\n+            context.setNewFixedIps(newFixedIps);\n+        }\n+\n+        if(oldFixedIps != null){\n+            context.setOldFixedIps(oldFixedIps);\n+        }\n+\n         if (newFixedIps != null && newFixedIps.size() > 0) {\n-            List<PortEntity.FixedIp> commonFixedIps = ArrayUtil.findCommonItems(newFixedIps, oldFixedIps);\n+\n+            List<PortEntity.FixedIp> newFixedIpsCopy = newFixedIps.stream().map(e -> {\n+                PortEntity.FixedIp fixedIp = new PortEntity.FixedIp();\n+                BeanUtils.copyProperties(e,fixedIp);\n+                return fixedIp;\n+            }).collect(Collectors.toList());\n+\n+            oldPortEntity.setFixedIps(newFixedIpsCopy);\n+\n+            List<PortEntity.FixedIp> commonFixedIps = ArrayUtil.findCommonItemsNew(newFixedIps, oldFixedIps);\n+\n+            updateFixedIpsProcess(context);\n+\n \n             //Allocate new ip addresses\n+            /*if (newFixedIps.size() > 0) {", "originalCommit": "41a0012c080f833f337e3276848d8a23f52e92a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg0MTYxNQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/520#discussion_r548841615", "bodyText": "ok,I will delete these useless code", "author": "songxiaoyan", "createdAt": "2020-12-25T09:21:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcwMDg5NA=="}], "type": "inlineReview", "revised_code": {"commit": "0b7f1fa9d6edb42be54609e951c7273f5c995617", "chunk": "diff --git a/services/port_manager/src/main/java/com/futurewei/alcor/portmanager/processor/FixedIpsProcessor.java b/services/port_manager/src/main/java/com/futurewei/alcor/portmanager/processor/FixedIpsProcessor.java\nindex aeab0126..e1d3e171 100644\n--- a/services/port_manager/src/main/java/com/futurewei/alcor/portmanager/processor/FixedIpsProcessor.java\n+++ b/services/port_manager/src/main/java/com/futurewei/alcor/portmanager/processor/FixedIpsProcessor.java\n\n@@ -540,8 +540,8 @@ public class FixedIpsProcessor extends AbstractProcessor {\n         PortEntity newPortEntity = context.getNewPortEntity();\n         PortEntity oldPortEntity = context.getOldPortEntity();\n \n-        List<PortEntity.FixedIp> newFixedIps = new ArrayList<>(newPortEntity.getFixedIps());\n-        List<PortEntity.FixedIp> oldFixedIps = new ArrayList<>(oldPortEntity.getFixedIps());\n+        List<PortEntity.FixedIp> newFixedIps = newPortEntity.getFixedIps();\n+        List<PortEntity.FixedIp> oldFixedIps = oldPortEntity.getFixedIps();\n \n         if(newFixedIps != null){\n             context.setNewFixedIps(newFixedIps);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcxMDI5Mg==", "url": "https://github.com/futurewei-cloud/alcor/pull/520#discussion_r547710292", "bodyText": "If subnetIds.size () is 0, is there no need to send a request?", "author": "chenpiaoping", "createdAt": "2020-12-23T06:34:57Z", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/processor/FixedIpsProcessor.java", "diffHunk": "@@ -205,6 +386,12 @@ private void getSubnetEntities(PortContext context, List<String> subnetIds, bool\n         }\n      }\n \n+    private void getSubnetEntitiesForUpdate(PortContext context, List<String> subnetIds, CallbackFunction callback) {\n+        IRestRequest fetchSubnetRequest = new FetchSubnetRequest(", "originalCommit": "41a0012c080f833f337e3276848d8a23f52e92a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg0MTg2Mw==", "url": "https://github.com/futurewei-cloud/alcor/pull/520#discussion_r548841863", "bodyText": "must call back the function whether subnetIds is 0 or not", "author": "songxiaoyan", "createdAt": "2020-12-25T09:22:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcxMDI5Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcyNDU4Mw==", "url": "https://github.com/futurewei-cloud/alcor/pull/520#discussion_r547724583", "bodyText": "Why do we need to update OldPortEntity here?", "author": "chenpiaoping", "createdAt": "2020-12-23T06:53:33Z", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/processor/FixedIpsProcessor.java", "diffHunk": "@@ -164,6 +321,30 @@ private void fetchSubnetForUpdateCallBack(IRestRequest request) throws Exception\n         postFetchSubnet(context, subnetEntities, fixedIps, function);\n     }\n \n+    /**\n+     * Fallback function after request subnet\n+     * @param request\n+     * @throws Exception\n+     */\n+    private void updateFixedIpsCallBack(IRestRequest request) throws Exception{\n+        List<SubnetEntity> subnetEntities = ((FetchSubnetRequest) (request)).getSubnetEntities();\n+        PortContext context = request.getContext();\n+\n+        if(context.getOldPortEntity() != null){\n+            for (PortEntity.FixedIp fixedIp : context.getOldPortEntity().getFixedIps()) {\n+                for (SubnetEntity subnetEntity : subnetEntities) {\n+                    if(subnetEntity.getId().equals(fixedIp.getSubnetId())){\n+                        fixedIp.setIpV4RangeId(subnetEntity.getIpV4RangeId());", "originalCommit": "41a0012c080f833f337e3276848d8a23f52e92a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg0MjU2MQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/520#discussion_r548842561", "bodyText": "Conflict with logic in the previous version,I already modified it in the code", "author": "songxiaoyan", "createdAt": "2020-12-25T09:26:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcyNDU4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "0b7f1fa9d6edb42be54609e951c7273f5c995617", "chunk": "diff --git a/services/port_manager/src/main/java/com/futurewei/alcor/portmanager/processor/FixedIpsProcessor.java b/services/port_manager/src/main/java/com/futurewei/alcor/portmanager/processor/FixedIpsProcessor.java\nindex aeab0126..e1d3e171 100644\n--- a/services/port_manager/src/main/java/com/futurewei/alcor/portmanager/processor/FixedIpsProcessor.java\n+++ b/services/port_manager/src/main/java/com/futurewei/alcor/portmanager/processor/FixedIpsProcessor.java\n\n@@ -307,18 +307,18 @@ public class FixedIpsProcessor extends AbstractProcessor {\n         boolean allocateIpAddress = !((FetchSubnetRequest) (request)).isAllocateIpAddress();\n         PortContext context = request.getContext();\n         IpAddrRequestFunction function;\n-        List<PortEntity.FixedIp> fixedIps;\n+        PortEntity portEntity;\n \n         if (allocateIpAddress) {\n             addSubnetEntities(context, subnetEntities);\n             function = this::allocateFixedIpAddress;\n-            fixedIps = request.getContext().getNewFixedIps();\n+            portEntity = request.getContext().getNewPortEntity();\n         } else {\n             function = this::releaseFixedIpAddress;\n-            fixedIps = request.getContext().getOldFixedIps();\n+            portEntity = request.getContext().getOldPortEntity();\n         }\n \n-        postFetchSubnet(context, subnetEntities, fixedIps, function);\n+        postFetchSubnet(context, subnetEntities, portEntity.getFixedIps(), function);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcyNzAzNA==", "url": "https://github.com/futurewei-cloud/alcor/pull/520#discussion_r547727034", "bodyText": "If hasSubnetFixedIps.size () is 0 and hasIpFixedIps.size () > 0,whether the method this::updateFixedIpsCallBack should be called?", "author": "chenpiaoping", "createdAt": "2020-12-23T06:56:12Z", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/processor/FixedIpsProcessor.java", "diffHunk": "@@ -416,4 +624,39 @@ void deleteProcess(PortContext context) {\n         //Get subnet route\n         getSubnetRoutes(context, new ArrayList<>(subnetIds));\n     }\n+\n+\n+    /**\n+     * update ip address\n+     * @param context\n+     */\n+    private void updateFixedIpsProcess(PortContext context){\n+        Set<String> subnetIds = new HashSet<>();\n+        Map<String, PortEntity.FixedIp> hasIpFixedIps = new HashMap<>();\n+        List<PortEntity.FixedIp> hasSubnetFixedIps = new ArrayList<>();\n+\n+        PortEntity portEntity = context.getNewPortEntity();\n+        List<PortEntity.FixedIp> fixedIps = portEntity.getFixedIps();\n+\n+        if (fixedIps != null) {\n+            for (PortEntity.FixedIp fixedIp: fixedIps) {\n+                if (fixedIp.getSubnetId() != null) {\n+                    subnetIds.add(fixedIp.getSubnetId());\n+                    hasSubnetFixedIps.add(fixedIp);\n+                } else {\n+                    hasIpFixedIps.put(fixedIp.getIpAddress(), fixedIp);\n+                }\n+            }\n+        }\n+\n+        context.setHasIpFixedIps(hasIpFixedIps);\n+        context.setHasSubnetFixedIps(hasSubnetFixedIps);\n+\n+\n+        //Get subnet\n+        getSubnetEntitiesForUpdate(context, new ArrayList<>(subnetIds), this::updateFixedIpsCallBack);", "originalCommit": "41a0012c080f833f337e3276848d8a23f52e92a0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "075d075cb0bf1baee8569674747cdd9659d1ae76", "chunk": "diff --git a/services/port_manager/src/main/java/com/futurewei/alcor/portmanager/processor/FixedIpsProcessor.java b/services/port_manager/src/main/java/com/futurewei/alcor/portmanager/processor/FixedIpsProcessor.java\nindex aeab0126..7b27f9c2 100644\n--- a/services/port_manager/src/main/java/com/futurewei/alcor/portmanager/processor/FixedIpsProcessor.java\n+++ b/services/port_manager/src/main/java/com/futurewei/alcor/portmanager/processor/FixedIpsProcessor.java\n\n@@ -635,17 +574,13 @@ public class FixedIpsProcessor extends AbstractProcessor {\n         Map<String, PortEntity.FixedIp> hasIpFixedIps = new HashMap<>();\n         List<PortEntity.FixedIp> hasSubnetFixedIps = new ArrayList<>();\n \n-        PortEntity portEntity = context.getNewPortEntity();\n-        List<PortEntity.FixedIp> fixedIps = portEntity.getFixedIps();\n \n-        if (fixedIps != null) {\n-            for (PortEntity.FixedIp fixedIp: fixedIps) {\n-                if (fixedIp.getSubnetId() != null) {\n-                    subnetIds.add(fixedIp.getSubnetId());\n-                    hasSubnetFixedIps.add(fixedIp);\n-                } else {\n-                    hasIpFixedIps.put(fixedIp.getIpAddress(), fixedIp);\n-                }\n+        for (PortEntity.FixedIp fixedIp: context.getNewFixedIps()) {\n+            if (fixedIp.getSubnetId() != null) {\n+                subnetIds.add(fixedIp.getSubnetId());\n+                hasSubnetFixedIps.add(fixedIp);\n+            } else {\n+                hasIpFixedIps.put(fixedIp.getIpAddress(), fixedIp);\n             }\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc0MDUzMA==", "url": "https://github.com/futurewei-cloud/alcor/pull/520#discussion_r547740530", "bodyText": "What happens if subnetEntities.size() < hasSubnetFixedIps.size()?", "author": "chenpiaoping", "createdAt": "2020-12-23T07:13:40Z", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/processor/FixedIpsProcessor.java", "diffHunk": "@@ -107,6 +115,143 @@ private void releaseFixedIpAddress(PortContext context, List<IpAddrRequest> ipAd\n         }\n     }\n \n+    /**\n+     * Fill in information to PortEntity\n+     * @param context\n+     * @param ipAddrUpdateRequest\n+     * @throws Exception\n+     */\n+    private void updateFixedIpAddress(PortContext context,IpAddrUpdateRequest ipAddrUpdateRequest) throws Exception{\n+        UpdatePortIpAddressRequest updatePortIpAddressRequest = new UpdatePortIpAddressRequest(context, ipAddrUpdateRequest);\n+        context.getRequestManager().sendRequest(updatePortIpAddressRequest);\n+\n+        List<IpAddrUpdateRequest> result = updatePortIpAddressRequest.getResult();\n+        context.setResult(result);\n+\n+        List<String> filterIpsHasSubnet = context.getHasSubnetFixedIps().stream()\n+                .map(PortEntity.FixedIp::getIpAddress)\n+                .filter(Objects::nonNull)\n+                .collect(Collectors.toList());\n+\n+        List<String> filterIpsHasIp = context.getHasIpFixedIps().values().stream()\n+                .map(PortEntity.FixedIp::getIpAddress)\n+                .filter(Objects::nonNull)\n+                .collect(Collectors.toList());\n+\n+        for (IpAddrUpdateRequest request : result) {\n+            Iterator<IpAddrRequest> iterator = request.getOldIpAddrRequests().iterator();\n+            while (iterator.hasNext()){\n+                IpAddrRequest ipAddr = iterator.next();\n+\n+                if(filterIpsHasIp.contains(ipAddr.getIp())){\n+                    for (PortEntity.FixedIp fixedIp : context.getOldPortEntity().getFixedIps()) {\n+                        if(ipAddr.getIp().equals(fixedIp.getIpAddress())){\n+                            fixedIp.setIpV4RangeId(ipAddr.getRangeId());\n+                            fixedIp.setSubnetId(ipAddr.getSubnetId());\n+                        }\n+                    }\n+                    for (Map.Entry<String, PortEntity.FixedIp> fixedIpEntry : context.getHasIpFixedIps().entrySet()) {\n+                        if(ipAddr.getIp().equals(fixedIpEntry.getKey())){\n+                            fixedIpEntry.getValue().setIpV4RangeId(ipAddr.getRangeId());\n+                            fixedIpEntry.getValue().setSubnetId(ipAddr.getSubnetId());\n+                        }\n+                    }\n+                    iterator.remove();\n+                    continue;\n+                }\n+\n+                if(filterIpsHasSubnet.contains(ipAddr.getIp())){\n+                    iterator.remove();\n+                    continue;\n+                }\n+\n+                for (PortEntity.FixedIp fixedIp : context.getHasSubnetFixedIps()) {\n+                    if(ipAddr.getSubnetId().equals(fixedIp.getSubnetId())){\n+                        fixedIp.setIpAddress(ipAddr.getIp());\n+                        fixedIp.setIpV4RangeId(ipAddr.getRangeId());\n+                    }\n+                }\n+\n+                for (PortEntity.FixedIp fixedIp : context.getOldPortEntity().getFixedIps()) {\n+                    if(ipAddr.getSubnetId().equals(fixedIp.getSubnetId()) && fixedIp.getIpAddress() == null){\n+                        fixedIp.setIpAddress(ipAddr.getIp());\n+                        fixedIp.setIpV4RangeId(ipAddr.getRangeId());\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+\n+        //check all ip have update\n+        for (PortEntity.FixedIp fixedIp : context.getOldPortEntity().getFixedIps()) {\n+            if (fixedIp.getIpAddress() == null || fixedIp.getSubnetId() == null || fixedIp.getIpV4RangeId() == null){\n+                throw new UpdatePortIpException();\n+            }\n+        }\n+\n+        Set<String> subnetIdsHasIp = context.getHasIpFixedIps().values().stream()\n+                .map(PortEntity.FixedIp::getSubnetId)\n+                .collect(Collectors.toSet());\n+\n+        Set<String> subnetIdsHasSubnet = context.getHasSubnetFixedIps().stream()\n+                .map(PortEntity.FixedIp::getSubnetId)\n+                .collect(Collectors.toSet());\n+\n+        subnetIdsHasIp.removeIf(subnetIdsHasSubnet::contains);\n+\n+        if(subnetIdsHasIp.size()>0){\n+            getSubnetAndRoute(context,new ArrayList<>(subnetIdsHasIp));\n+        }\n+    }\n+\n+\n+    /**\n+     * Build request parameters to call ip-manager\n+     * @param context\n+     * @param subnetEntities\n+     * @param function\n+     * @throws Exception\n+     */\n+    private void postFetchSubnet(PortContext context, List<SubnetEntity> subnetEntities,IpAddrUpdateRequestFunction function) throws Exception {\n+\n+        IpAddrUpdateRequest ipAddrUpdateRequest = new IpAddrUpdateRequest();\n+        ArrayList<IpAddrRequest> newIpAddrRequests = new ArrayList<>();\n+        ArrayList<IpAddrRequest> oldIpAddrRequests = new ArrayList<>();\n+        List<PortEntity.FixedIp> hasSubnetFixedIps = context.getHasSubnetFixedIps();\n+        Map<String, PortEntity.FixedIp> hasIpFixedIps = context.getHasIpFixedIps();\n+\n+        if(hasSubnetFixedIps.size()>0){\n+            for (SubnetEntity subnetEntity : subnetEntities) {", "originalCommit": "41a0012c080f833f337e3276848d8a23f52e92a0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "075d075cb0bf1baee8569674747cdd9659d1ae76", "chunk": "diff --git a/services/port_manager/src/main/java/com/futurewei/alcor/portmanager/processor/FixedIpsProcessor.java b/services/port_manager/src/main/java/com/futurewei/alcor/portmanager/processor/FixedIpsProcessor.java\nindex aeab0126..7b27f9c2 100644\n--- a/services/port_manager/src/main/java/com/futurewei/alcor/portmanager/processor/FixedIpsProcessor.java\n+++ b/services/port_manager/src/main/java/com/futurewei/alcor/portmanager/processor/FixedIpsProcessor.java\n\n@@ -128,52 +127,23 @@ public class FixedIpsProcessor extends AbstractProcessor {\n         List<IpAddrUpdateRequest> result = updatePortIpAddressRequest.getResult();\n         context.setResult(result);\n \n-        List<String> filterIpsHasSubnet = context.getHasSubnetFixedIps().stream()\n-                .map(PortEntity.FixedIp::getIpAddress)\n-                .filter(Objects::nonNull)\n-                .collect(Collectors.toList());\n-\n-        List<String> filterIpsHasIp = context.getHasIpFixedIps().values().stream()\n-                .map(PortEntity.FixedIp::getIpAddress)\n-                .filter(Objects::nonNull)\n-                .collect(Collectors.toList());\n \n         for (IpAddrUpdateRequest request : result) {\n-            Iterator<IpAddrRequest> iterator = request.getOldIpAddrRequests().iterator();\n-            while (iterator.hasNext()){\n-                IpAddrRequest ipAddr = iterator.next();\n-\n-                if(filterIpsHasIp.contains(ipAddr.getIp())){\n-                    for (PortEntity.FixedIp fixedIp : context.getOldPortEntity().getFixedIps()) {\n-                        if(ipAddr.getIp().equals(fixedIp.getIpAddress())){\n-                            fixedIp.setIpV4RangeId(ipAddr.getRangeId());\n-                            fixedIp.setSubnetId(ipAddr.getSubnetId());\n-                        }\n-                    }\n-                    for (Map.Entry<String, PortEntity.FixedIp> fixedIpEntry : context.getHasIpFixedIps().entrySet()) {\n-                        if(ipAddr.getIp().equals(fixedIpEntry.getKey())){\n-                            fixedIpEntry.getValue().setIpV4RangeId(ipAddr.getRangeId());\n-                            fixedIpEntry.getValue().setSubnetId(ipAddr.getSubnetId());\n-                        }\n-                    }\n-                    iterator.remove();\n-                    continue;\n-                }\n+            for (IpAddrRequest ipAddr : request.getNewIpAddrRequests()) {\n \n-                if(filterIpsHasSubnet.contains(ipAddr.getIp())){\n-                    iterator.remove();\n-                    continue;\n+                if (context.getNewPortEntity().getFixedIps().size() == 0) {\n+                    context.getNewPortEntity().getFixedIps().add(new PortEntity.FixedIp(ipAddr.getSubnetId(), ipAddr.getRangeId(), ipAddr.getIp()));\n+                    getSubnetAndRoute(context, Collections.singletonList(ipAddr.getSubnetId()));\n+                    break;\n                 }\n \n-                for (PortEntity.FixedIp fixedIp : context.getHasSubnetFixedIps()) {\n-                    if(ipAddr.getSubnetId().equals(fixedIp.getSubnetId())){\n-                        fixedIp.setIpAddress(ipAddr.getIp());\n+                for (PortEntity.FixedIp fixedIp : context.getNewFixedIps()) {\n+                    if (ipAddr.getIp().equals(fixedIp.getIpAddress())) {\n                         fixedIp.setIpV4RangeId(ipAddr.getRangeId());\n+                        fixedIp.setSubnetId(ipAddr.getSubnetId());\n+                        break;\n                     }\n-                }\n-\n-                for (PortEntity.FixedIp fixedIp : context.getOldPortEntity().getFixedIps()) {\n-                    if(ipAddr.getSubnetId().equals(fixedIp.getSubnetId()) && fixedIp.getIpAddress() == null){\n+                    if (ipAddr.getSubnetId().equals(fixedIp.getSubnetId()) && fixedIp.getIpAddress() == null) {\n                         fixedIp.setIpAddress(ipAddr.getIp());\n                         fixedIp.setIpV4RangeId(ipAddr.getRangeId());\n                         break;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc0NTY0Ng==", "url": "https://github.com/futurewei-cloud/alcor/pull/520#discussion_r547745646", "bodyText": "Should be context.getResult().get(0).getNewIpAddrRequests()?\nIf send() throws an exception, shouldn't rollback be called? Because updateIpAddress didn't succeed.\nSo we need to decide whether we need a rollback based on whether the result is empty or not.", "author": "chenpiaoping", "createdAt": "2020-12-23T07:20:27Z", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/request/UpdatePortIpAddressRequest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package com.futurewei.alcor.portmanager.request;\n+\n+import com.futurewei.alcor.common.utils.SpringContextUtil;\n+import com.futurewei.alcor.portmanager.exception.UpdatePortIpException;\n+import com.futurewei.alcor.portmanager.processor.PortContext;\n+import com.futurewei.alcor.web.entity.ip.IpAddrRequest;\n+import com.futurewei.alcor.web.entity.ip.IpAddrUpdateRequest;\n+import com.futurewei.alcor.web.restclient.IpManagerRestClient;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@Slf4j\n+public class UpdatePortIpAddressRequest extends AbstractRequest{\n+\n+    private IpManagerRestClient ipManagerRestClient;\n+    private IpAddrUpdateRequest ipAddrUpdateRequest;\n+    private List<IpAddrUpdateRequest> result;\n+\n+    public UpdatePortIpAddressRequest(PortContext context, IpAddrUpdateRequest ipAddrUpdateRequest) {\n+        super(context);\n+        this.ipAddrUpdateRequest = ipAddrUpdateRequest;\n+        this.result = new ArrayList<>();\n+        this.ipManagerRestClient = SpringContextUtil.getBean(IpManagerRestClient.class);\n+    }\n+\n+    public List<IpAddrUpdateRequest> getResult(){\n+        return result;\n+    }\n+\n+    @Override\n+    public void send() throws Exception {\n+        IpAddrUpdateRequest response = ipManagerRestClient.updateIpAddress(this.ipAddrUpdateRequest);\n+        if(response == null){\n+            throw new UpdatePortIpException();\n+        }\n+        result.add(response);\n+    }\n+\n+    @Override\n+    public void rollback() throws Exception {\n+        log.info(\"UpdatePortIpAddressRequest rollback,oldIpAddrRequests is {}, newIpAddrRequests is {}\",\n+                ipAddrUpdateRequest.getOldIpAddrRequests(),context.getResult().get(0).getOldIpAddrRequests());\n+        List<IpAddrRequest> oldIpAddrRequests = ipAddrUpdateRequest.getOldIpAddrRequests();\n+        List<IpAddrRequest> newIpAddrRequests = context.getResult().get(0).getOldIpAddrRequests();", "originalCommit": "41a0012c080f833f337e3276848d8a23f52e92a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg0MzU4NA==", "url": "https://github.com/futurewei-cloud/alcor/pull/520#discussion_r548843584", "bodyText": "I'll get the results from context.getFiexdIpsResult() to rollback later", "author": "songxiaoyan", "createdAt": "2020-12-25T09:33:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc0NTY0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "075d075cb0bf1baee8569674747cdd9659d1ae76", "chunk": "diff --git a/services/port_manager/src/main/java/com/futurewei/alcor/portmanager/request/UpdatePortIpAddressRequest.java b/services/port_manager/src/main/java/com/futurewei/alcor/portmanager/request/UpdatePortIpAddressRequest.java\nindex c3030b2a..11c4cb91 100644\n--- a/services/port_manager/src/main/java/com/futurewei/alcor/portmanager/request/UpdatePortIpAddressRequest.java\n+++ b/services/port_manager/src/main/java/com/futurewei/alcor/portmanager/request/UpdatePortIpAddressRequest.java\n\n@@ -41,9 +41,9 @@ public class UpdatePortIpAddressRequest extends AbstractRequest{\n     @Override\n     public void rollback() throws Exception {\n         log.info(\"UpdatePortIpAddressRequest rollback,oldIpAddrRequests is {}, newIpAddrRequests is {}\",\n-                ipAddrUpdateRequest.getOldIpAddrRequests(),context.getResult().get(0).getOldIpAddrRequests());\n-        List<IpAddrRequest> oldIpAddrRequests = ipAddrUpdateRequest.getOldIpAddrRequests();\n-        List<IpAddrRequest> newIpAddrRequests = context.getResult().get(0).getOldIpAddrRequests();\n+                context.getResult().get(0).getOldIpAddrRequests(),context.getResult().get(0).getNewIpAddrRequests());\n+        List<IpAddrRequest> oldIpAddrRequests = context.getResult().get(0).getOldIpAddrRequests();\n+        List<IpAddrRequest> newIpAddrRequests = context.getResult().get(0).getNewIpAddrRequests();\n \n         if(newIpAddrRequests.size() > 0){\n             if(newIpAddrRequests.size() == 1){\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc3NDkzMQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/520#discussion_r547774931", "bodyText": "Should be equest.getNewIpAddrRequests().iterator() here ?", "author": "chenpiaoping", "createdAt": "2020-12-23T07:57:34Z", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/processor/FixedIpsProcessor.java", "diffHunk": "@@ -107,6 +115,143 @@ private void releaseFixedIpAddress(PortContext context, List<IpAddrRequest> ipAd\n         }\n     }\n \n+    /**\n+     * Fill in information to PortEntity\n+     * @param context\n+     * @param ipAddrUpdateRequest\n+     * @throws Exception\n+     */\n+    private void updateFixedIpAddress(PortContext context,IpAddrUpdateRequest ipAddrUpdateRequest) throws Exception{\n+        UpdatePortIpAddressRequest updatePortIpAddressRequest = new UpdatePortIpAddressRequest(context, ipAddrUpdateRequest);\n+        context.getRequestManager().sendRequest(updatePortIpAddressRequest);\n+\n+        List<IpAddrUpdateRequest> result = updatePortIpAddressRequest.getResult();\n+        context.setResult(result);\n+\n+        List<String> filterIpsHasSubnet = context.getHasSubnetFixedIps().stream()\n+                .map(PortEntity.FixedIp::getIpAddress)\n+                .filter(Objects::nonNull)\n+                .collect(Collectors.toList());\n+\n+        List<String> filterIpsHasIp = context.getHasIpFixedIps().values().stream()\n+                .map(PortEntity.FixedIp::getIpAddress)\n+                .filter(Objects::nonNull)\n+                .collect(Collectors.toList());\n+\n+        for (IpAddrUpdateRequest request : result) {\n+            Iterator<IpAddrRequest> iterator = request.getOldIpAddrRequests().iterator();", "originalCommit": "41a0012c080f833f337e3276848d8a23f52e92a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg0Mzc1Ng==", "url": "https://github.com/futurewei-cloud/alcor/pull/520#discussion_r548843756", "bodyText": "Conflict with logic in the previous version", "author": "songxiaoyan", "createdAt": "2020-12-25T09:34:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc3NDkzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "075d075cb0bf1baee8569674747cdd9659d1ae76", "chunk": "diff --git a/services/port_manager/src/main/java/com/futurewei/alcor/portmanager/processor/FixedIpsProcessor.java b/services/port_manager/src/main/java/com/futurewei/alcor/portmanager/processor/FixedIpsProcessor.java\nindex aeab0126..7b27f9c2 100644\n--- a/services/port_manager/src/main/java/com/futurewei/alcor/portmanager/processor/FixedIpsProcessor.java\n+++ b/services/port_manager/src/main/java/com/futurewei/alcor/portmanager/processor/FixedIpsProcessor.java\n\n@@ -128,52 +127,23 @@ public class FixedIpsProcessor extends AbstractProcessor {\n         List<IpAddrUpdateRequest> result = updatePortIpAddressRequest.getResult();\n         context.setResult(result);\n \n-        List<String> filterIpsHasSubnet = context.getHasSubnetFixedIps().stream()\n-                .map(PortEntity.FixedIp::getIpAddress)\n-                .filter(Objects::nonNull)\n-                .collect(Collectors.toList());\n-\n-        List<String> filterIpsHasIp = context.getHasIpFixedIps().values().stream()\n-                .map(PortEntity.FixedIp::getIpAddress)\n-                .filter(Objects::nonNull)\n-                .collect(Collectors.toList());\n \n         for (IpAddrUpdateRequest request : result) {\n-            Iterator<IpAddrRequest> iterator = request.getOldIpAddrRequests().iterator();\n-            while (iterator.hasNext()){\n-                IpAddrRequest ipAddr = iterator.next();\n-\n-                if(filterIpsHasIp.contains(ipAddr.getIp())){\n-                    for (PortEntity.FixedIp fixedIp : context.getOldPortEntity().getFixedIps()) {\n-                        if(ipAddr.getIp().equals(fixedIp.getIpAddress())){\n-                            fixedIp.setIpV4RangeId(ipAddr.getRangeId());\n-                            fixedIp.setSubnetId(ipAddr.getSubnetId());\n-                        }\n-                    }\n-                    for (Map.Entry<String, PortEntity.FixedIp> fixedIpEntry : context.getHasIpFixedIps().entrySet()) {\n-                        if(ipAddr.getIp().equals(fixedIpEntry.getKey())){\n-                            fixedIpEntry.getValue().setIpV4RangeId(ipAddr.getRangeId());\n-                            fixedIpEntry.getValue().setSubnetId(ipAddr.getSubnetId());\n-                        }\n-                    }\n-                    iterator.remove();\n-                    continue;\n-                }\n+            for (IpAddrRequest ipAddr : request.getNewIpAddrRequests()) {\n \n-                if(filterIpsHasSubnet.contains(ipAddr.getIp())){\n-                    iterator.remove();\n-                    continue;\n+                if (context.getNewPortEntity().getFixedIps().size() == 0) {\n+                    context.getNewPortEntity().getFixedIps().add(new PortEntity.FixedIp(ipAddr.getSubnetId(), ipAddr.getRangeId(), ipAddr.getIp()));\n+                    getSubnetAndRoute(context, Collections.singletonList(ipAddr.getSubnetId()));\n+                    break;\n                 }\n \n-                for (PortEntity.FixedIp fixedIp : context.getHasSubnetFixedIps()) {\n-                    if(ipAddr.getSubnetId().equals(fixedIp.getSubnetId())){\n-                        fixedIp.setIpAddress(ipAddr.getIp());\n+                for (PortEntity.FixedIp fixedIp : context.getNewFixedIps()) {\n+                    if (ipAddr.getIp().equals(fixedIp.getIpAddress())) {\n                         fixedIp.setIpV4RangeId(ipAddr.getRangeId());\n+                        fixedIp.setSubnetId(ipAddr.getSubnetId());\n+                        break;\n                     }\n-                }\n-\n-                for (PortEntity.FixedIp fixedIp : context.getOldPortEntity().getFixedIps()) {\n-                    if(ipAddr.getSubnetId().equals(fixedIp.getSubnetId()) && fixedIp.getIpAddress() == null){\n+                    if (ipAddr.getSubnetId().equals(fixedIp.getSubnetId()) && fixedIp.getIpAddress() == null) {\n                         fixedIp.setIpAddress(ipAddr.getIp());\n                         fixedIp.setIpV4RangeId(ipAddr.getRangeId());\n                         break;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc4MDgxNg==", "url": "https://github.com/futurewei-cloud/alcor/pull/520#discussion_r547780816", "bodyText": "If HasSubnetFixedIps.size () > 1 and all have the same subnetId, will all FixedIp have the same ipAddr?", "author": "chenpiaoping", "createdAt": "2020-12-23T08:04:56Z", "path": "services/port_manager/src/main/java/com/futurewei/alcor/portmanager/processor/FixedIpsProcessor.java", "diffHunk": "@@ -107,6 +115,143 @@ private void releaseFixedIpAddress(PortContext context, List<IpAddrRequest> ipAd\n         }\n     }\n \n+    /**\n+     * Fill in information to PortEntity\n+     * @param context\n+     * @param ipAddrUpdateRequest\n+     * @throws Exception\n+     */\n+    private void updateFixedIpAddress(PortContext context,IpAddrUpdateRequest ipAddrUpdateRequest) throws Exception{\n+        UpdatePortIpAddressRequest updatePortIpAddressRequest = new UpdatePortIpAddressRequest(context, ipAddrUpdateRequest);\n+        context.getRequestManager().sendRequest(updatePortIpAddressRequest);\n+\n+        List<IpAddrUpdateRequest> result = updatePortIpAddressRequest.getResult();\n+        context.setResult(result);\n+\n+        List<String> filterIpsHasSubnet = context.getHasSubnetFixedIps().stream()\n+                .map(PortEntity.FixedIp::getIpAddress)\n+                .filter(Objects::nonNull)\n+                .collect(Collectors.toList());\n+\n+        List<String> filterIpsHasIp = context.getHasIpFixedIps().values().stream()\n+                .map(PortEntity.FixedIp::getIpAddress)\n+                .filter(Objects::nonNull)\n+                .collect(Collectors.toList());\n+\n+        for (IpAddrUpdateRequest request : result) {\n+            Iterator<IpAddrRequest> iterator = request.getOldIpAddrRequests().iterator();\n+            while (iterator.hasNext()){\n+                IpAddrRequest ipAddr = iterator.next();\n+\n+                if(filterIpsHasIp.contains(ipAddr.getIp())){\n+                    for (PortEntity.FixedIp fixedIp : context.getOldPortEntity().getFixedIps()) {\n+                        if(ipAddr.getIp().equals(fixedIp.getIpAddress())){\n+                            fixedIp.setIpV4RangeId(ipAddr.getRangeId());\n+                            fixedIp.setSubnetId(ipAddr.getSubnetId());\n+                        }\n+                    }\n+                    for (Map.Entry<String, PortEntity.FixedIp> fixedIpEntry : context.getHasIpFixedIps().entrySet()) {\n+                        if(ipAddr.getIp().equals(fixedIpEntry.getKey())){\n+                            fixedIpEntry.getValue().setIpV4RangeId(ipAddr.getRangeId());\n+                            fixedIpEntry.getValue().setSubnetId(ipAddr.getSubnetId());\n+                        }\n+                    }\n+                    iterator.remove();\n+                    continue;\n+                }\n+\n+                if(filterIpsHasSubnet.contains(ipAddr.getIp())){\n+                    iterator.remove();\n+                    continue;\n+                }\n+\n+                for (PortEntity.FixedIp fixedIp : context.getHasSubnetFixedIps()) {\n+                    if(ipAddr.getSubnetId().equals(fixedIp.getSubnetId())){\n+                        fixedIp.setIpAddress(ipAddr.getIp());", "originalCommit": "41a0012c080f833f337e3276848d8a23f52e92a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg0NTc0Mg==", "url": "https://github.com/futurewei-cloud/alcor/pull/520#discussion_r548845742", "bodyText": "I will delete it  because it have no use in the later code", "author": "songxiaoyan", "createdAt": "2020-12-25T09:46:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc4MDgxNg=="}], "type": "inlineReview", "revised_code": {"commit": "075d075cb0bf1baee8569674747cdd9659d1ae76", "chunk": "diff --git a/services/port_manager/src/main/java/com/futurewei/alcor/portmanager/processor/FixedIpsProcessor.java b/services/port_manager/src/main/java/com/futurewei/alcor/portmanager/processor/FixedIpsProcessor.java\nindex aeab0126..7b27f9c2 100644\n--- a/services/port_manager/src/main/java/com/futurewei/alcor/portmanager/processor/FixedIpsProcessor.java\n+++ b/services/port_manager/src/main/java/com/futurewei/alcor/portmanager/processor/FixedIpsProcessor.java\n\n@@ -128,52 +127,23 @@ public class FixedIpsProcessor extends AbstractProcessor {\n         List<IpAddrUpdateRequest> result = updatePortIpAddressRequest.getResult();\n         context.setResult(result);\n \n-        List<String> filterIpsHasSubnet = context.getHasSubnetFixedIps().stream()\n-                .map(PortEntity.FixedIp::getIpAddress)\n-                .filter(Objects::nonNull)\n-                .collect(Collectors.toList());\n-\n-        List<String> filterIpsHasIp = context.getHasIpFixedIps().values().stream()\n-                .map(PortEntity.FixedIp::getIpAddress)\n-                .filter(Objects::nonNull)\n-                .collect(Collectors.toList());\n \n         for (IpAddrUpdateRequest request : result) {\n-            Iterator<IpAddrRequest> iterator = request.getOldIpAddrRequests().iterator();\n-            while (iterator.hasNext()){\n-                IpAddrRequest ipAddr = iterator.next();\n-\n-                if(filterIpsHasIp.contains(ipAddr.getIp())){\n-                    for (PortEntity.FixedIp fixedIp : context.getOldPortEntity().getFixedIps()) {\n-                        if(ipAddr.getIp().equals(fixedIp.getIpAddress())){\n-                            fixedIp.setIpV4RangeId(ipAddr.getRangeId());\n-                            fixedIp.setSubnetId(ipAddr.getSubnetId());\n-                        }\n-                    }\n-                    for (Map.Entry<String, PortEntity.FixedIp> fixedIpEntry : context.getHasIpFixedIps().entrySet()) {\n-                        if(ipAddr.getIp().equals(fixedIpEntry.getKey())){\n-                            fixedIpEntry.getValue().setIpV4RangeId(ipAddr.getRangeId());\n-                            fixedIpEntry.getValue().setSubnetId(ipAddr.getSubnetId());\n-                        }\n-                    }\n-                    iterator.remove();\n-                    continue;\n-                }\n+            for (IpAddrRequest ipAddr : request.getNewIpAddrRequests()) {\n \n-                if(filterIpsHasSubnet.contains(ipAddr.getIp())){\n-                    iterator.remove();\n-                    continue;\n+                if (context.getNewPortEntity().getFixedIps().size() == 0) {\n+                    context.getNewPortEntity().getFixedIps().add(new PortEntity.FixedIp(ipAddr.getSubnetId(), ipAddr.getRangeId(), ipAddr.getIp()));\n+                    getSubnetAndRoute(context, Collections.singletonList(ipAddr.getSubnetId()));\n+                    break;\n                 }\n \n-                for (PortEntity.FixedIp fixedIp : context.getHasSubnetFixedIps()) {\n-                    if(ipAddr.getSubnetId().equals(fixedIp.getSubnetId())){\n-                        fixedIp.setIpAddress(ipAddr.getIp());\n+                for (PortEntity.FixedIp fixedIp : context.getNewFixedIps()) {\n+                    if (ipAddr.getIp().equals(fixedIp.getIpAddress())) {\n                         fixedIp.setIpV4RangeId(ipAddr.getRangeId());\n+                        fixedIp.setSubnetId(ipAddr.getSubnetId());\n+                        break;\n                     }\n-                }\n-\n-                for (PortEntity.FixedIp fixedIp : context.getOldPortEntity().getFixedIps()) {\n-                    if(ipAddr.getSubnetId().equals(fixedIp.getSubnetId()) && fixedIp.getIpAddress() == null){\n+                    if (ipAddr.getSubnetId().equals(fixedIp.getSubnetId()) && fixedIp.getIpAddress() == null) {\n                         fixedIp.setIpAddress(ipAddr.getIp());\n                         fixedIp.setIpV4RangeId(ipAddr.getRangeId());\n                         break;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzgwMTM1OQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/520#discussion_r547801359", "bodyText": "Why do we set the new ip to OldIpAddrRequests? Does it cause misunderstanding?", "author": "chenpiaoping", "createdAt": "2020-12-23T08:28:27Z", "path": "services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/controller/IpAddrController.java", "diffHunk": "@@ -238,4 +238,20 @@ public IpAddrRangeRequest getIpAddrRange(@PathVariable(\"range_id\") String rangeI\n     public List<IpAddrRangeRequest> listIpAddrRange() {\n         return ipAddrService.listIpAddrRange();\n     }\n+\n+    @PostMapping(\"/ips/update\")\n+    @ResponseBody\n+    @DurationStatistics\n+    public IpAddrUpdateRequest updateIpAddr(@RequestBody IpAddrUpdateRequest request) throws Exception {\n+        for (IpAddrRequest oldIpAddrRequest : request.getOldIpAddrRequests()) {\n+            checkRangeId(oldIpAddrRequest.getRangeId());\n+            checkIpAddr(oldIpAddrRequest.getIp());\n+        }\n+        for (IpAddrRequest newIpAddrRequest : request.getNewIpAddrRequests()) checkIpRequest(newIpAddrRequest);\n+\n+        List<IpAddrRequest> ipAddrRequests = ipAddrService.updateIpAddr(request);\n+        IpAddrUpdateRequest ipAddrUpdateRequest = new IpAddrUpdateRequest();\n+        ipAddrUpdateRequest.setOldIpAddrRequests(ipAddrRequests);", "originalCommit": "41a0012c080f833f337e3276848d8a23f52e92a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg0NDIzOA==", "url": "https://github.com/futurewei-cloud/alcor/pull/520#discussion_r548844238", "bodyText": "Conflict with logic in the previous version", "author": "songxiaoyan", "createdAt": "2020-12-25T09:37:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzgwMTM1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "075d075cb0bf1baee8569674747cdd9659d1ae76", "chunk": "diff --git a/services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/controller/IpAddrController.java b/services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/controller/IpAddrController.java\nindex a4b87e06..06e4f61f 100644\n--- a/services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/controller/IpAddrController.java\n+++ b/services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/controller/IpAddrController.java\n\n@@ -249,9 +249,10 @@ public class IpAddrController {\n         }\n         for (IpAddrRequest newIpAddrRequest : request.getNewIpAddrRequests()) checkIpRequest(newIpAddrRequest);\n \n-        List<IpAddrRequest> ipAddrRequests = ipAddrService.updateIpAddr(request);\n+        List<IpAddrRequest> newIpAddrRequests = ipAddrService.updateIpAddr(request);\n         IpAddrUpdateRequest ipAddrUpdateRequest = new IpAddrUpdateRequest();\n-        ipAddrUpdateRequest.setOldIpAddrRequests(ipAddrRequests);\n+        ipAddrUpdateRequest.setOldIpAddrRequests(request.getOldIpAddrRequests());\n+        ipAddrUpdateRequest.setNewIpAddrRequests(newIpAddrRequests);\n         return ipAddrUpdateRequest;\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzgwMzM5Nw==", "url": "https://github.com/futurewei-cloud/alcor/pull/520#discussion_r547803397", "bodyText": "Whether there is no need to distinguish between one or more here, just deal it as multiple case?", "author": "chenpiaoping", "createdAt": "2020-12-23T08:30:42Z", "path": "services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/repo/IpAddrRangeRepo.java", "diffHunk": "@@ -483,4 +428,102 @@ public synchronized IpAddrRange deleteIpAddrRange(String rangeId) throws Excepti\n     public synchronized IpAddrRange getIpAddrRange(String rangeId) throws Exception {\n         return ipAddrRangeCache.get(rangeId);\n     }\n+\n+    @DurationStatistics\n+    public synchronized List<IpAddrAlloc> updateIpAddr(IpAddrUpdateRequest request,Map<String, List<String>> rangeToIpAddrList,Map<String, List<IpAddrRequest>> rangeRequests,\n+                             Map<String, List<IpAddrRequest>> vpcIpv4Requests,Map<String, List<IpAddrRequest>> vpcIpv6Requests) throws Exception {\n+        List<IpAddrAlloc> result = null;\n+\n+        try (Transaction tx = ipAddrRangeCache.getTransaction().start()) {\n+            if (request.getOldIpAddrRequests().size() > 0) {\n+                if (request.getOldIpAddrRequests().size() > 1) {\n+                    releaseIpAddrBulkMethod(rangeToIpAddrList);", "originalCommit": "41a0012c080f833f337e3276848d8a23f52e92a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg0NDc4OQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/520#discussion_r548844789", "bodyText": "Some methods require different parameters, which is complex to combine. I advised not to combine them.", "author": "songxiaoyan", "createdAt": "2020-12-25T09:41:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzgwMzM5Nw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "0b7f1fa9d6edb42be54609e951c7273f5c995617", "url": "https://github.com/futurewei-cloud/alcor/commit/0b7f1fa9d6edb42be54609e951c7273f5c995617", "message": "Support Batch Insertion #226", "committedDate": "2020-12-24T06:29:23Z", "type": "commit"}, {"oid": "e8e768f70a8d51cf88a99c2c3b6f89a0b7fb4324", "url": "https://github.com/futurewei-cloud/alcor/commit/e8e768f70a8d51cf88a99c2c3b6f89a0b7fb4324", "message": "Merge remote-tracking branch 'origin/master'", "committedDate": "2020-12-24T06:34:00Z", "type": "commit"}, {"oid": "075d075cb0bf1baee8569674747cdd9659d1ae76", "url": "https://github.com/futurewei-cloud/alcor/commit/075d075cb0bf1baee8569674747cdd9659d1ae76", "message": "Fix and perfect some problems for #218", "committedDate": "2020-12-25T07:16:06Z", "type": "commit"}, {"oid": "8e266299b8e870a2cf14adc1a136131b862ff909", "url": "https://github.com/futurewei-cloud/alcor/commit/8e266299b8e870a2cf14adc1a136131b862ff909", "message": "Fix and perfect some problems for #218", "committedDate": "2020-12-25T09:11:22Z", "type": "commit"}, {"oid": "f9c4fdab8ffb28ccb133f93b94de3c30ba99c0f6", "url": "https://github.com/futurewei-cloud/alcor/commit/f9c4fdab8ffb28ccb133f93b94de3c30ba99c0f6", "message": "Merge remote-tracking branch 'origin/master'\n\n# Conflicts:\n#\tservices/port_manager/src/main/java/com/futurewei/alcor/portmanager/request/UpdatePortIpAddressRequest.java", "committedDate": "2020-12-25T09:13:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUyNzY2Ng==", "url": "https://github.com/futurewei-cloud/alcor/pull/520#discussion_r549527666", "bodyText": "@songxiaoyan Here we may hide an exception if it is not CacheException.\nTry to apply the same exception handling in services/route_manager/src/main/java/com/futurewei/alcor/route/dao/RouteEntryRepository.java", "author": "xieus", "createdAt": "2020-12-29T00:31:50Z", "path": "services/node_manager/src/main/java/com/futurewei/alcor/nodemanager/dao/NodeRepository.java", "diffHunk": "@@ -103,6 +105,19 @@ public void addItem(NodeInfo nodeInfo) throws CacheException {\n         }\n     }\n \n+    @Override\n+    public void addItems(List<NodeInfo> items) throws CacheException {\n+        try(Transaction tx =cache.getTransaction().start()){\n+            Map<String, NodeInfo> nodeInfoMap = items.stream().collect(Collectors.toMap(NodeInfo::getId, Function.identity()));\n+            cache.putAll(nodeInfoMap);\n+            tx.commit();\n+        } catch (CacheException e) {", "originalCommit": "f9c4fdab8ffb28ccb133f93b94de3c30ba99c0f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTU0OTI0NA==", "url": "https://github.com/futurewei-cloud/alcor/pull/520#discussion_r549549244", "bodyText": "I used to refer to the exception thrown by the other method in each class, But now I have modified these as discussed with Piaoping. No transaction required, all exceptions are thrown.", "author": "songxiaoyan", "createdAt": "2020-12-29T02:51:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUyNzY2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "b0c1b9d9a48041b155eaa5569fa59adda4918764", "chunk": "diff --git a/services/node_manager/src/main/java/com/futurewei/alcor/nodemanager/dao/NodeRepository.java b/services/node_manager/src/main/java/com/futurewei/alcor/nodemanager/dao/NodeRepository.java\nindex c1d1d64b..bb9a1cb5 100644\n--- a/services/node_manager/src/main/java/com/futurewei/alcor/nodemanager/dao/NodeRepository.java\n+++ b/services/node_manager/src/main/java/com/futurewei/alcor/nodemanager/dao/NodeRepository.java\n\n@@ -106,16 +107,10 @@ public class NodeRepository implements ICacheRepository<NodeInfo> {\n     }\n \n     @Override\n+    @DurationStatistics\n     public void addItems(List<NodeInfo> items) throws CacheException {\n-        try(Transaction tx =cache.getTransaction().start()){\n-            Map<String, NodeInfo> nodeInfoMap = items.stream().collect(Collectors.toMap(NodeInfo::getId, Function.identity()));\n-            cache.putAll(nodeInfoMap);\n-            tx.commit();\n-        } catch (CacheException e) {\n-            throw e;\n-        } catch (Exception e){\n-            logger.error(\"Add items error: {}\",e.getMessage());\n-        }\n+        Map<String, NodeInfo> nodeInfoMap = items.stream().collect(Collectors.toMap(NodeInfo::getId, Function.identity()));\n+        cache.putAll(nodeInfoMap);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUyNzk5MQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/520#discussion_r549527991", "bodyText": "Same issue on exception handling. Refer to services/route_manager/src/main/java/com/futurewei/alcor/route/dao/RouteEntryRepository.java.", "author": "xieus", "createdAt": "2020-12-29T00:34:01Z", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/dao/RouteTableRepository.java", "diffHunk": "@@ -83,6 +86,21 @@ public void addItem(RouteTable routeTable) throws CacheException {\n         }\n     }\n \n+    @Override\n+    public void addItems(List<RouteTable> items) throws CacheException {\n+        try (Transaction tx = cache.getTransaction().start()) {\n+            logger.log(Level.INFO, \"Add route table batch: {}\",items);\n+            Map<String, RouteTable> routeTableMap = items.stream().collect(Collectors.toMap(RouteTable::getId, Function.identity()));\n+            cache.putAll(routeTableMap);\n+            tx.commit();\n+        } catch (CacheException e) {\n+            throw e;\n+        } catch (Exception e){\n+            logger.log(Level.FINE,\"Add route table batch error\",e);", "originalCommit": "f9c4fdab8ffb28ccb133f93b94de3c30ba99c0f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0c1b9d9a48041b155eaa5569fa59adda4918764", "chunk": "diff --git a/services/route_manager/src/main/java/com/futurewei/alcor/route/dao/RouteTableRepository.java b/services/route_manager/src/main/java/com/futurewei/alcor/route/dao/RouteTableRepository.java\nindex 17082a31..6df809af 100644\n--- a/services/route_manager/src/main/java/com/futurewei/alcor/route/dao/RouteTableRepository.java\n+++ b/services/route_manager/src/main/java/com/futurewei/alcor/route/dao/RouteTableRepository.java\n\n@@ -87,18 +87,10 @@ public class RouteTableRepository implements ICacheRepository<RouteTable> {\n     }\n \n     @Override\n+    @DurationStatistics\n     public void addItems(List<RouteTable> items) throws CacheException {\n-        try (Transaction tx = cache.getTransaction().start()) {\n-            logger.log(Level.INFO, \"Add route table batch: {}\",items);\n-            Map<String, RouteTable> routeTableMap = items.stream().collect(Collectors.toMap(RouteTable::getId, Function.identity()));\n-            cache.putAll(routeTableMap);\n-            tx.commit();\n-        } catch (CacheException e) {\n-            throw e;\n-        } catch (Exception e){\n-            logger.log(Level.FINE,\"Add route table batch error\",e);\n-            e.printStackTrace();\n-        }\n+        Map<String, RouteTable> routeTableMap = items.stream().collect(Collectors.toMap(RouteTable::getId, Function.identity()));\n+        cache.putAll(routeTableMap);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUyODA0OQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/520#discussion_r549528049", "bodyText": "Same issue.", "author": "xieus", "createdAt": "2020-12-29T00:34:23Z", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/dao/RouterExtraAttributeRepository.java", "diffHunk": "@@ -83,6 +86,21 @@ public void addItem(RouterExtraAttribute routerExtraAttribute) throws CacheExcep\n         }\n     }\n \n+    @Override\n+    public void addItems(List<RouterExtraAttribute> items) throws CacheException {\n+        logger.log(Level.INFO, \"Add router extra attribute batch: {}\",items);\n+        try (Transaction tx = cache.getTransaction().start()) {\n+            Map<String, RouterExtraAttribute> routerExtraAttributeMap = items.stream().collect(Collectors.toMap(RouterExtraAttribute::getId, Function.identity()));\n+            cache.putAll(routerExtraAttributeMap);\n+            tx.commit();\n+        } catch (CacheException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            logger.log(Level.FINE, \"Add router extra attribute batch error\",e);", "originalCommit": "f9c4fdab8ffb28ccb133f93b94de3c30ba99c0f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0c1b9d9a48041b155eaa5569fa59adda4918764", "chunk": "diff --git a/services/route_manager/src/main/java/com/futurewei/alcor/route/dao/RouterExtraAttributeRepository.java b/services/route_manager/src/main/java/com/futurewei/alcor/route/dao/RouterExtraAttributeRepository.java\nindex 7073b8df..202fe178 100644\n--- a/services/route_manager/src/main/java/com/futurewei/alcor/route/dao/RouterExtraAttributeRepository.java\n+++ b/services/route_manager/src/main/java/com/futurewei/alcor/route/dao/RouterExtraAttributeRepository.java\n\n@@ -87,18 +87,10 @@ public class RouterExtraAttributeRepository implements ICacheRepository<RouterEx\n     }\n \n     @Override\n+    @DurationStatistics\n     public void addItems(List<RouterExtraAttribute> items) throws CacheException {\n-        logger.log(Level.INFO, \"Add router extra attribute batch: {}\",items);\n-        try (Transaction tx = cache.getTransaction().start()) {\n-            Map<String, RouterExtraAttribute> routerExtraAttributeMap = items.stream().collect(Collectors.toMap(RouterExtraAttribute::getId, Function.identity()));\n-            cache.putAll(routerExtraAttributeMap);\n-            tx.commit();\n-        } catch (CacheException e) {\n-            throw e;\n-        } catch (Exception e) {\n-            logger.log(Level.FINE, \"Add router extra attribute batch error\",e);\n-            e.printStackTrace();\n-        }\n+        Map<String, RouterExtraAttribute> routerExtraAttributeMap = items.stream().collect(Collectors.toMap(RouterExtraAttribute::getId, Function.identity()));\n+        cache.putAll(routerExtraAttributeMap);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUyODA4Ng==", "url": "https://github.com/futurewei-cloud/alcor/pull/520#discussion_r549528086", "bodyText": "Same issue.", "author": "xieus", "createdAt": "2020-12-29T00:34:37Z", "path": "services/route_manager/src/main/java/com/futurewei/alcor/route/dao/RouterRepository.java", "diffHunk": "@@ -83,6 +86,22 @@ public void addItem(Router router) throws CacheException {\n         }\n     }\n \n+    @Override\n+    @DurationStatistics\n+    public void addItems(List<Router> items) throws CacheException {\n+        try (Transaction tx = cache.getTransaction().start()) {\n+            logger.log(Level.INFO, \"Add router Batch: {}\",items);\n+            Map<String, Router> routerMap = items.stream().collect(Collectors.toMap(Router::getId, Function.identity()));\n+            cache.putAll(routerMap);\n+            tx.commit();\n+        } catch (CacheException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            logger.log(Level.FINE, \"Add router Batch error\",e);", "originalCommit": "f9c4fdab8ffb28ccb133f93b94de3c30ba99c0f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0c1b9d9a48041b155eaa5569fa59adda4918764", "chunk": "diff --git a/services/route_manager/src/main/java/com/futurewei/alcor/route/dao/RouterRepository.java b/services/route_manager/src/main/java/com/futurewei/alcor/route/dao/RouterRepository.java\nindex c9ee7abc..36f8d496 100644\n--- a/services/route_manager/src/main/java/com/futurewei/alcor/route/dao/RouterRepository.java\n+++ b/services/route_manager/src/main/java/com/futurewei/alcor/route/dao/RouterRepository.java\n\n@@ -89,17 +89,8 @@ public class RouterRepository implements ICacheRepository<Router> {\n     @Override\n     @DurationStatistics\n     public void addItems(List<Router> items) throws CacheException {\n-        try (Transaction tx = cache.getTransaction().start()) {\n-            logger.log(Level.INFO, \"Add router Batch: {}\",items);\n-            Map<String, Router> routerMap = items.stream().collect(Collectors.toMap(Router::getId, Function.identity()));\n-            cache.putAll(routerMap);\n-            tx.commit();\n-        } catch (CacheException e) {\n-            throw e;\n-        } catch (Exception e) {\n-            logger.log(Level.FINE, \"Add router Batch error\",e);\n-            e.printStackTrace();\n-        }\n+        Map<String, Router> routerMap = items.stream().collect(Collectors.toMap(Router::getId, Function.identity()));\n+        cache.putAll(routerMap);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUyODE0Nw==", "url": "https://github.com/futurewei-cloud/alcor/pull/520#discussion_r549528147", "bodyText": "Same issue.", "author": "xieus", "createdAt": "2020-12-29T00:35:03Z", "path": "services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/dao/VlanRangeRepository.java", "diffHunk": "@@ -90,6 +92,20 @@ public synchronized void addItem(NetworkVlanRange networkVlanRange){\n         }\n     }\n \n+    @Override\n+    @DurationStatistics\n+    public synchronized void addItems(List<NetworkVlanRange> items) throws CacheException {\n+        logger.info(\"Add networkVlanRange batch: {}\", items);\n+\n+        try {\n+            Map<String, NetworkVlanRange> networkVlanRangeMap = items.stream().collect(Collectors.toMap(NetworkVlanRange::getId, Function.identity()));\n+            cache.putAll(networkVlanRangeMap);\n+        } catch (CacheException e) {", "originalCommit": "f9c4fdab8ffb28ccb133f93b94de3c30ba99c0f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0c1b9d9a48041b155eaa5569fa59adda4918764", "chunk": "diff --git a/services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/dao/VlanRangeRepository.java b/services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/dao/VlanRangeRepository.java\nindex 24dd2294..ffe8c878 100644\n--- a/services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/dao/VlanRangeRepository.java\n+++ b/services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/dao/VlanRangeRepository.java\n\n@@ -95,15 +95,8 @@ public class VlanRangeRepository implements ICacheRepository<NetworkVlanRange> {\n     @Override\n     @DurationStatistics\n     public synchronized void addItems(List<NetworkVlanRange> items) throws CacheException {\n-        logger.info(\"Add networkVlanRange batch: {}\", items);\n-\n-        try {\n-            Map<String, NetworkVlanRange> networkVlanRangeMap = items.stream().collect(Collectors.toMap(NetworkVlanRange::getId, Function.identity()));\n-            cache.putAll(networkVlanRangeMap);\n-        } catch (CacheException e) {\n-            e.printStackTrace();\n-            logger.error(\"VlanRangeRepository addItems() exception:\", e);\n-        }\n+        Map<String, NetworkVlanRange> networkVlanRangeMap = items.stream().collect(Collectors.toMap(NetworkVlanRange::getId, Function.identity()));\n+        cache.putAll(networkVlanRangeMap);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUyODIwOA==", "url": "https://github.com/futurewei-cloud/alcor/pull/520#discussion_r549528208", "bodyText": "Same issue.", "author": "xieus", "createdAt": "2020-12-29T00:35:27Z", "path": "services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/dao/VxlanRangeRepository.java", "diffHunk": "@@ -91,6 +93,20 @@ public void addItem(NetworkVxlanRange networkVxlanRange) {\n         }\n     }\n \n+    @Override\n+    @DurationStatistics\n+    public void addItems(List<NetworkVxlanRange> items) throws CacheException {\n+        logger.error(\"Add networkVxlanRange batch: {}\",items);\n+\n+        try {\n+            Map<String, NetworkVxlanRange> networkVxlanRangeMap = items.stream().collect(Collectors.toMap(NetworkVxlanRange::getId, Function.identity()));\n+            cache.putAll(networkVxlanRangeMap);\n+        } catch (CacheException e) {\n+            e.printStackTrace();", "originalCommit": "f9c4fdab8ffb28ccb133f93b94de3c30ba99c0f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0c1b9d9a48041b155eaa5569fa59adda4918764", "chunk": "diff --git a/services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/dao/VxlanRangeRepository.java b/services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/dao/VxlanRangeRepository.java\nindex e9f03fef..17d59464 100644\n--- a/services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/dao/VxlanRangeRepository.java\n+++ b/services/vpc_manager/src/main/java/com/futurewei/alcor/vpcmanager/dao/VxlanRangeRepository.java\n\n@@ -96,15 +96,8 @@ public class VxlanRangeRepository implements ICacheRepository<NetworkVxlanRange>\n     @Override\n     @DurationStatistics\n     public void addItems(List<NetworkVxlanRange> items) throws CacheException {\n-        logger.error(\"Add networkVxlanRange batch: {}\",items);\n-\n-        try {\n-            Map<String, NetworkVxlanRange> networkVxlanRangeMap = items.stream().collect(Collectors.toMap(NetworkVxlanRange::getId, Function.identity()));\n-            cache.putAll(networkVxlanRangeMap);\n-        } catch (CacheException e) {\n-            e.printStackTrace();\n-            logger.error(\"VxlanRangeRepository addItems() exception:\", e);\n-        }\n+        Map<String, NetworkVxlanRange> networkVxlanRangeMap = items.stream().collect(Collectors.toMap(NetworkVxlanRange::getId, Function.identity()));\n+        cache.putAll(networkVxlanRangeMap);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTUyODUyNg==", "url": "https://github.com/futurewei-cloud/alcor/pull/520#discussion_r549528526", "bodyText": "Same issue.", "author": "xieus", "createdAt": "2020-12-29T00:37:02Z", "path": "services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/repo/IpAddrRepo.java", "diffHunk": "@@ -93,6 +95,20 @@ public synchronized void addItem(IpAddrAlloc ipAddrAlloc) {\n         }\n     }\n \n+    @Override\n+    public void addItems(List<IpAddrAlloc> items) {\n+        LOG.error(\"Add ipAllocation batch:{}\", items);\n+\n+        try {\n+            Map<String, IpAddrAlloc> ipAddrAllocMap = items.stream().collect(\n+                    Collectors.toMap(item -> item.getRangeId() + item.getIpAddr(), item -> item));\n+            cache.putAll(ipAddrAllocMap);\n+        } catch (CacheException e) {\n+            e.printStackTrace();", "originalCommit": "f9c4fdab8ffb28ccb133f93b94de3c30ba99c0f6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0c1b9d9a48041b155eaa5569fa59adda4918764", "chunk": "diff --git a/services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/repo/IpAddrRepo.java b/services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/repo/IpAddrRepo.java\nindex 0055c3a6..d7cae36b 100644\n--- a/services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/repo/IpAddrRepo.java\n+++ b/services/private_ip_manager/src/main/java/com/futurewei/alcor/privateipmanager/repo/IpAddrRepo.java\n\n@@ -96,17 +97,11 @@ public class IpAddrRepo implements ICacheRepository<IpAddrAlloc> {\n     }\n \n     @Override\n-    public void addItems(List<IpAddrAlloc> items) {\n-        LOG.error(\"Add ipAllocation batch:{}\", items);\n-\n-        try {\n-            Map<String, IpAddrAlloc> ipAddrAllocMap = items.stream().collect(\n-                    Collectors.toMap(item -> item.getRangeId() + item.getIpAddr(), item -> item));\n-            cache.putAll(ipAddrAllocMap);\n-        } catch (CacheException e) {\n-            e.printStackTrace();\n-            LOG.error(\"IpAddrRepo addItems() exception:\", e);\n-        }\n+    @DurationStatistics\n+    public void addItems(List<IpAddrAlloc> items) throws CacheException {\n+        Map<String, IpAddrAlloc> ipAddrAllocMap = items.stream().collect(\n+                Collectors.toMap(item -> item.getRangeId() + item.getIpAddr(), item -> item));\n+        cache.putAll(ipAddrAllocMap);\n     }\n \n     @Override\n"}}, {"oid": "7d0c58616ee34f408dd6f02ecd697b7c67dd4459", "url": "https://github.com/futurewei-cloud/alcor/commit/7d0c58616ee34f408dd6f02ecd697b7c67dd4459", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor", "committedDate": "2020-12-29T02:34:59Z", "type": "commit"}, {"oid": "b0c1b9d9a48041b155eaa5569fa59adda4918764", "url": "https://github.com/futurewei-cloud/alcor/commit/b0c1b9d9a48041b155eaa5569fa59adda4918764", "message": "Support Batch Insertion #226", "committedDate": "2020-12-29T02:39:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDMwMjgxMQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/520#discussion_r554302811", "bodyText": "Why comment out all the test cases here?", "author": "chenpiaoping", "createdAt": "2021-01-09T07:07:21Z", "path": "services/port_manager/src/test/java/com/futurewei/alcor/portmanager/controller/UpdatePortTest.java", "diffHunk": "@@ -1,256 +1,254 @@\n-/*\n-Copyright 2019 The Alcor Authors.\n-\n-Licensed under the Apache License, Version 2.0 (the \"License\");\n-        you may not use this file except in compliance with the License.\n-        You may obtain a copy of the License at\n-\n-        http://www.apache.org/licenses/LICENSE-2.0\n-\n-        Unless required by applicable law or agreed to in writing, software\n-        distributed under the License is distributed on an \"AS IS\" BASIS,\n-        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-        See the License for the specific language governing permissions and\n-        limitations under the License.\n-*/\n-package com.futurewei.alcor.portmanager.controller;\n-\n-import com.futurewei.alcor.portmanager.config.UnitTestConfig;\n-import com.futurewei.alcor.web.entity.ip.IpAddrRequest;\n-import com.futurewei.alcor.web.entity.ip.IpAddrState;\n-import org.junit.jupiter.api.Test;\n-import org.mockito.Mockito;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n-import org.springframework.boot.test.context.SpringBootTest;\n-import org.springframework.context.annotation.ComponentScan;\n-import org.springframework.http.HttpHeaders;\n-import org.springframework.http.MediaType;\n-import org.springframework.test.web.servlet.MockMvc;\n-import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n-\n-import static com.futurewei.alcor.portmanager.util.ResourceBuilder.buildIpv4AddrRequest;\n-import static org.mockito.ArgumentMatchers.eq;\n-import static org.mockito.ArgumentMatchers.refEq;\n-import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;\n-import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n-import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n-\n-@ComponentScan(value = \"com.futurewei.alcor.common.test.config\")\n-@SpringBootTest\n-@AutoConfigureMockMvc\n-public class UpdatePortTest extends MockRestClientAndRepository {\n-    @Autowired\n-    private MockMvc mockMvc;\n-\n-    private String updatePortUrl = \"/project/\" + UnitTestConfig.projectId + \"/ports\" + \"/\" + UnitTestConfig.portId1;\n-    private String updatePortBulkUrl = \"/project/\" + UnitTestConfig.projectId + \"/ports/bulk\";\n-\n-    @Test\n-    public void updateFixedIpsTest() throws Exception {\n-        IpAddrRequest ipAddrRequest = new IpAddrRequest();\n-        ipAddrRequest.setRangeId(UnitTestConfig.rangeId);\n-        ipAddrRequest.setSubnetId(UnitTestConfig.subnetId);\n-        ipAddrRequest.setIpVersion(UnitTestConfig.ipv4Version);\n-        ipAddrRequest.setVpcId(UnitTestConfig.vpcId);\n-        ipAddrRequest.setState(null);\n-        ipAddrRequest.setIp(UnitTestConfig.ip1);\n-\n-        Mockito.when(ipManagerRestClient.allocateIpAddress(refEq(ipAddrRequest)))\n-                .thenReturn(buildIpv4AddrRequest(UnitTestConfig.ip1));\n-\n-        ipAddrRequest.setIp(UnitTestConfig.ip2);\n-        Mockito.when(ipManagerRestClient.allocateIpAddress(refEq(ipAddrRequest)))\n-                .thenReturn(buildIpv4AddrRequest(UnitTestConfig.ip2));\n-\n-        this.mockMvc.perform(put(updatePortUrl)\n-                .content(UnitTestConfig.updateFixedIps)\n-                .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON))\n-                .andDo(print())\n-                .andExpect(status().isOk())\n-                .andExpect(MockMvcResultMatchers.jsonPath(\"$.port.id\").value(UnitTestConfig.portId1))\n-                .andExpect(MockMvcResultMatchers.jsonPath(\"$.port.fixed_ips[0].ip_address\").value(UnitTestConfig.ip2));\n-    }\n-\n-    @Test\n-    public void updateMacAddressTest() throws Exception {\n-        this.mockMvc.perform(put(updatePortUrl)\n-                .content(UnitTestConfig.updateMacAddress)\n-                .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON))\n-                .andDo(print())\n-                .andExpect(status().isOk())\n-                .andExpect(MockMvcResultMatchers.jsonPath(\"$.port.id\").value(UnitTestConfig.portId1))\n-                .andExpect(MockMvcResultMatchers.jsonPath(\"$.port.mac_address\").value(UnitTestConfig.mac2));\n-    }\n-\n-    @Test\n-    public void updateSecurityGroupsTest() throws Exception {\n-        this.mockMvc.perform(put(updatePortUrl)\n-                .content(UnitTestConfig.updateSecurityGroups)\n-                .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON))\n-                .andDo(print())\n-                .andExpect(status().isOk())\n-                .andExpect(MockMvcResultMatchers.jsonPath(\"$.port.id\").value(UnitTestConfig.portId1))\n-                .andExpect(MockMvcResultMatchers.jsonPath(\"$.port.security_groups[0]\").value(UnitTestConfig.securityGroupId2));\n-    }\n-\n-    @Test\n-    public void updateNameTest() throws Exception {\n-        this.mockMvc.perform(put(updatePortUrl)\n-                .content(UnitTestConfig.updateName)\n-                .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON))\n-                .andDo(print())\n-                .andExpect(status().isOk())\n-                .andExpect(MockMvcResultMatchers.jsonPath(\"$.port.id\").value(UnitTestConfig.portId1))\n-                .andExpect(MockMvcResultMatchers.jsonPath(\"$.port.name\").value(UnitTestConfig.portName2));\n-    }\n-\n-    @Test\n-    public void updateAdminStateTest() throws Exception {\n-        this.mockMvc.perform(put(updatePortUrl)\n-                .content(UnitTestConfig.updateAdminState)\n-                .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON))\n-                .andDo(print())\n-                .andExpect(status().isOk())\n-                .andExpect(MockMvcResultMatchers.jsonPath(\"$.port.id\").value(UnitTestConfig.portId1))\n-                .andExpect(MockMvcResultMatchers.jsonPath(\"$.port.admin_state_up\").value(UnitTestConfig.adminState2));\n-    }\n-\n-    @Test\n-    public void updateBindingHostIdTest() throws Exception {\n-        this.mockMvc.perform(put(updatePortUrl)\n-                .content(UnitTestConfig.updateBindingHost)\n-                .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON))\n-                .andDo(print())\n-                .andExpect(status().isOk())\n-                .andExpect(MockMvcResultMatchers.jsonPath(\"$.port.id\").value(UnitTestConfig.portId1))\n-                .andExpect(MockMvcResultMatchers.jsonPath(\"$.port.binding:host_id\").value(UnitTestConfig.nodeId2));\n-    }\n-\n-    //@Test\n-    public void updateBindingProfileTest() throws Exception {\n-        mockRestClientsAndRepositoryOperations();\n-\n-        this.mockMvc.perform(put(updatePortUrl)\n-                .content(UnitTestConfig.updateBindingProfile)\n-                .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON))\n-                .andDo(print())\n-                .andExpect(status().isOk())\n-                .andExpect(MockMvcResultMatchers.jsonPath(\"$.port.id\").value(UnitTestConfig.portId1))\n-                .andExpect(MockMvcResultMatchers.jsonPath(\"$.port.binding:profile\").value(UnitTestConfig.bindingProfile2));\n-    }\n-\n-    @Test\n-    public void updateBindingVnicTypeTest() throws Exception {\n-        this.mockMvc.perform(put(updatePortUrl)\n-                .content(UnitTestConfig.updateBindingVnicType)\n-                .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON))\n-                .andDo(print())\n-                .andExpect(status().isOk())\n-                .andExpect(MockMvcResultMatchers.jsonPath(\"$.port.id\").value(UnitTestConfig.portId1))\n-                .andExpect(MockMvcResultMatchers.jsonPath(\"$.port.binding:vnic_type\").value(UnitTestConfig.bindingVnicType2));\n-    }\n-\n-    @Test\n-    public void updateDescriptionTest() throws Exception {\n-        this.mockMvc.perform(put(updatePortUrl)\n-                .content(UnitTestConfig.updateDescription)\n-                .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON))\n-                .andDo(print())\n-                .andExpect(status().isOk())\n-                .andExpect(MockMvcResultMatchers.jsonPath(\"$.port.id\").value(UnitTestConfig.portId1))\n-                .andExpect(MockMvcResultMatchers.jsonPath(\"$.port.description\").value(UnitTestConfig.description2));\n-    }\n-\n-    @Test\n-    public void updateDeviceIdTest() throws Exception {\n-        this.mockMvc.perform(put(updatePortUrl)\n-                .content(UnitTestConfig.updateDeviceId)\n-                .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON))\n-                .andDo(print())\n-                .andExpect(status().isOk())\n-                .andExpect(MockMvcResultMatchers.jsonPath(\"$.port.id\").value(UnitTestConfig.portId1))\n-                .andExpect(MockMvcResultMatchers.jsonPath(\"$.port.device_id\").value(UnitTestConfig.deviceId2));\n-    }\n-\n-    @Test\n-    public void updateDeviceOwnerTest() throws Exception {\n-        this.mockMvc.perform(put(updatePortUrl)\n-                .content(UnitTestConfig.updateDeviceOwner)\n-                .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON))\n-                .andDo(print())\n-                .andExpect(status().isOk())\n-                .andExpect(MockMvcResultMatchers.jsonPath(\"$.port.id\").value(UnitTestConfig.portId1))\n-                .andExpect(MockMvcResultMatchers.jsonPath(\"$.port.device_owner\").value(UnitTestConfig.deviceOwner2));\n-    }\n-\n-    @Test\n-    public void updateDnsDomainTest() throws Exception {\n-        this.mockMvc.perform(put(updatePortUrl)\n-                .content(UnitTestConfig.updateDnsDomain)\n-                .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON))\n-                .andDo(print())\n-                .andExpect(status().isOk())\n-                .andExpect(MockMvcResultMatchers.jsonPath(\"$.port.id\").value(UnitTestConfig.portId1))\n-                .andExpect(MockMvcResultMatchers.jsonPath(\"$.port.dns_domain\").value(UnitTestConfig.dnsDomain2));\n-    }\n-\n-    @Test\n-    public void updateDnsNameTest() throws Exception {\n-        this.mockMvc.perform(put(updatePortUrl)\n-                .content(UnitTestConfig.updateDnsName)\n-                .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON))\n-                .andDo(print())\n-                .andExpect(status().isOk())\n-                .andExpect(MockMvcResultMatchers.jsonPath(\"$.port.id\").value(UnitTestConfig.portId1))\n-                .andExpect(MockMvcResultMatchers.jsonPath(\"$.port.dns_name\").value(UnitTestConfig.dnsName2));\n-    }\n-\n-    @Test\n-    public void updateQosPolicyIdTest() throws Exception {\n-        this.mockMvc.perform(put(updatePortUrl)\n-                .content(UnitTestConfig.updateQosPolicyId)\n-                .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON))\n-                .andDo(print())\n-                .andExpect(status().isOk())\n-                .andExpect(MockMvcResultMatchers.jsonPath(\"$.port.id\").value(UnitTestConfig.portId1))\n-                .andExpect(MockMvcResultMatchers.jsonPath(\"$.port.qos_policy_id\").value(UnitTestConfig.qosPolicyId2));\n-    }\n-\n-    @Test\n-    public void updatePortSecurityEnabledTest() throws Exception {\n-        this.mockMvc.perform(put(updatePortUrl)\n-                .content(UnitTestConfig.updatePortSecurityEnabled)\n-                .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON))\n-                .andDo(print())\n-                .andExpect(status().isOk())\n-                .andExpect(MockMvcResultMatchers.jsonPath(\"$.port.id\").value(UnitTestConfig.portId1))\n-                .andExpect(MockMvcResultMatchers.jsonPath(\"$.port.port_security_enabled\").value(UnitTestConfig.portSecurityEnabled2));\n-    }\n-\n-    @Test\n-    public void updateMacLearningEnabledTest() throws Exception {\n-        this.mockMvc.perform(put(updatePortUrl)\n-                .content(UnitTestConfig.updateMacLearningEnabled)\n-                .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON))\n-                .andDo(print())\n-                .andExpect(status().isOk())\n-                .andExpect(MockMvcResultMatchers.jsonPath(\"$.port.id\").value(UnitTestConfig.portId1))\n-                .andExpect(MockMvcResultMatchers.jsonPath(\"$.port.mac_learning_enabled\").value(UnitTestConfig.macLearningEnabled2));\n-    }\n-\n-    //@Test\n-    public void updateMacAddressAndFixedIpsBulkTest() throws Exception {\n-        this.mockMvc.perform(put(updatePortBulkUrl)\n-                .content(UnitTestConfig.updatePortBulk)\n-                .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON))\n-                .andDo(print())\n-                .andExpect(status().isOk())\n-                .andExpect(MockMvcResultMatchers.jsonPath(\"$.ports[0].id\").value(UnitTestConfig.portId1))\n-                .andExpect(MockMvcResultMatchers.jsonPath(\"$.ports[1].id\").value(UnitTestConfig.portId2))\n-                .andExpect(MockMvcResultMatchers.jsonPath(\"$.ports[0].mac_address\").value(UnitTestConfig.mac2))\n-                .andExpect(MockMvcResultMatchers.jsonPath(\"$.ports[1].mac_address\").value(UnitTestConfig.mac2))\n-                .andExpect(MockMvcResultMatchers.jsonPath(\"$.ports[0].fixed_ips[0].ip_address\").value(UnitTestConfig.ip2))\n-                .andExpect(MockMvcResultMatchers.jsonPath(\"$.ports[1].fixed_ips[0].ip_address\").value(UnitTestConfig.ip2));\n-    }\n-}\n+///*", "originalCommit": "b0c1b9d9a48041b155eaa5569fa59adda4918764", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}