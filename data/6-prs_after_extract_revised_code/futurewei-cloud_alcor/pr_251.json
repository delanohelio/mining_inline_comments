{"pr_number": 251, "pr_title": "[Microservice] Network ACL Manager", "pr_createdAt": "2020-06-16T09:57:00Z", "pr_url": "https://github.com/futurewei-cloud/alcor/pull/251", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc3MTM2NA==", "url": "https://github.com/futurewei-cloud/alcor/pull/251#discussion_r440771364", "bodyText": "Could you please add swagger/SwaggerJsonTest.java to the NACL UT?\nOne example is https://github.com/futurewei-cloud/alcor/blob/master/services/security_group_manager/src/test/java/com/futurewei/alcor/securitygroup/swagger/SwaggerJsonTest.java.", "author": "xieus", "createdAt": "2020-06-16T11:12:02Z", "path": "services/network_acl_manager/src/test/java/com/futurewei/alcor/networkaclmanager/config/UnitTestConfig.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.networkaclmanager.config;\n+\n+public class UnitTestConfig {", "originalCommit": "d1be9b8555ff3fe843c232e41d89a3ff6acfe03b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "806deaf830fc0b58566114584f6757a21000f9f0", "chunk": "diff --git a/services/network_acl_manager/src/test/java/com/futurewei/alcor/networkaclmanager/config/UnitTestConfig.java b/services/network_acl_manager/src/test/java/com/futurewei/alcor/networkaclmanager/config/UnitTestConfig.java\nindex 7719d948..49f2ac01 100644\n--- a/services/network_acl_manager/src/test/java/com/futurewei/alcor/networkaclmanager/config/UnitTestConfig.java\n+++ b/services/network_acl_manager/src/test/java/com/futurewei/alcor/networkaclmanager/config/UnitTestConfig.java\n\n@@ -17,12 +17,61 @@ package com.futurewei.alcor.networkaclmanager.config;\n \n public class UnitTestConfig {\n     public static String projectId = \"3d53801c-32ce-4e97-9572-bb966fab628\";\n+\n+    //Network ACL config\n     public static String subnetId1 = \"3d53801c-32ce-4e97-9572-bb966fab628\";\n     public static String subnetId2 = \"3d53801c-32ce-4e97-9572-bb966f76ae1\";\n     public static String networkAclUrl = \"/project/\" + projectId + \"/network-acls\";\n+    public static String networkAclBulkUrl = \"/project/\" + projectId + \"/network-acls/bulk\";\n     public static String vpcId1 = \"3d53801c-32ce-4e97-9572-bb966fac7632\";\n     public static String vpcId2 = \"3d53801c-32ce-4e97-9572-bb966faab241\";\n-    public static String networkAclId = \"3d53801c-32ce-4e97-9572-bb966f77ab4\";\n+    public static String networkAclId1 = \"3d53801c-32ce-4e97-9572-bb966f77ab4\";\n+    public static String networkAclId2 = \"3d53801c-32ce-4e97-9572-bb966f678e1\";\n     public static String networkAclName1 = \"test_network_acl1\";\n     public static String networkAclName2 = \"test_network_acl2\";\n+\n+    //Network ACL Rule config\n+    public static String networkAclRuleId1 = \"3d53801c-32ce-4e97-9572-bb966f88ca4\";\n+    public static String networkAclRuleId2 = \"3d53801c-32ce-4e97-9572-bb966f992b1\";\n+    public static String networkAclRuleName1 = \"test_network_acl_rule1\";\n+    public static String networkAclRuleName2 = \"test_network_acl_rule2\";\n+    public static String networkAclRuleUrl = \"/project/\" + projectId + \"/network-acl-rules\";\n+    public static String networkAclRuleBulkUrl = \"/project/\" + projectId + \"/network-acl-rules/bulk\";\n+    public static Integer number1 = 10;\n+    public static Integer number2 = 20;\n+    public static Integer numberInvalid1 = 32767;\n+    public static Integer numberInvalid2 = -1;\n+    public static String ipv4Prefix1 = \"192.168.1.0/24\";\n+    public static String ipv4Prefix2 = \"192.168.2.0/24\";\n+    public static String ipv6Prefix = \"2001::/16\";\n+    public static String directionIngress = \"ingress\";\n+    public static String directionEgress = \"egress\";\n+    public static String directionInvalid = \"invalid\";\n+    public static String actionDeny = \"deny\";\n+    public static String actionAllow = \"allow\";\n+    public static String actionInvalid = \"invalid\";\n+    public static String protocolTcp = \"tcp\";\n+    public static String protocolUdp = \"udp\";\n+    public static String protocolIcmp = \"icmp\";\n+    public static String protocolIcmpv6 = \"icmpv6\";\n+    public static String protocolInvalid = \"icmpv7\";\n+    public static int portRangeMin1 = 1;\n+    public static int portRangeMin2 = 10;\n+    public static int portRangeMinInvalid1 = 0;\n+    public static int portRangeMinInvalid2 = 65536;\n+    public static int portRangeMax1 = 65535;\n+    public static int portRangeMax2 = 600;\n+    public static int portRangeMaxInvalid1 = 0;\n+    public static int portRangeMaxInvalid2 = 65536;\n+    public static int icmpType1 = 0;\n+    public static int icmpType2 = 1;\n+    public static int icmpTypeInvalid1 = -1;\n+    public static int icmpTypeInvalid2 = 256;\n+    public static int icmpCode1 = 254;\n+    public static int icmpCode2 = 255;\n+    public static int icmpCodeInvalid1 = -1;\n+    public static int icmpCodeInvalid2 = 256;\n+    public static String etherTypeIpv4 = \"ipv4\";\n+    public static String etherTypeIpv6 = \"ipv6\";\n+    public static String etherTypeInvalid = \"ipv7\";\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc3Mzc2NA==", "url": "https://github.com/futurewei-cloud/alcor/pull/251#discussion_r440773764", "bodyText": "As usual, could you please create a doc for this new microservice? Thank you.", "author": "xieus", "createdAt": "2020-06-16T11:16:58Z", "path": "services/network_acl_manager/src/main/java/com/futurewei/alcor/networkaclmanager/controller/NetworkAclController.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.networkaclmanager.controller;\n+\n+import com.futurewei.alcor.networkaclmanager.service.NetworkAclService;\n+import com.futurewei.alcor.web.entity.networkacl.NetworkAclEntity;\n+import com.futurewei.alcor.web.entity.networkacl.NetworkAclWebJson;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.*;\n+\n+import java.util.List;\n+\n+import static com.futurewei.alcor.networkaclmanager.util.RestParameterValidator.checkNetworkAcl;\n+\n+@RestController\n+public class NetworkAclController {\n+    @Autowired\n+    private NetworkAclService networkAclService;\n+\n+    @PostMapping(\"/project/{project_id}/network-acls\")", "originalCommit": "d1be9b8555ff3fe843c232e41d89a3ff6acfe03b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "806deaf830fc0b58566114584f6757a21000f9f0", "chunk": "diff --git a/services/network_acl_manager/src/main/java/com/futurewei/alcor/networkaclmanager/controller/NetworkAclController.java b/services/network_acl_manager/src/main/java/com/futurewei/alcor/networkaclmanager/controller/NetworkAclController.java\nindex 8a218501..f66079b0 100644\n--- a/services/network_acl_manager/src/main/java/com/futurewei/alcor/networkaclmanager/controller/NetworkAclController.java\n+++ b/services/network_acl_manager/src/main/java/com/futurewei/alcor/networkaclmanager/controller/NetworkAclController.java\n\n@@ -16,6 +16,7 @@ Licensed under the Apache License, Version 2.0 (the \"License\");\n package com.futurewei.alcor.networkaclmanager.controller;\n \n import com.futurewei.alcor.networkaclmanager.service.NetworkAclService;\n+import com.futurewei.alcor.web.entity.networkacl.NetworkAclBulkWebJson;\n import com.futurewei.alcor.web.entity.networkacl.NetworkAclEntity;\n import com.futurewei.alcor.web.entity.networkacl.NetworkAclWebJson;\n import org.springframework.beans.factory.annotation.Autowired;\n"}}, {"oid": "806deaf830fc0b58566114584f6757a21000f9f0", "url": "https://github.com/futurewei-cloud/alcor/commit/806deaf830fc0b58566114584f6757a21000f9f0", "message": "add batch interfaces for network acl manager", "committedDate": "2020-06-18T09:48:14Z", "type": "forcePushed"}, {"oid": "21998e3522a68e6a14209b492e7eeeb458a638ce", "url": "https://github.com/futurewei-cloud/alcor/commit/21998e3522a68e6a14209b492e7eeeb458a638ce", "message": "add design doc for network acl manager", "committedDate": "2020-06-28T08:30:36Z", "type": "forcePushed"}, {"oid": "c8b1725368bd4fdb5d8a9eac816128f00d97512a", "url": "https://github.com/futurewei-cloud/alcor/commit/c8b1725368bd4fdb5d8a9eac816128f00d97512a", "message": "add design doc for network acl manager", "committedDate": "2020-06-28T08:44:03Z", "type": "forcePushed"}, {"oid": "dbde5dcaf94c1fdfa97c44609b28b1d237c6eee5", "url": "https://github.com/futurewei-cloud/alcor/commit/dbde5dcaf94c1fdfa97c44609b28b1d237c6eee5", "message": "Undo changes to AsyncExecutor", "committedDate": "2020-07-02T07:52:46Z", "type": "forcePushed"}, {"oid": "c109161fc02e270cce3354f11230ab469edae4d2", "url": "https://github.com/futurewei-cloud/alcor/commit/c109161fc02e270cce3354f11230ab469edae4d2", "message": "network acl manager service", "committedDate": "2020-09-23T01:56:33Z", "type": "commit"}, {"oid": "a9acd37079c11192266fc6976b2453c076b81e53", "url": "https://github.com/futurewei-cloud/alcor/commit/a9acd37079c11192266fc6976b2453c076b81e53", "message": "add some test cases for network acl rule", "committedDate": "2020-09-23T02:12:15Z", "type": "commit"}, {"oid": "e9c95bf1a0280ea0f12ff1e274fa673dc8445c36", "url": "https://github.com/futurewei-cloud/alcor/commit/e9c95bf1a0280ea0f12ff1e274fa673dc8445c36", "message": "add batch interfaces for network acl manager", "committedDate": "2020-09-23T02:12:18Z", "type": "commit"}, {"oid": "05f535514b8b0e9addc673cad9597c45a04a4ef1", "url": "https://github.com/futurewei-cloud/alcor/commit/05f535514b8b0e9addc673cad9597c45a04a4ef1", "message": "add design doc for network acl manager", "committedDate": "2020-09-23T02:12:19Z", "type": "commit"}, {"oid": "8baf5c14c28977edb8a62524573c140c18369a81", "url": "https://github.com/futurewei-cloud/alcor/commit/8baf5c14c28977edb8a62524573c140c18369a81", "message": "add synchronized to all the interfaces that need to start transaction", "committedDate": "2020-09-23T02:12:19Z", "type": "commit"}, {"oid": "1675e6c9acd8d1781b32e2a364a4aff599254d37", "url": "https://github.com/futurewei-cloud/alcor/commit/1675e6c9acd8d1781b32e2a364a4aff599254d37", "message": "Undo changes to AsyncExecutor", "committedDate": "2020-09-23T02:12:21Z", "type": "commit"}, {"oid": "19fd1c71399e6080f624f3448f38423050c21b5e", "url": "https://github.com/futurewei-cloud/alcor/commit/19fd1c71399e6080f624f3448f38423050c21b5e", "message": "Rebase from master", "committedDate": "2020-09-23T02:34:23Z", "type": "forcePushed"}, {"oid": "42d04d5cbc2770c810d11967efb069e6c1c14833", "url": "https://github.com/futurewei-cloud/alcor/commit/42d04d5cbc2770c810d11967efb069e6c1c14833", "message": "Rebase from master", "committedDate": "2020-09-23T02:48:24Z", "type": "commit"}, {"oid": "42d04d5cbc2770c810d11967efb069e6c1c14833", "url": "https://github.com/futurewei-cloud/alcor/commit/42d04d5cbc2770c810d11967efb069e6c1c14833", "message": "Rebase from master", "committedDate": "2020-09-23T02:48:24Z", "type": "forcePushed"}, {"oid": "fb93a99f87d870aaf4cdf5b30051bb89633a57c8", "url": "https://github.com/futurewei-cloud/alcor/commit/fb93a99f87d870aaf4cdf5b30051bb89633a57c8", "message": "Update java version", "committedDate": "2020-09-23T03:34:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDcyNTkxNA==", "url": "https://github.com/futurewei-cloud/alcor/pull/251#discussion_r494725914", "bodyText": "One important comment :-)\nCan you add @DurationStatistics to NACL mgr?", "author": "xieus", "createdAt": "2020-09-25T03:25:02Z", "path": "services/network_acl_manager/src/main/java/com/futurewei/alcor/networkaclmanager/controller/NetworkAclController.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.networkaclmanager.controller;\n+\n+import com.futurewei.alcor.networkaclmanager.service.NetworkAclService;\n+import com.futurewei.alcor.web.entity.networkacl.NetworkAclBulkWebJson;\n+import com.futurewei.alcor.web.entity.networkacl.NetworkAclEntity;\n+import com.futurewei.alcor.web.entity.networkacl.NetworkAclWebJson;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.*;\n+\n+import java.util.List;\n+\n+import static com.futurewei.alcor.networkaclmanager.util.RestParameterValidator.checkNetworkAcl;\n+import static com.futurewei.alcor.networkaclmanager.util.RestParameterValidator.checkProjectId;\n+\n+@RestController\n+public class NetworkAclController {\n+    @Autowired\n+    private NetworkAclService networkAclService;\n+\n+    @PostMapping(\"/project/{project_id}/network-acls\")\n+    @ResponseBody\n+    @ResponseStatus(HttpStatus.CREATED)", "originalCommit": "fb93a99f87d870aaf4cdf5b30051bb89633a57c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc2MTI0Mg==", "url": "https://github.com/futurewei-cloud/alcor/pull/251#discussion_r494761242", "bodyText": "Checking to see what the impact is.", "author": "xieus", "createdAt": "2020-09-25T05:50:04Z", "path": "services/network_acl_manager/src/main/java/com/futurewei/alcor/networkaclmanager/repo/NetworkAclRepository.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.networkaclmanager.repo;\n+\n+import com.futurewei.alcor.common.db.CacheException;\n+import com.futurewei.alcor.common.db.CacheFactory;\n+import com.futurewei.alcor.common.db.ICache;\n+import com.futurewei.alcor.common.db.Transaction;\n+import com.futurewei.alcor.web.entity.networkacl.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Repository;\n+\n+import javax.annotation.PostConstruct;\n+import java.util.*;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+@Repository\n+@ComponentScan(value=\"com.futurewei.alcor.common.db\")\n+public class NetworkAclRepository {\n+    private static final Logger LOG = LoggerFactory.getLogger(NetworkAclRepository.class);\n+\n+    private ICache<String, NetworkAclEntity> networkAclCache;\n+    private ICache<String, NetworkAclRuleEntity> networkAclRuleCache;\n+\n+    public NetworkAclRepository() {\n+\n+    }\n+\n+    public NetworkAclRepository(ICache<String, NetworkAclEntity> networkAclCache, ICache<String, NetworkAclRuleEntity> networkAclRuleCache) {\n+        this.networkAclCache = networkAclCache;\n+        this.networkAclRuleCache = networkAclRuleCache;\n+    }\n+\n+    @Autowired\n+    public NetworkAclRepository(CacheFactory cacheFactory) {\n+        networkAclCache = cacheFactory.getCache(NetworkAclEntity.class);\n+        networkAclRuleCache = cacheFactory.getCache(NetworkAclRuleEntity.class);\n+    }\n+\n+    @PostConstruct\n+    private void init() throws Exception {\n+        LOG.info(\"NetworkAclRepository init done\");\n+    }\n+\n+    private NetworkAclRuleEntity buildDefaultNetworkAclRule(String ipPrefix, String direction) {\n+        NetworkAclRuleEntity networkAclRuleEntity = new NetworkAclRuleEntity();\n+        networkAclRuleEntity.setId(UUID.randomUUID().toString());\n+        networkAclRuleEntity.setNumber(NetworkAclRuleEntity.NUMBER_MAX_VALUE);\n+        networkAclRuleEntity.setIpPrefix(ipPrefix);\n+        networkAclRuleEntity.setProtocol(Protocol.ALL.getProtocol());\n+        networkAclRuleEntity.setDirection(direction);\n+        networkAclRuleEntity.setAction(Action.DENY.getAction());\n+\n+        return networkAclRuleEntity;\n+    }\n+\n+    private synchronized void createDefaultNetworkAclRules() throws Exception {\n+        try (Transaction tx = networkAclCache.getTransaction().start()) {\n+            List<NetworkAclRuleEntity> networkAclRules = getNetworkAclRulesByNumber(NetworkAclRuleEntity.NUMBER_MAX_VALUE);\n+\n+            if (networkAclRules == null) {\n+                List<String> ipPrefixes = Arrays.asList(NetworkAclRuleEntity.DEFAULT_IPV4_PREFIX,\n+                        NetworkAclRuleEntity.DEFAULT_IPV6_PREFIX);\n+                Map<String, NetworkAclRuleEntity> networkAclRuleEntityMap = new HashMap<>();\n+\n+                for (String ipPrefix: ipPrefixes) {\n+                    List<Direction> directions = Arrays.asList(Direction.INGRESS,\n+                            Direction.EGRESS);\n+\n+                    for (Direction direction : directions) {\n+                        NetworkAclRuleEntity networkAclRuleEntity =\n+                                buildDefaultNetworkAclRule(ipPrefix, direction.getDirection());\n+                        networkAclRuleEntityMap.put(networkAclRuleEntity.getId(), networkAclRuleEntity);\n+                    }\n+                }\n+\n+                networkAclRuleCache.putAll(networkAclRuleEntityMap);\n+            }\n+\n+            tx.commit();\n+        }\n+    }\n+\n+    public List<NetworkAclRuleEntity> getDefaultNetworkAclRules() throws Exception {\n+        List<NetworkAclRuleEntity> networkAclRules = getNetworkAclRulesByNumber(NetworkAclRuleEntity.NUMBER_MAX_VALUE);\n+        if (networkAclRules.isEmpty()) {\n+            try {\n+                createDefaultNetworkAclRules();\n+            } catch (Exception e) {\n+                LOG.warn(\"Create default Network ACL rules failed\");\n+            }\n+\n+            networkAclRules = getNetworkAclRulesByNumber(NetworkAclRuleEntity.NUMBER_MAX_VALUE);\n+        }\n+\n+        return networkAclRules;\n+    }\n+\n+    public void addNetworkAcl(NetworkAclEntity networkAclEntity) throws CacheException {\n+        LOG.debug(\"Add Network ACL:{}\", networkAclEntity);\n+\n+        networkAclCache.put(networkAclEntity.getId(), networkAclEntity);\n+    }\n+\n+    public void addNetworkAclBulk(List<NetworkAclEntity> networkAclEntities) throws CacheException {\n+        LOG.debug(\"Add Network ACL Bulk:{}\", networkAclEntities);\n+\n+        Map<String, NetworkAclEntity> networkAclEntityMap = networkAclEntities.stream()\n+                .collect(Collectors.toMap(NetworkAclEntity::getId, Function.identity()));\n+        networkAclCache.putAll(networkAclEntityMap);\n+    }\n+\n+    public void deleteNetworkAcl(String networkAclId) throws CacheException {\n+        LOG.debug(\"Delete Network ACL, Network ACL Id:{}\", networkAclId);\n+        networkAclCache.remove(networkAclId);\n+    }\n+\n+    public NetworkAclEntity getNetworkAcl(String networkAclId) throws Exception {\n+        NetworkAclEntity networkAclEntity = networkAclCache.get(networkAclId);\n+        if (networkAclEntity == null) {\n+            return null;\n+        }\n+\n+        List<NetworkAclRuleEntity> networkAclRules =\n+                getNetworkAclRulesByNetworkAclId(networkAclEntity.getId());\n+        if (networkAclRules == null) {\n+            networkAclRules = getDefaultNetworkAclRules();\n+        }\n+\n+        networkAclEntity.setNetworkAclRuleEntities(networkAclRules);\n+\n+        return networkAclEntity;\n+    }\n+\n+    public Map<String, NetworkAclEntity> getAllNetworkAcls() throws Exception {\n+        Map<String, NetworkAclEntity> networkAclEntityMap = networkAclCache.getAll();\n+        if (networkAclEntityMap == null) {\n+            return null;\n+        }\n+\n+        for (Map.Entry<String, NetworkAclEntity> entry: networkAclEntityMap.entrySet()) {\n+            List<NetworkAclRuleEntity> networkAclRules = getNetworkAclRulesByNetworkAclId(entry.getKey());\n+            if (networkAclRules == null) {\n+                networkAclRules = getDefaultNetworkAclRules();\n+            }\n+\n+            entry.getValue().setNetworkAclRuleEntities(networkAclRules);\n+        }\n+\n+        return networkAclEntityMap;\n+    }\n+\n+    public void addNetworkAclRule(NetworkAclRuleEntity networkAclRuleEntity) throws Exception {\n+        LOG.debug(\"Add Network ACL Rule:{}\", networkAclRuleEntity);\n+\n+        networkAclRuleCache.put(networkAclRuleEntity.getId(), networkAclRuleEntity);\n+    }\n+\n+    public void addNetworkAclRuleBulk(List<NetworkAclRuleEntity> networkAclRuleEntities) throws Exception {\n+        LOG.debug(\"Add Network ACL Rule Bulk:{}\", networkAclRuleEntities);\n+\n+        Map<String, NetworkAclRuleEntity> networkAclRuleEntityMap = networkAclRuleEntities.stream()\n+                .collect(Collectors.toMap(NetworkAclRuleEntity::getId, Function.identity()));\n+        networkAclRuleCache.putAll(networkAclRuleEntityMap);\n+    }\n+\n+    public void deleteNetworkAclRule(String networkAclRuleId) throws CacheException {\n+        LOG.debug(\"Delete Network ACL Rule, Network ACL Rule Id:{}\", networkAclRuleId);\n+        networkAclRuleCache.remove(networkAclRuleId);\n+    }\n+\n+    public NetworkAclRuleEntity getNetworkAclRule(String networkAclRuleId) throws CacheException {\n+        return networkAclRuleCache.get(networkAclRuleId);\n+    }\n+\n+    public Map<String, NetworkAclRuleEntity> getAllNetworkAclRules() throws CacheException {\n+        return networkAclRuleCache.getAll();\n+    }\n+\n+    public List<NetworkAclRuleEntity> getNetworkAclRulesByNumber(Integer number) throws CacheException {\n+        List<NetworkAclRuleEntity> networkAclRuleEntities = new ArrayList<>();\n+        //FIXME: not support yet", "originalCommit": "fb93a99f87d870aaf4cdf5b30051bb89633a57c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc2NDY4Mg==", "url": "https://github.com/futurewei-cloud/alcor/pull/251#discussion_r494764682", "bodyText": "Cool \ud83d\udc4d Like it.", "author": "xieus", "createdAt": "2020-09-25T06:01:36Z", "path": "services/network_acl_manager/src/test/java/com/futurewei/alcor/networkaclmanager/controller/CreateNetworkAclRuleTest.java", "diffHunk": "@@ -0,0 +1,381 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.networkaclmanager.controller;\n+\n+import com.futurewei.alcor.networkaclmanager.config.UnitTestConfig;\n+import com.futurewei.alcor.networkaclmanager.repo.NetworkAclRepository;\n+import com.futurewei.alcor.networkaclmanager.util.NetworkAclBuilder;\n+import com.futurewei.alcor.web.entity.networkacl.NetworkAclRuleEntity;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.result.MockMvcResultMatchers;\n+\n+import static com.futurewei.alcor.networkaclmanager.util.NetworkAclRuleBuilder.*;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+@SpringBootTest\n+@AutoConfigureMockMvc\n+@ComponentScan(value = \"com.futurewei.alcor.common.test.config\")\n+public class CreateNetworkAclRuleTest {", "originalCommit": "fb93a99f87d870aaf4cdf5b30051bb89633a57c8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}