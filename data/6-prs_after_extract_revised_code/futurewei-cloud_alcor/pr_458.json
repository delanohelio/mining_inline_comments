{"pr_number": 458, "pr_title": "[Data Plane Mgr] UT Test Automation - Part III", "pr_createdAt": "2020-10-30T22:48:38Z", "pr_url": "https://github.com/futurewei-cloud/alcor/pull/458", "timeline": [{"oid": "24b9b76ae349f277ac55f1cc11e81636d1569b6d", "url": "https://github.com/futurewei-cloud/alcor/commit/24b9b76ae349f277ac55f1cc11e81636d1569b6d", "message": "commit message", "committedDate": "2020-10-07T21:49:22Z", "type": "commit"}, {"oid": "08ec421662ef56559a388e6c7308aa47cfd07a6b", "url": "https://github.com/futurewei-cloud/alcor/commit/08ec421662ef56559a388e6c7308aa47cfd07a6b", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master", "committedDate": "2020-10-07T22:00:25Z", "type": "commit"}, {"oid": "2507b8fc44a4ca94da310b73c11453cec9f2504b", "url": "https://github.com/futurewei-cloud/alcor/commit/2507b8fc44a4ca94da310b73c11453cec9f2504b", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master", "committedDate": "2020-10-15T17:12:49Z", "type": "commit"}, {"oid": "8cab6bfa9573926c29b9f8dbbeab732a9de1da7e", "url": "https://github.com/futurewei-cloud/alcor/commit/8cab6bfa9573926c29b9f8dbbeab732a9de1da7e", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master", "committedDate": "2020-10-15T23:33:06Z", "type": "commit"}, {"oid": "d9d2a5822429286e2b01ce0842f16cb70dc5168f", "url": "https://github.com/futurewei-cloud/alcor/commit/d9d2a5822429286e2b01ce0842f16cb70dc5168f", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master", "committedDate": "2020-10-16T16:57:50Z", "type": "commit"}, {"oid": "daba98ee8949b91b2b77f74c6fbb30529355ee51", "url": "https://github.com/futurewei-cloud/alcor/commit/daba98ee8949b91b2b77f74c6fbb30529355ee51", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master", "committedDate": "2020-10-20T00:03:13Z", "type": "commit"}, {"oid": "b813735c5032b70928a2304007875824f5ccedca", "url": "https://github.com/futurewei-cloud/alcor/commit/b813735c5032b70928a2304007875824f5ccedca", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master", "committedDate": "2020-10-22T17:43:05Z", "type": "commit"}, {"oid": "9e649da5263b3e609ee4e4c21c3edac6eac09f2e", "url": "https://github.com/futurewei-cloud/alcor/commit/9e649da5263b3e609ee4e4c21c3edac6eac09f2e", "message": " update", "committedDate": "2020-10-23T01:13:41Z", "type": "commit"}, {"oid": "add587475fe3ade06c29b61fe062edd51f629ce0", "url": "https://github.com/futurewei-cloud/alcor/commit/add587475fe3ade06c29b61fe062edd51f629ce0", "message": "update", "committedDate": "2020-10-23T10:27:49Z", "type": "commit"}, {"oid": "fc32dde750943a6a0e25c27049fe2189a49b1252", "url": "https://github.com/futurewei-cloud/alcor/commit/fc32dde750943a6a0e25c27049fe2189a49b1252", "message": "update", "committedDate": "2020-10-23T22:48:14Z", "type": "commit"}, {"oid": "9b4e7171d324a2550e5df3e159976a6e37796512", "url": "https://github.com/futurewei-cloud/alcor/commit/9b4e7171d324a2550e5df3e159976a6e37796512", "message": "update", "committedDate": "2020-10-28T19:29:25Z", "type": "commit"}, {"oid": "fd9a9847b0f42c5a7fd089ea09fa6f24233d008e", "url": "https://github.com/futurewei-cloud/alcor/commit/fd9a9847b0f42c5a7fd089ea09fa6f24233d008e", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master", "committedDate": "2020-10-28T19:40:54Z", "type": "commit"}, {"oid": "e44875aa2fa685b2252647f413c704dce7a21611", "url": "https://github.com/futurewei-cloud/alcor/commit/e44875aa2fa685b2252647f413c704dce7a21611", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master", "committedDate": "2020-10-29T18:42:59Z", "type": "commit"}, {"oid": "8d43f2c18ce09a7e8841102fc1dbed24477b4e6d", "url": "https://github.com/futurewei-cloud/alcor/commit/8d43f2c18ce09a7e8841102fc1dbed24477b4e6d", "message": "update", "committedDate": "2020-10-30T22:41:38Z", "type": "commit"}, {"oid": "98dcf0dbb1c950ee71a0d663a7042cbce30d24ed", "url": "https://github.com/futurewei-cloud/alcor/commit/98dcf0dbb1c950ee71a0d663a7042cbce30d24ed", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master", "committedDate": "2020-10-30T22:44:46Z", "type": "commit"}, {"oid": "b78dc9067badc5f44b32e2aef12e59c41d9825fa", "url": "https://github.com/futurewei-cloud/alcor/commit/b78dc9067badc5f44b32e2aef12e59c41d9825fa", "message": "Merge branch 'new_master' into feature/dpm_auto_test_third_version\n\n# Conflicts:\n#\tservices/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/utils/GoalStateManager.java", "committedDate": "2020-10-30T22:46:44Z", "type": "commit"}, {"oid": "606dc9400b6378ca79a15eea08539e0ff76dd114", "url": "https://github.com/futurewei-cloud/alcor/commit/606dc9400b6378ca79a15eea08539e0ff76dd114", "message": "update", "committedDate": "2020-11-02T22:58:54Z", "type": "commit"}, {"oid": "ecab50a6787ed4330f3562c4c424565d5439379d", "url": "https://github.com/futurewei-cloud/alcor/commit/ecab50a6787ed4330f3562c4c424565d5439379d", "message": "update", "committedDate": "2020-11-03T04:41:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzMDg4MQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/458#discussion_r516430881", "bodyText": "I think we could revert the change as it is related to PR #418 .", "author": "xieus", "createdAt": "2020-11-03T05:10:13Z", "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/utils/GoalStateManager.java", "diffHunk": "@@ -46,418 +46,418 @@\n public class GoalStateManager {\n     public static final int FORMAT_REVISION_NUMBER = 1;\n     @Autowired private GoalStateService goalStateService;\n-  private static final Logger LOG = LoggerFactory.getLogger();\n-\n-  private void printNetworkConfiguration(NetworkConfiguration networkConfiguration)\n-  {\n-    LOG.log(Level.INFO,\n-            \"### networkConf str: \"+networkConfiguration.toString());\n-    ExclusionStrategy myExclusionStrategy =\n-            new ExclusionStrategy() {\n-              @Override\n-              public boolean shouldSkipField(FieldAttributes fa) {\n-                return fa.getName().equals(\"tenantId\");\n-              }\n-\n-              @Override\n-              public boolean shouldSkipClass(Class<?> clazz) {\n-                return false;\n-              }\n-            };\n-    Gson gson = new GsonBuilder().setExclusionStrategies(myExclusionStrategy).create();\n-    LOG.log(Level.INFO,\"###############\");\n-    LOG.log(Level.INFO,gson.toJson(networkConfiguration));\n-  }\n-  /**\n-   * transform client of dpm msg to aca protobuf format\n-   *\n-   * @param networkConfiguration  msg to be transformmed\n-   * @return Map<String, Goalstate.GoalState>\n-   * @throws RuntimeException Various exceptions that may occur during the send process\n-   */\n-  public Map<String, Goalstate.GoalState> transformNorthToSouth(\n-      NetworkConfiguration networkConfiguration) throws RuntimeException {\n-    // print entry input\n-    printNetworkConfiguration(networkConfiguration);\n-\n-    Map<String, Set<String>> portsInSameSubnetMap = new HashMap<>();\n-\n-    Map<String, Set<NeighborInfo>> neighborInfoInSameSubenetMap = new HashMap<>();\n-\n-    InternalPortEntity[] portStatesArr =\n-        networkConfiguration.getPortEntities().toArray(new InternalPortEntity[0]);\n-    InternalSubnetEntity[] subnetArr =\n-        networkConfiguration.getSubnets().toArray(new InternalSubnetEntity[0]);\n-    com.futurewei.alcor.web.entity.vpc.VpcEntity[] vpcArr =\n-        networkConfiguration.getVpcs().toArray(new com.futurewei.alcor.web.entity.vpc.VpcEntity[0]);\n-\n-    // TODO need to v2 subnet and vpc part when logic is\n-    //  clear and integration done\n-    Map<String, List<InternalPortEntity>> mapGroupedByHostIp = new HashMap();\n-    Map<String, InternalSubnetEntity> subnetMap = new HashMap<>();\n-    Map<String, InternalPortEntity> portMap = new HashMap<>();\n-    Map<String, com.futurewei.alcor.web.entity.vpc.VpcEntity> vpcMap = new HashMap<>();\n-    // construct map from list\n-    for (InternalSubnetEntity s : subnetArr) {\n-      subnetMap.put(s.getId(), s);\n+    private static final Logger LOG = LoggerFactory.getLogger();\n+\n+    private void printNetworkConfiguration(NetworkConfiguration networkConfiguration)", "originalCommit": "ecab50a6787ed4330f3562c4c424565d5439379d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjg1NDM3NQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/458#discussion_r516854375", "bodyText": "Sure", "author": "kevin-zhonghao", "createdAt": "2020-11-03T17:55:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzMDg4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgzNzk2OQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/458#discussion_r517837969", "bodyText": "I think we could revert the change as it is related to PR #418 .\n\n@kevin-zhonghao I think this PR still contains payload from PR #418, which should not be included in this PR.", "author": "xieus", "createdAt": "2020-11-05T07:24:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzMDg4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "a9c3a47d74ba5fffbe13746ee4e33af0fbb394fe", "chunk": "diff --git a/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/utils/GoalStateManager.java b/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/utils/GoalStateManager.java\nindex d99d46ec..738da1cf 100644\n--- a/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/utils/GoalStateManager.java\n+++ b/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/utils/GoalStateManager.java\n\n@@ -46,418 +46,418 @@ import static com.futurewei.alcor.schema.Port.PortConfiguration.FixedIp;\n public class GoalStateManager {\n     public static final int FORMAT_REVISION_NUMBER = 1;\n     @Autowired private GoalStateService goalStateService;\n-    private static final Logger LOG = LoggerFactory.getLogger();\n-\n-    private void printNetworkConfiguration(NetworkConfiguration networkConfiguration)\n-    {\n-        LOG.log(Level.INFO,\n-                \"### networkConf str: \"+networkConfiguration.toString());\n-        ExclusionStrategy myExclusionStrategy =\n-                new ExclusionStrategy() {\n-                    @Override\n-                    public boolean shouldSkipField(FieldAttributes fa) {\n-                        return fa.getName().equals(\"tenantId\");\n-                    }\n-\n-                    @Override\n-                    public boolean shouldSkipClass(Class<?> clazz) {\n-                        return false;\n-                    }\n-                };\n-        Gson gson = new GsonBuilder().setExclusionStrategies(myExclusionStrategy).create();\n-        LOG.log(Level.INFO,\"###############\");\n-        LOG.log(Level.INFO,gson.toJson(networkConfiguration));\n-    }\n-    /**\n-     * transform client of dpm msg to aca protobuf format\n-     *\n-     * @param networkConfiguration  msg to be transformmed\n-     * @return Map<String, Goalstate.GoalState>\n-     * @throws RuntimeException Various exceptions that may occur during the send process\n-     */\n-    public Map<String, Goalstate.GoalState> transformNorthToSouth(\n-            NetworkConfiguration networkConfiguration) throws RuntimeException {\n-        // print entry input\n-        printNetworkConfiguration(networkConfiguration);\n-\n-        Map<String, Set<String>> portsInSameSubnetMap = new HashMap<>();\n-\n-        Map<String, Set<NeighborInfo>> neighborInfoInSameSubenetMap = new HashMap<>();\n-\n-        InternalPortEntity[] portStatesArr =\n-                networkConfiguration.getPortEntities().toArray(new InternalPortEntity[0]);\n-        InternalSubnetEntity[] subnetArr =\n-                networkConfiguration.getSubnets().toArray(new InternalSubnetEntity[0]);\n-        com.futurewei.alcor.web.entity.vpc.VpcEntity[] vpcArr =\n-                networkConfiguration.getVpcs().toArray(new com.futurewei.alcor.web.entity.vpc.VpcEntity[0]);\n-\n-        // TODO need to v2 subnet and vpc part when logic is\n-        //  clear and integration done\n-        Map<String, List<InternalPortEntity>> mapGroupedByHostIp = new HashMap();\n-        Map<String, InternalSubnetEntity> subnetMap = new HashMap<>();\n-        Map<String, InternalPortEntity> portMap = new HashMap<>();\n-        Map<String, com.futurewei.alcor.web.entity.vpc.VpcEntity> vpcMap = new HashMap<>();\n-        // construct map from list\n-        for (InternalSubnetEntity s : subnetArr) {\n-            subnetMap.put(s.getId(), s);\n-        }\n-\n-        for (VpcEntity vpc : vpcArr) {\n-            vpcMap.put(vpc.getId(), vpc);\n-        }\n-        // group nb msg by ip\n-        int portCounter = 0;\n-        for (InternalPortEntity portEntityNB : portStatesArr) {\n-            portMap.put(portEntityNB.getId(), portEntityNB);\n-            String bindingHostIP = portEntityNB.getBindingHostIP();\n-            InternalPortEntity currentPortEntity = portStatesArr[portCounter];\n-            if (!mapGroupedByHostIp.containsKey(bindingHostIP)) {\n-                List<InternalPortEntity> portStates = new ArrayList<>();\n-                portCounter = bindHostWithPorts(portsInSameSubnetMap,\n-                        neighborInfoInSameSubenetMap, mapGroupedByHostIp, subnetMap,\n-                        vpcMap, portCounter, bindingHostIP, currentPortEntity,\n-                        portStates);\n-            } else {\n-                List<InternalPortEntity> portStates = mapGroupedByHostIp.get(bindingHostIP);\n-                portCounter = bindHostWithPorts(portsInSameSubnetMap, neighborInfoInSameSubenetMap, mapGroupedByHostIp, subnetMap, vpcMap, portCounter, bindingHostIP, currentPortEntity, portStates);\n-            }\n-        }\n-\n-        portsInSameSubnetMap.keySet().stream()\n-                .forEach(\n-                        sid -> {\n-                            for (String pid : portsInSameSubnetMap.get(sid)) {\n-                                final Set<NeighborInfo> neighborInfos = neighborInfoInSameSubenetMap.get(sid);\n-                                final InternalPortEntity internalPortEntity = portMap.get(pid);\n-                                if (internalPortEntity == null) {\n-                                    LOG.log(Level.WARNING, (\n-                                            \"portId: \"\n-                                                    + pid\n-                                                    + \" provided in neighbor but NOT in port_internal, skip for now, likely to be dpm client error\"));\n-                                    continue;\n-                                }\n-                                try {\n-                                    final Set<NeighborInfo> neighborInfos3 = new HashSet<>();\n-                                    for (NeighborInfo n : neighborInfos) {\n-                                        if (!n.getHostIp().equals(internalPortEntity.getBindingHostIP()))\n-                                            neighborInfos3.add(n);\n-                                    }\n-\n-                                    if (internalPortEntity.getInternalNeighborInfo1() == null\n-                                            || internalPortEntity.getInternalNeighborInfo1().isEmpty()) {\n-                                        final Set<NeighborInfo> neighborInfos2 = new HashSet<>();\n-                                        neighborInfos2.addAll(neighborInfos3);\n-                                        internalPortEntity.setInternalNeighborInfo1(neighborInfos2);\n-                                    } else {\n-                                        final Set<NeighborInfo> neighborInfos1 =\n-                                                internalPortEntity.getInternalNeighborInfo1();\n-                                        neighborInfos1.addAll(neighborInfos3);\n-                                        internalPortEntity.setInternalNeighborInfo1(neighborInfos);\n-                                    }\n-                                } catch (Exception e) {\n-                                    e.printStackTrace();\n-                                    LOG.log(Level.WARNING,\n-                                            e.getMessage());\n-                                    throw new DPMFailureException(e.getMessage());\n-                                }\n-                            }\n-                        });\n-\n-        // construct sb msg by ip\n-        Map<String, Goalstate.GoalState> goalStateHashMap = new HashMap<>();\n-        // TODO would opt this part when perf needed\n-        mapGroupedByHostIp.entrySet().stream()\n-                .forEach(\n-                        eachGSOnSingleIP -> {\n-                            Set<PortState> portStateHashSet = new HashSet<>();\n-                            Set<Subnet.SubnetState> subnetStateSet = new HashSet();\n-                            Set<Vpc.VpcState> vpcStateSet = new HashSet();\n-                            List<DHCP.DHCPState> dhcpStateList = new ArrayList();\n-\n-                            final List<InternalPortEntity> internalPortEntitySet = eachGSOnSingleIP.getValue();\n-                            boolean m = false;\n-                            internalPortEntitySet.stream()\n-                                    .forEach(\n-                                            portStateWithEverythingFilledNB -> {\n-                                                Set<Port.PortConfiguration.HostInfo> neighborSB = new HashSet();\n-                                                if (portStateWithEverythingFilledNB.getInternalNeighborInfo1() != null) {\n-                                                    neighborSB = new HashSet();\n-                                                    for (NeighborInfo neighborInfo :\n-                                                            portStateWithEverythingFilledNB.getInternalNeighborInfo1()) {\n-                                                        Port.PortConfiguration.HostInfo build =\n-                                                                Port.PortConfiguration.HostInfo.newBuilder()\n-                                                                        .setIpAddress(neighborInfo.getHostIp())\n-                                                                        .setMacAddress(neighborInfo.getPortId())\n-                                                                        .build();\n-                                                        neighborSB.add(build);\n-                                                    }\n-                                                }\n-                                                List<FixedIp> fixedIps = new ArrayList();\n-\n-                                                for (PortEntity.FixedIp fixedIp :\n-                                                        portStateWithEverythingFilledNB.getFixedIps()) {\n-                                                    FixedIp fixedIp1 =\n-                                                            FixedIp.newBuilder()\n-                                                                    .setIpAddress(fixedIp.getIpAddress())\n-                                                                    .setSubnetId(fixedIp.getSubnetId())\n-                                                                    .build();\n-                                                    fixedIps.add(fixedIp1);\n-                                                    DHCP.DHCPConfiguration dhcpConfiguration=DHCP.DHCPConfiguration.newBuilder()\n-                                                            .setRevisionNumber(FORMAT_REVISION_NUMBER)\n-                                                            .setFormatVersion(FORMAT_REVISION_NUMBER)\n-                                                            .setSubnetId(fixedIp.getSubnetId())\n-                                                            .setMacAddress(portStateWithEverythingFilledNB.getMacAddress())\n-                                                            .setIpv4Address(fixedIp.getIpAddress())\n-                                                            .build();\n-                                                    DHCP.DHCPState dhcpState= DHCP.DHCPState.newBuilder()\n-                                                            .setConfiguration(dhcpConfiguration)\n-                                                            .build();\n-                                                    dhcpStateList.add(dhcpState);\n-                                                }\n-                                                String name= portStateWithEverythingFilledNB.getName()==null\n-                                                        ?\"\":portStateWithEverythingFilledNB.getName();\n-\n-\n-                                                Port.PortConfiguration portConfiguration =\n-                                                        Port.PortConfiguration.newBuilder()\n-                                                                .setName(name)\n-                                                                .setProjectId(portStateWithEverythingFilledNB.getProjectId())\n-                                                                .setVpcId(\n-                                                                        portStateWithEverythingFilledNB\n-                                                                                .getSubnetEntities()\n-                                                                                .iterator()\n-                                                                                .next()\n-                                                                                .getVpcId())\n-                                                                .setFormatVersion(FORMAT_REVISION_NUMBER)\n-                                                                .setAdminStateUp(true)\n-                                                                .setMacAddress(portStateWithEverythingFilledNB.getMacAddress())\n-                                                                .setRevisionNumber(FORMAT_REVISION_NUMBER)\n-                                                                .addAllFixedIps(fixedIps)\n-                                                                .buildPartial();\n-                                                // since dpm has to do everything including neighbor in 1 shot\n-                                                if (portStateHashSet.size() < neighborSB.size()) {\n-                                                    for (Port.PortConfiguration.HostInfo h : neighborSB) {\n-                                                        String pid = h.getMacAddress();\n-                                                        Port.PortConfiguration portConfiguration1 =\n-                                                                portConfiguration\n-                                                                        .toBuilder()\n-                                                                        .setNetworkTypeValue(Common.NetworkType.VXLAN_VALUE)\n-                                                                        .setId(pid)\n-                                                                        .setHostInfo(h)\n-                                                                        .setMessageTypeValue(Common.MessageType.DELTA_VALUE)\n-                                                                        .build();\n-                                                        final PortState portStateSB =\n-                                                                PortState.newBuilder()\n-                                                                        .setConfiguration(portConfiguration1)\n-                                                                        .setOperationType(Common.OperationType.NEIGHBOR_CREATE_UPDATE)\n-                                                                        .build();\n-                                                        portStateHashSet.add(portStateSB);\n-                                                    }\n-                                                }\n-                                                Port.PortConfiguration portConfiguration2 =\n-                                                        portConfiguration\n-                                                                .toBuilder()\n-                                                                .setId(portStateWithEverythingFilledNB.getId())\n-                                                                .setNetworkTypeValue(Common.NetworkType.VXLAN_VALUE)\n-                                                                .setMessageTypeValue(Common.MessageType.FULL_VALUE)\n-                                                                .build();\n-\n-                                                final PortState portStateSB =\n-                                                        PortState.newBuilder()\n-                                                                .setConfiguration(portConfiguration2)\n-                                                                .setOperationType(Common.OperationType.CREATE)\n-                                                                .build();\n-\n-                                                portStateHashSet.add(portStateSB);\n-\n-                                                // lookup subnet entity\n-                                                for (InternalSubnetEntity subnetEntity1 :\n-                                                        portStateWithEverythingFilledNB.getSubnetEntities()) {\n-                                                    if(subnetEntity1.getTunnelId()==null)\n-                                                    {\n-                                                        throw new ClientOfDPMFailureException(\"empty tunnelId in the subnet payload!\");\n-                                                    }\n-                                                    Subnet.SubnetConfiguration subnetConfiguration =\n-                                                            Subnet.SubnetConfiguration.newBuilder()\n-                                                                    .setId(subnetEntity1.getId())\n-                                                                    .setVpcId(subnetEntity1.getVpcId())\n-                                                                    .setProjectId(portStateWithEverythingFilledNB.getProjectId())\n-                                                                    .setCidr(subnetEntity1.getCidr())\n-                                                                    .setFormatVersion(FORMAT_REVISION_NUMBER)\n-                                                                    .setTunnelId(subnetEntity1.getTunnelId())\n-                                                                    .build();\n-                                                    Subnet.SubnetState subnetState =\n-                                                            Subnet.SubnetState.newBuilder()\n-                                                                    .setConfiguration(subnetConfiguration)\n-                                                                    .buildPartial();\n-                                                    if (networkConfiguration.getRsType().equals(Common.ResourceType.PORT))\n-                                                        subnetState =\n-                                                                subnetState\n-                                                                        .toBuilder()\n-                                                                        .setOperationType(Common.OperationType.INFO)\n-                                                                        .build();\n-                                                    else\n-                                                        subnetState =\n-                                                                subnetState\n-                                                                        .toBuilder()\n-                                                                        .setOperationType(Common.OperationType.CREATE)\n-                                                                        .build();\n-\n-                                                    subnetStateSet.add(subnetState);\n-                                                    if (!(networkConfiguration.getOpType().equals(Common.OperationType.CREATE)\n-                                                            && networkConfiguration\n-                                                            .getRsType()\n-                                                            .equals(Common.ResourceType.PORT))) {\n-                                                        // lookup vpc entity\n-                                                        final VpcEntity vpcEntity = vpcMap.get(subnetEntity1.getVpcId());\n-                                                        Vpc.VpcConfiguration vpcConfiguration =\n-                                                                Vpc.VpcConfiguration.newBuilder()\n-                                                                        .setId(vpcEntity.getId())\n-                                                                        .setCidr(vpcEntity.getCidr())\n-                                                                        .setFormatVersion(FORMAT_REVISION_NUMBER)\n-                                                                        .setRevisionNumber(FORMAT_REVISION_NUMBER)\n-                                                                        .build();\n-                                                        Vpc.VpcState vpcState =\n-                                                                Vpc.VpcState.newBuilder()\n-                                                                        .setConfiguration(vpcConfiguration)\n-                                                                        .setOperationTypeValue(Common.OperationType.CREATE_VALUE)\n-                                                                        .setOperationType(Common.OperationType.CREATE)\n-                                                                        .build();\n-                                                        vpcStateSet.add(vpcState);\n-                                                    }\n-\n-                                                }\n-                                            });\n-                            // leave a dummy security group value since for now there is no impl for sg\n-                            SecurityGroup.SecurityGroupConfiguration securityGroupConfiguration =\n-                                    SecurityGroup.SecurityGroupConfiguration.newBuilder().build();\n-                            final SecurityGroup.SecurityGroupState securityGroupState =\n-                                    SecurityGroup.SecurityGroupState.newBuilder()\n-                                            .setConfiguration(securityGroupConfiguration)\n-                                            .build();\n-                            final Goalstate.GoalState goalState =\n-                                    Goalstate.GoalState.newBuilder()\n-                                            .addAllPortStates(portStateHashSet)\n-                                            .addAllSubnetStates(subnetStateSet)\n-                                            .addSecurityGroupStates(0, securityGroupState)\n-                                            .addAllDhcpStates(dhcpStateList)\n-                                            //                          .addAllVpcStates(vpcStateSet)\n-                                            .build();\n-                            goalStateHashMap.put(eachGSOnSingleIP.getKey(), goalState);\n-                        });\n-        LOG.log(Level.INFO,\n-                goalStateHashMap.entrySet().toString());\n-        return goalStateHashMap;\n+  private static final Logger LOG = LoggerFactory.getLogger();\n+\n+  private void printNetworkConfiguration(NetworkConfiguration networkConfiguration)\n+  {\n+    LOG.log(Level.INFO,\n+            \"### networkConf str: \"+networkConfiguration.toString());\n+    ExclusionStrategy myExclusionStrategy =\n+            new ExclusionStrategy() {\n+              @Override\n+              public boolean shouldSkipField(FieldAttributes fa) {\n+                return fa.getName().equals(\"tenantId\");\n+              }\n+\n+              @Override\n+              public boolean shouldSkipClass(Class<?> clazz) {\n+                return false;\n+              }\n+            };\n+    Gson gson = new GsonBuilder().setExclusionStrategies(myExclusionStrategy).create();\n+    LOG.log(Level.INFO,\"###############\");\n+    LOG.log(Level.INFO,gson.toJson(networkConfiguration));\n+  }\n+  /**\n+   * transform client of dpm msg to aca protobuf format\n+   *\n+   * @param networkConfiguration  msg to be transformmed\n+   * @return Map<String, Goalstate.GoalState>\n+   * @throws RuntimeException Various exceptions that may occur during the send process\n+   */\n+  public Map<String, Goalstate.GoalState> transformNorthToSouth(\n+      NetworkConfiguration networkConfiguration) throws RuntimeException {\n+    // print entry input\n+    printNetworkConfiguration(networkConfiguration);\n+\n+    Map<String, Set<String>> portsInSameSubnetMap = new HashMap<>();\n+\n+    Map<String, Set<NeighborInfo>> neighborInfoInSameSubenetMap = new HashMap<>();\n+\n+    InternalPortEntity[] portStatesArr =\n+        networkConfiguration.getPortEntities().toArray(new InternalPortEntity[0]);\n+    InternalSubnetEntity[] subnetArr =\n+        networkConfiguration.getSubnets().toArray(new InternalSubnetEntity[0]);\n+    com.futurewei.alcor.web.entity.vpc.VpcEntity[] vpcArr =\n+        networkConfiguration.getVpcs().toArray(new com.futurewei.alcor.web.entity.vpc.VpcEntity[0]);\n+\n+    // TODO need to v2 subnet and vpc part when logic is\n+    //  clear and integration done\n+    Map<String, List<InternalPortEntity>> mapGroupedByHostIp = new HashMap();\n+    Map<String, InternalSubnetEntity> subnetMap = new HashMap<>();\n+    Map<String, InternalPortEntity> portMap = new HashMap<>();\n+    Map<String, com.futurewei.alcor.web.entity.vpc.VpcEntity> vpcMap = new HashMap<>();\n+    // construct map from list\n+    for (InternalSubnetEntity s : subnetArr) {\n+      subnetMap.put(s.getId(), s);\n     }\n \n-    /**\n-     * bind Host With Ports\n-     *\n-     * @param neighborInfoInSameSubenetMap same subnet neighborInfo mapping\n-     * @param portsInSameSubnetMap same subnet portId mapping\n-     * @param mapGroupedByHostIp portsList hostIp  mapping\n-     * @param subnetMap\n-     * @param vpcMap\n-     * @param bindingHostIP\n-     * @param currentPortEntity\n-     * @param portStates\n-     */\n-    private int bindHostWithPorts(Map<String, Set<String>> portsInSameSubnetMap\n-            , Map<String, Set<NeighborInfo>> neighborInfoInSameSubenetMap,\n-                                  Map<String, List<InternalPortEntity>> mapGroupedByHostIp,\n-                                  Map<String, InternalSubnetEntity> subnetMap,\n-                                  Map<String, VpcEntity> vpcMap,\n-                                  int portCounter, String bindingHostIP,\n-                                  InternalPortEntity currentPortEntity,\n-                                  List<InternalPortEntity> portStates) {\n-        fillSubnetAndVpcToPort(subnetMap, vpcMap, currentPortEntity, portStates,\n-                neighborInfoInSameSubenetMap, portsInSameSubnetMap);\n-        portCounter++;\n-        mapGroupedByHostIp.put(bindingHostIP, portStates);\n-        return portCounter;\n+    for (VpcEntity vpc : vpcArr) {\n+      vpcMap.put(vpc.getId(), vpc);\n     }\n-\n-    /**\n-     * fill all resources to ports\n-     *\n-     * @param subnetMap hostip and subnetEntity mapping\n-     * @param vpcMap hostIp and Vpc mapping\n-     * @param currentPortEntity\n-     * @param portStates\n-     * @param neighborInfoInSameSubenetMap same subnet neighborInfo mapping\n-     * @param portsInSameSubnetMap same subnet portId mapping\n-     */\n-    private void fillSubnetAndVpcToPort(\n-            Map<String, InternalSubnetEntity> subnetMap,\n-            Map<String, VpcEntity> vpcMap,\n-            InternalPortEntity currentPortEntity,\n-            List<InternalPortEntity> portStates,\n-            Map<String, Set<NeighborInfo>> neighborInfoInSameSubenetMap,\n-            Map<String, Set<String>> portsInSameSubnetMap) {\n-        Set<InternalSubnetEntity> allSubletsInOnePort = new HashSet<>();\n-        Set<VpcEntity> vpcEntityHashSet = new HashSet<>();\n-\n-        for (com.futurewei.alcor.web.entity.port.PortEntity.FixedIp fixedIp :\n-                currentPortEntity.getFixedIps()) {\n-\n-            if (!portsInSameSubnetMap.containsKey(fixedIp.getSubnetId())) {\n-                Set<String> tempPorts = new HashSet<>();\n-                Set<NeighborInfo> tempNeighbor = new HashSet<>();\n-                groupNeighborAndPortsBySubnet(\n-                        currentPortEntity,\n-                        fixedIp,\n-                        tempPorts,\n-                        tempNeighbor,\n-                        neighborInfoInSameSubenetMap,\n-                        portsInSameSubnetMap);\n-\n-            } else {\n-                Set<String> tempPorts = portsInSameSubnetMap.get(fixedIp.getSubnetId());\n-                Set<NeighborInfo> tempNeighbor = neighborInfoInSameSubenetMap.get(fixedIp.getSubnetId());\n-                groupNeighborAndPortsBySubnet(\n-                        currentPortEntity,\n-                        fixedIp,\n-                        tempPorts,\n-                        tempNeighbor,\n-                        neighborInfoInSameSubenetMap,\n-                        portsInSameSubnetMap);\n-            }\n-\n-            final InternalSubnetEntity subnetInfo = subnetMap.get(fixedIp.getSubnetId());\n-            allSubletsInOnePort.add(subnetInfo);\n-            final VpcEntity vpcEntity = vpcMap.get(subnetInfo.getVpcId());\n-            vpcEntityHashSet.add(vpcEntity);\n-        }\n-        currentPortEntity.setSubnetEntities(allSubletsInOnePort);\n-        currentPortEntity.setVpcEntities(vpcEntityHashSet);\n-        portStates.add(currentPortEntity);\n+    // group nb msg by ip\n+    int portCounter = 0;\n+    for (InternalPortEntity portEntityNB : portStatesArr) {\n+      portMap.put(portEntityNB.getId(), portEntityNB);\n+      String bindingHostIP = portEntityNB.getBindingHostIP();\n+      InternalPortEntity currentPortEntity = portStatesArr[portCounter];\n+      if (!mapGroupedByHostIp.containsKey(bindingHostIP)) {\n+        List<InternalPortEntity> portStates = new ArrayList<>();\n+        portCounter = bindHostWithPorts(portsInSameSubnetMap,\n+                neighborInfoInSameSubenetMap, mapGroupedByHostIp, subnetMap,\n+                vpcMap, portCounter, bindingHostIP, currentPortEntity,\n+                portStates);\n+      } else {\n+        List<InternalPortEntity> portStates = mapGroupedByHostIp.get(bindingHostIP);\n+        portCounter = bindHostWithPorts(portsInSameSubnetMap, neighborInfoInSameSubenetMap, mapGroupedByHostIp, subnetMap, vpcMap, portCounter, bindingHostIP, currentPortEntity, portStates);\n+      }\n     }\n \n+    portsInSameSubnetMap.keySet().stream()\n+        .forEach(\n+            sid -> {\n+              for (String pid : portsInSameSubnetMap.get(sid)) {\n+                final Set<NeighborInfo> neighborInfos = neighborInfoInSameSubenetMap.get(sid);\n+                final InternalPortEntity internalPortEntity = portMap.get(pid);\n+                if (internalPortEntity == null) {\n+                  LOG.log(Level.WARNING, (\n+                      \"portId: \"\n+                          + pid\n+                          + \" provided in neighbor but NOT in port_internal, skip for now, likely to be dpm client error\"));\n+                  continue;\n+                }\n+                try {\n+                  final Set<NeighborInfo> neighborInfos3 = new HashSet<>();\n+                  for (NeighborInfo n : neighborInfos) {\n+                    if (!n.getHostIp().equals(internalPortEntity.getBindingHostIP()))\n+                      neighborInfos3.add(n);\n+                  }\n+\n+                  if (internalPortEntity.getInternalNeighborInfo1() == null\n+                      || internalPortEntity.getInternalNeighborInfo1().isEmpty()) {\n+                    final Set<NeighborInfo> neighborInfos2 = new HashSet<>();\n+                    neighborInfos2.addAll(neighborInfos3);\n+                    internalPortEntity.setInternalNeighborInfo1(neighborInfos2);\n+                  } else {\n+                    final Set<NeighborInfo> neighborInfos1 =\n+                        internalPortEntity.getInternalNeighborInfo1();\n+                    neighborInfos1.addAll(neighborInfos3);\n+                    internalPortEntity.setInternalNeighborInfo1(neighborInfos);\n+                  }\n+                } catch (Exception e) {\n+                  e.printStackTrace();\n+                  LOG.log(Level.WARNING,\n+                          e.getMessage());\n+                  throw new DPMFailureException(e.getMessage());\n+                }\n+              }\n+            });\n+\n+    // construct sb msg by ip\n+    Map<String, Goalstate.GoalState> goalStateHashMap = new HashMap<>();\n+    // TODO would opt this part when perf needed\n+    mapGroupedByHostIp.entrySet().stream()\n+        .forEach(\n+            eachGSOnSingleIP -> {\n+              Set<PortState> portStateHashSet = new HashSet<>();\n+              Set<Subnet.SubnetState> subnetStateSet = new HashSet();\n+              Set<Vpc.VpcState> vpcStateSet = new HashSet();\n+                List<DHCP.DHCPState> dhcpStateList = new ArrayList();\n+\n+                final List<InternalPortEntity> internalPortEntitySet = eachGSOnSingleIP.getValue();\n+              boolean m = false;\n+              internalPortEntitySet.stream()\n+                  .forEach(\n+                      portStateWithEverythingFilledNB -> {\n+                        Set<Port.PortConfiguration.HostInfo> neighborSB = new HashSet();\n+                        if (portStateWithEverythingFilledNB.getInternalNeighborInfo1() != null) {\n+                          neighborSB = new HashSet();\n+                          for (NeighborInfo neighborInfo :\n+                              portStateWithEverythingFilledNB.getInternalNeighborInfo1()) {\n+                            Port.PortConfiguration.HostInfo build =\n+                                Port.PortConfiguration.HostInfo.newBuilder()\n+                                    .setIpAddress(neighborInfo.getHostIp())\n+                                    .setMacAddress(neighborInfo.getPortId())\n+                                    .build();\n+                            neighborSB.add(build);\n+                          }\n+                        }\n+                        List<FixedIp> fixedIps = new ArrayList();\n+\n+                        for (PortEntity.FixedIp fixedIp :\n+                            portStateWithEverythingFilledNB.getFixedIps()) {\n+                          FixedIp fixedIp1 =\n+                              FixedIp.newBuilder()\n+                                  .setIpAddress(fixedIp.getIpAddress())\n+                                  .setSubnetId(fixedIp.getSubnetId())\n+                                  .build();\n+                          fixedIps.add(fixedIp1);\n+                            DHCP.DHCPConfiguration dhcpConfiguration=DHCP.DHCPConfiguration.newBuilder()\n+                                    .setRevisionNumber(FORMAT_REVISION_NUMBER)\n+                                    .setFormatVersion(FORMAT_REVISION_NUMBER)\n+                                    .setSubnetId(fixedIp.getSubnetId())\n+                                    .setMacAddress(portStateWithEverythingFilledNB.getMacAddress())\n+                                    .setIpv4Address(fixedIp.getIpAddress())\n+                                    .build();\n+                            DHCP.DHCPState dhcpState= DHCP.DHCPState.newBuilder()\n+                                    .setConfiguration(dhcpConfiguration)\n+                                    .build();\n+                            dhcpStateList.add(dhcpState);\n+                        }\n+                        String name= portStateWithEverythingFilledNB.getName()==null\n+                                ?\"\":portStateWithEverythingFilledNB.getName();\n+\n+\n+                              Port.PortConfiguration portConfiguration =\n+                            Port.PortConfiguration.newBuilder()\n+                                .setName(name)\n+                                .setProjectId(portStateWithEverythingFilledNB.getProjectId())\n+                                .setVpcId(\n+                                    portStateWithEverythingFilledNB\n+                                        .getSubnetEntities()\n+                                        .iterator()\n+                                        .next()\n+                                        .getVpcId())\n+                                .setFormatVersion(FORMAT_REVISION_NUMBER)\n+                                .setAdminStateUp(true)\n+                                .setMacAddress(portStateWithEverythingFilledNB.getMacAddress())\n+                                .setRevisionNumber(FORMAT_REVISION_NUMBER)\n+                                .addAllFixedIps(fixedIps)\n+                                .buildPartial();\n+                        // since dpm has to do everything including neighbor in 1 shot\n+                        if (portStateHashSet.size() < neighborSB.size()) {\n+                          for (Port.PortConfiguration.HostInfo h : neighborSB) {\n+                            String pid = h.getMacAddress();\n+                            Port.PortConfiguration portConfiguration1 =\n+                                portConfiguration\n+                                    .toBuilder()\n+                                    .setNetworkTypeValue(Common.NetworkType.VXLAN_VALUE)\n+                                    .setId(pid)\n+                                    .setHostInfo(h)\n+                                    .setMessageTypeValue(Common.MessageType.DELTA_VALUE)\n+                                    .build();\n+                            final PortState portStateSB =\n+                                PortState.newBuilder()\n+                                    .setConfiguration(portConfiguration1)\n+                                    .setOperationType(Common.OperationType.NEIGHBOR_CREATE_UPDATE)\n+                                    .build();\n+                            portStateHashSet.add(portStateSB);\n+                          }\n+                        }\n+                        Port.PortConfiguration portConfiguration2 =\n+                            portConfiguration\n+                                .toBuilder()\n+                                .setId(portStateWithEverythingFilledNB.getId())\n+                                .setNetworkTypeValue(Common.NetworkType.VXLAN_VALUE)\n+                                .setMessageTypeValue(Common.MessageType.FULL_VALUE)\n+                                .build();\n+\n+                        final PortState portStateSB =\n+                            PortState.newBuilder()\n+                                .setConfiguration(portConfiguration2)\n+                                .setOperationType(Common.OperationType.CREATE)\n+                                .build();\n+\n+                        portStateHashSet.add(portStateSB);\n+\n+                        // lookup subnet entity\n+                        for (InternalSubnetEntity subnetEntity1 :\n+                            portStateWithEverythingFilledNB.getSubnetEntities()) {\n+                            if(subnetEntity1.getTunnelId()==null)\n+                            {\n+                                throw new ClientOfDPMFailureException(\"empty tunnelId in the subnet payload!\");\n+                            }\n+                          Subnet.SubnetConfiguration subnetConfiguration =\n+                              Subnet.SubnetConfiguration.newBuilder()\n+                                  .setId(subnetEntity1.getId())\n+                                  .setVpcId(subnetEntity1.getVpcId())\n+                                  .setProjectId(portStateWithEverythingFilledNB.getProjectId())\n+                                  .setCidr(subnetEntity1.getCidr())\n+                                  .setFormatVersion(FORMAT_REVISION_NUMBER)\n+                                  .setTunnelId(subnetEntity1.getTunnelId())\n+                                  .build();\n+                          Subnet.SubnetState subnetState =\n+                              Subnet.SubnetState.newBuilder()\n+                                  .setConfiguration(subnetConfiguration)\n+                                  .buildPartial();\n+                          if (networkConfiguration.getRsType().equals(Common.ResourceType.PORT))\n+                            subnetState =\n+                                subnetState\n+                                    .toBuilder()\n+                                    .setOperationType(Common.OperationType.INFO)\n+                                    .build();\n+                          else\n+                            subnetState =\n+                                subnetState\n+                                    .toBuilder()\n+                                    .setOperationType(Common.OperationType.CREATE)\n+                                    .build();\n+\n+                          subnetStateSet.add(subnetState);\n+                          if (!(networkConfiguration.getOpType().equals(Common.OperationType.CREATE)\n+                              && networkConfiguration\n+                                  .getRsType()\n+                                  .equals(Common.ResourceType.PORT))) {\n+                            // lookup vpc entity\n+                            final VpcEntity vpcEntity = vpcMap.get(subnetEntity1.getVpcId());\n+                            Vpc.VpcConfiguration vpcConfiguration =\n+                                Vpc.VpcConfiguration.newBuilder()\n+                                    .setId(vpcEntity.getId())\n+                                    .setCidr(vpcEntity.getCidr())\n+                                    .setFormatVersion(FORMAT_REVISION_NUMBER)\n+                                    .setRevisionNumber(FORMAT_REVISION_NUMBER)\n+                                    .build();\n+                            Vpc.VpcState vpcState =\n+                                Vpc.VpcState.newBuilder()\n+                                    .setConfiguration(vpcConfiguration)\n+                                    .setOperationTypeValue(Common.OperationType.CREATE_VALUE)\n+                                    .setOperationType(Common.OperationType.CREATE)\n+                                    .build();\n+                            vpcStateSet.add(vpcState);\n+                          }\n+\n+                        }\n+                      });\n+              // leave a dummy security group value since for now there is no impl for sg\n+              SecurityGroup.SecurityGroupConfiguration securityGroupConfiguration =\n+                  SecurityGroup.SecurityGroupConfiguration.newBuilder().build();\n+              final SecurityGroup.SecurityGroupState securityGroupState =\n+                  SecurityGroup.SecurityGroupState.newBuilder()\n+                      .setConfiguration(securityGroupConfiguration)\n+                      .build();\n+              final Goalstate.GoalState goalState =\n+                  Goalstate.GoalState.newBuilder()\n+                      .addAllPortStates(portStateHashSet)\n+                      .addAllSubnetStates(subnetStateSet)\n+                      .addSecurityGroupStates(0, securityGroupState)\n+                          .addAllDhcpStates(dhcpStateList)\n+                      //                          .addAllVpcStates(vpcStateSet)\n+                      .build();\n+              goalStateHashMap.put(eachGSOnSingleIP.getKey(), goalState);\n+            });\n+    LOG.log(Level.INFO,\n+            goalStateHashMap.entrySet().toString());\n+    return goalStateHashMap;\n+  }\n+\n+  /**\n+   * bind Host With Ports\n+   *\n+   * @param neighborInfoInSameSubenetMap same subnet neighborInfo mapping\n+   * @param portsInSameSubnetMap same subnet portId mapping\n+   * @param mapGroupedByHostIp portsList hostIp  mapping\n+   * @param subnetMap\n+   * @param vpcMap\n+   * @param bindingHostIP\n+   * @param currentPortEntity\n+   * @param portStates\n+   */\n+  private int bindHostWithPorts(Map<String, Set<String>> portsInSameSubnetMap\n+          , Map<String, Set<NeighborInfo>> neighborInfoInSameSubenetMap,\n+                                Map<String, List<InternalPortEntity>> mapGroupedByHostIp,\n+                                Map<String, InternalSubnetEntity> subnetMap,\n+                                Map<String, VpcEntity> vpcMap,\n+                                int portCounter, String bindingHostIP,\n+                                InternalPortEntity currentPortEntity,\n+                                List<InternalPortEntity> portStates) {\n+    fillSubnetAndVpcToPort(subnetMap, vpcMap, currentPortEntity, portStates,\n+            neighborInfoInSameSubenetMap, portsInSameSubnetMap);\n+    portCounter++;\n+    mapGroupedByHostIp.put(bindingHostIP, portStates);\n+    return portCounter;\n+  }\n+\n+  /**\n+   * fill all resources to ports\n+   *\n+   * @param subnetMap hostip and subnetEntity mapping\n+   * @param vpcMap hostIp and Vpc mapping\n+   * @param currentPortEntity\n+   * @param portStates\n+   * @param neighborInfoInSameSubenetMap same subnet neighborInfo mapping\n+   * @param portsInSameSubnetMap same subnet portId mapping\n+   */\n+  private void fillSubnetAndVpcToPort(\n+      Map<String, InternalSubnetEntity> subnetMap,\n+      Map<String, VpcEntity> vpcMap,\n+      InternalPortEntity currentPortEntity,\n+      List<InternalPortEntity> portStates,\n+      Map<String, Set<NeighborInfo>> neighborInfoInSameSubenetMap,\n+      Map<String, Set<String>> portsInSameSubnetMap) {\n+    Set<InternalSubnetEntity> allSubletsInOnePort = new HashSet<>();\n+    Set<VpcEntity> vpcEntityHashSet = new HashSet<>();\n+\n+    for (com.futurewei.alcor.web.entity.port.PortEntity.FixedIp fixedIp :\n+        currentPortEntity.getFixedIps()) {\n+\n+      if (!portsInSameSubnetMap.containsKey(fixedIp.getSubnetId())) {\n+        Set<String> tempPorts = new HashSet<>();\n+        Set<NeighborInfo> tempNeighbor = new HashSet<>();\n+        groupNeighborAndPortsBySubnet(\n+            currentPortEntity,\n+            fixedIp,\n+            tempPorts,\n+            tempNeighbor,\n+            neighborInfoInSameSubenetMap,\n+            portsInSameSubnetMap);\n+\n+      } else {\n+        Set<String> tempPorts = portsInSameSubnetMap.get(fixedIp.getSubnetId());\n+        Set<NeighborInfo> tempNeighbor = neighborInfoInSameSubenetMap.get(fixedIp.getSubnetId());\n+        groupNeighborAndPortsBySubnet(\n+            currentPortEntity,\n+            fixedIp,\n+            tempPorts,\n+            tempNeighbor,\n+            neighborInfoInSameSubenetMap,\n+            portsInSameSubnetMap);\n+      }\n \n-    /**\n-     * group neighbor and ports by subnetid\n-     *\n-     * @param currentPortEntity\n-     * @param fixedIp\n-     * @param tempPorts\n-     * @param tempNeighbor\n-     * @param neighborInfoInSameSubenetMap same subnet neighborInfo mapping\n-     * @param portsInSameSubnetMap same subnet portId mapping\n-     */\n-    private void groupNeighborAndPortsBySubnet(\n-            InternalPortEntity currentPortEntity,\n-            PortEntity.FixedIp fixedIp,\n-            Set<String> tempPorts,\n-            Set<NeighborInfo> tempNeighbor,\n-            Map<String, Set<NeighborInfo>> neighborInfoInSameSubenetMap,\n-            Map<String, Set<String>> portsInSameSubnetMap) {\n-        tempNeighbor.add(\n-                new NeighborInfo(\n-                        currentPortEntity.getBindingHostIP(),\n-                        currentPortEntity.getBindingHostId(),\n-                        currentPortEntity.getId(),\n-                        currentPortEntity.getMacAddress()));\n-        tempPorts.add(currentPortEntity.getId());\n+      final InternalSubnetEntity subnetInfo = subnetMap.get(fixedIp.getSubnetId());\n+      allSubletsInOnePort.add(subnetInfo);\n+      final VpcEntity vpcEntity = vpcMap.get(subnetInfo.getVpcId());\n+      vpcEntityHashSet.add(vpcEntity);\n+    }\n+    currentPortEntity.setSubnetEntities(allSubletsInOnePort);\n+    currentPortEntity.setVpcEntities(vpcEntityHashSet);\n+    portStates.add(currentPortEntity);\n+  }\n+\n+\n+  /**\n+   * group neighbor and ports by subnetid\n+   *\n+   * @param currentPortEntity\n+   * @param fixedIp\n+   * @param tempPorts\n+   * @param tempNeighbor\n+   * @param neighborInfoInSameSubenetMap same subnet neighborInfo mapping\n+   * @param portsInSameSubnetMap same subnet portId mapping\n+   */\n+  private void groupNeighborAndPortsBySubnet(\n+      InternalPortEntity currentPortEntity,\n+      PortEntity.FixedIp fixedIp,\n+      Set<String> tempPorts,\n+      Set<NeighborInfo> tempNeighbor,\n+      Map<String, Set<NeighborInfo>> neighborInfoInSameSubenetMap,\n+      Map<String, Set<String>> portsInSameSubnetMap) {\n+    tempNeighbor.add(\n+        new NeighborInfo(\n+            currentPortEntity.getBindingHostIP(),\n+            currentPortEntity.getBindingHostId(),\n+            currentPortEntity.getId(),\n+            currentPortEntity.getMacAddress()));\n+    tempPorts.add(currentPortEntity.getId());\n     /*\n     if (currentPortEntity.getNeighborInfos() != null) {\n       for (NeighborInfo neighborInfo : currentPortEntity.getNeighborInfos()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzMDk5Mg==", "url": "https://github.com/futurewei-cloud/alcor/pull/458#discussion_r516430992", "bodyText": "Let us remove if not needed.", "author": "xieus", "createdAt": "2020-11-03T05:10:48Z", "path": "services/data_plane_manager/src/test/java/com/futurewei/alcor/dataplane/utils/DataPlaneManagerUtil.java", "diffHunk": "@@ -355,31 +416,38 @@ private InternalSubnetEntity getInternalSubnetEntity(NetworkConfiguration networ\n      * @throws Exception\n      */\n     private void buildSubnetState(NetworkConfiguration networkConfig, Goalstate.GoalState.Builder goalStateBuilder) throws Exception {\n-        List<Port.PortState> portStates = goalStateBuilder.getPortStatesList();\n-        if (portStates == null || portStates.size() == 0) {\n+        List<InternalSubnetEntity> subnets = networkConfig.getSubnets();\n+        if (subnets == null || subnets.size() == 0) {\n             return;\n         }\n-\n-        List<InternalSubnetEntity> subnetEntities = new ArrayList<>();\n-        List<String> subnetIdsInFixedIP = new ArrayList<>();\n-        for (Port.PortState portState: portStates) {\n-            for (Port.PortConfiguration.FixedIp fixedIp: portState.getConfiguration().getFixedIpsList()) {\n-                if (!subnetIdsInFixedIP.contains(fixedIp.getSubnetId())) {\n-                    InternalSubnetEntity internalSubnetEntity = getInternalSubnetEntity(\n-                            networkConfig, fixedIp.getSubnetId());\n-                    subnetEntities.add(internalSubnetEntity);\n-                    subnetIdsInFixedIP.add(fixedIp.getSubnetId());\n-                }\n-            }\n-        }\n-\n-        for (InternalSubnetEntity subnetEntity: subnetEntities) {\n+//        List<Port.PortState> portStates = goalStateBuilder.getPortStatesList();\n+//        if (portStates == null || portStates.size() == 0) {\n+//            return;\n+//        }\n+//\n+//        List<InternalSubnetEntity> subnetEntities = new ArrayList<>();\n+//        List<String> subnetIdsInFixedIP = new ArrayList<>();\n+//        for (Port.PortState portState: portStates) {\n+//            for (Port.PortConfiguration.FixedIp fixedIp: portState.getConfiguration().getFixedIpsList()) {\n+//                if (!subnetIdsInFixedIP.contains(fixedIp.getSubnetId())) {\n+//                    InternalSubnetEntity internalSubnetEntity = getInternalSubnetEntity(\n+//                            networkConfig, fixedIp.getSubnetId());\n+//                    subnetEntities.add(internalSubnetEntity);\n+//                    subnetIdsInFixedIP.add(fixedIp.getSubnetId());\n+//                }\n+//            }", "originalCommit": "ecab50a6787ed4330f3562c4c424565d5439379d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkzNzk2MA==", "url": "https://github.com/futurewei-cloud/alcor/pull/458#discussion_r516937960", "bodyText": "Sure", "author": "kevin-zhonghao", "createdAt": "2020-11-03T20:30:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzMDk5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "1c5cfefbc856e9d708ce1f07bf009600770ba5ce", "chunk": "diff --git a/services/data_plane_manager/src/test/java/com/futurewei/alcor/dataplane/utils/DataPlaneManagerUtil.java b/services/data_plane_manager/src/test/java/com/futurewei/alcor/dataplane/utils/DataPlaneManagerUtil.java\nindex 67aeaccb..1c18a945 100644\n--- a/services/data_plane_manager/src/test/java/com/futurewei/alcor/dataplane/utils/DataPlaneManagerUtil.java\n+++ b/services/data_plane_manager/src/test/java/com/futurewei/alcor/dataplane/utils/DataPlaneManagerUtil.java\n\n@@ -420,23 +420,6 @@ public class DataPlaneManagerUtil {\n         if (subnets == null || subnets.size() == 0) {\n             return;\n         }\n-//        List<Port.PortState> portStates = goalStateBuilder.getPortStatesList();\n-//        if (portStates == null || portStates.size() == 0) {\n-//            return;\n-//        }\n-//\n-//        List<InternalSubnetEntity> subnetEntities = new ArrayList<>();\n-//        List<String> subnetIdsInFixedIP = new ArrayList<>();\n-//        for (Port.PortState portState: portStates) {\n-//            for (Port.PortConfiguration.FixedIp fixedIp: portState.getConfiguration().getFixedIpsList()) {\n-//                if (!subnetIdsInFixedIP.contains(fixedIp.getSubnetId())) {\n-//                    InternalSubnetEntity internalSubnetEntity = getInternalSubnetEntity(\n-//                            networkConfig, fixedIp.getSubnetId());\n-//                    subnetEntities.add(internalSubnetEntity);\n-//                    subnetIdsInFixedIP.add(fixedIp.getSubnetId());\n-//                }\n-//            }\n-//        }\n \n         for (InternalSubnetEntity subnetEntity: subnets) {\n             Subnet.SubnetConfiguration.Builder subnetConfigBuilder = Subnet.SubnetConfiguration.newBuilder();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzMTQ4NQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/458#discussion_r516431485", "bodyText": "@kevin-zhonghao As this change is a pretty big change, could you please generate a few input and output using the UT framework? Let us review them together tomorrow.", "author": "xieus", "createdAt": "2020-11-03T05:13:04Z", "path": "services/data_plane_manager/src/test/java/com/futurewei/alcor/dataplane/utils/DataPlaneManagerUtil.java", "diffHunk": "@@ -79,21 +120,35 @@ public NetworkConfiguration autoGenerateUTsInput(int operationType,\n             InternalRouterInfo routerInfo = new InternalRouterInfo();\n             InternalRouterConfiguration internalRouterConfiguration = new InternalRouterConfiguration();\n             List<InternalSubnetRoutingTable> subnet_routing_tables = new ArrayList<>();\n+            for (int i = 0; i < subnetNum; i ++) {", "originalCommit": "ecab50a6787ed4330f3562c4c424565d5439379d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkzODEwNg==", "url": "https://github.com/futurewei-cloud/alcor/pull/458#discussion_r516938106", "bodyText": "NP", "author": "kevin-zhonghao", "createdAt": "2020-11-03T20:30:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQzMTQ4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "a9c3a47d74ba5fffbe13746ee4e33af0fbb394fe", "chunk": "diff --git a/services/data_plane_manager/src/test/java/com/futurewei/alcor/dataplane/utils/DataPlaneManagerUtil.java b/services/data_plane_manager/src/test/java/com/futurewei/alcor/dataplane/utils/DataPlaneManagerUtil.java\nindex 67aeaccb..39967228 100644\n--- a/services/data_plane_manager/src/test/java/com/futurewei/alcor/dataplane/utils/DataPlaneManagerUtil.java\n+++ b/services/data_plane_manager/src/test/java/com/futurewei/alcor/dataplane/utils/DataPlaneManagerUtil.java\n\n@@ -120,35 +79,21 @@ public class DataPlaneManagerUtil {\n             InternalRouterInfo routerInfo = new InternalRouterInfo();\n             InternalRouterConfiguration internalRouterConfiguration = new InternalRouterConfiguration();\n             List<InternalSubnetRoutingTable> subnet_routing_tables = new ArrayList<>();\n-            for (int i = 0; i < subnetNum; i ++) {\n-                int Offset = i + 2;\n-                if (hasInternalSubnetRoutingTable) {\n-                    InternalSubnetRoutingTable internalSubnetRoutingTable = new InternalSubnetRoutingTable();\n-                    List<InternalRoutingRule> routing_rules = new ArrayList<>();\n-\n-                    if (hasInternalRoutingRule){\n-                        InternalRoutingRule internalRoutingRule = new InternalRoutingRule();\n-                        InternalRoutingRuleExtraInfo internalRoutingRuleExtraInfo = new InternalRoutingRuleExtraInfo();\n-                        internalRoutingRuleExtraInfo.setNextHopMac(DPMAutoUnitTestConstant.nextHopMac + i);\n-                        internalRoutingRule.setRoutingRuleExtraInfo(internalRoutingRuleExtraInfo);\n-                        internalRoutingRule.setOperationType(OperationType.CREATE);\n-                        internalRoutingRule.setDestination(\"10.0.\" + Offset + \".0/24\");\n-                        internalRoutingRule.setId(DPMAutoUnitTestConstant.routeId + i);\n-                        internalRoutingRule.setName(DPMAutoUnitTestConstant.routeRuleName + i);\n-                        internalRoutingRule.setNextHopIp(\"10.0.\" + Offset + \".1\");\n-                        internalRoutingRule.setPriority(DPMAutoUnitTestConstant.priority);\n-                        routing_rules.add(internalRoutingRule);\n-                    }\n \n-                    internalSubnetRoutingTable.setRoutingRules(routing_rules);\n-                    internalSubnetRoutingTable.setSubnetId(DPMAutoUnitTestConstant.subnetId + i);\n-                    subnet_routing_tables.add(internalSubnetRoutingTable);\n+            if (hasInternalSubnetRoutingTable) {\n+                InternalSubnetRoutingTable internalSubnetRoutingTable = new InternalSubnetRoutingTable();\n+                List<InternalRoutingRule> routing_rules = new ArrayList<>();\n+\n+                if (hasInternalRoutingRule){\n+                    InternalRoutingRule internalRoutingRule = new InternalRoutingRule();\n+                    routing_rules.add(internalRoutingRule);\n                 }\n+\n+                internalSubnetRoutingTable.setRoutingRules(routing_rules);\n+                subnet_routing_tables.add(internalSubnetRoutingTable);\n             }\n \n             internalRouterConfiguration.setSubnetRoutingTables(subnet_routing_tables);\n-            internalRouterConfiguration.setHostDvrMac(DPMAutoUnitTestConstant.hostDvrMac);\n-            internalRouterConfiguration.setId(DPMAutoUnitTestConstant.routerConfigurationId);\n \n \n             //routerInfo.setOperationType(OperationType.valueOf(\"create\"));\n"}}, {"oid": "deb44dc701592f4c8bd8bca2ac8e55fd6f2dfbea", "url": "https://github.com/futurewei-cloud/alcor/commit/deb44dc701592f4c8bd8bca2ac8e55fd6f2dfbea", "message": "update", "committedDate": "2020-11-03T18:02:34Z", "type": "commit"}, {"oid": "1c5cfefbc856e9d708ce1f07bf009600770ba5ce", "url": "https://github.com/futurewei-cloud/alcor/commit/1c5cfefbc856e9d708ce1f07bf009600770ba5ce", "message": "update", "committedDate": "2020-11-03T21:47:55Z", "type": "commit"}, {"oid": "a9c3a47d74ba5fffbe13746ee4e33af0fbb394fe", "url": "https://github.com/futurewei-cloud/alcor/commit/a9c3a47d74ba5fffbe13746ee4e33af0fbb394fe", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master", "committedDate": "2020-11-03T23:40:18Z", "type": "commit"}, {"oid": "b8bb56aaab6ca179b7a2350dc250db5d1171aac7", "url": "https://github.com/futurewei-cloud/alcor/commit/b8bb56aaab6ca179b7a2350dc250db5d1171aac7", "message": "update", "committedDate": "2020-11-04T22:14:10Z", "type": "commit"}, {"oid": "a6c1884a4c1e5fd3c318b3b8b82d2a649ac32d28", "url": "https://github.com/futurewei-cloud/alcor/commit/a6c1884a4c1e5fd3c318b3b8b82d2a649ac32d28", "message": "update", "committedDate": "2020-11-04T22:16:23Z", "type": "commit"}, {"oid": "f058bd1edef55af8ab0e25cb7b043fa6c04c272f", "url": "https://github.com/futurewei-cloud/alcor/commit/f058bd1edef55af8ab0e25cb7b043fa6c04c272f", "message": "Merge branch 'master' of https://github.com/futurewei-cloud/alcor into new_master", "committedDate": "2020-11-05T07:42:35Z", "type": "commit"}, {"oid": "2b8370972be6937aa3555f6b9d5a760e4869c90c", "url": "https://github.com/futurewei-cloud/alcor/commit/2b8370972be6937aa3555f6b9d5a760e4869c90c", "message": "Merge branch 'new_master' into feature/dpm_auto_test_third_version", "committedDate": "2020-11-05T07:43:32Z", "type": "commit"}, {"oid": "febead8c7c92ba36b71e9dcae04b30687a5e70ba", "url": "https://github.com/futurewei-cloud/alcor/commit/febead8c7c92ba36b71e9dcae04b30687a5e70ba", "message": "update", "committedDate": "2020-11-05T07:51:11Z", "type": "commit"}, {"oid": "d82aafacebc7a6654f1da149c6e10e35e21eac8e", "url": "https://github.com/futurewei-cloud/alcor/commit/d82aafacebc7a6654f1da149c6e10e35e21eac8e", "message": "update", "committedDate": "2020-11-05T07:54:28Z", "type": "commit"}, {"oid": "6575a7e076ead174daa745107070c21af6b6ad54", "url": "https://github.com/futurewei-cloud/alcor/commit/6575a7e076ead174daa745107070c21af6b6ad54", "message": "update", "committedDate": "2020-11-05T07:57:09Z", "type": "commit"}, {"oid": "df0f5cef9d55969ec7caafcce72cf9ec934b1dcf", "url": "https://github.com/futurewei-cloud/alcor/commit/df0f5cef9d55969ec7caafcce72cf9ec934b1dcf", "message": "update", "committedDate": "2020-11-05T07:58:15Z", "type": "commit"}]}