{"pr_number": 129, "pr_title": "Replace Redis with Apache Ignite for in memory cache and db", "pr_createdAt": "2020-03-17T01:43:37Z", "pr_url": "https://github.com/futurewei-cloud/alcor/pull/129", "timeline": [{"oid": "f7cdc8d472a0e7aba2bb9c641075dc2f93e43cdf", "url": "https://github.com/futurewei-cloud/alcor/commit/f7cdc8d472a0e7aba2bb9c641075dc2f93e43cdf", "message": "Add ignite cache", "committedDate": "2020-02-29T09:53:20Z", "type": "commit"}, {"oid": "277b709c11af1695262ce96ee1d63a94a2d3764a", "url": "https://github.com/futurewei-cloud/alcor/commit/277b709c11af1695262ce96ee1d63a94a2d3764a", "message": "Add ignite cache", "committedDate": "2020-02-29T09:58:17Z", "type": "commit"}, {"oid": "481f50396be5be6f4598224717446873a472421b", "url": "https://github.com/futurewei-cloud/alcor/commit/481f50396be5be6f4598224717446873a472421b", "message": "Solve the problem that test cases cannot pass without ignite configuration", "committedDate": "2020-03-09T03:26:58Z", "type": "commit"}, {"oid": "2b2daa0605b667d5baf4697642bd39f34af9e4bc", "url": "https://github.com/futurewei-cloud/alcor/commit/2b2daa0605b667d5baf4697642bd39f34af9e4bc", "message": "Add db modue", "committedDate": "2020-03-16T10:07:14Z", "type": "commit"}, {"oid": "40bff2a35081adfeec0d9051aae6b22a443a2de5", "url": "https://github.com/futurewei-cloud/alcor/commit/40bff2a35081adfeec0d9051aae6b22a443a2de5", "message": "Fix test case failure", "committedDate": "2020-03-17T01:41:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQyODI1NQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/129#discussion_r393428255", "bodyText": "Good idea of using /debug URL", "author": "xieus", "createdAt": "2020-03-17T03:39:20Z", "path": "src/com/futurewei/alcor/controller/web/DebugVpcController.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package com.futurewei.alcor.controller.web;\n+\n+import com.futurewei.alcor.controller.cache.repo.VpcRepository;\n+import com.futurewei.alcor.controller.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.controller.exception.ResourceNotFoundException;\n+import com.futurewei.alcor.controller.exception.ResourceNullException;\n+import com.futurewei.alcor.controller.exception.ResourcePersistenceException;\n+import com.futurewei.alcor.controller.model.ResponseId;\n+import com.futurewei.alcor.controller.model.VpcState;\n+import com.futurewei.alcor.controller.model.VpcStateJson;\n+import com.futurewei.alcor.controller.web.util.RestPreconditions;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.*;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+import static org.springframework.web.bind.annotation.RequestMethod.DELETE;\n+\n+@RestController\n+public class DebugVpcController {\n+    @Autowired(required = false)\n+    private VpcRepository vpcRepository;\n+\n+    @RequestMapping(\n+            method = GET,\n+            value = {\"/debug/project/{projectid}/vpcs/{vpcid}\"})", "originalCommit": "40bff2a35081adfeec0d9051aae6b22a443a2de5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0ff34ff9b6d5cfc440bb1d5519a123ae4cf56d23", "chunk": "diff --git a/src/com/futurewei/alcor/controller/web/DebugVpcController.java b/src/com/futurewei/alcor/controller/web/DebugVpcController.java\nindex 7ef85b8d..7a4bada6 100644\n--- a/src/com/futurewei/alcor/controller/web/DebugVpcController.java\n+++ b/src/com/futurewei/alcor/controller/web/DebugVpcController.java\n\n@@ -1,10 +1,9 @@\n package com.futurewei.alcor.controller.web;\n \n import com.futurewei.alcor.controller.cache.repo.VpcRepository;\n-import com.futurewei.alcor.controller.exception.ParameterNullOrEmptyException;\n-import com.futurewei.alcor.controller.exception.ResourceNotFoundException;\n-import com.futurewei.alcor.controller.exception.ResourceNullException;\n-import com.futurewei.alcor.controller.exception.ResourcePersistenceException;\n+import com.futurewei.alcor.controller.exception.CacheException;\n+import com.futurewei.alcor.controller.db.Transaction;\n+import com.futurewei.alcor.controller.exception.*;\n import com.futurewei.alcor.controller.model.ResponseId;\n import com.futurewei.alcor.controller.model.VpcState;\n import com.futurewei.alcor.controller.model.VpcStateJson;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQyODc2Nw==", "url": "https://github.com/futurewei-cloud/alcor/pull/129#discussion_r393428767", "bodyText": "Shall we use other name like \"cache_name\" to be differentiated with the KEY in K-V?", "author": "xieus", "createdAt": "2020-03-17T03:41:45Z", "path": "src/com/futurewei/alcor/controller/db/redis/RedisCache.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package com.futurewei.alcor.controller.db.redis;\n+\n+import com.futurewei.alcor.controller.db.ICache;\n+import org.springframework.data.redis.core.HashOperations;\n+import org.springframework.data.redis.core.RedisTemplate;\n+\n+import java.util.Map;\n+\n+public class RedisCache<K, V> implements ICache<K, V> {\n+    private HashOperations hashOperations;\n+    private String key;", "originalCommit": "40bff2a35081adfeec0d9051aae6b22a443a2de5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0ff34ff9b6d5cfc440bb1d5519a123ae4cf56d23", "chunk": "diff --git a/src/com/futurewei/alcor/controller/db/redis/RedisCache.java b/src/com/futurewei/alcor/controller/db/redis/RedisCache.java\nindex 5696fe7b..928062d4 100644\n--- a/src/com/futurewei/alcor/controller/db/redis/RedisCache.java\n+++ b/src/com/futurewei/alcor/controller/db/redis/RedisCache.java\n\n@@ -1,47 +1,94 @@\n package com.futurewei.alcor.controller.db.redis;\n \n import com.futurewei.alcor.controller.db.ICache;\n+import com.futurewei.alcor.controller.db.Transaction;\n+import com.futurewei.alcor.controller.exception.CacheException;\n+import com.futurewei.alcor.controller.logging.Logger;\n+import com.futurewei.alcor.controller.logging.LoggerFactory;\n import org.springframework.data.redis.core.HashOperations;\n import org.springframework.data.redis.core.RedisTemplate;\n \n import java.util.Map;\n+import java.util.logging.Level;\n \n public class RedisCache<K, V> implements ICache<K, V> {\n+    private static final Logger logger = LoggerFactory.getLogger();\n+\n+    private RedisTemplate<K, V> redisTemplate;\n     private HashOperations hashOperations;\n-    private String key;\n+    private RedisTransaction transaction;\n+    private String name;\n \n-    public RedisCache(RedisTemplate<K, V> redisTemplate, String key) {\n+    public RedisCache(RedisTemplate<K, V> redisTemplate, String name) {\n+        this.redisTemplate = redisTemplate;\n         hashOperations = redisTemplate.opsForHash();\n-        this.key = key;\n+        this.name = name;\n+\n+        transaction = new RedisTransaction(redisTemplate);\n+    }\n+\n+    @Override\n+    public V get(K key) throws CacheException {\n+        try {\n+            return (V) hashOperations.get(name, key);\n+        } catch (Exception e) {\n+            logger.log(Level.WARNING, \"RedisCache get operation error:\" + e.getMessage());\n+            throw new CacheException(e.getMessage());\n+        }\n     }\n \n     @Override\n-    public V get(K var1) {\n-        return (V) hashOperations.get(key, var1);\n+    public void put(K key, V value) throws CacheException {\n+        try {\n+            hashOperations.put(name, key, value);\n+        } catch (Exception e) {\n+            logger.log(Level.WARNING, \"RedisCache put operation error:\" + e.getMessage());\n+            throw new CacheException(e.getMessage());\n+        }\n     }\n \n     @Override\n-    public void put(K var1, V var2) {\n-        hashOperations.put(key, var1, var2);\n+    public boolean containsKey(K key) throws CacheException {\n+        try {\n+            return hashOperations.hasKey(name, key);\n+        } catch (Exception e) {\n+            logger.log(Level.WARNING, \"RedisCache containsKey operation error:\" + e.getMessage());\n+            throw new CacheException(e.getMessage());\n+        }\n     }\n \n     @Override\n-    public boolean containsKey(K var1) {\n-        return hashOperations.hasKey(key, var1);\n+    public Map<K, V> getAll() throws CacheException {\n+        try {\n+            return hashOperations.entries(name);\n+        } catch (Exception e) {\n+            logger.log(Level.WARNING, \"RedisCache getAll operation error:\" + e.getMessage());\n+            throw new CacheException(e.getMessage());\n+        }\n     }\n \n     @Override\n-    public Map<K, V> getAll() {\n-        return hashOperations.entries(key);\n+    public void putAll(Map<? extends K, ? extends V> items) throws CacheException {\n+        try {\n+            hashOperations.putAll(name, items);\n+        } catch (Exception e) {\n+            logger.log(Level.WARNING, \"RedisCache putAll operation error:\" + e.getMessage());\n+            throw new CacheException(e.getMessage());\n+        }\n     }\n \n     @Override\n-    public void putAll(Map<? extends K, ? extends V> var1) {\n-        hashOperations.putAll(key, var1);\n+    public boolean remove(K key) throws CacheException {\n+        try {\n+            return hashOperations.delete(name, key) == 1;\n+        } catch (Exception e) {\n+            logger.log(Level.WARNING, \"RedisCache remove operation error:\" + e.getMessage());\n+            throw new CacheException(e.getMessage());\n+        }\n     }\n \n     @Override\n-    public boolean remove(K var1) {\n-        return hashOperations.delete(key, var1) == 1;\n+    public Transaction getTransaction() {\n+        return transaction;\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQyODg0OA==", "url": "https://github.com/futurewei-cloud/alcor/pull/129#discussion_r393428848", "bodyText": "Let us use \"Key\" instead of \"var\"", "author": "xieus", "createdAt": "2020-03-17T03:42:06Z", "path": "src/com/futurewei/alcor/controller/db/redis/RedisCache.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package com.futurewei.alcor.controller.db.redis;\n+\n+import com.futurewei.alcor.controller.db.ICache;\n+import org.springframework.data.redis.core.HashOperations;\n+import org.springframework.data.redis.core.RedisTemplate;\n+\n+import java.util.Map;\n+\n+public class RedisCache<K, V> implements ICache<K, V> {\n+    private HashOperations hashOperations;\n+    private String key;\n+\n+    public RedisCache(RedisTemplate<K, V> redisTemplate, String key) {\n+        hashOperations = redisTemplate.opsForHash();\n+        this.key = key;\n+    }\n+\n+    @Override\n+    public V get(K var1) {", "originalCommit": "40bff2a35081adfeec0d9051aae6b22a443a2de5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0ff34ff9b6d5cfc440bb1d5519a123ae4cf56d23", "chunk": "diff --git a/src/com/futurewei/alcor/controller/db/redis/RedisCache.java b/src/com/futurewei/alcor/controller/db/redis/RedisCache.java\nindex 5696fe7b..928062d4 100644\n--- a/src/com/futurewei/alcor/controller/db/redis/RedisCache.java\n+++ b/src/com/futurewei/alcor/controller/db/redis/RedisCache.java\n\n@@ -1,47 +1,94 @@\n package com.futurewei.alcor.controller.db.redis;\n \n import com.futurewei.alcor.controller.db.ICache;\n+import com.futurewei.alcor.controller.db.Transaction;\n+import com.futurewei.alcor.controller.exception.CacheException;\n+import com.futurewei.alcor.controller.logging.Logger;\n+import com.futurewei.alcor.controller.logging.LoggerFactory;\n import org.springframework.data.redis.core.HashOperations;\n import org.springframework.data.redis.core.RedisTemplate;\n \n import java.util.Map;\n+import java.util.logging.Level;\n \n public class RedisCache<K, V> implements ICache<K, V> {\n+    private static final Logger logger = LoggerFactory.getLogger();\n+\n+    private RedisTemplate<K, V> redisTemplate;\n     private HashOperations hashOperations;\n-    private String key;\n+    private RedisTransaction transaction;\n+    private String name;\n \n-    public RedisCache(RedisTemplate<K, V> redisTemplate, String key) {\n+    public RedisCache(RedisTemplate<K, V> redisTemplate, String name) {\n+        this.redisTemplate = redisTemplate;\n         hashOperations = redisTemplate.opsForHash();\n-        this.key = key;\n+        this.name = name;\n+\n+        transaction = new RedisTransaction(redisTemplate);\n+    }\n+\n+    @Override\n+    public V get(K key) throws CacheException {\n+        try {\n+            return (V) hashOperations.get(name, key);\n+        } catch (Exception e) {\n+            logger.log(Level.WARNING, \"RedisCache get operation error:\" + e.getMessage());\n+            throw new CacheException(e.getMessage());\n+        }\n     }\n \n     @Override\n-    public V get(K var1) {\n-        return (V) hashOperations.get(key, var1);\n+    public void put(K key, V value) throws CacheException {\n+        try {\n+            hashOperations.put(name, key, value);\n+        } catch (Exception e) {\n+            logger.log(Level.WARNING, \"RedisCache put operation error:\" + e.getMessage());\n+            throw new CacheException(e.getMessage());\n+        }\n     }\n \n     @Override\n-    public void put(K var1, V var2) {\n-        hashOperations.put(key, var1, var2);\n+    public boolean containsKey(K key) throws CacheException {\n+        try {\n+            return hashOperations.hasKey(name, key);\n+        } catch (Exception e) {\n+            logger.log(Level.WARNING, \"RedisCache containsKey operation error:\" + e.getMessage());\n+            throw new CacheException(e.getMessage());\n+        }\n     }\n \n     @Override\n-    public boolean containsKey(K var1) {\n-        return hashOperations.hasKey(key, var1);\n+    public Map<K, V> getAll() throws CacheException {\n+        try {\n+            return hashOperations.entries(name);\n+        } catch (Exception e) {\n+            logger.log(Level.WARNING, \"RedisCache getAll operation error:\" + e.getMessage());\n+            throw new CacheException(e.getMessage());\n+        }\n     }\n \n     @Override\n-    public Map<K, V> getAll() {\n-        return hashOperations.entries(key);\n+    public void putAll(Map<? extends K, ? extends V> items) throws CacheException {\n+        try {\n+            hashOperations.putAll(name, items);\n+        } catch (Exception e) {\n+            logger.log(Level.WARNING, \"RedisCache putAll operation error:\" + e.getMessage());\n+            throw new CacheException(e.getMessage());\n+        }\n     }\n \n     @Override\n-    public void putAll(Map<? extends K, ? extends V> var1) {\n-        hashOperations.putAll(key, var1);\n+    public boolean remove(K key) throws CacheException {\n+        try {\n+            return hashOperations.delete(name, key) == 1;\n+        } catch (Exception e) {\n+            logger.log(Level.WARNING, \"RedisCache remove operation error:\" + e.getMessage());\n+            throw new CacheException(e.getMessage());\n+        }\n     }\n \n     @Override\n-    public boolean remove(K var1) {\n-        return hashOperations.delete(key, var1) == 1;\n+    public Transaction getTransaction() {\n+        return transaction;\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQyOTAzMA==", "url": "https://github.com/futurewei-cloud/alcor/pull/129#discussion_r393429030", "bodyText": "Consider to add SSL support.", "author": "xieus", "createdAt": "2020-03-17T03:43:01Z", "path": "src/com/futurewei/alcor/controller/db/ignite/IgniteConfiguration.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package com.futurewei.alcor.controller.db.ignite;\n+\n+import com.futurewei.alcor.controller.logging.Logger;\n+import com.futurewei.alcor.controller.logging.LoggerFactory;\n+import org.apache.ignite.Ignition;\n+import org.apache.ignite.client.ClientException;\n+import org.apache.ignite.client.IgniteClient;\n+import org.apache.ignite.configuration.ClientConfiguration;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.domain.EntityScan;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.util.Assert;\n+import java.util.logging.Level;\n+\n+@Configuration\n+@ComponentScan(\"com.futurewei.alcor.controller.cache\")\n+@EntityScan(\"com.futurewei.alcor.controller.cache\")\n+@ConditionalOnProperty(prefix = \"ignite\", name = \"host\")\n+public class IgniteConfiguration {\n+    private static final Logger logger = LoggerFactory.getLogger();\n+\n+    @Value(\"${ignite.host}\")", "originalCommit": "40bff2a35081adfeec0d9051aae6b22a443a2de5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIyODkwMA==", "url": "https://github.com/futurewei-cloud/alcor/pull/129#discussion_r394228900", "bodyText": "Yes,  I also thinking about transaction too.", "author": "chenpiaoping", "createdAt": "2020-03-18T10:02:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQyOTAzMA=="}], "type": "inlineReview", "revised_code": {"commit": "0ff34ff9b6d5cfc440bb1d5519a123ae4cf56d23", "chunk": "diff --git a/src/com/futurewei/alcor/controller/db/ignite/IgniteConfiguration.java b/src/com/futurewei/alcor/controller/db/ignite/IgniteConfiguration.java\nindex 39e6fccb..370a24f2 100644\n--- a/src/com/futurewei/alcor/controller/db/ignite/IgniteConfiguration.java\n+++ b/src/com/futurewei/alcor/controller/db/ignite/IgniteConfiguration.java\n\n@@ -28,9 +28,26 @@ public class IgniteConfiguration {\n     @Value(\"${ignite.port}\")\n     private Integer port;\n \n+    @Value(\"${ignite.key-store-path}\")\n+    private String keyStorePath;\n+\n+    @Value(\"${ignite.key-store-password}\")\n+    private String keyStorePassword;\n+\n+    @Value(\"${ignite.trust-store-path}\")\n+    private String trustStorePath;\n+\n+    @Value(\"${ignite.trust-store-password}\")\n+    private String trustStorePassword;\n+\n     @Bean\n     public IgniteClient igniteClientInstance() {\n-        ClientConfiguration cfg = new ClientConfiguration().setAddresses(host + \":\" + String.valueOf(port));\n+        ClientConfiguration cfg = new ClientConfiguration()\n+                .setAddresses(host + \":\" + port)\n+                .setSslClientCertificateKeyStorePath(keyStorePath)\n+                .setSslClientCertificateKeyStorePassword(keyStorePassword)\n+                .setSslTrustCertificateKeyStorePath(trustStorePath)\n+                .setSslTrustCertificateKeyStorePassword(trustStorePassword);\n \n         IgniteClient igniteClient = null;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQyOTIzMw==", "url": "https://github.com/futurewei-cloud/alcor/pull/129#discussion_r393429233", "bodyText": "Do we know how the page size impacts perf? Could we make it configurable?", "author": "xieus", "createdAt": "2020-03-17T03:43:51Z", "path": "src/com/futurewei/alcor/controller/db/ignite/IgniteCache.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.futurewei.alcor.controller.db.ignite;\n+\n+import com.futurewei.alcor.controller.db.ICache;\n+import com.futurewei.alcor.controller.logging.Logger;\n+import com.futurewei.alcor.controller.logging.LoggerFactory;\n+import org.apache.ignite.cache.query.Query;\n+import org.apache.ignite.cache.query.QueryCursor;\n+import org.apache.ignite.cache.query.ScanQuery;\n+import org.apache.ignite.client.ClientCache;\n+import org.apache.ignite.client.ClientException;\n+import org.apache.ignite.client.IgniteClient;\n+import org.springframework.util.Assert;\n+\n+import javax.cache.Cache;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.stream.Collectors;\n+\n+\n+public class IgniteCache<K, V> implements ICache<K, V> {\n+    private static final Logger logger = LoggerFactory.getLogger();\n+    private static final int QUERY_PAGE_SIZE = 1000;", "originalCommit": "40bff2a35081adfeec0d9051aae6b22a443a2de5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY0NTE4Mw==", "url": "https://github.com/futurewei-cloud/alcor/pull/129#discussion_r397645183", "bodyText": "The static var is gone now. Not sure if we need it.", "author": "xieus", "createdAt": "2020-03-25T07:10:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQyOTIzMw=="}], "type": "inlineReview", "revised_code": {"commit": "0ff34ff9b6d5cfc440bb1d5519a123ae4cf56d23", "chunk": "diff --git a/src/com/futurewei/alcor/controller/db/ignite/IgniteCache.java b/src/com/futurewei/alcor/controller/db/ignite/IgniteCache.java\nindex 0ffa82df..1a5ea04c 100644\n--- a/src/com/futurewei/alcor/controller/db/ignite/IgniteCache.java\n+++ b/src/com/futurewei/alcor/controller/db/ignite/IgniteCache.java\n\n@@ -1,6 +1,8 @@\n package com.futurewei.alcor.controller.db.ignite;\n \n import com.futurewei.alcor.controller.db.ICache;\n+import com.futurewei.alcor.controller.db.Transaction;\n+import com.futurewei.alcor.controller.exception.CacheException;\n import com.futurewei.alcor.controller.logging.Logger;\n import com.futurewei.alcor.controller.logging.LoggerFactory;\n import org.apache.ignite.cache.query.Query;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQyOTQ4Mw==", "url": "https://github.com/futurewei-cloud/alcor/pull/129#discussion_r393429483", "bodyText": "Like this class!", "author": "xieus", "createdAt": "2020-03-17T03:44:58Z", "path": "src/com/futurewei/alcor/controller/db/ICache.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package com.futurewei.alcor.controller.db;\n+\n+import java.util.Map;\n+\n+public interface ICache<K, V> {", "originalCommit": "40bff2a35081adfeec0d9051aae6b22a443a2de5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0ff34ff9b6d5cfc440bb1d5519a123ae4cf56d23", "chunk": "diff --git a/src/com/futurewei/alcor/controller/db/ICache.java b/src/com/futurewei/alcor/controller/db/ICache.java\nindex 4ed3ab2e..13cf0a15 100644\n--- a/src/com/futurewei/alcor/controller/db/ICache.java\n+++ b/src/com/futurewei/alcor/controller/db/ICache.java\n\n@@ -1,18 +1,21 @@\n package com.futurewei.alcor.controller.db;\n \n+import com.futurewei.alcor.controller.exception.CacheException;\n+\n import java.util.Map;\n \n public interface ICache<K, V> {\n-    V get(K var1);\n+    V get(K var1) throws CacheException;\n \n-    void put(K var1, V var2);\n+    void put(K var1, V var2) throws CacheException;\n \n-    boolean containsKey(K var1);\n+    boolean containsKey(K var1) throws CacheException;\n \n-    Map<K, V> getAll();\n+    Map<K, V> getAll() throws CacheException;\n \n-    void putAll(Map<? extends K, ? extends V> var1);\n+    void putAll(Map<? extends K, ? extends V> var1) throws CacheException;\n \n-    boolean remove(K var1);\n+    boolean remove(K var1) throws CacheException;\n \n+    Transaction getTransaction();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQzMDIwNQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/129#discussion_r393430205", "bodyText": "The class name \"Database\" is a bit generic. Use something more specific like DB\nIf different microservices uses different template, how are we going to leverage this class? For example, VPC manager might use vpcTemplate, Subnet Manager might use subnetTemplate etc.", "author": "xieus", "createdAt": "2020-03-17T03:48:13Z", "path": "src/com/futurewei/alcor/controller/db/Database.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package com.futurewei.alcor.controller.db;\n+\n+import com.futurewei.alcor.controller.db.ignite.IgniteCache;\n+import com.futurewei.alcor.controller.db.redis.RedisCache;\n+import com.futurewei.alcor.controller.model.PortState;\n+import com.futurewei.alcor.controller.model.SubnetState;\n+import com.futurewei.alcor.controller.model.VpcState;\n+import org.apache.ignite.client.IgniteClient;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.data.redis.core.RedisTemplate;\n+import org.springframework.stereotype.Component;\n+\n+@ComponentScan\n+@Component\n+public class Database {", "originalCommit": "40bff2a35081adfeec0d9051aae6b22a443a2de5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIyOTg2OA==", "url": "https://github.com/futurewei-cloud/alcor/pull/129#discussion_r394229868", "bodyText": "Maybe it's time to reconsider a new name.", "author": "chenpiaoping", "createdAt": "2020-03-18T10:03:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQzMDIwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "0ff34ff9b6d5cfc440bb1d5519a123ae4cf56d23", "chunk": "diff --git a/src/com/futurewei/alcor/controller/db/Database.java b/src/com/futurewei/alcor/controller/db/Database.java\ndeleted file mode 100644\nindex 6c5ad1b9..00000000\n--- a/src/com/futurewei/alcor/controller/db/Database.java\n+++ /dev/null\n\n@@ -1,62 +0,0 @@\n-package com.futurewei.alcor.controller.db;\n-\n-import com.futurewei.alcor.controller.db.ignite.IgniteCache;\n-import com.futurewei.alcor.controller.db.redis.RedisCache;\n-import com.futurewei.alcor.controller.model.PortState;\n-import com.futurewei.alcor.controller.model.SubnetState;\n-import com.futurewei.alcor.controller.model.VpcState;\n-import org.apache.ignite.client.IgniteClient;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.ComponentScan;\n-import org.springframework.data.redis.core.RedisTemplate;\n-import org.springframework.stereotype.Component;\n-\n-@ComponentScan\n-@Component\n-public class Database {\n-    @Autowired(required = false)\n-    private IgniteClient igniteClient;\n-\n-    @Autowired\n-    RedisTemplate<String, VpcState> vpcTemplate;\n-\n-    @Autowired\n-    RedisTemplate<String, SubnetState> subnetTemplate;\n-\n-    @Autowired\n-    RedisTemplate<String, PortState> portTemplate;\n-\n-    @Bean\n-    Database databaseInstance() {\n-        return new Database();\n-    }\n-\n-    private ICache getIgniteCache(String name) {\n-        return new IgniteCache<>(igniteClient, name);\n-    }\n-\n-    public ICache getVpcCache(String name) {\n-        if (igniteClient != null) {\n-            return getIgniteCache(name);\n-        }\n-\n-        return new RedisCache<>(vpcTemplate, name);\n-    }\n-\n-    public ICache getSubnetCache(String name) {\n-        if (igniteClient != null) {\n-            return getIgniteCache(name);\n-        }\n-\n-        return new RedisCache<>(subnetTemplate, name);\n-    }\n-\n-    public ICache getPortCache(String name) {\n-        if (igniteClient != null) {\n-            return getIgniteCache(name);\n-        }\n-\n-        return new RedisCache<>(portTemplate, name);\n-    }\n-}\n"}}, {"oid": "0ff34ff9b6d5cfc440bb1d5519a123ae4cf56d23", "url": "https://github.com/futurewei-cloud/alcor/commit/0ff34ff9b6d5cfc440bb1d5519a123ae4cf56d23", "message": "add transaction for db cahche and SSL for ignite connection", "committedDate": "2020-03-19T10:35:49Z", "type": "commit"}, {"oid": "11af7fa64e8dead0e43c0e01dfa7fc4a9acaf981", "url": "https://github.com/futurewei-cloud/alcor/commit/11af7fa64e8dead0e43c0e01dfa7fc4a9acaf981", "message": "SSL for ignite connection is optional", "committedDate": "2020-03-19T12:35:09Z", "type": "commit"}, {"oid": "874f5ebabad9fa5c776494a931ae176d2be5132f", "url": "https://github.com/futurewei-cloud/alcor/commit/874f5ebabad9fa5c776494a931ae176d2be5132f", "message": "Set the default value of ignite's SSL configuration to null", "committedDate": "2020-03-20T03:17:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY0ODMzNA==", "url": "https://github.com/futurewei-cloud/alcor/pull/129#discussion_r397648334", "bodyText": "Can you rename this directory from cache.repo to db.repo? Thanks.", "author": "xieus", "createdAt": "2020-03-25T07:19:25Z", "path": "src/com/futurewei/alcor/controller/cache/repo/ICacheRepository.java", "diffHunk": "@@ -16,15 +16,17 @@\n \n package com.futurewei.alcor.controller.cache.repo;", "originalCommit": "874f5ebabad9fa5c776494a931ae176d2be5132f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "694a5b6500d957c42a133674c9b203fb44eae940", "chunk": "diff --git a/src/com/futurewei/alcor/controller/cache/repo/ICacheRepository.java b/src/com/futurewei/alcor/controller/db/repo/ICacheRepository.java\nsimilarity index 95%\nrename from src/com/futurewei/alcor/controller/cache/repo/ICacheRepository.java\nrename to src/com/futurewei/alcor/controller/db/repo/ICacheRepository.java\nindex cd92b3b0..2df78e8a 100644\n--- a/src/com/futurewei/alcor/controller/cache/repo/ICacheRepository.java\n+++ b/src/com/futurewei/alcor/controller/db/repo/ICacheRepository.java\n\n@@ -14,7 +14,7 @@ Licensed under the Apache License, Version 2.0 (the \"License\");\n         limitations under the License.\n */\n \n-package com.futurewei.alcor.controller.cache.repo;\n+package com.futurewei.alcor.controller.db.repo;\n \n import com.futurewei.alcor.controller.exception.CacheException;\n \n"}}, {"oid": "694a5b6500d957c42a133674c9b203fb44eae940", "url": "https://github.com/futurewei-cloud/alcor/commit/694a5b6500d957c42a133674c9b203fb44eae940", "message": "Rename the directory cache.repo to db.repo", "committedDate": "2020-03-25T08:11:03Z", "type": "commit"}]}