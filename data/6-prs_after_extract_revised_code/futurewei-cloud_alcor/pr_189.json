{"pr_number": 189, "pr_title": "[Microservice] Node Manager - Metadata Management", "pr_createdAt": "2020-05-09T06:51:37Z", "pr_url": "https://github.com/futurewei-cloud/alcor/pull/189", "timeline": [{"oid": "83c49ad21ee25aa106d197ec00f8055b2f044c8a", "url": "https://github.com/futurewei-cloud/alcor/commit/83c49ad21ee25aa106d197ec00f8055b2f044c8a", "message": "[Micro services] Node manager", "committedDate": "2020-05-09T06:45:02Z", "type": "commit"}, {"oid": "c19d8f4661e34e09312b192a875d0114bdcb02b9", "url": "https://github.com/futurewei-cloud/alcor/commit/c19d8f4661e34e09312b192a875d0114bdcb02b9", "message": "Enable Swagger UI and docs for Node Manager", "committedDate": "2020-05-11T00:34:49Z", "type": "commit"}, {"oid": "1f87a95a5dba8c4f42c2c428295f24a7e56286f8", "url": "https://github.com/futurewei-cloud/alcor/commit/1f87a95a5dba8c4f42c2c428295f24a7e56286f8", "message": "Add Docker for Node Manager", "committedDate": "2020-05-11T04:00:31Z", "type": "commit"}, {"oid": "83fc1e4c757d6c59dfbe28f04f465fc7c892e7f5", "url": "https://github.com/futurewei-cloud/alcor/commit/83fc1e4c757d6c59dfbe28f04f465fc7c892e7f5", "message": "[Micro service] Node manager - Added UTs, consolidated classes, orgarnized files", "committedDate": "2020-05-11T22:51:09Z", "type": "commit"}, {"oid": "f7d885af1d9db68a810e4158dcad25c5b23f7268", "url": "https://github.com/futurewei-cloud/alcor/commit/f7d885af1d9db68a810e4158dcad25c5b23f7268", "message": "Merge branch 'eunju/nodemanager' of https://github.com/kimeunju108/alcor into eunju/nodemanager", "committedDate": "2020-05-11T22:57:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQxNzMwNA==", "url": "https://github.com/futurewei-cloud/alcor/pull/189#discussion_r423417304", "bodyText": "Remove this block.", "author": "xieus", "createdAt": "2020-05-12T01:52:43Z", "path": "services/node_manager/src/main/java/com/futurewei/alcor/nodemanager/dao/NodeRepository.java", "diffHunk": "@@ -60,17 +60,17 @@ public Map findAllItems() throws CacheException {\n         return cache.getAll();\n     }\n \n-    @Override\n-    public void addItem(NodeInfo nodeInfo) throws CacheException {\n-        logger.info(\"Add node, Node Id:\" + nodeInfo.getId());\n-        cache.put(nodeInfo.getId(), nodeInfo);\n-    }\n-\n-    @Override\n-    public void deleteItem(String id) throws CacheException {\n-        logger.info(\"Delete node, Node Id:\" + id);\n-        cache.remove(id);\n-    }\n+//    @Override", "originalCommit": "83fc1e4c757d6c59dfbe28f04f465fc7c892e7f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc0NjM3MA==", "url": "https://github.com/futurewei-cloud/alcor/pull/189#discussion_r423746370", "bodyText": "This is removed.", "author": "kimeunju108", "createdAt": "2020-05-12T13:46:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQxNzMwNA=="}], "type": "inlineReview", "revised_code": {"commit": "119d91d5775da7ca1bcfd13b5fbe6fdff050f7b1", "chunk": "diff --git a/services/node_manager/src/main/java/com/futurewei/alcor/nodemanager/dao/NodeRepository.java b/services/node_manager/src/main/java/com/futurewei/alcor/nodemanager/dao/NodeRepository.java\nindex 0f8b37702..67e2d4957 100644\n--- a/services/node_manager/src/main/java/com/futurewei/alcor/nodemanager/dao/NodeRepository.java\n+++ b/services/node_manager/src/main/java/com/futurewei/alcor/nodemanager/dao/NodeRepository.java\n\n@@ -60,18 +60,6 @@ public class NodeRepository implements ICacheRepository<NodeInfo> {\n         return cache.getAll();\n     }\n \n-//    @Override\n-//    public void addItem(NodeInfo nodeInfo) throws CacheException {\n-//        logger.info(\"Add node, Node Id:\" + nodeInfo.getId());\n-//        cache.put(nodeInfo.getId(), nodeInfo);\n-//    }\n-//\n-//    @Override\n-//    public void deleteItem(String id) throws CacheException {\n-//        logger.info(\"Delete node, Node Id:\" + id);\n-//        cache.remove(id);\n-//    }\n-\n     /**\n      * add a new node info to node repository\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQxODcxNw==", "url": "https://github.com/futurewei-cloud/alcor/pull/189#discussion_r423418717", "bodyText": "Could you move NodeInfo and NodeInfoJson under AlcorWeb project (/alcor/web/....)", "author": "xieus", "createdAt": "2020-05-12T01:57:52Z", "path": "services/node_manager/src/main/java/com/futurewei/alcor/nodemanager/entity/NodeInfo.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.nodemanager.entity;", "originalCommit": "f7d885af1d9db68a810e4158dcad25c5b23f7268", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc0NjkzNA==", "url": "https://github.com/futurewei-cloud/alcor/pull/189#discussion_r423746934", "bodyText": "NodeInfo & NodeInfoJson are moved to /alcor/web/entity.", "author": "kimeunju108", "createdAt": "2020-05-12T13:47:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQxODcxNw=="}], "type": "inlineReview", "revised_code": {"commit": "119d91d5775da7ca1bcfd13b5fbe6fdff050f7b1", "chunk": "diff --git a/services/node_manager/src/main/java/com/futurewei/alcor/nodemanager/entity/NodeInfo.java b/web/src/main/java/com/futurewei/alcor/web/entity/NodeInfo.java\nsimilarity index 68%\nrename from services/node_manager/src/main/java/com/futurewei/alcor/nodemanager/entity/NodeInfo.java\nrename to web/src/main/java/com/futurewei/alcor/web/entity/NodeInfo.java\nindex 6c18e180b..e07cb742b 100644\n--- a/services/node_manager/src/main/java/com/futurewei/alcor/nodemanager/entity/NodeInfo.java\n+++ b/web/src/main/java/com/futurewei/alcor/web/entity/NodeInfo.java\n\n@@ -12,18 +12,15 @@ Licensed under the Apache License, Version 2.0 (the \"License\");\n         See the License for the specific language governing permissions and\n         limitations under the License.\n */\n-package com.futurewei.alcor.nodemanager.entity;\n+package com.futurewei.alcor.web.entity;\n \n import com.fasterxml.jackson.annotation.JsonAutoDetect;\n import com.fasterxml.jackson.annotation.JsonProperty;\n-import com.futurewei.alcor.nodemanager.utils.NodeManagerConstant;\n import lombok.Data;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import java.io.Serializable;\n-import java.net.InetAddress;\n-import java.net.UnknownHostException;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQyMzg1NA==", "url": "https://github.com/futurewei-cloud/alcor/pull/189#discussion_r423423854", "bodyText": "Current UTs test the happy path. Should add more UTs to cover the sad path.\nFor example, what is supposed to happen if a hacker tries to send some random Ip and Mac addresses to NodeManager? The correct behavior is to reject those calls.\nDon't see necessary verification for NodeManager.", "author": "xieus", "createdAt": "2020-05-12T02:18:45Z", "path": "services/node_manager/src/test/java/com/futurewei/alcor/nodemanager/controller/NodeControllerTest.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/*Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.nodemanager.controller;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.futurewei.alcor.nodemanager.entity.NodeInfo;\n+import com.futurewei.alcor.nodemanager.entity.NodeInfoJson;\n+import com.futurewei.alcor.nodemanager.service.NodeService;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.MediaType;\n+import org.springframework.mock.web.MockMultipartFile;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\n+\n+import java.net.InetAddress;\n+\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;\n+import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest\n+@AutoConfigureMockMvc\n+public class NodeControllerTest {", "originalCommit": "f7d885af1d9db68a810e4158dcad25c5b23f7268", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3NDAyMg==", "url": "https://github.com/futurewei-cloud/alcor/pull/189#discussion_r424174022", "bodyText": "Didn't see the response so I am assuming that you are still working on these UTs.\nA good discussion about UT handling on the Alcor channel on Slack today. Please take a look.", "author": "xieus", "createdAt": "2020-05-13T05:03:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQyMzg1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYyMDc0MQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/189#discussion_r424620741", "bodyText": "More UTs for sad pass and exception handling cases.", "author": "kimeunju108", "createdAt": "2020-05-13T17:47:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQyMzg1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzMjY1NA==", "url": "https://github.com/futurewei-cloud/alcor/pull/189#discussion_r424632654", "bodyText": "Looks better now. Let us keep looking to see if any more cases might be missed.", "author": "xieus", "createdAt": "2020-05-13T18:07:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQyMzg1NA=="}], "type": "inlineReview", "revised_code": {"commit": "119d91d5775da7ca1bcfd13b5fbe6fdff050f7b1", "chunk": "diff --git a/services/node_manager/src/test/java/com/futurewei/alcor/nodemanager/controller/NodeControllerTest.java b/services/node_manager/src/test/java/com/futurewei/alcor/nodemanager/controller/NodeControllerTest.java\nindex 298dbdd99..691d3b085 100644\n--- a/services/node_manager/src/test/java/com/futurewei/alcor/nodemanager/controller/NodeControllerTest.java\n+++ b/services/node_manager/src/test/java/com/futurewei/alcor/nodemanager/controller/NodeControllerTest.java\n\n@@ -15,8 +15,8 @@ Licensed under the Apache License, Version 2.0 (the \"License\");\n package com.futurewei.alcor.nodemanager.controller;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.futurewei.alcor.nodemanager.entity.NodeInfo;\n-import com.futurewei.alcor.nodemanager.entity.NodeInfoJson;\n+import com.futurewei.alcor.web.entity.NodeInfo;\n+import com.futurewei.alcor.web.entity.NodeInfoJson;\n import com.futurewei.alcor.nodemanager.service.NodeService;\n import org.junit.Before;\n import org.junit.Test;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQyNDA5NQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/189#discussion_r423424095", "bodyText": "We should do all necessary verification before persisting the states to database.", "author": "xieus", "createdAt": "2020-05-12T02:19:49Z", "path": "services/node_manager/src/main/java/com/futurewei/alcor/nodemanager/service/implement/NodeServiceImpl.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.nodemanager.service.implement;\n+\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.nodemanager.dao.NodeRepository;\n+import com.futurewei.alcor.nodemanager.entity.NodeInfo;\n+import com.futurewei.alcor.nodemanager.service.NodeService;\n+import com.futurewei.alcor.nodemanager.utils.NodeManagerConstant;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.web.multipart.MultipartFile;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@Service\n+public class NodeServiceImpl implements NodeService {\n+    private static final Logger logger = LoggerFactory.getLogger(NodeServiceImpl.class);\n+\n+    @Autowired\n+    private NodeRepository nodeRepository;\n+\n+    public int getNodeInfoFromUpload(MultipartFile file) throws Exception {\n+        int nReturn = 0;\n+        List<NodeInfo> nodeList = new ArrayList<NodeInfo>();\n+        try {\n+            Reader reader = new BufferedReader(new InputStreamReader(file.getInputStream()));\n+            NodeFileLoader dataCenterConfigLoader = new NodeFileLoader();\n+            nodeList = dataCenterConfigLoader.getHostNodeListFromUpload(reader);\n+            if (nodeList != null) {\n+                nodeRepository.addItemBulkTransaction(nodeList);\n+                nReturn = nodeList.size();\n+            }\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        return nReturn;\n+    }\n+\n+    @Override\n+    public int getNodeInfoFromFile(String path) throws Exception {\n+        int nReturn = 0;\n+        NodeFileLoader dataCenterConfigLoader = new NodeFileLoader();\n+        List<NodeInfo> nodeList = dataCenterConfigLoader.loadAndGetHostNodeList(path);\n+        if (nodeList != null) {\n+            nodeRepository.addItemBulkTransaction(nodeList);\n+            nReturn = nodeList.size();\n+        }\n+        return nReturn;\n+    }\n+\n+    @Override\n+    public NodeInfo getNodeInfoById(String nodeId) throws Exception {\n+        if (nodeId == null)\n+            throw (new ParameterNullOrEmptyException(NodeManagerConstant.NODE_EXCEPTION_PARAMETER_NULL_EMPTY));\n+        NodeInfo nodeInfo = null;\n+        try {\n+            nodeInfo = nodeRepository.findItem(nodeId);\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+        return nodeInfo;\n+    }\n+\n+    @Override\n+    public List<NodeInfo> getAllNodes() throws Exception {\n+        List<NodeInfo> nodes = new ArrayList<NodeInfo>();\n+        try {\n+            nodes = new ArrayList(nodeRepository.findAllItems().values());\n+        } catch (Exception e) {\n+            throw e;\n+        }\n+        return nodes;\n+    }\n+\n+    @Override\n+    public NodeInfo createNodeInfo(NodeInfo nodeInfo) throws Exception {\n+        if (nodeInfo == null)\n+            throw (new ParameterNullOrEmptyException(NodeManagerConstant.NODE_EXCEPTION_PARAMETER_NULL_EMPTY));\n+        NodeInfo node = getNodeInfoById(nodeInfo.getId());\n+        if (nodeInfo != null) {\n+            try {\n+                nodeRepository.addItem(nodeInfo);", "originalCommit": "f7d885af1d9db68a810e4158dcad25c5b23f7268", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc0ODU5Mg==", "url": "https://github.com/futurewei-cloud/alcor/pull/189#discussion_r423748592", "bodyText": "Exception for validation and functions to validate data are added.", "author": "kimeunju108", "createdAt": "2020-05-12T13:49:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQyNDA5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "119d91d5775da7ca1bcfd13b5fbe6fdff050f7b1", "chunk": "diff --git a/services/node_manager/src/main/java/com/futurewei/alcor/nodemanager/service/implement/NodeServiceImpl.java b/services/node_manager/src/main/java/com/futurewei/alcor/nodemanager/service/implement/NodeServiceImpl.java\nindex 3e8ab9b91..939a716ac 100644\n--- a/services/node_manager/src/main/java/com/futurewei/alcor/nodemanager/service/implement/NodeServiceImpl.java\n+++ b/services/node_manager/src/main/java/com/futurewei/alcor/nodemanager/service/implement/NodeServiceImpl.java\n\n@@ -16,7 +16,7 @@ package com.futurewei.alcor.nodemanager.service.implement;\n \n import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n import com.futurewei.alcor.nodemanager.dao.NodeRepository;\n-import com.futurewei.alcor.nodemanager.entity.NodeInfo;\n+import com.futurewei.alcor.web.entity.*;\n import com.futurewei.alcor.nodemanager.service.NodeService;\n import com.futurewei.alcor.nodemanager.utils.NodeManagerConstant;\n import org.slf4j.Logger;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQyNDczMQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/189#discussion_r423424731", "bodyText": "Any reason that we want to pass InetAddress as an parameter?\nThe object is quite complicated.\n{\n\"host_info\": {\n\"local_ip\": {\n\"address\": [\n\"string\"\n],\n\"anyLocalAddress\": true,\n\"canonicalHostName\": \"string\",\n\"hostAddress\": \"string\",\n\"hostName\": \"string\",\n\"linkLocalAddress\": true,\n\"loopbackAddress\": true,\n\"mcglobal\": true,\n\"mclinkLocal\": true,\n\"mcnodeLocal\": true,\n\"mcorgLocal\": true,\n\"mcsiteLocal\": true,\n\"multicastAddress\": true,\n\"siteLocalAddress\": true\n},\n\"mac_address\": \"string\",\n\"node_id\": \"string\",\n\"node_name\": \"string\",\n\"server_port\": 0,\n\"veth\": \"string\"\n}\n}", "author": "xieus", "createdAt": "2020-05-12T02:22:21Z", "path": "services/node_manager/src/main/java/com/futurewei/alcor/nodemanager/entity/NodeInfo.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.nodemanager.entity;\n+\n+import com.fasterxml.jackson.annotation.JsonAutoDetect;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.futurewei.alcor.nodemanager.utils.NodeManagerConstant;\n+import lombok.Data;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.Serializable;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+@Data\n+@JsonAutoDetect(fieldVisibility = JsonAutoDetect.Visibility.ANY, getterVisibility = JsonAutoDetect.Visibility.NONE,\n+        setterVisibility = JsonAutoDetect.Visibility.NONE, creatorVisibility = JsonAutoDetect.Visibility.NONE)\n+public class NodeInfo implements Serializable {\n+    private static final Logger logger = LoggerFactory.getLogger(NodeInfo.class);\n+\n+    @JsonProperty(\"node_id\")\n+    private String id;\n+\n+    @JsonProperty(\"node_name\")\n+    private String name;\n+\n+    @JsonProperty(\"local_ip\")\n+    private InetAddress localIp;", "originalCommit": "f7d885af1d9db68a810e4158dcad25c5b23f7268", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc0ODg1NQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/189#discussion_r423748855", "bodyText": "IP address type is changed to String", "author": "kimeunju108", "createdAt": "2020-05-12T13:50:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQyNDczMQ=="}], "type": "inlineReview", "revised_code": {"commit": "119d91d5775da7ca1bcfd13b5fbe6fdff050f7b1", "chunk": "diff --git a/services/node_manager/src/main/java/com/futurewei/alcor/nodemanager/entity/NodeInfo.java b/web/src/main/java/com/futurewei/alcor/web/entity/NodeInfo.java\nsimilarity index 68%\nrename from services/node_manager/src/main/java/com/futurewei/alcor/nodemanager/entity/NodeInfo.java\nrename to web/src/main/java/com/futurewei/alcor/web/entity/NodeInfo.java\nindex 6c18e180b..e07cb742b 100644\n--- a/services/node_manager/src/main/java/com/futurewei/alcor/nodemanager/entity/NodeInfo.java\n+++ b/web/src/main/java/com/futurewei/alcor/web/entity/NodeInfo.java\n\n@@ -12,18 +12,15 @@ Licensed under the Apache License, Version 2.0 (the \"License\");\n         See the License for the specific language governing permissions and\n         limitations under the License.\n */\n-package com.futurewei.alcor.nodemanager.entity;\n+package com.futurewei.alcor.web.entity;\n \n import com.fasterxml.jackson.annotation.JsonAutoDetect;\n import com.fasterxml.jackson.annotation.JsonProperty;\n-import com.futurewei.alcor.nodemanager.utils.NodeManagerConstant;\n import lombok.Data;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import java.io.Serializable;\n-import java.net.InetAddress;\n-import java.net.UnknownHostException;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n"}}, {"oid": "119d91d5775da7ca1bcfd13b5fbe6fdff050f7b1", "url": "https://github.com/futurewei-cloud/alcor/commit/119d91d5775da7ca1bcfd13b5fbe6fdff050f7b1", "message": "[Micro services] Node manager - Moved NodeInfo & NodeInfoJson to alcor/web/entity", "committedDate": "2020-05-12T13:44:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MjYxMQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/189#discussion_r424172611", "bodyText": "A good example of exceptions handling:\nhttps://github.com/futurewei-cloud/alcor/pull/180/files#diff-9c86731ca636830c35d171bddafb3ed2\nservices/port_manager/src/main/java/com/futurewei/alcor/portmanager/exception/AllocateIpAddrException.java\nWe should identify various specific exceptions that a services might throw, and handle them in different catch blocks (although using a generic exception is easy, it leaves headaches for operation people to see the service logs as it is too generic).", "author": "xieus", "createdAt": "2020-05-13T04:58:27Z", "path": "services/node_manager/src/main/java/com/futurewei/alcor/nodemanager/controller/NodeController.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.nodemanager.controller;\n+\n+import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ResourcePersistenceException;\n+import com.futurewei.alcor.web.entity.NodeInfo;\n+import com.futurewei.alcor.web.entity.NodeInfoJson;\n+import com.futurewei.alcor.nodemanager.service.NodeService;\n+import com.futurewei.alcor.nodemanager.utils.NodeManagerConstant;\n+import com.futurewei.alcor.common.utils.RestPreconditionsUtil;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.*;\n+import org.springframework.web.multipart.MultipartFile;\n+import org.springframework.web.servlet.HandlerMapping;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.springframework.web.bind.annotation.RequestMethod.*;\n+\n+@RestController\n+public class NodeController {\n+\n+    @Autowired\n+    private NodeService service;\n+\n+    @RequestMapping(\n+            method = POST,\n+            value = {\"/nodes/upload\", \"/v4/nodes/upload\"})\n+    public String uploadFile(@RequestParam(\"file\") MultipartFile file) throws Exception {\n+        int nNode = 0;\n+        if (file == null) {\n+            return NodeManagerConstant.NODE_EXCEPTION_FILE_EMPTY;\n+        }\n+        try {\n+            nNode = service.getNodeInfoFromUpload(file);\n+        } catch (Exception e) {\n+            throw e;", "originalCommit": "119d91d5775da7ca1bcfd13b5fbe6fdff050f7b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY0OTk4Nw==", "url": "https://github.com/futurewei-cloud/alcor/pull/189#discussion_r424649987", "bodyText": "I agree and added more exceptions.", "author": "kimeunju108", "createdAt": "2020-05-13T18:36:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MjYxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "1c9ac32de9ac4532244eadda8d5bd26c2ea8246a", "chunk": "diff --git a/services/node_manager/src/main/java/com/futurewei/alcor/nodemanager/controller/NodeController.java b/services/node_manager/src/main/java/com/futurewei/alcor/nodemanager/controller/NodeController.java\nindex 8f8036860..843052ff1 100644\n--- a/services/node_manager/src/main/java/com/futurewei/alcor/nodemanager/controller/NodeController.java\n+++ b/services/node_manager/src/main/java/com/futurewei/alcor/nodemanager/controller/NodeController.java\n\n@@ -15,6 +15,7 @@ Licensed under the Apache License, Version 2.0 (the \"License\");\n package com.futurewei.alcor.nodemanager.controller;\n \n import com.futurewei.alcor.common.exception.ParameterNullOrEmptyException;\n+import com.futurewei.alcor.common.exception.ParameterUnexpectedValueException;\n import com.futurewei.alcor.common.exception.ResourcePersistenceException;\n import com.futurewei.alcor.web.entity.NodeInfo;\n import com.futurewei.alcor.web.entity.NodeInfoJson;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MjgwOA==", "url": "https://github.com/futurewei-cloud/alcor/pull/189#discussion_r424172808", "bodyText": "Comments are very good. Let us add more to elsewhere, especially for Controller, Services and Repo codes.", "author": "xieus", "createdAt": "2020-05-13T04:59:21Z", "path": "services/node_manager/src/main/java/com/futurewei/alcor/nodemanager/dao/NodeRepository.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.nodemanager.dao;\n+\n+import com.futurewei.alcor.common.db.CacheException;\n+import com.futurewei.alcor.common.db.CacheFactory;\n+import com.futurewei.alcor.common.db.ICache;\n+import com.futurewei.alcor.common.db.Transaction;\n+import com.futurewei.alcor.common.repo.ICacheRepository;\n+import com.futurewei.alcor.web.entity.NodeInfo;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.stereotype.Repository;\n+\n+import javax.annotation.PostConstruct;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Repository\n+@ComponentScan(value = \"com.futurewei.alcor.common.db\")\n+public class NodeRepository implements ICacheRepository<NodeInfo> {\n+    private static final Logger logger = LoggerFactory.getLogger(NodeRepository.class);\n+    private ICache<String, NodeInfo> cache;\n+\n+    @Autowired\n+    public NodeRepository(CacheFactory cacheFactory) {\n+        cache = cacheFactory.getCache(NodeInfo.class);\n+    }\n+\n+    public ICache<String, NodeInfo> getCache() {\n+        return cache;\n+    }\n+\n+    @PostConstruct\n+    private void init() {\n+        logger.info(\"NodeRepository init completed\");\n+    }\n+\n+    @Override\n+    public NodeInfo findItem(String id) throws CacheException {\n+        return cache.get(id);\n+    }\n+\n+    @Override\n+    public Map findAllItems() throws CacheException {\n+        return cache.getAll();\n+    }\n+\n+    /**", "originalCommit": "119d91d5775da7ca1bcfd13b5fbe6fdff050f7b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYxODg1OA==", "url": "https://github.com/futurewei-cloud/alcor/pull/189#discussion_r424618858", "bodyText": "They are reverted.", "author": "kimeunju108", "createdAt": "2020-05-13T17:44:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MjgwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDYzMzQyMA==", "url": "https://github.com/futurewei-cloud/alcor/pull/189#discussion_r424633420", "bodyText": "Sorry, do you mean you remove the comments?", "author": "xieus", "createdAt": "2020-05-13T18:08:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MjgwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1MDAxMw==", "url": "https://github.com/futurewei-cloud/alcor/pull/189#discussion_r424650013", "bodyText": "The configuration was added again. Sorry for confusion. I will commit soon.", "author": "kimeunju108", "createdAt": "2020-05-13T18:36:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MjgwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcwNjc4OQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/189#discussion_r424706789", "bodyText": "Okay, we are talking about different things. This refers to the comments you made to the method \"findItem\" and \"findAllItems\". This is a very good practice so let us practice it more often for other important methods in Controller, Services and Repo.", "author": "xieus", "createdAt": "2020-05-13T20:19:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MjgwOA=="}], "type": "inlineReview", "revised_code": {"commit": "ed223b7cf018a077752f180e1fbbdec613fb0885", "chunk": "diff --git a/services/node_manager/src/main/java/com/futurewei/alcor/nodemanager/dao/NodeRepository.java b/services/node_manager/src/main/java/com/futurewei/alcor/nodemanager/dao/NodeRepository.java\nindex 67e2d4957..c34b93514 100644\n--- a/services/node_manager/src/main/java/com/futurewei/alcor/nodemanager/dao/NodeRepository.java\n+++ b/services/node_manager/src/main/java/com/futurewei/alcor/nodemanager/dao/NodeRepository.java\n\n@@ -50,11 +50,25 @@ public class NodeRepository implements ICacheRepository<NodeInfo> {\n         logger.info(\"NodeRepository init completed\");\n     }\n \n+    /**\n+     * add a new node info to node repository\n+     *\n+     * @param id node id\n+     * @return node information\n+     * @throws Exception Db or cache operation exception\n+     */\n     @Override\n     public NodeInfo findItem(String id) throws CacheException {\n         return cache.get(id);\n     }\n \n+    /**\n+     * find all nodes' information\n+     *\n+     * @param\n+     * @return nodes map\n+     * @throws Exception Db or cache operation exception\n+     */\n     @Override\n     public Map findAllItems() throws CacheException {\n         return cache.getAll();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MzIzOA==", "url": "https://github.com/futurewei-cloud/alcor/pull/189#discussion_r424173238", "bodyText": "This hides the exception on the service level which Controller don't have visibility. Please check the good example in the comments above related to exception handling.", "author": "xieus", "createdAt": "2020-05-13T05:00:53Z", "path": "services/node_manager/src/main/java/com/futurewei/alcor/nodemanager/service/implement/NodeFileLoader.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+\n+package com.futurewei.alcor.nodemanager.service.implement;\n+\n+import com.futurewei.alcor.nodemanager.exception.InvalidDataException;\n+import com.futurewei.alcor.nodemanager.utils.NodeManagerConstant;\n+import com.futurewei.alcor.web.entity.NodeInfo;\n+import org.json.simple.JSONArray;\n+import org.json.simple.JSONObject;\n+import org.json.simple.parser.JSONParser;\n+import org.json.simple.parser.ParseException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class NodeFileLoader {\n+    private static final Logger logger = LoggerFactory.getLogger(NodeFileLoader.class);\n+\n+    public NodeFileLoader() {\n+    }\n+\n+    public List<NodeInfo> getHostNodeListFromUpload(Reader reader) {\n+        JSONParser jsonParser = new JSONParser();\n+        List<NodeInfo> nodeInfos = new ArrayList<>();\n+        logger.info(this.getClass().getName(), \"getHostNodeListFromUpload\");\n+        try {\n+            JSONObject obj = (JSONObject) jsonParser.parse(reader);\n+            JSONArray nodeList = (JSONArray) obj.get(\"Hosts\");\n+\n+            nodeList.forEach(node -> {\n+                NodeInfo hostNode = null;\n+                try {\n+                    hostNode = this.parseNodeObject((JSONObject) node);\n+                } catch (Exception e) {\n+                    throw new RuntimeException(e);\n+                }\n+                if (hostNode != null) nodeInfos.add(hostNode);\n+            });\n+        } catch (FileNotFoundException e) {\n+            e.printStackTrace();", "originalCommit": "119d91d5775da7ca1bcfd13b5fbe6fdff050f7b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY1MDA1Ng==", "url": "https://github.com/futurewei-cloud/alcor/pull/189#discussion_r424650056", "bodyText": "I agree. More exceptions are added.", "author": "kimeunju108", "createdAt": "2020-05-13T18:36:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MzIzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc1NDY3NQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/189#discussion_r424754675", "bodyText": "Maybe we could use Logger to give a bit more details.\nThe current handling does not differentiate exceptions.", "author": "xieus", "createdAt": "2020-05-13T21:57:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MzIzOA=="}], "type": "inlineReview", "revised_code": {"commit": "ed223b7cf018a077752f180e1fbbdec613fb0885", "chunk": "diff --git a/services/node_manager/src/main/java/com/futurewei/alcor/nodemanager/service/implement/NodeFileLoader.java b/services/node_manager/src/main/java/com/futurewei/alcor/nodemanager/service/implement/NodeFileLoader.java\nindex 16e1a4ac9..efe85c6e5 100644\n--- a/services/node_manager/src/main/java/com/futurewei/alcor/nodemanager/service/implement/NodeFileLoader.java\n+++ b/services/node_manager/src/main/java/com/futurewei/alcor/nodemanager/service/implement/NodeFileLoader.java\n\n@@ -38,7 +38,7 @@ public class NodeFileLoader {\n     public NodeFileLoader() {\n     }\n \n-    public List<NodeInfo> getHostNodeListFromUpload(Reader reader) {\n+    public List<NodeInfo> getHostNodeListFromUpload(Reader reader) throws IOException, ParseException{\n         JSONParser jsonParser = new JSONParser();\n         List<NodeInfo> nodeInfos = new ArrayList<>();\n         logger.info(this.getClass().getName(), \"getHostNodeListFromUpload\");\n"}}, {"oid": "1c9ac32de9ac4532244eadda8d5bd26c2ea8246a", "url": "https://github.com/futurewei-cloud/alcor/commit/1c9ac32de9ac4532244eadda8d5bd26c2ea8246a", "message": "[Micro services] Node manager - add sad pass UTs", "committedDate": "2020-05-13T15:55:38Z", "type": "commit"}, {"oid": "9264354b5ec5cbde604a1077a613996b05b17e65", "url": "https://github.com/futurewei-cloud/alcor/commit/9264354b5ec5cbde604a1077a613996b05b17e65", "message": "[Micro services] Node manager - add sad pass & exception handling UTs", "committedDate": "2020-05-13T16:14:02Z", "type": "commit"}, {"oid": "ed223b7cf018a077752f180e1fbbdec613fb0885", "url": "https://github.com/futurewei-cloud/alcor/commit/ed223b7cf018a077752f180e1fbbdec613fb0885", "message": "[Micro services] Node manager - added exceptions and updated application.properties", "committedDate": "2020-05-13T18:35:54Z", "type": "commit"}, {"oid": "7530d61c4c24e8ab1d48d20ef1a2bda043bb6f41", "url": "https://github.com/futurewei-cloud/alcor/commit/7530d61c4c24e8ab1d48d20ef1a2bda043bb6f41", "message": "[Micro services] Node manager - added comments and logs", "committedDate": "2020-05-13T23:28:15Z", "type": "commit"}]}