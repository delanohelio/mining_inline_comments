{"pr_number": 486, "pr_title": "[Data-Plane Mgr] Add Local Cache Support to DPM", "pr_createdAt": "2020-11-26T11:11:46Z", "pr_url": "https://github.com/futurewei-cloud/alcor/pull/486", "timeline": [{"oid": "3b20ef14557cd9a73dea869ef5cb4242d26e5a99", "url": "https://github.com/futurewei-cloud/alcor/commit/3b20ef14557cd9a73dea869ef5cb4242d26e5a99", "message": "Split DpmService into multiple files according to resource type", "committedDate": "2020-11-26T11:53:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyMjQ4OQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/486#discussion_r531422489", "bodyText": "A quick question: why do we remove these interfaces?", "author": "xieus", "createdAt": "2020-11-27T07:26:44Z", "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/DataPlaneClient.java", "diffHunk": "@@ -26,15 +26,7 @@\n \n @Component\n public interface DataPlaneClient {\n-    Map<String, List<GoalStateOperationStatus>> createGoalStates(GoalState goalState, String hostIp) throws Exception;\n-\n-    List<Map<String, List<GoalStateOperationStatus>>> createGoalStates(List<UnicastGoalState> unicastGoalStates) throws Exception;\n-\n-    List<Map<String, List<GoalStateOperationStatus>>> updateGoalStates(List<UnicastGoalState> unicastGoalStates) throws Exception;\n-\n-    List<Map<String, List<GoalStateOperationStatus>>> deleteGoalStates(List<UnicastGoalState> unicastGoalStates) throws Exception;", "originalCommit": "d36fa8048e495b5a75fd909ec134d68a98841916", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyMzEwNQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/486#discussion_r531423105", "bodyText": "Actually it is okay to keep the interfaces which reminds us that we need to implement in the future.", "author": "xieus", "createdAt": "2020-11-27T07:28:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyMjQ4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQzODY3Mw==", "url": "https://github.com/futurewei-cloud/alcor/pull/486#discussion_r531438673", "bodyText": "I was thinking about adding it when I needed it.", "author": "chenpiaoping", "createdAt": "2020-11-27T08:08:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyMjQ4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "0b4070f9375688ce48b5498571e31588eacdee13", "chunk": "diff --git a/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/DataPlaneClient.java b/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/DataPlaneClient.java\nindex 142eff84..098bb910 100644\n--- a/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/DataPlaneClient.java\n+++ b/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/DataPlaneClient.java\n\n@@ -26,7 +26,15 @@ import java.util.Map;\n \n @Component\n public interface DataPlaneClient {\n-    List<String> createGoalStates(List<UnicastGoalState> unicastGoalStates) throws Exception;\n-    List<String> createGoalStates(List<UnicastGoalState> unicastGoalStates,\n-                                  MulticastGoalState multicastGoalState) throws Exception;\n+    Map<String, List<GoalStateOperationStatus>> createGoalStates(GoalState goalState, String hostIp) throws Exception;\n+\n+    List<Map<String, List<GoalStateOperationStatus>>> createGoalStates(List<UnicastGoalState> unicastGoalStates) throws Exception;\n+\n+    List<Map<String, List<GoalStateOperationStatus>>> updateGoalStates(List<UnicastGoalState> unicastGoalStates) throws Exception;\n+\n+    List<Map<String, List<GoalStateOperationStatus>>> deleteGoalStates(List<UnicastGoalState> unicastGoalStates) throws Exception;\n+\n+    List<Map<String, List<GoalStateOperationStatus>>> createGoalStates(\n+            List<UnicastGoalState> unicastGoalStates, MulticastGoalState multicastGoalState) throws Exception;\n+\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyNDc4MA==", "url": "https://github.com/futurewei-cloud/alcor/pull/486#discussion_r531424780", "bodyText": "ResourceService class could be moved on layer up to com.futurewei.alcor.dataplane.service;", "author": "xieus", "createdAt": "2020-11-27T07:33:17Z", "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/service/ovs/ResourceService.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.dataplane.service.ovs;\n+\n+import com.futurewei.alcor.schema.Common.OperationType;\n+\n+public class ResourceService {", "originalCommit": "d36fa8048e495b5a75fd909ec134d68a98841916", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0b4070f9375688ce48b5498571e31588eacdee13", "chunk": "diff --git a/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/service/ovs/ResourceService.java b/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/service/ovs/ResourceService.java\ndeleted file mode 100644\nindex 6cee2e73..00000000\n--- a/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/service/ovs/ResourceService.java\n+++ /dev/null\n\n@@ -1,37 +0,0 @@\n-/*\n-Copyright 2019 The Alcor Authors.\n-\n-Licensed under the Apache License, Version 2.0 (the \"License\");\n-        you may not use this file except in compliance with the License.\n-        You may obtain a copy of the License at\n-\n-        http://www.apache.org/licenses/LICENSE-2.0\n-\n-        Unless required by applicable law or agreed to in writing, software\n-        distributed under the License is distributed on an \"AS IS\" BASIS,\n-        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-        See the License for the specific language governing permissions and\n-        limitations under the License.\n-*/\n-package com.futurewei.alcor.dataplane.service.ovs;\n-\n-import com.futurewei.alcor.schema.Common.OperationType;\n-\n-public class ResourceService {\n-    protected static final int FORMAT_REVISION_NUMBER = 1;\n-\n-    protected OperationType getOperationType(com.futurewei.alcor.common.enumClass.OperationType operationType) {\n-        switch (operationType) {\n-            case CREATE:\n-                return OperationType.CREATE;\n-            case UPDATE:\n-                return OperationType.UPDATE;\n-            case INFO:\n-                return OperationType.INFO;\n-            case DELETE:\n-                return OperationType.DELETE;\n-            default:\n-                return OperationType.UNRECOGNIZED;\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyODA4NA==", "url": "https://github.com/futurewei-cloud/alcor/pull/486#discussion_r531428084", "bodyText": "Suggest to log this unusual portEntity (at least on the DEBUG level) as this is an unexpected scenario.", "author": "xieus", "createdAt": "2020-11-27T07:42:20Z", "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/cache/LocalCacheImpl.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.dataplane.cache;\n+\n+import com.futurewei.alcor.dataplane.exception.SubnetEntityNotFound;\n+import com.futurewei.alcor.web.entity.dataplane.InternalPortEntity;\n+import com.futurewei.alcor.web.entity.dataplane.InternalSubnetEntity;\n+import com.futurewei.alcor.web.entity.dataplane.v2.NetworkConfiguration;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+import com.futurewei.alcor.web.entity.port.PortHostInfo;\n+import com.futurewei.alcor.web.entity.subnet.InternalSubnetPorts;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Repository\n+public class LocalCacheImpl implements LocalCache {\n+    @Autowired\n+    private SubnetPortsCache subnetPortsCache;\n+\n+    @Override\n+    public void addSubnetPorts(NetworkConfiguration networkConfig) throws Exception {\n+        List<InternalPortEntity> portEntities = networkConfig.getPortEntities();\n+        if (portEntities == null) {\n+            return;\n+        }\n+\n+        Map<String, InternalSubnetPorts> subnetPortsMap = new HashMap<>();\n+        for (InternalPortEntity portEntity: portEntities) {\n+            List<PortEntity.FixedIp> fixedIps = portEntity.getFixedIps();\n+            if (fixedIps == null) {\n+                continue;", "originalCommit": "d36fa8048e495b5a75fd909ec134d68a98841916", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQzODg3NA==", "url": "https://github.com/futurewei-cloud/alcor/pull/486#discussion_r531438874", "bodyText": "Good idea", "author": "chenpiaoping", "createdAt": "2020-11-27T08:08:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyODA4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1MTg5Mg==", "url": "https://github.com/futurewei-cloud/alcor/pull/486#discussion_r533951892", "bodyText": "fixed", "author": "chenpiaoping", "createdAt": "2020-12-02T07:36:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyODA4NA=="}], "type": "inlineReview", "revised_code": {"commit": "6961a9a8d6df07c3cf745d48cded249527a4011e", "chunk": "diff --git a/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/cache/LocalCacheImpl.java b/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/cache/LocalCacheImpl.java\nindex 2e5c4f45..419cbe8e 100644\n--- a/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/cache/LocalCacheImpl.java\n+++ b/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/cache/LocalCacheImpl.java\n\n@@ -15,6 +15,7 @@ Licensed under the Apache License, Version 2.0 (the \"License\");\n */\n package com.futurewei.alcor.dataplane.cache;\n \n+import com.futurewei.alcor.dataplane.client.grpc.DataPlaneClientImpl;\n import com.futurewei.alcor.dataplane.exception.SubnetEntityNotFound;\n import com.futurewei.alcor.web.entity.dataplane.InternalPortEntity;\n import com.futurewei.alcor.web.entity.dataplane.InternalSubnetEntity;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyODk1NA==", "url": "https://github.com/futurewei-cloud/alcor/pull/486#discussion_r531428954", "bodyText": "GW port could be retrieved from SubnetEntity I believe.", "author": "xieus", "createdAt": "2020-11-27T07:44:52Z", "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/cache/LocalCacheImpl.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+Copyright 2019 The Alcor Authors.\n+\n+Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+        Unless required by applicable law or agreed to in writing, software\n+        distributed under the License is distributed on an \"AS IS\" BASIS,\n+        WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions and\n+        limitations under the License.\n+*/\n+package com.futurewei.alcor.dataplane.cache;\n+\n+import com.futurewei.alcor.dataplane.exception.SubnetEntityNotFound;\n+import com.futurewei.alcor.web.entity.dataplane.InternalPortEntity;\n+import com.futurewei.alcor.web.entity.dataplane.InternalSubnetEntity;\n+import com.futurewei.alcor.web.entity.dataplane.v2.NetworkConfiguration;\n+import com.futurewei.alcor.web.entity.port.PortEntity;\n+import com.futurewei.alcor.web.entity.port.PortHostInfo;\n+import com.futurewei.alcor.web.entity.subnet.InternalSubnetPorts;\n+import com.futurewei.alcor.web.entity.subnet.SubnetEntity;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+@Repository\n+public class LocalCacheImpl implements LocalCache {\n+    @Autowired\n+    private SubnetPortsCache subnetPortsCache;\n+\n+    @Override\n+    public void addSubnetPorts(NetworkConfiguration networkConfig) throws Exception {\n+        List<InternalPortEntity> portEntities = networkConfig.getPortEntities();\n+        if (portEntities == null) {\n+            return;\n+        }\n+\n+        Map<String, InternalSubnetPorts> subnetPortsMap = new HashMap<>();\n+        for (InternalPortEntity portEntity: portEntities) {\n+            List<PortEntity.FixedIp> fixedIps = portEntity.getFixedIps();\n+            if (fixedIps == null) {\n+                continue;\n+            }\n+\n+            for (PortEntity.FixedIp fixedIp: fixedIps) {\n+                String subnetId = fixedIp.getSubnetId();\n+\n+                PortHostInfo portHostInfo = new PortHostInfo();\n+                portHostInfo.setPortMac(portEntity.getMacAddress());\n+                portHostInfo.setPortIp(fixedIp.getIpAddress());\n+                portHostInfo.setPortId(portEntity.getId());\n+                portHostInfo.setHostIp(portEntity.getBindingHostIP());\n+                portHostInfo.setHostId(portEntity.getBindingHostId());\n+\n+                InternalSubnetPorts subnetPorts = subnetPortsMap.get(subnetId);\n+                if (subnetPorts == null) {\n+                    SubnetEntity subnetEntity = getSubnetEntity(networkConfig, fixedIp.getSubnetId());\n+                    subnetPorts = new InternalSubnetPorts();\n+                    subnetPorts.setSubnetId(subnetId);\n+                    subnetPorts.setGatewayPortMac(subnetEntity.getGatewayMacAddress());\n+                    subnetPorts.setGatewayPortIp(subnetEntity.getGatewayIp());\n+\n+                    //FIXME: get the gateway port id", "originalCommit": "d36fa8048e495b5a75fd909ec134d68a98841916", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ0MDE0MQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/486#discussion_r531440141", "bodyText": "OK, I'll check it out.", "author": "chenpiaoping", "createdAt": "2020-11-27T08:11:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyODk1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk1MTc0MA==", "url": "https://github.com/futurewei-cloud/alcor/pull/486#discussion_r533951740", "bodyText": "fixed", "author": "chenpiaoping", "createdAt": "2020-12-02T07:35:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQyODk1NA=="}], "type": "inlineReview", "revised_code": {"commit": "6961a9a8d6df07c3cf745d48cded249527a4011e", "chunk": "diff --git a/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/cache/LocalCacheImpl.java b/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/cache/LocalCacheImpl.java\nindex 2e5c4f45..419cbe8e 100644\n--- a/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/cache/LocalCacheImpl.java\n+++ b/services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/cache/LocalCacheImpl.java\n\n@@ -15,6 +15,7 @@ Licensed under the Apache License, Version 2.0 (the \"License\");\n */\n package com.futurewei.alcor.dataplane.cache;\n \n+import com.futurewei.alcor.dataplane.client.grpc.DataPlaneClientImpl;\n import com.futurewei.alcor.dataplane.exception.SubnetEntityNotFound;\n import com.futurewei.alcor.web.entity.dataplane.InternalPortEntity;\n import com.futurewei.alcor.web.entity.dataplane.InternalSubnetEntity;\n"}}, {"oid": "0b4070f9375688ce48b5498571e31588eacdee13", "url": "https://github.com/futurewei-cloud/alcor/commit/0b4070f9375688ce48b5498571e31588eacdee13", "message": "Add local cache for DPM", "committedDate": "2020-12-02T03:48:55Z", "type": "commit"}, {"oid": "8cacd73404d7b4b59ad6787bbd23b88b1af68e9a", "url": "https://github.com/futurewei-cloud/alcor/commit/8cacd73404d7b4b59ad6787bbd23b88b1af68e9a", "message": "Split DpmService into multiple files according to resource type", "committedDate": "2020-12-02T03:50:41Z", "type": "commit"}, {"oid": "dcc79021db2cda7714e42d1ae864b7f488660952", "url": "https://github.com/futurewei-cloud/alcor/commit/dcc79021db2cda7714e42d1ae864b7f488660952", "message": "Modify the content of dpm processing result", "committedDate": "2020-12-02T03:51:48Z", "type": "commit"}, {"oid": "6961a9a8d6df07c3cf745d48cded249527a4011e", "url": "https://github.com/futurewei-cloud/alcor/commit/6961a9a8d6df07c3cf745d48cded249527a4011e", "message": "Rebase from master", "committedDate": "2020-12-02T07:32:28Z", "type": "commit"}, {"oid": "6961a9a8d6df07c3cf745d48cded249527a4011e", "url": "https://github.com/futurewei-cloud/alcor/commit/6961a9a8d6df07c3cf745d48cded249527a4011e", "message": "Rebase from master", "committedDate": "2020-12-02T07:32:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE2NjY4MQ==", "url": "https://github.com/futurewei-cloud/alcor/pull/486#discussion_r534166681", "bodyText": "In the case of large number of neighbors, this for-loop could slow down potentially. See if we can optimize this part. @chenpiaoping", "author": "xieus", "createdAt": "2020-12-02T13:29:43Z", "path": "services/data_plane_manager/src/main/java/com/futurewei/alcor/dataplane/client/pulsar/DataPlaneClientImpl.java", "diffHunk": "@@ -102,22 +95,32 @@ private void createGoalState(MulticastGoalState multicastGoalState) throws Excep\n \n             multicastGoalState.setNextTopics(groupTopics);\n \n-            Producer<MulticastGoalStateByte> producer = pulsarClient\n-                    .newProducer(JSONSchema.of(MulticastGoalStateByte.class))\n-                    .topic(multicastTopic)\n-                    .enableBatching(false)\n-                    .create();\n-\n-            producer.send(multicastGoalState.getMulticastGoalStateByte());\n+            try {\n+                Producer<MulticastGoalStateByte> producer = pulsarClient\n+                        .newProducer(JSONSchema.of(MulticastGoalStateByte.class))\n+                        .topic(multicastTopic)\n+                        .enableBatching(false)\n+                        .create();\n+\n+                producer.send(multicastGoalState.getMulticastGoalStateByte());\n+            } catch (Exception e) {\n+                LOG.error(\"Send multicastGoalState to topic:{} failed: \", multicastTopic, e);\n+                failedHosts.addAll(multicastGoalState.getHostIps());\n+                continue;\n+            }\n \n             LOG.info(\"Send multicastGoalState to topic:{} success, \" +\n                             \"groupTopics: {}, unicastGoalStates: {}\",\n                     multicastTopic, groupTopics, multicastGoalState);\n         }\n+\n+        return failedHosts;\n     }\n \n     @Override\n-    public List<Map<String, List<Goalstateprovisioner.GoalStateOperationReply.GoalStateOperationStatus>>> createGoalStates(List<UnicastGoalState> unicastGoalStates) throws Exception {\n+    public List<String> createGoalStates(List<UnicastGoalState> unicastGoalStates) throws Exception {\n+        List<String> failedHosts = new ArrayList<>();\n+\n         for (UnicastGoalState unicastGoalState: unicastGoalStates) {", "originalCommit": "6961a9a8d6df07c3cf745d48cded249527a4011e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}