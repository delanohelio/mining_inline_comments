{"pr_number": 5102, "pr_title": "[LW] ETE tests", "pr_createdAt": "2020-11-05T15:31:54Z", "pr_url": "https://github.com/palantir/atlasdb/pull/5102", "timeline": [{"oid": "6b908f20529c46b3bc5fa6220d6eee30e574a835", "url": "https://github.com/palantir/atlasdb/commit/6b908f20529c46b3bc5fa6220d6eee30e574a835", "message": "actually filter out the right token", "committedDate": "2020-11-05T10:40:00Z", "type": "commit"}, {"oid": "db7fe6271790c889988405a3490b5885ab2863e9", "url": "https://github.com/palantir/atlasdb/commit/db7fe6271790c889988405a3490b5885ab2863e9", "message": "Add generated changelog entries", "committedDate": "2020-11-05T10:40:00Z", "type": "commit"}, {"oid": "9bf75cc0a3c7053c33fd75ae5e518a8ed9f1cfb7", "url": "https://github.com/palantir/atlasdb/commit/9bf75cc0a3c7053c33fd75ae5e518a8ed9f1cfb7", "message": "fresh start", "committedDate": "2020-11-05T15:30:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE0MTMxNg==", "url": "https://github.com/palantir/atlasdb/pull/5102#discussion_r518141316", "bodyText": "I know I don't need so many annotations - will remove when I want to get this in.", "author": "Jolyon-S", "createdAt": "2020-11-05T15:32:38Z", "path": "atlasdb-ete-tests/src/main/java/com/palantir/atlasdb/lock/EteLockWatchResource.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.lock;\n+\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"lock-watch\")\n+public interface EteLockWatchResource {\n+    @POST\n+    @Path(\"start-transaction\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @Consumes(MediaType.APPLICATION_JSON)", "originalCommit": "9bf75cc0a3c7053c33fd75ae5e518a8ed9f1cfb7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "280c50c93e3083e1a5b1333179872da52492771a", "chunk": "diff --git a/atlasdb-ete-tests/src/main/java/com/palantir/atlasdb/lock/EteLockWatchResource.java b/atlasdb-ete-tests/src/main/java/com/palantir/atlasdb/lock/EteLockWatchResource.java\nindex 4da0c05da4..2b7d849288 100644\n--- a/atlasdb-ete-tests/src/main/java/com/palantir/atlasdb/lock/EteLockWatchResource.java\n+++ b/atlasdb-ete-tests/src/main/java/com/palantir/atlasdb/lock/EteLockWatchResource.java\n\n@@ -17,6 +17,7 @@\n package com.palantir.atlasdb.lock;\n \n import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.LockWatchVersion;\n import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.POST;\n"}}, {"oid": "280c50c93e3083e1a5b1333179872da52492771a", "url": "https://github.com/palantir/atlasdb/commit/280c50c93e3083e1a5b1333179872da52492771a", "message": "better", "committedDate": "2020-11-05T17:24:02Z", "type": "commit"}, {"oid": "44980e5f9c28bcef4c3302de04c1012dc3c54998", "url": "https://github.com/palantir/atlasdb/commit/44980e5f9c28bcef4c3302de04c1012dc3c54998", "message": "force circle", "committedDate": "2020-11-05T17:26:53Z", "type": "commit"}, {"oid": "0e447cbec24d32a3f06609e74e5ad1b4cf5c7f3c", "url": "https://github.com/palantir/atlasdb/commit/0e447cbec24d32a3f06609e74e5ad1b4cf5c7f3c", "message": "revert change", "committedDate": "2020-11-05T17:27:38Z", "type": "commit"}, {"oid": "0b079728b9acd8ba1f838370b4d9ef7a994832db", "url": "https://github.com/palantir/atlasdb/commit/0b079728b9acd8ba1f838370b4d9ef7a994832db", "message": "Merge branch 'lw/lease-lock-token' into lw/ete-tests-4", "committedDate": "2020-11-05T17:28:38Z", "type": "commit"}, {"oid": "24744e54cd4ffaa2baffc47318327fe45437da48", "url": "https://github.com/palantir/atlasdb/commit/24744e54cd4ffaa2baffc47318327fe45437da48", "message": "changeup", "committedDate": "2020-11-06T10:02:13Z", "type": "commit"}, {"oid": "8091367ac0434447f4d44a291ea3c2ca795d144f", "url": "https://github.com/palantir/atlasdb/commit/8091367ac0434447f4d44a291ea3c2ca795d144f", "message": "temp", "committedDate": "2020-11-06T10:35:00Z", "type": "commit"}, {"oid": "2e143c0de5ace25fe42c2659c7e7af7d80b113e0", "url": "https://github.com/palantir/atlasdb/commit/2e143c0de5ace25fe42c2659c7e7af7d80b113e0", "message": "Merge branch 'develop' into lw/ete-tests-4", "committedDate": "2020-11-06T12:51:19Z", "type": "commit"}, {"oid": "411a490ad203744448d7bd8e950db7288ab2e055", "url": "https://github.com/palantir/atlasdb/commit/411a490ad203744448d7bd8e950db7288ab2e055", "message": "step in the right dir", "committedDate": "2020-11-06T13:23:03Z", "type": "commit"}, {"oid": "c0ce2db5c0cc4801b9bed4fef1b97454d71f98bd", "url": "https://github.com/palantir/atlasdb/commit/c0ce2db5c0cc4801b9bed4fef1b97454d71f98bd", "message": "fixup", "committedDate": "2020-11-06T15:15:58Z", "type": "commit"}, {"oid": "6574e06c81ab5f84860cb87862ac976c52cac45d", "url": "https://github.com/palantir/atlasdb/commit/6574e06c81ab5f84860cb87862ac976c52cac45d", "message": "cleanup tests", "committedDate": "2020-11-06T15:45:53Z", "type": "commit"}, {"oid": "c1c8f5859d4cbf054ff6a3663134df500862b176", "url": "https://github.com/palantir/atlasdb/commit/c1c8f5859d4cbf054ff6a3663134df500862b176", "message": "make non private", "committedDate": "2020-11-06T15:46:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgzODE2Mw==", "url": "https://github.com/palantir/atlasdb/pull/5102#discussion_r518838163", "bodyText": "This class is necessary as we have hidden some of the methods on LockWatchManager to stop the average consumer from using it.", "author": "Jolyon-S", "createdAt": "2020-11-06T15:48:19Z", "path": "atlasdb-ete-tests/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ExposedLockWatchManager.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.LockWatchVersion;\n+import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+public class ExposedLockWatchManager {", "originalCommit": "c1c8f5859d4cbf054ff6a3663134df500862b176", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYxMjYyOQ==", "url": "https://github.com/palantir/atlasdb/pull/5102#discussion_r531612629", "bodyText": "Fair enough, this is the same deal as what we have in atlasdb-proxy :)", "author": "jeremyk-91", "createdAt": "2020-11-27T13:48:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgzODE2Mw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "5da6943bde382276356513ef53307a92fe1b90b2", "url": "https://github.com/palantir/atlasdb/commit/5da6943bde382276356513ef53307a92fe1b90b2", "message": "remove redundant method", "committedDate": "2020-11-06T15:50:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgzOTk5OQ==", "url": "https://github.com/palantir/atlasdb/pull/5102#discussion_r518839999", "bodyText": "I don't know why, but I kept getting issues where the input table name was \"blah\" instead of blah.", "author": "Jolyon-S", "createdAt": "2020-11-06T15:51:11Z", "path": "atlasdb-ete-tests/src/main/java/com/palantir/atlasdb/lock/SimpleEteLockWatchResource.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.lock;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import com.palantir.atlasdb.AtlasDbConstants;\n+import com.palantir.atlasdb.encoding.PtBytes;\n+import com.palantir.atlasdb.keyvalue.api.Cell;\n+import com.palantir.atlasdb.keyvalue.api.KeyValueService;\n+import com.palantir.atlasdb.keyvalue.api.Namespace;\n+import com.palantir.atlasdb.keyvalue.api.TableReference;\n+import com.palantir.atlasdb.keyvalue.api.watch.ExposedLockWatchManager;\n+import com.palantir.atlasdb.transaction.api.OpenTransaction;\n+import com.palantir.atlasdb.transaction.api.PreCommitCondition;\n+import com.palantir.atlasdb.transaction.api.Transaction;\n+import com.palantir.atlasdb.transaction.api.TransactionManager;\n+import com.palantir.common.streams.KeyedStream;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.LockWatchVersion;\n+import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.immutables.value.Value;\n+\n+public class SimpleEteLockWatchResource implements EteLockWatchResource {\n+    public static final Namespace NAMESPACE = Namespace.create(\"lock\");\n+    private static final byte[] VALUE = PtBytes.toBytes(\"value\");\n+    private static final byte[] COLUMN = PtBytes.toBytes(\"b\");\n+\n+    private final TransactionManager transactionManager;\n+    private final ExposedLockWatchManager lockWatchManager;\n+    private final Map<TransactionId, TransactionAndCondition> activeTransactions = new ConcurrentHashMap<>();\n+\n+    private String table = \"watch\";\n+    private TableReference lockWatchTable = TableReference.create(NAMESPACE, table);\n+\n+    public SimpleEteLockWatchResource(TransactionManager transactionManager) {\n+        this.transactionManager = transactionManager;\n+        createTable();\n+        this.lockWatchManager = new ExposedLockWatchManager(transactionManager.getLockWatchManager());\n+    }\n+\n+    @Override\n+    public TransactionId startTransaction() {\n+        CommitUpdateCondition condition = new CommitUpdateCondition();\n+        OpenTransaction transaction =\n+                Iterables.getOnlyElement(transactionManager.startTransactions(ImmutableList.of(condition)));\n+        TransactionId id = TransactionId.of(transaction.getTimestamp());\n+        condition.setStartTs(transaction.getTimestamp());\n+        activeTransactions.put(id, TransactionAndCondition.of(transaction, condition));\n+        return id;\n+    }\n+\n+    @Override\n+    public Optional<CommitUpdate> endTransaction(TransactionId transactionId) {\n+        TransactionAndCondition txnAndCondition = activeTransactions.remove(transactionId);\n+        txnAndCondition.transaction().commit();\n+        txnAndCondition.transaction().finish(unused -> null);\n+        txnAndCondition.condition().cleanup();\n+        return Optional.ofNullable(txnAndCondition.condition().getCommitUpdate());\n+    }\n+\n+    @Override\n+    public void write(WriteRequest writeRequest) {\n+        Transaction transaction = activeTransactions.get(writeRequest.id()).transaction();\n+        Map<Cell, byte[]> byteValues = getValueMap(writeRequest.rows());\n+        transaction.put(lockWatchTable, byteValues);\n+    }\n+\n+    @Override\n+    public TransactionsLockWatchUpdate getUpdate(GetLockWatchUpdateRequest updateRequest) {\n+        return lockWatchManager.getUpdateForTransactions(updateRequest.startTimestamps(), updateRequest.version());\n+    }\n+\n+    @Override\n+    public LockWatchVersion getVersion(TransactionId transactionId) {\n+        return lockWatchManager\n+                .getUpdateForTransactions(ImmutableSet.of(transactionId.startTs()), Optional.empty())\n+                .startTsToSequence()\n+                .get(transactionId.startTs());\n+    }\n+\n+    @Override\n+    public void setTable(String tableName) {\n+        table = tableName.replace(\"\\\"\", \"\");", "originalCommit": "c1c8f5859d4cbf054ff6a3663134df500862b176", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYxMzk1Mg==", "url": "https://github.com/palantir/atlasdb/pull/5102#discussion_r531613952", "bodyText": "ah, see the comment above - I'm pretty sure this has to do with string encodings.", "author": "jeremyk-91", "createdAt": "2020-11-27T13:51:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgzOTk5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "26d9d2c68e510724b4296b140a03116b84b8af2f", "chunk": "diff --git a/atlasdb-ete-tests/src/main/java/com/palantir/atlasdb/lock/SimpleEteLockWatchResource.java b/atlasdb-ete-tests/src/main/java/com/palantir/atlasdb/lock/SimpleEteLockWatchResource.java\nindex 1d936257f4..f1a2f4e3c3 100644\n--- a/atlasdb-ete-tests/src/main/java/com/palantir/atlasdb/lock/SimpleEteLockWatchResource.java\n+++ b/atlasdb-ete-tests/src/main/java/com/palantir/atlasdb/lock/SimpleEteLockWatchResource.java\n\n@@ -33,7 +33,6 @@ import com.palantir.atlasdb.transaction.api.TransactionManager;\n import com.palantir.common.streams.KeyedStream;\n import com.palantir.lock.watch.CommitUpdate;\n import com.palantir.lock.watch.LockWatchReferences;\n-import com.palantir.lock.watch.LockWatchVersion;\n import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n import java.util.Map;\n import java.util.Optional;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg0MDQ3Ng==", "url": "https://github.com/palantir/atlasdb/pull/5102#discussion_r518840476", "bodyText": "This is necessary as we only want the commit update when we are passed the commit timestamp, not the start.", "author": "Jolyon-S", "createdAt": "2020-11-06T15:51:51Z", "path": "atlasdb-ete-tests/src/main/java/com/palantir/atlasdb/lock/SimpleEteLockWatchResource.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.lock;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import com.palantir.atlasdb.AtlasDbConstants;\n+import com.palantir.atlasdb.encoding.PtBytes;\n+import com.palantir.atlasdb.keyvalue.api.Cell;\n+import com.palantir.atlasdb.keyvalue.api.KeyValueService;\n+import com.palantir.atlasdb.keyvalue.api.Namespace;\n+import com.palantir.atlasdb.keyvalue.api.TableReference;\n+import com.palantir.atlasdb.keyvalue.api.watch.ExposedLockWatchManager;\n+import com.palantir.atlasdb.transaction.api.OpenTransaction;\n+import com.palantir.atlasdb.transaction.api.PreCommitCondition;\n+import com.palantir.atlasdb.transaction.api.Transaction;\n+import com.palantir.atlasdb.transaction.api.TransactionManager;\n+import com.palantir.common.streams.KeyedStream;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.LockWatchReferences;\n+import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.immutables.value.Value;\n+\n+public class SimpleEteLockWatchResource implements EteLockWatchResource {\n+    public static final Namespace NAMESPACE = Namespace.create(\"lock\");\n+    private static final byte[] VALUE = PtBytes.toBytes(\"value\");\n+    private static final byte[] COLUMN = PtBytes.toBytes(\"b\");\n+\n+    private final TransactionManager transactionManager;\n+    private final ExposedLockWatchManager lockWatchManager;\n+    private final Map<TransactionId, TransactionAndCondition> activeTransactions = new ConcurrentHashMap<>();\n+\n+    private String table = \"watch\";\n+    private TableReference lockWatchTable = TableReference.create(NAMESPACE, table);\n+\n+    public SimpleEteLockWatchResource(TransactionManager transactionManager) {\n+        this.transactionManager = transactionManager;\n+        createTable();\n+        this.lockWatchManager = new ExposedLockWatchManager(transactionManager.getLockWatchManager());\n+    }\n+\n+    @Override\n+    public TransactionId startTransaction() {\n+        CommitUpdateCondition condition = new CommitUpdateCondition();\n+        OpenTransaction transaction =\n+                Iterables.getOnlyElement(transactionManager.startTransactions(ImmutableList.of(condition)));\n+        TransactionId id = TransactionId.of(transaction.getTimestamp());\n+        condition.setStartTs(transaction.getTimestamp());\n+        activeTransactions.put(id, TransactionAndCondition.of(transaction, condition));\n+        return id;\n+    }\n+\n+    @Override\n+    public Optional<CommitUpdate> endTransaction(TransactionId transactionId) {\n+        TransactionAndCondition txnAndCondition = activeTransactions.remove(transactionId);\n+        txnAndCondition.transaction().commit();\n+        txnAndCondition.transaction().finish(unused -> null);\n+        txnAndCondition.condition().cleanup();\n+        return Optional.ofNullable(txnAndCondition.condition().getCommitUpdate());\n+    }\n+\n+    @Override\n+    public void write(WriteRequest writeRequest) {\n+        Transaction transaction = activeTransactions.get(writeRequest.id()).transaction();\n+        Map<Cell, byte[]> byteValues = getValueMap(writeRequest.rows());\n+        transaction.put(lockWatchTable, byteValues);\n+    }\n+\n+    @Override\n+    public TransactionsLockWatchUpdate getUpdate(GetLockWatchUpdateRequest updateRequest) {\n+        return lockWatchManager.getUpdateForTransactions(updateRequest.startTimestamps(), updateRequest.version());\n+    }\n+\n+    @Override\n+    public void setTable(String tableName) {\n+        table = tableName.replace(\"\\\"\", \"\");\n+        lockWatchTable = TableReference.create(NAMESPACE, table);\n+        createTable();\n+    }\n+\n+    private void createTable() {\n+        KeyValueService keyValueService = transactionManager.getKeyValueService();\n+        keyValueService.createTable(lockWatchTable, AtlasDbConstants.GENERIC_TABLE_METADATA);\n+        transactionManager\n+                .getLockWatchManager()\n+                .registerWatches(ImmutableSet.of(LockWatchReferences.entireTable(lockWatchTable.getQualifiedName())));\n+    }\n+\n+    private Map<Cell, byte[]> getValueMap(Set<String> rows) {\n+        return KeyedStream.of(rows)\n+                .mapKeys(PtBytes::toBytes)\n+                .mapKeys(row -> Cell.create(row, COLUMN))\n+                .map(unused -> VALUE)\n+                .collectToMap();\n+    }\n+\n+    @Value.Immutable\n+    interface TransactionAndCondition {\n+        @Value.Parameter\n+        OpenTransaction transaction();\n+\n+        @Value.Parameter\n+        CommitUpdateCondition condition();\n+\n+        static TransactionAndCondition of(OpenTransaction transaction, CommitUpdateCondition condition) {\n+            return ImmutableTransactionAndCondition.of(transaction, condition);\n+        }\n+    }\n+\n+    class CommitUpdateCondition implements PreCommitCondition {\n+        private final AtomicReference<CommitUpdate> commitUpdate = new AtomicReference<>();\n+        private Optional<Long> startTs = Optional.empty();\n+\n+        CommitUpdateCondition() {}\n+\n+        void setStartTs(long startTs) {\n+            this.startTs = Optional.of(startTs);\n+        }\n+\n+        CommitUpdate getCommitUpdate() {\n+            return commitUpdate.get();\n+        }\n+\n+        @Override\n+        public void throwIfConditionInvalid(long timestamp) {\n+            if (startTs.filter(ts -> ts != timestamp).isPresent()) {\n+                commitUpdate.set(lockWatchManager.getCommitUpdate(startTs.get()));", "originalCommit": "5da6943bde382276356513ef53307a92fe1b90b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYxNDU1NQ==", "url": "https://github.com/palantir/atlasdb/pull/5102#discussion_r531614555", "bodyText": "I think this might be a bit simpler if we just use ifPresent(...)?", "author": "jeremyk-91", "createdAt": "2020-11-27T13:52:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODg0MDQ3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "85acd0d4e3420cd89e9ffdb793c56401dd9f1945", "chunk": "diff --git a/atlasdb-ete-tests/src/main/java/com/palantir/atlasdb/lock/SimpleEteLockWatchResource.java b/atlasdb-ete-tests/src/main/java/com/palantir/atlasdb/lock/SimpleEteLockWatchResource.java\nindex f1a2f4e3c3..a185fd711b 100644\n--- a/atlasdb-ete-tests/src/main/java/com/palantir/atlasdb/lock/SimpleEteLockWatchResource.java\n+++ b/atlasdb-ete-tests/src/main/java/com/palantir/atlasdb/lock/SimpleEteLockWatchResource.java\n\n@@ -98,6 +98,15 @@ public class SimpleEteLockWatchResource implements EteLockWatchResource {\n         createTable();\n     }\n \n+    @Override\n+    public void writeArbitrary(long count) {\n+        for (int i = 0; i < count; ++i) {\n+            TransactionId txn = startTransaction();\n+            write(WriteRequest.of(txn, String.valueOf(i)));\n+            endTransaction(txn);\n+        }\n+    }\n+\n     private void createTable() {\n         KeyValueService keyValueService = transactionManager.getKeyValueService();\n         keyValueService.createTable(lockWatchTable, AtlasDbConstants.GENERIC_TABLE_METADATA);\n"}}, {"oid": "26d9d2c68e510724b4296b140a03116b84b8af2f", "url": "https://github.com/palantir/atlasdb/commit/26d9d2c68e510724b4296b140a03116b84b8af2f", "message": "remove unreleased", "committedDate": "2020-11-06T15:53:02Z", "type": "commit"}, {"oid": "fd567d2d8f3436041ba3f57f2f3bbd3262c5d90b", "url": "https://github.com/palantir/atlasdb/commit/fd567d2d8f3436041ba3f57f2f3bbd3262c5d90b", "message": "Merge branch 'develop' into lw/ete-tests-4", "committedDate": "2020-11-06T15:53:14Z", "type": "commit"}, {"oid": "71889b8266f6f7a6237eff7a11bb4c1043d380db", "url": "https://github.com/palantir/atlasdb/commit/71889b8266f6f7a6237eff7a11bb4c1043d380db", "message": "add cheeky test", "committedDate": "2020-11-06T15:56:13Z", "type": "commit"}, {"oid": "4d7036a8401eff9ce858b7c0b266274e79c501b9", "url": "https://github.com/palantir/atlasdb/commit/4d7036a8401eff9ce858b7c0b266274e79c501b9", "message": "uncomment tests", "committedDate": "2020-11-06T15:57:11Z", "type": "commit"}, {"oid": "8251e512eb42567c9c0ab4440f4c87bdc0dc7ea8", "url": "https://github.com/palantir/atlasdb/commit/8251e512eb42567c9c0ab4440f4c87bdc0dc7ea8", "message": "add test to other suites", "committedDate": "2020-11-06T16:00:46Z", "type": "commit"}, {"oid": "944a4c81ce297782cac2c5225326c7647b898b47", "url": "https://github.com/palantir/atlasdb/commit/944a4c81ce297782cac2c5225326c7647b898b47", "message": "fix compile issues", "committedDate": "2020-11-09T10:38:16Z", "type": "commit"}, {"oid": "85acd0d4e3420cd89e9ffdb793c56401dd9f1945", "url": "https://github.com/palantir/atlasdb/commit/85acd0d4e3420cd89e9ffdb793c56401dd9f1945", "message": "fix another bug", "committedDate": "2020-11-09T12:55:02Z", "type": "commit"}, {"oid": "56f81dabe0c08e6756718960608acf0dc024319d", "url": "https://github.com/palantir/atlasdb/commit/56f81dabe0c08e6756718960608acf0dc024319d", "message": "use boxed", "committedDate": "2020-11-09T13:16:06Z", "type": "commit"}, {"oid": "d3bda9865a5b413db4c1dd97d576b43aee5005fc", "url": "https://github.com/palantir/atlasdb/commit/d3bda9865a5b413db4c1dd97d576b43aee5005fc", "message": "fix stupid fails", "committedDate": "2020-11-09T13:35:13Z", "type": "commit"}, {"oid": "9d16fa316cff0ae73a89f1be876272d8d361ae82", "url": "https://github.com/palantir/atlasdb/commit/9d16fa316cff0ae73a89f1be876272d8d361ae82", "message": "make tests simpler", "committedDate": "2020-11-09T13:58:41Z", "type": "commit"}, {"oid": "9cf732a167ab7c6c2eba2f3f5e706a1db58a6246", "url": "https://github.com/palantir/atlasdb/commit/9cf732a167ab7c6c2eba2f3f5e706a1db58a6246", "message": "remove unused method", "committedDate": "2020-11-09T14:03:18Z", "type": "commit"}, {"oid": "92b242edcc7ce11b7b338650f1fea4341abdf785", "url": "https://github.com/palantir/atlasdb/commit/92b242edcc7ce11b7b338650f1fea4341abdf785", "message": "please work", "committedDate": "2020-11-09T14:33:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYxMzUzNg==", "url": "https://github.com/palantir/atlasdb/pull/5102#discussion_r531613536", "bodyText": "We typically consume TEXT_PLAIN for Strings, not APPLICATION_JSON I think.", "author": "jeremyk-91", "createdAt": "2020-11-27T13:50:48Z", "path": "atlasdb-ete-tests/src/main/java/com/palantir/atlasdb/lock/EteLockWatchResource.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.lock;\n+\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n+import java.util.Optional;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+@Path(\"lock-watch\")\n+public interface EteLockWatchResource {\n+    @POST\n+    @Path(\"start-transaction\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    TransactionId startTransaction();\n+\n+    @POST\n+    @Path(\"end-transaction\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    Optional<CommitUpdate> endTransaction(TransactionId transactionId);\n+\n+    @POST\n+    @Path(\"write\")\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    void write(WriteRequest writeRequest);\n+\n+    @POST\n+    @Path(\"get-update\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    TransactionsLockWatchUpdate getUpdate(GetLockWatchUpdateRequest updateRequest);\n+\n+    @POST\n+    @Path(\"set-table\")\n+    @Consumes(MediaType.APPLICATION_JSON)", "originalCommit": "92b242edcc7ce11b7b338650f1fea4341abdf785", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c0b1a61f3a122144277ca928c45b23d50b626baf", "chunk": "diff --git a/atlasdb-ete-tests/src/main/java/com/palantir/atlasdb/lock/EteLockWatchResource.java b/atlasdb-ete-tests/src/main/java/com/palantir/atlasdb/lock/EteLockWatchResource.java\nindex 1cda3e44ab..9ee3f938c5 100644\n--- a/atlasdb-ete-tests/src/main/java/com/palantir/atlasdb/lock/EteLockWatchResource.java\n+++ b/atlasdb-ete-tests/src/main/java/com/palantir/atlasdb/lock/EteLockWatchResource.java\n\n@@ -51,6 +51,6 @@ public interface EteLockWatchResource {\n \n     @POST\n     @Path(\"set-table\")\n-    @Consumes(MediaType.APPLICATION_JSON)\n+    @Consumes(MediaType.TEXT_PLAIN)\n     void setTable(String tableName);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYxNzY4NA==", "url": "https://github.com/palantir/atlasdb/pull/5102#discussion_r531617684", "bodyText": "maybe non-actionable: While this is fine, at some point I think this quickly gets unreadable, and maybe I'd prefer something like\nprivate static final Set<String> BANNED_CLIENTS = ImmutableSet.of(\"tl\", \"lw\");\nprivate static final String PATH_REGEX = String.format(\"^(?!((%s)$))[a-zA-Z0-9_-]+$\",\n        BANNED_CLIENTS.stream().collect(Collectors.joining(\"|\")));\nprivate static final Predicate<String> IS_VALID_NAME = Pattern.compile(PATH_REGEX).asPredicate();\n\n(Also, it's kind of funky this isn't named IS_VALID_NAME)", "author": "jeremyk-91", "createdAt": "2020-11-27T13:58:54Z", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/TimelockNamespaces.java", "diffHunk": "@@ -42,8 +42,10 @@\n     @VisibleForTesting\n     static final String MAX_CLIENTS = \"maxClients\";\n \n-    private static final Predicate<String> isValidName =\n-            Pattern.compile(\"^(?!tl$)[a-zA-Z0-9_-]+$\").asPredicate();\n+    @VisibleForTesting\n+    static final Predicate<String> isValidName =\n+            Pattern.compile(\"^(?!((tl|lw)$))[a-zA-Z0-9_-]+$\").asPredicate();", "originalCommit": "92b242edcc7ce11b7b338650f1fea4341abdf785", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY1ODk3MQ==", "url": "https://github.com/palantir/atlasdb/pull/5102#discussion_r531658971", "bodyText": "Fixed in this one", "author": "Jolyon-S", "createdAt": "2020-11-27T15:21:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYxNzY4NA=="}], "type": "inlineReview", "revised_code": {"commit": "c0b1a61f3a122144277ca928c45b23d50b626baf", "chunk": "diff --git a/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/TimelockNamespaces.java b/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/TimelockNamespaces.java\nindex 1068dab5a7..5092a66451 100644\n--- a/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/TimelockNamespaces.java\n+++ b/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/TimelockNamespaces.java\n\n@@ -42,9 +43,12 @@ public final class TimelockNamespaces {\n     @VisibleForTesting\n     static final String MAX_CLIENTS = \"maxClients\";\n \n+    private static final Set<String> BANNED_CLIENTS = ImmutableSet.of(\"tl\", \"lw\");\n+    private static final String PATH_REGEX =\n+            String.format(\"^(?!((%s)$))[a-zA-Z0-9_-]+$\", String.join(\"|\", BANNED_CLIENTS));\n+\n     @VisibleForTesting\n-    static final Predicate<String> isValidName =\n-            Pattern.compile(\"^(?!((tl|lw)$))[a-zA-Z0-9_-]+$\").asPredicate();\n+    static final Predicate<String> IS_VALID_NAME = Pattern.compile(PATH_REGEX).asPredicate();\n \n     private static final Logger log = LoggerFactory.getLogger(TimelockNamespaces.class);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYxODA3Mg==", "url": "https://github.com/palantir/atlasdb/pull/5102#discussion_r531618072", "bodyText": "This should have changelog, just for the sake of completeness/defense.", "author": "jeremyk-91", "createdAt": "2020-11-27T13:59:42Z", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/TimeLockResource.java", "diffHunk": "@@ -25,7 +25,7 @@\n /**\n  * DO NOT add new endpoints in here. Instead, define them as Conjure endpoints.\n  */\n-@Path(\"/{namespace: (?!tl/)[a-zA-Z0-9_-]+}\")\n+@Path(\"/{namespace: (?!(tl|lw)/)[a-zA-Z0-9_-]+}\")", "originalCommit": "92b242edcc7ce11b7b338650f1fea4341abdf785", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYxOTIxOQ==", "url": "https://github.com/palantir/atlasdb/pull/5102#discussion_r531619219", "bodyText": "nit: standard in other tests is to replace with _, not X.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String tableName = UUID.randomUUID().toString().substring(0, 16).replace(\"-\", \"X\");\n          \n          \n            \n                    String tableName = UUID.randomUUID().toString().substring(0, 16).replace(\"-\", \"_\");", "author": "jeremyk-91", "createdAt": "2020-11-27T14:01:57Z", "path": "atlasdb-ete-tests/src/test/java/com/palantir/atlasdb/ete/LockWatchEteTest.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.ete;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.palantir.atlasdb.encoding.PtBytes;\n+import com.palantir.atlasdb.keyvalue.api.AtlasLockDescriptorUtils;\n+import com.palantir.atlasdb.keyvalue.api.TableReference;\n+import com.palantir.atlasdb.lock.EteLockWatchResource;\n+import com.palantir.atlasdb.lock.GetLockWatchUpdateRequest;\n+import com.palantir.atlasdb.lock.SimpleEteLockWatchResource;\n+import com.palantir.atlasdb.lock.TransactionId;\n+import com.palantir.atlasdb.lock.WriteRequest;\n+import com.palantir.lock.AtlasRowLockDescriptor;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.watch.CommitUpdate;\n+import com.palantir.lock.watch.CommitUpdate.Visitor;\n+import com.palantir.lock.watch.LockEvent;\n+import com.palantir.lock.watch.LockWatchCreatedEvent;\n+import com.palantir.lock.watch.LockWatchEvent;\n+import com.palantir.lock.watch.LockWatchVersion;\n+import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n+import com.palantir.lock.watch.UnlockEvent;\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public final class LockWatchEteTest {\n+    private static final String SEED = \"seed\";\n+    private static final String ROW_1 = row(1);\n+    private static final String ROW_2 = row(2);\n+    private static final String ROW_3 = row(3);\n+\n+    private final EteLockWatchResource lockWatcher = EteSetup.createClientToSingleNode(EteLockWatchResource.class);\n+\n+    private TableReference tableReference;\n+\n+    @Before\n+    public void before() {\n+        String tableName = UUID.randomUUID().toString().substring(0, 16).replace(\"-\", \"X\");", "originalCommit": "92b242edcc7ce11b7b338650f1fea4341abdf785", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c0b1a61f3a122144277ca928c45b23d50b626baf", "chunk": "diff --git a/atlasdb-ete-tests/src/test/java/com/palantir/atlasdb/ete/LockWatchEteTest.java b/atlasdb-ete-tests/src/test/java/com/palantir/atlasdb/ete/LockWatchEteTest.java\nindex 1e4a2c2bd9..49277589f6 100644\n--- a/atlasdb-ete-tests/src/test/java/com/palantir/atlasdb/ete/LockWatchEteTest.java\n+++ b/atlasdb-ete-tests/src/test/java/com/palantir/atlasdb/ete/LockWatchEteTest.java\n\n@@ -58,7 +58,7 @@ public final class LockWatchEteTest {\n \n     @Before\n     public void before() {\n-        String tableName = UUID.randomUUID().toString().substring(0, 16).replace(\"-\", \"X\");\n+        String tableName = UUID.randomUUID().toString().substring(0, 16).replace(\"-\", \"_\");\n         lockWatcher.setTable(tableName);\n         this.tableReference = TableReference.create(SimpleEteLockWatchResource.NAMESPACE, tableName);\n     }\n"}}, {"oid": "c0b1a61f3a122144277ca928c45b23d50b626baf", "url": "https://github.com/palantir/atlasdb/commit/c0b1a61f3a122144277ca928c45b23d50b626baf", "message": "review comments", "committedDate": "2020-11-27T15:23:23Z", "type": "commit"}, {"oid": "f0c4bea7a02d79b9127da9aec488a648d2f40f0d", "url": "https://github.com/palantir/atlasdb/commit/f0c4bea7a02d79b9127da9aec488a648d2f40f0d", "message": "Merge branch 'develop' into lw/ete-tests-4\n\n# Conflicts:\n#\tatlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLogEvents.java", "committedDate": "2020-11-27T15:24:13Z", "type": "commit"}, {"oid": "36754f1fa3bf1929763a215b5a368b90a8bb302b", "url": "https://github.com/palantir/atlasdb/commit/36754f1fa3bf1929763a215b5a368b90a8bb302b", "message": "Add generated changelog entries", "committedDate": "2020-11-27T15:24:13Z", "type": "commit"}, {"oid": "8ecafaad2365f8bc032335763485f0140e95a6be", "url": "https://github.com/palantir/atlasdb/commit/8ecafaad2365f8bc032335763485f0140e95a6be", "message": "grgur you are a champion", "committedDate": "2020-11-27T16:47:12Z", "type": "commit"}]}