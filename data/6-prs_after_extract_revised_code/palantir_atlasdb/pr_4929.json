{"pr_number": 4929, "pr_title": "[PDS-128523] Fewer leader time calls.", "pr_createdAt": "2020-08-05T12:12:37Z", "pr_url": "https://github.com/palantir/atlasdb/pull/4929", "timeline": [{"oid": "efb56e2797b46ef754db21db7558bbe7ec20f519", "url": "https://github.com/palantir/atlasdb/commit/efb56e2797b46ef754db21db7558bbe7ec20f519", "message": "Fewer leader time calls.", "committedDate": "2020-08-05T12:00:13Z", "type": "commit"}, {"oid": "8316bebd8874212cae7c4961ebd03fe9d8b9b862", "url": "https://github.com/palantir/atlasdb/commit/8316bebd8874212cae7c4961ebd03fe9d8b9b862", "message": "Checkstyle.", "committedDate": "2020-08-05T12:13:55Z", "type": "commit"}, {"oid": "cd8212f5d9b01591c2bf2b1fe4edcb4f84d2af42", "url": "https://github.com/palantir/atlasdb/commit/cd8212f5d9b01591c2bf2b1fe4edcb4f84d2af42", "message": "Add generated changelog entries", "committedDate": "2020-08-05T12:13:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQzNjA0OA==", "url": "https://github.com/palantir/atlasdb/pull/4929#discussion_r466436048", "bodyText": "Might be good to check the ordering here (~we can make a SortedSet copy of this - ~Cell compare is based on the byte order of rows and columns - and then build a List rather than a Map of returnedEntries and check the ordering)", "author": "jeremyk-91", "createdAt": "2020-08-06T14:03:22Z", "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/transaction/impl/GetRowsColumnRangeIteratorTest.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.transaction.impl;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoInteractions;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.IntStream;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Iterators;\n+import com.google.common.collect.Maps;\n+import com.palantir.atlasdb.keyvalue.api.BatchColumnRangeSelection;\n+import com.palantir.atlasdb.keyvalue.api.Cell;\n+import com.palantir.atlasdb.keyvalue.api.KeyValueService;\n+import com.palantir.atlasdb.keyvalue.api.RowColumnRangeIterator;\n+import com.palantir.atlasdb.keyvalue.api.TableReference;\n+import com.palantir.atlasdb.keyvalue.api.Value;\n+import com.palantir.atlasdb.keyvalue.impl.InMemoryKeyValueService;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class GetRowsColumnRangeIteratorTest {\n+\n+    private static final TableReference TABLE_REFERENCE = TableReference.createWithEmptyNamespace(\"test\");\n+    private static final byte[] ROW = \"row\".getBytes(StandardCharsets.UTF_8);\n+    private static final int BATCH_SIZE = 10;\n+    public static final BatchColumnRangeSelection COLUMN_RANGE_SELECTION =\n+            BatchColumnRangeSelection.create(null, null, BATCH_SIZE);\n+\n+    private final KeyValueService kvs = new InMemoryKeyValueService(true);\n+    private final ColumnRangeBatchProvider batchProvider = new ColumnRangeBatchProvider(\n+            kvs,\n+            TABLE_REFERENCE,\n+            ROW,\n+            COLUMN_RANGE_SELECTION,\n+            Long.MAX_VALUE);\n+\n+    @Test\n+    public void ifBatchIsEmptyNoValidateCallsAreMade() {\n+        Runnable validationStep = mock(Runnable.class);\n+        Iterator<Map.Entry<Cell, byte[]>> iterator = createIteratorUnderTest(validationStep);\n+\n+        List<Map.Entry<Cell, byte[]>> entries = ImmutableList.copyOf(iterator);\n+\n+        assertThat(entries).isEmpty();\n+        verifyNoInteractions(validationStep);\n+    }\n+\n+    @Test\n+    public void firstBatchHasNoValidation() {\n+        Runnable validationStep = mock(Runnable.class);\n+        Set<Cell> puts = putColumns(BATCH_SIZE + 5);\n+\n+        int limit = BATCH_SIZE - 1;\n+        Iterator<Map.Entry<Cell, byte[]>> iteratorUnderTest = createIteratorUnderTest(validationStep);\n+\n+        // still under the first batch size limit\n+        List<Map.Entry<Cell, byte[]>> firstBatchBarOne =\n+                ImmutableList.copyOf(Iterators.limit(iteratorUnderTest, limit));\n+        verifyNoInteractions(validationStep);\n+\n+        // the last element in the first batch is still on the first batch\n+        Map.Entry<Cell, byte[]> lastInFirstBatch = Iterators.getNext(iteratorUnderTest, null);\n+        assertThat(lastInFirstBatch).isNotNull();\n+        verifyNoInteractions(validationStep);\n+\n+        // consume one more i.e. batch size amount\n+        Map.Entry<Cell, byte[]> firstInSecondBatch = Iterators.getNext(iteratorUnderTest, null);\n+        assertThat(firstInSecondBatch).isNotNull();\n+        verify(validationStep, times(1)).run();\n+\n+        // validation step is called per batch\n+        ImmutableList<Map.Entry<Cell, byte[]>> restOfSecondBatch = ImmutableList.copyOf(iteratorUnderTest);\n+        verifyNoMoreInteractions(validationStep);\n+\n+        Map<Cell, byte[]> returnedEntries = ImmutableMap.<Cell, byte[]>builder()\n+                .putAll(firstBatchBarOne)\n+                .put(lastInFirstBatch)\n+                .put(firstInSecondBatch)\n+                .putAll(restOfSecondBatch)\n+                .build();\n+\n+\n+        assertThat(returnedEntries.keySet())\n+                .as(\"we can read all that we wrote\")\n+                .isEqualTo(puts);", "originalCommit": "cd8212f5d9b01591c2bf2b1fe4edcb4f84d2af42", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ1MzcwMw==", "url": "https://github.com/palantir/atlasdb/pull/4929#discussion_r466453703", "bodyText": "maybe something like\n        List<Cell> cellsReadInOrder = Lists.newArrayList();\n        cellsReadInOrder.addAll(firstBatchBarOne.stream().map(Map.Entry::getKey).collect(Collectors.toList()));\n        cellsReadInOrder.add(lastInFirstBatch.getKey());\n        cellsReadInOrder.add(firstInSecondBatch.getKey());\n        cellsReadInOrder.addAll(restOfSecondBatch.stream().map(Map.Entry::getKey).collect(Collectors.toList()));\n\n        assertThat(cellsReadInOrder)\n                .as(\"we can read all that we wrote\")\n                .hasSameElementsAs(puts);\n        assertThat(cellsReadInOrder)\n                .as(\"iterator returns cells back in sorted order\")\n                .isSorted();", "author": "jeremyk-91", "createdAt": "2020-08-06T14:28:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQzNjA0OA=="}], "type": "inlineReview", "revised_code": {"commit": "6b36f0a91ad8062c4fc9fa49721b951f7278a100", "chunk": "diff --git a/atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/transaction/impl/GetRowsColumnRangeIteratorTest.java b/atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/transaction/impl/GetRowsColumnRangeIteratorTest.java\nindex 011ea033e9..a4c34ca417 100644\n--- a/atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/transaction/impl/GetRowsColumnRangeIteratorTest.java\n+++ b/atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/transaction/impl/GetRowsColumnRangeIteratorTest.java\n\n@@ -29,6 +29,7 @@ import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import java.util.function.Function;\n+import java.util.stream.Collectors;\n import java.util.stream.IntStream;\n \n import org.junit.Test;\n"}}, {"oid": "1b237ab9a68ddc8a05b43afb1efc5aea698cc460", "url": "https://github.com/palantir/atlasdb/commit/1b237ab9a68ddc8a05b43afb1efc5aea698cc460", "message": "Fix nit.", "committedDate": "2020-08-06T16:12:54Z", "type": "commit"}, {"oid": "6b36f0a91ad8062c4fc9fa49721b951f7278a100", "url": "https://github.com/palantir/atlasdb/commit/6b36f0a91ad8062c4fc9fa49721b951f7278a100", "message": "Address test comment.", "committedDate": "2020-08-06T16:18:07Z", "type": "commit"}]}