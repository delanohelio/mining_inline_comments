{"pr_number": 5032, "pr_title": "[TS] Parallelism is nice and should be respected", "pr_createdAt": "2020-10-14T13:59:36Z", "pr_url": "https://github.com/palantir/atlasdb/pull/5032", "timeline": [{"oid": "bb3b8743abb97c2d0df2f6388b9b322627199d16", "url": "https://github.com/palantir/atlasdb/commit/bb3b8743abb97c2d0df2f6388b9b322627199d16", "message": "Initial change", "committedDate": "2020-10-14T13:21:46Z", "type": "commit"}, {"oid": "54c51ff3d6210e3a3197c646ad4b3202c7f50d6a", "url": "https://github.com/palantir/atlasdb/commit/54c51ff3d6210e3a3197c646ad4b3202c7f50d6a", "message": "Add metrics", "committedDate": "2020-10-14T13:59:01Z", "type": "commit"}, {"oid": "51aaccbc47153588f864a548cac64647be793179", "url": "https://github.com/palantir/atlasdb/commit/51aaccbc47153588f864a548cac64647be793179", "message": "Add metrics", "committedDate": "2020-10-14T14:29:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcwNTM3Mw==", "url": "https://github.com/palantir/atlasdb/pull/5032#discussion_r504705373", "bodyText": "If I understand correctly, this just updates a metric? Can you rename to updateSweepDelayMetric to make sure it is unambiguous?\nAlso, will this be an expensive metric? Just making sure we're not going back to our old $$$ ways.", "author": "Jolyon-S", "createdAt": "2020-10-14T14:05:05Z", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/sweep/metrics/TargetedSweepMetrics.java", "diffHunk": "@@ -137,6 +137,10 @@ public void registerEntriesReadInBatch(ShardAndStrategy shardStrategy, long batc\n         updateMetricsIfPresent(shardStrategy, metrics -> metrics.registerEntriesReadInBatch(batchSize));\n     }\n \n+    public void updateSweepDelay(ShardAndStrategy shardStrategy, long delay) {\n+        updateMetricsIfPresent(shardStrategy, metrics -> metrics.updateSweepDelay(delay));\n+    }", "originalCommit": "54c51ff3d6210e3a3197c646ad4b3202c7f50d6a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc1NjE2OA==", "url": "https://github.com/palantir/atlasdb/pull/5032#discussion_r504756168", "bodyText": "it updates sweep delay only. I didn't include metrics from the beginning to try to avoid costs and that got us into this mess in the first place so not going to worry about it -- we can remove it when we have confidence it works well and it is just a long gauge per strategy", "author": "gmaretic", "createdAt": "2020-10-14T15:08:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcwNTM3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "51aaccbc47153588f864a548cac64647be793179", "chunk": "diff --git a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/sweep/metrics/TargetedSweepMetrics.java b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/sweep/metrics/TargetedSweepMetrics.java\nindex f3c4437a2e..c67e093799 100644\n--- a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/sweep/metrics/TargetedSweepMetrics.java\n+++ b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/sweep/metrics/TargetedSweepMetrics.java\n\n@@ -137,8 +137,8 @@ public class TargetedSweepMetrics {\n         updateMetricsIfPresent(shardStrategy, metrics -> metrics.registerEntriesReadInBatch(batchSize));\n     }\n \n-    public void updateSweepDelay(ShardAndStrategy shardStrategy, long delay) {\n-        updateMetricsIfPresent(shardStrategy, metrics -> metrics.updateSweepDelay(delay));\n+    public void updateSweepDelay(SweeperStrategy strategy, long delay) {\n+        updateMetricsIfPresent(strategy, metrics -> metrics.updateSweepDelay(delay));\n     }\n \n     private void updateMetricsIfPresent(ShardAndStrategy shardStrategy, Consumer<MetricsForStrategy> update) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcwNTYxMg==", "url": "https://github.com/palantir/atlasdb/pull/5032#discussion_r504705612", "bodyText": "nit: as above, rename to sweepDelayMetric", "author": "Jolyon-S", "createdAt": "2020-10-14T14:05:21Z", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/sweep/metrics/TargetedSweepMetrics.java", "diffHunk": "@@ -172,6 +176,7 @@ private static String getTagForStrategy(SweeperStrategy strategy) {\n         private final Gauge<Long> millisSinceLastSwept;\n         private final SweepOutcomeMetrics outcomeMetrics;\n         private final SlidingWindowMeanGauge batchSizeMean;\n+        private final CurrentValueMetric<Long> sweepDelay;", "originalCommit": "54c51ff3d6210e3a3197c646ad4b3202c7f50d6a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc1NjUyMQ==", "url": "https://github.com/palantir/atlasdb/pull/5032#discussion_r504756521", "bodyText": "ah now I understand, will do \ud83d\udc4d", "author": "gmaretic", "createdAt": "2020-10-14T15:08:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcwNTYxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc3Mjc3OA==", "url": "https://github.com/palantir/atlasdb/pull/5032#discussion_r504772778", "bodyText": "you didn't rename this", "author": "Jolyon-S", "createdAt": "2020-10-14T15:29:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcwNTYxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgwMTA2MA==", "url": "https://github.com/palantir/atlasdb/pull/5032#discussion_r504801060", "bodyText": "ping \ud83d\ude05", "author": "jeremyk-91", "createdAt": "2020-10-14T16:09:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcwNTYxMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcyODY1NA==", "url": "https://github.com/palantir/atlasdb/pull/5032#discussion_r504728654", "bodyText": "nit: overloaded methods should be next to each other", "author": "Jolyon-S", "createdAt": "2020-10-14T14:34:25Z", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/sweep/metrics/TargetedSweepMetrics.java", "diffHunk": "@@ -278,13 +285,17 @@ private void updateProgressForShard(int shard, long sweptTs) {\n             lastSweptTs.update(shard, sweptTs);\n         }\n \n-        public void registerOccurrenceOf(SweepOutcome outcome) {\n+        private void registerOccurrenceOf(SweepOutcome outcome) {\n             outcomeMetrics.registerOccurrenceOf(outcome);\n         }\n \n-        public void registerEntriesReadInBatch(long batchSize) {\n+        private void registerEntriesReadInBatch(long batchSize) {\n             batchSizeMean.update(batchSize);\n         }\n+\n+        private void updateSweepDelay(long delay) {\n+            sweepDelay.setValue(delay);\n+        }", "originalCommit": "51aaccbc47153588f864a548cac64647be793179", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc1ODMwNw==", "url": "https://github.com/palantir/atlasdb/pull/5032#discussion_r504758307", "bodyText": "they are in the same order as the metrics", "author": "gmaretic", "createdAt": "2020-10-14T15:11:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDcyODY1NA=="}], "type": "inlineReview", "revised_code": {"commit": "ff0f2d48485d3d0b19afdaed24062e6cb92e24a6", "chunk": "diff --git a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/sweep/metrics/TargetedSweepMetrics.java b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/sweep/metrics/TargetedSweepMetrics.java\nindex c67e093799..389316417e 100644\n--- a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/sweep/metrics/TargetedSweepMetrics.java\n+++ b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/sweep/metrics/TargetedSweepMetrics.java\n\n@@ -293,7 +293,7 @@ public class TargetedSweepMetrics {\n             batchSizeMean.update(batchSize);\n         }\n \n-        private void updateSweepDelay(long delay) {\n+        private void updateSweepDelayMetric(long delay) {\n             sweepDelay.setValue(delay);\n         }\n     }\n"}}, {"oid": "df9cc35d3487a64ce5d04db60675d243211e624f", "url": "https://github.com/palantir/atlasdb/commit/df9cc35d3487a64ce5d04db60675d243211e624f", "message": "add filtering", "committedDate": "2020-10-14T14:41:29Z", "type": "commit"}, {"oid": "d4143ca4cdbe1fa1d718b0c1ae00c0edb5c9b29b", "url": "https://github.com/palantir/atlasdb/commit/d4143ca4cdbe1fa1d718b0c1ae00c0edb5c9b29b", "message": "Do not set metric initially to fix janky tests", "committedDate": "2020-10-14T15:06:34Z", "type": "commit"}, {"oid": "ff0f2d48485d3d0b19afdaed24062e6cb92e24a6", "url": "https://github.com/palantir/atlasdb/commit/ff0f2d48485d3d0b19afdaed24062e6cb92e24a6", "message": "Address some comments, fix JavaDoc", "committedDate": "2020-10-14T15:17:06Z", "type": "commit"}, {"oid": "596dbd2e6a9f0b84214ef6627ec9fb1d007b61b6", "url": "https://github.com/palantir/atlasdb/commit/596dbd2e6a9f0b84214ef6627ec9fb1d007b61b6", "message": "Add generated changelog entries", "committedDate": "2020-10-14T15:17:06Z", "type": "commit"}, {"oid": "9013dd15527e0b478b7e6dcbd5f4a4525c76decf", "url": "https://github.com/palantir/atlasdb/commit/9013dd15527e0b478b7e6dcbd5f4a4525c76decf", "message": "STYLE", "committedDate": "2020-10-14T15:23:30Z", "type": "commit"}, {"oid": "872b88af248dc9fe999b61487df7f520b8467ad1", "url": "https://github.com/palantir/atlasdb/commit/872b88af248dc9fe999b61487df7f520b8467ad1", "message": "Merge branch 'ts/fix-threads' of github.com:palantir/atlasdb into ts/fix-threads", "committedDate": "2020-10-14T15:23:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc3NDkxNA==", "url": "https://github.com/palantir/atlasdb/pull/5032#discussion_r504774914", "bodyText": "This was passing because it was 1 \ud83d\ude13", "author": "gmaretic", "createdAt": "2020-10-14T15:32:45Z", "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/sweep/queue/SweepDelayTest.java", "diffHunk": "@@ -33,69 +34,81 @@\n             .success((BATCH_CELLS_LOW_THRESHOLD + SWEEP_BATCH_SIZE) / 2);\n     private static final long INITIAL_DELAY = 250L;\n \n-    private SweepDelay delay = new SweepDelay(INITIAL_DELAY);\n+    private final AtomicLong metrics = new AtomicLong();\n+    private SweepDelay delay = new SweepDelay(INITIAL_DELAY, metrics::set);\n \n     @Test\n     public void iterationWithNormalBatchReturnsInitialPause() {\n         assertThat(delay.getNextPause(SUCCESS)).isEqualTo(INITIAL_DELAY);\n+        assertThat(metrics).hasValue(INITIAL_DELAY);\n     }\n \n     @Test\n     public void configurationBelowMinimumIsSetToMinimum() {\n-        SweepDelay negativeDelay = new SweepDelay(-5L);\n+        SweepDelay negativeDelay = new SweepDelay(-5L, metrics::set);\n \n         assertThat(negativeDelay.getNextPause(SUCCESS)).isEqualTo(MIN_PAUSE_MILLIS);\n+        assertThat(metrics).hasValue(MIN_PAUSE_MILLIS);\n     }\n \n     @Test\n     public void configurationAboveDefaultMaximumIsRespected() {\n-        SweepDelay largeDelay = new SweepDelay(2 * DEFAULT_MAX_PAUSE_MILLIS);\n+        SweepDelay largeDelay = new SweepDelay(2 * DEFAULT_MAX_PAUSE_MILLIS, metrics::set);\n \n         assertThat(largeDelay.getNextPause(SUCCESS)).isEqualTo(2 * DEFAULT_MAX_PAUSE_MILLIS);\n+        assertThat(metrics).hasValue(2 * DEFAULT_MAX_PAUSE_MILLIS);\n     }\n \n     @Test\n     public void unableToAcquireShardReturnsMaxPause() {\n         assertThat(delay.getNextPause(SweepIterationResults.unableToAcquireShard()))\n                 .isEqualTo(DEFAULT_MAX_PAUSE_MILLIS);\n+        assertThat(metrics).hasValue(DEFAULT_MAX_PAUSE_MILLIS);\n     }\n \n     @Test\n     public void insufficientConsistencyReturnsBackoff() {\n         assertThat(delay.getNextPause(SweepIterationResults.insufficientConsistency())).isEqualTo(BACKOFF);\n+        assertThat(metrics).hasValue(BACKOFF);\n     }\n \n     @Test\n     public void otherErrorReturnsMaxPause() {\n         assertThat(delay.getNextPause(SweepIterationResults.otherError())).isEqualTo(DEFAULT_MAX_PAUSE_MILLIS);\n+        assertThat(metrics).hasValue(DEFAULT_MAX_PAUSE_MILLIS);\n     }\n \n     @Test\n     public void disabledReturnsBackoff() {\n         assertThat(delay.getNextPause(SweepIterationResults.disabled())).isEqualTo(BACKOFF);\n+        assertThat(metrics).hasValue(BACKOFF);\n     }\n \n     @Test\n     public void iterationWithSmallBatchIncreasesPause() {\n         assertThat(delay.getNextPause(SUCCESS_TOO_FAST)).isGreaterThan(INITIAL_DELAY);\n+        assertThat(metrics).hasValueGreaterThan(INITIAL_DELAY);\n     }\n \n     @Test\n     public void iterationWithFullBatchReducesPause() {\n         assertThat(delay.getNextPause(SUCCESS_TOO_SLOW)).isLessThan(INITIAL_DELAY);\n+        assertThat(metrics).hasValueLessThan(INITIAL_DELAY);\n     }\n \n     @Test\n     public void consistentSmallBatchesGravitatesTowardsMaximumPause() {\n         sweepTwentyIterationsWithResult(SUCCESS_TOO_FAST);\n         assertThat(delay.getNextPause(SUCCESS_TOO_FAST))\n                 .isGreaterThanOrEqualTo((long) (DEFAULT_MAX_PAUSE_MILLIS * 0.95));\n+        assertThat(metrics).hasValueGreaterThanOrEqualTo((long) (DEFAULT_MAX_PAUSE_MILLIS * 0.95));\n     }\n \n     @Test\n     public void consistentFullBatchesGravitatesTowardsMinimumPause() {\n         sweepTwentyIterationsWithResult(SUCCESS_TOO_SLOW);\n-        assertThat(delay.getNextPause(SUCCESS_TOO_SLOW)).isGreaterThanOrEqualTo((long) (MIN_PAUSE_MILLIS * 1.05));", "originalCommit": "872b88af248dc9fe999b61487df7f520b8467ad1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgwMDgwMA==", "url": "https://github.com/palantir/atlasdb/pull/5032#discussion_r504800800", "bodyText": "\ud83d\ude22", "author": "jeremyk-91", "createdAt": "2020-10-14T16:08:45Z", "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/AtlasDbMetricNames.java", "diffHunk": "@@ -73,7 +74,8 @@ private CellFilterMetrics() {\n             SWEEP_TS,\n             LAST_SWEPT_TS,\n             LAG_MILLIS,\n-            BATCH_SIZE_MEAN);\n+            BATCH_SIZE_MEAN,\n+            SWEEP_DELAY);", "originalCommit": "872b88af248dc9fe999b61487df7f520b8467ad1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDgwMjkzNg==", "url": "https://github.com/palantir/atlasdb/pull/5032#discussion_r504802936", "bodyText": "nit: this name is a bit meh, I would normally name this like sweepDelayMetricsUpdater or something. Not too concerned as it's in the SweepDelay class.", "author": "jeremyk-91", "createdAt": "2020-10-14T16:11:50Z", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/sweep/queue/SweepDelay.java", "diffHunk": "@@ -41,11 +42,13 @@\n \n     private final long initialPause;\n     private final long maxPauseMillis;\n+    private final LongConsumer updateMetrics;", "originalCommit": "872b88af248dc9fe999b61487df7f520b8467ad1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}