{"pr_number": 4768, "pr_title": "[PaxosStateLog] File to Sqlite Integration Tests", "pr_createdAt": "2020-05-13T11:57:30Z", "pr_url": "https://github.com/palantir/atlasdb/pull/4768", "timeline": [{"oid": "431e13c92f685057a13763a68da17e43f3999754", "url": "https://github.com/palantir/atlasdb/commit/431e13c92f685057a13763a68da17e43f3999754", "message": "First impl, needs tests", "committedDate": "2020-04-28T14:57:25Z", "type": "commit"}, {"oid": "7d572d5f345a796089bd96e74da375d8c6b6c23a", "url": "https://github.com/palantir/atlasdb/commit/7d572d5f345a796089bd96e74da375d8c6b6c23a", "message": "Wip", "committedDate": "2020-05-12T12:22:02Z", "type": "commit"}, {"oid": "0f6d72207367f9fcbc07e182d2cefceb5e83be19", "url": "https://github.com/palantir/atlasdb/commit/0f6d72207367f9fcbc07e182d2cefceb5e83be19", "message": "Merge with develop", "committedDate": "2020-05-12T13:22:34Z", "type": "commit"}, {"oid": "bba086ba6fa3a7f2c9cf699880e325bc817261c8", "url": "https://github.com/palantir/atlasdb/commit/bba086ba6fa3a7f2c9cf699880e325bc817261c8", "message": "Finish up", "committedDate": "2020-05-12T16:26:41Z", "type": "commit"}, {"oid": "494fb155d9589f34e982373c9d279e46d12401bc", "url": "https://github.com/palantir/atlasdb/commit/494fb155d9589f34e982373c9d279e46d12401bc", "message": "Remove unused code and fix checkstyle", "committedDate": "2020-05-12T16:36:10Z", "type": "commit"}, {"oid": "73902d110af21cf12241005aaa29ea785e649780", "url": "https://github.com/palantir/atlasdb/commit/73902d110af21cf12241005aaa29ea785e649780", "message": "Clear up name", "committedDate": "2020-05-12T16:39:28Z", "type": "commit"}, {"oid": "d43594469c3921f79c3aa8418a5c99b8ef34d3c8", "url": "https://github.com/palantir/atlasdb/commit/d43594469c3921f79c3aa8418a5c99b8ef34d3c8", "message": "Clean up tests", "committedDate": "2020-05-12T16:55:43Z", "type": "commit"}, {"oid": "19eb9f9a50374a715738623b6160bec10b968e83", "url": "https://github.com/palantir/atlasdb/commit/19eb9f9a50374a715738623b6160bec10b968e83", "message": "Exit early if nothing to migrate", "committedDate": "2020-05-13T09:53:46Z", "type": "commit"}, {"oid": "a3d946b1b5609c1441051c2892617330392be3fc", "url": "https://github.com/palantir/atlasdb/commit/a3d946b1b5609c1441051c2892617330392be3fc", "message": "Add file to sqlite migration tests", "committedDate": "2020-05-13T11:41:48Z", "type": "commit"}, {"oid": "496efe2215c2500311776d5aa005f380d0ad0e63", "url": "https://github.com/palantir/atlasdb/commit/496efe2215c2500311776d5aa005f380d0ad0e63", "message": "Merge branch 'develop' of github.com:palantir/atlasdb into psl/intergation-test", "committedDate": "2020-05-13T11:52:18Z", "type": "commit"}, {"oid": "507cf24374726de547c5bdd86347441559ce2411", "url": "https://github.com/palantir/atlasdb/commit/507cf24374726de547c5bdd86347441559ce2411", "message": "Resolve conflcits", "committedDate": "2020-05-13T11:54:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ3MTMwOA==", "url": "https://github.com/palantir/atlasdb/pull/4768#discussion_r424471308", "bodyText": "\ud83c\udf89", "author": "jeremyk-91", "createdAt": "2020-05-13T14:14:11Z", "path": "leader-election-impl/src/test/java/com/palantir/paxos/FileToSqlitePaxosStateLogIntegrationTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.paxos;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import static com.palantir.paxos.PaxosStateLogTestUtils.NAMESPACE;\n+import static com.palantir.paxos.PaxosStateLogTestUtils.generateRounds;\n+import static com.palantir.paxos.PaxosStateLogTestUtils.readRoundUnchecked;\n+\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import java.util.stream.LongStream;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+public class FileToSqlitePaxosStateLogIntegrationTest {\n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    private PaxosStateLog<PaxosValue> source;\n+    private PaxosStateLog<PaxosValue> target;\n+    private SqlitePaxosStateLogMigrationState migrationState;\n+\n+    @Before\n+    public void setup() throws IOException {\n+        source = new PaxosStateLogImpl<>(tempFolder.newFolder(\"source\").getPath());\n+        Supplier<Connection> targetConnSupplier = SqliteConnections\n+                .createDefaultNamedSqliteDatabaseAtPath(tempFolder.newFolder(\"target\").toPath());\n+        target = SqlitePaxosStateLog.create(NAMESPACE, targetConnSupplier);\n+        migrationState = SqlitePaxosStateLogMigrationState.create(NAMESPACE, targetConnSupplier);\n+    }\n+\n+    @Test\n+    public void emptyMigrationSucceeds() {\n+        migrate();\n+        assertThat(migrationState.hasAlreadyMigrated()).isTrue();\n+    }\n+\n+    @Test\n+    public void contiguousMigrationFromZeroSucceeds() {\n+        migrateAndVerifyValuesForSequences(LongStream.rangeClosed(0, 100));\n+    }\n+\n+    @Test\n+    public void contiguousMigrationFromGreaterThanZeroSucceeds() {\n+        migrateAndVerifyValuesForSequences(LongStream.rangeClosed(50, 130));\n+    }\n+\n+    @Test\n+    public void nonContiguousMigrationSucceeds() {\n+        migrateAndVerifyValuesForSequences(LongStream.iterate(0, x -> x + 1_301).limit(100));", "originalCommit": "507cf24374726de547c5bdd86347441559ce2411", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ3MzcyOA==", "url": "https://github.com/palantir/atlasdb/pull/4768#discussion_r424473728", "bodyText": "not actionable: it's ok that this explodes if null is returned (since this is a test and we don't want nulls)", "author": "jeremyk-91", "createdAt": "2020-05-13T14:17:19Z", "path": "leader-election-impl/src/test/java/com/palantir/paxos/FileToSqlitePaxosStateLogIntegrationTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.paxos;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import static com.palantir.paxos.PaxosStateLogTestUtils.NAMESPACE;\n+import static com.palantir.paxos.PaxosStateLogTestUtils.generateRounds;\n+import static com.palantir.paxos.PaxosStateLogTestUtils.readRoundUnchecked;\n+\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.util.List;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import java.util.stream.LongStream;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+public class FileToSqlitePaxosStateLogIntegrationTest {\n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    private PaxosStateLog<PaxosValue> source;\n+    private PaxosStateLog<PaxosValue> target;\n+    private SqlitePaxosStateLogMigrationState migrationState;\n+\n+    @Before\n+    public void setup() throws IOException {\n+        source = new PaxosStateLogImpl<>(tempFolder.newFolder(\"source\").getPath());\n+        Supplier<Connection> targetConnSupplier = SqliteConnections\n+                .createDefaultNamedSqliteDatabaseAtPath(tempFolder.newFolder(\"target\").toPath());\n+        target = SqlitePaxosStateLog.create(NAMESPACE, targetConnSupplier);\n+        migrationState = SqlitePaxosStateLogMigrationState.create(NAMESPACE, targetConnSupplier);\n+    }\n+\n+    @Test\n+    public void emptyMigrationSucceeds() {\n+        migrate();\n+        assertThat(migrationState.hasAlreadyMigrated()).isTrue();\n+    }\n+\n+    @Test\n+    public void contiguousMigrationFromZeroSucceeds() {\n+        migrateAndVerifyValuesForSequences(LongStream.rangeClosed(0, 100));\n+    }\n+\n+    @Test\n+    public void contiguousMigrationFromGreaterThanZeroSucceeds() {\n+        migrateAndVerifyValuesForSequences(LongStream.rangeClosed(50, 130));\n+    }\n+\n+    @Test\n+    public void nonContiguousMigrationSucceeds() {\n+        migrateAndVerifyValuesForSequences(LongStream.iterate(0, x -> x + 1_301).limit(100));\n+    }\n+\n+    private void migrateAndVerifyValuesForSequences(LongStream sequences) {\n+        List<PaxosRound<PaxosValue>> rounds = generateRounds(sequences);\n+        List<PaxosValue> expectedValues = roundsToValues(rounds);\n+\n+        source.writeBatchOfRounds(rounds);\n+\n+        migrate();\n+        List<PaxosValue> migratedValues = readMigratedValuesFor(expectedValues);\n+\n+        assertThat(migratedValues).isEqualTo(roundsToValues(rounds));\n+        assertThat(migrationState.hasAlreadyMigrated()).isTrue();\n+    }\n+\n+    private List<PaxosValue> roundsToValues(List<PaxosRound<PaxosValue>> rounds) {\n+        return rounds.stream().map(PaxosRound::value).collect(Collectors.toList());\n+    }\n+\n+    private void migrate() {\n+        PaxosStateLogMigrator.migrate(ImmutableMigrationContext.<PaxosValue>builder()\n+                .sourceLog(source)\n+                .destinationLog(target)\n+                .hydrator(PaxosValue.BYTES_HYDRATOR)\n+                .migrationState(migrationState)\n+                .build());\n+    }\n+\n+    private List<PaxosValue> readMigratedValuesFor(List<PaxosValue> values) {\n+        return values.stream()\n+                .map(value -> PaxosValue.BYTES_HYDRATOR.hydrateFromBytes(readRoundUnchecked(target, value.seq)))", "originalCommit": "507cf24374726de547c5bdd86347441559ce2411", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}