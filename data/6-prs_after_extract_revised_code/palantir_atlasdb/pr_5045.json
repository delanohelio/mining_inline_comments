{"pr_number": 5045, "pr_title": "Read from palantir system table to try and use hostnames instead of ips", "pr_createdAt": "2020-10-19T08:31:32Z", "pr_url": "https://github.com/palantir/atlasdb/pull/5045", "timeline": [{"oid": "1a85a6fab32ed89fdafc3e9000ea76c9f6ad4486", "url": "https://github.com/palantir/atlasdb/commit/1a85a6fab32ed89fdafc3e9000ea76c9f6ad4486", "message": "Read from palantir system table to try and use hostnames instead of ips", "committedDate": "2020-10-18T14:48:32Z", "type": "commit"}, {"oid": "1a159d10afe59685e534398229a31c4faa3b9df7", "url": "https://github.com/palantir/atlasdb/commit/1a159d10afe59685e534398229a31c4faa3b9df7", "message": "Add generated changelog entries", "committedDate": "2020-10-17T10:28:33Z", "type": "commit"}, {"oid": "d448bc039c115dc1adfb59d613bf0a96f6d2968a", "url": "https://github.com/palantir/atlasdb/commit/d448bc039c115dc1adfb59d613bf0a96f6d2968a", "message": "Refactor code to be better", "committedDate": "2020-10-19T10:05:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYyOTkxNA==", "url": "https://github.com/palantir/atlasdb/pull/5045#discussion_r507629914", "bodyText": "is this necessary? is 2min good enough?", "author": "ashrayjain", "createdAt": "2020-10-19T10:11:49Z", "path": "atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/pool/CassandraService.java", "diffHunk": "@@ -95,6 +98,9 @@ public CassandraService(\n         this.myLocationSupplier = new HostLocationSupplier(this::getSnitch, config.overrideHostLocation());\n         this.blacklist = blacklist;\n         this.poolMetrics = poolMetrics;\n+\n+        Supplier<Map<String, String>> hostnamesByIpSupplier = new HostnamesByIpSupplier(this::getRandomGoodHost);\n+        this.hostnameByIpSupplier = Suppliers.memoizeWithExpiration(hostnamesByIpSupplier::get, 2, TimeUnit.MINUTES);", "originalCommit": "d448bc039c115dc1adfb59d613bf0a96f6d2968a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzczMDQxNg==", "url": "https://github.com/palantir/atlasdb/pull/5045#discussion_r507730416", "bodyText": "This is only ever called in the call to refresh pool, which happens (by default) every 2 minutes. Hardcoding to 2 minutes seems reasonable, but I also see an argument to tie it to the poolRefreshIntervalSeconds config and make it expire slightly faster to ensure we get a relatively fresh value on each iteration. We definitely do want the memoization since it's called multiple times in a single refresh call.", "author": "gmaretic", "createdAt": "2020-10-19T13:07:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYyOTkxNA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "48e403074f176ba2dfa9ecc43356b93057f7cb80", "url": "https://github.com/palantir/atlasdb/commit/48e403074f176ba2dfa9ecc43356b93057f7cb80", "message": "Fix checkstyle", "committedDate": "2020-10-19T10:20:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcwODk2Mg==", "url": "https://github.com/palantir/atlasdb/pull/5045#discussion_r507708962", "bodyText": "Extract doesNotContain method to make it a bit more readable?", "author": "gmaretic", "createdAt": "2020-10-19T12:33:49Z", "path": "atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/pool/HostnamesByIpSupplier.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.cassandra.pool;\n+\n+import java.util.Map;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+import org.apache.cassandra.thrift.Compression;\n+import org.apache.cassandra.thrift.ConsistencyLevel;\n+import org.apache.cassandra.thrift.CqlRow;\n+import org.apache.cassandra.thrift.KsDef;\n+import org.apache.cassandra.thrift.NotFoundException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Iterables;\n+import com.palantir.atlasdb.encoding.PtBytes;\n+import com.palantir.atlasdb.keyvalue.cassandra.CassandraClient;\n+import com.palantir.atlasdb.keyvalue.cassandra.CqlQuery;\n+import com.palantir.common.base.FunctionCheckedException;\n+import com.palantir.common.pooling.PoolingContainer;\n+import com.palantir.logsafe.SafeArg;\n+\n+public final class HostnamesByIpSupplier implements Supplier<Map<String, String>> {\n+    private static final Logger logger = LoggerFactory.getLogger(HostnamesByIpSupplier.class);\n+\n+    private static final String SYSTEM_PALANTIR_KEYSPACE = \"system_palantir\";\n+    private static final String HOSTNAMES_BY_IP_TABLE = \"hostnames_by_ip\";\n+    private static final String HOSTNAME_COLUMN = \"hostname\";\n+    private static final String IP_COLUMN = \"ip\";\n+\n+    private final Supplier<PoolingContainer<CassandraClient>> randomGoodHostSupplier;\n+\n+    public HostnamesByIpSupplier(Supplier<PoolingContainer<CassandraClient>> randomGoodHostSupplier) {\n+        this.randomGoodHostSupplier = randomGoodHostSupplier;\n+    }\n+\n+    @Override\n+    public Map<String, String> get() {\n+        try {\n+            return randomGoodHostSupplier.get().runWithPooledResource(getHostnamesByIp());\n+        } catch (Exception e) {\n+            logger.warn(\"Could not get hostnames by ip from Cassandra\", e);\n+            return ImmutableMap.of();\n+        }\n+    }\n+\n+    public FunctionCheckedException<CassandraClient, Map<String, String>, Exception> getHostnamesByIp() {\n+        return client -> {\n+            KsDef systemPalantir;\n+            try {\n+                systemPalantir = client.describe_keyspace(SYSTEM_PALANTIR_KEYSPACE);\n+            }  catch (NotFoundException e) {\n+                logger.debug(\"Did not find keyspace with hostnames by ip, moving on without them\");\n+                return ImmutableMap.of();\n+            }\n+            if (systemPalantir.getCf_defs().stream().noneMatch(cfDef -> cfDef.name.equals(HOSTNAMES_BY_IP_TABLE))) {", "originalCommit": "48e403074f176ba2dfa9ecc43356b93057f7cb80", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzczODQyMQ==", "url": "https://github.com/palantir/atlasdb/pull/5045#discussion_r507738421", "bodyText": "done", "author": "ashrayjain", "createdAt": "2020-10-19T13:19:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcwODk2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "90df304bcea20891a1f00de80297a44165d28a0e", "chunk": "diff --git a/atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/pool/HostnamesByIpSupplier.java b/atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/pool/HostnamesByIpSupplier.java\nindex ea9e26cd9d..9480d39b8b 100644\n--- a/atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/pool/HostnamesByIpSupplier.java\n+++ b/atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/pool/HostnamesByIpSupplier.java\n\n@@ -70,7 +70,7 @@ public final class HostnamesByIpSupplier implements Supplier<Map<String, String>\n                 logger.debug(\"Did not find keyspace with hostnames by ip, moving on without them\");\n                 return ImmutableMap.of();\n             }\n-            if (systemPalantir.getCf_defs().stream().noneMatch(cfDef -> cfDef.name.equals(HOSTNAMES_BY_IP_TABLE))) {\n+            if (isCfNotPresent(systemPalantir, HOSTNAMES_BY_IP_TABLE)) {\n                 logger.debug(\"Did not find table with hostnames by ip, moving on without them\");\n                 return ImmutableMap.of();\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcxMTE0OQ==", "url": "https://github.com/palantir/atlasdb/pull/5045#discussion_r507711149", "bodyText": "I imagine this consistency level is fine as all nodes should have the same info? How is it populated?", "author": "gmaretic", "createdAt": "2020-10-19T12:37:24Z", "path": "atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/pool/HostnamesByIpSupplier.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.cassandra.pool;\n+\n+import java.util.Map;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+import org.apache.cassandra.thrift.Compression;\n+import org.apache.cassandra.thrift.ConsistencyLevel;\n+import org.apache.cassandra.thrift.CqlRow;\n+import org.apache.cassandra.thrift.KsDef;\n+import org.apache.cassandra.thrift.NotFoundException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Iterables;\n+import com.palantir.atlasdb.encoding.PtBytes;\n+import com.palantir.atlasdb.keyvalue.cassandra.CassandraClient;\n+import com.palantir.atlasdb.keyvalue.cassandra.CqlQuery;\n+import com.palantir.common.base.FunctionCheckedException;\n+import com.palantir.common.pooling.PoolingContainer;\n+import com.palantir.logsafe.SafeArg;\n+\n+public final class HostnamesByIpSupplier implements Supplier<Map<String, String>> {\n+    private static final Logger logger = LoggerFactory.getLogger(HostnamesByIpSupplier.class);\n+\n+    private static final String SYSTEM_PALANTIR_KEYSPACE = \"system_palantir\";\n+    private static final String HOSTNAMES_BY_IP_TABLE = \"hostnames_by_ip\";\n+    private static final String HOSTNAME_COLUMN = \"hostname\";\n+    private static final String IP_COLUMN = \"ip\";\n+\n+    private final Supplier<PoolingContainer<CassandraClient>> randomGoodHostSupplier;\n+\n+    public HostnamesByIpSupplier(Supplier<PoolingContainer<CassandraClient>> randomGoodHostSupplier) {\n+        this.randomGoodHostSupplier = randomGoodHostSupplier;\n+    }\n+\n+    @Override\n+    public Map<String, String> get() {\n+        try {\n+            return randomGoodHostSupplier.get().runWithPooledResource(getHostnamesByIp());\n+        } catch (Exception e) {\n+            logger.warn(\"Could not get hostnames by ip from Cassandra\", e);\n+            return ImmutableMap.of();\n+        }\n+    }\n+\n+    public FunctionCheckedException<CassandraClient, Map<String, String>, Exception> getHostnamesByIp() {\n+        return client -> {\n+            KsDef systemPalantir;\n+            try {\n+                systemPalantir = client.describe_keyspace(SYSTEM_PALANTIR_KEYSPACE);\n+            }  catch (NotFoundException e) {\n+                logger.debug(\"Did not find keyspace with hostnames by ip, moving on without them\");\n+                return ImmutableMap.of();\n+            }\n+            if (systemPalantir.getCf_defs().stream().noneMatch(cfDef -> cfDef.name.equals(HOSTNAMES_BY_IP_TABLE))) {\n+                logger.debug(\"Did not find table with hostnames by ip, moving on without them\");\n+                return ImmutableMap.of();\n+            }\n+\n+            CqlQuery query = CqlQuery.builder()\n+                    .safeQueryFormat(\"SELECT * FROM \\\"%s\\\".\\\"%s\\\";\")\n+                    .addArgs(\n+                            SafeArg.of(\"keyspace\", SYSTEM_PALANTIR_KEYSPACE),\n+                            SafeArg.of(\"table\", HOSTNAMES_BY_IP_TABLE))\n+                    .build();\n+\n+            return client.execute_cql3_query(query, Compression.NONE, ConsistencyLevel.LOCAL_ONE).getRows().stream()", "originalCommit": "48e403074f176ba2dfa9ecc43356b93057f7cb80", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzczMjY5NA==", "url": "https://github.com/palantir/atlasdb/pull/5045#discussion_r507732694", "bodyText": "It is populated out of band internally and yea, we really don't need any real guarantees on this table, even if the data is out of date / wrong, it won't matter too much, since we read the real ring from Cassandra anyways.", "author": "ashrayjain", "createdAt": "2020-10-19T13:10:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcxMTE0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "90df304bcea20891a1f00de80297a44165d28a0e", "chunk": "diff --git a/atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/pool/HostnamesByIpSupplier.java b/atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/pool/HostnamesByIpSupplier.java\nindex ea9e26cd9d..9480d39b8b 100644\n--- a/atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/pool/HostnamesByIpSupplier.java\n+++ b/atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/pool/HostnamesByIpSupplier.java\n\n@@ -70,7 +70,7 @@ public final class HostnamesByIpSupplier implements Supplier<Map<String, String>\n                 logger.debug(\"Did not find keyspace with hostnames by ip, moving on without them\");\n                 return ImmutableMap.of();\n             }\n-            if (systemPalantir.getCf_defs().stream().noneMatch(cfDef -> cfDef.name.equals(HOSTNAMES_BY_IP_TABLE))) {\n+            if (isCfNotPresent(systemPalantir, HOSTNAMES_BY_IP_TABLE)) {\n                 logger.debug(\"Did not find table with hostnames by ip, moving on without them\");\n                 return ImmutableMap.of();\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcxMjU5NQ==", "url": "https://github.com/palantir/atlasdb/pull/5045#discussion_r507712595", "bodyText": "This and line 59 can be a global variable to clean up tests a bit", "author": "gmaretic", "createdAt": "2020-10-19T12:39:40Z", "path": "atlasdb-cassandra/src/test/java/com/palantir/atlasdb/keyvalue/cassandra/pool/HostnamesByIpSupplierTest.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.cassandra.pool;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatCode;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import org.apache.cassandra.thrift.CfDef;\n+import org.apache.cassandra.thrift.Column;\n+import org.apache.cassandra.thrift.CqlResult;\n+import org.apache.cassandra.thrift.CqlRow;\n+import org.apache.cassandra.thrift.KsDef;\n+import org.apache.cassandra.thrift.NotFoundException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import com.google.common.base.Function;\n+import com.google.common.collect.ImmutableList;\n+import com.palantir.atlasdb.encoding.PtBytes;\n+import com.palantir.atlasdb.keyvalue.cassandra.CassandraClient;\n+import com.palantir.common.base.FunctionCheckedException;\n+import com.palantir.common.pooling.PoolingContainer;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class HostnamesByIpSupplierTest {\n+    @Mock\n+    CassandraClient client;\n+\n+    @Test\n+    public void keyspaceNotAccessibleDoesNotError() throws Exception {\n+        when(client.describe_keyspace(\"system_palantir\")).thenThrow(new NotFoundException());\n+        DummyClientPool clientPool = new DummyClientPool(client);", "originalCommit": "48e403074f176ba2dfa9ecc43356b93057f7cb80", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzczODM1Nw==", "url": "https://github.com/palantir/atlasdb/pull/5045#discussion_r507738357", "bodyText": "done", "author": "ashrayjain", "createdAt": "2020-10-19T13:19:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcxMjU5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "90df304bcea20891a1f00de80297a44165d28a0e", "chunk": "diff --git a/atlasdb-cassandra/src/test/java/com/palantir/atlasdb/keyvalue/cassandra/pool/HostnamesByIpSupplierTest.java b/atlasdb-cassandra/src/test/java/com/palantir/atlasdb/keyvalue/cassandra/pool/HostnamesByIpSupplierTest.java\nindex daab87636d..9489c6828e 100644\n--- a/atlasdb-cassandra/src/test/java/com/palantir/atlasdb/keyvalue/cassandra/pool/HostnamesByIpSupplierTest.java\n+++ b/atlasdb-cassandra/src/test/java/com/palantir/atlasdb/keyvalue/cassandra/pool/HostnamesByIpSupplierTest.java\n\n@@ -34,6 +34,7 @@ import org.apache.cassandra.thrift.CqlResult;\n import org.apache.cassandra.thrift.CqlRow;\n import org.apache.cassandra.thrift.KsDef;\n import org.apache.cassandra.thrift.NotFoundException;\n+import org.apache.thrift.TException;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.mockito.Mock;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcxNDQ0NA==", "url": "https://github.com/palantir/atlasdb/pull/5045#discussion_r507714444", "bodyText": "extract method", "author": "gmaretic", "createdAt": "2020-10-19T12:42:46Z", "path": "atlasdb-cassandra/src/test/java/com/palantir/atlasdb/keyvalue/cassandra/pool/HostnamesByIpSupplierTest.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.cassandra.pool;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatCode;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import org.apache.cassandra.thrift.CfDef;\n+import org.apache.cassandra.thrift.Column;\n+import org.apache.cassandra.thrift.CqlResult;\n+import org.apache.cassandra.thrift.CqlRow;\n+import org.apache.cassandra.thrift.KsDef;\n+import org.apache.cassandra.thrift.NotFoundException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import com.google.common.base.Function;\n+import com.google.common.collect.ImmutableList;\n+import com.palantir.atlasdb.encoding.PtBytes;\n+import com.palantir.atlasdb.keyvalue.cassandra.CassandraClient;\n+import com.palantir.common.base.FunctionCheckedException;\n+import com.palantir.common.pooling.PoolingContainer;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class HostnamesByIpSupplierTest {\n+    @Mock\n+    CassandraClient client;\n+\n+    @Test\n+    public void keyspaceNotAccessibleDoesNotError() throws Exception {\n+        when(client.describe_keyspace(\"system_palantir\")).thenThrow(new NotFoundException());\n+        DummyClientPool clientPool = new DummyClientPool(client);\n+\n+        Supplier<Map<String, String>> hostnamesByIpSupplier = new HostnamesByIpSupplier(() -> clientPool);\n+        assertThatCode(hostnamesByIpSupplier::get).doesNotThrowAnyException();\n+        assertThat(hostnamesByIpSupplier.get()).isEmpty();\n+    }\n+\n+    @Test\n+    public void tableNotAccessibleDoesNotError() throws Exception {\n+        when(client.describe_keyspace(\"system_palantir\"))", "originalCommit": "48e403074f176ba2dfa9ecc43356b93057f7cb80", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzczODM5Mg==", "url": "https://github.com/palantir/atlasdb/pull/5045#discussion_r507738392", "bodyText": "done", "author": "ashrayjain", "createdAt": "2020-10-19T13:19:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzcxNDQ0NA=="}], "type": "inlineReview", "revised_code": {"commit": "90df304bcea20891a1f00de80297a44165d28a0e", "chunk": "diff --git a/atlasdb-cassandra/src/test/java/com/palantir/atlasdb/keyvalue/cassandra/pool/HostnamesByIpSupplierTest.java b/atlasdb-cassandra/src/test/java/com/palantir/atlasdb/keyvalue/cassandra/pool/HostnamesByIpSupplierTest.java\nindex daab87636d..9489c6828e 100644\n--- a/atlasdb-cassandra/src/test/java/com/palantir/atlasdb/keyvalue/cassandra/pool/HostnamesByIpSupplierTest.java\n+++ b/atlasdb-cassandra/src/test/java/com/palantir/atlasdb/keyvalue/cassandra/pool/HostnamesByIpSupplierTest.java\n\n@@ -34,6 +34,7 @@ import org.apache.cassandra.thrift.CqlResult;\n import org.apache.cassandra.thrift.CqlRow;\n import org.apache.cassandra.thrift.KsDef;\n import org.apache.cassandra.thrift.NotFoundException;\n+import org.apache.thrift.TException;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.mockito.Mock;\n"}}, {"oid": "90df304bcea20891a1f00de80297a44165d28a0e", "url": "https://github.com/palantir/atlasdb/commit/90df304bcea20891a1f00de80297a44165d28a0e", "message": "Address comments", "committedDate": "2020-10-19T13:22:33Z", "type": "forcePushed"}, {"oid": "1924bc5974ee0fb9b99c2bc82f9bc4558fcdb50e", "url": "https://github.com/palantir/atlasdb/commit/1924bc5974ee0fb9b99c2bc82f9bc4558fcdb50e", "message": "Address comments", "committedDate": "2020-10-19T13:43:00Z", "type": "commit"}, {"oid": "1924bc5974ee0fb9b99c2bc82f9bc4558fcdb50e", "url": "https://github.com/palantir/atlasdb/commit/1924bc5974ee0fb9b99c2bc82f9bc4558fcdb50e", "message": "Address comments", "committedDate": "2020-10-19T13:43:00Z", "type": "forcePushed"}]}