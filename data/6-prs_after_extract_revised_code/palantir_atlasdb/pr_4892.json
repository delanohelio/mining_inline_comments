{"pr_number": 4892, "pr_title": "[PD$-110002] Part 10: Top-N Tables | Primitives", "pr_createdAt": "2020-07-08T20:17:52Z", "pr_url": "https://github.com/palantir/atlasdb/pull/4892", "timeline": [{"oid": "629398ebf8a1f0b7798f53b0d8fb660b418f7a0a", "url": "https://github.com/palantir/atlasdb/commit/629398ebf8a1f0b7798f53b0d8fb660b418f7a0a", "message": "Controller", "committedDate": "2020-07-08T19:52:22Z", "type": "commit"}, {"oid": "5eeaefa270f31806fe7ac86bdea34d08c15c7c06", "url": "https://github.com/palantir/atlasdb/commit/5eeaefa270f31806fe7ac86bdea34d08c15c7c06", "message": "Controller test", "committedDate": "2020-07-08T19:54:27Z", "type": "commit"}, {"oid": "ac3bdfd68b6a6574b7ca3c7e6045c94525d6d71a", "url": "https://github.com/palantir/atlasdb/commit/ac3bdfd68b6a6574b7ca3c7e6045c94525d6d71a", "message": "Delta gauge and tests", "committedDate": "2020-07-08T20:02:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEyODY5MQ==", "url": "https://github.com/palantir/atlasdb/pull/4892#discussion_r452128691", "bodyText": "In case of duplicates, you may be publishing more metrics?", "author": "sudiksha27", "createdAt": "2020-07-09T10:44:54Z", "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/util/TopNMetricPublicationController.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.util;\n+\n+import java.time.Duration;\n+import java.util.Comparator;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Supplier;\n+import java.util.stream.Stream;\n+\n+import com.codahale.metrics.Gauge;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Suppliers;\n+import com.google.common.collect.Sets;\n+import com.palantir.atlasdb.metrics.MetricPublicationFilter;\n+import com.palantir.logsafe.Preconditions;\n+import com.palantir.logsafe.SafeArg;\n+\n+/**\n+ * Given a provided number of metrics, ensures that only the top {@code maxPermittedRank} are published in the steady\n+ * state.\n+ */\n+public final class TopNMetricPublicationController<T> {\n+    private static final Duration REFRESH_INTERVAL = Duration.ofSeconds(30);\n+\n+    private final Set<Gauge<T>> gauges;\n+    private final Comparator<T> comparator;\n+    private final int maxPermittedRank;\n+    private final Supplier<Optional<T>> lowerBoundSupplier;\n+\n+    private TopNMetricPublicationController(Comparator<T> comparator, int maxPermittedRank) {\n+        this.comparator = comparator;\n+        this.maxPermittedRank = maxPermittedRank;\n+        this.gauges = Sets.newConcurrentHashSet();\n+        this.lowerBoundSupplier = Suppliers.memoizeWithExpiration(\n+                this::calculateLowerBound,\n+                REFRESH_INTERVAL.toNanos(),\n+                TimeUnit.NANOSECONDS);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\") // Guaranteed correct\n+    public static <T extends Comparable> TopNMetricPublicationController<T> create(int maxPermittedRank) {\n+        Preconditions.checkState(maxPermittedRank > 0, \"maxPermittedRank must be positive\",\n+                SafeArg.of(\"maxPermittedRank\", maxPermittedRank));\n+        return new TopNMetricPublicationController<T>(Comparator.naturalOrder(), maxPermittedRank);\n+    }\n+\n+    public MetricPublicationFilter registerAndCreateFilter(Gauge<T> gauge) {\n+        gauges.add(gauge);\n+        return () -> shouldPublishIndividualGaugeMetric(gauge);\n+    }\n+\n+    private boolean shouldPublishIndividualGaugeMetric(Gauge<T> constituentGauge) {\n+        T value = constituentGauge.getValue();\n+        return lowerBoundSupplier.get()\n+                .map(lowerBound -> isAtLeastLowerBound(value, lowerBound))\n+                .orElse(true); // This means there aren't maxPermittedRank series, so we should publish the metric.\n+    }", "originalCommit": "ac3bdfd68b6a6574b7ca3c7e6045c94525d6d71a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxMTUyNQ==", "url": "https://github.com/palantir/atlasdb/pull/4892#discussion_r452411525", "bodyText": "That's a good flag. I think originally I thought this was fine, though you're right that maybe we should just arbitrarily pick if there are ties.", "author": "jeremyk-91", "createdAt": "2020-07-09T18:30:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEyODY5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "b2f56a44531a5e452216d59516cceb6865a6fdb9", "chunk": "diff --git a/atlasdb-client/src/main/java/com/palantir/atlasdb/util/TopNMetricPublicationController.java b/atlasdb-client/src/main/java/com/palantir/atlasdb/util/TopNMetricPublicationController.java\nindex e1ebe66b69..734e58f5e9 100644\n--- a/atlasdb-client/src/main/java/com/palantir/atlasdb/util/TopNMetricPublicationController.java\n+++ b/atlasdb-client/src/main/java/com/palantir/atlasdb/util/TopNMetricPublicationController.java\n\n@@ -18,11 +18,13 @@ package com.palantir.atlasdb.util;\n \n import java.time.Duration;\n import java.util.Comparator;\n+import java.util.Map;\n import java.util.Objects;\n import java.util.Optional;\n import java.util.Set;\n import java.util.concurrent.TimeUnit;\n import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n import com.codahale.metrics.Gauge;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE0OTExNw==", "url": "https://github.com/palantir/atlasdb/pull/4892#discussion_r452149117", "bodyText": "can we also have a test that checks lower bound is refreshed?", "author": "sudiksha27", "createdAt": "2020-07-09T11:27:22Z", "path": "atlasdb-client/src/test/java/com/palantir/atlasdb/util/TopNMetricPublicationControllerTest.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.util;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.LongStream;\n+import java.util.stream.Stream;\n+\n+import org.junit.Test;\n+\n+import com.codahale.metrics.Gauge;\n+import com.palantir.atlasdb.metrics.MetricPublicationFilter;\n+\n+public class TopNMetricPublicationControllerTest {\n+    @Test\n+    public void orderStatisticOfNothingIsAbsent() {\n+        assertThat(TopNMetricPublicationController.calculateOrderStatistic(\n+                Stream.<Integer>of(), Comparator.naturalOrder(), 1)).isEmpty();\n+        assertThat(TopNMetricPublicationController.calculateOrderStatistic(\n+                Stream.<Integer>of(null, null), Comparator.naturalOrder(), 1)).isEmpty();\n+    }\n+\n+    @Test\n+    public void calculatesSecondElementCorrectly() {\n+        assertThat(TopNMetricPublicationController.calculateOrderStatistic(\n+                IntStream.rangeClosed(1, 50).boxed(), Comparator.naturalOrder(), 2)).contains(49);\n+    }\n+\n+    @Test\n+    public void handlesDuplicates() {\n+        assertThat(TopNMetricPublicationController.calculateOrderStatistic(\n+                Stream.of(8, 8, 8, 8, 8), Comparator.naturalOrder(), 2)).contains(8);\n+    }\n+\n+    @Test\n+    public void orderStatisticAtEdgesOfStreamCanBeRetrieved() {\n+        assertThat(TopNMetricPublicationController.calculateOrderStatistic(\n+                IntStream.rangeClosed(1, 50).boxed(), Comparator.naturalOrder(), 50)).contains(1);\n+        assertThat(TopNMetricPublicationController.calculateOrderStatistic(\n+                IntStream.rangeClosed(1, 50).boxed(), Comparator.naturalOrder(), 51)).isEmpty();\n+    }\n+\n+    @Test\n+    public void skipsNullsInOrderStatisticComputation() {\n+        assertThat(TopNMetricPublicationController.calculateOrderStatistic(\n+                Stream.of(null, null, 3, 7), Comparator.naturalOrder(), 2)).contains(3);\n+        assertThat(TopNMetricPublicationController.calculateOrderStatistic(\n+                Stream.of(null, null, 3, 7), Comparator.naturalOrder(), 3)).isEmpty();\n+    }\n+\n+    @Test\n+    public void canSpecifyCustomComparator() {\n+        assertThat(TopNMetricPublicationController.calculateOrderStatistic(\n+                Stream.of(\"a\", \"bcd\", \"efghi\", \"jk\"), Comparator.comparingInt(String::length), 1))\n+                .contains(\"efghi\");\n+    }\n+\n+    @Test\n+    public void throwsIfAttemptingToRetrieveNonPositiveOrderStatistics() {\n+        assertThatThrownBy(() -> TopNMetricPublicationController.calculateOrderStatistic(\n+                IntStream.rangeClosed(1, 50).boxed(), Comparator.naturalOrder(), 0))\n+                .isInstanceOf(IllegalStateException.class)\n+                .hasMessageContaining(\"The order statistic to be queried for must be positive\");\n+        assertThatThrownBy(() -> TopNMetricPublicationController.calculateOrderStatistic(\n+                IntStream.rangeClosed(1, 50).boxed(), Comparator.naturalOrder(), -1))\n+                .isInstanceOf(IllegalStateException.class)\n+                .hasMessageContaining(\"The order statistic to be queried for must be positive\");\n+    }\n+\n+    @Test\n+    public void canSelectivelyPublishGaugeResults() {\n+        AtomicLong value1 = new AtomicLong(42);\n+        AtomicLong value2 = new AtomicLong(157);\n+\n+        Gauge<Long> gauge1 = value1::get;\n+        Gauge<Long> gauge2 = value2::get;\n+\n+        TopNMetricPublicationController<Long> controller = TopNMetricPublicationController.create(1);\n+        MetricPublicationFilter filter1 = controller.registerAndCreateFilter(gauge1);\n+        MetricPublicationFilter filter2 = controller.registerAndCreateFilter(gauge2);\n+\n+        assertThat(filter1.shouldPublish()).isFalse();\n+        assertThat(filter2.shouldPublish()).isTrue();\n+    }\n+\n+    @Test\n+    public void canSelectivelyPublishMultipleGaugeResults() {\n+        List<Gauge<Long>> atomicLongs = LongStream.range(0, 100)\n+                .mapToObj(AtomicLong::new)\n+                .<Gauge<Long>>map(atomicLong -> atomicLong::get)\n+                .collect(Collectors.toList());\n+\n+        TopNMetricPublicationController<Long> controller = TopNMetricPublicationController.create(7);\n+\n+        List<MetricPublicationFilter> filtersInOrder = atomicLongs.stream()\n+                .map(controller::registerAndCreateFilter)\n+                .collect(Collectors.toList());\n+\n+        assertThat(filtersInOrder.get(0).shouldPublish()).isFalse();\n+        assertThat(filtersInOrder.get(50).shouldPublish()).isFalse();\n+        assertThat(filtersInOrder.get(92).shouldPublish()).isFalse();\n+        assertThat(filtersInOrder.get(93).shouldPublish()).isTrue();\n+        assertThat(filtersInOrder.get(94).shouldPublish()).isTrue();\n+        assertThat(filtersInOrder.get(99).shouldPublish()).isTrue();\n+    }\n+\n+    @Test\n+    public void publishesAllGaugesIfThereAreFewerThanTheThreshold() {\n+        AtomicLong value1 = new AtomicLong(42);\n+        AtomicLong value2 = new AtomicLong(157);\n+\n+        Gauge<Long> gauge1 = value1::get;\n+        Gauge<Long> gauge2 = value2::get;\n+\n+        TopNMetricPublicationController<Long> controller = TopNMetricPublicationController.create(50);\n+        MetricPublicationFilter filter1 = controller.registerAndCreateFilter(gauge1);\n+        MetricPublicationFilter filter2 = controller.registerAndCreateFilter(gauge2);\n+\n+        assertThat(filter1.shouldPublish()).isTrue();\n+        assertThat(filter2.shouldPublish()).isTrue();\n+    }\n+", "originalCommit": "ac3bdfd68b6a6574b7ca3c7e6045c94525d6d71a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxMTk0OQ==", "url": "https://github.com/palantir/atlasdb/pull/4892#discussion_r452411949", "bodyText": "Will do!", "author": "jeremyk-91", "createdAt": "2020-07-09T18:31:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE0OTExNw=="}], "type": "inlineReview", "revised_code": {"commit": "b2f56a44531a5e452216d59516cceb6865a6fdb9", "chunk": "diff --git a/atlasdb-client/src/test/java/com/palantir/atlasdb/util/TopNMetricPublicationControllerTest.java b/atlasdb-client/src/test/java/com/palantir/atlasdb/util/TopNMetricPublicationControllerTest.java\nindex d90b230ba1..63ec5c0d80 100644\n--- a/atlasdb-client/src/test/java/com/palantir/atlasdb/util/TopNMetricPublicationControllerTest.java\n+++ b/atlasdb-client/src/test/java/com/palantir/atlasdb/util/TopNMetricPublicationControllerTest.java\n\n@@ -19,6 +19,7 @@ package com.palantir.atlasdb.util;\n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.assertThatThrownBy;\n \n+import java.time.Duration;\n import java.util.Comparator;\n import java.util.List;\n import java.util.concurrent.atomic.AtomicLong;\n"}}, {"oid": "b2f56a44531a5e452216d59516cceb6865a6fdb9", "url": "https://github.com/palantir/atlasdb/commit/b2f56a44531a5e452216d59516cceb6865a6fdb9", "message": "CR feedback", "committedDate": "2020-07-09T19:02:23Z", "type": "commit"}]}