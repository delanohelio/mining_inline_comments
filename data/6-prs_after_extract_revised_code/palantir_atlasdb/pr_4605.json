{"pr_number": 4605, "pr_title": "[LW] Wire LW into TransactionStarter", "pr_createdAt": "2020-02-26T17:36:58Z", "pr_url": "https://github.com/palantir/atlasdb/pull/4605", "timeline": [{"oid": "8740ab9b0eb8e8daf4d2d8152231738d07d4248e", "url": "https://github.com/palantir/atlasdb/commit/8740ab9b0eb8e8daf4d2d8152231738d07d4248e", "message": "Be better, one day at a time. Also fix nasty concurrency issue.", "committedDate": "2020-02-20T10:43:02Z", "type": "commit"}, {"oid": "2c3a9d273d2ff4ec589001af51cb408ed67b14fa", "url": "https://github.com/palantir/atlasdb/commit/2c3a9d273d2ff4ec589001af51cb408ed67b14fa", "message": "Rework lock watch updates and registration", "committedDate": "2020-02-21T16:58:50Z", "type": "commit"}, {"oid": "d311fef3558808de8fa7bf90975ff50d3b7115d7", "url": "https://github.com/palantir/atlasdb/commit/d311fef3558808de8fa7bf90975ff50d3b7115d7", "message": "Merge with develop", "committedDate": "2020-02-24T10:46:42Z", "type": "commit"}, {"oid": "121eada2e9528cbedc9c694d7067a0d8eea5421a", "url": "https://github.com/palantir/atlasdb/commit/121eada2e9528cbedc9c694d7067a0d8eea5421a", "message": "Do not filter unlocks for replayer", "committedDate": "2020-02-24T11:34:03Z", "type": "commit"}, {"oid": "413cc995a5ed5ff3de45629bf34f778e663e3be1", "url": "https://github.com/palantir/atlasdb/commit/413cc995a5ed5ff3de45629bf34f778e663e3be1", "message": "Add test for snapshot reflecting events logged during open locks calculation", "committedDate": "2020-02-24T11:44:02Z", "type": "commit"}, {"oid": "b093ba27896ea55a417dd52e8b83f35f3bda01aa", "url": "https://github.com/palantir/atlasdb/commit/b093ba27896ea55a417dd52e8b83f35f3bda01aa", "message": "Expose the interface that we need to get lock watch updates as an atlas client", "committedDate": "2020-02-25T16:15:37Z", "type": "commit"}, {"oid": "958eb971d0dd8fbddc7d5a7bef31b7c31f8931e3", "url": "https://github.com/palantir/atlasdb/commit/958eb971d0dd8fbddc7d5a7bef31b7c31f8931e3", "message": "Some refactoring", "committedDate": "2020-02-26T11:32:22Z", "type": "commit"}, {"oid": "f8a708a8a96a177980061d91573f57128730a9b8", "url": "https://github.com/palantir/atlasdb/commit/f8a708a8a96a177980061d91573f57128730a9b8", "message": "Fix merge conflict with develop", "committedDate": "2020-02-26T11:36:21Z", "type": "commit"}, {"oid": "c43507ab543f1255b3f0b04cb5df5b0394a61615", "url": "https://github.com/palantir/atlasdb/commit/c43507ab543f1255b3f0b04cb5df5b0394a61615", "message": "Use lock watch start transactions endpoint for transaction starter", "committedDate": "2020-02-26T16:55:22Z", "type": "commit"}, {"oid": "8e4b895474d65ec24f7528a0a8289cd25c0899f2", "url": "https://github.com/palantir/atlasdb/commit/8e4b895474d65ec24f7528a0a8289cd25c0899f2", "message": "cheCKStyle", "committedDate": "2020-02-26T17:35:55Z", "type": "commit"}, {"oid": "f21531142ce90e3eb8660bf3ac02d196644cfa02", "url": "https://github.com/palantir/atlasdb/commit/f21531142ce90e3eb8660bf3ac02d196644cfa02", "message": "Fix merge conflict", "committedDate": "2020-03-03T11:50:40Z", "type": "commit"}, {"oid": "97dc7094da47b409352c75e793c9ae8e1774decb", "url": "https://github.com/palantir/atlasdb/commit/97dc7094da47b409352c75e793c9ae8e1774decb", "message": "Remove unused endpoint", "committedDate": "2020-03-03T13:23:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyMDcwNA==", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387120704", "bodyText": "can this ever be hit via api? can we just throw a Http level error? or have an exception mapper that captures said exception? otherwise we just get a 500", "author": "felixdesouza", "createdAt": "2020-03-03T16:01:34Z", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/NoOpLockWatchManager.java", "diffHunk": "@@ -17,30 +17,27 @@\n package com.palantir.atlasdb.keyvalue.api.watch;\n \n import java.util.Set;\n-import java.util.UUID;\n \n-import com.google.common.collect.ImmutableSet;\n import com.palantir.lock.watch.IdentifiedVersion;\n import com.palantir.lock.watch.LockWatchReferences;\n-import com.palantir.lock.watch.LockWatchStateUpdate;\n+import com.palantir.lock.watch.NoOpLockWatchEventCache;\n import com.palantir.lock.watch.TransactionsLockWatchEvents;\n \n public final class NoOpLockWatchManager implements LockWatchManager {\n     public static final LockWatchManager INSTANCE = new NoOpLockWatchManager();\n-    public static final TransactionsLockWatchEvents NONE = TransactionsLockWatchEvents.failure(\n-            LockWatchStateUpdate.snapshot(UUID.randomUUID(), 0L, ImmutableSet.of(), ImmutableSet.of()));\n \n     private NoOpLockWatchManager() {\n         // ...\n     }\n \n     @Override\n-    public void registerWatches(Set<LockWatchReferences.LockWatchReference> lockWatchEntries) {\n-        // noop\n+    public void registerWatches(Set<LockWatchReferences.LockWatchReference> lockWatchReferences) {\n+        throw new UnsupportedOperationException(\"Lock watch registration not supported\");", "originalCommit": "97dc7094da47b409352c75e793c9ae8e1774decb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE0NzcwNg==", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387147706", "bodyText": "This is completely on the client side, just doesn't support lock watching in general", "author": "gmaretic", "createdAt": "2020-03-03T16:39:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyMDcwNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyMjcxMg==", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387122712", "bodyText": "why have this be optional if you have a noop version?", "author": "felixdesouza", "createdAt": "2020-03-03T16:04:37Z", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "diffHunk": "@@ -1204,6 +1218,7 @@ private static MultiTableSweepQueueWriter uninitializedTargetedSweeper(\n         TimestampManagementService timestampManagement();\n         TimelockService timelock();\n         Optional<TimeLockMigrator> migrator();\n+        Optional<LockWatchManager> lockWatcher();", "originalCommit": "97dc7094da47b409352c75e793c9ae8e1774decb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE3NDMwOA==", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387174308", "bodyText": "I think when this was originally written we needed an rpc client for the noop impl, but given that we have timelock here, we can just derive what we need when get commit timestamp gets added", "author": "gmaretic", "createdAt": "2020-03-03T17:21:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyMjcxMg=="}], "type": "inlineReview", "revised_code": {"commit": "27e9f34cc638edbbce2756fa725e57ee7fdefa43", "chunk": "diff --git a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\nindex b7b572caeb..8da6ebaaa1 100644\n--- a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n+++ b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n\n@@ -1218,7 +1218,10 @@ public abstract class TransactionManagers {\n         TimestampManagementService timestampManagement();\n         TimelockService timelock();\n         Optional<TimeLockMigrator> migrator();\n-        Optional<LockWatchManager> lockWatcher();\n+        @Value.Default\n+        default LockWatchManager lockWatcher() {\n+            return NoOpLockWatchManager.INSTANCE;\n+        }\n \n         @Value.Derived\n         default ManagedTimestampService managedTimestampService() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyMzcwNw==", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387123707", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.timelockService = RemoteTimelockServiceAdapter.create(timelockService, conjureTimelockService,\n          \n          \n            \n                            NoOpLockWatchEventCache.INSTANCE);\n          \n          \n            \n                    this.timelockService = RemoteTimelockServiceAdapter.create(\n          \n          \n            \n                            timelockService, \n          \n          \n            \n                            conjureTimelockService,\n          \n          \n            \n                            NoOpLockWatchEventCache.INSTANCE);", "author": "felixdesouza", "createdAt": "2020-03-03T16:06:01Z", "path": "atlasdb-jepsen-tests/src/main/java/com/palantir/atlasdb/http/AsyncLockClient.java", "diffHunk": "@@ -38,7 +39,8 @@\n \n     private AsyncLockClient(NamespacedTimelockRpcClient timelockService,\n             NamespacedConjureTimelockService conjureTimelockService) {\n-        this.timelockService = RemoteTimelockServiceAdapter.create(timelockService, conjureTimelockService);\n+        this.timelockService = RemoteTimelockServiceAdapter.create(timelockService, conjureTimelockService,\n+                NoOpLockWatchEventCache.INSTANCE);", "originalCommit": "97dc7094da47b409352c75e793c9ae8e1774decb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "27e9f34cc638edbbce2756fa725e57ee7fdefa43", "chunk": "diff --git a/atlasdb-jepsen-tests/src/main/java/com/palantir/atlasdb/http/AsyncLockClient.java b/atlasdb-jepsen-tests/src/main/java/com/palantir/atlasdb/http/AsyncLockClient.java\nindex 8106bcc293..911d852a87 100644\n--- a/atlasdb-jepsen-tests/src/main/java/com/palantir/atlasdb/http/AsyncLockClient.java\n+++ b/atlasdb-jepsen-tests/src/main/java/com/palantir/atlasdb/http/AsyncLockClient.java\n\n@@ -39,7 +39,9 @@ public final class AsyncLockClient implements JepsenLockClient<LockToken> {\n \n     private AsyncLockClient(NamespacedTimelockRpcClient timelockService,\n             NamespacedConjureTimelockService conjureTimelockService) {\n-        this.timelockService = RemoteTimelockServiceAdapter.create(timelockService, conjureTimelockService,\n+        this.timelockService = RemoteTimelockServiceAdapter.create(\n+                timelockService,\n+                conjureTimelockService,\n                 NoOpLockWatchEventCache.INSTANCE);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyNDMxOQ==", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387124319", "bodyText": "how does this tie in with conjure objects? or this \"above\" the rpc layer so to speak?", "author": "felixdesouza", "createdAt": "2020-03-03T16:06:54Z", "path": "lock-api-objects/src/main/java/com/palantir/lock/v2/StartTransactionRequestV5.java", "diffHunk": "@@ -32,4 +32,13 @@\n     UUID requestorId();\n     OptionalLong lastKnownLockLogVersion();\n     int numTransactions();\n+\n+    static StartTransactionRequestV5 createForRequestor(UUID requestorId, OptionalLong lockVersion, int number) {", "originalCommit": "97dc7094da47b409352c75e793c9ae8e1774decb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5MzE4Nw==", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387193187", "bodyText": "Yeah some things can get cleaned up, but outside the scope of this PR", "author": "gmaretic", "createdAt": "2020-03-03T17:55:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyNDMxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcxNTYxNA==", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387715614", "bodyText": "is it within the scope of lock watches though? like if there's a chance to clear some things up, it would be ideal, before it gets too annoying to actually change etc.", "author": "felixdesouza", "createdAt": "2020-03-04T14:50:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyNDMxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "27e9f34cc638edbbce2756fa725e57ee7fdefa43", "chunk": "diff --git a/lock-api-objects/src/main/java/com/palantir/lock/v2/StartTransactionRequestV5.java b/lock-api-objects/src/main/java/com/palantir/lock/v2/StartTransactionRequestV5.java\nindex 454b8d70fb..df6f1441e1 100644\n--- a/lock-api-objects/src/main/java/com/palantir/lock/v2/StartTransactionRequestV5.java\n+++ b/lock-api-objects/src/main/java/com/palantir/lock/v2/StartTransactionRequestV5.java\n\n@@ -32,13 +32,4 @@ public interface StartTransactionRequestV5 {\n     UUID requestorId();\n     OptionalLong lastKnownLockLogVersion();\n     int numTransactions();\n-\n-    static StartTransactionRequestV5 createForRequestor(UUID requestorId, OptionalLong lockVersion, int number) {\n-        return ImmutableStartTransactionRequestV5.builder()\n-                .requestId(UUID.randomUUID())\n-                .requestorId(requestorId)\n-                .lastKnownLockLogVersion(lockVersion)\n-                .numTransactions(number)\n-                .build();\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyNDQzNA==", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387124434", "bodyText": "similar to above", "author": "felixdesouza", "createdAt": "2020-03-03T16:07:04Z", "path": "lock-api-objects/src/main/java/com/palantir/lock/v2/StartTransactionResponseV5.java", "diffHunk": "@@ -40,4 +40,17 @@ static StartTransactionResponseV5 fromV4(StartTransactionResponseV4 v4response,\n                 .lockWatchUpdate(lockWatch)\n                 .build();\n     }\n+\n+    static StartTransactionResponseV5 of(", "originalCommit": "97dc7094da47b409352c75e793c9ae8e1774decb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyNDU1NA==", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387124554", "bodyText": "?", "author": "felixdesouza", "createdAt": "2020-03-03T16:07:13Z", "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/IdentifiedVersion.java", "diffHunk": "@@ -25,5 +26,5 @@\n     @Value.Parameter\n     UUID id();\n     @Value.Parameter\n-    long version();\n+    OptionalLong version();", "originalCommit": "97dc7094da47b409352c75e793c9ae8e1774decb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5MzM3NA==", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387193374", "bodyText": "We need to support unknown version", "author": "gmaretic", "createdAt": "2020-03-03T17:56:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyNDU1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcxNTUwMQ==", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387715501", "bodyText": "probably a silly question simply because I'm not aware of lock watch intricacies, but why do we need to? this is all new code right?", "author": "felixdesouza", "createdAt": "2020-03-04T14:50:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyNDU1NA=="}], "type": "inlineReview", "revised_code": {"commit": "27e9f34cc638edbbce2756fa725e57ee7fdefa43", "chunk": "diff --git a/lock-api-objects/src/main/java/com/palantir/lock/watch/IdentifiedVersion.java b/lock-api-objects/src/main/java/com/palantir/lock/watch/IdentifiedVersion.java\nindex 9fb344b407..9f782ccf56 100644\n--- a/lock-api-objects/src/main/java/com/palantir/lock/watch/IdentifiedVersion.java\n+++ b/lock-api-objects/src/main/java/com/palantir/lock/watch/IdentifiedVersion.java\n\n@@ -26,5 +26,5 @@ public interface IdentifiedVersion {\n     @Value.Parameter\n     UUID id();\n     @Value.Parameter\n-    OptionalLong version();\n+    Optional<Long> version();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyNDk0NA==", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387124944", "bodyText": "why is this class in lock-api-objects? it doesn't appear in an actual object does it..?", "author": "felixdesouza", "createdAt": "2020-03-03T16:07:50Z", "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/LockWatchingRpcClient.java", "diffHunk": "@@ -31,10 +31,6 @@\n     @Path(\"start-watching\")\n     void startWatching(@PathParam(\"namespace\") String namespace, LockWatchRequest lockWatchRequest);\n \n-    @POST", "originalCommit": "97dc7094da47b409352c75e793c9ae8e1774decb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyNTI2Mg==", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387125262", "bodyText": "similarly this class, likely a separate pr, but it's probably a bit misleading", "author": "felixdesouza", "createdAt": "2020-03-03T16:08:16Z", "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/NamespacedLockWatchingRpcClient.java", "diffHunk": "@@ -17,22 +17,18 @@\n package com.palantir.lock.watch;\n \n public class NamespacedLockWatchingRpcClient {\n-    private final String namespace;", "originalCommit": "97dc7094da47b409352c75e793c9ae8e1774decb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyNTUyMg==", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387125522", "bodyText": "revert?", "author": "felixdesouza", "createdAt": "2020-03-03T16:08:39Z", "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/NamespacedLockWatchingRpcClient.java", "diffHunk": "@@ -17,22 +17,18 @@\n package com.palantir.lock.watch;\n \n public class NamespacedLockWatchingRpcClient {\n-    private final String namespace;\n     private final LockWatchingRpcClient lockWatchingRpcClient;\n+    private final String namespace;\n \n-    public NamespacedLockWatchingRpcClient(String namespace, LockWatchingRpcClient lockWatchingRpcClient) {\n-        this.namespace = namespace;\n+    public NamespacedLockWatchingRpcClient(LockWatchingRpcClient lockWatchingRpcClient, String namespace) {", "originalCommit": "97dc7094da47b409352c75e793c9ae8e1774decb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyNjA3OQ==", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387126079", "bodyText": "just make it final and use mock-maker-inline which can mock final types: https://www.baeldung.com/mockito-final", "author": "felixdesouza", "createdAt": "2020-03-03T16:09:27Z", "path": "lock-api-objects/src/main/java/com/palantir/lock/watch/NoOpLockWatchEventCache.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.watch;\n+\n+import java.util.OptionalLong;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+@SuppressWarnings(\"FinalClass\") // mocks", "originalCommit": "97dc7094da47b409352c75e793c9ae8e1774decb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyNjQ5Ng==", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387126496", "bodyText": "is this used in prod? or is this just used for tests, haven't really processed where everything is used just yet", "author": "felixdesouza", "createdAt": "2020-03-03T16:10:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyNjA3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "27e9f34cc638edbbce2756fa725e57ee7fdefa43", "chunk": "diff --git a/lock-api-objects/src/main/java/com/palantir/lock/watch/NoOpLockWatchEventCache.java b/lock-api-objects/src/main/java/com/palantir/lock/watch/NoOpLockWatchEventCache.java\nindex 1073900aee..66c606b808 100644\n--- a/lock-api-objects/src/main/java/com/palantir/lock/watch/NoOpLockWatchEventCache.java\n+++ b/lock-api-objects/src/main/java/com/palantir/lock/watch/NoOpLockWatchEventCache.java\n\n@@ -16,7 +16,7 @@\n \n package com.palantir.lock.watch;\n \n-import java.util.OptionalLong;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.UUID;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyODcxMA==", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387128710", "bodyText": "this is weird? but I can't think of another way :S", "author": "felixdesouza", "createdAt": "2020-03-03T16:13:05Z", "path": "lock-api/src/main/java/com/palantir/lock/client/LockLeaseService.java", "diffHunk": "@@ -88,6 +90,26 @@ StartTransactionResponseV4 startTransactions(int batchSize) {\n                 lease);\n     }\n \n+    StartTransactionResponseV5 startTransactionsWithWatches(OptionalLong version, int batchSize) {\n+        ConjureStartTransactionsRequest request = ConjureStartTransactionsRequest.builder()\n+                .requestorId(clientId)\n+                .requestId(UUID.randomUUID())\n+                .numTransactions(batchSize)\n+                .lastKnownVersion(version.isPresent() ? Optional.of(version.getAsLong()) : Optional.empty())", "originalCommit": "97dc7094da47b409352c75e793c9ae8e1774decb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyOTYxNg==", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387129616", "bodyText": "why even have it be OptionalLong if you're going to have to box unbox everywhere?", "author": "felixdesouza", "createdAt": "2020-03-03T16:14:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyODcxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5NDc5Mw==", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387194793", "bodyText": "Fair, had to make it Optional to avoid breaking wire format and failed to update this", "author": "gmaretic", "createdAt": "2020-03-03T17:58:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyODcxMA=="}], "type": "inlineReview", "revised_code": {"commit": "27e9f34cc638edbbce2756fa725e57ee7fdefa43", "chunk": "diff --git a/lock-api/src/main/java/com/palantir/lock/client/LockLeaseService.java b/lock-api/src/main/java/com/palantir/lock/client/LockLeaseService.java\nindex bbf4f5379a..132f918a77 100644\n--- a/lock-api/src/main/java/com/palantir/lock/client/LockLeaseService.java\n+++ b/lock-api/src/main/java/com/palantir/lock/client/LockLeaseService.java\n\n@@ -90,24 +88,14 @@ class LockLeaseService {\n                 lease);\n     }\n \n-    StartTransactionResponseV5 startTransactionsWithWatches(OptionalLong version, int batchSize) {\n+    ConjureStartTransactionsResponse startTransactionsWithWatches(Optional<Long> version, int batchSize) {\n         ConjureStartTransactionsRequest request = ConjureStartTransactionsRequest.builder()\n                 .requestorId(clientId)\n                 .requestId(UUID.randomUUID())\n                 .numTransactions(batchSize)\n-                .lastKnownVersion(version.isPresent() ? Optional.of(version.getAsLong()) : Optional.empty())\n+                .lastKnownVersion(version)\n                 .build();\n-        ConjureStartTransactionsResponse conjureResponse = conjureDelegate.startTransactions(request);\n-\n-        Lease lease = conjureResponse.getLease();\n-        LeasedLockToken leasedLockToken = LeasedLockToken.of(conjureResponse.getImmutableTimestamp().getLock(), lease);\n-        long immutableTs = conjureResponse.getImmutableTimestamp().getImmutableTimestamp();\n-\n-        return StartTransactionResponseV5.of(\n-                LockImmutableTimestampResponse.of(immutableTs, leasedLockToken),\n-                conjureResponse.getTimestamps(),\n-                lease,\n-                conjureResponse.getLockWatchUpdate());\n+        return conjureDelegate.startTransactions(request);\n     }\n \n     LockResponse lock(LockRequest request) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEzMDE0NA==", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387130144", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        TimelockRpcClient rpcClient, ConjureTimelockService conjureClient, String timelockNamespace,\n          \n          \n            \n                        LockWatchEventCache lockWatchEventCache) {\n          \n          \n            \n                        TimelockRpcClient rpcClient, \n          \n          \n            \n                        ConjureTimelockService conjureClient, \n          \n          \n            \n                        String timelockNamespace,\n          \n          \n            \n                        LockWatchEventCache lockWatchEventCache) {", "author": "felixdesouza", "createdAt": "2020-03-03T16:15:00Z", "path": "lock-api/src/main/java/com/palantir/lock/client/RemoteTimelockServiceAdapter.java", "diffHunk": "@@ -37,23 +38,27 @@\n     private final TransactionStarter transactionStarter;\n \n     private RemoteTimelockServiceAdapter(NamespacedTimelockRpcClient rpcClient,\n-            NamespacedConjureTimelockService conjureTimelockService) {\n+            NamespacedConjureTimelockService conjureTimelockService,\n+            LockWatchEventCache lockWatchEventCache) {\n         this.rpcClient = rpcClient;\n         this.lockLeaseService = LockLeaseService.create(rpcClient, conjureTimelockService);\n-        this.transactionStarter = TransactionStarter.create(lockLeaseService);\n+        this.transactionStarter = TransactionStarter.create(lockLeaseService, lockWatchEventCache);\n     }\n \n     public static RemoteTimelockServiceAdapter create(\n             NamespacedTimelockRpcClient rpcClient,\n-            NamespacedConjureTimelockService conjureClient) {\n-        return new RemoteTimelockServiceAdapter(rpcClient, conjureClient);\n+            NamespacedConjureTimelockService conjureClient,\n+            LockWatchEventCache lockWatchEventCache) {\n+        return new RemoteTimelockServiceAdapter(rpcClient, conjureClient, lockWatchEventCache);\n     }\n \n     public static RemoteTimelockServiceAdapter create(\n-            TimelockRpcClient rpcClient, ConjureTimelockService conjureClient, String timelockNamespace) {\n+            TimelockRpcClient rpcClient, ConjureTimelockService conjureClient, String timelockNamespace,\n+            LockWatchEventCache lockWatchEventCache) {", "originalCommit": "97dc7094da47b409352c75e793c9ae8e1774decb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "27e9f34cc638edbbce2756fa725e57ee7fdefa43", "chunk": "diff --git a/lock-api/src/main/java/com/palantir/lock/client/RemoteTimelockServiceAdapter.java b/lock-api/src/main/java/com/palantir/lock/client/RemoteTimelockServiceAdapter.java\nindex 438687798d..977fa96c75 100644\n--- a/lock-api/src/main/java/com/palantir/lock/client/RemoteTimelockServiceAdapter.java\n+++ b/lock-api/src/main/java/com/palantir/lock/client/RemoteTimelockServiceAdapter.java\n\n@@ -53,7 +53,9 @@ public final class RemoteTimelockServiceAdapter implements TimelockService, Auto\n     }\n \n     public static RemoteTimelockServiceAdapter create(\n-            TimelockRpcClient rpcClient, ConjureTimelockService conjureClient, String timelockNamespace,\n+            TimelockRpcClient rpcClient,\n+            ConjureTimelockService conjureClient,\n+            String timelockNamespace,\n             LockWatchEventCache lockWatchEventCache) {\n         return create(\n                 new NamespacedTimelockRpcClient(rpcClient, timelockNamespace),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEzMDUwMQ==", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387130501", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        LockLeaseService lockLeaseService, LockWatchEventCache lockWatchEventCache,\n          \n          \n            \n                        int numberOfTransactions) {\n          \n          \n            \n                        LockLeaseService lockLeaseService, \n          \n          \n            \n                        LockWatchEventCache lockWatchEventCache,\n          \n          \n            \n                        int numberOfTransactions) {", "author": "felixdesouza", "createdAt": "2020-03-03T16:15:29Z", "path": "lock-api/src/main/java/com/palantir/lock/client/TransactionStarter.java", "diffHunk": "@@ -152,15 +153,21 @@ public void close() {\n     }\n \n     private static List<StartIdentifiedAtlasDbTransactionResponse> getStartTransactionResponses(\n-            LockLeaseService lockLeaseService, int numberOfTransactions) {\n+            LockLeaseService lockLeaseService, LockWatchEventCache lockWatchEventCache,\n+            int numberOfTransactions) {", "originalCommit": "97dc7094da47b409352c75e793c9ae8e1774decb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "27e9f34cc638edbbce2756fa725e57ee7fdefa43", "chunk": "diff --git a/lock-api/src/main/java/com/palantir/lock/client/TransactionStarter.java b/lock-api/src/main/java/com/palantir/lock/client/TransactionStarter.java\nindex 01ccc5c258..2663123b1a 100644\n--- a/lock-api/src/main/java/com/palantir/lock/client/TransactionStarter.java\n+++ b/lock-api/src/main/java/com/palantir/lock/client/TransactionStarter.java\n\n@@ -153,26 +153,27 @@ final class TransactionStarter implements AutoCloseable {\n     }\n \n     private static List<StartIdentifiedAtlasDbTransactionResponse> getStartTransactionResponses(\n-            LockLeaseService lockLeaseService, LockWatchEventCache lockWatchEventCache,\n+            LockLeaseService lockLeaseService,\n+            LockWatchEventCache lockWatchEventCache,\n             int numberOfTransactions) {\n         List<StartIdentifiedAtlasDbTransactionResponse> result = new ArrayList<>();\n         while (result.size() < numberOfTransactions) {\n-            StartTransactionResponseV5 response = lockLeaseService.startTransactionsWithWatches(\n+            ConjureStartTransactionsResponse response = lockLeaseService.startTransactionsWithWatches(\n                     lockWatchEventCache.lastKnownVersion().version(), numberOfTransactions - result.size());\n             lockWatchEventCache.processStartTransactionsUpdate(\n-                    response.timestamps().stream().boxed().collect(Collectors.toSet()),\n-                    response.lockWatchUpdate());\n+                    response.getTimestamps().stream().boxed().collect(Collectors.toSet()),\n+                    response.getLockWatchUpdate());\n             result.addAll(split(response));\n         }\n         return result;\n     }\n \n-    private static List<StartIdentifiedAtlasDbTransactionResponse> split(StartTransactionResponseV5 batchedResponse) {\n-        PartitionedTimestamps partitionedTimestamps = batchedResponse.timestamps();\n+    private static List<StartIdentifiedAtlasDbTransactionResponse> split(ConjureStartTransactionsResponse response) {\n+        PartitionedTimestamps partitionedTimestamps = response.getTimestamps();\n         int partition = partitionedTimestamps.partition();\n \n-        LockToken immutableTsLock = batchedResponse.immutableTimestamp().getLock();\n-        long immutableTs = batchedResponse.immutableTimestamp().getImmutableTimestamp();\n+        LockToken immutableTsLock = response.getImmutableTimestamp().getLock();\n+        long immutableTs = response.getImmutableTimestamp().getImmutableTimestamp();\n \n         Stream<LockImmutableTimestampResponse> immutableTsAndLocks =\n                 LockTokenShare.share(immutableTsLock, partitionedTimestamps.count())\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEzMjU1Ng==", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387132556", "bodyText": "as a meta point, if StartTransaction(Request|Response) is not transferred over the wire, can we get rid of the V5 etc?", "author": "felixdesouza", "createdAt": "2020-03-03T16:18:23Z", "path": "lock-api/src/test/java/com/palantir/lock/client/TransactionStarterTest.java", "diffHunk": "@@ -78,19 +96,19 @@ public void after() {\n \n     @Test\n     public void shouldDeriveStartTransactionResponseFromBatchedResponse_singleTransaction() {\n-        StartTransactionResponseV4 startTransactionResponse = getStartTransactionResponse(12, 1);\n+        StartTransactionResponseV5 startTransactionResponse = getStartTransactionResponse(12, 1);", "originalCommit": "97dc7094da47b409352c75e793c9ae8e1774decb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5NTUyNw==", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387195527", "bodyText": "Yup, will open a follow-up PR", "author": "gmaretic", "createdAt": "2020-03-03T18:00:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEzMjU1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "27e9f34cc638edbbce2756fa725e57ee7fdefa43", "chunk": "diff --git a/lock-api/src/test/java/com/palantir/lock/client/TransactionStarterTest.java b/lock-api/src/test/java/com/palantir/lock/client/TransactionStarterTest.java\nindex d343d74d73..009be212d9 100644\n--- a/lock-api/src/test/java/com/palantir/lock/client/TransactionStarterTest.java\n+++ b/lock-api/src/test/java/com/palantir/lock/client/TransactionStarterTest.java\n\n@@ -96,9 +96,9 @@ public class TransactionStarterTest {\n \n     @Test\n     public void shouldDeriveStartTransactionResponseFromBatchedResponse_singleTransaction() {\n-        StartTransactionResponseV5 startTransactionResponse = getStartTransactionResponse(12, 1);\n+        ConjureStartTransactionsResponse startTransactionResponse = getStartTransactionResponse(12, 1);\n \n-        when(lockLeaseService.startTransactionsWithWatches(OptionalLong.empty(), 1))\n+        when(lockLeaseService.startTransactionsWithWatches(Optional.empty(), 1))\n                 .thenReturn(startTransactionResponse);\n         StartIdentifiedAtlasDbTransactionResponse response = transactionStarter.startIdentifiedAtlasDbTransaction();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEzNDA3Mw==", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387134073", "bodyText": "it's unclear to me why you need this here? is this used anywhere? or are you only creating it here to be used inside timelockService above?", "author": "felixdesouza", "createdAt": "2020-03-03T16:20:19Z", "path": "timelock-server/src/testCommon/java/com/palantir/atlasdb/timelock/NamespacedClients.java", "diffHunk": "@@ -59,7 +61,13 @@ static NamespacedClients from(String namespace, ProxyFactory proxyFactory) {\n     default TimelockService timelockService() {\n         return RemoteTimelockServiceAdapter.create(\n                 namespacedTimelockRpcClient(),\n-                namespacedConjureTimelockService());\n+                namespacedConjureTimelockService(),\n+                lockWatchEventCache());\n+    }\n+\n+    @Value.Default\n+    default LockWatchEventCache lockWatchEventCache() {", "originalCommit": "97dc7094da47b409352c75e793c9ae8e1774decb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5NjYwOA==", "url": "https://github.com/palantir/atlasdb/pull/4605#discussion_r387196608", "bodyText": "For tests that don't exist yet I guess", "author": "gmaretic", "createdAt": "2020-03-03T18:02:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEzNDA3Mw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "27e9f34cc638edbbce2756fa725e57ee7fdefa43", "url": "https://github.com/palantir/atlasdb/commit/27e9f34cc638edbbce2756fa725e57ee7fdefa43", "message": "Address CR", "committedDate": "2020-03-03T18:07:11Z", "type": "commit"}, {"oid": "1bd37b83a32157e29ce3edfc3f7f3e8795024195", "url": "https://github.com/palantir/atlasdb/commit/1bd37b83a32157e29ce3edfc3f7f3e8795024195", "message": "Merging with develop", "committedDate": "2020-03-04T11:03:35Z", "type": "commit"}, {"oid": "e28798845f07df9d78c0b229dffe2c860a264b90", "url": "https://github.com/palantir/atlasdb/commit/e28798845f07df9d78c0b229dffe2c860a264b90", "message": "Merge with develop and fix bug", "committedDate": "2020-03-04T11:34:43Z", "type": "commit"}, {"oid": "a7d68b19ac74ae56fcaf6366986488b9ebfdb0d7", "url": "https://github.com/palantir/atlasdb/commit/a7d68b19ac74ae56fcaf6366986488b9ebfdb0d7", "message": "Fix compile break", "committedDate": "2020-03-04T12:00:17Z", "type": "commit"}]}