{"pr_number": 4724, "pr_title": "[PaxosLog] Sqlite implementation without namespaces", "pr_createdAt": "2020-04-21T14:50:49Z", "pr_url": "https://github.com/palantir/atlasdb/pull/4724", "timeline": [{"oid": "6f5421d2fa3d0916419fadbfc3c34ac3f2c26d5f", "url": "https://github.com/palantir/atlasdb/commit/6f5421d2fa3d0916419fadbfc3c34ac3f2c26d5f", "message": "sqlite", "committedDate": "2020-04-20T14:01:50Z", "type": "commit"}, {"oid": "86033f658b5d4a0f152ffc4b5ffb11acc75a401d", "url": "https://github.com/palantir/atlasdb/commit/86033f658b5d4a0f152ffc4b5ffb11acc75a401d", "message": "Checkpoint", "committedDate": "2020-04-20T16:49:50Z", "type": "commit"}, {"oid": "51b97332a9bd115d6493103d1a51ef7478d802ea", "url": "https://github.com/palantir/atlasdb/commit/51b97332a9bd115d6493103d1a51ef7478d802ea", "message": "Clean up a bit and add tests", "committedDate": "2020-04-21T10:43:26Z", "type": "commit"}, {"oid": "2d1cb9a05eed2aeac89ab08fa9bdbdc20ba110a0", "url": "https://github.com/palantir/atlasdb/commit/2d1cb9a05eed2aeac89ab08fa9bdbdc20ba110a0", "message": "Improve test", "committedDate": "2020-04-21T12:11:25Z", "type": "commit"}, {"oid": "c14dd16d03376e57a4b48e88863d868ac0d1c38c", "url": "https://github.com/palantir/atlasdb/commit/c14dd16d03376e57a4b48e88863d868ac0d1c38c", "message": "Allow overwriting", "committedDate": "2020-04-21T14:47:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI1NTI2Mg==", "url": "https://github.com/palantir/atlasdb/pull/4724#discussion_r412255262", "bodyText": "Not now, and we'll change this: should we enforce this?", "author": "jeremyk-91", "createdAt": "2020-04-21T14:52:05Z", "path": "leader-election-impl/src/main/java/com/palantir/paxos/SqliteConnections.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.paxos;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.util.function.Supplier;\n+\n+import com.google.common.base.Suppliers;\n+\n+/**\n+ * This class is responsible for creating Sqlite connections to an instance.\n+ * There should be one instance per timelock.", "originalCommit": "c14dd16d03376e57a4b48e88863d868ac0d1c38c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e6c35747c5fedd02b4d551a626aea0da235d889d", "chunk": "diff --git a/leader-election-impl/src/main/java/com/palantir/paxos/SqliteConnections.java b/leader-election-impl/src/main/java/com/palantir/paxos/SqliteConnections.java\nindex 0671451c9a..bee63f6a4f 100644\n--- a/leader-election-impl/src/main/java/com/palantir/paxos/SqliteConnections.java\n+++ b/leader-election-impl/src/main/java/com/palantir/paxos/SqliteConnections.java\n\n@@ -21,13 +21,11 @@ import java.sql.DriverManager;\n import java.sql.SQLException;\n import java.util.function.Supplier;\n \n-import com.google.common.base.Suppliers;\n-\n /**\n  * This class is responsible for creating Sqlite connections to an instance.\n  * There should be one instance per timelock.\n  */\n-public class SqliteConnections {\n+public final class SqliteConnections {\n     private SqliteConnections() {\n         // no\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI1NTc5OQ==", "url": "https://github.com/palantir/atlasdb/pull/4724#discussion_r412255799", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    stateLog =  SqlitePaxosStateLog.createInitialized(connectionSupplier);\n          \n          \n            \n                    stateLog = SqlitePaxosStateLog.createInitialized(connectionSupplier);", "author": "jeremyk-91", "createdAt": "2020-04-21T14:52:45Z", "path": "leader-election-impl/src/test/java/com/palantir/paxos/SqlitePaxosStateLogTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.paxos;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.function.Supplier;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.google.common.base.Suppliers;\n+\n+public class SqlitePaxosStateLogTest {\n+    private PaxosStateLog<PaxosValue> stateLog;\n+\n+    @Before\n+    public void setup() {\n+        Supplier<Connection> connectionSupplier = Suppliers.memoize(SqliteConnections.createDatabaseForTest()::get);\n+        stateLog =  SqlitePaxosStateLog.createInitialized(connectionSupplier);", "originalCommit": "c14dd16d03376e57a4b48e88863d868ac0d1c38c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94397de38099b8ffc3e8ef77b69c92c808f2db0d", "chunk": "diff --git a/leader-election-impl/src/test/java/com/palantir/paxos/SqlitePaxosStateLogTest.java b/leader-election-impl/src/test/java/com/palantir/paxos/SqlitePaxosStateLogTest.java\nindex c523ceabaa..7adbc3fa1d 100644\n--- a/leader-election-impl/src/test/java/com/palantir/paxos/SqlitePaxosStateLogTest.java\n+++ b/leader-election-impl/src/test/java/com/palantir/paxos/SqlitePaxosStateLogTest.java\n\n@@ -34,7 +34,7 @@ public class SqlitePaxosStateLogTest {\n     @Before\n     public void setup() {\n         Supplier<Connection> connectionSupplier = Suppliers.memoize(SqliteConnections.createDatabaseForTest()::get);\n-        stateLog =  SqlitePaxosStateLog.createInitialized(connectionSupplier);\n+        stateLog = SqlitePaxosStateLog.createInitialized(connectionSupplier);\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI1NzU3Mw==", "url": "https://github.com/palantir/atlasdb/pull/4724#discussion_r412257573", "bodyText": "will be fixed in next PR: the constraint is funky", "author": "jeremyk-91", "createdAt": "2020-04-21T14:54:41Z", "path": "leader-election-impl/src/main/java/com/palantir/paxos/SqlitePaxosStateLog.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.paxos;\n+\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+import com.google.common.io.ByteStreams;\n+import com.palantir.common.base.Throwables;\n+import com.palantir.common.persist.Persistable;\n+\n+public class SqlitePaxosStateLog<V extends Persistable & Versionable> implements PaxosStateLog<V> {\n+    private final Supplier<Connection> connectionSupplier;\n+\n+    private SqlitePaxosStateLog(Supplier<Connection> connectionSupplier) {\n+        this.connectionSupplier = connectionSupplier;\n+    }\n+\n+    public static <V extends Persistable & Versionable> PaxosStateLog<V> createInitialized(Supplier<Connection> conn) {\n+        SqlitePaxosStateLog<V> log = new SqlitePaxosStateLog<>(conn);\n+        log.initialize();\n+        return log;\n+    }\n+\n+    private void initialize() {\n+        executeVoid(\"CREATE TABLE IF NOT EXISTS paxosLog (seq BIGINT, val BLOB, CONSTRAINT pk_dual PRIMARY KEY (seq))\");", "originalCommit": "c14dd16d03376e57a4b48e88863d868ac0d1c38c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94397de38099b8ffc3e8ef77b69c92c808f2db0d", "chunk": "diff --git a/leader-election-impl/src/main/java/com/palantir/paxos/SqlitePaxosStateLog.java b/leader-election-impl/src/main/java/com/palantir/paxos/SqlitePaxosStateLog.java\nindex 1a771f4aa4..1f7baf8ccb 100644\n--- a/leader-election-impl/src/main/java/com/palantir/paxos/SqlitePaxosStateLog.java\n+++ b/leader-election-impl/src/main/java/com/palantir/paxos/SqlitePaxosStateLog.java\n\n@@ -60,7 +60,7 @@ public class SqlitePaxosStateLog<V extends Persistable & Versionable> implements\n \n     @Override\n     public byte[] readRound(long seq) {\n-        return executeStatement(String.format(\"SELECT val FROM paxosLog WHERE seq = %s;\", seq))\n+        return executeStatement(String.format(\"SELECT val FROM paxosLog WHERE seq = %s\", seq))\n                 .map(SqlitePaxosStateLog::getByteArrayUnchecked)\n                 .orElse(null);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjI1ODExMQ==", "url": "https://github.com/palantir/atlasdb/pull/4724#discussion_r412258111", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return executeStatement(String.format(\"SELECT val FROM paxosLog WHERE seq = %s;\", seq))\n          \n          \n            \n                    return executeStatement(String.format(\"SELECT val FROM paxosLog WHERE seq = %s\", seq))", "author": "jeremyk-91", "createdAt": "2020-04-21T14:55:19Z", "path": "leader-election-impl/src/main/java/com/palantir/paxos/SqlitePaxosStateLog.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.paxos;\n+\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+import com.google.common.io.ByteStreams;\n+import com.palantir.common.base.Throwables;\n+import com.palantir.common.persist.Persistable;\n+\n+public class SqlitePaxosStateLog<V extends Persistable & Versionable> implements PaxosStateLog<V> {\n+    private final Supplier<Connection> connectionSupplier;\n+\n+    private SqlitePaxosStateLog(Supplier<Connection> connectionSupplier) {\n+        this.connectionSupplier = connectionSupplier;\n+    }\n+\n+    public static <V extends Persistable & Versionable> PaxosStateLog<V> createInitialized(Supplier<Connection> conn) {\n+        SqlitePaxosStateLog<V> log = new SqlitePaxosStateLog<>(conn);\n+        log.initialize();\n+        return log;\n+    }\n+\n+    private void initialize() {\n+        executeVoid(\"CREATE TABLE IF NOT EXISTS paxosLog (seq BIGINT, val BLOB, CONSTRAINT pk_dual PRIMARY KEY (seq))\");\n+    }\n+\n+    @Override\n+    public void writeRound(long seq, V round) {\n+        try {\n+            PreparedStatement preparedStatement = connectionSupplier.get().prepareStatement(\n+                    \"INSERT OR REPLACE INTO paxosLog (seq, val) VALUES (?, ?)\");\n+            preparedStatement.setLong(1, seq);\n+            preparedStatement.setBytes(2, round.persistToBytes());\n+            preparedStatement.execute();\n+        } catch (SQLException e) {\n+            throw Throwables.rewrapAndThrowUncheckedException(e);\n+        }\n+    }\n+\n+    @Override\n+    public byte[] readRound(long seq) {\n+        return executeStatement(String.format(\"SELECT val FROM paxosLog WHERE seq = %s;\", seq))", "originalCommit": "c14dd16d03376e57a4b48e88863d868ac0d1c38c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94397de38099b8ffc3e8ef77b69c92c808f2db0d", "chunk": "diff --git a/leader-election-impl/src/main/java/com/palantir/paxos/SqlitePaxosStateLog.java b/leader-election-impl/src/main/java/com/palantir/paxos/SqlitePaxosStateLog.java\nindex 1a771f4aa4..1f7baf8ccb 100644\n--- a/leader-election-impl/src/main/java/com/palantir/paxos/SqlitePaxosStateLog.java\n+++ b/leader-election-impl/src/main/java/com/palantir/paxos/SqlitePaxosStateLog.java\n\n@@ -60,7 +60,7 @@ public class SqlitePaxosStateLog<V extends Persistable & Versionable> implements\n \n     @Override\n     public byte[] readRound(long seq) {\n-        return executeStatement(String.format(\"SELECT val FROM paxosLog WHERE seq = %s;\", seq))\n+        return executeStatement(String.format(\"SELECT val FROM paxosLog WHERE seq = %s\", seq))\n                 .map(SqlitePaxosStateLog::getByteArrayUnchecked)\n                 .orElse(null);\n     }\n"}}, {"oid": "94397de38099b8ffc3e8ef77b69c92c808f2db0d", "url": "https://github.com/palantir/atlasdb/commit/94397de38099b8ffc3e8ef77b69c92c808f2db0d", "message": "Fix nits", "committedDate": "2020-04-21T15:00:05Z", "type": "commit"}, {"oid": "e6c35747c5fedd02b4d551a626aea0da235d889d", "url": "https://github.com/palantir/atlasdb/commit/e6c35747c5fedd02b4d551a626aea0da235d889d", "message": "Checkstyle", "committedDate": "2020-04-21T15:27:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMyOTEyOA==", "url": "https://github.com/palantir/atlasdb/pull/4724#discussion_r412329128", "bodyText": "please can we use jooq here? Direct Java sql is kind of shitty...", "author": "j-baker", "createdAt": "2020-04-21T16:58:49Z", "path": "leader-election-impl/src/main/java/com/palantir/paxos/SqlitePaxosStateLog.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.paxos;\n+\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+import com.google.common.io.ByteStreams;\n+import com.palantir.common.base.Throwables;\n+import com.palantir.common.persist.Persistable;\n+\n+public final class SqlitePaxosStateLog<V extends Persistable & Versionable> implements PaxosStateLog<V> {\n+    private final Supplier<Connection> connectionSupplier;\n+\n+    private SqlitePaxosStateLog(Supplier<Connection> connectionSupplier) {\n+        this.connectionSupplier = connectionSupplier;\n+    }\n+\n+    public static <V extends Persistable & Versionable> PaxosStateLog<V> createInitialized(Supplier<Connection> conn) {\n+        SqlitePaxosStateLog<V> log = new SqlitePaxosStateLog<>(conn);\n+        log.initialize();\n+        return log;\n+    }\n+\n+    private void initialize() {\n+        executeVoid(\"CREATE TABLE IF NOT EXISTS paxosLog (seq BIGINT, val BLOB, CONSTRAINT pk_dual PRIMARY KEY (seq))\");\n+    }\n+\n+    @Override\n+    public void writeRound(long seq, V round) {\n+        try {\n+            PreparedStatement preparedStatement = connectionSupplier.get().prepareStatement(\n+                    \"INSERT OR REPLACE INTO paxosLog (seq, val) VALUES (?, ?)\");\n+            preparedStatement.setLong(1, seq);\n+            preparedStatement.setBytes(2, round.persistToBytes());\n+            preparedStatement.execute();\n+        } catch (SQLException e) {\n+            throw Throwables.rewrapAndThrowUncheckedException(e);\n+        }\n+    }\n+\n+    @Override\n+    public byte[] readRound(long seq) {\n+        return executeStatement(String.format(\"SELECT val FROM paxosLog WHERE seq = %s\", seq))", "originalCommit": "e6c35747c5fedd02b4d551a626aea0da235d889d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMyOTQwMg==", "url": "https://github.com/palantir/atlasdb/pull/4724#discussion_r412329402", "bodyText": "or JDBI - JDBI's pretty great.", "author": "j-baker", "createdAt": "2020-04-21T16:59:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMyOTEyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM4NzExMw==", "url": "https://github.com/palantir/atlasdb/pull/4724#discussion_r412387113", "bodyText": "Explicitly, you can get something like this out of JDBI\npublic interface UserDao {\n    @SqlUpdate(\"CREATE TABLE user (id INTEGER PRIMARY KEY, name VARCHAR)\")\n    void createTable();\n\n    @SqlUpdate(\"INSERT INTO user(id, name) VALUES (?, ?)\")\n    void insertPositional(int id, String name);\n\n    @SqlUpdate(\"INSERT INTO user(id, name) VALUES (:id, :name)\")\n    void insertNamed(@Bind(\"id\") int id, @Bind(\"name\") String name);\n\n    @SqlUpdate(\"INSERT INTO user(id, name) VALUES (:id, :name)\")\n    void insertBean(@BindBean User user);\n\n    @SqlQuery(\"SELECT * FROM user ORDER BY name\")\n    @RegisterBeanMapper(User.class)\n    List<User> listUsers();\n}", "author": "j-baker", "createdAt": "2020-04-21T18:19:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMyOTEyOA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM4NzU1NQ==", "url": "https://github.com/palantir/atlasdb/pull/4724#discussion_r412387555", "bodyText": "Connection is closeable :)", "author": "j-baker", "createdAt": "2020-04-21T18:20:37Z", "path": "leader-election-impl/src/main/java/com/palantir/paxos/SqlitePaxosStateLog.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.paxos;\n+\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+import com.google.common.io.ByteStreams;\n+import com.palantir.common.base.Throwables;\n+import com.palantir.common.persist.Persistable;\n+\n+public final class SqlitePaxosStateLog<V extends Persistable & Versionable> implements PaxosStateLog<V> {\n+    private final Supplier<Connection> connectionSupplier;\n+\n+    private SqlitePaxosStateLog(Supplier<Connection> connectionSupplier) {\n+        this.connectionSupplier = connectionSupplier;\n+    }\n+\n+    public static <V extends Persistable & Versionable> PaxosStateLog<V> createInitialized(Supplier<Connection> conn) {\n+        SqlitePaxosStateLog<V> log = new SqlitePaxosStateLog<>(conn);\n+        log.initialize();\n+        return log;\n+    }\n+\n+    private void initialize() {\n+        executeVoid(\"CREATE TABLE IF NOT EXISTS paxosLog (seq BIGINT, val BLOB, CONSTRAINT pk_dual PRIMARY KEY (seq))\");\n+    }\n+\n+    @Override\n+    public void writeRound(long seq, V round) {\n+        try {\n+            PreparedStatement preparedStatement = connectionSupplier.get().prepareStatement(\n+                    \"INSERT OR REPLACE INTO paxosLog (seq, val) VALUES (?, ?)\");\n+            preparedStatement.setLong(1, seq);\n+            preparedStatement.setBytes(2, round.persistToBytes());\n+            preparedStatement.execute();\n+        } catch (SQLException e) {\n+            throw Throwables.rewrapAndThrowUncheckedException(e);\n+        }\n+    }\n+\n+    @Override\n+    public byte[] readRound(long seq) {\n+        return executeStatement(String.format(\"SELECT val FROM paxosLog WHERE seq = %s\", seq))\n+                .map(SqlitePaxosStateLog::getByteArrayUnchecked)\n+                .orElse(null);\n+    }\n+\n+    @Override\n+    public long getLeastLogEntry() {\n+        return executeStatement(\"SELECT MIN(seq) FROM paxosLog\")\n+                .map(SqlitePaxosStateLog::getLongResultUnchecked)\n+                .orElse(PaxosAcceptor.NO_LOG_ENTRY);\n+    }\n+\n+    @Override\n+    public long getGreatestLogEntry() {\n+        return executeStatement(\"SELECT MAX(seq) FROM paxosLog\")\n+                .map(SqlitePaxosStateLog::getLongResultUnchecked)\n+                .orElse(PaxosAcceptor.NO_LOG_ENTRY);\n+    }\n+\n+    @Override\n+    public void truncate(long toDeleteInclusive) {\n+        executeVoid(String.format(\"DELETE FROM paxosLog WHERE seq <= %s\", toDeleteInclusive));\n+    }\n+\n+    private void executeVoid(String statement) {\n+        try {\n+            connectionSupplier.get().prepareStatement(statement).execute();\n+        } catch (SQLException e) {\n+            throw Throwables.rewrapAndThrowUncheckedException(e);\n+        }\n+    }\n+\n+    private Optional<ResultSet> executeStatement(String statement) {", "originalCommit": "e6c35747c5fedd02b4d551a626aea0da235d889d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM4NzYyNg==", "url": "https://github.com/palantir/atlasdb/pull/4724#discussion_r412387626", "bodyText": "JDBI handles that for you :)", "author": "j-baker", "createdAt": "2020-04-21T18:20:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM4NzU1NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUxOTA4OA==", "url": "https://github.com/palantir/atlasdb/pull/4724#discussion_r412519088", "bodyText": "Do we not need an index for these queries?", "author": "jkozlowski", "createdAt": "2020-04-21T21:56:05Z", "path": "leader-election-impl/src/main/java/com/palantir/paxos/SqlitePaxosStateLog.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.paxos;\n+\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+import com.google.common.io.ByteStreams;\n+import com.palantir.common.base.Throwables;\n+import com.palantir.common.persist.Persistable;\n+\n+public final class SqlitePaxosStateLog<V extends Persistable & Versionable> implements PaxosStateLog<V> {\n+    private final Supplier<Connection> connectionSupplier;\n+\n+    private SqlitePaxosStateLog(Supplier<Connection> connectionSupplier) {\n+        this.connectionSupplier = connectionSupplier;\n+    }\n+\n+    public static <V extends Persistable & Versionable> PaxosStateLog<V> createInitialized(Supplier<Connection> conn) {\n+        SqlitePaxosStateLog<V> log = new SqlitePaxosStateLog<>(conn);\n+        log.initialize();\n+        return log;\n+    }\n+\n+    private void initialize() {\n+        executeVoid(\"CREATE TABLE IF NOT EXISTS paxosLog (seq BIGINT, val BLOB, CONSTRAINT pk_dual PRIMARY KEY (seq))\");\n+    }\n+\n+    @Override\n+    public void writeRound(long seq, V round) {\n+        try {\n+            PreparedStatement preparedStatement = connectionSupplier.get().prepareStatement(\n+                    \"INSERT OR REPLACE INTO paxosLog (seq, val) VALUES (?, ?)\");\n+            preparedStatement.setLong(1, seq);\n+            preparedStatement.setBytes(2, round.persistToBytes());\n+            preparedStatement.execute();\n+        } catch (SQLException e) {\n+            throw Throwables.rewrapAndThrowUncheckedException(e);\n+        }\n+    }\n+\n+    @Override\n+    public byte[] readRound(long seq) {\n+        return executeStatement(String.format(\"SELECT val FROM paxosLog WHERE seq = %s\", seq))\n+                .map(SqlitePaxosStateLog::getByteArrayUnchecked)\n+                .orElse(null);\n+    }\n+\n+    @Override\n+    public long getLeastLogEntry() {\n+        return executeStatement(\"SELECT MIN(seq) FROM paxosLog\")", "originalCommit": "e6c35747c5fedd02b4d551a626aea0da235d889d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUyMDE3Mg==", "url": "https://github.com/palantir/atlasdb/pull/4724#discussion_r412520172", "bodyText": "Who closes the connection?", "author": "jkozlowski", "createdAt": "2020-04-21T21:58:10Z", "path": "leader-election-impl/src/main/java/com/palantir/paxos/SqlitePaxosStateLog.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.paxos;\n+\n+import java.io.IOException;\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+import com.google.common.io.ByteStreams;\n+import com.palantir.common.base.Throwables;\n+import com.palantir.common.persist.Persistable;\n+\n+public final class SqlitePaxosStateLog<V extends Persistable & Versionable> implements PaxosStateLog<V> {\n+    private final Supplier<Connection> connectionSupplier;\n+\n+    private SqlitePaxosStateLog(Supplier<Connection> connectionSupplier) {", "originalCommit": "e6c35747c5fedd02b4d551a626aea0da235d889d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}