{"pr_number": 4878, "pr_title": "[PD$-110002] Part 9: Cassandra Client Pool II - Distribution Outlier Controllers", "pr_createdAt": "2020-06-30T22:20:52Z", "pr_url": "https://github.com/palantir/atlasdb/pull/4878", "timeline": [{"oid": "ddc206d2411efdb04a55414fe723b35530d2ecff", "url": "https://github.com/palantir/atlasdb/commit/ddc206d2411efdb04a55414fe723b35530d2ecff", "message": "DOF", "committedDate": "2020-06-30T21:38:12Z", "type": "commit"}, {"oid": "4f26db37cb623a10d86abcdc8ab1ba3abd8d73f2", "url": "https://github.com/palantir/atlasdb/commit/4f26db37cb623a10d86abcdc8ab1ba3abd8d73f2", "message": "bleh", "committedDate": "2020-06-30T22:07:11Z", "type": "commit"}, {"oid": "7989162d9a96e749da48225ec4ed4da9198debd8", "url": "https://github.com/palantir/atlasdb/commit/7989162d9a96e749da48225ec4ed4da9198debd8", "message": "tricky", "committedDate": "2020-06-30T22:07:17Z", "type": "commit"}, {"oid": "6b2b45b6f3d0ba0e08901823ec59239f1f551a73", "url": "https://github.com/palantir/atlasdb/commit/6b2b45b6f3d0ba0e08901823ec59239f1f551a73", "message": "Minor refactors", "committedDate": "2020-06-30T22:09:22Z", "type": "commit"}, {"oid": "100def31fb9969cc71a92178348f603bd8f021d4", "url": "https://github.com/palantir/atlasdb/commit/100def31fb9969cc71a92178348f603bd8f021d4", "message": "Refactor - DOF isn't really a filter", "committedDate": "2020-06-30T22:10:23Z", "type": "commit"}, {"oid": "37d9283230a446b2d3bad9eeb8993c2121777fa8", "url": "https://github.com/palantir/atlasdb/commit/37d9283230a446b2d3bad9eeb8993c2121777fa8", "message": "propagate", "committedDate": "2020-06-30T22:10:50Z", "type": "commit"}, {"oid": "555f24713e82a6fbe1204fcf245de4d48714e86c", "url": "https://github.com/palantir/atlasdb/commit/555f24713e82a6fbe1204fcf245de4d48714e86c", "message": "Add generated changelog entries", "committedDate": "2020-06-30T22:10:50Z", "type": "commit"}, {"oid": "67f396b76008de4c6796caf14b9f7710503853d1", "url": "https://github.com/palantir/atlasdb/commit/67f396b76008de4c6796caf14b9f7710503853d1", "message": "Tweak some thresholds plus add test", "committedDate": "2020-07-01T10:11:04Z", "type": "commit"}, {"oid": "c5095ba446bdea4e2c62d3dbd7c0db784e19370e", "url": "https://github.com/palantir/atlasdb/commit/c5095ba446bdea4e2c62d3dbd7c0db784e19370e", "message": "Merge branch 'jkong/more-invasive-metrics' of github.com:palantir/atlasdb into jkong/more-invasive-metrics", "committedDate": "2020-07-01T10:11:16Z", "type": "commit"}, {"oid": "6011741634b50ba37d455fb3e67329b5d3c6fb95", "url": "https://github.com/palantir/atlasdb/commit/6011741634b50ba37d455fb3e67329b5d3c6fb95", "message": "Actually add test.", "committedDate": "2020-07-01T10:11:26Z", "type": "commit"}, {"oid": "0e7ed58224e37eee3728e22b05f396e49d606f7a", "url": "https://github.com/palantir/atlasdb/commit/0e7ed58224e37eee3728e22b05f396e49d606f7a", "message": "stuff", "committedDate": "2020-07-01T19:22:25Z", "type": "commit"}, {"oid": "9eabd920ec01e60d6995e272db4eda35c356bb0e", "url": "https://github.com/palantir/atlasdb/commit/9eabd920ec01e60d6995e272db4eda35c356bb0e", "message": "Revert \"stuff\"\n\nThis reverts commit 0e7ed58224e37eee3728e22b05f396e49d606f7a.", "committedDate": "2020-07-01T19:23:31Z", "type": "commit"}, {"oid": "e87ff375c0fca17ada7071b1b72af284c4f0b13d", "url": "https://github.com/palantir/atlasdb/commit/e87ff375c0fca17ada7071b1b72af284c4f0b13d", "message": "Don't include my SQLite experiments", "committedDate": "2020-07-01T19:26:02Z", "type": "commit"}, {"oid": "fa55889b617f13ce707ca489475e04fd9b2b0e42", "url": "https://github.com/palantir/atlasdb/commit/fa55889b617f13ce707ca489475e04fd9b2b0e42", "message": "aaaargh", "committedDate": "2020-07-01T19:47:01Z", "type": "commit"}, {"oid": "654926c741569e970a05a6225a20d2910c9241f1", "url": "https://github.com/palantir/atlasdb/commit/654926c741569e970a05a6225a20d2910c9241f1", "message": "More integrationy test", "committedDate": "2020-07-01T20:01:22Z", "type": "commit"}, {"oid": "4953c677bff8e9d2bb5053fbac04b04eed9acbd8", "url": "https://github.com/palantir/atlasdb/commit/4953c677bff8e9d2bb5053fbac04b04eed9acbd8", "message": "Imports", "committedDate": "2020-07-01T20:03:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwNjcyNg==", "url": "https://github.com/palantir/atlasdb/pull/4878#discussion_r448906726", "bodyText": "wat", "author": "jeremyk-91", "createdAt": "2020-07-02T10:31:07Z", "path": "atlasdb-cassandra/src/test/java/com/palantir/atlasdb/keyvalue/cassandra/pool/CassandraClientPoolMetricsTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.cassandra.pool;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.junit.Test;\n+\n+import com.codahale.metrics.MetricRegistry;\n+import com.google.common.collect.ImmutableMap;\n+import com.palantir.atlasdb.keyvalue.cassandra.CassandraClientPoolingContainer;\n+import com.palantir.atlasdb.util.MetricsManager;\n+import com.palantir.atlasdb.util.MetricsManagers;\n+import com.palantir.refreshable.Refreshable;\n+import com.palantir.tritium.metrics.registry.DefaultTaggedMetricRegistry;\n+import com.palantir.tritium.metrics.registry.MetricName;\n+\n+public class CassandraClientPoolMetricsTest {\n+    private final MetricsManager metricsManager = MetricsManagers.of(\n+            new MetricRegistry(),\n+            new DefaultTaggedMetricRegistry(),\n+            Refreshable.only(true));\n+\n+    @Test\n+    public void metricsProducible() {\n+        CassandraClientPoolMetrics metrics = new CassandraClientPoolMetrics(metricsManager);\n+        AtomicLong poolOne = new AtomicLong(3);\n+        AtomicLong poolTwo = new AtomicLong(4);\n+        AtomicLong poolThree = new AtomicLong(20);\n+\n+        metrics.registerPoolMetric(CassandraClientPoolHostLevelMetric.MEAN_ACTIVE_TIME_MILLIS, poolOne::get, 1);\n+        metrics.registerPoolMetric(CassandraClientPoolHostLevelMetric.MEAN_ACTIVE_TIME_MILLIS, poolTwo::get, 2);\n+        metrics.registerPoolMetric(CassandraClientPoolHostLevelMetric.MEAN_ACTIVE_TIME_MILLIS, poolThree::get, 3);\n+\n+        assertThat(metricsManager.getTaggedRegistry().getMetrics())\n+                .containsKey(createMeanActiveTimeMillisMetric(\"pool1\"))\n+                .containsKey(createMeanActiveTimeMillisMetric(\"pool2\"))\n+                .containsKey(createMeanActiveTimeMillisMetric(\"pool3\"))\n+                .containsKey(createMeanActiveTimeMillisMetric(\"mean\"));\n+\n+        assertThat(metricsManager.getPublishableMetrics().getMetrics())\n+                .doesNotContainKey(createMeanActiveTimeMillisMetric(\"pool1\"))\n+                .doesNotContainKey(createMeanActiveTimeMillisMetric(\"pool2\"))\n+                .containsKey(createMeanActiveTimeMillisMetric(\"pool3\"))\n+                .containsKey(createMeanActiveTimeMillisMetric(\"mean\"));\n+    }\n+\n+    public MetricName createMeanActiveTimeMillisMetric(String pool1) {", "originalCommit": "4953c677bff8e9d2bb5053fbac04b04eed9acbd8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "821c0fb1df6c3734f961e1337b21afd0dc546e6a", "chunk": "diff --git a/atlasdb-cassandra/src/test/java/com/palantir/atlasdb/keyvalue/cassandra/pool/CassandraClientPoolMetricsTest.java b/atlasdb-cassandra/src/test/java/com/palantir/atlasdb/keyvalue/cassandra/pool/CassandraClientPoolMetricsTest.java\nindex bc9c5f45d1..26898c9a27 100644\n--- a/atlasdb-cassandra/src/test/java/com/palantir/atlasdb/keyvalue/cassandra/pool/CassandraClientPoolMetricsTest.java\n+++ b/atlasdb-cassandra/src/test/java/com/palantir/atlasdb/keyvalue/cassandra/pool/CassandraClientPoolMetricsTest.java\n\n@@ -38,7 +38,7 @@ public class CassandraClientPoolMetricsTest {\n             Refreshable.only(true));\n \n     @Test\n-    public void metricsProducible() {\n+    public void metricsAreProducedAndFiltered() {\n         CassandraClientPoolMetrics metrics = new CassandraClientPoolMetrics(metricsManager);\n         AtomicLong poolOne = new AtomicLong(3);\n         AtomicLong poolTwo = new AtomicLong(4);\n"}}, {"oid": "821c0fb1df6c3734f961e1337b21afd0dc546e6a", "url": "https://github.com/palantir/atlasdb/commit/821c0fb1df6c3734f961e1337b21afd0dc546e6a", "message": "nits", "committedDate": "2020-07-02T11:11:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE2NjE5Mw==", "url": "https://github.com/palantir/atlasdb/pull/4878#discussion_r449166193", "bodyText": "ConcurrentHashSet", "author": "jeremyk-91", "createdAt": "2020-07-02T17:24:56Z", "path": "atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/pool/DistributionOutlierController.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.cassandra.pool;\n+\n+import java.time.Duration;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import com.codahale.metrics.CachedGauge;\n+import com.codahale.metrics.Clock;\n+import com.codahale.metrics.Gauge;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.palantir.atlasdb.metrics.MetricPublicationFilter;\n+import com.palantir.logsafe.exceptions.SafeIllegalStateException;\n+\n+/**\n+ * Given a series of gauge metrics, allows for the retrieval for the mean. Furthermore allows for the generation of\n+ * {@link MetricPublicationFilter}s that identify whether any specific values exceed a tolerance value from the mean.\n+ */\n+class DistributionOutlierController {\n+    @VisibleForTesting\n+    static final Duration REFRESH_INTERVAL = Duration.ofSeconds(30);\n+\n+    private final Set<Gauge<Long>> gauges;\n+    private final double minimumMeanMultiple;\n+    private final double maximumMeanMultiple;\n+    private final Gauge<Double> meanGauge;\n+\n+    @VisibleForTesting\n+    DistributionOutlierController(\n+            Clock clock,\n+            double minimumMeanMultiple,\n+            double maximumMeanMultiple) {\n+        this.gauges = new HashSet<>();", "originalCommit": "821c0fb1df6c3734f961e1337b21afd0dc546e6a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b929dc0e71db7e588694c78e28a2fe2cf0fab659", "chunk": "diff --git a/atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/pool/DistributionOutlierController.java b/atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/pool/DistributionOutlierController.java\nindex 2b743bebf6..4494fe3d5e 100644\n--- a/atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/pool/DistributionOutlierController.java\n+++ b/atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/pool/DistributionOutlierController.java\n\n@@ -28,6 +28,7 @@ import com.codahale.metrics.CachedGauge;\n import com.codahale.metrics.Clock;\n import com.codahale.metrics.Gauge;\n import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Sets;\n import com.palantir.atlasdb.metrics.MetricPublicationFilter;\n import com.palantir.logsafe.exceptions.SafeIllegalStateException;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgzNzg3Nw==", "url": "https://github.com/palantir/atlasdb/pull/4878#discussion_r450837877", "bodyText": "\ud83d\udcaf", "author": "sudiksha27", "createdAt": "2020-07-07T12:48:52Z", "path": "atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/pool/CassandraClientPoolMetrics.java", "diffHunk": "@@ -72,6 +102,33 @@ public void recordPoolExhaustion() {\n         poolExhaustionCounter.inc();\n     }\n \n+    @SuppressWarnings(\"unchecked\") // Guaranteed to have the correct type\n+    public void registerPoolMetric(\n+            CassandraClientPoolHostLevelMetric metric,\n+            Gauge<Long> gauge,\n+            int poolNumber) {\n+        MetricPublicationFilter filter = outlierControllers.get(metric).registerAndCreateFilter(gauge);\n+        registerPoolMetricsToRegistry(metric, gauge, poolNumber, filter);\n+    }\n+\n+    private void registerPoolMetricsToRegistry(\n+            CassandraClientPoolHostLevelMetric metric,\n+            Gauge<Long> gauge,\n+            int poolNumber,\n+            MetricPublicationFilter filter) {\n+        Map<String, String> poolTag = ImmutableMap.of(\"pool\", \"pool\" + poolNumber);\n+        metricsManager.addMetricFilter(\n+                CassandraClientPoolingContainer.class,\n+                metric.metricName,\n+                poolTag,\n+                filter);\n+        metricsManager.registerOrGet(\n+                CassandraClientPoolingContainer.class,", "originalCommit": "821c0fb1df6c3734f961e1337b21afd0dc546e6a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDgzODU4NQ==", "url": "https://github.com/palantir/atlasdb/pull/4878#discussion_r450838585", "bodyText": "nice", "author": "sudiksha27", "createdAt": "2020-07-07T12:50:02Z", "path": "atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/pool/DistributionOutlierController.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.cassandra.pool;\n+\n+import java.time.Duration;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+\n+import com.codahale.metrics.CachedGauge;\n+import com.codahale.metrics.Clock;\n+import com.codahale.metrics.Gauge;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.palantir.atlasdb.metrics.MetricPublicationFilter;\n+import com.palantir.logsafe.exceptions.SafeIllegalStateException;\n+\n+/**\n+ * Given a series of gauge metrics, allows for the retrieval for the mean. Furthermore allows for the generation of\n+ * {@link MetricPublicationFilter}s that identify whether any specific values exceed a tolerance value from the mean.\n+ */\n+class DistributionOutlierController {\n+    @VisibleForTesting\n+    static final Duration REFRESH_INTERVAL = Duration.ofSeconds(30);\n+\n+    private final Set<Gauge<Long>> gauges;\n+    private final double minimumMeanMultiple;\n+    private final double maximumMeanMultiple;\n+    private final Gauge<Double> meanGauge;\n+\n+    @VisibleForTesting\n+    DistributionOutlierController(\n+            Clock clock,\n+            double minimumMeanMultiple,\n+            double maximumMeanMultiple) {\n+        this.gauges = new HashSet<>();\n+        this.minimumMeanMultiple = minimumMeanMultiple;\n+        this.maximumMeanMultiple = maximumMeanMultiple;\n+        this.meanGauge = new CachedGauge<Double>(clock, REFRESH_INTERVAL.toNanos(), TimeUnit.NANOSECONDS) {\n+            @Override\n+            protected Double loadValue() {\n+                List<Long> gaugeValues = gauges.stream()\n+                        .map(Gauge::getValue)\n+                        .filter(Objects::nonNull)\n+                        .collect(Collectors.toList());\n+                if (gaugeValues.isEmpty()) {\n+                    return null;\n+                }\n+                return gaugeValues.stream()\n+                        .mapToLong(x -> x)\n+                        .average()\n+                        .orElseThrow(() -> new SafeIllegalStateException(\"Improperly handled average of 0 values\"));\n+            }\n+        };\n+    }\n+\n+    static DistributionOutlierController create(double minimumMeanMultiple, double maximumMeanMultiple) {\n+        return new DistributionOutlierController(Clock.defaultClock(), minimumMeanMultiple, maximumMeanMultiple);\n+    }\n+\n+    Gauge<Double> getMeanGauge() {\n+        return meanGauge;\n+    }\n+\n+    MetricPublicationFilter registerAndCreateFilter(Gauge<Long> gauge) {\n+        gauges.add(gauge);\n+        return () -> shouldPublishIndividualGaugeMetric(gauge);\n+    }", "originalCommit": "821c0fb1df6c3734f961e1337b21afd0dc546e6a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b929dc0e71db7e588694c78e28a2fe2cf0fab659", "chunk": "diff --git a/atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/pool/DistributionOutlierController.java b/atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/pool/DistributionOutlierController.java\nindex 2b743bebf6..4494fe3d5e 100644\n--- a/atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/pool/DistributionOutlierController.java\n+++ b/atlasdb-cassandra/src/main/java/com/palantir/atlasdb/keyvalue/cassandra/pool/DistributionOutlierController.java\n\n@@ -28,6 +28,7 @@ import com.codahale.metrics.CachedGauge;\n import com.codahale.metrics.Clock;\n import com.codahale.metrics.Gauge;\n import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.collect.Sets;\n import com.palantir.atlasdb.metrics.MetricPublicationFilter;\n import com.palantir.logsafe.exceptions.SafeIllegalStateException;\n \n"}}, {"oid": "b929dc0e71db7e588694c78e28a2fe2cf0fab659", "url": "https://github.com/palantir/atlasdb/commit/b929dc0e71db7e588694c78e28a2fe2cf0fab659", "message": "Concurrency", "committedDate": "2020-07-07T18:04:07Z", "type": "commit"}, {"oid": "416df4b1dcd7fabb6e71fae296c886d077c4d0aa", "url": "https://github.com/palantir/atlasdb/commit/416df4b1dcd7fabb6e71fae296c886d077c4d0aa", "message": "Baseline", "committedDate": "2020-07-07T20:33:45Z", "type": "commit"}]}