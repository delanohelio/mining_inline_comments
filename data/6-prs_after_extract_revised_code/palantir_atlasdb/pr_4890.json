{"pr_number": 4890, "pr_title": "Adjudication logs", "pr_createdAt": "2020-07-08T14:45:30Z", "pr_url": "https://github.com/palantir/atlasdb/pull/4890", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEyNzM4Mw==", "url": "https://github.com/palantir/atlasdb/pull/4890#discussion_r452127383", "bodyText": "nit: The cast to Object looks unnecessary?", "author": "jeremyk-91", "createdAt": "2020-07-09T10:42:05Z", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/adjudicate/FeedbackHandler.java", "diffHunk": "@@ -77,6 +81,9 @@ private HealthStatusReport healthStateOfTimeLock(\n                 .map(serviceName -> Client.of(serviceName))\n                 .collect(Collectors.toList());\n \n+        log.info(\"List of services on which TimeLock is unhealthy - {}\",\n+                SafeArg.of(\"unhealthyClients\", (Object) unhealthyClients));", "originalCommit": "1b497cf592451c8c3e63ad644fcfef18ed0749a1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "229f2f3e36b5852862ab4284b992a4c1088353ed", "chunk": "diff --git a/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/adjudicate/FeedbackHandler.java b/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/adjudicate/FeedbackHandler.java\nindex e2f2726dec..f4ca1cb634 100644\n--- a/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/adjudicate/FeedbackHandler.java\n+++ b/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/adjudicate/FeedbackHandler.java\n\n@@ -81,9 +81,6 @@ public class FeedbackHandler {\n                 .map(serviceName -> Client.of(serviceName))\n                 .collect(Collectors.toList());\n \n-        log.info(\"List of services on which TimeLock is unhealthy - {}\",\n-                SafeArg.of(\"unhealthyClients\", (Object) unhealthyClients));\n-\n         if (unhealthyClients.size() > maxAllowedUnhealthyServices) {\n             return ImmutableHealthStatusReport\n                     .builder()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxNDA0NQ==", "url": "https://github.com/palantir/atlasdb/pull/4890#discussion_r452414045", "bodyText": "We might not want %.2f because of 0.00... values. I'd be okay with just printing all the numbers I think :)", "author": "jeremyk-91", "createdAt": "2020-07-09T18:35:23Z", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/adjudicate/FeedbackHandler.java", "diffHunk": "@@ -137,30 +144,63 @@ HealthStatus pointFeedbackHealthStatus(ConjureTimeLockClientFeedback healthRepor\n                         Constants.START_TRANSACTION_SERVICE_LEVEL_OBJECTIVES)))\n                 .filterKeys(Optional::isPresent)\n                 .mapKeys(Optional::get)\n-                .map((userStats, sloSpec) -> getHealthStatusForService(userStats,\n-                        sloSpec.minimumRequestRateForConsideration(),\n-                        sloSpec.maximumPermittedP99().toNanos(),\n-                        sloSpec.maximumPermittedErrorProportion()))\n+                .map((userStats, sloSpec) -> getHealthStatusForMetric(healthReport.getServiceName(),\n+                        userStats,\n+                        sloSpec))\n                 .values()\n+                .map(this::logHealthStatusForReport)\n                 .max(HealthStatus.getHealthStatusComparator())\n                 .orElse(HealthStatus.HEALTHY);\n     }\n \n-    private HealthStatus getHealthStatusForService(EndpointStatistics endpointStatistics,\n-            double rateThreshold,\n-            long p99Limit,\n-            double errorRateProportion) {\n+    private HealthStatus logHealthStatusForReport(\n+            PointHealthStatusReport pointHealthStatusReport) {\n+        pointHealthStatusReport.message().ifPresent(log::info);\n+        return pointHealthStatusReport.status();\n+    }\n \n-        if (endpointStatistics.getOneMin() < rateThreshold) {\n-            return HealthStatus.UNKNOWN;\n+    @VisibleForTesting\n+    PointHealthStatusReport getHealthStatusForMetric(\n+            String serviceName,\n+            EndpointStatistics endpointStatistics,\n+            ServiceLevelObjectiveSpecification sloSpec) {\n+\n+        double oneMin = endpointStatistics.getOneMin();\n+        if (oneMin < sloSpec.minimumRequestRateForConsideration()) {\n+            return PointHealthStatusReport.builder()\n+                    .status(HealthStatus.UNKNOWN)\n+                    .message(String.format(\n+                                    \"[%s] | Point health status for %s is UNKNOWN as request rate is low - %.2f\",", "originalCommit": "1b497cf592451c8c3e63ad644fcfef18ed0749a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQyMDEzOQ==", "url": "https://github.com/palantir/atlasdb/pull/4890#discussion_r452420139", "bodyText": "\ud83d\udc4d", "author": "sudiksha27", "createdAt": "2020-07-09T18:47:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxNDA0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "229f2f3e36b5852862ab4284b992a4c1088353ed", "chunk": "diff --git a/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/adjudicate/FeedbackHandler.java b/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/adjudicate/FeedbackHandler.java\nindex e2f2726dec..f4ca1cb634 100644\n--- a/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/adjudicate/FeedbackHandler.java\n+++ b/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/adjudicate/FeedbackHandler.java\n\n@@ -144,63 +141,54 @@ public class FeedbackHandler {\n                         Constants.START_TRANSACTION_SERVICE_LEVEL_OBJECTIVES)))\n                 .filterKeys(Optional::isPresent)\n                 .mapKeys(Optional::get)\n-                .map((userStats, sloSpec) -> getHealthStatusForMetric(healthReport.getServiceName(),\n-                        userStats,\n-                        sloSpec))\n+                .map((userStats, sloSpec) -> getHealthStatusForService(userStats,\n+                        sloSpec.name(),\n+                        sloSpec.minimumRequestRateForConsideration(),\n+                        sloSpec.maximumPermittedSteadyStateP99().toNanos(),\n+                        sloSpec.maximumPermittedErrorProportion(),\n+                        sloSpec.maximumPermittedQuietP99().toNanos()))\n                 .values()\n-                .map(this::logHealthStatusForReport)\n                 .max(HealthStatus.getHealthStatusComparator())\n                 .orElse(HealthStatus.HEALTHY);\n     }\n \n-    private HealthStatus logHealthStatusForReport(\n-            PointHealthStatusReport pointHealthStatusReport) {\n-        pointHealthStatusReport.message().ifPresent(log::info);\n-        return pointHealthStatusReport.status();\n-    }\n-\n-    @VisibleForTesting\n-    PointHealthStatusReport getHealthStatusForMetric(\n-            String serviceName,\n-            EndpointStatistics endpointStatistics,\n-            ServiceLevelObjectiveSpecification sloSpec) {\n+    private HealthStatus getHealthStatusForService(EndpointStatistics endpointStatistics,\n+            String metric,\n+            double rateThreshold,\n+            long p99Limit,\n+            double errorRateProportion,\n+            long quietP99Limit) {\n+\n+        // Outliers indicate badness even with low request rates. The request rate should be greater than\n+        // zero to counter lingering badness from a single slow request\n+        if (endpointStatistics.getP99() > quietP99Limit && endpointStatistics.getOneMin() > 0) {\n+            return HealthStatus.UNHEALTHY;\n+        }\n \n         double oneMin = endpointStatistics.getOneMin();\n-        if (oneMin < sloSpec.minimumRequestRateForConsideration()) {\n-            return PointHealthStatusReport.builder()\n-                    .status(HealthStatus.UNKNOWN)\n-                    .message(String.format(\n-                                    \"[%s] | Point health status for %s is UNKNOWN as request rate is low - %.2f\",\n-                                    serviceName,\n-                                    sloSpec.name(),\n-                                    oneMin))\n-                    .build();\n+        if (oneMin < rateThreshold) {\n+            log.info(\"Point health status for {} is UNKNOWN as request rate is low - {}\",\n+                    SafeArg.of(\"metricName\", metric),\n+                    SafeArg.of(\"oneMinRate\", oneMin));\n+            return HealthStatus.UNKNOWN;\n         }\n \n         double errorProportion = getErrorProportion(endpointStatistics);\n-        if (errorProportion > sloSpec.maximumPermittedErrorProportion()) {\n-            return PointHealthStatusReport.builder()\n-                    .status(HealthStatus.UNHEALTHY)\n-                    .message(String.format(\n-                                    \"[%s] | Point health status for %s is UNHEALTHY due to high error proportion - %.2f\",\n-                                    serviceName,\n-                                    sloSpec.name(),\n-                                    errorProportion))\n-                    .build();\n+        if (errorProportion > errorRateProportion) {\n+            log.info(\"Point health status for {} is UNHEALTHY due to high error proportion - {}\",\n+                    SafeArg.of(\"metricName\", metric),\n+                    SafeArg.of(\"errorProportion\", errorProportion));\n+            return HealthStatus.UNHEALTHY;\n+        }\n+\n+        if (endpointStatistics.getP99() > p99Limit) {\n+            log.info(\"Point health status for {} is UNHEALTHY due to high p99 - {}\",\n+                    SafeArg.of(\"metricName\", metric),\n+                    SafeArg.of(\"p99\", endpointStatistics.getP99()));\n+            return HealthStatus.UNHEALTHY;\n         }\n \n-        return endpointStatistics.getP99() > sloSpec.maximumPermittedP99().toNanos()\n-                ? PointHealthStatusReport.builder()\n-                .status(HealthStatus.UNHEALTHY)\n-                .message(String.format(\n-                                \"[%s] | Point health status for %s is UNHEALTHY due to high p99 - %.2fns\",\n-                                serviceName,\n-                                sloSpec.name(),\n-                                endpointStatistics.getP99()))\n-                .build()\n-                : PointHealthStatusReport.builder()\n-                .status(HealthStatus.HEALTHY)\n-                .build();\n+        return HealthStatus.HEALTHY;\n     }\n \n     private double getErrorProportion(EndpointStatistics endpointStatistics) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxNTE1OA==", "url": "https://github.com/palantir/atlasdb/pull/4890#discussion_r452415158", "bodyText": "Seems like we could just do the logging inside getHealthStatusForMetric(), unless you had something else in mind / are using these further down?", "author": "jeremyk-91", "createdAt": "2020-07-09T18:37:31Z", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/adjudicate/PointHealthStatusReport.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.adjudicate;\n+\n+import java.util.Optional;\n+\n+import org.immutables.value.Value;\n+\n+@Value.Immutable\n+public interface PointHealthStatusReport {\n+    HealthStatus status();\n+    Optional<String> message();", "originalCommit": "1b497cf592451c8c3e63ad644fcfef18ed0749a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQyMDQyOA==", "url": "https://github.com/palantir/atlasdb/pull/4890#discussion_r452420428", "bodyText": "Makes sense, will do", "author": "sudiksha27", "createdAt": "2020-07-09T18:47:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxNTE1OA=="}], "type": "inlineReview", "revised_code": {"commit": "229f2f3e36b5852862ab4284b992a4c1088353ed", "chunk": "diff --git a/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/adjudicate/PointHealthStatusReport.java b/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/adjudicate/PointHealthStatusReport.java\nindex aae5f640db..941d1a2f80 100644\n--- a/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/adjudicate/PointHealthStatusReport.java\n+++ b/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/adjudicate/PointHealthStatusReport.java\n\n@@ -28,4 +28,4 @@ public interface PointHealthStatusReport {\n     static ImmutablePointHealthStatusReport.Builder builder() {\n         return ImmutablePointHealthStatusReport.builder();\n     }\n-}\n+}\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxNTY2Ng==", "url": "https://github.com/palantir/atlasdb/pull/4890#discussion_r452415666", "bodyText": "nit: Pretty sure AssertJ has OptionalAsserts that operate directly on optionals, I'd prefer using those instead.", "author": "jeremyk-91", "createdAt": "2020-07-09T18:38:27Z", "path": "timelock-impl/src/test/java/com/palantir/atlasdb/timelock/adjudicate/PointHealthReportAnalysisTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.adjudicate;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.Test;\n+\n+import com.palantir.timelock.feedback.EndpointStatistics;\n+\n+public class PointHealthReportAnalysisTest {\n+    private static final String CLIENT_1 = \"Client1\";\n+\n+    private static final double RATE =\n+            Constants.LEADER_TIME_SERVICE_LEVEL_OBJECTIVES.minimumRequestRateForConsideration();\n+    private static final long P_99 =\n+            Constants.LEADER_TIME_SERVICE_LEVEL_OBJECTIVES.maximumPermittedP99().toNanos();\n+    private static final double ERROR_PROPORTION =\n+            Constants.LEADER_TIME_SERVICE_LEVEL_OBJECTIVES.maximumPermittedErrorProportion();\n+\n+    @Test\n+    public void reportIsHealthyWhenEverythingIsRight() {\n+        FeedbackHandler feedbackHandler = new FeedbackHandler();\n+        EndpointStatistics statistics = EndpointStatistics\n+                .builder()\n+                .p99(P_99 - 1)\n+                .oneMin(RATE + 1)\n+                .errorRate(0)\n+                .build();\n+        PointHealthStatusReport healthStatusForMetric = feedbackHandler.getHealthStatusForMetric(\n+                CLIENT_1,\n+                statistics,\n+                Constants.LEADER_TIME_SERVICE_LEVEL_OBJECTIVES);\n+        assertThat(healthStatusForMetric.status()).isEqualTo(HealthStatus.HEALTHY);\n+        assertThat(healthStatusForMetric.message().isPresent()).isFalse();", "originalCommit": "1b497cf592451c8c3e63ad644fcfef18ed0749a1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "229f2f3e36b5852862ab4284b992a4c1088353ed", "chunk": "diff --git a/timelock-impl/src/test/java/com/palantir/atlasdb/timelock/adjudicate/PointHealthReportAnalysisTest.java b/timelock-impl/src/test/java/com/palantir/atlasdb/timelock/adjudicate/PointHealthReportAnalysisTest.java\ndeleted file mode 100644\nindex fefc8cf4fc..0000000000\n--- a/timelock-impl/src/test/java/com/palantir/atlasdb/timelock/adjudicate/PointHealthReportAnalysisTest.java\n+++ /dev/null\n\n@@ -1,108 +0,0 @@\n-/*\n- * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.palantir.atlasdb.timelock.adjudicate;\n-\n-import static org.assertj.core.api.Assertions.assertThat;\n-\n-import org.junit.Test;\n-\n-import com.palantir.timelock.feedback.EndpointStatistics;\n-\n-public class PointHealthReportAnalysisTest {\n-    private static final String CLIENT_1 = \"Client1\";\n-\n-    private static final double RATE =\n-            Constants.LEADER_TIME_SERVICE_LEVEL_OBJECTIVES.minimumRequestRateForConsideration();\n-    private static final long P_99 =\n-            Constants.LEADER_TIME_SERVICE_LEVEL_OBJECTIVES.maximumPermittedP99().toNanos();\n-    private static final double ERROR_PROPORTION =\n-            Constants.LEADER_TIME_SERVICE_LEVEL_OBJECTIVES.maximumPermittedErrorProportion();\n-\n-    @Test\n-    public void reportIsHealthyWhenEverythingIsRight() {\n-        FeedbackHandler feedbackHandler = new FeedbackHandler();\n-        EndpointStatistics statistics = EndpointStatistics\n-                .builder()\n-                .p99(P_99 - 1)\n-                .oneMin(RATE + 1)\n-                .errorRate(0)\n-                .build();\n-        PointHealthStatusReport healthStatusForMetric = feedbackHandler.getHealthStatusForMetric(\n-                CLIENT_1,\n-                statistics,\n-                Constants.LEADER_TIME_SERVICE_LEVEL_OBJECTIVES);\n-        assertThat(healthStatusForMetric.status()).isEqualTo(HealthStatus.HEALTHY);\n-        assertThat(healthStatusForMetric.message().isPresent()).isFalse();\n-    }\n-\n-    @Test\n-    public void reportStatusIsUnknownIfReqRateIsBelowThreshold() {\n-        FeedbackHandler feedbackHandler = new FeedbackHandler();\n-        EndpointStatistics statistics = EndpointStatistics\n-                .builder()\n-                .p99(P_99 + 1)\n-                .oneMin(RATE - 0.01)\n-                .errorRate(ERROR_PROPORTION * RATE + 0.1)\n-                .build();\n-        PointHealthStatusReport healthStatusForMetric =\n-                feedbackHandler.getHealthStatusForMetric(CLIENT_1,\n-                        statistics,\n-                        Constants.LEADER_TIME_SERVICE_LEVEL_OBJECTIVES);\n-        assertThat(healthStatusForMetric.status()).isEqualTo(HealthStatus.UNKNOWN);\n-        assertThat(healthStatusForMetric.message().isPresent()).isTrue();\n-        assertThat(healthStatusForMetric.message().get())\n-                .isEqualTo(\"[Client1] | Point health status for leaderTime is UNKNOWN as request rate is low - 0.99\");\n-    }\n-\n-    @Test\n-    public void reportStatusIsUnhealthyIfErrProportionIsHigh() {\n-        FeedbackHandler feedbackHandler = new FeedbackHandler();\n-        EndpointStatistics statistics = EndpointStatistics\n-                .builder()\n-                .p99(P_99 + 1)\n-                .oneMin(RATE + 0.01)\n-                .errorRate(ERROR_PROPORTION * RATE + 0.1)\n-                .build();\n-        PointHealthStatusReport healthStatusForMetric =\n-                feedbackHandler.getHealthStatusForMetric(CLIENT_1,\n-                        statistics,\n-                        Constants.LEADER_TIME_SERVICE_LEVEL_OBJECTIVES);\n-        assertThat(healthStatusForMetric.status()).isEqualTo(HealthStatus.UNHEALTHY);\n-        assertThat(healthStatusForMetric.message().isPresent()).isTrue();\n-        assertThat(healthStatusForMetric.message().get())\n-                .isEqualTo(\"[Client1] | Point health status for leaderTime is UNHEALTHY due to high error proportion - 0.59\");\n-    }\n-\n-    @Test\n-    public void reportStatusIsUnhealthyIfP99IsAboveThreshold() {\n-        FeedbackHandler feedbackHandler = new FeedbackHandler();\n-        EndpointStatistics statistics = EndpointStatistics\n-                .builder()\n-                .p99(P_99 + 1)\n-                .oneMin(RATE + 0.01)\n-                .errorRate(ERROR_PROPORTION * RATE)\n-                .build();\n-        PointHealthStatusReport healthStatusForMetric =\n-                feedbackHandler.getHealthStatusForMetric(CLIENT_1,\n-                        statistics,\n-                        Constants.LEADER_TIME_SERVICE_LEVEL_OBJECTIVES);\n-        assertThat(healthStatusForMetric.status()).isEqualTo(HealthStatus.UNHEALTHY);\n-        assertThat(healthStatusForMetric.message().isPresent()).isTrue();\n-        assertThat(healthStatusForMetric.message().get())\n-                .isEqualTo(\"[Client1] | Point health status for leaderTime is UNHEALTHY due to high p99 - 200000001.00ns\");\n-    }\n-}\n"}}, {"oid": "229f2f3e36b5852862ab4284b992a4c1088353ed", "url": "https://github.com/palantir/atlasdb/commit/229f2f3e36b5852862ab4284b992a4c1088353ed", "message": "Additional logging", "committedDate": "2020-07-10T09:34:11Z", "type": "commit"}, {"oid": "727721ca0d88372e7e58b17aa59b08a79bd9cf04", "url": "https://github.com/palantir/atlasdb/commit/727721ca0d88372e7e58b17aa59b08a79bd9cf04", "message": "bug fix", "committedDate": "2020-07-10T09:34:52Z", "type": "commit"}, {"oid": "bd9191606bfd3d0658a5b759eb10c2bd9bb3280d", "url": "https://github.com/palantir/atlasdb/commit/bd9191606bfd3d0658a5b759eb10c2bd9bb3280d", "message": "Tests", "committedDate": "2020-07-10T09:35:34Z", "type": "commit"}, {"oid": "039bc54f765f4d9432ed2019ed67187072111a18", "url": "https://github.com/palantir/atlasdb/commit/039bc54f765f4d9432ed2019ed67187072111a18", "message": "Servicee name in logs", "committedDate": "2020-07-10T09:43:13Z", "type": "commit"}, {"oid": "91e84baac9c59d972bd2903a03b597100af99ebf", "url": "https://github.com/palantir/atlasdb/commit/91e84baac9c59d972bd2903a03b597100af99ebf", "message": "Log unhealthy client list", "committedDate": "2020-07-10T09:43:13Z", "type": "commit"}, {"oid": "3d80b528267b01704cd8fc5ac98a99db99ca20e1", "url": "https://github.com/palantir/atlasdb/commit/3d80b528267b01704cd8fc5ac98a99db99ca20e1", "message": "Update test", "committedDate": "2020-07-10T09:43:13Z", "type": "commit"}, {"oid": "3d80b528267b01704cd8fc5ac98a99db99ca20e1", "url": "https://github.com/palantir/atlasdb/commit/3d80b528267b01704cd8fc5ac98a99db99ca20e1", "message": "Update test", "committedDate": "2020-07-10T09:43:13Z", "type": "forcePushed"}, {"oid": "dd44287217d80f6d7db15861bce30de699d3405d", "url": "https://github.com/palantir/atlasdb/commit/dd44287217d80f6d7db15861bce30de699d3405d", "message": "Test", "committedDate": "2020-07-10T09:54:31Z", "type": "commit"}, {"oid": "7df1f12a3d5c9ef294c480cfe4f39e2efca1afe1", "url": "https://github.com/palantir/atlasdb/commit/7df1f12a3d5c9ef294c480cfe4f39e2efca1afe1", "message": "Remove redundant code", "committedDate": "2020-07-10T10:41:15Z", "type": "commit"}, {"oid": "8e182d800f96300afec8adb1bbe4471a273f5fc7", "url": "https://github.com/palantir/atlasdb/commit/8e182d800f96300afec8adb1bbe4471a273f5fc7", "message": "Bug fix", "committedDate": "2020-07-10T14:57:46Z", "type": "commit"}, {"oid": "d00f7e6bddfb2fa6852e75d8100f8041ec9ecf64", "url": "https://github.com/palantir/atlasdb/commit/d00f7e6bddfb2fa6852e75d8100f8041ec9ecf64", "message": "Fix", "committedDate": "2020-07-10T15:14:09Z", "type": "commit"}, {"oid": "491d66363f9ae336158185e5234d3a38aac64416", "url": "https://github.com/palantir/atlasdb/commit/491d66363f9ae336158185e5234d3a38aac64416", "message": "fix", "committedDate": "2020-07-13T13:26:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY1MDM1Mw==", "url": "https://github.com/palantir/atlasdb/pull/4890#discussion_r453650353", "bodyText": "I'd suggest logging the EndpointStatistics for visibility", "author": "jeremyk-91", "createdAt": "2020-07-13T13:30:27Z", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/adjudicate/FeedbackHandler.java", "diffHunk": "@@ -135,38 +147,63 @@ HealthStatus pointFeedbackHealthStatus(ConjureTimeLockClientFeedback healthRepor\n                         Constants.START_TRANSACTION_SERVICE_LEVEL_OBJECTIVES)))\n                 .filterKeys(Optional::isPresent)\n                 .mapKeys(Optional::get)\n-                .map((userStats, sloSpec) -> getHealthStatusForService(userStats,\n+                .map((userStats, sloSpec) -> getHealthStatusForMetric(healthReport.getServiceName(),\n+                        userStats,\n+                        sloSpec.name(),\n                         sloSpec.minimumRequestRateForConsideration(),\n                         sloSpec.maximumPermittedSteadyStateP99().toNanos(),\n-                        sloSpec.maximumPermittedErrorProportion(),\n-                        sloSpec.maximumPermittedQuietP99().toNanos()))\n+                        sloSpec.maximumPermittedQuietP99().toNanos(),\n+                        sloSpec.maximumPermittedErrorProportion()))\n                 .values()\n                 .max(HealthStatus.getHealthStatusComparator())\n                 .orElse(HealthStatus.HEALTHY);\n     }\n \n-    private HealthStatus getHealthStatusForService(EndpointStatistics endpointStatistics,\n-            double rateThreshold,\n-            long p99Limit,\n-            double errorRateProportion,\n-            long quietP99Limit) {\n+    @VisibleForTesting\n+    HealthStatus getHealthStatusForMetric(String serviceName,\n+                    EndpointStatistics endpointStatistics,\n+                    String metricName,\n+                    double rateThreshold,\n+                    long steadyStateP99Limit,\n+                    long quietP99Limit,\n+                    double errorRateProportion) {\n \n         // Outliers indicate badness even with low request rates. The request rate should be greater than\n         // zero to counter lingering badness from a single slow request\n         if (endpointStatistics.getP99() > quietP99Limit && endpointStatistics.getOneMin() > 0) {\n+            log.info(\"[Service - {}] | Point health status for {} is UNHEALTHY as the quiet state p99 is very high - {}\",\n+                    SafeArg.of(\"service\", serviceName),\n+                    SafeArg.of(\"metricName\", metricName),\n+                    SafeArg.of(\"quietP99Limit\", endpointStatistics.getP99()));\n             return HealthStatus.UNHEALTHY;\n         }\n \n         if (endpointStatistics.getOneMin() < rateThreshold) {\n+            log.info(\"[Service - {}] | Point health status for {} is UNKNOWN as the request rate is low - {}\",\n+                    SafeArg.of(\"service\", serviceName),\n+                    SafeArg.of(\"metricName\", metricName),\n+                    SafeArg.of(\"oneMinRate\", endpointStatistics.getOneMin()));\n             return HealthStatus.UNKNOWN;\n         }\n \n-        if (getErrorProportion(endpointStatistics) > errorRateProportion) {\n+        double errorProportion = getErrorProportion(endpointStatistics);\n+        if (errorProportion > errorRateProportion) {\n+            log.info(\"[Service - {}] | Point health status for {} is UNHEALTHY due to high error proportion - {}\",\n+                    SafeArg.of(\"service\", serviceName),\n+                    SafeArg.of(\"metricName\", metricName),\n+                    SafeArg.of(\"errorProportion\", errorProportion));\n+            return HealthStatus.UNHEALTHY;\n+        }\n+\n+        if (endpointStatistics.getP99() > steadyStateP99Limit) {\n+            log.info(\"[Service - {}] | Point health status for {} is UNHEALTHY due to high p99 - {}\",\n+                    SafeArg.of(\"service\", serviceName),\n+                    SafeArg.of(\"metricName\", metricName),\n+                    SafeArg.of(\"p99\", endpointStatistics.getP99()));", "originalCommit": "491d66363f9ae336158185e5234d3a38aac64416", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "06e63a5c330329b5b3d1d25c589b91ab21994bdf", "chunk": "diff --git a/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/adjudicate/FeedbackHandler.java b/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/adjudicate/FeedbackHandler.java\nindex 4365345afa..e1873f9b6d 100644\n--- a/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/adjudicate/FeedbackHandler.java\n+++ b/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/adjudicate/FeedbackHandler.java\n\n@@ -171,41 +168,42 @@ public class FeedbackHandler {\n         // Outliers indicate badness even with low request rates. The request rate should be greater than\n         // zero to counter lingering badness from a single slow request\n         if (endpointStatistics.getP99() > quietP99Limit && endpointStatistics.getOneMin() > 0) {\n-            log.info(\"[Service - {}] | Point health status for {} is UNHEALTHY as the quiet state p99 is very high - {}\",\n-                    SafeArg.of(\"service\", serviceName),\n-                    SafeArg.of(\"metricName\", metricName),\n-                    SafeArg.of(\"quietP99Limit\", endpointStatistics.getP99()));\n+            logHealthStatus(serviceName, endpointStatistics, metricName,\n+                    \"[Service - {}] | Point health status for {} is UNHEALTHY as the p99 is \"\n+                                    + \"higher than what we allow in quiet state - {}\");\n             return HealthStatus.UNHEALTHY;\n         }\n \n         if (endpointStatistics.getOneMin() < rateThreshold) {\n-            log.info(\"[Service - {}] | Point health status for {} is UNKNOWN as the request rate is low - {}\",\n-                    SafeArg.of(\"service\", serviceName),\n-                    SafeArg.of(\"metricName\", metricName),\n-                    SafeArg.of(\"oneMinRate\", endpointStatistics.getOneMin()));\n+            logHealthStatus(serviceName, endpointStatistics, metricName,\n+                    \"[Service - {}] | Point health status for {} is UNKNOWN as the request rate is low - {}\");\n             return HealthStatus.UNKNOWN;\n         }\n \n         double errorProportion = getErrorProportion(endpointStatistics);\n         if (errorProportion > errorRateProportion) {\n-            log.info(\"[Service - {}] | Point health status for {} is UNHEALTHY due to high error proportion - {}\",\n-                    SafeArg.of(\"service\", serviceName),\n-                    SafeArg.of(\"metricName\", metricName),\n-                    SafeArg.of(\"errorProportion\", errorProportion));\n+            logHealthStatus(serviceName, endpointStatistics, metricName,\n+                    \"[Service - {}] | Point health status for {} is UNHEALTHY due to high error proportion - {}\");\n             return HealthStatus.UNHEALTHY;\n         }\n \n         if (endpointStatistics.getP99() > steadyStateP99Limit) {\n-            log.info(\"[Service - {}] | Point health status for {} is UNHEALTHY due to high p99 - {}\",\n-                    SafeArg.of(\"service\", serviceName),\n-                    SafeArg.of(\"metricName\", metricName),\n-                    SafeArg.of(\"p99\", endpointStatistics.getP99()));\n+            logHealthStatus(serviceName, endpointStatistics, metricName,\n+                    \"[Service - {}] | Point health status for {} is UNHEALTHY due to high p99 - {}\");\n             return HealthStatus.UNHEALTHY;\n         }\n \n         return HealthStatus.HEALTHY;\n     }\n \n+    private void logHealthStatus(String serviceName, EndpointStatistics endpointStatistics, String metricName,\n+            String message) {\n+        log.info(message,\n+                SafeArg.of(\"service\", serviceName),\n+                SafeArg.of(\"metricName\", metricName),\n+                SafeArg.of(\"endpointStatistics\", endpointStatistics));\n+    }\n+\n     private double getErrorProportion(EndpointStatistics endpointStatistics) {\n         double oneMin = endpointStatistics.getOneMin();\n         return (oneMin == 0) ? 0 : endpointStatistics.getErrorRate().orElse(Double.MIN_VALUE) / oneMin;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY1MDkxOQ==", "url": "https://github.com/palantir/atlasdb/pull/4890#discussion_r453650919", "bodyText": "Maybe test for p99 > quiet p99", "author": "jeremyk-91", "createdAt": "2020-07-13T13:31:16Z", "path": "timelock-impl/src/test/java/com/palantir/atlasdb/timelock/adjudicate/PointHealthReportAnalysisTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.adjudicate;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.Test;\n+\n+import com.palantir.timelock.feedback.EndpointStatistics;\n+\n+public class PointHealthReportAnalysisTest {\n+    private static final String CLIENT_1 = \"Client1\";\n+    private static final String LEADER_TIME = \"leaderTime\";\n+\n+    private static final double RATE =\n+            Constants.LEADER_TIME_SERVICE_LEVEL_OBJECTIVES.minimumRequestRateForConsideration();\n+    private static final long P_99 =\n+            Constants.LEADER_TIME_SERVICE_LEVEL_OBJECTIVES.maximumPermittedSteadyStateP99().toNanos();\n+    private static final double ERROR_PROPORTION =\n+            Constants.LEADER_TIME_SERVICE_LEVEL_OBJECTIVES.maximumPermittedErrorProportion();\n+    private static final long QUIET_P99 =\n+            Constants.LEADER_TIME_SERVICE_LEVEL_OBJECTIVES.maximumPermittedQuietP99().toNanos();\n+\n+    @Test\n+    public void reportIsHealthyWhenEverythingIsRight() {\n+        FeedbackHandler feedbackHandler = new FeedbackHandler();\n+        EndpointStatistics statistics = EndpointStatistics\n+                .builder()\n+                .p99(P_99 - 1)\n+                .oneMin(RATE + 1)\n+                .errorRate(0)\n+                .build();\n+        HealthStatus healthStatus = getHealthStatus(feedbackHandler, statistics);\n+        assertThat(healthStatus).isEqualTo(HealthStatus.HEALTHY);\n+    }\n+\n+    @Test\n+    public void reportStatusIsUnknownIfReqRateIsBelowThreshold() {\n+        FeedbackHandler feedbackHandler = new FeedbackHandler();\n+        EndpointStatistics statistics = EndpointStatistics\n+                .builder()\n+                .p99(P_99 + 1)\n+                .oneMin(RATE - 0.01)\n+                .errorRate(ERROR_PROPORTION * RATE + 0.1)\n+                .build();\n+        HealthStatus healthStatus = getHealthStatus(feedbackHandler, statistics);\n+        assertThat(healthStatus).isEqualTo(HealthStatus.UNKNOWN);\n+    }\n+\n+    @Test\n+    public void reportStatusIsUnhealthyIfErrProportionIsHigh() {\n+        FeedbackHandler feedbackHandler = new FeedbackHandler();\n+        EndpointStatistics statistics = EndpointStatistics\n+                .builder()\n+                .p99(P_99 + 1)\n+                .oneMin(RATE + 0.01)\n+                .errorRate(ERROR_PROPORTION * RATE + 0.1)\n+                .build();\n+        HealthStatus healthStatus = getHealthStatus(feedbackHandler, statistics);\n+        assertThat(healthStatus).isEqualTo(HealthStatus.UNHEALTHY);\n+    }\n+\n+    @Test\n+    public void reportStatusIsUnhealthyIfP99IsAboveThreshold() {\n+        FeedbackHandler feedbackHandler = new FeedbackHandler();\n+        EndpointStatistics statistics = EndpointStatistics\n+                .builder()\n+                .p99(P_99 + 1)\n+                .oneMin(RATE + 0.01)\n+                .errorRate(ERROR_PROPORTION * RATE)\n+                .build();\n+        HealthStatus healthStatus = getHealthStatus(feedbackHandler, statistics);\n+        assertThat(healthStatus).isEqualTo(HealthStatus.UNHEALTHY);\n+    }\n+\n+", "originalCommit": "491d66363f9ae336158185e5234d3a38aac64416", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "06e63a5c330329b5b3d1d25c589b91ab21994bdf", "chunk": "diff --git a/timelock-impl/src/test/java/com/palantir/atlasdb/timelock/adjudicate/PointHealthReportAnalysisTest.java b/timelock-impl/src/test/java/com/palantir/atlasdb/timelock/adjudicate/PointHealthReportAnalysisTest.java\nindex 45ed835298..27eb0b9cae 100644\n--- a/timelock-impl/src/test/java/com/palantir/atlasdb/timelock/adjudicate/PointHealthReportAnalysisTest.java\n+++ b/timelock-impl/src/test/java/com/palantir/atlasdb/timelock/adjudicate/PointHealthReportAnalysisTest.java\n\n@@ -87,6 +87,19 @@ public class PointHealthReportAnalysisTest {\n         assertThat(healthStatus).isEqualTo(HealthStatus.UNHEALTHY);\n     }\n \n+    @Test\n+    public void reportStatusIsUnhealthyIfQuietP99IsAboveThreshold() {\n+        FeedbackHandler feedbackHandler = new FeedbackHandler();\n+        EndpointStatistics statistics = EndpointStatistics\n+                .builder()\n+                .p99(QUIET_P99 + 1)\n+                .oneMin(RATE - 0.01)\n+                .errorRate(0)\n+                .build();\n+        HealthStatus healthStatus = getHealthStatus(feedbackHandler, statistics);\n+        assertThat(healthStatus).isEqualTo(HealthStatus.UNHEALTHY);\n+    }\n+\n \n     public HealthStatus getHealthStatus(FeedbackHandler feedbackHandler, EndpointStatistics statistics) {\n         return feedbackHandler.getHealthStatusForMetric(\n"}}, {"oid": "06e63a5c330329b5b3d1d25c589b91ab21994bdf", "url": "https://github.com/palantir/atlasdb/commit/06e63a5c330329b5b3d1d25c589b91ab21994bdf", "message": "address comments", "committedDate": "2020-07-13T13:36:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY1NjEzMA==", "url": "https://github.com/palantir/atlasdb/pull/4890#discussion_r453656130", "bodyText": "nit: please be consistent with the param ordering to log.info", "author": "jeremyk-91", "createdAt": "2020-07-13T13:39:12Z", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/adjudicate/FeedbackHandler.java", "diffHunk": "@@ -171,41 +168,42 @@ HealthStatus getHealthStatusForMetric(String serviceName,\n         // Outliers indicate badness even with low request rates. The request rate should be greater than\n         // zero to counter lingering badness from a single slow request\n         if (endpointStatistics.getP99() > quietP99Limit && endpointStatistics.getOneMin() > 0) {\n-            log.info(\"[Service - {}] | Point health status for {} is UNHEALTHY as the quiet state p99 is very high - {}\",\n-                    SafeArg.of(\"service\", serviceName),\n-                    SafeArg.of(\"metricName\", metricName),\n-                    SafeArg.of(\"quietP99Limit\", endpointStatistics.getP99()));\n+            logHealthStatus(serviceName, endpointStatistics, metricName,\n+                    \"[Service - {}] | Point health status for {} is UNHEALTHY as the p99 is \"\n+                                    + \"higher than what we allow in quiet state - {}\");\n             return HealthStatus.UNHEALTHY;\n         }\n \n         if (endpointStatistics.getOneMin() < rateThreshold) {\n-            log.info(\"[Service - {}] | Point health status for {} is UNKNOWN as the request rate is low - {}\",\n-                    SafeArg.of(\"service\", serviceName),\n-                    SafeArg.of(\"metricName\", metricName),\n-                    SafeArg.of(\"oneMinRate\", endpointStatistics.getOneMin()));\n+            logHealthStatus(serviceName, endpointStatistics, metricName,\n+                    \"[Service - {}] | Point health status for {} is UNKNOWN as the request rate is low - {}\");\n             return HealthStatus.UNKNOWN;\n         }\n \n         double errorProportion = getErrorProportion(endpointStatistics);\n         if (errorProportion > errorRateProportion) {\n-            log.info(\"[Service - {}] | Point health status for {} is UNHEALTHY due to high error proportion - {}\",\n-                    SafeArg.of(\"service\", serviceName),\n-                    SafeArg.of(\"metricName\", metricName),\n-                    SafeArg.of(\"errorProportion\", errorProportion));\n+            logHealthStatus(serviceName, endpointStatistics, metricName,\n+                    \"[Service - {}] | Point health status for {} is UNHEALTHY due to high error proportion - {}\");\n             return HealthStatus.UNHEALTHY;\n         }\n \n         if (endpointStatistics.getP99() > steadyStateP99Limit) {\n-            log.info(\"[Service - {}] | Point health status for {} is UNHEALTHY due to high p99 - {}\",\n-                    SafeArg.of(\"service\", serviceName),\n-                    SafeArg.of(\"metricName\", metricName),\n-                    SafeArg.of(\"p99\", endpointStatistics.getP99()));\n+            logHealthStatus(serviceName, endpointStatistics, metricName,\n+                    \"[Service - {}] | Point health status for {} is UNHEALTHY due to high p99 - {}\");\n             return HealthStatus.UNHEALTHY;\n         }\n \n         return HealthStatus.HEALTHY;\n     }\n \n+    private void logHealthStatus(String serviceName, EndpointStatistics endpointStatistics, String metricName,", "originalCommit": "06e63a5c330329b5b3d1d25c589b91ab21994bdf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b0272c3acb0bf09855e62521a97b2ab5629cbd1c", "chunk": "diff --git a/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/adjudicate/FeedbackHandler.java b/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/adjudicate/FeedbackHandler.java\nindex e1873f9b6d..7ddb883911 100644\n--- a/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/adjudicate/FeedbackHandler.java\n+++ b/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/adjudicate/FeedbackHandler.java\n\n@@ -168,36 +168,45 @@ public class FeedbackHandler {\n         // Outliers indicate badness even with low request rates. The request rate should be greater than\n         // zero to counter lingering badness from a single slow request\n         if (endpointStatistics.getP99() > quietP99Limit && endpointStatistics.getOneMin() > 0) {\n-            logHealthStatus(serviceName, endpointStatistics, metricName,\n-                    \"[Service - {}] | Point health status for {} is UNHEALTHY as the p99 is \"\n-                                    + \"higher than what we allow in quiet state - {}\");\n+            logHealthInfo(\"[Service - {}] | Point health status for {} is UNHEALTHY as the p99 is \"\n+                                    + \"higher than what we allow in quiet state - {}\",\n+                    serviceName,\n+                    metricName,\n+                    endpointStatistics);\n             return HealthStatus.UNHEALTHY;\n         }\n \n         if (endpointStatistics.getOneMin() < rateThreshold) {\n-            logHealthStatus(serviceName, endpointStatistics, metricName,\n-                    \"[Service - {}] | Point health status for {} is UNKNOWN as the request rate is low - {}\");\n+            logHealthInfo(\"[Service - {}] | Point health status for {} is UNKNOWN \"\n+                    + \"as the request rate is low - {}\",\n+                    serviceName,\n+                    metricName,\n+                    endpointStatistics);\n             return HealthStatus.UNKNOWN;\n         }\n \n         double errorProportion = getErrorProportion(endpointStatistics);\n         if (errorProportion > errorRateProportion) {\n-            logHealthStatus(serviceName, endpointStatistics, metricName,\n-                    \"[Service - {}] | Point health status for {} is UNHEALTHY due to high error proportion - {}\");\n+            logHealthInfo(\"[Service - {}] | Point health status for {} is UNHEALTHY \"\n+                            + \"due to high error proportion - {}\",\n+                    serviceName,\n+                    metricName,\n+                    endpointStatistics);\n             return HealthStatus.UNHEALTHY;\n         }\n \n         if (endpointStatistics.getP99() > steadyStateP99Limit) {\n-            logHealthStatus(serviceName, endpointStatistics, metricName,\n-                    \"[Service - {}] | Point health status for {} is UNHEALTHY due to high p99 - {}\");\n+            logHealthInfo(\"[Service - {}] | Point health status for {} is UNHEALTHY due to high p99 - {}\",\n+                    serviceName,\n+                    metricName,\n+                    endpointStatistics);\n             return HealthStatus.UNHEALTHY;\n         }\n \n         return HealthStatus.HEALTHY;\n     }\n \n-    private void logHealthStatus(String serviceName, EndpointStatistics endpointStatistics, String metricName,\n-            String message) {\n+    private void logHealthInfo(String message, String serviceName, String metricName, EndpointStatistics endpointStatistics) {\n         log.info(message,\n                 SafeArg.of(\"service\", serviceName),\n                 SafeArg.of(\"metricName\", metricName),\n"}}, {"oid": "b0272c3acb0bf09855e62521a97b2ab5629cbd1c", "url": "https://github.com/palantir/atlasdb/commit/b0272c3acb0bf09855e62521a97b2ab5629cbd1c", "message": "Refactor", "committedDate": "2020-07-13T13:43:21Z", "type": "commit"}, {"oid": "13cc6b233a7bbfe08273514d304eafd068a5e499", "url": "https://github.com/palantir/atlasdb/commit/13cc6b233a7bbfe08273514d304eafd068a5e499", "message": "refactor | logger does not accept non-constant", "committedDate": "2020-07-13T15:06:22Z", "type": "commit"}]}