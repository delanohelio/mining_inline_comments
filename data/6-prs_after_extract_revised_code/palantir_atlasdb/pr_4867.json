{"pr_number": 4867, "pr_title": "[PD$-110002] Part 6: One-Shots and Legacies", "pr_createdAt": "2020-06-25T20:33:36Z", "pr_url": "https://github.com/palantir/atlasdb/pull/4867", "timeline": [{"oid": "9e6593bf312c43d65fbd9d63f3c9a7ede01041d0", "url": "https://github.com/palantir/atlasdb/commit/9e6593bf312c43d65fbd9d63f3c9a7ede01041d0", "message": "Only log background sweep batch size if <1", "committedDate": "2020-06-25T09:49:27Z", "type": "commit"}, {"oid": "2f2bf50c9c3d984f1345cf33addee082dddd6899", "url": "https://github.com/palantir/atlasdb/commit/2f2bf50c9c3d984f1345cf33addee082dddd6899", "message": "Do not instrument TimestampManagement", "committedDate": "2020-06-25T10:03:02Z", "type": "commit"}, {"oid": "e7364e8668187779d0bde9383fde22a8d22b910f", "url": "https://github.com/palantir/atlasdb/commit/e7364e8668187779d0bde9383fde22a8d22b910f", "message": "Remove transactions2 migration profiling", "committedDate": "2020-06-25T20:06:04Z", "type": "commit"}, {"oid": "2ddc3d4d93ffe1257ddba244e0937b9379aa30f0", "url": "https://github.com/palantir/atlasdb/commit/2ddc3d4d93ffe1257ddba244e0937b9379aa30f0", "message": "timelockSuccessful and timelockFailedRequest", "committedDate": "2020-06-25T20:12:29Z", "type": "commit"}, {"oid": "3f2a51db7b1787adf3ea93a678fe59e128288510", "url": "https://github.com/palantir/atlasdb/commit/3f2a51db7b1787adf3ea93a678fe59e128288510", "message": "fix", "committedDate": "2020-06-25T20:33:02Z", "type": "commit"}, {"oid": "e7240ef47af7d1d4b769fd1939af1579856f5068", "url": "https://github.com/palantir/atlasdb/commit/e7240ef47af7d1d4b769fd1939af1579856f5068", "message": "Add generated changelog entries", "committedDate": "2020-06-25T20:33:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE0OTE2Nw==", "url": "https://github.com/palantir/atlasdb/pull/4867#discussion_r446149167", "bodyText": "Maybe we can extract out the always blocking filter; would be more readable.", "author": "sudiksha27", "createdAt": "2020-06-26T12:20:17Z", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/InstrumentedTimelockService.java", "diffHunk": "@@ -31,16 +33,35 @@\n import com.palantir.lock.v2.WaitForLocksRequest;\n import com.palantir.lock.v2.WaitForLocksResponse;\n import com.palantir.timestamp.TimestampRange;\n+import com.palantir.tritium.metrics.registry.MetricName;\n+import com.palantir.tritium.metrics.registry.TaggedMetricRegistry;\n \n public class InstrumentedTimelockService implements TimelockService {\n     private final TimelockService timelockService;\n     private final Meter success;\n     private final Meter fail;\n \n-    public InstrumentedTimelockService(TimelockService timelockService, MetricRegistry metricRegistry) {\n+    private InstrumentedTimelockService(TimelockService timelockService, MetricsManager metricsManager) {\n         this.timelockService = timelockService;\n-        this.success = metricRegistry.meter(AtlasDbMetricNames.TIMELOCK_SUCCESSFUL_REQUEST);\n-        this.fail = metricRegistry.meter(AtlasDbMetricNames.TIMELOCK_FAILED_REQUEST);\n+        this.success = metricsManager.registerOrGetTaggedMeter(\n+                InstrumentedTimelockService.class,\n+                AtlasDbMetricNames.TIMELOCK_SUCCESSFUL_REQUEST,\n+                ImmutableMap.of());\n+        this.fail = metricsManager.registerOrGetTaggedMeter(\n+                InstrumentedTimelockService.class,\n+                AtlasDbMetricNames.TIMELOCK_FAILED_REQUEST,\n+                ImmutableMap.of());\n+    }\n+\n+    public static TimelockService create(TimelockService timelockService, MetricsManager metricsManager) {\n+        // The instrumentation here is used primarily for the health check, not for external viewing.\n+        metricsManager.addMetricFilter(\n+                MetricName.builder().safeName(AtlasDbMetricNames.TIMELOCK_SUCCESSFUL_REQUEST).build(),\n+                () -> false);\n+        metricsManager.addMetricFilter(\n+                MetricName.builder().safeName(AtlasDbMetricNames.TIMELOCK_FAILED_REQUEST).build(),\n+                () -> false);", "originalCommit": "2ddc3d4d93ffe1257ddba244e0937b9379aa30f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI2Njc4Mg==", "url": "https://github.com/palantir/atlasdb/pull/4867#discussion_r446266782", "bodyText": "Will do", "author": "jeremyk-91", "createdAt": "2020-06-26T15:51:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE0OTE2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "ebef957f3dfee0dabcb454b6acdc23ef8295fddf", "chunk": "diff --git a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/InstrumentedTimelockService.java b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/InstrumentedTimelockService.java\nindex 21838aca53..cc2f7b6fa5 100644\n--- a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/InstrumentedTimelockService.java\n+++ b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/InstrumentedTimelockService.java\n\n@@ -34,33 +32,29 @@ import com.palantir.lock.v2.WaitForLocksRequest;\n import com.palantir.lock.v2.WaitForLocksResponse;\n import com.palantir.timestamp.TimestampRange;\n import com.palantir.tritium.metrics.registry.MetricName;\n-import com.palantir.tritium.metrics.registry.TaggedMetricRegistry;\n \n public class InstrumentedTimelockService implements TimelockService {\n+    private static final MetricName SUCCESSFUL_REQUEST_METRIC_NAME = MetricName.builder()\n+            .safeName(AtlasDbMetricNames.TIMELOCK_SUCCESSFUL_REQUEST)\n+            .build();\n+    private static final MetricName FAILED_REQUEST_METRIC_NAME = MetricName.builder()\n+            .safeName(AtlasDbMetricNames.TIMELOCK_FAILED_REQUEST)\n+            .build();\n+\n     private final TimelockService timelockService;\n     private final Meter success;\n     private final Meter fail;\n \n     private InstrumentedTimelockService(TimelockService timelockService, MetricsManager metricsManager) {\n         this.timelockService = timelockService;\n-        this.success = metricsManager.registerOrGetTaggedMeter(\n-                InstrumentedTimelockService.class,\n-                AtlasDbMetricNames.TIMELOCK_SUCCESSFUL_REQUEST,\n-                ImmutableMap.of());\n-        this.fail = metricsManager.registerOrGetTaggedMeter(\n-                InstrumentedTimelockService.class,\n-                AtlasDbMetricNames.TIMELOCK_FAILED_REQUEST,\n-                ImmutableMap.of());\n+        this.success = metricsManager.getTaggedRegistry().meter(SUCCESSFUL_REQUEST_METRIC_NAME);\n+        this.fail = metricsManager.getTaggedRegistry().meter(FAILED_REQUEST_METRIC_NAME);\n     }\n \n     public static TimelockService create(TimelockService timelockService, MetricsManager metricsManager) {\n         // The instrumentation here is used primarily for the health check, not for external viewing.\n-        metricsManager.addMetricFilter(\n-                MetricName.builder().safeName(AtlasDbMetricNames.TIMELOCK_SUCCESSFUL_REQUEST).build(),\n-                () -> false);\n-        metricsManager.addMetricFilter(\n-                MetricName.builder().safeName(AtlasDbMetricNames.TIMELOCK_FAILED_REQUEST).build(),\n-                () -> false);\n+        metricsManager.doNotPublish(SUCCESSFUL_REQUEST_METRIC_NAME);\n+        metricsManager.doNotPublish(FAILED_REQUEST_METRIC_NAME);\n         return new InstrumentedTimelockService(timelockService, metricsManager);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE1MjgyMA==", "url": "https://github.com/palantir/atlasdb/pull/4867#discussion_r446152820", "bodyText": "I am confused b/w the description and implementation of filter here.", "author": "sudiksha27", "createdAt": "2020-06-26T12:27:56Z", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/sweep/AdjustableSweepBatchConfigSource.java", "diffHunk": "@@ -42,8 +46,13 @@ public static AdjustableSweepBatchConfigSource create(\n             Supplier<SweepBatchConfig> rawSweepBatchConfig) {\n         AdjustableSweepBatchConfigSource configSource = new AdjustableSweepBatchConfigSource(rawSweepBatchConfig);\n \n+        Gauge<Double> gauge = AdjustableSweepBatchConfigSource::getBatchSizeMultiplier;\n+        metricsManager.addMetricFilter(AdjustableSweepBatchConfigSource.class,\n+                \"batchSizeMultiplier\",\n+                ImmutableMap.of(),\n+                () -> gauge.getValue() != 1.0);", "originalCommit": "9e6593bf312c43d65fbd9d63f3c9a7ede01041d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ebef957f3dfee0dabcb454b6acdc23ef8295fddf", "chunk": "diff --git a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/sweep/AdjustableSweepBatchConfigSource.java b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/sweep/AdjustableSweepBatchConfigSource.java\nindex a8b8844900..1ef93821a5 100644\n--- a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/sweep/AdjustableSweepBatchConfigSource.java\n+++ b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/sweep/AdjustableSweepBatchConfigSource.java\n\n@@ -47,10 +45,12 @@ public final class AdjustableSweepBatchConfigSource {\n         AdjustableSweepBatchConfigSource configSource = new AdjustableSweepBatchConfigSource(rawSweepBatchConfig);\n \n         Gauge<Double> gauge = AdjustableSweepBatchConfigSource::getBatchSizeMultiplier;\n+\n+        // We are generally only interested in the batch size if an error occurred, i.e. it was less than 1.\n         metricsManager.addMetricFilter(AdjustableSweepBatchConfigSource.class,\n                 \"batchSizeMultiplier\",\n                 ImmutableMap.of(),\n-                () -> gauge.getValue() != 1.0);\n+                () -> gauge.getValue() < 1.0);\n         metricsManager.registerMetric(AdjustableSweepBatchConfigSource.class, \"batchSizeMultiplier\",\n                 gauge);\n \n"}}, {"oid": "ebef957f3dfee0dabcb454b6acdc23ef8295fddf", "url": "https://github.com/palantir/atlasdb/commit/ebef957f3dfee0dabcb454b6acdc23ef8295fddf", "message": "CR and checkstyle", "committedDate": "2020-06-26T15:57:15Z", "type": "commit"}, {"oid": "c834ee186fda9ca9eb27b3e49e8f973a826a9102", "url": "https://github.com/palantir/atlasdb/commit/c834ee186fda9ca9eb27b3e49e8f973a826a9102", "message": "checkstyle", "committedDate": "2020-06-29T16:48:33Z", "type": "commit"}]}