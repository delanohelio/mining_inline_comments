{"pr_number": 5028, "pr_title": "[DB TimeLock] 3C.2 - Timestamp Storage and Series Extraction Preliminary Wiring", "pr_createdAt": "2020-10-13T20:26:37Z", "pr_url": "https://github.com/palantir/atlasdb/pull/5028", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU2MTM2Nw==", "url": "https://github.com/palantir/atlasdb/pull/5028#discussion_r504561367", "bodyText": "I was on the fence on suggesting this earlier \ud83e\udd73", "author": "gmaretic", "createdAt": "2020-10-14T10:12:13Z", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/management/PersistentNamespaceContext.java", "diffHunk": "@@ -17,31 +17,19 @@\n package com.palantir.atlasdb.timelock.management;\n \n import java.nio.file.Path;\n-import java.sql.Connection;\n-import java.util.Optional;\n \n import javax.sql.DataSource;\n \n-import org.immutables.value.Value;\n+import org.derive4j.Data;\n \n-import com.palantir.atlasdb.spi.KeyValueServiceConfig;\n+import com.palantir.atlasdb.keyvalue.api.TimestampSeriesProvider;\n \n-@Value.Immutable\n+@Data", "originalCommit": "3fd93c6ff44bcc4812b1889d4e65781202420229", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU2MzYzNQ==", "url": "https://github.com/palantir/atlasdb/pull/5028#discussion_r504563635", "bodyText": "oops", "author": "gmaretic", "createdAt": "2020-10-14T10:16:12Z", "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockAgent.java", "diffHunk": "@@ -193,22 +196,42 @@ private TimeLockAgent(MetricsManager metricsManager,\n         this.corruptionComponents = paxosResources.timeLockCorruptionComponents();\n     }\n \n-    private TimestampCreator getTimestampCreator() {\n+    private TimestampStorage getTimestampStorage() {\n         TsBoundPersisterConfiguration timestampBoundPersistence = install.timestampBoundPersistence();\n         if (timestampBoundPersistence instanceof PaxosTsBoundPersisterConfiguration) {\n-            return new PaxosTimestampCreator(paxosResources.timestampServiceFactory());\n+            return createPaxosBasedTimestampStorage();\n         } else if (timestampBoundPersistence instanceof DatabaseTsBoundPersisterConfiguration) {\n-            DatabaseTsBoundPersisterConfiguration persisterConfiguration\n-                    = (DatabaseTsBoundPersisterConfiguration) timestampBoundPersistence;\n-            return DbBoundTimestampCreator.create(\n-                    persisterConfiguration.keyValueServiceConfig(),\n-                    metricsManager,\n-                    createLeaderConfig());\n+            return createDatabaseTimestampStorage(\n+                    (DatabaseTsBoundPersisterConfiguration) timestampBoundPersistence);\n         }\n         throw new RuntimeException(String.format(\"Unknown TsBoundPersisterConfiguration found %s\",\n                 timestampBoundPersistence.getClass()));\n     }\n \n+    private TimestampStorage createPaxosBasedTimestampStorage() {\n+        return ImmutableTimestampStorage.builder()\n+                .timestampCreator(new PaxosTimestampCreator(paxosResources.timestampServiceFactory()))\n+                .persistentNamespaceContext(\n+                        PersistentNamespaceContexts.timestampBoundPaxos(\n+                                install.paxos().dataDirectory().toPath(),\n+                                sqliteDataSource))\n+                .build();\n+    }\n+\n+    private TimestampStorage createDatabaseTimestampStorage(\n+            DatabaseTsBoundPersisterConfiguration timestampBoundPersistence) {\n+        DatabaseTsBoundPersisterConfiguration persisterConfiguration", "originalCommit": "3fd93c6ff44bcc4812b1889d4e65781202420229", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk0MTc3Ng==", "url": "https://github.com/palantir/atlasdb/pull/5028#discussion_r504941776", "bodyText": "fixed!", "author": "jeremyk-91", "createdAt": "2020-10-14T20:07:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU2MzYzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "574ed7d2e2d2b92014985d3ad4c9fa0f0a7a41da", "chunk": "diff --git a/timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockAgent.java b/timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockAgent.java\nindex ed0c6b23e6..ffdd0c7139 100644\n--- a/timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockAgent.java\n+++ b/timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockAgent.java\n\n@@ -220,11 +220,9 @@ public class TimeLockAgent {\n \n     private TimestampStorage createDatabaseTimestampStorage(\n             DatabaseTsBoundPersisterConfiguration timestampBoundPersistence) {\n-        DatabaseTsBoundPersisterConfiguration persisterConfiguration\n-                = timestampBoundPersistence;\n         ServiceDiscoveringDatabaseTimeLockSupplier dbTimeLockSupplier =\n                 new ServiceDiscoveringDatabaseTimeLockSupplier(\n-                        metricsManager, persisterConfiguration.keyValueServiceConfig(), createLeaderConfig());\n+                        metricsManager, timestampBoundPersistence.keyValueServiceConfig(), createLeaderConfig());\n         return ImmutableTimestampStorage.builder()\n                 .timestampCreator(new DbBoundTimestampCreator(dbTimeLockSupplier))\n                 .persistentNamespaceContext(PersistentNamespaceContexts.dbBound(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU2NDc2Ng==", "url": "https://github.com/palantir/atlasdb/pull/5028#discussion_r504564766", "bodyText": "much better :)", "author": "gmaretic", "createdAt": "2020-10-14T10:18:17Z", "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockAgent.java", "diffHunk": "@@ -193,22 +196,42 @@ private TimeLockAgent(MetricsManager metricsManager,\n         this.corruptionComponents = paxosResources.timeLockCorruptionComponents();\n     }\n \n-    private TimestampCreator getTimestampCreator() {\n+    private TimestampStorage getTimestampStorage() {\n         TsBoundPersisterConfiguration timestampBoundPersistence = install.timestampBoundPersistence();\n         if (timestampBoundPersistence instanceof PaxosTsBoundPersisterConfiguration) {\n-            return new PaxosTimestampCreator(paxosResources.timestampServiceFactory());\n+            return createPaxosBasedTimestampStorage();\n         } else if (timestampBoundPersistence instanceof DatabaseTsBoundPersisterConfiguration) {\n-            DatabaseTsBoundPersisterConfiguration persisterConfiguration\n-                    = (DatabaseTsBoundPersisterConfiguration) timestampBoundPersistence;\n-            return DbBoundTimestampCreator.create(\n-                    persisterConfiguration.keyValueServiceConfig(),\n-                    metricsManager,\n-                    createLeaderConfig());\n+            return createDatabaseTimestampStorage(\n+                    (DatabaseTsBoundPersisterConfiguration) timestampBoundPersistence);\n         }\n         throw new RuntimeException(String.format(\"Unknown TsBoundPersisterConfiguration found %s\",\n                 timestampBoundPersistence.getClass()));\n     }\n \n+    private TimestampStorage createPaxosBasedTimestampStorage() {\n+        return ImmutableTimestampStorage.builder()\n+                .timestampCreator(new PaxosTimestampCreator(paxosResources.timestampServiceFactory()))\n+                .persistentNamespaceContext(\n+                        PersistentNamespaceContexts.timestampBoundPaxos(", "originalCommit": "3fd93c6ff44bcc4812b1889d4e65781202420229", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "574ed7d2e2d2b92014985d3ad4c9fa0f0a7a41da", "chunk": "diff --git a/timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockAgent.java b/timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockAgent.java\nindex ed0c6b23e6..ffdd0c7139 100644\n--- a/timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockAgent.java\n+++ b/timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockAgent.java\n\n@@ -220,11 +220,9 @@ public class TimeLockAgent {\n \n     private TimestampStorage createDatabaseTimestampStorage(\n             DatabaseTsBoundPersisterConfiguration timestampBoundPersistence) {\n-        DatabaseTsBoundPersisterConfiguration persisterConfiguration\n-                = timestampBoundPersistence;\n         ServiceDiscoveringDatabaseTimeLockSupplier dbTimeLockSupplier =\n                 new ServiceDiscoveringDatabaseTimeLockSupplier(\n-                        metricsManager, persisterConfiguration.keyValueServiceConfig(), createLeaderConfig());\n+                        metricsManager, timestampBoundPersistence.keyValueServiceConfig(), createLeaderConfig());\n         return ImmutableTimestampStorage.builder()\n                 .timestampCreator(new DbBoundTimestampCreator(dbTimeLockSupplier))\n                 .persistentNamespaceContext(PersistentNamespaceContexts.dbBound(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU2ODkwNA==", "url": "https://github.com/palantir/atlasdb/pull/5028#discussion_r504568904", "bodyText": "\ud83c\udf89", "author": "gmaretic", "createdAt": "2020-10-14T10:25:53Z", "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockAgent.java", "diffHunk": "@@ -283,23 +306,17 @@ private void registerManagementResource() {\n         Path rootDataDirectory = install.paxos().dataDirectory().toPath();\n         if (undertowRegistrar.isPresent()) {\n             registerCorruptionHandlerWrappedService(undertowRegistrar.get(), TimeLockManagementResource.undertow(\n-                    PersistentNamespaceContext.of(\n-                            rootDataDirectory, sqliteDataSource, isUsingDatabasePersistence()),\n+                    timestampStorage.persistentNamespaceContext(),\n                     namespaces,\n                     redirectRetryTargeter()));\n         } else {\n             registrar.accept(TimeLockManagementResource.jersey(\n-                    PersistentNamespaceContext.of(\n-                            rootDataDirectory, sqliteDataSource, isUsingDatabasePersistence()),\n+                    timestampStorage.persistentNamespaceContext(),\n                     namespaces,\n                     redirectRetryTargeter()));\n         }\n     }\n \n-    private boolean isUsingDatabasePersistence() {", "originalCommit": "3fd93c6ff44bcc4812b1889d4e65781202420229", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU2OTMwMw==", "url": "https://github.com/palantir/atlasdb/pull/5028#discussion_r504569303", "bodyText": "nit: make TimestampStorage closeable?", "author": "gmaretic", "createdAt": "2020-10-14T10:26:38Z", "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockAgent.java", "diffHunk": "@@ -403,6 +420,6 @@ public LeaderElectionHealthReport timeLockLeadershipHealthCheck() {\n     public void shutdown() {\n         paxosResources.leadershipComponents().shutdown();\n         sqliteDataSource.close();\n-        timestampCreator.close();\n+        timestampStorage.timestampCreator().close();", "originalCommit": "3fd93c6ff44bcc4812b1889d4e65781202420229", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk0MTk0Mw==", "url": "https://github.com/palantir/atlasdb/pull/5028#discussion_r504941943", "bodyText": "Sure, yeah let's just have it in there", "author": "jeremyk-91", "createdAt": "2020-10-14T20:07:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU2OTMwMw=="}], "type": "inlineReview", "revised_code": {"commit": "574ed7d2e2d2b92014985d3ad4c9fa0f0a7a41da", "chunk": "diff --git a/timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockAgent.java b/timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockAgent.java\nindex ed0c6b23e6..ffdd0c7139 100644\n--- a/timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockAgent.java\n+++ b/timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockAgent.java\n\n@@ -420,6 +418,6 @@ public class TimeLockAgent {\n     public void shutdown() {\n         paxosResources.leadershipComponents().shutdown();\n         sqliteDataSource.close();\n-        timestampStorage.timestampCreator().close();\n+        timestampStorage.close();\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU3MTc4OA==", "url": "https://github.com/palantir/atlasdb/pull/5028#discussion_r504571788", "bodyText": "Did we not extend AtlasDbFactory because then we run into having two factories of same type? Not a complaint, just asking for a friend :P", "author": "gmaretic", "createdAt": "2020-10-14T10:31:14Z", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/timestamp/DbTimeLockFactory.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timestamp;\n+\n+import java.util.Optional;\n+\n+import com.palantir.atlasdb.config.DbTimestampCreationSetting;\n+import com.palantir.atlasdb.config.LeaderConfig;\n+import com.palantir.atlasdb.keyvalue.api.KeyValueService;\n+import com.palantir.atlasdb.keyvalue.api.TimestampSeriesProvider;\n+import com.palantir.atlasdb.spi.KeyValueServiceConfig;\n+import com.palantir.atlasdb.util.MetricsManager;\n+import com.palantir.timestamp.ManagedTimestampService;\n+\n+/**\n+ * See {@link com.palantir.atlasdb.spi.AtlasDbFactory}. A {@link DbTimeLockFactory} is an extension of an\n+ * AtlasDbFactory that is expected to make suitable decisions around certain parameters to create a raw key-value\n+ * service, and it also supports extracting the timestamp series known about by the underlying database.\n+ */\n+public interface DbTimeLockFactory {", "originalCommit": "3fd93c6ff44bcc4812b1889d4e65781202420229", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDk0MzQ1Ng==", "url": "https://github.com/palantir/atlasdb/pull/5028#discussion_r504943456", "bodyText": "I didn't even think of that, actually - I went with the standard \"prefer composition over inheritance\" design principle here. You're right that that would have been a problem with the inheritance model...\nSome of it, though, is also to restrict the visibility to users. I don't want people to try getting the timestamp invalidator, or calling createRawKvs with some of the other config options set.", "author": "jeremyk-91", "createdAt": "2020-10-14T20:10:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU3MTc4OA=="}], "type": "inlineReview", "revised_code": {"commit": "6c5b0d048fb9b43d02acae16e95814222ccd436c", "chunk": "diff --git a/atlasdb-api/src/main/java/com/palantir/atlasdb/timestamp/DbTimeLockFactory.java b/atlasdb-api/src/main/java/com/palantir/atlasdb/timestamp/DbTimeLockFactory.java\nindex 7dcefae69b..bb5b335464 100644\n--- a/atlasdb-api/src/main/java/com/palantir/atlasdb/timestamp/DbTimeLockFactory.java\n+++ b/atlasdb-api/src/main/java/com/palantir/atlasdb/timestamp/DbTimeLockFactory.java\n\n@@ -26,11 +26,6 @@ import com.palantir.atlasdb.spi.KeyValueServiceConfig;\n import com.palantir.atlasdb.util.MetricsManager;\n import com.palantir.timestamp.ManagedTimestampService;\n \n-/**\n- * See {@link com.palantir.atlasdb.spi.AtlasDbFactory}. A {@link DbTimeLockFactory} is an extension of an\n- * AtlasDbFactory that is expected to make suitable decisions around certain parameters to create a raw key-value\n- * service, and it also supports extracting the timestamp series known about by the underlying database.\n- */\n public interface DbTimeLockFactory {\n     String getType();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU3MjkxNw==", "url": "https://github.com/palantir/atlasdb/pull/5028#discussion_r504572917", "bodyText": "Nice!", "author": "gmaretic", "createdAt": "2020-10-14T10:33:10Z", "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/RelationalDbTimeLockFactory.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.dbkvs;\n+\n+import java.util.Optional;\n+\n+import com.google.auto.service.AutoService;\n+import com.palantir.atlasdb.AtlasDbConstants;\n+import com.palantir.atlasdb.config.DbTimestampCreationSetting;\n+import com.palantir.atlasdb.config.LeaderConfig;\n+import com.palantir.atlasdb.keyvalue.api.KeyValueService;\n+import com.palantir.atlasdb.keyvalue.api.TimestampSeriesProvider;\n+import com.palantir.atlasdb.spi.AtlasDbFactory;\n+import com.palantir.atlasdb.spi.KeyValueServiceConfig;\n+import com.palantir.atlasdb.timestamp.DbTimeLockFactory;\n+import com.palantir.atlasdb.util.MetricsManager;\n+import com.palantir.timestamp.ManagedTimestampService;\n+\n+@AutoService(DbTimeLockFactory.class)\n+public class RelationalDbTimeLockFactory implements DbTimeLockFactory {", "originalCommit": "3fd93c6ff44bcc4812b1889d4e65781202420229", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU3Mzc4Ng==", "url": "https://github.com/palantir/atlasdb/pull/5028#discussion_r504573786", "bodyText": "\ud83c\udf89", "author": "gmaretic", "createdAt": "2020-10-14T10:34:46Z", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/management/TimeLockManagementResource.java", "diffHunk": "@@ -100,13 +101,18 @@ public static TimeLockManagementService jersey(\n \n     private static Set<PersistentNamespaceLoader> createNamespaceLoaders(\n             PersistentNamespaceContext persistentNamespaceContext) {\n-        if (persistentNamespaceContext.isUsingDatabasePersistence()) {\n-            return ImmutableSet.of(new DatabaseNamespaceLoader());\n-        }\n-        PersistentNamespaceLoader diskLoader = new DiskNamespaceLoader(persistentNamespaceContext.fileDataDirectory());\n-        PersistentNamespaceLoader sqliteLoader = SqliteNamespaceLoader.create(\n-                persistentNamespaceContext.sqliteDataSource());\n-        return ImmutableSet.of(diskLoader, sqliteLoader);\n+        return PersistentNamespaceContexts.caseOf(persistentNamespaceContext)\n+                .timestampBoundPaxos((fileDataDirectory, sqliteDataSource) -> {\n+                    PersistentNamespaceLoader diskLoader = new DiskNamespaceLoader(fileDataDirectory);\n+                    PersistentNamespaceLoader sqliteLoader = SqliteNamespaceLoader.create(sqliteDataSource);\n+                    return ImmutableSet.of(diskLoader, sqliteLoader);\n+                })\n+                .dbBound(seriesProvider -> ImmutableSet.of(", "originalCommit": "3fd93c6ff44bcc4812b1889d4e65781202420229", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "6c5b0d048fb9b43d02acae16e95814222ccd436c", "url": "https://github.com/palantir/atlasdb/commit/6c5b0d048fb9b43d02acae16e95814222ccd436c", "message": "3C.2 - TimestampStorage and Series Extraction Preliminary Wiring", "committedDate": "2020-10-14T19:58:57Z", "type": "commit"}, {"oid": "49d28429bd603a97fdb76031abf02fbb99567d49", "url": "https://github.com/palantir/atlasdb/commit/49d28429bd603a97fdb76031abf02fbb99567d49", "message": "baseline", "committedDate": "2020-10-14T19:59:05Z", "type": "commit"}, {"oid": "49d28429bd603a97fdb76031abf02fbb99567d49", "url": "https://github.com/palantir/atlasdb/commit/49d28429bd603a97fdb76031abf02fbb99567d49", "message": "baseline", "committedDate": "2020-10-14T19:59:05Z", "type": "forcePushed"}, {"oid": "574ed7d2e2d2b92014985d3ad4c9fa0f0a7a41da", "url": "https://github.com/palantir/atlasdb/commit/574ed7d2e2d2b92014985d3ad4c9fa0f0a7a41da", "message": "Fix small errors", "committedDate": "2020-10-14T20:11:31Z", "type": "commit"}, {"oid": "597a482fe2523727245dcb282eeafd295f52b572", "url": "https://github.com/palantir/atlasdb/commit/597a482fe2523727245dcb282eeafd295f52b572", "message": "closeable", "committedDate": "2020-10-14T20:26:49Z", "type": "commit"}]}