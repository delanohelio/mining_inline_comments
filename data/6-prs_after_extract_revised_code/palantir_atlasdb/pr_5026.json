{"pr_number": 5026, "pr_title": "Double check that the SQLite migration is consistent with current state", "pr_createdAt": "2020-10-13T16:22:15Z", "pr_url": "https://github.com/palantir/atlasdb/pull/5026", "timeline": [{"oid": "f362ba1faed997a9868624e03ad8dd4d45e79c81", "url": "https://github.com/palantir/atlasdb/commit/f362ba1faed997a9868624e03ad8dd4d45e79c81", "message": "Double check that the SQLite migration is consistent with current state", "committedDate": "2020-10-13T15:46:05Z", "type": "commit"}, {"oid": "be21fdf9644789f564a108be1e1841a539b5149c", "url": "https://github.com/palantir/atlasdb/commit/be21fdf9644789f564a108be1e1841a539b5149c", "message": "Remove unused variable", "committedDate": "2020-10-13T16:07:05Z", "type": "commit"}, {"oid": "3f6370c8946918a422e2291db28e6f6f6aa888b4", "url": "https://github.com/palantir/atlasdb/commit/3f6370c8946918a422e2291db28e6f6f6aa888b4", "message": "Fix naughty integration test", "committedDate": "2020-10-13T16:38:05Z", "type": "commit"}, {"oid": "33199045e2350764efccfcbdf2b18a1d0e273044", "url": "https://github.com/palantir/atlasdb/commit/33199045e2350764efccfcbdf2b18a1d0e273044", "message": "Add generated changelog entries", "committedDate": "2020-10-13T16:38:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1OTAyNg==", "url": "https://github.com/palantir/atlasdb/pull/5026#discussion_r504559026", "bodyText": "Can we figure out a way to introduce a special method for this instead of relying on #equals? There's no harm in that, and relying on equals feels wrong, especially since you're ignoring some fields + if you have equals that forces you to have hashCode, which again we don't need.", "author": "jkozlowski", "createdAt": "2020-10-14T10:08:18Z", "path": "leader-election-impl/src/main/java/com/palantir/paxos/PaxosAcceptorState.java", "diffHunk": "@@ -117,4 +118,38 @@ public PaxosProposalId getLastAcceptedId() {\n     public PaxosValue getLastAcceptedValue() {\n         return lastAcceptedValue;\n     }\n+\n+    /**\n+     * Standard equals implementation, note that {@link #version} is not persisted and as such is not used in the\n+     * calculation.\n+     */\n+    @Override\n+    public boolean equals(Object obj) {", "originalCommit": "33199045e2350764efccfcbdf2b18a1d0e273044", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "981a5d5ab63089d1368342bd17796adc2aa2aa5b", "chunk": "diff --git a/leader-election-impl/src/main/java/com/palantir/paxos/PaxosAcceptorState.java b/leader-election-impl/src/main/java/com/palantir/paxos/PaxosAcceptorState.java\nindex 2dc1b2e6ce..406dcd1b56 100644\n--- a/leader-election-impl/src/main/java/com/palantir/paxos/PaxosAcceptorState.java\n+++ b/leader-election-impl/src/main/java/com/palantir/paxos/PaxosAcceptorState.java\n\n@@ -119,12 +119,8 @@ public final class PaxosAcceptorState implements Persistable, Versionable {\n         return lastAcceptedValue;\n     }\n \n-    /**\n-     * Standard equals implementation, note that {@link #version} is not persisted and as such is not used in the\n-     * calculation.\n-     */\n     @Override\n-    public boolean equals(Object obj) {\n+    public boolean equalsIgnoringVersion(Versionable obj) {\n         if (this == obj) {\n             return true;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU2MjgwMw==", "url": "https://github.com/palantir/atlasdb/pull/5026#discussion_r504562803", "bodyText": "nit: already.", "author": "jkozlowski", "createdAt": "2020-10-14T10:14:47Z", "path": "timelock-impl/src/test/java/com/palantir/atlasdb/timelock/paxos/PaxosStateLogMigrationIntegrationTest.java", "diffHunk": "@@ -160,25 +161,17 @@ public void learningValuesBeforeCutoffPersistsToLegacyLog() throws IOException {\n     }\n \n     @Test\n-    public void migrateOnlyOnce() throws IOException {\n+    public void failWhenOldLogWritesAtGreaterSequenceAfterMigrationAlreadyRan() throws IOException {\n         fileBasedLearnerLog.writeRound(LATEST_ROUND_BEFORE_MIGRATING, valueForRound(LATEST_ROUND_BEFORE_MIGRATING));\n \n-        LocalPaxosComponents paxosComponents = createPaxosComponents();\n+        createPaxosComponents();\n \n         long newRound = LATEST_ROUND_BEFORE_MIGRATING + 3;\n         fileBasedLearnerLog.writeRound(newRound, valueForRound(newRound));\n \n-        createPaxosComponents();\n-\n-        PaxosStateLog<PaxosValue> sqliteLog = createSqliteLog(paxosComponents.getLearnerParameters(CLIENT));\n-        assertValuePresent(LATEST_ROUND_BEFORE_MIGRATING, sqliteLog);\n-        assertValueAbsent(newRound, sqliteLog);\n-\n-        PaxosLearner learner = paxosComponents.learner(CLIENT);\n-        assertValueNotLearned(newRound, learner);\n-\n-        assertThat(paxosComponents.getWriteCounter(PaxosLearner.class).getCount()).isEqualTo(0L);\n-        assertThat(paxosComponents.getReadCounter(PaxosLearner.class).getCount()).isEqualTo(0L);\n+        assertThatThrownBy(this::createPaxosComponents)\n+                .as(\"Written to file based log at greater sequence after migration alredy ran\")", "originalCommit": "33199045e2350764efccfcbdf2b18a1d0e273044", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU3NTEyMQ==", "url": "https://github.com/palantir/atlasdb/pull/5026#discussion_r504575121", "bodyText": "That's just weird - just throw a SafeIllegalStateException, surely?", "author": "Jolyon-S", "createdAt": "2020-10-14T10:37:13Z", "path": "leader-election-impl/src/main/java/com/palantir/paxos/PaxosStateLogMigrator.java", "diffHunk": "@@ -117,6 +120,39 @@ private void writeBatchRetryingUpToFiveTimes(PaxosStateLog<V> target, List<Paxos\n         target.writeBatchOfRounds(batch);\n     }\n \n+    private static <V extends Persistable & Versionable> void validateConsistency(MigrationContext<V> context) {\n+        long migrationCutoff = calculateCutoff(context);\n+        long persistedCutoff = context.migrationState().getCutoff();\n+        long greatestSourceEntry = context.sourceLog().getGreatestLogEntry();\n+        Preconditions.checkState(migrationCutoff <= persistedCutoff,\n+                \"The migration to the destination state log was already performed in the past, but the \"\n+                        + \"persisted cutoff value does not match a newly calculated one. This indicates the source \"\n+                        + \"log has advanced since the migration was performed which could lead to data corruption if \"\n+                        + \"allowed to continue.\",\n+                SafeArg.of(\"fresh cutoff\", migrationCutoff),\n+                SafeArg.of(\"persisted cutoff\", persistedCutoff),\n+                SafeArg.of(\"source greatest entry\", greatestSourceEntry));\n+        if (greatestSourceEntry == PaxosAcceptor.NO_LOG_ENTRY) {\n+            return;\n+        }\n+        try {\n+            V source = context.hydrator().hydrateFromBytes(context.sourceLog().readRound(greatestSourceEntry));\n+            byte[] destinationBytes = context.destinationLog().readRound(greatestSourceEntry);\n+            V dest = destinationBytes != null ? context.hydrator().hydrateFromBytes(destinationBytes) : null;\n+            Preconditions.checkState(source.equals(dest),\n+                    \"The migration to the destination state log was already performed in the past, but the \"\n+                            + \"entry with the greatest sequence in source log does not match the entry in the \"\n+                            + \"destination log. This indicates the source log has advanced since the migration was \"\n+                            + \"performed which could lead to data corruption if allowed to continue.\",\n+                    SafeArg.of(\"source entry\", source),\n+                    SafeArg.of(\"destination entry\", dest));\n+        } catch (IOException e) {\n+            Preconditions.checkState(false,\n+                    \"Unable to verify consistency between source and destination paxos logs because the \"\n+                            + \"source log entry could not be read.\");", "originalCommit": "33199045e2350764efccfcbdf2b18a1d0e273044", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "981a5d5ab63089d1368342bd17796adc2aa2aa5b", "chunk": "diff --git a/leader-election-impl/src/main/java/com/palantir/paxos/PaxosStateLogMigrator.java b/leader-election-impl/src/main/java/com/palantir/paxos/PaxosStateLogMigrator.java\nindex 587c7fc73a..b76638cf56 100644\n--- a/leader-election-impl/src/main/java/com/palantir/paxos/PaxosStateLogMigrator.java\n+++ b/leader-election-impl/src/main/java/com/palantir/paxos/PaxosStateLogMigrator.java\n\n@@ -139,7 +140,7 @@ public final class PaxosStateLogMigrator<V extends Persistable & Versionable> {\n             V source = context.hydrator().hydrateFromBytes(context.sourceLog().readRound(greatestSourceEntry));\n             byte[] destinationBytes = context.destinationLog().readRound(greatestSourceEntry);\n             V dest = destinationBytes != null ? context.hydrator().hydrateFromBytes(destinationBytes) : null;\n-            Preconditions.checkState(source.equals(dest),\n+            Preconditions.checkState(source.equalsIgnoringVersion(dest),\n                     \"The migration to the destination state log was already performed in the past, but the \"\n                             + \"entry with the greatest sequence in source log does not match the entry in the \"\n                             + \"destination log. This indicates the source log has advanced since the migration was \"\n"}}, {"oid": "981a5d5ab63089d1368342bd17796adc2aa2aa5b", "url": "https://github.com/palantir/atlasdb/commit/981a5d5ab63089d1368342bd17796adc2aa2aa5b", "message": "Address comments", "committedDate": "2020-10-14T15:54:15Z", "type": "commit"}]}