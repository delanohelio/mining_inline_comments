{"pr_number": 4550, "pr_title": "[LW] Part 9(?): Lock Descriptor Utils", "pr_createdAt": "2020-02-04T18:03:25Z", "pr_url": "https://github.com/palantir/atlasdb/pull/4550", "timeline": [{"oid": "28c3c4deef48cd9bfe52372802d994b5fd546296", "url": "https://github.com/palantir/atlasdb/commit/28c3c4deef48cd9bfe52372802d994b5fd546296", "message": "LockDescriptor inverse mapping utils", "committedDate": "2020-02-04T17:58:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgzODY0NA==", "url": "https://github.com/palantir/atlasdb/pull/4550#discussion_r374838644", "bodyText": "wat??", "author": "felixdesouza", "createdAt": "2020-02-04T18:16:05Z", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/keyvalue/api/AtlasLockDescriptorUtils.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.primitives.Bytes;\n+import com.palantir.lock.LockDescriptor;\n+\n+import okio.ByteString;\n+\n+public final class AtlasLockDescriptorUtils {\n+    private static final byte[] ZERO_ARRAY = new byte[] {0};\n+\n+    private AtlasLockDescriptorUtils() {\n+        // NOPE\n+    }\n+\n+    public static List<CellReference> candidateCells(LockDescriptor lockDescriptor) {\n+        Optional<TableRefAndRemainder> tableRefAndRemainder = tryParseTableRef(lockDescriptor);\n+        if (!tableRefAndRemainder.isPresent()) {\n+            return ImmutableList.of();\n+        }\n+\n+        TableReference tableRef = tableRefAndRemainder.get().tableRef();\n+        ByteString remainingBytes = tableRefAndRemainder.get().remainder();\n+\n+        int lookupFrom = 0;\n+        int nextCandidate;\n+        List<Cell> cells = new ArrayList<>();\n+        while ((nextCandidate = remainingBytes.indexOf(ZERO_ARRAY, lookupFrom)) != -1) {", "originalCommit": "28c3c4deef48cd9bfe52372802d994b5fd546296", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE5MDM5MA==", "url": "https://github.com/palantir/atlasdb/pull/4550#discussion_r375190390", "bodyText": "I'm a C++ rockstar", "author": "gmaretic", "createdAt": "2020-02-05T11:01:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgzODY0NA=="}], "type": "inlineReview", "revised_code": {"commit": "717b93122a5f7fb1f9871dccb0138a530ac3700c", "chunk": "diff --git a/atlasdb-api/src/main/java/com/palantir/atlasdb/keyvalue/api/AtlasLockDescriptorUtils.java b/atlasdb-api/src/main/java/com/palantir/atlasdb/keyvalue/api/AtlasLockDescriptorUtils.java\nindex d8012169fe..5bee251c7b 100644\n--- a/atlasdb-api/src/main/java/com/palantir/atlasdb/keyvalue/api/AtlasLockDescriptorUtils.java\n+++ b/atlasdb-api/src/main/java/com/palantir/atlasdb/keyvalue/api/AtlasLockDescriptorUtils.java\n\n@@ -16,10 +16,10 @@\n \n package com.palantir.atlasdb.keyvalue.api;\n \n-import java.util.ArrayList;\n import java.util.List;\n import java.util.Optional;\n import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n \n import org.immutables.value.Value;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg1MTMwNw==", "url": "https://github.com/palantir/atlasdb/pull/4550#discussion_r374851307", "bodyText": "it feels like you're better off just getting the zeros yourself?\nIntStream.range(0, remainingBytes.size())\n        .filter(i -> isValidZeroIndex(remainingBytes, i)\n        .mapToObj(zeroIndex -> createCellFromByteString(remainingBytes, zeroIndex)\n        .map(cell -> CellReference.of(tableRef, cell))\n        .collect(toList());\n\nprivate static boolean isValidZeroIndex(ByteString remainingBytes, int zeroIndex) {\n\tremainingBytes.getByte(zeroIndex) == 0 && zeroIndex > 0 && zeroIndex < remainingBytes.size() - 2\n}\n\nprivate static Cell createCellFromByteString(ByteString remainingBytes, int zeroIndexDelimiter) {\n    byte[] row = remainingBytes.substring(0, i).toByteArray();\n    byte[] col = remainingBytes.substring(i + 1, remainingBytes.size()).toByteArray();\n    return Cell.create(row, col);\n}\nonly because ByteString.indexOf basically goes through it one by one. With IntStream and IntPredicate hopefully there is no boxing/unboxing cost to pay.", "author": "felixdesouza", "createdAt": "2020-02-04T18:40:15Z", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/keyvalue/api/AtlasLockDescriptorUtils.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.primitives.Bytes;\n+import com.palantir.lock.LockDescriptor;\n+\n+import okio.ByteString;\n+\n+public final class AtlasLockDescriptorUtils {\n+    private static final byte[] ZERO_ARRAY = new byte[] {0};\n+\n+    private AtlasLockDescriptorUtils() {\n+        // NOPE\n+    }\n+\n+    public static List<CellReference> candidateCells(LockDescriptor lockDescriptor) {\n+        Optional<TableRefAndRemainder> tableRefAndRemainder = tryParseTableRef(lockDescriptor);\n+        if (!tableRefAndRemainder.isPresent()) {\n+            return ImmutableList.of();\n+        }\n+\n+        TableReference tableRef = tableRefAndRemainder.get().tableRef();\n+        ByteString remainingBytes = tableRefAndRemainder.get().remainder();\n+\n+        int lookupFrom = 0;", "originalCommit": "28c3c4deef48cd9bfe52372802d994b5fd546296", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk0MDgxNA==", "url": "https://github.com/palantir/atlasdb/pull/4550#discussion_r374940814", "bodyText": "Might want to micro-benchmark this if perf is a concern. I like the readability of @felixdesouza's suggestion.", "author": "jeremyk-91", "createdAt": "2020-02-04T21:45:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg1MTMwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE5NDg5OQ==", "url": "https://github.com/palantir/atlasdb/pull/4550#discussion_r375194899", "bodyText": "This is much nicer, agree", "author": "gmaretic", "createdAt": "2020-02-05T11:12:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg1MTMwNw=="}], "type": "inlineReview", "revised_code": {"commit": "717b93122a5f7fb1f9871dccb0138a530ac3700c", "chunk": "diff --git a/atlasdb-api/src/main/java/com/palantir/atlasdb/keyvalue/api/AtlasLockDescriptorUtils.java b/atlasdb-api/src/main/java/com/palantir/atlasdb/keyvalue/api/AtlasLockDescriptorUtils.java\nindex d8012169fe..5bee251c7b 100644\n--- a/atlasdb-api/src/main/java/com/palantir/atlasdb/keyvalue/api/AtlasLockDescriptorUtils.java\n+++ b/atlasdb-api/src/main/java/com/palantir/atlasdb/keyvalue/api/AtlasLockDescriptorUtils.java\n\n@@ -16,10 +16,10 @@\n \n package com.palantir.atlasdb.keyvalue.api;\n \n-import java.util.ArrayList;\n import java.util.List;\n import java.util.Optional;\n import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n \n import org.immutables.value.Value;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg1MzAzNw==", "url": "https://github.com/palantir/atlasdb/pull/4550#discussion_r374853037", "bodyText": "might it be clearer if you said rawBytes.length - (endOfTableName + 1)? not particularly fussed here", "author": "felixdesouza", "createdAt": "2020-02-04T18:43:37Z", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/keyvalue/api/AtlasLockDescriptorUtils.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.primitives.Bytes;\n+import com.palantir.lock.LockDescriptor;\n+\n+import okio.ByteString;\n+\n+public final class AtlasLockDescriptorUtils {\n+    private static final byte[] ZERO_ARRAY = new byte[] {0};\n+\n+    private AtlasLockDescriptorUtils() {\n+        // NOPE\n+    }\n+\n+    public static List<CellReference> candidateCells(LockDescriptor lockDescriptor) {\n+        Optional<TableRefAndRemainder> tableRefAndRemainder = tryParseTableRef(lockDescriptor);\n+        if (!tableRefAndRemainder.isPresent()) {\n+            return ImmutableList.of();\n+        }\n+\n+        TableReference tableRef = tableRefAndRemainder.get().tableRef();\n+        ByteString remainingBytes = tableRefAndRemainder.get().remainder();\n+\n+        int lookupFrom = 0;\n+        int nextCandidate;\n+        List<Cell> cells = new ArrayList<>();\n+        while ((nextCandidate = remainingBytes.indexOf(ZERO_ARRAY, lookupFrom)) != -1) {\n+            if (nextCandidate > 0 && nextCandidate < remainingBytes.size() - 2) {\n+                byte[] row = remainingBytes.substring(0, nextCandidate).toByteArray();\n+                byte[] col = remainingBytes.substring(nextCandidate + 1, remainingBytes.size()).toByteArray();\n+                cells.add(Cell.create(row, col));\n+            }\n+            lookupFrom = nextCandidate + 1;\n+        }\n+        return cells.stream().map(cell -> CellReference.of(tableRef, cell)).collect(Collectors.toList());\n+    }\n+\n+    public static Optional<TableRefAndRemainder> tryParseTableRef(LockDescriptor lockDescriptor) {\n+        byte[] rawBytes = lockDescriptor.getBytes();\n+\n+        int endOfTableName = Bytes.indexOf(rawBytes, (byte) 0);\n+        if (endOfTableName == -1) {\n+            return Optional.empty();\n+        }\n+        String fullyQualifiedName = new String(rawBytes, 0, endOfTableName);\n+        TableReference tableRef = TableReference.createFromFullyQualifiedName(fullyQualifiedName);\n+        ByteString remainingBytes = ByteString.of(rawBytes, endOfTableName + 1, rawBytes.length - 1 - endOfTableName);", "originalCommit": "28c3c4deef48cd9bfe52372802d994b5fd546296", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "717b93122a5f7fb1f9871dccb0138a530ac3700c", "chunk": "diff --git a/atlasdb-api/src/main/java/com/palantir/atlasdb/keyvalue/api/AtlasLockDescriptorUtils.java b/atlasdb-api/src/main/java/com/palantir/atlasdb/keyvalue/api/AtlasLockDescriptorUtils.java\nindex d8012169fe..5bee251c7b 100644\n--- a/atlasdb-api/src/main/java/com/palantir/atlasdb/keyvalue/api/AtlasLockDescriptorUtils.java\n+++ b/atlasdb-api/src/main/java/com/palantir/atlasdb/keyvalue/api/AtlasLockDescriptorUtils.java\n\n@@ -16,10 +16,10 @@\n \n package com.palantir.atlasdb.keyvalue.api;\n \n-import java.util.ArrayList;\n import java.util.List;\n import java.util.Optional;\n import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n \n import org.immutables.value.Value;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk0MzgxMQ==", "url": "https://github.com/palantir/atlasdb/pull/4550#discussion_r374943811", "bodyText": "nit: containsExactlyInAnyOrderElementsOf as opposed to isEqualTo is probably what we care about? There could be something I'm missing.", "author": "jeremyk-91", "createdAt": "2020-02-04T21:52:30Z", "path": "atlasdb-api/src/test/java/com/palantir/atlasdb/keyvalue/api/AtlasLockDescriptorUtilsTest.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.junit.Test;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.palantir.lock.AtlasCellLockDescriptor;\n+import com.palantir.lock.AtlasRowLockDescriptor;\n+import com.palantir.lock.LockDescriptor;\n+import com.palantir.lock.StringLockDescriptor;\n+\n+import okio.ByteString;\n+\n+public class AtlasLockDescriptorUtilsTest {\n+    private static final TableReference TABLE = TableReference.createFromFullyQualifiedName(\"test.table\");\n+    private static final byte[] NO_ZERO_ROW = new byte[] {1, 2, 3};\n+    private static final byte[] NO_ZERO_COL = new byte[] {4, 5, 6};\n+    private static final byte[] ROW_WITH_ZEROS = new byte[] {1, 0, 2, 0, 3};\n+    private static final byte[] COL_WITH_ZEROS = new byte[] {4, 0, 0, 5, 6};\n+    private static final byte[] START_WITH_ZERO = new byte[] {0, 1, 2, 3};\n+    private static final byte[] END_WITH_ZERO = new byte[] {4, 5, 6, 0};\n+\n+    @Test\n+    public void lockDescriptorWithNoZerosReturnsEmptyForCells() {\n+        LockDescriptor descriptor = StringLockDescriptor.of(\"test\");\n+        assertThat(AtlasLockDescriptorUtils.candidateCells(descriptor)).isEmpty();\n+    }\n+\n+    @Test\n+    public void lockDescriptorWithOneZeroReturnsEmptyForCells() {\n+        LockDescriptor descriptor = AtlasRowLockDescriptor.of(TABLE.getQualifiedName(), NO_ZERO_ROW);\n+        assertThat(AtlasLockDescriptorUtils.candidateCells(descriptor)).isEmpty();\n+    }\n+\n+    @Test\n+    public void uniqueCellLockDescriptorIsDecodedCorrectlyForCells() {\n+        LockDescriptor descriptor = AtlasCellLockDescriptor.of(TABLE.getQualifiedName(), NO_ZERO_ROW, NO_ZERO_COL);\n+        assertThat(AtlasLockDescriptorUtils.candidateCells(descriptor))\n+                .containsExactly(CellReference.of(TABLE, Cell.create(NO_ZERO_ROW, NO_ZERO_COL)));\n+    }\n+\n+    @Test\n+    public void rowWithNullsParsesAllCombinationsForCells() {\n+        LockDescriptor descriptor = AtlasCellLockDescriptor.of(TABLE.getQualifiedName(), ROW_WITH_ZEROS, NO_ZERO_COL);\n+\n+        List<CellReference> expected = ImmutableList.of(\n+                Cell.create(new byte[] {1}, new byte[] {2, 0, 3, 0, 4, 5, 6}),\n+                Cell.create(new byte[] {1, 0, 2}, new byte[] {3, 0, 4, 5, 6}),\n+                Cell.create(new byte[] {1, 0, 2, 0, 3}, new byte[] {4, 5, 6}))\n+                .stream()\n+                .map(cell -> CellReference.of(TABLE, cell))\n+                .collect(Collectors.toList());\n+\n+        assertThat(AtlasLockDescriptorUtils.candidateCells(descriptor)).isEqualTo(expected);", "originalCommit": "28c3c4deef48cd9bfe52372802d994b5fd546296", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE5NjY2NQ==", "url": "https://github.com/palantir/atlasdb/pull/4550#discussion_r375196665", "bodyText": "Since the return type is a list, I'd say the ordering is implicitly guaranteed (although not explicitly specified)", "author": "gmaretic", "createdAt": "2020-02-05T11:16:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk0MzgxMQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "717b93122a5f7fb1f9871dccb0138a530ac3700c", "url": "https://github.com/palantir/atlasdb/commit/717b93122a5f7fb1f9871dccb0138a530ac3700c", "message": "Address CR", "committedDate": "2020-02-05T11:18:26Z", "type": "commit"}]}