{"pr_number": 4669, "pr_title": "Lazy Initialization for ReplaceIfExceptionMatchingProxy", "pr_createdAt": "2020-03-24T18:51:52Z", "pr_url": "https://github.com/palantir/atlasdb/pull/4669", "timeline": [{"oid": "ce926a073b00f29b7bea4e9977f1e38ab9e73393", "url": "https://github.com/palantir/atlasdb/commit/ce926a073b00f29b7bea4e9977f1e38ab9e73393", "message": "Lazy initialization", "committedDate": "2020-03-24T18:43:00Z", "type": "commit"}, {"oid": "34e6f91de724a2722dcb335e30bc373f5f26c80e", "url": "https://github.com/palantir/atlasdb/commit/34e6f91de724a2722dcb335e30bc373f5f26c80e", "message": "Add generated changelog entries", "committedDate": "2020-03-24T18:43:00Z", "type": "commit"}, {"oid": "3d079904fb6238ec4766c75561e7438ed7bb2c66", "url": "https://github.com/palantir/atlasdb/commit/3d079904fb6238ec4766c75561e7438ed7bb2c66", "message": "Add generated changelog entries", "committedDate": "2020-03-24T18:43:00Z", "type": "commit"}, {"oid": "7d3e55b96e665c73dc4392dd8eeece4edf75be58", "url": "https://github.com/palantir/atlasdb/commit/7d3e55b96e665c73dc4392dd8eeece4edf75be58", "message": "test", "committedDate": "2020-03-24T18:54:33Z", "type": "commit"}, {"oid": "621429ee55656e95488f296a7e7a80b5d37fbd36", "url": "https://github.com/palantir/atlasdb/commit/621429ee55656e95488f296a7e7a80b5d37fbd36", "message": "Remove volatile read", "committedDate": "2020-03-25T10:58:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc1OTc0Mg==", "url": "https://github.com/palantir/atlasdb/pull/4669#discussion_r397759742", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    T perceivedDelegate = delegate;\n          \n          \n            \n                    if (delegate == null) {\n          \n          \n            \n                        synchronized (this) {\n          \n          \n            \n                            if (delegate == null) {\n          \n          \n            \n                                delegate = delegateFactory.get();\n          \n          \n            \n                            }\n          \n          \n            \n                        }\n          \n          \n            \n                    }", "author": "gmaretic", "createdAt": "2020-03-25T10:45:27Z", "path": "atlasdb-commons/src/main/java/com/palantir/common/proxy/ReplaceIfExceptionMatchingProxy.java", "diffHunk": "@@ -51,13 +51,25 @@ protected Object handleInvocation(Object proxy, Method method, Object[] args) th\n         }\n     }\n \n+    private void setUpDelegateIfNecessary() {\n+        T perceivedDelegate = delegate;", "originalCommit": "7d3e55b96e665c73dc4392dd8eeece4edf75be58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc4NTQ0NQ==", "url": "https://github.com/palantir/atlasdb/pull/4669#discussion_r397785445", "bodyText": "I guess we need a return delegate after that though, which again means we do 2 volatile reads in the happy path?", "author": "jeremyk-91", "createdAt": "2020-03-25T11:31:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc1OTc0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc5ODE0Ng==", "url": "https://github.com/palantir/atlasdb/pull/4669#discussion_r397798146", "bodyText": "That wasn't there when I reviewed, but agree this is more performant", "author": "gmaretic", "createdAt": "2020-03-25T11:55:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc1OTc0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "621429ee55656e95488f296a7e7a80b5d37fbd36", "chunk": "diff --git a/atlasdb-commons/src/main/java/com/palantir/common/proxy/ReplaceIfExceptionMatchingProxy.java b/atlasdb-commons/src/main/java/com/palantir/common/proxy/ReplaceIfExceptionMatchingProxy.java\nindex 6690fec578..0646fc69e5 100644\n--- a/atlasdb-commons/src/main/java/com/palantir/common/proxy/ReplaceIfExceptionMatchingProxy.java\n+++ b/atlasdb-commons/src/main/java/com/palantir/common/proxy/ReplaceIfExceptionMatchingProxy.java\n\n@@ -42,8 +42,7 @@ public final class ReplaceIfExceptionMatchingProxy<T> extends AbstractInvocation\n     @Override\n     protected Object handleInvocation(Object proxy, Method method, Object[] args) throws Throwable {\n         try {\n-            setUpDelegateIfNecessary();\n-            return method.invoke(delegate, args);\n+            return method.invoke(getAndPossiblyInitializeDelegate(), args);\n         } catch (InvocationTargetException e) {\n             Throwable cause = e.getCause();\n             replaceIfNecessary(cause);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc2NjE0NQ==", "url": "https://github.com/palantir/atlasdb/pull/4669#discussion_r397766145", "bodyText": "This is kinda funky, because the expected behaviour depends on delegateFactory.get() being memoized both for this check to even make sense and to avoid a \"creation storm\". I think the memoization should be explicitly done in this class, maybe by having factory method that takes a non-memoized delegateFactory, and an expiration time and then memoizes it?", "author": "gmaretic", "createdAt": "2020-03-25T10:56:35Z", "path": "atlasdb-commons/src/main/java/com/palantir/common/proxy/ReplaceIfExceptionMatchingProxy.java", "diffHunk": "@@ -51,13 +51,25 @@ protected Object handleInvocation(Object proxy, Method method, Object[] args) th\n         }\n     }\n \n+    private void setUpDelegateIfNecessary() {\n+        T perceivedDelegate = delegate;\n+        if (perceivedDelegate == null) {\n+            synchronized (this) {\n+                perceivedDelegate = delegate;\n+                if (perceivedDelegate == null) {\n+                    delegate = delegateFactory.get();\n+                }\n+            }\n+        }\n+    }\n+\n     private void replaceIfNecessary(Throwable thrown) {\n         if (shouldReplace.test(thrown)) {\n             synchronized (this) {\n                 T replacement = delegateFactory.get();\n                 if (delegate != replacement) {", "originalCommit": "7d3e55b96e665c73dc4392dd8eeece4edf75be58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc5MjQ0OQ==", "url": "https://github.com/palantir/atlasdb/pull/4669#discussion_r397792449", "bodyText": "Yep, the factory method suggestion is good", "author": "jeremyk-91", "createdAt": "2020-03-25T11:44:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc2NjE0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "621429ee55656e95488f296a7e7a80b5d37fbd36", "chunk": "diff --git a/atlasdb-commons/src/main/java/com/palantir/common/proxy/ReplaceIfExceptionMatchingProxy.java b/atlasdb-commons/src/main/java/com/palantir/common/proxy/ReplaceIfExceptionMatchingProxy.java\nindex 6690fec578..0646fc69e5 100644\n--- a/atlasdb-commons/src/main/java/com/palantir/common/proxy/ReplaceIfExceptionMatchingProxy.java\n+++ b/atlasdb-commons/src/main/java/com/palantir/common/proxy/ReplaceIfExceptionMatchingProxy.java\n\n@@ -42,8 +42,7 @@ public final class ReplaceIfExceptionMatchingProxy<T> extends AbstractInvocation\n     @Override\n     protected Object handleInvocation(Object proxy, Method method, Object[] args) throws Throwable {\n         try {\n-            setUpDelegateIfNecessary();\n-            return method.invoke(delegate, args);\n+            return method.invoke(getAndPossiblyInitializeDelegate(), args);\n         } catch (InvocationTargetException e) {\n             Throwable cause = e.getCause();\n             replaceIfNecessary(cause);\n"}}, {"oid": "dba9dc1d12eae7bde375a9c4896ac5701b07912e", "url": "https://github.com/palantir/atlasdb/commit/dba9dc1d12eae7bde375a9c4896ac5701b07912e", "message": "Refactor memoization to a factory", "committedDate": "2020-03-25T11:44:20Z", "type": "commit"}, {"oid": "44937a2daa4de721c868cf9e776d46e12c4ec70a", "url": "https://github.com/palantir/atlasdb/commit/44937a2daa4de721c868cf9e776d46e12c4ec70a", "message": "oops", "committedDate": "2020-03-25T11:53:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc5ODY5Nw==", "url": "https://github.com/palantir/atlasdb/pull/4669#discussion_r397798697", "bodyText": ":P", "author": "gmaretic", "createdAt": "2020-03-25T11:56:23Z", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/http/AtlasDbHttpClients.java", "diffHunk": "@@ -111,7 +111,7 @@ private AtlasDbHttpClients() {\n     private static <T> T wrapWithOkHttpBugHandling(Class<T> type, Supplier<T> supplier) {\n         return ReplaceIfExceptionMatchingProxy.create(\n                 type,\n-                supplier::get,", "originalCommit": "44937a2daa4de721c868cf9e776d46e12c4ec70a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "eaa0c615d8013ae1e0fc0306b9cc11f33bdceac9", "url": "https://github.com/palantir/atlasdb/commit/eaa0c615d8013ae1e0fc0306b9cc11f33bdceac9", "message": "Fix checkstyle", "committedDate": "2020-03-25T13:16:30Z", "type": "commit"}]}