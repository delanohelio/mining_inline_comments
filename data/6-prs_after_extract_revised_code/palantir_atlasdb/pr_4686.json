{"pr_number": 4686, "pr_title": "[PDS-111849] Rolling in the Deep, Part 1: Failing Test & Rerouting Internode Calls Through Proxies", "pr_createdAt": "2020-03-30T19:57:45Z", "pr_url": "https://github.com/palantir/atlasdb/pull/4686", "timeline": [{"oid": "6e054afbf9fd62ddebaa7127ce84f409a31ce9bf", "url": "https://github.com/palantir/atlasdb/commit/6e054afbf9fd62ddebaa7127ce84f409a31ce9bf", "message": "Proxying", "committedDate": "2020-03-30T18:40:50Z", "type": "commit"}, {"oid": "81947c5302ca16242b9cadfef3522727ebf27a8f", "url": "https://github.com/palantir/atlasdb/commit/81947c5302ca16242b9cadfef3522727ebf27a8f", "message": "Fix race condition and cleanup", "committedDate": "2020-03-30T19:28:41Z", "type": "commit"}, {"oid": "88e6c03742c046ad39a6a3379f7d552b71a6cd0a", "url": "https://github.com/palantir/atlasdb/commit/88e6c03742c046ad39a6a3379f7d552b71a6cd0a", "message": "baseline", "committedDate": "2020-03-30T19:46:57Z", "type": "commit"}, {"oid": "09dd62a53f61b42704c967ee94be117b3d9f77ec", "url": "https://github.com/palantir/atlasdb/commit/09dd62a53f61b42704c967ee94be117b3d9f77ec", "message": "Gradle shenanigans", "committedDate": "2020-03-30T19:51:51Z", "type": "commit"}, {"oid": "4a404dbdbc4a59859af5c97b8f1a67e58fef01a2", "url": "https://github.com/palantir/atlasdb/commit/4a404dbdbc4a59859af5c97b8f1a67e58fef01a2", "message": "Fix race condition", "committedDate": "2020-03-31T09:19:49Z", "type": "commit"}, {"oid": "09e6bcded6b01dfc022d1ee16c693a325d694b7a", "url": "https://github.com/palantir/atlasdb/commit/09e6bcded6b01dfc022d1ee16c693a325d694b7a", "message": "unused import", "committedDate": "2020-03-31T09:20:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg2ODk5OA==", "url": "https://github.com/palantir/atlasdb/pull/4686#discussion_r400868998", "bodyText": "This test will fail even if the buildup occurs in the warmup period. Maybe at least indicate in the reason for failure if it occurred during warmup or after we simulated shutting down?", "author": "gmaretic", "createdAt": "2020-03-31T12:22:57Z", "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java", "diffHunk": "@@ -282,6 +285,30 @@ public void multipleLockRequestsWithTheSameIdAreGranted() {\n         }\n     }\n \n+    @Test\n+    @Ignore // TODO (jkong): Fix this test by reworking the threading model.\n+    public void stressTest() {\n+        TestableTimelockServer nonLeader = Iterables.getFirst(cluster.nonLeaders(client.namespace()).values(), null);\n+        int startingNumThreads = ManagementFactory.getThreadMXBean().getThreadCount();\n+        try {\n+            for (int i = 0; i < 10_000; i++) { // Needed as it takes a while for the thread buildup to occur\n+                client.getFreshTimestamp();\n+                assertThat(ManagementFactory.getThreadMXBean().getThreadCount())", "originalCommit": "09e6bcded6b01dfc022d1ee16c693a325d694b7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg4NTg0Nw==", "url": "https://github.com/palantir/atlasdb/pull/4686#discussion_r400885847", "bodyText": "Alright, will do. Yeah, that seems unlikely, but good to catch :)", "author": "jeremyk-91", "createdAt": "2020-03-31T12:49:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg2ODk5OA=="}], "type": "inlineReview", "revised_code": {"commit": "865e566178b6018d169e9734427e59aa10c72eb7", "chunk": "diff --git a/timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java b/timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java\nindex 473c085660..84c26598af 100644\n--- a/timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java\n+++ b/timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java\n\n@@ -290,18 +290,16 @@ public class MultiNodePaxosTimeLockServerIntegrationTest {\n     public void stressTest() {\n         TestableTimelockServer nonLeader = Iterables.getFirst(cluster.nonLeaders(client.namespace()).values(), null);\n         int startingNumThreads = ManagementFactory.getThreadMXBean().getThreadCount();\n+        boolean isNonLeaderTakenOut = false;\n         try {\n             for (int i = 0; i < 10_000; i++) { // Needed as it takes a while for the thread buildup to occur\n                 client.getFreshTimestamp();\n-                assertThat(ManagementFactory.getThreadMXBean().getThreadCount())\n-                        .as(\"should not additionally spin up too many threads\")\n-                        .isLessThanOrEqualTo(startingNumThreads + 200);\n+                assertNumberOfThreadsReasonable(\n+                        startingNumThreads,\n+                        ManagementFactory.getThreadMXBean().getThreadCount(),\n+                        isNonLeaderTakenOut);\n                 if (i == 1_000) {\n-                    nonLeader.serverHolder().wireMock().register(\n-                            WireMock.any(WireMock.anyUrl())\n-                                    .atPriority(Integer.MAX_VALUE - 1)\n-                                    .willReturn(WireMock.serviceUnavailable().withFixedDelay(\n-                                            Ints.checkedCast(Duration.ofSeconds(2).toMillis()))).build());\n+                    makeServerWaitTwoSecondsAndThenReturn503s(nonLeader);\n                 }\n             }\n         } finally {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg2OTUxNg==", "url": "https://github.com/palantir/atlasdb/pull/4686#discussion_r400869516", "bodyText": "Extract a method indicating that this simulates the node shutting down?", "author": "gmaretic", "createdAt": "2020-03-31T12:23:47Z", "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java", "diffHunk": "@@ -282,6 +285,30 @@ public void multipleLockRequestsWithTheSameIdAreGranted() {\n         }\n     }\n \n+    @Test\n+    @Ignore // TODO (jkong): Fix this test by reworking the threading model.\n+    public void stressTest() {\n+        TestableTimelockServer nonLeader = Iterables.getFirst(cluster.nonLeaders(client.namespace()).values(), null);\n+        int startingNumThreads = ManagementFactory.getThreadMXBean().getThreadCount();\n+        try {\n+            for (int i = 0; i < 10_000; i++) { // Needed as it takes a while for the thread buildup to occur\n+                client.getFreshTimestamp();\n+                assertThat(ManagementFactory.getThreadMXBean().getThreadCount())\n+                        .as(\"should not additionally spin up too many threads\")\n+                        .isLessThanOrEqualTo(startingNumThreads + 200);\n+                if (i == 1_000) {\n+                    nonLeader.serverHolder().wireMock().register(", "originalCommit": "09e6bcded6b01dfc022d1ee16c693a325d694b7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg4NTg5NA==", "url": "https://github.com/palantir/atlasdb/pull/4686#discussion_r400885894", "bodyText": "Will do!", "author": "jeremyk-91", "createdAt": "2020-03-31T12:49:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg2OTUxNg=="}], "type": "inlineReview", "revised_code": {"commit": "865e566178b6018d169e9734427e59aa10c72eb7", "chunk": "diff --git a/timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java b/timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java\nindex 473c085660..84c26598af 100644\n--- a/timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java\n+++ b/timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java\n\n@@ -290,18 +290,16 @@ public class MultiNodePaxosTimeLockServerIntegrationTest {\n     public void stressTest() {\n         TestableTimelockServer nonLeader = Iterables.getFirst(cluster.nonLeaders(client.namespace()).values(), null);\n         int startingNumThreads = ManagementFactory.getThreadMXBean().getThreadCount();\n+        boolean isNonLeaderTakenOut = false;\n         try {\n             for (int i = 0; i < 10_000; i++) { // Needed as it takes a while for the thread buildup to occur\n                 client.getFreshTimestamp();\n-                assertThat(ManagementFactory.getThreadMXBean().getThreadCount())\n-                        .as(\"should not additionally spin up too many threads\")\n-                        .isLessThanOrEqualTo(startingNumThreads + 200);\n+                assertNumberOfThreadsReasonable(\n+                        startingNumThreads,\n+                        ManagementFactory.getThreadMXBean().getThreadCount(),\n+                        isNonLeaderTakenOut);\n                 if (i == 1_000) {\n-                    nonLeader.serverHolder().wireMock().register(\n-                            WireMock.any(WireMock.anyUrl())\n-                                    .atPriority(Integer.MAX_VALUE - 1)\n-                                    .willReturn(WireMock.serviceUnavailable().withFixedDelay(\n-                                            Ints.checkedCast(Duration.ofSeconds(2).toMillis()))).build());\n+                    makeServerWaitTwoSecondsAndThenReturn503s(nonLeader);\n                 }\n             }\n         } finally {\n"}}, {"oid": "865e566178b6018d169e9734427e59aa10c72eb7", "url": "https://github.com/palantir/atlasdb/commit/865e566178b6018d169e9734427e59aa10c72eb7", "message": "PR feedback", "committedDate": "2020-03-31T13:01:08Z", "type": "commit"}, {"oid": "18cf2a095ce99eb9e7a0f65b92e038f6d5906f7f", "url": "https://github.com/palantir/atlasdb/commit/18cf2a095ce99eb9e7a0f65b92e038f6d5906f7f", "message": "I played myself", "committedDate": "2020-03-31T13:03:29Z", "type": "commit"}]}