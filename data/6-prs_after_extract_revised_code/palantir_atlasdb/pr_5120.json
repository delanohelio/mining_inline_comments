{"pr_number": 5120, "pr_title": "[Cross Client Batching LeaderTimes - 2a] | Refactor coalescing leaderTimeGetter", "pr_createdAt": "2020-11-19T09:53:55Z", "pr_url": "https://github.com/palantir/atlasdb/pull/5120", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc1NTYzMA==", "url": "https://github.com/palantir/atlasdb/pull/5120#discussion_r526755630", "bodyText": "I think this should still be configurable - internal atlasdb-proxy probably wants more than 16384.", "author": "jeremyk-91", "createdAt": "2020-11-19T10:33:31Z", "path": "lock-api/src/main/java/com/palantir/lock/client/LeaderTimeCoalescingBatcher.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.client;\n+\n+import com.palantir.atlasdb.autobatch.Autobatchers;\n+import com.palantir.atlasdb.autobatch.CoalescingRequestFunction;\n+import com.palantir.atlasdb.autobatch.DisruptorAutobatcher;\n+import com.palantir.atlasdb.futures.AtlasFutures;\n+import com.palantir.atlasdb.timelock.api.MultiClientConjureTimelockService;\n+import com.palantir.atlasdb.timelock.api.Namespace;\n+import com.palantir.lock.v2.LeaderTime;\n+import com.palantir.tokens.auth.AuthHeader;\n+import java.util.Map;\n+import java.util.Set;\n+\n+public class LeaderTimeCoalescingBatcher implements AutoCloseable {\n+    private static final int BUFFER_SIZE = 16384;", "originalCommit": "ef12650d5109e92dcc6002ce1114747950203449", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "97fd2737405c5e748a03d94fc5cac258361c9f5b", "chunk": "diff --git a/lock-api/src/main/java/com/palantir/lock/client/LeaderTimeCoalescingBatcher.java b/lock-api/src/main/java/com/palantir/lock/client/LeaderTimeCoalescingBatcher.java\ndeleted file mode 100644\nindex 0396e2c889..0000000000\n--- a/lock-api/src/main/java/com/palantir/lock/client/LeaderTimeCoalescingBatcher.java\n+++ /dev/null\n\n@@ -1,63 +0,0 @@\n-/*\n- * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.palantir.lock.client;\n-\n-import com.palantir.atlasdb.autobatch.Autobatchers;\n-import com.palantir.atlasdb.autobatch.CoalescingRequestFunction;\n-import com.palantir.atlasdb.autobatch.DisruptorAutobatcher;\n-import com.palantir.atlasdb.futures.AtlasFutures;\n-import com.palantir.atlasdb.timelock.api.MultiClientConjureTimelockService;\n-import com.palantir.atlasdb.timelock.api.Namespace;\n-import com.palantir.lock.v2.LeaderTime;\n-import com.palantir.tokens.auth.AuthHeader;\n-import java.util.Map;\n-import java.util.Set;\n-\n-public class LeaderTimeCoalescingBatcher implements AutoCloseable {\n-    private static final int BUFFER_SIZE = 16384;\n-    private static final AuthHeader AUTH_HEADER = AuthHeader.valueOf(\"Bearer omitted\");\n-    private final DisruptorAutobatcher<Namespace, LeaderTime> batcher;\n-\n-    public LeaderTimeCoalescingBatcher(MultiClientConjureTimelockService delegate) {\n-        this.batcher = Autobatchers.coalescing(new LeaderTimeCoalescingConsumer(delegate))\n-                .bufferSize(BUFFER_SIZE)\n-                .safeLoggablePurpose(\"get-leader-times\")\n-                .build();\n-    }\n-\n-    public LeaderTime apply(Namespace namespace) {\n-        return AtlasFutures.getUnchecked(batcher.apply(namespace));\n-    }\n-\n-    @Override\n-    public void close() {\n-        batcher.close();\n-    }\n-\n-    static class LeaderTimeCoalescingConsumer implements CoalescingRequestFunction<Namespace, LeaderTime> {\n-        private final MultiClientConjureTimelockService delegate;\n-\n-        public LeaderTimeCoalescingConsumer(MultiClientConjureTimelockService delegate) {\n-            this.delegate = delegate;\n-        }\n-\n-        @Override\n-        public Map<Namespace, LeaderTime> apply(Set<Namespace> namespaces) {\n-            return delegate.leaderTimes(AUTH_HEADER, namespaces).getNamespaceWiseLeaderTimes();\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc2MDk2NA==", "url": "https://github.com/palantir/atlasdb/pull/5120#discussion_r526760964", "bodyText": "I'd name this differently - the problem here is that we have two implementations that are both logically coalescing, so this name isn't very helpful. I'd name this SingleClientLeaderTimeGetter? Not even opposed to LegacyLeaderTimeGetter at this point", "author": "jeremyk-91", "createdAt": "2020-11-19T10:41:51Z", "path": "lock-api/src/main/java/com/palantir/lock/client/CoalescingLeaderTimeGetter.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.client;\n+\n+import com.palantir.common.concurrent.CoalescingSupplier;\n+import com.palantir.lock.v2.LeaderTime;\n+\n+public class CoalescingLeaderTimeGetter implements LeaderTimeGetter {", "originalCommit": "ef12650d5109e92dcc6002ce1114747950203449", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "97fd2737405c5e748a03d94fc5cac258361c9f5b", "chunk": "diff --git a/lock-api/src/main/java/com/palantir/lock/client/CoalescingLeaderTimeGetter.java b/lock-api/src/main/java/com/palantir/lock/client/CoalescingLeaderTimeGetter.java\ndeleted file mode 100644\nindex f8c4d144c6..0000000000\n--- a/lock-api/src/main/java/com/palantir/lock/client/CoalescingLeaderTimeGetter.java\n+++ /dev/null\n\n@@ -1,36 +0,0 @@\n-/*\n- * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.palantir.lock.client;\n-\n-import com.palantir.common.concurrent.CoalescingSupplier;\n-import com.palantir.lock.v2.LeaderTime;\n-\n-public class CoalescingLeaderTimeGetter implements LeaderTimeGetter {\n-    private final CoalescingSupplier<LeaderTime> time;\n-\n-    public CoalescingLeaderTimeGetter(NamespacedConjureTimelockService delegate) {\n-        this.time = new CoalescingSupplier<>(delegate::leaderTime);\n-    }\n-\n-    @Override\n-    public LeaderTime leaderTime() {\n-        return time.get();\n-    }\n-\n-    @Override\n-    public void close() {}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc2MjQwMA==", "url": "https://github.com/palantir/atlasdb/pull/5120#discussion_r526762400", "bodyText": "I would make this non-Optional actually: the setting of a default should happen at the TransactionManagers builder level, and then all usages within Atlas code should be non-optional (e.g. see how lockWatchingCache is set)", "author": "jeremyk-91", "createdAt": "2020-11-19T10:44:04Z", "path": "lock-api/src/main/java/com/palantir/lock/client/LockLeaseService.java", "diffHunk": "@@ -47,19 +46,21 @@\n class LockLeaseService {\n     private final NamespacedConjureTimelockService delegate;\n     private final UUID clientId;\n-    private final CoalescingSupplier<LeaderTime> time;\n+    private final LeaderTimeGetter leaderTimeGetter;\n     private final BlockEnforcingLockService lockService;\n \n     @VisibleForTesting\n-    LockLeaseService(NamespacedConjureTimelockService delegate, UUID clientId) {\n+    LockLeaseService(\n+            NamespacedConjureTimelockService delegate, UUID clientId, Optional<LeaderTimeGetter> leaderTimeGetter) {\n         this.delegate = delegate;\n         this.clientId = clientId;\n-        this.time = new CoalescingSupplier<>(delegate::leaderTime);\n+        this.leaderTimeGetter = leaderTimeGetter.orElseGet(() -> new CoalescingLeaderTimeGetter(delegate));\n         this.lockService = BlockEnforcingLockService.create(delegate);\n     }\n \n-    static LockLeaseService create(NamespacedConjureTimelockService conjureTimelock) {\n-        return new LockLeaseService(conjureTimelock, UUID.randomUUID());\n+    static LockLeaseService create(\n+            NamespacedConjureTimelockService conjureTimelock, Optional<LeaderTimeGetter> leaderTimeGetter) {", "originalCommit": "ef12650d5109e92dcc6002ce1114747950203449", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "97fd2737405c5e748a03d94fc5cac258361c9f5b", "chunk": "diff --git a/lock-api/src/main/java/com/palantir/lock/client/LockLeaseService.java b/lock-api/src/main/java/com/palantir/lock/client/LockLeaseService.java\nindex 6f730f0565..58c13683a6 100644\n--- a/lock-api/src/main/java/com/palantir/lock/client/LockLeaseService.java\n+++ b/lock-api/src/main/java/com/palantir/lock/client/LockLeaseService.java\n\n@@ -46,21 +47,19 @@ import java.util.stream.Collectors;\n class LockLeaseService {\n     private final NamespacedConjureTimelockService delegate;\n     private final UUID clientId;\n-    private final LeaderTimeGetter leaderTimeGetter;\n+    private final CoalescingSupplier<LeaderTime> time;\n     private final BlockEnforcingLockService lockService;\n \n     @VisibleForTesting\n-    LockLeaseService(\n-            NamespacedConjureTimelockService delegate, UUID clientId, Optional<LeaderTimeGetter> leaderTimeGetter) {\n+    LockLeaseService(NamespacedConjureTimelockService delegate, UUID clientId) {\n         this.delegate = delegate;\n         this.clientId = clientId;\n-        this.leaderTimeGetter = leaderTimeGetter.orElseGet(() -> new CoalescingLeaderTimeGetter(delegate));\n+        this.time = new CoalescingSupplier<>(delegate::leaderTime);\n         this.lockService = BlockEnforcingLockService.create(delegate);\n     }\n \n-    static LockLeaseService create(\n-            NamespacedConjureTimelockService conjureTimelock, Optional<LeaderTimeGetter> leaderTimeGetter) {\n-        return new LockLeaseService(conjureTimelock, UUID.randomUUID(), leaderTimeGetter);\n+    static LockLeaseService create(NamespacedConjureTimelockService conjureTimelock) {\n+        return new LockLeaseService(conjureTimelock, UUID.randomUUID());\n     }\n \n     LockImmutableTimestampResponse lockImmutableTimestamp() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc2Mjk4Nw==", "url": "https://github.com/palantir/atlasdb/pull/5120#discussion_r526762987", "bodyText": "I'd add some javadocs here, explaining more precisely how this works, as the difference between this and the \"obvious\" implementation is important and subtle.", "author": "jeremyk-91", "createdAt": "2020-11-19T10:44:59Z", "path": "lock-api/src/main/java/com/palantir/lock/client/NamespacedCoalescingLeaderTimeGetter.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.lock.client;\n+\n+import com.palantir.atlasdb.timelock.api.Namespace;\n+import com.palantir.lock.v2.LeaderTime;\n+\n+public class NamespacedCoalescingLeaderTimeGetter implements LeaderTimeGetter {", "originalCommit": "ef12650d5109e92dcc6002ce1114747950203449", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "97fd2737405c5e748a03d94fc5cac258361c9f5b", "chunk": "diff --git a/lock-api/src/main/java/com/palantir/lock/client/NamespacedCoalescingLeaderTimeGetter.java b/lock-api/src/main/java/com/palantir/lock/client/NamespacedCoalescingLeaderTimeGetter.java\ndeleted file mode 100644\nindex 0f31c7236d..0000000000\n--- a/lock-api/src/main/java/com/palantir/lock/client/NamespacedCoalescingLeaderTimeGetter.java\n+++ /dev/null\n\n@@ -1,40 +0,0 @@\n-/*\n- * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.palantir.lock.client;\n-\n-import com.palantir.atlasdb.timelock.api.Namespace;\n-import com.palantir.lock.v2.LeaderTime;\n-\n-public class NamespacedCoalescingLeaderTimeGetter implements LeaderTimeGetter {\n-    private final LeaderTimeCoalescingBatcher batcher;\n-    private final Namespace namespace;\n-\n-    public NamespacedCoalescingLeaderTimeGetter(String namespace, LeaderTimeCoalescingBatcher batcher) {\n-        this.namespace = Namespace.of(namespace);\n-        this.batcher = batcher;\n-    }\n-\n-    @Override\n-    public LeaderTime leaderTime() {\n-        return batcher.apply(namespace);\n-    }\n-\n-    @Override\n-    public void close() {\n-        batcher.close();\n-    }\n-}\n"}}, {"oid": "97fd2737405c5e748a03d94fc5cac258361c9f5b", "url": "https://github.com/palantir/atlasdb/commit/97fd2737405c5e748a03d94fc5cac258361c9f5b", "message": " Fix tests + remove redundant tests", "committedDate": "2020-11-19T18:21:13Z", "type": "commit"}, {"oid": "b29f21a48ffec3c35777b1052180f02f0aa3a47c", "url": "https://github.com/palantir/atlasdb/commit/b29f21a48ffec3c35777b1052180f02f0aa3a47c", "message": "Refactor LeaderTimeGetter", "committedDate": "2020-11-19T18:22:00Z", "type": "commit"}, {"oid": "c5a9196255c30684aada5e74efe4941b8da31ef5", "url": "https://github.com/palantir/atlasdb/commit/c5a9196255c30684aada5e74efe4941b8da31ef5", "message": "Configurable bufferSize", "committedDate": "2020-11-19T18:22:00Z", "type": "commit"}, {"oid": "66831ceacc4187c2ef4bfad18bcb795343cd38f4", "url": "https://github.com/palantir/atlasdb/commit/66831ceacc4187c2ef4bfad18bcb795343cd38f4", "message": "Implement LeaderTimeCoalescingBatcher", "committedDate": "2020-11-19T18:22:00Z", "type": "commit"}, {"oid": "904a0264e0dfb04a2174a13649c4fe6d6eaafc68", "url": "https://github.com/palantir/atlasdb/commit/904a0264e0dfb04a2174a13649c4fe6d6eaafc68", "message": "Wire LeaderTimeGetter", "committedDate": "2020-11-19T18:22:00Z", "type": "commit"}, {"oid": "e777d72f96808db68a59aee9c4951164ae3b775b", "url": "https://github.com/palantir/atlasdb/commit/e777d72f96808db68a59aee9c4951164ae3b775b", "message": "Fix build", "committedDate": "2020-11-19T18:22:00Z", "type": "commit"}, {"oid": "605cbc3619f4252951b12377397f1a949e1dd998", "url": "https://github.com/palantir/atlasdb/commit/605cbc3619f4252951b12377397f1a949e1dd998", "message": "Address comments", "committedDate": "2020-11-19T18:22:00Z", "type": "commit"}, {"oid": "605cbc3619f4252951b12377397f1a949e1dd998", "url": "https://github.com/palantir/atlasdb/commit/605cbc3619f4252951b12377397f1a949e1dd998", "message": "Address comments", "committedDate": "2020-11-19T18:22:00Z", "type": "forcePushed"}, {"oid": "d66dec83618a44d80b189fb881c489d5f17fc4af", "url": "https://github.com/palantir/atlasdb/commit/d66dec83618a44d80b189fb881c489d5f17fc4af", "message": "Remove redundant line", "committedDate": "2020-11-19T18:26:27Z", "type": "commit"}, {"oid": "b112b32f738970dc78620ba4a2232efa2672ed84", "url": "https://github.com/palantir/atlasdb/commit/b112b32f738970dc78620ba4a2232efa2672ed84", "message": "Fix tests", "committedDate": "2020-11-19T18:45:27Z", "type": "commit"}, {"oid": "35f74badc329dc922c01d66423fd3eeee6e6c0f3", "url": "https://github.com/palantir/atlasdb/commit/35f74badc329dc922c01d66423fd3eeee6e6c0f3", "message": "Add generated changelog entries", "committedDate": "2020-11-19T18:45:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYzMTYzMQ==", "url": "https://github.com/palantir/atlasdb/pull/5120#discussion_r527631631", "bodyText": "nit: I'd just name this bufferSize", "author": "jeremyk-91", "createdAt": "2020-11-20T11:32:55Z", "path": "atlasdb-autobatch/src/main/java/com/palantir/atlasdb/autobatch/Autobatchers.java", "diffHunk": "@@ -88,6 +89,7 @@ private Autobatchers() {}\n         private final ImmutableMap.Builder<String, String> safeTags = ImmutableMap.builder();\n \n         private Observability observability = Observability.UNDECIDED;\n+        private OptionalInt optionalBufferSize = OptionalInt.empty();", "originalCommit": "35f74badc329dc922c01d66423fd3eeee6e6c0f3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7936b9be2c566eb21da78c627ff4da9e750d7d7e", "chunk": "diff --git a/atlasdb-autobatch/src/main/java/com/palantir/atlasdb/autobatch/Autobatchers.java b/atlasdb-autobatch/src/main/java/com/palantir/atlasdb/autobatch/Autobatchers.java\nindex 1ddd08359c..60cb7936e8 100644\n--- a/atlasdb-autobatch/src/main/java/com/palantir/atlasdb/autobatch/Autobatchers.java\n+++ b/atlasdb-autobatch/src/main/java/com/palantir/atlasdb/autobatch/Autobatchers.java\n\n@@ -89,7 +89,7 @@ public final class Autobatchers {\n         private final ImmutableMap.Builder<String, String> safeTags = ImmutableMap.builder();\n \n         private Observability observability = Observability.UNDECIDED;\n-        private OptionalInt optionalBufferSize = OptionalInt.empty();\n+        private OptionalInt bufferSize = OptionalInt.empty();\n \n         @Nullable\n         private String purpose;\n"}}, {"oid": "7936b9be2c566eb21da78c627ff4da9e750d7d7e", "url": "https://github.com/palantir/atlasdb/commit/7936b9be2c566eb21da78c627ff4da9e750d7d7e", "message": "Fix nits", "committedDate": "2020-11-20T12:13:28Z", "type": "commit"}]}