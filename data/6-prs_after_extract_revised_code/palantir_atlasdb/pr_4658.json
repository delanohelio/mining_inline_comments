{"pr_number": 4658, "pr_title": "[PDS-111849] Trace Parts of AwaitingLeadershipProxy", "pr_createdAt": "2020-03-19T21:06:05Z", "pr_url": "https://github.com/palantir/atlasdb/pull/4658", "timeline": [{"oid": "8c061ce09b1d08d1ecc1c5132faba46d87a4c22f", "url": "https://github.com/palantir/atlasdb/commit/8c061ce09b1d08d1ecc1c5132faba46d87a4c22f", "message": "Trace parts of AwaitingLeadershipProxy.", "committedDate": "2020-03-19T20:59:44Z", "type": "commit"}, {"oid": "c9892b7c057c5c3d482f2d03998c49dfb47f844d", "url": "https://github.com/palantir/atlasdb/commit/c9892b7c057c5c3d482f2d03998c49dfb47f844d", "message": "Add generated changelog entries", "committedDate": "2020-03-19T20:59:44Z", "type": "commit"}, {"oid": "c7a39841e16187f1796e0cbff11fe01384c6b66d", "url": "https://github.com/palantir/atlasdb/commit/c7a39841e16187f1796e0cbff11fe01384c6b66d", "message": "Tracing tests and fix", "committedDate": "2020-03-20T15:29:51Z", "type": "commit"}, {"oid": "c637ccabcf128ca8149a7176eddea495caae9aa1", "url": "https://github.com/palantir/atlasdb/commit/c637ccabcf128ca8149a7176eddea495caae9aa1", "message": "Merge branch 'jkong/tracing' of github.com:palantir/atlasdb into jkong/tracing", "committedDate": "2020-03-20T18:55:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3MjEwNQ==", "url": "https://github.com/palantir/atlasdb/pull/4658#discussion_r396472105", "bodyText": "do we want one on each invocation that it retries?", "author": "felixdesouza", "createdAt": "2020-03-23T14:00:56Z", "path": "leader-election-impl/src/main/java/com/palantir/leader/proxy/AwaitingLeadershipProxy.java", "diffHunk": "@@ -214,7 +218,8 @@ protected Object handleInvocation(Object proxy, Method method, Object[] args) th\n         Object maybeValidDelegate = delegateRef.get();\n \n         ListenableFuture<StillLeadingStatus> leadingFuture =\n-                statusRetrier.execute(() -> leaderElectionService.isStillLeading(leadershipToken));\n+                Tracers.wrapListenableFuture(\"validate-leadership\",", "originalCommit": "c637ccabcf128ca8149a7176eddea495caae9aa1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3Mjk3NA==", "url": "https://github.com/palantir/atlasdb/pull/4658#discussion_r396472974", "bodyText": "this would still remain as the overall trace for the validate-leadership portion, but I imagine that each invocation inside statusRetrier should be wrapped in one where it's like validate-leadership attempt 0 etc.", "author": "felixdesouza", "createdAt": "2020-03-23T14:02:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3MjEwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU3ODQ2NA==", "url": "https://github.com/palantir/atlasdb/pull/4658#discussion_r396578464", "bodyText": "Yeah, I think this makes sense. Extracting the attempt numbers is a bit messy, but I've rewritten this so there are validate-leadership-attempt traces there.", "author": "jeremyk-91", "createdAt": "2020-03-23T16:20:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3MjEwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA3MzQ3NA==", "url": "https://github.com/palantir/atlasdb/pull/4658#discussion_r397073474", "bodyText": "fair enough, not strictly necessary tbf", "author": "felixdesouza", "createdAt": "2020-03-24T11:13:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3MjEwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "60cfa5a850b69129dfc71d2011b60b52c55e52c8", "chunk": "diff --git a/leader-election-impl/src/main/java/com/palantir/leader/proxy/AwaitingLeadershipProxy.java b/leader-election-impl/src/main/java/com/palantir/leader/proxy/AwaitingLeadershipProxy.java\nindex 83601494ce..6c46f3c956 100644\n--- a/leader-election-impl/src/main/java/com/palantir/leader/proxy/AwaitingLeadershipProxy.java\n+++ b/leader-election-impl/src/main/java/com/palantir/leader/proxy/AwaitingLeadershipProxy.java\n\n@@ -219,7 +219,9 @@ public final class AwaitingLeadershipProxy<T> extends AbstractInvocationHandler\n \n         ListenableFuture<StillLeadingStatus> leadingFuture =\n                 Tracers.wrapListenableFuture(\"validate-leadership\",\n-                        () -> statusRetrier.execute(() -> leaderElectionService.isStillLeading(leadershipToken)));\n+                        () -> statusRetrier.execute(\n+                                () -> Tracers.wrapListenableFuture(\"validate-leadership-attempt\",\n+                                        () -> leaderElectionService.isStillLeading(leadershipToken))));\n \n         ListenableFuture<Object> delegateFuture = Futures.transform(leadingFuture,\n                 leading -> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3NDYyMA==", "url": "https://github.com/palantir/atlasdb/pull/4658#discussion_r396474620", "bodyText": "do you think it's worth doing the golden master thing? my proposal is that it could be, because this codepath is fragile, and we want to make sure that we're not undoing any async work as a result by accident (which is quite hard to test atm). Perhaps we don't need it for this PR, but it's something I've been thinking about with all the partitioning/perf work i.e. how do we avoid regressing things that aren't easily tested?", "author": "felixdesouza", "createdAt": "2020-03-23T14:04:35Z", "path": "leader-election-impl/src/test/java/com/palantir/leader/proxy/AwaitingLeadershipProxyTest.java", "diffHunk": "@@ -64,6 +65,9 @@\n \n     @Rule public final ExpectedException expect = ExpectedException.none();\n \n+    @Rule\n+    public final RenderTracingRule rule = new RenderTracingRule();", "originalCommit": "c637ccabcf128ca8149a7176eddea495caae9aa1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyODM3OA==", "url": "https://github.com/palantir/atlasdb/pull/4658#discussion_r396628378", "bodyText": "I'd like to, but we need to migrate to JUnit 5 for that which may prove to be messy. Probably worth tracking in internal tracking engine?", "author": "jeremyk-91", "createdAt": "2020-03-23T17:30:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3NDYyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4Mzg5MQ==", "url": "https://github.com/palantir/atlasdb/pull/4658#discussion_r397083891", "bodyText": "you needn't migrate big bang, that'd be way too much effort, could be a similar policy to assertj i.e. use it moving forward etc. or just for this rule if we think it has value", "author": "felixdesouza", "createdAt": "2020-03-24T11:32:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3NDYyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE1MzkyMg==", "url": "https://github.com/palantir/atlasdb/pull/4658#discussion_r397153922", "bodyText": "The issue was more bumping the Guava dependency, though we checked internally and determined that this was almost certainly acceptable.", "author": "jeremyk-91", "createdAt": "2020-03-24T13:32:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3NDYyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE5Mjk4NA==", "url": "https://github.com/palantir/atlasdb/pull/4658#discussion_r397192984", "bodyText": "Turns out this causes more problems than expected because e.g. of dev breaks within this codebase, so not proceeding with this right now.", "author": "jeremyk-91", "createdAt": "2020-03-24T14:25:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3NDYyMA=="}], "type": "inlineReview", "revised_code": {"commit": "140677eaeec52c28fce04a0201a9d5b75c5d87ae", "chunk": "diff --git a/leader-election-impl/src/test/java/com/palantir/leader/proxy/AwaitingLeadershipProxyTest.java b/leader-election-impl/src/test/java/com/palantir/leader/proxy/AwaitingLeadershipProxyTest.java\nindex 658dba31fc..7baff8d909 100644\n--- a/leader-election-impl/src/test/java/com/palantir/leader/proxy/AwaitingLeadershipProxyTest.java\n+++ b/leader-election-impl/src/test/java/com/palantir/leader/proxy/AwaitingLeadershipProxyTest.java\n\n@@ -63,13 +60,8 @@ public class AwaitingLeadershipProxyTest {\n     private final Runnable mockRunnable = mock(Runnable.class);\n     private final Supplier<Runnable> delegateSupplier = Suppliers.ofInstance(mockRunnable);\n \n-    @Rule public final ExpectedException expect = ExpectedException.none();\n-\n-    @Rule\n-    public final RenderTracingRule rule = new RenderTracingRule();\n-\n-    @Before\n-    public void before() throws InterruptedException {\n+    @BeforeEach\n+    void before() throws InterruptedException {\n         when(leaderElectionService.blockOnBecomingLeader()).thenReturn(leadershipToken);\n         when(leaderElectionService.getCurrentTokenIfLeading()).thenReturn(Optional.empty());\n         when(leaderElectionService.isStillLeading(leadershipToken)).thenReturn(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3NjQwNw==", "url": "https://github.com/palantir/atlasdb/pull/4658#discussion_r396476407", "bodyText": "Do we not want to handle the IAE below? not that I think it'll come up that often, I don't think we handled it previously anyway, but seems a bit odd, and it'll come out as a 500 iirc.", "author": "felixdesouza", "createdAt": "2020-03-23T14:07:20Z", "path": "leader-election-impl/src/main/java/com/palantir/leader/proxy/AwaitingLeadershipProxy.java", "diffHunk": "@@ -234,14 +239,21 @@ protected Object handleInvocation(Object proxy, Method method, Object[] args) th\n \n         if (!method.getReturnType().equals(ListenableFuture.class)) {\n             Object delegate = AtlasFutures.getUnchecked(delegateFuture);\n-            try {\n+            try (CloseableTracer ignored = CloseableTracer.startSpan(\"execute-on-delegate\")) {\n                 return method.invoke(delegate, args);\n             } catch (InvocationTargetException e) {\n                 throw handleDelegateThrewException(leadershipToken, e);\n             }\n         } else {\n             return FluentFuture.from(delegateFuture)\n-                    .transformAsync(delegate -> (ListenableFuture<Object>) method.invoke(delegate, args),\n+                    .transformAsync(delegate ->\n+                                    Tracers.wrapListenableFuture(\"execute-on-delegate-async\", () -> {\n+                                        try {\n+                                            return (ListenableFuture<Object>) method.invoke(delegate, args);\n+                                        } catch (IllegalAccessException | InvocationTargetException e) {\n+                                            return Futures.immediateFailedFuture(e);", "originalCommit": "c637ccabcf128ca8149a7176eddea495caae9aa1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyODk4Ng==", "url": "https://github.com/palantir/atlasdb/pull/4658#discussion_r396628986", "bodyText": "Yeah, I think it comes out as a 500. How do you think we should handle it? It shouldn't happen unless something is genuinely wrong server-side so I wouldn't be opposed to a 500. Maybe we should log something?", "author": "jeremyk-91", "createdAt": "2020-03-23T17:30:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3NjQwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4NDQxMg==", "url": "https://github.com/palantir/atlasdb/pull/4658#discussion_r397084412", "bodyText": "unclear, if it's unhandled before, and we haven't really seen instances of it, I'll leave it up to you if you want to change it, it just caught my eye with the try-catch in the new diff but was surprised it was missing from the old diff, not fussed either way", "author": "felixdesouza", "createdAt": "2020-03-24T11:33:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3NjQwNw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "60cfa5a850b69129dfc71d2011b60b52c55e52c8", "url": "https://github.com/palantir/atlasdb/commit/60cfa5a850b69129dfc71d2011b60b52c55e52c8", "message": "Trace individual attempts.", "committedDate": "2020-03-23T17:21:44Z", "type": "commit"}, {"oid": "a38d8118a2cf90c7bc56846272266a72c28ea1e8", "url": "https://github.com/palantir/atlasdb/commit/a38d8118a2cf90c7bc56846272266a72c28ea1e8", "message": "baseline", "committedDate": "2020-03-23T17:31:22Z", "type": "commit"}, {"oid": "140677eaeec52c28fce04a0201a9d5b75c5d87ae", "url": "https://github.com/palantir/atlasdb/commit/140677eaeec52c28fce04a0201a9d5b75c5d87ae", "message": "sad", "committedDate": "2020-03-24T10:03:48Z", "type": "commit"}, {"oid": "b30c9babf11c93ea96de2bdfba31e401ed2fbb89", "url": "https://github.com/palantir/atlasdb/commit/b30c9babf11c93ea96de2bdfba31e401ed2fbb89", "message": "Test tracing", "committedDate": "2020-03-24T13:48:08Z", "type": "commit"}, {"oid": "d3f7386bbf32c1b89e18b0bce97f4965febac858", "url": "https://github.com/palantir/atlasdb/commit/d3f7386bbf32c1b89e18b0bce97f4965febac858", "message": "Golden traces", "committedDate": "2020-03-24T13:49:23Z", "type": "commit"}, {"oid": "384dfba64540e2000f8ab6d21ecbf0795c77a197", "url": "https://github.com/palantir/atlasdb/commit/384dfba64540e2000f8ab6d21ecbf0795c77a197", "message": "Revert \"Golden traces\"\n\nThis reverts commit d3f7386bbf32c1b89e18b0bce97f4965febac858.", "committedDate": "2020-03-24T14:26:03Z", "type": "commit"}, {"oid": "1f85cdab15a3d6d8196abdfadd7794c48b361d88", "url": "https://github.com/palantir/atlasdb/commit/1f85cdab15a3d6d8196abdfadd7794c48b361d88", "message": "Revert \"Test tracing\"\n\nThis reverts commit b30c9babf11c93ea96de2bdfba31e401ed2fbb89.", "committedDate": "2020-03-24T14:26:09Z", "type": "commit"}, {"oid": "3fd6cd7ebe8fd22858e7d14122971df647725d59", "url": "https://github.com/palantir/atlasdb/commit/3fd6cd7ebe8fd22858e7d14122971df647725d59", "message": "Revert \"sad\"\n\nThis reverts commit 140677eaeec52c28fce04a0201a9d5b75c5d87ae.", "committedDate": "2020-03-24T14:26:15Z", "type": "commit"}]}