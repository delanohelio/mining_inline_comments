{"pr_number": 4541, "pr_title": "Fix coalescing supplier", "pr_createdAt": "2020-01-28T10:36:15Z", "pr_url": "https://github.com/palantir/atlasdb/pull/4541", "timeline": [{"oid": "7e600b759ee8c469198e394d2970c9bb065c2837", "url": "https://github.com/palantir/atlasdb/commit/7e600b759ee8c469198e394d2970c9bb065c2837", "message": "Fix coalescing supplier\n\nLet's just take out a lock - and write a test that covers it. It's more\nobviously correct.", "committedDate": "2020-01-28T10:35:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcyNDI5Nw==", "url": "https://github.com/palantir/atlasdb/pull/4541#discussion_r371724297", "bodyText": "this is an uncontended lock except in the case of the bug.", "author": "j-baker", "createdAt": "2020-01-28T10:36:29Z", "path": "atlasdb-commons/src/main/java/com/palantir/common/concurrent/CoalescingSupplier.java", "diffHunk": "@@ -69,13 +71,15 @@ Round awaitDone() {\n         }\n \n         void execute() {\n-            next = new Round();\n-            try {\n-                future.complete(delegate.get());\n-            } catch (Throwable t) {\n-                future.completeExceptionally(t);\n+            synchronized (lock) {", "originalCommit": "7e600b759ee8c469198e394d2970c9bb065c2837", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d9ae98013bbda1e3e1f63c7a965cda5d86c3ed39", "chunk": "diff --git a/atlasdb-commons/src/main/java/com/palantir/common/concurrent/CoalescingSupplier.java b/atlasdb-commons/src/main/java/com/palantir/common/concurrent/CoalescingSupplier.java\nindex 49826d47ff..8190db8528 100644\n--- a/atlasdb-commons/src/main/java/com/palantir/common/concurrent/CoalescingSupplier.java\n+++ b/atlasdb-commons/src/main/java/com/palantir/common/concurrent/CoalescingSupplier.java\n\n@@ -63,29 +65,38 @@ public class CoalescingSupplier<T> implements Supplier<T> {\n \n         Round awaitDone() {\n             try {\n-                future.join();\n-            } catch (CompletionException e) {\n+                future.get();\n+            } catch (InterruptedException e) {\n+                Thread.currentThread().interrupt();\n+                throw new RuntimeException(e);\n+            } catch (ExecutionException e) {\n                 // ignore\n             }\n             return next;\n         }\n \n         void execute() {\n-            synchronized (lock) {\n-                next = new Round();\n-                try {\n-                    future.complete(delegate.get());\n-                } catch (Throwable t) {\n-                    future.completeExceptionally(t);\n-                }\n-                round = next;\n+            next = new Round();\n+            ListenableFuture<T> result = compute();\n+            round = next;\n+            future.setFuture(result);\n+        }\n+\n+        private ListenableFuture<T> compute() {\n+            try {\n+                return Futures.immediateFuture(delegate.get());\n+            } catch (Throwable t) {\n+                return Futures.immediateFailedFuture(t);\n             }\n         }\n \n         T getResult() {\n             try {\n-                return future.join();\n-            } catch (CompletionException e) {\n+                return future.get();\n+            } catch (InterruptedException e) {\n+                Thread.currentThread().interrupt();\n+                throw new RuntimeException(e);\n+            } catch (ExecutionException e) {\n                 throw Throwables.propagate(e.getCause());\n             }\n         }\n"}}, {"oid": "4bcc3c45234d9cc59c8da2ec9b52dc4283cd764b", "url": "https://github.com/palantir/atlasdb/commit/4bcc3c45234d9cc59c8da2ec9b52dc4283cd764b", "message": "Refactor", "committedDate": "2020-01-28T10:39:17Z", "type": "commit"}, {"oid": "d9ae98013bbda1e3e1f63c7a965cda5d86c3ed39", "url": "https://github.com/palantir/atlasdb/commit/d9ae98013bbda1e3e1f63c7a965cda5d86c3ed39", "message": "Refactor fix", "committedDate": "2020-01-28T10:48:11Z", "type": "commit"}, {"oid": "d9ae98013bbda1e3e1f63c7a965cda5d86c3ed39", "url": "https://github.com/palantir/atlasdb/commit/d9ae98013bbda1e3e1f63c7a965cda5d86c3ed39", "message": "Refactor fix", "committedDate": "2020-01-28T10:48:11Z", "type": "forcePushed"}, {"oid": "3f56939f08d85d0340d7ba5518e0f7d450b87160", "url": "https://github.com/palantir/atlasdb/commit/3f56939f08d85d0340d7ba5518e0f7d450b87160", "message": "remove lock", "committedDate": "2020-01-28T11:08:35Z", "type": "commit"}, {"oid": "58e7e9cbb4dfd379425cdfe2e5c273d536cbd17b", "url": "https://github.com/palantir/atlasdb/commit/58e7e9cbb4dfd379425cdfe2e5c273d536cbd17b", "message": "Add generated changelog entries", "committedDate": "2020-01-28T11:08:35Z", "type": "commit"}, {"oid": "9979f2c1053beef26de520a3b09e88bf87554e10", "url": "https://github.com/palantir/atlasdb/commit/9979f2c1053beef26de520a3b09e88bf87554e10", "message": "Add generated changelog entries", "committedDate": "2020-01-28T11:08:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc0Nzk4Mg==", "url": "https://github.com/palantir/atlasdb/pull/4541#discussion_r371747982", "bodyText": "This is neat!", "author": "gmaretic", "createdAt": "2020-01-28T11:29:36Z", "path": "atlasdb-commons/src/test/java/com/palantir/common/concurrent/CoalescingSupplierTest.java", "diffHunk": "@@ -114,6 +121,41 @@ public void exceptionsArePropagatedForCoalescedCalls() {\n         tasks.assertAllFailed(expected);\n     }\n \n+    @Test\n+    public void stressTest() {\n+        int poolSize = 1024;\n+        ListeningExecutorService executorService =\n+                MoreExecutors.listeningDecorator(PTExecutors.newFixedThreadPool(poolSize));\n+        AtomicLong counter = new AtomicLong(0);\n+        Supplier<Long> supplier = new CoalescingSupplier<>(() -> {\n+            sleep(2);\n+            return counter.incrementAndGet();\n+        });\n+        List<ListenableFuture<?>> futures = IntStream.range(0, poolSize)\n+                .mapToObj(index -> executorService.submit(() -> assertIncreasing(supplier)))", "originalCommit": "9979f2c1053beef26de520a3b09e88bf87554e10", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}