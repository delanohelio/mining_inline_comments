{"pr_number": 4993, "pr_title": "Remote history resource", "pr_createdAt": "2020-09-22T14:02:54Z", "pr_url": "https://github.com/palantir/atlasdb/pull/4993", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk3NTg0OA==", "url": "https://github.com/palantir/atlasdb/pull/4993#discussion_r492975848", "bodyText": "nit: This is fine, but have a look at the documentation of get().", "author": "jeremyk-91", "createdAt": "2020-09-22T19:17:30Z", "path": "timelock-corruption-detection/src/main/java/com/palantir/history/models/LearnerAndAcceptorRecords.java", "diffHunk": "@@ -31,4 +33,34 @@\n \n     @Value.Parameter\n     Map<Long, PaxosAcceptorState> acceptorRecords();\n+\n+    default Optional<PaxosValue> getLearnedValueAtSeqIfExists(long seq) {\n+        return Optional.ofNullable(learnerRecords().getOrDefault(seq, null));", "originalCommit": "823dd176550db19f4740b1993a2953978d928b57", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74ed0dee8c39ab27c1a1809c48957007d992c590", "chunk": "diff --git a/timelock-corruption-detection/src/main/java/com/palantir/history/models/LearnerAndAcceptorRecords.java b/timelock-corruption-detection/src/main/java/com/palantir/history/models/LearnerAndAcceptorRecords.java\nindex 5ad00227a1..98699cd3c6 100644\n--- a/timelock-corruption-detection/src/main/java/com/palantir/history/models/LearnerAndAcceptorRecords.java\n+++ b/timelock-corruption-detection/src/main/java/com/palantir/history/models/LearnerAndAcceptorRecords.java\n\n@@ -33,34 +31,4 @@ public interface LearnerAndAcceptorRecords {\n \n     @Value.Parameter\n     Map<Long, PaxosAcceptorState> acceptorRecords();\n-\n-    default Optional<PaxosValue> getLearnedValueAtSeqIfExists(long seq) {\n-        return Optional.ofNullable(learnerRecords().getOrDefault(seq, null));\n-    }\n-\n-    default Optional<PaxosAcceptorState> getAcceptedValueAtSeqIfExists(long seq) {\n-        return Optional.ofNullable(acceptorRecords().getOrDefault(seq, null));\n-    }\n-\n-    default long getMinSequence() {\n-        long minSeq = Long.MAX_VALUE;\n-        if (!learnerRecords().isEmpty()) {\n-            minSeq = Math.min(minSeq, Collections.min(learnerRecords().keySet()));\n-        }\n-        if (!acceptorRecords().isEmpty()) {\n-            minSeq = Math.min(minSeq, Collections.min(acceptorRecords().keySet()));\n-        }\n-        return minSeq;\n-    }\n-\n-    default long getMaxSequence() {\n-        long maxSeq = Long.MIN_VALUE;\n-        if (!learnerRecords().isEmpty()) {\n-            maxSeq = Math.max(maxSeq, Collections.max(learnerRecords().keySet()));\n-        }\n-        if (!acceptorRecords().isEmpty()) {\n-            maxSeq = Math.max(maxSeq, Collections.max(acceptorRecords().keySet()));\n-        }\n-        return maxSeq;\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk3Njc5NQ==", "url": "https://github.com/palantir/atlasdb/pull/4993#discussion_r492976795", "bodyText": "Yeah, I think this function is correct, though this is maybe a bit neater?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    long minSeq = Long.MAX_VALUE;\n          \n          \n            \n                    if (!learnerRecords().isEmpty()) {\n          \n          \n            \n                        minSeq = Math.min(minSeq, Collections.min(learnerRecords().keySet()));\n          \n          \n            \n                    }\n          \n          \n            \n                    if (!acceptorRecords().isEmpty()) {\n          \n          \n            \n                        minSeq = Math.min(minSeq, Collections.min(acceptorRecords().keySet()));\n          \n          \n            \n                    }\n          \n          \n            \n                    return minSeq;\n          \n          \n            \n                    return Stream.of(learnerRecords(), acceptorRecords())\n          \n          \n            \n                            .map(Map::keySet)\n          \n          \n            \n                            .flatMap(Set::stream)\n          \n          \n            \n                            .min(Comparator.naturalOrder())\n          \n          \n            \n                            .orElse(Long.MAX_VALUE);", "author": "jeremyk-91", "createdAt": "2020-09-22T19:19:12Z", "path": "timelock-corruption-detection/src/main/java/com/palantir/history/models/LearnerAndAcceptorRecords.java", "diffHunk": "@@ -31,4 +33,34 @@\n \n     @Value.Parameter\n     Map<Long, PaxosAcceptorState> acceptorRecords();\n+\n+    default Optional<PaxosValue> getLearnedValueAtSeqIfExists(long seq) {\n+        return Optional.ofNullable(learnerRecords().getOrDefault(seq, null));\n+    }\n+\n+    default Optional<PaxosAcceptorState> getAcceptedValueAtSeqIfExists(long seq) {\n+        return Optional.ofNullable(acceptorRecords().getOrDefault(seq, null));\n+    }\n+\n+    default long getMinSequence() {\n+        long minSeq = Long.MAX_VALUE;\n+        if (!learnerRecords().isEmpty()) {\n+            minSeq = Math.min(minSeq, Collections.min(learnerRecords().keySet()));\n+        }\n+        if (!acceptorRecords().isEmpty()) {\n+            minSeq = Math.min(minSeq, Collections.min(acceptorRecords().keySet()));\n+        }\n+        return minSeq;", "originalCommit": "823dd176550db19f4740b1993a2953978d928b57", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74ed0dee8c39ab27c1a1809c48957007d992c590", "chunk": "diff --git a/timelock-corruption-detection/src/main/java/com/palantir/history/models/LearnerAndAcceptorRecords.java b/timelock-corruption-detection/src/main/java/com/palantir/history/models/LearnerAndAcceptorRecords.java\nindex 5ad00227a1..98699cd3c6 100644\n--- a/timelock-corruption-detection/src/main/java/com/palantir/history/models/LearnerAndAcceptorRecords.java\n+++ b/timelock-corruption-detection/src/main/java/com/palantir/history/models/LearnerAndAcceptorRecords.java\n\n@@ -33,34 +31,4 @@ public interface LearnerAndAcceptorRecords {\n \n     @Value.Parameter\n     Map<Long, PaxosAcceptorState> acceptorRecords();\n-\n-    default Optional<PaxosValue> getLearnedValueAtSeqIfExists(long seq) {\n-        return Optional.ofNullable(learnerRecords().getOrDefault(seq, null));\n-    }\n-\n-    default Optional<PaxosAcceptorState> getAcceptedValueAtSeqIfExists(long seq) {\n-        return Optional.ofNullable(acceptorRecords().getOrDefault(seq, null));\n-    }\n-\n-    default long getMinSequence() {\n-        long minSeq = Long.MAX_VALUE;\n-        if (!learnerRecords().isEmpty()) {\n-            minSeq = Math.min(minSeq, Collections.min(learnerRecords().keySet()));\n-        }\n-        if (!acceptorRecords().isEmpty()) {\n-            minSeq = Math.min(minSeq, Collections.min(acceptorRecords().keySet()));\n-        }\n-        return minSeq;\n-    }\n-\n-    default long getMaxSequence() {\n-        long maxSeq = Long.MIN_VALUE;\n-        if (!learnerRecords().isEmpty()) {\n-            maxSeq = Math.max(maxSeq, Collections.max(learnerRecords().keySet()));\n-        }\n-        if (!acceptorRecords().isEmpty()) {\n-            maxSeq = Math.max(maxSeq, Collections.max(acceptorRecords().keySet()));\n-        }\n-        return maxSeq;\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk3NzEzMg==", "url": "https://github.com/palantir/atlasdb/pull/4993#discussion_r492977132", "bodyText": "Looks like this could be @Value.Lazy", "author": "jeremyk-91", "createdAt": "2020-09-22T19:19:46Z", "path": "timelock-corruption-detection/src/main/java/com/palantir/history/models/LearnerAndAcceptorRecords.java", "diffHunk": "@@ -31,4 +33,34 @@\n \n     @Value.Parameter\n     Map<Long, PaxosAcceptorState> acceptorRecords();\n+\n+    default Optional<PaxosValue> getLearnedValueAtSeqIfExists(long seq) {\n+        return Optional.ofNullable(learnerRecords().getOrDefault(seq, null));\n+    }\n+\n+    default Optional<PaxosAcceptorState> getAcceptedValueAtSeqIfExists(long seq) {\n+        return Optional.ofNullable(acceptorRecords().getOrDefault(seq, null));\n+    }\n+\n+    default long getMinSequence() {", "originalCommit": "823dd176550db19f4740b1993a2953978d928b57", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74ed0dee8c39ab27c1a1809c48957007d992c590", "chunk": "diff --git a/timelock-corruption-detection/src/main/java/com/palantir/history/models/LearnerAndAcceptorRecords.java b/timelock-corruption-detection/src/main/java/com/palantir/history/models/LearnerAndAcceptorRecords.java\nindex 5ad00227a1..98699cd3c6 100644\n--- a/timelock-corruption-detection/src/main/java/com/palantir/history/models/LearnerAndAcceptorRecords.java\n+++ b/timelock-corruption-detection/src/main/java/com/palantir/history/models/LearnerAndAcceptorRecords.java\n\n@@ -33,34 +31,4 @@ public interface LearnerAndAcceptorRecords {\n \n     @Value.Parameter\n     Map<Long, PaxosAcceptorState> acceptorRecords();\n-\n-    default Optional<PaxosValue> getLearnedValueAtSeqIfExists(long seq) {\n-        return Optional.ofNullable(learnerRecords().getOrDefault(seq, null));\n-    }\n-\n-    default Optional<PaxosAcceptorState> getAcceptedValueAtSeqIfExists(long seq) {\n-        return Optional.ofNullable(acceptorRecords().getOrDefault(seq, null));\n-    }\n-\n-    default long getMinSequence() {\n-        long minSeq = Long.MAX_VALUE;\n-        if (!learnerRecords().isEmpty()) {\n-            minSeq = Math.min(minSeq, Collections.min(learnerRecords().keySet()));\n-        }\n-        if (!acceptorRecords().isEmpty()) {\n-            minSeq = Math.min(minSeq, Collections.min(acceptorRecords().keySet()));\n-        }\n-        return minSeq;\n-    }\n-\n-    default long getMaxSequence() {\n-        long maxSeq = Long.MIN_VALUE;\n-        if (!learnerRecords().isEmpty()) {\n-            maxSeq = Math.max(maxSeq, Collections.max(learnerRecords().keySet()));\n-        }\n-        if (!acceptorRecords().isEmpty()) {\n-            maxSeq = Math.max(maxSeq, Collections.max(acceptorRecords().keySet()));\n-        }\n-        return maxSeq;\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk3NzMwMg==", "url": "https://github.com/palantir/atlasdb/pull/4993#discussion_r492977302", "bodyText": "as above, I don't know if we want to cache the value for recomputations, and I think streams give an easier pipeline.", "author": "jeremyk-91", "createdAt": "2020-09-22T19:20:04Z", "path": "timelock-corruption-detection/src/main/java/com/palantir/history/models/LearnerAndAcceptorRecords.java", "diffHunk": "@@ -31,4 +33,34 @@\n \n     @Value.Parameter\n     Map<Long, PaxosAcceptorState> acceptorRecords();\n+\n+    default Optional<PaxosValue> getLearnedValueAtSeqIfExists(long seq) {\n+        return Optional.ofNullable(learnerRecords().getOrDefault(seq, null));\n+    }\n+\n+    default Optional<PaxosAcceptorState> getAcceptedValueAtSeqIfExists(long seq) {\n+        return Optional.ofNullable(acceptorRecords().getOrDefault(seq, null));\n+    }\n+\n+    default long getMinSequence() {\n+        long minSeq = Long.MAX_VALUE;\n+        if (!learnerRecords().isEmpty()) {\n+            minSeq = Math.min(minSeq, Collections.min(learnerRecords().keySet()));\n+        }\n+        if (!acceptorRecords().isEmpty()) {\n+            minSeq = Math.min(minSeq, Collections.min(acceptorRecords().keySet()));\n+        }\n+        return minSeq;\n+    }\n+\n+    default long getMaxSequence() {\n+        long maxSeq = Long.MIN_VALUE;\n+        if (!learnerRecords().isEmpty()) {\n+            maxSeq = Math.max(maxSeq, Collections.max(learnerRecords().keySet()));\n+        }\n+        if (!acceptorRecords().isEmpty()) {\n+            maxSeq = Math.max(maxSeq, Collections.max(acceptorRecords().keySet()));\n+        }\n+        return maxSeq;", "originalCommit": "823dd176550db19f4740b1993a2953978d928b57", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74ed0dee8c39ab27c1a1809c48957007d992c590", "chunk": "diff --git a/timelock-corruption-detection/src/main/java/com/palantir/history/models/LearnerAndAcceptorRecords.java b/timelock-corruption-detection/src/main/java/com/palantir/history/models/LearnerAndAcceptorRecords.java\nindex 5ad00227a1..98699cd3c6 100644\n--- a/timelock-corruption-detection/src/main/java/com/palantir/history/models/LearnerAndAcceptorRecords.java\n+++ b/timelock-corruption-detection/src/main/java/com/palantir/history/models/LearnerAndAcceptorRecords.java\n\n@@ -33,34 +31,4 @@ public interface LearnerAndAcceptorRecords {\n \n     @Value.Parameter\n     Map<Long, PaxosAcceptorState> acceptorRecords();\n-\n-    default Optional<PaxosValue> getLearnedValueAtSeqIfExists(long seq) {\n-        return Optional.ofNullable(learnerRecords().getOrDefault(seq, null));\n-    }\n-\n-    default Optional<PaxosAcceptorState> getAcceptedValueAtSeqIfExists(long seq) {\n-        return Optional.ofNullable(acceptorRecords().getOrDefault(seq, null));\n-    }\n-\n-    default long getMinSequence() {\n-        long minSeq = Long.MAX_VALUE;\n-        if (!learnerRecords().isEmpty()) {\n-            minSeq = Math.min(minSeq, Collections.min(learnerRecords().keySet()));\n-        }\n-        if (!acceptorRecords().isEmpty()) {\n-            minSeq = Math.min(minSeq, Collections.min(acceptorRecords().keySet()));\n-        }\n-        return minSeq;\n-    }\n-\n-    default long getMaxSequence() {\n-        long maxSeq = Long.MIN_VALUE;\n-        if (!learnerRecords().isEmpty()) {\n-            maxSeq = Math.max(maxSeq, Collections.max(learnerRecords().keySet()));\n-        }\n-        if (!acceptorRecords().isEmpty()) {\n-            maxSeq = Math.max(maxSeq, Collections.max(acceptorRecords().keySet()));\n-        }\n-        return maxSeq;\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk3ODIyMw==", "url": "https://github.com/palantir/atlasdb/pull/4993#discussion_r492978223", "bodyText": "nice!", "author": "jeremyk-91", "createdAt": "2020-09-22T19:21:52Z", "path": "timelock-corruption-detection/src/main/java/com/palantir/history/remote/HistoryLoaderAndTransformer.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history.remote;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.LongStream;\n+\n+import com.google.common.collect.Maps;\n+import com.palantir.common.streams.KeyedStream;\n+import com.palantir.history.LocalHistoryLoader;\n+import com.palantir.history.models.LearnerAndAcceptorRecords;\n+import com.palantir.history.models.PaxosHistoryOnSingleNode;\n+import com.palantir.paxos.NamespaceAndUseCase;\n+import com.palantir.timelock.history.HistoryQuery;\n+import com.palantir.timelock.history.LogsForNamespaceAndUseCase;\n+import com.palantir.timelock.history.PaxosLogWithAcceptedAndLearnedValues;\n+\n+public final class HistoryLoaderAndTransformer {\n+    private HistoryLoaderAndTransformer() {\n+        //no op\n+    }\n+\n+    public static List<LogsForNamespaceAndUseCase> getLogsForHistoryQueries(LocalHistoryLoader localHistoryLoader,\n+            List<HistoryQuery> historyQueries) {\n+        Map<NamespaceAndUseCase, Long> lastVerifiedSequences = historyQueries.stream().collect(\n+                Collectors.toMap(HistoryQuery::getNamespaceAndUseCase, HistoryQuery::getSeq, Math::min));", "originalCommit": "823dd176550db19f4740b1993a2953978d928b57", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74ed0dee8c39ab27c1a1809c48957007d992c590", "chunk": "diff --git a/timelock-corruption-detection/src/main/java/com/palantir/history/remote/HistoryLoaderAndTransformer.java b/timelock-corruption-detection/src/main/java/com/palantir/history/remote/HistoryLoaderAndTransformer.java\ndeleted file mode 100644\nindex 1866f81f83..0000000000\n--- a/timelock-corruption-detection/src/main/java/com/palantir/history/remote/HistoryLoaderAndTransformer.java\n+++ /dev/null\n\n@@ -1,67 +0,0 @@\n-/*\n- * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.palantir.history.remote;\n-\n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-import java.util.stream.LongStream;\n-\n-import com.google.common.collect.Maps;\n-import com.palantir.common.streams.KeyedStream;\n-import com.palantir.history.LocalHistoryLoader;\n-import com.palantir.history.models.LearnerAndAcceptorRecords;\n-import com.palantir.history.models.PaxosHistoryOnSingleNode;\n-import com.palantir.paxos.NamespaceAndUseCase;\n-import com.palantir.timelock.history.HistoryQuery;\n-import com.palantir.timelock.history.LogsForNamespaceAndUseCase;\n-import com.palantir.timelock.history.PaxosLogWithAcceptedAndLearnedValues;\n-\n-public final class HistoryLoaderAndTransformer {\n-    private HistoryLoaderAndTransformer() {\n-        //no op\n-    }\n-\n-    public static List<LogsForNamespaceAndUseCase> getLogsForHistoryQueries(LocalHistoryLoader localHistoryLoader,\n-            List<HistoryQuery> historyQueries) {\n-        Map<NamespaceAndUseCase, Long> lastVerifiedSequences = historyQueries.stream().collect(\n-                Collectors.toMap(HistoryQuery::getNamespaceAndUseCase, HistoryQuery::getSeq, Math::min));\n-\n-        PaxosHistoryOnSingleNode localPaxosHistory = localHistoryLoader.getLocalPaxosHistory(lastVerifiedSequences);\n-\n-        return KeyedStream.stream(localPaxosHistory.history())\n-                .mapEntries(HistoryLoaderAndTransformer::processHistory)\n-                .values()\n-                .collect(Collectors.toList());\n-    }\n-\n-    private static Map.Entry<NamespaceAndUseCase, LogsForNamespaceAndUseCase> processHistory(\n-            NamespaceAndUseCase namespaceAndUseCase, LearnerAndAcceptorRecords records) {\n-\n-        long minSeq = records.getMinSequence();\n-        long maxSeq = records.getMaxSequence();\n-\n-        List<PaxosLogWithAcceptedAndLearnedValues> logs = LongStream.rangeClosed(minSeq, maxSeq).boxed().map(\n-                sequence -> PaxosLogWithAcceptedAndLearnedValues.builder()\n-                        .paxosValue(records.getLearnedValueAtSeqIfExists(sequence))\n-                        .acceptedState(records.getAcceptedValueAtSeqIfExists(sequence))\n-                        .seq(sequence)\n-                        .build()).collect(Collectors.toList());\n-\n-        return Maps.immutableEntry(namespaceAndUseCase, LogsForNamespaceAndUseCase.of(namespaceAndUseCase, logs));\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk4MDY0Nw==", "url": "https://github.com/palantir/atlasdb/pull/4993#discussion_r492980647", "bodyText": "Can we iterate over the map entries, as opposed to over this range? I'm a bit worried about this at deployments like big internal stack, where we truncated a good number of these entries so we have -1 and then a big gap, and then four million.", "author": "jeremyk-91", "createdAt": "2020-09-22T19:26:24Z", "path": "timelock-corruption-detection/src/main/java/com/palantir/history/remote/HistoryLoaderAndTransformer.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history.remote;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.LongStream;\n+\n+import com.google.common.collect.Maps;\n+import com.palantir.common.streams.KeyedStream;\n+import com.palantir.history.LocalHistoryLoader;\n+import com.palantir.history.models.LearnerAndAcceptorRecords;\n+import com.palantir.history.models.PaxosHistoryOnSingleNode;\n+import com.palantir.paxos.NamespaceAndUseCase;\n+import com.palantir.timelock.history.HistoryQuery;\n+import com.palantir.timelock.history.LogsForNamespaceAndUseCase;\n+import com.palantir.timelock.history.PaxosLogWithAcceptedAndLearnedValues;\n+\n+public final class HistoryLoaderAndTransformer {\n+    private HistoryLoaderAndTransformer() {\n+        //no op\n+    }\n+\n+    public static List<LogsForNamespaceAndUseCase> getLogsForHistoryQueries(LocalHistoryLoader localHistoryLoader,\n+            List<HistoryQuery> historyQueries) {\n+        Map<NamespaceAndUseCase, Long> lastVerifiedSequences = historyQueries.stream().collect(\n+                Collectors.toMap(HistoryQuery::getNamespaceAndUseCase, HistoryQuery::getSeq, Math::min));\n+\n+        PaxosHistoryOnSingleNode localPaxosHistory = localHistoryLoader.getLocalPaxosHistory(lastVerifiedSequences);\n+\n+        return KeyedStream.stream(localPaxosHistory.history())\n+                .mapEntries(HistoryLoaderAndTransformer::processHistory)\n+                .values()\n+                .collect(Collectors.toList());\n+    }\n+\n+    private static Map.Entry<NamespaceAndUseCase, LogsForNamespaceAndUseCase> processHistory(\n+            NamespaceAndUseCase namespaceAndUseCase, LearnerAndAcceptorRecords records) {\n+\n+        long minSeq = records.getMinSequence();\n+        long maxSeq = records.getMaxSequence();\n+\n+        List<PaxosLogWithAcceptedAndLearnedValues> logs = LongStream.rangeClosed(minSeq, maxSeq).boxed().map(\n+                sequence -> PaxosLogWithAcceptedAndLearnedValues.builder()\n+                        .paxosValue(records.getLearnedValueAtSeqIfExists(sequence))\n+                        .acceptedState(records.getAcceptedValueAtSeqIfExists(sequence))\n+                        .seq(sequence)\n+                        .build()).collect(Collectors.toList());", "originalCommit": "823dd176550db19f4740b1993a2953978d928b57", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74ed0dee8c39ab27c1a1809c48957007d992c590", "chunk": "diff --git a/timelock-corruption-detection/src/main/java/com/palantir/history/remote/HistoryLoaderAndTransformer.java b/timelock-corruption-detection/src/main/java/com/palantir/history/remote/HistoryLoaderAndTransformer.java\ndeleted file mode 100644\nindex 1866f81f83..0000000000\n--- a/timelock-corruption-detection/src/main/java/com/palantir/history/remote/HistoryLoaderAndTransformer.java\n+++ /dev/null\n\n@@ -1,67 +0,0 @@\n-/*\n- * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.palantir.history.remote;\n-\n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-import java.util.stream.LongStream;\n-\n-import com.google.common.collect.Maps;\n-import com.palantir.common.streams.KeyedStream;\n-import com.palantir.history.LocalHistoryLoader;\n-import com.palantir.history.models.LearnerAndAcceptorRecords;\n-import com.palantir.history.models.PaxosHistoryOnSingleNode;\n-import com.palantir.paxos.NamespaceAndUseCase;\n-import com.palantir.timelock.history.HistoryQuery;\n-import com.palantir.timelock.history.LogsForNamespaceAndUseCase;\n-import com.palantir.timelock.history.PaxosLogWithAcceptedAndLearnedValues;\n-\n-public final class HistoryLoaderAndTransformer {\n-    private HistoryLoaderAndTransformer() {\n-        //no op\n-    }\n-\n-    public static List<LogsForNamespaceAndUseCase> getLogsForHistoryQueries(LocalHistoryLoader localHistoryLoader,\n-            List<HistoryQuery> historyQueries) {\n-        Map<NamespaceAndUseCase, Long> lastVerifiedSequences = historyQueries.stream().collect(\n-                Collectors.toMap(HistoryQuery::getNamespaceAndUseCase, HistoryQuery::getSeq, Math::min));\n-\n-        PaxosHistoryOnSingleNode localPaxosHistory = localHistoryLoader.getLocalPaxosHistory(lastVerifiedSequences);\n-\n-        return KeyedStream.stream(localPaxosHistory.history())\n-                .mapEntries(HistoryLoaderAndTransformer::processHistory)\n-                .values()\n-                .collect(Collectors.toList());\n-    }\n-\n-    private static Map.Entry<NamespaceAndUseCase, LogsForNamespaceAndUseCase> processHistory(\n-            NamespaceAndUseCase namespaceAndUseCase, LearnerAndAcceptorRecords records) {\n-\n-        long minSeq = records.getMinSequence();\n-        long maxSeq = records.getMaxSequence();\n-\n-        List<PaxosLogWithAcceptedAndLearnedValues> logs = LongStream.rangeClosed(minSeq, maxSeq).boxed().map(\n-                sequence -> PaxosLogWithAcceptedAndLearnedValues.builder()\n-                        .paxosValue(records.getLearnedValueAtSeqIfExists(sequence))\n-                        .acceptedState(records.getAcceptedValueAtSeqIfExists(sequence))\n-                        .seq(sequence)\n-                        .build()).collect(Collectors.toList());\n-\n-        return Maps.immutableEntry(namespaceAndUseCase, LogsForNamespaceAndUseCase.of(namespaceAndUseCase, logs));\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk4MjU2OQ==", "url": "https://github.com/palantir/atlasdb/pull/4993#discussion_r492982569", "bodyText": "This probably doesn't need to be exposed \ud83d\ude05", "author": "jeremyk-91", "createdAt": "2020-09-22T19:29:57Z", "path": "timelock-corruption-detection/src/test/java/com/palantir/history/HistoryLoaderAndTransformerTest.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import static com.palantir.history.utils.PaxosSerializationTestUtils.writeAcceptorStateForLogAndRound;\n+import static com.palantir.history.utils.PaxosSerializationTestUtils.writeValueForLogAndRound;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.sql.DataSource;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.palantir.history.remote.HistoryLoaderAndTransformer;\n+import com.palantir.history.sqlite.SqlitePaxosStateLogHistory;\n+import com.palantir.paxos.Client;\n+import com.palantir.paxos.ImmutableNamespaceAndUseCase;\n+import com.palantir.paxos.PaxosAcceptorState;\n+import com.palantir.paxos.PaxosStateLog;\n+import com.palantir.paxos.PaxosValue;\n+import com.palantir.paxos.SqliteConnections;\n+import com.palantir.paxos.SqlitePaxosStateLog;\n+import com.palantir.timelock.history.HistoryQuery;\n+import com.palantir.timelock.history.LogsForNamespaceAndUseCase;\n+import com.palantir.timelock.history.PaxosLogWithAcceptedAndLearnedValues;\n+\n+public class HistoryLoaderAndTransformerTest {\n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    private static final Client CLIENT = Client.of(\"client\");\n+    private static final String USE_CASE = \"useCase\";\n+    private static final String USE_CASE_LEARNER = \"useCase!learner\";\n+    private static final String USE_CASE_ACCEPTOR = \"useCase!acceptor\";\n+\n+    private DataSource dataSource;", "originalCommit": "823dd176550db19f4740b1993a2953978d928b57", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74ed0dee8c39ab27c1a1809c48957007d992c590", "chunk": "diff --git a/timelock-corruption-detection/src/test/java/com/palantir/history/HistoryLoaderAndTransformerTest.java b/timelock-corruption-detection/src/test/java/com/palantir/history/HistoryLoaderAndTransformerTest.java\ndeleted file mode 100644\nindex 019161da71..0000000000\n--- a/timelock-corruption-detection/src/test/java/com/palantir/history/HistoryLoaderAndTransformerTest.java\n+++ /dev/null\n\n@@ -1,183 +0,0 @@\n-/*\n- * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.palantir.history;\n-\n-import static org.assertj.core.api.Assertions.assertThat;\n-\n-import static com.palantir.history.utils.PaxosSerializationTestUtils.writeAcceptorStateForLogAndRound;\n-import static com.palantir.history.utils.PaxosSerializationTestUtils.writeValueForLogAndRound;\n-\n-import java.util.List;\n-import java.util.stream.Collectors;\n-import java.util.stream.IntStream;\n-\n-import javax.sql.DataSource;\n-\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.TemporaryFolder;\n-\n-import com.google.common.collect.ImmutableList;\n-import com.palantir.history.remote.HistoryLoaderAndTransformer;\n-import com.palantir.history.sqlite.SqlitePaxosStateLogHistory;\n-import com.palantir.paxos.Client;\n-import com.palantir.paxos.ImmutableNamespaceAndUseCase;\n-import com.palantir.paxos.PaxosAcceptorState;\n-import com.palantir.paxos.PaxosStateLog;\n-import com.palantir.paxos.PaxosValue;\n-import com.palantir.paxos.SqliteConnections;\n-import com.palantir.paxos.SqlitePaxosStateLog;\n-import com.palantir.timelock.history.HistoryQuery;\n-import com.palantir.timelock.history.LogsForNamespaceAndUseCase;\n-import com.palantir.timelock.history.PaxosLogWithAcceptedAndLearnedValues;\n-\n-public class HistoryLoaderAndTransformerTest {\n-    @Rule\n-    public TemporaryFolder tempFolder = new TemporaryFolder();\n-\n-    private static final Client CLIENT = Client.of(\"client\");\n-    private static final String USE_CASE = \"useCase\";\n-    private static final String USE_CASE_LEARNER = \"useCase!learner\";\n-    private static final String USE_CASE_ACCEPTOR = \"useCase!acceptor\";\n-\n-    private DataSource dataSource;\n-    private PaxosStateLog<PaxosValue> learnerLog;\n-    private PaxosStateLog<PaxosAcceptorState> acceptorLog;\n-    private LocalHistoryLoader history;\n-\n-    @Before\n-    public void setup() {\n-        dataSource = SqliteConnections.getPooledDataSource(tempFolder.getRoot().toPath());\n-        learnerLog = SqlitePaxosStateLog.create(\n-                ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE_LEARNER), dataSource);\n-        acceptorLog = SqlitePaxosStateLog.create(\n-                ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE_ACCEPTOR), dataSource);\n-        history = LocalHistoryLoader.create(SqlitePaxosStateLogHistory.create(dataSource));\n-    }\n-\n-    @Test\n-    public void canFetchLogsForQuery() {\n-        writeToLogs(100);\n-        int lastVerified = 27;\n-        List<HistoryQuery> historyQueries = ImmutableList.of(HistoryQuery.of(\n-                ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE), lastVerified));\n-        List<LogsForNamespaceAndUseCase> paxosHistory\n-                = HistoryLoaderAndTransformer.getLogsForHistoryQueries(history, historyQueries);\n-\n-        assertThat(paxosHistory.size()).isEqualTo(1);\n-        LogsForNamespaceAndUseCase logsForNamespaceAndUseCase = paxosHistory.get(0);\n-\n-        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().namespace()).isEqualTo(CLIENT);\n-        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().useCase()).isEqualTo(USE_CASE);\n-        assertThat(logsForNamespaceAndUseCase.getLogs().size()).isEqualTo(100 - lastVerified);\n-    }\n-\n-    @Test\n-    public void canHandleDuplicateQueries() {\n-        writeToLogs(100);\n-        int minLastVerified = 27;\n-\n-        List<HistoryQuery> queries = IntStream.range(0, 10).boxed().map(\n-                idx -> HistoryQuery.of(ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE), minLastVerified + idx))\n-                .collect(Collectors.toList());\n-\n-        List<LogsForNamespaceAndUseCase> paxosHistory\n-                = HistoryLoaderAndTransformer.getLogsForHistoryQueries(history, queries);\n-\n-        assertThat(paxosHistory.size()).isEqualTo(1);\n-        LogsForNamespaceAndUseCase logsForNamespaceAndUseCase = paxosHistory.get(0);\n-\n-        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().namespace()).isEqualTo(CLIENT);\n-        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().useCase()).isEqualTo(USE_CASE);\n-        assertThat(logsForNamespaceAndUseCase.getLogs().size()).isEqualTo(100 - minLastVerified);\n-    }\n-\n-    @Test\n-    public void canHandleHistoryWithOnlyAcceptorLogs() {\n-        IntStream.range(0, 100).forEach(i -> {\n-            writeAcceptorStateForLogAndRound(acceptorLog, i + 1);\n-        });\n-\n-        int lastVerified = 27;\n-        List<HistoryQuery> historyQueries = ImmutableList.of(HistoryQuery.of(\n-                ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE), lastVerified));\n-\n-        List<LogsForNamespaceAndUseCase> paxosHistory\n-                = HistoryLoaderAndTransformer.getLogsForHistoryQueries(history, historyQueries);\n-\n-        assertThat(paxosHistory.size()).isEqualTo(1);\n-        LogsForNamespaceAndUseCase logsForNamespaceAndUseCase = paxosHistory.get(0);\n-\n-        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().namespace()).isEqualTo(CLIENT);\n-        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().useCase()).isEqualTo(USE_CASE);\n-        assertThat(logsForNamespaceAndUseCase.getLogs().size()).isEqualTo(100 - lastVerified);\n-\n-        PaxosLogWithAcceptedAndLearnedValues singleLog = logsForNamespaceAndUseCase.getLogs().get(0);\n-        assertThat(singleLog.getAcceptedState()).isPresent();\n-        assertThat(singleLog.getPaxosValue()).isNotPresent();\n-    }\n-\n-    @Test\n-    public void canHandleHistoryWithOnlyLearnerLogs() {\n-        IntStream.range(0, 100).forEach(i -> {\n-            writeValueForLogAndRound(learnerLog, i + 1);\n-        });\n-\n-        int lastVerified = 52;\n-        List<HistoryQuery> historyQueries = ImmutableList.of(HistoryQuery.of(\n-                ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE), lastVerified));\n-\n-        List<LogsForNamespaceAndUseCase> paxosHistory\n-                = HistoryLoaderAndTransformer.getLogsForHistoryQueries(history, historyQueries);\n-\n-        assertThat(paxosHistory.size()).isEqualTo(1);\n-        LogsForNamespaceAndUseCase logsForNamespaceAndUseCase = paxosHistory.get(0);\n-\n-        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().namespace()).isEqualTo(CLIENT);\n-        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().useCase()).isEqualTo(USE_CASE);\n-        assertThat(logsForNamespaceAndUseCase.getLogs().size()).isEqualTo(100 - lastVerified);\n-\n-        PaxosLogWithAcceptedAndLearnedValues singleLog = logsForNamespaceAndUseCase.getLogs().get(0);\n-        assertThat(singleLog.getAcceptedState()).isNotPresent();\n-        assertThat(singleLog.getPaxosValue()).isPresent();\n-    }\n-\n-    @Test\n-    public void canHandleHistoryWithNoLogs() {\n-        int lastVerified = 102;\n-        List<HistoryQuery> historyQueries = ImmutableList.of(HistoryQuery.of(\n-                ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE), lastVerified));\n-\n-        List<LogsForNamespaceAndUseCase> paxosHistory\n-                = HistoryLoaderAndTransformer.getLogsForHistoryQueries(history, historyQueries);\n-\n-        assertThat(paxosHistory.size()).isEqualTo(1);\n-        LogsForNamespaceAndUseCase logsForNamespaceAndUseCase = paxosHistory.get(0);\n-\n-        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().namespace()).isEqualTo(CLIENT);\n-        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().useCase()).isEqualTo(USE_CASE);\n-        assertThat(logsForNamespaceAndUseCase.getLogs().size()).isEqualTo(0);\n-    }\n-\n-    private void writeToLogs(int range) {\n-        IntStream.range(0, range).forEach(i -> {\n-            writeAcceptorStateForLogAndRound(acceptorLog, i + 1);\n-            writeValueForLogAndRound(learnerLog, i + 1);\n-        });\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk4MzY5MA==", "url": "https://github.com/palantir/atlasdb/pull/4993#discussion_r492983690", "bodyText": "This is pretty solid. I think you might want to add a test for a discontinuity (i.e. logs only exist from 45 - 100, and lastVerified was 3 or something like that), but other than that there's good coverage here.", "author": "jeremyk-91", "createdAt": "2020-09-22T19:32:06Z", "path": "timelock-corruption-detection/src/test/java/com/palantir/history/HistoryLoaderAndTransformerTest.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import static com.palantir.history.utils.PaxosSerializationTestUtils.writeAcceptorStateForLogAndRound;\n+import static com.palantir.history.utils.PaxosSerializationTestUtils.writeValueForLogAndRound;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.sql.DataSource;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.palantir.history.remote.HistoryLoaderAndTransformer;\n+import com.palantir.history.sqlite.SqlitePaxosStateLogHistory;\n+import com.palantir.paxos.Client;\n+import com.palantir.paxos.ImmutableNamespaceAndUseCase;\n+import com.palantir.paxos.PaxosAcceptorState;\n+import com.palantir.paxos.PaxosStateLog;\n+import com.palantir.paxos.PaxosValue;\n+import com.palantir.paxos.SqliteConnections;\n+import com.palantir.paxos.SqlitePaxosStateLog;\n+import com.palantir.timelock.history.HistoryQuery;\n+import com.palantir.timelock.history.LogsForNamespaceAndUseCase;\n+import com.palantir.timelock.history.PaxosLogWithAcceptedAndLearnedValues;\n+\n+public class HistoryLoaderAndTransformerTest {\n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    private static final Client CLIENT = Client.of(\"client\");\n+    private static final String USE_CASE = \"useCase\";\n+    private static final String USE_CASE_LEARNER = \"useCase!learner\";\n+    private static final String USE_CASE_ACCEPTOR = \"useCase!acceptor\";\n+\n+    private DataSource dataSource;\n+    private PaxosStateLog<PaxosValue> learnerLog;\n+    private PaxosStateLog<PaxosAcceptorState> acceptorLog;\n+    private LocalHistoryLoader history;\n+\n+    @Before\n+    public void setup() {\n+        dataSource = SqliteConnections.getPooledDataSource(tempFolder.getRoot().toPath());\n+        learnerLog = SqlitePaxosStateLog.create(\n+                ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE_LEARNER), dataSource);\n+        acceptorLog = SqlitePaxosStateLog.create(\n+                ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE_ACCEPTOR), dataSource);\n+        history = LocalHistoryLoader.create(SqlitePaxosStateLogHistory.create(dataSource));\n+    }\n+\n+    @Test\n+    public void canFetchLogsForQuery() {\n+        writeToLogs(100);\n+        int lastVerified = 27;\n+        List<HistoryQuery> historyQueries = ImmutableList.of(HistoryQuery.of(\n+                ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE), lastVerified));\n+        List<LogsForNamespaceAndUseCase> paxosHistory\n+                = HistoryLoaderAndTransformer.getLogsForHistoryQueries(history, historyQueries);\n+\n+        assertThat(paxosHistory.size()).isEqualTo(1);\n+        LogsForNamespaceAndUseCase logsForNamespaceAndUseCase = paxosHistory.get(0);\n+\n+        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().namespace()).isEqualTo(CLIENT);\n+        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().useCase()).isEqualTo(USE_CASE);\n+        assertThat(logsForNamespaceAndUseCase.getLogs().size()).isEqualTo(100 - lastVerified);\n+    }\n+\n+    @Test\n+    public void canHandleDuplicateQueries() {\n+        writeToLogs(100);\n+        int minLastVerified = 27;\n+\n+        List<HistoryQuery> queries = IntStream.range(0, 10).boxed().map(\n+                idx -> HistoryQuery.of(ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE), minLastVerified + idx))\n+                .collect(Collectors.toList());\n+\n+        List<LogsForNamespaceAndUseCase> paxosHistory\n+                = HistoryLoaderAndTransformer.getLogsForHistoryQueries(history, queries);\n+\n+        assertThat(paxosHistory.size()).isEqualTo(1);\n+        LogsForNamespaceAndUseCase logsForNamespaceAndUseCase = paxosHistory.get(0);\n+\n+        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().namespace()).isEqualTo(CLIENT);\n+        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().useCase()).isEqualTo(USE_CASE);\n+        assertThat(logsForNamespaceAndUseCase.getLogs().size()).isEqualTo(100 - minLastVerified);\n+    }\n+\n+    @Test\n+    public void canHandleHistoryWithOnlyAcceptorLogs() {\n+        IntStream.range(0, 100).forEach(i -> {\n+            writeAcceptorStateForLogAndRound(acceptorLog, i + 1);\n+        });\n+\n+        int lastVerified = 27;\n+        List<HistoryQuery> historyQueries = ImmutableList.of(HistoryQuery.of(\n+                ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE), lastVerified));\n+\n+        List<LogsForNamespaceAndUseCase> paxosHistory\n+                = HistoryLoaderAndTransformer.getLogsForHistoryQueries(history, historyQueries);\n+\n+        assertThat(paxosHistory.size()).isEqualTo(1);\n+        LogsForNamespaceAndUseCase logsForNamespaceAndUseCase = paxosHistory.get(0);\n+\n+        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().namespace()).isEqualTo(CLIENT);\n+        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().useCase()).isEqualTo(USE_CASE);\n+        assertThat(logsForNamespaceAndUseCase.getLogs().size()).isEqualTo(100 - lastVerified);\n+\n+        PaxosLogWithAcceptedAndLearnedValues singleLog = logsForNamespaceAndUseCase.getLogs().get(0);\n+        assertThat(singleLog.getAcceptedState()).isPresent();\n+        assertThat(singleLog.getPaxosValue()).isNotPresent();\n+    }\n+\n+    @Test\n+    public void canHandleHistoryWithOnlyLearnerLogs() {\n+        IntStream.range(0, 100).forEach(i -> {\n+            writeValueForLogAndRound(learnerLog, i + 1);\n+        });\n+\n+        int lastVerified = 52;\n+        List<HistoryQuery> historyQueries = ImmutableList.of(HistoryQuery.of(\n+                ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE), lastVerified));\n+\n+        List<LogsForNamespaceAndUseCase> paxosHistory\n+                = HistoryLoaderAndTransformer.getLogsForHistoryQueries(history, historyQueries);\n+\n+        assertThat(paxosHistory.size()).isEqualTo(1);\n+        LogsForNamespaceAndUseCase logsForNamespaceAndUseCase = paxosHistory.get(0);\n+\n+        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().namespace()).isEqualTo(CLIENT);\n+        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().useCase()).isEqualTo(USE_CASE);\n+        assertThat(logsForNamespaceAndUseCase.getLogs().size()).isEqualTo(100 - lastVerified);\n+\n+        PaxosLogWithAcceptedAndLearnedValues singleLog = logsForNamespaceAndUseCase.getLogs().get(0);\n+        assertThat(singleLog.getAcceptedState()).isNotPresent();\n+        assertThat(singleLog.getPaxosValue()).isPresent();\n+    }\n+\n+    @Test\n+    public void canHandleHistoryWithNoLogs() {\n+        int lastVerified = 102;\n+        List<HistoryQuery> historyQueries = ImmutableList.of(HistoryQuery.of(\n+                ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE), lastVerified));\n+\n+        List<LogsForNamespaceAndUseCase> paxosHistory\n+                = HistoryLoaderAndTransformer.getLogsForHistoryQueries(history, historyQueries);\n+\n+        assertThat(paxosHistory.size()).isEqualTo(1);\n+        LogsForNamespaceAndUseCase logsForNamespaceAndUseCase = paxosHistory.get(0);\n+\n+        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().namespace()).isEqualTo(CLIENT);\n+        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().useCase()).isEqualTo(USE_CASE);\n+        assertThat(logsForNamespaceAndUseCase.getLogs().size()).isEqualTo(0);\n+    }\n+\n+    private void writeToLogs(int range) {\n+        IntStream.range(0, range).forEach(i -> {\n+            writeAcceptorStateForLogAndRound(acceptorLog, i + 1);\n+            writeValueForLogAndRound(learnerLog, i + 1);\n+        });\n+    }", "originalCommit": "823dd176550db19f4740b1993a2953978d928b57", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74ed0dee8c39ab27c1a1809c48957007d992c590", "chunk": "diff --git a/timelock-corruption-detection/src/test/java/com/palantir/history/HistoryLoaderAndTransformerTest.java b/timelock-corruption-detection/src/test/java/com/palantir/history/HistoryLoaderAndTransformerTest.java\ndeleted file mode 100644\nindex 019161da71..0000000000\n--- a/timelock-corruption-detection/src/test/java/com/palantir/history/HistoryLoaderAndTransformerTest.java\n+++ /dev/null\n\n@@ -1,183 +0,0 @@\n-/*\n- * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.palantir.history;\n-\n-import static org.assertj.core.api.Assertions.assertThat;\n-\n-import static com.palantir.history.utils.PaxosSerializationTestUtils.writeAcceptorStateForLogAndRound;\n-import static com.palantir.history.utils.PaxosSerializationTestUtils.writeValueForLogAndRound;\n-\n-import java.util.List;\n-import java.util.stream.Collectors;\n-import java.util.stream.IntStream;\n-\n-import javax.sql.DataSource;\n-\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.TemporaryFolder;\n-\n-import com.google.common.collect.ImmutableList;\n-import com.palantir.history.remote.HistoryLoaderAndTransformer;\n-import com.palantir.history.sqlite.SqlitePaxosStateLogHistory;\n-import com.palantir.paxos.Client;\n-import com.palantir.paxos.ImmutableNamespaceAndUseCase;\n-import com.palantir.paxos.PaxosAcceptorState;\n-import com.palantir.paxos.PaxosStateLog;\n-import com.palantir.paxos.PaxosValue;\n-import com.palantir.paxos.SqliteConnections;\n-import com.palantir.paxos.SqlitePaxosStateLog;\n-import com.palantir.timelock.history.HistoryQuery;\n-import com.palantir.timelock.history.LogsForNamespaceAndUseCase;\n-import com.palantir.timelock.history.PaxosLogWithAcceptedAndLearnedValues;\n-\n-public class HistoryLoaderAndTransformerTest {\n-    @Rule\n-    public TemporaryFolder tempFolder = new TemporaryFolder();\n-\n-    private static final Client CLIENT = Client.of(\"client\");\n-    private static final String USE_CASE = \"useCase\";\n-    private static final String USE_CASE_LEARNER = \"useCase!learner\";\n-    private static final String USE_CASE_ACCEPTOR = \"useCase!acceptor\";\n-\n-    private DataSource dataSource;\n-    private PaxosStateLog<PaxosValue> learnerLog;\n-    private PaxosStateLog<PaxosAcceptorState> acceptorLog;\n-    private LocalHistoryLoader history;\n-\n-    @Before\n-    public void setup() {\n-        dataSource = SqliteConnections.getPooledDataSource(tempFolder.getRoot().toPath());\n-        learnerLog = SqlitePaxosStateLog.create(\n-                ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE_LEARNER), dataSource);\n-        acceptorLog = SqlitePaxosStateLog.create(\n-                ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE_ACCEPTOR), dataSource);\n-        history = LocalHistoryLoader.create(SqlitePaxosStateLogHistory.create(dataSource));\n-    }\n-\n-    @Test\n-    public void canFetchLogsForQuery() {\n-        writeToLogs(100);\n-        int lastVerified = 27;\n-        List<HistoryQuery> historyQueries = ImmutableList.of(HistoryQuery.of(\n-                ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE), lastVerified));\n-        List<LogsForNamespaceAndUseCase> paxosHistory\n-                = HistoryLoaderAndTransformer.getLogsForHistoryQueries(history, historyQueries);\n-\n-        assertThat(paxosHistory.size()).isEqualTo(1);\n-        LogsForNamespaceAndUseCase logsForNamespaceAndUseCase = paxosHistory.get(0);\n-\n-        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().namespace()).isEqualTo(CLIENT);\n-        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().useCase()).isEqualTo(USE_CASE);\n-        assertThat(logsForNamespaceAndUseCase.getLogs().size()).isEqualTo(100 - lastVerified);\n-    }\n-\n-    @Test\n-    public void canHandleDuplicateQueries() {\n-        writeToLogs(100);\n-        int minLastVerified = 27;\n-\n-        List<HistoryQuery> queries = IntStream.range(0, 10).boxed().map(\n-                idx -> HistoryQuery.of(ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE), minLastVerified + idx))\n-                .collect(Collectors.toList());\n-\n-        List<LogsForNamespaceAndUseCase> paxosHistory\n-                = HistoryLoaderAndTransformer.getLogsForHistoryQueries(history, queries);\n-\n-        assertThat(paxosHistory.size()).isEqualTo(1);\n-        LogsForNamespaceAndUseCase logsForNamespaceAndUseCase = paxosHistory.get(0);\n-\n-        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().namespace()).isEqualTo(CLIENT);\n-        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().useCase()).isEqualTo(USE_CASE);\n-        assertThat(logsForNamespaceAndUseCase.getLogs().size()).isEqualTo(100 - minLastVerified);\n-    }\n-\n-    @Test\n-    public void canHandleHistoryWithOnlyAcceptorLogs() {\n-        IntStream.range(0, 100).forEach(i -> {\n-            writeAcceptorStateForLogAndRound(acceptorLog, i + 1);\n-        });\n-\n-        int lastVerified = 27;\n-        List<HistoryQuery> historyQueries = ImmutableList.of(HistoryQuery.of(\n-                ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE), lastVerified));\n-\n-        List<LogsForNamespaceAndUseCase> paxosHistory\n-                = HistoryLoaderAndTransformer.getLogsForHistoryQueries(history, historyQueries);\n-\n-        assertThat(paxosHistory.size()).isEqualTo(1);\n-        LogsForNamespaceAndUseCase logsForNamespaceAndUseCase = paxosHistory.get(0);\n-\n-        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().namespace()).isEqualTo(CLIENT);\n-        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().useCase()).isEqualTo(USE_CASE);\n-        assertThat(logsForNamespaceAndUseCase.getLogs().size()).isEqualTo(100 - lastVerified);\n-\n-        PaxosLogWithAcceptedAndLearnedValues singleLog = logsForNamespaceAndUseCase.getLogs().get(0);\n-        assertThat(singleLog.getAcceptedState()).isPresent();\n-        assertThat(singleLog.getPaxosValue()).isNotPresent();\n-    }\n-\n-    @Test\n-    public void canHandleHistoryWithOnlyLearnerLogs() {\n-        IntStream.range(0, 100).forEach(i -> {\n-            writeValueForLogAndRound(learnerLog, i + 1);\n-        });\n-\n-        int lastVerified = 52;\n-        List<HistoryQuery> historyQueries = ImmutableList.of(HistoryQuery.of(\n-                ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE), lastVerified));\n-\n-        List<LogsForNamespaceAndUseCase> paxosHistory\n-                = HistoryLoaderAndTransformer.getLogsForHistoryQueries(history, historyQueries);\n-\n-        assertThat(paxosHistory.size()).isEqualTo(1);\n-        LogsForNamespaceAndUseCase logsForNamespaceAndUseCase = paxosHistory.get(0);\n-\n-        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().namespace()).isEqualTo(CLIENT);\n-        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().useCase()).isEqualTo(USE_CASE);\n-        assertThat(logsForNamespaceAndUseCase.getLogs().size()).isEqualTo(100 - lastVerified);\n-\n-        PaxosLogWithAcceptedAndLearnedValues singleLog = logsForNamespaceAndUseCase.getLogs().get(0);\n-        assertThat(singleLog.getAcceptedState()).isNotPresent();\n-        assertThat(singleLog.getPaxosValue()).isPresent();\n-    }\n-\n-    @Test\n-    public void canHandleHistoryWithNoLogs() {\n-        int lastVerified = 102;\n-        List<HistoryQuery> historyQueries = ImmutableList.of(HistoryQuery.of(\n-                ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE), lastVerified));\n-\n-        List<LogsForNamespaceAndUseCase> paxosHistory\n-                = HistoryLoaderAndTransformer.getLogsForHistoryQueries(history, historyQueries);\n-\n-        assertThat(paxosHistory.size()).isEqualTo(1);\n-        LogsForNamespaceAndUseCase logsForNamespaceAndUseCase = paxosHistory.get(0);\n-\n-        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().namespace()).isEqualTo(CLIENT);\n-        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().useCase()).isEqualTo(USE_CASE);\n-        assertThat(logsForNamespaceAndUseCase.getLogs().size()).isEqualTo(0);\n-    }\n-\n-    private void writeToLogs(int range) {\n-        IntStream.range(0, range).forEach(i -> {\n-            writeAcceptorStateForLogAndRound(acceptorLog, i + 1);\n-            writeValueForLogAndRound(learnerLog, i + 1);\n-        });\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk4Njc3MQ==", "url": "https://github.com/palantir/atlasdb/pull/4993#discussion_r492986771", "bodyText": "nit: This object's used quite a bit, you can just extract it as a constant and then use it. Also for the assertions you can then use assertThat(bleh.getNamespaceAndUseCase()).isEqualTo(NAMESPACE_AND_USE_CASE)", "author": "jeremyk-91", "createdAt": "2020-09-22T19:38:00Z", "path": "timelock-corruption-detection/src/test/java/com/palantir/history/HistoryLoaderAndTransformerTest.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.history;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import static com.palantir.history.utils.PaxosSerializationTestUtils.writeAcceptorStateForLogAndRound;\n+import static com.palantir.history.utils.PaxosSerializationTestUtils.writeValueForLogAndRound;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import javax.sql.DataSource;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.palantir.history.remote.HistoryLoaderAndTransformer;\n+import com.palantir.history.sqlite.SqlitePaxosStateLogHistory;\n+import com.palantir.paxos.Client;\n+import com.palantir.paxos.ImmutableNamespaceAndUseCase;\n+import com.palantir.paxos.PaxosAcceptorState;\n+import com.palantir.paxos.PaxosStateLog;\n+import com.palantir.paxos.PaxosValue;\n+import com.palantir.paxos.SqliteConnections;\n+import com.palantir.paxos.SqlitePaxosStateLog;\n+import com.palantir.timelock.history.HistoryQuery;\n+import com.palantir.timelock.history.LogsForNamespaceAndUseCase;\n+import com.palantir.timelock.history.PaxosLogWithAcceptedAndLearnedValues;\n+\n+public class HistoryLoaderAndTransformerTest {\n+    @Rule\n+    public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+    private static final Client CLIENT = Client.of(\"client\");\n+    private static final String USE_CASE = \"useCase\";\n+    private static final String USE_CASE_LEARNER = \"useCase!learner\";\n+    private static final String USE_CASE_ACCEPTOR = \"useCase!acceptor\";\n+\n+    private DataSource dataSource;\n+    private PaxosStateLog<PaxosValue> learnerLog;\n+    private PaxosStateLog<PaxosAcceptorState> acceptorLog;\n+    private LocalHistoryLoader history;\n+\n+    @Before\n+    public void setup() {\n+        dataSource = SqliteConnections.getPooledDataSource(tempFolder.getRoot().toPath());\n+        learnerLog = SqlitePaxosStateLog.create(\n+                ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE_LEARNER), dataSource);\n+        acceptorLog = SqlitePaxosStateLog.create(\n+                ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE_ACCEPTOR), dataSource);\n+        history = LocalHistoryLoader.create(SqlitePaxosStateLogHistory.create(dataSource));\n+    }\n+\n+    @Test\n+    public void canFetchLogsForQuery() {\n+        writeToLogs(100);\n+        int lastVerified = 27;\n+        List<HistoryQuery> historyQueries = ImmutableList.of(HistoryQuery.of(\n+                ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE), lastVerified));\n+        List<LogsForNamespaceAndUseCase> paxosHistory\n+                = HistoryLoaderAndTransformer.getLogsForHistoryQueries(history, historyQueries);\n+\n+        assertThat(paxosHistory.size()).isEqualTo(1);\n+        LogsForNamespaceAndUseCase logsForNamespaceAndUseCase = paxosHistory.get(0);\n+\n+        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().namespace()).isEqualTo(CLIENT);\n+        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().useCase()).isEqualTo(USE_CASE);\n+        assertThat(logsForNamespaceAndUseCase.getLogs().size()).isEqualTo(100 - lastVerified);\n+    }\n+\n+    @Test\n+    public void canHandleDuplicateQueries() {\n+        writeToLogs(100);\n+        int minLastVerified = 27;\n+\n+        List<HistoryQuery> queries = IntStream.range(0, 10).boxed().map(\n+                idx -> HistoryQuery.of(ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE), minLastVerified + idx))", "originalCommit": "823dd176550db19f4740b1993a2953978d928b57", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74ed0dee8c39ab27c1a1809c48957007d992c590", "chunk": "diff --git a/timelock-corruption-detection/src/test/java/com/palantir/history/HistoryLoaderAndTransformerTest.java b/timelock-corruption-detection/src/test/java/com/palantir/history/HistoryLoaderAndTransformerTest.java\ndeleted file mode 100644\nindex 019161da71..0000000000\n--- a/timelock-corruption-detection/src/test/java/com/palantir/history/HistoryLoaderAndTransformerTest.java\n+++ /dev/null\n\n@@ -1,183 +0,0 @@\n-/*\n- * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.palantir.history;\n-\n-import static org.assertj.core.api.Assertions.assertThat;\n-\n-import static com.palantir.history.utils.PaxosSerializationTestUtils.writeAcceptorStateForLogAndRound;\n-import static com.palantir.history.utils.PaxosSerializationTestUtils.writeValueForLogAndRound;\n-\n-import java.util.List;\n-import java.util.stream.Collectors;\n-import java.util.stream.IntStream;\n-\n-import javax.sql.DataSource;\n-\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.TemporaryFolder;\n-\n-import com.google.common.collect.ImmutableList;\n-import com.palantir.history.remote.HistoryLoaderAndTransformer;\n-import com.palantir.history.sqlite.SqlitePaxosStateLogHistory;\n-import com.palantir.paxos.Client;\n-import com.palantir.paxos.ImmutableNamespaceAndUseCase;\n-import com.palantir.paxos.PaxosAcceptorState;\n-import com.palantir.paxos.PaxosStateLog;\n-import com.palantir.paxos.PaxosValue;\n-import com.palantir.paxos.SqliteConnections;\n-import com.palantir.paxos.SqlitePaxosStateLog;\n-import com.palantir.timelock.history.HistoryQuery;\n-import com.palantir.timelock.history.LogsForNamespaceAndUseCase;\n-import com.palantir.timelock.history.PaxosLogWithAcceptedAndLearnedValues;\n-\n-public class HistoryLoaderAndTransformerTest {\n-    @Rule\n-    public TemporaryFolder tempFolder = new TemporaryFolder();\n-\n-    private static final Client CLIENT = Client.of(\"client\");\n-    private static final String USE_CASE = \"useCase\";\n-    private static final String USE_CASE_LEARNER = \"useCase!learner\";\n-    private static final String USE_CASE_ACCEPTOR = \"useCase!acceptor\";\n-\n-    private DataSource dataSource;\n-    private PaxosStateLog<PaxosValue> learnerLog;\n-    private PaxosStateLog<PaxosAcceptorState> acceptorLog;\n-    private LocalHistoryLoader history;\n-\n-    @Before\n-    public void setup() {\n-        dataSource = SqliteConnections.getPooledDataSource(tempFolder.getRoot().toPath());\n-        learnerLog = SqlitePaxosStateLog.create(\n-                ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE_LEARNER), dataSource);\n-        acceptorLog = SqlitePaxosStateLog.create(\n-                ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE_ACCEPTOR), dataSource);\n-        history = LocalHistoryLoader.create(SqlitePaxosStateLogHistory.create(dataSource));\n-    }\n-\n-    @Test\n-    public void canFetchLogsForQuery() {\n-        writeToLogs(100);\n-        int lastVerified = 27;\n-        List<HistoryQuery> historyQueries = ImmutableList.of(HistoryQuery.of(\n-                ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE), lastVerified));\n-        List<LogsForNamespaceAndUseCase> paxosHistory\n-                = HistoryLoaderAndTransformer.getLogsForHistoryQueries(history, historyQueries);\n-\n-        assertThat(paxosHistory.size()).isEqualTo(1);\n-        LogsForNamespaceAndUseCase logsForNamespaceAndUseCase = paxosHistory.get(0);\n-\n-        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().namespace()).isEqualTo(CLIENT);\n-        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().useCase()).isEqualTo(USE_CASE);\n-        assertThat(logsForNamespaceAndUseCase.getLogs().size()).isEqualTo(100 - lastVerified);\n-    }\n-\n-    @Test\n-    public void canHandleDuplicateQueries() {\n-        writeToLogs(100);\n-        int minLastVerified = 27;\n-\n-        List<HistoryQuery> queries = IntStream.range(0, 10).boxed().map(\n-                idx -> HistoryQuery.of(ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE), minLastVerified + idx))\n-                .collect(Collectors.toList());\n-\n-        List<LogsForNamespaceAndUseCase> paxosHistory\n-                = HistoryLoaderAndTransformer.getLogsForHistoryQueries(history, queries);\n-\n-        assertThat(paxosHistory.size()).isEqualTo(1);\n-        LogsForNamespaceAndUseCase logsForNamespaceAndUseCase = paxosHistory.get(0);\n-\n-        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().namespace()).isEqualTo(CLIENT);\n-        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().useCase()).isEqualTo(USE_CASE);\n-        assertThat(logsForNamespaceAndUseCase.getLogs().size()).isEqualTo(100 - minLastVerified);\n-    }\n-\n-    @Test\n-    public void canHandleHistoryWithOnlyAcceptorLogs() {\n-        IntStream.range(0, 100).forEach(i -> {\n-            writeAcceptorStateForLogAndRound(acceptorLog, i + 1);\n-        });\n-\n-        int lastVerified = 27;\n-        List<HistoryQuery> historyQueries = ImmutableList.of(HistoryQuery.of(\n-                ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE), lastVerified));\n-\n-        List<LogsForNamespaceAndUseCase> paxosHistory\n-                = HistoryLoaderAndTransformer.getLogsForHistoryQueries(history, historyQueries);\n-\n-        assertThat(paxosHistory.size()).isEqualTo(1);\n-        LogsForNamespaceAndUseCase logsForNamespaceAndUseCase = paxosHistory.get(0);\n-\n-        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().namespace()).isEqualTo(CLIENT);\n-        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().useCase()).isEqualTo(USE_CASE);\n-        assertThat(logsForNamespaceAndUseCase.getLogs().size()).isEqualTo(100 - lastVerified);\n-\n-        PaxosLogWithAcceptedAndLearnedValues singleLog = logsForNamespaceAndUseCase.getLogs().get(0);\n-        assertThat(singleLog.getAcceptedState()).isPresent();\n-        assertThat(singleLog.getPaxosValue()).isNotPresent();\n-    }\n-\n-    @Test\n-    public void canHandleHistoryWithOnlyLearnerLogs() {\n-        IntStream.range(0, 100).forEach(i -> {\n-            writeValueForLogAndRound(learnerLog, i + 1);\n-        });\n-\n-        int lastVerified = 52;\n-        List<HistoryQuery> historyQueries = ImmutableList.of(HistoryQuery.of(\n-                ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE), lastVerified));\n-\n-        List<LogsForNamespaceAndUseCase> paxosHistory\n-                = HistoryLoaderAndTransformer.getLogsForHistoryQueries(history, historyQueries);\n-\n-        assertThat(paxosHistory.size()).isEqualTo(1);\n-        LogsForNamespaceAndUseCase logsForNamespaceAndUseCase = paxosHistory.get(0);\n-\n-        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().namespace()).isEqualTo(CLIENT);\n-        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().useCase()).isEqualTo(USE_CASE);\n-        assertThat(logsForNamespaceAndUseCase.getLogs().size()).isEqualTo(100 - lastVerified);\n-\n-        PaxosLogWithAcceptedAndLearnedValues singleLog = logsForNamespaceAndUseCase.getLogs().get(0);\n-        assertThat(singleLog.getAcceptedState()).isNotPresent();\n-        assertThat(singleLog.getPaxosValue()).isPresent();\n-    }\n-\n-    @Test\n-    public void canHandleHistoryWithNoLogs() {\n-        int lastVerified = 102;\n-        List<HistoryQuery> historyQueries = ImmutableList.of(HistoryQuery.of(\n-                ImmutableNamespaceAndUseCase.of(CLIENT, USE_CASE), lastVerified));\n-\n-        List<LogsForNamespaceAndUseCase> paxosHistory\n-                = HistoryLoaderAndTransformer.getLogsForHistoryQueries(history, historyQueries);\n-\n-        assertThat(paxosHistory.size()).isEqualTo(1);\n-        LogsForNamespaceAndUseCase logsForNamespaceAndUseCase = paxosHistory.get(0);\n-\n-        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().namespace()).isEqualTo(CLIENT);\n-        assertThat(logsForNamespaceAndUseCase.getNamespaceAndUseCase().useCase()).isEqualTo(USE_CASE);\n-        assertThat(logsForNamespaceAndUseCase.getLogs().size()).isEqualTo(0);\n-    }\n-\n-    private void writeToLogs(int range) {\n-        IntStream.range(0, range).forEach(i -> {\n-            writeAcceptorStateForLogAndRound(acceptorLog, i + 1);\n-            writeValueForLogAndRound(learnerLog, i + 1);\n-        });\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzczMDkwNQ==", "url": "https://github.com/palantir/atlasdb/pull/4993#discussion_r493730905", "bodyText": "nit: as above", "author": "jeremyk-91", "createdAt": "2020-09-23T16:31:32Z", "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/models/LearnerAndAcceptorRecords.java", "diffHunk": "@@ -31,4 +35,21 @@\n \n     @Value.Parameter\n     Map<Long, PaxosAcceptorState> acceptorRecords();\n+\n+    default Optional<PaxosValue> getLearnedValueAtSeqIfExists(long seq) {\n+        return Optional.ofNullable(learnerRecords().get(seq));\n+    }\n+\n+    default Optional<PaxosAcceptorState> getAcceptedValueAtSeqIfExists(long seq) {\n+        return Optional.ofNullable(acceptorRecords().getOrDefault(seq, null));", "originalCommit": "664dfc52858cb17941e619c15c7c9958c6de70e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74ed0dee8c39ab27c1a1809c48957007d992c590", "chunk": "diff --git a/timelock-corruption-detection/src/main/java/com/palantir/timelock/history/models/LearnerAndAcceptorRecords.java b/timelock-corruption-detection/src/main/java/com/palantir/timelock/history/models/LearnerAndAcceptorRecords.java\ndeleted file mode 100644\nindex 77dd9a5046..0000000000\n--- a/timelock-corruption-detection/src/main/java/com/palantir/timelock/history/models/LearnerAndAcceptorRecords.java\n+++ /dev/null\n\n@@ -1,55 +0,0 @@\n-/*\n- * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.palantir.timelock.history.models;\n-\n-import java.util.Map;\n-import java.util.Optional;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n-import org.immutables.value.Value;\n-\n-import com.palantir.paxos.PaxosAcceptorState;\n-import com.palantir.paxos.PaxosValue;\n-\n-@Value.Immutable\n-public interface LearnerAndAcceptorRecords {\n-\n-    @Value.Parameter\n-    Map<Long, PaxosValue> learnerRecords();\n-\n-    @Value.Parameter\n-    Map<Long, PaxosAcceptorState> acceptorRecords();\n-\n-    default Optional<PaxosValue> getLearnedValueAtSeqIfExists(long seq) {\n-        return Optional.ofNullable(learnerRecords().get(seq));\n-    }\n-\n-    default Optional<PaxosAcceptorState> getAcceptedValueAtSeqIfExists(long seq) {\n-        return Optional.ofNullable(acceptorRecords().getOrDefault(seq, null));\n-    }\n-\n-    // it is okay to have a set of longs as learner and acceptor records have a limit of 500 entries.\n-    @Value.Lazy\n-    default Set<Long> getAllSequenceNumbers() {\n-        return Stream.of(learnerRecords(), acceptorRecords())\n-                .map(Map::keySet)\n-                .flatMap(Set::stream)\n-                .collect(Collectors.toSet());\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzczMTA4MA==", "url": "https://github.com/palantir/atlasdb/pull/4993#discussion_r493731080", "bodyText": "\ud83d\udcaf", "author": "jeremyk-91", "createdAt": "2020-09-23T16:31:49Z", "path": "timelock-corruption-detection/src/main/java/com/palantir/timelock/history/models/LearnerAndAcceptorRecords.java", "diffHunk": "@@ -31,4 +35,21 @@\n \n     @Value.Parameter\n     Map<Long, PaxosAcceptorState> acceptorRecords();\n+\n+    default Optional<PaxosValue> getLearnedValueAtSeqIfExists(long seq) {\n+        return Optional.ofNullable(learnerRecords().get(seq));\n+    }\n+\n+    default Optional<PaxosAcceptorState> getAcceptedValueAtSeqIfExists(long seq) {\n+        return Optional.ofNullable(acceptorRecords().getOrDefault(seq, null));\n+    }\n+\n+    // it is okay to have a set of longs as learner and acceptor records have a limit of 500 entries.", "originalCommit": "664dfc52858cb17941e619c15c7c9958c6de70e1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "74ed0dee8c39ab27c1a1809c48957007d992c590", "chunk": "diff --git a/timelock-corruption-detection/src/main/java/com/palantir/timelock/history/models/LearnerAndAcceptorRecords.java b/timelock-corruption-detection/src/main/java/com/palantir/timelock/history/models/LearnerAndAcceptorRecords.java\ndeleted file mode 100644\nindex 77dd9a5046..0000000000\n--- a/timelock-corruption-detection/src/main/java/com/palantir/timelock/history/models/LearnerAndAcceptorRecords.java\n+++ /dev/null\n\n@@ -1,55 +0,0 @@\n-/*\n- * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.palantir.timelock.history.models;\n-\n-import java.util.Map;\n-import java.util.Optional;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n-import org.immutables.value.Value;\n-\n-import com.palantir.paxos.PaxosAcceptorState;\n-import com.palantir.paxos.PaxosValue;\n-\n-@Value.Immutable\n-public interface LearnerAndAcceptorRecords {\n-\n-    @Value.Parameter\n-    Map<Long, PaxosValue> learnerRecords();\n-\n-    @Value.Parameter\n-    Map<Long, PaxosAcceptorState> acceptorRecords();\n-\n-    default Optional<PaxosValue> getLearnedValueAtSeqIfExists(long seq) {\n-        return Optional.ofNullable(learnerRecords().get(seq));\n-    }\n-\n-    default Optional<PaxosAcceptorState> getAcceptedValueAtSeqIfExists(long seq) {\n-        return Optional.ofNullable(acceptorRecords().getOrDefault(seq, null));\n-    }\n-\n-    // it is okay to have a set of longs as learner and acceptor records have a limit of 500 entries.\n-    @Value.Lazy\n-    default Set<Long> getAllSequenceNumbers() {\n-        return Stream.of(learnerRecords(), acceptorRecords())\n-                .map(Map::keySet)\n-                .flatMap(Set::stream)\n-                .collect(Collectors.toSet());\n-    }\n-}\n"}}, {"oid": "74ed0dee8c39ab27c1a1809c48957007d992c590", "url": "https://github.com/palantir/atlasdb/commit/74ed0dee8c39ab27c1a1809c48957007d992c590", "message": "Local history loader", "committedDate": "2020-09-24T07:33:08Z", "type": "commit"}, {"oid": "4b703fb4da82bf939f4a0e92b992cd87c56ac79c", "url": "https://github.com/palantir/atlasdb/commit/4b703fb4da82bf939f4a0e92b992cd87c56ac79c", "message": "Refactor", "committedDate": "2020-09-24T07:33:08Z", "type": "commit"}, {"oid": "87b8c564526a76963d5dfe6da066f5eb86b149ea", "url": "https://github.com/palantir/atlasdb/commit/87b8c564526a76963d5dfe6da066f5eb86b149ea", "message": "Minor cleanup", "committedDate": "2020-09-24T07:33:08Z", "type": "commit"}, {"oid": "b747102d6dedb78132bbbab767ead2bbd7786288", "url": "https://github.com/palantir/atlasdb/commit/b747102d6dedb78132bbbab767ead2bbd7786288", "message": "Refactor", "committedDate": "2020-09-24T07:33:08Z", "type": "commit"}, {"oid": "bbdbfee637221f6e083cc4007faf134e4217a26f", "url": "https://github.com/palantir/atlasdb/commit/bbdbfee637221f6e083cc4007faf134e4217a26f", "message": "Test", "committedDate": "2020-09-24T07:33:08Z", "type": "commit"}, {"oid": "380b763df4d6c9a9bd3339bae86c16eb2af02314", "url": "https://github.com/palantir/atlasdb/commit/380b763df4d6c9a9bd3339bae86c16eb2af02314", "message": "Refactor + remove todos", "committedDate": "2020-09-24T07:33:08Z", "type": "commit"}, {"oid": "a480f122c5cc9f44544bad07fb33d23cbe95b08c", "url": "https://github.com/palantir/atlasdb/commit/a480f122c5cc9f44544bad07fb33d23cbe95b08c", "message": "More tests", "committedDate": "2020-09-24T07:33:08Z", "type": "commit"}, {"oid": "b7333af831c1f1b50f3d728166cc0a5e797be3ce", "url": "https://github.com/palantir/atlasdb/commit/b7333af831c1f1b50f3d728166cc0a5e797be3ce", "message": "Remove redundant + refactor", "committedDate": "2020-09-24T07:33:08Z", "type": "commit"}, {"oid": "a543bedd107cfbad1efad4f4015a5097bc32292c", "url": "https://github.com/palantir/atlasdb/commit/a543bedd107cfbad1efad4f4015a5097bc32292c", "message": "Fix test?", "committedDate": "2020-09-24T07:33:08Z", "type": "commit"}, {"oid": "c8ac86fd1b8446671006ccef1eb9fc08056e27e3", "url": "https://github.com/palantir/atlasdb/commit/c8ac86fd1b8446671006ccef1eb9fc08056e27e3", "message": "Address comments - 1 | Refactor", "committedDate": "2020-09-24T07:33:08Z", "type": "commit"}, {"oid": "a7820b2d9fabe720671ddb9f88de799ccd6e7e68", "url": "https://github.com/palantir/atlasdb/commit/a7820b2d9fabe720671ddb9f88de799ccd6e7e68", "message": "Address comments - 2 | Rename project", "committedDate": "2020-09-24T07:47:56Z", "type": "commit"}, {"oid": "9248c39d8f09f4e9596cc52191bad5b3d820806e", "url": "https://github.com/palantir/atlasdb/commit/9248c39d8f09f4e9596cc52191bad5b3d820806e", "message": "Add generated changelog entries", "committedDate": "2020-09-24T07:50:21Z", "type": "commit"}, {"oid": "1ad6f004bdd8b2c7934447256e12ad44d8e13b18", "url": "https://github.com/palantir/atlasdb/commit/1ad6f004bdd8b2c7934447256e12ad44d8e13b18", "message": "WIP | conjure", "committedDate": "2020-09-24T07:50:21Z", "type": "commit"}, {"oid": "5dc805432541a9f4224a7e7959236afe3efc23b3", "url": "https://github.com/palantir/atlasdb/commit/5dc805432541a9f4224a7e7959236afe3efc23b3", "message": "History provider resource", "committedDate": "2020-09-24T07:50:21Z", "type": "commit"}, {"oid": "5a07ab04b93cb2aff969bdc12f28d6d65c0e0362", "url": "https://github.com/palantir/atlasdb/commit/5a07ab04b93cb2aff969bdc12f28d6d65c0e0362", "message": "Fixes", "committedDate": "2020-09-24T07:50:21Z", "type": "commit"}, {"oid": "176a050dba2c45ae6242a7bec69a394d82130d5f", "url": "https://github.com/palantir/atlasdb/commit/176a050dba2c45ae6242a7bec69a394d82130d5f", "message": "Tests + bug fix", "committedDate": "2020-09-24T07:50:21Z", "type": "commit"}, {"oid": "36f987984d3ad9cfd66e55fe0199a06e4f62673d", "url": "https://github.com/palantir/atlasdb/commit/36f987984d3ad9cfd66e55fe0199a06e4f62673d", "message": "Add tests", "committedDate": "2020-09-24T07:50:21Z", "type": "commit"}, {"oid": "cefe632b00b651860b3aa029922339a9d4d661a5", "url": "https://github.com/palantir/atlasdb/commit/cefe632b00b651860b3aa029922339a9d4d661a5", "message": "Address comments - 1", "committedDate": "2020-09-24T07:50:21Z", "type": "commit"}, {"oid": "bd28f1f4cd9b3ffef45720b2bd563140241f5e0b", "url": "https://github.com/palantir/atlasdb/commit/bd28f1f4cd9b3ffef45720b2bd563140241f5e0b", "message": "Move api to timelock-corruption-detection", "committedDate": "2020-09-24T07:50:21Z", "type": "commit"}, {"oid": "b167810a5b589f29ca678e2c3cebec6ab43f2069", "url": "https://github.com/palantir/atlasdb/commit/b167810a5b589f29ca678e2c3cebec6ab43f2069", "message": "Nits", "committedDate": "2020-09-24T07:50:21Z", "type": "commit"}, {"oid": "2dbe59a2938364bc197ac7bb89b1f4ef99ec2588", "url": "https://github.com/palantir/atlasdb/commit/2dbe59a2938364bc197ac7bb89b1f4ef99ec2588", "message": "Refactor", "committedDate": "2020-09-24T07:50:22Z", "type": "commit"}, {"oid": "af1855b692cc8923d6eb7e40b291210abb578bf3", "url": "https://github.com/palantir/atlasdb/commit/af1855b692cc8923d6eb7e40b291210abb578bf3", "message": "gitignore conjure", "committedDate": "2020-09-24T07:50:22Z", "type": "commit"}, {"oid": "c2d72587ce7a34a31bf7e5fc1ae9f5cee65f41d7", "url": "https://github.com/palantir/atlasdb/commit/c2d72587ce7a34a31bf7e5fc1ae9f5cee65f41d7", "message": "Remove redundant", "committedDate": "2020-09-24T07:50:22Z", "type": "commit"}, {"oid": "459f82a408775f6aaf15cfc05de8d444814114a3", "url": "https://github.com/palantir/atlasdb/commit/459f82a408775f6aaf15cfc05de8d444814114a3", "message": "Checkstyle", "committedDate": "2020-09-24T07:50:22Z", "type": "commit"}, {"oid": "91625c8376260f1efaae6ea458f3f4502a149dc3", "url": "https://github.com/palantir/atlasdb/commit/91625c8376260f1efaae6ea458f3f4502a149dc3", "message": "Bump schema", "committedDate": "2020-09-24T07:50:22Z", "type": "commit"}, {"oid": "fcc59cae584ea85f6969cb1db5cab7adf1ecfa5f", "url": "https://github.com/palantir/atlasdb/commit/fcc59cae584ea85f6969cb1db5cab7adf1ecfa5f", "message": "Remote history response pojo", "committedDate": "2020-09-24T07:50:22Z", "type": "commit"}, {"oid": "306893d34028624d18e9dfab4604329842e396b2", "url": "https://github.com/palantir/atlasdb/commit/306893d34028624d18e9dfab4604329842e396b2", "message": "Address comments - 1 | tests", "committedDate": "2020-09-24T07:50:22Z", "type": "commit"}, {"oid": "026044f18e7033640cb78122e00233d19f665e69", "url": "https://github.com/palantir/atlasdb/commit/026044f18e7033640cb78122e00233d19f665e69", "message": "Address comments - 2", "committedDate": "2020-09-24T07:50:22Z", "type": "commit"}, {"oid": "735a5d1713dcdafb308767c5e9257ccc985249c0", "url": "https://github.com/palantir/atlasdb/commit/735a5d1713dcdafb308767c5e9257ccc985249c0", "message": "Address comments - 3 | Major refactor", "committedDate": "2020-09-24T07:54:23Z", "type": "commit"}, {"oid": "7b40899857be0abfd3b122d94e52b75c36afe878", "url": "https://github.com/palantir/atlasdb/commit/7b40899857be0abfd3b122d94e52b75c36afe878", "message": "bug fix | optional fields", "committedDate": "2020-09-24T07:54:23Z", "type": "commit"}, {"oid": "c13197f4727bda70f61b282b5002efd33071c725", "url": "https://github.com/palantir/atlasdb/commit/c13197f4727bda70f61b282b5002efd33071c725", "message": "remove redundant code + comment", "committedDate": "2020-09-24T07:54:23Z", "type": "commit"}, {"oid": "04dae916a70585388c89ac072435463f18d08391", "url": "https://github.com/palantir/atlasdb/commit/04dae916a70585388c89ac072435463f18d08391", "message": "Wire", "committedDate": "2020-09-24T07:55:57Z", "type": "commit"}, {"oid": "de621c3ad66dfcf112d453baa0ab7b3b893b9e7c", "url": "https://github.com/palantir/atlasdb/commit/de621c3ad66dfcf112d453baa0ab7b3b893b9e7c", "message": "Address comments", "committedDate": "2020-09-24T07:55:57Z", "type": "commit"}, {"oid": "0373296016aefb0251c9c120f338e9bb259578f8", "url": "https://github.com/palantir/atlasdb/commit/0373296016aefb0251c9c120f338e9bb259578f8", "message": "Autorelease 0.247.2-rc2", "committedDate": "2020-09-24T07:55:57Z", "type": "commit"}, {"oid": "42f2c0e5be70a45be40d8af8cdfb560b490059b9", "url": "https://github.com/palantir/atlasdb/commit/42f2c0e5be70a45be40d8af8cdfb560b490059b9", "message": "Checkstyles", "committedDate": "2020-09-24T07:57:33Z", "type": "commit"}, {"oid": "465d0b0e6e89bfc75a34501068decbc07dfa858c", "url": "https://github.com/palantir/atlasdb/commit/465d0b0e6e89bfc75a34501068decbc07dfa858c", "message": "CheckstyleTest", "committedDate": "2020-09-24T07:57:59Z", "type": "commit"}, {"oid": "465d0b0e6e89bfc75a34501068decbc07dfa858c", "url": "https://github.com/palantir/atlasdb/commit/465d0b0e6e89bfc75a34501068decbc07dfa858c", "message": "CheckstyleTest", "committedDate": "2020-09-24T07:57:59Z", "type": "forcePushed"}, {"oid": "c1816c2c0c9b052decc2acb475d0316c4e56a0f8", "url": "https://github.com/palantir/atlasdb/commit/c1816c2c0c9b052decc2acb475d0316c4e56a0f8", "message": "FIx", "committedDate": "2020-09-24T08:38:15Z", "type": "commit"}, {"oid": "1400b8524bd5ee8f885ced8b07f7afe88aad2d38", "url": "https://github.com/palantir/atlasdb/commit/1400b8524bd5ee8f885ced8b07f7afe88aad2d38", "message": "Bug fix + refactor", "committedDate": "2020-09-24T09:23:41Z", "type": "commit"}, {"oid": "caccb19e3df6cbe4894e1581fa876f65a70fd724", "url": "https://github.com/palantir/atlasdb/commit/caccb19e3df6cbe4894e1581fa876f65a70fd724", "message": "Minor", "committedDate": "2020-09-24T09:24:56Z", "type": "commit"}, {"oid": "a8d392011d9136fa063be17d8b2ffbb6526c9b50", "url": "https://github.com/palantir/atlasdb/commit/a8d392011d9136fa063be17d8b2ffbb6526c9b50", "message": "Bug fix + checkstyle", "committedDate": "2020-09-24T10:02:14Z", "type": "commit"}, {"oid": "97744926b4006e5e4f7c1533b4bf921d33c93aba", "url": "https://github.com/palantir/atlasdb/commit/97744926b4006e5e4f7c1533b4bf921d33c93aba", "message": "Add generated changelog entries", "committedDate": "2020-09-24T10:02:14Z", "type": "commit"}, {"oid": "e3d8ed2831d5ebe56a52ead27396650559d0e31a", "url": "https://github.com/palantir/atlasdb/commit/e3d8ed2831d5ebe56a52ead27396650559d0e31a", "message": "Bump schema", "committedDate": "2020-09-24T10:12:59Z", "type": "commit"}, {"oid": "2023cccb0d66d3f5ba78d7c78b87d4b57f460982", "url": "https://github.com/palantir/atlasdb/commit/2023cccb0d66d3f5ba78d7c78b87d4b57f460982", "message": "Fix", "committedDate": "2020-09-24T10:16:05Z", "type": "commit"}, {"oid": "f549c84364c8ae91e32f7ba7df50ff40ca4bdd41", "url": "https://github.com/palantir/atlasdb/commit/f549c84364c8ae91e32f7ba7df50ff40ca4bdd41", "message": "Minor refactor", "committedDate": "2020-09-24T10:16:54Z", "type": "commit"}, {"oid": "80fd9d15f564a81235ae61fcfeff9bdbfe8393db", "url": "https://github.com/palantir/atlasdb/commit/80fd9d15f564a81235ae61fcfeff9bdbfe8393db", "message": "remove redundant", "committedDate": "2020-09-24T10:18:47Z", "type": "commit"}, {"oid": "7e72cbf9b487a2f0bf823715458571bbde0a9082", "url": "https://github.com/palantir/atlasdb/commit/7e72cbf9b487a2f0bf823715458571bbde0a9082", "message": "Schema bump not required", "committedDate": "2020-09-24T11:04:49Z", "type": "commit"}]}