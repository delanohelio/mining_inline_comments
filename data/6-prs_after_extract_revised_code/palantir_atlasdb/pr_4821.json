{"pr_number": 4821, "pr_title": "[GCV Blocker] Don't use org.json.simple", "pr_createdAt": "2020-06-03T20:05:00Z", "pr_url": "https://github.com/palantir/atlasdb/pull/4821", "timeline": [{"oid": "819ca115a1e4eea4275328c92076d33282051e87", "url": "https://github.com/palantir/atlasdb/commit/819ca115a1e4eea4275328c92076d33282051e87", "message": "NMD Test", "committedDate": "2020-06-03T19:26:25Z", "type": "commit"}, {"oid": "e1b72bef743d112882a229dd24467caffd5fc3b8", "url": "https://github.com/palantir/atlasdb/commit/e1b72bef743d112882a229dd24467caffd5fc3b8", "message": "NMD and tests", "committedDate": "2020-06-03T19:41:28Z", "type": "commit"}, {"oid": "de921b6373ffd2fcb79bdb09e236cc9538d31f16", "url": "https://github.com/palantir/atlasdb/commit/de921b6373ffd2fcb79bdb09e236cc9538d31f16", "message": "Don't use orgjson", "committedDate": "2020-06-03T19:43:27Z", "type": "commit"}, {"oid": "0b61844c9f2f6773bdf3c59c95e8851a001c06d6", "url": "https://github.com/palantir/atlasdb/commit/0b61844c9f2f6773bdf3c59c95e8851a001c06d6", "message": "Finish removal of jsonsimple", "committedDate": "2020-06-03T19:54:18Z", "type": "commit"}, {"oid": "47262452eae5ef0eacee6f466f0bd30bfb7061d1", "url": "https://github.com/palantir/atlasdb/commit/47262452eae5ef0eacee6f466f0bd30bfb7061d1", "message": "valuetype test", "committedDate": "2020-06-03T20:02:50Z", "type": "commit"}, {"oid": "9ffd37065ddf8da843df39ecff27ecd6a2b5cdbf", "url": "https://github.com/palantir/atlasdb/commit/9ffd37065ddf8da843df39ecff27ecd6a2b5cdbf", "message": "no conjure", "committedDate": "2020-06-03T20:19:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA3ODUyNg==", "url": "https://github.com/palantir/atlasdb/pull/4821#discussion_r435078526", "bodyText": "nit: I think there were two spaces after the full stop\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                \"Only JSON objects can be deserialized into parsed byte arrays.  Passed json was: %s\",\n          \n          \n            \n                                \"Only JSON objects can be deserialized into parsed byte arrays. Passed json was: %s\",", "author": "Jolyon-S", "createdAt": "2020-06-04T08:23:46Z", "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/table/description/NameMetadataDescription.java", "diffHunk": "@@ -183,8 +185,13 @@ public String renderToJson(byte[] name) {\n \n     public byte[] parseFromJson(String json, boolean allowPrefix) {\n         try {\n-            JSONObject obj = (JSONObject) new JSONParser().parse(json);\n-            int numDefinedFields = countNumDefinedFields(obj);\n+            JsonNode jsonNode = OBJECT_MAPPER.readTree(json);\n+            Preconditions.checkState(jsonNode.isObject(),\n+                    \"Only JSON objects can be deserialized into parsed byte arrays.  Passed json was: %s\",", "originalCommit": "9ffd37065ddf8da843df39ecff27ecd6a2b5cdbf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA5Nzc1OA==", "url": "https://github.com/palantir/atlasdb/pull/4821#discussion_r435097758", "bodyText": "I wouldn't normally write this, but this is intentional given the other error messages also have this.", "author": "jeremyk-91", "createdAt": "2020-06-04T08:55:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA3ODUyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEwMDMzOQ==", "url": "https://github.com/palantir/atlasdb/pull/4821#discussion_r435100339", "bodyText": "Ah well, whatever.", "author": "Jolyon-S", "createdAt": "2020-06-04T08:59:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA3ODUyNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA4MTY0MQ==", "url": "https://github.com/palantir/atlasdb/pull/4821#discussion_r435081641", "bodyText": "To make sure I understand: before, you would get SafeIllegalArgumentExceptions if this was not a string, but now you just get a plain RuntimeException that wraps an IOException. Is my understanding correct, and is this behaviour OK?", "author": "Jolyon-S", "createdAt": "2020-06-04T08:28:57Z", "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/table/description/ValueType.java", "diffHunk": "@@ -464,9 +463,7 @@ public String convertToJava(byte[] value, int offset) {\n \n         @Override\n         public byte[] convertFromJson(String jsonValue) {\n-            Object s = JSONValue.parse(jsonValue);\n-            Preconditions.checkArgument(s instanceof String, \"%s must be a json string\", jsonValue);\n-            return convertFromString((String) s);\n+            return convertFromString(ValueType.readJson(jsonValue, String.class));", "originalCommit": "9ffd37065ddf8da843df39ecff27ecd6a2b5cdbf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEwMzIzNg==", "url": "https://github.com/palantir/atlasdb/pull/4821#discussion_r435103236", "bodyText": "That's mostly correct (strictly speaking: it used Google, not Palantir Preconditions, so you'd just get a regular IllegalArgumentException). That's a good call: I think that is fine, but I'll change it back.", "author": "jeremyk-91", "createdAt": "2020-06-04T09:04:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA4MTY0MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA4NDY2Mg==", "url": "https://github.com/palantir/atlasdb/pull/4821#discussion_r435084662", "bodyText": "I can't quite understand this test - it implies to me that you could get either result non-deterministically. Is this really the case currently?", "author": "Jolyon-S", "createdAt": "2020-06-04T08:33:50Z", "path": "atlasdb-client/src/test/java/com/palantir/atlasdb/table/description/NameMetadataDescriptionTest.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.table.description;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableList;\n+import com.palantir.atlasdb.encoding.PtBytes;\n+import com.palantir.atlasdb.protos.generated.TableMetadataPersistence;\n+import com.palantir.atlasdb.ptobject.EncodingUtils;\n+import com.palantir.common.exception.PalantirRuntimeException;\n+\n+public class NameMetadataDescriptionTest {\n+    private static final NameMetadataDescription SIMPLE_NAME_METADATA_DESCRIPTION = NameMetadataDescription.safe(\n+            \"string\", ValueType.STRING);\n+    private static final NameMetadataDescription MULTIPART_NAME_METADATA_DESCRIPTION = NameMetadataDescription.create(\n+            ImmutableList.of(\n+                    new NameComponentDescription.Builder()\n+                            .componentName(\"alpha\")\n+                            .type(ValueType.VAR_LONG)\n+                            .byteOrder(TableMetadataPersistence.ValueByteOrder.DESCENDING)\n+                            .build(),\n+                    NameComponentDescription.safe(\"beta\", ValueType.SIZED_BLOB),\n+                    NameComponentDescription.safe(\"gamma\", ValueType.VAR_STRING),\n+                    NameComponentDescription.safe(\"omega\", ValueType.STRING)));\n+\n+    private static final byte[] SAMPLE_ALPHA = EncodingUtils.flipAllBits(ValueType.VAR_LONG.convertFromJava(42L));\n+    private static final byte[] SAMPLE_BETA = ValueType.SIZED_BLOB.convertFromJava(new byte[5]);\n+    private static final byte[] SAMPLE_GAMMA = ValueType.VAR_STRING.convertFromString(\"boo\");\n+    private static final byte[] SAMPLE_OMEGA = ValueType.STRING.convertFromString(\"O(n)\");\n+    private static final byte[] SAMPLE_ROW = EncodingUtils.add(SAMPLE_ALPHA, SAMPLE_BETA, SAMPLE_GAMMA, SAMPLE_OMEGA);\n+    private static final byte[] SAMPLE_ROW_PREFIX = EncodingUtils.add(SAMPLE_ALPHA, SAMPLE_BETA);\n+\n+    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+\n+    @Test\n+    public void parseAndRenderAreInverses_Simple() {\n+        byte[] row = PtBytes.toBytes(\"theData\");\n+        assertThat(SIMPLE_NAME_METADATA_DESCRIPTION.parseFromJson(\n+                SIMPLE_NAME_METADATA_DESCRIPTION.renderToJson(row), false)).containsExactly(row);\n+    }\n+\n+    @Test\n+    public void extraFieldsAreTolerated() {\n+        String extraFieldJson = \"{\\\"string\\\": \\\"tom\\\", \\\"extraneous\\\": \\\"another\\\"}\";\n+        byte[] result = SIMPLE_NAME_METADATA_DESCRIPTION.parseFromJson(extraFieldJson, false);\n+        assertThat(result).containsExactly(PtBytes.toBytes(\"tom\"));\n+    }\n+\n+    @Test\n+    // TODO (jkong): This looks ridiculous, but I don't wish to change existing behaviour.\n+    public void duplicateFieldsAreTolerated() {\n+        String invalidJson = \"{\\\"string\\\": \\\"tom\\\", \\\"string\\\": \\\"robert\\\"}\";\n+        byte[] result = SIMPLE_NAME_METADATA_DESCRIPTION.parseFromJson(invalidJson, false);\n+        assertThat(result).satisfiesAnyOf(\n+                (bytes) -> assertThat(bytes).containsExactly(PtBytes.toBytes(\"tom\")),\n+                (bytes) -> assertThat(bytes).containsExactly(PtBytes.toBytes(\"robert\")));", "originalCommit": "9ffd37065ddf8da843df39ecff27ecd6a2b5cdbf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEwMzQ0MA==", "url": "https://github.com/palantir/atlasdb/pull/4821#discussion_r435103440", "bodyText": "Currently you'll always get robert (in general, the last key-value mapping). This is dependent on the JSON library, though - while we could write just that assertion I don't think it's something we can guarantee.\nI think my comment was probably a bit misleading in that \"don't wish to change\" referred to \"tolerate duplicate fields\", not specifically which key gets returned.", "author": "jeremyk-91", "createdAt": "2020-06-04T09:04:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA4NDY2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEwNjY2OQ==", "url": "https://github.com/palantir/atlasdb/pull/4821#discussion_r435106669", "bodyText": "I think the comments you have provided make this a lot clearer. Thanks!", "author": "Jolyon-S", "createdAt": "2020-06-04T09:10:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA4NDY2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e0cba74c5de8e6fb234f867dd7929a4cdd3aab37", "chunk": "diff --git a/atlasdb-client/src/test/java/com/palantir/atlasdb/table/description/NameMetadataDescriptionTest.java b/atlasdb-client/src/test/java/com/palantir/atlasdb/table/description/NameMetadataDescriptionTest.java\nindex b5e082ddc1..28aeebd816 100644\n--- a/atlasdb-client/src/test/java/com/palantir/atlasdb/table/description/NameMetadataDescriptionTest.java\n+++ b/atlasdb-client/src/test/java/com/palantir/atlasdb/table/description/NameMetadataDescriptionTest.java\n\n@@ -34,6 +34,7 @@ import com.palantir.common.exception.PalantirRuntimeException;\n public class NameMetadataDescriptionTest {\n     private static final NameMetadataDescription SIMPLE_NAME_METADATA_DESCRIPTION = NameMetadataDescription.safe(\n             \"string\", ValueType.STRING);\n+\n     private static final NameMetadataDescription MULTIPART_NAME_METADATA_DESCRIPTION = NameMetadataDescription.create(\n             ImmutableList.of(\n                     new NameComponentDescription.Builder()\n"}}, {"oid": "e0cba74c5de8e6fb234f867dd7929a4cdd3aab37", "url": "https://github.com/palantir/atlasdb/commit/e0cba74c5de8e6fb234f867dd7929a4cdd3aab37", "message": "CR feedback", "committedDate": "2020-06-04T09:05:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE4MTMwNg==", "url": "https://github.com/palantir/atlasdb/pull/4821#discussion_r435181306", "bodyText": "I think the flag should be true for it to be in prefix mode?", "author": "sudiksha27", "createdAt": "2020-06-04T11:24:33Z", "path": "atlasdb-client/src/test/java/com/palantir/atlasdb/table/description/NameMetadataDescriptionTest.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.table.description;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.google.common.collect.ImmutableList;\n+import com.palantir.atlasdb.encoding.PtBytes;\n+import com.palantir.atlasdb.protos.generated.TableMetadataPersistence;\n+import com.palantir.atlasdb.ptobject.EncodingUtils;\n+import com.palantir.common.exception.PalantirRuntimeException;\n+\n+public class NameMetadataDescriptionTest {\n+    private static final NameMetadataDescription SIMPLE_NAME_METADATA_DESCRIPTION = NameMetadataDescription.safe(\n+            \"string\", ValueType.STRING);\n+\n+    private static final NameMetadataDescription MULTIPART_NAME_METADATA_DESCRIPTION = NameMetadataDescription.create(\n+            ImmutableList.of(\n+                    new NameComponentDescription.Builder()\n+                            .componentName(\"alpha\")\n+                            .type(ValueType.VAR_LONG)\n+                            .byteOrder(TableMetadataPersistence.ValueByteOrder.DESCENDING)\n+                            .build(),\n+                    NameComponentDescription.safe(\"beta\", ValueType.SIZED_BLOB),\n+                    NameComponentDescription.safe(\"gamma\", ValueType.VAR_STRING),\n+                    NameComponentDescription.safe(\"omega\", ValueType.STRING)));\n+\n+    private static final byte[] SAMPLE_ALPHA = EncodingUtils.flipAllBits(ValueType.VAR_LONG.convertFromJava(42L));\n+    private static final byte[] SAMPLE_BETA = ValueType.SIZED_BLOB.convertFromJava(new byte[5]);\n+    private static final byte[] SAMPLE_GAMMA = ValueType.VAR_STRING.convertFromString(\"boo\");\n+    private static final byte[] SAMPLE_OMEGA = ValueType.STRING.convertFromString(\"O(n)\");\n+    private static final byte[] SAMPLE_ROW = EncodingUtils.add(SAMPLE_ALPHA, SAMPLE_BETA, SAMPLE_GAMMA, SAMPLE_OMEGA);\n+    private static final byte[] SAMPLE_ROW_PREFIX = EncodingUtils.add(SAMPLE_ALPHA, SAMPLE_BETA);\n+\n+    private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();\n+\n+    @Test\n+    public void parseAndRenderAreInverses_Simple() {\n+        byte[] row = PtBytes.toBytes(\"theData\");\n+        assertThat(SIMPLE_NAME_METADATA_DESCRIPTION.parseFromJson(\n+                SIMPLE_NAME_METADATA_DESCRIPTION.renderToJson(row), false)).containsExactly(row);\n+    }\n+\n+    @Test\n+    public void extraFieldsAreTolerated() {\n+        String extraFieldJson = \"{\\\"string\\\": \\\"tom\\\", \\\"extraneous\\\": \\\"another\\\"}\";\n+        byte[] result = SIMPLE_NAME_METADATA_DESCRIPTION.parseFromJson(extraFieldJson, false);\n+        assertThat(result).containsExactly(PtBytes.toBytes(\"tom\"));\n+    }\n+\n+    @Test\n+    // TODO (jkong): Tolerating duplicate fields was permitted, even though it is a bit dubious.\n+    public void duplicateFieldsAreTolerated() {\n+        String invalidJson = \"{\\\"string\\\": \\\"tom\\\", \\\"string\\\": \\\"robert\\\"}\";\n+        byte[] result = SIMPLE_NAME_METADATA_DESCRIPTION.parseFromJson(invalidJson, false);\n+        \n+        // Which value is selected is an implementation detail - we should not guarantee this.\n+        assertThat(result).satisfiesAnyOf(\n+                (bytes) -> assertThat(bytes).containsExactly(PtBytes.toBytes(\"tom\")),\n+                (bytes) -> assertThat(bytes).containsExactly(PtBytes.toBytes(\"robert\")));\n+    }\n+\n+    @Test\n+    public void throwsIfNoRelevantFieldsProvided() {\n+        String missingFields = \"{\\\"type\\\": \\\"string\\\"}\";\n+\n+        assertThatThrownBy(() -> SIMPLE_NAME_METADATA_DESCRIPTION.parseFromJson(missingFields, false))\n+                .isInstanceOf(IllegalArgumentException.class)\n+                .hasMessageContaining(\"JSON object needs a field named: string.\");\n+    }\n+\n+    @Test\n+    public void throwsOnRawJsonString() {\n+        String jsonString = \"\\\"string\\\"\";\n+\n+        assertThatThrownBy(() -> SIMPLE_NAME_METADATA_DESCRIPTION.parseFromJson(jsonString, false))\n+                .isInstanceOf(IllegalStateException.class)\n+                .hasMessageContaining(\"Only JSON objects can be deserialized into parsed byte arrays.\");\n+    }\n+\n+    @Test\n+    public void throwsOnArrays() {\n+        String jsonString = \"[\\\"string\\\"]\";\n+\n+        assertThatThrownBy(() -> SIMPLE_NAME_METADATA_DESCRIPTION.parseFromJson(jsonString, false))\n+                .isInstanceOf(IllegalStateException.class)\n+                .hasMessageContaining(\"Only JSON objects can be deserialized into parsed byte arrays.\");\n+    }\n+\n+    @Test\n+    public void throwsOnNonJsonInput() {\n+        String gobbledygook = \"]q2!a0v-_13r\";\n+\n+        assertThatThrownBy(() -> SIMPLE_NAME_METADATA_DESCRIPTION.parseFromJson(gobbledygook, false))\n+                .isInstanceOf(PalantirRuntimeException.class)\n+                .hasMessageContaining(\"Unexpected close marker\");\n+    }\n+\n+    @Test\n+    public void parseAndRenderAreInverses_MultiPart() {\n+        assertThat(MULTIPART_NAME_METADATA_DESCRIPTION.parseFromJson(\n+                MULTIPART_NAME_METADATA_DESCRIPTION.renderToJson(SAMPLE_ROW), false)).containsExactly(SAMPLE_ROW);\n+    }\n+\n+    @Test\n+    public void missingFieldsAreNotToleratedWithoutPrefix() throws JsonProcessingException {\n+        JsonNode jsonNode = OBJECT_MAPPER.readTree(MULTIPART_NAME_METADATA_DESCRIPTION.renderToJson(SAMPLE_ROW));\n+        ((ObjectNode) jsonNode).remove(ImmutableList.of(\"gamma\", \"omega\"));\n+\n+        assertThatThrownBy(() -> MULTIPART_NAME_METADATA_DESCRIPTION.parseFromJson(jsonNode.toString(), false))\n+                .isInstanceOf(IllegalArgumentException.class)\n+                .hasMessageContaining(\"JSON object has 2 defined fields, but the number of row components is 4.\");\n+    }\n+\n+    @Test\n+    public void missingSuffixFieldsAreToleratedInPrefixMode() throws JsonProcessingException {\n+        JsonNode jsonNode = OBJECT_MAPPER.readTree(MULTIPART_NAME_METADATA_DESCRIPTION.renderToJson(SAMPLE_ROW));\n+        ((ObjectNode) jsonNode).remove(ImmutableList.of(\"gamma\", \"omega\"));\n+\n+        byte[] bytes = MULTIPART_NAME_METADATA_DESCRIPTION.parseFromJson(jsonNode.toString(), true);\n+        assertThat(bytes).containsExactly(SAMPLE_ROW_PREFIX);\n+    }\n+\n+    @Test\n+    public void missingNonSuffixFieldsAreNotToleratedInPrefixMode() throws JsonProcessingException {\n+        JsonNode jsonNode = OBJECT_MAPPER.readTree(MULTIPART_NAME_METADATA_DESCRIPTION.renderToJson(SAMPLE_ROW));\n+        ((ObjectNode) jsonNode).remove(ImmutableList.of(\"alpha\", \"omega\"));\n+\n+        assertThatThrownBy(() -> MULTIPART_NAME_METADATA_DESCRIPTION.parseFromJson(jsonNode.toString(), false))\n+                .isInstanceOf(IllegalArgumentException.class)", "originalCommit": "e0cba74c5de8e6fb234f867dd7929a4cdd3aab37", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIxNTI2OQ==", "url": "https://github.com/palantir/atlasdb/pull/4821#discussion_r435215269", "bodyText": "Well spotted! I'll fix this", "author": "jeremyk-91", "createdAt": "2020-06-04T12:30:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE4MTMwNg=="}], "type": "inlineReview", "revised_code": {"commit": "c31366d938f15cf9315cf6ab18aeb54e9d88aff9", "chunk": "diff --git a/atlasdb-client/src/test/java/com/palantir/atlasdb/table/description/NameMetadataDescriptionTest.java b/atlasdb-client/src/test/java/com/palantir/atlasdb/table/description/NameMetadataDescriptionTest.java\nindex 28aeebd816..4eea3420ab 100644\n--- a/atlasdb-client/src/test/java/com/palantir/atlasdb/table/description/NameMetadataDescriptionTest.java\n+++ b/atlasdb-client/src/test/java/com/palantir/atlasdb/table/description/NameMetadataDescriptionTest.java\n\n@@ -147,7 +147,7 @@ public class NameMetadataDescriptionTest {\n         JsonNode jsonNode = OBJECT_MAPPER.readTree(MULTIPART_NAME_METADATA_DESCRIPTION.renderToJson(SAMPLE_ROW));\n         ((ObjectNode) jsonNode).remove(ImmutableList.of(\"alpha\", \"omega\"));\n \n-        assertThatThrownBy(() -> MULTIPART_NAME_METADATA_DESCRIPTION.parseFromJson(jsonNode.toString(), false))\n+        assertThatThrownBy(() -> MULTIPART_NAME_METADATA_DESCRIPTION.parseFromJson(jsonNode.toString(), true))\n                 .isInstanceOf(IllegalArgumentException.class)\n                 .hasMessageContaining(\"JSON object is missing field: alpha\");\n     }\n"}}, {"oid": "c31366d938f15cf9315cf6ab18aeb54e9d88aff9", "url": "https://github.com/palantir/atlasdb/commit/c31366d938f15cf9315cf6ab18aeb54e9d88aff9", "message": "Bad test", "committedDate": "2020-06-04T12:43:13Z", "type": "commit"}]}