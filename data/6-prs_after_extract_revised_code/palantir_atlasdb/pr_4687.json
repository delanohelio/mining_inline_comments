{"pr_number": 4687, "pr_title": "getRowsColumnRange always has cells grouped by row", "pr_createdAt": "2020-03-30T20:19:33Z", "pr_url": "https://github.com/palantir/atlasdb/pull/4687", "timeline": [{"oid": "6b97c69a1cc8d4162e0699a8bfcd35ebaf48bf99", "url": "https://github.com/palantir/atlasdb/commit/6b97c69a1cc8d4162e0699a8bfcd35ebaf48bf99", "message": "getRowsColumnRange always has cells grouped by row\n\nEnsure that throughout the iterator manipulation that happens\ninternally to getRowsColumnRange that we maintain the invariant\nthat all cells for a given row will be grouped together at the end.", "committedDate": "2020-03-30T20:03:27Z", "type": "commit"}, {"oid": "b9e503a192b731b17bea50c52ee3feff3c1b90ff", "url": "https://github.com/palantir/atlasdb/commit/b9e503a192b731b17bea50c52ee3feff3c1b90ff", "message": "Preserve original row ordering", "committedDate": "2020-03-31T01:20:12Z", "type": "commit"}, {"oid": "a1aedd2b1667caaf89db64e34000044e222cb22d", "url": "https://github.com/palantir/atlasdb/commit/a1aedd2b1667caaf89db64e34000044e222cb22d", "message": "checkstyle", "committedDate": "2020-03-31T13:56:32Z", "type": "commit"}, {"oid": "eb0025a69ea8d9b42267d17cf9b9a895266a7d1f", "url": "https://github.com/palantir/atlasdb/commit/eb0025a69ea8d9b42267d17cf9b9a895266a7d1f", "message": "Add generated changelog entries", "committedDate": "2020-03-31T13:56:32Z", "type": "commit"}, {"oid": "1ec084ab344940744d5d978bed28f44039c09982", "url": "https://github.com/palantir/atlasdb/commit/1ec084ab344940744d5d978bed28f44039c09982", "message": "Add generated changelog entries", "committedDate": "2020-03-31T13:56:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA0MjEwMg==", "url": "https://github.com/palantir/atlasdb/pull/4687#discussion_r401042102", "bodyText": "this refactor is unnecessary - ImmutableMap is in insertion order", "author": "j-baker", "createdAt": "2020-03-31T16:17:10Z", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransaction.java", "diffHunk": "@@ -476,19 +477,19 @@ public void disableReadWriteConflictChecking(TableReference tableRef) {\n     private Iterator<Map.Entry<Cell, Value>> getRowColumnRangePostFiltered(\n             TableReference tableRef, RowColumnRangeIterator iterator, int batchHint) {\n         return Iterators.concat(Iterators.transform(Iterators.partition(iterator, batchHint), batch -> {\n-            ImmutableMap.Builder<Cell, Value> rawBuilder = ImmutableMap.builder();\n-            batch.forEach(rawBuilder::put);\n-            Map<Cell, Value> raw = rawBuilder.build();\n+            // N.B. This batch could be spread across multiple rows, and those rows might extend into other\n+            // batches. We are given cells for a row grouped together, so easiest way to ensure they stay together\n+            // is to preserve the original order.\n+            Map<Cell, Value> raw = new LinkedHashMap<>();", "originalCommit": "a1aedd2b1667caaf89db64e34000044e222cb22d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e806c64230d736027d652f65f7f8a7cf4cc907fd", "chunk": "diff --git a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransaction.java b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransaction.java\nindex 6808da2cc2..f8a833b9d0 100644\n--- a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransaction.java\n+++ b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/transaction/impl/SnapshotTransaction.java\n\n@@ -477,19 +478,35 @@ public class SnapshotTransaction extends AbstractTransaction implements Constrai\n     private Iterator<Map.Entry<Cell, Value>> getRowColumnRangePostFiltered(\n             TableReference tableRef, RowColumnRangeIterator iterator, int batchHint) {\n         return Iterators.concat(Iterators.transform(Iterators.partition(iterator, batchHint), batch -> {\n-            // N.B. This batch could be spread across multiple rows, and those rows might extend into other\n-            // batches. We are given cells for a row grouped together, so easiest way to ensure they stay together\n-            // is to preserve the original order.\n-            Map<Cell, Value> raw = new LinkedHashMap<>();\n-            batch.forEach(entry -> raw.put(entry.getKey(), entry.getValue()));\n+            ImmutableMap.Builder<Cell, Value> rawBuilder = ImmutableMap.builder();\n+            batch.forEach(rawBuilder::put);\n+            Map<Cell, Value> raw = rawBuilder.build();\n+\n             validatePreCommitRequirementsOnReadIfNecessary(tableRef, getStartTimestamp());\n             if (raw.isEmpty()) {\n                 return Collections.emptyIterator();\n             }\n-            return getWithPostFilteringSync(\n-                    tableRef,\n-                    raw,\n-                    x -> x).iterator();\n+\n+            // N.B. This batch could be spread across multiple rows, and those rows might extend into other\n+            // batches. We are given cells for a row grouped together, so easiest way to ensure they stay together\n+            // is to preserve the original row order.\n+            Comparator<Cell> ordering = Comparator\n+                    .comparing(\n+                            (Cell cell) -> ByteBuffer.wrap(cell.getRowName()),\n+                            Ordering.explicit(batch.stream()\n+                                    .map(Map.Entry::getKey)\n+                                    .map(Cell::getRowName)\n+                                    .map(ByteBuffer::wrap)\n+                                    .distinct()\n+                                    .collect(ImmutableList.toImmutableList())))\n+                    .thenComparing(Cell::getColumnName, PtBytes.BYTES_COMPARATOR);\n+            SortedMap<Cell, Value> postFiltered = ImmutableSortedMap.copyOf(\n+                    getWithPostFilteringSync(\n+                            tableRef,\n+                            raw,\n+                            x -> x),\n+                    ordering);\n+            return postFiltered.entrySet().iterator();\n         }));\n     }\n \n"}}, {"oid": "e806c64230d736027d652f65f7f8a7cf4cc907fd", "url": "https://github.com/palantir/atlasdb/commit/e806c64230d736027d652f65f7f8a7cf4cc907fd", "message": "also handle aborted transactions", "committedDate": "2020-03-31T17:50:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc3Mzc4MQ==", "url": "https://github.com/palantir/atlasdb/pull/4687#discussion_r401773781", "bodyText": "can you comment why this test is there?", "author": "j-baker", "createdAt": "2020-04-01T17:08:10Z", "path": "atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/SnapshotTransactionTest.java", "diffHunk": "@@ -1184,6 +1226,7 @@ public void testRowsColumnRangesSingleIteratorVersion() {\n         runTestForGetRowsColumnRangeSingleIteratorVersion(10, 10, 5);\n         runTestForGetRowsColumnRangeSingleIteratorVersion(10, 10, 10);\n         runTestForGetRowsColumnRangeSingleIteratorVersion(100, 100, 99);\n+        runTestForGetRowsColumnRangeSingleIteratorVersion(100, 11, 0);", "originalCommit": "e806c64230d736027d652f65f7f8a7cf4cc907fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc4Mjc2OQ==", "url": "https://github.com/palantir/atlasdb/pull/4687#discussion_r401782769", "bodyText": "done! Wanted to test when a row's cells are spread across multiple batches", "author": "mswintermeyer", "createdAt": "2020-04-01T17:22:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc3Mzc4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "181e45d0bc8d207cd67a41580bc121b30e2b0048", "chunk": "diff --git a/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/SnapshotTransactionTest.java b/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/SnapshotTransactionTest.java\nindex 6566b60f85..0a1a0e5d9d 100644\n--- a/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/SnapshotTransactionTest.java\n+++ b/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/SnapshotTransactionTest.java\n\n@@ -1226,7 +1226,8 @@ public class SnapshotTransactionTest extends AtlasDbTestCase {\n         runTestForGetRowsColumnRangeSingleIteratorVersion(10, 10, 5);\n         runTestForGetRowsColumnRangeSingleIteratorVersion(10, 10, 10);\n         runTestForGetRowsColumnRangeSingleIteratorVersion(100, 100, 99);\n-        runTestForGetRowsColumnRangeSingleIteratorVersion(100, 11, 0);\n+        // Add a test where the numCellsPerRow (and total number of cells) is not evenly divisible by the batch size.\n+        runTestForGetRowsColumnRangeSingleIteratorVersion(101, 11, 0);\n     }\n \n     private void runTestForGetRowsColumnRangeSingleIteratorVersion(\n"}}, {"oid": "181e45d0bc8d207cd67a41580bc121b30e2b0048", "url": "https://github.com/palantir/atlasdb/commit/181e45d0bc8d207cd67a41580bc121b30e2b0048", "message": "comment new test case", "committedDate": "2020-04-01T17:18:31Z", "type": "commit"}, {"oid": "d566a7a969fc24f5ee6144f3dc41d4cb686c51d9", "url": "https://github.com/palantir/atlasdb/commit/d566a7a969fc24f5ee6144f3dc41d4cb686c51d9", "message": "further improve comments", "committedDate": "2020-04-01T17:21:24Z", "type": "commit"}, {"oid": "c7d2412571346a5199ed9281cfb620068edb32e5", "url": "https://github.com/palantir/atlasdb/commit/c7d2412571346a5199ed9281cfb620068edb32e5", "message": "extract out inputRowOrder comparator", "committedDate": "2020-04-01T17:32:43Z", "type": "commit"}, {"oid": "2c280bb081c411c3ed6d80f1d275223a31dcf153", "url": "https://github.com/palantir/atlasdb/commit/2c280bb081c411c3ed6d80f1d275223a31dcf153", "message": "reorder methods to make checkstyle happy", "committedDate": "2020-04-01T17:44:40Z", "type": "commit"}]}