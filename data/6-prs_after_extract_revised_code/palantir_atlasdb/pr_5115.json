{"pr_number": 5115, "pr_title": "[Cross Client Batching - 1b] | Wiring TimeLock Batch endpoints", "pr_createdAt": "2020-11-16T15:36:59Z", "pr_url": "https://github.com/palantir/atlasdb/pull/5115", "timeline": [{"oid": "aae2ad6053839ea5fbb07de81e91ea975b7b9a8a", "url": "https://github.com/palantir/atlasdb/commit/aae2ad6053839ea5fbb07de81e91ea975b7b9a8a", "message": "Implement Jersey service", "committedDate": "2020-11-16T15:33:14Z", "type": "commit"}, {"oid": "85176614e4ac0312e5897a0e65cd81edc081accb", "url": "https://github.com/palantir/atlasdb/commit/85176614e4ac0312e5897a0e65cd81edc081accb", "message": "Wire - WIP", "committedDate": "2020-11-16T15:33:25Z", "type": "commit"}, {"oid": "951f9a2af5014d08e565a09a2ed35e18d3963fa7", "url": "https://github.com/palantir/atlasdb/commit/951f9a2af5014d08e565a09a2ed35e18d3963fa7", "message": "Sanity Test", "committedDate": "2020-11-16T15:33:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2NTMxMg==", "url": "https://github.com/palantir/atlasdb/pull/5115#discussion_r524365312", "bodyText": "I don't know leader time (and/or the internals of Timelock) all that well - would leader times from different namespaces have different leadership IDs, or the same? If you expect one or the other, can you verify that in this test?", "author": "Jolyon-S", "createdAt": "2020-11-16T15:44:34Z", "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java", "diffHunk": "@@ -484,6 +487,18 @@ public void stressTestForPaxosEndpoints() {\n         }\n     }\n \n+    @Test\n+    public void leaderRespondsToMultiClientRequests() {\n+        MultiClientConjureTimelockService multiClientConjureTimelockService =\n+                cluster.currentLeaderFor(client.namespace()).multiClientService();\n+        Set<String> expectedNamespaces = ImmutableSet.of(\"alpha\", \"beta\");\n+        List<NamespacedLeaderTime> leaderTimes =\n+                multiClientConjureTimelockService.leaderTimes(AuthHeader.valueOf(\"Bearer omitted\"), expectedNamespaces);\n+        Set<String> namespaces =\n+                leaderTimes.stream().map(NamespacedLeaderTime::getNamespace).collect(Collectors.toSet());\n+        assertThat(namespaces).hasSameElementsAs(expectedNamespaces);", "originalCommit": "951f9a2af5014d08e565a09a2ed35e18d3963fa7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ1ODM5NQ==", "url": "https://github.com/palantir/atlasdb/pull/5115#discussion_r524458395", "bodyText": "Leadership ids should be different as each client will have its own instance of AsyncTimelockService -> AsyncLockService -> LeaderClock. I've added the check now.", "author": "sudiksha27", "createdAt": "2020-11-16T17:47:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2NTMxMg=="}], "type": "inlineReview", "revised_code": {"commit": "f63a2996a041800fc313b694b007e6242ce35b03", "chunk": "diff --git a/timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java b/timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java\nindex 2c7735b3a1..8db96598de 100644\n--- a/timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java\n+++ b/timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java\n\n@@ -488,15 +492,34 @@ public class MultiNodePaxosTimeLockServerIntegrationTest {\n     }\n \n     @Test\n-    public void leaderRespondsToMultiClientRequests() {\n-        MultiClientConjureTimelockService multiClientConjureTimelockService =\n-                cluster.currentLeaderFor(client.namespace()).multiClientService();\n+    public void leaderCanProcessMultiClientLeaderTimeRequest() {\n+        TestableTimelockServer leader = cluster.currentLeaderFor(client.namespace());\n+        MultiClientConjureTimelockService multiClientConjureTimelockService = leader.multiClientService();\n         Set<String> expectedNamespaces = ImmutableSet.of(\"alpha\", \"beta\");\n         List<NamespacedLeaderTime> leaderTimes =\n-                multiClientConjureTimelockService.leaderTimes(AuthHeader.valueOf(\"Bearer omitted\"), expectedNamespaces);\n+                multiClientConjureTimelockService.leaderTimes(AUTH_HEADER, expectedNamespaces);\n         Set<String> namespaces =\n                 leaderTimes.stream().map(NamespacedLeaderTime::getNamespace).collect(Collectors.toSet());\n         assertThat(namespaces).hasSameElementsAs(expectedNamespaces);\n+\n+        Set<LeadershipId> leadershipIds = leaderTimes.stream()\n+                .map(NamespacedLeaderTime::getLeaderTime)\n+                .map(LeaderTime::id)\n+                .collect(Collectors.toSet());\n+        assertThat(leadershipIds).hasSameSizeAs(expectedNamespaces);\n+    }\n+\n+    @Test\n+    public void leaderCanProcessMultiClientGetCommitTimestampRequest() {\n+        MultiClientConjureTimelockService service =\n+                cluster.currentLeaderFor(client.namespace()).multiClientService();\n+        Set<String> expectedNamespaces = ImmutableSet.of(\"alpha\", \"beta\");\n+        List<NamespacedGetCommitTimestampsResponse> commitTimestamps =\n+                service.getCommitTimestamps(AUTH_HEADER, getGetCommitTimestampsRequests(expectedNamespaces));\n+        Set<String> namespaces = commitTimestamps.stream()\n+                .map(NamespacedGetCommitTimestampsResponse::getNamespace)\n+                .collect(Collectors.toSet());\n+        assertThat(namespaces).hasSameElementsAs(expectedNamespaces);\n     }\n \n     private static void assertNumberOfThreadsReasonable(int startingThreads, int threadCount, boolean nonLeaderDown) {\n"}}, {"oid": "f63a2996a041800fc313b694b007e6242ce35b03", "url": "https://github.com/palantir/atlasdb/commit/f63a2996a041800fc313b694b007e6242ce35b03", "message": "Address comments", "committedDate": "2020-11-16T17:45:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA4MzQzOA==", "url": "https://github.com/palantir/atlasdb/pull/5115#discussion_r525083438", "bodyText": "This is perhaps being a bit pedantic, but get commit timestamps have a leader ID hidden inside (it's the logId inside LockWatchStateUpdate). Perhaps worth a similar check to the one above?", "author": "Jolyon-S", "createdAt": "2020-11-17T11:29:34Z", "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java", "diffHunk": "@@ -484,6 +491,37 @@ public void stressTestForPaxosEndpoints() {\n         }\n     }\n \n+    @Test\n+    public void leaderCanProcessMultiClientLeaderTimeRequest() {\n+        TestableTimelockServer leader = cluster.currentLeaderFor(client.namespace());\n+        MultiClientConjureTimelockService multiClientConjureTimelockService = leader.multiClientService();\n+        Set<String> expectedNamespaces = ImmutableSet.of(\"alpha\", \"beta\");\n+        List<NamespacedLeaderTime> leaderTimes =\n+                multiClientConjureTimelockService.leaderTimes(AUTH_HEADER, expectedNamespaces);\n+        Set<String> namespaces =\n+                leaderTimes.stream().map(NamespacedLeaderTime::getNamespace).collect(Collectors.toSet());\n+        assertThat(namespaces).hasSameElementsAs(expectedNamespaces);\n+\n+        Set<LeadershipId> leadershipIds = leaderTimes.stream()\n+                .map(NamespacedLeaderTime::getLeaderTime)\n+                .map(LeaderTime::id)\n+                .collect(Collectors.toSet());\n+        assertThat(leadershipIds).hasSameSizeAs(expectedNamespaces);\n+    }\n+\n+    @Test\n+    public void leaderCanProcessMultiClientGetCommitTimestampRequest() {\n+        MultiClientConjureTimelockService service =\n+                cluster.currentLeaderFor(client.namespace()).multiClientService();\n+        Set<String> expectedNamespaces = ImmutableSet.of(\"alpha\", \"beta\");\n+        List<NamespacedGetCommitTimestampsResponse> commitTimestamps =\n+                service.getCommitTimestamps(AUTH_HEADER, getGetCommitTimestampsRequests(expectedNamespaces));\n+        Set<String> namespaces = commitTimestamps.stream()\n+                .map(NamespacedGetCommitTimestampsResponse::getNamespace)\n+                .collect(Collectors.toSet());\n+        assertThat(namespaces).hasSameElementsAs(expectedNamespaces);", "originalCommit": "f63a2996a041800fc313b694b007e6242ce35b03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEzODI1Mg==", "url": "https://github.com/palantir/atlasdb/pull/5115#discussion_r525138252", "bodyText": "Done", "author": "sudiksha27", "createdAt": "2020-11-17T13:06:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA4MzQzOA=="}], "type": "inlineReview", "revised_code": {"commit": "a11f0308bd9b840f1493bb22eb9284b71f788404", "chunk": "diff --git a/timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java b/timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java\nindex 8db96598de..1611f3db22 100644\n--- a/timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java\n+++ b/timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java\n\n@@ -502,9 +507,10 @@ public class MultiNodePaxosTimeLockServerIntegrationTest {\n                 leaderTimes.stream().map(NamespacedLeaderTime::getNamespace).collect(Collectors.toSet());\n         assertThat(namespaces).hasSameElementsAs(expectedNamespaces);\n \n-        Set<LeadershipId> leadershipIds = leaderTimes.stream()\n+        Set<UUID> leadershipIds = leaderTimes.stream()\n                 .map(NamespacedLeaderTime::getLeaderTime)\n                 .map(LeaderTime::id)\n+                .map(LeadershipId::id)\n                 .collect(Collectors.toSet());\n         assertThat(leadershipIds).hasSameSizeAs(expectedNamespaces);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA4NTY3Mw==", "url": "https://github.com/palantir/atlasdb/pull/5115#discussion_r525085673", "bodyText": "maybe a bit overkill: if we run these against the regular conjuretimelockservice.getLeaderTime we get the same answer right?", "author": "jeremyk-91", "createdAt": "2020-11-17T11:33:35Z", "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java", "diffHunk": "@@ -484,6 +491,37 @@ public void stressTestForPaxosEndpoints() {\n         }\n     }\n \n+    @Test\n+    public void leaderCanProcessMultiClientLeaderTimeRequest() {\n+        TestableTimelockServer leader = cluster.currentLeaderFor(client.namespace());\n+        MultiClientConjureTimelockService multiClientConjureTimelockService = leader.multiClientService();\n+        Set<String> expectedNamespaces = ImmutableSet.of(\"alpha\", \"beta\");\n+        List<NamespacedLeaderTime> leaderTimes =\n+                multiClientConjureTimelockService.leaderTimes(AUTH_HEADER, expectedNamespaces);\n+        Set<String> namespaces =\n+                leaderTimes.stream().map(NamespacedLeaderTime::getNamespace).collect(Collectors.toSet());\n+        assertThat(namespaces).hasSameElementsAs(expectedNamespaces);\n+\n+        Set<LeadershipId> leadershipIds = leaderTimes.stream()\n+                .map(NamespacedLeaderTime::getLeaderTime)\n+                .map(LeaderTime::id)\n+                .collect(Collectors.toSet());\n+        assertThat(leadershipIds).hasSameSizeAs(expectedNamespaces);", "originalCommit": "f63a2996a041800fc313b694b007e6242ce35b03", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEzODE4MQ==", "url": "https://github.com/palantir/atlasdb/pull/5115#discussion_r525138181", "bodyText": "Same leader will serve the request, but leaderTime will be different (time elapsed b/w two requests). I will add this test for commitTs request as well, where I can add stricter assertions on the response.", "author": "sudiksha27", "createdAt": "2020-11-17T13:06:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA4NTY3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE4NzM4NQ==", "url": "https://github.com/palantir/atlasdb/pull/5115#discussion_r525187385", "bodyText": "Yeah, makes sense. I think I intended an ID comparison, which you've added below.", "author": "jeremyk-91", "createdAt": "2020-11-17T14:16:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA4NTY3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "a11f0308bd9b840f1493bb22eb9284b71f788404", "chunk": "diff --git a/timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java b/timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java\nindex 8db96598de..1611f3db22 100644\n--- a/timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java\n+++ b/timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java\n\n@@ -502,9 +507,10 @@ public class MultiNodePaxosTimeLockServerIntegrationTest {\n                 leaderTimes.stream().map(NamespacedLeaderTime::getNamespace).collect(Collectors.toSet());\n         assertThat(namespaces).hasSameElementsAs(expectedNamespaces);\n \n-        Set<LeadershipId> leadershipIds = leaderTimes.stream()\n+        Set<UUID> leadershipIds = leaderTimes.stream()\n                 .map(NamespacedLeaderTime::getLeaderTime)\n                 .map(LeaderTime::id)\n+                .map(LeadershipId::id)\n                 .collect(Collectors.toSet());\n         assertThat(leadershipIds).hasSameSizeAs(expectedNamespaces);\n     }\n"}}, {"oid": "a11f0308bd9b840f1493bb22eb9284b71f788404", "url": "https://github.com/palantir/atlasdb/commit/a11f0308bd9b840f1493bb22eb9284b71f788404", "message": "Add more tests", "committedDate": "2020-11-17T13:05:13Z", "type": "commit"}, {"oid": "bdd7bd1a71a952944cae8e27819bcb597173dc21", "url": "https://github.com/palantir/atlasdb/commit/bdd7bd1a71a952944cae8e27819bcb597173dc21", "message": "Spotless", "committedDate": "2020-11-17T13:33:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE5MTAxNg==", "url": "https://github.com/palantir/atlasdb/pull/5115#discussion_r525191016", "bodyText": "nit/suggestion: Usually these assertions are assertThat(actual).isEqualTo(expected), so I'd probably flip these two. Also, you can use as(String) to say in English what the assertion is doing, which I think is useful for this later one, which verifies timestamps are contiguously increasing per namespace if there are no elections.", "author": "jeremyk-91", "createdAt": "2020-11-17T14:21:24Z", "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java", "diffHunk": "@@ -514,12 +520,70 @@ public void leaderCanProcessMultiClientGetCommitTimestampRequest() {\n         MultiClientConjureTimelockService service =\n                 cluster.currentLeaderFor(client.namespace()).multiClientService();\n         Set<String> expectedNamespaces = ImmutableSet.of(\"alpha\", \"beta\");\n-        List<NamespacedGetCommitTimestampsResponse> commitTimestamps =\n-                service.getCommitTimestamps(AUTH_HEADER, getGetCommitTimestampsRequests(expectedNamespaces));\n+        List<NamespacedGetCommitTimestampsResponse> commitTimestamps = service.getCommitTimestamps(\n+                AUTH_HEADER, defaultNamespacedGetCommitTimestampsRequests(expectedNamespaces));\n         Set<String> namespaces = commitTimestamps.stream()\n                 .map(NamespacedGetCommitTimestampsResponse::getNamespace)\n                 .collect(Collectors.toSet());\n         assertThat(namespaces).hasSameElementsAs(expectedNamespaces);\n+\n+        Set<UUID> leadershipIds = commitTimestamps.stream()\n+                .map(NamespacedGetCommitTimestampsResponse::getLockWatchUpdate)\n+                .map(LockWatchStateUpdate::logId)\n+                .collect(Collectors.toSet());\n+        assertThat(leadershipIds).hasSameSizeAs(expectedNamespaces);\n+    }\n+\n+    @Test\n+    public void sanityCheckMultiClientLeaderTimeAgainstConjureTimelockService() {\n+        TestableTimelockServer leader = cluster.currentLeaderFor(client.namespace());\n+        MultiClientConjureTimelockService multiClientConjureTimelockService = leader.multiClientService();\n+        Set<String> expectedNamespaces = ImmutableSet.of(\"alpha\", \"beta\", \"gamma\");\n+        List<NamespacedLeaderTime> leaderTimeResponses =\n+                multiClientConjureTimelockService.leaderTimes(AUTH_HEADER, expectedNamespaces);\n+        Set<String> namespacesWithLeaderTime = leaderTimeResponses.stream()\n+                .map(NamespacedLeaderTime::getNamespace)\n+                .collect(Collectors.toSet());\n+        assertThat(namespacesWithLeaderTime).hasSameElementsAs(expectedNamespaces);\n+\n+        // Whether we hit the multi client endpoint or conjureTimelockService endpoint(services one client in one\n+        // call), for a namespace, the underlying service to process the request is the same\n+        leaderTimeResponses.forEach(namespacedLeaderTime -> {\n+            LeaderTime conjureTimelockServiceLeaderTime = leader.client(namespacedLeaderTime.getNamespace())\n+                    .namespacedConjureTimelockService()\n+                    .leaderTime();\n+            assertThat(namespacedLeaderTime.getLeaderTime().id()).isEqualTo(conjureTimelockServiceLeaderTime.id());\n+        });\n+    }\n+\n+    @Test\n+    public void sanityCheckMultiClientGetCommitTimestampsAgainstConjureTimelockService() {\n+        TestableTimelockServer leader = cluster.currentLeaderFor(client.namespace());\n+        MultiClientConjureTimelockService service = leader.multiClientService();\n+        Set<String> expectedNamespaces = ImmutableSet.of(\"alpha\", \"beta\");\n+        List<NamespacedGetCommitTimestampsResponse> commitTimestamps = service.getCommitTimestamps(\n+                AUTH_HEADER, defaultNamespacedGetCommitTimestampsRequests(expectedNamespaces));\n+        Set<String> namespaces = commitTimestamps.stream()\n+                .map(NamespacedGetCommitTimestampsResponse::getNamespace)\n+                .collect(Collectors.toSet());\n+        assertThat(namespaces).hasSameElementsAs(expectedNamespaces);\n+\n+        // Whether we hit the multi client endpoint or conjureTimelockService endpoint(services one client in one\n+        // call), for a namespace, the underlying service to process the request is the same\n+        commitTimestamps.forEach(namespacedGetCommitTimestampsResponse -> {\n+            GetCommitTimestampsResponse conjureTimelockServiceGetCommitTimestampResponse = leader.client(\n+                            namespacedGetCommitTimestampsResponse.getNamespace())\n+                    .namespacedConjureTimelockService()\n+                    .getCommitTimestamps(defaultCommitTimestampRequest());\n+            assertThat(namespacedGetCommitTimestampsResponse\n+                            .getLockWatchUpdate()\n+                            .logId())\n+                    .isEqualTo(conjureTimelockServiceGetCommitTimestampResponse\n+                            .getLockWatchUpdate()\n+                            .logId());\n+            assertThat(namespacedGetCommitTimestampsResponse.getInclusiveUpper())\n+                    .isEqualTo(conjureTimelockServiceGetCommitTimestampResponse.getInclusiveLower() - 1);", "originalCommit": "a11f0308bd9b840f1493bb22eb9284b71f788404", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d0141ab2bd0197231e5109b264f90a6fb0dc0dd2", "chunk": "diff --git a/timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java b/timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java\nindex 1611f3db22..91c91b46d9 100644\n--- a/timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java\n+++ b/timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java\n\n@@ -552,7 +550,8 @@ public class MultiNodePaxosTimeLockServerIntegrationTest {\n             LeaderTime conjureTimelockServiceLeaderTime = leader.client(namespacedLeaderTime.getNamespace())\n                     .namespacedConjureTimelockService()\n                     .leaderTime();\n-            assertThat(namespacedLeaderTime.getLeaderTime().id()).isEqualTo(conjureTimelockServiceLeaderTime.id());\n+            assertThat(conjureTimelockServiceLeaderTime.id())\n+                    .isEqualTo(namespacedLeaderTime.getLeaderTime().id());\n         });\n     }\n \n"}}, {"oid": "d0141ab2bd0197231e5109b264f90a6fb0dc0dd2", "url": "https://github.com/palantir/atlasdb/commit/d0141ab2bd0197231e5109b264f90a6fb0dc0dd2", "message": "Fix nits", "committedDate": "2020-11-17T15:24:52Z", "type": "commit"}]}