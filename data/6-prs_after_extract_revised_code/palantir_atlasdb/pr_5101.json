{"pr_number": 5101, "pr_title": "[Cross Client Batching - 1] | TimeLock Batch endpoints", "pr_createdAt": "2020-11-05T14:42:47Z", "pr_url": "https://github.com/palantir/atlasdb/pull/5101", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI3NTQ2MQ==", "url": "https://github.com/palantir/atlasdb/pull/5101#discussion_r518275461", "bodyText": "can we name this getServiceForNamespace or something like that?", "author": "jeremyk-91", "createdAt": "2020-11-05T18:35:21Z", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/batch/CrossClientBatchedConjureTimeLockResource.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.batch;\n+\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.palantir.atlasdb.timelock.AsyncTimelockService;\n+import com.palantir.atlasdb.timelock.ConjureResourceExceptionHandler;\n+import com.palantir.atlasdb.timelock.api.ConjureIdentifiedVersion;\n+import com.palantir.atlasdb.timelock.api.GetCommitTimestampsResponse;\n+import com.palantir.atlasdb.timelock.api.NamespacedGetCommitTimestampsRequest;\n+import com.palantir.atlasdb.timelock.api.NamespacedGetCommitTimestampsResponse;\n+import com.palantir.atlasdb.timelock.api.NamespacedLeaderTime;\n+import com.palantir.atlasdb.timelock.batch.api.UndertowCrossClientBatchedConjureTimelockService;\n+import com.palantir.lock.v2.LeaderTime;\n+import com.palantir.lock.watch.LockWatchVersion;\n+import com.palantir.tokens.auth.AuthHeader;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+public final class CrossClientBatchedConjureTimeLockResource\n+        implements UndertowCrossClientBatchedConjureTimelockService {\n+    private final ConjureResourceExceptionHandler exceptionHandler;\n+    private final Function<String, AsyncTimelockService> timelockServices;\n+\n+    private CrossClientBatchedConjureTimeLockResource(\n+            ConjureResourceExceptionHandler exceptionHandler, Function<String, AsyncTimelockService> timelockServices) {\n+        this.exceptionHandler = exceptionHandler;\n+        this.timelockServices = timelockServices;\n+    }\n+\n+    @Override\n+    public ListenableFuture<List<NamespacedLeaderTime>> leaderTimes(AuthHeader authHeader, Set<String> namespaces) {\n+        List<ListenableFuture<NamespacedLeaderTime>> futures = namespaces.stream()\n+                .map(this::getNamespacedLeaderTimeListenableFuture)\n+                .collect(Collectors.toList());\n+\n+        return handleExceptions(() -> Futures.allAsList(futures));\n+    }\n+\n+    @Override\n+    public ListenableFuture<List<NamespacedGetCommitTimestampsResponse>> getCommitTimestamps(\n+            AuthHeader authHeader, List<NamespacedGetCommitTimestampsRequest> requests) {\n+        List<ListenableFuture<NamespacedGetCommitTimestampsResponse>> futures = requests.stream()\n+                .map(this::getNamespacedGetCommitTimestampsResponseListenableFuture)\n+                .collect(Collectors.toList());\n+\n+        return handleExceptions(() -> Futures.allAsList(futures));\n+    }\n+\n+    private ListenableFuture<NamespacedLeaderTime> getNamespacedLeaderTimeListenableFuture(String namespace) {\n+        ListenableFuture<LeaderTime> leaderTimeListenableFuture =\n+                forNamespace(namespace).leaderTime();\n+        return Futures.transform(\n+                leaderTimeListenableFuture,\n+                leaderTime -> NamespacedLeaderTime.of(namespace, leaderTime),\n+                MoreExecutors.directExecutor());\n+    }\n+\n+    private ListenableFuture<NamespacedGetCommitTimestampsResponse>\n+            getNamespacedGetCommitTimestampsResponseListenableFuture(NamespacedGetCommitTimestampsRequest request) {\n+        ListenableFuture<GetCommitTimestampsResponse> commitTimestamps = forNamespace(request.getNamespace())\n+                .getCommitTimestamps(\n+                        request.getNumTimestamps(),\n+                        request.getLastKnownVersion().map(this::toIdentifiedVersion));\n+        return Futures.transform(\n+                commitTimestamps,\n+                commitTimestampsResponse -> NamespacedGetCommitTimestampsResponse.builder()\n+                        .namespace(request.getNamespace())\n+                        .inclusiveLower(commitTimestampsResponse.getInclusiveLower())\n+                        .inclusiveUpper(commitTimestampsResponse.getInclusiveUpper())\n+                        .lockWatchUpdate(commitTimestampsResponse.getLockWatchUpdate())\n+                        .build(),\n+                MoreExecutors.directExecutor());\n+    }\n+\n+    private AsyncTimelockService forNamespace(String namespace) {", "originalCommit": "d4febce3339d6055cd9611f8f67fd31e139c0484", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad1525b8f0f106dae76deac36e2e3c609a3ab49", "chunk": "diff --git a/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/batch/CrossClientBatchedConjureTimeLockResource.java b/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/batch/CrossClientBatchedConjureTimeLockResource.java\nindex 742674ab03..9a71ecb9a3 100644\n--- a/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/batch/CrossClientBatchedConjureTimeLockResource.java\n+++ b/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/batch/CrossClientBatchedConjureTimeLockResource.java\n\n@@ -21,23 +21,16 @@ import com.google.common.util.concurrent.ListenableFuture;\n import com.google.common.util.concurrent.MoreExecutors;\n import com.palantir.atlasdb.timelock.AsyncTimelockService;\n import com.palantir.atlasdb.timelock.ConjureResourceExceptionHandler;\n-import com.palantir.atlasdb.timelock.api.ConjureIdentifiedVersion;\n-import com.palantir.atlasdb.timelock.api.GetCommitTimestampsResponse;\n-import com.palantir.atlasdb.timelock.api.NamespacedGetCommitTimestampsRequest;\n-import com.palantir.atlasdb.timelock.api.NamespacedGetCommitTimestampsResponse;\n import com.palantir.atlasdb.timelock.api.NamespacedLeaderTime;\n import com.palantir.atlasdb.timelock.batch.api.UndertowCrossClientBatchedConjureTimelockService;\n import com.palantir.lock.v2.LeaderTime;\n-import com.palantir.lock.watch.LockWatchVersion;\n import com.palantir.tokens.auth.AuthHeader;\n import java.util.List;\n-import java.util.Set;\n import java.util.function.Function;\n import java.util.function.Supplier;\n import java.util.stream.Collectors;\n \n-public final class CrossClientBatchedConjureTimeLockResource\n-        implements UndertowCrossClientBatchedConjureTimelockService {\n+public class CrossClientBatchedConjureTimeLockResource implements UndertowCrossClientBatchedConjureTimelockService {\n     private final ConjureResourceExceptionHandler exceptionHandler;\n     private final Function<String, AsyncTimelockService> timelockServices;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI3NjE4Nw==", "url": "https://github.com/palantir/atlasdb/pull/5101#discussion_r518276187", "bodyText": "I think this is safe and correct; can you explain why this is the case?", "author": "jeremyk-91", "createdAt": "2020-11-05T18:36:35Z", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/batch/CrossClientBatchedConjureTimeLockResource.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.batch;\n+\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.palantir.atlasdb.timelock.AsyncTimelockService;\n+import com.palantir.atlasdb.timelock.ConjureResourceExceptionHandler;\n+import com.palantir.atlasdb.timelock.api.ConjureIdentifiedVersion;\n+import com.palantir.atlasdb.timelock.api.GetCommitTimestampsResponse;\n+import com.palantir.atlasdb.timelock.api.NamespacedGetCommitTimestampsRequest;\n+import com.palantir.atlasdb.timelock.api.NamespacedGetCommitTimestampsResponse;\n+import com.palantir.atlasdb.timelock.api.NamespacedLeaderTime;\n+import com.palantir.atlasdb.timelock.batch.api.UndertowCrossClientBatchedConjureTimelockService;\n+import com.palantir.lock.v2.LeaderTime;\n+import com.palantir.lock.watch.LockWatchVersion;\n+import com.palantir.tokens.auth.AuthHeader;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+public final class CrossClientBatchedConjureTimeLockResource\n+        implements UndertowCrossClientBatchedConjureTimelockService {\n+    private final ConjureResourceExceptionHandler exceptionHandler;\n+    private final Function<String, AsyncTimelockService> timelockServices;\n+\n+    private CrossClientBatchedConjureTimeLockResource(\n+            ConjureResourceExceptionHandler exceptionHandler, Function<String, AsyncTimelockService> timelockServices) {\n+        this.exceptionHandler = exceptionHandler;\n+        this.timelockServices = timelockServices;\n+    }\n+\n+    @Override\n+    public ListenableFuture<List<NamespacedLeaderTime>> leaderTimes(AuthHeader authHeader, Set<String> namespaces) {\n+        List<ListenableFuture<NamespacedLeaderTime>> futures = namespaces.stream()\n+                .map(this::getNamespacedLeaderTimeListenableFuture)\n+                .collect(Collectors.toList());\n+\n+        return handleExceptions(() -> Futures.allAsList(futures));\n+    }\n+\n+    @Override\n+    public ListenableFuture<List<NamespacedGetCommitTimestampsResponse>> getCommitTimestamps(\n+            AuthHeader authHeader, List<NamespacedGetCommitTimestampsRequest> requests) {\n+        List<ListenableFuture<NamespacedGetCommitTimestampsResponse>> futures = requests.stream()\n+                .map(this::getNamespacedGetCommitTimestampsResponseListenableFuture)\n+                .collect(Collectors.toList());\n+\n+        return handleExceptions(() -> Futures.allAsList(futures));\n+    }\n+\n+    private ListenableFuture<NamespacedLeaderTime> getNamespacedLeaderTimeListenableFuture(String namespace) {\n+        ListenableFuture<LeaderTime> leaderTimeListenableFuture =\n+                forNamespace(namespace).leaderTime();\n+        return Futures.transform(\n+                leaderTimeListenableFuture,\n+                leaderTime -> NamespacedLeaderTime.of(namespace, leaderTime),\n+                MoreExecutors.directExecutor());\n+    }\n+\n+    private ListenableFuture<NamespacedGetCommitTimestampsResponse>\n+            getNamespacedGetCommitTimestampsResponseListenableFuture(NamespacedGetCommitTimestampsRequest request) {\n+        ListenableFuture<GetCommitTimestampsResponse> commitTimestamps = forNamespace(request.getNamespace())\n+                .getCommitTimestamps(\n+                        request.getNumTimestamps(),\n+                        request.getLastKnownVersion().map(this::toIdentifiedVersion));\n+        return Futures.transform(\n+                commitTimestamps,\n+                commitTimestampsResponse -> NamespacedGetCommitTimestampsResponse.builder()\n+                        .namespace(request.getNamespace())\n+                        .inclusiveLower(commitTimestampsResponse.getInclusiveLower())\n+                        .inclusiveUpper(commitTimestampsResponse.getInclusiveUpper())\n+                        .lockWatchUpdate(commitTimestampsResponse.getLockWatchUpdate())\n+                        .build(),\n+                MoreExecutors.directExecutor());", "originalCommit": "d4febce3339d6055cd9611f8f67fd31e139c0484", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ad1525b8f0f106dae76deac36e2e3c609a3ab49", "chunk": "diff --git a/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/batch/CrossClientBatchedConjureTimeLockResource.java b/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/batch/CrossClientBatchedConjureTimeLockResource.java\nindex 742674ab03..9a71ecb9a3 100644\n--- a/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/batch/CrossClientBatchedConjureTimeLockResource.java\n+++ b/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/batch/CrossClientBatchedConjureTimeLockResource.java\n\n@@ -21,23 +21,16 @@ import com.google.common.util.concurrent.ListenableFuture;\n import com.google.common.util.concurrent.MoreExecutors;\n import com.palantir.atlasdb.timelock.AsyncTimelockService;\n import com.palantir.atlasdb.timelock.ConjureResourceExceptionHandler;\n-import com.palantir.atlasdb.timelock.api.ConjureIdentifiedVersion;\n-import com.palantir.atlasdb.timelock.api.GetCommitTimestampsResponse;\n-import com.palantir.atlasdb.timelock.api.NamespacedGetCommitTimestampsRequest;\n-import com.palantir.atlasdb.timelock.api.NamespacedGetCommitTimestampsResponse;\n import com.palantir.atlasdb.timelock.api.NamespacedLeaderTime;\n import com.palantir.atlasdb.timelock.batch.api.UndertowCrossClientBatchedConjureTimelockService;\n import com.palantir.lock.v2.LeaderTime;\n-import com.palantir.lock.watch.LockWatchVersion;\n import com.palantir.tokens.auth.AuthHeader;\n import java.util.List;\n-import java.util.Set;\n import java.util.function.Function;\n import java.util.function.Supplier;\n import java.util.stream.Collectors;\n \n-public final class CrossClientBatchedConjureTimeLockResource\n-        implements UndertowCrossClientBatchedConjureTimelockService {\n+public class CrossClientBatchedConjureTimeLockResource implements UndertowCrossClientBatchedConjureTimelockService {\n     private final ConjureResourceExceptionHandler exceptionHandler;\n     private final Function<String, AsyncTimelockService> timelockServices;\n \n"}}, {"oid": "7ad1525b8f0f106dae76deac36e2e3c609a3ab49", "url": "https://github.com/palantir/atlasdb/commit/7ad1525b8f0f106dae76deac36e2e3c609a3ab49", "message": "WIP", "committedDate": "2020-11-09T15:06:37Z", "type": "commit"}, {"oid": "fe4fd6918ce680826f8c20b64c236097aa876d81", "url": "https://github.com/palantir/atlasdb/commit/fe4fd6918ce680826f8c20b64c236097aa876d81", "message": "getCommitTimestamps", "committedDate": "2020-11-09T15:06:37Z", "type": "commit"}, {"oid": "a6cb78d03e7688636537dac7179b8f2dc73489f9", "url": "https://github.com/palantir/atlasdb/commit/a6cb78d03e7688636537dac7179b8f2dc73489f9", "message": "Minor", "committedDate": "2020-11-09T15:06:37Z", "type": "commit"}, {"oid": "71395c05c2b03bef092d3506e9235c5cadcccd98", "url": "https://github.com/palantir/atlasdb/commit/71395c05c2b03bef092d3506e9235c5cadcccd98", "message": "Fix", "committedDate": "2020-11-09T15:06:37Z", "type": "commit"}, {"oid": "a5e8d17ffafbaaa858d4592d04868df444827972", "url": "https://github.com/palantir/atlasdb/commit/a5e8d17ffafbaaa858d4592d04868df444827972", "message": "Fix", "committedDate": "2020-11-09T15:06:37Z", "type": "commit"}, {"oid": "4165a05cd20f1663575175b3d6ab31b480ff90e6", "url": "https://github.com/palantir/atlasdb/commit/4165a05cd20f1663575175b3d6ab31b480ff90e6", "message": "Refactor api", "committedDate": "2020-11-09T15:06:37Z", "type": "commit"}, {"oid": "0f7ad372de632fa07c66437f043e17aee58ffe59", "url": "https://github.com/palantir/atlasdb/commit/0f7ad372de632fa07c66437f043e17aee58ffe59", "message": "WIP - addressing style comments", "committedDate": "2020-11-09T15:06:37Z", "type": "commit"}, {"oid": "a6f19e65459e8b31ee3b2914a9e9043ce062de91", "url": "https://github.com/palantir/atlasdb/commit/a6f19e65459e8b31ee3b2914a9e9043ce062de91", "message": "WIP", "committedDate": "2020-11-09T15:06:37Z", "type": "commit"}, {"oid": "5b762c4cd5acb4c73b54d73813d064bce477b66c", "url": "https://github.com/palantir/atlasdb/commit/5b762c4cd5acb4c73b54d73813d064bce477b66c", "message": "Sanity tests", "committedDate": "2020-11-09T15:06:37Z", "type": "commit"}, {"oid": "3247bc7296f772e2e5958a42a2f69db26f1ddca3", "url": "https://github.com/palantir/atlasdb/commit/3247bc7296f772e2e5958a42a2f69db26f1ddca3", "message": "Tests | exception thrown if a query fails", "committedDate": "2020-11-09T15:06:37Z", "type": "commit"}, {"oid": "3247bc7296f772e2e5958a42a2f69db26f1ddca3", "url": "https://github.com/palantir/atlasdb/commit/3247bc7296f772e2e5958a42a2f69db26f1ddca3", "message": "Tests | exception thrown if a query fails", "committedDate": "2020-11-09T15:06:37Z", "type": "forcePushed"}, {"oid": "bea6c20d05f13c623ec6eeab81efbc8bf6ced05d", "url": "https://github.com/palantir/atlasdb/commit/bea6c20d05f13c623ec6eeab81efbc8bf6ced05d", "message": "Address comment | fix path", "committedDate": "2020-11-16T10:33:50Z", "type": "commit"}]}