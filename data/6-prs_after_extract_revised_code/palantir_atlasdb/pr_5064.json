{"pr_number": 5064, "pr_title": "[LE] Implement SlidingWindowWeightedMeanGauge", "pr_createdAt": "2020-10-21T12:47:32Z", "pr_url": "https://github.com/palantir/atlasdb/pull/5064", "timeline": [{"oid": "bb0180e3e644e4588ff0c33e10e2afb575038832", "url": "https://github.com/palantir/atlasdb/commit/bb0180e3e644e4588ff0c33e10e2afb575038832", "message": "Impl and tests", "committedDate": "2020-10-21T12:25:08Z", "type": "commit"}, {"oid": "9b36e5f0c0df54627f382aeffe4ade4b80512ae1", "url": "https://github.com/palantir/atlasdb/commit/9b36e5f0c0df54627f382aeffe4ade4b80512ae1", "message": "Nit", "committedDate": "2020-10-21T12:43:27Z", "type": "commit"}, {"oid": "acda7b907bf6d1c181fa3dcdbe2784c5b9f57f32", "url": "https://github.com/palantir/atlasdb/commit/acda7b907bf6d1c181fa3dcdbe2784c5b9f57f32", "message": "Add generated changelog entries", "committedDate": "2020-10-21T13:38:10Z", "type": "commit"}, {"oid": "53f7a477b9353b31e9d0921e3544aec22188f07b", "url": "https://github.com/palantir/atlasdb/commit/53f7a477b9353b31e9d0921e3544aec22188f07b", "message": "Add generated changelog entries", "committedDate": "2020-10-21T13:38:10Z", "type": "commit"}, {"oid": "ebbc26ab11353d5fdb4e6ebcb75655a02adc99ec", "url": "https://github.com/palantir/atlasdb/commit/ebbc26ab11353d5fdb4e6ebcb75655a02adc99ec", "message": "run spotless apply", "committedDate": "2020-10-21T13:38:10Z", "type": "commit"}, {"oid": "4e5b12c3a352ec7f68b2eabe9e105824820b376b", "url": "https://github.com/palantir/atlasdb/commit/4e5b12c3a352ec7f68b2eabe9e105824820b376b", "message": "Add generated changelog entries", "committedDate": "2020-10-21T13:38:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI5NDg5Ng==", "url": "https://github.com/palantir/atlasdb/pull/5064#discussion_r509294896", "bodyText": "Rename to something just so that we know the purpose here is literally just as arbitrary keys for the cache.", "author": "Jolyon-S", "createdAt": "2020-10-21T13:43:55Z", "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/util/SlidingWindowWeightedMeanGauge.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.util;\n+\n+import com.codahale.metrics.Gauge;\n+import com.github.benmanes.caffeine.cache.Cache;\n+import com.github.benmanes.caffeine.cache.Caffeine;\n+import com.google.common.collect.ImmutableList;\n+import com.palantir.logsafe.Preconditions;\n+import com.palantir.logsafe.SafeArg;\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicLong;\n+import org.immutables.value.Value;\n+\n+/**\n+ * A gauge that calculates the weighted mean of updates during a sliding window of time. Correctness is only guaranteed\n+ * as long as the sum of recorded weights and sum of weighted values do not exceed {@link Long#MAX_VALUE} and\n+ * {@link Double#MAX_VALUE}, respectively.\n+ */\n+public class SlidingWindowWeightedMeanGauge implements Gauge<Double> {\n+    private final Cache<Long, WeightedEntry> updates;\n+    private final AtomicLong counter = new AtomicLong();", "originalCommit": "ebbc26ab11353d5fdb4e6ebcb75655a02adc99ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7771b0d137c8c67446f8ed69bd7caef119e32004", "chunk": "diff --git a/atlasdb-client/src/main/java/com/palantir/atlasdb/util/SlidingWindowWeightedMeanGauge.java b/atlasdb-client/src/main/java/com/palantir/atlasdb/util/SlidingWindowWeightedMeanGauge.java\nindex bc3be3819f..527dabb0e0 100644\n--- a/atlasdb-client/src/main/java/com/palantir/atlasdb/util/SlidingWindowWeightedMeanGauge.java\n+++ b/atlasdb-client/src/main/java/com/palantir/atlasdb/util/SlidingWindowWeightedMeanGauge.java\n\n@@ -34,7 +34,7 @@ import org.immutables.value.Value;\n  */\n public class SlidingWindowWeightedMeanGauge implements Gauge<Double> {\n     private final Cache<Long, WeightedEntry> updates;\n-    private final AtomicLong counter = new AtomicLong();\n+    private final AtomicLong fakeCounter = new AtomicLong();\n \n     public SlidingWindowWeightedMeanGauge(Duration expirationDuration) {\n         this.updates =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI5NzA3NQ==", "url": "https://github.com/palantir/atlasdb/pull/5064#discussion_r509297075", "bodyText": "Use just mapToLong", "author": "Jolyon-S", "createdAt": "2020-10-21T13:45:53Z", "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/util/SlidingWindowWeightedMeanGauge.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.util;\n+\n+import com.codahale.metrics.Gauge;\n+import com.github.benmanes.caffeine.cache.Cache;\n+import com.github.benmanes.caffeine.cache.Caffeine;\n+import com.google.common.collect.ImmutableList;\n+import com.palantir.logsafe.Preconditions;\n+import com.palantir.logsafe.SafeArg;\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicLong;\n+import org.immutables.value.Value;\n+\n+/**\n+ * A gauge that calculates the weighted mean of updates during a sliding window of time. Correctness is only guaranteed\n+ * as long as the sum of recorded weights and sum of weighted values do not exceed {@link Long#MAX_VALUE} and\n+ * {@link Double#MAX_VALUE}, respectively.\n+ */\n+public class SlidingWindowWeightedMeanGauge implements Gauge<Double> {\n+    private final Cache<Long, WeightedEntry> updates;\n+    private final AtomicLong counter = new AtomicLong();\n+\n+    public SlidingWindowWeightedMeanGauge(Duration expirationDuration) {\n+        this.updates =\n+                Caffeine.newBuilder().expireAfterWrite(expirationDuration).build();\n+    }\n+\n+    public static SlidingWindowWeightedMeanGauge create() {\n+        return new SlidingWindowWeightedMeanGauge(Duration.ofMinutes(5L));\n+    }\n+\n+    @Override\n+    public Double getValue() {\n+        List<WeightedEntry> snapshot = ImmutableList.copyOf(updates.asMap().values());\n+        return summarize(snapshot);\n+    }\n+\n+    public void update(double value, long weight) {\n+        Preconditions.checkArgument(weight >= 0, \"Weight cannot be negative.\", SafeArg.of(\"weight\", weight));\n+        if (weight == 0) {\n+            return;\n+        }\n+        updates.put(counter.getAndIncrement(), ImmutableWeightedEntry.of(value, weight));\n+    }\n+\n+    private double summarize(List<WeightedEntry> snapshot) {\n+        long totalWeight =\n+                snapshot.stream().map(WeightedEntry::weight).mapToLong(x -> x).sum();", "originalCommit": "ebbc26ab11353d5fdb4e6ebcb75655a02adc99ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7771b0d137c8c67446f8ed69bd7caef119e32004", "chunk": "diff --git a/atlasdb-client/src/main/java/com/palantir/atlasdb/util/SlidingWindowWeightedMeanGauge.java b/atlasdb-client/src/main/java/com/palantir/atlasdb/util/SlidingWindowWeightedMeanGauge.java\nindex bc3be3819f..527dabb0e0 100644\n--- a/atlasdb-client/src/main/java/com/palantir/atlasdb/util/SlidingWindowWeightedMeanGauge.java\n+++ b/atlasdb-client/src/main/java/com/palantir/atlasdb/util/SlidingWindowWeightedMeanGauge.java\n\n@@ -34,7 +34,7 @@ import org.immutables.value.Value;\n  */\n public class SlidingWindowWeightedMeanGauge implements Gauge<Double> {\n     private final Cache<Long, WeightedEntry> updates;\n-    private final AtomicLong counter = new AtomicLong();\n+    private final AtomicLong fakeCounter = new AtomicLong();\n \n     public SlidingWindowWeightedMeanGauge(Duration expirationDuration) {\n         this.updates =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI5ODYxNQ==", "url": "https://github.com/palantir/atlasdb/pull/5064#discussion_r509298615", "bodyText": "same as above", "author": "Jolyon-S", "createdAt": "2020-10-21T13:47:07Z", "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/util/SlidingWindowWeightedMeanGauge.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.util;\n+\n+import com.codahale.metrics.Gauge;\n+import com.github.benmanes.caffeine.cache.Cache;\n+import com.github.benmanes.caffeine.cache.Caffeine;\n+import com.google.common.collect.ImmutableList;\n+import com.palantir.logsafe.Preconditions;\n+import com.palantir.logsafe.SafeArg;\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicLong;\n+import org.immutables.value.Value;\n+\n+/**\n+ * A gauge that calculates the weighted mean of updates during a sliding window of time. Correctness is only guaranteed\n+ * as long as the sum of recorded weights and sum of weighted values do not exceed {@link Long#MAX_VALUE} and\n+ * {@link Double#MAX_VALUE}, respectively.\n+ */\n+public class SlidingWindowWeightedMeanGauge implements Gauge<Double> {\n+    private final Cache<Long, WeightedEntry> updates;\n+    private final AtomicLong counter = new AtomicLong();\n+\n+    public SlidingWindowWeightedMeanGauge(Duration expirationDuration) {\n+        this.updates =\n+                Caffeine.newBuilder().expireAfterWrite(expirationDuration).build();\n+    }\n+\n+    public static SlidingWindowWeightedMeanGauge create() {\n+        return new SlidingWindowWeightedMeanGauge(Duration.ofMinutes(5L));\n+    }\n+\n+    @Override\n+    public Double getValue() {\n+        List<WeightedEntry> snapshot = ImmutableList.copyOf(updates.asMap().values());\n+        return summarize(snapshot);\n+    }\n+\n+    public void update(double value, long weight) {\n+        Preconditions.checkArgument(weight >= 0, \"Weight cannot be negative.\", SafeArg.of(\"weight\", weight));\n+        if (weight == 0) {\n+            return;\n+        }\n+        updates.put(counter.getAndIncrement(), ImmutableWeightedEntry.of(value, weight));\n+    }\n+\n+    private double summarize(List<WeightedEntry> snapshot) {\n+        long totalWeight =\n+                snapshot.stream().map(WeightedEntry::weight).mapToLong(x -> x).sum();\n+        if (totalWeight == 0) {\n+            return 0.0;\n+        }\n+        double valueSum = snapshot.stream()\n+                .map(entry -> entry.value() * entry.weight())\n+                .mapToDouble(x -> x)", "originalCommit": "ebbc26ab11353d5fdb4e6ebcb75655a02adc99ec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7771b0d137c8c67446f8ed69bd7caef119e32004", "chunk": "diff --git a/atlasdb-client/src/main/java/com/palantir/atlasdb/util/SlidingWindowWeightedMeanGauge.java b/atlasdb-client/src/main/java/com/palantir/atlasdb/util/SlidingWindowWeightedMeanGauge.java\nindex bc3be3819f..527dabb0e0 100644\n--- a/atlasdb-client/src/main/java/com/palantir/atlasdb/util/SlidingWindowWeightedMeanGauge.java\n+++ b/atlasdb-client/src/main/java/com/palantir/atlasdb/util/SlidingWindowWeightedMeanGauge.java\n\n@@ -34,7 +34,7 @@ import org.immutables.value.Value;\n  */\n public class SlidingWindowWeightedMeanGauge implements Gauge<Double> {\n     private final Cache<Long, WeightedEntry> updates;\n-    private final AtomicLong counter = new AtomicLong();\n+    private final AtomicLong fakeCounter = new AtomicLong();\n \n     public SlidingWindowWeightedMeanGauge(Duration expirationDuration) {\n         this.updates =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI5OTMzMg==", "url": "https://github.com/palantir/atlasdb/pull/5064#discussion_r509299332", "bodyText": "can we reduce to <1%? Just to make this a bit tighter", "author": "Jolyon-S", "createdAt": "2020-10-21T13:47:40Z", "path": "atlasdb-client/src/test/java/com/palantir/atlasdb/util/SlidingWindowWeightedMeanGaugeTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.util;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.assertj.core.api.Assertions.withinPercentage;\n+\n+import java.time.Duration;\n+import org.junit.Test;\n+\n+public class SlidingWindowWeightedMeanGaugeTest {\n+    private SlidingWindowWeightedMeanGauge gauge = SlidingWindowWeightedMeanGauge.create();\n+\n+    @Test\n+    public void initialValueIsZero() {\n+        assertValueWithinOnePercentOf(0.0);\n+    }\n+\n+    @Test\n+    public void withEqualWeightsCalculateMeanOfValues() {\n+        gauge.update(1.2, 5L);\n+        gauge.update(1.5, 5L);\n+        gauge.update(1.8, 5L);\n+        assertValueWithinOnePercentOf(1.5);\n+    }\n+\n+    @Test\n+    public void calculateWeightedMean() {\n+        gauge.update(101.0, 1);\n+        gauge.update(1.0, 98);\n+        gauge.update(301.0, 1);\n+        assertValueWithinOnePercentOf(5.0);\n+    }\n+\n+    @Test\n+    public void testMultipleGets() {\n+        gauge.update(1.0, 1);\n+        assertValueWithinOnePercentOf(1.0);\n+        assertValueWithinOnePercentOf(1.0);\n+        gauge.update(0.5, 4);\n+        assertValueWithinOnePercentOf(0.6);\n+    }\n+\n+    @Test\n+    public void entriesWithWeightZeroAreIgnored() {\n+        gauge.update(999.0, 0);\n+        gauge.update(1.0, 1);\n+        gauge.update(123.0, 0);\n+        assertValueWithinOnePercentOf(1.0);\n+    }\n+\n+    @Test\n+    public void entriesWithNegativeWeightThrow() {\n+        gauge.update(5.0, 4);\n+        assertThatThrownBy(() -> gauge.update(2345.0, -1)).isInstanceOf(IllegalArgumentException.class);\n+        assertValueWithinOnePercentOf(5.0);\n+    }\n+\n+    @Test\n+    public void entriesExpire() {\n+        SlidingWindowWeightedMeanGauge expiringGauge = new SlidingWindowWeightedMeanGauge(Duration.ZERO);\n+        expiringGauge.update(100.0, 50);\n+        expiringGauge.update(50.0, 4);\n+        assertThat(expiringGauge.getValue()).isCloseTo(0.0, withinPercentage(1));", "originalCommit": "ebbc26ab11353d5fdb4e6ebcb75655a02adc99ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI5OTk3OA==", "url": "https://github.com/palantir/atlasdb/pull/5064#discussion_r509299978", "bodyText": "Also, use other method", "author": "Jolyon-S", "createdAt": "2020-10-21T13:48:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI5OTMzMg=="}], "type": "inlineReview", "revised_code": {"commit": "7771b0d137c8c67446f8ed69bd7caef119e32004", "chunk": "diff --git a/atlasdb-client/src/test/java/com/palantir/atlasdb/util/SlidingWindowWeightedMeanGaugeTest.java b/atlasdb-client/src/test/java/com/palantir/atlasdb/util/SlidingWindowWeightedMeanGaugeTest.java\nindex dc96b0a06d..787b914162 100644\n--- a/atlasdb-client/src/test/java/com/palantir/atlasdb/util/SlidingWindowWeightedMeanGaugeTest.java\n+++ b/atlasdb-client/src/test/java/com/palantir/atlasdb/util/SlidingWindowWeightedMeanGaugeTest.java\n\n@@ -28,7 +28,7 @@ public class SlidingWindowWeightedMeanGaugeTest {\n \n     @Test\n     public void initialValueIsZero() {\n-        assertValueWithinOnePercentOf(0.0);\n+        assertValueIsCloseTo(0.0);\n     }\n \n     @Test\n"}}, {"oid": "7771b0d137c8c67446f8ed69bd7caef119e32004", "url": "https://github.com/palantir/atlasdb/commit/7771b0d137c8c67446f8ed69bd7caef119e32004", "message": "Address CR", "committedDate": "2020-10-21T13:58:59Z", "type": "commit"}, {"oid": "8494a845636bb9eb03f44514ffc0f96b120a2c2f", "url": "https://github.com/palantir/atlasdb/commit/8494a845636bb9eb03f44514ffc0f96b120a2c2f", "message": "Merge branch 'le/swwmg' of github.com:palantir/atlasdb into le/swwmg", "committedDate": "2020-10-21T13:59:18Z", "type": "commit"}]}