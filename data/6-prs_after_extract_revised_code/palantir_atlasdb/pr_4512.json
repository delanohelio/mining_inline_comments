{"pr_number": 4512, "pr_title": "Persistent storage refactoring", "pr_createdAt": "2020-01-15T17:13:08Z", "pr_url": "https://github.com/palantir/atlasdb/pull/4512", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwMTk0Mw==", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367001943", "bodyText": "can this be imported? it pushes everything to the far right", "author": "felixdesouza", "createdAt": "2020-01-15T17:16:47Z", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PersistentStore.java", "diffHunk": "@@ -27,76 +27,76 @@\n \n import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n \n-public interface PersistentTimestampStore extends AutoCloseable {\n+public interface PersistentStore extends AutoCloseable {\n     @Value.Immutable\n     interface StoreNamespace {\n         String humanReadableName();\n         UUID uniqueName();\n     }\n \n     /**\n-     * Gets the commit timestamp associated with the entry specified by {@code startTs}.\n+     * Gets the value associated with the entry specified by {@code key}.\n      *\n-     * @param storeNamespace handle to the namespace from which we want to retrieve the commit timestamp\n-     * @param startTs        entry key for which we want to retrieve commit timestamp\n-     * @return the associated timestamp or null if the entry is missing\n-     * @throws com.palantir.logsafe.exceptions.SafeIllegalArgumentException when {@code storeNamespace} is a\n-     * handle to a non existing namespace\n+     * @param storeNamespace handle to the namespace from which we want to retrieve the value\n+     * @param key            entry key for which we want to retrieve the value\n+     * @return the associated value or null if the entry is missing\n+     * @throws com.palantir.logsafe.exceptions.SafeIllegalArgumentException when {@code storeNamespace} is a handle to a", "originalCommit": "e445a4046a688999ac62d9cc40cf5501f5925dae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAxMjExNw==", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367012117", "bodyText": "Imported.", "author": "OStevan", "createdAt": "2020-01-15T17:36:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwMTk0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "e3245d090184c97cf5fcecb00f5d207a41f3ccf3", "chunk": "diff --git a/atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PersistentStore.java b/atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PersistentStore.java\nindex c242f31f3e..1b25bcbd05 100644\n--- a/atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PersistentStore.java\n+++ b/atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PersistentStore.java\n\n@@ -40,8 +40,7 @@ public interface PersistentStore extends AutoCloseable {\n      * @param storeNamespace handle to the namespace from which we want to retrieve the value\n      * @param key            entry key for which we want to retrieve the value\n      * @return the associated value or null if the entry is missing\n-     * @throws com.palantir.logsafe.exceptions.SafeIllegalArgumentException when {@code storeNamespace} is a handle to a\n-     *                                                                      non existing namespace\n+     * @throws SafeIllegalArgumentException when {@code storeNamespace} is a handle to a non existing namespace\n      */\n     @Nullable\n     byte[] get(StoreNamespace storeNamespace, @Nonnull byte[] key) throws SafeIllegalArgumentException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwMjIxMA==", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367002210", "bodyText": "The name is misleading and unintuitive and not really comparable to a TableReference. It should be called something else.", "author": "felixdesouza", "createdAt": "2020-01-15T17:17:22Z", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/LogicalPersistentStore.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.persistent.api;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import com.palantir.atlasdb.persistent.api.PersistentStore.StoreNamespace;\n+\n+public interface LogicalPersistentStore<K, V> {\n+    /**\n+     * Retrieve the value associated with the given {@code key}.\n+     *\n+     * @param storeNamespace from which to retrieve the value\n+     * @param key            of the cache entry\n+     * @return value associated or null if the entry is missing\n+     */\n+    @Nullable\n+    V get(StoreNamespace storeNamespace, @Nonnull K key);\n+\n+    /**\n+     * Retreives values for all supplied {@code keys}.\n+     *\n+     * @param storeNamespace from which to retrieve the values\n+     * @param keys           for which entries we are interested in\n+     * @return map of key, value pairs containing only entries which are stored\n+     */\n+    Map<K, V> multiGet(StoreNamespace storeNamespace, List<K> keys);\n+\n+    /**\n+     * Stores the given entry pair.\n+     *\n+     * @param storeNamespace where to store the entry\n+     * @param key            of the entry\n+     * @param value          of the entry\n+     */\n+    void put(StoreNamespace storeNamespace, @Nonnull K key, @Nonnull V value);\n+\n+    /**\n+     * Stores all entry pairs specified in {@code toWrite}.\n+     *\n+     * @param storeNamespace where to store the entries\n+     * @param toWrite        entry pairs to store\n+     */\n+    void multiPut(StoreNamespace storeNamespace, Map<K, V> toWrite);\n+\n+    /**\n+     * Creates a {@link StoreNamespace} with the given name. Multiple calls with the same {@code name} will return\n+     * different namespaces.\n+     *\n+     * @param name of the namespace\n+     * @return handle to the underlying namespace\n+     */\n+    StoreNamespace createNamespace(@Nonnull String name);", "originalCommit": "e445a4046a688999ac62d9cc40cf5501f5925dae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwMjg5MA==", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367002890", "bodyText": "also, I'd drop the concept of namespace, it's currently overloaded i.e. it's not the same thing as a timelock namespace or a c* namespace/keyspace and it's an extra concept. Something along the lines of: createHandleForNamespace if that's the distinction you're going for.", "author": "felixdesouza", "createdAt": "2020-01-15T17:18:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwMjIxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwMTAwNg==", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367601006", "bodyText": "Agree, though I think we should track this on another PR (StoreNamespace is already used quite a lot through this project).", "author": "jeremyk-91", "createdAt": "2020-01-16T19:15:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwMjIxMA=="}], "type": "inlineReview", "revised_code": {"commit": "a55f54a036024462d96d313fc659e949a9dd1ee8", "chunk": "diff --git a/atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/LogicalPersistentStore.java b/atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/LogicalPersistentStore.java\nindex a2eb3e872a..c0dfd7c4b6 100644\n--- a/atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/LogicalPersistentStore.java\n+++ b/atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/LogicalPersistentStore.java\n\n@@ -29,7 +29,7 @@ public interface LogicalPersistentStore<K, V> {\n      * Retrieve the value associated with the given {@code key}.\n      *\n      * @param storeNamespace from which to retrieve the value\n-     * @param key            of the cache entry\n+     * @param key of the cache entry\n      * @return value associated or null if the entry is missing\n      */\n     @Nullable\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwMzQ2Mw==", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367003463", "bodyText": "Persistent -> Persistence?\nIs this generic i.e. it's not necessarily for a TimestampCache? Do we want this outside of the original goal?", "author": "felixdesouza", "createdAt": "2020-01-15T17:19:56Z", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/LogicalPersistentStore.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.persistent.api;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import com.palantir.atlasdb.persistent.api.PersistentStore.StoreNamespace;\n+\n+public interface LogicalPersistentStore<K, V> {", "originalCommit": "e445a4046a688999ac62d9cc40cf5501f5925dae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAxMzA3OQ==", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367013079", "bodyText": "The way things are used in internal ski product I need to store things which might not be just Long -> Long, so to be able to support that I need generics.", "author": "OStevan", "createdAt": "2020-01-15T17:38:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwMzQ2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "a55f54a036024462d96d313fc659e949a9dd1ee8", "chunk": "diff --git a/atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/LogicalPersistentStore.java b/atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/LogicalPersistentStore.java\nindex a2eb3e872a..c0dfd7c4b6 100644\n--- a/atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/LogicalPersistentStore.java\n+++ b/atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/LogicalPersistentStore.java\n\n@@ -29,7 +29,7 @@ public interface LogicalPersistentStore<K, V> {\n      * Retrieve the value associated with the given {@code key}.\n      *\n      * @param storeNamespace from which to retrieve the value\n-     * @param key            of the cache entry\n+     * @param key of the cache entry\n      * @return value associated or null if the entry is missing\n      */\n     @Nullable\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwMzczNQ==", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367003735", "bodyText": "if you are making a new api, can it not be @Nullable and use Optional's?", "author": "felixdesouza", "createdAt": "2020-01-15T17:20:25Z", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/LogicalPersistentStore.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.persistent.api;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import com.palantir.atlasdb.persistent.api.PersistentStore.StoreNamespace;\n+\n+public interface LogicalPersistentStore<K, V> {\n+    /**\n+     * Retrieve the value associated with the given {@code key}.\n+     *\n+     * @param storeNamespace from which to retrieve the value\n+     * @param key            of the cache entry\n+     * @return value associated or null if the entry is missing\n+     */\n+    @Nullable", "originalCommit": "e445a4046a688999ac62d9cc40cf5501f5925dae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAxOTg5Mg==", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367019892", "bodyText": "It is now optional.", "author": "OStevan", "createdAt": "2020-01-15T17:53:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwMzczNQ=="}], "type": "inlineReview", "revised_code": {"commit": "a55f54a036024462d96d313fc659e949a9dd1ee8", "chunk": "diff --git a/atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/LogicalPersistentStore.java b/atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/LogicalPersistentStore.java\nindex a2eb3e872a..c0dfd7c4b6 100644\n--- a/atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/LogicalPersistentStore.java\n+++ b/atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/LogicalPersistentStore.java\n\n@@ -29,7 +29,7 @@ public interface LogicalPersistentStore<K, V> {\n      * Retrieve the value associated with the given {@code key}.\n      *\n      * @param storeNamespace from which to retrieve the value\n-     * @param key            of the cache entry\n+     * @param key of the cache entry\n      * @return value associated or null if the entry is missing\n      */\n     @Nullable\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwNDEyMQ==", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367004121", "bodyText": "nit: will defer to @jeremyk-91, just overload get and put, as opposed to multiget?", "author": "felixdesouza", "createdAt": "2020-01-15T17:21:07Z", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/LogicalPersistentStore.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.persistent.api;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import com.palantir.atlasdb.persistent.api.PersistentStore.StoreNamespace;\n+\n+public interface LogicalPersistentStore<K, V> {\n+    /**\n+     * Retrieve the value associated with the given {@code key}.\n+     *\n+     * @param storeNamespace from which to retrieve the value\n+     * @param key            of the cache entry\n+     * @return value associated or null if the entry is missing\n+     */\n+    @Nullable\n+    V get(StoreNamespace storeNamespace, @Nonnull K key);\n+\n+    /**\n+     * Retreives values for all supplied {@code keys}.\n+     *\n+     * @param storeNamespace from which to retrieve the values\n+     * @param keys           for which entries we are interested in\n+     * @return map of key, value pairs containing only entries which are stored\n+     */\n+    Map<K, V> multiGet(StoreNamespace storeNamespace, List<K> keys);", "originalCommit": "e445a4046a688999ac62d9cc40cf5501f5925dae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwMDc1Mw==", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367600753", "bodyText": "Yep, overloading seems reasonable", "author": "jeremyk-91", "createdAt": "2020-01-16T19:15:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwNDEyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "a55f54a036024462d96d313fc659e949a9dd1ee8", "chunk": "diff --git a/atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/LogicalPersistentStore.java b/atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/LogicalPersistentStore.java\nindex a2eb3e872a..c0dfd7c4b6 100644\n--- a/atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/LogicalPersistentStore.java\n+++ b/atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/LogicalPersistentStore.java\n\n@@ -29,7 +29,7 @@ public interface LogicalPersistentStore<K, V> {\n      * Retrieve the value associated with the given {@code key}.\n      *\n      * @param storeNamespace from which to retrieve the value\n-     * @param key            of the cache entry\n+     * @param key of the cache entry\n      * @return value associated or null if the entry is missing\n      */\n     @Nullable\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwNDM2NA==", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367004364", "bodyText": "What does dropping even mean here? This class is super abstract and it's still unclear what it's for.", "author": "felixdesouza", "createdAt": "2020-01-15T17:21:37Z", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/LogicalPersistentStore.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.persistent.api;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import com.palantir.atlasdb.persistent.api.PersistentStore.StoreNamespace;\n+\n+public interface LogicalPersistentStore<K, V> {\n+    /**\n+     * Retrieve the value associated with the given {@code key}.\n+     *\n+     * @param storeNamespace from which to retrieve the value\n+     * @param key            of the cache entry\n+     * @return value associated or null if the entry is missing\n+     */\n+    @Nullable\n+    V get(StoreNamespace storeNamespace, @Nonnull K key);\n+\n+    /**\n+     * Retreives values for all supplied {@code keys}.\n+     *\n+     * @param storeNamespace from which to retrieve the values\n+     * @param keys           for which entries we are interested in\n+     * @return map of key, value pairs containing only entries which are stored\n+     */\n+    Map<K, V> multiGet(StoreNamespace storeNamespace, List<K> keys);\n+\n+    /**\n+     * Stores the given entry pair.\n+     *\n+     * @param storeNamespace where to store the entry\n+     * @param key            of the entry\n+     * @param value          of the entry\n+     */\n+    void put(StoreNamespace storeNamespace, @Nonnull K key, @Nonnull V value);\n+\n+    /**\n+     * Stores all entry pairs specified in {@code toWrite}.\n+     *\n+     * @param storeNamespace where to store the entries\n+     * @param toWrite        entry pairs to store\n+     */\n+    void multiPut(StoreNamespace storeNamespace, Map<K, V> toWrite);\n+\n+    /**\n+     * Creates a {@link StoreNamespace} with the given name. Multiple calls with the same {@code name} will return\n+     * different namespaces.\n+     *\n+     * @param name of the namespace\n+     * @return handle to the underlying namespace\n+     */\n+    StoreNamespace createNamespace(@Nonnull String name);\n+\n+    /**\n+     * Drops the namespace.", "originalCommit": "e445a4046a688999ac62d9cc40cf5501f5925dae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM5MzA5Nw==", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367393097", "bodyText": "Added a more detailed doc. The explanation is in the previous comment.", "author": "OStevan", "createdAt": "2020-01-16T12:34:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwNDM2NA=="}], "type": "inlineReview", "revised_code": {"commit": "a55f54a036024462d96d313fc659e949a9dd1ee8", "chunk": "diff --git a/atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/LogicalPersistentStore.java b/atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/LogicalPersistentStore.java\nindex a2eb3e872a..c0dfd7c4b6 100644\n--- a/atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/LogicalPersistentStore.java\n+++ b/atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/LogicalPersistentStore.java\n\n@@ -29,7 +29,7 @@ public interface LogicalPersistentStore<K, V> {\n      * Retrieve the value associated with the given {@code key}.\n      *\n      * @param storeNamespace from which to retrieve the value\n-     * @param key            of the cache entry\n+     * @param key of the cache entry\n      * @return value associated or null if the entry is missing\n      */\n     @Nullable\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwNTM4OA==", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367005388", "bodyText": "what's with the question mark generics?\nproposal/namespace/descriptor? can we agree on the terminology?", "author": "felixdesouza", "createdAt": "2020-01-15T17:23:31Z", "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/cache/OffHeapTimestampCache.java", "diffHunk": "@@ -132,8 +134,8 @@ public Long getCommitTimestampIfPresent(Long startTimestamp) {\n     }\n \n     private static CacheDescriptor createNamespaceAndConstructCacheProposal(\n-            PersistentTimestampStore persistentTimestampStore) {\n-        StoreNamespace proposal = persistentTimestampStore.createNamespace(TIMESTAMP_CACHE_NAMESPACE);\n+            LogicalPersistentStore<?, ?> persistentStore) {", "originalCommit": "e445a4046a688999ac62d9cc40cf5501f5925dae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAyMjk2NA==", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367022964", "bodyText": "Proposal and descriptor are internal to cache. I changed now the access modifier for CacheDescriptor", "author": "OStevan", "createdAt": "2020-01-15T17:59:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwNTM4OA=="}], "type": "inlineReview", "revised_code": {"commit": "d106e5341549cd542a9be478498577b05076665d", "chunk": "diff --git a/atlasdb-client/src/main/java/com/palantir/atlasdb/cache/OffHeapTimestampCache.java b/atlasdb-client/src/main/java/com/palantir/atlasdb/cache/OffHeapTimestampCache.java\nindex 2cc0704fd6..949356158d 100644\n--- a/atlasdb-client/src/main/java/com/palantir/atlasdb/cache/OffHeapTimestampCache.java\n+++ b/atlasdb-client/src/main/java/com/palantir/atlasdb/cache/OffHeapTimestampCache.java\n\n@@ -122,15 +122,23 @@ public final class OffHeapTimestampCache implements TimestampCache {\n     @Nullable\n     @Override\n     public Long getCommitTimestampIfPresent(Long startTimestamp) {\n-        Long value = Optional.ofNullable(inflightRequests.get(startTimestamp))\n-                .orElseGet(() -> timestampStore.get(cacheDescriptor.get().storeNamespace(), startTimestamp));\n+        Optional<Long> value = getCommitTimestamp(startTimestamp);\n \n-        if (value == null) {\n-            taggedMetricRegistry.meter(CACHE_MISS).mark();\n-        } else {\n+        if (value.isPresent()) {\n             taggedMetricRegistry.meter(CACHE_HIT).mark();\n+        } else {\n+            taggedMetricRegistry.meter(CACHE_MISS).mark();\n         }\n-        return value;\n+        return value.orElse(null);\n+    }\n+\n+    private Optional<Long> getCommitTimestamp(Long startTimestamp) {\n+        Long inFlight = inflightRequests.get(startTimestamp);\n+        if (inFlight != null) {\n+            return Optional.of(inFlight);\n+        }\n+\n+        return timestampStore.get(cacheDescriptor.get().storeNamespace(), startTimestamp);\n     }\n \n     private static CacheDescriptor createNamespaceAndConstructCacheProposal(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwNjY2NQ==", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367006665", "bodyText": "If you're making the distinction between logical and physical, then the physical one should actually be PhysicalPersistentStore.", "author": "felixdesouza", "createdAt": "2020-01-15T17:26:02Z", "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/cache/TimestampStore.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.cache;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Maps;\n+import com.palantir.atlasdb.persistent.api.LogicalPersistentStore;\n+import com.palantir.atlasdb.persistent.api.PersistentStore;\n+import com.palantir.atlasdb.persistent.api.PersistentStore.StoreNamespace;\n+import com.palantir.atlasdb.table.description.ValueType;\n+import com.palantir.common.streams.KeyedStream;\n+\n+/**\n+ * Stores timestamps using delta encoding for commit timestamp.\n+ */\n+public class TimestampStore implements LogicalPersistentStore<Long, Long> {\n+    private final PersistentStore physicalPersistentStore;", "originalCommit": "e445a4046a688999ac62d9cc40cf5501f5925dae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAxODY4NQ==", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367018685", "bodyText": "Renamed.", "author": "OStevan", "createdAt": "2020-01-15T17:50:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwNjY2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "b45c72b90a2f86d7e538f45b0066a6111f7ceff8", "chunk": "diff --git a/atlasdb-client/src/main/java/com/palantir/atlasdb/cache/TimestampStore.java b/atlasdb-client/src/main/java/com/palantir/atlasdb/cache/TimestampStore.java\nindex 6ea97fcdbd..60d9122b59 100644\n--- a/atlasdb-client/src/main/java/com/palantir/atlasdb/cache/TimestampStore.java\n+++ b/atlasdb-client/src/main/java/com/palantir/atlasdb/cache/TimestampStore.java\n\n@@ -35,17 +35,17 @@ import com.palantir.common.streams.KeyedStream;\n  * Stores timestamps using delta encoding for commit timestamp.\n  */\n public class TimestampStore implements LogicalPersistentStore<Long, Long> {\n-    private final PersistentStore physicalPersistentStore;\n+    private final PersistentStore persistentStore;\n \n     public TimestampStore(PersistentStore persistentStore) {\n-        this.physicalPersistentStore = persistentStore;\n+        this.persistentStore = persistentStore;\n     }\n \n     @Nullable\n     @Override\n     public Long get(StoreNamespace storeNamespace, @Nonnull Long startTs) {\n         byte[] byteKeyValue = ValueType.VAR_LONG.convertFromJava(startTs);\n-        byte[] value = physicalPersistentStore.get(storeNamespace, byteKeyValue);\n+        byte[] value = persistentStore.get(storeNamespace, byteKeyValue);\n \n         return deserializeValue(startTs, value);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwNzg0NQ==", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367007845", "bodyText": "It's still unclear to me the purpose of the refactoring here, this can still be in terms of timestamps no? do we actually have another use case for rocksdb?", "author": "felixdesouza", "createdAt": "2020-01-15T17:28:17Z", "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/persistent/rocksdb/RocksDbPersistentStore.java", "diffHunk": "@@ -46,52 +46,44 @@\n import com.google.common.collect.Maps;\n import com.google.common.collect.Streams;\n import com.palantir.atlasdb.persistent.api.ImmutableStoreNamespace;\n-import com.palantir.atlasdb.persistent.api.PersistentTimestampStore;\n-import com.palantir.atlasdb.table.description.ValueType;\n+import com.palantir.atlasdb.persistent.api.PersistentStore;\n import com.palantir.common.streams.KeyedStream;\n import com.palantir.logsafe.Preconditions;\n import com.palantir.tracing.Tracers.ThrowingCallable;\n \n /**\n- * Implementation of the {@link PersistentTimestampStore} using RocksDB as the underlying persistent storage. Commit\n- * timestamp associated with the start timestamp is encoded using delta encoding. Created {@link StoreNamespace}s are\n- * backed by RocksDB ColumnFamilies such that calling {@link RocksDbPersistentTimestampStore#createNamespace(String)}\n- * with the same name will construct a new {@link ColumnFamilyHandle} for each call.\n+ * Implementation of the {@link PersistentStore} using RocksDB as the underlying persistent storage. Created\n+ * {@link StoreNamespace}s are backed by RocksDB ColumnFamilies such that calling\n+ * {@link RocksDbPersistentStore#createNamespace(String)} with the same name will construct a new\n+ * {@link ColumnFamilyHandle} for each call.\n  */\n-public final class RocksDbPersistentTimestampStore implements PersistentTimestampStore {\n-    private static final Logger log = LoggerFactory.getLogger(RocksDbPersistentTimestampStore.class);\n+public final class RocksDbPersistentStore implements PersistentStore {", "originalCommit": "e445a4046a688999ac62d9cc40cf5501f5925dae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d106e5341549cd542a9be478498577b05076665d", "chunk": "diff --git a/atlasdb-client/src/main/java/com/palantir/atlasdb/persistent/rocksdb/RocksDbPersistentStore.java b/atlasdb-client/src/main/java/com/palantir/atlasdb/persistent/rocksdb/RocksDbPhysicalPersistentStore.java\nsimilarity index 90%\nrename from atlasdb-client/src/main/java/com/palantir/atlasdb/persistent/rocksdb/RocksDbPersistentStore.java\nrename to atlasdb-client/src/main/java/com/palantir/atlasdb/persistent/rocksdb/RocksDbPhysicalPersistentStore.java\nindex 9a7f77a835..fda28fe250 100644\n--- a/atlasdb-client/src/main/java/com/palantir/atlasdb/persistent/rocksdb/RocksDbPersistentStore.java\n+++ b/atlasdb-client/src/main/java/com/palantir/atlasdb/persistent/rocksdb/RocksDbPhysicalPersistentStore.java\n\n@@ -46,35 +46,34 @@ import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.Maps;\n import com.google.common.collect.Streams;\n import com.palantir.atlasdb.persistent.api.ImmutableStoreNamespace;\n-import com.palantir.atlasdb.persistent.api.PersistentStore;\n+import com.palantir.atlasdb.persistent.api.PhysicalPersistentStore;\n import com.palantir.common.streams.KeyedStream;\n import com.palantir.logsafe.Preconditions;\n import com.palantir.tracing.Tracers.ThrowingCallable;\n \n /**\n- * Implementation of the {@link PersistentStore} using RocksDB as the underlying persistent storage. Created\n+ * Implementation of the {@link PhysicalPersistentStore} using RocksDB as the underlying persistent storage. Created\n  * {@link StoreNamespace}s are backed by RocksDB ColumnFamilies such that calling\n- * {@link RocksDbPersistentStore#createNamespace(String)} with the same name will construct a new\n+ * {@link RocksDbPhysicalPersistentStore#createNamespace(String)} with the same name will construct a new\n  * {@link ColumnFamilyHandle} for each call.\n  */\n-public final class RocksDbPersistentStore implements PersistentStore {\n-    private static final Logger log = LoggerFactory.getLogger(RocksDbPersistentStore.class);\n+public final class RocksDbPhysicalPersistentStore implements PhysicalPersistentStore {\n+    private static final Logger log = LoggerFactory.getLogger(RocksDbPhysicalPersistentStore.class);\n \n     private final ConcurrentMap<UUID, ColumnFamilyHandle> availableColumnFamilies = new ConcurrentHashMap<>();\n     private final RocksDB rocksDB;\n     private final File databaseFolder;\n \n-    public RocksDbPersistentStore(RocksDB rocksDB, File databaseFolder) {\n+    public RocksDbPhysicalPersistentStore(RocksDB rocksDB, File databaseFolder) {\n         this.rocksDB = rocksDB;\n         this.databaseFolder = databaseFolder;\n     }\n \n     @Override\n-    @Nullable\n-    public byte[] get(StoreNamespace storeNamespace, @Nonnull byte[] key) {\n+    public Optional<byte[]> get(StoreNamespace storeNamespace, @Nonnull byte[] key) {\n         checkNamespaceExists(storeNamespace);\n \n-        return getValueBytes(availableColumnFamilies.get(storeNamespace.uniqueName()), key);\n+        return Optional.ofNullable(getValueBytes(availableColumnFamilies.get(storeNamespace.uniqueName()), key));\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwODI5MA==", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367008290", "bodyText": "Put rocks somewhere in the title, since this is an integration test of rocksdb", "author": "felixdesouza", "createdAt": "2020-01-15T17:29:10Z", "path": "atlasdb-client/src/test/java/com/palantir/atlasdb/cache/OffHeapTimestampCacheIntegrationTests.java", "diffHunk": "@@ -29,8 +29,8 @@\n import org.rocksdb.RocksDB;\n import org.rocksdb.RocksDBException;\n \n-import com.palantir.atlasdb.persistent.api.PersistentTimestampStore;\n-import com.palantir.atlasdb.persistent.rocksdb.RocksDbPersistentTimestampStore;\n+import com.palantir.atlasdb.persistent.api.PersistentStore;\n+import com.palantir.atlasdb.persistent.rocksdb.RocksDbPersistentStore;\n import com.palantir.atlasdb.util.MetricsManagers;\n \n public final class OffHeapTimestampCacheIntegrationTests {", "originalCommit": "e445a4046a688999ac62d9cc40cf5501f5925dae", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d106e5341549cd542a9be478498577b05076665d", "chunk": "diff --git a/atlasdb-client/src/test/java/com/palantir/atlasdb/cache/OffHeapTimestampCacheIntegrationTests.java b/atlasdb-client/src/test/java/com/palantir/atlasdb/cache/RocksDbOffHeapTimestampCacheIntegrationTests.java\nsimilarity index 86%\nrename from atlasdb-client/src/test/java/com/palantir/atlasdb/cache/OffHeapTimestampCacheIntegrationTests.java\nrename to atlasdb-client/src/test/java/com/palantir/atlasdb/cache/RocksDbOffHeapTimestampCacheIntegrationTests.java\nindex 5a5993b12e..db688047c6 100644\n--- a/atlasdb-client/src/test/java/com/palantir/atlasdb/cache/OffHeapTimestampCacheIntegrationTests.java\n+++ b/atlasdb-client/src/test/java/com/palantir/atlasdb/cache/RocksDbOffHeapTimestampCacheIntegrationTests.java\n\n@@ -29,34 +29,34 @@ import org.junit.rules.TemporaryFolder;\n import org.rocksdb.RocksDB;\n import org.rocksdb.RocksDBException;\n \n-import com.palantir.atlasdb.persistent.api.PersistentStore;\n-import com.palantir.atlasdb.persistent.rocksdb.RocksDbPersistentStore;\n+import com.palantir.atlasdb.persistent.api.PhysicalPersistentStore;\n+import com.palantir.atlasdb.persistent.rocksdb.RocksDbPhysicalPersistentStore;\n import com.palantir.atlasdb.util.MetricsManagers;\n \n-public final class OffHeapTimestampCacheIntegrationTests {\n+public final class RocksDbOffHeapTimestampCacheIntegrationTests {\n     @ClassRule\n     public static final TemporaryFolder TEMPORARY_FOLDER = new TemporaryFolder();\n     private static final int CACHE_SIZE = 2;\n \n     private TimestampCache offHeapTimestampCache;\n-    private PersistentStore persistentStore;\n+    private PhysicalPersistentStore physicalPersistentStore;\n \n     @Before\n     public void before() throws RocksDBException, IOException {\n         File databaseFolder = TEMPORARY_FOLDER.newFolder();\n         RocksDB rocksDb = RocksDB.open(databaseFolder.getAbsolutePath());\n \n-        persistentStore = new RocksDbPersistentStore(rocksDb, databaseFolder);\n+        physicalPersistentStore = new RocksDbPhysicalPersistentStore(rocksDb, databaseFolder);\n \n         offHeapTimestampCache = OffHeapTimestampCache.create(\n-                persistentStore,\n+                physicalPersistentStore,\n                 MetricsManagers.createForTests().getTaggedRegistry(),\n                 () -> CACHE_SIZE);\n     }\n \n     @After\n     public void after() throws Exception {\n-        persistentStore.close();\n+        physicalPersistentStore.close();\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwODQ3OA==", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367008478", "bodyText": "similarly, add rocksdb somewhere to the title", "author": "felixdesouza", "createdAt": "2020-01-15T17:29:34Z", "path": "atlasdb-client/src/test/java/com/palantir/atlasdb/cache/TimestampStoreTests.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.cache;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.rocksdb.RocksDB;\n+import org.rocksdb.RocksDBException;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Maps;\n+import com.palantir.atlasdb.persistent.api.PersistentStore.StoreNamespace;\n+import com.palantir.atlasdb.persistent.rocksdb.RocksDbPersistentStore;\n+\n+public final class TimestampStoreTests {", "originalCommit": "e445a4046a688999ac62d9cc40cf5501f5925dae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwODk4NA==", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367008984", "bodyText": "or you can not use rocks here, and provide a mocked physical persistent store", "author": "felixdesouza", "createdAt": "2020-01-15T17:30:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwODQ3OA=="}], "type": "inlineReview", "revised_code": {"commit": "d106e5341549cd542a9be478498577b05076665d", "chunk": "diff --git a/atlasdb-client/src/test/java/com/palantir/atlasdb/cache/TimestampStoreTests.java b/atlasdb-client/src/test/java/com/palantir/atlasdb/cache/RocksDbTimestampStoreTests.java\nsimilarity index 88%\nrename from atlasdb-client/src/test/java/com/palantir/atlasdb/cache/TimestampStoreTests.java\nrename to atlasdb-client/src/test/java/com/palantir/atlasdb/cache/RocksDbTimestampStoreTests.java\nindex 3cf0c1a2e2..9dbc8d7cb6 100644\n--- a/atlasdb-client/src/test/java/com/palantir/atlasdb/cache/TimestampStoreTests.java\n+++ b/atlasdb-client/src/test/java/com/palantir/atlasdb/cache/RocksDbTimestampStoreTests.java\n\n@@ -32,16 +32,16 @@ import org.rocksdb.RocksDBException;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.Maps;\n-import com.palantir.atlasdb.persistent.api.PersistentStore.StoreNamespace;\n-import com.palantir.atlasdb.persistent.rocksdb.RocksDbPersistentStore;\n+import com.palantir.atlasdb.persistent.api.PhysicalPersistentStore.StoreNamespace;\n+import com.palantir.atlasdb.persistent.rocksdb.RocksDbPhysicalPersistentStore;\n \n-public final class TimestampStoreTests {\n+public final class RocksDbTimestampStoreTests {\n     @ClassRule\n     public static final TemporaryFolder TEMPORARY_FOLDER = new TemporaryFolder();\n     private static final String DEFAULT_NAMESPACE_NAME = \"default\";\n \n     private TimestampStore timestampStore;\n-    private RocksDbPersistentStore persistentStore;\n+    private RocksDbPhysicalPersistentStore persistentStore;\n     private StoreNamespace defaultNamespace;\n \n     @Before\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwOTY1NQ==", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367009655", "bodyText": "As an aside, this is weird. Everything is quite generic until it isn't. Similar to the async c* stuff, this should be a PersistentStorageConfig.", "author": "felixdesouza", "createdAt": "2020-01-15T17:31:52Z", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/PersistentStorageFactory.java", "diffHunk": "@@ -17,14 +17,15 @@\n package com.palantir.atlasdb.factory;\n \n import com.palantir.atlasdb.config.RocksDbPersistentStorageConfig;\n-import com.palantir.atlasdb.persistent.api.PersistentTimestampStore;\n+import com.palantir.atlasdb.persistent.api.PersistentStore;\n+import com.palantir.atlasdb.persistent.rocksdb.RocksDbPersistentStore;\n \n public interface PersistentStorageFactory {\n     /**\n-     * Constructs a {@link com.palantir.atlasdb.persistent.rocksdb.RocksDbPersistentTimestampStore} using the\n-     * supplied configuration.\n+     * Constructs a {@link RocksDbPersistentStore} using the supplied configuration.\n+     *\n      * @param config to use to configure the store\n      * @return store to be used\n      */\n-    PersistentTimestampStore constructPersistentTimestampStore(RocksDbPersistentStorageConfig config);\n+    PersistentStore constructPersistentStore(RocksDbPersistentStorageConfig config);", "originalCommit": "e445a4046a688999ac62d9cc40cf5501f5925dae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAxODQyMQ==", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367018421", "bodyText": "This was intentional since there is only one config so this is to keep it simple. Can be address in following PRs.", "author": "OStevan", "createdAt": "2020-01-15T17:49:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwOTY1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "d106e5341549cd542a9be478498577b05076665d", "chunk": "diff --git a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/PersistentStorageFactory.java b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/PersistentStorageFactory.java\nindex 7377bf4df7..fa0f3f47ab 100644\n--- a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/PersistentStorageFactory.java\n+++ b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/PersistentStorageFactory.java\n\n@@ -17,15 +17,15 @@\n package com.palantir.atlasdb.factory;\n \n import com.palantir.atlasdb.config.RocksDbPersistentStorageConfig;\n-import com.palantir.atlasdb.persistent.api.PersistentStore;\n-import com.palantir.atlasdb.persistent.rocksdb.RocksDbPersistentStore;\n+import com.palantir.atlasdb.persistent.api.PhysicalPersistentStore;\n+import com.palantir.atlasdb.persistent.rocksdb.RocksDbPhysicalPersistentStore;\n \n public interface PersistentStorageFactory {\n     /**\n-     * Constructs a {@link RocksDbPersistentStore} using the supplied configuration.\n+     * Constructs a {@link RocksDbPhysicalPersistentStore} using the supplied configuration.\n      *\n      * @param config to use to configure the store\n      * @return store to be used\n      */\n-    PersistentStore constructPersistentStore(RocksDbPersistentStorageConfig config);\n+    PhysicalPersistentStore constructPersistentStore(RocksDbPersistentStorageConfig config);\n }\n"}}, {"oid": "a55f54a036024462d96d313fc659e949a9dd1ee8", "url": "https://github.com/palantir/atlasdb/commit/a55f54a036024462d96d313fc659e949a9dd1ee8", "message": "Storage refactor.", "committedDate": "2020-01-16T13:53:43Z", "type": "commit"}, {"oid": "47b8b5a77221d2798907b6f10e47c95ec8e405c3", "url": "https://github.com/palantir/atlasdb/commit/47b8b5a77221d2798907b6f10e47c95ec8e405c3", "message": "Style fixes.", "committedDate": "2020-01-16T13:53:43Z", "type": "commit"}, {"oid": "e3245d090184c97cf5fcecb00f5d207a41f3ccf3", "url": "https://github.com/palantir/atlasdb/commit/e3245d090184c97cf5fcecb00f5d207a41f3ccf3", "message": "Updated docs.", "committedDate": "2020-01-16T13:53:43Z", "type": "commit"}, {"oid": "b45c72b90a2f86d7e538f45b0066a6111f7ceff8", "url": "https://github.com/palantir/atlasdb/commit/b45c72b90a2f86d7e538f45b0066a6111f7ceff8", "message": "Wrong copy fixed.", "committedDate": "2020-01-16T13:53:43Z", "type": "commit"}, {"oid": "d106e5341549cd542a9be478498577b05076665d", "url": "https://github.com/palantir/atlasdb/commit/d106e5341549cd542a9be478498577b05076665d", "message": "Some refactorings.", "committedDate": "2020-01-16T13:53:43Z", "type": "commit"}, {"oid": "d18fe412e327a06702baf8967d22c68dbda66fd8", "url": "https://github.com/palantir/atlasdb/commit/d18fe412e327a06702baf8967d22c68dbda66fd8", "message": "Renamed.", "committedDate": "2020-01-16T13:53:43Z", "type": "commit"}, {"oid": "8df6a184aba3b6807c1527c6df49246cc8c73be5", "url": "https://github.com/palantir/atlasdb/commit/8df6a184aba3b6807c1527c6df49246cc8c73be5", "message": "Fix tests.", "committedDate": "2020-01-16T13:53:43Z", "type": "commit"}, {"oid": "48cd57d5c89f18a25d70800a649293d681a05d76", "url": "https://github.com/palantir/atlasdb/commit/48cd57d5c89f18a25d70800a649293d681a05d76", "message": "Change access modifier.", "committedDate": "2020-01-16T13:53:43Z", "type": "commit"}, {"oid": "20e4832fd6a74037c81f3f1d3e67ca1e6a75f7eb", "url": "https://github.com/palantir/atlasdb/commit/20e4832fd6a74037c81f3f1d3e67ca1e6a75f7eb", "message": "Update comments.", "committedDate": "2020-01-16T13:53:43Z", "type": "commit"}, {"oid": "83a7cf342ef297db75e9da1a44424679e635f224", "url": "https://github.com/palantir/atlasdb/commit/83a7cf342ef297db75e9da1a44424679e635f224", "message": "Remove ?", "committedDate": "2020-01-16T13:53:43Z", "type": "commit"}, {"oid": "83a7cf342ef297db75e9da1a44424679e635f224", "url": "https://github.com/palantir/atlasdb/commit/83a7cf342ef297db75e9da1a44424679e635f224", "message": "Remove ?", "committedDate": "2020-01-16T13:53:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwMTIzNw==", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367601237", "bodyText": "based on @felixdesouza's suggestion above, we can just overload get/put here.\nAlso I'd prefer to try to avoid unqualified Map<byte[], byte[]> as it's error-prone because byte arrays by default go by reference equality", "author": "jeremyk-91", "createdAt": "2020-01-16T19:16:16Z", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PhysicalPersistentStore.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.persistent.api;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.immutables.value.Value;\n+\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+public interface PhysicalPersistentStore extends AutoCloseable {\n+    @Value.Immutable\n+    interface StoreNamespace {\n+        String humanReadableName();\n+        UUID uniqueName();\n+    }\n+\n+    /**\n+     * Gets the value associated with the entry specified by {@code key}.\n+     *\n+     * @param storeNamespace handle to the namespace from which we want to retrieve the value\n+     * @param key            entry key for which we want to retrieve the value\n+     * @return the {@link Optional} containing the value or empty if there is no associated value\n+     * @throws SafeIllegalArgumentException when {@code storeNamespace} is a handle to a non existing namespace\n+     */\n+    Optional<byte[]> get(StoreNamespace storeNamespace, @Nonnull byte[] key) throws SafeIllegalArgumentException;\n+\n+    /**\n+     * Gets the values associated with the entries specified by {@code keys}.\n+     *\n+     * @param storeNamespace handle to the namespace from which we want to retrieve the values\n+     * @param keys           representing keys for which we want to retrieve the values\n+     * @return a map from keys to values\n+     */\n+    Map<byte[], byte[]> multiGet(StoreNamespace storeNamespace, List<byte[]> keys);", "originalCommit": "83a7cf342ef297db75e9da1a44424679e635f224", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYyNDM4MA==", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367624380", "bodyText": "Changed to ByteString.", "author": "OStevan", "createdAt": "2020-01-16T20:07:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwMTIzNw=="}], "type": "inlineReview", "revised_code": {"commit": "eb81def7839abc28de24f27fd64bb184fec95d72", "chunk": "diff --git a/atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PhysicalPersistentStore.java b/atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PhysicalPersistentStore.java\nindex 0eb88ce7fe..2e7845ecf2 100644\n--- a/atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PhysicalPersistentStore.java\n+++ b/atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PhysicalPersistentStore.java\n\n@@ -42,7 +42,7 @@ public interface PhysicalPersistentStore extends AutoCloseable {\n      * @return the {@link Optional} containing the value or empty if there is no associated value\n      * @throws SafeIllegalArgumentException when {@code storeNamespace} is a handle to a non existing namespace\n      */\n-    Optional<byte[]> get(StoreNamespace storeNamespace, @Nonnull byte[] key) throws SafeIllegalArgumentException;\n+    Optional<byte[]> get(StoreNamespace storeNamespace, @Nonnull byte[] key);\n \n     /**\n      * Gets the values associated with the entries specified by {@code keys}.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwMTQyNQ==", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367601425", "bodyText": "nit: No need to declare runtime exceptions", "author": "jeremyk-91", "createdAt": "2020-01-16T19:16:37Z", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PhysicalPersistentStore.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.persistent.api;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.immutables.value.Value;\n+\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+public interface PhysicalPersistentStore extends AutoCloseable {\n+    @Value.Immutable\n+    interface StoreNamespace {\n+        String humanReadableName();\n+        UUID uniqueName();\n+    }\n+\n+    /**\n+     * Gets the value associated with the entry specified by {@code key}.\n+     *\n+     * @param storeNamespace handle to the namespace from which we want to retrieve the value\n+     * @param key            entry key for which we want to retrieve the value\n+     * @return the {@link Optional} containing the value or empty if there is no associated value\n+     * @throws SafeIllegalArgumentException when {@code storeNamespace} is a handle to a non existing namespace\n+     */\n+    Optional<byte[]> get(StoreNamespace storeNamespace, @Nonnull byte[] key) throws SafeIllegalArgumentException;", "originalCommit": "83a7cf342ef297db75e9da1a44424679e635f224", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb81def7839abc28de24f27fd64bb184fec95d72", "chunk": "diff --git a/atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PhysicalPersistentStore.java b/atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PhysicalPersistentStore.java\nindex 0eb88ce7fe..2e7845ecf2 100644\n--- a/atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PhysicalPersistentStore.java\n+++ b/atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PhysicalPersistentStore.java\n\n@@ -42,7 +42,7 @@ public interface PhysicalPersistentStore extends AutoCloseable {\n      * @return the {@link Optional} containing the value or empty if there is no associated value\n      * @throws SafeIllegalArgumentException when {@code storeNamespace} is a handle to a non existing namespace\n      */\n-    Optional<byte[]> get(StoreNamespace storeNamespace, @Nonnull byte[] key) throws SafeIllegalArgumentException;\n+    Optional<byte[]> get(StoreNamespace storeNamespace, @Nonnull byte[] key);\n \n     /**\n      * Gets the values associated with the entries specified by {@code keys}.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwMTQ4Mw==", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367601483", "bodyText": "nit: runtime exception", "author": "jeremyk-91", "createdAt": "2020-01-16T19:16:46Z", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PhysicalPersistentStore.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.persistent.api;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.immutables.value.Value;\n+\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+public interface PhysicalPersistentStore extends AutoCloseable {\n+    @Value.Immutable\n+    interface StoreNamespace {\n+        String humanReadableName();\n+        UUID uniqueName();\n+    }\n+\n+    /**\n+     * Gets the value associated with the entry specified by {@code key}.\n+     *\n+     * @param storeNamespace handle to the namespace from which we want to retrieve the value\n+     * @param key            entry key for which we want to retrieve the value\n+     * @return the {@link Optional} containing the value or empty if there is no associated value\n+     * @throws SafeIllegalArgumentException when {@code storeNamespace} is a handle to a non existing namespace\n+     */\n+    Optional<byte[]> get(StoreNamespace storeNamespace, @Nonnull byte[] key) throws SafeIllegalArgumentException;\n+\n+    /**\n+     * Gets the values associated with the entries specified by {@code keys}.\n+     *\n+     * @param storeNamespace handle to the namespace from which we want to retrieve the values\n+     * @param keys           representing keys for which we want to retrieve the values\n+     * @return a map from keys to values\n+     */\n+    Map<byte[], byte[]> multiGet(StoreNamespace storeNamespace, List<byte[]> keys);\n+\n+    /**\n+     * Stores the {@code value} for the associated {@code key} while overwriting the existing value in the specified\n+     * {@code storeNamespace}.\n+     *\n+     * @param storeNamespace of the store to which we should store the entry\n+     * @param key            entry key\n+     * @param value          entry value\n+     * @throws SafeIllegalArgumentException when {@code storeNamespace} is a handle to a non existing namespace\n+     */\n+    void put(StoreNamespace storeNamespace, @Nonnull byte[] key, @Nonnull byte[] value)\n+            throws SafeIllegalArgumentException;", "originalCommit": "83a7cf342ef297db75e9da1a44424679e635f224", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb81def7839abc28de24f27fd64bb184fec95d72", "chunk": "diff --git a/atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PhysicalPersistentStore.java b/atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PhysicalPersistentStore.java\nindex 0eb88ce7fe..2e7845ecf2 100644\n--- a/atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PhysicalPersistentStore.java\n+++ b/atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PhysicalPersistentStore.java\n\n@@ -42,7 +42,7 @@ public interface PhysicalPersistentStore extends AutoCloseable {\n      * @return the {@link Optional} containing the value or empty if there is no associated value\n      * @throws SafeIllegalArgumentException when {@code storeNamespace} is a handle to a non existing namespace\n      */\n-    Optional<byte[]> get(StoreNamespace storeNamespace, @Nonnull byte[] key) throws SafeIllegalArgumentException;\n+    Optional<byte[]> get(StoreNamespace storeNamespace, @Nonnull byte[] key);\n \n     /**\n      * Gets the values associated with the entries specified by {@code keys}.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwMjkzMg==", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367602932", "bodyText": "I'm a bit worried about maps with byte-array keys. Let's talk through this in person.", "author": "jeremyk-91", "createdAt": "2020-01-16T19:19:53Z", "path": "atlasdb-client/src/main/java/com/palantir/atlasdb/persistent/rocksdb/RocksDbPhysicalPersistentStore.java", "diffHunk": "@@ -101,23 +92,19 @@ public Long get(StoreNamespace storeNamespace, @Nonnull Long startTs) {\n                 Streams.zip(\n                         keys.stream(),\n                         byteValues.stream(),\n-                        (key, value) -> Maps.immutableEntry(key, deserializeValue(key, value))))\n+                        Maps::immutableEntry))\n                 .filter(Objects::nonNull)\n                 .collectToMap();", "originalCommit": "83a7cf342ef297db75e9da1a44424679e635f224", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb81def7839abc28de24f27fd64bb184fec95d72", "chunk": "diff --git a/atlasdb-client/src/main/java/com/palantir/atlasdb/persistent/rocksdb/RocksDbPhysicalPersistentStore.java b/atlasdb-client/src/main/java/com/palantir/atlasdb/persistent/rocksdb/RocksDbPhysicalPersistentStore.java\nindex fda28fe250..8f3eb3f642 100644\n--- a/atlasdb-client/src/main/java/com/palantir/atlasdb/persistent/rocksdb/RocksDbPhysicalPersistentStore.java\n+++ b/atlasdb-client/src/main/java/com/palantir/atlasdb/persistent/rocksdb/RocksDbPhysicalPersistentStore.java\n\n@@ -104,7 +104,7 @@ public final class RocksDbPhysicalPersistentStore implements PhysicalPersistentS\n     }\n \n     @Override\n-    public void multiPut(StoreNamespace storeNamespace, Map<byte[], byte[]> toWrite) {\n+    public void put(StoreNamespace storeNamespace, Map<byte[], byte[]> toWrite) {\n         KeyedStream.stream(toWrite).forEach((key, value) -> put(storeNamespace, key, value));\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwMzYwMQ==", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367603601", "bodyText": "nit: probably want multiget returning multiple values?", "author": "jeremyk-91", "createdAt": "2020-01-16T19:21:16Z", "path": "atlasdb-client/src/test/java/com/palantir/atlasdb/cache/RocksDbTimestampStoreTests.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.cache;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.rocksdb.RocksDB;\n+import org.rocksdb.RocksDBException;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Maps;\n+import com.palantir.atlasdb.persistent.api.PhysicalPersistentStore.StoreNamespace;\n+import com.palantir.atlasdb.persistent.rocksdb.RocksDbPhysicalPersistentStore;\n+\n+public final class RocksDbTimestampStoreTests {\n+    @ClassRule\n+    public static final TemporaryFolder TEMPORARY_FOLDER = new TemporaryFolder();\n+    private static final String DEFAULT_NAMESPACE_NAME = \"default\";\n+\n+    private TimestampStore timestampStore;\n+    private RocksDbPhysicalPersistentStore persistentStore;\n+    private StoreNamespace defaultNamespace;\n+\n+    @Before\n+    public void before() throws RocksDBException, IOException {\n+        File databaseFolder = TEMPORARY_FOLDER.newFolder();\n+        RocksDB rocksDb = RocksDB.open(databaseFolder.getAbsolutePath());\n+\n+        persistentStore = new RocksDbPhysicalPersistentStore(rocksDb, databaseFolder);\n+        timestampStore = new TimestampStore(persistentStore);\n+\n+        defaultNamespace = persistentStore.createNamespace(DEFAULT_NAMESPACE_NAME);\n+    }\n+\n+    @After\n+    public void tearDown() throws IOException {\n+        persistentStore.close();\n+    }\n+\n+    @Test\n+    public void emptyResult() {\n+        assertThat(timestampStore.get(defaultNamespace, 1L)).isEmpty();\n+    }\n+\n+    @Test\n+    public void valueIsCorrectlyStored() {\n+        timestampStore.put(defaultNamespace, 1L, 2L);\n+\n+        assertThat(timestampStore.get(defaultNamespace, 1L)).hasValue(2L);\n+    }\n+\n+    @Test\n+    public void multiGetFilters() {\n+        timestampStore.put(defaultNamespace, 1L, 2L);\n+\n+        assertThat(timestampStore.multiGet(defaultNamespace, ImmutableList.of(1L, 3L)))\n+                .containsExactly(Maps.immutableEntry(1L, 2L));\n+    }\n+", "originalCommit": "83a7cf342ef297db75e9da1a44424679e635f224", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYyNDUwMQ==", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367624501", "bodyText": "Added more values.", "author": "OStevan", "createdAt": "2020-01-16T20:07:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwMzYwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "eb81def7839abc28de24f27fd64bb184fec95d72", "chunk": "diff --git a/atlasdb-client/src/test/java/com/palantir/atlasdb/cache/RocksDbTimestampStoreTests.java b/atlasdb-client/src/test/java/com/palantir/atlasdb/cache/RocksDbTimestampStoreTests.java\nindex c954dccd6b..b814513965 100644\n--- a/atlasdb-client/src/test/java/com/palantir/atlasdb/cache/RocksDbTimestampStoreTests.java\n+++ b/atlasdb-client/src/test/java/com/palantir/atlasdb/cache/RocksDbTimestampStoreTests.java\n\n@@ -76,13 +76,13 @@ public final class RocksDbTimestampStoreTests {\n     public void multiGetFilters() {\n         timestampStore.put(defaultNamespace, 1L, 2L);\n \n-        assertThat(timestampStore.multiGet(defaultNamespace, ImmutableList.of(1L, 3L)))\n+        assertThat(timestampStore.get(defaultNamespace, ImmutableList.of(1L, 3L)))\n                 .containsExactly(Maps.immutableEntry(1L, 2L));\n     }\n \n     @Test\n     public void multiPutCorrectlyStores() {\n-        timestampStore.multiPut(defaultNamespace, ImmutableMap.of(1L, 2L, 3L, 4L));\n+        timestampStore.put(defaultNamespace, ImmutableMap.of(1L, 2L, 3L, 4L));\n \n         assertThat(timestampStore.get(defaultNamespace, 1L)).hasValue(2L);\n         assertThat(timestampStore.get(defaultNamespace, 3L)).hasValue(4L);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwNjkxMQ==", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367606911", "bodyText": "This assertion feels fragile. In particular if I change the assertion to\n        assertThat(timestampMappingStore.multiGet(defaultNamespace, ImmutableList.of(KEY, KEY2, \"random\".getBytes())))\n                .containsExactlyInAnyOrderEntriesOf(ImmutableMap.of(\n                        KEY, VALUE,\n                        \"key2\".getBytes(), VALUE2)\n                );\n\nit fails. In general I think we want to either use ByteString for the return type of the persistent store, or use sorted maps.", "author": "jeremyk-91", "createdAt": "2020-01-16T19:28:24Z", "path": "atlasdb-client/src/test/java/com/palantir/atlasdb/persistent/rocksdb/RocksDbPhysicalPersistentStoreTests.java", "diffHunk": "@@ -115,21 +119,21 @@ public void droppingTwoTimesFailsOnSecond() {\n     public void testMultiPut() {\n         timestampMappingStore.multiPut(\n                 defaultNamespace,\n-                ImmutableMap.of(1L, 2L, 3L, 4L));\n+                ImmutableMap.of(KEY, VALUE, KEY2, VALUE2));\n \n-        assertThat(timestampMappingStore.get(defaultNamespace, 1L)).isEqualTo(2L);\n-        assertThat(timestampMappingStore.get(defaultNamespace, 3L)).isEqualTo(4L);\n+        assertThat(timestampMappingStore.get(defaultNamespace, KEY)).hasValue(VALUE);\n+        assertThat(timestampMappingStore.get(defaultNamespace, KEY2)).hasValue(VALUE2);\n     }\n \n     @Test\n     public void testMultiGet() {\n-        timestampMappingStore.put(defaultNamespace, 1L, 2L);\n-        timestampMappingStore.put(defaultNamespace, 3L, 4L);\n+        timestampMappingStore.put(defaultNamespace, KEY, VALUE);\n+        timestampMappingStore.put(defaultNamespace, KEY2, VALUE2);\n \n-        assertThat(timestampMappingStore.multiGet(defaultNamespace, ImmutableList.of(1L, 2L, 3L)))\n+        assertThat(timestampMappingStore.multiGet(defaultNamespace, ImmutableList.of(KEY, KEY2, \"random\".getBytes())))\n                 .containsExactlyInAnyOrderEntriesOf(ImmutableMap.of(\n-                        1L, 2L,\n-                        3L, 4L)\n+                        KEY, VALUE,\n+                        KEY2, VALUE2)\n                 );", "originalCommit": "83a7cf342ef297db75e9da1a44424679e635f224", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb81def7839abc28de24f27fd64bb184fec95d72", "chunk": "diff --git a/atlasdb-client/src/test/java/com/palantir/atlasdb/persistent/rocksdb/RocksDbPhysicalPersistentStoreTests.java b/atlasdb-client/src/test/java/com/palantir/atlasdb/persistent/rocksdb/RocksDbPhysicalPersistentStoreTests.java\nindex 67985f41a3..3a7b7cfd6f 100644\n--- a/atlasdb-client/src/test/java/com/palantir/atlasdb/persistent/rocksdb/RocksDbPhysicalPersistentStoreTests.java\n+++ b/atlasdb-client/src/test/java/com/palantir/atlasdb/persistent/rocksdb/RocksDbPhysicalPersistentStoreTests.java\n\n@@ -117,7 +117,7 @@ public final class RocksDbPhysicalPersistentStoreTests {\n \n     @Test\n     public void testMultiPut() {\n-        timestampMappingStore.multiPut(\n+        timestampMappingStore.put(\n                 defaultNamespace,\n                 ImmutableMap.of(KEY, VALUE, KEY2, VALUE2));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYwNzY5MA==", "url": "https://github.com/palantir/atlasdb/pull/4512#discussion_r367607690", "bodyText": "similarly, Map<byte[], byte[]> can be tricky", "author": "jeremyk-91", "createdAt": "2020-01-16T19:30:09Z", "path": "atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PhysicalPersistentStore.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.persistent.api;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.immutables.value.Value;\n+\n+import com.palantir.logsafe.exceptions.SafeIllegalArgumentException;\n+\n+public interface PhysicalPersistentStore extends AutoCloseable {\n+    @Value.Immutable\n+    interface StoreNamespace {\n+        String humanReadableName();\n+        UUID uniqueName();\n+    }\n+\n+    /**\n+     * Gets the value associated with the entry specified by {@code key}.\n+     *\n+     * @param storeNamespace handle to the namespace from which we want to retrieve the value\n+     * @param key            entry key for which we want to retrieve the value\n+     * @return the {@link Optional} containing the value or empty if there is no associated value\n+     * @throws SafeIllegalArgumentException when {@code storeNamespace} is a handle to a non existing namespace\n+     */\n+    Optional<byte[]> get(StoreNamespace storeNamespace, @Nonnull byte[] key) throws SafeIllegalArgumentException;\n+\n+    /**\n+     * Gets the values associated with the entries specified by {@code keys}.\n+     *\n+     * @param storeNamespace handle to the namespace from which we want to retrieve the values\n+     * @param keys           representing keys for which we want to retrieve the values\n+     * @return a map from keys to values\n+     */\n+    Map<byte[], byte[]> multiGet(StoreNamespace storeNamespace, List<byte[]> keys);\n+\n+    /**\n+     * Stores the {@code value} for the associated {@code key} while overwriting the existing value in the specified\n+     * {@code storeNamespace}.\n+     *\n+     * @param storeNamespace of the store to which we should store the entry\n+     * @param key            entry key\n+     * @param value          entry value\n+     * @throws SafeIllegalArgumentException when {@code storeNamespace} is a handle to a non existing namespace\n+     */\n+    void put(StoreNamespace storeNamespace, @Nonnull byte[] key, @Nonnull byte[] value)\n+            throws SafeIllegalArgumentException;\n+\n+    /**\n+     * Stores the entry pairs given in {@code toWrite}, overwriting the existing values.\n+     *\n+     * @param storeNamespace of the store to which we should store the entry\n+     * @param toWrite        entry pairs to write\n+     * @throws SafeIllegalArgumentException when {@code storeNamespace} is a handle to a non existing namespace\n+     */\n+    void multiPut(StoreNamespace storeNamespace, Map<byte[], byte[]> toWrite);", "originalCommit": "83a7cf342ef297db75e9da1a44424679e635f224", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "eb81def7839abc28de24f27fd64bb184fec95d72", "chunk": "diff --git a/atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PhysicalPersistentStore.java b/atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PhysicalPersistentStore.java\nindex 0eb88ce7fe..2e7845ecf2 100644\n--- a/atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PhysicalPersistentStore.java\n+++ b/atlasdb-api/src/main/java/com/palantir/atlasdb/persistent/api/PhysicalPersistentStore.java\n\n@@ -42,7 +42,7 @@ public interface PhysicalPersistentStore extends AutoCloseable {\n      * @return the {@link Optional} containing the value or empty if there is no associated value\n      * @throws SafeIllegalArgumentException when {@code storeNamespace} is a handle to a non existing namespace\n      */\n-    Optional<byte[]> get(StoreNamespace storeNamespace, @Nonnull byte[] key) throws SafeIllegalArgumentException;\n+    Optional<byte[]> get(StoreNamespace storeNamespace, @Nonnull byte[] key);\n \n     /**\n      * Gets the values associated with the entries specified by {@code keys}.\n"}}, {"oid": "eb81def7839abc28de24f27fd64bb184fec95d72", "url": "https://github.com/palantir/atlasdb/commit/eb81def7839abc28de24f27fd64bb184fec95d72", "message": "Simple fixes.", "committedDate": "2020-01-16T19:35:56Z", "type": "commit"}, {"oid": "be767736ba83768d83416d8a8b5e168f1fad5926", "url": "https://github.com/palantir/atlasdb/commit/be767736ba83768d83416d8a8b5e168f1fad5926", "message": "Refactored to use ByteString.", "committedDate": "2020-01-16T20:06:17Z", "type": "commit"}]}