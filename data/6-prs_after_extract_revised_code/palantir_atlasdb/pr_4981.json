{"pr_number": 4981, "pr_title": "Drop initial proposals", "pr_createdAt": "2020-09-10T17:28:23Z", "pr_url": "https://github.com/palantir/atlasdb/pull/4981", "timeline": [{"oid": "f2f56fc3e970b2295bd162dcc112666242dbe5cd", "url": "https://github.com/palantir/atlasdb/commit/f2f56fc3e970b2295bd162dcc112666242dbe5cd", "message": "Do not register leadership proposed metrics for 10 sec", "committedDate": "2020-09-10T14:28:47Z", "type": "commit"}, {"oid": "a9cb5ebcbc7eef4ce84e6200548b35cd154c7d09", "url": "https://github.com/palantir/atlasdb/commit/a9cb5ebcbc7eef4ce84e6200548b35cd154c7d09", "message": "Don't need to create a meter | clock is common and maintained by registry", "committedDate": "2020-09-10T14:29:01Z", "type": "commit"}, {"oid": "2e8b0d2b61a0e1b49cab519887237f403f921227", "url": "https://github.com/palantir/atlasdb/commit/2e8b0d2b61a0e1b49cab519887237f403f921227", "message": "Revert \"Don't need to create a meter | clock is common and maintained by registry\"\n\nThis reverts commit a9cb5ebcbc7eef4ce84e6200548b35cd154c7d09.", "committedDate": "2020-09-10T14:42:17Z", "type": "commit"}, {"oid": "17f2f29ea86af7d2735338f52a2683b020e6c732", "url": "https://github.com/palantir/atlasdb/commit/17f2f29ea86af7d2735338f52a2683b020e6c732", "message": "Report contians the leader election rate", "committedDate": "2020-09-10T15:38:01Z", "type": "commit"}, {"oid": "b1ce22069aeb0d7c533bceebd0e27dba39bca680", "url": "https://github.com/palantir/atlasdb/commit/b1ce22069aeb0d7c533bceebd0e27dba39bca680", "message": "Deactivate health check for 14 min after start up", "committedDate": "2020-09-10T16:36:34Z", "type": "commit"}, {"oid": "79dd55dbe84b8b5a4c75482fa87bf61555fe4d64", "url": "https://github.com/palantir/atlasdb/commit/79dd55dbe84b8b5a4c75482fa87bf61555fe4d64", "message": "Modify tests", "committedDate": "2020-09-10T17:18:14Z", "type": "commit"}, {"oid": "07c2c8f3852aea5c10ff74ad3345a29069439b72", "url": "https://github.com/palantir/atlasdb/commit/07c2c8f3852aea5c10ff74ad3345a29069439b72", "message": "Add generated changelog entries", "committedDate": "2020-09-10T17:18:14Z", "type": "commit"}, {"oid": "5c8f3f2085430339d82f74fa2f5e577ee07e11fd", "url": "https://github.com/palantir/atlasdb/commit/5c8f3f2085430339d82f74fa2f5e577ee07e11fd", "message": "Remove annotation", "committedDate": "2020-09-10T18:56:58Z", "type": "commit"}, {"oid": "2b233ba93af9441edd1d2fe162ed3533be405976", "url": "https://github.com/palantir/atlasdb/commit/2b233ba93af9441edd1d2fe162ed3533be405976", "message": "Merge branch 'drop-initial-proposals' of github.com:palantir/atlasdb into drop-initial-proposals", "committedDate": "2020-09-10T18:57:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg3MjQ0OA==", "url": "https://github.com/palantir/atlasdb/pull/4981#discussion_r486872448", "bodyText": "could maybe do\nhealthCheckDeactivated = healthCheckDeactivated || Duration.between(...).compareTo(...) < 0;", "author": "Jolyon-S", "createdAt": "2020-09-11T08:54:10Z", "path": "leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java", "diffHunk": "@@ -38,8 +44,29 @@ private double fiveMinuteRate(LeaderElectionServiceMetrics leaderElectionRateFor\n         return leaderElectionRateForClient.proposedLeadership().getFiveMinuteRate();\n     }\n \n-    public LeaderElectionHealthStatus leaderElectionRateHealthStatus() {\n-        return getLeaderElectionRateForAllClients() <= MAX_ALLOWED_LAST_5_MINUTE_RATE\n-                ? LeaderElectionHealthStatus.HEALTHY : LeaderElectionHealthStatus.UNHEALTHY;\n+    private boolean isHealthCheckDeactivated() {\n+        if (!healthCheckDeactivated) {\n+            healthCheckDeactivated\n+                    = Duration.between(timeCreated, Instant.now()).compareTo(HEALTH_CHECK_DEACTIVATION_PERIOD) < 0;\n+        }", "originalCommit": "2b233ba93af9441edd1d2fe162ed3533be405976", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7a49a7860e6d410a2b605176a50bdfa2cfc3cef0", "chunk": "diff --git a/leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java b/leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java\nindex 3b8de3084c..a4acf042f9 100644\n--- a/leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java\n+++ b/leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java\n\n@@ -45,10 +45,8 @@ public class LeaderElectionHealthCheck {\n     }\n \n     private boolean isHealthCheckDeactivated() {\n-        if (!healthCheckDeactivated) {\n-            healthCheckDeactivated\n-                    = Duration.between(timeCreated, Instant.now()).compareTo(HEALTH_CHECK_DEACTIVATION_PERIOD) < 0;\n-        }\n+        healthCheckDeactivated = healthCheckDeactivated &&\n+                (Duration.between(timeCreated, Instant.now()).compareTo(HEALTH_CHECK_DEACTIVATION_PERIOD) < 0);\n         return healthCheckDeactivated;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg3NTEwNQ==", "url": "https://github.com/palantir/atlasdb/pull/4981#discussion_r486875105", "bodyText": "An interesting way of doing it. Since some of the builder is the same, I suggest you do either:\nLeaderElectionHealthStatus status = isHealthy(...) ? LeaderElectionHealthStatus.HEALTHY : LeaderElectionHealthStatus.UNHEALTHY;\nreturn LeaderElectionReport.builder().status(status).leaderElectionRate(...).build();\nor you could inline status to be inside the builder.", "author": "Jolyon-S", "createdAt": "2020-09-11T08:56:38Z", "path": "leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java", "diffHunk": "@@ -38,8 +44,29 @@ private double fiveMinuteRate(LeaderElectionServiceMetrics leaderElectionRateFor\n         return leaderElectionRateForClient.proposedLeadership().getFiveMinuteRate();\n     }\n \n-    public LeaderElectionHealthStatus leaderElectionRateHealthStatus() {\n-        return getLeaderElectionRateForAllClients() <= MAX_ALLOWED_LAST_5_MINUTE_RATE\n-                ? LeaderElectionHealthStatus.HEALTHY : LeaderElectionHealthStatus.UNHEALTHY;\n+    private boolean isHealthCheckDeactivated() {\n+        if (!healthCheckDeactivated) {\n+            healthCheckDeactivated\n+                    = Duration.between(timeCreated, Instant.now()).compareTo(HEALTH_CHECK_DEACTIVATION_PERIOD) < 0;\n+        }\n+        return healthCheckDeactivated;\n+    }\n+\n+    private boolean isHealthy(double leaderElectionRateForAllClients) {\n+        return isHealthCheckDeactivated() || (leaderElectionRateForAllClients <= MAX_ALLOWED_LAST_5_MINUTE_RATE);\n+    }\n+\n+    public LeaderElectionHealthReport leaderElectionRateHealthReport() {\n+        double leaderElectionRateForAllClients = getLeaderElectionRateForAllClients();\n+\n+        return isHealthy(leaderElectionRateForAllClients)\n+                ? LeaderElectionHealthReport.builder()\n+                .status(LeaderElectionHealthStatus.HEALTHY)\n+                .leaderElectionRate(leaderElectionRateForAllClients)\n+                .build()\n+                : LeaderElectionHealthReport.builder()\n+                        .status(LeaderElectionHealthStatus.UNHEALTHY)\n+                        .leaderElectionRate(leaderElectionRateForAllClients)\n+                        .build();", "originalCommit": "2b233ba93af9441edd1d2fe162ed3533be405976", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7a49a7860e6d410a2b605176a50bdfa2cfc3cef0", "chunk": "diff --git a/leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java b/leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java\nindex 3b8de3084c..a4acf042f9 100644\n--- a/leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java\n+++ b/leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java\n\n@@ -45,10 +45,8 @@ public class LeaderElectionHealthCheck {\n     }\n \n     private boolean isHealthCheckDeactivated() {\n-        if (!healthCheckDeactivated) {\n-            healthCheckDeactivated\n-                    = Duration.between(timeCreated, Instant.now()).compareTo(HEALTH_CHECK_DEACTIVATION_PERIOD) < 0;\n-        }\n+        healthCheckDeactivated = healthCheckDeactivated &&\n+                (Duration.between(timeCreated, Instant.now()).compareTo(HEALTH_CHECK_DEACTIVATION_PERIOD) < 0);\n         return healthCheckDeactivated;\n     }\n \n"}}, {"oid": "7a49a7860e6d410a2b605176a50bdfa2cfc3cef0", "url": "https://github.com/palantir/atlasdb/commit/7a49a7860e6d410a2b605176a50bdfa2cfc3cef0", "message": "Address comments + bug fix", "committedDate": "2020-09-11T09:37:32Z", "type": "commit"}, {"oid": "8ff1d37e2a878482c664a248a32a3e7656cd777c", "url": "https://github.com/palantir/atlasdb/commit/8ff1d37e2a878482c664a248a32a3e7656cd777c", "message": "Fix deactivation period", "committedDate": "2020-09-11T09:38:22Z", "type": "commit"}, {"oid": "f31e963ef62fed7cada776a9fbd58c7e890242a6", "url": "https://github.com/palantir/atlasdb/commit/f31e963ef62fed7cada776a9fbd58c7e890242a6", "message": "Minor refactor", "committedDate": "2020-09-11T09:49:28Z", "type": "commit"}, {"oid": "41a205087f761fb840554c50ccad1dbf2623dcec", "url": "https://github.com/palantir/atlasdb/commit/41a205087f761fb840554c50ccad1dbf2623dcec", "message": "Fix deactivation period again", "committedDate": "2020-09-11T09:51:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkzNTg0OA==", "url": "https://github.com/palantir/atlasdb/pull/4981#discussion_r486935848", "bodyText": "Probably worth a comment explaining why this is a thing.", "author": "jeremyk-91", "createdAt": "2020-09-11T09:57:24Z", "path": "leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java", "diffHunk": "@@ -16,15 +16,21 @@\n \n package com.palantir.leader.health;\n \n+import java.time.Duration;\n+import java.time.Instant;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n \n import com.palantir.leader.LeaderElectionServiceMetrics;\n import com.palantir.paxos.Client;\n \n public class LeaderElectionHealthCheck {\n-    private static final double MAX_ALLOWED_LAST_5_MINUTE_RATE = 0.015;\n+    public static final double MAX_ALLOWED_LAST_5_MINUTE_RATE = 0.015;\n+    private static final Duration HEALTH_CHECK_DEACTIVATION_PERIOD = Duration.ofMinutes(14);", "originalCommit": "41a205087f761fb840554c50ccad1dbf2623dcec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAwMzczMQ==", "url": "https://github.com/palantir/atlasdb/pull/4981#discussion_r487003731", "bodyText": "done", "author": "sudiksha27", "createdAt": "2020-09-11T12:13:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkzNTg0OA=="}], "type": "inlineReview", "revised_code": {"commit": "70f806d55bf84c3b96611e05885fec6c5273da4e", "chunk": "diff --git a/leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java b/leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java\nindex f188bfa22c..f3017683c3 100644\n--- a/leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java\n+++ b/leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java\n\n@@ -20,17 +20,22 @@ import java.time.Duration;\n import java.time.Instant;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n \n import com.palantir.leader.LeaderElectionServiceMetrics;\n import com.palantir.paxos.Client;\n \n public class LeaderElectionHealthCheck {\n     public static final double MAX_ALLOWED_LAST_5_MINUTE_RATE = 0.015;\n+\n+//    The first mark on leader proposal metric causes spike in 5 min rate and the health check inaccurately\n+//    becomes unhealthy. We deactivate the health check at start up until the initial mark has negligible\n+//    weight in the last 5 min rate.\n     private static final Duration HEALTH_CHECK_DEACTIVATION_PERIOD = Duration.ofMinutes(14);\n \n     private final ConcurrentMap<Client, LeaderElectionServiceMetrics> clientWiseMetrics = new ConcurrentHashMap<>();\n     private final Instant timeCreated = Instant.now();\n-    private boolean healthCheckDeactivated = true;\n+    private AtomicBoolean healthCheckDeactivated = new AtomicBoolean(true);\n \n     public void registerClient(Client namespace, LeaderElectionServiceMetrics leaderElectionServiceMetrics) {\n         clientWiseMetrics.putIfAbsent(namespace, leaderElectionServiceMetrics);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkzODIyOA==", "url": "https://github.com/palantir/atlasdb/pull/4981#discussion_r486938228", "bodyText": "Are we guaranteed that the health check executes from the same thread every time? Even if this is the case, it feels like it would make sense to be defensive against this as this isn't a hot path", "author": "jeremyk-91", "createdAt": "2020-09-11T09:59:25Z", "path": "leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java", "diffHunk": "@@ -16,15 +16,21 @@\n \n package com.palantir.leader.health;\n \n+import java.time.Duration;\n+import java.time.Instant;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n \n import com.palantir.leader.LeaderElectionServiceMetrics;\n import com.palantir.paxos.Client;\n \n public class LeaderElectionHealthCheck {\n-    private static final double MAX_ALLOWED_LAST_5_MINUTE_RATE = 0.015;\n+    public static final double MAX_ALLOWED_LAST_5_MINUTE_RATE = 0.015;\n+    private static final Duration HEALTH_CHECK_DEACTIVATION_PERIOD = Duration.ofMinutes(14);\n+\n     private final ConcurrentMap<Client, LeaderElectionServiceMetrics> clientWiseMetrics = new ConcurrentHashMap<>();\n+    private final Instant timeCreated = Instant.now();\n+    private boolean healthCheckDeactivated = true;", "originalCommit": "41a205087f761fb840554c50ccad1dbf2623dcec", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "70f806d55bf84c3b96611e05885fec6c5273da4e", "chunk": "diff --git a/leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java b/leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java\nindex f188bfa22c..f3017683c3 100644\n--- a/leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java\n+++ b/leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java\n\n@@ -20,17 +20,22 @@ import java.time.Duration;\n import java.time.Instant;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n \n import com.palantir.leader.LeaderElectionServiceMetrics;\n import com.palantir.paxos.Client;\n \n public class LeaderElectionHealthCheck {\n     public static final double MAX_ALLOWED_LAST_5_MINUTE_RATE = 0.015;\n+\n+//    The first mark on leader proposal metric causes spike in 5 min rate and the health check inaccurately\n+//    becomes unhealthy. We deactivate the health check at start up until the initial mark has negligible\n+//    weight in the last 5 min rate.\n     private static final Duration HEALTH_CHECK_DEACTIVATION_PERIOD = Duration.ofMinutes(14);\n \n     private final ConcurrentMap<Client, LeaderElectionServiceMetrics> clientWiseMetrics = new ConcurrentHashMap<>();\n     private final Instant timeCreated = Instant.now();\n-    private boolean healthCheckDeactivated = true;\n+    private AtomicBoolean healthCheckDeactivated = new AtomicBoolean(true);\n \n     public void registerClient(Client namespace, LeaderElectionServiceMetrics leaderElectionServiceMetrics) {\n         clientWiseMetrics.putIfAbsent(namespace, leaderElectionServiceMetrics);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk0MDMxMw==", "url": "https://github.com/palantir/atlasdb/pull/4981#discussion_r486940313", "bodyText": "This test makes sense for now. The aggregation and/or threshold probably needs revisiting if timelock partitioning is introduced.", "author": "jeremyk-91", "createdAt": "2020-09-11T10:01:03Z", "path": "leader-election-impl/src/test/java/com/palantir/leader/LeadershipElectionCheckTest.java", "diffHunk": "@@ -71,57 +71,69 @@ public void setup() {\n     }\n \n     @Test\n-    public void shouldBeHealthyForOneLeaderElectionPerMinute() {\n-        markLeaderElectionsAtSpecifiedInterval(CLIENT_1, 5, Duration.ofSeconds(60));\n-        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthStatus())\n+    public void alwaysHealthyUntilDeactivationPeriodPasses() {\n+        markLeaderElectionsAtSpecifiedInterval(CLIENT_1, 100, Duration.ofSeconds(1), false);\n+        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthReport().status())\n                 .isEqualTo(LeaderElectionHealthStatus.HEALTHY);\n+        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthReport().leaderElectionRate())\n+                .isGreaterThan(LeaderElectionHealthCheck.MAX_ALLOWED_LAST_5_MINUTE_RATE);\n+    }\n+\n+    @Test\n+    public void shouldBeHealthyForOneLeaderElectionPerMinute() {\n+        markLeaderElectionsAtSpecifiedInterval(CLIENT_1, 20, Duration.ofSeconds(60), true);\n+        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthReport().leaderElectionRate())\n+                .isLessThanOrEqualTo(LeaderElectionHealthCheck.MAX_ALLOWED_LAST_5_MINUTE_RATE);\n     }\n \n     @Test\n     public void shouldBeUnhealthyForMoreThanOneLeaderElectionPerMinute() {\n-        markLeaderElectionsAtSpecifiedInterval(CLIENT_1, 5,  Duration.ofSeconds(10));\n-        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthStatus())\n-                .isEqualTo(LeaderElectionHealthStatus.UNHEALTHY);\n+        markLeaderElectionsAtSpecifiedInterval(CLIENT_1, 5,  Duration.ofSeconds(10), true);\n+        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthReport().leaderElectionRate())\n+                .isGreaterThan(LeaderElectionHealthCheck.MAX_ALLOWED_LAST_5_MINUTE_RATE);\n     }\n \n     @Test\n     public void shouldBeHealthyForOneLeaderElectionPerMinuteAcrossClients() {\n-        markLeaderElectionsAtSpecifiedInterval(CLIENT_1, 5,  Duration.ofSeconds(60));\n-        markLeaderElectionsAtSpecifiedInterval(CLIENT_2, 5,  Duration.ofSeconds(60));\n+        markLeaderElectionsAtSpecifiedInterval(CLIENT_1, 5,  Duration.ofSeconds(60), true);\n+        markLeaderElectionsAtSpecifiedInterval(CLIENT_2, 5,  Duration.ofSeconds(60), false);\n \n-        assertThat(leaderElectionHealthCheckForOnlyClient1.leaderElectionRateHealthStatus())\n-                .isEqualTo(LeaderElectionHealthStatus.HEALTHY);\n+        assertThat(leaderElectionHealthCheckForOnlyClient1.leaderElectionRateHealthReport().leaderElectionRate())\n+                .isLessThanOrEqualTo(LeaderElectionHealthCheck.MAX_ALLOWED_LAST_5_MINUTE_RATE);\n \n-        assertThat(leaderElectionHealthCheckForOnlyClient2.leaderElectionRateHealthStatus())\n-                .isEqualTo(LeaderElectionHealthStatus.HEALTHY);\n+        assertThat(leaderElectionHealthCheckForOnlyClient2.leaderElectionRateHealthReport().leaderElectionRate())\n+                .isLessThanOrEqualTo(LeaderElectionHealthCheck.MAX_ALLOWED_LAST_5_MINUTE_RATE);\n \n-        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthStatus())\n-                .isEqualTo(LeaderElectionHealthStatus.HEALTHY);\n+        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthReport().leaderElectionRate())\n+                .isLessThanOrEqualTo(LeaderElectionHealthCheck.MAX_ALLOWED_LAST_5_MINUTE_RATE);\n     }\n \n     @Test\n     public void shouldBeUnhealthyOverallEvenIfIndividualClientsAreHealthy() {", "originalCommit": "41a205087f761fb840554c50ccad1dbf2623dcec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAwNDE2Mw==", "url": "https://github.com/palantir/atlasdb/pull/4981#discussion_r487004163", "bodyText": "\ud83d\udcaf", "author": "sudiksha27", "createdAt": "2020-09-11T12:14:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk0MDMxMw=="}], "type": "inlineReview", "revised_code": {"commit": "cc413d4ff902d0921083a7cbb0afa26bc21c2cb5", "chunk": "diff --git a/leader-election-impl/src/test/java/com/palantir/leader/LeadershipElectionCheckTest.java b/leader-election-impl/src/test/java/com/palantir/leader/health/LeadershipElectionCheckTest.java\nsimilarity index 86%\nrename from leader-election-impl/src/test/java/com/palantir/leader/LeadershipElectionCheckTest.java\nrename to leader-election-impl/src/test/java/com/palantir/leader/health/LeadershipElectionCheckTest.java\nindex adde95c4f1..6f2d3179b7 100644\n--- a/leader-election-impl/src/test/java/com/palantir/leader/LeadershipElectionCheckTest.java\n+++ b/leader-election-impl/src/test/java/com/palantir/leader/health/LeadershipElectionCheckTest.java\n\n@@ -70,6 +70,25 @@ public class LeadershipElectionCheckTest {\n         when(registry2.meter(any())).thenReturn(new Meter(fakeTimeClock));\n     }\n \n+    @Test\n+    public void clockResetsWhenClientIsRegistered() {\n+        AtomicLong now = new AtomicLong();\n+        LeaderElectionHealthCheck check\n+                = new LeaderElectionHealthCheck(() -> Instant.ofEpochSecond(now.get()));\n+        long healthCheckDeactivationPeriod = LeaderElectionHealthCheck.HEALTH_CHECK_DEACTIVATION_PERIOD.getSeconds();\n+\n+        now.addAndGet(healthCheckDeactivationPeriod + 1);\n+        assertThat(check.isWithinDeactivationWindow()).isEqualTo(true);\n+\n+        check.registerClient(CLIENT_1, leaderElectionServiceMetrics);\n+        now.addAndGet(healthCheckDeactivationPeriod / 2);\n+        assertThat(check.isWithinDeactivationWindow()).isEqualTo(true);\n+\n+        now.addAndGet(healthCheckDeactivationPeriod / 2 + 1);\n+        assertThat(check.isWithinDeactivationWindow())\n+                .isEqualTo(false);\n+    }\n+\n     @Test\n     public void alwaysHealthyUntilDeactivationPeriodPasses() {\n         markLeaderElectionsAtSpecifiedInterval(CLIENT_1, 100, Duration.ofSeconds(1), false);\n"}}, {"oid": "70f806d55bf84c3b96611e05885fec6c5273da4e", "url": "https://github.com/palantir/atlasdb/commit/70f806d55bf84c3b96611e05885fec6c5273da4e", "message": "Address comments - 2", "committedDate": "2020-09-11T10:33:16Z", "type": "commit"}, {"oid": "eea6b26bb6a5c281983389c83d76ace6f58ccf94", "url": "https://github.com/palantir/atlasdb/commit/eea6b26bb6a5c281983389c83d76ace6f58ccf94", "message": "Checkstyle", "committedDate": "2020-09-11T11:09:59Z", "type": "commit"}, {"oid": "848012c6c544eb720cd7d5e4f53ecf803c256b1e", "url": "https://github.com/palantir/atlasdb/commit/848012c6c544eb720cd7d5e4f53ecf803c256b1e", "message": "Autorelease 0.245.3-rc1", "committedDate": "2020-09-11T13:34:45Z", "type": "commit"}, {"oid": "3f175be50961d878b054947c6a6ae33c76c70cfb", "url": "https://github.com/palantir/atlasdb/commit/3f175be50961d878b054947c6a6ae33c76c70cfb", "message": "Add generated changelog entries", "committedDate": "2020-09-11T13:34:45Z", "type": "commit"}, {"oid": "407fd7f4a2d9e79f2a608158e6d2fad4572173c9", "url": "https://github.com/palantir/atlasdb/commit/407fd7f4a2d9e79f2a608158e6d2fad4572173c9", "message": "Fix the delay issue", "committedDate": "2020-09-14T10:18:47Z", "type": "commit"}, {"oid": "e9d99160c2d787811f73e678d132c0b33c52ce0d", "url": "https://github.com/palantir/atlasdb/commit/e9d99160c2d787811f73e678d132c0b33c52ce0d", "message": "Autorelease 0.245.3-rc2", "committedDate": "2020-09-14T10:20:54Z", "type": "commit"}, {"oid": "8956054669d42d195ae1854f201ebb6898f52c1a", "url": "https://github.com/palantir/atlasdb/commit/8956054669d42d195ae1854f201ebb6898f52c1a", "message": "Volatile instant", "committedDate": "2020-09-14T11:58:58Z", "type": "commit"}, {"oid": "bc9f2b4c3cce86a42f0d21b5434440a08581489e", "url": "https://github.com/palantir/atlasdb/commit/bc9f2b4c3cce86a42f0d21b5434440a08581489e", "message": "Bug fix", "committedDate": "2020-09-14T12:27:42Z", "type": "commit"}, {"oid": "5333244f02de13ed54c5e79050102df256712a5b", "url": "https://github.com/palantir/atlasdb/commit/5333244f02de13ed54c5e79050102df256712a5b", "message": "Merge branch 'drop-initial-proposals' of github.com:palantir/atlasdb into drop-initial-proposals", "committedDate": "2020-09-14T12:27:54Z", "type": "commit"}, {"oid": "5a4056b9182d3dd417903eb9e4e917315fa9c6ad", "url": "https://github.com/palantir/atlasdb/commit/5a4056b9182d3dd417903eb9e4e917315fa9c6ad", "message": "Autorelease 0.245.3-rc3", "committedDate": "2020-09-14T12:28:29Z", "type": "commit"}, {"oid": "5e907b140e3242f9419f22bb43fb89603ade869d", "url": "https://github.com/palantir/atlasdb/commit/5e907b140e3242f9419f22bb43fb89603ade869d", "message": "Cache deactivation period computation", "committedDate": "2020-09-14T13:24:18Z", "type": "commit"}, {"oid": "911e0d8385e028baa5c560910cf1612a548dc3ef", "url": "https://github.com/palantir/atlasdb/commit/911e0d8385e028baa5c560910cf1612a548dc3ef", "message": "Merge branch 'drop-initial-proposals' of github.com:palantir/atlasdb into drop-initial-proposals", "committedDate": "2020-09-14T13:24:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkxOTQzOQ==", "url": "https://github.com/palantir/atlasdb/pull/4981#discussion_r487919439", "bodyText": "nit: timeFirstClientRegistered", "author": "jeremyk-91", "createdAt": "2020-09-14T13:35:54Z", "path": "leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java", "diffHunk": "@@ -16,20 +16,35 @@\n \n package com.palantir.leader.health;\n \n+import java.time.Duration;\n+import java.time.Instant;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n \n import com.palantir.leader.LeaderElectionServiceMetrics;\n import com.palantir.paxos.Client;\n \n public class LeaderElectionHealthCheck {\n-    private static final double MAX_ALLOWED_LAST_5_MINUTE_RATE = 0.015;\n+    public static final double MAX_ALLOWED_LAST_5_MINUTE_RATE = 0.015;\n+\n+//    The first mark on leader proposal metric causes spike in 5 min rate and the health check inaccurately\n+//    becomes unhealthy. We deactivate the health check at start up until the initial mark has negligible\n+//    weight in the last 5 min rate.\n+    private static final Duration HEALTH_CHECK_DEACTIVATION_PERIOD = Duration.ofMinutes(14);\n+\n     private final ConcurrentMap<Client, LeaderElectionServiceMetrics> clientWiseMetrics = new ConcurrentHashMap<>();\n+    private volatile Instant timeCreated = Instant.now();", "originalCommit": "911e0d8385e028baa5c560910cf1612a548dc3ef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e0528d5315b777b8896d8fd264674ba203f8957d", "chunk": "diff --git a/leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java b/leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java\nindex 92e42d470f..058d1674a7 100644\n--- a/leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java\n+++ b/leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java\n\n@@ -33,7 +33,7 @@ public class LeaderElectionHealthCheck {\n     private static final Duration HEALTH_CHECK_DEACTIVATION_PERIOD = Duration.ofMinutes(14);\n \n     private final ConcurrentMap<Client, LeaderElectionServiceMetrics> clientWiseMetrics = new ConcurrentHashMap<>();\n-    private volatile Instant timeCreated = Instant.now();\n+    private volatile Instant timeFirstClientRegistered = Instant.now();\n     private volatile boolean healthCheckDeactivated = true;\n \n     public void registerClient(Client namespace, LeaderElectionServiceMetrics leaderElectionServiceMetrics) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkyMzc0OA==", "url": "https://github.com/palantir/atlasdb/pull/4981#discussion_r487923748", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return healthCheckDeactivated = healthCheckDeactivated && isWithinDeactivationWindow();\n          \n          \n            \n                    if (healthCheckDeactivated) {\n          \n          \n            \n                        return true;\n          \n          \n            \n                    }\n          \n          \n            \n                    boolean shouldBeDeactivated = healthCheckDeactivated && isWithinDeactivationWindow();\n          \n          \n            \n                    healthCheckDeactivated = shouldBeDeactivated;\n          \n          \n            \n                    return shouldBeDeactivated;", "author": "jeremyk-91", "createdAt": "2020-09-14T13:40:01Z", "path": "leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java", "diffHunk": "@@ -38,8 +53,26 @@ private double fiveMinuteRate(LeaderElectionServiceMetrics leaderElectionRateFor\n         return leaderElectionRateForClient.proposedLeadership().getFiveMinuteRate();\n     }\n \n-    public LeaderElectionHealthStatus leaderElectionRateHealthStatus() {\n-        return getLeaderElectionRateForAllClients() <= MAX_ALLOWED_LAST_5_MINUTE_RATE\n+    private boolean isHealthCheckDeactivated() {\n+        return healthCheckDeactivated = healthCheckDeactivated && isWithinDeactivationWindow();", "originalCommit": "911e0d8385e028baa5c560910cf1612a548dc3ef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e0528d5315b777b8896d8fd264674ba203f8957d", "chunk": "diff --git a/leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java b/leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java\nindex 92e42d470f..058d1674a7 100644\n--- a/leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java\n+++ b/leader-election-impl/src/main/java/com/palantir/leader/health/LeaderElectionHealthCheck.java\n\n@@ -54,12 +54,17 @@ public class LeaderElectionHealthCheck {\n     }\n \n     private boolean isHealthCheckDeactivated() {\n-        return healthCheckDeactivated = healthCheckDeactivated && isWithinDeactivationWindow();\n+        if (!healthCheckDeactivated) {\n+            return false;\n+        }\n+        boolean shouldBeDeactivated = healthCheckDeactivated && isWithinDeactivationWindow();\n+        healthCheckDeactivated = shouldBeDeactivated;\n+        return shouldBeDeactivated;\n     }\n \n     private boolean isWithinDeactivationWindow() {\n         return clientWiseMetrics.isEmpty()\n-                || Duration.between(timeCreated, Instant.now()).compareTo(HEALTH_CHECK_DEACTIVATION_PERIOD) < 0;\n+                || Duration.between(timeFirstClientRegistered, Instant.now()).compareTo(HEALTH_CHECK_DEACTIVATION_PERIOD) < 0;\n     }\n \n     private boolean isHealthy(double leaderElectionRateForAllClients) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkyNzcyMg==", "url": "https://github.com/palantir/atlasdb/pull/4981#discussion_r487927722", "bodyText": "Do you want a test for the new behaviour (the clock starts only after first client is registered)?", "author": "jeremyk-91", "createdAt": "2020-09-14T13:43:50Z", "path": "leader-election-impl/src/test/java/com/palantir/leader/LeadershipElectionCheckTest.java", "diffHunk": "@@ -71,57 +71,69 @@ public void setup() {\n     }\n \n     @Test\n-    public void shouldBeHealthyForOneLeaderElectionPerMinute() {\n-        markLeaderElectionsAtSpecifiedInterval(CLIENT_1, 5, Duration.ofSeconds(60));\n-        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthStatus())\n+    public void alwaysHealthyUntilDeactivationPeriodPasses() {\n+        markLeaderElectionsAtSpecifiedInterval(CLIENT_1, 100, Duration.ofSeconds(1), false);\n+        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthReport().status())\n                 .isEqualTo(LeaderElectionHealthStatus.HEALTHY);\n+        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthReport().leaderElectionRate())\n+                .isGreaterThan(LeaderElectionHealthCheck.MAX_ALLOWED_LAST_5_MINUTE_RATE);\n+    }\n+\n+    @Test\n+    public void shouldBeHealthyForOneLeaderElectionPerMinute() {\n+        markLeaderElectionsAtSpecifiedInterval(CLIENT_1, 20, Duration.ofSeconds(60), true);\n+        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthReport().leaderElectionRate())\n+                .isLessThanOrEqualTo(LeaderElectionHealthCheck.MAX_ALLOWED_LAST_5_MINUTE_RATE);\n     }\n \n     @Test\n     public void shouldBeUnhealthyForMoreThanOneLeaderElectionPerMinute() {\n-        markLeaderElectionsAtSpecifiedInterval(CLIENT_1, 5,  Duration.ofSeconds(10));\n-        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthStatus())\n-                .isEqualTo(LeaderElectionHealthStatus.UNHEALTHY);\n+        markLeaderElectionsAtSpecifiedInterval(CLIENT_1, 5,  Duration.ofSeconds(10), true);\n+        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthReport().leaderElectionRate())\n+                .isGreaterThan(LeaderElectionHealthCheck.MAX_ALLOWED_LAST_5_MINUTE_RATE);\n     }\n \n     @Test\n     public void shouldBeHealthyForOneLeaderElectionPerMinuteAcrossClients() {\n-        markLeaderElectionsAtSpecifiedInterval(CLIENT_1, 5,  Duration.ofSeconds(60));\n-        markLeaderElectionsAtSpecifiedInterval(CLIENT_2, 5,  Duration.ofSeconds(60));\n+        markLeaderElectionsAtSpecifiedInterval(CLIENT_1, 5,  Duration.ofSeconds(60), true);\n+        markLeaderElectionsAtSpecifiedInterval(CLIENT_2, 5,  Duration.ofSeconds(60), false);\n \n-        assertThat(leaderElectionHealthCheckForOnlyClient1.leaderElectionRateHealthStatus())\n-                .isEqualTo(LeaderElectionHealthStatus.HEALTHY);\n+        assertThat(leaderElectionHealthCheckForOnlyClient1.leaderElectionRateHealthReport().leaderElectionRate())\n+                .isLessThanOrEqualTo(LeaderElectionHealthCheck.MAX_ALLOWED_LAST_5_MINUTE_RATE);\n \n-        assertThat(leaderElectionHealthCheckForOnlyClient2.leaderElectionRateHealthStatus())\n-                .isEqualTo(LeaderElectionHealthStatus.HEALTHY);\n+        assertThat(leaderElectionHealthCheckForOnlyClient2.leaderElectionRateHealthReport().leaderElectionRate())\n+                .isLessThanOrEqualTo(LeaderElectionHealthCheck.MAX_ALLOWED_LAST_5_MINUTE_RATE);\n \n-        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthStatus())\n-                .isEqualTo(LeaderElectionHealthStatus.HEALTHY);\n+        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthReport().leaderElectionRate())\n+                .isLessThanOrEqualTo(LeaderElectionHealthCheck.MAX_ALLOWED_LAST_5_MINUTE_RATE);\n     }\n \n     @Test\n     public void shouldBeUnhealthyOverallEvenIfIndividualClientsAreHealthy() {\n-        markLeaderElectionsAtSpecifiedInterval(CLIENT_1, 2,  Duration.ofSeconds(10));\n-        markLeaderElectionsAtSpecifiedInterval(CLIENT_2, 3,  Duration.ofSeconds(10));\n+        markLeaderElectionsAtSpecifiedInterval(CLIENT_1, 2,  Duration.ofSeconds(10), true);\n+        markLeaderElectionsAtSpecifiedInterval(CLIENT_2, 3,  Duration.ofSeconds(10), false);\n \n-        assertThat(leaderElectionHealthCheckForOnlyClient1.leaderElectionRateHealthStatus())\n-                .isEqualTo(LeaderElectionHealthStatus.HEALTHY);\n+        assertThat(leaderElectionHealthCheckForOnlyClient1.leaderElectionRateHealthReport().leaderElectionRate())\n+                .isLessThanOrEqualTo(LeaderElectionHealthCheck.MAX_ALLOWED_LAST_5_MINUTE_RATE);\n \n-        assertThat(leaderElectionHealthCheckForOnlyClient2.leaderElectionRateHealthStatus())\n-                .isEqualTo(LeaderElectionHealthStatus.HEALTHY);\n+        assertThat(leaderElectionHealthCheckForOnlyClient2.leaderElectionRateHealthReport().leaderElectionRate())\n+                .isLessThanOrEqualTo(LeaderElectionHealthCheck.MAX_ALLOWED_LAST_5_MINUTE_RATE);\n \n-        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthStatus())\n-                .isEqualTo(LeaderElectionHealthStatus.UNHEALTHY);\n+        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthReport().leaderElectionRate())\n+                .isGreaterThan(LeaderElectionHealthCheck.MAX_ALLOWED_LAST_5_MINUTE_RATE);\n     }\n \n     private void markLeaderElectionsAtSpecifiedInterval(Client client,\n             int leaderElectionCount,\n-            Duration timeIntervalInSeconds) {\n+            Duration timeIntervalInSeconds,\n+            boolean afterDeactivationPeriod) {\n         // The rate is initialized after first tick (5 second interval) of meter with number of marks / interval.\n         // Marking before the first interval has passed sets the rate very high, which should not happen in practice.\n-        fakeTimeClock.advance(6, TimeUnit.SECONDS);\n-        LeaderElectionServiceMetrics metrics = clientLeaderElectionServiceMetricsMap.get(client);\n+        if (afterDeactivationPeriod) {\n+            fakeTimeClock.advance(14, TimeUnit.MINUTES);\n+        }\n \n+        LeaderElectionServiceMetrics metrics = clientLeaderElectionServiceMetricsMap.get(client);\n         IntStream.range(0, leaderElectionCount).forEach(idx -> {\n             metrics.proposedLeadership().mark();\n             fakeTimeClock.advance(timeIntervalInSeconds.getSeconds(), TimeUnit.SECONDS);", "originalCommit": "911e0d8385e028baa5c560910cf1612a548dc3ef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cc413d4ff902d0921083a7cbb0afa26bc21c2cb5", "chunk": "diff --git a/leader-election-impl/src/test/java/com/palantir/leader/LeadershipElectionCheckTest.java b/leader-election-impl/src/test/java/com/palantir/leader/health/LeadershipElectionCheckTest.java\nsimilarity index 86%\nrename from leader-election-impl/src/test/java/com/palantir/leader/LeadershipElectionCheckTest.java\nrename to leader-election-impl/src/test/java/com/palantir/leader/health/LeadershipElectionCheckTest.java\nindex adde95c4f1..6f2d3179b7 100644\n--- a/leader-election-impl/src/test/java/com/palantir/leader/LeadershipElectionCheckTest.java\n+++ b/leader-election-impl/src/test/java/com/palantir/leader/health/LeadershipElectionCheckTest.java\n\n@@ -70,6 +70,25 @@ public class LeadershipElectionCheckTest {\n         when(registry2.meter(any())).thenReturn(new Meter(fakeTimeClock));\n     }\n \n+    @Test\n+    public void clockResetsWhenClientIsRegistered() {\n+        AtomicLong now = new AtomicLong();\n+        LeaderElectionHealthCheck check\n+                = new LeaderElectionHealthCheck(() -> Instant.ofEpochSecond(now.get()));\n+        long healthCheckDeactivationPeriod = LeaderElectionHealthCheck.HEALTH_CHECK_DEACTIVATION_PERIOD.getSeconds();\n+\n+        now.addAndGet(healthCheckDeactivationPeriod + 1);\n+        assertThat(check.isWithinDeactivationWindow()).isEqualTo(true);\n+\n+        check.registerClient(CLIENT_1, leaderElectionServiceMetrics);\n+        now.addAndGet(healthCheckDeactivationPeriod / 2);\n+        assertThat(check.isWithinDeactivationWindow()).isEqualTo(true);\n+\n+        now.addAndGet(healthCheckDeactivationPeriod / 2 + 1);\n+        assertThat(check.isWithinDeactivationWindow())\n+                .isEqualTo(false);\n+    }\n+\n     @Test\n     public void alwaysHealthyUntilDeactivationPeriodPasses() {\n         markLeaderElectionsAtSpecifiedInterval(CLIENT_1, 100, Duration.ofSeconds(1), false);\n"}}, {"oid": "e0528d5315b777b8896d8fd264674ba203f8957d", "url": "https://github.com/palantir/atlasdb/commit/e0528d5315b777b8896d8fd264674ba203f8957d", "message": "Comments", "committedDate": "2020-09-14T13:51:45Z", "type": "commit"}, {"oid": "cc413d4ff902d0921083a7cbb0afa26bc21c2cb5", "url": "https://github.com/palantir/atlasdb/commit/cc413d4ff902d0921083a7cbb0afa26bc21c2cb5", "message": "Add test", "committedDate": "2020-09-14T14:33:30Z", "type": "commit"}, {"oid": "aa0a19e366588a451ed39c9cc63c133f60e001e5", "url": "https://github.com/palantir/atlasdb/commit/aa0a19e366588a451ed39c9cc63c133f60e001e5", "message": "Add generated changelog entries", "committedDate": "2020-09-14T14:33:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk4NDE5Mw==", "url": "https://github.com/palantir/atlasdb/pull/4981#discussion_r487984193", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(check.isWithinDeactivationWindow())\n          \n          \n            \n                            .isEqualTo(false);\n          \n          \n            \n                    assertThat(check.isWithinDeactivationWindow()).isEqualTo(false);", "author": "jeremyk-91", "createdAt": "2020-09-14T14:38:40Z", "path": "leader-election-impl/src/test/java/com/palantir/leader/health/LeadershipElectionCheckTest.java", "diffHunk": "@@ -71,57 +71,88 @@ public void setup() {\n     }\n \n     @Test\n-    public void shouldBeHealthyForOneLeaderElectionPerMinute() {\n-        markLeaderElectionsAtSpecifiedInterval(CLIENT_1, 5, Duration.ofSeconds(60));\n-        assertThat(leaderElectionHealthCheck.leaderElectionRateHealthStatus())\n+    public void clockResetsWhenClientIsRegistered() {\n+        AtomicLong now = new AtomicLong();\n+        LeaderElectionHealthCheck check\n+                = new LeaderElectionHealthCheck(() -> Instant.ofEpochSecond(now.get()));\n+        long healthCheckDeactivationPeriod = LeaderElectionHealthCheck.HEALTH_CHECK_DEACTIVATION_PERIOD.getSeconds();\n+\n+        now.addAndGet(healthCheckDeactivationPeriod + 1);\n+        assertThat(check.isWithinDeactivationWindow()).isEqualTo(true);\n+\n+        check.registerClient(CLIENT_1, leaderElectionServiceMetrics);\n+        now.addAndGet(healthCheckDeactivationPeriod / 2);\n+        assertThat(check.isWithinDeactivationWindow()).isEqualTo(true);\n+\n+        now.addAndGet(healthCheckDeactivationPeriod / 2 + 1);\n+        assertThat(check.isWithinDeactivationWindow())\n+                .isEqualTo(false);", "originalCommit": "aa0a19e366588a451ed39c9cc63c133f60e001e5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cbf745628201013dc1594f3b0ac92d5191deb296", "chunk": "diff --git a/leader-election-impl/src/test/java/com/palantir/leader/health/LeadershipElectionCheckTest.java b/leader-election-impl/src/test/java/com/palantir/leader/health/LeadershipElectionCheckTest.java\nindex 6f2d3179b7..2f3ab7c43d 100644\n--- a/leader-election-impl/src/test/java/com/palantir/leader/health/LeadershipElectionCheckTest.java\n+++ b/leader-election-impl/src/test/java/com/palantir/leader/health/LeadershipElectionCheckTest.java\n\n@@ -85,8 +85,7 @@ public class LeadershipElectionCheckTest {\n         assertThat(check.isWithinDeactivationWindow()).isEqualTo(true);\n \n         now.addAndGet(healthCheckDeactivationPeriod / 2 + 1);\n-        assertThat(check.isWithinDeactivationWindow())\n-                .isEqualTo(false);\n+        assertThat(check.isWithinDeactivationWindow()).isEqualTo(false);\n     }\n \n     @Test\n"}}, {"oid": "cbf745628201013dc1594f3b0ac92d5191deb296", "url": "https://github.com/palantir/atlasdb/commit/cbf745628201013dc1594f3b0ac92d5191deb296", "message": "Update leader-election-impl/src/test/java/com/palantir/leader/health/LeadershipElectionCheckTest.java\n\nCo-authored-by: Jeremy Kong <jeremykong@hotmail.com>", "committedDate": "2020-09-14T14:39:18Z", "type": "commit"}, {"oid": "ba426430129b696ea3397350a49ab72a97a92722", "url": "https://github.com/palantir/atlasdb/commit/ba426430129b696ea3397350a49ab72a97a92722", "message": "Checkstyle", "committedDate": "2020-09-14T14:45:32Z", "type": "commit"}, {"oid": "85bfe033db330af17fa71eefa85ba466a2544a61", "url": "https://github.com/palantir/atlasdb/commit/85bfe033db330af17fa71eefa85ba466a2544a61", "message": "CheckstyleTest", "committedDate": "2020-09-14T15:03:25Z", "type": "commit"}, {"oid": "af6eeaf4dad3fc79201a7c151f3e41066ad2afa4", "url": "https://github.com/palantir/atlasdb/commit/af6eeaf4dad3fc79201a7c151f3e41066ad2afa4", "message": "Remove redundant", "committedDate": "2020-09-14T15:05:31Z", "type": "commit"}, {"oid": "d31e358bc43b89d19b61e34d91dbe34674dbd729", "url": "https://github.com/palantir/atlasdb/commit/d31e358bc43b89d19b61e34d91dbe34674dbd729", "message": "Revert \"Remove redundant\"\n\nThis reverts commit af6eeaf4dad3fc79201a7c151f3e41066ad2afa4.", "committedDate": "2020-09-14T15:06:15Z", "type": "commit"}]}