{"pr_number": 4690, "pr_title": "[PDS-111849] Rolling in the Deep, Part 2: Bounded Executors for Acceptors (Single and Batched)", "pr_createdAt": "2020-03-31T19:46:14Z", "pr_url": "https://github.com/palantir/atlasdb/pull/4690", "timeline": [{"oid": "5ede4ae63b8455f5aad658fef56b84d6532212cc", "url": "https://github.com/palantir/atlasdb/commit/5ede4ae63b8455f5aad658fef56b84d6532212cc", "message": "Fix single leader version", "committedDate": "2020-03-31T15:12:39Z", "type": "commit"}, {"oid": "8e24ac439c564969cdf55f5e98de4475099ca3d1", "url": "https://github.com/palantir/atlasdb/commit/8e24ac439c564969cdf55f5e98de4475099ca3d1", "message": "Wire up everything", "committedDate": "2020-03-31T18:07:56Z", "type": "commit"}, {"oid": "d845aa6be7928f6fc25a15a90bbd31b81fed7d58", "url": "https://github.com/palantir/atlasdb/commit/d845aa6be7928f6fc25a15a90bbd31b81fed7d58", "message": "Explain reasoning around paxos executors", "committedDate": "2020-03-31T18:58:16Z", "type": "commit"}, {"oid": "60a4f3f9599deb0d50625751b711a42336f44907", "url": "https://github.com/palantir/atlasdb/commit/60a4f3f9599deb0d50625751b711a42336f44907", "message": "Testing", "committedDate": "2020-03-31T19:24:53Z", "type": "commit"}, {"oid": "ce12989a17d6f666fef09d35808503ff5730dd0f", "url": "https://github.com/palantir/atlasdb/commit/ce12989a17d6f666fef09d35808503ff5730dd0f", "message": "Add generated changelog entries", "committedDate": "2020-03-31T19:24:53Z", "type": "commit"}, {"oid": "0a67c954d8512c35e648750819ad62fa856d7aaa", "url": "https://github.com/palantir/atlasdb/commit/0a67c954d8512c35e648750819ad62fa856d7aaa", "message": "aargh", "committedDate": "2020-03-31T19:50:06Z", "type": "commit"}, {"oid": "350575b3be8e331245dc48771e34e9d7a3a048cd", "url": "https://github.com/palantir/atlasdb/commit/350575b3be8e331245dc48771e34e9d7a3a048cd", "message": "Merge branch 'jkong/roll-diff-execs' of github.com:palantir/atlasdb into jkong/roll-diff-execs", "committedDate": "2020-03-31T19:50:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3OTI5OQ==", "url": "https://github.com/palantir/atlasdb/pull/4690#discussion_r401179299", "bodyText": "can we slap a limit on the executor?", "author": "j-baker", "createdAt": "2020-03-31T20:02:13Z", "path": "timelock-agent/src/main/java/com/palantir/atlasdb/timelock/paxos/Dependencies.java", "diffHunk": "@@ -50,6 +50,12 @@\n         PaxosRemoteClients remoteClients();\n         LocalPaxosComponents components();\n         int quorumSize();\n+\n+        /**\n+         * Caution! The shared executor should only be used for tasks that are expected to complete quickly.\n+         * DO NOT use the shared executor when the concurrency of requests may be very high (e.g. for Paxos round\n+         * verification). This may lead to thread explosion.\n+         */", "originalCommit": "350575b3be8e331245dc48771e34e9d7a3a048cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3OTM3Ng==", "url": "https://github.com/palantir/atlasdb/pull/4690#discussion_r401179376", "bodyText": "like, fix it at max 256 threads or sth?", "author": "j-baker", "createdAt": "2020-03-31T20:02:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3OTI5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUzOTgxNA==", "url": "https://github.com/palantir/atlasdb/pull/4690#discussion_r401539814", "bodyText": "Yeah, that sounds like a good thing to do", "author": "jeremyk-91", "createdAt": "2020-04-01T11:18:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3OTI5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUzOTk5NA==", "url": "https://github.com/palantir/atlasdb/pull/4690#discussion_r401539994", "bodyText": "Since the claim is that it makes sense to share the executors for the other endpoints as they are explicitly not heavily barraged", "author": "jeremyk-91", "createdAt": "2020-04-01T11:18:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3OTI5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0MjQ2NQ==", "url": "https://github.com/palantir/atlasdb/pull/4690#discussion_r401542465", "bodyText": "I'll have a look on internal metrics framework to decide what a good threshold might be (though might still need monitoring further since that will include acceptor activity which is the bulk of the activity).", "author": "jeremyk-91", "createdAt": "2020-04-01T11:23:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3OTI5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0ODM5Ng==", "url": "https://github.com/palantir/atlasdb/pull/4690#discussion_r401548396", "bodyText": "Yeah, internal metrics not super helpful - they do spike above 400+ in asymptomatic operation (and over 1000 on the relevant ticket), but I'm pretty confident a majority of these are acceptor operations.", "author": "jeremyk-91", "createdAt": "2020-04-01T11:35:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE3OTI5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "450614cd524ef1619671928eb6da30a1239827dd", "chunk": "diff --git a/timelock-agent/src/main/java/com/palantir/atlasdb/timelock/paxos/Dependencies.java b/timelock-agent/src/main/java/com/palantir/atlasdb/timelock/paxos/Dependencies.java\nindex 892a0790b1..67901634ad 100644\n--- a/timelock-agent/src/main/java/com/palantir/atlasdb/timelock/paxos/Dependencies.java\n+++ b/timelock-agent/src/main/java/com/palantir/atlasdb/timelock/paxos/Dependencies.java\n\n@@ -54,7 +54,7 @@ public interface Dependencies {\n         /**\n          * Caution! The shared executor should only be used for tasks that are expected to complete quickly.\n          * DO NOT use the shared executor when the concurrency of requests may be very high (e.g. for Paxos round\n-         * verification). This may lead to thread explosion.\n+         * verification).\n          */\n         ExecutorService sharedExecutor();\n     }\n"}}, {"oid": "7669f892058d0c04a07178d0c6e319199c01f43e", "url": "https://github.com/palantir/atlasdb/commit/7669f892058d0c04a07178d0c6e319199c01f43e", "message": "baseline", "committedDate": "2020-03-31T20:06:29Z", "type": "commit"}, {"oid": "bc88d3d236bfccb4d8e214e1e297a901bde07852", "url": "https://github.com/palantir/atlasdb/commit/bc88d3d236bfccb4d8e214e1e297a901bde07852", "message": "Fix underprovisioned circle boxes", "committedDate": "2020-03-31T21:10:45Z", "type": "commit"}, {"oid": "348e3d6640d6776632823c20b54c3e65febe7105", "url": "https://github.com/palantir/atlasdb/commit/348e3d6640d6776632823c20b54c3e65febe7105", "message": "watch the parallelism on container 7", "committedDate": "2020-03-31T21:19:49Z", "type": "commit"}, {"oid": "8c65213ea8129f73c14398d9ea3907ce3a52f277", "url": "https://github.com/palantir/atlasdb/commit/8c65213ea8129f73c14398d9ea3907ce3a52f277", "message": "Kick the Circle build", "committedDate": "2020-03-31T21:21:28Z", "type": "commit"}, {"oid": "251d7ada4b5ccaa2a87955264ee7ba3d57618a80", "url": "https://github.com/palantir/atlasdb/commit/251d7ada4b5ccaa2a87955264ee7ba3d57618a80", "message": "bounded shared executor", "committedDate": "2020-04-01T11:30:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyOTE1Nw==", "url": "https://github.com/palantir/atlasdb/pull/4690#discussion_r401529157", "bodyText": "SINGLE_THREAD_FOR_AUTOBATCHER?", "author": "gmaretic", "createdAt": "2020-04-01T10:57:10Z", "path": "timelock-agent/src/main/java/com/palantir/atlasdb/timelock/paxos/TimeLockPaxosExecutors.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.paxos;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.SynchronousQueue;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.codahale.metrics.InstrumentedExecutorService;\n+import com.codahale.metrics.MetricRegistry;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+import com.palantir.common.concurrent.PTExecutors;\n+import com.palantir.common.streams.KeyedStream;\n+\n+final class TimeLockPaxosExecutors {\n+    @VisibleForTesting\n+    static final int MAXIMUM_POOL_SIZE = 100;\n+\n+    private static final Duration THREAD_KEEP_ALIVE = Duration.ofSeconds(5);\n+\n+    private TimeLockPaxosExecutors() {\n+        // no\n+    }\n+\n+    /**\n+     * Creates a mapping of services to {@link ExecutorService}s indicating that tasks oriented towards the relevant\n+     * node should be run on the associated executor.\n+     *\n+     * It is assumed that tasks run on the local node will return quickly (hence the use of the direct executor).\n+     */\n+    static <T> Map<T, ExecutorService> createBoundedExecutors(\n+            MetricRegistry metricRegistry, LocalAndRemotes<T> localAndRemotes, String useCase) {\n+        Map<T, ExecutorService> remoteExecutors = KeyedStream.of(localAndRemotes.remotes())\n+                .map(remote -> createBoundedExecutor(metricRegistry, useCase))\n+                .collectToMap();\n+        remoteExecutors.put(localAndRemotes.local(), MoreExecutors.newDirectExecutorService());\n+        return remoteExecutors;\n+    }\n+\n+    private static ExecutorService createBoundedExecutor(MetricRegistry metricRegistry, String useCase) {\n+        return new InstrumentedExecutorService(\n+                PTExecutors.newThreadPoolExecutor(\n+                        1, // Many operations are autobatched, so under ordinary circumstances 1 thread will do", "originalCommit": "8c65213ea8129f73c14398d9ea3907ce3a52f277", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY5Njk0MQ==", "url": "https://github.com/palantir/atlasdb/pull/4690#discussion_r401696941", "bodyText": "OK, will do. Yep, makes sense", "author": "jeremyk-91", "createdAt": "2020-04-01T15:18:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUyOTE1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "dd5237cd3258e790a4fe8a44ecd3c2b0d6628ec7", "chunk": "diff --git a/timelock-agent/src/main/java/com/palantir/atlasdb/timelock/paxos/TimeLockPaxosExecutors.java b/timelock-agent/src/main/java/com/palantir/atlasdb/timelock/paxos/TimeLockPaxosExecutors.java\nindex bc372265df..166b35a942 100644\n--- a/timelock-agent/src/main/java/com/palantir/atlasdb/timelock/paxos/TimeLockPaxosExecutors.java\n+++ b/timelock-agent/src/main/java/com/palantir/atlasdb/timelock/paxos/TimeLockPaxosExecutors.java\n\n@@ -35,6 +35,7 @@ final class TimeLockPaxosExecutors {\n     static final int MAXIMUM_POOL_SIZE = 100;\n \n     private static final Duration THREAD_KEEP_ALIVE = Duration.ofSeconds(5);\n+    private static final int SINGLE_THREAD_FOR_MOSTLY_AUTOBATCHED_OPERATIONS = 1;\n \n     private TimeLockPaxosExecutors() {\n         // no\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUzMTA3OQ==", "url": "https://github.com/palantir/atlasdb/pull/4690#discussion_r401531079", "bodyText": "Maybe have a top level comment on the decisions made here to avoid inline comments? Something along the lines of \"This executor is intentionally constrained to prevent OOMs if it gets inundated by tasks\"? Feel free to ignore if you think this is more helpful", "author": "gmaretic", "createdAt": "2020-04-01T11:00:52Z", "path": "timelock-agent/src/main/java/com/palantir/atlasdb/timelock/paxos/TimeLockPaxosExecutors.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.paxos;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.SynchronousQueue;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.codahale.metrics.InstrumentedExecutorService;\n+import com.codahale.metrics.MetricRegistry;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+import com.palantir.common.concurrent.PTExecutors;\n+import com.palantir.common.streams.KeyedStream;\n+\n+final class TimeLockPaxosExecutors {\n+    @VisibleForTesting\n+    static final int MAXIMUM_POOL_SIZE = 100;\n+\n+    private static final Duration THREAD_KEEP_ALIVE = Duration.ofSeconds(5);\n+\n+    private TimeLockPaxosExecutors() {\n+        // no\n+    }\n+\n+    /**\n+     * Creates a mapping of services to {@link ExecutorService}s indicating that tasks oriented towards the relevant\n+     * node should be run on the associated executor.\n+     *\n+     * It is assumed that tasks run on the local node will return quickly (hence the use of the direct executor).\n+     */\n+    static <T> Map<T, ExecutorService> createBoundedExecutors(\n+            MetricRegistry metricRegistry, LocalAndRemotes<T> localAndRemotes, String useCase) {\n+        Map<T, ExecutorService> remoteExecutors = KeyedStream.of(localAndRemotes.remotes())\n+                .map(remote -> createBoundedExecutor(metricRegistry, useCase))\n+                .collectToMap();\n+        remoteExecutors.put(localAndRemotes.local(), MoreExecutors.newDirectExecutorService());\n+        return remoteExecutors;\n+    }\n+\n+    private static ExecutorService createBoundedExecutor(MetricRegistry metricRegistry, String useCase) {\n+        return new InstrumentedExecutorService(\n+                PTExecutors.newThreadPoolExecutor(\n+                        1, // Many operations are autobatched, so under ordinary circumstances 1 thread will do\n+                        MAXIMUM_POOL_SIZE, // Want to bound the number of threads that might be stuck", "originalCommit": "8c65213ea8129f73c14398d9ea3907ce3a52f277", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY5ODA0MQ==", "url": "https://github.com/palantir/atlasdb/pull/4690#discussion_r401698041", "bodyText": "Yep, I'll move the comments to the top.", "author": "jeremyk-91", "createdAt": "2020-04-01T15:19:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUzMTA3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "dd5237cd3258e790a4fe8a44ecd3c2b0d6628ec7", "chunk": "diff --git a/timelock-agent/src/main/java/com/palantir/atlasdb/timelock/paxos/TimeLockPaxosExecutors.java b/timelock-agent/src/main/java/com/palantir/atlasdb/timelock/paxos/TimeLockPaxosExecutors.java\nindex bc372265df..166b35a942 100644\n--- a/timelock-agent/src/main/java/com/palantir/atlasdb/timelock/paxos/TimeLockPaxosExecutors.java\n+++ b/timelock-agent/src/main/java/com/palantir/atlasdb/timelock/paxos/TimeLockPaxosExecutors.java\n\n@@ -35,6 +35,7 @@ final class TimeLockPaxosExecutors {\n     static final int MAXIMUM_POOL_SIZE = 100;\n \n     private static final Duration THREAD_KEEP_ALIVE = Duration.ofSeconds(5);\n+    private static final int SINGLE_THREAD_FOR_MOSTLY_AUTOBATCHED_OPERATIONS = 1;\n \n     private TimeLockPaxosExecutors() {\n         // no\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU1NzYxNA==", "url": "https://github.com/palantir/atlasdb/pull/4690#discussion_r401557614", "bodyText": "Wanted to add a test that local is not using the same executor as remotes and is not bounded in the same way, maybe this?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n                @Test\n          \n          \n            \n                public void localExecutorsAreNotBoundedByMaximumPoolSize() {\n          \n          \n            \n                    int numThreads = TimeLockPaxosExecutors.MAXIMUM_POOL_SIZE * 2;\n          \n          \n            \n                    ExecutorService executor = PTExecutors.newFixedThreadPool(numThreads);\n          \n          \n            \n                    List<Future<Integer>> results = IntStream.range(0, numThreads)\n          \n          \n            \n                            .mapToObj(ignore -> executor.submit(this::submitToLocalAndGetUnchecked))\n          \n          \n            \n                            .collect(Collectors.toList());\n          \n          \n            \n                    results.forEach(future -> assertThatCode(() -> AtlasFutures.getUnchecked(future))\n          \n          \n            \n                            .doesNotThrowAnyException());\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                private Integer submitToLocalAndGetUnchecked() {\n          \n          \n            \n                    return AtlasFutures.getUnchecked(executors.get(local).submit(SLEEP_FOR_ONE_SECOND));\n          \n          \n            \n                }\n          \n          \n            \n            }", "author": "gmaretic", "createdAt": "2020-04-01T11:53:40Z", "path": "timelock-agent/src/test/java/com/palantir/atlasdb/timelock/paxos/TimeLockPaxosExecutorsTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock.paxos;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatCode;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.junit.Test;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.util.concurrent.Uninterruptibles;\n+import com.palantir.atlasdb.util.MetricsManagers;\n+\n+public class TimeLockPaxosExecutorsTest {\n+    private static final String TEST = \"test\";\n+    private static final Callable<Integer> SLEEP_FOR_ONE_SECOND = () -> {\n+        Uninterruptibles.sleepUninterruptibly(1, TimeUnit.SECONDS);\n+        return 42;\n+    };\n+\n+    private final Object local = new Object();\n+    private final Object remote1 = new Object();\n+    private final Object remote2 = new Object();\n+    private final List<Object> remotes = ImmutableList.of(remote1, remote2);\n+\n+    private final LocalAndRemotes<Object> localAndRemotes = LocalAndRemotes.of(local, remotes);\n+\n+    private final Map<Object, ExecutorService> executors = TimeLockPaxosExecutors.createBoundedExecutors(\n+            MetricsManagers.createForTests().getRegistry(),\n+            localAndRemotes,\n+            TEST);\n+\n+    @Test\n+    public void hasKeysCollectivelyMatchingLocalAndRemoteElements() {\n+        assertThat(executors.keySet()).hasSameElementsAs(localAndRemotes.all());\n+    }\n+\n+    @Test\n+    public void remoteExecutorsAreBounded() {\n+        for (int i = 0; i < TimeLockPaxosExecutors.MAXIMUM_POOL_SIZE; i++) {\n+            executors.get(remote1).submit(SLEEP_FOR_ONE_SECOND);\n+        }\n+        assertThatThrownBy(() -> executors.get(remote1).submit(SLEEP_FOR_ONE_SECOND))\n+                .isInstanceOf(RejectedExecutionException.class);\n+    }\n+\n+    @Test\n+    public void remoteExecutorsAreLimitedSeparately() {\n+        for (int i = 0; i < TimeLockPaxosExecutors.MAXIMUM_POOL_SIZE; i++) {\n+            executors.get(remote1).submit(SLEEP_FOR_ONE_SECOND);\n+        }\n+        assertThatCode(() -> executors.get(remote2).submit(SLEEP_FOR_ONE_SECOND))\n+                .doesNotThrowAnyException();\n+    }\n+}", "originalCommit": "8c65213ea8129f73c14398d9ea3907ce3a52f277", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcwNjU4NQ==", "url": "https://github.com/palantir/atlasdb/pull/4690#discussion_r401706585", "bodyText": "Yep, makes sense. I was a bit torn on whether to include this test (it didn't seem like that was necessarily something I was guaranteeing), but fine to have it.", "author": "jeremyk-91", "createdAt": "2020-04-01T15:30:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU1NzYxNA=="}], "type": "inlineReview", "revised_code": {"commit": "c4e0e0d129585224110c0db061c78074a975c138", "chunk": "diff --git a/timelock-agent/src/test/java/com/palantir/atlasdb/timelock/paxos/TimeLockPaxosExecutorsTest.java b/timelock-agent/src/test/java/com/palantir/atlasdb/timelock/paxos/TimeLockPaxosExecutorsTest.java\nindex 21aa8ba7ff..422517ab99 100644\n--- a/timelock-agent/src/test/java/com/palantir/atlasdb/timelock/paxos/TimeLockPaxosExecutorsTest.java\n+++ b/timelock-agent/src/test/java/com/palantir/atlasdb/timelock/paxos/TimeLockPaxosExecutorsTest.java\n\n@@ -74,4 +74,18 @@ public class TimeLockPaxosExecutorsTest {\n         assertThatCode(() -> executors.get(remote2).submit(SLEEP_FOR_ONE_SECOND))\n                 .doesNotThrowAnyException();\n     }\n+    @Test\n+    public void localExecutorsAreNotBoundedByMaximumPoolSize() {\n+        int numThreads = TimeLockPaxosExecutors.MAXIMUM_POOL_SIZE * 2;\n+        ExecutorService executor = PTExecutors.newFixedThreadPool(numThreads);\n+        List<Future<Integer>> results = IntStream.range(0, numThreads)\n+                .mapToObj(ignore -> executor.submit(this::submitToLocalAndGetUnchecked))\n+                .collect(Collectors.toList());\n+        results.forEach(future -> assertThatCode(() -> AtlasFutures.getUnchecked(future))\n+                .doesNotThrowAnyException());\n+    }\n+\n+    private Integer submitToLocalAndGetUnchecked() {\n+        return AtlasFutures.getUnchecked(executors.get(local).submit(SLEEP_FOR_ONE_SECOND));\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU2MDQyNg==", "url": "https://github.com/palantir/atlasdb/pull/4690#discussion_r401560426", "bodyText": "The idea here is that we expect the source of overloading is a few bad actors hammering, so this will effectively throttle them?", "author": "gmaretic", "createdAt": "2020-04-01T11:59:09Z", "path": "timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockAgent.java", "diffHunk": "@@ -140,11 +147,17 @@ private TimeLockAgent(MetricsManager metricsManager,\n \n     private static ExecutorService createSharedExecutor(MetricsManager metricsManager) {\n         return new InstrumentedExecutorService(\n-                PTExecutors.newCachedThreadPool(\n+                PTExecutors.newThreadPoolExecutor(\n+                        CORE_SHARED_EXECUTOR_THREADS,\n+                        MAX_SHARED_EXECUTOR_THREADS,\n+                        5,\n+                        TimeUnit.SECONDS,\n+                        new SynchronousQueue<>(),\n                         new InstrumentedThreadFactory(new ThreadFactoryBuilder()\n                                 .setNameFormat(\"paxos-timestamp-creator-%d\")\n                                 .setDaemon(true)\n-                                .build(), metricsManager.getRegistry())),\n+                                .build(), metricsManager.getRegistry()),\n+                        new ThreadPoolExecutor.CallerRunsPolicy()), // Be resilient-ish to overloading", "originalCommit": "251d7ada4b5ccaa2a87955264ee7ba3d57618a80", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY3MTE4MA==", "url": "https://github.com/palantir/atlasdb/pull/4690#discussion_r401671180", "bodyText": "Maybe have a policy that will log or update a metric if this ever happens, so we can detect if this is actually being hit and our choice for the bound is suspicious", "author": "gmaretic", "createdAt": "2020-04-01T14:44:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU2MDQyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgyNjM0NA==", "url": "https://github.com/palantir/atlasdb/pull/4690#discussion_r401826344", "bodyText": "Yep, added a metric to the execution handler.", "author": "jeremyk-91", "createdAt": "2020-04-01T18:35:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU2MDQyNg=="}], "type": "inlineReview", "revised_code": {"commit": "450614cd524ef1619671928eb6da30a1239827dd", "chunk": "diff --git a/timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockAgent.java b/timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockAgent.java\nindex 71916db5ae..35dacefa24 100644\n--- a/timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockAgent.java\n+++ b/timelock-agent/src/main/java/com/palantir/timelock/paxos/TimeLockAgent.java\n\n@@ -157,9 +156,10 @@ public class TimeLockAgent {\n                                 .setNameFormat(\"paxos-timestamp-creator-%d\")\n                                 .setDaemon(true)\n                                 .build(), metricsManager.getRegistry()),\n-                        new ThreadPoolExecutor.CallerRunsPolicy()), // Be resilient-ish to overloading\n+                        RejectionTrackingCallerRunsPolicy.createWithSafeLoggableUseCase(\n+                                metricsManager, PAXOS_SHARED_EXECUTOR)),\n                 metricsManager.getRegistry(),\n-                MetricRegistry.name(PaxosLeaderElectionService.class, \"paxos-timestamp-creator\", \"executor\"));\n+                MetricRegistry.name(PaxosLeaderElectionService.class, PAXOS_SHARED_EXECUTOR, \"executor\"));\n     }\n \n     private TimestampCreator getTimestampCreator() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU2MjI3NA==", "url": "https://github.com/palantir/atlasdb/pull/4690#discussion_r401562274", "bodyText": "We should remove this comment before merging. +1 for keeping the ordering", "author": "gmaretic", "createdAt": "2020-04-01T12:03:09Z", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/paxos/PaxosQuorumCheckingCoalescingFunction.java", "diffHunk": "@@ -96,27 +108,28 @@ public PaxosQuorumCheckingCoalescingFunction(\n     public static <REQ, RESP extends PaxosResponse, SERVICE, F extends CoalescingRequestFunction<REQ, RESP>>\n     PaxosQuorumCheckingCoalescingFunction<REQ, RESP, F> wrapWithRemotes(\n             List<SERVICE> services,\n-            ExecutorService executor,\n+            Map<SERVICE, ExecutorService> executors,\n             int quorumSize,\n             Function<SERVICE, F> functionFactory) {\n-        return services.stream()\n-                .map(functionFactory)\n-                .collect(collectingAndThen(\n-                        toList(), functions -> new PaxosQuorumCheckingCoalescingFunction<>(\n-                                functions,\n-                                Maps.toMap(functions, $ -> executor),\n-                                quorumSize)));\n+        // Not 100% sure if ordering is important, but assuming so here", "originalCommit": "251d7ada4b5ccaa2a87955264ee7ba3d57618a80", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dd5237cd3258e790a4fe8a44ecd3c2b0d6628ec7", "chunk": "diff --git a/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/paxos/PaxosQuorumCheckingCoalescingFunction.java b/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/paxos/PaxosQuorumCheckingCoalescingFunction.java\nindex a0354cfa97..f4492ba4bd 100644\n--- a/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/paxos/PaxosQuorumCheckingCoalescingFunction.java\n+++ b/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/paxos/PaxosQuorumCheckingCoalescingFunction.java\n\n@@ -111,7 +111,6 @@ public class PaxosQuorumCheckingCoalescingFunction<\n             Map<SERVICE, ExecutorService> executors,\n             int quorumSize,\n             Function<SERVICE, F> functionFactory) {\n-        // Not 100% sure if ordering is important, but assuming so here\n         List<FunctionAndExecutor<F>> functionsAndExecutors = KeyedStream.of(services)\n                 .map(executors::get)\n                 .mapKeys(functionFactory)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU2NzkxNg==", "url": "https://github.com/palantir/atlasdb/pull/4690#discussion_r401567916", "bodyText": "I think we went a bit overboard with fanciness to keep it fluent as opposed to\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return new PaxosQuorumCheckingCoalescingFunction<>(functionsAndExecutors, quorumSize);\n          \n          \n            \n                    List<F> functions = new ArrayList<>(services.size());\n          \n          \n            \n                    Map<F, ExecutorService> executorMap = new HashMap<>(services.size());\n          \n          \n            \n                    for (SERVICE service: services) {\n          \n          \n            \n                        F function = functionFactory.apply(service);\n          \n          \n            \n                        functions.add(function);\n          \n          \n            \n                        executorMap.put(function, executors.get(service));\n          \n          \n            \n                    }\n          \n          \n            \n                    return new PaxosQuorumCheckingCoalescingFunction<>(functions, executorMap, quorumSize);", "author": "gmaretic", "createdAt": "2020-04-01T12:14:00Z", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/paxos/PaxosQuorumCheckingCoalescingFunction.java", "diffHunk": "@@ -96,27 +108,28 @@ public PaxosQuorumCheckingCoalescingFunction(\n     public static <REQ, RESP extends PaxosResponse, SERVICE, F extends CoalescingRequestFunction<REQ, RESP>>\n     PaxosQuorumCheckingCoalescingFunction<REQ, RESP, F> wrapWithRemotes(\n             List<SERVICE> services,\n-            ExecutorService executor,\n+            Map<SERVICE, ExecutorService> executors,\n             int quorumSize,\n             Function<SERVICE, F> functionFactory) {\n-        return services.stream()\n-                .map(functionFactory)\n-                .collect(collectingAndThen(\n-                        toList(), functions -> new PaxosQuorumCheckingCoalescingFunction<>(\n-                                functions,\n-                                Maps.toMap(functions, $ -> executor),\n-                                quorumSize)));\n+        // Not 100% sure if ordering is important, but assuming so here\n+        List<FunctionAndExecutor<F>> functionsAndExecutors = KeyedStream.of(services)\n+                .map(executors::get)\n+                .mapKeys(functionFactory)\n+                .entries()\n+                .<FunctionAndExecutor<F>>map(entry -> ImmutableFunctionAndExecutor.of(entry.getKey(), entry.getValue()))\n+                .collect(Collectors.toList());\n+        return new PaxosQuorumCheckingCoalescingFunction<>(functionsAndExecutors, quorumSize);", "originalCommit": "251d7ada4b5ccaa2a87955264ee7ba3d57618a80", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcwNzQxMA==", "url": "https://github.com/palantir/atlasdb/pull/4690#discussion_r401707410", "bodyText": "Fair enough, when I threaded the needle I (probably wrongly) thought it was clear enough \ud83d\ude05 but agree this version is clearer.", "author": "jeremyk-91", "createdAt": "2020-04-01T15:32:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU2NzkxNg=="}], "type": "inlineReview", "revised_code": {"commit": "dd5237cd3258e790a4fe8a44ecd3c2b0d6628ec7", "chunk": "diff --git a/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/paxos/PaxosQuorumCheckingCoalescingFunction.java b/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/paxos/PaxosQuorumCheckingCoalescingFunction.java\nindex a0354cfa97..f4492ba4bd 100644\n--- a/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/paxos/PaxosQuorumCheckingCoalescingFunction.java\n+++ b/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/paxos/PaxosQuorumCheckingCoalescingFunction.java\n\n@@ -111,7 +111,6 @@ public class PaxosQuorumCheckingCoalescingFunction<\n             Map<SERVICE, ExecutorService> executors,\n             int quorumSize,\n             Function<SERVICE, F> functionFactory) {\n-        // Not 100% sure if ordering is important, but assuming so here\n         List<FunctionAndExecutor<F>> functionsAndExecutors = KeyedStream.of(services)\n                 .map(executors::get)\n                 .mapKeys(functionFactory)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU2ODMxMg==", "url": "https://github.com/palantir/atlasdb/pull/4690#discussion_r401568312", "bodyText": "\ud83c\udf89", "author": "gmaretic", "createdAt": "2020-04-01T12:14:39Z", "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java", "diffHunk": "@@ -286,7 +285,6 @@ public void multipleLockRequestsWithTheSameIdAreGranted() {\n     }\n \n     @Test\n-    @Ignore // TODO (jkong): Fix this test by reworking the threading model.", "originalCommit": "251d7ada4b5ccaa2a87955264ee7ba3d57618a80", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "dd5237cd3258e790a4fe8a44ecd3c2b0d6628ec7", "url": "https://github.com/palantir/atlasdb/commit/dd5237cd3258e790a4fe8a44ecd3c2b0d6628ec7", "message": "smaller PR comments", "committedDate": "2020-04-01T15:29:11Z", "type": "commit"}, {"oid": "c4e0e0d129585224110c0db061c78074a975c138", "url": "https://github.com/palantir/atlasdb/commit/c4e0e0d129585224110c0db061c78074a975c138", "message": "Apply suggestions from code review\n\nCo-Authored-By: gmaretic <gmaretic@palantir.com>", "committedDate": "2020-04-01T15:29:57Z", "type": "commit"}, {"oid": "450614cd524ef1619671928eb6da30a1239827dd", "url": "https://github.com/palantir/atlasdb/commit/450614cd524ef1619671928eb6da30a1239827dd", "message": "Rejection tracking policy", "committedDate": "2020-04-01T18:34:04Z", "type": "commit"}, {"oid": "370aa39e920b2fef20e9b33f0a4ddf70426d1224", "url": "https://github.com/palantir/atlasdb/commit/370aa39e920b2fef20e9b33f0a4ddf70426d1224", "message": "Merge branch 'jkong/roll-diff-execs' of github.com:palantir/atlasdb into jkong/roll-diff-execs", "committedDate": "2020-04-01T18:34:12Z", "type": "commit"}, {"oid": "54b6eb94baed13f54402c4074413d95891546729", "url": "https://github.com/palantir/atlasdb/commit/54b6eb94baed13f54402c4074413d95891546729", "message": "Compile break", "committedDate": "2020-04-01T18:46:03Z", "type": "commit"}, {"oid": "99d77378b2da5d33122143002945adc09352f357", "url": "https://github.com/palantir/atlasdb/commit/99d77378b2da5d33122143002945adc09352f357", "message": "More compile breaks", "committedDate": "2020-04-01T18:50:14Z", "type": "commit"}, {"oid": "035d212c58f4c9c4ca2545fa0e4414c7ac4e10cf", "url": "https://github.com/palantir/atlasdb/commit/035d212c58f4c9c4ca2545fa0e4414c7ac4e10cf", "message": "checkstyleg", "committedDate": "2020-04-01T19:13:11Z", "type": "commit"}]}