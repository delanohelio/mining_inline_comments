{"pr_number": 4788, "pr_title": "[PaxosStateLog] Validate without migration", "pr_createdAt": "2020-05-19T17:18:18Z", "pr_url": "https://github.com/palantir/atlasdb/pull/4788", "timeline": [{"oid": "6d65ee7bba57343987dcb133c1d031e8f8b20038", "url": "https://github.com/palantir/atlasdb/commit/6d65ee7bba57343987dcb133c1d031e8f8b20038", "message": "Again don't do migrations", "committedDate": "2020-05-19T16:30:34Z", "type": "commit"}, {"oid": "7dc91fe13dc26a9acd92bdaa83fb813e3656e440", "url": "https://github.com/palantir/atlasdb/commit/7dc91fe13dc26a9acd92bdaa83fb813e3656e440", "message": "Validate but do not migrate", "committedDate": "2020-05-19T17:16:41Z", "type": "commit"}, {"oid": "49d0b51c55f369ebcfb4984c5ac53806f1118a81", "url": "https://github.com/palantir/atlasdb/commit/49d0b51c55f369ebcfb4984c5ac53806f1118a81", "message": "Update", "committedDate": "2020-05-19T17:20:25Z", "type": "commit"}, {"oid": "4c21cd75bc171664d8a5ce3b96027c238cd934f0", "url": "https://github.com/palantir/atlasdb/commit/4c21cd75bc171664d8a5ce3b96027c238cd934f0", "message": "Add generated changelog entries", "committedDate": "2020-05-19T17:20:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3MTcyNw==", "url": "https://github.com/palantir/atlasdb/pull/4788#discussion_r427471727", "bodyText": "discussed offline: I'd probably write AtomicReference<Long>, though this is fine as well", "author": "jeremyk-91", "createdAt": "2020-05-19T17:23:37Z", "path": "leader-election-impl/src/main/java/com/palantir/paxos/VerifyingPaxosStateLog.java", "diffHunk": "@@ -53,6 +56,7 @@\n     private final PaxosStateLog<V> currentLog;\n     private final PaxosStateLog<V> experimentalLog;\n     private final Persistable.Hydrator<V> hydrator;\n+    private final CompletableFuture<Long> firstEntry = new CompletableFuture<>();", "originalCommit": "49d0b51c55f369ebcfb4984c5ac53806f1118a81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ4MDM0OA==", "url": "https://github.com/palantir/atlasdb/pull/4788#discussion_r427480348", "bodyText": "We probably don't need the second term here, but this is fine", "author": "jeremyk-91", "createdAt": "2020-05-19T17:36:39Z", "path": "leader-election-impl/src/main/java/com/palantir/paxos/VerifyingPaxosStateLog.java", "diffHunk": "@@ -175,12 +201,15 @@ private long getExtremeLogEntry(Function<PaxosStateLog<V>, Long> extractor) {\n         lock.readLock().lock();\n         try {\n             Long result = extractor.apply(currentLog);\n-            Long experimentalResult = safeReadFromExperimental(extractor::apply);\n-            if (!Objects.equals(result, experimentalResult) && result != PaxosAcceptor.NO_LOG_ENTRY) {\n-                log.error(\"Mismatch in getting the extreme log entry between legacy and current implementations.\"\n-                                + \" Legacy result {}, current result {}.\",\n-                        SafeArg.of(\"legacy\", result),\n-                        SafeArg.of(\"current\", experimentalResult));\n+            if (firstEntry.isDone()) {\n+                Long experimentalResult = safeReadFromExperimental(extractor::apply);\n+                if (!Objects.equals(result, experimentalResult) && result != PaxosAcceptor.NO_LOG_ENTRY\n+                        && result >= Futures.getUnchecked(firstEntry)) {", "originalCommit": "49d0b51c55f369ebcfb4984c5ac53806f1118a81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "284426626e77b67f5d547bd253a3d8c2b8ea523d", "chunk": "diff --git a/leader-election-impl/src/main/java/com/palantir/paxos/VerifyingPaxosStateLog.java b/leader-election-impl/src/main/java/com/palantir/paxos/VerifyingPaxosStateLog.java\nindex 54852fb1e1..da250cc12b 100644\n--- a/leader-election-impl/src/main/java/com/palantir/paxos/VerifyingPaxosStateLog.java\n+++ b/leader-election-impl/src/main/java/com/palantir/paxos/VerifyingPaxosStateLog.java\n\n@@ -201,15 +203,15 @@ public final class VerifyingPaxosStateLog<V extends Persistable & Versionable> i\n         lock.readLock().lock();\n         try {\n             Long result = extractor.apply(currentLog);\n-            if (firstEntry.isDone()) {\n-                Long experimentalResult = safeReadFromExperimental(extractor::apply);\n-                if (!Objects.equals(result, experimentalResult) && result != PaxosAcceptor.NO_LOG_ENTRY\n-                        && result >= Futures.getUnchecked(firstEntry)) {\n-                    log.error(\"Mismatch in getting the extreme log entry between legacy and current implementations.\"\n-                                    + \" Legacy result {}, current result {}.\",\n-                            SafeArg.of(\"legacy\", result),\n-                            SafeArg.of(\"current\", experimentalResult));\n-                }\n+            Long experimentalResult = safeReadFromExperimental(extractor::apply);\n+            if (!Objects.equals(result, experimentalResult) && result != PaxosAcceptor.NO_LOG_ENTRY) {\n+                OptionalLong firstWrittenSequence =\n+                        firstEntry.isDone() ? OptionalLong.of(Futures.getUnchecked(firstEntry)) : OptionalLong.empty();\n+                log.error(\"Mismatch in getting the extreme log entry between legacy and current implementations.\"\n+                                + \" Legacy result {}, current result {}. First written sequence was {}.\",\n+                        SafeArg.of(\"legacy\", result),\n+                        SafeArg.of(\"current\", experimentalResult),\n+                        SafeArg.of(\"firstWrittenSequence\", firstWrittenSequence));\n             }\n             return result;\n         } finally {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg0NzYzMg==", "url": "https://github.com/palantir/atlasdb/pull/4788#discussion_r427847632", "bodyText": "In hindsight, following a suggestion from @j-baker, it might be worth not doing this check actually, since this would be a good way to test a hypothesis that the old entries aren't actually particularly important. It might still be worth keeping track of the first entry and dumping that as an arg in the result.", "author": "jeremyk-91", "createdAt": "2020-05-20T08:53:11Z", "path": "leader-election-impl/src/main/java/com/palantir/paxos/VerifyingPaxosStateLog.java", "diffHunk": "@@ -117,13 +141,15 @@ public void writeRound(long seq, V round) {\n         lock.readLock().lock();\n         try {\n             byte[] result = currentLog.readRound(seq);\n-            byte[] experimentalResult = safeReadFromExperimental(psl -> psl.readRound(seq));\n-            if (!Arrays.equals(result, experimentalResult)) {\n-                log.error(\"Mismatch in reading round for sequence number {} between legacy and current \"\n-                        + \"implementations. Legacy result {}, current result {}.\",\n-                        SafeArg.of(\"sequence\", seq),\n-                        UnsafeArg.of(\"legacy\", hydrateIfNotNull(result)),\n-                        UnsafeArg.of(\"current\", hydrateIfNotNull(experimentalResult)));\n+            if (firstEntry.isDone() && Futures.getUnchecked(firstEntry) <= seq) {", "originalCommit": "4c21cd75bc171664d8a5ce3b96027c238cd934f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "284426626e77b67f5d547bd253a3d8c2b8ea523d", "chunk": "diff --git a/leader-election-impl/src/main/java/com/palantir/paxos/VerifyingPaxosStateLog.java b/leader-election-impl/src/main/java/com/palantir/paxos/VerifyingPaxosStateLog.java\nindex 54852fb1e1..da250cc12b 100644\n--- a/leader-election-impl/src/main/java/com/palantir/paxos/VerifyingPaxosStateLog.java\n+++ b/leader-election-impl/src/main/java/com/palantir/paxos/VerifyingPaxosStateLog.java\n\n@@ -141,16 +141,18 @@ public final class VerifyingPaxosStateLog<V extends Persistable & Versionable> i\n         lock.readLock().lock();\n         try {\n             byte[] result = currentLog.readRound(seq);\n-            if (firstEntry.isDone() && Futures.getUnchecked(firstEntry) <= seq) {\n-                byte[] experimentalResult = safeReadFromExperimental(psl -> psl.readRound(seq));\n-                if (!Arrays.equals(result, experimentalResult)) {\n-                    log.error(\"Mismatch in reading round for sequence number {} between legacy and current \"\n-                                    + \"implementations. Legacy result {}, current result {}.\",\n-                            SafeArg.of(\"sequence\", seq),\n-                            UnsafeArg.of(\"legacy\", hydrateIfNotNull(result)),\n-                            UnsafeArg.of(\"current\", hydrateIfNotNull(experimentalResult)));\n-                }\n+            byte[] experimentalResult = safeReadFromExperimental(psl -> psl.readRound(seq));\n+            OptionalLong firstWrittenSequence =\n+                    firstEntry.isDone() ? OptionalLong.of(Futures.getUnchecked(firstEntry)) : OptionalLong.empty();\n+            if (!Arrays.equals(result, experimentalResult)) {\n+                log.error(\"Mismatch in reading round for sequence number {} between legacy and current implementations.\"\n+                                + \" Legacy result {}, current result {}. First written sequence was {}.\",\n+                        SafeArg.of(\"sequence\", seq),\n+                        UnsafeArg.of(\"legacy\", hydrateIfNotNull(result)),\n+                        UnsafeArg.of(\"current\", hydrateIfNotNull(experimentalResult)),\n+                        SafeArg.of(\"firstWrittenSequence\", firstWrittenSequence));\n             }\n+\n             return result;\n         } finally {\n             lock.readLock().unlock();\n"}}, {"oid": "284426626e77b67f5d547bd253a3d8c2b8ea523d", "url": "https://github.com/palantir/atlasdb/commit/284426626e77b67f5d547bd253a3d8c2b8ea523d", "message": "Do better verification", "committedDate": "2020-05-20T10:19:39Z", "type": "commit"}]}