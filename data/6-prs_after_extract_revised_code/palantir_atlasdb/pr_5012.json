{"pr_number": 5012, "pr_title": "[LW] Retention LWEC on max size", "pr_createdAt": "2020-10-01T09:07:02Z", "pr_url": "https://github.com/palantir/atlasdb/pull/5012", "timeline": [{"oid": "b98c5c99c7d135180899f2e32bb6179ccaf74b34", "url": "https://github.com/palantir/atlasdb/commit/b98c5c99c7d135180899f2e32bb6179ccaf74b34", "message": "Initial pass on retention", "committedDate": "2020-09-30T13:08:01Z", "type": "commit"}, {"oid": "a806c2d20d2a6307dadd50b2c42f7eb99a48c7e1", "url": "https://github.com/palantir/atlasdb/commit/a806c2d20d2a6307dadd50b2c42f7eb99a48c7e1", "message": "Initial pass on retention", "committedDate": "2020-09-30T13:34:32Z", "type": "commit"}, {"oid": "a76b01f47ed328941d7e12c48b85d9a6d2d1d071", "url": "https://github.com/palantir/atlasdb/commit/a76b01f47ed328941d7e12c48b85d9a6d2d1d071", "message": "initial processing around the broken invariant", "committedDate": "2020-09-30T13:34:58Z", "type": "commit"}, {"oid": "e9877074fe258f53774886d8ef0f2d1c7f2926ca", "url": "https://github.com/palantir/atlasdb/commit/e9877074fe258f53774886d8ef0f2d1c7f2926ca", "message": "thing", "committedDate": "2020-09-30T13:44:18Z", "type": "commit"}, {"oid": "803bf2ea2c6506f4f3c082fde58f9d4d65a62228", "url": "https://github.com/palantir/atlasdb/commit/803bf2ea2c6506f4f3c082fde58f9d4d65a62228", "message": "fix merge", "committedDate": "2020-09-30T13:44:47Z", "type": "commit"}, {"oid": "e462903fd13fe169c6ce195ae2740558ddbc30cf", "url": "https://github.com/palantir/atlasdb/commit/e462903fd13fe169c6ce195ae2740558ddbc30cf", "message": "Further work", "committedDate": "2020-10-01T09:03:48Z", "type": "commit"}, {"oid": "cbdc68d6a9ff0fbf2e1b6458cdcbc319b47659b9", "url": "https://github.com/palantir/atlasdb/commit/cbdc68d6a9ff0fbf2e1b6458cdcbc319b47659b9", "message": "further refactors", "committedDate": "2020-10-01T09:28:19Z", "type": "commit"}, {"oid": "28419081065cd8bf75563edfa5a9a26f29ab044b", "url": "https://github.com/palantir/atlasdb/commit/28419081065cd8bf75563edfa5a9a26f29ab044b", "message": "Remove further extraneous things", "committedDate": "2020-10-01T09:31:24Z", "type": "commit"}, {"oid": "edae5019986e3d9f29df8b797d1b2a1fa79800df", "url": "https://github.com/palantir/atlasdb/commit/edae5019986e3d9f29df8b797d1b2a1fa79800df", "message": "Fix tests", "committedDate": "2020-10-01T10:07:21Z", "type": "commit"}, {"oid": "75c97cd6ddc944447294262d38fa563f196a550a", "url": "https://github.com/palantir/atlasdb/commit/75c97cd6ddc944447294262d38fa563f196a550a", "message": "add further tests", "committedDate": "2020-10-01T10:15:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODEzNjEzNw==", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498136137", "bodyText": "moved these around and made some static; the diff renders weirdly here", "author": "Jolyon-S", "createdAt": "2020-10-01T10:16:46Z", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -153,27 +144,40 @@ LockWatchEventCacheState getStateForTesting() {\n     }\n \n \n-    private void assertTrue(boolean condition, String message) {", "originalCommit": "75c97cd6ddc944447294262d38fa563f196a550a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e2d5e96f87b24b01d7969b5fa1c46595078d4bf7", "chunk": "diff --git a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImpl.java b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImpl.java\nindex 0f8840e079..56f2d32c6f 100644\n--- a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImpl.java\n+++ b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImpl.java\n\n@@ -169,15 +178,9 @@ public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n         }\n     }\n \n-    private static void assertEventsStillPresentForTimestamps(\n-            TimestampMapping timestampMapping,\n-            ClientLogEvents events) {\n-        events.events().firstVersion().ifPresent(\n-                minVersion -> assertTrue(minVersion <= timestampMapping.minVersion().version(),\n-                        \"Earliest version in the timestamp mapping has already been deleted from the event cache\"));\n-        events.events().lastVersion().ifPresent(\n-                maxVersion -> assertTrue(maxVersion >= timestampMapping.maxVersion().version(),\n-                        \"Latest version in the timestamp mapping has already been deleted from the event cache\"));\n+    private static void assertEventsContainRangeOfVersions(Range<Long> versionRange, ClientLogEvents events) {\n+        events.events().versionRange().ifPresent(\n+                range -> assertTrue(range.encloses(versionRange), \"Events do not enclose the required versions\"));\n     }\n \n     private static final class LockEventVisitor implements LockWatchEvent.Visitor<Set<LockDescriptor>> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODEzNjczNQ==", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498136735", "bodyText": "drive-by rename for clarity", "author": "Jolyon-S", "createdAt": "2020-10-01T10:17:45Z", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/VersionedEventStore.java", "diffHunk": "@@ -44,14 +51,15 @@\n                 .orElseGet(ImmutableList::of);\n     }\n \n-    LockWatchEvents getAndRemoveElementsUpToExclusive(long endVersion) {\n-        Set<Map.Entry<Long, LockWatchEvent>> elementsUpToVersion = eventMap.headMap(endVersion).entrySet();\n-        LockWatchEvents events = LockWatchEvents.create(elementsUpToVersion);\n-        elementsUpToVersion.clear();\n-        return events;\n+    LockWatchEvents retentionEvents() {\n+        int numToRetention = Math.max(0, eventMap.size() - maxEvents);\n+        LockWatchEvents.Builder builder = new LockWatchEvents.Builder();\n+        Iterators.consumingIterator(Iterators.limit(eventMap.entrySet().iterator(), numToRetention))\n+                .forEachRemaining(entry -> builder.addEvents(entry.getValue()));\n+        return builder.build();\n     }\n \n-    boolean contains(long key) {\n+    boolean containsEntriesLessThanOrEqualTo(long key) {", "originalCommit": "75c97cd6ddc944447294262d38fa563f196a550a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d03124a6b16c8dbf940e732aa47ab408bac38333", "chunk": "diff --git a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/VersionedEventStore.java b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/VersionedEventStore.java\nindex 5dd855d8eb..759aeda7de 100644\n--- a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/VersionedEventStore.java\n+++ b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/VersionedEventStore.java\n\n@@ -59,7 +59,7 @@ final class VersionedEventStore {\n         return builder.build();\n     }\n \n-    boolean containsEntriesLessThanOrEqualTo(long key) {\n+    boolean containsEntryLessThanOrEqualTo(long key) {\n         return eventMap.floorKey(key) != null;\n     }\n \n"}}, {"oid": "d03124a6b16c8dbf940e732aa47ab408bac38333", "url": "https://github.com/palantir/atlasdb/commit/d03124a6b16c8dbf940e732aa47ab408bac38333", "message": "further tidy", "committedDate": "2020-10-01T10:22:59Z", "type": "commit"}, {"oid": "3e5d37d5e1695f806855e5e145b45800baa8af44", "url": "https://github.com/palantir/atlasdb/commit/3e5d37d5e1695f806855e5e145b45800baa8af44", "message": "Add generated changelog entries", "committedDate": "2020-10-01T10:22:59Z", "type": "commit"}, {"oid": "e2d5e96f87b24b01d7969b5fa1c46595078d4bf7", "url": "https://github.com/palantir/atlasdb/commit/e2d5e96f87b24b01d7969b5fa1c46595078d4bf7", "message": "Range refactor", "committedDate": "2020-10-01T10:44:55Z", "type": "commit"}, {"oid": "4def152c8de2ba6cde33f650d5ffc730ccee4631", "url": "https://github.com/palantir/atlasdb/commit/4def152c8de2ba6cde33f650d5ffc730ccee4631", "message": "Merge branch 'lw-max-size-retention' of github.com:palantir/atlasdb into lw-max-size-retention", "committedDate": "2020-10-01T10:45:16Z", "type": "commit"}, {"oid": "2ac87f2186a0c3820a114e978b247847be91e021", "url": "https://github.com/palantir/atlasdb/commit/2ac87f2186a0c3820a114e978b247847be91e021", "message": "add leader check", "committedDate": "2020-10-01T10:48:28Z", "type": "commit"}, {"oid": "4315e2a255f93765156fec77f59f74869b71e61b", "url": "https://github.com/palantir/atlasdb/commit/4315e2a255f93765156fec77f59f74869b71e61b", "message": "add extra test for commit update too", "committedDate": "2020-10-01T10:55:49Z", "type": "commit"}, {"oid": "fc571ca1e351533cfda12e6c8db04994198af6d5", "url": "https://github.com/palantir/atlasdb/commit/fc571ca1e351533cfda12e6c8db04994198af6d5", "message": "fix spaghetti", "committedDate": "2020-10-01T10:58:32Z", "type": "commit"}, {"oid": "169316f2143eab9fab3b5e325afff8ffec951095", "url": "https://github.com/palantir/atlasdb/commit/169316f2143eab9fab3b5e325afff8ffec951095", "message": "a few minor tweaks", "committedDate": "2020-10-01T12:57:21Z", "type": "commit"}, {"oid": "c0478b3f36399702adc0bda344e742ca19f564eb", "url": "https://github.com/palantir/atlasdb/commit/c0478b3f36399702adc0bda344e742ca19f564eb", "message": "bad copy-pasta", "committedDate": "2020-10-01T13:14:15Z", "type": "commit"}, {"oid": "7d2ac05ac1a60f8fdbbcd4c274216ba597dcd7a5", "url": "https://github.com/palantir/atlasdb/commit/7d2ac05ac1a60f8fdbbcd4c274216ba597dcd7a5", "message": "reorder a whole load of things to fix some bugs", "committedDate": "2020-10-01T14:40:47Z", "type": "commit"}, {"oid": "cc482b1c07802c6fce79d7f7b2c5986b943407c5", "url": "https://github.com/palantir/atlasdb/commit/cc482b1c07802c6fce79d7f7b2c5986b943407c5", "message": "minor change to comment", "committedDate": "2020-10-01T14:51:45Z", "type": "commit"}, {"oid": "6f3ce13222f8887a9201502548beb273df63d714", "url": "https://github.com/palantir/atlasdb/commit/6f3ce13222f8887a9201502548beb273df63d714", "message": "ugh puppycrawl", "committedDate": "2020-10-01T15:05:44Z", "type": "commit"}, {"oid": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693", "url": "https://github.com/palantir/atlasdb/commit/19141f3d21ffdc8c82bfd48cfc7a96f95daaf693", "message": "resolve yet another sneaky edge case", "committedDate": "2020-10-02T09:11:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc2NzMwNQ==", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498767305", "bodyText": "Feels impossible? Or if you think it's possible, this should really live in the LockWatchEvents?", "author": "jkozlowski", "createdAt": "2020-10-02T11:33:51Z", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLockWatchSnapshot.java", "diffHunk": "@@ -61,12 +62,16 @@ private ClientLockWatchSnapshot() {\n     }\n \n     void processEvents(LockWatchEvents events, UUID versionId) {\n-        if (!events.latestSequence().isPresent()) {\n+        if (events.events().isEmpty()) {\n             return;\n         }\n \n+        Preconditions.checkArgument(events.versionRange().isPresent(),", "originalCommit": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgxMjU0MQ==", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498812541", "bodyText": "Should be impossible, I just don't like doing Optional.get() blindly. I've moved to LockWatchEvents.", "author": "Jolyon-S", "createdAt": "2020-10-02T13:13:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc2NzMwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "84409107d4ca7f7bbff0d4d1df240b3062587cec", "chunk": "diff --git a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLockWatchSnapshot.java b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLockWatchSnapshot.java\nindex 3ea360c7f7..870a1d9c3b 100644\n--- a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLockWatchSnapshot.java\n+++ b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLockWatchSnapshot.java\n\n@@ -66,9 +66,6 @@ final class ClientLockWatchSnapshot {\n             return;\n         }\n \n-        Preconditions.checkArgument(events.versionRange().isPresent(),\n-                \"Cannot have an empty range of versions with non-zero number of events\");\n-\n         events.events().forEach(event -> event.accept(visitor));\n         snapshotVersion = Optional.of(\n                 LockWatchVersion.of(versionId, events.versionRange().map(Range::upperEndpoint).get()));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc3MjEwNA==", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498772104", "bodyText": "I have a pretty strong opinion that your datastructures should not let themselves be instantiated in a way that makes them inconsistent. I think there's a pretty strong assumption everywhere that startTsToSequence should be contained within LockWatchEvents.\nSo I suggest moving the validation you have in LockWatchEventCacheImpl#getUpdateForTransactions to here.", "author": "jkozlowski", "createdAt": "2020-10-02T11:46:19Z", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLogEvents.java", "diffHunk": "@@ -16,27 +16,25 @@\n \n package com.palantir.atlasdb.keyvalue.api.watch;\n \n-import java.util.List;\n import java.util.Map;\n \n import org.immutables.value.Value;\n \n import com.palantir.lock.watch.ImmutableTransactionsLockWatchUpdate;\n-import com.palantir.lock.watch.LockWatchEvent;\n import com.palantir.lock.watch.LockWatchVersion;\n import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n \n @Value.Immutable\n interface ClientLogEvents {\n \n-    List<LockWatchEvent> events();\n+    LockWatchEvents events();\n \n     boolean clearCache();\n \n     default TransactionsLockWatchUpdate map(Map<Long, LockWatchVersion> timestampMap) {\n         return ImmutableTransactionsLockWatchUpdate.builder()\n                 .startTsToSequence(timestampMap)\n-                .events(events())\n+                .events(events().events())", "originalCommit": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4Mjc2Ng==", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498782766", "bodyText": "Ok, I re-read the changes you actually added and it seems like there's obviously the case when the client is up-to-date, therefore the update is empty. I would actually suggest that we add the \"latestVersion\" field to both TransactionsLockWatchUpdate and ClientLogEvents, and basically do this validation in the datastructures. What do you think?", "author": "jkozlowski", "createdAt": "2020-10-02T12:12:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc3MjEwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg2MDU3MQ==", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498860571", "bodyText": "Done", "author": "Jolyon-S", "createdAt": "2020-10-02T14:34:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc3MjEwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg2MDczMg==", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498860732", "bodyText": "(somewhat - I didn't add latestVersion to TLWU).", "author": "Jolyon-S", "createdAt": "2020-10-02T14:34:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc3MjEwNA=="}], "type": "inlineReview", "revised_code": {"commit": "20479967726ff1c550ae306c383fa6e797f61b37", "chunk": "diff --git a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLogEvents.java b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLogEvents.java\nindex 334b4cd36c..e5c90d6b47 100644\n--- a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLogEvents.java\n+++ b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLogEvents.java\n\n@@ -31,7 +31,7 @@ interface ClientLogEvents {\n \n     boolean clearCache();\n \n-    default TransactionsLockWatchUpdate map(Map<Long, LockWatchVersion> timestampMap) {\n+    default TransactionsLockWatchUpdate toTransactionsLockWatchUpdate(Map<Long, LockWatchVersion> timestampMap) {\n         return ImmutableTransactionsLockWatchUpdate.builder()\n                 .startTsToSequence(timestampMap)\n                 .events(events().events())\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc3MjY4OQ==", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498772689", "bodyText": "While we're here, I missed this in one of the original reviews: this should not be called #map: map traditionally is a functor method, that transforms a value of some type T, but the T stays the same in the transformation. I would suggest something like #toTransactionsLockWatchUpdate or something else, but map is pretty misleading.", "author": "jkozlowski", "createdAt": "2020-10-02T11:47:47Z", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLogEvents.java", "diffHunk": "@@ -16,27 +16,25 @@\n \n package com.palantir.atlasdb.keyvalue.api.watch;\n \n-import java.util.List;\n import java.util.Map;\n \n import org.immutables.value.Value;\n \n import com.palantir.lock.watch.ImmutableTransactionsLockWatchUpdate;\n-import com.palantir.lock.watch.LockWatchEvent;\n import com.palantir.lock.watch.LockWatchVersion;\n import com.palantir.lock.watch.TransactionsLockWatchUpdate;\n \n @Value.Immutable\n interface ClientLogEvents {\n \n-    List<LockWatchEvent> events();\n+    LockWatchEvents events();\n \n     boolean clearCache();\n \n     default TransactionsLockWatchUpdate map(Map<Long, LockWatchVersion> timestampMap) {", "originalCommit": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgxNTExMQ==", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498815111", "bodyText": "Makes sense. Done", "author": "Jolyon-S", "createdAt": "2020-10-02T13:18:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc3MjY4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "20479967726ff1c550ae306c383fa6e797f61b37", "chunk": "diff --git a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLogEvents.java b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLogEvents.java\nindex 334b4cd36c..e5c90d6b47 100644\n--- a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLogEvents.java\n+++ b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/ClientLogEvents.java\n\n@@ -31,7 +31,7 @@ interface ClientLogEvents {\n \n     boolean clearCache();\n \n-    default TransactionsLockWatchUpdate map(Map<Long, LockWatchVersion> timestampMap) {\n+    default TransactionsLockWatchUpdate toTransactionsLockWatchUpdate(Map<Long, LockWatchVersion> timestampMap) {\n         return ImmutableTransactionsLockWatchUpdate.builder()\n                 .startTsToSequence(timestampMap)\n                 .events(events().events())\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc3NzQ3MQ==", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498777471", "bodyText": "Not convinced on this comment. Just say this should be the same and provide a link to the timelock class.", "author": "jkozlowski", "createdAt": "2020-10-02T11:59:35Z", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -53,12 +50,18 @@\n  * in concurrency issues and inconsistency in the cache state.\n  */\n public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n+    /**\n+     * This value should be at least as large as the max size in LockEventLogImpl. If it is smaller, it is possible that", "originalCommit": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgxNTU1NQ==", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498815555", "bodyText": "I'll reference the timelock class informally, but you can't link it here since this package does not know about it (I'd already tried this before).", "author": "Jolyon-S", "createdAt": "2020-10-02T13:18:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc3NzQ3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "4163d9a2c5aea02cff8271f56f19165dec3395a6", "chunk": "diff --git a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImpl.java b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImpl.java\nindex cfd537e96b..c3ba1530df 100644\n--- a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImpl.java\n+++ b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImpl.java\n\n@@ -50,10 +50,7 @@ import com.palantir.logsafe.Preconditions;\n  * in concurrency issues and inconsistency in the cache state.\n  */\n public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n-    /**\n-     * This value should be at least as large as the max size in LockEventLogImpl. If it is smaller, it is possible that\n-     * new events are immediately deleted.\n-     */\n+    // This value should be the same as in TimeLock's LockEventLogImpl.\n     private static final int MAX_EVENTS = 1000;\n \n     private final LockWatchEventLog eventLog;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4MzU5OA==", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498783598", "bodyText": "Same here: I feel like the validation again should be done in the CommitUpdate.", "author": "jkozlowski", "createdAt": "2020-10-02T12:14:13Z", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImpl.java", "diffHunk": "@@ -106,42 +108,55 @@ public CommitUpdate getCommitUpdate(long startTs) {\n             return ImmutableInvalidateAll.builder().build();\n         }\n \n-        return createCommitUpdate(commitInfo, update.events());\n+        // We don't mind if the exact version is not present, as we are only interested in the events **since** the\n+        // transaction started.\n+        assertEventsContainRangeOfVersions(\n+                Range.closed(startVersion.get().version(), commitInfo.commitVersion().version()),\n+                update,\n+                true);\n+\n+        return createCommitUpdate(commitInfo, update.events().events());", "originalCommit": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "20479967726ff1c550ae306c383fa6e797f61b37", "chunk": "diff --git a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImpl.java b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImpl.java\nindex cfd537e96b..468cd694ed 100644\n--- a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImpl.java\n+++ b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheImpl.java\n\n@@ -140,7 +140,7 @@ public final class LockWatchEventCacheImpl implements LockWatchEventCache {\n                 events,\n                 offsetStartVersion);\n \n-        return events.map(timestampMapping.timestampMapping());\n+        return events.toTransactionsLockWatchUpdate(timestampMapping.timestampMapping());\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4NTQ2OA==", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498785468", "bodyText": "I have a cute one:\ntimestampMapping().values().stream().mapToLong(\n                LockWatchVersion::version).summaryStatistics()\n\nshould get you sorted?", "author": "jkozlowski", "createdAt": "2020-10-02T12:18:26Z", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/TimestampMapping.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.collect.Range;\n+import com.palantir.lock.watch.LockWatchVersion;\n+import com.palantir.logsafe.Preconditions;\n+\n+@Value.Immutable\n+interface TimestampMapping {\n+    Map<Long, LockWatchVersion> timestampMapping();\n+\n+    @Value.Derived\n+    default Range<Long> versionRange() {\n+        Optional<Long> firstVersion = timestampMapping()", "originalCommit": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgxNzExOQ==", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498817119", "bodyText": "That is a cute one. Nice!", "author": "Jolyon-S", "createdAt": "2020-10-02T13:21:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4NTQ2OA=="}], "type": "inlineReview", "revised_code": {"commit": "4163d9a2c5aea02cff8271f56f19165dec3395a6", "chunk": "diff --git a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/TimestampMapping.java b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/TimestampMapping.java\nindex ce379fb221..0b70fbe856 100644\n--- a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/TimestampMapping.java\n+++ b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/TimestampMapping.java\n\n@@ -16,6 +16,7 @@\n \n package com.palantir.atlasdb.keyvalue.api.watch;\n \n+import java.util.LongSummaryStatistics;\n import java.util.Map;\n import java.util.Optional;\n import java.util.UUID;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4NjEyNg==", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498786126", "bodyText": "You're doing the empty check twice, perhaps should be a @Value.Check.", "author": "jkozlowski", "createdAt": "2020-10-02T12:19:59Z", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/TimestampMapping.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.collect.Range;\n+import com.palantir.lock.watch.LockWatchVersion;\n+import com.palantir.logsafe.Preconditions;\n+\n+@Value.Immutable\n+interface TimestampMapping {\n+    Map<Long, LockWatchVersion> timestampMapping();\n+\n+    @Value.Derived\n+    default Range<Long> versionRange() {\n+        Optional<Long> firstVersion = timestampMapping()\n+                .values()\n+                .stream()\n+                .map(LockWatchVersion::version)\n+                .min(Long::compareTo);\n+        Optional<Long> lastVersion = timestampMapping()\n+                .values()\n+                .stream()\n+                .map(LockWatchVersion::version)\n+                .max(Long::compareTo);\n+\n+        Preconditions.checkState(firstVersion.isPresent() && lastVersion.isPresent(),\n+                \"Cannot compute timestamp mapping for empty map of timestamps\");\n+\n+        return Range.closed(firstVersion.get(), lastVersion.get());\n+    }\n+\n+    @Value.Derived\n+    default UUID leader() {\n+        Optional<UUID> leader = timestampMapping()\n+                .values()\n+                .stream()\n+                .findAny()\n+                .map(LockWatchVersion::id);\n+\n+        Preconditions.checkState(leader.isPresent(),", "originalCommit": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgxODg4OQ==", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498818889", "bodyText": "I'll extract the empty check out, but I really don't like doing unchecked Optional.get() calls!", "author": "Jolyon-S", "createdAt": "2020-10-02T13:24:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4NjEyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgyMDIwMQ==", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498820201", "bodyText": "Actually, using .distinct makes this unnecessary anyway. Nice!", "author": "Jolyon-S", "createdAt": "2020-10-02T13:27:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4NjEyNg=="}], "type": "inlineReview", "revised_code": {"commit": "4163d9a2c5aea02cff8271f56f19165dec3395a6", "chunk": "diff --git a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/TimestampMapping.java b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/TimestampMapping.java\nindex ce379fb221..0b70fbe856 100644\n--- a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/TimestampMapping.java\n+++ b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/TimestampMapping.java\n\n@@ -16,6 +16,7 @@\n \n package com.palantir.atlasdb.keyvalue.api.watch;\n \n+import java.util.LongSummaryStatistics;\n import java.util.Map;\n import java.util.Optional;\n import java.util.UUID;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4ODg3Nw==", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498788877", "bodyText": "I wonder if using #distinct and collecting and checking only single value is fine? You don't expect this ever fire, it's a bug, so shouldn't collect a huge amount of values.", "author": "jkozlowski", "createdAt": "2020-10-02T12:26:08Z", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/TimestampMapping.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.api.watch;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.immutables.value.Value;\n+\n+import com.google.common.collect.Range;\n+import com.palantir.lock.watch.LockWatchVersion;\n+import com.palantir.logsafe.Preconditions;\n+\n+@Value.Immutable\n+interface TimestampMapping {\n+    Map<Long, LockWatchVersion> timestampMapping();\n+\n+    @Value.Derived\n+    default Range<Long> versionRange() {\n+        Optional<Long> firstVersion = timestampMapping()\n+                .values()\n+                .stream()\n+                .map(LockWatchVersion::version)\n+                .min(Long::compareTo);\n+        Optional<Long> lastVersion = timestampMapping()\n+                .values()\n+                .stream()\n+                .map(LockWatchVersion::version)\n+                .max(Long::compareTo);\n+\n+        Preconditions.checkState(firstVersion.isPresent() && lastVersion.isPresent(),\n+                \"Cannot compute timestamp mapping for empty map of timestamps\");\n+\n+        return Range.closed(firstVersion.get(), lastVersion.get());\n+    }\n+\n+    @Value.Derived\n+    default UUID leader() {\n+        Optional<UUID> leader = timestampMapping()", "originalCommit": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4OTUxMQ==", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498789511", "bodyText": "aaactually, are we sure this is disallowed by atlas? I know we check for this in atlasdb-proxy and discard, but I think because Atlas can end up running multiple queries for a particular batch, this is actually possible?", "author": "jkozlowski", "createdAt": "2020-10-02T12:27:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4ODg3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgwMDQwNw==", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498800407", "bodyText": "Hmm, you maybe right, I think we won't even get to this point when they're different, because the cache itself will clear the values? So the lookup for lock watch versions will fail before this.\nNice addition!", "author": "jkozlowski", "createdAt": "2020-10-02T12:50:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4ODg3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgyMTUzNw==", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498821537", "bodyText": "In any case, we don't want to return multiple leaders, because it will just cause those transactions to conflict further down the line anyway - so at best, this would be a retryable exception.\nHowever, as you note, I don't think we should ever hit this, as a new leader will wipe all previous state, including current timestamp mappings (so we won't be able to get it from the cache - if timestamp versions are not present because of this kind of thing, we retry anyway).", "author": "Jolyon-S", "createdAt": "2020-10-02T13:29:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4ODg3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "4163d9a2c5aea02cff8271f56f19165dec3395a6", "chunk": "diff --git a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/TimestampMapping.java b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/TimestampMapping.java\nindex ce379fb221..0b70fbe856 100644\n--- a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/TimestampMapping.java\n+++ b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/TimestampMapping.java\n\n@@ -16,6 +16,7 @@\n \n package com.palantir.atlasdb.keyvalue.api.watch;\n \n+import java.util.LongSummaryStatistics;\n import java.util.Map;\n import java.util.Optional;\n import java.util.UUID;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc5MjU4NA==", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498792584", "bodyText": "Would it be much of change in tests to change VersionedEventStore#putAll to take LockWatchEvents?", "author": "jkozlowski", "createdAt": "2020-10-02T12:34:04Z", "path": "atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventLog.java", "diffHunk": "@@ -133,29 +132,29 @@ private void processSuccess(LockWatchStateUpdate.Success success) {\n         }\n \n         if (success.lastKnownVersion() > latestVersion.get().version()) {\n-            assertEventsAreContiguousAndNoEventsMissing(success.events());\n+            assertNoEventsAreMissing(success.events());\n             latestVersion = Optional.of(LockWatchVersion.of(success.logId(), eventStore.putAll(success.events())));", "originalCommit": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgyNjI2Nw==", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498826267", "bodyText": "Not particularly - changed.", "author": "Jolyon-S", "createdAt": "2020-10-02T13:37:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc5MjU4NA=="}], "type": "inlineReview", "revised_code": {"commit": "de292aa752e13a55998562907d2c6e2884b42dff", "chunk": "diff --git a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventLog.java b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventLog.java\nindex 9006936711..21b9d21ab6 100644\n--- a/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventLog.java\n+++ b/atlasdb-impl-shared/src/main/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventLog.java\n\n@@ -132,20 +131,19 @@ final class LockWatchEventLog {\n         }\n \n         if (success.lastKnownVersion() > latestVersion.get().version()) {\n-            assertNoEventsAreMissing(success.events());\n-            latestVersion = Optional.of(LockWatchVersion.of(success.logId(), eventStore.putAll(success.events())));\n+            LockWatchEvents events = new LockWatchEvents.Builder()\n+                    .addAllEvents(success.events())\n+                    .build();\n+            assertNoEventsAreMissing(events);\n+            latestVersion = Optional.of(LockWatchVersion.of(success.logId(), eventStore.putAll(events)));\n         }\n     }\n \n-    private void assertNoEventsAreMissing(List<LockWatchEvent> eventsList) {\n-        if (eventsList.isEmpty()) {\n+    private void assertNoEventsAreMissing(LockWatchEvents events) {\n+        if (events.events().isEmpty()) {\n             return;\n         }\n \n-        LockWatchEvents events = new LockWatchEvents.Builder()\n-                .addAllEvents(eventsList)\n-                .build();\n-\n         if (latestVersion.isPresent()) {\n             Preconditions.checkArgument(events.versionRange().isPresent(),\n                     \"First element not preset in list of events\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc5NDk5Ng==", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498794996", "bodyText": "This feels like more of a test of LockWatchEvents? I'd remove it, since you're checking the whole set of events in the line above.", "author": "jkozlowski", "createdAt": "2020-10-02T12:39:13Z", "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/VersionedEventStoreTest.java", "diffHunk": "@@ -39,23 +40,24 @@\n \n     @Before\n     public void before() {\n-        eventStore = new VersionedEventStore();\n+        eventStore = new VersionedEventStore(2);\n     }\n \n     @Test\n-    public void getAndRemoveElementsUpToExclusiveDoesNotIncludeEndVersion() {\n+    public void getAndRemoveElementsRemovesOldestElements() {\n         eventStore.putAll(ImmutableList.of(EVENT_1, EVENT_2, EVENT_3));\n-        LockWatchEvents events = eventStore.getAndRemoveElementsUpToExclusive(3L);\n+        eventStore.putAll(ImmutableList.of(EVENT_4));\n+        LockWatchEvents events = eventStore.retentionEvents();\n         assertThat(events.events().stream().map(LockWatchEvent::sequence)).containsExactly(1L, 2L);\n-        assertThat(events.latestSequence()).hasValue(2L);\n+        assertThat(events.versionRange().map(Range::upperEndpoint)).hasValue(2L);", "originalCommit": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgyNjgyNw==", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498826827", "bodyText": "That's true - I was just porting it over from the previous, but actually you're right in that it is redundant.", "author": "Jolyon-S", "createdAt": "2020-10-02T13:38:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc5NDk5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "de292aa752e13a55998562907d2c6e2884b42dff", "chunk": "diff --git a/atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/VersionedEventStoreTest.java b/atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/VersionedEventStoreTest.java\nindex 160a70f9f8..135c88f0b9 100644\n--- a/atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/VersionedEventStoreTest.java\n+++ b/atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/VersionedEventStoreTest.java\n\n@@ -45,31 +48,36 @@ public final class VersionedEventStoreTest {\n \n     @Test\n     public void getAndRemoveElementsRemovesOldestElements() {\n-        eventStore.putAll(ImmutableList.of(EVENT_1, EVENT_2, EVENT_3));\n-        eventStore.putAll(ImmutableList.of(EVENT_4));\n+        eventStore.putAll(makeEvents(EVENT_1, EVENT_2, EVENT_3));\n+        eventStore.putAll(makeEvents(EVENT_4));\n         LockWatchEvents events = eventStore.retentionEvents();\n         assertThat(events.events().stream().map(LockWatchEvent::sequence)).containsExactly(1L, 2L);\n-        assertThat(events.versionRange().map(Range::upperEndpoint)).hasValue(2L);\n         assertThat(eventStore.getStateForTesting().eventMap().firstKey()).isEqualTo(3L);\n     }\n \n     @Test\n     public void containsReturnsTrueForValuesLargerThanFirstKey() {\n-        eventStore.putAll(ImmutableList.of(EVENT_4));\n+        eventStore.putAll(makeEvents(EVENT_4));\n         assertThat(eventStore.containsEntryLessThanOrEqualTo(1L)).isFalse();\n         assertThat(eventStore.containsEntryLessThanOrEqualTo(5L)).isTrue();\n     }\n \n     @Test\n     public void getEventsBetweenVersionsReturnsInclusiveOnBounds() {\n-        eventStore.putAll(ImmutableList.of(EVENT_1, EVENT_2, EVENT_3, EVENT_4));\n+        eventStore.putAll(makeEvents(EVENT_1, EVENT_2, EVENT_3, EVENT_4));\n         assertThat(eventStore.getEventsBetweenVersionsInclusive(Optional.of(2L), 3L)).containsExactly(EVENT_2, EVENT_3);\n     }\n \n     @Test\n     public void getEventsBetweenVersionsStartsFromFirstKeyIfNotSpecified() {\n-        eventStore.putAll(ImmutableList.of(EVENT_1, EVENT_2, EVENT_3, EVENT_4));\n+        eventStore.putAll(makeEvents(EVENT_1, EVENT_2, EVENT_3, EVENT_4));\n         assertThat(eventStore.getEventsBetweenVersionsInclusive(Optional.empty(), 3L))\n                 .containsExactly(EVENT_1, EVENT_2, EVENT_3);\n     }\n+\n+    private LockWatchEvents makeEvents(LockWatchEvent... events) {\n+        return new LockWatchEvents.Builder()\n+                .addEvents(events)\n+                .build();\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgwNDQ4Nw==", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498804487", "bodyText": "Perhaps you want eventCache = createEventCache(5); here, since most tests don't want any retention to happen?", "author": "jkozlowski", "createdAt": "2020-10-02T12:58:12Z", "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "diffHunk": "@@ -116,7 +116,7 @@ boolean isDev() {\n \n     @Before\n     public void before() {\n-        eventCache = new LockWatchEventCacheImpl(LockWatchEventLog.create());\n+        eventCache = createEventCache(3);", "originalCommit": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgyODI1NA==", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498828254", "bodyText": "Reasonable - done.", "author": "Jolyon-S", "createdAt": "2020-10-02T13:40:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgwNDQ4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "de292aa752e13a55998562907d2c6e2884b42dff", "chunk": "diff --git a/atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java b/atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java\nindex c0a986001f..6eebd5b2f1 100644\n--- a/atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java\n+++ b/atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java\n\n@@ -116,7 +116,7 @@ public class LockWatchEventCacheIntegrationTest {\n \n     @Before\n     public void before() {\n-        eventCache = createEventCache(3);\n+        eventCache = createEventCache(5);\n         part = 1;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgwNDkzNg==", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498804936", "bodyText": "I'm assuming this is because of no-compression and this will change in next PR.", "author": "jkozlowski", "createdAt": "2020-10-02T12:59:03Z", "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "diffHunk": "@@ -240,7 +255,9 @@ public void getEventsForTransactionsReturnsSnapshotWithOldEvents() {\n                 ImmutableMap.of(16L, LockWatchVersion.of(LEADER, 7L)));\n         assertThat(results.events()).containsExactly(\n                 LockWatchCreatedEvent.builder(ImmutableSet.of(REFERENCE),\n-                        ImmutableSet.of(DESCRIPTOR, DESCRIPTOR_3)).build(6L),\n+                        ImmutableSet.of(DESCRIPTOR, DESCRIPTOR_2)).build(4L),", "originalCommit": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgyODU2OA==", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498828568", "bodyText": "No compression\nRetention change (i.e. keeps some values around).", "author": "Jolyon-S", "createdAt": "2020-10-02T13:41:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgwNDkzNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgwNzkzNg==", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498807936", "bodyText": "I'm assuming you just wanted to make this test do a bit more by adding the extra timestamp to lookup?", "author": "jkozlowski", "createdAt": "2020-10-02T13:04:54Z", "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "diffHunk": "@@ -287,11 +304,13 @@ public void nonContiguousEventsThrows() {\n \n     @Test\n     public void upToDateClientDoesNotThrow() {\n+        eventCache = createEventCache(6);\n         setupInitialState();\n         eventCache.processStartTransactionsUpdate(TIMESTAMPS_2, SUCCESS);\n-        assertThat(eventCache.getUpdateForTransactions(\n-                TIMESTAMPS,\n-                Optional.of(LockWatchVersion.of(LEADER, SUCCESS_VERSION))).events()).isEmpty();\n+        assertThatCode(() -> eventCache.getUpdateForTransactions(\n+                ImmutableSet.of(START_TS, 16L),", "originalCommit": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgyOTE2OA==", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498829168", "bodyText": "Yes", "author": "Jolyon-S", "createdAt": "2020-10-02T13:42:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgwNzkzNg=="}], "type": "inlineReview", "revised_code": {"commit": "de292aa752e13a55998562907d2c6e2884b42dff", "chunk": "diff --git a/atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java b/atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java\nindex c0a986001f..6eebd5b2f1 100644\n--- a/atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java\n+++ b/atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java\n\n@@ -304,7 +301,7 @@ public class LockWatchEventCacheIntegrationTest {\n \n     @Test\n     public void upToDateClientDoesNotThrow() {\n-        eventCache = createEventCache(6);\n+        eventCache = createEventCache(5);\n         setupInitialState();\n         eventCache.processStartTransactionsUpdate(TIMESTAMPS_2, SUCCESS);\n         assertThatCode(() -> eventCache.getUpdateForTransactions(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgwODU5Ng==", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498808596", "bodyText": "Hmm, I feel like I'd rather keep it as an assertion, and maybe rename the test? And if you add the \"latestVersion\" to TransactionUpdate that can tighten this test as well?", "author": "jkozlowski", "createdAt": "2020-10-02T13:06:02Z", "path": "atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java", "diffHunk": "@@ -287,11 +304,13 @@ public void nonContiguousEventsThrows() {\n \n     @Test\n     public void upToDateClientDoesNotThrow() {\n+        eventCache = createEventCache(6);\n         setupInitialState();\n         eventCache.processStartTransactionsUpdate(TIMESTAMPS_2, SUCCESS);\n-        assertThat(eventCache.getUpdateForTransactions(\n-                TIMESTAMPS,\n-                Optional.of(LockWatchVersion.of(LEADER, SUCCESS_VERSION))).events()).isEmpty();\n+        assertThatCode(() -> eventCache.getUpdateForTransactions(\n+                ImmutableSet.of(START_TS, 16L),\n+                Optional.of(LockWatchVersion.of(LEADER, 3L))))", "originalCommit": "19141f3d21ffdc8c82bfd48cfc7a96f95daaf693", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgzMDAzNQ==", "url": "https://github.com/palantir/atlasdb/pull/5012#discussion_r498830035", "bodyText": "I've actually changed the test:\n\nbefore, it was testing that a client that is on the exact same version as the cache will not throw\nnow, it's testing that a client that is on the same version as the transaction (but not the cache) will not throw.\n\nIt'd probably be best here if I make sure we have both of those tests.", "author": "Jolyon-S", "createdAt": "2020-10-02T13:43:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgwODU5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "de292aa752e13a55998562907d2c6e2884b42dff", "chunk": "diff --git a/atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java b/atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java\nindex c0a986001f..6eebd5b2f1 100644\n--- a/atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java\n+++ b/atlasdb-impl-shared/src/test/java/com/palantir/atlasdb/keyvalue/api/watch/LockWatchEventCacheIntegrationTest.java\n\n@@ -304,7 +301,7 @@ public class LockWatchEventCacheIntegrationTest {\n \n     @Test\n     public void upToDateClientDoesNotThrow() {\n-        eventCache = createEventCache(6);\n+        eventCache = createEventCache(5);\n         setupInitialState();\n         eventCache.processStartTransactionsUpdate(TIMESTAMPS_2, SUCCESS);\n         assertThatCode(() -> eventCache.getUpdateForTransactions(\n"}}, {"oid": "84409107d4ca7f7bbff0d4d1df240b3062587cec", "url": "https://github.com/palantir/atlasdb/commit/84409107d4ca7f7bbff0d4d1df240b3062587cec", "message": "Move version range present check to lock watch events", "committedDate": "2020-10-02T13:13:41Z", "type": "commit"}, {"oid": "20479967726ff1c550ae306c383fa6e797f61b37", "url": "https://github.com/palantir/atlasdb/commit/20479967726ff1c550ae306c383fa6e797f61b37", "message": "rename method from map to toTransactionsLockWatchUpdate", "committedDate": "2020-10-02T13:18:13Z", "type": "commit"}, {"oid": "4163d9a2c5aea02cff8271f56f19165dec3395a6", "url": "https://github.com/palantir/atlasdb/commit/4163d9a2c5aea02cff8271f56f19165dec3395a6", "message": "Condense to use summary stats", "committedDate": "2020-10-02T13:21:55Z", "type": "commit"}, {"oid": "cb955187bd7d6e26f2377ef65b4ffebb38986a99", "url": "https://github.com/palantir/atlasdb/commit/cb955187bd7d6e26f2377ef65b4ffebb38986a99", "message": "Extract check for non-empty map", "committedDate": "2020-10-02T13:24:54Z", "type": "commit"}, {"oid": "de292aa752e13a55998562907d2c6e2884b42dff", "url": "https://github.com/palantir/atlasdb/commit/de292aa752e13a55998562907d2c6e2884b42dff", "message": "Next wave of comments", "committedDate": "2020-10-02T13:40:53Z", "type": "commit"}, {"oid": "67020fda47d63acbfdffd5130a6bceb43bf5b19e", "url": "https://github.com/palantir/atlasdb/commit/67020fda47d63acbfdffd5130a6bceb43bf5b19e", "message": "Fix test", "committedDate": "2020-10-02T13:47:19Z", "type": "commit"}, {"oid": "3790bdc7292576071a0bb920b26a2ea222f599ee", "url": "https://github.com/palantir/atlasdb/commit/3790bdc7292576071a0bb920b26a2ea222f599ee", "message": "Finally", "committedDate": "2020-10-02T14:33:14Z", "type": "commit"}, {"oid": "c87a861857e63282dd3239380d3eda5dd4bfb575", "url": "https://github.com/palantir/atlasdb/commit/c87a861857e63282dd3239380d3eda5dd4bfb575", "message": "Last tidy", "committedDate": "2020-10-02T14:41:57Z", "type": "commit"}, {"oid": "d1ec51869dc9176c48c3e8fa8a11286526eb2288", "url": "https://github.com/palantir/atlasdb/commit/d1ec51869dc9176c48c3e8fa8a11286526eb2288", "message": "Remove unused imports", "committedDate": "2020-10-02T14:54:07Z", "type": "commit"}]}