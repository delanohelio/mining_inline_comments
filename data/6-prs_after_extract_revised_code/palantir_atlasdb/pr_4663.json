{"pr_number": 4663, "pr_title": "[Timelock Partitioning] Part 55: Takeover primitive", "pr_createdAt": "2020-03-23T12:33:01Z", "pr_url": "https://github.com/palantir/atlasdb/pull/4663", "timeline": [{"oid": "6f2d218393f51d5fdcd9c603065ad7364b28d44c", "url": "https://github.com/palantir/atlasdb/commit/6f2d218393f51d5fdcd9c603065ad7364b28d44c", "message": "Add ability to take over leadership via an endpoint.", "committedDate": "2020-03-23T12:23:19Z", "type": "commit"}, {"oid": "a4b0e7c54ad5f21b3c9fbcd50df2c95a414d4631", "url": "https://github.com/palantir/atlasdb/commit/a4b0e7c54ad5f21b3c9fbcd50df2c95a414d4631", "message": "Batch Namespace Takeover resource.", "committedDate": "2020-03-23T12:23:19Z", "type": "commit"}, {"oid": "09676befb52ddd6631dffd7e109f196acbbc41b3", "url": "https://github.com/palantir/atlasdb/commit/09676befb52ddd6631dffd7e109f196acbbc41b3", "message": "Checkstyle.", "committedDate": "2020-03-23T12:34:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ2MTU4Nw==", "url": "https://github.com/palantir/atlasdb/pull/4663#discussion_r396461587", "bodyText": "We should leave a comment along the lines of the ListenableFuture one explaining why this is safe. It is, because SerializingUtils.copy() will throw when trying to copy the non-(Java) Serializable Optional returned.", "author": "jeremyk-91", "createdAt": "2020-03-23T13:46:19Z", "path": "atlasdb-commons/src/main/java/com/palantir/common/proxy/SerializingProxy.java", "diffHunk": "@@ -52,7 +53,7 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl\n         // Who knows why this class is present. Presumably it's to test some required behaviour in large internal\n         // product. But we know that they don't return ListenableFutures (and we do, and don't use Java serialization),\n         // so let's skip them.\n-        if (method.getReturnType().equals(ListenableFuture.class)) {\n+        if (method.getReturnType().equals(ListenableFuture.class) || method.getReturnType().equals(Optional.class)) {", "originalCommit": "09676befb52ddd6631dffd7e109f196acbbc41b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU0NDAwOQ==", "url": "https://github.com/palantir/atlasdb/pull/4663#discussion_r396544009", "bodyText": "will delete \ud83d\udd25", "author": "felixdesouza", "createdAt": "2020-03-23T15:36:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ2MTU4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "6a9b5b4fc0015d1a5bbac7a0fd3cf2cdbb5bc951", "chunk": "diff --git a/atlasdb-commons/src/main/java/com/palantir/common/proxy/SerializingProxy.java b/atlasdb-commons/src/main/java/com/palantir/common/proxy/SerializingProxy.java\ndeleted file mode 100644\nindex 71d77b1c06..0000000000\n--- a/atlasdb-commons/src/main/java/com/palantir/common/proxy/SerializingProxy.java\n+++ /dev/null\n\n@@ -1,93 +0,0 @@\n-/*\n- * (c) Copyright 2018 Palantir Technologies Inc. All rights reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.palantir.common.proxy;\n-\n-import java.io.NotSerializableException;\n-import java.io.ObjectInputStream;\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n-import java.lang.reflect.Proxy;\n-import java.util.Optional;\n-\n-import com.google.common.util.concurrent.ListenableFuture;\n-import com.palantir.logsafe.Preconditions;\n-import com.palantir.util.ObjectInputStreamFactory;\n-\n-public class SerializingProxy implements DelegatingInvocationHandler {\n-\n-    public static <T> T newProxyInstance(Class<T> interfaceClass, T delegate) {\n-        return newProxyInstance(interfaceClass, delegate, (is, codebase) -> new ObjectInputStream(is));\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public static <T> T newProxyInstance(Class<T> interfaceClass, T delegate, ObjectInputStreamFactory factory) {\n-        return (T)Proxy.newProxyInstance(interfaceClass.getClassLoader(),\n-            new Class<?>[] {interfaceClass}, new SerializingProxy(delegate, factory));\n-    }\n-\n-    final Object delegate;\n-    final ObjectInputStreamFactory factory;\n-\n-    private SerializingProxy(Object delegate, ObjectInputStreamFactory factory) {\n-        Preconditions.checkNotNull(factory);\n-        Preconditions.checkNotNull(delegate);\n-        this.delegate = delegate;\n-        this.factory = factory;\n-    }\n-\n-    @Override\n-    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n-        // Who knows why this class is present. Presumably it's to test some required behaviour in large internal\n-        // product. But we know that they don't return ListenableFutures (and we do, and don't use Java serialization),\n-        // so let's skip them.\n-        if (method.getReturnType().equals(ListenableFuture.class) || method.getReturnType().equals(Optional.class)) {\n-            try {\n-                return method.invoke(delegate, args);\n-            } catch (InvocationTargetException e) {\n-                throw e.getCause();\n-            }\n-        }\n-\n-        final Object[] argsCopy;\n-        if (args == null) {\n-            argsCopy = null;\n-        } else {\n-            argsCopy = new Object[args.length];\n-            for (int i = 0 ; i < args.length ; i++) {\n-                argsCopy[i] = SerializingUtils.copy(args[i], factory);\n-                if (argsCopy[i] == null && args[i] != null) {\n-                    throw new NotSerializableException(\"failed to serialize object\"\n-                        + \" in method \" + method\n-                        + \" with arg number \" + i\n-                        + \" with class \" + args[i].getClass()\n-                        + \" with value \" + args[i]);\n-                }\n-            }\n-        }\n-\n-        try {\n-            return SerializingUtils.copy(method.invoke(delegate, argsCopy), factory);\n-        } catch (InvocationTargetException e) {\n-            throw SerializingUtils.copy(e.getCause());\n-        }\n-    }\n-\n-    @Override\n-    public Object getDelegate() {\n-        return delegate;\n-    }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ2MzE3Mg==", "url": "https://github.com/palantir/atlasdb/pull/4663#discussion_r396463172", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Note: Whilst a positive result means that it succussfully proposed and became the leader, it is still subject to\n          \n          \n            \n                 * Note: Whilst a positive result means that it successfully proposed and became the leader, it is still subject to", "author": "jeremyk-91", "createdAt": "2020-03-23T13:48:34Z", "path": "leader-election-api/src/main/java/com/palantir/leader/LeaderElectionService.java", "diffHunk": "@@ -82,6 +82,19 @@\n      */\n     boolean stepDown();\n \n+    /**\n+     * Attempts to forcefully take over leadership. That is, it is similar to {@link #blockOnBecomingLeader()}, however\n+     * it does not block and also if it discovers that it is not the leader, it doesn't back down but proposes\n+     * leadership anyway.\n+     * <p>\n+     * Note: Whilst a positive result means that it succussfully proposed and became the leader, it is still subject to", "originalCommit": "09676befb52ddd6631dffd7e109f196acbbc41b3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4fc8b135a1837380927fa930f1c92a00a0219aac", "chunk": "diff --git a/leader-election-api/src/main/java/com/palantir/leader/LeaderElectionService.java b/leader-election-api/src/main/java/com/palantir/leader/LeaderElectionService.java\nindex 9a9424d5e6..596280803a 100644\n--- a/leader-election-api/src/main/java/com/palantir/leader/LeaderElectionService.java\n+++ b/leader-election-api/src/main/java/com/palantir/leader/LeaderElectionService.java\n\n@@ -87,7 +87,7 @@ public interface LeaderElectionService {\n      * it does not block and also if it discovers that it is not the leader, it doesn't back down but proposes\n      * leadership anyway.\n      * <p>\n-     * Note: Whilst a positive result means that it succussfully proposed and became the leader, it is still subject to\n+     * Note: Whilst a positive result means that it successfully proposed and became the leader, it is still subject to\n      * health check constraints, that is, if it becomes unresponsive for any reason, other nodes will take over\n      * leadership through the normal means via {@link #blockOnBecomingLeader}.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ2Mzk4Nw==", "url": "https://github.com/palantir/atlasdb/pull/4663#discussion_r396463987", "bodyText": "This doesn't quite agree with the API of hostileTakeover though (I didn't gain leadership forcefully, I just was already the leader). Probably the API should be reworded to something like true iff this node was the leader at some point during the method call (bearing in mind it might already the be the leader, and that a successful proposal + GC could see another node take over before this method returns).", "author": "jeremyk-91", "createdAt": "2020-03-23T13:49:35Z", "path": "leader-election-impl/src/main/java/com/palantir/leader/PaxosLeaderElectionService.java", "diffHunk": "@@ -312,6 +312,37 @@ public boolean stepDown() {\n         return false;\n     }\n \n+    @Override\n+    public boolean hostileTakeover() {\n+        LeadershipState leadershipState = determineLeadershipState();\n+        StillLeadingStatus status = leadershipState.status();\n+        switch (status) {\n+            case LEADING:\n+                return true;", "originalCommit": "09676befb52ddd6631dffd7e109f196acbbc41b3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "188b3b62833df333e7fd9d9c4ae1a6bac6714eff", "chunk": "diff --git a/leader-election-impl/src/main/java/com/palantir/leader/PaxosLeaderElectionService.java b/leader-election-impl/src/main/java/com/palantir/leader/PaxosLeaderElectionService.java\nindex f7a9ee4abd..26ba1b6a44 100644\n--- a/leader-election-impl/src/main/java/com/palantir/leader/PaxosLeaderElectionService.java\n+++ b/leader-election-impl/src/main/java/com/palantir/leader/PaxosLeaderElectionService.java\n\n@@ -321,7 +326,9 @@ public class PaxosLeaderElectionService implements LeaderElectionService {\n                 return true;\n             case NOT_LEADING:\n                 try {\n-                    proposer.propose(getNextSequenceNumber(leadershipState.greatestLearnedValue()), null);\n+                    proposer.propose(\n+                            getNextSequenceNumber(leadershipState.greatestLearnedValue()),\n+                            LEADERSHIP_PROPOSAL_VALUE);\n                     StillLeadingStatus newStatus = determineLeadershipState().status();\n                     if (newStatus == StillLeadingStatus.LEADING) {\n                         log.info(\"Successfully took over\", SafeArg.of(\"newStatus\", newStatus));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3MTc5NQ==", "url": "https://github.com/palantir/atlasdb/pull/4663#discussion_r396471795", "bodyText": "nit: the idea that we propose null is now baked in to three places in the code (propose, stepdown and here) - maybe we should refactor this slightly?", "author": "jeremyk-91", "createdAt": "2020-03-23T14:00:30Z", "path": "leader-election-impl/src/main/java/com/palantir/leader/PaxosLeaderElectionService.java", "diffHunk": "@@ -312,6 +312,37 @@ public boolean stepDown() {\n         return false;\n     }\n \n+    @Override\n+    public boolean hostileTakeover() {\n+        LeadershipState leadershipState = determineLeadershipState();\n+        StillLeadingStatus status = leadershipState.status();\n+        switch (status) {\n+            case LEADING:\n+                return true;\n+            case NOT_LEADING:\n+                try {\n+                    proposer.propose(getNextSequenceNumber(leadershipState.greatestLearnedValue()), null);", "originalCommit": "09676befb52ddd6631dffd7e109f196acbbc41b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUwNDkwNw==", "url": "https://github.com/palantir/atlasdb/pull/4663#discussion_r396504907", "bodyText": "can do", "author": "felixdesouza", "createdAt": "2020-03-23T14:45:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ3MTc5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "188b3b62833df333e7fd9d9c4ae1a6bac6714eff", "chunk": "diff --git a/leader-election-impl/src/main/java/com/palantir/leader/PaxosLeaderElectionService.java b/leader-election-impl/src/main/java/com/palantir/leader/PaxosLeaderElectionService.java\nindex f7a9ee4abd..26ba1b6a44 100644\n--- a/leader-election-impl/src/main/java/com/palantir/leader/PaxosLeaderElectionService.java\n+++ b/leader-election-impl/src/main/java/com/palantir/leader/PaxosLeaderElectionService.java\n\n@@ -321,7 +326,9 @@ public class PaxosLeaderElectionService implements LeaderElectionService {\n                 return true;\n             case NOT_LEADING:\n                 try {\n-                    proposer.propose(getNextSequenceNumber(leadershipState.greatestLearnedValue()), null);\n+                    proposer.propose(\n+                            getNextSequenceNumber(leadershipState.greatestLearnedValue()),\n+                            LEADERSHIP_PROPOSAL_VALUE);\n                     StillLeadingStatus newStatus = determineLeadershipState().status();\n                     if (newStatus == StillLeadingStatus.LEADING) {\n                         log.info(\"Successfully took over\", SafeArg.of(\"newStatus\", newStatus));\n"}}, {"oid": "4fc8b135a1837380927fa930f1c92a00a0219aac", "url": "https://github.com/palantir/atlasdb/commit/4fc8b135a1837380927fa930f1c92a00a0219aac", "message": "Update leader-election-api/src/main/java/com/palantir/leader/LeaderElectionService.java\n\nCo-Authored-By: Jeremy Kong <jeremykong@hotmail.com>", "committedDate": "2020-03-23T14:47:06Z", "type": "commit"}, {"oid": "188b3b62833df333e7fd9d9c4ae1a6bac6714eff", "url": "https://github.com/palantir/atlasdb/commit/188b3b62833df333e7fd9d9c4ae1a6bac6714eff", "message": "Address comments.", "committedDate": "2020-03-23T15:48:16Z", "type": "commit"}, {"oid": "6a9b5b4fc0015d1a5bbac7a0fd3cf2cdbb5bc951", "url": "https://github.com/palantir/atlasdb/commit/6a9b5b4fc0015d1a5bbac7a0fd3cf2cdbb5bc951", "message": "Delete SerializingProxy.java", "committedDate": "2020-03-23T15:54:01Z", "type": "commit"}]}