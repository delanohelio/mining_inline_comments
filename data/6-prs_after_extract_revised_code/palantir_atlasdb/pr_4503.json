{"pr_number": 4503, "pr_title": "Off-heap timestamp cache and persistent storage integration", "pr_createdAt": "2020-01-10T15:39:55Z", "pr_url": "https://github.com/palantir/atlasdb/pull/4503", "timeline": [{"oid": "ad20b75ae970cbdd4662431f0903e678a6136c48", "url": "https://github.com/palantir/atlasdb/commit/ad20b75ae970cbdd4662431f0903e678a6136c48", "message": "Keeping with the standard convention.", "committedDate": "2020-01-13T09:37:43Z", "type": "forcePushed"}, {"oid": "4c5fe75b740e8254cc4350cef33e939387aa466d", "url": "https://github.com/palantir/atlasdb/commit/4c5fe75b740e8254cc4350cef33e939387aa466d", "message": "Keeping with the standard convention.", "committedDate": "2020-01-13T14:43:04Z", "type": "forcePushed"}, {"oid": "28396260565a54b384a4f1297a8fc043488f38d2", "url": "https://github.com/palantir/atlasdb/commit/28396260565a54b384a4f1297a8fc043488f38d2", "message": "Small refactor.", "committedDate": "2020-01-13T15:21:18Z", "type": "forcePushed"}, {"oid": "8ddf10adf49bc946ac4981fba55178f08f5719f7", "url": "https://github.com/palantir/atlasdb/commit/8ddf10adf49bc946ac4981fba55178f08f5719f7", "message": "Enable persistent storage config.", "committedDate": "2020-01-13T18:37:07Z", "type": "commit"}, {"oid": "793e5882a7cc09fdbaa7ec2f2c760dbb5ed2f804", "url": "https://github.com/palantir/atlasdb/commit/793e5882a7cc09fdbaa7ec2f2c760dbb5ed2f804", "message": "Added a more detailed check.", "committedDate": "2020-01-13T18:37:07Z", "type": "commit"}, {"oid": "fa7716691d9a3eb667a7c9f8dbbbf17983edf845", "url": "https://github.com/palantir/atlasdb/commit/fa7716691d9a3eb667a7c9f8dbbbf17983edf845", "message": "ComparingTimestampCache implementation.", "committedDate": "2020-01-13T18:37:07Z", "type": "commit"}, {"oid": "804cf37b8e1710984b7eafca75648599c468bfb2", "url": "https://github.com/palantir/atlasdb/commit/804cf37b8e1710984b7eafca75648599c468bfb2", "message": "Refactor creation of TestTransactionManagerImpl", "committedDate": "2020-01-13T18:37:07Z", "type": "commit"}, {"oid": "6e157957a33e85d616051a073fbd0fa4c4df89a7", "url": "https://github.com/palantir/atlasdb/commit/6e157957a33e85d616051a073fbd0fa4c4df89a7", "message": "Add tests for TimestampCache integration.", "committedDate": "2020-01-13T18:37:07Z", "type": "commit"}, {"oid": "0e7d30832acec4be42da4b6384cb7a9f63f4cb39", "url": "https://github.com/palantir/atlasdb/commit/0e7d30832acec4be42da4b6384cb7a9f63f4cb39", "message": "Fix the tests.", "committedDate": "2020-01-13T18:37:07Z", "type": "commit"}, {"oid": "96210e7050422fed4658d815b43845e3b914def5", "url": "https://github.com/palantir/atlasdb/commit/96210e7050422fed4658d815b43845e3b914def5", "message": "Keeping with the standard convention.", "committedDate": "2020-01-13T18:37:07Z", "type": "commit"}, {"oid": "96cd845b24a99dc586c5766ed6db6980c6c6da2a", "url": "https://github.com/palantir/atlasdb/commit/96cd845b24a99dc586c5766ed6db6980c6c6da2a", "message": "Small refactor.", "committedDate": "2020-01-13T18:37:07Z", "type": "commit"}, {"oid": "1f25387480f90b092a335771d79ed396bea6d71b", "url": "https://github.com/palantir/atlasdb/commit/1f25387480f90b092a335771d79ed396bea6d71b", "message": "Change config and add more info.", "committedDate": "2020-01-13T18:37:07Z", "type": "commit"}, {"oid": "5d61e02af57f160bf18ef9a9d5bb7b09b0f774e7", "url": "https://github.com/palantir/atlasdb/commit/5d61e02af57f160bf18ef9a9d5bb7b09b0f774e7", "message": "Update config.", "committedDate": "2020-01-13T18:37:07Z", "type": "commit"}, {"oid": "e5a53a09b4f826af8e7daa97dbf3e3f6450aa9b9", "url": "https://github.com/palantir/atlasdb/commit/e5a53a09b4f826af8e7daa97dbf3e3f6450aa9b9", "message": "Better deletion.", "committedDate": "2020-01-13T18:37:07Z", "type": "commit"}, {"oid": "9bb3607f69b7830f66ed817b5f181dce070be0dd", "url": "https://github.com/palantir/atlasdb/commit/9bb3607f69b7830f66ed817b5f181dce070be0dd", "message": "Test for aborting transaction.", "committedDate": "2020-01-13T18:37:07Z", "type": "commit"}, {"oid": "9bb3607f69b7830f66ed817b5f181dce070be0dd", "url": "https://github.com/palantir/atlasdb/commit/9bb3607f69b7830f66ed817b5f181dce070be0dd", "message": "Test for aborting transaction.", "committedDate": "2020-01-13T18:37:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA2MTcwNg==", "url": "https://github.com/palantir/atlasdb/pull/4503#discussion_r366061706", "bodyText": "Some notes:\n\nshould we validate that the path is an absolute path?\nit feels this method should be private, unless I'm missing something.", "author": "jeremyk-91", "createdAt": "2020-01-13T22:25:06Z", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/PersistentStorages.java", "diffHunk": "@@ -17,20 +17,43 @@\n package com.palantir.atlasdb.factory;\n \n import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Comparator;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Set;\n import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n import com.google.common.base.MoreObjects;\n import com.palantir.logsafe.Preconditions;\n+import com.palantir.logsafe.SafeArg;\n \n-public final class PersistentStorageFactories {\n+public final class PersistentStorages {\n     private static final Pattern UUID_PATTERN = Pattern.compile(\n             \"^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$\");\n \n     private static final Set<String> SANITIZED_PATHS = new HashSet<>();\n \n-    private PersistentStorageFactories() {}\n+    private PersistentStorages() {}\n+\n+    /**\n+     * Given the {@code absolutePath} deletes all sub-folders, sub-files and the folder pointed by it.\n+     *\n+     * @param absolutePath which we want to delete\n+     * @throws IOException if there is an underlying exception\n+     */\n+    public static void deletePath(Path absolutePath) throws IOException {\n+        try (Stream<Path> stream = Files.walk(absolutePath)) {", "originalCommit": "9bb3607f69b7830f66ed817b5f181dce070be0dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "23fb0b848b5cf890a10b122aa0f89c9aaf2201ac", "chunk": "diff --git a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/PersistentStorages.java b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/PersistentStorages.java\nindex a16fadc753..b4d98dece1 100644\n--- a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/PersistentStorages.java\n+++ b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/PersistentStorages.java\n\n@@ -40,20 +40,6 @@ public final class PersistentStorages {\n \n     private PersistentStorages() {}\n \n-    /**\n-     * Given the {@code absolutePath} deletes all sub-folders, sub-files and the folder pointed by it.\n-     *\n-     * @param absolutePath which we want to delete\n-     * @throws IOException if there is an underlying exception\n-     */\n-    public static void deletePath(Path absolutePath) throws IOException {\n-        try (Stream<Path> stream = Files.walk(absolutePath)) {\n-            List<Path> sortedPaths = stream.sorted(Comparator.reverseOrder()).collect(Collectors.toList());\n-            for (Path filePath : sortedPaths) {\n-                Files.delete(filePath);\n-            }\n-        }\n-    }\n \n     /**\n      * For the given path does the following: 1) it is sanitized only once per VM lifetime 2) if it exists checks that\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA2MzEzNg==", "url": "https://github.com/palantir/atlasdb/pull/4503#discussion_r366063136", "bodyText": "nit: indentation", "author": "jeremyk-91", "createdAt": "2020-01-13T22:28:27Z", "path": "atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb;\n+\n+import java.util.Objects;\n+import java.util.stream.Stream;\n+\n+import javax.annotation.Nullable;\n+\n+import com.palantir.atlasdb.cache.DefaultTimestampCache;\n+import com.palantir.atlasdb.cache.OffHeapTimestampCache;\n+import com.palantir.atlasdb.cache.TimestampCache;\n+import com.palantir.atlasdb.persistent.api.PersistentTimestampStore;\n+import com.palantir.atlasdb.util.MetricsManager;\n+import com.palantir.logsafe.Preconditions;\n+\n+public final class ComparingTimestampCache implements TimestampCache {\n+    private final TimestampCache first;\n+    private final TimestampCache second;\n+\n+    public static TimestampCache comparingOffHeapForTests(\n+            MetricsManager metricRegistry,\n+            PersistentTimestampStore persistentTimestampStore) {\n+        TimestampCache first = new DefaultTimestampCache(\n+                metricRegistry.getRegistry(),\n+                () -> AtlasDbConstants.DEFAULT_TIMESTAMP_CACHE_SIZE);\n+\n+        TimestampCache second = OffHeapTimestampCache.create(\n+                persistentTimestampStore,\n+                metricRegistry.getTaggedRegistry(),\n+                () -> AtlasDbConstants.DEFAULT_TIMESTAMP_CACHE_SIZE\n+        );", "originalCommit": "9bb3607f69b7830f66ed817b5f181dce070be0dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "23fb0b848b5cf890a10b122aa0f89c9aaf2201ac", "chunk": "diff --git a/atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java b/atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java\nindex 6bb6a62cea..a6ea4e8ba9 100644\n--- a/atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java\n+++ b/atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java\n\n@@ -27,6 +27,7 @@ import com.palantir.atlasdb.cache.TimestampCache;\n import com.palantir.atlasdb.persistent.api.PersistentTimestampStore;\n import com.palantir.atlasdb.util.MetricsManager;\n import com.palantir.logsafe.Preconditions;\n+import com.palantir.logsafe.SafeArg;\n \n public final class ComparingTimestampCache implements TimestampCache {\n     private final TimestampCache first;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA2MzY2OA==", "url": "https://github.com/palantir/atlasdb/pull/4503#discussion_r366063668", "bodyText": "I would include as Args the start timestamp and commit timestamps reported by each of the services in this case, for easier debugging.", "author": "jeremyk-91", "createdAt": "2020-01-13T22:29:57Z", "path": "atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb;\n+\n+import java.util.Objects;\n+import java.util.stream.Stream;\n+\n+import javax.annotation.Nullable;\n+\n+import com.palantir.atlasdb.cache.DefaultTimestampCache;\n+import com.palantir.atlasdb.cache.OffHeapTimestampCache;\n+import com.palantir.atlasdb.cache.TimestampCache;\n+import com.palantir.atlasdb.persistent.api.PersistentTimestampStore;\n+import com.palantir.atlasdb.util.MetricsManager;\n+import com.palantir.logsafe.Preconditions;\n+\n+public final class ComparingTimestampCache implements TimestampCache {\n+    private final TimestampCache first;\n+    private final TimestampCache second;\n+\n+    public static TimestampCache comparingOffHeapForTests(\n+            MetricsManager metricRegistry,\n+            PersistentTimestampStore persistentTimestampStore) {\n+        TimestampCache first = new DefaultTimestampCache(\n+                metricRegistry.getRegistry(),\n+                () -> AtlasDbConstants.DEFAULT_TIMESTAMP_CACHE_SIZE);\n+\n+        TimestampCache second = OffHeapTimestampCache.create(\n+                persistentTimestampStore,\n+                metricRegistry.getTaggedRegistry(),\n+                () -> AtlasDbConstants.DEFAULT_TIMESTAMP_CACHE_SIZE\n+        );\n+\n+        return new ComparingTimestampCache(first, second);\n+    }\n+\n+    private ComparingTimestampCache(TimestampCache first, TimestampCache second) {\n+        this.first = first;\n+        this.second = second;\n+    }\n+\n+\n+    @Override\n+    public synchronized void clear() {\n+        first.clear();\n+        second.clear();\n+    }\n+\n+    @Override\n+    public synchronized void putAlreadyCommittedTransaction(Long startTimestamp, Long commitTimestamp) {\n+        first.putAlreadyCommittedTransaction(startTimestamp, commitTimestamp);\n+        second.putAlreadyCommittedTransaction(startTimestamp, commitTimestamp);\n+    }\n+\n+    @Nullable\n+    @Override\n+    public synchronized Long getCommitTimestampIfPresent(Long startTimestamp) {\n+        Long firstCommitTimestamp = first.getCommitTimestampIfPresent(startTimestamp);\n+        Long secondCommitTimestamp = second.getCommitTimestampIfPresent(startTimestamp);\n+        if (firstCommitTimestamp == null || secondCommitTimestamp == null) {\n+            return Stream.of(firstCommitTimestamp, secondCommitTimestamp)\n+                    .filter(Objects::nonNull)\n+                    .findFirst()\n+                    .orElse(null);\n+        }\n+        Preconditions.checkState(firstCommitTimestamp.equals(secondCommitTimestamp),\n+                \"There is a bug in cache implementation\");", "originalCommit": "9bb3607f69b7830f66ed817b5f181dce070be0dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "23fb0b848b5cf890a10b122aa0f89c9aaf2201ac", "chunk": "diff --git a/atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java b/atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java\nindex 6bb6a62cea..a6ea4e8ba9 100644\n--- a/atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java\n+++ b/atlasdb-tests-shared/src/main/java/com/palantir/atlasdb/ComparingTimestampCache.java\n\n@@ -27,6 +27,7 @@ import com.palantir.atlasdb.cache.TimestampCache;\n import com.palantir.atlasdb.persistent.api.PersistentTimestampStore;\n import com.palantir.atlasdb.util.MetricsManager;\n import com.palantir.logsafe.Preconditions;\n+import com.palantir.logsafe.SafeArg;\n \n public final class ComparingTimestampCache implements TimestampCache {\n     private final TimestampCache first;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA2NTE3Mw==", "url": "https://github.com/palantir/atlasdb/pull/4503#discussion_r366065173", "bodyText": "nit: maybe readThenAbortStillCaches...? A ReadTransaction is something else, and could lead to confusion", "author": "jeremyk-91", "createdAt": "2020-01-13T22:34:04Z", "path": "atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java", "diffHunk": "@@ -168,6 +170,74 @@ public void shouldNotConflictIfImmutableTimestampLockExpiresIfNoReadsOrWrites()\n         txnManagerWithMocks.runTaskThrowOnConflict(txn -> null);\n     }\n \n+    @Test\n+    public void writeDoesNotPopulateTimestampCache() {\n+        Transaction transaction = txMgr.runTaskWithRetry(txn -> {\n+            put(txn, TEST_TABLE, \"row\", \"column\", \"test\");\n+            return txn;\n+        });\n+\n+        assertThat(timestampCache.getCommitTimestampIfPresent(transaction.getTimestamp())).isNull();\n+    }\n+\n+    @Test\n+    public void readCachesWritersStartToCommitTimestamp() {\n+        Transaction writer = txMgr.runTaskWithRetry(txn -> {\n+            put(txn, TEST_TABLE, \"row\", \"column\", \"test\");\n+            return txn;\n+        });\n+\n+        assertThat(timestampCache.getCommitTimestampIfPresent(writer.getTimestamp())).isNull();\n+\n+        txMgr.runTaskWithRetry(txn -> {\n+            get(txn, TEST_TABLE, \"row\", \"column\");\n+            return txn;\n+        });\n+\n+        assertThat(timestampCache.getCommitTimestampIfPresent(writer.getTimestamp()))\n+                .isNotNull()\n+                .isEqualTo(transactionService.get(writer.getTimestamp()));\n+    }\n+\n+    @Test\n+    public void overwriteCachesPreviousWritersStartToCommitTimestamp() {\n+        Transaction writer = txMgr.runTaskWithRetry(txn -> {\n+            put(txn, TEST_TABLE, \"row\", \"column\", \"first\");\n+            return txn;\n+        });\n+\n+        assertThat(timestampCache.getCommitTimestampIfPresent(writer.getTimestamp())).isNull();\n+\n+        txMgr.runTaskWithRetry(txn -> {\n+            put(txn, TEST_TABLE, \"row\", \"column\", \"second\");\n+            return txn;\n+        });\n+\n+        assertThat(timestampCache.getCommitTimestampIfPresent(writer.getTimestamp()))\n+                .isNotNull()\n+                .isEqualTo(transactionService.get(writer.getTimestamp()));\n+    }\n+\n+    @Test\n+    public void abortedReadTransactionStillCachesWritersCommitTimestamp() {", "originalCommit": "9bb3607f69b7830f66ed817b5f181dce070be0dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "23fb0b848b5cf890a10b122aa0f89c9aaf2201ac", "chunk": "diff --git a/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java b/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java\nindex 58e2b1d8ac..172356aae5 100644\n--- a/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java\n+++ b/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java\n\n@@ -172,12 +172,12 @@ public class TransactionManagerTest extends TransactionTestSetup {\n \n     @Test\n     public void writeDoesNotPopulateTimestampCache() {\n-        Transaction transaction = txMgr.runTaskWithRetry(txn -> {\n+        Long writerStartTimestamp = txMgr.runTaskWithRetry(txn -> {\n             put(txn, TEST_TABLE, \"row\", \"column\", \"test\");\n-            return txn;\n+            return txn.getTimestamp();\n         });\n \n-        assertThat(timestampCache.getCommitTimestampIfPresent(transaction.getTimestamp())).isNull();\n+        assertThat(timestampCache.getCommitTimestampIfPresent(writerStartTimestamp)).isNull();\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA2NTYxNg==", "url": "https://github.com/palantir/atlasdb/pull/4503#discussion_r366065616", "bodyText": "In general throughout this class, is isNotNull() really needed? I imagine the isEqualTo check should be good enough. Transaction#getTimestamp returns a primitive long, so non-null.", "author": "jeremyk-91", "createdAt": "2020-01-13T22:35:17Z", "path": "atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java", "diffHunk": "@@ -168,6 +170,74 @@ public void shouldNotConflictIfImmutableTimestampLockExpiresIfNoReadsOrWrites()\n         txnManagerWithMocks.runTaskThrowOnConflict(txn -> null);\n     }\n \n+    @Test\n+    public void writeDoesNotPopulateTimestampCache() {\n+        Transaction transaction = txMgr.runTaskWithRetry(txn -> {\n+            put(txn, TEST_TABLE, \"row\", \"column\", \"test\");\n+            return txn;\n+        });\n+\n+        assertThat(timestampCache.getCommitTimestampIfPresent(transaction.getTimestamp())).isNull();\n+    }\n+\n+    @Test\n+    public void readCachesWritersStartToCommitTimestamp() {\n+        Transaction writer = txMgr.runTaskWithRetry(txn -> {\n+            put(txn, TEST_TABLE, \"row\", \"column\", \"test\");\n+            return txn;\n+        });\n+\n+        assertThat(timestampCache.getCommitTimestampIfPresent(writer.getTimestamp())).isNull();\n+\n+        txMgr.runTaskWithRetry(txn -> {\n+            get(txn, TEST_TABLE, \"row\", \"column\");\n+            return txn;\n+        });\n+\n+        assertThat(timestampCache.getCommitTimestampIfPresent(writer.getTimestamp()))\n+                .isNotNull()\n+                .isEqualTo(transactionService.get(writer.getTimestamp()));", "originalCommit": "9bb3607f69b7830f66ed817b5f181dce070be0dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "23fb0b848b5cf890a10b122aa0f89c9aaf2201ac", "chunk": "diff --git a/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java b/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java\nindex 58e2b1d8ac..172356aae5 100644\n--- a/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java\n+++ b/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java\n\n@@ -172,12 +172,12 @@ public class TransactionManagerTest extends TransactionTestSetup {\n \n     @Test\n     public void writeDoesNotPopulateTimestampCache() {\n-        Transaction transaction = txMgr.runTaskWithRetry(txn -> {\n+        Long writerStartTimestamp = txMgr.runTaskWithRetry(txn -> {\n             put(txn, TEST_TABLE, \"row\", \"column\", \"test\");\n-            return txn;\n+            return txn.getTimestamp();\n         });\n \n-        assertThat(timestampCache.getCommitTimestampIfPresent(transaction.getTimestamp())).isNull();\n+        assertThat(timestampCache.getCommitTimestampIfPresent(writerStartTimestamp)).isNull();\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA2NTgxNQ==", "url": "https://github.com/palantir/atlasdb/pull/4503#discussion_r366065815", "bodyText": "Might be cleaner in terms of minimum visibility to just return the timestamp from the transaction task.", "author": "jeremyk-91", "createdAt": "2020-01-13T22:35:45Z", "path": "atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java", "diffHunk": "@@ -168,6 +170,74 @@ public void shouldNotConflictIfImmutableTimestampLockExpiresIfNoReadsOrWrites()\n         txnManagerWithMocks.runTaskThrowOnConflict(txn -> null);\n     }\n \n+    @Test\n+    public void writeDoesNotPopulateTimestampCache() {\n+        Transaction transaction = txMgr.runTaskWithRetry(txn -> {\n+            put(txn, TEST_TABLE, \"row\", \"column\", \"test\");\n+            return txn;\n+        });", "originalCommit": "9bb3607f69b7830f66ed817b5f181dce070be0dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "23fb0b848b5cf890a10b122aa0f89c9aaf2201ac", "chunk": "diff --git a/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java b/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java\nindex 58e2b1d8ac..172356aae5 100644\n--- a/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java\n+++ b/atlasdb-tests-shared/src/test/java/com/palantir/atlasdb/transaction/impl/TransactionManagerTest.java\n\n@@ -172,12 +172,12 @@ public class TransactionManagerTest extends TransactionTestSetup {\n \n     @Test\n     public void writeDoesNotPopulateTimestampCache() {\n-        Transaction transaction = txMgr.runTaskWithRetry(txn -> {\n+        Long writerStartTimestamp = txMgr.runTaskWithRetry(txn -> {\n             put(txn, TEST_TABLE, \"row\", \"column\", \"test\");\n-            return txn;\n+            return txn.getTimestamp();\n         });\n \n-        assertThat(timestampCache.getCommitTimestampIfPresent(transaction.getTimestamp())).isNull();\n+        assertThat(timestampCache.getCommitTimestampIfPresent(writerStartTimestamp)).isNull();\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA2NjUxMw==", "url": "https://github.com/palantir/atlasdb/pull/4503#discussion_r366066513", "bodyText": "I think we should test the logic in this class in this PR, especially since it's on a live path", "author": "jeremyk-91", "createdAt": "2020-01-13T22:37:46Z", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "diffHunk": "@@ -495,6 +514,19 @@ private TransactionManager serializableInternal(@Output List<AutoCloseable> clos\n         return transactionManager;\n     }\n \n+    private TimestampCache getTimestampCache(\n+            MetricsManager metricsManager,\n+            Supplier<AtlasDbRuntimeConfig> runtimeConfigSupplier,\n+            Optional<PersistentTimestampStore> persistentTimestampStore) {\n+        LongSupplier cacheSize = () -> runtimeConfigSupplier.get().getTimestampCacheSize();\n+        Supplier<TimestampCache> timestampCacheSupplier = () ->\n+                persistentTimestampStore.map(store ->\n+                        OffHeapTimestampCache.create(store, metricsManager.getTaggedRegistry(), cacheSize))\n+                        .orElseGet(() -> new DefaultTimestampCache(metricsManager.getRegistry(), cacheSize));\n+\n+        return config().timestampCache().orElseGet(timestampCacheSupplier);", "originalCommit": "9bb3607f69b7830f66ed817b5f181dce070be0dd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3966635617454f5426d2c79f6f16ac87da120ce7", "chunk": "diff --git a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\nindex d2b30578ab..bdf0504b84 100644\n--- a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n+++ b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n\n@@ -514,7 +509,23 @@ public abstract class TransactionManagers {\n         return transactionManager;\n     }\n \n-    private TimestampCache getTimestampCache(\n+    @VisibleForTesting\n+    static Optional<PersistentTimestampStore> constructPersistentTimestampStore(\n+            AtlasDbConfig config,\n+            PersistentStorageFactory persistentStorageFactory,\n+            @Output List<AutoCloseable> closeables) {\n+        return initializeCloseable(\n+                config.persistentStorage().map(storageConfig -> {\n+                    PersistentStorages.sanitizeStoragePath(storageConfig.storagePath());\n+                    return persistentStorageFactory\n+                            .constructPersistentTimestampStore((RocksDbPersistentStorageConfig) storageConfig);\n+                }),\n+                closeables);\n+    }\n+\n+    @VisibleForTesting\n+    static TimestampCache getTimestampCache(\n+            AtlasDbConfig atlasDbConfig,\n             MetricsManager metricsManager,\n             Supplier<AtlasDbRuntimeConfig> runtimeConfigSupplier,\n             Optional<PersistentTimestampStore> persistentTimestampStore) {\n"}}, {"oid": "23fb0b848b5cf890a10b122aa0f89c9aaf2201ac", "url": "https://github.com/palantir/atlasdb/commit/23fb0b848b5cf890a10b122aa0f89c9aaf2201ac", "message": "Initial comments fixed.", "committedDate": "2020-01-14T10:10:43Z", "type": "commit"}, {"oid": "3966635617454f5426d2c79f6f16ac87da120ce7", "url": "https://github.com/palantir/atlasdb/commit/3966635617454f5426d2c79f6f16ac87da120ce7", "message": "Added tests for hot path.", "committedDate": "2020-01-14T12:03:16Z", "type": "commit"}, {"oid": "d744687cba4ca8290fab98c832dd69ce670b16d5", "url": "https://github.com/palantir/atlasdb/commit/d744687cba4ca8290fab98c832dd69ce670b16d5", "message": "Fixed indentation.", "committedDate": "2020-01-14T12:48:16Z", "type": "commit"}, {"oid": "33a6f5397d6e8989ecb79a5ab096cefab08eef91", "url": "https://github.com/palantir/atlasdb/commit/33a6f5397d6e8989ecb79a5ab096cefab08eef91", "message": "Test simplification.", "committedDate": "2020-01-14T13:56:29Z", "type": "commit"}, {"oid": "a372ff6d385cbcba4bba9cc0210e5e3fa5df216f", "url": "https://github.com/palantir/atlasdb/commit/a372ff6d385cbcba4bba9cc0210e5e3fa5df216f", "message": "Simplify tests.", "committedDate": "2020-01-14T13:58:27Z", "type": "commit"}, {"oid": "5099c89f4ebdf50fc8efe37fe77f35ab0c7bedb3", "url": "https://github.com/palantir/atlasdb/commit/5099c89f4ebdf50fc8efe37fe77f35ab0c7bedb3", "message": "Revert rename.", "committedDate": "2020-01-14T15:20:40Z", "type": "commit"}, {"oid": "3ccb94af6c4bc2651b4449f4461aeef34c0f759e", "url": "https://github.com/palantir/atlasdb/commit/3ccb94af6c4bc2651b4449f4461aeef34c0f759e", "message": "Fix absolute paths.", "committedDate": "2020-01-14T15:56:46Z", "type": "commit"}, {"oid": "0a43ce1c06e5e297492a4bb2778aa05a88bb81b9", "url": "https://github.com/palantir/atlasdb/commit/0a43ce1c06e5e297492a4bb2778aa05a88bb81b9", "message": "More fixes.", "committedDate": "2020-01-14T17:04:09Z", "type": "commit"}, {"oid": "ad865b2757050ea6ea113acdfd4f374553cd6cea", "url": "https://github.com/palantir/atlasdb/commit/ad865b2757050ea6ea113acdfd4f374553cd6cea", "message": "Better solution for multitenancy.", "committedDate": "2020-01-14T17:45:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUxMjQwMg==", "url": "https://github.com/palantir/atlasdb/pull/4503#discussion_r366512402", "bodyText": "nit: maybe constructPersistentTimestampStoreIfConfigured?", "author": "jeremyk-91", "createdAt": "2020-01-14T18:52:03Z", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "diffHunk": "@@ -495,6 +509,32 @@ private TransactionManager serializableInternal(@Output List<AutoCloseable> clos\n         return transactionManager;\n     }\n \n+    @VisibleForTesting\n+    static Optional<PersistentTimestampStore> constructPersistentTimestampStore(", "originalCommit": "ad865b2757050ea6ea113acdfd4f374553cd6cea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUzMDU5OQ==", "url": "https://github.com/palantir/atlasdb/pull/4503#discussion_r366530599", "bodyText": "Renamed.", "author": "OStevan", "createdAt": "2020-01-14T19:30:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUxMjQwMg=="}], "type": "inlineReview", "revised_code": {"commit": "503dfbde8603ebba45e769b9f253dc5d58f71d30", "chunk": "diff --git a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\nindex cf6c4b0cf1..ebbbd4a187 100644\n--- a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n+++ b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n\n@@ -510,13 +510,19 @@ public abstract class TransactionManagers {\n     }\n \n     @VisibleForTesting\n-    static Optional<PersistentTimestampStore> constructPersistentTimestampStore(\n+    static Optional<PersistentTimestampStore> constructPersistentTimestampStoreIfConfigured(\n             AtlasDbConfig config,\n             PersistentStorageFactory persistentStorageFactory,\n             @Output List<AutoCloseable> closeables) {\n         return initializeCloseable(\n-                config.persistentStorage().map(storageConfig -> persistentStorageFactory\n-                        .constructPersistentTimestampStore((RocksDbPersistentStorageConfig) storageConfig)),\n+                config.persistentStorage().map(storageConfig -> {\n+                    Preconditions.checkState(\n+                            storageConfig instanceof RocksDbPersistentStorageConfig,\n+                            \"Storage config is not RocksDbPersistentStorageConfig.\",\n+                            SafeArg.of(\"configClass\", storageConfig.getClass()));\n+                    return persistentStorageFactory\n+                            .constructPersistentTimestampStore((RocksDbPersistentStorageConfig) storageConfig);\n+                }),\n                 closeables);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUxMjcwMQ==", "url": "https://github.com/palantir/atlasdb/pull/4503#discussion_r366512701", "bodyText": "I would Preconditions.checkState this for readability (instead of the class cast exception you'd get if we ship a bug here)", "author": "jeremyk-91", "createdAt": "2020-01-14T18:52:38Z", "path": "atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java", "diffHunk": "@@ -495,6 +509,32 @@ private TransactionManager serializableInternal(@Output List<AutoCloseable> clos\n         return transactionManager;\n     }\n \n+    @VisibleForTesting\n+    static Optional<PersistentTimestampStore> constructPersistentTimestampStore(\n+            AtlasDbConfig config,\n+            PersistentStorageFactory persistentStorageFactory,\n+            @Output List<AutoCloseable> closeables) {\n+        return initializeCloseable(\n+                config.persistentStorage().map(storageConfig -> persistentStorageFactory\n+                        .constructPersistentTimestampStore((RocksDbPersistentStorageConfig) storageConfig)),", "originalCommit": "ad865b2757050ea6ea113acdfd4f374553cd6cea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUzMDYyOQ==", "url": "https://github.com/palantir/atlasdb/pull/4503#discussion_r366530629", "bodyText": "Added.", "author": "OStevan", "createdAt": "2020-01-14T19:30:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUxMjcwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "503dfbde8603ebba45e769b9f253dc5d58f71d30", "chunk": "diff --git a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\nindex cf6c4b0cf1..ebbbd4a187 100644\n--- a/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n+++ b/atlasdb-config/src/main/java/com/palantir/atlasdb/factory/TransactionManagers.java\n\n@@ -510,13 +510,19 @@ public abstract class TransactionManagers {\n     }\n \n     @VisibleForTesting\n-    static Optional<PersistentTimestampStore> constructPersistentTimestampStore(\n+    static Optional<PersistentTimestampStore> constructPersistentTimestampStoreIfConfigured(\n             AtlasDbConfig config,\n             PersistentStorageFactory persistentStorageFactory,\n             @Output List<AutoCloseable> closeables) {\n         return initializeCloseable(\n-                config.persistentStorage().map(storageConfig -> persistentStorageFactory\n-                        .constructPersistentTimestampStore((RocksDbPersistentStorageConfig) storageConfig)),\n+                config.persistentStorage().map(storageConfig -> {\n+                    Preconditions.checkState(\n+                            storageConfig instanceof RocksDbPersistentStorageConfig,\n+                            \"Storage config is not RocksDbPersistentStorageConfig.\",\n+                            SafeArg.of(\"configClass\", storageConfig.getClass()));\n+                    return persistentStorageFactory\n+                            .constructPersistentTimestampStore((RocksDbPersistentStorageConfig) storageConfig);\n+                }),\n                 closeables);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUxMzU4Nw==", "url": "https://github.com/palantir/atlasdb/pull/4503#discussion_r366513587", "bodyText": "There's probably something around persistentTimestampStoreNotConstructedEvenIfConfiguredIfExplicitlyProvided, though I'm okay with passing on that if it's really hard to test.", "author": "jeremyk-91", "createdAt": "2020-01-14T18:54:26Z", "path": "atlasdb-config/src/test/java/com/palantir/atlasdb/factory/TransactionManagersTest.java", "diffHunk": "@@ -714,6 +722,88 @@ public void kvsDoesNotRecordSweepStatsIfSweepQueueWritesAndTargetedSweepEnabled(\n         assertThat(isSweepStatsKvsPresentInDelegatingChain(keyValueService), is(false));\n     }\n \n+    @Test\n+    public void providedTimestampCacheOverridesAnyOtherConfig() {\n+        MetricRegistry metricRegistry = metricsManager.getRegistry();\n+        TimestampCache expectedTimestampCache = new DefaultTimestampCache(metricRegistry, () -> 10000L);\n+\n+        AtlasDbConfig installConfig = ImmutableAtlasDbConfig.builder()\n+                .keyValueService(new InMemoryAtlasDbConfig())\n+                .targetedSweep(ImmutableTargetedSweepInstallConfig.builder().build())\n+                .timestampCache(expectedTimestampCache)\n+                .build();\n+\n+        TimestampCache timestampCache = constructTimestampCache(installConfig, Optional.empty());\n+\n+        assertThat(timestampCache).isSameAs(expectedTimestampCache);\n+    }\n+\n+    @Test\n+    public void usingInMemoryTimestampCache() {\n+        AtlasDbConfig installConfig = ImmutableAtlasDbConfig.builder()\n+                .keyValueService(new InMemoryAtlasDbConfig())\n+                .targetedSweep(ImmutableTargetedSweepInstallConfig.builder().build())\n+                .build();\n+\n+        TimestampCache timestampCache = constructTimestampCache(installConfig, Optional.empty());\n+\n+        assertThat(timestampCache).isInstanceOf(DefaultTimestampCache.class);\n+    }\n+\n+    @Test\n+    public void usingPersistentStorage() throws IOException {\n+        File storageFolder = temporaryFolder.newFolder();\n+        String storagePath = Files.currentFolder().toPath()\n+                .relativize(storageFolder.toPath())\n+                .toString();\n+\n+        AtlasDbConfig installConfig = ImmutableAtlasDbConfig.builder()\n+                .keyValueService(new InMemoryAtlasDbConfig())\n+                .targetedSweep(ImmutableTargetedSweepInstallConfig.builder().build())\n+                .persistentStorage(\n+                        ImmutableRocksDbPersistentStorageConfig.builder()\n+                                .storagePath(storagePath)\n+                                .build())\n+                .build();\n+\n+        Optional<PersistentTimestampStore> persistentTimestampStore =\n+                TransactionManagers.constructPersistentTimestampStore(\n+                        installConfig,\n+                        new DefaultPersistentStorageFactory(),\n+                        new LinkedList<>());\n+\n+        TimestampCache timestampCache = constructTimestampCache(installConfig, persistentTimestampStore);\n+\n+        assertThat(timestampCache).isInstanceOf(OffHeapTimestampCache.class);\n+    }\n+\n+    @Test\n+    public void persistentTimestampStoreNotConstructed() {\n+        AtlasDbConfig installConfig = ImmutableAtlasDbConfig.builder()\n+                .keyValueService(new InMemoryAtlasDbConfig())\n+                .targetedSweep(ImmutableTargetedSweepInstallConfig.builder().build())\n+                .build();\n+\n+        Optional<PersistentTimestampStore> persistentTimestampStore =\n+                TransactionManagers.constructPersistentTimestampStore(\n+                        installConfig,\n+                        new DefaultPersistentStorageFactory(),\n+                        new LinkedList<>());\n+\n+        assertThat(persistentTimestampStore)\n+                .isEmpty();\n+    }\n+", "originalCommit": "ad865b2757050ea6ea113acdfd4f374553cd6cea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUzMDczMw==", "url": "https://github.com/palantir/atlasdb/pull/4503#discussion_r366530733", "bodyText": "Will be resolved in a following PR.", "author": "OStevan", "createdAt": "2020-01-14T19:30:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUxMzU4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc5ODEzNw==", "url": "https://github.com/palantir/atlasdb/pull/4503#discussion_r366798137", "bodyText": "After discussing offline we decided that if the config is provided the persistent storage is initialized so this is not useful anymore.", "author": "OStevan", "createdAt": "2020-01-15T10:24:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUxMzU4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "503dfbde8603ebba45e769b9f253dc5d58f71d30", "chunk": "diff --git a/atlasdb-config/src/test/java/com/palantir/atlasdb/factory/TransactionManagersTest.java b/atlasdb-config/src/test/java/com/palantir/atlasdb/factory/TransactionManagersTest.java\nindex 8f2c3681dc..f2b48ef4c1 100644\n--- a/atlasdb-config/src/test/java/com/palantir/atlasdb/factory/TransactionManagersTest.java\n+++ b/atlasdb-config/src/test/java/com/palantir/atlasdb/factory/TransactionManagersTest.java\n\n@@ -767,7 +767,7 @@ public class TransactionManagersTest {\n                 .build();\n \n         Optional<PersistentTimestampStore> persistentTimestampStore =\n-                TransactionManagers.constructPersistentTimestampStore(\n+                TransactionManagers.constructPersistentTimestampStoreIfConfigured(\n                         installConfig,\n                         new DefaultPersistentStorageFactory(),\n                         new LinkedList<>());\n"}}, {"oid": "503dfbde8603ebba45e769b9f253dc5d58f71d30", "url": "https://github.com/palantir/atlasdb/commit/503dfbde8603ebba45e769b9f253dc5d58f71d30", "message": "Small fixes.", "committedDate": "2020-01-14T19:31:08Z", "type": "commit"}]}