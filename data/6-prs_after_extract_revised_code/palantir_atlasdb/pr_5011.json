{"pr_number": 5011, "pr_title": "[DB TimeLock] 1B, 1C: DB TimeLock for Multiple Series", "pr_createdAt": "2020-09-30T13:56:52Z", "pr_url": "https://github.com/palantir/atlasdb/pull/5011", "timeline": [{"oid": "2c20902a8820335130054b99ee1b2e37163fed81", "url": "https://github.com/palantir/atlasdb/commit/2c20902a8820335130054b99ee1b2e37163fed81", "message": "Refactor", "committedDate": "2020-09-29T00:21:47Z", "type": "commit"}, {"oid": "5e11a7ed128a5ab988225202cde18bf4f06ad356", "url": "https://github.com/palantir/atlasdb/commit/5e11a7ed128a5ab988225202cde18bf4f06ad356", "message": "rename", "committedDate": "2020-09-29T00:23:00Z", "type": "commit"}, {"oid": "6f57f752c720eb87a33939c6f95133c79938082d", "url": "https://github.com/palantir/atlasdb/commit/6f57f752c720eb87a33939c6f95133c79938082d", "message": "multi seq", "committedDate": "2020-09-29T00:48:48Z", "type": "commit"}, {"oid": "4689810f02adff7d2b34a247bb684aee66736cf7", "url": "https://github.com/palantir/atlasdb/commit/4689810f02adff7d2b34a247bb684aee66736cf7", "message": "refactoring", "committedDate": "2020-09-30T10:56:25Z", "type": "commit"}, {"oid": "f2536960d7b2af0e811b2cbf2040d837b8be6ee3", "url": "https://github.com/palantir/atlasdb/commit/f2536960d7b2af0e811b2cbf2040d837b8be6ee3", "message": "utils", "committedDate": "2020-09-30T10:56:30Z", "type": "commit"}, {"oid": "0fe2fb565c18617d85cd52ada5abcee1366f3535", "url": "https://github.com/palantir/atlasdb/commit/0fe2fb565c18617d85cd52ada5abcee1366f3535", "message": "updates", "committedDate": "2020-09-30T12:35:11Z", "type": "commit"}, {"oid": "d340284a07e1356a4cdadaee2492e735bcd58cce", "url": "https://github.com/palantir/atlasdb/commit/d340284a07e1356a4cdadaee2492e735bcd58cce", "message": "multiseries tests", "committedDate": "2020-09-30T12:35:19Z", "type": "commit"}, {"oid": "3c23842d67e2bc904f959bf5186a012cf2f65eae", "url": "https://github.com/palantir/atlasdb/commit/3c23842d67e2bc904f959bf5186a012cf2f65eae", "message": "Baseline", "committedDate": "2020-09-30T13:36:49Z", "type": "commit"}, {"oid": "90bb5a9a1320fa11cea2aa3c6cf68699ffc093c3", "url": "https://github.com/palantir/atlasdb/commit/90bb5a9a1320fa11cea2aa3c6cf68699ffc093c3", "message": "audit previous legacy tables", "committedDate": "2020-09-30T13:49:31Z", "type": "commit"}, {"oid": "70b87434c3c58e1938baadd30e39d934b1582894", "url": "https://github.com/palantir/atlasdb/commit/70b87434c3c58e1938baadd30e39d934b1582894", "message": "refactor", "committedDate": "2020-09-30T13:53:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxNzM5MA==", "url": "https://github.com/palantir/atlasdb/pull/5011#discussion_r498217390", "bodyText": "\ud83d\udcaf", "author": "sudiksha27", "createdAt": "2020-10-01T12:48:53Z", "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/InDbTimestampBoundStore.java", "diffHunk": "@@ -72,32 +62,39 @@ public static InDbTimestampBoundStore create(\n             ConnectionManager connManager,\n             TableReference timestampTable,\n             String tablePrefixString) {\n-        InDbTimestampBoundStore inDbTimestampBoundStore = new InDbTimestampBoundStore(\n-                connManager,\n-                timestampTable,\n-                tablePrefixString);\n+        return createWithStrategy(connManager, new LegacyPhysicalBoundStoreStrategy(timestampTable, tablePrefixString));\n+    }\n \n-        inDbTimestampBoundStore.init();\n+    public static InDbTimestampBoundStore createForMultiSeries(\n+            ConnectionManager connManager,\n+            TableReference timestampTable,\n+            String series) {\n+        return createWithStrategy(connManager, new MultiSequencePhysicalBoundStoreStrategy(timestampTable, series));\n+    }\n \n+    private static InDbTimestampBoundStore createWithStrategy(ConnectionManager connManager,\n+            PhysicalBoundStoreStrategy strategy) {\n+        InDbTimestampBoundStore inDbTimestampBoundStore = new InDbTimestampBoundStore(connManager, strategy);\n+        inDbTimestampBoundStore.init();\n         return inDbTimestampBoundStore;\n     }\n \n-    private InDbTimestampBoundStore(ConnectionManager connManager, TableReference timestampTable, String tablePrefix) {\n+    private InDbTimestampBoundStore(ConnectionManager connManager,\n+            PhysicalBoundStoreStrategy physicalBoundStoreStrategy) {\n         this.connManager = Preconditions.checkNotNull(connManager, \"connectionManager is required\");\n-        this.timestampTable = Preconditions.checkNotNull(timestampTable, \"timestampTable is required\");\n-        this.tablePrefix = tablePrefix;\n+        this.physicalBoundStoreStrategy = physicalBoundStoreStrategy;\n     }\n \n     private void init() {\n         try (Connection conn = connManager.getConnection()) {\n-            createTimestampTable(conn);\n+            physicalBoundStoreStrategy.createTimestampTable(conn, this::getDbType);\n         } catch (SQLException error) {\n             throw PalantirSqlException.create(error);\n         }\n     }\n \n     private interface Operation {\n-        long run(Connection connection, @Nullable Long oldLimit) throws SQLException;\n+        long run(Connection connection, OptionalLong oldLimit) throws SQLException;\n     }", "originalCommit": "70b87434c3c58e1938baadd30e39d934b1582894", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4d87866b9c2a8fc9fbed20bb6b50afe9e47599ec", "chunk": "diff --git a/atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/InDbTimestampBoundStore.java b/atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/InDbTimestampBoundStore.java\nindex 5bd296a7ef..67f2a6f9c6 100644\n--- a/atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/InDbTimestampBoundStore.java\n+++ b/atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/InDbTimestampBoundStore.java\n\n@@ -68,7 +68,7 @@ public class InDbTimestampBoundStore implements TimestampBoundStore {\n     public static InDbTimestampBoundStore createForMultiSeries(\n             ConnectionManager connManager,\n             TableReference timestampTable,\n-            String series) {\n+            TimestampSeries series) {\n         return createWithStrategy(connManager, new MultiSequencePhysicalBoundStoreStrategy(timestampTable, series));\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIyMTc3MQ==", "url": "https://github.com/palantir/atlasdb/pull/5011#discussion_r498221771", "bodyText": "nit: this is not being used anymore?", "author": "sudiksha27", "createdAt": "2020-10-01T12:55:42Z", "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/LegacyPhysicalBoundStoreStrategy.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.dbkvs.timestamp;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.util.OptionalLong;\n+import java.util.function.Function;\n+\n+import org.apache.commons.dbutils.QueryRunner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.palantir.atlasdb.keyvalue.api.TableReference;\n+import com.palantir.logsafe.Preconditions;\n+import com.palantir.nexus.db.DBType;\n+\n+public class LegacyPhysicalBoundStoreStrategy implements PhysicalBoundStoreStrategy {\n+    private static final Logger log = LoggerFactory.getLogger(LegacyPhysicalBoundStoreStrategy.class);\n+", "originalCommit": "70b87434c3c58e1938baadd30e39d934b1582894", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwNTExOA==", "url": "https://github.com/palantir/atlasdb/pull/5011#discussion_r498405118", "bodyText": "Doh! Yeah, this went away since I extracted this before factoring out the createTimestampTable() stuff. Removed", "author": "jeremyk-91", "createdAt": "2020-10-01T17:26:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIyMTc3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "4d87866b9c2a8fc9fbed20bb6b50afe9e47599ec", "chunk": "diff --git a/atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/LegacyPhysicalBoundStoreStrategy.java b/atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/LegacyPhysicalBoundStoreStrategy.java\nindex 1a2d330430..028c6ff759 100644\n--- a/atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/LegacyPhysicalBoundStoreStrategy.java\n+++ b/atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/LegacyPhysicalBoundStoreStrategy.java\n\n@@ -23,16 +23,12 @@ import java.util.OptionalLong;\n import java.util.function.Function;\n \n import org.apache.commons.dbutils.QueryRunner;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n import com.palantir.atlasdb.keyvalue.api.TableReference;\n import com.palantir.logsafe.Preconditions;\n import com.palantir.nexus.db.DBType;\n \n public class LegacyPhysicalBoundStoreStrategy implements PhysicalBoundStoreStrategy {\n-    private static final Logger log = LoggerFactory.getLogger(LegacyPhysicalBoundStoreStrategy.class);\n-\n     private final TableReference timestampTable;\n     private final String tablePrefix;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIyMzIwNA==", "url": "https://github.com/palantir/atlasdb/pull/5011#discussion_r498223204", "bodyText": "\ud83d\udcaf", "author": "sudiksha27", "createdAt": "2020-10-01T12:57:50Z", "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/MultiSequencePhysicalBoundStoreStrategy.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.dbkvs.timestamp;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.util.OptionalLong;\n+import java.util.function.Function;\n+\n+import org.apache.commons.dbutils.QueryRunner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.palantir.atlasdb.keyvalue.api.TableReference;\n+import com.palantir.nexus.db.DBType;\n+\n+public class MultiSequencePhysicalBoundStoreStrategy implements PhysicalBoundStoreStrategy {\n+    private static final Logger log = LoggerFactory.getLogger(MultiSequencePhysicalBoundStoreStrategy.class);\n+\n+    private final TableReference timestampTable;\n+    private final String series;\n+\n+    public MultiSequencePhysicalBoundStoreStrategy(TableReference timestampTable, String series) {\n+        this.timestampTable = timestampTable;\n+        this.series = series;\n+    }\n+\n+    @Override\n+    public void createTimestampTable(Connection connection, Function<Connection, DBType> dbTypeExtractor)\n+            throws SQLException {\n+        PhysicalBoundStoreDatabaseUtils.createTimestampTable(\n+                connection,\n+                dbTypeExtractor,\n+                ImmutableCreateTimestampTableQueries.builder().postgresQuery(\n+                        String.format(\"CREATE TABLE IF NOT EXISTS %s (\"\n+                                        + \" client VARCHAR(2000) NOT NULL,\"\n+                                        + \" last_allocated int8 NOT NULL,\"\n+                                        + \" PRIMARY KEY (client))\",\n+                                timestampTable.getQualifiedName()))\n+                .oracleQuery(\n+                        String.format(\"CREATE TABLE %s (\"\n+                                        + \" client VARCHAR(2000) NOT NULL,\"\n+                                        + \" last_allocated NUMBER(38) NOT NULL,\"\n+                                        + \" CONSTRAINT %s_pk PRIMARY KEY (client))\",\n+                                timestampTable.getQualifiedName(),\n+                                timestampTable.getQualifiedName()))\n+                .build());\n+    }\n+\n+    @Override\n+    public OptionalLong readLimit(Connection connection) throws SQLException {\n+        String sql = String.format(\"SELECT last_allocated FROM %s WHERE client = ? FOR UPDATE\",\n+                timestampTable.getQualifiedName());\n+        QueryRunner run = new QueryRunner();\n+        return run.query(connection, sql, PhysicalBoundStoreDatabaseUtils::getLastAllocatedColumn, series);\n+    }", "originalCommit": "70b87434c3c58e1938baadd30e39d934b1582894", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4d87866b9c2a8fc9fbed20bb6b50afe9e47599ec", "chunk": "diff --git a/atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/MultiSequencePhysicalBoundStoreStrategy.java b/atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/MultiSequencePhysicalBoundStoreStrategy.java\nindex 7426eea8c5..3ead68baaf 100644\n--- a/atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/MultiSequencePhysicalBoundStoreStrategy.java\n+++ b/atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/MultiSequencePhysicalBoundStoreStrategy.java\n\n@@ -23,19 +23,15 @@ import java.util.OptionalLong;\n import java.util.function.Function;\n \n import org.apache.commons.dbutils.QueryRunner;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n import com.palantir.atlasdb.keyvalue.api.TableReference;\n import com.palantir.nexus.db.DBType;\n \n public class MultiSequencePhysicalBoundStoreStrategy implements PhysicalBoundStoreStrategy {\n-    private static final Logger log = LoggerFactory.getLogger(MultiSequencePhysicalBoundStoreStrategy.class);\n-\n     private final TableReference timestampTable;\n-    private final String series;\n+    private final TimestampSeries series;\n \n-    public MultiSequencePhysicalBoundStoreStrategy(TableReference timestampTable, String series) {\n+    public MultiSequencePhysicalBoundStoreStrategy(TableReference timestampTable, TimestampSeries series) {\n         this.timestampTable = timestampTable;\n         this.series = series;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIyNjQwMQ==", "url": "https://github.com/palantir/atlasdb/pull/5011#discussion_r498226401", "bodyText": "I see we're removing the option of providing tablePrefix for multi series, which should be fine. Maybe we should should use Client rather than String for type checking?", "author": "sudiksha27", "createdAt": "2020-10-01T13:02:51Z", "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/InDbTimestampBoundStore.java", "diffHunk": "@@ -72,32 +62,39 @@ public static InDbTimestampBoundStore create(\n             ConnectionManager connManager,\n             TableReference timestampTable,\n             String tablePrefixString) {\n-        InDbTimestampBoundStore inDbTimestampBoundStore = new InDbTimestampBoundStore(\n-                connManager,\n-                timestampTable,\n-                tablePrefixString);\n+        return createWithStrategy(connManager, new LegacyPhysicalBoundStoreStrategy(timestampTable, tablePrefixString));\n+    }\n \n-        inDbTimestampBoundStore.init();\n+    public static InDbTimestampBoundStore createForMultiSeries(\n+            ConnectionManager connManager,\n+            TableReference timestampTable,\n+            String series) {\n+        return createWithStrategy(connManager, new MultiSequencePhysicalBoundStoreStrategy(timestampTable, series));\n+    }", "originalCommit": "70b87434c3c58e1938baadd30e39d934b1582894", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwNjUzMA==", "url": "https://github.com/palantir/atlasdb/pull/5011#discussion_r498406530", "bodyText": "Ah. We can't use Client, because that's a part of leader-election-api and this is in atlasdb-dbkvs. However, I agree that having a string wrapper type is a good suggestion, I'll add one.", "author": "jeremyk-91", "createdAt": "2020-10-01T17:29:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIyNjQwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "4d87866b9c2a8fc9fbed20bb6b50afe9e47599ec", "chunk": "diff --git a/atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/InDbTimestampBoundStore.java b/atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/InDbTimestampBoundStore.java\nindex 5bd296a7ef..67f2a6f9c6 100644\n--- a/atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/InDbTimestampBoundStore.java\n+++ b/atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/InDbTimestampBoundStore.java\n\n@@ -68,7 +68,7 @@ public class InDbTimestampBoundStore implements TimestampBoundStore {\n     public static InDbTimestampBoundStore createForMultiSeries(\n             ConnectionManager connManager,\n             TableReference timestampTable,\n-            String series) {\n+            TimestampSeries series) {\n         return createWithStrategy(connManager, new MultiSequencePhysicalBoundStoreStrategy(timestampTable, series));\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIyNjU5Mw==", "url": "https://github.com/palantir/atlasdb/pull/5011#discussion_r498226593", "bodyText": "Same as above.", "author": "sudiksha27", "createdAt": "2020-10-01T13:03:11Z", "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/MultiSequencePhysicalBoundStoreStrategy.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.dbkvs.timestamp;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.util.OptionalLong;\n+import java.util.function.Function;\n+\n+import org.apache.commons.dbutils.QueryRunner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.palantir.atlasdb.keyvalue.api.TableReference;\n+import com.palantir.nexus.db.DBType;\n+\n+public class MultiSequencePhysicalBoundStoreStrategy implements PhysicalBoundStoreStrategy {\n+    private static final Logger log = LoggerFactory.getLogger(MultiSequencePhysicalBoundStoreStrategy.class);\n+", "originalCommit": "70b87434c3c58e1938baadd30e39d934b1582894", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4d87866b9c2a8fc9fbed20bb6b50afe9e47599ec", "chunk": "diff --git a/atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/MultiSequencePhysicalBoundStoreStrategy.java b/atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/MultiSequencePhysicalBoundStoreStrategy.java\nindex 7426eea8c5..3ead68baaf 100644\n--- a/atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/MultiSequencePhysicalBoundStoreStrategy.java\n+++ b/atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/MultiSequencePhysicalBoundStoreStrategy.java\n\n@@ -23,19 +23,15 @@ import java.util.OptionalLong;\n import java.util.function.Function;\n \n import org.apache.commons.dbutils.QueryRunner;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n import com.palantir.atlasdb.keyvalue.api.TableReference;\n import com.palantir.nexus.db.DBType;\n \n public class MultiSequencePhysicalBoundStoreStrategy implements PhysicalBoundStoreStrategy {\n-    private static final Logger log = LoggerFactory.getLogger(MultiSequencePhysicalBoundStoreStrategy.class);\n-\n     private final TableReference timestampTable;\n-    private final String series;\n+    private final TimestampSeries series;\n \n-    public MultiSequencePhysicalBoundStoreStrategy(TableReference timestampTable, String series) {\n+    public MultiSequencePhysicalBoundStoreStrategy(TableReference timestampTable, TimestampSeries series) {\n         this.timestampTable = timestampTable;\n         this.series = series;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIyNzM2NA==", "url": "https://github.com/palantir/atlasdb/pull/5011#discussion_r498227364", "bodyText": "Maybe add a comment that pg query to create table already accommodates this check?", "author": "sudiksha27", "createdAt": "2020-10-01T13:04:22Z", "path": "atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/PhysicalBoundStoreDatabaseUtils.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.keyvalue.dbkvs.timestamp;\n+\n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.OptionalLong;\n+import java.util.function.Function;\n+\n+import org.immutables.value.Value;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.palantir.atlasdb.keyvalue.dbkvs.OracleErrorConstants;\n+import com.palantir.nexus.db.DBType;\n+\n+public final class PhysicalBoundStoreDatabaseUtils {\n+    private static final Logger log = LoggerFactory.getLogger(PhysicalBoundStoreDatabaseUtils.class);\n+\n+    private PhysicalBoundStoreDatabaseUtils() {\n+        // utilities\n+    }\n+\n+    public static void createTimestampTable(Connection connection,\n+            Function<Connection, DBType> dbTypeExtractor,\n+            CreateTimestampTableQueries queries) throws SQLException {\n+        try (Statement statement = connection.createStatement()) {\n+            if (dbTypeExtractor.apply(connection).equals(DBType.ORACLE)) {\n+                createTimestampTableIgnoringAlreadyExistsError(statement, queries.oracleQuery());\n+            } else {\n+                statement.execute(queries.postgresQuery());\n+            }\n+        }\n+    }\n+\n+    private static void createTimestampTableIgnoringAlreadyExistsError(\n+            Statement statement, String oracleQuery) throws SQLException {\n+        try {\n+            statement.execute(oracleQuery);\n+        } catch (SQLException e) {\n+            if (!e.getMessage().contains(OracleErrorConstants.ORACLE_ALREADY_EXISTS_ERROR)) {\n+                log.error(\"Error occurred creating the Oracle timestamp table\", e);", "originalCommit": "70b87434c3c58e1938baadd30e39d934b1582894", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQwNjAyMw==", "url": "https://github.com/palantir/atlasdb/pull/5011#discussion_r498406023", "bodyText": "Alright, added a comment below this if-block. I think it makes sense actually, since it looks a bit like a bug at first that you don't throw the exception in that case.", "author": "jeremyk-91", "createdAt": "2020-10-01T17:28:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIyNzM2NA=="}], "type": "inlineReview", "revised_code": {"commit": "4d87866b9c2a8fc9fbed20bb6b50afe9e47599ec", "chunk": "diff --git a/atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/PhysicalBoundStoreDatabaseUtils.java b/atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/PhysicalBoundStoreDatabaseUtils.java\nindex 20eecc3705..e8461212fd 100644\n--- a/atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/PhysicalBoundStoreDatabaseUtils.java\n+++ b/atlasdb-dbkvs/src/main/java/com/palantir/atlasdb/keyvalue/dbkvs/timestamp/PhysicalBoundStoreDatabaseUtils.java\n\n@@ -58,6 +58,8 @@ public final class PhysicalBoundStoreDatabaseUtils {\n                 log.error(\"Error occurred creating the Oracle timestamp table\", e);\n                 throw e;\n             }\n+            // The table already exists and we thus couldn't create it.\n+            // Note that in Postgres this is taken care of by the query itself.\n         }\n     }\n \n"}}, {"oid": "4d87866b9c2a8fc9fbed20bb6b50afe9e47599ec", "url": "https://github.com/palantir/atlasdb/commit/4d87866b9c2a8fc9fbed20bb6b50afe9e47599ec", "message": "CR feedback", "committedDate": "2020-10-01T17:31:58Z", "type": "commit"}, {"oid": "bed53ebeba310d034860210e3ef8ea16377d7b20", "url": "https://github.com/palantir/atlasdb/commit/bed53ebeba310d034860210e3ef8ea16377d7b20", "message": "This is why type checking is important", "committedDate": "2020-10-01T17:50:48Z", "type": "commit"}]}