{"pr_number": 4790, "pr_title": "[Dialogue] Part 7: Conjure for Selected Legacy Lock Endpoints", "pr_createdAt": "2020-05-19T21:52:48Z", "pr_url": "https://github.com/palantir/atlasdb/pull/4790", "timeline": [{"oid": "f84c08c188c44c2db5fc005b296bc2892a1a6b46", "url": "https://github.com/palantir/atlasdb/commit/f84c08c188c44c2db5fc005b296bc2892a1a6b46", "message": "conjurize lock", "committedDate": "2020-05-19T19:52:50Z", "type": "commit"}, {"oid": "e45494fd878455b41899709fa63b01ebb5ee09d1", "url": "https://github.com/palantir/atlasdb/commit/e45494fd878455b41899709fa63b01ebb5ee09d1", "message": "Gradle", "committedDate": "2020-05-19T21:04:33Z", "type": "commit"}, {"oid": "00f258242935e25093bbf7838f58651030142a8d", "url": "https://github.com/palantir/atlasdb/commit/00f258242935e25093bbf7838f58651030142a8d", "message": "New resource", "committedDate": "2020-05-19T21:04:42Z", "type": "commit"}, {"oid": "ca1b12ebadb49c303fccb7036ee0c83fb11b7642", "url": "https://github.com/palantir/atlasdb/commit/ca1b12ebadb49c303fccb7036ee0c83fb11b7642", "message": "Git out of here", "committedDate": "2020-05-19T21:05:08Z", "type": "commit"}, {"oid": "d8811b164db51e0e1325e618c2477d45487231fd", "url": "https://github.com/palantir/atlasdb/commit/d8811b164db51e0e1325e618c2477d45487231fd", "message": "test", "committedDate": "2020-05-19T21:28:20Z", "type": "commit"}, {"oid": "e97410458a4379482f6f46325cc4f309f89e9425", "url": "https://github.com/palantir/atlasdb/commit/e97410458a4379482f6f46325cc4f309f89e9425", "message": "JAXRS is tough", "committedDate": "2020-05-19T21:43:14Z", "type": "commit"}, {"oid": "78ecc2642c7b94a0b0bb2a845a311456bfad8111", "url": "https://github.com/palantir/atlasdb/commit/78ecc2642c7b94a0b0bb2a845a311456bfad8111", "message": "Add generated changelog entries", "committedDate": "2020-05-19T21:43:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMwNTc1OA==", "url": "https://github.com/palantir/atlasdb/pull/4790#discussion_r430305758", "bodyText": "Rename to toLegacyTokens?", "author": "gmaretic", "createdAt": "2020-05-26T10:15:48Z", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/ConjureLockV1Resource.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock;\n+\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.palantir.atlasdb.futures.AtlasFutures;\n+import com.palantir.atlasdb.http.RedirectRetryTargeter;\n+import com.palantir.conjure.java.undertow.lib.UndertowService;\n+import com.palantir.lock.ConjureLockRefreshToken;\n+import com.palantir.lock.ConjureLockV1Service;\n+import com.palantir.lock.ConjureLockV1ServiceEndpoints;\n+import com.palantir.lock.ConjureSimpleHeldLocksToken;\n+import com.palantir.lock.LockRefreshToken;\n+import com.palantir.lock.LockService;\n+import com.palantir.lock.SimpleHeldLocksToken;\n+import com.palantir.lock.UndertowConjureLockV1Service;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public class ConjureLockV1Resource implements UndertowConjureLockV1Service {\n+    private final ConjureResourceExceptionHandler exceptionHandler;\n+    private final Function<String, LockService> lockServices;\n+\n+    private ConjureLockV1Resource(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, LockService> lockServices) {\n+        this.exceptionHandler = new ConjureResourceExceptionHandler(redirectRetryTargeter);\n+        this.lockServices = lockServices;\n+    }\n+\n+    public static UndertowService undertow(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, LockService> lockServices) {\n+        return ConjureLockV1ServiceEndpoints.of(new ConjureLockV1Resource(redirectRetryTargeter, lockServices));\n+    }\n+\n+    public static ConjureLockV1ShimService jersey(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, LockService> lockServices) {\n+        return new ConjureLockV1Resource.JerseyAdapter(new ConjureLockV1Resource(redirectRetryTargeter, lockServices));\n+    }\n+\n+    @Override\n+    public ListenableFuture<Set<ConjureLockRefreshToken>> refreshLockRefreshTokens(AuthHeader authHeader,\n+            String namespace, List<ConjureLockRefreshToken> request) {\n+        return exceptionHandler.handleExceptions(() -> {\n+            ListenableFuture<Set<LockRefreshToken>> serviceTokens = Futures.immediateFuture(\n+                    lockServices.apply(namespace).refreshLockRefreshTokens(getLegacyTokens(request)));\n+            return Futures.transform(\n+                    serviceTokens,\n+                    ConjureLockV1Resource::getConjureTokens,\n+                    MoreExecutors.directExecutor());\n+        });\n+    }\n+\n+    @Override\n+    public ListenableFuture<Boolean> unlockSimple(AuthHeader authHeader, String namespace,\n+            ConjureSimpleHeldLocksToken request) {\n+        return exceptionHandler.handleExceptions(() -> {\n+            SimpleHeldLocksToken serverToken = new SimpleHeldLocksToken(\n+                    request.getTokenId(), request.getCreationDateMs());\n+            return Futures.immediateFuture(lockServices.apply(namespace).unlockSimple(serverToken));\n+        });\n+    }\n+\n+    @VisibleForTesting\n+    static List<LockRefreshToken> getLegacyTokens(List<ConjureLockRefreshToken> request) {", "originalCommit": "78ecc2642c7b94a0b0bb2a845a311456bfad8111", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0260b6e17cda19f2db8ffcb233d32c38a414a694", "chunk": "diff --git a/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/ConjureLockV1Resource.java b/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/lock/v1/ConjureLockV1Resource.java\nsimilarity index 83%\nrename from timelock-impl/src/main/java/com/palantir/atlasdb/timelock/ConjureLockV1Resource.java\nrename to timelock-impl/src/main/java/com/palantir/atlasdb/timelock/lock/v1/ConjureLockV1Resource.java\nindex 541250953b..d45fc06b5d 100644\n--- a/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/ConjureLockV1Resource.java\n+++ b/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/lock/v1/ConjureLockV1Resource.java\n\n@@ -14,22 +14,20 @@\n  * limitations under the License.\n  */\n \n-package com.palantir.atlasdb.timelock;\n+package com.palantir.atlasdb.timelock.lock.v1;\n \n import java.util.List;\n import java.util.Set;\n import java.util.function.Function;\n-import java.util.stream.Collectors;\n \n-import com.google.common.annotations.VisibleForTesting;\n import com.google.common.util.concurrent.Futures;\n import com.google.common.util.concurrent.ListenableFuture;\n import com.google.common.util.concurrent.MoreExecutors;\n import com.palantir.atlasdb.futures.AtlasFutures;\n import com.palantir.atlasdb.http.RedirectRetryTargeter;\n+import com.palantir.atlasdb.timelock.ConjureResourceExceptionHandler;\n import com.palantir.conjure.java.undertow.lib.UndertowService;\n import com.palantir.lock.ConjureLockRefreshToken;\n-import com.palantir.lock.ConjureLockV1Service;\n import com.palantir.lock.ConjureLockV1ServiceEndpoints;\n import com.palantir.lock.ConjureSimpleHeldLocksToken;\n import com.palantir.lock.LockRefreshToken;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMwNTgyMQ==", "url": "https://github.com/palantir/atlasdb/pull/4790#discussion_r430305821", "bodyText": "as above", "author": "gmaretic", "createdAt": "2020-05-26T10:15:56Z", "path": "timelock-impl/src/main/java/com/palantir/atlasdb/timelock/ConjureLockV1Resource.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * (c) Copyright 2020 Palantir Technologies Inc. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.palantir.atlasdb.timelock;\n+\n+import java.util.List;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.util.concurrent.Futures;\n+import com.google.common.util.concurrent.ListenableFuture;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import com.palantir.atlasdb.futures.AtlasFutures;\n+import com.palantir.atlasdb.http.RedirectRetryTargeter;\n+import com.palantir.conjure.java.undertow.lib.UndertowService;\n+import com.palantir.lock.ConjureLockRefreshToken;\n+import com.palantir.lock.ConjureLockV1Service;\n+import com.palantir.lock.ConjureLockV1ServiceEndpoints;\n+import com.palantir.lock.ConjureSimpleHeldLocksToken;\n+import com.palantir.lock.LockRefreshToken;\n+import com.palantir.lock.LockService;\n+import com.palantir.lock.SimpleHeldLocksToken;\n+import com.palantir.lock.UndertowConjureLockV1Service;\n+import com.palantir.tokens.auth.AuthHeader;\n+\n+public class ConjureLockV1Resource implements UndertowConjureLockV1Service {\n+    private final ConjureResourceExceptionHandler exceptionHandler;\n+    private final Function<String, LockService> lockServices;\n+\n+    private ConjureLockV1Resource(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, LockService> lockServices) {\n+        this.exceptionHandler = new ConjureResourceExceptionHandler(redirectRetryTargeter);\n+        this.lockServices = lockServices;\n+    }\n+\n+    public static UndertowService undertow(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, LockService> lockServices) {\n+        return ConjureLockV1ServiceEndpoints.of(new ConjureLockV1Resource(redirectRetryTargeter, lockServices));\n+    }\n+\n+    public static ConjureLockV1ShimService jersey(\n+            RedirectRetryTargeter redirectRetryTargeter,\n+            Function<String, LockService> lockServices) {\n+        return new ConjureLockV1Resource.JerseyAdapter(new ConjureLockV1Resource(redirectRetryTargeter, lockServices));\n+    }\n+\n+    @Override\n+    public ListenableFuture<Set<ConjureLockRefreshToken>> refreshLockRefreshTokens(AuthHeader authHeader,\n+            String namespace, List<ConjureLockRefreshToken> request) {\n+        return exceptionHandler.handleExceptions(() -> {\n+            ListenableFuture<Set<LockRefreshToken>> serviceTokens = Futures.immediateFuture(\n+                    lockServices.apply(namespace).refreshLockRefreshTokens(getLegacyTokens(request)));\n+            return Futures.transform(\n+                    serviceTokens,\n+                    ConjureLockV1Resource::getConjureTokens,\n+                    MoreExecutors.directExecutor());\n+        });\n+    }\n+\n+    @Override\n+    public ListenableFuture<Boolean> unlockSimple(AuthHeader authHeader, String namespace,\n+            ConjureSimpleHeldLocksToken request) {\n+        return exceptionHandler.handleExceptions(() -> {\n+            SimpleHeldLocksToken serverToken = new SimpleHeldLocksToken(\n+                    request.getTokenId(), request.getCreationDateMs());\n+            return Futures.immediateFuture(lockServices.apply(namespace).unlockSimple(serverToken));\n+        });\n+    }\n+\n+    @VisibleForTesting\n+    static List<LockRefreshToken> getLegacyTokens(List<ConjureLockRefreshToken> request) {\n+        return request.stream()\n+                .map(token -> new LockRefreshToken(token.getTokenId(), token.getExpirationDateMs()))\n+                .collect(Collectors.toList());\n+    }\n+\n+    @VisibleForTesting\n+    static Set<ConjureLockRefreshToken> getConjureTokens(Set<LockRefreshToken> serverTokens) {", "originalCommit": "78ecc2642c7b94a0b0bb2a845a311456bfad8111", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMwNjgxNQ==", "url": "https://github.com/palantir/atlasdb/pull/4790#discussion_r430306815", "bodyText": "Also, these two methods should just live in a separate utility class and be public imo", "author": "gmaretic", "createdAt": "2020-05-26T10:17:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMwNTgyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjA5NjQyOA==", "url": "https://github.com/palantir/atlasdb/pull/4790#discussion_r432096428", "bodyText": "That's a good call. I will do this refactor", "author": "jeremyk-91", "createdAt": "2020-05-28T20:12:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMwNTgyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "0260b6e17cda19f2db8ffcb233d32c38a414a694", "chunk": "diff --git a/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/ConjureLockV1Resource.java b/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/lock/v1/ConjureLockV1Resource.java\nsimilarity index 83%\nrename from timelock-impl/src/main/java/com/palantir/atlasdb/timelock/ConjureLockV1Resource.java\nrename to timelock-impl/src/main/java/com/palantir/atlasdb/timelock/lock/v1/ConjureLockV1Resource.java\nindex 541250953b..d45fc06b5d 100644\n--- a/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/ConjureLockV1Resource.java\n+++ b/timelock-impl/src/main/java/com/palantir/atlasdb/timelock/lock/v1/ConjureLockV1Resource.java\n\n@@ -14,22 +14,20 @@\n  * limitations under the License.\n  */\n \n-package com.palantir.atlasdb.timelock;\n+package com.palantir.atlasdb.timelock.lock.v1;\n \n import java.util.List;\n import java.util.Set;\n import java.util.function.Function;\n-import java.util.stream.Collectors;\n \n-import com.google.common.annotations.VisibleForTesting;\n import com.google.common.util.concurrent.Futures;\n import com.google.common.util.concurrent.ListenableFuture;\n import com.google.common.util.concurrent.MoreExecutors;\n import com.palantir.atlasdb.futures.AtlasFutures;\n import com.palantir.atlasdb.http.RedirectRetryTargeter;\n+import com.palantir.atlasdb.timelock.ConjureResourceExceptionHandler;\n import com.palantir.conjure.java.undertow.lib.UndertowService;\n import com.palantir.lock.ConjureLockRefreshToken;\n-import com.palantir.lock.ConjureLockV1Service;\n import com.palantir.lock.ConjureLockV1ServiceEndpoints;\n import com.palantir.lock.ConjureSimpleHeldLocksToken;\n import com.palantir.lock.LockRefreshToken;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMwNzc1Ng==", "url": "https://github.com/palantir/atlasdb/pull/4790#discussion_r430307756", "bodyText": "Test is a bit verbose, but thorough \ud83c\udf89", "author": "gmaretic", "createdAt": "2020-05-26T10:19:37Z", "path": "timelock-server/src/suiteTest/java/com/palantir/atlasdb/timelock/MultiNodePaxosTimeLockServerIntegrationTest.java", "diffHunk": "@@ -320,6 +326,42 @@ public void canGetAllNamespaces() {\n                 .collect(Collectors.toSet());\n     }\n \n+    @Test\n+    public void directLegacyAndConjureLockServicesInteractCorrectly() throws InterruptedException {", "originalCommit": "78ecc2642c7b94a0b0bb2a845a311456bfad8111", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "0260b6e17cda19f2db8ffcb233d32c38a414a694", "url": "https://github.com/palantir/atlasdb/commit/0260b6e17cda19f2db8ffcb233d32c38a414a694", "message": "CR feedback", "committedDate": "2020-05-28T20:21:31Z", "type": "commit"}, {"oid": "bcedcc62eabe9e9a1ebc9a93f4e1fa8eeeff6545", "url": "https://github.com/palantir/atlasdb/commit/bcedcc62eabe9e9a1ebc9a93f4e1fa8eeeff6545", "message": "import ordering", "committedDate": "2020-05-28T21:43:51Z", "type": "commit"}]}