{"pr_number": 2978, "pr_title": "Git2941 Owl RDF Canonical glossary parser  ", "pr_createdAt": "2020-04-24T13:28:44Z", "pr_url": "https://github.com/odpi/egeria/pull/2978", "timeline": [{"oid": "3df1e8b4839c35423a5e315914a84c0444d61490", "url": "https://github.com/odpi/egeria/commit/3df1e8b4839c35423a5e315914a84c0444d61490", "message": "#2941 Open owl RDF format support\n\nSigned-off-by: David Radley <david_radley@uk.ibm.com>", "committedDate": "2020-04-24T13:32:51Z", "type": "commit"}, {"oid": "912b4b725c99296bfba55944906d00b405a6619c", "url": "https://github.com/odpi/egeria/commit/912b4b725c99296bfba55944906d00b405a6619c", "message": "#2941 Open owl RDF junit\n\nSigned-off-by: David Radley <david_radley@uk.ibm.com>", "committedDate": "2020-04-24T13:32:51Z", "type": "commit"}, {"oid": "27cf25da21a2b2473859ecdca9302f6f5248d8a8", "url": "https://github.com/odpi/egeria/commit/27cf25da21a2b2473859ecdca9302f6f5248d8a8", "message": "#2941 remove unnecessary files\n\nSigned-off-by: David Radley <david_radley@uk.ibm.com>", "committedDate": "2020-04-24T13:32:51Z", "type": "commit"}, {"oid": "3b0a95ab3fd43d5ea42e912ad2c1bf5c26fd4b0b", "url": "https://github.com/odpi/egeria/commit/3b0a95ab3fd43d5ea42e912ad2c1bf5c26fd4b0b", "message": "#2941 correct jena dependancies\n\nSigned-off-by: David Radley <david_radley@uk.ibm.com>", "committedDate": "2020-04-24T13:32:51Z", "type": "commit"}, {"oid": "2077ce2e884b2389c28748b7ece0f077d900f867", "url": "https://github.com/odpi/egeria/commit/2077ce2e884b2389c28748b7ece0f077d900f867", "message": "#2941 correct sample name\n\nSigned-off-by: David Radley <david_radley@uk.ibm.com>", "committedDate": "2020-04-24T13:32:52Z", "type": "commit"}, {"oid": "8f6a59342c7c005aa5c9c457299b4bf4d8548b09", "url": "https://github.com/odpi/egeria/commit/8f6a59342c7c005aa5c9c457299b4bf4d8548b09", "message": "#2941 correct javadoc and remove unused code\n\nSigned-off-by: David Radley <david_radley@uk.ibm.com>", "committedDate": "2020-04-24T13:32:52Z", "type": "commit"}, {"oid": "8f6a59342c7c005aa5c9c457299b4bf4d8548b09", "url": "https://github.com/odpi/egeria/commit/8f6a59342c7c005aa5c9c457299b4bf4d8548b09", "message": "#2941 correct javadoc and remove unused code\n\nSigned-off-by: David Radley <david_radley@uk.ibm.com>", "committedDate": "2020-04-24T13:32:52Z", "type": "forcePushed"}, {"oid": "568aa28472ca2707a418d74d9b36d9e17341dc2b", "url": "https://github.com/odpi/egeria/commit/568aa28472ca2707a418d74d9b36d9e17341dc2b", "message": "Merge branch 'master' into git2941", "committedDate": "2020-04-24T13:33:45Z", "type": "commit"}, {"oid": "2dd52488824dfaecef5c212980b6858d7a5e15b1", "url": "https://github.com/odpi/egeria/commit/2dd52488824dfaecef5c212980b6858d7a5e15b1", "message": "Merge branch 'master' into git2941", "committedDate": "2020-04-24T15:17:14Z", "type": "commit"}, {"oid": "d413e4d08a8a640c70a7889664aaaabe248fc03f", "url": "https://github.com/odpi/egeria/commit/d413e4d08a8a640c70a7889664aaaabe248fc03f", "message": "Merge branch 'master' of https://github.com/odpi/egeria into git2941", "committedDate": "2020-04-24T15:18:44Z", "type": "commit"}, {"oid": "03669af4df0d0cfb1dea1bfc445b7b8716f736a1", "url": "https://github.com/odpi/egeria/commit/03669af4df0d0cfb1dea1bfc445b7b8716f736a1", "message": "git 2941 amend gitignore and stop junit writing to the filesystem\n\nSigned-off-by: David Radley <david_radley@uk.ibm.com>", "committedDate": "2020-04-25T09:24:28Z", "type": "commit"}, {"oid": "a3e4642bbde06a39848f0699a1150c8f56af3484", "url": "https://github.com/odpi/egeria/commit/a3e4642bbde06a39848f0699a1150c8f56af3484", "message": "Merge branch 'git2941' of https://github.com/davidradl/egeria into git2941", "committedDate": "2020-04-25T09:26:02Z", "type": "commit"}, {"oid": "616983e42ee8499b81ddb77d770a9335f19b197c", "url": "https://github.com/odpi/egeria/commit/616983e42ee8499b81ddb77d770a9335f19b197c", "message": "git 2941 amend gitignore\n\nSigned-off-by: David Radley <david_radley@uk.ibm.com>", "committedDate": "2020-04-25T09:29:13Z", "type": "commit"}, {"oid": "cd235b9ec7551e13f4d2a863a1f1d5b6c05bbba1", "url": "https://github.com/odpi/egeria/commit/cd235b9ec7551e13f4d2a863a1f1d5b6c05bbba1", "message": "git 2941 amend gitignore\n\nSigned-off-by: David Radley <david_radley@uk.ibm.com>", "committedDate": "2020-04-25T09:31:29Z", "type": "commit"}, {"oid": "6ea31ff009d1fcd242505fa37fef256d51006d3d", "url": "https://github.com/odpi/egeria/commit/6ea31ff009d1fcd242505fa37fef256d51006d3d", "message": "git 2941 amend gitignore again\n\nSigned-off-by: David Radley <david_radley@uk.ibm.com>", "committedDate": "2020-04-25T09:33:53Z", "type": "commit"}, {"oid": "ff7ea45c93c8c100d77433a5561ab541bb7e36ef", "url": "https://github.com/odpi/egeria/commit/ff7ea45c93c8c100d77433a5561ab541bb7e36ef", "message": "Merge branch 'master' into git2941", "committedDate": "2020-04-27T09:13:21Z", "type": "commit"}, {"oid": "aa82223a829866315310c9fa00bb5f4055663b20", "url": "https://github.com/odpi/egeria/commit/aa82223a829866315310c9fa00bb5f4055663b20", "message": "Merge branch 'master' into git2941", "committedDate": "2020-04-27T10:35:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcxMDQyMg==", "url": "https://github.com/odpi/egeria/pull/2978#discussion_r415710422", "bodyText": "What is it likelihood of getting a GUID clash from RandomUUID given it uses a timestamp?", "author": "mandy-chessell", "createdAt": "2020-04-27T10:51:21Z", "path": "open-metadata-implementation/repository-services/repository-services-archive-utilities/src/main/java/org/odpi/openmetadata/repositoryservices/archiveutilities/OMRSArchiveGUIDMap.java", "diffHunk": "@@ -88,8 +88,21 @@ public String  getGUID(String id)\n \n         if (guid == null)\n         {\n-            guid = UUID.randomUUID().toString();\n-\n+            boolean duplicate =true;", "originalCommit": "3df1e8b4839c35423a5e315914a84c0444d61490", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTczMzc5MA==", "url": "https://github.com/odpi/egeria/pull/2978#discussion_r415733790", "bodyText": "I think you are looking at an old version of the fix this code is not in the current fix", "author": "davidradl", "createdAt": "2020-04-27T11:30:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcxMDQyMg=="}], "type": "inlineReview", "revised_code": {"commit": "77d5945ed42497f4c14c739298753a6841b02c4e", "chunk": "diff --git a/open-metadata-implementation/repository-services/repository-services-archive-utilities/src/main/java/org/odpi/openmetadata/repositoryservices/archiveutilities/OMRSArchiveGUIDMap.java b/open-metadata-implementation/repository-services/repository-services-archive-utilities/src/main/java/org/odpi/openmetadata/repositoryservices/archiveutilities/OMRSArchiveGUIDMap.java\nindex ebcc5d731d..65c68ae3ac 100644\n--- a/open-metadata-implementation/repository-services/repository-services-archive-utilities/src/main/java/org/odpi/openmetadata/repositoryservices/archiveutilities/OMRSArchiveGUIDMap.java\n+++ b/open-metadata-implementation/repository-services/repository-services-archive-utilities/src/main/java/org/odpi/openmetadata/repositoryservices/archiveutilities/OMRSArchiveGUIDMap.java\n\n@@ -88,21 +88,8 @@ public class OMRSArchiveGUIDMap\n \n         if (guid == null)\n         {\n-            boolean duplicate =true;\n-            int count =0;\n-            while (duplicate) {\n-                guid = UUID.randomUUID().toString();\n-                if (guids.contains(guid)) {\n-                    log.debug(\"Guid clash - generating a new one\");\n-                } else {\n-                    duplicate = false;\n-                }\n-                if (count ==10) {\n-                    throw new RuntimeException(\"Duplicate guid generated; tried 10 times\");\n-                }\n-                count++;\n-            }\n-            guids.add(guid);\n+            guid = UUID.randomUUID().toString();\n+\n             idToGUIDMap.put(id, guid);\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcxMDk3Mw==", "url": "https://github.com/odpi/egeria/pull/2978#discussion_r415710973", "bodyText": "Fix alignment", "author": "mandy-chessell", "createdAt": "2020-04-27T10:52:14Z", "path": "open-metadata-implementation/user-interfaces/ui-chassis/ui-chassis-spring/src/main/java/org/odpi/openmetadata/userinterface/uichassis/springboot/api/rex/RepositoryExplorerController.java", "diffHunk": "@@ -496,7 +496,7 @@ public RexTraversalResponse rexTraversal(@RequestBody RexTraversalRequestBody bo\n         try {\n             serverName          = body.getServerName();\n             serverURLRoot       = body.getServerURLRoot();\n-            enterpriseOption    = body.getEnterpriseOption();\n+             enterpriseOption    = body.getEnterpriseOption();", "originalCommit": "3df1e8b4839c35423a5e315914a84c0444d61490", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTczNDI4MQ==", "url": "https://github.com/odpi/egeria/pull/2978#discussion_r415734281", "bodyText": "I think you are looking at an old version of the fix this file is not in the current fix", "author": "davidradl", "createdAt": "2020-04-27T11:31:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcxMDk3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "77d5945ed42497f4c14c739298753a6841b02c4e", "chunk": "diff --git a/open-metadata-implementation/user-interfaces/ui-chassis/ui-chassis-spring/src/main/java/org/odpi/openmetadata/userinterface/uichassis/springboot/api/rex/RepositoryExplorerController.java b/open-metadata-implementation/user-interfaces/ui-chassis/ui-chassis-spring/src/main/java/org/odpi/openmetadata/userinterface/uichassis/springboot/api/rex/RepositoryExplorerController.java\nindex ddd68c3605..6c6f17b257 100644\n--- a/open-metadata-implementation/user-interfaces/ui-chassis/ui-chassis-spring/src/main/java/org/odpi/openmetadata/userinterface/uichassis/springboot/api/rex/RepositoryExplorerController.java\n+++ b/open-metadata-implementation/user-interfaces/ui-chassis/ui-chassis-spring/src/main/java/org/odpi/openmetadata/userinterface/uichassis/springboot/api/rex/RepositoryExplorerController.java\n\n@@ -496,7 +496,7 @@ public class RepositoryExplorerController extends SecureController\n         try {\n             serverName          = body.getServerName();\n             serverURLRoot       = body.getServerURLRoot();\n-             enterpriseOption    = body.getEnterpriseOption();\n+            enterpriseOption    = body.getEnterpriseOption();\n             entityGUID          = body.getEntityGUID();\n             depth               = body.getDepth();\n             gen                 = body.getGen();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcxMTYyNQ==", "url": "https://github.com/odpi/egeria/pull/2978#discussion_r415711625", "bodyText": "Formatting", "author": "mandy-chessell", "createdAt": "2020-04-27T10:53:20Z", "path": "open-metadata-resources/open-metadata-archives/design-model-archives/src/main/java/org/odpi/openmetadata/archiveutilities/designmodels/base/DesignModelArchiveBuilder.java", "diffHunk": "@@ -295,18 +326,65 @@ protected String addTerm(String       glossaryId,\n                              List<String> categoryIds,\n                              String       qualifiedName,\n                              String       displayName,\n-                             String       description)\n+                             String       description) {", "originalCommit": "3df1e8b4839c35423a5e315914a84c0444d61490", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTczNzc0OA==", "url": "https://github.com/odpi/egeria/pull/2978#discussion_r415737748", "bodyText": "fixed", "author": "davidradl", "createdAt": "2020-04-27T11:37:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcxMTYyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "77d5945ed42497f4c14c739298753a6841b02c4e", "chunk": "diff --git a/open-metadata-resources/open-metadata-archives/design-model-archives/src/main/java/org/odpi/openmetadata/archiveutilities/designmodels/base/DesignModelArchiveBuilder.java b/open-metadata-resources/open-metadata-archives/design-model-archives/src/main/java/org/odpi/openmetadata/archiveutilities/designmodels/base/DesignModelArchiveBuilder.java\nindex be470b4cf4..468970d841 100644\n--- a/open-metadata-resources/open-metadata-archives/design-model-archives/src/main/java/org/odpi/openmetadata/archiveutilities/designmodels/base/DesignModelArchiveBuilder.java\n+++ b/open-metadata-resources/open-metadata-archives/design-model-archives/src/main/java/org/odpi/openmetadata/archiveutilities/designmodels/base/DesignModelArchiveBuilder.java\n\n@@ -326,7 +327,8 @@ public class DesignModelArchiveBuilder\n                              List<String> categoryIds,\n                              String       qualifiedName,\n                              String       displayName,\n-                             String       description) {\n+                             String       description)\n+    {\n         return addTerm(glossaryId,categoryIds,qualifiedName,displayName,description,null,false,false,false);\n     }\n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcxMTgwNQ==", "url": "https://github.com/odpi/egeria/pull/2978#discussion_r415711805", "bodyText": "Formatting", "author": "mandy-chessell", "createdAt": "2020-04-27T10:53:38Z", "path": "open-metadata-resources/open-metadata-archives/design-model-archives/src/main/java/org/odpi/openmetadata/archiveutilities/designmodels/base/DesignModelArchiveBuilder.java", "diffHunk": "@@ -326,6 +404,9 @@ protected String addTerm(String       glossaryId,\n             {\n                 if (categoryId != null)\n                 {\n+                    if (categoriesAsNames) {", "originalCommit": "3df1e8b4839c35423a5e315914a84c0444d61490", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc0MDEzMQ==", "url": "https://github.com/odpi/egeria/pull/2978#discussion_r415740131", "bodyText": "fixed", "author": "davidradl", "createdAt": "2020-04-27T11:41:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcxMTgwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "a877f410c6aa2f3fad596d4f5de800892941e7f4", "chunk": "diff --git a/open-metadata-resources/open-metadata-archives/design-model-archives/src/main/java/org/odpi/openmetadata/archiveutilities/designmodels/base/DesignModelArchiveBuilder.java b/open-metadata-resources/open-metadata-archives/design-model-archives/src/main/java/org/odpi/openmetadata/archiveutilities/designmodels/base/DesignModelArchiveBuilder.java\nindex be470b4cf4..49baa7a1e1 100644\n--- a/open-metadata-resources/open-metadata-archives/design-model-archives/src/main/java/org/odpi/openmetadata/archiveutilities/designmodels/base/DesignModelArchiveBuilder.java\n+++ b/open-metadata-resources/open-metadata-archives/design-model-archives/src/main/java/org/odpi/openmetadata/archiveutilities/designmodels/base/DesignModelArchiveBuilder.java\n\n@@ -404,7 +407,8 @@ public class DesignModelArchiveBuilder\n             {\n                 if (categoryId != null)\n                 {\n-                    if (categoriesAsNames) {\n+                    if (categoriesAsNames)\n+                    {\n                         categoryId = idToGUIDMap.getGUID(categoryId);\n                     }\n                     end1 = archiveHelper.getEntityProxy(archiveBuilder.getEntity(categoryId));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcxMTk3OQ==", "url": "https://github.com/odpi/egeria/pull/2978#discussion_r415711979", "bodyText": "Formatting - problem continues futher down file", "author": "mandy-chessell", "createdAt": "2020-04-27T10:53:54Z", "path": "open-metadata-resources/open-metadata-archives/design-model-archives/src/main/java/org/odpi/openmetadata/archiveutilities/designmodels/base/DesignModelArchiveBuilder.java", "diffHunk": "@@ -754,6 +835,70 @@ protected void addLinkToBead(String                 beadId,\n                                                                      end2));\n     }\n \n+    /**\n+     * Add an is a relationship\n+     * @param specialTermQName qualified name of the specialized term\n+     * @param generalizedTermQName qualified name of the generalized term\n+     */\n+    protected void addISARelationship (String specialTermQName , String generalizedTermQName) {\n+\n+        String specializedTermId = idToGUIDMap.getGUID(specialTermQName);\n+        String generalizededTermId = idToGUIDMap.getGUID(generalizedTermQName);\n+\n+\n+        EntityProxy end1 = archiveHelper.getEntityProxy(archiveBuilder.getEntity(generalizededTermId));\n+        EntityProxy end2 = archiveHelper.getEntityProxy(archiveBuilder.getEntity(specializedTermId));\n+\n+        archiveBuilder.addRelationship(archiveHelper.getRelationship(ISA_RELATIONSHIP_NAME,\n+                                                                     idToGUIDMap.getGUID(generalizededTermId + \"_to_\" + specializedTermId),\n+                                                                     null,\n+                                                                     InstanceStatus.ACTIVE,\n+                                                                     end1,\n+                                                                     end2));\n+    }\n+    protected void addHasARelationship(String conceptQName, String propertyQName) {\n+        String conceptId = idToGUIDMap.getGUID(conceptQName);", "originalCommit": "3df1e8b4839c35423a5e315914a84c0444d61490", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTczODM0MA==", "url": "https://github.com/odpi/egeria/pull/2978#discussion_r415738340", "bodyText": "I think you are looking at a back level fix - this is not in the current fix", "author": "davidradl", "createdAt": "2020-04-27T11:38:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcxMTk3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "77d5945ed42497f4c14c739298753a6841b02c4e", "chunk": "diff --git a/open-metadata-resources/open-metadata-archives/design-model-archives/src/main/java/org/odpi/openmetadata/archiveutilities/designmodels/base/DesignModelArchiveBuilder.java b/open-metadata-resources/open-metadata-archives/design-model-archives/src/main/java/org/odpi/openmetadata/archiveutilities/designmodels/base/DesignModelArchiveBuilder.java\nindex be470b4cf4..468970d841 100644\n--- a/open-metadata-resources/open-metadata-archives/design-model-archives/src/main/java/org/odpi/openmetadata/archiveutilities/designmodels/base/DesignModelArchiveBuilder.java\n+++ b/open-metadata-resources/open-metadata-archives/design-model-archives/src/main/java/org/odpi/openmetadata/archiveutilities/designmodels/base/DesignModelArchiveBuilder.java\n\n@@ -836,30 +839,29 @@ public class DesignModelArchiveBuilder\n     }\n \n     /**\n-     * Add an is a relationship\n+     * Add an isa relationship\n      * @param specialTermQName qualified name of the specialized term\n      * @param generalizedTermQName qualified name of the generalized term\n      */\n-    protected void addISARelationship (String specialTermQName , String generalizedTermQName) {\n+    protected void addISARelationship (String specialTermQName , String generalizedTermQName)\n+    {\n \n         String specializedTermId = idToGUIDMap.getGUID(specialTermQName);\n-        String generalizededTermId = idToGUIDMap.getGUID(generalizedTermQName);\n-\n-\n-        EntityProxy end1 = archiveHelper.getEntityProxy(archiveBuilder.getEntity(generalizededTermId));\n+        String generalizedTermId = idToGUIDMap.getGUID(generalizedTermQName);\n+        EntityProxy end1 = archiveHelper.getEntityProxy(archiveBuilder.getEntity(generalizedTermId));\n         EntityProxy end2 = archiveHelper.getEntityProxy(archiveBuilder.getEntity(specializedTermId));\n \n         archiveBuilder.addRelationship(archiveHelper.getRelationship(ISA_RELATIONSHIP_NAME,\n-                                                                     idToGUIDMap.getGUID(generalizededTermId + \"_to_\" + specializedTermId),\n+                                                                     idToGUIDMap.getGUID(generalizedTermId + \"_to_\" + specializedTermId),\n                                                                      null,\n                                                                      InstanceStatus.ACTIVE,\n                                                                      end1,\n                                                                      end2));\n     }\n-    protected void addHasARelationship(String conceptQName, String propertyQName) {\n+    protected void addHasARelationship(String conceptQName, String propertyQName)\n+    {\n         String conceptId = idToGUIDMap.getGUID(conceptQName);\n         String propertyId = idToGUIDMap.getGUID(propertyQName);\n-\n         EntityProxy end1 = archiveHelper.getEntityProxy(archiveBuilder.getEntity(propertyId));\n         EntityProxy end2 = archiveHelper.getEntityProxy(archiveBuilder.getEntity(conceptId));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcxMjg2NA==", "url": "https://github.com/odpi/egeria/pull/2978#discussion_r415712864", "bodyText": "Should this name be more specific as only works for industry models ?", "author": "mandy-chessell", "createdAt": "2020-04-27T10:55:20Z", "path": "open-metadata-resources/open-metadata-archives/design-model-archives/src/main/java/org/odpi/openmetadata/archiveutilities/designmodels/owlcanonicalglossarymodel/CanonicalGlossaryOwlArchiveWriter.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/* SPDX-License-Identifier: Apache-2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.archiveutilities.designmodels.owlcanonicalglossarymodel;\n+\n+import org.apache.log4j.varia.NullAppender;\n+import org.odpi.openmetadata.repositoryservices.archiveutilities.OMRSArchiveWriter;\n+\n+\n+/**\n+ * CanonicalGlossaryOwlArchiveWriter creates a physical open metadata archive file for the data model and glossary\n+ * content.\n+ */\n+public class CanonicalGlossaryOwlArchiveWriter extends OMRSArchiveWriter\n+{\n+    private  String openMetadataArchiveFileName;\n+\n+    private String modelLocation;\n+\n+\n+    /**\n+     * Default constructor\n+     *\n+     * @param modelLocation directory name for the model's JSON-LD files.\n+     */\n+    CanonicalGlossaryOwlArchiveWriter(String modelLocation)", "originalCommit": "3df1e8b4839c35423a5e315914a84c0444d61490", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTczOTQ0MA==", "url": "https://github.com/odpi/egeria/pull/2978#discussion_r415739440", "bodyText": "We hope that others in the community will adopt this way of modelling if it suits them, there is nothing in the format that is intended to be IBM specific.", "author": "davidradl", "createdAt": "2020-04-27T11:40:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcxMjg2NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcxMzg3MA==", "url": "https://github.com/odpi/egeria/pull/2978#discussion_r415713870", "bodyText": "Javadoc missing on methods - this is a generic comment as occurs in other files", "author": "mandy-chessell", "createdAt": "2020-04-27T10:56:48Z", "path": "open-metadata-resources/open-metadata-archives/design-model-archives/src/main/java/org/odpi/openmetadata/archiveutilities/designmodels/owlcanonicalglossarymodel/properties/ModelElement.java", "diffHunk": "@@ -0,0 +1,226 @@\n+/* SPDX-License-Identifier: Apache 2.0 */\n+/* Copyright Contributors to the ODPi Egeria project. */\n+package org.odpi.openmetadata.archiveutilities.designmodels.owlcanonicalglossarymodel.properties;\n+\n+import java.util.*;\n+\n+/**\n+ * Attribute describes an attribute in the model\n+ */\n+public class ModelElement", "originalCommit": "3df1e8b4839c35423a5e315914a84c0444d61490", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTc2NTMyMg==", "url": "https://github.com/odpi/egeria/pull/2978#discussion_r415765322", "bodyText": "fixed", "author": "davidradl", "createdAt": "2020-04-27T12:22:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcxMzg3MA=="}], "type": "inlineReview", "revised_code": {"commit": "77d5945ed42497f4c14c739298753a6841b02c4e", "chunk": "diff --git a/open-metadata-resources/open-metadata-archives/design-model-archives/src/main/java/org/odpi/openmetadata/archiveutilities/designmodels/owlcanonicalglossarymodel/properties/ModelElement.java b/open-metadata-resources/open-metadata-archives/design-model-archives/src/main/java/org/odpi/openmetadata/archiveutilities/designmodels/owlcanonicalglossarymodel/properties/ModelElement.java\nindex 9b014a3dde..510b4739f6 100644\n--- a/open-metadata-resources/open-metadata-archives/design-model-archives/src/main/java/org/odpi/openmetadata/archiveutilities/designmodels/owlcanonicalglossarymodel/properties/ModelElement.java\n+++ b/open-metadata-resources/open-metadata-archives/design-model-archives/src/main/java/org/odpi/openmetadata/archiveutilities/designmodels/owlcanonicalglossarymodel/properties/ModelElement.java\n\n@@ -5,30 +5,15 @@ package org.odpi.openmetadata.archiveutilities.designmodels.owlcanonicalglossary\n import java.util.*;\n \n /**\n- * Attribute describes an attribute in the model\n+ * Attribute describes an element in the model\n  */\n public class ModelElement\n {\n     private String guid          = null;\n     private String id            = null;\n     private String displayName   = null;\n-    private String technicalName = null;\n     private String description   = null;\n     private String version       = null;\n-    private Map<String, Link> domainOfLinks    = new HashMap<>();\n-    private Map<String, Link>      rangeOfLinks     = new HashMap<>();\n-\n-\n-    public ModelElement()\n-    {\n-    }\n-\n-\n-    public String getGUID()\n-    {\n-        return guid;\n-    }\n-\n \n     public void setGUID(String guid)\n     {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcxNDUwMQ==", "url": "https://github.com/odpi/egeria/pull/2978#discussion_r415714501", "bodyText": "Seems this is in the wrong package - should be in the OWL package", "author": "mandy-chessell", "createdAt": "2020-04-27T10:57:57Z", "path": "open-metadata-resources/open-metadata-archives/design-model-archives/src/main/java/org/odpi/openmetadata/archiveutilities/designmodels/test/JenaTest.java", "diffHunk": "@@ -0,0 +1,549 @@\n+/* SPDX-License-Identifier: Apache 2.0 */", "originalCommit": "3df1e8b4839c35423a5e315914a84c0444d61490", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTczMjkzOQ==", "url": "https://github.com/odpi/egeria/pull/2978#discussion_r415732939", "bodyText": "I think you are looking at an old version of the fix this file is not in the current fix", "author": "davidradl", "createdAt": "2020-04-27T11:29:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcxNDUwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "77d5945ed42497f4c14c739298753a6841b02c4e", "chunk": "diff --git a/open-metadata-resources/open-metadata-archives/design-model-archives/src/main/java/org/odpi/openmetadata/archiveutilities/designmodels/test/JenaTest.java b/open-metadata-resources/open-metadata-archives/design-model-archives/src/main/java/org/odpi/openmetadata/archiveutilities/designmodels/test/JenaTest.java\ndeleted file mode 100644\nindex dbc97d2e7b..0000000000\n--- a/open-metadata-resources/open-metadata-archives/design-model-archives/src/main/java/org/odpi/openmetadata/archiveutilities/designmodels/test/JenaTest.java\n+++ /dev/null\n\n@@ -1,549 +0,0 @@\n-/* SPDX-License-Identifier: Apache 2.0 */\n-/* Copyright Contributors to the ODPi Egeria project. */\n-package org.odpi.openmetadata.archiveutilities.designmodels.test;\n-\n-\n-import org.apache.jena.rdf.model.*;\n-import org.apache.jena.riot.Lang;\n-import org.apache.jena.riot.RDFDataMgr;\n-\n-import org.apache.jena.shared.PrefixMapping;\n-\n-import java.io.*;\n-import java.nio.file.Files;\n-import java.nio.file.Paths;\n-import java.util.*;\n-\n-/**\n- * <ul>\n- * <li>the \"is A\" custom relationship that we use is now transformed to subclassof in OWL\n- * license, name and description added to owl:ontology</li>\n- * <li>all classes and properties now have rdf:definedBy link to owl:ontology.</li>\n- * <li>new area of glossaries is included: analytical requirement and measure terms -\n- *  put into OWL as classes and properties.\n- *  links to concept terms are created as</li>\n- * <li> object properties of analytical requirement classes</li>\n- * </ul>\n- *\n- * member\n- *\n- * Example\n- *          \"rdfs:label\": {\n- *             \"@language\": \"en\",\n- *             \"@value\": \"Customer\"\n- *          },\n- *          \"rdfs:comment\": {\n- *             \"@language\": \"en\",\n- *             \"@value\": \"The household or organization that receives services from a provider, including all past and potential future customers of the organization.\"\n- *          },\n- *          \"rdfs:member\": [\n- *             {\n- *                \"@id\": \"energyandutilities:CustomerCategory\"\n- *             },\n- *             {\n- *                \"@id\": \"energyandutilities:ConceptClassification\"\n- *             }\n- *          ],\n- *          \"rdfs:subClassOf\": [\n- *             {\n- *                \"@id\": \"energyandutilities:PartyConcept\"\n- *             }\n- *          ],\n- *          \"rdfs:isDefinedBy\": {\n- *             \"@id\": \"energyandutilities:\"\n- *          }\n- */\n-\n-public class JenaTest {\n-    //public static String fileName = \"/Users/davidradley/Downloads/Healthcare-OWL-2020-03-03.json\";\n-    public static String fileName = \"/Users/davidradley/Downloads/EnergyAndUtilities-2020-04-08-Ontology.json\";\n-\n-//    public static String fileName = \"/Users/davidradley/Downloads/Healthcare-2020-03-03-RDF.json\";\n-    public static void  main (String args[]) throws IOException {\n-//        test1();\n-//        test2();\n-  //      test3();\n-//        test4();\n-//        test5();\n-       test6();\n-\n-    }\n-\n-    private static void test6() throws FileNotFoundException {\n-\n-\n-            Model m = ModelFactory.createDefaultModel();\n-\n-            Reader fileReader = new FileReader(fileName);\n-            Model model = m.read(fileReader, null, \"JSON-LD\");\n-            StmtIterator it = model.listStatements();\n-            Set<String> containerNames = new HashSet<>();\n-            Set<String> classNames = new HashSet<>();\n-            Set<String> ontologyNames = new HashSet<>();\n-            Set<String> propertyNames = new HashSet<>();\n-            // member map - containment relationships for categories and classifications\n-            Map<String, String> memberMap = new HashMap<>();\n-            // subclasses\n-            Map<String, String> NoParentConceptTermMap = new HashMap<>();\n-            Map<String, String> resourceSubClassMap = new HashMap<>();\n-\n-            // range\n-             Map<String, String> rangeMap = new HashMap<>();\n-             // isDefined by -anchors\n-             Map<String, String>  isDefinedByMap = new HashMap<>();\n-            // domain property to owning concept\n-             Map<String, String> domainMap = new HashMap<>();\n-             // label map\n-            Map<String,Literal> labelMap = new HashMap<>();\n-            // comment map\n-            Map<String,Literal> commentMap = new HashMap<>();\n-\n-            while (it.hasNext()) {\n-                Statement statement = it.next();\n-                Resource s = statement.getSubject();\n-                Property p = statement.getPredicate();\n-                RDFNode o = statement.getObject();\n-                String subjectURI = s.getURI();\n-                String predicate = p.getLocalName();\n-\n-                if (\"type\".equals(predicate)) {\n-                    if (o.isURIResource()) {\n-                        if (o.toString().endsWith(\"#Ontology\")) {\n-                            ontologyNames.add(s.getURI());\n-                            System.out.println(\"Ontology URI \"+ s.getURI() );\n-                        } else if (o.toString().endsWith(\"#Class\")) {\n-                            classNames.add(subjectURI);\n-                        } else if (o.toString().endsWith(\"#Container\")) {\n-                            containerNames.add(subjectURI);\n-                        } else if (o.toString().endsWith(\"#property\")) {\n-                            propertyNames.add(subjectURI);\n-                        }\n-                    } else if (o.isResource()) {\n-                        // should not happen\n-                        System.out.println(\"Not expecting a non uri resource subject:\" + subjectURI + \",object: \" +o.asResource());\n-\n-                    } else if (o.isLiteral()) {\n-                        // does not happen\n-                        System.out.println(\"Not expecting type literal\");\n-                   }\n-                } else if (\"member\".equals(predicate)) {\n-                    memberMap.put(subjectURI,o.asResource().getLocalName());\n-                } else if (\"subClassOf\".equals(predicate)) {\n-                    if (o.isResource()) {\n-                        resourceSubClassMap.put(subjectURI, o.asResource().getLocalName());\n-                    } else if (o.isLiteral()) {\n-                        NoParentConceptTermMap.put(subjectURI, o.asLiteral().getValue().toString());\n-                    }\n-                }  else if (\"domain\".equals(predicate)) {\n-                    domainMap.put(subjectURI,o.asResource().getLocalName());\n-                } else if (\"range\".equals(predicate)) {\n-                    rangeMap.put(subjectURI,o.asResource().getLocalName());\n-                } else if (\"label\".equals(predicate)) {\n-//                    if (\"Energy and Utilities Business Vocabulary\".equals(o.asLiteral())) {\n-//                        System.out.println(\"Stoooop!!!\");\n-//                    }\n-//                    if (subjectURI.equals(\"\")) {\n-//                        System.out.println(\"Stoooop!!!\");\n-//                    }\n-                    labelMap.put(subjectURI,o.asLiteral());\n-                } else if (\"comment\".equals(predicate)) {\n-                    commentMap.put(subjectURI,o.asLiteral());\n-                } else if (\"isDefinedBy\".equals(predicate)){\n-                    isDefinedByMap.put(subjectURI,o.asResource().getLocalName());\n-                } else if (\"license\".equals(predicate)){\n-                    System.out.println(\"Found license \");\n-\n-                } else if (\"versionInfo\".equals(predicate)){\n-\n-                } else if (\"maxCardinality\".equals(predicate)){\n-                    // not supported yet\n-                } else if (\"minCardinality\".equals(predicate)){\n-                    // not supported yet\n-                } else {\n-                    System.out.println(\"Not expecting predicate \" + predicate);\n-                }\n-            }\n-\n-            // derived maps.\n-        // this covers comment , label and class. Additional properties for unknowns?\n-\n-        // TODO domain map already maps concept to property terms - HAS-A\n-        // Member map include mapping of property term to the propertyClassification = spine attribute\n-        // rdfs:class is a spine object\n-\n-\n-        // Range has 2 types of entries\n-        // primatives and relationships\n-        Map<String, Map<String, Literal>> propertyTermLiteralMap = new HashMap<>(); // rdfs:property\n-        Map<String, Map<String, Literal>> glossaryLiteralMap = new HashMap<>();    // Owl:Ontology\n-        Map<String, Map<String, Literal>> categoryLiteralMap = new HashMap<>();    // rdf:container\n-        Map<String, Map<String, Literal>> conceptTermLiteralMap = new HashMap<>();  // rdfs:class\n-\n-        // spin down each label and look at it literal and subject. Subject should match property, container or class\n-\n-        for (String subject:labelMap.keySet()) {\n-            String labelValue = (String) labelMap.get(subject).getValue();\n-            if (\"Energy and Utilities Business Vocabulary\".equals(labelValue)) {\n-                System.out.println(\"Stoooop!!!\");\n-            }\n-            if (ontologyNames.contains(subject)) {\n-                // found an ontology = Egeria glossary\n-                Map<String, Literal> literalMap = glossaryLiteralMap.get(subject);\n-                if (literalMap == null) {\n-                    literalMap = new HashMap();\n-                }\n-                literalMap.put(\"label\",labelMap.get(subject));\n-                glossaryLiteralMap.put(subject,literalMap);\n-\n-            }\n-            if (containerNames.contains(subject)) {\n-                // found a container = Egeria Category\n-                Map<String, Literal> literalMap = categoryLiteralMap.get(subject);\n-                if (literalMap == null) {\n-                    literalMap = new HashMap();\n-                }\n-                literalMap.put(\"label\",labelMap.get(subject));\n-                categoryLiteralMap.put(subject,literalMap);\n-\n-            }\n-            if (classNames.contains(subject)) {\n-                // found a class - this is a term\n-                Map<String, Literal> literalMap = conceptTermLiteralMap.get(subject);\n-                if (literalMap == null) {\n-                    literalMap = new HashMap();\n-                }\n-                literalMap.put(\"label\",labelMap.get(subject));\n-                conceptTermLiteralMap.put(subject,literalMap);\n-            }\n-            if (propertyNames.contains(subject)) {\n-                // found a property\n-                Map<String, Literal> literalMap = propertyTermLiteralMap.get(subject);\n-                if (literalMap == null) {\n-                    literalMap = new HashMap();\n-                }\n-                literalMap.put(\"label\", labelMap.get(subject));\n-                propertyTermLiteralMap.put(subject,literalMap);\n-            }\n-        }\n-\n-        for (String subject:commentMap.keySet()) {\n-            if (ontologyNames.contains(subject)) {\n-                // found an ontology\n-                Map<String, Literal> literalMap = glossaryLiteralMap.get(subject);\n-                if (literalMap == null) {\n-                    literalMap = new HashMap();\n-                }\n-                literalMap.put(\"comment\",labelMap.get(subject));\n-                glossaryLiteralMap.put(subject,literalMap);\n-\n-            }\n-            if (containerNames.contains(subject)) {\n-                // found a container\n-                Map<String, Literal> literalMap = categoryLiteralMap.get(subject);\n-                if (literalMap == null) {\n-                    literalMap = new HashMap();\n-                }\n-                literalMap.put(\"comment\",labelMap.get(subject));\n-                categoryLiteralMap.put(subject,literalMap);\n-\n-            }\n-            if (classNames.contains(subject)) {\n-                // found a container\n-                Map<String, Literal> literalMap = conceptTermLiteralMap.get(subject);\n-                if (literalMap == null) {\n-                    literalMap = new HashMap();\n-                }\n-                literalMap.put(\"comment\",labelMap.get(subject));\n-                conceptTermLiteralMap.put(subject,literalMap);\n-\n-            }\n-            if (propertyNames.contains(subject)) {\n-                // found a container\n-                Map<String, Literal> literalMap = propertyTermLiteralMap.get(subject);\n-                if (literalMap == null) {\n-                    literalMap = new HashMap();\n-                }\n-                literalMap.put(\"comment\", labelMap.get(subject));\n-                propertyTermLiteralMap.put(subject,literalMap);\n-            }\n-        }\n-        System.out.println(\"Found \" + glossaryLiteralMap.keySet().size() + \" glossaries\");\n-        System.out.println(\"Found \" + categoryLiteralMap.keySet().size() + \" categories\");\n-        System.out.println(\"Found \" + conceptTermLiteralMap.keySet().size() + \" concept terms\");\n-        System.out.println(\"Found \" + propertyTermLiteralMap.keySet().size() + \" property terms\");\n-        if (resourceSubClassMap == null ) {\n-            System.out.println(\"No resourceSubClassMap\");\n-        } else {\n-            System.out.println(\"Found \" + resourceSubClassMap.keySet().size() + \" resourceSubclasses\");\n-        }\n-        if (NoParentConceptTermMap == null ) {\n-            System.out.println(\"No NoParentConceptTermMap\");\n-        } else {\n-            System.out.println(\"Found \" + NoParentConceptTermMap.keySet().size() + \" NoParentConceptTermMap\");\n-        }\n-        if (rangeMap == null) {\n-            System.out.println(\"No ranges\");\n-        } else {\n-            System.out.println(\"Found \" + rangeMap.keySet().size() + \" rangeMap\");\n-        }\n-        if (domainMap == null) {\n-            System.out.println(\"No domains\");\n-        } else {\n-            System.out.println(\"Found \" + domainMap.keySet().size() + \" domainMap\");\n-        }\n-        if (isDefinedByMap == null ) {\n-            System.out.println(\"No is defined by\");\n-        } else {\n-            System.out.println(\"Found \" + isDefinedByMap.keySet().size() + \" is defined by Map\");\n-        }\n-        if (memberMap == null) {\n-            System.out.println(\"No members\");\n-        } else {\n-            System.out.println(\"Found \" + memberMap.keySet().size() + \" members Map\");\n-        }\n-\n-\n-        // we can create an archive from Glossaries, Categories, concept terms (spine Object) and property terms (Spine Attribute) and their label and comments\n-        // Glossary anchor relationships from isDefined by\n-        // rdf domain relationship is  has-a.\n-        // is a from class to class subClass\n-        // is a type of from property to class subclass\n-        // for a property term that has a domain that is a resource then this is a has-a\n-        // for a property term that has a domain that is a literal ignoring for now (or put in additional properties?)\n-        // synonym ?\n-        // example\n-        // related term for other non has-a relationships between terms ?\n-\n-\n-        // classification ???\n-        // other relationships\n-        // subject area content\n-\n-\n-\n-    }\n-\n-    private static void test5() throws FileNotFoundException {\n-\n-        Model m = ModelFactory.createDefaultModel();\n-\n-        Reader fileReader = new FileReader(fileName);\n-        Model model = m.read(fileReader, null, \"JSON-LD\");\n-        StmtIterator it = model.listStatements();\n-        Set<String> typesSet = new HashSet<>();\n-\n-\n-        Set<String> containerNames = new HashSet<>();\n-        Set<String> classNames = new HashSet<>();\n-        // this covers comment , label and class. Additional properties for unknowns?\n-        Map<String, Map<String,Literal>> TermPropertyMap = new HashMap<>();\n-\n-\n-\n-        System.out.println(\"Labels\");\n-        while (it.hasNext()) {\n-            Statement statement = it.next();\n-            Resource s = statement.getSubject();\n-            Property p = statement.getPredicate();\n-            RDFNode o = statement.getObject();\n-            String subjectLocalName = s.getLocalName();\n-            String predicate = p.getLocalName();\n-//            if (subjectLocalName.equals(\"PartyProfessionalServiceAreaConcept\")) {\n-            if (\"type\".equals(predicate) && o.toString().endsWith(\"#container\" )) {\n-                System.out.println(\"subject : \" + subjectLocalName + \" predicate = \" + p.getLocalName() + \" object:\"+o);\n-            }\n-\n-            String subjectandpredicate = \" , subject=\" + subjectLocalName + \" ,predicate=\" + p.getLocalName();\n-\n-            if (o.isLiteral()) {\n-\n-                if (\"label\".equals(predicate)) {\n-                    System.out.println(\"PropertyTerm \" + subjectLocalName + \" :: Name(label)=\" + o.asLiteral());\n-                } else if (\"comment\".equals(predicate)) {\n-                    System.out.println(\"Term \" + subjectLocalName + \" :: Description(comment)=\" + o.asLiteral());\n-                } else if (\"maxCardinality\".equals(predicate)) {\n-                    // Ignore\n-                } else if (\"minCardinality\".equals(predicate)) {\n-                    //ignore\n-                } else {\n-                    //System.out.println(\"literal predicate =\" + predicate);\n-                }\n-            } else if (o.isURIResource()) {\n-                if (\"domain\".equals(predicate)) {\n-                    System.out.println(\"domain: \" + subjectLocalName + \" is a property of \" + o.asResource().getLocalName());\n-                } else if (\"range\".equals(predicate)) {\n-                    System.out.println(\"range: \" + subjectLocalName + \" is an instanceof class \" + o.asResource().getLocalName());\n-                } else if (\"type\".equals(predicate)) {\n-                    typesSet.add(subjectLocalName);\n-                    if (subjectLocalName.equals(\"Classifications\")) {\n-                        System.out.println(\"type: \" + subjectLocalName + \" type relationship\" + o.asResource().getLocalName());\n-                    }\n-               } else if (\"member\".equals(predicate)) {\n-                    System.out.println(\"member: \" + subjectLocalName + \" member relationship \" + o.asResource().getLocalName());\n-                } else if (\"subClassOf\".equals(predicate)) {\n-                    System.out.println(\"subClassOf: \" + subjectLocalName + \" is an instanceof class \" + o.asResource().getLocalName());\n-                } else {\n-                    // does not happen\n-                    System.out.println(\"Unrecognised URIresource \" + predicate + \" =\" + o.asResource() + subjectandpredicate);\n-                }\n-            } else if (o.isResource()) {\n-                // does not happen\n-                System.out.println(\"Unrecognised resource \" + predicate + \" =\" + o.asResource() + subjectandpredicate);\n-            } else {\n-                // does not happen\n-                System.out.println(\"Non-literal not resource predicate =\" + predicate + subjectandpredicate);\n-//            }\n-\n-\n-//\n-////            if ( p.getLocalName().equals(\"type\")) {\n-//            System.out.println(\"statement =\" + statement);\n-//            System.out.println(\"s =\" + s);\n-//            System.out.println(\"p =\" + p);\n-//\n-//            System.out.println(\"p.getLocalName() =\" + p.getLocalName());\n-//            System.out.println(\"p.getNameSpace() =\" + p.getNameSpace());\n-//            System.out.println(\"p.getOrdinal() =\" + p.getOrdinal());\n-//            System.out.println(\"o =\" + o);\n-//            if (o.isLiteral()) {\n-//                System.out.println(\"o.asLiteral =\" + o.asLiteral());\n-//            } else if (o.isResource()) {\n-//                Resource resource = o.asResource();\n-//                System.out.println(\"o.asResource() =\" + resource);\n-//                System.out.println(\"o.asResource().getLocalName() =\" + resource.getLocalName());\n-//                System.out.println(\"o.asResource().getNameSpace() =\" + resource.getNameSpace());\n-////                    System.out.println(\"o.asResource().getName() =\" + resource.getId());\n-//                if (resource.getLocalName().equals(\"member\")) {\n-//                    System.out.println(\"found member\");\n-//                }\n-//                if (o.isURIResource()) {\n-//                    System.out.println(\"o.isURIResource()  \");\n-//                }\n-//\n-//                // System.out.println(\"o.asResource().getNameURI() =\" + o.asResource().getURI());\n-////                    System.out.println(\"o.asResource().getPropertyResourceValue() =\" + o.asResource().getProperty\n-////                    System.out.println(\"o.asResource().getId() =\" + o.asResource().getId());\n-//            } else if (o.isAnon()) {\n-//                System.out.println(\"o.isAnon() o.asNode().getName() \" + o.asNode().getName());\n-//\n-//            }\n-//            } else if (o.i\n-\n-//            if (p.getURI().equalsIgnoreCase(\n-//                    \"http://www.w3.org/2004/02/skos/core#broader\")\n-//                    && o.isResource()) {\n-//                Resource target = o.asResource();\n-//                if(!hasSubCategory(target.getURI()))\n-//                    set.add(target.getURI());\n-//                if(!hasSubCategory(s.getURI()))\n-//                    set.add(s.getURI());\n-//            }\n-            }\n-        }\n-//        for (String type:typesSet) {\n-//            System.out.println(\"type :\"+type );\n-//        }\n-    }\n-\n-//    private static void test4() throws FileNotFoundException {\n-//        Model m = ModelFactory.createDefaultModel();\n-//\n-//        Reader fileReader = new FileReader(fileName) ;\n-//        Model model = m.read(fileReader, null, \"JSON-LD\");\n-//        StmtIterator it = model.node\n-//        Set<String> set = new HashSet<>();\n-//\n-//        System.out.println(\"Los gehts\");\n-//        while (it.hasNext()) {\n-//\n-//        }\n-//    }\n-\n-    private static void test3() throws FileNotFoundException {\n-        Model m = ModelFactory.createDefaultModel();\n-\n-        Reader fileReader = new FileReader(fileName) ;\n-        Model model = m.read(fileReader, null, \"JSON-LD\");\n-        StmtIterator it = model.listStatements();\n-        Set<String> set = new HashSet<>();\n-\n-        System.out.println(\"Los gehts\");\n-        while (it.hasNext()) {\n-            Statement s = it.next();\n-            Resource r = s.getSubject();\n-            Property p = s.getPredicate();\n-            RDFNode n = s.getObject();\n-//            if ( p.getLocalName().equals(\"type\")) {\n-                System.out.println(\"s =\" + s);\n-                System.out.println(\"r =\" + r);\n-                System.out.println(\"p =\" + p);\n-\n-                System.out.println(\"p.getLocalName() =\" + p.getLocalName());\n-                System.out.println(\"p.getNameSpace() =\" + p.getNameSpace());\n-                System.out.println(\"p.getOrdinal() =\" + p.getOrdinal());\n-                System.out.println(\"n =\" + n);\n-                if (n.isLiteral()) {\n-                    System.out.println(\"n.asLiteral =\" + n.asLiteral());\n-                } else if (n.isResource()){\n-                    Resource resource =  n.asResource();\n-                    System.out.println(\"n.asResource() =\" + resource);\n-                    System.out.println(\"n.asResource().getLocalName() =\" +resource.getLocalName());\n-                    System.out.println(\"n.asResource().getNameSpace() =\" + resource.getNameSpace());\n-//                    System.out.println(\"n.asResource().getName() =\" + resource.getId());\n-                    if (resource.getLocalName().equals(\"member\")){\n-                        System.out.println(\"found member\");\n-                    }\n-                    if (n.isURIResource()) {\n-                        System.out.println(\"n.isURIResource()  \" );\n-                    }\n-\n-                   // System.out.println(\"n.asResource().getNameURI() =\" + n.asResource().getURI());\n-//                    System.out.println(\"n.asResource().getPropertyResourceValue() =\" + n.asResource().getProperty\n-//                    System.out.println(\"n.asResource().getId() =\" + n.asResource().getId());\n-                } else if (n.isAnon()) {\n-                    System.out.println(\"n.isAnon() n.asNode().getName() \" + n.asNode().getName());\n-\n-                }\n-//            } else if (n.i\n-\n-//            if (p.getURI().equalsIgnoreCase(\n-//                    \"http://www.w3.org/2004/02/skos/core#broader\")\n-//                    && n.isResource()) {\n-//                Resource target = n.asResource();\n-//                if(!hasSubCategory(target.getURI()))\n-//                    set.add(target.getURI());\n-//                if(!hasSubCategory(r.getURI()))\n-//                    set.add(r.getURI());\n-//            }\n-        }\n-//        return set;\n-\n-    }\n-\n-    private static void test1() throws FileNotFoundException {\n-        Model m = ModelFactory.createDefaultModel();\n-\n-        Reader fileReader = new FileReader(fileName) ;\n-        Model m2 = m.read(fileReader, null, \"JSON-LD\");\n-//        Iterator it = m2.listObjects();\n-//        Iterator it = m2.listStatements();\n-        Iterator it = m2.listNameSpaces();\n-        while(it.hasNext()) {\n-            Object obj = it.next();\n-            System.out.println(obj);\n-        }\n-    }\n-\n-    private static Model test2() throws IOException {\n-\n-        org.apache.jena.rdf.model.Model model = ModelFactory.createDefaultModel();\n-        model.setNsPrefixes(PrefixMapping.Extended.Extended.Standard);\n-        model.setNsPrefix(\"xsd\", \"http://www.w3.org/2001/XMLSchema#\");\n-        model.setNsPrefix(\"skos\", \"http://www.w3.org/2004/02/skos/core#\");\n-        model.setNsPrefix(\"oboInOwl\", \"http://www.geneontology.org/formats/oboInOwl#\");\n-//        model.setNsPrefixes(prefixes);\n-        final InputStream is = Files.newInputStream(Paths.get(fileName));\n-        RDFDataMgr.read(model, is, Lang.RDFXML);\n-        return model;\n-    }\n-}\n"}}, {"oid": "77d5945ed42497f4c14c739298753a6841b02c4e", "url": "https://github.com/odpi/egeria/commit/77d5945ed42497f4c14c739298753a6841b02c4e", "message": "git 2941 fix formatting\n\nSigned-off-by: David Radley <david_radley@uk.ibm.com>", "committedDate": "2020-04-27T11:36:44Z", "type": "commit"}, {"oid": "a877f410c6aa2f3fad596d4f5de800892941e7f4", "url": "https://github.com/odpi/egeria/commit/a877f410c6aa2f3fad596d4f5de800892941e7f4", "message": "git 2941 fix formatting\n\nSigned-off-by: David Radley <david_radley@uk.ibm.com>", "committedDate": "2020-04-27T11:40:56Z", "type": "commit"}, {"oid": "e37260520ea90865202fa08e1b6cd756db9e06da", "url": "https://github.com/odpi/egeria/commit/e37260520ea90865202fa08e1b6cd756db9e06da", "message": "git 2941 add javdoc and remove unused methods\n\nSigned-off-by: David Radley <david_radley@uk.ibm.com>", "committedDate": "2020-04-27T12:16:24Z", "type": "commit"}, {"oid": "bdc52f15c330e78926a2e29656e385e11a357078", "url": "https://github.com/odpi/egeria/commit/bdc52f15c330e78926a2e29656e385e11a357078", "message": "Merge branch 'master' into git2941", "committedDate": "2020-04-27T14:12:54Z", "type": "commit"}, {"oid": "a962639462d50de576cf3732faaced0bedec302e", "url": "https://github.com/odpi/egeria/commit/a962639462d50de576cf3732faaced0bedec302e", "message": "Merge branch 'master' into git2941", "committedDate": "2020-04-27T20:11:11Z", "type": "commit"}, {"oid": "79e61a62fdfcd36ceee4c94282e44ed1fe6aacb8", "url": "https://github.com/odpi/egeria/commit/79e61a62fdfcd36ceee4c94282e44ed1fe6aacb8", "message": "Merge branch 'master' into git2941", "committedDate": "2020-04-28T14:16:51Z", "type": "commit"}, {"oid": "0ca6850ab2c867c95babca4d331eeaddd057894f", "url": "https://github.com/odpi/egeria/commit/0ca6850ab2c867c95babca4d331eeaddd057894f", "message": "Merge branch 'master' into git2941", "committedDate": "2020-04-29T08:10:23Z", "type": "commit"}]}