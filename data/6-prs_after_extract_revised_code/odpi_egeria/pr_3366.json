{"pr_number": 3366, "pr_title": "Added new methods to SubjectAreaRelationshipRESTResource for CategoryHierarchyLink.", "pr_createdAt": "2020-07-22T08:34:01Z", "pr_url": "https://github.com/odpi/egeria/pull/3366", "timeline": [{"oid": "12b4b328f7ca005439717eeaa67486a59db9a46e", "url": "https://github.com/odpi/egeria/commit/12b4b328f7ca005439717eeaa67486a59db9a46e", "message": "# Added rest methods for relationships\n\nSigned-off-by: immmus <fonto.trg@gmail.com>", "committedDate": "2020-07-22T08:15:42Z", "type": "commit"}, {"oid": "7d1cf0137f2b516576719909b1326dd54a6e09c5", "url": "https://github.com/odpi/egeria/commit/7d1cf0137f2b516576719909b1326dd54a6e09c5", "message": "# Added client for CategoryHierarchyLink\n\nSigned-off-by: immmus <fonto.trg@gmail.com>", "committedDate": "2020-07-22T08:16:02Z", "type": "commit"}, {"oid": "75c402c3465ea8589f9504d86478bde978d48cfb", "url": "https://github.com/odpi/egeria/commit/75c402c3465ea8589f9504d86478bde978d48cfb", "message": "# Added fvt for CategoryHierarchyLink\n\nSigned-off-by: immmus <fonto.trg@gmail.com>", "committedDate": "2020-07-22T08:16:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY1NjY4Mg==", "url": "https://github.com/odpi/egeria/pull/3366#discussion_r458656682", "bodyText": "It is more than a relationship between a category and another category, it is the relationship between a child category and its parent category. I think it is defined in the UML as \"Relationship between two categories used to create nested categories.\"\nIt is possible to create this relationship by specifying a category with a parentCategory", "author": "davidradl", "createdAt": "2020-07-22T09:21:44Z", "path": "open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/services/SubjectAreaRelationshipRESTServices.java", "diffHunk": "@@ -1935,6 +1935,107 @@ public SubjectAreaRelationshipRESTServices() {\n      */\n     public SubjectAreaOMASAPIResponse<SemanticAssignment> getSemanticAssignmentRelationship(String serverName, String userId, String guid) {\n         String restAPIName = \"getSemanticAssignmentRelationship\";\n-        return restoreLine(serverName, restAPIName, userId, SemanticAssignmentMapper.class, guid);\n+        return getLine(serverName, restAPIName, userId, SemanticAssignmentMapper.class, guid);\n+    }\n+\n+    /**\n+     * Update a CategoryHierarchyLink Relationship. A relationship between a Category and a Category.\n+     *\n+     * @param serverName           serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId               userId under which the request is performed\n+     * @param guid       guid of the CategoryAnchor relationship\n+     * @param categoryHierarchyLink the categoryAnchor relationship\n+     * @param isReplace            flag to indicate that this update is a replace. When not set only the supplied (non null) fields are updated.\n+     * @return response, when successful contains the updated categoryHierarchyLink\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> PropertyServerException              Property server exception. </li>\n+     * </ul>\n+     */\n+    public SubjectAreaOMASAPIResponse<CategoryHierarchyLink> updateCategoryHierarchyLink(String serverName, String userId, String guid, CategoryHierarchyLink categoryHierarchyLink, Boolean isReplace) {\n+        String restAPIName = \"updateCategoryHierarchyLink\";\n+        return updateLine(serverName,restAPIName, userId, guid, CategoryHierarchyLinkMapper.class, categoryHierarchyLink, isReplace);\n+    }\n+\n+    /**\n+     * Create a CategoryHierarchyLink Relationship. A relationship between a Category and a Category.", "originalCommit": "75c402c3465ea8589f9504d86478bde978d48cfb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "462ca9227f57d3266f8030cacf02124634823f61", "chunk": "diff --git a/open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/services/SubjectAreaRelationshipRESTServices.java b/open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/services/SubjectAreaRelationshipRESTServices.java\nindex 8fa0b66ebf..d1281106ca 100644\n--- a/open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/services/SubjectAreaRelationshipRESTServices.java\n+++ b/open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/services/SubjectAreaRelationshipRESTServices.java\n\n@@ -1939,13 +1939,13 @@ public class SubjectAreaRelationshipRESTServices extends SubjectAreaRESTServices\n     }\n \n     /**\n-     * Update a CategoryHierarchyLink Relationship. A relationship between a Category and a Category.\n+     * Update a CategoryHierarchyLink Relationship. A relationship between two categories used to create nested categories.\n      *\n-     * @param serverName           serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n-     * @param userId               userId under which the request is performed\n-     * @param guid       guid of the CategoryAnchor relationship\n-     * @param categoryHierarchyLink the categoryAnchor relationship\n-     * @param isReplace            flag to indicate that this update is a replace. When not set only the supplied (non null) fields are updated.\n+     * @param serverName            serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId                userId under which the request is performed\n+     * @param guid                  guid of the CategoryHierarchyLink relationship\n+     * @param categoryHierarchyLink the CategoryHierarchyLink relationship\n+     * @param isReplace             flag to indicate that this update is a replace. When not set only the supplied (non null) fields are updated.\n      * @return response, when successful contains the updated categoryHierarchyLink\n      * when not successful the following Exception responses can occur\n      * <ul>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY1OTI2Nw==", "url": "https://github.com/odpi/egeria/pull/3366#discussion_r458659267", "bodyText": "Could we get cat3 and validate that it has a parent of cat4 as well please.", "author": "davidradl", "createdAt": "2020-07-22T09:26:03Z", "path": "open-metadata-test/open-metadata-fvt/access-services-fvt/subject-area-fvt/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/fvt/RelationshipsFVT.java", "diffHunk": "@@ -198,6 +199,9 @@ public void run() throws SubjectAreaFVTCheckedException, InvalidParameterExcepti\n         projectFVT.deleteProject(project.getSystemAttributes().getGUID());\n         projectFVT.purgeProject(project.getSystemAttributes().getGUID());\n \n+        Category cat3 = catFVT.createCategory(DEFAULT_TEST_CAT_NAME3, glossaryGuid);\n+        Category cat4 = catFVT.createCategory(DEFAULT_TEST_CAT_NAME4, glossaryGuid);\n+        categoryHierarchyLinkFVT(cat3, cat4);\n     }", "originalCommit": "75c402c3465ea8589f9504d86478bde978d48cfb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY1OTU2NQ==", "url": "https://github.com/odpi/egeria/pull/3366#discussion_r458659565", "bodyText": "remove", "author": "davidradl", "createdAt": "2020-07-22T09:26:37Z", "path": "open-metadata-test/open-metadata-fvt/access-services-fvt/subject-area-fvt/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/fvt/RelationshipsFVT.java", "diffHunk": "@@ -1423,4 +1427,36 @@ private ProjectScope createProjectScope(Project project, Term term) throws Inval\n         System.out.println(\"CreatedProjectScopeRelationship \" + createdProjectScope);\n         return createdProjectScope;\n     }\n+\n+    private void categoryHierarchyLinkFVT(Category parent, Category child) throws UserNotAuthorizedException, PropertyServerException, InvalidParameterException, SubjectAreaFVTCheckedException {\n+        CategoryHierarchyLink categoryHierarchyLink = createCategoryHierarchyLink(parent, child);\n+        String guid = categoryHierarchyLink.getGuid();\n+        CategoryHierarchyLink gotCategoryHierarchyLink = subjectAreaRelationship.categoryHierarchyLink().getByGUID(this.userId, guid);\n+        FVTUtils.validateLine(gotCategoryHierarchyLink);\n+        System.out.println(\"Got CategoryHierarchyLink \" + categoryHierarchyLink);\n+        subjectAreaRelationship.categoryHierarchyLink().delete(this.userId, guid);\n+        //FVTUtils.validateLine(gotTermCategorizationRelationship);", "originalCommit": "75c402c3465ea8589f9504d86478bde978d48cfb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY4MDA5Mw==", "url": "https://github.com/odpi/egeria/pull/3366#discussion_r458680093", "bodyText": "No, There is \"got\" here. Remove after on 1439 line.", "author": "immmus", "createdAt": "2020-07-22T10:01:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY1OTU2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ5MTMyMA==", "url": "https://github.com/odpi/egeria/pull/3366#discussion_r459491320", "bodyText": "@immmus I am not sure I understand - I am suggesting we do not add commented out lines of code.", "author": "davidradl", "createdAt": "2020-07-23T14:27:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY1OTU2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "5a3b47005591e81d736a63886d97923ecf114d0d", "chunk": "diff --git a/open-metadata-test/open-metadata-fvt/access-services-fvt/subject-area-fvt/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/fvt/RelationshipsFVT.java b/open-metadata-test/open-metadata-fvt/access-services-fvt/subject-area-fvt/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/fvt/RelationshipsFVT.java\nindex 7f2ad4dceb..52248746f0 100644\n--- a/open-metadata-test/open-metadata-fvt/access-services-fvt/subject-area-fvt/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/fvt/RelationshipsFVT.java\n+++ b/open-metadata-test/open-metadata-fvt/access-services-fvt/subject-area-fvt/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/fvt/RelationshipsFVT.java\n\n@@ -1434,6 +1439,8 @@ public class RelationshipsFVT {\n         CategoryHierarchyLink gotCategoryHierarchyLink = subjectAreaRelationship.categoryHierarchyLink().getByGUID(this.userId, guid);\n         FVTUtils.validateLine(gotCategoryHierarchyLink);\n         System.out.println(\"Got CategoryHierarchyLink \" + categoryHierarchyLink);\n+        Category gotChild = subjectAreaCategory.getByGUID(userId, child.getSystemAttributes().getGUID());\n+        checkParent(parent, gotChild);\n         subjectAreaRelationship.categoryHierarchyLink().delete(this.userId, guid);\n         //FVTUtils.validateLine(gotTermCategorizationRelationship);\n         System.out.println(\"Soft deleted CategoryHierarchyLink with userId=\" + guid);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY2MDI4Nw==", "url": "https://github.com/odpi/egeria/pull/3366#discussion_r458660287", "bodyText": "should be CategoryHierarchyLink. formatting does not look right.", "author": "davidradl", "createdAt": "2020-07-22T09:27:47Z", "path": "open-metadata-implementation/access-services/subject-area/subject-area-spring/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/spring/SubjectAreaRelationshipRESTResource.java", "diffHunk": "@@ -1939,4 +1939,120 @@ public SubjectAreaRelationshipRESTResource() {\n                                                                                             @PathVariable String guid) {\n         return restAPI.getSemanticAssignmentRelationship(serverName, userId, guid);\n     }\n+\n+    /**\n+     * Create a CategoryHierarchyLink Relationship. A relationship between a Category and a Category.\n+     *\n+     * @param serverName                 serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId                     userId under which the request is performed\n+     * @param categoryHierarchyLink the CategoryHierarchyLink relationship\n+     * @return response, when successful contains the created categoryHierarchyLink relationship\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> PropertyServerException              Property server exception. </li>\n+     * </ul>\n+     */\n+    @PostMapping(path = \"/users/{userId}/relationships/category-hierarchy-link\")\n+    public SubjectAreaOMASAPIResponse<CategoryHierarchyLink> createCategoryHierarchyLink(@PathVariable String serverName,\n+                                                                                         @PathVariable String userId,\n+                                                                                         @RequestBody CategoryHierarchyLink categoryHierarchyLink) {\n+        return restAPI.createCategoryHierarchyLink(serverName, userId, categoryHierarchyLink);\n+    }\n+\n+    /**\n+     * Get a categoryAnchor Relationship. A relationship between a Category and a Category.\n+     *\n+     * @param serverName serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId     unique identifier for requesting user, under which the request is performed\n+     * @param guid       guid of the categoryAnchor Relationship to get\n+     * @return response which when successful contains the categoryAnchorRelationship relationship with the requested guid\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> PropertyServerException              Property server exception. </li>\n+     * </ul>\n+     */\n+    @GetMapping(path = \"/users/{userId}/relationships/category-hierarchy-link/{guid}\")\n+    public SubjectAreaOMASAPIResponse<CategoryHierarchyLink> getCategoryHierarchyLink(@PathVariable String serverName,\n+                                                                                      @PathVariable String userId,\n+                                                                                      @PathVariable String guid) {\n+        return restAPI.getCategoryHierarchyLink(serverName, userId, guid);\n+    }\n+\n+    /**\n+     * Update a CategoryHierarchyLink Relationship. A relationship between a Category and a Category.\n+     *\n+     * @param serverName           serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId               userId under which the request is performed\n+     * @param guid       guid of the CategoryAnchor relationship", "originalCommit": "75c402c3465ea8589f9504d86478bde978d48cfb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7846a26061328de9e8e21837afdd04bc30cb9b34", "chunk": "diff --git a/open-metadata-implementation/access-services/subject-area/subject-area-spring/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/spring/SubjectAreaRelationshipRESTResource.java b/open-metadata-implementation/access-services/subject-area/subject-area-spring/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/spring/SubjectAreaRelationshipRESTResource.java\nindex 1058913951..c4d85809fd 100644\n--- a/open-metadata-implementation/access-services/subject-area/subject-area-spring/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/spring/SubjectAreaRelationshipRESTResource.java\n+++ b/open-metadata-implementation/access-services/subject-area/subject-area-spring/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/spring/SubjectAreaRelationshipRESTResource.java\n\n@@ -1941,10 +1941,10 @@ public class SubjectAreaRelationshipRESTResource {\n     }\n \n     /**\n-     * Create a CategoryHierarchyLink Relationship. A relationship between a Category and a Category.\n+     * Create a CategoryHierarchyLink Relationship. A relationship between two categories used to create nested categories.\n      *\n-     * @param serverName                 serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n-     * @param userId                     userId under which the request is performed\n+     * @param serverName            serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId                userId under which the request is performed\n      * @param categoryHierarchyLink the CategoryHierarchyLink relationship\n      * @return response, when successful contains the created categoryHierarchyLink relationship\n      * when not successful the following Exception responses can occur\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY2MDY1NA==", "url": "https://github.com/odpi/egeria/pull/3366#discussion_r458660654", "bodyText": "should be CategoryHierarchyLink", "author": "davidradl", "createdAt": "2020-07-22T09:28:20Z", "path": "open-metadata-implementation/access-services/subject-area/subject-area-spring/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/spring/SubjectAreaRelationshipRESTResource.java", "diffHunk": "@@ -1939,4 +1939,120 @@ public SubjectAreaRelationshipRESTResource() {\n                                                                                             @PathVariable String guid) {\n         return restAPI.getSemanticAssignmentRelationship(serverName, userId, guid);\n     }\n+\n+    /**\n+     * Create a CategoryHierarchyLink Relationship. A relationship between a Category and a Category.\n+     *\n+     * @param serverName                 serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId                     userId under which the request is performed\n+     * @param categoryHierarchyLink the CategoryHierarchyLink relationship\n+     * @return response, when successful contains the created categoryHierarchyLink relationship\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> PropertyServerException              Property server exception. </li>\n+     * </ul>\n+     */\n+    @PostMapping(path = \"/users/{userId}/relationships/category-hierarchy-link\")\n+    public SubjectAreaOMASAPIResponse<CategoryHierarchyLink> createCategoryHierarchyLink(@PathVariable String serverName,\n+                                                                                         @PathVariable String userId,\n+                                                                                         @RequestBody CategoryHierarchyLink categoryHierarchyLink) {\n+        return restAPI.createCategoryHierarchyLink(serverName, userId, categoryHierarchyLink);\n+    }\n+\n+    /**\n+     * Get a categoryAnchor Relationship. A relationship between a Category and a Category.\n+     *\n+     * @param serverName serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId     unique identifier for requesting user, under which the request is performed\n+     * @param guid       guid of the categoryAnchor Relationship to get\n+     * @return response which when successful contains the categoryAnchorRelationship relationship with the requested guid\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> PropertyServerException              Property server exception. </li>\n+     * </ul>\n+     */\n+    @GetMapping(path = \"/users/{userId}/relationships/category-hierarchy-link/{guid}\")\n+    public SubjectAreaOMASAPIResponse<CategoryHierarchyLink> getCategoryHierarchyLink(@PathVariable String serverName,\n+                                                                                      @PathVariable String userId,\n+                                                                                      @PathVariable String guid) {\n+        return restAPI.getCategoryHierarchyLink(serverName, userId, guid);\n+    }\n+\n+    /**\n+     * Update a CategoryHierarchyLink Relationship. A relationship between a Category and a Category.\n+     *\n+     * @param serverName           serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId               userId under which the request is performed\n+     * @param guid       guid of the CategoryAnchor relationship\n+     * @param categoryHierarchyLink the categoryAnchor relationship", "originalCommit": "75c402c3465ea8589f9504d86478bde978d48cfb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7846a26061328de9e8e21837afdd04bc30cb9b34", "chunk": "diff --git a/open-metadata-implementation/access-services/subject-area/subject-area-spring/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/spring/SubjectAreaRelationshipRESTResource.java b/open-metadata-implementation/access-services/subject-area/subject-area-spring/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/spring/SubjectAreaRelationshipRESTResource.java\nindex 1058913951..c4d85809fd 100644\n--- a/open-metadata-implementation/access-services/subject-area/subject-area-spring/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/spring/SubjectAreaRelationshipRESTResource.java\n+++ b/open-metadata-implementation/access-services/subject-area/subject-area-spring/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/spring/SubjectAreaRelationshipRESTResource.java\n\n@@ -1941,10 +1941,10 @@ public class SubjectAreaRelationshipRESTResource {\n     }\n \n     /**\n-     * Create a CategoryHierarchyLink Relationship. A relationship between a Category and a Category.\n+     * Create a CategoryHierarchyLink Relationship. A relationship between two categories used to create nested categories.\n      *\n-     * @param serverName                 serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n-     * @param userId                     userId under which the request is performed\n+     * @param serverName            serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId                userId under which the request is performed\n      * @param categoryHierarchyLink the CategoryHierarchyLink relationship\n      * @return response, when successful contains the created categoryHierarchyLink relationship\n      * when not successful the following Exception responses can occur\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY2MDgwNw==", "url": "https://github.com/odpi/egeria/pull/3366#discussion_r458660807", "bodyText": "should be updateCategoryHierarchyLink", "author": "davidradl", "createdAt": "2020-07-22T09:28:37Z", "path": "open-metadata-implementation/access-services/subject-area/subject-area-spring/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/spring/SubjectAreaRelationshipRESTResource.java", "diffHunk": "@@ -1939,4 +1939,120 @@ public SubjectAreaRelationshipRESTResource() {\n                                                                                             @PathVariable String guid) {\n         return restAPI.getSemanticAssignmentRelationship(serverName, userId, guid);\n     }\n+\n+    /**\n+     * Create a CategoryHierarchyLink Relationship. A relationship between a Category and a Category.\n+     *\n+     * @param serverName                 serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId                     userId under which the request is performed\n+     * @param categoryHierarchyLink the CategoryHierarchyLink relationship\n+     * @return response, when successful contains the created categoryHierarchyLink relationship\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> PropertyServerException              Property server exception. </li>\n+     * </ul>\n+     */\n+    @PostMapping(path = \"/users/{userId}/relationships/category-hierarchy-link\")\n+    public SubjectAreaOMASAPIResponse<CategoryHierarchyLink> createCategoryHierarchyLink(@PathVariable String serverName,\n+                                                                                         @PathVariable String userId,\n+                                                                                         @RequestBody CategoryHierarchyLink categoryHierarchyLink) {\n+        return restAPI.createCategoryHierarchyLink(serverName, userId, categoryHierarchyLink);\n+    }\n+\n+    /**\n+     * Get a categoryAnchor Relationship. A relationship between a Category and a Category.\n+     *\n+     * @param serverName serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId     unique identifier for requesting user, under which the request is performed\n+     * @param guid       guid of the categoryAnchor Relationship to get\n+     * @return response which when successful contains the categoryAnchorRelationship relationship with the requested guid\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> PropertyServerException              Property server exception. </li>\n+     * </ul>\n+     */\n+    @GetMapping(path = \"/users/{userId}/relationships/category-hierarchy-link/{guid}\")\n+    public SubjectAreaOMASAPIResponse<CategoryHierarchyLink> getCategoryHierarchyLink(@PathVariable String serverName,\n+                                                                                      @PathVariable String userId,\n+                                                                                      @PathVariable String guid) {\n+        return restAPI.getCategoryHierarchyLink(serverName, userId, guid);\n+    }\n+\n+    /**\n+     * Update a CategoryHierarchyLink Relationship. A relationship between a Category and a Category.\n+     *\n+     * @param serverName           serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId               userId under which the request is performed\n+     * @param guid       guid of the CategoryAnchor relationship\n+     * @param categoryHierarchyLink the categoryAnchor relationship\n+     * @param isReplace            flag to indicate that this update is a replace. When not set only the supplied (non null) fields are updated.\n+     * @return response, when successful contains the updated categoryHierarchyLink\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> PropertyServerException              Property server exception. </li>\n+     * </ul>\n+     */\n+    @PutMapping(path = \"/users/{userId}/relationships/category-hierarchy-link/{guid}\")\n+    public SubjectAreaOMASAPIResponse<CategoryHierarchyLink> updateCategoryAnchor(@PathVariable String serverName,", "originalCommit": "75c402c3465ea8589f9504d86478bde978d48cfb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7846a26061328de9e8e21837afdd04bc30cb9b34", "chunk": "diff --git a/open-metadata-implementation/access-services/subject-area/subject-area-spring/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/spring/SubjectAreaRelationshipRESTResource.java b/open-metadata-implementation/access-services/subject-area/subject-area-spring/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/spring/SubjectAreaRelationshipRESTResource.java\nindex 1058913951..c4d85809fd 100644\n--- a/open-metadata-implementation/access-services/subject-area/subject-area-spring/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/spring/SubjectAreaRelationshipRESTResource.java\n+++ b/open-metadata-implementation/access-services/subject-area/subject-area-spring/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/spring/SubjectAreaRelationshipRESTResource.java\n\n@@ -1941,10 +1941,10 @@ public class SubjectAreaRelationshipRESTResource {\n     }\n \n     /**\n-     * Create a CategoryHierarchyLink Relationship. A relationship between a Category and a Category.\n+     * Create a CategoryHierarchyLink Relationship. A relationship between two categories used to create nested categories.\n      *\n-     * @param serverName                 serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n-     * @param userId                     userId under which the request is performed\n+     * @param serverName            serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId                userId under which the request is performed\n      * @param categoryHierarchyLink the CategoryHierarchyLink relationship\n      * @return response, when successful contains the created categoryHierarchyLink relationship\n      * when not successful the following Exception responses can occur\n"}}, {"oid": "7846a26061328de9e8e21837afdd04bc30cb9b34", "url": "https://github.com/odpi/egeria/commit/7846a26061328de9e8e21837afdd04bc30cb9b34", "message": "# Corrections\n\nSigned-off-by: immmus <fonto.trg@gmail.com>", "committedDate": "2020-07-22T10:44:53Z", "type": "commit"}, {"oid": "5a3b47005591e81d736a63886d97923ecf114d0d", "url": "https://github.com/odpi/egeria/commit/5a3b47005591e81d736a63886d97923ecf114d0d", "message": "# Added check a parent.\n\nSigned-off-by: immmus <fonto.trg@gmail.com>", "committedDate": "2020-07-22T10:45:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc0MzA4NA==", "url": "https://github.com/odpi/egeria/pull/3366#discussion_r458743084", "bodyText": "categoryAnchor incorrect", "author": "davidradl", "createdAt": "2020-07-22T12:07:40Z", "path": "open-metadata-implementation/access-services/subject-area/subject-area-spring/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/spring/SubjectAreaRelationshipRESTResource.java", "diffHunk": "@@ -1939,4 +1939,120 @@ public SubjectAreaRelationshipRESTResource() {\n                                                                                             @PathVariable String guid) {\n         return restAPI.getSemanticAssignmentRelationship(serverName, userId, guid);\n     }\n+\n+    /**\n+     * Create a CategoryHierarchyLink Relationship. A relationship between two categories used to create nested categories.\n+     *\n+     * @param serverName            serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId                userId under which the request is performed\n+     * @param categoryHierarchyLink the CategoryHierarchyLink relationship\n+     * @return response, when successful contains the created categoryHierarchyLink relationship\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> PropertyServerException              Property server exception. </li>\n+     * </ul>\n+     */\n+    @PostMapping(path = \"/users/{userId}/relationships/category-hierarchy-link\")\n+    public SubjectAreaOMASAPIResponse<CategoryHierarchyLink> createCategoryHierarchyLink(@PathVariable String serverName,\n+                                                                                         @PathVariable String userId,\n+                                                                                         @RequestBody CategoryHierarchyLink categoryHierarchyLink) {\n+        return restAPI.createCategoryHierarchyLink(serverName, userId, categoryHierarchyLink);\n+    }\n+\n+    /**\n+     * Get a categoryAnchor Relationship. A relationship between two categories used to create nested categories.", "originalCommit": "5a3b47005591e81d736a63886d97923ecf114d0d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "462ca9227f57d3266f8030cacf02124634823f61", "chunk": "diff --git a/open-metadata-implementation/access-services/subject-area/subject-area-spring/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/spring/SubjectAreaRelationshipRESTResource.java b/open-metadata-implementation/access-services/subject-area/subject-area-spring/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/spring/SubjectAreaRelationshipRESTResource.java\nindex c4d85809fd..8e0f2eb348 100644\n--- a/open-metadata-implementation/access-services/subject-area/subject-area-spring/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/spring/SubjectAreaRelationshipRESTResource.java\n+++ b/open-metadata-implementation/access-services/subject-area/subject-area-spring/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/spring/SubjectAreaRelationshipRESTResource.java\n\n@@ -1962,12 +1962,12 @@ public class SubjectAreaRelationshipRESTResource {\n     }\n \n     /**\n-     * Get a categoryAnchor Relationship. A relationship between two categories used to create nested categories.\n+     * Get a CategoryHierarchyLink Relationship. A relationship between two categories used to create nested categories.\n      *\n      * @param serverName serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n      * @param userId     unique identifier for requesting user, under which the request is performed\n-     * @param guid       guid of the categoryAnchor Relationship to get\n-     * @return response which when successful contains the categoryAnchorRelationship relationship with the requested guid\n+     * @param guid       guid of the CategoryHierarchyLink Relationship to get\n+     * @return response which when successful contains the CategoryHierarchyLink relationship with the requested guid\n      * when not successful the following Exception responses can occur\n      * <ul>\n      * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc0MzQ5MA==", "url": "https://github.com/odpi/egeria/pull/3366#discussion_r458743490", "bodyText": "CategoryAnchor incorrect and formatting", "author": "davidradl", "createdAt": "2020-07-22T12:08:28Z", "path": "open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/services/SubjectAreaRelationshipRESTServices.java", "diffHunk": "@@ -1935,6 +1935,107 @@ public SubjectAreaRelationshipRESTServices() {\n      */\n     public SubjectAreaOMASAPIResponse<SemanticAssignment> getSemanticAssignmentRelationship(String serverName, String userId, String guid) {\n         String restAPIName = \"getSemanticAssignmentRelationship\";\n-        return restoreLine(serverName, restAPIName, userId, SemanticAssignmentMapper.class, guid);\n+        return getLine(serverName, restAPIName, userId, SemanticAssignmentMapper.class, guid);\n+    }\n+\n+    /**\n+     * Update a CategoryHierarchyLink Relationship. A relationship between a Category and a Category.\n+     *\n+     * @param serverName           serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId               userId under which the request is performed\n+     * @param guid       guid of the CategoryAnchor relationship", "originalCommit": "5a3b47005591e81d736a63886d97923ecf114d0d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "462ca9227f57d3266f8030cacf02124634823f61", "chunk": "diff --git a/open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/services/SubjectAreaRelationshipRESTServices.java b/open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/services/SubjectAreaRelationshipRESTServices.java\nindex 8fa0b66ebf..d1281106ca 100644\n--- a/open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/services/SubjectAreaRelationshipRESTServices.java\n+++ b/open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/services/SubjectAreaRelationshipRESTServices.java\n\n@@ -1939,13 +1939,13 @@ public class SubjectAreaRelationshipRESTServices extends SubjectAreaRESTServices\n     }\n \n     /**\n-     * Update a CategoryHierarchyLink Relationship. A relationship between a Category and a Category.\n+     * Update a CategoryHierarchyLink Relationship. A relationship between two categories used to create nested categories.\n      *\n-     * @param serverName           serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n-     * @param userId               userId under which the request is performed\n-     * @param guid       guid of the CategoryAnchor relationship\n-     * @param categoryHierarchyLink the categoryAnchor relationship\n-     * @param isReplace            flag to indicate that this update is a replace. When not set only the supplied (non null) fields are updated.\n+     * @param serverName            serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId                userId under which the request is performed\n+     * @param guid                  guid of the CategoryHierarchyLink relationship\n+     * @param categoryHierarchyLink the CategoryHierarchyLink relationship\n+     * @param isReplace             flag to indicate that this update is a replace. When not set only the supplied (non null) fields are updated.\n      * @return response, when successful contains the updated categoryHierarchyLink\n      * when not successful the following Exception responses can occur\n      * <ul>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc0MzU1OQ==", "url": "https://github.com/odpi/egeria/pull/3366#discussion_r458743559", "bodyText": "CategoryAnchor incorrect and formatting", "author": "davidradl", "createdAt": "2020-07-22T12:08:37Z", "path": "open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/services/SubjectAreaRelationshipRESTServices.java", "diffHunk": "@@ -1935,6 +1935,107 @@ public SubjectAreaRelationshipRESTServices() {\n      */\n     public SubjectAreaOMASAPIResponse<SemanticAssignment> getSemanticAssignmentRelationship(String serverName, String userId, String guid) {\n         String restAPIName = \"getSemanticAssignmentRelationship\";\n-        return restoreLine(serverName, restAPIName, userId, SemanticAssignmentMapper.class, guid);\n+        return getLine(serverName, restAPIName, userId, SemanticAssignmentMapper.class, guid);\n+    }\n+\n+    /**\n+     * Update a CategoryHierarchyLink Relationship. A relationship between a Category and a Category.\n+     *\n+     * @param serverName           serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId               userId under which the request is performed\n+     * @param guid       guid of the CategoryAnchor relationship\n+     * @param categoryHierarchyLink the categoryAnchor relationship", "originalCommit": "5a3b47005591e81d736a63886d97923ecf114d0d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "462ca9227f57d3266f8030cacf02124634823f61", "chunk": "diff --git a/open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/services/SubjectAreaRelationshipRESTServices.java b/open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/services/SubjectAreaRelationshipRESTServices.java\nindex 8fa0b66ebf..d1281106ca 100644\n--- a/open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/services/SubjectAreaRelationshipRESTServices.java\n+++ b/open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/services/SubjectAreaRelationshipRESTServices.java\n\n@@ -1939,13 +1939,13 @@ public class SubjectAreaRelationshipRESTServices extends SubjectAreaRESTServices\n     }\n \n     /**\n-     * Update a CategoryHierarchyLink Relationship. A relationship between a Category and a Category.\n+     * Update a CategoryHierarchyLink Relationship. A relationship between two categories used to create nested categories.\n      *\n-     * @param serverName           serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n-     * @param userId               userId under which the request is performed\n-     * @param guid       guid of the CategoryAnchor relationship\n-     * @param categoryHierarchyLink the categoryAnchor relationship\n-     * @param isReplace            flag to indicate that this update is a replace. When not set only the supplied (non null) fields are updated.\n+     * @param serverName            serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId                userId under which the request is performed\n+     * @param guid                  guid of the CategoryHierarchyLink relationship\n+     * @param categoryHierarchyLink the CategoryHierarchyLink relationship\n+     * @param isReplace             flag to indicate that this update is a replace. When not set only the supplied (non null) fields are updated.\n      * @return response, when successful contains the updated categoryHierarchyLink\n      * when not successful the following Exception responses can occur\n      * <ul>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc0Mzc0MQ==", "url": "https://github.com/odpi/egeria/pull/3366#discussion_r458743741", "bodyText": "CategoryAnchor incorrect", "author": "davidradl", "createdAt": "2020-07-22T12:08:56Z", "path": "open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/services/SubjectAreaRelationshipRESTServices.java", "diffHunk": "@@ -1935,6 +1935,107 @@ public SubjectAreaRelationshipRESTServices() {\n      */\n     public SubjectAreaOMASAPIResponse<SemanticAssignment> getSemanticAssignmentRelationship(String serverName, String userId, String guid) {\n         String restAPIName = \"getSemanticAssignmentRelationship\";\n-        return restoreLine(serverName, restAPIName, userId, SemanticAssignmentMapper.class, guid);\n+        return getLine(serverName, restAPIName, userId, SemanticAssignmentMapper.class, guid);\n+    }\n+\n+    /**\n+     * Update a CategoryHierarchyLink Relationship. A relationship between a Category and a Category.\n+     *\n+     * @param serverName           serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId               userId under which the request is performed\n+     * @param guid       guid of the CategoryAnchor relationship\n+     * @param categoryHierarchyLink the categoryAnchor relationship\n+     * @param isReplace            flag to indicate that this update is a replace. When not set only the supplied (non null) fields are updated.\n+     * @return response, when successful contains the updated categoryHierarchyLink\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> PropertyServerException              Property server exception. </li>\n+     * </ul>\n+     */\n+    public SubjectAreaOMASAPIResponse<CategoryHierarchyLink> updateCategoryHierarchyLink(String serverName, String userId, String guid, CategoryHierarchyLink categoryHierarchyLink, Boolean isReplace) {\n+        String restAPIName = \"updateCategoryHierarchyLink\";\n+        return updateLine(serverName,restAPIName, userId, guid, CategoryHierarchyLinkMapper.class, categoryHierarchyLink, isReplace);\n+    }\n+\n+    /**\n+     * Create a CategoryHierarchyLink Relationship. A relationship between a Category and a Category.\n+     *\n+     * @param serverName                 serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId                     userId under which the request is performed\n+     * @param categoryHierarchyLink the CategoryHierarchyLink relationship\n+     * @return response, when successful contains the created categoryHierarchyLink relationship\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> PropertyServerException              Property server exception. </li>\n+     * </ul>\n+     */\n+    public SubjectAreaOMASAPIResponse<CategoryHierarchyLink> createCategoryHierarchyLink(String serverName, String userId, CategoryHierarchyLink categoryHierarchyLink) {\n+        String restAPIName = \"createCategoryHierarchyLink\";\n+        return createLine(serverName,restAPIName,userId, CategoryHierarchyLinkMapper.class, categoryHierarchyLink);\n+    }\n+\n+    /**\n+     * Get a categoryAnchor Relationship. A relationship between a Category and a Category.", "originalCommit": "5a3b47005591e81d736a63886d97923ecf114d0d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "462ca9227f57d3266f8030cacf02124634823f61", "chunk": "diff --git a/open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/services/SubjectAreaRelationshipRESTServices.java b/open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/services/SubjectAreaRelationshipRESTServices.java\nindex 8fa0b66ebf..d1281106ca 100644\n--- a/open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/services/SubjectAreaRelationshipRESTServices.java\n+++ b/open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/services/SubjectAreaRelationshipRESTServices.java\n\n@@ -1939,13 +1939,13 @@ public class SubjectAreaRelationshipRESTServices extends SubjectAreaRESTServices\n     }\n \n     /**\n-     * Update a CategoryHierarchyLink Relationship. A relationship between a Category and a Category.\n+     * Update a CategoryHierarchyLink Relationship. A relationship between two categories used to create nested categories.\n      *\n-     * @param serverName           serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n-     * @param userId               userId under which the request is performed\n-     * @param guid       guid of the CategoryAnchor relationship\n-     * @param categoryHierarchyLink the categoryAnchor relationship\n-     * @param isReplace            flag to indicate that this update is a replace. When not set only the supplied (non null) fields are updated.\n+     * @param serverName            serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId                userId under which the request is performed\n+     * @param guid                  guid of the CategoryHierarchyLink relationship\n+     * @param categoryHierarchyLink the CategoryHierarchyLink relationship\n+     * @param isReplace             flag to indicate that this update is a replace. When not set only the supplied (non null) fields are updated.\n      * @return response, when successful contains the updated categoryHierarchyLink\n      * when not successful the following Exception responses can occur\n      * <ul>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc0NDAwMw==", "url": "https://github.com/odpi/egeria/pull/3366#discussion_r458744003", "bodyText": "CategoryAnchor incorrect", "author": "davidradl", "createdAt": "2020-07-22T12:09:28Z", "path": "open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/services/SubjectAreaRelationshipRESTServices.java", "diffHunk": "@@ -1935,6 +1935,107 @@ public SubjectAreaRelationshipRESTServices() {\n      */\n     public SubjectAreaOMASAPIResponse<SemanticAssignment> getSemanticAssignmentRelationship(String serverName, String userId, String guid) {\n         String restAPIName = \"getSemanticAssignmentRelationship\";\n-        return restoreLine(serverName, restAPIName, userId, SemanticAssignmentMapper.class, guid);\n+        return getLine(serverName, restAPIName, userId, SemanticAssignmentMapper.class, guid);\n+    }\n+\n+    /**\n+     * Update a CategoryHierarchyLink Relationship. A relationship between a Category and a Category.\n+     *\n+     * @param serverName           serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId               userId under which the request is performed\n+     * @param guid       guid of the CategoryAnchor relationship\n+     * @param categoryHierarchyLink the categoryAnchor relationship\n+     * @param isReplace            flag to indicate that this update is a replace. When not set only the supplied (non null) fields are updated.\n+     * @return response, when successful contains the updated categoryHierarchyLink\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> PropertyServerException              Property server exception. </li>\n+     * </ul>\n+     */\n+    public SubjectAreaOMASAPIResponse<CategoryHierarchyLink> updateCategoryHierarchyLink(String serverName, String userId, String guid, CategoryHierarchyLink categoryHierarchyLink, Boolean isReplace) {\n+        String restAPIName = \"updateCategoryHierarchyLink\";\n+        return updateLine(serverName,restAPIName, userId, guid, CategoryHierarchyLinkMapper.class, categoryHierarchyLink, isReplace);\n+    }\n+\n+    /**\n+     * Create a CategoryHierarchyLink Relationship. A relationship between a Category and a Category.\n+     *\n+     * @param serverName                 serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId                     userId under which the request is performed\n+     * @param categoryHierarchyLink the CategoryHierarchyLink relationship\n+     * @return response, when successful contains the created categoryHierarchyLink relationship\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> PropertyServerException              Property server exception. </li>\n+     * </ul>\n+     */\n+    public SubjectAreaOMASAPIResponse<CategoryHierarchyLink> createCategoryHierarchyLink(String serverName, String userId, CategoryHierarchyLink categoryHierarchyLink) {\n+        String restAPIName = \"createCategoryHierarchyLink\";\n+        return createLine(serverName,restAPIName,userId, CategoryHierarchyLinkMapper.class, categoryHierarchyLink);\n+    }\n+\n+    /**\n+     * Get a categoryAnchor Relationship. A relationship between a Category and a Category.\n+     *\n+     * @param serverName serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId     unique identifier for requesting user, under which the request is performed\n+     * @param guid       guid of the categoryAnchor Relationship to get", "originalCommit": "5a3b47005591e81d736a63886d97923ecf114d0d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "462ca9227f57d3266f8030cacf02124634823f61", "chunk": "diff --git a/open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/services/SubjectAreaRelationshipRESTServices.java b/open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/services/SubjectAreaRelationshipRESTServices.java\nindex 8fa0b66ebf..d1281106ca 100644\n--- a/open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/services/SubjectAreaRelationshipRESTServices.java\n+++ b/open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/services/SubjectAreaRelationshipRESTServices.java\n\n@@ -1939,13 +1939,13 @@ public class SubjectAreaRelationshipRESTServices extends SubjectAreaRESTServices\n     }\n \n     /**\n-     * Update a CategoryHierarchyLink Relationship. A relationship between a Category and a Category.\n+     * Update a CategoryHierarchyLink Relationship. A relationship between two categories used to create nested categories.\n      *\n-     * @param serverName           serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n-     * @param userId               userId under which the request is performed\n-     * @param guid       guid of the CategoryAnchor relationship\n-     * @param categoryHierarchyLink the categoryAnchor relationship\n-     * @param isReplace            flag to indicate that this update is a replace. When not set only the supplied (non null) fields are updated.\n+     * @param serverName            serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId                userId under which the request is performed\n+     * @param guid                  guid of the CategoryHierarchyLink relationship\n+     * @param categoryHierarchyLink the CategoryHierarchyLink relationship\n+     * @param isReplace             flag to indicate that this update is a replace. When not set only the supplied (non null) fields are updated.\n      * @return response, when successful contains the updated categoryHierarchyLink\n      * when not successful the following Exception responses can occur\n      * <ul>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc0NDMxOA==", "url": "https://github.com/odpi/egeria/pull/3366#discussion_r458744318", "bodyText": "CategoryAnchor incorrect - I suggest we do not need the word relationship here", "author": "davidradl", "createdAt": "2020-07-22T12:10:00Z", "path": "open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/services/SubjectAreaRelationshipRESTServices.java", "diffHunk": "@@ -1935,6 +1935,107 @@ public SubjectAreaRelationshipRESTServices() {\n      */\n     public SubjectAreaOMASAPIResponse<SemanticAssignment> getSemanticAssignmentRelationship(String serverName, String userId, String guid) {\n         String restAPIName = \"getSemanticAssignmentRelationship\";\n-        return restoreLine(serverName, restAPIName, userId, SemanticAssignmentMapper.class, guid);\n+        return getLine(serverName, restAPIName, userId, SemanticAssignmentMapper.class, guid);\n+    }\n+\n+    /**\n+     * Update a CategoryHierarchyLink Relationship. A relationship between a Category and a Category.\n+     *\n+     * @param serverName           serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId               userId under which the request is performed\n+     * @param guid       guid of the CategoryAnchor relationship\n+     * @param categoryHierarchyLink the categoryAnchor relationship\n+     * @param isReplace            flag to indicate that this update is a replace. When not set only the supplied (non null) fields are updated.\n+     * @return response, when successful contains the updated categoryHierarchyLink\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> PropertyServerException              Property server exception. </li>\n+     * </ul>\n+     */\n+    public SubjectAreaOMASAPIResponse<CategoryHierarchyLink> updateCategoryHierarchyLink(String serverName, String userId, String guid, CategoryHierarchyLink categoryHierarchyLink, Boolean isReplace) {\n+        String restAPIName = \"updateCategoryHierarchyLink\";\n+        return updateLine(serverName,restAPIName, userId, guid, CategoryHierarchyLinkMapper.class, categoryHierarchyLink, isReplace);\n+    }\n+\n+    /**\n+     * Create a CategoryHierarchyLink Relationship. A relationship between a Category and a Category.\n+     *\n+     * @param serverName                 serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId                     userId under which the request is performed\n+     * @param categoryHierarchyLink the CategoryHierarchyLink relationship\n+     * @return response, when successful contains the created categoryHierarchyLink relationship\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> PropertyServerException              Property server exception. </li>\n+     * </ul>\n+     */\n+    public SubjectAreaOMASAPIResponse<CategoryHierarchyLink> createCategoryHierarchyLink(String serverName, String userId, CategoryHierarchyLink categoryHierarchyLink) {\n+        String restAPIName = \"createCategoryHierarchyLink\";\n+        return createLine(serverName,restAPIName,userId, CategoryHierarchyLinkMapper.class, categoryHierarchyLink);\n+    }\n+\n+    /**\n+     * Get a categoryAnchor Relationship. A relationship between a Category and a Category.\n+     *\n+     * @param serverName serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId     unique identifier for requesting user, under which the request is performed\n+     * @param guid       guid of the categoryAnchor Relationship to get\n+     * @return response which when successful contains the categoryAnchorRelationship relationship with the requested guid", "originalCommit": "5a3b47005591e81d736a63886d97923ecf114d0d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "462ca9227f57d3266f8030cacf02124634823f61", "chunk": "diff --git a/open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/services/SubjectAreaRelationshipRESTServices.java b/open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/services/SubjectAreaRelationshipRESTServices.java\nindex 8fa0b66ebf..d1281106ca 100644\n--- a/open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/services/SubjectAreaRelationshipRESTServices.java\n+++ b/open-metadata-implementation/access-services/subject-area/subject-area-server/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/services/SubjectAreaRelationshipRESTServices.java\n\n@@ -1939,13 +1939,13 @@ public class SubjectAreaRelationshipRESTServices extends SubjectAreaRESTServices\n     }\n \n     /**\n-     * Update a CategoryHierarchyLink Relationship. A relationship between a Category and a Category.\n+     * Update a CategoryHierarchyLink Relationship. A relationship between two categories used to create nested categories.\n      *\n-     * @param serverName           serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n-     * @param userId               userId under which the request is performed\n-     * @param guid       guid of the CategoryAnchor relationship\n-     * @param categoryHierarchyLink the categoryAnchor relationship\n-     * @param isReplace            flag to indicate that this update is a replace. When not set only the supplied (non null) fields are updated.\n+     * @param serverName            serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId                userId under which the request is performed\n+     * @param guid                  guid of the CategoryHierarchyLink relationship\n+     * @param categoryHierarchyLink the CategoryHierarchyLink relationship\n+     * @param isReplace             flag to indicate that this update is a replace. When not set only the supplied (non null) fields are updated.\n      * @return response, when successful contains the updated categoryHierarchyLink\n      * when not successful the following Exception responses can occur\n      * <ul>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc0NDc5OA==", "url": "https://github.com/odpi/egeria/pull/3366#discussion_r458744798", "bodyText": "CategoryAnchor incorrect", "author": "davidradl", "createdAt": "2020-07-22T12:10:52Z", "path": "open-metadata-implementation/access-services/subject-area/subject-area-spring/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/spring/SubjectAreaRelationshipRESTResource.java", "diffHunk": "@@ -1939,4 +1939,120 @@ public SubjectAreaRelationshipRESTResource() {\n                                                                                             @PathVariable String guid) {\n         return restAPI.getSemanticAssignmentRelationship(serverName, userId, guid);\n     }\n+\n+    /**\n+     * Create a CategoryHierarchyLink Relationship. A relationship between two categories used to create nested categories.\n+     *\n+     * @param serverName            serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId                userId under which the request is performed\n+     * @param categoryHierarchyLink the CategoryHierarchyLink relationship\n+     * @return response, when successful contains the created categoryHierarchyLink relationship\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> PropertyServerException              Property server exception. </li>\n+     * </ul>\n+     */\n+    @PostMapping(path = \"/users/{userId}/relationships/category-hierarchy-link\")\n+    public SubjectAreaOMASAPIResponse<CategoryHierarchyLink> createCategoryHierarchyLink(@PathVariable String serverName,\n+                                                                                         @PathVariable String userId,\n+                                                                                         @RequestBody CategoryHierarchyLink categoryHierarchyLink) {\n+        return restAPI.createCategoryHierarchyLink(serverName, userId, categoryHierarchyLink);\n+    }\n+\n+    /**\n+     * Get a categoryAnchor Relationship. A relationship between two categories used to create nested categories.\n+     *\n+     * @param serverName serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId     unique identifier for requesting user, under which the request is performed\n+     * @param guid       guid of the categoryAnchor Relationship to get", "originalCommit": "5a3b47005591e81d736a63886d97923ecf114d0d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "462ca9227f57d3266f8030cacf02124634823f61", "chunk": "diff --git a/open-metadata-implementation/access-services/subject-area/subject-area-spring/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/spring/SubjectAreaRelationshipRESTResource.java b/open-metadata-implementation/access-services/subject-area/subject-area-spring/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/spring/SubjectAreaRelationshipRESTResource.java\nindex c4d85809fd..8e0f2eb348 100644\n--- a/open-metadata-implementation/access-services/subject-area/subject-area-spring/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/spring/SubjectAreaRelationshipRESTResource.java\n+++ b/open-metadata-implementation/access-services/subject-area/subject-area-spring/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/spring/SubjectAreaRelationshipRESTResource.java\n\n@@ -1962,12 +1962,12 @@ public class SubjectAreaRelationshipRESTResource {\n     }\n \n     /**\n-     * Get a categoryAnchor Relationship. A relationship between two categories used to create nested categories.\n+     * Get a CategoryHierarchyLink Relationship. A relationship between two categories used to create nested categories.\n      *\n      * @param serverName serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n      * @param userId     unique identifier for requesting user, under which the request is performed\n-     * @param guid       guid of the categoryAnchor Relationship to get\n-     * @return response which when successful contains the categoryAnchorRelationship relationship with the requested guid\n+     * @param guid       guid of the CategoryHierarchyLink Relationship to get\n+     * @return response which when successful contains the CategoryHierarchyLink relationship with the requested guid\n      * when not successful the following Exception responses can occur\n      * <ul>\n      * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc0NDg2Nw==", "url": "https://github.com/odpi/egeria/pull/3366#discussion_r458744867", "bodyText": "CategoryAnchor incorrect and formatting", "author": "davidradl", "createdAt": "2020-07-22T12:10:59Z", "path": "open-metadata-implementation/access-services/subject-area/subject-area-spring/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/spring/SubjectAreaRelationshipRESTResource.java", "diffHunk": "@@ -1939,4 +1939,120 @@ public SubjectAreaRelationshipRESTResource() {\n                                                                                             @PathVariable String guid) {\n         return restAPI.getSemanticAssignmentRelationship(serverName, userId, guid);\n     }\n+\n+    /**\n+     * Create a CategoryHierarchyLink Relationship. A relationship between two categories used to create nested categories.\n+     *\n+     * @param serverName            serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId                userId under which the request is performed\n+     * @param categoryHierarchyLink the CategoryHierarchyLink relationship\n+     * @return response, when successful contains the created categoryHierarchyLink relationship\n+     * when not successful the following Exception responses can occur\n+     * <ul>\n+     * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n+     * <li> InvalidParameterException            one of the parameters is null or invalid.</li>\n+     * <li> PropertyServerException              Property server exception. </li>\n+     * </ul>\n+     */\n+    @PostMapping(path = \"/users/{userId}/relationships/category-hierarchy-link\")\n+    public SubjectAreaOMASAPIResponse<CategoryHierarchyLink> createCategoryHierarchyLink(@PathVariable String serverName,\n+                                                                                         @PathVariable String userId,\n+                                                                                         @RequestBody CategoryHierarchyLink categoryHierarchyLink) {\n+        return restAPI.createCategoryHierarchyLink(serverName, userId, categoryHierarchyLink);\n+    }\n+\n+    /**\n+     * Get a categoryAnchor Relationship. A relationship between two categories used to create nested categories.\n+     *\n+     * @param serverName serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n+     * @param userId     unique identifier for requesting user, under which the request is performed\n+     * @param guid       guid of the categoryAnchor Relationship to get\n+     * @return response which when successful contains the categoryAnchorRelationship relationship with the requested guid", "originalCommit": "5a3b47005591e81d736a63886d97923ecf114d0d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "462ca9227f57d3266f8030cacf02124634823f61", "chunk": "diff --git a/open-metadata-implementation/access-services/subject-area/subject-area-spring/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/spring/SubjectAreaRelationshipRESTResource.java b/open-metadata-implementation/access-services/subject-area/subject-area-spring/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/spring/SubjectAreaRelationshipRESTResource.java\nindex c4d85809fd..8e0f2eb348 100644\n--- a/open-metadata-implementation/access-services/subject-area/subject-area-spring/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/spring/SubjectAreaRelationshipRESTResource.java\n+++ b/open-metadata-implementation/access-services/subject-area/subject-area-spring/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/server/spring/SubjectAreaRelationshipRESTResource.java\n\n@@ -1962,12 +1962,12 @@ public class SubjectAreaRelationshipRESTResource {\n     }\n \n     /**\n-     * Get a categoryAnchor Relationship. A relationship between two categories used to create nested categories.\n+     * Get a CategoryHierarchyLink Relationship. A relationship between two categories used to create nested categories.\n      *\n      * @param serverName serverName under which this request is performed, this is used in multi tenanting to identify the tenant\n      * @param userId     unique identifier for requesting user, under which the request is performed\n-     * @param guid       guid of the categoryAnchor Relationship to get\n-     * @return response which when successful contains the categoryAnchorRelationship relationship with the requested guid\n+     * @param guid       guid of the CategoryHierarchyLink Relationship to get\n+     * @return response which when successful contains the CategoryHierarchyLink relationship with the requested guid\n      * when not successful the following Exception responses can occur\n      * <ul>\n      * <li> UserNotAuthorizedException           the requesting user is not authorized to issue this request.</li>\n"}}, {"oid": "40dda19ee6026d60514b12c2bdfdfcbfe510329e", "url": "https://github.com/odpi/egeria/commit/40dda19ee6026d60514b12c2bdfdfcbfe510329e", "message": "Merge branch 'master' into new_rest_relationships_methods", "committedDate": "2020-07-22T12:11:23Z", "type": "commit"}, {"oid": "462ca9227f57d3266f8030cacf02124634823f61", "url": "https://github.com/odpi/egeria/commit/462ca9227f57d3266f8030cacf02124634823f61", "message": "# Corrections.\n\nSigned-off-by: immmus <fonto.trg@gmail.com>", "committedDate": "2020-07-22T13:09:50Z", "type": "commit"}, {"oid": "64b8a846585d52a5e7addc42bdb7e8c85bf0befb", "url": "https://github.com/odpi/egeria/commit/64b8a846585d52a5e7addc42bdb7e8c85bf0befb", "message": "Merge remote-tracking branch 'origin/new_rest_relationships_methods' into new_rest_relationships_methods", "committedDate": "2020-07-22T13:10:06Z", "type": "commit"}, {"oid": "b43b3fac563ce119c01277ba3b1a9931a977b922", "url": "https://github.com/odpi/egeria/commit/b43b3fac563ce119c01277ba3b1a9931a977b922", "message": "Merge branch 'master' into new_rest_relationships_methods", "committedDate": "2020-07-23T06:35:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ5MjUyNQ==", "url": "https://github.com/odpi/egeria/pull/3366#discussion_r459492525", "bodyText": "@immmus I suggest we remove the commented out line of code we are adding", "author": "davidradl", "createdAt": "2020-07-23T14:29:00Z", "path": "open-metadata-test/open-metadata-fvt/access-services-fvt/subject-area-fvt/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/fvt/RelationshipsFVT.java", "diffHunk": "@@ -1423,4 +1432,52 @@ private ProjectScope createProjectScope(Project project, Term term) throws Inval\n         System.out.println(\"CreatedProjectScopeRelationship \" + createdProjectScope);\n         return createdProjectScope;\n     }\n+\n+    private void categoryHierarchyLinkFVT(Category parent, Category child) throws UserNotAuthorizedException, PropertyServerException, InvalidParameterException, SubjectAreaFVTCheckedException {\n+        CategoryHierarchyLink categoryHierarchyLink = createCategoryHierarchyLink(parent, child);\n+        String guid = categoryHierarchyLink.getGuid();\n+        CategoryHierarchyLink gotCategoryHierarchyLink = subjectAreaRelationship.categoryHierarchyLink().getByGUID(this.userId, guid);\n+        FVTUtils.validateLine(gotCategoryHierarchyLink);\n+        System.out.println(\"Got CategoryHierarchyLink \" + categoryHierarchyLink);\n+        Category gotChild = subjectAreaCategory.getByGUID(userId, child.getSystemAttributes().getGUID());\n+        checkParent(parent, gotChild);\n+        subjectAreaRelationship.categoryHierarchyLink().delete(this.userId, guid);\n+        //FVTUtils.validateLine(gotTermCategorizationRelationship);\n+        System.out.println(\"Soft deleted CategoryHierarchyLink with userId=\" + guid);\n+        gotCategoryHierarchyLink = subjectAreaRelationship.categoryHierarchyLink().restore(this.userId, guid);\n+        FVTUtils.validateLine(gotCategoryHierarchyLink);\n+        System.out.println(\"Restored CategoryHierarchyLink with userId=\" + guid);\n+        subjectAreaRelationship.categoryHierarchyLink().delete(this.userId, guid);\n+        //FVTUtils.validateLine(gotTermCategorizationRelationship);", "originalCommit": "b43b3fac563ce119c01277ba3b1a9931a977b922", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUzMTQ2Nw==", "url": "https://github.com/odpi/egeria/pull/3366#discussion_r459531467", "bodyText": "I agree to you", "author": "immmus", "createdAt": "2020-07-23T15:21:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ5MjUyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "4e45ca1cae772fe7bdd330854d5d661beded1c8e", "chunk": "diff --git a/open-metadata-test/open-metadata-fvt/access-services-fvt/subject-area-fvt/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/fvt/RelationshipsFVT.java b/open-metadata-test/open-metadata-fvt/access-services-fvt/subject-area-fvt/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/fvt/RelationshipsFVT.java\nindex 52248746f0..6f031b784b 100644\n--- a/open-metadata-test/open-metadata-fvt/access-services-fvt/subject-area-fvt/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/fvt/RelationshipsFVT.java\n+++ b/open-metadata-test/open-metadata-fvt/access-services-fvt/subject-area-fvt/src/main/java/org/odpi/openmetadata/accessservices/subjectarea/fvt/RelationshipsFVT.java\n\n@@ -1442,13 +1442,11 @@ public class RelationshipsFVT {\n         Category gotChild = subjectAreaCategory.getByGUID(userId, child.getSystemAttributes().getGUID());\n         checkParent(parent, gotChild);\n         subjectAreaRelationship.categoryHierarchyLink().delete(this.userId, guid);\n-        //FVTUtils.validateLine(gotTermCategorizationRelationship);\n         System.out.println(\"Soft deleted CategoryHierarchyLink with userId=\" + guid);\n         gotCategoryHierarchyLink = subjectAreaRelationship.categoryHierarchyLink().restore(this.userId, guid);\n         FVTUtils.validateLine(gotCategoryHierarchyLink);\n         System.out.println(\"Restored CategoryHierarchyLink with userId=\" + guid);\n         subjectAreaRelationship.categoryHierarchyLink().delete(this.userId, guid);\n-        //FVTUtils.validateLine(gotTermCategorizationRelationship);\n         System.out.println(\"Soft deleted CategoryHierarchyLink with userId=\" + guid);\n         subjectAreaRelationship.categoryHierarchyLink().purge(this.userId, guid);\n         System.out.println(\"Hard deleted CategoryHierarchyLink with userId=\" + guid);\n"}}, {"oid": "4e45ca1cae772fe7bdd330854d5d661beded1c8e", "url": "https://github.com/odpi/egeria/commit/4e45ca1cae772fe7bdd330854d5d661beded1c8e", "message": "# Remove comments\n\nSigned-off-by: immmus <fonto.trg@gmail.com>", "committedDate": "2020-07-23T16:06:56Z", "type": "commit"}, {"oid": "22760604c816991fc12af7b2266e70a1fb206b89", "url": "https://github.com/odpi/egeria/commit/22760604c816991fc12af7b2266e70a1fb206b89", "message": "Merge remote-tracking branch 'origin/new_rest_relationships_methods' into new_rest_relationships_methods", "committedDate": "2020-07-23T16:07:29Z", "type": "commit"}, {"oid": "56ac4ed6de263d4234491da2ef2311e7b5e83fdb", "url": "https://github.com/odpi/egeria/commit/56ac4ed6de263d4234491da2ef2311e7b5e83fdb", "message": "Merge branch 'master' into new_rest_relationships_methods", "committedDate": "2020-07-23T16:16:52Z", "type": "commit"}, {"oid": "f2a368f08a59b74fe8180e77c4d0321d7db630f0", "url": "https://github.com/odpi/egeria/commit/f2a368f08a59b74fe8180e77c4d0321d7db630f0", "message": "Merge branch 'master' into new_rest_relationships_methods", "committedDate": "2020-07-24T13:46:07Z", "type": "commit"}]}