{"pr_number": 2091, "pr_title": "CLM feedback and validation interface", "pr_createdAt": "2020-04-02T12:18:54Z", "pr_url": "https://github.com/uyuni-project/uyuni/pull/2091", "timeline": [{"oid": "2b38974ff920b66e97c7f6973cefc70191799d83", "url": "https://github.com/uyuni-project/uyuni/commit/2b38974ff920b66e97c7f6973cefc70191799d83", "message": "Move validation messages into component panels", "committedDate": "2020-04-02T12:26:23Z", "type": "forcePushed"}, {"oid": "ff636cd0f5ca61249e3696d7f6ac0d8ae355c311", "url": "https://github.com/uyuni-project/uyuni/commit/ff636cd0f5ca61249e3696d7f6ac0d8ae355c311", "message": "Move validation messages into component panels", "committedDate": "2020-04-02T12:59:49Z", "type": "forcePushed"}, {"oid": "68175c74e5c171108c7dc6071b80249f7c389ac5", "url": "https://github.com/uyuni-project/uyuni/commit/68175c74e5c171108c7dc6071b80249f7c389ac5", "message": "Add content validation unit tests", "committedDate": "2020-04-02T16:06:55Z", "type": "forcePushed"}, {"oid": "0ab2d46c0519c85ed0817b13833a87b79f2d599b", "url": "https://github.com/uyuni-project/uyuni/commit/0ab2d46c0519c85ed0817b13833a87b79f2d599b", "message": "Add content validation unit tests", "committedDate": "2020-04-02T16:50:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc2NjM5Mw==", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r402766393", "bodyText": "Is that TODO still valid? may be this should be addressed before merging or simply removed if no longer valid.", "author": "cbosdo", "createdAt": "2020-04-03T06:41:41Z", "path": "java/code/src/com/redhat/rhn/domain/contentmgmt/modulemd/ModulemdApi.java", "diffHunk": "@@ -80,6 +81,19 @@ public ModulePackagesResponse getPackagesForModules(List<Channel> sources, List<\n             throws ConflictingStreamsException, ModuleNotFoundException {\n         List<String> mdPaths = getMetadataPaths(sources);\n \n+        // TODO: TEST CODE, REMOVE", "originalCommit": "0ab2d46c0519c85ed0817b13833a87b79f2d599b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE2OTQ1Nw==", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r404169457", "bodyText": "Yes, that's the WIP part. I keep it here for now since mgr-libmod changes are not merged yet. I'll remove that block right before merge.", "author": "cbbayburt", "createdAt": "2020-04-06T15:11:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc2NjM5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1MDk5Nw==", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r406150997", "bodyText": "OK", "author": "cbosdo", "createdAt": "2020-04-09T11:54:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc2NjM5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "4b8829d978234a20e135cf7a0d9e960d8af1d978", "chunk": "diff --git a/java/code/src/com/redhat/rhn/domain/contentmgmt/modulemd/ModulemdApi.java b/java/code/src/com/redhat/rhn/domain/contentmgmt/modulemd/ModulemdApi.java\nindex adf7e4b6c40..d0f8e13fc6c 100644\n--- a/java/code/src/com/redhat/rhn/domain/contentmgmt/modulemd/ModulemdApi.java\n+++ b/java/code/src/com/redhat/rhn/domain/contentmgmt/modulemd/ModulemdApi.java\n\n@@ -78,22 +78,9 @@ public class ModulemdApi {\n      * @throws ModuleNotFoundException if a selected module is not found\n      */\n     public ModulePackagesResponse getPackagesForModules(List<Channel> sources, List<Module> selectedModules)\n-            throws ConflictingStreamsException, ModuleNotFoundException {\n+            throws ConflictingStreamsException, ModuleNotFoundException, DependencyResolutionException {\n         List<String> mdPaths = getMetadataPaths(sources);\n \n-        // TODO: TEST CODE, REMOVE\n-        Optional<Module> testModule = selectedModules.stream().filter(m -> \"notfound\".equals(m.getName())).findAny();\n-        if (testModule.isPresent()) {\n-            throw new ModuleNotFoundException(testModule.get());\n-        }\n-        testModule = selectedModules.stream().filter(m -> \"conflict\".equals(m.getName())).findAny();\n-        if (selectedModules.size() > 1 && testModule.isPresent()) {\n-            Optional<Module> finalTestModule = testModule;\n-            Module testModule2 = selectedModules.stream().filter(m -> !m.equals(finalTestModule.get())).findAny().get();\n-            throw new ConflictingStreamsException(testModule.get(), testModule2);\n-        }\n-        // TODO: END TEST CODE\n-\n         Map<String, List<Module>> moduleMap = selectedModules.stream().collect(Collectors.groupingBy(Module::getName));\n         for (Map.Entry<String, List<Module>> m : moduleMap.entrySet()) {\n             if (m.getValue().size() > 1) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc2ODgzNw==", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r402768837", "bodyText": "Missing a Javadoc comment explaining what the validator does", "author": "cbosdo", "createdAt": "2020-04-03T06:48:28Z", "path": "java/code/src/com/redhat/rhn/domain/contentmgmt/validation/ModularDependencyValidator.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.domain.contentmgmt.validation;\n+\n+import com.redhat.rhn.common.localization.LocalizationService;\n+import com.redhat.rhn.domain.contentmgmt.ContentProject;\n+import com.redhat.rhn.domain.contentmgmt.ProjectSource;\n+import com.redhat.rhn.domain.contentmgmt.modulemd.ConflictingStreamsException;\n+import com.redhat.rhn.domain.contentmgmt.modulemd.Module;\n+import com.redhat.rhn.domain.contentmgmt.modulemd.ModuleNotFoundException;\n+import com.redhat.rhn.domain.contentmgmt.modulemd.ModulemdApi;\n+import com.redhat.rhn.manager.contentmgmt.DependencyResolutionException;\n+import com.redhat.rhn.manager.contentmgmt.DependencyResolver;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.redhat.rhn.domain.contentmgmt.validation.ContentValidationMessage.TYPE_ERROR;\n+\n+public class ModularDependencyValidator implements ContentValidator {", "originalCommit": "0ab2d46c0519c85ed0817b13833a87b79f2d599b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk2MzAyNw==", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r402963027", "bodyText": "\ud83d\udc4d", "author": "cbosdo", "createdAt": "2020-04-03T12:16:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc2ODgzNw=="}], "type": "inlineReview", "revised_code": {"commit": "55a29d339747ef8abd8698ce2d8206de2c39b479", "chunk": "diff --git a/java/code/src/com/redhat/rhn/domain/contentmgmt/validation/ModularDependencyValidator.java b/java/code/src/com/redhat/rhn/domain/contentmgmt/validation/ModularDependencyValidator.java\nindex 649218480d3..205cfb715c0 100644\n--- a/java/code/src/com/redhat/rhn/domain/contentmgmt/validation/ModularDependencyValidator.java\n+++ b/java/code/src/com/redhat/rhn/domain/contentmgmt/validation/ModularDependencyValidator.java\n\n@@ -30,6 +30,9 @@ import java.util.List;\n \n import static com.redhat.rhn.domain.contentmgmt.validation.ContentValidationMessage.TYPE_ERROR;\n \n+/**\n+ * Validates resolution of modular dependencies in a content project\n+ */\n public class ModularDependencyValidator implements ContentValidator {\n \n     private ModulemdApi modulemdApi;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc2OTYxNg==", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r402769616", "bodyText": "Same here, a Javadoc explaining what the validator does would be appreciated", "author": "cbosdo", "createdAt": "2020-04-03T06:50:36Z", "path": "java/code/src/com/redhat/rhn/domain/contentmgmt/validation/ModularSourcesValidator.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.domain.contentmgmt.validation;\n+\n+import com.redhat.rhn.common.localization.LocalizationService;\n+import com.redhat.rhn.domain.contentmgmt.ContentProject;\n+import com.redhat.rhn.domain.contentmgmt.ProjectSource;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+public class ModularSourcesValidator implements ContentValidator {", "originalCommit": "0ab2d46c0519c85ed0817b13833a87b79f2d599b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk2MzIyNQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r402963225", "bodyText": "\ud83d\udc4d", "author": "cbosdo", "createdAt": "2020-04-03T12:17:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc2OTYxNg=="}], "type": "inlineReview", "revised_code": {"commit": "55a29d339747ef8abd8698ce2d8206de2c39b479", "chunk": "diff --git a/java/code/src/com/redhat/rhn/domain/contentmgmt/validation/ModularSourcesValidator.java b/java/code/src/com/redhat/rhn/domain/contentmgmt/validation/ModularSourcesValidator.java\nindex 0dbd8837258..aac0a8836d2 100644\n--- a/java/code/src/com/redhat/rhn/domain/contentmgmt/validation/ModularSourcesValidator.java\n+++ b/java/code/src/com/redhat/rhn/domain/contentmgmt/validation/ModularSourcesValidator.java\n\n@@ -22,6 +22,9 @@ import com.redhat.rhn.domain.contentmgmt.ProjectSource;\n import java.util.Collections;\n import java.util.List;\n \n+/**\n+ * Validates the existence of modular sources and modular filters in a content project\n+ */\n public class ModularSourcesValidator implements ContentValidator {\n \n     private LocalizationService loc = LocalizationService.getInstance();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3MDA1Nw==", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r402770057", "bodyText": "This test class contains no test and thus makes the Junit test suite red", "author": "cbosdo", "createdAt": "2020-04-03T06:51:52Z", "path": "java/code/src/com/redhat/rhn/domain/contentmgmt/validation/test/ContentValidatorTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package com.redhat.rhn.domain.contentmgmt.validation.test;\n+\n+import com.redhat.rhn.common.localization.LocalizationService;\n+import com.redhat.rhn.domain.channel.Channel;\n+import com.redhat.rhn.domain.contentmgmt.ContentFilter;\n+import com.redhat.rhn.domain.contentmgmt.ContentProject;\n+import com.redhat.rhn.domain.contentmgmt.ContentProjectFactory;\n+import com.redhat.rhn.domain.contentmgmt.FilterCriteria;\n+import com.redhat.rhn.domain.contentmgmt.validation.ContentValidationMessage;\n+import com.redhat.rhn.domain.role.RoleFactory;\n+import com.redhat.rhn.manager.contentmgmt.ContentManager;\n+import com.redhat.rhn.manager.contentmgmt.test.MockModulemdApi;\n+import com.redhat.rhn.testing.BaseTestCaseWithUser;\n+import com.redhat.rhn.testing.ChannelTestUtils;\n+import com.redhat.rhn.testing.TestUtils;\n+\n+import java.util.List;\n+\n+import static com.redhat.rhn.domain.contentmgmt.ContentFilter.EntityType.MODULE;\n+import static com.redhat.rhn.domain.contentmgmt.ContentFilter.EntityType.PACKAGE;\n+import static com.redhat.rhn.domain.contentmgmt.ContentFilter.Rule.DENY;\n+import static com.redhat.rhn.domain.contentmgmt.FilterCriteria.Matcher.CONTAINS;\n+import static com.redhat.rhn.domain.contentmgmt.FilterCriteria.Matcher.EQUALS;\n+import static com.redhat.rhn.domain.contentmgmt.ProjectSource.Type.SW_CHANNEL;\n+import static java.util.Optional.empty;\n+\n+public abstract class ContentValidatorTest extends BaseTestCaseWithUser {", "originalCommit": "0ab2d46c0519c85ed0817b13833a87b79f2d599b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDEzMjMwNQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r404132305", "bodyText": "Renamed the class name so it won't be included in tests", "author": "cbbayburt", "createdAt": "2020-04-06T14:24:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3MDA1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "55a29d339747ef8abd8698ce2d8206de2c39b479", "chunk": "diff --git a/java/code/src/com/redhat/rhn/domain/contentmgmt/validation/test/ContentValidatorTest.java b/java/code/src/com/redhat/rhn/domain/contentmgmt/validation/test/ContentValidatorTestBase.java\nsimilarity index 97%\nrename from java/code/src/com/redhat/rhn/domain/contentmgmt/validation/test/ContentValidatorTest.java\nrename to java/code/src/com/redhat/rhn/domain/contentmgmt/validation/test/ContentValidatorTestBase.java\nindex 1b8b101a852..0068d0c07a7 100644\n--- a/java/code/src/com/redhat/rhn/domain/contentmgmt/validation/test/ContentValidatorTest.java\n+++ b/java/code/src/com/redhat/rhn/domain/contentmgmt/validation/test/ContentValidatorTestBase.java\n\n@@ -24,7 +24,7 @@ import static com.redhat.rhn.domain.contentmgmt.FilterCriteria.Matcher.EQUALS;\n import static com.redhat.rhn.domain.contentmgmt.ProjectSource.Type.SW_CHANNEL;\n import static java.util.Optional.empty;\n \n-public abstract class ContentValidatorTest extends BaseTestCaseWithUser {\n+public abstract class ContentValidatorTestBase extends BaseTestCaseWithUser {\n \n     final LocalizationService loc;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc3MDk2Ng==", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r402770966", "bodyText": "2020", "author": "cbosdo", "createdAt": "2020-04-03T06:54:07Z", "path": "java/code/src/com/suse/manager/webui/controllers/contentmanagement/response/ProjectMessageResponse.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ * Copyright (c) 2019 SUSE LLC", "originalCommit": "0ab2d46c0519c85ed0817b13833a87b79f2d599b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "55a29d339747ef8abd8698ce2d8206de2c39b479", "chunk": "diff --git a/java/code/src/com/suse/manager/webui/controllers/contentmanagement/response/ProjectMessageResponse.java b/java/code/src/com/suse/manager/webui/controllers/contentmanagement/response/ProjectMessageResponse.java\nindex a6dd13623b2..6335aa47394 100644\n--- a/java/code/src/com/suse/manager/webui/controllers/contentmanagement/response/ProjectMessageResponse.java\n+++ b/java/code/src/com/suse/manager/webui/controllers/contentmanagement/response/ProjectMessageResponse.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2019 SUSE LLC\n+ * Copyright (c) 2020 SUSE LLC\n  *\n  * This software is licensed to you under the GNU General Public License,\n  * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n"}}, {"oid": "55a29d339747ef8abd8698ce2d8206de2c39b479", "url": "https://github.com/uyuni-project/uyuni/commit/55a29d339747ef8abd8698ce2d8206de2c39b479", "message": "fixup! Add content validation unit tests", "committedDate": "2020-04-06T14:56:56Z", "type": "forcePushed"}, {"oid": "e39f364a442657816320842b75f7896a5659d7d5", "url": "https://github.com/uyuni-project/uyuni/commit/e39f364a442657816320842b75f7896a5659d7d5", "message": "fixup! Add content validation unit tests", "committedDate": "2020-04-06T15:02:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkzOTQ2OA==", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r403939468", "bodyText": "Has this been addressed?", "author": "hustodemon", "createdAt": "2020-04-06T09:09:24Z", "path": "java/code/src/com/redhat/rhn/domain/contentmgmt/modulemd/ModulemdApiResponse.java", "diffHunk": "@@ -15,11 +15,16 @@\n \n package com.redhat.rhn.domain.contentmgmt.modulemd;\n \n+import com.google.gson.annotations.SerializedName;\n+\n /**\n  * modulemd API response wrapper class\n  */\n public class ModulemdApiResponse {\n+    //TODO: Add error codes as statics", "originalCommit": "4ba564761044b1b21113705e0227ba78970b7a89", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY5NDUxMw==", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r404694513", "bodyText": "I'll replace this and the other error code related TODOs once they're defined in mgr-libmod (before merging this one, of course)", "author": "cbbayburt", "createdAt": "2020-04-07T10:12:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkzOTQ2OA=="}], "type": "inlineReview", "revised_code": {"commit": "4b8829d978234a20e135cf7a0d9e960d8af1d978", "chunk": "diff --git a/java/code/src/com/redhat/rhn/domain/contentmgmt/modulemd/ModulemdApiResponse.java b/java/code/src/com/redhat/rhn/domain/contentmgmt/modulemd/ModulemdApiResponse.java\nindex 5ac3fc6880a..8a2ea4d64e1 100644\n--- a/java/code/src/com/redhat/rhn/domain/contentmgmt/modulemd/ModulemdApiResponse.java\n+++ b/java/code/src/com/redhat/rhn/domain/contentmgmt/modulemd/ModulemdApiResponse.java\n\n@@ -15,26 +15,29 @@\n \n package com.redhat.rhn.domain.contentmgmt.modulemd;\n \n-import com.google.gson.annotations.SerializedName;\n-\n /**\n  * modulemd API response wrapper class\n  */\n public class ModulemdApiResponse {\n-    //TODO: Add error codes as statics\n-    @SerializedName(value = \"return_code\", alternate = {\"error_code\"})\n-    private int returnCode;\n-    @SerializedName(value = \"comment\", alternate = {\"exception\"})\n-    private String comment;\n+    static final int OK = 0;\n+    static final int EXCEPTION = 1;\n+    static final int MODULE_NOT_FOUND = 201;\n+    static final int DEPENDENCY_RESOLUTION_ERROR = 202;\n+    static final int CONFLICTING_STREAMS = 203;\n+    static final int REQUEST_ERROR = 301;\n+\n+    private int errorCode;\n+    private String exception;\n     private ModulePackagesResponse modulePackages;\n     private ListPackagesResponse listPackages;\n+    private ModulemdExceptionDataResponse data;\n \n-    public int getReturnCode() {\n-        return returnCode;\n+    public int getErrorCode() {\n+        return errorCode;\n     }\n \n-    public String getComment() {\n-        return comment;\n+    public String getException() {\n+        return exception;\n     }\n \n     public ModulePackagesResponse getModulePackages() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAxODQ5Nw==", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r404018497", "bodyText": "What is the reason for the alternate attributes? Has the modulemd api changed in the meantime?", "author": "hustodemon", "createdAt": "2020-04-06T11:27:51Z", "path": "java/code/src/com/redhat/rhn/domain/contentmgmt/modulemd/ModulemdApiResponse.java", "diffHunk": "@@ -15,11 +15,16 @@\n \n package com.redhat.rhn.domain.contentmgmt.modulemd;\n \n+import com.google.gson.annotations.SerializedName;\n+\n /**\n  * modulemd API response wrapper class\n  */\n public class ModulemdApiResponse {\n+    //TODO: Add error codes as statics\n+    @SerializedName(value = \"return_code\", alternate = {\"error_code\"})", "originalCommit": "4ba564761044b1b21113705e0227ba78970b7a89", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY5NTAwOA==", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r404695008", "bodyText": "At the moment, mgr-libmod returns return_code when successful, but error_code when failed so it was required. I'll see if I can unify this on the mgr-libmod side, though.", "author": "cbbayburt", "createdAt": "2020-04-07T10:12:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAxODQ5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "4b8829d978234a20e135cf7a0d9e960d8af1d978", "chunk": "diff --git a/java/code/src/com/redhat/rhn/domain/contentmgmt/modulemd/ModulemdApiResponse.java b/java/code/src/com/redhat/rhn/domain/contentmgmt/modulemd/ModulemdApiResponse.java\nindex 5ac3fc6880a..8a2ea4d64e1 100644\n--- a/java/code/src/com/redhat/rhn/domain/contentmgmt/modulemd/ModulemdApiResponse.java\n+++ b/java/code/src/com/redhat/rhn/domain/contentmgmt/modulemd/ModulemdApiResponse.java\n\n@@ -15,26 +15,29 @@\n \n package com.redhat.rhn.domain.contentmgmt.modulemd;\n \n-import com.google.gson.annotations.SerializedName;\n-\n /**\n  * modulemd API response wrapper class\n  */\n public class ModulemdApiResponse {\n-    //TODO: Add error codes as statics\n-    @SerializedName(value = \"return_code\", alternate = {\"error_code\"})\n-    private int returnCode;\n-    @SerializedName(value = \"comment\", alternate = {\"exception\"})\n-    private String comment;\n+    static final int OK = 0;\n+    static final int EXCEPTION = 1;\n+    static final int MODULE_NOT_FOUND = 201;\n+    static final int DEPENDENCY_RESOLUTION_ERROR = 202;\n+    static final int CONFLICTING_STREAMS = 203;\n+    static final int REQUEST_ERROR = 301;\n+\n+    private int errorCode;\n+    private String exception;\n     private ModulePackagesResponse modulePackages;\n     private ListPackagesResponse listPackages;\n+    private ModulemdExceptionDataResponse data;\n \n-    public int getReturnCode() {\n-        return returnCode;\n+    public int getErrorCode() {\n+        return errorCode;\n     }\n \n-    public String getComment() {\n-        return comment;\n+    public String getException() {\n+        return exception;\n     }\n \n     public ModulePackagesResponse getModulePackages() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAyNDM2OQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r404024369", "bodyText": "Nitpick: you can get rid of isPresent() && get(), if you want. (Here and in the other validator.)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    boolean hasModularSources = project.getActiveSources().stream()\n          \n          \n            \n                            .map(ProjectSource::asSoftwareSource)\n          \n          \n            \n                            .anyMatch(s -> s.isPresent() && s.get().getChannel().isModular());\n          \n          \n            \n                    boolean hasModularSources = project.getActiveSources().stream()\n          \n          \n            \n                            .flatMap(s -> s.asSoftwareSource().stream())\n          \n          \n            \n                            .map(s -> s.getChannel())\n          \n          \n            \n                            .anyMatch(c -> c.isModular());", "author": "hustodemon", "createdAt": "2020-04-06T11:39:23Z", "path": "java/code/src/com/redhat/rhn/domain/contentmgmt/validation/ModularDependencyValidator.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.domain.contentmgmt.validation;\n+\n+import com.redhat.rhn.common.localization.LocalizationService;\n+import com.redhat.rhn.domain.contentmgmt.ContentProject;\n+import com.redhat.rhn.domain.contentmgmt.ProjectSource;\n+import com.redhat.rhn.domain.contentmgmt.modulemd.ConflictingStreamsException;\n+import com.redhat.rhn.domain.contentmgmt.modulemd.Module;\n+import com.redhat.rhn.domain.contentmgmt.modulemd.ModuleNotFoundException;\n+import com.redhat.rhn.domain.contentmgmt.modulemd.ModulemdApi;\n+import com.redhat.rhn.manager.contentmgmt.DependencyResolutionException;\n+import com.redhat.rhn.manager.contentmgmt.DependencyResolver;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static com.redhat.rhn.domain.contentmgmt.validation.ContentValidationMessage.TYPE_ERROR;\n+\n+/**\n+ * Validates resolution of modular dependencies in a content project\n+ */\n+public class ModularDependencyValidator implements ContentValidator {\n+\n+    private ModulemdApi modulemdApi;\n+    private LocalizationService loc = LocalizationService.getInstance();\n+\n+    /**\n+     * Initialize a modular dependency validator with {@link ModulemdApi} as the default modulemd API\n+     */\n+    public ModularDependencyValidator() {\n+        this.modulemdApi = new ModulemdApi();\n+    }\n+\n+    /**\n+     * Initialzie a modular dependency validator with a modulemd API instance\n+     *\n+     * @param modulemdApiIn the modulemd API instance\n+     */\n+    public ModularDependencyValidator(ModulemdApi modulemdApiIn) {\n+        this.modulemdApi = modulemdApiIn;\n+    }\n+\n+    @Override\n+    public List<ContentValidationMessage> validate(ContentProject project) {\n+        boolean hasModularSources = project.getActiveSources().stream()\n+                .map(ProjectSource::asSoftwareSource)\n+                .anyMatch(s -> s.isPresent() && s.get().getChannel().isModular());", "originalCommit": "4ba564761044b1b21113705e0227ba78970b7a89", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "14630c580ecb181cfe3087942827c6564abf1100", "chunk": "diff --git a/java/code/src/com/redhat/rhn/domain/contentmgmt/validation/ModularDependencyValidator.java b/java/code/src/com/redhat/rhn/domain/contentmgmt/validation/ModularDependencyValidator.java\nindex 205cfb715c0..2267a747f7f 100644\n--- a/java/code/src/com/redhat/rhn/domain/contentmgmt/validation/ModularDependencyValidator.java\n+++ b/java/code/src/com/redhat/rhn/domain/contentmgmt/validation/ModularDependencyValidator.java\n\n@@ -16,8 +16,9 @@\n package com.redhat.rhn.domain.contentmgmt.validation;\n \n import com.redhat.rhn.common.localization.LocalizationService;\n+import com.redhat.rhn.domain.channel.Channel;\n import com.redhat.rhn.domain.contentmgmt.ContentProject;\n-import com.redhat.rhn.domain.contentmgmt.ProjectSource;\n+import com.redhat.rhn.domain.contentmgmt.SoftwareProjectSource;\n import com.redhat.rhn.domain.contentmgmt.modulemd.ConflictingStreamsException;\n import com.redhat.rhn.domain.contentmgmt.modulemd.Module;\n import com.redhat.rhn.domain.contentmgmt.modulemd.ModuleNotFoundException;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAzODE5Nw==", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r404038197", "bodyText": "Is this still relevant?", "author": "hustodemon", "createdAt": "2020-04-06T12:04:53Z", "path": "java/code/src/com/redhat/rhn/domain/contentmgmt/modulemd/ModulemdApi.java", "diffHunk": "@@ -90,6 +104,11 @@ public ModulePackagesResponse getPackagesForModules(List<Channel> sources, List<\n         ModulemdApiResponse res =\n                 callSync(ModulemdApiRequest.modulePackagesRequest(mdPaths, selectedModules));\n \n+        if (res.isError()) {\n+            //TODO: Handle code types + data", "originalCommit": "4ba564761044b1b21113705e0227ba78970b7a89", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b8829d978234a20e135cf7a0d9e960d8af1d978", "chunk": "diff --git a/java/code/src/com/redhat/rhn/domain/contentmgmt/modulemd/ModulemdApi.java b/java/code/src/com/redhat/rhn/domain/contentmgmt/modulemd/ModulemdApi.java\nindex adf7e4b6c40..d0f8e13fc6c 100644\n--- a/java/code/src/com/redhat/rhn/domain/contentmgmt/modulemd/ModulemdApi.java\n+++ b/java/code/src/com/redhat/rhn/domain/contentmgmt/modulemd/ModulemdApi.java\n\n@@ -104,9 +91,20 @@ public class ModulemdApi {\n         ModulemdApiResponse res =\n                 callSync(ModulemdApiRequest.modulePackagesRequest(mdPaths, selectedModules));\n \n+        // Handle possible errors\n         if (res.isError()) {\n-            //TODO: Handle code types + data\n-            throw new ModuleNotFoundException(selectedModules.get(0));\n+            switch (res.getErrorCode()) {\n+                case ModulemdApiResponse.CONFLICTING_STREAMS:\n+                    List<Module> conflictingModules = res.getData().getStreams();\n+                    throw new ConflictingStreamsException(conflictingModules.get(0), conflictingModules.get(1));\n+                case ModulemdApiResponse.MODULE_NOT_FOUND:\n+                    throw new ModuleNotFoundException(res.getData().getStreams());\n+                case ModulemdApiResponse.DEPENDENCY_RESOLUTION_ERROR:\n+                    throw new DependencyResolutionException(res.getData().getStreams().get(0));\n+                    default:\n+                        throw new RuntimeException(String.format(\"Cannot resolve modular dependencies. %s (%s)\",\n+                                res.getException(), res.getErrorCode()));\n+            }\n         }\n \n         return res.getModulePackages();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAzODU3MQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r404038571", "bodyText": "Is this correct? How do we know, that the first module was not found, if the method supports passing multiple modules?", "author": "hustodemon", "createdAt": "2020-04-06T12:05:38Z", "path": "java/code/src/com/redhat/rhn/domain/contentmgmt/modulemd/ModulemdApi.java", "diffHunk": "@@ -90,6 +104,11 @@ public ModulePackagesResponse getPackagesForModules(List<Channel> sources, List<\n         ModulemdApiResponse res =\n                 callSync(ModulemdApiRequest.modulePackagesRequest(mdPaths, selectedModules));\n \n+        if (res.isError()) {\n+            //TODO: Handle code types + data\n+            throw new ModuleNotFoundException(selectedModules.get(0));", "originalCommit": "4ba564761044b1b21113705e0227ba78970b7a89", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY5NTQ2Mw==", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r404695463", "bodyText": "Same as above, this'll be fixed when I have all the error codes defined in mgr-libmod", "author": "cbbayburt", "createdAt": "2020-04-07T10:13:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAzODU3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "4b8829d978234a20e135cf7a0d9e960d8af1d978", "chunk": "diff --git a/java/code/src/com/redhat/rhn/domain/contentmgmt/modulemd/ModulemdApi.java b/java/code/src/com/redhat/rhn/domain/contentmgmt/modulemd/ModulemdApi.java\nindex adf7e4b6c40..d0f8e13fc6c 100644\n--- a/java/code/src/com/redhat/rhn/domain/contentmgmt/modulemd/ModulemdApi.java\n+++ b/java/code/src/com/redhat/rhn/domain/contentmgmt/modulemd/ModulemdApi.java\n\n@@ -104,9 +91,20 @@ public class ModulemdApi {\n         ModulemdApiResponse res =\n                 callSync(ModulemdApiRequest.modulePackagesRequest(mdPaths, selectedModules));\n \n+        // Handle possible errors\n         if (res.isError()) {\n-            //TODO: Handle code types + data\n-            throw new ModuleNotFoundException(selectedModules.get(0));\n+            switch (res.getErrorCode()) {\n+                case ModulemdApiResponse.CONFLICTING_STREAMS:\n+                    List<Module> conflictingModules = res.getData().getStreams();\n+                    throw new ConflictingStreamsException(conflictingModules.get(0), conflictingModules.get(1));\n+                case ModulemdApiResponse.MODULE_NOT_FOUND:\n+                    throw new ModuleNotFoundException(res.getData().getStreams());\n+                case ModulemdApiResponse.DEPENDENCY_RESOLUTION_ERROR:\n+                    throw new DependencyResolutionException(res.getData().getStreams().get(0));\n+                    default:\n+                        throw new RuntimeException(String.format(\"Cannot resolve modular dependencies. %s (%s)\",\n+                                res.getException(), res.getErrorCode()));\n+            }\n         }\n \n         return res.getModulePackages();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA1NzI0OQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r404057249", "bodyText": "About the \"dependency resolution failure\" scenario: is this something that happens on regular basis, something on the user can react (or should be at least informed in a sane way), or does it only happen in exceptional cases (bug in modulemd)?\nIf I understand it correctly, it should be safe: the filters validation runs also in the ContentProjectValidator in earlier phase, preventing the user to even start the build.", "author": "hustodemon", "createdAt": "2020-04-06T12:38:16Z", "path": "java/code/src/com/redhat/rhn/manager/contentmgmt/ContentManager.java", "diffHunk": "@@ -695,14 +694,8 @@ private void alignEnvironment(ContentEnvironment env, Channel baseChannel, Strea\n                     alignEnvironmentTarget(srcTgt.getLeft(), srcTgt.getRight(), resolvedFilters, async, user));\n         }\n         catch (DependencyResolutionException e) {\n-            if (e.getCause() instanceof ModuleNotFoundException) {\n-                ModuleNotFoundException cause = (ModuleNotFoundException) e.getCause();\n-                LOG.info(String.format(\"Module '%s:%s' not found.\", cause.getModule().getName(),\n-                        cause.getModule().getStream()));\n-            }\n-            else {\n-                throw new RuntimeException(e);\n-            }\n+            // Build shouldn't be allowed if dependency resolution fails\n+            throw new RuntimeException(e);", "originalCommit": "4ba564761044b1b21113705e0227ba78970b7a89", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY5NjY2MQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r404696661", "bodyText": "If I understand it correctly, it should be safe: the filters validation runs also in the ContentProjectValidator in earlier phase, preventing the user to even start the build.\n\nCorrect. The validation runs earlier and disables the build button in the UI. But I didn't consider the XMLRPC case honestly. I'll add a proper check to the XMLRPC methods as well.", "author": "cbbayburt", "createdAt": "2020-04-07T10:15:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA1NzI0OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1MTU3NQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r406151575", "bodyText": "No javadoc comment here... I'ld bet this breaks a Checkstyle rule", "author": "cbosdo", "createdAt": "2020-04-09T11:55:22Z", "path": "java/code/src/com/redhat/rhn/domain/contentmgmt/validation/ContentProjectValidator.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.domain.contentmgmt.validation;\n+\n+import com.redhat.rhn.domain.contentmgmt.ContentProject;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+public class ContentProjectValidator {", "originalCommit": "7a27a12552ee591aea4fb479aed38ef3087485e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b8829d978234a20e135cf7a0d9e960d8af1d978", "chunk": "diff --git a/java/code/src/com/redhat/rhn/domain/contentmgmt/validation/ContentProjectValidator.java b/java/code/src/com/redhat/rhn/domain/contentmgmt/validation/ContentProjectValidator.java\nindex af29804a48d..813f1d15338 100644\n--- a/java/code/src/com/redhat/rhn/domain/contentmgmt/validation/ContentProjectValidator.java\n+++ b/java/code/src/com/redhat/rhn/domain/contentmgmt/validation/ContentProjectValidator.java\n\n@@ -20,6 +20,9 @@ import com.redhat.rhn.domain.contentmgmt.ContentProject;\n import java.util.List;\n import java.util.stream.Collectors;\n \n+/**\n+ * Validates a content project instance using a specified list of validators\n+ */\n public class ContentProjectValidator {\n \n     private ContentProject project;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1MjAwMg==", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r406152002", "bodyText": "Javadoc here too", "author": "cbosdo", "createdAt": "2020-04-09T11:56:20Z", "path": "java/code/src/com/redhat/rhn/domain/contentmgmt/validation/ContentValidationMessage.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.domain.contentmgmt.validation;", "originalCommit": "7a27a12552ee591aea4fb479aed38ef3087485e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b8829d978234a20e135cf7a0d9e960d8af1d978", "chunk": "diff --git a/java/code/src/com/redhat/rhn/domain/contentmgmt/validation/ContentValidationMessage.java b/java/code/src/com/redhat/rhn/domain/contentmgmt/validation/ContentValidationMessage.java\nindex 60ee2b3c237..56af49a5fd7 100644\n--- a/java/code/src/com/redhat/rhn/domain/contentmgmt/validation/ContentValidationMessage.java\n+++ b/java/code/src/com/redhat/rhn/domain/contentmgmt/validation/ContentValidationMessage.java\n\n@@ -15,6 +15,11 @@\n \n package com.redhat.rhn.domain.contentmgmt.validation;\n \n+/**\n+ * A content project validation message of a specific type\n+ *\n+ * The type can be one of TYPE_INFO, TYPE_WARN, TYPE_ERROR.\n+ */\n public class ContentValidationMessage {\n \n     public static final String TYPE_INFO = \"info\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1MjMwMg==", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r406152302", "bodyText": "Javadoc is needed on public functions too", "author": "cbosdo", "createdAt": "2020-04-09T11:56:51Z", "path": "java/code/src/com/redhat/rhn/domain/contentmgmt/validation/ContentValidationMessage.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package com.redhat.rhn.domain.contentmgmt.validation;\n+\n+public class ContentValidationMessage {\n+\n+    public static final String TYPE_INFO = \"info\";\n+    public static final String TYPE_WARN = \"warning\";\n+    public static final String TYPE_ERROR = \"error\";\n+\n+    private static final String ENTITY_PROPERTIES = \"properties\";\n+    private static final String ENTITY_SOURCES = \"softwareSources\";\n+    private static final String ENTITY_FILTERS = \"filters\";\n+    private static final String ENTITY_ENVIRONMENTS = \"environments\";\n+\n+    private String message;\n+    private String type;\n+    private String entity;\n+\n+    private ContentValidationMessage(String messageIn, String typeIn, String entityIn) {\n+        this.message = messageIn;\n+        this.type = typeIn;\n+        this.entity = entityIn;\n+    }\n+\n+    /**\n+     * Create a new validation message for content properties\n+     *\n+     * @param message the message text\n+     * @param type the message type\n+     * @return the validation message\n+     */\n+    public static ContentValidationMessage contentPropertiesMessage(String message, String type) {\n+        return new ContentValidationMessage(message, type, ENTITY_PROPERTIES);\n+    }\n+\n+    /**\n+     * Create a new validation message for software sources\n+     *\n+     * @param message the message text\n+     * @param type the message type\n+     * @return the validation message\n+     */\n+    public static ContentValidationMessage softwareSourcesMessage(String message, String type) {\n+        return new ContentValidationMessage(message, type, ENTITY_SOURCES);\n+    }\n+\n+    /**\n+     * Create a new validation message for content filters\n+     *\n+     * @param message the message text\n+     * @param type the message type\n+     * @return the validation message\n+     */\n+    public static ContentValidationMessage contentFiltersMessage(String message, String type) {\n+        return new ContentValidationMessage(message, type, ENTITY_FILTERS);\n+    }\n+\n+    /**\n+     * Create a new validation message for project environments\n+     *\n+     * @param message the message text\n+     * @param type the message type\n+     * @return the validation message\n+     */\n+    public static ContentValidationMessage projectEnvironmentsMessage(String message, String type) {\n+        return new ContentValidationMessage(message, type, ENTITY_ENVIRONMENTS);\n+    }\n+\n+    public String getMessage() {", "originalCommit": "7a27a12552ee591aea4fb479aed38ef3087485e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b8829d978234a20e135cf7a0d9e960d8af1d978", "chunk": "diff --git a/java/code/src/com/redhat/rhn/domain/contentmgmt/validation/ContentValidationMessage.java b/java/code/src/com/redhat/rhn/domain/contentmgmt/validation/ContentValidationMessage.java\nindex 60ee2b3c237..56af49a5fd7 100644\n--- a/java/code/src/com/redhat/rhn/domain/contentmgmt/validation/ContentValidationMessage.java\n+++ b/java/code/src/com/redhat/rhn/domain/contentmgmt/validation/ContentValidationMessage.java\n\n@@ -15,6 +15,11 @@\n \n package com.redhat.rhn.domain.contentmgmt.validation;\n \n+/**\n+ * A content project validation message of a specific type\n+ *\n+ * The type can be one of TYPE_INFO, TYPE_WARN, TYPE_ERROR.\n+ */\n public class ContentValidationMessage {\n \n     public static final String TYPE_INFO = \"info\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1MjkwMg==", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r406152902", "bodyText": "No license header", "author": "cbosdo", "createdAt": "2020-04-09T11:58:04Z", "path": "java/code/src/com/redhat/rhn/domain/contentmgmt/validation/test/ContentValidatorTestBase.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package com.redhat.rhn.domain.contentmgmt.validation.test;", "originalCommit": "7a27a12552ee591aea4fb479aed38ef3087485e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b8829d978234a20e135cf7a0d9e960d8af1d978", "chunk": "diff --git a/java/code/src/com/redhat/rhn/domain/contentmgmt/validation/test/ContentValidatorTestBase.java b/java/code/src/com/redhat/rhn/domain/contentmgmt/validation/test/ContentValidatorTestBase.java\nindex 0068d0c07a7..a9a3ef1739f 100644\n--- a/java/code/src/com/redhat/rhn/domain/contentmgmt/validation/test/ContentValidatorTestBase.java\n+++ b/java/code/src/com/redhat/rhn/domain/contentmgmt/validation/test/ContentValidatorTestBase.java\n\n@@ -1,3 +1,18 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n package com.redhat.rhn.domain.contentmgmt.validation.test;\n \n import com.redhat.rhn.common.localization.LocalizationService;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1MzAwNA==", "url": "https://github.com/uyuni-project/uyuni/pull/2091#discussion_r406153004", "bodyText": "no license header too", "author": "cbosdo", "createdAt": "2020-04-09T11:58:17Z", "path": "java/code/src/com/redhat/rhn/domain/contentmgmt/validation/test/ModularDependencyValidatorTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package com.redhat.rhn.domain.contentmgmt.validation.test;", "originalCommit": "7a27a12552ee591aea4fb479aed38ef3087485e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4b8829d978234a20e135cf7a0d9e960d8af1d978", "chunk": "diff --git a/java/code/src/com/redhat/rhn/domain/contentmgmt/validation/test/ModularDependencyValidatorTest.java b/java/code/src/com/redhat/rhn/domain/contentmgmt/validation/test/ModularDependencyValidatorTest.java\nindex 54426e71290..5c52918f3f7 100644\n--- a/java/code/src/com/redhat/rhn/domain/contentmgmt/validation/test/ModularDependencyValidatorTest.java\n+++ b/java/code/src/com/redhat/rhn/domain/contentmgmt/validation/test/ModularDependencyValidatorTest.java\n\n@@ -1,3 +1,18 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n package com.redhat.rhn.domain.contentmgmt.validation.test;\n \n import com.redhat.rhn.domain.contentmgmt.validation.ModularDependencyValidator;\n"}}, {"oid": "14630c580ecb181cfe3087942827c6564abf1100", "url": "https://github.com/uyuni-project/uyuni/commit/14630c580ecb181cfe3087942827c6564abf1100", "message": "Add content validation unit tests", "committedDate": "2020-04-09T12:34:09Z", "type": "forcePushed"}, {"oid": "4b8829d978234a20e135cf7a0d9e960d8af1d978", "url": "https://github.com/uyuni-project/uyuni/commit/4b8829d978234a20e135cf7a0d9e960d8af1d978", "message": "Add content validation unit tests", "committedDate": "2020-04-09T22:42:48Z", "type": "forcePushed"}, {"oid": "1739617c8cb1c03300caf87b8b7b13b1c53c0d9c", "url": "https://github.com/uyuni-project/uyuni/commit/1739617c8cb1c03300caf87b8b7b13b1c53c0d9c", "message": "Add CLM project validation messages", "committedDate": "2020-04-14T13:04:35Z", "type": "commit"}, {"oid": "9e1edb1ceb835c7a0c345d7a2ef2c7540670d77a", "url": "https://github.com/uyuni-project/uyuni/commit/9e1edb1ceb835c7a0c345d7a2ef2c7540670d77a", "message": "Move validation messages into component panels", "committedDate": "2020-04-14T13:04:40Z", "type": "commit"}, {"oid": "a95344576bcf8d74a9d85c805e271b10b6ecce6d", "url": "https://github.com/uyuni-project/uyuni/commit/a95344576bcf8d74a9d85c805e271b10b6ecce6d", "message": "Add content validation unit tests", "committedDate": "2020-04-14T13:04:40Z", "type": "commit"}, {"oid": "a95344576bcf8d74a9d85c805e271b10b6ecce6d", "url": "https://github.com/uyuni-project/uyuni/commit/a95344576bcf8d74a9d85c805e271b10b6ecce6d", "message": "Add content validation unit tests", "committedDate": "2020-04-14T13:04:40Z", "type": "forcePushed"}]}