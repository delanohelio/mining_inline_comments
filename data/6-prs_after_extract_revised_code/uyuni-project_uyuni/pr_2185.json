{"pr_number": 2185, "pr_title": "XMLRPC: Assign/retract mantenance schedules to/from systems  ", "pr_createdAt": "2020-05-05T14:09:51Z", "pr_url": "https://github.com/uyuni-project/uyuni/pull/2185", "timeline": [{"oid": "3cb7359afc7a9b0ec08eb90d5c6d51b06582cdc5", "url": "https://github.com/uyuni-project/uyuni/commit/3cb7359afc7a9b0ec08eb90d5c6d51b06582cdc5", "message": "Changelog", "committedDate": "2020-05-06T07:56:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY2MzkxNg==", "url": "https://github.com/uyuni-project/uyuni/pull/2185#discussion_r420663916", "bodyText": "Hmm, shouldn't we better filter the systems which are not accessible for the user instead of throwing an exception? AFAIK we discussed it now in mumble.", "author": "mcalmer", "createdAt": "2020-05-06T09:39:07Z", "path": "java/code/src/com/suse/manager/maintenance/MaintenanceManager.java", "diffHunk": "@@ -301,4 +309,103 @@ protected void manageAffectedScheduledActions(User user, MaintenanceSchedule sch\n             List<String> scheduleStrategy) {\n         // TODO: implement it\n     }\n+\n+    /**\n+     * Assign {@link MaintenanceSchedule} to given set of {@link Server}s.\n+     *\n+     * @param user the user\n+     * @param schedule the {@link MaintenanceSchedule}\n+     * @param systemIds the set of {@link Server} IDs\n+     * @throws PermissionException if the user does not have access to given servers\n+     * @throws IllegalArgumentException if systems have pending maintenance-only actions\n+     * @return the number of involved {@link Server}s\n+     */\n+    public int assignScheduleToSystems(User user, MaintenanceSchedule schedule, Set<Long> systemIds) {\n+        ensureOrgAdmin(user);\n+        ensureSystemsAccessible(user, systemIds);\n+        ensureScheduleAccessible(user, schedule);\n+\n+        Set<Long> withMaintenanceActions = ServerFactory.filterSystemsWithPendingMaintOnlyActions(systemIds);\n+        if (!withMaintenanceActions.isEmpty()) {\n+            throw new IllegalArgumentException(\"Systems have pending maintenance-only actions:\" +\n+                    withMaintenanceActions);\n+        }\n+\n+        return ServerFactory.setMaintenanceScheduleToSystems(schedule, systemIds);\n+    }\n+\n+    /**\n+     * Retract {@link MaintenanceSchedule} from given set of {@link Server}s.\n+     *\n+     * @param user the user\n+     * @param systemIds the set of {@link Server} IDs\n+     * @throws PermissionException if the user does not have access to given servers\n+     * @return the number of involved {@link Server}s\n+     */\n+    public int retractScheduleFromSystems(User user, Set<Long> systemIds) {\n+        ensureOrgAdmin(user);\n+        ensureSystemsAccessible(user, systemIds);\n+\n+        return ServerFactory.setMaintenanceScheduleToSystems(null, systemIds);\n+    }\n+\n+    /**\n+     * List {@link Server} IDs with given schedule\n+     *\n+     * @param user the user\n+     * @param schedule the schedule\n+     * @return the {@link Server} IDS with given schedule\n+     */\n+    public List<Long> listSystemIdsWithSchedule(User user, MaintenanceSchedule schedule) {\n+        ensureOrgAdmin(user);\n+        ensureScheduleAccessible(user, schedule);\n+\n+        List systemIds = getSession().createQuery(\n+                \"SELECT s.id from Server s \" +\n+                        \"WHERE s.maintenanceSchedule = :schedule\")\n+                .setParameter(\"schedule\", schedule)\n+                .list();\n+\n+        ensureSystemsAccessible(user, systemIds);", "originalCommit": "ee8371147299e2cc3d1de993c83bd5bad5fade0c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "838ac39c85b4d1ad1c632b1263f94acfce247249", "chunk": "diff --git a/java/code/src/com/suse/manager/maintenance/MaintenanceManager.java b/java/code/src/com/suse/manager/maintenance/MaintenanceManager.java\nindex ed905dc3141..262b13428aa 100644\n--- a/java/code/src/com/suse/manager/maintenance/MaintenanceManager.java\n+++ b/java/code/src/com/suse/manager/maintenance/MaintenanceManager.java\n\n@@ -309,103 +301,4 @@ public class MaintenanceManager {\n             List<String> scheduleStrategy) {\n         // TODO: implement it\n     }\n-\n-    /**\n-     * Assign {@link MaintenanceSchedule} to given set of {@link Server}s.\n-     *\n-     * @param user the user\n-     * @param schedule the {@link MaintenanceSchedule}\n-     * @param systemIds the set of {@link Server} IDs\n-     * @throws PermissionException if the user does not have access to given servers\n-     * @throws IllegalArgumentException if systems have pending maintenance-only actions\n-     * @return the number of involved {@link Server}s\n-     */\n-    public int assignScheduleToSystems(User user, MaintenanceSchedule schedule, Set<Long> systemIds) {\n-        ensureOrgAdmin(user);\n-        ensureSystemsAccessible(user, systemIds);\n-        ensureScheduleAccessible(user, schedule);\n-\n-        Set<Long> withMaintenanceActions = ServerFactory.filterSystemsWithPendingMaintOnlyActions(systemIds);\n-        if (!withMaintenanceActions.isEmpty()) {\n-            throw new IllegalArgumentException(\"Systems have pending maintenance-only actions:\" +\n-                    withMaintenanceActions);\n-        }\n-\n-        return ServerFactory.setMaintenanceScheduleToSystems(schedule, systemIds);\n-    }\n-\n-    /**\n-     * Retract {@link MaintenanceSchedule} from given set of {@link Server}s.\n-     *\n-     * @param user the user\n-     * @param systemIds the set of {@link Server} IDs\n-     * @throws PermissionException if the user does not have access to given servers\n-     * @return the number of involved {@link Server}s\n-     */\n-    public int retractScheduleFromSystems(User user, Set<Long> systemIds) {\n-        ensureOrgAdmin(user);\n-        ensureSystemsAccessible(user, systemIds);\n-\n-        return ServerFactory.setMaintenanceScheduleToSystems(null, systemIds);\n-    }\n-\n-    /**\n-     * List {@link Server} IDs with given schedule\n-     *\n-     * @param user the user\n-     * @param schedule the schedule\n-     * @return the {@link Server} IDS with given schedule\n-     */\n-    public List<Long> listSystemIdsWithSchedule(User user, MaintenanceSchedule schedule) {\n-        ensureOrgAdmin(user);\n-        ensureScheduleAccessible(user, schedule);\n-\n-        List systemIds = getSession().createQuery(\n-                \"SELECT s.id from Server s \" +\n-                        \"WHERE s.maintenanceSchedule = :schedule\")\n-                .setParameter(\"schedule\", schedule)\n-                .list();\n-\n-        ensureSystemsAccessible(user, systemIds);\n-\n-        return systemIds;\n-    }\n-\n-    /**\n-     * Ensures that given user has access to given systems\n-     *\n-     * @param user the user\n-     * @param systemIds the {@link Server} IDs\n-     * @throws PermissionException if the user does not have access\n-     */\n-    private void ensureSystemsAccessible(User user, Collection<Long> systemIds) {\n-        if (!SystemManager.areSystemsAvailableToUser(user.getId(), new ArrayList<>(systemIds))) {\n-            throw new PermissionException(String.format(\"User '%s' can't access systems.\", user));\n-        }\n-    }\n-\n-    /**\n-     * Ensures that given user has access to given {@link MaintenanceSchedule}\n-     *\n-     * @param user the user\n-     * @param schedule the {@link MaintenanceSchedule}\n-     * @throws PermissionException if the user does not have access\n-     */\n-    private void ensureScheduleAccessible(User user, MaintenanceSchedule schedule) {\n-        if (!user.getOrg().equals(schedule.getOrg())) {\n-            throw new PermissionException(String.format(\"User '%s' can't access schedule '%s'.\", user, schedule));\n-        }\n-    }\n-\n-    /**\n-     * Ensures that given user has the Org admin role\n-     *\n-     * @param user the user\n-     * @throws PermissionException if the user does not have Org admin role\n-     */\n-    private static void ensureOrgAdmin(User user) {\n-        if (!user.hasRole(ORG_ADMIN)) {\n-            throw new PermissionException(ORG_ADMIN);\n-        }\n-    }\n }\n"}}, {"oid": "838ac39c85b4d1ad1c632b1263f94acfce247249", "url": "https://github.com/uyuni-project/uyuni/commit/838ac39c85b4d1ad1c632b1263f94acfce247249", "message": "HibernateFactory.reload - no more need for unnecessary client casting", "committedDate": "2020-05-06T11:00:58Z", "type": "commit"}, {"oid": "b66d891886c64fd7c6c28bab0197158b80b2e752", "url": "https://github.com/uyuni-project/uyuni/commit/b66d891886c64fd7c6c28bab0197158b80b2e752", "message": "Misc: Fix naming of existing method", "committedDate": "2020-05-06T11:00:58Z", "type": "commit"}, {"oid": "6912cadf0b197d2f7c7771d84e7c9efafcdf5015", "url": "https://github.com/uyuni-project/uyuni/commit/6912cadf0b197d2f7c7771d84e7c9efafcdf5015", "message": "Misc: No need for public modifier in interface", "committedDate": "2020-05-06T11:00:58Z", "type": "commit"}, {"oid": "682bb54c390fbced84cce091a15afc8032055c36", "url": "https://github.com/uyuni-project/uyuni/commit/682bb54c390fbced84cce091a15afc8032055c36", "message": "Misc: Fix javadoc", "committedDate": "2020-05-06T11:00:58Z", "type": "commit"}, {"oid": "bfbbf1d75096d45c620fbeea598ee8784ec21878", "url": "https://github.com/uyuni-project/uyuni/commit/bfbbf1d75096d45c620fbeea598ee8784ec21878", "message": "Factory: Assigning/retracting maintenance schedules to/from systems", "committedDate": "2020-05-06T11:00:58Z", "type": "commit"}, {"oid": "a660d118ae4828cab9212222e1c91ab1512f3a2b", "url": "https://github.com/uyuni-project/uyuni/commit/a660d118ae4828cab9212222e1c91ab1512f3a2b", "message": "Manager: Assigning/retracting maintenance schedules to/from systems", "committedDate": "2020-05-06T11:00:58Z", "type": "commit"}, {"oid": "191fc9210fc3afdb0e9834d452834b2300609a12", "url": "https://github.com/uyuni-project/uyuni/commit/191fc9210fc3afdb0e9834d452834b2300609a12", "message": "XMLRPC: Assigning/retracting maintenance schedules to/from systems", "committedDate": "2020-05-06T11:00:58Z", "type": "commit"}, {"oid": "b9e2d9dafc27020de30f6f7a517e77b56686dffb", "url": "https://github.com/uyuni-project/uyuni/commit/b9e2d9dafc27020de30f6f7a517e77b56686dffb", "message": "Changelog", "committedDate": "2020-05-06T11:01:17Z", "type": "commit"}, {"oid": "b9e2d9dafc27020de30f6f7a517e77b56686dffb", "url": "https://github.com/uyuni-project/uyuni/commit/b9e2d9dafc27020de30f6f7a517e77b56686dffb", "message": "Changelog", "committedDate": "2020-05-06T11:01:17Z", "type": "forcePushed"}]}