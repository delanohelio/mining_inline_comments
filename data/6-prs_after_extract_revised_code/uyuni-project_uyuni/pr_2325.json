{"pr_number": 2325, "pr_title": "Toggle virtpoller beacon when toggling the virtualization entitlement", "pr_createdAt": "2020-06-16T07:59:35Z", "pr_url": "https://github.com/uyuni-project/uyuni/pull/2325", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc1MTI0OA==", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r440751248", "bodyText": "Shouldn't this be called \"SaltVirtManager\" ?", "author": "chiaradiamarcelo", "createdAt": "2020-06-16T10:32:55Z", "path": "java/code/src/com/suse/manager/virtualization/VirtManagerSalt.java", "diffHunk": "@@ -38,6 +44,8 @@\n public class VirtManagerSalt implements VirtManager {", "originalCommit": "0dadb6e6ea787ca6b8ba539a3f52c9cf23dc5f18", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc4MTU0OQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r440781549", "bodyText": "Well, that class has been named like this by @lucidd during the refactoring.", "author": "cbosdo", "createdAt": "2020-06-16T11:32:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc1MTI0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgwOTcwMQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r440809701", "bodyText": "ok, maybe for a next PR then.", "author": "chiaradiamarcelo", "createdAt": "2020-06-16T12:27:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc1MTI0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkyOTM2MA==", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r440929360", "bodyText": "I think we don't really have a written rule or a scheme for the naming of interfaces and implementations yet? For instance I recently created MonitoringManager (interface) and FormulaMonitoringManager (implementation) and did the naming the other way around. I would have been fine though to align with another scheme, so I guess we could maybe agree on a scheme and write it down?", "author": "renner", "createdAt": "2020-06-16T15:12:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc1MTI0OA=="}], "type": "inlineReview", "revised_code": {"commit": "d80555f0c6541893f5af8fddf93d5004a0d96d29", "chunk": "diff --git a/java/code/src/com/suse/manager/virtualization/VirtManagerSalt.java b/java/code/src/com/suse/manager/virtualization/VirtManagerSalt.java\nindex c638fb75202..3408e430cea 100644\n--- a/java/code/src/com/suse/manager/virtualization/VirtManagerSalt.java\n+++ b/java/code/src/com/suse/manager/virtualization/VirtManagerSalt.java\n\n@@ -44,15 +44,18 @@ import java.util.stream.Collectors;\n public class VirtManagerSalt implements VirtManager {\n \n     private final SaltApi saltApi;\n+    private final SystemQuery systemQuery;\n     private MinionPillarFileManager minionVirtualizationPillarFileManager =\n             new MinionPillarFileManager(new MinionVirtualizationPillarGenerator());\n \n     /**\n      * Service providing utility functions to handle virtual machines.\n      * @param saltApiIn instance interacting with salt.\n+     * @param systemQueryIn instance querying systems.\n      */\n-    public VirtManagerSalt(SaltApi saltApiIn) {\n+    public VirtManagerSalt(SaltApi saltApiIn, SystemQuery systemQueryIn) {\n         this.saltApi = saltApiIn;\n+        this.systemQuery = systemQueryIn;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc2NjQ5OA==", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r440766498", "bodyText": "why is this needed?", "author": "chiaradiamarcelo", "createdAt": "2020-06-16T11:01:59Z", "path": "java/code/src/com/suse/manager/virtualization/VirtManagerSalt.java", "diffHunk": "@@ -166,6 +174,14 @@ public void updateLibvirtEngine(MinionServer minion) {\n         pillar.put(\"virt_entitled\", minion.hasVirtualizationEntitlement());\n         saltApi.callSync(State.apply(Collections.singletonList(\"virt.engine-events\"),\n                 Optional.of(pillar)), minion.getMinionId());\n+\n+        if (minion.hasVirtualizationEntitlement()) {\n+            minionVirtualizationPillarFileManager.generatePillarFile(minion);\n+        }\n+        else {\n+            minionVirtualizationPillarFileManager.removePillarFile(minion.getMinionId());\n+        }\n+        SaltService.INSTANCE.refreshPillar(new MinionList(minion.getMinionId()));", "originalCommit": "0dadb6e6ea787ca6b8ba539a3f52c9cf23dc5f18", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc4MjY3NA==", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r440782674", "bodyText": "Without the refreshPillar() the pillar file is generated and the results can be seen in salt  pillar.items but the change isn't reflected on the minion itself. Maybe there is a better place for this call, but without it the virtpoller is configured but not enabled on the minion", "author": "cbosdo", "createdAt": "2020-06-16T11:35:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc2NjQ5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgwOTc4Mg==", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r440809782", "bodyText": "I see", "author": "chiaradiamarcelo", "createdAt": "2020-06-16T12:27:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc2NjQ5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkzNzY0OA==", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r440937648", "bodyText": "As I understood all Salt calls should go through SystemQuery now,  so do we really want to make an exception for refreshPillar() and call it directly on the SaltService instance? Shouldn't we rather move refreshPillar() to the SystemQuery interface?", "author": "renner", "createdAt": "2020-06-16T15:22:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc2NjQ5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUyOTQ5OA==", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r441529498", "bodyText": "Done!", "author": "cbosdo", "createdAt": "2020-06-17T13:06:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc2NjQ5OA=="}], "type": "inlineReview", "revised_code": {"commit": "d80555f0c6541893f5af8fddf93d5004a0d96d29", "chunk": "diff --git a/java/code/src/com/suse/manager/virtualization/VirtManagerSalt.java b/java/code/src/com/suse/manager/virtualization/VirtManagerSalt.java\nindex c638fb75202..3408e430cea 100644\n--- a/java/code/src/com/suse/manager/virtualization/VirtManagerSalt.java\n+++ b/java/code/src/com/suse/manager/virtualization/VirtManagerSalt.java\n\n@@ -181,7 +184,7 @@ public class VirtManagerSalt implements VirtManager {\n         else {\n             minionVirtualizationPillarFileManager.removePillarFile(minion.getMinionId());\n         }\n-        SaltService.INSTANCE.refreshPillar(new MinionList(minion.getMinionId()));\n+        systemQuery.refreshPillar(new MinionList(minion.getMinionId()));\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc2ODY0OQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r440768649", "bodyText": "We should probably make a test for this", "author": "chiaradiamarcelo", "createdAt": "2020-06-16T11:06:19Z", "path": "java/code/src/com/suse/manager/webui/services/pillar/MinionVirtualizationPillarGenerator.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.webui.services.pillar;\n+\n+import static com.suse.manager.webui.services.SaltConstants.PILLAR_DATA_FILE_EXT;\n+import static com.suse.manager.webui.services.SaltConstants.PILLAR_DATA_FILE_PREFIX;\n+\n+import com.redhat.rhn.common.conf.Config;\n+import com.redhat.rhn.common.conf.ConfigDefaults;\n+import com.redhat.rhn.domain.server.MinionServer;\n+\n+import com.suse.manager.webui.utils.SaltPillar;\n+\n+import org.apache.log4j.Logger;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Class for generating pillar data for the virtual hosts\n+ */\n+public class MinionVirtualizationPillarGenerator implements MinionPillarGenerator {", "originalCommit": "0dadb6e6ea787ca6b8ba539a3f52c9cf23dc5f18", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc4NTU1Nw==", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r440785557", "bodyText": "sure, though that's not the most interesting test to have here. Covering the whole thing with a cucumber step would be better, though harder", "author": "cbosdo", "createdAt": "2020-06-16T11:41:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc2ODY0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUyOTcxNg==", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r441529716", "bodyText": "Made that test and a cucumber one!", "author": "cbosdo", "createdAt": "2020-06-17T13:06:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc2ODY0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "83282521055a0d2881247011dc40b36f4bf462c9", "chunk": "diff --git a/java/code/src/com/suse/manager/webui/services/pillar/MinionVirtualizationPillarGenerator.java b/java/code/src/com/suse/manager/webui/services/pillar/MinionVirtualizationPillarGenerator.java\nindex ff4a98e148b..6056c83102b 100644\n--- a/java/code/src/com/suse/manager/webui/services/pillar/MinionVirtualizationPillarGenerator.java\n+++ b/java/code/src/com/suse/manager/webui/services/pillar/MinionVirtualizationPillarGenerator.java\n\n@@ -56,15 +56,13 @@ public class MinionVirtualizationPillarGenerator implements MinionPillarGenerato\n         LOG.debug(\"Generating virtualization pillar file for minion: \" + minion.getMinionId());\n \n         SaltPillar pillar = new SaltPillar();\n-        if (minion.hasVirtualizationEntitlement()) {\n-            // this add the configuration for the beacon that tell us about\n-            // virtual guests running on that minion\n-            // The virtpoller is still usefull with the libvirt events: it will help\n-            // synchronizing the DB with the actual guest lists in case we had a temporary shutdown.\n-            Map<String, Object> beaconConfig = new HashMap<>();\n-            beaconConfig.put(\"virtpoller\", VIRTPOLLER_BEACON_PROPS);\n-            pillar.add(\"beacons\", beaconConfig);\n-        }\n+        // this add the configuration for the beacon that tell us about\n+        // virtual guests running on that minion\n+        // The virtpoller is still usefull with the libvirt events: it will help\n+        // synchronizing the DB with the actual guest lists in case we had a temporary shutdown.\n+        Map<String, Object> beaconConfig = new HashMap<>();\n+        beaconConfig.put(\"virtpoller\", VIRTPOLLER_BEACON_PROPS);\n+        pillar.add(\"beacons\", beaconConfig);\n \n         return pillar;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc4MDI1Nw==", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r440780257", "bodyText": "while you are at it, maybe you can fix this part https://github.com/uyuni-project/uyuni/pull/2325/files?file-filters%5B%5D=.java#diff-8cc725b56315ba8fd87da99a53fb4fcdL76-R88\nThe conditions here should be inverted, as in https://github.com/uyuni-project/uyuni/blob/master/java/code/src/com/redhat/rhn/manager/system/entitling/SystemEntitler.java#L128-L134", "author": "chiaradiamarcelo", "createdAt": "2020-06-16T11:30:10Z", "path": "java/code/src/com/redhat/rhn/manager/system/entitling/SystemUnentitler.java", "diffHunk": "@@ -85,6 +95,10 @@ public void removeServerEntitlement(Server server, Entitlement ent) {\n                 }\n             });\n         }\n+", "originalCommit": "0dadb6e6ea787ca6b8ba539a3f52c9cf23dc5f18", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc4NjMyNw==", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r440786327", "bodyText": "not sure I really understood where you want that change, but I'll try to find it", "author": "cbosdo", "createdAt": "2020-06-16T11:42:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc4MDI1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgwOTI1NA==", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r440809254", "bodyText": "https://github.com/uyuni-project/uyuni/blob/master/java/code/src/com/redhat/rhn/manager/system/entitling/SystemUnentitler.java#L76-L78\nThis is wrong, and was introduced in 0d8fe90\nThe right way is to do it as in https://github.com/uyuni-project/uyuni/blob/master/java/code/src/com/redhat/rhn/manager/system/entitling/SystemEntitler.java#L128-L134 , meaning check if the server is a minion, ,then update the groups pillar, and then the specific features like mointoring or virtualization", "author": "chiaradiamarcelo", "createdAt": "2020-06-16T12:26:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc4MDI1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0NTE4OQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r440945189", "bodyText": "Thanks for pointing it out, and sorry as it was my mistake!", "author": "renner", "createdAt": "2020-06-16T15:32:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc4MDI1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUyMDQ0NQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r441520445", "bodyText": "haha no worries!", "author": "chiaradiamarcelo", "createdAt": "2020-06-17T12:52:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc4MDI1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "83282521055a0d2881247011dc40b36f4bf462c9", "chunk": "diff --git a/java/code/src/com/redhat/rhn/manager/system/entitling/SystemUnentitler.java b/java/code/src/com/redhat/rhn/manager/system/entitling/SystemUnentitler.java\nindex 39485cab420..62dad2c5467 100644\n--- a/java/code/src/com/redhat/rhn/manager/system/entitling/SystemUnentitler.java\n+++ b/java/code/src/com/redhat/rhn/manager/system/entitling/SystemUnentitler.java\n\n@@ -93,12 +93,12 @@ public class SystemUnentitler {\n                 catch (ValidatorException | IOException e) {\n                     LOG.warn(\"Error disabling monitoring: \" + e.getMessage());\n                 }\n-            });\n-        }\n+            }\n \n-        if (EntitlementManager.VIRTUALIZATION.equals(ent)) {\n-            server.asMinionServer().ifPresent(s -> virtManager.updateLibvirtEngine(s));\n-        }\n+            if (EntitlementManager.VIRTUALIZATION.equals(ent)) {\n+                virtManager.updateLibvirtEngine(s);\n+            }\n+        });\n     }\n \n     private void unentitleServer(Server server, Entitlement ent) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0ODA3Mw==", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r440948073", "bodyText": "Thanks for setting monitoringManager here in the constructor now, maybe we no longer need to initialize it above?", "author": "renner", "createdAt": "2020-06-16T15:36:05Z", "path": "java/code/src/com/redhat/rhn/manager/system/entitling/SystemUnentitler.java", "diffHunk": "@@ -40,8 +41,17 @@\n \n     private static final Logger LOG = Logger.getLogger(SystemUnentitler.class);\n \n-    public static final SystemUnentitler INSTANCE = new SystemUnentitler();\n     private MonitoringManager monitoringManager = new FormulaMonitoringManager();\n+    private VirtManager virtManager;\n+\n+    /**\n+     * @param virtManagerIn instance for managing virtual machines.\n+     * @param monitoringManagerIn instance for handling monitoring configuration.\n+     */\n+    public SystemUnentitler(VirtManager virtManagerIn, MonitoringManager monitoringManagerIn) {\n+        this.virtManager = virtManagerIn;\n+        this.monitoringManager = monitoringManagerIn;", "originalCommit": "0dadb6e6ea787ca6b8ba539a3f52c9cf23dc5f18", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM1ODc0Nw==", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r441358747", "bodyText": "right", "author": "cbosdo", "createdAt": "2020-06-17T08:05:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0ODA3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUyOTkwNQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r441529905", "bodyText": "done", "author": "cbosdo", "createdAt": "2020-06-17T13:07:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0ODA3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "d80555f0c6541893f5af8fddf93d5004a0d96d29", "chunk": "diff --git a/java/code/src/com/redhat/rhn/manager/system/entitling/SystemUnentitler.java b/java/code/src/com/redhat/rhn/manager/system/entitling/SystemUnentitler.java\nindex 39485cab420..9f0e268e59c 100644\n--- a/java/code/src/com/redhat/rhn/manager/system/entitling/SystemUnentitler.java\n+++ b/java/code/src/com/redhat/rhn/manager/system/entitling/SystemUnentitler.java\n\n@@ -41,7 +40,7 @@ public class SystemUnentitler {\n \n     private static final Logger LOG = Logger.getLogger(SystemUnentitler.class);\n \n-    private MonitoringManager monitoringManager = new FormulaMonitoringManager();\n+    private MonitoringManager monitoringManager;\n     private VirtManager virtManager;\n \n     /**\n"}}, {"oid": "83282521055a0d2881247011dc40b36f4bf462c9", "url": "https://github.com/uyuni-project/uyuni/commit/83282521055a0d2881247011dc40b36f4bf462c9", "message": "Fix cucumber testsuite to actually test virtpoller is enabled\n\nIn order to test if the virtpoller is enabled when adding the\nvirtualization host entitlement we need to not set an additional\nconfiguration to shorten its interval. This can be done at the sumaform\nlevel thought.", "committedDate": "2020-06-16T16:54:24Z", "type": "forcePushed"}, {"oid": "176f0e7efb6aef40652d685bf7ed2e75194f2345", "url": "https://github.com/uyuni-project/uyuni/commit/176f0e7efb6aef40652d685bf7ed2e75194f2345", "message": "Fix cucumber testsuite to actually test virtpoller is enabled\n\nIn order to test if the virtpoller is enabled when adding the\nvirtualization host entitlement we need to not set an additional\nconfiguration to shorten its interval. This can be done at the sumaform\nlevel thought.", "committedDate": "2020-06-16T18:00:35Z", "type": "forcePushed"}, {"oid": "d80555f0c6541893f5af8fddf93d5004a0d96d29", "url": "https://github.com/uyuni-project/uyuni/commit/d80555f0c6541893f5af8fddf93d5004a0d96d29", "message": "Fix cucumber testsuite to actually test virtpoller is enabled\n\nIn order to test if the virtpoller is enabled when adding the\nvirtualization host entitlement we need to not set an additional\nconfiguration to shorten its interval. This can be done at the sumaform\nlevel thought.", "committedDate": "2020-06-17T08:37:59Z", "type": "forcePushed"}, {"oid": "6a57b51fa139c0403dd160051caafb6f79e1d37a", "url": "https://github.com/uyuni-project/uyuni/commit/6a57b51fa139c0403dd160051caafb6f79e1d37a", "message": "Toggle virtpoller beacon when toggling the virtualization entitlement\n\nWith the optimizations performed in the pillar generation, the\nvirtpoller beacon was no longer added. To enable or disable the\nvirtpoller beacon we need to:\n\n * generate a separate pillar file with the beacon configuration\n * refresh the pillar data on the minion\n\nSince there could be other beacons setup in other pillar files, the\nsuma-minion.py pillar needs to deep merge each pillar data.\n\nSee bsc#1172962", "committedDate": "2020-06-17T09:18:54Z", "type": "forcePushed"}, {"oid": "3999acd3de936d6b9806a148005ce24f3777b364", "url": "https://github.com/uyuni-project/uyuni/commit/3999acd3de936d6b9806a148005ce24f3777b364", "message": "Toggle virtpoller beacon when toggling the virtualization entitlement\n\nWith the optimizations performed in the pillar generation, the\nvirtpoller beacon was no longer added. To enable or disable the\nvirtpoller beacon we need to:\n\n * generate a separate pillar file with the beacon configuration\n * refresh the pillar data on the minion\n\nSince there could be other beacons setup in other pillar files, the\nsuma-minion.py pillar needs to deep merge each pillar data.\n\nSee bsc#1172962", "committedDate": "2020-06-17T09:25:07Z", "type": "forcePushed"}, {"oid": "1248130d03910ba2dab4dd91530fe3e9635b9fe5", "url": "https://github.com/uyuni-project/uyuni/commit/1248130d03910ba2dab4dd91530fe3e9635b9fe5", "message": "Toggle virtpoller beacon when toggling the virtualization entitlement\n\nWith the optimizations performed in the pillar generation, the\nvirtpoller beacon was no longer added. To enable or disable the\nvirtpoller beacon we need to:\n\n * generate a separate pillar file with the beacon configuration\n * refresh the pillar data on the minion\n\nSince there could be other beacons setup in other pillar files, the\nsuma-minion.py pillar needs to deep merge each pillar data.\n\nSee bsc#1172962", "committedDate": "2020-06-17T12:49:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUyNjU5MA==", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r441526590", "bodyText": "line 87 ServerGroupManager.getInstance().updatePillarAfterGroupUpdateForServers(Arrays.asList(s));\nshould be executed despite the minion has a monitoring entitlement or not. So it should be outside this 'if' statement", "author": "chiaradiamarcelo", "createdAt": "2020-06-17T13:02:02Z", "path": "java/code/src/com/redhat/rhn/manager/system/entitling/SystemUnentitler.java", "diffHunk": "@@ -73,8 +82,8 @@ public void removeServerEntitlement(Server server, Entitlement ent) {\n             unentitleServer(server, ent);\n         }\n \n-        if (EntitlementManager.MONITORING.equals(ent)) {\n-            server.asMinionServer().ifPresent(s -> {\n+        server.asMinionServer().ifPresent(s -> {\n+            if (EntitlementManager.MONITORING.equals(ent)) {\n                 ServerGroupManager.getInstance().updatePillarAfterGroupUpdateForServers(Arrays.asList(s));", "originalCommit": "1248130d03910ba2dab4dd91530fe3e9635b9fe5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzMjk1NQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r441532955", "bodyText": "Fixed", "author": "cbosdo", "createdAt": "2020-06-17T13:11:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUyNjU5MA=="}], "type": "inlineReview", "revised_code": {"commit": "6b9b9bdab3ff2c275e303f32e47ea9ed46c17185", "chunk": "diff --git a/java/code/src/com/redhat/rhn/manager/system/entitling/SystemUnentitler.java b/java/code/src/com/redhat/rhn/manager/system/entitling/SystemUnentitler.java\nindex 9f0e268e59c..725d4f9203f 100644\n--- a/java/code/src/com/redhat/rhn/manager/system/entitling/SystemUnentitler.java\n+++ b/java/code/src/com/redhat/rhn/manager/system/entitling/SystemUnentitler.java\n\n@@ -82,8 +73,8 @@ public class SystemUnentitler {\n             unentitleServer(server, ent);\n         }\n \n-        server.asMinionServer().ifPresent(s -> {\n-            if (EntitlementManager.MONITORING.equals(ent)) {\n+        if (EntitlementManager.MONITORING.equals(ent)) {\n+            server.asMinionServer().ifPresent(s -> {\n                 ServerGroupManager.getInstance().updatePillarAfterGroupUpdateForServers(Arrays.asList(s));\n \n                 try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzMDk1OQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r441530959", "bodyText": "I guess you missed the \"asserts\" here", "author": "chiaradiamarcelo", "createdAt": "2020-06-17T13:08:54Z", "path": "java/code/src/com/suse/manager/webui/services/pillar/test/MinionVirtualizationPillarGeneratorTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.webui.services.pillar.test;\n+\n+import static com.suse.manager.webui.services.SaltConstants.PILLAR_DATA_FILE_EXT;\n+import static com.suse.manager.webui.services.SaltConstants.PILLAR_DATA_FILE_PREFIX;\n+\n+import com.redhat.rhn.domain.server.MinionServer;\n+import com.redhat.rhn.domain.server.test.MinionServerFactoryTest;\n+import com.redhat.rhn.testing.BaseTestCaseWithUser;\n+\n+import com.suse.manager.webui.services.pillar.MinionPillarFileManager;\n+import com.suse.manager.webui.services.pillar.MinionVirtualizationPillarGenerator;\n+\n+import org.yaml.snakeyaml.Yaml;\n+\n+import java.io.FileInputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Map;\n+\n+/**\n+ * Tests for {@link MinionVirtualizationPillarGenerator}\n+ */\n+public class MinionVirtualizationPillarGeneratorTest extends BaseTestCaseWithUser {\n+\n+    protected MinionPillarFileManager minionVirtualizationPillarFileManager =\n+            new MinionPillarFileManager(new MinionVirtualizationPillarGenerator());\n+\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        minionVirtualizationPillarFileManager.setPillarDataPath(tmpPillarRoot.toAbsolutePath());\n+    }\n+\n+    public void testGenerateVirtualizationPillarData() throws Exception {\n+        MinionServer minion = MinionServerFactoryTest.createTestMinionServer(user);\n+\n+        this.minionVirtualizationPillarFileManager.generatePillarFile(minion);\n+\n+        Path filePath = tmpPillarRoot.resolve(PILLAR_DATA_FILE_PREFIX + \"_\" +\n+                minion.getMinionId() + \"_\" + \"virtualization\" + \".\" +\n+                PILLAR_DATA_FILE_EXT);\n+\n+        assertTrue(Files.exists(filePath));\n+\n+        Map<String, Object> map;\n+        try (FileInputStream fi = new FileInputStream(filePath.toFile())) {\n+            map = new Yaml().loadAs(fi, Map.class);\n+        }\n+\n+        assertTrue(map.containsKey(\"beacons\"));\n+        Map<String, Object> beacons = (Map<String, Object>) map.get(\"beacons\");\n+\n+        assertTrue(beacons.containsKey(\"virtpoller\"));\n+        Map<String, Object> virtpoller = (Map<String, Object>)beacons.get(\"virtpoller\");\n+\n+        virtpoller.containsKey(\"cache_file\");", "originalCommit": "1248130d03910ba2dab4dd91530fe3e9635b9fe5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzMjgyNw==", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r441532827", "bodyText": "Fixed", "author": "cbosdo", "createdAt": "2020-06-17T13:11:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzMDk1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "6b9b9bdab3ff2c275e303f32e47ea9ed46c17185", "chunk": "diff --git a/java/code/src/com/suse/manager/webui/services/pillar/test/MinionVirtualizationPillarGeneratorTest.java b/java/code/src/com/suse/manager/webui/services/pillar/test/MinionVirtualizationPillarGeneratorTest.java\ndeleted file mode 100644\nindex c5f99dd6a80..00000000000\n--- a/java/code/src/com/suse/manager/webui/services/pillar/test/MinionVirtualizationPillarGeneratorTest.java\n+++ /dev/null\n\n@@ -1,75 +0,0 @@\n-/**\n- * Copyright (c) 2020 SUSE LLC\n- *\n- * This software is licensed to you under the GNU General Public License,\n- * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n- * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n- * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n- * along with this software; if not, see\n- * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n- *\n- * Red Hat trademarks are not licensed under GPLv2. No permission is\n- * granted to use or replicate Red Hat trademarks that are incorporated\n- * in this software or its documentation.\n- */\n-package com.suse.manager.webui.services.pillar.test;\n-\n-import static com.suse.manager.webui.services.SaltConstants.PILLAR_DATA_FILE_EXT;\n-import static com.suse.manager.webui.services.SaltConstants.PILLAR_DATA_FILE_PREFIX;\n-\n-import com.redhat.rhn.domain.server.MinionServer;\n-import com.redhat.rhn.domain.server.test.MinionServerFactoryTest;\n-import com.redhat.rhn.testing.BaseTestCaseWithUser;\n-\n-import com.suse.manager.webui.services.pillar.MinionPillarFileManager;\n-import com.suse.manager.webui.services.pillar.MinionVirtualizationPillarGenerator;\n-\n-import org.yaml.snakeyaml.Yaml;\n-\n-import java.io.FileInputStream;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.util.Map;\n-\n-/**\n- * Tests for {@link MinionVirtualizationPillarGenerator}\n- */\n-public class MinionVirtualizationPillarGeneratorTest extends BaseTestCaseWithUser {\n-\n-    protected MinionPillarFileManager minionVirtualizationPillarFileManager =\n-            new MinionPillarFileManager(new MinionVirtualizationPillarGenerator());\n-\n-    @Override\n-    public void setUp() throws Exception {\n-        super.setUp();\n-        minionVirtualizationPillarFileManager.setPillarDataPath(tmpPillarRoot.toAbsolutePath());\n-    }\n-\n-    public void testGenerateVirtualizationPillarData() throws Exception {\n-        MinionServer minion = MinionServerFactoryTest.createTestMinionServer(user);\n-\n-        this.minionVirtualizationPillarFileManager.generatePillarFile(minion);\n-\n-        Path filePath = tmpPillarRoot.resolve(PILLAR_DATA_FILE_PREFIX + \"_\" +\n-                minion.getMinionId() + \"_\" + \"virtualization\" + \".\" +\n-                PILLAR_DATA_FILE_EXT);\n-\n-        assertTrue(Files.exists(filePath));\n-\n-        Map<String, Object> map;\n-        try (FileInputStream fi = new FileInputStream(filePath.toFile())) {\n-            map = new Yaml().loadAs(fi, Map.class);\n-        }\n-\n-        assertTrue(map.containsKey(\"beacons\"));\n-        Map<String, Object> beacons = (Map<String, Object>) map.get(\"beacons\");\n-\n-        assertTrue(beacons.containsKey(\"virtpoller\"));\n-        Map<String, Object> virtpoller = (Map<String, Object>)beacons.get(\"virtpoller\");\n-\n-        virtpoller.containsKey(\"cache_file\");\n-        virtpoller.containsKey(\"expire_time\");\n-        virtpoller.containsKey(\"interval\");\n-    }\n-\n-}\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzMTEzNg==", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r441531136", "bodyText": "same", "author": "chiaradiamarcelo", "createdAt": "2020-06-17T13:09:13Z", "path": "java/code/src/com/suse/manager/webui/services/pillar/test/MinionVirtualizationPillarGeneratorTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.webui.services.pillar.test;\n+\n+import static com.suse.manager.webui.services.SaltConstants.PILLAR_DATA_FILE_EXT;\n+import static com.suse.manager.webui.services.SaltConstants.PILLAR_DATA_FILE_PREFIX;\n+\n+import com.redhat.rhn.domain.server.MinionServer;\n+import com.redhat.rhn.domain.server.test.MinionServerFactoryTest;\n+import com.redhat.rhn.testing.BaseTestCaseWithUser;\n+\n+import com.suse.manager.webui.services.pillar.MinionPillarFileManager;\n+import com.suse.manager.webui.services.pillar.MinionVirtualizationPillarGenerator;\n+\n+import org.yaml.snakeyaml.Yaml;\n+\n+import java.io.FileInputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Map;\n+\n+/**\n+ * Tests for {@link MinionVirtualizationPillarGenerator}\n+ */\n+public class MinionVirtualizationPillarGeneratorTest extends BaseTestCaseWithUser {\n+\n+    protected MinionPillarFileManager minionVirtualizationPillarFileManager =\n+            new MinionPillarFileManager(new MinionVirtualizationPillarGenerator());\n+\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        minionVirtualizationPillarFileManager.setPillarDataPath(tmpPillarRoot.toAbsolutePath());\n+    }\n+\n+    public void testGenerateVirtualizationPillarData() throws Exception {\n+        MinionServer minion = MinionServerFactoryTest.createTestMinionServer(user);\n+\n+        this.minionVirtualizationPillarFileManager.generatePillarFile(minion);\n+\n+        Path filePath = tmpPillarRoot.resolve(PILLAR_DATA_FILE_PREFIX + \"_\" +\n+                minion.getMinionId() + \"_\" + \"virtualization\" + \".\" +\n+                PILLAR_DATA_FILE_EXT);\n+\n+        assertTrue(Files.exists(filePath));\n+\n+        Map<String, Object> map;\n+        try (FileInputStream fi = new FileInputStream(filePath.toFile())) {\n+            map = new Yaml().loadAs(fi, Map.class);\n+        }\n+\n+        assertTrue(map.containsKey(\"beacons\"));\n+        Map<String, Object> beacons = (Map<String, Object>) map.get(\"beacons\");\n+\n+        assertTrue(beacons.containsKey(\"virtpoller\"));\n+        Map<String, Object> virtpoller = (Map<String, Object>)beacons.get(\"virtpoller\");\n+\n+        virtpoller.containsKey(\"cache_file\");\n+        virtpoller.containsKey(\"expire_time\");", "originalCommit": "1248130d03910ba2dab4dd91530fe3e9635b9fe5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzMjczNg==", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r441532736", "bodyText": "fixed too", "author": "cbosdo", "createdAt": "2020-06-17T13:11:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzMTEzNg=="}], "type": "inlineReview", "revised_code": {"commit": "6b9b9bdab3ff2c275e303f32e47ea9ed46c17185", "chunk": "diff --git a/java/code/src/com/suse/manager/webui/services/pillar/test/MinionVirtualizationPillarGeneratorTest.java b/java/code/src/com/suse/manager/webui/services/pillar/test/MinionVirtualizationPillarGeneratorTest.java\ndeleted file mode 100644\nindex c5f99dd6a80..00000000000\n--- a/java/code/src/com/suse/manager/webui/services/pillar/test/MinionVirtualizationPillarGeneratorTest.java\n+++ /dev/null\n\n@@ -1,75 +0,0 @@\n-/**\n- * Copyright (c) 2020 SUSE LLC\n- *\n- * This software is licensed to you under the GNU General Public License,\n- * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n- * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n- * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n- * along with this software; if not, see\n- * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n- *\n- * Red Hat trademarks are not licensed under GPLv2. No permission is\n- * granted to use or replicate Red Hat trademarks that are incorporated\n- * in this software or its documentation.\n- */\n-package com.suse.manager.webui.services.pillar.test;\n-\n-import static com.suse.manager.webui.services.SaltConstants.PILLAR_DATA_FILE_EXT;\n-import static com.suse.manager.webui.services.SaltConstants.PILLAR_DATA_FILE_PREFIX;\n-\n-import com.redhat.rhn.domain.server.MinionServer;\n-import com.redhat.rhn.domain.server.test.MinionServerFactoryTest;\n-import com.redhat.rhn.testing.BaseTestCaseWithUser;\n-\n-import com.suse.manager.webui.services.pillar.MinionPillarFileManager;\n-import com.suse.manager.webui.services.pillar.MinionVirtualizationPillarGenerator;\n-\n-import org.yaml.snakeyaml.Yaml;\n-\n-import java.io.FileInputStream;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.util.Map;\n-\n-/**\n- * Tests for {@link MinionVirtualizationPillarGenerator}\n- */\n-public class MinionVirtualizationPillarGeneratorTest extends BaseTestCaseWithUser {\n-\n-    protected MinionPillarFileManager minionVirtualizationPillarFileManager =\n-            new MinionPillarFileManager(new MinionVirtualizationPillarGenerator());\n-\n-    @Override\n-    public void setUp() throws Exception {\n-        super.setUp();\n-        minionVirtualizationPillarFileManager.setPillarDataPath(tmpPillarRoot.toAbsolutePath());\n-    }\n-\n-    public void testGenerateVirtualizationPillarData() throws Exception {\n-        MinionServer minion = MinionServerFactoryTest.createTestMinionServer(user);\n-\n-        this.minionVirtualizationPillarFileManager.generatePillarFile(minion);\n-\n-        Path filePath = tmpPillarRoot.resolve(PILLAR_DATA_FILE_PREFIX + \"_\" +\n-                minion.getMinionId() + \"_\" + \"virtualization\" + \".\" +\n-                PILLAR_DATA_FILE_EXT);\n-\n-        assertTrue(Files.exists(filePath));\n-\n-        Map<String, Object> map;\n-        try (FileInputStream fi = new FileInputStream(filePath.toFile())) {\n-            map = new Yaml().loadAs(fi, Map.class);\n-        }\n-\n-        assertTrue(map.containsKey(\"beacons\"));\n-        Map<String, Object> beacons = (Map<String, Object>) map.get(\"beacons\");\n-\n-        assertTrue(beacons.containsKey(\"virtpoller\"));\n-        Map<String, Object> virtpoller = (Map<String, Object>)beacons.get(\"virtpoller\");\n-\n-        virtpoller.containsKey(\"cache_file\");\n-        virtpoller.containsKey(\"expire_time\");\n-        virtpoller.containsKey(\"interval\");\n-    }\n-\n-}\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzMTIxNA==", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r441531214", "bodyText": "same", "author": "chiaradiamarcelo", "createdAt": "2020-06-17T13:09:20Z", "path": "java/code/src/com/suse/manager/webui/services/pillar/test/MinionVirtualizationPillarGeneratorTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.webui.services.pillar.test;\n+\n+import static com.suse.manager.webui.services.SaltConstants.PILLAR_DATA_FILE_EXT;\n+import static com.suse.manager.webui.services.SaltConstants.PILLAR_DATA_FILE_PREFIX;\n+\n+import com.redhat.rhn.domain.server.MinionServer;\n+import com.redhat.rhn.domain.server.test.MinionServerFactoryTest;\n+import com.redhat.rhn.testing.BaseTestCaseWithUser;\n+\n+import com.suse.manager.webui.services.pillar.MinionPillarFileManager;\n+import com.suse.manager.webui.services.pillar.MinionVirtualizationPillarGenerator;\n+\n+import org.yaml.snakeyaml.Yaml;\n+\n+import java.io.FileInputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Map;\n+\n+/**\n+ * Tests for {@link MinionVirtualizationPillarGenerator}\n+ */\n+public class MinionVirtualizationPillarGeneratorTest extends BaseTestCaseWithUser {\n+\n+    protected MinionPillarFileManager minionVirtualizationPillarFileManager =\n+            new MinionPillarFileManager(new MinionVirtualizationPillarGenerator());\n+\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        minionVirtualizationPillarFileManager.setPillarDataPath(tmpPillarRoot.toAbsolutePath());\n+    }\n+\n+    public void testGenerateVirtualizationPillarData() throws Exception {\n+        MinionServer minion = MinionServerFactoryTest.createTestMinionServer(user);\n+\n+        this.minionVirtualizationPillarFileManager.generatePillarFile(minion);\n+\n+        Path filePath = tmpPillarRoot.resolve(PILLAR_DATA_FILE_PREFIX + \"_\" +\n+                minion.getMinionId() + \"_\" + \"virtualization\" + \".\" +\n+                PILLAR_DATA_FILE_EXT);\n+\n+        assertTrue(Files.exists(filePath));\n+\n+        Map<String, Object> map;\n+        try (FileInputStream fi = new FileInputStream(filePath.toFile())) {\n+            map = new Yaml().loadAs(fi, Map.class);\n+        }\n+\n+        assertTrue(map.containsKey(\"beacons\"));\n+        Map<String, Object> beacons = (Map<String, Object>) map.get(\"beacons\");\n+\n+        assertTrue(beacons.containsKey(\"virtpoller\"));\n+        Map<String, Object> virtpoller = (Map<String, Object>)beacons.get(\"virtpoller\");\n+\n+        virtpoller.containsKey(\"cache_file\");\n+        virtpoller.containsKey(\"expire_time\");\n+        virtpoller.containsKey(\"interval\");", "originalCommit": "1248130d03910ba2dab4dd91530fe3e9635b9fe5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzMjY1MQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r441532651", "bodyText": "oops! Fixed now", "author": "cbosdo", "createdAt": "2020-06-17T13:11:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzMTIxNA=="}], "type": "inlineReview", "revised_code": {"commit": "6b9b9bdab3ff2c275e303f32e47ea9ed46c17185", "chunk": "diff --git a/java/code/src/com/suse/manager/webui/services/pillar/test/MinionVirtualizationPillarGeneratorTest.java b/java/code/src/com/suse/manager/webui/services/pillar/test/MinionVirtualizationPillarGeneratorTest.java\ndeleted file mode 100644\nindex c5f99dd6a80..00000000000\n--- a/java/code/src/com/suse/manager/webui/services/pillar/test/MinionVirtualizationPillarGeneratorTest.java\n+++ /dev/null\n\n@@ -1,75 +0,0 @@\n-/**\n- * Copyright (c) 2020 SUSE LLC\n- *\n- * This software is licensed to you under the GNU General Public License,\n- * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n- * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n- * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n- * along with this software; if not, see\n- * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n- *\n- * Red Hat trademarks are not licensed under GPLv2. No permission is\n- * granted to use or replicate Red Hat trademarks that are incorporated\n- * in this software or its documentation.\n- */\n-package com.suse.manager.webui.services.pillar.test;\n-\n-import static com.suse.manager.webui.services.SaltConstants.PILLAR_DATA_FILE_EXT;\n-import static com.suse.manager.webui.services.SaltConstants.PILLAR_DATA_FILE_PREFIX;\n-\n-import com.redhat.rhn.domain.server.MinionServer;\n-import com.redhat.rhn.domain.server.test.MinionServerFactoryTest;\n-import com.redhat.rhn.testing.BaseTestCaseWithUser;\n-\n-import com.suse.manager.webui.services.pillar.MinionPillarFileManager;\n-import com.suse.manager.webui.services.pillar.MinionVirtualizationPillarGenerator;\n-\n-import org.yaml.snakeyaml.Yaml;\n-\n-import java.io.FileInputStream;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.util.Map;\n-\n-/**\n- * Tests for {@link MinionVirtualizationPillarGenerator}\n- */\n-public class MinionVirtualizationPillarGeneratorTest extends BaseTestCaseWithUser {\n-\n-    protected MinionPillarFileManager minionVirtualizationPillarFileManager =\n-            new MinionPillarFileManager(new MinionVirtualizationPillarGenerator());\n-\n-    @Override\n-    public void setUp() throws Exception {\n-        super.setUp();\n-        minionVirtualizationPillarFileManager.setPillarDataPath(tmpPillarRoot.toAbsolutePath());\n-    }\n-\n-    public void testGenerateVirtualizationPillarData() throws Exception {\n-        MinionServer minion = MinionServerFactoryTest.createTestMinionServer(user);\n-\n-        this.minionVirtualizationPillarFileManager.generatePillarFile(minion);\n-\n-        Path filePath = tmpPillarRoot.resolve(PILLAR_DATA_FILE_PREFIX + \"_\" +\n-                minion.getMinionId() + \"_\" + \"virtualization\" + \".\" +\n-                PILLAR_DATA_FILE_EXT);\n-\n-        assertTrue(Files.exists(filePath));\n-\n-        Map<String, Object> map;\n-        try (FileInputStream fi = new FileInputStream(filePath.toFile())) {\n-            map = new Yaml().loadAs(fi, Map.class);\n-        }\n-\n-        assertTrue(map.containsKey(\"beacons\"));\n-        Map<String, Object> beacons = (Map<String, Object>) map.get(\"beacons\");\n-\n-        assertTrue(beacons.containsKey(\"virtpoller\"));\n-        Map<String, Object> virtpoller = (Map<String, Object>)beacons.get(\"virtpoller\");\n-\n-        virtpoller.containsKey(\"cache_file\");\n-        virtpoller.containsKey(\"expire_time\");\n-        virtpoller.containsKey(\"interval\");\n-    }\n-\n-}\n\\ No newline at end of file\n"}}, {"oid": "6b9b9bdab3ff2c275e303f32e47ea9ed46c17185", "url": "https://github.com/uyuni-project/uyuni/commit/6b9b9bdab3ff2c275e303f32e47ea9ed46c17185", "message": "Move refreshPillar from SystemQuery to SaltApi\n\nSince refreshing pillars is not really querying systems, moving to it\nwhere it belongs: SaltApi.", "committedDate": "2020-06-17T13:11:02Z", "type": "commit"}, {"oid": "7b3f92b016e387cef103c9ab1ead5645930f0c68", "url": "https://github.com/uyuni-project/uyuni/commit/7b3f92b016e387cef103c9ab1ead5645930f0c68", "message": "Toggle virtpoller beacon when toggling the virtualization entitlement\n\nWith the optimizations performed in the pillar generation, the\nvirtpoller beacon was no longer added. To enable or disable the\nvirtpoller beacon we need to:\n\n * generate a separate pillar file with the beacon configuration\n * refresh the pillar data on the minion\n\nSince there could be other beacons setup in other pillar files, the\nsuma-minion.py pillar needs to deep merge each pillar data.\n\nSee bsc#1172962", "committedDate": "2020-06-17T13:11:03Z", "type": "commit"}, {"oid": "7b3f92b016e387cef103c9ab1ead5645930f0c68", "url": "https://github.com/uyuni-project/uyuni/commit/7b3f92b016e387cef103c9ab1ead5645930f0c68", "message": "Toggle virtpoller beacon when toggling the virtualization entitlement\n\nWith the optimizations performed in the pillar generation, the\nvirtpoller beacon was no longer added. To enable or disable the\nvirtpoller beacon we need to:\n\n * generate a separate pillar file with the beacon configuration\n * refresh the pillar data on the minion\n\nSince there could be other beacons setup in other pillar files, the\nsuma-minion.py pillar needs to deep merge each pillar data.\n\nSee bsc#1172962", "committedDate": "2020-06-17T13:11:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzMzc1Mw==", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r441533753", "bodyText": "I guess you missed the asserts here", "author": "chiaradiamarcelo", "createdAt": "2020-06-17T13:13:07Z", "path": "java/code/src/com/suse/manager/webui/services/pillar/test/MinionVirtualizationPillarGeneratorTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.suse.manager.webui.services.pillar.test;\n+\n+import static com.suse.manager.webui.services.SaltConstants.PILLAR_DATA_FILE_EXT;\n+import static com.suse.manager.webui.services.SaltConstants.PILLAR_DATA_FILE_PREFIX;\n+\n+import com.redhat.rhn.domain.server.MinionServer;\n+import com.redhat.rhn.domain.server.test.MinionServerFactoryTest;\n+import com.redhat.rhn.testing.BaseTestCaseWithUser;\n+\n+import com.suse.manager.webui.services.pillar.MinionPillarFileManager;\n+import com.suse.manager.webui.services.pillar.MinionVirtualizationPillarGenerator;\n+\n+import org.yaml.snakeyaml.Yaml;\n+\n+import java.io.FileInputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Map;\n+\n+/**\n+ * Tests for {@link MinionVirtualizationPillarGenerator}\n+ */\n+public class MinionVirtualizationPillarGeneratorTest extends BaseTestCaseWithUser {\n+\n+    protected MinionPillarFileManager minionVirtualizationPillarFileManager =\n+            new MinionPillarFileManager(new MinionVirtualizationPillarGenerator());\n+\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        minionVirtualizationPillarFileManager.setPillarDataPath(tmpPillarRoot.toAbsolutePath());\n+    }\n+\n+    public void testGenerateVirtualizationPillarData() throws Exception {\n+        MinionServer minion = MinionServerFactoryTest.createTestMinionServer(user);\n+\n+        this.minionVirtualizationPillarFileManager.generatePillarFile(minion);\n+\n+        Path filePath = tmpPillarRoot.resolve(PILLAR_DATA_FILE_PREFIX + \"_\" +\n+                minion.getMinionId() + \"_\" + \"virtualization\" + \".\" +\n+                PILLAR_DATA_FILE_EXT);\n+\n+        assertTrue(Files.exists(filePath));\n+\n+        Map<String, Object> map;\n+        try (FileInputStream fi = new FileInputStream(filePath.toFile())) {\n+            map = new Yaml().loadAs(fi, Map.class);\n+        }\n+\n+        assertTrue(map.containsKey(\"beacons\"));\n+        Map<String, Object> beacons = (Map<String, Object>) map.get(\"beacons\");\n+\n+        assertTrue(beacons.containsKey(\"virtpoller\"));\n+        Map<String, Object> virtpoller = (Map<String, Object>)beacons.get(\"virtpoller\");\n+\n+        assertTrue(virtpoller.containsKey(\"cache_file\"));\n+        assertTrue(virtpoller.containsKey(\"expire_time\"));\n+        assertTrue(virtpoller.containsKey(\"interval\"));", "originalCommit": "7b3f92b016e387cef103c9ab1ead5645930f0c68", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzNDM4NA==", "url": "https://github.com/uyuni-project/uyuni/pull/2325#discussion_r441534384", "bodyText": "Yes, but it's fixed now, isn't it?", "author": "cbosdo", "createdAt": "2020-06-17T13:14:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUzMzc1Mw=="}], "type": "inlineReview", "revised_code": null}]}