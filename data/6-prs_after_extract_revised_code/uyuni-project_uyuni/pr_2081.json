{"pr_number": 2081, "pr_title": "Decouple the handling of the monitoring entitlement and formulas", "pr_createdAt": "2020-03-31T13:56:07Z", "pr_url": "https://github.com/uyuni-project/uyuni/pull/2081", "timeline": [{"oid": "edd82c5204a5791ad67791c9fa85d06f532acef8", "url": "https://github.com/uyuni-project/uyuni/commit/edd82c5204a5791ad67791c9fa85d06f532acef8", "message": "Handle monitoring cleanup on entitlement removal", "committedDate": "2020-04-08T08:56:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1NzExNA==", "url": "https://github.com/uyuni-project/uyuni/pull/2081#discussion_r405457114", "bodyText": "this line seems to be removed but not added anywhere else again. Was this on purpose?", "author": "lucidd", "createdAt": "2020-04-08T11:36:12Z", "path": "java/code/src/com/redhat/rhn/manager/system/entitling/SystemUnentitler.java", "diffHunk": "@@ -72,28 +63,6 @@ public void removeServerEntitlement(Server server, Entitlement ent) {\n         else {\n             unentitleServer(server, ent);\n         }\n-\n-        server.asMinionServer().ifPresent(s -> {\n-            ServerGroupManager.getInstance().updatePillarAfterGroupUpdateForServers(Arrays.asList(s));", "originalCommit": "edd82c5204a5791ad67791c9fa85d06f532acef8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEzMTYwOA==", "url": "https://github.com/uyuni-project/uyuni/pull/2081#discussion_r406131608", "bodyText": "Good catch! I removed it on purpose as I wanted to understand if it is really needed and also in which situation exactly. Will do more testing and investigation and re-add the pillar update if I find that it breaks something.", "author": "renner", "createdAt": "2020-04-09T11:13:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1NzExNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjYyNzg5Nw==", "url": "https://github.com/uyuni-project/uyuni/pull/2081#discussion_r416627897", "bodyText": "With my testing so far I could not find a regression from removing this line (pillar data regeneration). After @chiaradiamarcelo's latest refactoring the method name (updatePillarAfterGroupUpdateForServers()) also does no longer match this situation. I will do one more test before merging this patch, maybe this affects monitoring enablement during registration.", "author": "renner", "createdAt": "2020-04-28T13:48:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ1NzExNA=="}], "type": "inlineReview", "revised_code": {"commit": "191ddc2c6aabec3071399facc07c98a95919fc66", "chunk": "diff --git a/java/code/src/com/redhat/rhn/manager/system/entitling/SystemUnentitler.java b/java/code/src/com/redhat/rhn/manager/system/entitling/SystemUnentitler.java\nindex 313098ab38d..725d4f9203f 100644\n--- a/java/code/src/com/redhat/rhn/manager/system/entitling/SystemUnentitler.java\n+++ b/java/code/src/com/redhat/rhn/manager/system/entitling/SystemUnentitler.java\n\n@@ -63,6 +72,19 @@ public class SystemUnentitler {\n         else {\n             unentitleServer(server, ent);\n         }\n+\n+        if (EntitlementManager.MONITORING.equals(ent)) {\n+            server.asMinionServer().ifPresent(s -> {\n+                ServerGroupManager.getInstance().updatePillarAfterGroupUpdateForServers(Arrays.asList(s));\n+\n+                try {\n+                    monitoringManager.disableMonitoring(s);\n+                }\n+                catch (ValidatorException | IOException e) {\n+                    LOG.warn(\"Error disabling monitoring: \" + e.getMessage());\n+                }\n+            });\n+        }\n     }\n \n     private void unentitleServer(Server server, Entitlement ent) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTQ5NjY5MQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2081#discussion_r405496691", "bodyText": "i think the logging is fine here until we maybe tackle more consistent error handling overall.", "author": "lucidd", "createdAt": "2020-04-08T12:46:58Z", "path": "java/code/src/com/redhat/rhn/manager/formula/FormulaManager.java", "diffHunk": "@@ -342,4 +342,48 @@ public void enableFormula(String minionId, String formulaName) throws IOExceptio\n             FormulaFactory.saveServerFormulas(minionId, enabledFormulas);\n         }\n     }\n+\n+    /**\n+     * Configure system for monitoring when the entitlement is added.\n+     * @param minion the MinionServer to be configured for monitoring\n+     */\n+    public void enableMonitoringOnEntitlementAdd(MinionServer minion) {\n+        try {\n+            // Assign the monitoring formula to the system unless it belongs to a group having monitoring enabled\n+            if (!FormulaFactory.isMemberOfGroupHavingMonitoring(minion)) {\n+                List<String> formulas = FormulaFactory.getFormulasByMinionId(minion.getMinionId());\n+                if (!formulas.contains(FormulaFactory.PROMETHEUS_EXPORTERS)) {\n+                    formulas.add(FormulaFactory.PROMETHEUS_EXPORTERS);\n+                    FormulaFactory.saveServerFormulas(minion.getMinionId(), formulas);\n+                }\n+            }\n+        }\n+        catch (UnsupportedOperationException | IOException e) {\n+            // FIXME: error handling\n+            // LOG.error(\"Error assigning formula: \" + e.getMessage(), e);\n+            // result.addError(new ValidatorError(\"system.entitle.formula_error\"));\n+        }\n+    }\n+\n+    /**\n+     * Configure the monitoring formula for cleanup (disable exporters) if needed.\n+     * @param minion the MinionServer to be configured for monitoring cleanup\n+     */\n+    public void disableMonitoringOnEntitlementRemoval(MinionServer minion) {\n+        if (this.isMonitoringCleanupNeeded(minion)) {\n+            try {\n+                // Get the current data and set all exporters to disabled\n+                String minionId = minion.getMinionId();\n+                Map<String, Object> data = FormulaFactory\n+                        .getFormulaValuesByNameAndMinionId(PROMETHEUS_EXPORTERS, minionId)\n+                        .orElse(FormulaFactory.getPillarExample(PROMETHEUS_EXPORTERS));\n+                FormulaFactory.saveServerFormulaData(\n+                        FormulaFactory.disableMonitoring(data), minionId, PROMETHEUS_EXPORTERS);\n+            }\n+            catch (UnsupportedOperationException | IOException e) {\n+                // FIXME: error handling\n+                // LOG.warn(\"Exception on saving formula data: \" + e.getMessage());", "originalCommit": "edd82c5204a5791ad67791c9fa85d06f532acef8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e64a733080f2da14e3fd960eac8024d35ba7c485", "chunk": "diff --git a/java/code/src/com/redhat/rhn/manager/formula/FormulaManager.java b/java/code/src/com/redhat/rhn/manager/formula/FormulaManager.java\nindex 19430479964..83ce8d302a5 100644\n--- a/java/code/src/com/redhat/rhn/manager/formula/FormulaManager.java\n+++ b/java/code/src/com/redhat/rhn/manager/formula/FormulaManager.java\n\n@@ -346,44 +346,33 @@ public class FormulaManager {\n     /**\n      * Configure system for monitoring when the entitlement is added.\n      * @param minion the MinionServer to be configured for monitoring\n+     * @throws IOException if an IO error occurs while saving the data\n      */\n-    public void enableMonitoringOnEntitlementAdd(MinionServer minion) {\n-        try {\n-            // Assign the monitoring formula to the system unless it belongs to a group having monitoring enabled\n-            if (!FormulaFactory.isMemberOfGroupHavingMonitoring(minion)) {\n-                List<String> formulas = FormulaFactory.getFormulasByMinionId(minion.getMinionId());\n-                if (!formulas.contains(FormulaFactory.PROMETHEUS_EXPORTERS)) {\n-                    formulas.add(FormulaFactory.PROMETHEUS_EXPORTERS);\n-                    FormulaFactory.saveServerFormulas(minion.getMinionId(), formulas);\n-                }\n+    public void enableMonitoringOnEntitlementAdd(MinionServer minion) throws IOException {\n+        // Assign the monitoring formula to the system unless it belongs to a group having monitoring enabled\n+        if (!FormulaFactory.isMemberOfGroupHavingMonitoring(minion)) {\n+            List<String> formulas = FormulaFactory.getFormulasByMinionId(minion.getMinionId());\n+            if (!formulas.contains(FormulaFactory.PROMETHEUS_EXPORTERS)) {\n+                formulas.add(FormulaFactory.PROMETHEUS_EXPORTERS);\n+                FormulaFactory.saveServerFormulas(minion.getMinionId(), formulas);\n             }\n         }\n-        catch (UnsupportedOperationException | IOException e) {\n-            // FIXME: error handling\n-            // LOG.error(\"Error assigning formula: \" + e.getMessage(), e);\n-            // result.addError(new ValidatorError(\"system.entitle.formula_error\"));\n-        }\n     }\n \n     /**\n      * Configure the monitoring formula for cleanup (disable exporters) if needed.\n      * @param minion the MinionServer to be configured for monitoring cleanup\n+     * @throws IOException if an IO error occurs while saving the data\n      */\n-    public void disableMonitoringOnEntitlementRemoval(MinionServer minion) {\n+    public void disableMonitoringOnEntitlementRemoval(MinionServer minion) throws IOException {\n         if (this.isMonitoringCleanupNeeded(minion)) {\n-            try {\n-                // Get the current data and set all exporters to disabled\n-                String minionId = minion.getMinionId();\n-                Map<String, Object> data = FormulaFactory\n-                        .getFormulaValuesByNameAndMinionId(PROMETHEUS_EXPORTERS, minionId)\n-                        .orElse(FormulaFactory.getPillarExample(PROMETHEUS_EXPORTERS));\n-                FormulaFactory.saveServerFormulaData(\n-                        FormulaFactory.disableMonitoring(data), minionId, PROMETHEUS_EXPORTERS);\n-            }\n-            catch (UnsupportedOperationException | IOException e) {\n-                // FIXME: error handling\n-                // LOG.warn(\"Exception on saving formula data: \" + e.getMessage());\n-            }\n+            // Get the current data and set all exporters to disabled\n+            String minionId = minion.getMinionId();\n+            Map<String, Object> data = FormulaFactory\n+                    .getFormulaValuesByNameAndMinionId(PROMETHEUS_EXPORTERS, minionId)\n+                    .orElse(FormulaFactory.getPillarExample(PROMETHEUS_EXPORTERS));\n+            FormulaFactory.saveServerFormulaData(\n+                    FormulaFactory.disableMonitoring(data), minionId, PROMETHEUS_EXPORTERS);\n         }\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwMDE5NA==", "url": "https://github.com/uyuni-project/uyuni/pull/2081#discussion_r405500194", "bodyText": "i think to be consistent with the previous code this would need to return the ValidatorError and the places using it would need to merge the this ValidatorError with the one returned by addEntitlementToServer.", "author": "lucidd", "createdAt": "2020-04-08T12:52:33Z", "path": "java/code/src/com/redhat/rhn/manager/formula/FormulaManager.java", "diffHunk": "@@ -342,4 +342,48 @@ public void enableFormula(String minionId, String formulaName) throws IOExceptio\n             FormulaFactory.saveServerFormulas(minionId, enabledFormulas);\n         }\n     }\n+\n+    /**\n+     * Configure system for monitoring when the entitlement is added.\n+     * @param minion the MinionServer to be configured for monitoring\n+     */\n+    public void enableMonitoringOnEntitlementAdd(MinionServer minion) {\n+        try {\n+            // Assign the monitoring formula to the system unless it belongs to a group having monitoring enabled\n+            if (!FormulaFactory.isMemberOfGroupHavingMonitoring(minion)) {\n+                List<String> formulas = FormulaFactory.getFormulasByMinionId(minion.getMinionId());\n+                if (!formulas.contains(FormulaFactory.PROMETHEUS_EXPORTERS)) {\n+                    formulas.add(FormulaFactory.PROMETHEUS_EXPORTERS);\n+                    FormulaFactory.saveServerFormulas(minion.getMinionId(), formulas);\n+                }\n+            }\n+        }\n+        catch (UnsupportedOperationException | IOException e) {\n+            // FIXME: error handling\n+            // LOG.error(\"Error assigning formula: \" + e.getMessage(), e);\n+            // result.addError(new ValidatorError(\"system.entitle.formula_error\"));", "originalCommit": "edd82c5204a5791ad67791c9fa85d06f532acef8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEyODg5Mw==", "url": "https://github.com/uyuni-project/uyuni/pull/2081#discussion_r406128893", "bodyText": "Right, thanks for the input, I will work on it.", "author": "renner", "createdAt": "2020-04-09T11:08:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwMDE5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIxOTIyOQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2081#discussion_r412219229", "bodyText": "@lucidd Eventually I ended up doing some more consistent error handling: while the UnsupportedOperationException seems to be obsolete here meanwhile I am now throwing the IOException so it can be handled in the calling code appropriately. When the call comes from the UI there will be a message displayed, otherwise the error will be written to the logs.", "author": "renner", "createdAt": "2020-04-21T14:10:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUwMDE5NA=="}], "type": "inlineReview", "revised_code": {"commit": "e64a733080f2da14e3fd960eac8024d35ba7c485", "chunk": "diff --git a/java/code/src/com/redhat/rhn/manager/formula/FormulaManager.java b/java/code/src/com/redhat/rhn/manager/formula/FormulaManager.java\nindex 19430479964..83ce8d302a5 100644\n--- a/java/code/src/com/redhat/rhn/manager/formula/FormulaManager.java\n+++ b/java/code/src/com/redhat/rhn/manager/formula/FormulaManager.java\n\n@@ -346,44 +346,33 @@ public class FormulaManager {\n     /**\n      * Configure system for monitoring when the entitlement is added.\n      * @param minion the MinionServer to be configured for monitoring\n+     * @throws IOException if an IO error occurs while saving the data\n      */\n-    public void enableMonitoringOnEntitlementAdd(MinionServer minion) {\n-        try {\n-            // Assign the monitoring formula to the system unless it belongs to a group having monitoring enabled\n-            if (!FormulaFactory.isMemberOfGroupHavingMonitoring(minion)) {\n-                List<String> formulas = FormulaFactory.getFormulasByMinionId(minion.getMinionId());\n-                if (!formulas.contains(FormulaFactory.PROMETHEUS_EXPORTERS)) {\n-                    formulas.add(FormulaFactory.PROMETHEUS_EXPORTERS);\n-                    FormulaFactory.saveServerFormulas(minion.getMinionId(), formulas);\n-                }\n+    public void enableMonitoringOnEntitlementAdd(MinionServer minion) throws IOException {\n+        // Assign the monitoring formula to the system unless it belongs to a group having monitoring enabled\n+        if (!FormulaFactory.isMemberOfGroupHavingMonitoring(minion)) {\n+            List<String> formulas = FormulaFactory.getFormulasByMinionId(minion.getMinionId());\n+            if (!formulas.contains(FormulaFactory.PROMETHEUS_EXPORTERS)) {\n+                formulas.add(FormulaFactory.PROMETHEUS_EXPORTERS);\n+                FormulaFactory.saveServerFormulas(minion.getMinionId(), formulas);\n             }\n         }\n-        catch (UnsupportedOperationException | IOException e) {\n-            // FIXME: error handling\n-            // LOG.error(\"Error assigning formula: \" + e.getMessage(), e);\n-            // result.addError(new ValidatorError(\"system.entitle.formula_error\"));\n-        }\n     }\n \n     /**\n      * Configure the monitoring formula for cleanup (disable exporters) if needed.\n      * @param minion the MinionServer to be configured for monitoring cleanup\n+     * @throws IOException if an IO error occurs while saving the data\n      */\n-    public void disableMonitoringOnEntitlementRemoval(MinionServer minion) {\n+    public void disableMonitoringOnEntitlementRemoval(MinionServer minion) throws IOException {\n         if (this.isMonitoringCleanupNeeded(minion)) {\n-            try {\n-                // Get the current data and set all exporters to disabled\n-                String minionId = minion.getMinionId();\n-                Map<String, Object> data = FormulaFactory\n-                        .getFormulaValuesByNameAndMinionId(PROMETHEUS_EXPORTERS, minionId)\n-                        .orElse(FormulaFactory.getPillarExample(PROMETHEUS_EXPORTERS));\n-                FormulaFactory.saveServerFormulaData(\n-                        FormulaFactory.disableMonitoring(data), minionId, PROMETHEUS_EXPORTERS);\n-            }\n-            catch (UnsupportedOperationException | IOException e) {\n-                // FIXME: error handling\n-                // LOG.warn(\"Exception on saving formula data: \" + e.getMessage());\n-            }\n+            // Get the current data and set all exporters to disabled\n+            String minionId = minion.getMinionId();\n+            Map<String, Object> data = FormulaFactory\n+                    .getFormulaValuesByNameAndMinionId(PROMETHEUS_EXPORTERS, minionId)\n+                    .orElse(FormulaFactory.getPillarExample(PROMETHEUS_EXPORTERS));\n+            FormulaFactory.saveServerFormulaData(\n+                    FormulaFactory.disableMonitoring(data), minionId, PROMETHEUS_EXPORTERS);\n         }\n     }\n }\n"}}, {"oid": "a936317d95f60da9b03293714f9658d4803496b6", "url": "https://github.com/uyuni-project/uyuni/commit/a936317d95f60da9b03293714f9658d4803496b6", "message": "Handle monitoring cleanup on entitlement removal", "committedDate": "2020-04-17T13:01:09Z", "type": "forcePushed"}, {"oid": "e64a733080f2da14e3fd960eac8024d35ba7c485", "url": "https://github.com/uyuni-project/uyuni/commit/e64a733080f2da14e3fd960eac8024d35ba7c485", "message": "Update the error message to make it more generic", "committedDate": "2020-04-21T13:04:59Z", "type": "forcePushed"}, {"oid": "5f9b339d8519d95adf9281a44c4d42edd3b93492", "url": "https://github.com/uyuni-project/uyuni/commit/5f9b339d8519d95adf9281a44c4d42edd3b93492", "message": "Update error message text to make it more generic", "committedDate": "2020-04-21T13:50:48Z", "type": "forcePushed"}, {"oid": "4c98066ec8d8e4b4df5ffdbbdc2a1df5d81f54c2", "url": "https://github.com/uyuni-project/uyuni/commit/4c98066ec8d8e4b4df5ffdbbdc2a1df5d81f54c2", "message": "Convert ValidatorException to ValidationException (for XMLRPC)", "committedDate": "2020-05-04T13:18:08Z", "type": "forcePushed"}, {"oid": "191ddc2c6aabec3071399facc07c98a95919fc66", "url": "https://github.com/uyuni-project/uyuni/commit/191ddc2c6aabec3071399facc07c98a95919fc66", "message": "Use interface and remove local exception handling", "committedDate": "2020-05-04T16:42:51Z", "type": "forcePushed"}, {"oid": "137e650953b00ac5fc164558f12b56eca8cf99f7", "url": "https://github.com/uyuni-project/uyuni/commit/137e650953b00ac5fc164558f12b56eca8cf99f7", "message": "Handle monitoring Formula when entitlement is added", "committedDate": "2020-05-20T10:51:18Z", "type": "commit"}, {"oid": "4aec80f90f814d58289d28920688347e1d373ced", "url": "https://github.com/uyuni-project/uyuni/commit/4aec80f90f814d58289d28920688347e1d373ced", "message": "Handle monitoring cleanup on entitlement removal", "committedDate": "2020-05-20T10:53:37Z", "type": "commit"}, {"oid": "5ee8cfda2733523c5e1a1ca23b63a378e57cdcd9", "url": "https://github.com/uyuni-project/uyuni/commit/5ee8cfda2733523c5e1a1ca23b63a378e57cdcd9", "message": "Stop throwing UnsupportedOperationException\n\nBoth methods expect a minionId as parameter.", "committedDate": "2020-05-20T10:53:39Z", "type": "commit"}, {"oid": "319d129d4b73d43ba377a15bd128d8dfd35efb96", "url": "https://github.com/uyuni-project/uyuni/commit/319d129d4b73d43ba377a15bd128d8dfd35efb96", "message": "Add throws clause for (unchecked) ValidatorException", "committedDate": "2020-05-20T10:53:39Z", "type": "commit"}, {"oid": "49be2b8278ea426ae676422bbc5ff2d56ee705d6", "url": "https://github.com/uyuni-project/uyuni/commit/49be2b8278ea426ae676422bbc5ff2d56ee705d6", "message": "Throw exceptions from monitoring enablement / disablement\n\nThen handle exceptions appropriately on the caller side.", "committedDate": "2020-05-20T10:57:00Z", "type": "commit"}, {"oid": "19d6ec483dd4912897d7a6bc30245583c16833b6", "url": "https://github.com/uyuni-project/uyuni/commit/19d6ec483dd4912897d7a6bc30245583c16833b6", "message": "Convert ValidatorException to ValidationException (for XMLRPC)", "committedDate": "2020-05-20T10:57:02Z", "type": "commit"}, {"oid": "daf0723aca53717f778a821de4b7312330489296", "url": "https://github.com/uyuni-project/uyuni/commit/daf0723aca53717f778a821de4b7312330489296", "message": "fixup! Introduce MonitoringManager (iface and implementation)", "committedDate": "2020-05-20T11:11:30Z", "type": "forcePushed"}, {"oid": "b747f6832f65a11930e71d6c4ecb40839b365248", "url": "https://github.com/uyuni-project/uyuni/commit/b747f6832f65a11930e71d6c4ecb40839b365248", "message": "Introduce MonitoringManager (iface and implementation)", "committedDate": "2020-05-20T14:36:08Z", "type": "commit"}, {"oid": "c14d52d3f31ddc3c9d0cea285b008e72bc0e9841", "url": "https://github.com/uyuni-project/uyuni/commit/c14d52d3f31ddc3c9d0cea285b008e72bc0e9841", "message": "Use interface and remove local exception handling", "committedDate": "2020-05-20T14:36:09Z", "type": "commit"}, {"oid": "b23c892d5685477e71532164e8c66e48af649dab", "url": "https://github.com/uyuni-project/uyuni/commit/b23c892d5685477e71532164e8c66e48af649dab", "message": "Remove now obsolete methods from FormulaManager\n\n- enableMonitoringOnEntitlementAdd(MinionServer minion)\n- disableMonitoringOnEntitlementRemoval(MinionServer minion)\n- isMonitoringCleanupNeeded(MinionServer server)", "committedDate": "2020-05-20T14:36:09Z", "type": "commit"}, {"oid": "5a373e47e5b21b284ce467299fe2adcf6715e947", "url": "https://github.com/uyuni-project/uyuni/commit/5a373e47e5b21b284ce467299fe2adcf6715e947", "message": "Re-introduce testIsMonitoringCleanupNeeded()", "committedDate": "2020-05-20T14:36:09Z", "type": "commit"}, {"oid": "5a373e47e5b21b284ce467299fe2adcf6715e947", "url": "https://github.com/uyuni-project/uyuni/commit/5a373e47e5b21b284ce467299fe2adcf6715e947", "message": "Re-introduce testIsMonitoringCleanupNeeded()", "committedDate": "2020-05-20T14:36:09Z", "type": "forcePushed"}, {"oid": "3494bf24927722a3c9c12d394e48812474d539f6", "url": "https://github.com/uyuni-project/uyuni/commit/3494bf24927722a3c9c12d394e48812474d539f6", "message": "Pass MonitoringManager to the constructor of SystemEntitler", "committedDate": "2020-05-20T15:05:38Z", "type": "commit"}, {"oid": "ee125983a0a3502361c9f600d4149ed948822185", "url": "https://github.com/uyuni-project/uyuni/commit/ee125983a0a3502361c9f600d4149ed948822185", "message": "Fix import definitions", "committedDate": "2020-05-20T15:21:12Z", "type": "commit"}]}