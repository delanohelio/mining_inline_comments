{"pr_number": 2069, "pr_title": "Bootstrap minions using an SSH private key via XMLRPC", "pr_createdAt": "2020-03-27T13:06:11Z", "pr_url": "https://github.com/uyuni-project/uyuni/pull/2069", "timeline": [{"oid": "c332bbdb2112d4100d1ae4f342f0d2884ffa17af", "url": "https://github.com/uyuni-project/uyuni/commit/c332bbdb2112d4100d1ae4f342f0d2884ffa17af", "message": "Changelog", "committedDate": "2020-03-27T13:06:23Z", "type": "forcePushed"}, {"oid": "cfc615d51fa12a9b78f0c1df3e147a4c28586ee3", "url": "https://github.com/uyuni-project/uyuni/commit/cfc615d51fa12a9b78f0c1df3e147a4c28586ee3", "message": "Changelog", "committedDate": "2020-03-27T13:12:10Z", "type": "forcePushed"}, {"oid": "254a6a1f859fb8f9b59cd7f420bce88a1e186442", "url": "https://github.com/uyuni-project/uyuni/commit/254a6a1f859fb8f9b59cd7f420bce88a1e186442", "message": "Add methods to SystemQuery\n\nThese will be extracted to a separate interface in later stages of\nSaltService refactoring.", "committedDate": "2020-03-30T14:53:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyNDE0Ng==", "url": "https://github.com/uyuni-project/uyuni/pull/2069#discussion_r400724146", "bodyText": "To be on the safe side, Ithe call to callSyncSSHInternal could be wrapped in a try { ... } finally { ... } block and the cleanup of the key moved inside finally { ... }.", "author": "mateiw", "createdAt": "2020-03-31T08:15:30Z", "path": "java/code/src/com/suse/manager/webui/services/impl/SaltSSHService.java", "diffHunk": "@@ -559,9 +568,23 @@ private boolean addSaltSSHMinionsFromDb(SaltRoster roster) {\n                         roster,\n                         parameters.isIgnoreHostKeys(),\n                         isSudoUser(parameters.getUser()));\n+        tmpKeyFileAbsolutePath.ifPresent(path -> cleanUpTempKeyFile(path));", "originalCommit": "254a6a1f859fb8f9b59cd7f420bce88a1e186442", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc2MjA3NQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2069#discussion_r400762075", "bodyText": "Great catch, fixed!", "author": "hustodemon", "createdAt": "2020-03-31T09:16:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyNDE0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "0ef68e43deb6e03b510b66b6480d0a325133c020", "chunk": "diff --git a/java/code/src/com/suse/manager/webui/services/impl/SaltSSHService.java b/java/code/src/com/suse/manager/webui/services/impl/SaltSSHService.java\nindex 51fa93b07d5..ca481ad7a88 100644\n--- a/java/code/src/com/suse/manager/webui/services/impl/SaltSSHService.java\n+++ b/java/code/src/com/suse/manager/webui/services/impl/SaltSSHService.java\n\n@@ -568,23 +559,9 @@ public class SaltSSHService {\n                         roster,\n                         parameters.isIgnoreHostKeys(),\n                         isSudoUser(parameters.getUser()));\n-        tmpKeyFileAbsolutePath.ifPresent(path -> cleanUpTempKeyFile(path));\n         return result.get(parameters.getHost());\n     }\n \n-    private Path createTempKeyFile(String privateKeyContents) {\n-        String fileName = \"boostrapKeyTmp-\" + UUID.randomUUID();\n-        Path fileAbsolutePath = Path.of(SSH_TEMP_BOOTSTRAP_KEY_DIR).resolve(fileName).toAbsolutePath();\n-        SaltService.INSTANCE.storeSshKeyFile(fileAbsolutePath, privateKeyContents);\n-        return fileAbsolutePath;\n-    }\n-\n-    private void cleanUpTempKeyFile(Path path) {\n-        SaltService.INSTANCE\n-                .removeFile(path)\n-                .orElseThrow(() -> new IllegalStateException(\"Can't remove file \" + path));\n-    }\n-\n     private Optional<Map<String, Object>> minionOpts(String minionId,\n                                                     String sshContactMethod) {\n         if (ContactMethodUtil.SSH_PUSH_TUNNEL.equals(sshContactMethod)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczMjgzNw==", "url": "https://github.com/uyuni-project/uyuni/pull/2069#discussion_r400732837", "bodyText": "Nitpick: instead of new ArrayList<>() one could use Collections.emptyList().", "author": "mateiw", "createdAt": "2020-03-31T08:29:18Z", "path": "java/code/src/com/suse/manager/webui/utils/gson/BootstrapHostsJson.java", "diffHunk": "@@ -57,8 +61,30 @@ public BootstrapHostsJson(String hostIn, Integer portIn, String userIn,\n         port = String.valueOf(portIn);\n         user = userIn;\n         password = passwordIn;\n-        activationKeys = StringUtils.isEmpty(activationKey) ?\n-                new ArrayList<>() : Arrays.asList(activationKey);\n+        activationKeys = StringUtils.isEmpty(activationKey) ? new ArrayList<>() : Arrays.asList(activationKey);", "originalCommit": "254a6a1f859fb8f9b59cd7f420bce88a1e186442", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc2MjI1Nw==", "url": "https://github.com/uyuni-project/uyuni/pull/2069#discussion_r400762257", "bodyText": "Good point. Changed.", "author": "hustodemon", "createdAt": "2020-03-31T09:17:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczMjgzNw=="}], "type": "inlineReview", "revised_code": {"commit": "cfaa30a51275a007cc7ad83813d0cd712b65e923", "chunk": "diff --git a/java/code/src/com/suse/manager/webui/utils/gson/BootstrapHostsJson.java b/java/code/src/com/suse/manager/webui/utils/gson/BootstrapHostsJson.java\nindex 4d4668d4c1f..d07105ee2fd 100644\n--- a/java/code/src/com/suse/manager/webui/utils/gson/BootstrapHostsJson.java\n+++ b/java/code/src/com/suse/manager/webui/utils/gson/BootstrapHostsJson.java\n\n@@ -61,7 +61,7 @@ public class BootstrapHostsJson {\n         port = String.valueOf(portIn);\n         user = userIn;\n         password = passwordIn;\n-        activationKeys = StringUtils.isEmpty(activationKey) ? new ArrayList<>() : Arrays.asList(activationKey);\n+        activationKeys = StringUtils.isEmpty(activationKey) ? Collections.emptyList() : Arrays.asList(activationKey);\n         proxy = proxyIn;\n         ignoreHostKeys = true;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczMzA0NA==", "url": "https://github.com/uyuni-project/uyuni/pull/2069#discussion_r400733044", "bodyText": "See nitpick above.", "author": "mateiw", "createdAt": "2020-03-31T08:29:36Z", "path": "java/code/src/com/suse/manager/webui/utils/gson/BootstrapHostsJson.java", "diffHunk": "@@ -57,8 +61,30 @@ public BootstrapHostsJson(String hostIn, Integer portIn, String userIn,\n         port = String.valueOf(portIn);\n         user = userIn;\n         password = passwordIn;\n-        activationKeys = StringUtils.isEmpty(activationKey) ?\n-                new ArrayList<>() : Arrays.asList(activationKey);\n+        activationKeys = StringUtils.isEmpty(activationKey) ? new ArrayList<>() : Arrays.asList(activationKey);\n+        proxy = proxyIn;\n+        ignoreHostKeys = true;\n+    }\n+\n+    /**\n+     * Constructor to be used for bootstrapping systems with SSH private key via API.\n+     *\n+     * @param hostIn target host\n+     * @param portIn SSH port\n+     * @param userIn SSH user\n+     * @param privKeyIn SSH private key in PEM format\n+     * @param privKeyPwdIn SSH private key passphrase (empty/null string = no passphrase)\n+     * @param activationKey activation key\n+     * @param proxyIn system ID of proxy server to use\n+     */\n+    public BootstrapHostsJson(String hostIn, Integer portIn, String userIn,\n+            String privKeyIn, String privKeyPwdIn, String activationKey, Long proxyIn) {\n+        host = hostIn;\n+        port = String.valueOf(portIn);\n+        user = userIn;\n+        privKey = Optional.of(privKeyIn);\n+        privKeyPwd = StringUtils.isEmpty(privKeyPwdIn) ? empty() : Optional.of(privKeyPwdIn);\n+        activationKeys = StringUtils.isEmpty(activationKey) ? new ArrayList<>() : Arrays.asList(activationKey);", "originalCommit": "254a6a1f859fb8f9b59cd7f420bce88a1e186442", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cfaa30a51275a007cc7ad83813d0cd712b65e923", "chunk": "diff --git a/java/code/src/com/suse/manager/webui/utils/gson/BootstrapHostsJson.java b/java/code/src/com/suse/manager/webui/utils/gson/BootstrapHostsJson.java\nindex 4d4668d4c1f..d07105ee2fd 100644\n--- a/java/code/src/com/suse/manager/webui/utils/gson/BootstrapHostsJson.java\n+++ b/java/code/src/com/suse/manager/webui/utils/gson/BootstrapHostsJson.java\n\n@@ -61,7 +61,7 @@ public class BootstrapHostsJson {\n         port = String.valueOf(portIn);\n         user = userIn;\n         password = passwordIn;\n-        activationKeys = StringUtils.isEmpty(activationKey) ? new ArrayList<>() : Arrays.asList(activationKey);\n+        activationKeys = StringUtils.isEmpty(activationKey) ? Collections.emptyList() : Arrays.asList(activationKey);\n         proxy = proxyIn;\n         ignoreHostKeys = true;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc0OTAxOA==", "url": "https://github.com/uyuni-project/uyuni/pull/2069#discussion_r400749018", "bodyText": "MgrUtilRunner is a wrapper for our custom mgrutil runner. Since these methods don't actually call a function from the runner I think they belong somewhere else, maybe in SaltService.", "author": "mateiw", "createdAt": "2020-03-31T08:55:35Z", "path": "java/code/src/com/suse/manager/webui/services/impl/runner/MgrUtilRunner.java", "diffHunk": "@@ -160,4 +160,51 @@ public static ExecResult success() {\n         return call;\n     }\n \n+    /**\n+     * {@link RunnerCall} for writing into a text file.\n+     * The result of the call is a text description with how many lines were written.\n+     *\n+     * @param absolutePath the file path\n+     * @param contents the file text contents\n+     * @return the runner call\n+     */\n+    public static RunnerCall<String> writeTextFile(String absolutePath, String contents) {", "originalCommit": "254a6a1f859fb8f9b59cd7f420bce88a1e186442", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc2MjM1OA==", "url": "https://github.com/uyuni-project/uyuni/pull/2069#discussion_r400762358", "bodyText": "I see. I got confused by the class javadoc. The methods should be definitely moved, but I think I'll put the calls to a separate class.", "author": "hustodemon", "createdAt": "2020-03-31T09:17:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc0OTAxOA=="}], "type": "inlineReview", "revised_code": {"commit": "0ef68e43deb6e03b510b66b6480d0a325133c020", "chunk": "diff --git a/java/code/src/com/suse/manager/webui/services/impl/runner/MgrUtilRunner.java b/java/code/src/com/suse/manager/webui/services/impl/runner/MgrUtilRunner.java\nindex e98723bfe47..a51d0851723 100644\n--- a/java/code/src/com/suse/manager/webui/services/impl/runner/MgrUtilRunner.java\n+++ b/java/code/src/com/suse/manager/webui/services/impl/runner/MgrUtilRunner.java\n\n@@ -160,51 +160,4 @@ public class MgrUtilRunner {\n         return call;\n     }\n \n-    /**\n-     * {@link RunnerCall} for writing into a text file.\n-     * The result of the call is a text description with how many lines were written.\n-     *\n-     * @param absolutePath the file path\n-     * @param contents the file text contents\n-     * @return the runner call\n-     */\n-    public static RunnerCall<String> writeTextFile(String absolutePath, String contents) {\n-        return new RunnerCall(\"salt.cmd\", Optional.of(Map.of(\n-                \"fun\", \"file.write\",\n-                \"path\", absolutePath,\n-                \"args\", contents)),\n-                new TypeToken<String>() { });\n-    }\n-\n-    /**\n-     * {@link RunnerCall} for setting mode of given file.\n-     * The result of the call is a text description of the file after the operation.\n-     *\n-     * @param absolutePath the absolute path of the file\n-     * @param modeString the desired mode\n-     * @return the runner call\n-     */\n-    public static RunnerCall<String> setFileMode(String absolutePath, String modeString) {\n-        return new RunnerCall(\"salt.cmd\", Optional.of(Map.of(\n-                \"fun\", \"file.set_mode\",\n-                \"path\", absolutePath,\n-                \"mode\", modeString)),\n-                new TypeToken<String>() { }\n-        );\n-    }\n-\n-    /**\n-     * {@link RunnerCall} for removing a file\n-     * The result of the call is the boolean, which is true, if path was found and the file deletion succeeded.\n-     *\n-     * @param absolutePath the absolute path of the file\n-     * @return the runner call\n-     */\n-    public static RunnerCall<Boolean> removeFile(String absolutePath) {\n-        return new RunnerCall(\"salt.cmd\", Optional.of(Map.of(\n-                \"fun\", \"file.remove\",\n-                \"path\", absolutePath)),\n-                new TypeToken<Boolean>() { });\n-    }\n-\n }\n"}}, {"oid": "0ef68e43deb6e03b510b66b6480d0a325133c020", "url": "https://github.com/uyuni-project/uyuni/commit/0ef68e43deb6e03b510b66b6480d0a325133c020", "message": "Add SSH private key/passphrase to the BootstrapHostsJson", "committedDate": "2020-03-31T12:08:55Z", "type": "commit"}, {"oid": "41b9f58fb58f2fd4d3c97b7339a6ada9e7286664", "url": "https://github.com/uyuni-project/uyuni/commit/41b9f58fb58f2fd4d3c97b7339a6ada9e7286664", "message": "Add SSH private key/passphrase to the BootstrapParameters", "committedDate": "2020-03-31T12:08:55Z", "type": "commit"}, {"oid": "8e2a34fa807242613f1dceaff3c039f3737917a9", "url": "https://github.com/uyuni-project/uyuni/commit/8e2a34fa807242613f1dceaff3c039f3737917a9", "message": "Add SSH private key path/key passphrase to the SaltRoster", "committedDate": "2020-03-31T12:08:55Z", "type": "commit"}, {"oid": "c75e2fd6170e103df538d880f4543d8a89cffaac", "url": "https://github.com/uyuni-project/uyuni/commit/c75e2fd6170e103df538d880f4543d8a89cffaac", "message": "Runner calls for handling SSH private keys on the disk", "committedDate": "2020-03-31T12:08:55Z", "type": "commit"}, {"oid": "d1c8f3566ff085e3edd103e915674ef5bd17c133", "url": "https://github.com/uyuni-project/uyuni/commit/d1c8f3566ff085e3edd103e915674ef5bd17c133", "message": "Use the Runner Calls to create/remove temporary SSH keys", "committedDate": "2020-03-31T12:08:56Z", "type": "commit"}, {"oid": "97c3b4fba2cf5f09259d4568cf9369f168f1f281", "url": "https://github.com/uyuni-project/uyuni/commit/97c3b4fba2cf5f09259d4568cf9369f168f1f281", "message": "Bootstrap minions/ssh minions using a SSH key", "committedDate": "2020-03-31T12:08:56Z", "type": "commit"}, {"oid": "5ebd85e29c61e40e555a5d83ec81bac405d83a7e", "url": "https://github.com/uyuni-project/uyuni/commit/5ebd85e29c61e40e555a5d83ec81bac405d83a7e", "message": "Ensure the directory for temporary SSH keys (for bootstrapping) exists", "committedDate": "2020-03-31T12:08:56Z", "type": "commit"}, {"oid": "a82f176718d4f35c2603cde0988d83e7b9fc2d26", "url": "https://github.com/uyuni-project/uyuni/commit/a82f176718d4f35c2603cde0988d83e7b9fc2d26", "message": "Expose the bootstraping using SSH key in XMLRPC", "committedDate": "2020-03-31T12:08:56Z", "type": "commit"}, {"oid": "74c826d1fcf1297fedd5e446b3658b38d5e7cf33", "url": "https://github.com/uyuni-project/uyuni/commit/74c826d1fcf1297fedd5e446b3658b38d5e7cf33", "message": "Prevent logging sensitive data", "committedDate": "2020-03-31T12:08:56Z", "type": "commit"}, {"oid": "760bb1929725f628154dba9b6eb77a919a879ba4", "url": "https://github.com/uyuni-project/uyuni/commit/760bb1929725f628154dba9b6eb77a919a879ba4", "message": "Changelog", "committedDate": "2020-03-31T12:09:08Z", "type": "commit"}, {"oid": "d3a3edcd88b33f96e9d4b8e77719e989deb380f4", "url": "https://github.com/uyuni-project/uyuni/commit/d3a3edcd88b33f96e9d4b8e77719e989deb380f4", "message": "Add methods to SystemQuery\n\nThese will be extracted to a separate interface in later stages of\nSaltService refactoring.", "committedDate": "2020-03-31T12:09:08Z", "type": "commit"}, {"oid": "cfaa30a51275a007cc7ad83813d0cd712b65e923", "url": "https://github.com/uyuni-project/uyuni/commit/cfaa30a51275a007cc7ad83813d0cd712b65e923", "message": "Address review comments\n\n- use Collections.emptyList() instead of new ArrayList()\n- handle the temp. key cleanup in a `finally` block\n- move the new runner calls to a separate class", "committedDate": "2020-03-31T12:09:08Z", "type": "commit"}, {"oid": "cfaa30a51275a007cc7ad83813d0cd712b65e923", "url": "https://github.com/uyuni-project/uyuni/commit/cfaa30a51275a007cc7ad83813d0cd712b65e923", "message": "Address review comments\n\n- use Collections.emptyList() instead of new ArrayList()\n- handle the temp. key cleanup in a `finally` block\n- move the new runner calls to a separate class", "committedDate": "2020-03-31T12:09:08Z", "type": "forcePushed"}]}