{"pr_number": 2767, "pr_title": "Feat: Implement a Debian package comparator", "pr_createdAt": "2020-10-28T09:33:50Z", "pr_url": "https://github.com/uyuni-project/uyuni/pull/2767", "timeline": [{"oid": "e8a33da12199c23ce8ca98e89ffc440561e9da5a", "url": "https://github.com/uyuni-project/uyuni/commit/e8a33da12199c23ce8ca98e89ffc440561e9da5a", "message": "add type to evr", "committedDate": "2020-10-28T09:42:39Z", "type": "forcePushed"}, {"oid": "cd2fbb282f1a28ebbbd222de21e5301c48d7ee73", "url": "https://github.com/uyuni-project/uyuni/commit/cd2fbb282f1a28ebbbd222de21e5301c48d7ee73", "message": "fix deps file", "committedDate": "2020-10-28T14:29:01Z", "type": "forcePushed"}, {"oid": "4e7f1552ff66d8f347b846ed4d27579700a251fe", "url": "https://github.com/uyuni-project/uyuni/commit/4e7f1552ff66d8f347b846ed4d27579700a251fe", "message": "fix type attribute access", "committedDate": "2020-10-28T16:00:31Z", "type": "forcePushed"}, {"oid": "3334dad21f982db8134e80a1ee1f1b0030253f5c", "url": "https://github.com/uyuni-project/uyuni/commit/3334dad21f982db8134e80a1ee1f1b0030253f5c", "message": "adjust rhnpackageevr indices", "committedDate": "2020-10-29T15:18:02Z", "type": "forcePushed"}, {"oid": "9ad2693b9d16298f5e1ac6508e68b7c6e22a1501", "url": "https://github.com/uyuni-project/uyuni/commit/9ad2693b9d16298f5e1ac6508e68b7c6e22a1501", "message": "fix idempotency", "committedDate": "2020-11-04T10:27:03Z", "type": "forcePushed"}, {"oid": "43c93a0afcfa8b00e482dc776c8112995801f518", "url": "https://github.com/uyuni-project/uyuni/commit/43c93a0afcfa8b00e482dc776c8112995801f518", "message": "remove references to rpm.vercmp in queries", "committedDate": "2020-11-05T13:50:14Z", "type": "forcePushed"}, {"oid": "a54740b5e97e12c8a538d7c8dccc23a0270da430", "url": "https://github.com/uyuni-project/uyuni/commit/a54740b5e97e12c8a538d7c8dccc23a0270da430", "message": "remove references to rpm.vercmp in queries", "committedDate": "2020-11-05T14:26:57Z", "type": "forcePushed"}, {"oid": "5a7a3464468fd847866e1ea173814c3e3f3443e1", "url": "https://github.com/uyuni-project/uyuni/commit/5a7a3464468fd847866e1ea173814c3e3f3443e1", "message": "fix java unit test", "committedDate": "2020-11-07T15:33:27Z", "type": "forcePushed"}, {"oid": "2a77564e67b86c92a1c5a1e4c774fa223f9e4838", "url": "https://github.com/uyuni-project/uyuni/commit/2a77564e67b86c92a1c5a1e4c774fa223f9e4838", "message": "change deb/rpm comparison", "committedDate": "2020-11-09T12:58:01Z", "type": "forcePushed"}, {"oid": "5621a1f5a687bb5cca360af877fc06f0fc9ea263", "url": "https://github.com/uyuni-project/uyuni/commit/5621a1f5a687bb5cca360af877fc06f0fc9ea263", "message": "change deb/rpm comparison", "committedDate": "2020-11-09T17:50:53Z", "type": "forcePushed"}, {"oid": "f8c2ab9ad53608356164c661968291ad7ec340cb", "url": "https://github.com/uyuni-project/uyuni/commit/f8c2ab9ad53608356164c661968291ad7ec340cb", "message": "make version type an enum", "committedDate": "2020-11-10T14:47:29Z", "type": "forcePushed"}, {"oid": "bd276e425802bcc6d34bcc2a42f4a766b0bfa991", "url": "https://github.com/uyuni-project/uyuni/commit/bd276e425802bcc6d34bcc2a42f4a766b0bfa991", "message": "renmae lookup_evr2 back to lookup_evr", "committedDate": "2020-11-10T09:58:51Z", "type": "forcePushed"}, {"oid": "ff95dabd38bbc53a17f747b901d293bcd4c185ab", "url": "https://github.com/uyuni-project/uyuni/commit/ff95dabd38bbc53a17f747b901d293bcd4c185ab", "message": "renmae lookup_evr2 back to lookup_evr", "committedDate": "2020-11-11T16:49:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc1NzE3Mg==", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r523757172", "bodyText": "This is not anymore the test for PackageUtils. Should we move these tests to PackageEvrTest?", "author": "mcalmer", "createdAt": "2020-11-15T13:14:23Z", "path": "java/code/src/com/suse/manager/utils/test/PackageUtilsTest.java", "diffHunk": "@@ -19,23 +19,21 @@\n import com.redhat.rhn.domain.rhnpackage.PackageFactory;\n import com.redhat.rhn.domain.rhnpackage.test.PackageTest;\n import com.redhat.rhn.testing.BaseTestCaseWithUser;\n-import com.suse.manager.utils.PackageUtils;", "originalCommit": "e0b2f881efc342d1eea8e5b1862fabfca06411a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA5Nzk4NA==", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r524097984", "bodyText": "would make sense i did not do that the first time since i wanted to keep diff minimal but now we should do it.", "author": "lucidd", "createdAt": "2020-11-16T10:37:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc1NzE3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "03c5f67a930c8525a20874c1ecf7dfd20a4391ff", "chunk": "diff --git a/java/code/src/com/suse/manager/utils/test/PackageUtilsTest.java b/java/code/src/com/suse/manager/utils/test/PackageUtilsTest.java\ndeleted file mode 100644\nindex 45cd264ab24..00000000000\n--- a/java/code/src/com/suse/manager/utils/test/PackageUtilsTest.java\n+++ /dev/null\n\n@@ -1,111 +0,0 @@\n-/**\n- * Copyright (c) 2019 SUSE LLC\n- *\n- * This software is licensed to you under the GNU General Public License,\n- * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n- * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n- * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n- * along with this software; if not, see\n- * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n- *\n- * Red Hat trademarks are not licensed under GPLv2. No permission is\n- * granted to use or replicate Red Hat trademarks that are incorporated\n- * in this software or its documentation.\n- */\n-package com.suse.manager.utils.test;\n-\n-import com.redhat.rhn.domain.rhnpackage.Package;\n-import com.redhat.rhn.domain.rhnpackage.PackageEvr;\n-import com.redhat.rhn.domain.rhnpackage.PackageFactory;\n-import com.redhat.rhn.domain.rhnpackage.test.PackageTest;\n-import com.redhat.rhn.testing.BaseTestCaseWithUser;\n-\n-public class PackageUtilsTest extends BaseTestCaseWithUser {\n-\n-    public void testIsType() throws Exception {\n-        Package pkgRpm = PackageTest.createTestPackage(user.getOrg(),\n-                PackageFactory.lookupPackageArchByLabel(\"x86_64\"));\n-\n-        Package pkgDeb = PackageTest.createTestPackage(user.getOrg(),\n-                PackageFactory.lookupPackageArchByLabel(\"amd64-deb\"));\n-\n-        assertTrue(pkgRpm.isTypeRpm());\n-        assertFalse(pkgRpm.isTypeDeb());\n-\n-        assertFalse(pkgDeb.isTypeRpm());\n-        assertTrue(pkgDeb.isTypeDeb());\n-    }\n-\n-    /**\n-     * Debian package versioning policy format: [epoch:]upstream_version[-debian_revision]\n-     * Additional ':' and '-' characters are allowed in 'upstream_version'\n-     * https://www.debian.org/doc/debian-policy/ch-controlfields.html#version\n-     *\n-     * Tests:\n-     *   - 1:2.3~.4a+b-5\n-     *   - 2.3~.4a+b-5\n-     *   - 2.3~.4a+b\n-     *   - 1:2.3~.4a+b\n-     *   - 1:2.3~.4a+b-5+abc.6~\n-     *   - 1:2-3-4-5\n-     *\n-     */\n-    public void testParseDebianEvr() {\n-\n-        PackageEvr evr;\n-\n-        evr = PackageEvr.parseDebian(\"1:2.3~.4a+b-5\");\n-        assertEquals(\"1\", evr.getEpoch());\n-        assertEquals(\"2.3~.4a+b\", evr.getVersion());\n-        assertEquals(\"5\", evr.getRelease());\n-\n-        evr = PackageEvr.parseDebian(\"2.3~.4a+b-5\");\n-        assertNull(evr.getEpoch());\n-        assertEquals(\"2.3~.4a+b\", evr.getVersion());\n-        assertEquals(\"5\", evr.getRelease());\n-\n-        evr = PackageEvr.parseDebian(\"2.3~.4a+b\");\n-        assertNull(evr.getEpoch());\n-        assertEquals(\"2.3~.4a+b\", evr.getVersion());\n-        assertEquals(\"X\", evr.getRelease());\n-\n-        evr = PackageEvr.parseDebian(\"1:2.3~.4a+b\");\n-        assertEquals(\"1\", evr.getEpoch());\n-        assertEquals(\"2.3~.4a+b\", evr.getVersion());\n-        assertEquals(\"X\", evr.getRelease());\n-\n-        evr = PackageEvr.parseDebian(\"1:2.3~.4a+b-5+abc.6~\");\n-        assertEquals(\"1\", evr.getEpoch());\n-        assertEquals(\"2.3~.4a+b\", evr.getVersion());\n-        assertEquals(\"5+abc.6~\", evr.getRelease());\n-\n-        evr = PackageEvr.parseDebian(\"2-3-4-5\");\n-        assertNull(evr.getEpoch());\n-        assertEquals(\"2-3-4\", evr.getVersion());\n-        assertEquals(\"5\", evr.getRelease());\n-    }\n-\n-    public void testParseRpmEvr() {\n-        PackageEvr evr;\n-\n-        evr = PackageEvr.parseRpm(\"1:1.2.3-4.5\");\n-        assertEquals(\"1\", evr.getEpoch());\n-        assertEquals(\"1.2.3\", evr.getVersion());\n-        assertEquals(\"4.5\", evr.getRelease());\n-\n-        evr = PackageEvr.parseRpm(\"1.2.3-4.5\");\n-        assertNull(evr.getEpoch());\n-        assertEquals(\"1.2.3\", evr.getVersion());\n-        assertEquals(\"4.5\", evr.getRelease());\n-\n-        evr = PackageEvr.parseRpm(\"1:1.2.3-4.5\");\n-        assertEquals(\"1\", evr.getEpoch());\n-        assertEquals(\"1.2.3\", evr.getVersion());\n-        assertEquals(\"4.5\", evr.getRelease());\n-\n-        evr = PackageEvr.parseRpm(\"1.2.3\");\n-        assertNull(evr.getEpoch());\n-        assertEquals(\"1.2.3\", evr.getVersion());\n-        assertEquals(\"\", evr.getRelease());\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc1ODEzMA==", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r523758130", "bodyText": "Why do we still store epoch, version and release as single values? Could we just change the getters to return packageEvr.getXXX() ?", "author": "mcalmer", "createdAt": "2020-11-15T13:22:35Z", "path": "java/code/src/com/suse/manager/webui/utils/gson/PackageStateJson.java", "diffHunk": "@@ -89,6 +92,7 @@ public PackageStateJson(String nameIn, PackageEvr evrIn, String archIn) {\n         this.arch = archIn;\n         this.packageStateId = Optional.empty();\n         this.versionConstraintId = Optional.empty();\n+        this.packageEvr = evrIn;", "originalCommit": "e0b2f881efc342d1eea8e5b1862fabfca06411a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI2OTQ3OA==", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r524269478", "bodyText": "i reworked this again and removed the packageEvr again since i found a place that read PackageStateJson from json which would not have worked.", "author": "lucidd", "createdAt": "2020-11-16T13:32:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc1ODEzMA=="}], "type": "inlineReview", "revised_code": {"commit": "03c5f67a930c8525a20874c1ecf7dfd20a4391ff", "chunk": "diff --git a/java/code/src/com/suse/manager/webui/utils/gson/PackageStateJson.java b/java/code/src/com/suse/manager/webui/utils/gson/PackageStateJson.java\nindex 1d54e7860fe..ff089396dd1 100644\n--- a/java/code/src/com/suse/manager/webui/utils/gson/PackageStateJson.java\n+++ b/java/code/src/com/suse/manager/webui/utils/gson/PackageStateJson.java\n\n@@ -92,7 +90,6 @@ public class PackageStateJson {\n         this.arch = archIn;\n         this.packageStateId = Optional.empty();\n         this.versionConstraintId = Optional.empty();\n-        this.packageEvr = evrIn;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc1ODM4NQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r523758385", "bodyText": "Is it sufficient to use packageEvr directly? It might not contain the DB ID when it was just initialized with new.\nDo we need the ID?", "author": "mcalmer", "createdAt": "2020-11-15T13:24:58Z", "path": "java/code/src/com/suse/manager/webui/utils/gson/PackageStateJson.java", "diffHunk": "@@ -164,8 +168,7 @@ public String getArch() {\n                     VersionConstraints vc = versionConstraint.get();\n                     if (!Arrays.asList(VersionConstraints.LATEST, VersionConstraints.ANY)\n                             .contains(vc)) {\n-                        packageState.setEvr(PackageEvrFactory.lookupOrCreatePackageEvr(\n-                                getEpoch(), getVersion(), getRelease()));\n+                        packageState.setEvr(packageEvr);", "originalCommit": "e0b2f881efc342d1eea8e5b1862fabfca06411a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI2OTkxOA==", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r524269918", "bodyText": "This is now fixed in the reworked version going back to using the lookup function and taking the evr type as parameter to this function instead.", "author": "lucidd", "createdAt": "2020-11-16T13:33:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc1ODM4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "03c5f67a930c8525a20874c1ecf7dfd20a4391ff", "chunk": "diff --git a/java/code/src/com/suse/manager/webui/utils/gson/PackageStateJson.java b/java/code/src/com/suse/manager/webui/utils/gson/PackageStateJson.java\nindex 1d54e7860fe..ff089396dd1 100644\n--- a/java/code/src/com/suse/manager/webui/utils/gson/PackageStateJson.java\n+++ b/java/code/src/com/suse/manager/webui/utils/gson/PackageStateJson.java\n\n@@ -168,7 +165,7 @@ public class PackageStateJson {\n                     VersionConstraints vc = versionConstraint.get();\n                     if (!Arrays.asList(VersionConstraints.LATEST, VersionConstraints.ANY)\n                             .contains(vc)) {\n-                        packageState.setEvr(packageEvr);\n+                        packageState.setEvr(PackageEvrFactory.lookupOrCreatePackageEvr(epoch, version, release, type));\n                     }\n                     packageState.setVersionConstraint(vc);\n                 }\n"}}, {"oid": "03c5f67a930c8525a20874c1ecf7dfd20a4391ff", "url": "https://github.com/uyuni-project/uyuni/commit/03c5f67a930c8525a20874c1ecf7dfd20a4391ff", "message": "reorder migration scripts", "committedDate": "2020-11-17T11:38:59Z", "type": "forcePushed"}, {"oid": "3d985d475c087b5666c987f1de8a3d48ec6e60bb", "url": "https://github.com/uyuni-project/uyuni/commit/3d985d475c087b5666c987f1de8a3d48ec6e60bb", "message": "reorder migration scripts", "committedDate": "2020-11-17T16:16:14Z", "type": "forcePushed"}, {"oid": "829ef079f90def2181a4b7ed684c6714c7ee7f95", "url": "https://github.com/uyuni-project/uyuni/commit/829ef079f90def2181a4b7ed684c6714c7ee7f95", "message": "reorder migration scripts", "committedDate": "2020-11-17T16:27:46Z", "type": "forcePushed"}, {"oid": "933085fab8e348b5583cfef1d2ba155a0a0d7632", "url": "https://github.com/uyuni-project/uyuni/commit/933085fab8e348b5583cfef1d2ba155a0a0d7632", "message": "reorder migration scripts", "committedDate": "2020-11-20T17:13:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTMwODMzOQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r529308339", "bodyText": "Likely a C&P comment.", "author": "hustodemon", "createdAt": "2020-11-24T08:59:36Z", "path": "java/code/src/com/redhat/rhn/common/util/DebVersionComparator.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.redhat.rhn.common.util;\n+\n+import java.util.Comparator;\n+\n+/**\n+ * DebVersionComparatorTest", "originalCommit": "933085fab8e348b5583cfef1d2ba155a0a0d7632", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0e2462b2016ece0db831c4816fdd72d4de0e97ec", "chunk": "diff --git a/java/code/src/com/redhat/rhn/common/util/DebVersionComparator.java b/java/code/src/com/redhat/rhn/common/util/DebVersionComparator.java\nindex 1b569618119..2209c8a34ca 100644\n--- a/java/code/src/com/redhat/rhn/common/util/DebVersionComparator.java\n+++ b/java/code/src/com/redhat/rhn/common/util/DebVersionComparator.java\n\n@@ -17,7 +17,7 @@ package com.redhat.rhn.common.util;\n import java.util.Comparator;\n \n /**\n- * DebVersionComparatorTest\n+ * DebVersionComparator\n  * @version $Rev$\n  */\n public class DebVersionComparator implements Comparator<String> {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTMxNzMzMw==", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r529317333", "bodyText": "Nit (here and below): unsupported/unknown would be more fitting, IMHO. When we implement a new type, but forget to change this method, we will \"reach the unreachable\" in the log \ud83d\ude09", "author": "hustodemon", "createdAt": "2020-11-24T09:07:04Z", "path": "java/code/src/com/redhat/rhn/domain/rhnpackage/PackageEvr.java", "diffHunk": "@@ -221,4 +293,100 @@ public String toUniversalEvrString() {\n \n         return builder.toString();\n     }\n+\n+    /**\n+     * Parses a Debian package version string to create a {@link PackageEvr} object.\n+     *\n+     * Debian package versioning policy format: [epoch:]upstream_version[-debian_revision]\n+     * Additional ':' and '-' characters are allowed in 'upstream_version'\n+     * https://www.debian.org/doc/debian-policy/ch-controlfields.html#version\n+     *\n+     * @param version the package version string\n+     * @return the package EVR\n+     */\n+    public static PackageEvr parseDebian(String version) {\n+\n+        // repo-sync replaces empty releases with 'X'. We copy the same behavior.\n+        String release = \"X\";\n+        String epoch = null;\n+\n+        int epochIndex = version.indexOf(':');\n+        if (epochIndex > 0) {\n+            // Strip away optional 'epoch'\n+            epoch = version.substring(0, epochIndex);\n+            version = version.substring(epochIndex + 1);\n+        }\n+\n+        int releaseIndex = version.lastIndexOf('-');\n+        if (releaseIndex > 0) {\n+            // Strip away optional 'release'\n+            release = version.substring(releaseIndex + 1);\n+            version = version.substring(0, releaseIndex);\n+        }\n+\n+        return new PackageEvr(epoch, version, release, \"deb\");\n+    }\n+\n+    /**\n+     * Parses a RPM package version string to create a {@link PackageEvr} object.\n+     *\n+     * RPM package version policy format: [epoch:]version[-release]\n+     *\n+     * @param version the package version string\n+     * @return the package EVR\n+     */\n+    public static PackageEvr parseRpm(String version) {\n+        String release = \"\";\n+        String epoch = null;\n+\n+        int epochIndex = version.indexOf(':');\n+        if (epochIndex > 0) {\n+            // Strip away optional 'epoch'\n+            epoch = version.substring(0, epochIndex);\n+            version = version.substring(epochIndex + 1);\n+        }\n+\n+        int releaseIndex = version.lastIndexOf('-');\n+        if (releaseIndex > 0) {\n+            // Strip away optional 'release'\n+            release = version.substring(releaseIndex + 1);\n+            version = version.substring(0, releaseIndex);\n+        }\n+\n+        return new PackageEvr(epoch, version, release, \"rpm\");\n+    }\n+\n+    /**\n+     * @return package type\n+     */\n+    public PackageType getPackageType() {\n+        if (type.equals(PackageType.DEB.getDbString())) {\n+            return PackageType.DEB;\n+        }\n+        else if (type.equals(PackageType.RPM.getDbString())) {\n+            return PackageType.RPM;\n+        }\n+        else {\n+            throw new RuntimeException(\"unreachable\");", "originalCommit": "933085fab8e348b5583cfef1d2ba155a0a0d7632", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0e2462b2016ece0db831c4816fdd72d4de0e97ec", "chunk": "diff --git a/java/code/src/com/redhat/rhn/domain/rhnpackage/PackageEvr.java b/java/code/src/com/redhat/rhn/domain/rhnpackage/PackageEvr.java\nindex 8326f275638..ff23f825d1e 100644\n--- a/java/code/src/com/redhat/rhn/domain/rhnpackage/PackageEvr.java\n+++ b/java/code/src/com/redhat/rhn/domain/rhnpackage/PackageEvr.java\n\n@@ -367,7 +367,7 @@ public class PackageEvr implements Comparable<PackageEvr> {\n             return PackageType.RPM;\n         }\n         else {\n-            throw new RuntimeException(\"unreachable\");\n+            throw new RuntimeException(\"unsupported evr type: \" + type);\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTMyMDQ4NA==", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r529320484", "bodyText": "Is there a reason for modifying existing tests instead of just writing new? Don't we support comparing evr in format 0-0-0 anymore?", "author": "hustodemon", "createdAt": "2020-11-24T09:09:37Z", "path": "java/code/src/com/redhat/rhn/domain/rhnpackage/test/PackageEvrComparableTest.java", "diffHunk": "@@ -24,42 +24,51 @@\n \n /**\n  * Test the compare() method in PackageEvr\n- * @version $Rev$\n  */\n public class PackageEvrComparableTest extends RhnBaseTestCase {\n \n     public void testEquality() {\n-        compare(0, \"0-0-0\", \"0-0-0\");\n-        compare(0, \"null-0-0\", \"0-0-0\");\n-        compare(0, \"null-0-0\", \"null-0-0\");\n+        compare(0, \"0:0-0\", \"0:0-0\");", "originalCommit": "933085fab8e348b5583cfef1d2ba155a0a0d7632", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI4NTU1OA==", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r530285558", "bodyText": "This format was only used for the tests here. It had a special parser only used here.\nI think it is much better if we use the official format and the official parser.", "author": "mcalmer", "createdAt": "2020-11-25T10:59:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTMyMDQ4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg0NTQxOA==", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r530845418", "bodyText": "ok!", "author": "hustodemon", "createdAt": "2020-11-26T08:21:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTMyMDQ4NA=="}], "type": "inlineReview", "revised_code": {"commit": "8e8021c163658f7595da5fbad66962c29025ae90", "chunk": "diff --git a/java/code/src/com/redhat/rhn/domain/rhnpackage/test/PackageEvrComparableTest.java b/java/code/src/com/redhat/rhn/domain/rhnpackage/test/PackageEvrComparableTest.java\nindex a19dfb03559..76a9c29280e 100644\n--- a/java/code/src/com/redhat/rhn/domain/rhnpackage/test/PackageEvrComparableTest.java\n+++ b/java/code/src/com/redhat/rhn/domain/rhnpackage/test/PackageEvrComparableTest.java\n\n@@ -24,51 +24,42 @@ import com.redhat.rhn.testing.RhnBaseTestCase;\n \n /**\n  * Test the compare() method in PackageEvr\n+ * @version $Rev$\n  */\n public class PackageEvrComparableTest extends RhnBaseTestCase {\n \n     public void testEquality() {\n-        compare(0, \"0:0-0\", \"0:0-0\");\n-        compare(0, \"0-0\", \"0:0-0\");\n-        compare(0, \"0-0\", \"0-0\");\n+        compare(0, \"0-0-0\", \"0-0-0\");\n+        compare(0, \"null-0-0\", \"0-0-0\");\n+        compare(0, \"null-0-0\", \"null-0-0\");\n     }\n \n     public void testFailure() {\n-        failure(new PackageEvr(\"0\", null, \"0\", PackageType.RPM), IllegalStateException.class);\n-        failure(new PackageEvr(\"0\", \"0\", null, PackageType.RPM), NullPointerException.class);\n-        failure(new PackageEvr(\"X\", \"0\", null, PackageType.RPM), NumberFormatException.class);\n+        failure(\"0-null-0\", IllegalStateException.class);\n+        failure(\"0-0-null\", NullPointerException.class);\n+        failure(\"X-0-null\", NumberFormatException.class);\n     }\n \n     public void testDifference() {\n-        compare(-1, \"1:1-1\", \"2:5-7\");\n-        compare(-1, \"1:5-7\", \"2:5-7\");\n-        compare(-1, \"1:1-7\", \"1:5-7\");\n-        compare(1, \"1:1-7\", \"1:1-6\");\n-        compare(1, \"1:10-7\", \"1:9-6\");\n-        compare(-1, \"1:9-7\", \"1:11-6\");\n-        compare(-1, \"1:1-7\", \"1:1-7.PTF\");\n-        compare(1, \"1:1-7.PTF\", \"1:1-7\");\n-        compare(1, \"1:2-1\", \"1:2~beta1-1\");\n-        compare(-1, \"1:2~beta2-1\", \"1:2-1\");\n-        compare(1, \"1:2~beta2-1\", \"1:2~beta1-1\");\n-        compare(-1, \"1:2~beta2-1\", \"1:2~beta3-1\");\n-\n-        compare(1, \"1.27+1.3.9-1\", \"1.27.1+1.3.9-1\", PackageType.RPM);\n-        compare(-1, \"1.27+1.3.9-1\", \"1.27.1+1.3.9-1\", PackageType.DEB);\n-\n-        compare(1, \"2-1.27+1.3.9\", \"2-1.27.1+1.3.9\", PackageType.RPM);\n-        compare(-1, \"2-1.27+1.3.9\", \"2-1.27.1+1.3.9\", PackageType.DEB);\n-\n-        compare(1, \"8.0.9-1\", \"a.8.0.9-1\", PackageType.RPM);\n-        compare(-1, \"8.0.9-1\", \"a.8.0.9-1\", PackageType.DEB);\n-}\n+        compare(-1, \"1-1-1\", \"2-5-7\");\n+        compare(-1, \"1-5-7\", \"2-5-7\");\n+        compare(-1, \"1-1-7\", \"1-5-7\");\n+        compare(1, \"1-1-7\", \"1-1-6\");\n+        compare(1, \"1-10-7\", \"1-9-6\");\n+        compare(-1, \"1-9-7\", \"1-11-6\");\n+        compare(-1, \"1-1-7\", \"1-1-7.PTF\");\n+        compare(1, \"1-1-7.PTF\", \"1-1-7\");\n+        compare(1, \"1-2-1\", \"1-2~beta1-1\");\n+        compare(-1, \"1-2~beta2-1\", \"1-2-1\");\n+        compare(1, \"1-2~beta2-1\", \"1-2~beta1-1\");\n+        compare(-1, \"1-2~beta2-1\", \"1-2~beta3-1\");\n+    }\n \n     // On Postgres, we don't get as far as the specific errors - the DB kicks us out\n     // with WrappedSQLException before we can even get to the specific-failure-code\n-    private void failure(PackageEvr evr, Class excClass) {\n+    private void failure(String evr, Class excClass) {\n         try {\n-            PackageEvr evrdb = PackageEvrFactory.lookupOrCreatePackageEvr(evr);\n-            compare(0, evrdb, evrdb);\n+            compare(0, evr, evr);\n             fail(\"Comparison of \" + evr + \" must fail\");\n         }\n         catch (WrappedSQLException wse) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI0MzM4NA==", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r530243384", "bodyText": "Please either fix this right away or create a github issue.", "author": "hustodemon", "createdAt": "2020-11-25T09:55:10Z", "path": "java/code/src/com/suse/manager/utils/SaltUtils.java", "diffHunk": "@@ -1593,7 +1594,10 @@ public static String packageToKey(String name, Pkg.Info info) {\n                 new PackageEvr(\n                         info.getEpoch().orElse(null),\n                         info.getVersion().get(),\n-                        info.getRelease().orElse(\"X\")\n+                        info.getRelease().orElse(\"X\"),\n+                        //TODO: this is not correct but does not effect toUniversalEvrString.\n+                        // we should still do this differently", "originalCommit": "933085fab8e348b5583cfef1d2ba155a0a0d7632", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0e2462b2016ece0db831c4816fdd72d4de0e97ec", "chunk": "diff --git a/java/code/src/com/suse/manager/utils/SaltUtils.java b/java/code/src/com/suse/manager/utils/SaltUtils.java\nindex b57ca7492eb..858d18d6300 100644\n--- a/java/code/src/com/suse/manager/utils/SaltUtils.java\n+++ b/java/code/src/com/suse/manager/utils/SaltUtils.java\n\n@@ -1595,8 +1595,6 @@ public class SaltUtils {\n                         info.getEpoch().orElse(null),\n                         info.getVersion().get(),\n                         info.getRelease().orElse(\"X\"),\n-                        //TODO: this is not correct but does not effect toUniversalEvrString.\n-                        // we should still do this differently\n                         PackageType.RPM\n                 ).toUniversalEvrString()\n         );\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI0Mzk5OQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r530243999", "bodyText": "Same as above.", "author": "hustodemon", "createdAt": "2020-11-25T09:56:02Z", "path": "java/code/src/com/suse/manager/webui/controllers/StatesAPI.java", "diffHunk": "@@ -585,7 +588,8 @@ private Date getScheduleDate(ServerApplyHighstateJson json) {\n             new PackageStateJson(\n                     state.getName().getName(),\n                     Optional.ofNullable(state.getEvr())\n-                            .orElse(new PackageEvr(\"\", \"\", \"\")),\n+                            //TODO: this should probably be rather null instead of a dummy value\n+                            .orElse(new PackageEvr(\"\", \"\", \"\", PackageType.RPM)),", "originalCommit": "933085fab8e348b5583cfef1d2ba155a0a0d7632", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0e2462b2016ece0db831c4816fdd72d4de0e97ec", "chunk": "diff --git a/java/code/src/com/suse/manager/webui/controllers/StatesAPI.java b/java/code/src/com/suse/manager/webui/controllers/StatesAPI.java\nindex b524fa40b72..b7f91da41f9 100644\n--- a/java/code/src/com/suse/manager/webui/controllers/StatesAPI.java\n+++ b/java/code/src/com/suse/manager/webui/controllers/StatesAPI.java\n\n@@ -588,7 +588,6 @@ public class StatesAPI {\n             new PackageStateJson(\n                     state.getName().getName(),\n                     Optional.ofNullable(state.getEvr())\n-                            //TODO: this should probably be rather null instead of a dummy value\n                             .orElse(new PackageEvr(\"\", \"\", \"\", PackageType.RPM)),\n                     Optional.ofNullable(state.getArch())\n                             .map(PackageArch::getLabel).orElse(\"\"),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI0NjI1Mw==", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r530246253", "bodyText": "Please do it now or create a new issue. Piling up TODOs in the code is not good.", "author": "hustodemon", "createdAt": "2020-11-25T09:59:15Z", "path": "java/code/src/com/redhat/rhn/domain/server/Server.java", "diffHunk": "@@ -2192,4 +2193,9 @@ public String getChannelHost() {\n         return this.getFirstServerPath().map(p -> p.getHostname())\n                 .orElseGet(() -> ConfigDefaults.get().getCobblerHost());\n     }\n+\n+    public PackageType getPackageType() {\n+        //TODO: consider moving this to getOs", "originalCommit": "933085fab8e348b5583cfef1d2ba155a0a0d7632", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0e2462b2016ece0db831c4816fdd72d4de0e97ec", "chunk": "diff --git a/java/code/src/com/redhat/rhn/domain/server/Server.java b/java/code/src/com/redhat/rhn/domain/server/Server.java\nindex 38f2cdde0a3..a674dc1406a 100644\n--- a/java/code/src/com/redhat/rhn/domain/server/Server.java\n+++ b/java/code/src/com/redhat/rhn/domain/server/Server.java\n\n@@ -2195,7 +2195,6 @@ public class Server extends BaseDomainHelper implements Identifiable {\n     }\n \n     public PackageType getPackageType() {\n-        //TODO: consider moving this to getOs\n         return getServerArch().getArchType().getPackageType();\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEyMzc1OA==", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r536123758", "bodyText": "Noob question: is there any particular reason to prefer an ad-hoc method name to toString here?", "author": "moio", "createdAt": "2020-12-04T14:07:11Z", "path": "java/code/src/com/redhat/rhn/domain/rhnpackage/PackageType.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.redhat.rhn.domain.rhnpackage;\n+\n+public enum PackageType {\n+    RPM(\"rpm\"),\n+    DEB(\"deb\");\n+\n+    private final String dbString;\n+\n+    PackageType(String dbStringIn) {\n+        dbString = dbStringIn;\n+    }\n+\n+    public String getDbString() {", "originalCommit": "72d561e27e22e40a522e5b4838903a28e909f03d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDA1NTIzMg==", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r540055232", "bodyText": "Its a left over from when i made the db representation only 1 character to safe space. I dropped the idea later in favor of maybe going the posrgres enum route at a later point. In short the difference between normal toString and the dbString is that the former should be human readable for showing logs/debugging while the latter can be a more obscure encoding for efficiency reasons. In the current implementation they are very similar so its not obvious.", "author": "lucidd", "createdAt": "2020-12-10T10:31:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEyMzc1OA=="}], "type": "inlineReview", "revised_code": {"commit": "8e8021c163658f7595da5fbad66962c29025ae90", "chunk": "diff --git a/java/code/src/com/redhat/rhn/domain/rhnpackage/PackageType.java b/java/code/src/com/redhat/rhn/domain/rhnpackage/PackageType.java\ndeleted file mode 100644\nindex efaae06ae4d..00000000000\n--- a/java/code/src/com/redhat/rhn/domain/rhnpackage/PackageType.java\n+++ /dev/null\n\n@@ -1,30 +0,0 @@\n-/**\n- * Copyright (c) 2020 SUSE LLC\n- *\n- * This software is licensed to you under the GNU General Public License,\n- * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n- * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n- * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n- * along with this software; if not, see\n- * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n- *\n- * Red Hat trademarks are not licensed under GPLv2. No permission is\n- * granted to use or replicate Red Hat trademarks that are incorporated\n- * in this software or its documentation.\n- */\n-package com.redhat.rhn.domain.rhnpackage;\n-\n-public enum PackageType {\n-    RPM(\"rpm\"),\n-    DEB(\"deb\");\n-\n-    private final String dbString;\n-\n-    PackageType(String dbStringIn) {\n-        dbString = dbStringIn;\n-    }\n-\n-    public String getDbString() {\n-        return dbString;\n-    }\n-}\n"}}, {"oid": "0e2462b2016ece0db831c4816fdd72d4de0e97ec", "url": "https://github.com/uyuni-project/uyuni/commit/0e2462b2016ece0db831c4816fdd72d4de0e97ec", "message": "cleanup code and todos", "committedDate": "2020-12-07T15:48:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMyNjc4NQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r543326785", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @version $Rev$", "author": "moio", "createdAt": "2020-12-15T13:08:49Z", "path": "java/code/src/com/redhat/rhn/common/util/DebVersionComparator.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.redhat.rhn.common.util;\n+\n+import java.util.Comparator;\n+\n+/**\n+ * DebVersionComparator\n+ * @version $Rev$", "originalCommit": "7cd0b4bbc31863ec140305581e3f75643c2e7055", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUxMDY3Nw==", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r543510677", "bodyText": "changed", "author": "mcalmer", "createdAt": "2020-12-15T16:48:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMyNjc4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "8e8021c163658f7595da5fbad66962c29025ae90", "chunk": "diff --git a/java/code/src/com/redhat/rhn/common/util/DebVersionComparator.java b/java/code/src/com/redhat/rhn/common/util/DebVersionComparator.java\nindex 5e22de7b49a..72fc4d4897f 100644\n--- a/java/code/src/com/redhat/rhn/common/util/DebVersionComparator.java\n+++ b/java/code/src/com/redhat/rhn/common/util/DebVersionComparator.java\n\n@@ -1,5 +1,5 @@\n /**\n- * Copyright (c) 2020 SUSE LLC\n+ * Copyright (c) 2009--2012 Red Hat, Inc.\n  *\n  * This software is licensed to you under the GNU General Public License,\n  * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMzMDM0Mw==", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r543330343", "bodyText": "Could we re-use data in this method to also check the stored procedure implementation of the algorithm?\nOne way to do it could be to create a List of those versions and then sorting it with the Comparator, and inspecting the sorted result.", "author": "moio", "createdAt": "2020-12-15T13:14:05Z", "path": "java/code/src/com/redhat/rhn/common/util/test/DebVersionComparatorTest.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/**\n+ * Copyright (c) 2020 SUSE LLC\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+package com.redhat.rhn.common.util.test;\n+\n+import com.redhat.rhn.common.util.DebVersionComparator;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * DebVersionComparatorTest\n+ */\n+public class DebVersionComparatorTest extends TestCase {\n+\n+    private DebVersionComparator cmp;\n+\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        cmp = new DebVersionComparator();\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        cmp = null;\n+        super.tearDown();\n+    }\n+\n+    public void testDpkgTestCases() {", "originalCommit": "7cd0b4bbc31863ec140305581e3f75643c2e7055", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU0MTgzOQ==", "url": "https://github.com/uyuni-project/uyuni/pull/2767#discussion_r543541839", "bodyText": "This made me think and with your suggestions we moved the database tests into JUnit!\nSo we have now one single point to test the versions: Java (for Debian, and for RPM - as a bonus track - too!)", "author": "mbologna", "createdAt": "2020-12-15T17:28:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMzMDM0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "8e8021c163658f7595da5fbad66962c29025ae90", "chunk": "diff --git a/java/code/src/com/redhat/rhn/common/util/test/DebVersionComparatorTest.java b/java/code/src/com/redhat/rhn/common/util/test/DebVersionComparatorTest.java\ndeleted file mode 100644\nindex 067f5aa3e0d..00000000000\n--- a/java/code/src/com/redhat/rhn/common/util/test/DebVersionComparatorTest.java\n+++ /dev/null\n\n@@ -1,120 +0,0 @@\n-/**\n- * Copyright (c) 2020 SUSE LLC\n- *\n- * This software is licensed to you under the GNU General Public License,\n- * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n- * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n- * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n- * along with this software; if not, see\n- * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n- *\n- * Red Hat trademarks are not licensed under GPLv2. No permission is\n- * granted to use or replicate Red Hat trademarks that are incorporated\n- * in this software or its documentation.\n- */\n-package com.redhat.rhn.common.util.test;\n-\n-import com.redhat.rhn.common.util.DebVersionComparator;\n-\n-import junit.framework.TestCase;\n-\n-/**\n- * DebVersionComparatorTest\n- */\n-public class DebVersionComparatorTest extends TestCase {\n-\n-    private DebVersionComparator cmp;\n-\n-    protected void setUp() throws Exception {\n-        super.setUp();\n-        cmp = new DebVersionComparator();\n-    }\n-\n-    protected void tearDown() throws Exception {\n-        cmp = null;\n-        super.tearDown();\n-    }\n-\n-    public void testDpkgTestCases() {\n-        // Debian dpkg test cases follow [ https://git.dpkg.org/cgit/dpkg/dpkg.git/tree/scripts/t/Dpkg_Version.t ]\n-        assertCompareSymm(-1, \"1.0-1\", \"2.0-2\");\n-        assertCompareSymm(-1, \"2.2~rc-4\", \"2.2-1\");\n-        assertCompareSymm(1, \"2.2-1\", \"2.2~rc-4\");\n-        assertCompareSymm(0, \"1.0000-1\", \"1.0-1\");\n-        assertCompareSymm(0, \"0foo\", \"0foo\");\n-        assertCompareSymm(0, \"0foo-0\", \"0foo\");\n-        assertCompareSymm(0, \"0foo\", \"0foo-0\");\n-        assertCompareSymm(1, \"0foo\", \"0fo\");\n-        assertCompareSymm(-1, \"0foo-0\", \"0foo+\");\n-        assertCompareSymm(-1, \"0foo~1\", \"0foo\");\n-        assertCompareSymm(-1, \"0foo~foo+Bar\", \"0foo~foo+bar\");\n-        assertCompareSymm(-1, \"0foo~~\", \"0foo~\");\n-        assertCompareSymm(-1, \"1~\", \"1\");\n-        assertCompareSymm(-1, \"12345+that-really-is-some-ver-0\", \"12345+that-really-is-some-ver-10\");\n-        assertCompareSymm(-1, \"0foo-0\", \"0foo-01\");\n-        assertCompareSymm(1, \"0foo.bar\", \"0foobar\");\n-        assertCompareSymm(1, \"0foo.bar\", \"0foo1bar\");\n-        assertCompareSymm(1, \"0foo.bar\", \"0foo0bar\");\n-        assertCompareSymm(-1, \"0foo1bar-1\", \"0foobar-1\");\n-        assertCompareSymm(1, \"0foo2.0\", \"0foo2\");\n-        assertCompareSymm(-1, \"0foo2.0.0\", \"0foo2.10.0\");\n-        assertCompareSymm(-1, \"0foo2.0\", \"0foo2.0.0\");\n-        assertCompareSymm(-1, \"0foo2.0\", \"0foo2.10\");\n-        assertCompareSymm(-1, \"0foo2.1\", \"0foo2.10\");\n-        assertCompareSymm(0, \"1.09\", \"1.9\");\n-        assertCompareSymm(1, \"1.0.8+nmu1\", \"1.0.8\");\n-        assertCompareSymm(1, \"3.11\", \"3.10+nmu1\");\n-        assertCompareSymm(1, \"0.9j-20080306-4\", \"0.9i-20070324-2\");\n-        assertCompareSymm(1, \"1.2.0~b7-1\", \"1.2.0~b6-1\");\n-        assertCompareSymm(1, \"1.011-1\", \"1.06-2\");\n-        assertCompareSymm(1, \"0.0.9+dfsg1-1\", \"0.0.8+dfsg1-3\");\n-        assertCompareSymm(1, \"4.6.99+svn6582-1\", \"4.6.99+svn6496-1\");\n-        assertCompareSymm(1, \"53\", \"52\");\n-        assertCompareSymm(1, \"0.9.9~pre122-1\", \"0.9.9~pre111-1\");\n-        assertCompareSymm(1, \"1.0.1+gpl-1\", \"1.0.1-2\");\n-        assertCompareSymm(-1, \"1a\", \"1000a\");\n-    }\n-\n-    public void testBugzillaCases() {\n-        // bsc#1150113\n-        // bsc#1173201\n-        assertCompareSymm(0, \"0.2017-01-15.gdad1bbc69\", \"0.2017-01-15.gdad1bbc69\");\n-        assertCompareSymm(1, \"0.2017-01-15.gdad1bbc69\", \"0.2016-08-15.cafecafe\");\n-        assertCompareSymm(-1, \"0.2017-01-15.gdad1bbc69\", \"1.0\");\n-        assertCompareSymm(1, \"1.0.0~alpha+201804191824-24b36a9\", \"0.99\");\n-        assertCompareSymm(-1, \"1.20.4\", \"14.1\");\n-        assertCompareSymm(1, \"1.27\", \"1.3.11\");\n-        assertCompareSymm(-1, \"1.27+1.3.9\", \"1.27.1+1.3.9\");\n-        assertCompareSymm(-1, \"1.27+1.3.9\", \"1.27.1ubuntu1+1.3.9\");\n-        assertCompareSymm(-1, \"1.27+1.3.9\", \"1.27.1ubuntu2+1.3.11\");\n-        assertCompareSymm(1, \"1.27+1.3.9\", \"1.3.11\");\n-        assertCompareSymm(1, \"1.27+1.3.9\", \"1.3.9\");\n-        assertCompareSymm(-1, \"1.27+1.3.9\", \"5.18.4.1\");\n-        assertCompareSymm(1, \"2.27+1.3.9\", \"1.10~ubuntu18.04.4+1.2.10\");\n-        assertCompareSymm(-1, \"2.7.15~rc1\", \"2.7.15\");\n-        assertCompareSymm(1, \"3.1-20170329\", \"3.1-20150325\");\n-        assertCompareSymm(1, \"3.27\", \"1.10~ubuntu18.04.4+1.2.10\");\n-        assertCompareSymm(1, \"4.27~test\", \"1.10~ubuntu18.04.4+1.2.10\");\n-        assertCompareSymm(-1, \"8.0.9.22-abcd\", \"8.0.9.22-abcd-expr1\");\n-        assertCompareSymm(-1, \"8.0.9\", \"8.0.9.22\");\n-        assertCompareSymm(-1, \"8.0.9\", \"a.8.0.9-22\");\n-        assertCompareSymm(1, \"8-20180414\", \"8\");\n-        assertCompareSymm(-1, \"8-20180414\", \"8.3.0\");\n-    }\n-\n-    private void assertCompareAsym(int exp, String v1, String v2) {\n-        assertCompare(exp, v1, v2);\n-        assertCompare(exp, v2, v1);\n-    }\n-\n-    private void assertCompareSymm(int exp, String v1, String v2) {\n-        assertCompare(exp, v1, v2);\n-        assertCompare(-exp, v2, v1);\n-    }\n-\n-    private void assertCompare(int exp, String v1, String v2) {\n-        assertEquals(exp, cmp.compare(v1, v2));\n-        assertEquals(0, cmp.compare(v1, v1));\n-        assertEquals(0, cmp.compare(v2, v2));\n-    }\n-}\n"}}, {"oid": "8e8021c163658f7595da5fbad66962c29025ae90", "url": "https://github.com/uyuni-project/uyuni/commit/8e8021c163658f7595da5fbad66962c29025ae90", "message": "bits and pieces", "committedDate": "2020-12-16T13:08:52Z", "type": "commit"}, {"oid": "ef9a51cfa9c8e77abf9fdcdf69c0bfa39ee8e20c", "url": "https://github.com/uyuni-project/uyuni/commit/ef9a51cfa9c8e77abf9fdcdf69c0bfa39ee8e20c", "message": "Refactor: move mode queries to test queries", "committedDate": "2020-12-16T13:09:30Z", "type": "forcePushed"}, {"oid": "172c90f096b44a966be1714619ce67e48774f6cc", "url": "https://github.com/uyuni-project/uyuni/commit/172c90f096b44a966be1714619ce67e48774f6cc", "message": "Feat: Debian package version comparator - Java", "committedDate": "2020-12-16T13:20:12Z", "type": "commit"}, {"oid": "98f0452c7a690580a425ac4e1cc74c08e6d62e56", "url": "https://github.com/uyuni-project/uyuni/commit/98f0452c7a690580a425ac4e1cc74c08e6d62e56", "message": "Test: refactor tests for Debian vercmp - Java", "committedDate": "2020-12-16T13:20:14Z", "type": "commit"}, {"oid": "93a6e16b737eb5e6a60e53ae3dd38ab102fe7ade", "url": "https://github.com/uyuni-project/uyuni/commit/93a6e16b737eb5e6a60e53ae3dd38ab102fe7ade", "message": "Refactor: restore RPM version cmp pre-Debian - Java\n\nReference commit id: 74c79db537c7762360d3675b280c2257d71cb698", "committedDate": "2020-12-16T13:20:14Z", "type": "commit"}, {"oid": "3eb13c0bbacfc3d4afc4e91c58cd0b4abdee4c72", "url": "https://github.com/uyuni-project/uyuni/commit/3eb13c0bbacfc3d4afc4e91c58cd0b4abdee4c72", "message": "Feat: Debian package version comparator - PL/pgSQL", "committedDate": "2020-12-16T13:20:15Z", "type": "commit"}, {"oid": "405381c1c17b6c7b3b7c3262e04f0556a7f994c4", "url": "https://github.com/uyuni-project/uyuni/commit/405381c1c17b6c7b3b7c3262e04f0556a7f994c4", "message": "Test: generator for Debian vercmp - PL/pgSQL", "committedDate": "2020-12-16T13:20:15Z", "type": "commit"}, {"oid": "7c93ea7054b8c1791101ff456c02e107ae184c40", "url": "https://github.com/uyuni-project/uyuni/commit/7c93ea7054b8c1791101ff456c02e107ae184c40", "message": "Refactor: restore RPM version cmp pre-Debian cmp - PL/pgSQL\n\nReference commit id: e133ffeeb303b6a757dda9f5561e6d329e077ad3", "committedDate": "2020-12-16T13:20:15Z", "type": "commit"}, {"oid": "c4bc1492d457a7c0bdb89582d77927da32c7bfe3", "url": "https://github.com/uyuni-project/uyuni/commit/c4bc1492d457a7c0bdb89582d77927da32c7bfe3", "message": "Feat: migration scripts - PL/pgSQL", "committedDate": "2020-12-16T13:20:15Z", "type": "commit"}, {"oid": "cc27e84073ea9f8f7b0b645f0e94d6bf887dedb6", "url": "https://github.com/uyuni-project/uyuni/commit/cc27e84073ea9f8f7b0b645f0e94d6bf887dedb6", "message": "Feat: call Debian versioncmp in dispatcher", "committedDate": "2020-12-16T13:20:15Z", "type": "commit"}, {"oid": "e5405536994bd4a4a6bedb39641102286ee9782f", "url": "https://github.com/uyuni-project/uyuni/commit/e5405536994bd4a4a6bedb39641102286ee9782f", "message": "cleanup unused code", "committedDate": "2020-12-16T13:20:15Z", "type": "commit"}, {"oid": "2f7f3fe5e4f4c5b99b99ff886fd5e63d8cd65a22", "url": "https://github.com/uyuni-project/uyuni/commit/2f7f3fe5e4f4c5b99b99ff886fd5e63d8cd65a22", "message": "add type to evr", "committedDate": "2020-12-16T13:20:50Z", "type": "commit"}, {"oid": "5d3e9d4e97a8bd7931124049bf6ebc0ff6b2d4dd", "url": "https://github.com/uyuni-project/uyuni/commit/5d3e9d4e97a8bd7931124049bf6ebc0ff6b2d4dd", "message": "import packages with evr package type", "committedDate": "2020-12-16T13:20:52Z", "type": "commit"}, {"oid": "20452be5c5965e619b82dc6fbb862f72046bd91f", "url": "https://github.com/uyuni-project/uyuni/commit/20452be5c5965e619b82dc6fbb862f72046bd91f", "message": "use new EVR lookup function", "committedDate": "2020-12-16T13:20:52Z", "type": "commit"}, {"oid": "6f3bbe29e0f01047f32a8e0ac136b58f206d3aef", "url": "https://github.com/uyuni-project/uyuni/commit/6f3bbe29e0f01047f32a8e0ac136b58f206d3aef", "message": "add potential solution for type dubpication", "committedDate": "2020-12-16T13:20:53Z", "type": "commit"}, {"oid": "4355bd4aaea0ca584e73c648d47aaca5604a4879", "url": "https://github.com/uyuni-project/uyuni/commit/4355bd4aaea0ca584e73c648d47aaca5604a4879", "message": "dispatch compare based on packageevr type", "committedDate": "2020-12-16T13:20:53Z", "type": "commit"}, {"oid": "5f76e1cbc5f7b2739912bff5eba480552037530b", "url": "https://github.com/uyuni-project/uyuni/commit/5f76e1cbc5f7b2739912bff5eba480552037530b", "message": "Fix: add call to Debian version comparator in dispatcher", "committedDate": "2020-12-16T13:20:53Z", "type": "commit"}, {"oid": "d5a7593b29d7d847441210407c10183a114ff4a6", "url": "https://github.com/uyuni-project/uyuni/commit/d5a7593b29d7d847441210407c10183a114ff4a6", "message": "remove references to rpm.vercmp in queries", "committedDate": "2020-12-16T13:20:53Z", "type": "commit"}, {"oid": "bfab1827bceb955763246772eefdb432a99e0858", "url": "https://github.com/uyuni-project/uyuni/commit/bfab1827bceb955763246772eefdb432a99e0858", "message": "type errors should be reported as exceptions", "committedDate": "2020-12-16T13:20:53Z", "type": "commit"}, {"oid": "7f77b09179bcf01655e71e3b683c5a57cff287c4", "url": "https://github.com/uyuni-project/uyuni/commit/7f77b09179bcf01655e71e3b683c5a57cff287c4", "message": "limit compare to same EVR types", "committedDate": "2020-12-16T13:20:53Z", "type": "commit"}, {"oid": "3614cbf96e3e5bedf1242877f2389f137844164d", "url": "https://github.com/uyuni-project/uyuni/commit/3614cbf96e3e5bedf1242877f2389f137844164d", "message": "java: limit compare to same EVR types", "committedDate": "2020-12-16T13:20:53Z", "type": "commit"}, {"oid": "7ee5686792453e11b66c056a07c17aab7da14e6d", "url": "https://github.com/uyuni-project/uyuni/commit/7ee5686792453e11b66c056a07c17aab7da14e6d", "message": "declare operator <>", "committedDate": "2020-12-16T13:20:53Z", "type": "commit"}, {"oid": "538ad4ca9271aeecf1aa268da2078d3c0c86b0d6", "url": "https://github.com/uyuni-project/uyuni/commit/538ad4ca9271aeecf1aa268da2078d3c0c86b0d6", "message": "change deb/rpm comparison", "committedDate": "2020-12-16T13:20:53Z", "type": "commit"}, {"oid": "c3d652536caaa48191717aa76351a6c5ab11de13", "url": "https://github.com/uyuni-project/uyuni/commit/c3d652536caaa48191717aa76351a6c5ab11de13", "message": "Chore: announce changes", "committedDate": "2020-12-16T13:20:53Z", "type": "commit"}, {"oid": "d5a4c00cf5e1a747a50fea04dbb40d78d4ce41cb", "url": "https://github.com/uyuni-project/uyuni/commit/d5a4c00cf5e1a747a50fea04dbb40d78d4ce41cb", "message": "renmae lookup_evr2 back to lookup_evr", "committedDate": "2020-12-16T13:21:19Z", "type": "commit"}, {"oid": "f28998f96a70c9a01f0ef9a4a44e31ba9eb1e369", "url": "https://github.com/uyuni-project/uyuni/commit/f28998f96a70c9a01f0ef9a4a44e31ba9eb1e369", "message": "use standard EVR parser for unit tests", "committedDate": "2020-12-16T13:21:21Z", "type": "commit"}, {"oid": "0d2b87e1176ecf5476974267db3c429f3005d879", "url": "https://github.com/uyuni-project/uyuni/commit/0d2b87e1176ecf5476974267db3c429f3005d879", "message": "remove evr field in PackageStateJson", "committedDate": "2020-12-16T13:21:21Z", "type": "commit"}, {"oid": "53497c8c75fb137caaa9b3b0b4cc7033d5e188f2", "url": "https://github.com/uyuni-project/uyuni/commit/53497c8c75fb137caaa9b3b0b4cc7033d5e188f2", "message": "move PackageUtilsTest tests to fitting location", "committedDate": "2020-12-16T13:21:21Z", "type": "commit"}, {"oid": "c0298ad9f74b1d0b4c5c884876dfc3a79f606ce8", "url": "https://github.com/uyuni-project/uyuni/commit/c0298ad9f74b1d0b4c5c884876dfc3a79f606ce8", "message": "reorder migration scripts", "committedDate": "2020-12-16T13:21:21Z", "type": "commit"}, {"oid": "2922c9eba38e9b1ca33867cb872d82e3d514f0b9", "url": "https://github.com/uyuni-project/uyuni/commit/2922c9eba38e9b1ca33867cb872d82e3d514f0b9", "message": "cleanup code and todos", "committedDate": "2020-12-16T13:21:54Z", "type": "commit"}, {"oid": "07a9cb7058c605b89c14c7e4522baa3b1962e88f", "url": "https://github.com/uyuni-project/uyuni/commit/07a9cb7058c605b89c14c7e4522baa3b1962e88f", "message": "Refactor: Debian package version comparator Tests", "committedDate": "2020-12-16T13:25:37Z", "type": "commit"}, {"oid": "07a9cb7058c605b89c14c7e4522baa3b1962e88f", "url": "https://github.com/uyuni-project/uyuni/commit/07a9cb7058c605b89c14c7e4522baa3b1962e88f", "message": "Refactor: Debian package version comparator Tests", "committedDate": "2020-12-16T13:25:37Z", "type": "forcePushed"}]}