{"pr_number": 439, "pr_title": "New sample: Configure subnetwork trace", "pr_createdAt": "2020-01-30T10:47:33Z", "pr_url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/439", "timeline": [{"oid": "9a20fd1f24f60f1b1c1abab3a960ddca198b123a", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/9a20fd1f24f60f1b1c1abab3a960ddca198b123a", "message": "add base structure", "committedDate": "2019-12-11T10:18:29Z", "type": "commit"}, {"oid": "9ae74cfd7ab9fa413cc2f5b301e990e7866784cd", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/9ae74cfd7ab9fa413cc2f5b301e990e7866784cd", "message": "start sample", "committedDate": "2019-12-11T15:58:37Z", "type": "commit"}, {"oid": "96f87bb9e5ff4eaec53c40be847adf6bfcb2894f", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/96f87bb9e5ff4eaec53c40be847adf6bfcb2894f", "message": "saveWorkj", "committedDate": "2019-12-12T09:46:09Z", "type": "commit"}, {"oid": "ed32a95b6ba3f5a21607153e754bf1eccdfff991", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/ed32a95b6ba3f5a21607153e754bf1eccdfff991", "message": "build UI", "committedDate": "2019-12-16T15:24:31Z", "type": "commit"}, {"oid": "59aeff91ca095e8edce2938d0cac8bfe6bfdffa7", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/59aeff91ca095e8edce2938d0cac8bfe6bfdffa7", "message": "improve UI, input handling", "committedDate": "2019-12-16T16:03:53Z", "type": "commit"}, {"oid": "3837d0e01d6f0e158671e7eacd73951839b1f47d", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/3837d0e01d6f0e158671e7eacd73951839b1f47d", "message": "add javadoc", "committedDate": "2019-12-16T16:15:05Z", "type": "commit"}, {"oid": "c6d26eb5637f21724fa4896ebfef8ebc3f0c6199", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/c6d26eb5637f21724fa4896ebfef8ebc3f0c6199", "message": "add comments", "committedDate": "2019-12-16T17:28:27Z", "type": "commit"}, {"oid": "bfb214e5d997017fc1a20a332aff0a75956f1a2b", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/bfb214e5d997017fc1a20a332aff0a75956f1a2b", "message": "better method naming, better comments", "committedDate": "2019-12-18T14:53:14Z", "type": "commit"}, {"oid": "8fc543c47fa168e028600e9add225b05105b73d8", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/8fc543c47fa168e028600e9add225b05105b73d8", "message": "better string builder", "committedDate": "2019-12-18T14:58:41Z", "type": "commit"}, {"oid": "758146ed3f47643433dc0912905440fa30263a5c", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/758146ed3f47643433dc0912905440fa30263a5c", "message": "whitespace and comments", "committedDate": "2019-12-18T15:37:28Z", "type": "commit"}, {"oid": "3fe05d32f1bf94d15e203d02002aa87d3d779473", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/3fe05d32f1bf94d15e203d02002aa87d3d779473", "message": "improve string creation", "committedDate": "2019-12-18T16:53:54Z", "type": "commit"}, {"oid": "71a3455a071c5f348a0ec8cc2a04c8605f13f1f8", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/71a3455a071c5f348a0ec8cc2a04c8605f13f1f8", "message": "more helpful error message", "committedDate": "2019-12-19T11:22:31Z", "type": "commit"}, {"oid": "b2d020b7753b6e24a3c1e562353a20d669d97906", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/b2d020b7753b6e24a3c1e562353a20d669d97906", "message": "stat update design", "committedDate": "2020-01-22T11:08:06Z", "type": "commit"}, {"oid": "63b51bb392bc92ac27b672a0cda29d8343d77295", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/63b51bb392bc92ac27b672a0cda29d8343d77295", "message": "UI tidying", "committedDate": "2020-01-23T11:17:40Z", "type": "commit"}, {"oid": "8de7912c3be8ee119365e580ced91302e3776d15", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/8de7912c3be8ee119365e580ced91302e3776d15", "message": "restrict input in textfield to numerical", "committedDate": "2020-01-30T09:27:39Z", "type": "commit"}, {"oid": "87a349643ff93ec3fcd6493862e0af3a010eca72", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/87a349643ff93ec3fcd6493862e0af3a010eca72", "message": "update README.md", "committedDate": "2020-01-30T09:50:59Z", "type": "commit"}, {"oid": "57e5809cef104affaff198bb93a9bd008f931fe7", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/57e5809cef104affaff198bb93a9bd008f931fe7", "message": "UI, readme, metadata, screenshot", "committedDate": "2020-01-30T10:30:28Z", "type": "commit"}, {"oid": "9b8fa16950e67ffa489decf5fdeeb7685fd2ec65", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/9b8fa16950e67ffa489decf5fdeeb7685fd2ec65", "message": "Merge remote-tracking branch 'origin/master' into configure-subnetwork-trace", "committedDate": "2020-01-30T10:36:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE4NjQzMQ==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/439#discussion_r387186431", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2019 Esri.\n          \n          \n            \n             * Copyright 2020 Esri.", "author": "Rachael-E", "createdAt": "2020-03-03T17:43:59Z", "path": "network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/CodedValueListCell.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2019 Esri.", "originalCommit": "9b8fa16950e67ffa489decf5fdeeb7685fd2ec65", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1120e4f0ba6cd4fd4fe42b5ba7d7dd7828ac07ad", "chunk": "diff --git a/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/CodedValueListCell.java b/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/CodedValueListCell.java\nindex 7ca2d232..ed6f814b 100644\n--- a/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/CodedValueListCell.java\n+++ b/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/CodedValueListCell.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2019 Esri.\n+ * Copyright 2020 Esri.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE4NjYwNw==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/439#discussion_r387186607", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2019 Esri.\n          \n          \n            \n             * Copyright 2020 Esri.", "author": "Rachael-E", "createdAt": "2020-03-03T17:44:16Z", "path": "network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ComparisonSourceListCell.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2019 Esri.", "originalCommit": "9b8fa16950e67ffa489decf5fdeeb7685fd2ec65", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1120e4f0ba6cd4fd4fe42b5ba7d7dd7828ac07ad", "chunk": "diff --git a/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ComparisonSourceListCell.java b/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ComparisonSourceListCell.java\nindex 8cb7bf10..5fe1b9a4 100644\n--- a/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ComparisonSourceListCell.java\n+++ b/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ComparisonSourceListCell.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2019 Esri.\n+ * Copyright 2020 Esri.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE4NjgxMQ==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/439#discussion_r387186811", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2019 Esri.\n          \n          \n            \n             * Copyright 2020 Esri.", "author": "Rachael-E", "createdAt": "2020-03-03T17:44:40Z", "path": "network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceLauncher.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2019 Esri.", "originalCommit": "9b8fa16950e67ffa489decf5fdeeb7685fd2ec65", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1120e4f0ba6cd4fd4fe42b5ba7d7dd7828ac07ad", "chunk": "diff --git a/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceLauncher.java b/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceLauncher.java\nindex e3595ea5..51257890 100644\n--- a/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceLauncher.java\n+++ b/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceLauncher.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2019 Esri.\n+ * Copyright 2020 Esri.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE4NzEyOQ==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/439#discussion_r387187129", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2019 Esri.\n          \n          \n            \n             * Copyright 2020 Esri.", "author": "Rachael-E", "createdAt": "2020-03-03T17:45:17Z", "path": "network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceSample.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2019 Esri.", "originalCommit": "9b8fa16950e67ffa489decf5fdeeb7685fd2ec65", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1120e4f0ba6cd4fd4fe42b5ba7d7dd7828ac07ad", "chunk": "diff --git a/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceSample.java b/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceSample.java\nindex d919108f..30b009fa 100644\n--- a/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceSample.java\n+++ b/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceSample.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2019 Esri.\n+ * Copyright 2020 Esri.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE4NzkxNg==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/439#discussion_r387187916", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2019 Esri.\n          \n          \n            \n             * Copyright 2020 Esri.", "author": "Rachael-E", "createdAt": "2020-03-03T17:46:38Z", "path": "network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java", "diffHunk": "@@ -0,0 +1,419 @@\n+/*\n+ * Copyright 2019 Esri.", "originalCommit": "9b8fa16950e67ffa489decf5fdeeb7685fd2ec65", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1120e4f0ba6cd4fd4fe42b5ba7d7dd7828ac07ad", "chunk": "diff --git a/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java b/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java\nindex 141e4176..e4efd688 100644\n--- a/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java\n+++ b/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2019 Esri.\n+ * Copyright 2020 Esri.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5MjMzMg==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/439#discussion_r387192332", "bodyText": "I'm a bit unsure of this comment: from the code it reads as if the expression is being set to the barriers?", "author": "Rachael-E", "createdAt": "2020-03-03T17:54:27Z", "path": "network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java", "diffHunk": "@@ -0,0 +1,419 @@\n+/*\n+ * Copyright 2019 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.esri.samples.configure_subnetwork_trace;\n+\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.TextArea;\n+import javafx.scene.control.TextField;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.CodedValue;\n+import com.esri.arcgisruntime.data.CodedValueDomain;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetGroup;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetType;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAttributeComparisonOperator;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategoryComparison;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityDomainNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElement;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElementTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkAttribute;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkAttributeComparison;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkSource;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTerminal;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTier;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceAndCondition;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceConditionalExpression;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceConfiguration;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceOrCondition;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceParameters;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceType;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraversabilityScope;\n+\n+public class ConfigureSubnetworkTraceController {\n+\n+  @FXML private CheckBox includeBarriersCheckBox;\n+  @FXML private CheckBox includeContainersCheckBox;\n+  @FXML private ComboBox<CodedValue> comparisonValuesComboBox;\n+  @FXML private ComboBox<UtilityAttributeComparisonOperator> comparisonOperatorsComboBox;\n+  @FXML private ComboBox<UtilityNetworkAttribute> comparisonSourcesComboBox;\n+  @FXML private TextArea traceConditionsTextArea;\n+  @FXML private TextField comparisonValuesTextField;\n+\n+  private UtilityElement startingLocation;\n+  private UtilityNetwork utilityNetwork;\n+  private UtilityTerminal startingTerminal;\n+  private UtilityTraceConditionalExpression initialExpression;\n+  private UtilityTraceConfiguration initialUtilityTraceConfiguration;\n+  private UtilityTraceConfiguration utilityTraceConfiguration;\n+\n+  @FXML\n+  public void initialize() {\n+\n+    try {\n+\n+      // add a listener to the comparison value text field, so that it only accepts numerical input separated by a decimal\n+      comparisonValuesTextField.textProperty().addListener((observable, oldValue, newValue) -> {\n+        if (!newValue.matches(\"\\\\d*([.]\\\\d*)?\")) {\n+          comparisonValuesTextField.setText(oldValue);\n+        }\n+      });\n+\n+      // load the utility network\n+      utilityNetwork = new UtilityNetwork(\n+          \"https://sampleserver7.arcgisonline.com/arcgis/rest/services/UtilityNetwork/NapervilleElectric\" +\n+              \"/FeatureServer\");\n+      utilityNetwork.loadAsync();\n+      utilityNetwork.addDoneLoadingListener(() -> {\n+        if (utilityNetwork.getLoadStatus() == LoadStatus.LOADED) {\n+\n+          // build the choice list for the network attribute comparison sources\n+          List<UtilityNetworkAttribute> comparisonSources = utilityNetwork.getDefinition()\n+              .getNetworkAttributes()\n+              .stream()\n+              .filter(value -> !value.isSystemDefined())\n+              .collect(Collectors.toList());\n+          comparisonSourcesComboBox.getItems().addAll(comparisonSources);\n+          comparisonSourcesComboBox.getSelectionModel().select(0);\n+          // display the name of the comparison sources in the ComboBox\n+          comparisonSourcesComboBox.setButtonCell(new ComparisonSourceListCell());\n+          comparisonSourcesComboBox.setCellFactory(c -> new ComparisonSourceListCell());\n+\n+          // build the choice list for the comparison operators\n+          comparisonOperatorsComboBox.getItems().addAll(UtilityAttributeComparisonOperator.values());\n+          comparisonOperatorsComboBox.getSelectionModel().select(0);\n+\n+          // display the name of the comparison values in the ComboBox\n+          comparisonValuesComboBox.setButtonCell(new CodedValueListCell());\n+          comparisonValuesComboBox.setCellFactory(c -> new CodedValueListCell());\n+\n+          // create a default starting location\n+          UtilityNetworkSource utilityNetworkSource =\n+              utilityNetwork.getDefinition().getNetworkSource(\"Electric Distribution Device\");\n+          UtilityAssetGroup utilityAssetGroup = utilityNetworkSource.getAssetGroup(\"Circuit Breaker\");\n+          UtilityAssetType utilityAssetType = utilityAssetGroup.getAssetType(\"Three Phase\");\n+          startingLocation =\n+              utilityNetwork.createElement(utilityAssetType, UUID.fromString(\"1CAF7740-0BF4-4113-8DB2-654E18800028\"));\n+\n+          // set the terminal for the starting location. (For our case, we use the 'Load' terminal.)\n+          List<UtilityTerminal> terminals = startingLocation.getAssetType().getTerminalConfiguration().getTerminals();\n+          terminals.forEach(terminal -> {\n+            if (terminal.getName().equals(\"Load\")) {\n+              startingTerminal = terminal;\n+            }\n+          });\n+          startingLocation.setTerminal(startingTerminal);\n+\n+          // get a default trace configuration from a tier to update the UI\n+          UtilityDomainNetwork utilityDomainNetwork =\n+              utilityNetwork.getDefinition().getDomainNetwork(\"ElectricDistribution\");\n+          UtilityTier utilityTier = utilityDomainNetwork.getTier(\"Medium Voltage Radial\");\n+          utilityTraceConfiguration = utilityTier.getTraceConfiguration();\n+\n+          // save the default trace configuration to restore when the application is reset\n+          initialUtilityTraceConfiguration = utilityTraceConfiguration;\n+\n+          // save the initial expression\n+          initialExpression =\n+              (UtilityTraceConditionalExpression) utilityTier.getTraceConfiguration().getTraversability().getBarriers();\n+\n+          // show the initial expression in the text area\n+          traceConditionsTextArea.setText(expressionToString(initialExpression));\n+\n+          // set the traversability scope\n+          utilityTier.getTraceConfiguration().getTraversability().setScope(UtilityTraversabilityScope.JUNCTIONS);\n+        }\n+      });\n+    } catch (Exception e) {\n+      new Alert(Alert.AlertType.ERROR, \"Error loading Utility Network.\").show();\n+    }\n+  }\n+\n+  /**\n+   * Uses the selected parameters to add a barrier expression to the utility trace configuration.\n+   */\n+  @FXML\n+  private void onAddConditionClick() {\n+\n+    // get the selected utility network attribute and attribute comparison operator\n+    UtilityNetworkAttribute selectedAttribute = comparisonSourcesComboBox.getSelectionModel().getSelectedItem();\n+    UtilityAttributeComparisonOperator selectedOperator =\n+        comparisonOperatorsComboBox.getSelectionModel().getSelectedItem();\n+\n+    // check if a comparison value was specified, and capture it to use as the last parameter of the\n+    // UtilityNetworkAttributeComparison\n+    Object otherValue;\n+    // if a comparison value is selected from the ComboBox, use it as the third parameter\n+    if (selectedAttribute.getDomain() instanceof CodedValueDomain &&\n+        comparisonValuesComboBox.getSelectionModel().getSelectedItem() != null) {\n+      // convert the selected comparison value to the data type defined by the selected attribute\n+      otherValue = convertToDataType(comparisonValuesComboBox.getSelectionModel().getSelectedItem().getCode(),\n+          selectedAttribute.getDataType());\n+    } else if (!comparisonValuesTextField.getText().equals(\"\")) {\n+      // otherwise, a comparison value will be specified as text input to be used as the third parameter\n+      otherValue = convertToDataType(comparisonValuesTextField.getText(), selectedAttribute.getDataType());\n+    } else {\n+      new Alert(Alert.AlertType.WARNING, \"No valid comparison value entered\").show();\n+      return;\n+    }\n+\n+    // create the utility network attribute comparison expression using the specified parameters\n+    // NOTE: You may also create a UtilityNetworkAttributeComparison with another NetworkAttribute.\n+    UtilityTraceConditionalExpression expression =\n+        new UtilityNetworkAttributeComparison(selectedAttribute, selectedOperator, otherValue);\n+\n+    // check if an expression is already defined for the traversability barriers\n+    if (utilityTraceConfiguration.getTraversability().getBarriers() instanceof UtilityTraceConditionalExpression) {\n+      UtilityTraceConditionalExpression otherExpression =\n+          (UtilityTraceConditionalExpression) utilityTraceConfiguration.getTraversability().getBarriers();\n+      // use the existing expression to create an `or` expression with the user-defined expression\n+      expression = new UtilityTraceOrCondition(otherExpression, expression);\n+    }\n+\n+    // set the new expression to the traversability", "originalCommit": "9b8fa16950e67ffa489decf5fdeeb7685fd2ec65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5MDM5MA==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/439#discussion_r387890390", "bodyText": "Perhaps\n// set the new expression to the traversability's barriers\n\nwill be a bit more specific?", "author": "JonLavi", "createdAt": "2020-03-04T19:38:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5MjMzMg=="}], "type": "inlineReview", "revised_code": {"commit": "1120e4f0ba6cd4fd4fe42b5ba7d7dd7828ac07ad", "chunk": "diff --git a/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java b/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java\nindex 141e4176..e4efd688 100644\n--- a/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java\n+++ b/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2019 Esri.\n+ * Copyright 2020 Esri.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIwODA3NQ==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/439#discussion_r387208075", "bodyText": "it's as you've said before: this is a confusing workflow! I'm also unsure about the method description. Digging into it a little deeper, this method always returns a value. The javadoc makes it sound like a data type is returned.\nAlso, are there ever any booleans passed on? I couldn't find any but I admit I am totally in the dark with this sample and how it's meant to be used.\nI'd be tempted to get some more experienced eyes on this just in case there's something deeper going on that we're not handling well, @tschie or @colinanderson. Should we be handling this conversion at a Java or Core level, or is this a pattern we'd expect a customer to handle?", "author": "Rachael-E", "createdAt": "2020-03-03T18:24:10Z", "path": "network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java", "diffHunk": "@@ -0,0 +1,419 @@\n+/*\n+ * Copyright 2019 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.esri.samples.configure_subnetwork_trace;\n+\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.TextArea;\n+import javafx.scene.control.TextField;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.CodedValue;\n+import com.esri.arcgisruntime.data.CodedValueDomain;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetGroup;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetType;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAttributeComparisonOperator;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategoryComparison;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityDomainNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElement;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElementTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkAttribute;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkAttributeComparison;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkSource;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTerminal;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTier;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceAndCondition;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceConditionalExpression;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceConfiguration;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceOrCondition;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceParameters;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceType;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraversabilityScope;\n+\n+public class ConfigureSubnetworkTraceController {\n+\n+  @FXML private CheckBox includeBarriersCheckBox;\n+  @FXML private CheckBox includeContainersCheckBox;\n+  @FXML private ComboBox<CodedValue> comparisonValuesComboBox;\n+  @FXML private ComboBox<UtilityAttributeComparisonOperator> comparisonOperatorsComboBox;\n+  @FXML private ComboBox<UtilityNetworkAttribute> comparisonSourcesComboBox;\n+  @FXML private TextArea traceConditionsTextArea;\n+  @FXML private TextField comparisonValuesTextField;\n+\n+  private UtilityElement startingLocation;\n+  private UtilityNetwork utilityNetwork;\n+  private UtilityTerminal startingTerminal;\n+  private UtilityTraceConditionalExpression initialExpression;\n+  private UtilityTraceConfiguration initialUtilityTraceConfiguration;\n+  private UtilityTraceConfiguration utilityTraceConfiguration;\n+\n+  @FXML\n+  public void initialize() {\n+\n+    try {\n+\n+      // add a listener to the comparison value text field, so that it only accepts numerical input separated by a decimal\n+      comparisonValuesTextField.textProperty().addListener((observable, oldValue, newValue) -> {\n+        if (!newValue.matches(\"\\\\d*([.]\\\\d*)?\")) {\n+          comparisonValuesTextField.setText(oldValue);\n+        }\n+      });\n+\n+      // load the utility network\n+      utilityNetwork = new UtilityNetwork(\n+          \"https://sampleserver7.arcgisonline.com/arcgis/rest/services/UtilityNetwork/NapervilleElectric\" +\n+              \"/FeatureServer\");\n+      utilityNetwork.loadAsync();\n+      utilityNetwork.addDoneLoadingListener(() -> {\n+        if (utilityNetwork.getLoadStatus() == LoadStatus.LOADED) {\n+\n+          // build the choice list for the network attribute comparison sources\n+          List<UtilityNetworkAttribute> comparisonSources = utilityNetwork.getDefinition()\n+              .getNetworkAttributes()\n+              .stream()\n+              .filter(value -> !value.isSystemDefined())\n+              .collect(Collectors.toList());\n+          comparisonSourcesComboBox.getItems().addAll(comparisonSources);\n+          comparisonSourcesComboBox.getSelectionModel().select(0);\n+          // display the name of the comparison sources in the ComboBox\n+          comparisonSourcesComboBox.setButtonCell(new ComparisonSourceListCell());\n+          comparisonSourcesComboBox.setCellFactory(c -> new ComparisonSourceListCell());\n+\n+          // build the choice list for the comparison operators\n+          comparisonOperatorsComboBox.getItems().addAll(UtilityAttributeComparisonOperator.values());\n+          comparisonOperatorsComboBox.getSelectionModel().select(0);\n+\n+          // display the name of the comparison values in the ComboBox\n+          comparisonValuesComboBox.setButtonCell(new CodedValueListCell());\n+          comparisonValuesComboBox.setCellFactory(c -> new CodedValueListCell());\n+\n+          // create a default starting location\n+          UtilityNetworkSource utilityNetworkSource =\n+              utilityNetwork.getDefinition().getNetworkSource(\"Electric Distribution Device\");\n+          UtilityAssetGroup utilityAssetGroup = utilityNetworkSource.getAssetGroup(\"Circuit Breaker\");\n+          UtilityAssetType utilityAssetType = utilityAssetGroup.getAssetType(\"Three Phase\");\n+          startingLocation =\n+              utilityNetwork.createElement(utilityAssetType, UUID.fromString(\"1CAF7740-0BF4-4113-8DB2-654E18800028\"));\n+\n+          // set the terminal for the starting location. (For our case, we use the 'Load' terminal.)\n+          List<UtilityTerminal> terminals = startingLocation.getAssetType().getTerminalConfiguration().getTerminals();\n+          terminals.forEach(terminal -> {\n+            if (terminal.getName().equals(\"Load\")) {\n+              startingTerminal = terminal;\n+            }\n+          });\n+          startingLocation.setTerminal(startingTerminal);\n+\n+          // get a default trace configuration from a tier to update the UI\n+          UtilityDomainNetwork utilityDomainNetwork =\n+              utilityNetwork.getDefinition().getDomainNetwork(\"ElectricDistribution\");\n+          UtilityTier utilityTier = utilityDomainNetwork.getTier(\"Medium Voltage Radial\");\n+          utilityTraceConfiguration = utilityTier.getTraceConfiguration();\n+\n+          // save the default trace configuration to restore when the application is reset\n+          initialUtilityTraceConfiguration = utilityTraceConfiguration;\n+\n+          // save the initial expression\n+          initialExpression =\n+              (UtilityTraceConditionalExpression) utilityTier.getTraceConfiguration().getTraversability().getBarriers();\n+\n+          // show the initial expression in the text area\n+          traceConditionsTextArea.setText(expressionToString(initialExpression));\n+\n+          // set the traversability scope\n+          utilityTier.getTraceConfiguration().getTraversability().setScope(UtilityTraversabilityScope.JUNCTIONS);\n+        }\n+      });\n+    } catch (Exception e) {\n+      new Alert(Alert.AlertType.ERROR, \"Error loading Utility Network.\").show();\n+    }\n+  }\n+\n+  /**\n+   * Uses the selected parameters to add a barrier expression to the utility trace configuration.\n+   */\n+  @FXML\n+  private void onAddConditionClick() {\n+\n+    // get the selected utility network attribute and attribute comparison operator\n+    UtilityNetworkAttribute selectedAttribute = comparisonSourcesComboBox.getSelectionModel().getSelectedItem();\n+    UtilityAttributeComparisonOperator selectedOperator =\n+        comparisonOperatorsComboBox.getSelectionModel().getSelectedItem();\n+\n+    // check if a comparison value was specified, and capture it to use as the last parameter of the\n+    // UtilityNetworkAttributeComparison\n+    Object otherValue;\n+    // if a comparison value is selected from the ComboBox, use it as the third parameter\n+    if (selectedAttribute.getDomain() instanceof CodedValueDomain &&\n+        comparisonValuesComboBox.getSelectionModel().getSelectedItem() != null) {\n+      // convert the selected comparison value to the data type defined by the selected attribute\n+      otherValue = convertToDataType(comparisonValuesComboBox.getSelectionModel().getSelectedItem().getCode(),\n+          selectedAttribute.getDataType());\n+    } else if (!comparisonValuesTextField.getText().equals(\"\")) {\n+      // otherwise, a comparison value will be specified as text input to be used as the third parameter\n+      otherValue = convertToDataType(comparisonValuesTextField.getText(), selectedAttribute.getDataType());\n+    } else {\n+      new Alert(Alert.AlertType.WARNING, \"No valid comparison value entered\").show();\n+      return;\n+    }\n+\n+    // create the utility network attribute comparison expression using the specified parameters\n+    // NOTE: You may also create a UtilityNetworkAttributeComparison with another NetworkAttribute.\n+    UtilityTraceConditionalExpression expression =\n+        new UtilityNetworkAttributeComparison(selectedAttribute, selectedOperator, otherValue);\n+\n+    // check if an expression is already defined for the traversability barriers\n+    if (utilityTraceConfiguration.getTraversability().getBarriers() instanceof UtilityTraceConditionalExpression) {\n+      UtilityTraceConditionalExpression otherExpression =\n+          (UtilityTraceConditionalExpression) utilityTraceConfiguration.getTraversability().getBarriers();\n+      // use the existing expression to create an `or` expression with the user-defined expression\n+      expression = new UtilityTraceOrCondition(otherExpression, expression);\n+    }\n+\n+    // set the new expression to the traversability\n+    utilityTraceConfiguration.getTraversability().setBarriers(expression);\n+\n+    // show the expression in the text area\n+    traceConditionsTextArea.setText(expressionToString(expression));\n+  }\n+\n+  /**\n+   * Parses a utility trace conditional expression into text and returns it.\n+   *\n+   * @param expression a UtilityTraceConditionalExpression\n+   * @return string representing the expression\n+   */\n+  private String expressionToString(UtilityTraceConditionalExpression expression) {\n+\n+    StringBuilder stringBuilder = new StringBuilder();\n+\n+    // for category comparison expressions, add the category name and comparison operator\n+    if (expression instanceof UtilityCategoryComparison) {\n+      UtilityCategoryComparison categoryComparison = (UtilityCategoryComparison) expression;\n+      stringBuilder.append(\n+          String.format(\"'%1$s' %2$s\", categoryComparison.getCategory().getName(),\n+              categoryComparison.getComparisonOperator().name()));\n+    }\n+\n+    // for network attribute comparison expressions, add the network attribute name and comparison operator\n+    else if (expression instanceof UtilityNetworkAttributeComparison) {\n+      UtilityNetworkAttributeComparison attributeComparison = (UtilityNetworkAttributeComparison) expression;\n+      stringBuilder.append(\n+          String.format(\"'%1$s' %2$s\", attributeComparison.getNetworkAttribute().getName(),\n+              attributeComparison.getComparisonOperator().name()));\n+\n+      if (attributeComparison.getNetworkAttribute().getDomain() instanceof CodedValueDomain) {\n+        CodedValueDomain codedValueDomain = (CodedValueDomain) attributeComparison.getNetworkAttribute().getDomain();\n+\n+        if (!codedValueDomain.getCodedValues().isEmpty()) {\n+          // get the data type of the used network attribute comparison\n+          UtilityNetworkAttribute.DataType attributeComparisonDataType =\n+              attributeComparison.getNetworkAttribute().getDataType();\n+\n+          // get the coded values from the domain and find the ones where the value matches the network attribute's\n+          // comparison value\n+          List<CodedValue> list = codedValueDomain.getCodedValues()\n+              .stream()\n+              .filter(value -> convertToDataType(value.getCode(), attributeComparisonDataType).equals(\n+                  convertToDataType(attributeComparison.getValue(), attributeComparisonDataType)))\n+              .collect(Collectors.toList());\n+\n+          if (!list.isEmpty()) {\n+            // get the first coded value and add it's name to the string\n+            CodedValue codedValue = list.get(0);\n+            stringBuilder.append(String.format(\" '%1$s'\", codedValue.getName()));\n+          }\n+        }\n+\n+      } else {\n+        if (attributeComparison.getOtherNetworkAttribute() != null) {\n+          stringBuilder.append(\n+              String.format(\" '%1$s'\", attributeComparison.getOtherNetworkAttribute().getName()));\n+        } else {\n+          stringBuilder.append(\n+              String.format(\" '%1$s'\", attributeComparison.getValue().toString()));\n+        }\n+      }\n+    }\n+\n+    // for 'and'/'or' conditions, generate the expression for both sides\n+    else if (expression instanceof UtilityTraceAndCondition) {\n+      UtilityTraceAndCondition andCondition = (UtilityTraceAndCondition) expression;\n+      stringBuilder.append(\n+          String.format(\"%1$s AND%n %2$s\", expressionToString(andCondition.getLeftExpression()),\n+              expressionToString(andCondition.getRightExpression())));\n+    } else if (expression instanceof UtilityTraceOrCondition) {\n+      UtilityTraceOrCondition orCondition = (UtilityTraceOrCondition) expression;\n+      stringBuilder.append(\n+          String.format(\"%1$s OR%n %2$s\", expressionToString(orCondition.getLeftExpression()),\n+              expressionToString(orCondition.getRightExpression())));\n+    }\n+\n+    return stringBuilder.toString();\n+  }\n+\n+  /**\n+   * Builds trace parameters using the constructed trace configurations and runs the trace in the utility network. On\n+   * completion, shows an alert with the number of found elements.\n+   */\n+  @FXML\n+  private void onTraceClick() {\n+\n+    try {\n+      // build utility trace parameters for a subnetwork trace using the prepared starting location\n+      UtilityTraceParameters utilityTraceParameters =\n+          new UtilityTraceParameters(UtilityTraceType.SUBNETWORK, Collections.singletonList(startingLocation));\n+\n+      // set the defined trace configuration to the trace parameters\n+      utilityTraceParameters.setTraceConfiguration(utilityTraceConfiguration);\n+\n+      // apply the include barriers/containers settings according to the checkboxes\n+      utilityTraceParameters.getTraceConfiguration().setIncludeBarriers(includeBarriersCheckBox.isSelected());\n+      utilityTraceParameters.getTraceConfiguration().setIncludeContainers(includeContainersCheckBox.isSelected());\n+\n+      // run the utility trace and get the results\n+      ListenableFuture<List<UtilityTraceResult>> utilityTraceResultsFuture =\n+          utilityNetwork.traceAsync(utilityTraceParameters);\n+      utilityTraceResultsFuture.addDoneListener(() -> {\n+        try {\n+          List<UtilityTraceResult> utilityTraceResults = utilityTraceResultsFuture.get();\n+\n+          if (utilityTraceResults.get(0) instanceof UtilityElementTraceResult) {\n+            UtilityElementTraceResult utilityElementTraceResult =\n+                (UtilityElementTraceResult) utilityTraceResults.get(0);\n+\n+            // show an alert with the number of elements found\n+            int elementsFound = utilityElementTraceResult.getElements().size();\n+            Alert resultsDialog = new Alert(Alert.AlertType.INFORMATION, elementsFound + \" \" + \"elements found.\");\n+            resultsDialog.setHeaderText(\"Trace completed successfully.\");\n+            resultsDialog.setTitle(\"Trace Complete\");\n+            resultsDialog.show();\n+\n+          } else {\n+            new Alert(Alert.AlertType.ERROR, \"Trace result not a utility element.\").show();\n+          }\n+        } catch (Exception e) {\n+          new Alert(Alert.AlertType.ERROR,\n+              \"Error running utility network trace. For a working barrier condition, try \\\"Transformer Load\\\" Equal \\\"15\\\".\")\n+              .show();\n+        }\n+      });\n+    } catch (Exception e) {\n+      new Alert(Alert.AlertType.ERROR, \"Error building trace parameters / configuration.\").show();\n+    }\n+  }\n+\n+  /**\n+   * Resets the trace configuration and UI back to the state at application start.\n+   */\n+  @FXML\n+  private void onResetClick() {\n+\n+    // reset the utility trace configuration and traversability to the state at application start\n+    utilityTraceConfiguration = initialUtilityTraceConfiguration;\n+    utilityTraceConfiguration.getTraversability().setBarriers(initialExpression);\n+\n+    // show the configuration expression from the application start in the text area\n+    traceConditionsTextArea.setText(expressionToString(initialExpression));\n+\n+    // un-check the checkboxes for including barriers and containers\n+    includeContainersCheckBox.setSelected(false);\n+    includeBarriersCheckBox.setSelected(false);\n+\n+    // select the first item in each ComboBox\n+    comparisonSourcesComboBox.getSelectionModel().select(0);\n+    comparisonOperatorsComboBox.getSelectionModel().select(0);\n+  }\n+\n+  /**\n+   * Updates the contents of the comparison value choices ComboBox depending on the selected comparison source.\n+   */\n+  @FXML\n+  private void onComparisonSourceChanged() {\n+\n+    // clear any previous text input\n+    comparisonValuesTextField.clear();\n+\n+    if (comparisonSourcesComboBox.getSelectionModel().getSelectedItem() != null) {\n+\n+      // determine if we need to show a selection of values in the combo box, or a text entry field\n+      UtilityNetworkAttribute selectedAttribute = comparisonSourcesComboBox.getSelectionModel().getSelectedItem();\n+      if (selectedAttribute.getDomain() instanceof CodedValueDomain) {\n+\n+        // populate and show the comparison values combo box\n+        List<CodedValue> comparisonValues = ((CodedValueDomain) selectedAttribute.getDomain()).getCodedValues();\n+        comparisonValuesComboBox.getItems().clear();\n+        comparisonValuesComboBox.getItems().addAll(comparisonValues);\n+        comparisonValuesComboBox.getSelectionModel().select(0);\n+\n+      } else {\n+        comparisonValuesComboBox.getItems().clear();\n+      }\n+\n+      // toggle the selection combo box to be visible if it has any items\n+      comparisonValuesComboBox.setVisible(!comparisonValuesComboBox.getItems().isEmpty());\n+      // toggle the text field to be hidden if the combo box is visible, or show it if the combo box is invisible\n+      comparisonValuesTextField.setVisible(!comparisonValuesComboBox.isVisible());\n+    }\n+  }\n+\n+  /**\n+   * Converts an object representing a value into the data type specified.", "originalCommit": "9b8fa16950e67ffa489decf5fdeeb7685fd2ec65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5MjgwNw==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/439#discussion_r387892807", "bodyText": "I agree that this is quite confusing.\nI've found that this particular utility network accepts 0 and 1 as a 'boolean', hence the text field only accepts numbers.\nI think this sample has a little more functionality than the dataset actually supports. I think the UN team designed it particularly this way so that users have a more general starting point rather than limiting it to the abilities of the demo dataset.\nMaybe @jnery could also help clarify?", "author": "JonLavi", "createdAt": "2020-03-04T19:43:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIwODA3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "1120e4f0ba6cd4fd4fe42b5ba7d7dd7828ac07ad", "chunk": "diff --git a/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java b/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java\nindex 141e4176..e4efd688 100644\n--- a/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java\n+++ b/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2019 Esri.\n+ * Copyright 2020 Esri.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU4MTE3NA==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/439#discussion_r387581174", "bodyText": "again I'm confused by this comment. we're taking the data type, and converting it from it's type to a value, no? as the description stands, it looks like we're just retrieving if it's an integer/float etc which I think is misleading, whereas we're returning it's actual value e.g. 4?", "author": "Rachael-E", "createdAt": "2020-03-04T10:37:04Z", "path": "network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java", "diffHunk": "@@ -0,0 +1,419 @@\n+/*\n+ * Copyright 2019 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.esri.samples.configure_subnetwork_trace;\n+\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.TextArea;\n+import javafx.scene.control.TextField;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.CodedValue;\n+import com.esri.arcgisruntime.data.CodedValueDomain;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetGroup;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetType;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAttributeComparisonOperator;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategoryComparison;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityDomainNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElement;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElementTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkAttribute;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkAttributeComparison;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkSource;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTerminal;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTier;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceAndCondition;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceConditionalExpression;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceConfiguration;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceOrCondition;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceParameters;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceType;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraversabilityScope;\n+\n+public class ConfigureSubnetworkTraceController {\n+\n+  @FXML private CheckBox includeBarriersCheckBox;\n+  @FXML private CheckBox includeContainersCheckBox;\n+  @FXML private ComboBox<CodedValue> comparisonValuesComboBox;\n+  @FXML private ComboBox<UtilityAttributeComparisonOperator> comparisonOperatorsComboBox;\n+  @FXML private ComboBox<UtilityNetworkAttribute> comparisonSourcesComboBox;\n+  @FXML private TextArea traceConditionsTextArea;\n+  @FXML private TextField comparisonValuesTextField;\n+\n+  private UtilityElement startingLocation;\n+  private UtilityNetwork utilityNetwork;\n+  private UtilityTerminal startingTerminal;\n+  private UtilityTraceConditionalExpression initialExpression;\n+  private UtilityTraceConfiguration initialUtilityTraceConfiguration;\n+  private UtilityTraceConfiguration utilityTraceConfiguration;\n+\n+  @FXML\n+  public void initialize() {\n+\n+    try {\n+\n+      // add a listener to the comparison value text field, so that it only accepts numerical input separated by a decimal\n+      comparisonValuesTextField.textProperty().addListener((observable, oldValue, newValue) -> {\n+        if (!newValue.matches(\"\\\\d*([.]\\\\d*)?\")) {\n+          comparisonValuesTextField.setText(oldValue);\n+        }\n+      });\n+\n+      // load the utility network\n+      utilityNetwork = new UtilityNetwork(\n+          \"https://sampleserver7.arcgisonline.com/arcgis/rest/services/UtilityNetwork/NapervilleElectric\" +\n+              \"/FeatureServer\");\n+      utilityNetwork.loadAsync();\n+      utilityNetwork.addDoneLoadingListener(() -> {\n+        if (utilityNetwork.getLoadStatus() == LoadStatus.LOADED) {\n+\n+          // build the choice list for the network attribute comparison sources\n+          List<UtilityNetworkAttribute> comparisonSources = utilityNetwork.getDefinition()\n+              .getNetworkAttributes()\n+              .stream()\n+              .filter(value -> !value.isSystemDefined())\n+              .collect(Collectors.toList());\n+          comparisonSourcesComboBox.getItems().addAll(comparisonSources);\n+          comparisonSourcesComboBox.getSelectionModel().select(0);\n+          // display the name of the comparison sources in the ComboBox\n+          comparisonSourcesComboBox.setButtonCell(new ComparisonSourceListCell());\n+          comparisonSourcesComboBox.setCellFactory(c -> new ComparisonSourceListCell());\n+\n+          // build the choice list for the comparison operators\n+          comparisonOperatorsComboBox.getItems().addAll(UtilityAttributeComparisonOperator.values());\n+          comparisonOperatorsComboBox.getSelectionModel().select(0);\n+\n+          // display the name of the comparison values in the ComboBox\n+          comparisonValuesComboBox.setButtonCell(new CodedValueListCell());\n+          comparisonValuesComboBox.setCellFactory(c -> new CodedValueListCell());\n+\n+          // create a default starting location\n+          UtilityNetworkSource utilityNetworkSource =\n+              utilityNetwork.getDefinition().getNetworkSource(\"Electric Distribution Device\");\n+          UtilityAssetGroup utilityAssetGroup = utilityNetworkSource.getAssetGroup(\"Circuit Breaker\");\n+          UtilityAssetType utilityAssetType = utilityAssetGroup.getAssetType(\"Three Phase\");\n+          startingLocation =\n+              utilityNetwork.createElement(utilityAssetType, UUID.fromString(\"1CAF7740-0BF4-4113-8DB2-654E18800028\"));\n+\n+          // set the terminal for the starting location. (For our case, we use the 'Load' terminal.)\n+          List<UtilityTerminal> terminals = startingLocation.getAssetType().getTerminalConfiguration().getTerminals();\n+          terminals.forEach(terminal -> {\n+            if (terminal.getName().equals(\"Load\")) {\n+              startingTerminal = terminal;\n+            }\n+          });\n+          startingLocation.setTerminal(startingTerminal);\n+\n+          // get a default trace configuration from a tier to update the UI\n+          UtilityDomainNetwork utilityDomainNetwork =\n+              utilityNetwork.getDefinition().getDomainNetwork(\"ElectricDistribution\");\n+          UtilityTier utilityTier = utilityDomainNetwork.getTier(\"Medium Voltage Radial\");\n+          utilityTraceConfiguration = utilityTier.getTraceConfiguration();\n+\n+          // save the default trace configuration to restore when the application is reset\n+          initialUtilityTraceConfiguration = utilityTraceConfiguration;\n+\n+          // save the initial expression\n+          initialExpression =\n+              (UtilityTraceConditionalExpression) utilityTier.getTraceConfiguration().getTraversability().getBarriers();\n+\n+          // show the initial expression in the text area\n+          traceConditionsTextArea.setText(expressionToString(initialExpression));\n+\n+          // set the traversability scope\n+          utilityTier.getTraceConfiguration().getTraversability().setScope(UtilityTraversabilityScope.JUNCTIONS);\n+        }\n+      });\n+    } catch (Exception e) {\n+      new Alert(Alert.AlertType.ERROR, \"Error loading Utility Network.\").show();\n+    }\n+  }\n+\n+  /**\n+   * Uses the selected parameters to add a barrier expression to the utility trace configuration.\n+   */\n+  @FXML\n+  private void onAddConditionClick() {\n+\n+    // get the selected utility network attribute and attribute comparison operator\n+    UtilityNetworkAttribute selectedAttribute = comparisonSourcesComboBox.getSelectionModel().getSelectedItem();\n+    UtilityAttributeComparisonOperator selectedOperator =\n+        comparisonOperatorsComboBox.getSelectionModel().getSelectedItem();\n+\n+    // check if a comparison value was specified, and capture it to use as the last parameter of the\n+    // UtilityNetworkAttributeComparison\n+    Object otherValue;\n+    // if a comparison value is selected from the ComboBox, use it as the third parameter\n+    if (selectedAttribute.getDomain() instanceof CodedValueDomain &&\n+        comparisonValuesComboBox.getSelectionModel().getSelectedItem() != null) {\n+      // convert the selected comparison value to the data type defined by the selected attribute", "originalCommit": "9b8fa16950e67ffa489decf5fdeeb7685fd2ec65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk3MzcyOA==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/439#discussion_r387973728", "bodyText": "The input box for the comparison value at the moment only accepts 'string' inputs (limited to numbers via the code from the beginning of the initialize method:\ncomparisonValuesTextField.textProperty().addListener((observable, oldValue, newValue) -> {if (!newValue.matches(\"\\\\d*([.]\\\\d*)?\")) {\n          comparisonValuesTextField.setText(oldValue);\n        }\n\nWhen it comes to constructing the UtilityTraceConditionalExpression, the comparison value has to be a particular data type, depending on which comparison attribute is selected. So basically what we are doing is checking 'does this need to be a double/int/float/bool?' and convert the input to the appropriate type using convertToDataType(). That method returns an Object that represents the value, and it's type is not clear at the begining, hence it's type is just a generic Object.\nHopefully this explanation helps clarify a little? I'll scratch my head a bit on how to improve the comments so it's more obvious what's going on.", "author": "JonLavi", "createdAt": "2020-03-04T22:30:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU4MTE3NA=="}], "type": "inlineReview", "revised_code": {"commit": "1120e4f0ba6cd4fd4fe42b5ba7d7dd7828ac07ad", "chunk": "diff --git a/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java b/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java\nindex 141e4176..e4efd688 100644\n--- a/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java\n+++ b/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2019 Esri.\n+ * Copyright 2020 Esri.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYzMjA3Mw==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/439#discussion_r387632073", "bodyText": "this is cool! though I noticed when selecting e.g. \"Is subnetwork controller EQUAL\" and add 15.0 or 15000000000 that two exceptions are reported\njava.lang.NumberFormatException: For input string: \"15000000000\"\nCaused by: java.lang.reflect.InvocationTargetException\nagain I'm probably not using the values a utility networker would use, and in other fields these entries seem to be ok.", "author": "Rachael-E", "createdAt": "2020-03-04T12:23:54Z", "path": "network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java", "diffHunk": "@@ -0,0 +1,419 @@\n+/*\n+ * Copyright 2019 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.esri.samples.configure_subnetwork_trace;\n+\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.TextArea;\n+import javafx.scene.control.TextField;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.CodedValue;\n+import com.esri.arcgisruntime.data.CodedValueDomain;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetGroup;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetType;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAttributeComparisonOperator;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategoryComparison;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityDomainNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElement;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElementTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkAttribute;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkAttributeComparison;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkSource;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTerminal;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTier;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceAndCondition;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceConditionalExpression;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceConfiguration;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceOrCondition;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceParameters;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceType;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraversabilityScope;\n+\n+public class ConfigureSubnetworkTraceController {\n+\n+  @FXML private CheckBox includeBarriersCheckBox;\n+  @FXML private CheckBox includeContainersCheckBox;\n+  @FXML private ComboBox<CodedValue> comparisonValuesComboBox;\n+  @FXML private ComboBox<UtilityAttributeComparisonOperator> comparisonOperatorsComboBox;\n+  @FXML private ComboBox<UtilityNetworkAttribute> comparisonSourcesComboBox;\n+  @FXML private TextArea traceConditionsTextArea;\n+  @FXML private TextField comparisonValuesTextField;\n+\n+  private UtilityElement startingLocation;\n+  private UtilityNetwork utilityNetwork;\n+  private UtilityTerminal startingTerminal;\n+  private UtilityTraceConditionalExpression initialExpression;\n+  private UtilityTraceConfiguration initialUtilityTraceConfiguration;\n+  private UtilityTraceConfiguration utilityTraceConfiguration;\n+\n+  @FXML\n+  public void initialize() {\n+\n+    try {\n+\n+      // add a listener to the comparison value text field, so that it only accepts numerical input separated by a decimal\n+      comparisonValuesTextField.textProperty().addListener((observable, oldValue, newValue) -> {", "originalCommit": "9b8fa16950e67ffa489decf5fdeeb7685fd2ec65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk0NjEzMw==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/439#discussion_r387946133", "bodyText": "I think this is the particular case is where an int input of either 0 or 1 is used to represent 'false' or 'true', so the values can only be one of those two. We might have to rig the sample so that when selecting the comparison source is network controller, we'd get a drop-down with true/false.", "author": "JonLavi", "createdAt": "2020-03-04T21:31:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYzMjA3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk3MDM3MQ==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/439#discussion_r387970371", "bodyText": "Adding a try/catch to deal with the exception is a possible fix. However it still doesn't resolve the fact that the expected input for 'is subnetwork controller' is either 0 or 1", "author": "JonLavi", "createdAt": "2020-03-04T22:22:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYzMjA3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "1120e4f0ba6cd4fd4fe42b5ba7d7dd7828ac07ad", "chunk": "diff --git a/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java b/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java\nindex 141e4176..e4efd688 100644\n--- a/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java\n+++ b/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2019 Esri.\n+ * Copyright 2020 Esri.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY2OTYyNQ==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/439#discussion_r387669625", "bodyText": "I think you can replace this with the following since you stored it in a variable earlier\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      utilityTier.getTraceConfiguration().getTraversability().setScope(UtilityTraversabilityScope.JUNCTIONS);\n          \n          \n            \n                      utilityTraceConfiguration().getTraversability().setScope(UtilityTraversabilityScope.JUNCTIONS);", "author": "Rachael-E", "createdAt": "2020-03-04T13:36:32Z", "path": "network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java", "diffHunk": "@@ -0,0 +1,419 @@\n+/*\n+ * Copyright 2019 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.esri.samples.configure_subnetwork_trace;\n+\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.TextArea;\n+import javafx.scene.control.TextField;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.CodedValue;\n+import com.esri.arcgisruntime.data.CodedValueDomain;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetGroup;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetType;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAttributeComparisonOperator;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategoryComparison;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityDomainNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElement;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElementTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkAttribute;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkAttributeComparison;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkSource;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTerminal;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTier;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceAndCondition;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceConditionalExpression;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceConfiguration;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceOrCondition;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceParameters;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceType;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraversabilityScope;\n+\n+public class ConfigureSubnetworkTraceController {\n+\n+  @FXML private CheckBox includeBarriersCheckBox;\n+  @FXML private CheckBox includeContainersCheckBox;\n+  @FXML private ComboBox<CodedValue> comparisonValuesComboBox;\n+  @FXML private ComboBox<UtilityAttributeComparisonOperator> comparisonOperatorsComboBox;\n+  @FXML private ComboBox<UtilityNetworkAttribute> comparisonSourcesComboBox;\n+  @FXML private TextArea traceConditionsTextArea;\n+  @FXML private TextField comparisonValuesTextField;\n+\n+  private UtilityElement startingLocation;\n+  private UtilityNetwork utilityNetwork;\n+  private UtilityTerminal startingTerminal;\n+  private UtilityTraceConditionalExpression initialExpression;\n+  private UtilityTraceConfiguration initialUtilityTraceConfiguration;\n+  private UtilityTraceConfiguration utilityTraceConfiguration;\n+\n+  @FXML\n+  public void initialize() {\n+\n+    try {\n+\n+      // add a listener to the comparison value text field, so that it only accepts numerical input separated by a decimal\n+      comparisonValuesTextField.textProperty().addListener((observable, oldValue, newValue) -> {\n+        if (!newValue.matches(\"\\\\d*([.]\\\\d*)?\")) {\n+          comparisonValuesTextField.setText(oldValue);\n+        }\n+      });\n+\n+      // load the utility network\n+      utilityNetwork = new UtilityNetwork(\n+          \"https://sampleserver7.arcgisonline.com/arcgis/rest/services/UtilityNetwork/NapervilleElectric\" +\n+              \"/FeatureServer\");\n+      utilityNetwork.loadAsync();\n+      utilityNetwork.addDoneLoadingListener(() -> {\n+        if (utilityNetwork.getLoadStatus() == LoadStatus.LOADED) {\n+\n+          // build the choice list for the network attribute comparison sources\n+          List<UtilityNetworkAttribute> comparisonSources = utilityNetwork.getDefinition()\n+              .getNetworkAttributes()\n+              .stream()\n+              .filter(value -> !value.isSystemDefined())\n+              .collect(Collectors.toList());\n+          comparisonSourcesComboBox.getItems().addAll(comparisonSources);\n+          comparisonSourcesComboBox.getSelectionModel().select(0);\n+          // display the name of the comparison sources in the ComboBox\n+          comparisonSourcesComboBox.setButtonCell(new ComparisonSourceListCell());\n+          comparisonSourcesComboBox.setCellFactory(c -> new ComparisonSourceListCell());\n+\n+          // build the choice list for the comparison operators\n+          comparisonOperatorsComboBox.getItems().addAll(UtilityAttributeComparisonOperator.values());\n+          comparisonOperatorsComboBox.getSelectionModel().select(0);\n+\n+          // display the name of the comparison values in the ComboBox\n+          comparisonValuesComboBox.setButtonCell(new CodedValueListCell());\n+          comparisonValuesComboBox.setCellFactory(c -> new CodedValueListCell());\n+\n+          // create a default starting location\n+          UtilityNetworkSource utilityNetworkSource =\n+              utilityNetwork.getDefinition().getNetworkSource(\"Electric Distribution Device\");\n+          UtilityAssetGroup utilityAssetGroup = utilityNetworkSource.getAssetGroup(\"Circuit Breaker\");\n+          UtilityAssetType utilityAssetType = utilityAssetGroup.getAssetType(\"Three Phase\");\n+          startingLocation =\n+              utilityNetwork.createElement(utilityAssetType, UUID.fromString(\"1CAF7740-0BF4-4113-8DB2-654E18800028\"));\n+\n+          // set the terminal for the starting location. (For our case, we use the 'Load' terminal.)\n+          List<UtilityTerminal> terminals = startingLocation.getAssetType().getTerminalConfiguration().getTerminals();\n+          terminals.forEach(terminal -> {\n+            if (terminal.getName().equals(\"Load\")) {\n+              startingTerminal = terminal;\n+            }\n+          });\n+          startingLocation.setTerminal(startingTerminal);\n+\n+          // get a default trace configuration from a tier to update the UI\n+          UtilityDomainNetwork utilityDomainNetwork =\n+              utilityNetwork.getDefinition().getDomainNetwork(\"ElectricDistribution\");\n+          UtilityTier utilityTier = utilityDomainNetwork.getTier(\"Medium Voltage Radial\");\n+          utilityTraceConfiguration = utilityTier.getTraceConfiguration();\n+\n+          // save the default trace configuration to restore when the application is reset\n+          initialUtilityTraceConfiguration = utilityTraceConfiguration;\n+\n+          // save the initial expression\n+          initialExpression =\n+              (UtilityTraceConditionalExpression) utilityTier.getTraceConfiguration().getTraversability().getBarriers();\n+\n+          // show the initial expression in the text area\n+          traceConditionsTextArea.setText(expressionToString(initialExpression));\n+\n+          // set the traversability scope\n+          utilityTier.getTraceConfiguration().getTraversability().setScope(UtilityTraversabilityScope.JUNCTIONS);", "originalCommit": "9b8fa16950e67ffa489decf5fdeeb7685fd2ec65", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1120e4f0ba6cd4fd4fe42b5ba7d7dd7828ac07ad", "chunk": "diff --git a/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java b/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java\nindex 141e4176..e4efd688 100644\n--- a/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java\n+++ b/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2019 Esri.\n+ * Copyright 2020 Esri.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY3MDEyNg==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/439#discussion_r387670126", "bodyText": "I think a comment to explain this Object reference would be helpful", "author": "Rachael-E", "createdAt": "2020-03-04T13:37:35Z", "path": "network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java", "diffHunk": "@@ -0,0 +1,419 @@\n+/*\n+ * Copyright 2019 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.esri.samples.configure_subnetwork_trace;\n+\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.TextArea;\n+import javafx.scene.control.TextField;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.CodedValue;\n+import com.esri.arcgisruntime.data.CodedValueDomain;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetGroup;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetType;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAttributeComparisonOperator;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategoryComparison;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityDomainNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElement;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElementTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkAttribute;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkAttributeComparison;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkSource;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTerminal;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTier;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceAndCondition;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceConditionalExpression;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceConfiguration;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceOrCondition;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceParameters;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceType;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraversabilityScope;\n+\n+public class ConfigureSubnetworkTraceController {\n+\n+  @FXML private CheckBox includeBarriersCheckBox;\n+  @FXML private CheckBox includeContainersCheckBox;\n+  @FXML private ComboBox<CodedValue> comparisonValuesComboBox;\n+  @FXML private ComboBox<UtilityAttributeComparisonOperator> comparisonOperatorsComboBox;\n+  @FXML private ComboBox<UtilityNetworkAttribute> comparisonSourcesComboBox;\n+  @FXML private TextArea traceConditionsTextArea;\n+  @FXML private TextField comparisonValuesTextField;\n+\n+  private UtilityElement startingLocation;\n+  private UtilityNetwork utilityNetwork;\n+  private UtilityTerminal startingTerminal;\n+  private UtilityTraceConditionalExpression initialExpression;\n+  private UtilityTraceConfiguration initialUtilityTraceConfiguration;\n+  private UtilityTraceConfiguration utilityTraceConfiguration;\n+\n+  @FXML\n+  public void initialize() {\n+\n+    try {\n+\n+      // add a listener to the comparison value text field, so that it only accepts numerical input separated by a decimal\n+      comparisonValuesTextField.textProperty().addListener((observable, oldValue, newValue) -> {\n+        if (!newValue.matches(\"\\\\d*([.]\\\\d*)?\")) {\n+          comparisonValuesTextField.setText(oldValue);\n+        }\n+      });\n+\n+      // load the utility network\n+      utilityNetwork = new UtilityNetwork(\n+          \"https://sampleserver7.arcgisonline.com/arcgis/rest/services/UtilityNetwork/NapervilleElectric\" +\n+              \"/FeatureServer\");\n+      utilityNetwork.loadAsync();\n+      utilityNetwork.addDoneLoadingListener(() -> {\n+        if (utilityNetwork.getLoadStatus() == LoadStatus.LOADED) {\n+\n+          // build the choice list for the network attribute comparison sources\n+          List<UtilityNetworkAttribute> comparisonSources = utilityNetwork.getDefinition()\n+              .getNetworkAttributes()\n+              .stream()\n+              .filter(value -> !value.isSystemDefined())\n+              .collect(Collectors.toList());\n+          comparisonSourcesComboBox.getItems().addAll(comparisonSources);\n+          comparisonSourcesComboBox.getSelectionModel().select(0);\n+          // display the name of the comparison sources in the ComboBox\n+          comparisonSourcesComboBox.setButtonCell(new ComparisonSourceListCell());\n+          comparisonSourcesComboBox.setCellFactory(c -> new ComparisonSourceListCell());\n+\n+          // build the choice list for the comparison operators\n+          comparisonOperatorsComboBox.getItems().addAll(UtilityAttributeComparisonOperator.values());\n+          comparisonOperatorsComboBox.getSelectionModel().select(0);\n+\n+          // display the name of the comparison values in the ComboBox\n+          comparisonValuesComboBox.setButtonCell(new CodedValueListCell());\n+          comparisonValuesComboBox.setCellFactory(c -> new CodedValueListCell());\n+\n+          // create a default starting location\n+          UtilityNetworkSource utilityNetworkSource =\n+              utilityNetwork.getDefinition().getNetworkSource(\"Electric Distribution Device\");\n+          UtilityAssetGroup utilityAssetGroup = utilityNetworkSource.getAssetGroup(\"Circuit Breaker\");\n+          UtilityAssetType utilityAssetType = utilityAssetGroup.getAssetType(\"Three Phase\");\n+          startingLocation =\n+              utilityNetwork.createElement(utilityAssetType, UUID.fromString(\"1CAF7740-0BF4-4113-8DB2-654E18800028\"));\n+\n+          // set the terminal for the starting location. (For our case, we use the 'Load' terminal.)\n+          List<UtilityTerminal> terminals = startingLocation.getAssetType().getTerminalConfiguration().getTerminals();\n+          terminals.forEach(terminal -> {\n+            if (terminal.getName().equals(\"Load\")) {\n+              startingTerminal = terminal;\n+            }\n+          });\n+          startingLocation.setTerminal(startingTerminal);\n+\n+          // get a default trace configuration from a tier to update the UI\n+          UtilityDomainNetwork utilityDomainNetwork =\n+              utilityNetwork.getDefinition().getDomainNetwork(\"ElectricDistribution\");\n+          UtilityTier utilityTier = utilityDomainNetwork.getTier(\"Medium Voltage Radial\");\n+          utilityTraceConfiguration = utilityTier.getTraceConfiguration();\n+\n+          // save the default trace configuration to restore when the application is reset\n+          initialUtilityTraceConfiguration = utilityTraceConfiguration;\n+\n+          // save the initial expression\n+          initialExpression =\n+              (UtilityTraceConditionalExpression) utilityTier.getTraceConfiguration().getTraversability().getBarriers();\n+\n+          // show the initial expression in the text area\n+          traceConditionsTextArea.setText(expressionToString(initialExpression));\n+\n+          // set the traversability scope\n+          utilityTier.getTraceConfiguration().getTraversability().setScope(UtilityTraversabilityScope.JUNCTIONS);\n+        }\n+      });\n+    } catch (Exception e) {\n+      new Alert(Alert.AlertType.ERROR, \"Error loading Utility Network.\").show();\n+    }\n+  }\n+\n+  /**\n+   * Uses the selected parameters to add a barrier expression to the utility trace configuration.\n+   */\n+  @FXML\n+  private void onAddConditionClick() {\n+\n+    // get the selected utility network attribute and attribute comparison operator\n+    UtilityNetworkAttribute selectedAttribute = comparisonSourcesComboBox.getSelectionModel().getSelectedItem();\n+    UtilityAttributeComparisonOperator selectedOperator =\n+        comparisonOperatorsComboBox.getSelectionModel().getSelectedItem();\n+\n+    // check if a comparison value was specified, and capture it to use as the last parameter of the\n+    // UtilityNetworkAttributeComparison\n+    Object otherValue;", "originalCommit": "9b8fa16950e67ffa489decf5fdeeb7685fd2ec65", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1120e4f0ba6cd4fd4fe42b5ba7d7dd7828ac07ad", "chunk": "diff --git a/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java b/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java\nindex 141e4176..e4efd688 100644\n--- a/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java\n+++ b/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2019 Esri.\n+ * Copyright 2020 Esri.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY4ODQ3Ng==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/439#discussion_r387688476", "bodyText": "excess space here between param and description", "author": "Rachael-E", "createdAt": "2020-03-04T14:09:00Z", "path": "network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java", "diffHunk": "@@ -0,0 +1,419 @@\n+/*\n+ * Copyright 2019 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.esri.samples.configure_subnetwork_trace;\n+\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.TextArea;\n+import javafx.scene.control.TextField;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.CodedValue;\n+import com.esri.arcgisruntime.data.CodedValueDomain;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetGroup;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetType;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAttributeComparisonOperator;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategoryComparison;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityDomainNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElement;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElementTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkAttribute;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkAttributeComparison;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkSource;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTerminal;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTier;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceAndCondition;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceConditionalExpression;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceConfiguration;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceOrCondition;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceParameters;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceType;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraversabilityScope;\n+\n+public class ConfigureSubnetworkTraceController {\n+\n+  @FXML private CheckBox includeBarriersCheckBox;\n+  @FXML private CheckBox includeContainersCheckBox;\n+  @FXML private ComboBox<CodedValue> comparisonValuesComboBox;\n+  @FXML private ComboBox<UtilityAttributeComparisonOperator> comparisonOperatorsComboBox;\n+  @FXML private ComboBox<UtilityNetworkAttribute> comparisonSourcesComboBox;\n+  @FXML private TextArea traceConditionsTextArea;\n+  @FXML private TextField comparisonValuesTextField;\n+\n+  private UtilityElement startingLocation;\n+  private UtilityNetwork utilityNetwork;\n+  private UtilityTerminal startingTerminal;\n+  private UtilityTraceConditionalExpression initialExpression;\n+  private UtilityTraceConfiguration initialUtilityTraceConfiguration;\n+  private UtilityTraceConfiguration utilityTraceConfiguration;\n+\n+  @FXML\n+  public void initialize() {\n+\n+    try {\n+\n+      // add a listener to the comparison value text field, so that it only accepts numerical input separated by a decimal\n+      comparisonValuesTextField.textProperty().addListener((observable, oldValue, newValue) -> {\n+        if (!newValue.matches(\"\\\\d*([.]\\\\d*)?\")) {\n+          comparisonValuesTextField.setText(oldValue);\n+        }\n+      });\n+\n+      // load the utility network\n+      utilityNetwork = new UtilityNetwork(\n+          \"https://sampleserver7.arcgisonline.com/arcgis/rest/services/UtilityNetwork/NapervilleElectric\" +\n+              \"/FeatureServer\");\n+      utilityNetwork.loadAsync();\n+      utilityNetwork.addDoneLoadingListener(() -> {\n+        if (utilityNetwork.getLoadStatus() == LoadStatus.LOADED) {\n+\n+          // build the choice list for the network attribute comparison sources\n+          List<UtilityNetworkAttribute> comparisonSources = utilityNetwork.getDefinition()\n+              .getNetworkAttributes()\n+              .stream()\n+              .filter(value -> !value.isSystemDefined())\n+              .collect(Collectors.toList());\n+          comparisonSourcesComboBox.getItems().addAll(comparisonSources);\n+          comparisonSourcesComboBox.getSelectionModel().select(0);\n+          // display the name of the comparison sources in the ComboBox\n+          comparisonSourcesComboBox.setButtonCell(new ComparisonSourceListCell());\n+          comparisonSourcesComboBox.setCellFactory(c -> new ComparisonSourceListCell());\n+\n+          // build the choice list for the comparison operators\n+          comparisonOperatorsComboBox.getItems().addAll(UtilityAttributeComparisonOperator.values());\n+          comparisonOperatorsComboBox.getSelectionModel().select(0);\n+\n+          // display the name of the comparison values in the ComboBox\n+          comparisonValuesComboBox.setButtonCell(new CodedValueListCell());\n+          comparisonValuesComboBox.setCellFactory(c -> new CodedValueListCell());\n+\n+          // create a default starting location\n+          UtilityNetworkSource utilityNetworkSource =\n+              utilityNetwork.getDefinition().getNetworkSource(\"Electric Distribution Device\");\n+          UtilityAssetGroup utilityAssetGroup = utilityNetworkSource.getAssetGroup(\"Circuit Breaker\");\n+          UtilityAssetType utilityAssetType = utilityAssetGroup.getAssetType(\"Three Phase\");\n+          startingLocation =\n+              utilityNetwork.createElement(utilityAssetType, UUID.fromString(\"1CAF7740-0BF4-4113-8DB2-654E18800028\"));\n+\n+          // set the terminal for the starting location. (For our case, we use the 'Load' terminal.)\n+          List<UtilityTerminal> terminals = startingLocation.getAssetType().getTerminalConfiguration().getTerminals();\n+          terminals.forEach(terminal -> {\n+            if (terminal.getName().equals(\"Load\")) {\n+              startingTerminal = terminal;\n+            }\n+          });\n+          startingLocation.setTerminal(startingTerminal);\n+\n+          // get a default trace configuration from a tier to update the UI\n+          UtilityDomainNetwork utilityDomainNetwork =\n+              utilityNetwork.getDefinition().getDomainNetwork(\"ElectricDistribution\");\n+          UtilityTier utilityTier = utilityDomainNetwork.getTier(\"Medium Voltage Radial\");\n+          utilityTraceConfiguration = utilityTier.getTraceConfiguration();\n+\n+          // save the default trace configuration to restore when the application is reset\n+          initialUtilityTraceConfiguration = utilityTraceConfiguration;\n+\n+          // save the initial expression\n+          initialExpression =\n+              (UtilityTraceConditionalExpression) utilityTier.getTraceConfiguration().getTraversability().getBarriers();\n+\n+          // show the initial expression in the text area\n+          traceConditionsTextArea.setText(expressionToString(initialExpression));\n+\n+          // set the traversability scope\n+          utilityTier.getTraceConfiguration().getTraversability().setScope(UtilityTraversabilityScope.JUNCTIONS);\n+        }\n+      });\n+    } catch (Exception e) {\n+      new Alert(Alert.AlertType.ERROR, \"Error loading Utility Network.\").show();\n+    }\n+  }\n+\n+  /**\n+   * Uses the selected parameters to add a barrier expression to the utility trace configuration.\n+   */\n+  @FXML\n+  private void onAddConditionClick() {\n+\n+    // get the selected utility network attribute and attribute comparison operator\n+    UtilityNetworkAttribute selectedAttribute = comparisonSourcesComboBox.getSelectionModel().getSelectedItem();\n+    UtilityAttributeComparisonOperator selectedOperator =\n+        comparisonOperatorsComboBox.getSelectionModel().getSelectedItem();\n+\n+    // check if a comparison value was specified, and capture it to use as the last parameter of the\n+    // UtilityNetworkAttributeComparison\n+    Object otherValue;\n+    // if a comparison value is selected from the ComboBox, use it as the third parameter\n+    if (selectedAttribute.getDomain() instanceof CodedValueDomain &&\n+        comparisonValuesComboBox.getSelectionModel().getSelectedItem() != null) {\n+      // convert the selected comparison value to the data type defined by the selected attribute\n+      otherValue = convertToDataType(comparisonValuesComboBox.getSelectionModel().getSelectedItem().getCode(),\n+          selectedAttribute.getDataType());\n+    } else if (!comparisonValuesTextField.getText().equals(\"\")) {\n+      // otherwise, a comparison value will be specified as text input to be used as the third parameter\n+      otherValue = convertToDataType(comparisonValuesTextField.getText(), selectedAttribute.getDataType());\n+    } else {\n+      new Alert(Alert.AlertType.WARNING, \"No valid comparison value entered\").show();\n+      return;\n+    }\n+\n+    // create the utility network attribute comparison expression using the specified parameters\n+    // NOTE: You may also create a UtilityNetworkAttributeComparison with another NetworkAttribute.\n+    UtilityTraceConditionalExpression expression =\n+        new UtilityNetworkAttributeComparison(selectedAttribute, selectedOperator, otherValue);\n+\n+    // check if an expression is already defined for the traversability barriers\n+    if (utilityTraceConfiguration.getTraversability().getBarriers() instanceof UtilityTraceConditionalExpression) {\n+      UtilityTraceConditionalExpression otherExpression =\n+          (UtilityTraceConditionalExpression) utilityTraceConfiguration.getTraversability().getBarriers();\n+      // use the existing expression to create an `or` expression with the user-defined expression\n+      expression = new UtilityTraceOrCondition(otherExpression, expression);\n+    }\n+\n+    // set the new expression to the traversability\n+    utilityTraceConfiguration.getTraversability().setBarriers(expression);\n+\n+    // show the expression in the text area\n+    traceConditionsTextArea.setText(expressionToString(expression));\n+  }\n+\n+  /**\n+   * Parses a utility trace conditional expression into text and returns it.\n+   *\n+   * @param expression a UtilityTraceConditionalExpression\n+   * @return string representing the expression\n+   */\n+  private String expressionToString(UtilityTraceConditionalExpression expression) {\n+\n+    StringBuilder stringBuilder = new StringBuilder();\n+\n+    // for category comparison expressions, add the category name and comparison operator\n+    if (expression instanceof UtilityCategoryComparison) {\n+      UtilityCategoryComparison categoryComparison = (UtilityCategoryComparison) expression;\n+      stringBuilder.append(\n+          String.format(\"'%1$s' %2$s\", categoryComparison.getCategory().getName(),\n+              categoryComparison.getComparisonOperator().name()));\n+    }\n+\n+    // for network attribute comparison expressions, add the network attribute name and comparison operator\n+    else if (expression instanceof UtilityNetworkAttributeComparison) {\n+      UtilityNetworkAttributeComparison attributeComparison = (UtilityNetworkAttributeComparison) expression;\n+      stringBuilder.append(\n+          String.format(\"'%1$s' %2$s\", attributeComparison.getNetworkAttribute().getName(),\n+              attributeComparison.getComparisonOperator().name()));\n+\n+      if (attributeComparison.getNetworkAttribute().getDomain() instanceof CodedValueDomain) {\n+        CodedValueDomain codedValueDomain = (CodedValueDomain) attributeComparison.getNetworkAttribute().getDomain();\n+\n+        if (!codedValueDomain.getCodedValues().isEmpty()) {\n+          // get the data type of the used network attribute comparison\n+          UtilityNetworkAttribute.DataType attributeComparisonDataType =\n+              attributeComparison.getNetworkAttribute().getDataType();\n+\n+          // get the coded values from the domain and find the ones where the value matches the network attribute's\n+          // comparison value\n+          List<CodedValue> list = codedValueDomain.getCodedValues()\n+              .stream()\n+              .filter(value -> convertToDataType(value.getCode(), attributeComparisonDataType).equals(\n+                  convertToDataType(attributeComparison.getValue(), attributeComparisonDataType)))\n+              .collect(Collectors.toList());\n+\n+          if (!list.isEmpty()) {\n+            // get the first coded value and add it's name to the string\n+            CodedValue codedValue = list.get(0);\n+            stringBuilder.append(String.format(\" '%1$s'\", codedValue.getName()));\n+          }\n+        }\n+\n+      } else {\n+        if (attributeComparison.getOtherNetworkAttribute() != null) {\n+          stringBuilder.append(\n+              String.format(\" '%1$s'\", attributeComparison.getOtherNetworkAttribute().getName()));\n+        } else {\n+          stringBuilder.append(\n+              String.format(\" '%1$s'\", attributeComparison.getValue().toString()));\n+        }\n+      }\n+    }\n+\n+    // for 'and'/'or' conditions, generate the expression for both sides\n+    else if (expression instanceof UtilityTraceAndCondition) {\n+      UtilityTraceAndCondition andCondition = (UtilityTraceAndCondition) expression;\n+      stringBuilder.append(\n+          String.format(\"%1$s AND%n %2$s\", expressionToString(andCondition.getLeftExpression()),\n+              expressionToString(andCondition.getRightExpression())));\n+    } else if (expression instanceof UtilityTraceOrCondition) {\n+      UtilityTraceOrCondition orCondition = (UtilityTraceOrCondition) expression;\n+      stringBuilder.append(\n+          String.format(\"%1$s OR%n %2$s\", expressionToString(orCondition.getLeftExpression()),\n+              expressionToString(orCondition.getRightExpression())));\n+    }\n+\n+    return stringBuilder.toString();\n+  }\n+\n+  /**\n+   * Builds trace parameters using the constructed trace configurations and runs the trace in the utility network. On\n+   * completion, shows an alert with the number of found elements.\n+   */\n+  @FXML\n+  private void onTraceClick() {\n+\n+    try {\n+      // build utility trace parameters for a subnetwork trace using the prepared starting location\n+      UtilityTraceParameters utilityTraceParameters =\n+          new UtilityTraceParameters(UtilityTraceType.SUBNETWORK, Collections.singletonList(startingLocation));\n+\n+      // set the defined trace configuration to the trace parameters\n+      utilityTraceParameters.setTraceConfiguration(utilityTraceConfiguration);\n+\n+      // apply the include barriers/containers settings according to the checkboxes\n+      utilityTraceParameters.getTraceConfiguration().setIncludeBarriers(includeBarriersCheckBox.isSelected());\n+      utilityTraceParameters.getTraceConfiguration().setIncludeContainers(includeContainersCheckBox.isSelected());\n+\n+      // run the utility trace and get the results\n+      ListenableFuture<List<UtilityTraceResult>> utilityTraceResultsFuture =\n+          utilityNetwork.traceAsync(utilityTraceParameters);\n+      utilityTraceResultsFuture.addDoneListener(() -> {\n+        try {\n+          List<UtilityTraceResult> utilityTraceResults = utilityTraceResultsFuture.get();\n+\n+          if (utilityTraceResults.get(0) instanceof UtilityElementTraceResult) {\n+            UtilityElementTraceResult utilityElementTraceResult =\n+                (UtilityElementTraceResult) utilityTraceResults.get(0);\n+\n+            // show an alert with the number of elements found\n+            int elementsFound = utilityElementTraceResult.getElements().size();\n+            Alert resultsDialog = new Alert(Alert.AlertType.INFORMATION, elementsFound + \" \" + \"elements found.\");\n+            resultsDialog.setHeaderText(\"Trace completed successfully.\");\n+            resultsDialog.setTitle(\"Trace Complete\");\n+            resultsDialog.show();\n+\n+          } else {\n+            new Alert(Alert.AlertType.ERROR, \"Trace result not a utility element.\").show();\n+          }\n+        } catch (Exception e) {\n+          new Alert(Alert.AlertType.ERROR,\n+              \"Error running utility network trace. For a working barrier condition, try \\\"Transformer Load\\\" Equal \\\"15\\\".\")\n+              .show();\n+        }\n+      });\n+    } catch (Exception e) {\n+      new Alert(Alert.AlertType.ERROR, \"Error building trace parameters / configuration.\").show();\n+    }\n+  }\n+\n+  /**\n+   * Resets the trace configuration and UI back to the state at application start.\n+   */\n+  @FXML\n+  private void onResetClick() {\n+\n+    // reset the utility trace configuration and traversability to the state at application start\n+    utilityTraceConfiguration = initialUtilityTraceConfiguration;\n+    utilityTraceConfiguration.getTraversability().setBarriers(initialExpression);\n+\n+    // show the configuration expression from the application start in the text area\n+    traceConditionsTextArea.setText(expressionToString(initialExpression));\n+\n+    // un-check the checkboxes for including barriers and containers\n+    includeContainersCheckBox.setSelected(false);\n+    includeBarriersCheckBox.setSelected(false);\n+\n+    // select the first item in each ComboBox\n+    comparisonSourcesComboBox.getSelectionModel().select(0);\n+    comparisonOperatorsComboBox.getSelectionModel().select(0);\n+  }\n+\n+  /**\n+   * Updates the contents of the comparison value choices ComboBox depending on the selected comparison source.\n+   */\n+  @FXML\n+  private void onComparisonSourceChanged() {\n+\n+    // clear any previous text input\n+    comparisonValuesTextField.clear();\n+\n+    if (comparisonSourcesComboBox.getSelectionModel().getSelectedItem() != null) {\n+\n+      // determine if we need to show a selection of values in the combo box, or a text entry field\n+      UtilityNetworkAttribute selectedAttribute = comparisonSourcesComboBox.getSelectionModel().getSelectedItem();\n+      if (selectedAttribute.getDomain() instanceof CodedValueDomain) {\n+\n+        // populate and show the comparison values combo box\n+        List<CodedValue> comparisonValues = ((CodedValueDomain) selectedAttribute.getDomain()).getCodedValues();\n+        comparisonValuesComboBox.getItems().clear();\n+        comparisonValuesComboBox.getItems().addAll(comparisonValues);\n+        comparisonValuesComboBox.getSelectionModel().select(0);\n+\n+      } else {\n+        comparisonValuesComboBox.getItems().clear();\n+      }\n+\n+      // toggle the selection combo box to be visible if it has any items\n+      comparisonValuesComboBox.setVisible(!comparisonValuesComboBox.getItems().isEmpty());\n+      // toggle the text field to be hidden if the combo box is visible, or show it if the combo box is invisible\n+      comparisonValuesTextField.setVisible(!comparisonValuesComboBox.isVisible());\n+    }\n+  }\n+\n+  /**\n+   * Converts an object representing a value into the data type specified.\n+   *\n+   * @param value    the value to convert", "originalCommit": "9b8fa16950e67ffa489decf5fdeeb7685fd2ec65", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1120e4f0ba6cd4fd4fe42b5ba7d7dd7828ac07ad", "chunk": "diff --git a/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java b/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java\nindex 141e4176..e4efd688 100644\n--- a/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java\n+++ b/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2019 Esri.\n+ * Copyright 2020 Esri.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY5NjY4Mg==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/439#discussion_r387696682", "bodyText": "to avoid repeated use of attributeComparison.getNetworkAttribute you could instead store it in a variable for re-use: up to you though, I'm ok either way.\nUtilityNetworkAttribute utilityNetworkAttribute = attributeComparison.getNetworkAttribute();", "author": "Rachael-E", "createdAt": "2020-03-04T14:22:21Z", "path": "network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java", "diffHunk": "@@ -0,0 +1,419 @@\n+/*\n+ * Copyright 2019 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.esri.samples.configure_subnetwork_trace;\n+\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.TextArea;\n+import javafx.scene.control.TextField;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.CodedValue;\n+import com.esri.arcgisruntime.data.CodedValueDomain;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetGroup;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetType;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAttributeComparisonOperator;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategoryComparison;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityDomainNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElement;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElementTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkAttribute;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkAttributeComparison;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkSource;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTerminal;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTier;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceAndCondition;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceConditionalExpression;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceConfiguration;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceOrCondition;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceParameters;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceType;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraversabilityScope;\n+\n+public class ConfigureSubnetworkTraceController {\n+\n+  @FXML private CheckBox includeBarriersCheckBox;\n+  @FXML private CheckBox includeContainersCheckBox;\n+  @FXML private ComboBox<CodedValue> comparisonValuesComboBox;\n+  @FXML private ComboBox<UtilityAttributeComparisonOperator> comparisonOperatorsComboBox;\n+  @FXML private ComboBox<UtilityNetworkAttribute> comparisonSourcesComboBox;\n+  @FXML private TextArea traceConditionsTextArea;\n+  @FXML private TextField comparisonValuesTextField;\n+\n+  private UtilityElement startingLocation;\n+  private UtilityNetwork utilityNetwork;\n+  private UtilityTerminal startingTerminal;\n+  private UtilityTraceConditionalExpression initialExpression;\n+  private UtilityTraceConfiguration initialUtilityTraceConfiguration;\n+  private UtilityTraceConfiguration utilityTraceConfiguration;\n+\n+  @FXML\n+  public void initialize() {\n+\n+    try {\n+\n+      // add a listener to the comparison value text field, so that it only accepts numerical input separated by a decimal\n+      comparisonValuesTextField.textProperty().addListener((observable, oldValue, newValue) -> {\n+        if (!newValue.matches(\"\\\\d*([.]\\\\d*)?\")) {\n+          comparisonValuesTextField.setText(oldValue);\n+        }\n+      });\n+\n+      // load the utility network\n+      utilityNetwork = new UtilityNetwork(\n+          \"https://sampleserver7.arcgisonline.com/arcgis/rest/services/UtilityNetwork/NapervilleElectric\" +\n+              \"/FeatureServer\");\n+      utilityNetwork.loadAsync();\n+      utilityNetwork.addDoneLoadingListener(() -> {\n+        if (utilityNetwork.getLoadStatus() == LoadStatus.LOADED) {\n+\n+          // build the choice list for the network attribute comparison sources\n+          List<UtilityNetworkAttribute> comparisonSources = utilityNetwork.getDefinition()\n+              .getNetworkAttributes()\n+              .stream()\n+              .filter(value -> !value.isSystemDefined())\n+              .collect(Collectors.toList());\n+          comparisonSourcesComboBox.getItems().addAll(comparisonSources);\n+          comparisonSourcesComboBox.getSelectionModel().select(0);\n+          // display the name of the comparison sources in the ComboBox\n+          comparisonSourcesComboBox.setButtonCell(new ComparisonSourceListCell());\n+          comparisonSourcesComboBox.setCellFactory(c -> new ComparisonSourceListCell());\n+\n+          // build the choice list for the comparison operators\n+          comparisonOperatorsComboBox.getItems().addAll(UtilityAttributeComparisonOperator.values());\n+          comparisonOperatorsComboBox.getSelectionModel().select(0);\n+\n+          // display the name of the comparison values in the ComboBox\n+          comparisonValuesComboBox.setButtonCell(new CodedValueListCell());\n+          comparisonValuesComboBox.setCellFactory(c -> new CodedValueListCell());\n+\n+          // create a default starting location\n+          UtilityNetworkSource utilityNetworkSource =\n+              utilityNetwork.getDefinition().getNetworkSource(\"Electric Distribution Device\");\n+          UtilityAssetGroup utilityAssetGroup = utilityNetworkSource.getAssetGroup(\"Circuit Breaker\");\n+          UtilityAssetType utilityAssetType = utilityAssetGroup.getAssetType(\"Three Phase\");\n+          startingLocation =\n+              utilityNetwork.createElement(utilityAssetType, UUID.fromString(\"1CAF7740-0BF4-4113-8DB2-654E18800028\"));\n+\n+          // set the terminal for the starting location. (For our case, we use the 'Load' terminal.)\n+          List<UtilityTerminal> terminals = startingLocation.getAssetType().getTerminalConfiguration().getTerminals();\n+          terminals.forEach(terminal -> {\n+            if (terminal.getName().equals(\"Load\")) {\n+              startingTerminal = terminal;\n+            }\n+          });\n+          startingLocation.setTerminal(startingTerminal);\n+\n+          // get a default trace configuration from a tier to update the UI\n+          UtilityDomainNetwork utilityDomainNetwork =\n+              utilityNetwork.getDefinition().getDomainNetwork(\"ElectricDistribution\");\n+          UtilityTier utilityTier = utilityDomainNetwork.getTier(\"Medium Voltage Radial\");\n+          utilityTraceConfiguration = utilityTier.getTraceConfiguration();\n+\n+          // save the default trace configuration to restore when the application is reset\n+          initialUtilityTraceConfiguration = utilityTraceConfiguration;\n+\n+          // save the initial expression\n+          initialExpression =\n+              (UtilityTraceConditionalExpression) utilityTier.getTraceConfiguration().getTraversability().getBarriers();\n+\n+          // show the initial expression in the text area\n+          traceConditionsTextArea.setText(expressionToString(initialExpression));\n+\n+          // set the traversability scope\n+          utilityTier.getTraceConfiguration().getTraversability().setScope(UtilityTraversabilityScope.JUNCTIONS);\n+        }\n+      });\n+    } catch (Exception e) {\n+      new Alert(Alert.AlertType.ERROR, \"Error loading Utility Network.\").show();\n+    }\n+  }\n+\n+  /**\n+   * Uses the selected parameters to add a barrier expression to the utility trace configuration.\n+   */\n+  @FXML\n+  private void onAddConditionClick() {\n+\n+    // get the selected utility network attribute and attribute comparison operator\n+    UtilityNetworkAttribute selectedAttribute = comparisonSourcesComboBox.getSelectionModel().getSelectedItem();\n+    UtilityAttributeComparisonOperator selectedOperator =\n+        comparisonOperatorsComboBox.getSelectionModel().getSelectedItem();\n+\n+    // check if a comparison value was specified, and capture it to use as the last parameter of the\n+    // UtilityNetworkAttributeComparison\n+    Object otherValue;\n+    // if a comparison value is selected from the ComboBox, use it as the third parameter\n+    if (selectedAttribute.getDomain() instanceof CodedValueDomain &&\n+        comparisonValuesComboBox.getSelectionModel().getSelectedItem() != null) {\n+      // convert the selected comparison value to the data type defined by the selected attribute\n+      otherValue = convertToDataType(comparisonValuesComboBox.getSelectionModel().getSelectedItem().getCode(),\n+          selectedAttribute.getDataType());\n+    } else if (!comparisonValuesTextField.getText().equals(\"\")) {\n+      // otherwise, a comparison value will be specified as text input to be used as the third parameter\n+      otherValue = convertToDataType(comparisonValuesTextField.getText(), selectedAttribute.getDataType());\n+    } else {\n+      new Alert(Alert.AlertType.WARNING, \"No valid comparison value entered\").show();\n+      return;\n+    }\n+\n+    // create the utility network attribute comparison expression using the specified parameters\n+    // NOTE: You may also create a UtilityNetworkAttributeComparison with another NetworkAttribute.\n+    UtilityTraceConditionalExpression expression =\n+        new UtilityNetworkAttributeComparison(selectedAttribute, selectedOperator, otherValue);\n+\n+    // check if an expression is already defined for the traversability barriers\n+    if (utilityTraceConfiguration.getTraversability().getBarriers() instanceof UtilityTraceConditionalExpression) {\n+      UtilityTraceConditionalExpression otherExpression =\n+          (UtilityTraceConditionalExpression) utilityTraceConfiguration.getTraversability().getBarriers();\n+      // use the existing expression to create an `or` expression with the user-defined expression\n+      expression = new UtilityTraceOrCondition(otherExpression, expression);\n+    }\n+\n+    // set the new expression to the traversability\n+    utilityTraceConfiguration.getTraversability().setBarriers(expression);\n+\n+    // show the expression in the text area\n+    traceConditionsTextArea.setText(expressionToString(expression));\n+  }\n+\n+  /**\n+   * Parses a utility trace conditional expression into text and returns it.\n+   *\n+   * @param expression a UtilityTraceConditionalExpression\n+   * @return string representing the expression\n+   */\n+  private String expressionToString(UtilityTraceConditionalExpression expression) {\n+\n+    StringBuilder stringBuilder = new StringBuilder();\n+\n+    // for category comparison expressions, add the category name and comparison operator\n+    if (expression instanceof UtilityCategoryComparison) {\n+      UtilityCategoryComparison categoryComparison = (UtilityCategoryComparison) expression;\n+      stringBuilder.append(\n+          String.format(\"'%1$s' %2$s\", categoryComparison.getCategory().getName(),\n+              categoryComparison.getComparisonOperator().name()));\n+    }\n+\n+    // for network attribute comparison expressions, add the network attribute name and comparison operator\n+    else if (expression instanceof UtilityNetworkAttributeComparison) {\n+      UtilityNetworkAttributeComparison attributeComparison = (UtilityNetworkAttributeComparison) expression;\n+      stringBuilder.append(\n+          String.format(\"'%1$s' %2$s\", attributeComparison.getNetworkAttribute().getName(),", "originalCommit": "9b8fa16950e67ffa489decf5fdeeb7685fd2ec65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4Njc0NA==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/439#discussion_r387886744", "bodyText": "Yep, that will look a bit cleaner. Thanks!", "author": "JonLavi", "createdAt": "2020-03-04T19:31:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY5NjY4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "1120e4f0ba6cd4fd4fe42b5ba7d7dd7828ac07ad", "chunk": "diff --git a/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java b/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java\nindex 141e4176..e4efd688 100644\n--- a/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java\n+++ b/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2019 Esri.\n+ * Copyright 2020 Esri.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY5ODQ5OQ==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/439#discussion_r387698499", "bodyText": "unused import", "author": "Rachael-E", "createdAt": "2020-03-04T14:25:06Z", "path": "network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/CodedValueListCell.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2019 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.esri.samples.configure_subnetwork_trace;\n+\n+import javafx.scene.control.ListCell;\n+\n+import com.esri.arcgisruntime.data.CodedValue;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkAttribute;", "originalCommit": "9b8fa16950e67ffa489decf5fdeeb7685fd2ec65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4NTM2Nw==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/439#discussion_r387885367", "bodyText": "Good find, thanks", "author": "JonLavi", "createdAt": "2020-03-04T19:29:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY5ODQ5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "1120e4f0ba6cd4fd4fe42b5ba7d7dd7828ac07ad", "chunk": "diff --git a/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/CodedValueListCell.java b/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/CodedValueListCell.java\nindex 7ca2d232..ed6f814b 100644\n--- a/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/CodedValueListCell.java\n+++ b/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/CodedValueListCell.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2019 Esri.\n+ * Copyright 2020 Esri.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY5OTUyNw==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/439#discussion_r387699527", "bodyText": "Is this description correct? it looks like the type the ListCall takes is CodedValue and not UtilityNetworkAttribute.", "author": "Rachael-E", "createdAt": "2020-03-04T14:26:32Z", "path": "network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/CodedValueListCell.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2019 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.esri.samples.configure_subnetwork_trace;\n+\n+import javafx.scene.control.ListCell;\n+\n+import com.esri.arcgisruntime.data.CodedValue;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkAttribute;\n+\n+/**\n+ * Shows the name of the UtilityNetworkAttribute in the attribute selection ComboBox.", "originalCommit": "9b8fa16950e67ffa489decf5fdeeb7685fd2ec65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4NzIyNg==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/439#discussion_r387887226", "bodyText": "Good spot, it was wrong! Updated to be CodedValue", "author": "JonLavi", "createdAt": "2020-03-04T19:32:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY5OTUyNw=="}], "type": "inlineReview", "revised_code": {"commit": "1120e4f0ba6cd4fd4fe42b5ba7d7dd7828ac07ad", "chunk": "diff --git a/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/CodedValueListCell.java b/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/CodedValueListCell.java\nindex 7ca2d232..ed6f814b 100644\n--- a/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/CodedValueListCell.java\n+++ b/network_analysis/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/CodedValueListCell.java\n\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2019 Esri.\n+ * Copyright 2020 Esri.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n"}}, {"oid": "1120e4f0ba6cd4fd4fe42b5ba7d7dd7828ac07ad", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/1120e4f0ba6cd4fd4fe42b5ba7d7dd7828ac07ad", "message": "Apply suggestions from code review\n\nCo-Authored-By: Rachael Ellen <36415565+Rachael-E@users.noreply.github.com>", "committedDate": "2020-03-04T15:47:03Z", "type": "commit"}, {"oid": "52cfd79e5274267a71178875c8c5896b013a6c4b", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/52cfd79e5274267a71178875c8c5896b013a6c4b", "message": "create 'utility network' category", "committedDate": "2020-03-04T18:42:14Z", "type": "commit"}, {"oid": "c21b359c96a0d6eb2d43187a50ab00e0b1c92285", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/c21b359c96a0d6eb2d43187a50ab00e0b1c92285", "message": "Merge branch 'add_utility_network_category' into configure-subnetwork-trace", "committedDate": "2020-03-04T19:25:08Z", "type": "commit"}, {"oid": "9d6bad3042643177fcbd58de6915939b4754e1c6", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/9d6bad3042643177fcbd58de6915939b4754e1c6", "message": "move to 'utility network' category", "committedDate": "2020-03-04T19:25:58Z", "type": "commit"}, {"oid": "7109a976da3dd88162c166aa151238c903af3cd1", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/7109a976da3dd88162c166aa151238c903af3cd1", "message": "Merge branch 'configure-subnetwork-trace' of github.com:Esri/arcgis-runtime-samples-java into configure-subnetwork-trace", "committedDate": "2020-03-04T19:26:05Z", "type": "commit"}, {"oid": "46cd9985edf4dd0c2f22d6e2e90f41ceacb0d9ac", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/46cd9985edf4dd0c2f22d6e2e90f41ceacb0d9ac", "message": "update with review comments", "committedDate": "2020-03-04T23:19:06Z", "type": "commit"}, {"oid": "9d72a0ae83db665fd95b39ea3d3e47bbe9d2d6dc", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/9d72a0ae83db665fd95b39ea3d3e47bbe9d2d6dc", "message": "refactoring", "committedDate": "2020-03-04T23:27:22Z", "type": "commit"}, {"oid": "d037a3b6cdab15a5e504cf256d12215755b874f8", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/d037a3b6cdab15a5e504cf256d12215755b874f8", "message": "Apply suggestions from code review\n\nCo-Authored-By: Rachael Ellen <36415565+Rachael-E@users.noreply.github.com>", "committedDate": "2020-03-11T18:13:31Z", "type": "commit"}, {"oid": "68ac778eca22540f89cc638f331a8dd0a78d1e4f", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/68ac778eca22540f89cc638f331a8dd0a78d1e4f", "message": "use single ticks for references to buttons", "committedDate": "2020-03-11T18:29:05Z", "type": "commit"}, {"oid": "3a60e0cadefc5c5edaf970632743602750895427", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/3a60e0cadefc5c5edaf970632743602750895427", "message": "update method naming and Javadoc", "committedDate": "2020-03-17T14:38:30Z", "type": "commit"}, {"oid": "04315e3c68a7bd1f4f15f48743085d79008d8ed7", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/04315e3c68a7bd1f4f15f48743085d79008d8ed7", "message": "param naming", "committedDate": "2020-03-17T15:44:40Z", "type": "commit"}, {"oid": "71d9fad9b727a6ff2e14b1aa9652245c900667f5", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/71d9fad9b727a6ff2e14b1aa9652245c900667f5", "message": "remove .stop() and .terminate()", "committedDate": "2020-03-17T15:50:39Z", "type": "commit"}, {"oid": "f5345979f165c2c736dcb853beba71215bcfe143", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/f5345979f165c2c736dcb853beba71215bcfe143", "message": "Update utility_network/configure-subnetwork-trace/README.md\n\nCo-Authored-By: Rachael Ellen <36415565+Rachael-E@users.noreply.github.com>", "committedDate": "2020-03-17T15:56:21Z", "type": "commit"}, {"oid": "bab6e17c81ab99c119ac161deef7486c90c5d1d9", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/bab6e17c81ab99c119ac161deef7486c90c5d1d9", "message": "remove .stop() and .terminate()", "committedDate": "2020-03-18T09:03:53Z", "type": "commit"}, {"oid": "a169181ed9cdbc6d95b40301e59bef44ed06d1e2", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/a169181ed9cdbc6d95b40301e59bef44ed06d1e2", "message": "Merge branch 'configure-subnetwork-trace' of github.com:Esri/arcgis-runtime-samples-java into configure-subnetwork-trace", "committedDate": "2020-03-18T09:04:17Z", "type": "commit"}, {"oid": "f8e22210794cd423318d062e289f95226f8231a6", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/f8e22210794cd423318d062e289f95226f8231a6", "message": "Merge remote-tracking branch 'origin/master' into configure-subnetwork-trace", "committedDate": "2020-05-05T09:15:43Z", "type": "commit"}, {"oid": "837293dd936f385a0f60b3f3765216f3f44747f1", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/837293dd936f385a0f60b3f3765216f3f44747f1", "message": "refactor to use CSS", "committedDate": "2020-05-05T09:39:57Z", "type": "commit"}, {"oid": "b38c96d356005347c15937f31d9e87b5fd3e95dc", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/b38c96d356005347c15937f31d9e87b5fd3e95dc", "message": "update gradle/javafx versions", "committedDate": "2020-07-15T12:26:21Z", "type": "commit"}, {"oid": "ee4b340102f0d9890f1e3343facc5bbd2809ff2b", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/ee4b340102f0d9890f1e3343facc5bbd2809ff2b", "message": "update runtime version", "committedDate": "2020-07-15T12:27:14Z", "type": "commit"}, {"oid": "6d7aa8856e8aa95dd8a0a373023d9df4385b4371", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/6d7aa8856e8aa95dd8a0a373023d9df4385b4371", "message": "Merge remote-tracking branch 'origin/master' into configure-subnetwork-trace", "committedDate": "2020-07-15T12:38:49Z", "type": "commit"}, {"oid": "c3f981b21b5d8ca35d82b93f9efcc25c36311f2d", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/c3f981b21b5d8ca35d82b93f9efcc25c36311f2d", "message": "update file names, folder structure, README.metadata.json", "committedDate": "2020-07-15T12:42:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA1NDM1OA==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/439#discussion_r495054358", "bodyText": "Unused import", "author": "alan-edi", "createdAt": "2020-09-25T15:10:46Z", "path": "utility_network/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java", "diffHunk": "@@ -0,0 +1,424 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.esri.samples.configure_subnetwork_trace;\n+\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.TextArea;\n+import javafx.scene.control.TextField;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.CodedValue;\n+import com.esri.arcgisruntime.data.CodedValueDomain;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.view.MapView;", "originalCommit": "c3f981b21b5d8ca35d82b93f9efcc25c36311f2d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0d35cd739a5ca7a70efec707f9dc7a8e4b5cd966", "chunk": "diff --git a/utility_network/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java b/utility_network/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java\nindex 6c30340f..ab7c5adb 100644\n--- a/utility_network/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java\n+++ b/utility_network/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java\n\n@@ -32,7 +32,6 @@ import com.esri.arcgisruntime.concurrent.ListenableFuture;\n import com.esri.arcgisruntime.data.CodedValue;\n import com.esri.arcgisruntime.data.CodedValueDomain;\n import com.esri.arcgisruntime.loadable.LoadStatus;\n-import com.esri.arcgisruntime.mapping.view.MapView;\n import com.esri.arcgisruntime.utilitynetworks.UtilityAssetGroup;\n import com.esri.arcgisruntime.utilitynetworks.UtilityAssetType;\n import com.esri.arcgisruntime.utilitynetworks.UtilityAttributeComparisonOperator;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIxODc2Nw==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/439#discussion_r500218767", "bodyText": "Extra comments about how we handle the Domain types might help. For example, here we could say something like:\n\nFor CodedValueDomains, add the name of a CodedValue that matches the network attribute's comparison value (if any)\n\nand below, at the start of the associated else block, something like:\n\nFor other types of domain, add the name of the \"other\" attribute in the comparison, or the value in the comparison if there's no \"other\" attribute", "author": "alan-edi", "createdAt": "2020-10-06T12:01:37Z", "path": "utility_network/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java", "diffHunk": "@@ -0,0 +1,424 @@\n+/*\n+ * Copyright 2020 Esri.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.esri.samples.configure_subnetwork_trace;\n+\n+import javafx.fxml.FXML;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.CheckBox;\n+import javafx.scene.control.ComboBox;\n+import javafx.scene.control.TextArea;\n+import javafx.scene.control.TextField;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import com.esri.arcgisruntime.concurrent.ListenableFuture;\n+import com.esri.arcgisruntime.data.CodedValue;\n+import com.esri.arcgisruntime.data.CodedValueDomain;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetGroup;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAssetType;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityAttributeComparisonOperator;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityCategoryComparison;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityDomainNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElement;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityElementTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetwork;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkAttribute;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkAttributeComparison;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityNetworkSource;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTerminal;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTier;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceAndCondition;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceConditionalExpression;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceConfiguration;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceOrCondition;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceParameters;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceResult;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraceType;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraversability;\n+import com.esri.arcgisruntime.utilitynetworks.UtilityTraversabilityScope;\n+\n+public class ConfigureSubnetworkTraceController {\n+\n+  @FXML private CheckBox includeBarriersCheckBox;\n+  @FXML private CheckBox includeContainersCheckBox;\n+  @FXML private ComboBox<CodedValue> comparisonValuesComboBox;\n+  @FXML private ComboBox<UtilityAttributeComparisonOperator> comparisonOperatorsComboBox;\n+  @FXML private ComboBox<UtilityNetworkAttribute> comparisonSourcesComboBox;\n+  @FXML private TextArea traceConditionsTextArea;\n+  @FXML private TextField comparisonValuesTextField;\n+\n+  private UtilityElement startingLocation;\n+  private UtilityNetwork utilityNetwork;\n+  private UtilityTerminal startingTerminal;\n+  private UtilityTraceConditionalExpression initialExpression;\n+  private UtilityTraceConfiguration initialUtilityTraceConfiguration;\n+  private UtilityTraceConfiguration utilityTraceConfiguration;\n+  private UtilityTraversability utilityTraversability;\n+\n+  @FXML\n+  public void initialize() {\n+\n+    try {\n+\n+      // add a listener to the comparison value text field, so that it only accepts numerical input separated by a decimal\n+      comparisonValuesTextField.textProperty().addListener((observable, oldValue, newValue) -> {\n+        if (!newValue.matches(\"\\\\d*([.]\\\\d*)?\")) {\n+          comparisonValuesTextField.setText(oldValue);\n+        }\n+      });\n+\n+      // load the utility network\n+      utilityNetwork = new UtilityNetwork(\n+          \"https://sampleserver7.arcgisonline.com/arcgis/rest/services/UtilityNetwork/NapervilleElectric\" +\n+              \"/FeatureServer\");\n+      utilityNetwork.loadAsync();\n+      utilityNetwork.addDoneLoadingListener(() -> {\n+        if (utilityNetwork.getLoadStatus() == LoadStatus.LOADED) {\n+\n+          // build the choice list for the network attribute comparison sources\n+          List<UtilityNetworkAttribute> comparisonSources = utilityNetwork.getDefinition()\n+              .getNetworkAttributes()\n+              .stream()\n+              .filter(value -> !value.isSystemDefined())\n+              .collect(Collectors.toList());\n+          comparisonSourcesComboBox.getItems().addAll(comparisonSources);\n+          comparisonSourcesComboBox.getSelectionModel().select(0);\n+          // display the name of the comparison sources in the ComboBox\n+          comparisonSourcesComboBox.setButtonCell(new ComparisonSourceListCell());\n+          comparisonSourcesComboBox.setCellFactory(c -> new ComparisonSourceListCell());\n+\n+          // build the choice list for the comparison operators\n+          comparisonOperatorsComboBox.getItems().addAll(UtilityAttributeComparisonOperator.values());\n+          comparisonOperatorsComboBox.getSelectionModel().select(0);\n+\n+          // display the name of the comparison values in the ComboBox\n+          comparisonValuesComboBox.setButtonCell(new CodedValueListCell());\n+          comparisonValuesComboBox.setCellFactory(c -> new CodedValueListCell());\n+\n+          // create a default starting location\n+          UtilityNetworkSource utilityNetworkSource =\n+              utilityNetwork.getDefinition().getNetworkSource(\"Electric Distribution Device\");\n+          UtilityAssetGroup utilityAssetGroup = utilityNetworkSource.getAssetGroup(\"Circuit Breaker\");\n+          UtilityAssetType utilityAssetType = utilityAssetGroup.getAssetType(\"Three Phase\");\n+          startingLocation =\n+              utilityNetwork.createElement(utilityAssetType, UUID.fromString(\"1CAF7740-0BF4-4113-8DB2-654E18800028\"));\n+\n+          // set the terminal for the starting location. (For our case, we use the 'Load' terminal.)\n+          List<UtilityTerminal> terminals = startingLocation.getAssetType().getTerminalConfiguration().getTerminals();\n+          terminals.forEach(terminal -> {\n+            if (terminal.getName().equals(\"Load\")) {\n+              startingTerminal = terminal;\n+            }\n+          });\n+          startingLocation.setTerminal(startingTerminal);\n+\n+          // get a default trace configuration from a tier to update the UI\n+          UtilityDomainNetwork utilityDomainNetwork =\n+              utilityNetwork.getDefinition().getDomainNetwork(\"ElectricDistribution\");\n+          UtilityTier utilityTier = utilityDomainNetwork.getTier(\"Medium Voltage Radial\");\n+          utilityTraceConfiguration = utilityTier.getTraceConfiguration();\n+\n+          // save the default trace configuration to restore when the application is reset\n+          initialUtilityTraceConfiguration = utilityTraceConfiguration;\n+\n+          // save the initial expression\n+          initialExpression =\n+              (UtilityTraceConditionalExpression) utilityTier.getTraceConfiguration().getTraversability().getBarriers();\n+\n+          // show the initial expression in the text area\n+          traceConditionsTextArea.setText(expressionToString(initialExpression));\n+\n+          // set the traversability scope\n+          utilityTraversability = utilityTraceConfiguration.getTraversability();\n+          utilityTraversability.setScope(UtilityTraversabilityScope.JUNCTIONS);\n+        }\n+      });\n+    } catch (Exception e) {\n+      new Alert(Alert.AlertType.ERROR, \"Error loading Utility Network.\").show();\n+    }\n+  }\n+\n+  /**\n+   * Uses the selected parameters to add a barrier expression to the utility trace configuration.\n+   */\n+  @FXML\n+  private void onAddConditionClick() {\n+    try {\n+      // get the selected utility network attribute and attribute comparison operator\n+      UtilityNetworkAttribute selectedAttribute = comparisonSourcesComboBox.getSelectionModel().getSelectedItem();\n+      UtilityAttributeComparisonOperator selectedOperator =\n+              comparisonOperatorsComboBox.getSelectionModel().getSelectedItem();\n+\n+      // check if a comparison value was specified, and capture it to use as the last parameter of the\n+      // UtilityNetworkAttributeComparison\n+      // NOTE: since the type of the comparison value is dictated by the selected comparison attribute, we must store\n+      // it in a generic Object variable and convert it appropriately\n+      Object otherValue;\n+      // if a comparison value is selected from the ComboBox, use it as the third parameter\n+      if (selectedAttribute.getDomain() instanceof CodedValueDomain &&\n+              comparisonValuesComboBox.getSelectionModel().getSelectedItem() != null) {\n+        // convert the selected comparison value to the data type defined by the selected attribute\n+        otherValue = convertObjectDataType(comparisonValuesComboBox.getSelectionModel().getSelectedItem().getCode(),\n+                selectedAttribute.getDataType());\n+      } else if (!comparisonValuesTextField.getText().equals(\"\")) {\n+        // otherwise, a comparison value will be specified as text input to be used as the third parameter\n+        otherValue = convertObjectDataType(comparisonValuesTextField.getText(), selectedAttribute.getDataType());\n+      } else {\n+        new Alert(Alert.AlertType.WARNING, \"No valid comparison value entered\").show();\n+        return;\n+      }\n+\n+      // create the utility network attribute comparison expression using the specified parameters\n+      // NOTE: You may also create a UtilityNetworkAttributeComparison with another NetworkAttribute.\n+      UtilityTraceConditionalExpression expression =\n+              new UtilityNetworkAttributeComparison(selectedAttribute, selectedOperator, otherValue);\n+\n+      // check if an expression is already defined for the traversability barriers\n+      if (utilityTraversability.getBarriers() instanceof UtilityTraceConditionalExpression) {\n+        UtilityTraceConditionalExpression otherExpression =\n+                (UtilityTraceConditionalExpression) utilityTraversability.getBarriers();\n+        // use the existing expression to create an `or` expression with the user-defined expression\n+        expression = new UtilityTraceOrCondition(otherExpression, expression);\n+      }\n+\n+      // set the new expression to the traversability's barriers\n+      utilityTraversability.setBarriers(expression);\n+\n+      // show the expression in the text area\n+      traceConditionsTextArea.setText(expressionToString(expression));\n+\n+    } catch (Exception e) {\n+      new Alert(Alert.AlertType.ERROR, \"Error adding comparison value.\").show();\n+    }\n+  }\n+\n+  /**\n+   * Parses a utility trace conditional expression into text and returns it.\n+   *\n+   * @param expression a UtilityTraceConditionalExpression\n+   * @return string representing the expression\n+   */\n+  private String expressionToString(UtilityTraceConditionalExpression expression) {\n+\n+    StringBuilder stringBuilder = new StringBuilder();\n+\n+    // for category comparison expressions, add the category name and comparison operator\n+    if (expression instanceof UtilityCategoryComparison) {\n+      UtilityCategoryComparison categoryComparison = (UtilityCategoryComparison) expression;\n+      stringBuilder.append(\n+          String.format(\"'%1$s' %2$s\", categoryComparison.getCategory().getName(),\n+              categoryComparison.getComparisonOperator().name()));\n+    }\n+\n+    // for network attribute comparison expressions, add the network attribute name and comparison operator\n+    else if (expression instanceof UtilityNetworkAttributeComparison) {\n+      UtilityNetworkAttributeComparison attributeComparison = (UtilityNetworkAttributeComparison) expression;\n+\n+      UtilityNetworkAttribute utilityNetworkAttribute = attributeComparison.getNetworkAttribute();\n+\n+      stringBuilder.append(\n+          String.format(\"'%1$s' %2$s\", utilityNetworkAttribute.getName(),\n+              attributeComparison.getComparisonOperator().name()));\n+\n+      if (utilityNetworkAttribute.getDomain() instanceof CodedValueDomain) {\n+        CodedValueDomain codedValueDomain = (CodedValueDomain) utilityNetworkAttribute.getDomain();", "originalCommit": "c3f981b21b5d8ca35d82b93f9efcc25c36311f2d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0d35cd739a5ca7a70efec707f9dc7a8e4b5cd966", "chunk": "diff --git a/utility_network/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java b/utility_network/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java\nindex 6c30340f..ab7c5adb 100644\n--- a/utility_network/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java\n+++ b/utility_network/configure-subnetwork-trace/src/main/java/com/esri/samples/configure_subnetwork_trace/ConfigureSubnetworkTraceController.java\n\n@@ -32,7 +32,6 @@ import com.esri.arcgisruntime.concurrent.ListenableFuture;\n import com.esri.arcgisruntime.data.CodedValue;\n import com.esri.arcgisruntime.data.CodedValueDomain;\n import com.esri.arcgisruntime.loadable.LoadStatus;\n-import com.esri.arcgisruntime.mapping.view.MapView;\n import com.esri.arcgisruntime.utilitynetworks.UtilityAssetGroup;\n import com.esri.arcgisruntime.utilitynetworks.UtilityAssetType;\n import com.esri.arcgisruntime.utilitynetworks.UtilityAttributeComparisonOperator;\n"}}, {"oid": "0d35cd739a5ca7a70efec707f9dc7a8e4b5cd966", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/0d35cd739a5ca7a70efec707f9dc7a8e4b5cd966", "message": "update with review comments", "committedDate": "2020-10-07T09:43:43Z", "type": "commit"}]}