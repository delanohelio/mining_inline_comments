{"pr_number": 503, "pr_title": "Export (Vector) Tiles - UI and readability improvements", "pr_createdAt": "2020-04-28T16:30:40Z", "pr_url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/503", "timeline": [{"oid": "601bb55119f7af2ed2b3bd50b27f4cc11552d380", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/601bb55119f7af2ed2b3bd50b27f4cc11552d380", "message": "disable button while job running, add whitespace and comments, move UI", "committedDate": "2020-04-28T16:28:49Z", "type": "commit"}, {"oid": "c4ac75749d4528f20fdaf1f99e07c20f25d3ef6d", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/c4ac75749d4528f20fdaf1f99e07c20f25d3ef6d", "message": "Update ExportTilesSample.java", "committedDate": "2020-04-28T16:38:44Z", "type": "commit"}, {"oid": "5af9c0c7f4e0c9fd63726ab86fa32b4758947dc5", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/5af9c0c7f4e0c9fd63726ab86fa32b4758947dc5", "message": "Update ExportTilesSample.java", "committedDate": "2020-04-28T16:39:42Z", "type": "commit"}, {"oid": "0a68b12ea22e6419ba24556b544ac61e8a34e5cc", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/0a68b12ea22e6419ba24556b544ac61e8a34e5cc", "message": "whitespacea, comments, UI improvements", "committedDate": "2020-04-28T16:45:48Z", "type": "commit"}, {"oid": "4471659ee7947246f5d6f360bfb34b6498b71c6c", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/4471659ee7947246f5d6f360bfb34b6498b71c6c", "message": "Merge branch 'export_vector_tiles_update' into export_tiles_dont_allow_concurrent_jobs", "committedDate": "2020-04-28T16:46:35Z", "type": "commit"}, {"oid": "e6915d8b1ced7d47763ad9f17d09a18195b8e45a", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/e6915d8b1ced7d47763ad9f17d09a18195b8e45a", "message": "comment formatting", "committedDate": "2020-04-28T16:47:10Z", "type": "commit"}, {"oid": "3398c8a751200379119bf6526a4c6d0376c35b61", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/3398c8a751200379119bf6526a4c6d0376c35b61", "message": "Merge branch 'export_tiles_dont_allow_concurrent_jobs' of github.com:Esri/arcgis-runtime-samples-java into export_tiles_dont_allow_concurrent_jobs", "committedDate": "2020-04-28T16:48:54Z", "type": "commit"}, {"oid": "5f89652ece8df4dfd143051ce438596c2899fea4", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/5f89652ece8df4dfd143051ce438596c2899fea4", "message": "Merge branch 'master' into export_tiles_dont_allow_concurrent_jobs", "committedDate": "2020-05-18T05:27:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM3NjgyNQ==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/503#discussion_r426376825", "bodyText": "looks like an extra indent here", "author": "tschie", "createdAt": "2020-05-18T05:28:56Z", "path": "tiled_layers/export-tiles/src/main/java/com/esri/samples/export_tiles/ExportTilesSample.java", "diffHunk": "@@ -114,62 +115,87 @@ public void start(Stage stage) {\n \n       // when the button is clicked, export the tiles to a temporary file\n       exportTilesButton.setOnAction(e -> {\n-        try {\n-          File tempFile = File.createTempFile(\"tiles\", \".tpk\");\n-          progressBar.setVisible(true);\n-          double minScale = mapView.getMapScale();\n-          double maxScale = tiledLayer.getMaxScale();\n-          // minScale must always be larger than maxScale\n-          if (minScale <= maxScale) {\n-            minScale = maxScale + 1;\n-          }\n-          ExportTileCacheTask task = new ExportTileCacheTask(tiledLayer.getUri());\n-          ListenableFuture<ExportTileCacheParameters> createParams = task.createDefaultExportTileCacheParametersAsync\n-              (downloadArea.getGeometry(), minScale, maxScale);\n-          createParams.addDoneListener(() -> {\n-            try {\n-              ExportTileCacheParameters params = createParams.get();\n-              ExportTileCacheJob job = task.exportTileCache(params, tempFile.getAbsolutePath());\n-              job.start();\n-              job.addProgressChangedListener(() -> progressBar.setProgress(job.getProgress() / 100.0));\n-              job.addJobDoneListener(() -> {\n-                if (job.getStatus() == Job.Status.SUCCEEDED) {\n-                  //show preview of exported tiles in alert\n-                  TileCache tileCache = job.getResult();\n-                  Alert preview = new Alert(Alert.AlertType.INFORMATION);\n-                  preview.initOwner(mapView.getScene().getWindow());\n-                  preview.setTitle(\"Preview\");\n-                  preview.setHeaderText(\"Exported to \" + tileCache.getPath());\n-                  MapView mapPreview = new MapView();\n-                  mapPreview.setMinSize(400, 400);\n-                  ArcGISTiledLayer tiledLayerPreview = new ArcGISTiledLayer(tileCache);\n-                  ArcGISMap previewMap = new ArcGISMap(new Basemap(tiledLayerPreview));\n-                  mapPreview.setMap(previewMap);\n-                  preview.getDialogPane().setContent(mapPreview);\n-                  preview.show();\n-                } else {\n-                  Alert alert = new Alert(Alert.AlertType.ERROR, job.getError().getAdditionalMessage());\n-                  alert.show();\n-                }\n-                Platform.runLater(() -> progressBar.setVisible(false));\n-              });\n-            } catch (InterruptedException | ExecutionException ex) {\n-              Alert alert = new Alert(Alert.AlertType.ERROR, ex.getMessage());\n-              alert.show();\n-              progressBar.setVisible(false);\n-              progressBar.setProgress(0);\n+          try {", "originalCommit": "5f89652ece8df4dfd143051ce438596c2899fea4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ1ODg0NA==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/503#discussion_r426458844", "bodyText": "Thanks, good spot!", "author": "JonLavi", "createdAt": "2020-05-18T08:37:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM3NjgyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "986bad4671ddd7e820b85852abde93f67ccc3380", "chunk": "diff --git a/tiled_layers/export-tiles/src/main/java/com/esri/samples/export_tiles/ExportTilesSample.java b/tiled_layers/export-tiles/src/main/java/com/esri/samples/export_tiles/ExportTilesSample.java\nindex ec7c4e30..b4395aee 100644\n--- a/tiled_layers/export-tiles/src/main/java/com/esri/samples/export_tiles/ExportTilesSample.java\n+++ b/tiled_layers/export-tiles/src/main/java/com/esri/samples/export_tiles/ExportTilesSample.java\n\n@@ -115,78 +115,78 @@ public class ExportTilesSample extends Application {\n \n       // when the button is clicked, export the tiles to a temporary file\n       exportTilesButton.setOnAction(e -> {\n-          try {\n-            // disable the button and show the progress bar\n-            exportTilesButton.setDisable(true);\n-            progressBar.setVisible(true);\n-\n-            // create a file and define the scale for the job\n-            File tempFile = File.createTempFile(\"tiles\", \".tpk\");\n-            double minScale = mapView.getMapScale();\n-            double maxScale = tiledLayer.getMaxScale();\n-\n-            // minScale must always be larger than maxScale\n-            if (minScale <= maxScale) {\n-              minScale = maxScale + 1;\n-            }\n+        try {\n+          // disable the button and show the progress bar\n+          exportTilesButton.setDisable(true);\n+          progressBar.setVisible(true);\n+\n+          // create a file and define the scale for the job\n+          File tempFile = File.createTempFile(\"tiles\", \".tpk\");\n+          double minScale = mapView.getMapScale();\n+          double maxScale = tiledLayer.getMaxScale();\n+\n+          // minScale must always be larger than maxScale\n+          if (minScale <= maxScale) {\n+            minScale = maxScale + 1;\n+          }\n \n-            // create a task\n-            ExportTileCacheTask exportTileCacheTask = new ExportTileCacheTask(tiledLayer.getUri());\n-\n-            // create parameters for the export tiles job\n-            ListenableFuture<ExportTileCacheParameters> exportTileCacheParametersListenableFuture =\n-                    exportTileCacheTask.createDefaultExportTileCacheParametersAsync(downloadArea.getGeometry(), minScale, maxScale);\n-\n-            exportTileCacheParametersListenableFuture.addDoneListener(() -> {\n-              try {\n-                ExportTileCacheParameters exportTileCacheParameters = exportTileCacheParametersListenableFuture.get();\n-\n-                // create a job with the parameters\n-                ExportTileCacheJob exportTileCacheJob = exportTileCacheTask.exportTileCache(exportTileCacheParameters, tempFile.getAbsolutePath());\n-\n-                // start the job and wait for it to finish\n-                exportTileCacheJob.start();\n-                exportTileCacheJob.addProgressChangedListener(() -> progressBar.setProgress(exportTileCacheJob.getProgress() / 100.0));\n-\n-                exportTileCacheJob.addJobDoneListener(() -> {\n-                  if (exportTileCacheJob.getStatus() == Job.Status.SUCCEEDED) {\n-\n-                    //show preview of exported tiles in alert\n-                    TileCache tileCache = exportTileCacheJob.getResult();\n-                    Alert preview = new Alert(Alert.AlertType.INFORMATION);\n-                    preview.initOwner(mapView.getScene().getWindow());\n-                    preview.setTitle(\"Preview\");\n-                    preview.setHeaderText(\"Exported to \" + tileCache.getPath());\n-                    MapView mapPreview = new MapView();\n-                    mapPreview.setMinSize(400, 400);\n-                    ArcGISTiledLayer tiledLayerPreview = new ArcGISTiledLayer(tileCache);\n-                    ArcGISMap previewMap = new ArcGISMap(new Basemap(tiledLayerPreview));\n-                    mapPreview.setMap(previewMap);\n-                    preview.getDialogPane().setContent(mapPreview);\n-                    preview.show();\n-\n-                  } else {\n-                    Alert alert = new Alert(Alert.AlertType.ERROR, exportTileCacheJob.getError().getAdditionalMessage());\n-                    alert.show();\n-                  }\n-\n-                  Platform.runLater(() -> {\n-                    progressBar.setVisible(false);\n-                    exportTilesButton.setDisable(false);\n-                  });\n+          // create a task\n+          ExportTileCacheTask exportTileCacheTask = new ExportTileCacheTask(tiledLayer.getUri());\n+\n+          // create parameters for the export tiles job\n+          ListenableFuture<ExportTileCacheParameters> exportTileCacheParametersListenableFuture =\n+                  exportTileCacheTask.createDefaultExportTileCacheParametersAsync(downloadArea.getGeometry(), minScale, maxScale);\n+\n+          exportTileCacheParametersListenableFuture.addDoneListener(() -> {\n+            try {\n+              ExportTileCacheParameters exportTileCacheParameters = exportTileCacheParametersListenableFuture.get();\n+\n+              // create a job with the parameters\n+              ExportTileCacheJob exportTileCacheJob = exportTileCacheTask.exportTileCache(exportTileCacheParameters, tempFile.getAbsolutePath());\n+\n+              // start the job and wait for it to finish\n+              exportTileCacheJob.start();\n+              exportTileCacheJob.addProgressChangedListener(() -> progressBar.setProgress(exportTileCacheJob.getProgress() / 100.0));\n+\n+              exportTileCacheJob.addJobDoneListener(() -> {\n+                if (exportTileCacheJob.getStatus() == Job.Status.SUCCEEDED) {\n+\n+                  //show preview of exported tiles in alert\n+                  TileCache tileCache = exportTileCacheJob.getResult();\n+                  Alert preview = new Alert(Alert.AlertType.INFORMATION);\n+                  preview.initOwner(mapView.getScene().getWindow());\n+                  preview.setTitle(\"Preview\");\n+                  preview.setHeaderText(\"Exported to \" + tileCache.getPath());\n+                  MapView mapPreview = new MapView();\n+                  mapPreview.setMinSize(400, 400);\n+                  ArcGISTiledLayer tiledLayerPreview = new ArcGISTiledLayer(tileCache);\n+                  ArcGISMap previewMap = new ArcGISMap(new Basemap(tiledLayerPreview));\n+                  mapPreview.setMap(previewMap);\n+                  preview.getDialogPane().setContent(mapPreview);\n+                  preview.show();\n+\n+                } else {\n+                  Alert alert = new Alert(Alert.AlertType.ERROR, exportTileCacheJob.getError().getAdditionalMessage());\n+                  alert.show();\n+                }\n+\n+                Platform.runLater(() -> {\n+                  progressBar.setVisible(false);\n+                  exportTilesButton.setDisable(false);\n                 });\n+              });\n \n-              } catch (InterruptedException | ExecutionException ex) {\n-                Alert alert = new Alert(Alert.AlertType.ERROR, ex.getMessage());\n-                alert.show();\n-                progressBar.setVisible(false);\n-                progressBar.setProgress(0);\n-              }\n-            });\n-          } catch (IOException ex) {\n-            Alert alert = new Alert(Alert.AlertType.ERROR, \"Failed to create temporary file\");\n-            alert.show();\n-          }\n+            } catch (InterruptedException | ExecutionException ex) {\n+              Alert alert = new Alert(Alert.AlertType.ERROR, ex.getMessage());\n+              alert.show();\n+              progressBar.setVisible(false);\n+              progressBar.setProgress(0);\n+            }\n+          });\n+        } catch (IOException ex) {\n+          Alert alert = new Alert(Alert.AlertType.ERROR, \"Failed to create temporary file\");\n+          alert.show();\n+        }\n       });\n \n       // add the map view, button, and progress bar to stack pane\n"}}, {"oid": "986bad4671ddd7e820b85852abde93f67ccc3380", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/986bad4671ddd7e820b85852abde93f67ccc3380", "message": "indentation", "committedDate": "2020-05-18T08:37:01Z", "type": "commit"}]}