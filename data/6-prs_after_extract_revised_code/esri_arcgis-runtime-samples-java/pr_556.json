{"pr_number": 556, "pr_title": "New sample: Show location history", "pr_createdAt": "2020-09-17T09:57:51Z", "pr_url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556", "timeline": [{"oid": "5279252752c4e602b9cc2188c63a52209f913c56", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/5279252752c4e602b9cc2188c63a52209f913c56", "message": "Set up sample", "committedDate": "2020-09-11T17:38:46Z", "type": "commit"}, {"oid": "b0fcdc64daf3fce5f542c4e1f482b25fff921a20", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/b0fcdc64daf3fce5f542c4e1f482b25fff921a20", "message": "Update readme and add polyline data", "committedDate": "2020-09-15T16:09:52Z", "type": "commit"}, {"oid": "501f19851e123fc9e644155560bf1a43cfedac61", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/501f19851e123fc9e644155560bf1a43cfedac61", "message": "Create graphic overlays for lines and points", "committedDate": "2020-09-15T16:12:39Z", "type": "commit"}, {"oid": "273b9d345171a01c20ecee94606a679bcf61ef5c", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/273b9d345171a01c20ecee94606a679bcf61ef5c", "message": "Add location tracking", "committedDate": "2020-09-16T11:43:23Z", "type": "commit"}, {"oid": "5bdcb73766d5283aa6a158496cee2cb0b15b3563", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/5bdcb73766d5283aa6a158496cee2cb0b15b3563", "message": "Update README.metadata.json", "committedDate": "2020-09-16T11:45:11Z", "type": "commit"}, {"oid": "2096cf3a0831e432cd4ada9a74e89b4b703bc8a6", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/2096cf3a0831e432cd4ada9a74e89b4b703bc8a6", "message": "Add screenshot", "committedDate": "2020-09-16T12:42:54Z", "type": "commit"}, {"oid": "03a8ded6d4cd93baa39688c98744e8cb8cf57180", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/03a8ded6d4cd93baa39688c98744e8cb8cf57180", "message": "Update comments", "committedDate": "2020-09-17T08:54:57Z", "type": "commit"}, {"oid": "63510b43e4bfc8ba6abd87d1bb0803708627e0d0", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/63510b43e4bfc8ba6abd87d1bb0803708627e0d0", "message": "Update ShowLocationHistory.png", "committedDate": "2020-09-17T09:24:15Z", "type": "commit"}, {"oid": "bea7d7dbab5246a32f7ddb90b58b6fa77592b451", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/bea7d7dbab5246a32f7ddb90b58b6fa77592b451", "message": "Add newline to json", "committedDate": "2020-09-17T09:57:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE1MzIyOA==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r490153228", "bodyText": "instead of referring to the URL, you can simply do:`\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  ArcGISMap map = new ArcGISMap(\"https://www.arcgis.com/home/item.html?id=1970c1995b8f44749f4b9b6e81b5ba45\");\n          \n          \n            \n                  ArcGISMap map = new ArcGISMap(Basemap.createDarkGrayCanvasVector());\n          \n      \n    \n    \n  \n\nStandard basemaps all have a method on the Basemap class to create them:\nhttps://developers.arcgis.com/java/latest/api-reference/reference/com/esri/arcgisruntime/mapping/Basemap.html", "author": "JonLavi", "createdAt": "2020-09-17T10:57:20Z", "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReference;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Show Location History Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create a map with a dark gray canvas basemap\n+      ArcGISMap map = new ArcGISMap(\"https://www.arcgis.com/home/item.html?id=1970c1995b8f44749f4b9b6e81b5ba45\");", "originalCommit": "bea7d7dbab5246a32f7ddb90b58b6fa77592b451", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d73addf25ddb5a51998b31755ae4e64f6a647d4", "chunk": "diff --git a/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java b/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\nindex 21c5b3cf..6fb2c1ea 100644\n--- a/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\n+++ b/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\n\n@@ -17,6 +17,7 @@\n \n package com.esri.samples.show_location_history;\n \n+import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n import java.util.Calendar;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE1NzAzNA==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r490157034", "bodyText": "I'd suggest perhaps moving this beneath the creation of the GraphicsOverlays and Polyline Builder. That way we have all the parts up and ready before want to make use of them inside the map.\nThen, perhaps we should move the parts that set up the SimulatedLocationDataSource and configure the LocationDisplay (lines 122-154) inside this load-done check. After all, there's not much of a reason to start the LocationDisplay if our map is not working.", "author": "JonLavi", "createdAt": "2020-09-17T11:04:44Z", "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReference;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Show Location History Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create a map with a dark gray canvas basemap\n+      ArcGISMap map = new ArcGISMap(\"https://www.arcgis.com/home/item.html?id=1970c1995b8f44749f4b9b6e81b5ba45\");\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set the map views's viewpoint centered on Los Angeles, California and scaled\n+      Point center = new Point(-13185535.98, 4037766.28, SpatialReference.create(3857));\n+      mapView.setViewpoint(new Viewpoint(center, 7000));\n+\n+      // create a button that toggles the location tracking\n+      Button trackingButton = new Button(\"Start tracking\");\n+      trackingButton.setDisable(true);\n+\n+      // enable the button interactions when the map is loaded\n+      map.addDoneLoadingListener(() -> {\n+        if (map.getLoadStatus() == LoadStatus.LOADED) {\n+          trackingButton.setDisable(false);\n+        } else {\n+          new Alert(Alert.AlertType.ERROR, \"Map failed to load\").show();\n+        }\n+      });", "originalCommit": "bea7d7dbab5246a32f7ddb90b58b6fa77592b451", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d73addf25ddb5a51998b31755ae4e64f6a647d4", "chunk": "diff --git a/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java b/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\nindex 21c5b3cf..6fb2c1ea 100644\n--- a/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\n+++ b/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\n\n@@ -17,6 +17,7 @@\n \n package com.esri.samples.show_location_history;\n \n+import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n import java.util.Calendar;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE1OTMwOQ==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r490159309", "bodyText": "I find the interaction with panning and switching the auto-pan on and off is not that intuitive? It doesn't help that the auto-pan functionality is not continuous, but only happens when the dot is approaching the edge of the screen. Not sure if this can be adjusted somehow.\nPerhaps this sample could benefit from a tick-box to enable/disable auto-pan? When the tick-box would be checked, the manual panning with the mouse should be disabled (or, panning with the mouse would de-activate that tickbox). What do you think?", "author": "JonLavi", "createdAt": "2020-09-17T11:09:28Z", "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReference;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Show Location History Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create a map with a dark gray canvas basemap\n+      ArcGISMap map = new ArcGISMap(\"https://www.arcgis.com/home/item.html?id=1970c1995b8f44749f4b9b6e81b5ba45\");\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set the map views's viewpoint centered on Los Angeles, California and scaled\n+      Point center = new Point(-13185535.98, 4037766.28, SpatialReference.create(3857));\n+      mapView.setViewpoint(new Viewpoint(center, 7000));\n+\n+      // create a button that toggles the location tracking\n+      Button trackingButton = new Button(\"Start tracking\");\n+      trackingButton.setDisable(true);\n+\n+      // enable the button interactions when the map is loaded\n+      map.addDoneLoadingListener(() -> {\n+        if (map.getLoadStatus() == LoadStatus.LOADED) {\n+          trackingButton.setDisable(false);\n+        } else {\n+          new Alert(Alert.AlertType.ERROR, \"Map failed to load\").show();\n+        }\n+      });\n+\n+      // create a graphics overlay for the points and use a red circle for the symbols\n+      GraphicsOverlay locationHistoryOverlay = new GraphicsOverlay();\n+      SimpleMarkerSymbol locationSymbol = new SimpleMarkerSymbol(\n+        SimpleMarkerSymbol.Style.CIRCLE, 0xFFFF0000, 10f);\n+      SimpleRenderer locationHistoryRenderer = new SimpleRenderer(locationSymbol);\n+      locationHistoryOverlay.setRenderer(locationHistoryRenderer);\n+\n+      // create a graphics overlay for the lines connecting the points and use a green line for the symbol\n+      GraphicsOverlay locationHistoryLineOverlay = new GraphicsOverlay();\n+      SimpleLineSymbol locationLineSymbol = new SimpleLineSymbol(\n+        SimpleLineSymbol.Style.SOLID, 0xFF00FF00, 2.0f);\n+      SimpleRenderer locationHistoryLineRenderer = new SimpleRenderer(locationLineSymbol);\n+      locationHistoryLineOverlay.setRenderer(locationHistoryLineRenderer);\n+\n+      // add the graphics overlays to the map view\n+      mapView.getGraphicsOverlays().addAll(Arrays.asList(locationHistoryOverlay, locationHistoryLineOverlay));\n+\n+      // create a polyline builder to connect the location points\n+      PolylineBuilder polylineBuilder = new PolylineBuilder(SpatialReference.create(3857));\n+      // access the json of the location points\n+      String polylineData = IOUtils.toString(getClass().getResourceAsStream(\"/show_location_history/polyline_data.json\"),\n+        StandardCharsets.UTF_8);\n+      // create a polyline from the location points\n+      Polyline routePolyline = (Polyline) Polyline.fromJson(polylineData,\n+        SpatialReference.create(3857));\n+\n+      // create a simulated location data source\n+      SimulatedLocationDataSource simulatedLocationDataSource = new SimulatedLocationDataSource();\n+      // set the location of the simulated location data source with simulation parameters to set a consistent velocity\n+      simulatedLocationDataSource.setLocations(\n+        routePolyline, new SimulationParameters(Calendar.getInstance(), 30.0, 0.0, 0.0));\n+\n+      // start the simulated location data source\n+      simulatedLocationDataSource.startAsync();\n+      simulatedLocationDataSource.addLocationChangedListener(locationChangedEvent -> {\n+        // if location tracking is turned off, do not add to the polyline\n+        if (!isTrackingEnabled) {\n+          return;\n+        }\n+        // get the position as a point from locationChangedEvent\n+        Point position = locationChangedEvent.getLocation().getPosition();\n+\n+        // add the new point to the polyline\n+        polylineBuilder.addPoint(position);\n+\n+        // add the new point to the graphics overlay\n+        locationHistoryOverlay.getGraphics().add(new Graphic(position));\n+\n+        // reset the old polyline connecting the points\n+        locationHistoryLineOverlay.getGraphics().clear();\n+\n+        // add the updated polyline to the graphics overlay\n+        locationHistoryLineOverlay.getGraphics().add(new Graphic(polylineBuilder.toGeometry()));\n+      });\n+\n+      // configure the map view's location display to follow the simulated location data source\n+      mapView.getLocationDisplay().setLocationDataSource(simulatedLocationDataSource);\n+      mapView.getLocationDisplay().setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+      mapView.getLocationDisplay().setInitialZoomScale(7000);\n+\n+      trackingButton.setOnAction(event -> {\n+        // if the user has panned away from the location display, turn it on again\n+        if (mapView.getLocationDisplay().getAutoPanMode() == LocationDisplay.AutoPanMode.OFF) {\n+          mapView.getLocationDisplay().setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+        }", "originalCommit": "bea7d7dbab5246a32f7ddb90b58b6fa77592b451", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQwMjM2OQ==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r490402369", "bodyText": "I agree, I think a checkbox toggling the auto-pan would be more intuitive.\nHowever, when the auto-pan is off the issue with the extra polylines still occurs when the user pans away.", "author": "sclaridge", "createdAt": "2020-09-17T16:35:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE1OTMwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc5NjAwNA==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r490796004", "bodyText": "I'll have a closer look at the code. I didn't notice any connection between the drawing and listening to panning on the map, but it's possible that one thing is triggering another?", "author": "JonLavi", "createdAt": "2020-09-18T08:44:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE1OTMwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgxMzkxNA==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r490813914", "bodyText": "It happens when position = mapView.getLocationDisplay().getMapLocation() so that the LocationDisplay symbol moves ahead of the tracking. When the position is set this way and auto-pan is disabled, if the user pans away then back to the tracking, extra graphics are drawn.", "author": "sclaridge", "createdAt": "2020-09-18T09:15:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE1OTMwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk4NDcwNA==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r490984704", "bodyText": "So I think this fixes the issue with the extra polylines, and also sets the LocationDisplay marker ahead of the tracking graphics:\n// get the position as a point from the simulated location data source\nInteger nextPoint = simulatedLocationDataSource.getCurrentLocationIndex()-1;\nLocationDataSource.Location nextLocation = simulatedLocationDataSource.getLocations().get(nextPoint);\nPoint position = new Point(nextLocation.getPosition().getX(),nextLocation.getPosition().getY());", "author": "sclaridge", "createdAt": "2020-09-18T14:22:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE1OTMwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkxMDYwNA==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r491910604", "bodyText": "I was thinking of something similar, but that feels a little counterintuitive from a user perspective.\nI'd check whether any of the other platforms are doing something similar. If they aren't specifically working around this, then we may have a small bug in the LocationDisplay API on Java.", "author": "JonLavi", "createdAt": "2020-09-21T09:40:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE1OTMwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "8d73addf25ddb5a51998b31755ae4e64f6a647d4", "chunk": "diff --git a/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java b/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\nindex 21c5b3cf..6fb2c1ea 100644\n--- a/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\n+++ b/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\n\n@@ -17,6 +17,7 @@\n \n package com.esri.samples.show_location_history;\n \n+import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n import java.util.Calendar;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE2MDEyOQ==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r490160129", "bodyText": "Technically we'll be filling the gap of the polyline when we start tracking again. So perhaps this comment should say 'do not draw points or extend the polyline'? Something along those lines", "author": "JonLavi", "createdAt": "2020-09-17T11:11:14Z", "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReference;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Show Location History Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create a map with a dark gray canvas basemap\n+      ArcGISMap map = new ArcGISMap(\"https://www.arcgis.com/home/item.html?id=1970c1995b8f44749f4b9b6e81b5ba45\");\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set the map views's viewpoint centered on Los Angeles, California and scaled\n+      Point center = new Point(-13185535.98, 4037766.28, SpatialReference.create(3857));\n+      mapView.setViewpoint(new Viewpoint(center, 7000));\n+\n+      // create a button that toggles the location tracking\n+      Button trackingButton = new Button(\"Start tracking\");\n+      trackingButton.setDisable(true);\n+\n+      // enable the button interactions when the map is loaded\n+      map.addDoneLoadingListener(() -> {\n+        if (map.getLoadStatus() == LoadStatus.LOADED) {\n+          trackingButton.setDisable(false);\n+        } else {\n+          new Alert(Alert.AlertType.ERROR, \"Map failed to load\").show();\n+        }\n+      });\n+\n+      // create a graphics overlay for the points and use a red circle for the symbols\n+      GraphicsOverlay locationHistoryOverlay = new GraphicsOverlay();\n+      SimpleMarkerSymbol locationSymbol = new SimpleMarkerSymbol(\n+        SimpleMarkerSymbol.Style.CIRCLE, 0xFFFF0000, 10f);\n+      SimpleRenderer locationHistoryRenderer = new SimpleRenderer(locationSymbol);\n+      locationHistoryOverlay.setRenderer(locationHistoryRenderer);\n+\n+      // create a graphics overlay for the lines connecting the points and use a green line for the symbol\n+      GraphicsOverlay locationHistoryLineOverlay = new GraphicsOverlay();\n+      SimpleLineSymbol locationLineSymbol = new SimpleLineSymbol(\n+        SimpleLineSymbol.Style.SOLID, 0xFF00FF00, 2.0f);\n+      SimpleRenderer locationHistoryLineRenderer = new SimpleRenderer(locationLineSymbol);\n+      locationHistoryLineOverlay.setRenderer(locationHistoryLineRenderer);\n+\n+      // add the graphics overlays to the map view\n+      mapView.getGraphicsOverlays().addAll(Arrays.asList(locationHistoryOverlay, locationHistoryLineOverlay));\n+\n+      // create a polyline builder to connect the location points\n+      PolylineBuilder polylineBuilder = new PolylineBuilder(SpatialReference.create(3857));\n+      // access the json of the location points\n+      String polylineData = IOUtils.toString(getClass().getResourceAsStream(\"/show_location_history/polyline_data.json\"),\n+        StandardCharsets.UTF_8);\n+      // create a polyline from the location points\n+      Polyline routePolyline = (Polyline) Polyline.fromJson(polylineData,\n+        SpatialReference.create(3857));\n+\n+      // create a simulated location data source\n+      SimulatedLocationDataSource simulatedLocationDataSource = new SimulatedLocationDataSource();\n+      // set the location of the simulated location data source with simulation parameters to set a consistent velocity\n+      simulatedLocationDataSource.setLocations(\n+        routePolyline, new SimulationParameters(Calendar.getInstance(), 30.0, 0.0, 0.0));\n+\n+      // start the simulated location data source\n+      simulatedLocationDataSource.startAsync();\n+      simulatedLocationDataSource.addLocationChangedListener(locationChangedEvent -> {\n+        // if location tracking is turned off, do not add to the polyline", "originalCommit": "bea7d7dbab5246a32f7ddb90b58b6fa77592b451", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d73addf25ddb5a51998b31755ae4e64f6a647d4", "chunk": "diff --git a/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java b/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\nindex 21c5b3cf..6fb2c1ea 100644\n--- a/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\n+++ b/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\n\n@@ -17,6 +17,7 @@\n \n package com.esri.samples.show_location_history;\n \n+import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n import java.util.Calendar;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE2NDIwNw==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r490164207", "bodyText": "This is a bit of a tricky statement. If you're creating a Polyline.fromJson, then there's technically no need to cast it to a Polyline, since it's an object of that class already.\nBut, we can't do  Polyline routePolyline = Polyline.fromJson(),, because the return type of that is a 'Geometry'. This is because that method is indirectly referring to Geometry.fromJson, which is the type from which Polyline inherits.\nSo to keep with the class structure, it's best to do the following:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  Polyline routePolyline = (Polyline) Polyline.fromJson(polylineData,\n          \n          \n            \n                  Polyline routePolyline = (Polyline) Geometry.fromJson(polylineData,\n          \n      \n    \n    \n  \n\nThat way we're accessing the method fromJson at it's lowest level, and trying to cast the result to a Polygon. If there's an error somewhere there, the message might also make it a little easier to understand why something broke (either with creating a generic Geometry from the Json, or with casting it to a Polyline)", "author": "JonLavi", "createdAt": "2020-09-17T11:18:54Z", "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReference;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Show Location History Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create a map with a dark gray canvas basemap\n+      ArcGISMap map = new ArcGISMap(\"https://www.arcgis.com/home/item.html?id=1970c1995b8f44749f4b9b6e81b5ba45\");\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set the map views's viewpoint centered on Los Angeles, California and scaled\n+      Point center = new Point(-13185535.98, 4037766.28, SpatialReference.create(3857));\n+      mapView.setViewpoint(new Viewpoint(center, 7000));\n+\n+      // create a button that toggles the location tracking\n+      Button trackingButton = new Button(\"Start tracking\");\n+      trackingButton.setDisable(true);\n+\n+      // enable the button interactions when the map is loaded\n+      map.addDoneLoadingListener(() -> {\n+        if (map.getLoadStatus() == LoadStatus.LOADED) {\n+          trackingButton.setDisable(false);\n+        } else {\n+          new Alert(Alert.AlertType.ERROR, \"Map failed to load\").show();\n+        }\n+      });\n+\n+      // create a graphics overlay for the points and use a red circle for the symbols\n+      GraphicsOverlay locationHistoryOverlay = new GraphicsOverlay();\n+      SimpleMarkerSymbol locationSymbol = new SimpleMarkerSymbol(\n+        SimpleMarkerSymbol.Style.CIRCLE, 0xFFFF0000, 10f);\n+      SimpleRenderer locationHistoryRenderer = new SimpleRenderer(locationSymbol);\n+      locationHistoryOverlay.setRenderer(locationHistoryRenderer);\n+\n+      // create a graphics overlay for the lines connecting the points and use a green line for the symbol\n+      GraphicsOverlay locationHistoryLineOverlay = new GraphicsOverlay();\n+      SimpleLineSymbol locationLineSymbol = new SimpleLineSymbol(\n+        SimpleLineSymbol.Style.SOLID, 0xFF00FF00, 2.0f);\n+      SimpleRenderer locationHistoryLineRenderer = new SimpleRenderer(locationLineSymbol);\n+      locationHistoryLineOverlay.setRenderer(locationHistoryLineRenderer);\n+\n+      // add the graphics overlays to the map view\n+      mapView.getGraphicsOverlays().addAll(Arrays.asList(locationHistoryOverlay, locationHistoryLineOverlay));\n+\n+      // create a polyline builder to connect the location points\n+      PolylineBuilder polylineBuilder = new PolylineBuilder(SpatialReference.create(3857));\n+      // access the json of the location points\n+      String polylineData = IOUtils.toString(getClass().getResourceAsStream(\"/show_location_history/polyline_data.json\"),\n+        StandardCharsets.UTF_8);\n+      // create a polyline from the location points\n+      Polyline routePolyline = (Polyline) Polyline.fromJson(polylineData,", "originalCommit": "bea7d7dbab5246a32f7ddb90b58b6fa77592b451", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d73addf25ddb5a51998b31755ae4e64f6a647d4", "chunk": "diff --git a/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java b/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\nindex 21c5b3cf..6fb2c1ea 100644\n--- a/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\n+++ b/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\n\n@@ -17,6 +17,7 @@\n \n package com.esri.samples.show_location_history;\n \n+import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n import java.util.Calendar;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE2NzA3NQ==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r490167075", "bodyText": "Instead of repeatedly querying the mapView's LocationDisplay, we can save it to a variable. Although it adds a line of code, it makes the other lines a bit clearer:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  mapView.getLocationDisplay().setLocationDataSource(simulatedLocationDataSource);\n          \n          \n            \n                  mapView.getLocationDisplay().setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n          \n          \n            \n                  mapView.getLocationDisplay().setInitialZoomScale(7000);\n          \n          \n            \n            \n          \n          \n            \n                  trackingButton.setOnAction(event -> {\n          \n          \n            \n                    // if the user has panned away from the location display, turn it on again\n          \n          \n            \n                    if (mapView.getLocationDisplay().getAutoPanMode() == LocationDisplay.AutoPanMode.OFF) {\n          \n          \n            \n                      mapView.getLocationDisplay().setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n          \n          \n            \n            \t  LocationDisplay locationDisplay = mapView.getLocationDisplay();\n          \n          \n            \n                  locationDisplay.setLocationDataSource(simulatedLocationDataSource);\n          \n          \n            \n                  locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n          \n          \n            \n                  locationDisplay.setInitialZoomScale(7000);\n          \n          \n            \n            \n          \n          \n            \n                  trackingButton.setOnAction(event -> {\n          \n          \n            \n                    // if the user has panned away from the location display, turn it on again\n          \n          \n            \n                    if (locationDisplay.getAutoPanMode() == LocationDisplay.AutoPanMode.OFF) {\n          \n          \n            \n                      locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);", "author": "JonLavi", "createdAt": "2020-09-17T11:24:00Z", "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReference;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Show Location History Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create a map with a dark gray canvas basemap\n+      ArcGISMap map = new ArcGISMap(\"https://www.arcgis.com/home/item.html?id=1970c1995b8f44749f4b9b6e81b5ba45\");\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set the map views's viewpoint centered on Los Angeles, California and scaled\n+      Point center = new Point(-13185535.98, 4037766.28, SpatialReference.create(3857));\n+      mapView.setViewpoint(new Viewpoint(center, 7000));\n+\n+      // create a button that toggles the location tracking\n+      Button trackingButton = new Button(\"Start tracking\");\n+      trackingButton.setDisable(true);\n+\n+      // enable the button interactions when the map is loaded\n+      map.addDoneLoadingListener(() -> {\n+        if (map.getLoadStatus() == LoadStatus.LOADED) {\n+          trackingButton.setDisable(false);\n+        } else {\n+          new Alert(Alert.AlertType.ERROR, \"Map failed to load\").show();\n+        }\n+      });\n+\n+      // create a graphics overlay for the points and use a red circle for the symbols\n+      GraphicsOverlay locationHistoryOverlay = new GraphicsOverlay();\n+      SimpleMarkerSymbol locationSymbol = new SimpleMarkerSymbol(\n+        SimpleMarkerSymbol.Style.CIRCLE, 0xFFFF0000, 10f);\n+      SimpleRenderer locationHistoryRenderer = new SimpleRenderer(locationSymbol);\n+      locationHistoryOverlay.setRenderer(locationHistoryRenderer);\n+\n+      // create a graphics overlay for the lines connecting the points and use a green line for the symbol\n+      GraphicsOverlay locationHistoryLineOverlay = new GraphicsOverlay();\n+      SimpleLineSymbol locationLineSymbol = new SimpleLineSymbol(\n+        SimpleLineSymbol.Style.SOLID, 0xFF00FF00, 2.0f);\n+      SimpleRenderer locationHistoryLineRenderer = new SimpleRenderer(locationLineSymbol);\n+      locationHistoryLineOverlay.setRenderer(locationHistoryLineRenderer);\n+\n+      // add the graphics overlays to the map view\n+      mapView.getGraphicsOverlays().addAll(Arrays.asList(locationHistoryOverlay, locationHistoryLineOverlay));\n+\n+      // create a polyline builder to connect the location points\n+      PolylineBuilder polylineBuilder = new PolylineBuilder(SpatialReference.create(3857));\n+      // access the json of the location points\n+      String polylineData = IOUtils.toString(getClass().getResourceAsStream(\"/show_location_history/polyline_data.json\"),\n+        StandardCharsets.UTF_8);\n+      // create a polyline from the location points\n+      Polyline routePolyline = (Polyline) Polyline.fromJson(polylineData,\n+        SpatialReference.create(3857));\n+\n+      // create a simulated location data source\n+      SimulatedLocationDataSource simulatedLocationDataSource = new SimulatedLocationDataSource();\n+      // set the location of the simulated location data source with simulation parameters to set a consistent velocity\n+      simulatedLocationDataSource.setLocations(\n+        routePolyline, new SimulationParameters(Calendar.getInstance(), 30.0, 0.0, 0.0));\n+\n+      // start the simulated location data source\n+      simulatedLocationDataSource.startAsync();\n+      simulatedLocationDataSource.addLocationChangedListener(locationChangedEvent -> {\n+        // if location tracking is turned off, do not add to the polyline\n+        if (!isTrackingEnabled) {\n+          return;\n+        }\n+        // get the position as a point from locationChangedEvent\n+        Point position = locationChangedEvent.getLocation().getPosition();\n+\n+        // add the new point to the polyline\n+        polylineBuilder.addPoint(position);\n+\n+        // add the new point to the graphics overlay\n+        locationHistoryOverlay.getGraphics().add(new Graphic(position));\n+\n+        // reset the old polyline connecting the points\n+        locationHistoryLineOverlay.getGraphics().clear();\n+\n+        // add the updated polyline to the graphics overlay\n+        locationHistoryLineOverlay.getGraphics().add(new Graphic(polylineBuilder.toGeometry()));\n+      });\n+\n+      // configure the map view's location display to follow the simulated location data source\n+      mapView.getLocationDisplay().setLocationDataSource(simulatedLocationDataSource);\n+      mapView.getLocationDisplay().setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+      mapView.getLocationDisplay().setInitialZoomScale(7000);\n+\n+      trackingButton.setOnAction(event -> {\n+        // if the user has panned away from the location display, turn it on again\n+        if (mapView.getLocationDisplay().getAutoPanMode() == LocationDisplay.AutoPanMode.OFF) {\n+          mapView.getLocationDisplay().setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);", "originalCommit": "bea7d7dbab5246a32f7ddb90b58b6fa77592b451", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d73addf25ddb5a51998b31755ae4e64f6a647d4", "chunk": "diff --git a/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java b/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\nindex 21c5b3cf..6fb2c1ea 100644\n--- a/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\n+++ b/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\n\n@@ -17,6 +17,7 @@\n \n package com.esri.samples.show_location_history;\n \n+import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n import java.util.Calendar;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE2ODYyMQ==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r490168621", "bodyText": "There's absolutely nothing wrong with the way this is done here (arguably it's easier to read), but if you wanted to save yourself one line, a cheeky way of setting a value to it's opposite would be:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (isTrackingEnabled) {\n          \n          \n            \n                      trackingButton.setText(\"Start Tracking\");\n          \n          \n            \n                      isTrackingEnabled = false;\n          \n          \n            \n                    } else {\n          \n          \n            \n                      trackingButton.setText(\"Stop Tracking\");\n          \n          \n            \n                      isTrackingEnabled = true;\n          \n          \n            \n                    }\n          \n          \n            \n                    if (isTrackingEnabled) {\n          \n          \n            \n                      trackingButton.setText(\"Start Tracking\");\n          \n          \n            \n                    } else {\n          \n          \n            \n                      trackingButton.setText(\"Stop Tracking\");\n          \n          \n            \n                    }\n          \n          \n            \n                    isTrackingEnabled = !isTrackingEnabled;", "author": "JonLavi", "createdAt": "2020-09-17T11:26:48Z", "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReference;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Show Location History Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create a map with a dark gray canvas basemap\n+      ArcGISMap map = new ArcGISMap(\"https://www.arcgis.com/home/item.html?id=1970c1995b8f44749f4b9b6e81b5ba45\");\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set the map views's viewpoint centered on Los Angeles, California and scaled\n+      Point center = new Point(-13185535.98, 4037766.28, SpatialReference.create(3857));\n+      mapView.setViewpoint(new Viewpoint(center, 7000));\n+\n+      // create a button that toggles the location tracking\n+      Button trackingButton = new Button(\"Start tracking\");\n+      trackingButton.setDisable(true);\n+\n+      // enable the button interactions when the map is loaded\n+      map.addDoneLoadingListener(() -> {\n+        if (map.getLoadStatus() == LoadStatus.LOADED) {\n+          trackingButton.setDisable(false);\n+        } else {\n+          new Alert(Alert.AlertType.ERROR, \"Map failed to load\").show();\n+        }\n+      });\n+\n+      // create a graphics overlay for the points and use a red circle for the symbols\n+      GraphicsOverlay locationHistoryOverlay = new GraphicsOverlay();\n+      SimpleMarkerSymbol locationSymbol = new SimpleMarkerSymbol(\n+        SimpleMarkerSymbol.Style.CIRCLE, 0xFFFF0000, 10f);\n+      SimpleRenderer locationHistoryRenderer = new SimpleRenderer(locationSymbol);\n+      locationHistoryOverlay.setRenderer(locationHistoryRenderer);\n+\n+      // create a graphics overlay for the lines connecting the points and use a green line for the symbol\n+      GraphicsOverlay locationHistoryLineOverlay = new GraphicsOverlay();\n+      SimpleLineSymbol locationLineSymbol = new SimpleLineSymbol(\n+        SimpleLineSymbol.Style.SOLID, 0xFF00FF00, 2.0f);\n+      SimpleRenderer locationHistoryLineRenderer = new SimpleRenderer(locationLineSymbol);\n+      locationHistoryLineOverlay.setRenderer(locationHistoryLineRenderer);\n+\n+      // add the graphics overlays to the map view\n+      mapView.getGraphicsOverlays().addAll(Arrays.asList(locationHistoryOverlay, locationHistoryLineOverlay));\n+\n+      // create a polyline builder to connect the location points\n+      PolylineBuilder polylineBuilder = new PolylineBuilder(SpatialReference.create(3857));\n+      // access the json of the location points\n+      String polylineData = IOUtils.toString(getClass().getResourceAsStream(\"/show_location_history/polyline_data.json\"),\n+        StandardCharsets.UTF_8);\n+      // create a polyline from the location points\n+      Polyline routePolyline = (Polyline) Polyline.fromJson(polylineData,\n+        SpatialReference.create(3857));\n+\n+      // create a simulated location data source\n+      SimulatedLocationDataSource simulatedLocationDataSource = new SimulatedLocationDataSource();\n+      // set the location of the simulated location data source with simulation parameters to set a consistent velocity\n+      simulatedLocationDataSource.setLocations(\n+        routePolyline, new SimulationParameters(Calendar.getInstance(), 30.0, 0.0, 0.0));\n+\n+      // start the simulated location data source\n+      simulatedLocationDataSource.startAsync();\n+      simulatedLocationDataSource.addLocationChangedListener(locationChangedEvent -> {\n+        // if location tracking is turned off, do not add to the polyline\n+        if (!isTrackingEnabled) {\n+          return;\n+        }\n+        // get the position as a point from locationChangedEvent\n+        Point position = locationChangedEvent.getLocation().getPosition();\n+\n+        // add the new point to the polyline\n+        polylineBuilder.addPoint(position);\n+\n+        // add the new point to the graphics overlay\n+        locationHistoryOverlay.getGraphics().add(new Graphic(position));\n+\n+        // reset the old polyline connecting the points\n+        locationHistoryLineOverlay.getGraphics().clear();\n+\n+        // add the updated polyline to the graphics overlay\n+        locationHistoryLineOverlay.getGraphics().add(new Graphic(polylineBuilder.toGeometry()));\n+      });\n+\n+      // configure the map view's location display to follow the simulated location data source\n+      mapView.getLocationDisplay().setLocationDataSource(simulatedLocationDataSource);\n+      mapView.getLocationDisplay().setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+      mapView.getLocationDisplay().setInitialZoomScale(7000);\n+\n+      trackingButton.setOnAction(event -> {\n+        // if the user has panned away from the location display, turn it on again\n+        if (mapView.getLocationDisplay().getAutoPanMode() == LocationDisplay.AutoPanMode.OFF) {\n+          mapView.getLocationDisplay().setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+        }\n+        // toggle the location tracking when the button is clicked\n+        if (isTrackingEnabled) {\n+          trackingButton.setText(\"Start Tracking\");\n+          isTrackingEnabled = false;\n+        } else {\n+          trackingButton.setText(\"Stop Tracking\");\n+          isTrackingEnabled = true;\n+        }", "originalCommit": "bea7d7dbab5246a32f7ddb90b58b6fa77592b451", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d73addf25ddb5a51998b31755ae4e64f6a647d4", "chunk": "diff --git a/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java b/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\nindex 21c5b3cf..6fb2c1ea 100644\n--- a/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\n+++ b/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\n\n@@ -17,6 +17,7 @@\n \n package com.esri.samples.show_location_history;\n \n+import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n import java.util.Calendar;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE2ODk2NQ==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r490168965", "bodyText": "I think a newline here would be good to separate this from the block above\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                } catch (Exception e) {\n          \n          \n            \n                \n          \n          \n            \n                } catch (Exception e) {", "author": "JonLavi", "createdAt": "2020-09-17T11:27:29Z", "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReference;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Show Location History Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create a map with a dark gray canvas basemap\n+      ArcGISMap map = new ArcGISMap(\"https://www.arcgis.com/home/item.html?id=1970c1995b8f44749f4b9b6e81b5ba45\");\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set the map views's viewpoint centered on Los Angeles, California and scaled\n+      Point center = new Point(-13185535.98, 4037766.28, SpatialReference.create(3857));\n+      mapView.setViewpoint(new Viewpoint(center, 7000));\n+\n+      // create a button that toggles the location tracking\n+      Button trackingButton = new Button(\"Start tracking\");\n+      trackingButton.setDisable(true);\n+\n+      // enable the button interactions when the map is loaded\n+      map.addDoneLoadingListener(() -> {\n+        if (map.getLoadStatus() == LoadStatus.LOADED) {\n+          trackingButton.setDisable(false);\n+        } else {\n+          new Alert(Alert.AlertType.ERROR, \"Map failed to load\").show();\n+        }\n+      });\n+\n+      // create a graphics overlay for the points and use a red circle for the symbols\n+      GraphicsOverlay locationHistoryOverlay = new GraphicsOverlay();\n+      SimpleMarkerSymbol locationSymbol = new SimpleMarkerSymbol(\n+        SimpleMarkerSymbol.Style.CIRCLE, 0xFFFF0000, 10f);\n+      SimpleRenderer locationHistoryRenderer = new SimpleRenderer(locationSymbol);\n+      locationHistoryOverlay.setRenderer(locationHistoryRenderer);\n+\n+      // create a graphics overlay for the lines connecting the points and use a green line for the symbol\n+      GraphicsOverlay locationHistoryLineOverlay = new GraphicsOverlay();\n+      SimpleLineSymbol locationLineSymbol = new SimpleLineSymbol(\n+        SimpleLineSymbol.Style.SOLID, 0xFF00FF00, 2.0f);\n+      SimpleRenderer locationHistoryLineRenderer = new SimpleRenderer(locationLineSymbol);\n+      locationHistoryLineOverlay.setRenderer(locationHistoryLineRenderer);\n+\n+      // add the graphics overlays to the map view\n+      mapView.getGraphicsOverlays().addAll(Arrays.asList(locationHistoryOverlay, locationHistoryLineOverlay));\n+\n+      // create a polyline builder to connect the location points\n+      PolylineBuilder polylineBuilder = new PolylineBuilder(SpatialReference.create(3857));\n+      // access the json of the location points\n+      String polylineData = IOUtils.toString(getClass().getResourceAsStream(\"/show_location_history/polyline_data.json\"),\n+        StandardCharsets.UTF_8);\n+      // create a polyline from the location points\n+      Polyline routePolyline = (Polyline) Polyline.fromJson(polylineData,\n+        SpatialReference.create(3857));\n+\n+      // create a simulated location data source\n+      SimulatedLocationDataSource simulatedLocationDataSource = new SimulatedLocationDataSource();\n+      // set the location of the simulated location data source with simulation parameters to set a consistent velocity\n+      simulatedLocationDataSource.setLocations(\n+        routePolyline, new SimulationParameters(Calendar.getInstance(), 30.0, 0.0, 0.0));\n+\n+      // start the simulated location data source\n+      simulatedLocationDataSource.startAsync();\n+      simulatedLocationDataSource.addLocationChangedListener(locationChangedEvent -> {\n+        // if location tracking is turned off, do not add to the polyline\n+        if (!isTrackingEnabled) {\n+          return;\n+        }\n+        // get the position as a point from locationChangedEvent\n+        Point position = locationChangedEvent.getLocation().getPosition();\n+\n+        // add the new point to the polyline\n+        polylineBuilder.addPoint(position);\n+\n+        // add the new point to the graphics overlay\n+        locationHistoryOverlay.getGraphics().add(new Graphic(position));\n+\n+        // reset the old polyline connecting the points\n+        locationHistoryLineOverlay.getGraphics().clear();\n+\n+        // add the updated polyline to the graphics overlay\n+        locationHistoryLineOverlay.getGraphics().add(new Graphic(polylineBuilder.toGeometry()));\n+      });\n+\n+      // configure the map view's location display to follow the simulated location data source\n+      mapView.getLocationDisplay().setLocationDataSource(simulatedLocationDataSource);\n+      mapView.getLocationDisplay().setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+      mapView.getLocationDisplay().setInitialZoomScale(7000);\n+\n+      trackingButton.setOnAction(event -> {\n+        // if the user has panned away from the location display, turn it on again\n+        if (mapView.getLocationDisplay().getAutoPanMode() == LocationDisplay.AutoPanMode.OFF) {\n+          mapView.getLocationDisplay().setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+        }\n+        // toggle the location tracking when the button is clicked\n+        if (isTrackingEnabled) {\n+          trackingButton.setText(\"Start Tracking\");\n+          isTrackingEnabled = false;\n+        } else {\n+          trackingButton.setText(\"Stop Tracking\");\n+          isTrackingEnabled = true;\n+        }\n+      });\n+\n+      // add the map view and tracking button to the stack pane\n+      stackPane.getChildren().addAll(mapView, trackingButton);\n+      StackPane.setAlignment(trackingButton, Pos.TOP_LEFT);\n+      StackPane.setMargin(trackingButton, new Insets(10, 0, 0, 10));\n+    } catch (Exception e) {", "originalCommit": "bea7d7dbab5246a32f7ddb90b58b6fa77592b451", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d73addf25ddb5a51998b31755ae4e64f6a647d4", "chunk": "diff --git a/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java b/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\nindex 21c5b3cf..6fb2c1ea 100644\n--- a/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\n+++ b/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\n\n@@ -17,6 +17,7 @@\n \n package com.esri.samples.show_location_history;\n \n+import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n import java.util.Calendar;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE3MTA0MA==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r490171040", "bodyText": "This WKID corresponds to WebMercator, which we also have a utility method for (just makes it a bit more clear which reference we'll be using):\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  Point center = new Point(-13185535.98, 4037766.28, SpatialReference.create(3857));\n          \n          \n            \n                  Point center = new Point(-13185535.98, 4037766.28, SpatialReferences.getWebMercator());", "author": "JonLavi", "createdAt": "2020-09-17T11:31:08Z", "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReference;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Show Location History Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create a map with a dark gray canvas basemap\n+      ArcGISMap map = new ArcGISMap(\"https://www.arcgis.com/home/item.html?id=1970c1995b8f44749f4b9b6e81b5ba45\");\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set the map views's viewpoint centered on Los Angeles, California and scaled\n+      Point center = new Point(-13185535.98, 4037766.28, SpatialReference.create(3857));", "originalCommit": "bea7d7dbab5246a32f7ddb90b58b6fa77592b451", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d73addf25ddb5a51998b31755ae4e64f6a647d4", "chunk": "diff --git a/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java b/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\nindex 21c5b3cf..6fb2c1ea 100644\n--- a/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\n+++ b/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\n\n@@ -17,6 +17,7 @@\n \n package com.esri.samples.show_location_history;\n \n+import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n import java.util.Calendar;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE3MTczOQ==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r490171739", "bodyText": "If the variable point above is not being re-used, we could consider writing:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  mapView.setViewpoint(new Viewpoint(center, 7000));\n          \n          \n            \n                  mapView.setViewpoint(new Viewpoint(new Point(-13185535.98, 4037766.28, SpatialReferences.getWebMercator()), 7000));\n          \n      \n    \n    \n  \n\nIt's a bit of a mouthfull, but some of the other samples do this as well. Either way works though, so it's just a matter of preference!", "author": "JonLavi", "createdAt": "2020-09-17T11:32:35Z", "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReference;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Show Location History Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create a map with a dark gray canvas basemap\n+      ArcGISMap map = new ArcGISMap(\"https://www.arcgis.com/home/item.html?id=1970c1995b8f44749f4b9b6e81b5ba45\");\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set the map views's viewpoint centered on Los Angeles, California and scaled\n+      Point center = new Point(-13185535.98, 4037766.28, SpatialReference.create(3857));\n+      mapView.setViewpoint(new Viewpoint(center, 7000));", "originalCommit": "bea7d7dbab5246a32f7ddb90b58b6fa77592b451", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8d73addf25ddb5a51998b31755ae4e64f6a647d4", "chunk": "diff --git a/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java b/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\nindex 21c5b3cf..6fb2c1ea 100644\n--- a/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\n+++ b/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\n\n@@ -17,6 +17,7 @@\n \n package com.esri.samples.show_location_history;\n \n+import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n import java.util.Calendar;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE3MzIwNQ==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r490173205", "bodyText": "As you've already mentioned, it might be worth investigating a try-catch for this particular part of the code. The reason is that if there's every a problem getting this file (for example, the Gradle script didn't download it properly), we'd get a meaningful error in the catch block. At the moment the code would defer to the catch at line 175. Have a try in structuring it in a way that we display an error to the user, saying there was a problem getting the simulated data.", "author": "JonLavi", "createdAt": "2020-09-17T11:35:23Z", "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReference;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Show Location History Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create a map with a dark gray canvas basemap\n+      ArcGISMap map = new ArcGISMap(\"https://www.arcgis.com/home/item.html?id=1970c1995b8f44749f4b9b6e81b5ba45\");\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set the map views's viewpoint centered on Los Angeles, California and scaled\n+      Point center = new Point(-13185535.98, 4037766.28, SpatialReference.create(3857));\n+      mapView.setViewpoint(new Viewpoint(center, 7000));\n+\n+      // create a button that toggles the location tracking\n+      Button trackingButton = new Button(\"Start tracking\");\n+      trackingButton.setDisable(true);\n+\n+      // enable the button interactions when the map is loaded\n+      map.addDoneLoadingListener(() -> {\n+        if (map.getLoadStatus() == LoadStatus.LOADED) {\n+          trackingButton.setDisable(false);\n+        } else {\n+          new Alert(Alert.AlertType.ERROR, \"Map failed to load\").show();\n+        }\n+      });\n+\n+      // create a graphics overlay for the points and use a red circle for the symbols\n+      GraphicsOverlay locationHistoryOverlay = new GraphicsOverlay();\n+      SimpleMarkerSymbol locationSymbol = new SimpleMarkerSymbol(\n+        SimpleMarkerSymbol.Style.CIRCLE, 0xFFFF0000, 10f);\n+      SimpleRenderer locationHistoryRenderer = new SimpleRenderer(locationSymbol);\n+      locationHistoryOverlay.setRenderer(locationHistoryRenderer);\n+\n+      // create a graphics overlay for the lines connecting the points and use a green line for the symbol\n+      GraphicsOverlay locationHistoryLineOverlay = new GraphicsOverlay();\n+      SimpleLineSymbol locationLineSymbol = new SimpleLineSymbol(\n+        SimpleLineSymbol.Style.SOLID, 0xFF00FF00, 2.0f);\n+      SimpleRenderer locationHistoryLineRenderer = new SimpleRenderer(locationLineSymbol);\n+      locationHistoryLineOverlay.setRenderer(locationHistoryLineRenderer);\n+\n+      // add the graphics overlays to the map view\n+      mapView.getGraphicsOverlays().addAll(Arrays.asList(locationHistoryOverlay, locationHistoryLineOverlay));\n+\n+      // create a polyline builder to connect the location points\n+      PolylineBuilder polylineBuilder = new PolylineBuilder(SpatialReference.create(3857));\n+      // access the json of the location points\n+      String polylineData = IOUtils.toString(getClass().getResourceAsStream(\"/show_location_history/polyline_data.json\"),", "originalCommit": "bea7d7dbab5246a32f7ddb90b58b6fa77592b451", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM5OTM4MA==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r490399380", "bodyText": "Sounds good! Do you think I should only catch IOExceptions? I imagine the try-catch with this block of code will be above the map.addDoneLoadingListener?", "author": "sclaridge", "createdAt": "2020-09-17T16:30:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE3MzIwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc5NDY3NQ==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r490794675", "bodyText": "Not sure which exceptions we'd need to handle, but the IDE will tell you if you're missing any. If there are more than say 3 specific exception types, we can simply do a generic catch (Exception e), since all we're really doing is displaying an error, not working with the internals of the individual exceptions.\nFor the structure: Yeah I think above is probably a good place to put it. We'd want that polyline ready to go before we do anything particular with the Map and MapView.", "author": "JonLavi", "createdAt": "2020-09-18T08:42:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE3MzIwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "8d73addf25ddb5a51998b31755ae4e64f6a647d4", "chunk": "diff --git a/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java b/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\nindex 21c5b3cf..6fb2c1ea 100644\n--- a/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\n+++ b/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\n\n@@ -17,6 +17,7 @@\n \n package com.esri.samples.show_location_history;\n \n+import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n import java.util.Calendar;\n"}}, {"oid": "8d73addf25ddb5a51998b31755ae4e64f6a647d4", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/8d73addf25ddb5a51998b31755ae4e64f6a647d4", "message": "Add changes from PR", "committedDate": "2020-09-21T14:50:28Z", "type": "commit"}, {"oid": "10f680e2af217103e9f4747fe211909cdd64bb77", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/10f680e2af217103e9f4747fe211909cdd64bb77", "message": "Remove try catch from loading listener", "committedDate": "2020-09-21T14:59:45Z", "type": "commit"}, {"oid": "00d5d815136a81c3008d54482277705bfd8f2a8c", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/00d5d815136a81c3008d54482277705bfd8f2a8c", "message": "Refactor code from PR", "committedDate": "2020-09-22T14:46:48Z", "type": "commit"}, {"oid": "3999ddce1ff93385fd5289157a94cac128d09b72", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/3999ddce1ff93385fd5289157a94cac128d09b72", "message": "Remove unused import", "committedDate": "2020-09-22T14:53:02Z", "type": "commit"}, {"oid": "384ac06b3c02bc83413d77b168c9bb7abbf9bf2e", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/384ac06b3c02bc83413d77b168c9bb7abbf9bf2e", "message": "Fix README", "committedDate": "2020-09-23T14:49:35Z", "type": "commit"}, {"oid": "ad68c9199f4ab69fb155715606819850cf405fd0", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/ad68c9199f4ab69fb155715606819850cf405fd0", "message": "Add location changed listener", "committedDate": "2020-09-23T14:49:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2MDIyOQ==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r494360229", "bodyText": "Maybe we can be a bit more descriptive about what this block does. The second part of the sentence sounds a bit like we're admitting it's a workaround, so perhaps we can reword it slightly to say this is deliberate?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // track previous location to ensure the route line appears behind the location display symbol\n          \n          \n            \n                    // create a listener to track the previous location, to draw a route line behind the location display symbol", "author": "JonLavi", "createdAt": "2020-09-24T14:21:38Z", "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.LocationDataSource;\n+import com.esri.arcgisruntime.location.LocationDataSource.LocationChangedListener;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;\n+  private Point position;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Show Location History Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create a map with a dark gray canvas basemap\n+      ArcGISMap map = new ArcGISMap(Basemap.createDarkGrayCanvasVector());\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set the map views's viewpoint centered on Los Angeles, California and scaled\n+      mapView.setViewpoint(new Viewpoint(new Point(-13185535.98, 4037766.28,\n+        SpatialReferences.getWebMercator()), 7000));\n+\n+      // create a button that toggles the location tracking\n+      Button trackingButton = new Button(\"Start tracking\");\n+      trackingButton.setDisable(true);\n+\n+      // create a graphics overlay for the points and use a red circle for the symbols\n+      GraphicsOverlay locationHistoryOverlay = new GraphicsOverlay();\n+      SimpleMarkerSymbol locationSymbol = new SimpleMarkerSymbol(\n+        SimpleMarkerSymbol.Style.CIRCLE, 0xFFFF0000, 10f);\n+      SimpleRenderer locationHistoryRenderer = new SimpleRenderer(locationSymbol);\n+      locationHistoryOverlay.setRenderer(locationHistoryRenderer);\n+\n+      // create a graphics overlay for the lines connecting the points and use a green line for the symbol\n+      GraphicsOverlay locationHistoryLineOverlay = new GraphicsOverlay();\n+      SimpleLineSymbol locationLineSymbol = new SimpleLineSymbol(\n+        SimpleLineSymbol.Style.SOLID, 0xFF00FF00, 2.0f);\n+      SimpleRenderer locationHistoryLineRenderer = new SimpleRenderer(locationLineSymbol);\n+      locationHistoryLineOverlay.setRenderer(locationHistoryLineRenderer);\n+\n+      // add the graphics overlays to the map view\n+      mapView.getGraphicsOverlays().addAll(Arrays.asList(locationHistoryOverlay, locationHistoryLineOverlay));\n+\n+      // create a polyline builder to connect the location points\n+      PolylineBuilder polylineBuilder = new PolylineBuilder(SpatialReferences.getWebMercator());\n+\n+      try {\n+        // access the json of the location points\n+        String polylineData = IOUtils.toString(getClass().getResourceAsStream(\"/show_location_history/polyline_data.json\"),\n+          StandardCharsets.UTF_8);\n+        // create a polyline from the location points\n+        Polyline routePolyline = (Polyline) Geometry.fromJson(polylineData,\n+          SpatialReferences.getWebMercator());\n+\n+        // create a simulated location data source\n+        SimulatedLocationDataSource simulatedLocationDataSource = new SimulatedLocationDataSource();\n+        // set the location of the simulated location data source with simulation parameters to set a consistent velocity\n+        simulatedLocationDataSource.setLocations(\n+          routePolyline, new SimulationParameters(Calendar.getInstance(), 30.0, 0.0, 0.0));\n+\n+        // configure the map view's location display to follow the simulated location data source\n+        LocationDisplay locationDisplay = mapView.getLocationDisplay();\n+        locationDisplay.setLocationDataSource(simulatedLocationDataSource);\n+        locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+        locationDisplay.setInitialZoomScale(7000);\n+\n+        // track previous location to ensure the route line appears behind the location display symbol", "originalCommit": "ad68c9199f4ab69fb155715606819850cf405fd0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "28110cd7cbd37a51faaa621eb32d6edd8457cd6b", "chunk": "diff --git a/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java b/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\nindex b67f15fb..65d70cab 100644\n--- a/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\n+++ b/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\n\n@@ -131,7 +131,7 @@ public class ShowLocationHistorySample extends Application {\n         locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n         locationDisplay.setInitialZoomScale(7000);\n \n-        // track previous location to ensure the route line appears behind the location display symbol\n+        // create a listener to track the previous location, to draw a route line behind the location display symbol\n         LocationChangedListener locationChangedListener = (LocationDataSource.LocationChangedEvent locationChangedEvent) -> {\n \n           // reset the old polyline connecting the points\n"}}, {"oid": "28110cd7cbd37a51faaa621eb32d6edd8457cd6b", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/28110cd7cbd37a51faaa621eb32d6edd8457cd6b", "message": "Fix listener comment", "committedDate": "2020-09-24T16:04:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg3OTgxOQ==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r498879819", "bodyText": "I think we can handle this better than setting up a boolean to track things. I'm proposing to use a ToggleButton. See what you think, and we can have a chat about it too.", "author": "Rachael-E", "createdAt": "2020-10-02T15:06:01Z", "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.LocationDataSource;\n+import com.esri.arcgisruntime.location.LocationDataSource.LocationChangedListener;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;", "originalCommit": "28110cd7cbd37a51faaa621eb32d6edd8457cd6b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "16dce4ce0b077b115906f521f77aab63f199a13a", "chunk": "diff --git a/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java b/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\nindex 65d70cab..ba541272 100644\n--- a/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\n+++ b/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\n\n@@ -17,7 +17,6 @@\n \n package com.esri.samples.show_location_history;\n \n-import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n import java.util.Calendar;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg4MDE0NQ==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r498880145", "bodyText": "if we make this a ToggleButton we can use the isSelected() property to keep a track on the tracking status without needing to add an extra boolean variable.", "author": "Rachael-E", "createdAt": "2020-10-02T15:06:34Z", "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.LocationDataSource;\n+import com.esri.arcgisruntime.location.LocationDataSource.LocationChangedListener;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;\n+  private Point position;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Show Location History Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create a map with a dark gray canvas basemap\n+      ArcGISMap map = new ArcGISMap(Basemap.createDarkGrayCanvasVector());\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set the map views's viewpoint centered on Los Angeles, California and scaled\n+      mapView.setViewpoint(new Viewpoint(new Point(-13185535.98, 4037766.28,\n+        SpatialReferences.getWebMercator()), 7000));\n+\n+      // create a button that toggles the location tracking\n+      Button trackingButton = new Button(\"Start tracking\");", "originalCommit": "28110cd7cbd37a51faaa621eb32d6edd8457cd6b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "16dce4ce0b077b115906f521f77aab63f199a13a", "chunk": "diff --git a/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java b/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\nindex 65d70cab..ba541272 100644\n--- a/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\n+++ b/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\n\n@@ -17,7 +17,6 @@\n \n package com.esri.samples.show_location_history;\n \n-import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n import java.util.Calendar;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg4MDcxMg==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r498880712", "bodyText": "I'm thinking something like the following....but let's have a chat about it as it has its positives and  possible negatives:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      if (isTrackingEnabled) {\n          \n          \n            \n                        trackingButton.setText(\"Start Tracking\");\n          \n          \n            \n                        simulatedLocationDataSource.removeLocationChangedListener(locationChangedListener);\n          \n          \n            \n                      } else {\n          \n          \n            \n                        trackingButton.setText(\"Stop Tracking\");\n          \n          \n            \n                        simulatedLocationDataSource.addLocationChangedListener(locationChangedListener);\n          \n          \n            \n                      }\n          \n          \n            \n                      isTrackingEnabled = !isTrackingEnabled;\n          \n          \n            \n                    });\n          \n          \n            \n                      if (trackingButton.isSelected()) {\n          \n          \n            \n                        trackingButton.setStyle(\"-fx-background-color: #00ff00; \");\n          \n          \n            \n                        trackingButton.setText(\"Tracking Status: ACTIVE\");\n          \n          \n            \n                        simulatedLocationDataSource.addLocationChangedListener(locationChangedListener);\n          \n          \n            \n                      } else {\n          \n          \n            \n                        trackingButton.setStyle(\"-fx-background-color: #F16345; \");\n          \n          \n            \n                        trackingButton.setText(\"Tracking Status: STOPPED\");\n          \n          \n            \n                        simulatedLocationDataSource.removeLocationChangedListener(locationChangedListener);\n          \n          \n            \n                      }\n          \n          \n            \n                    });", "author": "Rachael-E", "createdAt": "2020-10-02T15:07:32Z", "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.LocationDataSource;\n+import com.esri.arcgisruntime.location.LocationDataSource.LocationChangedListener;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;\n+  private Point position;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Show Location History Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create a map with a dark gray canvas basemap\n+      ArcGISMap map = new ArcGISMap(Basemap.createDarkGrayCanvasVector());\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set the map views's viewpoint centered on Los Angeles, California and scaled\n+      mapView.setViewpoint(new Viewpoint(new Point(-13185535.98, 4037766.28,\n+        SpatialReferences.getWebMercator()), 7000));\n+\n+      // create a button that toggles the location tracking\n+      Button trackingButton = new Button(\"Start tracking\");\n+      trackingButton.setDisable(true);\n+\n+      // create a graphics overlay for the points and use a red circle for the symbols\n+      GraphicsOverlay locationHistoryOverlay = new GraphicsOverlay();\n+      SimpleMarkerSymbol locationSymbol = new SimpleMarkerSymbol(\n+        SimpleMarkerSymbol.Style.CIRCLE, 0xFFFF0000, 10f);\n+      SimpleRenderer locationHistoryRenderer = new SimpleRenderer(locationSymbol);\n+      locationHistoryOverlay.setRenderer(locationHistoryRenderer);\n+\n+      // create a graphics overlay for the lines connecting the points and use a green line for the symbol\n+      GraphicsOverlay locationHistoryLineOverlay = new GraphicsOverlay();\n+      SimpleLineSymbol locationLineSymbol = new SimpleLineSymbol(\n+        SimpleLineSymbol.Style.SOLID, 0xFF00FF00, 2.0f);\n+      SimpleRenderer locationHistoryLineRenderer = new SimpleRenderer(locationLineSymbol);\n+      locationHistoryLineOverlay.setRenderer(locationHistoryLineRenderer);\n+\n+      // add the graphics overlays to the map view\n+      mapView.getGraphicsOverlays().addAll(Arrays.asList(locationHistoryOverlay, locationHistoryLineOverlay));\n+\n+      // create a polyline builder to connect the location points\n+      PolylineBuilder polylineBuilder = new PolylineBuilder(SpatialReferences.getWebMercator());\n+\n+      try {\n+        // access the json of the location points\n+        String polylineData = IOUtils.toString(getClass().getResourceAsStream(\"/show_location_history/polyline_data.json\"),\n+          StandardCharsets.UTF_8);\n+        // create a polyline from the location points\n+        Polyline routePolyline = (Polyline) Geometry.fromJson(polylineData,\n+          SpatialReferences.getWebMercator());\n+\n+        // create a simulated location data source\n+        SimulatedLocationDataSource simulatedLocationDataSource = new SimulatedLocationDataSource();\n+        // set the location of the simulated location data source with simulation parameters to set a consistent velocity\n+        simulatedLocationDataSource.setLocations(\n+          routePolyline, new SimulationParameters(Calendar.getInstance(), 30.0, 0.0, 0.0));\n+\n+        // configure the map view's location display to follow the simulated location data source\n+        LocationDisplay locationDisplay = mapView.getLocationDisplay();\n+        locationDisplay.setLocationDataSource(simulatedLocationDataSource);\n+        locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+        locationDisplay.setInitialZoomScale(7000);\n+\n+        // create a listener to track the previous location, to draw a route line behind the location display symbol\n+        LocationChangedListener locationChangedListener = (LocationDataSource.LocationChangedEvent locationChangedEvent) -> {\n+\n+          // reset the old polyline connecting the points\n+            locationHistoryLineOverlay.getGraphics().clear();\n+\n+            // add any previous position to the history\n+            if (position != null) {\n+              // add the new point to the polyline\n+              polylineBuilder.addPoint(position);\n+              // add the new point to the graphics overlay\n+              locationHistoryOverlay.getGraphics().add(new Graphic(position));\n+            }\n+            // store the current position\n+            position = locationChangedEvent.getLocation().getPosition();\n+\n+            // add the updated polyline to the graphics overlay\n+            locationHistoryLineOverlay.getGraphics().add(new Graphic(polylineBuilder.toGeometry()));\n+          };\n+\n+        trackingButton.setOnAction(event -> {\n+          // if the user has panned away from the location display, turn it on again\n+          if (locationDisplay.getAutoPanMode() == LocationDisplay.AutoPanMode.OFF) {\n+            locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+          }\n+          // toggle the location tracking when the button is clicked\n+          if (isTrackingEnabled) {\n+            trackingButton.setText(\"Start Tracking\");\n+            simulatedLocationDataSource.removeLocationChangedListener(locationChangedListener);\n+          } else {\n+            trackingButton.setText(\"Stop Tracking\");\n+            simulatedLocationDataSource.addLocationChangedListener(locationChangedListener);\n+          }\n+          isTrackingEnabled = !isTrackingEnabled;\n+        });", "originalCommit": "28110cd7cbd37a51faaa621eb32d6edd8457cd6b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "16dce4ce0b077b115906f521f77aab63f199a13a", "chunk": "diff --git a/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java b/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\nindex 65d70cab..ba541272 100644\n--- a/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\n+++ b/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\n\n@@ -17,7 +17,6 @@\n \n package com.esri.samples.show_location_history;\n \n-import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n import java.util.Calendar;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg4NDQ3Mg==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r498884472", "bodyText": "the only pitfall to this is that of course, if you click and drag around the mapview you could lose the simulated data point unless you click the button again. If you click the button and don't touch the mapview, then the simulated data point is kept nicely within the mapview though.\nIs this as designed? What it be worth considering setting it up so that even if you interact with the mapview it always comes back to keep the point in the mapview?", "author": "Rachael-E", "createdAt": "2020-10-02T15:13:44Z", "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.LocationDataSource;\n+import com.esri.arcgisruntime.location.LocationDataSource.LocationChangedListener;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;\n+  private Point position;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Show Location History Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create a map with a dark gray canvas basemap\n+      ArcGISMap map = new ArcGISMap(Basemap.createDarkGrayCanvasVector());\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set the map views's viewpoint centered on Los Angeles, California and scaled\n+      mapView.setViewpoint(new Viewpoint(new Point(-13185535.98, 4037766.28,\n+        SpatialReferences.getWebMercator()), 7000));\n+\n+      // create a button that toggles the location tracking\n+      Button trackingButton = new Button(\"Start tracking\");\n+      trackingButton.setDisable(true);\n+\n+      // create a graphics overlay for the points and use a red circle for the symbols\n+      GraphicsOverlay locationHistoryOverlay = new GraphicsOverlay();\n+      SimpleMarkerSymbol locationSymbol = new SimpleMarkerSymbol(\n+        SimpleMarkerSymbol.Style.CIRCLE, 0xFFFF0000, 10f);\n+      SimpleRenderer locationHistoryRenderer = new SimpleRenderer(locationSymbol);\n+      locationHistoryOverlay.setRenderer(locationHistoryRenderer);\n+\n+      // create a graphics overlay for the lines connecting the points and use a green line for the symbol\n+      GraphicsOverlay locationHistoryLineOverlay = new GraphicsOverlay();\n+      SimpleLineSymbol locationLineSymbol = new SimpleLineSymbol(\n+        SimpleLineSymbol.Style.SOLID, 0xFF00FF00, 2.0f);\n+      SimpleRenderer locationHistoryLineRenderer = new SimpleRenderer(locationLineSymbol);\n+      locationHistoryLineOverlay.setRenderer(locationHistoryLineRenderer);\n+\n+      // add the graphics overlays to the map view\n+      mapView.getGraphicsOverlays().addAll(Arrays.asList(locationHistoryOverlay, locationHistoryLineOverlay));\n+\n+      // create a polyline builder to connect the location points\n+      PolylineBuilder polylineBuilder = new PolylineBuilder(SpatialReferences.getWebMercator());\n+\n+      try {\n+        // access the json of the location points\n+        String polylineData = IOUtils.toString(getClass().getResourceAsStream(\"/show_location_history/polyline_data.json\"),\n+          StandardCharsets.UTF_8);\n+        // create a polyline from the location points\n+        Polyline routePolyline = (Polyline) Geometry.fromJson(polylineData,\n+          SpatialReferences.getWebMercator());\n+\n+        // create a simulated location data source\n+        SimulatedLocationDataSource simulatedLocationDataSource = new SimulatedLocationDataSource();\n+        // set the location of the simulated location data source with simulation parameters to set a consistent velocity\n+        simulatedLocationDataSource.setLocations(\n+          routePolyline, new SimulationParameters(Calendar.getInstance(), 30.0, 0.0, 0.0));\n+\n+        // configure the map view's location display to follow the simulated location data source\n+        LocationDisplay locationDisplay = mapView.getLocationDisplay();\n+        locationDisplay.setLocationDataSource(simulatedLocationDataSource);\n+        locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+        locationDisplay.setInitialZoomScale(7000);\n+\n+        // create a listener to track the previous location, to draw a route line behind the location display symbol\n+        LocationChangedListener locationChangedListener = (LocationDataSource.LocationChangedEvent locationChangedEvent) -> {\n+\n+          // reset the old polyline connecting the points\n+            locationHistoryLineOverlay.getGraphics().clear();\n+\n+            // add any previous position to the history\n+            if (position != null) {\n+              // add the new point to the polyline\n+              polylineBuilder.addPoint(position);\n+              // add the new point to the graphics overlay\n+              locationHistoryOverlay.getGraphics().add(new Graphic(position));\n+            }\n+            // store the current position\n+            position = locationChangedEvent.getLocation().getPosition();\n+\n+            // add the updated polyline to the graphics overlay\n+            locationHistoryLineOverlay.getGraphics().add(new Graphic(polylineBuilder.toGeometry()));\n+          };\n+\n+        trackingButton.setOnAction(event -> {\n+          // if the user has panned away from the location display, turn it on again\n+          if (locationDisplay.getAutoPanMode() == LocationDisplay.AutoPanMode.OFF) {\n+            locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+          }", "originalCommit": "28110cd7cbd37a51faaa621eb32d6edd8457cd6b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "16dce4ce0b077b115906f521f77aab63f199a13a", "chunk": "diff --git a/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java b/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\nindex 65d70cab..ba541272 100644\n--- a/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\n+++ b/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\n\n@@ -17,7 +17,6 @@\n \n package com.esri.samples.show_location_history;\n \n-import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n import java.util.Calendar;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg4Njc0MQ==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r498886741", "bodyText": "this can all go on the one line without exceeding the recommended line limit\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Polyline routePolyline = (Polyline) Geometry.fromJson(polylineData,\n          \n          \n            \n                      SpatialReferences.getWebMercator());\n          \n          \n            \n                    Polyline routePolyline = (Polyline) Geometry.fromJson(polylineData, SpatialReferences.getWebMercator());", "author": "Rachael-E", "createdAt": "2020-10-02T15:17:37Z", "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.LocationDataSource;\n+import com.esri.arcgisruntime.location.LocationDataSource.LocationChangedListener;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;\n+  private Point position;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Show Location History Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create a map with a dark gray canvas basemap\n+      ArcGISMap map = new ArcGISMap(Basemap.createDarkGrayCanvasVector());\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set the map views's viewpoint centered on Los Angeles, California and scaled\n+      mapView.setViewpoint(new Viewpoint(new Point(-13185535.98, 4037766.28,\n+        SpatialReferences.getWebMercator()), 7000));\n+\n+      // create a button that toggles the location tracking\n+      Button trackingButton = new Button(\"Start tracking\");\n+      trackingButton.setDisable(true);\n+\n+      // create a graphics overlay for the points and use a red circle for the symbols\n+      GraphicsOverlay locationHistoryOverlay = new GraphicsOverlay();\n+      SimpleMarkerSymbol locationSymbol = new SimpleMarkerSymbol(\n+        SimpleMarkerSymbol.Style.CIRCLE, 0xFFFF0000, 10f);\n+      SimpleRenderer locationHistoryRenderer = new SimpleRenderer(locationSymbol);\n+      locationHistoryOverlay.setRenderer(locationHistoryRenderer);\n+\n+      // create a graphics overlay for the lines connecting the points and use a green line for the symbol\n+      GraphicsOverlay locationHistoryLineOverlay = new GraphicsOverlay();\n+      SimpleLineSymbol locationLineSymbol = new SimpleLineSymbol(\n+        SimpleLineSymbol.Style.SOLID, 0xFF00FF00, 2.0f);\n+      SimpleRenderer locationHistoryLineRenderer = new SimpleRenderer(locationLineSymbol);\n+      locationHistoryLineOverlay.setRenderer(locationHistoryLineRenderer);\n+\n+      // add the graphics overlays to the map view\n+      mapView.getGraphicsOverlays().addAll(Arrays.asList(locationHistoryOverlay, locationHistoryLineOverlay));\n+\n+      // create a polyline builder to connect the location points\n+      PolylineBuilder polylineBuilder = new PolylineBuilder(SpatialReferences.getWebMercator());\n+\n+      try {\n+        // access the json of the location points\n+        String polylineData = IOUtils.toString(getClass().getResourceAsStream(\"/show_location_history/polyline_data.json\"),\n+          StandardCharsets.UTF_8);\n+        // create a polyline from the location points\n+        Polyline routePolyline = (Polyline) Geometry.fromJson(polylineData,\n+          SpatialReferences.getWebMercator());", "originalCommit": "28110cd7cbd37a51faaa621eb32d6edd8457cd6b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "16dce4ce0b077b115906f521f77aab63f199a13a", "chunk": "diff --git a/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java b/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\nindex 65d70cab..ba541272 100644\n--- a/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\n+++ b/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\n\n@@ -17,7 +17,6 @@\n \n package com.esri.samples.show_location_history;\n \n-import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n import java.util.Calendar;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk0MTk3MQ==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r498941971", "bodyText": "the indentation is off by two on this block (IntelliJ has a shortcut to auto-indent if you haven't seen that already!)", "author": "Rachael-E", "createdAt": "2020-10-02T17:02:43Z", "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.LocationDataSource;\n+import com.esri.arcgisruntime.location.LocationDataSource.LocationChangedListener;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;\n+  private Point position;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Show Location History Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create a map with a dark gray canvas basemap\n+      ArcGISMap map = new ArcGISMap(Basemap.createDarkGrayCanvasVector());\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set the map views's viewpoint centered on Los Angeles, California and scaled\n+      mapView.setViewpoint(new Viewpoint(new Point(-13185535.98, 4037766.28,\n+        SpatialReferences.getWebMercator()), 7000));\n+\n+      // create a button that toggles the location tracking\n+      Button trackingButton = new Button(\"Start tracking\");\n+      trackingButton.setDisable(true);\n+\n+      // create a graphics overlay for the points and use a red circle for the symbols\n+      GraphicsOverlay locationHistoryOverlay = new GraphicsOverlay();\n+      SimpleMarkerSymbol locationSymbol = new SimpleMarkerSymbol(\n+        SimpleMarkerSymbol.Style.CIRCLE, 0xFFFF0000, 10f);\n+      SimpleRenderer locationHistoryRenderer = new SimpleRenderer(locationSymbol);\n+      locationHistoryOverlay.setRenderer(locationHistoryRenderer);\n+\n+      // create a graphics overlay for the lines connecting the points and use a green line for the symbol\n+      GraphicsOverlay locationHistoryLineOverlay = new GraphicsOverlay();\n+      SimpleLineSymbol locationLineSymbol = new SimpleLineSymbol(\n+        SimpleLineSymbol.Style.SOLID, 0xFF00FF00, 2.0f);\n+      SimpleRenderer locationHistoryLineRenderer = new SimpleRenderer(locationLineSymbol);\n+      locationHistoryLineOverlay.setRenderer(locationHistoryLineRenderer);\n+\n+      // add the graphics overlays to the map view\n+      mapView.getGraphicsOverlays().addAll(Arrays.asList(locationHistoryOverlay, locationHistoryLineOverlay));\n+\n+      // create a polyline builder to connect the location points\n+      PolylineBuilder polylineBuilder = new PolylineBuilder(SpatialReferences.getWebMercator());\n+\n+      try {\n+        // access the json of the location points\n+        String polylineData = IOUtils.toString(getClass().getResourceAsStream(\"/show_location_history/polyline_data.json\"),\n+          StandardCharsets.UTF_8);\n+        // create a polyline from the location points\n+        Polyline routePolyline = (Polyline) Geometry.fromJson(polylineData,\n+          SpatialReferences.getWebMercator());\n+\n+        // create a simulated location data source\n+        SimulatedLocationDataSource simulatedLocationDataSource = new SimulatedLocationDataSource();\n+        // set the location of the simulated location data source with simulation parameters to set a consistent velocity\n+        simulatedLocationDataSource.setLocations(\n+          routePolyline, new SimulationParameters(Calendar.getInstance(), 30.0, 0.0, 0.0));\n+\n+        // configure the map view's location display to follow the simulated location data source\n+        LocationDisplay locationDisplay = mapView.getLocationDisplay();\n+        locationDisplay.setLocationDataSource(simulatedLocationDataSource);\n+        locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+        locationDisplay.setInitialZoomScale(7000);\n+\n+        // create a listener to track the previous location, to draw a route line behind the location display symbol\n+        LocationChangedListener locationChangedListener = (LocationDataSource.LocationChangedEvent locationChangedEvent) -> {\n+\n+          // reset the old polyline connecting the points\n+            locationHistoryLineOverlay.getGraphics().clear();\n+\n+            // add any previous position to the history\n+            if (position != null) {\n+              // add the new point to the polyline\n+              polylineBuilder.addPoint(position);\n+              // add the new point to the graphics overlay\n+              locationHistoryOverlay.getGraphics().add(new Graphic(position));\n+            }\n+            // store the current position\n+            position = locationChangedEvent.getLocation().getPosition();\n+\n+            // add the updated polyline to the graphics overlay\n+            locationHistoryLineOverlay.getGraphics().add(new Graphic(polylineBuilder.toGeometry()));\n+          };", "originalCommit": "28110cd7cbd37a51faaa621eb32d6edd8457cd6b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "16dce4ce0b077b115906f521f77aab63f199a13a", "chunk": "diff --git a/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java b/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\nindex 65d70cab..ba541272 100644\n--- a/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\n+++ b/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\n\n@@ -17,7 +17,6 @@\n \n package com.esri.samples.show_location_history;\n \n-import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n import java.util.Calendar;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk0NDk1Mg==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r498944952", "bodyText": "something isn't quite right with this try catch block. This set up infers if anything within the block goes wrong, it's because there was an Error \"loading the simulated data\" which wouldn't be accurate. However, if anything does go wrong, it will bubble up to the try/catch initiated at the start of the start() method.\nTherefore we can remove this try/catch since anything going wrong with Json would be handled by the start() method try/catch. If we wanted to be extra safe for this data, we could put in an if condition to e.g. ensure the string isn't empty/the file exists and if it is return an Alert: but the data should be there since in this instance it is bundled with the sample (e.g. other sample data is not). Looking at our other samples bringing in resources as stream, looks like we don't put that extra check in (doesn't mean we shouldn't going forward, just an observation).", "author": "Rachael-E", "createdAt": "2020-10-02T17:08:51Z", "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.LocationDataSource;\n+import com.esri.arcgisruntime.location.LocationDataSource.LocationChangedListener;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;\n+  private Point position;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Show Location History Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create a map with a dark gray canvas basemap\n+      ArcGISMap map = new ArcGISMap(Basemap.createDarkGrayCanvasVector());\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set the map views's viewpoint centered on Los Angeles, California and scaled\n+      mapView.setViewpoint(new Viewpoint(new Point(-13185535.98, 4037766.28,\n+        SpatialReferences.getWebMercator()), 7000));\n+\n+      // create a button that toggles the location tracking\n+      Button trackingButton = new Button(\"Start tracking\");\n+      trackingButton.setDisable(true);\n+\n+      // create a graphics overlay for the points and use a red circle for the symbols\n+      GraphicsOverlay locationHistoryOverlay = new GraphicsOverlay();\n+      SimpleMarkerSymbol locationSymbol = new SimpleMarkerSymbol(\n+        SimpleMarkerSymbol.Style.CIRCLE, 0xFFFF0000, 10f);\n+      SimpleRenderer locationHistoryRenderer = new SimpleRenderer(locationSymbol);\n+      locationHistoryOverlay.setRenderer(locationHistoryRenderer);\n+\n+      // create a graphics overlay for the lines connecting the points and use a green line for the symbol\n+      GraphicsOverlay locationHistoryLineOverlay = new GraphicsOverlay();\n+      SimpleLineSymbol locationLineSymbol = new SimpleLineSymbol(\n+        SimpleLineSymbol.Style.SOLID, 0xFF00FF00, 2.0f);\n+      SimpleRenderer locationHistoryLineRenderer = new SimpleRenderer(locationLineSymbol);\n+      locationHistoryLineOverlay.setRenderer(locationHistoryLineRenderer);\n+\n+      // add the graphics overlays to the map view\n+      mapView.getGraphicsOverlays().addAll(Arrays.asList(locationHistoryOverlay, locationHistoryLineOverlay));\n+\n+      // create a polyline builder to connect the location points\n+      PolylineBuilder polylineBuilder = new PolylineBuilder(SpatialReferences.getWebMercator());\n+\n+      try {\n+        // access the json of the location points\n+        String polylineData = IOUtils.toString(getClass().getResourceAsStream(\"/show_location_history/polyline_data.json\"),\n+          StandardCharsets.UTF_8);\n+        // create a polyline from the location points\n+        Polyline routePolyline = (Polyline) Geometry.fromJson(polylineData,\n+          SpatialReferences.getWebMercator());\n+\n+        // create a simulated location data source\n+        SimulatedLocationDataSource simulatedLocationDataSource = new SimulatedLocationDataSource();\n+        // set the location of the simulated location data source with simulation parameters to set a consistent velocity\n+        simulatedLocationDataSource.setLocations(\n+          routePolyline, new SimulationParameters(Calendar.getInstance(), 30.0, 0.0, 0.0));\n+\n+        // configure the map view's location display to follow the simulated location data source\n+        LocationDisplay locationDisplay = mapView.getLocationDisplay();\n+        locationDisplay.setLocationDataSource(simulatedLocationDataSource);\n+        locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+        locationDisplay.setInitialZoomScale(7000);\n+\n+        // create a listener to track the previous location, to draw a route line behind the location display symbol\n+        LocationChangedListener locationChangedListener = (LocationDataSource.LocationChangedEvent locationChangedEvent) -> {\n+\n+          // reset the old polyline connecting the points\n+            locationHistoryLineOverlay.getGraphics().clear();\n+\n+            // add any previous position to the history\n+            if (position != null) {\n+              // add the new point to the polyline\n+              polylineBuilder.addPoint(position);\n+              // add the new point to the graphics overlay\n+              locationHistoryOverlay.getGraphics().add(new Graphic(position));\n+            }\n+            // store the current position\n+            position = locationChangedEvent.getLocation().getPosition();\n+\n+            // add the updated polyline to the graphics overlay\n+            locationHistoryLineOverlay.getGraphics().add(new Graphic(polylineBuilder.toGeometry()));\n+          };\n+\n+        trackingButton.setOnAction(event -> {\n+          // if the user has panned away from the location display, turn it on again\n+          if (locationDisplay.getAutoPanMode() == LocationDisplay.AutoPanMode.OFF) {\n+            locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+          }\n+          // toggle the location tracking when the button is clicked\n+          if (isTrackingEnabled) {\n+            trackingButton.setText(\"Start Tracking\");\n+            simulatedLocationDataSource.removeLocationChangedListener(locationChangedListener);\n+          } else {\n+            trackingButton.setText(\"Stop Tracking\");\n+            simulatedLocationDataSource.addLocationChangedListener(locationChangedListener);\n+          }\n+          isTrackingEnabled = !isTrackingEnabled;\n+        });\n+\n+        // enable the button interactions when the map is loaded\n+        map.addDoneLoadingListener(() -> {\n+\n+          if (map.getLoadStatus() == LoadStatus.LOADED) {\n+            trackingButton.setDisable(false);\n+\n+            // start the simulated location data source\n+            simulatedLocationDataSource.startAsync();\n+\n+          } else {\n+            new Alert(Alert.AlertType.ERROR, \"Map failed to load\").show();\n+          }\n+        });\n+\n+        // add the map view and tracking button to the stack pane\n+        stackPane.getChildren().addAll(mapView, trackingButton);\n+        StackPane.setAlignment(trackingButton, Pos.TOP_LEFT);\n+        StackPane.setMargin(trackingButton, new Insets(10, 0, 0, 10));\n+\n+      } catch (IOException e) {", "originalCommit": "28110cd7cbd37a51faaa621eb32d6edd8457cd6b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "16dce4ce0b077b115906f521f77aab63f199a13a", "chunk": "diff --git a/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java b/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\nindex 65d70cab..ba541272 100644\n--- a/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\n+++ b/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\n\n@@ -17,7 +17,6 @@\n \n package com.esri.samples.show_location_history;\n \n-import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n import java.util.Calendar;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ5Njc2NQ==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r499496765", "bodyText": "remove excess line here", "author": "Rachael-E", "createdAt": "2020-10-05T10:26:17Z", "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.LocationDataSource;\n+import com.esri.arcgisruntime.location.LocationDataSource.LocationChangedListener;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+", "originalCommit": "28110cd7cbd37a51faaa621eb32d6edd8457cd6b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "16dce4ce0b077b115906f521f77aab63f199a13a", "chunk": "diff --git a/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java b/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\nindex 65d70cab..ba541272 100644\n--- a/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\n+++ b/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\n\n@@ -17,7 +17,6 @@\n \n package com.esri.samples.show_location_history;\n \n-import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n import java.util.Calendar;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDE5NjMwMA==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r500196300", "bodyText": "we can put in a direct reference to why the map has failed to load with:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        new Alert(Alert.AlertType.ERROR, \"Map failed to load\").show();\n          \n          \n            \n                        new Alert(Alert.AlertType.ERROR, \"Map failed to load\" +       map.getLoadError().getCause().getMessage()).show();", "author": "Rachael-E", "createdAt": "2020-10-06T11:20:01Z", "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Copyright 2020 Esri\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.esri.samples.show_location_history;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+\n+import javafx.application.Application;\n+import javafx.geometry.Insets;\n+import javafx.geometry.Pos;\n+import javafx.scene.Scene;\n+import javafx.scene.control.Alert;\n+import javafx.scene.control.Button;\n+import javafx.scene.layout.StackPane;\n+import javafx.stage.Stage;\n+\n+import com.esri.arcgisruntime.geometry.Geometry;\n+import com.esri.arcgisruntime.geometry.Point;\n+import com.esri.arcgisruntime.geometry.Polyline;\n+import com.esri.arcgisruntime.geometry.PolylineBuilder;\n+import com.esri.arcgisruntime.geometry.SpatialReferences;\n+import com.esri.arcgisruntime.loadable.LoadStatus;\n+import com.esri.arcgisruntime.location.LocationDataSource;\n+import com.esri.arcgisruntime.location.LocationDataSource.LocationChangedListener;\n+import com.esri.arcgisruntime.location.SimulatedLocationDataSource;\n+import com.esri.arcgisruntime.location.SimulationParameters;\n+import com.esri.arcgisruntime.mapping.ArcGISMap;\n+import com.esri.arcgisruntime.mapping.Basemap;\n+import com.esri.arcgisruntime.mapping.Viewpoint;\n+import com.esri.arcgisruntime.mapping.view.Graphic;\n+import com.esri.arcgisruntime.mapping.view.GraphicsOverlay;\n+import com.esri.arcgisruntime.mapping.view.LocationDisplay;\n+import com.esri.arcgisruntime.mapping.view.MapView;\n+import com.esri.arcgisruntime.symbology.SimpleLineSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleMarkerSymbol;\n+import com.esri.arcgisruntime.symbology.SimpleRenderer;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+\n+public class ShowLocationHistorySample extends Application {\n+\n+  private MapView mapView;\n+  private boolean isTrackingEnabled = false;\n+  private Point position;\n+\n+  @Override\n+  public void start(Stage stage) {\n+\n+    try {\n+      // create stack pane and application scene\n+      StackPane stackPane = new StackPane();\n+      Scene scene = new Scene(stackPane);\n+\n+      // set title, size, and add scene to stage\n+      stage.setTitle(\"Show Location History Sample\");\n+      stage.setWidth(800);\n+      stage.setHeight(700);\n+      stage.setScene(scene);\n+      stage.show();\n+\n+      // create a map with a dark gray canvas basemap\n+      ArcGISMap map = new ArcGISMap(Basemap.createDarkGrayCanvasVector());\n+\n+      // create a map view and set its map\n+      mapView = new MapView();\n+      mapView.setMap(map);\n+\n+      // set the map views's viewpoint centered on Los Angeles, California and scaled\n+      mapView.setViewpoint(new Viewpoint(new Point(-13185535.98, 4037766.28,\n+        SpatialReferences.getWebMercator()), 7000));\n+\n+      // create a button that toggles the location tracking\n+      Button trackingButton = new Button(\"Start tracking\");\n+      trackingButton.setDisable(true);\n+\n+      // create a graphics overlay for the points and use a red circle for the symbols\n+      GraphicsOverlay locationHistoryOverlay = new GraphicsOverlay();\n+      SimpleMarkerSymbol locationSymbol = new SimpleMarkerSymbol(\n+        SimpleMarkerSymbol.Style.CIRCLE, 0xFFFF0000, 10f);\n+      SimpleRenderer locationHistoryRenderer = new SimpleRenderer(locationSymbol);\n+      locationHistoryOverlay.setRenderer(locationHistoryRenderer);\n+\n+      // create a graphics overlay for the lines connecting the points and use a green line for the symbol\n+      GraphicsOverlay locationHistoryLineOverlay = new GraphicsOverlay();\n+      SimpleLineSymbol locationLineSymbol = new SimpleLineSymbol(\n+        SimpleLineSymbol.Style.SOLID, 0xFF00FF00, 2.0f);\n+      SimpleRenderer locationHistoryLineRenderer = new SimpleRenderer(locationLineSymbol);\n+      locationHistoryLineOverlay.setRenderer(locationHistoryLineRenderer);\n+\n+      // add the graphics overlays to the map view\n+      mapView.getGraphicsOverlays().addAll(Arrays.asList(locationHistoryOverlay, locationHistoryLineOverlay));\n+\n+      // create a polyline builder to connect the location points\n+      PolylineBuilder polylineBuilder = new PolylineBuilder(SpatialReferences.getWebMercator());\n+\n+      try {\n+        // access the json of the location points\n+        String polylineData = IOUtils.toString(getClass().getResourceAsStream(\"/show_location_history/polyline_data.json\"),\n+          StandardCharsets.UTF_8);\n+        // create a polyline from the location points\n+        Polyline routePolyline = (Polyline) Geometry.fromJson(polylineData,\n+          SpatialReferences.getWebMercator());\n+\n+        // create a simulated location data source\n+        SimulatedLocationDataSource simulatedLocationDataSource = new SimulatedLocationDataSource();\n+        // set the location of the simulated location data source with simulation parameters to set a consistent velocity\n+        simulatedLocationDataSource.setLocations(\n+          routePolyline, new SimulationParameters(Calendar.getInstance(), 30.0, 0.0, 0.0));\n+\n+        // configure the map view's location display to follow the simulated location data source\n+        LocationDisplay locationDisplay = mapView.getLocationDisplay();\n+        locationDisplay.setLocationDataSource(simulatedLocationDataSource);\n+        locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+        locationDisplay.setInitialZoomScale(7000);\n+\n+        // create a listener to track the previous location, to draw a route line behind the location display symbol\n+        LocationChangedListener locationChangedListener = (LocationDataSource.LocationChangedEvent locationChangedEvent) -> {\n+\n+          // reset the old polyline connecting the points\n+            locationHistoryLineOverlay.getGraphics().clear();\n+\n+            // add any previous position to the history\n+            if (position != null) {\n+              // add the new point to the polyline\n+              polylineBuilder.addPoint(position);\n+              // add the new point to the graphics overlay\n+              locationHistoryOverlay.getGraphics().add(new Graphic(position));\n+            }\n+            // store the current position\n+            position = locationChangedEvent.getLocation().getPosition();\n+\n+            // add the updated polyline to the graphics overlay\n+            locationHistoryLineOverlay.getGraphics().add(new Graphic(polylineBuilder.toGeometry()));\n+          };\n+\n+        trackingButton.setOnAction(event -> {\n+          // if the user has panned away from the location display, turn it on again\n+          if (locationDisplay.getAutoPanMode() == LocationDisplay.AutoPanMode.OFF) {\n+            locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+          }\n+          // toggle the location tracking when the button is clicked\n+          if (isTrackingEnabled) {\n+            trackingButton.setText(\"Start Tracking\");\n+            simulatedLocationDataSource.removeLocationChangedListener(locationChangedListener);\n+          } else {\n+            trackingButton.setText(\"Stop Tracking\");\n+            simulatedLocationDataSource.addLocationChangedListener(locationChangedListener);\n+          }\n+          isTrackingEnabled = !isTrackingEnabled;\n+        });\n+\n+        // enable the button interactions when the map is loaded\n+        map.addDoneLoadingListener(() -> {\n+\n+          if (map.getLoadStatus() == LoadStatus.LOADED) {\n+            trackingButton.setDisable(false);\n+\n+            // start the simulated location data source\n+            simulatedLocationDataSource.startAsync();\n+\n+          } else {\n+            new Alert(Alert.AlertType.ERROR, \"Map failed to load\").show();", "originalCommit": "28110cd7cbd37a51faaa621eb32d6edd8457cd6b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "16dce4ce0b077b115906f521f77aab63f199a13a", "chunk": "diff --git a/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java b/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\nindex 65d70cab..ba541272 100644\n--- a/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\n+++ b/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\n\n@@ -17,7 +17,6 @@\n \n package com.esri.samples.show_location_history;\n \n-import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n import java.util.Calendar;\n"}}, {"oid": "16dce4ce0b077b115906f521f77aab63f199a13a", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/16dce4ce0b077b115906f521f77aab63f199a13a", "message": "Remove try catch, add toggle button", "committedDate": "2020-10-07T09:21:59Z", "type": "commit"}, {"oid": "0823b566d030c0f196e7bfe07cf22afaca054925", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/0823b566d030c0f196e7bfe07cf22afaca054925", "message": "Update README.md", "committedDate": "2020-10-07T09:22:09Z", "type": "commit"}, {"oid": "940accfec4ec4a96cc5b3c7add28c19cf8e9d8d3", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/940accfec4ec4a96cc5b3c7add28c19cf8e9d8d3", "message": "Add highlighted button, gif", "committedDate": "2020-10-07T16:48:30Z", "type": "commit"}, {"oid": "0e17ad8c85c5b852e6b7b5998cc5650c3a2d7e06", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/0e17ad8c85c5b852e6b7b5998cc5650c3a2d7e06", "message": "Remove Hbox spacing", "committedDate": "2020-10-12T14:03:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMzMDM5NQ==", "url": "https://github.com/Esri/arcgis-runtime-samples-java/pull/556#discussion_r503330395", "bodyText": "let's add this in just to make it super neat!\ncontrolsHBox.setAlignment(Pos.CENTER);", "author": "Rachael-E", "createdAt": "2020-10-12T14:22:26Z", "path": "map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java", "diffHunk": "@@ -111,84 +120,88 @@ public void start(Stage stage) {\n       // create a polyline builder to connect the location points\n       PolylineBuilder polylineBuilder = new PolylineBuilder(SpatialReferences.getWebMercator());\n \n-      try {\n-        // access the json of the location points\n-        String polylineData = IOUtils.toString(getClass().getResourceAsStream(\"/show_location_history/polyline_data.json\"),\n-          StandardCharsets.UTF_8);\n-        // create a polyline from the location points\n-        Polyline routePolyline = (Polyline) Geometry.fromJson(polylineData,\n-          SpatialReferences.getWebMercator());\n-\n-        // create a simulated location data source\n-        SimulatedLocationDataSource simulatedLocationDataSource = new SimulatedLocationDataSource();\n-        // set the location of the simulated location data source with simulation parameters to set a consistent velocity\n-        simulatedLocationDataSource.setLocations(\n-          routePolyline, new SimulationParameters(Calendar.getInstance(), 30.0, 0.0, 0.0));\n-\n-        // configure the map view's location display to follow the simulated location data source\n-        LocationDisplay locationDisplay = mapView.getLocationDisplay();\n-        locationDisplay.setLocationDataSource(simulatedLocationDataSource);\n-        locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n-        locationDisplay.setInitialZoomScale(7000);\n-\n-        // create a listener to track the previous location, to draw a route line behind the location display symbol\n-        LocationChangedListener locationChangedListener = (LocationDataSource.LocationChangedEvent locationChangedEvent) -> {\n-\n-          // reset the old polyline connecting the points\n-            locationHistoryLineOverlay.getGraphics().clear();\n-\n-            // add any previous position to the history\n-            if (position != null) {\n-              // add the new point to the polyline\n-              polylineBuilder.addPoint(position);\n-              // add the new point to the graphics overlay\n-              locationHistoryOverlay.getGraphics().add(new Graphic(position));\n-            }\n-            // store the current position\n-            position = locationChangedEvent.getLocation().getPosition();\n-\n-            // add the updated polyline to the graphics overlay\n-            locationHistoryLineOverlay.getGraphics().add(new Graphic(polylineBuilder.toGeometry()));\n-          };\n-\n-        trackingButton.setOnAction(event -> {\n-          // if the user has panned away from the location display, turn it on again\n-          if (locationDisplay.getAutoPanMode() == LocationDisplay.AutoPanMode.OFF) {\n-            locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n-          }\n-          // toggle the location tracking when the button is clicked\n-          if (isTrackingEnabled) {\n-            trackingButton.setText(\"Start Tracking\");\n-            simulatedLocationDataSource.removeLocationChangedListener(locationChangedListener);\n-          } else {\n-            trackingButton.setText(\"Stop Tracking\");\n-            simulatedLocationDataSource.addLocationChangedListener(locationChangedListener);\n-          }\n-          isTrackingEnabled = !isTrackingEnabled;\n-        });\n-\n-        // enable the button interactions when the map is loaded\n-        map.addDoneLoadingListener(() -> {\n-\n-          if (map.getLoadStatus() == LoadStatus.LOADED) {\n-            trackingButton.setDisable(false);\n-\n-            // start the simulated location data source\n-            simulatedLocationDataSource.startAsync();\n-\n-          } else {\n-            new Alert(Alert.AlertType.ERROR, \"Map failed to load\").show();\n-          }\n-        });\n-\n-        // add the map view and tracking button to the stack pane\n-        stackPane.getChildren().addAll(mapView, trackingButton);\n-        StackPane.setAlignment(trackingButton, Pos.TOP_LEFT);\n-        StackPane.setMargin(trackingButton, new Insets(10, 0, 0, 10));\n-\n-      } catch (IOException e) {\n-        new Alert(Alert.AlertType.ERROR, \"Error loading simulated data\").show();\n-      }\n+      // access the json of the location points\n+      String polylineData = IOUtils.toString(getClass().getResourceAsStream(\"/show_location_history/polyline_data.json\"), StandardCharsets.UTF_8);\n+      // create a polyline from the location points\n+      Polyline routePolyline = (Polyline) Geometry.fromJson(polylineData, SpatialReferences.getWebMercator());\n+\n+      // create a simulated location data source\n+      SimulatedLocationDataSource simulatedLocationDataSource = new SimulatedLocationDataSource();\n+      // set the location of the simulated location data source with simulation parameters to set a consistent velocity\n+      simulatedLocationDataSource.setLocations(\n+        routePolyline, new SimulationParameters(Calendar.getInstance(), 30.0, 0.0, 0.0));\n+\n+      // configure the map view's location display to follow the simulated location data source\n+      LocationDisplay locationDisplay = mapView.getLocationDisplay();\n+      locationDisplay.setLocationDataSource(simulatedLocationDataSource);\n+      locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+      locationDisplay.setInitialZoomScale(7000);\n+\n+      // create a listener to track the previous location, to draw a route line behind the location display symbol\n+      LocationChangedListener locationChangedListener =\n+        (LocationDataSource.LocationChangedEvent locationChangedEvent) -> {\n+\n+        // reset the old polyline connecting the points\n+        locationHistoryLineOverlay.getGraphics().clear();\n+\n+        // add any previous position to the history\n+        if (position != null) {\n+          // add the new point to the polyline\n+          polylineBuilder.addPoint(position);\n+          // add the new point to the graphics overlay\n+          locationHistoryOverlay.getGraphics().add(new Graphic(position));\n+        }\n+        // store the current position\n+        position = locationChangedEvent.getLocation().getPosition();\n+\n+        // add the updated polyline to the graphics overlay\n+        locationHistoryLineOverlay.getGraphics().add(new Graphic(polylineBuilder.toGeometry()));\n+      };\n+\n+      trackingButton.setOnAction(event -> {\n+        // if the user has panned away from the location display, turn it on again\n+        if (locationDisplay.getAutoPanMode() == LocationDisplay.AutoPanMode.OFF) {\n+          locationDisplay.setAutoPanMode(LocationDisplay.AutoPanMode.RECENTER);\n+        }\n+        // toggle the location tracking when the button is clicked\n+        if (trackingButton.isSelected()) {\n+          simulatedLocationDataSource.addLocationChangedListener(locationChangedListener);\n+          trackingButton.setText(\"Active\");\n+          trackingButton.setStyle(\"-fx-focus-color: #00ff00;\");\n+        } else {\n+          simulatedLocationDataSource.removeLocationChangedListener(locationChangedListener);\n+          trackingButton.setText(\"Stopped\");\n+          trackingButton.setStyle(\"-fx-focus-color: #f16345;\");\n+        }\n+      });\n+\n+      // enable the button interactions when the map is loaded\n+      map.addDoneLoadingListener(() -> {\n+\n+        if (map.getLoadStatus() == LoadStatus.LOADED) {\n+          trackingButton.setDisable(false);\n+\n+          // start the simulated location data source\n+          simulatedLocationDataSource.startAsync();\n+\n+        } else {\n+          new Alert(Alert.AlertType.ERROR, \"Map failed to load: \" + map.getLoadError().getCause().getMessage()).show();\n+        }\n+      });\n+\n+      // create a control panel and add the label and button UI components\n+      HBox controlsHBox = new HBox(6);\n+      controlsHBox.setBackground(new Background(new BackgroundFill(Paint.valueOf(\"rgba(0,0,0,0.3)\"), CornerRadii.EMPTY, Insets.EMPTY)));\n+      controlsHBox.setPadding(new Insets(10.0));\n+      controlsHBox.setMaxSize(180, 50);", "originalCommit": "940accfec4ec4a96cc5b3c7add28c19cf8e9d8d3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "78ba70db1728bbccb2450a87a14d232ccf9fcc66", "chunk": "diff --git a/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java b/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\nindex 1dd3c616..8e27b7eb 100644\n--- a/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\n+++ b/map_view/show-location-history/src/main/java/com/esri/samples/show_location_history/ShowLocationHistorySample.java\n\n@@ -190,9 +190,10 @@ public class ShowLocationHistorySample extends Application {\n       });\n \n       // create a control panel and add the label and button UI components\n-      HBox controlsHBox = new HBox(6);\n+      HBox controlsHBox = new HBox();\n       controlsHBox.setBackground(new Background(new BackgroundFill(Paint.valueOf(\"rgba(0,0,0,0.3)\"), CornerRadii.EMPTY, Insets.EMPTY)));\n       controlsHBox.setPadding(new Insets(10.0));\n+      controlsHBox.setAlignment(Pos.CENTER);\n       controlsHBox.setMaxSize(180, 50);\n       controlsHBox.getStyleClass().add(\"panel-region\");\n       controlsHBox.getChildren().addAll(trackingLabel, trackingButton);\n"}}, {"oid": "78ba70db1728bbccb2450a87a14d232ccf9fcc66", "url": "https://github.com/Esri/arcgis-runtime-samples-java/commit/78ba70db1728bbccb2450a87a14d232ccf9fcc66", "message": "Fix comments from PR", "committedDate": "2020-10-12T16:44:19Z", "type": "commit"}]}