{"pr_number": 825, "pr_title": "[JENKINS-63518] Cancel job when Kubernetes API returns a HTTP 4xx when scheduling a pod.", "pr_createdAt": "2020-08-28T02:51:30Z", "pr_url": "https://github.com/jenkinsci/kubernetes-plugin/pull/825", "timeline": [{"oid": "a666b392f7eabac7dc9bae59ce5bb7dae9738e99", "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/a666b392f7eabac7dc9bae59ce5bb7dae9738e99", "message": "Revert responsibility to cancel jobs with invalid pod templates back to the KubernetesLauncher using thrown InvalidPodTemplateException", "committedDate": "2020-08-21T22:09:01Z", "type": "commit"}, {"oid": "fd3b805230a6e02b78bd6ec9df182e045562be66", "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/fd3b805230a6e02b78bd6ec9df182e045562be66", "message": "Revert \"Revert responsibility to cancel jobs with invalid pod templates back to the KubernetesLauncher using thrown InvalidPodTemplateException\"\n\nThis reverts commit a666b392f7eabac7dc9bae59ce5bb7dae9738e99.", "committedDate": "2020-08-26T21:11:26Z", "type": "commit"}, {"oid": "0318a6f41f301b25cb4b79ad1a90b80389020ab5", "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/0318a6f41f301b25cb4b79ad1a90b80389020ab5", "message": "Merge remote-tracking branch 'upstream/master'", "committedDate": "2020-08-26T21:15:26Z", "type": "commit"}, {"oid": "2f55f9f19cbd8f32ef13ab681a39c07961d86260", "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/2f55f9f19cbd8f32ef13ab681a39c07961d86260", "message": "Merge remote-tracking branch 'upstream/master' into opa", "committedDate": "2020-08-27T21:16:52Z", "type": "commit"}, {"oid": "7e14fa704c9cc8b0f1f9cf44b872b6777ee1367b", "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/7e14fa704c9cc8b0f1f9cf44b872b6777ee1367b", "message": "Move job cancellation to PodUtils class", "committedDate": "2020-08-27T21:32:58Z", "type": "commit"}, {"oid": "87fbcbaf23ec7d835e7937177882000319bac02c", "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/87fbcbaf23ec7d835e7937177882000319bac02c", "message": "Add check for KubernetesClientException indicating OPA violation, cancels associated build", "committedDate": "2020-08-27T21:50:25Z", "type": "commit"}, {"oid": "70c2eba4ac42b9ae5ea45db130800515206fba7b", "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/70c2eba4ac42b9ae5ea45db130800515206fba7b", "message": "changed StringUtils import", "committedDate": "2020-08-28T02:45:35Z", "type": "commit"}, {"oid": "b12ae5aed00734b6fe0c426ffe01446ed65ecbb4", "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/b12ae5aed00734b6fe0c426ffe01446ed65ecbb4", "message": "update white space check method", "committedDate": "2020-08-28T02:47:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTAxMjE3NQ==", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/825#discussion_r479012175", "bodyText": "OPA is just one reason for potential pod rejection. The code should be refactored to handle any failure to create pod.", "author": "Vlatombe", "createdAt": "2020-08-28T09:23:10Z", "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesLauncher.java", "diffHunk": "@@ -124,12 +124,22 @@ public synchronized void launch(SlaveComputer computer, TaskListener listener) {\n                     .stream().filter(s -> StringUtils.isNotBlank(s)).findFirst().orElse(null);\n             slave.setNamespace(namespace);\n \n+\n+            TaskListener runListener = template.getListener();\n+\n             LOGGER.log(Level.FINE, \"Creating Pod: {0}/{1}\", new Object[] { namespace, podName });\n-            pod = client.pods().inNamespace(namespace).create(pod);\n+            try {\n+                pod = client.pods().inNamespace(namespace).create(pod);\n+            } catch (KubernetesClientException e) {\n+                if (e.getMessage() != null && e.getMessage().contains(\"pod rejected due to\") && e.getMessage().contains(\"openpolicyagent\")) {\n+                    runListener.getLogger().printf(\"ERROR: Unable to create pod. \" + e.getMessage());\n+                    PodUtils.cancelInvalidPodTemplateJob(pod, \"OPA Violation\");", "originalCommit": "b12ae5aed00734b6fe0c426ffe01446ed65ecbb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ0Nzg2OA==", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/825#discussion_r479447868", "bodyText": "I'm not aware of the full list of reasons for pod rejection, not even sure if such an extensive list can be compiled. Therefore, would a simple retry be the solution for some of these pod rejection reasons? Therefore, we wouldn't want them all to be lumped into the same block which cancels the caller build item?", "author": "pyieh", "createdAt": "2020-08-28T17:41:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTAxMjE3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ1MDg0MQ==", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/825#discussion_r479450841", "bodyText": "Does API server return a unique return code indicating admission controller rejections? In that case this code snippet can be refactored to look for that code and cancel the job as the job will never progress.", "author": "narayanan", "createdAt": "2020-08-28T17:48:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTAxMjE3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ2Njc3OA==", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/825#discussion_r479466778", "bodyText": "Based on couple of examples of bad pod yaml's I tried, I see kube-apiserver returning code in the range of 400 - 499 for bad requests.. can we look for this and mark the build as failed?\n{\n    \"kind\": \"Status\",\n    \"apiVersion\": \"v1\",\n    \"metadata\": {},\n    \"status\": \"Failure\",\n    \"message\": \"admission webhook \\\"mutating-webhook.openpolicyagent.org\\\" denied the request: pod rejected due to unauthorized usage of spec.volumes[_].hostPath for paths [\\\"/var/run/docker.sock\\\"]\",\n    \"reason\": \"pod rejected due to unauthorized usage of spec.volumes[_].hostPath for paths [\\\"/var/run/docker.sock\\\"]\",\n    \"code\": 400\n}\n{\n    \"kind\": \"Status\",\n    \"apiVersion\": \"v1\",\n    \"metadata\": {},\n    \"status\": \"Failure\",\n    \"message\": \"Pod \\\"foo\\\" is invalid: spec.containers[0].image: Required value\",\n    \"reason\": \"Invalid\",\n    \"details\": {\n        \"name\": \"foo\",\n        \"kind\": \"Pod\",\n        \"causes\": [\n            {\n                \"reason\": \"FieldValueRequired\",\n                \"message\": \"Required value\",\n                \"field\": \"spec.containers[0].image\"\n            }\n        ]\n    },\n    \"code\": 422\n}", "author": "narayanan", "createdAt": "2020-08-28T18:22:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTAxMjE3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUyODAwMg==", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/825#discussion_r479528002", "bodyText": "@narayanan My implementation already accounts for OPA violations with the search for pod rejected due to and openpolicyagent Strings, anything else I think would be too specific to our use case.\nWhat @Vlatombe is talking about is expanding the search for non-OPA violation reason pod rejections. But I don't know if they would all require canceling the originating build, or if pod failure and shortly a retry by the kubernetes plugin to create the pod again would be suffice.", "author": "pyieh", "createdAt": "2020-08-28T20:49:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTAxMjE3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUyOTgxMw==", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/825#discussion_r479529813", "bodyText": "I think catching the 4xx errors should be enough. I'm thinking about any other implementation of validating webhook that could lead the api server to reject a pod spec", "author": "Vlatombe", "createdAt": "2020-08-28T20:54:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTAxMjE3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk0Mzc2OQ==", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/825#discussion_r479943769", "bodyText": "4xx should fail the build, while 5xx should be retried.", "author": "Vlatombe", "createdAt": "2020-08-31T07:22:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTAxMjE3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3MjI2OQ==", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/825#discussion_r480472269", "bodyText": "Updated the catch block to check the exception code instead of the message. Please take a look.", "author": "pyieh", "createdAt": "2020-08-31T23:31:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTAxMjE3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "aa5eda303890268b1b1d077af5567483658fede9", "chunk": "diff --git a/src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesLauncher.java b/src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesLauncher.java\nindex d0c7116c..477df3ec 100644\n--- a/src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesLauncher.java\n+++ b/src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesLauncher.java\n\n@@ -133,7 +133,7 @@ public class KubernetesLauncher extends JNLPLauncher {\n             } catch (KubernetesClientException e) {\n                 if (e.getMessage() != null && e.getMessage().contains(\"pod rejected due to\") && e.getMessage().contains(\"openpolicyagent\")) {\n                     runListener.getLogger().printf(\"ERROR: Unable to create pod. \" + e.getMessage());\n-                    PodUtils.cancelInvalidPodTemplateJob(pod, \"OPA Violation\");\n+                    PodUtils.cancelQueueItemFor(pod, \"OPA Violation\");\n                 }\n                 throw e;\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTAxNDk5Ng==", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/825#discussion_r479014996", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static void cancelInvalidPodTemplateJob(Pod pod, String reason) {\n          \n          \n            \n                public static void cancelQueueItemsFor(Pod pod, String reason) {", "author": "Vlatombe", "createdAt": "2020-08-28T09:24:33Z", "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/PodUtils.java", "diffHunk": "@@ -51,4 +56,21 @@\n     public static List<ContainerStatus> getContainers(Pod pod, Predicate<ContainerStatus> predicate) {\n         return getContainerStatus(pod).stream().filter(predicate).collect(Collectors.toList());\n     }\n+\n+    public static void cancelInvalidPodTemplateJob(Pod pod, String reason) {", "originalCommit": "b12ae5aed00734b6fe0c426ffe01446ed65ecbb4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aa5eda303890268b1b1d077af5567483658fede9", "chunk": "diff --git a/src/main/java/org/csanchez/jenkins/plugins/kubernetes/PodUtils.java b/src/main/java/org/csanchez/jenkins/plugins/kubernetes/PodUtils.java\nindex eb80444b..bd739608 100644\n--- a/src/main/java/org/csanchez/jenkins/plugins/kubernetes/PodUtils.java\n+++ b/src/main/java/org/csanchez/jenkins/plugins/kubernetes/PodUtils.java\n\n@@ -57,7 +57,7 @@ public final class PodUtils {\n         return getContainerStatus(pod).stream().filter(predicate).collect(Collectors.toList());\n     }\n \n-    public static void cancelInvalidPodTemplateJob(Pod pod, String reason) {\n+    public static void cancelQueueItemFor(Pod pod, String reason) {\n         Queue q = Jenkins.get().getQueue();\n         String runUrl = pod.getMetadata().getAnnotations().get(\"runUrl\");\n         for (Queue.Item item: q.getItems()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTAxNjA1Mg==", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/825#discussion_r479016052", "bodyText": "Too verbose\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            LOGGER.info(cancelMsg);\n          \n          \n            \n                            LOGGER.fine(cancelMsg);", "author": "Vlatombe", "createdAt": "2020-08-28T09:25:23Z", "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/PodUtils.java", "diffHunk": "@@ -51,4 +56,21 @@\n     public static List<ContainerStatus> getContainers(Pod pod, Predicate<ContainerStatus> predicate) {\n         return getContainerStatus(pod).stream().filter(predicate).collect(Collectors.toList());\n     }\n+\n+    public static void cancelInvalidPodTemplateJob(Pod pod, String reason) {\n+        Queue q = Jenkins.get().getQueue();\n+        String runUrl = pod.getMetadata().getAnnotations().get(\"runUrl\");\n+        for (Queue.Item item: q.getItems()) {\n+            if (item.task.getUrl().equals(runUrl)) {\n+                String cancelMsg = \"Canceling queue item: \" + item;\n+                if (reason != null && !StringUtils.isBlank(reason)) {\n+                    cancelMsg += \" due to \" + reason;\n+                }\n+                LOGGER.info(cancelMsg);", "originalCommit": "b12ae5aed00734b6fe0c426ffe01446ed65ecbb4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aa5eda303890268b1b1d077af5567483658fede9", "chunk": "diff --git a/src/main/java/org/csanchez/jenkins/plugins/kubernetes/PodUtils.java b/src/main/java/org/csanchez/jenkins/plugins/kubernetes/PodUtils.java\nindex eb80444b..bd739608 100644\n--- a/src/main/java/org/csanchez/jenkins/plugins/kubernetes/PodUtils.java\n+++ b/src/main/java/org/csanchez/jenkins/plugins/kubernetes/PodUtils.java\n\n@@ -57,7 +57,7 @@ public final class PodUtils {\n         return getContainerStatus(pod).stream().filter(predicate).collect(Collectors.toList());\n     }\n \n-    public static void cancelInvalidPodTemplateJob(Pod pod, String reason) {\n+    public static void cancelQueueItemFor(Pod pod, String reason) {\n         Queue q = Jenkins.get().getQueue();\n         String runUrl = pod.getMetadata().getAnnotations().get(\"runUrl\");\n         for (Queue.Item item: q.getItems()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTAxNjgwMw==", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/825#discussion_r479016803", "bodyText": "Too verbose\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    LOGGER.info(\"Failed to find corresponding queue item to cancel for pod: \" + pod);\n          \n          \n            \n                    LOGGER.fine(\"Failed to find corresponding queue item to cancel for pod: \" + pod);", "author": "Vlatombe", "createdAt": "2020-08-28T09:26:01Z", "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/PodUtils.java", "diffHunk": "@@ -51,4 +56,21 @@\n     public static List<ContainerStatus> getContainers(Pod pod, Predicate<ContainerStatus> predicate) {\n         return getContainerStatus(pod).stream().filter(predicate).collect(Collectors.toList());\n     }\n+\n+    public static void cancelInvalidPodTemplateJob(Pod pod, String reason) {\n+        Queue q = Jenkins.get().getQueue();\n+        String runUrl = pod.getMetadata().getAnnotations().get(\"runUrl\");\n+        for (Queue.Item item: q.getItems()) {\n+            if (item.task.getUrl().equals(runUrl)) {\n+                String cancelMsg = \"Canceling queue item: \" + item;\n+                if (reason != null && !StringUtils.isBlank(reason)) {\n+                    cancelMsg += \" due to \" + reason;\n+                }\n+                LOGGER.info(cancelMsg);\n+                q.cancel(item);\n+                break;\n+            }\n+        }\n+        LOGGER.info(\"Failed to find corresponding queue item to cancel for pod: \" + pod);", "originalCommit": "b12ae5aed00734b6fe0c426ffe01446ed65ecbb4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aa5eda303890268b1b1d077af5567483658fede9", "chunk": "diff --git a/src/main/java/org/csanchez/jenkins/plugins/kubernetes/PodUtils.java b/src/main/java/org/csanchez/jenkins/plugins/kubernetes/PodUtils.java\nindex eb80444b..bd739608 100644\n--- a/src/main/java/org/csanchez/jenkins/plugins/kubernetes/PodUtils.java\n+++ b/src/main/java/org/csanchez/jenkins/plugins/kubernetes/PodUtils.java\n\n@@ -57,7 +57,7 @@ public final class PodUtils {\n         return getContainerStatus(pod).stream().filter(predicate).collect(Collectors.toList());\n     }\n \n-    public static void cancelInvalidPodTemplateJob(Pod pod, String reason) {\n+    public static void cancelQueueItemFor(Pod pod, String reason) {\n         Queue q = Jenkins.get().getQueue();\n         String runUrl = pod.getMetadata().getAnnotations().get(\"runUrl\");\n         for (Queue.Item item: q.getItems()) {\n"}}, {"oid": "aa5eda303890268b1b1d077af5567483658fede9", "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/aa5eda303890268b1b1d077af5567483658fede9", "message": "renamed PodUtils' queue item cancel method, changed some logs from info to fine", "committedDate": "2020-08-28T20:51:55Z", "type": "commit"}, {"oid": "f9bc1fa8c7dfb91dd5411bec703d56cdd4832eec", "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/f9bc1fa8c7dfb91dd5411bec703d56cdd4832eec", "message": "changed Reaper's queue item cancel call", "committedDate": "2020-08-28T21:31:58Z", "type": "commit"}, {"oid": "6e7c0c374ac53244aabc1a9008aed250c5937ac0", "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/6e7c0c374ac53244aabc1a9008aed250c5937ac0", "message": "Change KubernetesClientException catch to check code instead of message for job cancellation", "committedDate": "2020-08-31T21:42:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3MzM4OQ==", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/825#discussion_r480473389", "bodyText": "String conversion needed? comparing just against the integer like the following snippet does not work?\nint code = e.getCode();\nif (code >= 400 && code < 500) {\n   // cancel the job\nelse if (code >= 500 && code < 600) {\n   // retry\n} else {\n   // retry\n}", "author": "narayanan", "createdAt": "2020-08-31T23:34:50Z", "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesLauncher.java", "diffHunk": "@@ -127,13 +130,18 @@ public synchronized void launch(SlaveComputer computer, TaskListener listener) {\n \n             TaskListener runListener = template.getListener();\n \n-            LOGGER.log(Level.FINE, \"Creating Pod: {0}/{1}\", new Object[] { namespace, podName });\n+            LOGGER.log(FINE, \"Creating Pod: {0}/{1}\", new Object[] { namespace, podName });\n             try {\n                 pod = client.pods().inNamespace(namespace).create(pod);\n             } catch (KubernetesClientException e) {\n-                if (e.getMessage() != null && e.getMessage().contains(\"pod rejected due to\") && e.getMessage().contains(\"openpolicyagent\")) {\n+                String k8sCode = Integer.toString(e.getCode());", "originalCommit": "6e7c0c374ac53244aabc1a9008aed250c5937ac0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDU0MTMzOA==", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/825#discussion_r480541338", "bodyText": "Updated.", "author": "pyieh", "createdAt": "2020-09-01T01:18:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ3MzM4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "45125f1c5a9af299fc4ae5ad5c7a24cc45ae1fb4", "chunk": "diff --git a/src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesLauncher.java b/src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesLauncher.java\nindex a65e9641..3e5b92c8 100644\n--- a/src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesLauncher.java\n+++ b/src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesLauncher.java\n\n@@ -134,11 +134,11 @@ public class KubernetesLauncher extends JNLPLauncher {\n             try {\n                 pod = client.pods().inNamespace(namespace).create(pod);\n             } catch (KubernetesClientException e) {\n-                String k8sCode = Integer.toString(e.getCode());\n-                if (k8sCode.startsWith(\"4\")) { // 4xx\n+                int k8sCode = e.getCode();\n+                if (k8sCode >= 400 && k8sCode < 500) { // 4xx\n                     runListener.getLogger().printf(\"ERROR: Unable to create pod. \" + e.getMessage());\n                     PodUtils.cancelQueueItemFor(pod, e.getMessage());\n-                } else if (k8sCode.startsWith(\"5\")) { // 5xx\n+                } else if (k8sCode >= 500 && k8sCode < 600) { // 5xx\n                     LOGGER.log(FINE,\"Kubernetes code {0}. Retrying...\", e.getCode());\n                 } else {\n                     LOGGER.log(WARNING, \"Unknown Kubernetes code {0}\", e.getCode());\n"}}, {"oid": "45125f1c5a9af299fc4ae5ad5c7a24cc45ae1fb4", "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/45125f1c5a9af299fc4ae5ad5c7a24cc45ae1fb4", "message": "update code check for ints and not string conversion", "committedDate": "2020-09-01T01:17:34Z", "type": "commit"}]}