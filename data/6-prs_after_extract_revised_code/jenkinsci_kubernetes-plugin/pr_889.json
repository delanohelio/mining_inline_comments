{"pr_number": 889, "pr_title": "Simplify caching by removing the close logic", "pr_createdAt": "2020-11-09T14:24:21Z", "pr_url": "https://github.com/jenkinsci/kubernetes-plugin/pull/889", "timeline": [{"oid": "94ce1fee94b79879ca61cfbb5c21347162e20880", "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/94ce1fee94b79879ca61cfbb5c21347162e20880", "message": "Simplify caching by removing the close logic\n\nAs per\nhttps://square.github.io/okhttp/4.x/okhttp/okhttp3/-ok-http-client/#shutdown-isnt-necessary\n\nAs the kubernetes client only close the underlying client, and it is not necessary to explicitly close http clients,\nit should be safe to leave as is once it is expired.\n\nIf some calling code is holding to old instances, they can still use them provided the token-based authentication still works.\n\nUltimately, this should prevent occurrences such as\n\n2020-11-04 06:49:56.143+0000 [id=329776]    WARNING\ni.f.k.c.d.i.WatchConnectionManager$1#onFailure: Exec Failure\njava.util.concurrent.RejectedExecutionException: Task\nokhttp3.RealCall$AsyncCall@556ba43e rejected from\njava.util.concurrent.ThreadPoolExecutor@217680e3[Terminated, pool size =\n0, active threads = 0, queued tasks = 0, completed tasks = 30]\n\nwhich denote some calling code trying to make a call using an http client instance which has been closed.", "committedDate": "2020-11-09T14:21:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk0NjM5OQ==", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/889#discussion_r519946399", "bodyText": "Were these used for anything?", "author": "jglick", "createdAt": "2020-11-09T16:31:20Z", "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesClientProvider.java", "diffHunk": "@@ -125,98 +86,6 @@ public KubernetesClient getClient() {\n         public int getValidity() {\n             return validity;\n         }\n-\n-        public Instant getExpired() {\n-            return expired;\n-        }\n-    }\n-\n-    @Extension\n-    public static class PurgeExpiredKubernetesClients extends AsyncPeriodicWork {\n-\n-        public PurgeExpiredKubernetesClients() {\n-            super(\"Purge expired KubernetesClients\");\n-        }\n-\n-        @Override\n-        public long getRecurrencePeriod() {\n-            return TimeUnit.SECONDS.toMillis(EXPIRED_CLIENTS_PURGE_PERIOD);\n-        }\n-\n-        @Override\n-        protected Level getNormalLoggingLevel() {\n-            return Level.FINEST;\n-        }\n-\n-        @Override\n-        protected void execute(TaskListener listener) {\n-            closeExpiredClients();\n-        }\n-    }\n-\n-    /**\n-     * Gracefully close expired clients\n-     * \n-     * @return whether some clients have been closed or not\n-     */\n-    @Restricted(NoExternalUse.class) // testing only\n-    public static boolean closeExpiredClients() {\n-        boolean b = false;\n-        if (expiredClients.isEmpty()) {\n-            return b;\n-        }\n-        LOGGER.log(Level.FINE, \"Closing {0} expired clients\",\n-                new Object[] { expiredClients.size() });\n-        for (Iterator<Client> it = expiredClients.iterator(); it.hasNext();) {\n-            Client expiredClient = it.next();\n-            // only purge it if the EXPIRED_CLIENTS_PURGE time has elapsed\n-            if (Instant.now().minus(EXPIRED_CLIENTS_PURGE_TIME, ChronoUnit.SECONDS)\n-                    .isBefore(expiredClient.getExpired())) {\n-                break;\n-            }\n-            KubernetesClient client = expiredClient.client;\n-            if (client instanceof HttpClientAware) {\n-                if (gracefulClose(client, ((HttpClientAware) client).getHttpClient())) {\n-                    it.remove();\n-                    b = true;\n-                }\n-            } else {\n-                LOGGER.log(Level.WARNING, \"{0} is not {1}, forcing close\",\n-                        new Object[] { client.toString(), HttpClientAware.class.getSimpleName() });\n-                client.close();\n-                it.remove();\n-                b = true;\n-            }\n-        }\n-        return b;\n-    }\n-\n-    @Restricted(NoExternalUse.class) // testing only\n-    public static boolean gracefulClose(KubernetesClient client, OkHttpClient httpClient) {\n-        Dispatcher dispatcher = httpClient.dispatcher();\n-        // Remove the client if there are no more users\n-        int runningCallsCount = dispatcher.runningCallsCount();\n-        int queuedCallsCount = dispatcher.queuedCallsCount();\n-        if (runningCallsCount == 0 && queuedCallsCount == 0) {\n-            LOGGER.log(Level.FINE, \"Closing {0}\", client.toString());\n-            client.close();\n-            return true;\n-        } else {\n-            LOGGER.log(Level.INFO, \"Not closing {0}: there are still running ({1}) or queued ({2}) calls\",\n-                    new Object[] { client.toString(), runningCallsCount, queuedCallsCount });\n-            return false;\n-        }\n-    }\n-\n-    private static volatile int runningCallsCount;\n-    private static volatile int queuedCallsCount;\n-\n-    public static int getRunningCallsCount() {\n-        return runningCallsCount;\n-    }\n-\n-    public static int getQueuedCallsCount() {\n-        return queuedCallsCount;\n     }", "originalCommit": "94ce1fee94b79879ca61cfbb5c21347162e20880", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3603b6014def169b672e7d87b9b712d3f7a62fa7", "chunk": "diff --git a/src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesClientProvider.java b/src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesClientProvider.java\nindex da594ad6..cf9dd624 100644\n--- a/src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesClientProvider.java\n+++ b/src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesClientProvider.java\n\n@@ -88,6 +92,17 @@ public class KubernetesClientProvider {\n         }\n     }\n \n+    private static volatile int runningCallsCount;\n+    private static volatile int queuedCallsCount;\n+\n+    public static int getRunningCallsCount() {\n+        return runningCallsCount;\n+    }\n+\n+    public static int getQueuedCallsCount() {\n+        return queuedCallsCount;\n+    }\n+\n     @Restricted(NoExternalUse.class) // testing only\n     public static void invalidate(String displayName) {\n         clients.invalidate(displayName);\n"}}, {"oid": "3603b6014def169b672e7d87b9b712d3f7a62fa7", "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/3603b6014def169b672e7d87b9b712d3f7a62fa7", "message": "Restore these", "committedDate": "2020-11-10T09:43:57Z", "type": "commit"}, {"oid": "7df73dd6871d69f2b72cd618a92efd4adaccc08d", "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/7df73dd6871d69f2b72cd618a92efd4adaccc08d", "message": "Remove cache size", "committedDate": "2020-11-10T09:44:22Z", "type": "commit"}, {"oid": "bc343cf9be9029402f8f5db623eb29505a84ff03", "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/bc343cf9be9029402f8f5db623eb29505a84ff03", "message": "Log something when the client is expired", "committedDate": "2020-11-10T09:54:20Z", "type": "commit"}, {"oid": "ebabd1e9827b825d10a85fd7ba5efe3234757474", "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/ebabd1e9827b825d10a85fd7ba5efe3234757474", "message": "Improve logging of k8s client invalidation", "committedDate": "2020-11-10T14:09:50Z", "type": "commit"}, {"oid": "016111f0e040ea014ddd285c403f59b9ca1033de", "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/016111f0e040ea014ddd285c403f59b9ca1033de", "message": "Remove redundant null-check", "committedDate": "2020-11-12T09:46:55Z", "type": "commit"}]}