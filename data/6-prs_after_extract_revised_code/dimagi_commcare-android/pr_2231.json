{"pr_number": 2231, "pr_title": "Add instrumentation tests for saved form using espresso", "pr_createdAt": "2020-05-04T10:10:40Z", "pr_url": "https://github.com/dimagi/commcare-android/pull/2231", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI5NDE5Ng==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r426294196", "bodyText": "can we offline install this from ccz in order to have faster test runtime ?", "author": "shubham1g5", "createdAt": "2020-05-17T19:11:13Z", "path": "app/instrumentation-tests/src/org/commcare/tests/SavedFormTest.java", "diffHunk": "@@ -0,0 +1,199 @@\n+package org.commcare.tests;\n+\n+import android.Manifest;\n+import android.app.Activity;\n+import android.app.Instrumentation;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+import android.net.Uri;\n+import android.provider.MediaStore;\n+import androidx.test.espresso.action.ViewActions;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import androidx.test.rule.ActivityTestRule;\n+import androidx.test.rule.GrantPermissionRule;\n+import androidx.test.runner.intent.IntentCallback;\n+import androidx.test.runner.intent.IntentMonitorRegistry;\n+import org.commcare.CommCareApplication;\n+import org.commcare.activities.DispatchActivity;\n+import org.commcare.activities.FormEntryActivity;\n+import org.commcare.dalvik.R;\n+import org.commcare.utils.Utility;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import java.io.OutputStream;\n+\n+import static androidx.test.espresso.Espresso.closeSoftKeyboard;\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.Espresso.pressBackUnconditionally;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.action.ViewActions.typeText;\n+import static androidx.test.espresso.assertion.ViewAssertions.matches;\n+import static androidx.test.espresso.intent.Intents.intending;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasAction;\n+import static androidx.test.espresso.matcher.ViewMatchers.isDisplayed;\n+import static androidx.test.espresso.matcher.ViewMatchers.isRoot;\n+import static androidx.test.espresso.matcher.ViewMatchers.withClassName;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static org.hamcrest.Matchers.endsWith;\n+import static org.hamcrest.Matchers.not;\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class SavedFormTest {\n+\n+    @Rule\n+    public ActivityTestRule<DispatchActivity> activityTestRule = new ActivityTestRule<>(DispatchActivity.class);\n+\n+    @Rule\n+    public IntentsTestRule<FormEntryActivity> intentsRule = new IntentsTestRule<>(FormEntryActivity.class);\n+\n+    @Rule\n+    public GrantPermissionRule permissionRule = GrantPermissionRule.grant(\n+            Manifest.permission.READ_PHONE_STATE,\n+            Manifest.permission.CALL_PHONE,\n+            Manifest.permission.ACCESS_FINE_LOCATION,\n+            Manifest.permission.ACCESS_COARSE_LOCATION,\n+            Manifest.permission.WRITE_EXTERNAL_STORAGE,\n+            Manifest.permission.READ_EXTERNAL_STORAGE,\n+            Manifest.permission.RECORD_AUDIO,\n+            Manifest.permission.CAMERA\n+    );\n+\n+    private IntentCallback intentCallback = intent -> {\n+        if (MediaStore.ACTION_IMAGE_CAPTURE.equals(intent.getAction())) {\n+            Uri uri = intent.getExtras().getParcelable(MediaStore.EXTRA_OUTPUT);\n+            Context context = InstrumentationRegistry.getInstrumentation().getTargetContext();\n+            Bitmap icon = BitmapFactory.decodeResource(\n+                    context.getResources(),\n+                    R.mipmap.ic_launcher);\n+            try (OutputStream outputStream = context.getContentResolver().openOutputStream(uri)) {\n+                icon.compress(Bitmap.CompressFormat.JPEG, 100, outputStream);\n+            } catch (Exception e) {\n+                e.printStackTrace();\n+            }\n+        }\n+    };\n+\n+    private void stubCamera() {\n+        // Build a result to return from the Camera app\n+        Intent resultData = new Intent();\n+        Instrumentation.ActivityResult result = new Instrumentation.ActivityResult(Activity.RESULT_OK, resultData);\n+\n+        // Stub out the Camera. When an intent is sent to the Camera, this tells Espresso to respond\n+        // with the ActivityResult we just created\n+        intending(hasAction(MediaStore.ACTION_IMAGE_CAPTURE)).respondWith(result);\n+    }\n+\n+    @Before\n+    public void login() {\n+        if (CommCareApplication.instance().getCurrentApp() == null) {\n+            Utility.installApp(\"2zI4jeQ\");", "originalCommit": "a0c9254e1274ac14bb4c47ae763e73a6db6ba24b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d3c56b3e96bc100c582e96aaa46723d23f1ad337", "chunk": "diff --git a/app/instrumentation-tests/src/org/commcare/tests/SavedFormTest.java b/app/instrumentation-tests/src/org/commcare/tests/SavedFormTest.java\nindex 924cd3fbf..f91aeaccb 100644\n--- a/app/instrumentation-tests/src/org/commcare/tests/SavedFormTest.java\n+++ b/app/instrumentation-tests/src/org/commcare/tests/SavedFormTest.java\n\n@@ -1,34 +1,14 @@\n package org.commcare.tests;\n \n-import android.Manifest;\n-import android.app.Activity;\n-import android.app.Instrumentation;\n-import android.content.Context;\n-import android.content.Intent;\n-import android.graphics.Bitmap;\n-import android.graphics.BitmapFactory;\n-import android.net.Uri;\n-import android.provider.MediaStore;\n import androidx.test.espresso.action.ViewActions;\n-import androidx.test.platform.app.InstrumentationRegistry;\n-import androidx.test.espresso.intent.rule.IntentsTestRule;\n import androidx.test.ext.junit.runners.AndroidJUnit4;\n import androidx.test.filters.LargeTest;\n-import androidx.test.rule.ActivityTestRule;\n-import androidx.test.rule.GrantPermissionRule;\n-import androidx.test.runner.intent.IntentCallback;\n-import androidx.test.runner.intent.IntentMonitorRegistry;\n-import org.commcare.CommCareApplication;\n-import org.commcare.activities.DispatchActivity;\n-import org.commcare.activities.FormEntryActivity;\n import org.commcare.dalvik.R;\n import org.commcare.utils.Utility;\n import org.junit.After;\n import org.junit.Before;\n-import org.junit.Rule;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n-import java.io.OutputStream;\n \n import static androidx.test.espresso.Espresso.closeSoftKeyboard;\n import static androidx.test.espresso.Espresso.onView;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI5NDYyMw==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r426294623", "bodyText": "Is there a reason these changes are needed ?", "author": "shubham1g5", "createdAt": "2020-05-17T19:15:44Z", "path": "app/src/org/commcare/tasks/SaveToDiskTask.java", "diffHunk": "@@ -289,25 +290,21 @@ public void setFormSavedListener(FormSavedListener fsl) {\n      * though, until all answers conform to their constraints/requirements.\n      */\n     private boolean hasInvalidAnswers(boolean markCompleted) {\n-        FormIndex i = FormEntryActivity.mFormController.getFormIndex();\n-        FormEntryActivity.mFormController.jumpToIndex(FormIndex.createBeginningOfFormIndex());\n-\n+        FormController formController = FormEntryActivity.mFormController;", "originalCommit": "a0c9254e1274ac14bb4c47ae763e73a6db6ba24b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4OTE1OA==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r426389158", "bodyText": "Yeah, so the earlier code used to modify the currentFormIndex to loop over all the questions. But if at the same time, some other thread also wants to get hold of the current question in screen, it'll have to use the currentFormIndex which might give wrong value, if this thread has already modified it. And hence may produce NPE in worst cases.\nSince, we've to loop over all the questions here, we don't really need to modify the currentFormIndex rather we can simply have another form index to get all the questions. And this will also make sure that the other threads who might be using the currentFormIndex at the same time don't get wrong values.", "author": "ShivamPokhriyal", "createdAt": "2020-05-18T06:13:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI5NDYyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgwNDQ2OQ==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r426804469", "bodyText": "Got it, thanks for the explanation. Only suggestion here would be to abstract this out into it's own PR so that it's easy to revert in case of any unseen edge cases.", "author": "shubham1g5", "createdAt": "2020-05-18T18:04:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI5NDYyMw=="}], "type": "inlineReview", "revised_code": {"commit": "d3c56b3e96bc100c582e96aaa46723d23f1ad337", "chunk": "diff --git a/app/src/org/commcare/tasks/SaveToDiskTask.java b/app/src/org/commcare/tasks/SaveToDiskTask.java\nindex 12ff5a3f5..86efc5b73 100644\n--- a/app/src/org/commcare/tasks/SaveToDiskTask.java\n+++ b/app/src/org/commcare/tasks/SaveToDiskTask.java\n\n@@ -290,21 +289,25 @@ public class SaveToDiskTask extends\n      * though, until all answers conform to their constraints/requirements.\n      */\n     private boolean hasInvalidAnswers(boolean markCompleted) {\n-        FormController formController = FormEntryActivity.mFormController;\n-        FormIndex currentFormIndex = FormIndex.createBeginningOfFormIndex();\n+        FormIndex i = FormEntryActivity.mFormController.getFormIndex();\n+        FormEntryActivity.mFormController.jumpToIndex(FormIndex.createBeginningOfFormIndex());\n+\n         int event;\n-        while ((event = formController.getEvent(currentFormIndex)) != FormEntryController.EVENT_END_OF_FORM) {\n+        while ((event =\n+                FormEntryActivity.mFormController.stepToNextEvent(FormEntryController.STEP_INTO_GROUP)) != FormEntryController.EVENT_END_OF_FORM) {\n             if (event == FormEntryController.EVENT_QUESTION) {\n                 int saveStatus =\n                         FormEntryActivity.mFormController.checkCurrentQuestionConstraint();\n                 if (markCompleted &&\n                         (saveStatus == FormEntryController.ANSWER_REQUIRED_BUT_EMPTY ||\n                                 saveStatus == FormEntryController.ANSWER_CONSTRAINT_VIOLATED)) {\n+\n                     return true;\n                 }\n             }\n-            currentFormIndex = formController.getNextFormIndex(currentFormIndex, FormEntryController.STEP_INTO_GROUP, true);\n         }\n+\n+        FormEntryActivity.mFormController.jumpToIndex(i);\n         return false;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI5NDc1Mw==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r426294753", "bodyText": "What scenarios lead to instanceState being null ?", "author": "shubham1g5", "createdAt": "2020-05-17T19:17:27Z", "path": "app/src/org/commcare/activities/FormEntryActivity.java", "diffHunk": "@@ -257,8 +257,9 @@ public void onReceive(Context context, Intent intent) {\n     @Override\n     protected void onSaveInstanceState(Bundle outState) {\n         super.onSaveInstanceState(outState);\n-        instanceState.saveState(outState);\n-\n+        if (instanceState != null) {", "originalCommit": "a0c9254e1274ac14bb4c47ae763e73a6db6ba24b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM4NjgwMA==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r426386800", "bodyText": "I honestly have no idea why it would ever be null here. I thought that this might be a result of using IntentTestRule here since the crash started happening after adding that only and it's needed to stub intents.\nBut then I also saw some crashes related to this in crashlytics as well.", "author": "ShivamPokhriyal", "createdAt": "2020-05-18T06:05:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI5NDc1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc3NDU2Mg==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r426774562", "bodyText": "Would be good to investigate this if you are encountering it in your test,  since doing this null check will only result in supressing errors we should not and can result in user believing everything is alright when it is not.", "author": "shubham1g5", "createdAt": "2020-05-18T17:09:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI5NDc1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAzODEwMQ==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r450038101", "bodyText": "will remove this change from the PR before merging.", "author": "ShivamPokhriyal", "createdAt": "2020-07-06T07:39:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI5NDc1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "b29076875c92d754eba422538378e24e69b06bd0", "chunk": "diff --git a/app/src/org/commcare/activities/FormEntryActivity.java b/app/src/org/commcare/activities/FormEntryActivity.java\nindex 97f3e6acb..95e70df21 100644\n--- a/app/src/org/commcare/activities/FormEntryActivity.java\n+++ b/app/src/org/commcare/activities/FormEntryActivity.java\n\n@@ -257,9 +257,8 @@ public class FormEntryActivity extends SaveSessionCommCareActivity<FormEntryActi\n     @Override\n     protected void onSaveInstanceState(Bundle outState) {\n         super.onSaveInstanceState(outState);\n-        if (instanceState != null) {\n-            instanceState.saveState(outState);\n-        }\n+        instanceState.saveState(outState);\n+\n         outState.putBoolean(KEY_FORM_LOAD_HAS_TRIGGERED, hasFormLoadBeenTriggered);\n         outState.putBoolean(KEY_FORM_LOAD_FAILED, hasFormLoadFailed);\n         outState.putString(KEY_LOC_ERROR, locationRecieverErrorAction);\n"}}, {"oid": "d3c56b3e96bc100c582e96aaa46723d23f1ad337", "url": "https://github.com/dimagi/commcare-android/commit/d3c56b3e96bc100c582e96aaa46723d23f1ad337", "message": "Use environment variable for absolute location", "committedDate": "2020-06-08T13:59:39Z", "type": "forcePushed"}, {"oid": "3676052adb7aee69d637996991f658fc64aeeb0c", "url": "https://github.com/dimagi/commcare-android/commit/3676052adb7aee69d637996991f658fc64aeeb0c", "message": "Add instrumentation tests for saved form using espresso", "committedDate": "2020-06-30T10:40:32Z", "type": "commit"}, {"oid": "bcbaa1e19efa820681bfd349e55935efe72b1e13", "url": "https://github.com/dimagi/commcare-android/commit/bcbaa1e19efa820681bfd349e55935efe72b1e13", "message": "Logout once test completes", "committedDate": "2020-06-30T10:40:32Z", "type": "commit"}, {"oid": "0c1c0bbfb8da11bc09f929253b16a5aca47b6765", "url": "https://github.com/dimagi/commcare-android/commit/0c1c0bbfb8da11bc09f929253b16a5aca47b6765", "message": "Use ccz for installation", "committedDate": "2020-06-30T10:40:32Z", "type": "commit"}, {"oid": "9529a72e28edc1bf2f60f7652460bfbe58c48212", "url": "https://github.com/dimagi/commcare-android/commit/9529a72e28edc1bf2f60f7652460bfbe58c48212", "message": "Move out savetodisk task change to separate pr", "committedDate": "2020-06-30T10:40:32Z", "type": "commit"}, {"oid": "1bc293c013f8935a4118a759164f0f1c5facaca8", "url": "https://github.com/dimagi/commcare-android/commit/1bc293c013f8935a4118a759164f0f1c5facaca8", "message": "Add instrumentation tests for form attachment uploads", "committedDate": "2020-06-30T10:40:32Z", "type": "commit"}, {"oid": "6ac52b939b927297e110f58a4ca64a71536748e8", "url": "https://github.com/dimagi/commcare-android/commit/6ac52b939b927297e110f58a4ca64a71536748e8", "message": "Uninstall previously installed app before proceeding tests", "committedDate": "2020-06-30T10:40:32Z", "type": "commit"}, {"oid": "aafecb44138818c26cae0b98203d53b5a3354175", "url": "https://github.com/dimagi/commcare-android/commit/aafecb44138818c26cae0b98203d53b5a3354175", "message": "Use intent stubbing for app installation rather than screen rotation", "committedDate": "2020-06-30T10:40:32Z", "type": "commit"}, {"oid": "8a7dda013714b435235f9b67880441d5d6c73460", "url": "https://github.com/dimagi/commcare-android/commit/8a7dda013714b435235f9b67880441d5d6c73460", "message": "Add back press cuz app installation doesn't take back to login screen", "committedDate": "2020-06-30T10:40:32Z", "type": "commit"}, {"oid": "1c637ca65c828fa3770cfbf9ca7c3d19a443e0cd", "url": "https://github.com/dimagi/commcare-android/commit/1c637ca65c828fa3770cfbf9ca7c3d19a443e0cd", "message": "Add repeated rules and permissions to base class", "committedDate": "2020-06-30T10:40:32Z", "type": "commit"}, {"oid": "a1a14e54698061b0c217c1284a9f9187b04cdb2b", "url": "https://github.com/dimagi/commcare-android/commit/a1a14e54698061b0c217c1284a9f9187b04cdb2b", "message": "Add another way to use cczs for installation", "committedDate": "2020-06-30T10:40:32Z", "type": "commit"}, {"oid": "95110612a970270c984e1a35a2dc7d03240472d7", "url": "https://github.com/dimagi/commcare-android/commit/95110612a970270c984e1a35a2dc7d03240472d7", "message": "Remove hardcoded ccz name", "committedDate": "2020-06-30T10:40:32Z", "type": "commit"}, {"oid": "f9ff635f57ccb8055f1a97c9a31d7abfc412e650", "url": "https://github.com/dimagi/commcare-android/commit/f9ff635f57ccb8055f1a97c9a31d7abfc412e650", "message": "Add case claim espresso test", "committedDate": "2020-06-30T10:40:32Z", "type": "commit"}, {"oid": "b2271f7c9e3760f29c0f7afb38ba455e714f63f9", "url": "https://github.com/dimagi/commcare-android/commit/b2271f7c9e3760f29c0f7afb38ba455e714f63f9", "message": "Add AsyncRestoreTest with a hacky way to mock AsyncRestore", "committedDate": "2020-06-30T10:40:32Z", "type": "commit"}, {"oid": "247e1a2ec265c95b49361476bcde5c1e3feabd0c", "url": "https://github.com/dimagi/commcare-android/commit/247e1a2ec265c95b49361476bcde5c1e3feabd0c", "message": "Clear Mock before running tests", "committedDate": "2020-06-30T10:40:32Z", "type": "commit"}, {"oid": "c477ef9f1a72c7ba4c819768ec07b662f06d8e11", "url": "https://github.com/dimagi/commcare-android/commit/c477ef9f1a72c7ba4c819768ec07b662f06d8e11", "message": "Add steps to run instrumentation tests in readme", "committedDate": "2020-06-30T10:40:32Z", "type": "commit"}, {"oid": "7f791240b0be92cb8aa83b703cc09c5cdf80fd81", "url": "https://github.com/dimagi/commcare-android/commit/7f791240b0be92cb8aa83b703cc09c5cdf80fd81", "message": "cleanup", "committedDate": "2020-06-30T10:40:32Z", "type": "commit"}, {"oid": "d9e067ad428a76620389e41b86132e52da9fe5b5", "url": "https://github.com/dimagi/commcare-android/commit/d9e067ad428a76620389e41b86132e52da9fe5b5", "message": "Close okhttp response to avoid leaks", "committedDate": "2020-06-30T10:40:32Z", "type": "commit"}, {"oid": "78706e79a804ed80c618b29afff8301d53795f11", "url": "https://github.com/dimagi/commcare-android/commit/78706e79a804ed80c618b29afff8301d53795f11", "message": "Remove @after for logout in AsyncRestoreTest", "committedDate": "2020-06-30T10:40:32Z", "type": "commit"}, {"oid": "f711fca1554a7eaa8ea21c9e0e54fc15af827deb", "url": "https://github.com/dimagi/commcare-android/commit/f711fca1554a7eaa8ea21c9e0e54fc15af827deb", "message": "Remove unused import", "committedDate": "2020-06-30T10:40:32Z", "type": "commit"}, {"oid": "3ba0b1cde749d92a6966e45e29c1dcf8fee54a0d", "url": "https://github.com/dimagi/commcare-android/commit/3ba0b1cde749d92a6966e45e29c1dcf8fee54a0d", "message": "Add a python script to schedule runs on browserstack", "committedDate": "2020-06-30T10:40:32Z", "type": "commit"}, {"oid": "122f1f9aeb068d455dd9ca1a3c0e70634a3c521f", "url": "https://github.com/dimagi/commcare-android/commit/122f1f9aeb068d455dd9ca1a3c0e70634a3c521f", "message": "Use environment variable for absolute location", "committedDate": "2020-06-30T10:40:32Z", "type": "commit"}, {"oid": "c234365e09d3f5a243f554ed51b1e1b972990ca5", "url": "https://github.com/dimagi/commcare-android/commit/c234365e09d3f5a243f554ed51b1e1b972990ca5", "message": "Revert SaveToDiskTask to master", "committedDate": "2020-06-30T10:43:05Z", "type": "commit"}, {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2", "url": "https://github.com/dimagi/commcare-android/commit/919549937491b8b7f3936b636c2b56f7a137f8e2", "message": "Add tests for finish button clicks with validation failures", "committedDate": "2020-07-01T06:00:50Z", "type": "commit"}, {"oid": "919549937491b8b7f3936b636c2b56f7a137f8e2", "url": "https://github.com/dimagi/commcare-android/commit/919549937491b8b7f3936b636c2b56f7a137f8e2", "message": "Add tests for finish button clicks with validation failures", "committedDate": "2020-07-01T06:00:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgxODk0Ng==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448818946", "bodyText": "should use upper case for constants - CCZ_NAME", "author": "shubham1g5", "createdAt": "2020-07-02T07:59:51Z", "path": "app/instrumentation-tests/src/org/commcare/tests/AsyncRestoreTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.commcare.tests;\n+\n+import android.content.Intent;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import org.commcare.AsyncRestoreHelperMock;\n+import org.commcare.tasks.DataPullTask;\n+import org.commcare.utils.HQApi;\n+import org.commcare.utils.Utility;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class AsyncRestoreTest extends BaseTest {\n+\n+    private final String cczName = \"integration_test_app.ccz\";", "originalCommit": "919549937491b8b7f3936b636c2b56f7a137f8e2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0d155011c4d93060f25a15a3822432c7fdd98716", "chunk": "diff --git a/app/instrumentation-tests/src/org/commcare/tests/AsyncRestoreTest.java b/app/instrumentation-tests/src/org/commcare/androidTests/AsyncRestoreTest.java\nsimilarity index 98%\nrename from app/instrumentation-tests/src/org/commcare/tests/AsyncRestoreTest.java\nrename to app/instrumentation-tests/src/org/commcare/androidTests/AsyncRestoreTest.java\nindex 4657fb1b4..a224ba807 100644\n--- a/app/instrumentation-tests/src/org/commcare/tests/AsyncRestoreTest.java\n+++ b/app/instrumentation-tests/src/org/commcare/androidTests/AsyncRestoreTest.java\n\n@@ -1,4 +1,4 @@\n-package org.commcare.tests;\n+package org.commcare.androidTests;\n \n import android.content.Intent;\n import androidx.test.ext.junit.runners.AndroidJUnit4;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5MzMzOA==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448893338", "bodyText": "Wondering if you can mock it using Mockito instead, for eg. mockito provides APIs to check for whether a particular method was called on the mocked object, so that will remove need of methods like isRetryCalled and be much cleaner in injecting the mocks themselves into the code. Proposing this for you to explore it and full disclaimer that I am not too familiar with mockito myself so this might turn out to be a bad lead.", "author": "shubham1g5", "createdAt": "2020-07-02T10:05:26Z", "path": "app/instrumentation-tests/src/org/commcare/AsyncRestoreHelperMock.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package org.commcare;\n+\n+import org.commcare.network.RemoteDataPullResponse;\n+import org.commcare.tasks.AsyncRestoreHelper;\n+import org.commcare.tasks.DataPullTask;\n+import org.commcare.tasks.ResultAndError;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+public class AsyncRestoreHelperMock extends AsyncRestoreHelper {", "originalCommit": "919549937491b8b7f3936b636c2b56f7a137f8e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTM2NzA4OA==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r449367088", "bodyText": "I think the reason why I couldn't use mockito is because I have no way to inject the mock here", "author": "ShivamPokhriyal", "createdAt": "2020-07-03T04:16:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5MzMzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA4MjM1Mg==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r450082352", "bodyText": "is there a way we can mock the DataPullTask itself instead of AsyncRestoreHelper to check for this behaviour ? AsyncRestoreHelper is in an internal api to DataPullTask and should ideally be treated as a black box.", "author": "shubham1g5", "createdAt": "2020-07-06T09:00:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5MzMzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE1OTkzMg==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r450159932", "bodyText": "Ohh, so it'll be like: I mock DataPulLtask and then override its constructor to use AsyncRestoreHelperMock. And then perhaps maybe I'll have to mock FormAndDataSyncer as well and override it's method to use DataPullTaskMock? Or maybe I'm wrong here?", "author": "ShivamPokhriyal", "createdAt": "2020-07-06T11:33:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5MzMzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDY0NDA4Mw==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r450644083", "bodyText": "Yeah you can make 2 changes -\n\nChange FormAndDataSyncer to utilize a DataPullTaskFactory and then override that factory class in the tests to return you the mocked class.\nHave a setter for asyncRestoreHelper in DataPullTask to set the mocked asyncRestoreHelper", "author": "shubham1g5", "createdAt": "2020-07-07T06:45:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5MzMzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDc2MDY3MA==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r450760670", "bodyText": "Also realized you can also just introduce a factory for asyncRestoreHelper and override that in tests as well, Basically I am trying to avoid having any test specific functions in non-test code.", "author": "shubham1g5", "createdAt": "2020-07-07T10:19:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5MzMzOA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5NTY2Nw==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448895667", "bodyText": "can be abstracted into a function.", "author": "shubham1g5", "createdAt": "2020-07-02T10:09:51Z", "path": "app/instrumentation-tests/src/org/commcare/tests/AsyncRestoreTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.commcare.tests;\n+\n+import android.content.Intent;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import org.commcare.AsyncRestoreHelperMock;\n+import org.commcare.tasks.DataPullTask;\n+import org.commcare.utils.HQApi;\n+import org.commcare.utils.Utility;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class AsyncRestoreTest extends BaseTest {\n+\n+    private final String cczName = \"integration_test_app.ccz\";\n+    private final String appName = \"Integration Tests\";\n+\n+    @Test\n+    public void testRestoreOnLogin() {\n+        String userId = \"13a0910ea963acbf9f4b59dcc9a0f9aa\";\n+        String groupId = \"78185f2132bd8ba3af30b488f9974b41\";\n+        AsyncRestoreHelperMock.clear();\n+\n+        // Make sure user is present in the group.\n+        HQApi.addUserInGroup(userId, groupId);\n+\n+        // Install the app.\n+        installApp(appName, cczName);\n+\n+        // Clear cache", "originalCommit": "919549937491b8b7f3936b636c2b56f7a137f8e2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0d155011c4d93060f25a15a3822432c7fdd98716", "chunk": "diff --git a/app/instrumentation-tests/src/org/commcare/tests/AsyncRestoreTest.java b/app/instrumentation-tests/src/org/commcare/androidTests/AsyncRestoreTest.java\nsimilarity index 98%\nrename from app/instrumentation-tests/src/org/commcare/tests/AsyncRestoreTest.java\nrename to app/instrumentation-tests/src/org/commcare/androidTests/AsyncRestoreTest.java\nindex 4657fb1b4..a224ba807 100644\n--- a/app/instrumentation-tests/src/org/commcare/tests/AsyncRestoreTest.java\n+++ b/app/instrumentation-tests/src/org/commcare/androidTests/AsyncRestoreTest.java\n\n@@ -1,4 +1,4 @@\n-package org.commcare.tests;\n+package org.commcare.androidTests;\n \n import android.content.Intent;\n import androidx.test.ext.junit.runners.AndroidJUnit4;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwODE5Ng==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448908196", "bodyText": "is there a reason that it's defined here instead of the individual test classes ? It feels like the intending activity will be different for different test cases.", "author": "shubham1g5", "createdAt": "2020-07-02T10:34:06Z", "path": "app/instrumentation-tests/src/org/commcare/tests/BaseTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.commcare.tests;\n+\n+import android.Manifest;\n+\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import androidx.test.rule.ActivityTestRule;\n+import androidx.test.rule.GrantPermissionRule;\n+import org.commcare.CommCareApplication;\n+import org.commcare.activities.DispatchActivity;\n+import org.commcare.activities.FormEntryActivity;\n+import org.commcare.utils.Utility;\n+import org.junit.Rule;\n+import org.junit.runner.RunWith;\n+\n+import static androidx.test.espresso.Espresso.pressBackUnconditionally;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public abstract class BaseTest {\n+\n+    @Rule\n+    public ActivityTestRule<DispatchActivity> activityTestRule = new ActivityTestRule<>(DispatchActivity.class);\n+\n+    @Rule\n+    public IntentsTestRule<FormEntryActivity> intentsRule = new IntentsTestRule<>(FormEntryActivity.class);", "originalCommit": "919549937491b8b7f3936b636c2b56f7a137f8e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk4Mjk4MQ==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448982981", "bodyText": "Yeah I thought that most of our intents are from the FormEntryActivity only so decided to put it here. But yeah makes sense to avoid having it in a superclass when not all subclasses need it.", "author": "ShivamPokhriyal", "createdAt": "2020-07-02T12:59:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwODE5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAzOTc2Mw==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r450039763", "bodyText": "Now when I was updating it, I got to know that we need atleast 1 IntentsTestRule to be able to install the app offline. So keeping it here.", "author": "ShivamPokhriyal", "createdAt": "2020-07-06T07:42:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwODE5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA4MTMyNw==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r450081327", "bodyText": "How is a intent test rule with FormEntryActivity related to offline ccz install ?", "author": "shubham1g5", "createdAt": "2020-07-06T08:58:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwODE5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE1Nzc4OA==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r450157788", "bodyText": "Ahh, I see it now. Actually we only need IntentTestRule with any activity, so will update the code. I used ActivityTestRule while starting to write tests and missed its usage.", "author": "ShivamPokhriyal", "createdAt": "2020-07-06T11:28:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwODE5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "0d155011c4d93060f25a15a3822432c7fdd98716", "chunk": "diff --git a/app/instrumentation-tests/src/org/commcare/tests/BaseTest.java b/app/instrumentation-tests/src/org/commcare/androidTests/BaseTest.java\nsimilarity index 98%\nrename from app/instrumentation-tests/src/org/commcare/tests/BaseTest.java\nrename to app/instrumentation-tests/src/org/commcare/androidTests/BaseTest.java\nindex 394a8c011..6118ba762 100644\n--- a/app/instrumentation-tests/src/org/commcare/tests/BaseTest.java\n+++ b/app/instrumentation-tests/src/org/commcare/androidTests/BaseTest.java\n\n@@ -1,4 +1,4 @@\n-package org.commcare.tests;\n+package org.commcare.androidTests;\n \n import android.Manifest;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwOTAwMg==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448909002", "bodyText": "caps for constant.", "author": "shubham1g5", "createdAt": "2020-07-02T10:35:38Z", "path": "app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.commcare.tests;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import org.commcare.dalvik.R;\n+import org.commcare.utils.HQApi;\n+import org.commcare.utils.Utility;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import java.util.concurrent.TimeUnit;\n+\n+import static androidx.test.espresso.Espresso.closeSoftKeyboard;\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.Espresso.pressBackUnconditionally;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.action.ViewActions.typeText;\n+import static androidx.test.espresso.assertion.ViewAssertions.matches;\n+import static androidx.test.espresso.matcher.ViewMatchers.isDisplayed;\n+import static androidx.test.espresso.matcher.ViewMatchers.isRoot;\n+import static androidx.test.espresso.matcher.ViewMatchers.withClassName;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.endsWith;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class CaseClaimTest extends BaseTest {\n+\n+    private final String cczName = \"case_claim.ccz\";", "originalCommit": "919549937491b8b7f3936b636c2b56f7a137f8e2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0d155011c4d93060f25a15a3822432c7fdd98716", "chunk": "diff --git a/app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java b/app/instrumentation-tests/src/org/commcare/androidTests/CaseClaimTest.java\nsimilarity index 99%\nrename from app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java\nrename to app/instrumentation-tests/src/org/commcare/androidTests/CaseClaimTest.java\nindex 9c51f680e..eee71d8d7 100644\n--- a/app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java\n+++ b/app/instrumentation-tests/src/org/commcare/androidTests/CaseClaimTest.java\n\n@@ -1,4 +1,4 @@\n-package org.commcare.tests;\n+package org.commcare.androidTests;\n \n import androidx.test.ext.junit.runners.AndroidJUnit4;\n import androidx.test.filters.LargeTest;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwOTYwNw==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448909607", "bodyText": "can be abstracted into setup", "author": "shubham1g5", "createdAt": "2020-07-02T10:36:49Z", "path": "app/instrumentation-tests/src/org/commcare/tests/AsyncRestoreTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.commcare.tests;\n+\n+import android.content.Intent;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import org.commcare.AsyncRestoreHelperMock;\n+import org.commcare.tasks.DataPullTask;\n+import org.commcare.utils.HQApi;\n+import org.commcare.utils.Utility;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static androidx.test.platform.app.InstrumentationRegistry.getInstrumentation;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class AsyncRestoreTest extends BaseTest {\n+\n+    private final String cczName = \"integration_test_app.ccz\";\n+    private final String appName = \"Integration Tests\";\n+\n+    @Test\n+    public void testRestoreOnLogin() {\n+        String userId = \"13a0910ea963acbf9f4b59dcc9a0f9aa\";\n+        String groupId = \"78185f2132bd8ba3af30b488f9974b41\";\n+        AsyncRestoreHelperMock.clear();\n+\n+        // Make sure user is present in the group.\n+        HQApi.addUserInGroup(userId, groupId);\n+\n+        // Install the app.\n+        installApp(appName, cczName);", "originalCommit": "919549937491b8b7f3936b636c2b56f7a137f8e2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0d155011c4d93060f25a15a3822432c7fdd98716", "chunk": "diff --git a/app/instrumentation-tests/src/org/commcare/tests/AsyncRestoreTest.java b/app/instrumentation-tests/src/org/commcare/androidTests/AsyncRestoreTest.java\nsimilarity index 98%\nrename from app/instrumentation-tests/src/org/commcare/tests/AsyncRestoreTest.java\nrename to app/instrumentation-tests/src/org/commcare/androidTests/AsyncRestoreTest.java\nindex 4657fb1b4..a224ba807 100644\n--- a/app/instrumentation-tests/src/org/commcare/tests/AsyncRestoreTest.java\n+++ b/app/instrumentation-tests/src/org/commcare/androidTests/AsyncRestoreTest.java\n\n@@ -1,4 +1,4 @@\n-package org.commcare.tests;\n+package org.commcare.androidTests;\n \n import android.content.Intent;\n import androidx.test.ext.junit.runners.AndroidJUnit4;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkxMjYyOA==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448912628", "bodyText": "do you remain on installation screen after install ? you might wanna check how it's handled in calabash tests today.", "author": "shubham1g5", "createdAt": "2020-07-02T10:42:56Z", "path": "app/instrumentation-tests/src/org/commcare/tests/BaseTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.commcare.tests;\n+\n+import android.Manifest;\n+\n+import androidx.test.espresso.intent.rule.IntentsTestRule;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import androidx.test.rule.ActivityTestRule;\n+import androidx.test.rule.GrantPermissionRule;\n+import org.commcare.CommCareApplication;\n+import org.commcare.activities.DispatchActivity;\n+import org.commcare.activities.FormEntryActivity;\n+import org.commcare.utils.Utility;\n+import org.junit.Rule;\n+import org.junit.runner.RunWith;\n+\n+import static androidx.test.espresso.Espresso.pressBackUnconditionally;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public abstract class BaseTest {\n+\n+    @Rule\n+    public ActivityTestRule<DispatchActivity> activityTestRule = new ActivityTestRule<>(DispatchActivity.class);\n+\n+    @Rule\n+    public IntentsTestRule<FormEntryActivity> intentsRule = new IntentsTestRule<>(FormEntryActivity.class);\n+\n+    @Rule\n+    public GrantPermissionRule permissionRule = GrantPermissionRule.grant(\n+            Manifest.permission.READ_PHONE_STATE,\n+            Manifest.permission.CALL_PHONE,\n+            Manifest.permission.ACCESS_FINE_LOCATION,\n+            Manifest.permission.ACCESS_COARSE_LOCATION,\n+            Manifest.permission.WRITE_EXTERNAL_STORAGE,\n+            Manifest.permission.READ_EXTERNAL_STORAGE,\n+            Manifest.permission.RECORD_AUDIO,\n+            Manifest.permission.CAMERA\n+    );\n+\n+    protected void installApp(String appName, String ccz) {\n+        if (CommCareApplication.instance().getCurrentApp() == null) {\n+            Utility.installApp(ccz);\n+        } else if (!appName.equals(CommCareApplication.instance().getCurrentApp().getAppRecord().getDisplayName())) {\n+            // We already have an installed app, But not the one we need for this test.\n+            Utility.uninstallCurrentApp();\n+            Utility.installApp(ccz);\n+            // App installation doesn't take back to login screen. Is this an issue?\n+            pressBackUnconditionally();", "originalCommit": "919549937491b8b7f3936b636c2b56f7a137f8e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk4MjMzMA==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448982330", "bodyText": "Yeah, I found it weird when I saw it first, but it's true!", "author": "ShivamPokhriyal", "createdAt": "2020-07-02T12:58:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkxMjYyOA=="}], "type": "inlineReview", "revised_code": {"commit": "0d155011c4d93060f25a15a3822432c7fdd98716", "chunk": "diff --git a/app/instrumentation-tests/src/org/commcare/tests/BaseTest.java b/app/instrumentation-tests/src/org/commcare/androidTests/BaseTest.java\nsimilarity index 98%\nrename from app/instrumentation-tests/src/org/commcare/tests/BaseTest.java\nrename to app/instrumentation-tests/src/org/commcare/androidTests/BaseTest.java\nindex 394a8c011..6118ba762 100644\n--- a/app/instrumentation-tests/src/org/commcare/tests/BaseTest.java\n+++ b/app/instrumentation-tests/src/org/commcare/androidTests/BaseTest.java\n\n@@ -1,4 +1,4 @@\n-package org.commcare.tests;\n+package org.commcare.androidTests;\n \n import android.Manifest;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkxNDU5MQ==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448914591", "bodyText": "Would not pressBack be more appropriate mechanism used for going back since we wanna fail fast in case of any errors ?", "author": "shubham1g5", "createdAt": "2020-07-02T10:46:45Z", "path": "app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.commcare.tests;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import org.commcare.dalvik.R;\n+import org.commcare.utils.HQApi;\n+import org.commcare.utils.Utility;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import java.util.concurrent.TimeUnit;\n+\n+import static androidx.test.espresso.Espresso.closeSoftKeyboard;\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.Espresso.pressBackUnconditionally;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.action.ViewActions.typeText;\n+import static androidx.test.espresso.assertion.ViewAssertions.matches;\n+import static androidx.test.espresso.matcher.ViewMatchers.isDisplayed;\n+import static androidx.test.espresso.matcher.ViewMatchers.isRoot;\n+import static androidx.test.espresso.matcher.ViewMatchers.withClassName;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.endsWith;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class CaseClaimTest extends BaseTest {\n+\n+    private final String cczName = \"case_claim.ccz\";\n+    private final String appName = \"Case Search and Claim\";\n+\n+    @Before\n+    public void setup() {\n+        installApp(appName, cczName);\n+    }\n+\n+    @Test\n+    public void testCaseClaimByDifferentUser() {\n+        String name = \"cordelia\";\n+        String location = \"boston\";\n+\n+        // Make sure we close off any existing cases due to previous test failures.\n+        HQApi.closeExistingCases(name, \"human\", \"d58f7a55dbe2bf22d0b6838311ada205\");\n+\n+        // Waiting here cuz, HQ sometimes is out of sync and might give stale data.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test1\", \"123\");\n+\n+        // Make sure that a case with cordelia doesn't exist.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(\"SEARCH ALL CASES\"))\n+                .perform(click());\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                1\n+        )).perform(typeText(name));\n+        closeSoftKeyboard();\n+        onView(withId(R.id.request_button))\n+                .perform(click());\n+        onView(withId(R.id.request_button))\n+                .check(matches(isDisplayed())); // The request doesn't do anything which confirms case doesn't exists.\n+\n+        // Register a new case with name cordelia\n+        pressBackUnconditionally();", "originalCommit": "919549937491b8b7f3936b636c2b56f7a137f8e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk3OTkzNw==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448979937", "bodyText": "Yeah, I had a silly thought where I liked that pressBackUnconditionally is better since it doesn't throw any exceptions :)", "author": "ShivamPokhriyal", "createdAt": "2020-07-02T12:54:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkxNDU5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "0d155011c4d93060f25a15a3822432c7fdd98716", "chunk": "diff --git a/app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java b/app/instrumentation-tests/src/org/commcare/androidTests/CaseClaimTest.java\nsimilarity index 99%\nrename from app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java\nrename to app/instrumentation-tests/src/org/commcare/androidTests/CaseClaimTest.java\nindex 9c51f680e..eee71d8d7 100644\n--- a/app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java\n+++ b/app/instrumentation-tests/src/org/commcare/androidTests/CaseClaimTest.java\n\n@@ -1,4 +1,4 @@\n-package org.commcare.tests;\n+package org.commcare.androidTests;\n \n import androidx.test.ext.junit.runners.AndroidJUnit4;\n import androidx.test.filters.LargeTest;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkxNjg2NQ==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448916865", "bodyText": "this can be abstracted into a logout utility method which press backs until it see the logout button on screen.", "author": "shubham1g5", "createdAt": "2020-07-02T10:51:11Z", "path": "app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.commcare.tests;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import org.commcare.dalvik.R;\n+import org.commcare.utils.HQApi;\n+import org.commcare.utils.Utility;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import java.util.concurrent.TimeUnit;\n+\n+import static androidx.test.espresso.Espresso.closeSoftKeyboard;\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.Espresso.pressBackUnconditionally;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.action.ViewActions.typeText;\n+import static androidx.test.espresso.assertion.ViewAssertions.matches;\n+import static androidx.test.espresso.matcher.ViewMatchers.isDisplayed;\n+import static androidx.test.espresso.matcher.ViewMatchers.isRoot;\n+import static androidx.test.espresso.matcher.ViewMatchers.withClassName;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.endsWith;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class CaseClaimTest extends BaseTest {\n+\n+    private final String cczName = \"case_claim.ccz\";\n+    private final String appName = \"Case Search and Claim\";\n+\n+    @Before\n+    public void setup() {\n+        installApp(appName, cczName);\n+    }\n+\n+    @Test\n+    public void testCaseClaimByDifferentUser() {\n+        String name = \"cordelia\";\n+        String location = \"boston\";\n+\n+        // Make sure we close off any existing cases due to previous test failures.\n+        HQApi.closeExistingCases(name, \"human\", \"d58f7a55dbe2bf22d0b6838311ada205\");\n+\n+        // Waiting here cuz, HQ sometimes is out of sync and might give stale data.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test1\", \"123\");\n+\n+        // Make sure that a case with cordelia doesn't exist.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(\"SEARCH ALL CASES\"))\n+                .perform(click());\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                1\n+        )).perform(typeText(name));\n+        closeSoftKeyboard();\n+        onView(withId(R.id.request_button))\n+                .perform(click());\n+        onView(withId(R.id.request_button))\n+                .check(matches(isDisplayed())); // The request doesn't do anything which confirms case doesn't exists.\n+\n+        // Register a new case with name cordelia\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        onView(withText(\"Registration\"))\n+                .perform(click());\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(name));\n+\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click());\n+\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(location));\n+        onView(withId(R.id.nav_btn_finish))\n+                .perform(click());\n+\n+        // Confirm newly created case can be claimed.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(name))\n+                .check(matches(isDisplayed()));\n+        onView(withText(name))\n+                .perform(click());\n+        onView(withText(\"Continue\"))\n+                .perform(click());\n+        onView(withText(\"Close\"))\n+                .check(matches(isDisplayed()));\n+\n+        // Login with another user.\n+        pressBackUnconditionally();", "originalCommit": "919549937491b8b7f3936b636c2b56f7a137f8e2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0d155011c4d93060f25a15a3822432c7fdd98716", "chunk": "diff --git a/app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java b/app/instrumentation-tests/src/org/commcare/androidTests/CaseClaimTest.java\nsimilarity index 99%\nrename from app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java\nrename to app/instrumentation-tests/src/org/commcare/androidTests/CaseClaimTest.java\nindex 9c51f680e..eee71d8d7 100644\n--- a/app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java\n+++ b/app/instrumentation-tests/src/org/commcare/androidTests/CaseClaimTest.java\n\n@@ -1,4 +1,4 @@\n-package org.commcare.tests;\n+package org.commcare.androidTests;\n \n import androidx.test.ext.junit.runners.AndroidJUnit4;\n import androidx.test.filters.LargeTest;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkxODE2Mw==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448918163", "bodyText": "can be a utility method that takes the wait duration as input.", "author": "shubham1g5", "createdAt": "2020-07-02T10:53:52Z", "path": "app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.commcare.tests;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import org.commcare.dalvik.R;\n+import org.commcare.utils.HQApi;\n+import org.commcare.utils.Utility;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import java.util.concurrent.TimeUnit;\n+\n+import static androidx.test.espresso.Espresso.closeSoftKeyboard;\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.Espresso.pressBackUnconditionally;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.action.ViewActions.typeText;\n+import static androidx.test.espresso.assertion.ViewAssertions.matches;\n+import static androidx.test.espresso.matcher.ViewMatchers.isDisplayed;\n+import static androidx.test.espresso.matcher.ViewMatchers.isRoot;\n+import static androidx.test.espresso.matcher.ViewMatchers.withClassName;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.endsWith;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class CaseClaimTest extends BaseTest {\n+\n+    private final String cczName = \"case_claim.ccz\";\n+    private final String appName = \"Case Search and Claim\";\n+\n+    @Before\n+    public void setup() {\n+        installApp(appName, cczName);\n+    }\n+\n+    @Test\n+    public void testCaseClaimByDifferentUser() {\n+        String name = \"cordelia\";\n+        String location = \"boston\";\n+\n+        // Make sure we close off any existing cases due to previous test failures.\n+        HQApi.closeExistingCases(name, \"human\", \"d58f7a55dbe2bf22d0b6838311ada205\");\n+\n+        // Waiting here cuz, HQ sometimes is out of sync and might give stale data.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test1\", \"123\");\n+\n+        // Make sure that a case with cordelia doesn't exist.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(\"SEARCH ALL CASES\"))\n+                .perform(click());\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                1\n+        )).perform(typeText(name));\n+        closeSoftKeyboard();\n+        onView(withId(R.id.request_button))\n+                .perform(click());\n+        onView(withId(R.id.request_button))\n+                .check(matches(isDisplayed())); // The request doesn't do anything which confirms case doesn't exists.\n+\n+        // Register a new case with name cordelia\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        onView(withText(\"Registration\"))\n+                .perform(click());\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(name));\n+\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click());\n+\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(location));\n+        onView(withId(R.id.nav_btn_finish))\n+                .perform(click());\n+\n+        // Confirm newly created case can be claimed.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(name))\n+                .check(matches(isDisplayed()));\n+        onView(withText(name))\n+                .perform(click());\n+        onView(withText(\"Continue\"))\n+                .perform(click());\n+        onView(withText(\"Close\"))\n+                .check(matches(isDisplayed()));\n+\n+        // Login with another user.\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        Utility.logout();\n+\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));", "originalCommit": "919549937491b8b7f3936b636c2b56f7a137f8e2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0d155011c4d93060f25a15a3822432c7fdd98716", "chunk": "diff --git a/app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java b/app/instrumentation-tests/src/org/commcare/androidTests/CaseClaimTest.java\nsimilarity index 99%\nrename from app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java\nrename to app/instrumentation-tests/src/org/commcare/androidTests/CaseClaimTest.java\nindex 9c51f680e..eee71d8d7 100644\n--- a/app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java\n+++ b/app/instrumentation-tests/src/org/commcare/androidTests/CaseClaimTest.java\n\n@@ -1,4 +1,4 @@\n-package org.commcare.tests;\n+package org.commcare.androidTests;\n \n import androidx.test.ext.junit.runners.AndroidJUnit4;\n import androidx.test.filters.LargeTest;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkxODcyMg==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448918722", "bodyText": "same as L56, should be abstracted.", "author": "shubham1g5", "createdAt": "2020-07-02T10:55:03Z", "path": "app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.commcare.tests;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import org.commcare.dalvik.R;\n+import org.commcare.utils.HQApi;\n+import org.commcare.utils.Utility;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import java.util.concurrent.TimeUnit;\n+\n+import static androidx.test.espresso.Espresso.closeSoftKeyboard;\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.Espresso.pressBackUnconditionally;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.action.ViewActions.typeText;\n+import static androidx.test.espresso.assertion.ViewAssertions.matches;\n+import static androidx.test.espresso.matcher.ViewMatchers.isDisplayed;\n+import static androidx.test.espresso.matcher.ViewMatchers.isRoot;\n+import static androidx.test.espresso.matcher.ViewMatchers.withClassName;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.endsWith;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class CaseClaimTest extends BaseTest {\n+\n+    private final String cczName = \"case_claim.ccz\";\n+    private final String appName = \"Case Search and Claim\";\n+\n+    @Before\n+    public void setup() {\n+        installApp(appName, cczName);\n+    }\n+\n+    @Test\n+    public void testCaseClaimByDifferentUser() {\n+        String name = \"cordelia\";\n+        String location = \"boston\";\n+\n+        // Make sure we close off any existing cases due to previous test failures.\n+        HQApi.closeExistingCases(name, \"human\", \"d58f7a55dbe2bf22d0b6838311ada205\");\n+\n+        // Waiting here cuz, HQ sometimes is out of sync and might give stale data.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test1\", \"123\");\n+\n+        // Make sure that a case with cordelia doesn't exist.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(\"SEARCH ALL CASES\"))\n+                .perform(click());\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                1\n+        )).perform(typeText(name));\n+        closeSoftKeyboard();\n+        onView(withId(R.id.request_button))\n+                .perform(click());\n+        onView(withId(R.id.request_button))\n+                .check(matches(isDisplayed())); // The request doesn't do anything which confirms case doesn't exists.\n+\n+        // Register a new case with name cordelia\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        onView(withText(\"Registration\"))\n+                .perform(click());\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(name));\n+\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click());\n+\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(location));\n+        onView(withId(R.id.nav_btn_finish))\n+                .perform(click());\n+\n+        // Confirm newly created case can be claimed.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(name))\n+                .check(matches(isDisplayed()));\n+        onView(withText(name))\n+                .perform(click());\n+        onView(withText(\"Continue\"))\n+                .perform(click());\n+        onView(withText(\"Close\"))\n+                .check(matches(isDisplayed()));\n+\n+        // Login with another user.\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        Utility.logout();\n+\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test2\", \"123\");\n+        // Syncing once again to pull all the case data.\n+        onView(withText(\"Sync with Server\"))\n+                .perform(click());\n+\n+        // Somehow, espresso starts before data pull is completed.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        // Search for cordelia.\n+        onView(withText(\"Start\"))", "originalCommit": "919549937491b8b7f3936b636c2b56f7a137f8e2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0d155011c4d93060f25a15a3822432c7fdd98716", "chunk": "diff --git a/app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java b/app/instrumentation-tests/src/org/commcare/androidTests/CaseClaimTest.java\nsimilarity index 99%\nrename from app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java\nrename to app/instrumentation-tests/src/org/commcare/androidTests/CaseClaimTest.java\nindex 9c51f680e..eee71d8d7 100644\n--- a/app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java\n+++ b/app/instrumentation-tests/src/org/commcare/androidTests/CaseClaimTest.java\n\n@@ -1,4 +1,4 @@\n-package org.commcare.tests;\n+package org.commcare.androidTests;\n \n import androidx.test.ext.junit.runners.AndroidJUnit4;\n import androidx.test.filters.LargeTest;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkyMDY0MQ==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448920641", "bodyText": "can we have a function here that waits until progress bar is invisible instead ?", "author": "shubham1g5", "createdAt": "2020-07-02T10:59:02Z", "path": "app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.commcare.tests;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import org.commcare.dalvik.R;\n+import org.commcare.utils.HQApi;\n+import org.commcare.utils.Utility;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import java.util.concurrent.TimeUnit;\n+\n+import static androidx.test.espresso.Espresso.closeSoftKeyboard;\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.Espresso.pressBackUnconditionally;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.action.ViewActions.typeText;\n+import static androidx.test.espresso.assertion.ViewAssertions.matches;\n+import static androidx.test.espresso.matcher.ViewMatchers.isDisplayed;\n+import static androidx.test.espresso.matcher.ViewMatchers.isRoot;\n+import static androidx.test.espresso.matcher.ViewMatchers.withClassName;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.endsWith;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class CaseClaimTest extends BaseTest {\n+\n+    private final String cczName = \"case_claim.ccz\";\n+    private final String appName = \"Case Search and Claim\";\n+\n+    @Before\n+    public void setup() {\n+        installApp(appName, cczName);\n+    }\n+\n+    @Test\n+    public void testCaseClaimByDifferentUser() {\n+        String name = \"cordelia\";\n+        String location = \"boston\";\n+\n+        // Make sure we close off any existing cases due to previous test failures.\n+        HQApi.closeExistingCases(name, \"human\", \"d58f7a55dbe2bf22d0b6838311ada205\");\n+\n+        // Waiting here cuz, HQ sometimes is out of sync and might give stale data.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test1\", \"123\");\n+\n+        // Make sure that a case with cordelia doesn't exist.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(\"SEARCH ALL CASES\"))\n+                .perform(click());\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                1\n+        )).perform(typeText(name));\n+        closeSoftKeyboard();\n+        onView(withId(R.id.request_button))\n+                .perform(click());\n+        onView(withId(R.id.request_button))\n+                .check(matches(isDisplayed())); // The request doesn't do anything which confirms case doesn't exists.\n+\n+        // Register a new case with name cordelia\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        onView(withText(\"Registration\"))\n+                .perform(click());\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(name));\n+\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click());\n+\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(location));\n+        onView(withId(R.id.nav_btn_finish))\n+                .perform(click());\n+\n+        // Confirm newly created case can be claimed.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(name))\n+                .check(matches(isDisplayed()));\n+        onView(withText(name))\n+                .perform(click());\n+        onView(withText(\"Continue\"))\n+                .perform(click());\n+        onView(withText(\"Close\"))\n+                .check(matches(isDisplayed()));\n+\n+        // Login with another user.\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        Utility.logout();\n+\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test2\", \"123\");\n+        // Syncing once again to pull all the case data.\n+        onView(withText(\"Sync with Server\"))\n+                .perform(click());\n+\n+        // Somehow, espresso starts before data pull is completed.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));", "originalCommit": "919549937491b8b7f3936b636c2b56f7a137f8e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk4MTE0Ng==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448981146", "bodyText": "I guess it's not possible to perform anything with progress bar in espresso.", "author": "ShivamPokhriyal", "createdAt": "2020-07-02T12:56:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkyMDY0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ4NTg1MA==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r449485850", "bodyText": "It's weird in that case that espresso starts even before the data pull as seems like it waits by itself for the async tasks to be executed which is the reason we can't perform operations on progress bar right ? so both these behaviours looks contradicting to me with possibility of only one to exist. If they are both co-existing it would be nice to see what exactly is going on here.", "author": "shubham1g5", "createdAt": "2020-07-03T09:37:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkyMDY0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAzODkzMA==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r450038930", "bodyText": "yeah I confused myself and added 2 waits there. I just wanted to wait for HQ since it gave me wrong data many times. Updated the code to remove these waits.", "author": "ShivamPokhriyal", "createdAt": "2020-07-06T07:41:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkyMDY0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA5MTY5OA==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r450091698", "bodyText": "sounds good.", "author": "shubham1g5", "createdAt": "2020-07-06T09:16:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkyMDY0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "0d155011c4d93060f25a15a3822432c7fdd98716", "chunk": "diff --git a/app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java b/app/instrumentation-tests/src/org/commcare/androidTests/CaseClaimTest.java\nsimilarity index 99%\nrename from app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java\nrename to app/instrumentation-tests/src/org/commcare/androidTests/CaseClaimTest.java\nindex 9c51f680e..eee71d8d7 100644\n--- a/app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java\n+++ b/app/instrumentation-tests/src/org/commcare/androidTests/CaseClaimTest.java\n\n@@ -1,4 +1,4 @@\n-package org.commcare.tests;\n+package org.commcare.androidTests;\n \n import androidx.test.ext.junit.runners.AndroidJUnit4;\n import androidx.test.filters.LargeTest;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkyMzc3Mg==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448923772", "bodyText": "this part is closing the case, not claiming it.", "author": "shubham1g5", "createdAt": "2020-07-02T11:06:04Z", "path": "app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.commcare.tests;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import org.commcare.dalvik.R;\n+import org.commcare.utils.HQApi;\n+import org.commcare.utils.Utility;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import java.util.concurrent.TimeUnit;\n+\n+import static androidx.test.espresso.Espresso.closeSoftKeyboard;\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.Espresso.pressBackUnconditionally;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.action.ViewActions.typeText;\n+import static androidx.test.espresso.assertion.ViewAssertions.matches;\n+import static androidx.test.espresso.matcher.ViewMatchers.isDisplayed;\n+import static androidx.test.espresso.matcher.ViewMatchers.isRoot;\n+import static androidx.test.espresso.matcher.ViewMatchers.withClassName;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.endsWith;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class CaseClaimTest extends BaseTest {\n+\n+    private final String cczName = \"case_claim.ccz\";\n+    private final String appName = \"Case Search and Claim\";\n+\n+    @Before\n+    public void setup() {\n+        installApp(appName, cczName);\n+    }\n+\n+    @Test\n+    public void testCaseClaimByDifferentUser() {\n+        String name = \"cordelia\";\n+        String location = \"boston\";\n+\n+        // Make sure we close off any existing cases due to previous test failures.\n+        HQApi.closeExistingCases(name, \"human\", \"d58f7a55dbe2bf22d0b6838311ada205\");\n+\n+        // Waiting here cuz, HQ sometimes is out of sync and might give stale data.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test1\", \"123\");\n+\n+        // Make sure that a case with cordelia doesn't exist.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(\"SEARCH ALL CASES\"))\n+                .perform(click());\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                1\n+        )).perform(typeText(name));\n+        closeSoftKeyboard();\n+        onView(withId(R.id.request_button))\n+                .perform(click());\n+        onView(withId(R.id.request_button))\n+                .check(matches(isDisplayed())); // The request doesn't do anything which confirms case doesn't exists.\n+\n+        // Register a new case with name cordelia\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        onView(withText(\"Registration\"))\n+                .perform(click());\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(name));\n+\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click());\n+\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(location));\n+        onView(withId(R.id.nav_btn_finish))\n+                .perform(click());\n+\n+        // Confirm newly created case can be claimed.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(name))\n+                .check(matches(isDisplayed()));\n+        onView(withText(name))\n+                .perform(click());\n+        onView(withText(\"Continue\"))\n+                .perform(click());\n+        onView(withText(\"Close\"))\n+                .check(matches(isDisplayed()));\n+\n+        // Login with another user.\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        Utility.logout();\n+\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test2\", \"123\");\n+        // Syncing once again to pull all the case data.\n+        onView(withText(\"Sync with Server\"))\n+                .perform(click());\n+\n+        // Somehow, espresso starts before data pull is completed.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        // Search for cordelia.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(\"SEARCH ALL CASES\"))\n+                .perform(click());\n+\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                1\n+        )).perform(typeText(name));\n+\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                2\n+        )).perform(typeText(location));\n+\n+        closeSoftKeyboard();\n+        onView(withId(R.id.request_button))\n+                .perform(click());\n+\n+        // Claim the new case of cordelia with this user.", "originalCommit": "919549937491b8b7f3936b636c2b56f7a137f8e2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0d155011c4d93060f25a15a3822432c7fdd98716", "chunk": "diff --git a/app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java b/app/instrumentation-tests/src/org/commcare/androidTests/CaseClaimTest.java\nsimilarity index 99%\nrename from app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java\nrename to app/instrumentation-tests/src/org/commcare/androidTests/CaseClaimTest.java\nindex 9c51f680e..eee71d8d7 100644\n--- a/app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java\n+++ b/app/instrumentation-tests/src/org/commcare/androidTests/CaseClaimTest.java\n\n@@ -1,4 +1,4 @@\n-package org.commcare.tests;\n+package org.commcare.androidTests;\n \n import androidx.test.ext.junit.runners.AndroidJUnit4;\n import androidx.test.filters.LargeTest;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkyNDUzNA==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448924534", "bodyText": "we don't need to search any more, but just test in the follow up list ?", "author": "shubham1g5", "createdAt": "2020-07-02T11:07:34Z", "path": "app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.commcare.tests;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import org.commcare.dalvik.R;\n+import org.commcare.utils.HQApi;\n+import org.commcare.utils.Utility;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import java.util.concurrent.TimeUnit;\n+\n+import static androidx.test.espresso.Espresso.closeSoftKeyboard;\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.Espresso.pressBackUnconditionally;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.action.ViewActions.typeText;\n+import static androidx.test.espresso.assertion.ViewAssertions.matches;\n+import static androidx.test.espresso.matcher.ViewMatchers.isDisplayed;\n+import static androidx.test.espresso.matcher.ViewMatchers.isRoot;\n+import static androidx.test.espresso.matcher.ViewMatchers.withClassName;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.endsWith;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class CaseClaimTest extends BaseTest {\n+\n+    private final String cczName = \"case_claim.ccz\";\n+    private final String appName = \"Case Search and Claim\";\n+\n+    @Before\n+    public void setup() {\n+        installApp(appName, cczName);\n+    }\n+\n+    @Test\n+    public void testCaseClaimByDifferentUser() {\n+        String name = \"cordelia\";\n+        String location = \"boston\";\n+\n+        // Make sure we close off any existing cases due to previous test failures.\n+        HQApi.closeExistingCases(name, \"human\", \"d58f7a55dbe2bf22d0b6838311ada205\");\n+\n+        // Waiting here cuz, HQ sometimes is out of sync and might give stale data.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test1\", \"123\");\n+\n+        // Make sure that a case with cordelia doesn't exist.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(\"SEARCH ALL CASES\"))\n+                .perform(click());\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                1\n+        )).perform(typeText(name));\n+        closeSoftKeyboard();\n+        onView(withId(R.id.request_button))\n+                .perform(click());\n+        onView(withId(R.id.request_button))\n+                .check(matches(isDisplayed())); // The request doesn't do anything which confirms case doesn't exists.\n+\n+        // Register a new case with name cordelia\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        onView(withText(\"Registration\"))\n+                .perform(click());\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(name));\n+\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click());\n+\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(location));\n+        onView(withId(R.id.nav_btn_finish))\n+                .perform(click());\n+\n+        // Confirm newly created case can be claimed.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(name))\n+                .check(matches(isDisplayed()));\n+        onView(withText(name))\n+                .perform(click());\n+        onView(withText(\"Continue\"))\n+                .perform(click());\n+        onView(withText(\"Close\"))\n+                .check(matches(isDisplayed()));\n+\n+        // Login with another user.\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        pressBackUnconditionally();\n+        Utility.logout();\n+\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test2\", \"123\");\n+        // Syncing once again to pull all the case data.\n+        onView(withText(\"Sync with Server\"))\n+                .perform(click());\n+\n+        // Somehow, espresso starts before data pull is completed.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        // Search for cordelia.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(\"SEARCH ALL CASES\"))\n+                .perform(click());\n+\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                1\n+        )).perform(typeText(name));\n+\n+        onView(Utility.find(\n+                allOf(withClassName(endsWith(\"EditText\"))),\n+                2\n+        )).perform(typeText(location));\n+\n+        closeSoftKeyboard();\n+        onView(withId(R.id.request_button))\n+                .perform(click());\n+\n+        // Claim the new case of cordelia with this user.\n+        onView(withText(name))\n+                .perform(click());\n+        onView(withText(\"Continue\"))\n+                .perform(click());\n+        onView(withText(\"Close\"))\n+                .perform(click());\n+        onView(withText(\"Yes\"))\n+                .perform(click());\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click());\n+        onView(withClassName(endsWith(\"EditText\")))\n+                .perform(typeText(\"Robot says bye\"));\n+        onView(withId(R.id.nav_btn_finish))\n+                .perform(click());\n+        onView(withText(\"Sync with Server\"))\n+                .perform(click());\n+\n+        // Login with first user again.\n+        Utility.logout();\n+\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        Utility.login(\"claim_test1\", \"123\");\n+        // Sync with server to pull all the data.\n+        onView(withText(\"Sync with Server\"))\n+                .perform(click());\n+        // Make sure espresso doesn't start before data pull is completed.\n+        onView(isRoot()).perform(Utility.sleep(TimeUnit.SECONDS.toMillis(15)));\n+\n+        // Make sure the case is no longer around.\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Follow Up\"))\n+                .perform(click());\n+        onView(withText(\"SEARCH ALL CASES\"))", "originalCommit": "919549937491b8b7f3936b636c2b56f7a137f8e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk4MTkwNA==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448981904", "bodyText": "I tried to have almost exactly the same flow as calabash. And I think we're doing the same there.", "author": "ShivamPokhriyal", "createdAt": "2020-07-02T12:58:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkyNDUzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ4NjcwMQ==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r449486701", "bodyText": "I can't find the \"search all cases\" here as well.  Am I missing something ?", "author": "shubham1g5", "createdAt": "2020-07-03T09:39:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkyNDUzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAzODI0NA==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r450038244", "bodyText": "updated. Sorry the confusion.", "author": "ShivamPokhriyal", "createdAt": "2020-07-06T07:39:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkyNDUzNA=="}], "type": "inlineReview", "revised_code": {"commit": "0d155011c4d93060f25a15a3822432c7fdd98716", "chunk": "diff --git a/app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java b/app/instrumentation-tests/src/org/commcare/androidTests/CaseClaimTest.java\nsimilarity index 99%\nrename from app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java\nrename to app/instrumentation-tests/src/org/commcare/androidTests/CaseClaimTest.java\nindex 9c51f680e..eee71d8d7 100644\n--- a/app/instrumentation-tests/src/org/commcare/tests/CaseClaimTest.java\n+++ b/app/instrumentation-tests/src/org/commcare/androidTests/CaseClaimTest.java\n\n@@ -1,4 +1,4 @@\n-package org.commcare.tests;\n+package org.commcare.androidTests;\n \n import androidx.test.ext.junit.runners.AndroidJUnit4;\n import androidx.test.filters.LargeTest;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkyNTI5OA==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448925298", "bodyText": "very cool and much better apis then calabash!", "author": "shubham1g5", "createdAt": "2020-07-02T11:09:24Z", "path": "app/instrumentation-tests/src/org/commcare/tests/FormAttachmentUploadTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.commcare.tests;\n+\n+import androidx.test.espresso.action.GeneralLocation;\n+import androidx.test.espresso.action.GeneralSwipeAction;\n+import androidx.test.espresso.action.Press;\n+import androidx.test.espresso.action.Swipe;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import androidx.test.filters.LargeTest;\n+import org.commcare.activities.DrawActivity;\n+import org.commcare.dalvik.R;\n+import org.commcare.modern.util.Pair;\n+import org.commcare.utils.HQApi;\n+import org.commcare.utils.Utility;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import java.util.concurrent.TimeUnit;\n+\n+import static androidx.test.espresso.Espresso.onData;\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.matcher.ViewMatchers.isRoot;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertNotNull;\n+import static org.hamcrest.Matchers.anything;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static junit.framework.Assert.assertTrue;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+@RunWith(AndroidJUnit4.class)\n+@LargeTest\n+public class FormAttachmentUploadTest extends BaseTest {\n+\n+    private final String cczName = \"integration_test_app.ccz\";\n+    private final String appName = \"Integration Tests\";\n+\n+    @Before\n+    public void setup() {\n+        installApp(appName, cczName);\n+        Utility.login(\"test\", \"123\");\n+    }\n+\n+    @Test\n+    public void testAttachmentUpload() {\n+        Long latestFormTime = HQApi.getLatestFormTime();\n+        assertNotNull(latestFormTime);\n+\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        onView(withText(\"Form Attachments\"))\n+                .perform(click());\n+        onData(anything())\n+                .inAdapterView(withId(R.id.screen_suite_menu_list))\n+                .atPosition(1)\n+                .perform(click());\n+\n+        Utility.chooseImage();\n+\n+        onView(withId(R.id.nav_btn_next))\n+                .perform(click());\n+\n+        onView(withText(\"Gather Signature\"))\n+                .perform(click());\n+        onView(instanceOf(DrawActivity.DrawView.class))", "originalCommit": "919549937491b8b7f3936b636c2b56f7a137f8e2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0d155011c4d93060f25a15a3822432c7fdd98716", "chunk": "diff --git a/app/instrumentation-tests/src/org/commcare/tests/FormAttachmentUploadTest.java b/app/instrumentation-tests/src/org/commcare/androidTests/FormAttachmentUploadTest.java\nsimilarity index 99%\nrename from app/instrumentation-tests/src/org/commcare/tests/FormAttachmentUploadTest.java\nrename to app/instrumentation-tests/src/org/commcare/androidTests/FormAttachmentUploadTest.java\nindex 79e80cd1f..078603664 100644\n--- a/app/instrumentation-tests/src/org/commcare/tests/FormAttachmentUploadTest.java\n+++ b/app/instrumentation-tests/src/org/commcare/androidTests/FormAttachmentUploadTest.java\n\n@@ -1,4 +1,4 @@\n-package org.commcare.tests;\n+package org.commcare.androidTests;\n \n import androidx.test.espresso.action.GeneralLocation;\n import androidx.test.espresso.action.GeneralSwipeAction;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkzMzgwOQ==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448933809", "bodyText": "Why are not we using exisiting Java Android date time utilities ?", "author": "shubham1g5", "createdAt": "2020-07-02T11:27:14Z", "path": "app/instrumentation-tests/src/org/commcare/utils/DateTime.java", "diffHunk": "@@ -0,0 +1,361 @@\n+/*\n+ * Copyright (c) 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.commcare.utils;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.TimeZone;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Immutable representation of a date with an optional time and an optional time zone based on <a\n+ * href=\"http://tools.ietf.org/html/rfc3339\">RFC 3339</a>.\n+ *\n+ * <p>\n+ * Implementation is immutable and therefore thread-safe.\n+ * </p>\n+ *\n+ * @since 1.0\n+ * @author Yaniv Inbar\n+ */\n+public final class DateTime implements Serializable {", "originalCommit": "919549937491b8b7f3936b636c2b56f7a137f8e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk3NzY2NQ==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448977665", "bodyText": "I remember trying the Android DateTime methods for this but couldn't get them to work as expected. So I used this utility instead. It was maybe the Z offset that caused some trouble to me.", "author": "ShivamPokhriyal", "createdAt": "2020-07-02T12:51:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkzMzgwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ4NzYxMg==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r449487612", "bodyText": "Would you be able to have a relook and elaborate the issue you had with the Z offset.", "author": "shubham1g5", "createdAt": "2020-07-03T09:41:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkzMzgwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIyMzA2NA==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r450223064", "bodyText": "Putting it in here in case you're interested. The date string coming from HQ was like 2020-06-12T02:42:38.555065Z\nThe closest I got to converting that to milliseconds was using SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSsss'Z'\") and it gave 1591929785555 which is different than the expected 1591929758555.\njava.time.Instant.parse() gives correct result but it requires api level 26+ so can't use that also.\nSo, I'm using org.joda.DateTime right now.", "author": "ShivamPokhriyal", "createdAt": "2020-07-06T13:33:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkzMzgwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTUzNzk2OQ==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r451537969", "bodyText": "looks good.", "author": "shubham1g5", "createdAt": "2020-07-08T13:20:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkzMzgwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "6e54452415602918c054ba0bf49983a87c385ccb", "chunk": "diff --git a/app/instrumentation-tests/src/org/commcare/utils/DateTime.java b/app/instrumentation-tests/src/org/commcare/utils/DateTime.java\ndeleted file mode 100644\nindex a86886aa3..000000000\n--- a/app/instrumentation-tests/src/org/commcare/utils/DateTime.java\n+++ /dev/null\n\n@@ -1,361 +0,0 @@\n-/*\n- * Copyright (c) 2010 Google Inc.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n- * in compliance with the License. You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License\n- * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n- * or implied. See the License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-\n-package org.commcare.utils;\n-\n-import java.io.Serializable;\n-import java.util.Arrays;\n-import java.util.Calendar;\n-import java.util.Date;\n-import java.util.GregorianCalendar;\n-import java.util.TimeZone;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n-\n-/**\n- * Immutable representation of a date with an optional time and an optional time zone based on <a\n- * href=\"http://tools.ietf.org/html/rfc3339\">RFC 3339</a>.\n- *\n- * <p>\n- * Implementation is immutable and therefore thread-safe.\n- * </p>\n- *\n- * @since 1.0\n- * @author Yaniv Inbar\n- */\n-public final class DateTime implements Serializable {\n-\n-    private static final long serialVersionUID = 1L;\n-\n-    private static final TimeZone GMT = TimeZone.getTimeZone(\"GMT\");\n-\n-    /** Regular expression for parsing RFC3339 date/times. */\n-    private static final Pattern RFC3339_PATTERN = Pattern.compile(\n-            \"^(\\\\d{4})-(\\\\d{2})-(\\\\d{2})\" // yyyy-MM-dd\n-                    + \"([Tt](\\\\d{2}):(\\\\d{2}):(\\\\d{2})(\\\\.\\\\d+)?)?\" // 'T'HH:mm:ss.milliseconds\n-                    + \"([Zz]|([+-])(\\\\d{2}):(\\\\d{2}))?\"); // 'Z' or time zone shift HH:mm following '+' or '-'\n-\n-    /**\n-     * Date/time value expressed as the number of ms since the Unix epoch.\n-     *\n-     * <p>\n-     * If the time zone is specified, this value is normalized to UTC, so to format this date/time\n-     * value, the time zone shift has to be applied.\n-     * </p>\n-     */\n-    private final long value;\n-\n-    /** Specifies whether this is a date-only value. */\n-    private final boolean dateOnly;\n-\n-    /** Time zone shift from UTC in minutes or {@code 0} for date-only value. */\n-    private final int tzShift;\n-\n-    /**\n-     * Instantiates {@link DateTime} from a {@link Date} and {@link TimeZone}.\n-     *\n-     * @param date date and time\n-     * @param zone time zone; if {@code null}, it is interpreted as {@code TimeZone.getDefault()}.\n-     */\n-    public DateTime(Date date, TimeZone zone) {\n-        this(false, date.getTime(), zone == null ? null : zone.getOffset(date.getTime()) / 60000);\n-    }\n-\n-    /**\n-     * Instantiates {@link DateTime} from the number of milliseconds since the Unix epoch.\n-     *\n-     * <p>\n-     * The time zone is interpreted as {@code TimeZone.getDefault()}, which may vary with\n-     * implementation.\n-     * </p>\n-     *\n-     * @param value number of milliseconds since the Unix epoch (January 1, 1970, 00:00:00 GMT)\n-     */\n-    public DateTime(long value) {\n-        this(false, value, null);\n-    }\n-\n-    /**\n-     * Instantiates {@link DateTime} from a {@link Date}.\n-     *\n-     * <p>\n-     * The time zone is interpreted as {@code TimeZone.getDefault()}, which may vary with\n-     * implementation.\n-     * </p>\n-     *\n-     * @param value date and time\n-     */\n-    public DateTime(Date value) {\n-        this(value.getTime());\n-    }\n-\n-    /**\n-     * Instantiates {@link DateTime} from the number of milliseconds since the Unix epoch, and a shift\n-     * from UTC in minutes.\n-     *\n-     * @param value number of milliseconds since the Unix epoch (January 1, 1970, 00:00:00 GMT)\n-     * @param tzShift time zone, represented by the number of minutes off of UTC.\n-     */\n-    public DateTime(long value, int tzShift) {\n-        this(false, value, tzShift);\n-    }\n-\n-    /**\n-     * Instantiates {@link DateTime}, which may represent a date-only value, from the number of\n-     * milliseconds since the Unix epoch, and a shift from UTC in minutes.\n-     *\n-     * @param dateOnly specifies if this should represent a date-only value\n-     * @param value number of milliseconds since the Unix epoch (January 1, 1970, 00:00:00 GMT)\n-     * @param tzShift time zone, represented by the number of minutes off of UTC, or {@code null} for\n-     *        {@code TimeZone.getDefault()}.\n-     */\n-    public DateTime(boolean dateOnly, long value, Integer tzShift) {\n-        this.dateOnly = dateOnly;\n-        this.value = value;\n-        this.tzShift =\n-                dateOnly ? 0 : tzShift == null ? TimeZone.getDefault().getOffset(value) / 60000 : tzShift;\n-    }\n-\n-    /**\n-     * Instantiates {@link DateTime} from an <a href='http://tools.ietf.org/html/rfc3339'>RFC 3339</a>\n-     * date/time value.\n-     *\n-     * <p>\n-     * Upgrade warning: in prior version 1.17, this method required milliseconds to be exactly 3\n-     * digits (if included), and did not throw an exception for all types of invalid input values, but\n-     * starting in version 1.18, the parsing done by this method has become more strict to enforce\n-     * that only valid RFC3339 strings are entered, and if not, it throws a\n-     * {@link NumberFormatException}. Also, in accordance with the RFC3339 standard, any number of\n-     * milliseconds digits is now allowed.\n-     * </p>\n-     *\n-     * @param value an <a href='http://tools.ietf.org/html/rfc3339'>RFC 3339</a> date/time value.\n-     * @since 1.11\n-     */\n-    public DateTime(String value) {\n-        // Note, the following refactoring is being considered: Move the implementation of parseRfc3339\n-        // into this constructor. Implementation of parseRfc3339 can then do\n-        // \"return new DateTime(str);\".\n-        DateTime dateTime = parseRfc3339(value);\n-        this.dateOnly = dateTime.dateOnly;\n-        this.value = dateTime.value;\n-        this.tzShift = dateTime.tzShift;\n-    }\n-\n-    /**\n-     * Returns the date/time value expressed as the number of milliseconds since the Unix epoch.\n-     *\n-     * <p>\n-     * If the time zone is specified, this value is normalized to UTC, so to format this date/time\n-     * value, the time zone shift has to be applied.\n-     * </p>\n-     *\n-     * @since 1.5\n-     */\n-    public long getValue() {\n-        return value;\n-    }\n-\n-    /**\n-     * Returns whether this is a date-only value.\n-     *\n-     * @since 1.5\n-     */\n-    public boolean isDateOnly() {\n-        return dateOnly;\n-    }\n-\n-    /**\n-     * Returns the time zone shift from UTC in minutes or {@code 0} for date-only value.\n-     *\n-     * @since 1.5\n-     */\n-    public int getTimeZoneShift() {\n-        return tzShift;\n-    }\n-\n-    /** Formats the value as an RFC 3339 date/time string. */\n-    public String toStringRfc3339() {\n-        StringBuilder sb = new StringBuilder();\n-        Calendar dateTime = new GregorianCalendar(GMT);\n-        long localTime = value + (tzShift * 60000L);\n-        dateTime.setTimeInMillis(localTime);\n-        // date\n-        appendInt(sb, dateTime.get(Calendar.YEAR), 4);\n-        sb.append('-');\n-        appendInt(sb, dateTime.get(Calendar.MONTH) + 1, 2);\n-        sb.append('-');\n-        appendInt(sb, dateTime.get(Calendar.DAY_OF_MONTH), 2);\n-        if (!dateOnly) {\n-            // time\n-            sb.append('T');\n-            appendInt(sb, dateTime.get(Calendar.HOUR_OF_DAY), 2);\n-            sb.append(':');\n-            appendInt(sb, dateTime.get(Calendar.MINUTE), 2);\n-            sb.append(':');\n-            appendInt(sb, dateTime.get(Calendar.SECOND), 2);\n-\n-            if (dateTime.isSet(Calendar.MILLISECOND)) {\n-                sb.append('.');\n-                appendInt(sb, dateTime.get(Calendar.MILLISECOND), 3);\n-            }\n-            // time zone\n-            if (tzShift == 0) {\n-                sb.append('Z');\n-            } else {\n-                int absTzShift = tzShift;\n-                if (tzShift > 0) {\n-                    sb.append('+');\n-                } else {\n-                    sb.append('-');\n-                    absTzShift = -absTzShift;\n-                }\n-\n-                int tzHours = absTzShift / 60;\n-                int tzMinutes = absTzShift % 60;\n-                appendInt(sb, tzHours, 2);\n-                sb.append(':');\n-                appendInt(sb, tzMinutes, 2);\n-            }\n-        }\n-        return sb.toString();\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return toStringRfc3339();\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     *\n-     * <p>\n-     * A check is added that the time zone is the same. If you ONLY want to check equality of time\n-     * value, check equality on the {@link #getValue()}.\n-     * </p>\n-     */\n-    @Override\n-    public boolean equals(Object o) {\n-        if (o == this) {\n-            return true;\n-        }\n-        if (!(o instanceof DateTime)) {\n-            return false;\n-        }\n-        DateTime other = (DateTime) o;\n-        return dateOnly == other.dateOnly && value == other.value && tzShift == other.tzShift;\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return Arrays.hashCode(new long[] {value, dateOnly ? 1 : 0, tzShift});\n-    }\n-\n-    /**\n-     * Parses an RFC3339 date/time value.\n-     *\n-     * <p>\n-     * Upgrade warning: in prior version 1.17, this method required milliseconds to be exactly 3\n-     * digits (if included), and did not throw an exception for all types of invalid input values, but\n-     * starting in version 1.18, the parsing done by this method has become more strict to enforce\n-     * that only valid RFC3339 strings are entered, and if not, it throws a\n-     * {@link NumberFormatException}. Also, in accordance with the RFC3339 standard, any number of\n-     * milliseconds digits is now allowed.\n-     * </p>\n-     *\n-     * <p>\n-     * For the date-only case, the time zone is ignored and the hourOfDay, minute, second, and\n-     * millisecond parameters are set to zero.\n-     * </p>\n-     *\n-     * @param str Date/time string in RFC3339 format\n-     * @throws NumberFormatException if {@code str} doesn't match the RFC3339 standard format; an\n-     *         exception is thrown if {@code str} doesn't match {@code RFC3339_REGEX} or if it\n-     *         contains a time zone shift but no time.\n-     */\n-    public static DateTime parseRfc3339(String str) throws NumberFormatException {\n-        Matcher matcher = RFC3339_PATTERN.matcher(str);\n-        if (!matcher.matches()) {\n-            throw new NumberFormatException(\"Invalid date/time format: \" + str);\n-        }\n-\n-        int year = Integer.parseInt(matcher.group(1)); // yyyy\n-        int month = Integer.parseInt(matcher.group(2)) - 1; // MM\n-        int day = Integer.parseInt(matcher.group(3)); // dd\n-        boolean isTimeGiven = matcher.group(4) != null; // 'T'HH:mm:ss.milliseconds\n-        String tzShiftRegexGroup = matcher.group(9); // 'Z', or time zone shift HH:mm following '+'/'-'\n-        boolean isTzShiftGiven = tzShiftRegexGroup != null;\n-        int hourOfDay = 0;\n-        int minute = 0;\n-        int second = 0;\n-        int milliseconds = 0;\n-        Integer tzShiftInteger = null;\n-\n-        if (isTzShiftGiven && !isTimeGiven) {\n-            throw new NumberFormatException(\"Invalid date/time format, cannot specify time zone shift\" +\n-                    \" without specifying time: \" + str);\n-        }\n-\n-        if (isTimeGiven) {\n-            hourOfDay = Integer.parseInt(matcher.group(5)); // HH\n-            minute = Integer.parseInt(matcher.group(6)); // mm\n-            second = Integer.parseInt(matcher.group(7)); // ss\n-            if (matcher.group(8) != null) { // contains .milliseconds?\n-                milliseconds = Integer.parseInt(matcher.group(8).substring(1)); // milliseconds\n-                // The number of digits after the dot may not be 3. Need to renormalize.\n-                int fractionDigits = matcher.group(8).substring(1).length() - 3;\n-                milliseconds = (int) ((float) milliseconds / Math.pow(10, fractionDigits));\n-            }\n-        }\n-        Calendar dateTime = new GregorianCalendar(GMT);\n-        dateTime.set(year, month, day, hourOfDay, minute, second);\n-        dateTime.set(Calendar.MILLISECOND, milliseconds);\n-        long value = dateTime.getTimeInMillis();\n-\n-        if (isTimeGiven && isTzShiftGiven) {\n-            int tzShift;\n-            if (Character.toUpperCase(tzShiftRegexGroup.charAt(0)) == 'Z') {\n-                tzShift = 0;\n-            } else {\n-                tzShift = Integer.parseInt(matcher.group(11)) * 60 // time zone shift HH\n-                        + Integer.parseInt(matcher.group(12)); // time zone shift mm\n-                if (matcher.group(10).charAt(0) == '-') { // time zone shift + or -\n-                    tzShift = -tzShift;\n-                }\n-                value -= tzShift * 60000L; // e.g. if 1 hour ahead of UTC, subtract an hour to get UTC time\n-            }\n-            tzShiftInteger = tzShift;\n-        }\n-        return new DateTime(!isTimeGiven, value, tzShiftInteger);\n-    }\n-\n-    /** Appends a zero-padded number to a string builder. */\n-    private static void appendInt(StringBuilder sb, int num, int numDigits) {\n-        if (num < 0) {\n-            sb.append('-');\n-            num = -num;\n-        }\n-        int x = num;\n-        while (x > 0) {\n-            x /= 10;\n-            numDigits--;\n-        }\n-        for (int i = 0; i < numDigits; i++) {\n-            sb.append('0');\n-        }\n-        if (num != 0) {\n-            sb.append(num);\n-        }\n-    }\n-}\n\\ No newline at end of file\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk1NjE0OA==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448956148", "bodyText": "how about onImageCaptureIntentSent ?", "author": "shubham1g5", "createdAt": "2020-07-02T12:12:00Z", "path": "app/instrumentation-tests/src/org/commcare/utils/Utility.java", "diffHunk": "@@ -0,0 +1,240 @@\n+package org.commcare.utils;\n+\n+import android.app.Activity;\n+import android.app.Instrumentation;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+import android.net.Uri;\n+import android.provider.MediaStore;\n+import android.view.View;\n+import androidx.annotation.IdRes;\n+import androidx.test.espresso.DataInteraction;\n+import androidx.test.espresso.UiController;\n+import androidx.test.espresso.ViewAction;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+import androidx.test.runner.intent.IntentMonitorRegistry;\n+import org.commcare.dalvik.R;\n+import org.hamcrest.BaseMatcher;\n+import org.hamcrest.Description;\n+import org.hamcrest.Matcher;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n+import static androidx.test.espresso.Espresso.closeSoftKeyboard;\n+import static androidx.test.espresso.Espresso.onData;\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.Espresso.openActionBarOverflowOrOptionsMenu;\n+import static androidx.test.espresso.action.ViewActions.clearText;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.action.ViewActions.swipeUp;\n+import static androidx.test.espresso.action.ViewActions.typeText;\n+import static androidx.test.espresso.intent.Intents.intending;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasAction;\n+import static androidx.test.espresso.matcher.RootMatchers.isDialog;\n+import static androidx.test.espresso.matcher.ViewMatchers.isRoot;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static org.hamcrest.Matchers.anything;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+public class Utility {\n+\n+    /**\n+     * Installs the ccz by copying it into app-specific cache directory.\n+     * @param cczName\n+     */\n+    public static void installApp(String cczName) {\n+        Context context = InstrumentationRegistry.getInstrumentation().getTargetContext();\n+        File file = new File(context.getExternalCacheDir(), cczName);\n+        if (!file.exists()) {\n+            InputStream is = context.getClassLoader().getResourceAsStream(cczName);\n+            try {\n+                FileUtil.copyFile(is, file);\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+        openOptionsMenu();\n+        onView(withText(\"Offline Install\"))\n+                .perform(click());\n+        stubFileSelection(file.getAbsolutePath());\n+        onView(withId(R.id.screen_multimedia_inflater_filefetch)).perform(click());\n+        onView(withId(R.id.screen_multimedia_inflater_install))\n+                .perform(click());\n+    }\n+\n+    public static void uninstallCurrentApp() {\n+        openOptionsMenu();\n+        onView(withText(\"Go To App Manager\")).perform(click());\n+        clickListItem(R.id.apps_list_view, 0);\n+        onView(withText(\"Uninstall\")).perform(click());\n+        onView(withText(\"OK\")).inRoot(isDialog()).perform(click());\n+        onView(withId(R.id.install_app_button)).perform(click());\n+    }\n+\n+    public static void login(String userName, String password) {\n+        onView(withId(R.id.edit_username))\n+                .perform(clearText());\n+        onView(withId(R.id.edit_username))\n+                .perform(typeText(userName));\n+        closeSoftKeyboard();\n+        onView(withId(R.id.edit_password))\n+                .perform(typeText(password));\n+        closeSoftKeyboard();\n+        onView(withId(R.id.login_button))\n+                .perform(click());\n+    }\n+\n+    public static void openFirstForm() {\n+        onView(withText(\"Start\"))\n+                .perform(click());\n+        clickListItem(R.id.screen_suite_menu_list, 0);\n+        clickListItem(R.id.screen_suite_menu_list, 1);\n+    }\n+\n+    public static void openOptionsMenu() {\n+        Context context = InstrumentationRegistry.getInstrumentation().getTargetContext();\n+        openActionBarOverflowOrOptionsMenu(context);\n+    }\n+\n+    /**\n+     * Click the list item at a particular item position\n+     * @param resId Resource reference to the list.\n+     * @param position Position of the item to be clicked.\n+     */\n+    public static void clickListItem(@IdRes int resId, int position) {\n+        onData(anything())\n+                .inAdapterView(withId(resId))\n+                .atPosition(position)\n+                .perform(click());\n+    }\n+\n+    /**\n+     * Returns a subview inside a particular list item.\n+     * @param listId Resource reference to the list.\n+     * @param position Position of the list item whose subview is needed.\n+     * @param subviewId Resource reference to the subview.\n+     */\n+    public static DataInteraction getSubViewInListItem(@IdRes int listId, int position, @IdRes int subviewId) {\n+        return onData(anything())\n+                .inAdapterView(withId(listId))\n+                .atPosition(position)\n+                .onChildView(withId(subviewId));\n+    }\n+\n+    /**\n+     * Opens first incomplete form in the app.\n+     * Need to have incomplete-form-enabled custom parameter set.\n+     */\n+    public static void openFirstIncompleteForm() {\n+        onView(withText(startsWith(\"Incomplete\"))).perform(click());\n+        clickListItem(R.id.screen_entity_select_list, 0);\n+    }\n+\n+    public static void logout() {\n+        onView(withId(R.id.home_gridview_buttons))\n+                .perform(swipeUp());\n+        onView(withText(\"Log out of CommCare\"))\n+                .perform(click());\n+    }\n+\n+    /**\n+     * Stubs the camera intent and uses R.mipmap.ic_launcher as the image to be returned by the camera.\n+     */\n+    public static void chooseImage() {\n+        stubCamera();\n+        IntentMonitorRegistry.getInstance().addIntentCallback(Utility::onIntentSent);\n+        onView(withText(R.string.capture_image))\n+                .perform(click());\n+        IntentMonitorRegistry.getInstance().removeIntentCallback(Utility::onIntentSent);\n+    }\n+\n+    /**\n+     * Apparently Thread.sleep() doesn't work on espresso.\n+     * https://youtu.be/isihPOY2vS4?t=674\n+     */\n+    public static ViewAction sleep(final long millis) {\n+        return new ViewAction() {\n+            @Override\n+            public Matcher<View> getConstraints() {\n+                return isRoot();\n+            }\n+\n+            @Override\n+            public String getDescription() {\n+                return \"Going to sleep for \" + millis + \"milliseconds\";\n+            }\n+\n+            @Override\n+            public void perform(UiController uiController, final View view) {\n+                uiController.loopMainThreadForAtLeast(millis);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * In case a view contains more than 1 items of same type,\n+     * use this to select the item at @param position.\n+     * NOTE:- position is 1 based.\n+     */\n+    public static <T> Matcher<T> find(Matcher<T> matcher, int position) {\n+        return new BaseMatcher<T>() {\n+            int count = 0;\n+            @Override\n+            public boolean matches(Object item) {\n+                if (matcher.matches(item)) {\n+                    count++;\n+                    return count == position;\n+                }\n+                return false;\n+            }\n+\n+            @Override\n+            public void describeTo(Description description) {\n+                description.appendText(\"will return \" + position + \" matching item\");\n+            }\n+        };\n+    }\n+\n+    //region private helpers.\n+    private static void stubCamera() {\n+        // Build a result to return from the Camera app\n+        Intent resultData = new Intent();\n+        Instrumentation.ActivityResult result = new Instrumentation.ActivityResult(Activity.RESULT_OK, resultData);\n+\n+        // Stub out the Camera. When an intent is sent to the Camera, this tells Espresso to respond\n+        // with the ActivityResult we just created\n+        intending(hasAction(MediaStore.ACTION_IMAGE_CAPTURE)).respondWith(result);\n+    }\n+\n+    private static void stubFileSelection(String filePath) {\n+        Intent resultData = new Intent();\n+        Uri fileUri = Uri.fromFile(new File(filePath));\n+        resultData.setData(fileUri);\n+        Instrumentation.ActivityResult result = new Instrumentation.ActivityResult(Activity.RESULT_OK, resultData);\n+        intending(hasAction(Intent.ACTION_GET_CONTENT)).respondWith(result);\n+    }\n+\n+    private static void onIntentSent(Intent intent) {", "originalCommit": "919549937491b8b7f3936b636c2b56f7a137f8e2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e54452415602918c054ba0bf49983a87c385ccb", "chunk": "diff --git a/app/instrumentation-tests/src/org/commcare/utils/Utility.java b/app/instrumentation-tests/src/org/commcare/utils/InstrumentationUtility.java\nsimilarity index 93%\nrename from app/instrumentation-tests/src/org/commcare/utils/Utility.java\nrename to app/instrumentation-tests/src/org/commcare/utils/InstrumentationUtility.java\nindex 67f899024..1be7fe67c 100644\n--- a/app/instrumentation-tests/src/org/commcare/utils/Utility.java\n+++ b/app/instrumentation-tests/src/org/commcare/utils/InstrumentationUtility.java\n\n@@ -23,6 +23,7 @@ import java.io.File;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n+import java.util.concurrent.TimeUnit;\n \n import static androidx.test.espresso.Espresso.closeSoftKeyboard;\n import static androidx.test.espresso.Espresso.onData;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk1NjMxNA==", "url": "https://github.com/dimagi/commcare-android/pull/2231#discussion_r448956314", "bodyText": "InstrumentationUtility ?", "author": "shubham1g5", "createdAt": "2020-07-02T12:12:19Z", "path": "app/instrumentation-tests/src/org/commcare/utils/Utility.java", "diffHunk": "@@ -0,0 +1,240 @@\n+package org.commcare.utils;\n+\n+import android.app.Activity;\n+import android.app.Instrumentation;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.graphics.Bitmap;\n+import android.graphics.BitmapFactory;\n+import android.net.Uri;\n+import android.provider.MediaStore;\n+import android.view.View;\n+import androidx.annotation.IdRes;\n+import androidx.test.espresso.DataInteraction;\n+import androidx.test.espresso.UiController;\n+import androidx.test.espresso.ViewAction;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+import androidx.test.runner.intent.IntentMonitorRegistry;\n+import org.commcare.dalvik.R;\n+import org.hamcrest.BaseMatcher;\n+import org.hamcrest.Description;\n+import org.hamcrest.Matcher;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n+import static androidx.test.espresso.Espresso.closeSoftKeyboard;\n+import static androidx.test.espresso.Espresso.onData;\n+import static androidx.test.espresso.Espresso.onView;\n+import static androidx.test.espresso.Espresso.openActionBarOverflowOrOptionsMenu;\n+import static androidx.test.espresso.action.ViewActions.clearText;\n+import static androidx.test.espresso.action.ViewActions.click;\n+import static androidx.test.espresso.action.ViewActions.swipeUp;\n+import static androidx.test.espresso.action.ViewActions.typeText;\n+import static androidx.test.espresso.intent.Intents.intending;\n+import static androidx.test.espresso.intent.matcher.IntentMatchers.hasAction;\n+import static androidx.test.espresso.matcher.RootMatchers.isDialog;\n+import static androidx.test.espresso.matcher.ViewMatchers.isRoot;\n+import static androidx.test.espresso.matcher.ViewMatchers.withId;\n+import static androidx.test.espresso.matcher.ViewMatchers.withText;\n+import static org.hamcrest.Matchers.anything;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+/**\n+ * @author $|-|!\u02c5@M\n+ */\n+public class Utility {", "originalCommit": "919549937491b8b7f3936b636c2b56f7a137f8e2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6e54452415602918c054ba0bf49983a87c385ccb", "chunk": "diff --git a/app/instrumentation-tests/src/org/commcare/utils/Utility.java b/app/instrumentation-tests/src/org/commcare/utils/InstrumentationUtility.java\nsimilarity index 93%\nrename from app/instrumentation-tests/src/org/commcare/utils/Utility.java\nrename to app/instrumentation-tests/src/org/commcare/utils/InstrumentationUtility.java\nindex 67f899024..1be7fe67c 100644\n--- a/app/instrumentation-tests/src/org/commcare/utils/Utility.java\n+++ b/app/instrumentation-tests/src/org/commcare/utils/InstrumentationUtility.java\n\n@@ -23,6 +23,7 @@ import java.io.File;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n+import java.util.concurrent.TimeUnit;\n \n import static androidx.test.espresso.Espresso.closeSoftKeyboard;\n import static androidx.test.espresso.Espresso.onData;\n"}}, {"oid": "0d155011c4d93060f25a15a3822432c7fdd98716", "url": "https://github.com/dimagi/commcare-android/commit/0d155011c4d93060f25a15a3822432c7fdd98716", "message": "Rename android tests package", "committedDate": "2020-07-03T04:22:28Z", "type": "commit"}, {"oid": "6e54452415602918c054ba0bf49983a87c385ccb", "url": "https://github.com/dimagi/commcare-android/commit/6e54452415602918c054ba0bf49983a87c385ccb", "message": "PR suggestions", "committedDate": "2020-07-06T07:37:40Z", "type": "commit"}, {"oid": "c152cfc70f83146df93774989f1cfe0e320fb47a", "url": "https://github.com/dimagi/commcare-android/commit/c152cfc70f83146df93774989f1cfe0e320fb47a", "message": "Use intent test rule on dispatch activity", "committedDate": "2020-07-06T11:29:27Z", "type": "commit"}, {"oid": "79a715ae29bd61bf78ead6e4fd35fcaab67c9f1e", "url": "https://github.com/dimagi/commcare-android/commit/79a715ae29bd61bf78ead6e4fd35fcaab67c9f1e", "message": "Use custom application class in androidTests", "committedDate": "2020-07-08T11:23:32Z", "type": "commit"}, {"oid": "b29076875c92d754eba422538378e24e69b06bd0", "url": "https://github.com/dimagi/commcare-android/commit/b29076875c92d754eba422538378e24e69b06bd0", "message": "Reset form entry activity to master", "committedDate": "2020-07-09T05:20:21Z", "type": "commit"}, {"oid": "cecfc6e0265d8867e924a8e528e4cfc94f0f9093", "url": "https://github.com/dimagi/commcare-android/commit/cecfc6e0265d8867e924a8e528e4cfc94f0f9093", "message": "Merge branch 'master' into test-saved-form-flow", "committedDate": "2020-07-09T05:21:19Z", "type": "commit"}, {"oid": "771490b50cf9ec011a27235904733b9dc86ffe6e", "url": "https://github.com/dimagi/commcare-android/commit/771490b50cf9ec011a27235904733b9dc86ffe6e", "message": "Use app bundles for testing on browserstack", "committedDate": "2020-07-09T09:45:53Z", "type": "commit"}, {"oid": "7f526342f2cb9b86db037c33174404b8c2ff5bbf", "url": "https://github.com/dimagi/commcare-android/commit/7f526342f2cb9b86db037c33174404b8c2ff5bbf", "message": "Rename debugApk to debugAppBundle", "committedDate": "2020-07-09T11:21:23Z", "type": "commit"}, {"oid": "7f526342f2cb9b86db037c33174404b8c2ff5bbf", "url": "https://github.com/dimagi/commcare-android/commit/7f526342f2cb9b86db037c33174404b8c2ff5bbf", "message": "Rename debugApk to debugAppBundle", "committedDate": "2020-07-09T11:21:23Z", "type": "forcePushed"}, {"oid": "d9db50dcf146ce07f81fd12480437b10fce86ae2", "url": "https://github.com/dimagi/commcare-android/commit/d9db50dcf146ce07f81fd12480437b10fce86ae2", "message": "Fix incorrect sleep time", "committedDate": "2020-07-21T05:37:21Z", "type": "commit"}, {"oid": "414261f4f594ee859d71810e10f2b0249f730939", "url": "https://github.com/dimagi/commcare-android/commit/414261f4f594ee859d71810e10f2b0249f730939", "message": "Use browserstack device names from jenkins job config", "committedDate": "2020-07-21T06:24:55Z", "type": "commit"}, {"oid": "54fcb2d2a263cb5093b7d809545de5cc0295656b", "url": "https://github.com/dimagi/commcare-android/commit/54fcb2d2a263cb5093b7d809545de5cc0295656b", "message": "Merge branch 'master' into test-saved-form-flow", "committedDate": "2020-07-21T07:03:10Z", "type": "commit"}, {"oid": "a303724c1d92ad065934493a9bf0fa344b0b9571", "url": "https://github.com/dimagi/commcare-android/commit/a303724c1d92ad065934493a9bf0fa344b0b9571", "message": "Get the result of browerstack test run in jenkins", "committedDate": "2020-07-21T13:22:49Z", "type": "commit"}, {"oid": "b17fa22b71988a60b2a83abcfdee4f60b4d3ae5f", "url": "https://github.com/dimagi/commcare-android/commit/b17fa22b71988a60b2a83abcfdee4f60b4d3ae5f", "message": "Update tests to run on release build", "committedDate": "2020-07-23T06:59:29Z", "type": "commit"}, {"oid": "c86a5bceed20732ec133f0b608072a778ca5e896", "url": "https://github.com/dimagi/commcare-android/commit/c86a5bceed20732ec133f0b608072a778ca5e896", "message": "Update script to use release apks for browserstack", "committedDate": "2020-07-23T07:00:53Z", "type": "commit"}, {"oid": "db4853d3001440e1d5f79821b89211f1015494cc", "url": "https://github.com/dimagi/commcare-android/commit/db4853d3001440e1d5f79821b89211f1015494cc", "message": "Fix NoSuchMethodError in release build", "committedDate": "2020-07-23T07:01:38Z", "type": "commit"}]}