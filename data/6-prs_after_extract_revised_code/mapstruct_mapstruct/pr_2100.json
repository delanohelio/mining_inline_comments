{"pr_number": 2100, "pr_title": "Add EnumNamingStrategy SPI", "pr_createdAt": "2020-05-18T05:26:20Z", "pr_url": "https://github.com/mapstruct/mapstruct/pull/2100", "timeline": [{"oid": "35622df45c2080b176f0f4aeed94b26cfdb4a8b8", "url": "https://github.com/mapstruct/mapstruct/commit/35622df45c2080b176f0f4aeed94b26cfdb4a8b8", "message": "Add EnumNamingStrategy SPI\n\nAdd a new EnumNamingStrategy SPI which can be used for customizing the way enums are matched by name.\nIt is similar to the AccessorNamingStrategy such that it allows implementors to provide a custom way of defining a property.", "committedDate": "2020-05-18T05:23:53Z", "type": "commit"}, {"oid": "5d7d672f572e055a79b9855b1f00e3a6aa25bc2b", "url": "https://github.com/mapstruct/mapstruct/commit/5d7d672f572e055a79b9855b1f00e3a6aa25bc2b", "message": "Add getDefaultNullEnumConstant to the EnumNamingStrategy", "committedDate": "2020-05-21T09:05:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc5NDQzNw==", "url": "https://github.com/mapstruct/mapstruct/pull/2100#discussion_r428794437", "bodyText": "what would happen if in the \"non custom\" you would have a prefix CUSTOM_ would a user expect this if it's the enum related to protobuf for instance?", "author": "sjaakd", "createdAt": "2020-05-21T17:15:17Z", "path": "processor/src/test/java/org/mapstruct/ap/test/value/spi/CustomEnumNamingStrategyTest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright MapStruct Authors.\n+ *\n+ * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.mapstruct.ap.test.value.spi;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mapstruct.ap.testutil.WithClasses;\n+import org.mapstruct.ap.testutil.WithServiceImplementation;\n+import org.mapstruct.ap.testutil.runner.AnnotationProcessorTestRunner;\n+import org.mapstruct.ap.testutil.runner.GeneratedSource;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+/**\n+ * @author Filip Hrisafov\n+ */\n+@RunWith(AnnotationProcessorTestRunner.class)\n+@WithClasses({\n+    CheeseType.class,\n+    CustomCheeseType.class,\n+    CustomEnumMarker.class,\n+})\n+@WithServiceImplementation(CustomEnumNamingStrategy.class)\n+public class CustomEnumNamingStrategyTest {\n+\n+    @Rule\n+    public final GeneratedSource generatedSource = new GeneratedSource();\n+\n+    @Test\n+    @WithClasses({\n+        CustomCheeseMapper.class\n+    })\n+    public void shouldApplyCustomEnumNamingStrategy() {\n+        generatedSource.addComparisonToFixtureFor( CustomCheeseMapper.class );\n+        CustomCheeseMapper mapper = CustomCheeseMapper.INSTANCE;\n+\n+        // CheeseType -> CustomCheeseType\n+        assertThat( mapper.map( (CheeseType) null ) ).isEqualTo( CustomCheeseType.UNSPECIFIED );\n+        assertThat( mapper.map( CheeseType.BRIE ) ).isEqualTo( CustomCheeseType.CUSTOM_BRIE );\n+        assertThat( mapper.map( CheeseType.ROQUEFORT ) ).isEqualTo( CustomCheeseType.CUSTOM_ROQUEFORT );\n+\n+        // CustomCheeseType -> CheeseType\n+        assertThat( mapper.map( (CustomCheeseType) null ) ).isNull();\n+        assertThat( mapper.map( CustomCheeseType.UNSPECIFIED ) ).isNull();\n+        assertThat( mapper.map( CustomCheeseType.CUSTOM_BRIE ) ).isEqualTo( CheeseType.BRIE );\n+        assertThat( mapper.map( CustomCheeseType.CUSTOM_ROQUEFORT ) ).isEqualTo( CheeseType.ROQUEFORT );\n+        assertThat( mapper.map( CustomCheeseType.UNRECOGNIZED ) ).isNull();\n+\n+        // CheeseType -> String\n+        assertThat( mapper.mapToString( (CheeseType) null ) ).isNull();\n+        assertThat( mapper.mapToString( CheeseType.BRIE ) ).isEqualTo( \"BRIE\" );\n+        assertThat( mapper.mapToString( CheeseType.ROQUEFORT ) ).isEqualTo( \"ROQUEFORT\" );\n+\n+        // CustomCheeseType -> String\n+        assertThat( mapper.mapToString( (CustomCheeseType) null ) ).isNull();\n+        assertThat( mapper.mapToString( CustomCheeseType.UNSPECIFIED ) ).isNull();\n+        assertThat( mapper.mapToString( CustomCheeseType.CUSTOM_BRIE ) ).isEqualTo( \"BRIE\" );\n+        assertThat( mapper.mapToString( CustomCheeseType.CUSTOM_ROQUEFORT ) ).isEqualTo( \"ROQUEFORT\" );\n+        assertThat( mapper.mapToString( CustomCheeseType.UNRECOGNIZED ) ).isNull();\n+\n+        // String - > CheeseType\n+        assertThat( mapper.mapStringToCheese( null ) ).isNull();\n+        assertThat( mapper.mapStringToCheese( \"BRIE\" ) ).isEqualTo( CheeseType.BRIE );\n+        assertThat( mapper.mapStringToCheese( \"ROQUEFORT\" ) ).isEqualTo( CheeseType.ROQUEFORT );", "originalCommit": "5d7d672f572e055a79b9855b1f00e3a6aa25bc2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODg3NDEyNA==", "url": "https://github.com/mapstruct/mapstruct/pull/2100#discussion_r428874124", "bodyText": "This is mapping String to CheeseType. CheeseType is a regular enum. The special enum is CustomCheeseType for that one you would expect the String BRIE to match the enum CustomCheeseType.CUSTOM_BRIE. Since the name based mapping constant for the CustomCheeseType is stripping the CUSTOM_ prefix", "author": "filiphr", "createdAt": "2020-05-21T19:45:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc5NDQzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk0MDE2Ng==", "url": "https://github.com/mapstruct/mapstruct/pull/2100#discussion_r428940166", "bodyText": "ah.. I get it.. Ok. nice one.. The user is in control.", "author": "sjaakd", "createdAt": "2020-05-21T22:01:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODc5NDQzNw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "dccf4155cb7253b8298d8f9deb7fe20afa215c7a", "url": "https://github.com/mapstruct/mapstruct/commit/dccf4155cb7253b8298d8f9deb7fe20afa215c7a", "message": "Review documentation changes", "committedDate": "2020-05-21T20:17:52Z", "type": "commit"}]}