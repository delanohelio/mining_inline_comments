{"pr_number": 2074, "pr_title": "Mapping using target constructor", "pr_createdAt": "2020-04-19T15:56:42Z", "pr_url": "https://github.com/mapstruct/mapstruct/pull/2074", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQxMTUyNQ==", "url": "https://github.com/mapstruct/mapstruct/pull/2074#discussion_r412411525", "bodyText": "targetAccessorType.isFieldAssignment() etc..", "author": "sjaakd", "createdAt": "2020-04-21T18:56:40Z", "path": "processor/src/main/java/org/mapstruct/ap/internal/model/CollectionAssignmentBuilder.java", "diffHunk": "@@ -130,7 +130,8 @@ public Assignment build() {\n         CollectionMappingStrategyGem cms = method.getOptions().getMapper().getCollectionMappingStrategy();\n         boolean targetImmutable = cms == CollectionMappingStrategyGem.TARGET_IMMUTABLE || targetReadAccessor == null;\n \n-        if ( targetAccessorType == AccessorType.SETTER || targetAccessorType == AccessorType.FIELD ) {\n+        if ( targetAccessorType == AccessorType.SETTER || targetAccessorType == AccessorType.FIELD ||", "originalCommit": "8b1559ef73bf230d18096a7174cf140dd778438f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5NjA5OA==", "url": "https://github.com/mapstruct/mapstruct/pull/2074#discussion_r413996098", "bodyText": "You are correct, will adapt", "author": "filiphr", "createdAt": "2020-04-23T17:42:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQxMTUyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "5ba1fcf9d9126a2d133d7e1d71de82877e91ca59", "chunk": "diff --git a/processor/src/main/java/org/mapstruct/ap/internal/model/CollectionAssignmentBuilder.java b/processor/src/main/java/org/mapstruct/ap/internal/model/CollectionAssignmentBuilder.java\nindex 6161a894..04331c4e 100644\n--- a/processor/src/main/java/org/mapstruct/ap/internal/model/CollectionAssignmentBuilder.java\n+++ b/processor/src/main/java/org/mapstruct/ap/internal/model/CollectionAssignmentBuilder.java\n\n@@ -130,8 +130,7 @@ public Assignment build() {\n         CollectionMappingStrategyGem cms = method.getOptions().getMapper().getCollectionMappingStrategy();\n         boolean targetImmutable = cms == CollectionMappingStrategyGem.TARGET_IMMUTABLE || targetReadAccessor == null;\n \n-        if ( targetAccessorType == AccessorType.SETTER || targetAccessorType == AccessorType.FIELD ||\n-            targetAccessorType == AccessorType.PARAMETER ) {\n+        if ( targetAccessorType == AccessorType.SETTER || targetAccessorType == AccessorType.FIELD ) {\n \n             if ( result.isCallingUpdateMethod() && !targetImmutable ) {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQxODMwMQ==", "url": "https://github.com/mapstruct/mapstruct/pull/2074#discussion_r412418301", "bodyText": "hmm. do I spot a piece of autobiography", "author": "sjaakd", "createdAt": "2020-04-21T19:06:59Z", "path": "processor/src/test/java/org/mapstruct/ap/test/constructor/constructorproperties/SimpleConstructorPropertiesTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright MapStruct Authors.\n+ *\n+ * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.mapstruct.ap.test.constructor.constructorproperties;\n+\n+import java.util.Arrays;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mapstruct.ap.test.constructor.ConstructorProperties;\n+import org.mapstruct.ap.test.constructor.PersonDto;\n+import org.mapstruct.ap.testutil.WithClasses;\n+import org.mapstruct.ap.testutil.runner.AnnotationProcessorTestRunner;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+/**\n+ * @author Filip Hrisafov\n+ */\n+@WithClasses({\n+    ConstructorProperties.class,\n+    PersonWithConstructorProperties.class,\n+    PersonDto.class,\n+    SimpleConstructorPropertiesMapper.class\n+})\n+@RunWith(AnnotationProcessorTestRunner.class)\n+public class SimpleConstructorPropertiesTest {\n+\n+    @Test\n+    public void mapDefault() {\n+        PersonDto source = new PersonDto();\n+        source.setName( \"Bob\" );\n+        source.setAge( 30 );\n+        source.setJob( \"Software Engineer\" );", "originalCommit": "8b1559ef73bf230d18096a7174cf140dd778438f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1NjY0Mg==", "url": "https://github.com/mapstruct/mapstruct/pull/2074#discussion_r415056642", "bodyText": "\ud83d\ude04. Just realized that", "author": "filiphr", "createdAt": "2020-04-25T12:50:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQxODMwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "5ba1fcf9d9126a2d133d7e1d71de82877e91ca59", "chunk": "diff --git a/processor/src/test/java/org/mapstruct/ap/test/constructor/constructorproperties/SimpleConstructorPropertiesTest.java b/processor/src/test/java/org/mapstruct/ap/test/constructor/constructorproperties/SimpleConstructorPropertiesTest.java\ndeleted file mode 100644\nindex b58d55f1..00000000\n--- a/processor/src/test/java/org/mapstruct/ap/test/constructor/constructorproperties/SimpleConstructorPropertiesTest.java\n+++ /dev/null\n\n@@ -1,90 +0,0 @@\n-/*\n- * Copyright MapStruct Authors.\n- *\n- * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package org.mapstruct.ap.test.constructor.constructorproperties;\n-\n-import java.util.Arrays;\n-\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.mapstruct.ap.test.constructor.ConstructorProperties;\n-import org.mapstruct.ap.test.constructor.PersonDto;\n-import org.mapstruct.ap.testutil.WithClasses;\n-import org.mapstruct.ap.testutil.runner.AnnotationProcessorTestRunner;\n-\n-import static org.assertj.core.api.Assertions.assertThat;\n-\n-/**\n- * @author Filip Hrisafov\n- */\n-@WithClasses({\n-    ConstructorProperties.class,\n-    PersonWithConstructorProperties.class,\n-    PersonDto.class,\n-    SimpleConstructorPropertiesMapper.class\n-})\n-@RunWith(AnnotationProcessorTestRunner.class)\n-public class SimpleConstructorPropertiesTest {\n-\n-    @Test\n-    public void mapDefault() {\n-        PersonDto source = new PersonDto();\n-        source.setName( \"Bob\" );\n-        source.setAge( 30 );\n-        source.setJob( \"Software Engineer\" );\n-        source.setCity( \"Zurich\" );\n-        source.setAddress( \"Plaza 1\" );\n-        source.setChildren( Arrays.asList( \"Alice\", \"Tom\" ) );\n-\n-        PersonWithConstructorProperties target = SimpleConstructorPropertiesMapper.INSTANCE.map( source );\n-\n-        assertThat( target.getName() ).isEqualTo( \"Bob\" );\n-        assertThat( target.getAge() ).isEqualTo( 30 );\n-        assertThat( target.getJob() ).isEqualTo( \"Software Engineer\" );\n-        assertThat( target.getCity() ).isEqualTo( \"Zurich\" );\n-        assertThat( target.getAddress() ).isEqualTo( \"Plaza 1\" );\n-        assertThat( target.getChildren() ).containsExactly( \"Alice\", \"Tom\" );\n-    }\n-\n-    @Test\n-    public void mapWithConstants() {\n-        PersonDto source = new PersonDto();\n-        source.setName( \"Bob\" );\n-        source.setAge( 30 );\n-        source.setJob( \"Software Engineer\" );\n-        source.setCity( \"Zurich\" );\n-        source.setAddress( \"Plaza 1\" );\n-        source.setChildren( Arrays.asList( \"Alice\", \"Tom\" ) );\n-\n-        PersonWithConstructorProperties target = SimpleConstructorPropertiesMapper.INSTANCE.mapWithConstants( source );\n-\n-        assertThat( target.getName() ).isEqualTo( \"Bob\" );\n-        assertThat( target.getAge() ).isEqualTo( 25 );\n-        assertThat( target.getJob() ).isEqualTo( \"Software Developer\" );\n-        assertThat( target.getCity() ).isEqualTo( \"Zurich\" );\n-        assertThat( target.getAddress() ).isEqualTo( \"Plaza 1\" );\n-        assertThat( target.getChildren() ).containsExactly( \"Alice\", \"Tom\" );\n-    }\n-\n-    @Test\n-    public void mapWithExpressions() {\n-        PersonDto source = new PersonDto();\n-        source.setName( \"Bob\" );\n-        source.setAge( 30 );\n-        source.setJob( \"Software Engineer\" );\n-        source.setCity( \"Zurich\" );\n-        source.setAddress( \"Plaza 1\" );\n-        source.setChildren( Arrays.asList( \"Alice\", \"Tom\" ) );\n-\n-        PersonWithConstructorProperties target = SimpleConstructorPropertiesMapper.INSTANCE.mapWithExpression( source );\n-\n-        assertThat( target.getName() ).isEqualTo( \"Bob\" );\n-        assertThat( target.getAge() ).isEqualTo( 20 );\n-        assertThat( target.getJob() ).isEqualTo( \"software developer\" );\n-        assertThat( target.getCity() ).isEqualTo( \"Zurich\" );\n-        assertThat( target.getAddress() ).isEqualTo( \"Plaza 1\" );\n-        assertThat( target.getChildren() ).containsExactly( \"Alice\", \"Tom\" );\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQxOTczMg==", "url": "https://github.com/mapstruct/mapstruct/pull/2074#discussion_r412419732", "bodyText": "are you sure?", "author": "sjaakd", "createdAt": "2020-04-21T19:09:14Z", "path": "processor/src/test/java/org/mapstruct/ap/test/constructor/nestedsource/_target/AdderUsageObserver.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright MapStruct Authors.\n+ *\n+ * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n+ */\n+package org.mapstruct.ap.test.constructor.nestedsource._target;\n+\n+/**\n+ * @author Sjaak Derksen", "originalCommit": "8b1559ef73bf230d18096a7174cf140dd778438f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5NjQ4NQ==", "url": "https://github.com/mapstruct/mapstruct/pull/2074#discussion_r413996485", "bodyText": "Yes (although I need to delete this one it is not used). I copied a lot of classes that you created for other things so I kept the name \ud83d\ude04", "author": "filiphr", "createdAt": "2020-04-23T17:42:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQxOTczMg=="}], "type": "inlineReview", "revised_code": {"commit": "5ba1fcf9d9126a2d133d7e1d71de82877e91ca59", "chunk": "diff --git a/processor/src/test/java/org/mapstruct/ap/test/constructor/nestedsource/_target/AdderUsageObserver.java b/processor/src/test/java/org/mapstruct/ap/test/constructor/nestedsource/_target/AdderUsageObserver.java\ndeleted file mode 100644\nindex ff21870b..00000000\n--- a/processor/src/test/java/org/mapstruct/ap/test/constructor/nestedsource/_target/AdderUsageObserver.java\n+++ /dev/null\n\n@@ -1,26 +0,0 @@\n-/*\n- * Copyright MapStruct Authors.\n- *\n- * Licensed under the Apache License version 2.0, available at http://www.apache.org/licenses/LICENSE-2.0\n- */\n-package org.mapstruct.ap.test.constructor.nestedsource._target;\n-\n-/**\n- * @author Sjaak Derksen\n- */\n-public class AdderUsageObserver {\n-\n-    private AdderUsageObserver() {\n-    }\n-\n-    private static boolean used = false;\n-\n-    public static boolean isUsed() {\n-        return used;\n-    }\n-\n-    public static void setUsed(boolean used) {\n-        AdderUsageObserver.used = used;\n-    }\n-\n-}\n"}}, {"oid": "5ba1fcf9d9126a2d133d7e1d71de82877e91ca59", "url": "https://github.com/mapstruct/mapstruct/commit/5ba1fcf9d9126a2d133d7e1d71de82877e91ca59", "message": "Accessor#getSimpleName should return a String", "committedDate": "2020-04-26T10:04:32Z", "type": "commit"}, {"oid": "7bd5ca57ffad48b2eeaecbaf64277551b7dd58c5", "url": "https://github.com/mapstruct/mapstruct/commit/7bd5ca57ffad48b2eeaecbaf64277551b7dd58c5", "message": "#73 Add support for using constructor arguments when instantiating mapping targets\n\nBy default the constructor argument names are used to extract the target properties.\nIf a constructor is annotated with an annotation named `@ConstructorProperties` (from any package) then it would be used to extract the target properties.\n\nIf a mapping target has a parameterless empty constructor it would be used to instantiate the target.\nWhen there are multiple constructors then an annotation named `@Default` (from any package) can be used to mark a constructor that should be used by default when instantiating the target.\n\nSupports mapping into Java 14 Records and Kotlin data classes out of the box", "committedDate": "2020-04-26T10:08:57Z", "type": "commit"}, {"oid": "7bd5ca57ffad48b2eeaecbaf64277551b7dd58c5", "url": "https://github.com/mapstruct/mapstruct/commit/7bd5ca57ffad48b2eeaecbaf64277551b7dd58c5", "message": "#73 Add support for using constructor arguments when instantiating mapping targets\n\nBy default the constructor argument names are used to extract the target properties.\nIf a constructor is annotated with an annotation named `@ConstructorProperties` (from any package) then it would be used to extract the target properties.\n\nIf a mapping target has a parameterless empty constructor it would be used to instantiate the target.\nWhen there are multiple constructors then an annotation named `@Default` (from any package) can be used to mark a constructor that should be used by default when instantiating the target.\n\nSupports mapping into Java 14 Records and Kotlin data classes out of the box", "committedDate": "2020-04-26T10:08:57Z", "type": "forcePushed"}]}