{"pr_number": 2280, "pr_title": "default component model: mapper reference use singleton INSTANCE if i\u2026", "pr_createdAt": "2020-11-18T12:21:43Z", "pr_url": "https://github.com/mapstruct/mapstruct/pull/2280", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE4ODIyMw==", "url": "https://github.com/mapstruct/mapstruct/pull/2280#discussion_r550188223", "bodyText": "don't try to re-org the imports (nitty-witty thing.. but helps to review the code \ud83d\ude04", "author": "sjaakd", "createdAt": "2020-12-30T13:04:43Z", "path": "processor/src/main/java/org/mapstruct/ap/internal/processor/MapperCreationProcessor.java", "diffHunk": "@@ -5,14 +5,24 @@\n  */\n package org.mapstruct.ap.internal.processor;\n \n+import static javax.lang.model.element.Modifier.FINAL;", "originalCommit": "04d3393aef1f052a1d55900639787a080225adca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA4NjEzNA==", "url": "https://github.com/mapstruct/mapstruct/pull/2280#discussion_r555086134", "bodyText": "Do you want me to rebase and keep the order of imports ?", "author": "dmngb", "createdAt": "2021-01-11T14:31:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE4ODIyMw=="}], "type": "inlineReview", "revised_code": {"commit": "72cab914881a434072745b8e586a7203696f7525", "chunk": "diff --git a/processor/src/main/java/org/mapstruct/ap/internal/processor/MapperCreationProcessor.java b/processor/src/main/java/org/mapstruct/ap/internal/processor/MapperCreationProcessor.java\nindex ba5a39d6..8094b8a2 100644\n--- a/processor/src/main/java/org/mapstruct/ap/internal/processor/MapperCreationProcessor.java\n+++ b/processor/src/main/java/org/mapstruct/ap/internal/processor/MapperCreationProcessor.java\n\n@@ -5,14 +5,6 @@\n  */\n package org.mapstruct.ap.internal.processor;\n \n-import static javax.lang.model.element.Modifier.FINAL;\n-import static javax.lang.model.element.Modifier.PUBLIC;\n-import static javax.lang.model.element.Modifier.STATIC;\n-import static org.mapstruct.ap.internal.model.SupportingConstructorFragment.addAllFragmentsIn;\n-import static org.mapstruct.ap.internal.model.SupportingField.addAllFieldsIn;\n-import static org.mapstruct.ap.internal.util.Collections.first;\n-import static org.mapstruct.ap.internal.util.Collections.join;\n-\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE4ODg4OQ==", "url": "https://github.com/mapstruct/mapstruct/pull/2280#discussion_r550188889", "bodyText": "I don't know this from the top of my head, but does a field in an interface automatically get the modifiers \"PUBLIC, STATIC, FINAL\" ?\nI guess checkstyle does, but should we warn as well if you spot an intention to use this pattern but for instance left out STATIC?", "author": "sjaakd", "createdAt": "2020-12-30T13:06:55Z", "path": "processor/src/main/java/org/mapstruct/ap/internal/processor/MapperCreationProcessor.java", "diffHunk": "@@ -133,9 +138,16 @@ public int getPriority() {\n         List<String> variableNames = new LinkedList<>();\n \n         for ( TypeMirror usedMapper : mapperAnnotation.uses() ) {\n+            boolean isSingleton = typeUtils.asElement( usedMapper ).getEnclosedElements().stream()", "originalCommit": "04d3393aef1f052a1d55900639787a080225adca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA4Nzc0Nw==", "url": "https://github.com/mapstruct/mapstruct/pull/2280#discussion_r555087747", "bodyText": "Yes, a field on an interface is automatically \"public static final\".", "author": "dmngb", "createdAt": "2021-01-11T14:33:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE4ODg4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODU3MzIxMw==", "url": "https://github.com/mapstruct/mapstruct/pull/2280#discussion_r558573213", "bodyText": "I don't think it is our job to emit warnings for this. If it is really needed every project can define different rules and have such warnings through checkstyle / sonar", "author": "filiphr", "createdAt": "2021-01-15T20:22:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDE4ODg4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "e92de8b7282b8efe15ebf300f77231f12c4d51de", "chunk": "diff --git a/processor/src/main/java/org/mapstruct/ap/internal/processor/MapperCreationProcessor.java b/processor/src/main/java/org/mapstruct/ap/internal/processor/MapperCreationProcessor.java\nindex ba5a39d6..ad6d84b9 100644\n--- a/processor/src/main/java/org/mapstruct/ap/internal/processor/MapperCreationProcessor.java\n+++ b/processor/src/main/java/org/mapstruct/ap/internal/processor/MapperCreationProcessor.java\n\n@@ -138,16 +142,10 @@ public int getPriority() {\n         List<String> variableNames = new LinkedList<>();\n \n         for ( TypeMirror usedMapper : mapperAnnotation.uses() ) {\n-            boolean isSingleton = typeUtils.asElement( usedMapper ).getEnclosedElements().stream()\n-            .filter( a -> a.getKind().isField() )\n-            .filter( a -> a.getModifiers().containsAll( Arrays.asList( PUBLIC, STATIC, FINAL ) ) )\n-            .filter( a -> a.getSimpleName().contentEquals( \"INSTANCE\" ) )\n-            .filter( a -> typeUtils.isSameType( a.asType(), usedMapper ) )\n-            .anyMatch( a -> true );\n             DefaultMapperReference mapperReference = DefaultMapperReference.getInstance(\n                 typeFactory.getType( usedMapper ),\n                 MapperGem.instanceOn( typeUtils.asElement( usedMapper ) ) != null,\n-                isSingleton,\n+                hasSingletonInstance( usedMapper ),\n                 typeFactory,\n                 variableNames\n             );\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODU3MTAwMg==", "url": "https://github.com/mapstruct/mapstruct/pull/2280#discussion_r558571002", "bodyText": "I don't really like that we have so many different method calls here.\nI would suggest the following. Extract a method named hasInstanceMapper that takes Element as a parameter and returns true if  these 4 conditions here are satisfied. Additionally instead of using filter you can directly use anyMatch(this::hasInstanceMapper).\nI would also suggest extracting the Arrays.asList into a static field in the MapperCreationProcessor in order to avoid creating that list all the time.", "author": "filiphr", "createdAt": "2021-01-15T20:17:18Z", "path": "processor/src/main/java/org/mapstruct/ap/internal/processor/MapperCreationProcessor.java", "diffHunk": "@@ -133,9 +138,16 @@ public int getPriority() {\n         List<String> variableNames = new LinkedList<>();\n \n         for ( TypeMirror usedMapper : mapperAnnotation.uses() ) {\n+            boolean isSingleton = typeUtils.asElement( usedMapper ).getEnclosedElements().stream()\n+            .filter( a -> a.getKind().isField() )\n+            .filter( a -> a.getModifiers().containsAll( Arrays.asList( PUBLIC, STATIC, FINAL ) ) )\n+            .filter( a -> a.getSimpleName().contentEquals( \"INSTANCE\" ) )\n+            .filter( a -> typeUtils.isSameType( a.asType(), usedMapper ) )\n+            .anyMatch( a -> true );", "originalCommit": "04d3393aef1f052a1d55900639787a080225adca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTIwOTYzNg==", "url": "https://github.com/mapstruct/mapstruct/pull/2280#discussion_r559209636", "bodyText": "I just pushed changes to extract  methods/constants (more or less) as suggested.\nOr do you prefer a rebase/squash ?", "author": "dmngb", "createdAt": "2021-01-17T17:07:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODU3MTAwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTIxNDAxMQ==", "url": "https://github.com/mapstruct/mapstruct/pull/2280#discussion_r559214011", "bodyText": "There is some conflict now, if you can rebase your changes on top of master it would branch, it would be great. If you can't we can do it when merging", "author": "filiphr", "createdAt": "2021-01-17T17:41:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODU3MTAwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTQ3MTY0Mw==", "url": "https://github.com/mapstruct/mapstruct/pull/2280#discussion_r559471643", "bodyText": "I have rebased on top of master.", "author": "dmngb", "createdAt": "2021-01-18T10:42:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1ODU3MTAwMg=="}], "type": "inlineReview", "revised_code": {"commit": "e92de8b7282b8efe15ebf300f77231f12c4d51de", "chunk": "diff --git a/processor/src/main/java/org/mapstruct/ap/internal/processor/MapperCreationProcessor.java b/processor/src/main/java/org/mapstruct/ap/internal/processor/MapperCreationProcessor.java\nindex ba5a39d6..ad6d84b9 100644\n--- a/processor/src/main/java/org/mapstruct/ap/internal/processor/MapperCreationProcessor.java\n+++ b/processor/src/main/java/org/mapstruct/ap/internal/processor/MapperCreationProcessor.java\n\n@@ -138,16 +142,10 @@ public int getPriority() {\n         List<String> variableNames = new LinkedList<>();\n \n         for ( TypeMirror usedMapper : mapperAnnotation.uses() ) {\n-            boolean isSingleton = typeUtils.asElement( usedMapper ).getEnclosedElements().stream()\n-            .filter( a -> a.getKind().isField() )\n-            .filter( a -> a.getModifiers().containsAll( Arrays.asList( PUBLIC, STATIC, FINAL ) ) )\n-            .filter( a -> a.getSimpleName().contentEquals( \"INSTANCE\" ) )\n-            .filter( a -> typeUtils.isSameType( a.asType(), usedMapper ) )\n-            .anyMatch( a -> true );\n             DefaultMapperReference mapperReference = DefaultMapperReference.getInstance(\n                 typeFactory.getType( usedMapper ),\n                 MapperGem.instanceOn( typeUtils.asElement( usedMapper ) ) != null,\n-                isSingleton,\n+                hasSingletonInstance( usedMapper ),\n                 typeFactory,\n                 variableNames\n             );\n"}}, {"oid": "72cab914881a434072745b8e586a7203696f7525", "url": "https://github.com/mapstruct/mapstruct/commit/72cab914881a434072745b8e586a7203696f7525", "message": "default component model: mapper reference uses singleton INSTANCE if it exists\n\nThis allows to easily avoid the runtime dependency on mapstruct.jar:\nwe can avoid Mappers.getMapper(...) for instantiating used mappers if\nthe code follows the conventionnal pattern for creating mapper singletons.\n\nFix #2277.", "committedDate": "2021-01-18T10:15:32Z", "type": "commit"}, {"oid": "e92de8b7282b8efe15ebf300f77231f12c4d51de", "url": "https://github.com/mapstruct/mapstruct/commit/e92de8b7282b8efe15ebf300f77231f12c4d51de", "message": "default component model: extract method to check if a singleton INSTANCE exists\n\n# Conflicts:\n#\tprocessor/src/main/java/org/mapstruct/ap/internal/processor/MapperCreationProcessor.java", "committedDate": "2021-01-18T10:38:55Z", "type": "commit"}]}