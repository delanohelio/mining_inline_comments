{"pr_number": 2160, "pr_title": "#2150 Change the rules for how a constructor for mapping is picked", "pr_createdAt": "2020-07-18T08:55:15Z", "pr_url": "https://github.com/mapstruct/mapstruct/pull/2160", "timeline": [{"oid": "ff150cb2ee9de4f7d71d63ca82eb069a6accc306", "url": "https://github.com/mapstruct/mapstruct/commit/ff150cb2ee9de4f7d71d63ca82eb069a6accc306", "message": "#2150 Change the rules for how a constructor for mapping is picked\n\nNew rules:\n\n1. Constructor annotated with @Default (from any package) has highest precedence\n2. If there is a single public constructor then it would be used to construct the object\n3. If a parameterless constructor exists then it would be used to construct the object, and the other constructors will be ignored", "committedDate": "2020-07-18T08:54:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc2ODgyOA==", "url": "https://github.com/mapstruct/mapstruct/pull/2160#discussion_r456768828", "bodyText": "Should we also allow friendly and protected?  I guess we have some logic somewhere to detect these scenarios...", "author": "sjaakd", "createdAt": "2020-07-18T09:03:18Z", "path": "processor/src/main/java/org/mapstruct/ap/internal/model/BeanMappingMethod.java", "diffHunk": "@@ -603,63 +603,84 @@ private ConstructorAccessor getConstructorAccessor(Type type) {\n             List<ExecutableElement> constructors = ElementFilter.constructorsIn( type.getTypeElement()\n                 .getEnclosedElements() );\n \n-            ExecutableElement defaultConstructor = null;\n+            // The rules for picking a constructor are the following:\n+            // 1. Constructor annotated with @Default (from any package) has highest precedence\n+            // 2. If there is a single public constructor then it would be used to construct the object\n+            // 3. If a parameterless constructor exists then it would be used to construct the object, and the other\n+            // constructors will be ignored\n+            ExecutableElement defaultAnnotatedConstructor = null;\n+            ExecutableElement parameterLessConstructor = null;\n             List<ExecutableElement> accessibleConstructors = new ArrayList<>( constructors.size() );\n+            List<ExecutableElement> publicConstructors = new ArrayList<>( );\n \n             for ( ExecutableElement constructor : constructors ) {\n                 if ( constructor.getModifiers().contains( Modifier.PRIVATE ) ) {\n                     continue;\n                 }\n \n+                if ( hasDefaultAnnotationFromAnyPackage( constructor ) ) {\n+                    // We found a constructor annotated with @Default everything else is irrelevant\n+                    defaultAnnotatedConstructor = constructor;\n+                    break;\n+                }\n+\n                 if ( constructor.getParameters().isEmpty() ) {\n-                    defaultConstructor = constructor;\n+                    parameterLessConstructor = constructor;\n                 }\n                 else {\n                     accessibleConstructors.add( constructor );\n                 }\n+\n+                if ( constructor.getModifiers().contains( Modifier.PUBLIC ) ) {", "originalCommit": "ff150cb2ee9de4f7d71d63ca82eb069a6accc306", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc3MTU0Nw==", "url": "https://github.com/mapstruct/mapstruct/pull/2160#discussion_r456771547", "bodyText": "We do allow protected ones. Those are part of the accessibleConstructors. This is to have public constructors with e precedence, so we can check them first.", "author": "filiphr", "createdAt": "2020-07-18T09:37:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njc2ODgyOA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "5ecb2e93f19f90076927e5d5edafbcb641fd57f2", "url": "https://github.com/mapstruct/mapstruct/commit/5ecb2e93f19f90076927e5d5edafbcb641fd57f2", "message": "Add examples about the constructor detection rules", "committedDate": "2020-07-18T14:34:12Z", "type": "commit"}]}