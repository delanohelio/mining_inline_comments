{"pr_number": 933, "pr_title": "Adds new tests for MsalCppOAuth2TokenCache", "pr_createdAt": "2020-06-14T01:09:46Z", "pr_url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/933", "timeline": [{"oid": "c2dedc4786862ea48f67bf00f85c0c1e3d9ec127", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/c2dedc4786862ea48f67bf00f85c0c1e3d9ec127", "message": "WIP new tests for CPP cache", "committedDate": "2020-06-14T01:08:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc4MTkyNQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/933#discussion_r439781925", "bodyText": "\ud83d\udc40", "author": "iambmelt", "createdAt": "2020-06-14T01:10:08Z", "path": "common/src/androidTest/java/com/microsoft/identity/common/MsalCppOAuth2TokenCacheTest.java", "diffHunk": "@@ -0,0 +1,249 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common;\n+\n+import android.content.Context;\n+\n+import androidx.test.InstrumentationRegistry;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import com.microsoft.identity.common.adal.internal.AndroidSecretKeyEnabledHelper;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.internal.authscheme.BearerAuthenticationSchemeInternal;\n+import com.microsoft.identity.common.internal.cache.AccountDeletionRecord;\n+import com.microsoft.identity.common.internal.cache.ICacheRecord;\n+import com.microsoft.identity.common.internal.cache.MsalCppOAuth2TokenCache;\n+import com.microsoft.identity.common.internal.dto.AccountRecord;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+import com.microsoft.identity.common.internal.providers.microsoft.MicrosoftAccount;\n+\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.MicrosoftStsAccountCredentialAdapterTest.MOCK_ID_TOKEN_WITH_CLAIMS;\n+import static com.microsoft.identity.common.MsalOAuth2TokenCacheTest.AccountCredentialTestBundle;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.CACHED_AT;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.CLIENT_ID;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.ENVIRONMENT;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.EXPIRES_ON;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.HOME_ACCOUNT_ID;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.LOCAL_ACCOUNT_ID;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.REALM;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.SECRET;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.TARGET;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.USERNAME;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class MsalCppOAuth2TokenCacheTest extends AndroidSecretKeyEnabledHelper {\n+\n+    private MsalCppOAuth2TokenCache mCppCache;\n+\n+    // Test Accounts/Credentials\n+    private AccountCredentialTestBundle mTestBundle;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        super.setUp();\n+\n+        // Context and related init\n+        final Context context = InstrumentationRegistry.getTargetContext();\n+        mCppCache = MsalCppOAuth2TokenCache.create(context);\n+\n+        // Credentials for testing\n+        mTestBundle = new AccountCredentialTestBundle(\n+                MicrosoftAccount.AUTHORITY_TYPE_V1_V2,\n+                LOCAL_ACCOUNT_ID,\n+                USERNAME,\n+                HOME_ACCOUNT_ID,\n+                ENVIRONMENT,\n+                REALM,\n+                TARGET,\n+                CACHED_AT,\n+                EXPIRES_ON,\n+                SECRET,\n+                CLIENT_ID,\n+                SECRET,\n+                MOCK_ID_TOKEN_WITH_CLAIMS,\n+                null,\n+                CredentialType.V1IdToken\n+        );\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        mCppCache.clearCache();\n+    }\n+\n+    @Test\n+    public void saveAndGetAccountTest() throws ClientException {\n+        final AccountRecord generatedAccount = mTestBundle.mGeneratedAccount;\n+\n+        // Save the the cache\n+        mCppCache.saveAccountRecord(generatedAccount);\n+\n+        // Restore it\n+        final AccountRecord restoredAccount = mCppCache.getAccount(\n+                generatedAccount.getHomeAccountId(),\n+                generatedAccount.getEnvironment(),\n+                generatedAccount.getRealm()\n+        );\n+\n+        Assert.assertNotNull(restoredAccount);\n+        Assert.assertEquals(generatedAccount, restoredAccount);\n+    }\n+\n+    @Test\n+    public void getAccountNullTest() throws ClientException {\n+        final AccountRecord generatedAccount = mTestBundle.mGeneratedAccount;\n+        final AccountRecord restoredAccount = mCppCache.getAccount(\n+                generatedAccount.getHomeAccountId(),\n+                generatedAccount.getEnvironment(),\n+                generatedAccount.getRealm()\n+        );\n+        Assert.assertNull(restoredAccount);\n+    }\n+\n+    @Test\n+    public void getAllAccountsTest() {\n+        final AccountRecord generatedAccount = mTestBundle.mGeneratedAccount;\n+        mCppCache.saveAccountRecord(generatedAccount);\n+\n+        final List<AccountRecord> accounts = mCppCache.getAllAccounts();\n+        final AccountRecord restoredAccount = accounts.get(0);\n+        Assert.assertEquals(generatedAccount, restoredAccount);\n+\n+        // TODO this API makes no statement about the immutability of the List returned", "originalCommit": "c2dedc4786862ea48f67bf00f85c0c1e3d9ec127", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQxNzg5MA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/933#discussion_r440417890", "bodyText": "What happens if you write to it?  Should we have standard tests against our interface packages that all implementations must pass?", "author": "AdamBJohnsonx", "createdAt": "2020-06-15T20:08:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc4MTkyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyNjk0MA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/933#discussion_r440426940", "bodyText": "It looks like it delegates here: \n  \n    \n      microsoft-authentication-library-common-for-android/common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java\n    \n    \n         Line 1039\n      in\n      c2dedc4\n    \n    \n    \n    \n\n        \n          \n           return Collections.unmodifiableList(accountsForThisApp); \n        \n    \n  \n\n which is an unmodifiable wrapper.\nThe other implementation is SharedPreferencesAccountCredentialCache, which returns a safe-copy.  \n  \n    \n      microsoft-authentication-library-common-for-android/common/src/main/java/com/microsoft/identity/common/internal/cache/SharedPreferencesAccountCredentialCache.java\n    \n    \n         Line 223\n      in\n      c2dedc4\n    \n    \n    \n    \n\n        \n          \n           public synchronized List<AccountRecord> getAccounts() { \n        \n    \n  \n\n We should pick one strategy.  And document it.\nAnd, in relation to my other comment, do such things need to return a list?", "author": "AdamBJohnsonx", "createdAt": "2020-06-15T20:26:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc4MTkyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ3MjI4OQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/933#discussion_r440472289", "bodyText": "I am leaning towards a standardized approach to the APIs whereby we designate the results are read-only and enforced via some unmodifiable wrapper is my thinking. There's a bit of blend of these in the code, as you're noticing.\nIMO we should document on the API (via javadoc) and encourage our developers/contributors to do the same; we should be diligent about it in our code reviews. W.r.t to where else we could/should document such style decisions, the contributors guide/wiki seem like good candidates.", "author": "iambmelt", "createdAt": "2020-06-15T22:03:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc4MTkyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ3NTM1NA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/933#discussion_r440475354", "bodyText": "Yes.  I'm a huge proponent of the ImmutableObjects paradigm, if it hasn't become apparent.  It simplifies a lot of thread-safety concerns, though it does imply behaviour changes on the part of clients.  We probably can't get there from here without a MV release, and it might be moot via OneAuth and MSAL-cpp.", "author": "AdamBJohnsonx", "createdAt": "2020-06-15T22:11:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc4MTkyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "d5b1b2091b7f32bdd877f02ea69f88f7dcd613d8", "chunk": "diff --git a/common/src/androidTest/java/com/microsoft/identity/common/MsalCppOAuth2TokenCacheTest.java b/common/src/androidTest/java/com/microsoft/identity/common/MsalCppOAuth2TokenCacheTest.java\nindex 3072c58e3..b2d0371f1 100644\n--- a/common/src/androidTest/java/com/microsoft/identity/common/MsalCppOAuth2TokenCacheTest.java\n+++ b/common/src/androidTest/java/com/microsoft/identity/common/MsalCppOAuth2TokenCacheTest.java\n\n@@ -46,6 +46,7 @@ import org.junit.Test;\n import org.junit.runner.RunWith;\n \n import java.util.List;\n+import java.util.stream.StreamSupport;\n \n import static com.microsoft.identity.common.MicrosoftStsAccountCredentialAdapterTest.MOCK_ID_TOKEN_WITH_CLAIMS;\n import static com.microsoft.identity.common.MsalOAuth2TokenCacheTest.AccountCredentialTestBundle;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc4MTkyNw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/933#discussion_r439781927", "bodyText": "\ud83d\udc40", "author": "iambmelt", "createdAt": "2020-06-14T01:10:12Z", "path": "common/src/androidTest/java/com/microsoft/identity/common/MsalCppOAuth2TokenCacheTest.java", "diffHunk": "@@ -0,0 +1,249 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common;\n+\n+import android.content.Context;\n+\n+import androidx.test.InstrumentationRegistry;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import com.microsoft.identity.common.adal.internal.AndroidSecretKeyEnabledHelper;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.internal.authscheme.BearerAuthenticationSchemeInternal;\n+import com.microsoft.identity.common.internal.cache.AccountDeletionRecord;\n+import com.microsoft.identity.common.internal.cache.ICacheRecord;\n+import com.microsoft.identity.common.internal.cache.MsalCppOAuth2TokenCache;\n+import com.microsoft.identity.common.internal.dto.AccountRecord;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+import com.microsoft.identity.common.internal.providers.microsoft.MicrosoftAccount;\n+\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.MicrosoftStsAccountCredentialAdapterTest.MOCK_ID_TOKEN_WITH_CLAIMS;\n+import static com.microsoft.identity.common.MsalOAuth2TokenCacheTest.AccountCredentialTestBundle;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.CACHED_AT;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.CLIENT_ID;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.ENVIRONMENT;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.EXPIRES_ON;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.HOME_ACCOUNT_ID;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.LOCAL_ACCOUNT_ID;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.REALM;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.SECRET;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.TARGET;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.USERNAME;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class MsalCppOAuth2TokenCacheTest extends AndroidSecretKeyEnabledHelper {\n+\n+    private MsalCppOAuth2TokenCache mCppCache;\n+\n+    // Test Accounts/Credentials\n+    private AccountCredentialTestBundle mTestBundle;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        super.setUp();\n+\n+        // Context and related init\n+        final Context context = InstrumentationRegistry.getTargetContext();\n+        mCppCache = MsalCppOAuth2TokenCache.create(context);\n+\n+        // Credentials for testing\n+        mTestBundle = new AccountCredentialTestBundle(\n+                MicrosoftAccount.AUTHORITY_TYPE_V1_V2,\n+                LOCAL_ACCOUNT_ID,\n+                USERNAME,\n+                HOME_ACCOUNT_ID,\n+                ENVIRONMENT,\n+                REALM,\n+                TARGET,\n+                CACHED_AT,\n+                EXPIRES_ON,\n+                SECRET,\n+                CLIENT_ID,\n+                SECRET,\n+                MOCK_ID_TOKEN_WITH_CLAIMS,\n+                null,\n+                CredentialType.V1IdToken\n+        );\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        mCppCache.clearCache();\n+    }\n+\n+    @Test\n+    public void saveAndGetAccountTest() throws ClientException {\n+        final AccountRecord generatedAccount = mTestBundle.mGeneratedAccount;\n+\n+        // Save the the cache\n+        mCppCache.saveAccountRecord(generatedAccount);\n+\n+        // Restore it\n+        final AccountRecord restoredAccount = mCppCache.getAccount(\n+                generatedAccount.getHomeAccountId(),\n+                generatedAccount.getEnvironment(),\n+                generatedAccount.getRealm()\n+        );\n+\n+        Assert.assertNotNull(restoredAccount);\n+        Assert.assertEquals(generatedAccount, restoredAccount);\n+    }\n+\n+    @Test\n+    public void getAccountNullTest() throws ClientException {\n+        final AccountRecord generatedAccount = mTestBundle.mGeneratedAccount;\n+        final AccountRecord restoredAccount = mCppCache.getAccount(\n+                generatedAccount.getHomeAccountId(),\n+                generatedAccount.getEnvironment(),\n+                generatedAccount.getRealm()\n+        );\n+        Assert.assertNull(restoredAccount);\n+    }\n+\n+    @Test\n+    public void getAllAccountsTest() {\n+        final AccountRecord generatedAccount = mTestBundle.mGeneratedAccount;\n+        mCppCache.saveAccountRecord(generatedAccount);\n+\n+        final List<AccountRecord> accounts = mCppCache.getAllAccounts();\n+        final AccountRecord restoredAccount = accounts.get(0);\n+        Assert.assertEquals(generatedAccount, restoredAccount);\n+\n+        // TODO this API makes no statement about the immutability of the List returned\n+        // TODO results should not be mutable\n+    }\n+\n+    @Test\n+    public void getAllAccountsEmptyTest() {\n+        final List<AccountRecord> accounts = mCppCache.getAllAccounts();\n+        Assert.assertTrue(accounts.isEmpty());\n+    }\n+\n+    @Ignore // Ignore this test until API behavior is decided\n+    @Test\n+    public void removeAccountTest() throws ClientException {\n+        final AccountRecord generatedAccount = mTestBundle.mGeneratedAccount;\n+        mCppCache.saveAccountRecord(generatedAccount);\n+        final AccountDeletionRecord deletionRecord = mCppCache.removeAccount(\n+                generatedAccount.getHomeAccountId(),\n+                generatedAccount.getEnvironment(),\n+                generatedAccount.getRealm()\n+        );\n+        Assert.assertEquals(generatedAccount, deletionRecord.get(0));\n+\n+        // TODO There's confusing behavior here...", "originalCommit": "c2dedc4786862ea48f67bf00f85c0c1e3d9ec127", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyMjM1MA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/933#discussion_r440422350", "bodyText": "What's the use case for removeAccount?  It seems like we either need to remove it from all clients (because, say, this is called when the user is being removed from their home tenant) or we need to be able to specify the client we're removing the account from (because, say, the user is being removed from an application).  Either way, the use case should tell you which way to go.", "author": "AdamBJohnsonx", "createdAt": "2020-06-15T20:17:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc4MTkyNw=="}], "type": "inlineReview", "revised_code": {"commit": "d5b1b2091b7f32bdd877f02ea69f88f7dcd613d8", "chunk": "diff --git a/common/src/androidTest/java/com/microsoft/identity/common/MsalCppOAuth2TokenCacheTest.java b/common/src/androidTest/java/com/microsoft/identity/common/MsalCppOAuth2TokenCacheTest.java\nindex 3072c58e3..b2d0371f1 100644\n--- a/common/src/androidTest/java/com/microsoft/identity/common/MsalCppOAuth2TokenCacheTest.java\n+++ b/common/src/androidTest/java/com/microsoft/identity/common/MsalCppOAuth2TokenCacheTest.java\n\n@@ -46,6 +46,7 @@ import org.junit.Test;\n import org.junit.runner.RunWith;\n \n import java.util.List;\n+import java.util.stream.StreamSupport;\n \n import static com.microsoft.identity.common.MicrosoftStsAccountCredentialAdapterTest.MOCK_ID_TOKEN_WITH_CLAIMS;\n import static com.microsoft.identity.common.MsalOAuth2TokenCacheTest.AccountCredentialTestBundle;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyMTEyMA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/933#discussion_r440421120", "bodyText": "Should this be the same object reference?", "author": "AdamBJohnsonx", "createdAt": "2020-06-15T20:14:40Z", "path": "common/src/androidTest/java/com/microsoft/identity/common/MsalCppOAuth2TokenCacheTest.java", "diffHunk": "@@ -0,0 +1,249 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common;\n+\n+import android.content.Context;\n+\n+import androidx.test.InstrumentationRegistry;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import com.microsoft.identity.common.adal.internal.AndroidSecretKeyEnabledHelper;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.internal.authscheme.BearerAuthenticationSchemeInternal;\n+import com.microsoft.identity.common.internal.cache.AccountDeletionRecord;\n+import com.microsoft.identity.common.internal.cache.ICacheRecord;\n+import com.microsoft.identity.common.internal.cache.MsalCppOAuth2TokenCache;\n+import com.microsoft.identity.common.internal.dto.AccountRecord;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+import com.microsoft.identity.common.internal.providers.microsoft.MicrosoftAccount;\n+\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.MicrosoftStsAccountCredentialAdapterTest.MOCK_ID_TOKEN_WITH_CLAIMS;\n+import static com.microsoft.identity.common.MsalOAuth2TokenCacheTest.AccountCredentialTestBundle;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.CACHED_AT;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.CLIENT_ID;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.ENVIRONMENT;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.EXPIRES_ON;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.HOME_ACCOUNT_ID;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.LOCAL_ACCOUNT_ID;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.REALM;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.SECRET;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.TARGET;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.USERNAME;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class MsalCppOAuth2TokenCacheTest extends AndroidSecretKeyEnabledHelper {\n+\n+    private MsalCppOAuth2TokenCache mCppCache;\n+\n+    // Test Accounts/Credentials\n+    private AccountCredentialTestBundle mTestBundle;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        super.setUp();\n+\n+        // Context and related init\n+        final Context context = InstrumentationRegistry.getTargetContext();\n+        mCppCache = MsalCppOAuth2TokenCache.create(context);\n+\n+        // Credentials for testing\n+        mTestBundle = new AccountCredentialTestBundle(\n+                MicrosoftAccount.AUTHORITY_TYPE_V1_V2,\n+                LOCAL_ACCOUNT_ID,\n+                USERNAME,\n+                HOME_ACCOUNT_ID,\n+                ENVIRONMENT,\n+                REALM,\n+                TARGET,\n+                CACHED_AT,\n+                EXPIRES_ON,\n+                SECRET,\n+                CLIENT_ID,\n+                SECRET,\n+                MOCK_ID_TOKEN_WITH_CLAIMS,\n+                null,\n+                CredentialType.V1IdToken\n+        );\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        mCppCache.clearCache();\n+    }\n+\n+    @Test\n+    public void saveAndGetAccountTest() throws ClientException {\n+        final AccountRecord generatedAccount = mTestBundle.mGeneratedAccount;\n+\n+        // Save the the cache\n+        mCppCache.saveAccountRecord(generatedAccount);\n+\n+        // Restore it\n+        final AccountRecord restoredAccount = mCppCache.getAccount(\n+                generatedAccount.getHomeAccountId(),\n+                generatedAccount.getEnvironment(),\n+                generatedAccount.getRealm()\n+        );\n+\n+        Assert.assertNotNull(restoredAccount);\n+        Assert.assertEquals(generatedAccount, restoredAccount);", "originalCommit": "c2dedc4786862ea48f67bf00f85c0c1e3d9ec127", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ0MjY3NA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/933#discussion_r440442674", "bodyText": "Looks like no, because this will write to the storage layer and something else could also write there and we should see it.", "author": "AdamBJohnsonx", "createdAt": "2020-06-15T20:57:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyMTEyMA=="}], "type": "inlineReview", "revised_code": {"commit": "d5b1b2091b7f32bdd877f02ea69f88f7dcd613d8", "chunk": "diff --git a/common/src/androidTest/java/com/microsoft/identity/common/MsalCppOAuth2TokenCacheTest.java b/common/src/androidTest/java/com/microsoft/identity/common/MsalCppOAuth2TokenCacheTest.java\nindex 3072c58e3..b2d0371f1 100644\n--- a/common/src/androidTest/java/com/microsoft/identity/common/MsalCppOAuth2TokenCacheTest.java\n+++ b/common/src/androidTest/java/com/microsoft/identity/common/MsalCppOAuth2TokenCacheTest.java\n\n@@ -46,6 +46,7 @@ import org.junit.Test;\n import org.junit.runner.RunWith;\n \n import java.util.List;\n+import java.util.stream.StreamSupport;\n \n import static com.microsoft.identity.common.MicrosoftStsAccountCredentialAdapterTest.MOCK_ID_TOKEN_WITH_CLAIMS;\n import static com.microsoft.identity.common.MsalOAuth2TokenCacheTest.AccountCredentialTestBundle;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyMjU1MQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/933#discussion_r440422551", "bodyText": "Should we go on and check that we don't get it from the cache?", "author": "AdamBJohnsonx", "createdAt": "2020-06-15T20:17:27Z", "path": "common/src/androidTest/java/com/microsoft/identity/common/MsalCppOAuth2TokenCacheTest.java", "diffHunk": "@@ -0,0 +1,249 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common;\n+\n+import android.content.Context;\n+\n+import androidx.test.InstrumentationRegistry;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import com.microsoft.identity.common.adal.internal.AndroidSecretKeyEnabledHelper;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.internal.authscheme.BearerAuthenticationSchemeInternal;\n+import com.microsoft.identity.common.internal.cache.AccountDeletionRecord;\n+import com.microsoft.identity.common.internal.cache.ICacheRecord;\n+import com.microsoft.identity.common.internal.cache.MsalCppOAuth2TokenCache;\n+import com.microsoft.identity.common.internal.dto.AccountRecord;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+import com.microsoft.identity.common.internal.providers.microsoft.MicrosoftAccount;\n+\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.MicrosoftStsAccountCredentialAdapterTest.MOCK_ID_TOKEN_WITH_CLAIMS;\n+import static com.microsoft.identity.common.MsalOAuth2TokenCacheTest.AccountCredentialTestBundle;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.CACHED_AT;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.CLIENT_ID;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.ENVIRONMENT;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.EXPIRES_ON;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.HOME_ACCOUNT_ID;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.LOCAL_ACCOUNT_ID;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.REALM;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.SECRET;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.TARGET;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.USERNAME;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class MsalCppOAuth2TokenCacheTest extends AndroidSecretKeyEnabledHelper {\n+\n+    private MsalCppOAuth2TokenCache mCppCache;\n+\n+    // Test Accounts/Credentials\n+    private AccountCredentialTestBundle mTestBundle;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        super.setUp();\n+\n+        // Context and related init\n+        final Context context = InstrumentationRegistry.getTargetContext();\n+        mCppCache = MsalCppOAuth2TokenCache.create(context);\n+\n+        // Credentials for testing\n+        mTestBundle = new AccountCredentialTestBundle(\n+                MicrosoftAccount.AUTHORITY_TYPE_V1_V2,\n+                LOCAL_ACCOUNT_ID,\n+                USERNAME,\n+                HOME_ACCOUNT_ID,\n+                ENVIRONMENT,\n+                REALM,\n+                TARGET,\n+                CACHED_AT,\n+                EXPIRES_ON,\n+                SECRET,\n+                CLIENT_ID,\n+                SECRET,\n+                MOCK_ID_TOKEN_WITH_CLAIMS,\n+                null,\n+                CredentialType.V1IdToken\n+        );\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        mCppCache.clearCache();\n+    }\n+\n+    @Test\n+    public void saveAndGetAccountTest() throws ClientException {\n+        final AccountRecord generatedAccount = mTestBundle.mGeneratedAccount;\n+\n+        // Save the the cache\n+        mCppCache.saveAccountRecord(generatedAccount);\n+\n+        // Restore it\n+        final AccountRecord restoredAccount = mCppCache.getAccount(\n+                generatedAccount.getHomeAccountId(),\n+                generatedAccount.getEnvironment(),\n+                generatedAccount.getRealm()\n+        );\n+\n+        Assert.assertNotNull(restoredAccount);\n+        Assert.assertEquals(generatedAccount, restoredAccount);\n+    }\n+\n+    @Test\n+    public void getAccountNullTest() throws ClientException {\n+        final AccountRecord generatedAccount = mTestBundle.mGeneratedAccount;\n+        final AccountRecord restoredAccount = mCppCache.getAccount(\n+                generatedAccount.getHomeAccountId(),\n+                generatedAccount.getEnvironment(),\n+                generatedAccount.getRealm()\n+        );\n+        Assert.assertNull(restoredAccount);\n+    }\n+\n+    @Test\n+    public void getAllAccountsTest() {\n+        final AccountRecord generatedAccount = mTestBundle.mGeneratedAccount;\n+        mCppCache.saveAccountRecord(generatedAccount);\n+\n+        final List<AccountRecord> accounts = mCppCache.getAllAccounts();\n+        final AccountRecord restoredAccount = accounts.get(0);\n+        Assert.assertEquals(generatedAccount, restoredAccount);\n+\n+        // TODO this API makes no statement about the immutability of the List returned\n+        // TODO results should not be mutable\n+    }\n+\n+    @Test\n+    public void getAllAccountsEmptyTest() {\n+        final List<AccountRecord> accounts = mCppCache.getAllAccounts();\n+        Assert.assertTrue(accounts.isEmpty());\n+    }\n+\n+    @Ignore // Ignore this test until API behavior is decided\n+    @Test\n+    public void removeAccountTest() throws ClientException {\n+        final AccountRecord generatedAccount = mTestBundle.mGeneratedAccount;\n+        mCppCache.saveAccountRecord(generatedAccount);\n+        final AccountDeletionRecord deletionRecord = mCppCache.removeAccount(\n+                generatedAccount.getHomeAccountId(),\n+                generatedAccount.getEnvironment(),\n+                generatedAccount.getRealm()\n+        );\n+        Assert.assertEquals(generatedAccount, deletionRecord.get(0));\n+", "originalCommit": "c2dedc4786862ea48f67bf00f85c0c1e3d9ec127", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ3OTYyMw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/933#discussion_r440479623", "bodyText": "Will add", "author": "iambmelt", "createdAt": "2020-06-15T22:22:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyMjU1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "d5b1b2091b7f32bdd877f02ea69f88f7dcd613d8", "chunk": "diff --git a/common/src/androidTest/java/com/microsoft/identity/common/MsalCppOAuth2TokenCacheTest.java b/common/src/androidTest/java/com/microsoft/identity/common/MsalCppOAuth2TokenCacheTest.java\nindex 3072c58e3..b2d0371f1 100644\n--- a/common/src/androidTest/java/com/microsoft/identity/common/MsalCppOAuth2TokenCacheTest.java\n+++ b/common/src/androidTest/java/com/microsoft/identity/common/MsalCppOAuth2TokenCacheTest.java\n\n@@ -46,6 +46,7 @@ import org.junit.Test;\n import org.junit.runner.RunWith;\n \n import java.util.List;\n+import java.util.stream.StreamSupport;\n \n import static com.microsoft.identity.common.MicrosoftStsAccountCredentialAdapterTest.MOCK_ID_TOKEN_WITH_CLAIMS;\n import static com.microsoft.identity.common.MsalOAuth2TokenCacheTest.AccountCredentialTestBundle;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyMjkzNg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/933#discussion_r440422936", "bodyText": "Do we need this test?", "author": "AdamBJohnsonx", "createdAt": "2020-06-15T20:18:09Z", "path": "common/src/androidTest/java/com/microsoft/identity/common/MsalCppOAuth2TokenCacheTest.java", "diffHunk": "@@ -0,0 +1,249 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common;\n+\n+import android.content.Context;\n+\n+import androidx.test.InstrumentationRegistry;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import com.microsoft.identity.common.adal.internal.AndroidSecretKeyEnabledHelper;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.internal.authscheme.BearerAuthenticationSchemeInternal;\n+import com.microsoft.identity.common.internal.cache.AccountDeletionRecord;\n+import com.microsoft.identity.common.internal.cache.ICacheRecord;\n+import com.microsoft.identity.common.internal.cache.MsalCppOAuth2TokenCache;\n+import com.microsoft.identity.common.internal.dto.AccountRecord;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+import com.microsoft.identity.common.internal.providers.microsoft.MicrosoftAccount;\n+\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.MicrosoftStsAccountCredentialAdapterTest.MOCK_ID_TOKEN_WITH_CLAIMS;\n+import static com.microsoft.identity.common.MsalOAuth2TokenCacheTest.AccountCredentialTestBundle;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.CACHED_AT;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.CLIENT_ID;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.ENVIRONMENT;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.EXPIRES_ON;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.HOME_ACCOUNT_ID;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.LOCAL_ACCOUNT_ID;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.REALM;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.SECRET;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.TARGET;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.USERNAME;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class MsalCppOAuth2TokenCacheTest extends AndroidSecretKeyEnabledHelper {\n+\n+    private MsalCppOAuth2TokenCache mCppCache;\n+\n+    // Test Accounts/Credentials\n+    private AccountCredentialTestBundle mTestBundle;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        super.setUp();\n+\n+        // Context and related init\n+        final Context context = InstrumentationRegistry.getTargetContext();\n+        mCppCache = MsalCppOAuth2TokenCache.create(context);\n+\n+        // Credentials for testing\n+        mTestBundle = new AccountCredentialTestBundle(\n+                MicrosoftAccount.AUTHORITY_TYPE_V1_V2,\n+                LOCAL_ACCOUNT_ID,\n+                USERNAME,\n+                HOME_ACCOUNT_ID,\n+                ENVIRONMENT,\n+                REALM,\n+                TARGET,\n+                CACHED_AT,\n+                EXPIRES_ON,\n+                SECRET,\n+                CLIENT_ID,\n+                SECRET,\n+                MOCK_ID_TOKEN_WITH_CLAIMS,\n+                null,\n+                CredentialType.V1IdToken\n+        );\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        mCppCache.clearCache();\n+    }\n+\n+    @Test\n+    public void saveAndGetAccountTest() throws ClientException {\n+        final AccountRecord generatedAccount = mTestBundle.mGeneratedAccount;\n+\n+        // Save the the cache\n+        mCppCache.saveAccountRecord(generatedAccount);\n+\n+        // Restore it\n+        final AccountRecord restoredAccount = mCppCache.getAccount(\n+                generatedAccount.getHomeAccountId(),\n+                generatedAccount.getEnvironment(),\n+                generatedAccount.getRealm()\n+        );\n+\n+        Assert.assertNotNull(restoredAccount);\n+        Assert.assertEquals(generatedAccount, restoredAccount);\n+    }\n+\n+    @Test\n+    public void getAccountNullTest() throws ClientException {\n+        final AccountRecord generatedAccount = mTestBundle.mGeneratedAccount;\n+        final AccountRecord restoredAccount = mCppCache.getAccount(\n+                generatedAccount.getHomeAccountId(),\n+                generatedAccount.getEnvironment(),\n+                generatedAccount.getRealm()\n+        );\n+        Assert.assertNull(restoredAccount);\n+    }\n+\n+    @Test\n+    public void getAllAccountsTest() {\n+        final AccountRecord generatedAccount = mTestBundle.mGeneratedAccount;\n+        mCppCache.saveAccountRecord(generatedAccount);\n+\n+        final List<AccountRecord> accounts = mCppCache.getAllAccounts();\n+        final AccountRecord restoredAccount = accounts.get(0);\n+        Assert.assertEquals(generatedAccount, restoredAccount);\n+\n+        // TODO this API makes no statement about the immutability of the List returned\n+        // TODO results should not be mutable\n+    }\n+\n+    @Test\n+    public void getAllAccountsEmptyTest() {\n+        final List<AccountRecord> accounts = mCppCache.getAllAccounts();\n+        Assert.assertTrue(accounts.isEmpty());\n+    }\n+\n+    @Ignore // Ignore this test until API behavior is decided\n+    @Test\n+    public void removeAccountTest() throws ClientException {\n+        final AccountRecord generatedAccount = mTestBundle.mGeneratedAccount;\n+        mCppCache.saveAccountRecord(generatedAccount);\n+        final AccountDeletionRecord deletionRecord = mCppCache.removeAccount(\n+                generatedAccount.getHomeAccountId(),\n+                generatedAccount.getEnvironment(),\n+                generatedAccount.getRealm()\n+        );\n+        Assert.assertEquals(generatedAccount, deletionRecord.get(0));\n+\n+        // TODO There's confusing behavior here...\n+        // In MSAL we have defined an account as \"existing\" if we have an RT for it\n+        // This API doesn't make this constraint obvious. Should we delete any matching account?\n+        // In a double-client stack situation, this could delete an account from another app (TFL/TFW)\n+    }\n+\n+    @Test\n+    public void removeNonexistentAccountTest() throws ClientException {\n+        final AccountRecord generatedAccount = mTestBundle.mGeneratedAccount;\n+        final AccountDeletionRecord deletionRecord = mCppCache.removeAccount(\n+                generatedAccount.getHomeAccountId(),\n+                generatedAccount.getEnvironment(),\n+                generatedAccount.getRealm()\n+        );\n+        Assert.assertTrue(deletionRecord.isEmpty());\n+    }\n+\n+    @Test\n+    public void saveAccountRecordIncompleteTest() {\n+", "originalCommit": "c2dedc4786862ea48f67bf00f85c0c1e3d9ec127", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ0MTY5Nw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/933#discussion_r440441697", "bodyText": "OK, yeah, this is still WIP.  Nevermind.", "author": "AdamBJohnsonx", "createdAt": "2020-06-15T20:55:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyMjkzNg=="}], "type": "inlineReview", "revised_code": {"commit": "d5b1b2091b7f32bdd877f02ea69f88f7dcd613d8", "chunk": "diff --git a/common/src/androidTest/java/com/microsoft/identity/common/MsalCppOAuth2TokenCacheTest.java b/common/src/androidTest/java/com/microsoft/identity/common/MsalCppOAuth2TokenCacheTest.java\nindex 3072c58e3..b2d0371f1 100644\n--- a/common/src/androidTest/java/com/microsoft/identity/common/MsalCppOAuth2TokenCacheTest.java\n+++ b/common/src/androidTest/java/com/microsoft/identity/common/MsalCppOAuth2TokenCacheTest.java\n\n@@ -46,6 +46,7 @@ import org.junit.Test;\n import org.junit.runner.RunWith;\n \n import java.util.List;\n+import java.util.stream.StreamSupport;\n \n import static com.microsoft.identity.common.MicrosoftStsAccountCredentialAdapterTest.MOCK_ID_TOKEN_WITH_CLAIMS;\n import static com.microsoft.identity.common.MsalOAuth2TokenCacheTest.AccountCredentialTestBundle;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQzOTI3Ng==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/933#discussion_r440439276", "bodyText": "Since we're adding this API, do we need to return a list?  Would it be sufficient just to return an Iterator, since the contains method on List is going to have to search it anyway?", "author": "AdamBJohnsonx", "createdAt": "2020-06-15T20:51:04Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalCppOAuth2TokenCache.java", "diffHunk": "@@ -132,10 +134,24 @@ public synchronized void saveAccountRecord(@NonNull AccountRecord accountRecord)\n      * API to clear all cache.\n      * Note: This method is intended to be only used for testing purposes.\n      */\n+    @VisibleForTesting(otherwise = VisibleForTesting.NONE)\n     public synchronized void clearCache() {\n         getAccountCredentialCache().clearAll();\n     }\n \n+    /**\n+     * API to inspect cache contents.\n+     * Note: This method is intended to be only used for testing purposes.\n+     *\n+     * @return A immutable List of Credentials contained in this cache.\n+     */\n+    @VisibleForTesting(otherwise = VisibleForTesting.NONE)\n+    public synchronized List<Credential> getCredentials() {", "originalCommit": "c2dedc4786862ea48f67bf00f85c0c1e3d9ec127", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ3OTQzMw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/933#discussion_r440479433", "bodyText": "This certainly could return an Iterator, though the immediate benefit of this change isn't obvious to me since basically the only thing I want to do with this collection is call contains() on it in a test", "author": "iambmelt", "createdAt": "2020-06-15T22:22:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQzOTI3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ4NDIxNA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/933#discussion_r440484214", "bodyText": "Point.  This is only being added for testing.", "author": "AdamBJohnsonx", "createdAt": "2020-06-15T22:35:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQzOTI3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ4NTU3MQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/933#discussion_r440485571", "bodyText": "I think the implicit/broader point though is \"do we need all these List functions in a world of immutable state?\" which is a good point to consider esp. given the potential perks an Iterator can provide (lazy loading, etc).\nSo I'll decline this particular change, but ACK the sentiment and will ponder it henceforth if we add additional cache APIs", "author": "iambmelt", "createdAt": "2020-06-15T22:39:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQzOTI3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "b373f5581f3755a015592bcb00d9abff928c5787", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/cache/MsalCppOAuth2TokenCache.java b/common/src/main/java/com/microsoft/identity/common/internal/cache/MsalCppOAuth2TokenCache.java\nindex feda8e814..75b8f53a2 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/cache/MsalCppOAuth2TokenCache.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/cache/MsalCppOAuth2TokenCache.java\n\n@@ -125,9 +125,8 @@ public class MsalCppOAuth2TokenCache\n      *\n      * @param accountRecord : accountRecord to be saved.\n      */\n-    public synchronized void saveAccountRecord(@NonNull AccountRecord accountRecord) {\n+    public synchronized void saveAccountRecord(@NonNull final AccountRecord accountRecord) {\n         getAccountCredentialCache().saveAccount(accountRecord);\n-\n     }\n \n     /**\n"}}, {"oid": "5e0f72cc380013388b9f1b5004ae3e1d2b0f6186", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/5e0f72cc380013388b9f1b5004ae3e1d2b0f6186", "message": "Merge branch 'dev' into iambmelt/cpp-cache-tests", "committedDate": "2020-06-15T21:02:02Z", "type": "commit"}, {"oid": "f73851fc9205dd3e6ee3aaeba1dde36789f3ddf5", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/f73851fc9205dd3e6ee3aaeba1dde36789f3ddf5", "message": "Declaring params final", "committedDate": "2020-06-15T21:51:31Z", "type": "commit"}, {"oid": "d5b1b2091b7f32bdd877f02ea69f88f7dcd613d8", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/d5b1b2091b7f32bdd877f02ea69f88f7dcd613d8", "message": "Result list becomes unmodifiable, expanding ignored test", "committedDate": "2020-06-15T22:27:38Z", "type": "commit"}, {"oid": "3d6629a7641d8a3328772947dbdaeb2de68b074e", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/3d6629a7641d8a3328772947dbdaeb2de68b074e", "message": "Make a statement on immutability", "committedDate": "2020-06-15T22:29:43Z", "type": "commit"}, {"oid": "3f554281d073e1ef36db626afb77dc122caf7958", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/3f554281d073e1ef36db626afb77dc122caf7958", "message": "Refactoring for code reuse with CPP, adds the ability to control which\ncredentials are cleaned up", "committedDate": "2020-06-15T23:48:12Z", "type": "commit"}, {"oid": "6c756796e7ad4099d1ce0ad05ca9160d7c2de516", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/6c756796e7ad4099d1ce0ad05ca9160d7c2de516", "message": "Oops. Missed committing two files", "committedDate": "2020-06-15T23:59:17Z", "type": "commit"}, {"oid": "b373f5581f3755a015592bcb00d9abff928c5787", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/b373f5581f3755a015592bcb00d9abff928c5787", "message": "Cleaning up stray newline", "committedDate": "2020-06-16T00:00:42Z", "type": "commit"}, {"oid": "d5e06a07ba467e86ea0e97ab4a8d1351bfa20ac3", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/d5e06a07ba467e86ea0e97ab4a8d1351bfa20ac3", "message": "Adding negative test for cache result modification", "committedDate": "2020-06-16T00:09:23Z", "type": "commit"}, {"oid": "f7f386af8c452134c74609a5e7c0b8e47a2aa539", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/f7f386af8c452134c74609a5e7c0b8e47a2aa539", "message": "Adds new forceRemoveAccount function + additional tests", "committedDate": "2020-06-16T00:59:09Z", "type": "commit"}, {"oid": "9b9e82c94eeb126e724548da8a293bb635a7935f", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/9b9e82c94eeb126e724548da8a293bb635a7935f", "message": "Removing TODO", "committedDate": "2020-06-16T02:16:46Z", "type": "commit"}, {"oid": "9fad7a3781181c31b89aaecba7db6e4b59bf1924", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/9fad7a3781181c31b89aaecba7db6e4b59bf1924", "message": "Force removing accounts even if no RT is present", "committedDate": "2020-06-16T23:37:34Z", "type": "commit"}, {"oid": "972c5836b42fe61c4a86a805a3f699c216602f75", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/972c5836b42fe61c4a86a805a3f699c216602f75", "message": "Merge branch 'dev' into iambmelt/cpp-cache-tests", "committedDate": "2020-06-16T23:42:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY3MjA5OA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/933#discussion_r441672098", "bodyText": "Let's also add an assert statement for the size of the list", "author": "shahzaibj", "createdAt": "2020-06-17T16:25:59Z", "path": "common/src/androidTest/java/com/microsoft/identity/common/MsalCppOAuth2TokenCacheTest.java", "diffHunk": "@@ -0,0 +1,316 @@\n+// Copyright (c) Microsoft Corporation.\n+// All rights reserved.\n+//\n+// This code is licensed under the MIT License.\n+//\n+// Permission is hereby granted, free of charge, to any person obtaining a copy\n+// of this software and associated documentation files(the \"Software\"), to deal\n+// in the Software without restriction, including without limitation the rights\n+// to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+// copies of the Software, and to permit persons to whom the Software is\n+// furnished to do so, subject to the following conditions :\n+//\n+// The above copyright notice and this permission notice shall be included in\n+// all copies or substantial portions of the Software.\n+//\n+// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+// THE SOFTWARE.\n+package com.microsoft.identity.common;\n+\n+import android.content.Context;\n+\n+import androidx.test.InstrumentationRegistry;\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import com.microsoft.identity.common.adal.internal.AndroidSecretKeyEnabledHelper;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.internal.authscheme.BearerAuthenticationSchemeInternal;\n+import com.microsoft.identity.common.internal.cache.AccountDeletionRecord;\n+import com.microsoft.identity.common.internal.cache.ICacheRecord;\n+import com.microsoft.identity.common.internal.cache.MsalCppOAuth2TokenCache;\n+import com.microsoft.identity.common.internal.dto.AccountRecord;\n+import com.microsoft.identity.common.internal.dto.Credential;\n+import com.microsoft.identity.common.internal.dto.CredentialType;\n+import com.microsoft.identity.common.internal.providers.microsoft.MicrosoftAccount;\n+\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.MicrosoftStsAccountCredentialAdapterTest.MOCK_ID_TOKEN_WITH_CLAIMS;\n+import static com.microsoft.identity.common.MsalOAuth2TokenCacheTest.AccountCredentialTestBundle;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.CACHED_AT;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.CLIENT_ID;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.ENVIRONMENT;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.EXPIRES_ON;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.HOME_ACCOUNT_ID;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.LOCAL_ACCOUNT_ID;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.REALM;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.SECRET;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.TARGET;\n+import static com.microsoft.identity.common.SharedPreferencesAccountCredentialCacheTest.USERNAME;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class MsalCppOAuth2TokenCacheTest extends AndroidSecretKeyEnabledHelper {\n+\n+    private MsalCppOAuth2TokenCache mCppCache;\n+\n+    // Test Accounts/Credentials\n+    private AccountCredentialTestBundle mTestBundle;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        super.setUp();\n+\n+        // Context and related init\n+        final Context context = InstrumentationRegistry.getTargetContext();\n+        mCppCache = MsalCppOAuth2TokenCache.create(context);\n+\n+        // Credentials for testing\n+        mTestBundle = new AccountCredentialTestBundle(\n+                MicrosoftAccount.AUTHORITY_TYPE_V1_V2,\n+                LOCAL_ACCOUNT_ID,\n+                USERNAME,\n+                HOME_ACCOUNT_ID,\n+                ENVIRONMENT,\n+                REALM,\n+                TARGET,\n+                CACHED_AT,\n+                EXPIRES_ON,\n+                SECRET,\n+                CLIENT_ID,\n+                SECRET,\n+                MOCK_ID_TOKEN_WITH_CLAIMS,\n+                null,\n+                CredentialType.V1IdToken\n+        );\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        mCppCache.clearCache();\n+    }\n+\n+    @Test\n+    public void saveAndGetAccountTest() throws ClientException {\n+        final AccountRecord generatedAccount = mTestBundle.mGeneratedAccount;\n+\n+        // Save the the cache\n+        mCppCache.saveAccountRecord(generatedAccount);\n+\n+        // Restore it\n+        final AccountRecord restoredAccount = mCppCache.getAccount(\n+                generatedAccount.getHomeAccountId(),\n+                generatedAccount.getEnvironment(),\n+                generatedAccount.getRealm()\n+        );\n+\n+        Assert.assertNotNull(restoredAccount);\n+        Assert.assertEquals(generatedAccount, restoredAccount);\n+    }\n+\n+    @Test\n+    public void getAccountNullTest() throws ClientException {\n+        final AccountRecord generatedAccount = mTestBundle.mGeneratedAccount;\n+        final AccountRecord restoredAccount = mCppCache.getAccount(\n+                generatedAccount.getHomeAccountId(),\n+                generatedAccount.getEnvironment(),\n+                generatedAccount.getRealm()\n+        );\n+        Assert.assertNull(restoredAccount);\n+    }\n+\n+    @Test\n+    public void getAllAccountsTest() {\n+        final AccountRecord generatedAccount = mTestBundle.mGeneratedAccount;\n+        mCppCache.saveAccountRecord(generatedAccount);\n+\n+        final List<AccountRecord> accounts = mCppCache.getAllAccounts();\n+        final AccountRecord restoredAccount = accounts.get(0);\n+        Assert.assertEquals(generatedAccount, restoredAccount);", "originalCommit": "972c5836b42fe61c4a86a805a3f699c216602f75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY5MDUwNA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/933#discussion_r441690504", "bodyText": "Will do", "author": "iambmelt", "createdAt": "2020-06-17T16:55:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY3MjA5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY5NTk2Nw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/933#discussion_r441695967", "bodyText": "12e089b", "author": "iambmelt", "createdAt": "2020-06-17T17:04:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY3MjA5OA=="}], "type": "inlineReview", "revised_code": {"commit": "12e089b35a9012b7423ac1190782eccb037bbcb4", "chunk": "diff --git a/common/src/androidTest/java/com/microsoft/identity/common/MsalCppOAuth2TokenCacheTest.java b/common/src/androidTest/java/com/microsoft/identity/common/MsalCppOAuth2TokenCacheTest.java\nindex 5fe071cc3..4eee6c079 100644\n--- a/common/src/androidTest/java/com/microsoft/identity/common/MsalCppOAuth2TokenCacheTest.java\n+++ b/common/src/androidTest/java/com/microsoft/identity/common/MsalCppOAuth2TokenCacheTest.java\n\n@@ -137,6 +137,7 @@ public class MsalCppOAuth2TokenCacheTest extends AndroidSecretKeyEnabledHelper {\n         final List<AccountRecord> accounts = mCppCache.getAllAccounts();\n         final AccountRecord restoredAccount = accounts.get(0);\n         Assert.assertEquals(generatedAccount, restoredAccount);\n+        Assert.assertEquals(1, accounts.size());\n     }\n \n     @Test(expected = UnsupportedOperationException.class)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY3NTUzMA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/933#discussion_r441675530", "bodyText": "This cache MsalCppOauth2TokenCache is local cache, right? Like this is when local auth is happening and not broker?", "author": "shahzaibj", "createdAt": "2020-06-17T16:31:38Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalCppOAuth2TokenCache.java", "diffHunk": "@@ -147,8 +205,20 @@ public synchronized void clearCache() {\n     public synchronized AccountDeletionRecord removeAccount(@NonNull final String homeAccountId,\n                                                             @Nullable final String environment,\n                                                             @NonNull final String realm) throws ClientException {\n+        // TODO This API is potentially problematic for TFW/TFL...\n+        // Normally on Android, apps are 'sandboxed' such that each app has their own cache\n+        // and we don't have to worry about 1 app stomping on another's cache\n+        //\n+        // TFW/TFL however, \"double stacked\" their app registrations into a single binary\n+        // Such that calling removeAccount() will potentially remove the Account being used by\n+        // another app.\n+        //\n+        // This API assumes the *general* case where an app is single stacked. If special\n+        // accommodations need to come later for Teams then we can reevaluate the logic here.\n+", "originalCommit": "972c5836b42fe61c4a86a805a3f699c216602f75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY5MDEyMQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/933#discussion_r441690121", "bodyText": "Correct, this is always local cache -- not a broker", "author": "iambmelt", "createdAt": "2020-06-17T16:55:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY3NTUzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY5MTI1MA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/933#discussion_r441691250", "bodyText": "Resolving this; feel free to reactivate if you have any more questions", "author": "iambmelt", "createdAt": "2020-06-17T16:56:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY3NTUzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY5MTQ1Mg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/933#discussion_r441691452", "bodyText": "In that case, this shouldn't be problematic, right? TFW and TFL are two different packages right?", "author": "shahzaibj", "createdAt": "2020-06-17T16:57:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY3NTUzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY5MzMzNw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/933#discussion_r441693337", "bodyText": "Nope, they are a single binary. 2 app registrations shipped inside of a single app from the app store.\nIf a user switches between them, they use the same cache on disk because they are for Android's purposes \"the same app\"", "author": "iambmelt", "createdAt": "2020-06-17T17:00:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY3NTUzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY5NDAxNw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/933#discussion_r441694017", "bodyText": "It's configured somewhat similarly to our testapp; Teams chooses which app.json to load and which client_id to use based on if the user is enterprise vs. consumer", "author": "iambmelt", "createdAt": "2020-06-17T17:01:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY3NTUzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY5OTQwMg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/933#discussion_r441699402", "bodyText": "Got it, Thanks!", "author": "shahzaibj", "createdAt": "2020-06-17T17:10:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY3NTUzMA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "12e089b35a9012b7423ac1190782eccb037bbcb4", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/12e089b35a9012b7423ac1190782eccb037bbcb4", "message": "Adding additional assertion from CR feedback", "committedDate": "2020-06-17T17:01:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwMTU4MQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/933#discussion_r441701581", "bodyText": "Don't quite remember how JAVA executes this....would the getAllAccounts method be executed on each iteration of the loop? Would it be better to call this method before the loop and store the result in a variable and pass that to the loop?", "author": "shahzaibj", "createdAt": "2020-06-17T17:14:27Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalCppOAuth2TokenCache.java", "diffHunk": "@@ -123,19 +127,73 @@ public synchronized void saveCredentials(@Nullable final AccountRecord accountRe\n      *\n      * @param accountRecord : accountRecord to be saved.\n      */\n-    public synchronized void saveAccountRecord(@NonNull AccountRecord accountRecord) {\n+    public synchronized void saveAccountRecord(@NonNull final AccountRecord accountRecord) {\n         getAccountCredentialCache().saveAccount(accountRecord);\n-\n     }\n \n     /**\n      * API to clear all cache.\n      * Note: This method is intended to be only used for testing purposes.\n      */\n+    @VisibleForTesting(otherwise = VisibleForTesting.NONE)\n     public synchronized void clearCache() {\n         getAccountCredentialCache().clearAll();\n     }\n \n+    /**\n+     * API to inspect cache contents.\n+     * Note: This method is intended to be only used for testing purposes.\n+     *\n+     * @return A immutable List of Credentials contained in this cache.\n+     */\n+    @VisibleForTesting(otherwise = VisibleForTesting.NONE)\n+    public synchronized List<Credential> getCredentials() {\n+        return Collections.unmodifiableList(\n+                getAccountCredentialCache().getCredentials()\n+        );\n+    }\n+\n+    /**\n+     * Force remove an AccountRecord matching the supplied criteria.\n+     *\n+     * @param homeAccountId HomeAccountId of the Account.\n+     * @param environment   The Environment of the Account.\n+     * @param realm         The Realm of the Account.\n+     * @return An {@link AccountDeletionRecord} containing a receipt of the removed Accounts.\n+     * @throws ClientException\n+     */\n+    @VisibleForTesting // private by default for production code\n+    public synchronized AccountDeletionRecord forceRemoveAccount(@NonNull final String homeAccountId,\n+                                                                 @Nullable final String environment,\n+                                                                 @NonNull final String realm) throws ClientException {\n+        validateNonNull(homeAccountId, \"homeAccountId\");\n+        validateNonNull(realm, \"realm\");\n+\n+        final boolean mustMatchOnEnvironment = !StringExtensions.isNullOrBlank(environment);\n+\n+        final List<AccountRecord> removedAccounts = new ArrayList<>();\n+\n+        for (final AccountRecord accountRecord : getAllAccounts()) {", "originalCommit": "12e089b35a9012b7423ac1190782eccb037bbcb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwNDgyNw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/933#discussion_r441704827", "bodyText": "This syntax is shorthand for using an iterator; getAllAccounts() will be executed once, then an iterator from it will be returned.  Example below:", "author": "iambmelt", "createdAt": "2020-06-17T17:20:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwMTU4MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY5ODYxMg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/933#discussion_r441698612", "bodyText": "if typesToRemove is null, do we need to do anything except to - potentially - log the fact that we were called?", "author": "AdamBJohnsonx", "createdAt": "2020-06-17T17:09:09Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/cache/MsalOAuth2TokenCache.java", "diffHunk": "@@ -1175,6 +1189,42 @@ public AccountDeletionRecord removeAccount(@Nullable final String environment,\n                                                @Nullable final String clientId,\n                                                @Nullable final String homeAccountId,\n                                                @Nullable final String realm) {\n+        return removeAccount(\n+                environment,\n+                clientId,\n+                homeAccountId,\n+                realm,\n+                CredentialType.AccessToken,\n+                CredentialType.AccessToken_With_AuthScheme,\n+                CredentialType.RefreshToken,\n+                CredentialType.IdToken,\n+                CredentialType.V1IdToken\n+        );\n+    }\n+\n+    /**\n+     * Removes the specified Account or Accounts from the cache.\n+     * <p>\n+     * Note: if realm is passed as null, all tokens and AccountRecords associated to the\n+     * provided homeAccountId will be deleted. If a realm is provided, then the deletion is\n+     * restricted to only those AccountRecords and Credentials in that realm (tenant).\n+     * <p>\n+     * Environment, clientId, and home_account_id are nullable parameters. However, it should be\n+     * noted that if these params are null, this method will have no effect.\n+     *\n+     * @param environment   The environment to which the targeted Account is associated.\n+     * @param clientId      The clientId of this current app.\n+     * @param homeAccountId The homeAccountId of the Account targeted for deletion.\n+     * @param realm         The tenant id of the targeted Account (if applicable).\n+     * @param typesToRemove The CredentialTypes to delete for the targeted Account.\n+     * @return An {@link AccountDeletionRecord}, containing the deleted {@link AccountDeletionRecord}s.\n+     */\n+    @Override\n+    public AccountDeletionRecord removeAccount(@Nullable final String environment,\n+                                               @Nullable final String clientId,\n+                                               @Nullable final String homeAccountId,\n+                                               @Nullable final String realm,\n+                                               @Nullable final CredentialType... typesToRemove) {", "originalCommit": "12e089b35a9012b7423ac1190782eccb037bbcb4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTgxMDQ5NA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/933#discussion_r441810494", "bodyText": "If that happens, we should proceed to remove the account and preserve any credentials. Added a warning log message if null or empty array is provided (cb2ff2d) \ud83d\udc4d", "author": "iambmelt", "createdAt": "2020-06-17T20:22:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY5ODYxMg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "cb2ff2d0a902b2626ba7c645cdf511418aabe984", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/cb2ff2d0a902b2626ba7c645cdf511418aabe984", "message": "Log a warning if no CredentialTypes to remove are specified", "committedDate": "2020-06-17T20:18:07Z", "type": "commit"}]}