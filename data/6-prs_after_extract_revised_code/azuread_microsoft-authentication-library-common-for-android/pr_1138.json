{"pr_number": 1138, "pr_title": "Add a logger for automation", "pr_createdAt": "2020-11-23T23:22:07Z", "pr_url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138", "timeline": [{"oid": "f77c06bcfc1b4aff33ecfd6b433ab6d1efef04d0", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/f77c06bcfc1b4aff33ecfd6b433ab6d1efef04d0", "message": "Add logger for automation", "committedDate": "2020-11-23T04:44:00Z", "type": "commit"}, {"oid": "d1a210d4099bdbc843f62a54b61e67c078593a82", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/d1a210d4099bdbc843f62a54b61e67c078593a82", "message": "Refactor automation logger", "committedDate": "2020-11-23T23:21:18Z", "type": "commit"}, {"oid": "e069c5fb2d84329f18c02837a50b35b78b890ed8", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/e069c5fb2d84329f18c02837a50b35b78b890ed8", "message": "Add licenses to new files", "committedDate": "2020-11-23T23:27:31Z", "type": "commit"}, {"oid": "637ef75359a11eb60439365bed54b3c0eb6cf3c8", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/637ef75359a11eb60439365bed54b3c0eb6cf3c8", "message": "Add javadoc to new logger classes", "committedDate": "2020-11-24T00:04:27Z", "type": "commit"}, {"oid": "a13b7d82754f51bcb7f451015c2425768c9a4b4c", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/a13b7d82754f51bcb7f451015c2425768c9a4b4c", "message": "Add more missing javadoc", "committedDate": "2020-11-24T00:22:09Z", "type": "commit"}, {"oid": "8ce76bd2f81d4bd4884ead4f5e1b055aa13f42ee", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/8ce76bd2f81d4bd4884ead4f5e1b055aa13f42ee", "message": "Add javadoc for LogLevel getLabel method", "committedDate": "2020-11-24T00:45:24Z", "type": "commit"}, {"oid": "bcf4742657a924caec16d13f32c35d1f380d7ad4", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/bcf4742657a924caec16d13f32c35d1f380d7ad4", "message": "Add timestamps to FileLogger", "committedDate": "2020-11-24T00:45:38Z", "type": "commit"}, {"oid": "60eecb2532c77c4445b201ae6596abb61bd1a197", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/60eecb2532c77c4445b201ae6596abb61bd1a197", "message": "Add automation utils to copy log file to sd card", "committedDate": "2020-11-24T04:33:01Z", "type": "commit"}, {"oid": "9a5028dc00dfadb205ae141f41668ab75728726e", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/9a5028dc00dfadb205ae141f41668ab75728726e", "message": "Merge branch 'dev' into shahzaibj/automation-logging", "committedDate": "2020-11-24T16:57:50Z", "type": "commit"}, {"oid": "66660a4917b9f7daad1d00870476ae21ac5cb125", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/66660a4917b9f7daad1d00870476ae21ac5cb125", "message": "Add javadoc for AutomationLoggingRule", "committedDate": "2020-11-24T20:37:08Z", "type": "commit"}, {"oid": "fdfc902c5ab8171f31d9226a7c5a336de5befcb5", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/fdfc902c5ab8171f31d9226a7c5a336de5befcb5", "message": "Merge branch 'shahzaibj/automation-logging' of https://github.com/AzureAD/microsoft-authentication-library-common-for-android into shahzaibj/automation-logging", "committedDate": "2020-11-24T20:38:22Z", "type": "commit"}, {"oid": "4f33c5030fb2c905cc423d2a5ab206e6a77efd9a", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/4f33c5030fb2c905cc423d2a5ab206e6a77efd9a", "message": "Add missing javadoc to CommonUtils methods", "committedDate": "2020-11-24T20:41:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5MTI3MQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r529891271", "bodyText": "Why?", "author": "AdamBJohnsonx", "createdAt": "2020-11-24T21:32:26Z", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/LogcatLogger.java", "diffHunk": "@@ -0,0 +1,96 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.logging;\n+\n+import android.util.Log;\n+\n+import androidx.annotation.NonNull;\n+\n+import lombok.EqualsAndHashCode;\n+\n+/**\n+ * An implementation of {@link ILogger} to send logs to Android logcat. This is just a wrapper\n+ * around {@link Log} utility provided by Android. If you just want to purely send logs to logcat,\n+ * then you should not use this {@link LogcatLogger} and rather use the Android provided\n+ * {@link Log} API.", "originalCommit": "4f33c5030fb2c905cc423d2a5ab206e6a77efd9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyOTA2Nw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r530729067", "bodyText": "Removed that statement after moving to appender model", "author": "shahzaibj", "createdAt": "2020-11-26T01:52:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5MTI3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "890e79c985cb700fcd2e21833b6fc21420011214", "chunk": "diff --git a/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/LogcatLogger.java b/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/LogcatLogger.java\ndeleted file mode 100644\nindex dc74bfb9b..000000000\n--- a/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/LogcatLogger.java\n+++ /dev/null\n\n@@ -1,96 +0,0 @@\n-//  Copyright (c) Microsoft Corporation.\n-//  All rights reserved.\n-//\n-//  This code is licensed under the MIT License.\n-//\n-//  Permission is hereby granted, free of charge, to any person obtaining a copy\n-//  of this software and associated documentation files(the \"Software\"), to deal\n-//  in the Software without restriction, including without limitation the rights\n-//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n-//  copies of the Software, and to permit persons to whom the Software is\n-//  furnished to do so, subject to the following conditions :\n-//\n-//  The above copyright notice and this permission notice shall be included in\n-//  all copies or substantial portions of the Software.\n-//\n-//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n-//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n-//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n-//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n-//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n-//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n-//  THE SOFTWARE.\n-package com.microsoft.identity.client.ui.automation.logging;\n-\n-import android.util.Log;\n-\n-import androidx.annotation.NonNull;\n-\n-import lombok.EqualsAndHashCode;\n-\n-/**\n- * An implementation of {@link ILogger} to send logs to Android logcat. This is just a wrapper\n- * around {@link Log} utility provided by Android. If you just want to purely send logs to logcat,\n- * then you should not use this {@link LogcatLogger} and rather use the Android provided\n- * {@link Log} API.\n- * <p>\n- * The purpose of this {@link LogcatLogger} is to facilitate sending logs to logcat when\n- * used in conjunction with {@link Logger} and {@link LoggerRegistry#registerLogger(ILogger)}.\n- */\n-@EqualsAndHashCode\n-public class LogcatLogger implements ILogger {\n-\n-    private static final LogcatLogger INSTANCE = new LogcatLogger();\n-\n-    /**\n-     * Get an instance of the {@link LogcatLogger}.\n-     *\n-     * @return a LogcatLogger\n-     */\n-    public static LogcatLogger getInstance() {\n-        return INSTANCE;\n-    }\n-\n-    private LogcatLogger() {\n-    }\n-\n-    @Override\n-    public void e(@NonNull String tag, @NonNull String message) {\n-        Log.e(tag, message);\n-    }\n-\n-    @Override\n-    public void e(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n-        Log.e(tag, message, exception);\n-    }\n-\n-    @Override\n-    public void w(@NonNull String tag, @NonNull String message) {\n-        Log.w(tag, message);\n-    }\n-\n-    @Override\n-    public void w(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n-        Log.w(tag, message, exception);\n-    }\n-\n-    @Override\n-    public void i(@NonNull String tag, @NonNull String message) {\n-        Log.i(tag, message);\n-    }\n-\n-    @Override\n-    public void i(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n-        Log.i(tag, message, exception);\n-    }\n-\n-    @Override\n-    public void v(@NonNull String tag, @NonNull String message) {\n-        Log.v(tag, message);\n-    }\n-\n-    @Override\n-    public void v(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n-        Log.v(tag, message, exception);\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5MzM4Nw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r529893387", "bodyText": "A bug question: Do we need another interface here with our own logging system?  I was kind of hoping that we could shift to logback or slf4j so that we could have better control over the emitted messages, and so that we could get logging out of our dependencies that already use java.util.logging or some other mechanism.\nSo if we're going down this path, for the most part, logging subsystems at this point tend to split their functionality into two different pieces.  You have a Logger, which is the interface used by the code and knows nothing about how the data is consumed.  This typically translates whatever various inputs the user gives to it into a message class, potentially filtered by a configuration, and then forwards that message to a series of appenders.  The appenders are what takes care of writing things to files (in this case, though it could be sending things on a socket), and they can be configured and controlled on a finer granularity than what we have here.\nI'm just seeing us writing a lot of our own loggers (there's one in OneAuth, too).\nEdit: we talked about this. If we start trying to use this in common or MSAL we need to devote some engineering to it if we're not going to just use something else.  If it's just for tests, that's OK, but maybe split output management from log routing and log ingestion.", "author": "AdamBJohnsonx", "createdAt": "2020-11-24T21:36:52Z", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/ILogger.java", "diffHunk": "@@ -0,0 +1,122 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.logging;\n+\n+import androidx.annotation.NonNull;\n+\n+/**\n+ * An interface for sending log messages.\n+ */\n+public interface ILogger {", "originalCommit": "4f33c5030fb2c905cc423d2a5ab206e6a77efd9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyOTUzNw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r530729537", "bodyText": "Added an interface for appenders.....currently all logs are routed to all (registered) appenders...we could refactor in the future to route specific logs to specific appenders based on tags or something else.....will keep that out of scope of this PR", "author": "shahzaibj", "createdAt": "2020-11-26T01:54:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5MzM4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "890e79c985cb700fcd2e21833b6fc21420011214", "chunk": "diff --git a/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/ILogger.java b/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/ILogger.java\ndeleted file mode 100644\nindex 22ea0ef6b..000000000\n--- a/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/ILogger.java\n+++ /dev/null\n\n@@ -1,122 +0,0 @@\n-//  Copyright (c) Microsoft Corporation.\n-//  All rights reserved.\n-//\n-//  This code is licensed under the MIT License.\n-//\n-//  Permission is hereby granted, free of charge, to any person obtaining a copy\n-//  of this software and associated documentation files(the \"Software\"), to deal\n-//  in the Software without restriction, including without limitation the rights\n-//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n-//  copies of the Software, and to permit persons to whom the Software is\n-//  furnished to do so, subject to the following conditions :\n-//\n-//  The above copyright notice and this permission notice shall be included in\n-//  all copies or substantial portions of the Software.\n-//\n-//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n-//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n-//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n-//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n-//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n-//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n-//  THE SOFTWARE.\n-package com.microsoft.identity.client.ui.automation.logging;\n-\n-import androidx.annotation.NonNull;\n-\n-/**\n- * An interface for sending log messages.\n- */\n-public interface ILogger {\n-\n-    /**\n-     * Send a {@link LogLevel#ERROR} log message.\n-     *\n-     * @param tag     Used to identify the source of a log message.\n-     *                It usually identifies the class or activity where the log call occurs.\n-     * @param message The error message to log.\n-     */\n-    void e(@NonNull final String tag,\n-           @NonNull final String message);\n-\n-    /**\n-     * Send a {@link LogLevel#ERROR} log message.\n-     *\n-     * @param tag       Used to identify the source of a log message.\n-     *                  It usually identifies the class or activity where the log call occurs.\n-     * @param message   The error message to log.\n-     * @param exception An exception to log\n-     */\n-    void e(@NonNull final String tag,\n-           @NonNull final String message,\n-           @NonNull final Throwable exception);\n-\n-\n-    /**\n-     * Send a {@link LogLevel#WARN} log message.\n-     *\n-     * @param tag     Used to identify the source of a log message.\n-     *                It usually identifies the class or activity where the log call occurs.\n-     * @param message The error message to log.\n-     */\n-    void w(@NonNull final String tag,\n-           @NonNull final String message);\n-\n-    /**\n-     * Send a {@link LogLevel#WARN} log message.\n-     *\n-     * @param tag       Used to identify the source of a log message.\n-     *                  It usually identifies the class or activity where the log call occurs.\n-     * @param message   The error message to log.\n-     * @param exception An exception to log\n-     */\n-    void w(@NonNull final String tag,\n-           @NonNull final String message,\n-           @NonNull final Throwable exception);\n-\n-    /**\n-     * Send a {@link LogLevel#INFO} log message.\n-     *\n-     * @param tag     Used to identify the source of a log message.\n-     *                It usually identifies the class or activity where the log call occurs.\n-     * @param message The error message to log.\n-     */\n-    void i(@NonNull final String tag,\n-           @NonNull final String message);\n-\n-    /**\n-     * Send a {@link LogLevel#INFO} log message.\n-     *\n-     * @param tag       Used to identify the source of a log message.\n-     *                  It usually identifies the class or activity where the log call occurs.\n-     * @param message   The error message to log.\n-     * @param exception An exception to log\n-     */\n-    void i(@NonNull final String tag,\n-           @NonNull final String message,\n-           @NonNull final Throwable exception);\n-\n-    /**\n-     * Send a {@link LogLevel#VERBOSE} log message.\n-     *\n-     * @param tag     Used to identify the source of a log message.\n-     *                It usually identifies the class or activity where the log call occurs.\n-     * @param message The error message to log.\n-     */\n-    void v(@NonNull final String tag,\n-           @NonNull final String message);\n-\n-    /**\n-     * Send a {@link LogLevel#VERBOSE} log message.\n-     *\n-     * @param tag       Used to identify the source of a log message.\n-     *                  It usually identifies the class or activity where the log call occurs.\n-     * @param message   The error message to log.\n-     * @param exception An exception to log\n-     */\n-    void v(@NonNull final String tag,\n-           @NonNull final String message,\n-           @NonNull final Throwable exception);\n-\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5NDYwMg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r529894602", "bodyText": "nit: this doesn't appear to be abstract.", "author": "AdamBJohnsonx", "createdAt": "2020-11-24T21:39:25Z", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/Logger.java", "diffHunk": "@@ -0,0 +1,160 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.logging;\n+\n+import androidx.annotation.NonNull;\n+\n+/**\n+ * An abstract logger to write/send logs. The actual implementation of logger used may differ.", "originalCommit": "4f33c5030fb2c905cc423d2a5ab206e6a77efd9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyOTU4NQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r530729585", "bodyText": "Addressed", "author": "shahzaibj", "createdAt": "2020-11-26T01:54:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5NDYwMg=="}], "type": "inlineReview", "revised_code": {"commit": "890e79c985cb700fcd2e21833b6fc21420011214", "chunk": "diff --git a/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/Logger.java b/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/Logger.java\nindex 46363abb7..7c989bb0b 100644\n--- a/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/Logger.java\n+++ b/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/Logger.java\n\n@@ -25,15 +25,16 @@ package com.microsoft.identity.client.ui.automation.logging;\n import androidx.annotation.NonNull;\n \n /**\n- * An abstract logger to write/send logs. The actual implementation of logger used may differ.\n- * The logger must be registered with the {@link LoggerRegistry} to use that logging implementation.\n+ * An logger to write/send logs. The logs will be sent to all the registered appenders.\n+ * See {@link IAppender}. The appender must be registered with the {@link AppenderRegistry} to use\n+ * that logging implementation.\n  */\n public class Logger {\n \n-    private static final LoggerRegistry LOGGER_REGISTRY = LoggerRegistry.getInstance();\n+    private static final AppenderRegistry APPENDER_REGISTRY = AppenderRegistry.getInstance();\n \n-    public static LoggerRegistry getLoggerRegistry() {\n-        return LOGGER_REGISTRY;\n+    public static AppenderRegistry getAppenderRegistry() {\n+        return APPENDER_REGISTRY;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5ODEwNA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r529898104", "bodyText": "If we split this as Logger/Appender, then output classes don't need to have level-specific methods.  It has one goal - every appender has a format, apply the format to the message and append the output to the output sink.", "author": "AdamBJohnsonx", "createdAt": "2020-11-24T21:45:51Z", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java", "diffHunk": "@@ -0,0 +1,154 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.logging;\n+\n+import android.content.Context;\n+import android.util.Log;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.client.ui.automation.utils.AdbShellUtils;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import lombok.EqualsAndHashCode;\n+\n+/**\n+ * An implementation of {@link ILogger} to write logs to a file on desk. The filename must be\n+ * supplied to the FileLogger and the file will be created in the files directory reserved by the OS\n+ * for the calling application. This directory is what is returned by {@link Context#getFilesDir()}.\n+ */\n+@EqualsAndHashCode\n+public class FileLogger implements ILogger {", "originalCommit": "4f33c5030fb2c905cc423d2a5ab206e6a77efd9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyOTc4Nw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r530729787", "bodyText": "Addressed by adding appender interface as suggested", "author": "shahzaibj", "createdAt": "2020-11-26T01:55:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5ODEwNA=="}], "type": "inlineReview", "revised_code": {"commit": "890e79c985cb700fcd2e21833b6fc21420011214", "chunk": "diff --git a/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java b/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileAppender.java\nsimilarity index 70%\nrename from uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java\nrename to uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileAppender.java\nindex c8704a0f3..313d8c6d0 100644\n--- a/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java\n+++ b/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileAppender.java\n\n@@ -29,8 +29,6 @@ import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n import androidx.test.core.app.ApplicationProvider;\n \n-import com.microsoft.identity.client.ui.automation.utils.AdbShellUtils;\n-\n import java.io.BufferedWriter;\n import java.io.File;\n import java.io.FileWriter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5ODYxNg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r529898616", "bodyText": "We probably don't want to open and close the file writer every log line write.", "author": "AdamBJohnsonx", "createdAt": "2020-11-24T21:46:49Z", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java", "diffHunk": "@@ -0,0 +1,154 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.logging;\n+\n+import android.content.Context;\n+import android.util.Log;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.client.ui.automation.utils.AdbShellUtils;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import lombok.EqualsAndHashCode;\n+\n+/**\n+ * An implementation of {@link ILogger} to write logs to a file on desk. The filename must be\n+ * supplied to the FileLogger and the file will be created in the files directory reserved by the OS\n+ * for the calling application. This directory is what is returned by {@link Context#getFilesDir()}.\n+ */\n+@EqualsAndHashCode\n+public class FileLogger implements ILogger {\n+\n+    private static final String DATE_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n+\n+    private final String mFileName;\n+\n+    public FileLogger(@NonNull final String filename) {\n+        mFileName = filename;\n+    }\n+\n+    @Override\n+    public void e(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.ERROR, tag, message, null);\n+    }\n+\n+    @Override\n+    public void e(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.ERROR, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void w(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.WARN, tag, message, null);\n+    }\n+\n+    @Override\n+    public void w(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.WARN, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void i(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.INFO, tag, message, null);\n+    }\n+\n+    @Override\n+    public void i(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.INFO, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void v(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.VERBOSE, tag, message, null);\n+    }\n+\n+    @Override\n+    public void v(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.VERBOSE, tag, message, exception);\n+    }\n+\n+    private void log(LogLevel logLevel, String tag, String message, Throwable throwable) {\n+        final String logMessage = formatMessage(logLevel, tag, message, throwable);\n+        writeLogToFile(logMessage);\n+    }\n+\n+    private void writeLogToFile(final String logMessage) {\n+        try {\n+            final File logFile = getLogFile();\n+            //BufferedWriter for performance, true to set append to file flag\n+            BufferedWriter buf = new BufferedWriter(new FileWriter(logFile, true));\n+            buf.append(logMessage);\n+            buf.newLine();\n+            buf.close();", "originalCommit": "4f33c5030fb2c905cc423d2a5ab206e6a77efd9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczMDA1OQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r530730059", "bodyText": "Addressed....we will open the file on construction of the appender...I have also added a public method to close it if needed...and if someone calls that then we would also unregister the appender.", "author": "shahzaibj", "createdAt": "2020-11-26T01:56:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg5ODYxNg=="}], "type": "inlineReview", "revised_code": {"commit": "890e79c985cb700fcd2e21833b6fc21420011214", "chunk": "diff --git a/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java b/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileAppender.java\nsimilarity index 70%\nrename from uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java\nrename to uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileAppender.java\nindex c8704a0f3..313d8c6d0 100644\n--- a/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java\n+++ b/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileAppender.java\n\n@@ -29,8 +29,6 @@ import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n import androidx.test.core.app.ApplicationProvider;\n \n-import com.microsoft.identity.client.ui.automation.utils.AdbShellUtils;\n-\n import java.io.BufferedWriter;\n import java.io.File;\n import java.io.FileWriter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkwMDkwOA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r529900908", "bodyText": "The question of how do you log error messages encountered while logging...I've written a loggerlogger before, to push my logging events that I got errors while logging to stderr and hope for the best.  That's probably what we want to do here, but using logcat.  It may need to be throttled.", "author": "AdamBJohnsonx", "createdAt": "2020-11-24T21:49:58Z", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java", "diffHunk": "@@ -0,0 +1,154 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.logging;\n+\n+import android.content.Context;\n+import android.util.Log;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.client.ui.automation.utils.AdbShellUtils;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import lombok.EqualsAndHashCode;\n+\n+/**\n+ * An implementation of {@link ILogger} to write logs to a file on desk. The filename must be\n+ * supplied to the FileLogger and the file will be created in the files directory reserved by the OS\n+ * for the calling application. This directory is what is returned by {@link Context#getFilesDir()}.\n+ */\n+@EqualsAndHashCode\n+public class FileLogger implements ILogger {\n+\n+    private static final String DATE_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n+\n+    private final String mFileName;\n+\n+    public FileLogger(@NonNull final String filename) {\n+        mFileName = filename;\n+    }\n+\n+    @Override\n+    public void e(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.ERROR, tag, message, null);\n+    }\n+\n+    @Override\n+    public void e(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.ERROR, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void w(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.WARN, tag, message, null);\n+    }\n+\n+    @Override\n+    public void w(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.WARN, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void i(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.INFO, tag, message, null);\n+    }\n+\n+    @Override\n+    public void i(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.INFO, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void v(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.VERBOSE, tag, message, null);\n+    }\n+\n+    @Override\n+    public void v(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.VERBOSE, tag, message, exception);\n+    }\n+\n+    private void log(LogLevel logLevel, String tag, String message, Throwable throwable) {\n+        final String logMessage = formatMessage(logLevel, tag, message, throwable);\n+        writeLogToFile(logMessage);\n+    }\n+\n+    private void writeLogToFile(final String logMessage) {\n+        try {\n+            final File logFile = getLogFile();\n+            //BufferedWriter for performance, true to set append to file flag\n+            BufferedWriter buf = new BufferedWriter(new FileWriter(logFile, true));\n+            buf.append(logMessage);\n+            buf.newLine();\n+            buf.close();\n+        } catch (IOException e) {\n+            e.printStackTrace();", "originalCommit": "4f33c5030fb2c905cc423d2a5ab206e6a77efd9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczMDE4NA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r530730184", "bodyText": "Added exception logging using Android logcat", "author": "shahzaibj", "createdAt": "2020-11-26T01:56:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkwMDkwOA=="}], "type": "inlineReview", "revised_code": {"commit": "890e79c985cb700fcd2e21833b6fc21420011214", "chunk": "diff --git a/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java b/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileAppender.java\nsimilarity index 70%\nrename from uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java\nrename to uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileAppender.java\nindex c8704a0f3..313d8c6d0 100644\n--- a/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java\n+++ b/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileAppender.java\n\n@@ -29,8 +29,6 @@ import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n import androidx.test.core.app.ApplicationProvider;\n \n-import com.microsoft.identity.client.ui.automation.utils.AdbShellUtils;\n-\n import java.io.BufferedWriter;\n import java.io.File;\n import java.io.FileWriter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkwMjQ2Nw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r529902467", "bodyText": "Can we open this and create our bufferedWriter on construction?", "author": "AdamBJohnsonx", "createdAt": "2020-11-24T21:51:20Z", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java", "diffHunk": "@@ -0,0 +1,154 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.logging;\n+\n+import android.content.Context;\n+import android.util.Log;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.client.ui.automation.utils.AdbShellUtils;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import lombok.EqualsAndHashCode;\n+\n+/**\n+ * An implementation of {@link ILogger} to write logs to a file on desk. The filename must be\n+ * supplied to the FileLogger and the file will be created in the files directory reserved by the OS\n+ * for the calling application. This directory is what is returned by {@link Context#getFilesDir()}.\n+ */\n+@EqualsAndHashCode\n+public class FileLogger implements ILogger {\n+\n+    private static final String DATE_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n+\n+    private final String mFileName;\n+\n+    public FileLogger(@NonNull final String filename) {\n+        mFileName = filename;\n+    }\n+\n+    @Override\n+    public void e(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.ERROR, tag, message, null);\n+    }\n+\n+    @Override\n+    public void e(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.ERROR, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void w(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.WARN, tag, message, null);\n+    }\n+\n+    @Override\n+    public void w(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.WARN, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void i(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.INFO, tag, message, null);\n+    }\n+\n+    @Override\n+    public void i(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.INFO, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void v(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.VERBOSE, tag, message, null);\n+    }\n+\n+    @Override\n+    public void v(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.VERBOSE, tag, message, exception);\n+    }\n+\n+    private void log(LogLevel logLevel, String tag, String message, Throwable throwable) {\n+        final String logMessage = formatMessage(logLevel, tag, message, throwable);\n+        writeLogToFile(logMessage);\n+    }\n+\n+    private void writeLogToFile(final String logMessage) {\n+        try {\n+            final File logFile = getLogFile();\n+            //BufferedWriter for performance, true to set append to file flag\n+            BufferedWriter buf = new BufferedWriter(new FileWriter(logFile, true));\n+            buf.append(logMessage);\n+            buf.newLine();\n+            buf.close();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public File getLogFile() throws IOException {\n+        final Context context = ApplicationProvider.getApplicationContext();\n+        final File directory = context.getFilesDir();\n+        final File logFile = new File(directory, mFileName);", "originalCommit": "4f33c5030fb2c905cc423d2a5ab206e6a77efd9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczMDM2MQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r530730361", "bodyText": "Addressed by Open/Creating file and writer on construction of the appender.", "author": "shahzaibj", "createdAt": "2020-11-26T01:57:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkwMjQ2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "890e79c985cb700fcd2e21833b6fc21420011214", "chunk": "diff --git a/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java b/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileAppender.java\nsimilarity index 70%\nrename from uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java\nrename to uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileAppender.java\nindex c8704a0f3..313d8c6d0 100644\n--- a/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java\n+++ b/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileAppender.java\n\n@@ -29,8 +29,6 @@ import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n import androidx.test.core.app.ApplicationProvider;\n \n-import com.microsoft.identity.client.ui.automation.utils.AdbShellUtils;\n-\n import java.io.BufferedWriter;\n import java.io.File;\n import java.io.FileWriter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkwNTI1NA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r529905254", "bodyText": "Rather than take this as given, can we delegate it to a LogFormat class that we could allow people to supply on contstruction?", "author": "AdamBJohnsonx", "createdAt": "2020-11-24T21:54:01Z", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java", "diffHunk": "@@ -0,0 +1,154 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.logging;\n+\n+import android.content.Context;\n+import android.util.Log;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.client.ui.automation.utils.AdbShellUtils;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import lombok.EqualsAndHashCode;\n+\n+/**\n+ * An implementation of {@link ILogger} to write logs to a file on desk. The filename must be\n+ * supplied to the FileLogger and the file will be created in the files directory reserved by the OS\n+ * for the calling application. This directory is what is returned by {@link Context#getFilesDir()}.\n+ */\n+@EqualsAndHashCode\n+public class FileLogger implements ILogger {\n+\n+    private static final String DATE_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n+\n+    private final String mFileName;\n+\n+    public FileLogger(@NonNull final String filename) {\n+        mFileName = filename;\n+    }\n+\n+    @Override\n+    public void e(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.ERROR, tag, message, null);\n+    }\n+\n+    @Override\n+    public void e(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.ERROR, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void w(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.WARN, tag, message, null);\n+    }\n+\n+    @Override\n+    public void w(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.WARN, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void i(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.INFO, tag, message, null);\n+    }\n+\n+    @Override\n+    public void i(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.INFO, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void v(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.VERBOSE, tag, message, null);\n+    }\n+\n+    @Override\n+    public void v(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.VERBOSE, tag, message, exception);\n+    }\n+\n+    private void log(LogLevel logLevel, String tag, String message, Throwable throwable) {\n+        final String logMessage = formatMessage(logLevel, tag, message, throwable);\n+        writeLogToFile(logMessage);\n+    }\n+\n+    private void writeLogToFile(final String logMessage) {\n+        try {\n+            final File logFile = getLogFile();\n+            //BufferedWriter for performance, true to set append to file flag\n+            BufferedWriter buf = new BufferedWriter(new FileWriter(logFile, true));\n+            buf.append(logMessage);\n+            buf.newLine();\n+            buf.close();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public File getLogFile() throws IOException {\n+        final Context context = ApplicationProvider.getApplicationContext();\n+        final File directory = context.getFilesDir();\n+        final File logFile = new File(directory, mFileName);\n+\n+        if (!logFile.exists()) {\n+            final boolean fileCreated = logFile.createNewFile();\n+            if (!fileCreated) {\n+                throw new IOException(\"Unable to create new log file :(\");\n+            }\n+        }\n+\n+        return logFile;\n+    }\n+\n+    public String getLogFileName() {\n+        return mFileName;\n+    }\n+\n+    private String formatMessage(\n+            @NonNull final LogLevel logLevel,\n+            @NonNull final String tag,\n+            @NonNull final String message,\n+            @Nullable final Throwable throwable) {\n+        final String logMessage = getUTCDateTimeAsString() + \": \" + logLevel.getLabel() + \"/\" + tag\n+                + \": \" + message;", "originalCommit": "4f33c5030fb2c905cc423d2a5ab206e6a77efd9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczMDUzMw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r530730533", "bodyText": "Added an interface for Log Formatter that will be suppled on construction.", "author": "shahzaibj", "createdAt": "2020-11-26T01:58:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkwNTI1NA=="}], "type": "inlineReview", "revised_code": {"commit": "890e79c985cb700fcd2e21833b6fc21420011214", "chunk": "diff --git a/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java b/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileAppender.java\nsimilarity index 70%\nrename from uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java\nrename to uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileAppender.java\nindex c8704a0f3..313d8c6d0 100644\n--- a/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java\n+++ b/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileAppender.java\n\n@@ -29,8 +29,6 @@ import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n import androidx.test.core.app.ApplicationProvider;\n \n-import com.microsoft.identity.client.ui.automation.utils.AdbShellUtils;\n-\n import java.io.BufferedWriter;\n import java.io.File;\n import java.io.FileWriter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkwNTY4Mw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r529905683", "bodyText": "We'll eventually need to put all the exception messaging on a single line, to deal with attacks against the logging stream.  Not as important for test frameworks, but depending on your ambitions here, you may want to consider that.", "author": "AdamBJohnsonx", "createdAt": "2020-11-24T21:54:24Z", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java", "diffHunk": "@@ -0,0 +1,154 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.logging;\n+\n+import android.content.Context;\n+import android.util.Log;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.client.ui.automation.utils.AdbShellUtils;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import lombok.EqualsAndHashCode;\n+\n+/**\n+ * An implementation of {@link ILogger} to write logs to a file on desk. The filename must be\n+ * supplied to the FileLogger and the file will be created in the files directory reserved by the OS\n+ * for the calling application. This directory is what is returned by {@link Context#getFilesDir()}.\n+ */\n+@EqualsAndHashCode\n+public class FileLogger implements ILogger {\n+\n+    private static final String DATE_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n+\n+    private final String mFileName;\n+\n+    public FileLogger(@NonNull final String filename) {\n+        mFileName = filename;\n+    }\n+\n+    @Override\n+    public void e(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.ERROR, tag, message, null);\n+    }\n+\n+    @Override\n+    public void e(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.ERROR, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void w(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.WARN, tag, message, null);\n+    }\n+\n+    @Override\n+    public void w(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.WARN, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void i(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.INFO, tag, message, null);\n+    }\n+\n+    @Override\n+    public void i(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.INFO, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void v(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.VERBOSE, tag, message, null);\n+    }\n+\n+    @Override\n+    public void v(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.VERBOSE, tag, message, exception);\n+    }\n+\n+    private void log(LogLevel logLevel, String tag, String message, Throwable throwable) {\n+        final String logMessage = formatMessage(logLevel, tag, message, throwable);\n+        writeLogToFile(logMessage);\n+    }\n+\n+    private void writeLogToFile(final String logMessage) {\n+        try {\n+            final File logFile = getLogFile();\n+            //BufferedWriter for performance, true to set append to file flag\n+            BufferedWriter buf = new BufferedWriter(new FileWriter(logFile, true));\n+            buf.append(logMessage);\n+            buf.newLine();\n+            buf.close();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public File getLogFile() throws IOException {\n+        final Context context = ApplicationProvider.getApplicationContext();\n+        final File directory = context.getFilesDir();\n+        final File logFile = new File(directory, mFileName);\n+\n+        if (!logFile.exists()) {\n+            final boolean fileCreated = logFile.createNewFile();\n+            if (!fileCreated) {\n+                throw new IOException(\"Unable to create new log file :(\");\n+            }\n+        }\n+\n+        return logFile;\n+    }\n+\n+    public String getLogFileName() {\n+        return mFileName;\n+    }\n+\n+    private String formatMessage(\n+            @NonNull final LogLevel logLevel,\n+            @NonNull final String tag,\n+            @NonNull final String message,\n+            @Nullable final Throwable throwable) {\n+        final String logMessage = getUTCDateTimeAsString() + \": \" + logLevel.getLabel() + \"/\" + tag\n+                + \": \" + message;\n+        return logMessage + (throwable == null ? \"\" : '\\n' + Log.getStackTraceString(throwable));", "originalCommit": "4f33c5030fb2c905cc423d2a5ab206e6a77efd9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczMDkzMA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r530730930", "bodyText": "Leaving as is for now", "author": "shahzaibj", "createdAt": "2020-11-26T01:59:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkwNTY4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "890e79c985cb700fcd2e21833b6fc21420011214", "chunk": "diff --git a/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java b/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileAppender.java\nsimilarity index 70%\nrename from uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java\nrename to uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileAppender.java\nindex c8704a0f3..313d8c6d0 100644\n--- a/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java\n+++ b/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileAppender.java\n\n@@ -29,8 +29,6 @@ import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n import androidx.test.core.app.ApplicationProvider;\n \n-import com.microsoft.identity.client.ui.automation.utils.AdbShellUtils;\n-\n import java.io.BufferedWriter;\n import java.io.File;\n import java.io.FileWriter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk0MjQwNA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r529942404", "bodyText": "Can we, conditionally, on API > 26, use the java.time methods for this rather than SimpleDateFormat?\nSomething like:\n// Alternately, use ISO_INSTANT here.\nreturn DateTimeFormatter .RFC_1123_DATE_TIME.format(Instant.now());", "author": "AdamBJohnsonx", "createdAt": "2020-11-24T22:28:52Z", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java", "diffHunk": "@@ -0,0 +1,154 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.logging;\n+\n+import android.content.Context;\n+import android.util.Log;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.client.ui.automation.utils.AdbShellUtils;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import lombok.EqualsAndHashCode;\n+\n+/**\n+ * An implementation of {@link ILogger} to write logs to a file on desk. The filename must be\n+ * supplied to the FileLogger and the file will be created in the files directory reserved by the OS\n+ * for the calling application. This directory is what is returned by {@link Context#getFilesDir()}.\n+ */\n+@EqualsAndHashCode\n+public class FileLogger implements ILogger {\n+\n+    private static final String DATE_FORMAT = \"yyyy-MM-dd HH:mm:ss\";\n+\n+    private final String mFileName;\n+\n+    public FileLogger(@NonNull final String filename) {\n+        mFileName = filename;\n+    }\n+\n+    @Override\n+    public void e(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.ERROR, tag, message, null);\n+    }\n+\n+    @Override\n+    public void e(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.ERROR, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void w(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.WARN, tag, message, null);\n+    }\n+\n+    @Override\n+    public void w(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.WARN, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void i(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.INFO, tag, message, null);\n+    }\n+\n+    @Override\n+    public void i(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.INFO, tag, message, exception);\n+    }\n+\n+    @Override\n+    public void v(@NonNull String tag, @NonNull String message) {\n+        log(LogLevel.VERBOSE, tag, message, null);\n+    }\n+\n+    @Override\n+    public void v(@NonNull String tag, @NonNull String message, @NonNull Throwable exception) {\n+        log(LogLevel.VERBOSE, tag, message, exception);\n+    }\n+\n+    private void log(LogLevel logLevel, String tag, String message, Throwable throwable) {\n+        final String logMessage = formatMessage(logLevel, tag, message, throwable);\n+        writeLogToFile(logMessage);\n+    }\n+\n+    private void writeLogToFile(final String logMessage) {\n+        try {\n+            final File logFile = getLogFile();\n+            //BufferedWriter for performance, true to set append to file flag\n+            BufferedWriter buf = new BufferedWriter(new FileWriter(logFile, true));\n+            buf.append(logMessage);\n+            buf.newLine();\n+            buf.close();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public File getLogFile() throws IOException {\n+        final Context context = ApplicationProvider.getApplicationContext();\n+        final File directory = context.getFilesDir();\n+        final File logFile = new File(directory, mFileName);\n+\n+        if (!logFile.exists()) {\n+            final boolean fileCreated = logFile.createNewFile();\n+            if (!fileCreated) {\n+                throw new IOException(\"Unable to create new log file :(\");\n+            }\n+        }\n+\n+        return logFile;\n+    }\n+\n+    public String getLogFileName() {\n+        return mFileName;\n+    }\n+\n+    private String formatMessage(\n+            @NonNull final LogLevel logLevel,\n+            @NonNull final String tag,\n+            @NonNull final String message,\n+            @Nullable final Throwable throwable) {\n+        final String logMessage = getUTCDateTimeAsString() + \": \" + logLevel.getLabel() + \"/\" + tag\n+                + \": \" + message;\n+        return logMessage + (throwable == null ? \"\" : '\\n' + Log.getStackTraceString(throwable));\n+    }\n+\n+    private static String getUTCDateTimeAsString() {\n+        final SimpleDateFormat dateFormat = new SimpleDateFormat(DATE_FORMAT, Locale.getDefault());\n+        dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+\n+        return dateFormat.format(new Date());", "originalCommit": "4f33c5030fb2c905cc423d2a5ab206e6a77efd9a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "890e79c985cb700fcd2e21833b6fc21420011214", "chunk": "diff --git a/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java b/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileAppender.java\nsimilarity index 70%\nrename from uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java\nrename to uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileAppender.java\nindex c8704a0f3..313d8c6d0 100644\n--- a/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileLogger.java\n+++ b/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/FileAppender.java\n\n@@ -29,8 +29,6 @@ import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n import androidx.test.core.app.ApplicationProvider;\n \n-import com.microsoft.identity.client.ui.automation.utils.AdbShellUtils;\n-\n import java.io.BufferedWriter;\n import java.io.File;\n import java.io.FileWriter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk1MDc3OQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r529950779", "bodyText": "Anyway, if you adopt my suggestion this becomes an AppenderRegistry instead of a Logger registry.", "author": "AdamBJohnsonx", "createdAt": "2020-11-24T22:36:45Z", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/LoggerRegistry.java", "diffHunk": "@@ -0,0 +1,79 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.logging;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * A registry that holds all the loggers in use by the {@link Logger}.\n+ */\n+public class LoggerRegistry {", "originalCommit": "4f33c5030fb2c905cc423d2a5ab206e6a77efd9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczMTAxNg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r530731016", "bodyText": "Renamed to AppenderRegistry", "author": "shahzaibj", "createdAt": "2020-11-26T01:59:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk1MDc3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "890e79c985cb700fcd2e21833b6fc21420011214", "chunk": "diff --git a/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/LoggerRegistry.java b/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/AppenderRegistry.java\nsimilarity index 66%\nrename from uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/LoggerRegistry.java\nrename to uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/AppenderRegistry.java\nindex 14e8225ac..4145058a5 100644\n--- a/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/LoggerRegistry.java\n+++ b/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/AppenderRegistry.java\n\n@@ -30,35 +30,35 @@ import java.util.Set;\n /**\n  * A registry that holds all the loggers in use by the {@link Logger}.\n  */\n-public class LoggerRegistry {\n+public class AppenderRegistry {\n \n-    private static final LoggerRegistry INSTANCE = new LoggerRegistry();\n+    private static final AppenderRegistry INSTANCE = new AppenderRegistry();\n \n-    private final Set<ILogger> mRegisteredLoggers = new HashSet<>();\n+    private final Set<IAppender> mRegisteredAppenders = new HashSet<>();\n \n-    private LoggerRegistry() {\n+    private AppenderRegistry() {\n     }\n \n-    public static LoggerRegistry getInstance() {\n+    public static AppenderRegistry getInstance() {\n         return INSTANCE;\n     }\n \n     /**\n-     * Register a new logger to be used with {@link Logger}.\n+     * Register a new appender to be used with {@link Logger}.\n      *\n-     * @param logger the logger to register\n+     * @param appender the appender to register\n      */\n-    public void registerLogger(@NonNull final ILogger logger) {\n-        mRegisteredLoggers.add(logger);\n+    public void registerAppender(@NonNull final IAppender appender) {\n+        mRegisteredAppenders.add(appender);\n     }\n \n     /**\n-     * Unregister a logger that was being used with {@link Logger}.\n+     * Unregister a appender that was being used with {@link Logger}.\n      *\n-     * @param logger the logger to unregister\n+     * @param appender the appender to unregister\n      */\n-    public void unregisterLogger(@NonNull final ILogger logger) {\n-        mRegisteredLoggers.remove(logger);\n+    public void unregisterAppender(@NonNull final IAppender appender) {\n+        mRegisteredAppenders.remove(appender);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk1MzA0OQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r529953049", "bodyText": "Here's an opportunity: instead of using static references inline, can we take a per-class instance as a static variable?  That would align us with normal logging anyway.", "author": "AdamBJohnsonx", "createdAt": "2020-11-24T22:38:49Z", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/rules/BrokerSupportRule.java", "diffHunk": "@@ -61,7 +62,7 @@ public Statement apply(final Statement base, final Description description) {\n         return new Statement() {\n             @Override\n             public void evaluate() throws Throwable {\n-                Log.i(TAG, \"Applying rule....\");\n+                Logger.i(TAG, \"Applying rule....\");", "originalCommit": "4f33c5030fb2c905cc423d2a5ab206e6a77efd9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczMTMwMA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r530731300", "bodyText": "As discussed on chat the other day....keeping static references for now....we could do this later in a separate PR if needed.", "author": "shahzaibj", "createdAt": "2020-11-26T02:00:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk1MzA0OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk1NzY5Ng==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r529957696", "bodyText": "If this became a LoggerFactory that generated ILogger instances on a per-tag basis that delegated to all registered appenders (potentially for that tag) you'd have something that looked a lot like log4j and java.util.Logging.", "author": "AdamBJohnsonx", "createdAt": "2020-11-24T22:43:03Z", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/Logger.java", "diffHunk": "@@ -0,0 +1,160 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.logging;\n+\n+import androidx.annotation.NonNull;\n+\n+/**\n+ * An abstract logger to write/send logs. The actual implementation of logger used may differ.\n+ * The logger must be registered with the {@link LoggerRegistry} to use that logging implementation.\n+ */\n+public class Logger {", "originalCommit": "4f33c5030fb2c905cc423d2a5ab206e6a77efd9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczMTQ3MA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r530731470", "bodyText": "As discussed on chat the other day....not moving for factory pattern yet....keeping static references for now....we could do this later in a separate PR if needed.", "author": "shahzaibj", "createdAt": "2020-11-26T02:01:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk1NzY5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "890e79c985cb700fcd2e21833b6fc21420011214", "chunk": "diff --git a/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/Logger.java b/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/Logger.java\nindex 46363abb7..7c989bb0b 100644\n--- a/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/Logger.java\n+++ b/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/Logger.java\n\n@@ -25,15 +25,16 @@ package com.microsoft.identity.client.ui.automation.logging;\n import androidx.annotation.NonNull;\n \n /**\n- * An abstract logger to write/send logs. The actual implementation of logger used may differ.\n- * The logger must be registered with the {@link LoggerRegistry} to use that logging implementation.\n+ * An logger to write/send logs. The logs will be sent to all the registered appenders.\n+ * See {@link IAppender}. The appender must be registered with the {@link AppenderRegistry} to use\n+ * that logging implementation.\n  */\n public class Logger {\n \n-    private static final LoggerRegistry LOGGER_REGISTRY = LoggerRegistry.getInstance();\n+    private static final AppenderRegistry APPENDER_REGISTRY = AppenderRegistry.getInstance();\n \n-    public static LoggerRegistry getLoggerRegistry() {\n-        return LOGGER_REGISTRY;\n+    public static AppenderRegistry getAppenderRegistry() {\n+        return APPENDER_REGISTRY;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk2MTE0Ng==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r529961146", "bodyText": "Nit:\nreturn Arrays.asList(new BrokerCompanyPortal(), new BrokerMicrosoftAuthenticator(), new BrokerHost());", "author": "AdamBJohnsonx", "createdAt": "2020-11-24T22:46:21Z", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/utils/CommonUtils.java", "diffHunk": "@@ -123,11 +127,34 @@ public static boolean isPackageInstalled(@NonNull final String packageName) {\n         return false;\n     }\n \n+    /**\n+     * Get a list of all brokers supported by our MSAL/ADAL sdks. These list contains all possible\n+     * broker apps regardless of active build variant.\n+     *\n+     * @return a {@link List} of {@link ITestBroker} objects\n+     */\n     public static List<ITestBroker> getAllPossibleTestBrokers() {\n         final List<ITestBroker> brokerList = new ArrayList<>();\n         brokerList.add(new BrokerCompanyPortal());\n         brokerList.add(new BrokerMicrosoftAuthenticator());\n         brokerList.add(new BrokerHost());\n         return brokerList;", "originalCommit": "4f33c5030fb2c905cc423d2a5ab206e6a77efd9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk2MjE5Ng==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r529962196", "bodyText": "(it might need help to understand the type of the array, in which case new ITestBroker[]{...})", "author": "AdamBJohnsonx", "createdAt": "2020-11-24T22:47:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk2MTE0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyODk1Mg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r530728952", "bodyText": "Addressed", "author": "shahzaibj", "createdAt": "2020-11-26T01:52:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk2MTE0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "434b41f2dfe7211bd4174ed0be007b194ded1f49", "chunk": "diff --git a/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/utils/CommonUtils.java b/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/utils/CommonUtils.java\nindex f15811de9..1da56b3a1 100644\n--- a/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/utils/CommonUtils.java\n+++ b/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/utils/CommonUtils.java\n\n@@ -134,11 +134,13 @@ public class CommonUtils {\n      * @return a {@link List} of {@link ITestBroker} objects\n      */\n     public static List<ITestBroker> getAllPossibleTestBrokers() {\n-        final List<ITestBroker> brokerList = new ArrayList<>();\n-        brokerList.add(new BrokerCompanyPortal());\n-        brokerList.add(new BrokerMicrosoftAuthenticator());\n-        brokerList.add(new BrokerHost());\n-        return brokerList;\n+        return Arrays.asList(\n+                new ITestBroker[]{\n+                        new BrokerCompanyPortal(),\n+                        new BrokerMicrosoftAuthenticator(),\n+                        new BrokerHost()\n+                }\n+        );\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk2NDY0MA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r529964640", "bodyText": "You may want to check for existence, or use -p to tolerate it if it's already there.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    executeShellCommand(\"mkdir /sdcard/automation\");\n          \n          \n            \n                    executeShellCommand(\"mkdir -p /sdcard/automation\");", "author": "AdamBJohnsonx", "createdAt": "2020-11-24T22:49:44Z", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/utils/AdbShellUtils.java", "diffHunk": "@@ -150,4 +163,9 @@ public static void copyApkForPackage(@NonNull final String packageName,\n     public static void copyFile(@NonNull final String srcFile, @NonNull final String destFile) {\n         executeShellCommand(\"cp \" + srcFile + \" \" + destFile);\n     }\n+\n+    public static void copyToSdCard(@NonNull final String srcFile, @NonNull final String destFile) {\n+        executeShellCommand(\"mkdir /sdcard/automation\");", "originalCommit": "4f33c5030fb2c905cc423d2a5ab206e6a77efd9a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDcyODkyNw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r530728927", "bodyText": "Addressed", "author": "shahzaibj", "createdAt": "2020-11-26T01:52:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk2NDY0MA=="}], "type": "inlineReview", "revised_code": {"commit": "4a429744e9750f63c80397b4866a20379dd68873", "chunk": "diff --git a/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/utils/AdbShellUtils.java b/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/utils/AdbShellUtils.java\nindex 6444736a2..634564331 100644\n--- a/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/utils/AdbShellUtils.java\n+++ b/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/utils/AdbShellUtils.java\n\n@@ -163,9 +163,4 @@ public class AdbShellUtils {\n     public static void copyFile(@NonNull final String srcFile, @NonNull final String destFile) {\n         executeShellCommand(\"cp \" + srcFile + \" \" + destFile);\n     }\n-\n-    public static void copyToSdCard(@NonNull final String srcFile, @NonNull final String destFile) {\n-        executeShellCommand(\"mkdir /sdcard/automation\");\n-        executeShellCommandAsCurrentPackage(\"cp \" + srcFile + \" \" + destFile);\n-    }\n }\n"}}, {"oid": "890e79c985cb700fcd2e21833b6fc21420011214", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/890e79c985cb700fcd2e21833b6fc21420011214", "message": "App appenders for logger", "committedDate": "2020-11-25T20:42:44Z", "type": "commit"}, {"oid": "6fdbfef3928a92355dbf39c03d16eecbbc793f02", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/6fdbfef3928a92355dbf39c03d16eecbbc793f02", "message": "Don't open and close file writer every log line. Also catch and log exceptions", "committedDate": "2020-11-25T23:58:04Z", "type": "commit"}, {"oid": "4839bb5c610e705800d0624c4fdfce51a55e56f6", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/4839bb5c610e705800d0624c4fdfce51a55e56f6", "message": "Create separate package for appenders", "committedDate": "2020-11-26T00:01:21Z", "type": "commit"}, {"oid": "e8a547269d611a12e9090d38660e804e05eebdb2", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/e8a547269d611a12e9090d38660e804e05eebdb2", "message": "Rename package for appender", "committedDate": "2020-11-26T00:02:08Z", "type": "commit"}, {"oid": "0715d1755e3b769c5c16f4c94eaeca73f4b8c1b7", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/0715d1755e3b769c5c16f4c94eaeca73f4b8c1b7", "message": "Add log formatter to file appender", "committedDate": "2020-11-26T00:18:40Z", "type": "commit"}, {"oid": "873b6feb40bbf565d6eddc91c0136f0ebadc8e3b", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/873b6feb40bbf565d6eddc91c0136f0ebadc8e3b", "message": "Construct buffered writer on appender construction", "committedDate": "2020-11-26T00:35:59Z", "type": "commit"}, {"oid": "45dcf9af10c1870742490eab72c0311ac9de23f7", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/45dcf9af10c1870742490eab72c0311ac9de23f7", "message": "Add missing licenses", "committedDate": "2020-11-26T00:36:29Z", "type": "commit"}, {"oid": "5ba0acab1c968ea19e69fb029d36324ef705c628", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/5ba0acab1c968ea19e69fb029d36324ef705c628", "message": "Add javadoc to formatter", "committedDate": "2020-11-26T00:38:37Z", "type": "commit"}, {"oid": "f25edf1d002a6472a729df2c8a7cd0b4971f5537", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/f25edf1d002a6472a729df2c8a7cd0b4971f5537", "message": "Add javadoc to file appender", "committedDate": "2020-11-26T00:44:16Z", "type": "commit"}, {"oid": "fa702c10345311eeaf217e0727e2fb51ae871eaf", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/fa702c10345311eeaf217e0727e2fb51ae871eaf", "message": "Fix javadoc in AppenderRegistry", "committedDate": "2020-11-26T00:44:49Z", "type": "commit"}, {"oid": "b651eafe1f38d26915c0161d24019735a88169fa", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/b651eafe1f38d26915c0161d24019735a88169fa", "message": "Add appender for writing logs to console", "committedDate": "2020-11-26T00:51:23Z", "type": "commit"}, {"oid": "434b41f2dfe7211bd4174ed0be007b194ded1f49", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/434b41f2dfe7211bd4174ed0be007b194ded1f49", "message": "Address comments", "committedDate": "2020-11-26T01:51:58Z", "type": "commit"}, {"oid": "59c760671c440684f04561d6a520fd0bf9c03a27", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/59c760671c440684f04561d6a520fd0bf9c03a27", "message": "Fix one log line", "committedDate": "2020-11-26T02:04:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczMjIzNg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r530732236", "bodyText": "nit: since this is a set, and our primary use case is iterating it, a LinkedHashSet will be slightly more efficient.", "author": "AdamBJohnsonx", "createdAt": "2020-11-26T02:04:30Z", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/appender/AppenderRegistry.java", "diffHunk": "@@ -0,0 +1,81 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.logging.appender;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.ui.automation.logging.Logger;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * A registry that holds all the loggers in use by the {@link Logger}.\n+ */\n+public class AppenderRegistry {\n+\n+    private static final AppenderRegistry INSTANCE = new AppenderRegistry();\n+\n+    private final Set<IAppender> mRegisteredAppenders = new HashSet<>();", "originalCommit": "434b41f2dfe7211bd4174ed0be007b194ded1f49", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEwMDgxMw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r532100813", "bodyText": "Addressed", "author": "shahzaibj", "createdAt": "2020-11-28T20:04:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczMjIzNg=="}], "type": "inlineReview", "revised_code": {"commit": "193c712bd9093ecb4616141cacb1224a96431a66", "chunk": "diff --git a/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/appender/AppenderRegistry.java b/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/appender/AppenderRegistry.java\nindex 43e2520a0..4c1c7f34b 100644\n--- a/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/appender/AppenderRegistry.java\n+++ b/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/appender/AppenderRegistry.java\n\n@@ -27,6 +27,7 @@ import androidx.annotation.NonNull;\n import com.microsoft.identity.client.ui.automation.logging.Logger;\n \n import java.util.HashSet;\n+import java.util.LinkedHashSet;\n import java.util.Set;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczMjkwOQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r530732909", "bodyText": "nit: an AbstractAppender might be overkill, but would simplify these classes further.", "author": "AdamBJohnsonx", "createdAt": "2020-11-26T02:07:07Z", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/appender/ConsoleAppender.java", "diffHunk": "@@ -0,0 +1,44 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.logging.appender;\n+\n+import com.microsoft.identity.client.ui.automation.logging.LogLevel;\n+import com.microsoft.identity.client.ui.automation.logging.formatter.ILogFormatter;\n+\n+/**\n+ * An implementation of {@link IAppender} to send logs to Console (Standard Output).\n+ */\n+public class ConsoleAppender implements IAppender {", "originalCommit": "434b41f2dfe7211bd4174ed0be007b194ded1f49", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEwMDgxNQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r532100815", "bodyText": "Addressed", "author": "shahzaibj", "createdAt": "2020-11-28T20:05:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczMjkwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "27117de753f1bb0ad2023c5bfff492423c078885", "chunk": "diff --git a/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/appender/ConsoleAppender.java b/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/appender/ConsoleAppender.java\nindex 2907d4b4a..b9c3b357c 100644\n--- a/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/appender/ConsoleAppender.java\n+++ b/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/appender/ConsoleAppender.java\n\n@@ -22,23 +22,19 @@\n //  THE SOFTWARE.\n package com.microsoft.identity.client.ui.automation.logging.appender;\n \n-import com.microsoft.identity.client.ui.automation.logging.LogLevel;\n import com.microsoft.identity.client.ui.automation.logging.formatter.ILogFormatter;\n \n /**\n  * An implementation of {@link IAppender} to send logs to Console (Standard Output).\n  */\n-public class ConsoleAppender implements IAppender {\n-\n-    private final ILogFormatter mLogFormatter;\n+public class ConsoleAppender extends AbstractAppender {\n \n     public ConsoleAppender(final ILogFormatter logFormatter) {\n-        this.mLogFormatter = logFormatter;\n+        super(logFormatter);\n     }\n \n     @Override\n-    public void append(final LogLevel logLevel, final String tag, final String message, final Throwable throwable) {\n-        final String logMessage = mLogFormatter.format(logLevel, tag, message, throwable);\n-        System.out.println(logMessage);\n+    public void append(final String message) {\n+        System.out.println(message);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczNDQ1OQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r530734459", "bodyText": "Just a thought - you might want to flush this writer every line.", "author": "AdamBJohnsonx", "createdAt": "2020-11-26T02:13:19Z", "path": "uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/appender/FileAppender.java", "diffHunk": "@@ -0,0 +1,131 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.client.ui.automation.logging.appender;\n+\n+import android.content.Context;\n+import android.util.Log;\n+\n+import androidx.annotation.NonNull;\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.client.ui.automation.logging.LogLevel;\n+import com.microsoft.identity.client.ui.automation.logging.formatter.ILogFormatter;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+\n+/**\n+ * An implementation of {@link IAppender} to write logs to a file on desk. The filename must be\n+ * supplied to the FileLogger and the file will be created in the files directory reserved by the OS\n+ * for the calling application. This directory is what is returned by {@link Context#getFilesDir()}.\n+ */\n+public class FileAppender implements IAppender {\n+\n+    private static final String TAG = FileAppender.class.getSimpleName();\n+\n+    private final String mFileName;\n+    private final File mLogFile;\n+    private final BufferedWriter mBufferedWriter;\n+    private final ILogFormatter mLogFormatter;\n+\n+    /**\n+     * Constructor for create a new File Appender object. This file appender will write logs to a\n+     * log file with the name that is supplied via this constructor. It will throw an\n+     * {@link IOException} if an error occurs while trying to create and open the log file.\n+     *\n+     * @param filename     the filename to use while creating log file\n+     * @param logFormatter the log formatter to use while writing logs to file\n+     * @throws IOException an exception that is thrown if an error occurs while creating log file\n+     */\n+    public FileAppender(@NonNull final String filename, @NonNull final ILogFormatter logFormatter) throws IOException {\n+        mFileName = filename;\n+        mLogFile = createLogFile(filename);\n+        mBufferedWriter = new BufferedWriter(new FileWriter(mLogFile, true));\n+        mLogFormatter = logFormatter;\n+    }\n+\n+    @Override\n+    public void append(LogLevel logLevel, String tag, String message, Throwable throwable) {\n+        final String logMessage = mLogFormatter.format(logLevel, tag, message, throwable);\n+        try {\n+            writeUsingBufferedWriter(logMessage);\n+        } catch (final IOException e) {\n+            Log.e(TAG, \"Error while trying to write log to file.\", e);\n+        }\n+    }\n+\n+    private void writeUsingBufferedWriter(final String message) throws IOException {\n+        mBufferedWriter.append(message);\n+        mBufferedWriter.newLine();", "originalCommit": "59c760671c440684f04561d6a520fd0bf9c03a27", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjEwMDgzMA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1138#discussion_r532100830", "bodyText": "Addressed", "author": "shahzaibj", "createdAt": "2020-11-28T20:05:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDczNDQ1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "27117de753f1bb0ad2023c5bfff492423c078885", "chunk": "diff --git a/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/appender/FileAppender.java b/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/appender/FileAppender.java\nindex b99bae22f..644c669e2 100644\n--- a/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/appender/FileAppender.java\n+++ b/uiautomationutilities/src/main/java/com/microsoft/identity/client/ui/automation/logging/appender/FileAppender.java\n\n@@ -28,7 +28,6 @@ import android.util.Log;\n import androidx.annotation.NonNull;\n import androidx.test.core.app.ApplicationProvider;\n \n-import com.microsoft.identity.client.ui.automation.logging.LogLevel;\n import com.microsoft.identity.client.ui.automation.logging.formatter.ILogFormatter;\n \n import java.io.BufferedWriter;\n"}}, {"oid": "d8ee4373767bdd4197b06ac46c97895a827f17e9", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/d8ee4373767bdd4197b06ac46c97895a827f17e9", "message": "Merge branch 'dev' into shahzaibj/automation-logging", "committedDate": "2020-11-26T18:39:56Z", "type": "commit"}, {"oid": "193c712bd9093ecb4616141cacb1224a96431a66", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/193c712bd9093ecb4616141cacb1224a96431a66", "message": "Use linked hash set for appender registry", "committedDate": "2020-11-26T18:46:17Z", "type": "commit"}, {"oid": "27117de753f1bb0ad2023c5bfff492423c078885", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/27117de753f1bb0ad2023c5bfff492423c078885", "message": "Add abstract appender that uses formatter", "committedDate": "2020-11-26T19:04:12Z", "type": "commit"}, {"oid": "c50bc3086307314122754d746ec7b6b618f495c9", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/c50bc3086307314122754d746ec7b6b618f495c9", "message": "Flush log file writer every line", "committedDate": "2020-11-26T19:36:30Z", "type": "commit"}, {"oid": "4a429744e9750f63c80397b4866a20379dd68873", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/4a429744e9750f63c80397b4866a20379dd68873", "message": "Remove unused method", "committedDate": "2020-11-28T20:15:14Z", "type": "commit"}]}