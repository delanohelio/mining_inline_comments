{"pr_number": 1093, "pr_title": "[IPC part 4] test cases for IPC strategies.", "pr_createdAt": "2020-10-26T01:18:30Z", "pr_url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI0NTI1Ng==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512245256", "bodyText": "If this is going to be communicated, let's make it a String, so we aren't sharing any types that aren't constructible from the base platform.  Basically, that means any primitive, packaged (String, Integer, Map, List, Set...) or combination of only that.  And in this mechanism, we should specify what kinds of commands COULD be supported, so it might need to be a richer structure than just String, so that we can teach our clients how to respond to a failed attempt.", "author": "AdamBJohnsonx", "createdAt": "2020-10-26T20:24:19Z", "path": "common/src/main/java/com/microsoft/identity/common/exception/BrokerCommunicationException.java", "diffHunk": "@@ -23,19 +23,32 @@\n \n package com.microsoft.identity.common.exception;\n \n+import lombok.Getter;\n+\n /**\n  * An exception that represents an error where MSAL cannot reach Broker (i.e. through Bind Service or AccountManager).\n  */\n public class BrokerCommunicationException extends BaseException {\n     private static final long serialVersionUID = 4959278068787428329L;\n \n+    public enum Type {\n+        OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE,\n+        OPERATION_NOT_SUPPORTED_ON_SERVER_SIDE,\n+        CONNECTION_ERROR\n+    }", "originalCommit": "e445dae9a949cd0deb5acba63030ed790ed36558", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5NTg5OA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512395898", "bodyText": "We're not communicating this to the other side of IPC. This is more or less to limit the scope of, and categorize the error code for BrokerCommunicationException.", "author": "rpdome", "createdAt": "2020-10-27T03:31:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI0NTI1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQwMTA3Mw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512401073", "bodyText": "Added \"StrategyType\" into BrokerCommunicationException's argument list (so that it prints more details into the log).", "author": "rpdome", "createdAt": "2020-10-27T03:52:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI0NTI1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "25e4b9939d3f17a7569ee22600d0c7f47ed6b23a", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/exception/BrokerCommunicationException.java b/common/src/main/java/com/microsoft/identity/common/exception/BrokerCommunicationException.java\nindex f5b8d67fd..738f70e3c 100644\n--- a/common/src/main/java/com/microsoft/identity/common/exception/BrokerCommunicationException.java\n+++ b/common/src/main/java/com/microsoft/identity/common/exception/BrokerCommunicationException.java\n\n@@ -23,6 +23,10 @@\n \n package com.microsoft.identity.common.exception;\n \n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+\n import lombok.Getter;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI1MTI0Nw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512251247", "bodyText": "You don't need to check both, you know that they're equal...", "author": "AdamBJohnsonx", "createdAt": "2020-10-26T20:35:20Z", "path": "common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java", "diffHunk": "@@ -0,0 +1,178 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.ipc;\n+\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.CONNECTION_ERROR;\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.BROKER_GET_KEY_FROM_INACTIVE_BROKER;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_ACQUIRE_TOKEN_SILENT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_ACCOUNTS;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_DEVICE_MODE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_HELLO;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_REMOVE_ACCOUNT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_SIGN_OUT_FROM_SHARED_DEVICE;\n+\n+/**\n+ * IMPORTANT: This class must cover EVERY {@link com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation}.\n+ */\n+public abstract class IpcStrategyTests {\n+\n+    abstract IIpcStrategy getStrategy();\n+\n+    @Test\n+    public void testMsalHello() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_HELLO));\n+    }\n+\n+    @Test\n+    public void testMsalGetIntentForInteractiveRequest() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST));\n+    }\n+\n+    @Test\n+    public void testMsalAcquireTokenSilent() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_ACQUIRE_TOKEN_SILENT));\n+    }\n+\n+    @Test\n+    public void testMsalGetAccounts() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_ACCOUNTS));\n+    }\n+\n+    @Test\n+    public void testMsalRemoveAccounts() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_REMOVE_ACCOUNT));\n+    }\n+\n+    @Test\n+    public void testMsalGetDeviceMode() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_DEVICE_MODE));\n+    }\n+\n+    @Test\n+    public void testGetCurrentAccountInSharedDevice() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE));\n+    }\n+\n+    @Test\n+    public void testMsalSignOutFromSharedDevice() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_SIGN_OUT_FROM_SHARED_DEVICE));\n+    }\n+\n+    @Test\n+    public void testBrokerGetKeyFromInactiveBroker() {\n+        testOperationNotSupportedOnClientSide(getMockRequestBundle(BROKER_GET_KEY_FROM_INACTIVE_BROKER));\n+    }\n+\n+    @Test\n+    public void testIpcFailed() {\n+        testIpcConnectionFailed(getMockRequestBundle(MSAL_HELLO));\n+    }\n+\n+    protected BrokerOperationBundle getMockRequestBundle(final BrokerOperationBundle.Operation operation) {\n+        final Bundle bundle = new Bundle();\n+        bundle.putBoolean(\"REQUEST_BUNDLE\", true);\n+\n+        return new BrokerOperationBundle(operation, \"MOCK_BROKER\", bundle);\n+    }\n+\n+    public static Bundle getMockIpcResultBundle() {\n+        final Bundle bundle = new Bundle();\n+        bundle.putBoolean(\"MOCK_SUCCESS\", true);\n+        return bundle;\n+    }\n+\n+    protected void testOperationSucceeds(@NonNull final BrokerOperationBundle bundle) {\n+        final IIpcStrategy strategy = getStrategy();\n+        try {\n+            final Bundle resultBundle = strategy.communicateToBroker(bundle);\n+            Assert.assertTrue(validateResultBundle(resultBundle, getMockIpcResultBundle()));\n+        } catch (BaseException e) {\n+            Assert.fail(\"Exception is not expected.\");\n+        }\n+    }\n+\n+    protected void testOperationNotSupportedOnClientSide(@NonNull final BrokerOperationBundle bundle) {\n+        final IIpcStrategy strategy = getStrategy();\n+        try {\n+            strategy.communicateToBroker(bundle);\n+            Assert.fail(\"Operation should fail.\");\n+        } catch (BaseException e) {\n+            Assert.assertTrue(e instanceof BrokerCommunicationException);\n+            Assert.assertSame(((BrokerCommunicationException) e).getType(), OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE);\n+        }\n+    }\n+\n+    protected void testIpcConnectionFailed(@NonNull final BrokerOperationBundle bundle) {\n+        final IIpcStrategy strategy = getStrategy();\n+        try {\n+            strategy.communicateToBroker(bundle);\n+            Assert.fail(\"Operation should fail.\");\n+        } catch (BaseException e) {\n+            Assert.assertTrue(e instanceof BrokerCommunicationException);\n+            Assert.assertSame(((BrokerCommunicationException) e).getType(), CONNECTION_ERROR);\n+        }\n+    }\n+\n+    private boolean validateResultBundle(@NonNull final Bundle resultBundle,\n+                                         @NonNull final Bundle expectedBundle) {\n+\n+        if (resultBundle.size() != expectedBundle.size()) {\n+            return false;\n+        }\n+\n+        for (final String key : resultBundle.keySet()) {\n+            final Object objA = expectedBundle.get(key);\n+            if (objA == null) {\n+                return false;\n+            }\n+\n+            final Object objB = resultBundle.get(key);\n+            if (!objA.getClass().equals(objB.getClass())) {\n+                return false;\n+            }\n+\n+            if (objA instanceof Bundle && objB instanceof Bundle) {", "originalCommit": "e445dae9a949cd0deb5acba63030ed790ed36558", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "25e4b9939d3f17a7569ee22600d0c7f47ed6b23a", "chunk": "diff --git a/common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java b/common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java\nindex 20a6fc7f2..6758f132b 100644\n--- a/common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java\n+++ b/common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java\n\n@@ -22,6 +22,7 @@\n //  THE SOFTWARE.\n package com.microsoft.identity.common.internal.ipc;\n \n+import android.os.BaseBundle;\n import android.os.Bundle;\n \n import androidx.annotation.NonNull;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI1MjQ3OA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512252478", "bodyText": "what if objB is null?", "author": "AdamBJohnsonx", "createdAt": "2020-10-26T20:37:18Z", "path": "common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java", "diffHunk": "@@ -0,0 +1,178 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.ipc;\n+\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.CONNECTION_ERROR;\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.BROKER_GET_KEY_FROM_INACTIVE_BROKER;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_ACQUIRE_TOKEN_SILENT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_ACCOUNTS;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_DEVICE_MODE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_HELLO;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_REMOVE_ACCOUNT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_SIGN_OUT_FROM_SHARED_DEVICE;\n+\n+/**\n+ * IMPORTANT: This class must cover EVERY {@link com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation}.\n+ */\n+public abstract class IpcStrategyTests {\n+\n+    abstract IIpcStrategy getStrategy();\n+\n+    @Test\n+    public void testMsalHello() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_HELLO));\n+    }\n+\n+    @Test\n+    public void testMsalGetIntentForInteractiveRequest() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST));\n+    }\n+\n+    @Test\n+    public void testMsalAcquireTokenSilent() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_ACQUIRE_TOKEN_SILENT));\n+    }\n+\n+    @Test\n+    public void testMsalGetAccounts() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_ACCOUNTS));\n+    }\n+\n+    @Test\n+    public void testMsalRemoveAccounts() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_REMOVE_ACCOUNT));\n+    }\n+\n+    @Test\n+    public void testMsalGetDeviceMode() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_DEVICE_MODE));\n+    }\n+\n+    @Test\n+    public void testGetCurrentAccountInSharedDevice() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE));\n+    }\n+\n+    @Test\n+    public void testMsalSignOutFromSharedDevice() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_SIGN_OUT_FROM_SHARED_DEVICE));\n+    }\n+\n+    @Test\n+    public void testBrokerGetKeyFromInactiveBroker() {\n+        testOperationNotSupportedOnClientSide(getMockRequestBundle(BROKER_GET_KEY_FROM_INACTIVE_BROKER));\n+    }\n+\n+    @Test\n+    public void testIpcFailed() {\n+        testIpcConnectionFailed(getMockRequestBundle(MSAL_HELLO));\n+    }\n+\n+    protected BrokerOperationBundle getMockRequestBundle(final BrokerOperationBundle.Operation operation) {\n+        final Bundle bundle = new Bundle();\n+        bundle.putBoolean(\"REQUEST_BUNDLE\", true);\n+\n+        return new BrokerOperationBundle(operation, \"MOCK_BROKER\", bundle);\n+    }\n+\n+    public static Bundle getMockIpcResultBundle() {\n+        final Bundle bundle = new Bundle();\n+        bundle.putBoolean(\"MOCK_SUCCESS\", true);\n+        return bundle;\n+    }\n+\n+    protected void testOperationSucceeds(@NonNull final BrokerOperationBundle bundle) {\n+        final IIpcStrategy strategy = getStrategy();\n+        try {\n+            final Bundle resultBundle = strategy.communicateToBroker(bundle);\n+            Assert.assertTrue(validateResultBundle(resultBundle, getMockIpcResultBundle()));\n+        } catch (BaseException e) {\n+            Assert.fail(\"Exception is not expected.\");\n+        }\n+    }\n+\n+    protected void testOperationNotSupportedOnClientSide(@NonNull final BrokerOperationBundle bundle) {\n+        final IIpcStrategy strategy = getStrategy();\n+        try {\n+            strategy.communicateToBroker(bundle);\n+            Assert.fail(\"Operation should fail.\");\n+        } catch (BaseException e) {\n+            Assert.assertTrue(e instanceof BrokerCommunicationException);\n+            Assert.assertSame(((BrokerCommunicationException) e).getType(), OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE);\n+        }\n+    }\n+\n+    protected void testIpcConnectionFailed(@NonNull final BrokerOperationBundle bundle) {\n+        final IIpcStrategy strategy = getStrategy();\n+        try {\n+            strategy.communicateToBroker(bundle);\n+            Assert.fail(\"Operation should fail.\");\n+        } catch (BaseException e) {\n+            Assert.assertTrue(e instanceof BrokerCommunicationException);\n+            Assert.assertSame(((BrokerCommunicationException) e).getType(), CONNECTION_ERROR);\n+        }\n+    }\n+\n+    private boolean validateResultBundle(@NonNull final Bundle resultBundle,\n+                                         @NonNull final Bundle expectedBundle) {\n+\n+        if (resultBundle.size() != expectedBundle.size()) {\n+            return false;\n+        }\n+\n+        for (final String key : resultBundle.keySet()) {\n+            final Object objA = expectedBundle.get(key);\n+            if (objA == null) {\n+                return false;\n+            }\n+\n+            final Object objB = resultBundle.get(key);", "originalCommit": "e445dae9a949cd0deb5acba63030ed790ed36558", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "25e4b9939d3f17a7569ee22600d0c7f47ed6b23a", "chunk": "diff --git a/common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java b/common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java\nindex 20a6fc7f2..6758f132b 100644\n--- a/common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java\n+++ b/common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java\n\n@@ -22,6 +22,7 @@\n //  THE SOFTWARE.\n package com.microsoft.identity.common.internal.ipc;\n \n+import android.os.BaseBundle;\n import android.os.Bundle;\n \n import androidx.annotation.NonNull;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI1NDQ3Nw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512254477", "bodyText": "OnjectUtils.equals...", "author": "AdamBJohnsonx", "createdAt": "2020-10-26T20:41:00Z", "path": "common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java", "diffHunk": "@@ -0,0 +1,178 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.ipc;\n+\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.CONNECTION_ERROR;\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.BROKER_GET_KEY_FROM_INACTIVE_BROKER;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_ACQUIRE_TOKEN_SILENT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_ACCOUNTS;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_DEVICE_MODE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_HELLO;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_REMOVE_ACCOUNT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_SIGN_OUT_FROM_SHARED_DEVICE;\n+\n+/**\n+ * IMPORTANT: This class must cover EVERY {@link com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation}.\n+ */\n+public abstract class IpcStrategyTests {\n+\n+    abstract IIpcStrategy getStrategy();\n+\n+    @Test\n+    public void testMsalHello() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_HELLO));\n+    }\n+\n+    @Test\n+    public void testMsalGetIntentForInteractiveRequest() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST));\n+    }\n+\n+    @Test\n+    public void testMsalAcquireTokenSilent() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_ACQUIRE_TOKEN_SILENT));\n+    }\n+\n+    @Test\n+    public void testMsalGetAccounts() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_ACCOUNTS));\n+    }\n+\n+    @Test\n+    public void testMsalRemoveAccounts() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_REMOVE_ACCOUNT));\n+    }\n+\n+    @Test\n+    public void testMsalGetDeviceMode() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_DEVICE_MODE));\n+    }\n+\n+    @Test\n+    public void testGetCurrentAccountInSharedDevice() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE));\n+    }\n+\n+    @Test\n+    public void testMsalSignOutFromSharedDevice() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_SIGN_OUT_FROM_SHARED_DEVICE));\n+    }\n+\n+    @Test\n+    public void testBrokerGetKeyFromInactiveBroker() {\n+        testOperationNotSupportedOnClientSide(getMockRequestBundle(BROKER_GET_KEY_FROM_INACTIVE_BROKER));\n+    }\n+\n+    @Test\n+    public void testIpcFailed() {\n+        testIpcConnectionFailed(getMockRequestBundle(MSAL_HELLO));\n+    }\n+\n+    protected BrokerOperationBundle getMockRequestBundle(final BrokerOperationBundle.Operation operation) {\n+        final Bundle bundle = new Bundle();\n+        bundle.putBoolean(\"REQUEST_BUNDLE\", true);\n+\n+        return new BrokerOperationBundle(operation, \"MOCK_BROKER\", bundle);\n+    }\n+\n+    public static Bundle getMockIpcResultBundle() {\n+        final Bundle bundle = new Bundle();\n+        bundle.putBoolean(\"MOCK_SUCCESS\", true);\n+        return bundle;\n+    }\n+\n+    protected void testOperationSucceeds(@NonNull final BrokerOperationBundle bundle) {\n+        final IIpcStrategy strategy = getStrategy();\n+        try {\n+            final Bundle resultBundle = strategy.communicateToBroker(bundle);\n+            Assert.assertTrue(validateResultBundle(resultBundle, getMockIpcResultBundle()));\n+        } catch (BaseException e) {\n+            Assert.fail(\"Exception is not expected.\");\n+        }\n+    }\n+\n+    protected void testOperationNotSupportedOnClientSide(@NonNull final BrokerOperationBundle bundle) {\n+        final IIpcStrategy strategy = getStrategy();\n+        try {\n+            strategy.communicateToBroker(bundle);\n+            Assert.fail(\"Operation should fail.\");\n+        } catch (BaseException e) {\n+            Assert.assertTrue(e instanceof BrokerCommunicationException);\n+            Assert.assertSame(((BrokerCommunicationException) e).getType(), OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE);\n+        }\n+    }\n+\n+    protected void testIpcConnectionFailed(@NonNull final BrokerOperationBundle bundle) {\n+        final IIpcStrategy strategy = getStrategy();\n+        try {\n+            strategy.communicateToBroker(bundle);\n+            Assert.fail(\"Operation should fail.\");\n+        } catch (BaseException e) {\n+            Assert.assertTrue(e instanceof BrokerCommunicationException);\n+            Assert.assertSame(((BrokerCommunicationException) e).getType(), CONNECTION_ERROR);\n+        }\n+    }\n+\n+    private boolean validateResultBundle(@NonNull final Bundle resultBundle,\n+                                         @NonNull final Bundle expectedBundle) {\n+\n+        if (resultBundle.size() != expectedBundle.size()) {\n+            return false;\n+        }\n+\n+        for (final String key : resultBundle.keySet()) {\n+            final Object objA = expectedBundle.get(key);\n+            if (objA == null) {\n+                return false;\n+            }\n+\n+            final Object objB = resultBundle.get(key);\n+            if (!objA.getClass().equals(objB.getClass())) {\n+                return false;\n+            }\n+\n+            if (objA instanceof Bundle && objB instanceof Bundle) {\n+                return validateResultBundle((Bundle) objA, (Bundle) objB);\n+            } else if (!objA.equals(objB)) {", "originalCommit": "e445dae9a949cd0deb5acba63030ed790ed36558", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "25e4b9939d3f17a7569ee22600d0c7f47ed6b23a", "chunk": "diff --git a/common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java b/common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java\nindex 20a6fc7f2..6758f132b 100644\n--- a/common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java\n+++ b/common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java\n\n@@ -22,6 +22,7 @@\n //  THE SOFTWARE.\n package com.microsoft.identity.common.internal.ipc;\n \n+import android.os.BaseBundle;\n import android.os.Bundle;\n \n import androidx.annotation.NonNull;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI1NTA0MA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512255040", "bodyText": "Should this go into a BundleUtils.java in testutils in common?", "author": "AdamBJohnsonx", "createdAt": "2020-10-26T20:42:04Z", "path": "common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java", "diffHunk": "@@ -0,0 +1,178 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.ipc;\n+\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.CONNECTION_ERROR;\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.BROKER_GET_KEY_FROM_INACTIVE_BROKER;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_ACQUIRE_TOKEN_SILENT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_ACCOUNTS;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_DEVICE_MODE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_HELLO;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_REMOVE_ACCOUNT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_SIGN_OUT_FROM_SHARED_DEVICE;\n+\n+/**\n+ * IMPORTANT: This class must cover EVERY {@link com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation}.\n+ */\n+public abstract class IpcStrategyTests {\n+\n+    abstract IIpcStrategy getStrategy();\n+\n+    @Test\n+    public void testMsalHello() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_HELLO));\n+    }\n+\n+    @Test\n+    public void testMsalGetIntentForInteractiveRequest() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST));\n+    }\n+\n+    @Test\n+    public void testMsalAcquireTokenSilent() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_ACQUIRE_TOKEN_SILENT));\n+    }\n+\n+    @Test\n+    public void testMsalGetAccounts() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_ACCOUNTS));\n+    }\n+\n+    @Test\n+    public void testMsalRemoveAccounts() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_REMOVE_ACCOUNT));\n+    }\n+\n+    @Test\n+    public void testMsalGetDeviceMode() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_DEVICE_MODE));\n+    }\n+\n+    @Test\n+    public void testGetCurrentAccountInSharedDevice() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE));\n+    }\n+\n+    @Test\n+    public void testMsalSignOutFromSharedDevice() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_SIGN_OUT_FROM_SHARED_DEVICE));\n+    }\n+\n+    @Test\n+    public void testBrokerGetKeyFromInactiveBroker() {\n+        testOperationNotSupportedOnClientSide(getMockRequestBundle(BROKER_GET_KEY_FROM_INACTIVE_BROKER));\n+    }\n+\n+    @Test\n+    public void testIpcFailed() {\n+        testIpcConnectionFailed(getMockRequestBundle(MSAL_HELLO));\n+    }\n+\n+    protected BrokerOperationBundle getMockRequestBundle(final BrokerOperationBundle.Operation operation) {\n+        final Bundle bundle = new Bundle();\n+        bundle.putBoolean(\"REQUEST_BUNDLE\", true);\n+\n+        return new BrokerOperationBundle(operation, \"MOCK_BROKER\", bundle);\n+    }\n+\n+    public static Bundle getMockIpcResultBundle() {\n+        final Bundle bundle = new Bundle();\n+        bundle.putBoolean(\"MOCK_SUCCESS\", true);\n+        return bundle;\n+    }\n+\n+    protected void testOperationSucceeds(@NonNull final BrokerOperationBundle bundle) {\n+        final IIpcStrategy strategy = getStrategy();\n+        try {\n+            final Bundle resultBundle = strategy.communicateToBroker(bundle);\n+            Assert.assertTrue(validateResultBundle(resultBundle, getMockIpcResultBundle()));\n+        } catch (BaseException e) {\n+            Assert.fail(\"Exception is not expected.\");\n+        }\n+    }\n+\n+    protected void testOperationNotSupportedOnClientSide(@NonNull final BrokerOperationBundle bundle) {\n+        final IIpcStrategy strategy = getStrategy();\n+        try {\n+            strategy.communicateToBroker(bundle);\n+            Assert.fail(\"Operation should fail.\");\n+        } catch (BaseException e) {\n+            Assert.assertTrue(e instanceof BrokerCommunicationException);\n+            Assert.assertSame(((BrokerCommunicationException) e).getType(), OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE);\n+        }\n+    }\n+\n+    protected void testIpcConnectionFailed(@NonNull final BrokerOperationBundle bundle) {\n+        final IIpcStrategy strategy = getStrategy();\n+        try {\n+            strategy.communicateToBroker(bundle);\n+            Assert.fail(\"Operation should fail.\");\n+        } catch (BaseException e) {\n+            Assert.assertTrue(e instanceof BrokerCommunicationException);\n+            Assert.assertSame(((BrokerCommunicationException) e).getType(), CONNECTION_ERROR);\n+        }\n+    }\n+\n+    private boolean validateResultBundle(@NonNull final Bundle resultBundle,", "originalCommit": "e445dae9a949cd0deb5acba63030ed790ed36558", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQzODcwMg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512438702", "bodyText": "added testImplementation dependency to testutils and hell break loose.. will do that later.", "author": "rpdome", "createdAt": "2020-10-27T06:15:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI1NTA0MA=="}], "type": "inlineReview", "revised_code": {"commit": "25e4b9939d3f17a7569ee22600d0c7f47ed6b23a", "chunk": "diff --git a/common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java b/common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java\nindex 20a6fc7f2..6758f132b 100644\n--- a/common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java\n+++ b/common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java\n\n@@ -22,6 +22,7 @@\n //  THE SOFTWARE.\n package com.microsoft.identity.common.internal.ipc;\n \n+import android.os.BaseBundle;\n import android.os.Bundle;\n \n import androidx.annotation.NonNull;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI1NzI0Nw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512257247", "bodyText": "Here, can we discover what operations are supported?", "author": "AdamBJohnsonx", "createdAt": "2020-10-26T20:46:10Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/broker/BoundServiceClient.java", "diffHunk": "@@ -127,15 +129,16 @@ public BoundServiceClient(@NonNull final Context context,\n      * @param targetServicePackageName Package name of the app this client will talk to.\n      */\n     protected @NonNull T connect(@NonNull final String targetServicePackageName)\n-            throws ClientException, InterruptedException, TimeoutException, ExecutionException {\n+            throws BrokerCommunicationException, InterruptedException, TimeoutException, ExecutionException {\n         final String methodName = \":connect\";\n \n         if (!isBoundServiceSupported(targetServicePackageName)) {\n             final String errorMessage = \"Bound service is not supported.\";\n             Logger.info(TAG + methodName, errorMessage);\n-            throw new ClientException(\n-                    BOUND_SERVICE_UNAVAILABLE_OR_NOT_SUPPORTED,\n-                    errorMessage);\n+            throw new BrokerCommunicationException(\n+                    OPERATION_NOT_SUPPORTED_ON_SERVER_SIDE,", "originalCommit": "e445dae9a949cd0deb5acba63030ed790ed36558", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5NzY5OA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512397698", "bodyText": "Not at this point. In this layer we're focusing on Bound Service only (and it failed).", "author": "rpdome", "createdAt": "2020-10-27T03:38:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI1NzI0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "25e4b9939d3f17a7569ee22600d0c7f47ed6b23a", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/broker/BoundServiceClient.java b/common/src/main/java/com/microsoft/identity/common/internal/broker/BoundServiceClient.java\nindex 4e302cb02..4b2c4a5af 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/broker/BoundServiceClient.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/broker/BoundServiceClient.java\n\n@@ -137,6 +136,7 @@ public abstract class BoundServiceClient<T extends IInterface> {\n             Logger.info(TAG + methodName, errorMessage);\n             throw new BrokerCommunicationException(\n                     OPERATION_NOT_SUPPORTED_ON_SERVER_SIDE,\n+                    BOUND_SERVICE,\n                     errorMessage,\n                     null);\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI1Nzc2NQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512257765", "bodyText": "This is a strange message.  How would you bind the wrong service?", "author": "AdamBJohnsonx", "createdAt": "2020-10-26T20:47:16Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/broker/BrokerAccountServiceClient.java", "diffHunk": "@@ -82,14 +85,16 @@ public BrokerAccountServiceClient(@NonNull final Context context,\n     @Override\n     public @Nullable Bundle performOperationInternal(@NonNull BrokerOperationBundle brokerOperationBundle,\n                                                      @NonNull IBrokerAccountService brokerAccountService)\n-            throws RemoteException, BaseException {\n+            throws RemoteException, BrokerCommunicationException {\n         final Bundle inputBundle = brokerOperationBundle.getBundle();\n         switch (brokerOperationBundle.getOperation()) {\n             case BROKER_GET_KEY_FROM_INACTIVE_BROKER:\n                 return brokerAccountService.getInactiveBrokerKey(inputBundle);\n \n             default:\n-                throw new BaseException(\"Operation not supported. Wrong service bound.\");\n+                throw new BrokerCommunicationException(OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE,\n+                        \"Operation not supported. Wrong service bound.\",", "originalCommit": "e445dae9a949cd0deb5acba63030ed790ed36558", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5MTUyNQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512391525", "bodyText": "It means you're using the wrong BoundServiceClient. will change to Wrong BoundServiceClient used.", "author": "rpdome", "createdAt": "2020-10-27T03:13:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI1Nzc2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "25e4b9939d3f17a7569ee22600d0c7f47ed6b23a", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/broker/BrokerAccountServiceClient.java b/common/src/main/java/com/microsoft/identity/common/internal/broker/BrokerAccountServiceClient.java\nindex 9108aa56a..7be682c13 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/broker/BrokerAccountServiceClient.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/broker/BrokerAccountServiceClient.java\n\n@@ -92,8 +92,10 @@ public class BrokerAccountServiceClient extends BoundServiceClient<IBrokerAccoun\n                 return brokerAccountService.getInactiveBrokerKey(inputBundle);\n \n             default:\n-                throw new BrokerCommunicationException(OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE,\n-                        \"Operation not supported. Wrong service bound.\",\n+                throw new BrokerCommunicationException(\n+                        OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE,\n+                        BOUND_SERVICE,\n+                        \"Operation not supported. Wrong BoundServiceClient used.\",\n                         null);\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI1ODk4MQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512258981", "bodyText": "Here we want the first one to be executed and the second not to be interacted with at all, right?", "author": "AdamBJohnsonx", "createdAt": "2020-10-26T20:49:27Z", "path": "common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java", "diffHunk": "@@ -0,0 +1,300 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.brokeroperationexecutor;\n+\n+import android.os.Build;\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BrokerOperationExecutor;\n+import com.microsoft.identity.common.internal.telemetry.events.ApiEndEvent;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.CONNECTION_ERROR;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(sdk = {Build.VERSION_CODES.N})\n+public class BrokerOperationExecutorTests {\n+\n+    final String CORRUPTED_BUNDLE_ERROR_CODE = \"corrupted_bundle\";\n+\n+    // No strategy is provided. executor should fail.\n+    @Test\n+    public void testZeroStrategy() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+\n+        expectBindFailureException(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a success.\n+    @Test\n+    public void testOneStrategyWithSuccessResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a success.\n+    @Test\n+    public void testOneStrategyWithFailureResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithFailureResult());\n+\n+        expectSuccessResultWithFalse(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a corrupted result.\n+    @Test\n+    public void testOneStrategyWithCorruptedResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithCorruptedResult());\n+\n+        expectCorruptedBundleException(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it fails with BrokerCommunicationException inside IIpcStrategy.\n+    @Test\n+    public void testOneStrategyWithBrokerCommunicationException() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithBrokerCommunicationException());\n+\n+        expectBindFailureException(strategyList);\n+    }\n+\n+    // Providing 2 strategies and both succeed.", "originalCommit": "e445dae9a949cd0deb5acba63030ed790ed36558", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ0MzAxNw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512443017", "bodyText": "yes. removing this though... I think it's kind of pointless. other test cases should be enough to cover 'strategy order'", "author": "rpdome", "createdAt": "2020-10-27T06:28:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI1ODk4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "25e4b9939d3f17a7569ee22600d0c7f47ed6b23a", "chunk": "diff --git a/common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java b/common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java\nindex 9ab19af66..ef79ea320 100644\n--- a/common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java\n+++ b/common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java\n\n@@ -32,6 +32,8 @@ import com.microsoft.identity.common.exception.BaseException;\n import com.microsoft.identity.common.exception.BrokerCommunicationException;\n import com.microsoft.identity.common.exception.ClientException;\n import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.exception.ServiceException;\n+import com.microsoft.identity.common.exception.UserCancelException;\n import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MDIwOA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512260208", "bodyText": "Should we distinguish \"failure of strategy\" from \"failure to communicate\" and make certain that this just does not execute the second one after the first attempt succeeds with false?", "author": "AdamBJohnsonx", "createdAt": "2020-10-26T20:51:39Z", "path": "common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java", "diffHunk": "@@ -0,0 +1,300 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.brokeroperationexecutor;\n+\n+import android.os.Build;\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BrokerOperationExecutor;\n+import com.microsoft.identity.common.internal.telemetry.events.ApiEndEvent;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.CONNECTION_ERROR;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(sdk = {Build.VERSION_CODES.N})\n+public class BrokerOperationExecutorTests {\n+\n+    final String CORRUPTED_BUNDLE_ERROR_CODE = \"corrupted_bundle\";\n+\n+    // No strategy is provided. executor should fail.\n+    @Test\n+    public void testZeroStrategy() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+\n+        expectBindFailureException(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a success.\n+    @Test\n+    public void testOneStrategyWithSuccessResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a success.\n+    @Test\n+    public void testOneStrategyWithFailureResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithFailureResult());\n+\n+        expectSuccessResultWithFalse(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a corrupted result.\n+    @Test\n+    public void testOneStrategyWithCorruptedResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithCorruptedResult());\n+\n+        expectCorruptedBundleException(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it fails with BrokerCommunicationException inside IIpcStrategy.\n+    @Test\n+    public void testOneStrategyWithBrokerCommunicationException() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithBrokerCommunicationException());\n+\n+        expectBindFailureException(strategyList);\n+    }\n+\n+    // Providing 2 strategies and both succeed.\n+    @Test\n+    public void testTwoSuccessStrategies() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithSuccessResult());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the first one fails with BrokerCommunicationException inside IIpcStrategy.\n+    @Test\n+    public void testTwoStrategiesWithTheFirstOneThrowingBrokerCommunicationException() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithBrokerCommunicationException());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the first one fails.\n+    // NOTE: This should never happen in real life. broker should return the same values regardless of communication strategy.", "originalCommit": "e445dae9a949cd0deb5acba63030ed790ed36558", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQzMDE2Ng==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512430166", "bodyText": "In this test suite, there are 4 possible outcomes.\n\nGets a bundle back, the bundle contains a valid result. The result returns true.\nGets a bundle back, the bundle contains a valid result. The result returns false.\nGets a bundle back, the bundle is invalid. (this is probably what you referred to as 'failure of Strategy')\nFails to get the bundle. (Failure to communicate)\n\nI think I used bad wording here. This test case refers to 2)", "author": "rpdome", "createdAt": "2020-10-27T05:46:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MDIwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQzMDU3Mw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512430573", "bodyText": "Come to think of it, I should just combine 1 and 2. It doesn't really matter in this layer.", "author": "rpdome", "createdAt": "2020-10-27T05:47:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MDIwOA=="}], "type": "inlineReview", "revised_code": {"commit": "25e4b9939d3f17a7569ee22600d0c7f47ed6b23a", "chunk": "diff --git a/common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java b/common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java\nindex 9ab19af66..ef79ea320 100644\n--- a/common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java\n+++ b/common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java\n\n@@ -32,6 +32,8 @@ import com.microsoft.identity.common.exception.BaseException;\n import com.microsoft.identity.common.exception.BrokerCommunicationException;\n import com.microsoft.identity.common.exception.ClientException;\n import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.exception.ServiceException;\n+import com.microsoft.identity.common.exception.UserCancelException;\n import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MDY3Mw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512260673", "bodyText": "This is interesting.  If the result is corrupted, I think we'd want to fall back on the rest of the chain.", "author": "AdamBJohnsonx", "createdAt": "2020-10-26T20:52:25Z", "path": "common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java", "diffHunk": "@@ -0,0 +1,300 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.brokeroperationexecutor;\n+\n+import android.os.Build;\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BrokerOperationExecutor;\n+import com.microsoft.identity.common.internal.telemetry.events.ApiEndEvent;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.CONNECTION_ERROR;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(sdk = {Build.VERSION_CODES.N})\n+public class BrokerOperationExecutorTests {\n+\n+    final String CORRUPTED_BUNDLE_ERROR_CODE = \"corrupted_bundle\";\n+\n+    // No strategy is provided. executor should fail.\n+    @Test\n+    public void testZeroStrategy() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+\n+        expectBindFailureException(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a success.\n+    @Test\n+    public void testOneStrategyWithSuccessResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a success.\n+    @Test\n+    public void testOneStrategyWithFailureResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithFailureResult());\n+\n+        expectSuccessResultWithFalse(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a corrupted result.\n+    @Test\n+    public void testOneStrategyWithCorruptedResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithCorruptedResult());\n+\n+        expectCorruptedBundleException(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it fails with BrokerCommunicationException inside IIpcStrategy.\n+    @Test\n+    public void testOneStrategyWithBrokerCommunicationException() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithBrokerCommunicationException());\n+\n+        expectBindFailureException(strategyList);\n+    }\n+\n+    // Providing 2 strategies and both succeed.\n+    @Test\n+    public void testTwoSuccessStrategies() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithSuccessResult());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the first one fails with BrokerCommunicationException inside IIpcStrategy.\n+    @Test\n+    public void testTwoStrategiesWithTheFirstOneThrowingBrokerCommunicationException() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithBrokerCommunicationException());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the first one fails.\n+    // NOTE: This should never happen in real life. broker should return the same values regardless of communication strategy.\n+    @Test\n+    public void testTwoStrategiesWithTheFirstOneReturningFailureResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithFailureResult());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithFalse(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the first one returns a corrupted result.\n+    // NOTE: This should never happen in real life. broker should return the same values regardless of communication strategy.\n+    @Test\n+    public void testTwoStrategiesWithTheFirstOneReturningCorruptedResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithCorruptedResult());", "originalCommit": "e445dae9a949cd0deb5acba63030ed790ed36558", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQwMTcyMw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512401723", "bodyText": "Corrupted here doesn't mean data loss during a transfer, that, AFAIK, never happens.\nIt means the broker is sending a result bundle with unexpected format, or the data is not properly compressed. The data is 'corrupted' from the source, therefore it doesn't matter which communication channel you use - you'll always get the same result bundle.", "author": "rpdome", "createdAt": "2020-10-27T03:55:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MDY3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "25e4b9939d3f17a7569ee22600d0c7f47ed6b23a", "chunk": "diff --git a/common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java b/common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java\nindex 9ab19af66..ef79ea320 100644\n--- a/common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java\n+++ b/common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java\n\n@@ -32,6 +32,8 @@ import com.microsoft.identity.common.exception.BaseException;\n import com.microsoft.identity.common.exception.BrokerCommunicationException;\n import com.microsoft.identity.common.exception.ClientException;\n import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.exception.ServiceException;\n+import com.microsoft.identity.common.exception.UserCancelException;\n import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MTI2OQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512261269", "bodyText": "In general, if the first one succeeds, the we don't want to run the other one at all, so it shouldn't matter what it does.  All of its methods can throw RuntimeException and it should have no effect, I think.", "author": "AdamBJohnsonx", "createdAt": "2020-10-26T20:53:38Z", "path": "common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java", "diffHunk": "@@ -0,0 +1,300 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.brokeroperationexecutor;\n+\n+import android.os.Build;\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BrokerOperationExecutor;\n+import com.microsoft.identity.common.internal.telemetry.events.ApiEndEvent;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.CONNECTION_ERROR;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(sdk = {Build.VERSION_CODES.N})\n+public class BrokerOperationExecutorTests {\n+\n+    final String CORRUPTED_BUNDLE_ERROR_CODE = \"corrupted_bundle\";\n+\n+    // No strategy is provided. executor should fail.\n+    @Test\n+    public void testZeroStrategy() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+\n+        expectBindFailureException(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a success.\n+    @Test\n+    public void testOneStrategyWithSuccessResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a success.\n+    @Test\n+    public void testOneStrategyWithFailureResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithFailureResult());\n+\n+        expectSuccessResultWithFalse(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a corrupted result.\n+    @Test\n+    public void testOneStrategyWithCorruptedResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithCorruptedResult());\n+\n+        expectCorruptedBundleException(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it fails with BrokerCommunicationException inside IIpcStrategy.\n+    @Test\n+    public void testOneStrategyWithBrokerCommunicationException() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithBrokerCommunicationException());\n+\n+        expectBindFailureException(strategyList);\n+    }\n+\n+    // Providing 2 strategies and both succeed.\n+    @Test\n+    public void testTwoSuccessStrategies() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithSuccessResult());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the first one fails with BrokerCommunicationException inside IIpcStrategy.\n+    @Test\n+    public void testTwoStrategiesWithTheFirstOneThrowingBrokerCommunicationException() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithBrokerCommunicationException());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the first one fails.\n+    // NOTE: This should never happen in real life. broker should return the same values regardless of communication strategy.\n+    @Test\n+    public void testTwoStrategiesWithTheFirstOneReturningFailureResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithFailureResult());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithFalse(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the first one returns a corrupted result.\n+    // NOTE: This should never happen in real life. broker should return the same values regardless of communication strategy.\n+    @Test\n+    public void testTwoStrategiesWithTheFirstOneReturningCorruptedResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithCorruptedResult());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectCorruptedBundleException(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the last one failed with BrokerCommunicationException inside IIpcStrategy.", "originalCommit": "e445dae9a949cd0deb5acba63030ed790ed36558", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQzMTk4Ng==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512431986", "bodyText": "Yep. This test case is to make sure that the order of strategy matters.", "author": "rpdome", "createdAt": "2020-10-27T05:53:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MTI2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "25e4b9939d3f17a7569ee22600d0c7f47ed6b23a", "chunk": "diff --git a/common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java b/common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java\nindex 9ab19af66..ef79ea320 100644\n--- a/common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java\n+++ b/common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java\n\n@@ -32,6 +32,8 @@ import com.microsoft.identity.common.exception.BaseException;\n import com.microsoft.identity.common.exception.BrokerCommunicationException;\n import com.microsoft.identity.common.exception.ClientException;\n import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.exception.ServiceException;\n+import com.microsoft.identity.common.exception.UserCancelException;\n import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MTQxNA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512261414", "bodyText": "Same comment.", "author": "AdamBJohnsonx", "createdAt": "2020-10-26T20:53:54Z", "path": "common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java", "diffHunk": "@@ -0,0 +1,300 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.brokeroperationexecutor;\n+\n+import android.os.Build;\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BrokerOperationExecutor;\n+import com.microsoft.identity.common.internal.telemetry.events.ApiEndEvent;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.CONNECTION_ERROR;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(sdk = {Build.VERSION_CODES.N})\n+public class BrokerOperationExecutorTests {\n+\n+    final String CORRUPTED_BUNDLE_ERROR_CODE = \"corrupted_bundle\";\n+\n+    // No strategy is provided. executor should fail.\n+    @Test\n+    public void testZeroStrategy() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+\n+        expectBindFailureException(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a success.\n+    @Test\n+    public void testOneStrategyWithSuccessResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a success.\n+    @Test\n+    public void testOneStrategyWithFailureResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithFailureResult());\n+\n+        expectSuccessResultWithFalse(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a corrupted result.\n+    @Test\n+    public void testOneStrategyWithCorruptedResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithCorruptedResult());\n+\n+        expectCorruptedBundleException(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it fails with BrokerCommunicationException inside IIpcStrategy.\n+    @Test\n+    public void testOneStrategyWithBrokerCommunicationException() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithBrokerCommunicationException());\n+\n+        expectBindFailureException(strategyList);\n+    }\n+\n+    // Providing 2 strategies and both succeed.\n+    @Test\n+    public void testTwoSuccessStrategies() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithSuccessResult());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the first one fails with BrokerCommunicationException inside IIpcStrategy.\n+    @Test\n+    public void testTwoStrategiesWithTheFirstOneThrowingBrokerCommunicationException() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithBrokerCommunicationException());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the first one fails.\n+    // NOTE: This should never happen in real life. broker should return the same values regardless of communication strategy.\n+    @Test\n+    public void testTwoStrategiesWithTheFirstOneReturningFailureResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithFailureResult());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithFalse(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the first one returns a corrupted result.\n+    // NOTE: This should never happen in real life. broker should return the same values regardless of communication strategy.\n+    @Test\n+    public void testTwoStrategiesWithTheFirstOneReturningCorruptedResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithCorruptedResult());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectCorruptedBundleException(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the last one failed with BrokerCommunicationException inside IIpcStrategy.\n+    @Test\n+    public void testTwoStrategiesWithTheLastOneThrowingBrokerCommunicationException() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithSuccessResult());\n+        strategyList.add(getStrategyWithBrokerCommunicationException());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the last one returns a failure.\n+    // NOTE: This should never happen in real life. broker should return the same values regardless of communication strategy.", "originalCommit": "e445dae9a949cd0deb5acba63030ed790ed36558", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "25e4b9939d3f17a7569ee22600d0c7f47ed6b23a", "chunk": "diff --git a/common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java b/common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java\nindex 9ab19af66..ef79ea320 100644\n--- a/common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java\n+++ b/common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java\n\n@@ -32,6 +32,8 @@ import com.microsoft.identity.common.exception.BaseException;\n import com.microsoft.identity.common.exception.BrokerCommunicationException;\n import com.microsoft.identity.common.exception.ClientException;\n import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.exception.ServiceException;\n+import com.microsoft.identity.common.exception.UserCancelException;\n import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MjE5MQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512262191", "bodyText": "We should have some of these throw other kinds of Exceptions and Error results.", "author": "AdamBJohnsonx", "createdAt": "2020-10-26T20:55:16Z", "path": "common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java", "diffHunk": "@@ -0,0 +1,300 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.brokeroperationexecutor;\n+\n+import android.os.Build;\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BrokerOperationExecutor;\n+import com.microsoft.identity.common.internal.telemetry.events.ApiEndEvent;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.CONNECTION_ERROR;\n+\n+@RunWith(RobolectricTestRunner.class)\n+@Config(sdk = {Build.VERSION_CODES.N})\n+public class BrokerOperationExecutorTests {\n+\n+    final String CORRUPTED_BUNDLE_ERROR_CODE = \"corrupted_bundle\";\n+\n+    // No strategy is provided. executor should fail.\n+    @Test\n+    public void testZeroStrategy() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+\n+        expectBindFailureException(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a success.\n+    @Test\n+    public void testOneStrategyWithSuccessResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a success.\n+    @Test\n+    public void testOneStrategyWithFailureResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithFailureResult());\n+\n+        expectSuccessResultWithFalse(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it returns a corrupted result.\n+    @Test\n+    public void testOneStrategyWithCorruptedResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithCorruptedResult());\n+\n+        expectCorruptedBundleException(strategyList);\n+    }\n+\n+    // Providing 1 strategy and it fails with BrokerCommunicationException inside IIpcStrategy.\n+    @Test\n+    public void testOneStrategyWithBrokerCommunicationException() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithBrokerCommunicationException());\n+\n+        expectBindFailureException(strategyList);\n+    }\n+\n+    // Providing 2 strategies and both succeed.\n+    @Test\n+    public void testTwoSuccessStrategies() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithSuccessResult());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the first one fails with BrokerCommunicationException inside IIpcStrategy.\n+    @Test\n+    public void testTwoStrategiesWithTheFirstOneThrowingBrokerCommunicationException() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithBrokerCommunicationException());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the first one fails.\n+    // NOTE: This should never happen in real life. broker should return the same values regardless of communication strategy.\n+    @Test\n+    public void testTwoStrategiesWithTheFirstOneReturningFailureResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithFailureResult());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectSuccessResultWithFalse(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the first one returns a corrupted result.\n+    // NOTE: This should never happen in real life. broker should return the same values regardless of communication strategy.\n+    @Test\n+    public void testTwoStrategiesWithTheFirstOneReturningCorruptedResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithCorruptedResult());\n+        strategyList.add(getStrategyWithSuccessResult());\n+\n+        expectCorruptedBundleException(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the last one failed with BrokerCommunicationException inside IIpcStrategy.\n+    @Test\n+    public void testTwoStrategiesWithTheLastOneThrowingBrokerCommunicationException() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithSuccessResult());\n+        strategyList.add(getStrategyWithBrokerCommunicationException());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the last one returns a failure.\n+    // NOTE: This should never happen in real life. broker should return the same values regardless of communication strategy.\n+    @Test\n+    public void testTwoStrategiesWithTheLastOneReturningFailureResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithSuccessResult());\n+        strategyList.add(getStrategyWithFailureResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 2 strategies and the last one returns a corrupted result.\n+    // NOTE: This should never happen in real life. broker should return the same values regardless of communication strategy.\n+    @Test\n+    public void testTwoStrategiesWithTheLastOneThrowingCorruptedResult() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithSuccessResult());\n+        strategyList.add(getStrategyWithCorruptedResult());\n+\n+        expectSuccessResultWithTrue(strategyList);\n+    }\n+\n+    // Providing 2 strategies and both failed with BrokerCommunicationException inside IIpcStrategy.\n+    @Test\n+    public void testTwoStrategiesWithBrokerCommunicationException() {\n+        final List<IIpcStrategy> strategyList = new ArrayList<>();\n+        strategyList.add(getStrategyWithBrokerCommunicationException());\n+        strategyList.add(getStrategyWithBrokerCommunicationException());\n+\n+        expectBindFailureException(strategyList);\n+    }\n+\n+    private void expectSuccessResultWithTrue(final List<IIpcStrategy> strategyList) {\n+        try {\n+            final BrokerOperationExecutor executor = new BrokerOperationExecutor(strategyList);\n+            Assert.assertTrue(executor.execute(getMockParameter(), getBrokerOperation()));\n+        } catch (final BaseException e) {\n+            Assert.fail(\"Unexpected exception.\");\n+        }\n+    }\n+\n+    private void expectSuccessResultWithFalse(final List<IIpcStrategy> strategyList) {\n+        try {\n+            final BrokerOperationExecutor executor = new BrokerOperationExecutor(strategyList);\n+            Assert.assertFalse(executor.execute(getMockParameter(), getBrokerOperation()));\n+        } catch (final BaseException e) {\n+            Assert.fail(\"Unexpected exception.\");\n+        }\n+    }\n+\n+    private void expectBindFailureException(final List<IIpcStrategy> strategyList) {\n+        try {\n+            final BrokerOperationExecutor executor = new BrokerOperationExecutor(strategyList);\n+            executor.execute(getMockParameter(), getBrokerOperation());\n+            Assert.fail(\"Failure is expected.\");\n+        } catch (final BaseException e) {\n+            Assert.assertTrue(e instanceof ClientException);\n+            Assert.assertEquals(e.getErrorCode(), ErrorStrings.BROKER_BIND_SERVICE_FAILED);\n+            Assert.assertEquals(e.getSuppressed().length, strategyList.size());\n+        }\n+    }\n+\n+    private void expectCorruptedBundleException(final List<IIpcStrategy> strategyList) {\n+        try {\n+            final BrokerOperationExecutor executor = new BrokerOperationExecutor(strategyList);\n+            executor.execute(getMockParameter(), getBrokerOperation());\n+            Assert.fail(\"Failure is expected.\");\n+        } catch (final BaseException e) {\n+            Assert.assertTrue(e instanceof ClientException);\n+            Assert.assertEquals(e.getErrorCode(), CORRUPTED_BUNDLE_ERROR_CODE);\n+        }\n+    }\n+\n+    private CommandParameters getMockParameter() {\n+        return CommandParameters.builder().build();\n+    }\n+\n+    private IIpcStrategy getStrategyWithSuccessResult() {\n+        return new IIpcStrategy() {\n+            @Override\n+            @Nullable public Bundle communicateToBroker(@NonNull BrokerOperationBundle bundle) throws BrokerCommunicationException {\n+                final Bundle result = new Bundle();\n+                result.putBoolean(\"SUCCESS\", true);\n+                return result;\n+            }\n+        };\n+    }\n+\n+    private IIpcStrategy getStrategyWithFailureResult() {\n+        return new IIpcStrategy() {\n+            @Override\n+            @Nullable public Bundle communicateToBroker(@NonNull BrokerOperationBundle bundle) throws BrokerCommunicationException {\n+                final Bundle result = new Bundle();\n+                result.putBoolean(\"SUCCESS\", false);\n+                return result;\n+            }\n+        };\n+    }\n+\n+    private IIpcStrategy getStrategyWithCorruptedResult() {", "originalCommit": "e445dae9a949cd0deb5acba63030ed790ed36558", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ0MTQzNQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512441435", "bodyText": "added ServiceException and UserCancelException. (the other two main exceptions that inherited from BaseException - the executor can only throw BaseException)", "author": "rpdome", "createdAt": "2020-10-27T06:24:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MjE5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "25e4b9939d3f17a7569ee22600d0c7f47ed6b23a", "chunk": "diff --git a/common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java b/common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java\nindex 9ab19af66..ef79ea320 100644\n--- a/common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java\n+++ b/common/src/test/java/com/microsoft/identity/common/internal/brokeroperationexecutor/BrokerOperationExecutorTests.java\n\n@@ -32,6 +32,8 @@ import com.microsoft.identity.common.exception.BaseException;\n import com.microsoft.identity.common.exception.BrokerCommunicationException;\n import com.microsoft.identity.common.exception.ClientException;\n import com.microsoft.identity.common.exception.ErrorStrings;\n+import com.microsoft.identity.common.exception.ServiceException;\n+import com.microsoft.identity.common.exception.UserCancelException;\n import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n import com.microsoft.identity.common.internal.commands.parameters.CommandParameters;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MzQ4OQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512263489", "bodyText": "Should this return a List?", "author": "AdamBJohnsonx", "createdAt": "2020-10-26T20:57:35Z", "path": "common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java", "diffHunk": "@@ -0,0 +1,178 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.ipc;\n+\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.CONNECTION_ERROR;\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.BROKER_GET_KEY_FROM_INACTIVE_BROKER;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_ACQUIRE_TOKEN_SILENT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_ACCOUNTS;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_DEVICE_MODE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_HELLO;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_REMOVE_ACCOUNT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_SIGN_OUT_FROM_SHARED_DEVICE;\n+\n+/**\n+ * IMPORTANT: This class must cover EVERY {@link com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation}.\n+ */\n+public abstract class IpcStrategyTests {\n+\n+    abstract IIpcStrategy getStrategy();", "originalCommit": "e445dae9a949cd0deb5acba63030ed790ed36558", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQxMDM4NA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512410384", "bodyText": "Please see the answer regarding parameterized test below.", "author": "rpdome", "createdAt": "2020-10-27T04:30:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MzQ4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "25e4b9939d3f17a7569ee22600d0c7f47ed6b23a", "chunk": "diff --git a/common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java b/common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java\nindex 20a6fc7f2..6758f132b 100644\n--- a/common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java\n+++ b/common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java\n\n@@ -22,6 +22,7 @@\n //  THE SOFTWARE.\n package com.microsoft.identity.common.internal.ipc;\n \n+import android.os.BaseBundle;\n import android.os.Bundle;\n \n import androidx.annotation.NonNull;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MzkxNw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512263917", "bodyText": "Can we make this into a parameterized test?", "author": "AdamBJohnsonx", "createdAt": "2020-10-26T20:58:25Z", "path": "common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java", "diffHunk": "@@ -0,0 +1,178 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.ipc;\n+\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.CONNECTION_ERROR;\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.BROKER_GET_KEY_FROM_INACTIVE_BROKER;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_ACQUIRE_TOKEN_SILENT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_ACCOUNTS;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_DEVICE_MODE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_HELLO;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_REMOVE_ACCOUNT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_SIGN_OUT_FROM_SHARED_DEVICE;\n+\n+/**\n+ * IMPORTANT: This class must cover EVERY {@link com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation}.", "originalCommit": "e445dae9a949cd0deb5acba63030ed790ed36558", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQwODEwNg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512408106", "bodyText": "I assume you mean making IIpcStrategy the parameter in the parameterized test.\n\nEach strategy requires different shadow classes.... so ... we could, but I don't want to put all shadow classes in one place.\nI should mark all the test functions here abstract. Once we start supporting broker IPC, these tests will diverge. (it works with all the subclasses because we're working only on MSAL-Broker communication).", "author": "rpdome", "createdAt": "2020-10-27T04:21:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MzkxNw=="}], "type": "inlineReview", "revised_code": {"commit": "25e4b9939d3f17a7569ee22600d0c7f47ed6b23a", "chunk": "diff --git a/common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java b/common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java\nindex 20a6fc7f2..6758f132b 100644\n--- a/common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java\n+++ b/common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java\n\n@@ -22,6 +22,7 @@\n //  THE SOFTWARE.\n package com.microsoft.identity.common.internal.ipc;\n \n+import android.os.BaseBundle;\n import android.os.Bundle;\n \n import androidx.annotation.NonNull;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NDE0OA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512264148", "bodyText": "Do we care if it's the same identity? (here and elsewhere)", "author": "AdamBJohnsonx", "createdAt": "2020-10-26T20:58:52Z", "path": "common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java", "diffHunk": "@@ -0,0 +1,178 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.ipc;\n+\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.CONNECTION_ERROR;\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.BROKER_GET_KEY_FROM_INACTIVE_BROKER;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_ACQUIRE_TOKEN_SILENT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_ACCOUNTS;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_DEVICE_MODE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_HELLO;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_REMOVE_ACCOUNT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_SIGN_OUT_FROM_SHARED_DEVICE;\n+\n+/**\n+ * IMPORTANT: This class must cover EVERY {@link com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation}.\n+ */\n+public abstract class IpcStrategyTests {\n+\n+    abstract IIpcStrategy getStrategy();\n+\n+    @Test\n+    public void testMsalHello() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_HELLO));\n+    }\n+\n+    @Test\n+    public void testMsalGetIntentForInteractiveRequest() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST));\n+    }\n+\n+    @Test\n+    public void testMsalAcquireTokenSilent() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_ACQUIRE_TOKEN_SILENT));\n+    }\n+\n+    @Test\n+    public void testMsalGetAccounts() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_ACCOUNTS));\n+    }\n+\n+    @Test\n+    public void testMsalRemoveAccounts() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_REMOVE_ACCOUNT));\n+    }\n+\n+    @Test\n+    public void testMsalGetDeviceMode() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_DEVICE_MODE));\n+    }\n+\n+    @Test\n+    public void testGetCurrentAccountInSharedDevice() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE));\n+    }\n+\n+    @Test\n+    public void testMsalSignOutFromSharedDevice() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_SIGN_OUT_FROM_SHARED_DEVICE));\n+    }\n+\n+    @Test\n+    public void testBrokerGetKeyFromInactiveBroker() {\n+        testOperationNotSupportedOnClientSide(getMockRequestBundle(BROKER_GET_KEY_FROM_INACTIVE_BROKER));\n+    }\n+\n+    @Test\n+    public void testIpcFailed() {\n+        testIpcConnectionFailed(getMockRequestBundle(MSAL_HELLO));\n+    }\n+\n+    protected BrokerOperationBundle getMockRequestBundle(final BrokerOperationBundle.Operation operation) {\n+        final Bundle bundle = new Bundle();\n+        bundle.putBoolean(\"REQUEST_BUNDLE\", true);\n+\n+        return new BrokerOperationBundle(operation, \"MOCK_BROKER\", bundle);\n+    }\n+\n+    public static Bundle getMockIpcResultBundle() {\n+        final Bundle bundle = new Bundle();\n+        bundle.putBoolean(\"MOCK_SUCCESS\", true);\n+        return bundle;\n+    }\n+\n+    protected void testOperationSucceeds(@NonNull final BrokerOperationBundle bundle) {\n+        final IIpcStrategy strategy = getStrategy();\n+        try {\n+            final Bundle resultBundle = strategy.communicateToBroker(bundle);\n+            Assert.assertTrue(validateResultBundle(resultBundle, getMockIpcResultBundle()));\n+        } catch (BaseException e) {\n+            Assert.fail(\"Exception is not expected.\");\n+        }\n+    }\n+\n+    protected void testOperationNotSupportedOnClientSide(@NonNull final BrokerOperationBundle bundle) {\n+        final IIpcStrategy strategy = getStrategy();\n+        try {\n+            strategy.communicateToBroker(bundle);\n+            Assert.fail(\"Operation should fail.\");\n+        } catch (BaseException e) {\n+            Assert.assertTrue(e instanceof BrokerCommunicationException);\n+            Assert.assertSame(((BrokerCommunicationException) e).getType(), OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE);\n+        }\n+    }\n+\n+    protected void testIpcConnectionFailed(@NonNull final BrokerOperationBundle bundle) {\n+        final IIpcStrategy strategy = getStrategy();\n+        try {\n+            strategy.communicateToBroker(bundle);\n+            Assert.fail(\"Operation should fail.\");\n+        } catch (BaseException e) {\n+            Assert.assertTrue(e instanceof BrokerCommunicationException);\n+            Assert.assertSame(((BrokerCommunicationException) e).getType(), CONNECTION_ERROR);", "originalCommit": "e445dae9a949cd0deb5acba63030ed790ed36558", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQyOTE4MQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512429181", "bodyText": "same identity?", "author": "rpdome", "createdAt": "2020-10-27T05:42:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NDE0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgyODIwOQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512828209", "bodyText": "AssertSame is a comparison of object identity, essentially memory address.  So my question is - is it important that it's the same object or should it just need to compare equals?", "author": "AdamBJohnsonx", "createdAt": "2020-10-27T16:10:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NDE0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgzMjEwNA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512832104", "bodyText": "ah ok. assertEquals makes more sense then. not sure why this is not throwing an error :/", "author": "rpdome", "createdAt": "2020-10-27T16:15:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NDE0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgzMzIwMg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512833202", "bodyText": "Because it's an enum. ;-)", "author": "AdamBJohnsonx", "createdAt": "2020-10-27T16:16:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NDE0OA=="}], "type": "inlineReview", "revised_code": {"commit": "25e4b9939d3f17a7569ee22600d0c7f47ed6b23a", "chunk": "diff --git a/common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java b/common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java\nindex 20a6fc7f2..6758f132b 100644\n--- a/common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java\n+++ b/common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java\n\n@@ -22,6 +22,7 @@\n //  THE SOFTWARE.\n package com.microsoft.identity.common.internal.ipc;\n \n+import android.os.BaseBundle;\n import android.os.Bundle;\n \n import androidx.annotation.NonNull;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NTM1OA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512265358", "bodyText": "might be nice to parameterize this thing so you could make it throw them all by using a static factory that takes the exception to throw.", "author": "AdamBJohnsonx", "createdAt": "2020-10-26T21:01:08Z", "path": "common/src/test/java/com/microsoft/identity/common/internal/ipc/mock/MockContextForBoundServiceConnectionFailed.java", "diffHunk": "@@ -0,0 +1,43 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.ipc.mock;\n+\n+import android.os.IInterface;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.internal.broker.BoundServiceClient;\n+\n+import org.robolectric.annotation.Implements;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+@Implements(BoundServiceClient.class)\n+public class MockContextForBoundServiceConnectionFailed<T extends IInterface> {\n+    protected @NonNull T connect(@NonNull final String targetServicePackageName)\n+            throws ClientException, InterruptedException, TimeoutException, ExecutionException {\n+        throw new TimeoutException(\"Connection timed out\");", "originalCommit": "e445dae9a949cd0deb5acba63030ed790ed36558", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ0MDAzMA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512440030", "bodyText": "can you parameterize a shadow class? (I couldn't find a way to do so)", "author": "rpdome", "createdAt": "2020-10-27T06:19:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NTM1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgzNDE5MQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512834191", "bodyText": "I was thinking more about whether a shadow is the right way to deal with this, since BoundServiceClient is, I think, our own class.  We shouldn't need to use a shadow for it.", "author": "AdamBJohnsonx", "createdAt": "2020-10-27T16:18:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NTM1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkxNjUxNQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512916515", "bodyText": "we don't necessarily need shadow, but IMO it's easier/cleaner to implement this way.\nRight now, each method are calling testOperationXXXXX(), and that function is pulling the strategy object from getStrategy(). If we don't use shadow, we would have to supply IIpcStrategy object in every methods, across all 3 strategies.\nShadowing allows us to easily modify the injected object in specific test cases.", "author": "rpdome", "createdAt": "2020-10-27T18:05:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NTM1OA=="}], "type": "inlineReview", "revised_code": {"commit": "25e4b9939d3f17a7569ee22600d0c7f47ed6b23a", "chunk": "diff --git a/common/src/test/java/com/microsoft/identity/common/internal/ipc/mock/MockContextForBoundServiceConnectionFailed.java b/common/src/test/java/com/microsoft/identity/common/internal/ipc/mock/ShadowBoundServiceClientConnectionFailed.java\nsimilarity index 95%\nrename from common/src/test/java/com/microsoft/identity/common/internal/ipc/mock/MockContextForBoundServiceConnectionFailed.java\nrename to common/src/test/java/com/microsoft/identity/common/internal/ipc/mock/ShadowBoundServiceClientConnectionFailed.java\nindex 48f766b2c..e90b4d9fd 100644\n--- a/common/src/test/java/com/microsoft/identity/common/internal/ipc/mock/MockContextForBoundServiceConnectionFailed.java\n+++ b/common/src/test/java/com/microsoft/identity/common/internal/ipc/mock/ShadowBoundServiceClientConnectionFailed.java\n\n@@ -35,7 +35,7 @@ import java.util.concurrent.ExecutionException;\n import java.util.concurrent.TimeoutException;\n \n @Implements(BoundServiceClient.class)\n-public class MockContextForBoundServiceConnectionFailed<T extends IInterface> {\n+public class ShadowBoundServiceClientConnectionFailed<T extends IInterface> {\n     protected @NonNull T connect(@NonNull final String targetServicePackageName)\n             throws ClientException, InterruptedException, TimeoutException, ExecutionException {\n         throw new TimeoutException(\"Connection timed out\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NTc1NA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512265754", "bodyText": "Does it matter what this returns?  If we're really expecting that it isn't called, throw UnsupportedOperationException and then you'll know if that idea changes.  If it is being called, what happenes if it doesn't return null?", "author": "AdamBJohnsonx", "createdAt": "2020-10-26T21:01:50Z", "path": "common/src/test/java/com/microsoft/identity/common/internal/ipc/mock/MockContextForBoundServiceWithSuccessResult.java", "diffHunk": "@@ -0,0 +1,89 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.ipc.mock;\n+\n+import android.content.Intent;\n+import android.os.Bundle;\n+import android.os.IBinder;\n+import android.os.IInterface;\n+import android.os.RemoteException;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.client.IMicrosoftAuthService;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.internal.broker.BoundServiceClient;\n+import com.microsoft.identity.common.internal.ipc.IpcStrategyTests;\n+\n+import org.robolectric.annotation.Implements;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+@Implements(BoundServiceClient.class)\n+public class MockContextForBoundServiceWithSuccessResult<T extends IInterface> {\n+    protected @NonNull T connect(@NonNull final String targetServicePackageName)\n+            throws ClientException, InterruptedException, TimeoutException, ExecutionException {\n+        final IMicrosoftAuthService authService = new IMicrosoftAuthService() {\n+            @Override public IBinder asBinder() {\n+                return null;", "originalCommit": "e445dae9a949cd0deb5acba63030ed790ed36558", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5NDQwNg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512394406", "bodyText": "We don't really use it here. (it should be used if we're doing the actual bind)", "author": "rpdome", "createdAt": "2020-10-27T03:25:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NTc1NA=="}], "type": "inlineReview", "revised_code": {"commit": "25e4b9939d3f17a7569ee22600d0c7f47ed6b23a", "chunk": "diff --git a/common/src/test/java/com/microsoft/identity/common/internal/ipc/mock/MockContextForBoundServiceWithSuccessResult.java b/common/src/test/java/com/microsoft/identity/common/internal/ipc/mock/ShadowBoundServiceClientWithSuccessResult.java\nsimilarity index 97%\nrename from common/src/test/java/com/microsoft/identity/common/internal/ipc/mock/MockContextForBoundServiceWithSuccessResult.java\nrename to common/src/test/java/com/microsoft/identity/common/internal/ipc/mock/ShadowBoundServiceClientWithSuccessResult.java\nindex 0cc9a8282..de2d69285 100644\n--- a/common/src/test/java/com/microsoft/identity/common/internal/ipc/mock/MockContextForBoundServiceWithSuccessResult.java\n+++ b/common/src/test/java/com/microsoft/identity/common/internal/ipc/mock/ShadowBoundServiceClientWithSuccessResult.java\n\n@@ -41,7 +41,7 @@ import java.util.concurrent.ExecutionException;\n import java.util.concurrent.TimeoutException;\n \n @Implements(BoundServiceClient.class)\n-public class MockContextForBoundServiceWithSuccessResult<T extends IInterface> {\n+public class ShadowBoundServiceClientWithSuccessResult<T extends IInterface> {\n     protected @NonNull T connect(@NonNull final String targetServicePackageName)\n             throws ClientException, InterruptedException, TimeoutException, ExecutionException {\n         final IMicrosoftAuthService authService = new IMicrosoftAuthService() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NjY4MQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512266681", "bodyText": "Do we need to use a fake one?  Could we actually just pull a sample Bundle from the actual code?", "author": "AdamBJohnsonx", "createdAt": "2020-10-26T21:03:35Z", "path": "common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java", "diffHunk": "@@ -0,0 +1,178 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.ipc;\n+\n+import android.os.Bundle;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.BrokerCommunicationException;\n+import com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle;\n+import com.microsoft.identity.common.internal.broker.ipc.IIpcStrategy;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.CONNECTION_ERROR;\n+import static com.microsoft.identity.common.exception.BrokerCommunicationException.Type.OPERATION_NOT_SUPPORTED_ON_CLIENT_SIDE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.BROKER_GET_KEY_FROM_INACTIVE_BROKER;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_ACQUIRE_TOKEN_SILENT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_ACCOUNTS;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_DEVICE_MODE;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_HELLO;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_REMOVE_ACCOUNT;\n+import static com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation.MSAL_SIGN_OUT_FROM_SHARED_DEVICE;\n+\n+/**\n+ * IMPORTANT: This class must cover EVERY {@link com.microsoft.identity.common.internal.broker.ipc.BrokerOperationBundle.Operation}.\n+ */\n+public abstract class IpcStrategyTests {\n+\n+    abstract IIpcStrategy getStrategy();\n+\n+    @Test\n+    public void testMsalHello() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_HELLO));\n+    }\n+\n+    @Test\n+    public void testMsalGetIntentForInteractiveRequest() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_INTENT_FOR_INTERACTIVE_REQUEST));\n+    }\n+\n+    @Test\n+    public void testMsalAcquireTokenSilent() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_ACQUIRE_TOKEN_SILENT));\n+    }\n+\n+    @Test\n+    public void testMsalGetAccounts() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_ACCOUNTS));\n+    }\n+\n+    @Test\n+    public void testMsalRemoveAccounts() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_REMOVE_ACCOUNT));\n+    }\n+\n+    @Test\n+    public void testMsalGetDeviceMode() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_DEVICE_MODE));\n+    }\n+\n+    @Test\n+    public void testGetCurrentAccountInSharedDevice() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_GET_CURRENT_ACCOUNT_IN_SHARED_DEVICE));\n+    }\n+\n+    @Test\n+    public void testMsalSignOutFromSharedDevice() {\n+        testOperationSucceeds(getMockRequestBundle(MSAL_SIGN_OUT_FROM_SHARED_DEVICE));\n+    }\n+\n+    @Test\n+    public void testBrokerGetKeyFromInactiveBroker() {\n+        testOperationNotSupportedOnClientSide(getMockRequestBundle(BROKER_GET_KEY_FROM_INACTIVE_BROKER));\n+    }\n+\n+    @Test\n+    public void testIpcFailed() {\n+        testIpcConnectionFailed(getMockRequestBundle(MSAL_HELLO));\n+    }\n+\n+    protected BrokerOperationBundle getMockRequestBundle(final BrokerOperationBundle.Operation operation) {\n+        final Bundle bundle = new Bundle();\n+        bundle.putBoolean(\"REQUEST_BUNDLE\", true);\n+\n+        return new BrokerOperationBundle(operation, \"MOCK_BROKER\", bundle);\n+    }\n+\n+    public static Bundle getMockIpcResultBundle() {", "originalCommit": "e445dae9a949cd0deb5acba63030ed790ed36558", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM5MjA2MA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512392060", "bodyText": "I intentionally did not use the actual sample bundle - since that depends on the MSAL-Broker protocol.\nThis test case should be protocol-agnostic.", "author": "rpdome", "createdAt": "2020-10-27T03:15:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NjY4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "25e4b9939d3f17a7569ee22600d0c7f47ed6b23a", "chunk": "diff --git a/common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java b/common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java\nindex 20a6fc7f2..6758f132b 100644\n--- a/common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java\n+++ b/common/src/test/java/com/microsoft/identity/common/internal/ipc/IpcStrategyTests.java\n\n@@ -22,6 +22,7 @@\n //  THE SOFTWARE.\n package com.microsoft.identity.common.internal.ipc;\n \n+import android.os.BaseBundle;\n import android.os.Bundle;\n \n import androidx.annotation.NonNull;\n"}}, {"oid": "9f7830f0a471a4c5ef6f343855e32acf38cf0b27", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/9f7830f0a471a4c5ef6f343855e32acf38cf0b27", "message": "part 4", "committedDate": "2020-10-27T03:10:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjgzMjI1Ng==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1093#discussion_r512832256", "bodyText": "We're shadowing our own class here.  There's probably a better way.", "author": "AdamBJohnsonx", "createdAt": "2020-10-27T16:15:48Z", "path": "common/src/test/java/com/microsoft/identity/common/internal/ipc/mock/ShadowBoundServiceClientConnectionFailed.java", "diffHunk": "@@ -0,0 +1,43 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.ipc.mock;\n+\n+import android.os.IInterface;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.internal.broker.BoundServiceClient;\n+\n+import org.robolectric.annotation.Implements;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+\n+@Implements(BoundServiceClient.class)\n+public class ShadowBoundServiceClientConnectionFailed<T extends IInterface> {\n+    protected @NonNull T connect(@NonNull final String targetServicePackageName)\n+            throws ClientException, InterruptedException, TimeoutException, ExecutionException {\n+        throw new TimeoutException(\"Connection timed out\");", "originalCommit": "be2c7f58399613de7d3f17033ed72718a6d01852", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "25e4b9939d3f17a7569ee22600d0c7f47ed6b23a", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/25e4b9939d3f17a7569ee22600d0c7f47ed6b23a", "message": "[IPC part 4] test cases for IPC strategies", "committedDate": "2020-10-31T21:35:14Z", "type": "forcePushed"}, {"oid": "039ebb59130429819296fa195e985208d69b9d77", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/039ebb59130429819296fa195e985208d69b9d77", "message": "[IPC part 4] test cases for IPC strategies", "committedDate": "2020-10-31T21:38:04Z", "type": "commit"}, {"oid": "039ebb59130429819296fa195e985208d69b9d77", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/039ebb59130429819296fa195e985208d69b9d77", "message": "[IPC part 4] test cases for IPC strategies", "committedDate": "2020-10-31T21:38:04Z", "type": "forcePushed"}]}