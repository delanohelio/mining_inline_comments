{"pr_number": 1111, "pr_title": "Implement support for client_claims in ATs, SHRs", "pr_createdAt": "2020-11-04T02:21:15Z", "pr_url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111", "timeline": [{"oid": "d291844d1da579ee874044dedce3728d21653952", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/d291844d1da579ee874044dedce3728d21653952", "message": "WIP implementing client_claims", "committedDate": "2020-11-04T00:37:17Z", "type": "commit"}, {"oid": "1c31c216563132c8ff3b5cc5763be372d747f1ec", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/1c31c216563132c8ff3b5cc5763be372d747f1ec", "message": "Adding support for client_claimss", "committedDate": "2020-11-04T02:19:06Z", "type": "commit"}, {"oid": "b3ca1401249dac6d3fdd015e7772f89bd5616cf5", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/b3ca1401249dac6d3fdd015e7772f89bd5616cf5", "message": "Stubbing out command", "committedDate": "2020-11-04T02:42:04Z", "type": "commit"}, {"oid": "4a4ba12eeb3f7163dfcfaee9052588e0c26755e1", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/4a4ba12eeb3f7163dfcfaee9052588e0c26755e1", "message": "Stubbing out more impl", "committedDate": "2020-11-05T00:21:42Z", "type": "commit"}, {"oid": "5b74fa8ff7003a67d00f3b7d399b8f68621d6746", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/5b74fa8ff7003a67d00f3b7d399b8f68621d6746", "message": "Local flow working (needs polish)", "committedDate": "2020-11-05T01:14:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcyNDk1Ng==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r517724956", "bodyText": "javadoc", "author": "iambmelt", "createdAt": "2020-11-05T01:16:24Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/BaseController.java", "diffHunk": "@@ -745,4 +747,6 @@ public ICacheRecord finalizeCacheRecordForResult(@NonNull final ICacheRecord cac\n \n         return cacheRecord;\n     }\n+\n+    public abstract GenerateShrResult generateSignedHttpRequest(GenerateShrCommandParameters parameters) throws Exception;", "originalCommit": "5b74fa8ff7003a67d00f3b7d399b8f68621d6746", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcyOTM3Ng==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r517729376", "bodyText": "eb85b0c", "author": "iambmelt", "createdAt": "2020-11-05T01:31:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcyNDk1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "eb85b0c026892aa5e049b89c2e2f52f268210ec7", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/controllers/BaseController.java b/common/src/main/java/com/microsoft/identity/common/internal/controllers/BaseController.java\nindex 9b2aa2c98..0c923317c 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/controllers/BaseController.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/controllers/BaseController.java\n\n@@ -748,5 +745,12 @@ public abstract class BaseController {\n         return cacheRecord;\n     }\n \n+    /**\n+     * Generates a SHR sans AT.\n+     *\n+     * @param parameters The input command params.\n+     * @return The {@link GenerateShrResult} containing the resulting SHR.\n+     * @throws Exception If an error is encountered during SHR generation.\n+     */\n     public abstract GenerateShrResult generateSignedHttpRequest(GenerateShrCommandParameters parameters) throws Exception;\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcyNTAyMw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r517725023", "bodyText": "javadoc", "author": "iambmelt", "createdAt": "2020-11-05T01:16:37Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/parameters/GenerateShrCommandParameters.java", "diffHunk": "@@ -0,0 +1,42 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.commands.parameters;\n+\n+import com.microsoft.identity.common.internal.authscheme.IPoPAuthenticationSchemeParams;\n+\n+import lombok.Getter;\n+import lombok.experimental.SuperBuilder;\n+\n+/**\n+ * Parameter class for generating SHRs.\n+ */\n+@Getter\n+@SuperBuilder\n+public class GenerateShrCommandParameters extends CommandParameters {\n+\n+    private static final String TAG = GenerateShrCommandParameters.class.getSimpleName();\n+\n+    private String homeAccountId;", "originalCommit": "5b74fa8ff7003a67d00f3b7d399b8f68621d6746", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcyOTg5OA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r517729898", "bodyText": "30a89ec", "author": "iambmelt", "createdAt": "2020-11-05T01:33:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcyNTAyMw=="}], "type": "inlineReview", "revised_code": {"commit": "30a89ec016bfe6d93d53f403a8161d097088ae35", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/commands/parameters/GenerateShrCommandParameters.java b/common/src/main/java/com/microsoft/identity/common/internal/commands/parameters/GenerateShrCommandParameters.java\nindex ae94d5661..252fda7a3 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/commands/parameters/GenerateShrCommandParameters.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/commands/parameters/GenerateShrCommandParameters.java\n\n@@ -34,9 +34,13 @@ import lombok.experimental.SuperBuilder;\n @SuperBuilder\n public class GenerateShrCommandParameters extends CommandParameters {\n \n-    private static final String TAG = GenerateShrCommandParameters.class.getSimpleName();\n-\n+    /**\n+     * The home_account_id of the account for which we will generate the resulting SHR.\n+     */\n     private String homeAccountId;\n \n+    /**\n+     * The {@link IPoPAuthenticationSchemeParams} used to produce the resulting SHR.\n+     */\n     private IPoPAuthenticationSchemeParams popParameters;\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcyNTE4MA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r517725180", "bodyText": "javadoc", "author": "iambmelt", "createdAt": "2020-11-05T01:17:10Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -692,6 +694,64 @@ public AcquireTokenResult acquireDeviceCodeFlowToken(\n         return acquireTokenResult;\n     }\n \n+    @Override\n+    public GenerateShrResult generateSignedHttpRequest(\n+            @NonNull final GenerateShrCommandParameters parameters) throws Exception {\n+        final Context context = parameters.getAndroidApplicationContext();\n+        final IClockSkewManager clockSkewManager = new ClockSkewManager(context);\n+        final OAuth2TokenCache cache = parameters.getOAuth2TokenCache();\n+        final String clientId = parameters.getClientId();\n+        final String homeAccountId = parameters.getHomeAccountId();\n+        final IPoPAuthenticationSchemeParams popSchemeParams = parameters.getPopParameters();\n+\n+        if (credentialsExistForAccountLocally(cache, clientId, homeAccountId)) {\n+            // Perform the signing locally...\n+            return generateSignedHttpRequestInternal(context, clockSkewManager, popSchemeParams);\n+        } else {\n+            throw new UiRequiredException(NO_ACCOUNT_FOUND, \"Account does not exist locally.\");\n+        }\n+    }\n+\n+    private synchronized GenerateShrResult generateSignedHttpRequestInternal(@NonNull final Context context,\n+                                                                             @NonNull final IClockSkewManager clockSkewManager,\n+                                                                             @NonNull final IPoPAuthenticationSchemeParams popSchemeParams) throws ClientException {\n+        // Clock-skew correction values\n+        final long ONE_SECOND_MILLIS = 1000L;\n+        final long timestampMillis = clockSkewManager.getAdjustedReferenceTime().getTime();\n+\n+        final String httpMethodStr = popSchemeParams.getHttpMethod();\n+        final URL resourceUrl = popSchemeParams.getUrl();\n+        final String nonce = popSchemeParams.getNonce();\n+        final String clientClaims = popSchemeParams.getClientClaims();\n+        final IDevicePopManager popMgr = Device.getDevicePoPManagerInstance();\n+\n+        // Generate keys, if none exist (should already be initialized)\n+        if (!popMgr.asymmetricKeyExists()) {\n+            popMgr.generateAsymmetricKey(context);\n+        }\n+\n+        final String shr = popMgr.mintSignedHttpRequest(\n+                httpMethodStr,\n+                timestampMillis / ONE_SECOND_MILLIS,\n+                resourceUrl,\n+                nonce,\n+                clientClaims\n+        );\n+\n+        // Create our result object\n+        final GenerateShrResult result = new GenerateShrResult();\n+        result.setShr(shr);\n+\n+        return result;\n+    }\n+\n+    private boolean credentialsExistForAccountLocally(@NonNull final OAuth2TokenCache cache,", "originalCommit": "5b74fa8ff7003a67d00f3b7d399b8f68621d6746", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzczMDY5NQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r517730695", "bodyText": "786262c", "author": "iambmelt", "createdAt": "2020-11-05T01:36:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcyNTE4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzczMDczMA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r517730730", "bodyText": "Also renamed this method", "author": "iambmelt", "createdAt": "2020-11-05T01:36:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcyNTE4MA=="}], "type": "inlineReview", "revised_code": {"commit": "786262c7d3e0ec6c08dec2ac4d71662fb24a262c", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java b/common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java\nindex 54242c6e7..21ce0ff23 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java\n\n@@ -704,7 +704,7 @@ public class LocalMSALController extends BaseController {\n         final String homeAccountId = parameters.getHomeAccountId();\n         final IPoPAuthenticationSchemeParams popSchemeParams = parameters.getPopParameters();\n \n-        if (credentialsExistForAccountLocally(cache, clientId, homeAccountId)) {\n+        if (userHasLocalAccountRecord(cache, clientId, homeAccountId)) {\n             // Perform the signing locally...\n             return generateSignedHttpRequestInternal(context, clockSkewManager, popSchemeParams);\n         } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcyNTI1NA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r517725254", "bodyText": "javadoc", "author": "iambmelt", "createdAt": "2020-11-05T01:17:24Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -692,6 +694,64 @@ public AcquireTokenResult acquireDeviceCodeFlowToken(\n         return acquireTokenResult;\n     }\n \n+    @Override\n+    public GenerateShrResult generateSignedHttpRequest(\n+            @NonNull final GenerateShrCommandParameters parameters) throws Exception {\n+        final Context context = parameters.getAndroidApplicationContext();\n+        final IClockSkewManager clockSkewManager = new ClockSkewManager(context);\n+        final OAuth2TokenCache cache = parameters.getOAuth2TokenCache();\n+        final String clientId = parameters.getClientId();\n+        final String homeAccountId = parameters.getHomeAccountId();\n+        final IPoPAuthenticationSchemeParams popSchemeParams = parameters.getPopParameters();\n+\n+        if (credentialsExistForAccountLocally(cache, clientId, homeAccountId)) {\n+            // Perform the signing locally...\n+            return generateSignedHttpRequestInternal(context, clockSkewManager, popSchemeParams);\n+        } else {\n+            throw new UiRequiredException(NO_ACCOUNT_FOUND, \"Account does not exist locally.\");\n+        }\n+    }\n+\n+    private synchronized GenerateShrResult generateSignedHttpRequestInternal(@NonNull final Context context,", "originalCommit": "5b74fa8ff7003a67d00f3b7d399b8f68621d6746", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzczMzA0MQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r517733041", "bodyText": "1ed79bf", "author": "iambmelt", "createdAt": "2020-11-05T01:44:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcyNTI1NA=="}], "type": "inlineReview", "revised_code": {"commit": "786262c7d3e0ec6c08dec2ac4d71662fb24a262c", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java b/common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java\nindex 54242c6e7..21ce0ff23 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java\n\n@@ -704,7 +704,7 @@ public class LocalMSALController extends BaseController {\n         final String homeAccountId = parameters.getHomeAccountId();\n         final IPoPAuthenticationSchemeParams popSchemeParams = parameters.getPopParameters();\n \n-        if (credentialsExistForAccountLocally(cache, clientId, homeAccountId)) {\n+        if (userHasLocalAccountRecord(cache, clientId, homeAccountId)) {\n             // Perform the signing locally...\n             return generateSignedHttpRequestInternal(context, clockSkewManager, popSchemeParams);\n         } else {\n"}}, {"oid": "eb85b0c026892aa5e049b89c2e2f52f268210ec7", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/eb85b0c026892aa5e049b89c2e2f52f268210ec7", "message": "Adds javadoc", "committedDate": "2020-11-05T01:31:05Z", "type": "commit"}, {"oid": "30a89ec016bfe6d93d53f403a8161d097088ae35", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/30a89ec016bfe6d93d53f403a8161d097088ae35", "message": "Adds javadoc", "committedDate": "2020-11-05T01:33:06Z", "type": "commit"}, {"oid": "786262c7d3e0ec6c08dec2ac4d71662fb24a262c", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/786262c7d3e0ec6c08dec2ac4d71662fb24a262c", "message": "Adds javadoc", "committedDate": "2020-11-05T01:35:49Z", "type": "commit"}, {"oid": "1ed79bf5140a138b32024e34471f38e4db9dfb2e", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/1ed79bf5140a138b32024e34471f38e4db9dfb2e", "message": "Adds javadoc", "committedDate": "2020-11-05T01:43:45Z", "type": "commit"}, {"oid": "512233f48e8394a921c60193939ae01efec265c2", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/512233f48e8394a921c60193939ae01efec265c2", "message": "Updates changelog", "committedDate": "2020-11-05T01:46:07Z", "type": "commit"}, {"oid": "81e81055f01712a1b0dadc4fe5a0fa61e7ade0de", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/81e81055f01712a1b0dadc4fe5a0fa61e7ade0de", "message": "WIP stubbing out client-side invocation of broker", "committedDate": "2020-11-05T23:10:43Z", "type": "commit"}, {"oid": "2ba5ecd070d9fc523c520665b8b0f94dbb07639d", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/2ba5ecd070d9fc523c520665b8b0f94dbb07639d", "message": "Bugfixes, additional impl", "committedDate": "2020-11-06T00:08:14Z", "type": "commit"}, {"oid": "1f46683f4ccb17f342419c01090253a53031ce47", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/1f46683f4ccb17f342419c01090253a53031ce47", "message": "Bugfixing", "committedDate": "2020-11-06T01:38:50Z", "type": "commit"}, {"oid": "89f1a2887b0ec4b45f384cedd8babb109e832f4d", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/89f1a2887b0ec4b45f384cedd8babb109e832f4d", "message": "Fixing compilation issue in test", "committedDate": "2020-11-06T01:40:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ3NDUxNQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518474515", "bodyText": "Comment: these are errors returned from the broker", "author": "iambmelt", "createdAt": "2020-11-06T01:43:14Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java", "diffHunk": "@@ -0,0 +1,106 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.commands;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.UiRequiredException;\n+import com.microsoft.identity.common.internal.commands.parameters.GenerateShrCommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BaseController;\n+import com.microsoft.identity.common.internal.result.GenerateShrResult;\n+\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.ErrorStrings.NO_ACCOUNT_FOUND;\n+\n+/**\n+ * Command class to perform generation of AT-less SHRs on behalf of a user.\n+ */\n+public class GenerateShrCommand extends BaseCommand<GenerateShrResult> {\n+\n+    private static final String TAG = GenerateShrCommand.class.getSimpleName();\n+\n+    public GenerateShrCommand(@NonNull final GenerateShrCommandParameters parameters,\n+                              @NonNull final List<BaseController> controllers,\n+                              @NonNull final CommandCallback<GenerateShrResult, BaseException> callback,\n+                              @NonNull final String publicApiId) {\n+        super(parameters, controllers, callback, publicApiId);\n+    }\n+\n+    @Override\n+    public GenerateShrResult execute() throws Exception {\n+        final String methodName = \":execute\";\n+\n+        GenerateShrResult result = null;\n+        final GenerateShrCommandParameters parameters = (GenerateShrCommandParameters) getParameters();\n+\n+        // Iterate over our controllers, to service the request either locally or via the broker...\n+        BaseController controller;\n+        for (int ii = 0; ii < getControllers().size(); ii++) {\n+            controller = getControllers().get(ii);\n+\n+            com.microsoft.identity.common.internal.logging.Logger.verbose(\n+                    TAG + methodName,\n+                    \"Executing with controller: \"\n+                            + controller.getClass().getSimpleName()\n+            );\n+\n+            try {\n+                result = controller.generateSignedHttpRequest(parameters);\n+\n+                if (null != result.getErrorCode()) {\n+                    final String errorCode = result.getErrorCode();\n+                    final String errorMessage = result.getErrorMessage();\n+\n+                    if (NO_ACCOUNT_FOUND.equalsIgnoreCase(errorCode)) {", "originalCommit": "89f1a2887b0ec4b45f384cedd8babb109e832f4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk5MjM2OQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518992369", "bodyText": "590e031", "author": "iambmelt", "createdAt": "2020-11-06T20:36:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ3NDUxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "590e03113450afe1b7e86bc7c8558c9cfd602bb4", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java b/common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java\nindex cd7d9aa1d..4555b451c 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java\n\n@@ -74,6 +74,9 @@ public class GenerateShrCommand extends BaseCommand<GenerateShrResult> {\n                     final String errorCode = result.getErrorCode();\n                     final String errorMessage = result.getErrorMessage();\n \n+                    // To support a shared communication model between the local flow and the\n+                    // broker flow, errors will be returned as properties of the result, instead\n+                    // of as thrown Exceptions\n                     if (NO_ACCOUNT_FOUND.equalsIgnoreCase(errorCode)) {\n                         throw new UiRequiredException(errorCode, errorMessage);\n                     } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ3NDY0NA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518474644", "bodyText": "Document unused", "author": "iambmelt", "createdAt": "2020-11-06T01:43:42Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/BrokerMsalController.java", "diffHunk": "@@ -753,6 +756,60 @@ public AcquireTokenResult acquireDeviceCodeFlowToken(@SuppressWarnings(WarningTy\n         throw new ClientException(\"acquireDeviceCodeFlowToken() not supported in BrokerMsalController\");\n     }\n \n+    @Override\n+    public GenerateShrResult generateSignedHttpRequest(@NonNull final GenerateShrCommandParameters parameters) throws Exception {\n+        return mBrokerOperationExecutor.execute(parameters, new BrokerOperation<GenerateShrResult>() {\n+\n+            private String negotiatedBrokerProtocolVersion;\n+\n+            @Override\n+            public void performPrerequisites(final @NonNull IIpcStrategy strategy) throws BaseException {\n+                negotiatedBrokerProtocolVersion = hello(strategy, parameters);\n+            }\n+\n+            @NonNull\n+            @Override\n+            public BrokerOperationBundle getBundle() {\n+                return new BrokerOperationBundle(\n+                        MSAL_GENERATE_SHR,\n+                        mActiveBrokerPackageName,\n+                        mRequestAdapter.getRequestBundleForGenerateShr(\n+                                parameters,\n+                                negotiatedBrokerProtocolVersion\n+                        )\n+                );\n+            }\n+\n+            @NonNull\n+            @Override\n+            public GenerateShrResult extractResultBundle(@Nullable final Bundle resultBundle) throws BaseException {\n+                if (null == resultBundle) {\n+                    throw mResultAdapter.getExceptionForEmptyResultBundle();\n+                }\n+\n+                return mResultAdapter.getGenerateShrResultFromResultBundle(resultBundle);\n+            }\n+\n+            @NonNull\n+            @Override\n+            public String getMethodName() {\n+                return \":generateSignedHttpRequest\";\n+            }\n+\n+            @Nullable\n+            @Override\n+            public String getTelemetryApiId() {\n+                return null;\n+            }\n+\n+            @Override\n+            public void putValueInSuccessEvent(@NonNull final ApiEndEvent event,\n+                                               @NonNull final GenerateShrResult result) {\n+", "originalCommit": "89f1a2887b0ec4b45f384cedd8babb109e832f4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk3NDEzOQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518974139", "bodyText": "6ec3f20", "author": "iambmelt", "createdAt": "2020-11-06T20:00:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ3NDY0NA=="}], "type": "inlineReview", "revised_code": {"commit": "6ec3f20f5c9ae770701016142399ca12db5786dd", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/controllers/BrokerMsalController.java b/common/src/main/java/com/microsoft/identity/common/internal/controllers/BrokerMsalController.java\nindex 31aa5ae25..2fb5052b0 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/controllers/BrokerMsalController.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/controllers/BrokerMsalController.java\n\n@@ -799,13 +799,14 @@ public class BrokerMsalController extends BaseController {\n             @Nullable\n             @Override\n             public String getTelemetryApiId() {\n+                // TODO Needed?\n                 return null;\n             }\n \n             @Override\n             public void putValueInSuccessEvent(@NonNull final ApiEndEvent event,\n                                                @NonNull final GenerateShrResult result) {\n-\n+                // TODO Needed?\n             }\n         });\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5NzI2Mg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518497262", "bodyText": "Fix this", "author": "iambmelt", "createdAt": "2020-11-06T03:04:39Z", "path": "common/src/main/java/com/microsoft/identity/common/adal/internal/AuthenticationConstants.java", "diffHunk": "@@ -1209,7 +1214,12 @@\n          * Time out for the AccountManager's remove account operation in broker.\n          */\n         public static final int ACCOUNT_MANAGER_REMOVE_ACCOUNT_TIMEOUT_IN_MILLISECONDS = 5000;\n-        \n+\n+        /**\n+         * The Bundle key name of serialized parameters for the PoP auth scheme.\n+         */\n+        public static final String AUTHSCHEME_PARAMS_POP = \"\";", "originalCommit": "89f1a2887b0ec4b45f384cedd8babb109e832f4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk4ODU0Mw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518988543", "bodyText": "2a7cdc7", "author": "iambmelt", "createdAt": "2020-11-06T20:27:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5NzI2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "2a7cdc79c17488466505ff6cb895d42a4f2ad8a7", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/adal/internal/AuthenticationConstants.java b/common/src/main/java/com/microsoft/identity/common/adal/internal/AuthenticationConstants.java\nindex 9fe9de774..fcc34cb87 100644\n--- a/common/src/main/java/com/microsoft/identity/common/adal/internal/AuthenticationConstants.java\n+++ b/common/src/main/java/com/microsoft/identity/common/adal/internal/AuthenticationConstants.java\n\n@@ -1218,7 +1218,7 @@ public final class AuthenticationConstants {\n         /**\n          * The Bundle key name of serialized parameters for the PoP auth scheme.\n          */\n-        public static final String AUTHSCHEME_PARAMS_POP = \"\";\n+        public static final String AUTHSCHEME_PARAMS_POP = \"pop_parameters\";\n \n         /**\n          * Bundle identifiers for x-ms-clitelem info.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5NzQ5Ng==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518497496", "bodyText": "Fix comment: Msal-to-Broker", "author": "iambmelt", "createdAt": "2020-11-06T03:05:29Z", "path": "common/src/main/java/com/microsoft/identity/common/adal/internal/AuthenticationConstants.java", "diffHunk": "@@ -1348,6 +1358,11 @@\n          */\n         public static final String MSAL_SIGN_OUT_FROM_SHARED_DEVICE_PATH = \"/signOutFromSharedDevice\";\n \n+        /**\n+         * URI Path constant for BrokerApi-to-Broker generateShr request using ContentProvider.", "originalCommit": "89f1a2887b0ec4b45f384cedd8babb109e832f4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk4ODIyNw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518988227", "bodyText": "0f2bb80", "author": "iambmelt", "createdAt": "2020-11-06T20:27:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5NzQ5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "0f2bb807b1aae6c51ac3d8c6b246a9d9b0807ac0", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/adal/internal/AuthenticationConstants.java b/common/src/main/java/com/microsoft/identity/common/adal/internal/AuthenticationConstants.java\nindex 9fe9de774..c3a9cf619 100644\n--- a/common/src/main/java/com/microsoft/identity/common/adal/internal/AuthenticationConstants.java\n+++ b/common/src/main/java/com/microsoft/identity/common/adal/internal/AuthenticationConstants.java\n\n@@ -1359,7 +1359,7 @@ public final class AuthenticationConstants {\n         public static final String MSAL_SIGN_OUT_FROM_SHARED_DEVICE_PATH = \"/signOutFromSharedDevice\";\n \n         /**\n-         * URI Path constant for BrokerApi-to-Broker generateShr request using ContentProvider.\n+         * URI Path constant for MSAL-to-Broker generateShr request using ContentProvider.\n          */\n         public static final String GENERATE_SHR_PATH = \"/brokerApi/generateShr\";\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5NzY1NA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518497654", "bodyText": "@rpdome So this value is completely arbitrary? Can I 'claim' 13?", "author": "iambmelt", "createdAt": "2020-11-06T03:06:09Z", "path": "common/src/main/java/com/microsoft/identity/common/adal/internal/AuthenticationConstants.java", "diffHunk": "@@ -1427,6 +1442,11 @@\n          * BrokerContentProvider URI code constant for BrokerApi-to-Broker updateBrt request.\n          */\n         public static final int BROKER_API_UPDATE_BRT_CODE = 12;\n+\n+        /**\n+         * BrokerContentProvider URI code constant for MSAL-to-Broker generateSHR request.", "originalCommit": "89f1a2887b0ec4b45f384cedd8babb109e832f4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUyNDcxNg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518524716", "bodyText": "yep", "author": "rpdome", "createdAt": "2020-11-06T05:01:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5NzY1NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5NzgxOA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518497818", "bodyText": "Increment min broker hello api", "author": "iambmelt", "createdAt": "2020-11-06T03:06:55Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/authscheme/PopAuthenticationSchemeInternal.java", "diffHunk": "@@ -68,26 +70,70 @@\n     @SerializedName(NONCE)\n     private String mNonce;\n \n+    @SerializedName(CLIENT_CLAIMS)\n+    private String mClientClaims;\n+\n     /**\n      * Constructor for gson use.\n      */\n     PopAuthenticationSchemeInternal() {\n         super(SCHEME_POP);\n     }\n \n+    @Deprecated\n     public PopAuthenticationSchemeInternal(@NonNull final IClockSkewManager clockSkewManager,\n-                                    @Nullable final String httpMethod,\n-                                    @NonNull final URL url,\n-                                    @Nullable final String nonce) {\n+                                           @Nullable final String httpMethod,\n+                                           @NonNull final URL url,\n+                                           @Nullable final String nonce) {\n         super(SCHEME_POP);\n         mClockSkewManager = clockSkewManager;\n         mHttpMethod = httpMethod;\n         mUrl = url;\n         mNonce = nonce;\n     }\n \n+    public PopAuthenticationSchemeInternal(@NonNull final IClockSkewManager clockSkewManager,", "originalCommit": "89f1a2887b0ec4b45f384cedd8babb109e832f4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIyODgzOA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r520228838", "bodyText": "AzureAD/microsoft-authentication-library-for-android@c30c347", "author": "iambmelt", "createdAt": "2020-11-10T01:31:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5NzgxOA=="}], "type": "inlineReview", "revised_code": {"commit": "60aa8719a99fb31ae95930dab69386ed19d0ed77", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/authscheme/PopAuthenticationSchemeInternal.java b/common/src/main/java/com/microsoft/identity/common/internal/authscheme/PopAuthenticationSchemeInternal.java\nindex 94618bbff..858eac769 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/authscheme/PopAuthenticationSchemeInternal.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/authscheme/PopAuthenticationSchemeInternal.java\n\n@@ -80,6 +80,15 @@ public class PopAuthenticationSchemeInternal\n         super(SCHEME_POP);\n     }\n \n+    /**\n+     * Constructs a new PopAuthenticationSchemeInternal.\n+     *\n+     * @param clockSkewManager Used to compute and compensate for any client clock-skew relative to\n+     *                         AAD.\n+     * @param httpMethod       The HTTP method associated with this request. Optional.\n+     * @param url              The resource URL of future-recipient of this SHR.\n+     * @param nonce            Client nonce value; for replay protection.\n+     */\n     @Deprecated\n     public PopAuthenticationSchemeInternal(@NonNull final IClockSkewManager clockSkewManager,\n                                            @Nullable final String httpMethod,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5Nzg2MA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518497860", "bodyText": "javadoc", "author": "iambmelt", "createdAt": "2020-11-06T03:07:08Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/authscheme/PopAuthenticationSchemeInternal.java", "diffHunk": "@@ -68,26 +70,70 @@\n     @SerializedName(NONCE)\n     private String mNonce;\n \n+    @SerializedName(CLIENT_CLAIMS)\n+    private String mClientClaims;\n+\n     /**\n      * Constructor for gson use.\n      */\n     PopAuthenticationSchemeInternal() {\n         super(SCHEME_POP);\n     }\n \n+    @Deprecated\n     public PopAuthenticationSchemeInternal(@NonNull final IClockSkewManager clockSkewManager,\n-                                    @Nullable final String httpMethod,\n-                                    @NonNull final URL url,\n-                                    @Nullable final String nonce) {\n+                                           @Nullable final String httpMethod,\n+                                           @NonNull final URL url,\n+                                           @Nullable final String nonce) {\n         super(SCHEME_POP);\n         mClockSkewManager = clockSkewManager;\n         mHttpMethod = httpMethod;\n         mUrl = url;\n         mNonce = nonce;\n     }\n \n+    public PopAuthenticationSchemeInternal(@NonNull final IClockSkewManager clockSkewManager,", "originalCommit": "89f1a2887b0ec4b45f384cedd8babb109e832f4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA0ODA4Ng==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r519048086", "bodyText": "60aa871", "author": "iambmelt", "createdAt": "2020-11-06T23:05:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5Nzg2MA=="}], "type": "inlineReview", "revised_code": {"commit": "60aa8719a99fb31ae95930dab69386ed19d0ed77", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/authscheme/PopAuthenticationSchemeInternal.java b/common/src/main/java/com/microsoft/identity/common/internal/authscheme/PopAuthenticationSchemeInternal.java\nindex 94618bbff..858eac769 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/authscheme/PopAuthenticationSchemeInternal.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/authscheme/PopAuthenticationSchemeInternal.java\n\n@@ -80,6 +80,15 @@ public class PopAuthenticationSchemeInternal\n         super(SCHEME_POP);\n     }\n \n+    /**\n+     * Constructs a new PopAuthenticationSchemeInternal.\n+     *\n+     * @param clockSkewManager Used to compute and compensate for any client clock-skew relative to\n+     *                         AAD.\n+     * @param httpMethod       The HTTP method associated with this request. Optional.\n+     * @param url              The resource URL of future-recipient of this SHR.\n+     * @param nonce            Client nonce value; for replay protection.\n+     */\n     @Deprecated\n     public PopAuthenticationSchemeInternal(@NonNull final IClockSkewManager clockSkewManager,\n                                            @Nullable final String httpMethod,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5ODE2MA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518498160", "bodyText": "Javadoc", "author": "iambmelt", "createdAt": "2020-11-06T03:08:09Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java", "diffHunk": "@@ -0,0 +1,106 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.commands;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.UiRequiredException;\n+import com.microsoft.identity.common.internal.commands.parameters.GenerateShrCommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BaseController;\n+import com.microsoft.identity.common.internal.result.GenerateShrResult;\n+\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.ErrorStrings.NO_ACCOUNT_FOUND;\n+\n+/**\n+ * Command class to perform generation of AT-less SHRs on behalf of a user.\n+ */\n+public class GenerateShrCommand extends BaseCommand<GenerateShrResult> {\n+\n+    private static final String TAG = GenerateShrCommand.class.getSimpleName();\n+\n+    public GenerateShrCommand(@NonNull final GenerateShrCommandParameters parameters,", "originalCommit": "89f1a2887b0ec4b45f384cedd8babb109e832f4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTAzMjMxMA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r519032310", "bodyText": "cd6c57e", "author": "iambmelt", "createdAt": "2020-11-06T22:15:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5ODE2MA=="}], "type": "inlineReview", "revised_code": {"commit": "590e03113450afe1b7e86bc7c8558c9cfd602bb4", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java b/common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java\nindex cd7d9aa1d..4555b451c 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java\n\n@@ -74,6 +74,9 @@ public class GenerateShrCommand extends BaseCommand<GenerateShrResult> {\n                     final String errorCode = result.getErrorCode();\n                     final String errorMessage = result.getErrorMessage();\n \n+                    // To support a shared communication model between the local flow and the\n+                    // broker flow, errors will be returned as properties of the result, instead\n+                    // of as thrown Exceptions\n                     if (NO_ACCOUNT_FOUND.equalsIgnoreCase(errorCode)) {\n                         throw new UiRequiredException(errorCode, errorMessage);\n                     } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5ODMxNw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518498317", "bodyText": "Expand upon this comment -- when is the command serviced locally vs remotely?", "author": "iambmelt", "createdAt": "2020-11-06T03:08:44Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java", "diffHunk": "@@ -0,0 +1,106 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.commands;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.UiRequiredException;\n+import com.microsoft.identity.common.internal.commands.parameters.GenerateShrCommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BaseController;\n+import com.microsoft.identity.common.internal.result.GenerateShrResult;\n+\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.ErrorStrings.NO_ACCOUNT_FOUND;\n+\n+/**\n+ * Command class to perform generation of AT-less SHRs on behalf of a user.\n+ */\n+public class GenerateShrCommand extends BaseCommand<GenerateShrResult> {\n+\n+    private static final String TAG = GenerateShrCommand.class.getSimpleName();\n+\n+    public GenerateShrCommand(@NonNull final GenerateShrCommandParameters parameters,\n+                              @NonNull final List<BaseController> controllers,\n+                              @NonNull final CommandCallback<GenerateShrResult, BaseException> callback,\n+                              @NonNull final String publicApiId) {\n+        super(parameters, controllers, callback, publicApiId);\n+    }\n+\n+    @Override\n+    public GenerateShrResult execute() throws Exception {\n+        final String methodName = \":execute\";\n+\n+        GenerateShrResult result = null;\n+        final GenerateShrCommandParameters parameters = (GenerateShrCommandParameters) getParameters();\n+\n+        // Iterate over our controllers, to service the request either locally or via the broker...", "originalCommit": "89f1a2887b0ec4b45f384cedd8babb109e832f4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA0MDkwNw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r519040907", "bodyText": "7e986dd", "author": "iambmelt", "createdAt": "2020-11-06T22:41:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5ODMxNw=="}], "type": "inlineReview", "revised_code": {"commit": "590e03113450afe1b7e86bc7c8558c9cfd602bb4", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java b/common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java\nindex cd7d9aa1d..4555b451c 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java\n\n@@ -74,6 +74,9 @@ public class GenerateShrCommand extends BaseCommand<GenerateShrResult> {\n                     final String errorCode = result.getErrorCode();\n                     final String errorMessage = result.getErrorMessage();\n \n+                    // To support a shared communication model between the local flow and the\n+                    // broker flow, errors will be returned as properties of the result, instead\n+                    // of as thrown Exceptions\n                     if (NO_ACCOUNT_FOUND.equalsIgnoreCase(errorCode)) {\n                         throw new UiRequiredException(errorCode, errorMessage);\n                     } else {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5ODc4MA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518498780", "bodyText": "Assign a telemetry api id", "author": "iambmelt", "createdAt": "2020-11-06T03:10:25Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/BrokerMsalController.java", "diffHunk": "@@ -753,6 +756,60 @@ public AcquireTokenResult acquireDeviceCodeFlowToken(@SuppressWarnings(WarningTy\n         throw new ClientException(\"acquireDeviceCodeFlowToken() not supported in BrokerMsalController\");\n     }\n \n+    @Override\n+    public GenerateShrResult generateSignedHttpRequest(@NonNull final GenerateShrCommandParameters parameters) throws Exception {\n+        return mBrokerOperationExecutor.execute(parameters, new BrokerOperation<GenerateShrResult>() {\n+\n+            private String negotiatedBrokerProtocolVersion;\n+\n+            @Override\n+            public void performPrerequisites(final @NonNull IIpcStrategy strategy) throws BaseException {\n+                negotiatedBrokerProtocolVersion = hello(strategy, parameters);\n+            }\n+\n+            @NonNull\n+            @Override\n+            public BrokerOperationBundle getBundle() {\n+                return new BrokerOperationBundle(\n+                        MSAL_GENERATE_SHR,\n+                        mActiveBrokerPackageName,\n+                        mRequestAdapter.getRequestBundleForGenerateShr(\n+                                parameters,\n+                                negotiatedBrokerProtocolVersion\n+                        )\n+                );\n+            }\n+\n+            @NonNull\n+            @Override\n+            public GenerateShrResult extractResultBundle(@Nullable final Bundle resultBundle) throws BaseException {\n+                if (null == resultBundle) {\n+                    throw mResultAdapter.getExceptionForEmptyResultBundle();\n+                }\n+\n+                return mResultAdapter.getGenerateShrResultFromResultBundle(resultBundle);\n+            }\n+\n+            @NonNull\n+            @Override\n+            public String getMethodName() {\n+                return \":generateSignedHttpRequest\";\n+            }\n+\n+            @Nullable\n+            @Override\n+            public String getTelemetryApiId() {\n+                return null;", "originalCommit": "89f1a2887b0ec4b45f384cedd8babb109e832f4d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6ec3f20f5c9ae770701016142399ca12db5786dd", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/controllers/BrokerMsalController.java b/common/src/main/java/com/microsoft/identity/common/internal/controllers/BrokerMsalController.java\nindex 31aa5ae25..2fb5052b0 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/controllers/BrokerMsalController.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/controllers/BrokerMsalController.java\n\n@@ -799,13 +799,14 @@ public class BrokerMsalController extends BaseController {\n             @Nullable\n             @Override\n             public String getTelemetryApiId() {\n+                // TODO Needed?\n                 return null;\n             }\n \n             @Override\n             public void putValueInSuccessEvent(@NonNull final ApiEndEvent event,\n                                                @NonNull final GenerateShrResult result) {\n-\n+                // TODO Needed?\n             }\n         });\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5ODkxMg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518498912", "bodyText": "Better place to put this?", "author": "iambmelt", "createdAt": "2020-11-06T03:11:01Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -692,6 +694,82 @@ public AcquireTokenResult acquireDeviceCodeFlowToken(\n         return acquireTokenResult;\n     }\n \n+    @Override\n+    public GenerateShrResult generateSignedHttpRequest(\n+            @NonNull final GenerateShrCommandParameters parameters) throws Exception {\n+        final Context context = parameters.getAndroidApplicationContext();\n+        final IClockSkewManager clockSkewManager = new ClockSkewManager(context);\n+        final OAuth2TokenCache cache = parameters.getOAuth2TokenCache();\n+        final String clientId = parameters.getClientId();\n+        final String homeAccountId = parameters.getHomeAccountId();\n+        final IPoPAuthenticationSchemeParams popSchemeParams = parameters.getPopParameters();\n+\n+        if (userHasLocalAccountRecord(cache, clientId, homeAccountId)) {\n+            // Perform the signing locally...\n+            return generateSignedHttpRequestInternal(context, clockSkewManager, popSchemeParams);\n+        } else {\n+            throw new UiRequiredException(NO_ACCOUNT_FOUND, \"Account does not exist.\");\n+        }\n+    }\n+\n+    /**\n+     * Generates an AT-less SHR using the PoPMgr's internal signing key.\n+     *\n+     * @param context          The current application's {@link Context}.\n+     * @param clockSkewManager An instance of {@link IClockSkewManager}, used to mitigate\n+     *                         clock-skew/drift.\n+     * @param popSchemeParams  The input params used to create the resulting SHR.\n+     * @return The {@link GenerateShrResult} containing the resulint SHR.\n+     * @throws ClientException If an error is encountered.\n+     */\n+    public static synchronized GenerateShrResult generateSignedHttpRequestInternal(@NonNull final Context context,", "originalCommit": "89f1a2887b0ec4b45f384cedd8babb109e832f4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA1MDM2OQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r519050369", "bodyText": "909c6c0", "author": "iambmelt", "createdAt": "2020-11-06T23:14:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5ODkxMg=="}], "type": "inlineReview", "revised_code": {"commit": "909c6c0d537f0ff863cff4f48e1d779936c9f1e6", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java b/common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java\nindex 25e699c60..6382fbc8c 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java\n\n@@ -706,55 +704,12 @@ public class LocalMSALController extends BaseController {\n \n         if (userHasLocalAccountRecord(cache, clientId, homeAccountId)) {\n             // Perform the signing locally...\n-            return generateSignedHttpRequestInternal(context, clockSkewManager, popSchemeParams);\n+            return DevicePoPUtils.generateSignedHttpRequest(context, clockSkewManager, popSchemeParams);\n         } else {\n             throw new UiRequiredException(NO_ACCOUNT_FOUND, \"Account does not exist.\");\n         }\n     }\n \n-    /**\n-     * Generates an AT-less SHR using the PoPMgr's internal signing key.\n-     *\n-     * @param context          The current application's {@link Context}.\n-     * @param clockSkewManager An instance of {@link IClockSkewManager}, used to mitigate\n-     *                         clock-skew/drift.\n-     * @param popSchemeParams  The input params used to create the resulting SHR.\n-     * @return The {@link GenerateShrResult} containing the resulint SHR.\n-     * @throws ClientException If an error is encountered.\n-     */\n-    public static synchronized GenerateShrResult generateSignedHttpRequestInternal(@NonNull final Context context,\n-                                                                                   @NonNull final IClockSkewManager clockSkewManager,\n-                                                                                   @NonNull final IPoPAuthenticationSchemeParams popSchemeParams) throws ClientException {\n-        // Clock-skew correction values\n-        final long ONE_SECOND_MILLIS = 1000L;\n-        final long timestampMillis = clockSkewManager.getAdjustedReferenceTime().getTime();\n-\n-        final String httpMethodStr = popSchemeParams.getHttpMethod();\n-        final URL resourceUrl = popSchemeParams.getUrl();\n-        final String nonce = popSchemeParams.getNonce();\n-        final String clientClaims = popSchemeParams.getClientClaims();\n-        final IDevicePopManager popMgr = Device.getDevicePoPManagerInstance();\n-\n-        // Generate keys, if none exist (should already be initialized)\n-        if (!popMgr.asymmetricKeyExists()) {\n-            popMgr.generateAsymmetricKey(context);\n-        }\n-\n-        final String shr = popMgr.mintSignedHttpRequest(\n-                httpMethodStr,\n-                timestampMillis / ONE_SECOND_MILLIS,\n-                resourceUrl,\n-                nonce,\n-                clientClaims\n-        );\n-\n-        // Create our result object\n-        final GenerateShrResult result = new GenerateShrResult();\n-        result.setShr(shr);\n-\n-        return result;\n-    }\n-\n     /**\n      * Checks if the local cache contains an {@link AccountRecord} for the supplied input.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5OTA1NQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518499055", "bodyText": "say why!", "author": "iambmelt", "createdAt": "2020-11-06T03:11:35Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -953,15 +958,68 @@ public String mintSignedAccessToken(@Nullable final String httpMethod,\n                                         @NonNull final URL requestUrl,\n                                         @NonNull final String accessToken,\n                                         @Nullable final String nonce) throws ClientException {\n+        return mintSignedAccessToken(\n+                httpMethod,\n+                timestamp,\n+                requestUrl,\n+                accessToken,\n+                nonce,\n+                null\n+        );\n+    }\n+\n+    @Override\n+    public String mintSignedAccessToken(@Nullable String httpMethod,\n+                                        final long timestamp,\n+                                        @NonNull final URL requestUrl,\n+                                        @NonNull final String accessToken,\n+                                        @Nullable final String nonce,\n+                                        @Nullable final String clientClaims) throws ClientException {\n+        return mintSignedHttpRequestInternal(\n+                httpMethod,\n+                timestamp,\n+                requestUrl,\n+                accessToken,\n+                nonce,\n+                clientClaims\n+        );\n+    }\n+\n+    @Override\n+    public String mintSignedHttpRequest(@Nullable final String httpMethod,\n+                                        final long timestamp,\n+                                        @NonNull final URL requestUrl,\n+                                        @Nullable final String nonce,\n+                                        @Nullable final String clientClaims) throws ClientException {\n+        return mintSignedHttpRequestInternal(\n+                httpMethod,\n+                timestamp,\n+                requestUrl,\n+                null, // No AT used in this flow", "originalCommit": "89f1a2887b0ec4b45f384cedd8babb109e832f4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk5MTQ4Ng==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518991486", "bodyText": "88337fc", "author": "iambmelt", "createdAt": "2020-11-06T20:34:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5OTA1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "3b0f892bda9ec9e2577db7eb5e5c775b71f90c53", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java b/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\nindex 89e9c46c1..be3acc40b 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\n\n@@ -1013,6 +1013,8 @@ class DevicePopManager implements IDevicePopManager {\n         try {\n             final JWTClaimsSet.Builder claimsBuilder = new JWTClaimsSet.Builder();\n \n+            // This is supported/allowed only to support the generateShr API. By definition, all\n+            // AT/PoP requests will contain an access token, but an SPO signed-cookie will not.\n             if (!TextUtils.isEmpty(accessToken)) {\n                 claimsBuilder.claim(\n                         SignedHttpRequestJwtClaims.ACCESS_TOKEN,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5OTEzOQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518499139", "bodyText": "Document this is only allowed to support generateShr", "author": "iambmelt", "createdAt": "2020-11-06T03:11:52Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -953,15 +958,68 @@ public String mintSignedAccessToken(@Nullable final String httpMethod,\n                                         @NonNull final URL requestUrl,\n                                         @NonNull final String accessToken,\n                                         @Nullable final String nonce) throws ClientException {\n+        return mintSignedAccessToken(\n+                httpMethod,\n+                timestamp,\n+                requestUrl,\n+                accessToken,\n+                nonce,\n+                null\n+        );\n+    }\n+\n+    @Override\n+    public String mintSignedAccessToken(@Nullable String httpMethod,\n+                                        final long timestamp,\n+                                        @NonNull final URL requestUrl,\n+                                        @NonNull final String accessToken,\n+                                        @Nullable final String nonce,\n+                                        @Nullable final String clientClaims) throws ClientException {\n+        return mintSignedHttpRequestInternal(\n+                httpMethod,\n+                timestamp,\n+                requestUrl,\n+                accessToken,\n+                nonce,\n+                clientClaims\n+        );\n+    }\n+\n+    @Override\n+    public String mintSignedHttpRequest(@Nullable final String httpMethod,\n+                                        final long timestamp,\n+                                        @NonNull final URL requestUrl,\n+                                        @Nullable final String nonce,\n+                                        @Nullable final String clientClaims) throws ClientException {\n+        return mintSignedHttpRequestInternal(\n+                httpMethod,\n+                timestamp,\n+                requestUrl,\n+                null, // No AT used in this flow\n+                nonce,\n+                clientClaims\n+        );\n+    }\n+\n+    private String mintSignedHttpRequestInternal(@Nullable final String httpMethod,\n+                                                 final long timestamp,\n+                                                 @NonNull final URL requestUrl,\n+                                                 @Nullable final String accessToken,\n+                                                 @Nullable final String nonce,\n+                                                 @Nullable final String clientClaims) throws ClientException {\n         final Exception exception;\n         final String errCode;\n \n         try {\n             final JWTClaimsSet.Builder claimsBuilder = new JWTClaimsSet.Builder();\n-            claimsBuilder.claim(\n-                    SignedHttpRequestJwtClaims.ACCESS_TOKEN,\n-                    accessToken\n-            );\n+\n+            if (!TextUtils.isEmpty(accessToken)) {", "originalCommit": "89f1a2887b0ec4b45f384cedd8babb109e832f4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk5MTA1Mg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518991052", "bodyText": "3b0f892", "author": "iambmelt", "createdAt": "2020-11-06T20:33:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5OTEzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "3b0f892bda9ec9e2577db7eb5e5c775b71f90c53", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java b/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\nindex 89e9c46c1..be3acc40b 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\n\n@@ -1013,6 +1013,8 @@ class DevicePopManager implements IDevicePopManager {\n         try {\n             final JWTClaimsSet.Builder claimsBuilder = new JWTClaimsSet.Builder();\n \n+            // This is supported/allowed only to support the generateShr API. By definition, all\n+            // AT/PoP requests will contain an access token, but an SPO signed-cookie will not.\n             if (!TextUtils.isEmpty(accessToken)) {\n                 claimsBuilder.claim(\n                         SignedHttpRequestJwtClaims.ACCESS_TOKEN,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5OTM2OA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518499368", "bodyText": "Fix this comment - no at exists", "author": "iambmelt", "createdAt": "2020-11-06T03:12:53Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java", "diffHunk": "@@ -284,4 +284,42 @@ String mintSignedAccessToken(String httpMethod,\n                                  String accessToken,\n                                  String nonce\n     ) throws ClientException;\n+\n+    /**\n+     * Api to create the signed PoP access token.\n+     *\n+     * @param httpMethod   (Optional) The HTTP method that will be used with this outbound request.\n+     * @param timestamp    Seconds since January 1st, 1970 (UTC).\n+     * @param requestUrl   The recipient URL of the outbound request.\n+     * @param accessToken  The access_token from which to derive the signed JWT.\n+     * @param nonce        (Optional) Arbitrary value used for replay protection by middleware.\n+     * @param clientClaims (Optional) Arbitrary String data provided by the caller. Used as the\n+     *                     client_claims value.\n+     * @return The signed PoP access token.\n+     */\n+    String mintSignedAccessToken(String httpMethod,\n+                                 long timestamp,\n+                                 URL requestUrl,\n+                                 String accessToken,\n+                                 String nonce,\n+                                 String clientClaims\n+    ) throws ClientException;\n+\n+    /**\n+     * Api to create the signed PoP access token.", "originalCommit": "89f1a2887b0ec4b45f384cedd8babb109e832f4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk4OTk3MA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518989970", "bodyText": "7d469c3", "author": "iambmelt", "createdAt": "2020-11-06T20:31:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5OTM2OA=="}], "type": "inlineReview", "revised_code": {"commit": "7d469c39534dc140e355ff3b00a514e496e1a2f3", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java b/common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java\nindex dad58897d..83bf71c70 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java\n\n@@ -306,7 +306,7 @@ public interface IDevicePopManager {\n     ) throws ClientException;\n \n     /**\n-     * Api to create the signed PoP access token.\n+     * Api to create the signed HTTP requests (SHRs) without embedding a PoP-AT.\n      *\n      * @param httpMethod   (Optional) The HTTP method that will be used with this outbound request.\n      * @param timestamp    Seconds since January 1st, 1970 (UTC).\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5OTQzOA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518499438", "bodyText": "1 line", "author": "iambmelt", "createdAt": "2020-11-06T03:13:14Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/request/MsalBrokerRequestAdapter.java", "diffHunk": "@@ -196,7 +206,7 @@ public BrokerInteractiveTokenCommandParameters brokerInteractiveParametersFromAc\n         }\n \n         int callingAppUid = intent.getIntExtra(\n-                AuthenticationConstants.Broker.CALLER_INFO_UID, 0\n+                CALLER_INFO_UID, 0", "originalCommit": "89f1a2887b0ec4b45f384cedd8babb109e832f4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk4OTI1NQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518989255", "bodyText": "45f71b2", "author": "iambmelt", "createdAt": "2020-11-06T20:29:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQ5OTQzOA=="}], "type": "inlineReview", "revised_code": {"commit": "45f71b25024961982d651d3da546a0fa8ab7959c", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/request/MsalBrokerRequestAdapter.java b/common/src/main/java/com/microsoft/identity/common/internal/request/MsalBrokerRequestAdapter.java\nindex 9b230047b..e70474287 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/request/MsalBrokerRequestAdapter.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/request/MsalBrokerRequestAdapter.java\n\n@@ -205,9 +205,7 @@ public class MsalBrokerRequestAdapter implements IBrokerRequestAdapter {\n             return BrokerInteractiveTokenCommandParameters.builder().build();\n         }\n \n-        int callingAppUid = intent.getIntExtra(\n-                CALLER_INFO_UID, 0\n-        );\n+        int callingAppUid = intent.getIntExtra(CALLER_INFO_UID, 0);\n \n         List<Pair<String, String>> extraQP = new ArrayList<>();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUwMDEwOA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518500108", "bodyText": "Make this behave like the broker -- don't throw an Exception, instead, return an initialized error", "author": "iambmelt", "createdAt": "2020-11-06T03:16:00Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -692,6 +694,82 @@ public AcquireTokenResult acquireDeviceCodeFlowToken(\n         return acquireTokenResult;\n     }\n \n+    @Override\n+    public GenerateShrResult generateSignedHttpRequest(\n+            @NonNull final GenerateShrCommandParameters parameters) throws Exception {\n+        final Context context = parameters.getAndroidApplicationContext();\n+        final IClockSkewManager clockSkewManager = new ClockSkewManager(context);\n+        final OAuth2TokenCache cache = parameters.getOAuth2TokenCache();\n+        final String clientId = parameters.getClientId();\n+        final String homeAccountId = parameters.getHomeAccountId();\n+        final IPoPAuthenticationSchemeParams popSchemeParams = parameters.getPopParameters();\n+\n+        if (userHasLocalAccountRecord(cache, clientId, homeAccountId)) {\n+            // Perform the signing locally...\n+            return generateSignedHttpRequestInternal(context, clockSkewManager, popSchemeParams);\n+        } else {\n+            throw new UiRequiredException(NO_ACCOUNT_FOUND, \"Account does not exist.\");", "originalCommit": "89f1a2887b0ec4b45f384cedd8babb109e832f4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA2MDk4OA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r519060988", "bodyText": "0ae4907", "author": "iambmelt", "createdAt": "2020-11-06T23:57:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUwMDEwOA=="}], "type": "inlineReview", "revised_code": {"commit": "909c6c0d537f0ff863cff4f48e1d779936c9f1e6", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java b/common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java\nindex 25e699c60..6382fbc8c 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java\n\n@@ -706,55 +704,12 @@ public class LocalMSALController extends BaseController {\n \n         if (userHasLocalAccountRecord(cache, clientId, homeAccountId)) {\n             // Perform the signing locally...\n-            return generateSignedHttpRequestInternal(context, clockSkewManager, popSchemeParams);\n+            return DevicePoPUtils.generateSignedHttpRequest(context, clockSkewManager, popSchemeParams);\n         } else {\n             throw new UiRequiredException(NO_ACCOUNT_FOUND, \"Account does not exist.\");\n         }\n     }\n \n-    /**\n-     * Generates an AT-less SHR using the PoPMgr's internal signing key.\n-     *\n-     * @param context          The current application's {@link Context}.\n-     * @param clockSkewManager An instance of {@link IClockSkewManager}, used to mitigate\n-     *                         clock-skew/drift.\n-     * @param popSchemeParams  The input params used to create the resulting SHR.\n-     * @return The {@link GenerateShrResult} containing the resulint SHR.\n-     * @throws ClientException If an error is encountered.\n-     */\n-    public static synchronized GenerateShrResult generateSignedHttpRequestInternal(@NonNull final Context context,\n-                                                                                   @NonNull final IClockSkewManager clockSkewManager,\n-                                                                                   @NonNull final IPoPAuthenticationSchemeParams popSchemeParams) throws ClientException {\n-        // Clock-skew correction values\n-        final long ONE_SECOND_MILLIS = 1000L;\n-        final long timestampMillis = clockSkewManager.getAdjustedReferenceTime().getTime();\n-\n-        final String httpMethodStr = popSchemeParams.getHttpMethod();\n-        final URL resourceUrl = popSchemeParams.getUrl();\n-        final String nonce = popSchemeParams.getNonce();\n-        final String clientClaims = popSchemeParams.getClientClaims();\n-        final IDevicePopManager popMgr = Device.getDevicePoPManagerInstance();\n-\n-        // Generate keys, if none exist (should already be initialized)\n-        if (!popMgr.asymmetricKeyExists()) {\n-            popMgr.generateAsymmetricKey(context);\n-        }\n-\n-        final String shr = popMgr.mintSignedHttpRequest(\n-                httpMethodStr,\n-                timestampMillis / ONE_SECOND_MILLIS,\n-                resourceUrl,\n-                nonce,\n-                clientClaims\n-        );\n-\n-        // Create our result object\n-        final GenerateShrResult result = new GenerateShrResult();\n-        result.setShr(shr);\n-\n-        return result;\n-    }\n-\n     /**\n      * Checks if the local cache contains an {@link AccountRecord} for the supplied input.\n      *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUwMjg5OA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r518502898", "bodyText": "Refactor this out", "author": "iambmelt", "createdAt": "2020-11-06T03:28:20Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java", "diffHunk": "@@ -0,0 +1,106 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.commands;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.UiRequiredException;\n+import com.microsoft.identity.common.internal.commands.parameters.GenerateShrCommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BaseController;\n+import com.microsoft.identity.common.internal.result.GenerateShrResult;\n+\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.ErrorStrings.NO_ACCOUNT_FOUND;\n+\n+/**\n+ * Command class to perform generation of AT-less SHRs on behalf of a user.\n+ */\n+public class GenerateShrCommand extends BaseCommand<GenerateShrResult> {\n+\n+    private static final String TAG = GenerateShrCommand.class.getSimpleName();\n+\n+    public GenerateShrCommand(@NonNull final GenerateShrCommandParameters parameters,\n+                              @NonNull final List<BaseController> controllers,\n+                              @NonNull final CommandCallback<GenerateShrResult, BaseException> callback,\n+                              @NonNull final String publicApiId) {\n+        super(parameters, controllers, callback, publicApiId);\n+    }\n+\n+    @Override\n+    public GenerateShrResult execute() throws Exception {\n+        final String methodName = \":execute\";\n+\n+        GenerateShrResult result = null;\n+        final GenerateShrCommandParameters parameters = (GenerateShrCommandParameters) getParameters();\n+\n+        // Iterate over our controllers, to service the request either locally or via the broker...\n+        BaseController controller;\n+        for (int ii = 0; ii < getControllers().size(); ii++) {\n+            controller = getControllers().get(ii);\n+\n+            com.microsoft.identity.common.internal.logging.Logger.verbose(\n+                    TAG + methodName,\n+                    \"Executing with controller: \"\n+                            + controller.getClass().getSimpleName()\n+            );\n+\n+            try {\n+                result = controller.generateSignedHttpRequest(parameters);\n+\n+                if (null != result.getErrorCode()) {\n+                    final String errorCode = result.getErrorCode();\n+                    final String errorMessage = result.getErrorMessage();\n+\n+                    if (NO_ACCOUNT_FOUND.equalsIgnoreCase(errorCode)) {\n+                        throw new UiRequiredException(errorCode, errorMessage);\n+                    } else {\n+                        throw new ClientException(errorCode, errorMessage);\n+                    }\n+                }\n+\n+            } catch (final UiRequiredException e) {", "originalCommit": "89f1a2887b0ec4b45f384cedd8babb109e832f4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA2MDk3MA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r519060970", "bodyText": "0ae4907", "author": "iambmelt", "createdAt": "2020-11-06T23:57:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODUwMjg5OA=="}], "type": "inlineReview", "revised_code": {"commit": "590e03113450afe1b7e86bc7c8558c9cfd602bb4", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java b/common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java\nindex cd7d9aa1d..4555b451c 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java\n\n@@ -74,6 +74,9 @@ public class GenerateShrCommand extends BaseCommand<GenerateShrResult> {\n                     final String errorCode = result.getErrorCode();\n                     final String errorMessage = result.getErrorMessage();\n \n+                    // To support a shared communication model between the local flow and the\n+                    // broker flow, errors will be returned as properties of the result, instead\n+                    // of as thrown Exceptions\n                     if (NO_ACCOUNT_FOUND.equalsIgnoreCase(errorCode)) {\n                         throw new UiRequiredException(errorCode, errorMessage);\n                     } else {\n"}}, {"oid": "6ec3f20f5c9ae770701016142399ca12db5786dd", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/6ec3f20f5c9ae770701016142399ca12db5786dd", "message": "Add TODOs for telemetry", "committedDate": "2020-11-06T19:59:53Z", "type": "commit"}, {"oid": "2a7cdc79c17488466505ff6cb895d42a4f2ad8a7", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/2a7cdc79c17488466505ff6cb895d42a4f2ad8a7", "message": "Bugfix for empty string key", "committedDate": "2020-11-06T20:11:20Z", "type": "commit"}, {"oid": "1f0cf398d5315396066271e00a2013f81919059b", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/1f0cf398d5315396066271e00a2013f81919059b", "message": "Merge branch 'dev' into iambmelt/msal-1207", "committedDate": "2020-11-06T20:24:31Z", "type": "commit"}, {"oid": "0f2bb807b1aae6c51ac3d8c6b246a9d9b0807ac0", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/0f2bb807b1aae6c51ac3d8c6b246a9d9b0807ac0", "message": "Corrects comment", "committedDate": "2020-11-06T20:26:43Z", "type": "commit"}, {"oid": "45f71b25024961982d651d3da546a0fa8ab7959c", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/45f71b25024961982d651d3da546a0fa8ab7959c", "message": "Formatting fix", "committedDate": "2020-11-06T20:28:59Z", "type": "commit"}, {"oid": "7d469c39534dc140e355ff3b00a514e496e1a2f3", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/7d469c39534dc140e355ff3b00a514e496e1a2f3", "message": "Corrects javadoc", "committedDate": "2020-11-06T20:30:41Z", "type": "commit"}, {"oid": "3b0f892bda9ec9e2577db7eb5e5c775b71f90c53", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/3b0f892bda9ec9e2577db7eb5e5c775b71f90c53", "message": "Adding comment, explaining why the normally @NonNull AT is allowed to be\n@Nullable", "committedDate": "2020-11-06T20:32:54Z", "type": "commit"}, {"oid": "88337fc33dbc613e5843d5daa4e36f5fc4b9825d", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/88337fc33dbc613e5843d5daa4e36f5fc4b9825d", "message": "Improving comment", "committedDate": "2020-11-06T20:34:05Z", "type": "commit"}, {"oid": "590e03113450afe1b7e86bc7c8558c9cfd602bb4", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/590e03113450afe1b7e86bc7c8558c9cfd602bb4", "message": "Add comment explaining error payload in the result object", "committedDate": "2020-11-06T20:35:58Z", "type": "commit"}, {"oid": "cd6c57e27831a8b7d406efc3a460931e6aa4961d", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/cd6c57e27831a8b7d406efc3a460931e6aa4961d", "message": "javadoc ctor", "committedDate": "2020-11-06T22:15:08Z", "type": "commit"}, {"oid": "7e986dd121ee4b8dfa70b07f863f3749d24d99fa", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/7e986dd121ee4b8dfa70b07f863f3749d24d99fa", "message": "Adding comment", "committedDate": "2020-11-06T22:38:29Z", "type": "commit"}, {"oid": "60aa8719a99fb31ae95930dab69386ed19d0ed77", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/60aa8719a99fb31ae95930dab69386ed19d0ed77", "message": "Javadoc", "committedDate": "2020-11-06T23:03:24Z", "type": "commit"}, {"oid": "909c6c0d537f0ff863cff4f48e1d779936c9f1e6", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/909c6c0d537f0ff863cff4f48e1d779936c9f1e6", "message": "Refactor -- move PoP funcs to a util class", "committedDate": "2020-11-06T23:11:44Z", "type": "commit"}, {"oid": "aede0aa29d87280fda3c00d5f3ca11700091c922", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/aede0aa29d87280fda3c00d5f3ca11700091c922", "message": "Merge branch 'dev' into iambmelt/msal-1207", "committedDate": "2020-11-06T23:14:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA1MTUzNQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r519051535", "bodyText": "javadoc", "author": "iambmelt", "createdAt": "2020-11-06T23:18:33Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/result/MsalBrokerResultAdapter.java", "diffHunk": "@@ -628,4 +629,14 @@ public boolean getDeviceModeFromResultBundle(@NonNull final Bundle bundle) throw\n     public @NonNull ClientException getExceptionForEmptyResultBundle() {\n         return new ClientException(INVALID_BROKER_BUNDLE, \"Broker Result not returned from Broker.\");\n     }\n+\n+    public GenerateShrResult getGenerateShrResultFromResultBundle(@NonNull final Bundle resultBundle) {", "originalCommit": "aede0aa29d87280fda3c00d5f3ca11700091c922", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA3MzIyMA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r519073220", "bodyText": "cb32c15", "author": "iambmelt", "createdAt": "2020-11-07T01:01:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA1MTUzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "cb32c15ee81c98ba6c66383e2c6077cd014c76e3", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/result/MsalBrokerResultAdapter.java b/common/src/main/java/com/microsoft/identity/common/internal/result/MsalBrokerResultAdapter.java\nindex c0af37cea..4218498b8 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/result/MsalBrokerResultAdapter.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/result/MsalBrokerResultAdapter.java\n\n@@ -630,6 +630,12 @@ public class MsalBrokerResultAdapter implements IBrokerResultAdapter {\n         return new ClientException(INVALID_BROKER_BUNDLE, \"Broker Result not returned from Broker.\");\n     }\n \n+    /**\n+     * Deserializes the {@link GenerateShrResult} object from the broker response {@link Bundle}.\n+     * @param resultBundle The result Bundle produced by the broker.\n+     * @return The deserialized GenerateShrResult object containing the result (or corresponding\n+     * error).\n+     */\n     public GenerateShrResult getGenerateShrResultFromResultBundle(@NonNull final Bundle resultBundle) {\n         final String resultJson = resultBundle.getString(BROKER_GENERATE_SHR_RESULT);\n         final GenerateShrResult shrResult = sRequestAdapterGsonInstance.fromJson(\n"}}, {"oid": "0ae490703e69399c53f0d95c2bbd5c1b207a2e76", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/0ae490703e69399c53f0d95c2bbd5c1b207a2e76", "message": "Code simplification (make local flow behave like broker)", "committedDate": "2020-11-06T23:54:27Z", "type": "commit"}, {"oid": "cb32c15ee81c98ba6c66383e2c6077cd014c76e3", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/cb32c15ee81c98ba6c66383e2c6077cd014c76e3", "message": "Adds javadoc", "committedDate": "2020-11-07T01:00:39Z", "type": "commit"}, {"oid": "fc73e1eb8d0b3a60e1f1947f72eb8dd3609c8afd", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/fc73e1eb8d0b3a60e1f1947f72eb8dd3609c8afd", "message": "Update path to make clearer this API is for MSAL consumption", "committedDate": "2020-11-07T01:08:06Z", "type": "commit"}, {"oid": "2d26f277852dcaa7d02fd7e50b0611a6ce9dc45c", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/2d26f277852dcaa7d02fd7e50b0611a6ce9dc45c", "message": "Add support for additiona IPC strategies", "committedDate": "2020-11-07T01:33:18Z", "type": "commit"}, {"oid": "e97011e364f28ec3ccd4a4a5e986919566ea02f8", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/e97011e364f28ec3ccd4a4a5e986919566ea02f8", "message": "Increase the broker protocol version number for client_claims and\ngenerateShr. Update the changelog to document this fact", "committedDate": "2020-11-07T01:54:24Z", "type": "commit"}, {"oid": "27dbe428130ccbfb1030f62e9bd60e5d3c14a450", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/27dbe428130ccbfb1030f62e9bd60e5d3c14a450", "message": "Fix test compilation error", "committedDate": "2020-11-07T01:59:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTA4NzE1OQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r519087159", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // the embedded PoP keys. If not local user-state exists, the broker will be delegated to\n          \n          \n            \n                    // the embedded PoP keys. If no local user-state exists, the broker will be delegated to", "author": "iambmelt", "createdAt": "2020-11-07T03:04:41Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java", "diffHunk": "@@ -0,0 +1,110 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.commands;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.UiRequiredException;\n+import com.microsoft.identity.common.internal.commands.parameters.GenerateShrCommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BaseController;\n+import com.microsoft.identity.common.internal.result.GenerateShrResult;\n+\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.ErrorStrings.NO_ACCOUNT_FOUND;\n+\n+/**\n+ * Command class to perform generation of AT-less SHRs on behalf of a user.\n+ */\n+public class GenerateShrCommand extends BaseCommand<GenerateShrResult> {\n+\n+    private static final String TAG = GenerateShrCommand.class.getSimpleName();\n+\n+    /**\n+     * Constructs a new GenerateShrCommand.\n+     *\n+     * @param parameters  The command's input parameters.\n+     * @param controllers The controllers on which to run this command.\n+     * @param callback    The command to notify once execution has completed.\n+     * @param publicApiId The public API ID of this command.\n+     */\n+    public GenerateShrCommand(@NonNull final GenerateShrCommandParameters parameters,\n+                              @NonNull final List<BaseController> controllers,\n+                              @NonNull final CommandCallback<GenerateShrResult, BaseException> callback,\n+                              @NonNull final String publicApiId) {\n+        super(parameters, controllers, callback, publicApiId);\n+    }\n+\n+    @Override\n+    public GenerateShrResult execute() throws Exception {\n+        final String methodName = \":execute\";\n+\n+        GenerateShrResult result = null;\n+        final GenerateShrCommandParameters parameters = (GenerateShrCommandParameters) getParameters();\n+\n+        // Iterate over our controllers, to service the request either locally or via the broker...\n+        // if the local (embedded) cache contains tokens for the supplied user, we will sign using\n+        // the embedded PoP keys. If not local user-state exists, the broker will be delegated to", "originalCommit": "27dbe428130ccbfb1030f62e9bd60e5d3c14a450", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1bcec4f7d2a6210e25b34e4c69643b804ce24aa9", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java b/common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java\nindex 7df6a11c0..0655db05b 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java\n\n@@ -66,7 +66,7 @@ public class GenerateShrCommand extends BaseCommand<GenerateShrResult> {\n \n         // Iterate over our controllers, to service the request either locally or via the broker...\n         // if the local (embedded) cache contains tokens for the supplied user, we will sign using\n-        // the embedded PoP keys. If not local user-state exists, the broker will be delegated to\n+        // the embedded PoP keys. If no local user-state exists, the broker will be delegated to\n         // where the same check is performed.\n         BaseController controller;\n         for (int ii = 0; ii < getControllers().size(); ii++) {\n"}}, {"oid": "1bcec4f7d2a6210e25b34e4c69643b804ce24aa9", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/1bcec4f7d2a6210e25b34e4c69643b804ce24aa9", "message": "Update common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java", "committedDate": "2020-11-07T03:04:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE0ODU4OA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r519148588", "bodyText": "TODO: run this error path in a manual test", "author": "iambmelt", "createdAt": "2020-11-07T07:38:51Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java", "diffHunk": "@@ -0,0 +1,110 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.commands;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.UiRequiredException;\n+import com.microsoft.identity.common.internal.commands.parameters.GenerateShrCommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BaseController;\n+import com.microsoft.identity.common.internal.result.GenerateShrResult;\n+\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.ErrorStrings.NO_ACCOUNT_FOUND;\n+\n+/**\n+ * Command class to perform generation of AT-less SHRs on behalf of a user.\n+ */\n+public class GenerateShrCommand extends BaseCommand<GenerateShrResult> {\n+\n+    private static final String TAG = GenerateShrCommand.class.getSimpleName();\n+\n+    /**\n+     * Constructs a new GenerateShrCommand.\n+     *\n+     * @param parameters  The command's input parameters.\n+     * @param controllers The controllers on which to run this command.\n+     * @param callback    The command to notify once execution has completed.\n+     * @param publicApiId The public API ID of this command.\n+     */\n+    public GenerateShrCommand(@NonNull final GenerateShrCommandParameters parameters,\n+                              @NonNull final List<BaseController> controllers,\n+                              @NonNull final CommandCallback<GenerateShrResult, BaseException> callback,\n+                              @NonNull final String publicApiId) {\n+        super(parameters, controllers, callback, publicApiId);\n+    }\n+\n+    @Override\n+    public GenerateShrResult execute() throws Exception {\n+        final String methodName = \":execute\";\n+\n+        GenerateShrResult result = null;\n+        final GenerateShrCommandParameters parameters = (GenerateShrCommandParameters) getParameters();\n+\n+        // Iterate over our controllers, to service the request either locally or via the broker...\n+        // if the local (embedded) cache contains tokens for the supplied user, we will sign using\n+        // the embedded PoP keys. If no local user-state exists, the broker will be delegated to\n+        // where the same check is performed.\n+        BaseController controller;\n+        for (int ii = 0; ii < getControllers().size(); ii++) {\n+            controller = getControllers().get(ii);\n+\n+            com.microsoft.identity.common.internal.logging.Logger.verbose(\n+                    TAG + methodName,\n+                    \"Executing with controller: \"\n+                            + controller.getClass().getSimpleName()\n+            );\n+\n+            result = controller.generateSignedHttpRequest(parameters);\n+\n+            if (null != result.getErrorCode()) {\n+                final String errorCode = result.getErrorCode();\n+                final String errorMessage = result.getErrorMessage();\n+\n+                // To support a shared communication model between the local flow and the\n+                // broker flow, errors will be returned as properties of the result, instead\n+                // of as thrown Exceptions\n+                if (NO_ACCOUNT_FOUND.equalsIgnoreCase(errorCode)) {\n+                    if (getControllers().size() > ii + 1) {\n+                        // Try our next controller\n+                        continue;\n+                    } else {\n+                        throw new UiRequiredException(errorCode, errorMessage);\n+                    }\n+                } else {\n+                    throw new ClientException(errorCode, errorMessage);", "originalCommit": "1bcec4f7d2a6210e25b34e4c69643b804ce24aa9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIzMTI4Nw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r520231287", "bodyText": "Tested and behaves as expected.", "author": "iambmelt", "createdAt": "2020-11-10T01:39:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE0ODU4OA=="}], "type": "inlineReview", "revised_code": {"commit": "f9a2fcd4a74cded47d9f8b4c0d17628ecde3f422", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java b/common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java\nindex 0655db05b..62059e30a 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java\n\n@@ -105,6 +105,7 @@ public class GenerateShrCommand extends BaseCommand<GenerateShrResult> {\n \n     @Override\n     public boolean isEligibleForEstsTelemetry() {\n+        // There is no web service interaction in this flow.\n         return false;\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAxNDU4Mw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r520014583", "bodyText": "Not required -- there is no interaction with the server here.", "author": "iambmelt", "createdAt": "2020-11-09T18:07:35Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java", "diffHunk": "@@ -0,0 +1,110 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.commands;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.UiRequiredException;\n+import com.microsoft.identity.common.internal.commands.parameters.GenerateShrCommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BaseController;\n+import com.microsoft.identity.common.internal.result.GenerateShrResult;\n+\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.ErrorStrings.NO_ACCOUNT_FOUND;\n+\n+/**\n+ * Command class to perform generation of AT-less SHRs on behalf of a user.\n+ */\n+public class GenerateShrCommand extends BaseCommand<GenerateShrResult> {\n+\n+    private static final String TAG = GenerateShrCommand.class.getSimpleName();\n+\n+    /**\n+     * Constructs a new GenerateShrCommand.\n+     *\n+     * @param parameters  The command's input parameters.\n+     * @param controllers The controllers on which to run this command.\n+     * @param callback    The command to notify once execution has completed.\n+     * @param publicApiId The public API ID of this command.\n+     */\n+    public GenerateShrCommand(@NonNull final GenerateShrCommandParameters parameters,\n+                              @NonNull final List<BaseController> controllers,\n+                              @NonNull final CommandCallback<GenerateShrResult, BaseException> callback,\n+                              @NonNull final String publicApiId) {\n+        super(parameters, controllers, callback, publicApiId);\n+    }\n+\n+    @Override\n+    public GenerateShrResult execute() throws Exception {\n+        final String methodName = \":execute\";\n+\n+        GenerateShrResult result = null;\n+        final GenerateShrCommandParameters parameters = (GenerateShrCommandParameters) getParameters();\n+\n+        // Iterate over our controllers, to service the request either locally or via the broker...\n+        // if the local (embedded) cache contains tokens for the supplied user, we will sign using\n+        // the embedded PoP keys. If no local user-state exists, the broker will be delegated to\n+        // where the same check is performed.\n+        BaseController controller;\n+        for (int ii = 0; ii < getControllers().size(); ii++) {\n+            controller = getControllers().get(ii);\n+\n+            com.microsoft.identity.common.internal.logging.Logger.verbose(\n+                    TAG + methodName,\n+                    \"Executing with controller: \"\n+                            + controller.getClass().getSimpleName()\n+            );\n+\n+            result = controller.generateSignedHttpRequest(parameters);\n+\n+            if (null != result.getErrorCode()) {\n+                final String errorCode = result.getErrorCode();\n+                final String errorMessage = result.getErrorMessage();\n+\n+                // To support a shared communication model between the local flow and the\n+                // broker flow, errors will be returned as properties of the result, instead\n+                // of as thrown Exceptions\n+                if (NO_ACCOUNT_FOUND.equalsIgnoreCase(errorCode)) {\n+                    if (getControllers().size() > ii + 1) {\n+                        // Try our next controller\n+                        continue;\n+                    } else {\n+                        throw new UiRequiredException(errorCode, errorMessage);\n+                    }\n+                } else {\n+                    throw new ClientException(errorCode, errorMessage);\n+                }\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean isEligibleForEstsTelemetry() {\n+        return false;", "originalCommit": "1bcec4f7d2a6210e25b34e4c69643b804ce24aa9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAxNDY5NA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r520014694", "bodyText": "(Add comment)", "author": "iambmelt", "createdAt": "2020-11-09T18:07:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAxNDU4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDIyOTk1Mg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r520229952", "bodyText": "f9a2fcd", "author": "iambmelt", "createdAt": "2020-11-10T01:35:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAxNDU4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "f9a2fcd4a74cded47d9f8b4c0d17628ecde3f422", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java b/common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java\nindex 0655db05b..62059e30a 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java\n\n@@ -105,6 +105,7 @@ public class GenerateShrCommand extends BaseCommand<GenerateShrResult> {\n \n     @Override\n     public boolean isEligibleForEstsTelemetry() {\n+        // There is no web service interaction in this flow.\n         return false;\n     }\n }\n"}}, {"oid": "938d478225fa5052f2df15046f9f39d091425acb", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/938d478225fa5052f2df15046f9f39d091425acb", "message": "Merge branch 'dev' into iambmelt/msal-1207", "committedDate": "2020-11-10T01:31:04Z", "type": "commit"}, {"oid": "f9a2fcd4a74cded47d9f8b4c0d17628ecde3f422", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/f9a2fcd4a74cded47d9f8b4c0d17628ecde3f422", "message": "Add comment, clarify why no ESTS telemetry", "committedDate": "2020-11-10T01:34:51Z", "type": "commit"}, {"oid": "3a78d4a69b64c4a2fecbd61706cfdf717d8c5cbf", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/3a78d4a69b64c4a2fecbd61706cfdf717d8c5cbf", "message": "Resolve POSIX warning (no EOL)", "committedDate": "2020-11-10T01:40:13Z", "type": "commit"}, {"oid": "6d1c210a31b49228bf303b0c9275bc92998782eb", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/6d1c210a31b49228bf303b0c9275bc92998782eb", "message": "Merge branch 'dev' into iambmelt/msal-1207", "committedDate": "2020-11-10T01:48:12Z", "type": "commit"}, {"oid": "be3caa1bf8cd077512942b427abad2b82aa5e707", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/be3caa1bf8cd077512942b427abad2b82aa5e707", "message": "Adds unit tests", "committedDate": "2020-11-10T02:28:09Z", "type": "commit"}, {"oid": "dcae65808d3c9827839d12a8d4cbe074d719ccdf", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/dcae65808d3c9827839d12a8d4cbe074d719ccdf", "message": "Merge branch 'dev' into iambmelt/msal-1207", "committedDate": "2020-11-10T21:10:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA5OTc2OA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r521099768", "bodyText": "How are we certain that the local controller is the first one in the list here?", "author": "shahzaibj", "createdAt": "2020-11-11T04:07:44Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java", "diffHunk": "@@ -0,0 +1,111 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.commands;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.UiRequiredException;\n+import com.microsoft.identity.common.internal.commands.parameters.GenerateShrCommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BaseController;\n+import com.microsoft.identity.common.internal.result.GenerateShrResult;\n+\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.ErrorStrings.NO_ACCOUNT_FOUND;\n+\n+/**\n+ * Command class to perform generation of AT-less SHRs on behalf of a user.\n+ */\n+public class GenerateShrCommand extends BaseCommand<GenerateShrResult> {\n+\n+    private static final String TAG = GenerateShrCommand.class.getSimpleName();\n+\n+    /**\n+     * Constructs a new GenerateShrCommand.\n+     *\n+     * @param parameters  The command's input parameters.\n+     * @param controllers The controllers on which to run this command.\n+     * @param callback    The command to notify once execution has completed.\n+     * @param publicApiId The public API ID of this command.\n+     */\n+    public GenerateShrCommand(@NonNull final GenerateShrCommandParameters parameters,\n+                              @NonNull final List<BaseController> controllers,\n+                              @NonNull final CommandCallback<GenerateShrResult, BaseException> callback,\n+                              @NonNull final String publicApiId) {\n+        super(parameters, controllers, callback, publicApiId);\n+    }\n+\n+    @Override\n+    public GenerateShrResult execute() throws Exception {\n+        final String methodName = \":execute\";\n+\n+        GenerateShrResult result = null;\n+        final GenerateShrCommandParameters parameters = (GenerateShrCommandParameters) getParameters();\n+\n+        // Iterate over our controllers, to service the request either locally or via the broker...\n+        // if the local (embedded) cache contains tokens for the supplied user, we will sign using\n+        // the embedded PoP keys. If no local user-state exists, the broker will be delegated to\n+        // where the same check is performed.", "originalCommit": "dcae65808d3c9827839d12a8d4cbe074d719ccdf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2NzA1Mg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r521667052", "bodyText": "This works the same way as the SilentTokenCommand: by calling MsalControllerFactory#getAllControllers where the local controller is always the first one tried. See:\nhttps://github.com/AzureAD/microsoft-authentication-library-for-android/blob/dev/msal/src/main/java/com/microsoft/identity/client/internal/controllers/MSALControllerFactory.java#L100", "author": "iambmelt", "createdAt": "2020-11-11T22:06:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA5OTc2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2OTMwNw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r521669307", "bodyText": "Marking resolved; feel free to unresolve if you have more feedback on this", "author": "iambmelt", "createdAt": "2020-11-11T22:12:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA5OTc2OA=="}], "type": "inlineReview", "revised_code": {"commit": "fd304366795494295883bda82ee352f53f8a35c8", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java b/common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java\nindex 62059e30a..004855642 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java\n\n@@ -84,7 +84,7 @@ public class GenerateShrCommand extends BaseCommand<GenerateShrResult> {\n                 final String errorCode = result.getErrorCode();\n                 final String errorMessage = result.getErrorMessage();\n \n-                // To support a shared communication model between the local flow and the\n+                // To support a consistent communication model between the local flow and the\n                 // broker flow, errors will be returned as properties of the result, instead\n                 // of as thrown Exceptions\n                 if (NO_ACCOUNT_FOUND.equalsIgnoreCase(errorCode)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEwMDA4OQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r521100089", "bodyText": "what do we mean by shared communication model? are these controllers talking to each other?", "author": "shahzaibj", "createdAt": "2020-11-11T04:09:08Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java", "diffHunk": "@@ -0,0 +1,111 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.commands;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.UiRequiredException;\n+import com.microsoft.identity.common.internal.commands.parameters.GenerateShrCommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BaseController;\n+import com.microsoft.identity.common.internal.result.GenerateShrResult;\n+\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.ErrorStrings.NO_ACCOUNT_FOUND;\n+\n+/**\n+ * Command class to perform generation of AT-less SHRs on behalf of a user.\n+ */\n+public class GenerateShrCommand extends BaseCommand<GenerateShrResult> {\n+\n+    private static final String TAG = GenerateShrCommand.class.getSimpleName();\n+\n+    /**\n+     * Constructs a new GenerateShrCommand.\n+     *\n+     * @param parameters  The command's input parameters.\n+     * @param controllers The controllers on which to run this command.\n+     * @param callback    The command to notify once execution has completed.\n+     * @param publicApiId The public API ID of this command.\n+     */\n+    public GenerateShrCommand(@NonNull final GenerateShrCommandParameters parameters,\n+                              @NonNull final List<BaseController> controllers,\n+                              @NonNull final CommandCallback<GenerateShrResult, BaseException> callback,\n+                              @NonNull final String publicApiId) {\n+        super(parameters, controllers, callback, publicApiId);\n+    }\n+\n+    @Override\n+    public GenerateShrResult execute() throws Exception {\n+        final String methodName = \":execute\";\n+\n+        GenerateShrResult result = null;\n+        final GenerateShrCommandParameters parameters = (GenerateShrCommandParameters) getParameters();\n+\n+        // Iterate over our controllers, to service the request either locally or via the broker...\n+        // if the local (embedded) cache contains tokens for the supplied user, we will sign using\n+        // the embedded PoP keys. If no local user-state exists, the broker will be delegated to\n+        // where the same check is performed.\n+        BaseController controller;\n+        for (int ii = 0; ii < getControllers().size(); ii++) {\n+            controller = getControllers().get(ii);\n+\n+            com.microsoft.identity.common.internal.logging.Logger.verbose(\n+                    TAG + methodName,\n+                    \"Executing with controller: \"\n+                            + controller.getClass().getSimpleName()\n+            );\n+\n+            result = controller.generateSignedHttpRequest(parameters);\n+\n+            if (null != result.getErrorCode()) {\n+                final String errorCode = result.getErrorCode();\n+                final String errorMessage = result.getErrorMessage();\n+\n+                // To support a shared communication model between the local flow and the", "originalCommit": "dcae65808d3c9827839d12a8d4cbe074d719ccdf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2ODYyMA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r521668620", "bodyText": "No no -- this refers to the fact that errors from the various controllers (local or broker) aren't thrown, but are instead returned as properties of the GenerateShrResult. So even though we could use throw locally, we don't so that the local controller behaves like the broker (where we cannot throw Exceptions across process boundaries) I'll clarify this comment", "author": "iambmelt", "createdAt": "2020-11-11T22:10:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEwMDA4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2OTA1NQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r521669055", "bodyText": "Update this comment to change shared -> consistent", "author": "iambmelt", "createdAt": "2020-11-11T22:11:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEwMDA4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "fd304366795494295883bda82ee352f53f8a35c8", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java b/common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java\nindex 62059e30a..004855642 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java\n\n@@ -84,7 +84,7 @@ public class GenerateShrCommand extends BaseCommand<GenerateShrResult> {\n                 final String errorCode = result.getErrorCode();\n                 final String errorMessage = result.getErrorMessage();\n \n-                // To support a shared communication model between the local flow and the\n+                // To support a consistent communication model between the local flow and the\n                 // broker flow, errors will be returned as properties of the result, instead\n                 // of as thrown Exceptions\n                 if (NO_ACCOUNT_FOUND.equalsIgnoreCase(errorCode)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEwMTU2OQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r521101569", "bodyText": "needs formatting", "author": "shahzaibj", "createdAt": "2020-11-11T04:15:02Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/request/MsalBrokerRequestAdapter.java", "diffHunk": "@@ -597,11 +584,40 @@ public Bundle getRequestBundleForRemoveAccount(@NonNull final RemoveAccountComma\n     public Bundle getRequestBundleForRemoveAccountFromSharedDevice(@NonNull final RemoveAccountCommandParameters parameters,\n                                                                    @Nullable final String negotiatedBrokerProtocolVersion) {\n         final Bundle requestBundle = new Bundle();\n-        requestBundle.putString(\n-                AuthenticationConstants.Broker.NEGOTIATED_BP_VERSION_KEY,\n-                negotiatedBrokerProtocolVersion\n+        requestBundle.putString(NEGOTIATED_BP_VERSION_KEY, negotiatedBrokerProtocolVersion);\n+\n+        return requestBundle;\n+    }\n+\n+    /**\n+     * Method to construct a request {@link Bundle} for broker generateShr", "originalCommit": "dcae65808d3c9827839d12a8d4cbe074d719ccdf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY3NTg5OA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r521675898", "bodyText": "a98d10d", "author": "iambmelt", "createdAt": "2020-11-11T22:26:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEwMTU2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "a98d10d0e05d3440aa7b5829f2c7dcf4ffcc6aef", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/request/MsalBrokerRequestAdapter.java b/common/src/main/java/com/microsoft/identity/common/internal/request/MsalBrokerRequestAdapter.java\nindex 678ea065a..0133047e3 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/request/MsalBrokerRequestAdapter.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/request/MsalBrokerRequestAdapter.java\n\n@@ -590,10 +589,11 @@ public class MsalBrokerRequestAdapter implements IBrokerRequestAdapter {\n     }\n \n     /**\n-     * Method to construct a request {@link Bundle} for broker generateShr\n-     * @param parameters\n-     * @param negotiatedBrokerProtocolVersion\n-     * @return\n+     * Method to construct a request {@link Bundle} for broker generateShr.\n+     *\n+     * @param parameters                      Input request params.\n+     * @param negotiatedBrokerProtocolVersion The negotiated broker protocol version in use.\n+     * @return The result Bundle from the Broker.\n      */\n     public Bundle getRequestBundleForGenerateShr(@NonNull final GenerateShrCommandParameters parameters,\n                                                  @NonNull final String negotiatedBrokerProtocolVersion) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEwMTg4MA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r521101880", "bodyText": "could potentially use lombok's @Getter annotation in this class", "author": "shahzaibj", "createdAt": "2020-11-11T04:16:12Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/result/GenerateShrResult.java", "diffHunk": "@@ -0,0 +1,117 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.result;\n+\n+import androidx.annotation.Nullable;\n+\n+import com.google.gson.annotations.SerializedName;\n+import com.microsoft.identity.common.exception.ErrorStrings;\n+\n+/**\n+ * The result of a generateShr request.\n+ */\n+public class GenerateShrResult {", "originalCommit": "dcae65808d3c9827839d12a8d4cbe074d719ccdf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2OTQyMw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r521669423", "bodyText": "Ah yep -- will do", "author": "iambmelt", "createdAt": "2020-11-11T22:12:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEwMTg4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY3NDU0Nw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r521674547", "bodyText": "2e99e21", "author": "iambmelt", "createdAt": "2020-11-11T22:23:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEwMTg4MA=="}], "type": "inlineReview", "revised_code": {"commit": "2e99e21a062b341896bf07c6bb11930d2eae6c77", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/result/GenerateShrResult.java b/common/src/main/java/com/microsoft/identity/common/internal/result/GenerateShrResult.java\nindex de75a3d54..e84b668c2 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/result/GenerateShrResult.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/result/GenerateShrResult.java\n\n@@ -22,14 +22,17 @@\n //  THE SOFTWARE.\n package com.microsoft.identity.common.internal.result;\n \n-import androidx.annotation.Nullable;\n-\n import com.google.gson.annotations.SerializedName;\n import com.microsoft.identity.common.exception.ErrorStrings;\n \n+import lombok.Getter;\n+import lombok.Setter;\n+\n /**\n  * The result of a generateShr request.\n  */\n+@Getter\n+@Setter\n public class GenerateShrResult {\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEwMTkzOQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r521101939", "bodyText": "seems to need formatting", "author": "shahzaibj", "createdAt": "2020-11-11T04:16:31Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/result/MsalBrokerResultAdapter.java", "diffHunk": "@@ -628,4 +629,20 @@ public boolean getDeviceModeFromResultBundle(@NonNull final Bundle bundle) throw\n     public @NonNull ClientException getExceptionForEmptyResultBundle() {\n         return new ClientException(INVALID_BROKER_BUNDLE, \"Broker Result not returned from Broker.\");\n     }\n+\n+    /**\n+     * Deserializes the {@link GenerateShrResult} object from the broker response {@link Bundle}.\n+     * @param resultBundle The result Bundle produced by the broker.\n+     * @return The deserialized GenerateShrResult object containing the result (or corresponding\n+     * error).\n+     */", "originalCommit": "dcae65808d3c9827839d12a8d4cbe074d719ccdf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY3NjcyNw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r521676727", "bodyText": "9ad1ad6", "author": "iambmelt", "createdAt": "2020-11-11T22:28:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEwMTkzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "9ad1ad613d45e16b2cc0cba623a2e74998f0dcf7", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/result/MsalBrokerResultAdapter.java b/common/src/main/java/com/microsoft/identity/common/internal/result/MsalBrokerResultAdapter.java\nindex 4218498b8..fc9502fa1 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/result/MsalBrokerResultAdapter.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/result/MsalBrokerResultAdapter.java\n\n@@ -632,6 +632,7 @@ public class MsalBrokerResultAdapter implements IBrokerResultAdapter {\n \n     /**\n      * Deserializes the {@link GenerateShrResult} object from the broker response {@link Bundle}.\n+     *\n      * @param resultBundle The result Bundle produced by the broker.\n      * @return The deserialized GenerateShrResult object containing the result (or corresponding\n      * error).\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY2ODgxNQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r521668815", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            // To support a shared communication model between the local flow and the\n          \n          \n            \n                            // To support a consistent communication model between the local flow and the", "author": "iambmelt", "createdAt": "2020-11-11T22:10:50Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java", "diffHunk": "@@ -0,0 +1,111 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.commands;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.microsoft.identity.common.exception.BaseException;\n+import com.microsoft.identity.common.exception.ClientException;\n+import com.microsoft.identity.common.exception.UiRequiredException;\n+import com.microsoft.identity.common.internal.commands.parameters.GenerateShrCommandParameters;\n+import com.microsoft.identity.common.internal.controllers.BaseController;\n+import com.microsoft.identity.common.internal.result.GenerateShrResult;\n+\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.exception.ErrorStrings.NO_ACCOUNT_FOUND;\n+\n+/**\n+ * Command class to perform generation of AT-less SHRs on behalf of a user.\n+ */\n+public class GenerateShrCommand extends BaseCommand<GenerateShrResult> {\n+\n+    private static final String TAG = GenerateShrCommand.class.getSimpleName();\n+\n+    /**\n+     * Constructs a new GenerateShrCommand.\n+     *\n+     * @param parameters  The command's input parameters.\n+     * @param controllers The controllers on which to run this command.\n+     * @param callback    The command to notify once execution has completed.\n+     * @param publicApiId The public API ID of this command.\n+     */\n+    public GenerateShrCommand(@NonNull final GenerateShrCommandParameters parameters,\n+                              @NonNull final List<BaseController> controllers,\n+                              @NonNull final CommandCallback<GenerateShrResult, BaseException> callback,\n+                              @NonNull final String publicApiId) {\n+        super(parameters, controllers, callback, publicApiId);\n+    }\n+\n+    @Override\n+    public GenerateShrResult execute() throws Exception {\n+        final String methodName = \":execute\";\n+\n+        GenerateShrResult result = null;\n+        final GenerateShrCommandParameters parameters = (GenerateShrCommandParameters) getParameters();\n+\n+        // Iterate over our controllers, to service the request either locally or via the broker...\n+        // if the local (embedded) cache contains tokens for the supplied user, we will sign using\n+        // the embedded PoP keys. If no local user-state exists, the broker will be delegated to\n+        // where the same check is performed.\n+        BaseController controller;\n+        for (int ii = 0; ii < getControllers().size(); ii++) {\n+            controller = getControllers().get(ii);\n+\n+            com.microsoft.identity.common.internal.logging.Logger.verbose(\n+                    TAG + methodName,\n+                    \"Executing with controller: \"\n+                            + controller.getClass().getSimpleName()\n+            );\n+\n+            result = controller.generateSignedHttpRequest(parameters);\n+\n+            if (null != result.getErrorCode()) {\n+                final String errorCode = result.getErrorCode();\n+                final String errorMessage = result.getErrorMessage();\n+\n+                // To support a shared communication model between the local flow and the", "originalCommit": "dcae65808d3c9827839d12a8d4cbe074d719ccdf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fd304366795494295883bda82ee352f53f8a35c8", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java b/common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java\nindex 62059e30a..004855642 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java\n\n@@ -84,7 +84,7 @@ public class GenerateShrCommand extends BaseCommand<GenerateShrResult> {\n                 final String errorCode = result.getErrorCode();\n                 final String errorMessage = result.getErrorMessage();\n \n-                // To support a shared communication model between the local flow and the\n+                // To support a consistent communication model between the local flow and the\n                 // broker flow, errors will be returned as properties of the result, instead\n                 // of as thrown Exceptions\n                 if (NO_ACCOUNT_FOUND.equalsIgnoreCase(errorCode)) {\n"}}, {"oid": "fd304366795494295883bda82ee352f53f8a35c8", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/fd304366795494295883bda82ee352f53f8a35c8", "message": "Update common/src/main/java/com/microsoft/identity/common/internal/commands/GenerateShrCommand.java", "committedDate": "2020-11-11T22:10:54Z", "type": "commit"}, {"oid": "2e99e21a062b341896bf07c6bb11930d2eae6c77", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/2e99e21a062b341896bf07c6bb11930d2eae6c77", "message": "Add lombok annots to remove boilerplate code", "committedDate": "2020-11-11T22:20:15Z", "type": "commit"}, {"oid": "a98d10d0e05d3440aa7b5829f2c7dcf4ffcc6aef", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/a98d10d0e05d3440aa7b5829f2c7dcf4ffcc6aef", "message": "Tune up javadoc + run formatter + import scrubber", "committedDate": "2020-11-11T22:26:07Z", "type": "commit"}, {"oid": "9ad1ad613d45e16b2cc0cba623a2e74998f0dcf7", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/9ad1ad613d45e16b2cc0cba623a2e74998f0dcf7", "message": "runs formatter", "committedDate": "2020-11-11T22:28:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY5MDc2OA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r521690768", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    public static final String AUTHSCHEME_PARAMS_POP = \"pop_parameters\";\n          \n          \n            \n                    public static final String AUTH_SCHEME_PARAMS_POP = \"pop_parameters\";", "author": "shahzaibj", "createdAt": "2020-11-11T23:05:20Z", "path": "common/src/main/java/com/microsoft/identity/common/adal/internal/AuthenticationConstants.java", "diffHunk": "@@ -1209,7 +1214,12 @@\n          * Time out for the AccountManager's remove account operation in broker.\n          */\n         public static final int ACCOUNT_MANAGER_REMOVE_ACCOUNT_TIMEOUT_IN_MILLISECONDS = 5000;\n-        \n+\n+        /**\n+         * The Bundle key name of serialized parameters for the PoP auth scheme.\n+         */\n+        public static final String AUTHSCHEME_PARAMS_POP = \"pop_parameters\";", "originalCommit": "9ad1ad613d45e16b2cc0cba623a2e74998f0dcf7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTcwNDk5Mg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1111#discussion_r521704992", "bodyText": "Applying this suggestion, but requires more changes than this -- so doing in\nf6b0601", "author": "iambmelt", "createdAt": "2020-11-11T23:37:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY5MDc2OA=="}], "type": "inlineReview", "revised_code": {"commit": "f6b06016dcda4d5a0cfbbadaac7af301adc584ec", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/adal/internal/AuthenticationConstants.java b/common/src/main/java/com/microsoft/identity/common/adal/internal/AuthenticationConstants.java\nindex 972a61128..a5c2d1ac7 100644\n--- a/common/src/main/java/com/microsoft/identity/common/adal/internal/AuthenticationConstants.java\n+++ b/common/src/main/java/com/microsoft/identity/common/adal/internal/AuthenticationConstants.java\n\n@@ -1218,7 +1218,7 @@ public final class AuthenticationConstants {\n         /**\n          * The Bundle key name of serialized parameters for the PoP auth scheme.\n          */\n-        public static final String AUTHSCHEME_PARAMS_POP = \"pop_parameters\";\n+        public static final String AUTH_SCHEME_PARAMS_POP = \"pop_parameters\";\n \n         /**\n          * Bundle identifiers for x-ms-clitelem info.\n"}}, {"oid": "f6b06016dcda4d5a0cfbbadaac7af301adc584ec", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/f6b06016dcda4d5a0cfbbadaac7af301adc584ec", "message": "Rename constant", "committedDate": "2020-11-11T23:34:28Z", "type": "commit"}, {"oid": "fa9195581a0f6f4945b5495193b0165898391b11", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/fa9195581a0f6f4945b5495193b0165898391b11", "message": "Update changelog.txt\n\nCo-authored-by: Shahzaib <37125644+shahzaibj@users.noreply.github.com>", "committedDate": "2020-11-13T02:33:33Z", "type": "commit"}, {"oid": "1806efa7706058ca85b673cddc43cf0a90142c0d", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/1806efa7706058ca85b673cddc43cf0a90142c0d", "message": "Update constants for generateShr public API ID", "committedDate": "2020-11-13T02:42:57Z", "type": "commit"}]}