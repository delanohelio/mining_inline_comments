{"pr_number": 1026, "pr_title": "Add support for exporting public key data, signing arbitrary string data", "pr_createdAt": "2020-09-05T00:53:20Z", "pr_url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026", "timeline": [{"oid": "9ceff46e71c4ce3fc9e8240798c37e07eedadd1c", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/9ceff46e71c4ce3fc9e8240798c37e07eedadd1c", "message": "Add support for exporting X.509 public key as ASN.1", "committedDate": "2020-09-05T00:51:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg5MTU2Ng==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r483891566", "bodyText": "Update javadoc", "author": "iambmelt", "createdAt": "2020-09-05T00:55:12Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java", "diffHunk": "@@ -90,6 +94,21 @@\n      */\n     void getRequestConfirmation(TaskCompletedCallbackWithError<String, ClientException> callback);\n \n+    /**\n+     * Signs an arbitrary piece of String data.\n+     *\n+     * @param input The input to sign.\n+     * @return The input data, signed by our private key.\n+     */\n+    String sign(String input) throws ClientException;\n+\n+    /**\n+     * Gets the public key associated with this DevicePoPManager formatted as an X.509 ASN1 Dump.", "originalCommit": "9ceff46e71c4ce3fc9e8240798c37e07eedadd1c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg5MTk3Nw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r483891977", "bodyText": "423c2b3", "author": "iambmelt", "createdAt": "2020-09-05T00:58:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg5MTU2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "423c2b3431555c40229d6e9c29ab4b6f1a7eb3ce", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java b/common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java\nindex cd05ca419..f3519d1ef 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java\n\n@@ -103,8 +103,10 @@ public interface IDevicePopManager {\n     String sign(String input) throws ClientException;\n \n     /**\n-     * Gets the public key associated with this DevicePoPManager formatted as an X.509 ASN1 Dump.\n+     * Gets the public key associated with this DevicePoPManager formatted per the supplied\n+     * export param.\n      *\n+     * @param format The export format of the public key.\n      * @return A String of the public key.\n      */\n     String getPublicKey(PublicKeyFormat format) throws ClientException;\n"}}, {"oid": "423c2b3431555c40229d6e9c29ab4b6f1a7eb3ce", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/423c2b3431555c40229d6e9c29ab4b6f1a7eb3ce", "message": "Update javadoc for code changes", "committedDate": "2020-09-05T00:56:39Z", "type": "commit"}, {"oid": "0e6f2a32826a8536fc36e7f14b58aedc69c49961", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/0e6f2a32826a8536fc36e7f14b58aedc69c49961", "message": "Renaming format enums", "committedDate": "2020-09-05T01:20:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg5NDI2OA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r483894268", "bodyText": "Reference:\n\nhttps://connect2id.com/products/nimbus-jose-jwt/examples/pem-encoded-objects", "author": "iambmelt", "createdAt": "2020-09-05T01:21:53Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java", "diffHunk": "@@ -34,6 +34,11 @@\n  */\n public interface IDevicePopManager {\n \n+    enum PublicKeyFormat {", "originalCommit": "0e6f2a32826a8536fc36e7f14b58aedc69c49961", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "600e07cbd03d9ee6982250a005f464aded22a454", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java b/common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java\nindex 98d750731..023fbf4e8 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java\n\n@@ -28,6 +28,7 @@ import com.microsoft.identity.common.exception.ClientException;\n import com.microsoft.identity.common.internal.controllers.TaskCompletedCallbackWithError;\n \n import java.net.URL;\n+import java.util.Date;\n \n /**\n  * Internal convenience class interface for PoP related functions.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg5NDQzOA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r483894438", "bodyText": "TODO determine signing strategy, or if multiple should be employed.", "author": "iambmelt", "createdAt": "2020-09-05T01:24:07Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -441,6 +444,66 @@ public void run() {\n         });\n     }\n \n+    @Override\n+    public String sign(@NonNull final String input) throws ClientException {", "originalCommit": "0e6f2a32826a8536fc36e7f14b58aedc69c49961", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI3NjQ3NQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r485276475", "bodyText": "Currently using SHA256WithRSA", "author": "iambmelt", "createdAt": "2020-09-09T01:03:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg5NDQzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkzNTIyNA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r485935224", "bodyText": "Or should this be a different IDevicePopManager?", "author": "AdamBJohnsonx", "createdAt": "2020-09-09T21:35:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg5NDQzOA=="}], "type": "inlineReview", "revised_code": {"commit": "ae7ec8f1a0cccc638512c4946caeb7e6af11d960", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java b/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\nindex e75be33e5..57af1b621 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\n\n@@ -455,18 +481,11 @@ class DevicePopManager implements IDevicePopManager {\n     public String getPublicKey(@NonNull final PublicKeyFormat format) throws ClientException {\n         if (X_509_SubjectPublicKeyInfo_ASN_1 == format) {\n             return getX509SubjectPublicKeyInfo();\n-        } else if (PKCS1_RSAPublicKey == format) {\n-            return getPkcs1RsaPublicKey();\n         } else {\n             throw new ClientException(UNKNOWN_EXPORT_FORMAT);\n         }\n     }\n \n-    private String getPkcs1RsaPublicKey() {\n-        // TODO\n-        return null;\n-    }\n-\n     private String getX509SubjectPublicKeyInfo() throws ClientException {\n         final Exception exception;\n         final String errCode;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg5NDY4Mg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r483894682", "bodyText": "TODO: Do we need to accept something like a SigningParams; for instance, to specify an algorithm?\nAlso, the OneAuth API assumes signing cannot fail... we need some way to return error if this operation fails", "author": "iambmelt", "createdAt": "2020-09-05T01:25:59Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java", "diffHunk": "@@ -90,6 +95,23 @@\n      */\n     void getRequestConfirmation(TaskCompletedCallbackWithError<String, ClientException> callback);\n \n+    /**\n+     * Signs an arbitrary piece of String data.\n+     *\n+     * @param input The input to sign.\n+     * @return The input data, signed by our private key.\n+     */\n+    String sign(String input) throws ClientException;", "originalCommit": "0e6f2a32826a8536fc36e7f14b58aedc69c49961", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI3MTg2Nw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r485271867", "bodyText": "Made the assumption that this is going to use SHA256WithRSA and implemented accordingly", "author": "iambmelt", "createdAt": "2020-09-09T00:45:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg5NDY4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTI3MTk5Mg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r485271992", "bodyText": "7b21d10", "author": "iambmelt", "createdAt": "2020-09-09T00:46:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mzg5NDY4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "7b21d1045de1feebb8686df19dc5a7557b1fd16c", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java b/common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java\nindex 98d750731..82d81a43b 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java\n\n@@ -103,6 +111,16 @@ public interface IDevicePopManager {\n      */\n     String sign(String input) throws ClientException;\n \n+    /**\n+     * Verify a signature previously made by our Private Key.\n+     *\n+     * @param plainText    The input to verify.\n+     * @param signatureStr The signature against which the plainText should be evaluated.\n+     * @return True if the input was signed by our private key. False otherwise.\n+     * @throws ClientException If an error was encountered during verification.\n+     */\n+    boolean verify(String plainText, String signatureStr) throws ClientException;\n+\n     /**\n      * Gets the public key associated with this DevicePoPManager formatted per the supplied\n      * export param.\n"}}, {"oid": "600e07cbd03d9ee6982250a005f464aded22a454", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/600e07cbd03d9ee6982250a005f464aded22a454", "message": "Implement support for getAsymmetricKeyCreationDate()", "committedDate": "2020-09-08T22:20:20Z", "type": "commit"}, {"oid": "ae7ec8f1a0cccc638512c4946caeb7e6af11d960", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/ae7ec8f1a0cccc638512c4946caeb7e6af11d960", "message": "Remove unused code", "committedDate": "2020-09-08T22:22:18Z", "type": "commit"}, {"oid": "e0c052f84d2b8261d2b6d216039a5252b4e93108", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/e0c052f84d2b8261d2b6d216039a5252b4e93108", "message": "Merge branch 'dev' into iambmelt/oneauth-pop-extensions-1", "committedDate": "2020-09-08T22:24:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIyOTc3NA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r485229774", "bodyText": "If this is an enum, you could use a switch. Potential benefits, some static analysis tools will complain at you if you're not handling all of the potential enumerated values correctly.\nAlso, if you've got an unknown format, it would be really nice to have logged what the value actually was.", "author": "AdamBJohnsonx", "createdAt": "2020-09-08T22:28:30Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -441,6 +444,66 @@ public void run() {\n         });\n     }\n \n+    @Override\n+    public String sign(@NonNull final String input) throws ClientException {\n+        // TODO Sign how???\n+        // RS256? SHA256withECDSA?\n+        return null;\n+    }\n+\n+    @Override\n+    public String getPublicKey(@NonNull final PublicKeyFormat format) throws ClientException {\n+        if (X_509_SubjectPublicKeyInfo_ASN_1 == format) {\n+            return getX509SubjectPublicKeyInfo();\n+        } else if (PKCS1_RSAPublicKey == format) {\n+            return getPkcs1RsaPublicKey();\n+        } else {\n+            throw new ClientException(UNKNOWN_EXPORT_FORMAT);\n+        }", "originalCommit": "0e6f2a32826a8536fc36e7f14b58aedc69c49961", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIzNTExOQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r485235119", "bodyText": "8d10b15, e78cf6b", "author": "iambmelt", "createdAt": "2020-09-08T22:43:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIyOTc3NA=="}], "type": "inlineReview", "revised_code": {"commit": "8d10b1561f3ea65a6f3a3e6dc8f5da638c9ba86f", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java b/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\nindex e75be33e5..17a6a96d9 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\n\n@@ -453,20 +478,19 @@ class DevicePopManager implements IDevicePopManager {\n \n     @Override\n     public String getPublicKey(@NonNull final PublicKeyFormat format) throws ClientException {\n-        if (X_509_SubjectPublicKeyInfo_ASN_1 == format) {\n-            return getX509SubjectPublicKeyInfo();\n-        } else if (PKCS1_RSAPublicKey == format) {\n-            return getPkcs1RsaPublicKey();\n-        } else {\n-            throw new ClientException(UNKNOWN_EXPORT_FORMAT);\n+        switch (format) {\n+            case X_509_SubjectPublicKeyInfo_ASN_1:\n+                return getX509SubjectPublicKeyInfo();\n+            default:\n+                Logger.error(\n+                        TAG + \":getPublicKey\",\n+                        \"Unrecognized or unsupported key format: \" + format,\n+                        null\n+                );\n+                throw new ClientException(UNKNOWN_EXPORT_FORMAT);\n         }\n     }\n \n-    private String getPkcs1RsaPublicKey() {\n-        // TODO\n-        return null;\n-    }\n-\n     private String getX509SubjectPublicKeyInfo() throws ClientException {\n         final Exception exception;\n         final String errCode;\n"}}, {"oid": "8d10b1561f3ea65a6f3a3e6dc8f5da638c9ba86f", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/8d10b1561f3ea65a6f3a3e6dc8f5da638c9ba86f", "message": "Use switch not if/else", "committedDate": "2020-09-08T22:39:24Z", "type": "commit"}, {"oid": "e78cf6b7b6a14598b1e39a107815a6aa62d7fc92", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/e78cf6b7b6a14598b1e39a107815a6aa62d7fc92", "message": "Error msg + logging improvement", "committedDate": "2020-09-08T22:42:26Z", "type": "commit"}, {"oid": "818b11f8b87ffecc6e184eee8415acd877ecfc5f", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/818b11f8b87ffecc6e184eee8415acd877ecfc5f", "message": "Add unit tests for new methods", "committedDate": "2020-09-08T23:21:22Z", "type": "commit"}, {"oid": "7b21d1045de1feebb8686df19dc5a7557b1fd16c", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/7b21d1045de1feebb8686df19dc5a7557b1fd16c", "message": "Add support for signing (SHA256+RSA), adds relevant unit test", "committedDate": "2020-09-09T00:44:08Z", "type": "commit"}, {"oid": "26b358b9b7821dd25bc1937d3ab34b7d189d89be", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/26b358b9b7821dd25bc1937d3ab34b7d189d89be", "message": "Minor code cleanup", "committedDate": "2020-09-09T00:58:18Z", "type": "commit"}, {"oid": "2b3fd3fd50079a703f99ceec7830b0aa602816e2", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/2b3fd3fd50079a703f99ceec7830b0aa602816e2", "message": "Use default encoding/decoding", "committedDate": "2020-09-10T02:03:42Z", "type": "commit"}, {"oid": "f01d4d0cb1f8497b08fd75d5d0aff346a3f6886a", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/f01d4d0cb1f8497b08fd75d5d0aff346a3f6886a", "message": "Add jwk export format support + tests", "committedDate": "2020-09-10T20:55:49Z", "type": "commit"}, {"oid": "8491a08b7f47015985e7aa429a21136b9122989a", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/8491a08b7f47015985e7aa429a21136b9122989a", "message": "Merge branch 'dev' into iambmelt/oneauth-pop-extensions-1", "committedDate": "2020-09-10T20:59:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzMDQ0Mg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r486630442", "bodyText": "TODO: document the signing algorithm", "author": "iambmelt", "createdAt": "2020-09-10T21:00:11Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java", "diffHunk": "@@ -90,6 +104,32 @@\n      */\n     void getRequestConfirmation(TaskCompletedCallbackWithError<String, ClientException> callback);\n \n+    /**\n+     * Signs an arbitrary piece of String data.", "originalCommit": "8491a08b7f47015985e7aa429a21136b9122989a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzNzMwNQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r486637305", "bodyText": "65c2d01", "author": "iambmelt", "createdAt": "2020-09-10T21:14:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzMDQ0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "65c2d016ec8eb6d6317ec731adb0d042a33ddeb4", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java b/common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java\nindex 97ae7275b..ded383491 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java\n\n@@ -105,7 +105,7 @@ public interface IDevicePopManager {\n     void getRequestConfirmation(TaskCompletedCallbackWithError<String, ClientException> callback);\n \n     /**\n-     * Signs an arbitrary piece of String data.\n+     * Signs an arbitrary piece of String data. Signing alg is SHA256WithRSA.\n      *\n      * @param input The input to sign.\n      * @return The input data, signed by our private key.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzMDYwMA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r486630600", "bodyText": "TODO: document the signing algorithm verified", "author": "iambmelt", "createdAt": "2020-09-10T21:00:30Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java", "diffHunk": "@@ -90,6 +104,32 @@\n      */\n     void getRequestConfirmation(TaskCompletedCallbackWithError<String, ClientException> callback);\n \n+    /**\n+     * Signs an arbitrary piece of String data.\n+     *\n+     * @param input The input to sign.\n+     * @return The input data, signed by our private key.\n+     */\n+    String sign(String input) throws ClientException;\n+\n+    /**\n+     * Verify a signature previously made by our Private Key.", "originalCommit": "8491a08b7f47015985e7aa429a21136b9122989a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzNzM0Mw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r486637343", "bodyText": "65c2d01", "author": "iambmelt", "createdAt": "2020-09-10T21:14:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzMDYwMA=="}], "type": "inlineReview", "revised_code": {"commit": "65c2d016ec8eb6d6317ec731adb0d042a33ddeb4", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java b/common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java\nindex 97ae7275b..ded383491 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java\n\n@@ -105,7 +105,7 @@ public interface IDevicePopManager {\n     void getRequestConfirmation(TaskCompletedCallbackWithError<String, ClientException> callback);\n \n     /**\n-     * Signs an arbitrary piece of String data.\n+     * Signs an arbitrary piece of String data. Signing alg is SHA256WithRSA.\n      *\n      * @param input The input to sign.\n      * @return The input data, signed by our private key.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzMDkzNQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r486630935", "bodyText": "@NonNull return type", "author": "iambmelt", "createdAt": "2020-09-10T21:01:13Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -441,6 +493,209 @@ public void run() {\n         });\n     }\n \n+    @Override", "originalCommit": "8491a08b7f47015985e7aa429a21136b9122989a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY0NzI0Nw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r486647247", "bodyText": "bda5f73", "author": "iambmelt", "createdAt": "2020-09-10T21:35:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzMDkzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "8ffb1b78e4d5a297cb78e0790b0d7083d9532667", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java b/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\nindex 78665d9d6..bb19a2e2b 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\n\n@@ -571,7 +571,6 @@ class DevicePopManager implements IDevicePopManager {\n             signature.initVerify(((KeyStore.PrivateKeyEntry) keyEntry).getCertificate());\n             signature.update(inputBytesToVerify);\n             final byte[] signatureBytes = Base64.decode(signatureStr, Base64.DEFAULT);\n-\n             return signature.verify(signatureBytes);\n         } catch (final UnsupportedEncodingException e) {\n             errCode = UNSUPPORTED_ENCODING;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzMTEyMA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r486631120", "bodyText": "@NonNull return value", "author": "iambmelt", "createdAt": "2020-09-10T21:01:34Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -441,6 +493,209 @@ public void run() {\n         });\n     }\n \n+    @Override\n+    public String sign(@NonNull final String input) throws ClientException {\n+        final Exception exception;\n+        final String errCode;\n+\n+        try {\n+            final byte[] inputBytesToSign = input.getBytes(ENCODING_UTF8);\n+            final KeyStore.Entry keyEntry = mKeyStore.getEntry(KEYSTORE_ENTRY_ALIAS, null);\n+\n+            if (!(keyEntry instanceof KeyStore.PrivateKeyEntry)) {\n+                Logger.warn(\n+                        TAG + \":sign\",\n+                        PRIVATE_KEY_NOT_FOUND\n+                );\n+                throw new ClientException(INVALID_KEY_MISSING);\n+            }\n+\n+            final Signature signature = Signature.getInstance(SHA_256_WITH_RSA);\n+            signature.initSign(((KeyStore.PrivateKeyEntry) keyEntry).getPrivateKey());\n+            signature.update(inputBytesToSign);\n+            final byte[] signedBytes = signature.sign();\n+            return Base64.encodeToString(signedBytes, Base64.DEFAULT);\n+        } catch (final KeyStoreException e) {\n+            exception = e;\n+            errCode = KEYSTORE_NOT_INITIALIZED;\n+        } catch (final NoSuchAlgorithmException e) {\n+            exception = e;\n+            errCode = NO_SUCH_ALGORITHM;\n+        } catch (final UnrecoverableEntryException e) {\n+            exception = e;\n+            errCode = INVALID_PROTECTION_PARAMS;\n+        } catch (final InvalidKeyException e) {\n+            exception = e;\n+            errCode = INVALID_KEY;\n+        } catch (final SignatureException e) {\n+            exception = e;\n+            errCode = SIGNING_FAILURE;\n+        } catch (final UnsupportedEncodingException e) {\n+            exception = e;\n+            errCode = UNSUPPORTED_ENCODING;\n+        }\n+\n+        final ClientException clientException = new ClientException(\n+                errCode,\n+                exception.getMessage(),\n+                exception\n+        );\n+\n+        Logger.error(\n+                TAG,\n+                clientException.getMessage(),\n+                clientException\n+        );\n+\n+        throw clientException;\n+    }\n+\n+    @Override\n+    public boolean verify(@NonNull final String plainText, @NonNull final String signatureStr) {\n+        final String errCode;\n+        final Exception exception;\n+\n+        try {\n+            final byte[] inputBytesToVerify = plainText.getBytes(ENCODING_UTF8);\n+            final KeyStore.Entry keyEntry = mKeyStore.getEntry(KEYSTORE_ENTRY_ALIAS, null);\n+\n+            if (!(keyEntry instanceof KeyStore.PrivateKeyEntry)) {\n+                Logger.warn(\n+                        TAG + \":verify\",\n+                        PRIVATE_KEY_NOT_FOUND\n+                );\n+                return false;\n+            }\n+\n+            final Signature signature = Signature.getInstance(SHA_256_WITH_RSA);\n+            signature.initVerify(((KeyStore.PrivateKeyEntry) keyEntry).getCertificate());\n+            signature.update(inputBytesToVerify);\n+            final byte[] signatureBytes = Base64.decode(signatureStr, Base64.DEFAULT);\n+\n+            return signature.verify(signatureBytes);\n+        } catch (final UnsupportedEncodingException e) {\n+            errCode = UNSUPPORTED_ENCODING;\n+            exception = e;\n+        } catch (final NoSuchAlgorithmException e) {\n+            errCode = NO_SUCH_ALGORITHM;\n+            exception = e;\n+        } catch (final KeyStoreException e) {\n+            errCode = KEYSTORE_NOT_INITIALIZED;\n+            exception = e;\n+        } catch (final UnrecoverableEntryException e) {\n+            errCode = INVALID_PROTECTION_PARAMS;\n+            exception = e;\n+        } catch (final InvalidKeyException e) {\n+            errCode = INVALID_KEY;\n+            exception = e;\n+        } catch (final SignatureException e) {\n+            errCode = SIGNING_FAILURE;\n+            exception = e;\n+        }\n+\n+        Logger.error(\n+                TAG + \":verify\",\n+                errCode,\n+                exception\n+        );\n+\n+        return false;\n+    }\n+\n+    @Override", "originalCommit": "8491a08b7f47015985e7aa429a21136b9122989a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY0NzIyNQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r486647225", "bodyText": "bda5f73", "author": "iambmelt", "createdAt": "2020-09-10T21:35:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzMTEyMA=="}], "type": "inlineReview", "revised_code": {"commit": "8ffb1b78e4d5a297cb78e0790b0d7083d9532667", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java b/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\nindex 78665d9d6..bb19a2e2b 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\n\n@@ -571,7 +571,6 @@ class DevicePopManager implements IDevicePopManager {\n             signature.initVerify(((KeyStore.PrivateKeyEntry) keyEntry).getCertificate());\n             signature.update(inputBytesToVerify);\n             final byte[] signatureBytes = Base64.decode(signatureStr, Base64.DEFAULT);\n-\n             return signature.verify(signatureBytes);\n         } catch (final UnsupportedEncodingException e) {\n             errCode = UNSUPPORTED_ENCODING;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzMTI0MQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r486631241", "bodyText": "@NonNull return type", "author": "iambmelt", "createdAt": "2020-09-10T21:01:49Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -441,6 +493,209 @@ public void run() {\n         });\n     }\n \n+    @Override\n+    public String sign(@NonNull final String input) throws ClientException {\n+        final Exception exception;\n+        final String errCode;\n+\n+        try {\n+            final byte[] inputBytesToSign = input.getBytes(ENCODING_UTF8);\n+            final KeyStore.Entry keyEntry = mKeyStore.getEntry(KEYSTORE_ENTRY_ALIAS, null);\n+\n+            if (!(keyEntry instanceof KeyStore.PrivateKeyEntry)) {\n+                Logger.warn(\n+                        TAG + \":sign\",\n+                        PRIVATE_KEY_NOT_FOUND\n+                );\n+                throw new ClientException(INVALID_KEY_MISSING);\n+            }\n+\n+            final Signature signature = Signature.getInstance(SHA_256_WITH_RSA);\n+            signature.initSign(((KeyStore.PrivateKeyEntry) keyEntry).getPrivateKey());\n+            signature.update(inputBytesToSign);\n+            final byte[] signedBytes = signature.sign();\n+            return Base64.encodeToString(signedBytes, Base64.DEFAULT);\n+        } catch (final KeyStoreException e) {\n+            exception = e;\n+            errCode = KEYSTORE_NOT_INITIALIZED;\n+        } catch (final NoSuchAlgorithmException e) {\n+            exception = e;\n+            errCode = NO_SUCH_ALGORITHM;\n+        } catch (final UnrecoverableEntryException e) {\n+            exception = e;\n+            errCode = INVALID_PROTECTION_PARAMS;\n+        } catch (final InvalidKeyException e) {\n+            exception = e;\n+            errCode = INVALID_KEY;\n+        } catch (final SignatureException e) {\n+            exception = e;\n+            errCode = SIGNING_FAILURE;\n+        } catch (final UnsupportedEncodingException e) {\n+            exception = e;\n+            errCode = UNSUPPORTED_ENCODING;\n+        }\n+\n+        final ClientException clientException = new ClientException(\n+                errCode,\n+                exception.getMessage(),\n+                exception\n+        );\n+\n+        Logger.error(\n+                TAG,\n+                clientException.getMessage(),\n+                clientException\n+        );\n+\n+        throw clientException;\n+    }\n+\n+    @Override\n+    public boolean verify(@NonNull final String plainText, @NonNull final String signatureStr) {\n+        final String errCode;\n+        final Exception exception;\n+\n+        try {\n+            final byte[] inputBytesToVerify = plainText.getBytes(ENCODING_UTF8);\n+            final KeyStore.Entry keyEntry = mKeyStore.getEntry(KEYSTORE_ENTRY_ALIAS, null);\n+\n+            if (!(keyEntry instanceof KeyStore.PrivateKeyEntry)) {\n+                Logger.warn(\n+                        TAG + \":verify\",\n+                        PRIVATE_KEY_NOT_FOUND\n+                );\n+                return false;\n+            }\n+\n+            final Signature signature = Signature.getInstance(SHA_256_WITH_RSA);\n+            signature.initVerify(((KeyStore.PrivateKeyEntry) keyEntry).getCertificate());\n+            signature.update(inputBytesToVerify);\n+            final byte[] signatureBytes = Base64.decode(signatureStr, Base64.DEFAULT);\n+\n+            return signature.verify(signatureBytes);\n+        } catch (final UnsupportedEncodingException e) {\n+            errCode = UNSUPPORTED_ENCODING;\n+            exception = e;\n+        } catch (final NoSuchAlgorithmException e) {\n+            errCode = NO_SUCH_ALGORITHM;\n+            exception = e;\n+        } catch (final KeyStoreException e) {\n+            errCode = KEYSTORE_NOT_INITIALIZED;\n+            exception = e;\n+        } catch (final UnrecoverableEntryException e) {\n+            errCode = INVALID_PROTECTION_PARAMS;\n+            exception = e;\n+        } catch (final InvalidKeyException e) {\n+            errCode = INVALID_KEY;\n+            exception = e;\n+        } catch (final SignatureException e) {\n+            errCode = SIGNING_FAILURE;\n+            exception = e;\n+        }\n+\n+        Logger.error(\n+                TAG + \":verify\",\n+                errCode,\n+                exception\n+        );\n+\n+        return false;\n+    }\n+\n+    @Override\n+    public String getPublicKey(@NonNull final PublicKeyFormat format) throws ClientException {\n+        switch (format) {\n+            case X_509_SubjectPublicKeyInfo_ASN_1:\n+                return getX509SubjectPublicKeyInfo();\n+            case JWK:\n+                return getJwkPublicKey();\n+            default:\n+                final String errMsg = \"Unrecognized or unsupported key format: \" + format;\n+                final ClientException clientException = new ClientException(\n+                        UNKNOWN_EXPORT_FORMAT,\n+                        errMsg\n+                );\n+\n+                Logger.error(\n+                        TAG + \":getPublicKey\",\n+                        errMsg,\n+                        clientException\n+                );\n+\n+                throw clientException;\n+        }\n+    }\n+\n+    private String getJwkPublicKey() throws ClientException {", "originalCommit": "8491a08b7f47015985e7aa429a21136b9122989a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY0NzE4OA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r486647188", "bodyText": "bda5f73", "author": "iambmelt", "createdAt": "2020-09-10T21:35:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzMTI0MQ=="}], "type": "inlineReview", "revised_code": {"commit": "8ffb1b78e4d5a297cb78e0790b0d7083d9532667", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java b/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\nindex 78665d9d6..bb19a2e2b 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\n\n@@ -571,7 +571,6 @@ class DevicePopManager implements IDevicePopManager {\n             signature.initVerify(((KeyStore.PrivateKeyEntry) keyEntry).getCertificate());\n             signature.update(inputBytesToVerify);\n             final byte[] signatureBytes = Base64.decode(signatureStr, Base64.DEFAULT);\n-\n             return signature.verify(signatureBytes);\n         } catch (final UnsupportedEncodingException e) {\n             errCode = UNSUPPORTED_ENCODING;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzMTM1Mw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r486631353", "bodyText": "Javadoc", "author": "iambmelt", "createdAt": "2020-09-10T21:02:00Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java", "diffHunk": "@@ -28,12 +28,18 @@\n import com.microsoft.identity.common.internal.controllers.TaskCompletedCallbackWithError;\n \n import java.net.URL;\n+import java.util.Date;\n \n /**\n  * Internal convenience class interface for PoP related functions.\n  */\n public interface IDevicePopManager {\n \n+    enum PublicKeyFormat {", "originalCommit": "8491a08b7f47015985e7aa429a21136b9122989a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY0MDQ4OQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r486640489", "bodyText": "f65f159", "author": "iambmelt", "createdAt": "2020-09-10T21:21:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzMTM1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "f65f1596212fe20b71e69ae9a0adef47f045e0a3", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java b/common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java\nindex 97ae7275b..3887a42d8 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/platform/IDevicePopManager.java\n\n@@ -35,8 +35,35 @@ import java.util.Date;\n  */\n public interface IDevicePopManager {\n \n+    /**\n+     * The desired export format of our PoP public key.\n+     */\n     enum PublicKeyFormat {\n+        /**\n+         * Base64 encoded SubjectPublicKeyInfo of the X.509 Certificate.\n+         * <p>\n+         * Conforms to the following ASN.1\n+         * <pre>\n+         * SubjectPublicKeyInfo  ::=  SEQUENCE  {\n+         *     algorithm            AlgorithmIdentifier,\n+         *     subjectPublicKey     BIT STRING\n+         * }\n+         * </pre>\n+         */\n         X_509_SubjectPublicKeyInfo_ASN_1,\n+\n+        /**\n+         * An RFC-7517 compliant public key as a minified JWK.\n+         * <p>\n+         * Sample value:\n+         * <pre>\n+         * {\n+         * \t\"kty\": \"RSA\",\n+         * \t\"e\": \"AQAB\",\n+         * \t\"n\": \"tMqJ7Oxh3PdLaiEc28w....HwES9Q\"\n+         * }\n+         * </pre>\n+         */\n         JWK\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzMTc4OA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r486631788", "bodyText": "Why is this constant public when the other is not?", "author": "AdamBJohnsonx", "createdAt": "2020-09-10T21:02:55Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -108,6 +117,16 @@\n      */\n     private static final int RSA_KEY_SIZE = 2048;\n \n+    /**\n+     * Our designated signing algorithm; used for JWTs and generalized signing actions.\n+     */\n+    private static final String SHA_256_WITH_RSA = \"SHA256withRSA\";\n+\n+    /**\n+     * Log message when private key material cannot be found.\n+     */\n+    public static final String PRIVATE_KEY_NOT_FOUND = \"Not an instance of a PrivateKeyEntry\";", "originalCommit": "8491a08b7f47015985e7aa429a21136b9122989a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzNDI2Ng==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r486634266", "bodyText": "Auto-refactor tool's default vis -- fixed in b39b87a", "author": "iambmelt", "createdAt": "2020-09-10T21:07:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzMTc4OA=="}], "type": "inlineReview", "revised_code": {"commit": "b39b87a82690fac2528ad8990973016a1c453516", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java b/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\nindex 78665d9d6..cdce23684 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\n\n@@ -125,7 +125,7 @@ class DevicePopManager implements IDevicePopManager {\n     /**\n      * Log message when private key material cannot be found.\n      */\n-    public static final String PRIVATE_KEY_NOT_FOUND = \"Not an instance of a PrivateKeyEntry\";\n+    private static final String PRIVATE_KEY_NOT_FOUND = \"Not an instance of a PrivateKeyEntry\";\n \n     /**\n      * The keystore backing this implementation.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzMjMzOA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r486632338", "bodyText": "ATM Machine?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * JWK key for inner object.\n          \n          \n            \n                     * JWK for inner object.", "author": "AdamBJohnsonx", "createdAt": "2020-09-10T21:03:59Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -184,6 +203,11 @@\n          * A random value used for replay protection.\n          */\n         private static final String NONCE = \"nonce\";\n+\n+        /**\n+         * JWK key for inner object.", "originalCommit": "8491a08b7f47015985e7aa429a21136b9122989a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e099e46a4933667293680a3e12d8bbb08788789e", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java b/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\nindex 78665d9d6..2aa81ba9c 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\n\n@@ -205,7 +205,7 @@ class DevicePopManager implements IDevicePopManager {\n         private static final String NONCE = \"nonce\";\n \n         /**\n-         * JWK key for inner object.\n+         * JWK for inner object.\n          */\n         public static final String JWK = \"jwk\";\n     }\n"}}, {"oid": "b39b87a82690fac2528ad8990973016a1c453516", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/b39b87a82690fac2528ad8990973016a1c453516", "message": "Log msg private vis", "committedDate": "2020-09-10T21:04:56Z", "type": "commit"}, {"oid": "e099e46a4933667293680a3e12d8bbb08788789e", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/e099e46a4933667293680a3e12d8bbb08788789e", "message": "Update common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\n\nCo-authored-by: AdamBJohnsonx <63813613+AdamBJohnsonx@users.noreply.github.com>", "committedDate": "2020-09-10T21:08:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzNTM4Nw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r486635387", "bodyText": "Remove extra newline", "author": "iambmelt", "createdAt": "2020-09-10T21:10:20Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -441,6 +493,209 @@ public void run() {\n         });\n     }\n \n+    @Override\n+    public String sign(@NonNull final String input) throws ClientException {\n+        final Exception exception;\n+        final String errCode;\n+\n+        try {\n+            final byte[] inputBytesToSign = input.getBytes(ENCODING_UTF8);\n+            final KeyStore.Entry keyEntry = mKeyStore.getEntry(KEYSTORE_ENTRY_ALIAS, null);\n+\n+            if (!(keyEntry instanceof KeyStore.PrivateKeyEntry)) {\n+                Logger.warn(\n+                        TAG + \":sign\",\n+                        PRIVATE_KEY_NOT_FOUND\n+                );\n+                throw new ClientException(INVALID_KEY_MISSING);\n+            }\n+\n+            final Signature signature = Signature.getInstance(SHA_256_WITH_RSA);\n+            signature.initSign(((KeyStore.PrivateKeyEntry) keyEntry).getPrivateKey());\n+            signature.update(inputBytesToSign);\n+            final byte[] signedBytes = signature.sign();\n+            return Base64.encodeToString(signedBytes, Base64.DEFAULT);\n+        } catch (final KeyStoreException e) {\n+            exception = e;\n+            errCode = KEYSTORE_NOT_INITIALIZED;\n+        } catch (final NoSuchAlgorithmException e) {\n+            exception = e;\n+            errCode = NO_SUCH_ALGORITHM;\n+        } catch (final UnrecoverableEntryException e) {\n+            exception = e;\n+            errCode = INVALID_PROTECTION_PARAMS;\n+        } catch (final InvalidKeyException e) {\n+            exception = e;\n+            errCode = INVALID_KEY;\n+        } catch (final SignatureException e) {\n+            exception = e;\n+            errCode = SIGNING_FAILURE;\n+        } catch (final UnsupportedEncodingException e) {\n+            exception = e;\n+            errCode = UNSUPPORTED_ENCODING;\n+        }\n+\n+        final ClientException clientException = new ClientException(\n+                errCode,\n+                exception.getMessage(),\n+                exception\n+        );\n+\n+        Logger.error(\n+                TAG,\n+                clientException.getMessage(),\n+                clientException\n+        );\n+\n+        throw clientException;\n+    }\n+\n+    @Override\n+    public boolean verify(@NonNull final String plainText, @NonNull final String signatureStr) {\n+        final String errCode;\n+        final Exception exception;\n+\n+        try {\n+            final byte[] inputBytesToVerify = plainText.getBytes(ENCODING_UTF8);\n+            final KeyStore.Entry keyEntry = mKeyStore.getEntry(KEYSTORE_ENTRY_ALIAS, null);\n+\n+            if (!(keyEntry instanceof KeyStore.PrivateKeyEntry)) {\n+                Logger.warn(\n+                        TAG + \":verify\",\n+                        PRIVATE_KEY_NOT_FOUND\n+                );\n+                return false;\n+            }\n+\n+            final Signature signature = Signature.getInstance(SHA_256_WITH_RSA);\n+            signature.initVerify(((KeyStore.PrivateKeyEntry) keyEntry).getCertificate());\n+            signature.update(inputBytesToVerify);\n+            final byte[] signatureBytes = Base64.decode(signatureStr, Base64.DEFAULT);\n+", "originalCommit": "e099e46a4933667293680a3e12d8bbb08788789e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY0MDkzMA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r486640930", "bodyText": "8ffb1b7", "author": "iambmelt", "createdAt": "2020-09-10T21:21:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzNTM4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "8ffb1b78e4d5a297cb78e0790b0d7083d9532667", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java b/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\nindex 2aa81ba9c..bb19a2e2b 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\n\n@@ -571,7 +571,6 @@ class DevicePopManager implements IDevicePopManager {\n             signature.initVerify(((KeyStore.PrivateKeyEntry) keyEntry).getCertificate());\n             signature.update(inputBytesToVerify);\n             final byte[] signatureBytes = Base64.decode(signatureStr, Base64.DEFAULT);\n-\n             return signature.verify(signatureBytes);\n         } catch (final UnsupportedEncodingException e) {\n             errCode = UNSUPPORTED_ENCODING;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzNTUzMw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r486635533", "bodyText": "Remove resolved TODO", "author": "iambmelt", "createdAt": "2020-09-10T21:10:39Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -441,6 +493,209 @@ public void run() {\n         });\n     }\n \n+    @Override\n+    public String sign(@NonNull final String input) throws ClientException {\n+        final Exception exception;\n+        final String errCode;\n+\n+        try {\n+            final byte[] inputBytesToSign = input.getBytes(ENCODING_UTF8);\n+            final KeyStore.Entry keyEntry = mKeyStore.getEntry(KEYSTORE_ENTRY_ALIAS, null);\n+\n+            if (!(keyEntry instanceof KeyStore.PrivateKeyEntry)) {\n+                Logger.warn(\n+                        TAG + \":sign\",\n+                        PRIVATE_KEY_NOT_FOUND\n+                );\n+                throw new ClientException(INVALID_KEY_MISSING);\n+            }\n+\n+            final Signature signature = Signature.getInstance(SHA_256_WITH_RSA);\n+            signature.initSign(((KeyStore.PrivateKeyEntry) keyEntry).getPrivateKey());\n+            signature.update(inputBytesToSign);\n+            final byte[] signedBytes = signature.sign();\n+            return Base64.encodeToString(signedBytes, Base64.DEFAULT);\n+        } catch (final KeyStoreException e) {\n+            exception = e;\n+            errCode = KEYSTORE_NOT_INITIALIZED;\n+        } catch (final NoSuchAlgorithmException e) {\n+            exception = e;\n+            errCode = NO_SUCH_ALGORITHM;\n+        } catch (final UnrecoverableEntryException e) {\n+            exception = e;\n+            errCode = INVALID_PROTECTION_PARAMS;\n+        } catch (final InvalidKeyException e) {\n+            exception = e;\n+            errCode = INVALID_KEY;\n+        } catch (final SignatureException e) {\n+            exception = e;\n+            errCode = SIGNING_FAILURE;\n+        } catch (final UnsupportedEncodingException e) {\n+            exception = e;\n+            errCode = UNSUPPORTED_ENCODING;\n+        }\n+\n+        final ClientException clientException = new ClientException(\n+                errCode,\n+                exception.getMessage(),\n+                exception\n+        );\n+\n+        Logger.error(\n+                TAG,\n+                clientException.getMessage(),\n+                clientException\n+        );\n+\n+        throw clientException;\n+    }\n+\n+    @Override\n+    public boolean verify(@NonNull final String plainText, @NonNull final String signatureStr) {\n+        final String errCode;\n+        final Exception exception;\n+\n+        try {\n+            final byte[] inputBytesToVerify = plainText.getBytes(ENCODING_UTF8);\n+            final KeyStore.Entry keyEntry = mKeyStore.getEntry(KEYSTORE_ENTRY_ALIAS, null);\n+\n+            if (!(keyEntry instanceof KeyStore.PrivateKeyEntry)) {\n+                Logger.warn(\n+                        TAG + \":verify\",\n+                        PRIVATE_KEY_NOT_FOUND\n+                );\n+                return false;\n+            }\n+\n+            final Signature signature = Signature.getInstance(SHA_256_WITH_RSA);\n+            signature.initVerify(((KeyStore.PrivateKeyEntry) keyEntry).getCertificate());\n+            signature.update(inputBytesToVerify);\n+            final byte[] signatureBytes = Base64.decode(signatureStr, Base64.DEFAULT);\n+\n+            return signature.verify(signatureBytes);\n+        } catch (final UnsupportedEncodingException e) {\n+            errCode = UNSUPPORTED_ENCODING;\n+            exception = e;\n+        } catch (final NoSuchAlgorithmException e) {\n+            errCode = NO_SUCH_ALGORITHM;\n+            exception = e;\n+        } catch (final KeyStoreException e) {\n+            errCode = KEYSTORE_NOT_INITIALIZED;\n+            exception = e;\n+        } catch (final UnrecoverableEntryException e) {\n+            errCode = INVALID_PROTECTION_PARAMS;\n+            exception = e;\n+        } catch (final InvalidKeyException e) {\n+            errCode = INVALID_KEY;\n+            exception = e;\n+        } catch (final SignatureException e) {\n+            errCode = SIGNING_FAILURE;\n+            exception = e;\n+        }\n+\n+        Logger.error(\n+                TAG + \":verify\",\n+                errCode,\n+                exception\n+        );\n+\n+        return false;\n+    }\n+\n+    @Override\n+    public String getPublicKey(@NonNull final PublicKeyFormat format) throws ClientException {\n+        switch (format) {\n+            case X_509_SubjectPublicKeyInfo_ASN_1:\n+                return getX509SubjectPublicKeyInfo();\n+            case JWK:\n+                return getJwkPublicKey();\n+            default:\n+                final String errMsg = \"Unrecognized or unsupported key format: \" + format;\n+                final ClientException clientException = new ClientException(\n+                        UNKNOWN_EXPORT_FORMAT,\n+                        errMsg\n+                );\n+\n+                Logger.error(\n+                        TAG + \":getPublicKey\",\n+                        errMsg,\n+                        clientException\n+                );\n+\n+                throw clientException;\n+        }\n+    }\n+\n+    private String getJwkPublicKey() throws ClientException {\n+        final Exception exception;\n+        final String errCode;\n+\n+        try {\n+            final net.minidev.json.JSONObject jwkJson = getDevicePopJwkMinifiedJson();\n+            return jwkJson.getAsString(SignedHttpRequestJwtClaims.JWK); // TODO create a constant", "originalCommit": "e099e46a4933667293680a3e12d8bbb08788789e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY0MTQxNw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r486641417", "bodyText": "c113f14", "author": "iambmelt", "createdAt": "2020-09-10T21:23:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzNTUzMw=="}], "type": "inlineReview", "revised_code": {"commit": "8ffb1b78e4d5a297cb78e0790b0d7083d9532667", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java b/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\nindex 2aa81ba9c..bb19a2e2b 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\n\n@@ -571,7 +571,6 @@ class DevicePopManager implements IDevicePopManager {\n             signature.initVerify(((KeyStore.PrivateKeyEntry) keyEntry).getCertificate());\n             signature.update(inputBytesToVerify);\n             final byte[] signatureBytes = Base64.decode(signatureStr, Base64.DEFAULT);\n-\n             return signature.verify(signatureBytes);\n         } catch (final UnsupportedEncodingException e) {\n             errCode = UNSUPPORTED_ENCODING;\n"}}, {"oid": "65c2d016ec8eb6d6317ec731adb0d042a33ddeb4", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/65c2d016ec8eb6d6317ec731adb0d042a33ddeb4", "message": "Javadoc signing/verification API algs", "committedDate": "2020-09-10T21:12:47Z", "type": "commit"}, {"oid": "f65f1596212fe20b71e69ae9a0adef47f045e0a3", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/f65f1596212fe20b71e69ae9a0adef47f045e0a3", "message": "Adding javadoc for public key export formats", "committedDate": "2020-09-10T21:20:22Z", "type": "commit"}, {"oid": "8ffb1b78e4d5a297cb78e0790b0d7083d9532667", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/8ffb1b78e4d5a297cb78e0790b0d7083d9532667", "message": "Clean up stray newline", "committedDate": "2020-09-10T21:21:32Z", "type": "commit"}, {"oid": "c113f14d669829b12886b717dc301d05d1a64425", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/c113f14d669829b12886b717dc301d05d1a64425", "message": "Removing resolved TODO", "committedDate": "2020-09-10T21:22:23Z", "type": "commit"}, {"oid": "bda5f733b49c782e667af7c1cc5dc97135b14380", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/bda5f733b49c782e667af7c1cc5dc97135b14380", "message": "Adding nullability annots", "committedDate": "2020-09-10T21:26:37Z", "type": "commit"}, {"oid": "e5b83a8164005426b0552488cbe194b3c283f05b", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/e5b83a8164005426b0552488cbe194b3c283f05b", "message": "WIP signing tests", "committedDate": "2020-09-10T22:35:07Z", "type": "commit"}, {"oid": "c0312398104ed6597b0ac5cfeaf1aa111a9a056e", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/c0312398104ed6597b0ac5cfeaf1aa111a9a056e", "message": "Code cleanup", "committedDate": "2020-09-10T22:45:28Z", "type": "commit"}, {"oid": "af0ca035a02c8d8dff1acf345dbcd1cf586bb204", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/af0ca035a02c8d8dff1acf345dbcd1cf586bb204", "message": "Tweaking javadoc", "committedDate": "2020-09-10T22:47:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3NzE4Ng==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r486677186", "bodyText": "FYI Robolectric cannot be used here -- it throws Exceptions that the AndroidKeystore cannot be used. Falling back to emulator tests.....", "author": "iambmelt", "createdAt": "2020-09-10T22:53:26Z", "path": "common/src/androidTest/java/com/microsoft/identity/common/internal/platform/DevicePoPManagerSigningTests.java", "diffHunk": "@@ -0,0 +1,108 @@\n+//  Copyright (c) Microsoft Corporation.\n+//  All rights reserved.\n+//\n+//  This code is licensed under the MIT License.\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files(the \"Software\"), to deal\n+//  in the Software without restriction, including without limitation the rights\n+//  to use, copy, modify, merge, publish, distribute, sublicense, and / or sell\n+//  copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions :\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+//  THE SOFTWARE.\n+package com.microsoft.identity.common.internal.platform;\n+\n+import android.os.Build;\n+\n+import androidx.test.core.app.ApplicationProvider;\n+\n+import com.microsoft.identity.common.exception.ClientException;\n+\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import java.io.IOException;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.cert.CertificateException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static com.microsoft.identity.common.internal.platform.DevicePopManager.SigningAlgorithms.MD5_WITH_RSA;\n+import static com.microsoft.identity.common.internal.platform.DevicePopManager.SigningAlgorithms.NONE_WITH_RSA;\n+import static com.microsoft.identity.common.internal.platform.DevicePopManager.SigningAlgorithms.SHA_256_WITH_RSA;\n+import static com.microsoft.identity.common.internal.platform.DevicePopManager.SigningAlgorithms.SHA_256_WITH_RSA_PSS;\n+import static com.microsoft.identity.common.internal.platform.DevicePopManager.SigningAlgorithms.SHA_384_WITH_RSA;\n+import static com.microsoft.identity.common.internal.platform.DevicePopManager.SigningAlgorithms.SHA_384_WITH_RSA_PSS;\n+import static com.microsoft.identity.common.internal.platform.DevicePopManager.SigningAlgorithms.SHA_512_WITH_RSA;\n+import static com.microsoft.identity.common.internal.platform.DevicePopManager.SigningAlgorithms.SHA_512_WITH_RSA_PSS;\n+\n+@RunWith(Parameterized.class)\n+public class DevicePoPManagerSigningTests {\n+\n+    private static final String DATA_TO_SIGN = \"The quick brown fox jumped over the lazy dog.\";\n+\n+    private final IDevicePopManager devicePopManager;\n+    private final String signingAlg;\n+\n+    @Parameterized.Parameters", "originalCommit": "af0ca035a02c8d8dff1acf345dbcd1cf586bb204", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ef45a531f4458dca339b34f159080bfbd1b39bf1", "chunk": "diff --git a/common/src/androidTest/java/com/microsoft/identity/common/internal/platform/DevicePoPManagerSigningTests.java b/common/src/androidTest/java/com/microsoft/identity/common/internal/platform/DevicePoPManagerSigningTests.java\nindex 84598e9a0..174950cfe 100644\n--- a/common/src/androidTest/java/com/microsoft/identity/common/internal/platform/DevicePoPManagerSigningTests.java\n+++ b/common/src/androidTest/java/com/microsoft/identity/common/internal/platform/DevicePoPManagerSigningTests.java\n\n@@ -42,14 +42,14 @@ import java.security.cert.CertificateException;\n import java.util.ArrayList;\n import java.util.List;\n \n-import static com.microsoft.identity.common.internal.platform.DevicePopManager.SigningAlgorithms.MD5_WITH_RSA;\n-import static com.microsoft.identity.common.internal.platform.DevicePopManager.SigningAlgorithms.NONE_WITH_RSA;\n-import static com.microsoft.identity.common.internal.platform.DevicePopManager.SigningAlgorithms.SHA_256_WITH_RSA;\n-import static com.microsoft.identity.common.internal.platform.DevicePopManager.SigningAlgorithms.SHA_256_WITH_RSA_PSS;\n-import static com.microsoft.identity.common.internal.platform.DevicePopManager.SigningAlgorithms.SHA_384_WITH_RSA;\n-import static com.microsoft.identity.common.internal.platform.DevicePopManager.SigningAlgorithms.SHA_384_WITH_RSA_PSS;\n-import static com.microsoft.identity.common.internal.platform.DevicePopManager.SigningAlgorithms.SHA_512_WITH_RSA;\n-import static com.microsoft.identity.common.internal.platform.DevicePopManager.SigningAlgorithms.SHA_512_WITH_RSA_PSS;\n+import static com.microsoft.identity.common.internal.platform.IDevicePopManager.SigningAlgorithm.MD5_WITH_RSA;\n+import static com.microsoft.identity.common.internal.platform.IDevicePopManager.SigningAlgorithm.NONE_WITH_RSA;\n+import static com.microsoft.identity.common.internal.platform.IDevicePopManager.SigningAlgorithm.SHA_256_WITH_RSA;\n+import static com.microsoft.identity.common.internal.platform.IDevicePopManager.SigningAlgorithm.SHA_256_WITH_RSA_PSS;\n+import static com.microsoft.identity.common.internal.platform.IDevicePopManager.SigningAlgorithm.SHA_384_WITH_RSA;\n+import static com.microsoft.identity.common.internal.platform.IDevicePopManager.SigningAlgorithm.SHA_384_WITH_RSA_PSS;\n+import static com.microsoft.identity.common.internal.platform.IDevicePopManager.SigningAlgorithm.SHA_512_WITH_RSA;\n+import static com.microsoft.identity.common.internal.platform.IDevicePopManager.SigningAlgorithm.SHA_512_WITH_RSA_PSS;\n \n @RunWith(Parameterized.class)\n public class DevicePoPManagerSigningTests {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY4MjIxOA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r486682218", "bodyText": "Update changelog", "author": "iambmelt", "createdAt": "2020-09-10T23:09:23Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -98,6 +107,37 @@\n \n     private static final String TAG = DevicePopManager.class.getSimpleName();\n \n+    /**\n+     * Signing algorithms supported by our underlying keystore. Not all algs available at all device\n+     * levels.\n+     */\n+    public static class SigningAlgorithms {", "originalCommit": "af0ca035a02c8d8dff1acf345dbcd1cf586bb204", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY4NDMyNw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r486684327", "bodyText": "12d7a01", "author": "iambmelt", "createdAt": "2020-09-10T23:16:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY4MjIxOA=="}], "type": "inlineReview", "revised_code": {"commit": "ef45a531f4458dca339b34f159080bfbd1b39bf1", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java b/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\nindex b6779044d..9190e0595 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\n\n@@ -107,37 +107,6 @@ class DevicePopManager implements IDevicePopManager {\n \n     private static final String TAG = DevicePopManager.class.getSimpleName();\n \n-    /**\n-     * Signing algorithms supported by our underlying keystore. Not all algs available at all device\n-     * levels.\n-     */\n-    public static class SigningAlgorithms {\n-\n-        @RequiresApi(Build.VERSION_CODES.JELLY_BEAN_MR2)\n-        public static final String MD5_WITH_RSA = \"MD5withRSA\";\n-\n-        @RequiresApi(Build.VERSION_CODES.JELLY_BEAN_MR2)\n-        public static final String NONE_WITH_RSA = \"NONEwithRSA\";\n-\n-        @RequiresApi(Build.VERSION_CODES.JELLY_BEAN_MR2)\n-        public static final String SHA_256_WITH_RSA = \"SHA256withRSA\";\n-\n-        @RequiresApi(Build.VERSION_CODES.M)\n-        public static final String SHA_256_WITH_RSA_PSS = \"SHA256withRSA/PSS\";\n-\n-        @RequiresApi(Build.VERSION_CODES.JELLY_BEAN_MR2)\n-        public static final String SHA_384_WITH_RSA = \"SHA384withRSA\";\n-\n-        @RequiresApi(Build.VERSION_CODES.M)\n-        public static final String SHA_384_WITH_RSA_PSS = \"SHA384withRSA/PSS\";\n-\n-        @RequiresApi(Build.VERSION_CODES.JELLY_BEAN_MR2)\n-        public static final String SHA_512_WITH_RSA = \"SHA512withRSA\";\n-\n-        @RequiresApi(Build.VERSION_CODES.M)\n-        public static final String SHA_512_WITH_RSA_PSS = \"SHA512withRSA/PSS\";\n-    }\n-\n     /**\n      * The PoP alias in the designated KeyStore.\n      */\n"}}, {"oid": "12d7a01f595789c8926c4b009f4b173bb07322ef", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/12d7a01f595789c8926c4b009f4b173bb07322ef", "message": "Update changelog for PoP enhancements", "committedDate": "2020-09-10T23:14:46Z", "type": "commit"}, {"oid": "fff58021cd09ecc36fcad8fc29a4d45c03f70bab", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/fff58021cd09ecc36fcad8fc29a4d45c03f70bab", "message": "Merge branch 'dev' into iambmelt/oneauth-pop-extensions-1", "committedDate": "2020-09-14T20:18:24Z", "type": "commit"}, {"oid": "8c201e4f48b995f9b8a86a7e975939e30829d426", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/8c201e4f48b995f9b8a86a7e975939e30829d426", "message": "Merge branch 'dev' into iambmelt/oneauth-pop-extensions-1", "committedDate": "2020-09-15T17:49:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2MDk5Nw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r488960997", "bodyText": "nit: rename to testAsymmetricKeyCreationDateNullWhenUninitialized", "author": "shahzaibj", "createdAt": "2020-09-15T20:42:46Z", "path": "common/src/androidTest/java/com/microsoft/identity/common/internal/platform/DevicePoPManagerTests.java", "diffHunk": "@@ -289,4 +302,60 @@ public void testMintSignedAccessTokenContainsRequisiteClaims()\n         Assert.assertEquals(nonce, jwtClaimsSet.getClaim(\"nonce\"));\n         Assert.assertNotNull(jwtClaimsSet.getClaim(\"cnf\"));\n     }\n+\n+    @Test\n+    public void testAsymmetricKeyNullWhenUninitialized() throws ClientException {", "originalCommit": "8c201e4f48b995f9b8a86a7e975939e30829d426", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2MzI3OQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r488963279", "bodyText": "See cf890e2 thanks!", "author": "iambmelt", "createdAt": "2020-09-15T20:47:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2MDk5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "cf890e25e09cf5beb74c4c0a10f9a206ac7af973", "chunk": "diff --git a/common/src/androidTest/java/com/microsoft/identity/common/internal/platform/DevicePoPManagerTests.java b/common/src/androidTest/java/com/microsoft/identity/common/internal/platform/DevicePoPManagerTests.java\nindex 1c64a994c..5dbf064ed 100644\n--- a/common/src/androidTest/java/com/microsoft/identity/common/internal/platform/DevicePoPManagerTests.java\n+++ b/common/src/androidTest/java/com/microsoft/identity/common/internal/platform/DevicePoPManagerTests.java\n\n@@ -304,7 +304,7 @@ public class DevicePoPManagerTests {\n     }\n \n     @Test\n-    public void testAsymmetricKeyNullWhenUninitialized() throws ClientException {\n+    public void testAsymmetricKeyCreationDateNullWhenUninitialized() throws ClientException {\n         final Date createdDate = mDevicePopManager.getAsymmetricKeyCreationDate();\n         Assert.assertNull(createdDate);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2MjIyMg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r488962222", "bodyText": "What data type are these? If these are Strings, should we also assert not empty String?", "author": "shahzaibj", "createdAt": "2020-09-15T20:45:12Z", "path": "common/src/androidTest/java/com/microsoft/identity/common/internal/platform/DevicePoPManagerTests.java", "diffHunk": "@@ -289,4 +302,60 @@ public void testMintSignedAccessTokenContainsRequisiteClaims()\n         Assert.assertEquals(nonce, jwtClaimsSet.getClaim(\"nonce\"));\n         Assert.assertNotNull(jwtClaimsSet.getClaim(\"cnf\"));\n     }\n+\n+    @Test\n+    public void testAsymmetricKeyNullWhenUninitialized() throws ClientException {\n+        final Date createdDate = mDevicePopManager.getAsymmetricKeyCreationDate();\n+        Assert.assertNull(createdDate);\n+    }\n+\n+    @Test\n+    public void testAsymmetricKeyHasCreationDate() throws ClientException {\n+        final Date createdDate = mDevicePopManager.getAsymmetricKeyCreationDate();\n+        Assert.assertNull(createdDate);\n+\n+        // Generate it\n+        mDevicePopManager.generateAsymmetricKey(mContext);\n+\n+        // Assert the Date exists\n+        Assert.assertNotNull(mDevicePopManager.getAsymmetricKeyCreationDate());\n+    }\n+\n+    @Test\n+    public void testAsymmetricKeyHasPublicKeyX509() throws ClientException, NoSuchAlgorithmException, InvalidKeySpecException {\n+        // Generate keys\n+        mDevicePopManager.generateAsymmetricKey(mContext);\n+\n+        // Get the public key\n+        final String publicKey = mDevicePopManager.getPublicKey(X_509_SubjectPublicKeyInfo_ASN_1);\n+\n+        // Rehydrate the certificate\n+        final byte[] bytes = Base64.decode(publicKey, Base64.DEFAULT);\n+        final KeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\n+        final PublicKey pubKeyRestored = keyFactory.generatePublic(new X509EncodedKeySpec(bytes));\n+        Assert.assertEquals(\"X.509\", pubKeyRestored.getFormat());\n+    }\n+\n+    @Test\n+    public void testAsymmetricKeyHasPublicKeyJwk() throws ClientException {\n+        // Generate keys\n+        mDevicePopManager.generateAsymmetricKey(mContext);\n+\n+        // Get the public key\n+        final String publicKey = mDevicePopManager.getPublicKey(JWK);\n+\n+        // Convert it to JSON, parse to verify fields\n+        final JsonElement jwkElement = new JsonParser().parse(publicKey);\n+\n+        // Convert to JsonObject to extract claims\n+        final JsonObject jwkObj = jwkElement.getAsJsonObject();\n+\n+        // We should expect the following claims...\n+        // 'kty' - Key Type - Identifies the cryptographic alg used with this key (ex: RSA, EC)\n+        // 'e' - Public Exponent - The exponent used on signed/encoded data to decode the orig value\n+        // 'n' - Modulus - The product of two prime numbers used to generate the key pair\n+        Assert.assertNotNull(jwkObj.get(\"kty\"));\n+        Assert.assertNotNull(jwkObj.get(\"e\"));\n+        Assert.assertNotNull(jwkObj.get(\"n\"));", "originalCommit": "8c201e4f48b995f9b8a86a7e975939e30829d426", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA3NTM3OA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r489075378", "bodyText": "d09089b", "author": "iambmelt", "createdAt": "2020-09-15T23:33:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2MjIyMg=="}], "type": "inlineReview", "revised_code": {"commit": "cf890e25e09cf5beb74c4c0a10f9a206ac7af973", "chunk": "diff --git a/common/src/androidTest/java/com/microsoft/identity/common/internal/platform/DevicePoPManagerTests.java b/common/src/androidTest/java/com/microsoft/identity/common/internal/platform/DevicePoPManagerTests.java\nindex 1c64a994c..5dbf064ed 100644\n--- a/common/src/androidTest/java/com/microsoft/identity/common/internal/platform/DevicePoPManagerTests.java\n+++ b/common/src/androidTest/java/com/microsoft/identity/common/internal/platform/DevicePoPManagerTests.java\n\n@@ -304,7 +304,7 @@ public class DevicePoPManagerTests {\n     }\n \n     @Test\n-    public void testAsymmetricKeyNullWhenUninitialized() throws ClientException {\n+    public void testAsymmetricKeyCreationDateNullWhenUninitialized() throws ClientException {\n         final Date createdDate = mDevicePopManager.getAsymmetricKeyCreationDate();\n         Assert.assertNull(createdDate);\n     }\n"}}, {"oid": "cf890e25e09cf5beb74c4c0a10f9a206ac7af973", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/cf890e25e09cf5beb74c4c0a10f9a206ac7af973", "message": "Rename test method", "committedDate": "2020-09-15T20:46:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2MzQzNg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r488963436", "bodyText": "Could/should this be an enum?", "author": "shahzaibj", "createdAt": "2020-09-15T20:47:25Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -98,6 +107,37 @@\n \n     private static final String TAG = DevicePopManager.class.getSimpleName();\n \n+    /**\n+     * Signing algorithms supported by our underlying keystore. Not all algs available at all device\n+     * levels.\n+     */\n+    public static class SigningAlgorithms {", "originalCommit": "8c201e4f48b995f9b8a86a7e975939e30829d426", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2NjEzMg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r488966132", "bodyText": "Will leave as a string, these are as-is from the documentation and are supplied to the keystore as Strings -- that's Android's API. Having these as enums means conversion between types...(enum -> string). Since this isn't public API, I'm inclined to leave as-is\nSee:\nhttps://developer.android.com/training/articles/keystore#SupportedSignatures", "author": "iambmelt", "createdAt": "2020-09-15T20:52:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2MzQzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2OTA4OA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r488969088", "bodyText": "Eh.  trading a call to .name() on the enum for compile-time argument checking is fairly trivial in my experience.", "author": "AdamBJohnsonx", "createdAt": "2020-09-15T20:58:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2MzQzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk3MDYyNg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r488970626", "bodyText": "Since this is proving to be popular feedback, I'll take this change after all", "author": "iambmelt", "createdAt": "2020-09-15T21:01:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2MzQzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA2MDc4MQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r489060781", "bodyText": "ef45a53", "author": "iambmelt", "createdAt": "2020-09-15T23:09:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2MzQzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA2MTQ0OA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r489061448", "bodyText": "Minor note: using .toString() instead of .name() because the enum cannot contain / chars in its declaration, as is required for RSA w/ PSS", "author": "iambmelt", "createdAt": "2020-09-15T23:09:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2MzQzNg=="}], "type": "inlineReview", "revised_code": {"commit": "ef45a531f4458dca339b34f159080bfbd1b39bf1", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java b/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\nindex b6779044d..9190e0595 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\n\n@@ -107,37 +107,6 @@ class DevicePopManager implements IDevicePopManager {\n \n     private static final String TAG = DevicePopManager.class.getSimpleName();\n \n-    /**\n-     * Signing algorithms supported by our underlying keystore. Not all algs available at all device\n-     * levels.\n-     */\n-    public static class SigningAlgorithms {\n-\n-        @RequiresApi(Build.VERSION_CODES.JELLY_BEAN_MR2)\n-        public static final String MD5_WITH_RSA = \"MD5withRSA\";\n-\n-        @RequiresApi(Build.VERSION_CODES.JELLY_BEAN_MR2)\n-        public static final String NONE_WITH_RSA = \"NONEwithRSA\";\n-\n-        @RequiresApi(Build.VERSION_CODES.JELLY_BEAN_MR2)\n-        public static final String SHA_256_WITH_RSA = \"SHA256withRSA\";\n-\n-        @RequiresApi(Build.VERSION_CODES.M)\n-        public static final String SHA_256_WITH_RSA_PSS = \"SHA256withRSA/PSS\";\n-\n-        @RequiresApi(Build.VERSION_CODES.JELLY_BEAN_MR2)\n-        public static final String SHA_384_WITH_RSA = \"SHA384withRSA\";\n-\n-        @RequiresApi(Build.VERSION_CODES.M)\n-        public static final String SHA_384_WITH_RSA_PSS = \"SHA384withRSA/PSS\";\n-\n-        @RequiresApi(Build.VERSION_CODES.JELLY_BEAN_MR2)\n-        public static final String SHA_512_WITH_RSA = \"SHA512withRSA\";\n-\n-        @RequiresApi(Build.VERSION_CODES.M)\n-        public static final String SHA_512_WITH_RSA_PSS = \"SHA512withRSA/PSS\";\n-    }\n-\n     /**\n      * The PoP alias in the designated KeyStore.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2NDAxNA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r488964014", "bodyText": "may be store :sign in a var called methodName to follow the pattern in other places", "author": "shahzaibj", "createdAt": "2020-09-15T20:48:39Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -441,6 +519,214 @@ public void run() {\n         });\n     }\n \n+    @Override\n+    public @NonNull\n+    String sign(@NonNull final String alg,\n+                @NonNull final String input) throws ClientException {\n+        final Exception exception;\n+        final String errCode;\n+\n+        try {\n+            final byte[] inputBytesToSign = input.getBytes(ENCODING_UTF8);\n+            final KeyStore.Entry keyEntry = mKeyStore.getEntry(KEYSTORE_ENTRY_ALIAS, null);\n+\n+            if (!(keyEntry instanceof KeyStore.PrivateKeyEntry)) {\n+                Logger.warn(\n+                        TAG + \":sign\",", "originalCommit": "8c201e4f48b995f9b8a86a7e975939e30829d426", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2Nzk4Ng==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r488967986", "bodyText": "Applied in ef84e4a thanks!", "author": "iambmelt", "createdAt": "2020-09-15T20:56:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2NDAxNA=="}], "type": "inlineReview", "revised_code": {"commit": "ef84e4ac69a53770a901b7fa2498c1bcff58790f", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java b/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\nindex b6779044d..f870b7e40 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\n\n@@ -523,6 +523,7 @@ class DevicePopManager implements IDevicePopManager {\n     public @NonNull\n     String sign(@NonNull final String alg,\n                 @NonNull final String input) throws ClientException {\n+        final String methodName = \":sign\";\n         final Exception exception;\n         final String errCode;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcxMzQ5NA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r486713494", "bodyText": "I've asked this question a lot on these - is there any reason that this can't be an enum?  You'll get compile-time safety in that case and it'll promote to an interface-level enum.  You'll have to change this code to support new algorithms that may appear, however.", "author": "AdamBJohnsonx", "createdAt": "2020-09-11T01:00:44Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java", "diffHunk": "@@ -98,6 +107,37 @@\n \n     private static final String TAG = DevicePopManager.class.getSimpleName();\n \n+    /**\n+     * Signing algorithms supported by our underlying keystore. Not all algs available at all device\n+     * levels.\n+     */\n+    public static class SigningAlgorithms {", "originalCommit": "12d7a01f595789c8926c4b009f4b173bb07322ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA2MDg2NA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1026#discussion_r489060864", "bodyText": "ef45a53", "author": "iambmelt", "createdAt": "2020-09-15T23:09:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcxMzQ5NA=="}], "type": "inlineReview", "revised_code": {"commit": "ef45a531f4458dca339b34f159080bfbd1b39bf1", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java b/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\nindex b6779044d..9190e0595 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/platform/DevicePopManager.java\n\n@@ -107,37 +107,6 @@ class DevicePopManager implements IDevicePopManager {\n \n     private static final String TAG = DevicePopManager.class.getSimpleName();\n \n-    /**\n-     * Signing algorithms supported by our underlying keystore. Not all algs available at all device\n-     * levels.\n-     */\n-    public static class SigningAlgorithms {\n-\n-        @RequiresApi(Build.VERSION_CODES.JELLY_BEAN_MR2)\n-        public static final String MD5_WITH_RSA = \"MD5withRSA\";\n-\n-        @RequiresApi(Build.VERSION_CODES.JELLY_BEAN_MR2)\n-        public static final String NONE_WITH_RSA = \"NONEwithRSA\";\n-\n-        @RequiresApi(Build.VERSION_CODES.JELLY_BEAN_MR2)\n-        public static final String SHA_256_WITH_RSA = \"SHA256withRSA\";\n-\n-        @RequiresApi(Build.VERSION_CODES.M)\n-        public static final String SHA_256_WITH_RSA_PSS = \"SHA256withRSA/PSS\";\n-\n-        @RequiresApi(Build.VERSION_CODES.JELLY_BEAN_MR2)\n-        public static final String SHA_384_WITH_RSA = \"SHA384withRSA\";\n-\n-        @RequiresApi(Build.VERSION_CODES.M)\n-        public static final String SHA_384_WITH_RSA_PSS = \"SHA384withRSA/PSS\";\n-\n-        @RequiresApi(Build.VERSION_CODES.JELLY_BEAN_MR2)\n-        public static final String SHA_512_WITH_RSA = \"SHA512withRSA\";\n-\n-        @RequiresApi(Build.VERSION_CODES.M)\n-        public static final String SHA_512_WITH_RSA_PSS = \"SHA512withRSA/PSS\";\n-    }\n-\n     /**\n      * The PoP alias in the designated KeyStore.\n      */\n"}}, {"oid": "ef84e4ac69a53770a901b7fa2498c1bcff58790f", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/ef84e4ac69a53770a901b7fa2498c1bcff58790f", "message": "Method names as private instance vars for logging", "committedDate": "2020-09-15T20:55:24Z", "type": "commit"}, {"oid": "0edbdc137706382640b4a580e6579e53e4ed2bfb", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/0edbdc137706382640b4a580e6579e53e4ed2bfb", "message": "Merge branch 'dev' into iambmelt/oneauth-pop-extensions-1", "committedDate": "2020-09-15T22:35:36Z", "type": "commit"}, {"oid": "ef45a531f4458dca339b34f159080bfbd1b39bf1", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/ef45a531f4458dca339b34f159080bfbd1b39bf1", "message": "Convert class of strings to enum", "committedDate": "2020-09-15T23:07:17Z", "type": "commit"}, {"oid": "d09089bff82959befd903fe5c13f5ed81405e6aa", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/d09089bff82959befd903fe5c13f5ed81405e6aa", "message": "Adding a nullability test", "committedDate": "2020-09-15T23:32:44Z", "type": "commit"}]}