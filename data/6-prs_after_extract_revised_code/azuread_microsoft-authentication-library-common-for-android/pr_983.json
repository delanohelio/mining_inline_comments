{"pr_number": 983, "pr_title": "Device Code Flow Final PR", "pr_createdAt": "2020-07-29T16:36:12Z", "pr_url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983", "timeline": [{"oid": "6d29e3bf6dd7a904180e62c5894b2e4d23505529", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/6d29e3bf6dd7a904180e62c5894b2e4d23505529", "message": "Some work in BaseController", "committedDate": "2020-07-27T18:10:35Z", "type": "commit"}, {"oid": "1f9b459442c3220aba7daa85b727c522a45f079d", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/1f9b459442c3220aba7daa85b727c522a45f079d", "message": "End-to-end working", "committedDate": "2020-07-29T15:51:21Z", "type": "commit"}, {"oid": "d93ffdfd2c08dfb76bbf729033f589822ca9ccac", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/d93ffdfd2c08dfb76bbf729033f589822ca9ccac", "message": "Small tweaks", "committedDate": "2020-07-29T16:27:06Z", "type": "commit"}, {"oid": "4e6e357ce089b4a7ab47ff001c882a68827bb565", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/4e6e357ce089b4a7ab47ff001c882a68827bb565", "message": "Merge branch 'dev' into t-fadura/dcf-main", "committedDate": "2020-07-29T16:39:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3Nzk3Nw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462477977", "bodyText": "We should have a constant for this somewhere already, let me track it down", "author": "iambmelt", "createdAt": "2020-07-29T17:47:35Z", "path": "common/src/main/java/com/microsoft/identity/common/exception/ErrorStrings.java", "diffHunk": "@@ -422,9 +422,16 @@ private ErrorStrings() {\n     public final static String DEVICE_CODE_FLOW_EXPIRED_TOKEN_CODE = \"expired_token\";\n     public final static String DEVICE_CODE_FLOW_EXPIRED_TOKEN_MESSAGE = \"The token has expired, therefore authentication is no longer possible with this flow attempt. Re-run the Device Code Flow Protocol to try again.\";\n \n+    /**\n+     * Device Code Flow only.\n+     * The token was polled again after it was already received.\n+     */\n+    public final static String DEVICE_CODE_FLOW_INVALID_GRANT_CODE = \"invalid_grant\";", "originalCommit": "4e6e357ce089b4a7ab47ff001c882a68827bb565", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3ODkwNw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462478907", "bodyText": "Let's use this value here:\nhttps://github.com/AzureAD/microsoft-authentication-library-common-for-android/blob/dev/common/src/main/java/com/microsoft/identity/common/adal/internal/AuthenticationConstants.java#L1414", "author": "iambmelt", "createdAt": "2020-07-29T17:49:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3Nzk3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwODY1OQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462508659", "bodyText": "will do!", "author": "t-fadura", "createdAt": "2020-07-29T18:40:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3Nzk3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "22d538aeb40834f79e9be318b187e52d5e1afae1", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/exception/ErrorStrings.java b/common/src/main/java/com/microsoft/identity/common/exception/ErrorStrings.java\nindex 78f98e242..0b8eee60f 100644\n--- a/common/src/main/java/com/microsoft/identity/common/exception/ErrorStrings.java\n+++ b/common/src/main/java/com/microsoft/identity/common/exception/ErrorStrings.java\n\n@@ -425,8 +425,8 @@ public final class ErrorStrings {\n     /**\n      * Device Code Flow only.\n      * The token was polled again after it was already received.\n+     * Use error code in AuthenticationConstants.OAuth2ErrorCode\n      */\n-    public final static String DEVICE_CODE_FLOW_INVALID_GRANT_CODE = \"invalid_grant\";\n     public final static String DEVICE_CODE_FLOW_INVALID_GRANT_MESSAGE = \"The token for this device code has already been redeemed. To receive another access token, please re-run the Device Code Flow protocol.\";\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3OTMxNA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462479314", "bodyText": "Will this be shown to users? If yes, we'll need to have this localized", "author": "iambmelt", "createdAt": "2020-07-29T17:49:46Z", "path": "common/src/main/java/com/microsoft/identity/common/exception/ErrorStrings.java", "diffHunk": "@@ -422,9 +422,16 @@ private ErrorStrings() {\n     public final static String DEVICE_CODE_FLOW_EXPIRED_TOKEN_CODE = \"expired_token\";\n     public final static String DEVICE_CODE_FLOW_EXPIRED_TOKEN_MESSAGE = \"The token has expired, therefore authentication is no longer possible with this flow attempt. Re-run the Device Code Flow Protocol to try again.\";\n \n+    /**\n+     * Device Code Flow only.\n+     * The token was polled again after it was already received.\n+     */\n+    public final static String DEVICE_CODE_FLOW_INVALID_GRANT_CODE = \"invalid_grant\";\n+    public final static String DEVICE_CODE_FLOW_INVALID_GRANT_MESSAGE = \"The token for this device code has already been redeemed. To receive another access token, please re-run the Device Code Flow protocol.\";", "originalCommit": "4e6e357ce089b4a7ab47ff001c882a68827bb565", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwNDk1NQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462504955", "bodyText": "We never localize error message though.", "author": "rpdome", "createdAt": "2020-07-29T18:33:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3OTMxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUyNzgwMA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462527800", "bodyText": "I mean to say, this shouldn't even be something developers are tempted to show users if it's not localized.\ndevicecode_token_already_redeemed for example, nobody would try and show that to a user. Whereas a full sentence worth of error may imply this is intended to be consumed by the user", "author": "iambmelt", "createdAt": "2020-07-29T19:13:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3OTMxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUzMDUwNg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462530506", "bodyText": "On further consideration, I think this is probably OK as is; developers who are concerned with localization should be aware already that MSAL isn't localizing messages", "author": "iambmelt", "createdAt": "2020-07-29T19:18:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3OTMxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUzMTE5Nw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462531197", "bodyText": "I'll self-resolve. Anyone feel free to reactivate if you thing that rationale is flawed", "author": "iambmelt", "createdAt": "2020-07-29T19:19:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3OTMxNA=="}], "type": "inlineReview", "revised_code": {"commit": "22d538aeb40834f79e9be318b187e52d5e1afae1", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/exception/ErrorStrings.java b/common/src/main/java/com/microsoft/identity/common/exception/ErrorStrings.java\nindex 78f98e242..0b8eee60f 100644\n--- a/common/src/main/java/com/microsoft/identity/common/exception/ErrorStrings.java\n+++ b/common/src/main/java/com/microsoft/identity/common/exception/ErrorStrings.java\n\n@@ -425,8 +425,8 @@ public final class ErrorStrings {\n     /**\n      * Device Code Flow only.\n      * The token was polled again after it was already received.\n+     * Use error code in AuthenticationConstants.OAuth2ErrorCode\n      */\n-    public final static String DEVICE_CODE_FLOW_INVALID_GRANT_CODE = \"invalid_grant\";\n     public final static String DEVICE_CODE_FLOW_INVALID_GRANT_MESSAGE = \"The token for this device code has already been redeemed. To receive another access token, please re-run the Device Code Flow protocol.\";\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3OTk5NQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462479995", "bodyText": "Minor nit: input variable could be final", "author": "iambmelt", "createdAt": "2020-07-29T17:50:52Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/microsoft/MicrosoftTokenRequest.java", "diffHunk": "@@ -180,4 +185,12 @@ public String getMicrosoftEnrollmentId() {\n     public void setMicrosoftEnrollmentId(String microsoftEnrollmentId) {\n         this.mMicrosoftEnrollmentId = microsoftEnrollmentId;\n     }\n+\n+    public String getDeviceCode() {\n+        return mDeviceCode;\n+    }\n+\n+    public void setDeviceCode(String deviceCode) {", "originalCommit": "4e6e357ce089b4a7ab47ff001c882a68827bb565", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "22d538aeb40834f79e9be318b187e52d5e1afae1", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/providers/microsoft/MicrosoftTokenRequest.java b/common/src/main/java/com/microsoft/identity/common/internal/providers/microsoft/MicrosoftTokenRequest.java\nindex d5bc3a630..2bea43aa1 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/providers/microsoft/MicrosoftTokenRequest.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/providers/microsoft/MicrosoftTokenRequest.java\n\n@@ -186,11 +188,12 @@ public class MicrosoftTokenRequest extends TokenRequest {\n         this.mMicrosoftEnrollmentId = microsoftEnrollmentId;\n     }\n \n+    @Nullable\n     public String getDeviceCode() {\n         return mDeviceCode;\n     }\n \n-    public void setDeviceCode(String deviceCode) {\n+    public void setDeviceCode(final String deviceCode) {\n         this.mDeviceCode = deviceCode;\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4MDcyNA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462480724", "bodyText": "Let's declare this value @Nullable (as looks to be unassigned in auth code flow)\n@Nullable\npublic String getDeviceCode() {\n    // ...\n}", "author": "iambmelt", "createdAt": "2020-07-29T17:52:07Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/microsoft/MicrosoftTokenRequest.java", "diffHunk": "@@ -180,4 +185,12 @@ public String getMicrosoftEnrollmentId() {\n     public void setMicrosoftEnrollmentId(String microsoftEnrollmentId) {\n         this.mMicrosoftEnrollmentId = microsoftEnrollmentId;\n     }\n+\n+    public String getDeviceCode() {", "originalCommit": "4e6e357ce089b4a7ab47ff001c882a68827bb565", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU2NDE4Ng==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462564186", "bodyText": "or get prepared for type annotations and place it on the String type declaration.", "author": "AdamBJohnsonx", "createdAt": "2020-07-29T20:20:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4MDcyNA=="}], "type": "inlineReview", "revised_code": {"commit": "22d538aeb40834f79e9be318b187e52d5e1afae1", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/providers/microsoft/MicrosoftTokenRequest.java b/common/src/main/java/com/microsoft/identity/common/internal/providers/microsoft/MicrosoftTokenRequest.java\nindex d5bc3a630..2bea43aa1 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/providers/microsoft/MicrosoftTokenRequest.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/providers/microsoft/MicrosoftTokenRequest.java\n\n@@ -186,11 +188,12 @@ public class MicrosoftTokenRequest extends TokenRequest {\n         this.mMicrosoftEnrollmentId = microsoftEnrollmentId;\n     }\n \n+    @Nullable\n     public String getDeviceCode() {\n         return mDeviceCode;\n     }\n \n-    public void setDeviceCode(String deviceCode) {\n+    public void setDeviceCode(final String deviceCode) {\n         this.mDeviceCode = deviceCode;\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4MjA2NQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462482065", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public AuthorizationResult getDeviceCode(MicrosoftStsAuthorizationRequest authorizationRequest, @Nullable String authorityUrl) throws IOException {\n          \n          \n            \n                public AuthorizationResult getDeviceCode(@NonNull final MicrosoftStsAuthorizationRequest authorizationRequest, @Nullable final String authorityUrl) throws IOException {", "author": "iambmelt", "createdAt": "2020-07-29T17:54:27Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java", "diffHunk": "@@ -230,6 +245,101 @@ protected final void setAuthorizationEndpoint(final String authorizationEndpoint\n         mAuthorizationEndpoint = authorizationEndpoint;\n     }\n \n+    public AuthorizationResult getDeviceCode(MicrosoftStsAuthorizationRequest authorizationRequest, @Nullable String authorityUrl) throws IOException {", "originalCommit": "4e6e357ce089b4a7ab47ff001c882a68827bb565", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5379463012bc628f8858bb7ad8547cd0edae95d1", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java b/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java\nindex c1ae34b49..59a0d2bf8 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java\n\n@@ -245,7 +245,7 @@ public abstract class OAuth2Strategy\n         mAuthorizationEndpoint = authorizationEndpoint;\n     }\n \n-    public AuthorizationResult getDeviceCode(MicrosoftStsAuthorizationRequest authorizationRequest, @Nullable String authorityUrl) throws IOException {\n+    public AuthorizationResult getDeviceCode(@NonNull final MicrosoftStsAuthorizationRequest authorizationRequest, @Nullable final String authorityUrl) throws IOException {\n         final String methodName = \":getDeviceCode\";\n \n         // Set up connection\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4NTk2MA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462485960", "bodyText": "Networking code shouldn't be at this level of abstraction; instead delegate to existing implementation in HttpRequest.java", "author": "iambmelt", "createdAt": "2020-07-29T18:00:50Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java", "diffHunk": "@@ -230,6 +245,101 @@ protected final void setAuthorizationEndpoint(final String authorizationEndpoint\n         mAuthorizationEndpoint = authorizationEndpoint;\n     }\n \n+    public AuthorizationResult getDeviceCode(MicrosoftStsAuthorizationRequest authorizationRequest, @Nullable String authorityUrl) throws IOException {\n+        final String methodName = \":getDeviceCode\";\n+\n+        // Set up connection\n+        String urlBody;\n+\n+        if (authorityUrl == null) {\n+            // Fetch the tenant from the authority\n+            String tenant = authorizationRequest.getAuthority().getPath().split(\"/\")[1];\n+\n+            // Set up Device Code Flow authorization url\n+            urlBody = \"https://login.microsoftonline.com/\" + tenant + \"/oauth2/v2.0/devicecode\";\n+        }\n+        else {\n+            urlBody = authorityUrl;\n+        }\n+\n+        URL url = new URL(urlBody);\n+\n+        final HttpURLConnection con = (HttpsURLConnection) url.openConnection();", "originalCommit": "4e6e357ce089b4a7ab47ff001c882a68827bb565", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxODYwNg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462518606", "bodyText": "Will convert to use HttpRequest", "author": "t-fadura", "createdAt": "2020-07-29T18:57:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4NTk2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU2MzY2Ng==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462563666", "bodyText": "Will convert to use HttpRequest\n\nBetter, make an HttpClient from the same package and use it.  We can replace your member field with an injection point in the future.", "author": "AdamBJohnsonx", "createdAt": "2020-07-29T20:19:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4NTk2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4MzQ1OQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462583459", "bodyText": "@AdamBJohnsonx I've already pushed a version using HttpRequest. I can go back and update it to use HttpClient once a few of my other tasks are complete.", "author": "t-fadura", "createdAt": "2020-07-29T20:56:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4NTk2MA=="}], "type": "inlineReview", "revised_code": {"commit": "5379463012bc628f8858bb7ad8547cd0edae95d1", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java b/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java\nindex c1ae34b49..59a0d2bf8 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java\n\n@@ -245,7 +245,7 @@ public abstract class OAuth2Strategy\n         mAuthorizationEndpoint = authorizationEndpoint;\n     }\n \n-    public AuthorizationResult getDeviceCode(MicrosoftStsAuthorizationRequest authorizationRequest, @Nullable String authorityUrl) throws IOException {\n+    public AuthorizationResult getDeviceCode(@NonNull final MicrosoftStsAuthorizationRequest authorizationRequest, @Nullable final String authorityUrl) throws IOException {\n         final String methodName = \":getDeviceCode\";\n \n         // Set up connection\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4NjQyOQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462486429", "bodyText": "This is Microsoft specific, this should move down the object inheritance hierarchy and into MicrosoftStsOAuth2Strategy", "author": "iambmelt", "createdAt": "2020-07-29T18:01:41Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java", "diffHunk": "@@ -230,6 +245,101 @@ protected final void setAuthorizationEndpoint(final String authorizationEndpoint\n         mAuthorizationEndpoint = authorizationEndpoint;\n     }\n \n+    public AuthorizationResult getDeviceCode(MicrosoftStsAuthorizationRequest authorizationRequest, @Nullable String authorityUrl) throws IOException {\n+        final String methodName = \":getDeviceCode\";\n+\n+        // Set up connection\n+        String urlBody;\n+\n+        if (authorityUrl == null) {\n+            // Fetch the tenant from the authority\n+            String tenant = authorizationRequest.getAuthority().getPath().split(\"/\")[1];\n+\n+            // Set up Device Code Flow authorization url\n+            urlBody = \"https://login.microsoftonline.com/\" + tenant + \"/oauth2/v2.0/devicecode\";", "originalCommit": "4e6e357ce089b4a7ab47ff001c882a68827bb565", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ5MjgxOQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462492819", "bodyText": "This URL should be sourced from the MicrosoftStsOAuth2Configuration -- something like getDeviceAuthorizationEndpoint()", "author": "iambmelt", "createdAt": "2020-07-29T18:12:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4NjQyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ5OTcxMg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462499712", "bodyText": "I would expect that the URL for this endpoint should be available at:\nhttps://login.microsoftonline.com/common/.well-known/openid-configuration\nvia device_authorization_endpoint but it's not....\nWe should reach out to server team to determine why this is missing; I can help facilitate that communication\n/cc @shoatman", "author": "iambmelt", "createdAt": "2020-07-29T18:24:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4NjQyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwOTUyOA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462509528", "bodyText": "Here is the relevant OID docs:\nhttps://tools.ietf.org/id/draft-ietf-oauth-device-flow-08.html#Discovery", "author": "iambmelt", "createdAt": "2020-07-29T18:41:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4NjQyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMwNDk2MA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r463304960", "bodyText": "Heard back from the service team, this should be available around the first week of September. For now, we will hardcode and make the necessary change to resolve this value dynamically later", "author": "iambmelt", "createdAt": "2020-07-30T22:24:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4NjQyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMwODAyOQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r463308029", "bodyText": "Created a tracking work item here:\nhttps://identitydivision.visualstudio.com/Engineering/_workitems/edit/1096018", "author": "iambmelt", "createdAt": "2020-07-30T22:31:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4NjQyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNjQzMQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r465406431", "bodyText": "@t-fadura please extract this function to MicrosoftStsOAuth2Configuration. No need to fetch the endpoint from .well-known/openid-configuration yet.", "author": "rpdome", "createdAt": "2020-08-05T00:41:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4NjQyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "5379463012bc628f8858bb7ad8547cd0edae95d1", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java b/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java\nindex c1ae34b49..59a0d2bf8 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java\n\n@@ -245,7 +245,7 @@ public abstract class OAuth2Strategy\n         mAuthorizationEndpoint = authorizationEndpoint;\n     }\n \n-    public AuthorizationResult getDeviceCode(MicrosoftStsAuthorizationRequest authorizationRequest, @Nullable String authorityUrl) throws IOException {\n+    public AuthorizationResult getDeviceCode(@NonNull final MicrosoftStsAuthorizationRequest authorizationRequest, @Nullable final String authorityUrl) throws IOException {\n         final String methodName = \":getDeviceCode\";\n \n         // Set up connection\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwMTAxMA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462501010", "bodyText": "We need to pull this logic into the MicrosoftStsOAuth2Configuration -- I don't think we want to extract the tenant info like this from the URL, but instead we should inspect the PublicClientApplicationConfiguration to get the audience/tenant.\nHazard from parsing it from the URL is that this basically assumes the URL structure will never change. For AAD today, that's a safe assumption -- if we add support for direct-ADFS auth later though, this will break", "author": "iambmelt", "createdAt": "2020-07-29T18:26:49Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java", "diffHunk": "@@ -230,6 +245,101 @@ protected final void setAuthorizationEndpoint(final String authorizationEndpoint\n         mAuthorizationEndpoint = authorizationEndpoint;\n     }\n \n+    public AuthorizationResult getDeviceCode(MicrosoftStsAuthorizationRequest authorizationRequest, @Nullable String authorityUrl) throws IOException {\n+        final String methodName = \":getDeviceCode\";\n+\n+        // Set up connection\n+        String urlBody;\n+\n+        if (authorityUrl == null) {\n+            // Fetch the tenant from the authority\n+            String tenant = authorizationRequest.getAuthority().getPath().split(\"/\")[1];", "originalCommit": "4e6e357ce089b4a7ab47ff001c882a68827bb565", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxNzYwMg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462517602", "bodyText": "Parsing is definitely not ideal. I wanted to get a working PR out, I couldn't find the tenant as it's own field in the request's authority. Hopefully this will be fixed with the inclusion of getDeviceAuthorizationEndpoint() in MicrosoftStsOAuth2Configuration.", "author": "t-fadura", "createdAt": "2020-07-29T18:56:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwMTAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUyMTY5MA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462521690", "bodyText": "On a side note, we should be able to just append /oauth2/v2.0/devicecode to the authority URL (getAuthority() inside MicrosoftStsOAuth2Configuration - see getTokenEndpoint() and getEndpointUrlFromRootAndSuffix() for more info)\n(eventually, if the server teams agreed to add the endpoint to well known config, then we would have the exact same logic as getTokenEndpoint() - use that first, then use hardcoded string as a fallback.)", "author": "rpdome", "createdAt": "2020-07-29T19:03:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwMTAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUzMzE2Ng==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462533166", "bodyText": "the Authority is the same in the authorizationRequest and the mConfig. The issue is that path (which contains tenant) ends with /common, so it's structured like /{tenant}/common. For DCF, I need to remove the /common at the end of it before adding /oauth2/v2.0/devicecode or else the request will return 404 \"not found\".", "author": "t-fadura", "createdAt": "2020-07-29T19:23:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwMTAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUzMzYzNQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462533635", "bodyText": "Same thing occurs in the token polling request, but I can just change mTokenEndpoint there and the whole process is a lot less messy.", "author": "t-fadura", "createdAt": "2020-07-29T19:24:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwMTAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUzNTMwNQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462535305", "bodyText": "Would you mind sharing your config file? I'd expect either /{tenantID} or /common, /organization, etc.", "author": "rpdome", "createdAt": "2020-07-29T19:27:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwMTAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUzNzU4Mw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462537583", "bodyText": "Git doesn't like Json files? Here's a screenshot:", "author": "t-fadura", "createdAt": "2020-07-29T19:31:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwMTAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUzODA5OA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462538098", "bodyText": "At some point, /common is being added to the tenant in authority_url", "author": "t-fadura", "createdAt": "2020-07-29T19:32:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwMTAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU5NjE1OQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462596159", "bodyText": "That sounds like a bug to me.... we should mark it as a bug.\nWould you still get the same value in MicrosoftStsOAuth2Configuration.getAuthority()?", "author": "rpdome", "createdAt": "2020-07-29T21:20:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwMTAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU5ODAwMA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462598000", "bodyText": "iirc that value would be the tenant and /common at the end of it", "author": "t-fadura", "createdAt": "2020-07-29T21:24:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwMTAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU5ODU2OA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462598568", "bodyText": "i'm assuming you're referring to the mConfig object in OAuth2Strategy?", "author": "t-fadura", "createdAt": "2020-07-29T21:25:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwMTAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYxOTI5OQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462619299", "bodyText": "Yes, but I'm referring to the class itself. @iambmelt's original suggestion is to put this url logic in that class and get the endpoint from there.", "author": "rpdome", "createdAt": "2020-07-29T22:10:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwMTAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNDc2Mw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r465404763", "bodyText": "@t-fadura AFAIK, DCF is only supported for AAD and not B2C. So you should be able to get the tenantId as follows:\n((AzureActiveDirectoryAuthority) mConfig.getDefaultAuthority()).getAudience().getTenantId();", "author": "shahzaibj", "createdAt": "2020-08-05T00:34:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwMTAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkzMTAyOQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r465931029", "bodyText": "I have an AzureActiveDirectoryAuthority object in LocalMsalController being passed through command parameters. mTenantId in it is \"common\", where as mCloudUrl in it is \"https://login.microsoftonline.com/{MyTenant}\". Maybe this is the base issue?\n@rpdome @shahzaibj", "author": "t-fadura", "createdAt": "2020-08-05T18:46:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwMTAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk2NDAzMQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r465964031", "bodyText": "@rpdome @shahzaib I found one issue, my methods were missing this line\nAuthority.KnownAuthorityResult authorityResult = Authority.getKnownAuthorityResult(parametersWithScopes.getAuthority());\nThis line would implicitly call performCloudDiscovery() in AzureActiveDirectory, which plays a big part in how the authorities are structured since mAzureActiveDirectoryCloud is no longer null in AzureActiveDirectoryAuthority. (Sorry for the confusing explanation)\nCurrently tying to figure out why \"common\" is in the mTenantId field. Once this is fixed there shouldn't been any need to mess with the token endpoint", "author": "t-fadura", "createdAt": "2020-08-05T19:49:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwMTAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAwNTM4Nw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r466005387", "bodyText": "Authority issue fixed, I was not passing the correct authority object to the command parameters object. Resolving after fix is commited.", "author": "t-fadura", "createdAt": "2020-08-05T21:09:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwMTAxMA=="}], "type": "inlineReview", "revised_code": {"commit": "5379463012bc628f8858bb7ad8547cd0edae95d1", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java b/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java\nindex c1ae34b49..59a0d2bf8 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java\n\n@@ -245,7 +245,7 @@ public abstract class OAuth2Strategy\n         mAuthorizationEndpoint = authorizationEndpoint;\n     }\n \n-    public AuthorizationResult getDeviceCode(MicrosoftStsAuthorizationRequest authorizationRequest, @Nullable String authorityUrl) throws IOException {\n+    public AuthorizationResult getDeviceCode(@NonNull final MicrosoftStsAuthorizationRequest authorizationRequest, @Nullable final String authorityUrl) throws IOException {\n         final String methodName = \":getDeviceCode\";\n \n         // Set up connection\n"}}, {"oid": "5379463012bc628f8858bb7ad8547cd0edae95d1", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/5379463012bc628f8858bb7ad8547cd0edae95d1", "message": "Update getDeviceCode() signature\n\nCo-authored-by: Brian Melton-Grace <brianmel@microsoft.com>", "committedDate": "2020-07-29T18:44:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUyNDQxMQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462524411", "bodyText": "Any ideas where code would be found?", "author": "t-fadura", "createdAt": "2020-07-29T19:08:04Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java", "diffHunk": "@@ -230,6 +245,101 @@ protected final void setAuthorizationEndpoint(final String authorizationEndpoint\n         mAuthorizationEndpoint = authorizationEndpoint;\n     }\n \n+    public AuthorizationResult getDeviceCode(MicrosoftStsAuthorizationRequest authorizationRequest, @Nullable String authorityUrl) throws IOException {\n+        final String methodName = \":getDeviceCode\";\n+\n+        // Set up connection\n+        String urlBody;\n+\n+        if (authorityUrl == null) {\n+            // Fetch the tenant from the authority\n+            String tenant = authorizationRequest.getAuthority().getPath().split(\"/\")[1];\n+\n+            // Set up Device Code Flow authorization url\n+            urlBody = \"https://login.microsoftonline.com/\" + tenant + \"/oauth2/v2.0/devicecode\";\n+        }\n+        else {\n+            urlBody = authorityUrl;\n+        }\n+\n+        URL url = new URL(urlBody);\n+\n+        final HttpURLConnection con = (HttpsURLConnection) url.openConnection();\n+        con.setRequestMethod(\"POST\");\n+        con.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n+        con.setConnectTimeout(5000);\n+        con.setReadTimeout(5000);\n+\n+        // Set up request body\n+        con.setDoOutput(true);\n+        final DataOutputStream out = new DataOutputStream(con.getOutputStream());\n+        StringBuilder encodedResult = new StringBuilder();\n+\n+        // Encode client_id\n+        encodedResult.append(URLEncoder.encode(\"client_id\", \"UTF-8\"));\n+        encodedResult.append(\"=\");\n+        encodedResult.append(URLEncoder.encode(authorizationRequest.getClientId(), \"UTF-8\"));\n+        encodedResult.append(\"&\");\n+\n+        // Encode scope\n+        encodedResult.append(URLEncoder.encode(\"scope\", \"UTF-8\"));\n+        encodedResult.append(\"=\");\n+        encodedResult.append(URLEncoder.encode(authorizationRequest.getScope(), \"UTF-8\"));\n+\n+        // Attach request body\n+        final String convertedParams = encodedResult.toString();\n+        out.writeBytes(convertedParams);\n+        out.flush();\n+        out.close();\n+\n+        // Send request and create the authorization result\n+        // MicrosoftSTAuthorizationResultFactory not used since no Intent is being created\n+        final int authorizationCode = con.getResponseCode();\n+        final BufferedReader streamReader;\n+        final AuthorizationResult authorizationResult;\n+\n+        // Check if the request was successful\n+        // Any code below 300 (HTTP_MULT_CHOICE) is considered a success\n+        if (authorizationCode < HttpsURLConnection.HTTP_MULT_CHOICE){\n+            // Get and parse response body\n+            streamReader = new BufferedReader(new InputStreamReader(con.getInputStream()));\n+            final String responseBody = streamReader.readLine();\n+            final HashMap<String, String> parsedResponseBody = new Gson().fromJson(responseBody, new TypeToken<HashMap<String, String>>() {}.getType());\n+\n+            // Create response and result objects\n+            // Not sure where \"code\" is stored. Not found in the input stream...\n+            final MicrosoftStsAuthorizationResponse authorizationResponse =\n+                    new MicrosoftStsAuthorizationResponse(null, authorizationRequest.getState(), parsedResponseBody);", "originalCommit": "4e6e357ce089b4a7ab47ff001c882a68827bb565", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI5MTY5Nw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r463291697", "bodyText": "This looks to be referring to the auth_code normally returned by the Authorization Code Flow. I think you can leave null if this is unused in your scenario and if the field is allowed to be nullable", "author": "iambmelt", "createdAt": "2020-07-30T21:50:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUyNDQxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0ODA5Nw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r463348097", "bodyText": "It's nullable, but the JavaDoc for the field states that it's required. This may just be a remnant of the old code back when only auth_code was supported.", "author": "t-fadura", "createdAt": "2020-07-31T00:49:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUyNDQxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzczNDA2Ng==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r463734066", "bodyText": "Since you won't have this value, I'll suggest we add a new constructor to use for DCF flows. If that ends up messy (or complicates the code), feel free to update the docs and pass null", "author": "iambmelt", "createdAt": "2020-07-31T17:20:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUyNDQxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "22d538aeb40834f79e9be318b187e52d5e1afae1", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java b/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java\nindex c1ae34b49..f4d5c6f2d 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java\n\n@@ -245,7 +247,7 @@ public abstract class OAuth2Strategy\n         mAuthorizationEndpoint = authorizationEndpoint;\n     }\n \n-    public AuthorizationResult getDeviceCode(MicrosoftStsAuthorizationRequest authorizationRequest, @Nullable String authorityUrl) throws IOException {\n+    public AuthorizationResult getDeviceCode(@NonNull final MicrosoftStsAuthorizationRequest authorizationRequest, @Nullable final String authorityUrl) throws IOException {\n         final String methodName = \":getDeviceCode\";\n \n         // Set up connection\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwNTI4Nw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462505287", "bodyText": "nit: final", "author": "rpdome", "createdAt": "2020-07-29T18:34:14Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/DeviceCodeFlowCommand.java", "diffHunk": "@@ -73,7 +80,14 @@ public AcquireTokenResult execute() throws Exception {\n         );\n \n         // Call acquireDeviceCodeFlowToken to get token result (Part 2 of DCF)\n-        return controller.acquireDeviceCodeFlowToken(authorizationResult, commandParameters);\n+        AcquireTokenResult tokenResult = controller.acquireDeviceCodeFlowToken(authorizationResult, commandParameters);", "originalCommit": "4e6e357ce089b4a7ab47ff001c882a68827bb565", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0cb330e9585063a02e79ba3083abaa683d90acb5", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/commands/DeviceCodeFlowCommand.java b/common/src/main/java/com/microsoft/identity/common/internal/commands/DeviceCodeFlowCommand.java\nindex 0301a6f16..d25e36d6f 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/commands/DeviceCodeFlowCommand.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/commands/DeviceCodeFlowCommand.java\n\n@@ -80,7 +80,7 @@ public class DeviceCodeFlowCommand extends TokenCommand {\n         );\n \n         // Call acquireDeviceCodeFlowToken to get token result (Part 2 of DCF)\n-        AcquireTokenResult tokenResult = controller.acquireDeviceCodeFlowToken(authorizationResult, commandParameters);\n+        final AcquireTokenResult tokenResult = controller.acquireDeviceCodeFlowToken(authorizationResult, commandParameters);\n \n         Logger.verbose(\n                 TAG + methodName,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUyNTA0Mw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462525043", "bodyText": "utilize serializeObjectToFormUrlEncoded()", "author": "rpdome", "createdAt": "2020-07-29T19:09:13Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java", "diffHunk": "@@ -230,6 +245,101 @@ protected final void setAuthorizationEndpoint(final String authorizationEndpoint\n         mAuthorizationEndpoint = authorizationEndpoint;\n     }\n \n+    public AuthorizationResult getDeviceCode(MicrosoftStsAuthorizationRequest authorizationRequest, @Nullable String authorityUrl) throws IOException {\n+        final String methodName = \":getDeviceCode\";\n+\n+        // Set up connection\n+        String urlBody;\n+\n+        if (authorityUrl == null) {\n+            // Fetch the tenant from the authority\n+            String tenant = authorizationRequest.getAuthority().getPath().split(\"/\")[1];\n+\n+            // Set up Device Code Flow authorization url\n+            urlBody = \"https://login.microsoftonline.com/\" + tenant + \"/oauth2/v2.0/devicecode\";\n+        }\n+        else {\n+            urlBody = authorityUrl;\n+        }\n+\n+        URL url = new URL(urlBody);\n+\n+        final HttpURLConnection con = (HttpsURLConnection) url.openConnection();\n+        con.setRequestMethod(\"POST\");\n+        con.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n+        con.setConnectTimeout(5000);\n+        con.setReadTimeout(5000);\n+\n+        // Set up request body\n+        con.setDoOutput(true);\n+        final DataOutputStream out = new DataOutputStream(con.getOutputStream());\n+        StringBuilder encodedResult = new StringBuilder();\n+\n+        // Encode client_id\n+        encodedResult.append(URLEncoder.encode(\"client_id\", \"UTF-8\"));", "originalCommit": "4e6e357ce089b4a7ab47ff001c882a68827bb565", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "22d538aeb40834f79e9be318b187e52d5e1afae1", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java b/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java\nindex c1ae34b49..f4d5c6f2d 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java\n\n@@ -245,7 +247,7 @@ public abstract class OAuth2Strategy\n         mAuthorizationEndpoint = authorizationEndpoint;\n     }\n \n-    public AuthorizationResult getDeviceCode(MicrosoftStsAuthorizationRequest authorizationRequest, @Nullable String authorityUrl) throws IOException {\n+    public AuthorizationResult getDeviceCode(@NonNull final MicrosoftStsAuthorizationRequest authorizationRequest, @Nullable final String authorityUrl) throws IOException {\n         final String methodName = \":getDeviceCode\";\n \n         // Set up connection\n"}}, {"oid": "22d538aeb40834f79e9be318b187e52d5e1afae1", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/22d538aeb40834f79e9be318b187e52d5e1afae1", "message": "getDeviceCode now using HttpRequest", "committedDate": "2020-07-29T20:54:24Z", "type": "commit"}, {"oid": "2c0803e29a9d68094dc85b291b3fc07741b9d5c9", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/2c0803e29a9d68094dc85b291b3fc07741b9d5c9", "message": "Merge branch 'dev' into t-fadura/dcf-main", "committedDate": "2020-07-29T21:50:26Z", "type": "commit"}, {"oid": "0cb330e9585063a02e79ba3083abaa683d90acb5", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/0cb330e9585063a02e79ba3083abaa683d90acb5", "message": "Fixed some suggestions", "committedDate": "2020-07-29T22:07:03Z", "type": "commit"}, {"oid": "0ac355b940583e01f48e0e41021edb3ab09b6736", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/0ac355b940583e01f48e0e41021edb3ab09b6736", "message": "Merge branch 'dev' into t-fadura/dcf-main", "committedDate": "2020-07-30T01:09:58Z", "type": "commit"}, {"oid": "5555450bf9f9b312e98dc00b643e1c6849e90837", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/5555450bf9f9b312e98dc00b643e1c6849e90837", "message": "removed some imports", "committedDate": "2020-07-30T18:38:05Z", "type": "commit"}, {"oid": "63a64548c68430f0188f4e20a7934d0700b766e3", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/63a64548c68430f0188f4e20a7934d0700b766e3", "message": "Merge branch 't-fadura/dcf-main' of https://github.com/AzureAD/microsoft-authentication-library-common-for-android into t-fadura/dcf-main", "committedDate": "2020-07-30T18:38:25Z", "type": "commit"}, {"oid": "e54a00acc1d09152d5cd7d8f1af8b3576f3bfbc0", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/e54a00acc1d09152d5cd7d8f1af8b3576f3bfbc0", "message": "Added authorityUri parameter to getDeviceCode()", "committedDate": "2020-07-30T21:29:48Z", "type": "commit"}, {"oid": "1ec55495065bdd517d8bf30171067026fee9214a", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/1ec55495065bdd517d8bf30171067026fee9214a", "message": "removed unneeded import", "committedDate": "2020-07-30T21:31:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMwNDM2Mw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r463304363", "bodyText": "These constants look to be out of range for the DCF IDS (600-699)\nFor this, we'll need to update the value to be in this range, and update the spec to account for which value that you use:\n\nSpec -- Msft corpnet reqd", "author": "iambmelt", "createdAt": "2020-07-30T22:22:44Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/telemetry/TelemetryEventStrings.java", "diffHunk": "@@ -192,6 +192,8 @@\n         public static final String LOCAL_ACQUIRE_TOKEN_SILENT= \"103\";\n         public static final String LOCAL_GET_ACCOUNTS= \"106\";\n         public static final String LOCAL_REMOVE_ACCOUNT= \"107\";\n+        public static final String LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE = \"108\";", "originalCommit": "1ec55495065bdd517d8bf30171067026fee9214a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0NTg3MA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r463345870", "bodyText": "I think that excel sheet might only apply to the codes in PublicApiId? I think so, because the codes that are already in TelemetryEventStrings don't seem to match up with what's in the excel sheet.", "author": "t-fadura", "createdAt": "2020-07-31T00:40:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMwNDM2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzcyNTA2OA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r463725068", "bodyText": "You are right; I am confused by who/what is consuming these values. Let's get some input from @shahzaibj (and maybe @sangonzal or @logdog16 if they know who or what is supposed to consume these values: these numbers don't match what's documented in the API ID Excel Sheet)", "author": "iambmelt", "createdAt": "2020-07-31T17:00:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMwNDM2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzcyNzAyNw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r463727027", "bodyText": "These constants were added as part of this PR:\n#519\nHaven't located a spec capturing the numbers (yet)", "author": "iambmelt", "createdAt": "2020-07-31T17:05:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMwNDM2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzcyODIyOQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r463728229", "bodyText": "Gotcha, let me know if I need to make any changes", "author": "t-fadura", "createdAt": "2020-07-31T17:07:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMwNDM2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzczMjgyMA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r463732820", "bodyText": "Let's get input from @shahzaibj on Monday; I can't locate a spec that captures what these values are or should be", "author": "iambmelt", "createdAt": "2020-07-31T17:17:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMwNDM2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYzMjQ3OA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r464632478", "bodyText": "@iambmelt Thanks for catching this. The values declared in the excel sheet you shared are the Api Ids for the Public APIs in MSAL. These are declared in PublicApiId.java in our code base,\nHowever, the values declared in this file i.e TelemetryEventStrings.java actually seem to capture an API ID for the internal controller methods in MSAL/common/broker. So there is an API Id for the acquireTokenSilent method in LocalMsalController vs one for the similar method in BrokerMsalController -- so these are different from the Public Api.\nWith that said, even I'm not aware if there was ever a spec for these and/or if these were documented anywhere. Perhaps since these are internal, we could use anything for them? TBH, I'm not so sure. I'll see if I can track down any document that captures these, but for the time being @t-fadura let's make sure that the values we put here are different from the ones we put in PublicApiId.java as these fundamentally represent a different thing. I'm not too worried about the actual values you put here, let's just put anything but just make sure it is not same as public api id.", "author": "shahzaibj", "createdAt": "2020-08-03T20:01:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMwNDM2Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0NDMyNQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r463344325", "bodyText": "Is LOCAL_COMPLETE_ACQUIRE_TOKEN_INTERACTIVE supposed to be \"102\"?", "author": "t-fadura", "createdAt": "2020-07-31T00:34:36Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/telemetry/TelemetryEventStrings.java", "diffHunk": "@@ -192,6 +192,8 @@\n         public static final String LOCAL_ACQUIRE_TOKEN_SILENT= \"103\";", "originalCommit": "1ec55495065bdd517d8bf30171067026fee9214a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzczMzAyNg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r463733026", "bodyText": "Let's hold for @shahzaibj -- can't locate this information", "author": "iambmelt", "createdAt": "2020-07-31T17:18:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzM0NDMyNQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "a34e8fb54a7bcc569d18deb3600ccf589a53b2b8", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/a34e8fb54a7bcc569d18deb3600ccf589a53b2b8", "message": "Merge branch 'dev' of https://github.com/AzureAD/microsoft-authentication-library-common-for-android into t-fadura/dcf-main", "committedDate": "2020-07-31T16:25:31Z", "type": "commit"}, {"oid": "825222e0dabec8b0737919610b923e02bd5f5d0a", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/825222e0dabec8b0737919610b923e02bd5f5d0a", "message": "Added DCF code to newly migrated LocalMSALController", "committedDate": "2020-07-31T16:45:45Z", "type": "commit"}, {"oid": "e2334eb55fa3522948c8f0f18cbf2457d03832ef", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/e2334eb55fa3522948c8f0f18cbf2457d03832ef", "message": "new error string", "committedDate": "2020-07-31T18:44:47Z", "type": "commit"}, {"oid": "560e21a0faeace773d32ac3233293c36502c87ca", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/560e21a0faeace773d32ac3233293c36502c87ca", "message": "added another DCF error code", "committedDate": "2020-08-01T04:40:31Z", "type": "commit"}, {"oid": "3be54e0852ed411bf457ec2b2b7fe545dc489417", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/3be54e0852ed411bf457ec2b2b7fe545dc489417", "message": "Merge branch 'dev' into t-fadura/dcf-main", "committedDate": "2020-08-04T15:56:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwMDM1MA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r465400350", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public final static String DEVICE_CODE_FLOW_AUTHORIZATION_PENDING_CODE = \"authorization_pending\";\n          \n          \n            \n                public final static String DEVICE_CODE_FLOW_AUTHORIZATION_PENDING_ERROR_CODE = \"authorization_pending\";", "author": "shahzaibj", "createdAt": "2020-08-05T00:18:32Z", "path": "common/src/main/java/com/microsoft/identity/common/exception/ErrorStrings.java", "diffHunk": "@@ -408,6 +408,12 @@ private ErrorStrings() {\n                     \"Please make sure to use your organizational account. \" +\n                     \"If that doesn\u2019t help, please return the device to your administrator.\";\n \n+    /**\n+     * Device Code Flow only.\n+     * Authorization has not been completed yet.\n+     */\n+    public final static String DEVICE_CODE_FLOW_AUTHORIZATION_PENDING_CODE = \"authorization_pending\";", "originalCommit": "3be54e0852ed411bf457ec2b2b7fe545dc489417", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwMDk1NA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r465400954", "bodyText": "Looks like we've followed the pattern ....ERROR_CODE and ....ERROR_MESSAGE but I don't see that being used in these new constants. Let's try to be consistent.", "author": "shahzaibj", "createdAt": "2020-08-05T00:20:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwMDM1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxMjI4MA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r465412280", "bodyText": "Will do!", "author": "t-fadura", "createdAt": "2020-08-05T01:03:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwMDM1MA=="}], "type": "inlineReview", "revised_code": {"commit": "ae18f0d35cce749bcec2b8a76457aa9b08b4717c", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/exception/ErrorStrings.java b/common/src/main/java/com/microsoft/identity/common/exception/ErrorStrings.java\nindex 3fd028ebc..2289c73a8 100644\n--- a/common/src/main/java/com/microsoft/identity/common/exception/ErrorStrings.java\n+++ b/common/src/main/java/com/microsoft/identity/common/exception/ErrorStrings.java\n\n@@ -412,41 +412,41 @@ public final class ErrorStrings {\n      * Device Code Flow only.\n      * Authorization has not been completed yet.\n      */\n-    public final static String DEVICE_CODE_FLOW_AUTHORIZATION_PENDING_CODE = \"authorization_pending\";\n+    public final static String DEVICE_CODE_FLOW_AUTHORIZATION_PENDING_ERROR_CODE = \"authorization_pending\";\n \n     /**\n      * Device Code Flow only.\n      * Authorization was declined by the user during Device Code Flow.\n      */\n-    public final static String DEVICE_CODE_FLOW_AUTHORIZATION_DECLINED_CODE = \"authorization_declined\";\n-    public final static String DEVICE_CODE_FLOW_AUTHORIZATION_DECLINED_MESSAGE = \"The end user has denied the authorization request. Re-run the Device Code Flow Protocol with another user.\";\n+    public final static String DEVICE_CODE_FLOW_AUTHORIZATION_DECLINED_ERROR_CODE = \"authorization_declined\";\n+    public final static String DEVICE_CODE_FLOW_AUTHORIZATION_DECLINED_ERROR_MESSAGE = \"The end user has denied the authorization request. Re-run the Device Code Flow Protocol with another user.\";\n \n     /**\n      * Device Code Flow only.\n      * The token expired before the user authenticated with the user code.\n      */\n-    public final static String DEVICE_CODE_FLOW_EXPIRED_TOKEN_CODE = \"expired_token\";\n-    public final static String DEVICE_CODE_FLOW_EXPIRED_TOKEN_MESSAGE = \"The token has expired, therefore authentication is no longer possible with this flow attempt. Re-run the Device Code Flow Protocol to try again.\";\n+    public final static String DEVICE_CODE_FLOW_EXPIRED_TOKEN_ERROR_CODE = \"expired_token\";\n+    public final static String DEVICE_CODE_FLOW_EXPIRED_TOKEN_ERROR_MESSAGE = \"The token has expired, therefore authentication is no longer possible with this flow attempt. Re-run the Device Code Flow Protocol to try again.\";\n \n     /**\n      * Device Vode Flow only.\n      * The token request sent a device code that was not recognized.\n      */\n-    public final static String DEVICE_CODE_FLOW_BAD_VERIFICATION_CODE = \"bad_verification_code\";\n-    public final static String DEVICE_CODE_FLOW_BAD_VERIFICATION_MESSAGE = \"The token request contains a device code that was not recognized. Verify that the client is sending the right device code.\";\n+    public final static String DEVICE_CODE_FLOW_BAD_VERIFICATION_ERROR_CODE = \"bad_verification_code\";\n+    public final static String DEVICE_CODE_FLOW_BAD_VERIFICATION_ERROR_MESSAGE = \"The token request contains a device code that was not recognized. Verify that the client is sending the right device code.\";\n \n     /**\n      * Device Code Flow only.\n      * The token was polled again after it was already received.\n      * Use error code in AuthenticationConstants.OAuth2ErrorCode\n      */\n-    public final static String DEVICE_CODE_FLOW_INVALID_GRANT_MESSAGE = \"The token for this device code has already been redeemed. To receive another access token, please re-run the Device Code Flow protocol.\";\n+    public final static String DEVICE_CODE_FLOW_INVALID_GRANT_ERROR_MESSAGE = \"The token for this device code has already been redeemed. To receive another access token, please re-run the Device Code Flow protocol.\";\n \n     /**\n      * Device Code Flow only.\n      * The scope attached to the request was not valid, either formatted wrong or some scopes did not exist.\n      */\n-    public final static String DEVICE_CODE_FLOW_INVALID_SCOPE_MESSAGE = \"The scope attached to the device code flow request is invalid. Please re-try with a valid scope.\";\n+    public final static String DEVICE_CODE_FLOW_INVALID_SCOPE_ERROR_MESSAGE = \"The scope attached to the device code flow request is invalid. Please re-try with a valid scope.\";\n \n     /**\n      * Device Code Flow only.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwMTY5MA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r465401690", "bodyText": "with token\n\nAre we certain about this?", "author": "shahzaibj", "createdAt": "2020-08-05T00:23:32Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/commands/DeviceCodeFlowCommand.java", "diffHunk": "@@ -72,7 +80,14 @@ public AcquireTokenResult execute() throws Exception {\n         );\n \n         // Call acquireDeviceCodeFlowToken to get token result (Part 2 of DCF)\n-        return controller.acquireDeviceCodeFlowToken(authorizationResult, commandParameters);\n+        final AcquireTokenResult tokenResult = controller.acquireDeviceCodeFlowToken(authorizationResult, commandParameters);\n+\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow command exiting with token...\"", "originalCommit": "3be54e0852ed411bf457ec2b2b7fe545dc489417", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxMjcwMQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r465412701", "bodyText": "I think this is a safe assumption. If the token request had failed, a service exception would've been thrown and this log wouldn't have been created.", "author": "t-fadura", "createdAt": "2020-08-05T01:04:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwMTY5MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNzQ0MA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r465407440", "bodyText": "Why was common the audience to begin with?", "author": "shahzaibj", "createdAt": "2020-08-05T00:45:23Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/microsoft/microsoftsts/MicrosoftStsOAuth2Strategy.java", "diffHunk": "@@ -343,9 +343,23 @@ public MicrosoftStsTokenRequest createTokenRequest(@NonNull final MicrosoftStsAu\n         tokenRequest.setClientId(request.getClientId());\n         tokenRequest.setScope(request.getTokenScope());\n         tokenRequest.setClaims(request.getClaims());\n-        tokenRequest.setGrantType(TokenRequest.GrantTypes.AUTHORIZATION_CODE);\n         setTokenRequestCorrelationId(tokenRequest);\n \n+        // Existence of a device code inside of the response object implies Device Code Flow is being used\n+        if (response.getDeviceCode() != null) {\n+            tokenRequest.setGrantType(TokenRequest.GrantTypes.DEVICE_CODE);\n+            tokenRequest.setDeviceCode(response.getDeviceCode());\n+\n+            // mTenantId from mAudience (being \"common\") is being added to the path in AzureActiveDirectoryAuthority", "originalCommit": "3be54e0852ed411bf457ec2b2b7fe545dc489417", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAxMzc1NQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r466013755", "bodyText": "The default authority in PCA defaults to having common as the tenant, I had to create a custom authority.", "author": "t-fadura", "createdAt": "2020-08-05T21:26:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNzQ0MA=="}], "type": "inlineReview", "revised_code": {"commit": "b27c7b68d8ea3c3e408da7dd9733120abb621a4d", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/providers/microsoft/microsoftsts/MicrosoftStsOAuth2Strategy.java b/common/src/main/java/com/microsoft/identity/common/internal/providers/microsoft/microsoftsts/MicrosoftStsOAuth2Strategy.java\nindex e644223fa..f114cd8f6 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/providers/microsoft/microsoftsts/MicrosoftStsOAuth2Strategy.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/providers/microsoft/microsoftsts/MicrosoftStsOAuth2Strategy.java\n\n@@ -349,12 +347,6 @@ public class MicrosoftStsOAuth2Strategy\n         if (response.getDeviceCode() != null) {\n             tokenRequest.setGrantType(TokenRequest.GrantTypes.DEVICE_CODE);\n             tokenRequest.setDeviceCode(response.getDeviceCode());\n-\n-            // mTenantId from mAudience (being \"common\") is being added to the path in AzureActiveDirectoryAuthority\n-            // Needed to omit \"\\common\" from the endpoint so as to not break DCF\n-            // mTokenEndPoint be automatically reset in future commands\n-            String newTokenEndpoint = this.mTokenEndpoint.replace(\"/common/\", \"/\");\n-            setTokenEndpoint(newTokenEndpoint);\n         }\n         else { // If device code doesn't exist, continue with auth_code configuration\n             tokenRequest.setGrantType(TokenRequest.GrantTypes.AUTHORIZATION_CODE);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNzYzMQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r465407631", "bodyText": "We shouldn't be doing this hack -- we need to find the exact issue here", "author": "shahzaibj", "createdAt": "2020-08-05T00:46:15Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/microsoft/microsoftsts/MicrosoftStsOAuth2Strategy.java", "diffHunk": "@@ -343,9 +343,23 @@ public MicrosoftStsTokenRequest createTokenRequest(@NonNull final MicrosoftStsAu\n         tokenRequest.setClientId(request.getClientId());\n         tokenRequest.setScope(request.getTokenScope());\n         tokenRequest.setClaims(request.getClaims());\n-        tokenRequest.setGrantType(TokenRequest.GrantTypes.AUTHORIZATION_CODE);\n         setTokenRequestCorrelationId(tokenRequest);\n \n+        // Existence of a device code inside of the response object implies Device Code Flow is being used\n+        if (response.getDeviceCode() != null) {\n+            tokenRequest.setGrantType(TokenRequest.GrantTypes.DEVICE_CODE);\n+            tokenRequest.setDeviceCode(response.getDeviceCode());\n+\n+            // mTenantId from mAudience (being \"common\") is being added to the path in AzureActiveDirectoryAuthority\n+            // Needed to omit \"\\common\" from the endpoint so as to not break DCF\n+            // mTokenEndPoint be automatically reset in future commands\n+            String newTokenEndpoint = this.mTokenEndpoint.replace(\"/common/\", \"/\");", "originalCommit": "3be54e0852ed411bf457ec2b2b7fe545dc489417", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAxMzUyMA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r466013520", "bodyText": "Fixed", "author": "t-fadura", "createdAt": "2020-08-05T21:25:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNzYzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "b27c7b68d8ea3c3e408da7dd9733120abb621a4d", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/providers/microsoft/microsoftsts/MicrosoftStsOAuth2Strategy.java b/common/src/main/java/com/microsoft/identity/common/internal/providers/microsoft/microsoftsts/MicrosoftStsOAuth2Strategy.java\nindex e644223fa..f114cd8f6 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/providers/microsoft/microsoftsts/MicrosoftStsOAuth2Strategy.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/providers/microsoft/microsoftsts/MicrosoftStsOAuth2Strategy.java\n\n@@ -349,12 +347,6 @@ public class MicrosoftStsOAuth2Strategy\n         if (response.getDeviceCode() != null) {\n             tokenRequest.setGrantType(TokenRequest.GrantTypes.DEVICE_CODE);\n             tokenRequest.setDeviceCode(response.getDeviceCode());\n-\n-            // mTenantId from mAudience (being \"common\") is being added to the path in AzureActiveDirectoryAuthority\n-            // Needed to omit \"\\common\" from the endpoint so as to not break DCF\n-            // mTokenEndPoint be automatically reset in future commands\n-            String newTokenEndpoint = this.mTokenEndpoint.replace(\"/common/\", \"/\");\n-            setTokenEndpoint(newTokenEndpoint);\n         }\n         else { // If device code doesn't exist, continue with auth_code configuration\n             tokenRequest.setGrantType(TokenRequest.GrantTypes.AUTHORIZATION_CODE);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwODQ2NA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r465408464", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected static final String DEVICE_CODE_CONTENT_TYPE = \"application/x-www-form-urlencoded\";\n          \n          \n            \n                protected static final String DEVICE_CODE_CONTENT_TYPE = TOKEN_REQUEST_CONTENT_TYPE;", "author": "shahzaibj", "createdAt": "2020-08-05T00:49:33Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java", "diffHunk": "@@ -77,6 +87,7 @@\n     private static final String TAG = OAuth2Strategy.class.getSimpleName();\n \n     protected static final String TOKEN_REQUEST_CONTENT_TYPE = \"application/x-www-form-urlencoded\";\n+    protected static final String DEVICE_CODE_CONTENT_TYPE = \"application/x-www-form-urlencoded\";", "originalCommit": "3be54e0852ed411bf457ec2b2b7fe545dc489417", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f1c76c205e1a5529db2bc03c86a88243f5e13c2a", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java b/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java\nindex bdf85ad55..ff33a9339 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java\n\n@@ -87,7 +87,7 @@ public abstract class OAuth2Strategy\n     private static final String TAG = OAuth2Strategy.class.getSimpleName();\n \n     protected static final String TOKEN_REQUEST_CONTENT_TYPE = \"application/x-www-form-urlencoded\";\n-    protected static final String DEVICE_CODE_CONTENT_TYPE = \"application/x-www-form-urlencoded\";\n+    protected static final String DEVICE_CODE_CONTENT_TYPE = TOKEN_REQUEST_CONTENT_TYPE;\n \n     protected final GenericOAuth2Configuration mConfig;\n     protected final GenericOAuth2StrategyParameters mStrategyParameters;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwMjI0Nw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r465402247", "bodyText": "very minor nit: We might not need a separate function here.", "author": "rpdome", "createdAt": "2020-08-05T00:25:24Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -459,14 +466,227 @@ public boolean removeCurrentAccount(RemoveAccountCommandParameters parameters) t\n     }\n \n     @Override\n-    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws ServiceException, ClientException, IOException {\n+        // Logging start of method\n+        final String methodName = \":deviceCodeFlowAuthRequest\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Authorizing user code...\"\n+        );\n+\n+        // Default scopes here\n+        final Set<String> mergedScopes = addDefaultScopes(parameters);\n+\n+        final DeviceCodeFlowCommandParameters parametersWithScopes = parameters\n+                .toBuilder()\n+                .scopes(mergedScopes)\n+                .build();\n+\n+        logParameters(TAG, parametersWithScopes);\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putProperties(parametersWithScopes)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parametersWithScopes.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parametersWithScopes\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 1: Get user code\n+        // Populate global authorization request\n+        mAuthorizationRequest = getAuthorizationRequest(oAuth2Strategy, parametersWithScopes);\n+\n+        final String authorityUri = ((AzureActiveDirectoryAuthority) parametersWithScopes.getAuthority()).getAudience().getCloudUrl();\n+\n+        // Call method defined in oAuth2Strategy to request authorization\n+        final AuthorizationResult authorizationResult = oAuth2Strategy.getDeviceCode((MicrosoftStsAuthorizationRequest) mAuthorizationRequest, authorityUri);\n+\n+        validateServiceResult(authorizationResult);\n+\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow authorization step finished...\"\n+        );\n+        logResult(TAG, authorizationResult);\n+\n+        // End telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiEndEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        return authorizationResult;\n     }\n \n     @Override\n-    public AcquireTokenResult acquireDeviceCodeFlowToken(final AuthorizationResult authorizationResult, DeviceCodeFlowCommandParameters commandParameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AcquireTokenResult acquireDeviceCodeFlowToken(\n+            final AuthorizationResult authorizationResult,\n+            final DeviceCodeFlowCommandParameters parameters)\n+            throws ServiceException, ClientException, IOException {\n+\n+        // Logging start of method\n+        final String methodName = \":acquireDeviceCodeFlowToken\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Polling for token...\"\n+        );\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_POLLING\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_POLLING)\n+        );\n+\n+        // Create empty AcquireTokenResult object\n+        final AcquireTokenResult acquireTokenResult = new AcquireTokenResult();\n+\n+        // Assign authorization result\n+        acquireTokenResult.setAuthorizationResult(authorizationResult);\n+\n+        // Fetch the Authorization Response\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parameters.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parameters\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 2: Poll for token\n+        TokenResult tokenResult = null;\n+\n+        // Create token request outside of loop so it isn't re-created after every loop\n+        final MicrosoftStsTokenRequest tokenRequest = (MicrosoftStsTokenRequest) oAuth2Strategy.createTokenRequest(\n+                mAuthorizationRequest,\n+                authorizationResponse,\n+                parameters.getAuthenticationScheme()\n+        );\n+\n+        // Fetch wait interval\n+        final int interval = Integer.parseInt(authorizationResponse.getInterval()) * 1000;\n+\n+        String errorCode = ErrorStrings.DEVICE_CODE_FLOW_AUTHORIZATION_PENDING_CODE;\n+\n+        // Loop to send multiple requests checking for token\n+        while (authorizationPending(errorCode)) {", "originalCommit": "3be54e0852ed411bf457ec2b2b7fe545dc489417", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxOTYxMw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r465419613", "bodyText": "@shahzaibj suggested this for better readability", "author": "t-fadura", "createdAt": "2020-08-05T01:30:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwMjI0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "ae18f0d35cce749bcec2b8a76457aa9b08b4717c", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java b/common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java\nindex 6726cc338..806b48757 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java\n\n@@ -574,10 +574,15 @@ public class LocalMSALController extends BaseController {\n         // Fetch wait interval\n         final int interval = Integer.parseInt(authorizationResponse.getInterval()) * 1000;\n \n-        String errorCode = ErrorStrings.DEVICE_CODE_FLOW_AUTHORIZATION_PENDING_CODE;\n+        String errorCode = ErrorStrings.DEVICE_CODE_FLOW_AUTHORIZATION_PENDING_ERROR_CODE;\n \n         // Loop to send multiple requests checking for token\n         while (authorizationPending(errorCode)) {\n+\n+            // Wait between polls\n+            ThreadUtils.sleepSafely(interval, TAG,\n+                    \"Attempting to sleep thread during Device Code Flow token polling...\");\n+\n             errorCode = \"\"; // Reset error code\n \n             // Execute Token Request\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwMjc5Mw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r465402793", "bodyText": "nit: We probably can just put this on top of the while loop. I'm not expecting the first request to be done within [interval] seconds.", "author": "rpdome", "createdAt": "2020-08-05T00:27:25Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -459,14 +466,227 @@ public boolean removeCurrentAccount(RemoveAccountCommandParameters parameters) t\n     }\n \n     @Override\n-    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws ServiceException, ClientException, IOException {\n+        // Logging start of method\n+        final String methodName = \":deviceCodeFlowAuthRequest\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Authorizing user code...\"\n+        );\n+\n+        // Default scopes here\n+        final Set<String> mergedScopes = addDefaultScopes(parameters);\n+\n+        final DeviceCodeFlowCommandParameters parametersWithScopes = parameters\n+                .toBuilder()\n+                .scopes(mergedScopes)\n+                .build();\n+\n+        logParameters(TAG, parametersWithScopes);\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putProperties(parametersWithScopes)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parametersWithScopes.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parametersWithScopes\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 1: Get user code\n+        // Populate global authorization request\n+        mAuthorizationRequest = getAuthorizationRequest(oAuth2Strategy, parametersWithScopes);\n+\n+        final String authorityUri = ((AzureActiveDirectoryAuthority) parametersWithScopes.getAuthority()).getAudience().getCloudUrl();\n+\n+        // Call method defined in oAuth2Strategy to request authorization\n+        final AuthorizationResult authorizationResult = oAuth2Strategy.getDeviceCode((MicrosoftStsAuthorizationRequest) mAuthorizationRequest, authorityUri);\n+\n+        validateServiceResult(authorizationResult);\n+\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow authorization step finished...\"\n+        );\n+        logResult(TAG, authorizationResult);\n+\n+        // End telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiEndEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        return authorizationResult;\n     }\n \n     @Override\n-    public AcquireTokenResult acquireDeviceCodeFlowToken(final AuthorizationResult authorizationResult, DeviceCodeFlowCommandParameters commandParameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AcquireTokenResult acquireDeviceCodeFlowToken(\n+            final AuthorizationResult authorizationResult,\n+            final DeviceCodeFlowCommandParameters parameters)\n+            throws ServiceException, ClientException, IOException {\n+\n+        // Logging start of method\n+        final String methodName = \":acquireDeviceCodeFlowToken\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Polling for token...\"\n+        );\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_POLLING\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_POLLING)\n+        );\n+\n+        // Create empty AcquireTokenResult object\n+        final AcquireTokenResult acquireTokenResult = new AcquireTokenResult();\n+\n+        // Assign authorization result\n+        acquireTokenResult.setAuthorizationResult(authorizationResult);\n+\n+        // Fetch the Authorization Response\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parameters.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parameters\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 2: Poll for token\n+        TokenResult tokenResult = null;\n+\n+        // Create token request outside of loop so it isn't re-created after every loop\n+        final MicrosoftStsTokenRequest tokenRequest = (MicrosoftStsTokenRequest) oAuth2Strategy.createTokenRequest(\n+                mAuthorizationRequest,\n+                authorizationResponse,\n+                parameters.getAuthenticationScheme()\n+        );\n+\n+        // Fetch wait interval\n+        final int interval = Integer.parseInt(authorizationResponse.getInterval()) * 1000;\n+\n+        String errorCode = ErrorStrings.DEVICE_CODE_FLOW_AUTHORIZATION_PENDING_CODE;\n+\n+        // Loop to send multiple requests checking for token\n+        while (authorizationPending(errorCode)) {\n+            errorCode = \"\"; // Reset error code\n+\n+            // Execute Token Request\n+            tokenResult = oAuth2Strategy.requestToken(tokenRequest);\n+\n+            // Fetch error if the request failed\n+            if (tokenResult.getErrorResponse() != null) {\n+                errorCode = tokenResult.getErrorResponse().getError();\n+            }\n+\n+            // Check if authorization is pending\n+            if (authorizationPending(errorCode)) {\n+                // Wait between polls\n+                ThreadUtils.sleepSafely(interval, TAG,", "originalCommit": "3be54e0852ed411bf457ec2b2b7fe545dc489417", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyODExMA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r465428110", "bodyText": "good idea", "author": "t-fadura", "createdAt": "2020-08-05T02:01:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwMjc5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "ae18f0d35cce749bcec2b8a76457aa9b08b4717c", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java b/common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java\nindex 6726cc338..806b48757 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java\n\n@@ -574,10 +574,15 @@ public class LocalMSALController extends BaseController {\n         // Fetch wait interval\n         final int interval = Integer.parseInt(authorizationResponse.getInterval()) * 1000;\n \n-        String errorCode = ErrorStrings.DEVICE_CODE_FLOW_AUTHORIZATION_PENDING_CODE;\n+        String errorCode = ErrorStrings.DEVICE_CODE_FLOW_AUTHORIZATION_PENDING_ERROR_CODE;\n \n         // Loop to send multiple requests checking for token\n         while (authorizationPending(errorCode)) {\n+\n+            // Wait between polls\n+            ThreadUtils.sleepSafely(interval, TAG,\n+                    \"Attempting to sleep thread during Device Code Flow token polling...\");\n+\n             errorCode = \"\"; // Reset error code\n \n             // Execute Token Request\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwMzU4MA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r465403580", "bodyText": "Should this be above acquireTokenResult.setTokenResult()?", "author": "rpdome", "createdAt": "2020-08-05T00:30:09Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -459,14 +466,227 @@ public boolean removeCurrentAccount(RemoveAccountCommandParameters parameters) t\n     }\n \n     @Override\n-    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws ServiceException, ClientException, IOException {\n+        // Logging start of method\n+        final String methodName = \":deviceCodeFlowAuthRequest\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Authorizing user code...\"\n+        );\n+\n+        // Default scopes here\n+        final Set<String> mergedScopes = addDefaultScopes(parameters);\n+\n+        final DeviceCodeFlowCommandParameters parametersWithScopes = parameters\n+                .toBuilder()\n+                .scopes(mergedScopes)\n+                .build();\n+\n+        logParameters(TAG, parametersWithScopes);\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putProperties(parametersWithScopes)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parametersWithScopes.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parametersWithScopes\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 1: Get user code\n+        // Populate global authorization request\n+        mAuthorizationRequest = getAuthorizationRequest(oAuth2Strategy, parametersWithScopes);\n+\n+        final String authorityUri = ((AzureActiveDirectoryAuthority) parametersWithScopes.getAuthority()).getAudience().getCloudUrl();\n+\n+        // Call method defined in oAuth2Strategy to request authorization\n+        final AuthorizationResult authorizationResult = oAuth2Strategy.getDeviceCode((MicrosoftStsAuthorizationRequest) mAuthorizationRequest, authorityUri);\n+\n+        validateServiceResult(authorizationResult);\n+\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow authorization step finished...\"\n+        );\n+        logResult(TAG, authorizationResult);\n+\n+        // End telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiEndEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        return authorizationResult;\n     }\n \n     @Override\n-    public AcquireTokenResult acquireDeviceCodeFlowToken(final AuthorizationResult authorizationResult, DeviceCodeFlowCommandParameters commandParameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AcquireTokenResult acquireDeviceCodeFlowToken(\n+            final AuthorizationResult authorizationResult,\n+            final DeviceCodeFlowCommandParameters parameters)\n+            throws ServiceException, ClientException, IOException {\n+\n+        // Logging start of method\n+        final String methodName = \":acquireDeviceCodeFlowToken\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Polling for token...\"\n+        );\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_POLLING\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_POLLING)\n+        );\n+\n+        // Create empty AcquireTokenResult object\n+        final AcquireTokenResult acquireTokenResult = new AcquireTokenResult();\n+\n+        // Assign authorization result\n+        acquireTokenResult.setAuthorizationResult(authorizationResult);\n+\n+        // Fetch the Authorization Response\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parameters.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parameters\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 2: Poll for token\n+        TokenResult tokenResult = null;\n+\n+        // Create token request outside of loop so it isn't re-created after every loop\n+        final MicrosoftStsTokenRequest tokenRequest = (MicrosoftStsTokenRequest) oAuth2Strategy.createTokenRequest(\n+                mAuthorizationRequest,\n+                authorizationResponse,\n+                parameters.getAuthenticationScheme()\n+        );\n+\n+        // Fetch wait interval\n+        final int interval = Integer.parseInt(authorizationResponse.getInterval()) * 1000;\n+\n+        String errorCode = ErrorStrings.DEVICE_CODE_FLOW_AUTHORIZATION_PENDING_CODE;\n+\n+        // Loop to send multiple requests checking for token\n+        while (authorizationPending(errorCode)) {\n+            errorCode = \"\"; // Reset error code\n+\n+            // Execute Token Request\n+            tokenResult = oAuth2Strategy.requestToken(tokenRequest);\n+\n+            // Fetch error if the request failed\n+            if (tokenResult.getErrorResponse() != null) {\n+                errorCode = tokenResult.getErrorResponse().getError();\n+            }\n+\n+            // Check if authorization is pending\n+            if (authorizationPending(errorCode)) {\n+                // Wait between polls\n+                ThreadUtils.sleepSafely(interval, TAG,\n+                        \"Attempting to sleep thread during Device Code Flow token polling...\");\n+            }\n+        }\n+\n+        // Assign token result\n+        acquireTokenResult.setTokenResult(tokenResult);\n+\n+        // Validate request success, may throw MsalServiceException\n+        validateServiceResult(tokenResult);", "originalCommit": "3be54e0852ed411bf457ec2b2b7fe545dc489417", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxODkxMg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r465418912", "bodyText": "Yes, good point", "author": "t-fadura", "createdAt": "2020-08-05T01:27:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwMzU4MA=="}], "type": "inlineReview", "revised_code": {"commit": "ae18f0d35cce749bcec2b8a76457aa9b08b4717c", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java b/common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java\nindex 6726cc338..806b48757 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java\n\n@@ -574,10 +574,15 @@ public class LocalMSALController extends BaseController {\n         // Fetch wait interval\n         final int interval = Integer.parseInt(authorizationResponse.getInterval()) * 1000;\n \n-        String errorCode = ErrorStrings.DEVICE_CODE_FLOW_AUTHORIZATION_PENDING_CODE;\n+        String errorCode = ErrorStrings.DEVICE_CODE_FLOW_AUTHORIZATION_PENDING_ERROR_CODE;\n \n         // Loop to send multiple requests checking for token\n         while (authorizationPending(errorCode)) {\n+\n+            // Wait between polls\n+            ThreadUtils.sleepSafely(interval, TAG,\n+                    \"Attempting to sleep thread during Device Code Flow token polling...\");\n+\n             errorCode = \"\"; // Reset error code\n \n             // Execute Token Request\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNTUwOQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r465405509", "bodyText": "We shouldn't try to fix the issue here. I think there's a bug in AzureActiveDirectoryAuthority. If a TenantID is provided, it should not be appended with /common.\nDevice code flow also supports /common. How would this work if you use /common in authority.", "author": "rpdome", "createdAt": "2020-08-05T00:37:49Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/microsoft/microsoftsts/MicrosoftStsOAuth2Strategy.java", "diffHunk": "@@ -343,9 +343,23 @@ public MicrosoftStsTokenRequest createTokenRequest(@NonNull final MicrosoftStsAu\n         tokenRequest.setClientId(request.getClientId());\n         tokenRequest.setScope(request.getTokenScope());\n         tokenRequest.setClaims(request.getClaims());\n-        tokenRequest.setGrantType(TokenRequest.GrantTypes.AUTHORIZATION_CODE);\n         setTokenRequestCorrelationId(tokenRequest);\n \n+        // Existence of a device code inside of the response object implies Device Code Flow is being used\n+        if (response.getDeviceCode() != null) {\n+            tokenRequest.setGrantType(TokenRequest.GrantTypes.DEVICE_CODE);\n+            tokenRequest.setDeviceCode(response.getDeviceCode());\n+\n+            // mTenantId from mAudience (being \"common\") is being added to the path in AzureActiveDirectoryAuthority\n+            // Needed to omit \"\\common\" from the endpoint so as to not break DCF\n+            // mTokenEndPoint be automatically reset in future commands\n+            String newTokenEndpoint = this.mTokenEndpoint.replace(\"/common/\", \"/\");", "originalCommit": "3be54e0852ed411bf457ec2b2b7fe545dc489417", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxODc0MQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r465418741", "bodyText": "I get a 404 error, also happens with the authorization step if /common is placedafter the tenant", "author": "t-fadura", "createdAt": "2020-08-05T01:27:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNTUwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQyMTQ5OQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r465421499", "bodyText": "Device Code Flow supports /common though.\nhttps://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-device-code\nParameter | Condition | Description\ntenant | Required | Can be /common, /consumers, or /organizations. It can also be the directory tenant that you want to request permission from in GUID or friendly name format.\nMaybe this is something we can cover with test cases?", "author": "rpdome", "createdAt": "2020-08-05T01:37:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNTUwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg2NDQyOQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r465864429", "bodyText": "Tested in authorization step, supplying \"common\" in place of the tenant ID return \"invalid_request\". Even if it worked, wouldn't we run into the same issue where we would have to parse out the tenant id in order to just get /common in the endpoint?", "author": "t-fadura", "createdAt": "2020-08-05T16:48:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNTUwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg4MDg5NQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r465880895", "bodyText": "Tested in authorization step, supplying \"common\" in place of the tenant ID return \"invalid_request\".\n\n\nWhat is the exact error message that you're getting? Does it have something to do with single tenant/multiple tenant applications? /common is not supported if your device is marked as a single tenant application.\n\n\n Even if it worked, wouldn't we run into the same issue where we would have to parse out the tenant id in order to just get /common in the endpoint?\n\n\nThis is what I've been saying that this is a bug. It doesn't make sense to be to have /common append after tenantID in the first place - more so if it's /common after /common - and we should be fixing the problem at the root cause (why /common was appended, and if it's justified.)", "author": "rpdome", "createdAt": "2020-08-05T17:15:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNTUwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAxMzM2Mw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r466013363", "bodyText": "Authority issue has been fixed. The error was essentially saying that there was no tenant information included.", "author": "t-fadura", "createdAt": "2020-08-05T21:25:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwNTUwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "b27c7b68d8ea3c3e408da7dd9733120abb621a4d", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/providers/microsoft/microsoftsts/MicrosoftStsOAuth2Strategy.java b/common/src/main/java/com/microsoft/identity/common/internal/providers/microsoft/microsoftsts/MicrosoftStsOAuth2Strategy.java\nindex e644223fa..f114cd8f6 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/providers/microsoft/microsoftsts/MicrosoftStsOAuth2Strategy.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/providers/microsoft/microsoftsts/MicrosoftStsOAuth2Strategy.java\n\n@@ -349,12 +347,6 @@ public class MicrosoftStsOAuth2Strategy\n         if (response.getDeviceCode() != null) {\n             tokenRequest.setGrantType(TokenRequest.GrantTypes.DEVICE_CODE);\n             tokenRequest.setDeviceCode(response.getDeviceCode());\n-\n-            // mTenantId from mAudience (being \"common\") is being added to the path in AzureActiveDirectoryAuthority\n-            // Needed to omit \"\\common\" from the endpoint so as to not break DCF\n-            // mTokenEndPoint be automatically reset in future commands\n-            String newTokenEndpoint = this.mTokenEndpoint.replace(\"/common/\", \"/\");\n-            setTokenEndpoint(newTokenEndpoint);\n         }\n         else { // If device code doesn't exist, continue with auth_code configuration\n             tokenRequest.setGrantType(TokenRequest.GrantTypes.AUTHORIZATION_CODE);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQxMTcyNQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r465411725", "bodyText": "nit: new line for comment.", "author": "rpdome", "createdAt": "2020-08-05T01:01:11Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java", "diffHunk": "@@ -230,6 +241,80 @@ protected final void setAuthorizationEndpoint(final String authorizationEndpoint\n         mAuthorizationEndpoint = authorizationEndpoint;\n     }\n \n+    public AuthorizationResult getDeviceCode(@NonNull final MicrosoftStsAuthorizationRequest authorizationRequest, @Nullable final String authorityUri) throws IOException {\n+        final String methodName = \":getDeviceCode\";\n+\n+        // Set up connection\n+        String urlBody;\n+\n+        if (authorityUri != null) {\n+            urlBody = authorityUri + \"/oauth2/v2.0/devicecode\";\n+        }\n+        else {\n+            // Fetch the tenant from the authority\n+            String tenant = authorizationRequest.getAuthority().getPath().split(\"/\")[1];\n+\n+            // Set up Device Code Flow authorization url\n+            urlBody = \"https://login.microsoftonline.com/\" + tenant + \"/oauth2/v2.0/devicecode\";\n+        }\n+\n+        // Set up headers and request body\n+        final String requestBody = ObjectMapper.serializeObjectToFormUrlEncoded(authorizationRequest);\n+        final Map<String, String> headers = new TreeMap<>();\n+        headers.put(CLIENT_REQUEST_ID, DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID));\n+        headers.putAll(EstsTelemetry.getInstance().getTelemetryHeaders());\n+\n+        // Send request\n+        final HttpResponse response = HttpRequest.sendPost(\n+                new URL(urlBody),\n+                headers,\n+                requestBody.getBytes(ObjectMapper.ENCODING_SCHEME),\n+                DEVICE_CODE_CONTENT_TYPE\n+        );\n+\n+        // Create the authorization result\n+        // MicrosoftSTAuthorizationResultFactory not used since no Intent is being created\n+        AuthorizationResult authorizationResult;\n+\n+        // Check if the request was successful\n+        // Any code below 300 (HTTP_MULT_CHOICE) is considered a success\n+        if (response.getStatusCode() < HttpsURLConnection.HTTP_MULT_CHOICE){\n+            // Get and parse response body\n+            final HashMap<String, String> parsedResponseBody = new Gson().fromJson(response.getBody(), new TypeToken<HashMap<String, String>>() {}.getType());\n+\n+            // Create response and result objects\n+            // Not sure where \"code\" is stored. Not found in the input stream...\n+            final MicrosoftStsAuthorizationResponse authorizationResponse =\n+                    new MicrosoftStsAuthorizationResponse(null, authorizationRequest.getState(), parsedResponseBody);\n+            authorizationResult = new MicrosoftStsAuthorizationResult(AuthorizationStatus.SUCCESS, authorizationResponse);\n+\n+            Logger.verbose(\n+                    TAG + methodName,\n+                    \"Device Code Flow authorization successful...\"\n+            );\n+        }\n+        else { // Request failed", "originalCommit": "3be54e0852ed411bf457ec2b2b7fe545dc489417", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ae18f0d35cce749bcec2b8a76457aa9b08b4717c", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java b/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java\nindex bdf85ad55..b9e67ce36 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java\n\n@@ -241,23 +240,9 @@ public abstract class OAuth2Strategy\n         mAuthorizationEndpoint = authorizationEndpoint;\n     }\n \n-    public AuthorizationResult getDeviceCode(@NonNull final MicrosoftStsAuthorizationRequest authorizationRequest, @Nullable final String authorityUri) throws IOException {\n+    public AuthorizationResult getDeviceCode(@NonNull final MicrosoftStsAuthorizationRequest authorizationRequest, @NonNull final String authorityUri) throws IOException {\n         final String methodName = \":getDeviceCode\";\n \n-        // Set up connection\n-        String urlBody;\n-\n-        if (authorityUri != null) {\n-            urlBody = authorityUri + \"/oauth2/v2.0/devicecode\";\n-        }\n-        else {\n-            // Fetch the tenant from the authority\n-            String tenant = authorizationRequest.getAuthority().getPath().split(\"/\")[1];\n-\n-            // Set up Device Code Flow authorization url\n-            urlBody = \"https://login.microsoftonline.com/\" + tenant + \"/oauth2/v2.0/devicecode\";\n-        }\n-\n         // Set up headers and request body\n         final String requestBody = ObjectMapper.serializeObjectToFormUrlEncoded(authorizationRequest);\n         final Map<String, String> headers = new TreeMap<>();\n"}}, {"oid": "f1c76c205e1a5529db2bc03c86a88243f5e13c2a", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/f1c76c205e1a5529db2bc03c86a88243f5e13c2a", "message": "DEVICE_CODE_CONTENT_TYPE change\n\nCo-authored-by: Shahzaib <37125644+shahzaibj@users.noreply.github.com>", "committedDate": "2020-08-05T01:11:31Z", "type": "commit"}, {"oid": "ae18f0d35cce749bcec2b8a76457aa9b08b4717c", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/ae18f0d35cce749bcec2b8a76457aa9b08b4717c", "message": "Updated errors, some suggestions", "committedDate": "2020-08-05T02:14:19Z", "type": "commit"}, {"oid": "fd4a14ef8f8087cface7e88de6ccd7b21356ec29", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/fd4a14ef8f8087cface7e88de6ccd7b21356ec29", "message": "Merge branch 't-fadura/dcf-main' of https://github.com/AzureAD/microsoft-authentication-library-common-for-android into t-fadura/dcf-main", "committedDate": "2020-08-05T02:14:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU2NzU0NA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462567544", "bodyText": "since we don't have try-with-resources (unless you want to take an android studio upgrade), you'll want to try { } finally { out.close() }. Similar changes should happen for your stream readers.  Let us not leave anything open by accident.", "author": "AdamBJohnsonx", "createdAt": "2020-07-29T20:26:45Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java", "diffHunk": "@@ -230,6 +245,101 @@ protected final void setAuthorizationEndpoint(final String authorizationEndpoint\n         mAuthorizationEndpoint = authorizationEndpoint;\n     }\n \n+    public AuthorizationResult getDeviceCode(@NonNull final MicrosoftStsAuthorizationRequest authorizationRequest, @Nullable final String authorityUrl) throws IOException {\n+        final String methodName = \":getDeviceCode\";\n+\n+        // Set up connection\n+        String urlBody;\n+\n+        if (authorityUrl == null) {\n+            // Fetch the tenant from the authority\n+            String tenant = authorizationRequest.getAuthority().getPath().split(\"/\")[1];\n+\n+            // Set up Device Code Flow authorization url\n+            urlBody = \"https://login.microsoftonline.com/\" + tenant + \"/oauth2/v2.0/devicecode\";\n+        }\n+        else {\n+            urlBody = authorityUrl;\n+        }\n+\n+        URL url = new URL(urlBody);\n+\n+        final HttpURLConnection con = (HttpsURLConnection) url.openConnection();\n+        con.setRequestMethod(\"POST\");\n+        con.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n+        con.setConnectTimeout(5000);\n+        con.setReadTimeout(5000);\n+\n+        // Set up request body\n+        con.setDoOutput(true);\n+        final DataOutputStream out = new DataOutputStream(con.getOutputStream());", "originalCommit": "5379463012bc628f8858bb7ad8547cd0edae95d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAxMzA0OA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r466013048", "bodyText": "Luckily this ended up being code I didn't use \ud83d\ude04", "author": "t-fadura", "createdAt": "2020-08-05T21:24:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU2NzU0NA=="}], "type": "inlineReview", "revised_code": {"commit": "22d538aeb40834f79e9be318b187e52d5e1afae1", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java b/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java\nindex 59a0d2bf8..f4d5c6f2d 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java\n\n@@ -262,49 +264,29 @@ public abstract class OAuth2Strategy\n             urlBody = authorityUrl;\n         }\n \n-        URL url = new URL(urlBody);\n-\n-        final HttpURLConnection con = (HttpsURLConnection) url.openConnection();\n-        con.setRequestMethod(\"POST\");\n-        con.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n-        con.setConnectTimeout(5000);\n-        con.setReadTimeout(5000);\n-\n-        // Set up request body\n-        con.setDoOutput(true);\n-        final DataOutputStream out = new DataOutputStream(con.getOutputStream());\n-        StringBuilder encodedResult = new StringBuilder();\n-\n-        // Encode client_id\n-        encodedResult.append(URLEncoder.encode(\"client_id\", \"UTF-8\"));\n-        encodedResult.append(\"=\");\n-        encodedResult.append(URLEncoder.encode(authorizationRequest.getClientId(), \"UTF-8\"));\n-        encodedResult.append(\"&\");\n-\n-        // Encode scope\n-        encodedResult.append(URLEncoder.encode(\"scope\", \"UTF-8\"));\n-        encodedResult.append(\"=\");\n-        encodedResult.append(URLEncoder.encode(authorizationRequest.getScope(), \"UTF-8\"));\n-\n-        // Attach request body\n-        final String convertedParams = encodedResult.toString();\n-        out.writeBytes(convertedParams);\n-        out.flush();\n-        out.close();\n-\n-        // Send request and create the authorization result\n+        // Set up headers and request body\n+        final String requestBody = ObjectMapper.serializeObjectToFormUrlEncoded(authorizationRequest);\n+        final Map<String, String> headers = new TreeMap<>();\n+        headers.put(CLIENT_REQUEST_ID, DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID));\n+        headers.putAll(EstsTelemetry.getInstance().getTelemetryHeaders());\n+\n+        // Send request\n+        final HttpResponse response = HttpRequest.sendPost(\n+                new URL(urlBody),\n+                headers,\n+                requestBody.getBytes(ObjectMapper.ENCODING_SCHEME),\n+                DEVICE_CODE_CONTENT_TYPE\n+        );\n+\n+        // Create the authorization result\n         // MicrosoftSTAuthorizationResultFactory not used since no Intent is being created\n-        final int authorizationCode = con.getResponseCode();\n-        final BufferedReader streamReader;\n-        final AuthorizationResult authorizationResult;\n+        AuthorizationResult authorizationResult;\n \n         // Check if the request was successful\n         // Any code below 300 (HTTP_MULT_CHOICE) is considered a success\n-        if (authorizationCode < HttpsURLConnection.HTTP_MULT_CHOICE){\n+        if (response.getStatusCode() < HttpsURLConnection.HTTP_MULT_CHOICE){\n             // Get and parse response body\n-            streamReader = new BufferedReader(new InputStreamReader(con.getInputStream()));\n-            final String responseBody = streamReader.readLine();\n-            final HashMap<String, String> parsedResponseBody = new Gson().fromJson(responseBody, new TypeToken<HashMap<String, String>>() {}.getType());\n+            final HashMap<String, String> parsedResponseBody = new Gson().fromJson(response.getBody(), new TypeToken<HashMap<String, String>>() {}.getType());\n \n             // Create response and result objects\n             // Not sure where \"code\" is stored. Not found in the input stream...\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU2NzkxNQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462567915", "bodyText": "Is there a benefit to reusing this reference?", "author": "AdamBJohnsonx", "createdAt": "2020-07-29T20:27:27Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java", "diffHunk": "@@ -230,6 +245,101 @@ protected final void setAuthorizationEndpoint(final String authorizationEndpoint\n         mAuthorizationEndpoint = authorizationEndpoint;\n     }\n \n+    public AuthorizationResult getDeviceCode(@NonNull final MicrosoftStsAuthorizationRequest authorizationRequest, @Nullable final String authorityUrl) throws IOException {\n+        final String methodName = \":getDeviceCode\";\n+\n+        // Set up connection\n+        String urlBody;\n+\n+        if (authorityUrl == null) {\n+            // Fetch the tenant from the authority\n+            String tenant = authorizationRequest.getAuthority().getPath().split(\"/\")[1];\n+\n+            // Set up Device Code Flow authorization url\n+            urlBody = \"https://login.microsoftonline.com/\" + tenant + \"/oauth2/v2.0/devicecode\";\n+        }\n+        else {\n+            urlBody = authorityUrl;\n+        }\n+\n+        URL url = new URL(urlBody);\n+\n+        final HttpURLConnection con = (HttpsURLConnection) url.openConnection();\n+        con.setRequestMethod(\"POST\");\n+        con.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n+        con.setConnectTimeout(5000);\n+        con.setReadTimeout(5000);\n+\n+        // Set up request body\n+        con.setDoOutput(true);\n+        final DataOutputStream out = new DataOutputStream(con.getOutputStream());\n+        StringBuilder encodedResult = new StringBuilder();\n+\n+        // Encode client_id\n+        encodedResult.append(URLEncoder.encode(\"client_id\", \"UTF-8\"));\n+        encodedResult.append(\"=\");\n+        encodedResult.append(URLEncoder.encode(authorizationRequest.getClientId(), \"UTF-8\"));\n+        encodedResult.append(\"&\");\n+\n+        // Encode scope\n+        encodedResult.append(URLEncoder.encode(\"scope\", \"UTF-8\"));\n+        encodedResult.append(\"=\");\n+        encodedResult.append(URLEncoder.encode(authorizationRequest.getScope(), \"UTF-8\"));\n+\n+        // Attach request body\n+        final String convertedParams = encodedResult.toString();\n+        out.writeBytes(convertedParams);\n+        out.flush();\n+        out.close();\n+\n+        // Send request and create the authorization result\n+        // MicrosoftSTAuthorizationResultFactory not used since no Intent is being created\n+        final int authorizationCode = con.getResponseCode();\n+        final BufferedReader streamReader;\n+        final AuthorizationResult authorizationResult;\n+\n+        // Check if the request was successful\n+        // Any code below 300 (HTTP_MULT_CHOICE) is considered a success\n+        if (authorizationCode < HttpsURLConnection.HTTP_MULT_CHOICE){\n+            // Get and parse response body\n+            streamReader = new BufferedReader(new InputStreamReader(con.getInputStream()));", "originalCommit": "5379463012bc628f8858bb7ad8547cd0edae95d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "22d538aeb40834f79e9be318b187e52d5e1afae1", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java b/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java\nindex 59a0d2bf8..f4d5c6f2d 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java\n\n@@ -262,49 +264,29 @@ public abstract class OAuth2Strategy\n             urlBody = authorityUrl;\n         }\n \n-        URL url = new URL(urlBody);\n-\n-        final HttpURLConnection con = (HttpsURLConnection) url.openConnection();\n-        con.setRequestMethod(\"POST\");\n-        con.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n-        con.setConnectTimeout(5000);\n-        con.setReadTimeout(5000);\n-\n-        // Set up request body\n-        con.setDoOutput(true);\n-        final DataOutputStream out = new DataOutputStream(con.getOutputStream());\n-        StringBuilder encodedResult = new StringBuilder();\n-\n-        // Encode client_id\n-        encodedResult.append(URLEncoder.encode(\"client_id\", \"UTF-8\"));\n-        encodedResult.append(\"=\");\n-        encodedResult.append(URLEncoder.encode(authorizationRequest.getClientId(), \"UTF-8\"));\n-        encodedResult.append(\"&\");\n-\n-        // Encode scope\n-        encodedResult.append(URLEncoder.encode(\"scope\", \"UTF-8\"));\n-        encodedResult.append(\"=\");\n-        encodedResult.append(URLEncoder.encode(authorizationRequest.getScope(), \"UTF-8\"));\n-\n-        // Attach request body\n-        final String convertedParams = encodedResult.toString();\n-        out.writeBytes(convertedParams);\n-        out.flush();\n-        out.close();\n-\n-        // Send request and create the authorization result\n+        // Set up headers and request body\n+        final String requestBody = ObjectMapper.serializeObjectToFormUrlEncoded(authorizationRequest);\n+        final Map<String, String> headers = new TreeMap<>();\n+        headers.put(CLIENT_REQUEST_ID, DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID));\n+        headers.putAll(EstsTelemetry.getInstance().getTelemetryHeaders());\n+\n+        // Send request\n+        final HttpResponse response = HttpRequest.sendPost(\n+                new URL(urlBody),\n+                headers,\n+                requestBody.getBytes(ObjectMapper.ENCODING_SCHEME),\n+                DEVICE_CODE_CONTENT_TYPE\n+        );\n+\n+        // Create the authorization result\n         // MicrosoftSTAuthorizationResultFactory not used since no Intent is being created\n-        final int authorizationCode = con.getResponseCode();\n-        final BufferedReader streamReader;\n-        final AuthorizationResult authorizationResult;\n+        AuthorizationResult authorizationResult;\n \n         // Check if the request was successful\n         // Any code below 300 (HTTP_MULT_CHOICE) is considered a success\n-        if (authorizationCode < HttpsURLConnection.HTTP_MULT_CHOICE){\n+        if (response.getStatusCode() < HttpsURLConnection.HTTP_MULT_CHOICE){\n             // Get and parse response body\n-            streamReader = new BufferedReader(new InputStreamReader(con.getInputStream()));\n-            final String responseBody = streamReader.readLine();\n-            final HashMap<String, String> parsedResponseBody = new Gson().fromJson(responseBody, new TypeToken<HashMap<String, String>>() {}.getType());\n+            final HashMap<String, String> parsedResponseBody = new Gson().fromJson(response.getBody(), new TypeToken<HashMap<String, String>>() {}.getType());\n \n             // Create response and result objects\n             // Not sure where \"code\" is stored. Not found in the input stream...\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3MDI0MQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462570241", "bodyText": "Interesting.  Why not just hand the Reader to Gson.fromJson()?", "author": "AdamBJohnsonx", "createdAt": "2020-07-29T20:31:36Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java", "diffHunk": "@@ -230,6 +245,101 @@ protected final void setAuthorizationEndpoint(final String authorizationEndpoint\n         mAuthorizationEndpoint = authorizationEndpoint;\n     }\n \n+    public AuthorizationResult getDeviceCode(@NonNull final MicrosoftStsAuthorizationRequest authorizationRequest, @Nullable final String authorityUrl) throws IOException {\n+        final String methodName = \":getDeviceCode\";\n+\n+        // Set up connection\n+        String urlBody;\n+\n+        if (authorityUrl == null) {\n+            // Fetch the tenant from the authority\n+            String tenant = authorizationRequest.getAuthority().getPath().split(\"/\")[1];\n+\n+            // Set up Device Code Flow authorization url\n+            urlBody = \"https://login.microsoftonline.com/\" + tenant + \"/oauth2/v2.0/devicecode\";\n+        }\n+        else {\n+            urlBody = authorityUrl;\n+        }\n+\n+        URL url = new URL(urlBody);\n+\n+        final HttpURLConnection con = (HttpsURLConnection) url.openConnection();\n+        con.setRequestMethod(\"POST\");\n+        con.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n+        con.setConnectTimeout(5000);\n+        con.setReadTimeout(5000);\n+\n+        // Set up request body\n+        con.setDoOutput(true);\n+        final DataOutputStream out = new DataOutputStream(con.getOutputStream());\n+        StringBuilder encodedResult = new StringBuilder();\n+\n+        // Encode client_id\n+        encodedResult.append(URLEncoder.encode(\"client_id\", \"UTF-8\"));\n+        encodedResult.append(\"=\");\n+        encodedResult.append(URLEncoder.encode(authorizationRequest.getClientId(), \"UTF-8\"));\n+        encodedResult.append(\"&\");\n+\n+        // Encode scope\n+        encodedResult.append(URLEncoder.encode(\"scope\", \"UTF-8\"));\n+        encodedResult.append(\"=\");\n+        encodedResult.append(URLEncoder.encode(authorizationRequest.getScope(), \"UTF-8\"));\n+\n+        // Attach request body\n+        final String convertedParams = encodedResult.toString();\n+        out.writeBytes(convertedParams);\n+        out.flush();\n+        out.close();\n+\n+        // Send request and create the authorization result\n+        // MicrosoftSTAuthorizationResultFactory not used since no Intent is being created\n+        final int authorizationCode = con.getResponseCode();\n+        final BufferedReader streamReader;\n+        final AuthorizationResult authorizationResult;\n+\n+        // Check if the request was successful\n+        // Any code below 300 (HTTP_MULT_CHOICE) is considered a success\n+        if (authorizationCode < HttpsURLConnection.HTTP_MULT_CHOICE){\n+            // Get and parse response body\n+            streamReader = new BufferedReader(new InputStreamReader(con.getInputStream()));\n+            final String responseBody = streamReader.readLine();\n+            final HashMap<String, String> parsedResponseBody = new Gson().fromJson(responseBody, new TypeToken<HashMap<String, String>>() {}.getType());\n+\n+            // Create response and result objects\n+            // Not sure where \"code\" is stored. Not found in the input stream...\n+            final MicrosoftStsAuthorizationResponse authorizationResponse =\n+                    new MicrosoftStsAuthorizationResponse(null, authorizationRequest.getState(), parsedResponseBody);\n+            authorizationResult = new MicrosoftStsAuthorizationResult(AuthorizationStatus.SUCCESS, authorizationResponse);\n+\n+            Logger.verbose(\n+                    TAG + methodName,\n+                    \"Device Code Flow authorization successful...\"\n+            );\n+        }\n+        else {\n+            // Get and parse response body\n+            streamReader = new BufferedReader(new InputStreamReader(con.getErrorStream()));\n+            final String responseBody = streamReader.readLine();", "originalCommit": "5379463012bc628f8858bb7ad8547cd0edae95d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "22d538aeb40834f79e9be318b187e52d5e1afae1", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java b/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java\nindex 59a0d2bf8..f4d5c6f2d 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java\n\n@@ -262,49 +264,29 @@ public abstract class OAuth2Strategy\n             urlBody = authorityUrl;\n         }\n \n-        URL url = new URL(urlBody);\n-\n-        final HttpURLConnection con = (HttpsURLConnection) url.openConnection();\n-        con.setRequestMethod(\"POST\");\n-        con.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n-        con.setConnectTimeout(5000);\n-        con.setReadTimeout(5000);\n-\n-        // Set up request body\n-        con.setDoOutput(true);\n-        final DataOutputStream out = new DataOutputStream(con.getOutputStream());\n-        StringBuilder encodedResult = new StringBuilder();\n-\n-        // Encode client_id\n-        encodedResult.append(URLEncoder.encode(\"client_id\", \"UTF-8\"));\n-        encodedResult.append(\"=\");\n-        encodedResult.append(URLEncoder.encode(authorizationRequest.getClientId(), \"UTF-8\"));\n-        encodedResult.append(\"&\");\n-\n-        // Encode scope\n-        encodedResult.append(URLEncoder.encode(\"scope\", \"UTF-8\"));\n-        encodedResult.append(\"=\");\n-        encodedResult.append(URLEncoder.encode(authorizationRequest.getScope(), \"UTF-8\"));\n-\n-        // Attach request body\n-        final String convertedParams = encodedResult.toString();\n-        out.writeBytes(convertedParams);\n-        out.flush();\n-        out.close();\n-\n-        // Send request and create the authorization result\n+        // Set up headers and request body\n+        final String requestBody = ObjectMapper.serializeObjectToFormUrlEncoded(authorizationRequest);\n+        final Map<String, String> headers = new TreeMap<>();\n+        headers.put(CLIENT_REQUEST_ID, DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID));\n+        headers.putAll(EstsTelemetry.getInstance().getTelemetryHeaders());\n+\n+        // Send request\n+        final HttpResponse response = HttpRequest.sendPost(\n+                new URL(urlBody),\n+                headers,\n+                requestBody.getBytes(ObjectMapper.ENCODING_SCHEME),\n+                DEVICE_CODE_CONTENT_TYPE\n+        );\n+\n+        // Create the authorization result\n         // MicrosoftSTAuthorizationResultFactory not used since no Intent is being created\n-        final int authorizationCode = con.getResponseCode();\n-        final BufferedReader streamReader;\n-        final AuthorizationResult authorizationResult;\n+        AuthorizationResult authorizationResult;\n \n         // Check if the request was successful\n         // Any code below 300 (HTTP_MULT_CHOICE) is considered a success\n-        if (authorizationCode < HttpsURLConnection.HTTP_MULT_CHOICE){\n+        if (response.getStatusCode() < HttpsURLConnection.HTTP_MULT_CHOICE){\n             // Get and parse response body\n-            streamReader = new BufferedReader(new InputStreamReader(con.getInputStream()));\n-            final String responseBody = streamReader.readLine();\n-            final HashMap<String, String> parsedResponseBody = new Gson().fromJson(responseBody, new TypeToken<HashMap<String, String>>() {}.getType());\n+            final HashMap<String, String> parsedResponseBody = new Gson().fromJson(response.getBody(), new TypeToken<HashMap<String, String>>() {}.getType());\n \n             // Create response and result objects\n             // Not sure where \"code\" is stored. Not found in the input stream...\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3MjI5Ng==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r462572296", "bodyText": "Do we want to specify the character set here?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        streamReader = new BufferedReader(new InputStreamReader(con.getInputStream()));\n          \n          \n            \n                        streamReader = new BufferedReader(new InputStreamReader(con.getInputStream(), \"UTF-8\"));", "author": "AdamBJohnsonx", "createdAt": "2020-07-29T20:35:27Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java", "diffHunk": "@@ -230,6 +245,101 @@ protected final void setAuthorizationEndpoint(final String authorizationEndpoint\n         mAuthorizationEndpoint = authorizationEndpoint;\n     }\n \n+    public AuthorizationResult getDeviceCode(@NonNull final MicrosoftStsAuthorizationRequest authorizationRequest, @Nullable final String authorityUrl) throws IOException {\n+        final String methodName = \":getDeviceCode\";\n+\n+        // Set up connection\n+        String urlBody;\n+\n+        if (authorityUrl == null) {\n+            // Fetch the tenant from the authority\n+            String tenant = authorizationRequest.getAuthority().getPath().split(\"/\")[1];\n+\n+            // Set up Device Code Flow authorization url\n+            urlBody = \"https://login.microsoftonline.com/\" + tenant + \"/oauth2/v2.0/devicecode\";\n+        }\n+        else {\n+            urlBody = authorityUrl;\n+        }\n+\n+        URL url = new URL(urlBody);\n+\n+        final HttpURLConnection con = (HttpsURLConnection) url.openConnection();\n+        con.setRequestMethod(\"POST\");\n+        con.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n+        con.setConnectTimeout(5000);\n+        con.setReadTimeout(5000);\n+\n+        // Set up request body\n+        con.setDoOutput(true);\n+        final DataOutputStream out = new DataOutputStream(con.getOutputStream());\n+        StringBuilder encodedResult = new StringBuilder();\n+\n+        // Encode client_id\n+        encodedResult.append(URLEncoder.encode(\"client_id\", \"UTF-8\"));\n+        encodedResult.append(\"=\");\n+        encodedResult.append(URLEncoder.encode(authorizationRequest.getClientId(), \"UTF-8\"));\n+        encodedResult.append(\"&\");\n+\n+        // Encode scope\n+        encodedResult.append(URLEncoder.encode(\"scope\", \"UTF-8\"));\n+        encodedResult.append(\"=\");\n+        encodedResult.append(URLEncoder.encode(authorizationRequest.getScope(), \"UTF-8\"));\n+\n+        // Attach request body\n+        final String convertedParams = encodedResult.toString();\n+        out.writeBytes(convertedParams);\n+        out.flush();\n+        out.close();\n+\n+        // Send request and create the authorization result\n+        // MicrosoftSTAuthorizationResultFactory not used since no Intent is being created\n+        final int authorizationCode = con.getResponseCode();\n+        final BufferedReader streamReader;\n+        final AuthorizationResult authorizationResult;\n+\n+        // Check if the request was successful\n+        // Any code below 300 (HTTP_MULT_CHOICE) is considered a success\n+        if (authorizationCode < HttpsURLConnection.HTTP_MULT_CHOICE){\n+            // Get and parse response body\n+            streamReader = new BufferedReader(new InputStreamReader(con.getInputStream()));", "originalCommit": "5379463012bc628f8858bb7ad8547cd0edae95d1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "22d538aeb40834f79e9be318b187e52d5e1afae1", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java b/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java\nindex 59a0d2bf8..f4d5c6f2d 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java\n\n@@ -262,49 +264,29 @@ public abstract class OAuth2Strategy\n             urlBody = authorityUrl;\n         }\n \n-        URL url = new URL(urlBody);\n-\n-        final HttpURLConnection con = (HttpsURLConnection) url.openConnection();\n-        con.setRequestMethod(\"POST\");\n-        con.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n-        con.setConnectTimeout(5000);\n-        con.setReadTimeout(5000);\n-\n-        // Set up request body\n-        con.setDoOutput(true);\n-        final DataOutputStream out = new DataOutputStream(con.getOutputStream());\n-        StringBuilder encodedResult = new StringBuilder();\n-\n-        // Encode client_id\n-        encodedResult.append(URLEncoder.encode(\"client_id\", \"UTF-8\"));\n-        encodedResult.append(\"=\");\n-        encodedResult.append(URLEncoder.encode(authorizationRequest.getClientId(), \"UTF-8\"));\n-        encodedResult.append(\"&\");\n-\n-        // Encode scope\n-        encodedResult.append(URLEncoder.encode(\"scope\", \"UTF-8\"));\n-        encodedResult.append(\"=\");\n-        encodedResult.append(URLEncoder.encode(authorizationRequest.getScope(), \"UTF-8\"));\n-\n-        // Attach request body\n-        final String convertedParams = encodedResult.toString();\n-        out.writeBytes(convertedParams);\n-        out.flush();\n-        out.close();\n-\n-        // Send request and create the authorization result\n+        // Set up headers and request body\n+        final String requestBody = ObjectMapper.serializeObjectToFormUrlEncoded(authorizationRequest);\n+        final Map<String, String> headers = new TreeMap<>();\n+        headers.put(CLIENT_REQUEST_ID, DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID));\n+        headers.putAll(EstsTelemetry.getInstance().getTelemetryHeaders());\n+\n+        // Send request\n+        final HttpResponse response = HttpRequest.sendPost(\n+                new URL(urlBody),\n+                headers,\n+                requestBody.getBytes(ObjectMapper.ENCODING_SCHEME),\n+                DEVICE_CODE_CONTENT_TYPE\n+        );\n+\n+        // Create the authorization result\n         // MicrosoftSTAuthorizationResultFactory not used since no Intent is being created\n-        final int authorizationCode = con.getResponseCode();\n-        final BufferedReader streamReader;\n-        final AuthorizationResult authorizationResult;\n+        AuthorizationResult authorizationResult;\n \n         // Check if the request was successful\n         // Any code below 300 (HTTP_MULT_CHOICE) is considered a success\n-        if (authorizationCode < HttpsURLConnection.HTTP_MULT_CHOICE){\n+        if (response.getStatusCode() < HttpsURLConnection.HTTP_MULT_CHOICE){\n             // Get and parse response body\n-            streamReader = new BufferedReader(new InputStreamReader(con.getInputStream()));\n-            final String responseBody = streamReader.readLine();\n-            final HashMap<String, String> parsedResponseBody = new Gson().fromJson(responseBody, new TypeToken<HashMap<String, String>>() {}.getType());\n+            final HashMap<String, String> parsedResponseBody = new Gson().fromJson(response.getBody(), new TypeToken<HashMap<String, String>>() {}.getType());\n \n             // Create response and result objects\n             // Not sure where \"code\" is stored. Not found in the input stream...\n"}}, {"oid": "b27c7b68d8ea3c3e408da7dd9733120abb621a4d", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/b27c7b68d8ea3c3e408da7dd9733120abb621a4d", "message": "fixed authority problem", "committedDate": "2020-08-05T21:04:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA0NjgwNg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r466046806", "bodyText": "nit: final", "author": "rpdome", "createdAt": "2020-08-05T22:51:06Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -459,14 +465,236 @@ public boolean removeCurrentAccount(RemoveAccountCommandParameters parameters) t\n     }\n \n     @Override\n-    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws ServiceException, ClientException, IOException {\n+        // Logging start of method\n+        final String methodName = \":deviceCodeFlowAuthRequest\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Authorizing user code...\"\n+        );\n+\n+        // Default scopes here\n+        final Set<String> mergedScopes = addDefaultScopes(parameters);\n+\n+        final DeviceCodeFlowCommandParameters parametersWithScopes = parameters\n+                .toBuilder()\n+                .scopes(mergedScopes)\n+                .build();\n+\n+        logParameters(TAG, parametersWithScopes);\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putProperties(parametersWithScopes)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        Authority.KnownAuthorityResult authorityResult = Authority.getKnownAuthorityResult(parametersWithScopes.getAuthority());", "originalCommit": "b27c7b68d8ea3c3e408da7dd9733120abb621a4d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0e734989d4d301d63887a546ff6691e475acdee4", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java b/common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java\nindex d99bb36d9..a3fdd1cd0 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java\n\n@@ -465,7 +465,8 @@ public class LocalMSALController extends BaseController {\n     }\n \n     @Override\n-    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws ServiceException, ClientException, IOException {\n+    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters)\n+            throws ServiceException, ClientException, IOException {\n         // Logging start of method\n         final String methodName = \":deviceCodeFlowAuthRequest\";\n         Logger.verbose(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA0ODc3OQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r466048779", "bodyText": "This would also have to emit telemetry event... You could wrap the whole logic in a try catch block. In the catch block, you emit an exception event, and then rethrow. (so that you don't have to do it multiple time - i.e. under getKnown() and here).", "author": "rpdome", "createdAt": "2020-08-05T22:56:48Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -459,14 +465,236 @@ public boolean removeCurrentAccount(RemoveAccountCommandParameters parameters) t\n     }\n \n     @Override\n-    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws ServiceException, ClientException, IOException {\n+        // Logging start of method\n+        final String methodName = \":deviceCodeFlowAuthRequest\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Authorizing user code...\"\n+        );\n+\n+        // Default scopes here\n+        final Set<String> mergedScopes = addDefaultScopes(parameters);\n+\n+        final DeviceCodeFlowCommandParameters parametersWithScopes = parameters\n+                .toBuilder()\n+                .scopes(mergedScopes)\n+                .build();\n+\n+        logParameters(TAG, parametersWithScopes);\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putProperties(parametersWithScopes)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        Authority.KnownAuthorityResult authorityResult = Authority.getKnownAuthorityResult(parametersWithScopes.getAuthority());\n+\n+        //0.1 If not known throw resulting exception\n+        if (!authorityResult.getKnown()) {\n+            Telemetry.emit(\n+                    new ApiEndEvent()\n+                            .putException(authorityResult.getClientException())\n+                            .putApiId(TelemetryEventStrings.Api.LOCAL_ACQUIRE_TOKEN_INTERACTIVE)\n+            );\n+\n+            throw authorityResult.getClientException();\n+        }\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parametersWithScopes.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parametersWithScopes\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 1: Get user code\n+        // Populate global authorization request\n+        mAuthorizationRequest = getAuthorizationRequest(oAuth2Strategy, parametersWithScopes);\n+\n+        // Call method defined in oAuth2Strategy to request authorization\n+        final AuthorizationResult authorizationResult = oAuth2Strategy.getDeviceCode((MicrosoftStsAuthorizationRequest) mAuthorizationRequest);\n+\n+        validateServiceResult(authorizationResult);", "originalCommit": "b27c7b68d8ea3c3e408da7dd9733120abb621a4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA0OTEwMA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r466049100", "bodyText": "Same with acquireDeviceCodeFlowToken()", "author": "rpdome", "createdAt": "2020-08-05T22:57:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA0ODc3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "0e734989d4d301d63887a546ff6691e475acdee4", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java b/common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java\nindex d99bb36d9..a3fdd1cd0 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java\n\n@@ -465,7 +465,8 @@ public class LocalMSALController extends BaseController {\n     }\n \n     @Override\n-    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws ServiceException, ClientException, IOException {\n+    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters)\n+            throws ServiceException, ClientException, IOException {\n         // Logging start of method\n         final String methodName = \":deviceCodeFlowAuthRequest\";\n         Logger.verbose(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA1MDY2Mg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r466050662", "bodyText": "nit: intervalInMilliseconds?", "author": "rpdome", "createdAt": "2020-08-05T23:02:21Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java", "diffHunk": "@@ -459,14 +465,236 @@ public boolean removeCurrentAccount(RemoveAccountCommandParameters parameters) t\n     }\n \n     @Override\n-    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws ServiceException, ClientException, IOException {\n+        // Logging start of method\n+        final String methodName = \":deviceCodeFlowAuthRequest\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Authorizing user code...\"\n+        );\n+\n+        // Default scopes here\n+        final Set<String> mergedScopes = addDefaultScopes(parameters);\n+\n+        final DeviceCodeFlowCommandParameters parametersWithScopes = parameters\n+                .toBuilder()\n+                .scopes(mergedScopes)\n+                .build();\n+\n+        logParameters(TAG, parametersWithScopes);\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putProperties(parametersWithScopes)\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        Authority.KnownAuthorityResult authorityResult = Authority.getKnownAuthorityResult(parametersWithScopes.getAuthority());\n+\n+        //0.1 If not known throw resulting exception\n+        if (!authorityResult.getKnown()) {\n+            Telemetry.emit(\n+                    new ApiEndEvent()\n+                            .putException(authorityResult.getClientException())\n+                            .putApiId(TelemetryEventStrings.Api.LOCAL_ACQUIRE_TOKEN_INTERACTIVE)\n+            );\n+\n+            throw authorityResult.getClientException();\n+        }\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parametersWithScopes.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parametersWithScopes\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 1: Get user code\n+        // Populate global authorization request\n+        mAuthorizationRequest = getAuthorizationRequest(oAuth2Strategy, parametersWithScopes);\n+\n+        // Call method defined in oAuth2Strategy to request authorization\n+        final AuthorizationResult authorizationResult = oAuth2Strategy.getDeviceCode((MicrosoftStsAuthorizationRequest) mAuthorizationRequest);\n+\n+        validateServiceResult(authorizationResult);\n+\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow authorization step finished...\"\n+        );\n+        logResult(TAG, authorizationResult);\n+\n+        // End telemetry with LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE\n+        Telemetry.emit(\n+                new ApiEndEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_ACQUIRE_URL_AND_CODE)\n+        );\n+\n+        return authorizationResult;\n     }\n \n     @Override\n-    public AcquireTokenResult acquireDeviceCodeFlowToken(final AuthorizationResult authorizationResult, DeviceCodeFlowCommandParameters commandParameters) throws Exception {\n-        // TODO: Placeholder to avoid inheritance error. Will be implemented after Command/Controller level PR in Common\n-        return null;\n+    public AcquireTokenResult acquireDeviceCodeFlowToken(\n+            final AuthorizationResult authorizationResult,\n+            final DeviceCodeFlowCommandParameters parameters)\n+            throws ServiceException, ClientException, IOException {\n+\n+        // Logging start of method\n+        final String methodName = \":acquireDeviceCodeFlowToken\";\n+        Logger.verbose(\n+                TAG + methodName,\n+                \"Device Code Flow: Polling for token...\"\n+        );\n+\n+        // Start telemetry with LOCAL_DEVICE_CODE_FLOW_POLLING\n+        Telemetry.emit(\n+                new ApiStartEvent()\n+                        .putApiId(TelemetryEventStrings.Api.LOCAL_DEVICE_CODE_FLOW_POLLING)\n+        );\n+\n+        // Create empty AcquireTokenResult object\n+        final AcquireTokenResult acquireTokenResult = new AcquireTokenResult();\n+\n+        // Assign authorization result\n+        acquireTokenResult.setAuthorizationResult(authorizationResult);\n+\n+        // Fetch the Authorization Response\n+        final MicrosoftStsAuthorizationResponse authorizationResponse = (MicrosoftStsAuthorizationResponse) authorizationResult.getAuthorizationResponse();\n+\n+        // Create OAuth2Strategy using commandParameters and strategyParameters\n+        final OAuth2StrategyParameters strategyParameters = new OAuth2StrategyParameters();\n+        strategyParameters.setContext(parameters.getAndroidApplicationContext());\n+\n+        final OAuth2Strategy oAuth2Strategy = parameters\n+                .getAuthority()\n+                .createOAuth2Strategy(strategyParameters);\n+\n+        // DCF protocol step 2: Poll for token\n+        TokenResult tokenResult = null;\n+\n+        // Create token request outside of loop so it isn't re-created after every loop\n+        final MicrosoftStsTokenRequest tokenRequest = (MicrosoftStsTokenRequest) oAuth2Strategy.createTokenRequest(\n+                mAuthorizationRequest,\n+                authorizationResponse,\n+                parameters.getAuthenticationScheme()\n+        );\n+\n+        // Fetch wait interval\n+        final int interval = Integer.parseInt(authorizationResponse.getInterval()) * 1000;", "originalCommit": "b27c7b68d8ea3c3e408da7dd9733120abb621a4d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0e734989d4d301d63887a546ff6691e475acdee4", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java b/common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java\nindex d99bb36d9..a3fdd1cd0 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/controllers/LocalMSALController.java\n\n@@ -465,7 +465,8 @@ public class LocalMSALController extends BaseController {\n     }\n \n     @Override\n-    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters) throws ServiceException, ClientException, IOException {\n+    public AuthorizationResult deviceCodeFlowAuthRequest(final DeviceCodeFlowCommandParameters parameters)\n+            throws ServiceException, ClientException, IOException {\n         // Logging start of method\n         final String methodName = \":deviceCodeFlowAuthRequest\";\n         Logger.verbose(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA1Mjg2NA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r466052864", "bodyText": "Can we extract this into MicrosoftStsOAuth2Configuration.getDeviceCodeEndpoint()?\nNo need to fetch the endpoint from .well-known/openid-configuration yet. (If you could add a TODO there that we're pending server change, that would be really great.)", "author": "rpdome", "createdAt": "2020-08-05T23:08:49Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java", "diffHunk": "@@ -230,6 +240,70 @@ protected final void setAuthorizationEndpoint(final String authorizationEndpoint\n         mAuthorizationEndpoint = authorizationEndpoint;\n     }\n \n+    public AuthorizationResult getDeviceCode(@NonNull final MicrosoftStsAuthorizationRequest authorizationRequest) throws IOException {\n+        final String methodName = \":getDeviceCode\";\n+\n+        final String urlBody = ((MicrosoftStsOAuth2Configuration) mConfig).getAuthorityUrl().toString() + \"/oauth2/v2.0/devicecode\";", "originalCommit": "b27c7b68d8ea3c3e408da7dd9733120abb621a4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA3OTIzNQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r466079235", "bodyText": "Ok, will do!", "author": "t-fadura", "createdAt": "2020-08-06T00:38:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA1Mjg2NA=="}], "type": "inlineReview", "revised_code": {"commit": "0e734989d4d301d63887a546ff6691e475acdee4", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java b/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java\nindex 93618591e..8079b2b34 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java\n\n@@ -243,8 +243,6 @@ public abstract class OAuth2Strategy\n     public AuthorizationResult getDeviceCode(@NonNull final MicrosoftStsAuthorizationRequest authorizationRequest) throws IOException {\n         final String methodName = \":getDeviceCode\";\n \n-        final String urlBody = ((MicrosoftStsOAuth2Configuration) mConfig).getAuthorityUrl().toString() + \"/oauth2/v2.0/devicecode\";\n-\n         // Set up headers and request body\n         final String requestBody = ObjectMapper.serializeObjectToFormUrlEncoded(authorizationRequest);\n         final Map<String, String> headers = new TreeMap<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA1MzE5NA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r466053194", "bodyText": "nit: Update this comment to reflect your conversation with @iambmelt  below?", "author": "rpdome", "createdAt": "2020-08-05T23:09:40Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java", "diffHunk": "@@ -230,6 +240,70 @@ protected final void setAuthorizationEndpoint(final String authorizationEndpoint\n         mAuthorizationEndpoint = authorizationEndpoint;\n     }\n \n+    public AuthorizationResult getDeviceCode(@NonNull final MicrosoftStsAuthorizationRequest authorizationRequest) throws IOException {\n+        final String methodName = \":getDeviceCode\";\n+\n+        final String urlBody = ((MicrosoftStsOAuth2Configuration) mConfig).getAuthorityUrl().toString() + \"/oauth2/v2.0/devicecode\";\n+\n+        // Set up headers and request body\n+        final String requestBody = ObjectMapper.serializeObjectToFormUrlEncoded(authorizationRequest);\n+        final Map<String, String> headers = new TreeMap<>();\n+        headers.put(CLIENT_REQUEST_ID, DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID));\n+        headers.putAll(EstsTelemetry.getInstance().getTelemetryHeaders());\n+\n+        // Send request\n+        final HttpResponse response = HttpRequest.sendPost(\n+                new URL(urlBody),\n+                headers,\n+                requestBody.getBytes(ObjectMapper.ENCODING_SCHEME),\n+                DEVICE_CODE_CONTENT_TYPE\n+        );\n+\n+        // Create the authorization result\n+        // MicrosoftSTAuthorizationResultFactory not used since no Intent is being created\n+        AuthorizationResult authorizationResult;\n+\n+        // Check if the request was successful\n+        // Any code below 300 (HTTP_MULT_CHOICE) is considered a success\n+        if (response.getStatusCode() < HttpsURLConnection.HTTP_MULT_CHOICE){\n+            // Get and parse response body\n+            final HashMap<String, String> parsedResponseBody = new Gson().fromJson(response.getBody(), new TypeToken<HashMap<String, String>>() {}.getType());\n+\n+            // Create response and result objects\n+            // Not sure where \"code\" is stored. Not found in the input stream...", "originalCommit": "b27c7b68d8ea3c3e408da7dd9733120abb621a4d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0e734989d4d301d63887a546ff6691e475acdee4", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java b/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java\nindex 93618591e..8079b2b34 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java\n\n@@ -243,8 +243,6 @@ public abstract class OAuth2Strategy\n     public AuthorizationResult getDeviceCode(@NonNull final MicrosoftStsAuthorizationRequest authorizationRequest) throws IOException {\n         final String methodName = \":getDeviceCode\";\n \n-        final String urlBody = ((MicrosoftStsOAuth2Configuration) mConfig).getAuthorityUrl().toString() + \"/oauth2/v2.0/devicecode\";\n-\n         // Set up headers and request body\n         final String requestBody = ObjectMapper.serializeObjectToFormUrlEncoded(authorizationRequest);\n         final Map<String, String> headers = new TreeMap<>();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA1MzM0MA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/983#discussion_r466053340", "bodyText": "nit: early return? (so there's no need to create a AuthorizationResult pointer in line 264).", "author": "rpdome", "createdAt": "2020-08-05T23:10:06Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java", "diffHunk": "@@ -230,6 +240,70 @@ protected final void setAuthorizationEndpoint(final String authorizationEndpoint\n         mAuthorizationEndpoint = authorizationEndpoint;\n     }\n \n+    public AuthorizationResult getDeviceCode(@NonNull final MicrosoftStsAuthorizationRequest authorizationRequest) throws IOException {\n+        final String methodName = \":getDeviceCode\";\n+\n+        final String urlBody = ((MicrosoftStsOAuth2Configuration) mConfig).getAuthorityUrl().toString() + \"/oauth2/v2.0/devicecode\";\n+\n+        // Set up headers and request body\n+        final String requestBody = ObjectMapper.serializeObjectToFormUrlEncoded(authorizationRequest);\n+        final Map<String, String> headers = new TreeMap<>();\n+        headers.put(CLIENT_REQUEST_ID, DiagnosticContext.getRequestContext().get(DiagnosticContext.CORRELATION_ID));\n+        headers.putAll(EstsTelemetry.getInstance().getTelemetryHeaders());\n+\n+        // Send request\n+        final HttpResponse response = HttpRequest.sendPost(\n+                new URL(urlBody),\n+                headers,\n+                requestBody.getBytes(ObjectMapper.ENCODING_SCHEME),\n+                DEVICE_CODE_CONTENT_TYPE\n+        );\n+\n+        // Create the authorization result\n+        // MicrosoftSTAuthorizationResultFactory not used since no Intent is being created\n+        AuthorizationResult authorizationResult;\n+\n+        // Check if the request was successful\n+        // Any code below 300 (HTTP_MULT_CHOICE) is considered a success\n+        if (response.getStatusCode() < HttpsURLConnection.HTTP_MULT_CHOICE){\n+            // Get and parse response body\n+            final HashMap<String, String> parsedResponseBody = new Gson().fromJson(response.getBody(), new TypeToken<HashMap<String, String>>() {}.getType());\n+\n+            // Create response and result objects\n+            // Not sure where \"code\" is stored. Not found in the input stream...\n+            final MicrosoftStsAuthorizationResponse authorizationResponse =\n+                    new MicrosoftStsAuthorizationResponse(null, authorizationRequest.getState(), parsedResponseBody);\n+            authorizationResult = new MicrosoftStsAuthorizationResult(AuthorizationStatus.SUCCESS, authorizationResponse);\n+\n+            Logger.verbose(\n+                    TAG + methodName,\n+                    \"Device Code Flow authorization successful...\"\n+            );\n+        }", "originalCommit": "b27c7b68d8ea3c3e408da7dd9733120abb621a4d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0e734989d4d301d63887a546ff6691e475acdee4", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java b/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java\nindex 93618591e..8079b2b34 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/providers/oauth2/OAuth2Strategy.java\n\n@@ -243,8 +243,6 @@ public abstract class OAuth2Strategy\n     public AuthorizationResult getDeviceCode(@NonNull final MicrosoftStsAuthorizationRequest authorizationRequest) throws IOException {\n         final String methodName = \":getDeviceCode\";\n \n-        final String urlBody = ((MicrosoftStsOAuth2Configuration) mConfig).getAuthorityUrl().toString() + \"/oauth2/v2.0/devicecode\";\n-\n         // Set up headers and request body\n         final String requestBody = ObjectMapper.serializeObjectToFormUrlEncoded(authorizationRequest);\n         final Map<String, String> headers = new TreeMap<>();\n"}}, {"oid": "204b114130fafbed33830c78a690e15300a3712e", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/204b114130fafbed33830c78a690e15300a3712e", "message": "Merge branch 'dev' into t-fadura/dcf-main", "committedDate": "2020-08-06T00:37:57Z", "type": "commit"}, {"oid": "0e734989d4d301d63887a546ff6691e475acdee4", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/0e734989d4d301d63887a546ff6691e475acdee4", "message": "Telemetry emit for exception, other suggestions", "committedDate": "2020-08-06T00:56:44Z", "type": "commit"}, {"oid": "45ab12879adf4902d671b0c735f7316575b351ec", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/45ab12879adf4902d671b0c735f7316575b351ec", "message": "Merge branch 't-fadura/dcf-main' of https://github.com/AzureAD/microsoft-authentication-library-common-for-android into t-fadura/dcf-main", "committedDate": "2020-08-06T00:57:03Z", "type": "commit"}]}