{"pr_number": 1055, "pr_title": "Fix a potential issue with command dispatcher.", "pr_createdAt": "2020-09-25T20:19:46Z", "pr_url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1055", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI0OTk5Mw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1055#discussion_r495249993", "bodyText": "May I ask what you meant by 'mutated' here? In what (hypothetical) scenario this might happen?", "author": "rpdome", "createdAt": "2020-09-25T21:36:03Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/CommandDispatcher.java", "diffHunk": "@@ -110,48 +115,68 @@ public static void submitSilent(@SuppressWarnings(WarningType.rawtype_warning) @\n             return;\n         }\n \n+        final ResultFuture<CommandResult> finalFuture = future;\n+\n         sSilentExecutor.execute(new Runnable() {\n             @Override\n             public void run() {\n-                final String correlationId = initializeDiagnosticContext(command.getParameters().getCorrelationId());\n-\n-                // set correlation id on parameters as it may not already be set\n-                command.getParameters().setCorrelationId(correlationId);\n-\n-                EstsTelemetry.getInstance().initTelemetryForCommand(command);\n+                try {\n+                    final String correlationId = initializeDiagnosticContext(command.getParameters().getCorrelationId());\n \n-                EstsTelemetry.getInstance().emitApiId(command.getPublicApiId());\n+                    // set correlation id on parameters as it may not already be set\n+                    command.getParameters().setCorrelationId(correlationId);\n \n-                CommandResult commandResult = null;\n+                    EstsTelemetry.getInstance().initTelemetryForCommand(command);\n \n-                //Log operation parameters\n-                if (command.getParameters() instanceof SilentTokenCommandParameters) {\n-                    logSilentRequestParams(methodName, (SilentTokenCommandParameters) command.getParameters());\n-                    EstsTelemetry.getInstance().emitForceRefresh(((SilentTokenCommandParameters) command.getParameters()).isForceRefresh());\n-                }\n+                    EstsTelemetry.getInstance().emitApiId(command.getPublicApiId());\n \n-                //Check cache to see if the same command completed in the last 30 seconds\n-                commandResult = sCommandResultCache.get(command);\n+                    CommandResult commandResult = null;\n \n-                //If nothing in cache, execute the command and cache the result\n-                if (commandResult == null) {\n-                    commandResult = executeCommand(command);\n-                    cacheCommandResult(command, commandResult);\n-                } else {\n-                    Logger.info(\n-                            TAG + methodName,\n-                            \"Silent command result returned from cache.\"\n-                    );\n-                }\n+                    //Log operation parameters\n+                    if (command.getParameters() instanceof SilentTokenCommandParameters) {\n+                        logSilentRequestParams(methodName, (SilentTokenCommandParameters) command.getParameters());\n+                        EstsTelemetry.getInstance().emitForceRefresh(((SilentTokenCommandParameters) command.getParameters()).isForceRefresh());\n+                    }\n \n-                // set correlation id on Local Authentication Result\n-                setCorrelationIdOnResult(commandResult, correlationId);\n+                    //Check cache to see if the same command completed in the last 30 seconds\n+                    commandResult = sCommandResultCache.get(command);\n+\n+                    //If nothing in cache, execute the command and cache the result\n+                    if (commandResult == null) {\n+                        commandResult = executeCommand(command);\n+                        cacheCommandResult(command, commandResult);\n+                    } else {\n+                        Logger.info(\n+                                TAG + methodName,\n+                                \"Silent command result returned from cache.\"\n+                        );\n+                    }\n \n-                Telemetry.getInstance().flush(correlationId);\n-                EstsTelemetry.getInstance().flush(command, commandResult);\n+                    // set correlation id on Local Authentication Result\n+                    setCorrelationIdOnResult(commandResult, correlationId);\n \n-                //Return the result via the callback\n-                sExecutingCommandMap.remove(command).setResult(commandResult);\n+                    Telemetry.getInstance().flush(correlationId);\n+                    EstsTelemetry.getInstance().flush(command, commandResult);\n+                    finalFuture.setResult(commandResult);\n+                    //Return the result via the callback\n+                } catch (Throwable t) {\n+                    finalFuture.setException(new ExecutionException(t));\n+                } finally {\n+                    final ResultFuture mapFuture = sExecutingCommandMap.remove(command);\n+                    if (mapFuture == null) {\n+                        // If this has happened, the command that we started with has mutated.  We will", "originalCommit": "213855be64fce88ab7f09d920a34dbeb8cd93967", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI1MTY5NQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1055#discussion_r495251695", "bodyText": "If the object used as the key in the map is changed in such a way to cause it no longer to have the same value via equals/hashCode, then it will not be found in the map when we go to remove it.", "author": "AdamBJohnsonx", "createdAt": "2020-09-25T21:38:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI0OTk5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI1MTcyNw==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1055#discussion_r495251727", "bodyText": "(also makes me wonder if the command object itself it a good key here)", "author": "rpdome", "createdAt": "2020-09-25T21:38:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI0OTk5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI1MzY0MA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1055#discussion_r495253640", "bodyText": "We could generate a key from the command object and remove that worry, too. It would need to be a giant unique string.", "author": "AdamBJohnsonx", "createdAt": "2020-09-25T21:40:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI0OTk5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI1NjQ1OA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1055#discussion_r495256458", "bodyText": "Did we find anything (so far) within the command that could change during execution?", "author": "shahzaibj", "createdAt": "2020-09-25T21:45:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI0OTk5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI1NjkzMg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1055#discussion_r495256932", "bodyText": "That might be better, but I think that'll be big-ish and for now this fix should prevent NPE in the meantime. Let's put a todo here and create a tracking work item maybe?", "author": "rpdome", "createdAt": "2020-09-25T21:45:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI0OTk5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI1OTI0MA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1055#discussion_r495259240", "bodyText": "Did we find anything (so far) within the command that could change during execution?\n\nNothing obvious.  If you look at the other CR, I put a bunch of safe-copy in place where I found it, but the scope is huge.  The thing with this is that it should be safe even if we write bugs into it, and that's really best.\nEDIT: I guess it's all in here, too/", "author": "AdamBJohnsonx", "createdAt": "2020-09-25T21:49:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI0OTk5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI1OTY1Mg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1055#discussion_r495259652", "bodyText": "Yup, agreed!", "author": "shahzaibj", "createdAt": "2020-09-25T21:49:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI0OTk5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI2MTAyNQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1055#discussion_r495261025", "bodyText": "I'm actually going to wait on this until we have a unit test.  Brian and I are both trying to write some so there are more eyes on it.", "author": "AdamBJohnsonx", "createdAt": "2020-09-25T21:51:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI0OTk5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI2MTQzNg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1055#discussion_r495261436", "bodyText": "And if anybody else wants to play this game, more different viewpoints are better.", "author": "AdamBJohnsonx", "createdAt": "2020-09-25T21:52:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI0OTk5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTM1NDExMg==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1055#discussion_r495354112", "bodyText": "Brian and I have added some tests.  I've put the todo item in place.", "author": "AdamBJohnsonx", "createdAt": "2020-09-26T00:58:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI0OTk5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "892db3e5b54642945af6c1456c3e81a1a84c5373", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/controllers/CommandDispatcher.java b/common/src/main/java/com/microsoft/identity/common/internal/controllers/CommandDispatcher.java\nindex 68ff97c7e..02a15913a 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/controllers/CommandDispatcher.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/controllers/CommandDispatcher.java\n\n@@ -96,89 +115,88 @@ public class CommandDispatcher {\n         );\n \n         final Handler handler = new Handler(Looper.getMainLooper());\n-        ResultFuture<CommandResult> future = sExecutingCommandMap.get(command);\n-\n-        if (null == future) {\n-            future = new ResultFuture<>();\n-            final ResultFuture<CommandResult> putValue = sExecutingCommandMap.putIfAbsent(command, future);\n-\n-            if (null == putValue) {\n-                // our value was inserted.\n-                future.whenComplete(getCommandResultConsumer(command, handler));\n+        synchronized (mapAccessLock) {\n+            ResultFuture<CommandResult> future = sExecutingCommandMap.get(command);\n+\n+            if (null == future) {\n+                future = new ResultFuture<>();\n+                final ResultFuture<CommandResult> putValue = sExecutingCommandMap.putIfAbsent(command, future);\n+\n+                if (null == putValue) {\n+                    // our value was inserted.\n+                    future.whenComplete(getCommandResultConsumer(command, handler));\n+                } else {\n+                    // Our value was not inserted, grab the one that was and hang a new listener off it\n+                    putValue.whenComplete(getCommandResultConsumer(command, handler));\n+                    return;\n+                }\n             } else {\n-                // Our value was not inserted, grab the one that was and hang a new listener off it\n-                putValue.whenComplete(getCommandResultConsumer(command, handler));\n+                future.whenComplete(getCommandResultConsumer(command, handler));\n                 return;\n             }\n-        } else {\n-            future.whenComplete(getCommandResultConsumer(command, handler));\n-            return;\n-        }\n \n-        final ResultFuture<CommandResult> finalFuture = future;\n-\n-        sSilentExecutor.execute(new Runnable() {\n-            @Override\n-            public void run() {\n-                try {\n-                    final String correlationId = initializeDiagnosticContext(command.getParameters().getCorrelationId());\n+            final ResultFuture<CommandResult> finalFuture = future;\n \n-                    // set correlation id on parameters as it may not already be set\n-                    command.getParameters().setCorrelationId(correlationId);\n+            sSilentExecutor.execute(new Runnable() {\n+                @Override\n+                public void run() {\n+                    try {\n+                        final String correlationId = initializeDiagnosticContext(command.getParameters().getCorrelationId());\n \n-                    EstsTelemetry.getInstance().initTelemetryForCommand(command);\n+                        // set correlation id on parameters as it may not already be set\n+                        command.getParameters().setCorrelationId(correlationId);\n \n-                    EstsTelemetry.getInstance().emitApiId(command.getPublicApiId());\n+                        EstsTelemetry.getInstance().initTelemetryForCommand(command);\n \n-                    CommandResult commandResult = null;\n+                        EstsTelemetry.getInstance().emitApiId(command.getPublicApiId());\n \n-                    //Log operation parameters\n-                    if (command.getParameters() instanceof SilentTokenCommandParameters) {\n-                        logSilentRequestParams(methodName, (SilentTokenCommandParameters) command.getParameters());\n-                        EstsTelemetry.getInstance().emitForceRefresh(((SilentTokenCommandParameters) command.getParameters()).isForceRefresh());\n-                    }\n+                        CommandResult commandResult = null;\n \n-                    //Check cache to see if the same command completed in the last 30 seconds\n-                    commandResult = sCommandResultCache.get(command);\n-\n-                    //If nothing in cache, execute the command and cache the result\n-                    if (commandResult == null) {\n-                        commandResult = executeCommand(command);\n-                        cacheCommandResult(command, commandResult);\n-                    } else {\n-                        Logger.info(\n-                                TAG + methodName,\n-                                \"Silent command result returned from cache.\"\n-                        );\n-                    }\n+                        //Log operation parameters\n+                        if (command.getParameters() instanceof SilentTokenCommandParameters) {\n+                            logSilentRequestParams(methodName, (SilentTokenCommandParameters) command.getParameters());\n+                            EstsTelemetry.getInstance().emitForceRefresh(((SilentTokenCommandParameters) command.getParameters()).isForceRefresh());\n+                        }\n \n-                    // set correlation id on Local Authentication Result\n-                    setCorrelationIdOnResult(commandResult, correlationId);\n+                        //Check cache to see if the same command completed in the last 30 seconds\n+                        commandResult = sCommandResultCache.get(command);\n+\n+                        //If nothing in cache, execute the command and cache the result\n+                        if (commandResult == null) {\n+                            commandResult = executeCommand(command);\n+                            cacheCommandResult(command, commandResult);\n+                        } else {\n+                            Logger.info(\n+                                    TAG + methodName,\n+                                    \"Silent command result returned from cache.\"\n+                            );\n+                        }\n \n-                    Telemetry.getInstance().flush(correlationId);\n-                    EstsTelemetry.getInstance().flush(command, commandResult);\n-                    finalFuture.setResult(commandResult);\n-                    //Return the result via the callback\n-                } catch (Throwable t) {\n-                    finalFuture.setException(new ExecutionException(t));\n-                } finally {\n-                    final ResultFuture mapFuture = sExecutingCommandMap.remove(command);\n-                    if (mapFuture == null) {\n-                        // If this has happened, the command that we started with has mutated.  We will\n-                        // examine every entry in the map, find the one with the same object identity\n-                        // and remove it.\n-                        Logger.error(TAG, \"The command in the map has mutated \" + command.getClass().getCanonicalName()\n-                                + \" the calling application was \" + command.getParameters().getApplicationName(), null);\n-                        for (final Iterator<Map.Entry<BaseCommand, ResultFuture<CommandResult>>> itr = sExecutingCommandMap.entrySet().iterator(); itr.hasNext(); ) {\n-                            final Map.Entry<BaseCommand, ResultFuture<CommandResult>> e = itr.next();\n-                            if (command == e.getKey()) {\n-                                itr.remove();\n+                        // set correlation id on Local Authentication Result\n+                        setCorrelationIdOnResult(commandResult, correlationId);\n+\n+                        Telemetry.getInstance().flush(correlationId);\n+                        EstsTelemetry.getInstance().flush(command, commandResult);\n+                        finalFuture.setResult(commandResult);\n+                        //Return the result via the callback\n+                    } catch (final Throwable t) {\n+                        finalFuture.setException(new ExecutionException(t));\n+                    } finally {\n+                        synchronized (mapAccessLock) {\n+                            final ResultFuture mapFuture = sExecutingCommandMap.remove(command);\n+                            if (mapFuture == null) {\n+                                // If this has happened, the command that we started with has mutated.  We will\n+                                // examine every entry in the map, find the one with the same object identity\n+                                // and remove it.\n+                                Logger.error(TAG, \"The command in the map has mutated \" + command.getClass().getCanonicalName()\n+                                        + \" the calling application was \" + command.getParameters().getApplicationName(), null);\n+                                cleanMap(command);\n                             }\n                         }\n                     }\n                 }\n-            }\n-        });\n+            });\n+        }\n     }\n \n     private static BiConsumer<CommandResult, Throwable> getCommandResultConsumer(\n"}}, {"oid": "892db3e5b54642945af6c1456c3e81a1a84c5373", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/892db3e5b54642945af6c1456c3e81a1a84c5373", "message": "Fix the code for unstable keys.", "committedDate": "2020-09-26T00:40:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTM1MTM2NA==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1055#discussion_r495351364", "bodyText": "Can we javadoc why this function is required? Otherwise not apparent to those who didn't debug this \ud83d\ude04", "author": "iambmelt", "createdAt": "2020-09-26T00:52:03Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/controllers/CommandDispatcher.java", "diffHunk": "@@ -74,12 +78,31 @@\n     private static final Object sLock = new Object();\n     private static InteractiveTokenCommand sCommand = null;\n     private static final CommandResultCache sCommandResultCache = new CommandResultCache();\n+\n+    private static final Object mapAccessLock = new Object();\n+    @GuardedBy(\"mapAccessLock\")\n     // Suppressing rawtype warnings due to the generic type BaseCommand\n     @SuppressWarnings(WarningType.rawtype_warning)\n-    private static final ConcurrentMap<BaseCommand, ResultFuture<CommandResult>> sExecutingCommandMap = new ConcurrentHashMap<>();\n+    private static ConcurrentMap<BaseCommand, ResultFuture<CommandResult>> sExecutingCommandMap = new ConcurrentHashMap<>();\n+\n+    /**\n+     * MUST be executed under the mapAccessLock;\n+     * @param command\n+     */\n+    // Suppressing rawtype warnings due to the generic type BaseCommand\n+    @SuppressWarnings(WarningType.rawtype_warning)\n+    private static void cleanMap(BaseCommand command) {", "originalCommit": "1954af37c469f25f6d410101126778770624d06e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTM1MTkzOQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1055#discussion_r495351939", "bodyText": "6d73792", "author": "iambmelt", "createdAt": "2020-09-26T00:53:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTM1MTM2NA=="}], "type": "inlineReview", "revised_code": {"commit": "e1094edc51bb3b2ae702343102a2e1b06489c0e5", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/controllers/CommandDispatcher.java b/common/src/main/java/com/microsoft/identity/common/internal/controllers/CommandDispatcher.java\nindex 13dae1a9a..68ff97c7e 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/controllers/CommandDispatcher.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/controllers/CommandDispatcher.java\n\n@@ -78,28 +79,9 @@ public class CommandDispatcher {\n     private static final Object sLock = new Object();\n     private static InteractiveTokenCommand sCommand = null;\n     private static final CommandResultCache sCommandResultCache = new CommandResultCache();\n-\n-    private static final Object mapAccessLock = new Object();\n-    @GuardedBy(\"mapAccessLock\")\n-    // Suppressing rawtype warnings due to the generic type BaseCommand\n-    @SuppressWarnings(WarningType.rawtype_warning)\n-    private static ConcurrentMap<BaseCommand, ResultFuture<CommandResult>> sExecutingCommandMap = new ConcurrentHashMap<>();\n-\n-    /**\n-     * MUST be executed under the mapAccessLock;\n-     * @param command\n-     */\n     // Suppressing rawtype warnings due to the generic type BaseCommand\n     @SuppressWarnings(WarningType.rawtype_warning)\n-    private static void cleanMap(BaseCommand command) {\n-        ConcurrentMap<BaseCommand, ResultFuture<CommandResult>> newMap = new ConcurrentHashMap<>();\n-        for (Map.Entry<BaseCommand, ResultFuture<CommandResult>> e : sExecutingCommandMap.entrySet()) {\n-            if (command != e.getKey()) {\n-                newMap.put(e.getKey(), e.getValue());\n-            }\n-        }\n-        sExecutingCommandMap = newMap;\n-    }\n+    private static final ConcurrentMap<BaseCommand, ResultFuture<CommandResult>> sExecutingCommandMap = new ConcurrentHashMap<>();\n \n     /**\n      * submitSilent - Run a command using the silent thread pool.\n"}}, {"oid": "e1094edc51bb3b2ae702343102a2e1b06489c0e5", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/e1094edc51bb3b2ae702343102a2e1b06489c0e5", "message": "Become less dependent on the execution map\n\nIt is possible that the command objects are being mutated\nunderneath our execution.  If that is happening, it will\ncause three issues:\n * Null pointer exceptions when map.remove is run.\n * Command futures will never complete.\n * The execution map will fill unboundedly.\n\nIn order to fix this, insure that the resultFuture is\ncompleted in every case.  In addition, save the identity\nof the command that initiated the call, and if removal fails,\nindicating that the command has been mutated and its hash has\naltered, scan the map for a command with the same identity\nand remove it.", "committedDate": "2020-09-26T04:42:43Z", "type": "commit"}, {"oid": "07b5f39714f0983b8b0a9af9cb3fd50d457b4610", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/07b5f39714f0983b8b0a9af9cb3fd50d457b4610", "message": "Stubbing out instrumented test", "committedDate": "2020-09-26T04:42:43Z", "type": "commit"}, {"oid": "e145a11a718f970361eda3078ad67944a5668836", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/e145a11a718f970361eda3078ad67944a5668836", "message": "Parameterize the test command", "committedDate": "2020-09-26T04:42:43Z", "type": "commit"}, {"oid": "c24f36760b5677059fe19752d93da8b5cc7b8fd3", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/c24f36760b5677059fe19752d93da8b5cc7b8fd3", "message": "Adding test stubs", "committedDate": "2020-09-26T04:42:43Z", "type": "commit"}, {"oid": "674fee7de768331efe2abc292a71046db07182b9", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/674fee7de768331efe2abc292a71046db07182b9", "message": "One fix that I recall, some test descriptions.", "committedDate": "2020-09-26T04:42:43Z", "type": "commit"}, {"oid": "5369e713c63007c8fc2a16090f9b7df9bb8f9b39", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/5369e713c63007c8fc2a16090f9b7df9bb8f9b39", "message": "Add a value to testcommand.", "committedDate": "2020-09-26T04:42:43Z", "type": "commit"}, {"oid": "b52ede41dc338c885a48d1fad8f7726d98a44a24", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/b52ede41dc338c885a48d1fad8f7726d98a44a24", "message": "Latched command for stalling execution.", "committedDate": "2020-09-26T04:42:43Z", "type": "commit"}, {"oid": "a926f566c93799ef6e5ecad02e97f65c6e84c557", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/a926f566c93799ef6e5ecad02e97f65c6e84c557", "message": "Minor formatting", "committedDate": "2020-09-26T04:42:43Z", "type": "commit"}, {"oid": "d26372702bc7037c3c5781a39a50b525e4e5edf3", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/d26372702bc7037c3c5781a39a50b525e4e5edf3", "message": "Fix the code for unstable keys.", "committedDate": "2020-09-26T04:42:43Z", "type": "commit"}, {"oid": "225d4994468eef4c4f4a309b9fdfa497af60c9bd", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/225d4994468eef4c4f4a309b9fdfa497af60c9bd", "message": "Change to foreach loop style.", "committedDate": "2020-09-26T04:42:44Z", "type": "commit"}, {"oid": "29f3658aea49a7e3994060d38af59cd641d082ca", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/29f3658aea49a7e3994060d38af59cd641d082ca", "message": "Add a better comment explaining cleanMap..", "committedDate": "2020-09-26T04:42:44Z", "type": "commit"}, {"oid": "9cf01f4eba7e03be0a42049ffed3e1c948ffac0c", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/9cf01f4eba7e03be0a42049ffed3e1c948ffac0c", "message": "Add TODO with link to work item.", "committedDate": "2020-09-26T04:42:44Z", "type": "commit"}, {"oid": "6a820328848bf2b7a413ad9d772949f82208485d", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/6a820328848bf2b7a413ad9d772949f82208485d", "message": "Access the map size for the test method under the map lock.", "committedDate": "2020-09-26T04:42:44Z", "type": "commit"}, {"oid": "feb7a701310603e9ce7c882906be9c32ef5ea2ec", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/feb7a701310603e9ce7c882906be9c32ef5ea2ec", "message": "Add a new type of future to indicate whether a task has been compltely retired.", "committedDate": "2020-09-26T04:42:44Z", "type": "commit"}, {"oid": "43bc2da12bd63112b46f4909f2b049ffa2346257", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/43bc2da12bd63112b46f4909f2b049ffa2346257", "message": "Add the FinalizableResultFuture class.", "committedDate": "2020-09-26T04:42:44Z", "type": "commit"}, {"oid": "0ca14fbc3acec8cae53966268a6aff7e4a9fe51c", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/0ca14fbc3acec8cae53966268a6aff7e4a9fe51c", "message": "Fix deadlock due to careless synchronization.", "committedDate": "2020-09-26T04:42:44Z", "type": "commit"}, {"oid": "0ca14fbc3acec8cae53966268a6aff7e4a9fe51c", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/0ca14fbc3acec8cae53966268a6aff7e4a9fe51c", "message": "Fix deadlock due to careless synchronization.", "committedDate": "2020-09-26T04:42:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxNDU3OQ==", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/pull/1055#discussion_r495414579", "bodyText": "Suggested change", "author": "AdamBJohnsonx", "createdAt": "2020-09-26T04:45:24Z", "path": "common/src/main/java/com/microsoft/identity/common/internal/result/ResultFuture.java", "diffHunk": "@@ -129,4 +129,5 @@ public synchronized void whenComplete(@NonNull final BiConsumer<T, Throwable> co\n \n         mConsumers.add(consumerToAdd);\n     }\n+", "originalCommit": "0ca14fbc3acec8cae53966268a6aff7e4a9fe51c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d33af71da8ff0bd515fc1eea7bf96d6896294901", "chunk": "diff --git a/common/src/main/java/com/microsoft/identity/common/internal/result/ResultFuture.java b/common/src/main/java/com/microsoft/identity/common/internal/result/ResultFuture.java\nindex bb3b459ee..42a538988 100644\n--- a/common/src/main/java/com/microsoft/identity/common/internal/result/ResultFuture.java\n+++ b/common/src/main/java/com/microsoft/identity/common/internal/result/ResultFuture.java\n\n@@ -129,5 +129,4 @@ public class ResultFuture<T> implements Future<T> {\n \n         mConsumers.add(consumerToAdd);\n     }\n-\n }\n"}}, {"oid": "d33af71da8ff0bd515fc1eea7bf96d6896294901", "url": "https://github.com/AzureAD/microsoft-authentication-library-common-for-android/commit/d33af71da8ff0bd515fc1eea7bf96d6896294901", "message": "Update common/src/main/java/com/microsoft/identity/common/internal/result/ResultFuture.java\r\n\r\nDelete blank line.", "committedDate": "2020-09-26T04:45:42Z", "type": "commit"}]}