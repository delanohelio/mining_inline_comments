{"pr_number": 6869, "pr_title": "Merge Stitch and Realm SDKs - 4: remote collection update- and findOneAnd-", "pr_createdAt": "2020-05-20T13:31:02Z", "pr_url": "https://github.com/realm/realm-java/pull/6869", "timeline": [{"oid": "4311dbfe5ddc7ef7d0c22e256a9a6f0093c3c265", "url": "https://github.com/realm/realm-java/commit/4311dbfe5ddc7ef7d0c22e256a9a6f0093c3c265", "message": "First iteration: added GMS library (possibly temporarily) to avoid introducing immediate breaking changes in how we process asynchronous operations with AsyncRealmTask. All original Stitch interfaces and proxies have been discarded in favour of Java classes (although this approach might be changed). Some interfaces connected to the collection's iterables have been omitted as it is unclear whether they will be needed or not for the time being.", "committedDate": "2020-04-16T12:48:37Z", "type": "commit"}, {"oid": "12a6ea4ce101c9448d84ec1793f93457cf22a48a", "url": "https://github.com/realm/realm-java/commit/12a6ea4ce101c9448d84ec1793f93457cf22a48a", "message": "Added licences to class headers plus a bit of cleanup", "committedDate": "2020-04-17T11:20:56Z", "type": "commit"}, {"oid": "9d69273176733c69855147230e841597a5e33ee1", "url": "https://github.com/realm/realm-java/commit/9d69273176733c69855147230e841597a5e33ee1", "message": "Added latest API methods and necessary classes", "committedDate": "2020-04-17T13:35:47Z", "type": "commit"}, {"oid": "11dcd85ade762ec524a4adf5cb7ffd22f1c8ae0b", "url": "https://github.com/realm/realm-java/commit/11dcd85ade762ec524a4adf5cb7ffd22f1c8ae0b", "message": "Added remote mongo client and remote database, their respective Os files and part of the native logic", "committedDate": "2020-04-24T12:24:06Z", "type": "commit"}, {"oid": "c6c92e992267d693e9916e7a82c886f2eac4bf6b", "url": "https://github.com/realm/realm-java/commit/c6c92e992267d693e9916e7a82c886f2eac4bf6b", "message": "Moved JNI callbacks outside RealmApp and added more remote collection classes", "committedDate": "2020-04-27T13:27:41Z", "type": "commit"}, {"oid": "f09c10397bd271a6b9e757ae5e2074c313f88ef3", "url": "https://github.com/realm/realm-java/commit/f09c10397bd271a6b9e757ae5e2074c313f88ef3", "message": "Updated object store branch to v10 and fixed wrong use of count call", "committedDate": "2020-04-27T14:33:15Z", "type": "commit"}, {"oid": "a3988dee91afd1aea6d692d768b691265c3d41d2", "url": "https://github.com/realm/realm-java/commit/a3988dee91afd1aea6d692d768b691265c3d41d2", "message": "Merge branch 'el/remote-mongodb-client' into el/remote-mongodb-client-scaffold\n\n# Conflicts:\n#\trealm/realm-library/src/main/cpp/object-store\n#\trealm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "committedDate": "2020-04-28T09:58:09Z", "type": "commit"}, {"oid": "c3936bf7734d617ae9f313d360b6af9a4f7d5e1d", "url": "https://github.com/realm/realm-java/commit/c3936bf7734d617ae9f313d360b6af9a4f7d5e1d", "message": "Cleanup", "committedDate": "2020-04-28T10:04:46Z", "type": "commit"}, {"oid": "a10c2ee24b1e4868c44c4a7d130f2d300c60cc68", "url": "https://github.com/realm/realm-java/commit/a10c2ee24b1e4868c44c4a7d130f2d300c60cc68", "message": "Added task-related classes from Stitch", "committedDate": "2020-04-28T14:09:45Z", "type": "commit"}, {"oid": "1c2933f6aea4bd2bae967bda5f397e01cec71827", "url": "https://github.com/realm/realm-java/commit/1c2933f6aea4bd2bae967bda5f397e01cec71827", "message": "First steps towards using tasks for the count operation", "committedDate": "2020-04-28T14:15:10Z", "type": "commit"}, {"oid": "082070dd755f28baa1075eef2aeb655a2c087f90", "url": "https://github.com/realm/realm-java/commit/082070dd755f28baa1075eef2aeb655a2c087f90", "message": "Added preliminary collection test, only with scaffolding for \"count\", but still not working as the OS code isn't fully ready yet. Moved Realm initialisation in test cases outside TestRealmApp to setUp method as agreed internally, plus fixed some wrong implementation in the interop layer. Also updated dependencies list to fetch sync version 10 alpha 9 instead of 8.", "committedDate": "2020-05-01T12:06:02Z", "type": "commit"}, {"oid": "0d1b58cc5c0c067b2c1afb0331b6633ff11b8593", "url": "https://github.com/realm/realm-java/commit/0d1b58cc5c0c067b2c1afb0331b6633ff11b8593", "message": "Fixed wrong finalizer methods and cleanup to interop files", "committedDate": "2020-05-01T12:17:52Z", "type": "commit"}, {"oid": "ecc7963da89e24dd128f4723b144a7a0a4aa2f0f", "url": "https://github.com/realm/realm-java/commit/ecc7963da89e24dd128f4723b144a7a0a4aa2f0f", "message": "Merge branch 'el/remote-mongodb-client-scaffold' into el/remote-mongodb-client-gms-tasks", "committedDate": "2020-05-01T12:30:03Z", "type": "commit"}, {"oid": "540bdf5b6d5a9a5c96a80d08d3592cccf19de756", "url": "https://github.com/realm/realm-java/commit/540bdf5b6d5a9a5c96a80d08d3592cccf19de756", "message": "Merge branch 'el/remote-mongodb-client-gms-tasks' into el/remote-mongodb-client-collection-count", "committedDate": "2020-05-01T12:33:07Z", "type": "commit"}, {"oid": "a184dc7026c12bd8a296a7d885f0e3d53a2369dc", "url": "https://github.com/realm/realm-java/commit/a184dc7026c12bd8a296a7d885f0e3d53a2369dc", "message": "Moved TaskUtils to tests", "committedDate": "2020-05-01T12:58:27Z", "type": "commit"}, {"oid": "c8d8574e3016fa72fe6beabcf025600b3725e9d7", "url": "https://github.com/realm/realm-java/commit/c8d8574e3016fa72fe6beabcf025600b3725e9d7", "message": "test", "committedDate": "2020-05-01T13:06:53Z", "type": "commit"}, {"oid": "f347df54dc6d792b70cb39a006a01346ee4c7665", "url": "https://github.com/realm/realm-java/commit/f347df54dc6d792b70cb39a006a01346ee4c7665", "message": "cleanup", "committedDate": "2020-05-01T13:07:23Z", "type": "commit"}, {"oid": "55416d01adab692b3c258c8555cf2dd1d4435815", "url": "https://github.com/realm/realm-java/commit/55416d01adab692b3c258c8555cf2dd1d4435815", "message": "Moved classes", "committedDate": "2020-05-01T16:19:57Z", "type": "commit"}, {"oid": "df8f51161bc9b2a13bf70c3d07392c1e7086fdb6", "url": "https://github.com/realm/realm-java/commit/df8f51161bc9b2a13bf70c3d07392c1e7086fdb6", "message": "Merge branch 'v10' into el/remote-mongodb-client-gms-tasks\n\n# Conflicts:\n#\trealm/realm-library/build.gradle\n#\trealm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsRemoteMongoClient.cpp\n#\trealm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsRemoteMongoCollection.cpp\n#\trealm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsRemoteMongoDatabase.cpp\n#\trealm/realm-library/src/main/cpp/object-store\n#\trealm/realm-library/src/objectServer/java/io/realm/RealmUser.java\n#\trealm/realm-library/src/objectServer/java/io/realm/internal/common/AsyncAdapter.java\n#\trealm/realm-library/src/objectServer/java/io/realm/internal/common/Callback.java\n#\trealm/realm-library/src/objectServer/java/io/realm/internal/common/CallbackAsyncAdapter.java\n#\trealm/realm-library/src/objectServer/java/io/realm/internal/jni/OsJNIVoidResultCallback.java\n#\trealm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsRemoteMongoClient.java\n#\trealm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsRemoteMongoCollection.java\n#\trealm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsRemoteMongoDatabase.java\n#\trealm/realm-library/src/objectServer/java/io/realm/mongodb/MongoNamespace.java\n#\trealm/realm-library/src/objectServer/java/io/realm/mongodb/RealmMongoDBCollection.java\n#\trealm/realm-library/src/objectServer/java/io/realm/mongodb/RealmMongoDBDatabase.java\n#\trealm/realm-library/src/objectServer/java/io/realm/mongodb/RealmMongoDBService.java\n#\trealm/realm-library/src/objectServer/java/io/realm/mongodb/RemoteMongoClient.java\n#\trealm/realm-library/src/objectServer/java/io/realm/mongodb/RemoteMongoCollection.java\n#\trealm/realm-library/src/objectServer/java/io/realm/mongodb/RemoteMongoDatabase.java\n#\trealm/realm-library/src/objectServer/java/io/realm/mongodb/remote/RemoteDeleteResult.java\n#\trealm/realm-library/src/objectServer/java/io/realm/mongodb/remote/aggregate/RemoteAggregateIterable.java", "committedDate": "2020-05-01T16:31:00Z", "type": "commit"}, {"oid": "ae9950ea40c4850eb94c2ab104f37a783977f3b1", "url": "https://github.com/realm/realm-java/commit/ae9950ea40c4850eb94c2ab104f37a783977f3b1", "message": "Updated OS pointer", "committedDate": "2020-05-01T16:43:21Z", "type": "commit"}, {"oid": "b96e4b1a9e279c7f1e31ea352ac5ff914e7915a6", "url": "https://github.com/realm/realm-java/commit/b96e4b1a9e279c7f1e31ea352ac5ff914e7915a6", "message": "Moved classes", "committedDate": "2020-05-01T16:46:23Z", "type": "commit"}, {"oid": "a12be02fce6e3eca375b67b08580e985d70744cd", "url": "https://github.com/realm/realm-java/commit/a12be02fce6e3eca375b67b08580e985d70744cd", "message": "Merge branch 'el/remote-mongodb-client-gms-tasks' into el/remote-mongodb-client-collection-count\n\n# Conflicts:\n#\tdependencies.list\n#\trealm/realm-library/src/main/cpp/object-store\n#\trealm/realm-library/src/objectServer/java/io/realm/RealmUser.java\n#\trealm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsRemoteMongoCollection.java", "committedDate": "2020-05-01T16:50:23Z", "type": "commit"}, {"oid": "7695d14936b5bcb8f7b24ac465554042bed9f3ae", "url": "https://github.com/realm/realm-java/commit/7695d14936b5bcb8f7b24ac465554042bed9f3ae", "message": "Removed duplicate entries in CMakeLists", "committedDate": "2020-05-01T16:53:21Z", "type": "commit"}, {"oid": "81bfca1053ff6daf554c2fbc751a54a104df68d3", "url": "https://github.com/realm/realm-java/commit/81bfca1053ff6daf554c2fbc751a54a104df68d3", "message": "Merge branch 'el/remote-mongodb-client-gms-tasks' into el/remote-mongodb-client-collection-count", "committedDate": "2020-05-01T16:53:39Z", "type": "commit"}, {"oid": "51f5c649456a181b5249828a447228c33c8ff176", "url": "https://github.com/realm/realm-java/commit/51f5c649456a181b5249828a447228c33c8ff176", "message": "Added documentClass property to internal collection class", "committedDate": "2020-05-04T08:29:57Z", "type": "commit"}, {"oid": "9187479f2565e28561c06f1ee79cece5c5f225f6", "url": "https://github.com/realm/realm-java/commit/9187479f2565e28561c06f1ee79cece5c5f225f6", "message": "Merge branch 'v10' into el/remote-mongodb-client-collection-count", "committedDate": "2020-05-04T08:38:37Z", "type": "commit"}, {"oid": "0ea57d11adc2f94db41f5defe53e4ad8438d4ed3", "url": "https://github.com/realm/realm-java/commit/0ea57d11adc2f94db41f5defe53e4ad8438d4ed3", "message": "updated OS pointer", "committedDate": "2020-05-04T08:39:05Z", "type": "commit"}, {"oid": "7ef4c7a8bfbd33215a7b5158b349dceb550516d2", "url": "https://github.com/realm/realm-java/commit/7ef4c7a8bfbd33215a7b5158b349dceb550516d2", "message": "Merge branch 'v10' into el/remote-mongodb-client-collection-count", "committedDate": "2020-05-04T09:36:53Z", "type": "commit"}, {"oid": "d47441a087d4264f632b57613eb22190e53a0149", "url": "https://github.com/realm/realm-java/commit/d47441a087d4264f632b57613eb22190e53a0149", "message": "Merge branch 'v10' into el/remote-mongodb-client-gms-tasks", "committedDate": "2020-05-04T12:35:18Z", "type": "commit"}, {"oid": "7918f41d494d4d95840a545ef927a3917bee7414", "url": "https://github.com/realm/realm-java/commit/7918f41d494d4d95840a545ef927a3917bee7414", "message": "Merge branch 'el/remote-mongodb-client-gms-tasks' into el/remote-mongodb-client-collection-count", "committedDate": "2020-05-04T12:44:12Z", "type": "commit"}, {"oid": "30aba6dcffafc164c2f02cf332e499b7a91d6de2", "url": "https://github.com/realm/realm-java/commit/30aba6dcffafc164c2f02cf332e499b7a91d6de2", "message": "updated OS pointer", "committedDate": "2020-05-04T12:44:50Z", "type": "commit"}, {"oid": "417b7cbe0e7c36ae2a89413b2d7aecb1c3521979", "url": "https://github.com/realm/realm-java/commit/417b7cbe0e7c36ae2a89413b2d7aecb1c3521979", "message": "added suppresswarnings for ignored futures - issue inherited from Stitch's task framework - test to see if Jenkins swallows it", "committedDate": "2020-05-04T16:49:31Z", "type": "commit"}, {"oid": "47f96ebb5e652c0cf18cc9e9e73ef35860f8bfa6", "url": "https://github.com/realm/realm-java/commit/47f96ebb5e652c0cf18cc9e9e73ef35860f8bfa6", "message": "Merge branch 'el/remote-mongodb-client-gms-tasks' into el/remote-mongodb-client-collection-count", "committedDate": "2020-05-05T07:11:41Z", "type": "commit"}, {"oid": "d71835a06bfc864b3f031f60c3bde42ca509c251", "url": "https://github.com/realm/realm-java/commit/d71835a06bfc864b3f031f60c3bde42ca509c251", "message": "wip", "committedDate": "2020-05-05T07:11:49Z", "type": "commit"}, {"oid": "bc45ce48350914fcae97eb4c48b120e0fc5788df", "url": "https://github.com/realm/realm-java/commit/bc45ce48350914fcae97eb4c48b120e0fc5788df", "message": "Added test for Task.blockingGet and wip on insertOne", "committedDate": "2020-05-05T10:55:57Z", "type": "commit"}, {"oid": "0f673e499070a9c32e4906ddb61dd5556f9c040e", "url": "https://github.com/realm/realm-java/commit/0f673e499070a9c32e4906ddb61dd5556f9c040e", "message": "Added insertmany", "committedDate": "2020-05-05T12:01:48Z", "type": "commit"}, {"oid": "35195b752bb70cae7653f466e33470150ab57a5c", "url": "https://github.com/realm/realm-java/commit/35195b752bb70cae7653f466e33470150ab57a5c", "message": "Merge branch 'v10' into el/remote-mongodb-client-collection-insert-one", "committedDate": "2020-05-05T13:14:20Z", "type": "commit"}, {"oid": "fb4d199c46f16b828ae8f4d5aa67a02e170c28e3", "url": "https://github.com/realm/realm-java/commit/fb4d199c46f16b828ae8f4d5aa67a02e170c28e3", "message": "Merge branch 'v10' into el/remote-mongodb-client-collection-insert-one\n\n# Conflicts:\n#\trealm/realm-library/src/objectServer/java/io/realm/internal/common/ThreadDispatcher.java", "committedDate": "2020-05-06T08:02:52Z", "type": "commit"}, {"oid": "e7677cf35902f1bf5323dfcffcbcb1b48c233eb1", "url": "https://github.com/realm/realm-java/commit/e7677cf35902f1bf5323dfcffcbcb1b48c233eb1", "message": "Added more meaningful tests for count and insert. Temporarily commented out some code in EmailPasswordAuth.cpp after updating OS to v10. Now the remoteMongoClient is fetched as a shared_ptr in our interop layer. Added codec handling for RemoteMongoDatabase and document class for RemoteMongoCollection", "committedDate": "2020-05-07T15:12:19Z", "type": "commit"}, {"oid": "224276f08a4dabb05f64c6fa2cc05ec6282b4a66", "url": "https://github.com/realm/realm-java/commit/224276f08a4dabb05f64c6fa2cc05ec6282b4a66", "message": "Work in progress - insertMany and interop", "committedDate": "2020-05-08T15:12:58Z", "type": "commit"}, {"oid": "136387f30adc886a5686a7108df0a46d6a8dab89", "url": "https://github.com/realm/realm-java/commit/136387f30adc886a5686a7108df0a46d6a8dab89", "message": "Added deleteOne", "committedDate": "2020-05-08T16:58:24Z", "type": "commit"}, {"oid": "f24af3dd2dda132fe86c1fbc7ca525c1b1593869", "url": "https://github.com/realm/realm-java/commit/f24af3dd2dda132fe86c1fbc7ca525c1b1593869", "message": "Added deleteMany and adjusted visibility of OS constructors", "committedDate": "2020-05-08T21:50:52Z", "type": "commit"}, {"oid": "c39ac1167251cb98ab3d36e164ad870829794ffa", "url": "https://github.com/realm/realm-java/commit/c39ac1167251cb98ab3d36e164ad870829794ffa", "message": "wip", "committedDate": "2020-05-08T22:15:33Z", "type": "commit"}, {"oid": "9978855ef3f4c4817daccf7d287e8961337586d5", "url": "https://github.com/realm/realm-java/commit/9978855ef3f4c4817daccf7d287e8961337586d5", "message": "Merge branch 'v10' into el/remote-mongodb-client-collection-insert-one\n\n# Conflicts:\n#\trealm/realm-library/src/main/cpp/io_realm_EmailPasswordAuth.cpp\n#\trealm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsRemoteMongoCollection.cpp\n#\trealm/realm-library/src/main/cpp/jni_util/bson_util.cpp\n#\trealm/realm-library/src/main/cpp/jni_util/bson_util.hpp\n#\trealm/realm-library/src/objectServer/java/io/realm/EmailPasswordAuth.java\n#\trealm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java", "committedDate": "2020-05-11T10:00:33Z", "type": "commit"}, {"oid": "650169f3a2630dca8d8e6504891685209fbcb034", "url": "https://github.com/realm/realm-java/commit/650169f3a2630dca8d8e6504891685209fbcb034", "message": "Updated pointer to OS", "committedDate": "2020-05-11T10:01:06Z", "type": "commit"}, {"oid": "8e3b991bf188d689871862df7e704d27dbfa0f69", "url": "https://github.com/realm/realm-java/commit/8e3b991bf188d689871862df7e704d27dbfa0f69", "message": "Restored curly braces", "committedDate": "2020-05-11T10:03:27Z", "type": "commit"}, {"oid": "68c098ea7b200fbaebfbfd4f6400c64f7199d544", "url": "https://github.com/realm/realm-java/commit/68c098ea7b200fbaebfbfd4f6400c64f7199d544", "message": "Merge branch 'v10' into el/remote-mongodb-client-collection-insert-one", "committedDate": "2020-05-11T10:03:54Z", "type": "commit"}, {"oid": "62f29e92c38f89ae720d51d04eaa1a177732bc2e", "url": "https://github.com/realm/realm-java/commit/62f29e92c38f89ae720d51d04eaa1a177732bc2e", "message": "Removed unnecessary codec parameter in getDatabase", "committedDate": "2020-05-11T10:09:16Z", "type": "commit"}, {"oid": "5d2fe8b25c1d36be50b3dcc2efdd90c24fb9c047", "url": "https://github.com/realm/realm-java/commit/5d2fe8b25c1d36be50b3dcc2efdd90c24fb9c047", "message": "Added findOne and proper use of the BSON parsing protocol for handling, delivering and decoding results from the JNI", "committedDate": "2020-05-13T10:41:21Z", "type": "commit"}, {"oid": "e03e8d389075223c8b2b466fdf28f0238e2abb1c", "url": "https://github.com/realm/realm-java/commit/e03e8d389075223c8b2b466fdf28f0238e2abb1c", "message": "Updated OS pointer to branch that contains parsing fixes - update to OS v10 as soon as it is merged", "committedDate": "2020-05-13T10:41:50Z", "type": "commit"}, {"oid": "783dc6d7f474355fde2dde87433058034190f55e", "url": "https://github.com/realm/realm-java/commit/783dc6d7f474355fde2dde87433058034190f55e", "message": "Merge branch 'v10' into el/remote-mongodb-client-collection-insert-one", "committedDate": "2020-05-13T10:43:09Z", "type": "commit"}, {"oid": "1b443d7a877a5f6d5e09605235d50be9e34dd9d1", "url": "https://github.com/realm/realm-java/commit/1b443d7a877a5f6d5e09605235d50be9e34dd9d1", "message": "Added missing findOne implementations and updated OS pointer", "committedDate": "2020-05-13T16:23:17Z", "type": "commit"}, {"oid": "46eaaa91a8b4c8f07972e489c0904f199cc1401e", "url": "https://github.com/realm/realm-java/commit/46eaaa91a8b4c8f07972e489c0904f199cc1401e", "message": "fixed unboxing that caused findbugs to complain", "committedDate": "2020-05-14T06:32:45Z", "type": "commit"}, {"oid": "bb2d17318bbd967a99b8897e554d278f1c74b7ce", "url": "https://github.com/realm/realm-java/commit/bb2d17318bbd967a99b8897e554d278f1c74b7ce", "message": "First batch of cleanup", "committedDate": "2020-05-14T13:21:09Z", "type": "commit"}, {"oid": "22ae2589de45f2f5d0682dd177de9c11c53162fc", "url": "https://github.com/realm/realm-java/commit/22ae2589de45f2f5d0682dd177de9c11c53162fc", "message": "Merge branch 'v10' into el/remote-mongodb-client-collection-insert-one", "committedDate": "2020-05-14T13:22:13Z", "type": "commit"}, {"oid": "d59fba6b51796079fa95a2f924db710044e9de84", "url": "https://github.com/realm/realm-java/commit/d59fba6b51796079fa95a2f924db710044e9de84", "message": "Addressed error handling in interop layer plus more cleanup", "committedDate": "2020-05-14T16:07:42Z", "type": "commit"}, {"oid": "e8872a980a551fd773ec9aeabe246a423f2ffa7e", "url": "https://github.com/realm/realm-java/commit/e8872a980a551fd773ec9aeabe246a423f2ffa7e", "message": "Moved classes to new packages and removed \"remote\" prefix from class names", "committedDate": "2020-05-14T16:56:05Z", "type": "commit"}, {"oid": "6bd91b647bf817ff8bb4a13627bde9b8262fed23", "url": "https://github.com/realm/realm-java/commit/6bd91b647bf817ff8bb4a13627bde9b8262fed23", "message": "Restored wrongly removed public modifier to method", "committedDate": "2020-05-14T17:03:48Z", "type": "commit"}, {"oid": "0d7c5907386577dc8439438af12b453f083ca8ff", "url": "https://github.com/realm/realm-java/commit/0d7c5907386577dc8439438af12b453f083ca8ff", "message": "Renamed OS interop classes", "committedDate": "2020-05-14T17:14:36Z", "type": "commit"}, {"oid": "2266cd0e20e00a932b1190432e5cfc18919a9f20", "url": "https://github.com/realm/realm-java/commit/2266cd0e20e00a932b1190432e5cfc18919a9f20", "message": "Cleanup", "committedDate": "2020-05-15T09:10:09Z", "type": "commit"}, {"oid": "89cb56acffdd8867c27a7c3836d76bffd3e6a8bc", "url": "https://github.com/realm/realm-java/commit/89cb56acffdd8867c27a7c3836d76bffd3e6a8bc", "message": "Final round of cleanup and updated pointer to OS that allegedly fixes failing stress test", "committedDate": "2020-05-15T11:04:34Z", "type": "commit"}, {"oid": "3be7dadd3882307ff18523ab821efe046a17e305", "url": "https://github.com/realm/realm-java/commit/3be7dadd3882307ff18523ab821efe046a17e305", "message": "Merge branch 'v10' into el/remote-mongodb-client-collection-insert-one", "committedDate": "2020-05-15T14:02:04Z", "type": "commit"}, {"oid": "ef991caf20c61dfbf64bda99553a144782783acf", "url": "https://github.com/realm/realm-java/commit/ef991caf20c61dfbf64bda99553a144782783acf", "message": "Merge branch 'v10' into el/remote-mongodb-client-collection-insert-one", "committedDate": "2020-05-15T18:10:48Z", "type": "commit"}, {"oid": "e82a72f4970f4a2a593d386e69ea2815d3732c02", "url": "https://github.com/realm/realm-java/commit/e82a72f4970f4a2a593d386e69ea2815d3732c02", "message": "Fixed broken tests", "committedDate": "2020-05-15T18:54:57Z", "type": "commit"}, {"oid": "2fb6cf997cb7e305e04419f3c67f66692374cb48", "url": "https://github.com/realm/realm-java/commit/2fb6cf997cb7e305e04419f3c67f66692374cb48", "message": "Added updateOne", "committedDate": "2020-05-15T18:55:05Z", "type": "commit"}, {"oid": "8ff048edba1f8605ff0f5ae1b13c35dabf282279", "url": "https://github.com/realm/realm-java/commit/8ff048edba1f8605ff0f5ae1b13c35dabf282279", "message": "Merge branch 'v10' into el/remote-mongodb-client-collection-update\n\n# Conflicts:\n#\trealm/realm-library/src/androidTestObjectServer/kotlin/io/realm/mongodb/MongoCollectionTest.kt\n#\trealm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsMongoCollection.cpp\n#\trealm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsMongoCollection.java\n#\trealm/realm-library/src/objectServer/java/io/realm/mongodb/mongo/MongoCollection.java", "committedDate": "2020-05-18T07:59:54Z", "type": "commit"}, {"oid": "5d11442b2a8ceee5da6ba745e6acba324776ef3a", "url": "https://github.com/realm/realm-java/commit/5d11442b2a8ceee5da6ba745e6acba324776ef3a", "message": "Renamed missing \"remote\" options and remote classes and added updateMany", "committedDate": "2020-05-18T12:55:32Z", "type": "commit"}, {"oid": "683db0d7706239f753cc3d4d5d0a96075648452c", "url": "https://github.com/realm/realm-java/commit/683db0d7706239f753cc3d4d5d0a96075648452c", "message": "Added findOneAndUpdate", "committedDate": "2020-05-18T13:57:20Z", "type": "commit"}, {"oid": "244510322e6ebf57a339f930a2defc328d169052", "url": "https://github.com/realm/realm-java/commit/244510322e6ebf57a339f930a2defc328d169052", "message": "Added another findOneAndUpdate variant", "committedDate": "2020-05-18T20:59:17Z", "type": "commit"}, {"oid": "1b147e92f33ce054a69191ec6e41f34dcc29ec3f", "url": "https://github.com/realm/realm-java/commit/1b147e92f33ce054a69191ec6e41f34dcc29ec3f", "message": "Removed duplicated code and added findOneAndReplace and Delete variants", "committedDate": "2020-05-19T07:28:23Z", "type": "commit"}, {"oid": "6662cfb226c5faf7a4e1e4958a7898fc11ea2b0b", "url": "https://github.com/realm/realm-java/commit/6662cfb226c5faf7a4e1e4958a7898fc11ea2b0b", "message": "Merge branch 'v10' into el/remote-mongodb-client-collection-update", "committedDate": "2020-05-19T07:29:49Z", "type": "commit"}, {"oid": "6355b0558624a849fc3d06ccf6d7ea6bf894cb2f", "url": "https://github.com/realm/realm-java/commit/6355b0558624a849fc3d06ccf6d7ea6bf894cb2f", "message": "Updated OS pointer", "committedDate": "2020-05-19T08:10:37Z", "type": "commit"}, {"oid": "ab17e182c25491df674bb8d3985ff8153696fd6c", "url": "https://github.com/realm/realm-java/commit/ab17e182c25491df674bb8d3985ff8153696fd6c", "message": "Reverted OS pointer", "committedDate": "2020-05-19T16:55:05Z", "type": "commit"}, {"oid": "55a8089cb69a6b515e894df5998082aed52b5344", "url": "https://github.com/realm/realm-java/commit/55a8089cb69a6b515e894df5998082aed52b5344", "message": "Added find", "committedDate": "2020-05-20T10:01:58Z", "type": "commit"}, {"oid": "88f24f2fb25d5de14d81824d95210aa380e4e912", "url": "https://github.com/realm/realm-java/commit/88f24f2fb25d5de14d81824d95210aa380e4e912", "message": "Removed unnecessary classes plus added options to find", "committedDate": "2020-05-20T13:03:02Z", "type": "commit"}, {"oid": "0861c8ff2d04d7fe9d64161750e8e94c58e42260", "url": "https://github.com/realm/realm-java/commit/0861c8ff2d04d7fe9d64161750e8e94c58e42260", "message": "Merge branch 'v10' into el/remote-mongodb-client-collection-update", "committedDate": "2020-05-20T13:07:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAxNTYyMQ==", "url": "https://github.com/realm/realm-java/pull/6869#discussion_r428015621", "bodyText": "Links to the BsonArray comment in the native part.", "author": "edualonso", "createdAt": "2020-05-20T13:35:57Z", "path": "realm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsMongoCollection.java", "diffHunk": "@@ -226,56 +223,273 @@ protected RemoteInsertManyResult mapSuccess(Object result) {\n         return ResultHandler.handleResult(success, error);\n     }\n \n-    public RemoteDeleteResult deleteOne(final Bson filter) {\n-        AtomicReference<RemoteDeleteResult> success = new AtomicReference<>(null);\n+    public DeleteResult deleteOne(final Bson filter) {\n+        return deleteInternal(DeleteType.ONE, filter);\n+    }\n+\n+    public DeleteResult deleteMany(final Bson filter) {\n+        return deleteInternal(DeleteType.MANY, filter);\n+    }\n+\n+    public UpdateResult updateOne(final Bson filter, final Bson update) {\n+        return updateOne(filter, update, null);\n+    }\n+\n+    public UpdateResult updateOne(final Bson filter,\n+                                  final Bson update,\n+                                  @Nullable final UpdateOptions options) {\n+        return updateInternal(UpdateType.ONE, filter, update, options);\n+    }\n+\n+    public UpdateResult updateMany(final Bson filter, final Bson update) {\n+        return updateMany(filter, update, null);\n+    }\n+\n+    public UpdateResult updateMany(final Bson filter,\n+                                   final Bson update,\n+                                   @Nullable final UpdateOptions options) {\n+        return updateInternal(UpdateType.MANY, filter, update, options);\n+    }\n+\n+    public DocumentT findOneAndUpdate(final Bson filter, final Bson update) {\n+        return findOneAndUpdate(filter, update, documentClass);\n+    }\n+\n+    public <ResultT> ResultT findOneAndUpdate(final Bson filter,\n+                                              final Bson update,\n+                                              final Class<ResultT> resultClass) {\n+        return findOneAndInternal(FindOneAndType.UPDATE, filter, update, null, resultClass);\n+    }\n+\n+    public DocumentT findOneAndUpdate(final Bson filter,\n+                                      final Bson update,\n+                                      final FindOneAndModifyOptions options) {\n+        return findOneAndUpdate(filter, update, options, documentClass);\n+    }\n+\n+    public <ResultT> ResultT findOneAndUpdate(final Bson filter,\n+                                              final Bson update,\n+                                              final FindOneAndModifyOptions options,\n+                                              final Class<ResultT> resultClass) {\n+        return findOneAndInternal(FindOneAndType.UPDATE, filter, update, options, resultClass);\n+    }\n+\n+    public DocumentT findOneAndReplace(final Bson filter, final Bson replacement) {\n+        return findOneAndReplace(filter, replacement, documentClass);\n+    }\n+\n+    public <ResultT> ResultT findOneAndReplace(final Bson filter,\n+                                               final Bson update,\n+                                               final Class<ResultT> resultClass) {\n+        return findOneAndInternal(FindOneAndType.REPLACE, filter, update, null, resultClass);\n+    }\n+\n+    public DocumentT findOneAndReplace(final Bson filter,\n+                                       final Bson update,\n+                                       final FindOneAndModifyOptions options) {\n+        return findOneAndReplace(filter, update, options, documentClass);\n+    }\n+\n+    public <ResultT> ResultT findOneAndReplace(final Bson filter,\n+                                               final Bson update,\n+                                               final FindOneAndModifyOptions options,\n+                                               final Class<ResultT> resultClass) {\n+        return findOneAndInternal(FindOneAndType.REPLACE, filter, update, options, resultClass);\n+    }\n+\n+    public DocumentT findOneAndDelete(final Bson filter) {\n+        return findOneAndDelete(filter, documentClass);\n+    }\n+\n+    public <ResultT> ResultT findOneAndDelete(final Bson filter,\n+                                              final Class<ResultT> resultClass) {\n+        return findOneAndInternal(FindOneAndType.DELETE, filter, null, null, resultClass);\n+    }\n+\n+    public DocumentT findOneAndDelete(final Bson filter,\n+                                      final FindOneAndModifyOptions options) {\n+        return findOneAndInternal(FindOneAndType.DELETE, filter, null, options, documentClass);\n+    }\n+\n+    public <ResultT> ResultT findOneAndDelete(final Bson filter,\n+                                      final FindOneAndModifyOptions options,\n+                                      final Class<ResultT> resultClass) {\n+        return findOneAndInternal(FindOneAndType.DELETE, filter, null, options, resultClass);\n+    }\n+\n+    private UpdateResult updateInternal(UpdateType type, final Bson filter, final Bson update, @Nullable final UpdateOptions options) {\n+        AtomicReference<UpdateResult> success = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        OsJNIResultCallback<UpdateResult> callback = new OsJNIResultCallback<UpdateResult>(success, error) {\n+            @Override\n+            protected UpdateResult mapSuccess(Object result) {\n+                // FIXME: see OsMongoCollection.cpp - collection_mapper_update. There surely is a better way to do this", "originalCommit": "0861c8ff2d04d7fe9d64161750e8e94c58e42260", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "56a0f3ec1b0f457466941ebf1fd7b59a89ada2a9", "chunk": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsMongoCollection.java b/realm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsMongoCollection.java\nindex c684f1735..cfd90c4ab 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsMongoCollection.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsMongoCollection.java\n\n@@ -303,18 +303,18 @@ public class OsMongoCollection<DocumentT> implements NativeObject {\n \n     public <ResultT> ResultT findOneAndDelete(final Bson filter,\n                                               final Class<ResultT> resultClass) {\n-        return findOneAndInternal(FindOneAndType.DELETE, filter, null, null, resultClass);\n+        return findOneAndDeleteInternal(filter, null, resultClass);\n     }\n \n     public DocumentT findOneAndDelete(final Bson filter,\n                                       final FindOneAndModifyOptions options) {\n-        return findOneAndInternal(FindOneAndType.DELETE, filter, null, options, documentClass);\n+        return findOneAndDeleteInternal(filter, options, documentClass);\n     }\n \n     public <ResultT> ResultT findOneAndDelete(final Bson filter,\n                                       final FindOneAndModifyOptions options,\n                                       final Class<ResultT> resultClass) {\n-        return findOneAndInternal(FindOneAndType.DELETE, filter, null, options, resultClass);\n+        return findOneAndDeleteInternal(filter, options, resultClass);\n     }\n \n     private UpdateResult updateInternal(UpdateType type, final Bson filter, final Bson update, @Nullable final UpdateOptions options) {\n"}}, {"oid": "56a0f3ec1b0f457466941ebf1fd7b59a89ada2a9", "url": "https://github.com/realm/realm-java/commit/56a0f3ec1b0f457466941ebf1fd7b59a89ada2a9", "message": "A bit more cleanup", "committedDate": "2020-05-25T07:13:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc4NzgyMA==", "url": "https://github.com/realm/realm-java/pull/6869#discussion_r429787820", "bodyText": "Hmm. Doesn't the default IterableCodecProvider and DocumentWrapper codec/provider allow you to do this directly by converting to a list of documents and converting each element without the serialized roundtrip.", "author": "rorbech", "createdAt": "2020-05-25T07:56:43Z", "path": "realm/realm-library/src/objectServer/java/io/realm/internal/jni/JniBsonProtocol.java", "diffHunk": "@@ -72,4 +75,13 @@\n         return value;\n     }\n \n+    public static <T> Collection<T> decodeArray(BsonArray array, Class<T> clz, CodecRegistry registry) {", "originalCommit": "0861c8ff2d04d7fe9d64161750e8e94c58e42260", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4dac29de42cfcba636b22bb68747c168d50f4222", "chunk": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/internal/jni/JniBsonProtocol.java b/realm/realm-library/src/objectServer/java/io/realm/internal/jni/JniBsonProtocol.java\nindex c6e8f6edc..70ff2b818 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/internal/jni/JniBsonProtocol.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/internal/jni/JniBsonProtocol.java\n\n@@ -74,14 +71,4 @@ public class JniBsonProtocol {\n         jsonReader.readEndDocument();\n         return value;\n     }\n-\n-    public static <T> Collection<T> decodeArray(BsonArray array, Class<T> clz, CodecRegistry registry) {\n-        Collection<T> resultList = new ArrayList<>();\n-        for (BsonValue value : array.getValues()) {\n-            String encodedDocument = JniBsonProtocol.encode(value.asDocument(), registry);\n-            T decodedValue = JniBsonProtocol.decode(encodedDocument, clz, registry);\n-            resultList.add(decodedValue);\n-        }\n-        return resultList;\n-    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5MzE4NA==", "url": "https://github.com/realm/realm-java/pull/6869#discussion_r429793184", "bodyText": "See previous comment about maybe combining these into methods taking a selector. You already have the differentiation modelled in the FindOneAndType enums, etc.", "author": "rorbech", "createdAt": "2020-05-25T08:07:50Z", "path": "realm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsMongoCollection.java", "diffHunk": "@@ -226,56 +223,273 @@ protected RemoteInsertManyResult mapSuccess(Object result) {\n         return ResultHandler.handleResult(success, error);\n     }\n \n-    public RemoteDeleteResult deleteOne(final Bson filter) {\n-        AtomicReference<RemoteDeleteResult> success = new AtomicReference<>(null);\n+    public DeleteResult deleteOne(final Bson filter) {\n+        return deleteInternal(DeleteType.ONE, filter);\n+    }\n+\n+    public DeleteResult deleteMany(final Bson filter) {\n+        return deleteInternal(DeleteType.MANY, filter);\n+    }\n+\n+    public UpdateResult updateOne(final Bson filter, final Bson update) {\n+        return updateOne(filter, update, null);\n+    }\n+\n+    public UpdateResult updateOne(final Bson filter,\n+                                  final Bson update,\n+                                  @Nullable final UpdateOptions options) {\n+        return updateInternal(UpdateType.ONE, filter, update, options);\n+    }\n+\n+    public UpdateResult updateMany(final Bson filter, final Bson update) {\n+        return updateMany(filter, update, null);\n+    }\n+\n+    public UpdateResult updateMany(final Bson filter,\n+                                   final Bson update,\n+                                   @Nullable final UpdateOptions options) {\n+        return updateInternal(UpdateType.MANY, filter, update, options);\n+    }\n+\n+    public DocumentT findOneAndUpdate(final Bson filter, final Bson update) {\n+        return findOneAndUpdate(filter, update, documentClass);\n+    }\n+\n+    public <ResultT> ResultT findOneAndUpdate(final Bson filter,\n+                                              final Bson update,\n+                                              final Class<ResultT> resultClass) {\n+        return findOneAndInternal(FindOneAndType.UPDATE, filter, update, null, resultClass);\n+    }\n+\n+    public DocumentT findOneAndUpdate(final Bson filter,\n+                                      final Bson update,\n+                                      final FindOneAndModifyOptions options) {\n+        return findOneAndUpdate(filter, update, options, documentClass);\n+    }\n+\n+    public <ResultT> ResultT findOneAndUpdate(final Bson filter,\n+                                              final Bson update,\n+                                              final FindOneAndModifyOptions options,\n+                                              final Class<ResultT> resultClass) {\n+        return findOneAndInternal(FindOneAndType.UPDATE, filter, update, options, resultClass);\n+    }\n+\n+    public DocumentT findOneAndReplace(final Bson filter, final Bson replacement) {\n+        return findOneAndReplace(filter, replacement, documentClass);\n+    }\n+\n+    public <ResultT> ResultT findOneAndReplace(final Bson filter,\n+                                               final Bson update,\n+                                               final Class<ResultT> resultClass) {\n+        return findOneAndInternal(FindOneAndType.REPLACE, filter, update, null, resultClass);\n+    }\n+\n+    public DocumentT findOneAndReplace(final Bson filter,\n+                                       final Bson update,\n+                                       final FindOneAndModifyOptions options) {\n+        return findOneAndReplace(filter, update, options, documentClass);\n+    }\n+\n+    public <ResultT> ResultT findOneAndReplace(final Bson filter,\n+                                               final Bson update,\n+                                               final FindOneAndModifyOptions options,\n+                                               final Class<ResultT> resultClass) {\n+        return findOneAndInternal(FindOneAndType.REPLACE, filter, update, options, resultClass);\n+    }\n+\n+    public DocumentT findOneAndDelete(final Bson filter) {\n+        return findOneAndDelete(filter, documentClass);\n+    }\n+\n+    public <ResultT> ResultT findOneAndDelete(final Bson filter,\n+                                              final Class<ResultT> resultClass) {\n+        return findOneAndInternal(FindOneAndType.DELETE, filter, null, null, resultClass);\n+    }\n+\n+    public DocumentT findOneAndDelete(final Bson filter,\n+                                      final FindOneAndModifyOptions options) {\n+        return findOneAndInternal(FindOneAndType.DELETE, filter, null, options, documentClass);\n+    }\n+\n+    public <ResultT> ResultT findOneAndDelete(final Bson filter,\n+                                      final FindOneAndModifyOptions options,\n+                                      final Class<ResultT> resultClass) {\n+        return findOneAndInternal(FindOneAndType.DELETE, filter, null, options, resultClass);\n+    }\n+\n+    private UpdateResult updateInternal(UpdateType type, final Bson filter, final Bson update, @Nullable final UpdateOptions options) {\n+        AtomicReference<UpdateResult> success = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        OsJNIResultCallback<UpdateResult> callback = new OsJNIResultCallback<UpdateResult>(success, error) {\n+            @Override\n+            protected UpdateResult mapSuccess(Object result) {\n+                // FIXME: see OsMongoCollection.cpp - collection_mapper_update. There surely is a better way to do this\n+                BsonArray array = JniBsonProtocol.decode((String) result, BsonArray.class, codecRegistry);\n+                long matchedCount = array.get(0).asInt32().getValue();\n+                long modifiedCount = array.get(1).asInt32().getValue();\n+\n+                // FIXME: this seems ugly, but Stitch allows retuning null for upsertedId\n+                BsonValue upsertedId = array.get(2);\n+                if (upsertedId instanceof BsonNull) {\n+                    upsertedId = null;\n+                }\n+                return new UpdateResult(matchedCount, modifiedCount, upsertedId);\n+            }\n+        };\n+\n+        String jsonFilter = JniBsonProtocol.encode(filter, codecRegistry);\n+        String jsonUpdate = JniBsonProtocol.encode(update, codecRegistry);\n+\n+        switch (type) {\n+            case ONE:\n+                if (options == null) {\n+                    nativeUpdateOne(nativePtr, jsonFilter, jsonUpdate, callback);\n+                } else {\n+                    nativeUpdateOneWithOptions(nativePtr, jsonFilter, jsonUpdate, options.isUpsert(), callback);\n+                }\n+                break;\n+            case MANY:\n+                if (options == null) {\n+                    nativeUpdateMany(nativePtr, jsonFilter, jsonUpdate, callback);\n+                } else {\n+                    nativeUpdateManyWithOptions(nativePtr, jsonFilter, jsonUpdate, options.isUpsert(), callback);\n+                }\n+                break;\n+        }\n+        return ResultHandler.handleResult(success, error);\n+    }\n+\n+    private <ResultT> ResultT findOneInternal(@Nullable final Bson filter,\n+                                              @Nullable final FindOptions options,\n+                                              final Class<ResultT> resultClass) {\n+        AtomicReference<ResultT> success = new AtomicReference<>(null);\n         AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n-        OsJNIResultCallback<RemoteDeleteResult> callback = new OsJNIResultCallback<RemoteDeleteResult>(success, error) {\n+        OsJNIResultCallback<ResultT> callback = new OsJNIResultCallback<ResultT>(success, error) {\n             @Override\n-            protected RemoteDeleteResult mapSuccess(Object result) {\n-                return new RemoteDeleteResult((Long) result);\n+            protected ResultT mapSuccess(Object result) {\n+                return findSuccessMapper(result, resultClass);\n             }\n         };\n \n-        String jsonDocument = JniBsonProtocol.encode(filter, codecRegistry);\n-        nativeDeleteOne(nativePtr, jsonDocument, callback);\n+        String encodedFilter = (filter == null) ?\n+                JniBsonProtocol.encode(new Document(), codecRegistry) :\n+                JniBsonProtocol.encode(filter, codecRegistry);\n+        if (options == null) {\n+            nativeFindOne(nativePtr, encodedFilter, callback);\n+        } else {\n+            String projectionString = JniBsonProtocol.encode(options.getProjection(), codecRegistry);\n+            String sortString = JniBsonProtocol.encode(options.getSort(), codecRegistry);\n+\n+            nativeFindOneWithOptions(nativePtr, encodedFilter, projectionString, sortString, options.getLimit(), callback);\n+        }\n+\n+        return ResultHandler.handleResult(success, error);\n+    }\n+\n+    private  <ResultT> ResultT findOneAndInternal(final FindOneAndType type,\n+                                                  final Bson filter,\n+                                                  @Nullable final Bson update,\n+                                                  @Nullable final FindOneAndModifyOptions options,\n+                                                  final Class<ResultT> resultClass) {\n+        AtomicReference<ResultT> success = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        OsJNIResultCallback<ResultT> callback = new OsJNIResultCallback<ResultT>(success, error) {\n+            @Override\n+            protected ResultT mapSuccess(Object result) {\n+                return findSuccessMapper(result, resultClass);\n+            }\n+        };\n+\n+        String encodedFilter = JniBsonProtocol.encode(filter, codecRegistry);\n+        String encodedUpdate = JniBsonProtocol.encode(update, codecRegistry);\n+        String encodedProjection = null;\n+        String encodedSort = null;\n+        if (options != null) {\n+            encodedProjection = JniBsonProtocol.encode(options.getProjection(), codecRegistry);\n+            encodedSort = JniBsonProtocol.encode(options.getSort(), codecRegistry);\n+        }\n+\n+        switch (type) {\n+            case UPDATE:\n+                if (options == null) {\n+                    nativeFindOneAndUpdate(nativePtr, encodedFilter, encodedUpdate, callback);\n+                } else {\n+                    nativeFindOneAndUpdateWithOptions(nativePtr, encodedFilter, encodedUpdate, encodedProjection, encodedSort, options.isUpsert(), options.isReturnNewDocument(), callback);\n+                }\n+                break;\n+            case REPLACE:\n+                if (options == null) {\n+                    nativeFindOneAndReplace(nativePtr, encodedFilter, encodedUpdate, callback);\n+                } else {\n+                    nativeFindOneAndReplaceWithOptions(nativePtr, encodedFilter, encodedUpdate, encodedProjection, encodedSort, options.isUpsert(), options.isReturnNewDocument(), callback);\n+                }\n+                break;\n+            case DELETE:\n+                if (options == null) {\n+                    nativeFindOneAndDelete(nativePtr, encodedFilter, callback);\n+                } else {\n+                    nativeFindOneAndDeleteWithOptions(nativePtr, encodedFilter, encodedProjection, encodedSort, options.isUpsert(), options.isReturnNewDocument(), callback);\n+                }\n+                break;\n+        }\n+\n         return ResultHandler.handleResult(success, error);\n     }\n \n-    public RemoteDeleteResult deleteMany(final Bson filter) {\n-        AtomicReference<RemoteDeleteResult> success = new AtomicReference<>(null);\n+    private DeleteResult deleteInternal(final DeleteType type, final Bson filter) {\n+        AtomicReference<DeleteResult> success = new AtomicReference<>(null);\n         AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n-        OsJNIResultCallback<RemoteDeleteResult> callback = new OsJNIResultCallback<RemoteDeleteResult>(success, error) {\n+        OsJNIResultCallback<DeleteResult> callback = new OsJNIResultCallback<DeleteResult>(success, error) {\n             @Override\n-            protected RemoteDeleteResult mapSuccess(Object result) {\n-                return new RemoteDeleteResult((Long) result);\n+            protected DeleteResult mapSuccess(Object result) {\n+                return new DeleteResult((Long) result);\n             }\n         };\n \n         String jsonDocument = JniBsonProtocol.encode(filter, codecRegistry);\n-        nativeDeleteMany(nativePtr, jsonDocument, callback);\n+        switch (type) {\n+            case ONE:\n+                nativeDeleteOne(nativePtr, jsonDocument, callback);\n+                break;\n+            case MANY:\n+                nativeDeleteMany(nativePtr, jsonDocument, callback);\n+                break;\n+        }\n         return ResultHandler.handleResult(success, error);\n     }\n \n-    private <T> T findOneSuccessMapper(@Nullable Object result, Class<T> resultClass) {\n+    private <T> T findSuccessMapper(@Nullable Object result, Class<T> resultClass) {\n         if (result == null) {\n             return null;\n         } else {\n             return JniBsonProtocol.decode((String) result, resultClass, codecRegistry);\n         }\n     }\n \n+    private enum UpdateType {\n+        ONE, MANY\n+    }\n+\n+    private enum DeleteType {\n+        ONE, MANY\n+    }\n+\n+    private enum FindOneAndType {\n+        UPDATE, REPLACE, DELETE\n+    }\n+\n     private static native long nativeGetFinalizerMethodPtr();\n     private static native void nativeCount(long remoteMongoCollectionPtr,", "originalCommit": "0861c8ff2d04d7fe9d64161750e8e94c58e42260", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk2OTc4Mw==", "url": "https://github.com/realm/realm-java/pull/6869#discussion_r429969783", "bodyText": "I will address this in the next PR.", "author": "edualonso", "createdAt": "2020-05-25T14:40:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5MzE4NA=="}], "type": "inlineReview", "revised_code": {"commit": "4dac29de42cfcba636b22bb68747c168d50f4222", "chunk": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsMongoCollection.java b/realm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsMongoCollection.java\nindex c684f1735..fcaee9bed 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsMongoCollection.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsMongoCollection.java\n\n@@ -303,18 +301,18 @@ public class OsMongoCollection<DocumentT> implements NativeObject {\n \n     public <ResultT> ResultT findOneAndDelete(final Bson filter,\n                                               final Class<ResultT> resultClass) {\n-        return findOneAndInternal(FindOneAndType.DELETE, filter, null, null, resultClass);\n+        return findOneAndDeleteInternal(filter, null, resultClass);\n     }\n \n     public DocumentT findOneAndDelete(final Bson filter,\n                                       final FindOneAndModifyOptions options) {\n-        return findOneAndInternal(FindOneAndType.DELETE, filter, null, options, documentClass);\n+        return findOneAndDeleteInternal(filter, options, documentClass);\n     }\n \n     public <ResultT> ResultT findOneAndDelete(final Bson filter,\n                                       final FindOneAndModifyOptions options,\n                                       final Class<ResultT> resultClass) {\n-        return findOneAndInternal(FindOneAndType.DELETE, filter, null, options, resultClass);\n+        return findOneAndDeleteInternal(filter, options, resultClass);\n     }\n \n     private UpdateResult updateInternal(UpdateType type, final Bson filter, final Bson update, @Nullable final UpdateOptions options) {\n"}}, {"oid": "4dac29de42cfcba636b22bb68747c168d50f4222", "url": "https://github.com/realm/realm-java/commit/4dac29de42cfcba636b22bb68747c168d50f4222", "message": "Removed unnecessary roundtrip to parser to decode a collection, added parsing guards in native code, added more visible fixmes in test file", "committedDate": "2020-05-25T13:36:43Z", "type": "commit"}, {"oid": "c678462c53eefec49b9bddb175056038389c8db4", "url": "https://github.com/realm/realm-java/commit/c678462c53eefec49b9bddb175056038389c8db4", "message": "Merge branch 'v10' into el/remote-mongodb-client-collection-update", "committedDate": "2020-05-25T13:55:06Z", "type": "commit"}]}