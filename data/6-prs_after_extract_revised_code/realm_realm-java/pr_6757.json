{"pr_number": 6757, "pr_title": "Add support for RealmApp (and MongoDB Realm)", "pr_createdAt": "2020-02-26T15:38:23Z", "pr_url": "https://github.com/realm/realm-java/pull/6757", "timeline": [{"oid": "1298355f213d4dc3eff9f00d9c9cdfda5b94d0ff", "url": "https://github.com/realm/realm-java/commit/1298355f213d4dc3eff9f00d9c9cdfda5b94d0ff", "message": "Rough POC of RealmApp refactor", "committedDate": "2020-02-26T15:28:18Z", "type": "commit"}, {"oid": "52b5f6e2ba11ea61c50096f77ed754c3efbf7ac8", "url": "https://github.com/realm/realm-java/commit/52b5f6e2ba11ea61c50096f77ed754c3efbf7ac8", "message": "Merge branch 'v10' into cm/realmapp", "committedDate": "2020-03-02T12:02:09Z", "type": "commit"}, {"oid": "6d7d6e185780414172134ad7eb0070c90cec335b", "url": "https://github.com/realm/realm-java/commit/6d7d6e185780414172134ad7eb0070c90cec335b", "message": "Android android.jar to javah classpath. Disable JavaDoc generation temporarily (a lot of links are broken)", "committedDate": "2020-03-02T13:01:29Z", "type": "commit"}, {"oid": "f7a075182fb82afb703642d930b2e7d8aa296798", "url": "https://github.com/realm/realm-java/commit/f7a075182fb82afb703642d930b2e7d8aa296798", "message": "Minimal work to get object server unit tests to compile", "committedDate": "2020-03-02T14:54:22Z", "type": "commit"}, {"oid": "5d65cc85a8c23e34c83f48fbdc620ae28ad11e33", "url": "https://github.com/realm/realm-java/commit/5d65cc85a8c23e34c83f48fbdc620ae28ad11e33", "message": "Add basic support for RealmCredentials. Remove App from most class names. Preliminary work on getting a a network request to work.", "committedDate": "2020-03-03T23:47:57Z", "type": "commit"}, {"oid": "9bba39bc70ec3b340a723b15bfa911cdff844e24", "url": "https://github.com/realm/realm-java/commit/9bba39bc70ec3b340a723b15bfa911cdff844e24", "message": "Remove UserStore interface. It will flow through RealmApp in the future.", "committedDate": "2020-03-04T00:06:09Z", "type": "commit"}, {"oid": "f2766cc524b284bfbf1af807c8f0ab1f033a1e0d", "url": "https://github.com/realm/realm-java/commit/f2766cc524b284bfbf1af807c8f0ab1f033a1e0d", "message": "Implementing first draft for network transport callbacks between Java and C++. Added first draft for RealmUser functionality.", "committedDate": "2020-03-05T10:40:18Z", "type": "commit"}, {"oid": "93aae2d1bd0c1676d6d4d6c0e96eb338e48a64d1", "url": "https://github.com/realm/realm-java/commit/93aae2d1bd0c1676d6d4d6c0e96eb338e48a64d1", "message": "Use AndroidX for test artifacts. Upgrade OKHttp. Add test app used for native debugging. Fix most of the bugs for doing network roundtrips.", "committedDate": "2020-03-06T11:07:38Z", "type": "commit"}, {"oid": "086fbae14e8f24bd61de5dd44191cc4063ff439e", "url": "https://github.com/realm/realm-java/commit/086fbae14e8f24bd61de5dd44191cc4063ff439e", "message": "Merge branch 'v10' into cm/realmapp\n\n# Conflicts:\n#\tCHANGELOG.md\n#\tdependencies.list\n#\trealm/build.gradle\n#\trealm/gradle/wrapper/gradle-wrapper.properties\n#\trealm/kotlin-extensions/build.gradle\n#\trealm/kotlin-extensions/src/androidTest/kotlin/io/realm/KotlinRealmTests.kt\n#\trealm/kotlin-extensions/src/androidTestObjectServer/kotlin/io/realm/kotlin/KotlinSyncedRealmTests.kt\n#\trealm/realm-library/build.gradle\n#\trealm/realm-library/src/androidTestObjectServer/java/io/realm/AuthenticateRequestTests.java\n#\trealm/realm-library/src/androidTestObjectServer/java/io/realm/SyncConfigurationTests.java\n#\trealm/realm-library/src/androidTestObjectServer/java/io/realm/SyncUserTests.java\n#\trealm/realm-library/src/androidTestObjectServer/java/io/realm/objectserver/utils/StringOnlyModule.java\n#\trealm/realm-library/src/main/cpp/CMakeLists.txt\n#\trealm/realm-library/src/main/cpp/io_realm_RealmFileUserStore.cpp\n#\trealm/realm-library/src/syncIntegrationTest/java/io/realm/objectserver/utils/StringOnlyModule.java\n#\trealm/realm-library/src/syncTestUtils/java/io/realm/objectserver/utils/StringOnlyModule.java\n#\trealm/realm-library/src/testUtils/java/io/realm/rule/RunWithRemoteService.java", "committedDate": "2020-03-08T21:49:07Z", "type": "commit"}, {"oid": "afa4621f78f7ec609ad070e24ec4fbfb34537881", "url": "https://github.com/realm/realm-java/commit/afa4621f78f7ec609ad070e24ec4fbfb34537881", "message": "Make project compile after merge from v10", "committedDate": "2020-03-09T08:03:50Z", "type": "commit"}, {"oid": "a70e679a890f6ce527cef009f73c4445b0fa701f", "url": "https://github.com/realm/realm-java/commit/a70e679a890f6ce527cef009f73c4445b0fa701f", "message": "Enable test scripts to start docker. Make objectServer tests compile and run", "committedDate": "2020-03-09T10:01:39Z", "type": "commit"}, {"oid": "271fc1ddd5f83d2e90a30c9893385cea56db590b", "url": "https://github.com/realm/realm-java/commit/271fc1ddd5f83d2e90a30c9893385cea56db590b", "message": "Add startup scripts for Stitch", "committedDate": "2020-03-09T23:40:54Z", "type": "commit"}, {"oid": "486abf477c6b0d9eaf4886d9086f4588151adc13", "url": "https://github.com/realm/realm-java/commit/486abf477c6b0d9eaf4886d9086f4588151adc13", "message": "Merge branch 'v10' into cm/realmapp\n\n# Conflicts:\n#\trealm/realm-library/src/main/cpp/io_realm_RealmFileUserStore.cpp", "committedDate": "2020-03-11T06:52:12Z", "type": "commit"}, {"oid": "4f017f416bf3601ddba308d32c91701eeceef003", "url": "https://github.com/realm/realm-java/commit/4f017f416bf3601ddba308d32c91701eeceef003", "message": "Send response headers. Use correct url. Fix location value for Stitch", "committedDate": "2020-03-11T07:50:28Z", "type": "commit"}, {"oid": "57bc1979fdedd33324327d758133941bfd200df1", "url": "https://github.com/realm/realm-java/commit/57bc1979fdedd33324327d758133941bfd200df1", "message": "Add Service error codes. Fix http method support in Java. Enable auth providers on Stitch. Better error message when UNKNOWN.", "committedDate": "2020-03-11T09:47:36Z", "type": "commit"}, {"oid": "b7cddb82cd68be6225ba81c1c36e7e57aeaa7a54", "url": "https://github.com/realm/realm-java/commit/b7cddb82cd68be6225ba81c1c36e7e57aeaa7a54", "message": "Fix replacing the transport. Fix propagating all errors correctly through the transport", "committedDate": "2020-03-11T23:52:36Z", "type": "commit"}, {"oid": "064550c6462bb0bfe0abc290bfd483bef73b5ed9", "url": "https://github.com/realm/realm-java/commit/064550c6462bb0bfe0abc290bfd483bef73b5ed9", "message": "Add a new command web server for okhttp tests. Add tests for the OkHttp implementation.", "committedDate": "2020-03-12T13:16:14Z", "type": "commit"}, {"oid": "3a59b71cfd52e41be3af27110161d9dd5cffd3cf", "url": "https://github.com/realm/realm-java/commit/3a59b71cfd52e41be3af27110161d9dd5cffd3cf", "message": "Expose applicationId to integration tests", "committedDate": "2020-03-12T16:38:11Z", "type": "commit"}, {"oid": "8418e83a8249fe7c4f75a15fc2c2802840dec950", "url": "https://github.com/realm/realm-java/commit/8418e83a8249fe7c4f75a15fc2c2802840dec950", "message": "Cleanup", "committedDate": "2020-03-12T17:08:49Z", "type": "commit"}, {"oid": "596388f8070bf1bdd3cabf706a0628f11fceef59", "url": "https://github.com/realm/realm-java/commit/596388f8070bf1bdd3cabf706a0628f11fceef59", "message": "Fix Findbugs", "committedDate": "2020-03-12T17:26:20Z", "type": "commit"}, {"oid": "982ad7f279a73e59a448bec120499dd52df5696d", "url": "https://github.com/realm/realm-java/commit/982ad7f279a73e59a448bec120499dd52df5696d", "message": "Attempt to enable CI testing", "committedDate": "2020-03-12T18:15:22Z", "type": "commit"}, {"oid": "ac903ab07486a88f8e7bbfc2efac2d3cada19a8c", "url": "https://github.com/realm/realm-java/commit/ac903ab07486a88f8e7bbfc2efac2d3cada19a8c", "message": "Magic Jenkins incantations that probably blows up CI", "committedDate": "2020-03-12T19:10:56Z", "type": "commit"}, {"oid": "0fa34514d0d3b9d9f5177946a1b728f6fdff4051", "url": "https://github.com/realm/realm-java/commit/0fa34514d0d3b9d9f5177946a1b728f6fdff4051", "message": "Attempt to fix CI", "committedDate": "2020-03-13T11:48:09Z", "type": "commit"}, {"oid": "80c217fd98af00f1c7c7af98249faed99395be05", "url": "https://github.com/realm/realm-java/commit/80c217fd98af00f1c7c7af98249faed99395be05", "message": "Debug output", "committedDate": "2020-03-13T11:51:29Z", "type": "commit"}, {"oid": "20b3bee85a899d9be1170e2f3b849c13d0e21795", "url": "https://github.com/realm/realm-java/commit/20b3bee85a899d9be1170e2f3b849c13d0e21795", "message": "More CI fixes", "committedDate": "2020-03-13T12:22:40Z", "type": "commit"}, {"oid": "90bbb698bd26d1c352c5b6b15b494b5c40a88d35", "url": "https://github.com/realm/realm-java/commit/90bbb698bd26d1c352c5b6b15b494b5c40a88d35", "message": "Use tmp folder", "committedDate": "2020-03-13T13:00:40Z", "type": "commit"}, {"oid": "f99dbbeb737f684182bd985ddaa48f363494a1a9", "url": "https://github.com/realm/realm-java/commit/f99dbbeb737f684182bd985ddaa48f363494a1a9", "message": "Fix path", "committedDate": "2020-03-13T13:10:22Z", "type": "commit"}, {"oid": "4a1debde94ed4ed4e7266c03dda47c5dc9eb622c", "url": "https://github.com/realm/realm-java/commit/4a1debde94ed4ed4e7266c03dda47c5dc9eb622c", "message": "Use latest Stitch image.", "committedDate": "2020-03-13T13:19:19Z", "type": "commit"}, {"oid": "4c9a611437c0af7b31633146e85b5913d6f0ab42", "url": "https://github.com/realm/realm-java/commit/4c9a611437c0af7b31633146e85b5913d6f0ab42", "message": "Use tmp on CI", "committedDate": "2020-03-13T13:19:55Z", "type": "commit"}, {"oid": "090f011cb9ed1248b662787959cd151502abb8c4", "url": "https://github.com/realm/realm-java/commit/090f011cb9ed1248b662787959cd151502abb8c4", "message": "Test", "committedDate": "2020-03-13T13:29:14Z", "type": "commit"}, {"oid": "d95fc361517e612e824107c4a8279cc93013c266", "url": "https://github.com/realm/realm-java/commit/d95fc361517e612e824107c4a8279cc93013c266", "message": "Add JQ to Docker", "committedDate": "2020-03-13T13:36:38Z", "type": "commit"}, {"oid": "1e2ecf20f9440f567fc742e76aa4364a7eb8c4f1", "url": "https://github.com/realm/realm-java/commit/1e2ecf20f9440f567fc742e76aa4364a7eb8c4f1", "message": "Attempt to fix not finding executables on CI", "committedDate": "2020-03-13T13:40:31Z", "type": "commit"}, {"oid": "feaa6dfc8253e3edf5d718fb648be3ced5e0f876", "url": "https://github.com/realm/realm-java/commit/feaa6dfc8253e3edf5d718fb648be3ced5e0f876", "message": "lower case export", "committedDate": "2020-03-13T13:56:34Z", "type": "commit"}, {"oid": "d44e6f0b6356a2af243b906b7f125ef0addcc01a", "url": "https://github.com/realm/realm-java/commit/d44e6f0b6356a2af243b906b7f125ef0addcc01a", "message": "Debug", "committedDate": "2020-03-13T14:09:06Z", "type": "commit"}, {"oid": "16c4f1db462f285008d7443ef8bb1a7d9faffb86", "url": "https://github.com/realm/realm-java/commit/16c4f1db462f285008d7443ef8bb1a7d9faffb86", "message": "Started the wrong image", "committedDate": "2020-03-13T14:16:12Z", "type": "commit"}, {"oid": "360b2f44f75878a6eb4f99e5e4e7eb4c20558be1", "url": "https://github.com/realm/realm-java/commit/360b2f44f75878a6eb4f99e5e4e7eb4c20558be1", "message": "Reenable real build", "committedDate": "2020-03-13T14:23:21Z", "type": "commit"}, {"oid": "ac2e4b8edee243fe272cf51d30f96c51766b8573", "url": "https://github.com/realm/realm-java/commit/ac2e4b8edee243fe272cf51d30f96c51766b8573", "message": "Disable PMD", "committedDate": "2020-03-13T14:33:46Z", "type": "commit"}, {"oid": "cbfcd7c227285f6af7127b024b5bcbd744bae8b3", "url": "https://github.com/realm/realm-java/commit/cbfcd7c227285f6af7127b024b5bcbd744bae8b3", "message": "Expose ports", "committedDate": "2020-03-13T14:58:12Z", "type": "commit"}, {"oid": "4c7cb8feb83ac4f2d4850fe7bf6e083d99d91893", "url": "https://github.com/realm/realm-java/commit/4c7cb8feb83ac4f2d4850fe7bf6e083d99d91893", "message": "Add better debug info to Response. Pair down JenkinsFile while testing", "committedDate": "2020-03-13T16:15:20Z", "type": "commit"}, {"oid": "d74a45e26725730e061f0b19db29bd7b2a39b9f4", "url": "https://github.com/realm/realm-java/commit/d74a45e26725730e061f0b19db29bd7b2a39b9f4", "message": "Restrict test", "committedDate": "2020-03-13T16:39:16Z", "type": "commit"}, {"oid": "f83012adcc5b520977a629c71621b9cb452e33dd", "url": "https://github.com/realm/realm-java/commit/f83012adcc5b520977a629c71621b9cb452e33dd", "message": "Attempt network fix", "committedDate": "2020-03-13T18:13:29Z", "type": "commit"}, {"oid": "ae9ff70d20e54d1fedab87592dacae9148a4d7d4", "url": "https://github.com/realm/realm-java/commit/ae9ff70d20e54d1fedab87592dacae9148a4d7d4", "message": "Attempt to use host network", "committedDate": "2020-03-13T19:27:47Z", "type": "commit"}, {"oid": "c7a941920cfd1bb9a727b50f449c0c16d9dc9f07", "url": "https://github.com/realm/realm-java/commit/c7a941920cfd1bb9a727b50f449c0c16d9dc9f07", "message": "Back to fixing CI", "committedDate": "2020-03-13T21:06:03Z", "type": "commit"}, {"oid": "2f8d857f7ac0ee256fd3e6853aa9ba0bf01f9b39", "url": "https://github.com/realm/realm-java/commit/2f8d857f7ac0ee256fd3e6853aa9ba0bf01f9b39", "message": "Yet more network magic", "committedDate": "2020-03-13T22:11:25Z", "type": "commit"}, {"oid": "0fae1b36b94dfc01d203a8e7701ef768c892a26c", "url": "https://github.com/realm/realm-java/commit/0fae1b36b94dfc01d203a8e7701ef768c892a26c", "message": "Attempt to combine networks both locally and on CI", "committedDate": "2020-03-13T22:21:42Z", "type": "commit"}, {"oid": "63c82fe03e09abacd5d219187de75b1a8a736345", "url": "https://github.com/realm/realm-java/commit/63c82fe03e09abacd5d219187de75b1a8a736345", "message": "Fix Jenkins (finally I hope)", "committedDate": "2020-03-13T23:10:18Z", "type": "commit"}, {"oid": "a22d85706407bbdfac715f8db2bb13a6f1377349", "url": "https://github.com/realm/realm-java/commit/a22d85706407bbdfac715f8db2bb13a6f1377349", "message": "Fix tests. Publish correct ports.", "committedDate": "2020-03-13T23:21:23Z", "type": "commit"}, {"oid": "d068549e5add4b47ccabafe907733545e61a3e5f", "url": "https://github.com/realm/realm-java/commit/d068549e5add4b47ccabafe907733545e61a3e5f", "message": "Avoid using container names on CI", "committedDate": "2020-03-13T23:27:10Z", "type": "commit"}, {"oid": "962e1e3fa84899430ca4966f9390918ba95c03a9", "url": "https://github.com/realm/realm-java/commit/962e1e3fa84899430ca4966f9390918ba95c03a9", "message": "Random network name on CI", "committedDate": "2020-03-13T23:33:09Z", "type": "commit"}, {"oid": "bd806a99ca4f3b8a65461eb26586d2f5190511b3", "url": "https://github.com/realm/realm-java/commit/bd806a99ca4f3b8a65461eb26586d2f5190511b3", "message": "Spelling mistake", "committedDate": "2020-03-13T23:36:41Z", "type": "commit"}, {"oid": "3dfeb7ea6257b1a830e814494ad1e0898c4cac7e", "url": "https://github.com/realm/realm-java/commit/3dfeb7ea6257b1a830e814494ad1e0898c4cac7e", "message": "Disable trying to save checkstyle and pmd output", "committedDate": "2020-03-14T00:08:19Z", "type": "commit"}, {"oid": "d98304d6f7774cfdac5cd3bd396785473728554f", "url": "https://github.com/realm/realm-java/commit/d98304d6f7774cfdac5cd3bd396785473728554f", "message": "Cleanup", "committedDate": "2020-03-14T01:15:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg3NDg0MA==", "url": "https://github.com/realm/realm-java/pull/6757#discussion_r392874840", "bodyText": "Don't you wan't to add FIXME whenever you comment something out to be able to remember where to uncomment again?", "author": "bmunkholm", "createdAt": "2020-03-16T09:14:59Z", "path": "realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncConfigurationTests.java", "diffHunk": "@@ -69,10 +69,10 @@ public void setUp() {\n \n     @After\n     public void tearDown() {\n-        UserStore userStore = SyncManager.getUserStore();\n-        for (SyncUser syncUser : userStore.allUsers()) {\n-            userStore.remove(syncUser.getIdentity(), syncUser.getAuthenticationUrl().toString());\n-        }\n+//        UserStore userStore = SyncManager.getUserStore();", "originalCommit": "d98304d6f7774cfdac5cd3bd396785473728554f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg3NTg0MQ==", "url": "https://github.com/realm/realm-java/pull/6757#discussion_r392875841", "bodyText": "Yes, I should probably add FIXME's to all these places", "author": "cmelchior", "createdAt": "2020-03-16T09:16:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg3NDg0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg4OTU0MA==", "url": "https://github.com/realm/realm-java/pull/6757#discussion_r392889540", "bodyText": "I didn't add FIXME comment all those places - but there are quite a few :-)", "author": "bmunkholm", "createdAt": "2020-03-16T09:41:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg3NDg0MA=="}], "type": "inlineReview", "revised_code": {"commit": "5c42f2a3260edb90748202861871d30141d462d7", "chunk": "diff --git a/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncConfigurationTests.java b/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncConfigurationTests.java\nindex b7178ddbb..8ec9b2e4a 100644\n--- a/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncConfigurationTests.java\n+++ b/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncConfigurationTests.java\n\n@@ -69,6 +69,7 @@ public class SyncConfigurationTests {\n \n     @After\n     public void tearDown() {\n+// FIXME\n //        UserStore userStore = SyncManager.getUserStore();\n //        for (SyncUser syncUser : userStore.allUsers()) {\n //            userStore.remove(syncUser.getIdentity(), syncUser.getAuthenticationUrl().toString());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg3NTMyNg==", "url": "https://github.com/realm/realm-java/pull/6757#discussion_r392875326", "bodyText": "FIXME?", "author": "bmunkholm", "createdAt": "2020-03-16T09:15:53Z", "path": "realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncedRealmTests.java", "diffHunk": "@@ -61,9 +61,9 @@ public void tearDown() {\n         if (realm != null && !realm.isClosed()) {\n             realm.close();\n         }\n-        for (SyncUser user : SyncUser.all().values()) {\n-            user.logOut();\n-        }\n+//        for (RealmUser user : RealmApp.allUsers().values()) {", "originalCommit": "d98304d6f7774cfdac5cd3bd396785473728554f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5c42f2a3260edb90748202861871d30141d462d7", "chunk": "diff --git a/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncedRealmTests.java b/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncedRealmTests.java\nindex 4d385e4e4..ca5ed81e6 100644\n--- a/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncedRealmTests.java\n+++ b/realm/realm-library/src/androidTestObjectServer/java/io/realm/SyncedRealmTests.java\n\n@@ -61,6 +61,8 @@ public class SyncedRealmTests {\n         if (realm != null && !realm.isClosed()) {\n             realm.close();\n         }\n+\n+// FIXME\n //        for (RealmUser user : RealmApp.allUsers().values()) {\n //            RealmApp.logout(user);\n //        }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI3MTIwOQ==", "url": "https://github.com/realm/realm-java/pull/6757#discussion_r394271209", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Default session error handler handler that just output errors to LogCat\n          \n          \n            \n                // Default session error handler that just output errors to LogCat", "author": "nhachicha", "createdAt": "2020-03-18T11:15:56Z", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "diffHunk": "@@ -0,0 +1,413 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.annotation.Nullable;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.realm.internal.RealmNotifier;\n+import io.realm.internal.android.AndroidCapabilities;\n+import io.realm.internal.android.AndroidRealmNotifier;\n+import io.realm.internal.async.RealmAsyncTaskImpl;\n+import io.realm.internal.network.OkHttpNetworkTransport;\n+import io.realm.internal.objectstore.OsJavaNetworkTransport;\n+import io.realm.log.RealmLog;\n+import io.realm.mongodb.RealmMongoDBService;\n+\n+/**\n+ * FIXME\n+ */\n+public class RealmApp {\n+\n+    // Implementation notes:\n+    // The public API's currently only allow for one RealmApp, however this is a restriction\n+    // we might want to lift in the future. So any implementation details so ideally be made\n+    // with that in mind, i.e. keep static state to minimum.\n+\n+    // Default session error handler handler that just output errors to LogCat", "originalCommit": "d98304d6f7774cfdac5cd3bd396785473728554f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "33f95c47bb01e4e991ed45e8438e6f0d42ce4431", "chunk": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java b/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java\nindex 34e0ce1ab..fa88fdfc7 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java\n\n@@ -283,7 +283,7 @@ public class RealmApp {\n         return null;\n     }\n \n-    public RealmFCMPushNotifications getFSMPushNotifications() {\n+    public RealmPushNotifications getFSMPushNotifications() {\n         // FIXME\n         return null;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI3MjM4Mw==", "url": "https://github.com/realm/realm-java/pull/6757#discussion_r394272383", "bodyText": "Is the automatic client reset still using this error code?", "author": "nhachicha", "createdAt": "2020-03-18T11:18:10Z", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "diffHunk": "@@ -0,0 +1,413 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.annotation.Nullable;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.realm.internal.RealmNotifier;\n+import io.realm.internal.android.AndroidCapabilities;\n+import io.realm.internal.android.AndroidRealmNotifier;\n+import io.realm.internal.async.RealmAsyncTaskImpl;\n+import io.realm.internal.network.OkHttpNetworkTransport;\n+import io.realm.internal.objectstore.OsJavaNetworkTransport;\n+import io.realm.log.RealmLog;\n+import io.realm.mongodb.RealmMongoDBService;\n+\n+/**\n+ * FIXME\n+ */\n+public class RealmApp {\n+\n+    // Implementation notes:\n+    // The public API's currently only allow for one RealmApp, however this is a restriction\n+    // we might want to lift in the future. So any implementation details so ideally be made\n+    // with that in mind, i.e. keep static state to minimum.\n+\n+    // Default session error handler handler that just output errors to LogCat\n+    private static final SyncSession.ErrorHandler SESSION_NO_OP_ERROR_HANDLER = new SyncSession.ErrorHandler() {\n+        @Override\n+        public void onError(SyncSession session, ObjectServerError error) {\n+            if (error.getErrorCode() == ErrorCode.CLIENT_RESET) {", "originalCommit": "d98304d6f7774cfdac5cd3bd396785473728554f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg0MjE1Mw==", "url": "https://github.com/realm/realm-java/pull/6757#discussion_r394842153", "bodyText": "Client Reset support is still a bit unclear, but if anything has changed I would rather remove/make changes in a single PR since a lot of places are affected. This code was just a copy from SyncManager", "author": "cmelchior", "createdAt": "2020-03-19T07:51:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI3MjM4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "33f95c47bb01e4e991ed45e8438e6f0d42ce4431", "chunk": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java b/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java\nindex 34e0ce1ab..fa88fdfc7 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java\n\n@@ -283,7 +283,7 @@ public class RealmApp {\n         return null;\n     }\n \n-    public RealmFCMPushNotifications getFSMPushNotifications() {\n+    public RealmPushNotifications getFSMPushNotifications() {\n         // FIXME\n         return null;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI3Mzk3Mg==", "url": "https://github.com/realm/realm-java/pull/6757#discussion_r394273972", "bodyText": "Why not using RealmThreadPoolExecutor.newDefaultExecutor() which builds a pool based on the available Core", "author": "nhachicha", "createdAt": "2020-03-18T11:21:19Z", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "diffHunk": "@@ -0,0 +1,413 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.annotation.Nullable;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.realm.internal.RealmNotifier;\n+import io.realm.internal.android.AndroidCapabilities;\n+import io.realm.internal.android.AndroidRealmNotifier;\n+import io.realm.internal.async.RealmAsyncTaskImpl;\n+import io.realm.internal.network.OkHttpNetworkTransport;\n+import io.realm.internal.objectstore.OsJavaNetworkTransport;\n+import io.realm.log.RealmLog;\n+import io.realm.mongodb.RealmMongoDBService;\n+\n+/**\n+ * FIXME\n+ */\n+public class RealmApp {\n+\n+    // Implementation notes:\n+    // The public API's currently only allow for one RealmApp, however this is a restriction\n+    // we might want to lift in the future. So any implementation details so ideally be made\n+    // with that in mind, i.e. keep static state to minimum.\n+\n+    // Default session error handler handler that just output errors to LogCat\n+    private static final SyncSession.ErrorHandler SESSION_NO_OP_ERROR_HANDLER = new SyncSession.ErrorHandler() {\n+        @Override\n+        public void onError(SyncSession session, ObjectServerError error) {\n+            if (error.getErrorCode() == ErrorCode.CLIENT_RESET) {\n+                RealmLog.error(\"Client Reset required for: \" + session.getConfiguration().getServerUrl());\n+                return;\n+            }\n+\n+            String errorMsg = String.format(Locale.US, \"Session Error[%s]: %s\",\n+                    session.getConfiguration().getServerUrl(),\n+                    error.toString());\n+            switch (error.getErrorCode().getCategory()) {\n+                case FATAL:\n+                    RealmLog.error(errorMsg);\n+                    break;\n+                case RECOVERABLE:\n+                    RealmLog.info(errorMsg);\n+                    break;\n+                default:\n+                    throw new IllegalArgumentException(\"Unsupported error category: \" + error.getErrorCode().getCategory());\n+            }\n+        }\n+    };\n+\n+    /**\n+     * Thread pool used when doing network requests against the MongoDB Realm Server.\n+     * <p>\n+     * This pool is only exposed for testing purposes and replacing it while the queue is not\n+     * empty will result in undefined behaviour.\n+     */\n+    @SuppressFBWarnings(\"MS_SHOULD_BE_FINAL\")\n+    public static ThreadPoolExecutor NETWORK_POOL_EXECUTOR = new ThreadPoolExecutor(", "originalCommit": "d98304d6f7774cfdac5cd3bd396785473728554f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "33f95c47bb01e4e991ed45e8438e6f0d42ce4431", "chunk": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java b/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java\nindex 34e0ce1ab..fa88fdfc7 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java\n\n@@ -283,7 +283,7 @@ public class RealmApp {\n         return null;\n     }\n \n-    public RealmFCMPushNotifications getFSMPushNotifications() {\n+    public RealmPushNotifications getFSMPushNotifications() {\n         // FIXME\n         return null;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI3NzQ0Nw==", "url": "https://github.com/realm/realm-java/pull/6757#discussion_r394277447", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public RealmApp(String appId) {\n          \n          \n            \n                public RealmApp(@Nonnull String appId) {", "author": "nhachicha", "createdAt": "2020-03-18T11:28:01Z", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "diffHunk": "@@ -0,0 +1,413 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.annotation.Nullable;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.realm.internal.RealmNotifier;\n+import io.realm.internal.android.AndroidCapabilities;\n+import io.realm.internal.android.AndroidRealmNotifier;\n+import io.realm.internal.async.RealmAsyncTaskImpl;\n+import io.realm.internal.network.OkHttpNetworkTransport;\n+import io.realm.internal.objectstore.OsJavaNetworkTransport;\n+import io.realm.log.RealmLog;\n+import io.realm.mongodb.RealmMongoDBService;\n+\n+/**\n+ * FIXME\n+ */\n+public class RealmApp {\n+\n+    // Implementation notes:\n+    // The public API's currently only allow for one RealmApp, however this is a restriction\n+    // we might want to lift in the future. So any implementation details so ideally be made\n+    // with that in mind, i.e. keep static state to minimum.\n+\n+    // Default session error handler handler that just output errors to LogCat\n+    private static final SyncSession.ErrorHandler SESSION_NO_OP_ERROR_HANDLER = new SyncSession.ErrorHandler() {\n+        @Override\n+        public void onError(SyncSession session, ObjectServerError error) {\n+            if (error.getErrorCode() == ErrorCode.CLIENT_RESET) {\n+                RealmLog.error(\"Client Reset required for: \" + session.getConfiguration().getServerUrl());\n+                return;\n+            }\n+\n+            String errorMsg = String.format(Locale.US, \"Session Error[%s]: %s\",\n+                    session.getConfiguration().getServerUrl(),\n+                    error.toString());\n+            switch (error.getErrorCode().getCategory()) {\n+                case FATAL:\n+                    RealmLog.error(errorMsg);\n+                    break;\n+                case RECOVERABLE:\n+                    RealmLog.info(errorMsg);\n+                    break;\n+                default:\n+                    throw new IllegalArgumentException(\"Unsupported error category: \" + error.getErrorCode().getCategory());\n+            }\n+        }\n+    };\n+\n+    /**\n+     * Thread pool used when doing network requests against the MongoDB Realm Server.\n+     * <p>\n+     * This pool is only exposed for testing purposes and replacing it while the queue is not\n+     * empty will result in undefined behaviour.\n+     */\n+    @SuppressFBWarnings(\"MS_SHOULD_BE_FINAL\")\n+    public static ThreadPoolExecutor NETWORK_POOL_EXECUTOR = new ThreadPoolExecutor(\n+            10, 10, 0, TimeUnit.MILLISECONDS, new ArrayBlockingQueue<>(100));\n+\n+    private final RealmAppConfiguration config;\n+    private OsJavaNetworkTransport networkTransport;\n+    private final long nativePtr;\n+    private CopyOnWriteArrayList<AuthenticationListener> authListeners = new CopyOnWriteArrayList<>();\n+\n+    public RealmApp(String appId) {", "originalCommit": "d98304d6f7774cfdac5cd3bd396785473728554f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI3ODUwNA==", "url": "https://github.com/realm/realm-java/pull/6757#discussion_r394278504", "bodyText": "same for the public-facing API to interop more friendly with Kotlin...", "author": "nhachicha", "createdAt": "2020-03-18T11:30:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI3NzQ0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg0MjgzNw==", "url": "https://github.com/realm/realm-java/pull/6757#discussion_r394842837", "bodyText": "We have package level annotation files, so everything in io.realm should be marked @Nonnull by default.", "author": "cmelchior", "createdAt": "2020-03-19T07:53:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI3NzQ0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "33f95c47bb01e4e991ed45e8438e6f0d42ce4431", "chunk": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java b/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java\nindex 34e0ce1ab..fa88fdfc7 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java\n\n@@ -283,7 +283,7 @@ public class RealmApp {\n         return null;\n     }\n \n-    public RealmFCMPushNotifications getFSMPushNotifications() {\n+    public RealmPushNotifications getFSMPushNotifications() {\n         // FIXME\n         return null;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI3OTk4OA==", "url": "https://github.com/realm/realm-java/pull/6757#discussion_r394279988", "bodyText": "access token or refresh token? access token expires more frequently, that it doesn't mean the user has logged out?", "author": "nhachicha", "createdAt": "2020-03-18T11:33:00Z", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "diffHunk": "@@ -0,0 +1,413 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.annotation.Nullable;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.realm.internal.RealmNotifier;\n+import io.realm.internal.android.AndroidCapabilities;\n+import io.realm.internal.android.AndroidRealmNotifier;\n+import io.realm.internal.async.RealmAsyncTaskImpl;\n+import io.realm.internal.network.OkHttpNetworkTransport;\n+import io.realm.internal.objectstore.OsJavaNetworkTransport;\n+import io.realm.log.RealmLog;\n+import io.realm.mongodb.RealmMongoDBService;\n+\n+/**\n+ * FIXME\n+ */\n+public class RealmApp {\n+\n+    // Implementation notes:\n+    // The public API's currently only allow for one RealmApp, however this is a restriction\n+    // we might want to lift in the future. So any implementation details so ideally be made\n+    // with that in mind, i.e. keep static state to minimum.\n+\n+    // Default session error handler handler that just output errors to LogCat\n+    private static final SyncSession.ErrorHandler SESSION_NO_OP_ERROR_HANDLER = new SyncSession.ErrorHandler() {\n+        @Override\n+        public void onError(SyncSession session, ObjectServerError error) {\n+            if (error.getErrorCode() == ErrorCode.CLIENT_RESET) {\n+                RealmLog.error(\"Client Reset required for: \" + session.getConfiguration().getServerUrl());\n+                return;\n+            }\n+\n+            String errorMsg = String.format(Locale.US, \"Session Error[%s]: %s\",\n+                    session.getConfiguration().getServerUrl(),\n+                    error.toString());\n+            switch (error.getErrorCode().getCategory()) {\n+                case FATAL:\n+                    RealmLog.error(errorMsg);\n+                    break;\n+                case RECOVERABLE:\n+                    RealmLog.info(errorMsg);\n+                    break;\n+                default:\n+                    throw new IllegalArgumentException(\"Unsupported error category: \" + error.getErrorCode().getCategory());\n+            }\n+        }\n+    };\n+\n+    /**\n+     * Thread pool used when doing network requests against the MongoDB Realm Server.\n+     * <p>\n+     * This pool is only exposed for testing purposes and replacing it while the queue is not\n+     * empty will result in undefined behaviour.\n+     */\n+    @SuppressFBWarnings(\"MS_SHOULD_BE_FINAL\")\n+    public static ThreadPoolExecutor NETWORK_POOL_EXECUTOR = new ThreadPoolExecutor(\n+            10, 10, 0, TimeUnit.MILLISECONDS, new ArrayBlockingQueue<>(100));\n+\n+    private final RealmAppConfiguration config;\n+    private OsJavaNetworkTransport networkTransport;\n+    private final long nativePtr;\n+    private CopyOnWriteArrayList<AuthenticationListener> authListeners = new CopyOnWriteArrayList<>();\n+\n+    public RealmApp(String appId) {\n+        this(new RealmAppConfiguration.Builder(appId).build());\n+    }\n+\n+    /**\n+     * FIXME\n+     * @param config\n+     */\n+    public RealmApp(RealmAppConfiguration config) {\n+        this.config = config;\n+        this.networkTransport = new OkHttpNetworkTransport();\n+        this.nativePtr = nativeCreate(\n+                config.getAppId(),\n+                config.getBaseUrl(),\n+                config.getAppName(),\n+                config.getAppVersion(),\n+                config.getRequestTimeoutMs());\n+    }\n+\n+    /**\n+     * Returns the current user that is logged in and still valid.\n+     * A user is invalidated when he/she logs out or the user's access token expires.", "originalCommit": "d98304d6f7774cfdac5cd3bd396785473728554f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "33f95c47bb01e4e991ed45e8438e6f0d42ce4431", "chunk": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java b/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java\nindex 34e0ce1ab..fa88fdfc7 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java\n\n@@ -283,7 +283,7 @@ public class RealmApp {\n         return null;\n     }\n \n-    public RealmFCMPushNotifications getFSMPushNotifications() {\n+    public RealmPushNotifications getFSMPushNotifications() {\n         // FIXME\n         return null;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI4MjQ1OA==", "url": "https://github.com/realm/realm-java/pull/6757#discussion_r394282458", "bodyText": "This makes it less predictable from which user/sync you're working with since a user  A could be revoked/refresh_token expired, then this will default to another user B which defies the principle of least astonishment... I still think currentUser should be limited to one.", "author": "nhachicha", "createdAt": "2020-03-18T11:37:46Z", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "diffHunk": "@@ -0,0 +1,413 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.annotation.Nullable;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.realm.internal.RealmNotifier;\n+import io.realm.internal.android.AndroidCapabilities;\n+import io.realm.internal.android.AndroidRealmNotifier;\n+import io.realm.internal.async.RealmAsyncTaskImpl;\n+import io.realm.internal.network.OkHttpNetworkTransport;\n+import io.realm.internal.objectstore.OsJavaNetworkTransport;\n+import io.realm.log.RealmLog;\n+import io.realm.mongodb.RealmMongoDBService;\n+\n+/**\n+ * FIXME\n+ */\n+public class RealmApp {\n+\n+    // Implementation notes:\n+    // The public API's currently only allow for one RealmApp, however this is a restriction\n+    // we might want to lift in the future. So any implementation details so ideally be made\n+    // with that in mind, i.e. keep static state to minimum.\n+\n+    // Default session error handler handler that just output errors to LogCat\n+    private static final SyncSession.ErrorHandler SESSION_NO_OP_ERROR_HANDLER = new SyncSession.ErrorHandler() {\n+        @Override\n+        public void onError(SyncSession session, ObjectServerError error) {\n+            if (error.getErrorCode() == ErrorCode.CLIENT_RESET) {\n+                RealmLog.error(\"Client Reset required for: \" + session.getConfiguration().getServerUrl());\n+                return;\n+            }\n+\n+            String errorMsg = String.format(Locale.US, \"Session Error[%s]: %s\",\n+                    session.getConfiguration().getServerUrl(),\n+                    error.toString());\n+            switch (error.getErrorCode().getCategory()) {\n+                case FATAL:\n+                    RealmLog.error(errorMsg);\n+                    break;\n+                case RECOVERABLE:\n+                    RealmLog.info(errorMsg);\n+                    break;\n+                default:\n+                    throw new IllegalArgumentException(\"Unsupported error category: \" + error.getErrorCode().getCategory());\n+            }\n+        }\n+    };\n+\n+    /**\n+     * Thread pool used when doing network requests against the MongoDB Realm Server.\n+     * <p>\n+     * This pool is only exposed for testing purposes and replacing it while the queue is not\n+     * empty will result in undefined behaviour.\n+     */\n+    @SuppressFBWarnings(\"MS_SHOULD_BE_FINAL\")\n+    public static ThreadPoolExecutor NETWORK_POOL_EXECUTOR = new ThreadPoolExecutor(\n+            10, 10, 0, TimeUnit.MILLISECONDS, new ArrayBlockingQueue<>(100));\n+\n+    private final RealmAppConfiguration config;\n+    private OsJavaNetworkTransport networkTransport;\n+    private final long nativePtr;\n+    private CopyOnWriteArrayList<AuthenticationListener> authListeners = new CopyOnWriteArrayList<>();\n+\n+    public RealmApp(String appId) {\n+        this(new RealmAppConfiguration.Builder(appId).build());\n+    }\n+\n+    /**\n+     * FIXME\n+     * @param config\n+     */\n+    public RealmApp(RealmAppConfiguration config) {\n+        this.config = config;\n+        this.networkTransport = new OkHttpNetworkTransport();\n+        this.nativePtr = nativeCreate(\n+                config.getAppId(),\n+                config.getBaseUrl(),\n+                config.getAppName(),\n+                config.getAppVersion(),\n+                config.getRequestTimeoutMs());\n+    }\n+\n+    /**\n+     * Returns the current user that is logged in and still valid.\n+     * A user is invalidated when he/she logs out or the user's access token expires.\n+     * <p>\n+     * If two or more users are logged in, it is the last valid user that is returned by this method.", "originalCommit": "d98304d6f7774cfdac5cd3bd396785473728554f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg0MzcyMw==", "url": "https://github.com/realm/realm-java/pull/6757#discussion_r394843723", "bodyText": "The currentUser semantics have been copied from old Stitch. I'm just describing the current semantics in ObjectStore. We cannot change them for Java alone. I added a note to our TODO list that we need to discuss exactly how this should work. There are other concerns around User lifecycle as well.", "author": "cmelchior", "createdAt": "2020-03-19T07:55:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI4MjQ1OA=="}], "type": "inlineReview", "revised_code": {"commit": "33f95c47bb01e4e991ed45e8438e6f0d42ce4431", "chunk": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java b/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java\nindex 34e0ce1ab..fa88fdfc7 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java\n\n@@ -283,7 +283,7 @@ public class RealmApp {\n         return null;\n     }\n \n-    public RealmFCMPushNotifications getFSMPushNotifications() {\n+    public RealmPushNotifications getFSMPushNotifications() {\n         // FIXME\n         return null;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMwMTgxNQ==", "url": "https://github.com/realm/realm-java/pull/6757#discussion_r394301815", "bodyText": "Naming: I thought we agreed to use Push Notification directly without prefix", "author": "nhachicha", "createdAt": "2020-03-18T12:14:53Z", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "diffHunk": "@@ -0,0 +1,413 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.annotation.Nullable;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.realm.internal.RealmNotifier;\n+import io.realm.internal.android.AndroidCapabilities;\n+import io.realm.internal.android.AndroidRealmNotifier;\n+import io.realm.internal.async.RealmAsyncTaskImpl;\n+import io.realm.internal.network.OkHttpNetworkTransport;\n+import io.realm.internal.objectstore.OsJavaNetworkTransport;\n+import io.realm.log.RealmLog;\n+import io.realm.mongodb.RealmMongoDBService;\n+\n+/**\n+ * FIXME\n+ */\n+public class RealmApp {\n+\n+    // Implementation notes:\n+    // The public API's currently only allow for one RealmApp, however this is a restriction\n+    // we might want to lift in the future. So any implementation details so ideally be made\n+    // with that in mind, i.e. keep static state to minimum.\n+\n+    // Default session error handler handler that just output errors to LogCat\n+    private static final SyncSession.ErrorHandler SESSION_NO_OP_ERROR_HANDLER = new SyncSession.ErrorHandler() {\n+        @Override\n+        public void onError(SyncSession session, ObjectServerError error) {\n+            if (error.getErrorCode() == ErrorCode.CLIENT_RESET) {\n+                RealmLog.error(\"Client Reset required for: \" + session.getConfiguration().getServerUrl());\n+                return;\n+            }\n+\n+            String errorMsg = String.format(Locale.US, \"Session Error[%s]: %s\",\n+                    session.getConfiguration().getServerUrl(),\n+                    error.toString());\n+            switch (error.getErrorCode().getCategory()) {\n+                case FATAL:\n+                    RealmLog.error(errorMsg);\n+                    break;\n+                case RECOVERABLE:\n+                    RealmLog.info(errorMsg);\n+                    break;\n+                default:\n+                    throw new IllegalArgumentException(\"Unsupported error category: \" + error.getErrorCode().getCategory());\n+            }\n+        }\n+    };\n+\n+    /**\n+     * Thread pool used when doing network requests against the MongoDB Realm Server.\n+     * <p>\n+     * This pool is only exposed for testing purposes and replacing it while the queue is not\n+     * empty will result in undefined behaviour.\n+     */\n+    @SuppressFBWarnings(\"MS_SHOULD_BE_FINAL\")\n+    public static ThreadPoolExecutor NETWORK_POOL_EXECUTOR = new ThreadPoolExecutor(\n+            10, 10, 0, TimeUnit.MILLISECONDS, new ArrayBlockingQueue<>(100));\n+\n+    private final RealmAppConfiguration config;\n+    private OsJavaNetworkTransport networkTransport;\n+    private final long nativePtr;\n+    private CopyOnWriteArrayList<AuthenticationListener> authListeners = new CopyOnWriteArrayList<>();\n+\n+    public RealmApp(String appId) {\n+        this(new RealmAppConfiguration.Builder(appId).build());\n+    }\n+\n+    /**\n+     * FIXME\n+     * @param config\n+     */\n+    public RealmApp(RealmAppConfiguration config) {\n+        this.config = config;\n+        this.networkTransport = new OkHttpNetworkTransport();\n+        this.nativePtr = nativeCreate(\n+                config.getAppId(),\n+                config.getBaseUrl(),\n+                config.getAppName(),\n+                config.getAppVersion(),\n+                config.getRequestTimeoutMs());\n+    }\n+\n+    /**\n+     * Returns the current user that is logged in and still valid.\n+     * A user is invalidated when he/she logs out or the user's access token expires.\n+     * <p>\n+     * If two or more users are logged in, it is the last valid user that is returned by this method.\n+     *\n+     * @return current {@link RealmUser} that has logged in and is still valid. {@code null} if no user is logged in or the user has\n+     * expired.\n+     */\n+    @Nullable\n+    public RealmUser currentUser() {\n+        Long userPtr = nativeCurrentUser(nativePtr);\n+        return (userPtr != null) ? new RealmUser(userPtr) : null;\n+    }\n+\n+    /**\n+     * FIXME\n+     * Returns all currently logged in users\n+     * @return\n+     */\n+    public Map<String, RealmUser> allUsers() {\n+        long[] nativeUsers = nativeAllUsers(nativePtr);\n+        HashMap<String, RealmUser> users = new HashMap<>(nativeUsers.length);\n+        for (int i = 0; i < nativeUsers.length; i++) {\n+            RealmUser user = new RealmUser(nativeUsers[i]);\n+            users.put(user.getId(), user);\n+        }\n+        return users;\n+    }\n+\n+    /**\n+     * TODO: Manually set the user returned by {@link #currentUser()}\n+     *\n+     * @param user\n+     */\n+    public static void setCurrentUser(SyncUser user) {\n+        // FIXME\n+    }\n+\n+    /**\n+     * FIXME\n+     *\n+     * @param credentials\n+     * @return\n+     * @throws ObjectServerError\n+     */\n+    public RealmUser login(RealmCredentials credentials) throws ObjectServerError {\n+        checkNull(credentials, \"credentials\");\n+        AtomicReference<RealmUser> user = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        nativeLogin(nativePtr, credentials.osCredentials.getNativePtr(), new OsJavaNetworkTransport.NetworkTransportJNIResultCallback() {\n+            @Override\n+            public void onSuccess(Object result) {\n+                Long nativePtr = (Long) result;\n+                user.set(new RealmUser(nativePtr));\n+            }\n+            @Override\n+            public void onError(String nativeErrorCategory, int nativeErrorCode, String errorMessage) {\n+                ErrorCode code = ErrorCode.fromNativeError(nativeErrorCategory, nativeErrorCode);\n+                if (code == ErrorCode.UNKNOWN) {\n+                    // In case of UNKNOWN errors parse as much error information on as possible.\n+                    String detailedErrorMessage = String.format(\"{%s::%s} %s\", nativeErrorCategory, nativeErrorCode, errorMessage);\n+                    error.set(new ObjectServerError(code, detailedErrorMessage));\n+                } else {\n+                    error.set(new ObjectServerError(code, errorMessage));\n+                }\n+            }\n+        });\n+\n+        // ObjectStore runs all code in the same thread even though it is using a callback.\n+        // So results should be available here.\n+        if (user.get() == null && error.get() == null) {\n+            throw new IllegalStateException(\"Network result callback did not trigger correctly\");\n+        }\n+        if (user.get() != null) {\n+            return user.get();\n+        } else {\n+            throw error.get();\n+        }\n+    }\n+\n+    /**\n+     * FIXME\n+     * @param credentials\n+     * @param callback\n+     * @return\n+     */\n+    public RealmAsyncTask loginAsync(RealmCredentials credentials, Callback<RealmUser> callback) {\n+        checkLooperThread(\"Asynchronous login is only possible from looper threads.\");\n+        return new Request<RealmUser>(SyncManager.NETWORK_POOL_EXECUTOR, callback) {\n+            @Override\n+            public RealmUser run() throws ObjectServerError {\n+                return login(credentials);\n+            }\n+        }.start();\n+    }\n+\n+    public static void logout(RealmUser user) {\n+\n+    }\n+    public RealmAsyncTask logoutAsync(RealmUser user, Callback<Void> callback) {\n+        return null;\n+    }\n+\n+    public RealmUser registerWithEmail(String email, String password) {\n+        return null;\n+    }\n+    public RealmAsyncTask registerWithEmailAsync(String email, String password, Callback<RealmUser> callback) {\n+        return null;\n+    }\n+    public RealmUser confirmUser(String token, String tokenId) {\n+        return null;\n+    }\n+    public RealmAsyncTask confirmUserAsync(String token, String tokenId, Callback<Void> callback) {\n+        return null;\n+    }\n+    public void resendConfirmationEmail(String email) {\n+    }\n+    public RealmAsyncTask resendConfirmationEmailAsync(String email, Callback<Void> callback) {\n+        return null;\n+    }\n+    public RealmUser resetPassword(String token, String tokenId, String password) {\n+        return null;\n+    }\n+    public RealmAsyncTask resetPasswordAsync(String token, String tokenId, String password, Callback<Void> callback) {\n+        return null;\n+    }\n+    public RealmUser sendResetPasswordEmail(String email) {\n+        return null;\n+    }\n+    public RealmAsyncTask sendResetPasswordEmailAsync(String email, Callback<Void> callback) {\n+        return null;\n+    }\n+\n+    public SyncSession getSyncSession(SyncConfiguration config) {\n+        return null;\n+    }\n+\n+    public void refreshConnections() {\n+\n+    }\n+\n+    /**\n+     * Sets a global authentication listener that will be notified about User events like\n+     * login and logout.\n+     *\n+     * @param listener listener to register.\n+     * @throws IllegalArgumentException if {@code listener} is {@code null}.\n+     */\n+    public void addAuthenticationListener(AuthenticationListener listener) {\n+        //noinspection ConstantConditions\n+        if (listener == null) {\n+            throw new IllegalArgumentException(\"Non-null 'listener' required.\");\n+        }\n+        authListeners.add(listener);\n+    }\n+\n+\n+    /**\n+     * Removes the provided global authentication listener.\n+     *\n+     * @param listener listener to remove.\n+     */\n+    public void removeAuthenticationListener(AuthenticationListener listener) {\n+        //noinspection ConstantConditions\n+        if (listener == null) {\n+            return;\n+        }\n+        authListeners.remove(listener);\n+    }\n+\n+    // Services entry point\n+    public RealmFunctions getFunctions() {\n+        // FIXME\n+        return null;\n+    }\n+\n+    public RealmFCMPushNotifications getFSMPushNotifications() {", "originalCommit": "d98304d6f7774cfdac5cd3bd396785473728554f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDgzMzg2Mg==", "url": "https://github.com/realm/realm-java/pull/6757#discussion_r394833862", "bodyText": "I don't remember exactly. I'll change it.", "author": "cmelchior", "createdAt": "2020-03-19T07:30:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMwMTgxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "33f95c47bb01e4e991ed45e8438e6f0d42ce4431", "chunk": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java b/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java\nindex 34e0ce1ab..fa88fdfc7 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java\n\n@@ -283,7 +283,7 @@ public class RealmApp {\n         return null;\n     }\n \n-    public RealmFCMPushNotifications getFSMPushNotifications() {\n+    public RealmPushNotifications getFSMPushNotifications() {\n         // FIXME\n         return null;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMwNDI4NA==", "url": "https://github.com/realm/realm-java/pull/6757#discussion_r394304284", "bodyText": "Could not be posted, instead ... and you can fallback to print the error on the stderr", "author": "nhachicha", "createdAt": "2020-03-18T12:19:46Z", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "diffHunk": "@@ -0,0 +1,413 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.annotation.Nullable;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import io.realm.internal.RealmNotifier;\n+import io.realm.internal.android.AndroidCapabilities;\n+import io.realm.internal.android.AndroidRealmNotifier;\n+import io.realm.internal.async.RealmAsyncTaskImpl;\n+import io.realm.internal.network.OkHttpNetworkTransport;\n+import io.realm.internal.objectstore.OsJavaNetworkTransport;\n+import io.realm.log.RealmLog;\n+import io.realm.mongodb.RealmMongoDBService;\n+\n+/**\n+ * FIXME\n+ */\n+public class RealmApp {\n+\n+    // Implementation notes:\n+    // The public API's currently only allow for one RealmApp, however this is a restriction\n+    // we might want to lift in the future. So any implementation details so ideally be made\n+    // with that in mind, i.e. keep static state to minimum.\n+\n+    // Default session error handler handler that just output errors to LogCat\n+    private static final SyncSession.ErrorHandler SESSION_NO_OP_ERROR_HANDLER = new SyncSession.ErrorHandler() {\n+        @Override\n+        public void onError(SyncSession session, ObjectServerError error) {\n+            if (error.getErrorCode() == ErrorCode.CLIENT_RESET) {\n+                RealmLog.error(\"Client Reset required for: \" + session.getConfiguration().getServerUrl());\n+                return;\n+            }\n+\n+            String errorMsg = String.format(Locale.US, \"Session Error[%s]: %s\",\n+                    session.getConfiguration().getServerUrl(),\n+                    error.toString());\n+            switch (error.getErrorCode().getCategory()) {\n+                case FATAL:\n+                    RealmLog.error(errorMsg);\n+                    break;\n+                case RECOVERABLE:\n+                    RealmLog.info(errorMsg);\n+                    break;\n+                default:\n+                    throw new IllegalArgumentException(\"Unsupported error category: \" + error.getErrorCode().getCategory());\n+            }\n+        }\n+    };\n+\n+    /**\n+     * Thread pool used when doing network requests against the MongoDB Realm Server.\n+     * <p>\n+     * This pool is only exposed for testing purposes and replacing it while the queue is not\n+     * empty will result in undefined behaviour.\n+     */\n+    @SuppressFBWarnings(\"MS_SHOULD_BE_FINAL\")\n+    public static ThreadPoolExecutor NETWORK_POOL_EXECUTOR = new ThreadPoolExecutor(\n+            10, 10, 0, TimeUnit.MILLISECONDS, new ArrayBlockingQueue<>(100));\n+\n+    private final RealmAppConfiguration config;\n+    private OsJavaNetworkTransport networkTransport;\n+    private final long nativePtr;\n+    private CopyOnWriteArrayList<AuthenticationListener> authListeners = new CopyOnWriteArrayList<>();\n+\n+    public RealmApp(String appId) {\n+        this(new RealmAppConfiguration.Builder(appId).build());\n+    }\n+\n+    /**\n+     * FIXME\n+     * @param config\n+     */\n+    public RealmApp(RealmAppConfiguration config) {\n+        this.config = config;\n+        this.networkTransport = new OkHttpNetworkTransport();\n+        this.nativePtr = nativeCreate(\n+                config.getAppId(),\n+                config.getBaseUrl(),\n+                config.getAppName(),\n+                config.getAppVersion(),\n+                config.getRequestTimeoutMs());\n+    }\n+\n+    /**\n+     * Returns the current user that is logged in and still valid.\n+     * A user is invalidated when he/she logs out or the user's access token expires.\n+     * <p>\n+     * If two or more users are logged in, it is the last valid user that is returned by this method.\n+     *\n+     * @return current {@link RealmUser} that has logged in and is still valid. {@code null} if no user is logged in or the user has\n+     * expired.\n+     */\n+    @Nullable\n+    public RealmUser currentUser() {\n+        Long userPtr = nativeCurrentUser(nativePtr);\n+        return (userPtr != null) ? new RealmUser(userPtr) : null;\n+    }\n+\n+    /**\n+     * FIXME\n+     * Returns all currently logged in users\n+     * @return\n+     */\n+    public Map<String, RealmUser> allUsers() {\n+        long[] nativeUsers = nativeAllUsers(nativePtr);\n+        HashMap<String, RealmUser> users = new HashMap<>(nativeUsers.length);\n+        for (int i = 0; i < nativeUsers.length; i++) {\n+            RealmUser user = new RealmUser(nativeUsers[i]);\n+            users.put(user.getId(), user);\n+        }\n+        return users;\n+    }\n+\n+    /**\n+     * TODO: Manually set the user returned by {@link #currentUser()}\n+     *\n+     * @param user\n+     */\n+    public static void setCurrentUser(SyncUser user) {\n+        // FIXME\n+    }\n+\n+    /**\n+     * FIXME\n+     *\n+     * @param credentials\n+     * @return\n+     * @throws ObjectServerError\n+     */\n+    public RealmUser login(RealmCredentials credentials) throws ObjectServerError {\n+        checkNull(credentials, \"credentials\");\n+        AtomicReference<RealmUser> user = new AtomicReference<>(null);\n+        AtomicReference<ObjectServerError> error = new AtomicReference<>(null);\n+        nativeLogin(nativePtr, credentials.osCredentials.getNativePtr(), new OsJavaNetworkTransport.NetworkTransportJNIResultCallback() {\n+            @Override\n+            public void onSuccess(Object result) {\n+                Long nativePtr = (Long) result;\n+                user.set(new RealmUser(nativePtr));\n+            }\n+            @Override\n+            public void onError(String nativeErrorCategory, int nativeErrorCode, String errorMessage) {\n+                ErrorCode code = ErrorCode.fromNativeError(nativeErrorCategory, nativeErrorCode);\n+                if (code == ErrorCode.UNKNOWN) {\n+                    // In case of UNKNOWN errors parse as much error information on as possible.\n+                    String detailedErrorMessage = String.format(\"{%s::%s} %s\", nativeErrorCategory, nativeErrorCode, errorMessage);\n+                    error.set(new ObjectServerError(code, detailedErrorMessage));\n+                } else {\n+                    error.set(new ObjectServerError(code, errorMessage));\n+                }\n+            }\n+        });\n+\n+        // ObjectStore runs all code in the same thread even though it is using a callback.\n+        // So results should be available here.\n+        if (user.get() == null && error.get() == null) {\n+            throw new IllegalStateException(\"Network result callback did not trigger correctly\");\n+        }\n+        if (user.get() != null) {\n+            return user.get();\n+        } else {\n+            throw error.get();\n+        }\n+    }\n+\n+    /**\n+     * FIXME\n+     * @param credentials\n+     * @param callback\n+     * @return\n+     */\n+    public RealmAsyncTask loginAsync(RealmCredentials credentials, Callback<RealmUser> callback) {\n+        checkLooperThread(\"Asynchronous login is only possible from looper threads.\");\n+        return new Request<RealmUser>(SyncManager.NETWORK_POOL_EXECUTOR, callback) {\n+            @Override\n+            public RealmUser run() throws ObjectServerError {\n+                return login(credentials);\n+            }\n+        }.start();\n+    }\n+\n+    public static void logout(RealmUser user) {\n+\n+    }\n+    public RealmAsyncTask logoutAsync(RealmUser user, Callback<Void> callback) {\n+        return null;\n+    }\n+\n+    public RealmUser registerWithEmail(String email, String password) {\n+        return null;\n+    }\n+    public RealmAsyncTask registerWithEmailAsync(String email, String password, Callback<RealmUser> callback) {\n+        return null;\n+    }\n+    public RealmUser confirmUser(String token, String tokenId) {\n+        return null;\n+    }\n+    public RealmAsyncTask confirmUserAsync(String token, String tokenId, Callback<Void> callback) {\n+        return null;\n+    }\n+    public void resendConfirmationEmail(String email) {\n+    }\n+    public RealmAsyncTask resendConfirmationEmailAsync(String email, Callback<Void> callback) {\n+        return null;\n+    }\n+    public RealmUser resetPassword(String token, String tokenId, String password) {\n+        return null;\n+    }\n+    public RealmAsyncTask resetPasswordAsync(String token, String tokenId, String password, Callback<Void> callback) {\n+        return null;\n+    }\n+    public RealmUser sendResetPasswordEmail(String email) {\n+        return null;\n+    }\n+    public RealmAsyncTask sendResetPasswordEmailAsync(String email, Callback<Void> callback) {\n+        return null;\n+    }\n+\n+    public SyncSession getSyncSession(SyncConfiguration config) {\n+        return null;\n+    }\n+\n+    public void refreshConnections() {\n+\n+    }\n+\n+    /**\n+     * Sets a global authentication listener that will be notified about User events like\n+     * login and logout.\n+     *\n+     * @param listener listener to register.\n+     * @throws IllegalArgumentException if {@code listener} is {@code null}.\n+     */\n+    public void addAuthenticationListener(AuthenticationListener listener) {\n+        //noinspection ConstantConditions\n+        if (listener == null) {\n+            throw new IllegalArgumentException(\"Non-null 'listener' required.\");\n+        }\n+        authListeners.add(listener);\n+    }\n+\n+\n+    /**\n+     * Removes the provided global authentication listener.\n+     *\n+     * @param listener listener to remove.\n+     */\n+    public void removeAuthenticationListener(AuthenticationListener listener) {\n+        //noinspection ConstantConditions\n+        if (listener == null) {\n+            return;\n+        }\n+        authListeners.remove(listener);\n+    }\n+\n+    // Services entry point\n+    public RealmFunctions getFunctions() {\n+        // FIXME\n+        return null;\n+    }\n+\n+    public RealmFCMPushNotifications getFSMPushNotifications() {\n+        // FIXME\n+        return null;\n+\n+    }\n+\n+    public RealmMongoDBService getMongoDBService() {\n+        // FIXME\n+        return null;\n+    }\n+\n+    // Private API's for now.\n+\n+    /**\n+     * Exposed for testing.\n+     *\n+     * Swap the currently configured network transport with the provided one.\n+     * This should only be done if no network requests are currently running.\n+     */\n+    void setNetworkTransport(OsJavaNetworkTransport transport) {\n+        networkTransport = transport;\n+    }\n+\n+    OsJavaNetworkTransport getNetworkTransport() {\n+        return networkTransport;\n+    }\n+\n+    private static void checkLooperThread(String errorMessage) {\n+        AndroidCapabilities capabilities = new AndroidCapabilities();\n+        capabilities.checkCanDeliverNotification(errorMessage);\n+    }\n+\n+    private void checkNull(@Nullable Object argValue, String argName) {\n+        if (argValue == null) {\n+            throw new IllegalArgumentException(\"Nonnull '\" + argName + \"' required.\");\n+        }\n+    }\n+\n+    // Class wrapping requests made against MongoDB Realm. Is also responsible for calling with success/error on the\n+    // correct thread.\n+    private static abstract class Request<T> {\n+        @Nullable\n+        private final RealmApp.Callback<T> callback;\n+        private final RealmNotifier handler;\n+        private final ThreadPoolExecutor networkPoolExecutor;\n+\n+        Request(ThreadPoolExecutor networkPoolExecutor, @Nullable RealmApp.Callback<T> callback) {\n+            this.callback = callback;\n+            this.handler = new AndroidRealmNotifier(null, new AndroidCapabilities());\n+            this.networkPoolExecutor = networkPoolExecutor;\n+        }\n+\n+        // Implements the request. Return the current sync user if the request succeeded. Otherwise throw an error.\n+        public abstract T run() throws ObjectServerError;\n+\n+        // Start the request\n+        public RealmAsyncTask start() {\n+            Future<?> authenticateRequest = networkPoolExecutor.submit(new Runnable() {\n+                @Override\n+                public void run() {\n+                    try {\n+                        postSuccess(Request.this.run());\n+                    } catch (ObjectServerError e) {\n+                        postError(e);\n+                    } catch (Throwable e) {\n+                        postError(new ObjectServerError(ErrorCode.UNKNOWN, \"Unexpected error\", e));\n+                    }\n+                }\n+            });\n+            return new RealmAsyncTaskImpl(authenticateRequest, networkPoolExecutor);\n+        }\n+\n+        private void postError(final ObjectServerError error) {\n+            boolean errorHandled = false;\n+            if (callback != null) {\n+                Runnable action = new Runnable() {\n+                    @Override\n+                    public void run() {\n+                        callback.onError(error);\n+                    }\n+                };\n+                errorHandled = handler.post(action);\n+            }\n+\n+            if (!errorHandled) {\n+                RealmLog.error(error, \"An error was thrown, but could not be handled.\");", "originalCommit": "d98304d6f7774cfdac5cd3bd396785473728554f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "33f95c47bb01e4e991ed45e8438e6f0d42ce4431", "chunk": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java b/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java\nindex 34e0ce1ab..fa88fdfc7 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java\n\n@@ -283,7 +283,7 @@ public class RealmApp {\n         return null;\n     }\n \n-    public RealmFCMPushNotifications getFSMPushNotifications() {\n+    public RealmPushNotifications getFSMPushNotifications() {\n         // FIXME\n         return null;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMwNjk0NA==", "url": "https://github.com/realm/realm-java/pull/6757#discussion_r394306944", "bodyText": "TODO: maybe change to INFO for the release", "author": "nhachicha", "createdAt": "2020-03-18T12:24:41Z", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm;\n+\n+import android.content.Context;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.Nullable;\n+\n+import io.realm.log.LogLevel;\n+\n+/**\n+ * FIXME\n+ */\n+public class RealmAppConfiguration {\n+\n+    private final String appId;\n+    private final String appName;\n+    private final String appVersion;\n+    private final String baseUrl;\n+    private final Context context;\n+    private final SyncSession.ErrorHandler defaultErrorHandler;\n+    @Nullable private final byte[] encryptionKey;\n+    private final long logLevel;\n+    private final long requestTimeoutMs;\n+\n+    public RealmAppConfiguration(String appId,\n+                                 String appName,\n+                                 String appVersion,\n+                                 String baseUrl,\n+                                 Context context,\n+                                 SyncSession.ErrorHandler defaultErrorHandler,\n+                                 @Nullable byte[] encryptionKey,\n+                                 long logLevel,\n+                                 long requestTimeoutMs) {\n+\n+        this.appId = appId;\n+        this.appName = appName;\n+        this.appVersion = appVersion;\n+        this.baseUrl = baseUrl;\n+        this.context = context;\n+        this.defaultErrorHandler = defaultErrorHandler;\n+        this.encryptionKey = (encryptionKey == null) ? null : Arrays.copyOf(encryptionKey, encryptionKey.length);\n+        this.logLevel = logLevel;\n+        this.requestTimeoutMs = requestTimeoutMs;\n+    }\n+\n+    /**\n+     * FIXME\n+     * @return\n+     */\n+    public String getAppId() {\n+        return appId;\n+    }\n+\n+    /**\n+     * FIXME\n+     * @return\n+     */\n+    public String getAppName() {\n+        return appName;\n+    }\n+\n+    /**\n+     * FIXME\n+     * @return\n+     */\n+    public String getAppVersion() {\n+        return appVersion;\n+    }\n+\n+    /**\n+     * FIXME\n+     * @return\n+     */\n+    public String getBaseUrl() {\n+        return baseUrl;\n+    }\n+\n+    /**\n+     * FIXME\n+     * @return\n+     */\n+    public Context getContext() {\n+        return context;\n+    }\n+\n+    /**\n+     * FIXME\n+     * @return\n+     */\n+    public SyncSession.ErrorHandler getDefaultErrorHandler() {\n+        return defaultErrorHandler;\n+    }\n+\n+    /**\n+     * FIXME\n+     * @return\n+     */\n+    public byte[] getEncryptionKey() {\n+        return encryptionKey == null ? null : Arrays.copyOf(encryptionKey, encryptionKey.length);\n+    }\n+\n+    /**\n+     * FIXME\n+     * @return\n+     */\n+    public long getLogLevel() {\n+        return logLevel;\n+    }\n+\n+    /**\n+     * FIXME\n+     * @return\n+     */\n+    public long getRequestTimeoutMs() {\n+        return requestTimeoutMs;\n+    }\n+\n+    /**\n+     * FIXME\n+     */\n+    public static class Builder {\n+        private String appId;\n+        private String appName;\n+        private String appVersion;\n+        private String baseUrl;\n+        private Context context;\n+        private SyncSession.ErrorHandler defaultErrorHandler;\n+        private byte[] encryptionKey;\n+        private long logLevel = LogLevel.WARN;", "originalCommit": "d98304d6f7774cfdac5cd3bd396785473728554f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDgzNTk0OQ==", "url": "https://github.com/realm/realm-java/pull/6757#discussion_r394835949", "bodyText": "Added TODO, so we remember to visit", "author": "cmelchior", "createdAt": "2020-03-19T07:36:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMwNjk0NA=="}], "type": "inlineReview", "revised_code": {"commit": "33f95c47bb01e4e991ed45e8438e6f0d42ce4431", "chunk": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java b/realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java\nindex 8bc932f7f..70a3ad1e5 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java\n\n@@ -39,7 +39,7 @@ public class RealmAppConfiguration {\n     private final long logLevel;\n     private final long requestTimeoutMs;\n \n-    public RealmAppConfiguration(String appId,\n+    private RealmAppConfiguration(String appId,\n                                  String appName,\n                                  String appVersion,\n                                  String baseUrl,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMwNzc3Nw==", "url": "https://github.com/realm/realm-java/pull/6757#discussion_r394307777", "bodyText": "ctor can be private", "author": "nhachicha", "createdAt": "2020-03-18T12:26:07Z", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java", "diffHunk": "@@ -0,0 +1,256 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm;\n+\n+import android.content.Context;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.annotation.Nullable;\n+\n+import io.realm.log.LogLevel;\n+\n+/**\n+ * FIXME\n+ */\n+public class RealmAppConfiguration {\n+\n+    private final String appId;\n+    private final String appName;\n+    private final String appVersion;\n+    private final String baseUrl;\n+    private final Context context;\n+    private final SyncSession.ErrorHandler defaultErrorHandler;\n+    @Nullable private final byte[] encryptionKey;\n+    private final long logLevel;\n+    private final long requestTimeoutMs;\n+\n+    public RealmAppConfiguration(String appId,", "originalCommit": "d98304d6f7774cfdac5cd3bd396785473728554f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "33f95c47bb01e4e991ed45e8438e6f0d42ce4431", "chunk": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java b/realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java\nindex 8bc932f7f..70a3ad1e5 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java\n\n@@ -39,7 +39,7 @@ public class RealmAppConfiguration {\n     private final long logLevel;\n     private final long requestTimeoutMs;\n \n-    public RealmAppConfiguration(String appId,\n+    private RealmAppConfiguration(String appId,\n                                  String appName,\n                                  String appVersion,\n                                  String baseUrl,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMxMTc4OA==", "url": "https://github.com/realm/realm-java/pull/6757#discussion_r394311788", "bodyText": "TODO: doc might not be up-to-date", "author": "nhachicha", "createdAt": "2020-03-18T12:33:18Z", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmCredentials.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm;\n+\n+import io.realm.internal.Util;\n+import io.realm.internal.objectstore.OsAppCredentials;\n+\n+\n+/**\n+ * Credentials represent a login with a 3rd party login provider in an OAuth2 login flow, and are used by the Realm", "originalCommit": "d98304d6f7774cfdac5cd3bd396785473728554f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg0NTY0NQ==", "url": "https://github.com/realm/realm-java/pull/6757#discussion_r394845645", "bodyText": "Added to the list", "author": "cmelchior", "createdAt": "2020-03-19T07:59:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMxMTc4OA=="}], "type": "inlineReview", "revised_code": {"commit": "33f95c47bb01e4e991ed45e8438e6f0d42ce4431", "chunk": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/RealmCredentials.java b/realm/realm-library/src/objectServer/java/io/realm/RealmCredentials.java\nindex 55881f252..a71970c5a 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/RealmCredentials.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/RealmCredentials.java\n\n@@ -21,6 +21,8 @@ import io.realm.internal.objectstore.OsAppCredentials;\n \n \n /**\n+ * FIXME: Revisit this description when all providers are implemented.\n+ *\n  * Credentials represent a login with a 3rd party login provider in an OAuth2 login flow, and are used by the Realm\n  * Object Server to verify the user and grant access.\n  * <p>\n"}}, {"oid": "33f95c47bb01e4e991ed45e8438e6f0d42ce4431", "url": "https://github.com/realm/realm-java/commit/33f95c47bb01e4e991ed45e8438e6f0d42ce4431", "message": "PR feedback", "committedDate": "2020-03-19T08:00:43Z", "type": "commit"}, {"oid": "18ed057b2ee74985148cfbc25c3fe37f1d611167", "url": "https://github.com/realm/realm-java/commit/18ed057b2ee74985148cfbc25c3fe37f1d611167", "message": "More PR feedback", "committedDate": "2020-03-19T08:06:18Z", "type": "commit"}, {"oid": "30a92829a32160cc46a954d1286bec790109be46", "url": "https://github.com/realm/realm-java/commit/30a92829a32160cc46a954d1286bec790109be46", "message": "Apply suggestions from code review\n\nCo-Authored-By: Nabil Hachicha <nh@realm.io>", "committedDate": "2020-03-19T08:12:14Z", "type": "commit"}, {"oid": "5c42f2a3260edb90748202861871d30141d462d7", "url": "https://github.com/realm/realm-java/commit/5c42f2a3260edb90748202861871d30141d462d7", "message": "Added missing FIXMEs", "committedDate": "2020-03-19T08:23:50Z", "type": "commit"}, {"oid": "885ea91b56a2c68d70f8a094e0df06e7128704b2", "url": "https://github.com/realm/realm-java/commit/885ea91b56a2c68d70f8a094e0df06e7128704b2", "message": "Merge branch 'cm/realmapp' of https://github.com/realm/realm-java into cm/realmapp", "committedDate": "2020-03-19T08:24:26Z", "type": "commit"}, {"oid": "4fa271655777d6d7c031ba12282979d32fda4e6e", "url": "https://github.com/realm/realm-java/commit/4fa271655777d6d7c031ba12282979d32fda4e6e", "message": "Add missing include", "committedDate": "2020-03-19T08:37:45Z", "type": "commit"}, {"oid": "d5fc3afc395cf3236b46ca1b6003d46347f886ce", "url": "https://github.com/realm/realm-java/commit/d5fc3afc395cf3236b46ca1b6003d46347f886ce", "message": "Fix namespace", "committedDate": "2020-03-19T08:58:37Z", "type": "commit"}, {"oid": "38a5db8b4483068b75d6513406291fd0b2560e65", "url": "https://github.com/realm/realm-java/commit/38a5db8b4483068b75d6513406291fd0b2560e65", "message": "Merge branch 'v10' into cm/realmapp\n\n# Conflicts:\n#\ttools/sync_test_server/ros/tsconfig.json", "committedDate": "2020-03-19T13:28:46Z", "type": "commit"}]}