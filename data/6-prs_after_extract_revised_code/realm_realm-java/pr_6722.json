{"pr_number": 6722, "pr_title": "Add support for MongoDB datatypes: Decimal128 and ObjectId", "pr_createdAt": "2020-01-14T13:45:25Z", "pr_url": "https://github.com/realm/realm-java/pull/6722", "timeline": [{"oid": "28bdd4299d32df0c0b269c359fbe9b5fa93b6b68", "url": "https://github.com/realm/realm-java/commit/28bdd4299d32df0c0b269c359fbe9b5fa93b6b68", "message": "Preliminary support for ObjectId and Decimal128", "committedDate": "2020-01-14T12:55:29Z", "type": "commit"}, {"oid": "ff0ca74b1f164c628ea0caf196c71ad0867bbf70", "url": "https://github.com/realm/realm-java/commit/ff0ca74b1f164c628ea0caf196c71ad0867bbf70", "message": "Initial Row and Annotation processor support", "committedDate": "2020-01-14T23:33:46Z", "type": "commit"}, {"oid": "fda6bcea1cb1e3725d8a0c98be1873b3bf6b4ee9", "url": "https://github.com/realm/realm-java/commit/fda6bcea1cb1e3725d8a0c98be1873b3bf6b4ee9", "message": "Add more missing API pieces used by the annotation processor", "committedDate": "2020-01-15T21:25:05Z", "type": "commit"}, {"oid": "228d4691fc55db0c926be71e8e210b43c08df06d", "url": "https://github.com/realm/realm-java/commit/228d4691fc55db0c926be71e8e210b43c08df06d", "message": "Add annotation processor tests", "committedDate": "2020-01-15T22:32:37Z", "type": "commit"}, {"oid": "8eabcd289ee70380391e8cecbb9dd5bd8a34fb78", "url": "https://github.com/realm/realm-java/commit/8eabcd289ee70380391e8cecbb9dd5bd8a34fb78", "message": "Add query methods", "committedDate": "2020-01-16T08:40:09Z", "type": "commit"}, {"oid": "d21e887893c8ab8a568750bc5bc839966f8bc522", "url": "https://github.com/realm/realm-java/commit/d21e887893c8ab8a568750bc5bc839966f8bc522", "message": "Add Java query API", "committedDate": "2020-01-16T12:54:42Z", "type": "commit"}, {"oid": "e0f371c105f6048df26c19690b3abbb33e46d47e", "url": "https://github.com/realm/realm-java/commit/e0f371c105f6048df26c19690b3abbb33e46d47e", "message": "Add stubs for query primitives", "committedDate": "2020-01-16T15:25:16Z", "type": "commit"}, {"oid": "c13d5d8bbb6622f49d08099d4b1a086804604f92", "url": "https://github.com/realm/realm-java/commit/c13d5d8bbb6622f49d08099d4b1a086804604f92", "message": "Add preliminary support to RealmResults batch updates and DynamicRealmObject", "committedDate": "2020-01-17T16:47:03Z", "type": "commit"}, {"oid": "47eead7c4ac4d6fbb3592a68c5df06a2572abf67", "url": "https://github.com/realm/realm-java/commit/47eead7c4ac4d6fbb3592a68c5df06a2572abf67", "message": "Add missing methods for Realm.create(Class, ObjectId)", "committedDate": "2020-01-17T21:00:21Z", "type": "commit"}, {"oid": "1e5eea7d3cce528a30da56b5d09a573060f69991", "url": "https://github.com/realm/realm-java/commit/1e5eea7d3cce528a30da56b5d09a573060f69991", "message": "Fix compiler errors", "committedDate": "2020-01-29T07:45:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIxOTQ2NA==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r378219464", "bodyText": "maybe suffix these methods with Decimale128/ObjectId to make them easy to navigate/less ambiguous", "author": "nhachicha", "createdAt": "2020-02-12T12:26:29Z", "path": "realm/realm-library/src/main/java/io/realm/internal/TableQuery.java", "diffHunk": "@@ -638,6 +718,30 @@ public void alwaysFalse() {\n \n     private native void nativeContains(long nativeQueryPtr, long[] columnKeys, long[] tablePtrs, String value, boolean caseSensitive);\n \n+    private native void nativeEqual(long nativeQueryPtr, long[] columnIndex, long[] tablePtrs, long high, long low);", "originalCommit": "1e5eea7d3cce528a30da56b5d09a573060f69991", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6b7d136ecaf16ea4c04537763fe39b7befa48a8d", "chunk": "diff --git a/realm/realm-library/src/main/java/io/realm/internal/TableQuery.java b/realm/realm-library/src/main/java/io/realm/internal/TableQuery.java\nindex b10de798f..1e7ace161 100644\n--- a/realm/realm-library/src/main/java/io/realm/internal/TableQuery.java\n+++ b/realm/realm-library/src/main/java/io/realm/internal/TableQuery.java\n\n@@ -718,29 +718,29 @@ public class TableQuery implements NativeObject {\n \n     private native void nativeContains(long nativeQueryPtr, long[] columnKeys, long[] tablePtrs, String value, boolean caseSensitive);\n \n-    private native void nativeEqual(long nativeQueryPtr, long[] columnIndex, long[] tablePtrs, long high, long low);\n+    private native void nativeEqualDecimal128(long nativeQueryPtr, long[] columnIndex, long[] tablePtrs, long low, long high);\n \n-    private native void nativeNotEqual(long nativeQueryPtr, long[] columnIndex, long[] tablePtrs, long high, long low);\n+    private native void nativeNotEqualDecimal128(long nativeQueryPtr, long[] columnIndex, long[] tablePtrs, long low, long high);\n \n-    private native void nativeGreater(long nativeQueryPtr, long[] columnIndex, long[] tablePtrs, long high, long low);\n+    private native void nativeGreaterDecimal128(long nativeQueryPtr, long[] columnIndex, long[] tablePtrs, long low, long high);\n \n-    private native void nativeGreaterEqual(long nativeQueryPtr, long[] columnIndex, long[] tablePtrs, long high, long low);\n+    private native void nativeGreaterEqualDecimal128(long nativeQueryPtr, long[] columnIndex, long[] tablePtrs, long low, long high);\n \n-    private native void nativeLess(long nativeQueryPtr, long[] columnIndex, long[] tablePtrs, long high, long low);\n+    private native void nativeLessDecimal128(long nativeQueryPtr, long[] columnIndex, long[] tablePtrs, long low, long high);\n \n-    private native void nativeLessEqual(long nativeQueryPtr, long[] columnIndex, long[] tablePtrs, long high, long low);\n+    private native void nativeLessEqualDecimal128(long nativeQueryPtr, long[] columnIndex, long[] tablePtrs, long low, long high);\n \n-    private native void nativeEqualObjectId(long nativeQueryPtr, long[] columnIndex, long[] tablePtrs, byte[] data);\n+    private native void nativeEqualObjectId(long nativeQueryPtr, long[] columnIndex, long[] tablePtrs, String data);\n \n-    private native void nativeNotEqualObjectId(long nativeQueryPtr, long[] columnIndex, long[] tablePtrs, byte[] data);\n+    private native void nativeNotEqualObjectId(long nativeQueryPtr, long[] columnIndex, long[] tablePtrs, String data);\n \n-    private native void nativeGreaterObjectId(long nativeQueryPtr, long[] columnIndex, long[] tablePtrs, byte[] data);\n+    private native void nativeGreaterObjectId(long nativeQueryPtr, long[] columnIndex, long[] tablePtrs, String data);\n \n-    private native void nativeGreaterEqualObjectId(long nativeQueryPtr, long[] columnIndex, long[] tablePtrs, byte[] data);\n+    private native void nativeGreaterEqualObjectId(long nativeQueryPtr, long[] columnIndex, long[] tablePtrs, String data);\n \n-    private native void nativeLessObjectId(long nativeQueryPtr, long[] columnIndex, long[] tablePtrs, byte[] data);\n+    private native void nativeLessObjectId(long nativeQueryPtr, long[] columnIndex, long[] tablePtrs, String data);\n \n-    private native void nativeLessEqualObjectId(long nativeQueryPtr, long[] columnIndex, long[] tablePtrs, byte[] data);\n+    private native void nativeLessEqualObjectId(long nativeQueryPtr, long[] columnIndex, long[] tablePtrs, String data);\n \n     private native void nativeIsEmpty(long nativePtr, long[] columnKeys, long[] tablePtrs);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODIyMjIzNw==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r378222237", "bodyText": "missed throwing IllegalStateException", "author": "nhachicha", "createdAt": "2020-02-12T12:32:53Z", "path": "realm/realm-library/src/main/java/io/realm/internal/PendingRow.java", "diffHunk": "@@ -198,6 +211,16 @@ public void setNull(long columnKey) {\n         throw new IllegalStateException(QUERY_NOT_RETURNED_MESSAGE);\n     }\n \n+    @Override\n+    public void setDecimal128(long columnKey, Decimal128 value) {\n+", "originalCommit": "1e5eea7d3cce528a30da56b5d09a573060f69991", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8167f6eed95259c358e766b7e6bb75d799cb142f", "chunk": "diff --git a/realm/realm-library/src/main/java/io/realm/internal/PendingRow.java b/realm/realm-library/src/main/java/io/realm/internal/PendingRow.java\nindex 9526e7ed7..f95bf2a13 100644\n--- a/realm/realm-library/src/main/java/io/realm/internal/PendingRow.java\n+++ b/realm/realm-library/src/main/java/io/realm/internal/PendingRow.java\n\n@@ -213,12 +213,12 @@ public class PendingRow implements Row {\n \n     @Override\n     public void setDecimal128(long columnKey, Decimal128 value) {\n-\n+        throw new IllegalStateException(QUERY_NOT_RETURNED_MESSAGE);\n     }\n \n     @Override\n     public void setObjectId(long columnKey, ObjectId value) {\n-\n+        throw new IllegalStateException(QUERY_NOT_RETURNED_MESSAGE);\n     }\n \n     @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMyMDQyOQ==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r378320429", "bodyText": "formatting", "author": "nhachicha", "createdAt": "2020-02-12T15:23:00Z", "path": "realm/realm-library/src/main/java/io/realm/internal/InvalidRow.java", "diffHunk": "@@ -94,6 +97,15 @@ public String getString(long columnKey) {\n         throw getStubException();\n     }\n \n+    @Override\n+    public Decimal128 getDecimal128(long columnKey) {\n+        throw getStubException();    }", "originalCommit": "1e5eea7d3cce528a30da56b5d09a573060f69991", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8167f6eed95259c358e766b7e6bb75d799cb142f", "chunk": "diff --git a/realm/realm-library/src/main/java/io/realm/internal/InvalidRow.java b/realm/realm-library/src/main/java/io/realm/internal/InvalidRow.java\nindex 7a6779989..afd7f74aa 100644\n--- a/realm/realm-library/src/main/java/io/realm/internal/InvalidRow.java\n+++ b/realm/realm-library/src/main/java/io/realm/internal/InvalidRow.java\n\n@@ -99,7 +99,8 @@ public enum InvalidRow implements Row {\n \n     @Override\n     public Decimal128 getDecimal128(long columnKey) {\n-        throw getStubException();    }\n+        throw getStubException();\n+    }\n \n     @Override\n     public ObjectId getObjectId(long columnKey) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMzODQ5OA==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r378338498", "bodyText": "why not use Decimal123.parse instead of the BigDecimal?", "author": "nhachicha", "createdAt": "2020-02-12T15:49:23Z", "path": "realm/realm-library/src/main/java/io/realm/DynamicRealmObject.java", "diffHunk": "@@ -514,6 +518,12 @@ public void set(String fieldName, Object value) {\n                 case DATE:\n                     value = JsonUtils.stringToDate(strValue);\n                     break;\n+                case DECIMAL128:\n+                    value = new Decimal128(new BigDecimal(strValue));", "originalCommit": "1e5eea7d3cce528a30da56b5d09a573060f69991", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8167f6eed95259c358e766b7e6bb75d799cb142f", "chunk": "diff --git a/realm/realm-library/src/main/java/io/realm/DynamicRealmObject.java b/realm/realm-library/src/main/java/io/realm/DynamicRealmObject.java\nindex 0f05b7818..373b6aba7 100644\n--- a/realm/realm-library/src/main/java/io/realm/DynamicRealmObject.java\n+++ b/realm/realm-library/src/main/java/io/realm/DynamicRealmObject.java\n\n@@ -519,7 +518,7 @@ public class DynamicRealmObject extends RealmObject implements RealmObjectProxy\n                     value = JsonUtils.stringToDate(strValue);\n                     break;\n                 case DECIMAL128:\n-                    value = new Decimal128(new BigDecimal(strValue));\n+                    value = Decimal128.parse(strValue);\n                     break;\n                 case OBJECT_ID:\n                     value = new ObjectId(strValue);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM1Mjc3MQ==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r378352771", "bodyText": "I'm not sure about this comment, you added the Bson deps in the library gradle implementation 'org.mongodb:bson:3.12.0'", "author": "nhachicha", "createdAt": "2020-02-12T16:10:14Z", "path": "realm/realm-library/src/main/java/io/realm/DynamicRealmObject.java", "diffHunk": "@@ -558,6 +568,13 @@ private void setValue(String fieldName, Object value) {\n             RealmList<?> list = (RealmList<?>) value;\n             setList(fieldName, list);\n         } else {\n+            // Handle Decimal128 and ObjectId in a special way since they might not be on the\n+            // classpath", "originalCommit": "1e5eea7d3cce528a30da56b5d09a573060f69991", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a83f884789e9e5561c5f584ba04639c4735853a0", "chunk": "diff --git a/realm/realm-library/src/main/java/io/realm/DynamicRealmObject.java b/realm/realm-library/src/main/java/io/realm/DynamicRealmObject.java\nindex 0f05b7818..c376b5e5c 100644\n--- a/realm/realm-library/src/main/java/io/realm/DynamicRealmObject.java\n+++ b/realm/realm-library/src/main/java/io/realm/DynamicRealmObject.java\n\n@@ -567,14 +616,11 @@ public class DynamicRealmObject extends RealmObject implements RealmObjectProxy\n         } else if (valueClass == RealmList.class) {\n             RealmList<?> list = (RealmList<?>) value;\n             setList(fieldName, list);\n+        } else if (valueClass == Decimal128.class) {\n+            setDecimal128(fieldName, (Decimal128) value);\n+        } else if (valueClass == ObjectId.class) {\n+            setObjectId(fieldName, (ObjectId) value);\n         } else {\n-            // Handle Decimal128 and ObjectId in a special way since they might not be on the\n-            // classpath\n-            if (valueClass == Decimal128.class) {\n-                setDecimal128(fieldName, (Decimal128) value);\n-            } else if (valueClass == ObjectId.class) {\n-                setObjectId(fieldName, (ObjectId) value);\n-            }\n             throw new IllegalArgumentException(\"Value is of an type not supported: \" + value.getClass());\n         }\n     }\n"}}, {"oid": "b99c011d0c2285f94d2ea791b3a994de12f84a93", "url": "https://github.com/realm/realm-java/commit/b99c011d0c2285f94d2ea791b3a994de12f84a93", "message": "Merge branch 'v10' into cm/new-types\n\n# Conflicts:\n#\trealm/realm-annotations-processor/build.gradle\n#\trealm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java\n#\trealm/realm-library/src/main/cpp/CMakeLists.txt\n#\trealm/realm-library/src/main/java/io/realm/RealmQuery.java", "committedDate": "2020-03-08T21:22:09Z", "type": "commit"}, {"oid": "4a497119c99206cd7f24b0f4f0dc1b7cae3a752b", "url": "https://github.com/realm/realm-java/commit/4a497119c99206cd7f24b0f4f0dc1b7cae3a752b", "message": "Merge remote-tracking branch 'origin/v10' into cm/new-types", "committedDate": "2020-03-11T19:29:11Z", "type": "commit"}, {"oid": "6b7d136ecaf16ea4c04537763fe39b7befa48a8d", "url": "https://github.com/realm/realm-java/commit/6b7d136ecaf16ea4c04537763fe39b7befa48a8d", "message": "Add JNI support and update tests", "committedDate": "2020-03-30T23:03:10Z", "type": "commit"}, {"oid": "8167f6eed95259c358e766b7e6bb75d799cb142f", "url": "https://github.com/realm/realm-java/commit/8167f6eed95259c358e766b7e6bb75d799cb142f", "message": "Fixing the Annotation processor", "committedDate": "2020-04-01T05:16:55Z", "type": "commit"}, {"oid": "7e2371160d85cf96e1556e93843f655c550167cf", "url": "https://github.com/realm/realm-java/commit/7e2371160d85cf96e1556e93843f655c550167cf", "message": "update to latest Sync release", "committedDate": "2020-04-03T01:20:41Z", "type": "commit"}, {"oid": "cfd2d4f911c7b0e9ae71d16c1b1181925c8d4e33", "url": "https://github.com/realm/realm-java/commit/cfd2d4f911c7b0e9ae71d16c1b1181925c8d4e33", "message": "Merge remote-tracking branch 'origin/v10' into cm/new-types", "committedDate": "2020-04-03T01:39:46Z", "type": "commit"}, {"oid": "fa18e877cc8225e7fcd5fb19effd53a731c0f74d", "url": "https://github.com/realm/realm-java/commit/fa18e877cc8225e7fcd5fb19effd53a731c0f74d", "message": "JNI fix", "committedDate": "2020-04-03T14:24:13Z", "type": "commit"}, {"oid": "db7df7203ed30e8868d55de3d08454d41e939a50", "url": "https://github.com/realm/realm-java/commit/db7df7203ed30e8868d55de3d08454d41e939a50", "message": "Merge remote-tracking branch 'origin/v10' into cm/new-types", "committedDate": "2020-04-03T15:12:31Z", "type": "commit"}, {"oid": "a82a9bbc8a30a0a3581f7dfccc126e7f8651879d", "url": "https://github.com/realm/realm-java/commit/a82a9bbc8a30a0a3581f7dfccc126e7f8651879d", "message": "- Add external BSON dependencies\n- Add test for Decimal\n- Enabling query based test for new types", "committedDate": "2020-04-04T03:44:21Z", "type": "commit"}, {"oid": "a83f884789e9e5561c5f584ba04639c4735853a0", "url": "https://github.com/realm/realm-java/commit/a83f884789e9e5561c5f584ba04639c4735853a0", "message": "- Adding Dynamic Realm Tests\n- Adding more Decimal128 tests\n- Updating some nullability tests", "committedDate": "2020-04-06T17:49:03Z", "type": "commit"}, {"oid": "080453095abb78516bdc867c55a26e9bd4cd5d38", "url": "https://github.com/realm/realm-java/commit/080453095abb78516bdc867c55a26e9bd4cd5d38", "message": "- Updating ObjectId tests\n- Adding JSON tests", "committedDate": "2020-04-09T18:25:06Z", "type": "commit"}, {"oid": "2d77dbb8a54e913d42efdc007a1ed86bc94be7c5", "url": "https://github.com/realm/realm-java/commit/2d77dbb8a54e913d42efdc007a1ed86bc94be7c5", "message": "Update Annotation Processor Tests", "committedDate": "2020-04-09T18:49:12Z", "type": "commit"}, {"oid": "54c2a23ea307fdcc15e51784e1956fc300437a81", "url": "https://github.com/realm/realm-java/commit/54c2a23ea307fdcc15e51784e1956fc300437a81", "message": "- Add support for min/max/average between query for Decimal128\n- Update to latest Core", "committedDate": "2020-04-14T19:49:52Z", "type": "commit"}, {"oid": "70a5da692612b6eaaabdb93e0bd07e626763c9da", "url": "https://github.com/realm/realm-java/commit/70a5da692612b6eaaabdb93e0bd07e626763c9da", "message": "adding bson dependency for kotlin-extnsion", "committedDate": "2020-04-15T15:32:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc0MTM3Nw==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408741377", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            }", "author": "cmelchior", "createdAt": "2020-04-15T10:30:06Z", "path": "realm/realm-annotations-processor/src/test/resources/io/realm/some_test_BooleansRealmProxy.java", "diffHunk": "@@ -520,4 +520,4 @@ public boolean equals(Object o) {\n \n         return true;\n     }\n-}\n+}", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6462e3b11f5b3ba2b3cbbdac8ddbfa0b6337d0b5", "chunk": "diff --git a/realm/realm-annotations-processor/src/test/resources/io/realm/some_test_BooleansRealmProxy.java b/realm/realm-annotations-processor/src/test/resources/io/realm/some_test_BooleansRealmProxy.java\nindex 681371484..6906c1875 100644\n--- a/realm/realm-annotations-processor/src/test/resources/io/realm/some_test_BooleansRealmProxy.java\n+++ b/realm/realm-annotations-processor/src/test/resources/io/realm/some_test_BooleansRealmProxy.java\n\n@@ -520,4 +520,4 @@ public class some_test_BooleansRealmProxy extends some.test.Booleans\n \n         return true;\n     }\n-}\n\\ No newline at end of file\n+}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc1NjgyMQ==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408756821", "bodyText": "I'm a but unsure about these tests that add the type directly. I know the API theoretically allows it but, but according to the doc, it isn't legal: https://android.googlesource.com/platform/libcore/+/f0d4a04/json/src/main/java/org/json/JSONObject.java#258\nBut maybe this is the reason you added the instanceof check in the annotation processor?", "author": "cmelchior", "createdAt": "2020-04-15T11:00:07Z", "path": "realm/realm-library/src/androidTest/java/io/realm/RealmJsonTests.java", "diffHunk": "@@ -247,6 +251,86 @@ public void createObjectFromJson_dateAsString() throws JSONException {\n         assertEquals(new Date(1000), obj.getColumnDate());\n     }\n \n+    @Test\n+    public void createObjectFromJson_decimal128() throws JSONException {\n+        JSONObject json = new JSONObject();\n+        json.put(\"columnDecimal128\", new Decimal128(BigDecimal.TEN));", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc3MjczOQ==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r409772739", "bodyText": "Well you could write your own parser which produces a JSONObject/array it could be useful to add directly the Bson types if you know that the underlying consumer system can consume (parse them)", "author": "nhachicha", "createdAt": "2020-04-16T18:43:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc1NjgyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "0264202812824bc5bde59ec0f8a648353fca7fa0", "chunk": "diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmJsonTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmJsonTests.java\nindex e7ccc079f..2f0a9fd3d 100644\n--- a/realm/realm-library/src/androidTest/java/io/realm/RealmJsonTests.java\n+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmJsonTests.java\n\n@@ -277,6 +277,19 @@ public class RealmJsonTests {\n         assertEquals(new Decimal128(BigDecimal.TEN), obj.getColumnDecimal128());\n     }\n \n+    @Test\n+    public void createObjectFromJson_decimal128AsInt() throws JSONException {\n+        JSONObject json = new JSONObject();\n+        json.put(\"columnDecimal128\", -42);\n+\n+        realm.beginTransaction();\n+        realm.createObjectFromJson(AllTypes.class, json);\n+        realm.commitTransaction();\n+\n+        AllTypes obj = realm.where(AllTypes.class).findFirst();\n+        assertEquals(new Decimal128(-42), obj.getColumnDecimal128());\n+    }\n+\n     @Test\n     public void createObjectFromJson_decimal128AsLong() throws JSONException {\n         JSONObject json = new JSONObject();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc1NzUwOA==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408757508", "bodyText": "Same concern as for Decimal128", "author": "cmelchior", "createdAt": "2020-04-15T11:01:26Z", "path": "realm/realm-library/src/androidTest/java/io/realm/RealmJsonTests.java", "diffHunk": "@@ -247,6 +251,86 @@ public void createObjectFromJson_dateAsString() throws JSONException {\n         assertEquals(new Date(1000), obj.getColumnDate());\n     }\n \n+    @Test\n+    public void createObjectFromJson_decimal128() throws JSONException {\n+        JSONObject json = new JSONObject();\n+        json.put(\"columnDecimal128\", new Decimal128(BigDecimal.TEN));\n+\n+        realm.beginTransaction();\n+        realm.createObjectFromJson(AllTypes.class, json);\n+        realm.commitTransaction();\n+\n+        AllTypes obj = realm.where(AllTypes.class).findFirst();\n+        assertEquals(new Decimal128(BigDecimal.TEN), obj.getColumnDecimal128());\n+    }\n+\n+    @Test\n+    public void createUsingJsonStream_decimal128() throws JSONException {\n+        JSONObject json = new JSONObject();\n+        json.put(\"columnDecimal128\", new Decimal128(BigDecimal.TEN));\n+\n+        realm.beginTransaction();\n+        realm.createObjectFromJson(AllTypes.class, json);\n+        realm.commitTransaction();\n+\n+        AllTypes obj = realm.where(AllTypes.class).findFirst();\n+        assertEquals(new Decimal128(BigDecimal.TEN), obj.getColumnDecimal128());\n+    }\n+\n+    @Test\n+    public void createObjectFromJson_decimal128AsLong() throws JSONException {\n+        JSONObject json = new JSONObject();\n+        json.put(\"columnDecimal128\", -32361122672259149L);\n+\n+        realm.beginTransaction();\n+        realm.createObjectFromJson(AllTypes.class, json);\n+        realm.commitTransaction();\n+\n+        AllTypes obj = realm.where(AllTypes.class).findFirst();\n+        assertEquals(new Decimal128(-32361122672259149L), obj.getColumnDecimal128());\n+    }\n+\n+    @Test\n+    public void createObjectFromJson_decimal128AsString() throws JSONException {\n+        JSONObject json = new JSONObject();\n+        json.put(\"columnDecimal128\", \"32361122672259149\");\n+\n+        realm.beginTransaction();\n+        realm.createObjectFromJson(AllTypes.class, json);\n+        realm.commitTransaction();\n+\n+        AllTypes obj = realm.where(AllTypes.class).findFirst();\n+        assertEquals(Decimal128.parse(\"32361122672259149\"), obj.getColumnDecimal128());\n+    }\n+\n+    @Test\n+    public void createObjectFromJson_objectId() throws JSONException {\n+        JSONObject json = new JSONObject();\n+        String idHex = TestHelper.generateObjectIdHexString(7);\n+        json.put(\"columnObjectId\", new ObjectId(idHex));", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkxMDM4Nw==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r409910387", "bodyText": "see previous response\n\nyou could write your own parser which produces a JSONObject/array it could be useful to add directly the Bson types if you know that the underlying consumer system can consume (parse them)", "author": "nhachicha", "createdAt": "2020-04-16T23:41:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc1NzUwOA=="}], "type": "inlineReview", "revised_code": {"commit": "0264202812824bc5bde59ec0f8a648353fca7fa0", "chunk": "diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmJsonTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmJsonTests.java\nindex e7ccc079f..2f0a9fd3d 100644\n--- a/realm/realm-library/src/androidTest/java/io/realm/RealmJsonTests.java\n+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmJsonTests.java\n\n@@ -277,6 +277,19 @@ public class RealmJsonTests {\n         assertEquals(new Decimal128(BigDecimal.TEN), obj.getColumnDecimal128());\n     }\n \n+    @Test\n+    public void createObjectFromJson_decimal128AsInt() throws JSONException {\n+        JSONObject json = new JSONObject();\n+        json.put(\"columnDecimal128\", -42);\n+\n+        realm.beginTransaction();\n+        realm.createObjectFromJson(AllTypes.class, json);\n+        realm.commitTransaction();\n+\n+        AllTypes obj = realm.where(AllTypes.class).findFirst();\n+        assertEquals(new Decimal128(-42), obj.getColumnDecimal128());\n+    }\n+\n     @Test\n     public void createObjectFromJson_decimal128AsLong() throws JSONException {\n         JSONObject json = new JSONObject();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc1ODg1MA==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408758850", "bodyText": "These tests seem to be missing", "author": "cmelchior", "createdAt": "2020-04-15T11:03:52Z", "path": "realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java", "diffHunk": "@@ -652,6 +659,83 @@ public void equalTo() {\n         assertEquals(0, resultList.size());\n     }\n \n+    @Test\n+    public void equalTo_decimal128() {\n+        populateTestRealm(realm, 10);\n+        RealmResults<AllTypes> resultList = realm.where(AllTypes.class).sort(AllTypes.FIELD_DECIMAL128, Sort.ASCENDING).findAll();\n+        for (int i = 0; i < 10; i++) {\n+            assertEquals(new Decimal128(new BigDecimal(i + \".23456789\")), resultList.get(i).getColumnDecimal128());\n+        }\n+    }\n+\n+    @Test\n+    public void equalTo_objectId() {\n+        populateTestRealm(realm, 10);\n+        RealmResults<AllTypes> resultList = realm.where(AllTypes.class).sort(AllTypes.FIELD_OBJECT_ID, Sort.ASCENDING).findAll();\n+        for (int i = 0; i < 10; i++) {\n+            assertEquals(new ObjectId(TestHelper.generateObjectIdHexString(i)), resultList.get(i).getColumnObjectId());\n+        }\n+    }\n+\n+    @Test\n+    public void notEqualTo_decimal128() {\n+        populateTestRealm(realm, 10);\n+        // FIXME", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTkyMDAxOA==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r409920018", "bodyText": "These are covered in Decimal128Tests and ObjectIdTests respectively", "author": "nhachicha", "createdAt": "2020-04-17T00:13:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc1ODg1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDEwOTI1MA==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r410109250", "bodyText": "True, so they should just be removed from here?", "author": "cmelchior", "createdAt": "2020-04-17T09:36:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc1ODg1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI5NTcxOQ==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r410295719", "bodyText": "yes", "author": "nhachicha", "createdAt": "2020-04-17T15:23:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc1ODg1MA=="}], "type": "inlineReview", "revised_code": {"commit": "0264202812824bc5bde59ec0f8a648353fca7fa0", "chunk": "diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java\nindex ef3692a96..f6c050a48 100644\n--- a/realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java\n+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java\n\n@@ -662,10 +660,9 @@ public class RealmQueryTests extends QueryTests {\n     @Test\n     public void equalTo_decimal128() {\n         populateTestRealm(realm, 10);\n-        RealmResults<AllTypes> resultList = realm.where(AllTypes.class).sort(AllTypes.FIELD_DECIMAL128, Sort.ASCENDING).findAll();\n-        for (int i = 0; i < 10; i++) {\n-            assertEquals(new Decimal128(new BigDecimal(i + \".23456789\")), resultList.get(i).getColumnDecimal128());\n-        }\n+        RealmResults<AllTypes> resultList = realm.where(AllTypes.class).equalTo(AllTypes.FIELD_DECIMAL128, new Decimal128(new BigDecimal( \"7.23456789\"))).findAll();\n+        assertEquals(1, resultList.size());\n+        assertEquals(new Decimal128(new BigDecimal( \"7.23456789\")), resultList.get(0).getColumnDecimal128());\n     }\n \n     @Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc1OTY0Ng==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408759646", "bodyText": "Do you really need the index here?", "author": "cmelchior", "createdAt": "2020-04-15T11:05:27Z", "path": "realm/realm-library/src/androidTest/java/io/realm/RealmTests.java", "diffHunk": "@@ -146,18 +150,19 @@\n \n     private Context context;\n     private Realm realm;\n-    private List<String> columnData = new ArrayList<String>();\n+    private List<String> columnData = new ArrayList<String>() {{\n+        add(0, AllTypes.FIELD_BOOLEAN);", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0264202812824bc5bde59ec0f8a648353fca7fa0", "chunk": "diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java\nindex a44c52191..af3e3508c 100644\n--- a/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java\n+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmTests.java\n\n@@ -151,15 +151,15 @@ public class RealmTests {\n     private Context context;\n     private Realm realm;\n     private List<String> columnData = new ArrayList<String>() {{\n-        add(0, AllTypes.FIELD_BOOLEAN);\n-        add(1, AllTypes.FIELD_DATE);\n-        add(2, AllTypes.FIELD_DOUBLE);\n-        add(3, AllTypes.FIELD_FLOAT);\n-        add(4, AllTypes.FIELD_STRING);\n-        add(5, AllTypes.FIELD_LONG);\n-        add(6, AllTypes.FIELD_BINARY);\n-        add(7, AllTypes.FIELD_DECIMAL128);\n-        add(8, AllTypes.FIELD_OBJECT_ID);\n+        add(AllTypes.FIELD_BOOLEAN);\n+        add(AllTypes.FIELD_DATE);\n+        add(AllTypes.FIELD_DOUBLE);\n+        add(AllTypes.FIELD_FLOAT);\n+        add(AllTypes.FIELD_STRING);\n+        add(AllTypes.FIELD_LONG);\n+        add(AllTypes.FIELD_BINARY);\n+        add(AllTypes.FIELD_DECIMAL128);\n+        add(AllTypes.FIELD_OBJECT_ID);\n     }};\n     private RealmConfiguration realmConfig;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc2MDY1Ng==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408760656", "bodyText": "Do we need this anymore? It seems all these properties were added to other classes?", "author": "cmelchior", "createdAt": "2020-04-15T11:07:30Z", "path": "realm/realm-library/src/androidTest/java/io/realm/entities/MongoDBTypes.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package io.realm.entities;\n+\n+import org.bson.types.Decimal128;\n+import org.bson.types.ObjectId;\n+\n+import io.realm.RealmList;\n+import io.realm.RealmObject;\n+import io.realm.annotations.PrimaryKey;\n+\n+public class MongoDBTypes extends RealmObject {", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0264202812824bc5bde59ec0f8a648353fca7fa0", "chunk": "diff --git a/realm/realm-library/src/androidTest/java/io/realm/entities/MongoDBTypes.java b/realm/realm-library/src/androidTest/java/io/realm/entities/MongoDBTypes.java\ndeleted file mode 100644\nindex 8542fae1c..000000000\n--- a/realm/realm-library/src/androidTest/java/io/realm/entities/MongoDBTypes.java\n+++ /dev/null\n\n@@ -1,18 +0,0 @@\n-package io.realm.entities;\n-\n-import org.bson.types.Decimal128;\n-import org.bson.types.ObjectId;\n-\n-import io.realm.RealmList;\n-import io.realm.RealmObject;\n-import io.realm.annotations.PrimaryKey;\n-\n-public class MongoDBTypes extends RealmObject {\n-\n-    @PrimaryKey\n-    public ObjectId id;\n-    public ObjectId otherId;\n-    public Decimal128 dec128;\n-    public RealmList<Decimal128> dec128List = new RealmList<>();\n-    public RealmList<ObjectId> objectIdList = new RealmList<>();\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3NDA0Mw==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408874043", "bodyText": "I think this approach will cause a ClassNotFoundException for non-sync builds. If by accident you try to add an unsupported type, it will try to go through all these if-statements before reaching the last else statement and then you cannot find the class for Decimal128 because it is not on the classpath.", "author": "cmelchior", "createdAt": "2020-04-15T14:12:53Z", "path": "realm/realm-library/src/main/java/io/realm/DynamicRealmObject.java", "diffHunk": "@@ -406,6 +451,10 @@ public DynamicRealmObject getObject(String fieldName) {\n             return RealmFieldType.FLOAT_LIST;\n         } else if (primitiveType.equals(Double.class)) {\n             return RealmFieldType.DOUBLE_LIST;\n+        } else if (primitiveType.equals(Decimal128.class)) {", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEyNTIzNA==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r411125234", "bodyText": "As discussed, let's add the bson dependency for this PR and optimise later a mechanism to make it optional. I think the method count and size will not affect apps not using these types (because of R8 tree shaking)", "author": "nhachicha", "createdAt": "2020-04-20T06:30:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3NDA0Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3NDIzMw==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408874233", "bodyText": "Same as above", "author": "cmelchior", "createdAt": "2020-04-15T14:13:09Z", "path": "realm/realm-library/src/main/java/io/realm/DynamicRealmObject.java", "diffHunk": "@@ -557,6 +616,10 @@ private void setValue(String fieldName, Object value) {\n         } else if (valueClass == RealmList.class) {\n             RealmList<?> list = (RealmList<?>) value;\n             setList(fieldName, list);\n+        } else if (valueClass == Decimal128.class) {", "originalCommit": "54c2a23ea307fdcc15e51784e1956fc300437a81", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEyNTMwMA==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r411125300", "bodyText": "As discussed, let's add the bson dependency for this PR and optimise later a mechanism to make it optional. I think the method count and size will not affect apps not using these types (because of R8 tree shaking)", "author": "nhachicha", "createdAt": "2020-04-20T06:30:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3NDIzMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4OTUyNQ==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408989525", "bodyText": "This looks wrong. I think this is the case for Object links not ObjectID?", "author": "cmelchior", "createdAt": "2020-04-15T16:51:40Z", "path": "realm/realm-library/src/main/java/io/realm/RealmFieldType.java", "diffHunk": "@@ -140,25 +145,21 @@ public boolean isValid(Object obj) {\n                 return (obj instanceof Float);\n             case CORE_TYPE_VALUE_DOUBLE:\n                 return (obj instanceof Double);\n+            case CORE_TYPE_VALUE_DECIMAL128:\n+                return (obj instanceof Decimal128);\n             case CORE_TYPE_VALUE_OBJECT:\n-                return false;", "originalCommit": "70a5da692612b6eaaabdb93e0bd07e626763c9da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk3NDE0NA==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r409974144", "bodyText": "nice catch!", "author": "nhachicha", "createdAt": "2020-04-17T03:38:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk4OTUyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "0264202812824bc5bde59ec0f8a648353fca7fa0", "chunk": "diff --git a/realm/realm-library/src/main/java/io/realm/RealmFieldType.java b/realm/realm-library/src/main/java/io/realm/RealmFieldType.java\nindex d91d1c1f6..b723b4a06 100644\n--- a/realm/realm-library/src/main/java/io/realm/RealmFieldType.java\n+++ b/realm/realm-library/src/main/java/io/realm/RealmFieldType.java\n\n@@ -147,8 +147,10 @@ public enum RealmFieldType {\n                 return (obj instanceof Double);\n             case CORE_TYPE_VALUE_DECIMAL128:\n                 return (obj instanceof Decimal128);\n+            case CORE_TYPE_VALUE_OBJECTID:\n+                return (obj instanceof ObjectId);\n             case CORE_TYPE_VALUE_OBJECT:\n-                return(obj instanceof ObjectId);\n+                return false;\n             case CORE_TYPE_VALUE_LIST:\n             case CORE_TYPE_VALUE_LINKING_OBJECTS:\n             case CORE_TYPE_VALUE_INTEGER + LIST_OFFSET:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MDAyMg==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408990022", "bodyText": "Pretty sure this will crash with ClassNotFound if bson is not on the classpath?", "author": "cmelchior", "createdAt": "2020-04-15T16:52:30Z", "path": "realm/realm-library/src/main/java/io/realm/RealmList.java", "diffHunk": "@@ -1328,6 +1331,14 @@ private static boolean isClassForRealmModel(Class<?> clazz) {\n             //noinspection unchecked\n             return (ManagedListOperator<E>) new DateListOperator(realm, osList, (Class<Date>) clazz);\n         }\n+        if (clazz == Decimal128.class) {", "originalCommit": "70a5da692612b6eaaabdb93e0bd07e626763c9da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEyNTE3NQ==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r411125175", "bodyText": "As discussed, let's add the bson dependency for this PR and optimise later a mechanism to make it optional. I think the method count and size will not affect apps not using these types (because of R8 tree shaking)", "author": "nhachicha", "createdAt": "2020-04-20T06:29:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MDAyMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MDQzOQ==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408990439", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            }", "author": "cmelchior", "createdAt": "2020-04-15T16:53:04Z", "path": "realm/realm-library/src/main/java/io/realm/RealmList.java", "diffHunk": "@@ -1955,3 +1966,103 @@ protected void setValue(int index, Object value) {\n         osList.setDate(index, (Date) value);\n     }\n }\n+\n+/**\n+ * A subclass of {@link ManagedListOperator} that deal with {@link Decimal128} list field.\n+ */\n+final class Decimal128ListOperator extends ManagedListOperator<Decimal128> {\n+\n+    Decimal128ListOperator(BaseRealm realm, OsList osList, Class<Decimal128> clazz) {\n+        super(realm, osList, clazz);\n+    }\n+\n+    @Override\n+    public boolean forRealmModel() {\n+        return false;\n+    }\n+\n+    @Nullable\n+    @Override\n+    public Decimal128 get(int index) {\n+        return (Decimal128) osList.getValue(index);\n+    }\n+\n+    @Override\n+    protected void checkValidValue(@Nullable Object value) {\n+        if (value == null) {\n+            // null is always valid (but schema may reject null on insertion).\n+            return;\n+        }\n+        if (!(value instanceof Decimal128)) {\n+            throw new IllegalArgumentException(\n+                    String.format(Locale.ENGLISH, INVALID_OBJECT_TYPE_MESSAGE,\n+                            \"org.bson.types.Decimal128\",\n+                            value.getClass().getName()));\n+        }\n+    }\n+\n+    @Override\n+    public void appendValue(Object value) {\n+        osList.addDecimal128((Decimal128)value);\n+    }\n+\n+    @Override\n+    public void insertValue(int index, Object value) {\n+        osList.insertDecimal128(index, (Decimal128) value);\n+    }\n+\n+    @Override\n+    protected void setValue(int index, Object value) {\n+        osList.setDecimal128(index, (Decimal128) value);\n+    }\n+}\n+\n+/**\n+ * A subclass of {@link ManagedListOperator} that deal with {@link ObjectId} list field.\n+ */\n+final class ObjectIdListOperator extends ManagedListOperator<ObjectId> {\n+\n+    ObjectIdListOperator(BaseRealm realm, OsList osList, Class<ObjectId> clazz) {\n+        super(realm, osList, clazz);\n+    }\n+\n+    @Override\n+    public boolean forRealmModel() {\n+        return false;\n+    }\n+\n+    @Nullable\n+    @Override\n+    public ObjectId get(int index) {\n+        return (ObjectId) osList.getValue(index);\n+    }\n+\n+    @Override\n+    protected void checkValidValue(@Nullable Object value) {\n+        if (value == null) {\n+            // null is always valid (but schema may reject null on insertion).\n+            return;\n+        }\n+        if (!(value instanceof ObjectId)) {\n+            throw new IllegalArgumentException(\n+                    String.format(Locale.ENGLISH, INVALID_OBJECT_TYPE_MESSAGE,\n+                            \"org.bson.types.ObjectId\",\n+                            value.getClass().getName()));\n+        }\n+    }\n+\n+    @Override\n+    public void appendValue(Object value) {\n+        osList.addObjectId((ObjectId)value);\n+    }\n+\n+    @Override\n+    public void insertValue(int index, Object value) {\n+        osList.insertObjectId(index, (ObjectId) value);\n+    }\n+\n+    @Override\n+    protected void setValue(int index, Object value) {\n+        osList.setObjectId(index, (ObjectId) value);\n+    }\n+}", "originalCommit": "70a5da692612b6eaaabdb93e0bd07e626763c9da", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "33aee33279076d49993a3ddb6e4306739e91fd63", "chunk": "diff --git a/realm/realm-library/src/main/java/io/realm/RealmList.java b/realm/realm-library/src/main/java/io/realm/RealmList.java\nindex 2064efad8..6f79eabcf 100644\n--- a/realm/realm-library/src/main/java/io/realm/RealmList.java\n+++ b/realm/realm-library/src/main/java/io/realm/RealmList.java\n\n@@ -2065,4 +2065,4 @@ final class ObjectIdListOperator extends ManagedListOperator<ObjectId> {\n     protected void setValue(int index, Object value) {\n         osList.setObjectId(index, (ObjectId) value);\n     }\n-}\n\\ No newline at end of file\n+}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MjI4Nw==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408992287", "bodyText": "What about support for Decimal128 in Sum?", "author": "cmelchior", "createdAt": "2020-04-15T16:56:11Z", "path": "realm/realm-library/src/main/java/io/realm/RealmQuery.java", "diffHunk": "@@ -1645,10 +1866,24 @@ public double average(String fieldName) {\n                 return query.averageFloat(columnIndex);\n             default:\n                 throw new IllegalArgumentException(String.format(Locale.US,\n-                        TYPE_MISMATCH, fieldName, \"int, float or double\"));\n+                        TYPE_MISMATCH, fieldName, \"int, float or double. For Decimal128 use `averageDecimal128` method.\"));\n         }\n     }\n+    /**\n+     * Returns the average of a given field.\n+     * Does not support dotted field notation.\n+     *\n+     * @param fieldName the field to calculate average on. Only Decimal128 fields is supported. For other number types consider using {@link #average(String)}.\n+     * @return the average for the given field amongst objects in query results. This will be of type Decimal128. If no objects exist or they all have {@code null}\n+     * as the value for the given field {@code 0} will be returned. When computing the average, objects with {@code null} values are ignored.\n+     * @throws java.lang.IllegalArgumentException if the field is not a Decimal128 type.\n+     */\n+    public @Nullable Decimal128 averageDecimal128(String fieldName) {", "originalCommit": "70a5da692612b6eaaabdb93e0bd07e626763c9da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI3MTU3OA==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r410271578", "bodyText": "Good catch, this is still missing from Core", "author": "nhachicha", "createdAt": "2020-04-17T14:45:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MjI4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI3ODY5Ng==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r410278696", "bodyText": "Ok. No reason to hold this PR waiting for that. We can always add later.", "author": "cmelchior", "createdAt": "2020-04-17T14:56:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MjI4Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MjYxMQ==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408992611", "bodyText": "Fix these", "author": "cmelchior", "createdAt": "2020-04-15T16:56:43Z", "path": "realm/realm-library/src/main/java/io/realm/RealmResults.java", "diffHunk": "@@ -418,6 +421,34 @@ public void setObject(String fieldName, @Nullable RealmModel value) {\n         osResults.setObject(fieldName, row);\n     }\n \n+    /**\n+     * FIXME", "originalCommit": "70a5da692612b6eaaabdb93e0bd07e626763c9da", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0264202812824bc5bde59ec0f8a648353fca7fa0", "chunk": "diff --git a/realm/realm-library/src/main/java/io/realm/RealmResults.java b/realm/realm-library/src/main/java/io/realm/RealmResults.java\nindex 82bf00885..f3b871d82 100644\n--- a/realm/realm-library/src/main/java/io/realm/RealmResults.java\n+++ b/realm/realm-library/src/main/java/io/realm/RealmResults.java\n\n@@ -422,10 +432,11 @@ public class RealmResults<E> extends OrderedRealmCollectionImpl<E> {\n     }\n \n     /**\n-     * FIXME\n+     * Sets the {@code Decimal128} value of the given field in all of the objects in the collection.\n      *\n-     * @param fieldName\n-     * @param value\n+     * @param fieldName name of the field to update.\n+     * @param value new value for the field.\n+     * @throws IllegalArgumentException if field name doesn't exist, is a primary key property or isn't a {@code Decimal128} field.\n      */\n     public void setDecimal128(String fieldName, @Nullable Decimal128 value) {\n         checkNonEmptyFieldName(fieldName);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MzI5OA==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408993298", "bodyText": "I think you need to apply the same pattern used here to the other places where you are referencing the bson types, since they might not be available.", "author": "cmelchior", "createdAt": "2020-04-15T16:57:47Z", "path": "realm/realm-library/src/main/java/io/realm/RealmResults.java", "diffHunk": "@@ -516,8 +547,18 @@ private Row checkRealmObjectConstraints(String fieldName, @Nullable RealmModel v\n                 checkTypeOfListElements(list, Double.class);\n                 osResults.setDoubleList(fieldName, (RealmList<Double>) list);\n                 break;\n-            default:\n+            default: {\n+                // Handle Decimal128 and ObjectId in a special way since they might not be on the\n+                // classpath\n+                if (columnType == RealmFieldType.DECIMAL128_LIST) {", "originalCommit": "70a5da692612b6eaaabdb93e0bd07e626763c9da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEyNDcxMQ==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r411124711", "bodyText": "As discussed, let's add the bson dependency for this PR and optimise later a mechanism to make it optional. I think the method count and size will not affect apps not using these types (because of R8 tree shaking)", "author": "nhachicha", "createdAt": "2020-04-20T06:28:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5MzI5OA=="}], "type": "inlineReview", "revised_code": {"commit": "0264202812824bc5bde59ec0f8a648353fca7fa0", "chunk": "diff --git a/realm/realm-library/src/main/java/io/realm/RealmResults.java b/realm/realm-library/src/main/java/io/realm/RealmResults.java\nindex 82bf00885..f3b871d82 100644\n--- a/realm/realm-library/src/main/java/io/realm/RealmResults.java\n+++ b/realm/realm-library/src/main/java/io/realm/RealmResults.java\n\n@@ -548,15 +568,15 @@ public class RealmResults<E> extends OrderedRealmCollectionImpl<E> {\n                 osResults.setDoubleList(fieldName, (RealmList<Double>) list);\n                 break;\n             default: {\n-                // Handle Decimal128 and ObjectId in a special way since they might not be on the\n-                // classpath\n-                if (columnType == RealmFieldType.DECIMAL128_LIST) {\n-                    checkTypeOfListElements(list, Decimal128.class);\n-                    osResults.setDecimal128List(fieldName, (RealmList<Decimal128>) list);\n-                } else if (columnType == RealmFieldType.OBJECT_ID_LIST) {\n-                    checkTypeOfListElements(list, ObjectId.class);\n-                    osResults.setObjectIdList(fieldName, (RealmList<ObjectId>) list);\n-                }\n+//                // Handle Decimal128 and ObjectId in a special way since they might not be on the\n+//                // classpath\n+//                if (columnType == RealmFieldType.DECIMAL128_LIST) {\n+//                    checkTypeOfListElements(list, Decimal128.class);\n+//                    osResults.setDecimal128List(fieldName, (RealmList<Decimal128>) list);\n+//                } else if (columnType == RealmFieldType.OBJECT_ID_LIST) {\n+//                    checkTypeOfListElements(list, ObjectId.class);\n+//                    osResults.setObjectIdList(fieldName, (RealmList<ObjectId>) list);\n+//                }\n                 throw new IllegalArgumentException(String.format(\"Field '%s' is not a list but a %s\", fieldName, columnType));\n             }\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5NTY1Nw==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408995657", "bodyText": "Suggested change", "author": "cmelchior", "createdAt": "2020-04-15T17:01:25Z", "path": "realm/realm-library/src/testUtils/java/io/realm/TestHelper.java", "diffHunk": "@@ -1304,4 +1306,26 @@ public static void waitForNetworkThreadExecutorToFinish() {\n     public static <T> T getNull() {\n         return null;\n     }\n+\n+    public static String randomObjectIdHexString() {\n+        char[] hex = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E' , 'F'};\n+\n+        StringBuilder randomId = new StringBuilder(24);\n+        for (int i = 0; i < 24; i++) {\n+            randomId.append(hex[RANDOM.nextInt(16)]);\n+        }\n+        return randomId.toString();\n+    }\n+\n+    public static String generateObjectIdHexString(int i) {\n+        char[] hex = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E' , 'F'};\n+\n+        StringBuilder randomId = new StringBuilder(24);\n+        for (int j = 0; j < 24; j++) {\n+            randomId.append(hex[(i + j) % 16]);\n+        }\n+        return randomId.toString();\n+    }\n+\n+", "originalCommit": "70a5da692612b6eaaabdb93e0bd07e626763c9da", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "63440d38f40a1f07794932db358a73ca31012786", "chunk": "diff --git a/realm/realm-library/src/testUtils/java/io/realm/TestHelper.java b/realm/realm-library/src/testUtils/java/io/realm/TestHelper.java\nindex a5e21cef1..2001c16c1 100644\n--- a/realm/realm-library/src/testUtils/java/io/realm/TestHelper.java\n+++ b/realm/realm-library/src/testUtils/java/io/realm/TestHelper.java\n\n@@ -1327,5 +1327,4 @@ public class TestHelper {\n         return randomId.toString();\n     }\n \n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5NTg0NQ==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r408995845", "bodyText": "Is SecureRandom more random than Random?", "author": "cmelchior", "createdAt": "2020-04-15T17:01:43Z", "path": "realm/realm-library/src/testUtils/java/io/realm/TestHelper.java", "diffHunk": "@@ -76,7 +78,7 @@\n     public static final int STANDARD_WAIT_SECS = 200;\n \n     private static final Charset UTF_8 = Charset.forName(\"UTF-8\");\n-    private static final Random RANDOM = new Random();\n+    private static final SecureRandom RANDOM = new SecureRandom();", "originalCommit": "70a5da692612b6eaaabdb93e0bd07e626763c9da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI3NjI3Ng==", "url": "https://github.com/realm/realm-java/pull/6722#discussion_r410276276", "bodyText": "According to the documentation it's more secure when used in the context of cryptography, which is the case with encryptionKey parameter of the RealmConfiguration. This is more to set the example for developers", "author": "nhachicha", "createdAt": "2020-04-17T14:53:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODk5NTg0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "0264202812824bc5bde59ec0f8a648353fca7fa0", "chunk": "diff --git a/realm/realm-library/src/testUtils/java/io/realm/TestHelper.java b/realm/realm-library/src/testUtils/java/io/realm/TestHelper.java\nindex a5e21cef1..74c811686 100644\n--- a/realm/realm-library/src/testUtils/java/io/realm/TestHelper.java\n+++ b/realm/realm-library/src/testUtils/java/io/realm/TestHelper.java\n\n@@ -72,6 +73,9 @@ import io.realm.rule.TestRealmConfigurationFactory;\n import static junit.framework.Assert.assertEquals;\n import static junit.framework.Assert.fail;\n \n+import org.bson.types.Decimal128;\n+import org.bson.types.ObjectId;\n+\n public class TestHelper {\n     public static final int VERY_SHORT_WAIT_SECS = 1;\n     public static final int SHORT_WAIT_SECS = 10;\n"}}, {"oid": "43fb00ada0f40ea60ea0da580d55e2e87c7d15ae", "url": "https://github.com/realm/realm-java/commit/43fb00ada0f40ea60ea0da580d55e2e87c7d15ae", "message": "Update CHANGELOG.md\n\nCo-Authored-By: Christian Melchior <christian@ilios.dk>", "committedDate": "2020-04-16T14:55:40Z", "type": "commit"}, {"oid": "6462e3b11f5b3ba2b3cbbdac8ddbfa0b6337d0b5", "url": "https://github.com/realm/realm-java/commit/6462e3b11f5b3ba2b3cbbdac8ddbfa0b6337d0b5", "message": "Update realm/realm-annotations-processor/src/test/resources/io/realm/some_test_BooleansRealmProxy.java\n\nCo-Authored-By: Christian Melchior <christian@ilios.dk>", "committedDate": "2020-04-16T18:32:46Z", "type": "commit"}, {"oid": "1f5b215cc1d8baa3396b3420b5f59dd19d9d1b84", "url": "https://github.com/realm/realm-java/commit/1f5b215cc1d8baa3396b3420b5f59dd19d9d1b84", "message": "Update realm/realm-library/src/androidTest/AndroidManifest.xml\n\nCo-Authored-By: Christian Melchior <christian@ilios.dk>", "committedDate": "2020-04-16T18:33:29Z", "type": "commit"}, {"oid": "0264202812824bc5bde59ec0f8a648353fca7fa0", "url": "https://github.com/realm/realm-java/commit/0264202812824bc5bde59ec0f8a648353fca7fa0", "message": "PR feedback", "committedDate": "2020-04-17T15:17:28Z", "type": "commit"}, {"oid": "63440d38f40a1f07794932db358a73ca31012786", "url": "https://github.com/realm/realm-java/commit/63440d38f40a1f07794932db358a73ca31012786", "message": "Update realm/realm-library/src/testUtils/java/io/realm/TestHelper.java\n\nCo-Authored-By: Christian Melchior <christian@ilios.dk>", "committedDate": "2020-04-17T15:21:29Z", "type": "commit"}, {"oid": "1f16a773bb6a0fffac4ed18c18d133e92887097f", "url": "https://github.com/realm/realm-java/commit/1f16a773bb6a0fffac4ed18c18d133e92887097f", "message": "Update realm/realm-library/src/androidTest/kotlin/io/realm/ObjectIdTests.kt\n\nCo-Authored-By: Christian Melchior <christian@ilios.dk>", "committedDate": "2020-04-17T15:24:03Z", "type": "commit"}, {"oid": "7aa80702b99e62176af66897c2c87e3016dbab54", "url": "https://github.com/realm/realm-java/commit/7aa80702b99e62176af66897c2c87e3016dbab54", "message": "Update realm/realm-library/src/androidTest/kotlin/io/realm/Decimal128Tests.kt\n\nCo-Authored-By: Christian Melchior <christian@ilios.dk>", "committedDate": "2020-04-17T15:24:57Z", "type": "commit"}, {"oid": "cc6609ff50d46db28264c953cee7f760833e0c98", "url": "https://github.com/realm/realm-java/commit/cc6609ff50d46db28264c953cee7f760833e0c98", "message": "Update realm/realm-library/src/main/cpp/io_realm_internal_CheckedRow.cpp\n\nCo-Authored-By: Christian Melchior <christian@ilios.dk>", "committedDate": "2020-04-17T15:25:23Z", "type": "commit"}, {"oid": "e8fbe3096f3d1b646945465f33e889c6ccfd1704", "url": "https://github.com/realm/realm-java/commit/e8fbe3096f3d1b646945465f33e889c6ccfd1704", "message": "Update realm/realm-library/src/main/cpp/io_realm_internal_OsObject.cpp\n\nCo-Authored-By: Christian Melchior <christian@ilios.dk>", "committedDate": "2020-04-17T15:25:49Z", "type": "commit"}, {"oid": "51782ff76b6c29d5557952f98da95c75e8bc8d52", "url": "https://github.com/realm/realm-java/commit/51782ff76b6c29d5557952f98da95c75e8bc8d52", "message": "Update realm/realm-library/src/main/cpp/io_realm_internal_UncheckedRow.cpp\n\nCo-Authored-By: Christian Melchior <christian@ilios.dk>", "committedDate": "2020-04-17T15:26:37Z", "type": "commit"}, {"oid": "9c1e710ec742a1487b6340c697fe75aa472e11ae", "url": "https://github.com/realm/realm-java/commit/9c1e710ec742a1487b6340c697fe75aa472e11ae", "message": "Update realm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsObjectBuilder.cpp\n\nCo-Authored-By: Christian Melchior <christian@ilios.dk>", "committedDate": "2020-04-17T15:27:04Z", "type": "commit"}, {"oid": "4f8e6f42da9afb60a1da43e5d0cce745b42bbce5", "url": "https://github.com/realm/realm-java/commit/4f8e6f42da9afb60a1da43e5d0cce745b42bbce5", "message": "Update realm/realm-library/src/main/cpp/java_class_global_def.cpp\n\nCo-Authored-By: Christian Melchior <christian@ilios.dk>", "committedDate": "2020-04-17T15:27:28Z", "type": "commit"}, {"oid": "534eea4b8acc710c2bd8c6e8ffedc24ffb09ae1d", "url": "https://github.com/realm/realm-java/commit/534eea4b8acc710c2bd8c6e8ffedc24ffb09ae1d", "message": "Merge branch 'cm/new-types' of https://github.com/realm/realm-java into cm/new-types", "committedDate": "2020-04-17T15:29:22Z", "type": "commit"}, {"oid": "2dc5bf43dc49086a67a8dffbfaf4927d7e8161de", "url": "https://github.com/realm/realm-java/commit/2dc5bf43dc49086a67a8dffbfaf4927d7e8161de", "message": "Fixing JNI method signature", "committedDate": "2020-04-17T15:46:02Z", "type": "commit"}, {"oid": "3399a9cf6906d377c9b6b231d723bcf036a4ee12", "url": "https://github.com/realm/realm-java/commit/3399a9cf6906d377c9b6b231d723bcf036a4ee12", "message": "Fixing annotation processor tests", "committedDate": "2020-04-17T18:05:45Z", "type": "commit"}, {"oid": "33aee33279076d49993a3ddb6e4306739e91fd63", "url": "https://github.com/realm/realm-java/commit/33aee33279076d49993a3ddb6e4306739e91fd63", "message": "adding more tests", "committedDate": "2020-04-20T06:11:10Z", "type": "commit"}]}