{"pr_number": 6788, "pr_title": "Refactor support for Sync to work with MongoDB Realm", "pr_createdAt": "2020-03-30T19:42:57Z", "pr_url": "https://github.com/realm/realm-java/pull/6788", "timeline": [{"oid": "dbc1aa076ac716342119d498fca189c697de6c74", "url": "https://github.com/realm/realm-java/commit/dbc1aa076ac716342119d498fca189c697de6c74", "message": "Prepare support for Sync", "committedDate": "2020-03-30T19:34:16Z", "type": "commit"}, {"oid": "cdce5a65daecf5c0994811923596c3d1b84a93da", "url": "https://github.com/realm/realm-java/commit/cdce5a65daecf5c0994811923596c3d1b84a93da", "message": "Merge branch 'v10' into cm/app/syncconfiguration\n\n# Conflicts:\n#\trealm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmAppExt.kt\n#\trealm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "committedDate": "2020-04-03T20:33:12Z", "type": "commit"}, {"oid": "1399058e3ad5caf336741a7b71ee8586e74e59bc", "url": "https://github.com/realm/realm-java/commit/1399058e3ad5caf336741a7b71ee8586e74e59bc", "message": "Cleanup. SyncConfiguration changes. Custom headers moved to RealmAppConfiguration", "committedDate": "2020-04-05T09:51:05Z", "type": "commit"}, {"oid": "2bd62df421a3fb7528a82973cfb307c463a3d8af", "url": "https://github.com/realm/realm-java/commit/2bd62df421a3fb7528a82973cfb307c463a3d8af", "message": "Make tests compile", "committedDate": "2020-04-07T12:11:16Z", "type": "commit"}, {"oid": "fb9500e620feb69bda354ac14e1b263723f0f50c", "url": "https://github.com/realm/realm-java/commit/fb9500e620feb69bda354ac14e1b263723f0f50c", "message": "Add getSession to BaseRealm and move tests", "committedDate": "2020-04-07T12:27:30Z", "type": "commit"}, {"oid": "96d345b7b7f4fd49741d6a19c6086576f62fa7f1", "url": "https://github.com/realm/realm-java/commit/96d345b7b7f4fd49741d6a19c6086576f62fa7f1", "message": "Move getSession to Realm. Make all static methods on SyncManager instance methods.", "committedDate": "2020-04-07T20:48:16Z", "type": "commit"}, {"oid": "3c2d5718285a95b6c701fefdbfe983ae7936ec52", "url": "https://github.com/realm/realm-java/commit/3c2d5718285a95b6c701fefdbfe983ae7936ec52", "message": "Migrating creating test users", "committedDate": "2020-04-08T22:29:43Z", "type": "commit"}, {"oid": "7d29921f3202254d19f36521e04a5f761bd2f934", "url": "https://github.com/realm/realm-java/commit/7d29921f3202254d19f36521e04a5f761bd2f934", "message": "Upgrade Sync", "committedDate": "2020-04-09T21:58:05Z", "type": "commit"}, {"oid": "c40d677b5cd6b55a9ba01cebddbbeace02823bf7", "url": "https://github.com/realm/realm-java/commit/c40d677b5cd6b55a9ba01cebddbbeace02823bf7", "message": "Upgrade to latest Sync/OS", "committedDate": "2020-04-10T22:48:41Z", "type": "commit"}, {"oid": "b7cc14ba174c4c7d4adb66aa720bce1e3e159b56", "url": "https://github.com/realm/realm-java/commit/b7cc14ba174c4c7d4adb66aa720bce1e3e159b56", "message": "Enable sync", "committedDate": "2020-04-11T22:31:35Z", "type": "commit"}, {"oid": "f23327e6d96919b81c4fc5ba9fc00548421395aa", "url": "https://github.com/realm/realm-java/commit/f23327e6d96919b81c4fc5ba9fc00548421395aa", "message": "Update OS", "committedDate": "2020-04-12T09:06:17Z", "type": "commit"}, {"oid": "f2476d4a4832eb464a0b42fd59b6fe08933a6cae", "url": "https://github.com/realm/realm-java/commit/f2476d4a4832eb464a0b42fd59b6fe08933a6cae", "message": "Fix pointer. Improve test", "committedDate": "2020-04-12T20:38:14Z", "type": "commit"}, {"oid": "e75f92ffeb6fba5a63eda34c0c142958caf727e8", "url": "https://github.com/realm/realm-java/commit/e75f92ffeb6fba5a63eda34c0c142958caf727e8", "message": "Re-enable SyncConfiguration tests and move them to Kotlin", "committedDate": "2020-04-13T10:27:14Z", "type": "commit"}, {"oid": "6f52e1dcee48a16fedeefe8ba65835c6cbb2ae84", "url": "https://github.com/realm/realm-java/commit/6f52e1dcee48a16fedeefe8ba65835c6cbb2ae84", "message": "Cleanup", "committedDate": "2020-04-13T19:53:49Z", "type": "commit"}, {"oid": "f495a40da3ae0c3aa6285b91929192f8eeac6d4b", "url": "https://github.com/realm/realm-java/commit/f495a40da3ae0c3aa6285b91929192f8eeac6d4b", "message": "Fix Sync in Stitch App and Sync integration test.", "committedDate": "2020-04-16T10:37:10Z", "type": "commit"}, {"oid": "ee7a4749221fe1f580f05b7d1718220ab5d9ae41", "url": "https://github.com/realm/realm-java/commit/ee7a4749221fe1f580f05b7d1718220ab5d9ae41", "message": "Use latest image", "committedDate": "2020-04-17T08:34:31Z", "type": "commit"}, {"oid": "c74e23b74d4237658485b65810f1037599a9fc05", "url": "https://github.com/realm/realm-java/commit/c74e23b74d4237658485b65810f1037599a9fc05", "message": "Cleanup", "committedDate": "2020-04-17T11:52:35Z", "type": "commit"}, {"oid": "f2748b436a09ac1de13faef33083ddd11f30859f", "url": "https://github.com/realm/realm-java/commit/f2748b436a09ac1de13faef33083ddd11f30859f", "message": "Move directory option to RealmAppConfiguration. Fix the support for partition values.", "committedDate": "2020-04-17T14:06:06Z", "type": "commit"}, {"oid": "d632f8a2ed80dcfe2d5b4af686276aa48788b334", "url": "https://github.com/realm/realm-java/commit/d632f8a2ed80dcfe2d5b4af686276aa48788b334", "message": "Fix compiler", "committedDate": "2020-04-17T15:20:18Z", "type": "commit"}, {"oid": "57b3d59375f00f970b584173ae678ad373f455d6", "url": "https://github.com/realm/realm-java/commit/57b3d59375f00f970b584173ae678ad373f455d6", "message": "Fix tests", "committedDate": "2020-04-17T22:45:21Z", "type": "commit"}, {"oid": "8282882701f7c35170f01ef906aa3493d742e81b", "url": "https://github.com/realm/realm-java/commit/8282882701f7c35170f01ef906aa3493d742e81b", "message": "Fix Sync test", "committedDate": "2020-04-18T12:13:45Z", "type": "commit"}, {"oid": "21e15d1b4ac98bebe1bdd44c74336b2081b800b4", "url": "https://github.com/realm/realm-java/commit/21e15d1b4ac98bebe1bdd44c74336b2081b800b4", "message": "Merge branch 'v10' into cm/app/syncconfiguration\n\n# Conflicts:\n#\trealm/realm-library/src/androidTestObjectServer/kotlin/io/realm/RealmAppTests.kt\n#\trealm/realm-library/src/main/cpp/io_realm_RealmApp.cpp\n#\trealm/realm-library/src/main/cpp/object-store\n#\trealm/realm-library/src/objectServer/java/io/realm/RealmApp.java\n#\trealm/realm-library/src/objectServer/java/io/realm/RealmUser.java", "committedDate": "2020-04-21T10:37:16Z", "type": "commit"}, {"oid": "58bba017687b8de08a7acf7b494b03b2b4b02df0", "url": "https://github.com/realm/realm-java/commit/58bba017687b8de08a7acf7b494b03b2b4b02df0", "message": "More work towards Sync", "committedDate": "2020-04-22T11:21:28Z", "type": "commit"}, {"oid": "5e2b1e0c804e10897463569d70187936830370f7", "url": "https://github.com/realm/realm-java/commit/5e2b1e0c804e10897463569d70187936830370f7", "message": "Merge branch 'v10' into cm/app/syncconfiguration\n\n# Conflicts:\n#\tdependencies.list", "committedDate": "2020-04-22T11:22:36Z", "type": "commit"}, {"oid": "335c8fc91cc21a8db72a4f5b03eab38e5939de19", "url": "https://github.com/realm/realm-java/commit/335c8fc91cc21a8db72a4f5b03eab38e5939de19", "message": "Working unit tests", "committedDate": "2020-04-22T13:28:03Z", "type": "commit"}, {"oid": "cf8aea4a0e4391cd131c8668285e99da861aaa1f", "url": "https://github.com/realm/realm-java/commit/cf8aea4a0e4391cd131c8668285e99da861aaa1f", "message": "Migrate progress listener tests", "committedDate": "2020-04-22T14:29:07Z", "type": "commit"}, {"oid": "7a47c4720b2270143b20d3f778799e6499979036", "url": "https://github.com/realm/realm-java/commit/7a47c4720b2270143b20d3f778799e6499979036", "message": "Fix findbugs", "committedDate": "2020-04-22T15:01:36Z", "type": "commit"}, {"oid": "cadae23dbdce2785bef2905657a05c36ea91bea6", "url": "https://github.com/realm/realm-java/commit/cadae23dbdce2785bef2905657a05c36ea91bea6", "message": "Merge branch 'v10' into cm/app/syncconfiguration", "committedDate": "2020-04-22T16:04:29Z", "type": "commit"}, {"oid": "e95c70e7fce5de2146a379728acbccda2b5cdeb1", "url": "https://github.com/realm/realm-java/commit/e95c70e7fce5de2146a379728acbccda2b5cdeb1", "message": "Fix tests", "committedDate": "2020-04-22T20:23:42Z", "type": "commit"}, {"oid": "75087aef485669500ec8e8ab5bc7115dc18a998d", "url": "https://github.com/realm/realm-java/commit/75087aef485669500ec8e8ab5bc7115dc18a998d", "message": "Cleanup", "committedDate": "2020-04-22T20:42:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc2OTUxMg==", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r413769512", "bodyText": "Yes. I guess we should somehow manage them in Realm, but don't what differentiates multiple apps when we want to support more than one. Is it only app id? And are they never a need to clearing them?", "author": "rorbech", "createdAt": "2020-04-23T12:23:18Z", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "diffHunk": "@@ -98,14 +85,95 @@ public RealmApp(String appId) {\n      * @param config\n      */\n     public RealmApp(RealmAppConfiguration config) {\n+        // FIXME: Right now we only support one RealmApp. This class will throw a\n+        // exception if you try to create it twice. This is a really hacky way to do this\n+        // Figure out a better API that is always forward compatible\n+        synchronized (SyncManager.class) {\n+            String appId = config.getAppId();\n+            if (CREATED_APP_ID != null && !appId.equals(CREATED_APP_ID)) {\n+                throw new IllegalStateException(\"Only one RealmApp is currently supported. \" + CREATED_APP_ID + \" already exists.\");\n+            }\n+            CREATED_APP_ID = appId;\n+        }\n+", "originalCommit": "75087aef485669500ec8e8ab5bc7115dc18a998d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc3MDUxMA==", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r413770510", "bodyText": "And is it safe to have multiple instance? Seems like we can create multiple instances as long as it just have the same app id.", "author": "rorbech", "createdAt": "2020-04-23T12:24:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc2OTUxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMzMTgzOQ==", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414331839", "bodyText": "I modified the check, so only one instance is created. Also improved the error message.", "author": "cmelchior", "createdAt": "2020-04-24T06:39:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc2OTUxMg=="}], "type": "inlineReview", "revised_code": {"commit": "6211203282cb753ff28446b009686ad1fc7c5a96", "chunk": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java b/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java\nindex aecab7b0d..3f71f5046 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java\n\n@@ -89,11 +92,12 @@ public class RealmApp {\n         // exception if you try to create it twice. This is a really hacky way to do this\n         // Figure out a better API that is always forward compatible\n         synchronized (SyncManager.class) {\n-            String appId = config.getAppId();\n-            if (CREATED_APP_ID != null && !appId.equals(CREATED_APP_ID)) {\n-                throw new IllegalStateException(\"Only one RealmApp is currently supported. \" + CREATED_APP_ID + \" already exists.\");\n+            if (CREATED) {\n+                throw new IllegalStateException(\"Only one RealmApp is currently supported. \" +\n+                        \"This restriction will be lifted soon. Instead, store the RealmApp\" +\n+                        \"instance in a shared global variable.\");\n             }\n-            CREATED_APP_ID = appId;\n+            CREATED = true;\n         }\n \n         this.config = config;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzgzMTAxMA==", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r413831010", "bodyText": "Not really any check for illegal headers", "author": "rorbech", "createdAt": "2020-04-23T14:13:20Z", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java", "diffHunk": "@@ -219,25 +294,97 @@ public Builder appVersion(String appVersion) {\n         /**\n          * FIXME\n          *\n-         * @param errorHandler\n+         * @param time\n+         * @param unit\n          * @return\n          */\n-        public Builder defaultSessionErrorHandler(@Nullable SyncSession.ErrorHandler errorHandler) {\n-            // FIXME checks\n-            this.defaultErrorHandler = errorHandler;\n+        public Builder requestTimeout(long time, TimeUnit unit) {\n+            if (time < 1) {\n+                throw new IllegalStateException(\"A timeout above 0 is required: \" + time);\n+            }\n+            Util.checkNull(unit, \"unit\");\n+            this.requestTimeoutMs = TimeUnit.MICROSECONDS.convert(time, unit);\n             return this;\n         }\n \n         /**\n-         * FIXME\n+         * Sets the name of the HTTP header used to send authorization data in when making requests to\n+         * MongoDB Realm. The MongoDB server or firewall must have been configured to expect a\n+         * custom authorization header.\n+         * <p>\n+         * The default authorization header is named \"Authorization\".\n          *\n-         * @param time\n-         * @param unit\n+         * @param headerName name of the header.\n+         * @throws IllegalArgumentException if a null or empty header is provided.\n+         * @see <a href=\"https://docs.realm.io/platform/guides/learn-realm-sync-and-integrate-with-a-proxy#adding-a-custom-proxy\">Adding a custom proxy</a>\n+         */\n+        public Builder authorizationHeaderName(String headerName) {\n+            Util.checkEmpty(headerName, \"headerName\");\n+            this.autorizationHeaderName = headerName;\n+            return this;\n+        }\n+\n+        /**\n+         * Adds an extra HTTP header to append to every request to a Realm Object Server.\n+         *\n+         * @param headerName the name of the header.\n+         * @param headerValue the value of header.\n+         * @throws IllegalArgumentException if a non-empty {@code headerName} is provided or a null {@code headerValue}.\n+         */\n+        public Builder addCustomRequestHeader(String headerName, String headerValue) {\n+            Util.checkEmpty(headerName, \"headerName\");\n+            Util.checkNull(headerValue, \"headerValue\");\n+            customHeaders.put(headerName, headerValue);\n+            return this;\n+        }\n+\n+        /**\n+         * Adds extra HTTP headers to append to every request to a Realm Object Server.\n+         *\n+         * @param headers map of (headerName, headerValue) pairs.\n+         * @throws IllegalArgumentException If any of the headers provided are illegal.\n+         */\n+        public Builder addCustomRequestHeaders(@Nullable Map<String, String> headers) {\n+            if (headers != null) {\n+                customHeaders.putAll(headers);", "originalCommit": "75087aef485669500ec8e8ab5bc7115dc18a998d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzgzNjQyOQ==", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r413836429", "bodyText": "Good point. It mostly isn't there because I would expect the lower layers to validate as needed, but we need to add tests for it. I'll add a FIXME", "author": "cmelchior", "createdAt": "2020-04-23T14:19:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzgzMTAxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMzMjMyMA==", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414332320", "bodyText": "Added a FIXME in the tests", "author": "cmelchior", "createdAt": "2020-04-24T06:40:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzgzMTAxMA=="}], "type": "inlineReview", "revised_code": {"commit": "3494fe0df20b23e97e55181b0865911c6219d33f", "chunk": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java b/realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java\nindex 5595f5caa..a5f9341c7 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java\n\n@@ -363,7 +363,7 @@ public class RealmAppConfiguration {\n         }\n \n         /**\n-         * Configures the root folder containing all files and Realms used when when synchronizing data\n+         * Configures the root folder containing all files and Realms used when synchronizing data\n          * between the device and MongoDB Realm.\n          * <p>\n          * The default root dir is {@code Context.getFilesDir()/mongodb-realm}.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzgzNzE3MQ==", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r413837171", "bodyText": "Any reason for all these config methods not being on RealmUser?", "author": "rorbech", "createdAt": "2020-04-23T14:20:27Z", "path": "realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java", "diffHunk": "@@ -182,6 +196,55 @@ public static RealmConfiguration forRecovery(String canonicalPath, @Nullable byt\n         return forRecovery(canonicalPath, encryptionKey, schemaMediator);\n     }\n \n+    /**\n+     * FIXME\n+     *\n+     * @param user\n+     * @param partitionValue\n+     * @return\n+     */\n+    @Beta\n+    public static SyncConfiguration defaultConfig(RealmUser user, String partitionValue) {", "originalCommit": "75087aef485669500ec8e8ab5bc7115dc18a998d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMzNzc4OA==", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414337788", "bodyText": "Yes and no.... The original design intent was to keep the same pattern for local and synced Realms, so:\nval localConfig = RealmConfiguration.Builder()....build()\nval localRealm = Realm.getInstance(localConfig)\n\nval syncConfig = SyncConfiguration.Builder(user, \"partitionValue\")....build()\nval syncConfig = Realm.getInstance(syncConfig)\n\nThat doesn't really explain why these helper methods for creating the simple config are here though and if we do this, we should probably also add RealmConfiguration.defaultConfig() for symmetry.\nWould it make sense to instead have?\nval user = app.login(RealmCredentials.anonymous())\nval syncConfig = user.defaultSyncConfiguration(\"partitionValue\")\n\nIt might, but we wanted to move people away from having to go through users for configurations, which the above doesn't really do.\nFor this PR, I would like to keep them where they are...but it is definitely an area of the API we need to keep a close eye one.", "author": "cmelchior", "createdAt": "2020-04-24T06:52:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzgzNzE3MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg3NTU5Mg==", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r413875592", "bodyText": "Just a generic thought about this:\nI acknowledge the comment written just above this line but using static variables to controlling instantiation logic is kind of ugly. I don't think the class itself should be responsible for knowing whether it has been instantiated or not. Would it not make sense to hide it behind something else?", "author": "edualonso", "createdAt": "2020-04-23T15:03:58Z", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "diffHunk": "@@ -49,30 +57,7 @@\n     // we might want to lift in the future. So any implementation details so ideally be made\n     // with that in mind, i.e. keep static state to minimum.\n \n-    // Default session error handler that just output errors to LogCat\n-    private static final SyncSession.ErrorHandler SESSION_NO_OP_ERROR_HANDLER = new SyncSession.ErrorHandler() {\n-        @Override\n-        public void onError(SyncSession session, ObjectServerError error) {\n-            if (error.getErrorCode() == ErrorCode.CLIENT_RESET) {\n-                RealmLog.error(\"Client Reset required for: \" + session.getConfiguration().getServerUrl());\n-                return;\n-            }\n-\n-            String errorMsg = String.format(Locale.US, \"Session Error[%s]: %s\",\n-                    session.getConfiguration().getServerUrl(),\n-                    error.toString());\n-            switch (error.getErrorCode().getCategory()) {\n-                case FATAL:\n-                    RealmLog.error(errorMsg);\n-                    break;\n-                case RECOVERABLE:\n-                    RealmLog.info(errorMsg);\n-                    break;\n-                default:\n-                    throw new IllegalArgumentException(\"Unsupported error category: \" + error.getErrorCode().getCategory());\n-            }\n-        }\n-    };\n+    private volatile static String CREATED_APP_ID = null;", "originalCommit": "75087aef485669500ec8e8ab5bc7115dc18a998d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMzODQyMw==", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414338423", "bodyText": "Yes, this is super ugly and a hack. But it is one that is going to be removed shortly so this was the smallest amount of code needed to check it. Note, I improved the check and description around these variables. Hopefully, that makes it acceptable as a temp solution.", "author": "cmelchior", "createdAt": "2020-04-24T06:53:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg3NTU5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "6211203282cb753ff28446b009686ad1fc7c5a96", "chunk": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java b/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java\nindex aecab7b0d..3f71f5046 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java\n\n@@ -57,7 +57,10 @@ public class RealmApp {\n     // we might want to lift in the future. So any implementation details so ideally be made\n     // with that in mind, i.e. keep static state to minimum.\n \n-    private volatile static String CREATED_APP_ID = null;\n+    // Currently we only allow one instance of RealmApp (due to restrictions in ObjectStore that\n+    // only allows one underlying SyncClient).\n+    // FIXME: Lift this restriction so it is possible to create multiple app instances.\n+    private volatile static boolean CREATED = false;\n \n     /**\n      * Thread pool used when doing network requests against MongoDB Realm.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg3NzE4MA==", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r413877180", "bodyText": "Unfortunately I still have not found a nice way to serialize to json without adding json keys using org.bson-library", "author": "rorbech", "createdAt": "2020-04-23T15:05:55Z", "path": "realm/realm-library/src/objectServer/java/io/realm/internal/SyncObjectServerFacade.java", "diffHunk": "@@ -90,16 +74,32 @@ public void realmClosed(RealmConfiguration configuration) {\n     public Object[] getSyncConfigurationOptions(RealmConfiguration config) {\n         if (config instanceof SyncConfiguration) {\n             SyncConfiguration syncConfig = (SyncConfiguration) config;\n-            SyncUser user = syncConfig.getUser();\n+            RealmUser user = syncConfig.getUser();\n+            RealmApp app = user.getApp();\n             String rosServerUrl = syncConfig.getServerUrl().toString();\n-            String rosUserIdentity = user.getIdentity();\n-            String syncRealmAuthUrl = user.getAuthenticationUrl().toString();\n-            String syncUserRefreshToken = user.getRefreshToken().toJson().toString();\n-            String syncUserAccessToken = user.getAccessToken(((SyncConfiguration) config)).toJson().toString();\n+            String rosUserIdentity = user.getId();\n+            String syncRealmAuthUrl = user.getApp().getConfiguration().getBaseUrl().toString();\n+            String syncUserRefreshToken = user.getRefreshToken();\n+            String syncUserAccessToken = user.getAccessToken();\n             byte sessionStopPolicy = syncConfig.getSessionStopPolicy().getNativeValue();\n             String urlPrefix = syncConfig.getUrlPrefix();\n-            String customAuthorizationHeaderName = SyncManager.getAuthorizationHeaderName(syncConfig.getServerUrl());\n-            Map<String, String> customHeaders = SyncManager.getCustomRequestHeaders(syncConfig.getServerUrl());\n+            String customAuthorizationHeaderName = app.getConfiguration().getAuthorizationHeaderName();\n+            Map<String, String> customHeaders = app.getConfiguration().getCustomRequestHeaders();\n+\n+            // Temporary work-around for serializing supported bson values\n+            BsonValue val = syncConfig.getPartitionValue();\n+            String partitionValue = null;\n+            if (val.isString()) {", "originalCommit": "75087aef485669500ec8e8ab5bc7115dc18a998d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6211203282cb753ff28446b009686ad1fc7c5a96", "chunk": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/internal/SyncObjectServerFacade.java b/realm/realm-library/src/objectServer/java/io/realm/internal/SyncObjectServerFacade.java\nindex 13da192c1..a37f6bd75 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/internal/SyncObjectServerFacade.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/internal/SyncObjectServerFacade.java\n\n@@ -100,24 +100,24 @@ public class SyncObjectServerFacade extends ObjectServerFacade {\n             } else {\n                 throw new IllegalArgumentException(\"Unsupported type: \" + val);\n             }\n-            return new Object[]{\n-                    rosUserIdentity,\n-                    rosServerUrl,\n-                    syncRealmAuthUrl,\n-                    syncUserRefreshToken,\n-                    syncUserAccessToken,\n-                    syncConfig.syncClientValidateSsl(),\n-                    syncConfig.getServerCertificateFilePath(),\n-                    sessionStopPolicy,\n-                    urlPrefix,\n-                    customAuthorizationHeaderName,\n-                    customHeaders,\n-                    OsRealmConfig.CLIENT_RESYNC_MODE_MANUAL, // Client Resync is no longer supported in v10, but might be re-added later.\n-                    partitionValue,\n-                    app.getSyncService()\n-            };\n+            Object[] configObj = new Object[SYNC_CONFIG_OPTIONS];\n+            configObj[0] = rosUserIdentity;\n+            configObj[1] = rosServerUrl;\n+            configObj[2] = syncRealmAuthUrl;\n+            configObj[3] = syncUserRefreshToken;\n+            configObj[4] = syncUserAccessToken;\n+            configObj[5] = syncConfig.syncClientValidateSsl();\n+            configObj[6] = syncConfig.getServerCertificateFilePath();\n+            configObj[7] = sessionStopPolicy;\n+            configObj[8] = urlPrefix;\n+            configObj[9] = customAuthorizationHeaderName;\n+            configObj[10] = customHeaders;\n+            configObj[11] = OsRealmConfig.CLIENT_RESYNC_MODE_MANUAL;\n+            configObj[12] = partitionValue;\n+            configObj[13] = app.getSyncService();\n+            return configObj;\n         } else {\n-            return new Object[15];\n+            return new Object[SYNC_CONFIG_OPTIONS];\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg4NTgwOQ==", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r413885809", "bodyText": "We could improve the readability in this method by hiding the computation of syncDir, userAgentBindingInfo and appDefinedUserAgent behind helper methods/classes. These could be tested in isolation making it less error-prone.", "author": "edualonso", "createdAt": "2020-04-23T15:15:47Z", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "diffHunk": "@@ -98,14 +85,95 @@ public RealmApp(String appId) {\n      * @param config\n      */\n     public RealmApp(RealmAppConfiguration config) {\n+        // FIXME: Right now we only support one RealmApp. This class will throw a\n+        // exception if you try to create it twice. This is a really hacky way to do this\n+        // Figure out a better API that is always forward compatible\n+        synchronized (SyncManager.class) {\n+            String appId = config.getAppId();\n+            if (CREATED_APP_ID != null && !appId.equals(CREATED_APP_ID)) {\n+                throw new IllegalStateException(\"Only one RealmApp is currently supported. \" + CREATED_APP_ID + \" already exists.\");\n+            }\n+            CREATED_APP_ID = appId;\n+        }\n+\n         this.config = config;\n         this.networkTransport = new OkHttpNetworkTransport();\n-        this.nativePtr = nativeCreate(\n+        networkTransport.setAuthorizationHeaderName(config.getAuthorizationHeaderName());\n+        for (Map.Entry<String, String> entry : config.getCustomRequestHeaders().entrySet()) {\n+            networkTransport.addCustomRequestHeader(entry.getKey(), entry.getValue());\n+        }\n+        this.syncManager = new SyncManager(this);\n+        this.nativePtr = init(config);\n+    }\n+\n+    private long init(RealmAppConfiguration config) {\n+        // Setup Realm part of User-Agent string\n+        String userAgentBindingInfo = \"Unknown\"; // Fallback in case of anything going wrong\n+        try {\n+            StringBuilder sb = new StringBuilder();\n+            sb.append(\"RealmJava/\");\n+            sb.append(BuildConfig.VERSION_NAME);\n+            sb.append(\" (\");\n+            sb.append(Util.isEmptyString(Build.DEVICE) ? \"unknown-device\" : Build.DEVICE);\n+            sb.append(\", \");\n+            sb.append(Util.isEmptyString(Build.MODEL) ? \"unknown-model\" : Build.MODEL);\n+            sb.append(\", v\");\n+            sb.append(Build.VERSION.SDK_INT);\n+            sb.append(\")\");\n+            userAgentBindingInfo = sb.toString();\n+        } catch (Exception e) {\n+            // Failures to construct the user agent should never cause the system itself to crash.\n+            RealmLog.warn(\"Constructing User-Agent description failed.\", e);\n+        }\n+\n+        // Create app UserAgent string\n+        String appDefinedUserAgent = null;\n+        String appName = config.getAppName();\n+        String appVersion = config.getAppVersion();\n+        if (!Util.isEmptyString(appName) || !Util.isEmptyString(appVersion)) {\n+            StringBuilder sb = new StringBuilder();\n+            sb.append(Util.isEmptyString(appName) ? \"Undefined\" : appName);\n+            sb.append('/');\n+            sb.append(Util.isEmptyString(appName) ? \"Undefined\" : appVersion);\n+            appDefinedUserAgent = sb.toString();\n+        }\n+\n+        if (BaseRealm.applicationContext == null) {\n+            throw new IllegalStateException(\"Call Realm.init() first.\");\n+        }\n+        Context context = BaseRealm.applicationContext;\n+\n+        String syncDir = null;\n+        if (SyncManager.Debug.separatedDirForSyncManager) {\n+            try {\n+                // Files.createTempDirectory is not available on JDK 6.\n+                File dir = File.createTempFile(\"remote_sync_\", \"_\" + android.os.Process.myPid(), context.getFilesDir());\n+                if (!dir.delete()) {\n+                    throw new IllegalStateException(String.format(Locale.US,\n+                            \"Temp file '%s' cannot be deleted.\", dir.getPath()));\n+                }\n+                if (!dir.mkdir()) {\n+                    throw new IllegalStateException(String.format(Locale.US,\n+                            \"Directory '%s' for SyncManager cannot be created. \",\n+                            dir.getPath()));\n+                }\n+                syncDir = dir.getPath();\n+            } catch (IOException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        } else {\n+            syncDir = context.getFilesDir().getPath();\n+        }\n+", "originalCommit": "75087aef485669500ec8e8ab5bc7115dc18a998d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMzODcyNg==", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414338726", "bodyText": "Yes, I split the class into smaller methods", "author": "cmelchior", "createdAt": "2020-04-24T06:54:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg4NTgwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "6211203282cb753ff28446b009686ad1fc7c5a96", "chunk": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java b/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java\nindex aecab7b0d..3f71f5046 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java\n\n@@ -89,11 +92,12 @@ public class RealmApp {\n         // exception if you try to create it twice. This is a really hacky way to do this\n         // Figure out a better API that is always forward compatible\n         synchronized (SyncManager.class) {\n-            String appId = config.getAppId();\n-            if (CREATED_APP_ID != null && !appId.equals(CREATED_APP_ID)) {\n-                throw new IllegalStateException(\"Only one RealmApp is currently supported. \" + CREATED_APP_ID + \" already exists.\");\n+            if (CREATED) {\n+                throw new IllegalStateException(\"Only one RealmApp is currently supported. \" +\n+                        \"This restriction will be lifted soon. Instead, store the RealmApp\" +\n+                        \"instance in a shared global variable.\");\n             }\n-            CREATED_APP_ID = appId;\n+            CREATED = true;\n         }\n \n         this.config = config;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkwMjA4Mg==", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r413902082", "bodyText": "Is this change intended? Also, avoid using magic numbers.", "author": "edualonso", "createdAt": "2020-04-23T15:35:21Z", "path": "realm/realm-library/src/main/java/io/realm/internal/ObjectServerFacade.java", "diffHunk": "@@ -66,7 +65,7 @@ public void realmClosed(RealmConfiguration configuration) {\n     }\n \n     public Object[] getSyncConfigurationOptions(RealmConfiguration config) {\n-        return new Object[12];\n+        return new Object[14];", "originalCommit": "75087aef485669500ec8e8ab5bc7115dc18a998d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQxMTc1Mg==", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414411752", "bodyText": "Yes, good point. Added a constant with this that is shared.", "author": "cmelchior", "createdAt": "2020-04-24T08:57:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkwMjA4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "6211203282cb753ff28446b009686ad1fc7c5a96", "chunk": "diff --git a/realm/realm-library/src/main/java/io/realm/internal/ObjectServerFacade.java b/realm/realm-library/src/main/java/io/realm/internal/ObjectServerFacade.java\nindex 90130c56c..11e87af2c 100644\n--- a/realm/realm-library/src/main/java/io/realm/internal/ObjectServerFacade.java\n+++ b/realm/realm-library/src/main/java/io/realm/internal/ObjectServerFacade.java\n\n@@ -65,7 +67,7 @@ public class ObjectServerFacade {\n     }\n \n     public Object[] getSyncConfigurationOptions(RealmConfiguration config) {\n-        return new Object[14];\n+        return new Object[SYNC_CONFIG_OPTIONS];\n     }\n \n     public static ObjectServerFacade getFacade(boolean needSyncFacade) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkwMjY3Nw==", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r413902677", "bodyText": "Is there a typo in the variable name?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String partionKeyValue = (String) syncConfigurationOptions[12];\n          \n          \n            \n                    String partitionKeyValue = (String) syncConfigurationOptions[12];", "author": "edualonso", "createdAt": "2020-04-23T15:36:03Z", "path": "realm/realm-library/src/main/java/io/realm/internal/OsRealmConfig.java", "diffHunk": "@@ -218,6 +218,8 @@ private OsRealmConfig(final RealmConfiguration config,\n         String urlPrefix = (String)(syncConfigurationOptions[8]);\n         String customAuthorizationHeaderName = (String)(syncConfigurationOptions[9]);\n         Byte clientResyncMode = (Byte) syncConfigurationOptions[11];\n+        String partionKeyValue = (String) syncConfigurationOptions[12];", "originalCommit": "75087aef485669500ec8e8ab5bc7115dc18a998d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6211203282cb753ff28446b009686ad1fc7c5a96", "chunk": "diff --git a/realm/realm-library/src/main/java/io/realm/internal/OsRealmConfig.java b/realm/realm-library/src/main/java/io/realm/internal/OsRealmConfig.java\nindex 87377ed36..1991b2a0a 100644\n--- a/realm/realm-library/src/main/java/io/realm/internal/OsRealmConfig.java\n+++ b/realm/realm-library/src/main/java/io/realm/internal/OsRealmConfig.java\n\n@@ -218,7 +218,7 @@ public class OsRealmConfig implements NativeObject {\n         String urlPrefix = (String)(syncConfigurationOptions[8]);\n         String customAuthorizationHeaderName = (String)(syncConfigurationOptions[9]);\n         Byte clientResyncMode = (Byte) syncConfigurationOptions[11];\n-        String partionKeyValue = (String) syncConfigurationOptions[12];\n+        String partitionValue = (String) syncConfigurationOptions[12];\n         Object syncService = syncConfigurationOptions[13];\n \n         // Convert the headers into a String array to make it easier to send through JNI\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkwNzcyNg==", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r413907726", "bodyText": "What does this annotation do?", "author": "edualonso", "createdAt": "2020-04-23T15:42:19Z", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmUser.java", "diffHunk": "@@ -432,8 +442,9 @@ public RealmMongoDBService getMongoDBService() {\n         return null;\n     }\n \n+    @SuppressFBWarnings(\"NP_METHOD_PARAMETER_TIGHTENS_ANNOTATION\")", "originalCommit": "75087aef485669500ec8e8ab5bc7115dc18a998d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ0NDIyOA==", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414444228", "bodyText": "It disables a FindBugs false positive. You can use this if what FindBugs complains about isn't accurate.", "author": "cmelchior", "createdAt": "2020-04-24T09:47:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkwNzcyNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4NjM2NQ==", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414186365", "bodyText": "btw why not rename SyncManager to SyncService?", "author": "nhachicha", "createdAt": "2020-04-23T23:18:23Z", "path": "realm/realm-library/src/androidTestObjectServer/java/io/realm/SessionTests.java", "diffHunk": "@@ -149,16 +153,17 @@ public void errorHandler_clientResetReported() {\n         looperThread.addTestRealm(realm);\n \n         // Trigger error\n-        SyncManager.simulateClientReset(SyncManager.getOrCreateSession(config, null));\n+        SyncManager syncService = user.getApp().getSyncService();", "originalCommit": "75087aef485669500ec8e8ab5bc7115dc18a998d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDMyOTEzNQ==", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414329135", "bodyText": "After yesterday's design meeting with the other SDK's the consensus landed on just renaming this to RealmSync in a similar way to RealmFunctions.\nWe are probably going to go through another round of naming review when we get closer to official launch.", "author": "cmelchior", "createdAt": "2020-04-24T06:33:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4NjM2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "3494fe0df20b23e97e55181b0865911c6219d33f", "chunk": "diff --git a/realm/realm-library/src/androidTestObjectServer/java/io/realm/SessionTests.java b/realm/realm-library/src/androidTestObjectServer/java/io/realm/SessionTests.java\nindex 7989261e8..90f6fb36d 100644\n--- a/realm/realm-library/src/androidTestObjectServer/java/io/realm/SessionTests.java\n+++ b/realm/realm-library/src/androidTestObjectServer/java/io/realm/SessionTests.java\n\n@@ -153,7 +152,7 @@ public class SessionTests {\n         looperThread.addTestRealm(realm);\n \n         // Trigger error\n-        SyncManager syncService = user.getApp().getSyncService();\n+        RealmSync syncService = user.getApp().getSyncService();\n         syncService.simulateClientReset(syncService.getSession((config)));\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5MDg5Nw==", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414190897", "bodyText": "You can annotate createTestUser with @JvmStatic and call it as a static method\nRealmUser user = SyncTestUtils.createTestUser(app);", "author": "nhachicha", "createdAt": "2020-04-23T23:30:11Z", "path": "realm/realm-library/src/androidTestObjectServer/java/io/realm/SchemaTests.java", "diffHunk": "@@ -42,11 +43,18 @@\n     public final TestSyncConfigurationFactory configFactory = new TestSyncConfigurationFactory();\n \n     private SyncConfiguration config;\n+    private TestRealmApp app;\n \n     @Before\n     public void setUp() {\n-        SyncUser user = SyncTestUtils.createTestUser();\n-        config = configFactory.createSyncConfigurationBuilder(user, \"realm://objectserver.realm.io/~/default\").build();\n+        app = new TestRealmApp();\n+        RealmUser user = SyncTestUtils.Companion.createTestUser(app);", "originalCommit": "75087aef485669500ec8e8ab5bc7115dc18a998d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3494fe0df20b23e97e55181b0865911c6219d33f", "chunk": "diff --git a/realm/realm-library/src/androidTestObjectServer/java/io/realm/SchemaTests.java b/realm/realm-library/src/androidTestObjectServer/java/io/realm/SchemaTests.java\nindex 6d3dbf9b5..6d2271bc4 100644\n--- a/realm/realm-library/src/androidTestObjectServer/java/io/realm/SchemaTests.java\n+++ b/realm/realm-library/src/androidTestObjectServer/java/io/realm/SchemaTests.java\n\n@@ -48,7 +48,7 @@ public class SchemaTests {\n     @Before\n     public void setUp() {\n         app = new TestRealmApp();\n-        RealmUser user = SyncTestUtils.Companion.createTestUser(app);\n+        RealmUser user = SyncTestUtils.createTestUser(app);\n         config = configFactory.createSyncConfigurationBuilder(user).build();\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI5MjY3OQ==", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414292679", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Returns the root folder containing all files and Realms used when when synchronizing data\n          \n          \n            \n                 * Returns the root folder containing all files and Realms used when synchronizing data", "author": "nhachicha", "createdAt": "2020-04-24T04:57:05Z", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java", "diffHunk": "@@ -88,48 +111,68 @@ public String getAppVersion() {\n      * FIXME\n      * @return\n      */\n-    public String getBaseUrl() {\n+    public URL getBaseUrl() {\n         return baseUrl;\n     }\n \n     /**\n      * FIXME\n      * @return\n      */\n-    public Context getContext() {\n-        return context;\n+    public byte[] getEncryptionKey() {\n+        return encryptionKey == null ? null : Arrays.copyOf(encryptionKey, encryptionKey.length);\n     }\n \n     /**\n      * FIXME\n      * @return\n      */\n-    public SyncSession.ErrorHandler getDefaultErrorHandler() {\n-        return defaultErrorHandler;\n+    public long getLogLevel() {\n+        return logLevel;\n     }\n \n     /**\n      * FIXME\n      * @return\n      */\n-    public byte[] getEncryptionKey() {\n-        return encryptionKey == null ? null : Arrays.copyOf(encryptionKey, encryptionKey.length);\n+    public long getRequestTimeoutMs() {\n+        return requestTimeoutMs;\n     }\n \n+\n     /**\n      * FIXME\n+     *\n      * @return\n      */\n-    public long getLogLevel() {\n-        return logLevel;\n+    public String getAuthorizationHeaderName() {\n+        return authorizationHeaderName;\n     }\n \n     /**\n      * FIXME\n+     *\n      * @return\n      */\n-    public long getRequestTimeoutMs() {\n-        return requestTimeoutMs;\n+    public Map<String, String> getCustomRequestHeaders() {\n+        return customHeaders;\n+    }\n+\n+    /**\n+     * FIXME\n+     *\n+     * @return\n+     */\n+    public SyncSession.ErrorHandler getDefaultErrorHandler() {\n+        return defaultErrorHandler;\n+    }\n+\n+    /**\n+     * Returns the root folder containing all files and Realms used when when synchronizing data", "originalCommit": "75087aef485669500ec8e8ab5bc7115dc18a998d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3494fe0df20b23e97e55181b0865911c6219d33f", "chunk": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java b/realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java\nindex 5595f5caa..a5f9341c7 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java\n\n@@ -168,7 +168,7 @@ public class RealmAppConfiguration {\n     }\n \n     /**\n-     * Returns the root folder containing all files and Realms used when when synchronizing data\n+     * Returns the root folder containing all files and Realms used when synchronizing data\n      * between the device and MongoDB Realm.\n      */\n     public File getSyncRootDirectory() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI5MzI3Ng==", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414293276", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     * Configures the root folder containing all files and Realms used when when synchronizing data\n          \n          \n            \n                     * Configures the root folder containing all files and Realms used when synchronizing data", "author": "nhachicha", "createdAt": "2020-04-24T04:58:55Z", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java", "diffHunk": "@@ -219,25 +294,97 @@ public Builder appVersion(String appVersion) {\n         /**\n          * FIXME\n          *\n-         * @param errorHandler\n+         * @param time\n+         * @param unit\n          * @return\n          */\n-        public Builder defaultSessionErrorHandler(@Nullable SyncSession.ErrorHandler errorHandler) {\n-            // FIXME checks\n-            this.defaultErrorHandler = errorHandler;\n+        public Builder requestTimeout(long time, TimeUnit unit) {\n+            if (time < 1) {\n+                throw new IllegalStateException(\"A timeout above 0 is required: \" + time);\n+            }\n+            Util.checkNull(unit, \"unit\");\n+            this.requestTimeoutMs = TimeUnit.MICROSECONDS.convert(time, unit);\n             return this;\n         }\n \n         /**\n-         * FIXME\n+         * Sets the name of the HTTP header used to send authorization data in when making requests to\n+         * MongoDB Realm. The MongoDB server or firewall must have been configured to expect a\n+         * custom authorization header.\n+         * <p>\n+         * The default authorization header is named \"Authorization\".\n          *\n-         * @param time\n-         * @param unit\n+         * @param headerName name of the header.\n+         * @throws IllegalArgumentException if a null or empty header is provided.\n+         * @see <a href=\"https://docs.realm.io/platform/guides/learn-realm-sync-and-integrate-with-a-proxy#adding-a-custom-proxy\">Adding a custom proxy</a>\n+         */\n+        public Builder authorizationHeaderName(String headerName) {\n+            Util.checkEmpty(headerName, \"headerName\");\n+            this.autorizationHeaderName = headerName;\n+            return this;\n+        }\n+\n+        /**\n+         * Adds an extra HTTP header to append to every request to a Realm Object Server.\n+         *\n+         * @param headerName the name of the header.\n+         * @param headerValue the value of header.\n+         * @throws IllegalArgumentException if a non-empty {@code headerName} is provided or a null {@code headerValue}.\n+         */\n+        public Builder addCustomRequestHeader(String headerName, String headerValue) {\n+            Util.checkEmpty(headerName, \"headerName\");\n+            Util.checkNull(headerValue, \"headerValue\");\n+            customHeaders.put(headerName, headerValue);\n+            return this;\n+        }\n+\n+        /**\n+         * Adds extra HTTP headers to append to every request to a Realm Object Server.\n+         *\n+         * @param headers map of (headerName, headerValue) pairs.\n+         * @throws IllegalArgumentException If any of the headers provided are illegal.\n+         */\n+        public Builder addCustomRequestHeaders(@Nullable Map<String, String> headers) {\n+            if (headers != null) {\n+                customHeaders.putAll(headers);\n+            }\n+            return this;\n+        }\n+\n+        /**\n+         *\n+         * @param errorHandler\n          * @return\n          */\n-        public Builder requestTimeout(long time, TimeUnit unit) {\n-            // FIXME checks\n-            this.requestTimeoutMs = TimeUnit.MICROSECONDS.convert(time, unit);\n+        public Builder defaultSyncErrorHandler(SyncSession.ErrorHandler errorHandler) {\n+            Util.checkNull(errorHandler, \"errorHandler\");\n+            defaultErrorHandler = errorHandler;\n+            return this;\n+        }\n+\n+        /**\n+         * Configures the root folder containing all files and Realms used when when synchronizing data", "originalCommit": "75087aef485669500ec8e8ab5bc7115dc18a998d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3494fe0df20b23e97e55181b0865911c6219d33f", "chunk": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java b/realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java\nindex 5595f5caa..a5f9341c7 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/RealmAppConfiguration.java\n\n@@ -363,7 +363,7 @@ public class RealmAppConfiguration {\n         }\n \n         /**\n-         * Configures the root folder containing all files and Realms used when when synchronizing data\n+         * Configures the root folder containing all files and Realms used when synchronizing data\n          * between the device and MongoDB Realm.\n          * <p>\n          * The default root dir is {@code Context.getFilesDir()/mongodb-realm}.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI5NDcwNQ==", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414294705", "bodyText": "I think all these endpoints (+ Stitch) should be in the dependencies file (built via BuildConfig)", "author": "nhachicha", "createdAt": "2020-04-24T05:03:25Z", "path": "realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java", "diffHunk": "@@ -200,29 +263,33 @@ static RealmConfiguration forRecovery(String canonicalPath, @Nullable byte[] enc\n         return new RealmConfiguration(null,null, canonicalPath,null, encryptionKey, 0,null, false, OsRealmConfig.Durability.FULL, schemaMediator, null, null, true, null, true, Long.MAX_VALUE);\n     }\n \n-    static URI resolveServerUrl(URI serverUrl, String userIdentifier) {\n+    static URI resolveServerUrl(URI baseUrl, RealmUser user) {\n+        // Configure the full path to the Realm\n+        String path = String.format(\"/api/client/v2.0/app/%s/realm-sync\", user.getApp().getConfiguration().getAppId());", "originalCommit": "75087aef485669500ec8e8ab5bc7115dc18a998d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ2OTM0NA==", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414469344", "bodyText": "This is being handled by ObjectStore now. So this method can actually be deleted.", "author": "cmelchior", "createdAt": "2020-04-24T10:28:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI5NDcwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "3494fe0df20b23e97e55181b0865911c6219d33f", "chunk": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java b/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java\nindex 384ce5c4e..ffd66501d 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java\n\n@@ -263,22 +263,6 @@ public class SyncConfiguration extends RealmConfiguration {\n         return new RealmConfiguration(null,null, canonicalPath,null, encryptionKey, 0,null, false, OsRealmConfig.Durability.FULL, schemaMediator, null, null, true, null, true, Long.MAX_VALUE);\n     }\n \n-    static URI resolveServerUrl(URI baseUrl, RealmUser user) {\n-        // Configure the full path to the Realm\n-        String path = String.format(\"/api/client/v2.0/app/%s/realm-sync\", user.getApp().getConfiguration().getAppId());\n-        try {\n-            return new URI(baseUrl.getScheme(),\n-                    baseUrl.getUserInfo(),\n-                    baseUrl.getHost(),\n-                    baseUrl.getPort(),\n-                    path,\n-                    null,\n-                    null);\n-        } catch (URISyntaxException e) {\n-            throw new IllegalArgumentException(\"Could not create a valid Sync URL \", e);\n-        }\n-    }\n-\n     // Extract the full server path, minus the file name\n     private static String getServerPath(RealmUser user, URI serverUrl) {\n         // FIXME Add support for partion key\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI5NTUyMQ==", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414295521", "bodyText": "maybe remove smaller since it's subjective\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * into smaller Realms that can be synchronized independently.\n          \n          \n            \n                 * into Realms that can be synchronized independently.", "author": "nhachicha", "createdAt": "2020-04-24T05:05:52Z", "path": "realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java", "diffHunk": "@@ -411,19 +477,27 @@ public String getUrlPrefix() {\n     /**\n      * Returns what happens in case of a Client Resync.\n      */\n-    public ClientResyncMode getClientResyncMode() {\n+    ClientResyncMode getClientResyncMode() {\n         return clientResyncMode;\n     }\n \n+    /**\n+     * Returns the value this Realm is partitioned on. The partition key is a property defined in\n+     * MongoDB Realm. All classes with a property with this value will be synchronized to the\n+     * Realm.\n+     *\n+     * @return the value being used by MongoDB Realm to partition the server side MongoDB Database\n+     * into smaller Realms that can be synchronized independently.", "originalCommit": "75087aef485669500ec8e8ab5bc7115dc18a998d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3494fe0df20b23e97e55181b0865911c6219d33f", "chunk": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java b/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java\nindex 384ce5c4e..ffd66501d 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java\n\n@@ -487,7 +471,7 @@ public class SyncConfiguration extends RealmConfiguration {\n      * Realm.\n      *\n      * @return the value being used by MongoDB Realm to partition the server side MongoDB Database\n-     * into smaller Realms that can be synchronized independently.\n+     * into Realms that can be synchronized independently.\n      */\n     public BsonValue getPartitionValue() {\n         return partitionValue;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI5NjI3Nw==", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414296277", "bodyText": "this description is a bit ambiguous, maybe reformulate into something similar to https://github.com/realm/realm-java/pull/6788/files#diff-f19583eb27d992ab7655df81251f244cR489", "author": "nhachicha", "createdAt": "2020-04-24T05:07:47Z", "path": "realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java", "diffHunk": "@@ -456,65 +530,101 @@ public ClientResyncMode getClientResyncMode() {\n         @Nullable // null means the user hasn't explicitly set one. An appropriate default is chosen when calling build()\n         private ClientResyncMode clientResyncMode = null;\n         private long maxNumberOfActiveVersions = Long.MAX_VALUE;\n+        private final BsonValue partitionKeyValue;\n \n-        Builder(Context context, SyncUser user, String url) {\n-            //noinspection ConstantConditions\n+        /**\n+         * FIXME\n+         *\n+         * @param user\n+         * @param partitionValue\n+         */\n+        public Builder(RealmUser user, String partitionValue) {\n+            this(user, new BsonString(partitionValue));\n+        }\n+\n+        /**\n+         * FIXME\n+         *\n+         * @param user\n+         * @param partitionValue\n+         */\n+        public Builder(RealmUser user, ObjectId partitionValue) {\n+            this(user, new BsonObjectId(partitionValue));\n+        }\n+\n+        /**\n+         * FIXME\n+         *\n+         * @param user\n+         * @param partitionValue\n+         */\n+        public Builder(RealmUser user, int partitionValue) {\n+            this(user, new BsonInt32(partitionValue));\n+        }\n+\n+        /**\n+         * FIXME\n+         *\n+         * @param user\n+         * @param partitionValue\n+         */\n+        public Builder(RealmUser user, long partitionValue) {\n+            this(user, new BsonInt64(partitionValue));\n+        }\n+\n+        /**\n+         * Builder used to construct instances of a SyncConfiguration in a fluent manner.\n+         *\n+         * @param user the user opening the Realm on the server.\n+         * @param partitionValue the partition value specifying which subset of data to include in the Realm.", "originalCommit": "75087aef485669500ec8e8ab5bc7115dc18a998d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3494fe0df20b23e97e55181b0865911c6219d33f", "chunk": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java b/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java\nindex 384ce5c4e..ffd66501d 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java\n\n@@ -530,7 +514,7 @@ public class SyncConfiguration extends RealmConfiguration {\n         @Nullable // null means the user hasn't explicitly set one. An appropriate default is chosen when calling build()\n         private ClientResyncMode clientResyncMode = null;\n         private long maxNumberOfActiveVersions = Long.MAX_VALUE;\n-        private final BsonValue partitionKeyValue;\n+        private final BsonValue partitionValue;\n \n         /**\n          * FIXME\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI5NzI2NA==", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414297264", "bodyText": "can we add a FIXME if the sync  team is willing to re-enable RECOVER_LOCAL_REALM?", "author": "nhachicha", "createdAt": "2020-04-24T05:10:27Z", "path": "realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java", "diffHunk": "@@ -1052,48 +1086,35 @@ public SyncConfiguration build() {\n                 }\n             }\n \n-            // Check if the user has an identifier, if not, it cannot use /~/.\n-            if (serverUrl.toString().contains(\"/~/\") && user.getIdentity() == null) {\n-                throw new IllegalStateException(\"The serverUrl contains a /~/, but the user does not have an identity.\" +\n-                        \" Most likely it hasn't been authenticated yet or has been created directly from an\" +\n-                        \" access token. Use a path without /~/.\");\n-            }\n-\n             // Set the default Client Resync Mode based on the current type of Realm.\n             // Eventually RECOVER_LOCAL_REALM should be the default for all types.\n             if (clientResyncMode == null) {\n-                clientResyncMode = ClientResyncMode.RECOVER_LOCAL_REALM;\n+                clientResyncMode = ClientResyncMode.MANUAL;", "originalCommit": "75087aef485669500ec8e8ab5bc7115dc18a998d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3494fe0df20b23e97e55181b0865911c6219d33f", "chunk": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java b/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java\nindex 384ce5c4e..ffd66501d 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java\n\n@@ -1088,6 +1074,7 @@ public class SyncConfiguration extends RealmConfiguration {\n \n             // Set the default Client Resync Mode based on the current type of Realm.\n             // Eventually RECOVER_LOCAL_REALM should be the default for all types.\n+            // FIXME: We should add support back for this.\n             if (clientResyncMode == null) {\n                 clientResyncMode = ClientResyncMode.MANUAL;\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI5NzUwMw==", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414297503", "bodyText": "it is possible or not? if yes we need to add a test for it", "author": "nhachicha", "createdAt": "2020-04-24T05:11:08Z", "path": "realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java", "diffHunk": "@@ -1052,48 +1086,35 @@ public SyncConfiguration build() {\n                 }\n             }\n \n-            // Check if the user has an identifier, if not, it cannot use /~/.\n-            if (serverUrl.toString().contains(\"/~/\") && user.getIdentity() == null) {\n-                throw new IllegalStateException(\"The serverUrl contains a /~/, but the user does not have an identity.\" +\n-                        \" Most likely it hasn't been authenticated yet or has been created directly from an\" +\n-                        \" access token. Use a path without /~/.\");\n-            }\n-\n             // Set the default Client Resync Mode based on the current type of Realm.\n             // Eventually RECOVER_LOCAL_REALM should be the default for all types.\n             if (clientResyncMode == null) {\n-                clientResyncMode = ClientResyncMode.RECOVER_LOCAL_REALM;\n+                clientResyncMode = ClientResyncMode.MANUAL;\n             }\n \n             if (rxFactory == null && isRxJavaAvailable()) {\n                 rxFactory = new RealmObservableFactory(true);\n             }\n \n+            // FIXME: Figure out how to map to on-disk path. Partition key can be up to 16MB in size.\n             // Determine location on disk\n-            // Use the serverUrl + user to create a unique filepath unless it has been explicitly overridden.\n-            // <rootDir>/<userIdentifier>/<serverPath>/<serverFileNameOrOverriddenFileName>\n-            URI resolvedServerUrl = resolveServerUrl(serverUrl, user.getIdentity());\n-            File rootDir = overrideDefaultFolder ? directory : defaultFolder;\n-            String realmPathFromRootDir = user.getIdentity() + \"/\" + getServerPath(resolvedServerUrl);\n-            File realmFileDirectory = new File(rootDir, realmPathFromRootDir);\n-\n-            String realmFileName = overrideDefaultLocalFileName ? fileName : defaultLocalFileName;\n+            // Use the serverUrl + user to create a unique filepath.\n+            // It is possible for users to change the root directory or realm file name.", "originalCommit": "75087aef485669500ec8e8ab5bc7115dc18a998d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ3NTA0MA==", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414475040", "bodyText": "I removed the option for changing the realm file name. The Sync root dir is now being defined as part of the RealmAppconfiguration. There should be a test for it there.", "author": "cmelchior", "createdAt": "2020-04-24T10:38:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI5NzUwMw=="}], "type": "inlineReview", "revised_code": {"commit": "3494fe0df20b23e97e55181b0865911c6219d33f", "chunk": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java b/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java\nindex 384ce5c4e..ffd66501d 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/SyncConfiguration.java\n\n@@ -1088,6 +1074,7 @@ public class SyncConfiguration extends RealmConfiguration {\n \n             // Set the default Client Resync Mode based on the current type of Realm.\n             // Eventually RECOVER_LOCAL_REALM should be the default for all types.\n+            // FIXME: We should add support back for this.\n             if (clientResyncMode == null) {\n                 clientResyncMode = ClientResyncMode.MANUAL;\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI5ODY0MQ==", "url": "https://github.com/realm/realm-java/pull/6788#discussion_r414298641", "bodyText": "I think you used 14 elsewhere (since we added two parameters only)", "author": "nhachicha", "createdAt": "2020-04-24T05:14:16Z", "path": "realm/realm-library/src/objectServer/java/io/realm/internal/SyncObjectServerFacade.java", "diffHunk": "@@ -112,10 +112,12 @@ public void realmClosed(RealmConfiguration configuration) {\n                     urlPrefix,\n                     customAuthorizationHeaderName,\n                     customHeaders,\n-                    syncConfig.getClientResyncMode().getNativeValue()\n+                    OsRealmConfig.CLIENT_RESYNC_MODE_MANUAL, // Client Resync is no longer supported in v10, but might be re-added later.\n+                    partitionValue,\n+                    app.getSyncService()\n             };\n         } else {\n-            return new Object[12];\n+            return new Object[15];", "originalCommit": "75087aef485669500ec8e8ab5bc7115dc18a998d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6211203282cb753ff28446b009686ad1fc7c5a96", "chunk": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/internal/SyncObjectServerFacade.java b/realm/realm-library/src/objectServer/java/io/realm/internal/SyncObjectServerFacade.java\nindex 13da192c1..a37f6bd75 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/internal/SyncObjectServerFacade.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/internal/SyncObjectServerFacade.java\n\n@@ -100,24 +100,24 @@ public class SyncObjectServerFacade extends ObjectServerFacade {\n             } else {\n                 throw new IllegalArgumentException(\"Unsupported type: \" + val);\n             }\n-            return new Object[]{\n-                    rosUserIdentity,\n-                    rosServerUrl,\n-                    syncRealmAuthUrl,\n-                    syncUserRefreshToken,\n-                    syncUserAccessToken,\n-                    syncConfig.syncClientValidateSsl(),\n-                    syncConfig.getServerCertificateFilePath(),\n-                    sessionStopPolicy,\n-                    urlPrefix,\n-                    customAuthorizationHeaderName,\n-                    customHeaders,\n-                    OsRealmConfig.CLIENT_RESYNC_MODE_MANUAL, // Client Resync is no longer supported in v10, but might be re-added later.\n-                    partitionValue,\n-                    app.getSyncService()\n-            };\n+            Object[] configObj = new Object[SYNC_CONFIG_OPTIONS];\n+            configObj[0] = rosUserIdentity;\n+            configObj[1] = rosServerUrl;\n+            configObj[2] = syncRealmAuthUrl;\n+            configObj[3] = syncUserRefreshToken;\n+            configObj[4] = syncUserAccessToken;\n+            configObj[5] = syncConfig.syncClientValidateSsl();\n+            configObj[6] = syncConfig.getServerCertificateFilePath();\n+            configObj[7] = sessionStopPolicy;\n+            configObj[8] = urlPrefix;\n+            configObj[9] = customAuthorizationHeaderName;\n+            configObj[10] = customHeaders;\n+            configObj[11] = OsRealmConfig.CLIENT_RESYNC_MODE_MANUAL;\n+            configObj[12] = partitionValue;\n+            configObj[13] = app.getSyncService();\n+            return configObj;\n         } else {\n-            return new Object[15];\n+            return new Object[SYNC_CONFIG_OPTIONS];\n         }\n     }\n \n"}}, {"oid": "6211203282cb753ff28446b009686ad1fc7c5a96", "url": "https://github.com/realm/realm-java/commit/6211203282cb753ff28446b009686ad1fc7c5a96", "message": "PR feedback", "committedDate": "2020-04-24T09:47:56Z", "type": "commit"}, {"oid": "3494fe0df20b23e97e55181b0865911c6219d33f", "url": "https://github.com/realm/realm-java/commit/3494fe0df20b23e97e55181b0865911c6219d33f", "message": "More PR feedback", "committedDate": "2020-04-24T10:38:28Z", "type": "commit"}, {"oid": "b90622987e21569b57d2f22424e101a521bf64c1", "url": "https://github.com/realm/realm-java/commit/b90622987e21569b57d2f22424e101a521bf64c1", "message": "Rename according to design discussion", "committedDate": "2020-04-24T13:57:54Z", "type": "commit"}, {"oid": "5338d2d32dc651874c237c2fb58e6b9a4100c318", "url": "https://github.com/realm/realm-java/commit/5338d2d32dc651874c237c2fb58e6b9a4100c318", "message": "Fix version", "committedDate": "2020-04-24T14:00:47Z", "type": "commit"}, {"oid": "d6fd6e6a159e25244a5e900a25a11bcaa06b19cf", "url": "https://github.com/realm/realm-java/commit/d6fd6e6a159e25244a5e900a25a11bcaa06b19cf", "message": "Fix tests", "committedDate": "2020-04-25T16:20:54Z", "type": "commit"}, {"oid": "8b22483fe3af8c84a597f67ed7b37b089ba7a3a2", "url": "https://github.com/realm/realm-java/commit/8b22483fe3af8c84a597f67ed7b37b089ba7a3a2", "message": "Merge branch 'cm/app/syncconfiguration' of https://github.com/realm/realm-java into cm/app/syncconfiguration", "committedDate": "2020-04-25T16:21:14Z", "type": "commit"}, {"oid": "d41de9a63899aa50384928189db0d8404e8a3413", "url": "https://github.com/realm/realm-java/commit/d41de9a63899aa50384928189db0d8404e8a3413", "message": "More test fixes", "committedDate": "2020-04-25T17:19:22Z", "type": "commit"}, {"oid": "fdc8a510e51010c72cc95ed8b240d5402739a688", "url": "https://github.com/realm/realm-java/commit/fdc8a510e51010c72cc95ed8b240d5402739a688", "message": "Delete all users before email tests", "committedDate": "2020-04-25T17:54:23Z", "type": "commit"}, {"oid": "7e0ebd50b973296bb10735349b06cd91e4a42d8e", "url": "https://github.com/realm/realm-java/commit/7e0ebd50b973296bb10735349b06cd91e4a42d8e", "message": "Latest image", "committedDate": "2020-04-26T12:52:39Z", "type": "commit"}]}