{"pr_number": 7152, "pr_title": "Add support for UUID type", "pr_createdAt": "2020-10-09T08:23:10Z", "pr_url": "https://github.com/realm/realm-java/pull/7152", "timeline": [{"oid": "a1e64879cc141305626f828990b781bb17d5a6b7", "url": "https://github.com/realm/realm-java/commit/a1e64879cc141305626f828990b781bb17d5a6b7", "message": "Initial work: UUID java support and test cases", "committedDate": "2020-09-28T10:37:15Z", "type": "commit"}, {"oid": "66f1dbd62c365ee381a357f1ea2c6a67f2b32542", "url": "https://github.com/realm/realm-java/commit/66f1dbd62c365ee381a357f1ea2c6a67f2b32542", "message": "Use monorepo", "committedDate": "2020-10-05T13:02:40Z", "type": "commit"}, {"oid": "df6d9aa67453c0457e59d99bcee7207a9fda9ad9", "url": "https://github.com/realm/realm-java/commit/df6d9aa67453c0457e59d99bcee7207a9fda9ad9", "message": "Use newer CMake", "committedDate": "2020-10-05T13:17:01Z", "type": "commit"}, {"oid": "526ca4d878646aa94255d236a5cceea423f2629a", "url": "https://github.com/realm/realm-java/commit/526ca4d878646aa94255d236a5cceea423f2629a", "message": "use latest monorepo", "committedDate": "2020-10-08T10:15:39Z", "type": "commit"}, {"oid": "1cbf1222328fd3ebbdee71dfe85289fa4ee57829", "url": "https://github.com/realm/realm-java/commit/1cbf1222328fd3ebbdee71dfe85289fa4ee57829", "message": "Point to right cmake version\nJenkins to use right cmake version\nFix imports and executables linking", "committedDate": "2020-10-08T12:37:35Z", "type": "commit"}, {"oid": "4051a96d541a259657b1711fea4787881713cfa7", "url": "https://github.com/realm/realm-java/commit/4051a96d541a259657b1711fea4787881713cfa7", "message": "Fix cmake url", "committedDate": "2020-10-08T12:40:25Z", "type": "commit"}, {"oid": "500a052e926ee17119d12adca1a6a9dd43bf7570", "url": "https://github.com/realm/realm-java/commit/500a052e926ee17119d12adca1a6a9dd43bf7570", "message": "Add ninja-build package to docker image", "committedDate": "2020-10-08T12:51:01Z", "type": "commit"}, {"oid": "ea9d79a2f51885723507e1ded6ddbf8660ae1555", "url": "https://github.com/realm/realm-java/commit/ea9d79a2f51885723507e1ded6ddbf8660ae1555", "message": "Add new cmake instructions to readme", "committedDate": "2020-10-08T15:02:32Z", "type": "commit"}, {"oid": "43c948c9744d3473fa680b55db86a159ef0eb6a8", "url": "https://github.com/realm/realm-java/commit/43c948c9744d3473fa680b55db86a159ef0eb6a8", "message": "Add bindings for realm-core UUID and missing test cases.", "committedDate": "2020-10-09T08:00:59Z", "type": "commit"}, {"oid": "4155188f32342af59a9d38962f49a11a175444e4", "url": "https://github.com/realm/realm-java/commit/4155188f32342af59a9d38962f49a11a175444e4", "message": "Add UUID realm results tests", "committedDate": "2020-10-09T09:28:20Z", "type": "commit"}, {"oid": "c82847e3c4f51e01da745442892f897db25edfb6", "url": "https://github.com/realm/realm-java/commit/c82847e3c4f51e01da745442892f897db25edfb6", "message": "don\u2019t worry about realm-core\u2019s command-line targets", "committedDate": "2020-10-12T19:47:27Z", "type": "commit"}, {"oid": "3521d39fc3a25a0adc11e33a35a7789fe7ab4b35", "url": "https://github.com/realm/realm-java/commit/3521d39fc3a25a0adc11e33a35a7789fe7ab4b35", "message": "use latest monorepo", "committedDate": "2020-10-19T13:03:23Z", "type": "commit"}, {"oid": "894f9d7e7b7a007d37d6aa36e29fcd300d7f6941", "url": "https://github.com/realm/realm-java/commit/894f9d7e7b7a007d37d6aa36e29fcd300d7f6941", "message": "Merge remote-tracking branch 'origin/master' into yg/monorepo-submodule\n\n# Conflicts:\n#\trealm/realm-library/src/main/cpp/object-store", "committedDate": "2020-10-19T14:04:39Z", "type": "commit"}, {"oid": "d2b36c0665b27b7a546e20877f88b92a9394ce6c", "url": "https://github.com/realm/realm-java/commit/d2b36c0665b27b7a546e20877f88b92a9394ce6c", "message": "Add support for LTO. It is enabled by default for release builds, but can be opted out of.", "committedDate": "2020-10-19T14:50:15Z", "type": "commit"}, {"oid": "2cc6fe7983735cbb9a92425fd9fae982f5dd0f6a", "url": "https://github.com/realm/realm-java/commit/2cc6fe7983735cbb9a92425fd9fae982f5dd0f6a", "message": "Merge branch 'yg/monorepo-submodule' of https://github.com/realm/realm-java into yg/monorepo-submodule", "committedDate": "2020-10-19T14:50:22Z", "type": "commit"}, {"oid": "8bb4771e159d1b4c21ded020a37c123e55b471de", "url": "https://github.com/realm/realm-java/commit/8bb4771e159d1b4c21ded020a37c123e55b471de", "message": "Rename abiFilter to indicate it support multiple flags", "committedDate": "2020-10-19T14:53:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3MTM2NQ==", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r508271365", "bodyText": "Primitive lists have been implemented. We should probably track fixing these unit tests through a separate issue.", "author": "cmelchior", "createdAt": "2020-10-20T07:31:35Z", "path": "realm/realm-library/src/androidTest/java/io/realm/LinkingObjectsDynamicTests.java", "diffHunk": "@@ -253,6 +256,11 @@ public void linkingObjects_invalidFieldType() {\n                         //object.linkingObjects(AllJavaTypes.CLASS_NAME, AllJavaTypes.FIELD_DOUBLE_LIST);\n                         //break;\n                         throw new IllegalArgumentException(\"Unexpected field type\");\n+                    case UUID_LIST:\n+                        // FIXME enable this once Primitive List is implemented", "originalCommit": "4155188f32342af59a9d38962f49a11a175444e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQwOTIwNg==", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r508409206", "bodyText": "Have created this PR: #7160 with the tests.", "author": "clementetb", "createdAt": "2020-10-20T11:03:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3MTM2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "f0af4cea4efd0b2d3ac2122ae3f3559c225f481f", "chunk": "diff --git a/realm/realm-library/src/androidTest/java/io/realm/LinkingObjectsDynamicTests.java b/realm/realm-library/src/androidTest/java/io/realm/LinkingObjectsDynamicTests.java\nindex bd30c375a..7e3bbdef1 100644\n--- a/realm/realm-library/src/androidTest/java/io/realm/LinkingObjectsDynamicTests.java\n+++ b/realm/realm-library/src/androidTest/java/io/realm/LinkingObjectsDynamicTests.java\n\n@@ -256,11 +253,6 @@ public class LinkingObjectsDynamicTests {\n                         //object.linkingObjects(AllJavaTypes.CLASS_NAME, AllJavaTypes.FIELD_DOUBLE_LIST);\n                         //break;\n                         throw new IllegalArgumentException(\"Unexpected field type\");\n-                    case UUID_LIST:\n-                        // FIXME enable this once Primitive List is implemented\n-                        //object.linkingObjects(AllJavaTypes.CLASS_NAME, AllJavaTypes.FIELD_DOUBLE_LIST);\n-                        //break;\n-                        throw new IllegalArgumentException(\"Unexpected field type\");\n                     default:\n                         fail(\"unknown type: \" + fieldType);\n                         break;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3MjgyNw==", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r508272827", "bodyText": "Any reason you are not using UUID directly here. There are a a lot of UUID.fromString(...) calls below that could be removed by doing that instead?", "author": "cmelchior", "createdAt": "2020-10-20T07:34:06Z", "path": "realm/realm-library/src/androidTest/java/io/realm/RealmResultsTests.java", "diffHunk": "@@ -84,6 +85,9 @@\n     private Realm realm;\n     private RealmResults<AllTypes> collection;\n \n+    private static final String uuid1 = \"017ba5ca-aa12-4afa-9219-e20cc3018599\";", "originalCommit": "4155188f32342af59a9d38962f49a11a175444e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQyNjYwOA==", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r508426608", "bodyText": "I thought to force use different object instances during the validation to simulate what would be a real scenario, where you store one instance and then you compare with another.", "author": "clementetb", "createdAt": "2020-10-20T11:34:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3MjgyNw=="}], "type": "inlineReview", "revised_code": {"commit": "f0af4cea4efd0b2d3ac2122ae3f3559c225f481f", "chunk": "diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmResultsTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmResultsTests.java\nindex 50bbf6a3a..b892f38fe 100644\n--- a/realm/realm-library/src/androidTest/java/io/realm/RealmResultsTests.java\n+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmResultsTests.java\n\n@@ -85,9 +84,6 @@ public class RealmResultsTests extends CollectionTests {\n     private Realm realm;\n     private RealmResults<AllTypes> collection;\n \n-    private static final String uuid1 = \"017ba5ca-aa12-4afa-9219-e20cc3018599\";\n-    private static final String uuid2 = \"027ba5ca-aa12-4afa-9219-e20cc3018599\";\n-\n     @Before\n     public void setUp() {\n         RealmConfiguration realmConfig = configFactory.createConfiguration();\n"}}, {"oid": "f0af4cea4efd0b2d3ac2122ae3f3559c225f481f", "url": "https://github.com/realm/realm-java/commit/f0af4cea4efd0b2d3ac2122ae3f3559c225f481f", "message": "Set an optimization level, it is required when enabling LTO.", "committedDate": "2020-10-21T13:52:09Z", "type": "commit"}, {"oid": "bd14172c23ff3f7780f336d69bdc44d85347740e", "url": "https://github.com/realm/realm-java/commit/bd14172c23ff3f7780f336d69bdc44d85347740e", "message": "Bump core commit", "committedDate": "2020-10-21T13:54:03Z", "type": "commit"}, {"oid": "099f3ff0d4c2cb8b65173419ae35721878071f1c", "url": "https://github.com/realm/realm-java/commit/099f3ff0d4c2cb8b65173419ae35721878071f1c", "message": "Merge branch 'yg/monorepo-submodule' into ct/support-uuid-type", "committedDate": "2020-10-21T13:56:24Z", "type": "commit"}, {"oid": "011c10ccdeffe7cfefd65867ab75d335a7a0b528", "url": "https://github.com/realm/realm-java/commit/011c10ccdeffe7cfefd65867ab75d335a7a0b528", "message": "PR ammends", "committedDate": "2020-10-21T14:09:20Z", "type": "commit"}, {"oid": "059fa64a0fd9118180ffc85e9249c20126ec58ae", "url": "https://github.com/realm/realm-java/commit/059fa64a0fd9118180ffc85e9249c20126ec58ae", "message": "Bump monorepo core version", "committedDate": "2020-11-02T11:28:26Z", "type": "commit"}, {"oid": "28e84ef57b7781694554099258cc1eabd519ed06", "url": "https://github.com/realm/realm-java/commit/28e84ef57b7781694554099258cc1eabd519ed06", "message": "Merge branch 'yg/monorepo-submodule' into ct/support-uuid-type", "committedDate": "2020-11-02T11:30:08Z", "type": "commit"}, {"oid": "73336ba9ab777450e2a207cc6fc280e47c81232b", "url": "https://github.com/realm/realm-java/commit/73336ba9ab777450e2a207cc6fc280e47c81232b", "message": "Fix test case", "committedDate": "2020-11-02T11:39:39Z", "type": "commit"}, {"oid": "8399695b7f3d336daa62a4024fde2706e6f5d7f5", "url": "https://github.com/realm/realm-java/commit/8399695b7f3d336daa62a4024fde2706e6f5d7f5", "message": "Merge branch 'support-new-datatypes' into yg/monorepo-submodule\n\n# Conflicts:\n#\trealm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsMongoClient.cpp\n#\trealm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsMongoCollection.cpp\n#\trealm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsMongoDatabase.cpp\n#\trealm/realm-library/src/main/cpp/io_realm_internal_objectstore_OsWatchStream.cpp\n#\trealm/realm-library/src/main/cpp/io_realm_mongodb_mongo_iterable_AggregateIterable.cpp\n#\trealm/realm-library/src/main/cpp/io_realm_mongodb_mongo_iterable_FindIterable.cpp\n#\trealm/realm-library/src/main/cpp/object-store", "committedDate": "2020-11-06T13:54:41Z", "type": "commit"}, {"oid": "f22b545199b82c61234a5d9b39c288f4fe0f66a7", "url": "https://github.com/realm/realm-java/commit/f22b545199b82c61234a5d9b39c288f4fe0f66a7", "message": "rollback mongodb realm server version", "committedDate": "2020-11-06T20:24:26Z", "type": "commit"}, {"oid": "b735438dd06a9efb5afdae57d974f15aaa633289", "url": "https://github.com/realm/realm-java/commit/b735438dd06a9efb5afdae57d974f15aaa633289", "message": "Fix checkstyle step in Jenkins file", "committedDate": "2020-11-09T09:08:48Z", "type": "commit"}, {"oid": "c9dd682a3e64c25b74a94d29701b1dccf373e7b7", "url": "https://github.com/realm/realm-java/commit/c9dd682a3e64c25b74a94d29701b1dccf373e7b7", "message": "Merge branch 'yg/monorepo-submodule' into ct/support-uuid-type\n\n# Conflicts:\n#\trealm/realm-library/src/androidTest/java/io/realm/LinkingObjectsDynamicTests.java\n#\trealm/realm-library/src/androidTest/java/io/realm/QueryTests.java\n#\trealm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java\n#\trealm/realm-library/src/androidTest/java/io/realm/internal/QueryDescriptorTests.java", "committedDate": "2020-11-09T10:27:31Z", "type": "commit"}, {"oid": "cddbf3e4e69f807351cfe8891eaf865a766a6337", "url": "https://github.com/realm/realm-java/commit/cddbf3e4e69f807351cfe8891eaf865a766a6337", "message": "Update dynamic realm UUID tests", "committedDate": "2020-11-09T12:17:38Z", "type": "commit"}, {"oid": "39f1206c4f9128bc49e323bb5f75f494c3d0599f", "url": "https://github.com/realm/realm-java/commit/39f1206c4f9128bc49e323bb5f75f494c3d0599f", "message": "Merge branch 'support-new-datatypes' into ct/support-uuid-type", "committedDate": "2020-11-09T12:22:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE3MTUxNw==", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r521171517", "bodyText": "Are there test for imports through UUID?", "author": "rorbech", "createdAt": "2020-11-11T07:41:33Z", "path": "realm/realm-annotations-processor/src/test/resources/io/realm/some_test_AllTypesRealmProxy.java", "diffHunk": "@@ -1165,6 +1241,9 @@ public static String getSimpleClassName() {\n             if (json.has(\"columnObjectIdList\")) {\n                 excludeFields.add(\"columnObjectIdList\");\n             }\n+            if (json.has(\"columnUUIDList\")) {", "originalCommit": "39f1206c4f9128bc49e323bb5f75f494c3d0599f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3MjU3Nw==", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r521472577", "bodyText": "Good catch, I have added them now.", "author": "clementetb", "createdAt": "2020-11-11T16:18:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE3MTUxNw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE3MTc2MQ==", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r521171761", "bodyText": "This doesn't look righ. Empty block!?", "author": "rorbech", "createdAt": "2020-11-11T07:42:07Z", "path": "realm/realm-annotations-processor/src/test/resources/io/realm/some_test_AllTypesRealmProxy.java", "diffHunk": "@@ -1367,6 +1447,7 @@ public static String getSimpleClassName() {\n                 } else {\n                     objProxy.realmSet$columnObjectId(new org.bson.types.ObjectId(reader.nextString()));\n                 }\n+            } else if (name.equals(\"columnUUID\")) {", "originalCommit": "39f1206c4f9128bc49e323bb5f75f494c3d0599f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3Mjk5Mg==", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r521472992", "bodyText": "I didn't include a json conversor in the annotation processor. Now should be ok.", "author": "clementetb", "createdAt": "2020-11-11T16:19:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE3MTc2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "69c5543dc11fd18519d88c529bcdff9b92a3564a", "chunk": "diff --git a/realm/realm-annotations-processor/src/test/resources/io/realm/some_test_AllTypesRealmProxy.java b/realm/realm-annotations-processor/src/test/resources/io/realm/some_test_AllTypesRealmProxy.java\nindex 99c881312..540fd2538 100644\n--- a/realm/realm-annotations-processor/src/test/resources/io/realm/some_test_AllTypesRealmProxy.java\n+++ b/realm/realm-annotations-processor/src/test/resources/io/realm/some_test_AllTypesRealmProxy.java\n\n@@ -1448,6 +1460,12 @@ public class some_test_AllTypesRealmProxy extends some.test.AllTypes\n                     objProxy.realmSet$columnObjectId(new org.bson.types.ObjectId(reader.nextString()));\n                 }\n             } else if (name.equals(\"columnUUID\")) {\n+                if (reader.peek() == JsonToken.NULL) {\n+                    reader.skipValue();\n+                    objProxy.realmSet$columnUUID(null);\n+                } else {\n+                    objProxy.realmSet$columnUUID(java.util.UUID.fromString(reader.nextString()));\n+                }\n             } else if (name.equals(\"columnDate\")) {\n                 if (reader.peek() == JsonToken.NULL) {\n                     reader.skipValue();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE3NTE2MQ==", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r521175161", "bodyText": "Doesn't test that it is not equal. In populateTestRealm you could insert uuid if i%2==0 and otherwise insert a random one.", "author": "rorbech", "createdAt": "2020-11-11T07:50:03Z", "path": "realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java", "diffHunk": "@@ -684,6 +688,15 @@ public void equalTo_objectId() {\n         }\n     }\n \n+    @Test", "originalCommit": "39f1206c4f9128bc49e323bb5f75f494c3d0599f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3NDU3NQ==", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r521474575", "bodyText": "Have included thenotequal test and the modified the equalto for UUID as well for the ObjectId and Decimal128.", "author": "clementetb", "createdAt": "2020-11-11T16:21:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE3NTE2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjA0NTg5Nw==", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r522045897", "bodyText": "But without filtering some out you have not shown that equalTo actually discards non-equal entries (unless notEqual is implemented by the complement of equalTo)", "author": "rorbech", "createdAt": "2020-11-12T11:46:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE3NTE2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg0OTY3MA==", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r534849670", "bodyText": "Still does not show that equalsTo actually filter things out.", "author": "rorbech", "createdAt": "2020-12-03T07:54:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE3NTE2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc4OTI0NA==", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r537789244", "bodyText": "We do check the number of results for the given query. Do you have any suggestions?", "author": "clementetb", "createdAt": "2020-12-07T19:55:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE3NTE2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "69c5543dc11fd18519d88c529bcdff9b92a3564a", "chunk": "diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java\nindex c4233581a..12055f99b 100644\n--- a/realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java\n+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java\n\n@@ -674,26 +671,96 @@ public class RealmQueryTests extends QueryTests {\n     @Test\n     public void equalTo_decimal128() {\n         populateTestRealm(realm, 10);\n-        RealmResults<AllTypes> resultList = realm.where(AllTypes.class).equalTo(AllTypes.FIELD_DECIMAL128, new Decimal128(new BigDecimal( \"7.23456789\"))).findAll();\n-        assertEquals(1, resultList.size());\n-        assertEquals(new Decimal128(new BigDecimal( \"7.23456789\")), resultList.get(0).getColumnDecimal128());\n+\n+        for (int i = 0; i < 10; i++) {\n+            RealmResults<AllTypes> resultList = realm.where(AllTypes.class)\n+                    .equalTo(AllTypes.FIELD_DECIMAL128, new Decimal128(new BigDecimal(i + \".23456789\")))\n+                    .sort(AllTypes.FIELD_DECIMAL128, Sort.ASCENDING)\n+                    .findAll();\n+\n+            assertEquals(1, resultList.size());\n+            assertEquals(new Decimal128(new BigDecimal(i + \".23456789\")), resultList.get(0).getColumnDecimal128());\n+        }\n     }\n \n     @Test\n     public void equalTo_objectId() {\n         populateTestRealm(realm, 10);\n-        RealmResults<AllTypes> resultList = realm.where(AllTypes.class).sort(AllTypes.FIELD_OBJECT_ID, Sort.ASCENDING).findAll();\n+\n         for (int i = 0; i < 10; i++) {\n-            assertEquals(new ObjectId(TestHelper.generateObjectIdHexString(i)), resultList.get(i).getColumnObjectId());\n+            RealmResults<AllTypes> resultList = realm.where(AllTypes.class)\n+                    .equalTo(AllTypes.FIELD_OBJECT_ID, new ObjectId(TestHelper.generateObjectIdHexString(i)))\n+                    .sort(AllTypes.FIELD_OBJECT_ID, Sort.ASCENDING)\n+                    .findAll();\n+\n+            assertEquals(1, resultList.size());\n+            assertEquals(new ObjectId(TestHelper.generateObjectIdHexString(i)), resultList.get(0).getColumnObjectId());\n         }\n     }\n \n     @Test\n     public void equalTo_UUID() {\n         populateTestRealm(realm, 10);\n-        RealmResults<AllTypes> resultList = realm.where(AllTypes.class).sort(AllTypes.FIELD_UUID, Sort.ASCENDING).findAll();\n         for (int i = 0; i < 10; i++) {\n-            assertEquals(UUID.fromString(uuid), resultList.get(i).getColumnUUID());\n+            RealmResults<AllTypes> resultList = realm\n+                    .where(AllTypes.class)\n+                    .equalTo(AllTypes.FIELD_UUID, UUID.fromString(TestHelper.generateUUIDString(i)))\n+                    .sort(AllTypes.FIELD_UUID, Sort.ASCENDING)\n+                    .findAll();\n+\n+            assertEquals(1, resultList.size());\n+            assertEquals(UUID.fromString(TestHelper.generateUUIDString(i)), resultList.get(0).getColumnUUID());\n+        }\n+    }\n+\n+    @Test\n+    public void notEqualTo_objectId() {\n+        populateTestRealm(realm, 10);\n+\n+        RealmResults<AllTypes> resultList = realm\n+                .where(AllTypes.class)\n+                .notEqualTo(AllTypes.FIELD_OBJECT_ID, new ObjectId(TestHelper.generateObjectIdHexString(0)))\n+                .sort(AllTypes.FIELD_OBJECT_ID, Sort.ASCENDING)\n+                .findAll();\n+\n+        assertEquals(9, resultList.size());\n+\n+        for (int i = 1; i < 10; i++) {\n+            assertNotEquals(new ObjectId(TestHelper.generateObjectIdHexString(0)), resultList.get(0).getColumnObjectId());\n+        }\n+    }\n+\n+    @Test\n+    public void notEqualTo_decimal128() {\n+        populateTestRealm(realm, 10);\n+\n+        RealmResults<AllTypes> resultList = realm\n+                .where(AllTypes.class)\n+                .notEqualTo(AllTypes.FIELD_DECIMAL128, new Decimal128(new BigDecimal(\"0.23456789\")))\n+                .sort(AllTypes.FIELD_UUID, Sort.ASCENDING)\n+                .findAll();\n+\n+        assertEquals(9, resultList.size());\n+\n+        for (int i = 1; i < 10; i++) {\n+            assertNotEquals(new Decimal128(new BigDecimal(\"0.23456789\")), resultList.get(0).getColumnDecimal128());\n+        }\n+    }\n+\n+    @Test\n+    public void notEqualTo_UUID() {\n+        populateTestRealm(realm, 10);\n+\n+        RealmResults<AllTypes> resultList = realm\n+                .where(AllTypes.class)\n+                .notEqualTo(AllTypes.FIELD_UUID, UUID.fromString(\"007ba5ca-aa12-4afa-9219-e20cc3018599\"))\n+                .sort(AllTypes.FIELD_UUID, Sort.ASCENDING)\n+                .findAll();\n+\n+        assertEquals(10, resultList.size());\n+\n+        for (int i = 0; i < 10; i++) {\n+            assertNotEquals(UUID.fromString(\"007ba5ca-aa12-4afa-9219-e20cc3018599\"), resultList.get(0).getColumnUUID());\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE3Mjg1NA==", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r521172854", "bodyText": "With all the tests in UUID tests, maybe remove this one? Also it doesn't really test equalTo, but sort.", "author": "cmelchior", "createdAt": "2020-11-11T07:44:42Z", "path": "realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java", "diffHunk": "@@ -684,6 +688,15 @@ public void equalTo_objectId() {\n         }\n     }\n \n+    @Test\n+    public void equalTo_UUID() {", "originalCommit": "39f1206c4f9128bc49e323bb5f75f494c3d0599f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ3ODAzMg==", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r521478032", "bodyText": "The test was based on the objectid's equalto. I have fixed them.\nHave added tests for notequal on UUID, objectid and decimal128 as well.", "author": "clementetb", "createdAt": "2020-11-11T16:26:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE3Mjg1NA=="}], "type": "inlineReview", "revised_code": {"commit": "69c5543dc11fd18519d88c529bcdff9b92a3564a", "chunk": "diff --git a/realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java b/realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java\nindex c4233581a..12055f99b 100644\n--- a/realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java\n+++ b/realm/realm-library/src/androidTest/java/io/realm/RealmQueryTests.java\n\n@@ -674,26 +671,96 @@ public class RealmQueryTests extends QueryTests {\n     @Test\n     public void equalTo_decimal128() {\n         populateTestRealm(realm, 10);\n-        RealmResults<AllTypes> resultList = realm.where(AllTypes.class).equalTo(AllTypes.FIELD_DECIMAL128, new Decimal128(new BigDecimal( \"7.23456789\"))).findAll();\n-        assertEquals(1, resultList.size());\n-        assertEquals(new Decimal128(new BigDecimal( \"7.23456789\")), resultList.get(0).getColumnDecimal128());\n+\n+        for (int i = 0; i < 10; i++) {\n+            RealmResults<AllTypes> resultList = realm.where(AllTypes.class)\n+                    .equalTo(AllTypes.FIELD_DECIMAL128, new Decimal128(new BigDecimal(i + \".23456789\")))\n+                    .sort(AllTypes.FIELD_DECIMAL128, Sort.ASCENDING)\n+                    .findAll();\n+\n+            assertEquals(1, resultList.size());\n+            assertEquals(new Decimal128(new BigDecimal(i + \".23456789\")), resultList.get(0).getColumnDecimal128());\n+        }\n     }\n \n     @Test\n     public void equalTo_objectId() {\n         populateTestRealm(realm, 10);\n-        RealmResults<AllTypes> resultList = realm.where(AllTypes.class).sort(AllTypes.FIELD_OBJECT_ID, Sort.ASCENDING).findAll();\n+\n         for (int i = 0; i < 10; i++) {\n-            assertEquals(new ObjectId(TestHelper.generateObjectIdHexString(i)), resultList.get(i).getColumnObjectId());\n+            RealmResults<AllTypes> resultList = realm.where(AllTypes.class)\n+                    .equalTo(AllTypes.FIELD_OBJECT_ID, new ObjectId(TestHelper.generateObjectIdHexString(i)))\n+                    .sort(AllTypes.FIELD_OBJECT_ID, Sort.ASCENDING)\n+                    .findAll();\n+\n+            assertEquals(1, resultList.size());\n+            assertEquals(new ObjectId(TestHelper.generateObjectIdHexString(i)), resultList.get(0).getColumnObjectId());\n         }\n     }\n \n     @Test\n     public void equalTo_UUID() {\n         populateTestRealm(realm, 10);\n-        RealmResults<AllTypes> resultList = realm.where(AllTypes.class).sort(AllTypes.FIELD_UUID, Sort.ASCENDING).findAll();\n         for (int i = 0; i < 10; i++) {\n-            assertEquals(UUID.fromString(uuid), resultList.get(i).getColumnUUID());\n+            RealmResults<AllTypes> resultList = realm\n+                    .where(AllTypes.class)\n+                    .equalTo(AllTypes.FIELD_UUID, UUID.fromString(TestHelper.generateUUIDString(i)))\n+                    .sort(AllTypes.FIELD_UUID, Sort.ASCENDING)\n+                    .findAll();\n+\n+            assertEquals(1, resultList.size());\n+            assertEquals(UUID.fromString(TestHelper.generateUUIDString(i)), resultList.get(0).getColumnUUID());\n+        }\n+    }\n+\n+    @Test\n+    public void notEqualTo_objectId() {\n+        populateTestRealm(realm, 10);\n+\n+        RealmResults<AllTypes> resultList = realm\n+                .where(AllTypes.class)\n+                .notEqualTo(AllTypes.FIELD_OBJECT_ID, new ObjectId(TestHelper.generateObjectIdHexString(0)))\n+                .sort(AllTypes.FIELD_OBJECT_ID, Sort.ASCENDING)\n+                .findAll();\n+\n+        assertEquals(9, resultList.size());\n+\n+        for (int i = 1; i < 10; i++) {\n+            assertNotEquals(new ObjectId(TestHelper.generateObjectIdHexString(0)), resultList.get(0).getColumnObjectId());\n+        }\n+    }\n+\n+    @Test\n+    public void notEqualTo_decimal128() {\n+        populateTestRealm(realm, 10);\n+\n+        RealmResults<AllTypes> resultList = realm\n+                .where(AllTypes.class)\n+                .notEqualTo(AllTypes.FIELD_DECIMAL128, new Decimal128(new BigDecimal(\"0.23456789\")))\n+                .sort(AllTypes.FIELD_UUID, Sort.ASCENDING)\n+                .findAll();\n+\n+        assertEquals(9, resultList.size());\n+\n+        for (int i = 1; i < 10; i++) {\n+            assertNotEquals(new Decimal128(new BigDecimal(\"0.23456789\")), resultList.get(0).getColumnDecimal128());\n+        }\n+    }\n+\n+    @Test\n+    public void notEqualTo_UUID() {\n+        populateTestRealm(realm, 10);\n+\n+        RealmResults<AllTypes> resultList = realm\n+                .where(AllTypes.class)\n+                .notEqualTo(AllTypes.FIELD_UUID, UUID.fromString(\"007ba5ca-aa12-4afa-9219-e20cc3018599\"))\n+                .sort(AllTypes.FIELD_UUID, Sort.ASCENDING)\n+                .findAll();\n+\n+        assertEquals(10, resultList.size());\n+\n+        for (int i = 0; i < 10; i++) {\n+            assertNotEquals(UUID.fromString(\"007ba5ca-aa12-4afa-9219-e20cc3018599\"), resultList.get(0).getColumnUUID());\n         }\n     }\n \n"}}, {"oid": "d6fc18bb80d7ebf40c09d708524d32b53af9f80a", "url": "https://github.com/realm/realm-java/commit/d6fc18bb80d7ebf40c09d708524d32b53af9f80a", "message": "Update realm/realm-library/src/main/cpp/io_realm_internal_TableQuery.cpp\n\nCo-authored-by: Brian Munkholm <bmunkholm@users.noreply.github.com>", "committedDate": "2020-11-12T09:58:36Z", "type": "commit"}, {"oid": "774e7b3138114aa073016ce002bd42a37a4bd7a2", "url": "https://github.com/realm/realm-java/commit/774e7b3138114aa073016ce002bd42a37a4bd7a2", "message": "Update realm/realm-library/src/main/cpp/io_realm_internal_TableQuery.cpp\n\nCo-authored-by: Christian Melchior <christian@ilios.dk>", "committedDate": "2020-11-12T09:58:51Z", "type": "commit"}, {"oid": "69c5543dc11fd18519d88c529bcdff9b92a3564a", "url": "https://github.com/realm/realm-java/commit/69c5543dc11fd18519d88c529bcdff9b92a3564a", "message": "PR change requests", "committedDate": "2020-11-12T12:08:54Z", "type": "commit"}, {"oid": "775e2de24731f9aa5095bfa95700601e313079fc", "url": "https://github.com/realm/realm-java/commit/775e2de24731f9aa5095bfa95700601e313079fc", "message": "Add changes into the changelog", "committedDate": "2020-11-12T15:18:48Z", "type": "commit"}, {"oid": "6d09178a4626e2dc14eb9c015cf2a543a6255488", "url": "https://github.com/realm/realm-java/commit/6d09178a4626e2dc14eb9c015cf2a543a6255488", "message": "Allow UUID to be a primary type", "committedDate": "2020-11-24T16:19:49Z", "type": "commit"}, {"oid": "53280d755f866bf580fb3ab969df00d41e8b932e", "url": "https://github.com/realm/realm-java/commit/53280d755f866bf580fb3ab969df00d41e8b932e", "message": "Merge in latest support new data types", "committedDate": "2020-11-27T16:42:21Z", "type": "commit"}, {"oid": "03caa5571b1483d593b835141d22577ae52596a6", "url": "https://github.com/realm/realm-java/commit/03caa5571b1483d593b835141d22577ae52596a6", "message": "Remove ignore", "committedDate": "2020-11-27T16:43:25Z", "type": "commit"}, {"oid": "eea44950461ac783f88db7a17b2e5d2ca835a4cd", "url": "https://github.com/realm/realm-java/commit/eea44950461ac783f88db7a17b2e5d2ca835a4cd", "message": "Bump master", "committedDate": "2020-11-27T16:46:54Z", "type": "commit"}, {"oid": "93cf711f3bed6e16b7e93fa779b66474b08a48a1", "url": "https://github.com/realm/realm-java/commit/93cf711f3bed6e16b7e93fa779b66474b08a48a1", "message": "Disable tests affected by realm lists bug in core", "committedDate": "2020-12-03T08:56:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTAxNzkyMw==", "url": "https://github.com/realm/realm-java/pull/7152#discussion_r535017923", "bodyText": "Probably not for this PR, but bookkeeping/correctness of all these test would be improved significantly if we introduced RealmFieldType.indexable(), etc. and had the test iterate the RealmFieldType.values(). If not needed in the public API we could maybe add some utilities for test with the same concept. But seems like there are plenty of places where it could be convenient internally too ex. https://github.com/realm/realm-java/pull/7152/files#diff-6d4cb257e0e9ac7445f8cce3a43be3a9c690525ec6268d5ddb96fb80d157ce4bR58", "author": "rorbech", "createdAt": "2020-12-03T09:43:17Z", "path": "realm/realm-annotations-processor/src/test/java/io/realm/processor/RealmProcessorTest.java", "diffHunk": "@@ -278,7 +278,7 @@ public void compileCustomAccessor() {\n     @Test\n     public void compileIndexTypes() throws IOException {\n         final String[] validIndexFieldTypes = {\"byte\", \"short\", \"int\", \"long\", \"boolean\", \"String\", \"java.util.Date\",\n-                \"Byte\", \"Short\", \"Integer\", \"Long\", \"Boolean\"};\n+                \"Byte\", \"Short\", \"Integer\", \"Long\", \"Boolean\", \"org.bson.types.ObjectId\", \"java.util.UUID\"};", "originalCommit": "93cf711f3bed6e16b7e93fa779b66474b08a48a1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "051bce84b446a3b85758ac7406443bf8d04306ca", "url": "https://github.com/realm/realm-java/commit/051bce84b446a3b85758ac7406443bf8d04306ca", "message": "Realm results tests are failing due a realm list issue in core", "committedDate": "2020-12-03T10:43:16Z", "type": "commit"}, {"oid": "75dd06ffd825d93ba2256bb103dba75d64bfb88c", "url": "https://github.com/realm/realm-java/commit/75dd06ffd825d93ba2256bb103dba75d64bfb88c", "message": "Fix indentation", "committedDate": "2020-12-07T19:57:05Z", "type": "commit"}, {"oid": "bfbce0c07155a4a75ed6b7b61ff22c59c94ccf68", "url": "https://github.com/realm/realm-java/commit/bfbce0c07155a4a75ed6b7b61ff22c59c94ccf68", "message": "Ignore failing tests", "committedDate": "2020-12-07T21:43:09Z", "type": "commit"}]}