{"pr_number": 6953, "pr_title": "Add server API key and custom function credentials for user authentication", "pr_createdAt": "2020-06-17T16:23:47Z", "pr_url": "https://github.com/realm/realm-java/pull/6953", "timeline": [{"oid": "0423969216cde1b9bc28a6dac2dcedfa0cb875ef", "url": "https://github.com/realm/realm-java/commit/0423969216cde1b9bc28a6dac2dcedfa0cb875ef", "message": "Added support for server api keys and custom functions as valid credentials", "committedDate": "2020-06-17T13:25:36Z", "type": "commit"}, {"oid": "979ede201c7c3f280b07bb2fd8737f509fc0cba7", "url": "https://github.com/realm/realm-java/commit/979ede201c7c3f280b07bb2fd8737f509fc0cba7", "message": "Updated OS pointer", "committedDate": "2020-06-17T13:39:21Z", "type": "commit"}, {"oid": "1ebebd897c1147102201981ffb112c6ddfcc4979", "url": "https://github.com/realm/realm-java/commit/1ebebd897c1147102201981ffb112c6ddfcc4979", "message": "Fixed breaking changes after updating with v10", "committedDate": "2020-06-17T13:53:26Z", "type": "commit"}, {"oid": "1e289c7ed328275b75cce0beea81424bf494e09c", "url": "https://github.com/realm/realm-java/commit/1e289c7ed328275b75cce0beea81424bf494e09c", "message": "Updated OS pointer", "committedDate": "2020-06-17T16:07:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwMzQ1Ng==", "url": "https://github.com/realm/realm-java/pull/6953#discussion_r442003456", "bodyText": "Looks like something is missing here.", "author": "cmelchior", "createdAt": "2020-06-18T06:48:27Z", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/Credentials.java", "diffHunk": "@@ -99,23 +116,25 @@ public static Credentials apple(String idToken) {\n     }\n \n     /**\n-     * FIXME\n+     * Creates credentials representing a remote function previously added to MongoDB Realm. The\n+     * input parameters", "originalCommit": "1e289c7ed328275b75cce0beea81424bf494e09c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3ac946045c9a5e01c752b453dbb97d198433af18", "chunk": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/mongodb/Credentials.java b/realm/realm-library/src/objectServer/java/io/realm/mongodb/Credentials.java\nindex 2188f9a28..34debbe26 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/mongodb/Credentials.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/mongodb/Credentials.java\n\n@@ -116,13 +116,13 @@ public class Credentials {\n     }\n \n     /**\n-     * Creates credentials representing a remote function previously added to MongoDB Realm. The\n-     * input parameters\n+     * Creates credentials representing a remote function from MongoDB Realm using a\n+     * {@link Document} which will be parsed as an argument to the remote function, so the keys must\n+     * match the format and names the function expects.\n      * <p>\n      * This provider must be enabled on MongoDB Realm to work.\n      *\n-     * @param arguments {@link Document} containing the values passed to the remote function. The\n-     *                  keys must match the names given to the remote function parameters.\n+     * @param arguments document containing the function arguments.\n      * @return a set of credentials that can be used to log into MongoDB Realm using\n      * {@link App#loginAsync(Credentials, App.Callback)}.\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwNDY3MA==", "url": "https://github.com/realm/realm-java/pull/6953#discussion_r442004670", "bodyText": "This is a bit confusing to me. I would consider either removing it completely or rewording it. Maybe to something like The document will be parsed as an argument to the remote function, so the keys must match the format the function expects.", "author": "cmelchior", "createdAt": "2020-06-18T06:51:04Z", "path": "realm/realm-library/src/objectServer/java/io/realm/mongodb/Credentials.java", "diffHunk": "@@ -99,23 +116,25 @@ public static Credentials apple(String idToken) {\n     }\n \n     /**\n-     * FIXME\n+     * Creates credentials representing a remote function previously added to MongoDB Realm. The\n+     * input parameters\n      * <p>\n      * This provider must be enabled on MongoDB Realm to work.\n      *\n+     * @param arguments {@link Document} containing the values passed to the remote function. The\n+     *                  keys must match the names given to the remote function parameters.", "originalCommit": "1e289c7ed328275b75cce0beea81424bf494e09c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3ac946045c9a5e01c752b453dbb97d198433af18", "chunk": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/mongodb/Credentials.java b/realm/realm-library/src/objectServer/java/io/realm/mongodb/Credentials.java\nindex 2188f9a28..34debbe26 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/mongodb/Credentials.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/mongodb/Credentials.java\n\n@@ -116,13 +116,13 @@ public class Credentials {\n     }\n \n     /**\n-     * Creates credentials representing a remote function previously added to MongoDB Realm. The\n-     * input parameters\n+     * Creates credentials representing a remote function from MongoDB Realm using a\n+     * {@link Document} which will be parsed as an argument to the remote function, so the keys must\n+     * match the format and names the function expects.\n      * <p>\n      * This provider must be enabled on MongoDB Realm to work.\n      *\n-     * @param arguments {@link Document} containing the values passed to the remote function. The\n-     *                  keys must match the names given to the remote function parameters.\n+     * @param arguments document containing the function arguments.\n      * @return a set of credentials that can be used to log into MongoDB Realm using\n      * {@link App#loginAsync(Credentials, App.Callback)}.\n      */\n"}}, {"oid": "3ac946045c9a5e01c752b453dbb97d198433af18", "url": "https://github.com/realm/realm-java/commit/3ac946045c9a5e01c752b453dbb97d198433af18", "message": "Added identity provider to OsAppCredential to distinguish between user and server API keys, as the value is the same for both in the OS but are treated as separate providers. Cleaned up some comments. Removed unnecessary log in tests plus added comparison at enum level", "committedDate": "2020-06-18T08:46:04Z", "type": "commit"}, {"oid": "d314637f4c55db690b2f43926ba29db3ec4a65f4", "url": "https://github.com/realm/realm-java/commit/d314637f4c55db690b2f43926ba29db3ec4a65f4", "message": "Fixed typo in jwt creds test and changed comparison of users to their ids instead of the whole object", "committedDate": "2020-06-18T09:00:31Z", "type": "commit"}, {"oid": "f48170a3501be8cfc5bc7fb1940acdcc366836d4", "url": "https://github.com/realm/realm-java/commit/f48170a3501be8cfc5bc7fb1940acdcc366836d4", "message": "Updated OS pointer to latest v10", "committedDate": "2020-06-18T09:15:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI5NDM3Nw==", "url": "https://github.com/realm/realm-java/pull/6953#discussion_r442294377", "bodyText": "Good idea \ud83d\udc4d , but this checking should IMO be moved to AppCredentials. The Os<X> classes should generally just expose the Os interface and then we do the mapping on the \"upper\" layer, i.e. AppCredentials", "author": "cmelchior", "createdAt": "2020-06-18T15:00:44Z", "path": "realm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsAppCredentials.java", "diffHunk": "@@ -24,54 +30,70 @@\n \n     private static final int TYPE_ANONYMOUS = 1;\n     private static final int TYPE_API_KEY = 2;\n-    private static final int TYPE_APPLE = 3;\n-    private static final int TYPE_CUSTOM_FUNCTION = 4;\n-    private static final int TYPE_EMAIL_PASSWORD = 5;\n-    private static final int TYPE_FACEBOOK = 6;\n-    private static final int TYPE_GOOGLE = 7;\n-    private static final int TYPE_JWT = 8;\n+    private static final int TYPE_SERVER_API_KEY = 3;\n+    private static final int TYPE_APPLE = 4;\n+    private static final int TYPE_CUSTOM_FUNCTION = 5;\n+    private static final int TYPE_EMAIL_PASSWORD = 6;\n+    private static final int TYPE_FACEBOOK = 7;\n+    private static final int TYPE_GOOGLE = 8;\n+    private static final int TYPE_JWT = 9;\n     private static final long finalizerPtr = nativeGetFinalizerMethodPtr();\n \n     public static OsAppCredentials anonymous() {\n-        return new OsAppCredentials(nativeCreate(TYPE_ANONYMOUS));\n+        return new OsAppCredentials(nativeCreate(TYPE_ANONYMOUS), Credentials.IdentityProvider.ANONYMOUS);\n     }\n \n     public static OsAppCredentials apiKey(String key) {\n-        return new OsAppCredentials(nativeCreate(TYPE_API_KEY, key));\n+        return new OsAppCredentials(nativeCreate(TYPE_API_KEY, key), Credentials.IdentityProvider.API_KEY);\n+    }\n+\n+    public static OsAppCredentials serverApiKey(String key) {\n+        return new OsAppCredentials(nativeCreate(TYPE_SERVER_API_KEY, key), Credentials.IdentityProvider.SERVER_API_KEY);\n     }\n \n     public static OsAppCredentials apple(String idToken) {\n-        return new OsAppCredentials(nativeCreate(TYPE_APPLE, idToken));\n+        return new OsAppCredentials(nativeCreate(TYPE_APPLE, idToken), Credentials.IdentityProvider.APPLE);\n     }\n \n-    public static OsAppCredentials customFunction(String functionName, Object... args) {\n-        return new OsAppCredentials(nativeCreate(TYPE_CUSTOM_FUNCTION, functionName, args));\n+    public static OsAppCredentials customFunction(Document args) {\n+        String encodedArgs = JniBsonProtocol.encode(args, AppConfiguration.DEFAULT_BSON_CODEC_REGISTRY);\n+        return new OsAppCredentials(nativeCreate(TYPE_CUSTOM_FUNCTION, encodedArgs), Credentials.IdentityProvider.CUSTOM_FUNCTION);\n     }\n \n     public static OsAppCredentials emailPassword(String email, String password) {\n-        return new OsAppCredentials(nativeCreate(TYPE_EMAIL_PASSWORD, email, password));\n+        return new OsAppCredentials(nativeCreate(TYPE_EMAIL_PASSWORD, email, password), Credentials.IdentityProvider.EMAIL_PASSWORD);\n     }\n \n     public static OsAppCredentials facebook(String accessToken) {\n-        return new OsAppCredentials(nativeCreate(TYPE_FACEBOOK, accessToken));\n+        return new OsAppCredentials(nativeCreate(TYPE_FACEBOOK, accessToken), Credentials.IdentityProvider.FACEBOOK);\n     }\n \n     public static OsAppCredentials google(String whatToCallThisToken) {\n-        return new OsAppCredentials(nativeCreate(TYPE_GOOGLE, whatToCallThisToken));\n+        return new OsAppCredentials(nativeCreate(TYPE_GOOGLE, whatToCallThisToken), Credentials.IdentityProvider.GOOGLE);\n     }\n \n     public static OsAppCredentials jwt(String jwtToken) {\n-        return new OsAppCredentials(nativeCreate(TYPE_JWT, jwtToken));\n+        return new OsAppCredentials(nativeCreate(TYPE_JWT, jwtToken), Credentials.IdentityProvider.JWT);\n     }\n \n     private final long nativePtr;\n+    private final Credentials.IdentityProvider identityProvider;\n \n-    private OsAppCredentials(long nativePtr) {\n+    private OsAppCredentials(long nativePtr, Credentials.IdentityProvider identityProvider) {\n         this.nativePtr = nativePtr;\n+        this.identityProvider = identityProvider;\n     }\n \n-    public String getProvider() {\n-        return nativeGetProvider(nativePtr);\n+    public Credentials.IdentityProvider getProvider() {\n+        String nativeProvider = nativeGetProvider(nativePtr);\n+        String id = identityProvider.getId();\n+\n+        // Sanity check - ensure nothing changed in the OS\n+        if (nativeProvider.equals(id)) {\n+            return identityProvider;\n+        } else {\n+            throw new AssertionError(\"The provider from the Object Store differs from the one in Realm.\");", "originalCommit": "f48170a3501be8cfc5bc7fb1940acdcc366836d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d2ba5cc80ebf2d24d69b6c8735313c4d8ee58a8b", "chunk": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsAppCredentials.java b/realm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsAppCredentials.java\nindex ff268017b..e7e3ce391 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsAppCredentials.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsAppCredentials.java\n\n@@ -40,60 +40,50 @@ public class OsAppCredentials implements NativeObject {\n     private static final long finalizerPtr = nativeGetFinalizerMethodPtr();\n \n     public static OsAppCredentials anonymous() {\n-        return new OsAppCredentials(nativeCreate(TYPE_ANONYMOUS), Credentials.IdentityProvider.ANONYMOUS);\n+        return new OsAppCredentials(nativeCreate(TYPE_ANONYMOUS));\n     }\n \n     public static OsAppCredentials apiKey(String key) {\n-        return new OsAppCredentials(nativeCreate(TYPE_API_KEY, key), Credentials.IdentityProvider.API_KEY);\n+        return new OsAppCredentials(nativeCreate(TYPE_API_KEY, key));\n     }\n \n     public static OsAppCredentials serverApiKey(String key) {\n-        return new OsAppCredentials(nativeCreate(TYPE_SERVER_API_KEY, key), Credentials.IdentityProvider.SERVER_API_KEY);\n+        return new OsAppCredentials(nativeCreate(TYPE_SERVER_API_KEY, key));\n     }\n \n     public static OsAppCredentials apple(String idToken) {\n-        return new OsAppCredentials(nativeCreate(TYPE_APPLE, idToken), Credentials.IdentityProvider.APPLE);\n+        return new OsAppCredentials(nativeCreate(TYPE_APPLE, idToken));\n     }\n \n     public static OsAppCredentials customFunction(Document args) {\n         String encodedArgs = JniBsonProtocol.encode(args, AppConfiguration.DEFAULT_BSON_CODEC_REGISTRY);\n-        return new OsAppCredentials(nativeCreate(TYPE_CUSTOM_FUNCTION, encodedArgs), Credentials.IdentityProvider.CUSTOM_FUNCTION);\n+        return new OsAppCredentials(nativeCreate(TYPE_CUSTOM_FUNCTION, encodedArgs));\n     }\n \n     public static OsAppCredentials emailPassword(String email, String password) {\n-        return new OsAppCredentials(nativeCreate(TYPE_EMAIL_PASSWORD, email, password), Credentials.IdentityProvider.EMAIL_PASSWORD);\n+        return new OsAppCredentials(nativeCreate(TYPE_EMAIL_PASSWORD, email, password));\n     }\n \n     public static OsAppCredentials facebook(String accessToken) {\n-        return new OsAppCredentials(nativeCreate(TYPE_FACEBOOK, accessToken), Credentials.IdentityProvider.FACEBOOK);\n+        return new OsAppCredentials(nativeCreate(TYPE_FACEBOOK, accessToken));\n     }\n \n     public static OsAppCredentials google(String whatToCallThisToken) {\n-        return new OsAppCredentials(nativeCreate(TYPE_GOOGLE, whatToCallThisToken), Credentials.IdentityProvider.GOOGLE);\n+        return new OsAppCredentials(nativeCreate(TYPE_GOOGLE, whatToCallThisToken));\n     }\n \n     public static OsAppCredentials jwt(String jwtToken) {\n-        return new OsAppCredentials(nativeCreate(TYPE_JWT, jwtToken), Credentials.IdentityProvider.JWT);\n+        return new OsAppCredentials(nativeCreate(TYPE_JWT, jwtToken));\n     }\n \n     private final long nativePtr;\n-    private final Credentials.IdentityProvider identityProvider;\n \n-    private OsAppCredentials(long nativePtr, Credentials.IdentityProvider identityProvider) {\n+    private OsAppCredentials(long nativePtr) {\n         this.nativePtr = nativePtr;\n-        this.identityProvider = identityProvider;\n     }\n \n-    public Credentials.IdentityProvider getProvider() {\n-        String nativeProvider = nativeGetProvider(nativePtr);\n-        String id = identityProvider.getId();\n-\n-        // Sanity check - ensure nothing changed in the OS\n-        if (nativeProvider.equals(id)) {\n-            return identityProvider;\n-        } else {\n-            throw new AssertionError(\"The provider from the Object Store differs from the one in Realm.\");\n-        }\n+    public String getProvider() {\n+        return nativeGetProvider(nativePtr);\n     }\n \n     public String asJson() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI5NDQyMQ==", "url": "https://github.com/realm/realm-java/pull/6953#discussion_r442294421", "bodyText": "I think it would be cleaner if Credentials.IdentityProvider.ANONYMOUS was defined in the factory constructor of AppCredentials. OsAppCredentials is there to map to the underlying type, but us making a shortcut is not the responsibility of the Os class but our own AppCredentials. The same everywhere else.", "author": "cmelchior", "createdAt": "2020-06-18T15:00:48Z", "path": "realm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsAppCredentials.java", "diffHunk": "@@ -24,54 +30,70 @@\n \n     private static final int TYPE_ANONYMOUS = 1;\n     private static final int TYPE_API_KEY = 2;\n-    private static final int TYPE_APPLE = 3;\n-    private static final int TYPE_CUSTOM_FUNCTION = 4;\n-    private static final int TYPE_EMAIL_PASSWORD = 5;\n-    private static final int TYPE_FACEBOOK = 6;\n-    private static final int TYPE_GOOGLE = 7;\n-    private static final int TYPE_JWT = 8;\n+    private static final int TYPE_SERVER_API_KEY = 3;\n+    private static final int TYPE_APPLE = 4;\n+    private static final int TYPE_CUSTOM_FUNCTION = 5;\n+    private static final int TYPE_EMAIL_PASSWORD = 6;\n+    private static final int TYPE_FACEBOOK = 7;\n+    private static final int TYPE_GOOGLE = 8;\n+    private static final int TYPE_JWT = 9;\n     private static final long finalizerPtr = nativeGetFinalizerMethodPtr();\n \n     public static OsAppCredentials anonymous() {\n-        return new OsAppCredentials(nativeCreate(TYPE_ANONYMOUS));\n+        return new OsAppCredentials(nativeCreate(TYPE_ANONYMOUS), Credentials.IdentityProvider.ANONYMOUS);", "originalCommit": "f48170a3501be8cfc5bc7fb1940acdcc366836d4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d2ba5cc80ebf2d24d69b6c8735313c4d8ee58a8b", "chunk": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsAppCredentials.java b/realm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsAppCredentials.java\nindex ff268017b..e7e3ce391 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsAppCredentials.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/internal/objectstore/OsAppCredentials.java\n\n@@ -40,60 +40,50 @@ public class OsAppCredentials implements NativeObject {\n     private static final long finalizerPtr = nativeGetFinalizerMethodPtr();\n \n     public static OsAppCredentials anonymous() {\n-        return new OsAppCredentials(nativeCreate(TYPE_ANONYMOUS), Credentials.IdentityProvider.ANONYMOUS);\n+        return new OsAppCredentials(nativeCreate(TYPE_ANONYMOUS));\n     }\n \n     public static OsAppCredentials apiKey(String key) {\n-        return new OsAppCredentials(nativeCreate(TYPE_API_KEY, key), Credentials.IdentityProvider.API_KEY);\n+        return new OsAppCredentials(nativeCreate(TYPE_API_KEY, key));\n     }\n \n     public static OsAppCredentials serverApiKey(String key) {\n-        return new OsAppCredentials(nativeCreate(TYPE_SERVER_API_KEY, key), Credentials.IdentityProvider.SERVER_API_KEY);\n+        return new OsAppCredentials(nativeCreate(TYPE_SERVER_API_KEY, key));\n     }\n \n     public static OsAppCredentials apple(String idToken) {\n-        return new OsAppCredentials(nativeCreate(TYPE_APPLE, idToken), Credentials.IdentityProvider.APPLE);\n+        return new OsAppCredentials(nativeCreate(TYPE_APPLE, idToken));\n     }\n \n     public static OsAppCredentials customFunction(Document args) {\n         String encodedArgs = JniBsonProtocol.encode(args, AppConfiguration.DEFAULT_BSON_CODEC_REGISTRY);\n-        return new OsAppCredentials(nativeCreate(TYPE_CUSTOM_FUNCTION, encodedArgs), Credentials.IdentityProvider.CUSTOM_FUNCTION);\n+        return new OsAppCredentials(nativeCreate(TYPE_CUSTOM_FUNCTION, encodedArgs));\n     }\n \n     public static OsAppCredentials emailPassword(String email, String password) {\n-        return new OsAppCredentials(nativeCreate(TYPE_EMAIL_PASSWORD, email, password), Credentials.IdentityProvider.EMAIL_PASSWORD);\n+        return new OsAppCredentials(nativeCreate(TYPE_EMAIL_PASSWORD, email, password));\n     }\n \n     public static OsAppCredentials facebook(String accessToken) {\n-        return new OsAppCredentials(nativeCreate(TYPE_FACEBOOK, accessToken), Credentials.IdentityProvider.FACEBOOK);\n+        return new OsAppCredentials(nativeCreate(TYPE_FACEBOOK, accessToken));\n     }\n \n     public static OsAppCredentials google(String whatToCallThisToken) {\n-        return new OsAppCredentials(nativeCreate(TYPE_GOOGLE, whatToCallThisToken), Credentials.IdentityProvider.GOOGLE);\n+        return new OsAppCredentials(nativeCreate(TYPE_GOOGLE, whatToCallThisToken));\n     }\n \n     public static OsAppCredentials jwt(String jwtToken) {\n-        return new OsAppCredentials(nativeCreate(TYPE_JWT, jwtToken), Credentials.IdentityProvider.JWT);\n+        return new OsAppCredentials(nativeCreate(TYPE_JWT, jwtToken));\n     }\n \n     private final long nativePtr;\n-    private final Credentials.IdentityProvider identityProvider;\n \n-    private OsAppCredentials(long nativePtr, Credentials.IdentityProvider identityProvider) {\n+    private OsAppCredentials(long nativePtr) {\n         this.nativePtr = nativePtr;\n-        this.identityProvider = identityProvider;\n     }\n \n-    public Credentials.IdentityProvider getProvider() {\n-        String nativeProvider = nativeGetProvider(nativePtr);\n-        String id = identityProvider.getId();\n-\n-        // Sanity check - ensure nothing changed in the OS\n-        if (nativeProvider.equals(id)) {\n-            return identityProvider;\n-        } else {\n-            throw new AssertionError(\"The provider from the Object Store differs from the one in Realm.\");\n-        }\n+    public String getProvider() {\n+        return nativeGetProvider(nativePtr);\n     }\n \n     public String asJson() {\n"}}, {"oid": "d2ba5cc80ebf2d24d69b6c8735313c4d8ee58a8b", "url": "https://github.com/realm/realm-java/commit/d2ba5cc80ebf2d24d69b6c8735313c4d8ee58a8b", "message": "Move identity provider from OS to API level", "committedDate": "2020-06-19T10:15:45Z", "type": "commit"}, {"oid": "269dd00e01d892ccbf53360fa9b78fbac4dfb31e", "url": "https://github.com/realm/realm-java/commit/269dd00e01d892ccbf53360fa9b78fbac4dfb31e", "message": "Merge branch 'v10' into el/credentials-api-key", "committedDate": "2020-06-19T10:47:01Z", "type": "commit"}]}