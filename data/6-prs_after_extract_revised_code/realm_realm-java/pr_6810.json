{"pr_number": 6810, "pr_title": "Add support for Realm Functions", "pr_createdAt": "2020-04-22T15:00:23Z", "pr_url": "https://github.com/realm/realm-java/pull/6810", "timeline": [{"oid": "6ff4df5e231e97908c3ae976bd9f44607d1190e7", "url": "https://github.com/realm/realm-java/commit/6ff4df5e231e97908c3ae976bd9f44607d1190e7", "message": "Initial Stitch Functions API\n\nFirst draft on an API for Functions and BSON type conversions and serialization.", "committedDate": "2020-04-22T14:43:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM2MTQ1NQ==", "url": "https://github.com/realm/realm-java/pull/6810#discussion_r413361455", "bodyText": "Shouldn't these just be private?", "author": "cmelchior", "createdAt": "2020-04-22T21:58:15Z", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmFunctions.java", "diffHunk": "@@ -15,5 +15,107 @@\n  */\n package io.realm;\n \n-class RealmFunctions {\n+import org.bson.BsonDocument;\n+import org.bson.BsonElement;\n+import org.bson.BsonValue;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.realm.internal.Util;\n+import io.realm.internal.util.BsonConverter;\n+\n+/**\n+ * A <i>Realm functions<i> manager to call MongoDB functions.\n+ */\n+// TODO Timeout is currently handled uniformly through OkHttpNetworkTransport configured through RealmAppConfig\n+public class RealmFunctions {\n+\n+    /**\n+     * Call a Stitch function synchronously.\n+     *\n+     * @param name Name of the Stitch function to call.\n+     * @param args Arguments to the Stitch function.\n+     * @return Result of the Stitch function.\n+     *\n+     * // FIXME Document possible exceptions\n+     * @throws\n+     */\n+    public BsonValue callFunction(String name, BsonValue... args) {\n+        List<BsonElement> elements = new ArrayList<>(args.length);\n+        int i = 0;\n+        for (BsonValue arg : args) {\n+            // FIXME Bson argument naming\n+            elements.add(new BsonElement(\"arg\" + i, arg));\n+            ++i;\n+        }\n+        BsonDocument document = new BsonDocument(elements);\n+\n+        String resultString = invoke(name, document.toJson());\n+\n+        BsonDocument resultDocument = BsonDocument.parse(resultString);\n+        // FIXME Guard if no values, etc. when conventions are clarified\n+        BsonValue result = resultDocument.values().iterator().next();\n+        return result;\n+    }\n+\n+    <T extends BsonValue> T callFunctionTyped(String name, Class<T> clz, BsonValue... args) {", "originalCommit": "6ff4df5e231e97908c3ae976bd9f44607d1190e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUzNDMzMQ==", "url": "https://github.com/realm/realm-java/pull/6810#discussion_r414534331", "bodyText": "Reworked public interface.", "author": "rorbech", "createdAt": "2020-04-24T12:23:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM2MTQ1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "e5c8fc010587b7eb6d92ab224416cedc749fbec6", "chunk": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/RealmFunctions.java b/realm/realm-library/src/objectServer/java/io/realm/RealmFunctions.java\nindex d84685cec..d67bf6d29 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/RealmFunctions.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/RealmFunctions.java\n\n@@ -15,16 +15,17 @@\n  */\n package io.realm;\n \n+import org.bson.BsonArray;\n import org.bson.BsonDocument;\n-import org.bson.BsonElement;\n import org.bson.BsonValue;\n \n-import java.util.ArrayList;\n import java.util.List;\n \n import io.realm.internal.Util;\n import io.realm.internal.util.BsonConverter;\n \n+// CR: Async execution model. Google Play Task??\n+\n /**\n  * A <i>Realm functions<i> manager to call MongoDB functions.\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM2MTk3OQ==", "url": "https://github.com/realm/realm-java/pull/6810#discussion_r413361979", "bodyText": "Is the intent to have BsonValue... as input arguments? Did you consider Object...?", "author": "cmelchior", "createdAt": "2020-04-22T21:59:19Z", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmFunctions.java", "diffHunk": "@@ -15,5 +15,107 @@\n  */\n package io.realm;\n \n-class RealmFunctions {\n+import org.bson.BsonDocument;\n+import org.bson.BsonElement;\n+import org.bson.BsonValue;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.realm.internal.Util;\n+import io.realm.internal.util.BsonConverter;\n+\n+/**\n+ * A <i>Realm functions<i> manager to call MongoDB functions.\n+ */\n+// TODO Timeout is currently handled uniformly through OkHttpNetworkTransport configured through RealmAppConfig\n+public class RealmFunctions {\n+\n+    /**\n+     * Call a Stitch function synchronously.\n+     *\n+     * @param name Name of the Stitch function to call.\n+     * @param args Arguments to the Stitch function.\n+     * @return Result of the Stitch function.\n+     *\n+     * // FIXME Document possible exceptions\n+     * @throws\n+     */\n+    public BsonValue callFunction(String name, BsonValue... args) {", "originalCommit": "6ff4df5e231e97908c3ae976bd9f44607d1190e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM2MjcxNg==", "url": "https://github.com/realm/realm-java/pull/6810#discussion_r413362716", "bodyText": "It should also throw ObjectServerError since it will hit the server", "author": "cmelchior", "createdAt": "2020-04-22T22:00:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM2MTk3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUzNjY1Mg==", "url": "https://github.com/realm/realm-java/pull/6810#discussion_r414536652", "bodyText": "Intention was to also let people have an API without too much automatism, but have now updated interface to accept Objects doing automatic conversion for primitive types. Added 'ObjectServcerError' \ud83d\udc4d", "author": "rorbech", "createdAt": "2020-04-24T12:27:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM2MTk3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "e5c8fc010587b7eb6d92ab224416cedc749fbec6", "chunk": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/RealmFunctions.java b/realm/realm-library/src/objectServer/java/io/realm/RealmFunctions.java\nindex d84685cec..d67bf6d29 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/RealmFunctions.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/RealmFunctions.java\n\n@@ -15,16 +15,17 @@\n  */\n package io.realm;\n \n+import org.bson.BsonArray;\n import org.bson.BsonDocument;\n-import org.bson.BsonElement;\n import org.bson.BsonValue;\n \n-import java.util.ArrayList;\n import java.util.List;\n \n import io.realm.internal.Util;\n import io.realm.internal.util.BsonConverter;\n \n+// CR: Async execution model. Google Play Task??\n+\n /**\n  * A <i>Realm functions<i> manager to call MongoDB functions.\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM2NDgyMw==", "url": "https://github.com/realm/realm-java/pull/6810#discussion_r413364823", "bodyText": "Most likely we need to add the user as an argument to functions, but can be added when needed", "author": "cmelchior", "createdAt": "2020-04-22T22:05:30Z", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmUser.java", "diffHunk": "@@ -412,10 +413,16 @@ public synchronized ApiKeyAuthProvider getApiKeyAuthProvider() {\n     }\n \n     /**\n-     * FIXME Add support for functions. Name of Class and method still TBD.\n+     * Returns a <i>Realm Functions</i> manager need for invoking MongoDB Stitch Functions.\n+     *\n+     * FIXME Name of Class and method still TBD.\n      */\n-    public RealmFunctions getFunctions() {\n-        return null;\n+    public synchronized RealmFunctions getFunctions() {\n+        checkLoggedIn();\n+        if (functions == null) {\n+            functions = new RealmFunctions();", "originalCommit": "6ff4df5e231e97908c3ae976bd9f44607d1190e7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ef918722303890534e15c4d35112da7a1ae0580b", "chunk": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/RealmUser.java b/realm/realm-library/src/objectServer/java/io/realm/RealmUser.java\nindex a63946acd..d7d457182 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/RealmUser.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/RealmUser.java\n\n@@ -404,10 +414,10 @@ public class RealmUser {\n      * @return wrapper for managing API keys controlled by the current user.\n      * @throws IllegalStateException if no user is currently logged in.\n      */\n-    public synchronized ApiKeyAuthProvider getApiKeyAuthProvider() {\n+    public synchronized ApiKeyAuth getApiKeyAuth() {\n         checkLoggedIn();\n         if (apiKeyAuthProvider == null) {\n-            apiKeyAuthProvider = new ApiKeyAuthProvider(this);\n+            apiKeyAuthProvider = new ApiKeyAuth(this);\n         }\n         return apiKeyAuthProvider;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM2NTQ1NA==", "url": "https://github.com/realm/realm-java/pull/6810#discussion_r413365454", "bodyText": "Normally we use the whole name to avoid confusion if it is a class name that exists in multiple packages.", "author": "cmelchior", "createdAt": "2020-04-22T22:06:43Z", "path": "realm/realm-library/src/objectServer/java/io/realm/internal/util/BsonConverter.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.realm.internal.util;\n+\n+import org.bson.BsonInt32;\n+import org.bson.BsonInt64;\n+import org.bson.BsonString;\n+import org.bson.BsonType;\n+import org.bson.BsonValue;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * A <i>BSON converter</i> to handle conversion between native Java types and BSON values.\n+ */\n+public class BsonConverter {\n+\n+    /**\n+     * Converts value object to BSON value based on type.\n+     *\n+     * @param value The object to convert.\n+     * @return BSON value representation of the origin value object.\n+     *\n+     * @throws UnsupportedOperationException If the object could not be mapped to a BSON type.\n+     */\n+    // FIXME Review supported types\n+    public static BsonValue to(Object value) {\n+        // Just leave BsonValues as is\n+        if (value instanceof BsonValue) {\n+            return (BsonValue) value;\n+        } else if (value instanceof Integer) {\n+            return new BsonInt32((Integer) value);\n+        } else if (value instanceof Long) {\n+            return new BsonInt64((Long) value);\n+        } else if (value instanceof String){\n+            return new BsonString((String) value);\n+        }\n+        throw new UnsupportedOperationException(\"Conversion to BSON value not supported for \" + value.getClass().getSimpleName() );", "originalCommit": "6ff4df5e231e97908c3ae976bd9f44607d1190e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUzNjc2Mg==", "url": "https://github.com/realm/realm-java/pull/6810#discussion_r414536762", "bodyText": "\ud83d\udc4d", "author": "rorbech", "createdAt": "2020-04-24T12:27:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM2NTQ1NA=="}], "type": "inlineReview", "revised_code": {"commit": "e5c8fc010587b7eb6d92ab224416cedc749fbec6", "chunk": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/internal/util/BsonConverter.java b/realm/realm-library/src/objectServer/java/io/realm/internal/util/BsonConverter.java\nindex 9e2121773..4e4fa92c5 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/internal/util/BsonConverter.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/internal/util/BsonConverter.java\n\n@@ -16,11 +16,13 @@\n \n package io.realm.internal.util;\n \n+import org.bson.BsonBoolean;\n import org.bson.BsonInt32;\n import org.bson.BsonInt64;\n import org.bson.BsonString;\n import org.bson.BsonType;\n import org.bson.BsonValue;\n+import org.bson.conversions.Bson;\n \n import java.util.ArrayList;\n import java.util.List;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM3MjAwMA==", "url": "https://github.com/realm/realm-java/pull/6810#discussion_r413372000", "bodyText": "Is this just a placeholder or the actual API contract?", "author": "cmelchior", "createdAt": "2020-04-22T22:20:22Z", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmFunctions.java", "diffHunk": "@@ -15,5 +15,107 @@\n  */\n package io.realm;\n \n-class RealmFunctions {\n+import org.bson.BsonDocument;\n+import org.bson.BsonElement;\n+import org.bson.BsonValue;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.realm.internal.Util;\n+import io.realm.internal.util.BsonConverter;\n+\n+/**\n+ * A <i>Realm functions<i> manager to call MongoDB functions.\n+ */\n+// TODO Timeout is currently handled uniformly through OkHttpNetworkTransport configured through RealmAppConfig\n+public class RealmFunctions {\n+\n+    /**\n+     * Call a Stitch function synchronously.\n+     *\n+     * @param name Name of the Stitch function to call.\n+     * @param args Arguments to the Stitch function.\n+     * @return Result of the Stitch function.\n+     *\n+     * // FIXME Document possible exceptions\n+     * @throws\n+     */\n+    public BsonValue callFunction(String name, BsonValue... args) {\n+        List<BsonElement> elements = new ArrayList<>(args.length);\n+        int i = 0;\n+        for (BsonValue arg : args) {\n+            // FIXME Bson argument naming\n+            elements.add(new BsonElement(\"arg\" + i, arg));", "originalCommit": "6ff4df5e231e97908c3ae976bd9f44607d1190e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUzOTE3Mg==", "url": "https://github.com/realm/realm-java/pull/6810#discussion_r414539172", "bodyText": "Contract seems to be passing all arguments as one BSONArray with key arguments.", "author": "rorbech", "createdAt": "2020-04-24T12:31:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM3MjAwMA=="}], "type": "inlineReview", "revised_code": {"commit": "e5c8fc010587b7eb6d92ab224416cedc749fbec6", "chunk": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/RealmFunctions.java b/realm/realm-library/src/objectServer/java/io/realm/RealmFunctions.java\nindex d84685cec..d67bf6d29 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/RealmFunctions.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/RealmFunctions.java\n\n@@ -15,16 +15,17 @@\n  */\n package io.realm;\n \n+import org.bson.BsonArray;\n import org.bson.BsonDocument;\n-import org.bson.BsonElement;\n import org.bson.BsonValue;\n \n-import java.util.ArrayList;\n import java.util.List;\n \n import io.realm.internal.Util;\n import io.realm.internal.util.BsonConverter;\n \n+// CR: Async execution model. Google Play Task??\n+\n /**\n  * A <i>Realm functions<i> manager to call MongoDB functions.\n  */\n"}}, {"oid": "d77bea209c999a2868d3b531457e4c19017f44d0", "url": "https://github.com/realm/realm-java/commit/d77bea209c999a2868d3b531457e4c19017f44d0", "message": "Collect JVM test results in CI", "committedDate": "2020-04-24T11:16:46Z", "type": "commit"}, {"oid": "e5c8fc010587b7eb6d92ab224416cedc749fbec6", "url": "https://github.com/realm/realm-java/commit/e5c8fc010587b7eb6d92ab224416cedc749fbec6", "message": "Update Functions API and BSON conversion accordingly", "committedDate": "2020-04-24T12:18:49Z", "type": "commit"}, {"oid": "fe2c357179fd57a242263b86d9bcb7fe22bfe5d5", "url": "https://github.com/realm/realm-java/commit/fe2c357179fd57a242263b86d9bcb7fe22bfe5d5", "message": "Fix access modifier for public api", "committedDate": "2020-04-24T12:35:40Z", "type": "commit"}, {"oid": "427c243aa757bbfea03b887e06d08415bb702e93", "url": "https://github.com/realm/realm-java/commit/427c243aa757bbfea03b887e06d08415bb702e93", "message": "Fix syntax errors in RealmFunctionTests", "committedDate": "2020-04-27T12:31:28Z", "type": "commit"}, {"oid": "729b5084283a08e194c0658ac9a95e3f9389fa2c", "url": "https://github.com/realm/realm-java/commit/729b5084283a08e194c0658ac9a95e3f9389fa2c", "message": "Draft JNI binding for Realm Functions", "committedDate": "2020-04-27T19:30:11Z", "type": "commit"}, {"oid": "ef918722303890534e15c4d35112da7a1ae0580b", "url": "https://github.com/realm/realm-java/commit/ef918722303890534e15c4d35112da7a1ae0580b", "message": "Merge branch 'v10' into cr/functions-jni", "committedDate": "2020-04-27T19:35:40Z", "type": "commit"}, {"oid": "0c2008b30242cf661962284c4bc11c33d0e647c7", "url": "https://github.com/realm/realm-java/commit/0c2008b30242cf661962284c4bc11c33d0e647c7", "message": "Merge branch 'v10' into cr/functions", "committedDate": "2020-05-01T16:19:00Z", "type": "commit"}, {"oid": "e63c0e5ebbac0ae97234c7fa295ab07a4aef8cbf", "url": "https://github.com/realm/realm-java/commit/e63c0e5ebbac0ae97234c7fa295ab07a4aef8cbf", "message": "Update OS to latest lm/remote-mongo-bson", "committedDate": "2020-05-01T21:56:33Z", "type": "commit"}, {"oid": "9528f524a672d686035f1f5305166525f41e357a", "url": "https://github.com/realm/realm-java/commit/9528f524a672d686035f1f5305166525f41e357a", "message": "Actual Stitch Function round trip", "committedDate": "2020-05-01T22:01:24Z", "type": "commit"}, {"oid": "8deaaca01601f2687faf7505d9facb8ab2934edb", "url": "https://github.com/realm/realm-java/commit/8deaaca01601f2687faf7505d9facb8ab2934edb", "message": "Merge branch 'v10' into cr/functions", "committedDate": "2020-05-05T13:28:07Z", "type": "commit"}, {"oid": "795a9fc64e207913f15d95b40479ce0e793b05b3", "url": "https://github.com/realm/realm-java/commit/795a9fc64e207913f15d95b40479ce0e793b05b3", "message": "Add ability to use CodecRegistry for passing values as BSON to JNI", "committedDate": "2020-05-05T21:12:09Z", "type": "commit"}, {"oid": "4ea5fad0881c31175cffe8b3f6bce804a1d759bf", "url": "https://github.com/realm/realm-java/commit/4ea5fad0881c31175cffe8b3f6bce804a1d759bf", "message": "Remove unnecessary import", "committedDate": "2020-05-06T06:38:31Z", "type": "commit"}, {"oid": "11a7d7d77b3102996483f5db7576209677ee91c0", "url": "https://github.com/realm/realm-java/commit/11a7d7d77b3102996483f5db7576209677ee91c0", "message": "Add default codec registry to RealmAppConfiguration", "committedDate": "2020-05-06T11:29:14Z", "type": "commit"}, {"oid": "36814522fcf6a6a314dfcb05ab285c1bd6d09ce1", "url": "https://github.com/realm/realm-java/commit/36814522fcf6a6a314dfcb05ab285c1bd6d09ce1", "message": "Expose encoder/decoder variant for JniBsonProtocol methods", "committedDate": "2020-05-06T11:32:55Z", "type": "commit"}, {"oid": "23dd90f8f023341f7cfcbee93f77b916f621a2e9", "url": "https://github.com/realm/realm-java/commit/23dd90f8f023341f7cfcbee93f77b916f621a2e9", "message": "Merge branch 'v10' into cr/functions", "committedDate": "2020-05-06T13:09:22Z", "type": "commit"}, {"oid": "6e275484ba89ea6d21efce1fb0136d4e9cf8a4b5", "url": "https://github.com/realm/realm-java/commit/6e275484ba89ea6d21efce1fb0136d4e9cf8a4b5", "message": "Rename RealmFunctionsTest->RealmFunctionsTests", "committedDate": "2020-05-06T13:26:27Z", "type": "commit"}, {"oid": "357a4ebe564588a2a84d5eba88dc6c93f3837bb7", "url": "https://github.com/realm/realm-java/commit/357a4ebe564588a2a84d5eba88dc6c93f3837bb7", "message": "Bump OS to get BSON parsing fix for boolean in an array", "committedDate": "2020-05-06T13:58:37Z", "type": "commit"}, {"oid": "9f24cccc23f5803311130d4b75fba03d74d5d9a5", "url": "https://github.com/realm/realm-java/commit/9f24cccc23f5803311130d4b75fba03d74d5d9a5", "message": "Merge branch 'cr/bson-jni-interaction' into cr/functions", "committedDate": "2020-05-06T19:06:11Z", "type": "commit"}, {"oid": "beaece4152fbe640931d747c76d883afa9600d47", "url": "https://github.com/realm/realm-java/commit/beaece4152fbe640931d747c76d883afa9600d47", "message": "Code review updates", "committedDate": "2020-05-06T19:49:11Z", "type": "commit"}, {"oid": "ae8321494eb2da51ef64be6063ca8a1397347c8b", "url": "https://github.com/realm/realm-java/commit/ae8321494eb2da51ef64be6063ca8a1397347c8b", "message": "Code review updates", "committedDate": "2020-05-06T20:00:20Z", "type": "commit"}, {"oid": "0812ed1e892a1b4d49672b9d3f14f878ee93dd50", "url": "https://github.com/realm/realm-java/commit/0812ed1e892a1b4d49672b9d3f14f878ee93dd50", "message": "Merge branch 'cr/bson-jni-interaction' into cr/functions", "committedDate": "2020-05-07T06:49:56Z", "type": "commit"}, {"oid": "c741703255ee1d8810de0881bab65fb54381027e", "url": "https://github.com/realm/realm-java/commit/c741703255ee1d8810de0881bab65fb54381027e", "message": "Start listing required tests", "committedDate": "2020-05-07T06:50:13Z", "type": "commit"}, {"oid": "bb503c7343e2c945c12d81645ffef97bb7180a78", "url": "https://github.com/realm/realm-java/commit/bb503c7343e2c945c12d81645ffef97bb7180a78", "message": "Merge branch 'v10' into cr/functions", "committedDate": "2020-05-11T07:51:29Z", "type": "commit"}, {"oid": "5b065a8411b34802dc30defacf26bf27bcd65e29", "url": "https://github.com/realm/realm-java/commit/5b065a8411b34802dc30defacf26bf27bcd65e29", "message": "Add map/document codec providers to default codec registry", "committedDate": "2020-05-11T15:50:46Z", "type": "commit"}, {"oid": "a9d6bf841950a2b2803a03686d01906e8a2d2a09", "url": "https://github.com/realm/realm-java/commit/a9d6bf841950a2b2803a03686d01906e8a2d2a09", "message": "Documentation and tests", "committedDate": "2020-05-11T16:58:22Z", "type": "commit"}, {"oid": "bca9f6b265fe550a57e5afca9982c6cc9ee5c464", "url": "https://github.com/realm/realm-java/commit/bca9f6b265fe550a57e5afca9982c6cc9ee5c464", "message": "Update OS to latest v10 and included fixed tests", "committedDate": "2020-05-12T08:17:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU0Nzg3OQ==", "url": "https://github.com/realm/realm-java/pull/6810#discussion_r423547879", "bodyText": "We need to manually add <p> tags for empty lines to make the generated Javadoc render correctly. This is also missing in a bunch of other places in this PR.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *\n          \n          \n            \n             * <p>", "author": "cmelchior", "createdAt": "2020-05-12T08:17:21Z", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmFunctions.java", "diffHunk": "@@ -17,30 +17,173 @@\n \n import org.bson.codecs.configuration.CodecRegistry;\n \n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import io.realm.internal.Util;\n import io.realm.internal.jni.JniBsonProtocol;\n+import io.realm.internal.jni.OsJNIResultCallback;\n+import io.realm.internal.objectstore.OsJavaNetworkTransport;\n+\n+/**\n+ * A <i>Realm functions<i> manager to call MongoDB Realm functions.\n+ *", "originalCommit": "a9d6bf841950a2b2803a03686d01906e8a2d2a09", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6305eb6b586ffb2630bfdaa3d3642921cc84ca17", "chunk": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/RealmFunctions.java b/realm/realm-library/src/objectServer/java/io/realm/RealmFunctions.java\nindex 026214170..f52867833 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/RealmFunctions.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/RealmFunctions.java\n\n@@ -27,24 +27,26 @@ import io.realm.internal.objectstore.OsJavaNetworkTransport;\n \n /**\n  * A <i>Realm functions<i> manager to call MongoDB Realm functions.\n- *\n+ * <p>\n  * Arguments and results are encoded/decoded with the <i>Realm functions'</i> codec registry either\n  * inherited from the {@link RealmAppConfiguration#getDefaultCodecRegistry()} or set explicitly\n  * when creating the <i>Realm functions</i>-instance through {@link RealmUser#getFunctions(CodecRegistry)}\n  * or through the individual calls to {@link #callFunction(String, List, Class, CodecRegistry)}.\n+ *\n+ * @see RealmUser#getFunctions()\n+ * @see RealmUser#getFunctions(CodecRegistry)\n+ * @see RealmAppConfiguration\n+ * @see CodecRegistry\n  */\n // TODO Timeout is currently handled uniformly through OkHttpNetworkTransport configured through RealmAppConfig\n-// FIXME Application wide invocation; like StitchAppClient appClient = Stitch.getDefaultAppClient();\n // FIXME Encoder/Decoder specific variants\n // FIXME Service?\n public class RealmFunctions {\n \n-    // FIXME Review memory allocation\n     private final RealmUser user;\n-    private CodecRegistry defaultCodecRegistry;\n \n+    private CodecRegistry defaultCodecRegistry;\n \n-    // FIXME Doc\n     RealmFunctions(RealmUser user, CodecRegistry codecRegistry) {\n         this.user = user;\n         this.defaultCodecRegistry = codecRegistry;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU0ODUwOA==", "url": "https://github.com/realm/realm-java/pull/6810#discussion_r423548508", "bodyText": "Not 100% sure what these FIXME's mean or if they are still relevant?", "author": "cmelchior", "createdAt": "2020-05-12T08:18:25Z", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmFunctions.java", "diffHunk": "@@ -17,30 +17,173 @@\n \n import org.bson.codecs.configuration.CodecRegistry;\n \n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import io.realm.internal.Util;\n import io.realm.internal.jni.JniBsonProtocol;\n+import io.realm.internal.jni.OsJNIResultCallback;\n+import io.realm.internal.objectstore.OsJavaNetworkTransport;\n+\n+/**\n+ * A <i>Realm functions<i> manager to call MongoDB Realm functions.\n+ *\n+ * Arguments and results are encoded/decoded with the <i>Realm functions'</i> codec registry either\n+ * inherited from the {@link RealmAppConfiguration#getDefaultCodecRegistry()} or set explicitly\n+ * when creating the <i>Realm functions</i>-instance through {@link RealmUser#getFunctions(CodecRegistry)}\n+ * or through the individual calls to {@link #callFunction(String, List, Class, CodecRegistry)}.\n+ */\n+// TODO Timeout is currently handled uniformly through OkHttpNetworkTransport configured through RealmAppConfig\n+// FIXME Application wide invocation; like StitchAppClient appClient = Stitch.getDefaultAppClient();", "originalCommit": "a9d6bf841950a2b2803a03686d01906e8a2d2a09", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIxMjYwMQ==", "url": "https://github.com/realm/realm-java/pull/6810#discussion_r424212601", "bodyText": "Initially I though it was possible to execute a function without a user. Apparently it was due to implicitly resolving a current user. Since we want to avoid this implicit resolving of users this is no longer relevant.", "author": "rorbech", "createdAt": "2020-05-13T06:58:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU0ODUwOA=="}], "type": "inlineReview", "revised_code": {"commit": "6305eb6b586ffb2630bfdaa3d3642921cc84ca17", "chunk": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/RealmFunctions.java b/realm/realm-library/src/objectServer/java/io/realm/RealmFunctions.java\nindex 026214170..f52867833 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/RealmFunctions.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/RealmFunctions.java\n\n@@ -27,24 +27,26 @@ import io.realm.internal.objectstore.OsJavaNetworkTransport;\n \n /**\n  * A <i>Realm functions<i> manager to call MongoDB Realm functions.\n- *\n+ * <p>\n  * Arguments and results are encoded/decoded with the <i>Realm functions'</i> codec registry either\n  * inherited from the {@link RealmAppConfiguration#getDefaultCodecRegistry()} or set explicitly\n  * when creating the <i>Realm functions</i>-instance through {@link RealmUser#getFunctions(CodecRegistry)}\n  * or through the individual calls to {@link #callFunction(String, List, Class, CodecRegistry)}.\n+ *\n+ * @see RealmUser#getFunctions()\n+ * @see RealmUser#getFunctions(CodecRegistry)\n+ * @see RealmAppConfiguration\n+ * @see CodecRegistry\n  */\n // TODO Timeout is currently handled uniformly through OkHttpNetworkTransport configured through RealmAppConfig\n-// FIXME Application wide invocation; like StitchAppClient appClient = Stitch.getDefaultAppClient();\n // FIXME Encoder/Decoder specific variants\n // FIXME Service?\n public class RealmFunctions {\n \n-    // FIXME Review memory allocation\n     private final RealmUser user;\n-    private CodecRegistry defaultCodecRegistry;\n \n+    private CodecRegistry defaultCodecRegistry;\n \n-    // FIXME Doc\n     RealmFunctions(RealmUser user, CodecRegistry codecRegistry) {\n         this.user = user;\n         this.defaultCodecRegistry = codecRegistry;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU0ODc0MA==", "url": "https://github.com/realm/realm-java/pull/6810#discussion_r423548740", "bodyText": "What is the concern here?", "author": "cmelchior", "createdAt": "2020-05-12T08:18:48Z", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmFunctions.java", "diffHunk": "@@ -17,30 +17,173 @@\n \n import org.bson.codecs.configuration.CodecRegistry;\n \n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import io.realm.internal.Util;\n import io.realm.internal.jni.JniBsonProtocol;\n+import io.realm.internal.jni.OsJNIResultCallback;\n+import io.realm.internal.objectstore.OsJavaNetworkTransport;\n+\n+/**\n+ * A <i>Realm functions<i> manager to call MongoDB Realm functions.\n+ *\n+ * Arguments and results are encoded/decoded with the <i>Realm functions'</i> codec registry either\n+ * inherited from the {@link RealmAppConfiguration#getDefaultCodecRegistry()} or set explicitly\n+ * when creating the <i>Realm functions</i>-instance through {@link RealmUser#getFunctions(CodecRegistry)}\n+ * or through the individual calls to {@link #callFunction(String, List, Class, CodecRegistry)}.\n+ */\n+// TODO Timeout is currently handled uniformly through OkHttpNetworkTransport configured through RealmAppConfig\n+// FIXME Application wide invocation; like StitchAppClient appClient = Stitch.getDefaultAppClient();\n+// FIXME Encoder/Decoder specific variants\n+// FIXME Service?\n+public class RealmFunctions {\n+\n+    // FIXME Review memory allocation", "originalCommit": "a9d6bf841950a2b2803a03686d01906e8a2d2a09", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIxMzU1MA==", "url": "https://github.com/realm/realm-java/pull/6810#discussion_r424213550", "bodyText": "From before I had an overview of how we managed the underlying C++ objects. Just a reminder for me to check up on it.", "author": "rorbech", "createdAt": "2020-05-13T07:00:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU0ODc0MA=="}], "type": "inlineReview", "revised_code": {"commit": "6305eb6b586ffb2630bfdaa3d3642921cc84ca17", "chunk": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/RealmFunctions.java b/realm/realm-library/src/objectServer/java/io/realm/RealmFunctions.java\nindex 026214170..f52867833 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/RealmFunctions.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/RealmFunctions.java\n\n@@ -27,24 +27,26 @@ import io.realm.internal.objectstore.OsJavaNetworkTransport;\n \n /**\n  * A <i>Realm functions<i> manager to call MongoDB Realm functions.\n- *\n+ * <p>\n  * Arguments and results are encoded/decoded with the <i>Realm functions'</i> codec registry either\n  * inherited from the {@link RealmAppConfiguration#getDefaultCodecRegistry()} or set explicitly\n  * when creating the <i>Realm functions</i>-instance through {@link RealmUser#getFunctions(CodecRegistry)}\n  * or through the individual calls to {@link #callFunction(String, List, Class, CodecRegistry)}.\n+ *\n+ * @see RealmUser#getFunctions()\n+ * @see RealmUser#getFunctions(CodecRegistry)\n+ * @see RealmAppConfiguration\n+ * @see CodecRegistry\n  */\n // TODO Timeout is currently handled uniformly through OkHttpNetworkTransport configured through RealmAppConfig\n-// FIXME Application wide invocation; like StitchAppClient appClient = Stitch.getDefaultAppClient();\n // FIXME Encoder/Decoder specific variants\n // FIXME Service?\n public class RealmFunctions {\n \n-    // FIXME Review memory allocation\n     private final RealmUser user;\n-    private CodecRegistry defaultCodecRegistry;\n \n+    private CodecRegistry defaultCodecRegistry;\n \n-    // FIXME Doc\n     RealmFunctions(RealmUser user, CodecRegistry codecRegistry) {\n         this.user = user;\n         this.defaultCodecRegistry = codecRegistry;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU1NTI5MQ==", "url": "https://github.com/realm/realm-java/pull/6810#discussion_r423555291", "bodyText": "We should probably also expose getApp() and getUser() functions from this class. This is useful if the class is passed around by itself. We are doing something similar in ApiKeyAuth. This would also require tests.", "author": "cmelchior", "createdAt": "2020-05-12T08:28:57Z", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmFunctions.java", "diffHunk": "@@ -17,30 +17,173 @@\n \n import org.bson.codecs.configuration.CodecRegistry;\n \n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import io.realm.internal.Util;\n import io.realm.internal.jni.JniBsonProtocol;\n+import io.realm.internal.jni.OsJNIResultCallback;\n+import io.realm.internal.objectstore.OsJavaNetworkTransport;\n+\n+/**\n+ * A <i>Realm functions<i> manager to call MongoDB Realm functions.\n+ *\n+ * Arguments and results are encoded/decoded with the <i>Realm functions'</i> codec registry either\n+ * inherited from the {@link RealmAppConfiguration#getDefaultCodecRegistry()} or set explicitly\n+ * when creating the <i>Realm functions</i>-instance through {@link RealmUser#getFunctions(CodecRegistry)}\n+ * or through the individual calls to {@link #callFunction(String, List, Class, CodecRegistry)}.\n+ */\n+// TODO Timeout is currently handled uniformly through OkHttpNetworkTransport configured through RealmAppConfig\n+// FIXME Application wide invocation; like StitchAppClient appClient = Stitch.getDefaultAppClient();\n+// FIXME Encoder/Decoder specific variants\n+// FIXME Service?\n+public class RealmFunctions {", "originalCommit": "a9d6bf841950a2b2803a03686d01906e8a2d2a09", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIwODk4Nw==", "url": "https://github.com/realm/realm-java/pull/6810#discussion_r424208987", "bodyText": "\ud83d\udc4d", "author": "rorbech", "createdAt": "2020-05-13T06:50:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU1NTI5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIxMzczMw==", "url": "https://github.com/realm/realm-java/pull/6810#discussion_r424213733", "bodyText": "\ud83d\udc4d", "author": "rorbech", "createdAt": "2020-05-13T07:00:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU1NTI5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "6305eb6b586ffb2630bfdaa3d3642921cc84ca17", "chunk": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/RealmFunctions.java b/realm/realm-library/src/objectServer/java/io/realm/RealmFunctions.java\nindex 026214170..f52867833 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/RealmFunctions.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/RealmFunctions.java\n\n@@ -27,24 +27,26 @@ import io.realm.internal.objectstore.OsJavaNetworkTransport;\n \n /**\n  * A <i>Realm functions<i> manager to call MongoDB Realm functions.\n- *\n+ * <p>\n  * Arguments and results are encoded/decoded with the <i>Realm functions'</i> codec registry either\n  * inherited from the {@link RealmAppConfiguration#getDefaultCodecRegistry()} or set explicitly\n  * when creating the <i>Realm functions</i>-instance through {@link RealmUser#getFunctions(CodecRegistry)}\n  * or through the individual calls to {@link #callFunction(String, List, Class, CodecRegistry)}.\n+ *\n+ * @see RealmUser#getFunctions()\n+ * @see RealmUser#getFunctions(CodecRegistry)\n+ * @see RealmAppConfiguration\n+ * @see CodecRegistry\n  */\n // TODO Timeout is currently handled uniformly through OkHttpNetworkTransport configured through RealmAppConfig\n-// FIXME Application wide invocation; like StitchAppClient appClient = Stitch.getDefaultAppClient();\n // FIXME Encoder/Decoder specific variants\n // FIXME Service?\n public class RealmFunctions {\n \n-    // FIXME Review memory allocation\n     private final RealmUser user;\n-    private CodecRegistry defaultCodecRegistry;\n \n+    private CodecRegistry defaultCodecRegistry;\n \n-    // FIXME Doc\n     RealmFunctions(RealmUser user, CodecRegistry codecRegistry) {\n         this.user = user;\n         this.defaultCodecRegistry = codecRegistry;\n"}}, {"oid": "def4bff1df815d6130f48816d0a42e8e2481dec6", "url": "https://github.com/realm/realm-java/commit/def4bff1df815d6130f48816d0a42e8e2481dec6", "message": "Expose DEFAULT_BSON_CODEC_REGISTRY publicly", "committedDate": "2020-05-12T09:25:04Z", "type": "commit"}, {"oid": "6305eb6b586ffb2630bfdaa3d3642921cc84ca17", "url": "https://github.com/realm/realm-java/commit/6305eb6b586ffb2630bfdaa3d3642921cc84ca17", "message": "Code review updates", "committedDate": "2020-05-12T22:43:41Z", "type": "commit"}, {"oid": "241725c7533d75f3ef67a99c63534d5033103918", "url": "https://github.com/realm/realm-java/commit/241725c7533d75f3ef67a99c63534d5033103918", "message": "Add BSON processing error test cases", "committedDate": "2020-05-12T22:44:11Z", "type": "commit"}, {"oid": "809c203fb9e8176ddd7362cc7dbb8ea05e10f60f", "url": "https://github.com/realm/realm-java/commit/809c203fb9e8176ddd7362cc7dbb8ea05e10f60f", "message": "Add getFuntions methods to App", "committedDate": "2020-05-13T06:42:49Z", "type": "commit"}, {"oid": "0df53b11dec7cc9a9edb426fc166c62a206ae794", "url": "https://github.com/realm/realm-java/commit/0df53b11dec7cc9a9edb426fc166c62a206ae794", "message": "Add (ignored) test case with C++ BSON parser crash", "committedDate": "2020-05-13T07:19:03Z", "type": "commit"}, {"oid": "55e1e398978ed810149f7b8b2a1c46161ee586de", "url": "https://github.com/realm/realm-java/commit/55e1e398978ed810149f7b8b2a1c46161ee586de", "message": "Make DEFAULT_BSON_CODEC_REGISTRY final", "committedDate": "2020-05-13T11:54:29Z", "type": "commit"}, {"oid": "32cefc57b4453fbdbb87432a5004c226f329f7d2", "url": "https://github.com/realm/realm-java/commit/32cefc57b4453fbdbb87432a5004c226f329f7d2", "message": "Cleaned up clarify asserts with error codes", "committedDate": "2020-05-14T20:27:48Z", "type": "commit"}, {"oid": "7cfa18e3838c82fc558b68387d2348e01a8c9f33", "url": "https://github.com/realm/realm-java/commit/7cfa18e3838c82fc558b68387d2348e01a8c9f33", "message": "Raise IllegalArgumentException from JNI if BSON argument to callFunction is not a BsonArray", "committedDate": "2020-05-14T20:31:16Z", "type": "commit"}, {"oid": "737bd27e3786f1c987694e2294dc35ac2720476e", "url": "https://github.com/realm/realm-java/commit/737bd27e3786f1c987694e2294dc35ac2720476e", "message": "Add test for non-evaluatable functions", "committedDate": "2020-05-14T20:41:27Z", "type": "commit"}, {"oid": "2f6c93f4895089284d1472b5358d4361339d2a73", "url": "https://github.com/realm/realm-java/commit/2f6c93f4895089284d1472b5358d4361339d2a73", "message": "Change Instant.now() to System.currentTimeMillis()", "committedDate": "2020-05-14T21:30:30Z", "type": "commit"}, {"oid": "8b1b80e744d28818018062ca471afc6283920a25", "url": "https://github.com/realm/realm-java/commit/8b1b80e744d28818018062ca471afc6283920a25", "message": "Merge branch 'v10' into cr/functions", "committedDate": "2020-05-15T20:57:16Z", "type": "commit"}, {"oid": "03c95833cd759fb999739f321875f4671cf8ef30", "url": "https://github.com/realm/realm-java/commit/03c95833cd759fb999739f321875f4671cf8ef30", "message": "Fixes after merge", "committedDate": "2020-05-15T21:31:27Z", "type": "commit"}, {"oid": "ea5ba814315d3aeda48df9873d06a9080d75711b", "url": "https://github.com/realm/realm-java/commit/ea5ba814315d3aeda48df9873d06a9080d75711b", "message": "Move RealmFunctions to io.realm.mongodb.functions.Functions", "committedDate": "2020-05-17T16:17:31Z", "type": "commit"}, {"oid": "646e3c81385105ebcb10378fbdc493b22e955a2a", "url": "https://github.com/realm/realm-java/commit/646e3c81385105ebcb10378fbdc493b22e955a2a", "message": "Merge branch 'v10' into cr/functions", "committedDate": "2020-05-17T16:18:42Z", "type": "commit"}, {"oid": "d7b600fc1b77960c7cda59058c24d2b4959bb498", "url": "https://github.com/realm/realm-java/commit/d7b600fc1b77960c7cda59058c24d2b4959bb498", "message": "Trying to disable sync test", "committedDate": "2020-05-17T19:36:04Z", "type": "commit"}, {"oid": "bbca32780e1c2b0ffc412d6538fa8fe8dd85fcab", "url": "https://github.com/realm/realm-java/commit/bbca32780e1c2b0ffc412d6538fa8fe8dd85fcab", "message": "Enabling debug output to debug CI-only issue", "committedDate": "2020-05-17T20:44:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUyMzYwMw==", "url": "https://github.com/realm/realm-java/pull/6810#discussion_r426523603", "bodyText": "Should live directly in Functions I think?", "author": "cmelchior", "createdAt": "2020-05-18T10:23:08Z", "path": "realm/realm-library/src/objectServer/java/io/realm/InternalFunctions.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm;\n+\n+import org.bson.codecs.configuration.CodecRegistry;\n+\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import io.realm.internal.Util;\n+import io.realm.internal.jni.JniBsonProtocol;\n+import io.realm.internal.jni.OsJNIResultCallback;\n+import io.realm.internal.network.ResultHandler;\n+import io.realm.internal.objectstore.OsJavaNetworkTransport;\n+import io.realm.log.RealmLog;\n+import io.realm.mongodb.functions.Functions;\n+\n+\n+/**\n+ * Internal implementation of Functions invoking the actual OS function in the context of the\n+ * {@link RealmUser}/{@link RealmApp}.\n+ */\n+class InternalFunctions extends Functions {\n+\n+    private final RealmUser user;\n+\n+    InternalFunctions(RealmUser user) {\n+        this(user, user.getApp().getConfiguration().getDefaultCodecRegistry());\n+    }\n+\n+    InternalFunctions(RealmUser user, CodecRegistry codecRegistry) {\n+        super(codecRegistry);\n+        this.user = user;\n+    }\n+\n+    @Override\n+    public RealmApp getApp() {", "originalCommit": "bbca32780e1c2b0ffc412d6538fa8fe8dd85fcab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU3MzkyOQ==", "url": "https://github.com/realm/realm-java/pull/6810#discussion_r426573929", "bodyText": "I kept it here to have all App/User related separately, but as none of it uses internals it can be in Functions. Will move it.", "author": "rorbech", "createdAt": "2020-05-18T12:01:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUyMzYwMw=="}], "type": "inlineReview", "revised_code": {"commit": "8ffc936c97c84f8f444f0a7116f0bc069f7dcc37", "chunk": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/InternalFunctions.java b/realm/realm-library/src/objectServer/java/io/realm/FunctionsImpl.java\nsimilarity index 87%\nrename from realm/realm-library/src/objectServer/java/io/realm/InternalFunctions.java\nrename to realm/realm-library/src/objectServer/java/io/realm/FunctionsImpl.java\nindex 6c27f234f..7bd25b7d0 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/InternalFunctions.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/FunctionsImpl.java\n\n@@ -33,27 +33,14 @@ import io.realm.mongodb.functions.Functions;\n  * Internal implementation of Functions invoking the actual OS function in the context of the\n  * {@link RealmUser}/{@link RealmApp}.\n  */\n-class InternalFunctions extends Functions {\n+class FunctionsImpl extends Functions {\n \n-    private final RealmUser user;\n-\n-    InternalFunctions(RealmUser user) {\n+    FunctionsImpl(RealmUser user) {\n         this(user, user.getApp().getConfiguration().getDefaultCodecRegistry());\n     }\n \n-    InternalFunctions(RealmUser user, CodecRegistry codecRegistry) {\n-        super(codecRegistry);\n-        this.user = user;\n-    }\n-\n-    @Override\n-    public RealmApp getApp() {\n-        return user.getApp();\n-    }\n-\n-    @Override\n-    public RealmUser getUser() {\n-        return user;\n+    FunctionsImpl(RealmUser user, CodecRegistry codecRegistry) {\n+        super(user, codecRegistry);\n     }\n \n     // Invokes actual MongoDB Realm Function in the context of the associated user/app.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUyMzY4NA==", "url": "https://github.com/realm/realm-java/pull/6810#discussion_r426523684", "bodyText": "Same", "author": "cmelchior", "createdAt": "2020-05-18T10:23:16Z", "path": "realm/realm-library/src/objectServer/java/io/realm/InternalFunctions.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm;\n+\n+import org.bson.codecs.configuration.CodecRegistry;\n+\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import io.realm.internal.Util;\n+import io.realm.internal.jni.JniBsonProtocol;\n+import io.realm.internal.jni.OsJNIResultCallback;\n+import io.realm.internal.network.ResultHandler;\n+import io.realm.internal.objectstore.OsJavaNetworkTransport;\n+import io.realm.log.RealmLog;\n+import io.realm.mongodb.functions.Functions;\n+\n+\n+/**\n+ * Internal implementation of Functions invoking the actual OS function in the context of the\n+ * {@link RealmUser}/{@link RealmApp}.\n+ */\n+class InternalFunctions extends Functions {\n+\n+    private final RealmUser user;\n+\n+    InternalFunctions(RealmUser user) {\n+        this(user, user.getApp().getConfiguration().getDefaultCodecRegistry());\n+    }\n+\n+    InternalFunctions(RealmUser user, CodecRegistry codecRegistry) {\n+        super(codecRegistry);\n+        this.user = user;\n+    }\n+\n+    @Override\n+    public RealmApp getApp() {\n+        return user.getApp();\n+    }\n+\n+    @Override\n+    public RealmUser getUser() {", "originalCommit": "bbca32780e1c2b0ffc412d6538fa8fe8dd85fcab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc0ODAyOQ==", "url": "https://github.com/realm/realm-java/pull/6810#discussion_r426748029", "bodyText": "Moved", "author": "rorbech", "createdAt": "2020-05-18T16:23:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUyMzY4NA=="}], "type": "inlineReview", "revised_code": {"commit": "8ffc936c97c84f8f444f0a7116f0bc069f7dcc37", "chunk": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/InternalFunctions.java b/realm/realm-library/src/objectServer/java/io/realm/FunctionsImpl.java\nsimilarity index 87%\nrename from realm/realm-library/src/objectServer/java/io/realm/InternalFunctions.java\nrename to realm/realm-library/src/objectServer/java/io/realm/FunctionsImpl.java\nindex 6c27f234f..7bd25b7d0 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/InternalFunctions.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/FunctionsImpl.java\n\n@@ -33,27 +33,14 @@ import io.realm.mongodb.functions.Functions;\n  * Internal implementation of Functions invoking the actual OS function in the context of the\n  * {@link RealmUser}/{@link RealmApp}.\n  */\n-class InternalFunctions extends Functions {\n+class FunctionsImpl extends Functions {\n \n-    private final RealmUser user;\n-\n-    InternalFunctions(RealmUser user) {\n+    FunctionsImpl(RealmUser user) {\n         this(user, user.getApp().getConfiguration().getDefaultCodecRegistry());\n     }\n \n-    InternalFunctions(RealmUser user, CodecRegistry codecRegistry) {\n-        super(codecRegistry);\n-        this.user = user;\n-    }\n-\n-    @Override\n-    public RealmApp getApp() {\n-        return user.getApp();\n-    }\n-\n-    @Override\n-    public RealmUser getUser() {\n-        return user;\n+    FunctionsImpl(RealmUser user, CodecRegistry codecRegistry) {\n+        super(user, codecRegistry);\n     }\n \n     // Invokes actual MongoDB Realm Function in the context of the associated user/app.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUyNDc5Nw==", "url": "https://github.com/realm/realm-java/pull/6810#discussion_r426524797", "bodyText": "I guess we should come up with a common name if we are to implement this pattern elsewhere.\nNitpick: Not sure how I feel about this compared to FunctionsImpl. Although FunctionsImpl is normally used when interfaces, it does feel more descriptive in my mind. But I don't have strong reasons and it is entirely subjective.", "author": "cmelchior", "createdAt": "2020-05-18T10:25:24Z", "path": "realm/realm-library/src/objectServer/java/io/realm/InternalFunctions.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 Realm Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.realm;\n+\n+import org.bson.codecs.configuration.CodecRegistry;\n+\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import io.realm.internal.Util;\n+import io.realm.internal.jni.JniBsonProtocol;\n+import io.realm.internal.jni.OsJNIResultCallback;\n+import io.realm.internal.network.ResultHandler;\n+import io.realm.internal.objectstore.OsJavaNetworkTransport;\n+import io.realm.log.RealmLog;\n+import io.realm.mongodb.functions.Functions;\n+\n+\n+/**\n+ * Internal implementation of Functions invoking the actual OS function in the context of the\n+ * {@link RealmUser}/{@link RealmApp}.\n+ */\n+class InternalFunctions extends Functions {", "originalCommit": "bbca32780e1c2b0ffc412d6538fa8fe8dd85fcab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU3NDEzNQ==", "url": "https://github.com/realm/realm-java/pull/6810#discussion_r426574135", "bodyText": "Ok. Will go for FunctionsImpl", "author": "rorbech", "createdAt": "2020-05-18T12:01:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUyNDc5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "8ffc936c97c84f8f444f0a7116f0bc069f7dcc37", "chunk": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/InternalFunctions.java b/realm/realm-library/src/objectServer/java/io/realm/FunctionsImpl.java\nsimilarity index 87%\nrename from realm/realm-library/src/objectServer/java/io/realm/InternalFunctions.java\nrename to realm/realm-library/src/objectServer/java/io/realm/FunctionsImpl.java\nindex 6c27f234f..7bd25b7d0 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/InternalFunctions.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/FunctionsImpl.java\n\n@@ -33,27 +33,14 @@ import io.realm.mongodb.functions.Functions;\n  * Internal implementation of Functions invoking the actual OS function in the context of the\n  * {@link RealmUser}/{@link RealmApp}.\n  */\n-class InternalFunctions extends Functions {\n+class FunctionsImpl extends Functions {\n \n-    private final RealmUser user;\n-\n-    InternalFunctions(RealmUser user) {\n+    FunctionsImpl(RealmUser user) {\n         this(user, user.getApp().getConfiguration().getDefaultCodecRegistry());\n     }\n \n-    InternalFunctions(RealmUser user, CodecRegistry codecRegistry) {\n-        super(codecRegistry);\n-        this.user = user;\n-    }\n-\n-    @Override\n-    public RealmApp getApp() {\n-        return user.getApp();\n-    }\n-\n-    @Override\n-    public RealmUser getUser() {\n-        return user;\n+    FunctionsImpl(RealmUser user, CodecRegistry codecRegistry) {\n+        super(user, codecRegistry);\n     }\n \n     // Invokes actual MongoDB Realm Function in the context of the associated user/app.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUyNTA2OA==", "url": "https://github.com/realm/realm-java/pull/6810#discussion_r426525068", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public InternalFunctions getFunctions(RealmUser user) {\n          \n          \n            \n                public Functions getFunctions(RealmUser user) {", "author": "cmelchior", "createdAt": "2020-05-18T10:25:53Z", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "diffHunk": "@@ -369,6 +371,25 @@ public RealmSync getSync() {\n         return syncManager;\n     }\n \n+    /**\n+     * Returns a <i>Realm Functions</i> manager for invoking MongoDB Realm Functions.\n+     * <p>\n+     * This will use the associated app's default codec registry to encode and decode arguments and\n+     * results.\n+     */\n+    public InternalFunctions getFunctions(RealmUser user) {", "originalCommit": "bbca32780e1c2b0ffc412d6538fa8fe8dd85fcab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ffc936c97c84f8f444f0a7116f0bc069f7dcc37", "chunk": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java b/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java\nindex f0f8bf420..5cea0add2 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java\n\n@@ -372,21 +373,21 @@ public class RealmApp {\n     }\n \n     /**\n-     * Returns a <i>Realm Functions</i> manager for invoking MongoDB Realm Functions.\n+     * Returns a <i>Functions</i> manager for invoking MongoDB Realm Functions.\n      * <p>\n      * This will use the associated app's default codec registry to encode and decode arguments and\n      * results.\n      */\n-    public InternalFunctions getFunctions(RealmUser user) {\n-        return new InternalFunctions(user);\n+    public Functions getFunctions(RealmUser user) {\n+        return new FunctionsImpl(user);\n     }\n \n     /**\n-     * Returns a <i>Realm Functions</i> manager for invoking MongoDB Realm Functions with custom\n+     * Returns a <i>Functions</i> manager for invoking MongoDB Realm Functions with custom\n      * codec registry for encoding and decoding arguments and results.\n      */\n-    public InternalFunctions getFunctions(RealmUser user, CodecRegistry codecRegistry) {\n-        return new InternalFunctions(user, codecRegistry);\n+    public Functions getFunctions(RealmUser user, CodecRegistry codecRegistry) {\n+        return new FunctionsImpl(user, codecRegistry);\n     }\n \n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjUyNTI4NA==", "url": "https://github.com/realm/realm-java/pull/6810#discussion_r426525284", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public InternalFunctions getFunctions(RealmUser user, CodecRegistry codecRegistry) {\n          \n          \n            \n                public Functions getFunctions(RealmUser user, CodecRegistry codecRegistry) {", "author": "cmelchior", "createdAt": "2020-05-18T10:26:18Z", "path": "realm/realm-library/src/objectServer/java/io/realm/RealmApp.java", "diffHunk": "@@ -369,6 +371,25 @@ public RealmSync getSync() {\n         return syncManager;\n     }\n \n+    /**\n+     * Returns a <i>Realm Functions</i> manager for invoking MongoDB Realm Functions.\n+     * <p>\n+     * This will use the associated app's default codec registry to encode and decode arguments and\n+     * results.\n+     */\n+    public InternalFunctions getFunctions(RealmUser user) {\n+        return new InternalFunctions(user);\n+    }\n+\n+    /**\n+     * Returns a <i>Realm Functions</i> manager for invoking MongoDB Realm Functions with custom\n+     * codec registry for encoding and decoding arguments and results.\n+     */\n+    public InternalFunctions getFunctions(RealmUser user, CodecRegistry codecRegistry) {", "originalCommit": "bbca32780e1c2b0ffc412d6538fa8fe8dd85fcab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ffc936c97c84f8f444f0a7116f0bc069f7dcc37", "chunk": "diff --git a/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java b/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java\nindex f0f8bf420..5cea0add2 100644\n--- a/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java\n+++ b/realm/realm-library/src/objectServer/java/io/realm/RealmApp.java\n\n@@ -372,21 +373,21 @@ public class RealmApp {\n     }\n \n     /**\n-     * Returns a <i>Realm Functions</i> manager for invoking MongoDB Realm Functions.\n+     * Returns a <i>Functions</i> manager for invoking MongoDB Realm Functions.\n      * <p>\n      * This will use the associated app's default codec registry to encode and decode arguments and\n      * results.\n      */\n-    public InternalFunctions getFunctions(RealmUser user) {\n-        return new InternalFunctions(user);\n+    public Functions getFunctions(RealmUser user) {\n+        return new FunctionsImpl(user);\n     }\n \n     /**\n-     * Returns a <i>Realm Functions</i> manager for invoking MongoDB Realm Functions with custom\n+     * Returns a <i>Functions</i> manager for invoking MongoDB Realm Functions with custom\n      * codec registry for encoding and decoding arguments and results.\n      */\n-    public InternalFunctions getFunctions(RealmUser user, CodecRegistry codecRegistry) {\n-        return new InternalFunctions(user, codecRegistry);\n+    public Functions getFunctions(RealmUser user, CodecRegistry codecRegistry) {\n+        return new FunctionsImpl(user, codecRegistry);\n     }\n \n \n"}}, {"oid": "8042161126b44f2cf5234c7491ddae4a89aa607a", "url": "https://github.com/realm/realm-java/commit/8042161126b44f2cf5234c7491ddae4a89aa607a", "message": "Fix order or codec providers to fix MongoCollectionTests", "committedDate": "2020-05-18T11:44:29Z", "type": "commit"}, {"oid": "8ffc936c97c84f8f444f0a7116f0bc069f7dcc37", "url": "https://github.com/realm/realm-java/commit/8ffc936c97c84f8f444f0a7116f0bc069f7dcc37", "message": "Functions implementation", "committedDate": "2020-05-18T12:40:26Z", "type": "commit"}, {"oid": "705e25cc57f5dd890efdf1a2406341b7e072608f", "url": "https://github.com/realm/realm-java/commit/705e25cc57f5dd890efdf1a2406341b7e072608f", "message": "Merge branch 'v10' into cr/functions", "committedDate": "2020-05-18T13:58:48Z", "type": "commit"}, {"oid": "12bf3d96316f17c81f473c178efa756b8163b28e", "url": "https://github.com/realm/realm-java/commit/12bf3d96316f17c81f473c178efa756b8163b28e", "message": "Pure debug to track CI-only issue", "committedDate": "2020-05-18T14:10:36Z", "type": "commit"}, {"oid": "73545b26c3b7b9a98017b19e5fbf05a7a36c4ff6", "url": "https://github.com/realm/realm-java/commit/73545b26c3b7b9a98017b19e5fbf05a7a36c4ff6", "message": "Revert \"Pure debug to track CI-only issue\"\n\nThis reverts commit 12bf3d96316f17c81f473c178efa756b8163b28e.", "committedDate": "2020-05-19T09:12:28Z", "type": "commit"}, {"oid": "ea24fb72d2dddcefa13e19e6b42efd1cbc28a24a", "url": "https://github.com/realm/realm-java/commit/ea24fb72d2dddcefa13e19e6b42efd1cbc28a24a", "message": "Disabling debug output for tracing on CI-only issue.", "committedDate": "2020-05-19T09:21:47Z", "type": "commit"}, {"oid": "571ca4c6eec8a1483b33b9eaafc4a98be6dec917", "url": "https://github.com/realm/realm-java/commit/571ca4c6eec8a1483b33b9eaafc4a98be6dec917", "message": "Ignoring BSON test of dates until fixed in C++ BSON parser", "committedDate": "2020-05-19T10:00:43Z", "type": "commit"}]}