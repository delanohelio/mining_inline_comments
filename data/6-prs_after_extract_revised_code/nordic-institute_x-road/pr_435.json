{"pr_number": 435, "pr_title": "XRDDEV-941", "pr_createdAt": "2020-03-26T11:15:53Z", "pr_url": "https://github.com/nordic-institute/X-Road/pull/435", "timeline": [{"oid": "d1576431a34ed8ba794620619e76dedda912c0ff", "url": "https://github.com/nordic-institute/X-Road/commit/d1576431a34ed8ba794620619e76dedda912c0ff", "message": "XRDDEV-941 API for updating existing API key\n\n- Add API for updating existing API key.\n- Add tests.\n- Update documentation.", "committedDate": "2020-03-26T11:07:21Z", "type": "commit"}, {"oid": "35a6abee0f156d558706b51f80b5db3c16f5e039", "url": "https://github.com/nordic-institute/X-Road/commit/35a6abee0f156d558706b51f80b5db3c16f5e039", "message": "XRDDEV-941 Update documentation", "committedDate": "2020-03-26T11:09:45Z", "type": "commit"}, {"oid": "a28d5e8d8d63ba2b2576081a09a84c6b75a10f95", "url": "https://github.com/nordic-institute/X-Road/commit/a28d5e8d8d63ba2b2576081a09a84c6b75a10f95", "message": "XRDDEV-941 Update documentation", "committedDate": "2020-03-26T11:11:28Z", "type": "commit"}, {"oid": "735e853ba2b24871b82606d8df77478ba2283ecb", "url": "https://github.com/nordic-institute/X-Road/commit/735e853ba2b24871b82606d8df77478ba2283ecb", "message": "XRDDEV-941 Update documentation", "committedDate": "2020-03-26T11:13:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIyMDA3Nw==", "url": "https://github.com/nordic-institute/X-Road/pull/435#discussion_r399220077", "bodyText": "Feels like this ApiKeyRepository is a bit different from the conventions used in other repositories. Other repositories mostly\n\nhave a saveOrUpdate method which is used for both creating and updating\ndo not deletegate simple update / delete operations to DAO, but instead just use direct calls with persistenceUtils, e.g. \n  \n    \n      X-Road/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/repository/LocalGroupRepository.java\n    \n    \n        Lines 104 to 106\n      in\n      735e853\n    \n    \n    \n    \n\n        \n          \n           public void delete(LocalGroupType localGroupType) { \n        \n\n        \n          \n               persistenceUtils.getCurrentSession().delete(localGroupType); \n        \n\n        \n          \n           } \n        \n    \n  \n\n\n\nBut this is earlier legacy than this ticket so nothing has to be done here. I think I will add a few lines to confluence to offer some conventions for future repository implementations.\nI think I will pick an API key related ticket next, so I might refactor this part there. Or, if you get the inspiration, you can do it also.", "author": "jansu76", "createdAt": "2020-03-27T12:10:50Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/repository/ApiKeyRepository.java", "diffHunk": "@@ -108,6 +108,44 @@ private String createApiKey() {\n         return entry;\n     }\n \n+    /**\n+     * update api key with one role by key id\n+     * @param id\n+     * @param roleName\n+     * @throws InvalidRoleNameException if roleNames was empty or contained invalid roles\n+     * @throws ApiKeyNotFoundException if api key was not found\n+     */\n+    @CacheEvict(allEntries = true, cacheNames = { LIST_ALL_KEYS_CACHE, GET_KEY_CACHE })\n+    public PersistentApiKeyType update(long id, String roleName)\n+            throws InvalidRoleNameException, ApiKeyNotFoundException {\n+        return update(id, Collections.singletonList(roleName));\n+    }\n+\n+    /**\n+     * update api key with collection of roles by key id\n+     * @param id\n+     * @param roleNames\n+     * @return\n+     * @throws InvalidRoleNameException if roleNames was empty or contained invalid roles\n+     * @throws ApiKeyNotFoundException if api key was not found\n+     */\n+    @CacheEvict(allEntries = true, cacheNames = { LIST_ALL_KEYS_CACHE, GET_KEY_CACHE })\n+    public PersistentApiKeyType update(long id, Collection<String> roleNames)", "originalCommit": "735e853ba2b24871b82606d8df77478ba2283ecb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIyNDU0Nw==", "url": "https://github.com/nordic-institute/X-Road/pull/435#discussion_r399224547", "bodyText": "Confluence updated: https://confluence.niis.org/display/XRDDEV/API+backend+conventions#APIbackendconventions-Repositories", "author": "jansu76", "createdAt": "2020-03-27T12:19:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIyMDA3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc2NTMxMw==", "url": "https://github.com/nordic-institute/X-Road/pull/435#discussion_r399765313", "bodyText": "I got inspired and did some refactoring. As a result the implementation now follows the same structure with other endpoints. Repository and service layers are separated, and business logic is implemented in the service layer.", "author": "petkivim", "createdAt": "2020-03-29T08:36:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIyMDA3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjI3NjEwMA==", "url": "https://github.com/nordic-institute/X-Road/pull/435#discussion_r402276100", "bodyText": "That's great! Looks good. Very nice to have this consistent with the rest of the app now.", "author": "jansu76", "createdAt": "2020-04-02T12:31:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIyMDA3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "fdd72f685ac2cceb1a47eeb78398999deb1b2759", "chunk": "diff --git a/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/repository/ApiKeyRepository.java b/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/repository/ApiKeyRepository.java\nindex ce067eb0d..15408e070 100644\n--- a/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/repository/ApiKeyRepository.java\n+++ b/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/repository/ApiKeyRepository.java\n\n@@ -26,190 +26,42 @@ package org.niis.xroad.restapi.repository;\n \n import lombok.extern.slf4j.Slf4j;\n import org.niis.xroad.restapi.dao.PersistentApiKeyDAOImpl;\n-import org.niis.xroad.restapi.domain.InvalidRoleNameException;\n import org.niis.xroad.restapi.domain.PersistentApiKeyType;\n-import org.niis.xroad.restapi.domain.Role;\n-import org.niis.xroad.restapi.exceptions.ErrorDeviation;\n-import org.niis.xroad.restapi.service.NotFoundException;\n import org.niis.xroad.restapi.util.PersistenceUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.cache.annotation.CacheEvict;\n-import org.springframework.cache.annotation.Cacheable;\n-import org.springframework.security.crypto.password.PasswordEncoder;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n \n-import java.util.AbstractMap;\n-import java.util.Collection;\n-import java.util.Collections;\n import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.UUID;\n \n /**\n  * API key repository which stores encoded keys in DB.\n- * Uses simple caching, using ConcurrentHashMaps in memory.\n  */\n @Slf4j\n @Repository\n @Transactional\n public class ApiKeyRepository {\n \n-    // two caches\n-    public static final String GET_KEY_CACHE = \"apikey-by-keys\";\n-    public static final String LIST_ALL_KEYS_CACHE = \"all-apikeys\";\n-\n-    private final PasswordEncoder passwordEncoder;\n     private final PersistenceUtils persistenceUtils;\n \n     @Autowired\n-    public ApiKeyRepository(PasswordEncoder passwordEncoder, PersistenceUtils persistenceUtils) {\n-        this.passwordEncoder = passwordEncoder;\n+    public ApiKeyRepository(PersistenceUtils persistenceUtils) {\n         this.persistenceUtils = persistenceUtils;\n     }\n \n-    /**\n-     * Api keys are created with UUID.randomUUID which uses SecureRandom,\n-     * which is cryptographically secure.\n-     * @return\n-     */\n-    private String createApiKey() {\n-        return UUID.randomUUID().toString();\n-    }\n-\n-    /**\n-     * create api key with one role\n-     */\n-    @CacheEvict(allEntries = true, cacheNames = { LIST_ALL_KEYS_CACHE, GET_KEY_CACHE })\n-    public Map.Entry<String, PersistentApiKeyType> create(String roleName) throws InvalidRoleNameException {\n-        return create(Collections.singletonList(roleName));\n-    }\n-\n-    /**\n-     * create api key with collection of roles\n-     * @return Map.Entry with key = plaintext key, value = PersistentApiKeyType\n-     * @throws InvalidRoleNameException if roleNames was empty or contained invalid roles\n-     */\n-    @CacheEvict(allEntries = true, cacheNames = { LIST_ALL_KEYS_CACHE, GET_KEY_CACHE })\n-    public Map.Entry<String, PersistentApiKeyType> create(Collection<String> roleNames)\n-            throws InvalidRoleNameException {\n-        if (roleNames.isEmpty()) {\n-            throw new InvalidRoleNameException(\"missing roles\");\n-        }\n-        Set<Role> roles = Role.getForNames(roleNames);\n-        String plainKey = createApiKey();\n-        String encodedKey = encode(plainKey);\n-        PersistentApiKeyType apiKey = new PersistentApiKeyType(encodedKey, Collections.unmodifiableCollection(roles));\n-        PersistentApiKeyDAOImpl apiKeyDAO = new PersistentApiKeyDAOImpl();\n-        apiKeyDAO.insert(persistenceUtils.getCurrentSession(), apiKey);\n-        Map.Entry<String, PersistentApiKeyType> entry =\n-                new AbstractMap.SimpleImmutableEntry<>(plainKey, apiKey);\n-        return entry;\n-    }\n-\n-    /**\n-     * update api key with one role by key id\n-     * @param id\n-     * @param roleName\n-     * @throws InvalidRoleNameException if roleNames was empty or contained invalid roles\n-     * @throws ApiKeyNotFoundException if api key was not found\n-     */\n-    @CacheEvict(allEntries = true, cacheNames = { LIST_ALL_KEYS_CACHE, GET_KEY_CACHE })\n-    public PersistentApiKeyType update(long id, String roleName)\n-            throws InvalidRoleNameException, ApiKeyNotFoundException {\n-        return update(id, Collections.singletonList(roleName));\n-    }\n-\n-    /**\n-     * update api key with collection of roles by key id\n-     * @param id\n-     * @param roleNames\n-     * @return\n-     * @throws InvalidRoleNameException if roleNames was empty or contained invalid roles\n-     * @throws ApiKeyNotFoundException if api key was not found\n-     */\n-    @CacheEvict(allEntries = true, cacheNames = { LIST_ALL_KEYS_CACHE, GET_KEY_CACHE })\n-    public PersistentApiKeyType update(long id, Collection<String> roleNames)\n-            throws InvalidRoleNameException, ApiKeyNotFoundException {\n-        PersistentApiKeyDAOImpl apiKeyDAO = new PersistentApiKeyDAOImpl();\n-        PersistentApiKeyType apiKeyType = apiKeyDAO.findById(persistenceUtils.getCurrentSession(), id);\n-        if (apiKeyType == null) {\n-            throw new ApiKeyNotFoundException(\"api key with id \" + id + \" not found\");\n-        }\n-        if (roleNames.isEmpty()) {\n-            throw new InvalidRoleNameException(\"missing roles\");\n-        }\n-        Set<Role> roles = Role.getForNames(roleNames);\n-        apiKeyType.setRoles(roles);\n-        apiKeyDAO.update(persistenceUtils.getCurrentSession(), apiKeyType);\n-        return apiKeyType;\n+    public void saveOrUpdate(PersistentApiKeyType persistentApiKeyType) {\n+        persistenceUtils.getCurrentSession().saveOrUpdate(persistentApiKeyType);\n     }\n \n-    private String encode(String key) {\n-        return passwordEncoder.encode(key);\n+    public void delete(PersistentApiKeyType persistentApiKeyType) {\n+        persistenceUtils.getCurrentSession().delete(persistentApiKeyType);\n     }\n \n-\n-    /**\n-     * get matching key\n-     * @param key\n-     * @return\n-     * @throws ApiKeyNotFoundException if api key was not found\n-     */\n-    @Cacheable(GET_KEY_CACHE)\n-    public PersistentApiKeyType get(String key) throws ApiKeyNotFoundException {\n-        String encodedKey = passwordEncoder.encode(key);\n-        List<PersistentApiKeyType> keys = new PersistentApiKeyDAOImpl().findAll(persistenceUtils.getCurrentSession());\n-        for (PersistentApiKeyType apiKeyType : keys) {\n-            if (apiKeyType.getEncodedKey().equals(encodedKey)) {\n-                return apiKeyType;\n-            }\n-        }\n-        throw new ApiKeyNotFoundException(\"api key not found\");\n-    }\n-\n-    /**\n-     * remove / revoke one key\n-     * @param key\n-     * @throws ApiKeyNotFoundException if api key was not found\n-     */\n-    @CacheEvict(allEntries = true, cacheNames = { LIST_ALL_KEYS_CACHE, GET_KEY_CACHE })\n-    public void remove(String key) throws ApiKeyNotFoundException {\n-        PersistentApiKeyType apiKeyType = get(key);\n-        new PersistentApiKeyDAOImpl().delete(persistenceUtils.getCurrentSession(), apiKeyType);\n-    }\n-\n-    /**\n-     * remove / revoke one key by id\n-     * @param id\n-     * @throws ApiKeyNotFoundException if api key was not found\n-     */\n-    @CacheEvict(allEntries = true, cacheNames = { LIST_ALL_KEYS_CACHE, GET_KEY_CACHE })\n-    public void removeById(long id) throws ApiKeyNotFoundException {\n-        PersistentApiKeyDAOImpl dao = new PersistentApiKeyDAOImpl();\n-        PersistentApiKeyType apiKeyType = dao.findById(persistenceUtils.getCurrentSession(), id);\n-        if (apiKeyType == null) {\n-            throw new ApiKeyNotFoundException(\"api key with id \" + id + \" not found\");\n-        }\n-        dao.delete(persistenceUtils.getCurrentSession(), apiKeyType);\n+    public PersistentApiKeyType getApiKey(long id) {\n+        return new PersistentApiKeyDAOImpl().findById(persistenceUtils.getCurrentSession(), id);\n     }\n \n-    /**\n-     * List all keys\n-     * @return\n-     */\n-    @Cacheable(LIST_ALL_KEYS_CACHE)\n-    public List<PersistentApiKeyType> listAll() {\n+    public List<PersistentApiKeyType> getAllApiKeys() {\n         return new PersistentApiKeyDAOImpl().findAll(persistenceUtils.getCurrentSession());\n     }\n-\n-    public static class ApiKeyNotFoundException extends NotFoundException {\n-        public static final String ERROR_API_KEY_NOT_FOUND = \"api_key_not_found\";\n-        ApiKeyNotFoundException(String s) {\n-            super(s, new ErrorDeviation(ERROR_API_KEY_NOT_FOUND));\n-        }\n-    }\n-\n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI0MTgzNA==", "url": "https://github.com/nordic-institute/X-Road/pull/435#discussion_r399241834", "bodyText": "ApiKeyNotFoundException should probably result in ResourceNotFoundException instead (see revoke)", "author": "jansu76", "createdAt": "2020-03-27T12:52:41Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/controller/ApiKeyController.java", "diffHunk": "@@ -82,6 +82,20 @@\n         return result;\n     }\n \n+    /**\n+     * update an existing api key\n+     */\n+    @RequestMapping(value = \"/{id}\", method = RequestMethod.PUT, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)\n+    public ResponseEntity<PublicKeyData> updateKey(@PathVariable(\"id\") long id,\n+                                                          @RequestBody List<String> roles) {\n+        try {\n+            PersistentApiKeyType key = apiKeyRepository.update(id, roles);\n+            return new ResponseEntity<>(new PublicKeyData(key.getId(), key.getRoles()), HttpStatus.OK);\n+        } catch (InvalidRoleNameException | ApiKeyRepository.ApiKeyNotFoundException e) {", "originalCommit": "735e853ba2b24871b82606d8df77478ba2283ecb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY3Mzc5Mg==", "url": "https://github.com/nordic-institute/X-Road/pull/435#discussion_r399673792", "bodyText": "Fixed.", "author": "petkivim", "createdAt": "2020-03-28T15:21:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI0MTgzNA=="}], "type": "inlineReview", "revised_code": {"commit": "a53bd0a095b78eff5549a8b0b3a11a02d1990672", "chunk": "diff --git a/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/controller/ApiKeyController.java b/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/controller/ApiKeyController.java\nindex b896f75be..d81c69cbc 100644\n--- a/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/controller/ApiKeyController.java\n+++ b/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/controller/ApiKeyController.java\n\n@@ -91,8 +91,10 @@ public class ApiKeyController {\n         try {\n             PersistentApiKeyType key = apiKeyRepository.update(id, roles);\n             return new ResponseEntity<>(new PublicKeyData(key.getId(), key.getRoles()), HttpStatus.OK);\n-        } catch (InvalidRoleNameException | ApiKeyRepository.ApiKeyNotFoundException e) {\n+        } catch (InvalidRoleNameException e) {\n             throw new BadRequestException(e);\n+        } catch (ApiKeyRepository.ApiKeyNotFoundException e) {\n+            throw new ResourceNotFoundException(e);\n         }\n     }\n \n"}}, {"oid": "2c0a787b2dfde17ee9475d66e9c67aacfc35c13c", "url": "https://github.com/nordic-institute/X-Road/commit/2c0a787b2dfde17ee9475d66e9c67aacfc35c13c", "message": "XRDDEV-941 Update documentation\n\n- Update Security Server user guide.\n- Update Security Server use case document.", "committedDate": "2020-03-28T15:08:03Z", "type": "commit"}, {"oid": "2c0a787b2dfde17ee9475d66e9c67aacfc35c13c", "url": "https://github.com/nordic-institute/X-Road/commit/2c0a787b2dfde17ee9475d66e9c67aacfc35c13c", "message": "XRDDEV-941 Update documentation\n\n- Update Security Server user guide.\n- Update Security Server use case document.", "committedDate": "2020-03-28T15:08:03Z", "type": "forcePushed"}, {"oid": "bc20188fb9ac5602ae11c4f6ebb881ecb88d8e1c", "url": "https://github.com/nordic-institute/X-Road/commit/bc20188fb9ac5602ae11c4f6ebb881ecb88d8e1c", "message": "XRDDEV-941 Update Security Server use case document", "committedDate": "2020-03-28T15:11:07Z", "type": "commit"}, {"oid": "a53bd0a095b78eff5549a8b0b3a11a02d1990672", "url": "https://github.com/nordic-institute/X-Road/commit/a53bd0a095b78eff5549a8b0b3a11a02d1990672", "message": "XRDDEV-941 Minor update on API key controller based on review comments", "committedDate": "2020-03-28T15:20:51Z", "type": "commit"}, {"oid": "fdd72f685ac2cceb1a47eeb78398999deb1b2759", "url": "https://github.com/nordic-institute/X-Road/commit/fdd72f685ac2cceb1a47eeb78398999deb1b2759", "message": "XRDDEV-941 Refactor repository implementation\n\n- Add new ApiKeyService class that contains business logic.\n- Refactor ApiKeyRepository so that in contains only DB operations.\n- Update tests.", "committedDate": "2020-03-29T06:48:25Z", "type": "commit"}, {"oid": "20b48bd6a6be2f667f09cf70918e13d16a09bea1", "url": "https://github.com/nordic-institute/X-Road/commit/20b48bd6a6be2f667f09cf70918e13d16a09bea1", "message": "XRDDEV-941 Separate service and API layer data models\n\n- Implement new data model for API layer.\n- Add converter.\n- Add tests.", "committedDate": "2020-03-29T07:55:26Z", "type": "commit"}, {"oid": "da8edfeccb4be9e731d4fdd13c33461145235ab2", "url": "https://github.com/nordic-institute/X-Road/commit/da8edfeccb4be9e731d4fdd13c33461145235ab2", "message": "XRDDEV-941  Fix failing tests", "committedDate": "2020-03-29T08:32:44Z", "type": "commit"}, {"oid": "eaeac8ef91345319456a82dd63c31e96f92ccd13", "url": "https://github.com/nordic-institute/X-Road/commit/eaeac8ef91345319456a82dd63c31e96f92ccd13", "message": "XRDDEV-941  Fix failing tests", "committedDate": "2020-03-29T09:04:04Z", "type": "commit"}, {"oid": "13059996338a1f1d6c3daa13785d6d78b57a35e7", "url": "https://github.com/nordic-institute/X-Road/commit/13059996338a1f1d6c3daa13785d6d78b57a35e7", "message": "XRDDEV-941 Fix checkstyle issues", "committedDate": "2020-03-29T09:05:46Z", "type": "commit"}, {"oid": "25bfef4167b9f6be63bf333fefdde1b197957ced", "url": "https://github.com/nordic-institute/X-Road/commit/25bfef4167b9f6be63bf333fefdde1b197957ced", "message": "XRDDEV-941 Fix SonarQube findings", "committedDate": "2020-03-29T12:42:13Z", "type": "commit"}, {"oid": "22d66e32f5cf071bef800e028d21f34033320935", "url": "https://github.com/nordic-institute/X-Road/commit/22d66e32f5cf071bef800e028d21f34033320935", "message": "Merge branch 'develop' into XRDDEV-941", "committedDate": "2020-04-02T04:45:05Z", "type": "commit"}]}