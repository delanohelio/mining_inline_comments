{"pr_number": 306, "pr_title": "XRDDEV-806 allowed operations for key, token", "pr_createdAt": "2020-01-02T12:57:01Z", "pr_url": "https://github.com/nordic-institute/X-Road/pull/306", "timeline": [{"oid": "9de69ef0bea5d3b611e86bb85cc13983fe0da334", "url": "https://github.com/nordic-institute/X-Road/commit/9de69ef0bea5d3b611e86bb85cc13983fe0da334", "message": "XRDDEV-778 add failing tests, refactor TokenTestUtils", "committedDate": "2019-12-11T22:10:51Z", "type": "commit"}, {"oid": "7b99ffa9ae5e822aa9f2b441825bd1351b2808d0", "url": "https://github.com/nordic-institute/X-Road/commit/7b99ffa9ae5e822aa9f2b441825bd1351b2808d0", "message": "XRDDEV-778 finish implementation, make tests pass", "committedDate": "2019-12-12T13:03:50Z", "type": "commit"}, {"oid": "f2b532047c677a99b81811172999903e978abb71", "url": "https://github.com/nordic-institute/X-Road/commit/f2b532047c677a99b81811172999903e978abb71", "message": "XRDDEV-778 refactor: move csr methods from KeyService to TokenCertificateService", "committedDate": "2019-12-12T20:51:09Z", "type": "commit"}, {"oid": "3c7ae18dd618175486650937c9df8043750ecf58", "url": "https://github.com/nordic-institute/X-Road/commit/3c7ae18dd618175486650937c9df8043750ecf58", "message": "Merge branch 'develop' into XRDDEV-778-delete-cert\n\nFix Conflicts:\n\tsrc/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/CertificateNotFoundException.java\n\tsrc/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/KeyService.java\n\tsrc/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/TokenCertificateService.java\n\tsrc/proxy-ui-api/src/test/java/org/niis/xroad/restapi/openapi/TokenCertificatesApiControllerIntegrationTest.java", "committedDate": "2019-12-13T07:29:46Z", "type": "commit"}, {"oid": "dc3bfff45afd1fc5544b914fd771070b980df695", "url": "https://github.com/nordic-institute/X-Road/commit/dc3bfff45afd1fc5544b914fd771070b980df695", "message": "XRDDEV-778 fix hash.toLowercase handling", "committedDate": "2019-12-13T11:34:19Z", "type": "commit"}, {"oid": "1ce817ab3c6a55bc1924bb70cce8a067190da2cf", "url": "https://github.com/nordic-institute/X-Road/commit/1ce817ab3c6a55bc1924bb70cce8a067190da2cf", "message": "XRDDEV-778 add checks for possible actions", "committedDate": "2019-12-16T09:11:11Z", "type": "commit"}, {"oid": "6688d233011d53677bc5159bad4339de721f92bc", "url": "https://github.com/nordic-institute/X-Road/commit/6688d233011d53677bc5159bad4339de721f92bc", "message": "XRDDEV-778 add possibleActions checking for token and keys", "committedDate": "2019-12-17T19:25:53Z", "type": "commit"}, {"oid": "22b98cdef8693d2b9356df3d8172a337e008be05", "url": "https://github.com/nordic-institute/X-Road/commit/22b98cdef8693d2b9356df3d8172a337e008be05", "message": "XRDDEV-778 add endpoint for getting possible actions for single cert", "committedDate": "2019-12-17T20:33:52Z", "type": "commit"}, {"oid": "f6911c814b53965e6e372ac63984ec5683d31a8b", "url": "https://github.com/nordic-institute/X-Road/commit/f6911c814b53965e6e372ac63984ec5683d31a8b", "message": "XRDDEV-778 complete cert and csr possible actions listing and verifying", "committedDate": "2019-12-17T21:19:29Z", "type": "commit"}, {"oid": "56f00fdfb0e37b1eb2c3819a826d0408e521df91", "url": "https://github.com/nordic-institute/X-Road/commit/56f00fdfb0e37b1eb2c3819a826d0408e521df91", "message": "XRDDEV-778 optimize possible actions -checking by adding getTokenAndKeyIdForCertHash", "committedDate": "2019-12-17T22:54:35Z", "type": "commit"}, {"oid": "22c00d9127d5a43d48b4c3ecdce25d18e4046a63", "url": "https://github.com/nordic-institute/X-Road/commit/22c00d9127d5a43d48b4c3ecdce25d18e4046a63", "message": "XRDDEV-778 add getTokenAndKeyIdForCertRequestId. as a result. deleteCsr does not take keyId anymore", "committedDate": "2019-12-19T07:29:42Z", "type": "commit"}, {"oid": "be7d8e557b01178ebee96013e98ac6fef7ed0c7e", "url": "https://github.com/nordic-institute/X-Road/commit/be7d8e557b01178ebee96013e98ac6fef7ed0c7e", "message": "XRDDEV-778 add tests for StateChangeActionHelper", "committedDate": "2019-12-19T22:33:49Z", "type": "commit"}, {"oid": "893772b49428a6940e42cf4e76c34768c4bffe9a", "url": "https://github.com/nordic-institute/X-Road/commit/893772b49428a6940e42cf4e76c34768c4bffe9a", "message": "XRDDEV-778 add more tests", "committedDate": "2019-12-20T00:26:25Z", "type": "commit"}, {"oid": "4abe5c2d6c39d83052a0ddf5f27f92784ef58021", "url": "https://github.com/nordic-institute/X-Road/commit/4abe5c2d6c39d83052a0ddf5f27f92784ef58021", "message": "XRDDEV-778 fix todos", "committedDate": "2019-12-20T00:46:52Z", "type": "commit"}, {"oid": "721d07d8a853cd7f1072f085cfffa11c2b968392", "url": "https://github.com/nordic-institute/X-Road/commit/721d07d8a853cd7f1072f085cfffa11c2b968392", "message": "Merge branch 'develop' into XRDDEV-778-delete-cert\n\nFix Conflicts:\n\tsrc/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/KeysApiController.java\n\tsrc/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/TokenCertificateService.java\n\tsrc/proxy-ui-api/src/test/java/org/niis/xroad/restapi/openapi/KeysApiControllerTest.java\n\tsrc/proxy-ui-api/src/test/java/org/niis/xroad/restapi/service/TokenCertificateServiceTest.java", "committedDate": "2019-12-20T01:18:07Z", "type": "commit"}, {"oid": "8f3e4eadd92849b795779d17393ef66975bce53b", "url": "https://github.com/nordic-institute/X-Road/commit/8f3e4eadd92849b795779d17393ef66975bce53b", "message": "XRDDEV-778 add get possible actions for single csr", "committedDate": "2019-12-20T13:18:46Z", "type": "commit"}, {"oid": "ab0758c4e5708384f0854bcf96ebdc06fc4a2664", "url": "https://github.com/nordic-institute/X-Road/commit/ab0758c4e5708384f0854bcf96ebdc06fc4a2664", "message": "XRDDEV-778 fix sonarqube critical duplication issue", "committedDate": "2019-12-30T12:06:34Z", "type": "commit"}, {"oid": "cbadb84f7b92699395d392ce78b6e5615d04ec58", "url": "https://github.com/nordic-institute/X-Road/commit/cbadb84f7b92699395d392ce78b6e5615d04ec58", "message": "Merge branch 'develop' into XRDDEV-806-key-token-allowed-operations", "committedDate": "2019-12-30T12:19:21Z", "type": "commit"}, {"oid": "6e214dd17497292c08362044c60dc4875083c7a7", "url": "https://github.com/nordic-institute/X-Road/commit/6e214dd17497292c08362044c60dc4875083c7a7", "message": "XRDDEV-806 document business rules", "committedDate": "2019-12-31T06:48:25Z", "type": "commit"}, {"oid": "4f6b15e83a041d8118ac7c8f5f9370cd7b4b9af9", "url": "https://github.com/nordic-institute/X-Road/commit/4f6b15e83a041d8118ac7c8f5f9370cd7b4b9af9", "message": "XRDDEV-806 finished review of old rules", "committedDate": "2019-12-31T08:56:48Z", "type": "commit"}, {"oid": "35925459c9b6e46a094be318ae9d45b33c61b004", "url": "https://github.com/nordic-institute/X-Road/commit/35925459c9b6e46a094be318ae9d45b33c61b004", "message": "XRDDEV-806 add failing tests, refactor key and token isSavedToConfig()", "committedDate": "2019-12-31T12:49:24Z", "type": "commit"}, {"oid": "7b405f7cb4e4a6155cbb7014fdc1327e8ba79344", "url": "https://github.com/nordic-institute/X-Road/commit/7b405f7cb4e4a6155cbb7014fdc1327e8ba79344", "message": "XRDDEV-806 fix broken old tests, add StateChangeActionMapping", "committedDate": "2019-12-31T13:28:26Z", "type": "commit"}, {"oid": "c883f0397e6d7a110d230300accd284bafd1a140", "url": "https://github.com/nordic-institute/X-Road/commit/c883f0397e6d7a110d230300accd284bafd1a140", "message": "XRDDEV-806 implementation that fixes failing tests", "committedDate": "2020-01-02T07:07:08Z", "type": "commit"}, {"oid": "cc6850c820c1237e18e0c86f3178b6ecd743cf8f", "url": "https://github.com/nordic-institute/X-Road/commit/cc6850c820c1237e18e0c86f3178b6ecd743cf8f", "message": "XRDDEV-806 add possible_actions validation for token.add key, token.update friendly name", "committedDate": "2020-01-02T10:01:41Z", "type": "commit"}, {"oid": "1fdb45613377adb99ea7651ccb537b1276e5b43f", "url": "https://github.com/nordic-institute/X-Road/commit/1fdb45613377adb99ea7651ccb537b1276e5b43f", "message": "XRDDEV-806 add more checks for key, token operations", "committedDate": "2020-01-02T11:09:16Z", "type": "commit"}, {"oid": "e3f887cd34e537922af8402eb48ed8f16ad989ac", "url": "https://github.com/nordic-institute/X-Road/commit/e3f887cd34e537922af8402eb48ed8f16ad989ac", "message": "XRDDEV-806 cleanup, renaming", "committedDate": "2020-01-02T11:56:28Z", "type": "commit"}, {"oid": "7d4eb1b0d99011a973ebed121c200eeeb3c63480", "url": "https://github.com/nordic-institute/X-Road/commit/7d4eb1b0d99011a973ebed121c200eeeb3c63480", "message": "XRDDEV-806 cleanup TODOs", "committedDate": "2020-01-02T12:14:40Z", "type": "commit"}, {"oid": "fac0f977f987ae0241793419bcd39c158fe0165c", "url": "https://github.com/nordic-institute/X-Road/commit/fac0f977f987ae0241793419bcd39c158fe0165c", "message": "XRDDEV-806 add check for token.update_friendly_name", "committedDate": "2020-01-02T12:56:06Z", "type": "commit"}, {"oid": "31b1b5213020c395c492f2a6f0cdddbe1859369a", "url": "https://github.com/nordic-institute/X-Road/commit/31b1b5213020c395c492f2a6f0cdddbe1859369a", "message": "XRDDEV-806 disable depencencyCheck which is currently broken, temporarily", "committedDate": "2020-01-02T14:21:11Z", "type": "commit"}, {"oid": "463e6a2f6779a40c8e81876c069276cdf9ef7b84", "url": "https://github.com/nordic-institute/X-Road/commit/463e6a2f6779a40c8e81876c069276cdf9ef7b84", "message": "XRDDEV-806 disable depencencyCheck which is currently broken, temporarily", "committedDate": "2020-01-02T14:54:22Z", "type": "commit"}, {"oid": "dbe3f9926eeed64edbc9845c384678a68d8f2a93", "url": "https://github.com/nordic-institute/X-Road/commit/dbe3f9926eeed64edbc9845c384678a68d8f2a93", "message": "XRDDEV-806 disable depencencyCheck which is currently broken, temporarily", "committedDate": "2020-01-02T15:08:52Z", "type": "commit"}, {"oid": "e4bd4ee70b4efdfdf596c4b6ea4cdd12d360764b", "url": "https://github.com/nordic-institute/X-Road/commit/e4bd4ee70b4efdfdf596c4b6ea4cdd12d360764b", "message": "XRDDEV-806 revert temp disabled depencencyCheck", "committedDate": "2020-01-02T15:44:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzczODQ0NA==", "url": "https://github.com/nordic-institute/X-Road/pull/306#discussion_r363738444", "bodyText": "Could be in the same if-block?", "author": "carohauta", "createdAt": "2020-01-07T13:06:46Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/PossibleActionsRuleEngine.java", "diffHunk": "@@ -0,0 +1,279 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.signer.protocol.dto.CertRequestInfo;\n+import ee.ria.xroad.signer.protocol.dto.CertificateInfo;\n+import ee.ria.xroad.signer.protocol.dto.KeyInfo;\n+import ee.ria.xroad.signer.protocol.dto.KeyUsageInfo;\n+import ee.ria.xroad.signer.protocol.dto.TokenInfo;\n+\n+import org.springframework.stereotype.Component;\n+\n+import java.util.EnumSet;\n+\n+/**\n+ * Validation logic for possible actions done on tokens, keys, certs and csrs\n+ */\n+@Component\n+public class PossibleActionsRuleEngine {\n+\n+    // duplicate definition, since we dont want add direct dependency on signer\n+    public static final String SOFTWARE_TOKEN_ID = \"0\";\n+\n+    /**\n+     * Get possible actions for a token\n+     */\n+    public EnumSet<PossibleActionEnum> getPossibleTokenActions(TokenInfo tokenInfo) {\n+        EnumSet<PossibleActionEnum> actions = EnumSet.noneOf(PossibleActionEnum.class);\n+\n+        if (tokenInfo.isActive()) {\n+            actions.add(PossibleActionEnum.GENERATE_KEY);\n+        }\n+\n+        if (tokenInfo.isActive()) {\n+            actions.add(PossibleActionEnum.TOKEN_DEACTIVATE);", "originalCommit": "e4bd4ee70b4efdfdf596c4b6ea4cdd12d360764b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMwNTU4OQ==", "url": "https://github.com/nordic-institute/X-Road/pull/306#discussion_r364305589", "bodyText": "It could, but I think I would prefer to keep it separate. I think it helps to be able to look at each PossibleActionEnum value individually and see clearly all the conditions that cause one individual action to be enabled. And that maybe makes it a bit easier to take one action and compare it's rules to the old codebase.\nThis sounds a bit silly since those two tokenInfo.isActive's are so simple and close to each other but that was kind of the thought behind it, it was not completely coincidental. The principle is maybe more clear in getPossibleCertificateActions and getPossibleKeyActions, where I am sure the if-blocks could be optimized, combined and simplified somewhat by combining actions, but keeping them separated is better. And using the same approach for getPossibleTokenActions is nice, IMO.", "author": "jansu76", "createdAt": "2020-01-08T15:57:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzczODQ0NA=="}], "type": "inlineReview", "revised_code": {"commit": "2b37842a8625c57780b48a1a4cff1beb9ab585df", "chunk": "diff --git a/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/PossibleActionsRuleEngine.java b/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/PossibleActionsRuleEngine.java\ndeleted file mode 100644\nindex f0f68b0d7..000000000\n--- a/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/PossibleActionsRuleEngine.java\n+++ /dev/null\n\n@@ -1,279 +0,0 @@\n-/**\n- * The MIT License\n- * Copyright (c) 2018 Estonian Information System Authority (RIA),\n- * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n- * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n- *\n- * Permission is hereby granted, free of charge, to any person obtaining a copy\n- * of this software and associated documentation files (the \"Software\"), to deal\n- * in the Software without restriction, including without limitation the rights\n- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n- * copies of the Software, and to permit persons to whom the Software is\n- * furnished to do so, subject to the following conditions:\n- *\n- * The above copyright notice and this permission notice shall be included in\n- * all copies or substantial portions of the Software.\n- *\n- * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n- * THE SOFTWARE.\n- */\n-package org.niis.xroad.restapi.service;\n-\n-import ee.ria.xroad.signer.protocol.dto.CertRequestInfo;\n-import ee.ria.xroad.signer.protocol.dto.CertificateInfo;\n-import ee.ria.xroad.signer.protocol.dto.KeyInfo;\n-import ee.ria.xroad.signer.protocol.dto.KeyUsageInfo;\n-import ee.ria.xroad.signer.protocol.dto.TokenInfo;\n-\n-import org.springframework.stereotype.Component;\n-\n-import java.util.EnumSet;\n-\n-/**\n- * Validation logic for possible actions done on tokens, keys, certs and csrs\n- */\n-@Component\n-public class PossibleActionsRuleEngine {\n-\n-    // duplicate definition, since we dont want add direct dependency on signer\n-    public static final String SOFTWARE_TOKEN_ID = \"0\";\n-\n-    /**\n-     * Get possible actions for a token\n-     */\n-    public EnumSet<PossibleActionEnum> getPossibleTokenActions(TokenInfo tokenInfo) {\n-        EnumSet<PossibleActionEnum> actions = EnumSet.noneOf(PossibleActionEnum.class);\n-\n-        if (tokenInfo.isActive()) {\n-            actions.add(PossibleActionEnum.GENERATE_KEY);\n-        }\n-\n-        if (tokenInfo.isActive()) {\n-            actions.add(PossibleActionEnum.TOKEN_DEACTIVATE);\n-        } else {\n-            if (tokenInfo.isAvailable()) {\n-                actions.add(PossibleActionEnum.TOKEN_ACTIVATE);\n-            }\n-        }\n-\n-        if (tokenInfo.isSavedToConfiguration()) {\n-            actions.add(PossibleActionEnum.EDIT_FRIENDLY_NAME);\n-        }\n-\n-        return actions;\n-    }\n-\n-    /**\n-     * key is \"not supported\" if it's an auth key inside other than softtoken (id 0)\n-     */\n-    public boolean isKeyUnsupported(TokenInfo tokenInfo, KeyInfo keyInfo) {\n-        return (!SOFTWARE_TOKEN_ID.equals(tokenInfo.getId()))\n-                && keyInfo.getUsage() == KeyUsageInfo.AUTHENTICATION;\n-\n-    }\n-\n-    /**\n-     * Get possible actions for a key\n-     */\n-    public EnumSet<PossibleActionEnum> getPossibleKeyActions(TokenInfo tokenInfo,\n-            KeyInfo keyInfo) {\n-        EnumSet<PossibleActionEnum> actions = EnumSet.noneOf(PossibleActionEnum.class);\n-\n-        // DELETE\n-        boolean keyNotSupported = isKeyUnsupported(tokenInfo, keyInfo);\n-\n-        // key.js#L26\n-        if (!keyNotSupported\n-            && !(tokenInfo.isReadOnly() && !keyInfo.isSavedToConfiguration())\n-            && (keyInfo.isSavedToConfiguration() || tokenInfo.isActive())) {\n-            actions.add(PossibleActionEnum.DELETE);\n-        }\n-\n-        // GENERATE_AUTH_CSR\n-        // keys.js#35\n-        if (SOFTWARE_TOKEN_ID.equals(tokenInfo.getId())\n-                && (keyInfo.getUsage() == null || keyInfo.getUsage() == KeyUsageInfo.AUTHENTICATION)\n-                && !(!keyInfo.isAvailable() || !tokenInfo.isActive() || keyNotSupported)) {\n-            actions.add(PossibleActionEnum.GENERATE_AUTH_CSR);\n-        }\n-        // GENERATE_SIGN_CSR\n-        if ((keyInfo.getUsage() == null || keyInfo.getUsage() == KeyUsageInfo.SIGNING)\n-                && !(!keyInfo.isAvailable() || !tokenInfo.isActive() || keyNotSupported)) {\n-            actions.add(PossibleActionEnum.GENERATE_SIGN_CSR);\n-        }\n-        // EDIT_FRIENDLY_NAME\n-        if (keyInfo.isSavedToConfiguration()) {\n-            actions.add(PossibleActionEnum.EDIT_FRIENDLY_NAME);\n-        }\n-\n-        return actions;\n-    }\n-\n-    /**\n-     * get possible actions for a certificate\n-     */\n-    public EnumSet<PossibleActionEnum> getPossibleCertificateActions(TokenInfo tokenInfo,\n-            KeyInfo keyInfo,\n-            CertificateInfo certificateInfo) {\n-        EnumSet<PossibleActionEnum> actions = EnumSet.noneOf(PossibleActionEnum.class);\n-        boolean canUnregister = keyInfo.getUsage() == KeyUsageInfo.AUTHENTICATION\n-                && (CertificateInfo.STATUS_REGINPROG.equals(certificateInfo.getStatus())\n-                || CertificateInfo.STATUS_REGISTERED.equals(certificateInfo.getStatus()));\n-        if (canUnregister) {\n-            actions.add(PossibleActionEnum.UNREGISTER);\n-        }\n-        boolean savedToConfiguration = certificateInfo.isSavedToConfiguration();\n-        if (canDeleteCertOrCsr(tokenInfo, savedToConfiguration, canUnregister)) {\n-            actions.add(PossibleActionEnum.DELETE);\n-        }\n-        if (keyInfo.getUsage() == KeyUsageInfo.AUTHENTICATION\n-                && CertificateInfo.STATUS_SAVED.equals(certificateInfo.getStatus())\n-                && (!canUnregister)) {\n-            actions.add(PossibleActionEnum.REGISTER);\n-        }\n-        if (keyInfo.getUsage() != null && certificateInfo.isSavedToConfiguration()) {\n-            if (certificateInfo.isActive()) {\n-                actions.add(PossibleActionEnum.DISABLE);\n-            } else {\n-                actions.add(PossibleActionEnum.ACTIVATE);\n-            }\n-        }\n-        if (!certificateInfo.isSavedToConfiguration()) {\n-            actions.add(PossibleActionEnum.IMPORT_FROM_TOKEN);\n-        }\n-\n-        return actions;\n-    }\n-\n-    /**\n-     * get possible actions for a csr\n-     */\n-    public EnumSet<PossibleActionEnum> getPossibleCsrActions(TokenInfo tokenInfo,\n-            KeyInfo keyInfo,\n-            CertRequestInfo certRequestInfo) {\n-        EnumSet<PossibleActionEnum> actions = EnumSet.noneOf(PossibleActionEnum.class);\n-\n-        if (canDeleteCertOrCsr(tokenInfo, true, false)) {\n-            actions.add(PossibleActionEnum.DELETE);\n-        }\n-        return actions;\n-    }\n-\n-    /**\n-     * combined logic from keys.js and token_renderer.rb\n-     */\n-    private boolean canDeleteCertOrCsr(TokenInfo tokenInfo,\n-            boolean savedToConfiguration,\n-            boolean canUnregister) {\n-\n-        // token_renderer.rb#230\n-        boolean canDeleteCertFromTokenRenderer;\n-        if (tokenInfo.isReadOnly() && !savedToConfiguration) {\n-            canDeleteCertFromTokenRenderer = false;\n-        } else {\n-            canDeleteCertFromTokenRenderer = true;\n-        }\n-\n-        // keys.js#77\n-        if (!canUnregister\n-                && canDeleteCertFromTokenRenderer\n-                && (savedToConfiguration || tokenInfo.isActive())) {\n-            return true;\n-        } else {\n-            return false;\n-        }\n-    }\n-\n-    /**\n-     * Shortcut helper method for verifying required action\n-     * @throws ActionNotPossibleException if given action is not in possibleActions\n-     */\n-    public void requirePossibleAction(PossibleActionEnum action, EnumSet<PossibleActionEnum> possibleActions)\n-            throws ActionNotPossibleException {\n-        if (!possibleActions.contains(action)) {\n-            throw new ActionNotPossibleException(action + \" is not possible\");\n-        }\n-    }\n-\n-    /**\n-     * Shortcut helper method for verifying required action\n-     * @throws ActionNotPossibleException if given token action is not possible\n-     */\n-    public void requirePossibleTokenAction(PossibleActionEnum action, TokenInfo tokenInfo)\n-            throws ActionNotPossibleException {\n-        requirePossibleAction(action, ActionTargetType.TOKEN, tokenInfo, null, null, null);\n-    }\n-\n-    /**\n-     * Shortcut helper method for verifying required action\n-     * @throws ActionNotPossibleException if given key action is not possible\n-     */\n-    public void requirePossibleKeyAction(PossibleActionEnum action, TokenInfo tokenInfo, KeyInfo keyInfo)\n-            throws ActionNotPossibleException {\n-        requirePossibleAction(action, ActionTargetType.KEY, tokenInfo, keyInfo, null, null);\n-    }\n-\n-    /**\n-     * Shortcut helper method for verifying required action\n-     * @throws ActionNotPossibleException if given certificate action is not possible\n-     */\n-    public void requirePossibleCertificateAction(PossibleActionEnum action, TokenInfo tokenInfo, KeyInfo keyInfo,\n-            CertificateInfo certificateInfo)\n-            throws ActionNotPossibleException {\n-        requirePossibleAction(action, ActionTargetType.CERTIFICATE, tokenInfo, keyInfo, certificateInfo, null);\n-    }\n-\n-    /**\n-     * Shortcut helper method for verifying required action\n-     * @throws ActionNotPossibleException if given csr action is not possible\n-     */\n-    public void requirePossibleCsrAction(PossibleActionEnum action, TokenInfo tokenInfo, KeyInfo keyInfo,\n-            CertRequestInfo certRequestInfo)\n-            throws ActionNotPossibleException {\n-        requirePossibleAction(action, ActionTargetType.CSR, tokenInfo, keyInfo, null, certRequestInfo);\n-    }\n-\n-    /**\n-     * Shortcut helper method for verifying required action\n-     * @throws ActionNotPossibleException if given action is not possible for give target type\n-     */\n-    public void requirePossibleAction(PossibleActionEnum action, ActionTargetType target,\n-            TokenInfo tokenInfo, KeyInfo keyInfo, CertificateInfo certificateInfo, CertRequestInfo certRequestInfo)\n-            throws ActionNotPossibleException {\n-        EnumSet<PossibleActionEnum> possibleActions;\n-        switch (target) {\n-            case TOKEN:\n-                possibleActions = getPossibleTokenActions(tokenInfo);\n-                break;\n-            case KEY:\n-                possibleActions = getPossibleKeyActions(tokenInfo, keyInfo);\n-                break;\n-            case CERTIFICATE:\n-                possibleActions = getPossibleCertificateActions(tokenInfo, keyInfo, certificateInfo);\n-                break;\n-            case CSR:\n-                possibleActions = getPossibleCsrActions(tokenInfo, keyInfo, certRequestInfo);\n-                break;\n-            default:\n-                throw new IllegalStateException(\"bad target: \" + target);\n-        }\n-        if (!possibleActions.contains(action)) {\n-            throw new ActionNotPossibleException(action + \" is not possible\");\n-        }\n-    }\n-\n-    /**\n-     * Enum for supported action targets (token, key, cert, csr)\n-     */\n-    public enum ActionTargetType {\n-        TOKEN,\n-        KEY,\n-        CERTIFICATE,\n-        CSR\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc1MzE1Mg==", "url": "https://github.com/nordic-institute/X-Road/pull/306#discussion_r363753152", "bodyText": "keyInfo and certRequestInfo not used", "author": "carohauta", "createdAt": "2020-01-07T13:44:57Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/PossibleActionsRuleEngine.java", "diffHunk": "@@ -0,0 +1,279 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import ee.ria.xroad.signer.protocol.dto.CertRequestInfo;\n+import ee.ria.xroad.signer.protocol.dto.CertificateInfo;\n+import ee.ria.xroad.signer.protocol.dto.KeyInfo;\n+import ee.ria.xroad.signer.protocol.dto.KeyUsageInfo;\n+import ee.ria.xroad.signer.protocol.dto.TokenInfo;\n+\n+import org.springframework.stereotype.Component;\n+\n+import java.util.EnumSet;\n+\n+/**\n+ * Validation logic for possible actions done on tokens, keys, certs and csrs\n+ */\n+@Component\n+public class PossibleActionsRuleEngine {\n+\n+    // duplicate definition, since we dont want add direct dependency on signer\n+    public static final String SOFTWARE_TOKEN_ID = \"0\";\n+\n+    /**\n+     * Get possible actions for a token\n+     */\n+    public EnumSet<PossibleActionEnum> getPossibleTokenActions(TokenInfo tokenInfo) {\n+        EnumSet<PossibleActionEnum> actions = EnumSet.noneOf(PossibleActionEnum.class);\n+\n+        if (tokenInfo.isActive()) {\n+            actions.add(PossibleActionEnum.GENERATE_KEY);\n+        }\n+\n+        if (tokenInfo.isActive()) {\n+            actions.add(PossibleActionEnum.TOKEN_DEACTIVATE);\n+        } else {\n+            if (tokenInfo.isAvailable()) {\n+                actions.add(PossibleActionEnum.TOKEN_ACTIVATE);\n+            }\n+        }\n+\n+        if (tokenInfo.isSavedToConfiguration()) {\n+            actions.add(PossibleActionEnum.EDIT_FRIENDLY_NAME);\n+        }\n+\n+        return actions;\n+    }\n+\n+    /**\n+     * key is \"not supported\" if it's an auth key inside other than softtoken (id 0)\n+     */\n+    public boolean isKeyUnsupported(TokenInfo tokenInfo, KeyInfo keyInfo) {\n+        return (!SOFTWARE_TOKEN_ID.equals(tokenInfo.getId()))\n+                && keyInfo.getUsage() == KeyUsageInfo.AUTHENTICATION;\n+\n+    }\n+\n+    /**\n+     * Get possible actions for a key\n+     */\n+    public EnumSet<PossibleActionEnum> getPossibleKeyActions(TokenInfo tokenInfo,\n+            KeyInfo keyInfo) {\n+        EnumSet<PossibleActionEnum> actions = EnumSet.noneOf(PossibleActionEnum.class);\n+\n+        // DELETE\n+        boolean keyNotSupported = isKeyUnsupported(tokenInfo, keyInfo);\n+\n+        // key.js#L26\n+        if (!keyNotSupported\n+            && !(tokenInfo.isReadOnly() && !keyInfo.isSavedToConfiguration())\n+            && (keyInfo.isSavedToConfiguration() || tokenInfo.isActive())) {\n+            actions.add(PossibleActionEnum.DELETE);\n+        }\n+\n+        // GENERATE_AUTH_CSR\n+        // keys.js#35\n+        if (SOFTWARE_TOKEN_ID.equals(tokenInfo.getId())\n+                && (keyInfo.getUsage() == null || keyInfo.getUsage() == KeyUsageInfo.AUTHENTICATION)\n+                && !(!keyInfo.isAvailable() || !tokenInfo.isActive() || keyNotSupported)) {\n+            actions.add(PossibleActionEnum.GENERATE_AUTH_CSR);\n+        }\n+        // GENERATE_SIGN_CSR\n+        if ((keyInfo.getUsage() == null || keyInfo.getUsage() == KeyUsageInfo.SIGNING)\n+                && !(!keyInfo.isAvailable() || !tokenInfo.isActive() || keyNotSupported)) {\n+            actions.add(PossibleActionEnum.GENERATE_SIGN_CSR);\n+        }\n+        // EDIT_FRIENDLY_NAME\n+        if (keyInfo.isSavedToConfiguration()) {\n+            actions.add(PossibleActionEnum.EDIT_FRIENDLY_NAME);\n+        }\n+\n+        return actions;\n+    }\n+\n+    /**\n+     * get possible actions for a certificate\n+     */\n+    public EnumSet<PossibleActionEnum> getPossibleCertificateActions(TokenInfo tokenInfo,\n+            KeyInfo keyInfo,\n+            CertificateInfo certificateInfo) {\n+        EnumSet<PossibleActionEnum> actions = EnumSet.noneOf(PossibleActionEnum.class);\n+        boolean canUnregister = keyInfo.getUsage() == KeyUsageInfo.AUTHENTICATION\n+                && (CertificateInfo.STATUS_REGINPROG.equals(certificateInfo.getStatus())\n+                || CertificateInfo.STATUS_REGISTERED.equals(certificateInfo.getStatus()));\n+        if (canUnregister) {\n+            actions.add(PossibleActionEnum.UNREGISTER);\n+        }\n+        boolean savedToConfiguration = certificateInfo.isSavedToConfiguration();\n+        if (canDeleteCertOrCsr(tokenInfo, savedToConfiguration, canUnregister)) {\n+            actions.add(PossibleActionEnum.DELETE);\n+        }\n+        if (keyInfo.getUsage() == KeyUsageInfo.AUTHENTICATION\n+                && CertificateInfo.STATUS_SAVED.equals(certificateInfo.getStatus())\n+                && (!canUnregister)) {\n+            actions.add(PossibleActionEnum.REGISTER);\n+        }\n+        if (keyInfo.getUsage() != null && certificateInfo.isSavedToConfiguration()) {\n+            if (certificateInfo.isActive()) {\n+                actions.add(PossibleActionEnum.DISABLE);\n+            } else {\n+                actions.add(PossibleActionEnum.ACTIVATE);\n+            }\n+        }\n+        if (!certificateInfo.isSavedToConfiguration()) {\n+            actions.add(PossibleActionEnum.IMPORT_FROM_TOKEN);\n+        }\n+\n+        return actions;\n+    }\n+\n+    /**\n+     * get possible actions for a csr\n+     */\n+    public EnumSet<PossibleActionEnum> getPossibleCsrActions(TokenInfo tokenInfo,\n+            KeyInfo keyInfo,\n+            CertRequestInfo certRequestInfo) {", "originalCommit": "e4bd4ee70b4efdfdf596c4b6ea4cdd12d360764b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMyMTg2Ng==", "url": "https://github.com/nordic-institute/X-Road/pull/306#discussion_r364321866", "bodyText": "Fixing that.", "author": "jansu76", "createdAt": "2020-01-08T16:26:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc1MzE1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMzMTY4Ng==", "url": "https://github.com/nordic-institute/X-Road/pull/306#discussion_r364331686", "bodyText": "fixed", "author": "jansu76", "createdAt": "2020-01-08T16:45:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc1MzE1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "2b37842a8625c57780b48a1a4cff1beb9ab585df", "chunk": "diff --git a/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/PossibleActionsRuleEngine.java b/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/PossibleActionsRuleEngine.java\ndeleted file mode 100644\nindex f0f68b0d7..000000000\n--- a/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/PossibleActionsRuleEngine.java\n+++ /dev/null\n\n@@ -1,279 +0,0 @@\n-/**\n- * The MIT License\n- * Copyright (c) 2018 Estonian Information System Authority (RIA),\n- * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n- * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n- *\n- * Permission is hereby granted, free of charge, to any person obtaining a copy\n- * of this software and associated documentation files (the \"Software\"), to deal\n- * in the Software without restriction, including without limitation the rights\n- * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n- * copies of the Software, and to permit persons to whom the Software is\n- * furnished to do so, subject to the following conditions:\n- *\n- * The above copyright notice and this permission notice shall be included in\n- * all copies or substantial portions of the Software.\n- *\n- * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n- * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n- * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n- * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n- * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n- * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n- * THE SOFTWARE.\n- */\n-package org.niis.xroad.restapi.service;\n-\n-import ee.ria.xroad.signer.protocol.dto.CertRequestInfo;\n-import ee.ria.xroad.signer.protocol.dto.CertificateInfo;\n-import ee.ria.xroad.signer.protocol.dto.KeyInfo;\n-import ee.ria.xroad.signer.protocol.dto.KeyUsageInfo;\n-import ee.ria.xroad.signer.protocol.dto.TokenInfo;\n-\n-import org.springframework.stereotype.Component;\n-\n-import java.util.EnumSet;\n-\n-/**\n- * Validation logic for possible actions done on tokens, keys, certs and csrs\n- */\n-@Component\n-public class PossibleActionsRuleEngine {\n-\n-    // duplicate definition, since we dont want add direct dependency on signer\n-    public static final String SOFTWARE_TOKEN_ID = \"0\";\n-\n-    /**\n-     * Get possible actions for a token\n-     */\n-    public EnumSet<PossibleActionEnum> getPossibleTokenActions(TokenInfo tokenInfo) {\n-        EnumSet<PossibleActionEnum> actions = EnumSet.noneOf(PossibleActionEnum.class);\n-\n-        if (tokenInfo.isActive()) {\n-            actions.add(PossibleActionEnum.GENERATE_KEY);\n-        }\n-\n-        if (tokenInfo.isActive()) {\n-            actions.add(PossibleActionEnum.TOKEN_DEACTIVATE);\n-        } else {\n-            if (tokenInfo.isAvailable()) {\n-                actions.add(PossibleActionEnum.TOKEN_ACTIVATE);\n-            }\n-        }\n-\n-        if (tokenInfo.isSavedToConfiguration()) {\n-            actions.add(PossibleActionEnum.EDIT_FRIENDLY_NAME);\n-        }\n-\n-        return actions;\n-    }\n-\n-    /**\n-     * key is \"not supported\" if it's an auth key inside other than softtoken (id 0)\n-     */\n-    public boolean isKeyUnsupported(TokenInfo tokenInfo, KeyInfo keyInfo) {\n-        return (!SOFTWARE_TOKEN_ID.equals(tokenInfo.getId()))\n-                && keyInfo.getUsage() == KeyUsageInfo.AUTHENTICATION;\n-\n-    }\n-\n-    /**\n-     * Get possible actions for a key\n-     */\n-    public EnumSet<PossibleActionEnum> getPossibleKeyActions(TokenInfo tokenInfo,\n-            KeyInfo keyInfo) {\n-        EnumSet<PossibleActionEnum> actions = EnumSet.noneOf(PossibleActionEnum.class);\n-\n-        // DELETE\n-        boolean keyNotSupported = isKeyUnsupported(tokenInfo, keyInfo);\n-\n-        // key.js#L26\n-        if (!keyNotSupported\n-            && !(tokenInfo.isReadOnly() && !keyInfo.isSavedToConfiguration())\n-            && (keyInfo.isSavedToConfiguration() || tokenInfo.isActive())) {\n-            actions.add(PossibleActionEnum.DELETE);\n-        }\n-\n-        // GENERATE_AUTH_CSR\n-        // keys.js#35\n-        if (SOFTWARE_TOKEN_ID.equals(tokenInfo.getId())\n-                && (keyInfo.getUsage() == null || keyInfo.getUsage() == KeyUsageInfo.AUTHENTICATION)\n-                && !(!keyInfo.isAvailable() || !tokenInfo.isActive() || keyNotSupported)) {\n-            actions.add(PossibleActionEnum.GENERATE_AUTH_CSR);\n-        }\n-        // GENERATE_SIGN_CSR\n-        if ((keyInfo.getUsage() == null || keyInfo.getUsage() == KeyUsageInfo.SIGNING)\n-                && !(!keyInfo.isAvailable() || !tokenInfo.isActive() || keyNotSupported)) {\n-            actions.add(PossibleActionEnum.GENERATE_SIGN_CSR);\n-        }\n-        // EDIT_FRIENDLY_NAME\n-        if (keyInfo.isSavedToConfiguration()) {\n-            actions.add(PossibleActionEnum.EDIT_FRIENDLY_NAME);\n-        }\n-\n-        return actions;\n-    }\n-\n-    /**\n-     * get possible actions for a certificate\n-     */\n-    public EnumSet<PossibleActionEnum> getPossibleCertificateActions(TokenInfo tokenInfo,\n-            KeyInfo keyInfo,\n-            CertificateInfo certificateInfo) {\n-        EnumSet<PossibleActionEnum> actions = EnumSet.noneOf(PossibleActionEnum.class);\n-        boolean canUnregister = keyInfo.getUsage() == KeyUsageInfo.AUTHENTICATION\n-                && (CertificateInfo.STATUS_REGINPROG.equals(certificateInfo.getStatus())\n-                || CertificateInfo.STATUS_REGISTERED.equals(certificateInfo.getStatus()));\n-        if (canUnregister) {\n-            actions.add(PossibleActionEnum.UNREGISTER);\n-        }\n-        boolean savedToConfiguration = certificateInfo.isSavedToConfiguration();\n-        if (canDeleteCertOrCsr(tokenInfo, savedToConfiguration, canUnregister)) {\n-            actions.add(PossibleActionEnum.DELETE);\n-        }\n-        if (keyInfo.getUsage() == KeyUsageInfo.AUTHENTICATION\n-                && CertificateInfo.STATUS_SAVED.equals(certificateInfo.getStatus())\n-                && (!canUnregister)) {\n-            actions.add(PossibleActionEnum.REGISTER);\n-        }\n-        if (keyInfo.getUsage() != null && certificateInfo.isSavedToConfiguration()) {\n-            if (certificateInfo.isActive()) {\n-                actions.add(PossibleActionEnum.DISABLE);\n-            } else {\n-                actions.add(PossibleActionEnum.ACTIVATE);\n-            }\n-        }\n-        if (!certificateInfo.isSavedToConfiguration()) {\n-            actions.add(PossibleActionEnum.IMPORT_FROM_TOKEN);\n-        }\n-\n-        return actions;\n-    }\n-\n-    /**\n-     * get possible actions for a csr\n-     */\n-    public EnumSet<PossibleActionEnum> getPossibleCsrActions(TokenInfo tokenInfo,\n-            KeyInfo keyInfo,\n-            CertRequestInfo certRequestInfo) {\n-        EnumSet<PossibleActionEnum> actions = EnumSet.noneOf(PossibleActionEnum.class);\n-\n-        if (canDeleteCertOrCsr(tokenInfo, true, false)) {\n-            actions.add(PossibleActionEnum.DELETE);\n-        }\n-        return actions;\n-    }\n-\n-    /**\n-     * combined logic from keys.js and token_renderer.rb\n-     */\n-    private boolean canDeleteCertOrCsr(TokenInfo tokenInfo,\n-            boolean savedToConfiguration,\n-            boolean canUnregister) {\n-\n-        // token_renderer.rb#230\n-        boolean canDeleteCertFromTokenRenderer;\n-        if (tokenInfo.isReadOnly() && !savedToConfiguration) {\n-            canDeleteCertFromTokenRenderer = false;\n-        } else {\n-            canDeleteCertFromTokenRenderer = true;\n-        }\n-\n-        // keys.js#77\n-        if (!canUnregister\n-                && canDeleteCertFromTokenRenderer\n-                && (savedToConfiguration || tokenInfo.isActive())) {\n-            return true;\n-        } else {\n-            return false;\n-        }\n-    }\n-\n-    /**\n-     * Shortcut helper method for verifying required action\n-     * @throws ActionNotPossibleException if given action is not in possibleActions\n-     */\n-    public void requirePossibleAction(PossibleActionEnum action, EnumSet<PossibleActionEnum> possibleActions)\n-            throws ActionNotPossibleException {\n-        if (!possibleActions.contains(action)) {\n-            throw new ActionNotPossibleException(action + \" is not possible\");\n-        }\n-    }\n-\n-    /**\n-     * Shortcut helper method for verifying required action\n-     * @throws ActionNotPossibleException if given token action is not possible\n-     */\n-    public void requirePossibleTokenAction(PossibleActionEnum action, TokenInfo tokenInfo)\n-            throws ActionNotPossibleException {\n-        requirePossibleAction(action, ActionTargetType.TOKEN, tokenInfo, null, null, null);\n-    }\n-\n-    /**\n-     * Shortcut helper method for verifying required action\n-     * @throws ActionNotPossibleException if given key action is not possible\n-     */\n-    public void requirePossibleKeyAction(PossibleActionEnum action, TokenInfo tokenInfo, KeyInfo keyInfo)\n-            throws ActionNotPossibleException {\n-        requirePossibleAction(action, ActionTargetType.KEY, tokenInfo, keyInfo, null, null);\n-    }\n-\n-    /**\n-     * Shortcut helper method for verifying required action\n-     * @throws ActionNotPossibleException if given certificate action is not possible\n-     */\n-    public void requirePossibleCertificateAction(PossibleActionEnum action, TokenInfo tokenInfo, KeyInfo keyInfo,\n-            CertificateInfo certificateInfo)\n-            throws ActionNotPossibleException {\n-        requirePossibleAction(action, ActionTargetType.CERTIFICATE, tokenInfo, keyInfo, certificateInfo, null);\n-    }\n-\n-    /**\n-     * Shortcut helper method for verifying required action\n-     * @throws ActionNotPossibleException if given csr action is not possible\n-     */\n-    public void requirePossibleCsrAction(PossibleActionEnum action, TokenInfo tokenInfo, KeyInfo keyInfo,\n-            CertRequestInfo certRequestInfo)\n-            throws ActionNotPossibleException {\n-        requirePossibleAction(action, ActionTargetType.CSR, tokenInfo, keyInfo, null, certRequestInfo);\n-    }\n-\n-    /**\n-     * Shortcut helper method for verifying required action\n-     * @throws ActionNotPossibleException if given action is not possible for give target type\n-     */\n-    public void requirePossibleAction(PossibleActionEnum action, ActionTargetType target,\n-            TokenInfo tokenInfo, KeyInfo keyInfo, CertificateInfo certificateInfo, CertRequestInfo certRequestInfo)\n-            throws ActionNotPossibleException {\n-        EnumSet<PossibleActionEnum> possibleActions;\n-        switch (target) {\n-            case TOKEN:\n-                possibleActions = getPossibleTokenActions(tokenInfo);\n-                break;\n-            case KEY:\n-                possibleActions = getPossibleKeyActions(tokenInfo, keyInfo);\n-                break;\n-            case CERTIFICATE:\n-                possibleActions = getPossibleCertificateActions(tokenInfo, keyInfo, certificateInfo);\n-                break;\n-            case CSR:\n-                possibleActions = getPossibleCsrActions(tokenInfo, keyInfo, certRequestInfo);\n-                break;\n-            default:\n-                throw new IllegalStateException(\"bad target: \" + target);\n-        }\n-        if (!possibleActions.contains(action)) {\n-            throw new ActionNotPossibleException(action + \" is not possible\");\n-        }\n-    }\n-\n-    /**\n-     * Enum for supported action targets (token, key, cert, csr)\n-     */\n-    public enum ActionTargetType {\n-        TOKEN,\n-        KEY,\n-        CERTIFICATE,\n-        CSR\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc2ODAyMA==", "url": "https://github.com/nordic-institute/X-Road/pull/306#discussion_r363768020", "bodyText": "These are probably redundant here", "author": "carohauta", "createdAt": "2020-01-07T14:18:49Z", "path": "src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/service/TokenCertificateServiceTest.java", "diffHunk": "@@ -79,58 +119,359 @@\n     @MockBean\n     private CertificateAuthorityService certificateAuthorityService;\n \n-    @MockBean\n+    @SpyBean\n     private KeyService keyService;\n \n+    @MockBean\n+    private GlobalConfService globalConfService;\n+\n+    @MockBean\n+    private GlobalConfFacade globalConfFacade;\n+\n+    @MockBean\n+    private ClientRepository clientRepository;", "originalCommit": "e4bd4ee70b4efdfdf596c4b6ea4cdd12d360764b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDMzMDQ4Mw==", "url": "https://github.com/nordic-institute/X-Road/pull/306#discussion_r364330483", "bodyText": "I guess they are not? I mean if I don't mock those, TokenCertificateService will e.g. use real GlobalConfService, which we do not want here since it's not meant to be an integration test.\nThis is pretty clumsy way to do it though, I agree, and usually you forget to add some dependencies as mocks, and can easily call the real implementation by mistake. I wonder if there's a better way to do this, or if it makes sense to use this approach at all.", "author": "jansu76", "createdAt": "2020-01-08T16:42:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc2ODAyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU2OTg3OQ==", "url": "https://github.com/nordic-institute/X-Road/pull/306#discussion_r364569879", "bodyText": "Thought a bit more about and realized that if we mock everything, TokenCertificateServiceTest is then a pure unit test, so what sense does it make to implement it as a (slow) SpringBootTest? Would it not be better to just have it as a regular junit test which is more lightweight and guarantees we don't accidentally use some injected real dependencies?\nAnd then a counterpoint, spring test framework makes constructing, injecting and mocking the dependencies easier (probably, not sure how it would be done in pure mockito) and some of the tests use spring features such as mock users.\nI have a feeling this is related to the problem with slow tests, I need to ask for help somewhere. I don't think it should stop this PR though.", "author": "jansu76", "createdAt": "2020-01-09T05:57:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc2ODAyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU4NTI3MQ==", "url": "https://github.com/nordic-institute/X-Road/pull/306#discussion_r364585271", "bodyText": "In this case I couldn't find any usage (direct or indirect) for the fields in question. But it might be good to mock them anyway to ensure nothing calls the real services.\nIt would be very nice to get the tests to execute faster but yeah that is for another task", "author": "carohauta", "createdAt": "2020-01-09T07:09:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzc2ODAyMA=="}], "type": "inlineReview", "revised_code": {"commit": "2b37842a8625c57780b48a1a4cff1beb9ab585df", "chunk": "diff --git a/src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/service/TokenCertificateServiceTest.java b/src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/service/TokenCertificateServiceTest.java\nindex 844c64379..dce6357e8 100644\n--- a/src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/service/TokenCertificateServiceTest.java\n+++ b/src/proxy-ui-api/src/test/java/org/niis/xroad/restapi/service/TokenCertificateServiceTest.java\n\n@@ -119,7 +119,7 @@ public class TokenCertificateServiceTest {\n     @MockBean\n     private CertificateAuthorityService certificateAuthorityService;\n \n-    @SpyBean\n+    @MockBean\n     private KeyService keyService;\n \n     @MockBean\n"}}, {"oid": "2b37842a8625c57780b48a1a4cff1beb9ab585df", "url": "https://github.com/nordic-institute/X-Road/commit/2b37842a8625c57780b48a1a4cff1beb9ab585df", "message": "XRDDEV-778 fixes based on review comments", "committedDate": "2020-01-08T14:45:42Z", "type": "commit"}, {"oid": "9b0d2a3a543f24b06be0baa073ca006ea41d6aef", "url": "https://github.com/nordic-institute/X-Road/commit/9b0d2a3a543f24b06be0baa073ca006ea41d6aef", "message": "Merge branch 'develop' into XRDDEV-778-delete-cert\n\nFix Conflicts:\n\tsrc/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/TokenCertificateService.java\n\tsrc/proxy-ui-api/src/test/java/org/niis/xroad/restapi/service/TokenCertificateServiceTest.java", "committedDate": "2020-01-08T15:05:19Z", "type": "commit"}, {"oid": "072262bbe6af96aad898f5d7a522d9f9dfe99af5", "url": "https://github.com/nordic-institute/X-Road/commit/072262bbe6af96aad898f5d7a522d9f9dfe99af5", "message": "XRDDEV-778 cleanup after conflict fixes, remove unused fields", "committedDate": "2020-01-08T15:26:26Z", "type": "commit"}, {"oid": "4dabba7af46c045309a676bde9d6fea0f62e258c", "url": "https://github.com/nordic-institute/X-Road/commit/4dabba7af46c045309a676bde9d6fea0f62e258c", "message": "Merge branch 'XRDDEV-778-delete-cert' into XRDDEV-806-key-token-allowed-operations-wip\n\nFix Conflicts:\n\tsrc/common-ui/src/main/java/ee/ria/xroad/commonui/SignerProxy.java\n\tsrc/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/StateChangeActionHelper.java\n\tsrc/proxy-ui-api/src/test/java/org/niis/xroad/restapi/service/TokenCertificateServiceTest.java", "committedDate": "2020-01-08T15:44:18Z", "type": "commit"}, {"oid": "4f7cfc0965cc717c37fd4f4ee506a03b00716753", "url": "https://github.com/nordic-institute/X-Road/commit/4f7cfc0965cc717c37fd4f4ee506a03b00716753", "message": "XRDDEV-806 fixes based on review comments", "committedDate": "2020-01-08T16:44:43Z", "type": "commit"}]}