{"pr_number": 344, "pr_title": "XRDDEV-837 Generate internal TLS key cert", "pr_createdAt": "2020-01-29T07:59:06Z", "pr_url": "https://github.com/nordic-institute/X-Road/pull/344", "timeline": [{"oid": "af9b18f4decdaf151f6e044f311446958e353e39", "url": "https://github.com/nordic-institute/X-Road/commit/af9b18f4decdaf151f6e044f311446958e353e39", "message": "XRDDEV-837 Generate internal TLS key and cert\n\n* process runner\n* test fixing\n* services and controller method\n* api design", "committedDate": "2020-01-24T09:56:38Z", "type": "commit"}, {"oid": "ac16bb5a2c0360ac3fe64b86b5246645de188f5a", "url": "https://github.com/nordic-institute/X-Road/commit/ac16bb5a2c0360ac3fe64b86b5246645de188f5a", "message": "XRDDEV-837 Generate internal TLS key and cert\n\n* process exception handling\n* testing", "committedDate": "2020-01-27T13:50:53Z", "type": "commit"}, {"oid": "d8ceab6ea599a280a5ae75d3e7141ca48c79ae52", "url": "https://github.com/nordic-institute/X-Road/commit/d8ceab6ea599a280a5ae75d3e7141ca48c79ae52", "message": "XRDDEV-837 Generate internal TLS key and cert // cleaning\n\n* better process exception handling\n* fix tests", "committedDate": "2020-01-27T14:42:50Z", "type": "commit"}, {"oid": "10a38d9caa403879f7d762daa4a6e6c9338fade7", "url": "https://github.com/nordic-institute/X-Road/commit/10a38d9caa403879f7d762daa4a6e6c9338fade7", "message": "XRDDEV-837 Generate internal TLS key and cert // tests and restart\n\n* basic unit tests\n* added xroad-proxy restart for now", "committedDate": "2020-01-29T07:57:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI2MDIwOQ==", "url": "https://github.com/nordic-institute/X-Road/pull/344#discussion_r372260209", "bodyText": "Not doing a full review now, but just noticed this and wanted to add my thoughts.\nThis raises a few questions for me:\n\nmany DeviationAwareExceptions offer constructors that make it possible to copy deviations from another exception (\n  \n    \n      X-Road/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/openapi/BadRequestException.java\n    \n    \n        Lines 42 to 44\n      in\n      8b7f2a6\n    \n    \n    \n    \n\n        \n          \n           public BadRequestException(DeviationAware deviations) { \n        \n\n        \n          \n               super(deviations.getErrorDeviation(), deviations.getWarningDeviations()); \n        \n\n        \n          \n           } \n        \n    \n  \n\n). I thought it would maybe better to consider putting this kind of functionality to a DeviationAwareRuntimeException constructor instead. That way \"deviation copying\" theme would always be handled using the same style (target exception / it's constructors) and not sometimes by target exception, sometimes by source exception. Granted there are some problems with that option (lots of constructors)\nstoring localizedMessage to metadata is a bit questionable. Metadata's reason of existence was originally to transfer some structured metadata to frontend: https://confluence.niis.org/pages/viewpage.action?pageId=8520435#APIGuidelines&Examples-Errorhandling. As in \"duplicateService.v1\" in the example. I know we are already breaking this (for example CodedException handling in exceptiontranslator). I fear adding a generic ServiceException.throwAsDeviationAwareRuntimeException will lead into wide use to easily and quickly translate ServiceExceptions into unchecked ones, and this creates an end result where metadata loses it's original purpose, you don't really know what kind of data it contains, and it often leaks exception messages to frontend even if that was not the intention.\n\nI think the API and error object design started from the idea that we want to hide things like the stacktrace, and original unprocessed error message, from the client. And sometimes add something extra, the error metadata, which should be limited and well known and documented in the API - when calling this endpoint you may receive this metadata.\nThen some contradictory requirements started piling up - we want to display all the error detail the old system does, and we don't want to be killed by the complex error handling, and this has caused the metadata idea to suffer and rot a little bit and become fuzzy.\nThere's always a bit of contradiction here - on the other hand we want to \"show same level of detail in error messages as the old UI\" - and on the other hand we want to follow https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/REST_Security_Cheat_Sheet.md#error-handling. I don't think we can create a universal solution for this, we need to decide on it case by case (and consult @petkivim and @raits maybe more often on these), and usually one of the requirements has to compromise (either UI displays less error detail than the old, or we break OWASP recommendations).\nI think I would e.g. feel better if\n    public void generateInternalTlsKeyAndCertificate() {\n        try {\n            externalProcessRunner.execute(generateCertScriptPath, generateCertScriptArgs.split(\"\\\\s+\"));\n            restartXroadProxy();\n        } catch (ProcessNotExecutableException | ProcessFailedException e) {\n            e.throwAsDeviationAwareRuntimeException(KEY_CERT_GENERATION_FAILED);\n        }\n    }\n\n\nwould make it more explicit on how it transforms e.localizedMessage -> e.error.metadata. When thinking about just this code, the difference is small, but I am more worried about how other code will (mis)use ServiceException.throwAsDeviationAwareRuntimeException", "author": "jansu76", "createdAt": "2020-01-29T09:04:16Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceException.java", "diffHunk": "@@ -65,6 +68,28 @@ public ServiceException(String msg, ErrorDeviation errorDeviation) {\n         super(msg, errorDeviation);\n     }\n \n-\n-\n+    /**\n+     * Throws the caught ServiceException as a {@link DeviationAwareRuntimeException}. The cause and\n+     * {@link ErrorDeviation#metadata ErrorDeviation metadata} will be transferred from the original exception\n+     * but a new error code must be provided. If the underlying exception does not have error metadata then the\n+     * localized message of the underlying exception is used as metadata instead. If there is no underlying exception\n+     * at all, then only the error code will be returned within the ErrorDeviation object.\n+     * @param newErrorCode the new error code of the exception\n+     */\n+    public void throwAsDeviationAwareRuntimeException(String newErrorCode) {", "originalCommit": "10a38d9caa403879f7d762daa4a6e6c9338fade7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAzMzcwOA==", "url": "https://github.com/nordic-institute/X-Road/pull/344#discussion_r377033708", "bodyText": "Discussion in Slack: https://niis.slack.com/archives/GGBHVCYSY/p1580295667011100", "author": "carohauta", "createdAt": "2020-02-10T12:30:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI2MDIwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3MTUxMw==", "url": "https://github.com/nordic-institute/X-Road/pull/344#discussion_r377071513", "bodyText": "The process output is no longer returned to the API caller. Instead it is logged so that one can easily find it from the logs with the correlation-id that is provided with the response headers. The response body in error cases now only include an error code and status.", "author": "carohauta", "createdAt": "2020-02-10T13:47:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI2MDIwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "f22afb719452b7a3a367bf7fe7e65d25e02da650", "chunk": "diff --git a/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceException.java b/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceException.java\nindex 479d46ca3..b9db08723 100644\n--- a/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceException.java\n+++ b/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceException.java\n\n@@ -67,29 +64,4 @@ public abstract class ServiceException extends DeviationAwareException {\n     public ServiceException(String msg, ErrorDeviation errorDeviation) {\n         super(msg, errorDeviation);\n     }\n-\n-    /**\n-     * Throws the caught ServiceException as a {@link DeviationAwareRuntimeException}. The cause and\n-     * {@link ErrorDeviation#metadata ErrorDeviation metadata} will be transferred from the original exception\n-     * but a new error code must be provided. If the underlying exception does not have error metadata then the\n-     * localized message of the underlying exception is used as metadata instead. If there is no underlying exception\n-     * at all, then only the error code will be returned within the ErrorDeviation object.\n-     * @param newErrorCode the new error code of the exception\n-     */\n-    public void throwAsDeviationAwareRuntimeException(String newErrorCode) {\n-        Throwable t = null;\n-        List<String> errorMetaData = null;\n-        if (this.getErrorDeviation() != null\n-                && this.getErrorDeviation().getMetadata() != null\n-                && !this.getErrorDeviation().getMetadata().isEmpty()) {\n-            errorMetaData = this.getErrorDeviation().getMetadata();\n-        }\n-        if (this.getCause() != null) {\n-            t = this.getCause();\n-            if (errorMetaData == null) {\n-                errorMetaData = Collections.singletonList(t.getLocalizedMessage());\n-            }\n-        }\n-        throw new DeviationAwareRuntimeException(t, new ErrorDeviation(newErrorCode, errorMetaData));\n-    }\n }\n"}}, {"oid": "9cf92d02086794fbd1cfce0778c7ec59bd8b5c97", "url": "https://github.com/nordic-institute/X-Road/commit/9cf92d02086794fbd1cfce0778c7ec59bd8b5c97", "message": "Merge branch 'develop' into XRDDEV-837-generate-internal-tls-key-cert\n\n# Conflicts:\n#\tsrc/proxy-ui-api/src/main/resources/common-application.yml", "committedDate": "2020-02-10T12:10:56Z", "type": "commit"}, {"oid": "f22afb719452b7a3a367bf7fe7e65d25e02da650", "url": "https://github.com/nordic-institute/X-Road/commit/f22afb719452b7a3a367bf7fe7e65d25e02da650", "message": "XRDDEV-837 Generate internal TLS key and cert // PR fix 1\n\n* change error handling to NOT provide the process output to the API caller\n* log the process output", "committedDate": "2020-02-10T13:43:23Z", "type": "commit"}, {"oid": "5667022c33427c1d268827c4ac57ebf89ddc630a", "url": "https://github.com/nordic-institute/X-Road/commit/5667022c33427c1d268827c4ac57ebf89ddc630a", "message": "XRDDEV-837 Generate internal TLS key and cert // cleanup", "committedDate": "2020-02-11T10:42:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzczMzk3NQ==", "url": "https://github.com/nordic-institute/X-Road/pull/344#discussion_r377733975", "bodyText": "Running external processes is surprisingly hard! I think I spent a couple of hours looking into it. One option would be to leverage existing libraries to avoid the hard parts. I know of Apache Commons Exec https://commons.apache.org/proper/commons-exec/index.html. It might make things easier or not.\nI also looked into ancient stuff #6 (which we have sometimes used as an job interview exercise!)\nThis is implementation seems to be pretty good though. It avoids the most common pitfalls and is clear and nicely documented. Good job!", "author": "jansu76", "createdAt": "2020-02-11T16:06:45Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ExternalProcessRunner.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+@Slf4j\n+@Component\n+public class ExternalProcessRunner {", "originalCommit": "5667022c33427c1d268827c4ac57ebf89ddc630a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODEwMjYyMA==", "url": "https://github.com/nordic-institute/X-Road/pull/344#discussion_r378102620", "bodyText": "It is also surprisingly hard to find a decent library to handle this. The Apache Commons one seems to be published in 2014 and is targeted for JDK 1.5 so that might be outdated. Also found other ones but they seemed overly complex.\nThe ProcessBuilder class in it's current state seems to be a really viable option for running external processes but as you mentioned there are always some common pitfalls that should be taken care of.", "author": "carohauta", "createdAt": "2020-02-12T08:34:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzczMzk3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE0MzM4NA==", "url": "https://github.com/nordic-institute/X-Road/pull/344#discussion_r378143384", "bodyText": "Yeah, I tried to look at things like guava, but no luck there. It's a bit weird.", "author": "jansu76", "createdAt": "2020-02-12T09:52:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzczMzk3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "283280cb4e60edae7fab0916d0005b8d31fc2237", "chunk": "diff --git a/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ExternalProcessRunner.java b/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ExternalProcessRunner.java\nindex 111cd63bd..1eea408ff 100644\n--- a/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ExternalProcessRunner.java\n+++ b/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ExternalProcessRunner.java\n\n@@ -25,6 +25,7 @@\n package org.niis.xroad.restapi.service;\n \n import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.compress.utils.IOUtils;\n import org.springframework.stereotype.Component;\n import org.springframework.util.StringUtils;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzczNzMxNQ==", "url": "https://github.com/nordic-institute/X-Road/pull/344#discussion_r377737315", "bodyText": "Maybe consider using this https://docs.oracle.com/javase/8/docs/api/java/lang/Process.html#waitFor-long-java.util.concurrent.TimeUnit- ?\nIf for some reason the command / script hangs (say, something has gone wrong so that it expects input) this would block forever.", "author": "jansu76", "createdAt": "2020-02-11T16:11:50Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ExternalProcessRunner.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+@Slf4j\n+@Component\n+public class ExternalProcessRunner {\n+    /**\n+     * Executes the given command with given arguments.\n+     * @param command the command to execute\n+     * @param args arguments to be appended to the command. Make sure to pass your arguments in the correct order\n+     * (e.g. if your options have values enter them as separate consecutive args).\n+     * @return the output of the executed process as a List of Strings\n+     * @throws ProcessNotExecutableException in the case of IOException or if the process is interrupted\n+     * @throws ProcessFailedException if the process' exit code is not 0\n+     */\n+    public List<String> execute(String command, String... args) throws ProcessNotExecutableException,\n+            ProcessFailedException {\n+        if (StringUtils.isEmpty(command)) {\n+            throw new IllegalArgumentException(\"command cannot be null\");\n+        }\n+\n+        List<String> commandWithArgs = new ArrayList<>();\n+        commandWithArgs.add(command);\n+        if (args != null && args.length > 0) {\n+            commandWithArgs.addAll(Arrays.asList(args));\n+        }\n+        Process process;\n+        ProcessBuilder pb = new ProcessBuilder(commandWithArgs);\n+        // redirect process errors into process's input stream\n+        pb.redirectErrorStream(true);\n+        try {\n+            process = pb.start();\n+        } catch (IOException e) {\n+            throw new ProcessNotExecutableException(e);\n+        }\n+\n+        // gather output into a list of string for returning\n+        List<String> processOutput = new ArrayList<>();\n+        try (BufferedReader br = new BufferedReader(new InputStreamReader(process.getInputStream()))) {\n+            br.lines().forEach(processOutput::add);\n+        } catch (IOException e) {\n+            process.destroy();\n+            throw new ProcessNotExecutableException(e);\n+        }\n+\n+        int exitCode;\n+\n+        try {\n+            exitCode = process.waitFor();", "originalCommit": "5667022c33427c1d268827c4ac57ebf89ddc630a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE3ODIxMg==", "url": "https://github.com/nordic-institute/X-Road/pull/344#discussion_r378178212", "bodyText": "Good thinking! Added 60s timeout here", "author": "carohauta", "createdAt": "2020-02-12T10:56:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzczNzMxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "283280cb4e60edae7fab0916d0005b8d31fc2237", "chunk": "diff --git a/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ExternalProcessRunner.java b/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ExternalProcessRunner.java\nindex 111cd63bd..1eea408ff 100644\n--- a/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ExternalProcessRunner.java\n+++ b/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ExternalProcessRunner.java\n\n@@ -25,6 +25,7 @@\n package org.niis.xroad.restapi.service;\n \n import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.compress.utils.IOUtils;\n import org.springframework.stereotype.Component;\n import org.springframework.util.StringUtils;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc1OTQ4NA==", "url": "https://github.com/nordic-institute/X-Road/pull/344#discussion_r377759484", "bodyText": "So the try-with-resources will guarantee that process.inputStream gets closed, and is closed before this line (or line 80 if no exceptions)...right?\nI believe this is good. It is probably not necessary, but it seems nothing in the javadocs guarantees that the streams will be closed otherwise, and there were some sources that suggest closing.\nIt is probably not necessary = looking at UNIXProcess.destroy() there's code that probably takes care of closing the streams. But again, I see no official guarantee and who knows what UnknownOSProcess.destroy() we could be using some day. Actually UNIXProcess.destroy will maybe try to close an already closed stream, but that is usually not a problem. Ugh, too much vagueness for my liking but what can you do.\nNow I am thinking if we should also close errorStream and outputStream the same way, as suggested by this https://stackoverflow.com/a/7100172/1469083? It is most likely not needed, but doing it in a fail safe way (IOUtils.closeQuietly maybe?) after destroy() should not hurt either...\nSources talking about closing:\n\nhttps://stackoverflow.com/a/7102717/1469083 (and it's comments, about destroy())\nhttps://stackoverflow.com/a/7100172/1469083 and other answers to the question", "author": "jansu76", "createdAt": "2020-02-11T16:45:59Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ExternalProcessRunner.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+@Slf4j\n+@Component\n+public class ExternalProcessRunner {\n+    /**\n+     * Executes the given command with given arguments.\n+     * @param command the command to execute\n+     * @param args arguments to be appended to the command. Make sure to pass your arguments in the correct order\n+     * (e.g. if your options have values enter them as separate consecutive args).\n+     * @return the output of the executed process as a List of Strings\n+     * @throws ProcessNotExecutableException in the case of IOException or if the process is interrupted\n+     * @throws ProcessFailedException if the process' exit code is not 0\n+     */\n+    public List<String> execute(String command, String... args) throws ProcessNotExecutableException,\n+            ProcessFailedException {\n+        if (StringUtils.isEmpty(command)) {\n+            throw new IllegalArgumentException(\"command cannot be null\");\n+        }\n+\n+        List<String> commandWithArgs = new ArrayList<>();\n+        commandWithArgs.add(command);\n+        if (args != null && args.length > 0) {\n+            commandWithArgs.addAll(Arrays.asList(args));\n+        }\n+        Process process;\n+        ProcessBuilder pb = new ProcessBuilder(commandWithArgs);\n+        // redirect process errors into process's input stream\n+        pb.redirectErrorStream(true);\n+        try {\n+            process = pb.start();\n+        } catch (IOException e) {\n+            throw new ProcessNotExecutableException(e);\n+        }\n+\n+        // gather output into a list of string for returning\n+        List<String> processOutput = new ArrayList<>();\n+        try (BufferedReader br = new BufferedReader(new InputStreamReader(process.getInputStream()))) {\n+            br.lines().forEach(processOutput::add);\n+        } catch (IOException e) {", "originalCommit": "5667022c33427c1d268827c4ac57ebf89ddc630a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE0MDY4Mw==", "url": "https://github.com/nordic-institute/X-Road/pull/344#discussion_r378140683", "bodyText": "Yes the try-with-resources makes sure that all the newly instantiated Readers and the underlying input stream are closed no matter what. It does look like the UNIXProcess.destroy() already takes care of closing all the streams. But as you said quietly closing them again does not hurt and 100% takes care of this.\nBut to be honest if someone in the future decides to use some custom Process implementation with a bad custom api that does not follow best practices (such as closing streams or doing something else nasty) I don't think we can be prepared to that.", "author": "carohauta", "createdAt": "2020-02-12T09:48:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc1OTQ4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE1MTk5OA==", "url": "https://github.com/nordic-institute/X-Road/pull/344#discussion_r378151998", "bodyText": "Yeah. Also on the whole this whole issue of closing streams is probably close to being over-pedantic. I just had already fallen into the rabbit hole of reading UNIXProcess sources and whatnot and figured, why not make it \"bulletproof\" vs public API definitions if it is not too difficult to do (plus, wanted to share and validate that I had understood the mechanisms correctly)", "author": "jansu76", "createdAt": "2020-02-12T10:08:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc1OTQ4NA=="}], "type": "inlineReview", "revised_code": {"commit": "283280cb4e60edae7fab0916d0005b8d31fc2237", "chunk": "diff --git a/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ExternalProcessRunner.java b/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ExternalProcessRunner.java\nindex 111cd63bd..1eea408ff 100644\n--- a/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ExternalProcessRunner.java\n+++ b/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ExternalProcessRunner.java\n\n@@ -25,6 +25,7 @@\n package org.niis.xroad.restapi.service;\n \n import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.compress.utils.IOUtils;\n import org.springframework.stereotype.Component;\n import org.springframework.util.StringUtils;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc3OTgxOQ==", "url": "https://github.com/nordic-institute/X-Road/pull/344#discussion_r377779819", "bodyText": "Good that there's the Thread.currentThread().interrupt(); which is important.\nI am a bit unsure about wrapping it in ProcessNotExecutableException though. Would just throwing InterruptedException from the methods be better? InterruptedException has a special meaning and wrapping it in ProcessNotExecutableException kind of hides this info from the callers. Declaring InterruptedException would probably be more \"standard\" / idiomatic way of handling this.\nFor example https://stackoverflow.com/questions/3976344/handling-interruptedexception-in-java has lots of discussion which I kind of interpret advocating throwing InterruptedException unless there's special reason not to.\nWe would have to map InterruptedException -> InternalServerErrorException in the controller anyways, so the change would mostly affect the intermediate layers.", "author": "jansu76", "createdAt": "2020-02-11T17:18:42Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ExternalProcessRunner.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+@Slf4j\n+@Component\n+public class ExternalProcessRunner {\n+    /**\n+     * Executes the given command with given arguments.\n+     * @param command the command to execute\n+     * @param args arguments to be appended to the command. Make sure to pass your arguments in the correct order\n+     * (e.g. if your options have values enter them as separate consecutive args).\n+     * @return the output of the executed process as a List of Strings\n+     * @throws ProcessNotExecutableException in the case of IOException or if the process is interrupted\n+     * @throws ProcessFailedException if the process' exit code is not 0\n+     */\n+    public List<String> execute(String command, String... args) throws ProcessNotExecutableException,\n+            ProcessFailedException {\n+        if (StringUtils.isEmpty(command)) {\n+            throw new IllegalArgumentException(\"command cannot be null\");\n+        }\n+\n+        List<String> commandWithArgs = new ArrayList<>();\n+        commandWithArgs.add(command);\n+        if (args != null && args.length > 0) {\n+            commandWithArgs.addAll(Arrays.asList(args));\n+        }\n+        Process process;\n+        ProcessBuilder pb = new ProcessBuilder(commandWithArgs);\n+        // redirect process errors into process's input stream\n+        pb.redirectErrorStream(true);\n+        try {\n+            process = pb.start();\n+        } catch (IOException e) {\n+            throw new ProcessNotExecutableException(e);\n+        }\n+\n+        // gather output into a list of string for returning\n+        List<String> processOutput = new ArrayList<>();\n+        try (BufferedReader br = new BufferedReader(new InputStreamReader(process.getInputStream()))) {\n+            br.lines().forEach(processOutput::add);\n+        } catch (IOException e) {\n+            process.destroy();\n+            throw new ProcessNotExecutableException(e);\n+        }\n+\n+        int exitCode;\n+\n+        try {\n+            exitCode = process.waitFor();\n+        } catch (InterruptedException e) {\n+            // we don't want to throw the InterruptedException from here but we want to retain the interrupted status", "originalCommit": "5667022c33427c1d268827c4ac57ebf89ddc630a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE4Mjg2Ng==", "url": "https://github.com/nordic-institute/X-Road/pull/344#discussion_r378182866", "bodyText": "Changed this so that the InterruptedException is propagated after Thread.currentThread().interrupt();. I also discussed this with @jhyoty and we concluded that ProcessNotExecutableException would be incorrect information to the end user because even though the executing thread itself is interrupted the process might be able to complete.\nThe controller layer now converts the exception to InternalServerErrorException and a proper code in the error response is attached (at the moment either internal_key_cert_interrupted in SystemApiController or wsdl_validator_interrupted when WSDL validation fails).", "author": "carohauta", "createdAt": "2020-02-12T11:05:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc3OTgxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "283280cb4e60edae7fab0916d0005b8d31fc2237", "chunk": "diff --git a/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ExternalProcessRunner.java b/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ExternalProcessRunner.java\nindex 111cd63bd..1eea408ff 100644\n--- a/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ExternalProcessRunner.java\n+++ b/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ExternalProcessRunner.java\n\n@@ -25,6 +25,7 @@\n package org.niis.xroad.restapi.service;\n \n import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.compress.utils.IOUtils;\n import org.springframework.stereotype.Component;\n import org.springframework.util.StringUtils;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc4NTk2NQ==", "url": "https://github.com/nordic-institute/X-Road/pull/344#discussion_r377785965", "bodyText": "This stores process output in the ErrorDeviation metadata. I would like to remove that as well - it is in a sense misuse of the metadata. Maybe just add some sort of separate container property in ProcessFailedException (which may be more clear option anyways)?\nThe metadata is removed in an upper layer yes, but it is still a bit problematic when new clients that use ExternalProcessRunner are added.\nWe have DeviationAwareException constructors that take a DeviationAware object as a parameter and copy ErrorDeviation and metadata from there - it feels likely that the process output could start to leak to the API response by mistake. I may have written a better and longer explanation here #344 (comment)", "author": "jansu76", "createdAt": "2020-02-11T17:29:15Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ExternalProcessRunner.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+@Slf4j\n+@Component\n+public class ExternalProcessRunner {\n+    /**\n+     * Executes the given command with given arguments.\n+     * @param command the command to execute\n+     * @param args arguments to be appended to the command. Make sure to pass your arguments in the correct order\n+     * (e.g. if your options have values enter them as separate consecutive args).\n+     * @return the output of the executed process as a List of Strings\n+     * @throws ProcessNotExecutableException in the case of IOException or if the process is interrupted\n+     * @throws ProcessFailedException if the process' exit code is not 0\n+     */\n+    public List<String> execute(String command, String... args) throws ProcessNotExecutableException,\n+            ProcessFailedException {\n+        if (StringUtils.isEmpty(command)) {\n+            throw new IllegalArgumentException(\"command cannot be null\");\n+        }\n+\n+        List<String> commandWithArgs = new ArrayList<>();\n+        commandWithArgs.add(command);\n+        if (args != null && args.length > 0) {\n+            commandWithArgs.addAll(Arrays.asList(args));\n+        }\n+        Process process;\n+        ProcessBuilder pb = new ProcessBuilder(commandWithArgs);\n+        // redirect process errors into process's input stream\n+        pb.redirectErrorStream(true);\n+        try {\n+            process = pb.start();\n+        } catch (IOException e) {\n+            throw new ProcessNotExecutableException(e);\n+        }\n+\n+        // gather output into a list of string for returning\n+        List<String> processOutput = new ArrayList<>();\n+        try (BufferedReader br = new BufferedReader(new InputStreamReader(process.getInputStream()))) {\n+            br.lines().forEach(processOutput::add);\n+        } catch (IOException e) {\n+            process.destroy();\n+            throw new ProcessNotExecutableException(e);\n+        }\n+\n+        int exitCode;\n+\n+        try {\n+            exitCode = process.waitFor();\n+        } catch (InterruptedException e) {\n+            // we don't want to throw the InterruptedException from here but we want to retain the interrupted status\n+            Thread.currentThread().interrupt();\n+            throw new ProcessNotExecutableException(e);\n+        } finally {\n+            // always destroy the process\n+            process.destroy();\n+        }\n+\n+        // if the process fails we attach the output into the exception\n+        if (exitCode != 0) {\n+            String fullCommandString = String.join(\" \", commandWithArgs);\n+            String processOutputString = String.join(\"\\n\", processOutput);\n+            String errorMsg = String.format(\"Failed to run command '%s' with output: \\n %s\", fullCommandString,\n+                    processOutputString);\n+            throw new ProcessFailedException(errorMsg, processOutput);", "originalCommit": "5667022c33427c1d268827c4ac57ebf89ddc630a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODE0NDExOQ==", "url": "https://github.com/nordic-institute/X-Road/pull/344#discussion_r378144119", "bodyText": "Yes it was not supposed to even be there because the process output is already stringified to the error message. Will be removed.", "author": "carohauta", "createdAt": "2020-02-12T09:54:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc4NTk2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "283280cb4e60edae7fab0916d0005b8d31fc2237", "chunk": "diff --git a/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ExternalProcessRunner.java b/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ExternalProcessRunner.java\nindex 111cd63bd..1eea408ff 100644\n--- a/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ExternalProcessRunner.java\n+++ b/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ExternalProcessRunner.java\n\n@@ -25,6 +25,7 @@\n package org.niis.xroad.restapi.service;\n \n import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.compress.utils.IOUtils;\n import org.springframework.stereotype.Component;\n import org.springframework.util.StringUtils;\n \n"}}, {"oid": "283280cb4e60edae7fab0916d0005b8d31fc2237", "url": "https://github.com/nordic-institute/X-Road/commit/283280cb4e60edae7fab0916d0005b8d31fc2237", "message": "XRDDEV-837 Generate internal TLS key and cert // PR fix 2\n\n* added external process timeout, confirm stream closings, propagate InterruptedException\n* fix tests", "committedDate": "2020-02-12T10:53:31Z", "type": "commit"}, {"oid": "8f4f48f025f0ef37f8398c0bcd69b4d7e59bd467", "url": "https://github.com/nordic-institute/X-Road/commit/8f4f48f025f0ef37f8398c0bcd69b4d7e59bd467", "message": "XRDDEV-837 Generate internal TLS key and cert // close additional stream", "committedDate": "2020-02-12T11:17:48Z", "type": "commit"}, {"oid": "ce2fabf67f2ef191338f9cfb9c93ec96bae008e3", "url": "https://github.com/nordic-institute/X-Road/commit/ce2fabf67f2ef191338f9cfb9c93ec96bae008e3", "message": "Merge branch 'develop' into XRDDEV-837-generate-internal-tls-key-cert", "committedDate": "2020-02-12T13:37:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI2MTE1OA==", "url": "https://github.com/nordic-institute/X-Road/pull/344#discussion_r378261158", "bodyText": "the comment \"we dont want...\" seems outdated", "author": "jansu76", "createdAt": "2020-02-12T13:50:24Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ExternalProcessRunner.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * The MIT License\n+ * Copyright (c) 2018 Estonian Information System Authority (RIA),\n+ * Nordic Institute for Interoperability Solutions (NIIS), Population Register Centre (VRK)\n+ * Copyright (c) 2015-2017 Estonian Information System Authority (RIA), Population Register Centre (VRK)\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.niis.xroad.restapi.service;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.compress.utils.IOUtils;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+@Slf4j\n+@Component\n+public class ExternalProcessRunner {\n+    private static final long TIMEOUT = 60000;\n+\n+    /**\n+     * Executes the given command with given arguments.\n+     * @param command the command to execute\n+     * @param args arguments to be appended to the command. Make sure to pass your arguments in the correct order\n+     * (e.g. if your options have values enter them as separate consecutive args).\n+     * @return the output of the executed process as a List of Strings\n+     * @throws ProcessNotExecutableException in the case of IOException or if the process is interrupted\n+     * @throws ProcessFailedException if the process' exit code is not 0\n+     */\n+    public List<String> execute(String command, String... args) throws ProcessNotExecutableException,\n+            ProcessFailedException, InterruptedException {\n+        if (StringUtils.isEmpty(command)) {\n+            throw new IllegalArgumentException(\"command cannot be null\");\n+        }\n+\n+        List<String> commandWithArgs = new ArrayList<>();\n+        commandWithArgs.add(command);\n+        if (args != null && args.length > 0) {\n+            commandWithArgs.addAll(Arrays.asList(args));\n+        }\n+        Process process;\n+        ProcessBuilder pb = new ProcessBuilder(commandWithArgs);\n+        // redirect process errors into process's input stream\n+        pb.redirectErrorStream(true);\n+        try {\n+            process = pb.start();\n+        } catch (IOException e) {\n+            throw new ProcessNotExecutableException(e);\n+        }\n+\n+        // gather output into a list of string for returning\n+        List<String> processOutput = new ArrayList<>();\n+        try (BufferedReader br = new BufferedReader(new InputStreamReader(process.getInputStream()))) {\n+            br.lines().forEach(processOutput::add);\n+        } catch (IOException e) {\n+            process.destroy();\n+            IOUtils.closeQuietly(process.getErrorStream());\n+            IOUtils.closeQuietly(process.getOutputStream());\n+            throw new ProcessNotExecutableException(e);\n+        }\n+\n+        int exitCode;\n+\n+        try {\n+            boolean hasExited = process.waitFor(TIMEOUT, TimeUnit.MILLISECONDS);\n+            // exit value cannot be asked if the process is still running after timeout - instead throw and destroy\n+            if (!hasExited) {\n+                throw new ProcessFailedException(\"Process timed out\");\n+            }\n+            exitCode = process.exitValue();\n+        } catch (InterruptedException e) {", "originalCommit": "ce2fabf67f2ef191338f9cfb9c93ec96bae008e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI3MTQxOA==", "url": "https://github.com/nordic-institute/X-Road/pull/344#discussion_r378271418", "bodyText": "Comment updated", "author": "carohauta", "createdAt": "2020-02-12T14:08:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI2MTE1OA=="}], "type": "inlineReview", "revised_code": {"commit": "d2142de3e913f4ee0949fc6cdb7534a6af7bb75d", "chunk": "diff --git a/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ExternalProcessRunner.java b/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ExternalProcessRunner.java\nindex f9df0a4b4..0798b1478 100644\n--- a/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ExternalProcessRunner.java\n+++ b/src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ExternalProcessRunner.java\n\n@@ -50,6 +50,7 @@ public class ExternalProcessRunner {\n      * @return the output of the executed process as a List of Strings\n      * @throws ProcessNotExecutableException in the case of IOException or if the process is interrupted\n      * @throws ProcessFailedException if the process' exit code is not 0\n+     * @throws InterruptedException if the process running thread is interrupted\n      */\n     public List<String> execute(String command, String... args) throws ProcessNotExecutableException,\n             ProcessFailedException, InterruptedException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI2NDM0OA==", "url": "https://github.com/nordic-institute/X-Road/pull/344#discussion_r378264348", "bodyText": "Would it be good to add javadoc @throws documentation explaining where these InterruptedExceptions can originate from? At least to the public main-level service methods (addWsdlServiceDescription, updateWsdlUrl)?", "author": "jansu76", "createdAt": "2020-02-12T13:55:47Z", "path": "src/proxy-ui-api/src/main/java/org/niis/xroad/restapi/service/ServiceDescriptionService.java", "diffHunk": "@@ -225,7 +225,7 @@ public ServiceDescriptionType addWsdlServiceDescription(ClientId clientId, Strin\n             UnhandledWarningsException,\n             ServiceAlreadyExistsException,\n             InvalidUrlException,\n-            WsdlUrlAlreadyExistsException {\n+            WsdlUrlAlreadyExistsException, InterruptedException {", "originalCommit": "ce2fabf67f2ef191338f9cfb9c93ec96bae008e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI3MTgyNg==", "url": "https://github.com/nordic-institute/X-Road/pull/344#discussion_r378271826", "bodyText": "Fixed a few javadocs", "author": "carohauta", "createdAt": "2020-02-12T14:08:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI2NDM0OA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "d2142de3e913f4ee0949fc6cdb7534a6af7bb75d", "url": "https://github.com/nordic-institute/X-Road/commit/d2142de3e913f4ee0949fc6cdb7534a6af7bb75d", "message": "XRDDEV-837 Generate internal TLS key and cert // PR fix 3\n\n* javadocs and comment fixed", "committedDate": "2020-02-12T14:07:42Z", "type": "commit"}]}