{"pr_number": 8921, "pr_title": "ISPN-12469 Don't cache isTraceEnabled/isDebugEnabled calls", "pr_createdAt": "2020-12-07T18:35:43Z", "pr_url": "https://github.com/infinispan/infinispan/pull/8921", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTExODQyMA==", "url": "https://github.com/infinispan/infinispan/pull/8921#discussion_r539118420", "bodyText": "We should remove the method in AbstractTransactionTable", "author": "danberindei", "createdAt": "2020-12-09T08:51:22Z", "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/transaction/XaModeTransactionTable.java", "diffHunk": "@@ -68,7 +67,7 @@ Log getLog() {\n \n    @Override\n    boolean isTraceLogEnabled() {\n-      return trace;\n+      return log.isTraceEnabled();", "originalCommit": "0ae34d35e1367d48a1be65c6311540cac649e8fb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94aa39859bfde0aa2c4eb8e7fc4c437d3e90140d", "chunk": "diff --git a/client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/transaction/XaModeTransactionTable.java b/client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/transaction/XaModeTransactionTable.java\nindex 9af5844ba5..be768ee57f 100644\n--- a/client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/transaction/XaModeTransactionTable.java\n+++ b/client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/transaction/XaModeTransactionTable.java\n\n@@ -67,7 +68,7 @@ Log getLog() {\n \n    @Override\n    boolean isTraceLogEnabled() {\n-      return log.isTraceEnabled();\n+      return trace;\n    }\n \n    private XaAdapter createTransactionData(Transaction transaction) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI4MjUzNg==", "url": "https://github.com/infinispan/infinispan/pull/8921#discussion_r539282536", "bodyText": "We should remove isTraceEnabled() and getLog()", "author": "danberindei", "createdAt": "2020-12-09T12:54:40Z", "path": "server/hotrod/src/main/java/org/infinispan/server/hotrod/tx/operation/RollbackTransactionOperation.java", "diffHunk": "@@ -162,7 +161,7 @@ Log log() {\n \n    @Override\n    boolean isTraceEnabled() {\n-      return trace;\n+      return log.isTraceEnabled();", "originalCommit": "0ae34d35e1367d48a1be65c6311540cac649e8fb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94aa39859bfde0aa2c4eb8e7fc4c437d3e90140d", "chunk": "diff --git a/server/hotrod/src/main/java/org/infinispan/server/hotrod/tx/operation/RollbackTransactionOperation.java b/server/hotrod/src/main/java/org/infinispan/server/hotrod/tx/operation/RollbackTransactionOperation.java\nindex 1e6a19e961..4b413b47a6 100644\n--- a/server/hotrod/src/main/java/org/infinispan/server/hotrod/tx/operation/RollbackTransactionOperation.java\n+++ b/server/hotrod/src/main/java/org/infinispan/server/hotrod/tx/operation/RollbackTransactionOperation.java\n\n@@ -161,7 +162,7 @@ Log log() {\n \n    @Override\n    boolean isTraceEnabled() {\n-      return log.isTraceEnabled();\n+      return trace;\n    }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI4NTg3OQ==", "url": "https://github.com/infinispan/infinispan/pull/8921#discussion_r539285879", "bodyText": "We should remove the if (trace) checks from tests IMO", "author": "danberindei", "createdAt": "2020-12-09T12:59:37Z", "path": "hibernate/cache-commons/src/test/java/org/infinispan/test/hibernate/cache/commons/functional/ConcurrentWriteTest.java", "diffHunk": "@@ -349,36 +348,36 @@ public Void call() throws Exception {\n \t\t\ttry {\n \t\t\t\tfor ( int i = 0; i < ITERATION_COUNT && !TERMINATE_ALL_USERS; i++ ) {\n \t\t\t\t\tcontactExists();\n-\t\t\t\t\tif ( trace ) {\n+\t\t\t\t\tif ( log.isTraceEnabled() ) {", "originalCommit": "0ae34d35e1367d48a1be65c6311540cac649e8fb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94aa39859bfde0aa2c4eb8e7fc4c437d3e90140d", "chunk": "diff --git a/hibernate/cache-commons/src/test/java/org/infinispan/test/hibernate/cache/commons/functional/ConcurrentWriteTest.java b/hibernate/cache-commons/src/test/java/org/infinispan/test/hibernate/cache/commons/functional/ConcurrentWriteTest.java\nindex 6888da5692..70b2e7dadf 100644\n--- a/hibernate/cache-commons/src/test/java/org/infinispan/test/hibernate/cache/commons/functional/ConcurrentWriteTest.java\n+++ b/hibernate/cache-commons/src/test/java/org/infinispan/test/hibernate/cache/commons/functional/ConcurrentWriteTest.java\n\n@@ -348,36 +349,36 @@ public Void call() throws Exception {\n \t\t\ttry {\n \t\t\t\tfor ( int i = 0; i < ITERATION_COUNT && !TERMINATE_ALL_USERS; i++ ) {\n \t\t\t\t\tcontactExists();\n-\t\t\t\t\tif ( log.isTraceEnabled() ) {\n+\t\t\t\t\tif ( trace ) {\n \t\t\t\t\t\tlog.trace( \"Add contact for customer \" + customerId );\n \t\t\t\t\t}\n \t\t\t\t\taddContact( customerId );\n-\t\t\t\t\tif ( log.isTraceEnabled() ) {\n+\t\t\t\t\tif ( trace ) {\n \t\t\t\t\t\tlog.trace( \"Added contact\" );\n \t\t\t\t\t}\n \t\t\t\t\tthinkRandomTime();\n \t\t\t\t\tcontactExists();\n \t\t\t\t\tthinkRandomTime();\n-\t\t\t\t\tif ( log.isTraceEnabled() ) {\n+\t\t\t\t\tif ( trace ) {\n \t\t\t\t\t\tlog.trace( \"Read all customers' first contact\" );\n \t\t\t\t\t}\n \t\t\t\t\t// read everyone's contacts\n \t\t\t\t\treadEveryonesFirstContact();\n-\t\t\t\t\tif ( log.isTraceEnabled() ) {\n+\t\t\t\t\tif ( trace ) {\n \t\t\t\t\t\tlog.trace( \"Read completed\" );\n \t\t\t\t\t}\n \t\t\t\t\tthinkRandomTime();\n-\t\t\t\t\tif ( log.isTraceEnabled() ) {\n+\t\t\t\t\tif ( trace ) {\n \t\t\t\t\t\tlog.trace( \"Remove contact of customer\" + customerId );\n \t\t\t\t\t}\n \t\t\t\t\tremoveContact( customerId );\n-\t\t\t\t\tif ( log.isTraceEnabled() ) {\n+\t\t\t\t\tif ( trace ) {\n \t\t\t\t\t\tlog.trace( \"Removed contact\" );\n \t\t\t\t\t}\n \t\t\t\t\tcontactExists();\n \t\t\t\t\tthinkRandomTime();\n \t\t\t\t\t++completedIterations;\n-\t\t\t\t\tif ( log.isTraceEnabled() ) {\n+\t\t\t\t\tif ( trace ) {\n \t\t\t\t\t\tlog.tracef( \"Iteration completed %d\", completedIterations );\n \t\t\t\t\t}\n \t\t\t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI5MDYzNw==", "url": "https://github.com/infinispan/infinispan/pull/8921#discussion_r539290637", "bodyText": "I don't think if (log.isDebugEnabled()) is justified, there are just too few invocations.", "author": "danberindei", "createdAt": "2020-12-09T13:06:52Z", "path": "core/src/main/java/org/infinispan/xsite/statetransfer/XSiteStateConsumerImpl.java", "diffHunk": "@@ -54,7 +52,7 @@\n \n    @Override\n    public void startStateTransfer(String sendingSite) {\n-      if (debug) {\n+      if (log.isDebugEnabled()) {", "originalCommit": "0ae34d35e1367d48a1be65c6311540cac649e8fb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94aa39859bfde0aa2c4eb8e7fc4c437d3e90140d", "chunk": "diff --git a/core/src/main/java/org/infinispan/xsite/statetransfer/XSiteStateConsumerImpl.java b/core/src/main/java/org/infinispan/xsite/statetransfer/XSiteStateConsumerImpl.java\nindex 073e0351f1..007615917e 100644\n--- a/core/src/main/java/org/infinispan/xsite/statetransfer/XSiteStateConsumerImpl.java\n+++ b/core/src/main/java/org/infinispan/xsite/statetransfer/XSiteStateConsumerImpl.java\n\n@@ -52,7 +54,7 @@\n \n    @Override\n    public void startStateTransfer(String sendingSite) {\n-      if (log.isDebugEnabled()) {\n+      if (debug) {\n          log.debugf(\"Starting state transfer. Receiving from %s\", sendingSite);\n       }\n       if (this.sendingSite.compareAndSet(null, sendingSite)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI5MTc3MQ==", "url": "https://github.com/infinispan/infinispan/pull/8921#discussion_r539291771", "bodyText": "This is wrong IMO. We shouldn't log individual chunks at DEBUG level because the number of chunks depends on the number of entries (and the chunk size).", "author": "danberindei", "createdAt": "2020-12-09T13:08:40Z", "path": "core/src/main/java/org/infinispan/xsite/statetransfer/XSiteStateProviderImpl.java", "diffHunk": "@@ -163,10 +161,10 @@ private void sendFromSharedBuffer(XSiteBackup xSiteBackup, List<XSiteState> shar\n       }\n       XSiteState[] privateBuffer = sharedBuffer.toArray(new XSiteState[0]);\n \n-      if (trace) {\n+      if (log.isTraceEnabled()) {\n          log.debugf(\"Sending chunk to site '%s'. Chunk contains %s\", xSiteBackup.getSiteName(),\n                     Arrays.toString(privateBuffer));\n-      } else if (debug) {\n+      } else if (log.isDebugEnabled()) {", "originalCommit": "0ae34d35e1367d48a1be65c6311540cac649e8fb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94aa39859bfde0aa2c4eb8e7fc4c437d3e90140d", "chunk": "diff --git a/core/src/main/java/org/infinispan/xsite/statetransfer/XSiteStateProviderImpl.java b/core/src/main/java/org/infinispan/xsite/statetransfer/XSiteStateProviderImpl.java\nindex 28452a3fb7..f4db18a57c 100644\n--- a/core/src/main/java/org/infinispan/xsite/statetransfer/XSiteStateProviderImpl.java\n+++ b/core/src/main/java/org/infinispan/xsite/statetransfer/XSiteStateProviderImpl.java\n\n@@ -161,10 +163,10 @@ private void sendFromSharedBuffer(XSiteBackup xSiteBackup, List<XSiteState> shar\n       }\n       XSiteState[] privateBuffer = sharedBuffer.toArray(new XSiteState[0]);\n \n-      if (log.isTraceEnabled()) {\n+      if (trace) {\n          log.debugf(\"Sending chunk to site '%s'. Chunk contains %s\", xSiteBackup.getSiteName(),\n                     Arrays.toString(privateBuffer));\n-      } else if (log.isDebugEnabled()) {\n+      } else if (debug) {\n          log.debugf(\"Sending chunk to site '%s'. Chunk has %s keys.\", xSiteBackup.getSiteName(), privateBuffer.length);\n       }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI5MjQ5Mw==", "url": "https://github.com/infinispan/infinispan/pull/8921#discussion_r539292493", "bodyText": "Again, no if needed for debug logs.", "author": "danberindei", "createdAt": "2020-12-09T13:09:44Z", "path": "core/src/main/java/org/infinispan/xsite/statetransfer/XSiteStateTransferManagerImpl.java", "diffHunk": "@@ -142,7 +140,7 @@ public final void startPushState(String siteName) throws Throwable {\n             CacheRpcCommand command = commandsFactory.buildXSiteStateTransferStartSendCommand(siteName, currentTopologyId());\n             controlStateTransferOnLocalSite(command);\n          } else {\n-            if (debug) {\n+            if (log.isDebugEnabled()) {", "originalCommit": "0ae34d35e1367d48a1be65c6311540cac649e8fb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94aa39859bfde0aa2c4eb8e7fc4c437d3e90140d", "chunk": "diff --git a/core/src/main/java/org/infinispan/xsite/statetransfer/XSiteStateTransferManagerImpl.java b/core/src/main/java/org/infinispan/xsite/statetransfer/XSiteStateTransferManagerImpl.java\nindex 0c02744320..1d1180e010 100644\n--- a/core/src/main/java/org/infinispan/xsite/statetransfer/XSiteStateTransferManagerImpl.java\n+++ b/core/src/main/java/org/infinispan/xsite/statetransfer/XSiteStateTransferManagerImpl.java\n\n@@ -140,7 +142,7 @@ public final void startPushState(String siteName) throws Throwable {\n             CacheRpcCommand command = commandsFactory.buildXSiteStateTransferStartSendCommand(siteName, currentTopologyId());\n             controlStateTransferOnLocalSite(command);\n          } else {\n-            if (log.isDebugEnabled()) {\n+            if (debug) {\n                log.debugf(\"Not start sending keys to site '%s' while rebalance in progress. Wait until it is finished!\",\n                           siteName);\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI5Mjc1NQ==", "url": "https://github.com/infinispan/infinispan/pull/8921#discussion_r539292755", "bodyText": "Not needed for tests.", "author": "danberindei", "createdAt": "2020-12-09T13:10:11Z", "path": "core/src/test/java/org/infinispan/conflict/impl/BaseMergePolicyTest.java", "diffHunk": "@@ -122,20 +121,20 @@ protected void afterConflictResolutionAndMerge() {\n    }\n \n    public void testPartitionMergePolicy() throws Exception {\n-      if (trace) log.tracef(\"beforeSplit()\");\n+      if (log.isTraceEnabled()) log.tracef(\"beforeSplit()\");", "originalCommit": "0ae34d35e1367d48a1be65c6311540cac649e8fb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94aa39859bfde0aa2c4eb8e7fc4c437d3e90140d", "chunk": "diff --git a/core/src/test/java/org/infinispan/conflict/impl/BaseMergePolicyTest.java b/core/src/test/java/org/infinispan/conflict/impl/BaseMergePolicyTest.java\nindex 37a9302ea6..be0ade56af 100644\n--- a/core/src/test/java/org/infinispan/conflict/impl/BaseMergePolicyTest.java\n+++ b/core/src/test/java/org/infinispan/conflict/impl/BaseMergePolicyTest.java\n\n@@ -121,20 +122,20 @@ protected void afterConflictResolutionAndMerge() {\n    }\n \n    public void testPartitionMergePolicy() throws Exception {\n-      if (log.isTraceEnabled()) log.tracef(\"beforeSplit()\");\n+      if (trace) log.tracef(\"beforeSplit()\");\n       beforeSplit();\n \n-      if (log.isTraceEnabled()) log.tracef(\"splitCluster\");\n+      if (trace) log.tracef(\"splitCluster\");\n       splitCluster();\n \n-      if (log.isTraceEnabled()) log.tracef(\"duringSplit()\");\n+      if (trace) log.tracef(\"duringSplit()\");\n       AdvancedCache preferredPartitionCache = getCacheFromPreferredPartition();\n       duringSplit(preferredPartitionCache, getCacheFromNonPreferredPartition(preferredPartitionCache));\n \n-      if (log.isTraceEnabled()) log.tracef(\"performMerge()\");\n+      if (trace) log.tracef(\"performMerge()\");\n       performMerge();\n \n-      if (log.isTraceEnabled()) log.tracef(\"afterConflictResolutionAndMerge()\");\n+      if (trace) log.tracef(\"afterConflictResolutionAndMerge()\");\n       afterConflictResolutionAndMerge();\n    }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI5NTUyNw==", "url": "https://github.com/infinispan/infinispan/pull/8921#discussion_r539295527", "bodyText": ":))", "author": "danberindei", "createdAt": "2020-12-09T13:14:29Z", "path": "core/src/main/java/org/infinispan/xsite/ClusteredCacheBackupReceiver.java", "diffHunk": "@@ -95,7 +95,6 @@\n public class ClusteredCacheBackupReceiver implements BackupReceiver {\n \n    private static final Log log = LogFactory.getLog(ClusteredCacheBackupReceiver.class);\n-   private static final boolean trace = log.isDebugEnabled();", "originalCommit": "0ae34d35e1367d48a1be65c6311540cac649e8fb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94aa39859bfde0aa2c4eb8e7fc4c437d3e90140d", "chunk": "diff --git a/core/src/main/java/org/infinispan/xsite/ClusteredCacheBackupReceiver.java b/core/src/main/java/org/infinispan/xsite/ClusteredCacheBackupReceiver.java\nindex c5f446b65c..6a7cd0234c 100644\n--- a/core/src/main/java/org/infinispan/xsite/ClusteredCacheBackupReceiver.java\n+++ b/core/src/main/java/org/infinispan/xsite/ClusteredCacheBackupReceiver.java\n\n@@ -95,6 +95,7 @@\n public class ClusteredCacheBackupReceiver implements BackupReceiver {\n \n    private static final Log log = LogFactory.getLog(ClusteredCacheBackupReceiver.class);\n+   private final boolean trace = log.isDebugEnabled();\n    private static final BiFunction<Object, Throwable, Void> CHECK_EXCEPTION = (o, throwable) -> {\n       if (throwable == null || throwable instanceof DiscardUpdateException) {\n          //for optimistic transaction, signals the update was discarded\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTMwMTU5Mg==", "url": "https://github.com/infinispan/infinispan/pull/8921#discussion_r539301592", "bodyText": "We should remove isTraceEnabled() and getLog().", "author": "danberindei", "createdAt": "2020-12-09T13:23:21Z", "path": "core/src/main/java/org/infinispan/remoting/inboundhandler/TxPerCacheInboundInvocationHandler.java", "diffHunk": "@@ -99,7 +98,7 @@ protected Log getLog() {\n \n    @Override\n    protected boolean isTraceEnabled() {\n-      return trace;\n+      return log.isTraceEnabled();", "originalCommit": "0ae34d35e1367d48a1be65c6311540cac649e8fb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94aa39859bfde0aa2c4eb8e7fc4c437d3e90140d", "chunk": "diff --git a/core/src/main/java/org/infinispan/remoting/inboundhandler/TxPerCacheInboundInvocationHandler.java b/core/src/main/java/org/infinispan/remoting/inboundhandler/TxPerCacheInboundInvocationHandler.java\nindex 6e93a66a8b..ba12fc6391 100644\n--- a/core/src/main/java/org/infinispan/remoting/inboundhandler/TxPerCacheInboundInvocationHandler.java\n+++ b/core/src/main/java/org/infinispan/remoting/inboundhandler/TxPerCacheInboundInvocationHandler.java\n\n@@ -98,7 +99,7 @@ protected Log getLog() {\n \n    @Override\n    protected boolean isTraceEnabled() {\n-      return log.isTraceEnabled();\n+      return trace;\n    }\n \n    private BlockingRunnable createReadyActionRunnable(CacheRpcCommand command, Reply reply,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTMwNDEzOA==", "url": "https://github.com/infinispan/infinispan/pull/8921#discussion_r539304138", "bodyText": "IMO we should always create the AtomicInteger, and we should only check log.isTraceEnabled() in nextTraceId().", "author": "danberindei", "createdAt": "2020-12-09T13:26:52Z", "path": "core/src/main/java/org/infinispan/persistence/support/NonBlockingStoreAdapter.java", "diffHunk": "@@ -41,8 +41,7 @@\n \n public class NonBlockingStoreAdapter<K, V> implements NonBlockingStore<K, V> {\n    private static final Log log = LogFactory.getLog(MethodHandles.lookup().lookupClass());\n-   private static final boolean trace = log.isTraceEnabled();\n-   private static final AtomicInteger id = trace ? new AtomicInteger() : null;\n+   private final AtomicInteger id = log.isTraceEnabled() ? new AtomicInteger() : null;", "originalCommit": "0ae34d35e1367d48a1be65c6311540cac649e8fb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94aa39859bfde0aa2c4eb8e7fc4c437d3e90140d", "chunk": "diff --git a/core/src/main/java/org/infinispan/persistence/support/NonBlockingStoreAdapter.java b/core/src/main/java/org/infinispan/persistence/support/NonBlockingStoreAdapter.java\nindex 1e8b16b7ef..12c2da2327 100644\n--- a/core/src/main/java/org/infinispan/persistence/support/NonBlockingStoreAdapter.java\n+++ b/core/src/main/java/org/infinispan/persistence/support/NonBlockingStoreAdapter.java\n\n@@ -41,7 +41,8 @@\n \n public class NonBlockingStoreAdapter<K, V> implements NonBlockingStore<K, V> {\n    private static final Log log = LogFactory.getLog(MethodHandles.lookup().lookupClass());\n-   private final AtomicInteger id = log.isTraceEnabled() ? new AtomicInteger() : null;\n+   private final boolean trace = log.isTraceEnabled();\n+   private final AtomicInteger id = trace ? new AtomicInteger() : null;\n \n    private final Lifecycle oldStoreImpl;\n    private final Set<Characteristic> characteristics;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTMwNTEyNA==", "url": "https://github.com/infinispan/infinispan/pull/8921#discussion_r539305124", "bodyText": "We should remove isTraceEnabled() and getLog()", "author": "danberindei", "createdAt": "2020-12-09T13:28:10Z", "path": "core/src/main/java/org/infinispan/remoting/inboundhandler/NonTxPerCacheInboundInvocationHandler.java", "diffHunk": "@@ -104,7 +103,7 @@ protected Log getLog() {\n \n    @Override\n    protected boolean isTraceEnabled() {\n-      return trace;\n+      return log.isTraceEnabled();", "originalCommit": "0ae34d35e1367d48a1be65c6311540cac649e8fb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94aa39859bfde0aa2c4eb8e7fc4c437d3e90140d", "chunk": "diff --git a/core/src/main/java/org/infinispan/remoting/inboundhandler/NonTxPerCacheInboundInvocationHandler.java b/core/src/main/java/org/infinispan/remoting/inboundhandler/NonTxPerCacheInboundInvocationHandler.java\nindex 3f99aa6c76..c6f44cb448 100644\n--- a/core/src/main/java/org/infinispan/remoting/inboundhandler/NonTxPerCacheInboundInvocationHandler.java\n+++ b/core/src/main/java/org/infinispan/remoting/inboundhandler/NonTxPerCacheInboundInvocationHandler.java\n\n@@ -103,7 +104,7 @@ protected Log getLog() {\n \n    @Override\n    protected boolean isTraceEnabled() {\n-      return log.isTraceEnabled();\n+      return trace;\n    }\n \n    private ReadyAction createReadyAction(int topologyId, RemoteLockCommand command) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTMwOTAwNQ==", "url": "https://github.com/infinispan/infinispan/pull/8921#discussion_r539309005", "bodyText": "log should be private", "author": "danberindei", "createdAt": "2020-12-09T13:33:39Z", "path": "core/src/main/java/org/infinispan/interceptors/xsite/BaseBackupInterceptor.java", "diffHunk": "@@ -40,7 +40,6 @@\n    @Inject protected ClusteringDependentLogic clusteringDependentLogic;\n \n    protected static final Log log = LogFactory.getLog(BaseBackupInterceptor.class);\n-   protected static final boolean trace = log.isTraceEnabled();", "originalCommit": "0ae34d35e1367d48a1be65c6311540cac649e8fb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94aa39859bfde0aa2c4eb8e7fc4c437d3e90140d", "chunk": "diff --git a/core/src/main/java/org/infinispan/interceptors/xsite/BaseBackupInterceptor.java b/core/src/main/java/org/infinispan/interceptors/xsite/BaseBackupInterceptor.java\nindex 3b13d70165..f2e4e843b2 100644\n--- a/core/src/main/java/org/infinispan/interceptors/xsite/BaseBackupInterceptor.java\n+++ b/core/src/main/java/org/infinispan/interceptors/xsite/BaseBackupInterceptor.java\n\n@@ -38,8 +41,10 @@\n    @Inject protected TransactionTable txTable;\n    @Inject protected IracManager iracManager;\n    @Inject protected ClusteringDependentLogic clusteringDependentLogic;\n+   @Inject protected KeyPartitioner keyPartitioner;\n \n    protected static final Log log = LogFactory.getLog(BaseBackupInterceptor.class);\n+   protected final boolean trace = log.isTraceEnabled();\n    private final InvocationSuccessFunction<ClearCommand> handleClearReturn = this::handleClearReturn;\n    private final InvocationSuccessFunction<RemoveExpiredCommand> handleBackupMaxIdle = this::handleBackupMaxIdle;\n    private final InvocationSuccessAction<RemoveExpiredCommand> handleExpiredReturn = this::handleExpiredReturn;\n"}}, {"oid": "94aa39859bfde0aa2c4eb8e7fc4c437d3e90140d", "url": "https://github.com/infinispan/infinispan/commit/94aa39859bfde0aa2c4eb8e7fc4c437d3e90140d", "message": "ISPN-12469 Do not cache trace level statically", "committedDate": "2020-12-10T12:37:28Z", "type": "commit"}, {"oid": "06a656531df3eb97a63bb0e9da96723b67f551c7", "url": "https://github.com/infinispan/infinispan/commit/06a656531df3eb97a63bb0e9da96723b67f551c7", "message": "ISPN-12469 PR review fixes", "committedDate": "2020-12-10T12:40:29Z", "type": "forcePushed"}, {"oid": "ca7510501ba71697d3b33cfd4baadec68946c0a1", "url": "https://github.com/infinispan/infinispan/commit/ca7510501ba71697d3b33cfd4baadec68946c0a1", "message": "ISPN-12469 Don't cache isTraceEnabled/isDebugEnabled calls", "committedDate": "2020-12-10T12:46:09Z", "type": "commit"}, {"oid": "ca7510501ba71697d3b33cfd4baadec68946c0a1", "url": "https://github.com/infinispan/infinispan/commit/ca7510501ba71697d3b33cfd4baadec68946c0a1", "message": "ISPN-12469 Don't cache isTraceEnabled/isDebugEnabled calls", "committedDate": "2020-12-10T12:46:09Z", "type": "forcePushed"}]}