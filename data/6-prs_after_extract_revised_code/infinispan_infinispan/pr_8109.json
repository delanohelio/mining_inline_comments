{"pr_number": 8109, "pr_title": "StatefulSet Integration Test", "pr_createdAt": "2020-03-26T11:42:45Z", "pr_url": "https://github.com/infinispan/infinispan/pull/8109", "timeline": [{"oid": "b9a6ebed901a012d2b4b80a72e1f55de0c8a36a6", "url": "https://github.com/infinispan/infinispan/commit/b9a6ebed901a012d2b4b80a72e1f55de0c8a36a6", "message": "ISPN-11537 Always launch the server process in the background", "committedDate": "2020-03-26T13:47:59Z", "type": "forcePushed"}, {"oid": "701fd98de5922ef366708633ca33f8356fcc98d7", "url": "https://github.com/infinispan/infinispan/commit/701fd98de5922ef366708633ca33f8356fcc98d7", "message": "ISPN-11537 Always launch the server process in the background", "committedDate": "2020-03-26T14:01:35Z", "type": "forcePushed"}, {"oid": "5a1683fc8d52acc3a219c114b7ed912368881ff8", "url": "https://github.com/infinispan/infinispan/commit/5a1683fc8d52acc3a219c114b7ed912368881ff8", "message": "ISPN-11537 Always launch the server process in the background", "committedDate": "2020-03-26T14:03:16Z", "type": "forcePushed"}, {"oid": "2b28d8e807f57d944333f1534f8bb4211004c863", "url": "https://github.com/infinispan/infinispan/commit/2b28d8e807f57d944333f1534f8bb4211004c863", "message": "ISPN-11537 Always launch the server process in the background", "committedDate": "2020-03-26T16:26:49Z", "type": "forcePushed"}, {"oid": "6e616bc45c6943a9ff91d503bf62c304ea2d40cc", "url": "https://github.com/infinispan/infinispan/commit/6e616bc45c6943a9ff91d503bf62c304ea2d40cc", "message": "ISPN-11538 Always launch the server process in the background", "committedDate": "2020-03-26T17:25:49Z", "type": "forcePushed"}, {"oid": "462d8c4f3098fff18ede53198e77f4ef23ede29f", "url": "https://github.com/infinispan/infinispan/commit/462d8c4f3098fff18ede53198e77f4ef23ede29f", "message": "ISPN-11538 Always launch the server process in the background", "committedDate": "2020-03-27T09:33:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQzNzU5Mg==", "url": "https://github.com/infinispan/infinispan/pull/8109#discussion_r399437592", "bodyText": "we want this ?", "author": "karesti", "createdAt": "2020-03-27T17:45:14Z", "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/ContainerInfinispanServerDriver.java", "diffHunk": "@@ -318,6 +329,16 @@ public void kill(int server) {\n       Exceptions.unchecked(() -> containers.get(server).execInContainer(INFINISPAN_SERVER_HOME + \"/bin/kill.sh\"));\n    }\n \n+   // TODO should this just replace stop?\n+   public void sigterm(int server) {\n+      GenericContainer container = containers.get(server);\n+      CountdownLatchLoggingConsumer latch = new CountdownLatchLoggingConsumer(1, SHUTDOWN_MESSAGE_REGEX);\n+      container.withLogConsumer(latch);\n+      Container.ExecResult result = Exceptions.unchecked(() -> container.execInContainer(INFINISPAN_SERVER_HOME + \"/bin/term.sh\"));\n+      System.out.printf(\"[%d] TERM %s\\n\", server, result);", "originalCommit": "d6bfc402b475da30df73a2b700bf4573f9123545", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUxNjExOQ==", "url": "https://github.com/infinispan/infinispan/pull/8109#discussion_r399516119", "bodyText": "It's what we do in the pause and resume methods. Adding a log statement doesn't result in any output in the test logs for some reason.", "author": "ryanemerson", "createdAt": "2020-03-27T20:16:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQzNzU5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e7cc3e0302d28baddb17dc4f3e61b4c1c027ecaf", "chunk": "diff --git a/server/testdriver/core/src/main/java/org/infinispan/server/test/core/ContainerInfinispanServerDriver.java b/server/testdriver/core/src/main/java/org/infinispan/server/test/core/ContainerInfinispanServerDriver.java\nindex 99d0eacd4e..4bcdd8ebf4 100644\n--- a/server/testdriver/core/src/main/java/org/infinispan/server/test/core/ContainerInfinispanServerDriver.java\n+++ b/server/testdriver/core/src/main/java/org/infinispan/server/test/core/ContainerInfinispanServerDriver.java\n\n@@ -329,16 +318,6 @@ public void kill(int server) {\n       Exceptions.unchecked(() -> containers.get(server).execInContainer(INFINISPAN_SERVER_HOME + \"/bin/kill.sh\"));\n    }\n \n-   // TODO should this just replace stop?\n-   public void sigterm(int server) {\n-      GenericContainer container = containers.get(server);\n-      CountdownLatchLoggingConsumer latch = new CountdownLatchLoggingConsumer(1, SHUTDOWN_MESSAGE_REGEX);\n-      container.withLogConsumer(latch);\n-      Container.ExecResult result = Exceptions.unchecked(() -> container.execInContainer(INFINISPAN_SERVER_HOME + \"/bin/term.sh\"));\n-      System.out.printf(\"[%d] TERM %s\\n\", server, result);\n-      Eventually.eventually(() -> !container.isRunning());\n-   }\n-\n    @Override\n    public void restart(int server) {\n       if (isRunning(server)) {\n"}}, {"oid": "f8d0502d76dc1e0f388bc9614fbef480e233b4e2", "url": "https://github.com/infinispan/infinispan/commit/f8d0502d76dc1e0f388bc9614fbef480e233b4e2", "message": "ISPN-11582 Use pgrep instead of jps for server resilience tests", "committedDate": "2020-04-01T14:43:11Z", "type": "forcePushed"}, {"oid": "07c75513354f987ec7b71cf2c0e677ac8d891b4a", "url": "https://github.com/infinispan/infinispan/commit/07c75513354f987ec7b71cf2c0e677ac8d891b4a", "message": "ISPN-11582 Use pgrep instead of jps for server resilience tests", "committedDate": "2020-04-01T16:28:16Z", "type": "forcePushed"}, {"oid": "e7cc3e0302d28baddb17dc4f3e61b4c1c027ecaf", "url": "https://github.com/infinispan/infinispan/commit/e7cc3e0302d28baddb17dc4f3e61b4c1c027ecaf", "message": "ISPN-11527 Lazily start locks cache", "committedDate": "2020-04-02T11:11:49Z", "type": "commit"}, {"oid": "c3757053d26c36a9f2eef419bdaffcff66c8d41e", "url": "https://github.com/infinispan/infinispan/commit/c3757053d26c36a9f2eef419bdaffcff66c8d41e", "message": "ISPN-11537 Add StatefulSet rolling upgrade server integration test", "committedDate": "2020-04-02T11:11:49Z", "type": "commit"}, {"oid": "4f8837672ee0884d635e52a72f10885ba9468ad1", "url": "https://github.com/infinispan/infinispan/commit/4f8837672ee0884d635e52a72f10885ba9468ad1", "message": "ISPN-11537 Parameterize StatefulSetRollingUpgradeIT cluster size", "committedDate": "2020-04-02T11:11:49Z", "type": "commit"}, {"oid": "cec0b37e4894c7e6749403852abb6ac329d36f7c", "url": "https://github.com/infinispan/infinispan/commit/cec0b37e4894c7e6749403852abb6ac329d36f7c", "message": "ISPN-11537 Add more details to endpoint trace logging", "committedDate": "2020-04-02T11:11:49Z", "type": "commit"}, {"oid": "0d0050bb9a157b3ea358aee79d1b2e51fd3d8520", "url": "https://github.com/infinispan/infinispan/commit/0d0050bb9a157b3ea358aee79d1b2e51fd3d8520", "message": "ISPN-11538 Always launch the server process in the background", "committedDate": "2020-04-02T11:13:03Z", "type": "commit"}, {"oid": "96fa095b124155861a70050a84f8a7aadcfc30c7", "url": "https://github.com/infinispan/infinispan/commit/96fa095b124155861a70050a84f8a7aadcfc30c7", "message": "ISPN-11582 Use pgrep instead of jps for server resilience tests", "committedDate": "2020-04-02T11:13:03Z", "type": "commit"}, {"oid": "96fa095b124155861a70050a84f8a7aadcfc30c7", "url": "https://github.com/infinispan/infinispan/commit/96fa095b124155861a70050a84f8a7aadcfc30c7", "message": "ISPN-11582 Use pgrep instead of jps for server resilience tests", "committedDate": "2020-04-02T11:13:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE5ODM2NQ==", "url": "https://github.com/infinispan/infinispan/pull/8109#discussion_r402198365", "bodyText": "Nitpicking: I'd put @Inject on the same line when there's no component name, and remove the empty lines.", "author": "danberindei", "createdAt": "2020-04-02T10:05:41Z", "path": "lock/src/main/java/org/infinispan/lock/impl/manager/EmbeddedClusteredLockManager.java", "diffHunk": "@@ -48,56 +50,76 @@\n    public static final String IS_LOCKED = \"isLocked\";\n \n    private final ConcurrentHashMap<String, ClusteredLock> locks = new ConcurrentHashMap<>();\n-   private final CompletableFuture<CacheHolder> cacheHolderFuture;\n    private final ClusteredLockManagerConfiguration config;\n-   private ScheduledExecutorService scheduledExecutorService;\n-   private Executor executor;\n+   private volatile boolean started = false;\n+\n+   @Inject", "originalCommit": "07c75513354f987ec7b71cf2c0e677ac8d891b4a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE5OTE0MA==", "url": "https://github.com/infinispan/infinispan/pull/8109#discussion_r402199140", "bodyText": "BasicComponentRegistryImpl already logs component start/stop at trace level", "author": "danberindei", "createdAt": "2020-04-02T10:07:06Z", "path": "lock/src/main/java/org/infinispan/lock/impl/manager/EmbeddedClusteredLockManager.java", "diffHunk": "@@ -48,56 +50,76 @@\n    public static final String IS_LOCKED = \"isLocked\";\n \n    private final ConcurrentHashMap<String, ClusteredLock> locks = new ConcurrentHashMap<>();\n-   private final CompletableFuture<CacheHolder> cacheHolderFuture;\n    private final ClusteredLockManagerConfiguration config;\n-   private ScheduledExecutorService scheduledExecutorService;\n-   private Executor executor;\n+   private volatile boolean started = false;\n+\n+   @Inject\n+   EmbeddedCacheManager cacheManager;\n+\n+   @Inject @ComponentName(KnownComponentNames.TIMEOUT_SCHEDULE_EXECUTOR)\n+   ScheduledExecutorService scheduledExecutorService;\n+\n+   @Inject @ComponentName(KnownComponentNames.BLOCKING_EXECUTOR)\n+   Executor executor;\n \n    private AdvancedCache<ClusteredLockKey, ClusteredLockValue> cache;\n \n-   public EmbeddedClusteredLockManager(CompletableFuture<CacheHolder> cacheHolderFuture, ClusteredLockManagerConfiguration config) {\n-      this.cacheHolderFuture = cacheHolderFuture;\n+   public EmbeddedClusteredLockManager(ClusteredLockManagerConfiguration config) {\n       this.config = config;\n    }\n \n-   @Inject\n-   public void injectDep(@ComponentName(KnownComponentNames.TIMEOUT_SCHEDULE_EXECUTOR) ScheduledExecutorService scheduledExecutorService,\n-                         @ComponentName(KnownComponentNames.BLOCKING_EXECUTOR) Executor executor) {\n-      this.scheduledExecutorService = scheduledExecutorService;\n-      this.executor = executor;\n+   @Start\n+   public void start() {\n+      if (trace)\n+         log.trace(\"Starting EmbeddedClusteredLockManager\");", "originalCommit": "07c75513354f987ec7b71cf2c0e677ac8d891b4a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEwNjk5Ng==", "url": "https://github.com/infinispan/infinispan/pull/8109#discussion_r403106996", "bodyText": "I feel like this warrants a comment, I wouldn't expect query to depend on clustered-lock", "author": "danberindei", "createdAt": "2020-04-03T15:59:56Z", "path": "query/src/main/java/org/infinispan/query/impl/LifecycleManager.java", "diffHunk": "@@ -86,7 +86,7 @@\n  *\n  * @author Sanne Grinovero &lt;sanne@hibernate.org&gt; (C) 2011 Red Hat Inc.\n  */\n-@InfinispanModule(name = \"query\", requiredModules = {\"core\", \"query-core\"}, optionalModules = \"lucene-directory\")\n+@InfinispanModule(name = \"query\", requiredModules = {\"core\", \"query-core\", \"clustered-lock\"}, optionalModules = \"lucene-directory\")", "originalCommit": "96fa095b124155861a70050a84f8a7aadcfc30c7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE1ODc4Mw==", "url": "https://github.com/infinispan/infinispan/pull/8109#discussion_r403158783", "bodyText": "Why prefer this to container.stop(), doesn't it also send a TERM signal?\nAlso, do we really need the kill.sh and term.sh scripts? Couldn't we replace them with execInContainer(String.format(\"kill -%d 1\", signal))?", "author": "danberindei", "createdAt": "2020-04-03T17:12:40Z", "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/ContainerInfinispanServerDriver.java", "diffHunk": "@@ -318,6 +328,16 @@ public void kill(int server) {\n       Exceptions.unchecked(() -> containers.get(server).execInContainer(INFINISPAN_SERVER_HOME + \"/bin/kill.sh\"));\n    }\n \n+   // TODO should this just replace stop?", "originalCommit": "96fa095b124155861a70050a84f8a7aadcfc30c7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE3MDAzMg==", "url": "https://github.com/infinispan/infinispan/pull/8109#discussion_r403170032", "bodyText": "Weird, I never thought about the possibility of JUnit executing the rules in the \"wrong\" order.\nI see there are a few other tests that use multiple rules, perhaps we should change them as well: HotRodListenerWithDslFilter, HotRodCacheQueries, LuceneTransformationTest. Or did you only use a RuleChain here because you needed the constructor parameter, and it wasn't available in the initializer?", "author": "danberindei", "createdAt": "2020-04-03T17:25:24Z", "path": "server/tests/src/test/java/org/infinispan/server/resilience/StatefulSetRollingUpgradeIT.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package org.infinispan.server.resilience;\n+\n+import static org.infinispan.server.security.Common.sync;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.IntStream;\n+\n+import org.infinispan.client.rest.RestClient;\n+import org.infinispan.client.rest.RestResponse;\n+import org.infinispan.server.test.core.ContainerInfinispanServerDriver;\n+import org.infinispan.server.test.core.ServerRunMode;\n+import org.infinispan.server.test.junit4.InfinispanServerRule;\n+import org.infinispan.server.test.junit4.InfinispanServerRuleBuilder;\n+import org.infinispan.server.test.junit4.InfinispanServerTestMethodRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import io.netty.handler.codec.http.HttpResponseStatus;\n+\n+/**\n+ * Start cluster (0..numServers) redeploy after upgrade. Rolling upgrades always occur in the order numServers...0 and\n+ * the node with index numServers - 1 does not restart until node numServers has completed successfully.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+@RunWith(Parameterized.class)\n+public class StatefulSetRollingUpgradeIT {\n+\n+   private static final int NUM_ROLLING_UPGRADES = 4;\n+   private static final String CACHE_MANAGER = \"default\";\n+\n+   private final int numServers;\n+   private InfinispanServerRule serverRule;\n+   private InfinispanServerTestMethodRule methodRule;\n+\n+   @Parameterized.Parameters(name = \"{0}\")\n+   public static Collection<Object[]> data() {\n+      return Arrays.asList(new Object[][]{{2}, {3}, {4}, {5}});\n+   }\n+\n+   public StatefulSetRollingUpgradeIT(int numServers) {\n+      this.numServers = numServers;\n+   }\n+\n+   @Rule\n+   public RuleChain getRuleChain() {\n+      serverRule = InfinispanServerRuleBuilder.config(\"configuration/ClusteredServerTest.xml\")\n+            .numServers(numServers)\n+            .runMode(ServerRunMode.CONTAINER)\n+            .parallelStartup(false)\n+            .build();\n+\n+      methodRule = new InfinispanServerTestMethodRule(serverRule);\n+\n+      return RuleChain.outerRule(serverRule)\n+            .around(methodRule);", "originalCommit": "96fa095b124155861a70050a84f8a7aadcfc30c7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}