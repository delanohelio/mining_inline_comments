{"pr_number": 8753, "pr_title": "ISPN-12396 Deprecate org.infinispan.commons.dataconversion.Encoder", "pr_createdAt": "2020-10-07T16:10:01Z", "pr_url": "https://github.com/infinispan/infinispan/pull/8753", "timeline": [{"oid": "2229f6ff3fb351838157a54bb7b62967442fe087", "url": "https://github.com/infinispan/infinispan/commit/2229f6ff3fb351838157a54bb7b62967442fe087", "message": "ISPN-12396 Deprecate org.infinispan.commons.dataconversion.Encoder", "committedDate": "2020-10-08T07:20:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ5MDY3OA==", "url": "https://github.com/infinispan/infinispan/pull/8753#discussion_r502490678", "bodyText": "I suggest \"will be removed in version 15.0\" or similar, here and in the other deprecated classes.\nIdeally a JIRA linked in ISPN-12158 as well.", "author": "danberindei", "createdAt": "2020-10-09T14:59:59Z", "path": "commons/all/src/main/java/org/infinispan/commons/dataconversion/Encoder.java", "diffHunk": "@@ -4,7 +4,9 @@\n  * Used to convert data between read/write format and storage format.\n  *\n  * @since 9.1\n+ * @deprecated Since 12.0, use {@link Transcoder} for all data conversions instead.", "originalCommit": "2229f6ff3fb351838157a54bb7b62967442fe087", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE5NDg3NQ==", "url": "https://github.com/infinispan/infinispan/pull/8753#discussion_r503194875", "bodyText": "done", "author": "gustavonalle", "createdAt": "2020-10-12T10:22:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ5MDY3OA=="}], "type": "inlineReview", "revised_code": {"commit": "0fc21627ed0b05f62ab2b0d74052fce758903af5", "chunk": "diff --git a/commons/all/src/main/java/org/infinispan/commons/dataconversion/Encoder.java b/commons/all/src/main/java/org/infinispan/commons/dataconversion/Encoder.java\nindex ee0419d1f0..48633bd7b2 100644\n--- a/commons/all/src/main/java/org/infinispan/commons/dataconversion/Encoder.java\n+++ b/commons/all/src/main/java/org/infinispan/commons/dataconversion/Encoder.java\n\n@@ -4,7 +4,7 @@\n  * Used to convert data between read/write format and storage format.\n  *\n  * @since 9.1\n- * @deprecated Since 12.0, use {@link Transcoder} for all data conversions instead.\n+ * @deprecated Since 12.0, to be removed in 15.0. Use {@link Transcoder} for all data conversions instead.\n  */\n @Deprecated\n public interface Encoder {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA5MDk1OA==", "url": "https://github.com/infinispan/infinispan/pull/8753#discussion_r503090958", "bodyText": "This sounds dangerous @gustavonalle. Since it supports application/x-java-object, users will expect it to work for their custom objects as well. But decompress always produces a String, so users won't be able to get back any object that's not a String.\nI suggest removing GzipTranscoder.", "author": "danberindei", "createdAt": "2020-10-12T07:29:51Z", "path": "core/src/test/java/org/infinispan/dataconversion/GzipTranscoder.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.infinispan.dataconversion;\n+\n+import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_OBJECT;\n+import static org.infinispan.dataconversion.Gzip.compress;\n+import static org.infinispan.dataconversion.Gzip.decompress;\n+\n+import org.infinispan.commons.dataconversion.MediaType;\n+import org.infinispan.commons.dataconversion.OneToManyTranscoder;\n+\n+/**\n+ * @since 12.0\n+ */\n+public class GzipTranscoder extends OneToManyTranscoder {\n+   public static final String APPLICATION_GZIP_TYPE = \"application/gzip\";\n+   public static final MediaType APPLICATION_GZIP = MediaType.fromString(APPLICATION_GZIP_TYPE);\n+\n+   public GzipTranscoder() {\n+      super(APPLICATION_GZIP, APPLICATION_OBJECT);\n+   }\n+\n+   @Override\n+   public Object transcode(Object content, MediaType contentType, MediaType destinationType) {\n+      if (destinationType.match(APPLICATION_GZIP)) {\n+         return compress(content.toString());", "originalCommit": "2229f6ff3fb351838157a54bb7b62967442fe087", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE0MTEzMA==", "url": "https://github.com/infinispan/infinispan/pull/8753#discussion_r503141130", "bodyText": "This transcoder is not in production, but I can change it to avoid such pitfalls so that it's more robust", "author": "gustavonalle", "createdAt": "2020-10-12T08:55:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA5MDk1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE5NDk2OQ==", "url": "https://github.com/infinispan/infinispan/pull/8753#discussion_r503194969", "bodyText": "changed", "author": "gustavonalle", "createdAt": "2020-10-12T10:22:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA5MDk1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI2NTUzMQ==", "url": "https://github.com/infinispan/infinispan/pull/8753#discussion_r510265531", "bodyText": "I don't like the new transcoder implementation either :)\n\nThe \"compression\" of Java objects assumes that those objects are serializable, which seems wrong. I'd rather not support application/x-java-object at all.\nThe decompression only works if the destination media type is application/x-java-object, even if the input was a byte[] in any other (now lost) media type.\n\nI still think that we'll have to add back some kind of encoding that's independent of transcoding eventually, but right now it would be best to remove GzipTranscoder.", "author": "danberindei", "createdAt": "2020-10-22T15:42:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA5MDk1OA=="}], "type": "inlineReview", "revised_code": {"commit": "0fc21627ed0b05f62ab2b0d74052fce758903af5", "chunk": "diff --git a/core/src/test/java/org/infinispan/dataconversion/GzipTranscoder.java b/core/src/test/java/org/infinispan/dataconversion/GzipTranscoder.java\nindex e7bb7406ea..11297b9411 100644\n--- a/core/src/test/java/org/infinispan/dataconversion/GzipTranscoder.java\n+++ b/core/src/test/java/org/infinispan/dataconversion/GzipTranscoder.java\n\n@@ -1,13 +1,22 @@\n package org.infinispan.dataconversion;\n \n import static org.infinispan.commons.dataconversion.MediaType.APPLICATION_OBJECT;\n-import static org.infinispan.dataconversion.Gzip.compress;\n-import static org.infinispan.dataconversion.Gzip.decompress;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.zip.GZIPInputStream;\n+import java.util.zip.GZIPOutputStream;\n+\n+import org.infinispan.commons.dataconversion.EncodingException;\n import org.infinispan.commons.dataconversion.MediaType;\n import org.infinispan.commons.dataconversion.OneToManyTranscoder;\n \n /**\n+ * Sample transcoder that will compress and uncompress any content using gzip.\n+ *\n  * @since 12.0\n  */\n public class GzipTranscoder extends OneToManyTranscoder {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA5MjA4NQ==", "url": "https://github.com/infinispan/infinispan/pull/8753#discussion_r503092085", "bodyText": "The comment seems out of date", "author": "danberindei", "createdAt": "2020-10-12T07:32:03Z", "path": "integrationtests/endpoints-interop-it/src/test/java/org/infinispan/it/endpoints/ReplEmbeddedRestHotRodTest.java", "diffHunk": "@@ -61,7 +60,7 @@ public void testEmbeddedPutRestHotRodGet() {\n       final String key = \"2\";\n \n       // 1. Put with Embedded, bypassing all encodings\n-      Cache cache = cacheFactory2.getEmbeddedCache().getAdvancedCache().withEncoding(IdentityEncoder.class);\n+      Cache cache = cacheFactory2.getEmbeddedCache().getAdvancedCache();", "originalCommit": "2229f6ff3fb351838157a54bb7b62967442fe087", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0fc21627ed0b05f62ab2b0d74052fce758903af5", "chunk": "diff --git a/integrationtests/endpoints-interop-it/src/test/java/org/infinispan/it/endpoints/ReplEmbeddedRestHotRodTest.java b/integrationtests/endpoints-interop-it/src/test/java/org/infinispan/it/endpoints/ReplEmbeddedRestHotRodTest.java\nindex e0294dba2f..01994f89c0 100644\n--- a/integrationtests/endpoints-interop-it/src/test/java/org/infinispan/it/endpoints/ReplEmbeddedRestHotRodTest.java\n+++ b/integrationtests/endpoints-interop-it/src/test/java/org/infinispan/it/endpoints/ReplEmbeddedRestHotRodTest.java\n\n@@ -59,7 +59,7 @@ public void testRestPutEmbeddedHotRodGet() {\n    public void testEmbeddedPutRestHotRodGet() {\n       final String key = \"2\";\n \n-      // 1. Put with Embedded, bypassing all encodings\n+      // 1. Put with Embedded\n       Cache cache = cacheFactory2.getEmbeddedCache().getAdvancedCache();\n       assertNull(cache.put(key, \"v1\"));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA5MjgwNw==", "url": "https://github.com/infinispan/infinispan/pull/8753#discussion_r503092807", "bodyText": "This method is supposed to test the encoder itself, so I think it shouldn't change for now.", "author": "danberindei", "createdAt": "2020-10-12T07:33:38Z", "path": "jboss-marshalling/src/test/java/org/infinispan/jboss/marshalling/dataconversion/DataConversionTest.java", "diffHunk": "@@ -8,24 +9,20 @@\n \n import org.infinispan.AdvancedCache;\n import org.infinispan.Cache;\n+import org.infinispan.commons.dataconversion.MediaType;\n import org.infinispan.configuration.cache.ConfigurationBuilder;\n-import org.infinispan.factories.GlobalComponentRegistry;\n import org.infinispan.jboss.marshalling.commons.GenericJBossMarshaller;\n-import org.infinispan.marshall.core.EncoderRegistry;\n import org.infinispan.test.CacheManagerCallable;\n import org.infinispan.test.data.Person;\n import org.testng.annotations.Test;\n \n @Test(groups = \"functional\", testName = \"marshall.jboss.DataConversionTest\")\n public class DataConversionTest extends org.infinispan.dataconversion.DataConversionTest {\n+   private final GenericJBossMarshaller marshaller = new GenericJBossMarshaller();\n \n    @Test\n    public void testObjectEncoder() {\n-      GenericJbossMarshallerEncoder encoder = new GenericJbossMarshallerEncoder(org.infinispan.dataconversion.DataConversionTest.class.getClassLoader());\n-      withCacheManager(new CacheManagerCallable(\n-            createCacheManager(new ConfigurationBuilder())) {\n-\n-         GenericJBossMarshaller marshaller = new GenericJBossMarshaller();\n+      withCacheManager(new CacheManagerCallable(createCacheManager(new ConfigurationBuilder())) {", "originalCommit": "2229f6ff3fb351838157a54bb7b62967442fe087", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0fc21627ed0b05f62ab2b0d74052fce758903af5", "chunk": "diff --git a/jboss-marshalling/src/test/java/org/infinispan/jboss/marshalling/dataconversion/DataConversionTest.java b/jboss-marshalling/src/test/java/org/infinispan/jboss/marshalling/dataconversion/DataConversionTest.java\nindex 235b9e3325..cee0da5e81 100644\n--- a/jboss-marshalling/src/test/java/org/infinispan/jboss/marshalling/dataconversion/DataConversionTest.java\n+++ b/jboss-marshalling/src/test/java/org/infinispan/jboss/marshalling/dataconversion/DataConversionTest.java\n\n@@ -9,20 +8,24 @@\n \n import org.infinispan.AdvancedCache;\n import org.infinispan.Cache;\n-import org.infinispan.commons.dataconversion.MediaType;\n import org.infinispan.configuration.cache.ConfigurationBuilder;\n+import org.infinispan.factories.GlobalComponentRegistry;\n import org.infinispan.jboss.marshalling.commons.GenericJBossMarshaller;\n+import org.infinispan.marshall.core.EncoderRegistry;\n import org.infinispan.test.CacheManagerCallable;\n import org.infinispan.test.data.Person;\n import org.testng.annotations.Test;\n \n @Test(groups = \"functional\", testName = \"marshall.jboss.DataConversionTest\")\n public class DataConversionTest extends org.infinispan.dataconversion.DataConversionTest {\n-   private final GenericJBossMarshaller marshaller = new GenericJBossMarshaller();\n \n    @Test\n    public void testObjectEncoder() {\n-      withCacheManager(new CacheManagerCallable(createCacheManager(new ConfigurationBuilder())) {\n+      GenericJbossMarshallerEncoder encoder = new GenericJbossMarshallerEncoder(org.infinispan.dataconversion.DataConversionTest.class.getClassLoader());\n+      withCacheManager(new CacheManagerCallable(\n+            createCacheManager(new ConfigurationBuilder())) {\n+\n+         GenericJBossMarshaller marshaller = new GenericJBossMarshaller();\n \n          private byte[] marshall(Object o) {\n             try {\n"}}, {"oid": "0fc21627ed0b05f62ab2b0d74052fce758903af5", "url": "https://github.com/infinispan/infinispan/commit/0fc21627ed0b05f62ab2b0d74052fce758903af5", "message": "ISPN-12396 Deprecate org.infinispan.commons.dataconversion.Encoder", "committedDate": "2020-10-12T10:21:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIyNDU2Mg==", "url": "https://github.com/infinispan/infinispan/pull/8753#discussion_r510224562", "bodyText": "Should we use withMediaType ? Also should we have a withMediaType(MediaType)  method? I noticed we only have the two argument one.", "author": "wburns", "createdAt": "2020-10-22T14:48:50Z", "path": "core/src/test/java/org/infinispan/dataconversion/DataConversionTest.java", "diffHunk": "@@ -174,7 +173,7 @@ public void call() {\n             Cache<String, Person> cache = cm.getCache();\n             cm.getClassAllowList().addClasses(Person.class);\n             // Obtain cache with custom valueEncoder\n-            Cache storeMarshalled = cache.getAdvancedCache().withEncoding(JavaSerializationEncoder.class);\n+            Cache storeMarshalled = cache.getAdvancedCache();", "originalCommit": "0fc21627ed0b05f62ab2b0d74052fce758903af5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI1MTM1Ng==", "url": "https://github.com/infinispan/infinispan/pull/8753#discussion_r510251356", "bodyText": "Should we use withMediaType\n\nThe test mechanics changed :)\n\nshould we have a withMediaType(MediaType) method?\n\nI can add it", "author": "gustavonalle", "createdAt": "2020-10-22T15:23:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIyNDU2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI1MjE0MA==", "url": "https://github.com/infinispan/infinispan/pull/8753#discussion_r510252140", "bodyText": "I think the point is that the values need to be transcoded to java/x-java-object anyway, but I agree that it may be more relevant (and more similar to the initial version of the test) if storeMarshalled had used media type application/x-java-serialized-object.", "author": "danberindei", "createdAt": "2020-10-22T15:24:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIyNDU2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDc1OTQzMQ==", "url": "https://github.com/infinispan/infinispan/pull/8753#discussion_r510759431", "bodyText": "should we have a withMediaType(MediaType) method?\n\nI can add it\n\nYou can add it for completeness, but IMO it doesn't make a lot of sense. The keys and values are usually going to have the same media type only when using a marshaller's media type, and then changing the media type doesn't make a lot of sense (except maybe protostream <-> JSON?)", "author": "danberindei", "createdAt": "2020-10-23T09:33:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDIyNDU2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "32ca59fae7dde943e5df0833d0cd13ab62a80ef5", "chunk": "diff --git a/core/src/test/java/org/infinispan/dataconversion/DataConversionTest.java b/core/src/test/java/org/infinispan/dataconversion/DataConversionTest.java\nindex 995908e1e2..30ff3d0e2a 100644\n--- a/core/src/test/java/org/infinispan/dataconversion/DataConversionTest.java\n+++ b/core/src/test/java/org/infinispan/dataconversion/DataConversionTest.java\n\n@@ -173,7 +174,7 @@ public void call() {\n             Cache<String, Person> cache = cm.getCache();\n             cm.getClassAllowList().addClasses(Person.class);\n             // Obtain cache with custom valueEncoder\n-            Cache storeMarshalled = cache.getAdvancedCache();\n+            Cache storeMarshalled = cache.getAdvancedCache().withEncoding(JavaSerializationEncoder.class);\n \n             // Add a listener\n             SimpleListener simpleListener = new SimpleListener();\n"}}, {"oid": "32ca59fae7dde943e5df0833d0cd13ab62a80ef5", "url": "https://github.com/infinispan/infinispan/commit/32ca59fae7dde943e5df0833d0cd13ab62a80ef5", "message": "ISPN-12396 Deprecate Encoder", "committedDate": "2021-03-12T13:39:54Z", "type": "forcePushed"}, {"oid": "d27f751f34322c285fc933f4fce2c5c92eb98a1f", "url": "https://github.com/infinispan/infinispan/commit/d27f751f34322c285fc933f4fce2c5c92eb98a1f", "message": "ISPN-12396 Deprecate Encoder", "committedDate": "2021-03-19T16:15:01Z", "type": "commit"}, {"oid": "d27f751f34322c285fc933f4fce2c5c92eb98a1f", "url": "https://github.com/infinispan/infinispan/commit/d27f751f34322c285fc933f4fce2c5c92eb98a1f", "message": "ISPN-12396 Deprecate Encoder", "committedDate": "2021-03-19T16:15:01Z", "type": "forcePushed"}]}