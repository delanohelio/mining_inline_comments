{"pr_number": 8531, "pr_title": "ISPN-12079 && ISPN-12099 Missing handlers in the HTTP/2 pipeline & keepalive fix", "pr_createdAt": "2020-07-07T15:15:58Z", "pr_url": "https://github.com/infinispan/infinispan/pull/8531", "timeline": [{"oid": "4ff8a5ef1aeda120555034971921caba425d6409", "url": "https://github.com/infinispan/infinispan/commit/4ff8a5ef1aeda120555034971921caba425d6409", "message": "ISPN-12099 REST server prevents connection reuse for some resources", "committedDate": "2020-07-08T15:57:10Z", "type": "forcePushed"}, {"oid": "85d32ef448371d7bb3092b645d34dde42f215b9c", "url": "https://github.com/infinispan/infinispan/commit/85d32ef448371d7bb3092b645d34dde42f215b9c", "message": "ISPN-12099 REST server prevents connection reuse for some resources", "committedDate": "2020-07-08T17:11:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkzNDA3Ng==", "url": "https://github.com/infinispan/infinispan/pull/8531#discussion_r452934076", "bodyText": "maybe it is a stupid question, but isn't this instance shared between requests? I mean, this scenario:\nreq1: sets streamId=1\nreq2: sets streamId=2\nresp from req1: read streamId==2\nresp from req2: read streamId==2 again?", "author": "pruivo", "createdAt": "2020-07-10T16:02:12Z", "path": "server/rest/src/main/java/org/infinispan/rest/HeaderCorrelatorHandler.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package org.infinispan.rest;\n+\n+import io.netty.channel.ChannelDuplexHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.handler.codec.http.HttpRequest;\n+import io.netty.handler.codec.http.HttpResponse;\n+import io.netty.handler.codec.http2.HttpConversionUtil;\n+import io.netty.util.AsciiString;\n+\n+/**\n+ * Handler to propagate HTTP headers between requests and responses.\n+ *\n+ * @since 12.0\n+ */\n+class HeaderCorrelatorHandler extends ChannelDuplexHandler {\n+\n+   public static final AsciiString STREAM_ID_HEADER = HttpConversionUtil.ExtensionHeaderNames.STREAM_ID.text();\n+   private Integer streamId;", "originalCommit": "85d32ef448371d7bb3092b645d34dde42f215b9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1MzcwNQ==", "url": "https://github.com/infinispan/infinispan/pull/8531#discussion_r452953705", "bodyText": "It is only shared if annotated with @Sharable. If not, it will have a new instance per pipeline\nhttps://netty.io/4.0/api/io/netty/channel/ChannelHandler.Sharable.html", "author": "gustavonalle", "createdAt": "2020-07-10T16:40:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkzNDA3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2NTk2OA==", "url": "https://github.com/infinispan/infinispan/pull/8531#discussion_r452965968", "bodyText": "I will double check the threading since you mentioned. Maybe a volatile is needed in the streamId.", "author": "gustavonalle", "createdAt": "2020-07-10T17:05:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkzNDA3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ2MzY3OQ==", "url": "https://github.com/infinispan/infinispan/pull/8531#discussion_r453463679", "bodyText": "This is fine @pruivo. According to https://netty.io/wiki/new-and-noteworthy-in-4.0.html#wiki-h2-33:\nThere is always happens-before relationship between each ChannelHandler method invocations made by Netty. \nA user does not need to define a volatile field to keep the state of a handler.\n\nand\nNetty will never call a ChannelHandler's methods concurrently, unless the ChannelHandler is \nannotated with @Sharable.\n\nBut I did find an issue with this handler with HTTP/2. Since it's a multiplexing protocol (several requests identified by streamId travel through the same connection), Netty must create a child channel for each stream id to avoid the problem you describe. There was a bogus http2 pipeline that was not doing it. I removed it.", "author": "gustavonalle", "createdAt": "2020-07-13T06:42:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkzNDA3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "2a5609341d5740a1f4da1461a9733be1b394b81e", "chunk": "diff --git a/server/rest/src/main/java/org/infinispan/rest/HeaderCorrelatorHandler.java b/server/rest/src/main/java/org/infinispan/rest/StreamCorrelatorHandler.java\nsimilarity index 87%\nrename from server/rest/src/main/java/org/infinispan/rest/HeaderCorrelatorHandler.java\nrename to server/rest/src/main/java/org/infinispan/rest/StreamCorrelatorHandler.java\nindex a6f33748ee..2c39e01a41 100644\n--- a/server/rest/src/main/java/org/infinispan/rest/HeaderCorrelatorHandler.java\n+++ b/server/rest/src/main/java/org/infinispan/rest/StreamCorrelatorHandler.java\n\n@@ -9,11 +9,11 @@\n import io.netty.util.AsciiString;\n \n /**\n- * Handler to propagate HTTP headers between requests and responses.\n+ * Handler to propagate HTTP/2 StreamId between requests and responses.\n  *\n  * @since 12.0\n  */\n-class HeaderCorrelatorHandler extends ChannelDuplexHandler {\n+class StreamCorrelatorHandler extends ChannelDuplexHandler {\n \n    public static final AsciiString STREAM_ID_HEADER = HttpConversionUtil.ExtensionHeaderNames.STREAM_ID.text();\n    private Integer streamId;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkzNDc0Mg==", "url": "https://github.com/infinispan/infinispan/pull/8531#discussion_r452934742", "bodyText": "is it required in this method? configureHttp1() adds another RestRequestHandler after this one.", "author": "pruivo", "createdAt": "2020-07-10T16:03:24Z", "path": "server/rest/src/main/java/org/infinispan/rest/ALPNHandler.java", "diffHunk": "@@ -76,22 +78,56 @@ public void configurePipeline(ChannelPipeline pipeline, String protocol) {\n     */\n    protected void configureHttp2(ChannelPipeline pipeline) {\n       pipeline.addLast(getHttp11To2ConnectionHandler());\n+      addHttp1Handlers(pipeline);\n+   }\n+\n+   /**\n+    * Adds the commons Http1 handlers to the pipeline.\n+    */\n+   private void addHttp1Handlers(ChannelPipeline pipeline) {\n+      // Handles http content encoding (gzip)\n+      pipeline.addLast(new HttpContentCompressor(restServer.getConfiguration().getCompressionLevel()));\n+      // Handles chunked data\n+      pipeline.addLast(new HttpObjectAggregator(maxContentLength()));\n+      // Handles Http/2 headers propagation from request to response\n+      pipeline.addLast(new HeaderCorrelatorHandler());\n+      // Handles CORS\n+      pipeline.addLast(new CorsHandler(getCorsConfigs(), true));\n+      // Handles Keep-alive\n+      pipeline.addLast(new HttpServerKeepAliveHandler());\n+      // Handles the writing of ChunkedInputs\n       pipeline.addLast(new ChunkedWriteHandler());\n-      pipeline.addLast(\"rest-handler-http2\", new RestRequestHandler(restServer));\n+      // Handles REST request\n+      pipeline.addLast(new RestRequestHandler(restServer));", "originalCommit": "85d32ef448371d7bb3092b645d34dde42f215b9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1OTMzNA==", "url": "https://github.com/infinispan/infinispan/pull/8531#discussion_r452959334", "bodyText": "let me check", "author": "gustavonalle", "createdAt": "2020-07-10T16:51:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkzNDc0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUxNjMzMg==", "url": "https://github.com/infinispan/infinispan/pull/8531#discussion_r453516332", "bodyText": "I got rid of Http11RequestHandler altogether. It seems overkill to have an extra class just to handle an extra if", "author": "gustavonalle", "createdAt": "2020-07-13T09:26:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkzNDc0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "2a5609341d5740a1f4da1461a9733be1b394b81e", "chunk": "diff --git a/server/rest/src/main/java/org/infinispan/rest/ALPNHandler.java b/server/rest/src/main/java/org/infinispan/rest/ALPNHandler.java\nindex 8b8f9a1ded..777fda2918 100644\n--- a/server/rest/src/main/java/org/infinispan/rest/ALPNHandler.java\n+++ b/server/rest/src/main/java/org/infinispan/rest/ALPNHandler.java\n\n@@ -60,41 +56,36 @@ public void configurePipeline(ChannelHandlerContext ctx, String protocol) {\n    }\n \n    public void configurePipeline(ChannelPipeline pipeline, String protocol) {\n-      if (ApplicationProtocolNames.HTTP_2.equals(protocol)) {\n-         configureHttp2(pipeline);\n+      if (ApplicationProtocolNames.HTTP_2.equals(protocol) || ApplicationProtocolNames.HTTP_1_1.equals(protocol)) {\n+         configureHttpPipeline(pipeline);\n          return;\n       }\n \n-      if (ApplicationProtocolNames.HTTP_1_1.equals(protocol)) {\n-         configureHttp1(pipeline);\n+      ProtocolServer<?> protocolServer = getProtocolServer(protocol);\n+      if (protocolServer != null) {\n+         pipeline.addLast(protocolServer.getInitializer());\n          return;\n       }\n \n       throw new IllegalStateException(\"unknown protocol: \" + protocol);\n    }\n \n-   /**\n-    * Configure pipeline for HTTP/2 after negotiated via ALPN\n-    */\n-   protected void configureHttp2(ChannelPipeline pipeline) {\n-      pipeline.addLast(getHttp11To2ConnectionHandler());\n-      addHttp1Handlers(pipeline);\n+   protected ProtocolServer<?> getProtocolServer(String protocol) {\n+      return null;\n    }\n \n    /**\n-    * Adds the commons Http1 handlers to the pipeline.\n+    * Configure the handlers that should be used for both HTTP 1.1 and HTTP 2.0\n     */\n-   private void addHttp1Handlers(ChannelPipeline pipeline) {\n+   private void addCommonsHandlers(ChannelPipeline pipeline) {\n       // Handles http content encoding (gzip)\n       pipeline.addLast(new HttpContentCompressor(restServer.getConfiguration().getCompressionLevel()));\n       // Handles chunked data\n       pipeline.addLast(new HttpObjectAggregator(maxContentLength()));\n       // Handles Http/2 headers propagation from request to response\n-      pipeline.addLast(new HeaderCorrelatorHandler());\n+      pipeline.addLast(new StreamCorrelatorHandler());\n       // Handles CORS\n       pipeline.addLast(new CorsHandler(getCorsConfigs(), true));\n-      // Handles Keep-alive\n-      pipeline.addLast(new HttpServerKeepAliveHandler());\n       // Handles the writing of ChunkedInputs\n       pipeline.addLast(new ChunkedWriteHandler());\n       // Handles REST request\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkzNDkzMw==", "url": "https://github.com/infinispan/infinispan/pull/8531#discussion_r452934933", "bodyText": "well, it says HTTP2... does it work with HTTP1?", "author": "pruivo", "createdAt": "2020-07-10T16:03:47Z", "path": "server/rest/src/main/java/org/infinispan/rest/ALPNHandler.java", "diffHunk": "@@ -76,22 +78,56 @@ public void configurePipeline(ChannelPipeline pipeline, String protocol) {\n     */\n    protected void configureHttp2(ChannelPipeline pipeline) {\n       pipeline.addLast(getHttp11To2ConnectionHandler());\n+      addHttp1Handlers(pipeline);\n+   }\n+\n+   /**\n+    * Adds the commons Http1 handlers to the pipeline.\n+    */\n+   private void addHttp1Handlers(ChannelPipeline pipeline) {\n+      // Handles http content encoding (gzip)\n+      pipeline.addLast(new HttpContentCompressor(restServer.getConfiguration().getCompressionLevel()));\n+      // Handles chunked data\n+      pipeline.addLast(new HttpObjectAggregator(maxContentLength()));\n+      // Handles Http/2 headers propagation from request to response", "originalCommit": "85d32ef448371d7bb3092b645d34dde42f215b9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1OTAyOA==", "url": "https://github.com/infinispan/infinispan/pull/8531#discussion_r452959028", "bodyText": "Our handlers act as if they were dealing in HTTP/1 only, Netty provides a series of adaptors from HTTP2 to HTTP1 and back when the connection is HTTP/2. The only thing we should do is to send this streamId if it is present. It won't be in HTTP1 connections so this new handler becomes a no-op", "author": "gustavonalle", "createdAt": "2020-07-10T16:51:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkzNDkzMw=="}], "type": "inlineReview", "revised_code": {"commit": "2a5609341d5740a1f4da1461a9733be1b394b81e", "chunk": "diff --git a/server/rest/src/main/java/org/infinispan/rest/ALPNHandler.java b/server/rest/src/main/java/org/infinispan/rest/ALPNHandler.java\nindex 8b8f9a1ded..777fda2918 100644\n--- a/server/rest/src/main/java/org/infinispan/rest/ALPNHandler.java\n+++ b/server/rest/src/main/java/org/infinispan/rest/ALPNHandler.java\n\n@@ -60,41 +56,36 @@ public void configurePipeline(ChannelHandlerContext ctx, String protocol) {\n    }\n \n    public void configurePipeline(ChannelPipeline pipeline, String protocol) {\n-      if (ApplicationProtocolNames.HTTP_2.equals(protocol)) {\n-         configureHttp2(pipeline);\n+      if (ApplicationProtocolNames.HTTP_2.equals(protocol) || ApplicationProtocolNames.HTTP_1_1.equals(protocol)) {\n+         configureHttpPipeline(pipeline);\n          return;\n       }\n \n-      if (ApplicationProtocolNames.HTTP_1_1.equals(protocol)) {\n-         configureHttp1(pipeline);\n+      ProtocolServer<?> protocolServer = getProtocolServer(protocol);\n+      if (protocolServer != null) {\n+         pipeline.addLast(protocolServer.getInitializer());\n          return;\n       }\n \n       throw new IllegalStateException(\"unknown protocol: \" + protocol);\n    }\n \n-   /**\n-    * Configure pipeline for HTTP/2 after negotiated via ALPN\n-    */\n-   protected void configureHttp2(ChannelPipeline pipeline) {\n-      pipeline.addLast(getHttp11To2ConnectionHandler());\n-      addHttp1Handlers(pipeline);\n+   protected ProtocolServer<?> getProtocolServer(String protocol) {\n+      return null;\n    }\n \n    /**\n-    * Adds the commons Http1 handlers to the pipeline.\n+    * Configure the handlers that should be used for both HTTP 1.1 and HTTP 2.0\n     */\n-   private void addHttp1Handlers(ChannelPipeline pipeline) {\n+   private void addCommonsHandlers(ChannelPipeline pipeline) {\n       // Handles http content encoding (gzip)\n       pipeline.addLast(new HttpContentCompressor(restServer.getConfiguration().getCompressionLevel()));\n       // Handles chunked data\n       pipeline.addLast(new HttpObjectAggregator(maxContentLength()));\n       // Handles Http/2 headers propagation from request to response\n-      pipeline.addLast(new HeaderCorrelatorHandler());\n+      pipeline.addLast(new StreamCorrelatorHandler());\n       // Handles CORS\n       pipeline.addLast(new CorsHandler(getCorsConfigs(), true));\n-      // Handles Keep-alive\n-      pipeline.addLast(new HttpServerKeepAliveHandler());\n       // Handles the writing of ChunkedInputs\n       pipeline.addLast(new ChunkedWriteHandler());\n       // Handles REST request\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkzNTUwNw==", "url": "https://github.com/infinispan/infinispan/pull/8531#discussion_r452935507", "bodyText": "maybe change the method name to addCommonHandlers. it isn't clear for me if this method should register only HTTP1 or HTTP2 or both handlers :)", "author": "pruivo", "createdAt": "2020-07-10T16:04:53Z", "path": "server/rest/src/main/java/org/infinispan/rest/ALPNHandler.java", "diffHunk": "@@ -76,22 +78,56 @@ public void configurePipeline(ChannelPipeline pipeline, String protocol) {\n     */\n    protected void configureHttp2(ChannelPipeline pipeline) {\n       pipeline.addLast(getHttp11To2ConnectionHandler());\n+      addHttp1Handlers(pipeline);\n+   }\n+\n+   /**\n+    * Adds the commons Http1 handlers to the pipeline.\n+    */\n+   private void addHttp1Handlers(ChannelPipeline pipeline) {", "originalCommit": "85d32ef448371d7bb3092b645d34dde42f215b9c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2a5609341d5740a1f4da1461a9733be1b394b81e", "chunk": "diff --git a/server/rest/src/main/java/org/infinispan/rest/ALPNHandler.java b/server/rest/src/main/java/org/infinispan/rest/ALPNHandler.java\nindex 8b8f9a1ded..777fda2918 100644\n--- a/server/rest/src/main/java/org/infinispan/rest/ALPNHandler.java\n+++ b/server/rest/src/main/java/org/infinispan/rest/ALPNHandler.java\n\n@@ -60,41 +56,36 @@ public void configurePipeline(ChannelHandlerContext ctx, String protocol) {\n    }\n \n    public void configurePipeline(ChannelPipeline pipeline, String protocol) {\n-      if (ApplicationProtocolNames.HTTP_2.equals(protocol)) {\n-         configureHttp2(pipeline);\n+      if (ApplicationProtocolNames.HTTP_2.equals(protocol) || ApplicationProtocolNames.HTTP_1_1.equals(protocol)) {\n+         configureHttpPipeline(pipeline);\n          return;\n       }\n \n-      if (ApplicationProtocolNames.HTTP_1_1.equals(protocol)) {\n-         configureHttp1(pipeline);\n+      ProtocolServer<?> protocolServer = getProtocolServer(protocol);\n+      if (protocolServer != null) {\n+         pipeline.addLast(protocolServer.getInitializer());\n          return;\n       }\n \n       throw new IllegalStateException(\"unknown protocol: \" + protocol);\n    }\n \n-   /**\n-    * Configure pipeline for HTTP/2 after negotiated via ALPN\n-    */\n-   protected void configureHttp2(ChannelPipeline pipeline) {\n-      pipeline.addLast(getHttp11To2ConnectionHandler());\n-      addHttp1Handlers(pipeline);\n+   protected ProtocolServer<?> getProtocolServer(String protocol) {\n+      return null;\n    }\n \n    /**\n-    * Adds the commons Http1 handlers to the pipeline.\n+    * Configure the handlers that should be used for both HTTP 1.1 and HTTP 2.0\n     */\n-   private void addHttp1Handlers(ChannelPipeline pipeline) {\n+   private void addCommonsHandlers(ChannelPipeline pipeline) {\n       // Handles http content encoding (gzip)\n       pipeline.addLast(new HttpContentCompressor(restServer.getConfiguration().getCompressionLevel()));\n       // Handles chunked data\n       pipeline.addLast(new HttpObjectAggregator(maxContentLength()));\n       // Handles Http/2 headers propagation from request to response\n-      pipeline.addLast(new HeaderCorrelatorHandler());\n+      pipeline.addLast(new StreamCorrelatorHandler());\n       // Handles CORS\n       pipeline.addLast(new CorsHandler(getCorsConfigs(), true));\n-      // Handles Keep-alive\n-      pipeline.addLast(new HttpServerKeepAliveHandler());\n       // Handles the writing of ChunkedInputs\n       pipeline.addLast(new ChunkedWriteHandler());\n       // Handles REST request\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk0MDc0MA==", "url": "https://github.com/infinispan/infinispan/pull/8531#discussion_r452940740", "bodyText": "nitpick: final", "author": "pruivo", "createdAt": "2020-07-10T16:15:00Z", "path": "server/rest/src/test/java/org/infinispan/rest/assertion/ResponseAssertion.java", "diffHunk": "@@ -54,11 +57,16 @@\n    private RestResponse response;", "originalCommit": "85d32ef448371d7bb3092b645d34dde42f215b9c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2a5609341d5740a1f4da1461a9733be1b394b81e", "chunk": "diff --git a/server/rest/src/test/java/org/infinispan/rest/assertion/ResponseAssertion.java b/server/rest/src/test/java/org/infinispan/rest/assertion/ResponseAssertion.java\nindex 9b9dcd4257..c3af9b6cc4 100644\n--- a/server/rest/src/test/java/org/infinispan/rest/assertion/ResponseAssertion.java\n+++ b/server/rest/src/test/java/org/infinispan/rest/assertion/ResponseAssertion.java\n\n@@ -54,7 +54,7 @@\n \n public class ResponseAssertion {\n \n-   private RestResponse response;\n+   private final RestResponse response;\n \n    private ResponseAssertion(RestResponse response) {\n       this.response = Objects.requireNonNull(response, \"RestResponse cannot be null!\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk0Mjc4NQ==", "url": "https://github.com/infinispan/infinispan/pull/8531#discussion_r452942785", "bodyText": "nitpick: instead of a boolean, I probably use protocol(org.infinispan.client.rest.configuration.Protocol) to be future proof \ud83d\udc4d", "author": "pruivo", "createdAt": "2020-07-10T16:18:59Z", "path": "server/rest/src/test/java/org/infinispan/rest/resources/AbstractRestResourceTest.java", "diffHunk": "@@ -59,19 +63,31 @@\n    private final List<RestServerHelper> restServers = new ArrayList<>(NUM_SERVERS);\n \n    protected boolean security;\n+   protected boolean http2;\n+   protected boolean ssl;\n \n    protected CacheIgnoreManager ignoreManager;\n \n    @Override\n    protected String parameters() {\n-      return \"[security=\" + security + \"]\";\n+      return \"[security=\" + security + \", http2=\" + http2 + \", ssl=\" + ssl + \"]\";\n    }\n \n    protected AbstractRestResourceTest withSecurity(boolean security) {\n       this.security = security;\n       return this;\n    }\n \n+   protected AbstractRestResourceTest http2(boolean http2) {", "originalCommit": "85d32ef448371d7bb3092b645d34dde42f215b9c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2a5609341d5740a1f4da1461a9733be1b394b81e", "chunk": "diff --git a/server/rest/src/test/java/org/infinispan/rest/resources/AbstractRestResourceTest.java b/server/rest/src/test/java/org/infinispan/rest/resources/AbstractRestResourceTest.java\nindex a208b7843d..04782a068d 100644\n--- a/server/rest/src/test/java/org/infinispan/rest/resources/AbstractRestResourceTest.java\n+++ b/server/rest/src/test/java/org/infinispan/rest/resources/AbstractRestResourceTest.java\n\n@@ -63,14 +64,14 @@\n    private final List<RestServerHelper> restServers = new ArrayList<>(NUM_SERVERS);\n \n    protected boolean security;\n-   protected boolean http2;\n+   protected Protocol protocol = HTTP_11;\n    protected boolean ssl;\n \n    protected CacheIgnoreManager ignoreManager;\n \n    @Override\n    protected String parameters() {\n-      return \"[security=\" + security + \", http2=\" + http2 + \", ssl=\" + ssl + \"]\";\n+      return \"[security=\" + security + \", protocol=\" + protocol.toString() + \", ssl=\" + ssl + \"]\";\n    }\n \n    protected AbstractRestResourceTest withSecurity(boolean security) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk0MzI3OQ==", "url": "https://github.com/infinispan/infinispan/pull/8531#discussion_r452943279", "bodyText": "security and ssl tests with HTTP1 missing?", "author": "pruivo", "createdAt": "2020-07-10T16:19:56Z", "path": "server/rest/src/test/java/org/infinispan/rest/resources/CacheResourceTest.java", "diffHunk": "@@ -86,12 +86,13 @@ protected void defineCaches(EmbeddedCacheManager cm) {\n    public Object[] factory() {\n       return new Object[]{\n             new CacheResourceTest().withSecurity(false),\n-            new CacheResourceTest().withSecurity(true),\n+            new CacheResourceTest().withSecurity(true).http2(true),", "originalCommit": "85d32ef448371d7bb3092b645d34dde42f215b9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk0NDExMA==", "url": "https://github.com/infinispan/infinispan/pull/8531#discussion_r452944110", "bodyText": "ps. org.infinispan.rest.resources.CacheResourceOffHeapTest be changed as well to test all combination (hopefully not an overkill)", "author": "pruivo", "createdAt": "2020-07-10T16:21:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk0MzI3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2MTIzOA==", "url": "https://github.com/infinispan/infinispan/pull/8531#discussion_r452961238", "bodyText": "I will add https and  http1. I though it'd be rare, since we usually offer http/2 after the protocol negotiation during the SSL handshake, but you never know what are the clients out there. And Offheap + any combination is not necessary I think. It will bloat the test suite", "author": "gustavonalle", "createdAt": "2020-07-10T16:55:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk0MzI3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "2a5609341d5740a1f4da1461a9733be1b394b81e", "chunk": "diff --git a/server/rest/src/test/java/org/infinispan/rest/resources/CacheResourceTest.java b/server/rest/src/test/java/org/infinispan/rest/resources/CacheResourceTest.java\nindex d5c64d63cd..7cce41c1ef 100644\n--- a/server/rest/src/test/java/org/infinispan/rest/resources/CacheResourceTest.java\n+++ b/server/rest/src/test/java/org/infinispan/rest/resources/CacheResourceTest.java\n\n@@ -85,9 +87,10 @@ protected void defineCaches(EmbeddedCacheManager cm) {\n    @Override\n    public Object[] factory() {\n       return new Object[]{\n-            new CacheResourceTest().withSecurity(false),\n-            new CacheResourceTest().withSecurity(true).http2(true),\n-            new CacheResourceTest().withSecurity(true).http2(true).ssl(true),\n+            new CacheResourceTest().withSecurity(false).protocol(HTTP_11).ssl(false),\n+            new CacheResourceTest().withSecurity(true).protocol(HTTP_20).ssl(false),\n+            new CacheResourceTest().withSecurity(true).protocol(HTTP_11).ssl(true),\n+            new CacheResourceTest().withSecurity(true).protocol(HTTP_20).ssl(true),\n       };\n    }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk0NDk3OA==", "url": "https://github.com/infinispan/infinispan/pull/8531#discussion_r452944978", "bodyText": "same comment as above", "author": "pruivo", "createdAt": "2020-07-10T16:23:09Z", "path": "server/rest/src/test/java/org/infinispan/rest/resources/CacheV2ResourceTest.java", "diffHunk": "@@ -71,8 +71,9 @@ protected void defineCaches(EmbeddedCacheManager cm) {\n    @Override\n    public Object[] factory() {\n       return new Object[]{\n-            new CacheV2ResourceTest().withSecurity(true),\n-            new CacheV2ResourceTest().withSecurity(false)\n+            new CacheV2ResourceTest().withSecurity(false),", "originalCommit": "85d32ef448371d7bb3092b645d34dde42f215b9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2MTczOA==", "url": "https://github.com/infinispan/infinispan/pull/8531#discussion_r452961738", "bodyText": "I will probably add SSL + HTTP1 to either cachev1 or cachev2, not both, to avoiding passing the 1.000 tests mark :)", "author": "gustavonalle", "createdAt": "2020-07-10T16:56:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk0NDk3OA=="}], "type": "inlineReview", "revised_code": {"commit": "2a5609341d5740a1f4da1461a9733be1b394b81e", "chunk": "diff --git a/server/rest/src/test/java/org/infinispan/rest/resources/CacheV2ResourceTest.java b/server/rest/src/test/java/org/infinispan/rest/resources/CacheV2ResourceTest.java\nindex edbf930096..62e5fb4ebd 100644\n--- a/server/rest/src/test/java/org/infinispan/rest/resources/CacheV2ResourceTest.java\n+++ b/server/rest/src/test/java/org/infinispan/rest/resources/CacheV2ResourceTest.java\n\n@@ -71,19 +73,20 @@ protected void defineCaches(EmbeddedCacheManager cm) {\n    @Override\n    public Object[] factory() {\n       return new Object[]{\n-            new CacheV2ResourceTest().withSecurity(false),\n-            new CacheV2ResourceTest().withSecurity(true).http2(true),\n-            new CacheV2ResourceTest().withSecurity(true).http2(true).ssl(true),\n+            new CacheV2ResourceTest().withSecurity(false).protocol(HTTP_11).ssl(false),\n+            new CacheV2ResourceTest().withSecurity(true).protocol(HTTP_20).ssl(false),\n+            new CacheV2ResourceTest().withSecurity(true).protocol(HTTP_11).ssl(true),\n+            new CacheV2ResourceTest().withSecurity(true).protocol(HTTP_20).ssl(true),\n       };\n    }\n \n    private ConfigurationBuilder getIndexedPersistedCache() {\n       ConfigurationBuilder builder = getDefaultClusteredCacheConfig(CacheMode.DIST_SYNC, false);\n       builder.indexing().enable()\n-             .addIndexedEntity(\"Entity\")\n-             .addProperty(\"default.directory_provider\", \"local-heap\")\n-             .statistics().enable()\n-             .persistence().addStore(DummyInMemoryStoreConfigurationBuilder.class).shared(true).storeName(\"store\");\n+            .addIndexedEntity(\"Entity\")\n+            .addProperty(\"default.directory_provider\", \"local-heap\")\n+            .statistics().enable()\n+            .persistence().addStore(DummyInMemoryStoreConfigurationBuilder.class).shared(true).storeName(\"store\");\n       return builder;\n    }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk0NTI0MA==", "url": "https://github.com/infinispan/infinispan/pull/8531#discussion_r452945240", "bodyText": "same as above :)", "author": "pruivo", "createdAt": "2020-07-10T16:23:46Z", "path": "server/rest/src/test/java/org/infinispan/rest/resources/StaticResourceTest.java", "diffHunk": "@@ -55,18 +72,12 @@ private RestResponse call(String path, String ifModifiedSince) {\n       return join(rawClient.get(path, allHeaders));\n    }\n \n-   @Override\n-   protected RestClientConfigurationBuilder getClientConfig() {\n-      RestClientConfigurationBuilder builder = super.getClientConfig();\n-      builder.followRedirects(true);\n-      return builder;\n-   }\n-\n    @Override\n    public Object[] factory() {\n       return new Object[]{\n             new StaticResourceTest().withSecurity(false),\n-            new StaticResourceTest().withSecurity(true),\n+            new StaticResourceTest().withSecurity(true).http2(true),", "originalCommit": "85d32ef448371d7bb3092b645d34dde42f215b9c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2a5609341d5740a1f4da1461a9733be1b394b81e", "chunk": "diff --git a/server/rest/src/test/java/org/infinispan/rest/resources/StaticResourceTest.java b/server/rest/src/test/java/org/infinispan/rest/resources/StaticResourceTest.java\nindex 227148c45d..3e8493b0e1 100644\n--- a/server/rest/src/test/java/org/infinispan/rest/resources/StaticResourceTest.java\n+++ b/server/rest/src/test/java/org/infinispan/rest/resources/StaticResourceTest.java\n\n@@ -72,12 +57,20 @@ private RestResponse call(String path, String ifModifiedSince) {\n       return join(rawClient.get(path, allHeaders));\n    }\n \n+   @Override\n+   protected RestClientConfigurationBuilder getClientConfig() {\n+      RestClientConfigurationBuilder builder = super.getClientConfig();\n+      builder.followRedirects(true);\n+      return builder;\n+   }\n+\n    @Override\n    public Object[] factory() {\n       return new Object[]{\n-            new StaticResourceTest().withSecurity(false),\n-            new StaticResourceTest().withSecurity(true).http2(true),\n-            new StaticResourceTest().withSecurity(true).http2(true).ssl(true)\n+            new StaticResourceTest().withSecurity(false).protocol(HTTP_11).ssl(false),\n+            new StaticResourceTest().withSecurity(true).protocol(HTTP_20).ssl(false),\n+            new StaticResourceTest().withSecurity(true).protocol(HTTP_11).ssl(true),\n+            new StaticResourceTest().withSecurity(true).protocol(HTTP_20).ssl(true),\n       };\n    }\n \n"}}, {"oid": "2a5609341d5740a1f4da1461a9733be1b394b81e", "url": "https://github.com/infinispan/infinispan/commit/2a5609341d5740a1f4da1461a9733be1b394b81e", "message": "ISPN-12079 Missing handlers in the HTTP/2 pipeline", "committedDate": "2020-07-13T09:30:43Z", "type": "commit"}, {"oid": "da264f1496eb8bf1cfc06e6febc7bf44427ee6ce", "url": "https://github.com/infinispan/infinispan/commit/da264f1496eb8bf1cfc06e6febc7bf44427ee6ce", "message": "ISPN-12099 REST server prevents connection reuse for some resources", "committedDate": "2020-07-13T09:30:45Z", "type": "commit"}, {"oid": "da264f1496eb8bf1cfc06e6febc7bf44427ee6ce", "url": "https://github.com/infinispan/infinispan/commit/da264f1496eb8bf1cfc06e6febc7bf44427ee6ce", "message": "ISPN-12099 REST server prevents connection reuse for some resources", "committedDate": "2020-07-13T09:30:45Z", "type": "forcePushed"}]}