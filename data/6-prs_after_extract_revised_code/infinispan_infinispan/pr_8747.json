{"pr_number": 8747, "pr_title": "ISPN-12392  EndpointInteroperabilityTest.testStringKeysAndByteArrayValue failing", "pr_createdAt": "2020-10-06T09:29:43Z", "pr_url": "https://github.com/infinispan/infinispan/pull/8747", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI2MTI2Mw==", "url": "https://github.com/infinispan/infinispan/pull/8747#discussion_r500261263", "bodyText": "HotRodServer avoids the toString() calls by keeping a map cacheName -> CacheInfo, and in the CacheInfo a map KeyValuePair<MediaType, MediaType> -> encoded cache.\nThe only gotcha is that MediaType.toString() ignores the weight parameter, while equals() and hashCode() do not.  I'd rather we remove the weight parameter explicitly instead of ignoring it in toString(). FWIW HotRodServer ignores all parameters when creating the encoded cache (with getTypeSubType()), which is probably wrong.", "author": "danberindei", "createdAt": "2020-10-06T13:08:55Z", "path": "server/rest/src/main/java/org/infinispan/rest/cachemanager/RestCacheManager.java", "diffHunk": "@@ -71,14 +71,16 @@ public RestCacheManager(EmbeddedCacheManager instance, Predicate<? super String>\n          throw logger.missingRequiredMediaType(name);\n       }\n       checkCacheAvailable(name);\n-      String cacheKey = name + \"-\" + keyContentType.getTypeSubtype() + valueContentType.getTypeSubtype();\n+      String mapKey = keyContentType.toString();\n+      String mapValue = valueContentType.toString();", "originalCommit": "3a845cbc1aa8dfcb00b0c9c85fa3cd573efc647f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI3NjkyMQ==", "url": "https://github.com/infinispan/infinispan/pull/8747#discussion_r500276921", "bodyText": "ok, let me change it", "author": "gustavonalle", "createdAt": "2020-10-06T13:30:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI2MTI2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk3NTI4Mw==", "url": "https://github.com/infinispan/infinispan/pull/8747#discussion_r500975283", "bodyText": "Ok, I gave up of excluding this q parameter, it is almost never sent, only when interacting with the REST API from the browser as a GET (not XHR)", "author": "gustavonalle", "createdAt": "2020-10-07T12:35:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI2MTI2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "b26e0a592ff1a996073061847b9768506dbede70", "chunk": "diff --git a/server/rest/src/main/java/org/infinispan/rest/cachemanager/RestCacheManager.java b/server/rest/src/main/java/org/infinispan/rest/cachemanager/RestCacheManager.java\nindex 17c7f01921..842c69b649 100644\n--- a/server/rest/src/main/java/org/infinispan/rest/cachemanager/RestCacheManager.java\n+++ b/server/rest/src/main/java/org/infinispan/rest/cachemanager/RestCacheManager.java\n\n@@ -71,16 +71,14 @@ public RestCacheManager(EmbeddedCacheManager instance, Predicate<? super String>\n          throw logger.missingRequiredMediaType(name);\n       }\n       checkCacheAvailable(name);\n-      String mapKey = keyContentType.toString();\n-      String mapValue = valueContentType.toString();\n-      String cacheKey = name + \"-\" + mapKey + mapValue;\n+      String cacheKey = name + \"-\" + keyContentType.getTypeSubtype() + valueContentType.getTypeSubtype();\n       AdvancedCache<Object, V> cache = knownCaches.get(cacheKey);\n       if (cache == null) {\n          cache = instance.<Object, V>getCache(name).getAdvancedCache();\n          tryRegisterMigrationManager(cache);\n \n          cache = (AdvancedCache<Object, V>) cache.getAdvancedCache()\n-               .withMediaType(mapKey, mapValue)\n+               .withMediaType(keyContentType.toString(), valueContentType.toString())\n                .withFlags(IGNORE_RETURN_VALUES);\n \n          knownCaches.putIfAbsent(cacheKey, cache);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI2MzE2NA==", "url": "https://github.com/infinispan/infinispan/pull/8747#discussion_r500263164", "bodyText": "We should also verify that using a media type list with q parameters does not create a new encoded cache.", "author": "danberindei", "createdAt": "2020-10-06T13:11:30Z", "path": "server/rest/src/test/java/org/infinispan/rest/cachemanager/RestCacheManagerTest.java", "diffHunk": "@@ -60,17 +60,14 @@ public void shouldReuseEncodedCaches() {\n       // Verify they are stored internally\n       assertEquals(knownCaches.size(), 4);\n \n-\n-      // Requesting again with same media, or with same media but different parameters should reuse internal instance\n+      // Requesting again with same media but different parameters should not reuse internal instance\n       Mockito.reset(embeddedCacheManager);\n-      restCacheManager.getCache(\"cache2\", MediaType.MATCH_ALL, MediaType.TEXT_PLAIN, request);\n       restCacheManager.getCache(\"cache2\", MediaType.MATCH_ALL, MediaType.fromString(\"text/plain; charset=UTF-8\"), request);\n       restCacheManager.getCache(\"cache2\", MediaType.MATCH_ALL, MediaType.fromString(\"text/plain; charset=SHIFT-JIS\"), request);\n \n-      assertEquals(knownCaches.keySet().size(), 4);\n+      assertEquals(knownCaches.keySet().size(), 6);", "originalCommit": "3a845cbc1aa8dfcb00b0c9c85fa3cd573efc647f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk3NTg3Ng==", "url": "https://github.com/infinispan/infinispan/pull/8747#discussion_r500975876", "bodyText": "I decided to take into account every parameter from the MediaType to associate it with an encoded cache, so they are all available to the transcoders", "author": "gustavonalle", "createdAt": "2020-10-07T12:36:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI2MzE2NA=="}], "type": "inlineReview", "revised_code": {"commit": "b26e0a592ff1a996073061847b9768506dbede70", "chunk": "diff --git a/server/rest/src/test/java/org/infinispan/rest/cachemanager/RestCacheManagerTest.java b/server/rest/src/test/java/org/infinispan/rest/cachemanager/RestCacheManagerTest.java\nindex a0fafb75cb..dc46be127c 100644\n--- a/server/rest/src/test/java/org/infinispan/rest/cachemanager/RestCacheManagerTest.java\n+++ b/server/rest/src/test/java/org/infinispan/rest/cachemanager/RestCacheManagerTest.java\n\n@@ -60,14 +60,17 @@ public void shouldReuseEncodedCaches() {\n       // Verify they are stored internally\n       assertEquals(knownCaches.size(), 4);\n \n-      // Requesting again with same media but different parameters should not reuse internal instance\n+\n+      // Requesting again with same media, or with same media but different parameters should reuse internal instance\n       Mockito.reset(embeddedCacheManager);\n+      restCacheManager.getCache(\"cache2\", MediaType.MATCH_ALL, MediaType.TEXT_PLAIN, request);\n       restCacheManager.getCache(\"cache2\", MediaType.MATCH_ALL, MediaType.fromString(\"text/plain; charset=UTF-8\"), request);\n       restCacheManager.getCache(\"cache2\", MediaType.MATCH_ALL, MediaType.fromString(\"text/plain; charset=SHIFT-JIS\"), request);\n \n-      assertEquals(knownCaches.keySet().size(), 6);\n+      assertEquals(knownCaches.keySet().size(), 4);\n \n       Mockito.verify(embeddedCacheManager, never()).getCache(\"cache1\");\n+      Mockito.verify(embeddedCacheManager, never()).getCache(\"cache2\");\n    }\n \n    @Override\n"}}, {"oid": "b26e0a592ff1a996073061847b9768506dbede70", "url": "https://github.com/infinispan/infinispan/commit/b26e0a592ff1a996073061847b9768506dbede70", "message": "ISPN-12392 Fix outdated comments in test", "committedDate": "2020-10-06T15:36:05Z", "type": "commit"}, {"oid": "8c3f74c0bccb3d70ea7209f04c31bf4acf5881fc", "url": "https://github.com/infinispan/infinispan/commit/8c3f74c0bccb3d70ea7209f04c31bf4acf5881fc", "message": "ISPN-12392 EndpointInteroperabilityTest.testStringKeysAndByteArrayValue failing\n\n* Refactor knownCaches from REST and HotRod\n* Avoid calling toString on MediaType\n* Avoid filtering parameters when caching MediaTypes", "committedDate": "2020-10-07T12:33:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM5NDUwNw==", "url": "https://github.com/infinispan/infinispan/pull/8747#discussion_r502394507", "bodyText": "Love the explicit generic types!", "author": "danberindei", "createdAt": "2020-10-09T12:32:33Z", "path": "core/src/main/java/org/infinispan/AdvancedCache.java", "diffHunk": "@@ -826,9 +827,17 @@ default V merge(K key, V value, SerializableBiFunction<? super V, ? super V, ? e\n     * @param valueMediaType {@link org.infinispan.commons.dataconversion} for the values.\n     * @return an instance of {@link AdvancedCache} where all data will formatted according to the supplied {@link\n     * org.infinispan.commons.dataconversion.MediaType}.\n+    *\n+    * @deprecated Use {@link #withMediaType(MediaType, MediaType)} instead.\n     */\n+   @Deprecated\n    AdvancedCache<?, ?> withMediaType(String keyMediaType, String valueMediaType);\n \n+   /**\n+    * @see #withMediaType(String, String)\n+    */\n+   <K1, V1> AdvancedCache<K1, V1> withMediaType(MediaType keyMediaType, MediaType valueMediaType);", "originalCommit": "8c3f74c0bccb3d70ea7209f04c31bf4acf5881fc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ4MzIwOA==", "url": "https://github.com/infinispan/infinispan/pull/8747#discussion_r502483208", "bodyText": "You missed a cast that's not needed any more on line 25", "author": "danberindei", "createdAt": "2020-10-09T14:50:02Z", "path": "server/tests/src/test/java/org/infinispan/server/persistence/CustomNonBlockingStore.java", "diffHunk": "@@ -23,7 +23,7 @@\n    public CompletionStage<Void> start(InitializationContext ctx) {\n       marshallableEntryFactory = ctx.getMarshallableEntryFactory();\n       AdvancedCache<String, String> object = (AdvancedCache) ctx.getCache().getAdvancedCache()\n-            .withMediaType(MediaType.APPLICATION_OBJECT_TYPE, MediaType.APPLICATION_OBJECT_TYPE);\n+            .withMediaType(MediaType.APPLICATION_OBJECT, MediaType.APPLICATION_OBJECT);", "originalCommit": "8c3f74c0bccb3d70ea7209f04c31bf4acf5881fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ5ODA5NA==", "url": "https://github.com/infinispan/infinispan/pull/8747#discussion_r502498094", "bodyText": "removed", "author": "gustavonalle", "createdAt": "2020-10-09T15:10:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ4MzIwOA=="}], "type": "inlineReview", "revised_code": {"commit": "741e62321e739e53a358a988e092c001087a75ef", "chunk": "diff --git a/server/tests/src/test/java/org/infinispan/server/persistence/CustomNonBlockingStore.java b/server/tests/src/test/java/org/infinispan/server/persistence/CustomNonBlockingStore.java\nindex 48f42b5764..71b7d9134e 100644\n--- a/server/tests/src/test/java/org/infinispan/server/persistence/CustomNonBlockingStore.java\n+++ b/server/tests/src/test/java/org/infinispan/server/persistence/CustomNonBlockingStore.java\n\n@@ -22,8 +23,7 @@\n    @Override\n    public CompletionStage<Void> start(InitializationContext ctx) {\n       marshallableEntryFactory = ctx.getMarshallableEntryFactory();\n-      AdvancedCache<String, String> object = (AdvancedCache) ctx.getCache().getAdvancedCache()\n-            .withMediaType(MediaType.APPLICATION_OBJECT, MediaType.APPLICATION_OBJECT);\n+      AdvancedCache<String, String> object = ctx.getCache().getAdvancedCache().withMediaType(APPLICATION_OBJECT, APPLICATION_OBJECT);\n       keyDataConversion = object.getKeyDataConversion();\n       valueDataConversion = object.getValueDataConversion();\n       return CompletableFutures.completedNull();\n"}}, {"oid": "741e62321e739e53a358a988e092c001087a75ef", "url": "https://github.com/infinispan/infinispan/commit/741e62321e739e53a358a988e092c001087a75ef", "message": "ISPN-12392 EndpointInteroperabilityTest.testStringKeysAndByteArrayValue failing\n\n* Refactor knownCaches from REST and HotRod\n* Avoid calling toString on MediaType\n* Avoid filtering parameters when caching MediaTypes", "committedDate": "2020-10-09T15:10:09Z", "type": "commit"}, {"oid": "741e62321e739e53a358a988e092c001087a75ef", "url": "https://github.com/infinispan/infinispan/commit/741e62321e739e53a358a988e092c001087a75ef", "message": "ISPN-12392 EndpointInteroperabilityTest.testStringKeysAndByteArrayValue failing\n\n* Refactor knownCaches from REST and HotRod\n* Avoid calling toString on MediaType\n* Avoid filtering parameters when caching MediaTypes", "committedDate": "2020-10-09T15:10:09Z", "type": "forcePushed"}]}