{"pr_number": 8496, "pr_title": "ISPN-12036 Automatically register SerializationContextInitializers de\u2026", "pr_createdAt": "2020-06-22T09:23:27Z", "pr_url": "https://github.com/infinispan/infinispan/pull/8496", "timeline": [{"oid": "941272139f24303a123f8cc4aee10a520522436b", "url": "https://github.com/infinispan/infinispan/commit/941272139f24303a123f8cc4aee10a520522436b", "message": "ISPN-12036 Automatically register SerializationContextInitializers declared in services", "committedDate": "2020-06-22T08:43:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA1MjcwMw==", "url": "https://github.com/infinispan/infinispan/pull/8496#discussion_r449052703", "bodyText": "Providing more detail on what I said before, here I was expecting the service loader would be used only if there are no manually configured SCI's in globalConfiguration.serialization().\nThe auto-registration is nice for simple use cases, which might account for 90% real use cases. But it cannot give you any way out of situations when schemas are conflicting for any reason.\nTo support debugging of such situations I propose adding INFO logging here, with the names of all SCI's being registred. And after the registration I would also dump the eventual errors, with ERROR level immediately.", "author": "anistor", "createdAt": "2020-07-02T14:42:16Z", "path": "remote-query/remote-query-server/src/main/java/org/infinispan/query/remote/impl/ProtobufMetadataManagerImpl.java", "diffHunk": "@@ -95,6 +95,7 @@ void start() {\n             getProtobufMetadataCacheConfig(globalConfiguration).build(),\n             EnumSet.of(InternalCacheRegistry.Flag.USER, InternalCacheRegistry.Flag.PROTECTED, InternalCacheRegistry.Flag.PERSISTENT));\n \n+      processSerializationContextInitializer(ServiceFinder.load(SerializationContextInitializer.class, globalConfiguration.classLoader()));", "originalCommit": "941272139f24303a123f8cc4aee10a520522436b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}