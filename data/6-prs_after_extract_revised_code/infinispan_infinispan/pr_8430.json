{"pr_number": 8430, "pr_title": "Server Testsuite changes for Native Image", "pr_createdAt": "2020-06-04T16:47:44Z", "pr_url": "https://github.com/infinispan/infinispan/pull/8430", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUwNTQwNw==", "url": "https://github.com/infinispan/infinispan/pull/8430#discussion_r435505407", "bodyText": "Interesting. Makes me think we should support env and property replacement in batches", "author": "tristantarrant", "createdAt": "2020-06-04T19:40:40Z", "path": "server/tests/src/test/java/org/infinispan/server/cli/CliIT.java", "diffHunk": "@@ -94,25 +101,46 @@ public void testCliInteractive() {\n    }\n \n    @Test\n-   public void testCliBatch() {\n-      AeshTestShell shell = new AeshTestShell();\n-      CLI.main(shell, new String[]{\"-f\", this.getClass().getResource(\"/cli/batch.cli\").getPath()});\n-      shell.assertContains(\"Hi CLI\");\n-      shell.assertContains(\"batch1\");\n+   public void testCliBatch() throws IOException {\n+      // Create batch file programmatically so that we can supply the correct server address for the connect command:\n+      Path testPath = Paths.get(CommonsTestingUtil.tmpDirectory(CliIT.class));\n+      testPath.toFile().mkdirs();\n+      try {\n+         Path batchFilePath = testPath.resolve(\"batch.cli\").toAbsolutePath();\n+         try (PrintWriter out = new PrintWriter(Files.newBufferedWriter(batchFilePath))) {\n+            out.println(\"echo Hi CLI\");\n+            out.printf(\"connect %s:11222\\n\", hostAddress());", "originalCommit": "c3e4422e0fea726ee83c0609f846c68f98321390", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc4MzAwNQ==", "url": "https://github.com/infinispan/infinispan/pull/8430#discussion_r435783005", "bodyText": "That would be great \ud83d\ude42", "author": "ryanemerson", "createdAt": "2020-06-05T08:54:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUwNTQwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg4ODEyMw==", "url": "https://github.com/infinispan/infinispan/pull/8430#discussion_r435888123", "bodyText": "#8435", "author": "tristantarrant", "createdAt": "2020-06-05T12:28:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUwNTQwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkxMzY3MQ==", "url": "https://github.com/infinispan/infinispan/pull/8430#discussion_r435913671", "bodyText": "Rebased on your commit. Much simpler", "author": "ryanemerson", "createdAt": "2020-06-05T13:17:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUwNTQwNw=="}], "type": "inlineReview", "revised_code": {"commit": "cd05d3ac43d35fd025cb2394767f2b3c5678cb1c", "chunk": "diff --git a/server/tests/src/test/java/org/infinispan/server/cli/CliIT.java b/server/tests/src/test/java/org/infinispan/server/cli/CliIT.java\nindex 07c59ad67b..e543db4fb1 100644\n--- a/server/tests/src/test/java/org/infinispan/server/cli/CliIT.java\n+++ b/server/tests/src/test/java/org/infinispan/server/cli/CliIT.java\n\n@@ -101,32 +94,12 @@ public void testCliInteractive() {\n    }\n \n    @Test\n-   public void testCliBatch() throws IOException {\n-      // Create batch file programmatically so that we can supply the correct server address for the connect command:\n-      Path testPath = Paths.get(CommonsTestingUtil.tmpDirectory(CliIT.class));\n-      testPath.toFile().mkdirs();\n-      try {\n-         Path batchFilePath = testPath.resolve(\"batch.cli\").toAbsolutePath();\n-         try (PrintWriter out = new PrintWriter(Files.newBufferedWriter(batchFilePath))) {\n-            out.println(\"echo Hi CLI\");\n-            out.printf(\"connect %s:11222\\n\", hostAddress());\n-            out.println(\"ls\");\n-            out.println(\"cd caches\");\n-            out.println(\"ls\");\n-            out.println(\"create cache --template=org.infinispan.DIST_SYNC batch1\");\n-            out.println(\"cd batch1\");\n-            out.println(\"put k1 batch1\");\n-            out.println(\"get k1\");\n-            out.println(\"disconnect\");\n-            out.flush();\n-         }\n-         AeshTestShell shell = new AeshTestShell();\n-         CLI.main(shell, new String[]{\"-f\", batchFilePath.toString()});\n-         shell.assertContains(\"Hi CLI\");\n-         shell.assertContains(\"batch1\");\n-      } finally {\n-         Util.recursiveFileRemove(testPath.toFile());\n-      }\n+   public void testCliBatch() {\n+      System.setProperty(\"serverAddress\", hostAddress());\n+      AeshTestShell shell = new AeshTestShell();\n+      CLI.main(shell, new String[]{\"-f\", this.getClass().getResource(\"/cli/batch.cli\").getPath()});\n+      shell.assertContains(\"Hi CLI running on \" + System.getProperty(\"os.arch\"));\n+      shell.assertContains(\"batch1\");\n    }\n \n    @Test\n"}}, {"oid": "d5087706d12871c2b67b70dd8b7912f8b92d4fd5", "url": "https://github.com/infinispan/infinispan/commit/d5087706d12871c2b67b70dd8b7912f8b92d4fd5", "message": "ISPN-11948 server/tests HotRod clients should utilise the ProtoStreamMarshaller", "committedDate": "2020-06-05T12:00:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg3NTk0Mw==", "url": "https://github.com/infinispan/infinispan/pull/8430#discussion_r435875943", "bodyText": "@tristantarrant I couldn't think of a better way of accomplishing this whilst keeping infinispan-jboss-marshalling on the classpath and making it so by default the tests utilise ProtoStream. In 12 we should probably remove the automatic configuration of GenericJbossMarshaller when infinispan-jboss-marshalling is present on the classpath.", "author": "ryanemerson", "createdAt": "2020-06-05T12:04:00Z", "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/api/HotRodTestClientDriver.java", "diffHunk": "@@ -31,18 +33,32 @@ public HotRodTestClientDriver(TestServer testServer, TestClient testClient) {\n          // Configure admin user by default\n          builder.security().authentication().username(TestUser.ADMIN.getUser()).password(TestUser.ADMIN.getPassword());\n       }\n-\n       this.clientConfiguration = builder;\n    }\n \n    /**\n-    * Provide a custom client configuration to connect to the server\n+    * Provide a custom client configuration to connect to the server. This method always overrides the configured marshaller\n+    * so if a marshaller other than the default {@link ProtoStreamMarshaller} is required, a subsequent call to\n+    * {@link #withMarshaller(Class)} is required.\n     *\n     * @param clientConfiguration\n     * @return the current {@link HotRodTestClientDriver} instance with the client configuration override\n     */\n    public HotRodTestClientDriver withClientConfiguration(ConfigurationBuilder clientConfiguration) {\n       this.clientConfiguration = clientConfiguration;\n+      // Explicitly configure the ProtoStreamMarshaller as the jboss-marshalling module is on the classpath\n+      this.clientConfiguration.marshaller(ProtoStreamMarshaller.class);\n+      return this;\n+   }\n+\n+   /**\n+    * The {@link Marshaller} to be used by the client.\n+    *\n+    * @param marshallerClass\n+    * @return the current {@link HotRodTestClientDriver} instance with the Marshaller configuration override\n+    */\n+   public HotRodTestClientDriver withMarshaller(Class<? extends Marshaller> marshallerClass) {", "originalCommit": "d5087706d12871c2b67b70dd8b7912f8b92d4fd5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAzMDg1Ng==", "url": "https://github.com/infinispan/infinispan/pull/8430#discussion_r436030856", "bodyText": "https://issues.redhat.com/browse/ISPN-11974", "author": "ryanemerson", "createdAt": "2020-06-05T16:27:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg3NTk0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "9538d3b959327e9fc310d18539401566a8f3b0a5", "chunk": "diff --git a/server/testdriver/core/src/main/java/org/infinispan/server/test/api/HotRodTestClientDriver.java b/server/testdriver/core/src/main/java/org/infinispan/server/test/api/HotRodTestClientDriver.java\nindex a27e134f75..80dec767e0 100644\n--- a/server/testdriver/core/src/main/java/org/infinispan/server/test/api/HotRodTestClientDriver.java\n+++ b/server/testdriver/core/src/main/java/org/infinispan/server/test/api/HotRodTestClientDriver.java\n\n@@ -33,32 +31,18 @@ public HotRodTestClientDriver(TestServer testServer, TestClient testClient) {\n          // Configure admin user by default\n          builder.security().authentication().username(TestUser.ADMIN.getUser()).password(TestUser.ADMIN.getPassword());\n       }\n+\n       this.clientConfiguration = builder;\n    }\n \n    /**\n-    * Provide a custom client configuration to connect to the server. This method always overrides the configured marshaller\n-    * so if a marshaller other than the default {@link ProtoStreamMarshaller} is required, a subsequent call to\n-    * {@link #withMarshaller(Class)} is required.\n+    * Provide a custom client configuration to connect to the server\n     *\n     * @param clientConfiguration\n     * @return the current {@link HotRodTestClientDriver} instance with the client configuration override\n     */\n    public HotRodTestClientDriver withClientConfiguration(ConfigurationBuilder clientConfiguration) {\n       this.clientConfiguration = clientConfiguration;\n-      // Explicitly configure the ProtoStreamMarshaller as the jboss-marshalling module is on the classpath\n-      this.clientConfiguration.marshaller(ProtoStreamMarshaller.class);\n-      return this;\n-   }\n-\n-   /**\n-    * The {@link Marshaller} to be used by the client.\n-    *\n-    * @param marshallerClass\n-    * @return the current {@link HotRodTestClientDriver} instance with the Marshaller configuration override\n-    */\n-   public HotRodTestClientDriver withMarshaller(Class<? extends Marshaller> marshallerClass) {\n-      this.clientConfiguration.marshaller(marshallerClass);\n       return this;\n    }\n \n"}}, {"oid": "cd05d3ac43d35fd025cb2394767f2b3c5678cb1c", "url": "https://github.com/infinispan/infinispan/commit/cd05d3ac43d35fd025cb2394767f2b3c5678cb1c", "message": "ISPN-11948 server/tests HotRod clients should utilise the ProtoStreamMarshaller", "committedDate": "2020-06-05T13:15:43Z", "type": "forcePushed"}, {"oid": "9b411a91f7fd35414c86404afb579f97badbee42", "url": "https://github.com/infinispan/infinispan/commit/9b411a91f7fd35414c86404afb579f97badbee42", "message": "ISPN-11948 server/tests HotRod clients should utilise the ProtoStreamMarshaller", "committedDate": "2020-06-05T16:18:19Z", "type": "forcePushed"}, {"oid": "6a3d8c1a38c5f24c02136a20986b51b92f69a632", "url": "https://github.com/infinispan/infinispan/commit/6a3d8c1a38c5f24c02136a20986b51b92f69a632", "message": "ISPN-11948 server/tests HotRod clients should utilise the ProtoStreamMarshaller", "committedDate": "2020-06-08T09:12:37Z", "type": "forcePushed"}, {"oid": "9538d3b959327e9fc310d18539401566a8f3b0a5", "url": "https://github.com/infinispan/infinispan/commit/9538d3b959327e9fc310d18539401566a8f3b0a5", "message": "ISPN-11850 Server tests updated to work with the CONTAINER driver\n\nThe following tests still fail in CONTAINER mode:\n- RollingUpgradeIT\n- AuthenticationKerberosIT\n- AuthenticationKeyCloakIT\n- AuthorizationKerberosIT", "committedDate": "2020-06-09T09:48:21Z", "type": "commit"}, {"oid": "f3ff568af70ed2f2bcc7f87272efebbe2e52f1a6", "url": "https://github.com/infinispan/infinispan/commit/f3ff568af70ed2f2bcc7f87272efebbe2e52f1a6", "message": "ISPN-11936 Allow configuration files to be copied from Jars", "committedDate": "2020-06-09T09:48:21Z", "type": "commit"}, {"oid": "f67e8196e191b7c8ffacd8e4156037bae4c296af", "url": "https://github.com/infinispan/infinispan/commit/f67e8196e191b7c8ffacd8e4156037bae4c296af", "message": "ISPN-11936 Don't assert on heap.init as not present in native build", "committedDate": "2020-06-09T09:48:21Z", "type": "commit"}, {"oid": "0146cafc8c75e609a2344c804d476ad0c8970b0d", "url": "https://github.com/infinispan/infinispan/commit/0146cafc8c75e609a2344c804d476ad0c8970b0d", "message": "ISPN-11948 server/tests HotRod clients should utilise the ProtoStreamMarshaller", "committedDate": "2020-06-09T09:48:21Z", "type": "commit"}, {"oid": "d9382e2fc2c7e367872bbb59c9f4b2a9979b6c47", "url": "https://github.com/infinispan/infinispan/commit/d9382e2fc2c7e367872bbb59c9f4b2a9979b6c47", "message": "ISPN-11850 RollingUpgradeIT now works with the EMBEDDED and CONTAINER driver\n\nThreadLeaks removed from the tests as the RestClient instances are now\nclosed after the test has completed.", "committedDate": "2020-06-09T09:48:21Z", "type": "forcePushed"}, {"oid": "30823b4c1454752c1ca7fbc50ad7895a246de3bb", "url": "https://github.com/infinispan/infinispan/commit/30823b4c1454752c1ca7fbc50ad7895a246de3bb", "message": "ISPN-11850 RollingUpgradeIT now works with the EMBEDDED and CONTAINER driver\n\nThreadLeaks removed from the tests as the RestClient instances are now\nclosed after the test has completed.", "committedDate": "2020-06-09T10:41:50Z", "type": "commit"}, {"oid": "30823b4c1454752c1ca7fbc50ad7895a246de3bb", "url": "https://github.com/infinispan/infinispan/commit/30823b4c1454752c1ca7fbc50ad7895a246de3bb", "message": "ISPN-11850 RollingUpgradeIT now works with the EMBEDDED and CONTAINER driver\n\nThreadLeaks removed from the tests as the RestClient instances are now\nclosed after the test has completed.", "committedDate": "2020-06-09T10:41:50Z", "type": "forcePushed"}]}