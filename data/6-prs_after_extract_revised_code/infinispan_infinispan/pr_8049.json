{"pr_number": 8049, "pr_title": "ISPN-11464 Make possible to override table manipulation configuration from AbstractStringBasedCacheStore", "pr_createdAt": "2020-03-12T15:31:14Z", "pr_url": "https://github.com/infinispan/infinispan/pull/8049", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxNTU4NA==", "url": "https://github.com/infinispan/infinispan/pull/8049#discussion_r391715584", "bodyText": "This was previously required by the jdg-functional-tests I think. Are all of those tests now in the Infinispan repo? and is this definitely not needed?", "author": "ryanemerson", "createdAt": "2020-03-12T15:50:01Z", "path": "persistence/jdbc/src/test/java/org/infinispan/persistence/jdbc/stringbased/StringStoreWithManagedConnectionFunctionalTest.java", "diffHunk": "@@ -13,30 +10,10 @@\n @Test(groups = \"functional\", testName = \"persistence.jdbc.stringbased.StringStoreWithManagedConnectionFunctionalTest\")\n public class StringStoreWithManagedConnectionFunctionalTest extends AbstractStringBasedCacheStore {\n \n-    private ManagedConnectionFactoryConfiguration customFactoryConfiguration;\n-\n-    public StringStoreWithManagedConnectionFunctionalTest() {}\n-\n-    @SuppressWarnings(\"unused\")\n-    public StringStoreWithManagedConnectionFunctionalTest(ManagedConnectionFactoryConfiguration customFactoryConfiguration) {\n-        this.customFactoryConfiguration = customFactoryConfiguration;", "originalCommit": "e89f6cf23965162e71b4df211fe133555092c033", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgzMzM1MA==", "url": "https://github.com/infinispan/infinispan/pull/8049#discussion_r391833350", "bodyText": "@ryanemerson you are right, but now I change the approach that I'm using on jdg-functional-tests, I'm overriding the methods that I need during the instantiation.\nOn jdg-functional-tests now i'm using:\nnew StringStoreWithManagedConnectionFunctionalTest() {\n  @Override\n      protected ConnectionFactory getConnectionFactory(JdbcStringBasedStoreConfigurationBuilder storeBuilder) {\n                ...\n            }\n\n   @Override\n       public void setTableManipulation(JdbcStringBasedStoreConfigurationBuilder storeBuilder) {\n               ...\n            }", "author": "gustavolira", "createdAt": "2020-03-12T19:07:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxNTU4NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxNjQ4MQ==", "url": "https://github.com/infinispan/infinispan/pull/8049#discussion_r391716481", "bodyText": "Based on our previous discussions, it seems like this change is fixing your issue because we're no longer using the ManagedConnectionFactory", "author": "ryanemerson", "createdAt": "2020-03-12T15:51:23Z", "path": "persistence/jdbc/src/test/java/org/infinispan/persistence/jdbc/stringbased/StringStoreWithManagedConnectionFunctionalTest.java", "diffHunk": "@@ -13,30 +10,10 @@\n @Test(groups = \"functional\", testName = \"persistence.jdbc.stringbased.StringStoreWithManagedConnectionFunctionalTest\")\n public class StringStoreWithManagedConnectionFunctionalTest extends AbstractStringBasedCacheStore {\n \n-    private ManagedConnectionFactoryConfiguration customFactoryConfiguration;\n-\n-    public StringStoreWithManagedConnectionFunctionalTest() {}\n-\n-    @SuppressWarnings(\"unused\")\n-    public StringStoreWithManagedConnectionFunctionalTest(ManagedConnectionFactoryConfiguration customFactoryConfiguration) {\n-        this.customFactoryConfiguration = customFactoryConfiguration;\n-    }\n-\n     @Override\n     protected ConnectionFactory getConnectionFactory(JdbcStringBasedStoreConfigurationBuilder storeBuilder) {\n-        if(customFactoryConfiguration != null) {\n-            ConnectionFactoryConfiguration connectionFactoryConfiguration = storeBuilder\n-                    .dataSource()\n-                    .read(customFactoryConfiguration)\n-                    .create();\n-            final ConnectionFactory connectionFactory = ConnectionFactory.getConnectionFactory(ManagedConnectionFactory.class);\n-            connectionFactory.start(connectionFactoryConfiguration, connectionFactory.getClass().getClassLoader());\n-            return connectionFactory;\n-        } else {\n-            SimpleConnectionFactory simpleFactory = new SimpleConnectionFactory();\n-            simpleFactory.start(configureSimpleConnectionFactory(storeBuilder).create(), Thread.currentThread().getContextClassLoader());\n-            return simpleFactory;\n-        }\n-\n+        SimpleConnectionFactory simpleFactory = new SimpleConnectionFactory();", "originalCommit": "e89f6cf23965162e71b4df211fe133555092c033", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgzMzMxNA==", "url": "https://github.com/infinispan/infinispan/pull/8049#discussion_r391833314", "bodyText": "Actually on jdg-functional-tests I'm overriding this method and testing using ManagedConnectionFactory", "author": "gustavolira", "createdAt": "2020-03-12T19:07:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxNjQ4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0MzQzNg==", "url": "https://github.com/infinispan/infinispan/pull/8049#discussion_r392143436", "bodyText": "Great, just wanted to make sure \ud83d\ude42", "author": "ryanemerson", "createdAt": "2020-03-13T10:24:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxNjQ4MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxNjY5NQ==", "url": "https://github.com/infinispan/infinispan/pull/8049#discussion_r391716695", "bodyText": "As this method is private, I don't understand what value it adds.", "author": "ryanemerson", "createdAt": "2020-03-12T15:51:42Z", "path": "persistence/jdbc/src/test/java/org/infinispan/persistence/jdbc/stringbased/AbstractStringBasedCacheStore.java", "diffHunk": "@@ -136,6 +136,10 @@ public EmbeddedCacheManager configureCacheManager(boolean passivation, boolean p\n         return defaultCacheManager;\n     }\n \n+    private void setTableManipulation(JdbcStringBasedStoreConfigurationBuilder storeBuilder) {", "originalCommit": "e89f6cf23965162e71b4df211fe133555092c033", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgzMzk1OA==", "url": "https://github.com/infinispan/infinispan/pull/8049#discussion_r391833958", "bodyText": "Good catch, this method should be public, I will update the commit", "author": "gustavolira", "createdAt": "2020-03-12T19:08:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxNjY5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE0NDE0NQ==", "url": "https://github.com/infinispan/infinispan/pull/8049#discussion_r392144145", "bodyText": "Shouldn't it be protected as it's only required by the implementations?", "author": "ryanemerson", "createdAt": "2020-03-13T10:26:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxNjY5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE4NTU3OQ==", "url": "https://github.com/infinispan/infinispan/pull/8049#discussion_r392185579", "bodyText": "@ryanemerson updated", "author": "gustavolira", "createdAt": "2020-03-13T11:58:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxNjY5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "9b4df174408e1add905234851ac13a80388583bc", "chunk": "diff --git a/persistence/jdbc/src/test/java/org/infinispan/persistence/jdbc/stringbased/AbstractStringBasedCacheStore.java b/persistence/jdbc/src/test/java/org/infinispan/persistence/jdbc/stringbased/AbstractStringBasedCacheStore.java\nindex 881dd3fe2e..e2353a01e5 100644\n--- a/persistence/jdbc/src/test/java/org/infinispan/persistence/jdbc/stringbased/AbstractStringBasedCacheStore.java\n+++ b/persistence/jdbc/src/test/java/org/infinispan/persistence/jdbc/stringbased/AbstractStringBasedCacheStore.java\n\n@@ -136,7 +136,7 @@ public EmbeddedCacheManager configureCacheManager(boolean passivation, boolean p\n         return defaultCacheManager;\n     }\n \n-    private void setTableManipulation(JdbcStringBasedStoreConfigurationBuilder storeBuilder) {\n+    public void setTableManipulation(JdbcStringBasedStoreConfigurationBuilder storeBuilder) {\n         buildTableManipulation(storeBuilder.table());\n     }\n \n"}}, {"oid": "9b4df174408e1add905234851ac13a80388583bc", "url": "https://github.com/infinispan/infinispan/commit/9b4df174408e1add905234851ac13a80388583bc", "message": "ISPN-11464 Make possible to override table manipulation configuration from AbstractStringBasedCacheStore", "committedDate": "2020-03-12T19:09:39Z", "type": "forcePushed"}, {"oid": "ecd58977869a976c6d4696cbf214a19aa8bcfb18", "url": "https://github.com/infinispan/infinispan/commit/ecd58977869a976c6d4696cbf214a19aa8bcfb18", "message": "ISPN-11464 Make possible to override table manipulation configuration from AbstractStringBasedCacheStore", "committedDate": "2020-03-13T11:57:27Z", "type": "commit"}, {"oid": "ecd58977869a976c6d4696cbf214a19aa8bcfb18", "url": "https://github.com/infinispan/infinispan/commit/ecd58977869a976c6d4696cbf214a19aa8bcfb18", "message": "ISPN-11464 Make possible to override table manipulation configuration from AbstractStringBasedCacheStore", "committedDate": "2020-03-13T11:57:27Z", "type": "forcePushed"}]}