{"pr_number": 8841, "pr_title": "ISPN-12101 Credential Store", "pr_createdAt": "2020-11-10T14:00:35Z", "pr_url": "https://github.com/infinispan/infinispan/pull/8841", "timeline": [{"oid": "4fbfe9611d3de68d7bc6224e58b35d7ab630cad5", "url": "https://github.com/infinispan/infinispan/commit/4fbfe9611d3de68d7bc6224e58b35d7ab630cad5", "message": "ISPN-12101 Credential Store", "committedDate": "2020-11-10T14:09:20Z", "type": "forcePushed"}, {"oid": "f4d0e1efbe5f32b2c8b9e04cdcc73be9e3cf8c12", "url": "https://github.com/infinispan/infinispan/commit/f4d0e1efbe5f32b2c8b9e04cdcc73be9e3cf8c12", "message": "ISPN-12101 Credential Store", "committedDate": "2020-11-10T14:10:14Z", "type": "forcePushed"}, {"oid": "e6cc584a93e62504751a6b4562b388956ef28cbb", "url": "https://github.com/infinispan/infinispan/commit/e6cc584a93e62504751a6b4562b388956ef28cbb", "message": "ISPN-12101 Credential Store", "committedDate": "2020-11-10T14:12:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMwNTI1Nw==", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r521305257", "bodyText": "this method could be moved to org.infinispan.cli.impl.ContextAwareCommandInvocation. The User cli command uses a similar code to ask for the user's password.", "author": "pruivo", "createdAt": "2020-11-11T11:52:15Z", "path": "cli/src/main/java/org/infinispan/cli/commands/Credentials.java", "diffHunk": "@@ -0,0 +1,205 @@\n+package org.infinispan.cli.commands;\n+\n+import static org.infinispan.cli.logging.Messages.MSG;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.aesh.command.Command;\n+import org.aesh.command.CommandDefinition;\n+import org.aesh.command.CommandException;\n+import org.aesh.command.CommandResult;\n+import org.aesh.command.GroupCommandDefinition;\n+import org.aesh.command.impl.completer.FileOptionCompleter;\n+import org.aesh.command.option.Argument;\n+import org.aesh.command.option.Option;\n+import org.aesh.io.Resource;\n+import org.aesh.readline.Prompt;\n+import org.infinispan.cli.impl.ContextAwareCommandInvocation;\n+import org.kohsuke.MetaInfServices;\n+import org.wildfly.security.auth.server.IdentityCredentials;\n+import org.wildfly.security.credential.PasswordCredential;\n+import org.wildfly.security.credential.store.CredentialStore;\n+import org.wildfly.security.credential.store.CredentialStoreException;\n+import org.wildfly.security.credential.store.impl.KeyStoreCredentialStore;\n+import org.wildfly.security.password.interfaces.ClearPassword;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 12.0\n+ **/\n+@MetaInfServices(Command.class)\n+@GroupCommandDefinition(name = Credentials.CMD, description = \"Credential store operations\", groupCommands = {Credentials.Add.class, Credentials.Remove.class, Credentials.Ls.class})\n+public class Credentials extends CliCommand {\n+\n+   public static final String CMD = \"credentials\";\n+   public static final String STORE_TYPE = \"pkcs12\";\n+   public static final String CREDENTIALS_PATH = \"credentials.pfx\";\n+\n+   @Option(shortName = 'h', hasValue = false, overrideRequired = true)\n+   protected boolean help;\n+\n+   @Override\n+   public boolean isHelp() {\n+      return help;\n+   }\n+\n+   @Override\n+   public CommandResult exec(ContextAwareCommandInvocation invocation) {\n+      // This command serves only to wrap the sub-commands\n+      invocation.println(invocation.getHelpInfo());\n+      return CommandResult.FAILURE;\n+   }\n+\n+   static String getPasswordInteractively(ContextAwareCommandInvocation invocation, String prompt, String confirmPrompt) throws InterruptedException {", "originalCommit": "e6cc584a93e62504751a6b4562b388956ef28cbb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1c4354bf8df117b0d6c784b0ecf1c9c8f29748bd", "chunk": "diff --git a/cli/src/main/java/org/infinispan/cli/commands/Credentials.java b/cli/src/main/java/org/infinispan/cli/commands/Credentials.java\nindex 691d55aea1..b2f692f721 100644\n--- a/cli/src/main/java/org/infinispan/cli/commands/Credentials.java\n+++ b/cli/src/main/java/org/infinispan/cli/commands/Credentials.java\n\n@@ -2,6 +2,9 @@\n \n import static org.infinispan.cli.logging.Messages.MSG;\n \n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n import java.util.HashMap;\n import java.util.Map;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMwOTU0MA==", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r521309540", "bodyText": "nitpick: the prompt should be different if the file exists.\nSet a password for the credential store => if the file doesn't exist.\nsomething like Credential store password => if the file exists.", "author": "pruivo", "createdAt": "2020-11-11T12:00:42Z", "path": "cli/src/main/java/org/infinispan/cli/commands/Credentials.java", "diffHunk": "@@ -0,0 +1,205 @@\n+package org.infinispan.cli.commands;\n+\n+import static org.infinispan.cli.logging.Messages.MSG;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.aesh.command.Command;\n+import org.aesh.command.CommandDefinition;\n+import org.aesh.command.CommandException;\n+import org.aesh.command.CommandResult;\n+import org.aesh.command.GroupCommandDefinition;\n+import org.aesh.command.impl.completer.FileOptionCompleter;\n+import org.aesh.command.option.Argument;\n+import org.aesh.command.option.Option;\n+import org.aesh.io.Resource;\n+import org.aesh.readline.Prompt;\n+import org.infinispan.cli.impl.ContextAwareCommandInvocation;\n+import org.kohsuke.MetaInfServices;\n+import org.wildfly.security.auth.server.IdentityCredentials;\n+import org.wildfly.security.credential.PasswordCredential;\n+import org.wildfly.security.credential.store.CredentialStore;\n+import org.wildfly.security.credential.store.CredentialStoreException;\n+import org.wildfly.security.credential.store.impl.KeyStoreCredentialStore;\n+import org.wildfly.security.password.interfaces.ClearPassword;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 12.0\n+ **/\n+@MetaInfServices(Command.class)\n+@GroupCommandDefinition(name = Credentials.CMD, description = \"Credential store operations\", groupCommands = {Credentials.Add.class, Credentials.Remove.class, Credentials.Ls.class})\n+public class Credentials extends CliCommand {\n+\n+   public static final String CMD = \"credentials\";\n+   public static final String STORE_TYPE = \"pkcs12\";\n+   public static final String CREDENTIALS_PATH = \"credentials.pfx\";\n+\n+   @Option(shortName = 'h', hasValue = false, overrideRequired = true)\n+   protected boolean help;\n+\n+   @Override\n+   public boolean isHelp() {\n+      return help;\n+   }\n+\n+   @Override\n+   public CommandResult exec(ContextAwareCommandInvocation invocation) {\n+      // This command serves only to wrap the sub-commands\n+      invocation.println(invocation.getHelpInfo());\n+      return CommandResult.FAILURE;\n+   }\n+\n+   static String getPasswordInteractively(ContextAwareCommandInvocation invocation, String prompt, String confirmPrompt) throws InterruptedException {\n+      String password = null;\n+      while (password == null || password.isEmpty()) {\n+         password = invocation.getShell().readLine(new Prompt(prompt, '*'));\n+      }\n+      if (confirmPrompt != null) {\n+         String confirm = null;\n+         while (confirm == null || !confirm.equals(password)) {\n+            confirm = invocation.getShell().readLine(new Prompt(confirmPrompt, '*'));\n+         }\n+      }\n+      return password;\n+   }\n+\n+   static KeyStoreCredentialStore getKeyStoreCredentialStore(String path, String type, boolean create, char[] password) throws CredentialStoreException {\n+      KeyStoreCredentialStore store = new KeyStoreCredentialStore();\n+      final Map<String, String> map = new HashMap<>();\n+      map.put(\"location\", path);\n+      map.put(\"keyStoreType\", type);\n+      map.put(\"create\", Boolean.toString(create));\n+      store.initialize(\n+            map,\n+            new CredentialStore.CredentialSourceProtectionParameter(\n+                  IdentityCredentials.NONE.withCredential(new PasswordCredential(ClearPassword.createRaw(ClearPassword.ALGORITHM_CLEAR, password)))),\n+            null\n+      );\n+      return store;\n+   }\n+\n+   @CommandDefinition(name = Add.CMD, description = \"Adds a credential to a key store\")\n+   public static class Add extends CliCommand {\n+      public static final String CMD = \"add\";\n+\n+      @Argument(description = \"The name (alias) of the credential\", required = true)\n+      String alias;\n+\n+      @Option(description = \"The path to a keystore. A new one will be created if it doesn't exist.\", completer = FileOptionCompleter.class, defaultValue = CREDENTIALS_PATH)\n+      Resource path;\n+\n+      @Option(description = \"The password to protect the credential store\", shortName = 'p')\n+      String password;\n+\n+      @Option(description = \"The type of the credential store\", shortName = 't', defaultValue = STORE_TYPE)\n+      String type;\n+\n+      @Option(description = \"The credential to store\", shortName = 'c')\n+      String credential;\n+\n+      @Option(shortName = 'h', hasValue = false, overrideRequired = true)\n+      protected boolean help;\n+\n+      @Override\n+      public boolean isHelp() {\n+         return help;\n+      }\n+\n+      @Override\n+      public CommandResult exec(ContextAwareCommandInvocation invocation) throws CommandException {\n+         try {\n+            if (password == null) {\n+               password = getPasswordInteractively(invocation, MSG.credentialToolPassword(), path.exists() ? null : MSG.credentialToolPasswordConfirm());", "originalCommit": "e6cc584a93e62504751a6b4562b388956ef28cbb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMwOTc0Ng==", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r521309746", "bodyText": "ps. use the second prompt for remove/ls commands.", "author": "pruivo", "createdAt": "2020-11-11T12:01:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMwOTU0MA=="}], "type": "inlineReview", "revised_code": {"commit": "1c4354bf8df117b0d6c784b0ecf1c9c8f29748bd", "chunk": "diff --git a/cli/src/main/java/org/infinispan/cli/commands/Credentials.java b/cli/src/main/java/org/infinispan/cli/commands/Credentials.java\nindex 691d55aea1..b2f692f721 100644\n--- a/cli/src/main/java/org/infinispan/cli/commands/Credentials.java\n+++ b/cli/src/main/java/org/infinispan/cli/commands/Credentials.java\n\n@@ -2,6 +2,9 @@\n \n import static org.infinispan.cli.logging.Messages.MSG;\n \n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n import java.util.HashMap;\n import java.util.Map;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMxNTA2Nw==", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r521315067", "bodyText": "unused.", "author": "pruivo", "createdAt": "2020-11-11T12:11:57Z", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/ServerConfigurationBuilder.java", "diffHunk": "@@ -108,4 +109,13 @@ public void applySocketBinding(String bindingName, ProtocolServerConfigurationBu\n       }\n       builder.socketBinding(bindingName).host(host).port(port);\n    }\n+\n+   public <C extends Credential> C getCredential(String store, String alias, Class<C> type) {", "originalCommit": "e6cc584a93e62504751a6b4562b388956ef28cbb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjExNTYyMA==", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r522115620", "bodyText": "Removed", "author": "tristantarrant", "createdAt": "2020-11-12T13:45:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTMxNTA2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "1c4354bf8df117b0d6c784b0ecf1c9c8f29748bd", "chunk": "diff --git a/server/runtime/src/main/java/org/infinispan/server/configuration/ServerConfigurationBuilder.java b/server/runtime/src/main/java/org/infinispan/server/configuration/ServerConfigurationBuilder.java\nindex 30faa7a3c0..f332566660 100644\n--- a/server/runtime/src/main/java/org/infinispan/server/configuration/ServerConfigurationBuilder.java\n+++ b/server/runtime/src/main/java/org/infinispan/server/configuration/ServerConfigurationBuilder.java\n\n@@ -109,13 +108,4 @@ public void applySocketBinding(String bindingName, ProtocolServerConfigurationBu\n       }\n       builder.socketBinding(bindingName).host(host).port(port);\n    }\n-\n-   public <C extends Credential> C getCredential(String store, String alias, Class<C> type) {\n-      C credential = security.credentialStores().getCredential(store, alias, type);\n-      if (credential == null) {\n-         throw Server.log.unknownCredential(alias, store);\n-      } else {\n-         return credential;\n-      }\n-   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQxNzE4Mw==", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r521417183", "bodyText": "nitpick:\nI would change the parseLdapRealm() method to receive the ServerConfigurationBuilder like in parseOauth2Introspection and remove the change on the \"builder\" class.\nSame comment for parseKeyStore(), parseTrustStoreRealm() and parseDataSourceConnectionFactory()", "author": "pruivo", "createdAt": "2020-11-11T14:59:17Z", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/ServerConfigurationParser.java", "diffHunk": "@@ -514,6 +616,11 @@ private void parseLdapRealm(XMLExtendedStreamReader reader, LdapRealmConfigurati\n          }\n       }\n       Element element = nextElement(reader);\n+      if (element == Element.CREDENTIAL_REFERENCE) {\n+         String credential = parseCredentialReference(reader, ldapRealmConfigBuilder.serverConfigurationBuilder());\n+         ldapRealmConfigBuilder.credential(credential);", "originalCommit": "e6cc584a93e62504751a6b4562b388956ef28cbb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1c4354bf8df117b0d6c784b0ecf1c9c8f29748bd", "chunk": "diff --git a/server/runtime/src/main/java/org/infinispan/server/configuration/ServerConfigurationParser.java b/server/runtime/src/main/java/org/infinispan/server/configuration/ServerConfigurationParser.java\nindex 100f5125a1..1ef68acf36 100644\n--- a/server/runtime/src/main/java/org/infinispan/server/configuration/ServerConfigurationParser.java\n+++ b/server/runtime/src/main/java/org/infinispan/server/configuration/ServerConfigurationParser.java\n\n@@ -617,10 +628,17 @@ private void parseLdapRealm(XMLExtendedStreamReader reader, LdapRealmConfigurati\n       }\n       Element element = nextElement(reader);\n       if (element == Element.CREDENTIAL_REFERENCE) {\n+         if (credentialSet) {\n+            throw Server.log.cannotOverrideCredential(Element.LDAP_REALM.toString(), Attribute.CREDENTIAL.toString());\n+         }\n          String credential = parseCredentialReference(reader, ldapRealmConfigBuilder.serverConfigurationBuilder());\n          ldapRealmConfigBuilder.credential(credential);\n+         credentialSet = true;\n          element = nextElement(reader);\n       }\n+      if (!credentialSet) {\n+         throw Server.log.missingCredential(Element.LDAP_REALM.toString(), Attribute.CREDENTIAL.toString());\n+      }\n       if (element == Element.NAME_REWRITER) {\n          parseNameRewriter(reader, ldapRealmConfigBuilder);\n          element = nextElement(reader);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQxOTI4OA==", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r521419288", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               private static ElementDefinition ELEMENT_DEFINITION = new DefaultElementDefinition(Element.CREDENTIAL_STORE.toString());\n          \n          \n            \n               private static final ElementDefinition<CredentialStoreConfiguration> ELEMENT_DEFINITION = new DefaultElementDefinition<>(Element.CREDENTIAL_STORE.toString());", "author": "pruivo", "createdAt": "2020-11-11T15:02:19Z", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfiguration.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.infinispan.server.configuration.security;\n+\n+import org.infinispan.commons.configuration.ConfigurationInfo;\n+import org.infinispan.commons.configuration.attributes.AttributeDefinition;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.commons.configuration.elements.DefaultElementDefinition;\n+import org.infinispan.commons.configuration.elements.ElementDefinition;\n+import org.infinispan.server.configuration.Element;\n+import org.wildfly.security.credential.store.CredentialStoreSpi;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 12.0\n+ **/\n+public class CredentialStoreConfiguration implements ConfigurationInfo {\n+   static final AttributeDefinition<String> NAME = AttributeDefinition.builder(\"name\", null, String.class).build();\n+   static final AttributeDefinition<String> PATH = AttributeDefinition.builder(\"path\", null, String.class).build();\n+   static final AttributeDefinition<String> RELATIVE_TO = AttributeDefinition.builder(\"relativeTo\", null, String.class).build();\n+   static final AttributeDefinition<String> TYPE = AttributeDefinition.builder(\"type\", \"pkcs12\", String.class).build();\n+   static final AttributeDefinition<String> CREDENTIAL = AttributeDefinition.builder(\"credential\", null, String.class).build();\n+\n+   private final AttributeSet attributes;\n+   private final CredentialStoreSpi credentialStore;\n+\n+   static AttributeSet attributeDefinitionSet() {\n+      return new AttributeSet(CredentialStoreConfiguration.class, NAME, PATH, RELATIVE_TO, TYPE, CREDENTIAL);\n+   }\n+\n+   private static ElementDefinition ELEMENT_DEFINITION = new DefaultElementDefinition(Element.CREDENTIAL_STORE.toString());", "originalCommit": "e6cc584a93e62504751a6b4562b388956ef28cbb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1c4354bf8df117b0d6c784b0ecf1c9c8f29748bd", "chunk": "diff --git a/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfiguration.java b/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfiguration.java\nindex 1db9b09d0b..e0efbcc37c 100644\n--- a/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfiguration.java\n+++ b/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfiguration.java\n\n@@ -6,6 +6,7 @@\n import org.infinispan.commons.configuration.elements.DefaultElementDefinition;\n import org.infinispan.commons.configuration.elements.ElementDefinition;\n import org.infinispan.server.configuration.Element;\n+import org.infinispan.server.configuration.PasswordSerializer;\n import org.wildfly.security.credential.store.CredentialStoreSpi;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQxOTYwNA==", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r521419604", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               public ElementDefinition getElementDefinition() {\n          \n          \n            \n               public ElementDefinition<CredentialStoreConfiguration> getElementDefinition() {", "author": "pruivo", "createdAt": "2020-11-11T15:02:51Z", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfiguration.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.infinispan.server.configuration.security;\n+\n+import org.infinispan.commons.configuration.ConfigurationInfo;\n+import org.infinispan.commons.configuration.attributes.AttributeDefinition;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.commons.configuration.elements.DefaultElementDefinition;\n+import org.infinispan.commons.configuration.elements.ElementDefinition;\n+import org.infinispan.server.configuration.Element;\n+import org.wildfly.security.credential.store.CredentialStoreSpi;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 12.0\n+ **/\n+public class CredentialStoreConfiguration implements ConfigurationInfo {\n+   static final AttributeDefinition<String> NAME = AttributeDefinition.builder(\"name\", null, String.class).build();\n+   static final AttributeDefinition<String> PATH = AttributeDefinition.builder(\"path\", null, String.class).build();\n+   static final AttributeDefinition<String> RELATIVE_TO = AttributeDefinition.builder(\"relativeTo\", null, String.class).build();\n+   static final AttributeDefinition<String> TYPE = AttributeDefinition.builder(\"type\", \"pkcs12\", String.class).build();\n+   static final AttributeDefinition<String> CREDENTIAL = AttributeDefinition.builder(\"credential\", null, String.class).build();\n+\n+   private final AttributeSet attributes;\n+   private final CredentialStoreSpi credentialStore;\n+\n+   static AttributeSet attributeDefinitionSet() {\n+      return new AttributeSet(CredentialStoreConfiguration.class, NAME, PATH, RELATIVE_TO, TYPE, CREDENTIAL);\n+   }\n+\n+   private static ElementDefinition ELEMENT_DEFINITION = new DefaultElementDefinition(Element.CREDENTIAL_STORE.toString());\n+\n+   CredentialStoreConfiguration(AttributeSet attributes, CredentialStoreSpi credentialStore) {\n+      this.attributes = attributes.checkProtection();\n+      this.credentialStore = credentialStore;\n+   }\n+\n+   public CredentialStoreSpi getCredentialStore() {\n+      return credentialStore;\n+   }\n+\n+   @Override\n+   public AttributeSet attributes() {\n+      return attributes;\n+   }\n+\n+   @Override\n+   public ElementDefinition getElementDefinition() {", "originalCommit": "e6cc584a93e62504751a6b4562b388956ef28cbb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1c4354bf8df117b0d6c784b0ecf1c9c8f29748bd", "chunk": "diff --git a/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfiguration.java b/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfiguration.java\nindex 1db9b09d0b..e0efbcc37c 100644\n--- a/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfiguration.java\n+++ b/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfiguration.java\n\n@@ -6,6 +6,7 @@\n import org.infinispan.commons.configuration.elements.DefaultElementDefinition;\n import org.infinispan.commons.configuration.elements.ElementDefinition;\n import org.infinispan.server.configuration.Element;\n+import org.infinispan.server.configuration.PasswordSerializer;\n import org.wildfly.security.credential.store.CredentialStoreSpi;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQyMzE1NA==", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r521423154", "bodyText": "would it be better to always fail is alias==null? To avoid any chance of returning the wrong credential.", "author": "pruivo", "createdAt": "2020-11-11T15:08:00Z", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfigurationBuilder.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package org.infinispan.server.configuration.security;\n+\n+import static org.infinispan.server.configuration.security.CredentialStoreConfiguration.CREDENTIAL;\n+import static org.infinispan.server.configuration.security.CredentialStoreConfiguration.PATH;\n+import static org.infinispan.server.configuration.security.CredentialStoreConfiguration.RELATIVE_TO;\n+import static org.infinispan.server.configuration.security.CredentialStoreConfiguration.TYPE;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.infinispan.commons.CacheConfigurationException;\n+import org.infinispan.commons.configuration.Builder;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.configuration.parsing.ParseUtils;\n+import org.infinispan.server.Server;\n+import org.wildfly.security.auth.server.IdentityCredentials;\n+import org.wildfly.security.credential.Credential;\n+import org.wildfly.security.credential.PasswordCredential;\n+import org.wildfly.security.credential.store.CredentialStore;\n+import org.wildfly.security.credential.store.CredentialStoreException;\n+import org.wildfly.security.credential.store.CredentialStoreSpi;\n+import org.wildfly.security.credential.store.impl.KeyStoreCredentialStore;\n+import org.wildfly.security.password.interfaces.ClearPassword;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 12.0\n+ **/\n+public class CredentialStoreConfigurationBuilder implements Builder<CredentialStoreConfiguration> {\n+   private final AttributeSet attributes;\n+   private final CredentialStoresConfigurationBuilder credentialStoresConfigurationBuilder;\n+   private CredentialStoreSpi credentialStore;\n+\n+   CredentialStoreConfigurationBuilder(CredentialStoresConfigurationBuilder credentialStoresConfigurationBuilder) {\n+      this.attributes = CredentialStoreConfiguration.attributeDefinitionSet();\n+      this.credentialStoresConfigurationBuilder = credentialStoresConfigurationBuilder;\n+   }\n+\n+   public CredentialStoreConfigurationBuilder path(String value) {\n+      attributes.attribute(PATH).set(value);\n+      return this;\n+   }\n+\n+   public CredentialStoreConfigurationBuilder relativeTo(String relativeTo) {\n+      attributes.attribute(RELATIVE_TO).set(relativeTo);\n+      return this;\n+   }\n+\n+   public CredentialStoreConfigurationBuilder type(String type) {\n+      attributes.attribute(TYPE).set(type);\n+      return this;\n+   }\n+\n+   public CredentialStoreConfigurationBuilder credential(String credential) {\n+      attributes.attribute(CREDENTIAL).set(credential);\n+      return this;\n+   }\n+\n+   @Override\n+   public void validate() {\n+\n+   }\n+\n+   @Override\n+   public CredentialStoreConfiguration create() {\n+      return new CredentialStoreConfiguration(attributes.protect(), build());\n+   }\n+\n+   @Override\n+   public Builder<?> read(CredentialStoreConfiguration template) {\n+      this.attributes.read(template.attributes());\n+      return this;\n+   }\n+\n+   CredentialStoreSpi build() {\n+      if (credentialStore == null) {\n+         if (attributes.attribute(PATH).isNull()) {\n+            throw new IllegalStateException(\"file has to be specified\");\n+         }\n+         String path = attributes.attribute(PATH).get();\n+         String relativeTo = attributes.attribute(RELATIVE_TO).get();\n+         String location = ParseUtils.resolvePath(path, relativeTo);\n+         credentialStore = new KeyStoreCredentialStore();\n+         final Map<String, String> map = new HashMap<>();\n+         map.put(\"location\", location);\n+         map.put(\"create\", \"false\");\n+         map.put(\"keyStoreType\", attributes.attribute(TYPE).get());\n+         char[] credential = attributes.attribute(CREDENTIAL).get().toCharArray();\n+         try {\n+            credentialStore.initialize(\n+                  map,\n+                  new CredentialStore.CredentialSourceProtectionParameter(\n+                        IdentityCredentials.NONE.withCredential(new PasswordCredential(ClearPassword.createRaw(ClearPassword.ALGORITHM_CLEAR, credential)))),\n+                  null\n+            );\n+         } catch (CredentialStoreException e) {\n+            throw new CacheConfigurationException(e);\n+         }\n+      }\n+      return credentialStore;\n+   }\n+\n+   public <C extends Credential> C getCredential(String alias, Class<C> type) {\n+      build();\n+      try {\n+         if (alias == null) {\n+            if (credentialStore.getAliases().size() == 1) {", "originalCommit": "e6cc584a93e62504751a6b4562b388956ef28cbb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI1ODQ3NQ==", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r522258475", "bodyText": "You cannot return the wrong credential if there is only one :)", "author": "tristantarrant", "createdAt": "2020-11-12T16:52:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQyMzE1NA=="}], "type": "inlineReview", "revised_code": {"commit": "233e3ee8cd482fd53cdefe01ecb7b2d1b9cdc2b0", "chunk": "diff --git a/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfigurationBuilder.java b/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfigurationBuilder.java\nindex 5531b0ca2a..151348efa7 100644\n--- a/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfigurationBuilder.java\n+++ b/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfigurationBuilder.java\n\n@@ -94,7 +94,10 @@ CredentialStoreSpi build() {\n                   null\n             );\n          } catch (CredentialStoreException e) {\n-            throw new CacheConfigurationException(e);\n+            // We ignore the exception if it's about automatic creation\n+            if (!e.getMessage().startsWith(\"ELY09518\")) {\n+               throw new CacheConfigurationException(e);\n+            }\n          }\n       }\n       return credentialStore;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQyMzYwOA==", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r521423608", "bodyText": "unused", "author": "pruivo", "createdAt": "2020-11-11T15:08:43Z", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfigurationBuilder.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package org.infinispan.server.configuration.security;\n+\n+import static org.infinispan.server.configuration.security.CredentialStoreConfiguration.CREDENTIAL;\n+import static org.infinispan.server.configuration.security.CredentialStoreConfiguration.PATH;\n+import static org.infinispan.server.configuration.security.CredentialStoreConfiguration.RELATIVE_TO;\n+import static org.infinispan.server.configuration.security.CredentialStoreConfiguration.TYPE;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.infinispan.commons.CacheConfigurationException;\n+import org.infinispan.commons.configuration.Builder;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.configuration.parsing.ParseUtils;\n+import org.infinispan.server.Server;\n+import org.wildfly.security.auth.server.IdentityCredentials;\n+import org.wildfly.security.credential.Credential;\n+import org.wildfly.security.credential.PasswordCredential;\n+import org.wildfly.security.credential.store.CredentialStore;\n+import org.wildfly.security.credential.store.CredentialStoreException;\n+import org.wildfly.security.credential.store.CredentialStoreSpi;\n+import org.wildfly.security.credential.store.impl.KeyStoreCredentialStore;\n+import org.wildfly.security.password.interfaces.ClearPassword;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 12.0\n+ **/\n+public class CredentialStoreConfigurationBuilder implements Builder<CredentialStoreConfiguration> {\n+   private final AttributeSet attributes;\n+   private final CredentialStoresConfigurationBuilder credentialStoresConfigurationBuilder;", "originalCommit": "e6cc584a93e62504751a6b4562b388956ef28cbb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYzNzM5Mw==", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r529637393", "bodyText": "unsed :)", "author": "pruivo", "createdAt": "2020-11-24T15:29:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQyMzYwOA=="}], "type": "inlineReview", "revised_code": {"commit": "233e3ee8cd482fd53cdefe01ecb7b2d1b9cdc2b0", "chunk": "diff --git a/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfigurationBuilder.java b/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfigurationBuilder.java\nindex 5531b0ca2a..151348efa7 100644\n--- a/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfigurationBuilder.java\n+++ b/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfigurationBuilder.java\n\n@@ -94,7 +94,10 @@ CredentialStoreSpi build() {\n                   null\n             );\n          } catch (CredentialStoreException e) {\n-            throw new CacheConfigurationException(e);\n+            // We ignore the exception if it's about automatic creation\n+            if (!e.getMessage().startsWith(\"ELY09518\")) {\n+               throw new CacheConfigurationException(e);\n+            }\n          }\n       }\n       return credentialStore;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQyNjMwMQ==", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r521426301", "bodyText": "unused", "author": "pruivo", "createdAt": "2020-11-11T15:12:25Z", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoresConfigurationBuilder.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package org.infinispan.server.configuration.security;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import org.infinispan.commons.configuration.Builder;\n+import org.infinispan.server.Server;\n+import org.wildfly.security.credential.Credential;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 12.0\n+ **/\n+public class CredentialStoresConfigurationBuilder implements Builder<CredentialStoresConfiguration> {\n+\n+   private final SecurityConfigurationBuilder securityConfigurationBuilder;", "originalCommit": "e6cc584a93e62504751a6b4562b388956ef28cbb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1c4354bf8df117b0d6c784b0ecf1c9c8f29748bd", "chunk": "diff --git a/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoresConfigurationBuilder.java b/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoresConfigurationBuilder.java\nindex 3098c3064e..0b54038c61 100644\n--- a/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoresConfigurationBuilder.java\n+++ b/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoresConfigurationBuilder.java\n\n@@ -1,9 +1,12 @@\n package org.infinispan.server.configuration.security;\n \n import java.util.LinkedHashMap;\n+import java.util.List;\n import java.util.Map;\n+import java.util.stream.Collectors;\n \n import org.infinispan.commons.configuration.Builder;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n import org.infinispan.server.Server;\n import org.wildfly.security.credential.Credential;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQyNjY1MA==", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r521426650", "bodyText": "nitpick: final", "author": "pruivo", "createdAt": "2020-11-11T15:12:56Z", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoresConfigurationBuilder.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package org.infinispan.server.configuration.security;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import org.infinispan.commons.configuration.Builder;\n+import org.infinispan.server.Server;\n+import org.wildfly.security.credential.Credential;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 12.0\n+ **/\n+public class CredentialStoresConfigurationBuilder implements Builder<CredentialStoresConfiguration> {\n+\n+   private final SecurityConfigurationBuilder securityConfigurationBuilder;\n+   private Map<String, CredentialStoreConfigurationBuilder> credentialStores = new LinkedHashMap<>(2);", "originalCommit": "e6cc584a93e62504751a6b4562b388956ef28cbb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1c4354bf8df117b0d6c784b0ecf1c9c8f29748bd", "chunk": "diff --git a/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoresConfigurationBuilder.java b/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoresConfigurationBuilder.java\nindex 3098c3064e..0b54038c61 100644\n--- a/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoresConfigurationBuilder.java\n+++ b/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoresConfigurationBuilder.java\n\n@@ -1,9 +1,12 @@\n package org.infinispan.server.configuration.security;\n \n import java.util.LinkedHashMap;\n+import java.util.List;\n import java.util.Map;\n+import java.util.stream.Collectors;\n \n import org.infinispan.commons.configuration.Builder;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n import org.infinispan.server.Server;\n import org.wildfly.security.credential.Credential;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQyNzgzNw==", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r521427837", "bodyText": "like the comment for alias, I would fail if store isn't set.", "author": "pruivo", "createdAt": "2020-11-11T15:14:41Z", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoresConfigurationBuilder.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package org.infinispan.server.configuration.security;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import org.infinispan.commons.configuration.Builder;\n+import org.infinispan.server.Server;\n+import org.wildfly.security.credential.Credential;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 12.0\n+ **/\n+public class CredentialStoresConfigurationBuilder implements Builder<CredentialStoresConfiguration> {\n+\n+   private final SecurityConfigurationBuilder securityConfigurationBuilder;\n+   private Map<String, CredentialStoreConfigurationBuilder> credentialStores = new LinkedHashMap<>(2);\n+\n+   public CredentialStoresConfigurationBuilder(SecurityConfigurationBuilder securityConfigurationBuilder) {\n+      this.securityConfigurationBuilder = securityConfigurationBuilder;\n+   }\n+\n+   public CredentialStoreConfigurationBuilder addCredentialStore(String name) {\n+      CredentialStoreConfigurationBuilder credentialStoreBuilder = new CredentialStoreConfigurationBuilder(this);\n+      credentialStores.put(name, credentialStoreBuilder);\n+      return credentialStoreBuilder;\n+   }\n+\n+   public <C extends Credential> C getCredential(String store, String alias, Class<C> type) {\n+      CredentialStoreConfigurationBuilder credentialStoreConfigurationBuilder;\n+      if (store == null) {\n+         if (credentialStores.size() == 1) {", "originalCommit": "e6cc584a93e62504751a6b4562b388956ef28cbb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI1ODg3OA==", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r522258878", "bodyText": "Similarly to my answer above: if there is only one credential store, it is unambiguous.", "author": "tristantarrant", "createdAt": "2020-11-12T16:53:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQyNzgzNw=="}], "type": "inlineReview", "revised_code": {"commit": "1c4354bf8df117b0d6c784b0ecf1c9c8f29748bd", "chunk": "diff --git a/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoresConfigurationBuilder.java b/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoresConfigurationBuilder.java\nindex 3098c3064e..0b54038c61 100644\n--- a/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoresConfigurationBuilder.java\n+++ b/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoresConfigurationBuilder.java\n\n@@ -1,9 +1,12 @@\n package org.infinispan.server.configuration.security;\n \n import java.util.LinkedHashMap;\n+import java.util.List;\n import java.util.Map;\n+import java.util.stream.Collectors;\n \n import org.infinispan.commons.configuration.Builder;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n import org.infinispan.server.Server;\n import org.wildfly.security.credential.Credential;\n \n"}}, {"oid": "1c4354bf8df117b0d6c784b0ecf1c9c8f29748bd", "url": "https://github.com/infinispan/infinispan/commit/1c4354bf8df117b0d6c784b0ecf1c9c8f29748bd", "message": "WIP", "committedDate": "2020-11-12T13:44:20Z", "type": "forcePushed"}, {"oid": "e47086a6bdd656b286251928129d00c5dd259444", "url": "https://github.com/infinispan/infinispan/commit/e47086a6bdd656b286251928129d00c5dd259444", "message": "ISPN-12101 Credential Store", "committedDate": "2020-11-12T17:06:35Z", "type": "forcePushed"}, {"oid": "2c37a37ff0850f100eaceb93d1d0295b82a90a04", "url": "https://github.com/infinispan/infinispan/commit/2c37a37ff0850f100eaceb93d1d0295b82a90a04", "message": "ISPN-12101 Credential Store", "committedDate": "2020-11-13T07:46:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg0ODgxMw==", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r522848813", "bodyText": "note: I'm probably overthinking here...\ndo you want the path?\nif I set --path, the --server-root is ignored. If I set  --server-root only, I can't change the credentials file name.", "author": "pruivo", "createdAt": "2020-11-13T10:04:17Z", "path": "cli/src/main/java/org/infinispan/cli/commands/Credentials.java", "diffHunk": "@@ -0,0 +1,218 @@\n+package org.infinispan.cli.commands;\n+\n+import static org.infinispan.cli.logging.Messages.MSG;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.aesh.command.Command;\n+import org.aesh.command.CommandDefinition;\n+import org.aesh.command.CommandException;\n+import org.aesh.command.CommandResult;\n+import org.aesh.command.GroupCommandDefinition;\n+import org.aesh.command.impl.completer.FileOptionCompleter;\n+import org.aesh.command.option.Argument;\n+import org.aesh.command.option.Option;\n+import org.aesh.io.Resource;\n+import org.infinispan.cli.impl.ContextAwareCommandInvocation;\n+import org.kohsuke.MetaInfServices;\n+import org.wildfly.security.auth.server.IdentityCredentials;\n+import org.wildfly.security.credential.PasswordCredential;\n+import org.wildfly.security.credential.store.CredentialStore;\n+import org.wildfly.security.credential.store.CredentialStoreException;\n+import org.wildfly.security.credential.store.impl.KeyStoreCredentialStore;\n+import org.wildfly.security.password.interfaces.ClearPassword;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 12.0\n+ **/\n+@MetaInfServices(Command.class)\n+@GroupCommandDefinition(name = Credentials.CMD, description = \"Credential store operations\", groupCommands = {Credentials.Add.class, Credentials.Remove.class, Credentials.Ls.class})\n+public class Credentials extends CliCommand {\n+\n+   public static final String CMD = \"credentials\";\n+   public static final String STORE_TYPE = \"pkcs12\";\n+   public static final String CREDENTIALS_PATH = \"credentials.pfx\";\n+\n+   @Option(shortName = 'h', hasValue = false, overrideRequired = true)\n+   protected boolean help;\n+\n+   @Override\n+   public boolean isHelp() {\n+      return help;\n+   }\n+\n+   @Override\n+   public CommandResult exec(ContextAwareCommandInvocation invocation) {\n+      // This command serves only to wrap the sub-commands\n+      invocation.println(invocation.getHelpInfo());\n+      return CommandResult.FAILURE;\n+   }\n+\n+   static KeyStoreCredentialStore getKeyStoreCredentialStore(Path path, String type, boolean create, char[] password) throws CredentialStoreException {\n+      KeyStoreCredentialStore store = new KeyStoreCredentialStore();\n+      final Map<String, String> map = new HashMap<>();\n+      map.put(\"location\", path.toAbsolutePath().toString());\n+      map.put(\"keyStoreType\", type);\n+      map.put(\"create\", Boolean.toString(create));\n+      store.initialize(\n+            map,\n+            new CredentialStore.CredentialSourceProtectionParameter(\n+                  IdentityCredentials.NONE.withCredential(new PasswordCredential(ClearPassword.createRaw(ClearPassword.ALGORITHM_CLEAR, password)))),\n+            null\n+      );\n+      return store;\n+   }\n+\n+   static Path resourceToPath(Resource resource, String serverRoot) {\n+      if (resource != null) {\n+         return Paths.get(resource.getAbsolutePath());\n+      } else {\n+         String serverHome = System.getProperty(\"infinispan.server.home.path\");\n+         Path serverHomePath = serverHome == null ? Paths.get(\"\") : Paths.get(serverHome);\n+         return serverHomePath.resolve(Paths.get(serverRoot, \"conf\", CREDENTIALS_PATH)).toAbsolutePath();\n+      }\n+   }\n+\n+   @CommandDefinition(name = Add.CMD, description = \"Adds a credential to a key store\")\n+   public static class Add extends CliCommand {\n+      public static final String CMD = \"add\";\n+\n+      @Argument(description = \"The name (alias) of the credential\", required = true)\n+      String alias;\n+\n+      @Option(description = \"The path to a keystore. A new one will be created if it doesn't exist.\", completer = FileOptionCompleter.class)\n+      Resource path;", "originalCommit": "2c37a37ff0850f100eaceb93d1d0295b82a90a04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU2Mjg0OA==", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r529562848", "bodyText": "It mirrors the user command", "author": "tristantarrant", "createdAt": "2020-11-24T13:56:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg0ODgxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYxOTIwNQ==", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r529619205", "bodyText": "not really. The User command allows to set the file name and it resolves to the server/conf\nUser comand:\nif (usersFile == null) {\n\tthis.usersFile = this.serverRoot.resolve(\"conf\").resolve(DEFAULT_USERS_PROPERTIES_FILE);\n} else if (usersFile.isAbsolute()) {\n\tthis.usersFile = usersFile;\n} else {\n\tthis.usersFile = this.serverRoot.resolve(\"conf\").resolve(usersFile);\n}\n\nCredential command:\nif (resource != null) {\n\treturn Paths.get(resource.getAbsolutePath());\n} else {\n\tString serverHome = System.getProperty(\"infinispan.server.home.path\");\n\tPath serverHomePath = serverHome == null ? Paths.get(\"\") : Paths.get(serverHome);\n\treturn serverHomePath.resolve(Paths.get(serverRoot, \"conf\", CREDENTIALS_PATH)).toAbsolutePath();\n}", "author": "pruivo", "createdAt": "2020-11-24T15:10:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg0ODgxMw=="}], "type": "inlineReview", "revised_code": {"commit": "233e3ee8cd482fd53cdefe01ecb7b2d1b9cdc2b0", "chunk": "diff --git a/cli/src/main/java/org/infinispan/cli/commands/Credentials.java b/cli/src/main/java/org/infinispan/cli/commands/Credentials.java\nindex b2f692f721..18c9f59e7b 100644\n--- a/cli/src/main/java/org/infinispan/cli/commands/Credentials.java\n+++ b/cli/src/main/java/org/infinispan/cli/commands/Credentials.java\n\n@@ -78,26 +78,26 @@ static Path resourceToPath(Resource resource, String serverRoot) {\n       }\n    }\n \n-   @CommandDefinition(name = Add.CMD, description = \"Adds a credential to a key store\")\n+   @CommandDefinition(name = Add.CMD, description = \"Adds credentials to keystores.\")\n    public static class Add extends CliCommand {\n       public static final String CMD = \"add\";\n \n-      @Argument(description = \"The name (alias) of the credential\", required = true)\n+      @Argument(description = \"Specifies an alias, or name, for the credential.\", required = true)\n       String alias;\n \n-      @Option(description = \"The path to a keystore. A new one will be created if it doesn't exist.\", completer = FileOptionCompleter.class)\n+      @Option(description = \"Sets the path to a credential keystore and creates a new one if it does not exist.\", completer = FileOptionCompleter.class)\n       Resource path;\n \n-      @Option(description = \"The password to protect the credential store\", shortName = 'p')\n+      @Option(description = \"Specifies a password to protect the credential keystore.\", shortName = 'p')\n       String password;\n \n-      @Option(description = \"The type of the credential store\", shortName = 't', defaultValue = STORE_TYPE)\n+      @Option(description = \"Sets the type of credential store. Values are either PKCS12, which is the default, or JCEKS.\", shortName = 't', defaultValue = STORE_TYPE)\n       String type;\n \n-      @Option(description = \"The credential to store\", shortName = 'c')\n+      @Option(description = \"Adds a credential to the keystore.\", shortName = 'c')\n       String credential;\n \n-      @Option(description = \"The server root\", defaultValue = \"server\", name = \"server-root\", shortName = 's')\n+      @Option(description = \"Sets the path to the server root directory.\", defaultValue = \"server\", name = \"server-root\", shortName = 's')\n       String serverRoot;\n \n       @Option(shortName = 'h', hasValue = false, overrideRequired = true)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2MDYyOA==", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r522860628", "bodyText": "unused", "author": "pruivo", "createdAt": "2020-11-13T10:26:16Z", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfiguration.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package org.infinispan.server.configuration.security;\n+\n+import org.infinispan.commons.configuration.ConfigurationInfo;\n+import org.infinispan.commons.configuration.attributes.AttributeDefinition;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.commons.configuration.elements.DefaultElementDefinition;\n+import org.infinispan.commons.configuration.elements.ElementDefinition;\n+import org.infinispan.server.configuration.Element;\n+import org.infinispan.server.configuration.PasswordSerializer;\n+import org.wildfly.security.credential.store.CredentialStoreSpi;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 12.0\n+ **/\n+public class CredentialStoreConfiguration implements ConfigurationInfo {\n+   static final AttributeDefinition<String> NAME = AttributeDefinition.builder(\"name\", null, String.class).build();\n+   static final AttributeDefinition<String> PATH = AttributeDefinition.builder(\"path\", null, String.class).build();\n+   static final AttributeDefinition<String> RELATIVE_TO = AttributeDefinition.builder(\"relativeTo\", null, String.class).build();\n+   static final AttributeDefinition<String> TYPE = AttributeDefinition.builder(\"type\", \"pkcs12\", String.class).build();\n+   static final AttributeDefinition<String> CREDENTIAL = AttributeDefinition.builder(\"credential\", null, String.class).serializer(PasswordSerializer.INSTANCE).build();\n+\n+   private final AttributeSet attributes;\n+   private final CredentialStoreSpi credentialStore;", "originalCommit": "2c37a37ff0850f100eaceb93d1d0295b82a90a04", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e608605c5b52b07a4ff9b45a10766722e3473b78", "chunk": "diff --git a/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfiguration.java b/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfiguration.java\nindex f39963d1a6..2375d1de91 100644\n--- a/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfiguration.java\n+++ b/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfiguration.java\n\n@@ -7,7 +7,6 @@\n import org.infinispan.commons.configuration.elements.ElementDefinition;\n import org.infinispan.server.configuration.Element;\n import org.infinispan.server.configuration.PasswordSerializer;\n-import org.wildfly.security.credential.store.CredentialStoreSpi;\n \n /**\n  * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2MDgwNA==", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r522860804", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               private static ElementDefinition<CredentialStoreConfiguration> ELEMENT_DEFINITION = new DefaultElementDefinition(Element.CREDENTIAL_STORE.toString());\n          \n          \n            \n               private static final ElementDefinition<CredentialStoreConfiguration> ELEMENT_DEFINITION = new DefaultElementDefinition<>(Element.CREDENTIAL_STORE.toString());", "author": "pruivo", "createdAt": "2020-11-13T10:26:40Z", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfiguration.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package org.infinispan.server.configuration.security;\n+\n+import org.infinispan.commons.configuration.ConfigurationInfo;\n+import org.infinispan.commons.configuration.attributes.AttributeDefinition;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.commons.configuration.elements.DefaultElementDefinition;\n+import org.infinispan.commons.configuration.elements.ElementDefinition;\n+import org.infinispan.server.configuration.Element;\n+import org.infinispan.server.configuration.PasswordSerializer;\n+import org.wildfly.security.credential.store.CredentialStoreSpi;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 12.0\n+ **/\n+public class CredentialStoreConfiguration implements ConfigurationInfo {\n+   static final AttributeDefinition<String> NAME = AttributeDefinition.builder(\"name\", null, String.class).build();\n+   static final AttributeDefinition<String> PATH = AttributeDefinition.builder(\"path\", null, String.class).build();\n+   static final AttributeDefinition<String> RELATIVE_TO = AttributeDefinition.builder(\"relativeTo\", null, String.class).build();\n+   static final AttributeDefinition<String> TYPE = AttributeDefinition.builder(\"type\", \"pkcs12\", String.class).build();\n+   static final AttributeDefinition<String> CREDENTIAL = AttributeDefinition.builder(\"credential\", null, String.class).serializer(PasswordSerializer.INSTANCE).build();\n+\n+   private final AttributeSet attributes;\n+   private final CredentialStoreSpi credentialStore;\n+\n+   static AttributeSet attributeDefinitionSet() {\n+      return new AttributeSet(CredentialStoreConfiguration.class, NAME, PATH, RELATIVE_TO, TYPE, CREDENTIAL);\n+   }\n+\n+   private static ElementDefinition<CredentialStoreConfiguration> ELEMENT_DEFINITION = new DefaultElementDefinition(Element.CREDENTIAL_STORE.toString());", "originalCommit": "2c37a37ff0850f100eaceb93d1d0295b82a90a04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYyMzc1Mw==", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r529623753", "bodyText": "this was partially applied :)", "author": "pruivo", "createdAt": "2020-11-24T15:16:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2MDgwNA=="}], "type": "inlineReview", "revised_code": {"commit": "e608605c5b52b07a4ff9b45a10766722e3473b78", "chunk": "diff --git a/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfiguration.java b/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfiguration.java\nindex f39963d1a6..2375d1de91 100644\n--- a/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfiguration.java\n+++ b/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfiguration.java\n\n@@ -7,7 +7,6 @@\n import org.infinispan.commons.configuration.elements.ElementDefinition;\n import org.infinispan.server.configuration.Element;\n import org.infinispan.server.configuration.PasswordSerializer;\n-import org.wildfly.security.credential.store.CredentialStoreSpi;\n \n /**\n  * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2MjU5NA==", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r522862594", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               private static final ElementDefinition<CredentialStoresConfiguration> ELEMENT_DEFINITION = new DefaultElementDefinition(Element.CREDENTIAL_STORES.toString());\n          \n          \n            \n               private static final ElementDefinition<CredentialStoresConfiguration> ELEMENT_DEFINITION = new DefaultElementDefinition<>(Element.CREDENTIAL_STORES.toString());", "author": "pruivo", "createdAt": "2020-11-13T10:30:08Z", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoresConfiguration.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package org.infinispan.server.configuration.security;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.infinispan.commons.configuration.ConfigurationInfo;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.commons.configuration.elements.DefaultElementDefinition;\n+import org.infinispan.commons.configuration.elements.ElementDefinition;\n+import org.infinispan.server.configuration.Element;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 12.0\n+ **/\n+public class CredentialStoresConfiguration implements ConfigurationInfo {\n+   private static final ElementDefinition<CredentialStoresConfiguration> ELEMENT_DEFINITION = new DefaultElementDefinition(Element.CREDENTIAL_STORES.toString());", "originalCommit": "2c37a37ff0850f100eaceb93d1d0295b82a90a04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYyNDk5Ng==", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r529624996", "bodyText": "change not applied.", "author": "pruivo", "createdAt": "2020-11-24T15:18:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2MjU5NA=="}], "type": "inlineReview", "revised_code": {"commit": "f1872f277ef7000808ee8a115abb60fd834bdaed", "chunk": "diff --git a/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoresConfiguration.java b/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoresConfiguration.java\nindex c922cf30db..ca5596426d 100644\n--- a/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoresConfiguration.java\n+++ b/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoresConfiguration.java\n\n@@ -14,9 +14,8 @@\n  * @since 12.0\n  **/\n public class CredentialStoresConfiguration implements ConfigurationInfo {\n-   private static final ElementDefinition<CredentialStoresConfiguration> ELEMENT_DEFINITION = new DefaultElementDefinition(Element.CREDENTIAL_STORES.toString());\n+   private static final ElementDefinition<CredentialStoresConfiguration> ELEMENT_DEFINITION = new DefaultElementDefinition<>(Element.CREDENTIAL_STORES.toString());\n \n-   private final List<CredentialStoreConfiguration> credentialStores;\n    private final List<ConfigurationInfo> configs = new ArrayList<>();\n \n    static AttributeSet attributeDefinitionSet() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2MjczNg==", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r522862736", "bodyText": "unused", "author": "pruivo", "createdAt": "2020-11-13T10:30:22Z", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoresConfiguration.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package org.infinispan.server.configuration.security;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.infinispan.commons.configuration.ConfigurationInfo;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.commons.configuration.elements.DefaultElementDefinition;\n+import org.infinispan.commons.configuration.elements.ElementDefinition;\n+import org.infinispan.server.configuration.Element;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 12.0\n+ **/\n+public class CredentialStoresConfiguration implements ConfigurationInfo {\n+   private static final ElementDefinition<CredentialStoresConfiguration> ELEMENT_DEFINITION = new DefaultElementDefinition(Element.CREDENTIAL_STORES.toString());\n+\n+   private final List<CredentialStoreConfiguration> credentialStores;", "originalCommit": "2c37a37ff0850f100eaceb93d1d0295b82a90a04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYyNTMzNw==", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r529625337", "bodyText": "can be removed :)", "author": "pruivo", "createdAt": "2020-11-24T15:18:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2MjczNg=="}], "type": "inlineReview", "revised_code": {"commit": "f1872f277ef7000808ee8a115abb60fd834bdaed", "chunk": "diff --git a/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoresConfiguration.java b/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoresConfiguration.java\nindex c922cf30db..ca5596426d 100644\n--- a/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoresConfiguration.java\n+++ b/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoresConfiguration.java\n\n@@ -14,9 +14,8 @@\n  * @since 12.0\n  **/\n public class CredentialStoresConfiguration implements ConfigurationInfo {\n-   private static final ElementDefinition<CredentialStoresConfiguration> ELEMENT_DEFINITION = new DefaultElementDefinition(Element.CREDENTIAL_STORES.toString());\n+   private static final ElementDefinition<CredentialStoresConfiguration> ELEMENT_DEFINITION = new DefaultElementDefinition<>(Element.CREDENTIAL_STORES.toString());\n \n-   private final List<CredentialStoreConfiguration> credentialStores;\n    private final List<ConfigurationInfo> configs = new ArrayList<>();\n \n    static AttributeSet attributeDefinitionSet() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2NDY5MQ==", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r522864691", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               private Map<String, RealmConfigurationBuilder> securityRealms = new LinkedHashMap<>(2);\n          \n          \n            \n               private final Map<String, RealmConfigurationBuilder> securityRealms = new LinkedHashMap<>(2);", "author": "pruivo", "createdAt": "2020-11-13T10:34:15Z", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/RealmsConfigurationBuilder.java", "diffHunk": "@@ -16,8 +16,13 @@\n  */\n public class RealmsConfigurationBuilder implements Builder<RealmsConfiguration> {\n \n+   private final SecurityConfigurationBuilder securityConfigurationBuilder;\n    private Map<String, RealmConfigurationBuilder> securityRealms = new LinkedHashMap<>(2);", "originalCommit": "2c37a37ff0850f100eaceb93d1d0295b82a90a04", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "233e3ee8cd482fd53cdefe01ecb7b2d1b9cdc2b0", "chunk": "diff --git a/server/runtime/src/main/java/org/infinispan/server/configuration/security/RealmsConfigurationBuilder.java b/server/runtime/src/main/java/org/infinispan/server/configuration/security/RealmsConfigurationBuilder.java\nindex 7d4c2740f1..b86c877dc8 100644\n--- a/server/runtime/src/main/java/org/infinispan/server/configuration/security/RealmsConfigurationBuilder.java\n+++ b/server/runtime/src/main/java/org/infinispan/server/configuration/security/RealmsConfigurationBuilder.java\n\n@@ -16,11 +16,9 @@\n  */\n public class RealmsConfigurationBuilder implements Builder<RealmsConfiguration> {\n \n-   private final SecurityConfigurationBuilder securityConfigurationBuilder;\n    private Map<String, RealmConfigurationBuilder> securityRealms = new LinkedHashMap<>(2);\n \n-   public RealmsConfigurationBuilder(SecurityConfigurationBuilder securityConfigurationBuilder) {\n-      this.securityConfigurationBuilder = securityConfigurationBuilder;\n+   public RealmsConfigurationBuilder() {\n    }\n \n    public RealmConfigurationBuilder addSecurityRealm(String name) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2NDkyOQ==", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r522864929", "bodyText": "can be reverted", "author": "pruivo", "createdAt": "2020-11-13T10:34:41Z", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/RealmsConfigurationBuilder.java", "diffHunk": "@@ -55,4 +60,7 @@ public void validate() {\n       securityRealms.values().forEach(RealmConfigurationBuilder::validate);\n    }\n \n+   public SecurityConfigurationBuilder securityConfigurationBuilder() {", "originalCommit": "2c37a37ff0850f100eaceb93d1d0295b82a90a04", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "233e3ee8cd482fd53cdefe01ecb7b2d1b9cdc2b0", "chunk": "diff --git a/server/runtime/src/main/java/org/infinispan/server/configuration/security/RealmsConfigurationBuilder.java b/server/runtime/src/main/java/org/infinispan/server/configuration/security/RealmsConfigurationBuilder.java\nindex 7d4c2740f1..b86c877dc8 100644\n--- a/server/runtime/src/main/java/org/infinispan/server/configuration/security/RealmsConfigurationBuilder.java\n+++ b/server/runtime/src/main/java/org/infinispan/server/configuration/security/RealmsConfigurationBuilder.java\n\n@@ -59,8 +57,4 @@ public RealmsConfigurationBuilder read(RealmsConfiguration template) {\n    public void validate() {\n       securityRealms.values().forEach(RealmConfigurationBuilder::validate);\n    }\n-\n-   public SecurityConfigurationBuilder securityConfigurationBuilder() {\n-      return securityConfigurationBuilder;\n-   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2NTA4Mw==", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r522865083", "bodyText": "can be reverted", "author": "pruivo", "createdAt": "2020-11-13T10:34:58Z", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/RealmsConfigurationBuilder.java", "diffHunk": "@@ -16,8 +16,13 @@\n  */\n public class RealmsConfigurationBuilder implements Builder<RealmsConfiguration> {\n \n+   private final SecurityConfigurationBuilder securityConfigurationBuilder;\n    private Map<String, RealmConfigurationBuilder> securityRealms = new LinkedHashMap<>(2);\n \n+   public RealmsConfigurationBuilder(SecurityConfigurationBuilder securityConfigurationBuilder) {", "originalCommit": "2c37a37ff0850f100eaceb93d1d0295b82a90a04", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "233e3ee8cd482fd53cdefe01ecb7b2d1b9cdc2b0", "chunk": "diff --git a/server/runtime/src/main/java/org/infinispan/server/configuration/security/RealmsConfigurationBuilder.java b/server/runtime/src/main/java/org/infinispan/server/configuration/security/RealmsConfigurationBuilder.java\nindex 7d4c2740f1..b86c877dc8 100644\n--- a/server/runtime/src/main/java/org/infinispan/server/configuration/security/RealmsConfigurationBuilder.java\n+++ b/server/runtime/src/main/java/org/infinispan/server/configuration/security/RealmsConfigurationBuilder.java\n\n@@ -16,11 +16,9 @@\n  */\n public class RealmsConfigurationBuilder implements Builder<RealmsConfiguration> {\n \n-   private final SecurityConfigurationBuilder securityConfigurationBuilder;\n    private Map<String, RealmConfigurationBuilder> securityRealms = new LinkedHashMap<>(2);\n \n-   public RealmsConfigurationBuilder(SecurityConfigurationBuilder securityConfigurationBuilder) {\n-      this.securityConfigurationBuilder = securityConfigurationBuilder;\n+   public RealmsConfigurationBuilder() {\n    }\n \n    public RealmConfigurationBuilder addSecurityRealm(String name) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2NTE2OQ==", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r522865169", "bodyText": "can be reverted", "author": "pruivo", "createdAt": "2020-11-13T10:35:05Z", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/RealmsConfigurationBuilder.java", "diffHunk": "@@ -16,8 +16,13 @@\n  */\n public class RealmsConfigurationBuilder implements Builder<RealmsConfiguration> {\n \n+   private final SecurityConfigurationBuilder securityConfigurationBuilder;", "originalCommit": "2c37a37ff0850f100eaceb93d1d0295b82a90a04", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "233e3ee8cd482fd53cdefe01ecb7b2d1b9cdc2b0", "chunk": "diff --git a/server/runtime/src/main/java/org/infinispan/server/configuration/security/RealmsConfigurationBuilder.java b/server/runtime/src/main/java/org/infinispan/server/configuration/security/RealmsConfigurationBuilder.java\nindex 7d4c2740f1..b86c877dc8 100644\n--- a/server/runtime/src/main/java/org/infinispan/server/configuration/security/RealmsConfigurationBuilder.java\n+++ b/server/runtime/src/main/java/org/infinispan/server/configuration/security/RealmsConfigurationBuilder.java\n\n@@ -16,11 +16,9 @@\n  */\n public class RealmsConfigurationBuilder implements Builder<RealmsConfiguration> {\n \n-   private final SecurityConfigurationBuilder securityConfigurationBuilder;\n    private Map<String, RealmConfigurationBuilder> securityRealms = new LinkedHashMap<>(2);\n \n-   public RealmsConfigurationBuilder(SecurityConfigurationBuilder securityConfigurationBuilder) {\n-      this.securityConfigurationBuilder = securityConfigurationBuilder;\n+   public RealmsConfigurationBuilder() {\n    }\n \n    public RealmConfigurationBuilder addSecurityRealm(String name) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2NjU3NA==", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r522866574", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               private static final ElementDefinition ELEMENT_DEFINITION = new DefaultElementDefinition(Element.SECURITY.toString());\n          \n          \n            \n               private static final ElementDefinition<SecurityConfiguration> ELEMENT_DEFINITION = new DefaultElementDefinition<>(Element.SECURITY.toString());", "author": "pruivo", "createdAt": "2020-11-13T10:37:48Z", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/SecurityConfiguration.java", "diffHunk": "@@ -15,11 +15,15 @@\n    private static final ElementDefinition ELEMENT_DEFINITION = new DefaultElementDefinition(Element.SECURITY.toString());", "originalCommit": "2c37a37ff0850f100eaceb93d1d0295b82a90a04", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2NzAxMg==", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r522867012", "bodyText": "And getElement()\npublic ElementDefinition<SecurityConfiguration> getElementDefinition()", "author": "pruivo", "createdAt": "2020-11-13T10:38:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2NjU3NA=="}], "type": "inlineReview", "revised_code": {"commit": "30c99ab8caefe334c5d98a460cc1e99e7f5cfb72", "chunk": "diff --git a/server/runtime/src/main/java/org/infinispan/server/configuration/security/SecurityConfiguration.java b/server/runtime/src/main/java/org/infinispan/server/configuration/security/SecurityConfiguration.java\nindex 1311f60bb2..4c5f7edc5a 100644\n--- a/server/runtime/src/main/java/org/infinispan/server/configuration/security/SecurityConfiguration.java\n+++ b/server/runtime/src/main/java/org/infinispan/server/configuration/security/SecurityConfiguration.java\n\n@@ -12,7 +12,7 @@\n  * @since 10.0\n  */\n public class SecurityConfiguration implements ConfigurationInfo {\n-   private static final ElementDefinition ELEMENT_DEFINITION = new DefaultElementDefinition(Element.SECURITY.toString());\n+   private static final ElementDefinition<SecurityConfiguration> ELEMENT_DEFINITION = new DefaultElementDefinition(Element.SECURITY.toString());\n \n    private final List<ConfigurationInfo> elements;\n    private final CredentialStoresConfiguration credentialStoresConfiguration;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2NzMwMQ==", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r522867301", "bodyText": "field not required/used.", "author": "pruivo", "createdAt": "2020-11-13T10:39:21Z", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/SecurityConfigurationBuilder.java", "diffHunk": "@@ -1,30 +1,47 @@\n package org.infinispan.server.configuration.security;\n \n import org.infinispan.commons.configuration.Builder;\n+import org.infinispan.server.configuration.ServerConfigurationBuilder;\n \n /**\n  * @since 10.0\n  */\n public class SecurityConfigurationBuilder implements Builder<SecurityConfiguration> {\n-   private final RealmsConfigurationBuilder realmsConfiguration = new RealmsConfigurationBuilder();\n+   private final CredentialStoresConfigurationBuilder credentialStoresConfiguration = new CredentialStoresConfigurationBuilder(this);\n+   private final RealmsConfigurationBuilder realmsConfiguration = new RealmsConfigurationBuilder(this);\n+   private final ServerConfigurationBuilder serverConfigurationBuilder;", "originalCommit": "2c37a37ff0850f100eaceb93d1d0295b82a90a04", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "233e3ee8cd482fd53cdefe01ecb7b2d1b9cdc2b0", "chunk": "diff --git a/server/runtime/src/main/java/org/infinispan/server/configuration/security/SecurityConfigurationBuilder.java b/server/runtime/src/main/java/org/infinispan/server/configuration/security/SecurityConfigurationBuilder.java\nindex 7f5a2b5527..085a2053ce 100644\n--- a/server/runtime/src/main/java/org/infinispan/server/configuration/security/SecurityConfigurationBuilder.java\n+++ b/server/runtime/src/main/java/org/infinispan/server/configuration/security/SecurityConfigurationBuilder.java\n\n@@ -8,7 +8,7 @@\n  */\n public class SecurityConfigurationBuilder implements Builder<SecurityConfiguration> {\n    private final CredentialStoresConfigurationBuilder credentialStoresConfiguration = new CredentialStoresConfigurationBuilder(this);\n-   private final RealmsConfigurationBuilder realmsConfiguration = new RealmsConfigurationBuilder(this);\n+   private final RealmsConfigurationBuilder realmsConfiguration = new RealmsConfigurationBuilder();\n    private final ServerConfigurationBuilder serverConfigurationBuilder;\n \n    public SecurityConfigurationBuilder(ServerConfigurationBuilder serverConfigurationBuilder) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg5MTM3NQ==", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r522891375", "bodyText": "would it be worth to check if the passwords are parsed correctly?\nThe last assert is failing. The attribute's value is null (probably my mistake since if I changed the password in Common, the test is unable to open the keystore...)\nassertEquals(\"strongPassword\", realmConfiguration.ldapConfiguration().attributes().attribute(\"credential\").get());\n      assertEquals(\"secret\", new String((char[]) realmConfiguration.trustStoreConfiguration().attributes().attribute(\"keystorePassword\").get())); //stores it as char[]\n      assertEquals(\"1fdca4ec-c416-47e0-867a-3d471af7050f\", realmConfiguration.tokenConfiguration().oauth2Configuration().attributes().attribute(\"clientSecret\").get());\n      assertEquals(\"password\", realmConfiguration.serverIdentitiesConfiguration().sslConfigurations().get(0).keyStore().attributes().attribute(\"keyPassword\").get());", "author": "pruivo", "createdAt": "2020-11-13T11:25:58Z", "path": "server/runtime/src/test/java/org/infinispan/server/configuration/ServerConfigurationParserTest.java", "diffHunk": "@@ -63,9 +76,18 @@ public void testParser() throws IOException {\n       assertEquals(11223, socketBindings.get(\"hotrod\").getPort());\n       assertEquals(8080, socketBindings.get(\"rest\").getPort());\n \n+      // Security realms\n+      List<RealmConfiguration> realms = server.security().realms().realms();\n+      assertEquals(2, realms.size());\n+      RealmConfiguration realmConfiguration = realms.get(0);\n+      assertEquals(\"default\", realmConfiguration.name());\n+\n+      realmConfiguration = realms.get(1);\n+      assertEquals(\"using-credentials\", realmConfiguration.name());", "originalCommit": "2c37a37ff0850f100eaceb93d1d0295b82a90a04", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "233e3ee8cd482fd53cdefe01ecb7b2d1b9cdc2b0", "url": "https://github.com/infinispan/infinispan/commit/233e3ee8cd482fd53cdefe01ecb7b2d1b9cdc2b0", "message": "ISPN-12101 Credential Store", "committedDate": "2020-11-24T13:47:03Z", "type": "forcePushed"}, {"oid": "30c99ab8caefe334c5d98a460cc1e99e7f5cfb72", "url": "https://github.com/infinispan/infinispan/commit/30c99ab8caefe334c5d98a460cc1e99e7f5cfb72", "message": "ISPN-12101 Credential Store", "committedDate": "2020-11-24T13:56:44Z", "type": "forcePushed"}, {"oid": "083c708709f178a7d9184fcdc76eb6a9c01ce2a6", "url": "https://github.com/infinispan/infinispan/commit/083c708709f178a7d9184fcdc76eb6a9c01ce2a6", "message": "ISPN-12101 Credential Store", "committedDate": "2020-11-24T14:00:46Z", "type": "forcePushed"}, {"oid": "e608605c5b52b07a4ff9b45a10766722e3473b78", "url": "https://github.com/infinispan/infinispan/commit/e608605c5b52b07a4ff9b45a10766722e3473b78", "message": "ISPN-12101 Credential Store", "committedDate": "2020-11-24T14:05:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYyNjc5Ng==", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r529626796", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               private static final ElementDefinition<SecurityConfiguration> ELEMENT_DEFINITION = new DefaultElementDefinition(Element.SECURITY.toString());\n          \n          \n            \n               private static final ElementDefinition<SecurityConfiguration> ELEMENT_DEFINITION = new DefaultElementDefinition<>(Element.SECURITY.toString());", "author": "pruivo", "createdAt": "2020-11-24T15:20:10Z", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/SecurityConfiguration.java", "diffHunk": "@@ -12,14 +12,18 @@\n  * @since 10.0\n  */\n public class SecurityConfiguration implements ConfigurationInfo {\n-   private static final ElementDefinition ELEMENT_DEFINITION = new DefaultElementDefinition(Element.SECURITY.toString());\n+   private static final ElementDefinition<SecurityConfiguration> ELEMENT_DEFINITION = new DefaultElementDefinition(Element.SECURITY.toString());", "originalCommit": "e608605c5b52b07a4ff9b45a10766722e3473b78", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f1872f277ef7000808ee8a115abb60fd834bdaed", "chunk": "diff --git a/server/runtime/src/main/java/org/infinispan/server/configuration/security/SecurityConfiguration.java b/server/runtime/src/main/java/org/infinispan/server/configuration/security/SecurityConfiguration.java\nindex 4c5f7edc5a..a3d06f57af 100644\n--- a/server/runtime/src/main/java/org/infinispan/server/configuration/security/SecurityConfiguration.java\n+++ b/server/runtime/src/main/java/org/infinispan/server/configuration/security/SecurityConfiguration.java\n\n@@ -12,7 +12,7 @@\n  * @since 10.0\n  */\n public class SecurityConfiguration implements ConfigurationInfo {\n-   private static final ElementDefinition<SecurityConfiguration> ELEMENT_DEFINITION = new DefaultElementDefinition(Element.SECURITY.toString());\n+   private static final ElementDefinition<SecurityConfiguration> ELEMENT_DEFINITION = new DefaultElementDefinition<>(Element.SECURITY.toString());\n \n    private final List<ConfigurationInfo> elements;\n    private final CredentialStoresConfiguration credentialStoresConfiguration;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYzMDk3OQ==", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r529630979", "bodyText": "unused", "author": "pruivo", "createdAt": "2020-11-24T15:25:12Z", "path": "server/runtime/src/test/java/org/infinispan/server/configuration/ServerConfigurationParserTest.java", "diffHunk": "@@ -91,5 +123,381 @@ public void testParser() throws IOException {\n       assertEquals(socketBindings.get(\"default\").getAddress().getAddress().getHostAddress(), singlePortRouter.host());\n       assertEquals(socketBindings.get(\"default\").getPort(), singlePortRouter.port());\n       assertEquals(socketBindings.get(\"memcached\").getPort(), server.endpoints().endpoints().get(0).connectors().get(2).port());\n+\n+      assertEquals(\"strongPassword\", realmConfiguration.ldapConfiguration().attributes().attribute(\"credential\").get());\n+      assertEquals(\"secret\", new String((char[]) realmConfiguration.trustStoreConfiguration().attributes().attribute(\"keystorePassword\").get())); //stores it as char[]\n+      assertEquals(\"1fdca4ec-c416-47e0-867a-3d471af7050f\", realmConfiguration.tokenConfiguration().oauth2Configuration().attributes().attribute(\"clientSecret\").get());\n+      assertEquals(\"password\", new String((char[]) realmConfiguration.serverIdentitiesConfiguration().sslConfigurations().get(0).keyStore().attributes().attribute(\"keystorePassword\").get()));\n+   }\n+\n+   @Test\n+   public void testJsonSerialization() throws IOException {\n+      ServerConfiguration serverConfiguration = parse();\n+\n+      String serverConfigPath = getConfigPath().toString();\n+\n+      JsonWriter writer = new JsonWriter();\n+      String json = writer.toJSON(serverConfiguration);\n+\n+      Json serverNode = Json.read(json).at(\"server\");\n+\n+      Json interfaces = serverNode.at(\"interfaces\").at(\"interface\");\n+      assertEquals(2, interfaces.asList().size());\n+\n+      Json interface1 = interfaces.at(0);\n+      Json interface2 = interfaces.at(1);\n+      Json address1 = interface1.at(\"loopback\");\n+      Json address2 = interface2.at(\"loopback\");\n+      assertEquals(\"default\", interface1.at(\"name\").asString());\n+      assertEquals(0, address1.asMap().size());\n+      assertEquals(\"another\", interface2.at(\"name\").asString());\n+      assertEquals(0, address2.asMap().size());\n+\n+      Json socketBindings = serverNode.at(\"socket-bindings\");\n+      assertEquals(\"default\", socketBindings.at(\"default-interface\").asString());\n+      assertEquals(0, socketBindings.at(\"port-offset\").asInteger());\n+\n+      Json socketBinding = socketBindings.at(\"socket-binding\");\n+      assertEquals(5, socketBinding.asList().size());\n+\n+      Iterator<Json> bindings = socketBinding.asJsonList().iterator();\n+      Json binding1 = bindings.next();\n+      assertEquals(\"default\", binding1.at(\"name\").asString());\n+      assertEquals(11222, binding1.at(\"port\").asInteger());\n+      Json binding2 = bindings.next();\n+      assertEquals(\"hotrod\", binding2.at(\"name\").asString());\n+      assertEquals(11223, binding2.at(\"port\").asInteger());\n+      Json binding3 = bindings.next();\n+      assertEquals(\"memcached\", binding3.at(\"name\").asString());\n+      assertEquals(11221, binding3.at(\"port\").asInteger());\n+      Json binding4 = bindings.next();\n+      assertEquals(\"memcached-2\", binding4.at(\"name\").asString());\n+      assertEquals(12221, binding4.at(\"port\").asInteger());\n+      Json binding5 = bindings.next();\n+      assertEquals(\"rest\", binding5.at(\"name\").asString());\n+      assertEquals(8080, binding5.at(\"port\").asInteger());\n+\n+      Json credentialStores = serverNode.at(\"security\").at(\"credential-stores\");\n+      assertEquals(1, credentialStores.asMap().size());\n+      Json credentialStore = credentialStores.at(\"credential-store\");\n+      assertEquals(\"credentials.pfx\", credentialStore.at(\"path\").asString());\n+\n+      Json securityRealms = serverNode.at(\"security\").at(\"security-realms\");\n+      assertEquals(1, securityRealms.asMap().size());\n+\n+      Json securityRealm = securityRealms.at(\"security-realm\");\n+      assertEquals(2, securityRealm.asList().size());\n+      Json defaultRealm = securityRealm.at(0);\n+      assertEquals(\"default\", defaultRealm.at(\"name\").asString());\n+\n+      Json ssl = defaultRealm.at(\"server-identities\").at(\"ssl\");\n+      Json keyStore = ssl.at(\"keystore\");\n+      assertEquals(\"ServerConfigurationParserTest-keystore.pfx\", keyStore.at(\"path\").asString());\n+      assertEquals(serverConfigPath, keyStore.at(\"relative-to\").asString());\n+      assertEquals(\"***\", keyStore.at(\"keystore-password\").asString());\n+      assertEquals(\"server\", keyStore.at(\"alias\").asString());\n+      assertEquals(\"***\", keyStore.at(\"key-password\").asString());\n+      assertEquals(\"localhost\", keyStore.at(\"generate-self-signed-certificate-host\").asString());\n+      Json engine = ssl.at(\"engine\");\n+      Json protocols = engine.at(\"enabled-protocols\");\n+      Iterator<Json> protocolItems = protocols.asJsonList().iterator();\n+      assertEquals(\"TLSV1.1\", protocolItems.next().asString());\n+      assertEquals(\"TLSV1.2\", protocolItems.next().asString());\n+      assertEquals(\"TLSV1.3\", protocolItems.next().asString());\n+      Json cipherSuites = engine.at(\"enabled-ciphersuites\");\n+      assertEquals(\"DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256\", cipherSuites.asString());\n+\n+      Json kerberos = defaultRealm.at(\"server-identities\").at(\"kerberos\");\n+      assertEquals(\"keytab\", kerberos.at(\"keytab-path\").asString());\n+      assertEquals(serverConfigPath, kerberos.at(\"relative-to\").asString());\n+\n+      Json filesystemRealm = defaultRealm.at(\"filesystem-realm\");\n+      assertEquals(\"security\", filesystemRealm.at(\"path\").asString());\n+      assertEquals(3, filesystemRealm.at(\"levels\").asInteger());\n+      assertFalse(filesystemRealm.at(\"encoded\").asBoolean());\n+      assertEquals(serverConfigPath, filesystemRealm.at(\"relative-to\").asString());\n+\n+      Json ldapRealm = defaultRealm.at(\"ldap-realm\");\n+      assertEquals(\"ldap\", ldapRealm.at(\"name\").asString());\n+      assertEquals(\"ldap://${org.infinispan.test.host.address}:10389\", ldapRealm.at(\"url\").asString());\n+      assertEquals(\"uid=admin,ou=People,dc=infinispan,dc=org\", ldapRealm.at(\"principal\").asString());\n+      assertEquals(\"***\", ldapRealm.at(\"credential\").asString());\n+\n+      /*Json ldapNameRewriter = ldapRealm.at(\"name-rewriter\");\n+      Json ldapRegexPrincipalTransformer = ldapNameRewriter.at(\"regex-principal-transformer\");\n+      assertEquals(\"uid\", ldapRegexPrincipalTransformer.at(\"name\").asString());\n+      assertEquals(\"uid\", ldapRegexPrincipalTransformer.at(\"pattern\").asString());\n+      assertEquals(\"uid\", ldapRegexPrincipalTransformer.at(\"replacement\").asString());*/\n+\n+      Json ldapIdentityMapping = ldapRealm.at(\"identity-mapping\");\n+      assertEquals(\"uid\", ldapIdentityMapping.at(\"rdn-identifier\").asString());\n+      assertEquals(\"ou=People,dc=infinispan,dc=org\", ldapIdentityMapping.at(\"search-base-dn\").asString());\n+      Json attributeMapping = ldapIdentityMapping.at(\"attribute-mapping\");\n+      Json attributes = attributeMapping.at(\"attribute\");\n+      assertEquals(3, attributes.asList().size());\n+      Iterator<Json> elements = attributes.asJsonList().iterator();\n+      Json attribute1 = elements.next();\n+      assertEquals(\"cn\", attribute1.at(\"from\").asString());\n+      assertEquals(\"Roles\", attribute1.at(\"to\").asString());\n+      assertEquals(\"(&(objectClass=groupOfNames)(member={1}))\", attribute1.at(\"filter\").asString());\n+      assertEquals(\"ou=Roles,dc=infinispan,dc=org\", attribute1.at(\"filter-dn\").asString());\n+      Json attribute2 = elements.next();\n+      assertEquals(\"cn2\", attribute2.at(\"from\").asString());\n+      assertEquals(\"Roles2\", attribute2.at(\"to\").asString());\n+      assertEquals(\"(&(objectClass=GroupOfUniqueNames)(member={0}))\", attribute2.at(\"filter\").asString());\n+      assertEquals(\"ou=People,dc=infinispan,dc=org\", attribute2.at(\"filter-dn\").asString());\n+      Json attribute3 = elements.next();\n+      assertEquals(\"memberOf\", attribute3.at(\"reference\").asString());\n+      assertEquals(\"Roles3\", attribute3.at(\"to\").asString());\n+      Json userPasswordMapping = ldapIdentityMapping.at(\"user-password-mapper\");\n+      assertEquals(\"userPassword\", userPasswordMapping.at(\"from\").asString());\n+      assertFalse(userPasswordMapping.at(\"verifiable\").asBoolean());\n+      assertFalse(userPasswordMapping.at(\"writable\").asBoolean());\n+\n+      Json localRealm = defaultRealm.at(\"local-realm\");\n+      assertEquals(\"test-local\", localRealm.at(\"name\").asString());\n+\n+      Json propertiesRealm = defaultRealm.at(\"properties-realm\");\n+      assertEquals(\"Roles\", propertiesRealm.at(\"groups-attribute\").asString());\n+      Json userProperties = propertiesRealm.at(\"user-properties\");\n+      assertEquals(\"ServerConfigurationParserTest-user.properties\", userProperties.at(\"path\").asString());\n+      assertEquals(\"digest\", userProperties.at(\"digest-realm-name\").asString());\n+      assertEquals(serverConfigPath, userProperties.at(\"relative-to\").asString());\n+      assertTrue(userProperties.at(\"plain-text\").asBoolean());\n+      Json groupProperties = propertiesRealm.at(\"group-properties\");\n+      assertEquals(serverConfigPath, groupProperties.at(\"relative-to\").asString());\n+      assertEquals(\"ServerConfigurationParserTest-group.properties\", groupProperties.at(\"path\").asString());\n+\n+      Json tokenRealm = defaultRealm.at(\"token-realm\");\n+      assertEquals(\"token-test\", tokenRealm.at(\"name\").asString());\n+      assertEquals(\"username-claim\", tokenRealm.at(\"principal-claim\").asString());\n+      Json oauth = tokenRealm.at(\"oauth2-introspection\");\n+      assertEquals(\"ANY\", oauth.at(\"host-name-verification-policy\").asString());\n+      assertEquals(\"http://${org.infinispan.test.host.address}:14567/auth/realms/infinispan/protocol/openid-connect/token/introspect\", oauth.at(\"introspection-url\").asString());\n+      assertEquals(\"infinispan-server\", oauth.at(\"client-id\").asString());\n+      assertEquals(\"***\", oauth.at(\"client-secret\").asString());\n+\n+      Json trustStoreRealm = defaultRealm.at(\"truststore-realm\");\n+      assertEquals(\"truststore.p12\", trustStoreRealm.at(\"path\").asString());\n+      assertEquals(\"SunJSSE\", trustStoreRealm.at(\"provider\").asString());\n+      assertEquals(serverConfigPath, trustStoreRealm.at(\"relative-to\").asString());\n+      assertEquals(\"***\", trustStoreRealm.at(\"keystore-password\").asString());\n+\n+      Json endpoints = serverNode.at(\"endpoints\");\n+      assertEquals(\"default\", endpoints.at(\"socket-binding\").asString());\n+      assertEquals(\"default\", endpoints.at(\"security-realm\").asString());\n+\n+      Json hotrodConnector = endpoints.at(\"hotrod-connector\");\n+      Json restConnector = endpoints.at(\"rest-connector\");\n+      Json memcachedConnector = endpoints.at(\"memcached-connector\");\n+      assertHotRodConnector(hotrodConnector);\n+      assertRestConnector(restConnector);\n+      assertMemcachedConnector(memcachedConnector);\n+   }\n+\n+   ServerConfiguration parse() throws IOException {\n+      FileLookup fileLookup = FileLookupFactory.newInstance();\n+      URL url = fileLookup.lookupFileLocation(\"configuration/\" + getClass().getSimpleName() + \".xml\", ServerConfigurationParserTest.class.getClassLoader());\n+      Properties properties = new Properties();\n+      properties.setProperty(Server.INFINISPAN_SERVER_CONFIG_PATH, getConfigPath().toString());\n+      ParserRegistry registry = new ParserRegistry(this.getClass().getClassLoader(), false, properties);\n+      ConfigurationBuilderHolder holder = registry.parse(url);\n+      GlobalConfiguration global = holder.getGlobalConfigurationBuilder().build();\n+      return global.module(ServerConfiguration.class);\n+   }\n+\n+   private void assertHotRodConnector(Json hotrodConnector) {\n+      assertEquals(\"hotrod\", hotrodConnector.at(\"name\").asString());\n+      assertEquals(23, hotrodConnector.at(\"io-threads\").asInteger());\n+      assertFalse(hotrodConnector.at(\"tcp-nodelay\").asBoolean());\n+      assertEquals(20, hotrodConnector.at(\"worker-threads\").asInteger());\n+      assertFalse(hotrodConnector.at(\"tcp-keepalive\").asBoolean());\n+      assertEquals(10, hotrodConnector.at(\"send-buffer-size\").asInteger());\n+      assertEquals(20, hotrodConnector.at(\"receive-buffer-size\").asInteger());\n+      assertEquals(2, hotrodConnector.at(\"idle-timeout\").asInteger());\n+      assertEquals(\"hotrod\", hotrodConnector.at(\"socket-binding\").asString());\n+      assertEquals(\"external\", hotrodConnector.at(\"external-host\").asString());\n+      assertEquals(12345, hotrodConnector.at(\"external-port\").asInteger());\n+\n+      Json topologyCache = hotrodConnector.at(\"topology-state-transfer\");\n+      assertFalse(topologyCache.at(\"await-initial-retrieval\").asBoolean());\n+      assertFalse(topologyCache.at(\"lazy-retrieval\").asBoolean());\n+      assertEquals(12, topologyCache.at(\"lock-timeout\").asInteger());\n+      assertEquals(13, topologyCache.at(\"replication-timeout\").asInteger());\n+\n+      Json authentication = hotrodConnector.at(\"authentication\");\n+      assertEquals(\"default\", authentication.at(\"security-realm\").asString());\n+\n+      Json sasl = authentication.at(\"sasl\");\n+      assertEquals(\"localhost\", sasl.at(\"server-name\").asString());\n+\n+      Iterator<Json> mechanisms = sasl.at(\"mechanisms\").asJsonList().iterator();\n+      assertEquals(\"GSSAPI\", mechanisms.next().asString());\n+      assertEquals(\"DIGEST-MD5\", mechanisms.next().asString());\n+      assertEquals(\"PLAIN\", mechanisms.next().asString());\n+\n+      Iterator<Json> qop = sasl.at(\"qop\").asJsonList().iterator();\n+      assertEquals(\"auth\", qop.next().asString());\n+      assertEquals(\"auth-conf\", qop.next().asString());\n+\n+      Iterator<Json> strength = sasl.at(\"strength\").asJsonList().iterator();\n+      assertEquals(\"high\", strength.next().asString());\n+      assertEquals(\"medium\", strength.next().asString());\n+      assertEquals(\"low\", strength.next().asString());\n+\n+      Json policy = sasl.at(\"policy\");\n+      assertFalse(policy.at(\"forward-secrecy\").at(\"value\").asBoolean());\n+      assertTrue(policy.at(\"no-active\").at(\"value\").asBoolean());\n+      assertTrue(policy.at(\"no-anonymous\").at(\"value\").asBoolean());\n+      assertFalse(policy.at(\"no-dictionary\").at(\"value\").asBoolean());\n+      assertTrue(policy.at(\"no-plain-text\").at(\"value\").asBoolean());\n+      assertTrue(policy.at(\"pass-credentials\").at(\"value\").asBoolean());\n+\n+      Json extraProperties = sasl.at(\"property\");\n+      assertEquals(\"value1\", extraProperties.at(\"prop1\").asString());\n+      assertEquals(\"value2\", extraProperties.at(\"prop2\").asString());\n+      assertEquals(\"value3\", extraProperties.at(\"prop3\").asString());\n+\n+      Json encryption = hotrodConnector.at(\"encryption\");\n+      assertTrue(encryption.at(\"require-ssl-client-auth\").asBoolean());\n+      assertEquals(\"default\", encryption.at(\"security-realm\").asString());\n+\n+      Json sni = encryption.at(\"sni\");\n+      assertEquals(2, sni.asList().size());\n+      Iterator<Json> elements = sni.asJsonList().iterator();\n+      Json sni1 = elements.next();\n+      assertEquals(\"sni-host-1\", sni1.at(\"host-name\").asString());\n+      assertEquals(\"default\", sni1.at(\"security-realm\").asString());\n+      Json sni2 = elements.next();\n+      assertEquals(\"sni-host-2\", sni2.at(\"host-name\").asString());\n+      assertEquals(\"default\", sni2.at(\"security-realm\").asString());\n+   }\n+\n+   private void assertRestConnector(Json restConnector) {\n+      assertEquals(\"rest\", restConnector.at(\"socket-binding\").asString());\n+      assertEquals(11, restConnector.at(\"io-threads\").asInteger());\n+      assertEquals(3, restConnector.at(\"worker-threads\").asInteger());\n+      assertEquals(\"rest\", restConnector.at(\"name\").asString());\n+      assertEquals(\"rest\", restConnector.at(\"context-path\").asString());\n+      assertEquals(\"NEVER\", restConnector.at(\"extended-headers\").asString());\n+      assertEquals(3, restConnector.at(\"max-content-length\").asInteger());\n+      assertEquals(3, restConnector.at(\"compression-level\").asInteger());\n+\n+      Json authentication = restConnector.at(\"authentication\");\n+      assertEquals(\"default\", authentication.at(\"security-realm\").asString());\n+      Json mechanisms = authentication.at(\"mechanisms\");\n+      assertEquals(2, mechanisms.asList().size());\n+\n+      Iterator<Json> items = mechanisms.asJsonList().iterator();\n+      assertEquals(\"DIGEST\", items.next().asString());\n+      assertEquals(\"BASIC\", items.next().asString());\n+\n+      Json corsRules = restConnector.at(\"cors-rules\").at(\"cors-rule\");\n+      assertEquals(2, corsRules.asList().size());\n+      Iterator<Json> rules = corsRules.asJsonList().iterator();\n+      Json rule1 = rules.next();\n+      assertEquals(\"rule1\", rule1.at(\"name\").asString());\n+      assertTrue(rule1.at(\"allow-credentials\").asBoolean());\n+      assertEquals(1, rule1.at(\"max-age-seconds\").asInteger());\n+      assertStringArray(asList(\"origin1\", \"origin2\"), rule1.at(\"allowed-origins\"));\n+      assertStringArray(asList(\"GET\", \"POST\"), rule1.at(\"allowed-methods\"));\n+      assertStringArray(singletonList(\"Accept\"), rule1.at(\"allowed-headers\"));\n+      assertStringArray(asList(\"Accept\", \"Content-Type\"), rule1.at(\"expose-headers\"));\n+\n+      Json rule2 = rules.next();\n+      assertEquals(\"rule2\", rule2.at(\"name\").asString());\n+      assertStringArray(singletonList(\"*\"), rule2.at(\"allowed-origins\"));\n+      assertStringArray(asList(\"GET\", \"POST\"), rule2.at(\"allowed-methods\"));\n+      assertNull(rule2.at(\"allowed-headers\"));\n+      assertNull(rule2.at(\"expose-headers\"));\n+\n+      Json encryption = restConnector.at(\"encryption\");\n+      assertFalse(encryption.at(\"require-ssl-client-auth\").asBoolean());\n+      assertEquals(\"default\", encryption.at(\"security-realm\").asString());\n+\n+      Json sni = encryption.at(\"sni\");\n+      assertEquals(2, sni.asList().size());\n+      Iterator<Json> elements = sni.asJsonList().iterator();\n+      Json sni1 = elements.next();\n+      assertEquals(\"sni-host-3\", sni1.at(\"host-name\").asString());\n+      assertEquals(\"default\", sni1.at(\"security-realm\").asString());\n+      Json sni2 = elements.next();\n+      assertEquals(\"sni-host-4\", sni2.at(\"host-name\").asString());\n+      assertEquals(\"default\", sni2.at(\"security-realm\").asString());\n+   }\n+\n+   private void assertMemcachedConnector(Json memcachedConnector) {\n+      assertEquals(\"memcached\", memcachedConnector.at(\"name\").asString());\n+      assertEquals(\"memcached\", memcachedConnector.at(\"socket-binding\").asString());\n+      assertEquals(1, memcachedConnector.at(\"io-threads\").asInteger());\n+      assertEquals(160, memcachedConnector.at(\"worker-threads\").asInteger());\n+      assertEquals(1, memcachedConnector.at(\"idle-timeout\").asInteger());\n+      assertTrue(memcachedConnector.at(\"tcp-nodelay\").asBoolean());\n+      assertTrue(memcachedConnector.at(\"tcp-keepalive\").asBoolean());\n+      assertEquals(3, memcachedConnector.at(\"send-buffer-size\").asInteger());\n+      assertEquals(3, memcachedConnector.at(\"receive-buffer-size\").asInteger());\n+      assertEquals(\"string\", memcachedConnector.at(\"cache\").asString());\n+      assertEquals(\"application/json\", memcachedConnector.at(\"client-encoding\").asString());\n+   }\n+\n+   private void assertMemcachedConnector2(Json memcachedConnector) {", "originalCommit": "e608605c5b52b07a4ff9b45a10766722e3473b78", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f1872f277ef7000808ee8a115abb60fd834bdaed", "chunk": "diff --git a/server/runtime/src/test/java/org/infinispan/server/configuration/ServerConfigurationParserTest.java b/server/runtime/src/test/java/org/infinispan/server/configuration/ServerConfigurationParserTest.java\nindex 6c313dba0c..b456f9c816 100644\n--- a/server/runtime/src/test/java/org/infinispan/server/configuration/ServerConfigurationParserTest.java\n+++ b/server/runtime/src/test/java/org/infinispan/server/configuration/ServerConfigurationParserTest.java\n\n@@ -223,11 +223,11 @@ public void testJsonSerialization() throws IOException {\n       assertEquals(\"uid=admin,ou=People,dc=infinispan,dc=org\", ldapRealm.at(\"principal\").asString());\n       assertEquals(\"***\", ldapRealm.at(\"credential\").asString());\n \n-      /*Json ldapNameRewriter = ldapRealm.at(\"name-rewriter\");\n+      Json ldapNameRewriter = ldapRealm.at(\"name-rewriter\");\n       Json ldapRegexPrincipalTransformer = ldapNameRewriter.at(\"regex-principal-transformer\");\n       assertEquals(\"uid\", ldapRegexPrincipalTransformer.at(\"name\").asString());\n       assertEquals(\"uid\", ldapRegexPrincipalTransformer.at(\"pattern\").asString());\n-      assertEquals(\"uid\", ldapRegexPrincipalTransformer.at(\"replacement\").asString());*/\n+      assertEquals(\"uid\", ldapRegexPrincipalTransformer.at(\"replacement\").asString());\n \n       Json ldapIdentityMapping = ldapRealm.at(\"identity-mapping\");\n       assertEquals(\"uid\", ldapIdentityMapping.at(\"rdn-identifier\").asString());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYzNTY1Nw==", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r529635657", "bodyText": "uncomment?", "author": "pruivo", "createdAt": "2020-11-24T15:28:32Z", "path": "server/runtime/src/test/java/org/infinispan/server/configuration/ServerConfigurationParserTest.java", "diffHunk": "@@ -91,5 +123,381 @@ public void testParser() throws IOException {\n       assertEquals(socketBindings.get(\"default\").getAddress().getAddress().getHostAddress(), singlePortRouter.host());\n       assertEquals(socketBindings.get(\"default\").getPort(), singlePortRouter.port());\n       assertEquals(socketBindings.get(\"memcached\").getPort(), server.endpoints().endpoints().get(0).connectors().get(2).port());\n+\n+      assertEquals(\"strongPassword\", realmConfiguration.ldapConfiguration().attributes().attribute(\"credential\").get());\n+      assertEquals(\"secret\", new String((char[]) realmConfiguration.trustStoreConfiguration().attributes().attribute(\"keystorePassword\").get())); //stores it as char[]\n+      assertEquals(\"1fdca4ec-c416-47e0-867a-3d471af7050f\", realmConfiguration.tokenConfiguration().oauth2Configuration().attributes().attribute(\"clientSecret\").get());\n+      assertEquals(\"password\", new String((char[]) realmConfiguration.serverIdentitiesConfiguration().sslConfigurations().get(0).keyStore().attributes().attribute(\"keystorePassword\").get()));\n+   }\n+\n+   @Test\n+   public void testJsonSerialization() throws IOException {\n+      ServerConfiguration serverConfiguration = parse();\n+\n+      String serverConfigPath = getConfigPath().toString();\n+\n+      JsonWriter writer = new JsonWriter();\n+      String json = writer.toJSON(serverConfiguration);\n+\n+      Json serverNode = Json.read(json).at(\"server\");\n+\n+      Json interfaces = serverNode.at(\"interfaces\").at(\"interface\");\n+      assertEquals(2, interfaces.asList().size());\n+\n+      Json interface1 = interfaces.at(0);\n+      Json interface2 = interfaces.at(1);\n+      Json address1 = interface1.at(\"loopback\");\n+      Json address2 = interface2.at(\"loopback\");\n+      assertEquals(\"default\", interface1.at(\"name\").asString());\n+      assertEquals(0, address1.asMap().size());\n+      assertEquals(\"another\", interface2.at(\"name\").asString());\n+      assertEquals(0, address2.asMap().size());\n+\n+      Json socketBindings = serverNode.at(\"socket-bindings\");\n+      assertEquals(\"default\", socketBindings.at(\"default-interface\").asString());\n+      assertEquals(0, socketBindings.at(\"port-offset\").asInteger());\n+\n+      Json socketBinding = socketBindings.at(\"socket-binding\");\n+      assertEquals(5, socketBinding.asList().size());\n+\n+      Iterator<Json> bindings = socketBinding.asJsonList().iterator();\n+      Json binding1 = bindings.next();\n+      assertEquals(\"default\", binding1.at(\"name\").asString());\n+      assertEquals(11222, binding1.at(\"port\").asInteger());\n+      Json binding2 = bindings.next();\n+      assertEquals(\"hotrod\", binding2.at(\"name\").asString());\n+      assertEquals(11223, binding2.at(\"port\").asInteger());\n+      Json binding3 = bindings.next();\n+      assertEquals(\"memcached\", binding3.at(\"name\").asString());\n+      assertEquals(11221, binding3.at(\"port\").asInteger());\n+      Json binding4 = bindings.next();\n+      assertEquals(\"memcached-2\", binding4.at(\"name\").asString());\n+      assertEquals(12221, binding4.at(\"port\").asInteger());\n+      Json binding5 = bindings.next();\n+      assertEquals(\"rest\", binding5.at(\"name\").asString());\n+      assertEquals(8080, binding5.at(\"port\").asInteger());\n+\n+      Json credentialStores = serverNode.at(\"security\").at(\"credential-stores\");\n+      assertEquals(1, credentialStores.asMap().size());\n+      Json credentialStore = credentialStores.at(\"credential-store\");\n+      assertEquals(\"credentials.pfx\", credentialStore.at(\"path\").asString());\n+\n+      Json securityRealms = serverNode.at(\"security\").at(\"security-realms\");\n+      assertEquals(1, securityRealms.asMap().size());\n+\n+      Json securityRealm = securityRealms.at(\"security-realm\");\n+      assertEquals(2, securityRealm.asList().size());\n+      Json defaultRealm = securityRealm.at(0);\n+      assertEquals(\"default\", defaultRealm.at(\"name\").asString());\n+\n+      Json ssl = defaultRealm.at(\"server-identities\").at(\"ssl\");\n+      Json keyStore = ssl.at(\"keystore\");\n+      assertEquals(\"ServerConfigurationParserTest-keystore.pfx\", keyStore.at(\"path\").asString());\n+      assertEquals(serverConfigPath, keyStore.at(\"relative-to\").asString());\n+      assertEquals(\"***\", keyStore.at(\"keystore-password\").asString());\n+      assertEquals(\"server\", keyStore.at(\"alias\").asString());\n+      assertEquals(\"***\", keyStore.at(\"key-password\").asString());\n+      assertEquals(\"localhost\", keyStore.at(\"generate-self-signed-certificate-host\").asString());\n+      Json engine = ssl.at(\"engine\");\n+      Json protocols = engine.at(\"enabled-protocols\");\n+      Iterator<Json> protocolItems = protocols.asJsonList().iterator();\n+      assertEquals(\"TLSV1.1\", protocolItems.next().asString());\n+      assertEquals(\"TLSV1.2\", protocolItems.next().asString());\n+      assertEquals(\"TLSV1.3\", protocolItems.next().asString());\n+      Json cipherSuites = engine.at(\"enabled-ciphersuites\");\n+      assertEquals(\"DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256\", cipherSuites.asString());\n+\n+      Json kerberos = defaultRealm.at(\"server-identities\").at(\"kerberos\");\n+      assertEquals(\"keytab\", kerberos.at(\"keytab-path\").asString());\n+      assertEquals(serverConfigPath, kerberos.at(\"relative-to\").asString());\n+\n+      Json filesystemRealm = defaultRealm.at(\"filesystem-realm\");\n+      assertEquals(\"security\", filesystemRealm.at(\"path\").asString());\n+      assertEquals(3, filesystemRealm.at(\"levels\").asInteger());\n+      assertFalse(filesystemRealm.at(\"encoded\").asBoolean());\n+      assertEquals(serverConfigPath, filesystemRealm.at(\"relative-to\").asString());\n+\n+      Json ldapRealm = defaultRealm.at(\"ldap-realm\");\n+      assertEquals(\"ldap\", ldapRealm.at(\"name\").asString());\n+      assertEquals(\"ldap://${org.infinispan.test.host.address}:10389\", ldapRealm.at(\"url\").asString());\n+      assertEquals(\"uid=admin,ou=People,dc=infinispan,dc=org\", ldapRealm.at(\"principal\").asString());\n+      assertEquals(\"***\", ldapRealm.at(\"credential\").asString());\n+\n+      /*Json ldapNameRewriter = ldapRealm.at(\"name-rewriter\");", "originalCommit": "e608605c5b52b07a4ff9b45a10766722e3473b78", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f1872f277ef7000808ee8a115abb60fd834bdaed", "chunk": "diff --git a/server/runtime/src/test/java/org/infinispan/server/configuration/ServerConfigurationParserTest.java b/server/runtime/src/test/java/org/infinispan/server/configuration/ServerConfigurationParserTest.java\nindex 6c313dba0c..b456f9c816 100644\n--- a/server/runtime/src/test/java/org/infinispan/server/configuration/ServerConfigurationParserTest.java\n+++ b/server/runtime/src/test/java/org/infinispan/server/configuration/ServerConfigurationParserTest.java\n\n@@ -223,11 +223,11 @@ public void testJsonSerialization() throws IOException {\n       assertEquals(\"uid=admin,ou=People,dc=infinispan,dc=org\", ldapRealm.at(\"principal\").asString());\n       assertEquals(\"***\", ldapRealm.at(\"credential\").asString());\n \n-      /*Json ldapNameRewriter = ldapRealm.at(\"name-rewriter\");\n+      Json ldapNameRewriter = ldapRealm.at(\"name-rewriter\");\n       Json ldapRegexPrincipalTransformer = ldapNameRewriter.at(\"regex-principal-transformer\");\n       assertEquals(\"uid\", ldapRegexPrincipalTransformer.at(\"name\").asString());\n       assertEquals(\"uid\", ldapRegexPrincipalTransformer.at(\"pattern\").asString());\n-      assertEquals(\"uid\", ldapRegexPrincipalTransformer.at(\"replacement\").asString());*/\n+      assertEquals(\"uid\", ldapRegexPrincipalTransformer.at(\"replacement\").asString());\n \n       Json ldapIdentityMapping = ldapRealm.at(\"identity-mapping\");\n       assertEquals(\"uid\", ldapIdentityMapping.at(\"rdn-identifier\").asString());\n"}}, {"oid": "f1872f277ef7000808ee8a115abb60fd834bdaed", "url": "https://github.com/infinispan/infinispan/commit/f1872f277ef7000808ee8a115abb60fd834bdaed", "message": "ISPN-12101 Credential Store", "committedDate": "2020-11-24T17:54:31Z", "type": "forcePushed"}, {"oid": "fbe998552159bf7c10e95418b8682d2e5213c331", "url": "https://github.com/infinispan/infinispan/commit/fbe998552159bf7c10e95418b8682d2e5213c331", "message": "ISPN-12101 Credential Store", "committedDate": "2020-11-24T20:36:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI3MTk2Mg==", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r530271962", "bodyText": "can be removed, unused.", "author": "pruivo", "createdAt": "2020-11-25T10:38:22Z", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfigurationBuilder.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package org.infinispan.server.configuration.security;\n+\n+import static org.infinispan.server.configuration.security.CredentialStoreConfiguration.CREDENTIAL;\n+import static org.infinispan.server.configuration.security.CredentialStoreConfiguration.PATH;\n+import static org.infinispan.server.configuration.security.CredentialStoreConfiguration.RELATIVE_TO;\n+import static org.infinispan.server.configuration.security.CredentialStoreConfiguration.TYPE;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.infinispan.commons.CacheConfigurationException;\n+import org.infinispan.commons.configuration.Builder;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.configuration.parsing.ParseUtils;\n+import org.infinispan.server.Server;\n+import org.wildfly.security.auth.server.IdentityCredentials;\n+import org.wildfly.security.credential.Credential;\n+import org.wildfly.security.credential.PasswordCredential;\n+import org.wildfly.security.credential.store.CredentialStore;\n+import org.wildfly.security.credential.store.CredentialStoreException;\n+import org.wildfly.security.credential.store.CredentialStoreSpi;\n+import org.wildfly.security.credential.store.impl.KeyStoreCredentialStore;\n+import org.wildfly.security.password.interfaces.ClearPassword;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 12.0\n+ **/\n+public class CredentialStoreConfigurationBuilder implements Builder<CredentialStoreConfiguration> {\n+   private final AttributeSet attributes;\n+   private final CredentialStoresConfigurationBuilder credentialStoresConfigurationBuilder;", "originalCommit": "fbe998552159bf7c10e95418b8682d2e5213c331", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e2d84190242ca447d90d97f1033a035ce37afea2", "chunk": "diff --git a/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfigurationBuilder.java b/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfigurationBuilder.java\nindex a8106e392c..9c5fdcb948 100644\n--- a/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfigurationBuilder.java\n+++ b/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfigurationBuilder.java\n\n@@ -28,12 +28,10 @@\n  **/\n public class CredentialStoreConfigurationBuilder implements Builder<CredentialStoreConfiguration> {\n    private final AttributeSet attributes;\n-   private final CredentialStoresConfigurationBuilder credentialStoresConfigurationBuilder;\n    private CredentialStoreSpi credentialStore;\n \n    CredentialStoreConfigurationBuilder(CredentialStoresConfigurationBuilder credentialStoresConfigurationBuilder) {\n       this.attributes = CredentialStoreConfiguration.attributeDefinitionSet();\n-      this.credentialStoresConfigurationBuilder = credentialStoresConfigurationBuilder;\n    }\n \n    public CredentialStoreConfigurationBuilder path(String value) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI3MjM0Mg==", "url": "https://github.com/infinispan/infinispan/pull/8841#discussion_r530272342", "bodyText": "can be final\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               private static ElementDefinition<CredentialStoreConfiguration> ELEMENT_DEFINITION = new DefaultElementDefinition<>(Element.CREDENTIAL_STORE.toString());\n          \n          \n            \n               private static final ElementDefinition<CredentialStoreConfiguration> ELEMENT_DEFINITION = new DefaultElementDefinition<>(Element.CREDENTIAL_STORE.toString());", "author": "pruivo", "createdAt": "2020-11-25T10:38:59Z", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfiguration.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.infinispan.server.configuration.security;\n+\n+import org.infinispan.commons.configuration.ConfigurationInfo;\n+import org.infinispan.commons.configuration.attributes.AttributeDefinition;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.commons.configuration.elements.DefaultElementDefinition;\n+import org.infinispan.commons.configuration.elements.ElementDefinition;\n+import org.infinispan.server.configuration.Element;\n+import org.infinispan.server.configuration.PasswordSerializer;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 12.0\n+ **/\n+public class CredentialStoreConfiguration implements ConfigurationInfo {\n+   static final AttributeDefinition<String> NAME = AttributeDefinition.builder(\"name\", null, String.class).build();\n+   static final AttributeDefinition<String> PATH = AttributeDefinition.builder(\"path\", null, String.class).build();\n+   static final AttributeDefinition<String> RELATIVE_TO = AttributeDefinition.builder(\"relativeTo\", null, String.class).build();\n+   static final AttributeDefinition<String> TYPE = AttributeDefinition.builder(\"type\", \"pkcs12\", String.class).build();\n+   static final AttributeDefinition<String> CREDENTIAL = AttributeDefinition.builder(\"credential\", null, String.class).serializer(PasswordSerializer.INSTANCE).build();\n+\n+   private final AttributeSet attributes;\n+\n+   static AttributeSet attributeDefinitionSet() {\n+      return new AttributeSet(CredentialStoreConfiguration.class, NAME, PATH, RELATIVE_TO, TYPE, CREDENTIAL);\n+   }\n+\n+   private static ElementDefinition<CredentialStoreConfiguration> ELEMENT_DEFINITION = new DefaultElementDefinition<>(Element.CREDENTIAL_STORE.toString());", "originalCommit": "fbe998552159bf7c10e95418b8682d2e5213c331", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e2d84190242ca447d90d97f1033a035ce37afea2", "chunk": "diff --git a/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfiguration.java b/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfiguration.java\nindex 5a249ac4e8..d35c74d99e 100644\n--- a/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfiguration.java\n+++ b/server/runtime/src/main/java/org/infinispan/server/configuration/security/CredentialStoreConfiguration.java\n\n@@ -25,7 +25,7 @@ static AttributeSet attributeDefinitionSet() {\n       return new AttributeSet(CredentialStoreConfiguration.class, NAME, PATH, RELATIVE_TO, TYPE, CREDENTIAL);\n    }\n \n-   private static ElementDefinition<CredentialStoreConfiguration> ELEMENT_DEFINITION = new DefaultElementDefinition<>(Element.CREDENTIAL_STORE.toString());\n+   private static final ElementDefinition<CredentialStoreConfiguration> ELEMENT_DEFINITION = new DefaultElementDefinition<>(Element.CREDENTIAL_STORE.toString());\n \n    CredentialStoreConfiguration(AttributeSet attributes) {\n       this.attributes = attributes.checkProtection();\n"}}, {"oid": "e2d84190242ca447d90d97f1033a035ce37afea2", "url": "https://github.com/infinispan/infinispan/commit/e2d84190242ca447d90d97f1033a035ce37afea2", "message": "ISPN-12101 Credential Store", "committedDate": "2020-11-25T11:11:08Z", "type": "commit"}, {"oid": "e2d84190242ca447d90d97f1033a035ce37afea2", "url": "https://github.com/infinispan/infinispan/commit/e2d84190242ca447d90d97f1033a035ce37afea2", "message": "ISPN-12101 Credential Store", "committedDate": "2020-11-25T11:11:08Z", "type": "forcePushed"}]}