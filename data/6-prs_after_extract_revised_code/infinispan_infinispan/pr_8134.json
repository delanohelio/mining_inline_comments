{"pr_number": 8134, "pr_title": "ISPN-11574 Automatic server authentication configuration", "pr_createdAt": "2020-03-31T19:09:05Z", "pr_url": "https://github.com/infinispan/infinispan/pull/8134", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE3ODI0MA==", "url": "https://github.com/infinispan/infinispan/pull/8134#discussion_r402178240", "bodyText": "\ud83d\udc4d", "author": "karesti", "createdAt": "2020-04-02T09:32:06Z", "path": "server/hotrod/src/main/java/org/infinispan/server/hotrod/configuration/SaslConfiguration.java", "diffHunk": "@@ -19,7 +19,7 @@\n  */\n @SuppressWarnings(\"unchecked\")\n public class SaslConfiguration implements ConfigurationInfo {\n-   public static final AttributeDefinition<String> SERVER_NAME = AttributeDefinition.builder(\"serverName\", null, String.class).immutable().build();\n+   public static final AttributeDefinition<String> SERVER_NAME = AttributeDefinition.builder(\"serverName\", \"infinispan\", String.class).immutable().build();", "originalCommit": "047e33390dc2435d18de3c659e6787c6efd9578f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE3OTMxMg==", "url": "https://github.com/infinispan/infinispan/pull/8134#discussion_r402179312", "bodyText": "may this Server log be used in the REST endpoints for tracing/debugging ? not a review request but a question for adding logs that actually lack IMO", "author": "karesti", "createdAt": "2020-04-02T09:33:52Z", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/hotrod/HotRodServerConfigurationParser.java", "diffHunk": "@@ -123,6 +128,50 @@ private void parseHotRodConnector(XMLExtendedStreamReader reader, ConfigurationB\n             }\n          }\n       }\n+      if (implicitAuthentication) {\n+         ServerSecurityRealm securityRealm = serverBuilder.endpoint().securityRealm();\n+         builder.authentication().enable().securityRealm(securityRealm.getName());\n+         String serverPrincipal = null;\n+         for (KerberosSecurityFactoryConfiguration identity : securityRealm.getServerIdentities().kerberosConfigurations()) {\n+            if (identity.getPrincipal().startsWith(\"hotrod/\")) {\n+               builder.authentication()\n+                     .addMechanisms(SaslMechanismInformation.Names.GS2_KRB5, SaslMechanismInformation.Names.GSSAPI);\n+               serverPrincipal = identity.getPrincipal();\n+               break;\n+            }\n+            Server.log.debugf(\"Enabled Kerberos mechanisms for Hot Rod using principal '%s'\", identity.getPrincipal());\n+         }\n+         if (securityRealm.hasFeature(ServerSecurityRealm.Feature.TOKEN)) {\n+            builder.authentication().addMechanisms(SaslMechanismInformation.Names.OAUTHBEARER);\n+            Server.log.debug(\"Enabled OAUTHBEARER mechanism for Hot Rod\");\n+         }\n+         if (securityRealm.hasFeature(ServerSecurityRealm.Feature.TRUST)) {\n+            builder.authentication().addMechanisms(SaslMechanismInformation.Names.EXTERNAL);\n+            Server.log.debug(\"Enabled EXTERNAL mechanism for Hot Rod\");", "originalCommit": "047e33390dc2435d18de3c659e6787c6efd9578f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYwNDk1NA==", "url": "https://github.com/infinispan/infinispan/pull/8134#discussion_r404604954", "bodyText": "Only add logs that would be useful for helping in user scenarios. For internal aid, just use debugging. Also, in performance-critical areas debug/trace logs should be surrounded by if(log.isxxxenabled())", "author": "tristantarrant", "createdAt": "2020-04-07T07:48:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE3OTMxMg=="}], "type": "inlineReview", "revised_code": {"commit": "e1aceea74e7b8609ab864fa2ef0fa8272c497309", "chunk": "diff --git a/server/runtime/src/main/java/org/infinispan/server/configuration/hotrod/HotRodServerConfigurationParser.java b/server/runtime/src/main/java/org/infinispan/server/configuration/hotrod/HotRodServerConfigurationParser.java\nindex f411761176..ccf7b062fb 100644\n--- a/server/runtime/src/main/java/org/infinispan/server/configuration/hotrod/HotRodServerConfigurationParser.java\n+++ b/server/runtime/src/main/java/org/infinispan/server/configuration/hotrod/HotRodServerConfigurationParser.java\n\n@@ -128,50 +123,6 @@ private void parseHotRodConnector(XMLExtendedStreamReader reader, ConfigurationB\n             }\n          }\n       }\n-      if (implicitAuthentication) {\n-         ServerSecurityRealm securityRealm = serverBuilder.endpoint().securityRealm();\n-         builder.authentication().enable().securityRealm(securityRealm.getName());\n-         String serverPrincipal = null;\n-         for (KerberosSecurityFactoryConfiguration identity : securityRealm.getServerIdentities().kerberosConfigurations()) {\n-            if (identity.getPrincipal().startsWith(\"hotrod/\")) {\n-               builder.authentication()\n-                     .addMechanisms(SaslMechanismInformation.Names.GS2_KRB5, SaslMechanismInformation.Names.GSSAPI);\n-               serverPrincipal = identity.getPrincipal();\n-               break;\n-            }\n-            Server.log.debugf(\"Enabled Kerberos mechanisms for Hot Rod using principal '%s'\", identity.getPrincipal());\n-         }\n-         if (securityRealm.hasFeature(ServerSecurityRealm.Feature.TOKEN)) {\n-            builder.authentication().addMechanisms(SaslMechanismInformation.Names.OAUTHBEARER);\n-            Server.log.debug(\"Enabled OAUTHBEARER mechanism for Hot Rod\");\n-         }\n-         if (securityRealm.hasFeature(ServerSecurityRealm.Feature.TRUST)) {\n-            builder.authentication().addMechanisms(SaslMechanismInformation.Names.EXTERNAL);\n-            Server.log.debug(\"Enabled EXTERNAL mechanism for Hot Rod\");\n-         }\n-         if (securityRealm.hasFeature(ServerSecurityRealm.Feature.PASSWORD)) {\n-            builder.authentication()\n-                  .addMechanisms(\n-                        SaslMechanismInformation.Names.SCRAM_SHA_512,\n-                        SaslMechanismInformation.Names.SCRAM_SHA_384,\n-                        SaslMechanismInformation.Names.SCRAM_SHA_256,\n-                        SaslMechanismInformation.Names.SCRAM_SHA_1,\n-                        SaslMechanismInformation.Names.DIGEST_SHA_512,\n-                        SaslMechanismInformation.Names.DIGEST_SHA_384,\n-                        SaslMechanismInformation.Names.DIGEST_SHA_256,\n-                        SaslMechanismInformation.Names.DIGEST_SHA,\n-                        SaslMechanismInformation.Names.CRAM_MD5,\n-                        SaslMechanismInformation.Names.DIGEST_MD5\n-                  );\n-            Server.log.debug(\"Enabled SCRAM, DIGEST and CRAM mechanisms for Hot Rod\");\n-         }\n-         // Only enable PLAIN if encryption is on\n-         if (serverBuilder.endpoint().ssl().isEnabled()) {\n-            builder.authentication().addMechanisms(SaslMechanismInformation.Names.PLAIN);\n-            Server.log.debug(\"Enabled PLAIN mechanism for Hot Rod\");\n-         }\n-         builder.authentication().serverAuthenticationProvider(securityRealm.getSASLAuthenticationProvider(serverPrincipal));\n-      }\n    }\n \n    private void parseEncryption(XMLExtendedStreamReader reader, ServerConfigurationBuilder serverBuilder, EncryptionConfigurationBuilder encryption) throws XMLStreamException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4MTk2MA==", "url": "https://github.com/infinispan/infinispan/pull/8134#discussion_r402181960", "bodyText": "I would add the comment in the debug. Encryption is on. PLAIN mechanism enabled for Hot Rod", "author": "karesti", "createdAt": "2020-04-02T09:38:19Z", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/hotrod/HotRodServerConfigurationParser.java", "diffHunk": "@@ -123,6 +128,50 @@ private void parseHotRodConnector(XMLExtendedStreamReader reader, ConfigurationB\n             }\n          }\n       }\n+      if (implicitAuthentication) {\n+         ServerSecurityRealm securityRealm = serverBuilder.endpoint().securityRealm();\n+         builder.authentication().enable().securityRealm(securityRealm.getName());\n+         String serverPrincipal = null;\n+         for (KerberosSecurityFactoryConfiguration identity : securityRealm.getServerIdentities().kerberosConfigurations()) {\n+            if (identity.getPrincipal().startsWith(\"hotrod/\")) {\n+               builder.authentication()\n+                     .addMechanisms(SaslMechanismInformation.Names.GS2_KRB5, SaslMechanismInformation.Names.GSSAPI);\n+               serverPrincipal = identity.getPrincipal();\n+               break;\n+            }\n+            Server.log.debugf(\"Enabled Kerberos mechanisms for Hot Rod using principal '%s'\", identity.getPrincipal());\n+         }\n+         if (securityRealm.hasFeature(ServerSecurityRealm.Feature.TOKEN)) {\n+            builder.authentication().addMechanisms(SaslMechanismInformation.Names.OAUTHBEARER);\n+            Server.log.debug(\"Enabled OAUTHBEARER mechanism for Hot Rod\");\n+         }\n+         if (securityRealm.hasFeature(ServerSecurityRealm.Feature.TRUST)) {\n+            builder.authentication().addMechanisms(SaslMechanismInformation.Names.EXTERNAL);\n+            Server.log.debug(\"Enabled EXTERNAL mechanism for Hot Rod\");\n+         }\n+         if (securityRealm.hasFeature(ServerSecurityRealm.Feature.PASSWORD)) {\n+            builder.authentication()\n+                  .addMechanisms(\n+                        SaslMechanismInformation.Names.SCRAM_SHA_512,\n+                        SaslMechanismInformation.Names.SCRAM_SHA_384,\n+                        SaslMechanismInformation.Names.SCRAM_SHA_256,\n+                        SaslMechanismInformation.Names.SCRAM_SHA_1,\n+                        SaslMechanismInformation.Names.DIGEST_SHA_512,\n+                        SaslMechanismInformation.Names.DIGEST_SHA_384,\n+                        SaslMechanismInformation.Names.DIGEST_SHA_256,\n+                        SaslMechanismInformation.Names.DIGEST_SHA,\n+                        SaslMechanismInformation.Names.CRAM_MD5,\n+                        SaslMechanismInformation.Names.DIGEST_MD5\n+                  );\n+            Server.log.debug(\"Enabled SCRAM, DIGEST and CRAM mechanisms for Hot Rod\");\n+         }\n+         // Only enable PLAIN if encryption is on\n+         if (serverBuilder.endpoint().ssl().isEnabled()) {\n+            builder.authentication().addMechanisms(SaslMechanismInformation.Names.PLAIN);\n+            Server.log.debug(\"Enabled PLAIN mechanism for Hot Rod\");", "originalCommit": "047e33390dc2435d18de3c659e6787c6efd9578f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYwNTg5MQ==", "url": "https://github.com/infinispan/infinispan/pull/8134#discussion_r404605891", "bodyText": "If we see this log, it already means that.", "author": "tristantarrant", "createdAt": "2020-04-07T07:49:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4MTk2MA=="}], "type": "inlineReview", "revised_code": {"commit": "e1aceea74e7b8609ab864fa2ef0fa8272c497309", "chunk": "diff --git a/server/runtime/src/main/java/org/infinispan/server/configuration/hotrod/HotRodServerConfigurationParser.java b/server/runtime/src/main/java/org/infinispan/server/configuration/hotrod/HotRodServerConfigurationParser.java\nindex f411761176..ccf7b062fb 100644\n--- a/server/runtime/src/main/java/org/infinispan/server/configuration/hotrod/HotRodServerConfigurationParser.java\n+++ b/server/runtime/src/main/java/org/infinispan/server/configuration/hotrod/HotRodServerConfigurationParser.java\n\n@@ -128,50 +123,6 @@ private void parseHotRodConnector(XMLExtendedStreamReader reader, ConfigurationB\n             }\n          }\n       }\n-      if (implicitAuthentication) {\n-         ServerSecurityRealm securityRealm = serverBuilder.endpoint().securityRealm();\n-         builder.authentication().enable().securityRealm(securityRealm.getName());\n-         String serverPrincipal = null;\n-         for (KerberosSecurityFactoryConfiguration identity : securityRealm.getServerIdentities().kerberosConfigurations()) {\n-            if (identity.getPrincipal().startsWith(\"hotrod/\")) {\n-               builder.authentication()\n-                     .addMechanisms(SaslMechanismInformation.Names.GS2_KRB5, SaslMechanismInformation.Names.GSSAPI);\n-               serverPrincipal = identity.getPrincipal();\n-               break;\n-            }\n-            Server.log.debugf(\"Enabled Kerberos mechanisms for Hot Rod using principal '%s'\", identity.getPrincipal());\n-         }\n-         if (securityRealm.hasFeature(ServerSecurityRealm.Feature.TOKEN)) {\n-            builder.authentication().addMechanisms(SaslMechanismInformation.Names.OAUTHBEARER);\n-            Server.log.debug(\"Enabled OAUTHBEARER mechanism for Hot Rod\");\n-         }\n-         if (securityRealm.hasFeature(ServerSecurityRealm.Feature.TRUST)) {\n-            builder.authentication().addMechanisms(SaslMechanismInformation.Names.EXTERNAL);\n-            Server.log.debug(\"Enabled EXTERNAL mechanism for Hot Rod\");\n-         }\n-         if (securityRealm.hasFeature(ServerSecurityRealm.Feature.PASSWORD)) {\n-            builder.authentication()\n-                  .addMechanisms(\n-                        SaslMechanismInformation.Names.SCRAM_SHA_512,\n-                        SaslMechanismInformation.Names.SCRAM_SHA_384,\n-                        SaslMechanismInformation.Names.SCRAM_SHA_256,\n-                        SaslMechanismInformation.Names.SCRAM_SHA_1,\n-                        SaslMechanismInformation.Names.DIGEST_SHA_512,\n-                        SaslMechanismInformation.Names.DIGEST_SHA_384,\n-                        SaslMechanismInformation.Names.DIGEST_SHA_256,\n-                        SaslMechanismInformation.Names.DIGEST_SHA,\n-                        SaslMechanismInformation.Names.CRAM_MD5,\n-                        SaslMechanismInformation.Names.DIGEST_MD5\n-                  );\n-            Server.log.debug(\"Enabled SCRAM, DIGEST and CRAM mechanisms for Hot Rod\");\n-         }\n-         // Only enable PLAIN if encryption is on\n-         if (serverBuilder.endpoint().ssl().isEnabled()) {\n-            builder.authentication().addMechanisms(SaslMechanismInformation.Names.PLAIN);\n-            Server.log.debug(\"Enabled PLAIN mechanism for Hot Rod\");\n-         }\n-         builder.authentication().serverAuthenticationProvider(securityRealm.getSASLAuthenticationProvider(serverPrincipal));\n-      }\n    }\n \n    private void parseEncryption(XMLExtendedStreamReader reader, ServerConfigurationBuilder serverBuilder, EncryptionConfigurationBuilder encryption) throws XMLStreamException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4NDIwOA==", "url": "https://github.com/infinispan/infinispan/pull/8134#discussion_r402184208", "bodyText": "is the server name mandatory still ?", "author": "karesti", "createdAt": "2020-04-02T09:41:57Z", "path": "server/tests/src/test/java/org/infinispan/server/security/AuthenticationImplicitIT.java", "diffHunk": "@@ -30,67 +32,86 @@\n \n /**\n  * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n- * @since 10.1\n+ * @since 11.0\n  **/\n \n @RunWith(Parameterized.class)\n @Category(Security.class)\n-public class AuthenticationKerberosSpnegoIT {\n+public class AuthenticationImplicitIT {\n    @ClassRule\n    public static InfinispanServerRule SERVERS =\n-         InfinispanServerRuleBuilder.config(\"configuration/AuthenticationKerberosTest.xml\")\n-                                    .numServers(1)\n-                                    .property(\"java.security.krb5.conf\", \"${infinispan.server.config.path}/krb5.conf\")\n+         InfinispanServerRuleBuilder.config(\"configuration/AuthenticationServerImplicitTest.xml\")\n                                     .build();\n \n    @ClassRule\n-   public static LdapServerRule LDAP = new LdapServerRule(SERVERS, \"ldif/infinispan-kerberos.ldif\", true);\n+   public static LdapServerRule LDAP = new LdapServerRule(SERVERS);\n \n    @Rule\n    public InfinispanServerTestMethodRule SERVER_TEST = new InfinispanServerTestMethodRule(SERVERS);\n \n-   private final Protocol protocol;\n    private final String mechanism;\n-\n-   private static String oldKrb5Conf;\n+   private final String protocol;\n \n    @Parameterized.Parameters(name = \"{1}({0})\")\n    public static Collection<Object[]> data() {\n-      List<Object[]> params = new ArrayList<>(HTTP_KERBEROS_MECHS.size() * HTTP_PROTOCOLS.size());\n+      List<Object[]> params = new ArrayList<>();\n+      for(Object[] mech : Common.SASL_MECHS) {\n+         params.add(new Object[]{\"Hot Rod\", mech[0]});\n+      }\n       for (Protocol protocol : HTTP_PROTOCOLS) {\n-         for (Object[] mech : HTTP_KERBEROS_MECHS) {\n-            params.add(new Object[]{protocol, mech[0]});\n+         for (Object[] mech : HTTP_MECHS) {\n+            params.add(new Object[]{protocol.name(), mech[0]});\n          }\n       }\n       return params;\n    }\n \n-   public AuthenticationKerberosSpnegoIT(Protocol protocol, String mechanism) {\n+   public AuthenticationImplicitIT(String protocol, String mechanism) {\n       this.protocol = protocol;\n       this.mechanism = mechanism;\n    }\n \n-   @BeforeClass\n-   public static void setKrb5Conf() {\n-      oldKrb5Conf = System.setProperty(\"java.security.krb5.conf\", AuthenticationKerberosSpnegoIT.class.getClassLoader().getResource(\"configuration/krb5.conf\").getPath());\n+   @Test\n+   public void testProtocol() {\n+      if (\"Hot Rod\".equals(protocol)) {\n+         testHotRod();\n+      } else {\n+         testRest(Protocol.valueOf(protocol));\n+      }\n    }\n \n-   @AfterClass\n-   public static void restoreKrb5Conf() {\n-      if (oldKrb5Conf != null) {\n-         System.setProperty(\"java.security.krb5.conf\", oldKrb5Conf);\n+   public void testHotRod() {\n+      ConfigurationBuilder builder = new ConfigurationBuilder();\n+      if (!mechanism.isEmpty()) {\n+         builder.security().authentication()\n+               .saslMechanism(mechanism)\n+               .serverName(\"infinispan\")", "originalCommit": "047e33390dc2435d18de3c659e6787c6efd9578f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYwNjk3MQ==", "url": "https://github.com/infinispan/infinispan/pull/8134#discussion_r404606971", "bodyText": "Actually, it already defaults to infinispan", "author": "tristantarrant", "createdAt": "2020-04-07T07:51:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4NDIwOA=="}], "type": "inlineReview", "revised_code": {"commit": "e1aceea74e7b8609ab864fa2ef0fa8272c497309", "chunk": "diff --git a/server/tests/src/test/java/org/infinispan/server/security/AuthenticationImplicitIT.java b/server/tests/src/test/java/org/infinispan/server/security/AuthenticationImplicitIT.java\nindex fdc7960066..1f577903fe 100644\n--- a/server/tests/src/test/java/org/infinispan/server/security/AuthenticationImplicitIT.java\n+++ b/server/tests/src/test/java/org/infinispan/server/security/AuthenticationImplicitIT.java\n\n@@ -85,7 +85,6 @@ public void testHotRod() {\n       if (!mechanism.isEmpty()) {\n          builder.security().authentication()\n                .saslMechanism(mechanism)\n-               .serverName(\"infinispan\")\n                .realm(\"default\")\n                .username(\"all_user\")\n                .password(\"all\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4ODY1Mg==", "url": "https://github.com/infinispan/infinispan/pull/8134#discussion_r402188652", "bodyText": "The JSON parser works by inspecting ATTRIBUTES and ELEMENT, I'm afraid all this logic will only happen for XML. Can all this be moved to the builders themselves?", "author": "gustavonalle", "createdAt": "2020-04-02T09:49:20Z", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/hotrod/HotRodServerConfigurationParser.java", "diffHunk": "@@ -123,6 +128,50 @@ private void parseHotRodConnector(XMLExtendedStreamReader reader, ConfigurationB\n             }\n          }\n       }\n+      if (implicitAuthentication) {\n+         ServerSecurityRealm securityRealm = serverBuilder.endpoint().securityRealm();\n+         builder.authentication().enable().securityRealm(securityRealm.getName());\n+         String serverPrincipal = null;\n+         for (KerberosSecurityFactoryConfiguration identity : securityRealm.getServerIdentities().kerberosConfigurations()) {\n+            if (identity.getPrincipal().startsWith(\"hotrod/\")) {\n+               builder.authentication()\n+                     .addMechanisms(SaslMechanismInformation.Names.GS2_KRB5, SaslMechanismInformation.Names.GSSAPI);\n+               serverPrincipal = identity.getPrincipal();\n+               break;\n+            }\n+            Server.log.debugf(\"Enabled Kerberos mechanisms for Hot Rod using principal '%s'\", identity.getPrincipal());\n+         }\n+         if (securityRealm.hasFeature(ServerSecurityRealm.Feature.TOKEN)) {\n+            builder.authentication().addMechanisms(SaslMechanismInformation.Names.OAUTHBEARER);\n+            Server.log.debug(\"Enabled OAUTHBEARER mechanism for Hot Rod\");\n+         }\n+         if (securityRealm.hasFeature(ServerSecurityRealm.Feature.TRUST)) {", "originalCommit": "047e33390dc2435d18de3c659e6787c6efd9578f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE5MjE5Mg==", "url": "https://github.com/infinispan/infinispan/pull/8134#discussion_r402192192", "bodyText": "EDIT: We actually don't parse JSON server files because nobody needs it currently, we are mostly rendering the server config via REST. In any case, it'd be nice that the builder themselves take care of enriching the config based on certain situations", "author": "gustavonalle", "createdAt": "2020-04-02T09:55:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4ODY1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY1NjQ4Nw==", "url": "https://github.com/infinispan/infinispan/pull/8134#discussion_r404656487", "bodyText": "@gustavonalle I've reworked it so that this is now done in the builders. Much cleaner", "author": "tristantarrant", "createdAt": "2020-04-07T09:10:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE4ODY1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "e1aceea74e7b8609ab864fa2ef0fa8272c497309", "chunk": "diff --git a/server/runtime/src/main/java/org/infinispan/server/configuration/hotrod/HotRodServerConfigurationParser.java b/server/runtime/src/main/java/org/infinispan/server/configuration/hotrod/HotRodServerConfigurationParser.java\nindex f411761176..ccf7b062fb 100644\n--- a/server/runtime/src/main/java/org/infinispan/server/configuration/hotrod/HotRodServerConfigurationParser.java\n+++ b/server/runtime/src/main/java/org/infinispan/server/configuration/hotrod/HotRodServerConfigurationParser.java\n\n@@ -128,50 +123,6 @@ private void parseHotRodConnector(XMLExtendedStreamReader reader, ConfigurationB\n             }\n          }\n       }\n-      if (implicitAuthentication) {\n-         ServerSecurityRealm securityRealm = serverBuilder.endpoint().securityRealm();\n-         builder.authentication().enable().securityRealm(securityRealm.getName());\n-         String serverPrincipal = null;\n-         for (KerberosSecurityFactoryConfiguration identity : securityRealm.getServerIdentities().kerberosConfigurations()) {\n-            if (identity.getPrincipal().startsWith(\"hotrod/\")) {\n-               builder.authentication()\n-                     .addMechanisms(SaslMechanismInformation.Names.GS2_KRB5, SaslMechanismInformation.Names.GSSAPI);\n-               serverPrincipal = identity.getPrincipal();\n-               break;\n-            }\n-            Server.log.debugf(\"Enabled Kerberos mechanisms for Hot Rod using principal '%s'\", identity.getPrincipal());\n-         }\n-         if (securityRealm.hasFeature(ServerSecurityRealm.Feature.TOKEN)) {\n-            builder.authentication().addMechanisms(SaslMechanismInformation.Names.OAUTHBEARER);\n-            Server.log.debug(\"Enabled OAUTHBEARER mechanism for Hot Rod\");\n-         }\n-         if (securityRealm.hasFeature(ServerSecurityRealm.Feature.TRUST)) {\n-            builder.authentication().addMechanisms(SaslMechanismInformation.Names.EXTERNAL);\n-            Server.log.debug(\"Enabled EXTERNAL mechanism for Hot Rod\");\n-         }\n-         if (securityRealm.hasFeature(ServerSecurityRealm.Feature.PASSWORD)) {\n-            builder.authentication()\n-                  .addMechanisms(\n-                        SaslMechanismInformation.Names.SCRAM_SHA_512,\n-                        SaslMechanismInformation.Names.SCRAM_SHA_384,\n-                        SaslMechanismInformation.Names.SCRAM_SHA_256,\n-                        SaslMechanismInformation.Names.SCRAM_SHA_1,\n-                        SaslMechanismInformation.Names.DIGEST_SHA_512,\n-                        SaslMechanismInformation.Names.DIGEST_SHA_384,\n-                        SaslMechanismInformation.Names.DIGEST_SHA_256,\n-                        SaslMechanismInformation.Names.DIGEST_SHA,\n-                        SaslMechanismInformation.Names.CRAM_MD5,\n-                        SaslMechanismInformation.Names.DIGEST_MD5\n-                  );\n-            Server.log.debug(\"Enabled SCRAM, DIGEST and CRAM mechanisms for Hot Rod\");\n-         }\n-         // Only enable PLAIN if encryption is on\n-         if (serverBuilder.endpoint().ssl().isEnabled()) {\n-            builder.authentication().addMechanisms(SaslMechanismInformation.Names.PLAIN);\n-            Server.log.debug(\"Enabled PLAIN mechanism for Hot Rod\");\n-         }\n-         builder.authentication().serverAuthenticationProvider(securityRealm.getSASLAuthenticationProvider(serverPrincipal));\n-      }\n    }\n \n    private void parseEncryption(XMLExtendedStreamReader reader, ServerConfigurationBuilder serverBuilder, EncryptionConfigurationBuilder encryption) throws XMLStreamException {\n"}}, {"oid": "e1aceea74e7b8609ab864fa2ef0fa8272c497309", "url": "https://github.com/infinispan/infinispan/commit/e1aceea74e7b8609ab864fa2ef0fa8272c497309", "message": "ISPN-11574 Documentation", "committedDate": "2020-04-07T09:09:47Z", "type": "forcePushed"}, {"oid": "7a1a0a9f37f5370c1b2704bbcc90ba2ddbb2721d", "url": "https://github.com/infinispan/infinispan/commit/7a1a0a9f37f5370c1b2704bbcc90ba2ddbb2721d", "message": "ISPN-11574 Documentation", "committedDate": "2020-04-10T12:18:26Z", "type": "forcePushed"}, {"oid": "5d26aeadb21f6b68b8864f2a2ef46f3862cb46d0", "url": "https://github.com/infinispan/infinispan/commit/5d26aeadb21f6b68b8864f2a2ef46f3862cb46d0", "message": "ISPN-11574 Documentation", "committedDate": "2020-04-14T13:37:32Z", "type": "forcePushed"}, {"oid": "d63c704fd99e0dc7171bfa86bd712689e49c8d85", "url": "https://github.com/infinispan/infinispan/commit/d63c704fd99e0dc7171bfa86bd712689e49c8d85", "message": "ISPN-11574 Documentation", "committedDate": "2020-04-14T15:52:44Z", "type": "forcePushed"}, {"oid": "35cc7fa58a29e54e94b80b221c303b7908cb4a6b", "url": "https://github.com/infinispan/infinispan/commit/35cc7fa58a29e54e94b80b221c303b7908cb4a6b", "message": "ISPN-11574 Documentation", "committedDate": "2020-04-15T07:20:23Z", "type": "forcePushed"}, {"oid": "15ecee6ac107afb18825d7e01d849c66020d16e1", "url": "https://github.com/infinispan/infinispan/commit/15ecee6ac107afb18825d7e01d849c66020d16e1", "message": "ISPN-11574 Documentation", "committedDate": "2020-04-15T10:05:47Z", "type": "forcePushed"}, {"oid": "5bc3d81b95964688dbd0620fb528fa453559a517", "url": "https://github.com/infinispan/infinispan/commit/5bc3d81b95964688dbd0620fb528fa453559a517", "message": "ISPN-11574 Automatic server authentication configuration", "committedDate": "2020-04-17T09:52:49Z", "type": "commit"}, {"oid": "f66c8b7d4e1492f76786cf648d97ba2997ce5914", "url": "https://github.com/infinispan/infinispan/commit/f66c8b7d4e1492f76786cf648d97ba2997ce5914", "message": "ISPN-11574 Refactor authorization tests\n\n* Extract common authorization test logic\n* Test authz with Properties, LDAP and Kerberos", "committedDate": "2020-04-17T09:52:49Z", "type": "commit"}, {"oid": "fff05ffc7adc2ca30e1a8559bfd01318e8967e56", "url": "https://github.com/infinispan/infinispan/commit/fff05ffc7adc2ca30e1a8559bfd01318e8967e56", "message": "ISPN-11574 Documentation", "committedDate": "2020-04-17T09:52:49Z", "type": "commit"}, {"oid": "fff05ffc7adc2ca30e1a8559bfd01318e8967e56", "url": "https://github.com/infinispan/infinispan/commit/fff05ffc7adc2ca30e1a8559bfd01318e8967e56", "message": "ISPN-11574 Documentation", "committedDate": "2020-04-17T09:52:49Z", "type": "forcePushed"}]}