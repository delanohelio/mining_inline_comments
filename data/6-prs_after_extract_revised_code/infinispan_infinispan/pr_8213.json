{"pr_number": 8213, "pr_title": "ISPN-11675 ComponentAnnotationProcessor exception hides compilation error", "pr_createdAt": "2020-04-17T15:44:21Z", "pr_url": "https://github.com/infinispan/infinispan/pull/8213", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgyNjY1OA==", "url": "https://github.com/infinispan/infinispan/pull/8213#discussion_r410826658", "bodyText": "ava.lang ? :)", "author": "anistor", "createdAt": "2020-04-19T06:04:56Z", "path": "component-processor/src/main/java/org/infinispan/component/processor/ComponentAnnotationProcessor.java", "diffHunk": "@@ -198,6 +200,18 @@ private void parseGeneratedSources(ModelBuilder modelBuilder) throws IOException\n       modelBuilder.setModuleClass(moduleClassElement, moduleAnnotation, classPrefix);\n    }\n \n+   private <A extends Annotation> A getAnnotation(AnnotatedConstruct moduleClassElement, Class<A> annotationType) {\n+      try {\n+         return moduleClassElement.getAnnotation(annotationType);\n+      } catch (ClassCastException e) {\n+         // The annotation has unresolved values\n+         // ava.lang.ClassCastException: class com.sun.tools.javac.code.Attribute$UnresolvedClass", "originalCommit": "a6c75c18f6500daea1918e784892236ce7232102", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bdeb319984433c16bc029068421224a16c3672b0", "chunk": "diff --git a/component-processor/src/main/java/org/infinispan/component/processor/ComponentAnnotationProcessor.java b/component-processor/src/main/java/org/infinispan/component/processor/ComponentAnnotationProcessor.java\nindex 9f7f854376..ec6a7d1139 100644\n--- a/component-processor/src/main/java/org/infinispan/component/processor/ComponentAnnotationProcessor.java\n+++ b/component-processor/src/main/java/org/infinispan/component/processor/ComponentAnnotationProcessor.java\n\n@@ -205,7 +205,7 @@ private void parseGeneratedSources(ModelBuilder modelBuilder) throws IOException\n          return moduleClassElement.getAnnotation(annotationType);\n       } catch (ClassCastException e) {\n          // The annotation has unresolved values\n-         // ava.lang.ClassCastException: class com.sun.tools.javac.code.Attribute$UnresolvedClass\n+         // java.lang.ClassCastException: class com.sun.tools.javac.code.Attribute$UnresolvedClass\n          // cannot be cast to class com.sun.tools.javac.code.Attribute$Class\n          // The code doesn't compile anyway, so we can ignore the annotation.\n          return null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgyNjkyMA==", "url": "https://github.com/infinispan/infinispan/pull/8213#discussion_r410826920", "bodyText": "I wonder if making this an error rather than an info would improve the experience. I do realize that once this happens here the build will certainly fail later for other module-related reasons, but maybe it would be good to ensure these errors are not silent.", "author": "anistor", "createdAt": "2020-04-19T06:06:44Z", "path": "component-processor/src/main/java/org/infinispan/component/processor/ComponentAnnotationProcessor.java", "diffHunk": "@@ -168,12 +169,13 @@ private void parseGeneratedSources(ModelBuilder modelBuilder) throws IOException\n       }\n \n       TypeElement moduleClassElement = elements().getTypeElement(moduleClassAndPackages.getKey());\n-      if (moduleClassElement == null || moduleClassElement.getAnnotation(InfinispanModule.class) == null) {\n+      InfinispanModule moduleAnnotation = moduleClassElement != null ?\n+                                          getAnnotation(moduleClassElement, InfinispanModule.class) : null;\n+      if (moduleAnnotation == null) {\n          info(null, \"Ignoring invalid module implementation %s\", moduleImplementationName);", "originalCommit": "a6c75c18f6500daea1918e784892236ce7232102", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgwMjEwNQ==", "url": "https://github.com/infinispan/infinispan/pull/8213#discussion_r412802105", "bodyText": "@anistor this is the old generated module file, and if the annotation processor can't read it, there is nothing the user can do to change that, so logging an error doesn't really improve the user experience.\nA module implementation class can become invalid when switching branches or when working on the annotation processor itself, and in both scenarios logging an error and stopping the build so that the user adds \"clean\" to the command line would be just annoying.", "author": "danberindei", "createdAt": "2020-04-22T08:58:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgyNjkyMA=="}], "type": "inlineReview", "revised_code": {"commit": "bdeb319984433c16bc029068421224a16c3672b0", "chunk": "diff --git a/component-processor/src/main/java/org/infinispan/component/processor/ComponentAnnotationProcessor.java b/component-processor/src/main/java/org/infinispan/component/processor/ComponentAnnotationProcessor.java\nindex 9f7f854376..ec6a7d1139 100644\n--- a/component-processor/src/main/java/org/infinispan/component/processor/ComponentAnnotationProcessor.java\n+++ b/component-processor/src/main/java/org/infinispan/component/processor/ComponentAnnotationProcessor.java\n\n@@ -172,7 +172,7 @@ private void parseGeneratedSources(ModelBuilder modelBuilder) throws IOException\n       InfinispanModule moduleAnnotation = moduleClassElement != null ?\n                                           getAnnotation(moduleClassElement, InfinispanModule.class) : null;\n       if (moduleAnnotation == null) {\n-         info(null, \"Ignoring invalid module implementation %s\", moduleImplementationName);\n+         error(null, \"Ignoring invalid module implementation %s\", moduleImplementationName);\n          return;\n       }\n \n"}}, {"oid": "bdeb319984433c16bc029068421224a16c3672b0", "url": "https://github.com/infinispan/infinispan/commit/bdeb319984433c16bc029068421224a16c3672b0", "message": "ISPN-11675 ComponentAnnotationProcessor exception hides compilation error", "committedDate": "2020-04-22T08:59:36Z", "type": "commit"}, {"oid": "bdeb319984433c16bc029068421224a16c3672b0", "url": "https://github.com/infinispan/infinispan/commit/bdeb319984433c16bc029068421224a16c3672b0", "message": "ISPN-11675 ComponentAnnotationProcessor exception hides compilation error", "committedDate": "2020-04-22T08:59:36Z", "type": "forcePushed"}]}