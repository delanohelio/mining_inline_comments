{"pr_number": 8438, "pr_title": "ISPN-11975 Non blocking HR client publisher", "pr_createdAt": "2020-06-05T17:52:32Z", "pr_url": "https://github.com/infinispan/infinispan/pull/8438", "timeline": [{"oid": "5db7a94f537d7158d857c06771d0d5412ad13db8", "url": "https://github.com/infinispan/infinispan/commit/5db7a94f537d7158d857c06771d0d5412ad13db8", "message": "ISPN-11975 RemoteCacheImpl entry retrieval should be non blocking", "committedDate": "2020-06-05T18:05:49Z", "type": "forcePushed"}, {"oid": "fbd48f2f77597c9b87a815506e255792abf543c3", "url": "https://github.com/infinispan/infinispan/commit/fbd48f2f77597c9b87a815506e255792abf543c3", "message": "ISPN-11975 RemoteCacheImpl entry retrieval should be non blocking", "committedDate": "2020-06-05T18:17:56Z", "type": "forcePushed"}, {"oid": "b2089df05207aa70e3026a3e0e106a99d2312aaf", "url": "https://github.com/infinispan/infinispan/commit/b2089df05207aa70e3026a3e0e106a99d2312aaf", "message": "ISPN-11975 RemoteCacheImpl entry retrieval should be non blocking", "committedDate": "2020-06-05T22:26:01Z", "type": "forcePushed"}, {"oid": "7298027ade68a9249f09da7009fc57cb260a2226", "url": "https://github.com/infinispan/infinispan/commit/7298027ade68a9249f09da7009fc57cb260a2226", "message": "ISPN-11975 RemoteCacheImpl entry retrieval should be non blocking", "committedDate": "2020-06-08T18:21:08Z", "type": "forcePushed"}, {"oid": "8534dedddb639edd13066b2969fb42388fb5d416", "url": "https://github.com/infinispan/infinispan/commit/8534dedddb639edd13066b2969fb42388fb5d416", "message": "ISPN-11975 RemoteCacheImpl entry retrieval should be non blocking", "committedDate": "2020-06-09T15:09:30Z", "type": "forcePushed"}, {"oid": "371d44e518f606d6d4bdb90b1a8ac1031c506f23", "url": "https://github.com/infinispan/infinispan/commit/371d44e518f606d6d4bdb90b1a8ac1031c506f23", "message": "ISPN-11975 RemoteCacheImpl entry retrieval should be non blocking", "committedDate": "2020-06-09T19:38:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE5NzQ5MQ==", "url": "https://github.com/infinispan/infinispan/pull/8438#discussion_r438197491", "bodyText": "Why are all these Object, Object instead of parameterized as K, V ?", "author": "tristantarrant", "createdAt": "2020-06-10T15:08:12Z", "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/RemoteCache.java", "diffHunk": "@@ -238,11 +253,36 @@\n     */\n    CloseableIterator<Entry<Object, Object>> retrieveEntriesByQuery(Query filterQuery, Set<Integer> segments, int batchSize);\n \n+   /**\n+    * Publish entries from the server matching a query.\n+    * <p>\n+    * Any subscriber that subscribes to the returned Publisher must not block. It is therefore recommended to offload\n+    * any blocking or long running operations to a different thread and not use the invoking one. Failure to do so\n+    * may cause concurrent operations to stall.\n+    * @param filterQuery {@link Query}\n+    * @param segments    The segments to utilize. If null all segments will be utilized. An empty set will filter out all entries.\n+    * @param batchSize   The number of entries transferred from the server at a time.\n+    * @return Publisher containing matching entries\n+    */\n+   Publisher<Entry<Object, Object>> publishEntriesByQuery(Query filterQuery, Set<Integer> segments, int batchSize);", "originalCommit": "371d44e518f606d6d4bdb90b1a8ac1031c506f23", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIwMzcwMg==", "url": "https://github.com/infinispan/infinispan/pull/8438#discussion_r438203702", "bodyText": "I guess this comes from a long a time ago in the original methods: they all take either a Query or a filterConverterFactory, so it's technically not always a K,V", "author": "gustavonalle", "createdAt": "2020-06-10T15:16:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE5NzQ5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIwNDgyMA==", "url": "https://github.com/infinispan/infinispan/pull/8438#discussion_r438204820", "bodyText": "Unfortunately the query and converter/filter can change the returned types. We might be able to change the first to K. Unfortunately the previous methods were like this so I am not 100% sure.", "author": "wburns", "createdAt": "2020-06-10T15:18:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE5NzQ5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIyNTA5MA==", "url": "https://github.com/infinispan/infinispan/pull/8438#discussion_r438225090", "bodyText": "Then I think these should be declared as:\n<K1, V1> Publisher<Entry<K1, V1>> publishEntriesByQuery...", "author": "tristantarrant", "createdAt": "2020-06-10T15:44:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE5NzQ5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIyNzE2NQ==", "url": "https://github.com/infinispan/infinispan/pull/8438#discussion_r438227165", "bodyText": "Then I think these should be declared as:\n<K1, V1> Publisher<Entry<K1, V1>> publishEntriesByQuery...\n\nSure, I think I can do it as <E> Publisher<Entry<K, E>> publishEntriesByQuery. However the query one may be just Publisher<Entry<K, V>> as I am not sure if it can do translations or not.", "author": "wburns", "createdAt": "2020-06-10T15:47:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE5NzQ5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIzNjY0MQ==", "url": "https://github.com/infinispan/infinispan/pull/8438#discussion_r438236641", "bodyText": "The query one can return either V or Object[]", "author": "gustavonalle", "createdAt": "2020-06-10T16:01:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE5NzQ5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIzNzgxMQ==", "url": "https://github.com/infinispan/infinispan/pull/8438#discussion_r438237811", "bodyText": "Yeah, I peaked at the code as well, thanks for the confirmation.\nI made it <E> Publisher<Entry<K, E> publishEntriesByQuery.", "author": "wburns", "createdAt": "2020-06-10T16:02:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE5NzQ5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "42024f31f2aa634ccd2bbdf97b53dcd4b58f41c9", "chunk": "diff --git a/client/hotrod-client/src/main/java/org/infinispan/client/hotrod/RemoteCache.java b/client/hotrod-client/src/main/java/org/infinispan/client/hotrod/RemoteCache.java\nindex 98c7d3f653..321b27faae 100644\n--- a/client/hotrod-client/src/main/java/org/infinispan/client/hotrod/RemoteCache.java\n+++ b/client/hotrod-client/src/main/java/org/infinispan/client/hotrod/RemoteCache.java\n\n@@ -253,36 +238,11 @@\n     */\n    CloseableIterator<Entry<Object, Object>> retrieveEntriesByQuery(Query filterQuery, Set<Integer> segments, int batchSize);\n \n-   /**\n-    * Publish entries from the server matching a query.\n-    * <p>\n-    * Any subscriber that subscribes to the returned Publisher must not block. It is therefore recommended to offload\n-    * any blocking or long running operations to a different thread and not use the invoking one. Failure to do so\n-    * may cause concurrent operations to stall.\n-    * @param filterQuery {@link Query}\n-    * @param segments    The segments to utilize. If null all segments will be utilized. An empty set will filter out all entries.\n-    * @param batchSize   The number of entries transferred from the server at a time.\n-    * @return Publisher containing matching entries\n-    */\n-   Publisher<Entry<Object, Object>> publishEntriesByQuery(Query filterQuery, Set<Integer> segments, int batchSize);\n-\n    /**\n     * Retrieve entries with metadata information\n     */\n    CloseableIterator<Entry<Object, MetadataValue<Object>>> retrieveEntriesWithMetadata(Set<Integer> segments, int batchSize);\n \n-   /**\n-    * Publish entries with metadata information\n-    * <p>\n-    * Any subscriber that subscribes to the returned Publisher must not block. It is therefore recommended to offload\n-    * any blocking or long running operations to a different thread and not use the invoking one. Failure to do so\n-    * may cause concurrent operations to stall.\n-    * @param segments    The segments to utilize. If null all segments will be utilized. An empty set will filter out all entries.\n-    * @param batchSize   The number of entries transferred from the server at a time.\n-    * @return Publisher containing entries along with metadata\n-    */\n-   Publisher<Entry<Object, MetadataValue<Object>>> publishEntriesWithMetadata(Set<Integer> segments, int batchSize);\n-\n    /**\n     * Returns the {@link MetadataValue} associated to the supplied key param, or null if it doesn't exist.\n     */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE5OTY4Nw==", "url": "https://github.com/infinispan/infinispan/pull/8438#discussion_r438199687", "bodyText": "warnings must have a log id", "author": "tristantarrant", "createdAt": "2020-06-10T15:11:20Z", "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/iteration/RemoteInnerPublisherHandler.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package org.infinispan.client.hotrod.impl.iteration;\n+\n+import java.lang.invoke.MethodHandles;\n+import java.net.SocketAddress;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Supplier;\n+\n+import org.infinispan.client.hotrod.exceptions.RemoteIllegalLifecycleStateException;\n+import org.infinispan.client.hotrod.exceptions.TransportException;\n+import org.infinispan.client.hotrod.impl.operations.IterationNextResponse;\n+import org.infinispan.client.hotrod.impl.operations.IterationStartResponse;\n+import org.infinispan.client.hotrod.logging.Log;\n+import org.infinispan.client.hotrod.logging.LogFactory;\n+import org.infinispan.commons.reactive.AbstractAsyncPublisherHandler;\n+import org.infinispan.commons.util.IntSet;\n+import org.infinispan.commons.util.logging.TraceException;\n+\n+import io.netty.channel.Channel;\n+\n+class RemoteInnerPublisherHandler<E> extends AbstractAsyncPublisherHandler<Map.Entry<SocketAddress, IntSet>,\n+      Map.Entry<Object, E>, IterationStartResponse, IterationNextResponse<E>> {\n+   private static final Log log = LogFactory.getLog(MethodHandles.lookup().lookupClass());\n+\n+   protected final RemotePublisher<E> publisher;\n+\n+   // Need to be volatile since cancel can come on a different thread\n+   protected volatile Channel channel;\n+   private volatile byte[] iterationId;\n+   private AtomicBoolean cancelled = new AtomicBoolean();\n+\n+   protected RemoteInnerPublisherHandler(RemotePublisher<E> parent, int batchSize,\n+         Supplier<Map.Entry<SocketAddress, IntSet>> supplier, Map.Entry<SocketAddress, IntSet> firstTarget) {\n+      super(batchSize, supplier, firstTarget);\n+      this.publisher = parent;\n+   }\n+\n+   private String iterationId() {\n+      return publisher.iterationId(iterationId);\n+   }\n+\n+   @Override\n+   protected void sendCancel(Map.Entry<SocketAddress, IntSet> target) {\n+      if (!cancelled.getAndSet(true)) {\n+         actualCancel();\n+      }\n+   }\n+\n+   private void actualCancel() {\n+      if (iterationId != null && channel != null) {\n+         // Just let cancel complete asynchronously\n+         publisher.sendCancel(iterationId, channel);\n+      }\n+   }\n+\n+   @Override\n+   protected CompletionStage<IterationStartResponse> sendInitialCommand(\n+         Map.Entry<SocketAddress, IntSet> target, int batchSize) {\n+      SocketAddress address = target.getKey();\n+      IntSet segments = target.getValue();\n+      if (log.isDebugEnabled()) {\n+         log.debugf(\"Starting iteration with segments %s\", segments);\n+      }\n+      return publisher.newIteratorStartOperation(address, segments, batchSize);\n+   }\n+\n+   @Override\n+   protected CompletionStage<IterationNextResponse<E>> sendNextCommand(Map.Entry<SocketAddress, IntSet> target, int batchSize) {\n+      return publisher.newIteratorNextOperation(iterationId, channel);\n+   }\n+\n+   @Override\n+   protected long handleInitialResponse(IterationStartResponse startResponse, Map.Entry<SocketAddress, IntSet> target) {\n+      this.channel = startResponse.getChannel();\n+      this.iterationId = startResponse.getIterationId();\n+      if (log.isDebugEnabled()) {\n+         log.iterationTransportObtained(channel.remoteAddress(), iterationId());\n+         log.startedIteration(iterationId());\n+      }\n+\n+      if (cancelled.get()) {\n+         actualCancel();\n+      }\n+      return 0;\n+   }\n+\n+   @Override\n+   protected long handleNextResponse(IterationNextResponse<E> nextResponse, Map.Entry<SocketAddress, IntSet> target) {\n+      if (!nextResponse.hasMore()) {\n+         // server doesn't clean up when complete\n+         sendCancel(target);\n+         publisher.completeSegments(target.getValue());\n+         targetComplete();\n+      }\n+      IntSet completedSegments = nextResponse.getCompletedSegments();\n+      if (completedSegments != null && log.isTraceEnabled()) {\n+         IntSet targetSegments = target.getValue();\n+         if (targetSegments != null) {\n+            targetSegments.removeAll(completedSegments);\n+         }\n+      }\n+      publisher.completeSegments(completedSegments);\n+      List<Map.Entry<Object, E>> entries = nextResponse.getEntries();\n+      for (Map.Entry<Object, E> entry : entries) {\n+         if (!onNext(entry)) {\n+            break;\n+         }\n+      }\n+      return entries.size();\n+   }\n+\n+   @Override\n+   protected void handleThrowableInResponse(Throwable t, Map.Entry<SocketAddress, IntSet> target) {\n+      if (t instanceof TransportException || t instanceof RemoteIllegalLifecycleStateException) {\n+         log.warnf(t, \"Error reaching the server during iteration\");", "originalCommit": "371d44e518f606d6d4bdb90b1a8ac1031c506f23", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIwNTAxNg==", "url": "https://github.com/infinispan/infinispan/pull/8438#discussion_r438205016", "bodyText": "Sorry, this was taken from the previous code, let me change it over.", "author": "wburns", "createdAt": "2020-06-10T15:18:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODE5OTY4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "42024f31f2aa634ccd2bbdf97b53dcd4b58f41c9", "chunk": "diff --git a/client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/iteration/RemoteInnerPublisherHandler.java b/client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/iteration/RemoteInnerPublisherHandler.java\ndeleted file mode 100644\nindex f7bc8ac8dc..0000000000\n--- a/client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/iteration/RemoteInnerPublisherHandler.java\n+++ /dev/null\n\n@@ -1,135 +0,0 @@\n-package org.infinispan.client.hotrod.impl.iteration;\n-\n-import java.lang.invoke.MethodHandles;\n-import java.net.SocketAddress;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.concurrent.CompletionStage;\n-import java.util.concurrent.atomic.AtomicBoolean;\n-import java.util.function.Supplier;\n-\n-import org.infinispan.client.hotrod.exceptions.RemoteIllegalLifecycleStateException;\n-import org.infinispan.client.hotrod.exceptions.TransportException;\n-import org.infinispan.client.hotrod.impl.operations.IterationNextResponse;\n-import org.infinispan.client.hotrod.impl.operations.IterationStartResponse;\n-import org.infinispan.client.hotrod.logging.Log;\n-import org.infinispan.client.hotrod.logging.LogFactory;\n-import org.infinispan.commons.reactive.AbstractAsyncPublisherHandler;\n-import org.infinispan.commons.util.IntSet;\n-import org.infinispan.commons.util.logging.TraceException;\n-\n-import io.netty.channel.Channel;\n-\n-class RemoteInnerPublisherHandler<E> extends AbstractAsyncPublisherHandler<Map.Entry<SocketAddress, IntSet>,\n-      Map.Entry<Object, E>, IterationStartResponse, IterationNextResponse<E>> {\n-   private static final Log log = LogFactory.getLog(MethodHandles.lookup().lookupClass());\n-\n-   protected final RemotePublisher<E> publisher;\n-\n-   // Need to be volatile since cancel can come on a different thread\n-   protected volatile Channel channel;\n-   private volatile byte[] iterationId;\n-   private AtomicBoolean cancelled = new AtomicBoolean();\n-\n-   protected RemoteInnerPublisherHandler(RemotePublisher<E> parent, int batchSize,\n-         Supplier<Map.Entry<SocketAddress, IntSet>> supplier, Map.Entry<SocketAddress, IntSet> firstTarget) {\n-      super(batchSize, supplier, firstTarget);\n-      this.publisher = parent;\n-   }\n-\n-   private String iterationId() {\n-      return publisher.iterationId(iterationId);\n-   }\n-\n-   @Override\n-   protected void sendCancel(Map.Entry<SocketAddress, IntSet> target) {\n-      if (!cancelled.getAndSet(true)) {\n-         actualCancel();\n-      }\n-   }\n-\n-   private void actualCancel() {\n-      if (iterationId != null && channel != null) {\n-         // Just let cancel complete asynchronously\n-         publisher.sendCancel(iterationId, channel);\n-      }\n-   }\n-\n-   @Override\n-   protected CompletionStage<IterationStartResponse> sendInitialCommand(\n-         Map.Entry<SocketAddress, IntSet> target, int batchSize) {\n-      SocketAddress address = target.getKey();\n-      IntSet segments = target.getValue();\n-      if (log.isDebugEnabled()) {\n-         log.debugf(\"Starting iteration with segments %s\", segments);\n-      }\n-      return publisher.newIteratorStartOperation(address, segments, batchSize);\n-   }\n-\n-   @Override\n-   protected CompletionStage<IterationNextResponse<E>> sendNextCommand(Map.Entry<SocketAddress, IntSet> target, int batchSize) {\n-      return publisher.newIteratorNextOperation(iterationId, channel);\n-   }\n-\n-   @Override\n-   protected long handleInitialResponse(IterationStartResponse startResponse, Map.Entry<SocketAddress, IntSet> target) {\n-      this.channel = startResponse.getChannel();\n-      this.iterationId = startResponse.getIterationId();\n-      if (log.isDebugEnabled()) {\n-         log.iterationTransportObtained(channel.remoteAddress(), iterationId());\n-         log.startedIteration(iterationId());\n-      }\n-\n-      if (cancelled.get()) {\n-         actualCancel();\n-      }\n-      return 0;\n-   }\n-\n-   @Override\n-   protected long handleNextResponse(IterationNextResponse<E> nextResponse, Map.Entry<SocketAddress, IntSet> target) {\n-      if (!nextResponse.hasMore()) {\n-         // server doesn't clean up when complete\n-         sendCancel(target);\n-         publisher.completeSegments(target.getValue());\n-         targetComplete();\n-      }\n-      IntSet completedSegments = nextResponse.getCompletedSegments();\n-      if (completedSegments != null && log.isTraceEnabled()) {\n-         IntSet targetSegments = target.getValue();\n-         if (targetSegments != null) {\n-            targetSegments.removeAll(completedSegments);\n-         }\n-      }\n-      publisher.completeSegments(completedSegments);\n-      List<Map.Entry<Object, E>> entries = nextResponse.getEntries();\n-      for (Map.Entry<Object, E> entry : entries) {\n-         if (!onNext(entry)) {\n-            break;\n-         }\n-      }\n-      return entries.size();\n-   }\n-\n-   @Override\n-   protected void handleThrowableInResponse(Throwable t, Map.Entry<SocketAddress, IntSet> target) {\n-      if (t instanceof TransportException || t instanceof RemoteIllegalLifecycleStateException) {\n-         log.warnf(t, \"Error reaching the server during iteration\");\n-         if (log.isTraceEnabled()) {\n-            IntSet targetSegments = target.getValue();\n-            if (targetSegments != null) {\n-               log.tracef(\"There are still outstanding segments %s that will need to be retried\", target);\n-            }\n-         }\n-         publisher.erroredServer(target.getKey());\n-         // Try next target if possible\n-         targetComplete();\n-\n-         accept(0);\n-      } else {\n-         t.addSuppressed(new TraceException());\n-         super.handleThrowableInResponse(t, target);\n-      }\n-\n-   }\n-}\n"}}, {"oid": "42024f31f2aa634ccd2bbdf97b53dcd4b58f41c9", "url": "https://github.com/infinispan/infinispan/commit/42024f31f2aa634ccd2bbdf97b53dcd4b58f41c9", "message": "ISPN-11975 RemoteCacheImpl entry retrieval should be non blocking\n\n* Moving TraceException to commons", "committedDate": "2020-06-10T16:39:25Z", "type": "commit"}, {"oid": "e7434ae29a9353161a483c1464440ce3dc5cce96", "url": "https://github.com/infinispan/infinispan/commit/e7434ae29a9353161a483c1464440ce3dc5cce96", "message": "ISPN-11975 RemoteCacheImpl entry retrieval should be non blocking", "committedDate": "2020-06-10T16:39:25Z", "type": "commit"}, {"oid": "b68bcc4e05852b32a07d9bb0a67c5731ff436403", "url": "https://github.com/infinispan/infinispan/commit/b68bcc4e05852b32a07d9bb0a67c5731ff436403", "message": "ISPN-11975 RemoteCacheImpl entry retrieval should be non blocking", "committedDate": "2020-06-10T16:40:43Z", "type": "commit"}, {"oid": "b68bcc4e05852b32a07d9bb0a67c5731ff436403", "url": "https://github.com/infinispan/infinispan/commit/b68bcc4e05852b32a07d9bb0a67c5731ff436403", "message": "ISPN-11975 RemoteCacheImpl entry retrieval should be non blocking", "committedDate": "2020-06-10T16:40:43Z", "type": "forcePushed"}]}