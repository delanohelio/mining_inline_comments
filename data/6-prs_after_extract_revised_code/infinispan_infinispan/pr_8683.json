{"pr_number": 8683, "pr_title": "ISPN-12316 Convert expiration to no longer use transactions", "pr_createdAt": "2020-09-10T14:01:53Z", "pr_url": "https://github.com/infinispan/infinispan/pull/8683", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyNDE5Mg==", "url": "https://github.com/infinispan/infinispan/pull/8683#discussion_r486424192", "bodyText": "lambda can be cached (sound like Dan xD)", "author": "pruivo", "createdAt": "2020-09-10T15:14:05Z", "path": "core/src/main/java/org/infinispan/interceptors/impl/TransactionalExceptionEvictionInterceptor.java", "diffHunk": "@@ -166,6 +168,31 @@ public Object visitInvalidateCommand(InvocationContext ctx, InvalidateCommand co\n       return super.visitInvalidateCommand(ctx, command);\n    }\n \n+   // Remove Expired is not transactional\n+   @Override\n+   public Object visitRemoveExpiredCommand(InvocationContext ctx, RemoveExpiredCommand command) {\n+      Object key = command.getKey();\n+      // Skip adding changeAmount if originator is not primary\n+      if (ctx.isOriginLocal() && dm != null && !dm.getCacheTopology().getSegmentDistribution(command.getSegment()).isPrimary()) {\n+         return invokeNext(ctx, command);\n+      }\n+      return invokeNextThenAccept(ctx, command, ((rCtx, rCommand, rv) -> {\n+         if (rCommand.isSuccessful()) {", "originalCommit": "e98511638bb37b4b0d4ea3c6f3d02738dd8337ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQzNzUyNw==", "url": "https://github.com/infinispan/infinispan/pull/8683#discussion_r486437527", "bodyText": "Sure.", "author": "wburns", "createdAt": "2020-09-10T15:31:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyNDE5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "865b40b2ef82a32791d9312f2e4362b579792bc0", "chunk": "diff --git a/core/src/main/java/org/infinispan/interceptors/impl/TransactionalExceptionEvictionInterceptor.java b/core/src/main/java/org/infinispan/interceptors/impl/TransactionalExceptionEvictionInterceptor.java\nindex 375fc37ac4..a3630ce1c4 100644\n--- a/core/src/main/java/org/infinispan/interceptors/impl/TransactionalExceptionEvictionInterceptor.java\n+++ b/core/src/main/java/org/infinispan/interceptors/impl/TransactionalExceptionEvictionInterceptor.java\n\n@@ -176,21 +179,24 @@ public Object visitRemoveExpiredCommand(InvocationContext ctx, RemoveExpiredComm\n       if (ctx.isOriginLocal() && dm != null && !dm.getCacheTopology().getSegmentDistribution(command.getSegment()).isPrimary()) {\n          return invokeNext(ctx, command);\n       }\n-      return invokeNextThenAccept(ctx, command, ((rCtx, rCommand, rv) -> {\n-         if (rCommand.isSuccessful()) {\n-            if (dm == null || dm.getCacheTopology().getSegmentDistribution(rCommand.getSegment()).isWriteOwner()) {\n-               MVCCEntry<Object, Object> entry = (MVCCEntry) ctx.lookupEntry(key);\n-               if (isTrace) {\n-                  log.tracef(\"Key %s was removed via expiration\", key);\n-               }\n+      return invokeNextThenAccept(ctx, command, removeExpiredAction);\n+   }\n \n-               long changeAmount = -calculator.calculateSize(key, entry.getOldValue(), entry.getOldMetadata(), entry.getInternalMetadata());\n-               if (changeAmount != 0 && !increaseSize(changeAmount)) {\n-                  throw CONTAINER.containerFull(maxSize);\n-               }\n+   private void removeExpiredAccept(InvocationContext rCtx, RemoveExpiredCommand rCommand, Object rValue) {\n+      Object rKey = rCommand.getKey();\n+      if (rCommand.isSuccessful()) {\n+         if (dm == null || dm.getCacheTopology().getSegmentDistribution(rCommand.getSegment()).isWriteOwner()) {\n+            MVCCEntry<?, ?> entry = (MVCCEntry<?, ?>) rCtx.lookupEntry(rKey);\n+            if (isTrace) {\n+               log.tracef(\"Key %s was removed via expiration\", rKey);\n+            }\n+\n+            long changeAmount = -calculator.calculateSize(rKey, entry.getOldValue(), entry.getOldMetadata(), entry.getInternalMetadata());\n+            if (changeAmount != 0 && !increaseSize(changeAmount)) {\n+               throw CONTAINER.containerFull(maxSize);\n             }\n          }\n-      }));\n+      }\n    }\n \n    @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyNDU0Ng==", "url": "https://github.com/infinispan/infinispan/pull/8683#discussion_r486424546", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                           MVCCEntry<Object, Object> entry = (MVCCEntry) ctx.lookupEntry(key);\n          \n          \n            \n                           MVCCEntry<?, ?> entry = (MVCCEntry<?, ?>) ctx.lookupEntry(key);\n          \n      \n    \n    \n  \n\njust to remove the warning from IDEA :)", "author": "pruivo", "createdAt": "2020-09-10T15:14:32Z", "path": "core/src/main/java/org/infinispan/interceptors/impl/TransactionalExceptionEvictionInterceptor.java", "diffHunk": "@@ -166,6 +168,31 @@ public Object visitInvalidateCommand(InvocationContext ctx, InvalidateCommand co\n       return super.visitInvalidateCommand(ctx, command);\n    }\n \n+   // Remove Expired is not transactional\n+   @Override\n+   public Object visitRemoveExpiredCommand(InvocationContext ctx, RemoveExpiredCommand command) {\n+      Object key = command.getKey();\n+      // Skip adding changeAmount if originator is not primary\n+      if (ctx.isOriginLocal() && dm != null && !dm.getCacheTopology().getSegmentDistribution(command.getSegment()).isPrimary()) {\n+         return invokeNext(ctx, command);\n+      }\n+      return invokeNextThenAccept(ctx, command, ((rCtx, rCommand, rv) -> {\n+         if (rCommand.isSuccessful()) {\n+            if (dm == null || dm.getCacheTopology().getSegmentDistribution(rCommand.getSegment()).isWriteOwner()) {\n+               MVCCEntry<Object, Object> entry = (MVCCEntry) ctx.lookupEntry(key);", "originalCommit": "e98511638bb37b4b0d4ea3c6f3d02738dd8337ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQzNzU2MQ==", "url": "https://github.com/infinispan/infinispan/pull/8683#discussion_r486437561", "bodyText": "Sure.", "author": "wburns", "createdAt": "2020-09-10T15:31:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQyNDU0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "865b40b2ef82a32791d9312f2e4362b579792bc0", "chunk": "diff --git a/core/src/main/java/org/infinispan/interceptors/impl/TransactionalExceptionEvictionInterceptor.java b/core/src/main/java/org/infinispan/interceptors/impl/TransactionalExceptionEvictionInterceptor.java\nindex 375fc37ac4..a3630ce1c4 100644\n--- a/core/src/main/java/org/infinispan/interceptors/impl/TransactionalExceptionEvictionInterceptor.java\n+++ b/core/src/main/java/org/infinispan/interceptors/impl/TransactionalExceptionEvictionInterceptor.java\n\n@@ -176,21 +179,24 @@ public Object visitRemoveExpiredCommand(InvocationContext ctx, RemoveExpiredComm\n       if (ctx.isOriginLocal() && dm != null && !dm.getCacheTopology().getSegmentDistribution(command.getSegment()).isPrimary()) {\n          return invokeNext(ctx, command);\n       }\n-      return invokeNextThenAccept(ctx, command, ((rCtx, rCommand, rv) -> {\n-         if (rCommand.isSuccessful()) {\n-            if (dm == null || dm.getCacheTopology().getSegmentDistribution(rCommand.getSegment()).isWriteOwner()) {\n-               MVCCEntry<Object, Object> entry = (MVCCEntry) ctx.lookupEntry(key);\n-               if (isTrace) {\n-                  log.tracef(\"Key %s was removed via expiration\", key);\n-               }\n+      return invokeNextThenAccept(ctx, command, removeExpiredAction);\n+   }\n \n-               long changeAmount = -calculator.calculateSize(key, entry.getOldValue(), entry.getOldMetadata(), entry.getInternalMetadata());\n-               if (changeAmount != 0 && !increaseSize(changeAmount)) {\n-                  throw CONTAINER.containerFull(maxSize);\n-               }\n+   private void removeExpiredAccept(InvocationContext rCtx, RemoveExpiredCommand rCommand, Object rValue) {\n+      Object rKey = rCommand.getKey();\n+      if (rCommand.isSuccessful()) {\n+         if (dm == null || dm.getCacheTopology().getSegmentDistribution(rCommand.getSegment()).isWriteOwner()) {\n+            MVCCEntry<?, ?> entry = (MVCCEntry<?, ?>) rCtx.lookupEntry(rKey);\n+            if (isTrace) {\n+               log.tracef(\"Key %s was removed via expiration\", rKey);\n+            }\n+\n+            long changeAmount = -calculator.calculateSize(rKey, entry.getOldValue(), entry.getOldMetadata(), entry.getInternalMetadata());\n+            if (changeAmount != 0 && !increaseSize(changeAmount)) {\n+               throw CONTAINER.containerFull(maxSize);\n             }\n          }\n-      }));\n+      }\n    }\n \n    @Override\n"}}, {"oid": "865b40b2ef82a32791d9312f2e4362b579792bc0", "url": "https://github.com/infinispan/infinispan/commit/865b40b2ef82a32791d9312f2e4362b579792bc0", "message": "ISPN-12316 Convert expiration to no longer use transactions", "committedDate": "2020-09-10T16:27:59Z", "type": "commit"}, {"oid": "865b40b2ef82a32791d9312f2e4362b579792bc0", "url": "https://github.com/infinispan/infinispan/commit/865b40b2ef82a32791d9312f2e4362b579792bc0", "message": "ISPN-12316 Convert expiration to no longer use transactions", "committedDate": "2020-09-10T16:27:59Z", "type": "forcePushed"}]}