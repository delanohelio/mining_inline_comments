{"pr_number": 8856, "pr_title": "ISPN-12498 Server Management check authorizations", "pr_createdAt": "2020-11-16T08:58:39Z", "pr_url": "https://github.com/infinispan/infinispan/pull/8856", "timeline": [{"oid": "c6512c5163472349c696707027ae13616ced53fc", "url": "https://github.com/infinispan/infinispan/commit/c6512c5163472349c696707027ae13616ced53fc", "message": "ISPN-12498 Check authorization on backup manager ops", "committedDate": "2020-11-16T10:09:28Z", "type": "forcePushed"}, {"oid": "55701b81662f4107e7c7f01bbfe80c86e03759d7", "url": "https://github.com/infinispan/infinispan/commit/55701b81662f4107e7c7f01bbfe80c86e03759d7", "message": "ISPN-12498 Check authorization on backup manager ops", "committedDate": "2020-11-16T11:22:33Z", "type": "forcePushed"}, {"oid": "bfc7013b4d5ec80097c89c5529d834dea3298b16", "url": "https://github.com/infinispan/infinispan/commit/bfc7013b4d5ec80097c89c5529d834dea3298b16", "message": "ISPN-12498 Check authorization on backup manager ops", "committedDate": "2020-11-16T15:46:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM1MjI1Mw==", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r524352253", "bodyText": "can't you use one of the DefaultCacheManager from this.cacheManagers?", "author": "pruivo", "createdAt": "2020-11-16T15:28:07Z", "path": "server/core/src/main/java/org/infinispan/server/core/backup/BackupManagerImpl.java", "diffHunk": "@@ -43,14 +45,17 @@\n    final BackupReader reader;\n    final Lock backupLock;\n    final Lock restoreLock;\n+   private final EmbeddedCacheManager cacheManager;\n    final Map<String, DefaultCacheManager> cacheManagers;\n    final Map<String, BackupRequest> backupMap;\n    final Map<String, CompletionStage<Void>> restoreMap;\n \n+\n    public BackupManagerImpl(BlockingManager blockingManager, EmbeddedCacheManager cm,\n                             Map<String, DefaultCacheManager> cacheManagers, Path dataRoot) {\n       this.blockingManager = blockingManager;\n       this.rootDir = dataRoot.resolve(WORKING_DIR);\n+      this.cacheManager = cm;", "originalCommit": "55701b81662f4107e7c7f01bbfe80c86e03759d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM3NTQ5OQ==", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r524375499", "bodyText": "I have another PR to remove multiple cache managers that I'll refresh. This makes things simpler for now here.", "author": "tristantarrant", "createdAt": "2020-11-16T15:56:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM1MjI1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "269fd109a3b008853b4a406ba4f1985a6969af80", "chunk": "diff --git a/server/core/src/main/java/org/infinispan/server/core/backup/BackupManagerImpl.java b/server/core/src/main/java/org/infinispan/server/core/backup/BackupManagerImpl.java\nindex 73a75ae97e..80c8b3de9c 100644\n--- a/server/core/src/main/java/org/infinispan/server/core/backup/BackupManagerImpl.java\n+++ b/server/core/src/main/java/org/infinispan/server/core/backup/BackupManagerImpl.java\n\n@@ -50,7 +50,6 @@\n    final Map<String, BackupRequest> backupMap;\n    final Map<String, CompletionStage<Void>> restoreMap;\n \n-\n    public BackupManagerImpl(BlockingManager blockingManager, EmbeddedCacheManager cm,\n                             Map<String, DefaultCacheManager> cacheManagers, Path dataRoot) {\n       this.blockingManager = blockingManager;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM1MjM1Mg==", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r524352352", "bodyText": "nitpick: remove", "author": "pruivo", "createdAt": "2020-11-16T15:28:16Z", "path": "server/core/src/main/java/org/infinispan/server/core/backup/BackupManagerImpl.java", "diffHunk": "@@ -43,14 +45,17 @@\n    final BackupReader reader;\n    final Lock backupLock;\n    final Lock restoreLock;\n+   private final EmbeddedCacheManager cacheManager;\n    final Map<String, DefaultCacheManager> cacheManagers;\n    final Map<String, BackupRequest> backupMap;\n    final Map<String, CompletionStage<Void>> restoreMap;\n \n+", "originalCommit": "55701b81662f4107e7c7f01bbfe80c86e03759d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "269fd109a3b008853b4a406ba4f1985a6969af80", "chunk": "diff --git a/server/core/src/main/java/org/infinispan/server/core/backup/BackupManagerImpl.java b/server/core/src/main/java/org/infinispan/server/core/backup/BackupManagerImpl.java\nindex 73a75ae97e..80c8b3de9c 100644\n--- a/server/core/src/main/java/org/infinispan/server/core/backup/BackupManagerImpl.java\n+++ b/server/core/src/main/java/org/infinispan/server/core/backup/BackupManagerImpl.java\n\n@@ -50,7 +50,6 @@\n    final Map<String, BackupRequest> backupMap;\n    final Map<String, CompletionStage<Void>> restoreMap;\n \n-\n    public BackupManagerImpl(BlockingManager blockingManager, EmbeddedCacheManager cm,\n                             Map<String, DefaultCacheManager> cacheManagers, Path dataRoot) {\n       this.blockingManager = blockingManager;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM1NTQxMw==", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r524355413", "bodyText": "getBackupLocation() is missing.", "author": "pruivo", "createdAt": "2020-11-16T15:32:04Z", "path": "server/core/src/main/java/org/infinispan/server/core/backup/BackupManagerImpl.java", "diffHunk": "@@ -67,11 +72,13 @@ public void init() throws IOException {\n \n    @Override\n    public Set<String> getBackupNames() {\n+      SecurityActions.checkPermission(cacheManager.withSubject(Security.getSubject()), AuthorizationPermission.ADMIN);\n       return new HashSet<>(backupMap.keySet());\n    }\n \n    @Override\n    public Status getBackupStatus(String name) {\n+      SecurityActions.checkPermission(cacheManager.withSubject(Security.getSubject()), AuthorizationPermission.ADMIN);\n       return getBackupStatus(backupMap.get(name));\n    }\n ", "originalCommit": "55701b81662f4107e7c7f01bbfe80c86e03759d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "269fd109a3b008853b4a406ba4f1985a6969af80", "chunk": "diff --git a/server/core/src/main/java/org/infinispan/server/core/backup/BackupManagerImpl.java b/server/core/src/main/java/org/infinispan/server/core/backup/BackupManagerImpl.java\nindex 73a75ae97e..80c8b3de9c 100644\n--- a/server/core/src/main/java/org/infinispan/server/core/backup/BackupManagerImpl.java\n+++ b/server/core/src/main/java/org/infinispan/server/core/backup/BackupManagerImpl.java\n\n@@ -84,6 +83,7 @@ public Status getBackupStatus(String name) {\n \n    @Override\n    public Path getBackupLocation(String name) {\n+      SecurityActions.checkPermission(cacheManager.withSubject(Security.getSubject()), AuthorizationPermission.ADMIN);\n       BackupRequest request = backupMap.get(name);\n       Status status = getBackupStatus(request);\n       if (status != Status.COMPLETE)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM1NTg1NQ==", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r524355855", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  authzHelper.checkPermission(cacheManager.getSubject(), AuthorizationPermission.ADMIN);\n          \n          \n            \n                  authzHelper.checkPermission(cacheManager.getSubject(), permission);", "author": "pruivo", "createdAt": "2020-11-16T15:32:35Z", "path": "server/core/src/main/java/org/infinispan/server/core/backup/SecurityActions.java", "diffHunk": "@@ -31,4 +35,14 @@ static GlobalConfiguration getGlobalConfiguration(final EmbeddedCacheManager cac\n       GetCacheManagerConfigurationAction action = new GetCacheManagerConfigurationAction(cacheManager);\n       return doPrivileged(action);\n    }\n+\n+   static GlobalComponentRegistry getGlobalComponentRegistry(final EmbeddedCacheManager cacheManager) {\n+      GetGlobalComponentRegistryAction action = new GetGlobalComponentRegistryAction(cacheManager);\n+      return doPrivileged(action);\n+   }\n+\n+   static void checkPermission(EmbeddedCacheManager cacheManager, AuthorizationPermission permission) {\n+      AuthorizationHelper authzHelper = getGlobalComponentRegistry(cacheManager).getComponent(AuthorizationHelper.class);\n+      authzHelper.checkPermission(cacheManager.getSubject(), AuthorizationPermission.ADMIN);", "originalCommit": "55701b81662f4107e7c7f01bbfe80c86e03759d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQxOTU3NQ==", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r524419575", "bodyText": "Oops #2", "author": "tristantarrant", "createdAt": "2020-11-16T16:54:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM1NTg1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "414e9739c570796f83aa86297bc029a621ff8313", "chunk": "diff --git a/server/core/src/main/java/org/infinispan/server/core/backup/SecurityActions.java b/server/core/src/main/java/org/infinispan/server/core/backup/SecurityActions.java\nindex 230cfd2936..d13a57d1ac 100644\n--- a/server/core/src/main/java/org/infinispan/server/core/backup/SecurityActions.java\n+++ b/server/core/src/main/java/org/infinispan/server/core/backup/SecurityActions.java\n\n@@ -43,6 +43,6 @@ static GlobalComponentRegistry getGlobalComponentRegistry(final EmbeddedCacheMan\n \n    static void checkPermission(EmbeddedCacheManager cacheManager, AuthorizationPermission permission) {\n       AuthorizationHelper authzHelper = getGlobalComponentRegistry(cacheManager).getComponent(AuthorizationHelper.class);\n-      authzHelper.checkPermission(cacheManager.getSubject(), AuthorizationPermission.ADMIN);\n+      authzHelper.checkPermission(cacheManager.getSubject(), permission);\n    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2MDQ2OA==", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r524360468", "bodyText": "getAllRestoreNames() isn't protected.", "author": "pruivo", "createdAt": "2020-11-16T15:38:35Z", "path": "server/rest/src/main/java/org/infinispan/rest/resources/ClusterResource.java", "diffHunk": "@@ -38,8 +40,8 @@ public ClusterResource(InvocationHelper invocationHelper) {\n    public Invocations getInvocations() {\n       return new Invocations.Builder()\n             .invocation().methods(POST).path(\"/v2/cluster\").withAction(\"stop\").handleWith(this::stop)\n-            .invocation().methods(GET).path(\"/v2/cluster/backups\").handleWith(this::getAllBackupNames)\n-            .invocation().methods(DELETE, GET, POST).path(\"/v2/cluster/backups/{backupName}\").handleWith(this::backup)\n+            .invocation().methods(GET, HEAD).path(\"/v2/cluster/backups\").handleWith(this::getAllBackupNames)\n+            .invocation().methods(DELETE, GET, HEAD, POST).path(\"/v2/cluster/backups/{backupName}\").handleWith(this::backup)\n             .invocation().methods(GET).path(\"/v2/cluster/restores\").handleWith(this::getAllRestoreNames)", "originalCommit": "55701b81662f4107e7c7f01bbfe80c86e03759d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0a4e9a0171dae0740fa4b98ed4c24b1adde16e1a", "chunk": "diff --git a/server/rest/src/main/java/org/infinispan/rest/resources/ClusterResource.java b/server/rest/src/main/java/org/infinispan/rest/resources/ClusterResource.java\nindex 7ea186b9c6..2fa18c5178 100644\n--- a/server/rest/src/main/java/org/infinispan/rest/resources/ClusterResource.java\n+++ b/server/rest/src/main/java/org/infinispan/rest/resources/ClusterResource.java\n\n@@ -40,8 +40,8 @@ public ClusterResource(InvocationHelper invocationHelper) {\n    public Invocations getInvocations() {\n       return new Invocations.Builder()\n             .invocation().methods(POST).path(\"/v2/cluster\").withAction(\"stop\").handleWith(this::stop)\n-            .invocation().methods(GET, HEAD).path(\"/v2/cluster/backups\").handleWith(this::getAllBackupNames)\n-            .invocation().methods(DELETE, GET, HEAD, POST).path(\"/v2/cluster/backups/{backupName}\").handleWith(this::backup)\n+            .invocation().methods(GET).path(\"/v2/cluster/backups\").handleWith(this::getAllBackupNames)\n+            .invocation().methods(DELETE, GET, POST).path(\"/v2/cluster/backups/{backupName}\").handleWith(this::backup)\n             .invocation().methods(GET).path(\"/v2/cluster/restores\").handleWith(this::getAllRestoreNames)\n             .invocation().methods(DELETE, HEAD, POST).path(\"/v2/cluster/restores/{restoreName}\").handleWith(this::restore)\n             .create();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2NTQ5NA==", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r524365494", "bodyText": "isn't required the Subject be set in the TaskContext?", "author": "pruivo", "createdAt": "2020-11-16T15:44:47Z", "path": "server/rest/src/main/java/org/infinispan/rest/resources/LoggingResource.java", "diffHunk": "@@ -65,37 +65,38 @@ public Invocations getInvocations() {\n                   .addOptionalParameter(\"loggerName\", loggerName)\n                   .addOptionalParameter(\"level\", level)\n                   .addOptionalParameter(\"appenders\", appenders)\n-      ).handle((o, t) -> {\n-         NettyRestResponse.Builder response = new NettyRestResponse.Builder();\n-         if (t == null) {\n-            response.status(HttpResponseStatus.NO_CONTENT);\n+                  .subject(request.getSubject())\n+      ).handle((o, t) -> handle(t));\n+   }\n+\n+   private NettyRestResponse handle(Throwable t) {\n+      NettyRestResponse.Builder response = new NettyRestResponse.Builder();\n+      if (t == null) {\n+         response.status(HttpResponseStatus.NO_CONTENT);\n+      } else {\n+         while (t.getCause() != null) {\n+            t = t.getCause();\n+         }\n+         if (t instanceof IllegalStateException) {\n+            response.status(HttpResponseStatus.CONFLICT).entity(t.getMessage());\n+         } else if (t instanceof IllegalArgumentException) {\n+            response.status(HttpResponseStatus.BAD_REQUEST).entity(t.getMessage());\n+         } else if (t instanceof NoSuchElementException) {\n+            response.status(HttpResponseStatus.NOT_FOUND).entity(t.getMessage());\n+         } else if (t instanceof SecurityException) {\n+            response.status(HttpResponseStatus.FORBIDDEN).entity(t.getMessage());\n          } else {\n-            while (t.getCause() != null) {\n-               t = t.getCause();\n-            }\n-            if (t instanceof IllegalStateException) {\n-               response.status(HttpResponseStatus.CONFLICT).entity(t.getMessage());\n-            } else if (t instanceof IllegalArgumentException) {\n-               response.status(HttpResponseStatus.BAD_REQUEST).entity(t.getMessage());\n-            } else if (t instanceof NoSuchElementException) {\n-               response.status(HttpResponseStatus.NOT_FOUND).entity(t.getMessage());\n-            } else {\n-               response.status(HttpResponseStatus.INTERNAL_SERVER_ERROR).entity(t.getMessage());\n-            }\n+            response.status(HttpResponseStatus.INTERNAL_SERVER_ERROR).entity(t.getMessage());\n          }\n-         return response.build();\n-      });\n+      }\n+      return response.build();\n    }\n \n    private CompletionStage<RestResponse> deleteLogger(RestRequest request) {\n       TaskManager taskManager = invocationHelper.getServer().getTaskManager();\n       String loggerName = request.variables().get(\"loggerName\");\n       return taskManager.runTask(\"@@logging@remove\", new TaskContext().addParameter(\"loggerName\", loggerName))", "originalCommit": "55701b81662f4107e7c7f01bbfe80c86e03759d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQxODQ5OQ==", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r524418499", "bodyText": "Yep, also added a test for this.", "author": "tristantarrant", "createdAt": "2020-11-16T16:53:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2NTQ5NA=="}], "type": "inlineReview", "revised_code": {"commit": "269fd109a3b008853b4a406ba4f1985a6969af80", "chunk": "diff --git a/server/rest/src/main/java/org/infinispan/rest/resources/LoggingResource.java b/server/rest/src/main/java/org/infinispan/rest/resources/LoggingResource.java\nindex e5c5031527..09455211bf 100644\n--- a/server/rest/src/main/java/org/infinispan/rest/resources/LoggingResource.java\n+++ b/server/rest/src/main/java/org/infinispan/rest/resources/LoggingResource.java\n\n@@ -69,34 +69,14 @@ public Invocations getInvocations() {\n       ).handle((o, t) -> handle(t));\n    }\n \n-   private NettyRestResponse handle(Throwable t) {\n-      NettyRestResponse.Builder response = new NettyRestResponse.Builder();\n-      if (t == null) {\n-         response.status(HttpResponseStatus.NO_CONTENT);\n-      } else {\n-         while (t.getCause() != null) {\n-            t = t.getCause();\n-         }\n-         if (t instanceof IllegalStateException) {\n-            response.status(HttpResponseStatus.CONFLICT).entity(t.getMessage());\n-         } else if (t instanceof IllegalArgumentException) {\n-            response.status(HttpResponseStatus.BAD_REQUEST).entity(t.getMessage());\n-         } else if (t instanceof NoSuchElementException) {\n-            response.status(HttpResponseStatus.NOT_FOUND).entity(t.getMessage());\n-         } else if (t instanceof SecurityException) {\n-            response.status(HttpResponseStatus.FORBIDDEN).entity(t.getMessage());\n-         } else {\n-            response.status(HttpResponseStatus.INTERNAL_SERVER_ERROR).entity(t.getMessage());\n-         }\n-      }\n-      return response.build();\n-   }\n-\n    private CompletionStage<RestResponse> deleteLogger(RestRequest request) {\n       TaskManager taskManager = invocationHelper.getServer().getTaskManager();\n       String loggerName = request.variables().get(\"loggerName\");\n-      return taskManager.runTask(\"@@logging@remove\", new TaskContext().addParameter(\"loggerName\", loggerName))\n-            .handle((o, t) -> handle(t));\n+      return taskManager.runTask(\"@@logging@remove\",\n+            new TaskContext()\n+                  .addParameter(\"loggerName\", loggerName)\n+                  .subject(request.getSubject())\n+            ).handle((o, t) -> handle(t));\n    }\n \n    private CompletionStage<RestResponse> listLoggers(RestRequest request) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2NjY0Mw==", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r524366643", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  authzHelper.checkPermission(cacheManager.getSubject(), AuthorizationPermission.ADMIN);\n          \n          \n            \n                  authzHelper.checkPermission(cacheManager.getSubject(), permission);", "author": "pruivo", "createdAt": "2020-11-16T15:46:08Z", "path": "server/runtime/src/main/java/org/infinispan/server/SecurityActions.java", "diffHunk": "@@ -110,4 +112,9 @@ static void setInitialContextFactoryBuilder(InitialContextFactoryBuilder initial\n          return null;\n       });\n    }\n+\n+   static void checkPermission(EmbeddedCacheManager cacheManager, AuthorizationPermission permission) {\n+      AuthorizationHelper authzHelper = getGlobalComponentRegistry(cacheManager).getComponent(AuthorizationHelper.class);\n+      authzHelper.checkPermission(cacheManager.getSubject(), AuthorizationPermission.ADMIN);", "originalCommit": "55701b81662f4107e7c7f01bbfe80c86e03759d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQxODMwOA==", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r524418308", "bodyText": "Oops", "author": "tristantarrant", "createdAt": "2020-11-16T16:53:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2NjY0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "269fd109a3b008853b4a406ba4f1985a6969af80", "chunk": "diff --git a/server/runtime/src/main/java/org/infinispan/server/SecurityActions.java b/server/runtime/src/main/java/org/infinispan/server/SecurityActions.java\nindex c3d6fed650..c1f15260dd 100644\n--- a/server/runtime/src/main/java/org/infinispan/server/SecurityActions.java\n+++ b/server/runtime/src/main/java/org/infinispan/server/SecurityActions.java\n\n@@ -115,6 +115,6 @@ static void setInitialContextFactoryBuilder(InitialContextFactoryBuilder initial\n \n    static void checkPermission(EmbeddedCacheManager cacheManager, AuthorizationPermission permission) {\n       AuthorizationHelper authzHelper = getGlobalComponentRegistry(cacheManager).getComponent(AuthorizationHelper.class);\n-      authzHelper.checkPermission(cacheManager.getSubject(), AuthorizationPermission.ADMIN);\n+      authzHelper.checkPermission(cacheManager.getSubject(), permission);\n    }\n }\n"}}, {"oid": "269fd109a3b008853b4a406ba4f1985a6969af80", "url": "https://github.com/infinispan/infinispan/commit/269fd109a3b008853b4a406ba4f1985a6969af80", "message": "ISPN-12498 Check authorization on backup manager ops", "committedDate": "2020-11-16T16:09:12Z", "type": "forcePushed"}, {"oid": "f423f9b6aaa7f4d5c636bcdb22271e624eeb5258", "url": "https://github.com/infinispan/infinispan/commit/f423f9b6aaa7f4d5c636bcdb22271e624eeb5258", "message": "ISPN-12498 Check authorization on backup manager ops", "committedDate": "2020-11-16T16:26:58Z", "type": "forcePushed"}, {"oid": "414e9739c570796f83aa86297bc029a621ff8313", "url": "https://github.com/infinispan/infinispan/commit/414e9739c570796f83aa86297bc029a621ff8313", "message": "ISPN-12498 Check authorization on backup manager ops", "committedDate": "2020-11-16T16:54:47Z", "type": "forcePushed"}, {"oid": "5b206047a4f836333d13f1df4b2d9d86094c7f20", "url": "https://github.com/infinispan/infinispan/commit/5b206047a4f836333d13f1df4b2d9d86094c7f20", "message": "ISPN-12498 Check authorization on backup manager ops", "committedDate": "2020-11-17T17:12:57Z", "type": "forcePushed"}, {"oid": "ccefdd1e4d536c153f5a4b03eac3f503bd8e1fe1", "url": "https://github.com/infinispan/infinispan/commit/ccefdd1e4d536c153f5a4b03eac3f503bd8e1fe1", "message": "ISPN-12498 Check authorization on backup manager ops", "committedDate": "2020-11-17T17:20:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk1MzY3NA==", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r525953674", "bodyText": "org.infinispan.xsite.XSiteAdminOperations#clusterStatus() needs to check for permission too.\nor is it intentional since it is a read-only operation?\nps. another one:\n\norg.infinispan.xsite.XSiteAdminOperations#nodeStatus()\norg.infinispan.xsite.XSiteAdminOperations#getTakeOfflineConfiguration()\norg.infinispan.xsite.XSiteAdminOperations#getSendingSiteName()\norg.infinispan.xsite.XSiteAdminOperations#checkSite", "author": "pruivo", "createdAt": "2020-11-18T09:54:40Z", "path": "core/src/main/java/org/infinispan/xsite/XSiteAdminOperations.java", "diffHunk": "@@ -59,6 +61,7 @@\n    @Inject XSiteStateTransferManager stateTransferManager;\n    @Inject CommandsFactory commandsFactory;\n    @Inject TakeOfflineManager takeOfflineManager;\n+   @Inject AuthorizationHelper authorizationHelper;", "originalCommit": "ccefdd1e4d536c153f5a4b03eac3f503bd8e1fe1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk1MzkwOA==", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r525953908", "bodyText": "offtopic: can you make log final too?", "author": "pruivo", "createdAt": "2020-11-18T09:54:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk1MzY3NA=="}], "type": "inlineReview", "revised_code": {"commit": "0780cc0178cc83265ebcedf3d4fa4b22a0f2d144", "chunk": "diff --git a/core/src/main/java/org/infinispan/xsite/XSiteAdminOperations.java b/core/src/main/java/org/infinispan/xsite/XSiteAdminOperations.java\nindex 74cc7fe7db..d4677a047a 100644\n--- a/core/src/main/java/org/infinispan/xsite/XSiteAdminOperations.java\n+++ b/core/src/main/java/org/infinispan/xsite/XSiteAdminOperations.java\n\n@@ -55,7 +55,7 @@\n    public static final String OFFLINE = \"offline\";\n    public static final String SUCCESS = \"ok\";\n    private static final Function<CacheMixedSiteStatus, String> DEFAULT_MIXED_MESSAGES = s -> \"mixed, offline on nodes: \" + s.getOffline();\n-   private static Log log = LogFactory.getLog(XSiteAdminOperations.class);\n+   private static final Log log = LogFactory.getLog(XSiteAdminOperations.class);\n \n    @Inject RpcManager rpcManager;\n    @Inject XSiteStateTransferManager stateTransferManager;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk1NjU5OQ==", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r525956599", "bodyText": "can be removed. the private method takeOffline already checks the permission.", "author": "pruivo", "createdAt": "2020-11-18T09:58:48Z", "path": "core/src/main/java/org/infinispan/xsite/XSiteAdminOperations.java", "diffHunk": "@@ -185,6 +189,7 @@ public String setTakeOfflineAfterFailures(\n    public String setTakeOfflineMinTimeToWait(\n          @Parameter(name = \"site\", description = \"The name of the backup site\") String site,\n          @Parameter(name = \"minTimeToWait\", description = \"The minimum amount of time in milliseconds to wait before taking a site offline\") long minTimeToWait) {\n+      authorizationHelper.checkPermission(AuthorizationPermission.ADMIN);", "originalCommit": "ccefdd1e4d536c153f5a4b03eac3f503bd8e1fe1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0780cc0178cc83265ebcedf3d4fa4b22a0f2d144", "chunk": "diff --git a/core/src/main/java/org/infinispan/xsite/XSiteAdminOperations.java b/core/src/main/java/org/infinispan/xsite/XSiteAdminOperations.java\nindex 74cc7fe7db..d4677a047a 100644\n--- a/core/src/main/java/org/infinispan/xsite/XSiteAdminOperations.java\n+++ b/core/src/main/java/org/infinispan/xsite/XSiteAdminOperations.java\n\n@@ -189,7 +191,6 @@ public String setTakeOfflineAfterFailures(\n    public String setTakeOfflineMinTimeToWait(\n          @Parameter(name = \"site\", description = \"The name of the backup site\") String site,\n          @Parameter(name = \"minTimeToWait\", description = \"The minimum amount of time in milliseconds to wait before taking a site offline\") long minTimeToWait) {\n-      authorizationHelper.checkPermission(AuthorizationPermission.ADMIN);\n       return takeOffline(site, null, minTimeToWait);\n    }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk2MDE2Mw==", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r525960163", "bodyText": "stupid question: isn't cacheManager.withSubject(Security.getSubject()) required here in this class?", "author": "pruivo", "createdAt": "2020-11-18T10:03:59Z", "path": "core/src/main/java/org/infinispan/xsite/GlobalXSiteAdminOperations.java", "diffHunk": "@@ -107,6 +108,7 @@ public final String cancelPushState(@Parameter(description = \"The destination si\n    }\n \n    public final Map<String, SiteStatus> globalStatus() {\n+      SecurityActions.checkPermission(cacheManager, AuthorizationPermission.ADMIN);", "originalCommit": "ccefdd1e4d536c153f5a4b03eac3f503bd8e1fe1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjAxNTk5MA==", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r526015990", "bodyText": "They both work. If the cacheManager is decorated with a Subject, it will use that, otherwise it uses Security.getSubject() which uses a ThreadLocal set by the Security.doAs() call.", "author": "tristantarrant", "createdAt": "2020-11-18T11:31:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk2MDE2Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk2MzMwOQ==", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r525963309", "bodyText": "nitpick\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     Security.doAs(restRequest.getSubject(), (PrivilegedAction) () -> {\n          \n          \n            \n                     Security.doAs(restRequest.getSubject(), (PrivilegedAction<Void>) () -> {", "author": "pruivo", "createdAt": "2020-11-18T10:08:36Z", "path": "server/rest/src/main/java/org/infinispan/rest/resources/ClusterResource.java", "diffHunk": "@@ -49,16 +51,22 @@ public Invocations getInvocations() {\n       List<String> servers = restRequest.parameters().get(\"server\");\n \n       if (servers != null && !servers.isEmpty()) {\n-         invocationHelper.getServer().serverStop(servers);\n+         Security.doAs(restRequest.getSubject(), (PrivilegedAction) () -> {", "originalCommit": "ccefdd1e4d536c153f5a4b03eac3f503bd8e1fe1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0780cc0178cc83265ebcedf3d4fa4b22a0f2d144", "chunk": "diff --git a/server/rest/src/main/java/org/infinispan/rest/resources/ClusterResource.java b/server/rest/src/main/java/org/infinispan/rest/resources/ClusterResource.java\nindex a1227fc927..7b63e15870 100644\n--- a/server/rest/src/main/java/org/infinispan/rest/resources/ClusterResource.java\n+++ b/server/rest/src/main/java/org/infinispan/rest/resources/ClusterResource.java\n\n@@ -51,22 +51,16 @@ public Invocations getInvocations() {\n       List<String> servers = restRequest.parameters().get(\"server\");\n \n       if (servers != null && !servers.isEmpty()) {\n-         Security.doAs(restRequest.getSubject(), (PrivilegedAction) () -> {\n-            invocationHelper.getServer().serverStop(servers);\n-            return null;\n-         });\n+         Security.doAs(restRequest.getSubject(), () -> invocationHelper.getServer().serverStop(servers));\n       } else {\n-         Security.doAs(restRequest.getSubject(), (PrivilegedAction) () -> {\n-            invocationHelper.getServer().clusterStop();\n-            return null;\n-         });\n+         Security.doAs(restRequest.getSubject(), () -> invocationHelper.getServer().clusterStop());\n       }\n       return CompletableFuture.completedFuture(new NettyRestResponse.Builder().status(NO_CONTENT).build());\n    }\n \n    private CompletionStage<RestResponse> getAllBackupNames(RestRequest request) {\n       BackupManager backupManager = invocationHelper.getServer().getBackupManager();\n-      Set<String> names = Security.doAs(request.getSubject(), (PrivilegedAction<Set<String>>) () -> backupManager.getBackupNames());\n+      Set<String> names = Security.doAs(request.getSubject(), (PrivilegedAction<Set<String>>) backupManager::getBackupNames);\n       return asJsonResponseFuture(Json.make(names));\n    }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk2MzQ1Mw==", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r525963453", "bodyText": "nitpick\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     Security.doAs(restRequest.getSubject(), (PrivilegedAction) () -> {\n          \n          \n            \n                     Security.doAs(restRequest.getSubject(), (PrivilegedAction<Void>) () -> {", "author": "pruivo", "createdAt": "2020-11-18T10:08:50Z", "path": "server/rest/src/main/java/org/infinispan/rest/resources/ClusterResource.java", "diffHunk": "@@ -49,16 +51,22 @@ public Invocations getInvocations() {\n       List<String> servers = restRequest.parameters().get(\"server\");\n \n       if (servers != null && !servers.isEmpty()) {\n-         invocationHelper.getServer().serverStop(servers);\n+         Security.doAs(restRequest.getSubject(), (PrivilegedAction) () -> {\n+            invocationHelper.getServer().serverStop(servers);\n+            return null;\n+         });\n       } else {\n-         invocationHelper.getServer().clusterStop();\n+         Security.doAs(restRequest.getSubject(), (PrivilegedAction) () -> {", "originalCommit": "ccefdd1e4d536c153f5a4b03eac3f503bd8e1fe1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0780cc0178cc83265ebcedf3d4fa4b22a0f2d144", "chunk": "diff --git a/server/rest/src/main/java/org/infinispan/rest/resources/ClusterResource.java b/server/rest/src/main/java/org/infinispan/rest/resources/ClusterResource.java\nindex a1227fc927..7b63e15870 100644\n--- a/server/rest/src/main/java/org/infinispan/rest/resources/ClusterResource.java\n+++ b/server/rest/src/main/java/org/infinispan/rest/resources/ClusterResource.java\n\n@@ -51,22 +51,16 @@ public Invocations getInvocations() {\n       List<String> servers = restRequest.parameters().get(\"server\");\n \n       if (servers != null && !servers.isEmpty()) {\n-         Security.doAs(restRequest.getSubject(), (PrivilegedAction) () -> {\n-            invocationHelper.getServer().serverStop(servers);\n-            return null;\n-         });\n+         Security.doAs(restRequest.getSubject(), () -> invocationHelper.getServer().serverStop(servers));\n       } else {\n-         Security.doAs(restRequest.getSubject(), (PrivilegedAction) () -> {\n-            invocationHelper.getServer().clusterStop();\n-            return null;\n-         });\n+         Security.doAs(restRequest.getSubject(), () -> invocationHelper.getServer().clusterStop());\n       }\n       return CompletableFuture.completedFuture(new NettyRestResponse.Builder().status(NO_CONTENT).build());\n    }\n \n    private CompletionStage<RestResponse> getAllBackupNames(RestRequest request) {\n       BackupManager backupManager = invocationHelper.getServer().getBackupManager();\n-      Set<String> names = Security.doAs(request.getSubject(), (PrivilegedAction<Set<String>>) () -> backupManager.getBackupNames());\n+      Set<String> names = Security.doAs(request.getSubject(), (PrivilegedAction<Set<String>>) backupManager::getBackupNames);\n       return asJsonResponseFuture(Json.make(names));\n    }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk2Mzc5Mg==", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r525963792", "bodyText": "nit\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  Set<String> names = Security.doAs(request.getSubject(), (PrivilegedAction<Set<String>>) () -> backupManager.getBackupNames());\n          \n          \n            \n                  Set<String> names = Security.doAs(request.getSubject(), (PrivilegedAction<Set<String>>) backupManager::getBackupNames);", "author": "pruivo", "createdAt": "2020-11-18T10:09:21Z", "path": "server/rest/src/main/java/org/infinispan/rest/resources/ClusterResource.java", "diffHunk": "@@ -49,16 +51,22 @@ public Invocations getInvocations() {\n       List<String> servers = restRequest.parameters().get(\"server\");\n \n       if (servers != null && !servers.isEmpty()) {\n-         invocationHelper.getServer().serverStop(servers);\n+         Security.doAs(restRequest.getSubject(), (PrivilegedAction) () -> {\n+            invocationHelper.getServer().serverStop(servers);\n+            return null;\n+         });\n       } else {\n-         invocationHelper.getServer().clusterStop();\n+         Security.doAs(restRequest.getSubject(), (PrivilegedAction) () -> {\n+            invocationHelper.getServer().clusterStop();\n+            return null;\n+         });\n       }\n       return CompletableFuture.completedFuture(new NettyRestResponse.Builder().status(NO_CONTENT).build());\n    }\n \n    private CompletionStage<RestResponse> getAllBackupNames(RestRequest request) {\n       BackupManager backupManager = invocationHelper.getServer().getBackupManager();\n-      Set<String> names = backupManager.getBackupNames();\n+      Set<String> names = Security.doAs(request.getSubject(), (PrivilegedAction<Set<String>>) () -> backupManager.getBackupNames());", "originalCommit": "ccefdd1e4d536c153f5a4b03eac3f503bd8e1fe1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0780cc0178cc83265ebcedf3d4fa4b22a0f2d144", "chunk": "diff --git a/server/rest/src/main/java/org/infinispan/rest/resources/ClusterResource.java b/server/rest/src/main/java/org/infinispan/rest/resources/ClusterResource.java\nindex a1227fc927..7b63e15870 100644\n--- a/server/rest/src/main/java/org/infinispan/rest/resources/ClusterResource.java\n+++ b/server/rest/src/main/java/org/infinispan/rest/resources/ClusterResource.java\n\n@@ -51,22 +51,16 @@ public Invocations getInvocations() {\n       List<String> servers = restRequest.parameters().get(\"server\");\n \n       if (servers != null && !servers.isEmpty()) {\n-         Security.doAs(restRequest.getSubject(), (PrivilegedAction) () -> {\n-            invocationHelper.getServer().serverStop(servers);\n-            return null;\n-         });\n+         Security.doAs(restRequest.getSubject(), () -> invocationHelper.getServer().serverStop(servers));\n       } else {\n-         Security.doAs(restRequest.getSubject(), (PrivilegedAction) () -> {\n-            invocationHelper.getServer().clusterStop();\n-            return null;\n-         });\n+         Security.doAs(restRequest.getSubject(), () -> invocationHelper.getServer().clusterStop());\n       }\n       return CompletableFuture.completedFuture(new NettyRestResponse.Builder().status(NO_CONTENT).build());\n    }\n \n    private CompletionStage<RestResponse> getAllBackupNames(RestRequest request) {\n       BackupManager backupManager = invocationHelper.getServer().getBackupManager();\n-      Set<String> names = Security.doAs(request.getSubject(), (PrivilegedAction<Set<String>>) () -> backupManager.getBackupNames());\n+      Set<String> names = Security.doAs(request.getSubject(), (PrivilegedAction<Set<String>>) backupManager::getBackupNames);\n       return asJsonResponseFuture(Json.make(names));\n    }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk2NDAzNw==", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r525964037", "bodyText": "nit\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  Set<String> names = Security.doAs(request.getSubject(), (PrivilegedAction<Set<String>>) () -> backupManager.getRestoreNames());\n          \n          \n            \n                  Set<String> names = Security.doAs(request.getSubject(), (PrivilegedAction<Set<String>>) backupManager::getRestoreNames);", "author": "pruivo", "createdAt": "2020-11-18T10:09:41Z", "path": "server/rest/src/main/java/org/infinispan/rest/resources/ClusterResource.java", "diffHunk": "@@ -69,7 +77,7 @@ public Invocations getInvocations() {\n \n    private CompletionStage<RestResponse> getAllRestoreNames(RestRequest request) {\n       BackupManager backupManager = invocationHelper.getServer().getBackupManager();\n-      Set<String> names = backupManager.getRestoreNames();\n+      Set<String> names = Security.doAs(request.getSubject(), (PrivilegedAction<Set<String>>) () -> backupManager.getRestoreNames());", "originalCommit": "ccefdd1e4d536c153f5a4b03eac3f503bd8e1fe1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0780cc0178cc83265ebcedf3d4fa4b22a0f2d144", "chunk": "diff --git a/server/rest/src/main/java/org/infinispan/rest/resources/ClusterResource.java b/server/rest/src/main/java/org/infinispan/rest/resources/ClusterResource.java\nindex a1227fc927..7b63e15870 100644\n--- a/server/rest/src/main/java/org/infinispan/rest/resources/ClusterResource.java\n+++ b/server/rest/src/main/java/org/infinispan/rest/resources/ClusterResource.java\n\n@@ -77,7 +71,7 @@ public Invocations getInvocations() {\n \n    private CompletionStage<RestResponse> getAllRestoreNames(RestRequest request) {\n       BackupManager backupManager = invocationHelper.getServer().getBackupManager();\n-      Set<String> names = Security.doAs(request.getSubject(), (PrivilegedAction<Set<String>>) () -> backupManager.getRestoreNames());\n+      Set<String> names = Security.doAs(request.getSubject(), (PrivilegedAction<Set<String>>) backupManager::getRestoreNames);\n       return asJsonResponseFuture(Json.make(names));\n    }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk2NTQ4Ng==", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r525965486", "bodyText": "nit\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     Map<String, SiteStatus> globalStatus = Security.doAs(request.getSubject(), (PrivilegedAction<Map<String, SiteStatus>>) () -> globalXSiteAdmin.globalStatus());\n          \n          \n            \n                     Map<String, SiteStatus> globalStatus = Security.doAs(request.getSubject(), (PrivilegedAction<Map<String, SiteStatus>>) globalXSiteAdmin::globalStatus);", "author": "pruivo", "createdAt": "2020-11-18T10:11:50Z", "path": "server/rest/src/main/java/org/infinispan/rest/resources/XSiteResource.java", "diffHunk": "@@ -117,7 +119,8 @@ public Invocations getInvocations() {\n       if (globalXSiteAdmin == null) return CompletableFuture.completedFuture(responseBuilder.status(NOT_FOUND).build());\n \n       return CompletableFuture.supplyAsync(() -> {\n-         Map<String, GlobalStatus> collect = globalXSiteAdmin.globalStatus().entrySet().stream().collect(Collectors.toMap(Entry::getKey, e -> {\n+         Map<String, SiteStatus> globalStatus = Security.doAs(request.getSubject(), (PrivilegedAction<Map<String, SiteStatus>>) () -> globalXSiteAdmin.globalStatus());", "originalCommit": "ccefdd1e4d536c153f5a4b03eac3f503bd8e1fe1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0780cc0178cc83265ebcedf3d4fa4b22a0f2d144", "chunk": "diff --git a/server/rest/src/main/java/org/infinispan/rest/resources/XSiteResource.java b/server/rest/src/main/java/org/infinispan/rest/resources/XSiteResource.java\nindex ebc38f41b3..1849698b00 100644\n--- a/server/rest/src/main/java/org/infinispan/rest/resources/XSiteResource.java\n+++ b/server/rest/src/main/java/org/infinispan/rest/resources/XSiteResource.java\n\n@@ -119,7 +119,7 @@ public Invocations getInvocations() {\n       if (globalXSiteAdmin == null) return CompletableFuture.completedFuture(responseBuilder.status(NOT_FOUND).build());\n \n       return CompletableFuture.supplyAsync(() -> {\n-         Map<String, SiteStatus> globalStatus = Security.doAs(request.getSubject(), (PrivilegedAction<Map<String, SiteStatus>>) () -> globalXSiteAdmin.globalStatus());\n+         Map<String, SiteStatus> globalStatus = Security.doAs(request.getSubject(), (PrivilegedAction<Map<String, SiteStatus>>) globalXSiteAdmin::globalStatus);\n          Map<String, GlobalStatus> collect = globalStatus.entrySet().stream().collect(Collectors.toMap(Entry::getKey, e -> {\n             SiteStatus status = e.getValue();\n             if (status instanceof OnlineSiteStatus) return GlobalStatus.ONLINE;\n"}}, {"oid": "0780cc0178cc83265ebcedf3d4fa4b22a0f2d144", "url": "https://github.com/infinispan/infinispan/commit/0780cc0178cc83265ebcedf3d4fa4b22a0f2d144", "message": "ISPN-12498 Check authorization on backup manager ops", "committedDate": "2020-11-18T12:50:26Z", "type": "forcePushed"}, {"oid": "3a1cb95275a3e8b347d0da175bfcccf438b14dbd", "url": "https://github.com/infinispan/infinispan/commit/3a1cb95275a3e8b347d0da175bfcccf438b14dbd", "message": "ISPN-12498 Check authorization on backup manager ops", "committedDate": "2020-11-18T17:13:22Z", "type": "forcePushed"}, {"oid": "84b02f5dcde40b3c4bd873bc5395fefe03fe8051", "url": "https://github.com/infinispan/infinispan/commit/84b02f5dcde40b3c4bd873bc5395fefe03fe8051", "message": "ISPN-12498 Check authorization on backup manager ops", "committedDate": "2020-11-19T10:56:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc0NjU1Ng==", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r526746556", "bodyText": "nit: remove extra spaces :)", "author": "pruivo", "createdAt": "2020-11-19T10:19:16Z", "path": "core/src/main/java/org/infinispan/security/Security.java", "diffHunk": "@@ -107,25 +125,13 @@ private static boolean isTrustedClass(Class<?> klass) {\n    public static <T> T doAs(final Subject subject,\n          final java.security.PrivilegedExceptionAction<T> action)\n          throws java.security.PrivilegedActionException {\n-      Deque<Subject> stack = SUBJECT.get();\n-      if (stack == null) {\n-         stack = new ArrayDeque<>();\n-         SUBJECT.set(stack);\n-      }\n-      if (subject != null) {\n-         stack.push(subject);\n-      }\n+      Deque<Subject> stack = pre(subject);\n       try {\n          return action.run();\n       } catch (Exception e) {\n-         throw new PrivilegedActionException(e);\n+            throw new PrivilegedActionException(e);", "originalCommit": "3a1cb95275a3e8b347d0da175bfcccf438b14dbd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a53cd50a4d560c7f7281ee1eed58077c264d5303", "chunk": "diff --git a/core/src/main/java/org/infinispan/security/Security.java b/core/src/main/java/org/infinispan/security/Security.java\nindex 430bdd5b29..72529cce23 100644\n--- a/core/src/main/java/org/infinispan/security/Security.java\n+++ b/core/src/main/java/org/infinispan/security/Security.java\n\n@@ -117,25 +116,24 @@ public static void doAs(final Subject subject, final Runnable action) {\n    }\n \n    /**\n-    * A \"lightweight\" implementation of {@link Subject#doAs(Subject, PrivilegedExceptionAction)} which uses a ThreadLocal\n-    * {@link Subject} instead of modifying the current {@link AccessControlContext}.\n+    * A \"lightweight\" implementation of {@link Subject#doAs(Subject, PrivilegedExceptionAction)} which uses a\n+    * ThreadLocal {@link Subject} instead of modifying the current {@link AccessControlContext}.\n     *\n     * @see Subject#doAs(Subject, PrivilegedExceptionAction)\n     */\n    public static <T> T doAs(final Subject subject,\n-         final java.security.PrivilegedExceptionAction<T> action)\n+                            final java.security.PrivilegedExceptionAction<T> action)\n          throws java.security.PrivilegedActionException {\n       Deque<Subject> stack = pre(subject);\n       try {\n          return action.run();\n       } catch (Exception e) {\n-            throw new PrivilegedActionException(e);\n+         throw new PrivilegedActionException(e);\n       } finally {\n          post(subject, stack);\n       }\n    }\n \n-\n    public static void checkPermission(CachePermission permission) throws AccessControlException {\n       if (!isPrivileged()) {\n          throw new AccessControlException(\"Call from unprivileged code\", permission);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc1OTA5OQ==", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r526759099", "bodyText": "missing check in org.infinispan.query.impl.massindex.DistributedExecutorMassIndexer#run(java.lang.Object...). it doesn't use executeInternal().\nNot sure if it is worth to protect org.infinispan.query.impl.massindex.DistributedExecutorMassIndexer#isRunning()", "author": "pruivo", "createdAt": "2020-11-19T10:38:59Z", "path": "query/src/main/java/org/infinispan/query/impl/massindex/DistributedExecutorMassIndexer.java", "diffHunk": "@@ -60,6 +63,7 @@ public DistributedExecutorMassIndexer(AdvancedCache<?, ?> cache, KeyTransformati\n       this.blockingManager = cache.getCacheManager().getGlobalComponentRegistry()\n             .getComponent(BlockingManager.class);\n       this.lock = MassIndexerLockFactory.buildLock(cache);\n+      this.authorizationHelper = cache.getComponentRegistry().getComponent(AuthorizationHelper.class);", "originalCommit": "3a1cb95275a3e8b347d0da175bfcccf438b14dbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc4MjExOQ==", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r526782119", "bodyText": "I'll protect it anyway", "author": "tristantarrant", "createdAt": "2020-11-19T11:15:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc1OTA5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQxMDU1Mw==", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r530410553", "bodyText": "are you going to protect isRunning()?", "author": "pruivo", "createdAt": "2020-11-25T14:23:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc1OTA5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQxMTgwMA==", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r530411800", "bodyText": "I did that initially, but it breaks the cache info. Since it's just a read-only trait which doesn't expose any private info, it is safe as it is.", "author": "tristantarrant", "createdAt": "2020-11-25T14:25:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc1OTA5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "0a4e9a0171dae0740fa4b98ed4c24b1adde16e1a", "chunk": "diff --git a/query/src/main/java/org/infinispan/query/impl/massindex/DistributedExecutorMassIndexer.java b/query/src/main/java/org/infinispan/query/impl/massindex/DistributedExecutorMassIndexer.java\nindex 90762779d4..c446c397e9 100644\n--- a/query/src/main/java/org/infinispan/query/impl/massindex/DistributedExecutorMassIndexer.java\n+++ b/query/src/main/java/org/infinispan/query/impl/massindex/DistributedExecutorMassIndexer.java\n\n@@ -63,7 +60,6 @@ public DistributedExecutorMassIndexer(AdvancedCache<?, ?> cache, KeyTransformati\n       this.blockingManager = cache.getCacheManager().getGlobalComponentRegistry()\n             .getComponent(BlockingManager.class);\n       this.lock = MassIndexerLockFactory.buildLock(cache);\n-      this.authorizationHelper = cache.getComponentRegistry().getComponent(AuthorizationHelper.class);\n    }\n \n    @ManagedOperation(description = \"Starts rebuilding the index\", displayName = \"Rebuild index\")\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc1OTcyNw==", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r526759727", "bodyText": "isn't this overkill? could invoke the method directly in AuthorizationHelper", "author": "pruivo", "createdAt": "2020-11-19T10:39:58Z", "path": "query/src/main/java/org/infinispan/query/impl/massindex/SecurityActions.java", "diffHunk": "@@ -32,4 +34,8 @@ private SecurityActions() {\n          return cache;\n       }\n    }\n+\n+   static void checkPermission(AuthorizationHelper authorizationHelper, AuthorizationPermission permission) {", "originalCommit": "3a1cb95275a3e8b347d0da175bfcccf438b14dbd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a53cd50a4d560c7f7281ee1eed58077c264d5303", "chunk": "diff --git a/query/src/main/java/org/infinispan/query/impl/massindex/SecurityActions.java b/query/src/main/java/org/infinispan/query/impl/massindex/SecurityActions.java\nindex d521b5922d..448d34148d 100644\n--- a/query/src/main/java/org/infinispan/query/impl/massindex/SecurityActions.java\n+++ b/query/src/main/java/org/infinispan/query/impl/massindex/SecurityActions.java\n\n@@ -34,8 +32,4 @@ private SecurityActions() {\n          return cache;\n       }\n    }\n-\n-   static void checkPermission(AuthorizationHelper authorizationHelper, AuthorizationPermission permission) {\n-      authorizationHelper.checkPermission(permission);\n-   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc3MjMyNQ==", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r526772325", "bodyText": "Missing test annotation.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               public void testRestNonAdminsMustNotAccessBackupsAndRestores() {\n          \n          \n            \n               @Test\n          \n          \n            \n               public void testRestNonAdminsMustNotAccessBackupsAndRestores() {", "author": "pruivo", "createdAt": "2020-11-19T10:59:28Z", "path": "server/tests/src/test/java/org/infinispan/server/security/authorization/AbstractAuthorization.java", "diffHunk": "@@ -207,6 +208,98 @@ public void testAnonymousHealthPredefinedCache() {\n       assertEquals(\"HEALTHY\", sync(client.cacheManager(\"default\").healthStatus()).getBody());\n    }\n \n+   @Test\n+   public void testRestNonAdminsMustNotShutdownServer() {\n+      for (String user : Arrays.asList(\"reader\", \"writer\", \"supervisor\")) {\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().server().stop()).getStatus());\n+      }\n+   }\n+\n+   @Test\n+   public void testRestNonAdminsMustNotShutdownCluster() {\n+      for (String user : Arrays.asList(\"reader\", \"writer\", \"supervisor\")) {\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().cluster().stop()).getStatus());\n+      }\n+   }\n+\n+   @Test\n+   public void testRestNonAdminsMustNotModifyCacheIgnores() {\n+      for (String user : Arrays.asList(\"reader\", \"writer\", \"supervisor\")) {\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().server().ignoreCache(\"default\", \"predefined\")).getStatus());\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().server().unIgnoreCache(\"default\", \"predefined\")).getStatus());\n+      }\n+   }\n+\n+   @Test\n+   public void testRestAdminsShouldBeAbleToModifyLoggers() {\n+      assertEquals(204, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(\"admin\")).get().server().logging().setLogger(\"org.infinispan.TEST_LOGGER\", \"ERROR\", \"STDOUT\")).getStatus());\n+      assertEquals(204, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(\"admin\")).get().server().logging().removeLogger(\"org.infinispan.TEST_LOGGER\")).getStatus());\n+   }\n+\n+   @Test\n+   public void testRestNonAdminsMustNotModifyLoggers() {\n+      for (String user : Arrays.asList(\"reader\", \"writer\", \"supervisor\")) {\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().server().logging().setLogger(\"org.infinispan.TEST_LOGGER\", \"ERROR\", \"STDOUT\")).getStatus());\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().server().logging().removeLogger(\"org.infinispan.TEST_LOGGER\")).getStatus());\n+      }\n+   }\n+\n+   @Test\n+   public void testRestNonAdminsMustNotObtainReport() {\n+      for (String user : Arrays.asList(\"reader\", \"writer\", \"supervisor\")) {\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().server().report()).getStatus());\n+      }\n+   }\n+\n+   @Test\n+   public void testRestNonAdminsMustNotAccessPerformXSiteOps() {\n+      for (String user : Arrays.asList(\"reader\", \"writer\", \"supervisor\")) {\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().cache(\"xsite\").takeSiteOffline(\"NYC\")).getStatus());\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().cache(\"xsite\").bringSiteOnline(\"NYC\")).getStatus());\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().cache(\"xsite\").cancelPushState(\"NYC\")).getStatus());\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().cache(\"xsite\").cancelReceiveState(\"NYC\")).getStatus());\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().cache(\"xsite\").clearPushStateStatus()).getStatus());\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().cache(\"xsite\").pushSiteState(\"NYC\")).getStatus());\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().cache(\"xsite\").pushStateStatus()).getStatus());\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().cache(\"xsite\").xsiteBackups()).getStatus());\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().cache(\"xsite\").backupStatus(\"NYC\")).getStatus());\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().cache(\"xsite\").getXSiteTakeOfflineConfig(\"NYC\")).getStatus());\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().cache(\"xsite\").updateXSiteTakeOfflineConfig(\"NYC\", 10, 1000)).getStatus());\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().cacheManager(\"default\").bringBackupOnline(\"NYC\")).getStatus());\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().cacheManager(\"default\").takeOffline(\"NYC\")).getStatus());\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().cacheManager(\"default\").backupStatuses()).getStatus());\n+      }\n+   }\n+\n+   @Test\n+   public void testRestNonAdminsMustNotPerformSearchActions() {\n+      String schema = Exceptions.unchecked(() -> Util.getResourceAsString(\"/sample_bank_account/bank.proto\", this.getClass().getClassLoader()));\n+      assertEquals(200, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(\"admin\")).get().schemas().put(\"bank.proto\", schema)).getStatus());\n+      org.infinispan.configuration.cache.ConfigurationBuilder builder = new org.infinispan.configuration.cache.ConfigurationBuilder();\n+      builder.indexing().enable().addIndexedEntity(\"sample_bank_account.User\");\n+      getServerTest().rest().withClientConfiguration(restBuilders.get(\"admin\")).withServerConfiguration(builder).create();\n+      String indexedCache = getServerTest().getMethodName();\n+\n+      for (String user : Arrays.asList(\"reader\", \"writer\", \"supervisor\")) {\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().cache(indexedCache).clearSearchStats()).getStatus());\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().cache(indexedCache).reindex()).getStatus());\n+         assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().cache(indexedCache).clearIndex()).getStatus());\n+      }\n+   }\n+\n+   public void testRestNonAdminsMustNotAccessBackupsAndRestores() {", "originalCommit": "84b02f5dcde40b3c4bd873bc5395fefe03fe8051", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a53cd50a4d560c7f7281ee1eed58077c264d5303", "chunk": "diff --git a/server/tests/src/test/java/org/infinispan/server/security/authorization/AbstractAuthorization.java b/server/tests/src/test/java/org/infinispan/server/security/authorization/AbstractAuthorization.java\nindex 9aaa46e720..876179de83 100644\n--- a/server/tests/src/test/java/org/infinispan/server/security/authorization/AbstractAuthorization.java\n+++ b/server/tests/src/test/java/org/infinispan/server/security/authorization/AbstractAuthorization.java\n\n@@ -287,6 +287,7 @@ public void testRestNonAdminsMustNotPerformSearchActions() {\n       }\n    }\n \n+   @Test\n    public void testRestNonAdminsMustNotAccessBackupsAndRestores() {\n       for (String user : Arrays.asList(\"reader\", \"writer\", \"supervisor\")) {\n          assertEquals(403, sync(getServerTest().rest().withClientConfiguration(restBuilders.get(user)).get().cluster().createBackup(\"backup\")).getStatus());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc3NjU5Mw==", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r526776593", "bodyText": "wait!? is this correct? username equals to password?", "author": "pruivo", "createdAt": "2020-11-19T11:06:28Z", "path": "server/rest/src/test/java/org/infinispan/rest/resources/security/SimpleSecurityDomain.java", "diffHunk": "@@ -1,24 +1,30 @@\n package org.infinispan.rest.resources.security;\n \n+import java.util.HashMap;\n+import java.util.Map;\n+\n import javax.security.auth.Subject;\n \n import org.infinispan.rest.authentication.SecurityDomain;\n \n /**\n- * Security domain that returns always the same subject\n+ * Security domain that supports a simple map of subjects\n  */\n public class SimpleSecurityDomain implements SecurityDomain {\n \n-   private final Subject subject;\n+   private final Map<String, Subject> subjects;\n \n-   public SimpleSecurityDomain(Subject subject) {\n-      this.subject = subject;\n+   public SimpleSecurityDomain(Subject... subjects) {\n+      this.subjects = new HashMap<>(subjects.length);\n+      for (Subject subject : subjects) {\n+         this.subjects.put(subject.getPrincipals().iterator().next().getName().toLowerCase(), subject);\n+      }\n    }\n \n    @Override\n    public Subject authenticate(String username, String password) throws SecurityException {\n       if (username.equals(password)) {", "originalCommit": "84b02f5dcde40b3c4bd873bc5395fefe03fe8051", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc3NzcyOA==", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r526777728", "bodyText": "It's a test :)", "author": "tristantarrant", "createdAt": "2020-11-19T11:08:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc3NjU5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc4MTU0Ng==", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r526781546", "bodyText": "I'll blame the coffee. it takes time to kick in \ud83e\udd23", "author": "pruivo", "createdAt": "2020-11-19T11:14:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc3NjU5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "0a4e9a0171dae0740fa4b98ed4c24b1adde16e1a", "chunk": "diff --git a/server/rest/src/test/java/org/infinispan/rest/resources/security/SimpleSecurityDomain.java b/server/rest/src/test/java/org/infinispan/rest/resources/security/SimpleSecurityDomain.java\nindex d49674a9a4..8c306f0761 100644\n--- a/server/rest/src/test/java/org/infinispan/rest/resources/security/SimpleSecurityDomain.java\n+++ b/server/rest/src/test/java/org/infinispan/rest/resources/security/SimpleSecurityDomain.java\n\n@@ -1,30 +1,24 @@\n package org.infinispan.rest.resources.security;\n \n-import java.util.HashMap;\n-import java.util.Map;\n-\n import javax.security.auth.Subject;\n \n import org.infinispan.rest.authentication.SecurityDomain;\n \n /**\n- * Security domain that supports a simple map of subjects\n+ * Security domain that returns always the same subject\n  */\n public class SimpleSecurityDomain implements SecurityDomain {\n \n-   private final Map<String, Subject> subjects;\n+   private final Subject subject;\n \n-   public SimpleSecurityDomain(Subject... subjects) {\n-      this.subjects = new HashMap<>(subjects.length);\n-      for (Subject subject : subjects) {\n-         this.subjects.put(subject.getPrincipals().iterator().next().getName().toLowerCase(), subject);\n-      }\n+   public SimpleSecurityDomain(Subject subject) {\n+      this.subject = subject;\n    }\n \n    @Override\n    public Subject authenticate(String username, String password) throws SecurityException {\n       if (username.equals(password)) {\n-         return subjects.get(username);\n+         return subject;\n       }\n       return null;\n    }\n"}}, {"oid": "a53cd50a4d560c7f7281ee1eed58077c264d5303", "url": "https://github.com/infinispan/infinispan/commit/a53cd50a4d560c7f7281ee1eed58077c264d5303", "message": "ISPN-12498 Check authorization on backup manager ops", "committedDate": "2020-11-19T11:18:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgxMDA5Nw==", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r526810097", "bodyText": "why is this required? the cache already contains the subject (via Cache.withSubject())", "author": "pruivo", "createdAt": "2020-11-19T11:55:32Z", "path": "server/rest/src/main/java/org/infinispan/rest/resources/SearchAdminResource.java", "diffHunk": "@@ -108,7 +109,7 @@ public Invocations getInvocations() {\n          throw new CacheException(\"NotImplemented\");\n       } else {\n          SearchStatistics searchStatistics = Search.getSearchStatistics(cache);\n-         searchStatistics.getQueryStatistics().clear();\n+         Security.doAs(restRequest.getSubject(), () -> searchStatistics.getQueryStatistics().clear());", "originalCommit": "a53cd50a4d560c7f7281ee1eed58077c264d5303", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkyOTU0Ng==", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r526929546", "bodyText": "Because that doesn't carry across to the SearchStatistics object", "author": "tristantarrant", "createdAt": "2020-11-19T14:29:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgxMDA5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "0a4e9a0171dae0740fa4b98ed4c24b1adde16e1a", "chunk": "diff --git a/server/rest/src/main/java/org/infinispan/rest/resources/SearchAdminResource.java b/server/rest/src/main/java/org/infinispan/rest/resources/SearchAdminResource.java\nindex 8455c772b8..3bf4d5e984 100644\n--- a/server/rest/src/main/java/org/infinispan/rest/resources/SearchAdminResource.java\n+++ b/server/rest/src/main/java/org/infinispan/rest/resources/SearchAdminResource.java\n\n@@ -109,7 +108,7 @@ public Invocations getInvocations() {\n          throw new CacheException(\"NotImplemented\");\n       } else {\n          SearchStatistics searchStatistics = Search.getSearchStatistics(cache);\n-         Security.doAs(restRequest.getSubject(), () -> searchStatistics.getQueryStatistics().clear());\n+         searchStatistics.getQueryStatistics().clear();\n          return completedFuture(responseBuilder.build());\n       }\n    }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgxMTE5Mw==", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r526811193", "bodyText": "shouldn't this be invoked only when security==false?", "author": "pruivo", "createdAt": "2020-11-19T11:57:22Z", "path": "server/rest/src/test/java/org/infinispan/rest/resources/CacheV2ResourceTest.java", "diffHunk": "@@ -643,6 +644,11 @@ public void testSearchStatistics() {\n \n       // Clear all stats\n       RestResponse response = join(cacheClient.clearSearchStats());", "originalCommit": "a53cd50a4d560c7f7281ee1eed58077c264d5303", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg2NDgxNA==", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r526864814", "bodyText": "All of the tests rely on zeroed stats so it needs to be called.", "author": "tristantarrant", "createdAt": "2020-11-19T13:05:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgxMTE5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjkzMDQ2Mg==", "url": "https://github.com/infinispan/infinispan/pull/8856#discussion_r526930462", "bodyText": "true, but you are invoked clearSearchStats() twice when security==true; here and other as \"admin\"", "author": "pruivo", "createdAt": "2020-11-19T14:30:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgxMTE5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "0a4e9a0171dae0740fa4b98ed4c24b1adde16e1a", "chunk": "diff --git a/server/rest/src/test/java/org/infinispan/rest/resources/CacheV2ResourceTest.java b/server/rest/src/test/java/org/infinispan/rest/resources/CacheV2ResourceTest.java\nindex 0acf6f911a..775613d136 100644\n--- a/server/rest/src/test/java/org/infinispan/rest/resources/CacheV2ResourceTest.java\n+++ b/server/rest/src/test/java/org/infinispan/rest/resources/CacheV2ResourceTest.java\n\n@@ -644,11 +643,6 @@ public void testSearchStatistics() {\n \n       // Clear all stats\n       RestResponse response = join(cacheClient.clearSearchStats());\n-      if (security) {\n-         RestClient adminClient = RestClient.forConfiguration(getClientConfig().security().authentication().username(\"admin\").password(\"admin\").build());\n-         response = join(adminClient.cache(\"indexedCache\").clearSearchStats());\n-         Util.close(adminClient);\n-      }\n       ResponseAssertion.assertThat(response).isOk();\n       response = join(cacheClient.searchStats());\n       Json statJson = Json.read(response.getBody());\n"}}, {"oid": "88874ec4d7837a03920b74e041e0d13be60bef38", "url": "https://github.com/infinispan/infinispan/commit/88874ec4d7837a03920b74e041e0d13be60bef38", "message": "ISPN-12498 Check authorization on backup manager ops", "committedDate": "2020-11-19T14:13:48Z", "type": "forcePushed"}, {"oid": "ff5f00cb606470d76d129ec43d4a1e0287feea2f", "url": "https://github.com/infinispan/infinispan/commit/ff5f00cb606470d76d129ec43d4a1e0287feea2f", "message": "ISPN-12498 Check authorization on backup manager ops", "committedDate": "2020-11-24T16:47:18Z", "type": "forcePushed"}, {"oid": "0a4e9a0171dae0740fa4b98ed4c24b1adde16e1a", "url": "https://github.com/infinispan/infinispan/commit/0a4e9a0171dae0740fa4b98ed4c24b1adde16e1a", "message": "ISPN-12498 Check authorization on server management ops", "committedDate": "2020-11-25T07:56:33Z", "type": "commit"}, {"oid": "6dfcd56e6f1346351fd56b2a37cc8f05493ea3a5", "url": "https://github.com/infinispan/infinispan/commit/6dfcd56e6f1346351fd56b2a37cc8f05493ea3a5", "message": "ISPN-12498 Check authorization on search actions", "committedDate": "2020-11-25T07:56:33Z", "type": "commit"}, {"oid": "38ebb5bf74eab2d591a332b091d9a36facc750d6", "url": "https://github.com/infinispan/infinispan/commit/38ebb5bf74eab2d591a332b091d9a36facc750d6", "message": "ISPN-12498 Check authorization on backup manager ops", "committedDate": "2020-11-25T07:56:33Z", "type": "commit"}, {"oid": "38ebb5bf74eab2d591a332b091d9a36facc750d6", "url": "https://github.com/infinispan/infinispan/commit/38ebb5bf74eab2d591a332b091d9a36facc750d6", "message": "ISPN-12498 Check authorization on backup manager ops", "committedDate": "2020-11-25T07:56:33Z", "type": "forcePushed"}]}