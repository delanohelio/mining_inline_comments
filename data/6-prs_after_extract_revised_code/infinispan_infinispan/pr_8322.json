{"pr_number": 8322, "pr_title": "ISPN-11830 Provide invocation based non blocking detection to test suite", "pr_createdAt": "2020-05-14T18:33:22Z", "pr_url": "https://github.com/infinispan/infinispan/pull/8322", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM2MDIzNQ==", "url": "https://github.com/infinispan/infinispan/pull/8322#discussion_r425360235", "bodyText": "wouldn't be more useful to have this logic in commons-tests?\nprobably in CommonsTestingUtil... or create a BlockHoundUtil class?\nwdyt?", "author": "pruivo", "createdAt": "2020-05-14T18:52:52Z", "path": "core/src/test/java/org/infinispan/test/AbstractInfinispanTest.java", "diffHunk": "@@ -185,6 +186,51 @@ protected void killSpawnedThreads() {\n       }\n    }\n \n+   /**", "originalCommit": "ab75d6b7e572ed382a53c82011bb07eece1513ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM2MjM2OA==", "url": "https://github.com/infinispan/infinispan/pull/8322#discussion_r425362368", "bodyText": "Sure, I can add it to BlockHoundHelper and make the class public.", "author": "wburns", "createdAt": "2020-05-14T18:56:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM2MDIzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "cfaca6e752c8c55d3ec1a75992d600914afb754f", "chunk": "diff --git a/core/src/test/java/org/infinispan/test/AbstractInfinispanTest.java b/core/src/test/java/org/infinispan/test/AbstractInfinispanTest.java\nindex b6f42e48af..24b8129f12 100644\n--- a/core/src/test/java/org/infinispan/test/AbstractInfinispanTest.java\n+++ b/core/src/test/java/org/infinispan/test/AbstractInfinispanTest.java\n\n@@ -186,51 +185,6 @@ protected void killSpawnedThreads() {\n       }\n    }\n \n-   /**\n-    * Returns true if the current thread at this time requires all invocations to be non blocking\n-    */\n-   public static boolean currentThreadRequiresNonBlocking() {\n-      return isNonBlocking.get() == Boolean.TRUE;\n-   }\n-\n-   private static final ThreadLocal<Boolean> isNonBlocking = ThreadLocal.withInitial(() -> Boolean.FALSE);\n-\n-   /**\n-    * Invokes the provided Supplier in a scope that guarantees that the current thread is not blocked. If blocking is\n-    * found the invoking test will fail.\n-    */\n-   public static <V> V ensureNonBlocking(Supplier<V> supplier) {\n-      Boolean previousSetting = isNonBlocking.get();\n-      isNonBlocking.set(Boolean.TRUE);\n-      try {\n-         return supplier.get();\n-      } finally {\n-         isNonBlocking.set(previousSetting);\n-      }\n-   }\n-\n-   /**\n-    * Invokes the provided Runnable in a scope that guarantees that the current thread is not blocked. If blocking is\n-    * found the invoking test will fail.\n-    */\n-   public static void ensureNonBlocking(Runnable runnable) {\n-      Boolean previousSetting = isNonBlocking.get();\n-      isNonBlocking.set(Boolean.TRUE);\n-      try {\n-         runnable.run();\n-      } finally {\n-         isNonBlocking.set(previousSetting);\n-      }\n-   }\n-\n-   /**\n-    * Returns an Executor that when supplied a task, will guarantee that task does not block when invoked. If the\n-    * task does block it will fail the invoking test.\n-    */\n-   public static Executor ensureNonBlockingExecutor() {\n-      return AbstractInfinispanTest::ensureNonBlocking;\n-   }\n-\n    @AfterMethod\n    protected void checkThreads() {\n       int activeTasks = testExecutor.getActiveCount();\n"}}, {"oid": "cfaca6e752c8c55d3ec1a75992d600914afb754f", "url": "https://github.com/infinispan/infinispan/commit/cfaca6e752c8c55d3ec1a75992d600914afb754f", "message": "ISPN-11830 Provide invocation based non blocking detection to test suite", "committedDate": "2020-05-14T18:59:14Z", "type": "commit"}, {"oid": "cfaca6e752c8c55d3ec1a75992d600914afb754f", "url": "https://github.com/infinispan/infinispan/commit/cfaca6e752c8c55d3ec1a75992d600914afb754f", "message": "ISPN-11830 Provide invocation based non blocking detection to test suite", "committedDate": "2020-05-14T18:59:14Z", "type": "forcePushed"}]}