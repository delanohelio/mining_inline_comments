{"pr_number": 8331, "pr_title": "ISPN-11803 Move Optimistic Transaction versions to PrivateMetadata", "pr_createdAt": "2020-05-15T15:30:39Z", "pr_url": "https://github.com/infinispan/infinispan/pull/8331", "timeline": [{"oid": "13d1302f423b7686e7334146a2633adacbf2517b", "url": "https://github.com/infinispan/infinispan/commit/13d1302f423b7686e7334146a2633adacbf2517b", "message": "ISPN-11803 Move Optimistic Transaction versions to PrivateMetadata", "committedDate": "2020-05-18T07:51:43Z", "type": "forcePushed"}, {"oid": "4a083c2c56af77389e2d11312c22ccd1c2889ddb", "url": "https://github.com/infinispan/infinispan/commit/4a083c2c56af77389e2d11312c22ccd1c2889ddb", "message": "ISPN-11803 Move Optimistic Transaction versions to PrivateMetadata", "committedDate": "2020-05-18T10:03:33Z", "type": "forcePushed"}, {"oid": "823971d09b68fe0ce448a20d70e7757b2656d808", "url": "https://github.com/infinispan/infinispan/commit/823971d09b68fe0ce448a20d70e7757b2656d808", "message": "ISPN-11803 Move Optimistic Transaction versions to PrivateMetadata", "committedDate": "2020-05-18T15:40:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1Mjk5OA==", "url": "https://github.com/infinispan/infinispan/pull/8331#discussion_r426852998", "bodyText": "You can do something like this instead\nhttps://github.com/infinispan/infinispan/blob/master/core/src/test/java/org/infinispan/expiration/impl/ClusterExpirationFunctionalTest.java#L59", "author": "wburns", "createdAt": "2020-05-18T19:40:43Z", "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/tx/APITxTest.java", "diffHunk": "@@ -60,17 +58,19 @@\n \n    @Override\n    public Object[] factory() {\n-      return new Object[]{\n-            new APITxTest<byte[], byte[]>().keyValueGenerator(BYTE_ARRAY_GENERATOR).transactionMode(NON_XA),\n-            new APITxTest<byte[], byte[]>().keyValueGenerator(BYTE_ARRAY_GENERATOR).transactionMode(NON_DURABLE_XA),\n-            new APITxTest<byte[], byte[]>().keyValueGenerator(BYTE_ARRAY_GENERATOR).transactionMode(FULL_XA),\n-            new APITxTest<String, String>().keyValueGenerator(STRING_GENERATOR).transactionMode(NON_XA),\n-            new APITxTest<String, String>().keyValueGenerator(STRING_GENERATOR).transactionMode(NON_DURABLE_XA),\n-            new APITxTest<String, String>().keyValueGenerator(STRING_GENERATOR).transactionMode(FULL_XA),\n-            new APITxTest<Object[], Object[]>().keyValueGenerator(GENERIC_ARRAY_GENERATOR).transactionMode(NON_XA).javaSerialization(),\n-            new APITxTest<Object[], Object[]>().keyValueGenerator(GENERIC_ARRAY_GENERATOR).transactionMode(NON_DURABLE_XA).javaSerialization(),\n-            new APITxTest<Object[], Object[]>().keyValueGenerator(GENERIC_ARRAY_GENERATOR).transactionMode(FULL_XA).javaSerialization()\n-      };\n+      List<Object> tests = new ArrayList<>(3 * 3 * 2);", "originalCommit": "823971d09b68fe0ce448a20d70e7757b2656d808", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e2e154dac5aa79c16868ba70a0fffbd8b208725f", "chunk": "diff --git a/client/hotrod-client/src/test/java/org/infinispan/client/hotrod/tx/APITxTest.java b/client/hotrod-client/src/test/java/org/infinispan/client/hotrod/tx/APITxTest.java\nindex 1027faeae3..17e4898ac6 100644\n--- a/client/hotrod-client/src/test/java/org/infinispan/client/hotrod/tx/APITxTest.java\n+++ b/client/hotrod-client/src/test/java/org/infinispan/client/hotrod/tx/APITxTest.java\n\n@@ -58,19 +60,23 @@\n \n    @Override\n    public Object[] factory() {\n-      List<Object> tests = new ArrayList<>(3 * 3 * 2);\n-      for (TransactionMode txMode : TransactionMode.values()) {\n-         if (txMode == NONE) {\n-            continue;\n-         }\n-         for (LockingMode lockingMode : LockingMode.values()) {\n-            tests.add(new APITxTest<byte[], byte[]>().keyValueGenerator(BYTE_ARRAY_GENERATOR).transactionMode(txMode).lockingMode(lockingMode));\n-            tests.add(new APITxTest<String, String>().keyValueGenerator(STRING_GENERATOR).transactionMode(txMode).lockingMode(lockingMode));\n-            tests.add(new APITxTest<Object[], Object[]>().keyValueGenerator(GENERIC_ARRAY_GENERATOR).transactionMode(txMode).javaSerialization().lockingMode(lockingMode));\n-\n-         }\n-      }\n-      return tests.toArray();\n+      return Arrays.stream(TransactionMode.values())\n+            .filter(tMode -> tMode != NONE)\n+            .flatMap(txMode -> Arrays.stream(LockingMode.values())\n+                  .flatMap(lockingMode -> Stream.builder()\n+                        .add(new APITxTest<byte[], byte[]>()\n+                              .keyValueGenerator(BYTE_ARRAY_GENERATOR)\n+                              .transactionMode(txMode)\n+                              .lockingMode(lockingMode))\n+                        .add(new APITxTest<String, String>()\n+                              .keyValueGenerator(STRING_GENERATOR)\n+                              .transactionMode(txMode)\n+                              .lockingMode(lockingMode))\n+                        .add(new APITxTest<Object[], Object[]>()\n+                              .keyValueGenerator(GENERIC_ARRAY_GENERATOR).javaSerialization()\n+                              .transactionMode(txMode)\n+                              .lockingMode(lockingMode))\n+                        .build())).toArray();\n    }\n \n    @AfterMethod(alwaysRun = true)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1MzE0NQ==", "url": "https://github.com/infinispan/infinispan/pull/8331#discussion_r426853145", "bodyText": "Nitpick: Unneeded space", "author": "wburns", "createdAt": "2020-05-18T19:41:00Z", "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/tx/APITxTest.java", "diffHunk": "@@ -414,16 +414,13 @@ private void checkNoKeys(List<K> keys, List<V> values, boolean inTx) {\n    }\n \n    private void checkInitValue(List<K> keys, List<V> values) {\n-      checkInitValue(keys, values, true);\n-   }\n-\n-   private void checkInitValue(List<K> keys, List<V> values, boolean inTx) {\n       RemoteCache<K, V> cache = txRemoteCache();\n       for (int i = 0; i < keys.size(); ++i) {\n          kvGenerator.assertValueEquals(values.get(i), cache.get(keys.get(i)));\n       }\n    }\n \n+", "originalCommit": "823971d09b68fe0ce448a20d70e7757b2656d808", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e2e154dac5aa79c16868ba70a0fffbd8b208725f", "chunk": "diff --git a/client/hotrod-client/src/test/java/org/infinispan/client/hotrod/tx/APITxTest.java b/client/hotrod-client/src/test/java/org/infinispan/client/hotrod/tx/APITxTest.java\nindex 1027faeae3..17e4898ac6 100644\n--- a/client/hotrod-client/src/test/java/org/infinispan/client/hotrod/tx/APITxTest.java\n+++ b/client/hotrod-client/src/test/java/org/infinispan/client/hotrod/tx/APITxTest.java\n\n@@ -420,7 +426,6 @@ private void checkInitValue(List<K> keys, List<V> values) {\n       }\n    }\n \n-\n    private void secondHalfDataCheck(List<K> keys, List<V> values, boolean inTx) {\n       putDataCheck(keys, values.subList(keys.size(), values.size()), inTx);\n    }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1MzQ2MA==", "url": "https://github.com/infinispan/infinispan/pull/8331#discussion_r426853460", "bodyText": "Same here re: flatMap", "author": "wburns", "createdAt": "2020-05-18T19:41:41Z", "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/tx/MultipleCacheTxFunctionalTest.java", "diffHunk": "@@ -49,17 +49,19 @@\n \n    @Override\n    public Object[] factory() {\n-      return new Object[]{\n-            new MultipleCacheTxFunctionalTest<byte[], byte[]>().keyValueGenerator(BYTE_ARRAY_GENERATOR).transactionMode(NON_XA),\n-            new MultipleCacheTxFunctionalTest<byte[], byte[]>().keyValueGenerator(BYTE_ARRAY_GENERATOR).transactionMode(NON_DURABLE_XA),\n-            new MultipleCacheTxFunctionalTest<byte[], byte[]>().keyValueGenerator(BYTE_ARRAY_GENERATOR).transactionMode(FULL_XA),\n-            new MultipleCacheTxFunctionalTest<String, String>().keyValueGenerator(STRING_GENERATOR).transactionMode(NON_XA),\n-            new MultipleCacheTxFunctionalTest<String, String>().keyValueGenerator(STRING_GENERATOR).transactionMode(NON_DURABLE_XA),\n-            new MultipleCacheTxFunctionalTest<String, String>().keyValueGenerator(STRING_GENERATOR).transactionMode(FULL_XA),\n-            new MultipleCacheTxFunctionalTest<Object[], Object[]>().keyValueGenerator(GENERIC_ARRAY_GENERATOR).transactionMode(NON_XA).javaSerialization(),\n-            new MultipleCacheTxFunctionalTest<Object[], Object[]>().keyValueGenerator(GENERIC_ARRAY_GENERATOR).transactionMode(NON_DURABLE_XA).javaSerialization(),\n-            new MultipleCacheTxFunctionalTest<Object[], Object[]>().keyValueGenerator(GENERIC_ARRAY_GENERATOR).transactionMode(FULL_XA).javaSerialization()\n-      };\n+      List<Object> tests = new ArrayList<>(3 * 3 * 2);", "originalCommit": "823971d09b68fe0ce448a20d70e7757b2656d808", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e2e154dac5aa79c16868ba70a0fffbd8b208725f", "chunk": "diff --git a/client/hotrod-client/src/test/java/org/infinispan/client/hotrod/tx/MultipleCacheTxFunctionalTest.java b/client/hotrod-client/src/test/java/org/infinispan/client/hotrod/tx/MultipleCacheTxFunctionalTest.java\nindex 4c418b1ba4..9f1fedfeab 100644\n--- a/client/hotrod-client/src/test/java/org/infinispan/client/hotrod/tx/MultipleCacheTxFunctionalTest.java\n+++ b/client/hotrod-client/src/test/java/org/infinispan/client/hotrod/tx/MultipleCacheTxFunctionalTest.java\n\n@@ -49,19 +49,23 @@\n \n    @Override\n    public Object[] factory() {\n-      List<Object> tests = new ArrayList<>(3 * 3 * 2);\n-      for (TransactionMode txMode : TransactionMode.values()) {\n-         if (txMode == NONE) {\n-            continue;\n-         }\n-         for (LockingMode lockingMode : LockingMode.values()) {\n-            tests.add(new MultipleCacheTxFunctionalTest<byte[], byte[]>().keyValueGenerator(BYTE_ARRAY_GENERATOR).transactionMode(txMode).lockingMode(lockingMode));\n-            tests.add(new MultipleCacheTxFunctionalTest<String, String>().keyValueGenerator(STRING_GENERATOR).transactionMode(txMode).lockingMode(lockingMode));\n-            tests.add(new MultipleCacheTxFunctionalTest<Object[], Object[]>().keyValueGenerator(GENERIC_ARRAY_GENERATOR).transactionMode(txMode).javaSerialization().lockingMode(lockingMode));\n-\n-         }\n-      }\n-      return tests.toArray();\n+      return Arrays.stream(TransactionMode.values())\n+            .filter(tMode -> tMode != NONE)\n+            .flatMap(txMode -> Arrays.stream(LockingMode.values())\n+                  .flatMap(lockingMode -> Stream.builder()\n+                        .add(new MultipleCacheTxFunctionalTest<byte[], byte[]>()\n+                              .keyValueGenerator(BYTE_ARRAY_GENERATOR)\n+                              .transactionMode(txMode)\n+                              .lockingMode(lockingMode))\n+                        .add(new MultipleCacheTxFunctionalTest<String, String>()\n+                              .keyValueGenerator(STRING_GENERATOR)\n+                              .transactionMode(txMode)\n+                              .lockingMode(lockingMode))\n+                        .add(new MultipleCacheTxFunctionalTest<Object[], Object[]>()\n+                              .keyValueGenerator(GENERIC_ARRAY_GENERATOR).javaSerialization()\n+                              .transactionMode(txMode)\n+                              .lockingMode(lockingMode))\n+                        .build())).toArray();\n    }\n \n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1MzU4Nw==", "url": "https://github.com/infinispan/infinispan/pull/8331#discussion_r426853587", "bodyText": "Same here re: flatMap", "author": "wburns", "createdAt": "2020-05-18T19:41:57Z", "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/tx/TxFunctionalTest.java", "diffHunk": "@@ -52,17 +52,19 @@\n \n    @Override\n    public Object[] factory() {\n-      return new Object[]{\n-            new TxFunctionalTest<byte[], byte[]>().keyValueGenerator(BYTE_ARRAY_GENERATOR).transactionMode(NON_XA),\n-            new TxFunctionalTest<byte[], byte[]>().keyValueGenerator(BYTE_ARRAY_GENERATOR).transactionMode(NON_DURABLE_XA),\n-            new TxFunctionalTest<byte[], byte[]>().keyValueGenerator(BYTE_ARRAY_GENERATOR).transactionMode(FULL_XA),\n-            new TxFunctionalTest<String, String>().keyValueGenerator(STRING_GENERATOR).transactionMode(FULL_XA),\n-            new TxFunctionalTest<String, String>().keyValueGenerator(STRING_GENERATOR).transactionMode(NON_XA),\n-            new TxFunctionalTest<String, String>().keyValueGenerator(STRING_GENERATOR).transactionMode(NON_DURABLE_XA),\n-            new TxFunctionalTest<Object[], Object[]>().keyValueGenerator(GENERIC_ARRAY_GENERATOR).transactionMode(NON_XA).javaSerialization(),\n-            new TxFunctionalTest<Object[], Object[]>().keyValueGenerator(GENERIC_ARRAY_GENERATOR).transactionMode(NON_DURABLE_XA).javaSerialization(),\n-            new TxFunctionalTest<Object[], Object[]>().keyValueGenerator(GENERIC_ARRAY_GENERATOR).transactionMode(FULL_XA).javaSerialization()\n-      };\n+      List<Object> tests = new ArrayList<>(3 * 3 * 2);", "originalCommit": "823971d09b68fe0ce448a20d70e7757b2656d808", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e2e154dac5aa79c16868ba70a0fffbd8b208725f", "chunk": "diff --git a/client/hotrod-client/src/test/java/org/infinispan/client/hotrod/tx/TxFunctionalTest.java b/client/hotrod-client/src/test/java/org/infinispan/client/hotrod/tx/TxFunctionalTest.java\nindex 808501ab7a..4ce7aaa155 100644\n--- a/client/hotrod-client/src/test/java/org/infinispan/client/hotrod/tx/TxFunctionalTest.java\n+++ b/client/hotrod-client/src/test/java/org/infinispan/client/hotrod/tx/TxFunctionalTest.java\n\n@@ -52,19 +52,23 @@\n \n    @Override\n    public Object[] factory() {\n-      List<Object> tests = new ArrayList<>(3 * 3 * 2);\n-      for (TransactionMode txMode : TransactionMode.values()) {\n-         if (txMode == NONE) {\n-            continue;\n-         }\n-         for (LockingMode lockingMode : LockingMode.values()) {\n-            tests.add(new TxFunctionalTest<byte[], byte[]>().keyValueGenerator(BYTE_ARRAY_GENERATOR).transactionMode(txMode).lockingMode(lockingMode));\n-            tests.add(new TxFunctionalTest<String, String>().keyValueGenerator(STRING_GENERATOR).transactionMode(txMode).lockingMode(lockingMode));\n-            tests.add(new TxFunctionalTest<Object[], Object[]>().keyValueGenerator(GENERIC_ARRAY_GENERATOR).transactionMode(txMode).javaSerialization().lockingMode(lockingMode));\n-\n-         }\n-      }\n-      return tests.toArray();\n+      return Arrays.stream(TransactionMode.values())\n+            .filter(tMode -> tMode != NONE)\n+            .flatMap(txMode -> Arrays.stream(LockingMode.values())\n+                  .flatMap(lockingMode -> Stream.builder()\n+                        .add(new TxFunctionalTest<byte[], byte[]>()\n+                              .keyValueGenerator(BYTE_ARRAY_GENERATOR)\n+                              .transactionMode(txMode)\n+                              .lockingMode(lockingMode))\n+                        .add(new TxFunctionalTest<String, String>()\n+                              .keyValueGenerator(STRING_GENERATOR)\n+                              .transactionMode(txMode)\n+                              .lockingMode(lockingMode))\n+                        .add(new TxFunctionalTest<Object[], Object[]>()\n+                              .keyValueGenerator(GENERIC_ARRAY_GENERATOR).javaSerialization()\n+                              .transactionMode(txMode)\n+                              .lockingMode(lockingMode))\n+                        .build())).toArray();\n    }\n \n    @AfterMethod(alwaysRun = true)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg2MDY3NQ==", "url": "https://github.com/infinispan/infinispan/pull/8331#discussion_r426860675", "bodyText": "Same here re: flatMap", "author": "wburns", "createdAt": "2020-05-18T19:56:22Z", "path": "server/hotrod/src/test/java/org/infinispan/server/hotrod/tx/TopologyChangeFunctionalTest.java", "diffHunk": "@@ -48,18 +50,16 @@\n \n    @Override\n    public Object[] factory() {\n-      return new Object[]{\n-            //TODO add optimistic tests when supported!\n-            new TopologyChangeFunctionalTest()\n-                  .transactionMode(org.infinispan.configuration.cache.TransactionMode.NON_XA).lockingMode(\n-                  LockingMode.PESSIMISTIC),\n-            new TopologyChangeFunctionalTest()\n-                  .transactionMode(org.infinispan.configuration.cache.TransactionMode.NON_DURABLE_XA).lockingMode(\n-                  LockingMode.PESSIMISTIC),\n-            new TopologyChangeFunctionalTest()\n-                  .transactionMode(org.infinispan.configuration.cache.TransactionMode.FULL_XA).lockingMode(\n-                  LockingMode.PESSIMISTIC)\n-      };\n+      List<Object> tests = new ArrayList<>(3 * 2);", "originalCommit": "823971d09b68fe0ce448a20d70e7757b2656d808", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e2e154dac5aa79c16868ba70a0fffbd8b208725f", "chunk": "diff --git a/server/hotrod/src/test/java/org/infinispan/server/hotrod/tx/TopologyChangeFunctionalTest.java b/server/hotrod/src/test/java/org/infinispan/server/hotrod/tx/TopologyChangeFunctionalTest.java\nindex 5910429482..ff03f4d7e7 100644\n--- a/server/hotrod/src/test/java/org/infinispan/server/hotrod/tx/TopologyChangeFunctionalTest.java\n+++ b/server/hotrod/src/test/java/org/infinispan/server/hotrod/tx/TopologyChangeFunctionalTest.java\n\n@@ -50,16 +49,13 @@\n \n    @Override\n    public Object[] factory() {\n-      List<Object> tests = new ArrayList<>(3 * 2);\n-      for (org.infinispan.configuration.cache.TransactionMode txMode : org.infinispan.configuration.cache.TransactionMode.values()) {\n-         if (txMode == org.infinispan.configuration.cache.TransactionMode.NONE) {\n-            continue;\n-         }\n-         for (LockingMode lockingMode : LockingMode.values()) {\n-            tests.add(new TopologyChangeFunctionalTest().transactionMode(txMode).lockingMode(lockingMode));\n-         }\n-      }\n-      return tests.toArray();\n+      return Arrays.stream(org.infinispan.configuration.cache.TransactionMode.values())\n+            .filter(tMode -> tMode != org.infinispan.configuration.cache.TransactionMode.NONE)\n+            .flatMap(txMode -> Arrays.stream(LockingMode.values())\n+                  .map(lockingMode -> new TopologyChangeFunctionalTest()\n+                        .transactionMode(txMode)\n+                        .lockingMode(lockingMode)))\n+            .toArray();\n    }\n \n    public TopologyChangeFunctionalTest transactionMode(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg2MDc2MQ==", "url": "https://github.com/infinispan/infinispan/pull/8331#discussion_r426860761", "bodyText": "Same here re: flatMap", "author": "wburns", "createdAt": "2020-05-18T19:56:32Z", "path": "server/hotrod/src/test/java/org/infinispan/server/hotrod/tx/TxFunctionalTest.java", "diffHunk": "@@ -41,18 +43,16 @@\n \n    @Override\n    public Object[] factory() {\n-      return new Object[]{\n-            //TODO add optimistic tests when supported!\n-            new TxFunctionalTest()\n-                  .transactionMode(org.infinispan.configuration.cache.TransactionMode.NON_XA).lockingMode(\n-                  LockingMode.PESSIMISTIC),\n-            new TxFunctionalTest()\n-                  .transactionMode(org.infinispan.configuration.cache.TransactionMode.NON_DURABLE_XA).lockingMode(\n-                  LockingMode.PESSIMISTIC),\n-            new TxFunctionalTest()\n-                  .transactionMode(org.infinispan.configuration.cache.TransactionMode.FULL_XA).lockingMode(\n-                  LockingMode.PESSIMISTIC)\n-      };\n+      List<Object> tests = new ArrayList<>(3 * 2);", "originalCommit": "823971d09b68fe0ce448a20d70e7757b2656d808", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e2e154dac5aa79c16868ba70a0fffbd8b208725f", "chunk": "diff --git a/server/hotrod/src/test/java/org/infinispan/server/hotrod/tx/TxFunctionalTest.java b/server/hotrod/src/test/java/org/infinispan/server/hotrod/tx/TxFunctionalTest.java\nindex aabaedcb72..f549de3ef1 100644\n--- a/server/hotrod/src/test/java/org/infinispan/server/hotrod/tx/TxFunctionalTest.java\n+++ b/server/hotrod/src/test/java/org/infinispan/server/hotrod/tx/TxFunctionalTest.java\n\n@@ -43,16 +42,13 @@\n \n    @Override\n    public Object[] factory() {\n-      List<Object> tests = new ArrayList<>(3 * 2);\n-      for (org.infinispan.configuration.cache.TransactionMode txMode : org.infinispan.configuration.cache.TransactionMode.values()) {\n-         if (txMode == org.infinispan.configuration.cache.TransactionMode.NONE) {\n-            continue;\n-         }\n-         for (LockingMode lockingMode : LockingMode.values()) {\n-            tests.add(new TxFunctionalTest().transactionMode(txMode).lockingMode(lockingMode));\n-         }\n-      }\n-      return tests.toArray();\n+      return Arrays.stream(org.infinispan.configuration.cache.TransactionMode.values())\n+            .filter(tMode -> tMode != org.infinispan.configuration.cache.TransactionMode.NONE)\n+            .flatMap(txMode -> Arrays.stream(LockingMode.values())\n+                  .map(lockingMode -> new TxFunctionalTest()\n+                        .transactionMode(txMode)\n+                        .lockingMode(lockingMode)))\n+            .toArray();\n    }\n \n    public TxFunctionalTest transactionMode(org.infinispan.configuration.cache.TransactionMode transactionMode) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg2MjU1NA==", "url": "https://github.com/infinispan/infinispan/pull/8331#discussion_r426862554", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               public NumericVersion getNVersion() {\n          \n          \n            \n               public NumericVersion getNumericVersion() {", "author": "wburns", "createdAt": "2020-05-18T20:00:20Z", "path": "core/src/main/java/org/infinispan/metadata/impl/PrivateMetadata.java", "diffHunk": "@@ -74,29 +87,75 @@ public IracMetadata iracMetadata() {\n       return iracMetadata;\n    }\n \n+   /**\n+    * @return The {@link IncrementableEntryVersion} associated with the entry.\n+    */\n+   public IncrementableEntryVersion entryVersion() {\n+      return entryVersion;\n+   }\n+\n    /**\n     * @return {@code true} if not metadata is stored in this instance.\n     */\n    public boolean isEmpty() {\n-      return iracMetadata == null;\n+      return iracMetadata == null && entryVersion == null;\n    }\n \n+   @Override\n+   public String toString() {\n+      return \"PrivateMetadata{\" +\n+            \"iracMetadata=\" + iracMetadata +\n+            \", entryVersion=\" + entryVersion +\n+            '}';\n+   }\n+\n+   @Override\n+   public boolean equals(Object o) {\n+      if (this == o) {\n+         return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+         return false;\n+      }\n+      PrivateMetadata metadata = (PrivateMetadata) o;\n+      return Objects.equals(iracMetadata, metadata.iracMetadata) &&\n+            Objects.equals(entryVersion, metadata.entryVersion);\n+   }\n+\n+   @Override\n+   public int hashCode() {\n+      return Objects.hash(iracMetadata, entryVersion);\n+   }\n+\n+   @ProtoField(number = 2)\n+   public NumericVersion getNVersion() {", "originalCommit": "823971d09b68fe0ce448a20d70e7757b2656d808", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e2e154dac5aa79c16868ba70a0fffbd8b208725f", "chunk": "diff --git a/core/src/main/java/org/infinispan/metadata/impl/PrivateMetadata.java b/core/src/main/java/org/infinispan/metadata/impl/PrivateMetadata.java\nindex 9933fe814d..7ba751ea2d 100644\n--- a/core/src/main/java/org/infinispan/metadata/impl/PrivateMetadata.java\n+++ b/core/src/main/java/org/infinispan/metadata/impl/PrivateMetadata.java\n\n@@ -128,12 +128,12 @@ public int hashCode() {\n    }\n \n    @ProtoField(number = 2)\n-   public NumericVersion getNVersion() {\n+   public NumericVersion getNumericVersion() {\n       return entryVersion instanceof NumericVersion ? (NumericVersion) entryVersion : null;\n    }\n \n    @ProtoField(number = 3)\n-   public SimpleClusteredVersion getCVersion() {\n+   public SimpleClusteredVersion getClusteredVersion() {\n       return entryVersion instanceof SimpleClusteredVersion ? (SimpleClusteredVersion) entryVersion : null;\n    }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg2MjY0MQ==", "url": "https://github.com/infinispan/infinispan/pull/8331#discussion_r426862641", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               public SimpleClusteredVersion getCVersion() {\n          \n          \n            \n               public SimpleClusteredVersion getClusteredVersion() {", "author": "wburns", "createdAt": "2020-05-18T20:00:31Z", "path": "core/src/main/java/org/infinispan/metadata/impl/PrivateMetadata.java", "diffHunk": "@@ -74,29 +87,75 @@ public IracMetadata iracMetadata() {\n       return iracMetadata;\n    }\n \n+   /**\n+    * @return The {@link IncrementableEntryVersion} associated with the entry.\n+    */\n+   public IncrementableEntryVersion entryVersion() {\n+      return entryVersion;\n+   }\n+\n    /**\n     * @return {@code true} if not metadata is stored in this instance.\n     */\n    public boolean isEmpty() {\n-      return iracMetadata == null;\n+      return iracMetadata == null && entryVersion == null;\n    }\n \n+   @Override\n+   public String toString() {\n+      return \"PrivateMetadata{\" +\n+            \"iracMetadata=\" + iracMetadata +\n+            \", entryVersion=\" + entryVersion +\n+            '}';\n+   }\n+\n+   @Override\n+   public boolean equals(Object o) {\n+      if (this == o) {\n+         return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+         return false;\n+      }\n+      PrivateMetadata metadata = (PrivateMetadata) o;\n+      return Objects.equals(iracMetadata, metadata.iracMetadata) &&\n+            Objects.equals(entryVersion, metadata.entryVersion);\n+   }\n+\n+   @Override\n+   public int hashCode() {\n+      return Objects.hash(iracMetadata, entryVersion);\n+   }\n+\n+   @ProtoField(number = 2)\n+   public NumericVersion getNVersion() {\n+      return entryVersion instanceof NumericVersion ? (NumericVersion) entryVersion : null;\n+   }\n+\n+   @ProtoField(number = 3)\n+   public SimpleClusteredVersion getCVersion() {", "originalCommit": "823971d09b68fe0ce448a20d70e7757b2656d808", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e2e154dac5aa79c16868ba70a0fffbd8b208725f", "chunk": "diff --git a/core/src/main/java/org/infinispan/metadata/impl/PrivateMetadata.java b/core/src/main/java/org/infinispan/metadata/impl/PrivateMetadata.java\nindex 9933fe814d..7ba751ea2d 100644\n--- a/core/src/main/java/org/infinispan/metadata/impl/PrivateMetadata.java\n+++ b/core/src/main/java/org/infinispan/metadata/impl/PrivateMetadata.java\n\n@@ -128,12 +128,12 @@ public int hashCode() {\n    }\n \n    @ProtoField(number = 2)\n-   public NumericVersion getNVersion() {\n+   public NumericVersion getNumericVersion() {\n       return entryVersion instanceof NumericVersion ? (NumericVersion) entryVersion : null;\n    }\n \n    @ProtoField(number = 3)\n-   public SimpleClusteredVersion getCVersion() {\n+   public SimpleClusteredVersion getClusteredVersion() {\n       return entryVersion instanceof SimpleClusteredVersion ? (SimpleClusteredVersion) entryVersion : null;\n    }\n \n"}}, {"oid": "e2e154dac5aa79c16868ba70a0fffbd8b208725f", "url": "https://github.com/infinispan/infinispan/commit/e2e154dac5aa79c16868ba70a0fffbd8b208725f", "message": "ISPN-11803 Move Optimistic Transaction versions to PrivateMetadata", "committedDate": "2020-05-18T20:46:51Z", "type": "commit"}, {"oid": "e2e154dac5aa79c16868ba70a0fffbd8b208725f", "url": "https://github.com/infinispan/infinispan/commit/e2e154dac5aa79c16868ba70a0fffbd8b208725f", "message": "ISPN-11803 Move Optimistic Transaction versions to PrivateMetadata", "committedDate": "2020-05-18T20:46:51Z", "type": "forcePushed"}]}