{"pr_number": 8384, "pr_title": "ISPN-11898 Missing transcoder for user marshaller's media type", "pr_createdAt": "2020-05-25T08:04:38Z", "pr_url": "https://github.com/infinispan/infinispan/pull/8384", "timeline": [{"oid": "342be4cfec949c25a9cca57124baa2dc0d7a7d06", "url": "https://github.com/infinispan/infinispan/commit/342be4cfec949c25a9cca57124baa2dc0d7a7d06", "message": "ISPN-11901 Deprecate unused encoders and media types", "committedDate": "2020-05-25T09:21:46Z", "type": "forcePushed"}, {"oid": "66e47fd846bf4e5fe21cb4afcbd6b63686a21cf6", "url": "https://github.com/infinispan/infinispan/commit/66e47fd846bf4e5fe21cb4afcbd6b63686a21cf6", "message": "ISPN-11901 Deprecate unused encoders and media types", "committedDate": "2020-05-26T05:42:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMxNjcyMg==", "url": "https://github.com/infinispan/infinispan/pull/8384#discussion_r430316722", "bodyText": "Please create a sub-task on https://issues.redhat.com/browse/ISPN-11691 so that the removal isn't missed and add to the javadocs.", "author": "ryanemerson", "createdAt": "2020-05-26T10:36:50Z", "path": "commons/all/src/main/java/org/infinispan/commons/dataconversion/EncoderIds.java", "diffHunk": "@@ -8,7 +8,19 @@\n    short IDENTITY = 1;\n    short BINARY = 2;\n    short UTF8 = 3;\n+   /**\n+    * @deprecated Since 11.0, will be removed in 14.0. Set the storage media type and use transcoding instead.", "originalCommit": "66e47fd846bf4e5fe21cb4afcbd6b63686a21cf6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4NTA5Mg==", "url": "https://github.com/infinispan/infinispan/pull/8384#discussion_r432385092", "bodyText": "@ryanemerson IMO it's too early to create those tasks, we can always run a script to find the classes/methods that were deprecated in 11.0.", "author": "danberindei", "createdAt": "2020-05-29T10:04:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMxNjcyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAwNDA0Mg==", "url": "https://github.com/infinispan/infinispan/pull/8384#discussion_r435004042", "bodyText": "I created ISPN-11962", "author": "danberindei", "createdAt": "2020-06-04T05:41:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMxNjcyMg=="}], "type": "inlineReview", "revised_code": {"commit": "4701bb1c8a44b4ade9645bd806b1bbd1a083f34b", "chunk": "diff --git a/commons/all/src/main/java/org/infinispan/commons/dataconversion/EncoderIds.java b/commons/all/src/main/java/org/infinispan/commons/dataconversion/EncoderIds.java\nindex f64f36862d..a7066e1c99 100644\n--- a/commons/all/src/main/java/org/infinispan/commons/dataconversion/EncoderIds.java\n+++ b/commons/all/src/main/java/org/infinispan/commons/dataconversion/EncoderIds.java\n\n@@ -9,7 +9,7 @@\n    short BINARY = 2;\n    short UTF8 = 3;\n    /**\n-    * @deprecated Since 11.0, will be removed in 14.0. Set the storage media type and use transcoding instead.\n+    * @deprecated Since 11.0, will be removed together with {@link org.infinispan.commons.marshall.AdvancedExternalizer}.\n     */\n    @Deprecated\n    short GLOBAL_MARSHALLER = 4;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMyMDI3OA==", "url": "https://github.com/infinispan/infinispan/pull/8384#discussion_r430320278", "bodyText": "This will only be possible whilst the GlobalMarshaller still exists in it's current format. Once the protostream global marshaller finally lands (12 \ud83e\udd1e) we won't have the externalizers or the marshaller code.", "author": "ryanemerson", "createdAt": "2020-05-26T10:43:49Z", "path": "core/src/main/java/org/infinispan/factories/EncoderRegistryFactory.java", "diffHunk": "@@ -64,6 +65,7 @@ public Object construct(String componentName) {\n       encoderRegistry.registerTranscoder(new ProtostreamTranscoder(ctxRegistry, classLoader));\n       encoderRegistry.registerTranscoder(new JavaSerializationTranscoder(classWhiteList));\n       // Wraps the GlobalMarshaller so that it can be used as a transcoder\n+      // Keeps application/x-infinispan-marshalling available for backwards compatibility\n       encoderRegistry.registerTranscoder(new TranscoderMarshallerAdapter(globalMarshaller.wired()));", "originalCommit": "4f2a434c24b99480c2922780ac6f3b683ea44bef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4NjA3Nw==", "url": "https://github.com/infinispan/infinispan/pull/8384#discussion_r432386077", "bodyText": "IDK, I only deprecated application/x-infinispan-marshalling in this PR, so we may have to keep the externalizers for a while longer", "author": "danberindei", "createdAt": "2020-05-29T10:06:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMyMDI3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQwMDEyNA==", "url": "https://github.com/infinispan/infinispan/pull/8384#discussion_r432400124", "bodyText": "In order to maintain application/x-infinispan-marshalling bytes compatiblity we would also have to keep the current GlobalMarshaller implementation, as well as the externalizers. As we haven't provided guarantess for wire compatibility, I think this has an unacceptable maintenance cost.", "author": "ryanemerson", "createdAt": "2020-05-29T10:36:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMyMDI3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQyOTE4NQ==", "url": "https://github.com/infinispan/infinispan/pull/8384#discussion_r434429185", "bodyText": "I changed the deprecation comment for application/x-infinispan-marshalling to remove the 14.0 reference and say it'll be removed together with AdvancedExternalizer instead. I think this line needs to stay as is for now, though.", "author": "danberindei", "createdAt": "2020-06-03T09:21:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMyMDI3OA=="}], "type": "inlineReview", "revised_code": {"commit": "9e2a659d04043e97df897f8699430ade75959e4a", "chunk": "diff --git a/core/src/main/java/org/infinispan/factories/EncoderRegistryFactory.java b/core/src/main/java/org/infinispan/factories/EncoderRegistryFactory.java\nindex 9b1599b64f..95304ed717 100644\n--- a/core/src/main/java/org/infinispan/factories/EncoderRegistryFactory.java\n+++ b/core/src/main/java/org/infinispan/factories/EncoderRegistryFactory.java\n\n@@ -48,28 +47,18 @@ public Object construct(String componentName) {\n       ClassWhiteList classWhiteList = embeddedCacheManager.getClassWhiteList();\n       // TODO Move registration to GlobalMarshaller ISPN-9622\n       String messageName = PersistenceContextInitializer.getFqTypeName(MarshallableUserObject.class);\n-      Marshaller userMarshaller = persistenceMarshaller.getUserMarshaller();\n-      ctxRegistry.addMarshaller(SerializationContextRegistry.MarshallerType.GLOBAL,\n-                                new MarshallableUserObject.Marshaller(messageName, userMarshaller));\n+      ctxRegistry.addMarshaller(SerializationContextRegistry.MarshallerType.GLOBAL, new MarshallableUserObject.Marshaller(messageName, persistenceMarshaller.getUserMarshaller()));\n \n       encoderRegistry.registerEncoder(IdentityEncoder.INSTANCE);\n       encoderRegistry.registerEncoder(UTF8Encoder.INSTANCE);\n-\n       encoderRegistry.registerEncoder(new JavaSerializationEncoder(classWhiteList));\n       encoderRegistry.registerEncoder(new GlobalMarshallerEncoder(globalMarshaller.wired()));\n-\n-      // Default and binary transcoder use the user marshaller to convert data to/from a byte array\n-      encoderRegistry.registerTranscoder(new DefaultTranscoder(userMarshaller));\n-      encoderRegistry.registerTranscoder(new BinaryTranscoder(userMarshaller));\n-      // Core transcoders are always available\n-      encoderRegistry.registerTranscoder(new ProtostreamTranscoder(ctxRegistry, classLoader));\n-      encoderRegistry.registerTranscoder(new JavaSerializationTranscoder(classWhiteList));\n+      encoderRegistry.registerTranscoder(new DefaultTranscoder(persistenceMarshaller.getUserMarshaller()));\n+      encoderRegistry.registerTranscoder(new BinaryTranscoder(persistenceMarshaller.getUserMarshaller()));\n       // Wraps the GlobalMarshaller so that it can be used as a transcoder\n-      // Keeps application/x-infinispan-marshalling available for backwards compatibility\n       encoderRegistry.registerTranscoder(new TranscoderMarshallerAdapter(globalMarshaller.wired()));\n-      // Make the user marshaller's media type available as well\n-      // As custom marshaller modules like Kryo and Protostuff do not define their own transcoder\n-      encoderRegistry.registerTranscoder(new TranscoderMarshallerAdapter(userMarshaller));\n+      encoderRegistry.registerTranscoder(new ProtostreamTranscoder(ctxRegistry, classLoader));\n+      encoderRegistry.registerTranscoder(new JavaSerializationTranscoder(classWhiteList));\n \n       encoderRegistry.registerWrapper(ByteArrayWrapper.INSTANCE);\n       encoderRegistry.registerWrapper(IdentityWrapper.INSTANCE);\n"}}, {"oid": "78a2a0278a82da8db3d814cf2ce92ee37bf4ffa7", "url": "https://github.com/infinispan/infinispan/commit/78a2a0278a82da8db3d814cf2ce92ee37bf4ffa7", "message": "ISPN-11926 Remote JCacheManager two RemoteCacheManager instances\n\n* Create only one RemoteCacheManager and use withFlags\n* build() should not modify the ConfigurationBuilder", "committedDate": "2020-05-28T13:58:15Z", "type": "forcePushed"}, {"oid": "11209e1e5eb48dbb4d47aeefdf8b69c3b9e1cbf0", "url": "https://github.com/infinispan/infinispan/commit/11209e1e5eb48dbb4d47aeefdf8b69c3b9e1cbf0", "message": "Make jcache/tck-runner-remote use ProtostreamMarshaller", "committedDate": "2020-05-28T16:00:50Z", "type": "forcePushed"}, {"oid": "227fd401ae2f23e457b79f61bdf38cee607048fb", "url": "https://github.com/infinispan/infinispan/commit/227fd401ae2f23e457b79f61bdf38cee607048fb", "message": "ISPN-11932 JCache remote events do not work with ProtostreamMarshaller", "committedDate": "2020-05-29T10:01:02Z", "type": "forcePushed"}, {"oid": "4701bb1c8a44b4ade9645bd806b1bbd1a083f34b", "url": "https://github.com/infinispan/infinispan/commit/4701bb1c8a44b4ade9645bd806b1bbd1a083f34b", "message": "ISPN-11932 JCache remote events do not work with ProtostreamMarshaller", "committedDate": "2020-06-01T15:40:45Z", "type": "forcePushed"}, {"oid": "0289b26da620d5ae32a3fbf1f7cb28b9dbe92b23", "url": "https://github.com/infinispan/infinispan/commit/0289b26da620d5ae32a3fbf1f7cb28b9dbe92b23", "message": "ISPN-11932 JCache remote events do not work with ProtostreamMarshaller", "committedDate": "2020-06-01T18:26:19Z", "type": "forcePushed"}, {"oid": "b9e8ea397323eb11406df93d0efbdd8dd0ca8b56", "url": "https://github.com/infinispan/infinispan/commit/b9e8ea397323eb11406df93d0efbdd8dd0ca8b56", "message": "ISPN-11932 JCache remote events do not work with ProtostreamMarshaller", "committedDate": "2020-06-02T08:29:06Z", "type": "forcePushed"}, {"oid": "9e2a659d04043e97df897f8699430ade75959e4a", "url": "https://github.com/infinispan/infinispan/commit/9e2a659d04043e97df897f8699430ade75959e4a", "message": "ISPN-11899 application/x-java-serialized-object without custom marshaller", "committedDate": "2020-06-03T12:55:30Z", "type": "commit"}, {"oid": "741525fe36d0512c16d6cb21150af4996bc84f5f", "url": "https://github.com/infinispan/infinispan/commit/741525fe36d0512c16d6cb21150af4996bc84f5f", "message": "ISPN-11898 Missing transcoder for user marshaller's media type", "committedDate": "2020-06-03T12:55:30Z", "type": "commit"}, {"oid": "94a93f7fd66b5b83ce4dc59827d4e21d4ab38174", "url": "https://github.com/infinispan/infinispan/commit/94a93f7fd66b5b83ce4dc59827d4e21d4ab38174", "message": "ISPN-11900 jboss-marshalling module application/x-jboss-marshalling transcoder\n\nCreate the EncoderRegistry later so that PersistenceMarshallerImpl\ndoesn't try to start the user marshaller before the jboss-marshalling\nmodule had a chance to initialize it.", "committedDate": "2020-06-03T19:35:54Z", "type": "commit"}, {"oid": "24779ee86b7323897e3316b26876b358f3ebe9fd", "url": "https://github.com/infinispan/infinispan/commit/24779ee86b7323897e3316b26876b358f3ebe9fd", "message": "ISPN-11901 Deprecate unused encoders and media types", "committedDate": "2020-06-03T19:35:54Z", "type": "commit"}, {"oid": "31aec263719d0bf562d4da7cf49cfb4953b7f6f1", "url": "https://github.com/infinispan/infinispan/commit/31aec263719d0bf562d4da7cf49cfb4953b7f6f1", "message": "ISPN-11926 Remote JCacheManager two RemoteCacheManager instances\n\n* Create only one RemoteCacheManager and use withFlags\n* build() should not modify the ConfigurationBuilder", "committedDate": "2020-06-03T19:35:54Z", "type": "commit"}, {"oid": "32846d6a24eaa06ae2c0661dc7c1c8cd3a3f68ac", "url": "https://github.com/infinispan/infinispan/commit/32846d6a24eaa06ae2c0661dc7c1c8cd3a3f68ac", "message": "ISPN-11932 JCache remote events do not work with ProtostreamMarshaller", "committedDate": "2020-06-03T19:35:54Z", "type": "commit"}, {"oid": "32846d6a24eaa06ae2c0661dc7c1c8cd3a3f68ac", "url": "https://github.com/infinispan/infinispan/commit/32846d6a24eaa06ae2c0661dc7c1c8cd3a3f68ac", "message": "ISPN-11932 JCache remote events do not work with ProtostreamMarshaller", "committedDate": "2020-06-03T19:35:54Z", "type": "forcePushed"}]}