{"pr_number": 7748, "pr_title": "ISPN-10362 Unify remove command initialization and invocation", "pr_createdAt": "2020-01-16T16:29:39Z", "pr_url": "https://github.com/infinispan/infinispan/pull/7748", "timeline": [{"oid": "9c74f9d7b8aad3614e610729201a4c53d0073846", "url": "https://github.com/infinispan/infinispan/commit/9c74f9d7b8aad3614e610729201a4c53d0073846", "message": "ISPN-10362 Unify remove command initialization and invocation\n\nOnly org.infinispan.tx.recovery.admin.* Tests failing due to remote Tx count not being decremented to 0", "committedDate": "2020-01-16T16:31:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUyMjk5Mw==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r367522993", "bodyText": "Move this down one line btw ;)", "author": "wburns", "createdAt": "2020-01-16T16:33:54Z", "path": "core/src/main/java/org/infinispan/expiration/impl/TouchCommand.java", "diffHunk": "@@ -92,7 +78,14 @@ public void setTopologyId(int topologyId) {\n    }\n \n    @Override\n-   public CompletableFuture<Object> invokeAsync() {\n+   public CompletableFuture<Object> invokeAsync(ComponentRegistry componentRegistry) {\n+      // Invalidation cache doesn't set topology id - so we don't want to throw OTE in invokeAsync", "originalCommit": "9c74f9d7b8aad3614e610729201a4c53d0073846", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUyNDcxNg==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r367524716", "bodyText": "Done \ud83d\ude42", "author": "ryanemerson", "createdAt": "2020-01-16T16:36:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUyMjk5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "cccd14f5fa122ae168c7d868ecb2c2f89df96c2d", "chunk": "diff --git a/core/src/main/java/org/infinispan/expiration/impl/TouchCommand.java b/core/src/main/java/org/infinispan/expiration/impl/TouchCommand.java\nindex 2919b18840..535281c333 100644\n--- a/core/src/main/java/org/infinispan/expiration/impl/TouchCommand.java\n+++ b/core/src/main/java/org/infinispan/expiration/impl/TouchCommand.java\n\n@@ -79,8 +79,8 @@ public void setTopologyId(int topologyId) {\n \n    @Override\n    public CompletableFuture<Object> invokeAsync(ComponentRegistry componentRegistry) {\n-      // Invalidation cache doesn't set topology id - so we don't want to throw OTE in invokeAsync\n       DistributionManager distributionManager = componentRegistry.getDistributionManager();\n+      // Invalidation cache doesn't set topology id - so we don't want to throw OTE in invokeAsync\n       if (!componentRegistry.getConfiguration().clustering().cacheMode().isInvalidation()) {\n          distributionManager = componentRegistry.getDistributionManager();\n       }\n"}}, {"oid": "cccd14f5fa122ae168c7d868ecb2c2f89df96c2d", "url": "https://github.com/infinispan/infinispan/commit/cccd14f5fa122ae168c7d868ecb2c2f89df96c2d", "message": "ISPN-10362 Unify remove command initialization and invocation\n\nOnly org.infinispan.tx.recovery.admin.* Tests failing due to remote Tx count not being decremented to 0", "committedDate": "2020-01-16T16:36:42Z", "type": "forcePushed"}, {"oid": "5b64cb01114bdd5c15c9408091b84141414e88fc", "url": "https://github.com/infinispan/infinispan/commit/5b64cb01114bdd5c15c9408091b84141414e88fc", "message": "Deprecate and remove usages of CommandsFactory::initializeReplicableCommand", "committedDate": "2020-01-20T15:43:00Z", "type": "forcePushed"}, {"oid": "730953e36334def24adffa63da9ac968be5ad35b", "url": "https://github.com/infinispan/infinispan/commit/730953e36334def24adffa63da9ac968be5ad35b", "message": "Fix PrepareCommand", "committedDate": "2020-01-20T17:01:12Z", "type": "forcePushed"}, {"oid": "d0953867b0a6333fd4e493ac208fad3c93f02f8c", "url": "https://github.com/infinispan/infinispan/commit/d0953867b0a6333fd4e493ac208fad3c93f02f8c", "message": "Use TxTable variable", "committedDate": "2020-01-30T09:12:23Z", "type": "forcePushed"}, {"oid": "6ea94bf14ad967da8c76ea7f049b9cb5a4dae88d", "url": "https://github.com/infinispan/infinispan/commit/6ea94bf14ad967da8c76ea7f049b9cb5a4dae88d", "message": "ISPN-11111 Remove deprecated ModuleCommandInitializer", "committedDate": "2020-01-31T15:42:18Z", "type": "forcePushed"}, {"oid": "3c3b9a37cec99f87fa03d27f01532665d10127b1", "url": "https://github.com/infinispan/infinispan/commit/3c3b9a37cec99f87fa03d27f01532665d10127b1", "message": "ISPN-11111 Remove deprecated ModuleCommandInitializer", "committedDate": "2020-01-31T15:49:51Z", "type": "forcePushed"}, {"oid": "4839bc74e011bfbba3e1aef04c94d6dd7c2e46a7", "url": "https://github.com/infinispan/infinispan/commit/4839bc74e011bfbba3e1aef04c94d6dd7c2e46a7", "message": "ISPN-11111 Remove deprecated ModuleCommandInitializer", "committedDate": "2020-02-03T12:18:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE4NTc4Mg==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374185782", "bodyText": "can we remove this command?\nAlso,  CancellableCommand and CancellationService? I think it was used by the old distributed executor.", "author": "pruivo", "createdAt": "2020-02-03T15:58:21Z", "path": "core/src/main/java/org/infinispan/commands/CancelCommand.java", "diffHunk": "@@ -20,13 +20,12 @@\n  * @author Vladimir Blagojevic\n  * @since 5.2\n  */\n-public class CancelCommand extends BaseRpcCommand implements InitializableCommand {\n+public class CancelCommand extends BaseRpcCommand {", "originalCommit": "4839bc74e011bfbba3e1aef04c94d6dd7c2e46a7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE5MjE0Nw==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374192147", "bodyText": "@wburns any thoughts?", "author": "ryanemerson", "createdAt": "2020-02-03T16:09:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE4NTc4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE5NTExNw==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374195117", "bodyText": "They were used by the old DistributedExecutor. I don't think they are used by anything else now.", "author": "wburns", "createdAt": "2020-02-03T16:14:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE4NTc4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIyMDc0Ng==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374220746", "bodyText": "I've created https://issues.redhat.com/browse/ISPN-11269 and I'll add a commit to this PR", "author": "ryanemerson", "createdAt": "2020-02-03T16:58:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE4NTc4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "9cef57268d49d77a668149ab9db14deeef7fc50e", "chunk": "diff --git a/core/src/main/java/org/infinispan/commands/CancelCommand.java b/core/src/main/java/org/infinispan/commands/CancelCommand.java\ndeleted file mode 100644\nindex 26c346fdc1..0000000000\n--- a/core/src/main/java/org/infinispan/commands/CancelCommand.java\n+++ /dev/null\n\n@@ -1,105 +0,0 @@\n-package org.infinispan.commands;\n-\n-import java.io.IOException;\n-import java.io.ObjectInput;\n-import java.io.ObjectOutput;\n-import java.util.UUID;\n-import java.util.concurrent.CompletableFuture;\n-\n-import org.infinispan.commands.remote.BaseRpcCommand;\n-import org.infinispan.commons.marshall.MarshallUtil;\n-import org.infinispan.factories.ComponentRegistry;\n-import org.infinispan.util.ByteString;\n-import org.infinispan.util.concurrent.CompletableFutures;\n-import org.infinispan.util.logging.Log;\n-import org.infinispan.util.logging.LogFactory;\n-\n-/**\n- * Command to cancel commands executing in remote VM\n- *\n- * @author Vladimir Blagojevic\n- * @since 5.2\n- */\n-public class CancelCommand extends BaseRpcCommand {\n-\n-   private static final Log log = LogFactory.getLog(CancelCommand.class);\n-   public static final byte COMMAND_ID = 34;\n-\n-   private UUID commandToCancel;\n-\n-   private CancelCommand() {\n-      super(null);\n-   }\n-\n-   public CancelCommand(ByteString ownerCacheName) {\n-      super(ownerCacheName);\n-   }\n-\n-   public CancelCommand(ByteString ownerCacheName, UUID commandToCancel) {\n-      super(ownerCacheName);\n-      this.commandToCancel = commandToCancel;\n-   }\n-\n-   @Override\n-   public CompletableFuture<Object> invokeAsync(ComponentRegistry registry) throws Throwable {\n-      log.trace(\"Cancelling \" + commandToCancel);\n-      registry.getCancellationService().running().cancel(commandToCancel);\n-      log.trace(\"Cancelled \" + commandToCancel);\n-      return CompletableFutures.completedNull();\n-   }\n-\n-   @Override\n-   public byte getCommandId() {\n-      return COMMAND_ID;\n-   }\n-\n-   @Override\n-   public void writeTo(ObjectOutput output) throws IOException {\n-      MarshallUtil.marshallUUID(commandToCancel, output, false);\n-   }\n-\n-   @Override\n-   public void readFrom(ObjectInput input) throws IOException, ClassNotFoundException {\n-      commandToCancel = MarshallUtil.unmarshallUUID(input, false);\n-   }\n-\n-   @Override\n-   public boolean isReturnValueExpected() {\n-      return true;\n-   }\n-\n-   @Override\n-   public int hashCode() {\n-      int result = 1;\n-      result = 31 * result + ((commandToCancel == null) ? 0 : commandToCancel.hashCode());\n-      return result;\n-   }\n-\n-   @Override\n-   public boolean equals(Object obj) {\n-      if (this == obj) {\n-         return true;\n-      }\n-      if (obj == null) {\n-         return false;\n-      }\n-      if (!(obj instanceof CancelCommand)) {\n-         return false;\n-      }\n-      CancelCommand other = (CancelCommand) obj;\n-      if (commandToCancel == null) {\n-         if (other.commandToCancel != null) {\n-            return false;\n-         }\n-      } else if (!commandToCancel.equals(other.commandToCancel)) {\n-         return false;\n-      }\n-      return true;\n-   }\n-\n-   @Override\n-   public String toString() {\n-      return \"CancelCommand [uuid=\" + commandToCancel + \"]\";\n-   }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA5OTU3Ng==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374099576", "bodyText": "\"should be stateless\" is maybe too much, it's ok for an interceptor to set a field in the command for another interceptor to use.\nAlthough the first example I found, GetKeysInGroupCommand, would probably be best handled by computing the segment on the originator and setting in the constructor :)", "author": "danberindei", "createdAt": "2020-02-03T13:26:26Z", "path": "core/src/main/java/org/infinispan/commands/CommandsFactory.java", "diffHunk": "@@ -359,7 +359,9 @@ ComputeIfAbsentCommand buildComputeIfAbsentCommand(Object key, Function mappingF\n     *\n     * @param command command to initialize.  Cannot be null.\n     * @param isRemote\n+    * @deprecated since 11.0, ReplicableCommands should be stateless and utilise {@link ReplicableCommand#invokeAsync(ComponentRegistry)}", "originalCommit": "4839bc74e011bfbba3e1aef04c94d6dd7c2e46a7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9cef57268d49d77a668149ab9db14deeef7fc50e", "chunk": "diff --git a/core/src/main/java/org/infinispan/commands/CommandsFactory.java b/core/src/main/java/org/infinispan/commands/CommandsFactory.java\nindex 996499d9ca..ed20b52765 100644\n--- a/core/src/main/java/org/infinispan/commands/CommandsFactory.java\n+++ b/core/src/main/java/org/infinispan/commands/CommandsFactory.java\n\n@@ -359,7 +360,9 @@ ComputeIfAbsentCommand buildComputeIfAbsentCommand(Object key, Function mappingF\n     *\n     * @param command command to initialize.  Cannot be null.\n     * @param isRemote\n-    * @deprecated since 11.0, ReplicableCommands should be stateless and utilise {@link ReplicableCommand#invokeAsync(ComponentRegistry)}\n+    * @deprecated since 11.0, please use {@link org.infinispan.commands.remote.CacheRpcCommand#invokeAsync(ComponentRegistry)}\n+    * or {@link GlobalRpcCommand#invokeAsync(GlobalComponentRegistry)} instead.\n+    * to access any components required at invocation time.\n     */\n    @Deprecated\n    void initializeReplicableCommand(ReplicableCommand command, boolean isRemote);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQzNDk2OQ==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374434969", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @deprecated since 11.0 has the affect.\n          \n          \n            \n             * @deprecated since 11.0 has no effect.", "author": "danberindei", "createdAt": "2020-02-04T01:39:05Z", "path": "core/src/main/java/org/infinispan/commands/CancellableCommand.java", "diffHunk": "@@ -9,7 +9,9 @@\n  *\n  * @author Vladimir Blagojevic\n  * @since 5.2\n+ * @deprecated since 11.0 has the affect.", "originalCommit": "8848ae7a791a703a5744d60d2a95b7ba7ef7f0ac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9cef57268d49d77a668149ab9db14deeef7fc50e", "chunk": "diff --git a/core/src/main/java/org/infinispan/commands/CancellableCommand.java b/core/src/main/java/org/infinispan/commands/CancellableCommand.java\ndeleted file mode 100644\nindex c3eebddd4d..0000000000\n--- a/core/src/main/java/org/infinispan/commands/CancellableCommand.java\n+++ /dev/null\n\n@@ -1,24 +0,0 @@\n-package org.infinispan.commands;\n-\n-import java.util.UUID;\n-\n-import org.infinispan.commands.remote.CacheRpcCommand;\n-\n-/**\n- * CancellableCommand is a command whose execution in remote VM can be canceled (if needed)\n- *\n- * @author Vladimir Blagojevic\n- * @since 5.2\n- * @deprecated since 11.0 has the affect.\n- */\n-@Deprecated\n-public interface CancellableCommand extends CacheRpcCommand {\n-\n-   /**\n-    * Returns UUID of a command\n-    *\n-    * @return command UUID\n-    */\n-   UUID getUUID();\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQzNTcyNw==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374435727", "bodyText": "It's not a public package, so I'd just delete it.\nBesides, user implementations were ignored anyway, because EmptyConstructorFactory referenced CancellationServiceImpl directly.", "author": "danberindei", "createdAt": "2020-02-04T01:42:09Z", "path": "core/src/main/java/org/infinispan/commands/CancellationService.java", "diffHunk": "@@ -11,8 +11,10 @@\n  *\n  * @author Vladimir Blagojevic\n  * @since 5.2\n+ * @deprecated since 11.0 implementations of this interface are ignored", "originalCommit": "8848ae7a791a703a5744d60d2a95b7ba7ef7f0ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIyOTE5Nw==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r375229197", "bodyText": "I've just removed the interface in the end.", "author": "ryanemerson", "createdAt": "2020-02-05T12:34:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQzNTcyNw=="}], "type": "inlineReview", "revised_code": {"commit": "9cef57268d49d77a668149ab9db14deeef7fc50e", "chunk": "diff --git a/core/src/main/java/org/infinispan/commands/CancellationService.java b/core/src/main/java/org/infinispan/commands/CancellationService.java\ndeleted file mode 100644\nindex 8c0751d433..0000000000\n--- a/core/src/main/java/org/infinispan/commands/CancellationService.java\n+++ /dev/null\n\n@@ -1,52 +0,0 @@\n-package org.infinispan.commands;\n-\n-import java.util.UUID;\n-\n-import org.infinispan.factories.scopes.Scope;\n-import org.infinispan.factories.scopes.Scopes;\n-\n-/**\n- * CancellationService manages association of Thread executing CancellableCommand in a remote VM and\n- * if needed cancels command execution\n- *\n- * @author Vladimir Blagojevic\n- * @since 5.2\n- * @deprecated since 11.0 implementations of this interface are ignored\n- */\n-@Scope(Scopes.GLOBAL)\n-@Deprecated\n-public interface CancellationService {\n-\n-   /**\n-    * Registers thread with {@link CancellationService} under the given UUID id\n-    *\n-    * @param t\n-    *           thread to associate with id\n-    * @param id\n-    *           chosen UUID id\n-    */\n-   default void register(Thread t, UUID id) {\n-      // no-op\n-   }\n-\n-   /**\n-    * Unregisters thread with {@link CancellationService} given an id\n-    *\n-    * @param id\n-    *           thread id\n-    */\n-   default void unregister(UUID id) {\n-      // no-op\n-   }\n-\n-   /**\n-    * Cancels (invokes Thread#interrupt) a thread given a thread id\n-    *\n-    * @param id\n-    *           thread id\n-    */\n-   default void cancel(UUID id) {\n-      // no-op\n-   }\n-\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ0MjQxNQ==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374442415", "bodyText": "Please make the new invokeAsync method return a CompletionStage and move it to CacheRpcCommand + GlobalRpcCommand.\nSingleXSiteRpcCommand.invokeAsync() currently uses it on VisitableCommand, but it could throw an UnsupportedOperationException instead.\nSame with CallInterceptor.visitUnknownCommand(), there's no reason why a command that the interceptors don't know about should go through the interceptor chain.\nTrue, the current RpcManager javadoc doesn't put any restrictions on the command, but IMO it's ok to change RpcManagerCustomReplicableCommandTest to assert that an unknown VisitableCommand is not supported, and also that a GlobalRpcCommand is not supported (global commands should be invoked via Transport).", "author": "danberindei", "createdAt": "2020-02-04T02:12:46Z", "path": "core/src/main/java/org/infinispan/commands/ReplicableCommand.java", "diffHunk": "@@ -19,17 +19,33 @@\n  * @since 4.0\n  */\n public interface ReplicableCommand {\n+\n+   /**\n+    * Invoke the command asynchronously.\n+    * <p>\n+    * <p>This method replaces {@link #invoke()} for remote execution.\n+    * The default implementation and {@link #invoke()} will be removed in future versions.\n+    * </p>\n+    *\n+    * @since 11.0\n+    */\n+   default CompletableFuture<Object> invokeAsync(ComponentRegistry registry) throws Throwable {", "originalCommit": "8848ae7a791a703a5744d60d2a95b7ba7ef7f0ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY3ODU5OA==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374678598", "bodyText": "Should we also deprecate the Visitor::visitUnknownCommand method then?", "author": "ryanemerson", "createdAt": "2020-02-04T13:47:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ0MjQxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcxMjU4MA==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374712580", "bodyText": "+1", "author": "danberindei", "createdAt": "2020-02-04T14:46:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ0MjQxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "9cef57268d49d77a668149ab9db14deeef7fc50e", "chunk": "diff --git a/core/src/main/java/org/infinispan/commands/ReplicableCommand.java b/core/src/main/java/org/infinispan/commands/ReplicableCommand.java\nindex 4964eb54fa..d4aa00cb9b 100644\n--- a/core/src/main/java/org/infinispan/commands/ReplicableCommand.java\n+++ b/core/src/main/java/org/infinispan/commands/ReplicableCommand.java\n\n@@ -22,26 +23,10 @@\n \n    /**\n     * Invoke the command asynchronously.\n-    * <p>\n-    * <p>This method replaces {@link #invoke()} for remote execution.\n-    * The default implementation and {@link #invoke()} will be removed in future versions.\n-    * </p>\n-    *\n-    * @since 11.0\n-    */\n-   default CompletableFuture<Object> invokeAsync(ComponentRegistry registry) throws Throwable {\n-      return invokeAsync();\n-   }\n-\n-   /**\n-    * Invoke the command asynchronously.\n-    * <p>\n-    * <p>This method replaces {@link #invoke()} for remote execution.\n-    * The default implementation and {@link #invoke()} will be removed in future versions.\n-    * </p>\n     *\n     * @since 9.0\n-    * @deprecated since 11.0, please use {@link #invokeAsync(ComponentRegistry)} instead.\n+    * @deprecated since 11.0, please use {@link org.infinispan.commands.remote.CacheRpcCommand#invokeAsync(ComponentRegistry)}\n+    * or {@link GlobalRpcCommand#invokeAsync(GlobalComponentRegistry)} instead.\n     */\n    @Deprecated\n    default CompletableFuture<Object> invokeAsync() throws Throwable {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ0MjY2Nw==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374442667", "bodyText": "I suggest removing both lines and keeping only the deprecation tag.", "author": "danberindei", "createdAt": "2020-02-04T02:14:01Z", "path": "core/src/main/java/org/infinispan/commands/ReplicableCommand.java", "diffHunk": "@@ -19,17 +19,33 @@\n  * @since 4.0\n  */\n public interface ReplicableCommand {\n+\n+   /**\n+    * Invoke the command asynchronously.\n+    * <p>\n+    * <p>This method replaces {@link #invoke()} for remote execution.\n+    * The default implementation and {@link #invoke()} will be removed in future versions.\n+    * </p>\n+    *\n+    * @since 11.0\n+    */\n+   default CompletableFuture<Object> invokeAsync(ComponentRegistry registry) throws Throwable {\n+      return invokeAsync();\n+   }\n+\n    /**\n     * Invoke the command asynchronously.\n     * <p>\n-    * <p>This method replaces {@link #perform(InvocationContext)} for remote execution.\n-    * The default implementation and {@link #perform(InvocationContext)} will be removed in future versions.\n+    * <p>This method replaces {@link #invoke()} for remote execution.", "originalCommit": "8848ae7a791a703a5744d60d2a95b7ba7ef7f0ac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9cef57268d49d77a668149ab9db14deeef7fc50e", "chunk": "diff --git a/core/src/main/java/org/infinispan/commands/ReplicableCommand.java b/core/src/main/java/org/infinispan/commands/ReplicableCommand.java\nindex 4964eb54fa..d4aa00cb9b 100644\n--- a/core/src/main/java/org/infinispan/commands/ReplicableCommand.java\n+++ b/core/src/main/java/org/infinispan/commands/ReplicableCommand.java\n\n@@ -22,26 +23,10 @@\n \n    /**\n     * Invoke the command asynchronously.\n-    * <p>\n-    * <p>This method replaces {@link #invoke()} for remote execution.\n-    * The default implementation and {@link #invoke()} will be removed in future versions.\n-    * </p>\n-    *\n-    * @since 11.0\n-    */\n-   default CompletableFuture<Object> invokeAsync(ComponentRegistry registry) throws Throwable {\n-      return invokeAsync();\n-   }\n-\n-   /**\n-    * Invoke the command asynchronously.\n-    * <p>\n-    * <p>This method replaces {@link #invoke()} for remote execution.\n-    * The default implementation and {@link #invoke()} will be removed in future versions.\n-    * </p>\n     *\n     * @since 9.0\n-    * @deprecated since 11.0, please use {@link #invokeAsync(ComponentRegistry)} instead.\n+    * @deprecated since 11.0, please use {@link org.infinispan.commands.remote.CacheRpcCommand#invokeAsync(ComponentRegistry)}\n+    * or {@link GlobalRpcCommand#invokeAsync(GlobalComponentRegistry)} instead.\n     */\n    @Deprecated\n    default CompletableFuture<Object> invokeAsync() throws Throwable {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ0Mzc2MQ==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374443761", "bodyText": "Please extract componentRegistry.getTransactionTable() to a local variable outside the lambda, even if it's not expensive it would make the line shorter.", "author": "danberindei", "createdAt": "2020-02-04T02:19:00Z", "path": "core/src/main/java/org/infinispan/commands/remote/CheckTransactionRpcCommand.java", "diffHunk": "@@ -57,21 +50,15 @@ public CheckTransactionRpcCommand(ByteString cacheName) {\n       return INSTANCE;\n    }\n \n-   @Override\n-   public void init(ComponentRegistry componentRegistry, boolean isRemote) {\n-      transactionTable = componentRegistry.getTransactionTable();\n-   }\n-\n    @Override\n    public ByteString getCacheName() {\n       return cacheName;\n    }\n \n    @Override\n-   public CompletableFuture<Object> invokeAsync() {\n-      //modify the collection destructively\n-      //and return the list of completed transactions.\n-      gtxToCheck.removeIf(this);\n+   public CompletableFuture<Object> invokeAsync(ComponentRegistry componentRegistry) {\n+      // Modify the collection destructively and return the list of completed transactions.\n+      gtxToCheck.removeIf(globalTransaction -> componentRegistry.getTransactionTable().containsLocalTx(globalTransaction));", "originalCommit": "8848ae7a791a703a5744d60d2a95b7ba7ef7f0ac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9cef57268d49d77a668149ab9db14deeef7fc50e", "chunk": "diff --git a/core/src/main/java/org/infinispan/commands/remote/CheckTransactionRpcCommand.java b/core/src/main/java/org/infinispan/commands/remote/CheckTransactionRpcCommand.java\nindex 669c4ac084..5e3106550c 100644\n--- a/core/src/main/java/org/infinispan/commands/remote/CheckTransactionRpcCommand.java\n+++ b/core/src/main/java/org/infinispan/commands/remote/CheckTransactionRpcCommand.java\n\n@@ -56,9 +58,10 @@ public ByteString getCacheName() {\n    }\n \n    @Override\n-   public CompletableFuture<Object> invokeAsync(ComponentRegistry componentRegistry) {\n+   public CompletionStage<?> invokeAsync(ComponentRegistry componentRegistry) {\n       // Modify the collection destructively and return the list of completed transactions.\n-      gtxToCheck.removeIf(globalTransaction -> componentRegistry.getTransactionTable().containsLocalTx(globalTransaction));\n+      TransactionTable txTable = componentRegistry.getTransactionTable();\n+      gtxToCheck.removeIf(txTable::containsLocalTx);\n       return CompletableFuture.completedFuture(gtxToCheck);\n    }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ0ODM0Mw==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374448343", "bodyText": "We've been throwing this exception since 4.2, it's high time we change the field and the constructor to VisitableCommand.", "author": "danberindei", "createdAt": "2020-02-04T02:39:34Z", "path": "core/src/main/java/org/infinispan/commands/remote/SingleRpcCommand.java", "diffHunk": "@@ -58,13 +58,23 @@ public void readFrom(ObjectInput input) throws IOException, ClassNotFoundExcepti\n    }\n \n    @Override\n-   public Object perform(InvocationContext ctx) throws Throwable {\n-      throw new UnsupportedOperationException();\n-   }\n-\n-   @Override\n-   public CompletableFuture<Object> invokeAsync() throws Throwable {\n-      return processVisitableCommandAsync(command);\n+   public CompletableFuture<Object> invokeAsync(ComponentRegistry componentRegistry) throws Throwable {\n+      if (command instanceof VisitableCommand) {\n+         VisitableCommand vc = (VisitableCommand) command;\n+         vc.init(componentRegistry);\n+         InvocationContextFactory icf = componentRegistry.getInvocationContextFactory().running();\n+         InvocationContext ctx = icf.createRemoteInvocationContextForCommand(vc, getOrigin());\n+         if (command instanceof RemoteLockCommand) {\n+            ctx.setLockOwner(((RemoteLockCommand) command).getKeyLockOwner());\n+         }\n+         if (trace)\n+            log.tracef(\"Invoking command %s, with originLocal flag set to %b\", command, ctx\n+                  .isOriginLocal());\n+         return componentRegistry.getInterceptorChain().running().invokeAsync(ctx, vc);\n+      } else {\n+         throw new RuntimeException(", "originalCommit": "8848ae7a791a703a5744d60d2a95b7ba7ef7f0ac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9cef57268d49d77a668149ab9db14deeef7fc50e", "chunk": "diff --git a/core/src/main/java/org/infinispan/commands/remote/SingleRpcCommand.java b/core/src/main/java/org/infinispan/commands/remote/SingleRpcCommand.java\nindex f6333f7f04..d4da90868a 100644\n--- a/core/src/main/java/org/infinispan/commands/remote/SingleRpcCommand.java\n+++ b/core/src/main/java/org/infinispan/commands/remote/SingleRpcCommand.java\n\n@@ -54,27 +54,21 @@ public void writeTo(ObjectOutput output) throws IOException {\n \n    @Override\n    public void readFrom(ObjectInput input) throws IOException, ClassNotFoundException {\n-      command = (ReplicableCommand) input.readObject();\n+      command = (VisitableCommand) input.readObject();\n    }\n \n    @Override\n-   public CompletableFuture<Object> invokeAsync(ComponentRegistry componentRegistry) throws Throwable {\n-      if (command instanceof VisitableCommand) {\n-         VisitableCommand vc = (VisitableCommand) command;\n-         vc.init(componentRegistry);\n-         InvocationContextFactory icf = componentRegistry.getInvocationContextFactory().running();\n-         InvocationContext ctx = icf.createRemoteInvocationContextForCommand(vc, getOrigin());\n-         if (command instanceof RemoteLockCommand) {\n-            ctx.setLockOwner(((RemoteLockCommand) command).getKeyLockOwner());\n-         }\n-         if (trace)\n-            log.tracef(\"Invoking command %s, with originLocal flag set to %b\", command, ctx\n-                  .isOriginLocal());\n-         return componentRegistry.getInterceptorChain().running().invokeAsync(ctx, vc);\n-      } else {\n-         throw new RuntimeException(\n-               \"Do we still need to deal with non-visitable commands? (\" + command.getClass().getName() + \")\");\n+   public CompletionStage<?> invokeAsync(ComponentRegistry componentRegistry) throws Throwable {\n+      command.init(componentRegistry);\n+      InvocationContextFactory icf = componentRegistry.getInvocationContextFactory().running();\n+      InvocationContext ctx = icf.createRemoteInvocationContextForCommand(command, getOrigin());\n+      if (command instanceof RemoteLockCommand) {\n+         ctx.setLockOwner(((RemoteLockCommand) command).getKeyLockOwner());\n       }\n+      if (trace)\n+         log.tracef(\"Invoking command %s, with originLocal flag set to %b\", command, ctx\n+               .isOriginLocal());\n+      return componentRegistry.getInterceptorChain().running().invokeAsync(ctx, command);\n    }\n \n    @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1NDE5Mw==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374454193", "bodyText": "You should have initialized the variable with null to replicate the behaviour of init, but I don't think the cache mode check is needed because it's also checking if topologyId != -1 below.\nI suggest removing this if and changing the comment below to say topologyId can be -1 both in invalidation mode and in Hibernate 2LC.", "author": "danberindei", "createdAt": "2020-02-04T03:07:14Z", "path": "core/src/main/java/org/infinispan/expiration/impl/TouchCommand.java", "diffHunk": "@@ -91,7 +77,14 @@ public void setTopologyId(int topologyId) {\n    }\n \n    @Override\n-   public CompletableFuture<Object> invokeAsync() {\n+   public CompletableFuture<Object> invokeAsync(ComponentRegistry componentRegistry) {\n+      DistributionManager distributionManager = componentRegistry.getDistributionManager();\n+      // Invalidation cache doesn't set topology id - so we don't want to throw OTE in invokeAsync\n+      if (!componentRegistry.getConfiguration().clustering().cacheMode().isInvalidation()) {\n+         distributionManager = componentRegistry.getDistributionManager();", "originalCommit": "8848ae7a791a703a5744d60d2a95b7ba7ef7f0ac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9cef57268d49d77a668149ab9db14deeef7fc50e", "chunk": "diff --git a/core/src/main/java/org/infinispan/expiration/impl/TouchCommand.java b/core/src/main/java/org/infinispan/expiration/impl/TouchCommand.java\nindex 9f5a73580a..f520c34a1c 100644\n--- a/core/src/main/java/org/infinispan/expiration/impl/TouchCommand.java\n+++ b/core/src/main/java/org/infinispan/expiration/impl/TouchCommand.java\n\n@@ -76,19 +76,13 @@ public void setTopologyId(int topologyId) {\n       this.topologyId = topologyId;\n    }\n \n-   @Override\n-   public CompletableFuture<Object> invokeAsync(ComponentRegistry componentRegistry) {\n+   public CompletionStage<Object> invokeAsync(ComponentRegistry componentRegistry, long currentTimeMilli) {\n       DistributionManager distributionManager = componentRegistry.getDistributionManager();\n-      // Invalidation cache doesn't set topology id - so we don't want to throw OTE in invokeAsync\n-      if (!componentRegistry.getConfiguration().clustering().cacheMode().isInvalidation()) {\n-         distributionManager = componentRegistry.getDistributionManager();\n-      }\n       InternalDataContainer internalDataContainer = componentRegistry.getInternalDataContainer().running();\n-      TimeService timeService = componentRegistry.getTimeService();\n-      boolean touched = internalDataContainer.touch(segment, key, timeService.wallClockTime());\n+      boolean touched = internalDataContainer.touch(segment, key, currentTimeMilli);\n       // Hibernate currently disables clustered expiration manager, which means we can have a topology id of -1\n-      // when using a clustered cache mode\n-      if (distributionManager != null && topologyId != -1) {\n+      // when using a clustered cache mode. Invalidation mode will also result in a topology id of -1.\n+      if (topologyId != -1) {\n          LocalizedCacheTopology lct = distributionManager.getCacheTopology();\n          int currentTopologyId = lct.getTopologyId();\n          if (currentTopologyId != topologyId) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1NTE3MA==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374455170", "bodyText": "This is not ok, cacheComponents() is called by rewire() and registerComponent() will fail the second time.\nIf you really think it's not ok for getCancellationService() to return null, you should register it in the constructor.", "author": "danberindei", "createdAt": "2020-02-04T03:12:14Z", "path": "core/src/main/java/org/infinispan/factories/ComponentRegistry.java", "diffHunk": "@@ -361,7 +359,8 @@ public void cacheComponents() {\n       backupSender = basicComponentRegistry.getComponent(BackupSender.class);\n       cache = basicComponentRegistry.getComponent(AdvancedCache.class);\n       cacheNotifier = basicComponentRegistry.getComponent(CacheNotifier.class);\n-      cancellationService = basicComponentRegistry.getComponent(CancellationService.class);\n+      cancellationService = basicComponentRegistry.registerComponent(CancellationService.class, new CancellationService() {", "originalCommit": "8848ae7a791a703a5744d60d2a95b7ba7ef7f0ac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9cef57268d49d77a668149ab9db14deeef7fc50e", "chunk": "diff --git a/core/src/main/java/org/infinispan/factories/ComponentRegistry.java b/core/src/main/java/org/infinispan/factories/ComponentRegistry.java\nindex 3ec43bb659..9207fb2994 100644\n--- a/core/src/main/java/org/infinispan/factories/ComponentRegistry.java\n+++ b/core/src/main/java/org/infinispan/factories/ComponentRegistry.java\n\n@@ -359,8 +357,6 @@ public void cacheComponents() {\n       backupSender = basicComponentRegistry.getComponent(BackupSender.class);\n       cache = basicComponentRegistry.getComponent(AdvancedCache.class);\n       cacheNotifier = basicComponentRegistry.getComponent(CacheNotifier.class);\n-      cancellationService = basicComponentRegistry.registerComponent(CancellationService.class, new CancellationService() {\n-      }, false);\n       conflictManager = basicComponentRegistry.getComponent(InternalConflictManager.class);\n       commandsFactory = basicComponentRegistry.getComponent(CommandsFactory.class);\n       clusterCacheNotifier = basicComponentRegistry.getComponent(ClusterCacheNotifier.class);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1ODI2Mw==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374458263", "bodyText": "I don't think this is needed on the originator: keyDataConversion and valueDataConversion are not private to the command, they're already wired, and even if wireDependencies is idempotent, it's not that cheap.\nSingleRpcCommand and PrepareCommand already init the sub-commands on the target nodes, you just need to add it in BackupWriteCommand.", "author": "danberindei", "createdAt": "2020-02-04T03:28:13Z", "path": "core/src/main/java/org/infinispan/interceptors/impl/AsyncInterceptorChainImpl.java", "diffHunk": "@@ -223,6 +223,7 @@ public void appendInterceptor(AsyncInterceptor ci, boolean isCustom) {\n    @Override\n    public CompletableFuture<Object> invokeAsync(InvocationContext ctx, VisitableCommand command) {\n       try {\n+         command.init(componentRegistry);", "originalCommit": "8848ae7a791a703a5744d60d2a95b7ba7ef7f0ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc5NDA0Ng==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374794046", "bodyText": "If we remove this, it's also necessary to call .init on the PrepareCommands modifications when invokeAsync(ComponentRegistry)", "author": "ryanemerson", "createdAt": "2020-02-04T16:51:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1ODI2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE5ODQ5Ng==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r375198496", "bodyText": "Right, I saw PrepareCommand calling init() on the modifications and I didn't realize it was in the init() method. But it should be safe to move that code to invokeAsync(), because we don't expect init() to be called on commands that are both CacheRpcCommand and VisitableCommand.", "author": "danberindei", "createdAt": "2020-02-05T11:20:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1ODI2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "9cef57268d49d77a668149ab9db14deeef7fc50e", "chunk": "diff --git a/core/src/main/java/org/infinispan/interceptors/impl/AsyncInterceptorChainImpl.java b/core/src/main/java/org/infinispan/interceptors/impl/AsyncInterceptorChainImpl.java\nindex ef369c8aa5..e830154b9d 100644\n--- a/core/src/main/java/org/infinispan/interceptors/impl/AsyncInterceptorChainImpl.java\n+++ b/core/src/main/java/org/infinispan/interceptors/impl/AsyncInterceptorChainImpl.java\n\n@@ -223,7 +223,6 @@ public void appendInterceptor(AsyncInterceptor ci, boolean isCustom) {\n    @Override\n    public CompletableFuture<Object> invokeAsync(InvocationContext ctx, VisitableCommand command) {\n       try {\n-         command.init(componentRegistry);\n          Object result = firstInterceptor.visitCommand(ctx, command);\n          if (result instanceof InvocationStage) {\n             return ((InvocationStage) result).toCompletableFuture();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ1ODY3Mw==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r374458673", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  return CompletableFutures.await(command.invokeAsync(componentRegistry));\n          \n          \n            \n                  throw new UnsupportedOperationException();", "author": "danberindei", "createdAt": "2020-02-04T03:30:33Z", "path": "core/src/main/java/org/infinispan/interceptors/impl/CallInterceptor.java", "diffHunk": "@@ -769,7 +772,7 @@ public Object visitLockControlCommand(TxInvocationContext ctx, LockControlComman\n \n    @Override\n    public Object visitUnknownCommand(InvocationContext ctx, VisitableCommand command) throws Throwable {\n-      return command.perform(ctx);\n+      return CompletableFutures.await(command.invokeAsync(componentRegistry));", "originalCommit": "8848ae7a791a703a5744d60d2a95b7ba7ef7f0ac", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9cef57268d49d77a668149ab9db14deeef7fc50e", "chunk": "diff --git a/core/src/main/java/org/infinispan/interceptors/impl/CallInterceptor.java b/core/src/main/java/org/infinispan/interceptors/impl/CallInterceptor.java\nindex 339e232e90..8e45b65191 100644\n--- a/core/src/main/java/org/infinispan/interceptors/impl/CallInterceptor.java\n+++ b/core/src/main/java/org/infinispan/interceptors/impl/CallInterceptor.java\n\n@@ -772,7 +771,7 @@ public Object visitLockControlCommand(TxInvocationContext ctx, LockControlComman\n \n    @Override\n    public Object visitUnknownCommand(InvocationContext ctx, VisitableCommand command) throws Throwable {\n-      return CompletableFutures.await(command.invokeAsync(componentRegistry));\n+      return command.invoke();\n    }\n \n    @Override\n"}}, {"oid": "9cef57268d49d77a668149ab9db14deeef7fc50e", "url": "https://github.com/infinispan/infinispan/commit/9cef57268d49d77a668149ab9db14deeef7fc50e", "message": "Use CompletionStage<?> invokeAsync(...)", "committedDate": "2020-02-05T12:32:41Z", "type": "forcePushed"}, {"oid": "a4f9b3608d6b1e9ba3ecd2de167f576f0c2c52e1", "url": "https://github.com/infinispan/infinispan/commit/a4f9b3608d6b1e9ba3ecd2de167f576f0c2c52e1", "message": "Use CompletionStage<?> invokeAsync(...)", "committedDate": "2020-02-05T12:46:18Z", "type": "forcePushed"}, {"oid": "f39224d5a1a9300c69ac4ef6c4229e960361bbb7", "url": "https://github.com/infinispan/infinispan/commit/f39224d5a1a9300c69ac4ef6c4229e960361bbb7", "message": "ISPN-11269 Remove CancellationService and CancelCommand", "committedDate": "2020-02-05T14:18:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTMyNDg3NA==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r375324874", "bodyText": "init() is not going to be called any more, unless you call it from invokeAsync.\nTBH I don't think we really need ':local' and ':remote' in GlobalTransaction.toString(), but that's for another PR.", "author": "danberindei", "createdAt": "2020-02-05T15:27:43Z", "path": "core/src/main/java/org/infinispan/commands/tx/PrepareCommand.java", "diffHunk": "@@ -68,21 +69,14 @@\n \n    protected WriteCommand[] modifications;\n    protected boolean onePhaseCommit;\n-   protected CacheNotifier notifier;\n-   protected RecoveryManager recoveryManager;\n    private transient boolean replayEntryWrapping  = false;\n    protected boolean retriedCommand;\n \n    private static final WriteCommand[] EMPTY_WRITE_COMMAND_ARRAY = new WriteCommand[0];\n \n    @Override\n-   public void init(ComponentRegistry componentRegistry, boolean isRemote) {\n-      super.init(componentRegistry, isRemote);\n-      this.notifier = componentRegistry.getCacheNotifier().running();\n-      this.recoveryManager = componentRegistry.getRecoveryManager().running();\n-\n-      for (ReplicableCommand nested : getModifications())\n-         componentRegistry.getCommandsFactory().initializeReplicableCommand(nested, false);\n+   public void init(ComponentRegistry componentRegistry) {\n+      markTransactionAsRemote(true);", "originalCommit": "f39224d5a1a9300c69ac4ef6c4229e960361bbb7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3b7b51c1e353d3ab2ca36476638816ce0bc78acc", "chunk": "diff --git a/core/src/main/java/org/infinispan/commands/tx/PrepareCommand.java b/core/src/main/java/org/infinispan/commands/tx/PrepareCommand.java\nindex 4b640ac204..6cc3eb952c 100644\n--- a/core/src/main/java/org/infinispan/commands/tx/PrepareCommand.java\n+++ b/core/src/main/java/org/infinispan/commands/tx/PrepareCommand.java\n\n@@ -74,11 +74,6 @@\n \n    private static final WriteCommand[] EMPTY_WRITE_COMMAND_ARRAY = new WriteCommand[0];\n \n-   @Override\n-   public void init(ComponentRegistry componentRegistry) {\n-      markTransactionAsRemote(true);\n-   }\n-\n    private PrepareCommand() {\n       super(null); // For command id uniqueness test\n    }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTMyOTI2NA==", "url": "https://github.com/infinispan/infinispan/pull/7748#discussion_r375329264", "bodyText": "Redundant cast", "author": "danberindei", "createdAt": "2020-02-05T15:34:09Z", "path": "core/src/main/java/org/infinispan/statetransfer/StateResponseCommand.java", "diffHunk": "@@ -77,20 +70,15 @@ public StateResponseCommand(ByteString cacheName, Address origin, int topologyId\n    }\n \n    @Override\n-   public void init(ComponentRegistry componentRegistry, boolean isRemote) {\n-      this.stateConsumer = componentRegistry.getStateTransferManager().getStateConsumer();\n-      this.stateReceiver = componentRegistry.getConflictManager().running().getStateReceiver();\n-   }\n-\n-   @Override\n-   public CompletableFuture<Object> invokeAsync() throws Throwable {\n+   public CompletionStage<?> invokeAsync(ComponentRegistry componentRegistry) throws Throwable {\n       final boolean trace = log.isTraceEnabled();\n       LogFactory.pushNDC(cacheName, trace);\n       try {\n          if (applyState) {\n-            return (CompletableFuture) stateConsumer.applyState(getOrigin(), topologyId, pushTransfer, stateChunks)\n-                                                    .toCompletableFuture();\n+            StateConsumer stateConsumer = componentRegistry.getStateTransferManager().getStateConsumer();\n+            return (CompletionStage) stateConsumer.applyState(getOrigin(), topologyId, pushTransfer, stateChunks);", "originalCommit": "f39224d5a1a9300c69ac4ef6c4229e960361bbb7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3b7b51c1e353d3ab2ca36476638816ce0bc78acc", "chunk": "diff --git a/core/src/main/java/org/infinispan/statetransfer/StateResponseCommand.java b/core/src/main/java/org/infinispan/statetransfer/StateResponseCommand.java\nindex 0ba63622d8..17b49f3467 100644\n--- a/core/src/main/java/org/infinispan/statetransfer/StateResponseCommand.java\n+++ b/core/src/main/java/org/infinispan/statetransfer/StateResponseCommand.java\n\n@@ -76,7 +76,7 @@ public StateResponseCommand(ByteString cacheName, Address origin, int topologyId\n       try {\n          if (applyState) {\n             StateConsumer stateConsumer = componentRegistry.getStateTransferManager().getStateConsumer();\n-            return (CompletionStage) stateConsumer.applyState(getOrigin(), topologyId, pushTransfer, stateChunks);\n+            return stateConsumer.applyState(getOrigin(), topologyId, pushTransfer, stateChunks);\n          } else {\n             StateReceiver stateReceiver = componentRegistry.getConflictManager().running().getStateReceiver();\n             stateReceiver.receiveState(getOrigin(), topologyId, stateChunks);\n"}}, {"oid": "3b7b51c1e353d3ab2ca36476638816ce0bc78acc", "url": "https://github.com/infinispan/infinispan/commit/3b7b51c1e353d3ab2ca36476638816ce0bc78acc", "message": "ISPN-10362 Unify command initialization and invocation\n\nDeprecate and remove usages of CommandsFactory::initializeReplicableCommand", "committedDate": "2020-02-05T16:26:32Z", "type": "commit"}, {"oid": "22fc807f549f9b59b987bddd28af56e031c26b31", "url": "https://github.com/infinispan/infinispan/commit/22fc807f549f9b59b987bddd28af56e031c26b31", "message": "ISPN-11111 Remove deprecated ModuleCommandInitializer", "committedDate": "2020-02-05T16:26:32Z", "type": "commit"}, {"oid": "797c3e8436e7bdaa8e7963eec92e9cfacd9d21cf", "url": "https://github.com/infinispan/infinispan/commit/797c3e8436e7bdaa8e7963eec92e9cfacd9d21cf", "message": "ISPN-11269 Remove CancellationService and CancelCommand", "committedDate": "2020-02-05T16:26:32Z", "type": "commit"}, {"oid": "797c3e8436e7bdaa8e7963eec92e9cfacd9d21cf", "url": "https://github.com/infinispan/infinispan/commit/797c3e8436e7bdaa8e7963eec92e9cfacd9d21cf", "message": "ISPN-11269 Remove CancellationService and CancelCommand", "committedDate": "2020-02-05T16:26:32Z", "type": "forcePushed"}]}