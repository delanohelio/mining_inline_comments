{"pr_number": 7857, "pr_title": "ISPN-11174 Add global and cache-level enable flag for microprofile metrics", "pr_createdAt": "2020-02-07T12:48:54Z", "pr_url": "https://github.com/infinispan/infinispan/pull/7857", "timeline": [{"oid": "396a0106f9e45fc5061f170246ade67f9f1c240b", "url": "https://github.com/infinispan/infinispan/commit/396a0106f9e45fc5061f170246ade67f9f1c240b", "message": "ISPN-11174 Add global and cache-level enable flag for microprofile metrics\n\n* rename JMXStatisticsConfiguration to StatisticsConfiguration", "committedDate": "2020-02-07T14:20:18Z", "type": "forcePushed"}, {"oid": "24687c61b2332fb9005032c02a6c976d25072eeb", "url": "https://github.com/infinispan/infinispan/commit/24687c61b2332fb9005032c02a6c976d25072eeb", "message": "ISPN-11174 Add global and cache-level enable flag for microprofile metrics\n\n* rename JMXStatisticsConfiguration to StatisticsConfiguration", "committedDate": "2020-02-10T11:56:36Z", "type": "forcePushed"}, {"oid": "064a6eae035c0a349f0c1a666495a080cadd7c9b", "url": "https://github.com/infinispan/infinispan/commit/064a6eae035c0a349f0c1a666495a080cadd7c9b", "message": "ISPN-11174 Add global and cache-level enable flag for microprofile metrics\n\n* rename ApplicationMetricsRegistry to InfinispanMetricsRegistry\n* rename JMXStatisticsConfiguration to StatisticsConfiguration", "committedDate": "2020-02-11T07:59:41Z", "type": "forcePushed"}, {"oid": "6b2eb2bd53da41d42c0a9ff84017017eae1e3bbd", "url": "https://github.com/infinispan/infinispan/commit/6b2eb2bd53da41d42c0a9ff84017017eae1e3bbd", "message": "ISPN-11174 Add global and cache-level enable flag for microprofile metrics\n\n* rename ApplicationMetricsRegistry to InfinispanMetricsRegistry\n* rename JMXStatisticsConfiguration to StatisticsConfiguration\n* rename ConfigurationBuilder.jmxStatistics() to statistics()", "committedDate": "2020-02-11T08:04:56Z", "type": "forcePushed"}, {"oid": "19b0960deecc8d5f5e500bd0f55f180ab0c845ed", "url": "https://github.com/infinispan/infinispan/commit/19b0960deecc8d5f5e500bd0f55f180ab0c845ed", "message": "ISPN-11174 Add global and cache-level enable flag for microprofile metrics\n\n* rename ApplicationMetricsRegistry to InfinispanMetricsRegistry\n* rename JMXStatisticsConfiguration to StatisticsConfiguration\n* rename ConfigurationBuilder.jmxStatistics() to statistics()", "committedDate": "2020-02-11T12:53:30Z", "type": "forcePushed"}, {"oid": "4323bc46db825d362b5738a4b43fa072a8b26aec", "url": "https://github.com/infinispan/infinispan/commit/4323bc46db825d362b5738a4b43fa072a8b26aec", "message": "ISPN-11174 Add global and cache-level enable flag for microprofile metrics\n\n* rename ApplicationMetricsRegistry to InfinispanMetricsRegistry\n* rename JMXStatisticsConfiguration to StatisticsConfiguration\n* rename ConfigurationBuilder.jmxStatistics() to statistics()", "committedDate": "2020-02-11T13:47:03Z", "type": "forcePushed"}, {"oid": "5b341c7fd8d3e62859835ae556451ef1ea2b98d2", "url": "https://github.com/infinispan/infinispan/commit/5b341c7fd8d3e62859835ae556451ef1ea2b98d2", "message": "ISPN-11174 Add global and cache-level enable flag for microprofile metrics\n\n* rename ApplicationMetricsRegistry to InfinispanMetricsRegistry\n* rename JMXStatisticsConfiguration to StatisticsConfiguration\n* rename ConfigurationBuilder.jmxStatistics() to statistics()", "committedDate": "2020-02-11T15:10:23Z", "type": "forcePushed"}, {"oid": "923f2404dbf321f505acc9b02a79a0d04b2e2c78", "url": "https://github.com/infinispan/infinispan/commit/923f2404dbf321f505acc9b02a79a0d04b2e2c78", "message": "ISPN-11174 Add global and cache-level enable flag for microprofile metrics\n\n* rename ApplicationMetricsRegistry to InfinispanMetricsRegistry\n* rename JMXStatisticsConfiguration to StatisticsConfiguration\n* rename ConfigurationBuilder.jmxStatistics() to statistics()", "committedDate": "2020-02-13T08:37:53Z", "type": "forcePushed"}, {"oid": "f64c5dced9f8ce29e6e72e924e3b68484af6f356", "url": "https://github.com/infinispan/infinispan/commit/f64c5dced9f8ce29e6e72e924e3b68484af6f356", "message": "ISPN-11174 Add global and cache-level enable flag for microprofile metrics\n\n* rename ApplicationMetricsRegistry to InfinispanMetricsRegistry\n* rename JMXStatisticsConfiguration to StatisticsConfiguration\n* rename ConfigurationBuilder.jmxStatistics() to statistics()", "committedDate": "2020-02-13T16:01:21Z", "type": "forcePushed"}, {"oid": "ceff70de7d782724b5028d58e8b5c7374d8c2c56", "url": "https://github.com/infinispan/infinispan/commit/ceff70de7d782724b5028d58e8b5c7374d8c2c56", "message": "ISPN-11174 Add global and cache-level enable flag for microprofile metrics\n\n* rename ApplicationMetricsRegistry to InfinispanMetricsRegistry\n* rename JMXStatisticsConfiguration to StatisticsConfiguration\n* rename ConfigurationBuilder.jmxStatistics() to statistics()\n* fix several 'configuration' test names", "committedDate": "2020-02-13T16:41:39Z", "type": "forcePushed"}, {"oid": "e24f9e49a9e27b46f828183bca00b119cfcc02e2", "url": "https://github.com/infinispan/infinispan/commit/e24f9e49a9e27b46f828183bca00b119cfcc02e2", "message": "ISPN-11174 Add global and cache-level enable flag for microprofile metrics\n\n* rename ApplicationMetricsRegistry to InfinispanMetricsRegistry\n* rename JMXStatisticsConfiguration to StatisticsConfiguration\n* rename ConfigurationBuilder.jmxStatistics() to statistics()\n* fix several 'configuration' test names", "committedDate": "2020-02-14T09:27:07Z", "type": "forcePushed"}, {"oid": "bb427b5d01a92b10273c8019635d56163d86f042", "url": "https://github.com/infinispan/infinispan/commit/bb427b5d01a92b10273c8019635d56163d86f042", "message": "wip", "committedDate": "2020-02-14T12:44:02Z", "type": "forcePushed"}, {"oid": "32f69237e822b7d9e22bca0a382e26b2c36914dd", "url": "https://github.com/infinispan/infinispan/commit/32f69237e822b7d9e22bca0a382e26b2c36914dd", "message": "wip", "committedDate": "2020-02-14T14:34:50Z", "type": "forcePushed"}, {"oid": "135f1f3e3ddf871e942d5fef0b4f36e8e92de930", "url": "https://github.com/infinispan/infinispan/commit/135f1f3e3ddf871e942d5fef0b4f36e8e92de930", "message": "wip", "committedDate": "2020-02-14T17:39:27Z", "type": "forcePushed"}, {"oid": "00b321e45cb6e09897ee6c15ef5abe524f4140f7", "url": "https://github.com/infinispan/infinispan/commit/00b321e45cb6e09897ee6c15ef5abe524f4140f7", "message": "wip", "committedDate": "2020-02-16T13:58:36Z", "type": "forcePushed"}, {"oid": "5173ee8c908f49968387f4a032d7eb9b3089e80d", "url": "https://github.com/infinispan/infinispan/commit/5173ee8c908f49968387f4a032d7eb9b3089e80d", "message": "wip", "committedDate": "2020-02-16T20:49:00Z", "type": "forcePushed"}, {"oid": "3909913e1aff019426f56ec23a47ba5a5a6d5c0e", "url": "https://github.com/infinispan/infinispan/commit/3909913e1aff019426f56ec23a47ba5a5a6d5c0e", "message": "wip", "committedDate": "2020-02-17T07:59:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA1NjUzMg==", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r380056532", "bodyText": "Replace with Util.threadLocalRandomUUID()", "author": "tristantarrant", "createdAt": "2020-02-17T09:06:33Z", "path": "core/src/main/java/org/infinispan/metrics/impl/CacheManagerMetricsRegistration.java", "diffHunk": "@@ -13,7 +13,17 @@\n public final class CacheManagerMetricsRegistration extends AbstractMetricsRegistration {\n \n    @Override\n-   protected String initPrefix() {\n+   protected String initNamePrefix() {\n       return \"CacheManager_\" + globalConfig.cacheManagerName();\n    }\n+\n+   @Override\n+   protected String initNodeName() {\n+      String nodeName = globalConfig.transport().nodeName();\n+      if (nodeName == null || nodeName.isEmpty()) {\n+         //TODO [anistor] ensure unique node name is set in all tests and also in real life usage\n+         nodeName = java.util.UUID.randomUUID().toString();", "originalCommit": "3909913e1aff019426f56ec23a47ba5a5a6d5c0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA2MDY0NA==", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r380060644", "bodyText": "This is executed once, on startup. Why bother with optimizations?", "author": "anistor", "createdAt": "2020-02-17T09:15:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA1NjUzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE3NDI3Mg==", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r380174272", "bodyText": "We want to do it in because of https://issues.redhat.com/browse/ISPN-11230", "author": "tristantarrant", "createdAt": "2020-02-17T13:14:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA1NjUzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMyMjg4MQ==", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r380322881", "bodyText": "So \"it computes an expensive cryptographic digest\". How expensive? Even if it's expensive it cannot cost a ton. Why do we care if it's done only once per cache manager? Can @danberindei elaborate a bit ?", "author": "anistor", "createdAt": "2020-02-17T18:30:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA1NjUzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM0Mzc2Ng==", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r380343766", "bodyText": "Ignore that for now.", "author": "tristantarrant", "createdAt": "2020-02-17T19:42:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA1NjUzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUwMzkxOQ==", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r380503919", "bodyText": "It's not too expensive to do once per cache manager, but IMO it's good to have a simple rule of using Util.threadLocalRandomUUID() everywhere instead of having long discussions about whether it's worth optimizing a particular call or not every single time.", "author": "danberindei", "createdAt": "2020-02-18T07:49:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA1NjUzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUwNDcyNA==", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r380504724", "bodyText": "I forgot to mention that I would have preferred to set the node name to hostname + random number when the user hasn't specified it, the way JGroups does it.", "author": "danberindei", "createdAt": "2020-02-18T07:51:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA1NjUzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTkyODI1NA==", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381928254", "bodyText": "Then I would gladly grab that generated string from JGroups rather than generating a new meaningless uuid myself. The intention was to have a meaningful tag per metric that traces back to the node that generated that data. Regarding the long discussion about perf implications of this vs that, they tend to get long only when they miss the point. This is not perf relevant code and we should not advocate use of our 'patched' versions of various jdk utils we have in our commons. Those are accidents and should not turn into irrelevant rules. -1.02 for that checkstyle rule or whatver gatekeeper you plan to set up.", "author": "anistor", "createdAt": "2020-02-20T10:59:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA1NjUzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk2NTY3NA==", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381965674", "bodyText": "If you can wait for JGroupsTransport to start and connect the channel, then yes, please do that. A random UUID won't trace back to the node that generated it, regardless of how those random bits are generated.", "author": "danberindei", "createdAt": "2020-02-20T12:22:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA1NjUzMg=="}], "type": "inlineReview", "revised_code": {"commit": "0c367bdd740afff63176fb8445192e7afe6b953b", "chunk": "diff --git a/core/src/main/java/org/infinispan/metrics/impl/CacheManagerMetricsRegistration.java b/core/src/main/java/org/infinispan/metrics/impl/CacheManagerMetricsRegistration.java\nindex e2d2b27216..fcc80ae69c 100644\n--- a/core/src/main/java/org/infinispan/metrics/impl/CacheManagerMetricsRegistration.java\n+++ b/core/src/main/java/org/infinispan/metrics/impl/CacheManagerMetricsRegistration.java\n\n@@ -23,7 +23,8 @@ protected String initNodeName() {\n       if (nodeName == null || nodeName.isEmpty()) {\n          //TODO [anistor] ensure unique node name is set in all tests and also in real life usage\n          nodeName = java.util.UUID.randomUUID().toString();\n+         //throw new CacheConfigurationException(\"Node name must be specified if metrics are enabled.\");\n       }\n-      return nodeName.replaceAll(\"[^\\\\w]+\", \"_\");\n+      return nodeName;\n    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA1Njk4NQ==", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r380056985", "bodyText": "StringBuilder !", "author": "tristantarrant", "createdAt": "2020-02-17T09:07:33Z", "path": "core/src/main/java/org/infinispan/metrics/impl/InfinispanMetricsRegistry.java", "diffHunk": "@@ -133,4 +123,16 @@ public void unregister(MetricID metricId) {\n                     metricId, System.identityHashCode(registry), registry.getMetrics().size());\n       }\n    }\n+\n+   private static final Pattern SNAKE_CASE_PATTERN = Pattern.compile(\"(?<=[a-z])[A-Z]\");\n+\n+   private static String decamelize(String s) {\n+      Matcher m = SNAKE_CASE_PATTERN.matcher(s);\n+      StringBuffer sb = new StringBuffer();", "originalCommit": "3909913e1aff019426f56ec23a47ba5a5a6d5c0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA2MTQyMg==", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r380061422", "bodyText": "I've just updated that. The problem is the Matcher method that takes a stringbuilder instead of stringbuffer is jdk 9. So I reimplemented that without Pattern/Matcher as it's not worth the hassle", "author": "anistor", "createdAt": "2020-02-17T09:16:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA1Njk4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "0c367bdd740afff63176fb8445192e7afe6b953b", "chunk": "diff --git a/core/src/main/java/org/infinispan/metrics/impl/InfinispanMetricsRegistry.java b/core/src/main/java/org/infinispan/metrics/impl/InfinispanMetricsRegistry.java\nindex 0ff492506e..a2f70b4baf 100644\n--- a/core/src/main/java/org/infinispan/metrics/impl/InfinispanMetricsRegistry.java\n+++ b/core/src/main/java/org/infinispan/metrics/impl/InfinispanMetricsRegistry.java\n\n@@ -124,15 +121,20 @@ public void unregister(MetricID metricId) {\n       }\n    }\n \n-   private static final Pattern SNAKE_CASE_PATTERN = Pattern.compile(\"(?<=[a-z])[A-Z]\");\n+   private static String filterIllegalChars(String name) {\n+      return name.replaceAll(\"[^\\\\w]+\", \"_\").replaceAll(\"_+\", \"_\");\n+   }\n \n-   private static String decamelize(String s) {\n-      Matcher m = SNAKE_CASE_PATTERN.matcher(s);\n-      StringBuffer sb = new StringBuffer();\n-      while (m.find()) {\n-         m.appendReplacement(sb, \"_\" + m.group());\n+   private static String decamelize(String name) {\n+      StringBuilder sb = new StringBuilder(name);\n+      for (int i = 1; i < sb.length(); i++) {\n+         if (Character.isUpperCase(sb.charAt(i))) {\n+            sb.insert(i++, '_');\n+            while (i < sb.length() && Character.isUpperCase(sb.charAt(i))) {\n+               i++;\n+            }\n+         }\n       }\n-      m.appendTail(sb);\n       return sb.toString().toLowerCase();\n    }\n }\n"}}, {"oid": "0c367bdd740afff63176fb8445192e7afe6b953b", "url": "https://github.com/infinispan/infinispan/commit/0c367bdd740afff63176fb8445192e7afe6b953b", "message": "wip", "committedDate": "2020-02-17T09:08:42Z", "type": "forcePushed"}, {"oid": "29c3052daa8f9adae194efbffc4b8ff6f72a33fa", "url": "https://github.com/infinispan/infinispan/commit/29c3052daa8f9adae194efbffc4b8ff6f72a33fa", "message": "ISPN-11174 Add global and cache-level enable flag for microprofile metrics\n\n* rename ApplicationMetricsRegistry to InfinispanMetricsRegistry\n* rename JMXStatisticsConfiguration to StatisticsConfiguration\n* rename ConfigurationBuilder.jmxStatistics() to statistics()\n* fix several 'configuration' test names", "committedDate": "2020-02-17T15:50:22Z", "type": "forcePushed"}, {"oid": "a3446c9a43dfc6e00b2b48dfcb66e9c8692539eb", "url": "https://github.com/infinispan/infinispan/commit/a3446c9a43dfc6e00b2b48dfcb66e9c8692539eb", "message": "WIP more and more hacks", "committedDate": "2020-02-17T20:45:00Z", "type": "forcePushed"}, {"oid": "f86c01a1414e24930ff24c88b197676b33fbf208", "url": "https://github.com/infinispan/infinispan/commit/f86c01a1414e24930ff24c88b197676b33fbf208", "message": "WIP more and more hacks", "committedDate": "2020-02-18T00:15:52Z", "type": "forcePushed"}, {"oid": "cf64323d79da41a7aa809ee1c871518fec6f4bfa", "url": "https://github.com/infinispan/infinispan/commit/cf64323d79da41a7aa809ee1c871518fec6f4bfa", "message": "WIP more and more hacks", "committedDate": "2020-02-18T00:18:14Z", "type": "forcePushed"}, {"oid": "b1afa0e18bbac91e7a4f6cab2cf738e493b9692f", "url": "https://github.com/infinispan/infinispan/commit/b1afa0e18bbac91e7a4f6cab2cf738e493b9692f", "message": "WIP more and more hacks", "committedDate": "2020-02-18T17:52:50Z", "type": "forcePushed"}, {"oid": "1e687654d29ee1f91cd1468b643e4d74548eda95", "url": "https://github.com/infinispan/infinispan/commit/1e687654d29ee1f91cd1468b643e4d74548eda95", "message": "WIP more and more hacks", "committedDate": "2020-02-19T18:07:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgxMTE4Mg==", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381811182", "bodyText": "IMO you need to change the author and add a @since tag", "author": "danberindei", "createdAt": "2020-02-20T06:50:50Z", "path": "core/src/main/java/org/infinispan/configuration/cache/StatisticsConfiguration.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package org.infinispan.configuration.cache;\n+\n+import org.infinispan.commons.configuration.ConfigurationInfo;\n+import org.infinispan.commons.configuration.attributes.Attribute;\n+import org.infinispan.commons.configuration.attributes.AttributeDefinition;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.commons.configuration.attributes.Matchable;\n+import org.infinispan.commons.configuration.elements.DefaultElementDefinition;\n+import org.infinispan.commons.configuration.elements.ElementDefinition;\n+\n+/**\n+ * Determines whether statistics are gather and reported.\n+ *\n+ * @author pmuir", "originalCommit": "1e687654d29ee1f91cd1468b643e4d74548eda95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTkzNjE3MQ==", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381936171", "bodyText": "I'll add a since tag and REMOVE the author :)", "author": "anistor", "createdAt": "2020-02-20T11:16:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgxMTE4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "09fcde29c9fc9eb54ade5db9b9000d9706f6e67d", "chunk": "diff --git a/core/src/main/java/org/infinispan/configuration/cache/StatisticsConfiguration.java b/core/src/main/java/org/infinispan/configuration/cache/StatisticsConfiguration.java\nindex 7f01e0dd72..b6b83bf07d 100644\n--- a/core/src/main/java/org/infinispan/configuration/cache/StatisticsConfiguration.java\n+++ b/core/src/main/java/org/infinispan/configuration/cache/StatisticsConfiguration.java\n\n@@ -1,6 +1,5 @@\n package org.infinispan.configuration.cache;\n \n-import org.infinispan.commons.configuration.ConfigurationInfo;\n import org.infinispan.commons.configuration.attributes.Attribute;\n import org.infinispan.commons.configuration.attributes.AttributeDefinition;\n import org.infinispan.commons.configuration.attributes.AttributeSet;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgxMTcxOQ==", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381811719", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Determines whether statistics are gather and reported.\n          \n          \n            \n             * Determines whether statistics are gathered and reported.\n          \n      \n    \n    \n  \n\nAlso @author and @since", "author": "danberindei", "createdAt": "2020-02-20T06:51:48Z", "path": "core/src/main/java/org/infinispan/configuration/cache/StatisticsConfigurationBuilder.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.infinispan.configuration.cache;\n+\n+import static org.infinispan.configuration.cache.StatisticsConfiguration.AVAILABLE;\n+import static org.infinispan.configuration.cache.StatisticsConfiguration.ELEMENT_DEFINITION;\n+import static org.infinispan.configuration.cache.StatisticsConfiguration.ENABLED;\n+import static org.infinispan.util.logging.Log.CONFIG;\n+\n+import org.infinispan.commons.configuration.Builder;\n+import org.infinispan.commons.configuration.ConfigurationBuilderInfo;\n+import org.infinispan.commons.configuration.attributes.Attribute;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.commons.configuration.elements.ElementDefinition;\n+import org.infinispan.configuration.global.GlobalConfiguration;\n+\n+/**\n+ * Determines whether statistics are gather and reported.", "originalCommit": "1e687654d29ee1f91cd1468b643e4d74548eda95", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "09fcde29c9fc9eb54ade5db9b9000d9706f6e67d", "chunk": "diff --git a/core/src/main/java/org/infinispan/configuration/cache/StatisticsConfigurationBuilder.java b/core/src/main/java/org/infinispan/configuration/cache/StatisticsConfigurationBuilder.java\nindex 5f49cc9cc9..ea968449ee 100644\n--- a/core/src/main/java/org/infinispan/configuration/cache/StatisticsConfigurationBuilder.java\n+++ b/core/src/main/java/org/infinispan/configuration/cache/StatisticsConfigurationBuilder.java\n\n@@ -6,18 +6,18 @@\n import static org.infinispan.util.logging.Log.CONFIG;\n \n import org.infinispan.commons.configuration.Builder;\n-import org.infinispan.commons.configuration.ConfigurationBuilderInfo;\n import org.infinispan.commons.configuration.attributes.Attribute;\n import org.infinispan.commons.configuration.attributes.AttributeSet;\n import org.infinispan.commons.configuration.elements.ElementDefinition;\n import org.infinispan.configuration.global.GlobalConfiguration;\n \n /**\n- * Determines whether statistics are gather and reported.\n+ * Determines whether cache statistics are gathered.\n  *\n- * @author pmuir\n+ * @since 10.1.3\n  */\n-public class StatisticsConfigurationBuilder extends AbstractConfigurationChildBuilder implements Builder<StatisticsConfiguration>, ConfigurationBuilderInfo, JMXStatisticsConfigurationBuilder {\n+public class StatisticsConfigurationBuilder extends JMXStatisticsConfigurationBuilder implements Builder<StatisticsConfiguration> {\n+\n    private final AttributeSet attributes;\n \n    StatisticsConfigurationBuilder(ConfigurationBuilder builder) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgxMjI1Nw==", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381812257", "bodyText": "I thought you wanted to end this practice, Adrian?", "author": "danberindei", "createdAt": "2020-02-20T06:53:21Z", "path": "core/src/main/java/org/infinispan/configuration/global/AbstractGlobalConfigurationBuilder.java", "diffHunk": "@@ -22,9 +22,15 @@ public TransportConfigurationBuilder transport() {\n    }\n \n    @Override\n-   public GlobalJmxStatisticsConfigurationBuilder globalJmxStatistics() {\n-      globalConfig.globalJmxStatistics().enable();\n-      return globalConfig.globalJmxStatistics();\n+   public GlobalMetricsConfigurationBuilder metrics() {\n+      globalConfig.metrics().gauges(true);", "originalCommit": "1e687654d29ee1f91cd1468b643e4d74548eda95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk0NzA5Mg==", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381947092", "bodyText": "indeed. that was a leftover.", "author": "anistor", "createdAt": "2020-02-20T11:40:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgxMjI1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "09fcde29c9fc9eb54ade5db9b9000d9706f6e67d", "chunk": "diff --git a/core/src/main/java/org/infinispan/configuration/global/AbstractGlobalConfigurationBuilder.java b/core/src/main/java/org/infinispan/configuration/global/AbstractGlobalConfigurationBuilder.java\nindex 832aac5ac6..fcdc56626a 100644\n--- a/core/src/main/java/org/infinispan/configuration/global/AbstractGlobalConfigurationBuilder.java\n+++ b/core/src/main/java/org/infinispan/configuration/global/AbstractGlobalConfigurationBuilder.java\n\n@@ -23,7 +23,6 @@ public TransportConfigurationBuilder transport() {\n \n    @Override\n    public GlobalMetricsConfigurationBuilder metrics() {\n-      globalConfig.metrics().gauges(true);\n       return globalConfig.metrics();\n    }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgxNDE0MA==", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381814140", "bodyText": "Could you use an abstract class instead? I don't think changing a class to an interface preserves binary compatibility.", "author": "danberindei", "createdAt": "2020-02-20T06:59:52Z", "path": "core/src/main/java/org/infinispan/configuration/cache/JMXStatisticsConfiguration.java", "diffHunk": "@@ -1,94 +1,18 @@\n package org.infinispan.configuration.cache;\n \n-import org.infinispan.commons.configuration.ConfigurationInfo;\n-import org.infinispan.commons.configuration.attributes.Attribute;\n-import org.infinispan.commons.configuration.attributes.AttributeDefinition;\n-import org.infinispan.commons.configuration.attributes.AttributeSet;\n-import org.infinispan.commons.configuration.attributes.Matchable;\n-import org.infinispan.commons.configuration.elements.DefaultElementDefinition;\n-import org.infinispan.commons.configuration.elements.ElementDefinition;\n-\n /**\n- * Determines whether statistics are gather and reported.\n- *\n- * @author pmuir\n- *\n+ * @deprecated since 10.1.3. Use {@link StatisticsConfiguration} instead. This will be removed in next major version.\n  */\n-public class JMXStatisticsConfiguration implements Matchable<JMXStatisticsConfiguration>, ConfigurationInfo {\n-\n-   public static final AttributeDefinition<Boolean> ENABLED = AttributeDefinition.builder(\"enabled\", false).xmlName(\"statistics\")\n-         .build();\n-   public static final AttributeDefinition<Boolean> AVAILABLE = AttributeDefinition.builder(\"available\", true).xmlName(\"statistics-available\").build();\n-   static AttributeSet attributeDefinitionSet() {\n-      return new AttributeSet(JMXStatisticsConfiguration.class, ENABLED, AVAILABLE);\n-   }\n+@Deprecated\n+public interface JMXStatisticsConfiguration {", "originalCommit": "1e687654d29ee1f91cd1468b643e4d74548eda95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk0ODY1NA==", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381948654", "bodyText": "I don't think we care for binary compat in this case. This PR changes a lot more in ways that would not even be source compatible.", "author": "anistor", "createdAt": "2020-02-20T11:44:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgxNDE0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAwMDYyNg==", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r382000626", "bodyText": "I think this is actually the only place where binary compatibility is broken.", "author": "danberindei", "createdAt": "2020-02-20T13:35:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgxNDE0MA=="}], "type": "inlineReview", "revised_code": {"commit": "09fcde29c9fc9eb54ade5db9b9000d9706f6e67d", "chunk": "diff --git a/core/src/main/java/org/infinispan/configuration/cache/JMXStatisticsConfiguration.java b/core/src/main/java/org/infinispan/configuration/cache/JMXStatisticsConfiguration.java\nindex cd15e5ae8e..2b2135235c 100644\n--- a/core/src/main/java/org/infinispan/configuration/cache/JMXStatisticsConfiguration.java\n+++ b/core/src/main/java/org/infinispan/configuration/cache/JMXStatisticsConfiguration.java\n\n@@ -1,12 +1,17 @@\n package org.infinispan.configuration.cache;\n \n+import org.infinispan.commons.configuration.ConfigurationInfo;\n+\n /**\n+ * Determines whether cache statistics are gathered.\n+ *\n+ * @author pmuir\n  * @deprecated since 10.1.3. Use {@link StatisticsConfiguration} instead. This will be removed in next major version.\n  */\n @Deprecated\n-public interface JMXStatisticsConfiguration {\n+public abstract class JMXStatisticsConfiguration implements ConfigurationInfo {\n \n-   boolean enabled();\n+   public abstract boolean enabled();\n \n    /**\n     * If set to false, statistics gathering cannot be enabled during runtime. Performance optimization.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgxNDMwNg==", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381814306", "bodyText": "Missing javadoc", "author": "danberindei", "createdAt": "2020-02-20T07:00:26Z", "path": "core/src/main/java/org/infinispan/configuration/global/GlobalMetricsConfiguration.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package org.infinispan.configuration.global;\n+\n+import org.infinispan.commons.configuration.ConfigurationInfo;\n+import org.infinispan.commons.configuration.attributes.Attribute;\n+import org.infinispan.commons.configuration.attributes.AttributeDefinition;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.commons.configuration.elements.DefaultElementDefinition;\n+import org.infinispan.commons.configuration.elements.ElementDefinition;\n+import org.infinispan.configuration.parsing.Element;\n+\n+public class GlobalMetricsConfiguration implements ConfigurationInfo {", "originalCommit": "1e687654d29ee1f91cd1468b643e4d74548eda95", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "05b5f592ad7a63f80703f2f17393e3e10bf80c65", "chunk": "diff --git a/core/src/main/java/org/infinispan/configuration/global/GlobalMetricsConfiguration.java b/core/src/main/java/org/infinispan/configuration/global/GlobalMetricsConfiguration.java\ndeleted file mode 100644\nindex 8facf5bf1f..0000000000\n--- a/core/src/main/java/org/infinispan/configuration/global/GlobalMetricsConfiguration.java\n+++ /dev/null\n\n@@ -1,84 +0,0 @@\n-package org.infinispan.configuration.global;\n-\n-import org.infinispan.commons.configuration.ConfigurationInfo;\n-import org.infinispan.commons.configuration.attributes.Attribute;\n-import org.infinispan.commons.configuration.attributes.AttributeDefinition;\n-import org.infinispan.commons.configuration.attributes.AttributeSet;\n-import org.infinispan.commons.configuration.elements.DefaultElementDefinition;\n-import org.infinispan.commons.configuration.elements.ElementDefinition;\n-import org.infinispan.configuration.parsing.Element;\n-\n-public class GlobalMetricsConfiguration implements ConfigurationInfo {\n-\n-   public static final AttributeDefinition<Boolean> GAUGES = AttributeDefinition.builder(\"gauges\", true).immutable().build();\n-   public static final AttributeDefinition<Boolean> HISTOGRAMS = AttributeDefinition.builder(\"histograms\", false).immutable().build();\n-   public static final AttributeDefinition<String> PREFIX = AttributeDefinition.builder(\"prefix\", \"\").immutable().build();\n-\n-   static AttributeSet attributeDefinitionSet() {\n-      return new AttributeSet(GlobalMetricsConfiguration.class, GAUGES, HISTOGRAMS, PREFIX);\n-   }\n-\n-   private static final ElementDefinition<GlobalMetricsConfiguration> ELEMENT_DEFINITION = new DefaultElementDefinition<>(Element.METRICS.getLocalName());\n-\n-   private final AttributeSet attributes;\n-\n-   private final Attribute<Boolean> gauges;\n-\n-   private final Attribute<Boolean> histograms;\n-\n-   private final Attribute<String> prefix;\n-\n-   GlobalMetricsConfiguration(AttributeSet attributes) {\n-      this.attributes = attributes.checkProtection();\n-      this.gauges = attributes.attribute(GAUGES);\n-      this.histograms = attributes.attribute(HISTOGRAMS);\n-      this.prefix = attributes.attribute(PREFIX);\n-   }\n-\n-   @Override\n-   public ElementDefinition<GlobalMetricsConfiguration> getElementDefinition() {\n-      return ELEMENT_DEFINITION;\n-   }\n-\n-   @Override\n-   public AttributeSet attributes() {\n-      return attributes;\n-   }\n-\n-   /**\n-    * Metrics are enabled if at least one of the metric types is enabled. See {@link #gauges()}, {@link #histograms()}.\n-    */\n-   public boolean enabled() {\n-      return gauges() || histograms();\n-   }\n-\n-   public boolean gauges() {\n-      return gauges.get();\n-   }\n-\n-   public boolean histograms() {\n-      return histograms.get();\n-   }\n-\n-   public String prefix() {\n-      return prefix.get();\n-   }\n-\n-   @Override\n-   public boolean equals(Object o) {\n-      if (this == o) return true;\n-      if (o == null || getClass() != o.getClass()) return false;\n-      GlobalMetricsConfiguration that = (GlobalMetricsConfiguration) o;\n-      return attributes != null ? attributes.equals(that.attributes) : that.attributes == null;\n-   }\n-\n-   @Override\n-   public int hashCode() {\n-      return attributes != null ? attributes.hashCode() : 0;\n-   }\n-\n-   @Override\n-   public String toString() {\n-      return \"GlobalMetricsConfiguration{attributes=\" + attributes + '}';\n-   }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgxNzg0OQ==", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381817849", "bodyText": "@wburns is the if enough for Quarkus to not balk on the ObjectName static initializer?", "author": "danberindei", "createdAt": "2020-02-20T07:12:02Z", "path": "core/src/main/java/org/infinispan/remoting/transport/jgroups/JGroupsTransport.java", "diffHunk": "@@ -538,10 +540,9 @@ private void registerMBeansIfNeeded(String clusterName) {\n          // Normally this would be done by CacheManagerJmxRegistration but\n          // the channel is not started when the cache manager starts but\n          // when first cache starts, so it's safer to do it here.\n-         globalStatsEnabled = configuration.statistics();\n-         if (globalStatsEnabled) {\n-            // TODO Use the overloaded variant when available: https://issues.jboss.org/browse/JGRP-2394\n-            JmxConfigurator.registerChannel(channel, jmxRegistration.getMBeanServer(), jmxRegistration.getDomain(), clusterName, true);\n+         if (configuration.jmx().enabled()) {\n+            ObjectName namePrefix = new ObjectName(jmxRegistration.getDomain() + \":\" + ObjectNameKeys.MANAGER + \"=\" + ObjectName.quote(configuration.cacheManagerName()));", "originalCommit": "1e687654d29ee1f91cd1468b643e4d74548eda95", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "05b5f592ad7a63f80703f2f17393e3e10bf80c65", "chunk": "diff --git a/core/src/main/java/org/infinispan/remoting/transport/jgroups/JGroupsTransport.java b/core/src/main/java/org/infinispan/remoting/transport/jgroups/JGroupsTransport.java\nindex 9378415702..cfda5bf0fc 100644\n--- a/core/src/main/java/org/infinispan/remoting/transport/jgroups/JGroupsTransport.java\n+++ b/core/src/main/java/org/infinispan/remoting/transport/jgroups/JGroupsTransport.java\n\n@@ -540,7 +541,8 @@ private void registerMBeansIfNeeded(String clusterName) {\n          // Normally this would be done by CacheManagerJmxRegistration but\n          // the channel is not started when the cache manager starts but\n          // when first cache starts, so it's safer to do it here.\n-         if (configuration.jmx().enabled()) {\n+         globalStatsEnabled = configuration.statistics();\n+         if (globalStatsEnabled) {\n             ObjectName namePrefix = new ObjectName(jmxRegistration.getDomain() + \":\" + ObjectNameKeys.MANAGER + \"=\" + ObjectName.quote(configuration.cacheManagerName()));\n             JmxConfigurator.registerChannel(channel, jmxRegistration.getMBeanServer(), namePrefix, clusterName, true);\n          }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgxODExNg==", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381818116", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @MBean(objectName = ClusterCacheStats.OBJECT_NAME, description = \"General cluster statistics such as timings, hit/miss ratio, etc. for a cache.\")\n          \n          \n            \n            @MBean(objectName = ClusterCacheStats.OBJECT_NAME, description = \"General clustered cache statistics such as timings, hit/miss ratio, etc.\")", "author": "danberindei", "createdAt": "2020-02-20T07:12:53Z", "path": "core/src/main/java/org/infinispan/stats/impl/ClusterCacheStatsImpl.java", "diffHunk": "@@ -71,7 +71,7 @@\n import org.infinispan.util.logging.Log;\n import org.infinispan.util.logging.LogFactory;\n \n-@MBean(objectName = ClusterCacheStats.OBJECT_NAME, description = \"General cluster statistics such as timings, hit/miss ratio, etc.\")\n+@MBean(objectName = ClusterCacheStats.OBJECT_NAME, description = \"General cluster statistics such as timings, hit/miss ratio, etc. for a cache.\")", "originalCommit": "1e687654d29ee1f91cd1468b643e4d74548eda95", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "05b5f592ad7a63f80703f2f17393e3e10bf80c65", "chunk": "diff --git a/core/src/main/java/org/infinispan/stats/impl/ClusterCacheStatsImpl.java b/core/src/main/java/org/infinispan/stats/impl/ClusterCacheStatsImpl.java\nindex ac08b9c631..287229c195 100644\n--- a/core/src/main/java/org/infinispan/stats/impl/ClusterCacheStatsImpl.java\n+++ b/core/src/main/java/org/infinispan/stats/impl/ClusterCacheStatsImpl.java\n\n@@ -71,7 +71,7 @@\n import org.infinispan.util.logging.Log;\n import org.infinispan.util.logging.LogFactory;\n \n-@MBean(objectName = ClusterCacheStats.OBJECT_NAME, description = \"General cluster statistics such as timings, hit/miss ratio, etc. for a cache.\")\n+@MBean(objectName = ClusterCacheStats.OBJECT_NAME, description = \"General cluster statistics such as timings, hit/miss ratio, etc.\")\n @Scope(Scopes.NAMED_CACHE)\n public class ClusterCacheStatsImpl extends AbstractClusterStats implements ClusterCacheStats {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyMjA3Nw==", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381822077", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               @ManagedAttribute(description = \"Required minimum number of nodes to guarantee data consistency\",\n          \n          \n            \n               @ManagedAttribute(description = \"Required minimum number of nodes to hold current cache data\",\n          \n      \n    \n    \n  \n\nI know this is copied from CacheMgmtInterceptor/Stats, but it's not really true: if the cluster has 5 nodes and this attribute says 2 nodes would be enough to hold all the data, killing 3 nodes at once will absolutely lose data in a distributed cache with numOwners < 4.\nThe attribute also returns a valid number when the eviction strategy is REMOVE, which will also lose data if you reduce the number of nodes and then insert new entries.", "author": "danberindei", "createdAt": "2020-02-20T07:24:39Z", "path": "core/src/main/java/org/infinispan/stats/impl/ClusterCacheStatsImpl.java", "diffHunk": "@@ -199,6 +199,9 @@ public long getAverageWriteTimeNanos() {\n       return getStatAsLong(AVERAGE_WRITE_TIME_NANOS);\n    }\n \n+   @ManagedAttribute(description = \"Required minimum number of nodes to guarantee data consistency\",", "originalCommit": "1e687654d29ee1f91cd1468b643e4d74548eda95", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "05b5f592ad7a63f80703f2f17393e3e10bf80c65", "chunk": "diff --git a/core/src/main/java/org/infinispan/stats/impl/ClusterCacheStatsImpl.java b/core/src/main/java/org/infinispan/stats/impl/ClusterCacheStatsImpl.java\nindex ac08b9c631..287229c195 100644\n--- a/core/src/main/java/org/infinispan/stats/impl/ClusterCacheStatsImpl.java\n+++ b/core/src/main/java/org/infinispan/stats/impl/ClusterCacheStatsImpl.java\n\n@@ -199,9 +199,6 @@ public long getAverageWriteTimeNanos() {\n       return getStatAsLong(AVERAGE_WRITE_TIME_NANOS);\n    }\n \n-   @ManagedAttribute(description = \"Required minimum number of nodes to guarantee data consistency\",\n-         displayName = \"Required minimum number of nodes\"\n-   )\n    @Override\n    public int getRequiredMinimumNumberOfNodes() {\n       return getStatAsInt(REQUIRED_MIN_NODES);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyNDUxMQ==", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381824511", "bodyText": "-1 for removing throws clauses in tests, it's too much noise adding and removing exceptions all the time.\nYou can edit the inspection settings in IntelliJ to \"Ignore exceptions thrown by entry point methods\" instead.", "author": "danberindei", "createdAt": "2020-02-20T07:32:03Z", "path": "core/src/test/java/org/infinispan/configuration/ConfigurationUnitTest.java", "diffHunk": "@@ -81,7 +81,7 @@ public void testDistSyncAutoCommit() {\n    }\n \n    @Test\n-   public void testDummyTMGetCache() throws Exception {", "originalCommit": "1e687654d29ee1f91cd1468b643e4d74548eda95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk1MzM5Mw==", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381953393", "bodyText": "It's already done. And I could probably tolerate those in tests but not production code. -1 for crying over spilled milk", "author": "anistor", "createdAt": "2020-02-20T11:54:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyNDUxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk2Njg1MA==", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381966850", "bodyText": "Since the changes are just noise, what's some more noise on top of it in the form of PR comments? :P", "author": "danberindei", "createdAt": "2020-02-20T12:24:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyNDUxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk3Mzg5Mw==", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381973893", "bodyText": "More please!", "author": "anistor", "createdAt": "2020-02-20T12:40:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyNDUxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "05b5f592ad7a63f80703f2f17393e3e10bf80c65", "chunk": "diff --git a/core/src/test/java/org/infinispan/configuration/ConfigurationUnitTest.java b/core/src/test/java/org/infinispan/configuration/ConfigurationUnitTest.java\nindex 6c8ddb0e50..8665e0af45 100644\n--- a/core/src/test/java/org/infinispan/configuration/ConfigurationUnitTest.java\n+++ b/core/src/test/java/org/infinispan/configuration/ConfigurationUnitTest.java\n\n@@ -81,7 +81,7 @@ public void testDistSyncAutoCommit() {\n    }\n \n    @Test\n-   public void testDummyTMGetCache() {\n+   public void testDummyTMGetCache() throws Exception {\n       ConfigurationBuilder cb = new ConfigurationBuilder();\n       cb.transaction().use1PcForAutoCommitTransactions(true)\n             .transactionManagerLookup(new EmbeddedTransactionManagerLookup());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyNTYzMg==", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381825632", "bodyText": "That comment is definitely wrong now.\nFunny enough, the commit disabling stats says \"ISPN-8651 Add statistics for functional commands\" :)", "author": "danberindei", "createdAt": "2020-02-20T07:35:11Z", "path": "core/src/test/java/org/infinispan/functional/AbstractFunctionalTest.java", "diffHunk": "@@ -68,8 +68,7 @@ protected void createCacheManagers() throws Throwable {\n \n    protected void configureCache(ConfigurationBuilder builder) {\n       // Make sure there are no errors when counting stats\n-//      builder.jmxStatistics().enabled(true);\n-      builder.jmxStatistics().available(false);\n+      builder.statistics().available(false);", "originalCommit": "1e687654d29ee1f91cd1468b643e4d74548eda95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk2MjQyNg==", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381962426", "bodyText": "If Radim did indeed add that support then the comment should go away and also builder.statistics().available(false) should go. Making stats unavailable was originally meant to remove the CacheMgmtInterceptor from the chain because it did not play well with functional commands. I remember CCE and great fire. But this supposedly works in 2020. Let me try to make them enabled and have a local run.", "author": "anistor", "createdAt": "2020-02-20T12:14:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyNTYzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk3MTc3MA==", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381971770", "bodyText": "The available attribute was actually added in ISPN-5542 Shorten interceptor stack for local caches, and if you read the JIRA comments it's obvious that it was motivated by Radim's Hibernate 2LC work.\nSorry if I mislead you, it just seemed funny to me that a commit adding support for statistics would actually change a test to disable statistics. And I'm pretty sure the ClassCastExceptions started appearing after ISPN-8651 went in :)", "author": "danberindei", "createdAt": "2020-02-20T12:35:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyNTYzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk3Nzk4Mg==", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381977982", "bodyText": "Enabling stats there seems to work now :)))", "author": "anistor", "createdAt": "2020-02-20T12:49:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyNTYzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk5MzY4Mw==", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381993683", "bodyText": "That's good to know, I don't see any tests specifically looking at stats in functional maps.", "author": "danberindei", "createdAt": "2020-02-20T13:22:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyNTYzMg=="}], "type": "inlineReview", "revised_code": {"commit": "09fcde29c9fc9eb54ade5db9b9000d9706f6e67d", "chunk": "diff --git a/core/src/test/java/org/infinispan/functional/AbstractFunctionalTest.java b/core/src/test/java/org/infinispan/functional/AbstractFunctionalTest.java\nindex f3b8b7239c..acdfe3d9c2 100644\n--- a/core/src/test/java/org/infinispan/functional/AbstractFunctionalTest.java\n+++ b/core/src/test/java/org/infinispan/functional/AbstractFunctionalTest.java\n\n@@ -67,8 +67,7 @@ protected void createCacheManagers() throws Throwable {\n    }\n \n    protected void configureCache(ConfigurationBuilder builder) {\n-      // Make sure there are no errors when counting stats\n-      builder.statistics().available(false);\n+      builder.statistics().enabled(true);\n       if (transactional != null) {\n          builder.transaction().transactionMode(transactionMode());\n          if (lockingMode != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyNzA2Mg==", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381827062", "bodyText": "Isn't the UUID in CacheManagerMetricsRegistration supposed to fix this?\nIf a test sets a node name and sets the same name for 2 nodes (or 2 different tests set the same name) then the test should be fixed.", "author": "danberindei", "createdAt": "2020-02-20T07:39:16Z", "path": "server/rest/src/main/java/org/infinispan/rest/resources/MetricsResource.java", "diffHunk": "@@ -31,11 +35,20 @@\n  */\n public final class MetricsResource implements ResourceHandler {\n \n+   private final static Log log = LogFactory.getLog(MetricsResource.class, Log.class);\n+\n    private static final String METRICS_PATH = \"/metrics\";\n \n    private final MetricsRequestHandler requestHandler = new MetricsRequestHandler();\n \n    public MetricsResource() {\n+      try {\n+         new JmxRegistrar().init();\n+      } catch (IOException | IllegalArgumentException e) {\n+         // Smallrye uses a global singleton registry which is a nightmare for tests where more than one\n+         // server has to exist in a single JVM. It fails and we can't do anything about it.", "originalCommit": "1e687654d29ee1f91cd1468b643e4d74548eda95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk2ODUyNA==", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381968524", "bodyText": "Metrics produced by JmxRegistrar do not have that tag because ... we're using an internal smallrye utility class which was not created for public consumption so it's not that flexible. And quite frankly such a unique tag would just allow us to (wrongly) register duplicates of metrics that are really just JVM monitoring data. That's what JmxRegistrar produces. Once is enough. All further attempts will fail. Benign error -> ignore. Explicitly testing for presence of a metric and registering it only if not found is a source of race conditions. The MetricRegistry also does not provide any putIfAbsent semantics. Life sucks.", "author": "anistor", "createdAt": "2020-02-20T12:28:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyNzA2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk4NTk2OA==", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381985968", "bodyText": "IMO if it's ok for the registration to fail, then we shouldn't log it as an error, and the comment should mention why it's ok for it to fail.", "author": "danberindei", "createdAt": "2020-02-20T13:06:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyNzA2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "05b5f592ad7a63f80703f2f17393e3e10bf80c65", "chunk": "diff --git a/server/rest/src/main/java/org/infinispan/rest/resources/MetricsResource.java b/server/rest/src/main/java/org/infinispan/rest/resources/MetricsResource.java\nindex 59fb846411..88f9ce6108 100644\n--- a/server/rest/src/main/java/org/infinispan/rest/resources/MetricsResource.java\n+++ b/server/rest/src/main/java/org/infinispan/rest/resources/MetricsResource.java\n\n@@ -35,20 +31,11 @@\n  */\n public final class MetricsResource implements ResourceHandler {\n \n-   private final static Log log = LogFactory.getLog(MetricsResource.class, Log.class);\n-\n    private static final String METRICS_PATH = \"/metrics\";\n \n    private final MetricsRequestHandler requestHandler = new MetricsRequestHandler();\n \n    public MetricsResource() {\n-      try {\n-         new JmxRegistrar().init();\n-      } catch (IOException | IllegalArgumentException e) {\n-         // Smallrye uses a global singleton registry which is a nightmare for tests where more than one\n-         // server has to exist in a single JVM. It fails and we can't do anything about it.\n-         log.failedToInitBaseAndVendorMetrics(e);\n-      }\n    }\n \n    @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyODM4Mg==", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381828382", "bodyText": "WildFly was never into JMX, do nothing I guess /cc @tristantarrant", "author": "danberindei", "createdAt": "2020-02-20T07:43:16Z", "path": "wildfly/infinispan/src/main/java/org/jboss/as/clustering/infinispan/subsystem/CacheConfigurationService.java", "diffHunk": "@@ -71,8 +72,9 @@ protected ConfigurationBuilder getConfigurationBuilder() {\n         builder.read(configuration);\n         builder.template(configuration.isTemplate());\n \n-       boolean jmxEnabled = SecurityActions.getCacheManagerConfiguration(dependencies.getCacheContainer()).statistics();\n-       builder.jmxStatistics().enabled(jmxEnabled);\n+        GlobalConfiguration globalConfiguration = SecurityActions.getCacheManagerConfiguration(dependencies.getCacheContainer());\n+        builder.statistics().enabled(globalConfiguration.statistics());\n+        // TODO [anistor] what about JMX ???", "originalCommit": "1e687654d29ee1f91cd1468b643e4d74548eda95", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg1NjcxOA==", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381856718", "bodyText": "WildFly does expose the DMR as JMX as well as expose the MBeanServer to subsystems. But this code is going to be dropped, so ignore.", "author": "tristantarrant", "createdAt": "2020-02-20T08:49:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgyODM4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "05b5f592ad7a63f80703f2f17393e3e10bf80c65", "chunk": "diff --git a/wildfly/infinispan/src/main/java/org/jboss/as/clustering/infinispan/subsystem/CacheConfigurationService.java b/wildfly/infinispan/src/main/java/org/jboss/as/clustering/infinispan/subsystem/CacheConfigurationService.java\nindex 023b0e7f61..6037eb76ee 100644\n--- a/wildfly/infinispan/src/main/java/org/jboss/as/clustering/infinispan/subsystem/CacheConfigurationService.java\n+++ b/wildfly/infinispan/src/main/java/org/jboss/as/clustering/infinispan/subsystem/CacheConfigurationService.java\n\n@@ -72,9 +71,8 @@ protected ConfigurationBuilder getConfigurationBuilder() {\n         builder.read(configuration);\n         builder.template(configuration.isTemplate());\n \n-        GlobalConfiguration globalConfiguration = SecurityActions.getCacheManagerConfiguration(dependencies.getCacheContainer());\n-        builder.statistics().enabled(globalConfiguration.statistics());\n-        // TODO [anistor] what about JMX ???\n+       boolean jmxEnabled = SecurityActions.getCacheManagerConfiguration(dependencies.getCacheContainer()).statistics();\n+       builder.jmxStatistics().enabled(jmxEnabled);\n         TransactionManager tm = this.dependencies.getTransactionManager();\n         if (tm != null) {\n             builder.transaction().transactionManagerLookup(new TransactionManagerProvider());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgzMTk3OQ==", "url": "https://github.com/infinispan/infinispan/pull/7857#discussion_r381831979", "bodyText": "This one's also deprecated", "author": "danberindei", "createdAt": "2020-02-20T07:52:34Z", "path": "documentation/src/main/asciidoc/topics/code_examples/MBeanServerLookup.java", "diffHunk": "@@ -1,5 +1,5 @@\n GlobalConfiguration globalConfig = new GlobalConfigurationBuilder()\n-\u00a0 .globalJmxStatistics()\n+\u00a0 .jmx()\n \u00a0\u00a0\u00a0 .cacheManagerName(\"SalesCacheManager\")", "originalCommit": "1e687654d29ee1f91cd1468b643e4d74548eda95", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "05b5f592ad7a63f80703f2f17393e3e10bf80c65", "chunk": "diff --git a/documentation/src/main/asciidoc/topics/code_examples/MBeanServerLookup.java b/documentation/src/main/asciidoc/topics/code_examples/MBeanServerLookup.java\nindex 43aba707d3..53fdce4ff4 100644\n--- a/documentation/src/main/asciidoc/topics/code_examples/MBeanServerLookup.java\n+++ b/documentation/src/main/asciidoc/topics/code_examples/MBeanServerLookup.java\n\n@@ -1,5 +1,5 @@\n GlobalConfiguration globalConfig = new GlobalConfigurationBuilder()\n-\u00a0 .jmx()\n+\u00a0 .globalJmxStatistics()\n \u00a0\u00a0\u00a0 .cacheManagerName(\"SalesCacheManager\")\n \u00a0\u00a0\u00a0 .mBeanServerLookup(new JBossMBeanServerLookup())\n \u00a0 .build();\n"}}, {"oid": "876193b8b7cf25d2e1b15d5b8b61ada689e2198d", "url": "https://github.com/infinispan/infinispan/commit/876193b8b7cf25d2e1b15d5b8b61ada689e2198d", "message": "WIP more and more hacks", "committedDate": "2020-02-20T08:30:20Z", "type": "forcePushed"}, {"oid": "87c8fe3eefd9c20e716d14fcd1bfb424c5e4cc4e", "url": "https://github.com/infinispan/infinispan/commit/87c8fe3eefd9c20e716d14fcd1bfb424c5e4cc4e", "message": "WIP more and more hacks", "committedDate": "2020-02-20T08:46:30Z", "type": "forcePushed"}, {"oid": "12193ea50e36fdb86a7f7761bc1b3c8d7abece8d", "url": "https://github.com/infinispan/infinispan/commit/12193ea50e36fdb86a7f7761bc1b3c8d7abece8d", "message": "WIP more and more hacks", "committedDate": "2020-02-20T09:00:45Z", "type": "forcePushed"}, {"oid": "469256910e8c41bc8ab2e19b202c93c72f955649", "url": "https://github.com/infinispan/infinispan/commit/469256910e8c41bc8ab2e19b202c93c72f955649", "message": "ISPN-11174 Add global and cache-level enable flag for microprofile metrics\n\n* rename ApplicationMetricsRegistry to InfinispanMetricsRegistry\n* rename JMXStatisticsConfiguration to StatisticsConfiguration\n* rename ConfigurationBuilder.jmxStatistics() to statistics()\n* fix several 'configuration' test names", "committedDate": "2020-02-20T10:14:45Z", "type": "forcePushed"}, {"oid": "09fcde29c9fc9eb54ade5db9b9000d9706f6e67d", "url": "https://github.com/infinispan/infinispan/commit/09fcde29c9fc9eb54ade5db9b9000d9706f6e67d", "message": "WIP more and more hacks", "committedDate": "2020-02-20T16:25:37Z", "type": "forcePushed"}, {"oid": "05b5f592ad7a63f80703f2f17393e3e10bf80c65", "url": "https://github.com/infinispan/infinispan/commit/05b5f592ad7a63f80703f2f17393e3e10bf80c65", "message": "JGRP-2394 Include cache manager name in MBean names of jgroups channel and protocols", "committedDate": "2020-02-20T17:44:14Z", "type": "commit"}, {"oid": "3c47962d0d58daada3ad0aac3da01e9ff8e56506", "url": "https://github.com/infinispan/infinispan/commit/3c47962d0d58daada3ad0aac3da01e9ff8e56506", "message": "ISPN-10979 Make microprofile and smallrye metrics dependencies optional at runtime\n\n* all deps are optional in POM\n* implementation deals gracefully with eventual ClassNotFoundException and NoClassDefFoundError", "committedDate": "2020-02-20T17:44:14Z", "type": "commit"}, {"oid": "41d476a72bf50ff77fc9b46c67c1fb201a0db6bb", "url": "https://github.com/infinispan/infinispan/commit/41d476a72bf50ff77fc9b46c67c1fb201a0db6bb", "message": "WIP more and more hacks", "committedDate": "2020-02-20T17:44:39Z", "type": "forcePushed"}, {"oid": "c9d42c285030a94711d46a4fb6273a526c57539e", "url": "https://github.com/infinispan/infinispan/commit/c9d42c285030a94711d46a4fb6273a526c57539e", "message": "ISPN-11174 Add global and cache-level enable flag for microprofile metrics\n\n* rename ApplicationMetricsRegistry to InfinispanMetricsRegistry\n* rename JMXStatisticsConfiguration to StatisticsConfiguration\n* rename ConfigurationBuilder.jmxStatistics() to statistics()\n* add an enable flag for global JMX config and separate the flag from CacheContainerConfiguration.statistics\n* fix several 'configuration' test names", "committedDate": "2020-02-20T20:10:34Z", "type": "commit"}, {"oid": "c9d42c285030a94711d46a4fb6273a526c57539e", "url": "https://github.com/infinispan/infinispan/commit/c9d42c285030a94711d46a4fb6273a526c57539e", "message": "ISPN-11174 Add global and cache-level enable flag for microprofile metrics\n\n* rename ApplicationMetricsRegistry to InfinispanMetricsRegistry\n* rename JMXStatisticsConfiguration to StatisticsConfiguration\n* rename ConfigurationBuilder.jmxStatistics() to statistics()\n* add an enable flag for global JMX config and separate the flag from CacheContainerConfiguration.statistics\n* fix several 'configuration' test names", "committedDate": "2020-02-20T20:10:34Z", "type": "forcePushed"}]}