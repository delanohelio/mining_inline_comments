{"pr_number": 8528, "pr_title": "ISPN-12075 Remove alternative http clients from the testsuite", "pr_createdAt": "2020-07-02T13:34:39Z", "pr_url": "https://github.com/infinispan/infinispan/pull/8528", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE3NDk4MA==", "url": "https://github.com/infinispan/infinispan/pull/8528#discussion_r449174980", "bodyText": "shouldn't be targetClient?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  RestCacheClient targetCacheClient = sourceClient.cache(TestingUtil.getDefaultCacheName(targetContainer));\n          \n          \n            \n                  RestCacheClient targetCacheClient = targetClient.cache(TestingUtil.getDefaultCacheName(targetContainer));", "author": "pruivo", "createdAt": "2020-07-02T17:42:03Z", "path": "persistence/rest/src/test/java/org/infinispan/persistence/rest/upgrade/RestUpgradeSynchronizerTest.java", "diffHunk": "@@ -72,28 +77,35 @@ public void setup() {\n       targetServer = new RestServer();\n       targetServer.start(restServerConfigurationBuilder.build(), targetContainer);\n \n-      client = new HttpClient();\n+      RestClientConfigurationBuilder builderSource = new RestClientConfigurationBuilder();\n+      builderSource.addServer().host(sourceServer.getHost()).port(sourceServer.getPort());\n+      sourceClient = RestClient.forConfiguration(builderSource.build());\n+\n+      RestClientConfigurationBuilder builderTarget = new RestClientConfigurationBuilder();\n+      builderTarget.addServer().host(targetServer.getHost()).port(targetServer.getPort());\n+      targetClient = RestClient.forConfiguration(builderTarget.build());\n    }\n \n    public void testSynchronization() throws Exception {\n       // Fill the old cluster with data\n+      RestCacheClient sourceCacheClient = sourceClient.cache(TestingUtil.getDefaultCacheName(sourceContainer));\n+      RestCacheClient targetCacheClient = sourceClient.cache(TestingUtil.getDefaultCacheName(targetContainer));", "originalCommit": "8ee3ad036f7afd41da2e405d359f0248a6c9b40d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e3d3c3dd4e1852b4e6aa2406a7faf3c8e50fda3d", "chunk": "diff --git a/persistence/rest/src/test/java/org/infinispan/persistence/rest/upgrade/RestUpgradeSynchronizerTest.java b/persistence/rest/src/test/java/org/infinispan/persistence/rest/upgrade/RestUpgradeSynchronizerTest.java\nindex fad5cf6d34..d0e5d63c1e 100644\n--- a/persistence/rest/src/test/java/org/infinispan/persistence/rest/upgrade/RestUpgradeSynchronizerTest.java\n+++ b/persistence/rest/src/test/java/org/infinispan/persistence/rest/upgrade/RestUpgradeSynchronizerTest.java\n\n@@ -89,7 +89,7 @@ public void setup() {\n    public void testSynchronization() throws Exception {\n       // Fill the old cluster with data\n       RestCacheClient sourceCacheClient = sourceClient.cache(TestingUtil.getDefaultCacheName(sourceContainer));\n-      RestCacheClient targetCacheClient = sourceClient.cache(TestingUtil.getDefaultCacheName(targetContainer));\n+      RestCacheClient targetCacheClient = targetClient.cache(TestingUtil.getDefaultCacheName(targetContainer));\n \n       for (char ch = 'A'; ch <= 'Z'; ch++) {\n          String s = Character.toString(ch);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE3NjU5MQ==", "url": "https://github.com/infinispan/infinispan/pull/8528#discussion_r449176591", "bodyText": "I don't think this class is required, It is only used in one place, org.infinispan.it.endpoints.EmbeddedRestHotRodTest when invoking\nRestEntity value = RestEntity.create(APPLICATION_SERIALIZED_OBJECT, new ByteArrayInputStream(bout.toByteArray()));\nIMO, it can use the byte[] directly.\nRestEntity value = RestEntity.create(APPLICATION_SERIALIZED_OBJECT, bout.toByteArray());\nam I miss something?", "author": "pruivo", "createdAt": "2020-07-02T17:45:23Z", "path": "client/rest-client/src/main/java/org/infinispan/client/rest/impl/okhttp/InputStreamEntityOkHttp.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package org.infinispan.client.rest.impl.okhttp;\n+\n+import java.io.InputStream;\n+\n+import org.infinispan.client.rest.RestEntity;\n+import org.infinispan.commons.dataconversion.MediaType;\n+\n+import okhttp3.RequestBody;\n+\n+/**\n+ * @since 12.0\n+ */\n+public class InputStreamEntityOkHttp implements RestEntity, RestEntityAdaptorOkHttp {", "originalCommit": "8ee3ad036f7afd41da2e405d359f0248a6c9b40d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ0NjM1NA==", "url": "https://github.com/infinispan/infinispan/pull/8528#discussion_r449446354", "bodyText": "I could've used byte[] directly, but I opted to enhance the cli so that this method is available for future uses", "author": "gustavonalle", "createdAt": "2020-07-03T08:19:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE3NjU5MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE3ODE2OQ==", "url": "https://github.com/infinispan/infinispan/pull/8528#discussion_r449178169", "bodyText": "if the previous comment is true, then remove this :)", "author": "pruivo", "createdAt": "2020-07-02T17:48:33Z", "path": "client/rest-client/src/main/java/org/infinispan/client/rest/impl/okhttp/StreamRequestBody.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package org.infinispan.client.rest.impl.okhttp;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import okhttp3.MediaType;\n+import okhttp3.RequestBody;\n+import okio.BufferedSink;\n+import okio.Okio;\n+import okio.Source;\n+\n+/**\n+ * Support for {@link java.io.InputStream} to be used in POST and PUT {@link okhttp3.RequestBody}.\n+ * @since 12.0\n+ */\n+public class StreamRequestBody extends RequestBody {", "originalCommit": "8ee3ad036f7afd41da2e405d359f0248a6c9b40d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE3ODI4OA==", "url": "https://github.com/infinispan/infinispan/pull/8528#discussion_r449178288", "bodyText": "same here", "author": "pruivo", "createdAt": "2020-07-02T17:48:50Z", "path": "client/rest-client/src/main/java/org/infinispan/client/rest/RestEntity.java", "diffHunk": "@@ -27,4 +29,8 @@ static RestEntity create(MediaType contentType, byte[] body) {\n    static RestEntity create(MediaType contentType, File file) {\n       return new FileRestEntityOkHttp(contentType, file);\n    }\n+\n+   static RestEntity create(MediaType contentType, InputStream inputStream) {", "originalCommit": "8ee3ad036f7afd41da2e405d359f0248a6c9b40d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE3OTgwMg==", "url": "https://github.com/infinispan/infinispan/pull/8528#discussion_r449179802", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  join(remote.remove(\"k\"));\n          \n          \n            \n                  join(remote.get(\"k\"));", "author": "pruivo", "createdAt": "2020-07-02T17:51:49Z", "path": "integrationtests/endpoints-interop-it/src/test/java/org/infinispan/it/endpoints/EmbeddedRestCacheListenerTest.java", "diffHunk": "@@ -109,8 +96,7 @@ public void testLoadingAndStoringEventsRest() throws IOException {\n \n       l.reset();\n \n-      GetMethod get = new GetMethod(restUrl + \"/k\");\n-      remote.executeMethod(get);\n+      join(remote.remove(\"k\"));", "originalCommit": "8ee3ad036f7afd41da2e405d359f0248a6c9b40d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e3d3c3dd4e1852b4e6aa2406a7faf3c8e50fda3d", "chunk": "diff --git a/integrationtests/endpoints-interop-it/src/test/java/org/infinispan/it/endpoints/EmbeddedRestCacheListenerTest.java b/integrationtests/endpoints-interop-it/src/test/java/org/infinispan/it/endpoints/EmbeddedRestCacheListenerTest.java\nindex d7b05ff770..92b862c700 100644\n--- a/integrationtests/endpoints-interop-it/src/test/java/org/infinispan/it/endpoints/EmbeddedRestCacheListenerTest.java\n+++ b/integrationtests/endpoints-interop-it/src/test/java/org/infinispan/it/endpoints/EmbeddedRestCacheListenerTest.java\n\n@@ -96,7 +94,7 @@ public void testLoadingAndStoringEventsRest() throws IOException {\n \n       l.reset();\n \n-      join(remote.remove(\"k\"));\n+      join(remote.get(\"k\"));\n \n       assertTrue(l.created.isEmpty());\n       assertTrue(l.removed.isEmpty());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4MTMyMQ==", "url": "https://github.com/infinispan/infinispan/pull/8528#discussion_r449181321", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  RestEntity value = RestEntity.create(APPLICATION_SERIALIZED_OBJECT, new ByteArrayInputStream(bout.toByteArray()));\n          \n          \n            \n                  RestEntity value = RestEntity.create(APPLICATION_SERIALIZED_OBJECT, bout.toByteArray());", "author": "pruivo", "createdAt": "2020-07-02T17:54:50Z", "path": "integrationtests/endpoints-interop-it/src/test/java/org/infinispan/it/endpoints/EmbeddedRestHotRodTest.java", "diffHunk": "@@ -131,98 +131,90 @@ public void testCustomObjectHotRodPutEmbeddedRestGet() throws Exception {\n \n       // 1. Put with Hot Rod\n       RemoteCache<String, Object> remote = cacheFactory.getHotRodCache();\n-      assertEquals(null, remote.withFlags(Flag.FORCE_RETURN_VALUE).put(key, p));\n+      assertNull(remote.withFlags(Flag.FORCE_RETURN_VALUE).put(key, p));\n \n       // 2. Get with Embedded\n       assertEquals(p, cacheFactory.getEmbeddedCache().get(key));\n \n       // 3. Get with REST\n-      HttpMethod get = new GetMethod(cacheFactory.getRestUrl() + \"/\" + key);\n-      get.setRequestHeader(\"Accept\", \"application/x-java-serialized-object\");\n-      cacheFactory.getRestClient().executeMethod(get);\n-      assertEquals(get.getStatusText(), HttpStatus.SC_OK, get.getStatusCode());\n+      RestResponse response = join(cacheFactory.getRestCacheClient().get(key, APPLICATION_SERIALIZED_OBJECT_TYPE));\n+      assertEquals(200, response.getStatus());\n+\n       // REST finds the Java POJO in-memory and returns the Java serialized version\n-      assertEquals(p, new ObjectInputStream(get.getResponseBodyAsStream()).readObject());\n+      assertEquals(p, new ObjectInputStream(response.getBodyAsStream()).readObject());\n    }\n \n    public void testCustomObjectEmbeddedPutHotRodRestGet() throws Exception {\n       final String key = \"5\";\n       Person p = new Person(\"Galder\");\n \n       // 1. Put with Embedded\n-      assertEquals(null, cacheFactory.getEmbeddedCache().put(key, p));\n+      assertNull(cacheFactory.getEmbeddedCache().put(key, p));\n \n       // 2. Get with Hot Rod\n       assertEquals(p, cacheFactory.getHotRodCache().get(key));\n \n       // 3. Get with REST\n-      HttpMethod get = new GetMethod(cacheFactory.getRestUrl() + \"/\" + key);\n-      get.setRequestHeader(\"Accept\", \"application/x-java-serialized-object, application/json;q=0.3\");\n+      RestResponse response = join(cacheFactory.getRestCacheClient()\n+            .get(key, \"application/x-java-serialized-object, application/json;q=0.3\"));\n+      assertEquals(200, response.getStatus());\n \n-      cacheFactory.getRestClient().executeMethod(get);\n-      assertEquals(get.getStatusText(), HttpStatus.SC_OK, get.getStatusCode());\n       // REST finds the Java POJO in-memory and returns the Java serialized version\n-      assertEquals(p, new ObjectInputStream(get.getResponseBodyAsStream()).readObject());\n+      assertEquals(p, new ObjectInputStream(response.getBodyAsStream()).readObject());\n    }\n \n-   public void testCustomObjectEmbeddedPutRestGetAcceptJSONAndXML() throws Exception {\n+   public void testCustomObjectEmbeddedPutRestGetAcceptJSONAndXML() {\n       final String key = \"6\";\n       final Person p = new Person(\"Anna\");\n \n       // 1. Put with Embedded\n-      assertEquals(null, cacheFactory.getEmbeddedCache().put(key, p));\n+      assertNull(cacheFactory.getEmbeddedCache().put(key, p));\n \n       // 2. Get with REST (accept application/json)\n-      HttpMethod getJson = new GetMethod(cacheFactory.getRestUrl() + \"/\" + key);\n-      getJson.setRequestHeader(\"Accept\", \"application/json\");\n-      cacheFactory.getRestClient().executeMethod(getJson);\n-      assertEquals(getJson.getStatusText(), HttpStatus.SC_OK, getJson.getStatusCode());\n-      assertEquals(asJson(p), getJson.getResponseBodyAsString());\n+      RestResponse response = join(cacheFactory.getRestCacheClient().get(key, APPLICATION_JSON_TYPE));\n+      String body = response.getBody();\n+      System.out.println(body);\n+      assertEquals(200, response.getStatus());\n+      assertEquals(asJson(p), body);\n \n       // 3. Get with REST (accept application/xml)\n-      HttpMethod getXml = new GetMethod(cacheFactory.getRestUrl() + \"/\" + key);\n-      getXml.setRequestHeader(\"Accept\", \"application/xml\");\n-      cacheFactory.getRestClient().executeMethod(getXml);\n-      assertEquals(getXml.getStatusText(), HttpStatus.SC_OK, getXml.getStatusCode());\n-      assertTrue(getXml.getResponseBodyAsString().contains(\"<name>Anna</name>\"));\n+      response = join(cacheFactory.getRestCacheClient().get(key, APPLICATION_XML_TYPE));\n+      assertEquals(200, response.getStatus());\n+      assertTrue(response.getBody().contains(\"<name>Anna</name>\"));\n    }\n \n-   public void testCustomObjectHotRodPutRestGetAcceptJSONAndXML() throws Exception {\n+   public void testCustomObjectHotRodPutRestGetAcceptJSONAndXML() {\n       final String key = \"7\";\n       final Person p = new Person(\"Jakub\");\n \n       // 1. Put with HotRod\n       RemoteCache<String, Object> remote = cacheFactory.getHotRodCache();\n-      assertEquals(null, remote.withFlags(Flag.FORCE_RETURN_VALUE).put(key, p));\n+      assertNull(remote.withFlags(Flag.FORCE_RETURN_VALUE).put(key, p));\n \n       // 2. Get with REST (accept application/json)\n-      HttpMethod getJson = new GetMethod(cacheFactory.getRestUrl() + \"/\" + key);\n-      getJson.setRequestHeader(\"Accept\", \"application/json\");\n-      cacheFactory.getRestClient().executeMethod(getJson);\n-      assertEquals(getJson.getStatusText(), HttpStatus.SC_OK, getJson.getStatusCode());\n-      assertEquals(asJson(p), getJson.getResponseBodyAsString());\n+      RestResponse response = join(cacheFactory.getRestCacheClient().get(key, APPLICATION_JSON_TYPE));\n+      assertEquals(200, response.getStatus());\n+      assertEquals(asJson(p), response.getBody());\n \n       // 3. Get with REST (accept application/xml)\n-      HttpMethod getXml = new GetMethod(cacheFactory.getRestUrl() + \"/\" + key);\n-      getXml.setRequestHeader(\"Accept\", \"application/xml\");\n-      cacheFactory.getRestClient().executeMethod(getXml);\n-      assertEquals(getXml.getStatusText(), HttpStatus.SC_OK, getXml.getStatusCode());\n-      assertTrue(getXml.getResponseBodyAsString().contains(\"<name>Jakub</name>\"));\n+      response = join(cacheFactory.getRestCacheClient().get(key, APPLICATION_XML_TYPE));\n+      assertEquals(200, response.getStatus());\n+      assertTrue(response.getBody().contains(\"<name>Jakub</name>\"));\n    }\n \n    public void testCustomObjectRestPutHotRodEmbeddedGet() throws Exception {\n       final String key = \"77\";\n       Person p = new Person(\"Iker\");\n \n       // 1. Put with Rest\n-      EntityEnclosingMethod put = new PutMethod(cacheFactory.getRestUrl() + \"/\" + key);\n+      RestCacheClient restClient = cacheFactory.getRestCacheClient();\n+\n       ByteArrayOutputStream bout = new ByteArrayOutputStream();\n       try (ObjectOutputStream oos = new ObjectOutputStream(bout)) {\n          oos.writeObject(p);\n       }\n-      put.setRequestHeader(\"Content-Type\", \"application/x-java-serialized-object\");\n-      put.setRequestEntity(new InputStreamRequestEntity(new ByteArrayInputStream(bout.toByteArray())));\n-      cacheFactory.getRestClient().executeMethod(put);\n+      RestEntity value = RestEntity.create(APPLICATION_SERIALIZED_OBJECT, new ByteArrayInputStream(bout.toByteArray()));", "originalCommit": "8ee3ad036f7afd41da2e405d359f0248a6c9b40d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ4MjE2Ng==", "url": "https://github.com/infinispan/infinispan/pull/8528#discussion_r449482166", "bodyText": "well, you could have ignored my suggestion since we are keeping InputStreamEntityOkHttp :)", "author": "pruivo", "createdAt": "2020-07-03T09:30:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4MTMyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ4ODM4NA==", "url": "https://github.com/infinispan/infinispan/pull/8528#discussion_r449488384", "bodyText": "let me rollback this :)", "author": "gustavonalle", "createdAt": "2020-07-03T09:42:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4MTMyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "e3d3c3dd4e1852b4e6aa2406a7faf3c8e50fda3d", "chunk": "diff --git a/integrationtests/endpoints-interop-it/src/test/java/org/infinispan/it/endpoints/EmbeddedRestHotRodTest.java b/integrationtests/endpoints-interop-it/src/test/java/org/infinispan/it/endpoints/EmbeddedRestHotRodTest.java\nindex 71a2347cb1..973211cb0d 100644\n--- a/integrationtests/endpoints-interop-it/src/test/java/org/infinispan/it/endpoints/EmbeddedRestHotRodTest.java\n+++ b/integrationtests/endpoints-interop-it/src/test/java/org/infinispan/it/endpoints/EmbeddedRestHotRodTest.java\n\n@@ -173,7 +172,6 @@ public void testCustomObjectEmbeddedPutRestGetAcceptJSONAndXML() {\n       // 2. Get with REST (accept application/json)\n       RestResponse response = join(cacheFactory.getRestCacheClient().get(key, APPLICATION_JSON_TYPE));\n       String body = response.getBody();\n-      System.out.println(body);\n       assertEquals(200, response.getStatus());\n       assertEquals(asJson(p), body);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4MTg5NA==", "url": "https://github.com/infinispan/infinispan/pull/8528#discussion_r449181894", "bodyText": "leftover?", "author": "pruivo", "createdAt": "2020-07-02T17:56:00Z", "path": "integrationtests/endpoints-interop-it/src/test/java/org/infinispan/it/endpoints/EmbeddedRestHotRodTest.java", "diffHunk": "@@ -131,98 +131,90 @@ public void testCustomObjectHotRodPutEmbeddedRestGet() throws Exception {\n \n       // 1. Put with Hot Rod\n       RemoteCache<String, Object> remote = cacheFactory.getHotRodCache();\n-      assertEquals(null, remote.withFlags(Flag.FORCE_RETURN_VALUE).put(key, p));\n+      assertNull(remote.withFlags(Flag.FORCE_RETURN_VALUE).put(key, p));\n \n       // 2. Get with Embedded\n       assertEquals(p, cacheFactory.getEmbeddedCache().get(key));\n \n       // 3. Get with REST\n-      HttpMethod get = new GetMethod(cacheFactory.getRestUrl() + \"/\" + key);\n-      get.setRequestHeader(\"Accept\", \"application/x-java-serialized-object\");\n-      cacheFactory.getRestClient().executeMethod(get);\n-      assertEquals(get.getStatusText(), HttpStatus.SC_OK, get.getStatusCode());\n+      RestResponse response = join(cacheFactory.getRestCacheClient().get(key, APPLICATION_SERIALIZED_OBJECT_TYPE));\n+      assertEquals(200, response.getStatus());\n+\n       // REST finds the Java POJO in-memory and returns the Java serialized version\n-      assertEquals(p, new ObjectInputStream(get.getResponseBodyAsStream()).readObject());\n+      assertEquals(p, new ObjectInputStream(response.getBodyAsStream()).readObject());\n    }\n \n    public void testCustomObjectEmbeddedPutHotRodRestGet() throws Exception {\n       final String key = \"5\";\n       Person p = new Person(\"Galder\");\n \n       // 1. Put with Embedded\n-      assertEquals(null, cacheFactory.getEmbeddedCache().put(key, p));\n+      assertNull(cacheFactory.getEmbeddedCache().put(key, p));\n \n       // 2. Get with Hot Rod\n       assertEquals(p, cacheFactory.getHotRodCache().get(key));\n \n       // 3. Get with REST\n-      HttpMethod get = new GetMethod(cacheFactory.getRestUrl() + \"/\" + key);\n-      get.setRequestHeader(\"Accept\", \"application/x-java-serialized-object, application/json;q=0.3\");\n+      RestResponse response = join(cacheFactory.getRestCacheClient()\n+            .get(key, \"application/x-java-serialized-object, application/json;q=0.3\"));\n+      assertEquals(200, response.getStatus());\n \n-      cacheFactory.getRestClient().executeMethod(get);\n-      assertEquals(get.getStatusText(), HttpStatus.SC_OK, get.getStatusCode());\n       // REST finds the Java POJO in-memory and returns the Java serialized version\n-      assertEquals(p, new ObjectInputStream(get.getResponseBodyAsStream()).readObject());\n+      assertEquals(p, new ObjectInputStream(response.getBodyAsStream()).readObject());\n    }\n \n-   public void testCustomObjectEmbeddedPutRestGetAcceptJSONAndXML() throws Exception {\n+   public void testCustomObjectEmbeddedPutRestGetAcceptJSONAndXML() {\n       final String key = \"6\";\n       final Person p = new Person(\"Anna\");\n \n       // 1. Put with Embedded\n-      assertEquals(null, cacheFactory.getEmbeddedCache().put(key, p));\n+      assertNull(cacheFactory.getEmbeddedCache().put(key, p));\n \n       // 2. Get with REST (accept application/json)\n-      HttpMethod getJson = new GetMethod(cacheFactory.getRestUrl() + \"/\" + key);\n-      getJson.setRequestHeader(\"Accept\", \"application/json\");\n-      cacheFactory.getRestClient().executeMethod(getJson);\n-      assertEquals(getJson.getStatusText(), HttpStatus.SC_OK, getJson.getStatusCode());\n-      assertEquals(asJson(p), getJson.getResponseBodyAsString());\n+      RestResponse response = join(cacheFactory.getRestCacheClient().get(key, APPLICATION_JSON_TYPE));\n+      String body = response.getBody();\n+      System.out.println(body);", "originalCommit": "8ee3ad036f7afd41da2e405d359f0248a6c9b40d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e3d3c3dd4e1852b4e6aa2406a7faf3c8e50fda3d", "chunk": "diff --git a/integrationtests/endpoints-interop-it/src/test/java/org/infinispan/it/endpoints/EmbeddedRestHotRodTest.java b/integrationtests/endpoints-interop-it/src/test/java/org/infinispan/it/endpoints/EmbeddedRestHotRodTest.java\nindex 71a2347cb1..973211cb0d 100644\n--- a/integrationtests/endpoints-interop-it/src/test/java/org/infinispan/it/endpoints/EmbeddedRestHotRodTest.java\n+++ b/integrationtests/endpoints-interop-it/src/test/java/org/infinispan/it/endpoints/EmbeddedRestHotRodTest.java\n\n@@ -173,7 +172,6 @@ public void testCustomObjectEmbeddedPutRestGetAcceptJSONAndXML() {\n       // 2. Get with REST (accept application/json)\n       RestResponse response = join(cacheFactory.getRestCacheClient().get(key, APPLICATION_JSON_TYPE));\n       String body = response.getBody();\n-      System.out.println(body);\n       assertEquals(200, response.getStatus());\n       assertEquals(asJson(p), body);\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4Mjk0Nw==", "url": "https://github.com/infinispan/infinispan/pull/8528#discussion_r449182947", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  assertEquals(\"text/plain\", response.getHeader(CONTENT_TYPE_HEADER.getValue()));\n          \n          \n            \n                  assertEquals(TEXT_PLAIN_TYPE, response.getHeader(CONTENT_TYPE_HEADER.getValue()));", "author": "pruivo", "createdAt": "2020-07-02T17:58:05Z", "path": "integrationtests/endpoints-interop-it/src/test/java/org/infinispan/it/endpoints/EmbeddedRestHotRodTest.java", "diffHunk": "@@ -237,171 +229,153 @@ public void testHotRodEmbeddedPutRestHeadExpiry() throws Exception {\n       final String key2 = \"9\";\n \n       // 1. Put with HotRod\n-      assertEquals(null, cacheFactory.getHotRodCache().put(key1, \"v1\", 5, TimeUnit.SECONDS));\n+      assertNull(cacheFactory.getHotRodCache().put(key1, \"v1\", 5, TimeUnit.SECONDS));\n \n       // 2. Put with Embedded\n-      assertEquals(null, cacheFactory.getEmbeddedCache().put(key2, \"v2\", 5, TimeUnit.SECONDS));\n+      assertNull(cacheFactory.getEmbeddedCache().put(key2, \"v2\", 5, TimeUnit.SECONDS));\n \n       // 3. HEAD with REST key1\n-      HttpMethod headKey1 = new HeadMethod(cacheFactory.getRestUrl() + \"/\" + key1);\n-      cacheFactory.getRestClient().executeMethod(headKey1);\n-      assertEquals(HttpStatus.SC_OK, headKey1.getStatusCode());\n-      Header expires = headKey1.getResponseHeader(\"Expires\");\n+      RestResponse response = join(cacheFactory.getRestCacheClient().head(key1));\n+      assertEquals(200, response.getStatus());\n+      String expires = response.getHeader(ResponseHeader.EXPIRES_HEADER.getValue());\n       assertNotNull(expires);\n-      assertTrue(dateFormat.parse(expires.getValue()).after(new GregorianCalendar(2013, 1, 1).getTime()));\n+      assertTrue(dateFormat.parse(expires).after(new GregorianCalendar(2013, Calendar.JANUARY, 1).getTime()));\n \n       // 4. HEAD with REST key2\n-      HttpMethod headKey2 = new HeadMethod(cacheFactory.getRestUrl() + \"/\" + key2);\n-      cacheFactory.getRestClient().executeMethod(headKey2);\n-      assertEquals(HttpStatus.SC_OK, headKey2.getStatusCode());\n-      assertNotNull(headKey2.getResponseHeader(\"Expires\"));\n+      response = join(cacheFactory.getRestCacheClient().head(key2));\n+      assertEquals(200, response.getStatus());\n+      expires = response.getHeader(ResponseHeader.EXPIRES_HEADER.getValue());\n+      assertNotNull(expires);\n    }\n \n    public void testHotRodEmbeddedPutRestGetExpiry() throws Exception {\n       final String key = \"10\";\n       final String key2 = \"11\";\n \n       // 1. Put with HotRod\n-      assertEquals(null, cacheFactory.getHotRodCache().put(key, \"v1\", 5, TimeUnit.SECONDS));\n+      assertNull(cacheFactory.getHotRodCache().put(key, \"v1\", 5, TimeUnit.SECONDS));\n \n       // 2. Put with Embedded\n-      assertEquals(null, cacheFactory.getEmbeddedCache().put(key2, \"v2\", 5, TimeUnit.SECONDS));\n+      assertNull(cacheFactory.getEmbeddedCache().put(key2, \"v2\", 5, TimeUnit.SECONDS));\n \n       // 3. Get with REST key\n-      HttpMethod get1 = new GetMethod(cacheFactory.getRestUrl() + \"/\" + key);\n-      cacheFactory.getRestClient().executeMethod(get1);\n-      assertEquals(HttpStatus.SC_OK, get1.getStatusCode());\n-      assertDate(get1, \"Expires\");\n+      RestResponse response = join(cacheFactory.getRestCacheClient().get(key));\n+      assertEquals(200, response.getStatus());\n+      assertDate(response, \"Expires\");\n \n       // 4. Get with REST key2\n-      HttpMethod get2 = new GetMethod(cacheFactory.getRestUrl() + \"/\" + key2);\n-      cacheFactory.getRestClient().executeMethod(get2);\n-      assertEquals(HttpStatus.SC_OK, get2.getStatusCode());\n-      assertDate(get2, \"Expires\");\n+      response = join(cacheFactory.getRestCacheClient().get(key2));\n+      assertEquals(200, response.getStatus());\n+      assertDate(response, \"Expires\");\n    }\n \n    public void testHotRodEmbeddedPutRestGetLastModified() throws Exception {\n       final String key = \"12\";\n       final String key2 = \"13\";\n \n       // 1. Put with HotRod\n-      assertEquals(null, cacheFactory.getHotRodCache().put(key, \"v1\", 5, TimeUnit.SECONDS));\n+      assertNull(cacheFactory.getHotRodCache().put(key, \"v1\", 5, TimeUnit.SECONDS));\n \n       // 2. Put with Embedded\n-      assertEquals(null, cacheFactory.getEmbeddedCache().put(key2, \"v2\", 5, TimeUnit.SECONDS));\n+      assertNull(cacheFactory.getEmbeddedCache().put(key2, \"v2\", 5, TimeUnit.SECONDS));\n \n       // 3. Get with REST key\n-      HttpMethod get1 = new GetMethod(cacheFactory.getRestUrl() + \"/\" + key);\n-      cacheFactory.getRestClient().executeMethod(get1);\n-      assertEquals(HttpStatus.SC_OK, get1.getStatusCode());\n-      assertDate(get1, \"Last-Modified\");\n+      RestResponse response = join(cacheFactory.getRestCacheClient().get(key));\n+      assertEquals(200, response.getStatus());\n+      assertDate(response, \"Last-Modified\");\n \n       // 4. Get with REST key2\n-      HttpMethod get2 = new GetMethod(cacheFactory.getRestUrl() + \"/\" + key2);\n-      cacheFactory.getRestClient().executeMethod(get2);\n-      assertEquals(HttpStatus.SC_OK, get2.getStatusCode());\n-      assertDate(get2, \"Last-Modified\");\n+      response = join(cacheFactory.getRestCacheClient().get(key2));\n+      assertEquals(200, response.getStatus());\n+      assertDate(response, \"Last-Modified\");\n    }\n \n-   private static void assertDate(HttpMethod method, String header) throws Exception {\n-      Header dateHeader = method.getResponseHeader(header);\n+   private static void assertDate(RestResponse response, String header) throws Exception {\n+      String dateHeader = response.getHeader(header);\n       assertNotNull(dateHeader);\n-      Date parsedDate = dateFormat.parse(dateHeader.getValue());\n+      Date parsedDate = dateFormat.parse(dateHeader);\n       assertTrue(\"Parsed date is before this code was written: \" + parsedDate,\n-            parsedDate.after(new GregorianCalendar(2013, 1, 1).getTime()));\n+            parsedDate.after(new GregorianCalendar(2013, Calendar.JANUARY, 1).getTime()));\n    }\n \n-   public void testByteArrayHotRodEmbeddedPutRestGet() throws Exception {\n+   public void testByteArrayHotRodEmbeddedPutRestGet() {\n       final String key1 = \"14\";\n       final String key2 = \"15\";\n \n       // 1. Put with Hot Rod\n       RemoteCache<String, Object> remote = cacheFactory.getHotRodCache();\n-      assertEquals(null, remote.withFlags(Flag.FORCE_RETURN_VALUE).put(key1, \"v1\".getBytes()));\n+      assertNull(remote.withFlags(Flag.FORCE_RETURN_VALUE).put(key1, \"v1\".getBytes()));\n \n       // 2. Put with Embedded\n-      assertEquals(null, cacheFactory.getEmbeddedCache().put(key2, \"v2\".getBytes()));\n+      assertNull(cacheFactory.getEmbeddedCache().put(key2, \"v2\".getBytes()));\n \n       // 3. Get with REST key1\n-      HttpMethod getHotRodValue = new GetMethod(cacheFactory.getRestUrl() + \"/\" + key1);\n-      getHotRodValue.setRequestHeader(\"Accept\", \"text/plain\");\n-      cacheFactory.getRestClient().executeMethod(getHotRodValue);\n-      assertEquals(getHotRodValue.getStatusText(), HttpStatus.SC_OK, getHotRodValue.getStatusCode());\n-      assertEquals(\"text/plain\", getHotRodValue.getResponseHeader(\"Content-Type\").getValue());\n-      assertArrayEquals(\"v1\".getBytes(), getHotRodValue.getResponseBody());\n+      RestResponse response = join(cacheFactory.getRestCacheClient().get(key1, TEXT_PLAIN_TYPE));\n+      assertEquals(200, response.getStatus());\n+      assertEquals(\"text/plain\", response.getHeader(CONTENT_TYPE_HEADER.getValue()));", "originalCommit": "8ee3ad036f7afd41da2e405d359f0248a6c9b40d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e3d3c3dd4e1852b4e6aa2406a7faf3c8e50fda3d", "chunk": "diff --git a/integrationtests/endpoints-interop-it/src/test/java/org/infinispan/it/endpoints/EmbeddedRestHotRodTest.java b/integrationtests/endpoints-interop-it/src/test/java/org/infinispan/it/endpoints/EmbeddedRestHotRodTest.java\nindex 71a2347cb1..973211cb0d 100644\n--- a/integrationtests/endpoints-interop-it/src/test/java/org/infinispan/it/endpoints/EmbeddedRestHotRodTest.java\n+++ b/integrationtests/endpoints-interop-it/src/test/java/org/infinispan/it/endpoints/EmbeddedRestHotRodTest.java\n\n@@ -312,13 +310,13 @@ public void testByteArrayHotRodEmbeddedPutRestGet() {\n       // 3. Get with REST key1\n       RestResponse response = join(cacheFactory.getRestCacheClient().get(key1, TEXT_PLAIN_TYPE));\n       assertEquals(200, response.getStatus());\n-      assertEquals(\"text/plain\", response.getHeader(CONTENT_TYPE_HEADER.getValue()));\n+      assertEquals(TEXT_PLAIN_TYPE, response.getHeader(CONTENT_TYPE_HEADER.getValue()));\n       assertArrayEquals(\"v1\".getBytes(), response.getBodyAsByteArray());\n \n       // 4. Get with REST key2\n       response = join(cacheFactory.getRestCacheClient().get(key2, TEXT_PLAIN_TYPE));\n       assertEquals(200, response.getStatus());\n-      assertEquals(\"text/plain\", response.getHeader(CONTENT_TYPE_HEADER.getValue()));\n+      assertEquals(TEXT_PLAIN_TYPE, response.getHeader(CONTENT_TYPE_HEADER.getValue()));\n       assertArrayEquals(\"v2\".getBytes(), response.getBodyAsByteArray());\n    }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4MzA0OQ==", "url": "https://github.com/infinispan/infinispan/pull/8528#discussion_r449183049", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  assertEquals(\"text/plain\", response.getHeader(CONTENT_TYPE_HEADER.getValue()));\n          \n          \n            \n                  assertEquals(TEXT_PLAIN_TYPE, response.getHeader(CONTENT_TYPE_HEADER.getValue()));", "author": "pruivo", "createdAt": "2020-07-02T17:58:17Z", "path": "integrationtests/endpoints-interop-it/src/test/java/org/infinispan/it/endpoints/EmbeddedRestHotRodTest.java", "diffHunk": "@@ -237,171 +229,153 @@ public void testHotRodEmbeddedPutRestHeadExpiry() throws Exception {\n       final String key2 = \"9\";\n \n       // 1. Put with HotRod\n-      assertEquals(null, cacheFactory.getHotRodCache().put(key1, \"v1\", 5, TimeUnit.SECONDS));\n+      assertNull(cacheFactory.getHotRodCache().put(key1, \"v1\", 5, TimeUnit.SECONDS));\n \n       // 2. Put with Embedded\n-      assertEquals(null, cacheFactory.getEmbeddedCache().put(key2, \"v2\", 5, TimeUnit.SECONDS));\n+      assertNull(cacheFactory.getEmbeddedCache().put(key2, \"v2\", 5, TimeUnit.SECONDS));\n \n       // 3. HEAD with REST key1\n-      HttpMethod headKey1 = new HeadMethod(cacheFactory.getRestUrl() + \"/\" + key1);\n-      cacheFactory.getRestClient().executeMethod(headKey1);\n-      assertEquals(HttpStatus.SC_OK, headKey1.getStatusCode());\n-      Header expires = headKey1.getResponseHeader(\"Expires\");\n+      RestResponse response = join(cacheFactory.getRestCacheClient().head(key1));\n+      assertEquals(200, response.getStatus());\n+      String expires = response.getHeader(ResponseHeader.EXPIRES_HEADER.getValue());\n       assertNotNull(expires);\n-      assertTrue(dateFormat.parse(expires.getValue()).after(new GregorianCalendar(2013, 1, 1).getTime()));\n+      assertTrue(dateFormat.parse(expires).after(new GregorianCalendar(2013, Calendar.JANUARY, 1).getTime()));\n \n       // 4. HEAD with REST key2\n-      HttpMethod headKey2 = new HeadMethod(cacheFactory.getRestUrl() + \"/\" + key2);\n-      cacheFactory.getRestClient().executeMethod(headKey2);\n-      assertEquals(HttpStatus.SC_OK, headKey2.getStatusCode());\n-      assertNotNull(headKey2.getResponseHeader(\"Expires\"));\n+      response = join(cacheFactory.getRestCacheClient().head(key2));\n+      assertEquals(200, response.getStatus());\n+      expires = response.getHeader(ResponseHeader.EXPIRES_HEADER.getValue());\n+      assertNotNull(expires);\n    }\n \n    public void testHotRodEmbeddedPutRestGetExpiry() throws Exception {\n       final String key = \"10\";\n       final String key2 = \"11\";\n \n       // 1. Put with HotRod\n-      assertEquals(null, cacheFactory.getHotRodCache().put(key, \"v1\", 5, TimeUnit.SECONDS));\n+      assertNull(cacheFactory.getHotRodCache().put(key, \"v1\", 5, TimeUnit.SECONDS));\n \n       // 2. Put with Embedded\n-      assertEquals(null, cacheFactory.getEmbeddedCache().put(key2, \"v2\", 5, TimeUnit.SECONDS));\n+      assertNull(cacheFactory.getEmbeddedCache().put(key2, \"v2\", 5, TimeUnit.SECONDS));\n \n       // 3. Get with REST key\n-      HttpMethod get1 = new GetMethod(cacheFactory.getRestUrl() + \"/\" + key);\n-      cacheFactory.getRestClient().executeMethod(get1);\n-      assertEquals(HttpStatus.SC_OK, get1.getStatusCode());\n-      assertDate(get1, \"Expires\");\n+      RestResponse response = join(cacheFactory.getRestCacheClient().get(key));\n+      assertEquals(200, response.getStatus());\n+      assertDate(response, \"Expires\");\n \n       // 4. Get with REST key2\n-      HttpMethod get2 = new GetMethod(cacheFactory.getRestUrl() + \"/\" + key2);\n-      cacheFactory.getRestClient().executeMethod(get2);\n-      assertEquals(HttpStatus.SC_OK, get2.getStatusCode());\n-      assertDate(get2, \"Expires\");\n+      response = join(cacheFactory.getRestCacheClient().get(key2));\n+      assertEquals(200, response.getStatus());\n+      assertDate(response, \"Expires\");\n    }\n \n    public void testHotRodEmbeddedPutRestGetLastModified() throws Exception {\n       final String key = \"12\";\n       final String key2 = \"13\";\n \n       // 1. Put with HotRod\n-      assertEquals(null, cacheFactory.getHotRodCache().put(key, \"v1\", 5, TimeUnit.SECONDS));\n+      assertNull(cacheFactory.getHotRodCache().put(key, \"v1\", 5, TimeUnit.SECONDS));\n \n       // 2. Put with Embedded\n-      assertEquals(null, cacheFactory.getEmbeddedCache().put(key2, \"v2\", 5, TimeUnit.SECONDS));\n+      assertNull(cacheFactory.getEmbeddedCache().put(key2, \"v2\", 5, TimeUnit.SECONDS));\n \n       // 3. Get with REST key\n-      HttpMethod get1 = new GetMethod(cacheFactory.getRestUrl() + \"/\" + key);\n-      cacheFactory.getRestClient().executeMethod(get1);\n-      assertEquals(HttpStatus.SC_OK, get1.getStatusCode());\n-      assertDate(get1, \"Last-Modified\");\n+      RestResponse response = join(cacheFactory.getRestCacheClient().get(key));\n+      assertEquals(200, response.getStatus());\n+      assertDate(response, \"Last-Modified\");\n \n       // 4. Get with REST key2\n-      HttpMethod get2 = new GetMethod(cacheFactory.getRestUrl() + \"/\" + key2);\n-      cacheFactory.getRestClient().executeMethod(get2);\n-      assertEquals(HttpStatus.SC_OK, get2.getStatusCode());\n-      assertDate(get2, \"Last-Modified\");\n+      response = join(cacheFactory.getRestCacheClient().get(key2));\n+      assertEquals(200, response.getStatus());\n+      assertDate(response, \"Last-Modified\");\n    }\n \n-   private static void assertDate(HttpMethod method, String header) throws Exception {\n-      Header dateHeader = method.getResponseHeader(header);\n+   private static void assertDate(RestResponse response, String header) throws Exception {\n+      String dateHeader = response.getHeader(header);\n       assertNotNull(dateHeader);\n-      Date parsedDate = dateFormat.parse(dateHeader.getValue());\n+      Date parsedDate = dateFormat.parse(dateHeader);\n       assertTrue(\"Parsed date is before this code was written: \" + parsedDate,\n-            parsedDate.after(new GregorianCalendar(2013, 1, 1).getTime()));\n+            parsedDate.after(new GregorianCalendar(2013, Calendar.JANUARY, 1).getTime()));\n    }\n \n-   public void testByteArrayHotRodEmbeddedPutRestGet() throws Exception {\n+   public void testByteArrayHotRodEmbeddedPutRestGet() {\n       final String key1 = \"14\";\n       final String key2 = \"15\";\n \n       // 1. Put with Hot Rod\n       RemoteCache<String, Object> remote = cacheFactory.getHotRodCache();\n-      assertEquals(null, remote.withFlags(Flag.FORCE_RETURN_VALUE).put(key1, \"v1\".getBytes()));\n+      assertNull(remote.withFlags(Flag.FORCE_RETURN_VALUE).put(key1, \"v1\".getBytes()));\n \n       // 2. Put with Embedded\n-      assertEquals(null, cacheFactory.getEmbeddedCache().put(key2, \"v2\".getBytes()));\n+      assertNull(cacheFactory.getEmbeddedCache().put(key2, \"v2\".getBytes()));\n \n       // 3. Get with REST key1\n-      HttpMethod getHotRodValue = new GetMethod(cacheFactory.getRestUrl() + \"/\" + key1);\n-      getHotRodValue.setRequestHeader(\"Accept\", \"text/plain\");\n-      cacheFactory.getRestClient().executeMethod(getHotRodValue);\n-      assertEquals(getHotRodValue.getStatusText(), HttpStatus.SC_OK, getHotRodValue.getStatusCode());\n-      assertEquals(\"text/plain\", getHotRodValue.getResponseHeader(\"Content-Type\").getValue());\n-      assertArrayEquals(\"v1\".getBytes(), getHotRodValue.getResponseBody());\n+      RestResponse response = join(cacheFactory.getRestCacheClient().get(key1, TEXT_PLAIN_TYPE));\n+      assertEquals(200, response.getStatus());\n+      assertEquals(\"text/plain\", response.getHeader(CONTENT_TYPE_HEADER.getValue()));\n+      assertArrayEquals(\"v1\".getBytes(), response.getBodyAsByteArray());\n \n       // 4. Get with REST key2\n-      HttpMethod getEmbeddedValue = new GetMethod(cacheFactory.getRestUrl() + \"/\" + key2);\n-      getEmbeddedValue.setRequestHeader(\"Accept\", \"text/plain\");\n-      cacheFactory.getRestClient().executeMethod(getEmbeddedValue);\n-      assertEquals(getEmbeddedValue.getStatusText(), HttpStatus.SC_OK, getEmbeddedValue.getStatusCode());\n-      assertEquals(\"text/plain\", getEmbeddedValue.getResponseHeader(\"Content-Type\").getValue());\n-      assertArrayEquals(\"v2\".getBytes(), getEmbeddedValue.getResponseBody());\n+      response = join(cacheFactory.getRestCacheClient().get(key2, TEXT_PLAIN_TYPE));\n+      assertEquals(200, response.getStatus());\n+      assertEquals(\"text/plain\", response.getHeader(CONTENT_TYPE_HEADER.getValue()));", "originalCommit": "8ee3ad036f7afd41da2e405d359f0248a6c9b40d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e3d3c3dd4e1852b4e6aa2406a7faf3c8e50fda3d", "chunk": "diff --git a/integrationtests/endpoints-interop-it/src/test/java/org/infinispan/it/endpoints/EmbeddedRestHotRodTest.java b/integrationtests/endpoints-interop-it/src/test/java/org/infinispan/it/endpoints/EmbeddedRestHotRodTest.java\nindex 71a2347cb1..973211cb0d 100644\n--- a/integrationtests/endpoints-interop-it/src/test/java/org/infinispan/it/endpoints/EmbeddedRestHotRodTest.java\n+++ b/integrationtests/endpoints-interop-it/src/test/java/org/infinispan/it/endpoints/EmbeddedRestHotRodTest.java\n\n@@ -312,13 +310,13 @@ public void testByteArrayHotRodEmbeddedPutRestGet() {\n       // 3. Get with REST key1\n       RestResponse response = join(cacheFactory.getRestCacheClient().get(key1, TEXT_PLAIN_TYPE));\n       assertEquals(200, response.getStatus());\n-      assertEquals(\"text/plain\", response.getHeader(CONTENT_TYPE_HEADER.getValue()));\n+      assertEquals(TEXT_PLAIN_TYPE, response.getHeader(CONTENT_TYPE_HEADER.getValue()));\n       assertArrayEquals(\"v1\".getBytes(), response.getBodyAsByteArray());\n \n       // 4. Get with REST key2\n       response = join(cacheFactory.getRestCacheClient().get(key2, TEXT_PLAIN_TYPE));\n       assertEquals(200, response.getStatus());\n-      assertEquals(\"text/plain\", response.getHeader(CONTENT_TYPE_HEADER.getValue()));\n+      assertEquals(TEXT_PLAIN_TYPE, response.getHeader(CONTENT_TYPE_HEADER.getValue()));\n       assertArrayEquals(\"v2\".getBytes(), response.getBodyAsByteArray());\n    }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4NTkwMg==", "url": "https://github.com/infinispan/infinispan/pull/8528#discussion_r449185902", "bodyText": "unused method.", "author": "pruivo", "createdAt": "2020-07-02T18:03:31Z", "path": "integrationtests/endpoints-interop-it/src/test/java/org/infinispan/it/endpoints/EndpointsCacheFactory.java", "diffHunk": "@@ -273,7 +279,7 @@ public Marshaller getMarshaller() {\n       return hotrodCache;\n    }\n \n-   public HttpClient getRestClient() {\n+   public RestClient getRestClient() {", "originalCommit": "8ee3ad036f7afd41da2e405d359f0248a6c9b40d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e3d3c3dd4e1852b4e6aa2406a7faf3c8e50fda3d", "chunk": "diff --git a/integrationtests/endpoints-interop-it/src/test/java/org/infinispan/it/endpoints/EndpointsCacheFactory.java b/integrationtests/endpoints-interop-it/src/test/java/org/infinispan/it/endpoints/EndpointsCacheFactory.java\nindex fff3546843..6880f4d746 100644\n--- a/integrationtests/endpoints-interop-it/src/test/java/org/infinispan/it/endpoints/EndpointsCacheFactory.java\n+++ b/integrationtests/endpoints-interop-it/src/test/java/org/infinispan/it/endpoints/EndpointsCacheFactory.java\n\n@@ -279,10 +277,6 @@ public Marshaller getMarshaller() {\n       return hotrodCache;\n    }\n \n-   public RestClient getRestClient() {\n-      return restClient;\n-   }\n-\n    public MemcachedClient getMemcachedClient() {\n       return memcachedClient;\n    }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE4NTk4NA==", "url": "https://github.com/infinispan/infinispan/pull/8528#discussion_r449185984", "bodyText": "unused.", "author": "pruivo", "createdAt": "2020-07-02T18:03:41Z", "path": "integrationtests/endpoints-interop-it/src/test/java/org/infinispan/it/endpoints/EndpointsCacheFactory.java", "diffHunk": "@@ -205,7 +208,10 @@ private void createRestCache() {\n          return rest;\n       });\n       restPort = restServer.getPort();", "originalCommit": "8ee3ad036f7afd41da2e405d359f0248a6c9b40d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e3d3c3dd4e1852b4e6aa2406a7faf3c8e50fda3d", "chunk": "diff --git a/integrationtests/endpoints-interop-it/src/test/java/org/infinispan/it/endpoints/EndpointsCacheFactory.java b/integrationtests/endpoints-interop-it/src/test/java/org/infinispan/it/endpoints/EndpointsCacheFactory.java\nindex fff3546843..6880f4d746 100644\n--- a/integrationtests/endpoints-interop-it/src/test/java/org/infinispan/it/endpoints/EndpointsCacheFactory.java\n+++ b/integrationtests/endpoints-interop-it/src/test/java/org/infinispan/it/endpoints/EndpointsCacheFactory.java\n\n@@ -207,7 +206,6 @@ private void createRestCache() {\n          rest.start(builder.build(), cacheManager);\n          return rest;\n       });\n-      restPort = restServer.getPort();\n       RestClientConfigurationBuilder builder = new RestClientConfigurationBuilder();\n       builder.addServer().host(restServer.getHost()).port(restServer.getPort());\n       restClient = RestClient.forConfiguration(builder.build());\n"}}, {"oid": "e3d3c3dd4e1852b4e6aa2406a7faf3c8e50fda3d", "url": "https://github.com/infinispan/infinispan/commit/e3d3c3dd4e1852b4e6aa2406a7faf3c8e50fda3d", "message": "ISPN-12075 Remove alternative http clients from the testsuite", "committedDate": "2020-07-03T08:31:55Z", "type": "forcePushed"}, {"oid": "b3433720c47ee52e68931920153561db95ac9df8", "url": "https://github.com/infinispan/infinispan/commit/b3433720c47ee52e68931920153561db95ac9df8", "message": "ISPN-12075 Remove alternative http clients from the testsuite", "committedDate": "2020-07-03T09:52:49Z", "type": "forcePushed"}, {"oid": "5d43103879582737e4b1c700de4fee5cb4c7ab7d", "url": "https://github.com/infinispan/infinispan/commit/5d43103879582737e4b1c700de4fee5cb4c7ab7d", "message": "ISPN-12075 Remove alternative http clients from the testsuite", "committedDate": "2020-07-03T13:25:43Z", "type": "commit"}, {"oid": "5d43103879582737e4b1c700de4fee5cb4c7ab7d", "url": "https://github.com/infinispan/infinispan/commit/5d43103879582737e4b1c700de4fee5cb4c7ab7d", "message": "ISPN-12075 Remove alternative http clients from the testsuite", "committedDate": "2020-07-03T13:25:43Z", "type": "forcePushed"}]}