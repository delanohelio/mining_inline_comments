{"pr_number": 7858, "pr_title": "ISPN-11300 Add internal metadata to cache entries", "pr_createdAt": "2020-02-07T14:16:29Z", "pr_url": "https://github.com/infinispan/infinispan/pull/7858", "timeline": [{"oid": "e4f8cc5ed115846f6b15598ed8a6daf85d2d176d", "url": "https://github.com/infinispan/infinispan/commit/e4f8cc5ed115846f6b15598ed8a6daf85d2d176d", "message": "ISPN-11300 Add internal metadata to cache entries", "committedDate": "2020-02-17T11:59:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI0MzU4Mw==", "url": "https://github.com/infinispan/infinispan/pull/7858#discussion_r380243583", "bodyText": "I'm not a fan of this approach. I think it hurts readability and the benefits of the read/write methods will soon be lost with the removal of the Externalizers", "author": "ryanemerson", "createdAt": "2020-02-17T15:25:32Z", "path": "core/src/main/java/org/infinispan/container/entries/AbstractInternalCacheEntry.java", "diffHunk": "@@ -133,4 +172,39 @@ public final boolean equals(Object o) {\n    public final int hashCode() {\n       return  31 * Objects.hashCode(getKey()) + Objects.hashCode(getValue());\n    }\n+\n+   protected abstract InternalCacheValue createCacheValue();\n+\n+   protected void appendFieldsToString(StringBuilder builder) {\n+      builder.append(\"key=\").append(Util.toStr(key));\n+      builder.append(\", value=\").append(Util.toStr(value));\n+      builder.append(\", internalMetadata=\").append(internalMetadata);\n+   }\n+\n+   protected static void writeCommonDataTo(AbstractInternalCacheEntry cacheEntry, ObjectOutput output)\n+         throws IOException {\n+      output.writeObject(cacheEntry.key);\n+      output.writeObject(cacheEntry.value);\n+      output.writeObject(cacheEntry.internalMetadata);\n+   }\n+\n+   protected static CommonData readCommonDataFrom(ObjectInput input) throws IOException, ClassNotFoundException {\n+      Object key = input.readObject();\n+      Object value = input.readObject();\n+      MetaParamsInternalMetadata internalMetadata = (MetaParamsInternalMetadata) input.readObject();\n+      return new CommonData(key, value, internalMetadata);\n+   }\n+\n+   protected static class CommonData {", "originalCommit": "e4f8cc5ed115846f6b15598ed8a6daf85d2d176d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2adb7b4b4895d16cf1522b2620f65727ed37c325", "chunk": "diff --git a/core/src/main/java/org/infinispan/container/entries/AbstractInternalCacheEntry.java b/core/src/main/java/org/infinispan/container/entries/AbstractInternalCacheEntry.java\nindex 6701b4af99..b68c0fd74e 100644\n--- a/core/src/main/java/org/infinispan/container/entries/AbstractInternalCacheEntry.java\n+++ b/core/src/main/java/org/infinispan/container/entries/AbstractInternalCacheEntry.java\n\n@@ -173,38 +160,9 @@ public final int hashCode() {\n       return  31 * Objects.hashCode(getKey()) + Objects.hashCode(getValue());\n    }\n \n-   protected abstract InternalCacheValue createCacheValue();\n-\n    protected void appendFieldsToString(StringBuilder builder) {\n       builder.append(\"key=\").append(Util.toStr(key));\n       builder.append(\", value=\").append(Util.toStr(value));\n       builder.append(\", internalMetadata=\").append(internalMetadata);\n    }\n-\n-   protected static void writeCommonDataTo(AbstractInternalCacheEntry cacheEntry, ObjectOutput output)\n-         throws IOException {\n-      output.writeObject(cacheEntry.key);\n-      output.writeObject(cacheEntry.value);\n-      output.writeObject(cacheEntry.internalMetadata);\n-   }\n-\n-   protected static CommonData readCommonDataFrom(ObjectInput input) throws IOException, ClassNotFoundException {\n-      Object key = input.readObject();\n-      Object value = input.readObject();\n-      MetaParamsInternalMetadata internalMetadata = (MetaParamsInternalMetadata) input.readObject();\n-      return new CommonData(key, value, internalMetadata);\n-   }\n-\n-   protected static class CommonData {\n-      protected final Object key;\n-      protected final Object value;\n-      protected final MetaParamsInternalMetadata internalMetadata;\n-\n-      public CommonData(Object key, Object value,\n-            MetaParamsInternalMetadata internalMetadata) {\n-         this.key = key;\n-         this.value = value;\n-         this.internalMetadata = internalMetadata;\n-      }\n-   }\n }\n"}}, {"oid": "2adb7b4b4895d16cf1522b2620f65727ed37c325", "url": "https://github.com/infinispan/infinispan/commit/2adb7b4b4895d16cf1522b2620f65727ed37c325", "message": "ISPN-11300 Add internal metadata to cache entries", "committedDate": "2020-02-18T09:18:10Z", "type": "forcePushed"}, {"oid": "56a35105e672f0bffef3d73a6c5cd3321de5d534", "url": "https://github.com/infinispan/infinispan/commit/56a35105e672f0bffef3d73a6c5cd3321de5d534", "message": "wip...", "committedDate": "2020-02-19T21:18:35Z", "type": "forcePushed"}, {"oid": "7c7494e93effcee1d5495521742abd9e84a5ec3d", "url": "https://github.com/infinispan/infinispan/commit/7c7494e93effcee1d5495521742abd9e84a5ec3d", "message": "I'm an idiot :)", "committedDate": "2020-02-20T17:17:12Z", "type": "forcePushed"}, {"oid": "508ff6f1586e8eb706254f1f09af7c963cb7b00c", "url": "https://github.com/infinispan/infinispan/commit/508ff6f1586e8eb706254f1f09af7c963cb7b00c", "message": "wip...", "committedDate": "2020-02-21T11:55:01Z", "type": "forcePushed"}, {"oid": "8b2107928b219b5818264e3a3ac632d790210ed6", "url": "https://github.com/infinispan/infinispan/commit/8b2107928b219b5818264e3a3ac632d790210ed6", "message": "wip...", "committedDate": "2020-03-02T10:59:57Z", "type": "forcePushed"}, {"oid": "d63fa8c44699e19d709a9d9a8e2fc97b43cfcb3b", "url": "https://github.com/infinispan/infinispan/commit/d63fa8c44699e19d709a9d9a8e2fc97b43cfcb3b", "message": "wip...", "committedDate": "2020-03-03T09:50:24Z", "type": "forcePushed"}, {"oid": "6ba99c923a57ba615e0b4d3b84a7b6547b4147d5", "url": "https://github.com/infinispan/infinispan/commit/6ba99c923a57ba615e0b4d3b84a7b6547b4147d5", "message": "wip...", "committedDate": "2020-03-03T14:01:41Z", "type": "forcePushed"}, {"oid": "053658bb32abcaf7f9dc902eadb1e8dbc300f95b", "url": "https://github.com/infinispan/infinispan/commit/053658bb32abcaf7f9dc902eadb1e8dbc300f95b", "message": "Add offheap", "committedDate": "2020-03-04T09:53:01Z", "type": "forcePushed"}, {"oid": "a719ef8dfae497687f8d5c8d5a26b34356a973da", "url": "https://github.com/infinispan/infinispan/commit/a719ef8dfae497687f8d5c8d5a26b34356a973da", "message": "Add offheap", "committedDate": "2020-03-09T10:27:02Z", "type": "forcePushed"}, {"oid": "0be9aaf6eae11b663fed469ea2466084d3a64369", "url": "https://github.com/infinispan/infinispan/commit/0be9aaf6eae11b663fed469ea2466084d3a64369", "message": "ISPN-11300 Add internal metadata to cache entries", "committedDate": "2020-03-13T10:16:37Z", "type": "forcePushed"}, {"oid": "c7ddb8b91dd6946a1a28bbb5cb7d18a99a5faadd", "url": "https://github.com/infinispan/infinispan/commit/c7ddb8b91dd6946a1a28bbb5cb7d18a99a5faadd", "message": "ISPN-11300 Add internal metadata to cache entries", "committedDate": "2020-03-17T15:21:24Z", "type": "commit"}, {"oid": "c7ddb8b91dd6946a1a28bbb5cb7d18a99a5faadd", "url": "https://github.com/infinispan/infinispan/commit/c7ddb8b91dd6946a1a28bbb5cb7d18a99a5faadd", "message": "ISPN-11300 Add internal metadata to cache entries", "committedDate": "2020-03-17T15:21:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU1MzMxNA==", "url": "https://github.com/infinispan/infinispan/pull/7858#discussion_r401553314", "bodyText": "This is not a public method, so there's no reason to keep the old signature around", "author": "danberindei", "createdAt": "2020-04-01T11:45:22Z", "path": "core/src/main/java/org/infinispan/container/impl/KeyValueMetadataSizeCalculator.java", "diffHunk": "@@ -17,5 +18,18 @@\n     * @param metadata The metadata for this entry to be used in size calculation\n     * @return The size approximately in memory the key, value and metadata use.\n     */\n-   long calculateSize(K key, V value, Metadata metadata);\n+   default long calculateSize(K key, V value, Metadata metadata) {", "originalCommit": "c7ddb8b91dd6946a1a28bbb5cb7d18a99a5faadd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU1NDE0MQ==", "url": "https://github.com/infinispan/infinispan/pull/7858#discussion_r401554141", "bodyText": "Yes, it can be removed, I'm actually removing it in #8136", "author": "danberindei", "createdAt": "2020-04-01T11:47:02Z", "path": "core/src/main/java/org/infinispan/container/offheap/OffHeapEntryFactory.java", "diffHunk": "@@ -20,7 +21,22 @@\n     * @return the address of where the entry was created\n     */\n    default long create(WrappedBytes key, WrappedBytes value, Metadata metadata) {\n-      return create(key, key.hashCode(), value, metadata);\n+      //TODO! can it ^ be removed?", "originalCommit": "c7ddb8b91dd6946a1a28bbb5cb7d18a99a5faadd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU1NTU4Ng==", "url": "https://github.com/infinispan/infinispan/pull/7858#discussion_r401555586", "bodyText": "\ud83d\udd2a, it's only used by a test.", "author": "danberindei", "createdAt": "2020-04-01T11:49:50Z", "path": "core/src/main/java/org/infinispan/container/offheap/UnpooledOffHeapMemoryAllocator.java", "diffHunk": "@@ -53,11 +53,55 @@ public long getAllocatedAmount() {\n    /**\n     * Tries to estimate overhead of the allocation by first adding 8 to account for underlying allocator housekeeping\n     * and then rounds up to nearest power of 16 to account for 16 byte alignment.\n+    *\n     * @param size the desired size of the allocation\n     * @return the resulting size taking into account various overheads\n     */\n    public static long estimateSizeOverhead(long size) {\n       // We take 8 and add the number provided and then round up to 16 (& operator has higher precedence than +)\n       return (size + 8 + 15) & ~15;\n    }\n+\n+   /**\n+    * See {@link #offHeapEntrySize(boolean, boolean, int, int, int, int)}\n+    */\n+   public static long offHeapEntrySize(boolean evictionEnabled, boolean writeMetadataSize, int keySize, int valueSize) {", "originalCommit": "c7ddb8b91dd6946a1a28bbb5cb7d18a99a5faadd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU1ODY0Mw==", "url": "https://github.com/infinispan/infinispan/pull/7858#discussion_r401558643", "bodyText": "So there's an extra 80-64=16 bytes even when the MetaParamsInternalMetadata isn't used?", "author": "danberindei", "createdAt": "2020-04-01T11:55:33Z", "path": "core/src/test/java/org/infinispan/stats/SingleStatsTest.java", "diffHunk": "@@ -64,10 +69,10 @@ protected void configure(ConfigurationBuilder cfg) {\n             // Binary key/value size is 128 bytes\n             size *= 128;\n          } else {\n-            // Off heap key/value size is 64 bytes\n-            size = UnpooledOffHeapMemoryAllocator.estimateSizeOverhead(size * 64);\n+            // Off heap key/value size is 80 bytes", "originalCommit": "c7ddb8b91dd6946a1a28bbb5cb7d18a99a5faadd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}