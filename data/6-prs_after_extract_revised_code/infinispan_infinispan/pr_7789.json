{"pr_number": 7789, "pr_title": "ISPN-11206 Remove Lucene and Hibernate queries from the public API", "pr_createdAt": "2020-01-27T14:16:57Z", "pr_url": "https://github.com/infinispan/infinispan/pull/7789", "timeline": [{"oid": "52a4c94ef68433854b700f6354a927511a752aeb", "url": "https://github.com/infinispan/infinispan/commit/52a4c94ef68433854b700f6354a927511a752aeb", "message": "ISPN-11206 Remove Lucene query serialization", "committedDate": "2020-01-27T17:11:26Z", "type": "forcePushed"}, {"oid": "de18c825a83488c091d204320e182fc28da3cea1", "url": "https://github.com/infinispan/infinispan/commit/de18c825a83488c091d204320e182fc28da3cea1", "message": "ISPN-11206 Remove Lucene and Hibernate queries from the public API", "committedDate": "2020-01-31T16:08:01Z", "type": "forcePushed"}, {"oid": "b475060595b80e92b7acd602edd89c598a4ae80e", "url": "https://github.com/infinispan/infinispan/commit/b475060595b80e92b7acd602edd89c598a4ae80e", "message": "ISPN-11206 Remove Lucene and Hibernate queries from the public API", "committedDate": "2020-02-10T08:32:12Z", "type": "forcePushed"}, {"oid": "0d4082cb2c7870cd466639ade626fb4272c48532", "url": "https://github.com/infinispan/infinispan/commit/0d4082cb2c7870cd466639ade626fb4272c48532", "message": "ISPN-11206 Remove Lucene and Hibernate queries from the public API", "committedDate": "2020-02-10T08:37:45Z", "type": "forcePushed"}, {"oid": "93bc5492588df6bb1a79c548cfebf3014c93d3c7", "url": "https://github.com/infinispan/infinispan/commit/93bc5492588df6bb1a79c548cfebf3014c93d3c7", "message": "ISPN-11206 Remove Lucene and Hibernate queries from the public API", "committedDate": "2020-02-25T07:42:45Z", "type": "forcePushed"}, {"oid": "b455cc71cbfe9564ee0a8de31f08df6d0165bf9d", "url": "https://github.com/infinispan/infinispan/commit/b455cc71cbfe9564ee0a8de31f08df6d0165bf9d", "message": "ISPN-11206 Remove Lucene and Hibernate queries from the public API", "committedDate": "2020-02-28T14:33:57Z", "type": "forcePushed"}, {"oid": "d84d7dc5f6f321516e394f3fa55710c01a8daf1d", "url": "https://github.com/infinispan/infinispan/commit/d84d7dc5f6f321516e394f3fa55710c01a8daf1d", "message": "ISPN-11206 Remove Lucene and Hibernate queries from the public API", "committedDate": "2020-02-29T09:33:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA3NTAwNQ==", "url": "https://github.com/infinispan/infinispan/pull/7789#discussion_r387075005", "bodyText": "So asyncExecutor and indexedQueryMode params are no longer used here. Why not remove them also from method signature? We can do that, QueryEngine is not API.", "author": "anistor", "createdAt": "2020-03-03T14:56:21Z", "path": "query/src/main/java/org/infinispan/query/dsl/embedded/impl/QueryEngine.java", "diffHunk": "@@ -666,15 +666,9 @@ protected RowProcessor makeProjectionProcessor(Class<?>[] projectedTypes, Object\n                                             TimeoutExceptionFactory timeoutExceptionFactory,\n                                             ExecutorService asyncExecutor,\n                                             Class<?>... classes) {\n-      CacheQuery cacheQuery;\n-      if (indexedQueryMode == IndexedQueryMode.BROADCAST) {\n-         cacheQuery = new ClusteredCacheQueryImpl<>(luceneQuery, getSearchFactory(), asyncExecutor, cache,\n-               keyTransformationHandler, classes);\n-      } else {\n-         cacheQuery = new CacheQueryImpl<>(luceneQuery, getSearchFactory(), cache, keyTransformationHandler,\n-               timeoutExceptionFactory, classes);\n-      }\n-      return (CacheQuery<E>) cacheQuery;\n+      return new CacheQueryImpl<>(luceneQuery, getSearchFactory(), cache, keyTransformationHandler,", "originalCommit": "d84d7dc5f6f321516e394f3fa55710c01a8daf1d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f8edcfc3b25f37b6ce864c93e28ef8cfa73c145", "chunk": "diff --git a/query/src/main/java/org/infinispan/query/dsl/embedded/impl/QueryEngine.java b/query/src/main/java/org/infinispan/query/dsl/embedded/impl/QueryEngine.java\nindex 980b495b21..8a9482d83a 100644\n--- a/query/src/main/java/org/infinispan/query/dsl/embedded/impl/QueryEngine.java\n+++ b/query/src/main/java/org/infinispan/query/dsl/embedded/impl/QueryEngine.java\n\n@@ -661,13 +661,12 @@ protected RowProcessor makeProjectionProcessor(Class<?>[] projectedTypes, Object\n       return null;\n    }\n \n-   public <E> CacheQuery<E> buildCacheQuery(org.apache.lucene.search.Query luceneQuery, IndexedQueryMode indexedQueryMode,\n+   public <E> CacheQuery<E> buildCacheQuery(org.apache.lucene.search.Query luceneQuery,\n                                             KeyTransformationHandler keyTransformationHandler,\n                                             TimeoutExceptionFactory timeoutExceptionFactory,\n-                                            ExecutorService asyncExecutor,\n-                                            Class<?>... classes) {\n+                                            Class<?> entity) {\n       return new CacheQueryImpl<>(luceneQuery, getSearchFactory(), cache, keyTransformationHandler,\n-            timeoutExceptionFactory, classes);\n+            timeoutExceptionFactory, entity);\n \n    }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4MjcyMQ==", "url": "https://github.com/infinispan/infinispan/pull/7789#discussion_r387082721", "bodyText": "It's a bit odd we loose the classes argument in SearcManager.getQuery but QueryEngine.buildCacheQuery still takes an array of classes", "author": "anistor", "createdAt": "2020-03-03T15:07:22Z", "path": "query/src/main/java/org/infinispan/query/impl/SearchManagerImpl.java", "diffHunk": "@@ -63,10 +60,10 @@ public SearchManagerImpl(AdvancedCache<?, ?> cache) {\n    }\n \n    @Override\n-   public <E> CacheQuery<E> getQuery(String queryString, IndexedQueryMode indexedQueryMode, Class<?>... classes) {\n+   public <E> CacheQuery<E> getQuery(String queryString, IndexedQueryMode indexedQueryMode) {", "originalCommit": "d84d7dc5f6f321516e394f3fa55710c01a8daf1d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f8edcfc3b25f37b6ce864c93e28ef8cfa73c145", "chunk": "diff --git a/query/src/main/java/org/infinispan/query/impl/SearchManagerImpl.java b/query/src/main/java/org/infinispan/query/impl/SearchManagerImpl.java\nindex 9fea69a9cd..959bcd110b 100644\n--- a/query/src/main/java/org/infinispan/query/impl/SearchManagerImpl.java\n+++ b/query/src/main/java/org/infinispan/query/impl/SearchManagerImpl.java\n\n@@ -54,9 +54,8 @@ public SearchManagerImpl(AdvancedCache<?, ?> cache) {\n    }\n \n    @Override\n-   public <E> CacheQuery<E> getQuery(Query luceneQuery, IndexedQueryMode indexedQueryMode, Class<?>... classes) {\n-      ExecutorService asyncExecutor = queryInterceptor.getAsyncExecutor();\n-      return queryEngine.buildCacheQuery(luceneQuery, indexedQueryMode, keyTransformationHandler, timeoutExceptionFactory, asyncExecutor, classes);\n+   public <E> CacheQuery<E> getQuery(Query luceneQuery, IndexedQueryMode indexedQueryMode, Class<?> entity) {\n+      return queryEngine.buildCacheQuery(luceneQuery, keyTransformationHandler, timeoutExceptionFactory, entity);\n    }\n \n    @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEwODM2NQ==", "url": "https://github.com/infinispan/infinispan/pull/7789#discussion_r387108365", "bodyText": "This test could have been kept. Just remove lines 62-78 and we're good.", "author": "anistor", "createdAt": "2020-03-03T15:44:08Z", "path": "remote-query/remote-query-server/src/test/java/org/infinispan/query/remote/impl/indexing/ProtobufWrapperIndexingTest.java", "diffHunk": "@@ -1,111 +0,0 @@\n-package org.infinispan.query.remote.impl.indexing;\n-\n-import static org.testng.AssertJUnit.assertEquals;\n-import static org.testng.AssertJUnit.assertNotNull;\n-\n-import java.io.IOException;\n-import java.util.Collections;\n-import java.util.List;\n-\n-import org.apache.lucene.search.Query;\n-import org.hibernate.search.query.engine.spi.EntityInfo;\n-import org.hibernate.search.spi.SearchIntegrator;\n-import org.infinispan.configuration.cache.ConfigurationBuilder;\n-import org.infinispan.manager.EmbeddedCacheManager;\n-import org.infinispan.protostream.ProtobufUtil;\n-import org.infinispan.protostream.SerializationContext;\n-import org.infinispan.protostream.sampledomain.Address;\n-import org.infinispan.protostream.sampledomain.User;\n-import org.infinispan.protostream.sampledomain.marshallers.MarshallerRegistration;\n-import org.infinispan.query.Search;\n-import org.infinispan.query.SearchManager;\n-import org.infinispan.query.remote.impl.ProgrammaticSearchMappingProviderImpl;\n-import org.infinispan.query.remote.impl.ProtobufMetadataManagerImpl;\n-import org.infinispan.test.SingleCacheManagerTest;\n-import org.infinispan.test.fwk.TestCacheManagerFactory;\n-import org.infinispan.transaction.TransactionMode;\n-import org.testng.annotations.Test;\n-\n-/**\n- * @author anistor@redhat.com\n- * @since 6.0\n- */\n-@Test(groups = \"functional\", testName = \"query.remote.impl.indexing.ProtobufWrapperIndexingTest\")\n-public class ProtobufWrapperIndexingTest extends SingleCacheManagerTest {\n-\n-   protected EmbeddedCacheManager createCacheManager() throws Exception {\n-      ConfigurationBuilder cfg = getDefaultStandaloneCacheConfig(true);\n-      cfg.transaction().transactionMode(TransactionMode.TRANSACTIONAL)\n-            .indexing().enable()\n-            .addProperty(\"default.directory_provider\", \"local-heap\")\n-            .addProperty(\"lucene_version\", \"LUCENE_CURRENT\");\n-      return TestCacheManagerFactory.createCacheManager(cfg);\n-   }\n-\n-   public void testIndexingWithWrapper() throws Exception {\n-      SerializationContext serCtx = ProtobufMetadataManagerImpl.getSerializationContext(cacheManager);\n-\n-      MarshallerRegistration.registerMarshallers(serCtx);\n-\n-      // Store some test data:\n-      byte[] value1 = createMarshalledUser(serCtx, \"Adrian\", \"Nistor\");\n-      byte[] value2 = createMarshalledUser(serCtx, \"John\", \"Batman\");\n-\n-      cache.put(new byte[]{1, 2, 3}, value1);\n-      cache.put(new byte[]{4, 5, 6}, value2);\n-\n-      SearchManager sm = Search.getSearchManager(cache);\n-\n-      SearchIntegrator searchFactory = sm.unwrap(SearchIntegrator.class);\n-      assertNotNull(searchFactory.getIndexManager(ProgrammaticSearchMappingProviderImpl.getIndexName(cache.getName())));\n-\n-      Query luceneQuery = sm.buildQueryBuilderForClass(ProtobufValueWrapper.class)", "originalCommit": "d84d7dc5f6f321516e394f3fa55710c01a8daf1d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f8edcfc3b25f37b6ce864c93e28ef8cfa73c145", "chunk": "diff --git a/remote-query/remote-query-server/src/test/java/org/infinispan/query/remote/impl/indexing/ProtobufWrapperIndexingTest.java b/remote-query/remote-query-server/src/test/java/org/infinispan/query/remote/impl/indexing/ProtobufWrapperIndexingTest.java\nnew file mode 100644\nindex 0000000000..3a41ab7266\n--- /dev/null\n+++ b/remote-query/remote-query-server/src/test/java/org/infinispan/query/remote/impl/indexing/ProtobufWrapperIndexingTest.java\n\n@@ -0,0 +1,94 @@\n+package org.infinispan.query.remote.impl.indexing;\n+\n+import static org.testng.AssertJUnit.assertEquals;\n+import static org.testng.AssertJUnit.assertNotNull;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.lucene.search.Query;\n+import org.hibernate.search.query.engine.spi.EntityInfo;\n+import org.hibernate.search.spi.SearchIntegrator;\n+import org.infinispan.configuration.cache.ConfigurationBuilder;\n+import org.infinispan.manager.EmbeddedCacheManager;\n+import org.infinispan.protostream.ProtobufUtil;\n+import org.infinispan.protostream.SerializationContext;\n+import org.infinispan.protostream.sampledomain.Address;\n+import org.infinispan.protostream.sampledomain.User;\n+import org.infinispan.protostream.sampledomain.marshallers.MarshallerRegistration;\n+import org.infinispan.query.Search;\n+import org.infinispan.query.SearchManager;\n+import org.infinispan.query.remote.impl.ProgrammaticSearchMappingProviderImpl;\n+import org.infinispan.query.remote.impl.ProtobufMetadataManagerImpl;\n+import org.infinispan.test.SingleCacheManagerTest;\n+import org.infinispan.test.fwk.TestCacheManagerFactory;\n+import org.infinispan.transaction.TransactionMode;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * @author anistor@redhat.com\n+ * @since 6.0\n+ */\n+@Test(groups = \"functional\", testName = \"query.remote.impl.indexing.ProtobufWrapperIndexingTest\")\n+public class ProtobufWrapperIndexingTest extends SingleCacheManagerTest {\n+\n+   protected EmbeddedCacheManager createCacheManager() throws Exception {\n+      ConfigurationBuilder cfg = getDefaultStandaloneCacheConfig(true);\n+      cfg.transaction().transactionMode(TransactionMode.TRANSACTIONAL)\n+            .indexing().enable()\n+            .addProperty(\"default.directory_provider\", \"local-heap\")\n+            .addProperty(\"lucene_version\", \"LUCENE_CURRENT\");\n+      return TestCacheManagerFactory.createCacheManager(cfg);\n+   }\n+\n+   public void testIndexingWithWrapper() throws Exception {\n+      SerializationContext serCtx = ProtobufMetadataManagerImpl.getSerializationContext(cacheManager);\n+\n+      MarshallerRegistration.registerMarshallers(serCtx);\n+\n+      // Store some test data:\n+      byte[] value1 = createMarshalledUser(serCtx, \"Adrian\", \"Nistor\");\n+      byte[] value2 = createMarshalledUser(serCtx, \"John\", \"Batman\");\n+\n+      cache.put(new byte[]{1, 2, 3}, value1);\n+      cache.put(new byte[]{4, 5, 6}, value2);\n+\n+      SearchManager sm = Search.getSearchManager(cache);\n+\n+      SearchIntegrator searchFactory = sm.unwrap(SearchIntegrator.class);\n+      assertNotNull(searchFactory.getIndexManager(ProgrammaticSearchMappingProviderImpl.getIndexName(cache.getName())));\n+\n+      Query luceneQuery2 = searchFactory.buildQueryBuilder().forEntity(ProtobufValueWrapper.class).get()\n+            .keyword()\n+            .onField(\"name\")\n+            .ignoreFieldBridge()\n+            .ignoreAnalyzer()\n+            .matching(\"Adrian\")\n+            .createQuery();\n+\n+      List<EntityInfo> queryEntityInfos = searchFactory.createHSQuery(luceneQuery2, ProtobufValueWrapper.class)\n+            .projection(\"surname\")\n+            .queryEntityInfos();\n+\n+      assertEquals(1, queryEntityInfos.size());\n+      EntityInfo entityInfo = queryEntityInfos.get(0);\n+      assertEquals(\"Nistor\", entityInfo.getProjection()[0]);\n+   }\n+\n+   private byte[] createMarshalledUser(SerializationContext serCtx, String name, String surname) throws IOException {\n+      User user = new User();\n+      user.setId(1);\n+      user.setName(name);\n+      user.setSurname(surname);\n+      user.setGender(User.Gender.MALE);\n+      user.setAccountIds(Collections.singleton(12));\n+\n+      Address address = new Address();\n+      address.setStreet(\"Dark Alley\");\n+      address.setPostCode(\"1234\");\n+      user.setAddresses(Collections.singletonList(address));\n+\n+      return ProtobufUtil.toWrappedByteArray(serCtx, user);\n+   }\n+}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzExNDYyNQ==", "url": "https://github.com/infinispan/infinispan/pull/7789#discussion_r387114625", "bodyText": "The old version of the code was setting firstResult and maxResults here only first time, if hsQuery == null.", "author": "anistor", "createdAt": "2020-03-03T15:53:06Z", "path": "query/src/main/java/org/infinispan/query/impl/QueryDefinition.java", "diffHunk": "@@ -98,26 +85,20 @@ private QueryEngine getQueryEngine(AdvancedCache<?, ?> cache) {\n \n    public void initialize(AdvancedCache<?, ?> cache) {\n       if (hsQuery == null) {\n-         if (luceneQuery != null) {\n-            hsQuery = ComponentRegistryUtils.getSearchIntegrator(cache).createHSQuery(luceneQuery);\n-            if (sort != null)\n-               hsQuery.sort(sort);\n+         QueryEngine<?> queryEngine = getQueryEngine(cache);\n+         HsQueryRequest hsQueryRequest;\n+         if (indexedType != null && sortableFields != null) {\n+            IndexedTypeMap<CustomTypeMetadata> metadata = createMetadata();\n+            hsQueryRequest = queryEngine.createHsQuery(queryString, metadata, namedParameters);\n          } else {\n-            QueryEngine queryEngine = getQueryEngine(cache);\n-            HsQueryRequest hsQueryRequest;\n-            if (indexedType != null && sortableFields != null) {\n-               IndexedTypeMap<CustomTypeMetadata> metadata = createMetadata();\n-               hsQueryRequest = queryEngine.createHsQuery(queryString, metadata, namedParameters);\n-            } else {\n-               hsQueryRequest = queryEngine.createHsQuery(queryString, null, namedParameters);\n-            }\n-            hsQuery = hsQueryRequest.getHsQuery();\n-            sort = hsQueryRequest.getSort();\n-            hsQuery.projection(hsQueryRequest.getProjections());\n+            hsQueryRequest = queryEngine.createHsQuery(queryString, null, namedParameters);\n          }\n-         hsQuery.firstResult(firstResult);\n-         hsQuery.maxResults(maxResults);\n+         hsQuery = hsQueryRequest.getHsQuery();\n+         sort = hsQueryRequest.getSort();\n+         hsQuery.projection(hsQueryRequest.getProjections());\n       }\n+      hsQuery.firstResult(firstResult);", "originalCommit": "d84d7dc5f6f321516e394f3fa55710c01a8daf1d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f8edcfc3b25f37b6ce864c93e28ef8cfa73c145", "chunk": "diff --git a/query/src/main/java/org/infinispan/query/impl/QueryDefinition.java b/query/src/main/java/org/infinispan/query/impl/QueryDefinition.java\nindex 31d0c11141..b98dee6d44 100644\n--- a/query/src/main/java/org/infinispan/query/impl/QueryDefinition.java\n+++ b/query/src/main/java/org/infinispan/query/impl/QueryDefinition.java\n\n@@ -96,9 +96,9 @@ public void initialize(AdvancedCache<?, ?> cache) {\n          hsQuery = hsQueryRequest.getHsQuery();\n          sort = hsQueryRequest.getSort();\n          hsQuery.projection(hsQueryRequest.getProjections());\n+         hsQuery.firstResult(firstResult);\n+         hsQuery.maxResults(maxResults);\n       }\n-      hsQuery.firstResult(firstResult);\n-      hsQuery.maxResults(maxResults);\n    }\n \n    public HSQuery getHsQuery() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzExNjYyNw==", "url": "https://github.com/infinispan/infinispan/pull/7789#discussion_r387116627", "bodyText": "Extracting this out of the loop is an optimization that impacts the measurement. I believe we want to measure total query execution time including any initial preparation/parsing time for the query. The system is free to eventually internally optimize that by using caching for parsed queries, but we should not help here.", "author": "anistor", "createdAt": "2020-03-03T15:56:01Z", "path": "client/hotrod-client/src/test/java/org/infinispan/client/hotrod/stress/RemoteQueryDslPerfTest.java", "diffHunk": "@@ -150,14 +150,12 @@ public void testEmbeddedQueryDslExecution() throws Exception {\n    }\n \n    public void testEmbeddedLuceneQueryExecution() throws Exception {\n-      SearchManager searchManager = org.infinispan.query.Search.getSearchManager(cache);\n-      org.apache.lucene.search.Query query = searchManager.buildQueryBuilderForClass(UserHS.class).get()\n-            .keyword().onField(\"name\").matching(\"John1\").createQuery();\n+      QueryFactory queryFactory = Search.getQueryFactory(cache);\n+      Query cacheQuery = queryFactory.create(String.format(\"From %s where name = 'John1'\", UserHS.class.getName()));\n \n       final int loops = 100000;\n       final long startTs = System.nanoTime();\n       for (int i = 0; i < loops; i++) {\n-         CacheQuery<User> cacheQuery = searchManager.getQuery(query);", "originalCommit": "d84d7dc5f6f321516e394f3fa55710c01a8daf1d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE0MDA3MQ==", "url": "https://github.com/infinispan/infinispan/pull/7789#discussion_r387140071", "bodyText": "ok, I'll move it back", "author": "gustavonalle", "createdAt": "2020-03-03T16:28:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzExNjYyNw=="}], "type": "inlineReview", "revised_code": {"commit": "7f8edcfc3b25f37b6ce864c93e28ef8cfa73c145", "chunk": "diff --git a/client/hotrod-client/src/test/java/org/infinispan/client/hotrod/stress/RemoteQueryDslPerfTest.java b/client/hotrod-client/src/test/java/org/infinispan/client/hotrod/stress/RemoteQueryDslPerfTest.java\nindex 2c56cae6c3..d56389fe54 100644\n--- a/client/hotrod-client/src/test/java/org/infinispan/client/hotrod/stress/RemoteQueryDslPerfTest.java\n+++ b/client/hotrod-client/src/test/java/org/infinispan/client/hotrod/stress/RemoteQueryDslPerfTest.java\n\n@@ -150,12 +150,11 @@ public void testEmbeddedQueryDslExecution() throws Exception {\n    }\n \n    public void testEmbeddedLuceneQueryExecution() throws Exception {\n-      QueryFactory queryFactory = Search.getQueryFactory(cache);\n-      Query cacheQuery = queryFactory.create(String.format(\"From %s where name = 'John1'\", UserHS.class.getName()));\n-\n       final int loops = 100000;\n       final long startTs = System.nanoTime();\n       for (int i = 0; i < loops; i++) {\n+         QueryFactory queryFactory = Search.getQueryFactory(cache);\n+         Query cacheQuery = queryFactory.create(String.format(\"From %s where name = 'John1'\", UserHS.class.getName()));\n          List<User> list = cacheQuery.list();\n          assertEquals(1, list.size());\n          assertEquals(\"John1\", list.get(0).getName());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzExOTQyOQ==", "url": "https://github.com/infinispan/infinispan/pull/7789#discussion_r387119429", "bodyText": "This javadoc ref is broken", "author": "anistor", "createdAt": "2020-03-03T15:59:44Z", "path": "query/src/main/java/org/infinispan/query/CacheQuery.java", "diffHunk": "@@ -18,7 +19,7 @@\n  * @author Navin Surtani\n  * @author Sanne Grinovero &lt;sanne@hibernate.org&gt; (C) 2011 Red Hat Inc.\n  * @author Marko Luksa\n- * @see org.infinispan.query.impl.SearchManagerImpl#getQuery(org.apache.lucene.search.Query, Class...)\n+ * @see org.infinispan.query.impl.SearchManagerImpl#getQuery(String, IndexedQueryMode, Class...)", "originalCommit": "d84d7dc5f6f321516e394f3fa55710c01a8daf1d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f8edcfc3b25f37b6ce864c93e28ef8cfa73c145", "chunk": "diff --git a/query/src/main/java/org/infinispan/query/CacheQuery.java b/query/src/main/java/org/infinispan/query/CacheQuery.java\nindex c99dec5cfd..01d23cc428 100644\n--- a/query/src/main/java/org/infinispan/query/CacheQuery.java\n+++ b/query/src/main/java/org/infinispan/query/CacheQuery.java\n\n@@ -19,7 +19,7 @@\n  * @author Navin Surtani\n  * @author Sanne Grinovero &lt;sanne@hibernate.org&gt; (C) 2011 Red Hat Inc.\n  * @author Marko Luksa\n- * @see org.infinispan.query.impl.SearchManagerImpl#getQuery(String, IndexedQueryMode, Class...)\n+ * @see org.infinispan.query.impl.SearchManagerImpl#getQuery(String, IndexedQueryMode)\n  */\n public interface CacheQuery<E> extends Iterable<E> {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyODkwNA==", "url": "https://github.com/infinispan/infinispan/pull/7789#discussion_r387128904", "bodyText": "I'm confused by this. Why 0?", "author": "anistor", "createdAt": "2020-03-03T16:13:19Z", "path": "query/src/test/java/org/infinispan/query/tx/NonLocalIndexingTest.java", "diffHunk": "@@ -61,7 +59,7 @@ public void testQueryAfterAddingNewNode() throws Exception {\n       store(\"Astronaut\", new AnotherGrassEater(\"Astronaut\", \"is having a hard time to find grass\"), cache(1));\n       //replacing same key with a new type:\n       assertFind(\"cat\", 0);\n-      assertFind(\"grass\", 1);\n+      assertFind(\"grass\", 0);", "originalCommit": "d84d7dc5f6f321516e394f3fa55710c01a8daf1d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEzNDUwMQ==", "url": "https://github.com/infinispan/infinispan/pull/7789#discussion_r387134501", "bodyText": "The API that worked on Lucene queries would do a query targeting all entities in the method assertFind (Person and AnotherGrassEater). With my changes it only targets the Person entity", "author": "gustavonalle", "createdAt": "2020-03-03T16:20:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEyODkwNA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "7f8edcfc3b25f37b6ce864c93e28ef8cfa73c145", "url": "https://github.com/infinispan/infinispan/commit/7f8edcfc3b25f37b6ce864c93e28ef8cfa73c145", "message": "ISPN-11206 Remove Lucene and Hibernate queries from the public API", "committedDate": "2020-03-04T09:02:34Z", "type": "commit"}, {"oid": "7f8edcfc3b25f37b6ce864c93e28ef8cfa73c145", "url": "https://github.com/infinispan/infinispan/commit/7f8edcfc3b25f37b6ce864c93e28ef8cfa73c145", "message": "ISPN-11206 Remove Lucene and Hibernate queries from the public API", "committedDate": "2020-03-04T09:02:34Z", "type": "forcePushed"}]}