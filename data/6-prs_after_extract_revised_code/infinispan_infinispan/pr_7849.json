{"pr_number": 7849, "pr_title": "ISPN-11266 Split CacheTopologyControlCommand into individual commands", "pr_createdAt": "2020-02-06T17:40:00Z", "pr_url": "https://github.com/infinispan/infinispan/pull/7849", "timeline": [{"oid": "ae59385b4429da9ce7e4e1a7a2ab6424c9fd8f70", "url": "https://github.com/infinispan/infinispan/commit/ae59385b4429da9ce7e4e1a7a2ab6424c9fd8f70", "message": "ISPN-11266 Split CacheTopologyControlCommand into individual commands", "committedDate": "2020-02-07T13:00:49Z", "type": "forcePushed"}, {"oid": "3fa43ee551a03ac077f54e2d0d041785dacae319", "url": "https://github.com/infinispan/infinispan/commit/3fa43ee551a03ac077f54e2d0d041785dacae319", "message": "ISPN-11266 Split CacheTopologyControlCommand into individual commands", "committedDate": "2020-02-07T15:59:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3NjE2Ng==", "url": "https://github.com/infinispan/infinispan/pull/7849#discussion_r377076166", "bodyText": "You don't need to create the Response. GlobalInboundInvocationHandler wraps the return value for you,", "author": "pruivo", "createdAt": "2020-02-10T13:56:09Z", "path": "core/src/main/java/org/infinispan/commands/topology/CacheStatusCommand.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.infinispan.commands.topology;\n+\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+import java.io.ObjectOutput;\n+import java.util.concurrent.CompletionStage;\n+\n+import org.infinispan.factories.GlobalComponentRegistry;\n+import org.infinispan.remoting.responses.SuccessfulResponse;\n+\n+/**\n+ * The coordinator is requesting information about the running caches.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+public class CacheStatusCommand extends AbstractTopologyCommand {\n+\n+   public static final byte COMMAND_ID = 96;\n+\n+   private int viewId;\n+\n+   // For CommandIdUniquenessTest only\n+   public CacheStatusCommand() {\n+      super(COMMAND_ID);\n+   }\n+\n+   public CacheStatusCommand(int viewId) {\n+      super(COMMAND_ID);\n+      this.viewId = viewId;\n+   }\n+\n+   @Override\n+   public CompletionStage<?> invokeAsync(GlobalComponentRegistry gcr) throws Throwable {\n+      return gcr.getLocalTopologyManager()\n+            .handleStatusRequest(viewId)\n+            .thenApply(SuccessfulResponse::create);", "originalCommit": "3fa43ee551a03ac077f54e2d0d041785dacae319", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "acf0d3be8c13aa250d6d7e9e1a4a9fc39b914cd0", "chunk": "diff --git a/core/src/main/java/org/infinispan/commands/topology/CacheStatusCommand.java b/core/src/main/java/org/infinispan/commands/topology/CacheStatusCommand.java\nindex 6da43c8ace..8cd1350417 100644\n--- a/core/src/main/java/org/infinispan/commands/topology/CacheStatusCommand.java\n+++ b/core/src/main/java/org/infinispan/commands/topology/CacheStatusCommand.java\n\n@@ -6,7 +6,6 @@\n import java.util.concurrent.CompletionStage;\n \n import org.infinispan.factories.GlobalComponentRegistry;\n-import org.infinispan.remoting.responses.SuccessfulResponse;\n \n /**\n  * The coordinator is requesting information about the running caches.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3ODI3MQ==", "url": "https://github.com/infinispan/infinispan/pull/7849#discussion_r377078271", "bodyText": "we can avoid sending the sender. You have ReplicableCommand.setOrigin(Address) that is invoked on the receiver side with the sender address.", "author": "pruivo", "createdAt": "2020-02-10T13:59:45Z", "path": "core/src/main/java/org/infinispan/commands/topology/ConfirmRebalancePhaseCommand.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package org.infinispan.commands.topology;\n+\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+import java.io.ObjectOutput;\n+import java.util.concurrent.CompletionStage;\n+\n+import org.infinispan.commons.marshall.MarshallUtil;\n+import org.infinispan.factories.GlobalComponentRegistry;\n+import org.infinispan.remoting.responses.SuccessfulResponse;\n+import org.infinispan.remoting.transport.Address;\n+import org.infinispan.topology.CacheTopology;\n+\n+/**\n+ * A member is confirming that it has finished a topology change during rebalance. This confirmation is sent after\n+ * topologies with {@link CacheTopology.Phase#READ_OLD_WRITE_ALL}, {@link CacheTopology.Phase#READ_ALL_WRITE_ALL} and\n+ * {@link CacheTopology.Phase#READ_NEW_WRITE_ALL} rebalance phases are installed, but not after a topology change with\n+ * {@link CacheTopology.Phase#NO_REBALANCE} phase.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+public class ConfirmRebalancePhaseCommand extends AbstractTopologyCommand {\n+\n+   public static final byte COMMAND_ID = 87;\n+\n+   private String cacheName;\n+   private Address sender;\n+   private Throwable throwable;\n+   private int topologyId;\n+   private int viewId;\n+\n+   // For CommandIdUniquenessTest only\n+   public ConfirmRebalancePhaseCommand() {\n+      super(COMMAND_ID);\n+   }\n+\n+   public ConfirmRebalancePhaseCommand(String cacheName, Address sender, Throwable throwable, int topologyId, int viewId) {\n+      super(COMMAND_ID);\n+      this.cacheName = cacheName;\n+      this.sender = sender;\n+      this.throwable = throwable;\n+      this.topologyId = topologyId;\n+      this.viewId = viewId;\n+   }\n+\n+   @Override\n+   public CompletionStage<?> invokeAsync(GlobalComponentRegistry gcr) throws Throwable {\n+      return gcr.getClusterTopologyManager()\n+            .handleRebalancePhaseConfirm(cacheName, sender, topologyId, throwable, viewId)\n+            .thenApply(SuccessfulResponse::create);\n+   }\n+\n+   public String getCacheName() {\n+      return cacheName;\n+   }\n+\n+   @Override\n+   public void writeTo(ObjectOutput output) throws IOException {\n+      MarshallUtil.marshallString(cacheName, output);\n+      output.writeObject(sender);", "originalCommit": "3fa43ee551a03ac077f54e2d0d041785dacae319", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIwMjk4OA==", "url": "https://github.com/infinispan/infinispan/pull/7849#discussion_r377202988", "bodyText": "Good spot \ud83d\udc4d", "author": "ryanemerson", "createdAt": "2020-02-10T17:20:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3ODI3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "acf0d3be8c13aa250d6d7e9e1a4a9fc39b914cd0", "chunk": "diff --git a/core/src/main/java/org/infinispan/commands/topology/ConfirmRebalancePhaseCommand.java b/core/src/main/java/org/infinispan/commands/topology/ConfirmRebalancePhaseCommand.java\nindex 2111b43de8..1ea7b85015 100644\n--- a/core/src/main/java/org/infinispan/commands/topology/ConfirmRebalancePhaseCommand.java\n+++ b/core/src/main/java/org/infinispan/commands/topology/ConfirmRebalancePhaseCommand.java\n\n@@ -7,7 +7,6 @@\n \n import org.infinispan.commons.marshall.MarshallUtil;\n import org.infinispan.factories.GlobalComponentRegistry;\n-import org.infinispan.remoting.responses.SuccessfulResponse;\n import org.infinispan.remoting.transport.Address;\n import org.infinispan.topology.CacheTopology;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3ODg0OQ==", "url": "https://github.com/infinispan/infinispan/pull/7849#discussion_r377078849", "bodyText": "CacheTopology has an externalizer. You can extract the code to static methods and invoke them. No need to declare all these fields neither copy-paste the write/read code.", "author": "pruivo", "createdAt": "2020-02-10T14:00:51Z", "path": "core/src/main/java/org/infinispan/commands/topology/ConsistentHashUpdateCommand.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package org.infinispan.commands.topology;\n+\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+import java.io.ObjectOutput;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CompletionStage;\n+\n+import org.infinispan.commons.marshall.MarshallUtil;\n+import org.infinispan.distribution.ch.ConsistentHash;\n+import org.infinispan.factories.GlobalComponentRegistry;\n+import org.infinispan.partitionhandling.AvailabilityMode;\n+import org.infinispan.remoting.responses.SuccessfulResponse;\n+import org.infinispan.remoting.transport.Address;\n+import org.infinispan.topology.CacheTopology;\n+import org.infinispan.topology.PersistentUUID;\n+\n+/**\n+ * Coordinator to member:\n+ * The coordinator is updating the consistent hash.\n+ * Used to signal the end of rebalancing as well.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+public class ConsistentHashUpdateCommand extends AbstractTopologyCommand {\n+\n+   public static final byte COMMAND_ID = 95;\n+\n+   private String cacheName;\n+   private Address sender;\n+   private ConsistentHash currentCH;\n+   private ConsistentHash pendingCH;\n+   private CacheTopology.Phase phase;\n+   private List<Address> actualMembers;\n+   private List<PersistentUUID> persistentUUIDs;\n+   private AvailabilityMode availabilityMode;\n+   private int rebalanceId;\n+   private int topologyId;\n+   private int viewId;\n+\n+   // For CommandIdUniquenessTest only\n+   public ConsistentHashUpdateCommand() {\n+      super(COMMAND_ID);\n+   }\n+\n+   public ConsistentHashUpdateCommand(String cacheName, Address sender, CacheTopology cacheTopology,\n+                                      AvailabilityMode availabilityMode, int viewId) {\n+      super(COMMAND_ID);\n+      this.cacheName = cacheName;\n+      this.sender = sender;\n+      this.topologyId = cacheTopology.getTopologyId();\n+      this.rebalanceId = cacheTopology.getRebalanceId();\n+      this.currentCH = cacheTopology.getCurrentCH();\n+      this.pendingCH = cacheTopology.getPendingCH();\n+      this.phase = cacheTopology.getPhase();\n+      this.availabilityMode = availabilityMode;\n+      this.actualMembers = cacheTopology.getActualMembers();\n+      this.persistentUUIDs = cacheTopology.getMembersPersistentUUIDs();\n+      this.viewId = viewId;\n+   }\n+\n+   @Override\n+   public CompletionStage<?> invokeAsync(GlobalComponentRegistry gcr) throws Throwable {\n+      CacheTopology topology = new CacheTopology(topologyId, rebalanceId, currentCH, pendingCH, phase, actualMembers, persistentUUIDs);\n+      return gcr.getLocalTopologyManager()\n+            .handleTopologyUpdate(cacheName, topology, availabilityMode, viewId, sender)\n+            .thenApply(SuccessfulResponse::create);\n+   }\n+\n+   public String getCacheName() {\n+      return cacheName;\n+   }\n+\n+   public ConsistentHash getCurrentCH() {\n+      return currentCH;\n+   }\n+\n+   public ConsistentHash getPendingCH() {\n+      return pendingCH;\n+   }\n+\n+   public CacheTopology.Phase getPhase() {\n+      return phase;\n+   }\n+\n+   public int getTopologyId() {\n+      return topologyId;\n+   }\n+\n+   @Override\n+   public void writeTo(ObjectOutput output) throws IOException {\n+      MarshallUtil.marshallString(cacheName, output);\n+      output.writeObject(sender);\n+      output.writeObject(currentCH);", "originalCommit": "3fa43ee551a03ac077f54e2d0d041785dacae319", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE5NzI3MQ==", "url": "https://github.com/infinispan/infinispan/pull/7849#discussion_r377197271", "bodyText": "The CacheTopology externalizer will be removed, as well this writeTo implementation once the GlobalMarshaller is converted to protostream. I just lifted this code from the old command.", "author": "ryanemerson", "createdAt": "2020-02-10T17:09:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3ODg0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIzMjk1MQ==", "url": "https://github.com/infinispan/infinispan/pull/7849#discussion_r377232951", "bodyText": "I noticed the \"copy-paste\" style :)\nHow long until it is converted to protostream? Is it worth to make the change/refactorization?", "author": "pruivo", "createdAt": "2020-02-10T18:17:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3ODg0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU2NzI5NQ==", "url": "https://github.com/infinispan/infinispan/pull/7849#discussion_r377567295", "bodyText": "I'm refactoring the commands to make the protostream conversion easier, so it's actually already started \ud83d\ude42", "author": "ryanemerson", "createdAt": "2020-02-11T11:03:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3ODg0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "acf0d3be8c13aa250d6d7e9e1a4a9fc39b914cd0", "chunk": "diff --git a/core/src/main/java/org/infinispan/commands/topology/ConsistentHashUpdateCommand.java b/core/src/main/java/org/infinispan/commands/topology/ConsistentHashUpdateCommand.java\nindex 362a772553..08b4aac7a0 100644\n--- a/core/src/main/java/org/infinispan/commands/topology/ConsistentHashUpdateCommand.java\n+++ b/core/src/main/java/org/infinispan/commands/topology/ConsistentHashUpdateCommand.java\n\n@@ -11,7 +11,6 @@\n import org.infinispan.distribution.ch.ConsistentHash;\n import org.infinispan.factories.GlobalComponentRegistry;\n import org.infinispan.partitionhandling.AvailabilityMode;\n-import org.infinispan.remoting.responses.SuccessfulResponse;\n import org.infinispan.remoting.transport.Address;\n import org.infinispan.topology.CacheTopology;\n import org.infinispan.topology.PersistentUUID;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA4MDE5Mw==", "url": "https://github.com/infinispan/infinispan/pull/7849#discussion_r377080193", "bodyText": "not sure what is the state about custom commands (or modules command).", "author": "pruivo", "createdAt": "2020-02-10T14:03:11Z", "path": "core/src/main/java/org/infinispan/remoting/inboundhandler/GlobalInboundInvocationHandler.java", "diffHunk": "@@ -154,6 +154,7 @@ private ReplicableCommandRunner(ReplicableCommand command, Reply reply,\n       @Override\n       public void run() {\n          try {\n+            // TODO can we remove this?", "originalCommit": "3fa43ee551a03ac077f54e2d0d041785dacae319", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE5ODc2Ng==", "url": "https://github.com/infinispan/infinispan/pull/7849#discussion_r377198766", "bodyText": "I think we can move it so that it's in the else block of the command instanceof GlobalRpcCommand, because if it's a GlobalRpcCommand (new interface as of 11) it should be utilising the component registry passed with invokeAsync. @danberindei Any thoughts?", "author": "ryanemerson", "createdAt": "2020-02-10T17:12:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA4MDE5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIzMTM1OA==", "url": "https://github.com/infinispan/infinispan/pull/7849#discussion_r377231358", "bodyText": "+1 to move it.", "author": "pruivo", "createdAt": "2020-02-10T18:14:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA4MDE5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "acf0d3be8c13aa250d6d7e9e1a4a9fc39b914cd0", "chunk": "diff --git a/core/src/main/java/org/infinispan/remoting/inboundhandler/GlobalInboundInvocationHandler.java b/core/src/main/java/org/infinispan/remoting/inboundhandler/GlobalInboundInvocationHandler.java\nindex e51d2b2b1f..772dfe6ca0 100644\n--- a/core/src/main/java/org/infinispan/remoting/inboundhandler/GlobalInboundInvocationHandler.java\n+++ b/core/src/main/java/org/infinispan/remoting/inboundhandler/GlobalInboundInvocationHandler.java\n\n@@ -154,12 +154,11 @@ private ReplicableCommandRunner(ReplicableCommand command, Reply reply,\n       @Override\n       public void run() {\n          try {\n-            // TODO can we remove this?\n-            globalComponentRegistry.wireDependencies(command);\n             CompletionStage<?> stage;\n             if (command instanceof GlobalRpcCommand) {\n                stage = ((GlobalRpcCommand) command).invokeAsync(globalComponentRegistry).whenComplete(this);\n             } else {\n+               globalComponentRegistry.wireDependencies(command);\n                stage = command.invokeAsync().whenComplete(this);\n             }\n             if (preserveOrder) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA4MTk4MQ==", "url": "https://github.com/infinispan/infinispan/pull/7849#discussion_r377081981", "bodyText": "AFAIK, yes. I think can change the methods to receive AbstractTopologyCommand instead of ReplicableCommand.", "author": "pruivo", "createdAt": "2020-02-10T14:06:36Z", "path": "core/src/main/java/org/infinispan/topology/TopologyManagementHelper.java", "diffHunk": "@@ -115,6 +115,7 @@ public void executeOnCoordinatorAsync(Transport transport, ReplicableCommand com\n          if (trace)\n             log.tracef(\"Attempting to execute command on self: %s\", command);\n          try {\n+            // TODO can we remove this as it's always the ConfirmRebalancePhaseCommand?", "originalCommit": "3fa43ee551a03ac077f54e2d0d041785dacae319", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "acf0d3be8c13aa250d6d7e9e1a4a9fc39b914cd0", "chunk": "diff --git a/core/src/main/java/org/infinispan/topology/TopologyManagementHelper.java b/core/src/main/java/org/infinispan/topology/TopologyManagementHelper.java\nindex b65661d931..074c912f90 100644\n--- a/core/src/main/java/org/infinispan/topology/TopologyManagementHelper.java\n+++ b/core/src/main/java/org/infinispan/topology/TopologyManagementHelper.java\n\n@@ -110,13 +111,11 @@ public void executeOnClusterAsync(Transport transport, ReplicableCommand command\n       });\n    }\n \n-   public void executeOnCoordinatorAsync(Transport transport, ReplicableCommand command) throws Exception {\n+   public void executeOnCoordinatorAsync(Transport transport, AbstractTopologyCommand command) throws Exception {\n       if (transport.isCoordinator()) {\n          if (trace)\n             log.tracef(\"Attempting to execute command on self: %s\", command);\n          try {\n-            // TODO can we remove this as it's always the ConfirmRebalancePhaseCommand?\n-            bcr.wireDependencies(command, true);\n             // ignore the result\n             invokeAsync(command);\n          } catch (Throwable t) {\n"}}, {"oid": "acf0d3be8c13aa250d6d7e9e1a4a9fc39b914cd0", "url": "https://github.com/infinispan/infinispan/commit/acf0d3be8c13aa250d6d7e9e1a4a9fc39b914cd0", "message": "Don't serialize origin Address", "committedDate": "2020-02-11T11:52:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY4MTg5MA==", "url": "https://github.com/infinispan/infinispan/pull/7849#discussion_r377681890", "bodyText": "this constructor isn't required. origin will be set on the receiver node.", "author": "pruivo", "createdAt": "2020-02-11T14:50:38Z", "path": "core/src/main/java/org/infinispan/commands/topology/AbstractTopologyCommand.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.infinispan.commands.topology;\n+\n+import org.infinispan.commands.GlobalRpcCommand;\n+import org.infinispan.factories.scopes.Scope;\n+import org.infinispan.factories.scopes.Scopes;\n+import org.infinispan.remoting.transport.Address;\n+\n+@Scope(Scopes.NONE)\n+public abstract class AbstractTopologyCommand implements GlobalRpcCommand {\n+\n+   private final byte commandId;\n+\n+   protected transient Address origin;\n+\n+   AbstractTopologyCommand(byte commandId) {\n+      this(commandId, null);\n+   }\n+\n+   AbstractTopologyCommand(byte commandId, Address origin) {", "originalCommit": "acf0d3be8c13aa250d6d7e9e1a4a9fc39b914cd0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzczNzgyMQ==", "url": "https://github.com/infinispan/infinispan/pull/7849#discussion_r377737821", "bodyText": "It is set on the receiver side, however the address is also used for local invocations so we need this in place. I tried removing the origin, however it results in the testsuite hanging.", "author": "ryanemerson", "createdAt": "2020-02-11T16:12:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY4MTg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgzMTg0Mg==", "url": "https://github.com/infinispan/infinispan/pull/7849#discussion_r377831842", "bodyText": "ah! I see... the TopologyManagementHelper invokes the command directly. \ud83d\udc4d", "author": "pruivo", "createdAt": "2020-02-11T18:55:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY4MTg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUzNDUyMQ==", "url": "https://github.com/infinispan/infinispan/pull/7849#discussion_r381534521", "bodyText": "Ugh, maybe TopologyManagementHelper should be changed instead -- I'll have a look at it later :)", "author": "danberindei", "createdAt": "2020-02-19T20:46:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY4MTg5MA=="}], "type": "inlineReview", "revised_code": {"commit": "ba6006e6dc645eeebe21e435d1474b162e3325d0", "chunk": "diff --git a/core/src/main/java/org/infinispan/commands/topology/AbstractTopologyCommand.java b/core/src/main/java/org/infinispan/commands/topology/AbstractCacheControlCommand.java\nsimilarity index 79%\nrename from core/src/main/java/org/infinispan/commands/topology/AbstractTopologyCommand.java\nrename to core/src/main/java/org/infinispan/commands/topology/AbstractCacheControlCommand.java\nindex 4f5066dc87..31fd9af791 100644\n--- a/core/src/main/java/org/infinispan/commands/topology/AbstractTopologyCommand.java\n+++ b/core/src/main/java/org/infinispan/commands/topology/AbstractCacheControlCommand.java\n\n@@ -6,17 +6,17 @@\n import org.infinispan.remoting.transport.Address;\n \n @Scope(Scopes.NONE)\n-public abstract class AbstractTopologyCommand implements GlobalRpcCommand {\n+public abstract class AbstractCacheControlCommand implements GlobalRpcCommand {\n \n    private final byte commandId;\n \n    protected transient Address origin;\n \n-   AbstractTopologyCommand(byte commandId) {\n+   AbstractCacheControlCommand(byte commandId) {\n       this(commandId, null);\n    }\n \n-   AbstractTopologyCommand(byte commandId, Address origin) {\n+   AbstractCacheControlCommand(byte commandId, Address origin) {\n       this.commandId = commandId;\n       this.origin = origin;\n    }\n"}}, {"oid": "59229522b8af809e714879e89e66f6798b25f237", "url": "https://github.com/infinispan/infinispan/commit/59229522b8af809e714879e89e66f6798b25f237", "message": "Combine RebalanceDisable and Enable commands", "committedDate": "2020-02-13T18:39:46Z", "type": "forcePushed"}, {"oid": "8d798faa40a2aa0eae84e7ef5a50bec28539638f", "url": "https://github.com/infinispan/infinispan/commit/8d798faa40a2aa0eae84e7ef5a50bec28539638f", "message": "Combine RebalanceDisable and Enable commands", "committedDate": "2020-02-17T11:36:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEzMjY4MQ==", "url": "https://github.com/infinispan/infinispan/pull/7849#discussion_r380132681", "bodyText": "@link uses #\nI also suggest adding new lines after . and/or before {@link to avoid splitting links.", "author": "danberindei", "createdAt": "2020-02-17T11:38:19Z", "path": "core/src/main/java/org/infinispan/commands/GlobalRpcCommand.java", "diffHunk": "@@ -5,8 +5,10 @@\n import org.infinispan.factories.GlobalComponentRegistry;\n \n /**\n- * Commands correspond to specific areas of functionality in the cluster, and can be replicated using the\n- * {@link org.infinispan.remoting.inboundhandler.GlobalInboundInvocationHandler}.\n+ * Commands correspond to specific areas of functionality in the cluster, and can be replicated using the {@link\n+ * org.infinispan.remoting.inboundhandler.GlobalInboundInvocationHandler}. Implementations of this interface should not\n+ * rely on calls to {@link GlobalComponentRegistry::wireDependencies}, as all components should be accessed via the", "originalCommit": "8d798faa40a2aa0eae84e7ef5a50bec28539638f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba6006e6dc645eeebe21e435d1474b162e3325d0", "chunk": "diff --git a/core/src/main/java/org/infinispan/commands/GlobalRpcCommand.java b/core/src/main/java/org/infinispan/commands/GlobalRpcCommand.java\nindex 73a4e573ae..573f30e6b6 100644\n--- a/core/src/main/java/org/infinispan/commands/GlobalRpcCommand.java\n+++ b/core/src/main/java/org/infinispan/commands/GlobalRpcCommand.java\n\n@@ -7,8 +7,8 @@\n /**\n  * Commands correspond to specific areas of functionality in the cluster, and can be replicated using the {@link\n  * org.infinispan.remoting.inboundhandler.GlobalInboundInvocationHandler}. Implementations of this interface should not\n- * rely on calls to {@link GlobalComponentRegistry::wireDependencies}, as all components should be accessed via the\n- * passed {@link GlobalComponentRegistry} in the {@link #invokeAsync(GlobalComponentRegistry)} method.\n+ * rely on calls to {@link GlobalComponentRegistry#wireDependencies(Object)}, as all components should be accessed via\n+ * the passed {@link GlobalComponentRegistry} in the {@link #invokeAsync(GlobalComponentRegistry)} method.\n  *\n  * @author Ryan Emerson\n  * @since 11.0\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU1NTU5NQ==", "url": "https://github.com/infinispan/infinispan/pull/7849#discussion_r381555595", "bodyText": "You missed TRANSITORY... maybe it's best not to mention the phases here at all.", "author": "danberindei", "createdAt": "2020-02-19T21:29:48Z", "path": "core/src/main/java/org/infinispan/commands/topology/ConfirmRebalancePhaseCommand.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package org.infinispan.commands.topology;\n+\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+import java.io.ObjectOutput;\n+import java.util.concurrent.CompletionStage;\n+\n+import org.infinispan.commons.marshall.MarshallUtil;\n+import org.infinispan.factories.GlobalComponentRegistry;\n+import org.infinispan.remoting.transport.Address;\n+import org.infinispan.topology.CacheTopology;\n+\n+/**\n+ * A member is confirming that it has finished a topology change during rebalance. This confirmation is sent after\n+ * topologies with {@link CacheTopology.Phase#READ_OLD_WRITE_ALL}, {@link CacheTopology.Phase#READ_ALL_WRITE_ALL} and\n+ * {@link CacheTopology.Phase#READ_NEW_WRITE_ALL} rebalance phases are installed, but not after a topology change with", "originalCommit": "8d798faa40a2aa0eae84e7ef5a50bec28539638f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk1MDg4MA==", "url": "https://github.com/infinispan/infinispan/pull/7849#discussion_r381950880", "bodyText": "\ud83d\udc4d It was just a copy and paste, so I'll remove the offending bits.", "author": "ryanemerson", "createdAt": "2020-02-20T11:48:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU1NTU5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "ba6006e6dc645eeebe21e435d1474b162e3325d0", "chunk": "diff --git a/core/src/main/java/org/infinispan/commands/topology/ConfirmRebalancePhaseCommand.java b/core/src/main/java/org/infinispan/commands/topology/RebalancePhaseConfirmCommand.java\nsimilarity index 78%\nrename from core/src/main/java/org/infinispan/commands/topology/ConfirmRebalancePhaseCommand.java\nrename to core/src/main/java/org/infinispan/commands/topology/RebalancePhaseConfirmCommand.java\nindex 1ea7b85015..6644413b79 100644\n--- a/core/src/main/java/org/infinispan/commands/topology/ConfirmRebalancePhaseCommand.java\n+++ b/core/src/main/java/org/infinispan/commands/topology/RebalancePhaseConfirmCommand.java\n\n@@ -8,18 +8,14 @@\n import org.infinispan.commons.marshall.MarshallUtil;\n import org.infinispan.factories.GlobalComponentRegistry;\n import org.infinispan.remoting.transport.Address;\n-import org.infinispan.topology.CacheTopology;\n \n /**\n- * A member is confirming that it has finished a topology change during rebalance. This confirmation is sent after\n- * topologies with {@link CacheTopology.Phase#READ_OLD_WRITE_ALL}, {@link CacheTopology.Phase#READ_ALL_WRITE_ALL} and\n- * {@link CacheTopology.Phase#READ_NEW_WRITE_ALL} rebalance phases are installed, but not after a topology change with\n- * {@link CacheTopology.Phase#NO_REBALANCE} phase.\n+ * A member is confirming that it has finished a topology change during rebalance.\n  *\n  * @author Ryan Emerson\n  * @since 11.0\n  */\n-public class ConfirmRebalancePhaseCommand extends AbstractTopologyCommand {\n+public class RebalancePhaseConfirmCommand extends AbstractCacheControlCommand {\n \n    public static final byte COMMAND_ID = 87;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU2MTE4OQ==", "url": "https://github.com/infinispan/infinispan/pull/7849#discussion_r381561189", "bodyText": "Should be TopologyUpdateCommand, I've wanted to update that constant's name for a long time.", "author": "danberindei", "createdAt": "2020-02-19T21:41:34Z", "path": "core/src/main/java/org/infinispan/commands/topology/ConsistentHashUpdateCommand.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package org.infinispan.commands.topology;\n+\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+import java.io.ObjectOutput;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CompletionStage;\n+\n+import org.infinispan.commons.marshall.MarshallUtil;\n+import org.infinispan.distribution.ch.ConsistentHash;\n+import org.infinispan.factories.GlobalComponentRegistry;\n+import org.infinispan.partitionhandling.AvailabilityMode;\n+import org.infinispan.remoting.transport.Address;\n+import org.infinispan.topology.CacheTopology;\n+import org.infinispan.topology.PersistentUUID;\n+\n+/**\n+ * Coordinator to member:\n+ * The coordinator is updating the consistent hash.\n+ * Used to signal the end of rebalancing as well.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+public class ConsistentHashUpdateCommand extends AbstractTopologyCommand {", "originalCommit": "8d798faa40a2aa0eae84e7ef5a50bec28539638f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba6006e6dc645eeebe21e435d1474b162e3325d0", "chunk": "diff --git a/core/src/main/java/org/infinispan/commands/topology/ConsistentHashUpdateCommand.java b/core/src/main/java/org/infinispan/commands/topology/TopologyUpdateCommand.java\nsimilarity index 93%\nrename from core/src/main/java/org/infinispan/commands/topology/ConsistentHashUpdateCommand.java\nrename to core/src/main/java/org/infinispan/commands/topology/TopologyUpdateCommand.java\nindex 08b4aac7a0..da845e4524 100644\n--- a/core/src/main/java/org/infinispan/commands/topology/ConsistentHashUpdateCommand.java\n+++ b/core/src/main/java/org/infinispan/commands/topology/TopologyUpdateCommand.java\n\n@@ -23,7 +23,7 @@\n  * @author Ryan Emerson\n  * @since 11.0\n  */\n-public class ConsistentHashUpdateCommand extends AbstractTopologyCommand {\n+public class TopologyUpdateCommand extends AbstractCacheControlCommand {\n \n    public static final byte COMMAND_ID = 95;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU2MjIzMQ==", "url": "https://github.com/infinispan/infinispan/pull/7849#discussion_r381562231", "bodyText": "I'd call it CacheJoinCommand", "author": "danberindei", "createdAt": "2020-02-19T21:43:43Z", "path": "core/src/main/java/org/infinispan/commands/topology/TopologyJoinCommand.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package org.infinispan.commands.topology;\n+\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+import java.io.ObjectOutput;\n+import java.util.concurrent.CompletionStage;\n+\n+import org.infinispan.commons.marshall.MarshallUtil;\n+import org.infinispan.factories.GlobalComponentRegistry;\n+import org.infinispan.remoting.transport.Address;\n+import org.infinispan.topology.CacheJoinInfo;\n+\n+/**\n+ * A node is requesting to join the cluster.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+public class TopologyJoinCommand extends AbstractTopologyCommand {", "originalCommit": "8d798faa40a2aa0eae84e7ef5a50bec28539638f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba6006e6dc645eeebe21e435d1474b162e3325d0", "chunk": "diff --git a/core/src/main/java/org/infinispan/commands/topology/TopologyJoinCommand.java b/core/src/main/java/org/infinispan/commands/topology/CacheJoinCommand.java\nsimilarity index 82%\nrename from core/src/main/java/org/infinispan/commands/topology/TopologyJoinCommand.java\nrename to core/src/main/java/org/infinispan/commands/topology/CacheJoinCommand.java\nindex e29be87e73..a2fd8ffa08 100644\n--- a/core/src/main/java/org/infinispan/commands/topology/TopologyJoinCommand.java\n+++ b/core/src/main/java/org/infinispan/commands/topology/CacheJoinCommand.java\n\n@@ -9,6 +9,7 @@\n import org.infinispan.factories.GlobalComponentRegistry;\n import org.infinispan.remoting.transport.Address;\n import org.infinispan.topology.CacheJoinInfo;\n+import org.infinispan.topology.CacheStatusResponse;\n \n /**\n  * A node is requesting to join the cluster.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU2Mjg2Mg==", "url": "https://github.com/infinispan/infinispan/pull/7849#discussion_r381562862", "bodyText": "And this one CacheLeaveCommand.", "author": "danberindei", "createdAt": "2020-02-19T21:44:59Z", "path": "core/src/main/java/org/infinispan/commands/topology/TopologyLeaveCommand.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package org.infinispan.commands.topology;\n+\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+import java.io.ObjectOutput;\n+import java.util.concurrent.CompletionStage;\n+\n+import org.infinispan.commons.marshall.MarshallUtil;\n+import org.infinispan.factories.GlobalComponentRegistry;\n+import org.infinispan.remoting.transport.Address;\n+\n+/**\n+ * A node is signaling that it wants to leave the cluster.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+public class TopologyLeaveCommand extends AbstractTopologyCommand {", "originalCommit": "8d798faa40a2aa0eae84e7ef5a50bec28539638f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba6006e6dc645eeebe21e435d1474b162e3325d0", "chunk": "diff --git a/core/src/main/java/org/infinispan/commands/topology/TopologyLeaveCommand.java b/core/src/main/java/org/infinispan/commands/topology/CacheLeaveCommand.java\nsimilarity index 89%\nrename from core/src/main/java/org/infinispan/commands/topology/TopologyLeaveCommand.java\nrename to core/src/main/java/org/infinispan/commands/topology/CacheLeaveCommand.java\nindex b2dee8b72b..725666e406 100644\n--- a/core/src/main/java/org/infinispan/commands/topology/TopologyLeaveCommand.java\n+++ b/core/src/main/java/org/infinispan/commands/topology/CacheLeaveCommand.java\n\n@@ -15,7 +15,7 @@\n  * @author Ryan Emerson\n  * @since 11.0\n  */\n-public class TopologyLeaveCommand extends AbstractTopologyCommand {\n+public class CacheLeaveCommand extends AbstractCacheControlCommand {\n \n    public static final byte COMMAND_ID = 86;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU3MzEzNg==", "url": "https://github.com/infinispan/infinispan/pull/7849#discussion_r381573136", "bodyText": "This command probably shouldn't exist, and the rebalancing status/policy should be part of the join response.\nIt also looks a lot like RebalanceStatusCommand.", "author": "danberindei", "createdAt": "2020-02-19T22:06:17Z", "path": "core/src/main/java/org/infinispan/commands/topology/RebalanceGetPolicyCommand.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.infinispan.commands.topology;\n+\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+import java.io.ObjectOutput;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import org.infinispan.commons.marshall.MarshallUtil;\n+import org.infinispan.factories.GlobalComponentRegistry;\n+\n+/**\n+ * Check whether rebalancing is enabled.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+public class RebalanceGetPolicyCommand extends AbstractTopologyCommand {", "originalCommit": "8d798faa40a2aa0eae84e7ef5a50bec28539638f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba6006e6dc645eeebe21e435d1474b162e3325d0", "chunk": "diff --git a/core/src/main/java/org/infinispan/commands/topology/RebalanceGetPolicyCommand.java b/core/src/main/java/org/infinispan/commands/topology/RebalanceGetPolicyCommand.java\ndeleted file mode 100644\nindex 9ec8fbb6df..0000000000\n--- a/core/src/main/java/org/infinispan/commands/topology/RebalanceGetPolicyCommand.java\n+++ /dev/null\n\n@@ -1,56 +0,0 @@\n-package org.infinispan.commands.topology;\n-\n-import java.io.IOException;\n-import java.io.ObjectInput;\n-import java.io.ObjectOutput;\n-import java.util.concurrent.CompletableFuture;\n-import java.util.concurrent.CompletionStage;\n-\n-import org.infinispan.commons.marshall.MarshallUtil;\n-import org.infinispan.factories.GlobalComponentRegistry;\n-\n-/**\n- * Check whether rebalancing is enabled.\n- *\n- * @author Ryan Emerson\n- * @since 11.0\n- */\n-public class RebalanceGetPolicyCommand extends AbstractTopologyCommand {\n-\n-   public static final byte COMMAND_ID = 91;\n-\n-   private String cacheName;\n-\n-   // For CommandIdUniquenessTest only\n-   public RebalanceGetPolicyCommand() {\n-      super(COMMAND_ID);\n-   }\n-\n-   public RebalanceGetPolicyCommand(String cacheName) {\n-      super(COMMAND_ID);\n-      this.cacheName = cacheName;\n-   }\n-\n-   @Override\n-   public CompletionStage<Boolean> invokeAsync(GlobalComponentRegistry gcr) throws Throwable {\n-      boolean enabled = gcr.getClusterTopologyManager().isRebalancingEnabled(cacheName);\n-      return CompletableFuture.completedFuture(enabled);\n-   }\n-\n-   @Override\n-   public void writeTo(ObjectOutput output) throws IOException {\n-      MarshallUtil.marshallString(cacheName, output);\n-   }\n-\n-   @Override\n-   public void readFrom(ObjectInput input) throws IOException, ClassNotFoundException {\n-      cacheName = MarshallUtil.unmarshallString(input);\n-   }\n-\n-   @Override\n-   public String toString() {\n-      return \"RebalancePolicyCommand{\" +\n-            \"cacheName='\" + cacheName + '\\'' +\n-            '}';\n-   }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU3ODk2OQ==", "url": "https://github.com/infinispan/infinispan/pull/7849#discussion_r381578969", "bodyText": "You could have a single ShutdownCacheCommand and call either handleShutdownRequest or handleCacheShutdown based on whether the local node was the coordinator.\nI'm not 100% sure it's a a good idea, but I thought I'd mention it :)", "author": "danberindei", "createdAt": "2020-02-19T22:18:52Z", "path": "core/src/main/java/org/infinispan/commands/topology/ShutdownCacheCommand.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package org.infinispan.commands.topology;\n+\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+import java.io.ObjectOutput;\n+import java.util.concurrent.CompletionStage;\n+\n+import org.infinispan.commons.marshall.MarshallUtil;\n+import org.infinispan.factories.GlobalComponentRegistry;\n+\n+/**\n+ * Tell members to shutdown cache.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n+public class ShutdownCacheCommand extends AbstractTopologyCommand {", "originalCommit": "8d798faa40a2aa0eae84e7ef5a50bec28539638f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk0NjczOA==", "url": "https://github.com/infinispan/infinispan/pull/7849#discussion_r381946738", "bodyText": "IMO having the two distinct commands is much more explicit and will make reading trace logs easier.", "author": "ryanemerson", "createdAt": "2020-02-20T11:40:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU3ODk2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAxODU4Nw==", "url": "https://github.com/infinispan/infinispan/pull/7849#discussion_r382018587", "bodyText": "Maybe... But I already forgot which command goes to the coordinator and which goes from the coordinator since reading the code yesterday :)", "author": "danberindei", "createdAt": "2020-02-20T14:05:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU3ODk2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "ba6006e6dc645eeebe21e435d1474b162e3325d0", "chunk": "diff --git a/core/src/main/java/org/infinispan/commands/topology/ShutdownCacheCommand.java b/core/src/main/java/org/infinispan/commands/topology/CacheShutdownCommand.java\nsimilarity index 88%\nrename from core/src/main/java/org/infinispan/commands/topology/ShutdownCacheCommand.java\nrename to core/src/main/java/org/infinispan/commands/topology/CacheShutdownCommand.java\nindex 3159842cb3..389ab20c1d 100644\n--- a/core/src/main/java/org/infinispan/commands/topology/ShutdownCacheCommand.java\n+++ b/core/src/main/java/org/infinispan/commands/topology/CacheShutdownCommand.java\n\n@@ -14,18 +14,18 @@\n  * @author Ryan Emerson\n  * @since 11.0\n  */\n-public class ShutdownCacheCommand extends AbstractTopologyCommand {\n+public class CacheShutdownCommand extends AbstractCacheControlCommand {\n \n    public static final byte COMMAND_ID = 94;\n \n    private String cacheName;\n \n    // For CommandIdUniquenessTest only\n-   public ShutdownCacheCommand() {\n+   public CacheShutdownCommand() {\n       super(COMMAND_ID);\n    }\n \n-   public ShutdownCacheCommand(String cacheName) {\n+   public CacheShutdownCommand(String cacheName) {\n       super(COMMAND_ID);\n       this.cacheName = cacheName;\n    }\n"}}, {"oid": "ba6006e6dc645eeebe21e435d1474b162e3325d0", "url": "https://github.com/infinispan/infinispan/commit/ba6006e6dc645eeebe21e435d1474b162e3325d0", "message": "Send rebalanceEnabled in CacheStateResponse", "committedDate": "2020-02-20T20:40:36Z", "type": "forcePushed"}, {"oid": "7a510389ed48a51931a7d43669b0a1941b02d821", "url": "https://github.com/infinispan/infinispan/commit/7a510389ed48a51931a7d43669b0a1941b02d821", "message": "Send rebalanceEnabled in CacheStateResponse", "committedDate": "2020-02-20T23:42:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQxNDIwOA==", "url": "https://github.com/infinispan/infinispan/pull/7849#discussion_r382414208", "bodyText": "\"should\" is not strong enough IMO, I would say\n{@code @Inject} annotations on implementations will be ignored, components must be accessed via the\n{@link GlobalComponentRegistry} parameter of {@link #invokeAsync(GlobalComponentRegistry)}.\n\nAlso please start on a new line ;)", "author": "danberindei", "createdAt": "2020-02-21T06:19:03Z", "path": "core/src/main/java/org/infinispan/commands/GlobalRpcCommand.java", "diffHunk": "@@ -5,8 +5,10 @@\n import org.infinispan.factories.GlobalComponentRegistry;\n \n /**\n- * Commands correspond to specific areas of functionality in the cluster, and can be replicated using the\n- * {@link org.infinispan.remoting.inboundhandler.GlobalInboundInvocationHandler}.\n+ * Commands correspond to specific areas of functionality in the cluster, and can be replicated using the {@link\n+ * org.infinispan.remoting.inboundhandler.GlobalInboundInvocationHandler}. Implementations of this interface should not", "originalCommit": "7a510389ed48a51931a7d43669b0a1941b02d821", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "951b825f3b01539441ec544c5d946b7a77d4f604", "chunk": "diff --git a/core/src/main/java/org/infinispan/commands/GlobalRpcCommand.java b/core/src/main/java/org/infinispan/commands/GlobalRpcCommand.java\nindex 573f30e6b6..63b35b35ab 100644\n--- a/core/src/main/java/org/infinispan/commands/GlobalRpcCommand.java\n+++ b/core/src/main/java/org/infinispan/commands/GlobalRpcCommand.java\n\n@@ -6,9 +6,11 @@\n \n /**\n  * Commands correspond to specific areas of functionality in the cluster, and can be replicated using the {@link\n- * org.infinispan.remoting.inboundhandler.GlobalInboundInvocationHandler}. Implementations of this interface should not\n- * rely on calls to {@link GlobalComponentRegistry#wireDependencies(Object)}, as all components should be accessed via\n- * the passed {@link GlobalComponentRegistry} in the {@link #invokeAsync(GlobalComponentRegistry)} method.\n+ * org.infinispan.remoting.inboundhandler.GlobalInboundInvocationHandler}.\n+ *\n+ * Implementations of this interface must not rely on calls to {@link GlobalComponentRegistry#wireDependencies(Object)},\n+ * as {@code @Inject} annotations on implementations will be ignored, components must be accessed via the\n+ * {@link GlobalComponentRegistry} parameter of {@link #invokeAsync(GlobalComponentRegistry)}.\n  *\n  * @author Ryan Emerson\n  * @since 11.0\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQxNDMyMA==", "url": "https://github.com/infinispan/infinispan/pull/7849#discussion_r382414320", "bodyText": "Missing javadoc", "author": "danberindei", "createdAt": "2020-02-21T06:19:30Z", "path": "core/src/main/java/org/infinispan/commands/topology/AbstractCacheControlCommand.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.infinispan.commands.topology;\n+\n+import org.infinispan.commands.GlobalRpcCommand;\n+import org.infinispan.factories.scopes.Scope;\n+import org.infinispan.factories.scopes.Scopes;\n+import org.infinispan.remoting.transport.Address;\n+\n+@Scope(Scopes.NONE)", "originalCommit": "7a510389ed48a51931a7d43669b0a1941b02d821", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "951b825f3b01539441ec544c5d946b7a77d4f604", "chunk": "diff --git a/core/src/main/java/org/infinispan/commands/topology/AbstractCacheControlCommand.java b/core/src/main/java/org/infinispan/commands/topology/AbstractCacheControlCommand.java\nindex 31fd9af791..2328fb28b5 100644\n--- a/core/src/main/java/org/infinispan/commands/topology/AbstractCacheControlCommand.java\n+++ b/core/src/main/java/org/infinispan/commands/topology/AbstractCacheControlCommand.java\n\n@@ -5,6 +5,12 @@\n import org.infinispan.factories.scopes.Scopes;\n import org.infinispan.remoting.transport.Address;\n \n+/**\n+ * Abstract class that is the basis for the Cache, Rebalance and Topology commands.\n+ *\n+ * @author Ryan Emerson\n+ * @since 11.0\n+ */\n @Scope(Scopes.NONE)\n public abstract class AbstractCacheControlCommand implements GlobalRpcCommand {\n \n"}}, {"oid": "951b825f3b01539441ec544c5d946b7a77d4f604", "url": "https://github.com/infinispan/infinispan/commit/951b825f3b01539441ec544c5d946b7a77d4f604", "message": "Javadoc Fixes", "committedDate": "2020-02-21T13:14:53Z", "type": "forcePushed"}, {"oid": "046c33f8e1cd5c608814b82863270e883bbce1c8", "url": "https://github.com/infinispan/infinispan/commit/046c33f8e1cd5c608814b82863270e883bbce1c8", "message": "ISPN-11266 Split CacheTopologyControlCommand into individual commands", "committedDate": "2020-02-21T13:17:01Z", "type": "commit"}, {"oid": "046c33f8e1cd5c608814b82863270e883bbce1c8", "url": "https://github.com/infinispan/infinispan/commit/046c33f8e1cd5c608814b82863270e883bbce1c8", "message": "ISPN-11266 Split CacheTopologyControlCommand into individual commands", "committedDate": "2020-02-21T13:17:01Z", "type": "forcePushed"}]}