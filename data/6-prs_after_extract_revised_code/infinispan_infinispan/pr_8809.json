{"pr_number": 8809, "pr_title": "ISPN-12401 Support for query and indexing statistics", "pr_createdAt": "2020-10-23T16:10:57Z", "pr_url": "https://github.com/infinispan/infinispan/pull/8809", "timeline": [{"oid": "07168587033bf52a078a6d5b758a3c8e66530052", "url": "https://github.com/infinispan/infinispan/commit/07168587033bf52a078a6d5b758a3c8e66530052", "message": "ISPN-12401 Support for query and indexing statistics", "committedDate": "2020-10-26T11:55:34Z", "type": "forcePushed"}, {"oid": "b36b8a7b4577e73551ea4147d1d0269cb5c533ee", "url": "https://github.com/infinispan/infinispan/commit/b36b8a7b4577e73551ea4147d1d0269cb5c533ee", "message": "ISPN-12401 Support for query and indexing statistics", "committedDate": "2020-10-26T14:27:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQzNTQwNw==", "url": "https://github.com/infinispan/infinispan/pull/8809#discussion_r514435407", "bodyText": "Java docs", "author": "karesti", "createdAt": "2020-10-29T17:22:55Z", "path": "query-core/src/main/java/org/infinispan/query/core/stats/SearchStatistics.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package org.infinispan.query.core.stats;\n+\n+/**\n+ * Exposes query and index statistics for a cache.\n+ *\n+ * @since 12.0\n+ */\n+public interface SearchStatistics {\n+\n+   QueryStatistics getQueryStatistics();", "originalCommit": "b36b8a7b4577e73551ea4147d1d0269cb5c533ee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d7f66c57dd6817b6a37fcf2e25e2404d4408a608", "chunk": "diff --git a/query-core/src/main/java/org/infinispan/query/core/stats/SearchStatistics.java b/query-core/src/main/java/org/infinispan/query/core/stats/SearchStatistics.java\nindex d11d76eb04..b30bab0567 100644\n--- a/query-core/src/main/java/org/infinispan/query/core/stats/SearchStatistics.java\n+++ b/query-core/src/main/java/org/infinispan/query/core/stats/SearchStatistics.java\n\n@@ -7,7 +7,13 @@\n  */\n public interface SearchStatistics {\n \n+   /**\n+    * @return {@link QueryStatistics}\n+    */\n    QueryStatistics getQueryStatistics();\n \n+   /**\n+    * @return {@link IndexStatistics}\n+    */\n    IndexStatistics getIndexStatistics();\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQzNzQzOQ==", "url": "https://github.com/infinispan/infinispan/pull/8809#discussion_r514437439", "bodyText": "javadocs ?", "author": "karesti", "createdAt": "2020-10-29T17:25:52Z", "path": "query-core/src/main/java/org/infinispan/query/core/stats/impl/SearchStatsRetriever.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package org.infinispan.query.core.stats.impl;\n+\n+import java.util.concurrent.CompletionStage;\n+\n+import org.infinispan.query.core.stats.SearchStatistics;\n+\n+/**\n+ * @since 12.0\n+ */\n+public interface SearchStatsRetriever {\n+\n+   SearchStatistics getSearchStatistics();", "originalCommit": "b36b8a7b4577e73551ea4147d1d0269cb5c533ee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d7f66c57dd6817b6a37fcf2e25e2404d4408a608", "chunk": "diff --git a/query-core/src/main/java/org/infinispan/query/core/stats/impl/SearchStatsRetriever.java b/query-core/src/main/java/org/infinispan/query/core/stats/impl/SearchStatsRetriever.java\nindex 54c6cc7761..c128940b68 100644\n--- a/query-core/src/main/java/org/infinispan/query/core/stats/impl/SearchStatsRetriever.java\n+++ b/query-core/src/main/java/org/infinispan/query/core/stats/impl/SearchStatsRetriever.java\n\n@@ -1,17 +1,60 @@\n package org.infinispan.query.core.stats.impl;\n \n+import java.util.Collection;\n+import java.util.HashMap;\n import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n \n+import org.infinispan.Cache;\n+import org.infinispan.commons.CacheException;\n+import org.infinispan.commons.util.Util;\n+import org.infinispan.factories.annotations.Inject;\n+import org.infinispan.factories.scopes.Scope;\n+import org.infinispan.factories.scopes.Scopes;\n+import org.infinispan.manager.ClusterExecutor;\n+import org.infinispan.query.core.stats.IndexStatistics;\n+import org.infinispan.query.core.stats.QueryStatistics;\n import org.infinispan.query.core.stats.SearchStatistics;\n \n /**\n+ * Retrieves {@link SearchStatistics} for a cache.\n+ *\n  * @since 12.0\n  */\n-public interface SearchStatsRetriever {\n+@Scope(Scopes.NAMED_CACHE)\n+public class SearchStatsRetriever {\n+   @Inject LocalQueryStatistics localQueryStatistics;\n+   @Inject IndexStatistics localIndexStatistics;\n+   @Inject Cache<?, ?> cache;\n \n-   SearchStatistics getSearchStatistics();\n+   public SearchStatistics getSearchStatistics() {\n+      return new SearchStatisticsImpl(localQueryStatistics, localIndexStatistics);\n+   }\n \n-   CompletionStage<SearchStatistics> getDistributedSearchStatistics();\n+   SearchStatistics getSnapshot() {\n+      return new SearchStatisticsImpl(localQueryStatistics.getSnapshot(), localIndexStatistics.getSnapshot());\n+   }\n \n-   boolean isReindexing();\n+   private QueryStatistics mergeQueryStats(Collection<QueryStatistics> clusterStats) {\n+      return clusterStats.stream().reduce(new LocalQueryStatistics(), QueryStatistics::merge);\n+   }\n+\n+   private IndexStatistics mergeIndexStats(Collection<IndexStatistics> indexStatistics) {\n+      return indexStatistics.stream().reduce(new IndexStatisticSnapshot(new HashMap<>()), IndexStatistics::merge);\n+   }\n+\n+   public CompletionStage<SearchStatistics> getDistributedSearchStatistics() {\n+      StatsTask statsTask = new StatsTask(cache.getName());\n+      ClusterExecutor clusterExecutor = SecurityActions.getClusterExecutor(cache);\n+      Collection<QueryStatistics> queryStats = new ConcurrentLinkedQueue<>();\n+      Collection<IndexStatistics> indexStats = new ConcurrentLinkedQueue<>();\n+      return clusterExecutor.submitConsumer(statsTask, (address, searchStats, throwable) -> {\n+         if (throwable != null) {\n+            Throwable rootCause = Util.getRootCause(throwable);\n+            throw new CacheException(\"Error obtaining statistics from node\", rootCause);\n+         }\n+         queryStats.add(searchStats.getQueryStatistics());\n+         indexStats.add(searchStats.getIndexStatistics());\n+      }).thenApply(v -> new SearchStatisticsImpl(mergeQueryStats(queryStats), mergeIndexStats(indexStats)));\n+   }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQzODI4Ng==", "url": "https://github.com/infinispan/infinispan/pull/8809#discussion_r514438286", "bodyText": "delete comment", "author": "karesti", "createdAt": "2020-10-29T17:27:10Z", "path": "query-core/src/test/java/org/infinispan/query/core/stats/impl/LocalQueryStatisticsTest.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package org.infinispan.query.core.stats.impl;\n+\n+import static org.infinispan.query.core.stats.impl.LocalQueryStatisticsTest.QueryType.HYBRID;\n+import static org.infinispan.query.core.stats.impl.LocalQueryStatisticsTest.QueryType.INDEX_DISTRIBUTED;\n+import static org.infinispan.query.core.stats.impl.LocalQueryStatisticsTest.QueryType.INDEX_LOCAL;\n+import static org.infinispan.query.core.stats.impl.LocalQueryStatisticsTest.QueryType.NON_INDEXED;\n+import static org.testng.AssertJUnit.assertEquals;\n+\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Random;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.LinkedBlockingDeque;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.stream.LongStream;\n+\n+import org.testng.annotations.Test;\n+\n+@Test(groups = \"unit\", testName = \"query.core.impl.LocalQueryStatisticsTest\")\n+public class LocalQueryStatisticsTest {\n+\n+   public static final int THREADS = 10;\n+   public static final int MAX_SAMPLE_LATENCY = 10_000;\n+   public static final int SAMPLE_SIZE = 1_000_000;\n+   private static final Random RANDOM = new Random(0);\n+\n+   enum QueryType {INDEX_LOCAL, INDEX_DISTRIBUTED, HYBRID, NON_INDEXED}\n+\n+   private final Map<Query, Long> timePerQuery = LongStream.rangeClosed(1, SAMPLE_SIZE).boxed()\n+         .collect(Collectors.toMap(Query::random, l -> (long) RANDOM.nextInt(MAX_SAMPLE_LATENCY)));\n+\n+   @Test\n+   public void testRecord() throws Exception {\n+      LocalQueryStatistics statistics = new LocalQueryStatistics();\n+      ExecutorService executorService = Executors.newFixedThreadPool(THREADS);\n+\n+      BlockingQueue<Entry<Query, Long>> data = new LinkedBlockingDeque<>(timePerQuery.entrySet());\n+\n+      CountDownLatch countDownLatch = new CountDownLatch(1);\n+      for (int i = 1; i <= THREADS; i++) {\n+         executorService.submit(() -> {\n+            try {\n+               countDownLatch.await();\n+               while (!data.isEmpty()) {\n+                  Entry<Query, Long> take = data.poll(1, TimeUnit.SECONDS);\n+                  if (take == null) continue;\n+                  Query q = take.getKey();\n+                  Long time = take.getValue();\n+                  switch (q.getType()) {\n+                     case INDEX_LOCAL:\n+                        statistics.localIndexedQueryExecuted(q.str, time);\n+                        break;\n+                     case HYBRID:\n+                        statistics.hybridQueryExecuted(q.str, time);\n+                        break;\n+                     case INDEX_DISTRIBUTED:\n+                        statistics.distributedIndexedQueryExecuted(q.str, time);\n+                        break;\n+                     case NON_INDEXED:\n+                        statistics.nonIndexedQueryExecuted(q.str, time);\n+                        break;\n+                  }\n+                  statistics.entityLoaded(time / 2);\n+               }\n+            } catch (InterruptedException ignored) {\n+            }\n+         });\n+      }\n+      countDownLatch.countDown();\n+      executorService.shutdown();\n+      executorService.awaitTermination(30, TimeUnit.SECONDS);\n+\n+      assertEquals(count(INDEX_LOCAL), statistics.getLocalIndexedQueryCount());\n+      assertEquals(avg(INDEX_LOCAL), statistics.getLocalIndexedQueryAvgTime());\n+      assertEquals(max(INDEX_LOCAL), statistics.getLocalIndexedQueryMaxTime());\n+      assertEquals(slowestQuery(INDEX_LOCAL), statistics.getSlowestLocalIndexedQuery());\n+\n+      assertEquals(count(INDEX_DISTRIBUTED), statistics.getDistributedIndexedQueryCount());\n+      assertEquals(avg(INDEX_DISTRIBUTED), statistics.getDistributedIndexedQueryAvgTime());\n+      assertEquals(max(INDEX_DISTRIBUTED), statistics.getLocalIndexedQueryMaxTime());\n+      assertEquals(slowestQuery(INDEX_DISTRIBUTED), statistics.getSlowestDistributedIndexedQuery());\n+\n+      assertEquals(count(HYBRID), statistics.getHybridQueryCount());\n+      assertEquals(avg(HYBRID), statistics.getHybridQueryAvgTime());\n+      assertEquals(max(HYBRID), statistics.getHybridQueryMaxTime());\n+      assertEquals(slowestQuery(HYBRID), statistics.getSlowestHybridQuery());\n+\n+      assertEquals(count(NON_INDEXED), statistics.getNonIndexedQueryCount());\n+      assertEquals(avg(NON_INDEXED), statistics.getNonIndexedQueryAvgTime());\n+      assertEquals(max(NON_INDEXED), statistics.getNonIndexedQueryMaxTime());\n+      assertEquals(slowestQuery(NON_INDEXED), statistics.getSlowestNonIndexedQuery());\n+\n+      assertEquals(SAMPLE_SIZE, statistics.getLoadCount());\n+//      assertEquals(loadAverage, statistics.getLoadAvgTime());", "originalCommit": "b36b8a7b4577e73551ea4147d1d0269cb5c533ee", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d7f66c57dd6817b6a37fcf2e25e2404d4408a608", "chunk": "diff --git a/query-core/src/test/java/org/infinispan/query/core/stats/impl/LocalQueryStatisticsTest.java b/query-core/src/test/java/org/infinispan/query/core/stats/impl/LocalQueryStatisticsTest.java\nindex 571922fa9b..6feac6d0f4 100644\n--- a/query-core/src/test/java/org/infinispan/query/core/stats/impl/LocalQueryStatisticsTest.java\n+++ b/query-core/src/test/java/org/infinispan/query/core/stats/impl/LocalQueryStatisticsTest.java\n\n@@ -95,8 +95,6 @@ public void testRecord() throws Exception {\n       assertEquals(slowestQuery(NON_INDEXED), statistics.getSlowestNonIndexedQuery());\n \n       assertEquals(SAMPLE_SIZE, statistics.getLoadCount());\n-//      assertEquals(loadAverage, statistics.getLoadAvgTime());\n-//      assertEquals(maxLoadTime, statistics.getLoadMaxTime());\n    }\n \n    private long count(QueryType queryType) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ0MTgzMQ==", "url": "https://github.com/infinispan/infinispan/pull/8809#discussion_r514441831", "bodyText": "why are we using these assertions stil? I think we can make use of assertThat assertions now\nbut i won't be stopping this pr to get merged for that", "author": "karesti", "createdAt": "2020-10-29T17:32:33Z", "path": "server/rest/src/test/java/org/infinispan/rest/search/BaseRestSearchTest.java", "diffHunk": "@@ -342,14 +342,21 @@ public void testQueryStats() throws Exception {\n    }\n \n    @Test\n-   public void testIndexStats() throws Exception {\n+   public void testIndexStats() {\n       RestResponse response = join(cacheClient.indexStats());\n \n       if (!getConfigBuilder().indexing().enabled()) {\n          ResponseAssertion.assertThat(response).isBadRequest();\n       } else {\n          ResponseAssertion.assertThat(response).isOk();\n-         // TODO HSEARCH-3129 Restore support for statistics\n+         Json stats = Json.read(response.getBody());\n+         Json indexClassNames = stats.at(\"indexed_class_names\");\n+\n+         String indexName = \"org.infinispan.rest.search.entity.Person\";\n+         assertEquals(indexClassNames.at(0).asString(), indexName);\n+         assertNotNull(stats.at(\"indexed_entities_count\"));\n+         //TODO: Index sizes are not currently exposed (HSEARCH-4056)\n+         assertTrue(stats.at(\"index_sizes\").at(indexName).asInteger() >= 0);", "originalCommit": "b36b8a7b4577e73551ea4147d1d0269cb5c533ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDkyMDc2MA==", "url": "https://github.com/infinispan/infinispan/pull/8809#discussion_r514920760", "bodyText": "this was a code snipped that was deleted when Hibernate Search was migrated, I just put it back. Since this is all deprecated stuff, I won't bother changing it.", "author": "gustavonalle", "createdAt": "2020-10-30T07:49:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ0MTgzMQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "d7f66c57dd6817b6a37fcf2e25e2404d4408a608", "url": "https://github.com/infinispan/infinispan/commit/d7f66c57dd6817b6a37fcf2e25e2404d4408a608", "message": "ISPN-12401 Support for query and indexing statistics", "committedDate": "2020-10-30T14:59:09Z", "type": "forcePushed"}, {"oid": "f1c4365ab04b74036d6b0d426ae2878619872fb6", "url": "https://github.com/infinispan/infinispan/commit/f1c4365ab04b74036d6b0d426ae2878619872fb6", "message": "ISPN-12401 Support for query and indexing statistics", "committedDate": "2020-11-02T08:45:29Z", "type": "commit"}, {"oid": "f1c4365ab04b74036d6b0d426ae2878619872fb6", "url": "https://github.com/infinispan/infinispan/commit/f1c4365ab04b74036d6b0d426ae2878619872fb6", "message": "ISPN-12401 Support for query and indexing statistics", "committedDate": "2020-11-02T08:45:29Z", "type": "forcePushed"}]}