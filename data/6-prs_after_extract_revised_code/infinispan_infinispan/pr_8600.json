{"pr_number": 8600, "pr_title": "ISPN-12178 Query broadcast blocks on the non-blocking executor", "pr_createdAt": "2020-07-30T09:43:41Z", "pr_url": "https://github.com/infinispan/infinispan/pull/8600", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyMTEyOQ==", "url": "https://github.com/infinispan/infinispan/pull/8600#discussion_r463621129", "bodyText": "I worry that the blocking is now just relegated to this call instead. We really need https://issues.redhat.com/browse/ISPN-11731 to verify these are all fixed.", "author": "wburns", "createdAt": "2020-07-31T13:47:41Z", "path": "query/src/main/java/org/infinispan/query/clustered/ClusteredQueryInvoker.java", "diffHunk": "@@ -101,9 +72,8 @@ QueryResponse unicast(Address address, SegmentsClusteredQueryCommand cmd) {\n \n       List<QueryResponse> results = new ArrayList<>();\n       try {\n-         results.add(localResponse.get());\n-         List<QueryResponse> responseList = sequence(futureRemoteResponses).get();\n-         results.addAll(responseList);\n+         results.add(await(localResponse.toCompletableFuture()));", "originalCommit": "0e1a203776f0f28753e7f6c2d629d5dca4775947", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyNzI5Mw==", "url": "https://github.com/infinispan/infinispan/pull/8600#discussion_r463627293", "bodyText": "agreed, but this method is called by the REST server when doing queries, shouldn't Blockhound bark?", "author": "gustavonalle", "createdAt": "2020-07-31T13:57:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyMTEyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYzMzY0NQ==", "url": "https://github.com/infinispan/infinispan/pull/8600#discussion_r463633645", "bodyText": "My guess is that the invoker is already on the blocking thread. But I am not certain what code path this is.", "author": "wburns", "createdAt": "2020-07-31T14:09:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyMTEyOQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyMjg4MA==", "url": "https://github.com/infinispan/infinispan/pull/8600#discussion_r463622880", "bodyText": "I would recommend putting something a bit more descriptive for the second argument, maybe CQCreateEagerQuery#collectKeys ?", "author": "wburns", "createdAt": "2020-07-31T13:50:29Z", "path": "query/src/main/java/org/infinispan/query/clustered/commandworkers/CQCreateEagerQuery.java", "diffHunk": "@@ -18,38 +18,35 @@\n final class CQCreateEagerQuery extends CQWorker {\n \n    @Override\n-   QueryResponse perform(BitSet segments) {\n+   CompletionStage<QueryResponse> perform(BitSet segments) {\n       SearchQueryBuilder query = queryDefinition.getSearchQuery();\n       setFilter(segments);\n \n-      NodeTopDocs nodeTopDocs = (query.hasEntityProjection()) ? collectKeys(query) : collectProjections(query);\n-      if (nodeTopDocs == null) {\n-         return new QueryResponse(0);\n-      }\n-      return new QueryResponse(nodeTopDocs);\n+      CompletionStage<NodeTopDocs> nodeTopDocs = (query.hasEntityProjection()) ? collectKeys(query) : collectProjections(query);\n+\n+      return nodeTopDocs.thenApply(QueryResponse::new);\n    }\n \n-   private NodeTopDocs collectKeys(SearchQueryBuilder query) {\n-      LuceneSearchResult<DocumentReference> queryResult = query.documentReference().fetchAll();\n-      if (queryResult.totalHitCount() == 0L) {\n-         return null;\n-      }\n-\n-      Object[] keys = queryResult.hits().stream()\n-            .map(hit -> hit.id())\n-            .map(id -> stringToKey(id))\n-            .toArray(Object[]::new);\n-      return new NodeTopDocs(cache.getRpcManager().getAddress(), queryResult.topDocs(), keys, null);\n+   private CompletionStage<NodeTopDocs> collectKeys(SearchQueryBuilder query) {\n+      return blockingManager.supplyBlocking(() -> query.documentReference().fetchAll(), this)", "originalCommit": "0e1a203776f0f28753e7f6c2d629d5dca4775947", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "da5870d1695ad18810a10b8edfaf62af5be8a1e3", "chunk": "diff --git a/query/src/main/java/org/infinispan/query/clustered/commandworkers/CQCreateEagerQuery.java b/query/src/main/java/org/infinispan/query/clustered/commandworkers/CQCreateEagerQuery.java\nindex e5a65ffeb6..cc4b6586c5 100644\n--- a/query/src/main/java/org/infinispan/query/clustered/commandworkers/CQCreateEagerQuery.java\n+++ b/query/src/main/java/org/infinispan/query/clustered/commandworkers/CQCreateEagerQuery.java\n\n@@ -28,7 +28,7 @@\n    }\n \n    private CompletionStage<NodeTopDocs> collectKeys(SearchQueryBuilder query) {\n-      return blockingManager.supplyBlocking(() -> query.documentReference().fetchAll(), this)\n+      return blockingManager.supplyBlocking(() -> query.documentReference().fetchAll(), \"CQCreateEagerQuery#collectKeys\")\n             .thenApply(queryResult -> {\n                if (queryResult.totalHitCount() == 0L) return null;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzYyMzEwNA==", "url": "https://github.com/infinispan/infinispan/pull/8600#discussion_r463623104", "bodyText": "Same here about second argument.", "author": "wburns", "createdAt": "2020-07-31T13:50:48Z", "path": "query/src/main/java/org/infinispan/query/clustered/commandworkers/CQCreateEagerQuery.java", "diffHunk": "@@ -18,38 +18,35 @@\n final class CQCreateEagerQuery extends CQWorker {\n \n    @Override\n-   QueryResponse perform(BitSet segments) {\n+   CompletionStage<QueryResponse> perform(BitSet segments) {\n       SearchQueryBuilder query = queryDefinition.getSearchQuery();\n       setFilter(segments);\n \n-      NodeTopDocs nodeTopDocs = (query.hasEntityProjection()) ? collectKeys(query) : collectProjections(query);\n-      if (nodeTopDocs == null) {\n-         return new QueryResponse(0);\n-      }\n-      return new QueryResponse(nodeTopDocs);\n+      CompletionStage<NodeTopDocs> nodeTopDocs = (query.hasEntityProjection()) ? collectKeys(query) : collectProjections(query);\n+\n+      return nodeTopDocs.thenApply(QueryResponse::new);\n    }\n \n-   private NodeTopDocs collectKeys(SearchQueryBuilder query) {\n-      LuceneSearchResult<DocumentReference> queryResult = query.documentReference().fetchAll();\n-      if (queryResult.totalHitCount() == 0L) {\n-         return null;\n-      }\n-\n-      Object[] keys = queryResult.hits().stream()\n-            .map(hit -> hit.id())\n-            .map(id -> stringToKey(id))\n-            .toArray(Object[]::new);\n-      return new NodeTopDocs(cache.getRpcManager().getAddress(), queryResult.topDocs(), keys, null);\n+   private CompletionStage<NodeTopDocs> collectKeys(SearchQueryBuilder query) {\n+      return blockingManager.supplyBlocking(() -> query.documentReference().fetchAll(), this)\n+            .thenApply(queryResult -> {\n+               if (queryResult.totalHitCount() == 0L) return null;\n+\n+               Object[] keys = queryResult.hits().stream()\n+                     .map(DocumentReference::id)\n+                     .map(this::stringToKey)\n+                     .toArray(Object[]::new);\n+               return new NodeTopDocs(cache.getRpcManager().getAddress(), queryResult.topDocs(), keys, null);\n+            });\n    }\n \n-   private NodeTopDocs collectProjections(SearchQueryBuilder query) {\n-      LuceneSearchResult<?> queryResult = query.build().fetchAll();\n-      if (queryResult.totalHitCount() == 0L) {\n-         return null;\n-      }\n+   private CompletionStage<NodeTopDocs> collectProjections(SearchQueryBuilder query) {\n+      return blockingManager.supplyBlocking(() -> query.build().fetchAll(), this).thenApply(queryResult -> {", "originalCommit": "0e1a203776f0f28753e7f6c2d629d5dca4775947", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "da5870d1695ad18810a10b8edfaf62af5be8a1e3", "chunk": "diff --git a/query/src/main/java/org/infinispan/query/clustered/commandworkers/CQCreateEagerQuery.java b/query/src/main/java/org/infinispan/query/clustered/commandworkers/CQCreateEagerQuery.java\nindex e5a65ffeb6..cc4b6586c5 100644\n--- a/query/src/main/java/org/infinispan/query/clustered/commandworkers/CQCreateEagerQuery.java\n+++ b/query/src/main/java/org/infinispan/query/clustered/commandworkers/CQCreateEagerQuery.java\n\n@@ -28,7 +28,7 @@\n    }\n \n    private CompletionStage<NodeTopDocs> collectKeys(SearchQueryBuilder query) {\n-      return blockingManager.supplyBlocking(() -> query.documentReference().fetchAll(), this)\n+      return blockingManager.supplyBlocking(() -> query.documentReference().fetchAll(), \"CQCreateEagerQuery#collectKeys\")\n             .thenApply(queryResult -> {\n                if (queryResult.totalHitCount() == 0L) return null;\n \n"}}, {"oid": "da5870d1695ad18810a10b8edfaf62af5be8a1e3", "url": "https://github.com/infinispan/infinispan/commit/da5870d1695ad18810a10b8edfaf62af5be8a1e3", "message": "ISPN-12178 Query broadcast blocks on the non-blocking executor", "committedDate": "2020-07-31T14:51:07Z", "type": "commit"}, {"oid": "da5870d1695ad18810a10b8edfaf62af5be8a1e3", "url": "https://github.com/infinispan/infinispan/commit/da5870d1695ad18810a10b8edfaf62af5be8a1e3", "message": "ISPN-12178 Query broadcast blocks on the non-blocking executor", "committedDate": "2020-07-31T14:51:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzY5Mjk1Mw==", "url": "https://github.com/infinispan/infinispan/pull/8600#discussion_r463692953", "bodyText": "Also noticed that it seems the asyncExecutor can be removed from this code and subsequent callers.", "author": "wburns", "createdAt": "2020-07-31T15:54:50Z", "path": "query/src/main/java/org/infinispan/query/clustered/ClusteredQueryInvoker.java", "diffHunk": "@@ -116,26 +86,8 @@ QueryResponse unicast(Address address, SegmentsClusteredQueryCommand cmd) {\n       return results;\n    }\n \n-   private Future<QueryResponse> localInvoke(SegmentsClusteredQueryCommand cmd) {\n-      return asyncExecutor.submit(() -> {", "originalCommit": "da5870d1695ad18810a10b8edfaf62af5be8a1e3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "e4a48f2210419ca51ce6f82059a9ec97e9f64153", "url": "https://github.com/infinispan/infinispan/commit/e4a48f2210419ca51ce6f82059a9ec97e9f64153", "message": "ISPN-12178 Remove unused fields and parameters", "committedDate": "2020-07-31T16:15:23Z", "type": "commit"}]}