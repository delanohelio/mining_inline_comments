{"pr_number": 7860, "pr_title": "ISPN-11292 Add in (non)blocking thread pools", "pr_createdAt": "2020-02-07T16:49:23Z", "pr_url": "https://github.com/infinispan/infinispan/pull/7860", "timeline": [{"oid": "16172b6018a70076bf5d5a7edc4b92b3295de80a", "url": "https://github.com/infinispan/infinispan/commit/16172b6018a70076bf5d5a7edc4b92b3295de80a", "message": "ISPN-11292 Add in (non)blocking thread pools", "committedDate": "2020-02-07T16:52:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA2ODQ1Mw==", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r377068453", "bodyText": "I think the execution needs to stay on a non-blocking thread here, and only needs a new thread so that the thread that unlocked the keys can continue executing (possibly unlocking other keys, or sending back a response).\nSame thing in PerKeyLockContainer and StripedLockContainer.", "author": "danberindei", "createdAt": "2020-02-10T13:42:20Z", "path": "core/src/main/java/org/infinispan/util/concurrent/locks/impl/DefaultLockManager.java", "diffHunk": "@@ -120,7 +120,7 @@ public KeyAwareLockPromise lockAll(Collection<?> keys, Object lockOwner, long ti\n                unit);\n       }\n \n-      final CompositeLockPromise compositeLockPromise = new CompositeLockPromise(uniqueKeys.size(), executor);\n+      final CompositeLockPromise compositeLockPromise = new CompositeLockPromise(uniqueKeys.size(), blockingExecutor);", "originalCommit": "16172b6018a70076bf5d5a7edc4b92b3295de80a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQzNTQ4NQ==", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r379435485", "bodyText": "I created https://issues.redhat.com/browse/ISPN-11295 to handle this a week ago. It will be on the plan moving forward, I just didn't want to get into that in this PR. If you want I can revert the use of blockingExecutor for now though.", "author": "wburns", "createdAt": "2020-02-14T13:42:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA2ODQ1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQzNTkxMg==", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r379435912", "bodyText": "Unless you are thinking of something else? Need to somehow get CompletionStages#continueOnExecutor in there.", "author": "wburns", "createdAt": "2020-02-14T13:43:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA2ODQ1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUwNDEzNQ==", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r379504135", "bodyText": "The problem is that the InfinispanLock#lock method can invoke await. I have reverted back to non blocking thread and the JIRA I logged can move that await block into continuteExecutor it looks like.", "author": "wburns", "createdAt": "2020-02-14T15:49:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA2ODQ1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIzMTIwNA==", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r381231204", "bodyText": "@wburns Ok. I was pretty certain that LockPlaceholder#lock would never be called while the lock is still in the WAITING state, but that code is pretty complex so can't be 100% sure until we remove that code path completely.", "author": "danberindei", "createdAt": "2020-02-19T11:21:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA2ODQ1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "80d7159f2c86b876841c8988742540aebd70b701", "chunk": "diff --git a/core/src/main/java/org/infinispan/util/concurrent/locks/impl/DefaultLockManager.java b/core/src/main/java/org/infinispan/util/concurrent/locks/impl/DefaultLockManager.java\nindex 13b5c52aa7..018ac15042 100644\n--- a/core/src/main/java/org/infinispan/util/concurrent/locks/impl/DefaultLockManager.java\n+++ b/core/src/main/java/org/infinispan/util/concurrent/locks/impl/DefaultLockManager.java\n\n@@ -120,7 +120,7 @@ public KeyAwareLockPromise lockAll(Collection<?> keys, Object lockOwner, long ti\n                unit);\n       }\n \n-      final CompositeLockPromise compositeLockPromise = new CompositeLockPromise(uniqueKeys.size(), blockingExecutor);\n+      final CompositeLockPromise compositeLockPromise = new CompositeLockPromise(uniqueKeys.size(), nonBlockingExecutor);\n       //needed to avoid internal deadlock when 2 or more lock owner invokes this method with the same keys.\n       //ordering will not solve the problem since acquire() is non-blocking and each lock owner can iterate faster/slower than the other.\n       synchronized (this) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3Mjg0Mg==", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r377072842", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               @Message(value = \"Thread Pool Factory %s is blocking, but the pool %s requires non blocking threads\", id = 566)\n          \n          \n            \n               @Message(value = \"Thread Pool Factory %s is blocking, but pool %s requires non blocking threads\", id = 566)", "author": "danberindei", "createdAt": "2020-02-10T13:50:06Z", "path": "core/src/main/java/org/infinispan/util/logging/Log.java", "diffHunk": "@@ -1921,8 +1921,8 @@ CacheConfigurationException offHeapMemoryEvictionSizeNotLargeEnoughForAddresses(\n    @Message(value = \"Index.LOCAL is no longer supported since version 10.0. Deprecated usages are automatically converted to Index.PRIMARY_OWNER. Please update your configuration!\", id = 565)\n    void indexLocalIsNotSupported();\n \n-   @Message(value = \"Thread Pool Factory %s is blocking, but this pool requires non blocking threads\", id = 566)\n-   CacheConfigurationException threadPoolFactoryIsBlocking(String name);\n+   @Message(value = \"Thread Pool Factory %s is blocking, but the pool %s requires non blocking threads\", id = 566)", "originalCommit": "16172b6018a70076bf5d5a7edc4b92b3295de80a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQzNjAxMQ==", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r379436011", "bodyText": "Sure", "author": "wburns", "createdAt": "2020-02-14T13:43:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3Mjg0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "80d7159f2c86b876841c8988742540aebd70b701", "chunk": "diff --git a/core/src/main/java/org/infinispan/util/logging/Log.java b/core/src/main/java/org/infinispan/util/logging/Log.java\nindex 76b9f83517..e68ad12cbf 100644\n--- a/core/src/main/java/org/infinispan/util/logging/Log.java\n+++ b/core/src/main/java/org/infinispan/util/logging/Log.java\n\n@@ -1921,7 +1921,7 @@ CacheConfigurationException offHeapMemoryEvictionSizeNotLargeEnoughForAddresses(\n    @Message(value = \"Index.LOCAL is no longer supported since version 10.0. Deprecated usages are automatically converted to Index.PRIMARY_OWNER. Please update your configuration!\", id = 565)\n    void indexLocalIsNotSupported();\n \n-   @Message(value = \"Thread Pool Factory %s is blocking, but the pool %s requires non blocking threads\", id = 566)\n+   @Message(value = \"Thread Pool Factory %s is blocking, but pool %s requires non blocking threads\", id = 566)\n    CacheConfigurationException threadPoolFactoryIsBlocking(String name, String poolName);\n \n //   @LogMessage(level = WARN)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQxMTMxNA==", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r379411314", "bodyText": "No assert for the new executors?", "author": "danberindei", "createdAt": "2020-02-14T12:43:35Z", "path": "core/src/test/java/org/infinispan/configuration/JsonSerializationTest.java", "diffHunk": "@@ -299,9 +299,9 @@ public void testFullConfig() throws Exception {\n       assertEquals(\"REGISTER\", cacheContainer.get(\"shutdown-hook\").asText());\n       assertTrue(cacheContainer.get(\"statistics\").asBoolean());\n       assertEquals(\"listener\", cacheContainer.get(\"listener-executor\").asText());\n-      assertEquals(\"persistence\", cacheContainer.get(\"persistence-executor\").asText());\n+      assertNull(cacheContainer.get(\"persistence-executor\"));\n       assertNull(cacheContainer.get(\"state-transfer-executor\"));\n-      assertEquals(\"async\", cacheContainer.get(\"async-executor\").asText());\n+      assertNull(cacheContainer.get(\"async-executor\"));", "originalCommit": "7ef5c12f64fb29329c799c7b0131b4c1512f581f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ0MDM1MQ==", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r379440351", "bodyText": "I can add something.", "author": "wburns", "createdAt": "2020-02-14T13:53:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQxMTMxNA=="}], "type": "inlineReview", "revised_code": {"commit": "80d7159f2c86b876841c8988742540aebd70b701", "chunk": "diff --git a/core/src/test/java/org/infinispan/configuration/JsonSerializationTest.java b/core/src/test/java/org/infinispan/configuration/JsonSerializationTest.java\nindex c89099afb6..f3bd974258 100644\n--- a/core/src/test/java/org/infinispan/configuration/JsonSerializationTest.java\n+++ b/core/src/test/java/org/infinispan/configuration/JsonSerializationTest.java\n\n@@ -299,9 +299,9 @@ public void testFullConfig() throws Exception {\n       assertEquals(\"REGISTER\", cacheContainer.get(\"shutdown-hook\").asText());\n       assertTrue(cacheContainer.get(\"statistics\").asBoolean());\n       assertEquals(\"listener\", cacheContainer.get(\"listener-executor\").asText());\n-      assertNull(cacheContainer.get(\"persistence-executor\"));\n-      assertNull(cacheContainer.get(\"state-transfer-executor\"));\n       assertNull(cacheContainer.get(\"async-executor\"));\n+      assertEquals(\"async\", cacheContainer.get(\"non-blocking-executor\").asText());\n+      assertEquals(\"persistence\", cacheContainer.get(\"blocking-executor\").asText());\n \n       JsonNode authorization = globalSecurity.get(\"authorization\");\n       assertEquals(\"org.infinispan.security.audit.NullAuditLogger\", authorization.get(\"audit-logger\").asText());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQxMjI4Ng==", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r379412286", "bodyText": "Should check the new executors instead", "author": "danberindei", "createdAt": "2020-02-14T12:45:57Z", "path": "core/src/test/java/org/infinispan/configuration/XmlFileParsingTest.java", "diffHunk": "@@ -364,20 +364,11 @@ private void assertNamedCacheFile(ConfigurationBuilderHolder holder, boolean dep\n \n       BlockingThreadPoolExecutorFactory persistenceThreadPool =\n          gc.persistenceThreadPool().threadPoolFactory();\n-      assertEquals(6, persistenceThreadPool.maxThreads());\n-      assertEquals(10001, persistenceThreadPool.queueLength());\n-      DefaultThreadFactory persistenceThreadFactory =\n-         gc.persistenceThreadPool().threadFactory();\n-      assertEquals(\"PersistenceThread\", persistenceThreadFactory.threadNamePattern());\n+      assertNull(persistenceThreadPool);\n \n       BlockingThreadPoolExecutorFactory asyncThreadPool =\n          gc.asyncThreadPool().threadPoolFactory();\n-      assertEquals(5, asyncThreadPool.coreThreads());\n-      assertEquals(5, asyncThreadPool.maxThreads());\n-      assertEquals(10000, asyncThreadPool.queueLength());\n-      assertEquals(0, asyncThreadPool.keepAlive());\n-      DefaultThreadFactory asyncThreadFactory = gc.asyncThreadPool().threadFactory();\n-      assertEquals(\"AsyncOperationsThread\", asyncThreadFactory.threadNamePattern());\n+      assertNull(asyncThreadPool);", "originalCommit": "a6f8304d969cad04d4381cae839a4a9c70522b3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ0MDM5Ng==", "url": "https://github.com/infinispan/infinispan/pull/7860#discussion_r379440396", "bodyText": "I can add something.", "author": "wburns", "createdAt": "2020-02-14T13:53:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQxMjI4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "80d7159f2c86b876841c8988742540aebd70b701", "chunk": "diff --git a/core/src/test/java/org/infinispan/configuration/XmlFileParsingTest.java b/core/src/test/java/org/infinispan/configuration/XmlFileParsingTest.java\nindex a605d84432..c767fdbf81 100644\n--- a/core/src/test/java/org/infinispan/configuration/XmlFileParsingTest.java\n+++ b/core/src/test/java/org/infinispan/configuration/XmlFileParsingTest.java\n\n@@ -366,10 +366,27 @@ private void assertNamedCacheFile(ConfigurationBuilderHolder holder, boolean dep\n          gc.persistenceThreadPool().threadPoolFactory();\n       assertNull(persistenceThreadPool);\n \n+      BlockingThreadPoolExecutorFactory blockingThreadPool =\n+            gc.blockingThreadPool().threadPoolFactory();\n+      assertEquals(6, blockingThreadPool.maxThreads());\n+      assertEquals(10001, blockingThreadPool.queueLength());\n+      DefaultThreadFactory persistenceThreadFactory =\n+            gc.blockingThreadPool().threadFactory();\n+      assertEquals(\"BlockingThread\", persistenceThreadFactory.threadNamePattern());\n+\n       BlockingThreadPoolExecutorFactory asyncThreadPool =\n          gc.asyncThreadPool().threadPoolFactory();\n       assertNull(asyncThreadPool);\n \n+      BlockingThreadPoolExecutorFactory nonBlockingThreadPool =\n+            gc.nonBlockingThreadPool().threadPoolFactory();\n+      assertEquals(5, nonBlockingThreadPool.coreThreads());\n+      assertEquals(5, nonBlockingThreadPool.maxThreads());\n+      assertEquals(10000, nonBlockingThreadPool.queueLength());\n+      assertEquals(0, nonBlockingThreadPool.keepAlive());\n+      DefaultThreadFactory asyncThreadFactory = gc.nonBlockingThreadPool().threadFactory();\n+      assertEquals(\"NonBlockingThread\", asyncThreadFactory.threadNamePattern());\n+\n       BlockingThreadPoolExecutorFactory transportThreadPool =\n          gc.transport().transportThreadPool().threadPoolFactory();\n       assertEquals(25, transportThreadPool.maxThreads());\n"}}, {"oid": "80d7159f2c86b876841c8988742540aebd70b701", "url": "https://github.com/infinispan/infinispan/commit/80d7159f2c86b876841c8988742540aebd70b701", "message": "Review comments", "committedDate": "2020-02-14T18:38:10Z", "type": "forcePushed"}, {"oid": "f703736f41b67a3f4c3dbb89356234de17b7125d", "url": "https://github.com/infinispan/infinispan/commit/f703736f41b67a3f4c3dbb89356234de17b7125d", "message": "Review comments", "committedDate": "2020-02-18T17:53:42Z", "type": "forcePushed"}, {"oid": "a34526a96e42d23a962673854a3376b88bfb1030", "url": "https://github.com/infinispan/infinispan/commit/a34526a96e42d23a962673854a3376b88bfb1030", "message": "ISPN-11292 Add in (non)blocking thread pools", "committedDate": "2020-02-19T13:19:16Z", "type": "forcePushed"}, {"oid": "3635464e11d189b85e8757284edc1d973639b0b3", "url": "https://github.com/infinispan/infinispan/commit/3635464e11d189b85e8757284edc1d973639b0b3", "message": "ISPN-11292 Add in (non)blocking thread pools", "committedDate": "2020-02-19T13:27:42Z", "type": "commit"}, {"oid": "3635464e11d189b85e8757284edc1d973639b0b3", "url": "https://github.com/infinispan/infinispan/commit/3635464e11d189b85e8757284edc1d973639b0b3", "message": "ISPN-11292 Add in (non)blocking thread pools", "committedDate": "2020-02-19T13:27:42Z", "type": "forcePushed"}]}