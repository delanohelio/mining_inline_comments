{"pr_number": 7952, "pr_title": "ISPN-11271 Convert async transport executor to the non blocking thread pool", "pr_createdAt": "2020-02-25T18:19:10Z", "pr_url": "https://github.com/infinispan/infinispan/pull/7952", "timeline": [{"oid": "918a4b036dd2b11972d3f0e1e971640755ccda32", "url": "https://github.com/infinispan/infinispan/commit/918a4b036dd2b11972d3f0e1e971640755ccda32", "message": "ISPN-11264 XSiteStateTransferProviderImpl is blocking when sending state", "committedDate": "2020-02-26T16:21:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY1NTIyNw==", "url": "https://github.com/infinispan/infinispan/pull/7952#discussion_r384655227", "bodyText": "Should mention BlockHound directly IMO", "author": "danberindei", "createdAt": "2020-02-26T17:41:44Z", "path": "core/src/main/java/org/infinispan/executors/LimitedExecutor.java", "diffHunk": "@@ -182,6 +183,14 @@ private void runTasks() {\n       runnerFinished();\n    }\n \n+   /**\n+    * This method is here solely for byte code augmentation", "originalCommit": "918a4b036dd2b11972d3f0e1e971640755ccda32", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExNjk1OQ==", "url": "https://github.com/infinispan/infinispan/pull/7952#discussion_r385116959", "bodyText": "Sure.", "author": "wburns", "createdAt": "2020-02-27T13:13:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY1NTIyNw=="}], "type": "inlineReview", "revised_code": {"commit": "c26eacb5f1400ac7feee7373e9e62060aaa86e81", "chunk": "diff --git a/core/src/main/java/org/infinispan/executors/LimitedExecutor.java b/core/src/main/java/org/infinispan/executors/LimitedExecutor.java\nindex a0b5f82c52..a8e3cf8aff 100644\n--- a/core/src/main/java/org/infinispan/executors/LimitedExecutor.java\n+++ b/core/src/main/java/org/infinispan/executors/LimitedExecutor.java\n\n@@ -184,7 +184,8 @@ private void runTasks() {\n    }\n \n    /**\n-    * This method is here solely for byte code augmentation\n+    * This method is here solely for byte code augmentation via BlockHound, since the runnable should not\n+    * block in a non blocking thread, but other parts of LimitedExecutor are okay doing so.\n     * @param runnable the runnable to run\n     */\n    private void actualRun(Runnable runnable) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY1NTUxMQ==", "url": "https://github.com/infinispan/infinispan/pull/7952#discussion_r384655511", "bodyText": "We should keep this one, but remove its defaults", "author": "danberindei", "createdAt": "2020-02-26T17:42:13Z", "path": "core/src/main/java/org/infinispan/factories/KnownComponentNames.java", "diffHunk": "@@ -16,28 +16,18 @@\n public class KnownComponentNames {\n    public static final String CACHE_NAME = \"cacheName\";\n \n-   public static final String ASYNC_TRANSPORT_EXECUTOR = \"org.infinispan.executors.transport\";\n    public static final String REMOTE_COMMAND_EXECUTOR = \"org.infinispan.executors.remote\";\n    public static final String ASYNC_NOTIFICATION_EXECUTOR = \"org.infinispan.executors.notification\";\n    public static final String EXPIRATION_SCHEDULED_EXECUTOR = \"org.infinispan.executors.expiration\";\n    public static final String NON_BLOCKING_EXECUTOR = \"org.infinispan.executors.non-blocking\";\n    public static final String BLOCKING_EXECUTOR = \"org.infinispan.executors.blocking\";\n-   /**\n-    * @deprecated Since 9.0, no longer used.\n-    */\n-   @Deprecated\n-   public static final String ASYNC_REPLICATION_QUEUE_EXECUTOR = \"org.infinispan.executors.replicationQueue\";\n+   public static final String TIMEOUT_SCHEDULE_EXECUTOR = \"org.infinispan.executors.timeout\";\n+\n+\n    public static final String MODULE_COMMAND_FACTORIES =\"org.infinispan.modules.command.factories\";\n    public static final String CLASS_LOADER = \"java.lang.ClassLoader\";\n-   /**\n-    * @deprecated Since 10.1, no longer used\n-    */\n-   @Deprecated\n-   public static final String STATE_TRANSFER_EXECUTOR = \"org.infinispan.executors.stateTransferExecutor\";", "originalCommit": "918a4b036dd2b11972d3f0e1e971640755ccda32", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExNjg5Mw==", "url": "https://github.com/infinispan/infinispan/pull/7952#discussion_r385116893", "bodyText": "Why keep? This class is not public.", "author": "wburns", "createdAt": "2020-02-27T13:13:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY1NTUxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExNzU4Mw==", "url": "https://github.com/infinispan/infinispan/pull/7952#discussion_r385117583", "bodyText": "I should have checked, I just assumed I had made it deprecated in 10.1 because it was public :)", "author": "danberindei", "createdAt": "2020-02-27T13:14:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY1NTUxMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1OTU2MQ==", "url": "https://github.com/infinispan/infinispan/pull/7952#discussion_r384959561", "bodyText": "Can you check this again? I commented it out locally and I didn't get any failures.", "author": "danberindei", "createdAt": "2020-02-27T07:50:14Z", "path": "core/src/main/java/org/infinispan/util/CoreBlockHoundIntegration.java", "diffHunk": "@@ -74,9 +85,6 @@ private static void registerBlockingMethods(BlockHound.Builder builder) {\n    }\n \n    private static void questionableMethodsAllowedToBlock(BlockHound.Builder builder) {\n-      // Component registry has a lock to protect its state - is short lived lock\n-      builder.allowBlockingCallsInside(BasicComponentRegistryImpl.class.getName(), \"prepareWrapperChange\");\n-\n       // This one should probably not be allowed - it is waiting for another component to start\n       // TODO: This might actually be a bug in the rewiring logic. (shows in StateTransferOverwritingValueTest)\n       builder.allowBlockingCallsInside(BasicComponentRegistryImpl.class.getName(), \"awaitWrapperState\");", "originalCommit": "918a4b036dd2b11972d3f0e1e971640755ccda32", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExNjgxOA==", "url": "https://github.com/infinispan/infinispan/pull/7952#discussion_r385116818", "bodyText": "Possibly, this is one from over a month ago.", "author": "wburns", "createdAt": "2020-02-27T13:13:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1OTU2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExNzk4NA==", "url": "https://github.com/infinispan/infinispan/pull/7952#discussion_r385117984", "bodyText": "Yeah, I tested when I was reviewing your first BlockHound PR but I forgot to mention it.", "author": "danberindei", "createdAt": "2020-02-27T13:15:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1OTU2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU0ODQ1Mw==", "url": "https://github.com/infinispan/infinispan/pull/7952#discussion_r385548453", "bodyText": "https://ci.infinispan.org/job/Infinispan/job/PR-7952/3/testReport/junit/org.infinispan.distribution.rehash/StateTransferOverwriteTest%5BDIST_SYNC,%20tx=false%5D/Blocking/\n\nNow that I see the stack trace, it's \"normal\". ClusterTopologyManagerImpl uses new ActionSequencer(nonBlockingExecutor, true), which forces the view handling to be executed on the non-blocking executor even when it doesn't have to block. During startup, normally the components start in a single thread, so there is no call to awaitWrapperState. But since CTMI handles the initial view in a separate thread, the main thread and the view handling thread could be trying to start LocalTopologyManagerImpl at the same time, and one of them will have to wait.\nThere are 3 options:\n\nKeep the exception for awaitWrapperState, but remove the TODO and say instead it's ok because it only happens during startup\nCreate the ActionSequencer with forceExecutor = false, and explicitly submit to the non-blocking thread pool in ClusterViewListener#handleViewChange.\nWe need to switch threads there because JGroups' GMS will only mcast the view to other members after our listener returns.\nCreate the ActionSequencer on the blocking executor, \"just in case\".\nSince I've removed almost all blocking, and some tasks like computing CHs use lots of CPU, I'd rather not do this.", "author": "danberindei", "createdAt": "2020-02-28T07:44:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1OTU2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcxNzE1NQ==", "url": "https://github.com/infinispan/infinispan/pull/7952#discussion_r385717155", "bodyText": "I created https://issues.redhat.com/browse/ISPN-11396 to look into this further. For now I will just comment on it and mention the JIRA.", "author": "wburns", "createdAt": "2020-02-28T14:14:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk1OTU2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "c26eacb5f1400ac7feee7373e9e62060aaa86e81", "chunk": "diff --git a/core/src/main/java/org/infinispan/util/CoreBlockHoundIntegration.java b/core/src/main/java/org/infinispan/util/CoreBlockHoundIntegration.java\nindex b9c800a269..89906d6e77 100644\n--- a/core/src/main/java/org/infinispan/util/CoreBlockHoundIntegration.java\n+++ b/core/src/main/java/org/infinispan/util/CoreBlockHoundIntegration.java\n\n@@ -85,10 +85,6 @@ private static void registerBlockingMethods(BlockHound.Builder builder) {\n    }\n \n    private static void questionableMethodsAllowedToBlock(BlockHound.Builder builder) {\n-      // This one should probably not be allowed - it is waiting for another component to start\n-      // TODO: This might actually be a bug in the rewiring logic. (shows in StateTransferOverwritingValueTest)\n-      builder.allowBlockingCallsInside(BasicComponentRegistryImpl.class.getName(), \"awaitWrapperState\");\n-\n       // This method calls initCacheStatusIfAbsent which can invoke readScopedState which reads scope from a file that\n       // can block the current thread while doing I/O\n       builder.allowBlockingCallsInside(ClusterTopologyManagerImpl.class.getName(), \"prepareJoin\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk2MDU0Ng==", "url": "https://github.com/infinispan/infinispan/pull/7952#discussion_r384960546", "bodyText": "I suggest a name with Test in it, maybe TestBlocking.\nAlso missing javadoc :)", "author": "danberindei", "createdAt": "2020-02-27T07:52:54Z", "path": "core/src/test/java/org/infinispan/test/JREBlocking.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package org.infinispan.test;\n+\n+import java.util.concurrent.BrokenBarrierException;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.Exchanger;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+public class JREBlocking {", "originalCommit": "918a4b036dd2b11972d3f0e1e971640755ccda32", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExNzIwNQ==", "url": "https://github.com/infinispan/infinispan/pull/7952#discussion_r385117205", "bodyText": "Sure.", "author": "wburns", "createdAt": "2020-02-27T13:14:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk2MDU0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "c26eacb5f1400ac7feee7373e9e62060aaa86e81", "chunk": "diff --git a/core/src/test/java/org/infinispan/test/JREBlocking.java b/core/src/test/java/org/infinispan/test/TestBlocking.java\nsimilarity index 75%\nrename from core/src/test/java/org/infinispan/test/JREBlocking.java\nrename to core/src/test/java/org/infinispan/test/TestBlocking.java\nindex 46e99d3ab6..174858fa32 100644\n--- a/core/src/test/java/org/infinispan/test/JREBlocking.java\n+++ b/core/src/test/java/org/infinispan/test/TestBlocking.java\n\n@@ -7,8 +7,12 @@\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n \n-public class JREBlocking {\n-   private JREBlocking() { }\n+/**\n+ * Class used for various utility methods to encapsulate a blocking invocation. This is useful for tests as all\n+ * methods in this class are automatically excluded from any non blocking verification done by BlockHound.\n+ */\n+public class TestBlocking {\n+   private TestBlocking() { }\n \n    public static <I> I exchange(Exchanger<I> exchanger, I value, long time, TimeUnit timeUnit)\n          throws InterruptedException, TimeoutException {\n"}}, {"oid": "c26eacb5f1400ac7feee7373e9e62060aaa86e81", "url": "https://github.com/infinispan/infinispan/commit/c26eacb5f1400ac7feee7373e9e62060aaa86e81", "message": "ISPN-11264 XSiteStateTransferProviderImpl is blocking when sending state", "committedDate": "2020-02-27T14:34:52Z", "type": "forcePushed"}, {"oid": "a9ebecfa3f1c3d5255977d27207e2f134b99e2f6", "url": "https://github.com/infinispan/infinispan/commit/a9ebecfa3f1c3d5255977d27207e2f134b99e2f6", "message": "ISPN-11264 XSiteStateTransferProviderImpl is blocking when sending state", "committedDate": "2020-02-27T17:05:52Z", "type": "forcePushed"}, {"oid": "fb0cbce4f322ada45822061fd4b79a64507421f4", "url": "https://github.com/infinispan/infinispan/commit/fb0cbce4f322ada45822061fd4b79a64507421f4", "message": "ISPN-11264 XSiteStateTransferProviderImpl is blocking when sending state", "committedDate": "2020-02-27T18:24:26Z", "type": "forcePushed"}, {"oid": "781176399de458d63c7605d081d976337bc4e9fe", "url": "https://github.com/infinispan/infinispan/commit/781176399de458d63c7605d081d976337bc4e9fe", "message": "ISPN-11264 XSiteStateTransferProviderImpl is blocking when sending state", "committedDate": "2020-02-27T19:52:30Z", "type": "forcePushed"}, {"oid": "ff1ad8495f36549daa9ccb02bd6603677225188e", "url": "https://github.com/infinispan/infinispan/commit/ff1ad8495f36549daa9ccb02bd6603677225188e", "message": "ISPN-11271 Convert async transport executor to the non blocking thread pool", "committedDate": "2020-02-28T14:22:20Z", "type": "commit"}, {"oid": "027e4dd5e302a679a45cc768a27e72dadf99c8bf", "url": "https://github.com/infinispan/infinispan/commit/027e4dd5e302a679a45cc768a27e72dadf99c8bf", "message": "ISPN-11264 XSiteStateTransferProviderImpl is blocking when sending state", "committedDate": "2020-02-28T14:22:20Z", "type": "commit"}, {"oid": "027e4dd5e302a679a45cc768a27e72dadf99c8bf", "url": "https://github.com/infinispan/infinispan/commit/027e4dd5e302a679a45cc768a27e72dadf99c8bf", "message": "ISPN-11264 XSiteStateTransferProviderImpl is blocking when sending state", "committedDate": "2020-02-28T14:22:20Z", "type": "forcePushed"}]}