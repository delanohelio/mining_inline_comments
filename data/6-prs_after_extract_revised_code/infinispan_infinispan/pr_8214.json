{"pr_number": 8214, "pr_title": "ISPN-11676 + ISPN-11642 Hot Rod client per-cache config and on-access cache creation + JCache Remote URI", "pr_createdAt": "2020-04-17T16:28:22Z", "pr_url": "https://github.com/infinispan/infinispan/pull/8214", "timeline": [{"oid": "3b6a421493c9d5e6bfbd601b06fcd5724d0f8522", "url": "https://github.com/infinispan/infinispan/commit/3b6a421493c9d5e6bfbd601b06fcd5724d0f8522", "message": "ISPN-11642 Allow supplying hotrod-client.properties via URI in JCache remote", "committedDate": "2020-04-20T06:36:21Z", "type": "forcePushed"}, {"oid": "64561afb69902707b0e38e2dd5669adc064f5cfd", "url": "https://github.com/infinispan/infinispan/commit/64561afb69902707b0e38e2dd5669adc064f5cfd", "message": "ISPN-11642 Allow supplying hotrod-client.properties via URI in JCache remote", "committedDate": "2020-04-20T07:46:28Z", "type": "forcePushed"}, {"oid": "eaa29ee538597c2f94043d4b6d999625a1cac9aa", "url": "https://github.com/infinispan/infinispan/commit/eaa29ee538597c2f94043d4b6d999625a1cac9aa", "message": "ISPN-11642 Allow supplying hotrod-client.properties via URI in JCache remote", "committedDate": "2020-04-20T12:13:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ5MDMyMA==", "url": "https://github.com/infinispan/infinispan/pull/8214#discussion_r411490320", "bodyText": "espace", "author": "karesti", "createdAt": "2020-04-20T15:51:34Z", "path": "jcache/remote/src/main/java/org/infinispan/jcache/remote/JCacheManager.java", "diffHunk": "@@ -35,6 +36,14 @@\n    public JCacheManager(URI uri, ClassLoader classLoader, CachingProvider provider, Properties properties) {\n       super(uri, classLoader, provider, properties, false);\n \n+      try(InputStream is = uri.toURL().openStream()) {\n+\n+      } catch (MalformedURLException e) {\n+         // Ignore\n+      } catch (IOException e) {\n+         throw new RuntimeException(\"Could not load \"+uri, e);", "originalCommit": "c34d52dbe1577c223fed6cb02922e1427803f01c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c2feaad273ff230128aab95f464f786dbb300a2b", "chunk": "diff --git a/jcache/remote/src/main/java/org/infinispan/jcache/remote/JCacheManager.java b/jcache/remote/src/main/java/org/infinispan/jcache/remote/JCacheManager.java\nindex 61a96ee674..5d8b4d1fcd 100644\n--- a/jcache/remote/src/main/java/org/infinispan/jcache/remote/JCacheManager.java\n+++ b/jcache/remote/src/main/java/org/infinispan/jcache/remote/JCacheManager.java\n\n@@ -33,18 +33,10 @@\n    private RemoteCacheManager cm;\n    private RemoteCacheManager cmForceReturnValue;\n \n-   public JCacheManager(URI uri, ClassLoader classLoader, CachingProvider provider, Properties properties) {\n-      super(uri, classLoader, provider, properties, false);\n+   public JCacheManager(URI uri, ClassLoader classLoader, CachingProvider provider, Properties userProperties) {\n+      super(uri, classLoader, provider, userProperties, false);\n \n-      try(InputStream is = uri.toURL().openStream()) {\n-\n-      } catch (MalformedURLException e) {\n-         // Ignore\n-      } catch (IOException e) {\n-         throw new RuntimeException(\"Could not load \"+uri, e);\n-      }\n-\n-      ConfigurationBuilder builder = getConfigurationBuilder(properties);\n+      ConfigurationBuilder builder = getConfigurationBuilder(uri, userProperties);\n \n       org.infinispan.client.hotrod.configuration.Configuration configuration = builder.build();\n       cm = new RemoteCacheManager(configuration, true);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ5NTQ3MA==", "url": "https://github.com/infinispan/infinispan/pull/8214#discussion_r411495470", "bodyText": "what is Xor configuration ?", "author": "karesti", "createdAt": "2020-04-20T15:58:01Z", "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/logging/Log.java", "diffHunk": "@@ -332,4 +332,7 @@\n \n    @Message(value = \"OAUTHBEARER mechanism selected without providing a token\", id = 4093)\n    CacheConfigurationException oauthBearerWithoutToken();\n+\n+   @Message(value = \"Cannot specify both template name and configuration for '%s'\", id = 4094)\n+   CacheConfigurationException remoteCacheTemplateNameXorConfiguration(String name);", "originalCommit": "c34d52dbe1577c223fed6cb02922e1427803f01c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYyOTQ2NA==", "url": "https://github.com/infinispan/infinispan/pull/8214#discussion_r411629464", "bodyText": "exclusive or: you can have either one or the other", "author": "tristantarrant", "createdAt": "2020-04-20T19:20:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ5NTQ3MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ5NjI0OA==", "url": "https://github.com/infinispan/infinispan/pull/8214#discussion_r411496248", "bodyText": "I have troubles with my editor and code formatter right now. I don't further know if this is the good or the bad format", "author": "karesti", "createdAt": "2020-04-20T15:58:58Z", "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/impl/Util.java", "diffHunk": "@@ -28,20 +29,19 @@ public int getFormatId() {\n \n       @Override\n       public byte[] getGlobalTransactionId() {\n-         return new byte[] {1};\n+         return new byte[]{1};\n       }\n \n       @Override\n       public byte[] getBranchQualifier() {\n-         return new byte[] {1};", "originalCommit": "c34d52dbe1577c223fed6cb02922e1427803f01c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA0MzgyNw==", "url": "https://github.com/infinispan/infinispan/pull/8214#discussion_r412043827", "bodyText": "I've used our IDEA code style and that's what it does", "author": "tristantarrant", "createdAt": "2020-04-21T09:54:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ5NjI0OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ5ODIzMw==", "url": "https://github.com/infinispan/infinispan/pull/8214#discussion_r411498233", "bodyText": "Java doc", "author": "karesti", "createdAt": "2020-04-20T16:01:19Z", "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/configuration/ConfigurationChildBuilder.java", "diffHunk": "@@ -222,6 +222,8 @@\n     */\n    TransactionConfigurationBuilder transaction();\n \n+   RemoteCacheConfigurationBuilder remoteCache(String name);", "originalCommit": "c34d52dbe1577c223fed6cb02922e1427803f01c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA0Mzk3OQ==", "url": "https://github.com/infinispan/infinispan/pull/8214#discussion_r412043979", "bodyText": "Done", "author": "tristantarrant", "createdAt": "2020-04-21T09:54:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ5ODIzMw=="}], "type": "inlineReview", "revised_code": {"commit": "29f2b168971037043ee1955f1ca3d3130ea8e2a1", "chunk": "diff --git a/client/hotrod-client/src/main/java/org/infinispan/client/hotrod/configuration/ConfigurationChildBuilder.java b/client/hotrod-client/src/main/java/org/infinispan/client/hotrod/configuration/ConfigurationChildBuilder.java\nindex a76d871860..d9e6cc1689 100644\n--- a/client/hotrod-client/src/main/java/org/infinispan/client/hotrod/configuration/ConfigurationChildBuilder.java\n+++ b/client/hotrod-client/src/main/java/org/infinispan/client/hotrod/configuration/ConfigurationChildBuilder.java\n\n@@ -222,6 +222,11 @@\n     */\n    TransactionConfigurationBuilder transaction();\n \n+   /**\n+    * Per-cache configuration\n+    * @param name the name of the cache to which specific configuration should be applied\n+    * @return the {@link RemoteCacheConfigurationBuilder} for the cache\n+    */\n    RemoteCacheConfigurationBuilder remoteCache(String name);\n \n    /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwMjU1Nw==", "url": "https://github.com/infinispan/infinispan/pull/8214#discussion_r411502557", "bodyText": "instead if returning null and exception or logging that would explain better the issue ?", "author": "karesti", "createdAt": "2020-04-20T16:06:34Z", "path": "client/hotrod-client/src/main/java/org/infinispan/client/hotrod/RemoteCacheManager.java", "diffHunk": "@@ -427,52 +430,84 @@ private Properties loadFromStream(InputStream stream) {\n \n    private <K, V> RemoteCache<K, V> createRemoteCache(String cacheName, boolean forceReturnValueOverride,\n                                                       TransactionMode transactionModeOverride, TransactionManager transactionManagerOverride) {\n-      synchronized (cacheName2RemoteCache) {\n-         RemoteCacheKey key = new RemoteCacheKey(cacheName, forceReturnValueOverride);\n-         if (!cacheName2RemoteCache.containsKey(key)) {\n-            TransactionMode transactionMode = getTransactionMode(transactionModeOverride);\n-            RemoteCacheImpl<K, V> result;\n-            if (transactionMode == TransactionMode.NONE) {\n-               result = createRemoteCache(cacheName);\n-            } else {\n-               if (!this.isTransactional(cacheName)) {\n-                  throw HOTROD.cacheDoesNotSupportTransactions(cacheName);\n-               }\n-               TransactionManager transactionManager = getTransactionManager(transactionManagerOverride);\n-               result = createRemoteTransactionalCache(cacheName, forceReturnValueOverride,\n-                     transactionMode == TransactionMode.FULL_XA, transactionMode, transactionManager);\n-            }\n-            RemoteCacheHolder rcc = new RemoteCacheHolder(result, forceReturnValueOverride);\n-            startRemoteCache(rcc);\n+      RemoteCacheConfiguration cacheConfiguration = configuration.remoteCaches().get(cacheName);\n+      boolean forceReturnValue = forceReturnValueOverride ? true : (cacheConfiguration != null ? cacheConfiguration.forceReturnValues() : configuration.forceReturnValues());\n+      RemoteCacheKey key = new RemoteCacheKey(cacheName, forceReturnValue);\n+      if (cacheName2RemoteCache.containsKey(key)) {\n+         return cacheName2RemoteCache.get(key).remoteCache();\n+      }\n \n-            PingResponse pingResponse = result.resolveStorage();\n-            // If ping not successful assume that the cache does not exist\n-            if (pingResponse.isCacheNotFound()) {\n+      OperationsFactory operationsFactory = createOperationFactory(cacheName, forceReturnValue, codec, null);\n+      PingResponse pingResponse;\n+      if (started) {\n+         // Verify if the cache exists on the server first\n+         pingResponse = await(operationsFactory.newFaultTolerantPingOperation().execute());\n+\n+         // If ping not successful assume that the cache does not exist\n+         if (pingResponse.isCacheNotFound()) {\n+            // We may be able to create it. Don't use RemoteCacheAdmin for this, since it would end up calling this method again\n+            Map<String, byte[]> params = new HashMap<>(2);\n+            params.put(RemoteCacheManagerAdminImpl.CACHE_NAME, cacheName.getBytes(HotRodConstants.HOTROD_STRING_CHARSET));\n+            if (cacheConfiguration != null && cacheConfiguration.templateName() != null) {\n+               params.put(RemoteCacheManagerAdminImpl.CACHE_TEMPLATE, cacheConfiguration.templateName().getBytes(HotRodConstants.HOTROD_STRING_CHARSET));\n+            } else if (cacheConfiguration != null && cacheConfiguration.configuration() != null) {\n+               params.put(RemoteCacheManagerAdminImpl.CACHE_CONFIGURATION, new XMLStringConfiguration(cacheConfiguration.configuration()).toXMLString(cacheName).getBytes(HotRodConstants.HOTROD_STRING_CHARSET));\n+            } else {\n+               // We cannot create the cache\n                return null;", "originalCommit": "c34d52dbe1577c223fed6cb02922e1427803f01c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYzMDAwNQ==", "url": "https://github.com/infinispan/infinispan/pull/8214#discussion_r411630005", "bodyText": "I really would like to throw an exception, but the previous version returned null and I didn't want to break backwards compat", "author": "tristantarrant", "createdAt": "2020-04-20T19:21:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwMjU1Nw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "29f2b168971037043ee1955f1ca3d3130ea8e2a1", "url": "https://github.com/infinispan/infinispan/commit/29f2b168971037043ee1955f1ca3d3130ea8e2a1", "message": "ISPN-11676 Per-cache configuration for Hot Rod client\n\n* Add per-cache configuration to the Hot Rod client\n* On-access creation of caches using supplied template/configuration\n* Deprecated the near cache regex configuration", "committedDate": "2020-04-21T09:48:35Z", "type": "commit"}, {"oid": "c2feaad273ff230128aab95f464f786dbb300a2b", "url": "https://github.com/infinispan/infinispan/commit/c2feaad273ff230128aab95f464f786dbb300a2b", "message": "ISPN-11642 Allow supplying hotrod-client.properties via URI in JCache remote", "committedDate": "2020-04-21T09:48:35Z", "type": "commit"}, {"oid": "c2feaad273ff230128aab95f464f786dbb300a2b", "url": "https://github.com/infinispan/infinispan/commit/c2feaad273ff230128aab95f464f786dbb300a2b", "message": "ISPN-11642 Allow supplying hotrod-client.properties via URI in JCache remote", "committedDate": "2020-04-21T09:48:35Z", "type": "forcePushed"}]}