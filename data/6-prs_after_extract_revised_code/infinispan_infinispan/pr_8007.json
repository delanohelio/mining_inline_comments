{"pr_number": 8007, "pr_title": "ISPN-11205 Server DataSources", "pr_createdAt": "2020-03-06T17:06:11Z", "pr_url": "https://github.com/infinispan/infinispan/pull/8007", "timeline": [{"oid": "c2d6ae9cb0d4017b3040f23d2d4bc5860f4b394b", "url": "https://github.com/infinispan/infinispan/commit/c2d6ae9cb0d4017b3040f23d2d4bc5860f4b394b", "message": "ISPN-11205 Server DataSources\n\n* DataSource implementation backed by Agroal\n* Trivial JNDI implementation to expose datasources", "committedDate": "2020-03-07T09:28:38Z", "type": "forcePushed"}, {"oid": "afdae3a4784a062cfc7a103bdcee4f654feaaf98", "url": "https://github.com/infinispan/infinispan/commit/afdae3a4784a062cfc7a103bdcee4f654feaaf98", "message": "ISPN-11205 Server DataSources\n\n* DataSource implementation backed by Agroal\n* Trivial JNDI implementation to expose datasources", "committedDate": "2020-03-20T08:43:54Z", "type": "forcePushed"}, {"oid": "7782c3a3bdb546f49c6ee94404e371ba2b7b7162", "url": "https://github.com/infinispan/infinispan/commit/7782c3a3bdb546f49c6ee94404e371ba2b7b7162", "message": "ISPN-11205 Server DataSources\n\n* DataSource implementation backed by Agroal\n* Trivial JNDI implementation to expose datasources", "committedDate": "2020-03-30T09:09:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAzNzk5OQ==", "url": "https://github.com/infinispan/infinispan/pull/8007#discussion_r400037999", "bodyText": "AFAICT NAMED_OBJECTS is always empty.", "author": "ryanemerson", "createdAt": "2020-03-30T09:09:51Z", "path": "server/runtime/src/main/java/org/infinispan/server/context/ServerInitialContextFactoryBuilder.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package org.infinispan.server.context;\n+\n+import java.io.Closeable;\n+import java.util.Hashtable;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import javax.naming.spi.InitialContextFactory;\n+import javax.naming.spi.InitialContextFactoryBuilder;\n+\n+import org.infinispan.commons.util.Util;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 11.0\n+ **/\n+public class ServerInitialContextFactoryBuilder implements InitialContextFactoryBuilder, Closeable {\n+\n+   private final ConcurrentMap<String, Object> NAMED_OBJECTS;\n+\n+   public ServerInitialContextFactoryBuilder() {\n+      NAMED_OBJECTS = new ConcurrentHashMap<>();\n+   }\n+\n+   @Override\n+   public InitialContextFactory createInitialContextFactory(Hashtable<?, ?> environment) {\n+      return new ServerInitialContextFactory(NAMED_OBJECTS);\n+   }\n+\n+   @Override\n+   public void close() {\n+      // Closes any AutoCloseable objects stored in the context\n+      NAMED_OBJECTS.values().stream().filter(v -> v instanceof AutoCloseable).forEach(o -> Util.close((AutoCloseable) o));", "originalCommit": "afdae3a4784a062cfc7a103bdcee4f654feaaf98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEyOTcxNw==", "url": "https://github.com/infinispan/infinispan/pull/8007#discussion_r400129717", "bodyText": "No, it will be filled by calls to ServerInitialContext.bind", "author": "tristantarrant", "createdAt": "2020-03-30T11:49:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDAzNzk5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "476a13e09659697ac11a46406c2f4b733d01dd83", "chunk": "diff --git a/server/runtime/src/main/java/org/infinispan/server/context/ServerInitialContextFactoryBuilder.java b/server/runtime/src/main/java/org/infinispan/server/context/ServerInitialContextFactoryBuilder.java\nindex 857a58fa1d..26486b50df 100644\n--- a/server/runtime/src/main/java/org/infinispan/server/context/ServerInitialContextFactoryBuilder.java\n+++ b/server/runtime/src/main/java/org/infinispan/server/context/ServerInitialContextFactoryBuilder.java\n\n@@ -5,6 +5,8 @@\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n \n+import javax.naming.Context;\n+import javax.naming.NamingException;\n import javax.naming.spi.InitialContextFactory;\n import javax.naming.spi.InitialContextFactoryBuilder;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA0MTAzNQ==", "url": "https://github.com/infinispan/infinispan/pull/8007#discussion_r400041035", "bodyText": "Redundant empty line", "author": "ryanemerson", "createdAt": "2020-03-30T09:14:33Z", "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/persistence/ContainerDatabase.java", "diffHunk": "@@ -40,15 +46,31 @@\n    public void start() {\n       log.infof(\"Starting database %s\", getType());\n       container.start();\n+      String containerIpAddress = container.getContainerIpAddress();\n+      try {\n+", "originalCommit": "afdae3a4784a062cfc7a103bdcee4f654feaaf98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f3652bd2529efd70d5ddf4159c94c6fb0974d2f", "chunk": "diff --git a/server/testdriver/core/src/main/java/org/infinispan/server/test/core/persistence/ContainerDatabase.java b/server/testdriver/core/src/main/java/org/infinispan/server/test/core/persistence/ContainerDatabase.java\nindex fbf6ea40fa..7b724cd02b 100644\n--- a/server/testdriver/core/src/main/java/org/infinispan/server/test/core/persistence/ContainerDatabase.java\n+++ b/server/testdriver/core/src/main/java/org/infinispan/server/test/core/persistence/ContainerDatabase.java\n\n@@ -48,7 +48,6 @@ public void start() {\n       container.start();\n       String containerIpAddress = container.getContainerIpAddress();\n       try {\n-\n          InetAddress localAddress = InetAddress.getByName(\"0.0.0.0\");\n          InetAddress remoteAddress = InetAddress.getByName(containerIpAddress);\n          socketProxy = new SocketProxy(localAddress, 20000, remoteAddress, container.getMappedPort(port));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA0MTYzMw==", "url": "https://github.com/infinispan/infinispan/pull/8007#discussion_r400041633", "bodyText": "\"map\" is redundant", "author": "ryanemerson", "createdAt": "2020-03-30T09:15:31Z", "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/proxy/SocketProxy.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package org.infinispan.server.test.core.proxy;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.InetAddress;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.infinispan.commons.logging.Log;\n+import org.infinispan.commons.logging.LogFactory;\n+import org.infinispan.commons.util.Util;\n+\n+/**\n+ * A generic socket proxy. This is used to map overcome a design choice in testcontainers which doesn't allow mapping", "originalCommit": "afdae3a4784a062cfc7a103bdcee4f654feaaf98", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f3652bd2529efd70d5ddf4159c94c6fb0974d2f", "chunk": "diff --git a/server/testdriver/core/src/main/java/org/infinispan/server/test/core/proxy/SocketProxy.java b/server/testdriver/core/src/main/java/org/infinispan/server/test/core/proxy/SocketProxy.java\nindex fe099bbcf1..3f708f248f 100644\n--- a/server/testdriver/core/src/main/java/org/infinispan/server/test/core/proxy/SocketProxy.java\n+++ b/server/testdriver/core/src/main/java/org/infinispan/server/test/core/proxy/SocketProxy.java\n\n@@ -14,7 +14,7 @@\n import org.infinispan.commons.util.Util;\n \n /**\n- * A generic socket proxy. This is used to map overcome a design choice in testcontainers which doesn't allow mapping\n+ * A generic socket proxy. This is used to overcome a design choice in testcontainers which doesn't allow mapping\n  * container ports to a known port on the host (to avoid clashes).\n  *\n  * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA0MzYxOA==", "url": "https://github.com/infinispan/infinispan/pull/8007#discussion_r400043618", "bodyText": "The following can be removed as they're just using the default values:\n\nfetchPersistentState\nignoreModifications\nignoreModifications\nshared", "author": "ryanemerson", "createdAt": "2020-03-30T09:18:40Z", "path": "server/tests/src/test/java/org/infinispan/server/persistence/ManagedConnectionOperations.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package org.infinispan.server.persistence;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import org.infinispan.client.hotrod.RemoteCache;\n+import org.infinispan.persistence.jdbc.configuration.JdbcStringBasedStoreConfigurationBuilder;\n+import org.infinispan.server.test.core.category.Persistence;\n+import org.infinispan.server.test.junit4.DatabaseServerRule;\n+import org.infinispan.server.test.junit4.InfinispanServerRule;\n+import org.infinispan.server.test.junit4.InfinispanServerTestMethodRule;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category(Persistence.class)\n+public class ManagedConnectionOperations {\n+\n+   @ClassRule\n+   public static InfinispanServerRule SERVERS = PersistenceIT.SERVERS;\n+\n+   @ClassRule\n+   public static DatabaseServerRule DATABASE = new DatabaseServerRule(SERVERS);\n+\n+   @Rule\n+   public InfinispanServerTestMethodRule SERVER_TEST = new InfinispanServerTestMethodRule(SERVERS);\n+\n+   public ManagedConnectionOperations() {\n+      DATABASE.setDatabaseType(\"h2\");\n+   }\n+\n+   private org.infinispan.configuration.cache.ConfigurationBuilder createConfigurationBuilder() {\n+\n+      org.infinispan.configuration.cache.ConfigurationBuilder builder = new org.infinispan.configuration.cache.ConfigurationBuilder();\n+      builder.persistence().addStore(JdbcStringBasedStoreConfigurationBuilder.class)\n+            .fetchPersistentState(false)\n+            .ignoreModifications(false)\n+            .purgeOnStartup(false)\n+            .shared(false)\n+            .table()\n+            .dropOnExit(true)\n+            .createOnStart(true)\n+            .tableNamePrefix(\"TBL\")", "originalCommit": "afdae3a4784a062cfc7a103bdcee4f654feaaf98", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyMDU0OA==", "url": "https://github.com/infinispan/infinispan/pull/8007#discussion_r400720548", "bodyText": "Done", "author": "tristantarrant", "createdAt": "2020-03-31T08:09:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA0MzYxOA=="}], "type": "inlineReview", "revised_code": {"commit": "9f3652bd2529efd70d5ddf4159c94c6fb0974d2f", "chunk": "diff --git a/server/tests/src/test/java/org/infinispan/server/persistence/ManagedConnectionOperations.java b/server/tests/src/test/java/org/infinispan/server/persistence/ManagedConnectionOperations.java\nindex 7c86a44b7e..4901a79941 100644\n--- a/server/tests/src/test/java/org/infinispan/server/persistence/ManagedConnectionOperations.java\n+++ b/server/tests/src/test/java/org/infinispan/server/persistence/ManagedConnectionOperations.java\n\n@@ -35,13 +35,8 @@ public ManagedConnectionOperations() {\n \n       org.infinispan.configuration.cache.ConfigurationBuilder builder = new org.infinispan.configuration.cache.ConfigurationBuilder();\n       builder.persistence().addStore(JdbcStringBasedStoreConfigurationBuilder.class)\n-            .fetchPersistentState(false)\n-            .ignoreModifications(false)\n-            .purgeOnStartup(false)\n-            .shared(false)\n             .table()\n             .dropOnExit(true)\n-            .createOnStart(true)\n             .tableNamePrefix(\"TBL\")\n             .idColumnName(\"ID\").idColumnType(DATABASE.getDatabase().getIdColumType())\n             .dataColumnName(\"DATA\").dataColumnType(DATABASE.getDatabase().getDataColumnType())\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA0OTIxOA==", "url": "https://github.com/infinispan/infinispan/pull/8007#discussion_r400049218", "bodyText": "Unused variable", "author": "ryanemerson", "createdAt": "2020-03-30T09:27:27Z", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/DataSourceConfigurationBuilder.java", "diffHunk": "@@ -0,0 +1,110 @@\n+package org.infinispan.server.configuration;\n+\n+import java.util.Map;\n+\n+import org.infinispan.commons.configuration.Builder;\n+import org.infinispan.commons.configuration.attributes.Attribute;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n+\n+import io.agroal.api.configuration.AgroalConnectionFactoryConfiguration;\n+\n+public class DataSourceConfigurationBuilder implements Builder<DataSourceConfiguration> {\n+\n+   private final AttributeSet attributes;\n+   private final ServerConfigurationBuilder server;", "originalCommit": "7782c3a3bdb546f49c6ee94404e371ba2b7b7162", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f3652bd2529efd70d5ddf4159c94c6fb0974d2f", "chunk": "diff --git a/server/runtime/src/main/java/org/infinispan/server/configuration/DataSourceConfigurationBuilder.java b/server/runtime/src/main/java/org/infinispan/server/configuration/DataSourceConfigurationBuilder.java\nindex 710f2e4192..351c886568 100644\n--- a/server/runtime/src/main/java/org/infinispan/server/configuration/DataSourceConfigurationBuilder.java\n+++ b/server/runtime/src/main/java/org/infinispan/server/configuration/DataSourceConfigurationBuilder.java\n\n@@ -100,6 +100,11 @@ public DataSourceConfigurationBuilder idleRemoval(int idleRemoval) {\n       return this;\n    }\n \n+   public DataSourceConfigurationBuilder statistics(boolean enable) {\n+      attributes.attribute(DataSourceConfiguration.STATISTICS).set(enable);\n+      return this;\n+   }\n+\n    public DataSourceConfigurationBuilder addProperty(String key, String value) {\n       Attribute<Map<String, String>> a = attributes.attribute(DataSourceConfiguration.CONNECTION_PROPERTIES);\n       Map<String, String> map = a.get();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA1MDY2MQ==", "url": "https://github.com/infinispan/infinispan/pull/8007#discussion_r400050661", "bodyText": "final?", "author": "ryanemerson", "createdAt": "2020-03-30T09:29:34Z", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/DataSourcesConfigurationBuilder.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.infinispan.server.configuration;\n+\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.infinispan.commons.configuration.Builder;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n+\n+public class DataSourcesConfigurationBuilder implements Builder<DataSourcesConfiguration> {\n+\n+   private final AttributeSet attributes;\n+   private final ServerConfigurationBuilder server;\n+\n+   private Map<String, DataSourceConfigurationBuilder> dataSources = new LinkedHashMap<>(2);", "originalCommit": "7782c3a3bdb546f49c6ee94404e371ba2b7b7162", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA1MTMzMg==", "url": "https://github.com/infinispan/infinispan/pull/8007#discussion_r400051332", "bodyText": "Should we make the validate method a default no-op in the interface? Doesn't have to be in this PR.", "author": "ryanemerson", "createdAt": "2020-03-30T09:30:35Z", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/DataSourcesConfigurationBuilder.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.infinispan.server.configuration;\n+\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.infinispan.commons.configuration.Builder;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n+\n+public class DataSourcesConfigurationBuilder implements Builder<DataSourcesConfiguration> {\n+\n+   private final AttributeSet attributes;\n+   private final ServerConfigurationBuilder server;\n+\n+   private Map<String, DataSourceConfigurationBuilder> dataSources = new LinkedHashMap<>(2);\n+\n+   DataSourcesConfigurationBuilder(ServerConfigurationBuilder server) {\n+      this.server = server;\n+      attributes = DataSourcesConfiguration.attributeDefinitionSet();\n+   }\n+\n+   DataSourceConfigurationBuilder dataSource(String name, String jndiName) {\n+      DataSourceConfigurationBuilder builder = new DataSourceConfigurationBuilder(server, name, jndiName);\n+      dataSources.put(name, builder);\n+      return builder;\n+   }\n+\n+   @Override\n+   public void validate() {\n+   }", "originalCommit": "7782c3a3bdb546f49c6ee94404e371ba2b7b7162", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA1MzE3OA==", "url": "https://github.com/infinispan/infinispan/pull/8007#discussion_r400053178", "bodyText": "Empty finally statement. I think this is redundant anyway as using try with resources.", "author": "ryanemerson", "createdAt": "2020-03-30T09:33:30Z", "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/proxy/SocketProxy.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package org.infinispan.server.test.core.proxy;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.InetAddress;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.infinispan.commons.logging.Log;\n+import org.infinispan.commons.logging.LogFactory;\n+import org.infinispan.commons.util.Util;\n+\n+/**\n+ * A generic socket proxy. This is used to map overcome a design choice in testcontainers which doesn't allow mapping\n+ * container ports to a known port on the host (to avoid clashes).\n+ *\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 11.0\n+ **/\n+public class SocketProxy implements AutoCloseable {\n+   static final Log log = LogFactory.getLog(SocketProxy.class);\n+   final InetAddress bindAddress;\n+   final int localPort;\n+   final InetAddress remoteAddress;\n+   final int remotePort;\n+   final CountDownLatch latch;\n+   private ServerSocket serverSocket;\n+\n+   public SocketProxy(InetAddress bindAddress, int localPort, InetAddress remoteAddress, int remotePort) {\n+      this.bindAddress = bindAddress;\n+      this.localPort = localPort;\n+      this.remoteAddress = remoteAddress;\n+      this.remotePort = remotePort;\n+      this.latch = new CountDownLatch(2);\n+      start();\n+   }\n+\n+   public void start() {\n+      try {\n+         serverSocket = new ServerSocket(localPort, 10, bindAddress);\n+         serverSocket.setSoTimeout(5000);\n+      } catch (IOException e) {\n+         throw new RuntimeException(e);\n+      }\n+      new Thread(() -> {\n+         while (latch.getCount() > 1) {\n+            try {\n+               Socket localSocket = serverSocket.accept();\n+               // We have an incoming connection, let's establish a connection to the remote port\n+               Socket remoteSocket = new Socket(remoteAddress, remotePort);\n+               remoteSocket.setSoTimeout(20000);\n+\n+               new Thread(() -> {\n+                  // remote -> local\n+                  try (InputStream remoteSocketInputStream = remoteSocket.getInputStream(); OutputStream localSocketOutputStream = localSocket.getOutputStream()) {\n+                     log.debug(\"remote->local: opened\");\n+                     byte[] remoteBuffer = new byte[4096];\n+                     int remoteBytesRead;\n+                     while ((remoteBytesRead = remoteSocketInputStream.read(remoteBuffer)) != -1) {\n+                        localSocketOutputStream.write(remoteBuffer, 0, remoteBytesRead);\n+                        localSocketOutputStream.flush();\n+                        log.debugf(\"remote->local: transferred %d bytes\\n\", remoteBytesRead);\n+                     }\n+                  } catch (IOException e) {\n+                     log.error(\"remote->local\", e);\n+                  } finally {\n+                  }", "originalCommit": "7782c3a3bdb546f49c6ee94404e371ba2b7b7162", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f3652bd2529efd70d5ddf4159c94c6fb0974d2f", "chunk": "diff --git a/server/testdriver/core/src/main/java/org/infinispan/server/test/core/proxy/SocketProxy.java b/server/testdriver/core/src/main/java/org/infinispan/server/test/core/proxy/SocketProxy.java\nindex fe099bbcf1..3f708f248f 100644\n--- a/server/testdriver/core/src/main/java/org/infinispan/server/test/core/proxy/SocketProxy.java\n+++ b/server/testdriver/core/src/main/java/org/infinispan/server/test/core/proxy/SocketProxy.java\n\n@@ -14,7 +14,7 @@\n import org.infinispan.commons.util.Util;\n \n /**\n- * A generic socket proxy. This is used to map overcome a design choice in testcontainers which doesn't allow mapping\n+ * A generic socket proxy. This is used to overcome a design choice in testcontainers which doesn't allow mapping\n  * container ports to a known port on the host (to avoid clashes).\n  *\n  * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA1MzY3OA==", "url": "https://github.com/infinispan/infinispan/pull/8007#discussion_r400053678", "bodyText": "How about:\n// We have an incoming connection, let's establish a connection to the remote port\n            try(Socket localSocket = serverSocket.accept();\n                Socket remoteSocket = new Socket(remoteAddress, remotePort)) {", "author": "ryanemerson", "createdAt": "2020-03-30T09:34:14Z", "path": "server/testdriver/core/src/main/java/org/infinispan/server/test/core/proxy/SocketProxy.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package org.infinispan.server.test.core.proxy;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.InetAddress;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.infinispan.commons.logging.Log;\n+import org.infinispan.commons.logging.LogFactory;\n+import org.infinispan.commons.util.Util;\n+\n+/**\n+ * A generic socket proxy. This is used to map overcome a design choice in testcontainers which doesn't allow mapping\n+ * container ports to a known port on the host (to avoid clashes).\n+ *\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 11.0\n+ **/\n+public class SocketProxy implements AutoCloseable {\n+   static final Log log = LogFactory.getLog(SocketProxy.class);\n+   final InetAddress bindAddress;\n+   final int localPort;\n+   final InetAddress remoteAddress;\n+   final int remotePort;\n+   final CountDownLatch latch;\n+   private ServerSocket serverSocket;\n+\n+   public SocketProxy(InetAddress bindAddress, int localPort, InetAddress remoteAddress, int remotePort) {\n+      this.bindAddress = bindAddress;\n+      this.localPort = localPort;\n+      this.remoteAddress = remoteAddress;\n+      this.remotePort = remotePort;\n+      this.latch = new CountDownLatch(2);\n+      start();\n+   }\n+\n+   public void start() {\n+      try {\n+         serverSocket = new ServerSocket(localPort, 10, bindAddress);\n+         serverSocket.setSoTimeout(5000);\n+      } catch (IOException e) {\n+         throw new RuntimeException(e);\n+      }\n+      new Thread(() -> {\n+         while (latch.getCount() > 1) {\n+            try {\n+               Socket localSocket = serverSocket.accept();\n+               // We have an incoming connection, let's establish a connection to the remote port\n+               Socket remoteSocket = new Socket(remoteAddress, remotePort);", "originalCommit": "7782c3a3bdb546f49c6ee94404e371ba2b7b7162", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f3652bd2529efd70d5ddf4159c94c6fb0974d2f", "chunk": "diff --git a/server/testdriver/core/src/main/java/org/infinispan/server/test/core/proxy/SocketProxy.java b/server/testdriver/core/src/main/java/org/infinispan/server/test/core/proxy/SocketProxy.java\nindex fe099bbcf1..3f708f248f 100644\n--- a/server/testdriver/core/src/main/java/org/infinispan/server/test/core/proxy/SocketProxy.java\n+++ b/server/testdriver/core/src/main/java/org/infinispan/server/test/core/proxy/SocketProxy.java\n\n@@ -14,7 +14,7 @@\n import org.infinispan.commons.util.Util;\n \n /**\n- * A generic socket proxy. This is used to map overcome a design choice in testcontainers which doesn't allow mapping\n+ * A generic socket proxy. This is used to overcome a design choice in testcontainers which doesn't allow mapping\n  * container ports to a known port on the host (to avoid clashes).\n  *\n  * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA1NDY0OQ==", "url": "https://github.com/infinispan/infinispan/pull/8007#discussion_r400054649", "bodyText": "factory::jdbcProperty", "author": "ryanemerson", "createdAt": "2020-03-30T09:35:54Z", "path": "server/runtime/src/main/java/org/infinispan/server/datasource/DataSourceFactory.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package org.infinispan.server.datasource;\n+\n+import java.sql.SQLException;\n+import java.time.Duration;\n+\n+import javax.sql.DataSource;\n+\n+import org.infinispan.commons.util.ReflectionUtil;\n+import org.infinispan.server.Server;\n+import org.infinispan.server.configuration.DataSourceConfiguration;\n+\n+import io.agroal.api.AgroalDataSource;\n+import io.agroal.api.configuration.supplier.AgroalConnectionFactoryConfigurationSupplier;\n+import io.agroal.api.configuration.supplier.AgroalConnectionPoolConfigurationSupplier;\n+import io.agroal.api.configuration.supplier.AgroalDataSourceConfigurationSupplier;\n+import io.agroal.api.security.NamePrincipal;\n+import io.agroal.api.security.SimplePassword;\n+\n+/**\n+ * @author Tristan Tarrant &lt;tristan@infinispan.org&gt;\n+ * @since 11.0\n+ **/\n+public class DataSourceFactory {\n+\n+   public static DataSource create(DataSourceConfiguration configuration) throws SQLException, ClassNotFoundException {\n+      AgroalConnectionFactoryConfigurationSupplier factory = new AgroalConnectionFactoryConfigurationSupplier();\n+      Class<?> driverClass = ReflectionUtil.getClassForName(configuration.driver(), Thread.currentThread().getContextClassLoader());\n+      factory.connectionProviderClass(driverClass)\n+            .jdbcTransactionIsolation(configuration.transactionIsolation())\n+            .jdbcUrl(configuration.url())\n+            .principal(new NamePrincipal(configuration.username()))\n+            .credential(new SimplePassword(configuration.password()))\n+            .initialSql(configuration.initialSql());\n+      configuration.connectionProperties().forEach((k, v) -> factory.jdbcProperty(k, v));", "originalCommit": "7782c3a3bdb546f49c6ee94404e371ba2b7b7162", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f3652bd2529efd70d5ddf4159c94c6fb0974d2f", "chunk": "diff --git a/server/runtime/src/main/java/org/infinispan/server/datasource/DataSourceFactory.java b/server/runtime/src/main/java/org/infinispan/server/datasource/DataSourceFactory.java\nindex 01a954d3b6..fa4fdf4030 100644\n--- a/server/runtime/src/main/java/org/infinispan/server/datasource/DataSourceFactory.java\n+++ b/server/runtime/src/main/java/org/infinispan/server/datasource/DataSourceFactory.java\n\n@@ -31,7 +31,7 @@ public static DataSource create(DataSourceConfiguration configuration) throws SQ\n             .principal(new NamePrincipal(configuration.username()))\n             .credential(new SimplePassword(configuration.password()))\n             .initialSql(configuration.initialSql());\n-      configuration.connectionProperties().forEach((k, v) -> factory.jdbcProperty(k, v));\n+      configuration.connectionProperties().forEach(factory::jdbcProperty);\n \n       AgroalConnectionPoolConfigurationSupplier pool = new AgroalConnectionPoolConfigurationSupplier();\n       pool.connectionFactoryConfiguration(factory)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA1NTE0OA==", "url": "https://github.com/infinispan/infinispan/pull/8007#discussion_r400055148", "bodyText": "Defaults should be 0L", "author": "ryanemerson", "createdAt": "2020-03-30T09:36:49Z", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/DataSourceConfiguration.java", "diffHunk": "@@ -0,0 +1,153 @@\n+package org.infinispan.server.configuration;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+import org.infinispan.commons.configuration.ConfigurationInfo;\n+import org.infinispan.commons.configuration.attributes.AttributeDefinition;\n+import org.infinispan.commons.configuration.attributes.AttributeSet;\n+import org.infinispan.commons.configuration.elements.DefaultElementDefinition;\n+import org.infinispan.commons.configuration.elements.ElementDefinition;\n+\n+import io.agroal.api.configuration.AgroalConnectionFactoryConfiguration;\n+import io.agroal.api.configuration.AgroalConnectionFactoryConfiguration.TransactionIsolation;\n+\n+public class DataSourceConfiguration implements ConfigurationInfo {\n+\n+   static final AttributeDefinition<String> NAME = AttributeDefinition.builder(\"name\", null, String.class).build();\n+   static final AttributeDefinition<String> JNDI_NAME = AttributeDefinition.builder(\"jndiName\", null, String.class).build();\n+   static final AttributeDefinition<Boolean> STATISTICS = AttributeDefinition.builder(\"statistics\", false, Boolean.class).build();\n+\n+   static final AttributeDefinition<String> DRIVER = AttributeDefinition.builder(\"driver\", null, String.class).build();\n+   static final AttributeDefinition<String> URL = AttributeDefinition.builder(\"url\", null, String.class).build();\n+   static final AttributeDefinition<String> USERNAME = AttributeDefinition.builder(\"username\", null, String.class).build();\n+   static final AttributeDefinition<String> PASSWORD = AttributeDefinition.builder(\"password\", null, String.class).build();\n+   static final AttributeDefinition<String> INITIAL_SQL = AttributeDefinition.builder(\"initialSql\", null, String.class).build();\n+   static final AttributeDefinition<TransactionIsolation> TRANSACTION_ISOLATION = AttributeDefinition.builder(\"transactionIsolation\", TransactionIsolation.READ_COMMITTED, AgroalConnectionFactoryConfiguration.TransactionIsolation.class).build();\n+\n+   static final AttributeDefinition<Integer> MAX_SIZE = AttributeDefinition.builder(\"maxSize\", null, Integer.class).build();\n+   static final AttributeDefinition<Integer> MIN_SIZE = AttributeDefinition.builder(\"minSize\", 0, Integer.class).build();\n+   static final AttributeDefinition<Integer> INITIAL_SIZE = AttributeDefinition.builder(\"initialSize\", 0, Integer.class).build();\n+\n+   static final AttributeDefinition<Long> BLOCKING_TIMEOUT = AttributeDefinition.builder(\"blockingTimeout\", 0l, Long.class).build();\n+   static final AttributeDefinition<Long> BACKGROUND_VALIDATION = AttributeDefinition.builder(\"backgroundValidation\", 0l, Long.class).build();\n+   static final AttributeDefinition<Long> LEAK_DETECTION = AttributeDefinition.builder(\"leakDetection\", 0l, Long.class).build();", "originalCommit": "7782c3a3bdb546f49c6ee94404e371ba2b7b7162", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f3652bd2529efd70d5ddf4159c94c6fb0974d2f", "chunk": "diff --git a/server/runtime/src/main/java/org/infinispan/server/configuration/DataSourceConfiguration.java b/server/runtime/src/main/java/org/infinispan/server/configuration/DataSourceConfiguration.java\nindex ce110f8edf..b4b14bdb2e 100644\n--- a/server/runtime/src/main/java/org/infinispan/server/configuration/DataSourceConfiguration.java\n+++ b/server/runtime/src/main/java/org/infinispan/server/configuration/DataSourceConfiguration.java\n\n@@ -29,9 +29,9 @@\n    static final AttributeDefinition<Integer> MIN_SIZE = AttributeDefinition.builder(\"minSize\", 0, Integer.class).build();\n    static final AttributeDefinition<Integer> INITIAL_SIZE = AttributeDefinition.builder(\"initialSize\", 0, Integer.class).build();\n \n-   static final AttributeDefinition<Long> BLOCKING_TIMEOUT = AttributeDefinition.builder(\"blockingTimeout\", 0l, Long.class).build();\n-   static final AttributeDefinition<Long> BACKGROUND_VALIDATION = AttributeDefinition.builder(\"backgroundValidation\", 0l, Long.class).build();\n-   static final AttributeDefinition<Long> LEAK_DETECTION = AttributeDefinition.builder(\"leakDetection\", 0l, Long.class).build();\n+   static final AttributeDefinition<Long> BLOCKING_TIMEOUT = AttributeDefinition.builder(\"blockingTimeout\", 0L, Long.class).build();\n+   static final AttributeDefinition<Long> BACKGROUND_VALIDATION = AttributeDefinition.builder(\"backgroundValidation\", 0L, Long.class).build();\n+   static final AttributeDefinition<Long> LEAK_DETECTION = AttributeDefinition.builder(\"leakDetection\", 0L, Long.class).build();\n    static final AttributeDefinition<Integer> IDLE_REMOVAL = AttributeDefinition.builder(\"idleRemoval\", 0, Integer.class).build();\n \n    static final AttributeDefinition<Map<String, String>> CONNECTION_PROPERTIES = AttributeDefinition.builder(\"connectionProperty\", null, (Class<Map<String, String>>) (Class<?>) Map.class).initializer(LinkedHashMap::new).autoPersist(false).immutable().build();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA1NTU1OA==", "url": "https://github.com/infinispan/infinispan/pull/8007#discussion_r400055558", "bodyText": "Doesn't do anything", "author": "ryanemerson", "createdAt": "2020-03-30T09:37:27Z", "path": "server/runtime/src/main/java/org/infinispan/server/configuration/ServerConfigurationParser.java", "diffHunk": "@@ -962,6 +968,138 @@ private void parseKerberos(XMLExtendedStreamReader reader, ServerIdentitiesConfi\n       }\n    }\n \n+   private void parseDataSources(XMLExtendedStreamReader reader, ServerConfigurationBuilder builder) throws XMLStreamException {\n+      DataSourcesConfigurationBuilder dataSources = builder.dataSources();\n+      while (reader.hasNext() && (reader.nextTag() != XMLStreamConstants.END_ELEMENT)) {\n+         Element element = Element.forName(reader.getLocalName());\n+         switch (element) {\n+            case DATA_SOURCE: {\n+               parseDataSource(reader, dataSources);\n+               break;\n+            }\n+            default:\n+               throw ParseUtils.unexpectedElement(reader);\n+         }\n+      }\n+   }\n+\n+   private void parseDataSource(XMLExtendedStreamReader reader, DataSourcesConfigurationBuilder dataSourcesBuilder) throws XMLStreamException {\n+      String[] attributes = ParseUtils.requireAttributes(reader, Attribute.NAME, Attribute.JNDI_NAME);\n+      String name = attributes[0];\n+      String jndiName = attributes[1];\n+      DataSourceConfigurationBuilder dataSourceBuilder = dataSourcesBuilder.dataSource(name, jndiName);\n+      for (int i = 0; i < reader.getAttributeCount(); i++) {\n+         ParseUtils.requireNoNamespaceAttribute(reader, i);\n+         String value = reader.getAttributeValue(i);\n+         Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));\n+         switch (attribute) {\n+            case JNDI_NAME:\n+            case NAME:\n+               // already parsed\n+               break;\n+            case STATISTICS:\n+               Boolean.parseBoolean(value);", "originalCommit": "7782c3a3bdb546f49c6ee94404e371ba2b7b7162", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9f3652bd2529efd70d5ddf4159c94c6fb0974d2f", "chunk": "diff --git a/server/runtime/src/main/java/org/infinispan/server/configuration/ServerConfigurationParser.java b/server/runtime/src/main/java/org/infinispan/server/configuration/ServerConfigurationParser.java\nindex f548be13c2..1e062ad3c2 100644\n--- a/server/runtime/src/main/java/org/infinispan/server/configuration/ServerConfigurationParser.java\n+++ b/server/runtime/src/main/java/org/infinispan/server/configuration/ServerConfigurationParser.java\n\n@@ -998,7 +998,7 @@ private void parseDataSource(XMLExtendedStreamReader reader, DataSourcesConfigur\n                // already parsed\n                break;\n             case STATISTICS:\n-               Boolean.parseBoolean(value);\n+               dataSourceBuilder.statistics(Boolean.parseBoolean(value));\n                break;\n             default:\n                throw ParseUtils.unexpectedAttribute(reader, i);\n"}}, {"oid": "9f3652bd2529efd70d5ddf4159c94c6fb0974d2f", "url": "https://github.com/infinispan/infinispan/commit/9f3652bd2529efd70d5ddf4159c94c6fb0974d2f", "message": "ISPN-11205 Server DataSources\n\n* DataSource implementation backed by Agroal\n* Trivial JNDI implementation to expose datasources", "committedDate": "2020-03-30T13:55:28Z", "type": "forcePushed"}, {"oid": "476a13e09659697ac11a46406c2f4b733d01dd83", "url": "https://github.com/infinispan/infinispan/commit/476a13e09659697ac11a46406c2f4b733d01dd83", "message": "ISPN-11205 Server DataSources\n\n* DataSource implementation backed by Agroal\n* Trivial JNDI implementation to expose datasources", "committedDate": "2020-03-31T06:47:34Z", "type": "commit"}, {"oid": "476a13e09659697ac11a46406c2f4b733d01dd83", "url": "https://github.com/infinispan/infinispan/commit/476a13e09659697ac11a46406c2f4b733d01dd83", "message": "ISPN-11205 Server DataSources\n\n* DataSource implementation backed by Agroal\n* Trivial JNDI implementation to expose datasources", "committedDate": "2020-03-31T06:47:34Z", "type": "forcePushed"}]}