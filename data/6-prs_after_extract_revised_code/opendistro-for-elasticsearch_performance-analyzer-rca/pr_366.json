{"pr_number": 366, "pr_title": "Add config value to node config cache", "pr_createdAt": "2020-08-12T21:24:15Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/366", "timeline": [{"oid": "304b32c7431ab4bca0521cdb7fa5cfe74709f645", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/304b32c7431ab4bca0521cdb7fa5cfe74709f645", "message": "Add config value to node config cache", "committedDate": "2020-08-12T21:21:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2MTczMA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/366#discussion_r469561730", "bodyText": "let's read node key from getInstanceDetails instead of hardcoding it", "author": "rguo-aws", "createdAt": "2020-08-12T21:38:20Z", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/store/collector/NodeConfigCollectorTest.java", "diffHunk": "@@ -53,12 +56,14 @@ public void init() {\n     cacheMaxSize = new Cache_Max_Size(5);\n     heapMax = new Heap_Max(5);\n     nodeConfigCollector = new NodeConfigCollector(1, threadPool_QueueCapacity, cacheMaxSize, heapMax);\n+    nodeKey = new NodeKey(new InstanceDetails.Id(\"node1\"), new InstanceDetails.Ip(\"127.0.0.0\"));", "originalCommit": "304b32c7431ab4bca0521cdb7fa5cfe74709f645", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU3MDA3MA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/366#discussion_r469570070", "bodyText": "Done", "author": "sruti1312", "createdAt": "2020-08-12T21:58:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2MTczMA=="}], "type": "inlineReview", "revised_code": {"commit": "76fc092956a29f06994d33c130aa3d34af769324", "chunk": "diff --git a/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/store/collector/NodeConfigCollectorTest.java b/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/store/collector/NodeConfigCollectorTest.java\nindex cb10ff8b..dd4d6346 100644\n--- a/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/store/collector/NodeConfigCollectorTest.java\n+++ b/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/store/collector/NodeConfigCollectorTest.java\n\n@@ -56,7 +56,6 @@ public class NodeConfigCollectorTest {\n     cacheMaxSize = new Cache_Max_Size(5);\n     heapMax = new Heap_Max(5);\n     nodeConfigCollector = new NodeConfigCollector(1, threadPool_QueueCapacity, cacheMaxSize, heapMax);\n-    nodeKey = new NodeKey(new InstanceDetails.Id(\"node1\"), new InstanceDetails.Ip(\"127.0.0.0\"));\n \n     ClusterDetailsEventProcessor clusterDetailsEventProcessor = new ClusterDetailsEventProcessor();\n     ClusterDetailsEventProcessor.NodeDetails node1 =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2Mzg0OQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/366#discussion_r469563849", "bodyText": "can we update the cache once the metric is received from flowunit ?", "author": "rguo-aws", "createdAt": "2020-08-12T21:43:05Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/collector/NodeConfigCollector.java", "diffHunk": "@@ -141,6 +146,8 @@ public NodeConfigFlowUnit operate() {\n       }\n       collectHeapMaxSize(flowUnit);\n     }\n+\n+    addConfigToNodeCache();", "originalCommit": "304b32c7431ab4bca0521cdb7fa5cfe74709f645", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2NDI2Mg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/366#discussion_r469564262", "bodyText": "let us also take this opportunity to remove configResult hashmap from this collector. there is no need to store configs into both node config cache / hashmap", "author": "rguo-aws", "createdAt": "2020-08-12T21:44:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2Mzg0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY1MzMzMg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/366#discussion_r469653332", "bodyText": "Updating it once the metric is received from flowunit. Makes sense to also have configMap as it can be used to collect and add to flow units", "author": "sruti1312", "createdAt": "2020-08-13T02:02:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2Mzg0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "76fc092956a29f06994d33c130aa3d34af769324", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/collector/NodeConfigCollector.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/collector/NodeConfigCollector.java\nindex 03225c79..172d5bb4 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/collector/NodeConfigCollector.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/collector/NodeConfigCollector.java\n\n@@ -147,11 +131,12 @@ public class NodeConfigCollector extends EsConfigNode {\n       collectHeapMaxSize(flowUnit);\n     }\n \n-    addConfigToNodeCache();\n     if (counter == rcaPeriod) {\n       counter = 0;\n       NodeConfigFlowUnit flowUnits = new NodeConfigFlowUnit(System.currentTimeMillis(), new NodeKey(getInstanceDetails()));\n       configResult.forEach(flowUnits::addConfig);\n+      // Clear the hashmap to avoid sending stale data\n+      configResult.clear();\n       return flowUnits;\n     }\n     else {\n"}}, {"oid": "76fc092956a29f06994d33c130aa3d34af769324", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/76fc092956a29f06994d33c130aa3d34af769324", "message": "Refresh config map after publish", "committedDate": "2020-08-13T01:55:49Z", "type": "commit"}, {"oid": "7aeb51ca044abe0a08db6d2a41d2f2aa4696d80b", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/7aeb51ca044abe0a08db6d2a41d2f2aa4696d80b", "message": "Refactor accessing instance details", "committedDate": "2020-08-13T02:13:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE3MjA0Mw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/366#discussion_r470172043", "bodyText": "can move this inside the if block.", "author": "khushbr", "createdAt": "2020-08-13T18:48:03Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/collector/NodeConfigCollector.java", "diffHunk": "@@ -65,52 +64,40 @@ public NodeConfigCollector(int rcaPeriod,\n   }\n \n   private void collectQueueCapacity(MetricFlowUnit flowUnit) {\n-    double writeQueueCapacity = SQLParsingUtil.readDataFromSqlResult(flowUnit.getData(),\n+    final double writeQueueCapacity = SQLParsingUtil.readDataFromSqlResult(flowUnit.getData(),\n         THREAD_POOL_TYPE.getField(), ThreadPoolType.WRITE.toString(), MetricsDB.MAX);\n-    if (!Double.isNaN(writeQueueCapacity)) {\n-      configResult.put(ResourceUtil.WRITE_QUEUE_CAPACITY, writeQueueCapacity);\n-    }\n-    else {\n-      LOG.error(\"write queue capacity is NaN\");\n-    }\n-    double searchQueueCapacity = SQLParsingUtil.readDataFromSqlResult(flowUnit.getData(),\n+    collectAndPublishMetric(ResourceUtil.WRITE_QUEUE_CAPACITY, writeQueueCapacity);\n+\n+    final double searchQueueCapacity = SQLParsingUtil.readDataFromSqlResult(flowUnit.getData(),\n         THREAD_POOL_TYPE.getField(), ThreadPoolType.SEARCH.toString(), MetricsDB.MAX);\n-    if (!Double.isNaN(searchQueueCapacity)) {\n-      configResult.put(ResourceUtil.SEARCH_QUEUE_CAPACITY, searchQueueCapacity);\n-    }\n-    else {\n-      LOG.error(\"search queue capacity is NaN\");\n-    }\n+    collectAndPublishMetric(ResourceUtil.SEARCH_QUEUE_CAPACITY, searchQueueCapacity);\n   }\n \n   private void collectCacheMaxSize(MetricFlowUnit cacheMaxSize) {\n-    double fieldDataCacheMaxSize = SQLParsingUtil.readDataFromSqlResult(cacheMaxSize.getData(),\n+    final double fieldDataCacheMaxSize = SQLParsingUtil.readDataFromSqlResult(cacheMaxSize.getData(),\n             CACHE_TYPE.getField(), CacheType.FIELD_DATA_CACHE.toString(), MetricsDB.MAX);\n-    if (!Double.isNaN(fieldDataCacheMaxSize)) {\n-      configResult.put(ResourceUtil.FIELD_DATA_CACHE_MAX_SIZE, fieldDataCacheMaxSize);\n-    }\n-    else {\n-      LOG.error(\"Field Data cache max size is NaN\");\n-    }\n+    collectAndPublishMetric(ResourceUtil.FIELD_DATA_CACHE_MAX_SIZE, fieldDataCacheMaxSize);\n \n-    double shardRequestCacheMaxSize = SQLParsingUtil.readDataFromSqlResult(cacheMaxSize.getData(),\n+    final double shardRequestCacheMaxSize = SQLParsingUtil.readDataFromSqlResult(cacheMaxSize.getData(),\n             CACHE_TYPE.getField(), CacheType.SHARD_REQUEST_CACHE.toString(), MetricsDB.MAX);\n-    if (!Double.isNaN(shardRequestCacheMaxSize)) {\n-      configResult.put(ResourceUtil.SHARD_REQUEST_CACHE_MAX_SIZE, shardRequestCacheMaxSize);\n-    }\n-    else {\n-      LOG.error(\"Shard Request cache max size is NaN\");\n-    }\n+    collectAndPublishMetric(ResourceUtil.SHARD_REQUEST_CACHE_MAX_SIZE, shardRequestCacheMaxSize);\n   }\n \n   private void collectHeapMaxSize(MetricFlowUnit heapMax) {\n-    double heapMaxSize = SQLParsingUtil.readDataFromSqlResult(heapMax.getData(),\n+    final double heapMaxSize = SQLParsingUtil.readDataFromSqlResult(heapMax.getData(),\n             MEM_TYPE.getField(), AllMetrics.GCType.HEAP.toString(), MetricsDB.MAX);\n-    if (!Double.isNaN(heapMaxSize)) {\n-      configResult.put(ResourceUtil.HEAP_MAX_SIZE, heapMaxSize);\n+    collectAndPublishMetric(ResourceUtil.HEAP_MAX_SIZE, heapMaxSize);\n+  }\n+\n+  private void collectAndPublishMetric(final Resource resource, final double metricValue) {\n+    final NodeConfigCache nodeConfigCache = getAppContext().getNodeConfigCache();\n+    final NodeKey esNode = new NodeKey(getAppContext().getMyInstanceDetails());", "originalCommit": "7aeb51ca044abe0a08db6d2a41d2f2aa4696d80b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIzMjIwNw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/366#discussion_r470232207", "bodyText": "Done", "author": "sruti1312", "createdAt": "2020-08-13T20:35:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE3MjA0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "b395eeb887fd34c732476d0bef3abf7d9abd24b7", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/collector/NodeConfigCollector.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/collector/NodeConfigCollector.java\nindex ca4b1731..62d65087 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/collector/NodeConfigCollector.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/collector/NodeConfigCollector.java\n\n@@ -90,9 +90,9 @@ public class NodeConfigCollector extends EsConfigNode {\n   }\n \n   private void collectAndPublishMetric(final Resource resource, final double metricValue) {\n-    final NodeConfigCache nodeConfigCache = getAppContext().getNodeConfigCache();\n-    final NodeKey esNode = new NodeKey(getAppContext().getMyInstanceDetails());\n     if (!Double.isNaN(metricValue)) {\n+      final NodeConfigCache nodeConfigCache = getAppContext().getNodeConfigCache();\n+      final NodeKey esNode = new NodeKey(getAppContext().getMyInstanceDetails());\n       configResult.put(resource, metricValue);\n       nodeConfigCache.put(esNode, resource, metricValue);\n     }\n"}}, {"oid": "b395eeb887fd34c732476d0bef3abf7d9abd24b7", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/b395eeb887fd34c732476d0bef3abf7d9abd24b7", "message": "Address PR comments", "committedDate": "2020-08-13T20:35:06Z", "type": "commit"}]}