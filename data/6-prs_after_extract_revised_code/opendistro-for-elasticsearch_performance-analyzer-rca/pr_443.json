{"pr_number": 443, "pr_title": "Modify HighHeapUsageYoungGenRca to better detect sizing issues", "pr_createdAt": "2020-10-01T23:24:41Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/443", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2ODg1OA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/443#discussion_r499768858", "bodyText": "Please rename to something on the lines of FULL_GC_TIME_THRES_MS.\nIt has a confusing overlap with leader/follower timeouts in ES. Full gc pauses impact multiple things, in addition to failed fd checks. Naming it around what it is used for in the scope of code helps understanding your Rca logic better.", "author": "vigyasharma", "createdAt": "2020-10-05T17:47:38Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/hotheap/HighHeapUsageYoungGenRca.java", "diffHunk": "@@ -53,6 +56,7 @@\n \n   private static final Logger LOG = LogManager.getLogger(HighHeapUsageYoungGenRca.class);\n   private static final int PROMOTION_RATE_SLIDING_WINDOW_IN_MINS = 10;\n+  private static final double FOLLOWER_CHECK_TIMEOUT_MS = 10 * 1_000;", "originalCommit": "a5b8fd82a5a851d7e38459ce2f3024e3e86aa5be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkxMzExMg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/443#discussion_r499913112", "bodyText": "Done", "author": "sidheart", "createdAt": "2020-10-05T22:47:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc2ODg1OA=="}], "type": "inlineReview", "revised_code": {"commit": "423cbda378e1b5a8fead34c77cda8cf94f6d6323", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/hotheap/HighHeapUsageYoungGenRca.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/hotheap/HighHeapUsageYoungGenRca.java\nindex e1b82db1..60ef3e92 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/hotheap/HighHeapUsageYoungGenRca.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/hotheap/HighHeapUsageYoungGenRca.java\n\n@@ -55,8 +55,13 @@ import org.apache.logging.log4j.Logger;\n public class HighHeapUsageYoungGenRca extends Rca<ResourceFlowUnit<HotResourceSummary>> {\n \n   private static final Logger LOG = LogManager.getLogger(HighHeapUsageYoungGenRca.class);\n+  private static final String FULL_GC_TIME_TOO_HIGH = \"fullGcTimeTooHigh\";\n+  private static final String PROMOTION_RATE_TOO_HIGH = \"promotionRateTooHigh\";\n+  private static final String YOUNG_GC_TIME_TOO_HIGH = \"youngGcTimeTooHigh\";\n+  private static final String PREMATURE_PROMOTION_TOO_HIGH = \"prematurePromotionTooHigh\";\n+\n   private static final int PROMOTION_RATE_SLIDING_WINDOW_IN_MINS = 10;\n-  private static final double FOLLOWER_CHECK_TIMEOUT_MS = 10 * 1_000;\n+  private static final double FULL_GC_TIME_THRES_MS = 10 * 1_000;\n   private static final double CONVERT_BYTES_TO_MEGABYTES = Math.pow(1024, 2);\n   private final Metric heap_Used;\n   private final Metric gc_Collection_Time;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgwNjE4Ng==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/443#discussion_r499806186", "bodyText": "Should we add metrics for which of the sub-condition was breached?", "author": "vigyasharma", "createdAt": "2020-10-05T18:57:34Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/hotheap/HighHeapUsageYoungGenRca.java", "diffHunk": "@@ -118,6 +134,103 @@ protected void remove(SlidingWindowData e) {\n     this(rcaPeriod, 1.0, heap_Used, gc_Collection_Time);\n   }\n \n+  private boolean fullGcTimeTooHigh(double avgFullGcTime) {\n+    return (!Double.isNaN(avgFullGcTime) && avgFullGcTime > FOLLOWER_CHECK_TIMEOUT_MS);\n+  }\n+\n+  private boolean promotionRateTooHigh(double avgPromotionRate, double modifier) {\n+    return (!Double.isNaN(avgPromotionRate) && avgPromotionRate > promotionRateThreshold * modifier);\n+  }\n+\n+  private boolean youngGcTimeTooHigh(double avgYoungGCTime) {\n+    return (!Double.isNaN(avgYoungGCTime) && avgYoungGCTime > youngGenGcTimeThreshold);\n+  }\n+\n+  private boolean prematurePromotionTooHigh(double avgGarbagePromoted) {\n+    return (!Double.isNaN(avgGarbagePromoted)\n+        && avgGarbagePromoted <= 1\n+        && avgGarbagePromoted > garbagePromotionPctThreshold);\n+  }\n+\n+  private double getFollowerCheckTimeoutMs() {\n+    return FOLLOWER_CHECK_TIMEOUT_MS;\n+  }\n+\n+  /**\n+   * Creates and returns a ResourceFlowUnit that reflects the health of this RCA\n+   *\n+   * @param avgPromotionRate the average rate of promotion of objects from the young generation to\n+   *                         the old generation in MB/s\n+   * @param avgYoungGCTime the average amount of time spent on GC in ms\n+   * @param avgGarbagePromoted the average amount of objects which were promoted to the old generation\n+   *                           then collected from the old generation shortly after. This is a percentage\n+   *                           from 0.0 to 1.0\n+   * @param avgFullGCTime The average amount of time spend of full GC in ms\n+   * @return A ResourceFlowUnit encapsulating the health of this RCA\n+   */\n+  private ResourceFlowUnit<HotResourceSummary> computeFlowUnit(double avgPromotionRate,\n+                                                               double avgYoungGCTime,\n+                                                               double avgGarbagePromoted,\n+                                                               double avgFullGCTime) {\n+    ResourceContext context = new ResourceContext(State.UNHEALTHY);\n+    HotResourceSummary summary = null;\n+    boolean unhealthy = true;\n+\n+    // Check if the RCA is unhealthy\n+    if (fullGcTimeTooHigh(avgFullGCTime)) {\n+      summary = new HotResourceSummary(FULL_GC_PAUSE_TIME, getFollowerCheckTimeoutMs(), avgFullGCTime,\n+          PROMOTION_RATE_SLIDING_WINDOW_IN_MINS * 60);\n+    } else if (promotionRateTooHigh(avgPromotionRate, this.lowerBoundThreshold)) {\n+      //check to see if the value is above lower bound thres\n+      summary = new HotResourceSummary(YOUNG_GEN_PROMOTION_RATE,\n+          promotionRateThreshold * this.lowerBoundThreshold, avgPromotionRate,\n+          PROMOTION_RATE_SLIDING_WINDOW_IN_MINS * 60);\n+    } else if (youngGcTimeTooHigh(avgYoungGCTime)) {\n+      summary = new HotResourceSummary(MINOR_GC_PAUSE_TIME, youngGenGcTimeThreshold, avgYoungGCTime,\n+          PROMOTION_RATE_SLIDING_WINDOW_IN_MINS * 60);\n+    } else if (prematurePromotionTooHigh(avgGarbagePromoted)) {\n+      summary = new HotResourceSummary(YOUNG_GEN_PROMOTION_RATE, garbagePromotionPctThreshold,\n+          avgGarbagePromoted, PROMOTION_RATE_SLIDING_WINDOW_IN_MINS * 60);\n+    } else {\n+      unhealthy = false;\n+      context = new ResourceContext(State.HEALTHY);\n+    }\n+\n+    if (unhealthy) {\n+      LOG.debug(\"avgPromotionRate = {} , avgGCTime = {}, avgGarbagePromoted = {}, avgFullGcTime = {},\",\n+          avgPromotionRate, avgYoungGCTime, avgGarbagePromoted, avgFullGCTime);\n+      PerformanceAnalyzerApp.RCA_VERTICES_METRICS_AGGREGATOR.updateStat(", "originalCommit": "a5b8fd82a5a851d7e38459ce2f3024e3e86aa5be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkxMzA3MQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/443#discussion_r499913071", "bodyText": "Done", "author": "sidheart", "createdAt": "2020-10-05T22:47:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgwNjE4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "423cbda378e1b5a8fead34c77cda8cf94f6d6323", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/hotheap/HighHeapUsageYoungGenRca.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/hotheap/HighHeapUsageYoungGenRca.java\nindex e1b82db1..60ef3e92 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/hotheap/HighHeapUsageYoungGenRca.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/hotheap/HighHeapUsageYoungGenRca.java\n\n@@ -135,7 +140,7 @@ public class HighHeapUsageYoungGenRca extends Rca<ResourceFlowUnit<HotResourceSu\n   }\n \n   private boolean fullGcTimeTooHigh(double avgFullGcTime) {\n-    return (!Double.isNaN(avgFullGcTime) && avgFullGcTime > FOLLOWER_CHECK_TIMEOUT_MS);\n+    return (!Double.isNaN(avgFullGcTime) && avgFullGcTime > FULL_GC_TIME_THRES_MS);\n   }\n \n   private boolean promotionRateTooHigh(double avgPromotionRate, double modifier) {\n"}}, {"oid": "423cbda378e1b5a8fead34c77cda8cf94f6d6323", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/423cbda378e1b5a8fead34c77cda8cf94f6d6323", "message": "Modify HighHeapUsageYoungGenRca to better detect sizing issues\n\n- Now takes full GC pause time into account when making decisions\n- Takes into account the amount of garbage mistakenly promoted into the\n  old generation", "committedDate": "2020-10-05T22:47:04Z", "type": "forcePushed"}, {"oid": "f440fc538fb795cc2f1e2c32ef5727a8abc0e54f", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/f440fc538fb795cc2f1e2c32ef5727a8abc0e54f", "message": "Modify HighHeapUsageYoungGenRca to better detect sizing issues\n\n- Now takes full GC pause time into account when making decisions\n- Takes into account the amount of garbage mistakenly promoted into the\n  old generation", "committedDate": "2020-10-06T22:02:38Z", "type": "commit"}, {"oid": "f440fc538fb795cc2f1e2c32ef5727a8abc0e54f", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/f440fc538fb795cc2f1e2c32ef5727a8abc0e54f", "message": "Modify HighHeapUsageYoungGenRca to better detect sizing issues\n\n- Now takes full GC pause time into account when making decisions\n- Takes into account the amount of garbage mistakenly promoted into the\n  old generation", "committedDate": "2020-10-06T22:02:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY1OTUxNA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/443#discussion_r500659514", "bodyText": "can multiple metrics be identified as \"too high\" at the same time ? Do we want to add multiple resource summaries into flowunit in that case ?", "author": "rguo-aws", "createdAt": "2020-10-06T23:54:02Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/hotheap/HighHeapUsageYoungGenRca.java", "diffHunk": "@@ -118,6 +139,111 @@ protected void remove(SlidingWindowData e) {\n     this(rcaPeriod, 1.0, heap_Used, gc_Collection_Time);\n   }\n \n+  private boolean fullGcTimeTooHigh(double avgFullGcTime) {\n+    return (!Double.isNaN(avgFullGcTime) && avgFullGcTime > FULL_GC_TIME_THRES_MS);\n+  }\n+\n+  private boolean promotionRateTooHigh(double avgPromotionRate, double modifier) {\n+    return (!Double.isNaN(avgPromotionRate) && avgPromotionRate > promotionRateThreshold * modifier);\n+  }\n+\n+  private boolean youngGcTimeTooHigh(double avgYoungGCTime) {\n+    return (!Double.isNaN(avgYoungGCTime) && avgYoungGCTime > youngGenGcTimeThreshold);\n+  }\n+\n+  private boolean prematurePromotionTooHigh(double avgGarbagePromoted) {\n+    return (!Double.isNaN(avgGarbagePromoted)\n+        && avgGarbagePromoted <= 1\n+        && avgGarbagePromoted > garbagePromotionPctThreshold);\n+  }\n+\n+  private double getFollowerCheckTimeoutMs() {\n+    return FULL_GC_TIME_THRES_MS;\n+  }\n+\n+  /**\n+   * Creates and returns a ResourceFlowUnit that reflects the health of this RCA\n+   *\n+   * @param avgPromotionRate the average rate of promotion of objects from the young generation to\n+   *                         the old generation in MB/s\n+   * @param avgYoungGCTime the average amount of time spent on GC in ms\n+   * @param avgGarbagePromoted the average amount of objects which were promoted to the old generation\n+   *                           then collected from the old generation shortly after. This is a percentage\n+   *                           from 0.0 to 1.0\n+   * @param avgFullGCTime The average amount of time spend of full GC in ms\n+   * @return A ResourceFlowUnit encapsulating the health of this RCA\n+   */\n+  private ResourceFlowUnit<HotResourceSummary> computeFlowUnit(double avgPromotionRate,\n+                                                               double avgYoungGCTime,\n+                                                               double avgGarbagePromoted,\n+                                                               double avgFullGCTime) {\n+    ResourceContext context = new ResourceContext(State.UNHEALTHY);\n+    HotResourceSummary summary = null;\n+    boolean unhealthy = true;\n+\n+    // Check if the RCA is unhealthy\n+    if (fullGcTimeTooHigh(avgFullGCTime)) {\n+      summary = new HotResourceSummary(FULL_GC_PAUSE_TIME, getFollowerCheckTimeoutMs(), avgFullGCTime,", "originalCommit": "f440fc538fb795cc2f1e2c32ef5727a8abc0e54f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIwMDQ4MA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/443#discussion_r501200480", "bodyText": "This is too complex of a change for this diff. Currently FlowUnit contains a Union of various summary types. One way to do this would be to create a new CompoundResourceSummary type that tracks issue counts across various resources with a Map and add that into the FlowUnit union.\nHowever, this is a structural change and I'd like to avoid making it here. As is, I believe this diff evaluates conditions in a reasonable conservative order.", "author": "sidheart", "createdAt": "2020-10-07T17:50:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY1OTUxNA=="}], "type": "inlineReview", "revised_code": {"commit": "eeb9fb4be7968e82632aa47d417d5e7ebb50dfe8", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/hotheap/HighHeapUsageYoungGenRca.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/hotheap/HighHeapUsageYoungGenRca.java\nindex 60ef3e92..4391acdc 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/hotheap/HighHeapUsageYoungGenRca.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/hotheap/HighHeapUsageYoungGenRca.java\n\n@@ -135,8 +138,8 @@ public class HighHeapUsageYoungGenRca extends Rca<ResourceFlowUnit<HotResourceSu\n   }\n \n   public <M extends Metric> HighHeapUsageYoungGenRca(final int rcaPeriod,\n-      final M heap_Used, final M gc_Collection_Time) {\n-    this(rcaPeriod, 1.0, heap_Used, gc_Collection_Time);\n+      final M heap_Used, final M gc_Collection_Time, final M gc_Collection_Event) {\n+    this(rcaPeriod, 1.0, heap_Used, gc_Collection_Time, gc_Collection_Event);\n   }\n \n   private boolean fullGcTimeTooHigh(double avgFullGcTime) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2MTUzNQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/443#discussion_r500661535", "bodyText": "I suggest that we should also check if full GC count > 0 in the last 5 sec time interval", "author": "rguo-aws", "createdAt": "2020-10-07T00:00:23Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/hotheap/HighHeapUsageYoungGenRca.java", "diffHunk": "@@ -118,6 +139,111 @@ protected void remove(SlidingWindowData e) {\n     this(rcaPeriod, 1.0, heap_Used, gc_Collection_Time);\n   }\n \n+  private boolean fullGcTimeTooHigh(double avgFullGcTime) {\n+    return (!Double.isNaN(avgFullGcTime) && avgFullGcTime > FULL_GC_TIME_THRES_MS);\n+  }\n+\n+  private boolean promotionRateTooHigh(double avgPromotionRate, double modifier) {\n+    return (!Double.isNaN(avgPromotionRate) && avgPromotionRate > promotionRateThreshold * modifier);\n+  }\n+\n+  private boolean youngGcTimeTooHigh(double avgYoungGCTime) {\n+    return (!Double.isNaN(avgYoungGCTime) && avgYoungGCTime > youngGenGcTimeThreshold);\n+  }\n+\n+  private boolean prematurePromotionTooHigh(double avgGarbagePromoted) {\n+    return (!Double.isNaN(avgGarbagePromoted)\n+        && avgGarbagePromoted <= 1\n+        && avgGarbagePromoted > garbagePromotionPctThreshold);\n+  }\n+\n+  private double getFollowerCheckTimeoutMs() {\n+    return FULL_GC_TIME_THRES_MS;\n+  }\n+\n+  /**\n+   * Creates and returns a ResourceFlowUnit that reflects the health of this RCA\n+   *\n+   * @param avgPromotionRate the average rate of promotion of objects from the young generation to\n+   *                         the old generation in MB/s\n+   * @param avgYoungGCTime the average amount of time spent on GC in ms\n+   * @param avgGarbagePromoted the average amount of objects which were promoted to the old generation\n+   *                           then collected from the old generation shortly after. This is a percentage\n+   *                           from 0.0 to 1.0\n+   * @param avgFullGCTime The average amount of time spend of full GC in ms\n+   * @return A ResourceFlowUnit encapsulating the health of this RCA\n+   */\n+  private ResourceFlowUnit<HotResourceSummary> computeFlowUnit(double avgPromotionRate,\n+                                                               double avgYoungGCTime,\n+                                                               double avgGarbagePromoted,\n+                                                               double avgFullGCTime) {\n+    ResourceContext context = new ResourceContext(State.UNHEALTHY);\n+    HotResourceSummary summary = null;\n+    boolean unhealthy = true;\n+\n+    // Check if the RCA is unhealthy\n+    if (fullGcTimeTooHigh(avgFullGCTime)) {\n+      summary = new HotResourceSummary(FULL_GC_PAUSE_TIME, getFollowerCheckTimeoutMs(), avgFullGCTime,\n+          PROMOTION_RATE_SLIDING_WINDOW_IN_MINS * 60);\n+      PerformanceAnalyzerApp.RCA_VERTICES_METRICS_AGGREGATOR.updateStat(\n+          RcaVerticesMetrics.YOUNG_GEN_RCA_NAMED_COUNT, FULL_GC_TIME_TOO_HIGH, 1);\n+    } else if (promotionRateTooHigh(avgPromotionRate, this.lowerBoundThreshold)) {\n+      //check to see if the value is above lower bound thres\n+      summary = new HotResourceSummary(YOUNG_GEN_PROMOTION_RATE,\n+          promotionRateThreshold * this.lowerBoundThreshold, avgPromotionRate,\n+          PROMOTION_RATE_SLIDING_WINDOW_IN_MINS * 60);\n+      PerformanceAnalyzerApp.RCA_VERTICES_METRICS_AGGREGATOR.updateStat(\n+          RcaVerticesMetrics.YOUNG_GEN_RCA_NAMED_COUNT, PROMOTION_RATE_TOO_HIGH, 1);\n+    } else if (youngGcTimeTooHigh(avgYoungGCTime)) {\n+      summary = new HotResourceSummary(MINOR_GC_PAUSE_TIME, youngGenGcTimeThreshold, avgYoungGCTime,\n+          PROMOTION_RATE_SLIDING_WINDOW_IN_MINS * 60);\n+      PerformanceAnalyzerApp.RCA_VERTICES_METRICS_AGGREGATOR.updateStat(\n+          RcaVerticesMetrics.YOUNG_GEN_RCA_NAMED_COUNT, YOUNG_GC_TIME_TOO_HIGH, 1);\n+    } else if (prematurePromotionTooHigh(avgGarbagePromoted)) {\n+      summary = new HotResourceSummary(YOUNG_GEN_PROMOTION_RATE, garbagePromotionPctThreshold,\n+          avgGarbagePromoted, PROMOTION_RATE_SLIDING_WINDOW_IN_MINS * 60);\n+      PerformanceAnalyzerApp.RCA_VERTICES_METRICS_AGGREGATOR.updateStat(\n+          RcaVerticesMetrics.YOUNG_GEN_RCA_NAMED_COUNT, PREMATURE_PROMOTION_TOO_HIGH, 1);\n+    } else {\n+      unhealthy = false;\n+      context = new ResourceContext(State.HEALTHY);\n+    }\n+\n+    if (unhealthy) {\n+      LOG.debug(\"avgPromotionRate = {} , avgGCTime = {}, avgGarbagePromoted = {}, avgFullGcTime = {},\",\n+          avgPromotionRate, avgYoungGCTime, avgGarbagePromoted, avgFullGCTime);\n+      PerformanceAnalyzerApp.RCA_VERTICES_METRICS_AGGREGATOR.updateStat(\n+          RcaVerticesMetrics.NUM_YOUNG_GEN_RCA_TRIGGERED, \"\", 1);\n+    }\n+\n+    return new ResourceFlowUnit<>(this.clock.millis(), context, summary);\n+  }\n+\n+  /**\n+   * computes the amount of data promoted and reclaimed by the garbage collector\n+   * @param currOldGen the current occupancy of the old generation in bytes\n+   * @param currTimeStamp the current timestamp in UNIX epoch milliseconds\n+   */\n+  private void computePromotionHealth(double currOldGen, long currTimeStamp) {\n+    if (currOldGen > maxOldGen) {\n+      maxOldGen = currOldGen;\n+    }\n+    double promoted = currOldGen - prevOldGen;\n+    if (promoted >= 0) {", "originalCommit": "f440fc538fb795cc2f1e2c32ef5727a8abc0e54f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTIwMDUxNA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/443#discussion_r501200514", "bodyText": "Checked in the else case in the upcoming PR", "author": "sidheart", "createdAt": "2020-10-07T17:50:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2MTUzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "eeb9fb4be7968e82632aa47d417d5e7ebb50dfe8", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/hotheap/HighHeapUsageYoungGenRca.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/hotheap/HighHeapUsageYoungGenRca.java\nindex 60ef3e92..4391acdc 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/hotheap/HighHeapUsageYoungGenRca.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/hotheap/HighHeapUsageYoungGenRca.java\n\n@@ -135,8 +138,8 @@ public class HighHeapUsageYoungGenRca extends Rca<ResourceFlowUnit<HotResourceSu\n   }\n \n   public <M extends Metric> HighHeapUsageYoungGenRca(final int rcaPeriod,\n-      final M heap_Used, final M gc_Collection_Time) {\n-    this(rcaPeriod, 1.0, heap_Used, gc_Collection_Time);\n+      final M heap_Used, final M gc_Collection_Time, final M gc_Collection_Event) {\n+    this(rcaPeriod, 1.0, heap_Used, gc_Collection_Time, gc_Collection_Event);\n   }\n \n   private boolean fullGcTimeTooHigh(double avgFullGcTime) {\n"}}, {"oid": "eeb9fb4be7968e82632aa47d417d5e7ebb50dfe8", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/eeb9fb4be7968e82632aa47d417d5e7ebb50dfe8", "message": "Consider full GC events in the YoungGenRca\n\nWe used to conclude that if the old gen heap increased between\nobservations, then it meant that a full GC event occurred.\n\nWe now explicitly check if a full GC event occurred using metrics.", "committedDate": "2020-10-07T17:26:25Z", "type": "commit"}]}