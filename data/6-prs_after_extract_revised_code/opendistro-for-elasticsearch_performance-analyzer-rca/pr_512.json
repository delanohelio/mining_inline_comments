{"pr_number": 512, "pr_title": "Enable temperature profile", "pr_createdAt": "2020-11-10T01:55:54Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/512", "timeline": [{"oid": "4f6ba05cc8a3adcb9c7e851d91871feead3ba587", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/4f6ba05cc8a3adcb9c7e851d91871feead3ba587", "message": "Fixing UTs", "committedDate": "2020-11-10T21:09:31Z", "type": "forcePushed"}, {"oid": "50ee030d20355810033fc25dfc1c764b1d79e21b", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/50ee030d20355810033fc25dfc1c764b1d79e21b", "message": "Enabling Temperature Profile", "committedDate": "2020-11-12T04:31:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMyNTQ1Mw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/512#discussion_r526325453", "bodyText": "Awesome ! great comment", "author": "yojs", "createdAt": "2020-11-18T18:28:34Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/NodeLevelDimensionalSummary.java", "diffHunk": "@@ -60,6 +62,14 @@\n     private final NodeLevelZoneSummary[] zoneProfiles;\n     private int numberOfShards;\n \n+    // Mean Temperature is a mean of the normalized heat of the resource used across shards on the node.\n+    // e.g. if there are 10 shards on the node and the normalized sum of the resource used", "originalCommit": "3c1ce26c9bc6970c8577e9e9396fb29e385e5d89", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0f55bce8f9724b2c7b917ec62b2bf826db2c7d08", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/NodeLevelDimensionalSummary.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/NodeLevelDimensionalSummary.java\nindex 95bf2062..85a55fdd 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/NodeLevelDimensionalSummary.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/NodeLevelDimensionalSummary.java\n\n@@ -62,14 +60,6 @@ public class NodeLevelDimensionalSummary extends GenericSummary {\n     private final NodeLevelZoneSummary[] zoneProfiles;\n     private int numberOfShards;\n \n-    // Mean Temperature is a mean of the normalized heat of the resource used across shards on the node.\n-    // e.g. if there are 10 shards on the node and the normalized sum of the resource used\n-    // across shards is 33. The mean would be 3.3\n-    // This aim is the balance this parameter across the nodes and have as little delta\n-    // as possible across nodes.\n-    // TotalUsage is the total value of the resource used in that node.\n-    // Note that normalized(totalUsage) != meanTemperature*numberofshards as total usage\n-    // also has shard Independent component.\n     public NodeLevelDimensionalSummary(final TemperatureDimension profileForDimension,\n                                        final TemperatureVector.NormalizedValue meanTemperature,\n                                        double totalUsage) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMyNTY1MQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/512#discussion_r526325651", "bodyText": "typo: this -> the ?", "author": "yojs", "createdAt": "2020-11-18T18:28:56Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/NodeLevelDimensionalSummary.java", "diffHunk": "@@ -60,6 +62,14 @@\n     private final NodeLevelZoneSummary[] zoneProfiles;\n     private int numberOfShards;\n \n+    // Mean Temperature is a mean of the normalized heat of the resource used across shards on the node.\n+    // e.g. if there are 10 shards on the node and the normalized sum of the resource used\n+    // across shards is 33. The mean would be 3.3\n+    // This aim is the balance this parameter across the nodes and have as little delta", "originalCommit": "3c1ce26c9bc6970c8577e9e9396fb29e385e5d89", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0f55bce8f9724b2c7b917ec62b2bf826db2c7d08", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/NodeLevelDimensionalSummary.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/NodeLevelDimensionalSummary.java\nindex 95bf2062..85a55fdd 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/NodeLevelDimensionalSummary.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/NodeLevelDimensionalSummary.java\n\n@@ -62,14 +60,6 @@ public class NodeLevelDimensionalSummary extends GenericSummary {\n     private final NodeLevelZoneSummary[] zoneProfiles;\n     private int numberOfShards;\n \n-    // Mean Temperature is a mean of the normalized heat of the resource used across shards on the node.\n-    // e.g. if there are 10 shards on the node and the normalized sum of the resource used\n-    // across shards is 33. The mean would be 3.3\n-    // This aim is the balance this parameter across the nodes and have as little delta\n-    // as possible across nodes.\n-    // TotalUsage is the total value of the resource used in that node.\n-    // Note that normalized(totalUsage) != meanTemperature*numberofshards as total usage\n-    // also has shard Independent component.\n     public NodeLevelDimensionalSummary(final TemperatureDimension profileForDimension,\n                                        final TemperatureVector.NormalizedValue meanTemperature,\n                                        double totalUsage) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMyNjUwMg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/512#discussion_r526326502", "bodyText": "This is a good change. Thanks a lot", "author": "yojs", "createdAt": "2020-11-18T18:30:11Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/core/temperature/ShardStore.java", "diffHunk": "@@ -32,44 +31,26 @@\n     private static final Logger LOG = LogManager.getLogger(ShardStore.class);\n \n     /**\n-     * The key for the outer map is indexName. The key for inner map is the ShardID. Given an\n-     * indexName and shardId, a shard can be uniquely identified.\n-     *\n-     * <p>TODO: Try replace with 'IndexShardKey' after\n-     * https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/141\n-     * is merged.\n+     * The key for the map is indexShardKey Given an IndexShardKey a shard can be uniquely identified.\n      */\n-    Map<String, Map<Integer, ShardProfileSummary>> list;\n+    Map<IndexShardKey, ShardProfileSummary> shardToShardProfileMap;", "originalCommit": "3c1ce26c9bc6970c8577e9e9396fb29e385e5d89", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0f55bce8f9724b2c7b917ec62b2bf826db2c7d08", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/core/temperature/ShardStore.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/core/temperature/ShardStore.java\nindex c05a4c57..8ffd5d57 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/core/temperature/ShardStore.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/core/temperature/ShardStore.java\n\n@@ -31,26 +32,44 @@ public class ShardStore {\n     private static final Logger LOG = LogManager.getLogger(ShardStore.class);\n \n     /**\n-     * The key for the map is indexShardKey Given an IndexShardKey a shard can be uniquely identified.\n+     * The key for the outer map is indexName. The key for inner map is the ShardID. Given an\n+     * indexName and shardId, a shard can be uniquely identified.\n+     *\n+     * <p>TODO: Try replace with 'IndexShardKey' after\n+     * https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/141\n+     * is merged.\n      */\n-    Map<IndexShardKey, ShardProfileSummary> shardToShardProfileMap;\n+    Map<String, Map<Integer, ShardProfileSummary>> list;\n \n     public ShardStore() {\n         // ShardStore is modified by all the RcaGraph nodes that calculate temperature along a\n         // dimension. As these nodes are in the same level of the RCA DAG, different threads can\n         // execute them and hence we need this map to be synchronized.\n-        shardToShardProfileMap = new ConcurrentHashMap<>();\n+        list = new ConcurrentHashMap<>();\n     }\n \n     @Nonnull\n-    public synchronized ShardProfileSummary getOrCreateIfAbsent(IndexShardKey indexShardKey) {\n-        ShardProfileSummary shardProfileSummary = shardToShardProfileMap.get(indexShardKey);\n+    public synchronized ShardProfileSummary getOrCreateIfAbsent(String indexName, int shardId) {\n+        Map<Integer, ShardProfileSummary> innerMap = list.get(indexName);\n+        if (innerMap == null) {\n+            // No element with the index name exists; create one.\n+            innerMap = new ConcurrentHashMap<>();\n+            list.put(indexName, innerMap);\n+        }\n+        ShardProfileSummary shardProfileSummary = innerMap.get(shardId);\n         if (shardProfileSummary == null) {\n-            // Could not find a shard with the given IndexShardKey; create one.\n-            shardProfileSummary = new ShardProfileSummary(indexShardKey.getIndexName(), indexShardKey.getShardId());\n-            shardToShardProfileMap.put(indexShardKey, shardProfileSummary);\n+            // Could not find a shard with the given indexname and shardId; create one.\n+            shardProfileSummary = new ShardProfileSummary(indexName, shardId);\n+            innerMap.put(shardId, shardProfileSummary);\n         }\n         return shardProfileSummary;\n     }\n \n+    public List<ShardProfileSummary> getAllShards() {\n+        List<ShardProfileSummary> shardProfileSummaryList = new ArrayList<>();\n+        for (Map<Integer, ShardProfileSummary> shardIdToShardMap : list.values()) {\n+            shardProfileSummaryList.addAll(shardIdToShardMap.values());\n+        }\n+        return shardProfileSummaryList;\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMyNzA0NQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/512#discussion_r526327045", "bodyText": "Let's use the new Object persisting mechanism", "author": "yojs", "createdAt": "2020-11-18T18:31:02Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "diffHunk": "@@ -915,13 +915,11 @@ private synchronized JsonElement readTemperatureProfileRca(String rca) {\n       // made from a data node, it returns a 400 saying it can only be queried from the elected\n       // master.\n       if (rca.equals(ClusterTemperatureRca.TABLE_NAME)) {\n-        Field<Integer> foreignKeyField = DSL.field(\n-            SQLiteQueryUtils.getPrimaryKeyColumnName(ResourceFlowUnit.RCA_TABLE_NAME),\n-            Integer.class);\n-        SelectJoinStep<Record> query = SQLiteQueryUtils\n-            .buildSummaryQuery(create, ClusterTemperatureSummary.TABLE_NAME,\n-                mostRecentRecord.get(primaryKeyField),\n-                foreignKeyField);\n+        SelectJoinStep<Record> query = SQLiteQueryUtils.buildSummaryQuery(\n+            create,\n+            ClusterTemperatureSummary.TABLE_NAME,\n+            mostRecentRecord.get(primaryKeyField),\n+            primaryKeyField);", "originalCommit": "3c1ce26c9bc6970c8577e9e9396fb29e385e5d89", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzMyNzc3Mw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/512#discussion_r573327773", "bodyText": "@yojs  : Can you add more details here? Let's create a separate Issue and work on it given this PR is old. @yujias0706", "author": "khushbr", "createdAt": "2021-02-09T23:33:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMyNzA0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzM0MDUzNg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/512#discussion_r573340536", "bodyText": "Created issue: #559", "author": "yujias0706", "createdAt": "2021-02-10T00:02:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMyNzA0NQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "0f55bce8f9724b2c7b917ec62b2bf826db2c7d08", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/0f55bce8f9724b2c7b917ec62b2bf826db2c7d08", "message": "Enabling Temperature Profile", "committedDate": "2021-02-09T19:38:15Z", "type": "commit"}, {"oid": "59dc62d9f027bc0a403221aab75b42b0c57fc17d", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/59dc62d9f027bc0a403221aab75b42b0c57fc17d", "message": "Adding Comments", "committedDate": "2021-02-09T19:38:16Z", "type": "commit"}, {"oid": "e5f1f98bc20ca6cede60ddc85b757364e63a1b3a", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/e5f1f98bc20ca6cede60ddc85b757364e63a1b3a", "message": "CheckStyle", "committedDate": "2021-02-09T19:38:16Z", "type": "commit"}, {"oid": "3208dfd9672e4215dd715af2f410def9eba21ff8", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/3208dfd9672e4215dd715af2f410def9eba21ff8", "message": "Muting Cluster Temperature RCA", "committedDate": "2021-02-09T19:38:16Z", "type": "commit"}, {"oid": "1d9c1b98ba380fdcbc4319e16b643ac9c009e4d7", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/1d9c1b98ba380fdcbc4319e16b643ac9c009e4d7", "message": "Updating the Confs", "committedDate": "2021-02-09T19:38:16Z", "type": "commit"}, {"oid": "7f4e07627c2d3d68df1937154e584f0001007e8d", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/7f4e07627c2d3d68df1937154e584f0001007e8d", "message": "Adding Comments and Enabling Cluster Temperature RCA", "committedDate": "2021-02-09T19:38:16Z", "type": "commit"}, {"oid": "0fe14dba880ad648c5be83c8ba6161f813f551fb", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/0fe14dba880ad648c5be83c8ba6161f813f551fb", "message": "Disabling Cluster Temperature Profile & Enabling Node Temperature Profile", "committedDate": "2021-02-09T19:38:16Z", "type": "commit"}, {"oid": "0fe14dba880ad648c5be83c8ba6161f813f551fb", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/0fe14dba880ad648c5be83c8ba6161f813f551fb", "message": "Disabling Cluster Temperature Profile & Enabling Node Temperature Profile", "committedDate": "2021-02-09T19:38:16Z", "type": "forcePushed"}]}