{"pr_number": 215, "pr_title": "Accessing the local temperature profile from the data nodes", "pr_createdAt": "2020-05-29T01:13:40Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/215", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0NDM4Ng==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/215#discussion_r432644386", "bodyText": "indent is incorrect in this file", "author": "rguo-aws", "createdAt": "2020-05-29T17:50:23Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "diffHunk": "@@ -52,230 +54,311 @@\n import org.jooq.impl.DSL;\n \n class SQLitePersistor extends PersistorBase {\n-  private static final String DB_URL = \"jdbc:sqlite:\";\n-  private DSLContext create;\n-  private Map<String, List<Field<?>>> jooqTableColumns;\n-  private static final Logger LOG = LogManager.getLogger(SQLitePersistor.class);\n-  private static final String LAST_INSERT_ROWID = \"last_insert_rowid()\";\n-  private static final String PRIMARY_KEY_AUTOINCREMENT_POSTFIX = \" INTEGER PRIMARY KEY AUTOINCREMENT\";\n+    private static final String DB_URL = \"jdbc:sqlite:\";", "originalCommit": "e4febf3400096e0ec06766cf59adb9c42016f690", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY2MDE0Mw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/215#discussion_r432660143", "bodyText": "+1, would be good to fix the indent and update the PR to make it easy to read the diff", "author": "khushbr", "createdAt": "2020-05-29T18:21:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0NDM4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "39e8a8eb15a6b5b274375850fcfea228061a1d13", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java\nindex d060b24d..b8ffaa82 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java\n\n@@ -186,7 +186,7 @@ class SQLitePersistor extends PersistorBase {\n         JsonArray nodeDimensionalSummary = null;\n         String summaryName = NodeLevelDimensionalSummary.SUMMARY_TABLE_NAME;\n \n-        // We sue the JsonObject returned as part of the first dimension as the template and then\n+        // We use the JsonObject returned as part of the first dimension as the template and then\n         // for each subsequent dimension, we extend the json Array we have from the first dimension.\n         for (String dimension : SQLiteQueryUtils.temperatureProfileDimensionRCASet) {\n             if (rcaResponseJson == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0NTE4Nw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/215#discussion_r432645187", "bodyText": "we are changing this at the same time. I think we can reuse what is already there. Let's discuss this offline", "author": "rguo-aws", "createdAt": "2020-05-29T17:51:59Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/SQLiteQueryUtils.java", "diffHunk": "@@ -40,21 +42,12 @@\n  * A utility class to query cluster, node and resource level summary for a rca\n  */\n public class SQLiteQueryUtils {\n-  private static final Map<String, String> temperatureProfileNestedSummaryMap;\n   private static final Set<String> clusterLevelRCA;\n   private static final Set<String> temperatureProfileRCASet;\n \n-  static {", "originalCommit": "e4febf3400096e0ec06766cf59adb9c42016f690", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba1c77ad012d4b984388840e6e4be720092e157a", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/SQLiteQueryUtils.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/SQLiteQueryUtils.java\nindex 57922770..f2c07be5 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/SQLiteQueryUtils.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/SQLiteQueryUtils.java\n\n@@ -42,12 +41,21 @@ import org.jooq.impl.DSL;\n  * A utility class to query cluster, node and resource level summary for a rca\n  */\n public class SQLiteQueryUtils {\n+  private static final Map<String, String> temperatureProfileNestedSummaryMap;\n   private static final Set<String> clusterLevelRCA;\n   private static final Set<String> temperatureProfileRCASet;\n \n-  public static final Set<String> temperatureProfileDimensionRCASet;\n-\n-  public static final String ALL_TEMPERATURE_DIMENSIONS = \"AllTemperatureDimensions\";\n+  static {\n+    Map<String, String> temperatureSummaryMap = new HashMap<>();\n+    temperatureSummaryMap.put(ResourceFlowUnit.RCA_TABLE_NAME,\n+        NodeLevelDimensionalSummary.SUMMARY_TABLE_NAME);\n+    temperatureSummaryMap.put(NodeLevelDimensionalSummary.SUMMARY_TABLE_NAME,\n+        NodeLevelDimensionalSummary.ZONE_SUMMARY_TABLE_NAME);\n+    temperatureSummaryMap.put(NodeLevelDimensionalSummary.ZONE_SUMMARY_TABLE_NAME,\n+        ShardProfileSummary.SUMMARY_TABLE_NAME);\n+\n+    temperatureProfileNestedSummaryMap = Collections.unmodifiableMap(temperatureSummaryMap);\n+  }\n \n   // RCAs that can be queried by RCA API\n   // currently we can only query from the cluster level RCAs\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY2MjY1MA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/215#discussion_r432662650", "bodyText": "A metric here would also be helpful.", "author": "khushbr", "createdAt": "2020-05-29T18:27:09Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/pyrometer/Api.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.pyrometer;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.temperature.CompactNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.temperature.ShardProfileSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.temperature.HeatZoneAssigner;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.temperature.TemperatureVector;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * Although Pyrometer exists on all the nodes - data and master but the APIs are only accessible\n+ * from the master nodes. Pyrometer is able answer queries such as:\n+ * - All nodes by in Zone <i>Z</i> by dimension <i>D</i> order by <i>Temperature</i> in\n+ * descending order.\n+ * - The top <i>K</i> warm shards on the hottest nodes by dimension D over a period of h hours\n+ * -\n+ */\n+public class Api {\n+    enum Count {\n+        /**\n+         * This is to ask the API to return all the contenders.\n+         */\n+        ALL,\n+\n+        /**\n+         * This is to return the top K contenders\n+         */\n+        TOP_K\n+    }\n+\n+    enum SortOrder {\n+        ASCENDING,\n+        DESCENDING;\n+    }\n+\n+    /**\n+     * Api class should be called only from elected master node.\n+     *\n+     * @return true if elected master or false otherwise.\n+     */\n+    private static boolean checkIfElectedMaster() {\n+        return true;\n+    }\n+\n+    private static void failIfNotElectedMaster(String apiName) {\n+        if (!checkIfElectedMaster()) {\n+            StringBuilder builder = new StringBuilder();\n+            builder.append(\"Api (\").append(apiName).append(\") can only be called from the elected\"\n+                    + \" master node.\");\n+\n+            throw new IllegalStateException(builder.toString());\n+        }\n+    }\n+\n+    /**\n+     * A cluster is considered imbalanced along a dimension if the temperature of the hottest\n+     * node and the coldest node are too far apart. How far is too far, is something to be\n+     * evaluated.\n+     *\n+     * @param dimension The dimension to consider.\n+     * @return The difference in temperature of the\n+     */\n+    public static boolean isClusterImbalanceAlongDimension(TemperatureVector.Dimension dimension) {\n+        failIfNotElectedMaster(\"getClusterImbalanceAlongDimension\");\n+        // TODO: Calculate this", "originalCommit": "e4febf3400096e0ec06766cf59adb9c42016f690", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY4NTE5Mg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/215#discussion_r432685192", "bodyText": "These are just placeholder methods that can be called by the component dependent on them. We can talk about metrics when we implement them.", "author": "yojs", "createdAt": "2020-05-29T19:15:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY2MjY1MA=="}], "type": "inlineReview", "revised_code": {"commit": "39e8a8eb15a6b5b274375850fcfea228061a1d13", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/pyrometer/Api.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/pyrometer/Api.java\nindex 71d55c15..f69b268c 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/pyrometer/Api.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/pyrometer/Api.java\n\n@@ -25,6 +25,8 @@ import java.util.List;\n import java.util.Map;\n import javax.annotation.Nonnull;\n \n+// TODO: This is just a placeholder. The methods are not implemented.\n+\n /**\n  * Although Pyrometer exists on all the nodes - data and master but the APIs are only accessible\n  * from the master nodes. Pyrometer is able answer queries such as:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY2NzA2Ng==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/215#discussion_r432667066", "bodyText": "I am assuming this is a WIP since we are only asserting the master criterion and returning an empty arraylist here.\nI think it would be good to make description of the PR more verbose to indicate this includes WIP items and what they are.", "author": "khushbr", "createdAt": "2020-05-29T18:36:25Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/pyrometer/Api.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.pyrometer;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.temperature.CompactNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.temperature.ShardProfileSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.temperature.HeatZoneAssigner;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.temperature.TemperatureVector;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.annotation.Nonnull;\n+\n+/**\n+ * Although Pyrometer exists on all the nodes - data and master but the APIs are only accessible\n+ * from the master nodes. Pyrometer is able answer queries such as:\n+ * - All nodes by in Zone <i>Z</i> by dimension <i>D</i> order by <i>Temperature</i> in\n+ * descending order.\n+ * - The top <i>K</i> warm shards on the hottest nodes by dimension D over a period of h hours\n+ * -\n+ */\n+public class Api {\n+    enum Count {\n+        /**\n+         * This is to ask the API to return all the contenders.\n+         */\n+        ALL,\n+\n+        /**\n+         * This is to return the top K contenders\n+         */\n+        TOP_K\n+    }\n+\n+    enum SortOrder {\n+        ASCENDING,\n+        DESCENDING;\n+    }\n+\n+    /**\n+     * Api class should be called only from elected master node.\n+     *\n+     * @return true if elected master or false otherwise.\n+     */\n+    private static boolean checkIfElectedMaster() {\n+        return true;\n+    }\n+\n+    private static void failIfNotElectedMaster(String apiName) {\n+        if (!checkIfElectedMaster()) {\n+            StringBuilder builder = new StringBuilder();\n+            builder.append(\"Api (\").append(apiName).append(\") can only be called from the elected\"\n+                    + \" master node.\");\n+\n+            throw new IllegalStateException(builder.toString());\n+        }\n+    }\n+\n+    /**\n+     * A cluster is considered imbalanced along a dimension if the temperature of the hottest\n+     * node and the coldest node are too far apart. How far is too far, is something to be\n+     * evaluated.\n+     *\n+     * @param dimension The dimension to consider.\n+     * @return The difference in temperature of the\n+     */\n+    public static boolean isClusterImbalanceAlongDimension(TemperatureVector.Dimension dimension) {\n+        failIfNotElectedMaster(\"getClusterImbalanceAlongDimension\");\n+        // TODO: Calculate this\n+        return true;\n+    }\n+\n+\n+    /**\n+     * To get the list of all the nodes in the cluster order.\n+     *\n+     * @param dimension Temperature along this dimension will be considered to sort the nodes\n+     * @param zone      Only the nodes in this zone will be reported.\n+     * @param count     How many nodes to return in the result.\n+     * @param order     Will the nodes be sorted in the increasing order or decreasing order.\n+     * @return An ordered list of nodes.\n+     */\n+    public static @Nonnull\n+    List<CompactNodeSummary> getNodesForGivenZone(final TemperatureVector.Dimension dimension,\n+                                                  final HeatZoneAssigner.Zone zone,\n+                                                  final Count count,\n+                                                  final SortOrder order) {\n+        failIfNotElectedMaster(\"getNodes\");\n+        return new ArrayList<>();", "originalCommit": "e4febf3400096e0ec06766cf59adb9c42016f690", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "39e8a8eb15a6b5b274375850fcfea228061a1d13", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/pyrometer/Api.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/pyrometer/Api.java\nindex 71d55c15..f69b268c 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/pyrometer/Api.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/pyrometer/Api.java\n\n@@ -25,6 +25,8 @@ import java.util.List;\n import java.util.Map;\n import javax.annotation.Nonnull;\n \n+// TODO: This is just a placeholder. The methods are not implemented.\n+\n /**\n  * Although Pyrometer exists on all the nodes - data and master but the APIs are only accessible\n  * from the master nodes. Pyrometer is able answer queries such as:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY3NzQ5MQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/215#discussion_r432677491", "bodyText": "Given this code goes into AES as well, should we consider moving them to a README for ODFE and AES respectively ?", "author": "khushbr", "createdAt": "2020-05-29T18:58:20Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rest/QueryRcaRequestHandler.java", "diffHunk": "@@ -48,6 +48,42 @@\n  *\n  *  <p>To get response for a specific RCA, use:\n  *  curl --url \"localhost:9650/_opendistro/_performanceanalyzer/rca?name=HighHeapUsageClusterRca\" -XGET\n+ *\n+ *  <p>For temperature profiles, one can get the local node temperature using a request url as:\n+ *  curl \"localhost:9600/_opendistro/_performanceanalyzer/rca?name=NodeTemperatureRca&local=true\"\n+ *\n+ * <p>The cluster level RCA can only be queried from the elected master using this rest API:", "originalCommit": "e4febf3400096e0ec06766cf59adb9c42016f690", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba1c77ad012d4b984388840e6e4be720092e157a", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rest/QueryRcaRequestHandler.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rest/QueryRcaRequestHandler.java\nindex 21adc785..b31ad5ca 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rest/QueryRcaRequestHandler.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rest/QueryRcaRequestHandler.java\n\n@@ -48,42 +48,6 @@ import org.apache.logging.log4j.util.Supplier;\n  *\n  *  <p>To get response for a specific RCA, use:\n  *  curl --url \"localhost:9650/_opendistro/_performanceanalyzer/rca?name=HighHeapUsageClusterRca\" -XGET\n- *\n- *  <p>For temperature profiles, one can get the local node temperature using a request url as:\n- *  curl \"localhost:9600/_opendistro/_performanceanalyzer/rca?name=NodeTemperatureRca&local=true\"\n- *\n- * <p>The cluster level RCA can only be queried from the elected master using this rest API:\n- * curl \"localhost:9600/_opendistro/_performanceanalyzer/rca?name=ClusterTemperatureRca\"\n- *\n- *\n- * <p>curl \"localhost:9600/_opendistro/_performanceanalyzer/rca?name=NodeTemperatureRca&local=true\"|jq\n- * {\n- *   \"NodeTemperatureRca\": [\n- *     {\n- *       \"rca_name\": \"NodeTemperatureRca\",\n- *       \"timestamp\": 1589592178829,\n- *       \"state\": \"unknown\",\n- *       \"CompactNodeSummary\": [\n- *         {\n- *           \"node_id\": \"v9_TNhEeSP2Q3DJO8fd6BA\",\n- *           \"host_address\": \"172.17.0.2\",\n- *           \"CPU_Utilization_mean\": 0,\n- *           \"CPU_Utilization_total\": 0.0310837676896351,\n- *           \"CPU_Utilization_num_shards\": 2,\n- *           \"Heap_AllocRate_mean\": 0,\n- *           \"Heap_AllocRate_total\": 4021355.87442904,\n- *           \"Heap_AllocRate_num_shards\": 2,\n- *           \"IO_READ_SYSCALL_RATE_mean\": 0,\n- *           \"IO_READ_SYSCALL_RATE_total\": 0,\n- *           \"IO_READ_SYSCALL_RATE_num_shards\": 0,\n- *           \"IO_WriteSyscallRate_mean\": 0,\n- *           \"IO_WriteSyscallRate_total\": 0,\n- *           \"IO_WriteSyscallRate_num_shards\": 0\n- *         }\n- *       ]\n- *     }\n- *   ]\n- * }\n  */\n public class QueryRcaRequestHandler extends MetricsHandler implements HttpHandler {\n \n"}}, {"oid": "39e8a8eb15a6b5b274375850fcfea228061a1d13", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/39e8a8eb15a6b5b274375850fcfea228061a1d13", "message": "Addressing the GH comments", "committedDate": "2020-05-29T22:04:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc4MzExMg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/215#discussion_r432783112", "bodyText": "indentation seems to be off here", "author": "rguo-aws", "createdAt": "2020-05-29T23:38:32Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/ShardProfileSummary.java", "diffHunk": "@@ -29,8 +28,12 @@\n \n public class ShardProfileSummary extends GenericSummary {\n \n-  public static final String SUMMARY_TABLE_NAME = \"ShardProfileSummary\";\n-  private final String indexName;\n+    public static final String SUMMARY_TABLE_NAME = \"ShardProfileSummary\";", "originalCommit": "39e8a8eb15a6b5b274375850fcfea228061a1d13", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba1c77ad012d4b984388840e6e4be720092e157a", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/ShardProfileSummary.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/ShardProfileSummary.java\nindex 566be17a..8b5a07f9 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/ShardProfileSummary.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/ShardProfileSummary.java\n\n@@ -28,12 +29,8 @@ import org.jooq.impl.DSL;\n \n public class ShardProfileSummary extends GenericSummary {\n \n-    public static final String SUMMARY_TABLE_NAME = \"ShardProfileSummary\";\n-    public static final String INDEX_NAME_KEY = \"index_name\";\n-    public static final String SHARD_ID_KEY = \"shard_id\";\n-    public static final String TEMPERATURE_KEY = \"temperature\";\n-\n-    private final String indexName;\n+  public static final String SUMMARY_TABLE_NAME = \"ShardProfileSummary\";\n+  private final String indexName;\n     private final int shardId;\n \n     private final TemperatureVector temperatureVector;\n"}}, {"oid": "92e2482453be21b91c385b1a717fd712decbc5c7", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/92e2482453be21b91c385b1a717fd712decbc5c7", "message": "Addressing the GH comments", "committedDate": "2020-05-30T00:12:34Z", "type": "forcePushed"}, {"oid": "802439d28f9231b617437540327ed47bd2c51601", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/802439d28f9231b617437540327ed47bd2c51601", "message": "Addressing the GH comments", "committedDate": "2020-05-30T00:31:55Z", "type": "forcePushed"}, {"oid": "ba1c77ad012d4b984388840e6e4be720092e157a", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/ba1c77ad012d4b984388840e6e4be720092e157a", "message": "Pyrometer API", "committedDate": "2020-05-30T00:33:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc5MTcwNg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/215#discussion_r432791706", "bodyText": "remove the space ?", "author": "rguo-aws", "createdAt": "2020-05-30T00:33:43Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/ShardProfileSummary.java", "diffHunk": "@@ -82,17 +85,17 @@ public String getTableName() {\n         List<Object> values = new ArrayList<>();\n         values.add(indexName);\n         values.add(shardId);\n-        for (TemperatureVector.Dimension dimension: TemperatureVector.Dimension.values()) {\n+        for (TemperatureVector.Dimension dimension : TemperatureVector.Dimension.values()) {", "originalCommit": "802439d28f9231b617437540327ed47bd2c51601", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "7848fabe588709fedc6c3f4bc08b51d0530675c0", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/7848fabe588709fedc6c3f4bc08b51d0530675c0", "message": "Getting the full node temperature profile for local RCA request", "committedDate": "2020-05-30T00:39:39Z", "type": "commit"}, {"oid": "1d133bbfdf8efcee3ecb90e47c1510c18ccce9df", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/1d133bbfdf8efcee3ecb90e47c1510c18ccce9df", "message": "Addressing the GH comments", "committedDate": "2020-05-30T00:44:34Z", "type": "commit"}, {"oid": "1d133bbfdf8efcee3ecb90e47c1510c18ccce9df", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/1d133bbfdf8efcee3ecb90e47c1510c18ccce9df", "message": "Addressing the GH comments", "committedDate": "2020-05-30T00:44:34Z", "type": "forcePushed"}]}