{"pr_number": 219, "pr_title": "Adding the Shard Size in the Temperature Profile RCA", "pr_createdAt": "2020-06-01T06:11:55Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219", "timeline": [{"oid": "c292f60f3df0257aa1ccdf178c241bc1a57c4422", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/c292f60f3df0257aa1ccdf178c241bc1a57c4422", "message": "Adding the Shard Size in the Temperature Profile RCA\n\nUpdated the UTs", "committedDate": "2020-06-01T05:52:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQzMTU3Nw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r433431577", "bodyText": "Can we make it camel case without underscores ?", "author": "yojs", "createdAt": "2020-06-01T19:07:17Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/metrics/Shard_Size_In_Bytes.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+\n+public class Shard_Size_In_Bytes extends Metric {", "originalCommit": "c292f60f3df0257aa1ccdf178c241bc1a57c4422", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxMTE3NQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r433511175", "bodyText": "Done. I did that initially to maintain consistency with the metric, but since this is a class this makes more sense.", "author": "aditjind", "createdAt": "2020-06-01T21:54:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQzMTU3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "07555042b042be1516417fb2768c981cd03f1bb2", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/metrics/Shard_Size_In_Bytes.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/metrics/ShardSizeInBytes.java\nsimilarity index 90%\nrename from src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/metrics/Shard_Size_In_Bytes.java\nrename to src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/metrics/ShardSizeInBytes.java\nindex 741a14d6..35f6055b 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/metrics/Shard_Size_In_Bytes.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/metrics/ShardSizeInBytes.java\n\n@@ -18,10 +18,10 @@ package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.ap\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n \n-public class Shard_Size_In_Bytes extends Metric {\n+public class ShardSizeInBytes extends Metric {\n     public static final String NAME = AllMetrics.ShardStatsValue.SHARD_SIZE_IN_BYTES.toString();\n \n-    public Shard_Size_In_Bytes(long evaluationIntervalSeconds) {\n+    public ShardSizeInBytes(long evaluationIntervalSeconds) {\n         super(AllMetrics.ShardStatsValue.SHARD_SIZE_IN_BYTES.name(), evaluationIntervalSeconds);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ0MDY2OQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r433440669", "bodyText": "Let's also remove the IO* dimensions are they are not used", "author": "yojs", "createdAt": "2020-06-01T19:26:13Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/core/temperature/TemperatureVector.java", "diffHunk": "@@ -28,7 +28,8 @@\n         CPU_Utilization(com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.CPU_Utilization.NAME),\n         Heap_AllocRate(com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_AllocRate.NAME),\n         IO_READ_SYSCALL_RATE(com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.IO_ReadSyscallRate.NAME),\n-        IO_WriteSyscallRate(com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.IO_WriteSyscallRate.NAME);\n+        IO_WriteSyscallRate(com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.IO_WriteSyscallRate.NAME),", "originalCommit": "c292f60f3df0257aa1ccdf178c241bc1a57c4422", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxMDk4MQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r433510981", "bodyText": "Done", "author": "aditjind", "createdAt": "2020-06-01T21:54:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ0MDY2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "07555042b042be1516417fb2768c981cd03f1bb2", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/core/temperature/TemperatureVector.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/core/temperature/TemperatureVector.java\nindex 605f42bb..9301cf34 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/core/temperature/TemperatureVector.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/core/temperature/TemperatureVector.java\n\n@@ -27,9 +27,7 @@ public class TemperatureVector {\n     public enum Dimension {\n         CPU_Utilization(com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.CPU_Utilization.NAME),\n         Heap_AllocRate(com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_AllocRate.NAME),\n-        IO_READ_SYSCALL_RATE(com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.IO_ReadSyscallRate.NAME),\n-        IO_WriteSyscallRate(com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.IO_WriteSyscallRate.NAME),\n-        Shard_Size_In_Bytes(com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Shard_Size_In_Bytes.NAME);\n+        Shard_Size_In_Bytes(com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.ShardSizeInBytes.NAME);\n \n         public final String NAME;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ0MjA2NQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r433442065", "bodyText": "Unintentional ?", "author": "yojs", "createdAt": "2020-06-01T19:28:49Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java", "diffHunk": "@@ -158,7 +163,8 @@ private void constructShardResourceUsageGraph() {\n     addLeaf(ioTotSyscallRate);\n \n     // High CPU Utilization RCA\n-    HotShardRca hotShardRca = new HotShardRca(5, 12, cpuUtilization, ioTotThroughput, ioTotSyscallRate);\n+    HotShardRca hotShardRca = new HotShardRca(5, 12, cpuUtilization,", "originalCommit": "c292f60f3df0257aa1ccdf178c241bc1a57c4422", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxMTY2OQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r433511669", "bodyText": "Right changed back", "author": "aditjind", "createdAt": "2020-06-01T21:55:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ0MjA2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "07555042b042be1516417fb2768c981cd03f1bb2", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java\nindex 3cde5d40..da4e2862 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java\n\n@@ -163,8 +163,7 @@ public class ElasticSearchAnalysisGraph extends AnalysisGraph {\n     addLeaf(ioTotSyscallRate);\n \n     // High CPU Utilization RCA\n-    HotShardRca hotShardRca = new HotShardRca(5, 12, cpuUtilization,\n-            ioTotThroughput, ioTotSyscallRate);\n+    HotShardRca hotShardRca = new HotShardRca(5, 12, cpuUtilization, ioTotThroughput, ioTotSyscallRate);\n     hotShardRca.addTag(TAG_LOCUS, LOCUS_DATA_MASTER_NODE);\n     hotShardRca.addAllUpstreams(Arrays.asList(cpuUtilization, ioTotThroughput, ioTotSyscallRate));\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ0OTA5OQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r433449099", "bodyText": "Please add a class level javadoc", "author": "yojs", "createdAt": "2020-06-01T19:42:29Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/metric/temperature/byShard/ShardSizeAvgTemperatureCalculator.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.metric.temperature.byShard;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.temperature.TemperatureVector.Dimension;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.metric.temperature.byShard.calculators.AvgShardBasedTemperatureCalculator;\n+\n+public class ShardSizeAvgTemperatureCalculator extends", "originalCommit": "c292f60f3df0257aa1ccdf178c241bc1a57c4422", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUzNDMxMQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r433534311", "bodyText": "Done", "author": "aditjind", "createdAt": "2020-06-01T23:04:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ0OTA5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "07555042b042be1516417fb2768c981cd03f1bb2", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/metric/temperature/byShard/ShardSizeAvgTemperatureCalculator.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/metric/temperature/byShard/ShardSizeAvgTemperatureCalculator.java\nindex 70e33b34..d3bc6e77 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/metric/temperature/byShard/ShardSizeAvgTemperatureCalculator.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/metric/temperature/byShard/ShardSizeAvgTemperatureCalculator.java\n\n@@ -3,6 +3,9 @@ package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.metric\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.temperature.TemperatureVector.Dimension;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.metric.temperature.byShard.calculators.AvgShardBasedTemperatureCalculator;\n \n+/*\n+Class for returning the Average over the sizes of different Shards held by the node.\n+*/\n public class ShardSizeAvgTemperatureCalculator extends\n     AvgShardBasedTemperatureCalculator {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ1MDE3Mw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r433450173", "bodyText": "Let's remove this", "author": "yojs", "createdAt": "2020-06-01T19:44:48Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/temperature/dimension/ShardSizeDimensionTemperatureRca.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.temperature.dimension;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.temperature.DimensionalTemperatureFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.temperature.ShardStore;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.temperature.TemperatureVector;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.metric.temperature.byShard.ShardSizeAvgTemperatureCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.metric.temperature.byShard.ShardSizeByShardTemperatureCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.metric.temperature.capacity.ShardSizePeakUsageTemperatureCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.metric.temperature.shardIndependent.DiskUsageShardIndependentTemperatureCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.temperature.DimensionalTemperatureCalculator;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+public class ShardSizeDimensionTemperatureRca extends Rca<DimensionalTemperatureFlowUnit> {\n+\n+    private static final Logger LOG = LogManager.getLogger(ShardSizeDimensionTemperatureRca.class);\n+    // The threshold set here is an initial threshold only.\n+    // TODO: Update the threshold appropriately after testing so that we assign heat correctly.\n+    private static final TemperatureVector.NormalizedValue THRESHOLD = new TemperatureVector.NormalizedValue((short) 2);\n+    private static final int EVALUATION_INTERVAL_IN_S = 5;\n+    private final ShardSizeByShardTemperatureCalculator SHARD_SIZE_BY_SHARD;\n+    private final ShardSizeAvgTemperatureCalculator SHARD_SIZE_AVG;\n+    private final DiskUsageShardIndependentTemperatureCalculator DISK_USAGE;\n+    private final ShardSizePeakUsageTemperatureCalculator PEAK_SHARD_SIZE_USAGE;\n+    private final ShardStore SHARD_STORE;\n+\n+    public ShardSizeDimensionTemperatureRca(final ShardStore shardStore,\n+                                            final ShardSizeByShardTemperatureCalculator shardSizeByShard,\n+                                            final ShardSizeAvgTemperatureCalculator shardSizeAvg,\n+                                            final DiskUsageShardIndependentTemperatureCalculator diskUsageShardIndependent,\n+                                            final ShardSizePeakUsageTemperatureCalculator shardSizePeakUsage) {\n+       super(EVALUATION_INTERVAL_IN_S);\n+       this.SHARD_STORE = shardStore;\n+       this.SHARD_SIZE_BY_SHARD = shardSizeByShard;\n+       this.SHARD_SIZE_AVG = shardSizeAvg;\n+       this.DISK_USAGE = diskUsageShardIndependent;\n+       this.PEAK_SHARD_SIZE_USAGE = shardSizePeakUsage;\n+    }\n+\n+    @Override\n+    public void generateFlowUnitListFromWire(FlowUnitOperationArgWrapper args) {\n+        throw new IllegalStateException(\"This node: [\" + name() + \"] should not have received flow \"\n+                + \"units from remote nodes.\");\n+    }\n+\n+    @Override\n+    public DimensionalTemperatureFlowUnit operate() {\n+        LOG.debug(\"executing : {}\", name());\n+        DimensionalTemperatureFlowUnit shardSizeTemperatureFlowUnit =\n+                DimensionalTemperatureCalculator.getTemperatureForDimension(SHARD_STORE,\n+                        TemperatureVector.Dimension.Shard_Size_In_Bytes, SHARD_SIZE_BY_SHARD, SHARD_SIZE_AVG, DISK_USAGE,\n+                        PEAK_SHARD_SIZE_USAGE, THRESHOLD);\n+        LOG.info(\"Shard Size temperature calculated: {}\",", "originalCommit": "c292f60f3df0257aa1ccdf178c241bc1a57c4422", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUyNjI1NA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r433526254", "bodyText": "Handled the cases for Shard Size dimension.", "author": "aditjind", "createdAt": "2020-06-01T22:37:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ1MDE3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUzNjkwNg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r433536906", "bodyText": "I was requesting that we change the LOG.info() to debug", "author": "yojs", "createdAt": "2020-06-01T23:13:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ1MDE3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU1NzM5NQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r433557395", "bodyText": "Oh! Did other refactoring too.", "author": "aditjind", "createdAt": "2020-06-02T00:27:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ1MDE3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "07555042b042be1516417fb2768c981cd03f1bb2", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/temperature/dimension/ShardSizeDimensionTemperatureRca.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/temperature/dimension/ShardSizeDimensionTemperatureRca.java\nindex ca438fcb..7512166a 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/temperature/dimension/ShardSizeDimensionTemperatureRca.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/temperature/dimension/ShardSizeDimensionTemperatureRca.java\n\n@@ -7,12 +7,14 @@ import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.cor\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.metric.temperature.byShard.ShardSizeAvgTemperatureCalculator;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.metric.temperature.byShard.ShardSizeByShardTemperatureCalculator;\n-import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.metric.temperature.capacity.ShardSizePeakUsageTemperatureCalculator;\n-import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.metric.temperature.shardIndependent.DiskUsageShardIndependentTemperatureCalculator;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.temperature.DimensionalTemperatureCalculator;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n \n+/*\n+Returns the shard size based heat of an individual node.\n+ */\n+\n public class ShardSizeDimensionTemperatureRca extends Rca<DimensionalTemperatureFlowUnit> {\n \n     private static final Logger LOG = LogManager.getLogger(ShardSizeDimensionTemperatureRca.class);\n"}}, {"oid": "07555042b042be1516417fb2768c981cd03f1bb2", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/07555042b042be1516417fb2768c981cd03f1bb2", "message": "Addressing CR Comments", "committedDate": "2020-06-01T23:04:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUzNzQ3Nw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r433537477", "bodyText": "Are the changes in this file required ?", "author": "yojs", "createdAt": "2020-06-01T23:15:10Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/AnalysisGraphTest.java", "diffHunk": "@@ -6,6 +6,8 @@\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_AllocRate;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Paging_MajfltRate;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Sched_Waittime;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.ShardSizeInBytes;", "originalCommit": "07555042b042be1516417fb2768c981cd03f1bb2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU1NzI5OA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r433557298", "bodyText": "Right removed", "author": "aditjind", "createdAt": "2020-06-02T00:27:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUzNzQ3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "2924a07e87ecac83ddf6a69759af92058e5bddac", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/AnalysisGraphTest.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/AnalysisGraphTest.java\nindex 58e84f61..1f55541d 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/AnalysisGraphTest.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/AnalysisGraphTest.java\n\n@@ -6,7 +6,6 @@ import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_AllocRate;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Paging_MajfltRate;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Sched_Waittime;\n-import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.ShardSizeInBytes;\n \n \n public class AnalysisGraphTest extends AnalysisGraph {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUzOTMxMg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r433539312", "bodyText": "Can we add a similar method to test shard_bytes for a cluster level RCA and the node level one ?", "author": "yojs", "createdAt": "2020-06-01T23:22:09Z", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ResourceHeatMapGraphTest.java", "diffHunk": "@@ -506,17 +506,13 @@ private void verifyFullNodeTemperatureProfile(String resp) {\n           break;\n         case Heap_AllocRate:\n           break;\n-        case IO_WriteSyscallRate:\n-          break;\n-        case IO_READ_SYSCALL_RATE:\n-          break;\n       }\n     }\n   }\n \n   private void verifyCpuDimension(JsonObject cpuObject) {", "originalCommit": "07555042b042be1516417fb2768c981cd03f1bb2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU1NzI2Mg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r433557262", "bodyText": "Done", "author": "aditjind", "createdAt": "2020-06-02T00:27:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUzOTMxMg=="}], "type": "inlineReview", "revised_code": {"commit": "1d6fcbb06e022ac032e4921fe9a4b1b2e47f6269", "chunk": "diff --git a/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ResourceHeatMapGraphTest.java b/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ResourceHeatMapGraphTest.java\nindex 077d38ef..6d68703d 100644\n--- a/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ResourceHeatMapGraphTest.java\n+++ b/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ResourceHeatMapGraphTest.java\n\n@@ -505,6 +706,10 @@ public class ResourceHeatMapGraphTest {\n           verifyCpuDimension(object);\n           break;\n         case Heap_AllocRate:\n+          verifyHeapAllocDimension(object);\n+          break;\n+        case Shard_Size_In_Bytes:\n+          verifyShardSizeDimension(object);\n           break;\n       }\n     }\n"}}, {"oid": "1d6fcbb06e022ac032e4921fe9a4b1b2e47f6269", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/1d6fcbb06e022ac032e4921fe9a4b1b2e47f6269", "message": "Addressing CR Comments x2", "committedDate": "2020-06-02T00:20:28Z", "type": "commit"}, {"oid": "8bc6950ef520cb03e7980ab1af707c7f23133ad8", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/8bc6950ef520cb03e7980ab1af707c7f23133ad8", "message": "Removing the min and the max shard calculations. (#220)\n\n* Removing the min and the max shard calculations while inserting shards in a Zone\r\n\r\nInstead while returning the shard list as part of the REST request, we sort\r\nshards by the temperature value for the dimension.\r\n\r\n* making it more obvious that this is reverse sorted", "committedDate": "2020-06-02T01:03:11Z", "type": "commit"}, {"oid": "4cc7ca1ec1ce9899c79af588016fb70c8f1061bb", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/4cc7ca1ec1ce9899c79af588016fb70c8f1061bb", "message": "Addressing Number of Shards Bug", "committedDate": "2020-06-03T01:23:42Z", "type": "commit"}, {"oid": "74e5f5b56ac3c43dd274c7b2e7919c46dd223e51", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/74e5f5b56ac3c43dd274c7b2e7919c46dd223e51", "message": "Addressing Number of Shards Bug", "committedDate": "2020-06-03T01:51:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYxNTg1Nw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r435615857", "bodyText": "can we follow the same naming convention and remove \"In_BYTES\" from the name of the metric", "author": "rguo-aws", "createdAt": "2020-06-04T23:42:30Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/metrics/ShardSizeInBytes.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+\n+public class ShardSizeInBytes extends Metric {", "originalCommit": "74e5f5b56ac3c43dd274c7b2e7919c46dd223e51", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY0NjU5Ng==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r435646596", "bodyText": "Right done. Wanted to follow the convention with the metrics name but ShardSize is more cleaner I guess.", "author": "aditjind", "createdAt": "2020-06-05T01:47:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYxNTg1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "2924a07e87ecac83ddf6a69759af92058e5bddac", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/metrics/ShardSizeInBytes.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/metrics/ShardSize.java\nsimilarity index 90%\nrename from src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/metrics/ShardSizeInBytes.java\nrename to src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/metrics/ShardSize.java\nindex 35f6055b..23313cd6 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/metrics/ShardSizeInBytes.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/metrics/ShardSize.java\n\n@@ -18,10 +18,10 @@ package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.ap\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n \n-public class ShardSizeInBytes extends Metric {\n+public class ShardSize extends Metric {\n     public static final String NAME = AllMetrics.ShardStatsValue.SHARD_SIZE_IN_BYTES.toString();\n \n-    public ShardSizeInBytes(long evaluationIntervalSeconds) {\n+    public ShardSize(long evaluationIntervalSeconds) {\n         super(AllMetrics.ShardStatsValue.SHARD_SIZE_IN_BYTES.name(), evaluationIntervalSeconds);\n     }\n }\n"}}, {"oid": "2924a07e87ecac83ddf6a69759af92058e5bddac", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/2924a07e87ecac83ddf6a69759af92058e5bddac", "message": "Renaming Shard Size File", "committedDate": "2020-06-05T01:46:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg3ODk1Ng==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r436878956", "bodyText": "Please add a javadoc for this class. What it is ? How it is calculated and if it is aggregated in some form etc.", "author": "yojs", "createdAt": "2020-06-08T17:35:58Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/metrics/ShardSize.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n+\n+public class ShardSize extends Metric {", "originalCommit": "2924a07e87ecac83ddf6a69759af92058e5bddac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk4NDY1Ng==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r436984656", "bodyText": "done", "author": "aditjind", "createdAt": "2020-06-08T20:34:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg3ODk1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "e53004c0988ffeae808d9f5ed1a461da287875a9", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/metrics/ShardSize.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/metrics/ShardSize.java\nindex 23313cd6..c10e563d 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/metrics/ShardSize.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/metrics/ShardSize.java\n\n@@ -18,6 +18,12 @@ package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.ap\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Metric;\n \n+/**\n+ * This metric is calculated from the Node Stat Metrics for a particular node and returns the\n+ * per Shard ID and Index Name dimensional shard sizes. This metric is aggregated over all shards\n+ * in different RCAs(Temperature Profile RCA).\n+ */\n+\n public class ShardSize extends Metric {\n     public static final String NAME = AllMetrics.ShardStatsValue.SHARD_SIZE_IN_BYTES.toString();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg3OTgxMw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r436879813", "bodyText": "Can you remove these changes ? These are from a different commit", "author": "yojs", "createdAt": "2020-06-08T17:37:30Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/temperature/NodeLevelDimensionalSummary.java", "diffHunk": "@@ -272,37 +275,11 @@ private void buildZoneProfile(final Record record, ShardStore shardStore\n \n         void addShard(ShardProfileSummary shard) {\n             shardProfileSummaries.add(shard);\n-            if (minShard == null) {", "originalCommit": "2924a07e87ecac83ddf6a69759af92058e5bddac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk2OTA2Mw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r436969063", "bodyText": "This commit got merged while rebasing from the master. I have certain other commits on top of it and also the files modified by both the commits are same. So I will have to revert the commit file by file. Is it possible to ignore these changes while reviewing?  I will take care in other PRs.", "author": "aditjind", "createdAt": "2020-06-08T20:06:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg3OTgxMw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4MDExNA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r436880114", "bodyText": "remove ?", "author": "yojs", "createdAt": "2020-06-08T17:38:02Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/AnalysisGraphTest.java", "diffHunk": "@@ -7,6 +7,7 @@\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Paging_MajfltRate;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Sched_Waittime;\n \n+", "originalCommit": "2924a07e87ecac83ddf6a69759af92058e5bddac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk2NDQ0Mg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r436964442", "bodyText": "Done", "author": "aditjind", "createdAt": "2020-06-08T19:56:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4MDExNA=="}], "type": "inlineReview", "revised_code": {"commit": "e53004c0988ffeae808d9f5ed1a461da287875a9", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/AnalysisGraphTest.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/AnalysisGraphTest.java\nindex 1f55541d..4bec0ae7 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/AnalysisGraphTest.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/AnalysisGraphTest.java\n\n@@ -7,7 +7,6 @@ import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Paging_MajfltRate;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Sched_Waittime;\n \n-\n public class AnalysisGraphTest extends AnalysisGraph {\n \n   @Override\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4MTYyNw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r436881627", "bodyText": "Can we name it something else ? There are too many shards in the name here :)", "author": "yojs", "createdAt": "2020-06-08T17:40:50Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java", "diffHunk": "@@ -213,6 +218,11 @@ protected void constructResourceHeatMapGraph() {\n             new ShardIndependentTemperatureCalculatorCpuUtilMetric();\n     TotalCpuUtilForTotalNodeMetric cpuUtilPeakUsage = new TotalCpuUtilForTotalNodeMetric();\n \n+    ShardSizeByShardTemperatureCalculator shardSizeByShard =", "originalCommit": "2924a07e87ecac83ddf6a69759af92058e5bddac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAwNDg1NA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r437004854", "bodyText": "Renamed it to ShardSizeMetricBasedTemperatureCalculator", "author": "aditjind", "createdAt": "2020-06-08T21:14:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4MTYyNw=="}], "type": "inlineReview", "revised_code": {"commit": "e53004c0988ffeae808d9f5ed1a461da287875a9", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java\nindex da4e2862..4b2683e0 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java\n\n@@ -218,10 +216,12 @@ public class ElasticSearchAnalysisGraph extends AnalysisGraph {\n             new ShardIndependentTemperatureCalculatorCpuUtilMetric();\n     TotalCpuUtilForTotalNodeMetric cpuUtilPeakUsage = new TotalCpuUtilForTotalNodeMetric();\n \n-    ShardSizeByShardTemperatureCalculator shardSizeByShard =\n-            new ShardSizeByShardTemperatureCalculator();\n+    ShardSizeMetricBasedTemperatureCalculator shardSizeByShard =\n+            new ShardSizeMetricBasedTemperatureCalculator();\n     ShardSizeAvgTemperatureCalculator shardSizeAvg =\n             new ShardSizeAvgTemperatureCalculator();\n+    ShardTotalDiskUsageTemperatureCalculator shardTotalDiskUsage =\n+            new ShardTotalDiskUsageTemperatureCalculator();\n \n     // heat map is developed only for data nodes.\n     cpuUtilByShard.addTag(TAG_LOCUS, LOCUS_DATA_NODE);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4NDc5Nw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r436884797", "bodyText": "Why do we not need the totalBytes over all shards ?", "author": "yojs", "createdAt": "2020-06-08T17:46:33Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java", "diffHunk": "@@ -234,6 +247,9 @@ protected void constructResourceHeatMapGraph() {\n     addLeaf(shardIndependentHeapAllocRate);\n     addLeaf(heapAllocRateTotal);\n \n+    addLeaf(shardSizeByShard);\n+    addLeaf(shardSizeAvg);", "originalCommit": "2924a07e87ecac83ddf6a69759af92058e5bddac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAwMjcwNQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r437002705", "bodyText": "I was calculating the total bytes by multiplying the average shard size by the total number of shards. But we can do that calculation while fetching from the DB itself. Updated this in the latest commits.", "author": "aditjind", "createdAt": "2020-06-08T21:10:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4NDc5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5MjUyMw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r437792523", "bodyText": "Thanks for changing this. Doing that calculation on the SQLite layer is much much faster.", "author": "yojs", "createdAt": "2020-06-10T00:20:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg4NDc5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "e53004c0988ffeae808d9f5ed1a461da287875a9", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java\nindex da4e2862..4b2683e0 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java\n\n@@ -249,6 +250,7 @@ public class ElasticSearchAnalysisGraph extends AnalysisGraph {\n \n     addLeaf(shardSizeByShard);\n     addLeaf(shardSizeAvg);\n+    addLeaf(shardTotalDiskUsage);\n \n     CpuUtilDimensionTemperatureRca cpuUtilHeat = new CpuUtilDimensionTemperatureRca(shardStore,\n             cpuUtilByShard,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk4NTEwNg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r436985106", "bodyText": "I guess we can remove this line", "author": "rguo-aws", "createdAt": "2020-06-08T20:35:44Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java", "diffHunk": "@@ -70,12 +74,13 @@\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.temperature.ClusterTemperatureRca;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.temperature.NodeTemperatureRca;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.temperature.dimension.CpuUtilDimensionTemperatureRca;\n-\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.temperature.dimension.HeapAllocRateTemperatureRca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.temperature.dimension.ShardSizeDimensionTemperatureRca;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n+", "originalCommit": "2924a07e87ecac83ddf6a69759af92058e5bddac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAwNzQyMw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r437007423", "bodyText": "done", "author": "aditjind", "createdAt": "2020-06-08T21:19:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk4NTEwNg=="}], "type": "inlineReview", "revised_code": {"commit": "e53004c0988ffeae808d9f5ed1a461da287875a9", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java\nindex da4e2862..4b2683e0 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java\n\n@@ -80,7 +79,6 @@ import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n-\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk5MDQzMA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r436990430", "bodyText": "Do we want to throw an exception here if shardsize flowunit is not received ? Can we simple send out an empty flowunit if some upstream flowunits are missing ?", "author": "rguo-aws", "createdAt": "2020-06-08T20:45:57Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/temperature/NodeTemperatureRca.java", "diffHunk": "@@ -85,8 +91,13 @@ public CompactNodeTemperatureFlowUnit operate() {\n       throw new IllegalStateException(\"One flow unit expected. Found: \" + heapAllocRateFlowUnits);\n     }\n \n+    if (shardSizeFlowUnits.size() != 1) {\n+      throw new IllegalArgumentException(\"One flow unit expected. Found: \" + shardSizeFlowUnits);", "originalCommit": "2924a07e87ecac83ddf6a69759af92058e5bddac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAxMDI5Ng==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r437010296", "bodyText": "That would mean we are calculating the RCA with half knowledge of metrics and calculating shard heat based on that. We are going to trigger shard movement going forward with these and this should only be done when we have full knowledge of the metrics.", "author": "aditjind", "createdAt": "2020-06-08T21:25:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk5MDQzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5NjcwNA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r437796704", "bodyText": "Throwing an exception is dangerous as this will mute the node and exclude it from future runs. We should not throw an exception inside operate unless it is an un-recoverable exception.\nBut here we check for size to be one as this is intra-node aggregation and we don't expect multiple FlowUnits to show up just one and to @rguo-aws 's point, that can be an empty one.", "author": "yojs", "createdAt": "2020-06-10T00:37:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk5MDQzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgzMjU4MQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r437832581", "bodyText": "Right missed the point about muting the node. Added the empty flow unit in case no flow units are received. We are returning from NodeTemperatureRCA in the case of these empty flow units.", "author": "aditjind", "createdAt": "2020-06-10T02:58:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk5MDQzMA=="}], "type": "inlineReview", "revised_code": {"commit": "d6e40462d34298cd244b46a2ef464cb50fff6a33", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/temperature/NodeTemperatureRca.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/temperature/NodeTemperatureRca.java\nindex 8eef022a..2785f2cc 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/temperature/NodeTemperatureRca.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/temperature/NodeTemperatureRca.java\n\n@@ -83,16 +84,16 @@ public class NodeTemperatureRca extends Rca<CompactNodeTemperatureFlowUnit> {\n     List<DimensionalTemperatureFlowUnit> shardSizeFlowUnits = shardSizeDimensionTemperatureRca\n         .getFlowUnits();\n     // EachResourceLevelHeat RCA should generate a one @{code DimensionalFlowUnit}.\n-    if (cpuFlowUnits.size() != 1) {\n-      throw new IllegalArgumentException(\"One flow unit expected. Found: \" + cpuFlowUnits);\n+    if (cpuFlowUnits.size() < 1) {\n+      cpuFlowUnits.add(new DimensionalTemperatureFlowUnit(System.currentTimeMillis()));\n     }\n \n-    if (heapAllocRateFlowUnits.size() != 1) {\n-      throw new IllegalStateException(\"One flow unit expected. Found: \" + heapAllocRateFlowUnits);\n+    if (heapAllocRateFlowUnits.size() < 1) {\n+      heapAllocRateFlowUnits.add(new DimensionalTemperatureFlowUnit(System.currentTimeMillis()));\n     }\n \n-    if (shardSizeFlowUnits.size() != 1) {\n-      throw new IllegalArgumentException(\"One flow unit expected. Found: \" + shardSizeFlowUnits);\n+    if (shardSizeFlowUnits.size() < 1) {\n+      shardSizeFlowUnits.add(new DimensionalTemperatureFlowUnit(System.currentTimeMillis()));\n     }\n \n     // This means that the input RCA didn't calculate anything. We can move on as well.\n"}}, {"oid": "e53004c0988ffeae808d9f5ed1a461da287875a9", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/e53004c0988ffeae808d9f5ed1a461da287875a9", "message": "Addressing Review Comments", "committedDate": "2020-06-08T21:32:07Z", "type": "commit"}, {"oid": "79b68d64622f008147c3476162bf3ceef8192d68", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/79b68d64622f008147c3476162bf3ceef8192d68", "message": "Merge branch 'master' into rca-changes-ut", "committedDate": "2020-06-08T21:37:47Z", "type": "commit"}, {"oid": "8bafc463d5867e2eb6e43d037b9acca0e4f97a49", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/8bafc463d5867e2eb6e43d037b9acca0e4f97a49", "message": "Because of a race during merging changes into master, we introduced a\u2026 (#226)\n\n* Because of a race during merging changes into master, we introduced a merge conflict that will fail the build\r\n\r\n* Removing the parameter marker in the LOG", "committedDate": "2020-06-09T17:16:57Z", "type": "commit"}, {"oid": "1d7a8e7e7612196a6e4affa9aa97594a892baddd", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/1d7a8e7e7612196a6e4affa9aa97594a892baddd", "message": "Adding the Shard Size in the Temperature Profile RCA\n\nUpdated the UTs", "committedDate": "2020-06-09T17:22:40Z", "type": "commit"}, {"oid": "3b53c1edd39d8d3f0b69cf0d08a1deb7d1e2f73f", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/3b53c1edd39d8d3f0b69cf0d08a1deb7d1e2f73f", "message": "Addressing CR Comments", "committedDate": "2020-06-09T17:28:32Z", "type": "commit"}, {"oid": "86c8774a43379b89e9f32da85e4e4d650962b190", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/86c8774a43379b89e9f32da85e4e4d650962b190", "message": "Addressing Number of Shards Bug", "committedDate": "2020-06-09T17:28:32Z", "type": "commit"}, {"oid": "8c603c7c0c9787cd1d856769a0e2af36e4bd22b7", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/8c603c7c0c9787cd1d856769a0e2af36e4bd22b7", "message": "Addressing Review Comments", "committedDate": "2020-06-09T17:28:33Z", "type": "commit"}, {"oid": "dc8e38503bf1f16a332d5650cd01201667f39aaf", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/dc8e38503bf1f16a332d5650cd01201667f39aaf", "message": "Retained a Copy of the same file During Merge. Removing", "committedDate": "2020-06-09T19:55:41Z", "type": "commit"}, {"oid": "f8dd48f76b126c27f37be9cf1e14e55146e0c2e5", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/f8dd48f76b126c27f37be9cf1e14e55146e0c2e5", "message": "Adding support for Running RCA on Nodes which are not dedicated masters.", "committedDate": "2020-06-09T20:04:45Z", "type": "commit"}, {"oid": "8c0ab4a9910cb297cf1abd8aa0d1799839584162", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/8c0ab4a9910cb297cf1abd8aa0d1799839584162", "message": "Updating the RCA Conf Files\n\nDisabling the Shard Size based Temperature RCA by default because the Shard\nSize RCA needs per shard node stats metric which is disabled by default", "committedDate": "2020-06-09T21:03:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5NTA5NA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r437795094", "bodyText": "Fro every new dimension we add, we have to add 4 new graph nodes that translates into multiple Java classes. It would be nice if we can merge them so that adding a new dimension is as simple as adding a new metric to a set that would be much cleaner.\nThis refactoring can be part of a separate PR. Just wanted to bring this up.", "author": "yojs", "createdAt": "2020-06-10T00:30:22Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/metric/temperature/capacity/ShardTotalDiskUsageTemperatureCalculator.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.metric.temperature.capacity;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.temperature.TemperatureVector;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.metric.temperature.capacity.calculators.TotalNodeTemperatureCalculator;\n+\n+/**\n+ * This class calculated the total disk used by shards in the node.\n+ */\n+\n+public class ShardTotalDiskUsageTemperatureCalculator extends TotalNodeTemperatureCalculator {", "originalCommit": "8c0ab4a9910cb297cf1abd8aa0d1799839584162", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5OTE0OQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r437799149", "bodyText": "At some point we should move them to the rca.conf as dynamic configs.", "author": "yojs", "createdAt": "2020-06-10T00:47:08Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/temperature/dimension/ShardSizeDimensionTemperatureRca.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.temperature.dimension;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.Rca;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.temperature.DimensionalTemperatureFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.temperature.ShardStore;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.temperature.TemperatureVector;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.scheduler.FlowUnitOperationArgWrapper;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.metric.temperature.byShard.ShardSizeAvgTemperatureCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.metric.temperature.byShard.ShardSizeMetricBasedTemperatureCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.metric.temperature.capacity.ShardTotalDiskUsageTemperatureCalculator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.rca.temperature.DimensionalTemperatureCalculator;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+/*\n+ *Returns the shard size based heat of an individual node.\n+ */\n+\n+public class ShardSizeDimensionTemperatureRca extends Rca<DimensionalTemperatureFlowUnit> {\n+\n+    private static final Logger LOG = LogManager.getLogger(ShardSizeDimensionTemperatureRca.class);\n+    // The threshold set here is an initial threshold only.\n+    // TODO: Update the threshold appropriately after testing so that we assign heat correctly.\n+    private static final TemperatureVector.NormalizedValue THRESHOLD = new TemperatureVector.NormalizedValue((short) 2);", "originalCommit": "8c0ab4a9910cb297cf1abd8aa0d1799839584162", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5OTM3Mw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r437799373", "bodyText": "Can we remove <<<<<<< HEAD ?", "author": "yojs", "createdAt": "2020-06-10T00:47:55Z", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ResourceHeatMapGraphTest.java", "diffHunk": "@@ -337,14 +337,367 @@ public void mutedTemperatureProfile() {\n   }\n \n   /**\n+<<<<<<< HEAD", "originalCommit": "8c0ab4a9910cb297cf1abd8aa0d1799839584162", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgzMzAzNQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r437833035", "bodyText": "done", "author": "aditjind", "createdAt": "2020-06-10T03:00:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5OTM3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "d6e40462d34298cd244b46a2ef464cb50fff6a33", "chunk": "diff --git a/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ResourceHeatMapGraphTest.java b/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ResourceHeatMapGraphTest.java\nindex cbfa19d7..74c354de 100644\n--- a/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ResourceHeatMapGraphTest.java\n+++ b/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ResourceHeatMapGraphTest.java\n\n@@ -337,399 +337,44 @@ public class ResourceHeatMapGraphTest {\n   }\n \n   /**\n-<<<<<<< HEAD\n-   [\n-   {\n-   \"NodeLevelZoneSummary\":[\n-   {\n-   \"all_shards\":[],\n-   \"zone\":\"HOT\"\n-   },\n-   {\n-   \"all_shards\":[],\n-   \"zone\":\"WARM\"\n-   },\n-   {\n-   \"all_shards\":[\n-   {\n-   \"index_name\":\"pmc\",\n-   \"shard_id\":4,\n-   \"temperature\":[\n-   {\n-   \"dimension\":\"CPU_Utilization\",\n-   \"value\":\"1\"\n-   },\n-   {\n-   \"dimension\":\"Heap_AllocRate\",\n-   \"value\":\"1\"\n-   },\n-   {\n-   \"dimension\":\"Shard_Size_In_Bytes\",\n-   \"value\":\"10\"\n-   }\n-   ]\n-   },\n-   {\n-   \"index_name\":\"pmc\",\n-   \"shard_id\":0,\n-   \"temperature\":[\n-   {\n-   \"dimension\":\"CPU_Utilization\",\n-   \"value\":\"1\"\n-   },\n-   {\n-   \"dimension\":\"Heap_AllocRate\",\n-   \"value\":\"1\"\n-   },\n-   {\n-   \"dimension\":\"Shard_Size_In_Bytes\",\n-   \"value\":\"9\"\n-   }\n-   ]\n-   },\n-   {\n-   \"index_name\":\"pmc\",\n-   \"shard_id\":2,\n-   \"temperature\":[\n-   {\n-   \"dimension\":\"CPU_Utilization\",\n-   \"value\":\"0\"\n-   },\n-   {\n-   \"dimension\":\"Heap_AllocRate\",\n-   \"value\":\"0\"\n-   },\n-   {\n-   \"dimension\":\"Shard_Size_In_Bytes\",\n-   \"value\":\"9\"\n-   }\n-   ]\n-   }\n-   ],\n-   \"max\":{\n-   \"index_name\":\"pmc\",\n-   \"shard_id\":4,\n-   \"temperature\":[\n-   {\n-   \"dimension\":\"CPU_Utilization\",\n-   \"value\":\"1\"\n-   },\n-   {\n-   \"dimension\":\"Heap_AllocRate\",\n-   \"value\":\"1\"\n-   },\n-   {\n-   \"dimension\":\"Shard_Size_In_Bytes\",\n-   \"value\":\"10\"\n-   }\n-   ]\n-   },\n-   \"min\":{\n-   \"index_name\":\"pmc\",\n-   \"shard_id\":2,\n-   \"temperature\":[\n-   {\n-   \"dimension\":\"CPU_Utilization\",\n-   \"value\":\"0\"\n-   },\n-   {\n-   \"dimension\":\"Heap_AllocRate\",\n-   \"value\":\"0\"\n-   },\n-   {\n-   \"dimension\":\"Shard_Size_In_Bytes\",\n-   \"value\":\"9\"\n-   }\n-   ]\n-   },\n-   \"zone\":\"LUKE_WARM\"\n-   },\n-   {\n-   \"all_shards\":[],\n-   \"zone\":\"COLD\"\n-   }\n-   ],\n-   \"dimension\":\"CPU_Utilization\",\n-   \"mean\":1,\n-   \"numShards\":3,\n-   \"timestamp\":1591056310990,\n-   \"total\":0.113345915412554\n-   },\n-   {\n-   \"NodeLevelZoneSummary\":[\n-   {\n-   \"all_shards\":[],\n-   \"zone\":\"HOT\"\n-   },\n-   {\n-   \"all_shards\":[],\n-   \"zone\":\"WARM\"\n-   },\n-   {\n-   \"all_shards\":[\n-   {\n-   \"index_name\":\"pmc\",\n-   \"shard_id\":4,\n-   \"temperature\":[\n-   {\n-   \"dimension\":\"CPU_Utilization\",\n-   \"value\":\"1\"\n-   },\n-   {\n-   \"dimension\":\"Heap_AllocRate\",\n-   \"value\":\"1\"\n-   },\n-   {\n-   \"dimension\":\"Shard_Size_In_Bytes\",\n-   \"value\":\"10\"\n-   }\n-   ]\n-   },\n-   {\n-   \"index_name\":\"pmc\",\n-   \"shard_id\":0,\n-   \"temperature\":[\n-   {\n-   \"dimension\":\"CPU_Utilization\",\n-   \"value\":\"1\"\n-   },\n-   {\n-   \"dimension\":\"Heap_AllocRate\",\n-   \"value\":\"1\"\n-   },\n-   {\n-   \"dimension\":\"Shard_Size_In_Bytes\",\n-   \"value\":\"9\"\n-   }\n-   ]\n-   },\n-   {\n-   \"index_name\":\"pmc\",\n-   \"shard_id\":2,\n-   \"temperature\":[\n-   {\n-   \"dimension\":\"CPU_Utilization\",\n-   \"value\":\"0\"\n-   },\n-   {\n-   \"dimension\":\"Heap_AllocRate\",\n-   \"value\":\"0\"\n-   },\n-   {\n-   \"dimension\":\"Shard_Size_In_Bytes\",\n-   \"value\":\"9\"\n-   }\n-   ]\n-   }\n-   ],\n-   \"max\":{\n-   \"index_name\":\"pmc\",\n-   \"shard_id\":4,\n-   \"temperature\":[\n-   {\n-   \"dimension\":\"CPU_Utilization\",\n-   \"value\":\"1\"\n-   },\n-   {\n-   \"dimension\":\"Heap_AllocRate\",\n-   \"value\":\"1\"\n-   },\n-   {\n-   \"dimension\":\"Shard_Size_In_Bytes\",\n-   \"value\":\"10\"\n-   }\n-   ]\n-   },\n-   \"min\":{\n-   \"index_name\":\"pmc\",\n-   \"shard_id\":0,\n-   \"temperature\":[\n-   {\n-   \"dimension\":\"CPU_Utilization\",\n-   \"value\":\"1\"\n-   },\n-   {\n-   \"dimension\":\"Heap_AllocRate\",\n-   \"value\":\"1\"\n-   },\n-   {\n-   \"dimension\":\"Shard_Size_In_Bytes\",\n-   \"value\":\"9\"\n-   }\n-   ]\n-   },\n-   \"zone\":\"LUKE_WARM\"\n-   },\n-   {\n-   \"all_shards\":[],\n-   \"zone\":\"COLD\"\n-   }\n-   ],\n-   \"dimension\":\"Shard_Size_In_Bytes\",\n-   \"mean\":10,\n-   \"numShards\":3,\n-   \"timestamp\":1591056310990,\n-   \"total\":7631604.33333333\n-   },\n-   {\n-   \"NodeLevelZoneSummary\":[\n-   {\n-   \"all_shards\":[],\n-   \"zone\":\"HOT\"\n-   },\n-   {\n-   \"all_shards\":[],\n-   \"zone\":\"WARM\"\n-   },\n-   {\n-   \"all_shards\":[\n-   {\n-   \"index_name\":\"pmc\",\n-   \"shard_id\":0,\n-   \"temperature\":[\n-   {\n-   \"dimension\":\"CPU_Utilization\",\n-   \"value\":\"1\"\n-   },\n-   {\n-   \"dimension\":\"Heap_AllocRate\",\n-   \"value\":\"1\"\n-   },\n-   {\n-   \"dimension\":\"Shard_Size_In_Bytes\",\n-   \"value\":\"9\"\n-   }\n-   ]\n-   },\n-   {\n-   \"index_name\":\"pmc\",\n-   \"shard_id\":4,\n-   \"temperature\":[\n-   {\n-   \"dimension\":\"CPU_Utilization\",\n-   \"value\":\"1\"\n-   },\n-   {\n-   \"dimension\":\"Heap_AllocRate\",\n-   \"value\":\"1\"\n-   },\n-   {\n-   \"dimension\":\"Shard_Size_In_Bytes\",\n-   \"value\":\"10\"\n-   }\n-   ]\n-   },\n-   {\n-   \"index_name\":\"pmc\",\n-   \"shard_id\":2,\n-   \"temperature\":[\n-   {\n-   \"dimension\":\"CPU_Utilization\",\n-   \"value\":\"0\"\n-   },\n-   {\n-   \"dimension\":\"Heap_AllocRate\",\n-   \"value\":\"0\"\n-   },\n-   {\n-   \"dimension\":\"Shard_Size_In_Bytes\",\n-   \"value\":\"9\"\n-   }\n-   ]\n-   }\n-   ],\n-   \"max\":{\n-   \"index_name\":\"pmc\",\n-   \"shard_id\":0,\n-   \"temperature\":[\n-   {\n-   \"dimension\":\"CPU_Utilization\",\n-   \"value\":\"1\"\n-   },\n-   {\n-   \"dimension\":\"Heap_AllocRate\",\n-   \"value\":\"1\"\n-   },\n-   {\n-   \"dimension\":\"Shard_Size_In_Bytes\",\n-   \"value\":\"9\"\n-   }\n-   ]\n-   },\n-   \"min\":{\n-   \"index_name\":\"pmc\",\n-   \"shard_id\":2,\n-   \"temperature\":[\n-   {\n-   \"dimension\":\"CPU_Utilization\",\n-   \"value\":\"0\"\n-   },\n-   {\n-   \"dimension\":\"Heap_AllocRate\",\n-   \"value\":\"0\"\n-   },\n-   {\n-   \"dimension\":\"Shard_Size_In_Bytes\",\n-   \"value\":\"9\"\n-   }\n-   ]\n-   },\n-   \"zone\":\"LUKE_WARM\"\n-   },\n-   {\n-   \"all_shards\":[],\n-   \"zone\":\"COLD\"\n-   }\n-   ],\n-   \"dimension\":\"Heap_AllocRate\",\n-   \"mean\":1,\n-   \"numShards\":3,\n-   \"timestamp\":1591056310990,\n-   \"total\":7429635.38060667\n-   }\n-   ]\n-\n-=======\n-   * {\n+   *{\n    * \"AllTemperatureDimensions\":[\n    * {\n    * \"NodeLevelDimensionalSummary\":[\n    * {\n-   * \"dimension\":\"CPU_Utilization\",\n-   * \"mean\":1,\n-   * \"total\":0.113345915412554,\n-   * \"numShards\":3,\n    * \"NodeLevelZoneSummary\":[\n    * {\n-   * \"zone\":\"HOT\",\n-   * \"all_shards\":[\n-   * ]\n+   * \"all_shards\":[],\n+   * \"zone\":\"HOT\"\n    * },\n    * {\n-   * \"zone\":\"WARM\",\n    * \"all_shards\":[\n    * {\n    * \"index_name\":\"pmc\",\n-   * \"shard_id\":0,\n+   * \"shard_id\":4,\n    * \"temperature\":[\n    * {\n    * \"dimension\":\"CPU_Utilization\",\n-   * \"value\":\"2\"\n+   * \"value\":\"1\"\n    * },\n    * {\n    * \"dimension\":\"Heap_AllocRate\",\n-   * \"value\":\"5\"\n+   * \"value\":\"1\"\n+   * },\n+   * {\n+   * \"dimension\":\"Shard_Size_In_Bytes\",\n+   * \"value\":\"10\"\n    * }\n    * ]\n    * }\n-   * ]\n+   * ],\n+   * \"zone\":\"WARM\"\n    * },\n    * {\n-   * \"zone\":\"LUKE_WARM\",\n    * \"all_shards\":[\n    * {\n    * \"index_name\":\"pmc\",\n-   * \"shard_id\":2,\n+   * \"shard_id\":0,\n    * \"temperature\":[\n    * {\n    * \"dimension\":\"CPU_Utilization\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5OTQ5MA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r437799490", "bodyText": "remove ?", "author": "yojs", "createdAt": "2020-06-10T00:48:19Z", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ResourceHeatMapGraphTest.java", "diffHunk": "@@ -337,14 +337,367 @@ public void mutedTemperatureProfile() {\n   }\n \n   /**\n+<<<<<<< HEAD\n+   [\n+   {\n+   \"NodeLevelZoneSummary\":[\n+   {\n+   \"all_shards\":[],\n+   \"zone\":\"HOT\"\n+   },\n+   {\n+   \"all_shards\":[],\n+   \"zone\":\"WARM\"\n+   },\n+   {\n+   \"all_shards\":[\n+   {\n+   \"index_name\":\"pmc\",\n+   \"shard_id\":4,\n+   \"temperature\":[\n+   {\n+   \"dimension\":\"CPU_Utilization\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"value\":\"10\"\n+   }\n+   ]\n+   },\n+   {\n+   \"index_name\":\"pmc\",\n+   \"shard_id\":0,\n+   \"temperature\":[\n+   {\n+   \"dimension\":\"CPU_Utilization\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"value\":\"9\"\n+   }\n+   ]\n+   },\n+   {\n+   \"index_name\":\"pmc\",\n+   \"shard_id\":2,\n+   \"temperature\":[\n+   {\n+   \"dimension\":\"CPU_Utilization\",\n+   \"value\":\"0\"\n+   },\n+   {\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"value\":\"0\"\n+   },\n+   {\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"value\":\"9\"\n+   }\n+   ]\n+   }\n+   ],\n+   \"max\":{\n+   \"index_name\":\"pmc\",\n+   \"shard_id\":4,\n+   \"temperature\":[\n+   {\n+   \"dimension\":\"CPU_Utilization\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"value\":\"10\"\n+   }\n+   ]\n+   },\n+   \"min\":{\n+   \"index_name\":\"pmc\",\n+   \"shard_id\":2,\n+   \"temperature\":[\n+   {\n+   \"dimension\":\"CPU_Utilization\",\n+   \"value\":\"0\"\n+   },\n+   {\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"value\":\"0\"\n+   },\n+   {\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"value\":\"9\"\n+   }\n+   ]\n+   },\n+   \"zone\":\"LUKE_WARM\"\n+   },\n+   {\n+   \"all_shards\":[],\n+   \"zone\":\"COLD\"\n+   }\n+   ],\n+   \"dimension\":\"CPU_Utilization\",\n+   \"mean\":1,\n+   \"numShards\":3,\n+   \"timestamp\":1591056310990,\n+   \"total\":0.113345915412554\n+   },\n+   {\n+   \"NodeLevelZoneSummary\":[\n+   {\n+   \"all_shards\":[],\n+   \"zone\":\"HOT\"\n+   },\n+   {\n+   \"all_shards\":[],\n+   \"zone\":\"WARM\"\n+   },\n+   {\n+   \"all_shards\":[\n+   {\n+   \"index_name\":\"pmc\",\n+   \"shard_id\":4,\n+   \"temperature\":[\n+   {\n+   \"dimension\":\"CPU_Utilization\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"value\":\"10\"\n+   }\n+   ]\n+   },\n+   {\n+   \"index_name\":\"pmc\",\n+   \"shard_id\":0,\n+   \"temperature\":[\n+   {\n+   \"dimension\":\"CPU_Utilization\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"value\":\"9\"\n+   }\n+   ]\n+   },\n+   {\n+   \"index_name\":\"pmc\",\n+   \"shard_id\":2,\n+   \"temperature\":[\n+   {\n+   \"dimension\":\"CPU_Utilization\",\n+   \"value\":\"0\"\n+   },\n+   {\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"value\":\"0\"\n+   },\n+   {\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"value\":\"9\"\n+   }\n+   ]\n+   }\n+   ],\n+   \"max\":{\n+   \"index_name\":\"pmc\",\n+   \"shard_id\":4,\n+   \"temperature\":[\n+   {\n+   \"dimension\":\"CPU_Utilization\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"value\":\"10\"\n+   }\n+   ]\n+   },\n+   \"min\":{\n+   \"index_name\":\"pmc\",\n+   \"shard_id\":0,\n+   \"temperature\":[\n+   {\n+   \"dimension\":\"CPU_Utilization\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"value\":\"9\"\n+   }\n+   ]\n+   },\n+   \"zone\":\"LUKE_WARM\"\n+   },\n+   {\n+   \"all_shards\":[],\n+   \"zone\":\"COLD\"\n+   }\n+   ],\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"mean\":10,\n+   \"numShards\":3,\n+   \"timestamp\":1591056310990,\n+   \"total\":7631604.33333333\n+   },\n+   {\n+   \"NodeLevelZoneSummary\":[\n+   {\n+   \"all_shards\":[],\n+   \"zone\":\"HOT\"\n+   },\n+   {\n+   \"all_shards\":[],\n+   \"zone\":\"WARM\"\n+   },\n+   {\n+   \"all_shards\":[\n+   {\n+   \"index_name\":\"pmc\",\n+   \"shard_id\":0,\n+   \"temperature\":[\n+   {\n+   \"dimension\":\"CPU_Utilization\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"value\":\"9\"\n+   }\n+   ]\n+   },\n+   {\n+   \"index_name\":\"pmc\",\n+   \"shard_id\":4,\n+   \"temperature\":[\n+   {\n+   \"dimension\":\"CPU_Utilization\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"value\":\"10\"\n+   }\n+   ]\n+   },\n+   {\n+   \"index_name\":\"pmc\",\n+   \"shard_id\":2,\n+   \"temperature\":[\n+   {\n+   \"dimension\":\"CPU_Utilization\",\n+   \"value\":\"0\"\n+   },\n+   {\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"value\":\"0\"\n+   },\n+   {\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"value\":\"9\"\n+   }\n+   ]\n+   }\n+   ],\n+   \"max\":{\n+   \"index_name\":\"pmc\",\n+   \"shard_id\":0,\n+   \"temperature\":[\n+   {\n+   \"dimension\":\"CPU_Utilization\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"value\":\"1\"\n+   },\n+   {\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"value\":\"9\"\n+   }\n+   ]\n+   },\n+   \"min\":{\n+   \"index_name\":\"pmc\",\n+   \"shard_id\":2,\n+   \"temperature\":[\n+   {\n+   \"dimension\":\"CPU_Utilization\",\n+   \"value\":\"0\"\n+   },\n+   {\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"value\":\"0\"\n+   },\n+   {\n+   \"dimension\":\"Shard_Size_In_Bytes\",\n+   \"value\":\"9\"\n+   }\n+   ]\n+   },\n+   \"zone\":\"LUKE_WARM\"\n+   },\n+   {\n+   \"all_shards\":[],\n+   \"zone\":\"COLD\"\n+   }\n+   ],\n+   \"dimension\":\"Heap_AllocRate\",\n+   \"mean\":1,\n+   \"numShards\":3,\n+   \"timestamp\":1591056310990,\n+   \"total\":7429635.38060667\n+   }\n+   ]\n+\n+=======", "originalCommit": "8c0ab4a9910cb297cf1abd8aa0d1799839584162", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgzMzAwMQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/219#discussion_r437833001", "bodyText": "done", "author": "aditjind", "createdAt": "2020-06-10T02:59:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc5OTQ5MA=="}], "type": "inlineReview", "revised_code": {"commit": "d6e40462d34298cd244b46a2ef464cb50fff6a33", "chunk": "diff --git a/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ResourceHeatMapGraphTest.java b/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ResourceHeatMapGraphTest.java\nindex cbfa19d7..74c354de 100644\n--- a/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ResourceHeatMapGraphTest.java\n+++ b/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ResourceHeatMapGraphTest.java\n\n@@ -337,399 +337,44 @@ public class ResourceHeatMapGraphTest {\n   }\n \n   /**\n-<<<<<<< HEAD\n-   [\n-   {\n-   \"NodeLevelZoneSummary\":[\n-   {\n-   \"all_shards\":[],\n-   \"zone\":\"HOT\"\n-   },\n-   {\n-   \"all_shards\":[],\n-   \"zone\":\"WARM\"\n-   },\n-   {\n-   \"all_shards\":[\n-   {\n-   \"index_name\":\"pmc\",\n-   \"shard_id\":4,\n-   \"temperature\":[\n-   {\n-   \"dimension\":\"CPU_Utilization\",\n-   \"value\":\"1\"\n-   },\n-   {\n-   \"dimension\":\"Heap_AllocRate\",\n-   \"value\":\"1\"\n-   },\n-   {\n-   \"dimension\":\"Shard_Size_In_Bytes\",\n-   \"value\":\"10\"\n-   }\n-   ]\n-   },\n-   {\n-   \"index_name\":\"pmc\",\n-   \"shard_id\":0,\n-   \"temperature\":[\n-   {\n-   \"dimension\":\"CPU_Utilization\",\n-   \"value\":\"1\"\n-   },\n-   {\n-   \"dimension\":\"Heap_AllocRate\",\n-   \"value\":\"1\"\n-   },\n-   {\n-   \"dimension\":\"Shard_Size_In_Bytes\",\n-   \"value\":\"9\"\n-   }\n-   ]\n-   },\n-   {\n-   \"index_name\":\"pmc\",\n-   \"shard_id\":2,\n-   \"temperature\":[\n-   {\n-   \"dimension\":\"CPU_Utilization\",\n-   \"value\":\"0\"\n-   },\n-   {\n-   \"dimension\":\"Heap_AllocRate\",\n-   \"value\":\"0\"\n-   },\n-   {\n-   \"dimension\":\"Shard_Size_In_Bytes\",\n-   \"value\":\"9\"\n-   }\n-   ]\n-   }\n-   ],\n-   \"max\":{\n-   \"index_name\":\"pmc\",\n-   \"shard_id\":4,\n-   \"temperature\":[\n-   {\n-   \"dimension\":\"CPU_Utilization\",\n-   \"value\":\"1\"\n-   },\n-   {\n-   \"dimension\":\"Heap_AllocRate\",\n-   \"value\":\"1\"\n-   },\n-   {\n-   \"dimension\":\"Shard_Size_In_Bytes\",\n-   \"value\":\"10\"\n-   }\n-   ]\n-   },\n-   \"min\":{\n-   \"index_name\":\"pmc\",\n-   \"shard_id\":2,\n-   \"temperature\":[\n-   {\n-   \"dimension\":\"CPU_Utilization\",\n-   \"value\":\"0\"\n-   },\n-   {\n-   \"dimension\":\"Heap_AllocRate\",\n-   \"value\":\"0\"\n-   },\n-   {\n-   \"dimension\":\"Shard_Size_In_Bytes\",\n-   \"value\":\"9\"\n-   }\n-   ]\n-   },\n-   \"zone\":\"LUKE_WARM\"\n-   },\n-   {\n-   \"all_shards\":[],\n-   \"zone\":\"COLD\"\n-   }\n-   ],\n-   \"dimension\":\"CPU_Utilization\",\n-   \"mean\":1,\n-   \"numShards\":3,\n-   \"timestamp\":1591056310990,\n-   \"total\":0.113345915412554\n-   },\n-   {\n-   \"NodeLevelZoneSummary\":[\n-   {\n-   \"all_shards\":[],\n-   \"zone\":\"HOT\"\n-   },\n-   {\n-   \"all_shards\":[],\n-   \"zone\":\"WARM\"\n-   },\n-   {\n-   \"all_shards\":[\n-   {\n-   \"index_name\":\"pmc\",\n-   \"shard_id\":4,\n-   \"temperature\":[\n-   {\n-   \"dimension\":\"CPU_Utilization\",\n-   \"value\":\"1\"\n-   },\n-   {\n-   \"dimension\":\"Heap_AllocRate\",\n-   \"value\":\"1\"\n-   },\n-   {\n-   \"dimension\":\"Shard_Size_In_Bytes\",\n-   \"value\":\"10\"\n-   }\n-   ]\n-   },\n-   {\n-   \"index_name\":\"pmc\",\n-   \"shard_id\":0,\n-   \"temperature\":[\n-   {\n-   \"dimension\":\"CPU_Utilization\",\n-   \"value\":\"1\"\n-   },\n-   {\n-   \"dimension\":\"Heap_AllocRate\",\n-   \"value\":\"1\"\n-   },\n-   {\n-   \"dimension\":\"Shard_Size_In_Bytes\",\n-   \"value\":\"9\"\n-   }\n-   ]\n-   },\n-   {\n-   \"index_name\":\"pmc\",\n-   \"shard_id\":2,\n-   \"temperature\":[\n-   {\n-   \"dimension\":\"CPU_Utilization\",\n-   \"value\":\"0\"\n-   },\n-   {\n-   \"dimension\":\"Heap_AllocRate\",\n-   \"value\":\"0\"\n-   },\n-   {\n-   \"dimension\":\"Shard_Size_In_Bytes\",\n-   \"value\":\"9\"\n-   }\n-   ]\n-   }\n-   ],\n-   \"max\":{\n-   \"index_name\":\"pmc\",\n-   \"shard_id\":4,\n-   \"temperature\":[\n-   {\n-   \"dimension\":\"CPU_Utilization\",\n-   \"value\":\"1\"\n-   },\n-   {\n-   \"dimension\":\"Heap_AllocRate\",\n-   \"value\":\"1\"\n-   },\n-   {\n-   \"dimension\":\"Shard_Size_In_Bytes\",\n-   \"value\":\"10\"\n-   }\n-   ]\n-   },\n-   \"min\":{\n-   \"index_name\":\"pmc\",\n-   \"shard_id\":0,\n-   \"temperature\":[\n-   {\n-   \"dimension\":\"CPU_Utilization\",\n-   \"value\":\"1\"\n-   },\n-   {\n-   \"dimension\":\"Heap_AllocRate\",\n-   \"value\":\"1\"\n-   },\n-   {\n-   \"dimension\":\"Shard_Size_In_Bytes\",\n-   \"value\":\"9\"\n-   }\n-   ]\n-   },\n-   \"zone\":\"LUKE_WARM\"\n-   },\n-   {\n-   \"all_shards\":[],\n-   \"zone\":\"COLD\"\n-   }\n-   ],\n-   \"dimension\":\"Shard_Size_In_Bytes\",\n-   \"mean\":10,\n-   \"numShards\":3,\n-   \"timestamp\":1591056310990,\n-   \"total\":7631604.33333333\n-   },\n-   {\n-   \"NodeLevelZoneSummary\":[\n-   {\n-   \"all_shards\":[],\n-   \"zone\":\"HOT\"\n-   },\n-   {\n-   \"all_shards\":[],\n-   \"zone\":\"WARM\"\n-   },\n-   {\n-   \"all_shards\":[\n-   {\n-   \"index_name\":\"pmc\",\n-   \"shard_id\":0,\n-   \"temperature\":[\n-   {\n-   \"dimension\":\"CPU_Utilization\",\n-   \"value\":\"1\"\n-   },\n-   {\n-   \"dimension\":\"Heap_AllocRate\",\n-   \"value\":\"1\"\n-   },\n-   {\n-   \"dimension\":\"Shard_Size_In_Bytes\",\n-   \"value\":\"9\"\n-   }\n-   ]\n-   },\n-   {\n-   \"index_name\":\"pmc\",\n-   \"shard_id\":4,\n-   \"temperature\":[\n-   {\n-   \"dimension\":\"CPU_Utilization\",\n-   \"value\":\"1\"\n-   },\n-   {\n-   \"dimension\":\"Heap_AllocRate\",\n-   \"value\":\"1\"\n-   },\n-   {\n-   \"dimension\":\"Shard_Size_In_Bytes\",\n-   \"value\":\"10\"\n-   }\n-   ]\n-   },\n-   {\n-   \"index_name\":\"pmc\",\n-   \"shard_id\":2,\n-   \"temperature\":[\n-   {\n-   \"dimension\":\"CPU_Utilization\",\n-   \"value\":\"0\"\n-   },\n-   {\n-   \"dimension\":\"Heap_AllocRate\",\n-   \"value\":\"0\"\n-   },\n-   {\n-   \"dimension\":\"Shard_Size_In_Bytes\",\n-   \"value\":\"9\"\n-   }\n-   ]\n-   }\n-   ],\n-   \"max\":{\n-   \"index_name\":\"pmc\",\n-   \"shard_id\":0,\n-   \"temperature\":[\n-   {\n-   \"dimension\":\"CPU_Utilization\",\n-   \"value\":\"1\"\n-   },\n-   {\n-   \"dimension\":\"Heap_AllocRate\",\n-   \"value\":\"1\"\n-   },\n-   {\n-   \"dimension\":\"Shard_Size_In_Bytes\",\n-   \"value\":\"9\"\n-   }\n-   ]\n-   },\n-   \"min\":{\n-   \"index_name\":\"pmc\",\n-   \"shard_id\":2,\n-   \"temperature\":[\n-   {\n-   \"dimension\":\"CPU_Utilization\",\n-   \"value\":\"0\"\n-   },\n-   {\n-   \"dimension\":\"Heap_AllocRate\",\n-   \"value\":\"0\"\n-   },\n-   {\n-   \"dimension\":\"Shard_Size_In_Bytes\",\n-   \"value\":\"9\"\n-   }\n-   ]\n-   },\n-   \"zone\":\"LUKE_WARM\"\n-   },\n-   {\n-   \"all_shards\":[],\n-   \"zone\":\"COLD\"\n-   }\n-   ],\n-   \"dimension\":\"Heap_AllocRate\",\n-   \"mean\":1,\n-   \"numShards\":3,\n-   \"timestamp\":1591056310990,\n-   \"total\":7429635.38060667\n-   }\n-   ]\n-\n-=======\n-   * {\n+   *{\n    * \"AllTemperatureDimensions\":[\n    * {\n    * \"NodeLevelDimensionalSummary\":[\n    * {\n-   * \"dimension\":\"CPU_Utilization\",\n-   * \"mean\":1,\n-   * \"total\":0.113345915412554,\n-   * \"numShards\":3,\n    * \"NodeLevelZoneSummary\":[\n    * {\n-   * \"zone\":\"HOT\",\n-   * \"all_shards\":[\n-   * ]\n+   * \"all_shards\":[],\n+   * \"zone\":\"HOT\"\n    * },\n    * {\n-   * \"zone\":\"WARM\",\n    * \"all_shards\":[\n    * {\n    * \"index_name\":\"pmc\",\n-   * \"shard_id\":0,\n+   * \"shard_id\":4,\n    * \"temperature\":[\n    * {\n    * \"dimension\":\"CPU_Utilization\",\n-   * \"value\":\"2\"\n+   * \"value\":\"1\"\n    * },\n    * {\n    * \"dimension\":\"Heap_AllocRate\",\n-   * \"value\":\"5\"\n+   * \"value\":\"1\"\n+   * },\n+   * {\n+   * \"dimension\":\"Shard_Size_In_Bytes\",\n+   * \"value\":\"10\"\n    * }\n    * ]\n    * }\n-   * ]\n+   * ],\n+   * \"zone\":\"WARM\"\n    * },\n    * {\n-   * \"zone\":\"LUKE_WARM\",\n    * \"all_shards\":[\n    * {\n    * \"index_name\":\"pmc\",\n-   * \"shard_id\":2,\n+   * \"shard_id\":0,\n    * \"temperature\":[\n    * {\n    * \"dimension\":\"CPU_Utilization\",\n"}}, {"oid": "d6e40462d34298cd244b46a2ef464cb50fff6a33", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/d6e40462d34298cd244b46a2ef464cb50fff6a33", "message": "Emitting Empty Flow Unit in case of No flow units received", "committedDate": "2020-06-10T02:54:26Z", "type": "commit"}, {"oid": "76749cf1e13f8778b61be68670e3b1e49079c4e7", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/76749cf1e13f8778b61be68670e3b1e49079c4e7", "message": "CheckStyle Errors", "committedDate": "2020-06-10T03:03:03Z", "type": "commit"}]}