{"pr_number": 231, "pr_title": "Setting the Healthy/Unhealhy Context for Temp Profile Dimensions RCAs", "pr_createdAt": "2020-06-11T14:55:56Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/231", "timeline": [{"oid": "29e6b58ece5e62a07299d86185977df7bdcd1ffa", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/29e6b58ece5e62a07299d86185977df7bdcd1ffa", "message": "Setting the Healthy/Unhealhy Context for Temperature Profile Dimensions RCAs", "committedDate": "2020-06-11T14:49:10Z", "type": "commit"}, {"oid": "7fa741c5295f98901644162fddc57b3984be968d", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/7fa741c5295f98901644162fddc57b3984be968d", "message": "Checkstyle Errors", "committedDate": "2020-06-11T15:05:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyMzY3NQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/231#discussion_r439023675", "bodyText": "we should use snake case for static variables", "author": "rguo-aws", "createdAt": "2020-06-11T19:36:40Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java", "diffHunk": "@@ -88,13 +88,16 @@\n public class ElasticSearchAnalysisGraph extends AnalysisGraph {\n \n   private static final Logger LOG = LogManager.getLogger(ElasticSearchAnalysisGraph.class);\n+  private static final int rcaPeriod = 12;", "originalCommit": "7fa741c5295f98901644162fddc57b3984be968d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEwMDgzMQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/231#discussion_r439100831", "bodyText": "Done", "author": "aditjind", "createdAt": "2020-06-11T22:14:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyMzY3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "a276233edc3946634767d953a872b8ae82e025ef", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java\nindex bfd0fb8d..cda1077c 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java\n\n@@ -88,16 +88,16 @@ import org.apache.logging.log4j.Logger;\n public class ElasticSearchAnalysisGraph extends AnalysisGraph {\n \n   private static final Logger LOG = LogManager.getLogger(ElasticSearchAnalysisGraph.class);\n-  private static final int rcaPeriod = 12;\n-  private static final int evaluationIntervalSeconds = 5;\n+  private static final int RCA_PERIOD = 12;\n+  private static final int EVALUATION_INTERVAL_SECONDS = 5;\n \n \n   @Override\n   public void construct() {\n-    Metric heapUsed = new Heap_Used(evaluationIntervalSeconds);\n-    Metric gcEvent = new GC_Collection_Event(evaluationIntervalSeconds);\n-    Metric heapMax = new Heap_Max(evaluationIntervalSeconds);\n-    Metric gc_Collection_Time = new GC_Collection_Time(evaluationIntervalSeconds);\n+    Metric heapUsed = new Heap_Used(EVALUATION_INTERVAL_SECONDS);\n+    Metric gcEvent = new GC_Collection_Event(EVALUATION_INTERVAL_SECONDS);\n+    Metric heapMax = new Heap_Max(EVALUATION_INTERVAL_SECONDS);\n+    Metric gc_Collection_Time = new GC_Collection_Time(EVALUATION_INTERVAL_SECONDS);\n     Metric cpuUtilizationGroupByOperation = new AggregateMetric(1, CPU_Utilization.NAME,\n             AggregateFunction.SUM,\n             MetricsDB.AVG, CommonDimension.OPERATION.toString());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyNDU0MA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/231#discussion_r439024540", "bodyText": "Ideally we should remove this argument in constructor and fix the value to 5 seconds in base class. Joydeep wanted us to refactor this long time ago", "author": "rguo-aws", "createdAt": "2020-06-11T19:38:25Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java", "diffHunk": "@@ -88,13 +88,16 @@\n public class ElasticSearchAnalysisGraph extends AnalysisGraph {\n \n   private static final Logger LOG = LogManager.getLogger(ElasticSearchAnalysisGraph.class);\n+  private static final int rcaPeriod = 12;\n+  private static final int evaluationIntervalSeconds = 5;\n+\n \n   @Override\n   public void construct() {\n-    Metric heapUsed = new Heap_Used(5);\n-    Metric gcEvent = new GC_Collection_Event(5);\n-    Metric heapMax = new Heap_Max(5);\n-    Metric gc_Collection_Time = new GC_Collection_Time(5);\n+    Metric heapUsed = new Heap_Used(evaluationIntervalSeconds);", "originalCommit": "7fa741c5295f98901644162fddc57b3984be968d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA5OTk4OA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/231#discussion_r439099988", "bodyText": "I can see that this the evaluationInterval of the AggregateMetric is 1s. I dont know if there is any reason for that. If not, we should remove it altogether from here and fix its value to constant 5 seconds.", "author": "aditjind", "createdAt": "2020-06-11T22:12:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyNDU0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEwMjE0OA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/231#discussion_r439102148", "bodyText": "let's create a separate issue to keep track of that.", "author": "rguo-aws", "createdAt": "2020-06-11T22:18:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAyNDU0MA=="}], "type": "inlineReview", "revised_code": {"commit": "a276233edc3946634767d953a872b8ae82e025ef", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java\nindex bfd0fb8d..cda1077c 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java\n\n@@ -88,16 +88,16 @@ import org.apache.logging.log4j.Logger;\n public class ElasticSearchAnalysisGraph extends AnalysisGraph {\n \n   private static final Logger LOG = LogManager.getLogger(ElasticSearchAnalysisGraph.class);\n-  private static final int rcaPeriod = 12;\n-  private static final int evaluationIntervalSeconds = 5;\n+  private static final int RCA_PERIOD = 12;\n+  private static final int EVALUATION_INTERVAL_SECONDS = 5;\n \n \n   @Override\n   public void construct() {\n-    Metric heapUsed = new Heap_Used(evaluationIntervalSeconds);\n-    Metric gcEvent = new GC_Collection_Event(evaluationIntervalSeconds);\n-    Metric heapMax = new Heap_Max(evaluationIntervalSeconds);\n-    Metric gc_Collection_Time = new GC_Collection_Time(evaluationIntervalSeconds);\n+    Metric heapUsed = new Heap_Used(EVALUATION_INTERVAL_SECONDS);\n+    Metric gcEvent = new GC_Collection_Event(EVALUATION_INTERVAL_SECONDS);\n+    Metric heapMax = new Heap_Max(EVALUATION_INTERVAL_SECONDS);\n+    Metric gc_Collection_Time = new GC_Collection_Time(EVALUATION_INTERVAL_SECONDS);\n     Metric cpuUtilizationGroupByOperation = new AggregateMetric(1, CPU_Utilization.NAME,\n             AggregateFunction.SUM,\n             MetricsDB.AVG, CommonDimension.OPERATION.toString());\n"}}, {"oid": "a276233edc3946634767d953a872b8ae82e025ef", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/a276233edc3946634767d953a872b8ae82e025ef", "message": "Moving the Static Variables to Camel Case", "committedDate": "2020-06-11T22:14:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTExODgxNw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/231#discussion_r439118817", "bodyText": "Thank You for making this change.", "author": "khushbr", "createdAt": "2020-06-11T23:09:15Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ElasticSearchAnalysisGraph.java", "diffHunk": "@@ -88,13 +88,16 @@\n public class ElasticSearchAnalysisGraph extends AnalysisGraph {\n \n   private static final Logger LOG = LogManager.getLogger(ElasticSearchAnalysisGraph.class);\n+  private static final int RCA_PERIOD = 12;\n+  private static final int EVALUATION_INTERVAL_SECONDS = 5;\n+\n \n   @Override\n   public void construct() {\n-    Metric heapUsed = new Heap_Used(5);\n-    Metric gcEvent = new GC_Collection_Event(5);\n-    Metric heapMax = new Heap_Max(5);\n-    Metric gc_Collection_Time = new GC_Collection_Time(5);\n+    Metric heapUsed = new Heap_Used(EVALUATION_INTERVAL_SECONDS);\n+    Metric gcEvent = new GC_Collection_Event(EVALUATION_INTERVAL_SECONDS);\n+    Metric heapMax = new Heap_Max(EVALUATION_INTERVAL_SECONDS);\n+    Metric gc_Collection_Time = new GC_Collection_Time(EVALUATION_INTERVAL_SECONDS);", "originalCommit": "a276233edc3946634767d953a872b8ae82e025ef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEyNjk5MA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/231#discussion_r439126990", "bodyText": "nit: Consider moving this to line 79 and add the context information as well.", "author": "khushbr", "createdAt": "2020-06-11T23:37:48Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/rca/temperature/dimension/CpuUtilDimensionTemperatureRca.java", "diffHunk": "@@ -62,12 +64,18 @@ public void generateFlowUnitListFromWire(FlowUnitOperationArgWrapper args) {\n \n     @Override\n     public DimensionalTemperatureFlowUnit operate() {\n-        DimensionalTemperatureFlowUnit flowUnit = DimensionalTemperatureCalculator.getTemperatureForDimension(\n+        DimensionalTemperatureFlowUnit cpuUtilTemperatureFlowUnit = DimensionalTemperatureCalculator.getTemperatureForDimension(\n                 shardStore,\n                 TemperatureVector.Dimension.CPU_Utilization,\n                 CPU_UTIL_BY_SHARD,\n                 AVG_CPU_UTIL_BY_SHARD, CPU_UTIL_SHARD_INDEPENDENT, CPU_UTIL_PEAK_USAGE,\n                 THRESHOLD_NORMALIZED_VAL_FOR_HEAT_ZONE_ASSIGNMENT);\n-        return flowUnit;\n+        LOG.info(\"CPU Utilization temperature calculated: {}\",", "originalCommit": "a276233edc3946634767d953a872b8ae82e025ef", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}