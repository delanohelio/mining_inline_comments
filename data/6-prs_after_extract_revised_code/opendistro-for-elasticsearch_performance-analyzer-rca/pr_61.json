{"pr_number": 61, "pr_title": "Add api for rca", "pr_createdAt": "2020-01-18T00:44:13Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/61", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI4NDQ0OQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/61#discussion_r369284449", "bodyText": "Please add a javadoc comment for the class", "author": "yojs", "createdAt": "2020-01-21T22:45:21Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/QueryUtils.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.jooq.DSLContext;\n+import org.jooq.Record;\n+import org.jooq.SelectJoinStep;\n+import org.jooq.impl.DSL;\n+\n+\n+public class QueryUtils {", "originalCommit": "abde9d16cc5795e541e4cbebbf63f06e095de184", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMxMDA2OQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/61#discussion_r370310069", "bodyText": "Added", "author": "spardeepsingh", "createdAt": "2020-01-23T19:25:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI4NDQ0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "8ad0da4a276a2da92e8f528baedb35dc619fd752", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/QueryUtils.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/QueryUtils.java\nindex 646bdef3..da8b9e6f 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/QueryUtils.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/QueryUtils.java\n\n@@ -24,15 +24,26 @@ import org.jooq.Record;\n import org.jooq.SelectJoinStep;\n import org.jooq.impl.DSL;\n \n-\n+/**\n+ * A utility class to query cluster, node and resource level summary for a rca\n+ */\n public class QueryUtils {\n \n+  /**\n+   * This function fetches cluster, node and resource summary records for a rca\n+   *\n+   * @param ctx DSLContext\n+   * @param rca The rca that will be queried\n+   * @param summaryTableToForeignKeyMap Map of summaryTables which will be queried to get rca's summary\n+   * @param validTables The tables currently present in database\n+   * @return list of rca records representing node and resource level information for input rca\n+   */\n   public static List<Record> getRcaRecordList(DSLContext ctx,\n                                               String rca,\n                                               Map<String, String> summaryTableToForeignKeyMap,\n                                               Set<String> validTables) {\n     SelectJoinStep<Record> rcaQuery = ctx.select().from(rca);\n-    long timestamp = QueryUtils.getMaxTimestampLessThanOrEqualTo(ctx, rca, System.currentTimeMillis());\n+    long timestamp = getMaxTimestampLessThanOrEqualTo(ctx, rca, System.currentTimeMillis());\n     return performSummaryJoin(rcaQuery, validTables, summaryTableToForeignKeyMap)\n             .where(DSL.field(ResourceFlowUnit.SQL_SCHEMA_CONSTANTS.TIMESTAMP_COL_NAME).equal(timestamp))\n             .fetch();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI4NDU4Mg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/61#discussion_r369284582", "bodyText": "Please add a javadoc comment for every public method.", "author": "yojs", "createdAt": "2020-01-21T22:45:43Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/QueryUtils.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.jooq.DSLContext;\n+import org.jooq.Record;\n+import org.jooq.SelectJoinStep;\n+import org.jooq.impl.DSL;\n+\n+\n+public class QueryUtils {\n+\n+  public static List<Record> getRcaRecordList(DSLContext ctx,", "originalCommit": "abde9d16cc5795e541e4cbebbf63f06e095de184", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMxMDEzNQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/61#discussion_r370310135", "bodyText": "Added", "author": "spardeepsingh", "createdAt": "2020-01-23T19:25:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI4NDU4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "8ad0da4a276a2da92e8f528baedb35dc619fd752", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/QueryUtils.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/QueryUtils.java\nindex 646bdef3..da8b9e6f 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/QueryUtils.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/QueryUtils.java\n\n@@ -24,15 +24,26 @@ import org.jooq.Record;\n import org.jooq.SelectJoinStep;\n import org.jooq.impl.DSL;\n \n-\n+/**\n+ * A utility class to query cluster, node and resource level summary for a rca\n+ */\n public class QueryUtils {\n \n+  /**\n+   * This function fetches cluster, node and resource summary records for a rca\n+   *\n+   * @param ctx DSLContext\n+   * @param rca The rca that will be queried\n+   * @param summaryTableToForeignKeyMap Map of summaryTables which will be queried to get rca's summary\n+   * @param validTables The tables currently present in database\n+   * @return list of rca records representing node and resource level information for input rca\n+   */\n   public static List<Record> getRcaRecordList(DSLContext ctx,\n                                               String rca,\n                                               Map<String, String> summaryTableToForeignKeyMap,\n                                               Set<String> validTables) {\n     SelectJoinStep<Record> rcaQuery = ctx.select().from(rca);\n-    long timestamp = QueryUtils.getMaxTimestampLessThanOrEqualTo(ctx, rca, System.currentTimeMillis());\n+    long timestamp = getMaxTimestampLessThanOrEqualTo(ctx, rca, System.currentTimeMillis());\n     return performSummaryJoin(rcaQuery, validTables, summaryTableToForeignKeyMap)\n             .where(DSL.field(ResourceFlowUnit.SQL_SCHEMA_CONSTANTS.TIMESTAMP_COL_NAME).equal(timestamp))\n             .fetch();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI4NTUwMw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/61#discussion_r369285503", "bodyText": "we can just have the return here without the variable name ?", "author": "yojs", "createdAt": "2020-01-21T22:48:02Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/PersistorBase.java", "diffHunk": "@@ -97,6 +99,11 @@ public synchronized String read() {\n     return jsonResponse;\n   }\n \n+  public synchronized String readRca(String rca) {\n+    String jsonResponse = readRcaTable(rca);", "originalCommit": "abde9d16cc5795e541e4cbebbf63f06e095de184", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMxMDI0NA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/61#discussion_r370310244", "bodyText": "Done", "author": "spardeepsingh", "createdAt": "2020-01-23T19:26:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI4NTUwMw=="}], "type": "inlineReview", "revised_code": {"commit": "8ad0da4a276a2da92e8f528baedb35dc619fd752", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/PersistorBase.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/PersistorBase.java\nindex 599ed99c..bead02be 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/PersistorBase.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/PersistorBase.java\n\n@@ -99,9 +103,8 @@ public abstract class PersistorBase implements Persistable {\n     return jsonResponse;\n   }\n \n-  public synchronized String readRca(String rca) {\n-    String jsonResponse = readRcaTable(rca);\n-    return jsonResponse;\n+  public synchronized RcaResponse readRca(String rca) {\n+    return readRcaTable(rca);\n   }\n \n   public synchronized void openNewDBFile() throws SQLException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI4NTY3MQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/61#discussion_r369285671", "bodyText": "javadoc comments", "author": "yojs", "createdAt": "2020-01-21T22:48:31Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/response/NodeSummaryResponse.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.response;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class NodeSummaryResponse {", "originalCommit": "abde9d16cc5795e541e4cbebbf63f06e095de184", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ad0da4a276a2da92e8f528baedb35dc619fd752", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/response/NodeSummaryResponse.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/response/NodeSummaryResponse.java\nindex a4194232..73bcbd78 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/response/NodeSummaryResponse.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/response/NodeSummaryResponse.java\n\n@@ -17,16 +17,21 @@ package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.response;\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Objects;\n \n+/**\n+ * NodeSummaryResponse contains summary of different resources of data nodes and also contains info like  NodeId\n+ * and ip address of node.\n+ */\n public class NodeSummaryResponse {\n   private String nodeId;\n   private String ipAddress;\n-  private List<ResourceSummaryResponse> resourceList;\n+  private List<ResourceSummaryResponse> resourceContext;\n \n   public NodeSummaryResponse(String nodeId, String ipAddress) {\n     this.nodeId = nodeId;\n     this.ipAddress = ipAddress;\n-    this.resourceList = new ArrayList<>();\n+    this.resourceContext = new ArrayList<>();\n   }\n \n   public String getNodeId() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI4NjE4Mg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/61#discussion_r369286182", "bodyText": "please use a JSONObject or something to create json.", "author": "yojs", "createdAt": "2020-01-21T22:50:05Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/response/RcaResponse.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.response;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class RcaResponse {\n+  private String rcaName;\n+  private String state;\n+  private Integer numOfNodes;\n+  private Integer numOfUnhealthyNodes;\n+  private String timeStamp;\n+  private List<NodeSummaryResponse> nodeSummaryResponseList;\n+\n+  public RcaResponse(String rcaName, String state, String timeStamp) {\n+    this.rcaName = rcaName;\n+    this.state = state;\n+    this.timeStamp = timeStamp;\n+  }\n+\n+  public RcaResponse(String rcaName,\n+                     String state,\n+                     int numOfNodes,\n+                     int numOfUnhealthyNodes,\n+                     String timeStamp) {\n+    this.rcaName = rcaName;\n+    this.state = state;\n+    this.numOfNodes = numOfNodes;\n+    this.numOfUnhealthyNodes = numOfUnhealthyNodes;\n+    this.timeStamp = timeStamp;\n+    this.nodeSummaryResponseList = new ArrayList<>();\n+  }\n+\n+  public String getRcaName() {\n+    return rcaName;\n+  }\n+\n+  public String getState() {\n+    return state;\n+  }\n+\n+  public Integer getNumOfNodes() {\n+    return numOfNodes;\n+  }\n+\n+  public Integer getNumOfUnhealthyNodes() {\n+    return numOfUnhealthyNodes;\n+  }\n+\n+  public String getTimeStamp() {\n+    return timeStamp;\n+  }\n+\n+  public void addNodeSummaryResponse(NodeSummaryResponse nodeSummaryResponse) {\n+    this.nodeSummaryResponseList.add(nodeSummaryResponse);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"{\"", "originalCommit": "abde9d16cc5795e541e4cbebbf63f06e095de184", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMxMDM2Ng==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/61#discussion_r370310366", "bodyText": "Done", "author": "spardeepsingh", "createdAt": "2020-01-23T19:26:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI4NjE4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "8ad0da4a276a2da92e8f528baedb35dc619fd752", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/response/RcaResponse.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/response/RcaResponse.java\nindex 8e55fe1d..483230ed 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/response/RcaResponse.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/response/RcaResponse.java\n\n@@ -17,36 +17,41 @@ package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.response;\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Objects;\n \n+/**\n+ * RcaResponse contains cluster level info such as cluster state, number of healthy and unhealthy nodes\n+ * for a particular rca.\n+ */\n public class RcaResponse {\n-  private String rcaName;\n+  private String name;\n   private String state;\n   private Integer numOfNodes;\n   private Integer numOfUnhealthyNodes;\n   private String timeStamp;\n-  private List<NodeSummaryResponse> nodeSummaryResponseList;\n+  private List<NodeSummaryResponse> summary;\n \n-  public RcaResponse(String rcaName, String state, String timeStamp) {\n-    this.rcaName = rcaName;\n+  public RcaResponse(String name, String state, String timeStamp) {\n+    this.name = name;\n     this.state = state;\n     this.timeStamp = timeStamp;\n   }\n \n-  public RcaResponse(String rcaName,\n+  public RcaResponse(String name,\n                      String state,\n                      int numOfNodes,\n                      int numOfUnhealthyNodes,\n                      String timeStamp) {\n-    this.rcaName = rcaName;\n+    this.name = name;\n     this.state = state;\n     this.numOfNodes = numOfNodes;\n     this.numOfUnhealthyNodes = numOfUnhealthyNodes;\n     this.timeStamp = timeStamp;\n-    this.nodeSummaryResponseList = new ArrayList<>();\n+    this.summary = new ArrayList<>();\n   }\n \n-  public String getRcaName() {\n-    return rcaName;\n+  public String getName() {\n+    return name;\n   }\n \n   public String getState() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMzMzU1Mg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/61#discussion_r369333552", "bodyText": "Same comment as what @yojs said. Use a JSON library to simplify this.", "author": "ktkrg", "createdAt": "2020-01-22T01:41:17Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/response/NodeSummaryResponse.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.response;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class NodeSummaryResponse {\n+  private String nodeId;\n+  private String ipAddress;\n+  private List<ResourceSummaryResponse> resourceList;\n+\n+  public NodeSummaryResponse(String nodeId, String ipAddress) {\n+    this.nodeId = nodeId;\n+    this.ipAddress = ipAddress;\n+    this.resourceList = new ArrayList<>();\n+  }\n+\n+  public String getNodeId() {\n+    return nodeId;\n+  }\n+\n+  public String getIpAddress() {\n+    return ipAddress;\n+  }\n+\n+  public List<ResourceSummaryResponse> getResourceList() {\n+    return resourceList;\n+  }\n+\n+  public void addResource(ResourceSummaryResponse resource) {\n+    this.resourceList.add(resource);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"{\"\n+            + \"\\\"NodeId\\\" : \\\"\" + nodeId + \"\\\",\"\n+            + \"\\\"IpAddress\\\" : \\\"\" + ipAddress + \"\\\",\"\n+            + \"\\\"ResourceContext\\\" : \" + getResourceSummary()\n+            + '}';\n+  }\n+\n+  private String getResourceSummary() {\n+    StringBuilder builder = new StringBuilder();\n+    builder.append(\"[\");\n+    if (resourceList != null && !resourceList.isEmpty()) {\n+      for (ResourceSummaryResponse resourceSummaryResponse : resourceList) {\n+        builder.append(resourceSummaryResponse.toString()).append(\",\");\n+      }\n+      builder.deleteCharAt(builder.length() - 1);\n+    }\n+    builder.append(\"]\");\n+    return builder.toString();\n+  }", "originalCommit": "abde9d16cc5795e541e4cbebbf63f06e095de184", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMxMDQxNg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/61#discussion_r370310416", "bodyText": "Done", "author": "spardeepsingh", "createdAt": "2020-01-23T19:26:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMzMzU1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "8ad0da4a276a2da92e8f528baedb35dc619fd752", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/response/NodeSummaryResponse.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/response/NodeSummaryResponse.java\nindex a4194232..73bcbd78 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/response/NodeSummaryResponse.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/response/NodeSummaryResponse.java\n\n@@ -17,16 +17,21 @@ package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.response;\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Objects;\n \n+/**\n+ * NodeSummaryResponse contains summary of different resources of data nodes and also contains info like  NodeId\n+ * and ip address of node.\n+ */\n public class NodeSummaryResponse {\n   private String nodeId;\n   private String ipAddress;\n-  private List<ResourceSummaryResponse> resourceList;\n+  private List<ResourceSummaryResponse> resourceContext;\n \n   public NodeSummaryResponse(String nodeId, String ipAddress) {\n     this.nodeId = nodeId;\n     this.ipAddress = ipAddress;\n-    this.resourceList = new ArrayList<>();\n+    this.resourceContext = new ArrayList<>();\n   }\n \n   public String getNodeId() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMzMzU5Mg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/61#discussion_r369333592", "bodyText": "make \"{}\" a constant as well.", "author": "ktkrg", "createdAt": "2020-01-22T01:41:28Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/RcaResponseUtil.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util.RcaConsts.HOT_CLUSTER_SUMMARY_TABLE;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util.RcaConsts.HOT_NODE_SUMMARY_TABLE;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util.RcaConsts.HOT_RESOURCE_SUMMARY_TABLE;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotClusterSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.response.NodeSummaryResponse;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.response.RcaResponse;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.response.ResourceSummaryResponse;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.jooq.Record;\n+\n+public class RcaResponseUtil {\n+\n+  private static final String NULL = \"null\";\n+\n+  public static String convertRcaRecordListIntoJson(String rcaName, List<Record> recordList, Set<String> tableNames) {\n+    com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.response.RcaResponse rcaResponse = null;\n+    Map<String, NodeSummaryResponse> nodeSummaryResponseMap = new HashMap<>();\n+    for (Record record : recordList) {\n+      if (rcaResponse == null) {\n+        rcaResponse = getRcaResponse(rcaName, record, tableNames);\n+      }\n+      if (tableNames.contains(HOT_NODE_SUMMARY_TABLE)) {\n+        String nodeId = getStringFieldValue(record, HotNodeSummary.SQL_SCHEMA_CONSTANTS.NODE_ID_COL_NAME);\n+        NodeSummaryResponse nodeSummaryResponse = nodeSummaryResponseMap.getOrDefault(nodeId,\n+                getNodeSummary(nodeId, record));\n+        if (!nodeSummaryResponseMap.containsKey(nodeId)) {\n+          nodeSummaryResponseMap.put(nodeId, nodeSummaryResponse);\n+          rcaResponse.addNodeSummaryResponse(nodeSummaryResponse);\n+        }\n+        if (tableNames.contains(HOT_RESOURCE_SUMMARY_TABLE)) {\n+          nodeSummaryResponse.addResource(getResourceSummaryResponse(record));\n+        }\n+      }\n+    }\n+    return rcaResponse == null ? \"{}\" : rcaResponse.toString();", "originalCommit": "abde9d16cc5795e541e4cbebbf63f06e095de184", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ad0da4a276a2da92e8f528baedb35dc619fd752", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/RcaResponseUtil.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/RcaResponseUtil.java\nindex b6bba581..6343f446 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/RcaResponseUtil.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/RcaResponseUtil.java\n\n@@ -33,86 +33,67 @@ import java.util.Map;\n import java.util.Set;\n import org.jooq.Record;\n \n-public class RcaResponseUtil {\n \n-  private static final String NULL = \"null\";\n+public class RcaResponseUtil {\n \n-  public static String convertRcaRecordListIntoJson(String rcaName, List<Record> recordList, Set<String> tableNames) {\n-    com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.response.RcaResponse rcaResponse = null;\n+  /**\n+   * This function return RcaResponse object for given list of rca records.\n+   *\n+   * @param rcaName Name of the rca\n+   * @param recordList List of rca records which contains the node and resource level summary for the rca\n+   * @param tableNames All the valid tables present in database\n+   * @return  RcaResponse object for the input list of rca records\n+   */\n+  public static RcaResponse getRcaResponse(String rcaName, List<Record> recordList, Set<String> tableNames) {\n+    RcaResponse rcaResponse = null;\n     Map<String, NodeSummaryResponse> nodeSummaryResponseMap = new HashMap<>();\n     for (Record record : recordList) {\n       if (rcaResponse == null) {\n-        rcaResponse = getRcaResponse(rcaName, record, tableNames);\n+        rcaResponse = getRcaResponseForRecord(rcaName, record, tableNames);\n       }\n       if (tableNames.contains(HOT_NODE_SUMMARY_TABLE)) {\n-        String nodeId = getStringFieldValue(record, HotNodeSummary.SQL_SCHEMA_CONSTANTS.NODE_ID_COL_NAME);\n+        String nodeId = record.get(HotNodeSummary.SQL_SCHEMA_CONSTANTS.NODE_ID_COL_NAME, String.class);\n         NodeSummaryResponse nodeSummaryResponse = nodeSummaryResponseMap.getOrDefault(nodeId,\n                 getNodeSummary(nodeId, record));\n         if (!nodeSummaryResponseMap.containsKey(nodeId)) {\n           nodeSummaryResponseMap.put(nodeId, nodeSummaryResponse);\n-          rcaResponse.addNodeSummaryResponse(nodeSummaryResponse);\n+          rcaResponse.addSummary(nodeSummaryResponse);\n         }\n         if (tableNames.contains(HOT_RESOURCE_SUMMARY_TABLE)) {\n           nodeSummaryResponse.addResource(getResourceSummaryResponse(record));\n         }\n       }\n     }\n-    return rcaResponse == null ? \"{}\" : rcaResponse.toString();\n+    return rcaResponse;\n   }\n \n   private static ResourceSummaryResponse getResourceSummaryResponse(Record record) {\n-    String resourceName = getStringFieldValue(record,\n-            HotResourceSummary.SQL_SCHEMA_CONSTANTS.RESOURCE_TYPE_COL_NAME);\n-    String unitType = getStringFieldValue(record,\n-            HotResourceSummary.SQL_SCHEMA_CONSTANTS.UNIT_TYPE_COL_NAME);\n-    Double threshold = getDoubleFieldValue(record,\n-            HotResourceSummary.SQL_SCHEMA_CONSTANTS.THRESHOLD_COL_NAME);\n-    Double average = getDoubleFieldValue(record,\n-            HotResourceSummary.SQL_SCHEMA_CONSTANTS.AVG_VALUE_COL_NAME);\n-    Double actual = getDoubleFieldValue(record,\n-            HotResourceSummary.SQL_SCHEMA_CONSTANTS.VALUE_COL_NAME);\n-    Double maximum = getDoubleFieldValue(record,\n-            HotResourceSummary.SQL_SCHEMA_CONSTANTS.MAX_VALUE_COL_NAME);\n-    Double minimum = getDoubleFieldValue(record,\n-            HotResourceSummary.SQL_SCHEMA_CONSTANTS.MIN_VALUE_COL_NAME);\n+    String resourceName = record.get(HotResourceSummary.SQL_SCHEMA_CONSTANTS.RESOURCE_TYPE_COL_NAME, String.class);\n+    String unitType = record.get(HotResourceSummary.SQL_SCHEMA_CONSTANTS.UNIT_TYPE_COL_NAME, String.class);\n+    Double threshold = record.get(HotResourceSummary.SQL_SCHEMA_CONSTANTS.THRESHOLD_COL_NAME, Double.class);\n+    Double average = record.get(HotResourceSummary.SQL_SCHEMA_CONSTANTS.AVG_VALUE_COL_NAME, Double.class);\n+    Double actual = record.get(HotResourceSummary.SQL_SCHEMA_CONSTANTS.VALUE_COL_NAME, Double.class);\n+    Double maximum = record.get(HotResourceSummary.SQL_SCHEMA_CONSTANTS.MAX_VALUE_COL_NAME, Double.class);\n+    Double minimum = record.get(HotResourceSummary.SQL_SCHEMA_CONSTANTS.MIN_VALUE_COL_NAME, Double.class);\n \n     return new ResourceSummaryResponse(resourceName, unitType, threshold, actual, average, minimum, maximum);\n   }\n \n-  private static String getStringFieldValue(Record record, String fieldName) {\n-    Object value = record.getValue(fieldName);\n-    return value == null ? NULL : value.toString();\n-  }\n-\n-  private static Double getDoubleFieldValue(Record record, String fieldName) {\n-    String value = getStringFieldValue(record, fieldName);\n-    return value.equals(NULL) ? null : Double.parseDouble(value);\n-  }\n-\n-  private static Integer getIntegerFieldValue(Record record, String fieldName) {\n-    String value = getStringFieldValue(record, fieldName);\n-    return value.equals(NULL) ? null : Integer.parseInt(value);\n-  }\n-\n   private static NodeSummaryResponse getNodeSummary(String nodeId, Record record) {\n-    String ipAddress = record.getValue(HotNodeSummary.SQL_SCHEMA_CONSTANTS.HOST_IP_ADDRESS_COL_NAME).toString();\n+    String ipAddress = record.get(HotNodeSummary.SQL_SCHEMA_CONSTANTS.HOST_IP_ADDRESS_COL_NAME, String.class);\n     return new NodeSummaryResponse(nodeId, ipAddress);\n   }\n \n-  private static RcaResponse getRcaResponse(String rcaName, Record record, Set<String> tableNames) {\n-    String timestamp = getStringFieldValue(record,\n-            ResourceFlowUnit.SQL_SCHEMA_CONSTANTS.TIMESTAMP_COL_NAME);\n-    String state = getStringFieldValue(record,\n-            ResourceContext.SQL_SCHEMA_CONSTANTS.STATE_COL_NAME);\n+  private static RcaResponse getRcaResponseForRecord(String rcaName, Record record, Set<String> tableNames) {\n+    String timestamp = record.get(ResourceFlowUnit.SQL_SCHEMA_CONSTANTS.TIMESTAMP_COL_NAME, String.class);\n+    String state = record.get(ResourceContext.SQL_SCHEMA_CONSTANTS.STATE_COL_NAME, String.class);\n \n     if (!tableNames.contains(HOT_CLUSTER_SUMMARY_TABLE)) {\n       return new RcaResponse(rcaName, state, timestamp);\n     }\n \n-    Integer numOfNodes = getIntegerFieldValue(record,\n-            HotClusterSummary.SQL_SCHEMA_CONSTANTS.NUM_OF_NODES_COL_NAME);\n-    Integer numOfUnhealthyNodes = getIntegerFieldValue(record,\n-            HotClusterSummary.SQL_SCHEMA_CONSTANTS.NUM_OF_UNHEALTHY_NODES_COL_NAME);\n+    Integer numOfNodes = record.get(HotClusterSummary.SQL_SCHEMA_CONSTANTS.NUM_OF_NODES_COL_NAME, Integer.class);\n+    Integer numOfUnhealthyNodes = record.get(HotClusterSummary.SQL_SCHEMA_CONSTANTS.NUM_OF_UNHEALTHY_NODES_COL_NAME, Integer.class);\n \n     return new RcaResponse(rcaName, state, numOfNodes, numOfUnhealthyNodes, timestamp);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM0NDYwMg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/61#discussion_r369344602", "bodyText": "I think it would make things a lot more clear if we move those constant strings into each Rca/Summary class itself instead of adding it here.  Maybe we can create a static member variable in each RCA/summary class ?", "author": "rguo-aws", "createdAt": "2020-01-22T02:33:11Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/RcaConsts.java", "diffHunk": "@@ -53,4 +57,9 @@\n   public static final long rcaConfPollerPeriodicity = 5;\n   public static final long nodeRolePollerPeriodicity = 60;\n   public static final TimeUnit rcaPollerPeriodicityTimeUnit = TimeUnit.SECONDS;\n+\n+  public static final String HOT_NODE_SUMMARY_TABLE = HotNodeSummary.class.getSimpleName();\n+  public static final String HOT_CLUSTER_SUMMARY_TABLE = HotClusterSummary.class.getSimpleName();\n+  public static final String HOT_RESOURCE_SUMMARY_TABLE = HotResourceSummary.class.getSimpleName();\n+  public static final String HIGH_HEAP_USAGE_CLUSTER_RCA_TABLE = HighHeapUsageClusterRca.class.getSimpleName();", "originalCommit": "abde9d16cc5795e541e4cbebbf63f06e095de184", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6ca4b934c68d452a180d807f751a3681b0c20b52", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/RcaConsts.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/RcaConsts.java\nindex 9169501b..4badf4ee 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/RcaConsts.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/RcaConsts.java\n\n@@ -58,6 +64,19 @@ public class RcaConsts {\n   public static final long nodeRolePollerPeriodicity = 60;\n   public static final TimeUnit rcaPollerPeriodicityTimeUnit = TimeUnit.SECONDS;\n \n+  /**\n+   * Class defining constants that are mostly used in tag assignment and comparison context.\n+   */\n+  public static class RcaTagConstants {\n+\n+    public static final String SEPARATOR = \",\";\n+\n+    public static final String TAG_LOCUS = \"locus\";\n+    public static final String TAG_AGGREGATE_UPSTREAM = \"aggregate-upstream\";\n+\n+    public static final String LOCUS_DATA_NODE = \"data-node\";\n+    public static final String LOCUS_MASTER_NODE = \"master-node\";\n+  }\n   public static final String HOT_NODE_SUMMARY_TABLE = HotNodeSummary.class.getSimpleName();\n   public static final String HOT_CLUSTER_SUMMARY_TABLE = HotClusterSummary.class.getSimpleName();\n   public static final String HOT_RESOURCE_SUMMARY_TABLE = HotResourceSummary.class.getSimpleName();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM3MDM5NA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/61#discussion_r369370394", "bodyText": "We don't have to create a method for each data type. Can we use this API in JOOQ record instead ?\nget\u200b(String\u00a0fieldName,\u00a0Class<? extends T>\u00a0type). And as I mentioned below, there seems no need to create an additional object to store the value of the HotSummary record. We can use the Record directly.", "author": "rguo-aws", "createdAt": "2020-01-22T04:59:40Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/RcaResponseUtil.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util;\n+\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util.RcaConsts.HOT_CLUSTER_SUMMARY_TABLE;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util.RcaConsts.HOT_NODE_SUMMARY_TABLE;\n+import static com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util.RcaConsts.HOT_RESOURCE_SUMMARY_TABLE;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.contexts.ResourceContext;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.flow_units.ResourceFlowUnit;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotClusterSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotNodeSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.summaries.HotResourceSummary;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.response.NodeSummaryResponse;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.response.RcaResponse;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.response.ResourceSummaryResponse;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.jooq.Record;\n+\n+public class RcaResponseUtil {\n+\n+  private static final String NULL = \"null\";\n+\n+  public static String convertRcaRecordListIntoJson(String rcaName, List<Record> recordList, Set<String> tableNames) {\n+    com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.response.RcaResponse rcaResponse = null;\n+    Map<String, NodeSummaryResponse> nodeSummaryResponseMap = new HashMap<>();\n+    for (Record record : recordList) {\n+      if (rcaResponse == null) {\n+        rcaResponse = getRcaResponse(rcaName, record, tableNames);\n+      }\n+      if (tableNames.contains(HOT_NODE_SUMMARY_TABLE)) {\n+        String nodeId = getStringFieldValue(record, HotNodeSummary.SQL_SCHEMA_CONSTANTS.NODE_ID_COL_NAME);\n+        NodeSummaryResponse nodeSummaryResponse = nodeSummaryResponseMap.getOrDefault(nodeId,\n+                getNodeSummary(nodeId, record));\n+        if (!nodeSummaryResponseMap.containsKey(nodeId)) {\n+          nodeSummaryResponseMap.put(nodeId, nodeSummaryResponse);\n+          rcaResponse.addNodeSummaryResponse(nodeSummaryResponse);\n+        }\n+        if (tableNames.contains(HOT_RESOURCE_SUMMARY_TABLE)) {\n+          nodeSummaryResponse.addResource(getResourceSummaryResponse(record));\n+        }\n+      }\n+    }\n+    return rcaResponse == null ? \"{}\" : rcaResponse.toString();\n+  }\n+\n+  private static ResourceSummaryResponse getResourceSummaryResponse(Record record) {\n+    String resourceName = getStringFieldValue(record,\n+            HotResourceSummary.SQL_SCHEMA_CONSTANTS.RESOURCE_TYPE_COL_NAME);\n+    String unitType = getStringFieldValue(record,\n+            HotResourceSummary.SQL_SCHEMA_CONSTANTS.UNIT_TYPE_COL_NAME);\n+    Double threshold = getDoubleFieldValue(record,\n+            HotResourceSummary.SQL_SCHEMA_CONSTANTS.THRESHOLD_COL_NAME);\n+    Double average = getDoubleFieldValue(record,\n+            HotResourceSummary.SQL_SCHEMA_CONSTANTS.AVG_VALUE_COL_NAME);\n+    Double actual = getDoubleFieldValue(record,\n+            HotResourceSummary.SQL_SCHEMA_CONSTANTS.VALUE_COL_NAME);\n+    Double maximum = getDoubleFieldValue(record,\n+            HotResourceSummary.SQL_SCHEMA_CONSTANTS.MAX_VALUE_COL_NAME);\n+    Double minimum = getDoubleFieldValue(record,\n+            HotResourceSummary.SQL_SCHEMA_CONSTANTS.MIN_VALUE_COL_NAME);\n+\n+    return new ResourceSummaryResponse(resourceName, unitType, threshold, actual, average, minimum, maximum);\n+  }\n+\n+  private static String getStringFieldValue(Record record, String fieldName) {\n+    Object value = record.getValue(fieldName);\n+    return value == null ? NULL : value.toString();\n+  }\n+\n+  private static Double getDoubleFieldValue(Record record, String fieldName) {\n+    String value = getStringFieldValue(record, fieldName);\n+    return value.equals(NULL) ? null : Double.parseDouble(value);\n+  }\n+\n+  private static Integer getIntegerFieldValue(Record record, String fieldName) {\n+    String value = getStringFieldValue(record, fieldName);\n+    return value.equals(NULL) ? null : Integer.parseInt(value);\n+  }", "originalCommit": "abde9d16cc5795e541e4cbebbf63f06e095de184", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMxMTM1OA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/61#discussion_r370311358", "bodyText": "Removed methods for each data type.", "author": "spardeepsingh", "createdAt": "2020-01-23T19:28:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM3MDM5NA=="}], "type": "inlineReview", "revised_code": {"commit": "8ad0da4a276a2da92e8f528baedb35dc619fd752", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/RcaResponseUtil.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/RcaResponseUtil.java\nindex b6bba581..6343f446 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/RcaResponseUtil.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/RcaResponseUtil.java\n\n@@ -33,86 +33,67 @@ import java.util.Map;\n import java.util.Set;\n import org.jooq.Record;\n \n-public class RcaResponseUtil {\n \n-  private static final String NULL = \"null\";\n+public class RcaResponseUtil {\n \n-  public static String convertRcaRecordListIntoJson(String rcaName, List<Record> recordList, Set<String> tableNames) {\n-    com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.response.RcaResponse rcaResponse = null;\n+  /**\n+   * This function return RcaResponse object for given list of rca records.\n+   *\n+   * @param rcaName Name of the rca\n+   * @param recordList List of rca records which contains the node and resource level summary for the rca\n+   * @param tableNames All the valid tables present in database\n+   * @return  RcaResponse object for the input list of rca records\n+   */\n+  public static RcaResponse getRcaResponse(String rcaName, List<Record> recordList, Set<String> tableNames) {\n+    RcaResponse rcaResponse = null;\n     Map<String, NodeSummaryResponse> nodeSummaryResponseMap = new HashMap<>();\n     for (Record record : recordList) {\n       if (rcaResponse == null) {\n-        rcaResponse = getRcaResponse(rcaName, record, tableNames);\n+        rcaResponse = getRcaResponseForRecord(rcaName, record, tableNames);\n       }\n       if (tableNames.contains(HOT_NODE_SUMMARY_TABLE)) {\n-        String nodeId = getStringFieldValue(record, HotNodeSummary.SQL_SCHEMA_CONSTANTS.NODE_ID_COL_NAME);\n+        String nodeId = record.get(HotNodeSummary.SQL_SCHEMA_CONSTANTS.NODE_ID_COL_NAME, String.class);\n         NodeSummaryResponse nodeSummaryResponse = nodeSummaryResponseMap.getOrDefault(nodeId,\n                 getNodeSummary(nodeId, record));\n         if (!nodeSummaryResponseMap.containsKey(nodeId)) {\n           nodeSummaryResponseMap.put(nodeId, nodeSummaryResponse);\n-          rcaResponse.addNodeSummaryResponse(nodeSummaryResponse);\n+          rcaResponse.addSummary(nodeSummaryResponse);\n         }\n         if (tableNames.contains(HOT_RESOURCE_SUMMARY_TABLE)) {\n           nodeSummaryResponse.addResource(getResourceSummaryResponse(record));\n         }\n       }\n     }\n-    return rcaResponse == null ? \"{}\" : rcaResponse.toString();\n+    return rcaResponse;\n   }\n \n   private static ResourceSummaryResponse getResourceSummaryResponse(Record record) {\n-    String resourceName = getStringFieldValue(record,\n-            HotResourceSummary.SQL_SCHEMA_CONSTANTS.RESOURCE_TYPE_COL_NAME);\n-    String unitType = getStringFieldValue(record,\n-            HotResourceSummary.SQL_SCHEMA_CONSTANTS.UNIT_TYPE_COL_NAME);\n-    Double threshold = getDoubleFieldValue(record,\n-            HotResourceSummary.SQL_SCHEMA_CONSTANTS.THRESHOLD_COL_NAME);\n-    Double average = getDoubleFieldValue(record,\n-            HotResourceSummary.SQL_SCHEMA_CONSTANTS.AVG_VALUE_COL_NAME);\n-    Double actual = getDoubleFieldValue(record,\n-            HotResourceSummary.SQL_SCHEMA_CONSTANTS.VALUE_COL_NAME);\n-    Double maximum = getDoubleFieldValue(record,\n-            HotResourceSummary.SQL_SCHEMA_CONSTANTS.MAX_VALUE_COL_NAME);\n-    Double minimum = getDoubleFieldValue(record,\n-            HotResourceSummary.SQL_SCHEMA_CONSTANTS.MIN_VALUE_COL_NAME);\n+    String resourceName = record.get(HotResourceSummary.SQL_SCHEMA_CONSTANTS.RESOURCE_TYPE_COL_NAME, String.class);\n+    String unitType = record.get(HotResourceSummary.SQL_SCHEMA_CONSTANTS.UNIT_TYPE_COL_NAME, String.class);\n+    Double threshold = record.get(HotResourceSummary.SQL_SCHEMA_CONSTANTS.THRESHOLD_COL_NAME, Double.class);\n+    Double average = record.get(HotResourceSummary.SQL_SCHEMA_CONSTANTS.AVG_VALUE_COL_NAME, Double.class);\n+    Double actual = record.get(HotResourceSummary.SQL_SCHEMA_CONSTANTS.VALUE_COL_NAME, Double.class);\n+    Double maximum = record.get(HotResourceSummary.SQL_SCHEMA_CONSTANTS.MAX_VALUE_COL_NAME, Double.class);\n+    Double minimum = record.get(HotResourceSummary.SQL_SCHEMA_CONSTANTS.MIN_VALUE_COL_NAME, Double.class);\n \n     return new ResourceSummaryResponse(resourceName, unitType, threshold, actual, average, minimum, maximum);\n   }\n \n-  private static String getStringFieldValue(Record record, String fieldName) {\n-    Object value = record.getValue(fieldName);\n-    return value == null ? NULL : value.toString();\n-  }\n-\n-  private static Double getDoubleFieldValue(Record record, String fieldName) {\n-    String value = getStringFieldValue(record, fieldName);\n-    return value.equals(NULL) ? null : Double.parseDouble(value);\n-  }\n-\n-  private static Integer getIntegerFieldValue(Record record, String fieldName) {\n-    String value = getStringFieldValue(record, fieldName);\n-    return value.equals(NULL) ? null : Integer.parseInt(value);\n-  }\n-\n   private static NodeSummaryResponse getNodeSummary(String nodeId, Record record) {\n-    String ipAddress = record.getValue(HotNodeSummary.SQL_SCHEMA_CONSTANTS.HOST_IP_ADDRESS_COL_NAME).toString();\n+    String ipAddress = record.get(HotNodeSummary.SQL_SCHEMA_CONSTANTS.HOST_IP_ADDRESS_COL_NAME, String.class);\n     return new NodeSummaryResponse(nodeId, ipAddress);\n   }\n \n-  private static RcaResponse getRcaResponse(String rcaName, Record record, Set<String> tableNames) {\n-    String timestamp = getStringFieldValue(record,\n-            ResourceFlowUnit.SQL_SCHEMA_CONSTANTS.TIMESTAMP_COL_NAME);\n-    String state = getStringFieldValue(record,\n-            ResourceContext.SQL_SCHEMA_CONSTANTS.STATE_COL_NAME);\n+  private static RcaResponse getRcaResponseForRecord(String rcaName, Record record, Set<String> tableNames) {\n+    String timestamp = record.get(ResourceFlowUnit.SQL_SCHEMA_CONSTANTS.TIMESTAMP_COL_NAME, String.class);\n+    String state = record.get(ResourceContext.SQL_SCHEMA_CONSTANTS.STATE_COL_NAME, String.class);\n \n     if (!tableNames.contains(HOT_CLUSTER_SUMMARY_TABLE)) {\n       return new RcaResponse(rcaName, state, timestamp);\n     }\n \n-    Integer numOfNodes = getIntegerFieldValue(record,\n-            HotClusterSummary.SQL_SCHEMA_CONSTANTS.NUM_OF_NODES_COL_NAME);\n-    Integer numOfUnhealthyNodes = getIntegerFieldValue(record,\n-            HotClusterSummary.SQL_SCHEMA_CONSTANTS.NUM_OF_UNHEALTHY_NODES_COL_NAME);\n+    Integer numOfNodes = record.get(HotClusterSummary.SQL_SCHEMA_CONSTANTS.NUM_OF_NODES_COL_NAME, Integer.class);\n+    Integer numOfUnhealthyNodes = record.get(HotClusterSummary.SQL_SCHEMA_CONSTANTS.NUM_OF_UNHEALTHY_NODES_COL_NAME, Integer.class);\n \n     return new RcaResponse(rcaName, state, numOfNodes, numOfUnhealthyNodes, timestamp);\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM3NTI1NQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/61#discussion_r369375255", "bodyText": "Can we just use List of Record here instead of converting it to another object ResourceSummaryResponse ? Record contains all information we need (name of each field / value of each field) and we simply need to add a function to serialize the Record to String.", "author": "rguo-aws", "createdAt": "2020-01-22T05:26:08Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/response/NodeSummaryResponse.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.response;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class NodeSummaryResponse {\n+  private String nodeId;\n+  private String ipAddress;\n+  private List<ResourceSummaryResponse> resourceList;", "originalCommit": "abde9d16cc5795e541e4cbebbf63f06e095de184", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMxMjU3Mg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/61#discussion_r370312572", "bodyText": "To convert the Record into JsonResponse, we need to group resources for all nodes and all rca together. We can either use a bunch of HashMaps or have separate classes for that. I prefer this way as it makes it more readable. Let me know what you think", "author": "spardeepsingh", "createdAt": "2020-01-23T19:30:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM3NTI1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "8ad0da4a276a2da92e8f528baedb35dc619fd752", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/response/NodeSummaryResponse.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/response/NodeSummaryResponse.java\nindex a4194232..73bcbd78 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/response/NodeSummaryResponse.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/response/NodeSummaryResponse.java\n\n@@ -17,16 +17,21 @@ package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.response;\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Objects;\n \n+/**\n+ * NodeSummaryResponse contains summary of different resources of data nodes and also contains info like  NodeId\n+ * and ip address of node.\n+ */\n public class NodeSummaryResponse {\n   private String nodeId;\n   private String ipAddress;\n-  private List<ResourceSummaryResponse> resourceList;\n+  private List<ResourceSummaryResponse> resourceContext;\n \n   public NodeSummaryResponse(String nodeId, String ipAddress) {\n     this.nodeId = nodeId;\n     this.ipAddress = ipAddress;\n-    this.resourceList = new ArrayList<>();\n+    this.resourceContext = new ArrayList<>();\n   }\n \n   public String getNodeId() {\n"}}, {"oid": "6ca4b934c68d452a180d807f751a3681b0c20b52", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/6ca4b934c68d452a180d807f751a3681b0c20b52", "message": "Add api for rca", "committedDate": "2020-01-27T23:22:21Z", "type": "commit"}, {"oid": "8ad0da4a276a2da92e8f528baedb35dc619fd752", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/8ad0da4a276a2da92e8f528baedb35dc619fd752", "message": "Add unit tests and do some refactoring", "committedDate": "2020-01-27T23:24:13Z", "type": "commit"}, {"oid": "2f660686f068a5563fade6bc5ce10e9358fd5f30", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/2f660686f068a5563fade6bc5ce10e9358fd5f30", "message": "Fix Readme", "committedDate": "2020-01-27T23:24:13Z", "type": "commit"}, {"oid": "41e1d0bfb5420f8eae9b526674fc7ab7316bcca7", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/41e1d0bfb5420f8eae9b526674fc7ab7316bcca7", "message": "Add sample Response in Readme", "committedDate": "2020-01-27T23:24:13Z", "type": "commit"}, {"oid": "e1a1b29036a423c7afb664ccb8770e2a1a6d7b3b", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/e1a1b29036a423c7afb664ccb8770e2a1a6d7b3b", "message": "Change ThresholdValue to Threshold in rca API", "committedDate": "2020-01-27T23:24:13Z", "type": "commit"}, {"oid": "3442e5b1b33c7fa32c2cc20f71e87374e3b7496f", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/3442e5b1b33c7fa32c2cc20f71e87374e3b7496f", "message": "Do left join instead of inner join as healthy state rca donot have summaries", "committedDate": "2020-01-27T23:24:13Z", "type": "commit"}, {"oid": "a82e2a3f53f5647fd1b50015fea4ff4fbe27ccb1", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/a82e2a3f53f5647fd1b50015fea4ff4fbe27ccb1", "message": "Fix checkstyle issues", "committedDate": "2020-01-27T23:27:15Z", "type": "commit"}, {"oid": "a82e2a3f53f5647fd1b50015fea4ff4fbe27ccb1", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/a82e2a3f53f5647fd1b50015fea4ff4fbe27ccb1", "message": "Fix checkstyle issues", "committedDate": "2020-01-27T23:27:15Z", "type": "forcePushed"}, {"oid": "67cc5c9440d216d6853469b6f3b78a89237650f8", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/67cc5c9440d216d6853469b6f3b78a89237650f8", "message": "Move constant to summary classes", "committedDate": "2020-01-28T00:01:34Z", "type": "commit"}]}