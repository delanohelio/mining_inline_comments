{"pr_number": 531, "pr_title": "Gauntlet tests - Threshold and missing metrics tests for HeapSizeIncrease decider.", "pr_createdAt": "2020-12-09T18:25:24Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/531", "timeline": [{"oid": "13fec5aa8aa99ebcde617eba8f7fc0b59b16aa0e", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/13fec5aa8aa99ebcde617eba8f7fc0b59b16aa0e", "message": "Add negative tests for HeapSizeIncrease action", "committedDate": "2020-12-09T18:17:11Z", "type": "commit"}, {"oid": "7754c71f8df7f5d73e4efa7a116310f866131538", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/7754c71f8df7f5d73e4efa7a116310f866131538", "message": "Merge branch 'master' into ktkrg-neg-tests", "committedDate": "2020-12-09T18:17:34Z", "type": "commit"}, {"oid": "3910dec9bccd8fa861c3c2b2b120e1610f047153", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/3910dec9bccd8fa861c3c2b2b120e1610f047153", "message": "Fix build issue", "committedDate": "2020-12-09T19:44:56Z", "type": "commit"}, {"oid": "45ee4f73ffe22f25e6499a711ea47b2f93628daf", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/45ee4f73ffe22f25e6499a711ea47b2f93628daf", "message": "Add more ignored patterns", "committedDate": "2020-12-10T23:48:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1MDU3Nw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/531#discussion_r541450577", "bodyText": "nit: can we simply use static functions in TimeUnit to convert from second into ms ?", "author": "rguo-aws", "createdAt": "2020-12-12T00:21:11Z", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/jvmsizing/HeapSizeIncreaseHighThresholdTest.java", "diffHunk": "@@ -0,0 +1,282 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.jvmsizing;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCInfoDimension;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.HeapDimension.Constants;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.GC_Collection_Event;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.GC_Type;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_Max;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_Used;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.RcaItMarker;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AErrorPatternIgnored;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect.Type;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AMetric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATuple;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.ClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.HostTag;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.runners.RcaItNotEncryptedRunner;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.jvmsizing.validator.HeapSizeIncreaseNonBreachingValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.ElasticSearchAnalysisGraph;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+/**\n+ * Negative test: Tests that the action is NOT emitted if the threshold is not breached.\n+ * The threshold is controlled by the rca.conf and rca_master.conf files.\n+ */\n+\n+@Category(RcaItMarker.class)\n+@RunWith(RcaItNotEncryptedRunner.class)\n+@AClusterType(ClusterType.MULTI_NODE_CO_LOCATED_MASTER)\n+@ARcaGraph(ElasticSearchAnalysisGraph.class)\n+@ARcaConf(dataNode = JvmSizingITConstants.RCA_CONF_PATH + \"rca_high_threshold.conf\", electedMaster =\n+    JvmSizingITConstants.RCA_CONF_PATH + \"rca_master.conf\")\n+@AMetric(\n+    name = Heap_Max.class,\n+    dimensionNames = {Constants.TYPE_VALUE},\n+    tables = {\n+        @ATable(\n+            hostTag = HostTag.DATA_0,\n+            tuple = {\n+                @ATuple(\n+                    dimensionValues = {GCType.Constants.OLD_GEN_VALUE},\n+                    sum = 1000000000.0, avg = 1000000000.0, min = 1000000000.0, max = 1000000000.0\n+                )\n+            }\n+        ),\n+        @ATable(\n+            hostTag = HostTag.ELECTED_MASTER,\n+            tuple = {\n+                @ATuple(\n+                    dimensionValues = {GCType.Constants.OLD_GEN_VALUE},\n+                    sum = 1000000000.0, avg = 1000000000.0, max = 1000000000.0, min = 1000000000.0\n+                )\n+            }\n+        )\n+    }\n+)\n+@AMetric(\n+    name = Heap_Used.class,\n+    dimensionNames = {Constants.TYPE_VALUE},\n+    tables = {\n+        @ATable(\n+            hostTag = HostTag.DATA_0,\n+            tuple = {\n+                @ATuple(\n+                    dimensionValues = {GCType.Constants.OLD_GEN_VALUE},\n+                    sum = 950000000.0, avg = 950000000.0, min = 950000000.0, max = 950000000.0\n+                )\n+            }\n+        ),\n+        @ATable(\n+            hostTag = HostTag.ELECTED_MASTER,\n+            tuple = {\n+                @ATuple(\n+                    dimensionValues = {GCType.Constants.OLD_GEN_VALUE},\n+                    sum = 950000000.0, avg = 950000000.0, min = 950000000.0, max = 950000000.0\n+                )\n+            }\n+        )\n+    }\n+)\n+@AMetric(\n+    name = GC_Collection_Event.class,\n+    dimensionNames = {Constants.TYPE_VALUE},\n+    tables = {\n+        @ATable(\n+            hostTag = HostTag.DATA_0,\n+            tuple = {\n+                @ATuple(\n+                    dimensionValues = {GCType.Constants.TOT_FULL_GC_VALUE},\n+                    sum = 10.0, avg = 10.0, max = 10.0, min = 10.0\n+                )\n+            }\n+        ),\n+        @ATable(\n+            hostTag = HostTag.ELECTED_MASTER,\n+            tuple = {\n+                @ATuple(\n+                    dimensionValues = {GCType.Constants.TOT_FULL_GC_VALUE},\n+                    sum = 10.0, avg = 10.0, max = 10.0, min = 10.0\n+                )\n+            }\n+        )\n+    }\n+)\n+@AMetric(\n+    name = GC_Type.class,\n+    dimensionNames = {GCInfoDimension.Constants.MEMORY_POOL_VALUE,\n+        GCInfoDimension.Constants.COLLECTOR_NAME_VALUE},\n+    tables = {\n+        @ATable(\n+            hostTag = HostTag.DATA_0,\n+            tuple = {\n+                @ATuple(\n+                    dimensionValues = {GCType.Constants.OLD_GEN_VALUE, JvmSizingITConstants.CMS_COLLECTOR},\n+                    sum = 10.0, avg = 10.0, max = 10.0, min = 10.0\n+                )\n+            }\n+        ),\n+        @ATable(\n+            hostTag = HostTag.ELECTED_MASTER,\n+            tuple = {\n+                @ATuple(\n+                    dimensionValues = {GCType.Constants.OLD_GEN_VALUE, JvmSizingITConstants.CMS_COLLECTOR},\n+                    sum = 10.0, avg = 10.0, max = 10.0, min = 10.0\n+                )\n+            }\n+        )\n+    }\n+)\n+public class HeapSizeIncreaseHighThresholdTest {\n+\n+  private static final int S_TO_MS = 1000;\n+  public static final int SLEEP_DURATION_IN_S = 190;\n+\n+  @Test\n+  @AExpect(\n+      what = Type.DB_QUERY,\n+      on = HostTag.ELECTED_MASTER,\n+      validator = HeapSizeIncreaseNonBreachingValidator.class,\n+      forRca = PersistedAction.class,\n+      timeoutSeconds = 240\n+  )\n+  @AErrorPatternIgnored(\n+      pattern = \"AggregateMetric:gather()\",\n+      reason = \"CPU metrics are expected to be missing in this integ test\")\n+  @AErrorPatternIgnored(\n+      pattern = \"Metric:gather()\",\n+      reason = \"Metrics are expected to be missing in this integ test\")\n+  @AErrorPatternIgnored(\n+      pattern = \"NodeConfigCacheReaderUtil\",\n+      reason = \"Node Config Cache are expected to be missing in this integ test.\")\n+  @AErrorPatternIgnored(\n+      pattern = \"SubscribeResponseHandler:onError()\",\n+      reason = \"A unit test expressly calls SubscribeResponseHandler#onError, which writes an error log\")\n+  @AErrorPatternIgnored(\n+      pattern = \"SQLParsingUtil:readDataFromSqlResult()\",\n+      reason = \"Old gen metrics is expected to be missing in this integ test.\")\n+  @AErrorPatternIgnored(\n+      pattern = \"HighHeapUsageOldGenRca:operate()\",\n+      reason = \"Old gen rca is expected to be missing in this integ test.\")\n+  @AErrorPatternIgnored(\n+      pattern = \"ModifyCacheMaxSizeAction:build()\",\n+      reason = \"Node config cache is expected to be missing during shutdown\")\n+  @AErrorPatternIgnored(\n+      pattern = \"NodeConfigCollector:collectAndPublishMetric()\",\n+      reason = \"Shard request cache metrics is expected to be missing\")\n+  @AErrorPatternIgnored(\n+      pattern = \"CacheUtil:getCacheMaxSize()\",\n+      reason = \"Shard request cache metrics is expected to be missing.\")\n+  @AErrorPatternIgnored(\n+      pattern = \"HighHeapUsageYoungGenRca:operate()\",\n+      reason = \"YoungGen metrics is expected to be missing.\"\n+  )\n+  @AErrorPatternIgnored(\n+      pattern = \"PersistableSlidingWindow:<init>()\",\n+      reason = \"Persistence base path can be null for integration test.\"\n+  )\n+  @AErrorPatternIgnored(\n+      pattern = \"OldGenRca:getMaxHeapSizeOrDefault()\",\n+      reason = \"YoungGen metrics is expected to be missing.\")\n+  @AErrorPatternIgnored(\n+      pattern = \"BucketizedSlidingWindow:next()\",\n+      reason = \"Since the persistence path can be null for integration test, calls to next() is \"\n+          + \"expected to fail\")\n+  public void testDataNodeThresholdNotBreached() {\n+    // We know that it takes at most 180 seconds(in the case of a multinode cluster) to fire the\n+    // action based on the decider and rca thresholds set for integration tests.\n+    // In order to prove that no action has been taken, we sleep for 190 seconds in the test\n+    // while the rest of the framework goes on emitting metrics, ticking the scheduler etc. On\n+    // wakeup, we check if the actions table contains the relevant row.\n+\n+    try {\n+      Thread.sleep(SLEEP_DURATION_IN_S * S_TO_MS);", "originalCommit": "45ee4f73ffe22f25e6499a711ea47b2f93628daf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzcyMjY5MA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/531#discussion_r553722690", "bodyText": "Done.", "author": "ktkrg", "createdAt": "2021-01-08T03:34:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1MDU3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "6fc6a51670f756ad6b014d122a3df226087d7a53", "chunk": "diff --git a/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/jvmsizing/HeapSizeIncreaseHighThresholdTest.java b/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/jvmsizing/HeapSizeIncreaseHighThresholdTest.java\nindex 053347e4..535879ea 100644\n--- a/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/jvmsizing/HeapSizeIncreaseHighThresholdTest.java\n+++ b/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/jvmsizing/HeapSizeIncreaseHighThresholdTest.java\n\n@@ -38,6 +38,7 @@ import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.fr\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.jvmsizing.validator.HeapSizeIncreaseNonBreachingValidator;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.ElasticSearchAnalysisGraph;\n+import java.util.concurrent.TimeUnit;\n import org.junit.Test;\n import org.junit.experimental.categories.Category;\n import org.junit.runner.RunWith;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1MTI0Nw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/531#discussion_r541451247", "bodyText": "Does this 180s constraint apply to all ITs or this specific IT ? Do we want to move it into a base line IT test case class to share it across all ITs ?", "author": "rguo-aws", "createdAt": "2020-12-12T00:23:33Z", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/jvmsizing/HeapSizeIncreaseHighThresholdTest.java", "diffHunk": "@@ -0,0 +1,282 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ *  A copy of the License is located at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  or in the \"license\" file accompanying this file. This file is distributed\n+ *  on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ *  express or implied. See the License for the specific language governing\n+ *  permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.jvmsizing;\n+\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCInfoDimension;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.GCType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics.HeapDimension.Constants;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.GC_Collection_Event;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.GC_Type;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_Max;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.api.metrics.Heap_Used;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.RcaItMarker;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AErrorPatternIgnored;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AExpect.Type;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.AMetric;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaConf;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ARcaGraph;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATable;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.annotations.ATuple;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.ClusterType;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.configs.HostTag;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.framework.runners.RcaItNotEncryptedRunner;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.jvmsizing.validator.HeapSizeIncreaseNonBreachingValidator;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.ElasticSearchAnalysisGraph;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+\n+/**\n+ * Negative test: Tests that the action is NOT emitted if the threshold is not breached.\n+ * The threshold is controlled by the rca.conf and rca_master.conf files.\n+ */\n+\n+@Category(RcaItMarker.class)\n+@RunWith(RcaItNotEncryptedRunner.class)\n+@AClusterType(ClusterType.MULTI_NODE_CO_LOCATED_MASTER)\n+@ARcaGraph(ElasticSearchAnalysisGraph.class)\n+@ARcaConf(dataNode = JvmSizingITConstants.RCA_CONF_PATH + \"rca_high_threshold.conf\", electedMaster =\n+    JvmSizingITConstants.RCA_CONF_PATH + \"rca_master.conf\")\n+@AMetric(\n+    name = Heap_Max.class,\n+    dimensionNames = {Constants.TYPE_VALUE},\n+    tables = {\n+        @ATable(\n+            hostTag = HostTag.DATA_0,\n+            tuple = {\n+                @ATuple(\n+                    dimensionValues = {GCType.Constants.OLD_GEN_VALUE},\n+                    sum = 1000000000.0, avg = 1000000000.0, min = 1000000000.0, max = 1000000000.0\n+                )\n+            }\n+        ),\n+        @ATable(\n+            hostTag = HostTag.ELECTED_MASTER,\n+            tuple = {\n+                @ATuple(\n+                    dimensionValues = {GCType.Constants.OLD_GEN_VALUE},\n+                    sum = 1000000000.0, avg = 1000000000.0, max = 1000000000.0, min = 1000000000.0\n+                )\n+            }\n+        )\n+    }\n+)\n+@AMetric(\n+    name = Heap_Used.class,\n+    dimensionNames = {Constants.TYPE_VALUE},\n+    tables = {\n+        @ATable(\n+            hostTag = HostTag.DATA_0,\n+            tuple = {\n+                @ATuple(\n+                    dimensionValues = {GCType.Constants.OLD_GEN_VALUE},\n+                    sum = 950000000.0, avg = 950000000.0, min = 950000000.0, max = 950000000.0\n+                )\n+            }\n+        ),\n+        @ATable(\n+            hostTag = HostTag.ELECTED_MASTER,\n+            tuple = {\n+                @ATuple(\n+                    dimensionValues = {GCType.Constants.OLD_GEN_VALUE},\n+                    sum = 950000000.0, avg = 950000000.0, min = 950000000.0, max = 950000000.0\n+                )\n+            }\n+        )\n+    }\n+)\n+@AMetric(\n+    name = GC_Collection_Event.class,\n+    dimensionNames = {Constants.TYPE_VALUE},\n+    tables = {\n+        @ATable(\n+            hostTag = HostTag.DATA_0,\n+            tuple = {\n+                @ATuple(\n+                    dimensionValues = {GCType.Constants.TOT_FULL_GC_VALUE},\n+                    sum = 10.0, avg = 10.0, max = 10.0, min = 10.0\n+                )\n+            }\n+        ),\n+        @ATable(\n+            hostTag = HostTag.ELECTED_MASTER,\n+            tuple = {\n+                @ATuple(\n+                    dimensionValues = {GCType.Constants.TOT_FULL_GC_VALUE},\n+                    sum = 10.0, avg = 10.0, max = 10.0, min = 10.0\n+                )\n+            }\n+        )\n+    }\n+)\n+@AMetric(\n+    name = GC_Type.class,\n+    dimensionNames = {GCInfoDimension.Constants.MEMORY_POOL_VALUE,\n+        GCInfoDimension.Constants.COLLECTOR_NAME_VALUE},\n+    tables = {\n+        @ATable(\n+            hostTag = HostTag.DATA_0,\n+            tuple = {\n+                @ATuple(\n+                    dimensionValues = {GCType.Constants.OLD_GEN_VALUE, JvmSizingITConstants.CMS_COLLECTOR},\n+                    sum = 10.0, avg = 10.0, max = 10.0, min = 10.0\n+                )\n+            }\n+        ),\n+        @ATable(\n+            hostTag = HostTag.ELECTED_MASTER,\n+            tuple = {\n+                @ATuple(\n+                    dimensionValues = {GCType.Constants.OLD_GEN_VALUE, JvmSizingITConstants.CMS_COLLECTOR},\n+                    sum = 10.0, avg = 10.0, max = 10.0, min = 10.0\n+                )\n+            }\n+        )\n+    }\n+)\n+public class HeapSizeIncreaseHighThresholdTest {\n+\n+  private static final int S_TO_MS = 1000;\n+  public static final int SLEEP_DURATION_IN_S = 190;\n+\n+  @Test\n+  @AExpect(\n+      what = Type.DB_QUERY,\n+      on = HostTag.ELECTED_MASTER,\n+      validator = HeapSizeIncreaseNonBreachingValidator.class,\n+      forRca = PersistedAction.class,\n+      timeoutSeconds = 240\n+  )\n+  @AErrorPatternIgnored(\n+      pattern = \"AggregateMetric:gather()\",\n+      reason = \"CPU metrics are expected to be missing in this integ test\")\n+  @AErrorPatternIgnored(\n+      pattern = \"Metric:gather()\",\n+      reason = \"Metrics are expected to be missing in this integ test\")\n+  @AErrorPatternIgnored(\n+      pattern = \"NodeConfigCacheReaderUtil\",\n+      reason = \"Node Config Cache are expected to be missing in this integ test.\")\n+  @AErrorPatternIgnored(\n+      pattern = \"SubscribeResponseHandler:onError()\",\n+      reason = \"A unit test expressly calls SubscribeResponseHandler#onError, which writes an error log\")\n+  @AErrorPatternIgnored(\n+      pattern = \"SQLParsingUtil:readDataFromSqlResult()\",\n+      reason = \"Old gen metrics is expected to be missing in this integ test.\")\n+  @AErrorPatternIgnored(\n+      pattern = \"HighHeapUsageOldGenRca:operate()\",\n+      reason = \"Old gen rca is expected to be missing in this integ test.\")\n+  @AErrorPatternIgnored(\n+      pattern = \"ModifyCacheMaxSizeAction:build()\",\n+      reason = \"Node config cache is expected to be missing during shutdown\")\n+  @AErrorPatternIgnored(\n+      pattern = \"NodeConfigCollector:collectAndPublishMetric()\",\n+      reason = \"Shard request cache metrics is expected to be missing\")\n+  @AErrorPatternIgnored(\n+      pattern = \"CacheUtil:getCacheMaxSize()\",\n+      reason = \"Shard request cache metrics is expected to be missing.\")\n+  @AErrorPatternIgnored(\n+      pattern = \"HighHeapUsageYoungGenRca:operate()\",\n+      reason = \"YoungGen metrics is expected to be missing.\"\n+  )\n+  @AErrorPatternIgnored(\n+      pattern = \"PersistableSlidingWindow:<init>()\",\n+      reason = \"Persistence base path can be null for integration test.\"\n+  )\n+  @AErrorPatternIgnored(\n+      pattern = \"OldGenRca:getMaxHeapSizeOrDefault()\",\n+      reason = \"YoungGen metrics is expected to be missing.\")\n+  @AErrorPatternIgnored(\n+      pattern = \"BucketizedSlidingWindow:next()\",\n+      reason = \"Since the persistence path can be null for integration test, calls to next() is \"\n+          + \"expected to fail\")\n+  public void testDataNodeThresholdNotBreached() {\n+    // We know that it takes at most 180 seconds(in the case of a multinode cluster) to fire the", "originalCommit": "45ee4f73ffe22f25e6499a711ea47b2f93628daf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzcyMzEzNA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/531#discussion_r553723134", "bodyText": "It applies only to this particular IT, because it takes three minutes for the unhealthiness to manifest as an action for this decider, but I'm not sure how it works for the other deciders.", "author": "ktkrg", "createdAt": "2021-01-08T03:36:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTQ1MTI0Nw=="}], "type": "inlineReview", "revised_code": {"commit": "6fc6a51670f756ad6b014d122a3df226087d7a53", "chunk": "diff --git a/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/jvmsizing/HeapSizeIncreaseHighThresholdTest.java b/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/jvmsizing/HeapSizeIncreaseHighThresholdTest.java\nindex 053347e4..535879ea 100644\n--- a/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/jvmsizing/HeapSizeIncreaseHighThresholdTest.java\n+++ b/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/integTests/tests/jvmsizing/HeapSizeIncreaseHighThresholdTest.java\n\n@@ -38,6 +38,7 @@ import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.fr\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.integTests.tests.jvmsizing.validator.HeapSizeIncreaseNonBreachingValidator;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.persistence.actions.PersistedAction;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.store.ElasticSearchAnalysisGraph;\n+import java.util.concurrent.TimeUnit;\n import org.junit.Test;\n import org.junit.experimental.categories.Category;\n import org.junit.runner.RunWith;\n"}}, {"oid": "66446d682961d3b30383c847a9d2516ec38ae0b0", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/66446d682961d3b30383c847a9d2516ec38ae0b0", "message": "Merge branch 'master' into ktkrg-neg-tests", "committedDate": "2021-01-08T03:23:46Z", "type": "commit"}, {"oid": "6fc6a51670f756ad6b014d122a3df226087d7a53", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/6fc6a51670f756ad6b014d122a3df226087d7a53", "message": "Address comments", "committedDate": "2021-01-08T03:34:02Z", "type": "commit"}, {"oid": "11c19bb0c0db5082dadbf29f914894b4652df724", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/11c19bb0c0db5082dadbf29f914894b4652df724", "message": "Merge branch 'main' into ktkrg-neg-tests", "committedDate": "2021-02-17T09:30:07Z", "type": "commit"}]}