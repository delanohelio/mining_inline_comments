{"pr_number": 310, "pr_title": "Grpc server can run on different ports on different nodes of the cluster", "pr_createdAt": "2020-07-27T04:43:31Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2NTIwOA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461065208", "bodyText": "Log.error(\"Could not read the Decider Config File: {}\", configFilePath, e)", "author": "sidheart", "createdAt": "2020-07-27T17:51:27Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/DeciderActionPriorityReader.java", "diffHunk": "@@ -45,8 +45,7 @@ public static void updateDeciderActionPriorityOrder() {\n         try {\n             deciderActionPriorityOrder = mapper.readValue(new File(configFilePath), HashMap.class);\n         } catch (Exception e) {\n-            LOG.error(\"Could not read the Decider Config File\");\n-            e.printStackTrace();\n+            LOG.error(\"Could not read the Decider Config File: \" + configFilePath);", "originalCommit": "0f2c74fbc6c5e5212fca338db4c7b54506a94649", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE0NTI3OQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461145279", "bodyText": "This file has been removed in the latest update to master.", "author": "yojs", "createdAt": "2020-07-27T20:19:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2NTIwOA=="}], "type": "inlineReview", "revised_code": {"commit": "8b6036ab6e07a651fe859e77de562923afb11664", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/DeciderActionPriorityReader.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/DeciderActionPriorityReader.java\ndeleted file mode 100644\nindex 6750aaa0..00000000\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/DeciderActionPriorityReader.java\n+++ /dev/null\n\n@@ -1,63 +0,0 @@\n-/*\n- * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\").\n- * You may not use this file except in compliance with the License.\n- * A copy of the License is located at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * or in the \"license\" file accompanying this file. This file is distributed\n- * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n- * express or implied. See the License for the specific language governing\n- *  permissions and limitations under the License.\n- */\n-\n-package com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker;\n-\n-import com.amazon.opendistro.elasticsearch.performanceanalyzer.decisionmaker.deciders.Decider;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n-import java.io.File;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import org.apache.logging.log4j.LogManager;\n-import org.apache.logging.log4j.Logger;\n-\n-/**\n- * This class reads user provided Decider Action Priorities from a yaml.\n- * Default action priorities reside in the file.\n- * Based on the load, the user can configure the action priorities for different deciders.\n- */\n-\n-public class DeciderActionPriorityReader {\n-    private static final Logger LOG = LogManager.getLogger(DeciderActionPriorityReader.class);\n-    private static HashMap<Decider, ArrayList<String>> deciderActionPriorityOrder;\n-    private static String configFilePath;\n-\n-    public DeciderActionPriorityReader(String configFilePath) {\n-    this.configFilePath = configFilePath;\n-    this.deciderActionPriorityOrder = null;\n-    }\n-\n-    public static void updateDeciderActionPriorityOrder() {\n-        ObjectMapper mapper = new ObjectMapper(new YAMLFactory());\n-        try {\n-            deciderActionPriorityOrder = mapper.readValue(new File(configFilePath), HashMap.class);\n-        } catch (Exception e) {\n-            LOG.error(\"Could not read the Decider Config File: \" + configFilePath);\n-        }\n-        return;\n-    }\n-\n-    public static ArrayList<String> getActionPriorityOrder(String decider) {\n-        ArrayList<String> actionPriorities = null;\n-        try {\n-            actionPriorities = deciderActionPriorityOrder.get(decider);\n-        } catch (Exception e) {\n-            LOG.error(\"Decider Not found in the Config File\");\n-            e.printStackTrace();\n-        }\n-        return actionPriorities;\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2NTcxNQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461065715", "bodyText": "This import line was added, but I don't see CDEP being added below", "author": "sidheart", "createdAt": "2020-07-27T17:52:22Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/Decision.java", "diffHunk": "@@ -19,6 +19,8 @@\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.FlowUnitMessage;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.GenericFlowUnit;\n \n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util.InstanceDetails;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor;", "originalCommit": "0f2c74fbc6c5e5212fca338db4c7b54506a94649", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE0NTU5Ng==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461145596", "bodyText": "good catch !", "author": "yojs", "createdAt": "2020-07-27T20:20:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA2NTcxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "037e0416a36dd96c2f9716cf37413aed203b0aa2", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/Decision.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/Decision.java\nindex 789526ed..4467d51c 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/Decision.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/decisionmaker/deciders/Decision.java\n\n@@ -20,7 +20,6 @@ import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.FlowUnitMess\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.core.GenericFlowUnit;\n \n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util.InstanceDetails;\n-import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor;\n import java.util.ArrayList;\n import java.util.List;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA3MDQ4NQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461070485", "bodyText": "nit: factor this out into a function since it's used in multiple places", "author": "sidheart", "createdAt": "2020-07-27T18:00:36Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/net/GRPCConnectionManager.java", "diffHunk": "@@ -159,28 +155,36 @@ private ManagedChannel getChannelForHost(final String remoteHost) {\n    * @param remoteHost The host to which we want to establish a channel to.\n    * @return a Managed channel object.\n    */\n-  private synchronized ManagedChannel addOrUpdateChannelForHost(final String remoteHost) {\n+  private synchronized ManagedChannel addOrUpdateChannelForHost(final InstanceDetails remoteHost) {\n     final ManagedChannel channel = buildChannelForHost(remoteHost);\n-    perHostChannelMap.computeIfAbsent(remoteHost, s -> new AtomicReference<>());\n-    perHostChannelMap.get(remoteHost).set(channel);\n+    perHostChannelMap.computeIfAbsent(remoteHost.getInstanceId(), s -> new AtomicReference<>());\n+    perHostChannelMap.get(remoteHost.getInstanceId()).set(channel);\n     return channel;\n   }\n \n-  private ManagedChannel buildChannelForHost(final String remoteHost) {\n+  private ManagedChannel buildChannelForHost(final InstanceDetails remoteHost) {\n     return shouldUseHttps ? buildSecureChannel(remoteHost) : buildInsecureChannel(remoteHost);\n   }\n \n-  private ManagedChannel buildInsecureChannel(final String remoteHost) {\n-    return ManagedChannelBuilder.forAddress(remoteHost, this.port).usePlaintext().build();\n+  private ManagedChannel buildInsecureChannel(final InstanceDetails remoteHost) {\n+    int port = this.port != 0 ? this.port : remoteHost.getGrpcPort();\n+    if (port == -1) {\n+      throw new IllegalArgumentException(\"Invalid port for grpc: \" + port);\n+    }", "originalCommit": "0f2c74fbc6c5e5212fca338db4c7b54506a94649", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxNzUzNw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461217537", "bodyText": "done !", "author": "yojs", "createdAt": "2020-07-27T22:58:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA3MDQ4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "037e0416a36dd96c2f9716cf37413aed203b0aa2", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/net/GRPCConnectionManager.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/net/GRPCConnectionManager.java\nindex 9d7ffa5b..fad1499f 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/net/GRPCConnectionManager.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/net/GRPCConnectionManager.java\n\n@@ -166,12 +166,19 @@ public class GRPCConnectionManager {\n     return shouldUseHttps ? buildSecureChannel(remoteHost) : buildInsecureChannel(remoteHost);\n   }\n \n-  private ManagedChannel buildInsecureChannel(final InstanceDetails remoteHost) {\n+  private int getPortFromHost(final InstanceDetails remoteHost) {\n     int port = this.port != 0 ? this.port : remoteHost.getGrpcPort();\n     if (port == -1) {\n       throw new IllegalArgumentException(\"Invalid port for grpc: \" + port);\n     }\n-    return ManagedChannelBuilder.forAddress(remoteHost.getInstanceIp().toString(), port).usePlaintext().build();\n+    return port;\n+  }\n+\n+  private ManagedChannel buildInsecureChannel(final InstanceDetails remoteHost) {\n+    return ManagedChannelBuilder.forAddress(\n+            remoteHost.getInstanceIp().toString(),\n+            getPortFromHost(remoteHost)\n+    ).usePlaintext().build();\n   }\n \n   private ManagedChannel buildSecureChannel(final InstanceDetails remoteHost) {\n"}}, {"oid": "8b6036ab6e07a651fe859e77de562923afb11664", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/8b6036ab6e07a651fe859e77de562923afb11664", "message": "rebased with current master", "committedDate": "2020-07-27T19:03:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEzNTk3OQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461135979", "bodyText": "I agree with most of the refactor points mentioned in the description of the PR, however, can you explain why we need to use node ids instead of ip+port combo? It would've achieved the same goal, unless I'm missing something.", "author": "ktkrg", "createdAt": "2020-07-27T20:01:28Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/net/GRPCConnectionManager.java", "diffHunk": "@@ -54,17 +55,15 @@\n   private File trustedCasFile;\n \n   /**\n-   * Map of remote host to a Netty channel to that host.\n+   * Map of remote hostId to a Netty channel to that host.\n    */\n-  private ConcurrentMap<String, AtomicReference<ManagedChannel>> perHostChannelMap =\n-      new ConcurrentHashMap<>();\n+  private ConcurrentMap<InstanceDetails.Id, AtomicReference<ManagedChannel>> perHostChannelMap = new ConcurrentHashMap<>();", "originalCommit": "8b6036ab6e07a651fe859e77de562923afb11664", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE0NDQyMA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461144420", "bodyText": "You are right, ip+port will have the same affect. I used the node-id as it is a parameter, on its own (without combining with anything else), is guaranteed to be unique in a cluster.", "author": "yojs", "createdAt": "2020-07-27T20:18:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEzNTk3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE1MTg1NA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461151854", "bodyText": "Thanks for answering my question. I'm just thinking about the usecases where ip+port wouldn't change but node id would and if such scenarios are handled in the code if they were not handled in the past. Will take a look again.", "author": "ktkrg", "createdAt": "2020-07-27T20:31:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEzNTk3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxNzY4OQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461217689", "bodyText": "makes sense. Please take a look.", "author": "yojs", "createdAt": "2020-07-27T22:58:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEzNTk3OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwMDQ4Mg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461200482", "bodyText": "return value is being ignored here. Do we need this change?", "author": "ktkrg", "createdAt": "2020-07-27T22:12:45Z", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ResourceHeatMapGraphTest.java", "diffHunk": "@@ -603,10 +603,13 @@ private void verifyFullNodeTemperatureProfile(String resp) {\n     JsonArray json = parser\n         .parse(resp)\n         .getAsJsonObject()\n-        .getAsJsonArray(ALL_TEMPERATURE_DIMENSIONS)\n-        .get(0)\n-        .getAsJsonObject()\n-        .getAsJsonArray(NodeLevelDimensionalSummary.SUMMARY_TABLE_NAME);\n+        .getAsJsonArray(ALL_TEMPERATURE_DIMENSIONS);\n+    // System.out.println(\"ALL_TEMPERATURE_DIMENSIONS\" + json);\n+\n+    json.get(0)\n+    .getAsJsonObject()\n+    .getAsJsonArray(NodeLevelDimensionalSummary.SUMMARY_TABLE_NAME);", "originalCommit": "f26bd9a067afa5dc53bb4e3c1d92b2f76ae843be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMDc4NQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461220785", "bodyText": "ya. I was running tests and left it like that. good point !", "author": "yojs", "createdAt": "2020-07-27T23:07:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwMDQ4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "037e0416a36dd96c2f9716cf37413aed203b0aa2", "chunk": "diff --git a/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ResourceHeatMapGraphTest.java b/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ResourceHeatMapGraphTest.java\nindex 87ba19e5..90d2c1b8 100644\n--- a/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ResourceHeatMapGraphTest.java\n+++ b/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/store/ResourceHeatMapGraphTest.java\n\n@@ -604,15 +604,12 @@ public class ResourceHeatMapGraphTest {\n         .parse(resp)\n         .getAsJsonObject()\n         .getAsJsonArray(ALL_TEMPERATURE_DIMENSIONS);\n-    // System.out.println(\"ALL_TEMPERATURE_DIMENSIONS\" + json);\n+    System.out.println(\"ALL_TEMPERATURE_DIMENSIONS\" + json);\n \n-    json.get(0)\n-    .getAsJsonObject()\n-    .getAsJsonArray(NodeLevelDimensionalSummary.SUMMARY_TABLE_NAME);\n-\n-\n-    for (JsonElement elem : json) {\n+    for (JsonElement elem : json.get(0).getAsJsonObject().getAsJsonArray(NodeLevelDimensionalSummary.SUMMARY_TABLE_NAME)) {\n       JsonObject object = elem.getAsJsonObject();\n+      System.out.println(object);\n+      System.out.println(\"dim obj: \" + object.get(\"dimension\"));\n       switch (TemperatureDimension.valueOf(object.get(\"dimension\").getAsString())) {\n         case CPU_Utilization:\n           verifyCpuDimension(object);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwMTIxNw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461201217", "bodyText": "This annotation should go above the method if you're saying that the returned String may be null", "author": "sidheart", "createdAt": "2020-07-27T22:14:45Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/config/PluginSettings.java", "diffHunk": "@@ -113,6 +114,11 @@ public void overrideProperty(String key, String value) {\n     settings.setProperty(key, value);\n   }\n \n+  @VisibleForTesting\n+  public @Nullable String getProperty(String key) {", "originalCommit": "f26bd9a067afa5dc53bb4e3c1d92b2f76ae843be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIzMjc5OQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461232799", "bodyText": "I think you missed this one, if this is changed I can +1 the diff", "author": "sidheart", "createdAt": "2020-07-27T23:44:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwMTIxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3MjM2OQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461272369", "bodyText": "I missed this one. Pushed the changes again.", "author": "yojs", "createdAt": "2020-07-28T02:00:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwMTIxNw=="}], "type": "inlineReview", "revised_code": {"commit": "acb221987bbbd95b5c5cd7e4e832672358aacfef", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/config/PluginSettings.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/config/PluginSettings.java\nindex eddad6e0..b4d8277a 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/config/PluginSettings.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/config/PluginSettings.java\n\n@@ -115,7 +115,8 @@ public class PluginSettings {\n   }\n \n   @VisibleForTesting\n-  public @Nullable String getProperty(String key) {\n+  @Nullable\n+  public String getProperty(String key) {\n     return settings.getProperty(key);\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwNTI5OQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461205299", "bodyText": "I'm curious, what does this do differently than just directly returning ip?", "author": "sidheart", "createdAt": "2020-07-27T22:25:22Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/InstanceDetails.java", "diffHunk": "@@ -15,48 +15,166 @@\n \n package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util;\n \n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.core.Util;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.metrics.AllMetrics;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.reader.ClusterDetailsEventProcessor;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Objects;\n+import com.google.common.net.InetAddresses;\n \n public class InstanceDetails {\n+  public static class Ip {\n+\n+    // The only way to get the ip is to get the serialized string representation of it.\n+    private String ip;\n+\n+    public Ip(String ip) {\n+      if (!InetAddresses.isInetAddress(ip)) {\n+        throw new IllegalArgumentException(\"The provided string is not an IPV4ip: '\" + ip + \"'\");\n+      }\n+      this.ip = ip;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (!(o instanceof Ip)) {\n+        return false;\n+      }\n+      Ip ip1 = (Ip) o;\n+      return Objects.equal(ip, ip1.ip);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hashCode(ip);\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return \"\" + ip;", "originalCommit": "f26bd9a067afa5dc53bb4e3c1d92b2f76ae843be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMTI4OQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461221289", "bodyText": "you mean why we don't have getIp() instead ?", "author": "yojs", "createdAt": "2020-07-27T23:09:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwNTI5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIzMjU3NQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461232575", "bodyText": "I mean why return \"\" + ip instead of just return ip?", "author": "sidheart", "createdAt": "2020-07-27T23:43:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwNTI5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI3MjU4MQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461272581", "bodyText": "Yes you are right. It's a no-op for a string", "author": "yojs", "createdAt": "2020-07-28T02:01:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwNTI5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "037e0416a36dd96c2f9716cf37413aed203b0aa2", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/InstanceDetails.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/InstanceDetails.java\nindex 661dfa3f..a5e5d787 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/InstanceDetails.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/util/InstanceDetails.java\n\n@@ -54,7 +54,7 @@ public class InstanceDetails {\n \n     @Override\n     public String toString() {\n-      return \"\" + ip;\n+      return ip;\n     }\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwNjIwOQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461206209", "bodyText": "nit: destinationGraphNodes?", "author": "sidheart", "createdAt": "2020-07-27T22:27:42Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/messages/DataMsg.java", "diffHunk": "@@ -19,23 +19,23 @@\n import java.util.List;\n \n public class DataMsg {\n-  String sourceNode;\n-  List<String> destinationNodes;\n+  String sourceGraphNode;\n+  List<String> destinationGraphNodes;\n   List<? extends GenericFlowUnit> flowUnits;\n \n   public DataMsg(\n-      String sourceNode, List<String> destinationNode, List<? extends GenericFlowUnit> flowUnits) {\n-    this.sourceNode = sourceNode;\n-    this.destinationNodes = destinationNode;\n+          String sourceGraphNode, List<String> destinationNode, List<? extends GenericFlowUnit> flowUnits) {", "originalCommit": "f26bd9a067afa5dc53bb4e3c1d92b2f76ae843be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMTc3Nw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461221777", "bodyText": "\ud83d\udc4d", "author": "yojs", "createdAt": "2020-07-27T23:10:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwNjIwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "037e0416a36dd96c2f9716cf37413aed203b0aa2", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/messages/DataMsg.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/messages/DataMsg.java\nindex 5e3d2026..8ffd751b 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/messages/DataMsg.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/messages/DataMsg.java\n\n@@ -24,9 +24,9 @@ public class DataMsg {\n   List<? extends GenericFlowUnit> flowUnits;\n \n   public DataMsg(\n-          String sourceGraphNode, List<String> destinationNode, List<? extends GenericFlowUnit> flowUnits) {\n+          String sourceGraphNode, List<String> destinationNodes, List<? extends GenericFlowUnit> flowUnits) {\n     this.sourceGraphNode = sourceGraphNode;\n-    this.destinationGraphNodes = destinationNode;\n+    this.destinationGraphNodes = destinationNodes;\n     this.flowUnits = flowUnits;\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwOTMyMg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461209322", "bodyText": "Is there a reason you initialize to -1 instead of 0? 0 would make the default behavior the same as before this commit right?", "author": "sidheart", "createdAt": "2020-07-27T22:35:58Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/net/GRPCConnectionManager.java", "diffHunk": "@@ -73,7 +72,7 @@\n \n   public GRPCConnectionManager(final boolean shouldUseHttps) {\n     this.shouldUseHttps = shouldUseHttps;\n-    this.port = Util.RPC_PORT;\n+    this.port = -1;", "originalCommit": "f26bd9a067afa5dc53bb4e3c1d92b2f76ae843be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMTg5Mg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461221892", "bodyText": "You are right. That was a miss on my part.", "author": "yojs", "createdAt": "2020-07-27T23:10:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIwOTMyMg=="}], "type": "inlineReview", "revised_code": {"commit": "037e0416a36dd96c2f9716cf37413aed203b0aa2", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/net/GRPCConnectionManager.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/net/GRPCConnectionManager.java\nindex a7e3fddf..fad1499f 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/net/GRPCConnectionManager.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/net/GRPCConnectionManager.java\n\n@@ -72,7 +72,7 @@ public class GRPCConnectionManager {\n \n   public GRPCConnectionManager(final boolean shouldUseHttps) {\n     this.shouldUseHttps = shouldUseHttps;\n-    this.port = -1;\n+    this.port = 0;\n     if (shouldUseHttps) {\n       this.certFile = CertificateUtils.getClientCertificateFile();\n       this.pkeyFile = CertificateUtils.getClientPrivateKeyFile();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxMDkwNg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461210906", "bodyText": "It's ok to remove this @ignore and change grpcConnectionManager = new GRPCConnectionManager(false). TLS semantics are tested elsewhere.", "author": "sidheart", "createdAt": "2020-07-27T22:40:11Z", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/net/SubscriptionManagerTest.java", "diffHunk": "@@ -2,16 +2,19 @@\n \n import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.SubscribeResponse;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.net.GRPCConnectionManager;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util.InstanceDetails;\n import com.google.common.collect.Sets;\n import java.util.Collections;\n import org.junit.Assert;\n import org.junit.Before;\n+import org.junit.Ignore;\n import org.junit.Test;\n import org.mockito.Mock;\n import org.mockito.Mockito;\n import org.mockito.MockitoAnnotations;\n \n-\n+// TODO: remove", "originalCommit": "f26bd9a067afa5dc53bb4e3c1d92b2f76ae843be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMjAyMA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461222020", "bodyText": "I added the change for it to get the right files.", "author": "yojs", "createdAt": "2020-07-27T23:11:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxMDkwNg=="}], "type": "inlineReview", "revised_code": {"commit": "037e0416a36dd96c2f9716cf37413aed203b0aa2", "chunk": "diff --git a/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/net/SubscriptionManagerTest.java b/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/net/SubscriptionManagerTest.java\nindex 5dec1290..c3f66c8a 100644\n--- a/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/net/SubscriptionManagerTest.java\n+++ b/src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/net/SubscriptionManagerTest.java\n\n@@ -1,98 +1,121 @@\n package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.net;\n \n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.CertificateUtils;\n+import com.amazon.opendistro.elasticsearch.performanceanalyzer.config.PluginSettings;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.grpc.SubscribeResponse;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.net.GRPCConnectionManager;\n import com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.framework.util.InstanceDetails;\n import com.google.common.collect.Sets;\n import java.util.Collections;\n+import java.util.Objects;\n+import org.junit.After;\n import org.junit.Assert;\n import org.junit.Before;\n-import org.junit.Ignore;\n import org.junit.Test;\n-import org.mockito.Mock;\n-import org.mockito.Mockito;\n-import org.mockito.MockitoAnnotations;\n \n-// TODO: remove\n-@Ignore\n public class SubscriptionManagerTest {\n     private GRPCConnectionManager grpcConnectionManager;\n     private SubscriptionManager uut;\n \n+    private String oldCertificateFile;\n+    private String oldPrivateKeyFile;\n+\n     @Before\n     public void setup() {\n+        oldCertificateFile = PluginSettings.instance().getProperty(CertificateUtils.CERTIFICATE_FILE_PATH);\n+        oldPrivateKeyFile = PluginSettings.instance().getProperty(CertificateUtils.PRIVATE_KEY_FILE_PATH);\n+\n+        ClassLoader classLoader = getClass().getClassLoader();\n+        PluginSettings.instance().overrideProperty(CertificateUtils.CERTIFICATE_FILE_PATH,\n+                Objects.requireNonNull(classLoader.getResource(\"tls/server/localhost.crt\")).getFile());\n+        PluginSettings.instance().overrideProperty(CertificateUtils.PRIVATE_KEY_FILE_PATH,\n+                Objects.requireNonNull(classLoader.getResource(\"tls/server/localhost.key\")).getFile());\n+\n         grpcConnectionManager = new GRPCConnectionManager(true);\n         uut = new SubscriptionManager(grpcConnectionManager);\n     }\n \n+    @After\n+    public void tearDown() {\n+        if (oldCertificateFile != null) {\n+            PluginSettings.instance().overrideProperty(CertificateUtils.CERTIFICATE_FILE_PATH, oldCertificateFile);\n+        }\n+\n+        if (oldPrivateKeyFile != null) {\n+            PluginSettings.instance().overrideProperty(CertificateUtils.PRIVATE_KEY_FILE_PATH, oldPrivateKeyFile);\n+        }\n+    }\n+\n     @Test\n     public void testAddAndGetPublishers() {\n         String testNode = \"testNode\";\n         String ip1 = \"127.0.0.1\";\n+        InstanceDetails.Id id1 = new InstanceDetails.Id(\"id-1\");\n+        InstanceDetails.Id id2 = new InstanceDetails.Id(\"id-2\");\n         String ip2 = \"127.0.0.2\";\n         Assert.assertEquals(Collections.emptySet(), uut.getPublishersForNode(testNode));\n-        uut.addPublisher(testNode, new InstanceDetails.Id(ip1));\n-        Assert.assertEquals(Sets.newHashSet(ip1), uut.getPublishersForNode(testNode));\n-        uut.addPublisher(testNode, new InstanceDetails.Id(ip2));\n-        Assert.assertEquals(Sets.newHashSet(ip1, ip2), uut.getPublishersForNode(testNode));\n+        uut.addPublisher(testNode, id1);\n+        Assert.assertEquals(Sets.newHashSet(id1), uut.getPublishersForNode(testNode));\n+        uut.addPublisher(testNode, id2);\n+        Assert.assertEquals(Sets.newHashSet(id1, id2), uut.getPublishersForNode(testNode));\n     }\n \n     @Test\n     public void testSubscriptionFlow() {\n         String testNode = \"testNode\";\n-        String ip1 = \"127.0.0.1\";\n-        String ip2 = \"127.0.0.2\";\n+        InstanceDetails.Id id1 = new InstanceDetails.Id(\"id-1\");\n+        InstanceDetails.Id id2 = new InstanceDetails.Id(\"id-2\");\n         String locus = \"data-node\";\n \n         // Test that addSubscriber doesn't work on non-matching loci\n-        SubscribeResponse.SubscriptionStatus status = uut.addSubscriber(testNode, new InstanceDetails.Id(ip1), locus);\n+        SubscribeResponse.SubscriptionStatus status = uut.addSubscriber(testNode, id1, locus);\n         Assert.assertEquals(SubscribeResponse.SubscriptionStatus.TAG_MISMATCH, status);\n         Assert.assertFalse(uut.isNodeSubscribed(testNode));\n \n         // Test that addSubscriber works for matching loci\n         uut.setCurrentLocus(locus);\n-        status = uut.addSubscriber(testNode, new InstanceDetails.Id(ip1), locus);\n+        status = uut.addSubscriber(testNode, id1, locus);\n         Assert.assertEquals(SubscribeResponse.SubscriptionStatus.SUCCESS, status);\n-        Assert.assertEquals(Sets.newHashSet(ip1), uut.getSubscribersFor(testNode));\n+        Assert.assertEquals(Sets.newHashSet(id1), uut.getSubscribersFor(testNode));\n         Assert.assertTrue(uut.isNodeSubscribed(testNode));\n \n         // Test that addSubscriber works on repeated calls\n-        status = uut.addSubscriber(testNode, new InstanceDetails.Id(ip2), locus);\n+        status = uut.addSubscriber(testNode, id2, locus);\n         Assert.assertEquals(SubscribeResponse.SubscriptionStatus.SUCCESS, status);\n-        Assert.assertEquals(Sets.newHashSet(ip1, ip2), uut.getSubscribersFor(testNode));\n+        Assert.assertEquals(Sets.newHashSet(id1, id2), uut.getSubscribersFor(testNode));\n         Assert.assertTrue(uut.isNodeSubscribed(testNode));\n \n         // Add host connections to the grpcConnectionManager\n-        grpcConnectionManager.getClientStubForHost(new InstanceDetails(new InstanceDetails.Id(ip1),\n-                new InstanceDetails.Ip(\"0.0.0.0\"), -1));\n-        Assert.assertTrue(grpcConnectionManager.getPerHostChannelMap().containsKey(ip1));\n-        Assert.assertTrue(grpcConnectionManager.getPerHostClientStubMap().containsKey(ip1));\n-        grpcConnectionManager.getClientStubForHost(new InstanceDetails(new InstanceDetails.Id(ip2), new InstanceDetails.Ip(\"0.0.0.0\"), -1));\n-        Assert.assertTrue(grpcConnectionManager.getPerHostChannelMap().containsKey(ip2));\n-        Assert.assertTrue(grpcConnectionManager.getPerHostClientStubMap().containsKey(ip2));\n+        grpcConnectionManager.getClientStubForHost(new InstanceDetails(id1,\n+                new InstanceDetails.Ip(\"0.0.0.0\"), 9000));\n+        Assert.assertTrue(grpcConnectionManager.getPerHostChannelMap().containsKey(id1));\n+        Assert.assertTrue(grpcConnectionManager.getPerHostClientStubMap().containsKey(id1));\n+        grpcConnectionManager.getClientStubForHost(new InstanceDetails(id2, new InstanceDetails.Ip(\"0.0.0.0\"), 9000));\n+        Assert.assertTrue(grpcConnectionManager.getPerHostChannelMap().containsKey(id2));\n+        Assert.assertTrue(grpcConnectionManager.getPerHostClientStubMap().containsKey(id2));\n \n         // Test that unsubscribeAndTerminateConnection always terminates a connection\n         // TODO is this actually the behavior we intended?\n-        uut.unsubscribeAndTerminateConnection(\"nonExistentNode\", new InstanceDetails.Id(ip1));\n-        Assert.assertFalse(grpcConnectionManager.getPerHostChannelMap().containsKey(ip1));\n-        Assert.assertFalse(grpcConnectionManager.getPerHostClientStubMap().containsKey(ip1));\n+        uut.unsubscribeAndTerminateConnection(\"nonExistentNode\", id1);\n+        Assert.assertFalse(grpcConnectionManager.getPerHostChannelMap().containsKey(id1));\n+        Assert.assertFalse(grpcConnectionManager.getPerHostClientStubMap().containsKey(id1));\n \n         // Test that unsubscribeAndTerminateConnection properly updates the underlying map\n-        grpcConnectionManager.getClientStubForHost(new InstanceDetails(new InstanceDetails.Id(ip2), new InstanceDetails.Ip(\"0.0.0.0\"), -1));\n-        uut.unsubscribeAndTerminateConnection(testNode, new InstanceDetails.Id(ip2));\n-        Assert.assertEquals(Sets.newHashSet(ip1), uut.getSubscribersFor(testNode));\n+        grpcConnectionManager.getClientStubForHost(new InstanceDetails(id2, new InstanceDetails.Ip(\"0.0.0.0\"), 9000));\n+        uut.unsubscribeAndTerminateConnection(testNode, id2);\n+        Assert.assertEquals(Sets.newHashSet(id1), uut.getSubscribersFor(testNode));\n         Assert.assertTrue(uut.isNodeSubscribed(testNode));\n-        Assert.assertFalse(grpcConnectionManager.getPerHostChannelMap().containsKey(ip2));\n-        Assert.assertFalse(grpcConnectionManager.getPerHostClientStubMap().containsKey(ip2));\n+        Assert.assertFalse(grpcConnectionManager.getPerHostChannelMap().containsKey(id2));\n+        Assert.assertFalse(grpcConnectionManager.getPerHostClientStubMap().containsKey(id2));\n \n         // Test that unsubscribeAndTerminateConnection doesn't update the underlying map for non existent addresses\n         uut.unsubscribeAndTerminateConnection(testNode, new InstanceDetails.Id(\"nonExistentAddress\"));\n-        Assert.assertEquals(Sets.newHashSet(ip1), uut.getSubscribersFor(testNode));\n+        Assert.assertEquals(Sets.newHashSet(id1), uut.getSubscribersFor(testNode));\n         Assert.assertTrue(uut.isNodeSubscribed(testNode));\n \n         // Test that unsubscribeAndTerminateConnection removes the node from the map once all of its subscriptions are\n         // terminated\n-        uut.unsubscribeAndTerminateConnection(testNode, new InstanceDetails.Id(ip1));\n+        uut.unsubscribeAndTerminateConnection(testNode, id1);\n         Assert.assertEquals(Collections.emptySet(), uut.getSubscribersFor(testNode));\n         Assert.assertFalse(uut.isNodeSubscribed(testNode));\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxMTQzNQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461211435", "bodyText": "It's like a pet name for the node! :)", "author": "sidheart", "createdAt": "2020-07-27T22:41:38Z", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/samplers/RcaEnabledSamplerTest.java", "diffHunk": "@@ -39,14 +39,14 @@ public void testIsRcaEnabled() {\n \n         assertFalse(uut.isRcaEnabled());\n         ClusterDetailsEventProcessor.NodeDetails details =\n-                ClusterDetailsEventProcessorTestHelper.newNodeDetails(\"\", \"\", false);\n+                ClusterDetailsEventProcessorTestHelper.newNodeDetails(\"nodex\", \"127.0.0.1\", false);\n \n         ClusterDetailsEventProcessor clusterDetailsEventProcessor = new ClusterDetailsEventProcessor();\n         clusterDetailsEventProcessor.setNodesDetails(Collections.singletonList(details));\n         appContext.setClusterDetailsEventProcessor(clusterDetailsEventProcessor);\n \n         assertFalse(uut.isRcaEnabled());\n-        details = ClusterDetailsEventProcessorTestHelper.newNodeDetails(\"\", \"\", true);\n+        details = ClusterDetailsEventProcessorTestHelper.newNodeDetails(\"nodey\", \"127.0.0.2\", true);", "originalCommit": "f26bd9a067afa5dc53bb4e3c1d92b2f76ae843be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMjA4MA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461222080", "bodyText": ":)", "author": "yojs", "createdAt": "2020-07-27T23:11:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxMTQzNQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxMjU1Ng==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461212556", "bodyText": "nit: why split this if we aren't distinguishing between the two cases?", "author": "sidheart", "createdAt": "2020-07-27T22:44:46Z", "path": "src/test/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/store/rca/cluster/BaseClusterRcaTest.java", "diffHunk": "@@ -310,7 +310,10 @@ private boolean compareResourceSummary(Resource resource, HotResourceSummary res\n   }\n \n   private boolean compareNodeSummary(String nodeId, Resource resource, HotNodeSummary nodeSummary) {\n-    if (!nodeId.equals(nodeSummary.getNodeID()) || nodeSummary.getHotResourceSummaryList().isEmpty()) {\n+    if (!nodeId.equals(nodeSummary.getNodeID().toString())) {\n+      return false;", "originalCommit": "f26bd9a067afa5dc53bb4e3c1d92b2f76ae843be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMjI4Ng==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/310#discussion_r461222286", "bodyText": "It was just that I was debugging and it makes it easier to put breakpoints to know which branch is returning the error. :)", "author": "yojs", "createdAt": "2020-07-27T23:12:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxMjU1Ng=="}], "type": "inlineReview", "revised_code": null}, {"oid": "037e0416a36dd96c2f9716cf37413aed203b0aa2", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/037e0416a36dd96c2f9716cf37413aed203b0aa2", "message": "Introducing grpcPort in the InstanceDetail and NodeDetail", "committedDate": "2020-07-27T23:33:54Z", "type": "forcePushed"}, {"oid": "acb221987bbbd95b5c5cd7e4e832672358aacfef", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/acb221987bbbd95b5c5cd7e4e832672358aacfef", "message": "adding some tests to increase coverage", "committedDate": "2020-07-28T04:38:11Z", "type": "forcePushed"}, {"oid": "73a657d0aaa5fe00c04faca084cb742e7f39400b", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/73a657d0aaa5fe00c04faca084cb742e7f39400b", "message": "adding some tests to increase coverage", "committedDate": "2020-07-28T05:12:14Z", "type": "forcePushed"}, {"oid": "e55b18bce873f193975ae587dc9a0393ffa95c4d", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/e55b18bce873f193975ae587dc9a0393ffa95c4d", "message": "Introducing grpcPort in the InstanceDetail and NodeDetail", "committedDate": "2020-07-28T22:13:40Z", "type": "commit"}, {"oid": "b0c77dd39295d4c067fb0926a23a650486ac58cb", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/b0c77dd39295d4c067fb0926a23a650486ac58cb", "message": "Addressing PR comments", "committedDate": "2020-07-28T22:13:40Z", "type": "commit"}, {"oid": "f1a5e4e2f16b17f905e358f09d775b59aec3275f", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/f1a5e4e2f16b17f905e358f09d775b59aec3275f", "message": "Fixing SpotBug errors", "committedDate": "2020-07-28T22:13:40Z", "type": "commit"}, {"oid": "c4483d546e1618f9f5987d108db034f922c0aa61", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/c4483d546e1618f9f5987d108db034f922c0aa61", "message": "adding some tests to increase coverage", "committedDate": "2020-07-28T22:13:40Z", "type": "commit"}, {"oid": "8713e77ea68bc46d8247df34eaf0c56cbe732ae1", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/8713e77ea68bc46d8247df34eaf0c56cbe732ae1", "message": "Adding a new test targetting multiple NetServers", "committedDate": "2020-07-28T22:13:40Z", "type": "commit"}, {"oid": "4b762f2936527d424aaa8ac89952eb9277e35db0", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/4b762f2936527d424aaa8ac89952eb9277e35db0", "message": "rebased with latest master and added a test that talks to grpc server on a different port", "committedDate": "2020-07-29T01:34:49Z", "type": "commit"}, {"oid": "4b762f2936527d424aaa8ac89952eb9277e35db0", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/4b762f2936527d424aaa8ac89952eb9277e35db0", "message": "rebased with latest master and added a test that talks to grpc server on a different port", "committedDate": "2020-07-29T01:34:49Z", "type": "forcePushed"}]}