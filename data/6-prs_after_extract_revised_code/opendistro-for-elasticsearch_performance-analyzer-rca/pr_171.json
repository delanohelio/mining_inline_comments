{"pr_number": 171, "pr_title": "Add rca config classes for unbalanced node rca and young gen rca", "pr_createdAt": "2020-04-29T19:52:36Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/171", "timeline": [{"oid": "559b5baeeb9fb89bd107ddd7f2f48f32e88318e5", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/559b5baeeb9fb89bd107ddd7f2f48f32e88318e5", "message": "Add config settings for unbalanced node RCA", "committedDate": "2020-04-29T18:29:15Z", "type": "commit"}, {"oid": "20c0d98810cd66cce308b9b9b417e9704f553b6e", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/20c0d98810cd66cce308b9b9b417e9704f553b6e", "message": "add config settings for young gen rca", "committedDate": "2020-04-29T19:10:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU3NjEwMw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/171#discussion_r417576103", "bodyText": "Should we just call the class OldGenRcaConfig ?", "author": "yojs", "createdAt": "2020-04-29T20:00:39Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/configs/HighHeapUsageOldGenRcaConfig.java", "diffHunk": "@@ -27,25 +27,33 @@\n   private static final Logger LOG = LogManager.getLogger(HighHeapUsageOldGenRcaConfig.class);\n   private int topK;\n   public static final int DEFAULT_TOP_K = 3;\n-  private static final String TOP_K_RCA_CONF = \"top-k\";", "originalCommit": "20c0d98810cd66cce308b9b9b417e9704f553b6e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY4ODI0NA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/171#discussion_r417688244", "bodyText": "The reason I use this \"HighHeapUsageOldGenRcaConfig\" as the class name is because I want to keep it consistent with the actually RCA class name which is \"HighHeapUsageOldGenRca\".", "author": "rguo-aws", "createdAt": "2020-04-30T00:26:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU3NjEwMw=="}], "type": "inlineReview", "revised_code": {"commit": "36e9b7388f2ea8c98bf8e4c35d814587123e7b81", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/configs/HighHeapUsageOldGenRcaConfig.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/configs/HighHeapUsageOldGenRcaConfig.java\nindex 15cb1cb8..473adb16 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/configs/HighHeapUsageOldGenRcaConfig.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/configs/HighHeapUsageOldGenRcaConfig.java\n\n@@ -22,26 +22,30 @@ import org.apache.logging.log4j.Logger;\n /**\n  * config object to store rca config settings in rca.conf\n  */\n-public class HighHeapUsageOldGenRcaConfig {\n+public class HighHeapUsageOldGenRcaConfig extends GenericRcaConfig {\n \n   private static final Logger LOG = LogManager.getLogger(HighHeapUsageOldGenRcaConfig.class);\n   private int topK;\n   public static final int DEFAULT_TOP_K = 3;\n   public static final String CONFIG_NAME = \"high-heap-usage-old-gen-rca\";\n \n-  public HighHeapUsageOldGenRcaConfig(final Map<String, Object> settings) {\n+  public HighHeapUsageOldGenRcaConfig(final Map<String, Object> rcaConfigSettings) {\n     this.topK = DEFAULT_TOP_K;\n-    parseConfig(settings);\n+    parseConfig(rcaConfigSettings);\n   }\n \n-  private void parseConfig(final Map<String, Object> settings) {\n-    if (settings == null) {\n-      return;\n-    }\n+  @Override\n+  public String getRcaName() {\n+    return CONFIG_NAME;\n+  }\n+\n+  private void parseConfig(final Map<String, Object> rcaConfigSettings) {\n     try {\n-      if (settings.containsKey(RCA_CONF_KEY_CONSTANTS.TOP_K)\n-          && settings.get(RCA_CONF_KEY_CONSTANTS.TOP_K) != null) {\n-        topK = (Integer) settings.get(RCA_CONF_KEY_CONSTANTS.TOP_K);\n+      Map<String, Object> rcaMapObject = getRcaMapObject(rcaConfigSettings);\n+      if (rcaMapObject != null\n+          && rcaMapObject.containsKey(RCA_CONF_KEY_CONSTANTS.TOP_K)\n+          && rcaMapObject.get(RCA_CONF_KEY_CONSTANTS.TOP_K) != null) {\n+        topK = (Integer) rcaMapObject.get(RCA_CONF_KEY_CONSTANTS.TOP_K);\n       }\n     }\n     catch (ClassCastException ce) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU3NzA5MA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/171#discussion_r417577090", "bodyText": "I think it would make more sense to just pass the rcaConfig object to the constructor and have it read the config from it.\nSimilarly for the OldGenConfig", "author": "yojs", "createdAt": "2020-04-29T20:02:22Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/core/RcaConf.java", "diffHunk": "@@ -98,6 +100,14 @@ public int getPerVertexBufferLength() {\n   }\n \n   public HighHeapUsageOldGenRcaConfig getHighHeapUsageOldGenRcaConfig() {\n-    return conf.getHighHeapUsageOldGenRcaConfig();\n+    return new HighHeapUsageOldGenRcaConfig(conf.getRcaConfigSettings(HighHeapUsageOldGenRcaConfig.CONFIG_NAME));\n+  }\n+\n+  public HighHeapUsageYoungGenRcaConfig getHighHeapUsageYoungGenRcaConfig() {\n+    return new HighHeapUsageYoungGenRcaConfig(conf.getRcaConfigSettings(HighHeapUsageYoungGenRcaConfig.CONFIG_NAME));", "originalCommit": "20c0d98810cd66cce308b9b9b417e9704f553b6e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY4Nzg5MQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/171#discussion_r417687891", "bodyText": "done.", "author": "rguo-aws", "createdAt": "2020-04-30T00:25:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU3NzA5MA=="}], "type": "inlineReview", "revised_code": {"commit": "b304565c97337289d2af268a97dbfb94bc3f1cda", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/core/RcaConf.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/core/RcaConf.java\nindex abc66ab8..212d983b 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/core/RcaConf.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/core/RcaConf.java\n\n@@ -110,4 +120,8 @@ public class RcaConf {\n   public HotNodeClusterRcaConfig getHotNodeClusterRcaConfig() {\n     return new HotNodeClusterRcaConfig(conf.getRcaConfigSettings(HotNodeClusterRcaConfig.CONFIG_NAME));\n   }\n+\n+  public List<String> getMutedRcaList() {\n+    return conf.getMutedRcaList();\n+  }\n }\n"}}, {"oid": "b304565c97337289d2af268a97dbfb94bc3f1cda", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/b304565c97337289d2af268a97dbfb94bc3f1cda", "message": "Merge branch 'master' into rguo-hot-node-thres", "committedDate": "2020-04-29T20:51:46Z", "type": "commit"}, {"oid": "36e9b7388f2ea8c98bf8e4c35d814587123e7b81", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/36e9b7388f2ea8c98bf8e4c35d814587123e7b81", "message": "made some changes based on PR comments", "committedDate": "2020-04-29T22:27:02Z", "type": "commit"}, {"oid": "cda25c667e9a3dc20ded5380b2b8d4c8cf8993c8", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/cda25c667e9a3dc20ded5380b2b8d4c8cf8993c8", "message": "Merge branch 'master' into rguo-hot-node-thres", "committedDate": "2020-04-30T00:11:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY5MTY4Nw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/171#discussion_r417691687", "bodyText": "I don't think we need a GenericConfig and then its inherited classes. The json structure inside rca-config-settings is similar for all types.\nMaybe it would be less code, if we just have a a ConfigHelper class that initializes with RcaConf object and then specific RCAs can ask for a value given a string.", "author": "yojs", "createdAt": "2020-04-30T00:37:33Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/configs/GenericRcaConfig.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.configs;\n+\n+import java.util.Map;\n+\n+/**\n+ * base class config object to store rca config settings\n+ */\n+public abstract class GenericRcaConfig {", "originalCommit": "cda25c667e9a3dc20ded5380b2b8d4c8cf8993c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc2NTEwMw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/171#discussion_r417765103", "bodyText": "done. removed the inheritance and add the below function to retrieve value mapped by (rcaName, setting name ) key.\npublic  T readRcaConfig(String rcaName, String key, Class<? extends T> clazz)", "author": "rguo-aws", "createdAt": "2020-04-30T05:41:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY5MTY4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "2d87d53e3d75ff3870c9312cc89c8b88ee2bb48b", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/configs/GenericRcaConfig.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/configs/GenericRcaConfig.java\ndeleted file mode 100644\nindex 3e1d8010..00000000\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/configs/GenericRcaConfig.java\n+++ /dev/null\n\n@@ -1,47 +0,0 @@\n-/*\n- * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\").\n- * You may not use this file except in compliance with the License.\n- * A copy of the License is located at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * or in the \"license\" file accompanying this file. This file is distributed\n- * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n- * express or implied. See the License for the specific language governing\n- * permissions and limitations under the License.\n- */\n-\n-package com.amazon.opendistro.elasticsearch.performanceanalyzer.rca.configs;\n-\n-import java.util.Map;\n-\n-/**\n- * base class config object to store rca config settings\n- */\n-public abstract class GenericRcaConfig {\n-\n-  /**\n-   * read the rca name defined in rca.conf\n-   * @return rca name\n-   */\n-  public abstract String getRcaName();\n-\n-  /**\n-   * read the Map object entry of the specific rca from the rcaConfigSettings\n-   * @param rcaConfigSettings the Map object pointing to \"rca-config-settings\" in rca.conf\n-   * @return the Map object entry of the specific rca\n-   * @throws ClassCastException throw exception if fails to casting the object to Map object\n-   */\n-  @SuppressWarnings(\"unchecked\")\n-  protected Map<String, Object> getRcaMapObject(Map<String, Object> rcaConfigSettings) throws ClassCastException {\n-    Map<String, Object> ret = null;\n-    if (rcaConfigSettings != null\n-        && rcaConfigSettings.containsKey(getRcaName())\n-        && rcaConfigSettings.get(getRcaName()) != null) {\n-      ret = (Map<String, Object>)rcaConfigSettings.get(getRcaName());\n-    }\n-    return ret;\n-  }\n-}\n"}}, {"oid": "2d87d53e3d75ff3870c9312cc89c8b88ee2bb48b", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/2d87d53e3d75ff3870c9312cc89c8b88ee2bb48b", "message": "changes based on PR comments", "committedDate": "2020-04-30T05:31:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA1MTkwMA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/171#discussion_r418051900", "bodyText": "Maybe we can add java doc comment describing the params ?", "author": "yojs", "createdAt": "2020-04-30T14:27:21Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/core/RcaConf.java", "diffHunk": "@@ -108,10 +110,41 @@ public int getPerVertexBufferLength() {\n   }\n \n   public HighHeapUsageOldGenRcaConfig getHighHeapUsageOldGenRcaConfig() {\n-    return conf.getHighHeapUsageOldGenRcaConfig();\n+    return new HighHeapUsageOldGenRcaConfig(this);\n+  }\n+\n+  public HighHeapUsageYoungGenRcaConfig getHighHeapUsageYoungGenRcaConfig() {\n+    return new HighHeapUsageYoungGenRcaConfig(this);\n+  }\n+\n+  public HotNodeClusterRcaConfig getHotNodeClusterRcaConfig() {\n+    return new HotNodeClusterRcaConfig(this);\n   }\n \n   public List<String> getMutedRcaList() {\n     return conf.getMutedRcaList();\n   }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public <T> T readRcaConfig(String rcaName, String key, Class<? extends T> clazz) {", "originalCommit": "2d87d53e3d75ff3870c9312cc89c8b88ee2bb48b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA1NDA2Ng==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/171#discussion_r418054066", "bodyText": "It might be difficult to know which of the casts threw the exception, line 136 or line 142, right ?", "author": "yojs", "createdAt": "2020-04-30T14:30:22Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/core/RcaConf.java", "diffHunk": "@@ -108,10 +110,41 @@ public int getPerVertexBufferLength() {\n   }\n \n   public HighHeapUsageOldGenRcaConfig getHighHeapUsageOldGenRcaConfig() {\n-    return conf.getHighHeapUsageOldGenRcaConfig();\n+    return new HighHeapUsageOldGenRcaConfig(this);\n+  }\n+\n+  public HighHeapUsageYoungGenRcaConfig getHighHeapUsageYoungGenRcaConfig() {\n+    return new HighHeapUsageYoungGenRcaConfig(this);\n+  }\n+\n+  public HotNodeClusterRcaConfig getHotNodeClusterRcaConfig() {\n+    return new HotNodeClusterRcaConfig(this);\n   }\n \n   public List<String> getMutedRcaList() {\n     return conf.getMutedRcaList();\n   }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public <T> T readRcaConfig(String rcaName, String key, Class<? extends T> clazz) {\n+    T setting = null;\n+    try {\n+      Map<String, Object> rcaObj = null;\n+      if (conf.getRcaConfigSettings() != null\n+          && conf.getRcaConfigSettings().containsKey(rcaName)\n+          && conf.getRcaConfigSettings().get(rcaName) != null) {\n+        rcaObj = (Map<String, Object>)conf.getRcaConfigSettings().get(rcaName);\n+      }\n+\n+      if (rcaObj != null\n+          && rcaObj.containsKey(key)\n+          && rcaObj.get(key) != null) {\n+        setting = clazz.cast(rcaObj.get(key));\n+      }\n+    }\n+    catch (ClassCastException ne) {\n+      LOG.error(\"rca.conf contains value in invalid format, trace : {}\", ne.getMessage());", "originalCommit": "2d87d53e3d75ff3870c9312cc89c8b88ee2bb48b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "f0820d7d4ec8d15c907f6e9cc70a59bb2fe911ee", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/f0820d7d4ec8d15c907f6e9cc70a59bb2fe911ee", "message": "Merge branch 'master' into rguo-hot-node-thres", "committedDate": "2020-05-01T17:01:11Z", "type": "commit"}]}