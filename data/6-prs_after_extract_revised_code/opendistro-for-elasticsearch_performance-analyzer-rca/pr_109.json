{"pr_number": 109, "pr_title": "Fix RCA API", "pr_createdAt": "2020-02-25T20:39:42Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/109", "timeline": [{"oid": "1c7072eb7b5f8715181f78de256f669c5e6e571f", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/1c7072eb7b5f8715181f78de256f669c5e6e571f", "message": "Fixed RCA API", "committedDate": "2020-02-25T20:21:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcwNjE4Mw==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/109#discussion_r384706183", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  value.add(this.getTimeStamp());\n          \n          \n            \n                  value.add(getTimeStamp());", "author": "yojs", "createdAt": "2020-02-26T19:15:29Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/flow_units/ResourceFlowUnit.java", "diffHunk": "@@ -159,7 +159,7 @@ public static ResourceFlowUnit buildFlowUnitFromWrapper(final FlowUnitMessage me\n   public List<Object> getSqlValue(String rcaName) {\n     List<Object> value = new ArrayList<>();\n     if (!this.isEmpty()) {\n-      value.add(String.valueOf(this.getTimeStamp()));\n+      value.add(this.getTimeStamp());", "originalCommit": "1c7072eb7b5f8715181f78de256f669c5e6e571f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMwNzMzOA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/109#discussion_r385307338", "bodyText": "done", "author": "rguo-aws", "createdAt": "2020-02-27T18:57:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcwNjE4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "6f1c7f0fff35a3ec84b9ba5b49253f56f1177b73", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/flow_units/ResourceFlowUnit.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/flow_units/ResourceFlowUnit.java\nindex 929ce1aa..547ce25b 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/flow_units/ResourceFlowUnit.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/flow_units/ResourceFlowUnit.java\n\n@@ -159,7 +159,7 @@ public class ResourceFlowUnit extends GenericFlowUnit {\n   public List<Object> getSqlValue(String rcaName) {\n     List<Object> value = new ArrayList<>();\n     if (!this.isEmpty()) {\n-      value.add(this.getTimeStamp());\n+      value.add(getTimeStamp());\n       value.add(rcaName);\n       value.addAll(this.getResourceContext().getSqlValue());\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcwODY4Mg==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/109#discussion_r384708682", "bodyText": "In case of exception this method will return null. We should use @Nullable annotation to emphasize that", "author": "yojs", "createdAt": "2020-02-26T19:20:24Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/HotClusterSummary.java", "diffHunk": "@@ -83,10 +95,75 @@ public String toString() {\n     return value;\n   }\n \n+  /**\n+   * Convert this summary object to JsonElement\n+   * @return JsonElement\n+   */\n+  @Override\n+  public JsonElement toJson() {\n+    JsonObject summaryObj = new JsonObject();\n+    summaryObj.addProperty(SQL_SCHEMA_CONSTANTS.NUM_OF_NODES_COL_NAME, this.numOfNodes);\n+    summaryObj.addProperty(SQL_SCHEMA_CONSTANTS.NUM_OF_UNHEALTHY_NODES_COL_NAME, this.numOfUnhealthyNodes);\n+    this.nestedSummaryList.forEach(\n+        summary -> {\n+          summaryObj.add(summary.getTableName(), summary.toJson());\n+        }\n+    );\n+    return summaryObj;\n+  }\n+\n   public static class SQL_SCHEMA_CONSTANTS {\n \n-    public static final String NUM_OF_NODES_COL_NAME = \"Number of Nodes\";\n-    public static final String NUM_OF_UNHEALTHY_NODES_COL_NAME = \"Number of Unhealthy Nodes\";\n+    public static final String NUM_OF_NODES_COL_NAME = \"number_of_nodes\";\n+    public static final String NUM_OF_UNHEALTHY_NODES_COL_NAME = \"number_of_unhealthy_nodes\";\n+  }\n+\n+  /**\n+   * Cluster summary SQL fields\n+   */\n+  public enum ClusterSummaryField implements JooqFieldValue {\n+    NUM_OF_NODES_FIELD(SQL_SCHEMA_CONSTANTS.NUM_OF_NODES_COL_NAME, Integer.class),\n+    NUM_OF_UNHEALTHY_NODES_FILELD(SQL_SCHEMA_CONSTANTS.NUM_OF_UNHEALTHY_NODES_COL_NAME,\n+        Integer.class);\n+\n+    private String name;\n+    private Class<?> clazz;\n+\n+    ClusterSummaryField(final String name, Class<?> clazz) {\n+      this.name = name;\n+      this.clazz = clazz;\n+    }\n+\n+    @Override\n+    public Field<?> getField() {\n+      return DSL.field(DSL.name(this.name), this.clazz);\n+    }\n+\n+    @Override\n+    public String getName() {\n+      return this.name;\n+    }\n+  }\n+\n+  /**\n+   * parse SQL query result and fill the result into summary obj.\n+   * @param record SQLite record\n+   * @return whether parsing is successful or not\n+   */\n+  public static GenericSummary buildSummary(Record record) {\n+    GenericSummary summary = null;\n+    try {\n+      Integer numOfNodes = record.get(ClusterSummaryField.NUM_OF_NODES_FIELD.getField(), Integer.class);\n+      Integer numOfUnhealthyNodes = record.get(ClusterSummaryField.NUM_OF_UNHEALTHY_NODES_FILELD.getField(), Integer.class);\n+      summary = new HotClusterSummary(numOfNodes, numOfUnhealthyNodes);\n+    }\n+    catch (IllegalArgumentException ie) {\n+      LOG.error(\"Some field is not found in record, cause : {}\", ie.getMessage());\n+    }\n+    catch (DataTypeException de) {\n+      LOG.error(\"Fails to convert data type\");\n+    }\n+    return summary;", "originalCommit": "1c7072eb7b5f8715181f78de256f669c5e6e571f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMxMDUzOQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/109#discussion_r385310539", "bodyText": "done", "author": "rguo-aws", "createdAt": "2020-02-27T19:03:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcwODY4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "6f1c7f0fff35a3ec84b9ba5b49253f56f1177b73", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/HotClusterSummary.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/HotClusterSummary.java\nindex c9fb062a..583aa96d 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/HotClusterSummary.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/HotClusterSummary.java\n\n@@ -150,6 +151,7 @@ public class HotClusterSummary extends GenericSummary {\n    * @param record SQLite record\n    * @return whether parsing is successful or not\n    */\n+  @Nullable\n   public static GenericSummary buildSummary(Record record) {\n     GenericSummary summary = null;\n     try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcwODk5OQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/109#discussion_r384708999", "bodyText": "same as above", "author": "yojs", "createdAt": "2020-02-26T19:20:58Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/HotNodeSummary.java", "diffHunk": "@@ -104,9 +117,74 @@ public String toString() {\n     return value;\n   }\n \n+  /**\n+   * Convert this summary object to JsonElement\n+   * @return JsonElement\n+   */\n+  @Override\n+  public JsonElement toJson() {\n+    JsonObject summaryObj = new JsonObject();\n+    summaryObj.addProperty(SQL_SCHEMA_CONSTANTS.NODE_ID_COL_NAME, this.nodeID);\n+    summaryObj.addProperty(SQL_SCHEMA_CONSTANTS.HOST_IP_ADDRESS_COL_NAME, this.hostAddress);\n+    this.nestedSummaryList.forEach(\n+        summary -> {\n+          summaryObj.add(summary.getTableName(), summary.toJson());\n+        }\n+    );\n+    return summaryObj;\n+  }\n+\n   public static class SQL_SCHEMA_CONSTANTS {\n \n-    public static final String NODE_ID_COL_NAME = \"Node ID\";\n-    public static final String HOST_IP_ADDRESS_COL_NAME = \"Host IP\";\n+    public static final String NODE_ID_COL_NAME = \"node_id\";\n+    public static final String HOST_IP_ADDRESS_COL_NAME = \"host_address\";\n+  }\n+\n+  /**\n+   * Cluster summary SQL fields\n+   */\n+  public enum NodeSummaryField implements JooqFieldValue {\n+    NODE_ID_FIELD(SQL_SCHEMA_CONSTANTS.NODE_ID_COL_NAME, String.class),\n+    HOST_IP_ADDRESS_FILELD(SQL_SCHEMA_CONSTANTS.HOST_IP_ADDRESS_COL_NAME,\n+        String.class);\n+\n+    private String name;\n+    private Class<?> clazz;\n+\n+    NodeSummaryField(final String name, Class<?> clazz) {\n+      this.name = name;\n+      this.clazz = clazz;\n+    }\n+\n+    @Override\n+    public Field<?> getField() {\n+      return DSL.field(DSL.name(this.name), this.clazz);\n+    }\n+\n+    @Override\n+    public String getName() {\n+      return this.name;\n+    }\n+  }\n+\n+  /**\n+   * Re-generate the node summary object from SQL query result.\n+   * @param record SQLite record\n+   * @return node summary object\n+   */\n+  public static HotNodeSummary buildSummary(Record record) {\n+    HotNodeSummary summary = null;\n+    try {\n+      String nodeId = record.get(NodeSummaryField.NODE_ID_FIELD.getField(), String.class);\n+      String ipAddress = record.get(NodeSummaryField.HOST_IP_ADDRESS_FILELD.getField(), String.class);\n+      summary = new HotNodeSummary(nodeId, ipAddress);\n+    }\n+    catch (IllegalArgumentException ie) {\n+      LOG.error(\"Some field is not found in record, cause : {}\", ie.getMessage());\n+    }\n+    catch (DataTypeException de) {\n+      LOG.error(\"Fails to convert data type\");\n+    }\n+    return summary;", "originalCommit": "1c7072eb7b5f8715181f78de256f669c5e6e571f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMxMDU5OA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/109#discussion_r385310598", "bodyText": "done", "author": "rguo-aws", "createdAt": "2020-02-27T19:03:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcwODk5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "6f1c7f0fff35a3ec84b9ba5b49253f56f1177b73", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/HotNodeSummary.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/HotNodeSummary.java\nindex 1cb94241..1b6a57e8 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/HotNodeSummary.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/HotNodeSummary.java\n\n@@ -172,6 +173,7 @@ public class HotNodeSummary extends GenericSummary {\n    * @param record SQLite record\n    * @return node summary object\n    */\n+  @Nullable\n   public static HotNodeSummary buildSummary(Record record) {\n     HotNodeSummary summary = null;\n     try {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxMDM3Ng==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/109#discussion_r384710376", "bodyText": "should we just fix it now ?", "author": "yojs", "createdAt": "2020-02-26T19:23:23Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/PersistorBase.java", "diffHunk": "@@ -123,8 +125,15 @@ public synchronized String read() {\n     return readTables();\n   }\n \n-  public synchronized RcaResponse readRca(String rca) {\n-    return readRcaTable(rca);\n+  // TODO : readRca might return a list of RcaResponse if using range query", "originalCommit": "1c7072eb7b5f8715181f78de256f669c5e6e571f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxMTA5MQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/109#discussion_r384711091", "bodyText": "If we intend to keep this as a todo for now, we should expand the text saying what the TODO intends to solve but why this is not required immediately", "author": "yojs", "createdAt": "2020-02-26T19:24:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxMDM3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTMxNzQ4MQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/109#discussion_r385317481", "bodyText": "I have expanded the TODO text to explain why we didn't add range query here.\nIt is still unclear to me what needs to be done here and how are we going to define the RESTful API to do range query. Since BeagleRock does not need this either at this moment we can revisit this function to decide what are the input arguments of the new API how are we going to do range query.", "author": "rguo-aws", "createdAt": "2020-02-27T19:16:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxMDM3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzOTI0NA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/109#discussion_r385439244", "bodyText": "Let's remove the BeagleRock in comments", "author": "yojs", "createdAt": "2020-02-27T23:59:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxMDM3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "6f1c7f0fff35a3ec84b9ba5b49253f56f1177b73", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/PersistorBase.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/PersistorBase.java\nindex 6f656580..eea8db7a 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/PersistorBase.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/PersistorBase.java\n\n@@ -126,6 +126,9 @@ public abstract class PersistorBase implements Persistable {\n   }\n \n   // TODO : readRca might return a list of RcaResponse if using range query\n+  //  The current API does not support this and BeagleRock does not need this either at this moment.\n+  //  we will revisit this function to decide what are the inputs of the new API which support range query and\n+  //  we might want to define a seperate abstract method in interface to address that use case.\n   @Override\n   public synchronized JsonElement read(String rca) {\n     JsonArray rcaJson = new JsonArray();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxMTY4OQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/109#discussion_r384711689", "bodyText": "@nullable here as well ?", "author": "yojs", "createdAt": "2020-02-26T19:25:39Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/persistence/SQLitePersistor.java", "diffHunk": "@@ -173,21 +172,67 @@ private synchronized String readTable(String tableName) {\n     return tableStr;\n   }\n \n+  // TODO: we only query the most recent RCA entry in this API. might need to extend this\n+  // to support range query based on timestamp.\n   @Override\n-  synchronized RcaResponse readRcaTable(String rca) {\n-    Set<String> tableNames = super.tableNames;\n-    if (!tableNames.contains(rca)) {\n-      return null;\n+  public synchronized RcaResponse readRca(String rca) {\n+    RcaResponse response = null;\n+    Field<Integer> primaryKeyField = DSL.field(\n+        SQLiteQueryUtils.getPrimaryKeyColumnName(ResourceFlowUnit.RCA_TABLE_NAME), Integer.class);\n+    SelectJoinStep<Record> rcaQuery = SQLiteQueryUtils\n+        .buildRcaQuery(create, rca);\n+    try {\n+      List<Record> recordList = rcaQuery.fetch();\n+      if (recordList.size() > 0) {\n+        Record mostRecentRecord = recordList.get(0);\n+        response = RcaResponse.buildResponse(mostRecentRecord);\n+        if (response.getState().equals(State.UNHEALTHY.toString())) {\n+          readSummary(response, mostRecentRecord.get(primaryKeyField));\n+        }\n+      }\n     }\n-    List<Record> rcaResponseRecordList = QueryUtils.getRcaRecordList(create, rca, getSummaryTableMap(rca), tableNames);\n-    return RcaResponseUtil.getRcaResponse(rca, rcaResponseRecordList, tableNames);\n+    catch (DataAccessException de) {\n+      // it is totally fine if we fail to read some certain tables.\n+      LOG.warn(\"Fail to read RCA : {}, query = {},  exceptions : {}\", rca, rcaQuery.toString(), de.getStackTrace());\n+    }\n+    return response;", "originalCommit": "1c7072eb7b5f8715181f78de256f669c5e6e571f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "6f1c7f0fff35a3ec84b9ba5b49253f56f1177b73", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/6f1c7f0fff35a3ec84b9ba5b49253f56f1177b73", "message": "Add Nullable annotation", "committedDate": "2020-02-27T19:21:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzODIxNA==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/109#discussion_r385438214", "bodyText": "FILELD -> FIELD ?", "author": "yojs", "createdAt": "2020-02-27T23:55:58Z", "path": "src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/HotClusterSummary.java", "diffHunk": "@@ -83,10 +96,76 @@ public String toString() {\n     return value;\n   }\n \n+  /**\n+   * Convert this summary object to JsonElement\n+   * @return JsonElement\n+   */\n+  @Override\n+  public JsonElement toJson() {\n+    JsonObject summaryObj = new JsonObject();\n+    summaryObj.addProperty(SQL_SCHEMA_CONSTANTS.NUM_OF_NODES_COL_NAME, this.numOfNodes);\n+    summaryObj.addProperty(SQL_SCHEMA_CONSTANTS.NUM_OF_UNHEALTHY_NODES_COL_NAME, this.numOfUnhealthyNodes);\n+    this.nestedSummaryList.forEach(\n+        summary -> {\n+          summaryObj.add(summary.getTableName(), summary.toJson());\n+        }\n+    );\n+    return summaryObj;\n+  }\n+\n   public static class SQL_SCHEMA_CONSTANTS {\n \n-    public static final String NUM_OF_NODES_COL_NAME = \"Number of Nodes\";\n-    public static final String NUM_OF_UNHEALTHY_NODES_COL_NAME = \"Number of Unhealthy Nodes\";\n+    public static final String NUM_OF_NODES_COL_NAME = \"number_of_nodes\";\n+    public static final String NUM_OF_UNHEALTHY_NODES_COL_NAME = \"number_of_unhealthy_nodes\";\n+  }\n+\n+  /**\n+   * Cluster summary SQL fields\n+   */\n+  public enum ClusterSummaryField implements JooqFieldValue {\n+    NUM_OF_NODES_FIELD(SQL_SCHEMA_CONSTANTS.NUM_OF_NODES_COL_NAME, Integer.class),\n+    NUM_OF_UNHEALTHY_NODES_FILELD(SQL_SCHEMA_CONSTANTS.NUM_OF_UNHEALTHY_NODES_COL_NAME,", "originalCommit": "6f1c7f0fff35a3ec84b9ba5b49253f56f1177b73", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ2NjIwOQ==", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/pull/109#discussion_r385466209", "bodyText": "done", "author": "rguo-aws", "createdAt": "2020-02-28T01:36:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQzODIxNA=="}], "type": "inlineReview", "revised_code": {"commit": "8484c6da3f7d981aaf4d23af7227eb95a146e2a2", "chunk": "diff --git a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/HotClusterSummary.java b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/HotClusterSummary.java\nindex 583aa96d..053ba9f0 100644\n--- a/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/HotClusterSummary.java\n+++ b/src/main/java/com/amazon/opendistro/elasticsearch/performanceanalyzer/rca/framework/api/summaries/HotClusterSummary.java\n\n@@ -124,7 +124,7 @@ public class HotClusterSummary extends GenericSummary {\n    */\n   public enum ClusterSummaryField implements JooqFieldValue {\n     NUM_OF_NODES_FIELD(SQL_SCHEMA_CONSTANTS.NUM_OF_NODES_COL_NAME, Integer.class),\n-    NUM_OF_UNHEALTHY_NODES_FILELD(SQL_SCHEMA_CONSTANTS.NUM_OF_UNHEALTHY_NODES_COL_NAME,\n+    NUM_OF_UNHEALTHY_NODES_FIELD(SQL_SCHEMA_CONSTANTS.NUM_OF_UNHEALTHY_NODES_COL_NAME,\n         Integer.class);\n \n     private String name;\n"}}, {"oid": "8484c6da3f7d981aaf4d23af7227eb95a146e2a2", "url": "https://github.com/opendistro-for-elasticsearch/performance-analyzer-rca/commit/8484c6da3f7d981aaf4d23af7227eb95a146e2a2", "message": "Fix some minor issues", "committedDate": "2020-02-28T01:42:55Z", "type": "commit"}]}