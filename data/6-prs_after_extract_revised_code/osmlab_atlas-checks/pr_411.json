{"pr_number": 411, "pr_title": "MapRouletteUploadCommand: support for Tag fixSuggestions", "pr_createdAt": "2020-11-06T06:57:17Z", "pr_url": "https://github.com/osmlab/atlas-checks/pull/411", "timeline": [{"oid": "998c58fe295266818c00baf8827941a54cd07e38", "url": "https://github.com/osmlab/atlas-checks/commit/998c58fe295266818c00baf8827941a54cd07e38", "message": "implement without tests", "committedDate": "2020-11-06T06:20:50Z", "type": "commit"}, {"oid": "0db74c37cc14d495bf2dee5ae6b830d977f88ce7", "url": "https://github.com/osmlab/atlas-checks/commit/0db74c37cc14d495bf2dee5ae6b830d977f88ce7", "message": "update some tests and fix some bugs; use osm flag for upload", "committedDate": "2020-11-06T20:19:30Z", "type": "commit"}, {"oid": "affc7f233b064e26329cb2f68eb35f6eef225d89", "url": "https://github.com/osmlab/atlas-checks/commit/affc7f233b064e26329cb2f68eb35f6eef225d89", "message": "various clean ups and tests", "committedDate": "2020-11-07T02:10:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcwNjc4Nw==", "url": "https://github.com/osmlab/atlas-checks/pull/411#discussion_r520706787", "bodyText": "I think this should be optional. Can we add a parameter to this method to set whether we want to include the fix suggestions? This could also be accompanied by an overloaded version of this method that enables this by default, to keep things backwards compatible. We should then also have a command argument for the upload command to set this.", "author": "Bentleysb", "createdAt": "2020-11-10T16:40:32Z", "path": "src/main/java/org/openstreetmap/atlas/checks/flag/CheckFlag.java", "diffHunk": "@@ -485,6 +485,10 @@ public Task getMapRouletteTask()\n                     .map(flaggedRelation -> flaggedRelation.asGeoJsonFeature(this.identifier))\n                     .forEach(features::add);\n         }\n+        if (!this.fixSuggestions.isEmpty())\n+        {\n+            task.setCooperativeWork(this.fixSuggestions);\n+        }", "originalCommit": "affc7f233b064e26329cb2f68eb35f6eef225d89", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgzNjk2MA==", "url": "https://github.com/osmlab/atlas-checks/pull/411#discussion_r520836960", "bodyText": "Yeah 100% agreed. Updates are in 1f1d8c1", "author": "seancoulter", "createdAt": "2020-11-10T19:57:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcwNjc4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "1f1d8c1668e1cd2e3624f97b7b4bd3763062f365", "chunk": "diff --git a/src/main/java/org/openstreetmap/atlas/checks/flag/CheckFlag.java b/src/main/java/org/openstreetmap/atlas/checks/flag/CheckFlag.java\nindex e4c6981..bc1b250 100644\n--- a/src/main/java/org/openstreetmap/atlas/checks/flag/CheckFlag.java\n+++ b/src/main/java/org/openstreetmap/atlas/checks/flag/CheckFlag.java\n\n@@ -485,7 +485,57 @@ public class CheckFlag implements Iterable<Location>, Located, Serializable\n                     .map(flaggedRelation -> flaggedRelation.asGeoJsonFeature(this.identifier))\n                     .forEach(features::add);\n         }\n-        if (!this.fixSuggestions.isEmpty())\n+        task.setGeoJson(Optional.of(features));\n+        return task;\n+    }\n+\n+    /**\n+     * Overloaded to support optional fix suggestions\n+     * \n+     * @param includeFixSuggestions\n+     *            true if we want to upload fix suggestions, false if not\n+     * @return @return a {@link Task}\n+     */\n+    public Task getMapRouletteTask(final boolean includeFixSuggestions)\n+    {\n+        final Task task = new Task();\n+        task.setInstruction(this.getInstructions());\n+        task.setProjectName(this.getCountryISO());\n+        task.setChallengeName(this.getChallengeName().orElse(this.getClass().getSimpleName()));\n+        task.setTaskIdentifier(this.identifier);\n+\n+        // Add custom pin point(s), if supplied.\n+        final Set<Location> points = this.getPoints();\n+        if (!points.isEmpty())\n+        {\n+            task.setPoints(points);\n+        }\n+        else\n+        {\n+            final Set<PolyLine> polyLines = this.getPolyLines();\n+            if (!polyLines.isEmpty())\n+            {\n+                // Retrieve the first item in the list and retrieve the first point in the\n+                // geometry for the object\n+                task.setPoint(polyLines.iterator().next().iterator().next());\n+            }\n+        }\n+\n+        final JsonArray features = new JsonArray();\n+        // Features\n+        if (!this.getGeometryWithProperties().isEmpty())\n+        {\n+            this.getGeometryWithProperties()\n+                    .forEach(shape -> features.add(new GeoJsonBuilder().create(shape)));\n+        }\n+        final Set<FlaggedObject> flaggedRelations = this.getFlaggedRelations();\n+        if (!flaggedRelations.isEmpty())\n+        {\n+            this.getFlaggedRelations().stream()\n+                    .map(flaggedRelation -> flaggedRelation.asGeoJsonFeature(this.identifier))\n+                    .forEach(features::add);\n+        }\n+        if (includeFixSuggestions && !this.fixSuggestions.isEmpty())\n         {\n             task.setCooperativeWork(this.fixSuggestions);\n         }\n"}}, {"oid": "1f1d8c1668e1cd2e3624f97b7b4bd3763062f365", "url": "https://github.com/osmlab/atlas-checks/commit/1f1d8c1668e1cd2e3624f97b7b4bd3763062f365", "message": "fix suggestion upload optional", "committedDate": "2020-11-10T19:56:33Z", "type": "commit"}, {"oid": "ca619a2cb6cd1b353ba6d61e55ede7d1ba98f44f", "url": "https://github.com/osmlab/atlas-checks/commit/ca619a2cb6cd1b353ba6d61e55ede7d1ba98f44f", "message": "sonar", "committedDate": "2020-11-11T21:47:43Z", "type": "commit"}, {"oid": "157281c5f190f6f818baaa0d06f9d6d62d9bf989", "url": "https://github.com/osmlab/atlas-checks/commit/157281c5f190f6f818baaa0d06f9d6d62d9bf989", "message": "ignore cognitive complexity and delete unused file", "committedDate": "2020-11-12T00:54:54Z", "type": "commit"}]}