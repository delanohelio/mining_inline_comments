{"pr_number": 7497, "pr_title": "allow customization of default Python interpreter used by reticulate", "pr_createdAt": "2020-07-30T20:47:28Z", "pr_url": "https://github.com/rstudio/rstudio/pull/7497", "timeline": [{"oid": "5d33981a13193c8cea8a72cbd61beaa38fbdf76c", "url": "https://github.com/rstudio/rstudio/commit/5d33981a13193c8cea8a72cbd61beaa38fbdf76c", "message": "initial scaffolding for Python environment work [WIP]", "committedDate": "2020-08-03T17:37:45Z", "type": "commit"}, {"oid": "e0f81ee1633b7b0ce0d6d39777bcfb2b2e7d838d", "url": "https://github.com/rstudio/rstudio/commit/e0f81ee1633b7b0ce0d6d39777bcfb2b2e7d838d", "message": "user pref for python default interpreter", "committedDate": "2020-08-03T17:37:45Z", "type": "commit"}, {"oid": "14beac232dd1aae59e9b8e01266f6c5cb406c24d", "url": "https://github.com/rstudio/rstudio/commit/14beac232dd1aae59e9b8e01266f6c5cb406c24d", "message": "wire up prefs", "committedDate": "2020-08-03T17:37:46Z", "type": "commit"}, {"oid": "7c50e3dfaff1a5f3c2886e9ef0fabb3b22281df3", "url": "https://github.com/rstudio/rstudio/commit/7c50e3dfaff1a5f3c2886e9ef0fabb3b22281df3", "message": "tidying up a bit", "committedDate": "2020-08-03T17:37:46Z", "type": "commit"}, {"oid": "64bdf919ae36487bfe1d261281447220bee7a8fd", "url": "https://github.com/rstudio/rstudio/commit/64bdf919ae36487bfe1d261281447220bee7a8fd", "message": "remove now-unused file", "committedDate": "2020-08-03T17:37:46Z", "type": "commit"}, {"oid": "3885692baa259547b83be7fd2f56354c166a07de", "url": "https://github.com/rstudio/rstudio/commit/3885692baa259547b83be7fd2f56354c166a07de", "message": "a default value must be set", "committedDate": "2020-08-03T17:37:46Z", "type": "commit"}, {"oid": "3885692baa259547b83be7fd2f56354c166a07de", "url": "https://github.com/rstudio/rstudio/commit/3885692baa259547b83be7fd2f56354c166a07de", "message": "a default value must be set", "committedDate": "2020-08-03T17:37:46Z", "type": "forcePushed"}, {"oid": "67084c68a30672f0826022c552b01c624f88e685", "url": "https://github.com/rstudio/rstudio/commit/67084c68a30672f0826022c552b01c624f88e685", "message": "also provide bit of UI verifying Python version", "committedDate": "2020-08-03T21:08:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY3MTM2NQ==", "url": "https://github.com/rstudio/rstudio/pull/7497#discussion_r464671365", "bodyText": "The changes here (and below) were made to ensure that value change events fire when the underlying textbox itself is edited, which is necessary for the case where the textbox is not read-only.", "author": "kevinushey", "createdAt": "2020-08-03T21:27:15Z", "path": "src/gwt/src/org/rstudio/core/client/widget/TextBoxWithButton.java", "diffHunk": "@@ -86,6 +87,11 @@ protected TextBoxWithButton(String label,\n       textBox_ = new TextBox();\n       textBox_.setWidth(\"100%\");\n       textBox_.setReadOnly(readOnly);\n+      \n+      textBox_.addValueChangeHandler((ValueChangeEvent<String> event) ->", "originalCommit": "67084c68a30672f0826022c552b01c624f88e685", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "60ca6ef3752b1e2b0fe543a42d69aae7143b6254", "url": "https://github.com/rstudio/rstudio/commit/60ca6ef3752b1e2b0fe543a42d69aae7143b6254", "message": "tweaks", "committedDate": "2020-08-04T16:07:30Z", "type": "commit"}, {"oid": "6445fe7eed587ce64f31a1279891121ec6dc39c2", "url": "https://github.com/rstudio/rstudio/commit/6445fe7eed587ce64f31a1279891121ec6dc39c2", "message": "catch errors when listing conda envs", "committedDate": "2020-08-04T17:41:25Z", "type": "commit"}, {"oid": "5516b530322e3d818a36447e3ab50276917b0d76", "url": "https://github.com/rstudio/rstudio/commit/5516b530322e3d818a36447e3ab50276917b0d76", "message": "update RETICULATE_PYTHON on init", "committedDate": "2020-08-04T18:21:55Z", "type": "commit"}, {"oid": "3ec31aef2460d0443cfacc12e02f6379b85c49c7", "url": "https://github.com/rstudio/rstudio/commit/3ec31aef2460d0443cfacc12e02f6379b85c49c7", "message": "allow restart of session only when editing Python", "committedDate": "2020-08-04T18:52:23Z", "type": "commit"}, {"oid": "52b1df3f4f90bc5c871b93d0bfcc8865609cc4be", "url": "https://github.com/rstudio/rstudio/commit/52b1df3f4f90bc5c871b93d0bfcc8865609cc4be", "message": "detect case where RETICULATE_PYTHON set in .Rprofile", "committedDate": "2020-08-04T19:54:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk4MDAxOQ==", "url": "https://github.com/rstudio/rstudio/pull/7497#discussion_r465980019", "bodyText": "Should use constant PYTHON_PLACEHOLDER_TEXT to ensure they match?", "author": "gtritchie", "createdAt": "2020-08-05T20:19:33Z", "path": "src/gwt/src/org/rstudio/studio/client/workbench/prefs/views/PythonPreferencesPane.java", "diffHunk": "@@ -0,0 +1,319 @@\n+/*\n+ * PythonPreferencesPane.java\n+ *\n+ * Copyright (C) 2020 by RStudio, PBC\n+ *\n+ * Unless you have received this program directly from RStudio pursuant\n+ * to the terms of a commercial license agreement with RStudio, then\n+ * this program is licensed to you under the terms of version 3 of the\n+ * GNU Affero General Public License. This program is distributed WITHOUT\n+ * ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+ * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+ * AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+ *\n+ */\n+package org.rstudio.studio.client.workbench.prefs.views;\n+\n+import org.rstudio.core.client.Debug;\n+import org.rstudio.core.client.ElementIds;\n+import org.rstudio.core.client.StringUtil;\n+import org.rstudio.core.client.prefs.RestartRequirement;\n+import org.rstudio.core.client.resources.ImageResource2x;\n+import org.rstudio.core.client.widget.InfoBar;\n+import org.rstudio.core.client.widget.OperationWithInput;\n+import org.rstudio.core.client.widget.TextBoxWithButton;\n+import org.rstudio.studio.client.server.ServerError;\n+import org.rstudio.studio.client.server.ServerRequestCallback;\n+import org.rstudio.studio.client.workbench.prefs.model.UserPrefs;\n+import org.rstudio.studio.client.workbench.prefs.views.python.PythonInterpreterListEntryUi;\n+import org.rstudio.studio.client.workbench.prefs.views.python.PythonInterpreterSelectionDialog;\n+\n+import com.google.gwt.core.client.GWT;\n+import com.google.gwt.event.dom.client.BlurEvent;\n+import com.google.gwt.event.dom.client.ClickEvent;\n+import com.google.gwt.event.dom.client.ClickHandler;\n+import com.google.gwt.event.logical.shared.ValueChangeEvent;\n+import com.google.gwt.resources.client.ClientBundle;\n+import com.google.gwt.resources.client.CssResource;\n+import com.google.gwt.resources.client.ImageResource;\n+import com.google.gwt.user.client.ui.FlowPanel;\n+import com.google.gwt.user.client.ui.SimplePanel;\n+import com.google.inject.Inject;\n+\n+public class PythonPreferencesPane extends PreferencesPane\n+{\n+   @Inject\n+   public PythonPreferencesPane(PythonDialogResources res,\n+                                PythonServerOperations server)\n+   {\n+      res_ = res;\n+      server_ = server;\n+      \n+      add(headerLabel(\"Python\"));\n+      \n+      mismatchWarningBar_ = new InfoBar(InfoBar.WARNING);\n+      mismatchWarningBar_.setText(\n+            \"The active Python interpreter has been changed by an R startup script.\");\n+      mismatchWarningBar_.setVisible(false);\n+      add(spaced(mismatchWarningBar_));\n+      \n+      tbPythonInterpreter_ = new TextBoxWithButton(\n+            \"Python interpreter:\",\n+            \"(No interpreter selected)\",", "originalCommit": "52b1df3f4f90bc5c871b93d0bfcc8865609cc4be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwNTE3MQ==", "url": "https://github.com/rstudio/rstudio/pull/7497#discussion_r466605171", "bodyText": "Yes, we should! Thanks for catching that.", "author": "kevinushey", "createdAt": "2020-08-06T18:26:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk4MDAxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "f433c5b69c3a7506816210d6dabce35f82da5508", "chunk": "diff --git a/src/gwt/src/org/rstudio/studio/client/workbench/prefs/views/PythonPreferencesPane.java b/src/gwt/src/org/rstudio/studio/client/workbench/prefs/views/PythonPreferencesPane.java\nindex 5aefae3e68..7674383604 100644\n--- a/src/gwt/src/org/rstudio/studio/client/workbench/prefs/views/PythonPreferencesPane.java\n+++ b/src/gwt/src/org/rstudio/studio/client/workbench/prefs/views/PythonPreferencesPane.java\n\n@@ -59,7 +59,7 @@ public class PythonPreferencesPane extends PreferencesPane\n       \n       tbPythonInterpreter_ = new TextBoxWithButton(\n             \"Python interpreter:\",\n-            \"(No interpreter selected)\",\n+            PYTHON_PLACEHOLDER_TEXT,\n             \"Select...\",\n             null,\n             ElementIds.TextBoxButtonId.PYTHON_DEFAULT_INTERPRETER,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk4MDM3Ng==", "url": "https://github.com/rstudio/rstudio/pull/7497#discussion_r465980376", "bodyText": "Typo? \"interpreted\" vs \"interpreter\"?", "author": "gtritchie", "createdAt": "2020-08-05T20:20:10Z", "path": "src/gwt/src/org/rstudio/studio/client/workbench/prefs/views/PythonPreferencesPane.java", "diffHunk": "@@ -0,0 +1,319 @@\n+/*\n+ * PythonPreferencesPane.java\n+ *\n+ * Copyright (C) 2020 by RStudio, PBC\n+ *\n+ * Unless you have received this program directly from RStudio pursuant\n+ * to the terms of a commercial license agreement with RStudio, then\n+ * this program is licensed to you under the terms of version 3 of the\n+ * GNU Affero General Public License. This program is distributed WITHOUT\n+ * ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+ * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+ * AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+ *\n+ */\n+package org.rstudio.studio.client.workbench.prefs.views;\n+\n+import org.rstudio.core.client.Debug;\n+import org.rstudio.core.client.ElementIds;\n+import org.rstudio.core.client.StringUtil;\n+import org.rstudio.core.client.prefs.RestartRequirement;\n+import org.rstudio.core.client.resources.ImageResource2x;\n+import org.rstudio.core.client.widget.InfoBar;\n+import org.rstudio.core.client.widget.OperationWithInput;\n+import org.rstudio.core.client.widget.TextBoxWithButton;\n+import org.rstudio.studio.client.server.ServerError;\n+import org.rstudio.studio.client.server.ServerRequestCallback;\n+import org.rstudio.studio.client.workbench.prefs.model.UserPrefs;\n+import org.rstudio.studio.client.workbench.prefs.views.python.PythonInterpreterListEntryUi;\n+import org.rstudio.studio.client.workbench.prefs.views.python.PythonInterpreterSelectionDialog;\n+\n+import com.google.gwt.core.client.GWT;\n+import com.google.gwt.event.dom.client.BlurEvent;\n+import com.google.gwt.event.dom.client.ClickEvent;\n+import com.google.gwt.event.dom.client.ClickHandler;\n+import com.google.gwt.event.logical.shared.ValueChangeEvent;\n+import com.google.gwt.resources.client.ClientBundle;\n+import com.google.gwt.resources.client.CssResource;\n+import com.google.gwt.resources.client.ImageResource;\n+import com.google.gwt.user.client.ui.FlowPanel;\n+import com.google.gwt.user.client.ui.SimplePanel;\n+import com.google.inject.Inject;\n+\n+public class PythonPreferencesPane extends PreferencesPane\n+{\n+   @Inject\n+   public PythonPreferencesPane(PythonDialogResources res,\n+                                PythonServerOperations server)\n+   {\n+      res_ = res;\n+      server_ = server;\n+      \n+      add(headerLabel(\"Python\"));\n+      \n+      mismatchWarningBar_ = new InfoBar(InfoBar.WARNING);\n+      mismatchWarningBar_.setText(\n+            \"The active Python interpreter has been changed by an R startup script.\");\n+      mismatchWarningBar_.setVisible(false);\n+      add(spaced(mismatchWarningBar_));\n+      \n+      tbPythonInterpreter_ = new TextBoxWithButton(\n+            \"Python interpreter:\",\n+            \"(No interpreter selected)\",\n+            \"Select...\",\n+            null,\n+            ElementIds.TextBoxButtonId.PYTHON_DEFAULT_INTERPRETER,\n+            true,\n+            new ClickHandler()\n+            {\n+               @Override\n+               public void onClick(ClickEvent event)\n+               {\n+                  getProgressIndicator().onProgress(\"Finding interpreters...\");\n+                  \n+                  server_.pythonFindInterpreters(new ServerRequestCallback<PythonInterpreters>()\n+                  {\n+                     @Override\n+                     public void onResponseReceived(final PythonInterpreters response)\n+                     {\n+                        getProgressIndicator().onCompleted();\n+                        \n+                        PythonInterpreterSelectionDialog dialog =\n+                              new PythonInterpreterSelectionDialog(\n+                                    response.getPythonInterpreters(),\n+                                    new OperationWithInput<PythonInterpreter>()\n+                                    {\n+                                       @Override\n+                                       public void execute(PythonInterpreter input)\n+                                       {\n+                                          String path = input.getPath();\n+                                          tbPythonInterpreter_.setText(path);\n+                                       }\n+                                    });\n+                        \n+                        dialog.showModal(true);\n+                     }\n+                     \n+                     @Override\n+                     public void onError(ServerError error)\n+                     {\n+                        String message =\n+                              \"Error finding Python interpreters: \" +\n+                              error.getUserMessage();\n+                        getProgressIndicator().onError(message);\n+                        \n+                        Debug.logError(error);\n+                     }\n+                  });\n+               }\n+            });\n+      \n+      tbPythonInterpreter_.addValueChangeHandler((ValueChangeEvent<String> event) ->\n+      {\n+         updateDescription();\n+      });\n+      \n+      tbPythonInterpreter_.addDomHandler((BlurEvent event) ->\n+      {\n+         updateDescription();\n+      }, BlurEvent.getType());\n+      \n+      tbPythonInterpreter_.setWidth(\"420px\");\n+      tbPythonInterpreter_.setText(PYTHON_PLACEHOLDER_TEXT);\n+      tbPythonInterpreter_.setReadOnly(false);\n+      add(lessSpaced(tbPythonInterpreter_));\n+      \n+      add(spaced(container_));\n+      \n+   }\n+   \n+   private void clearDescription()\n+   {\n+      container_.setWidget(new FlowPanel());\n+   }\n+   \n+   private void updateDescription()\n+   {\n+      String path = tbPythonInterpreter_.getText();\n+      if (StringUtil.isNullOrEmpty(path) ||\n+          StringUtil.equals(path, PYTHON_PLACEHOLDER_TEXT))\n+      {\n+         clearDescription();\n+         return;\n+      }\n+      \n+      server_.pythonDescribeInterpreter(\n+            tbPythonInterpreter_.getText(),\n+            new ServerRequestCallback<PythonInterpreter>()\n+            {\n+               @Override\n+               public void onResponseReceived(PythonInterpreter info)\n+               {\n+                  updateDescription(info);\n+               }\n+\n+               @Override\n+               public void onError(ServerError error)\n+               {\n+                  Debug.logError(error);\n+               }\n+            });\n+   }\n+   \n+   private void updateDescription(PythonInterpreter info)\n+   {\n+      if (!info.isValid())\n+      {\n+         String reason = info.getInvalidReason();\n+         if (StringUtil.isNullOrEmpty(reason))\n+            reason = \"The selected Python interpreter appears to be invalid.\";\n+         \n+         InfoBar bar = new InfoBar(InfoBar.WARNING);\n+         bar.setText(reason);\n+         container_.setWidget(bar);\n+      }\n+      else\n+      {\n+         PythonInterpreterListEntryUi ui = new PythonInterpreterListEntryUi(info);\n+         ui.addStyleName(RES.styles().description());\n+         \n+         String type = info.getType();\n+         \n+         if (type == null)\n+         {\n+            type = \"[Unknown]\";\n+         }\n+         else if (type == \"virtualenv\")\n+         {\n+            type = \"Virtual Environment\";\n+         }\n+         else if (type == \"conda\")\n+         {\n+            type = \"Conda Environment\";\n+         }\n+         else if (type == \"system\")\n+         {\n+            type = \"System Interpreter\";\n+         }\n+         \n+         ui.getPath().setText(\"[\" + type + \"]\");\n+         container_.setWidget(ui);\n+      }\n+   }\n+   \n+   private void checkForMismatch(PythonInterpreter activeInterpreter)\n+   {\n+      // nothing to do if there isn't an active interpreter\n+      if (StringUtil.isNullOrEmpty(activeInterpreter.getPath()))\n+      {\n+         mismatchWarningBar_.setVisible(false);\n+         return;\n+      }\n+      \n+      // nothing to do if the user hasn't changed the configured Python\n+      String requestedPath = tbPythonInterpreter_.getText();\n+      boolean isSet =\n+            !StringUtil.isNullOrEmpty(requestedPath) &&\n+            !StringUtil.equals(requestedPath, PYTHON_PLACEHOLDER_TEXT);\n+      \n+      if (!isSet)\n+      {\n+         mismatchWarningBar_.setVisible(false);\n+         return;\n+      }\n+      \n+      // toggle visibility\n+      boolean mismatch =\n+            !StringUtil.equals(requestedPath, activeInterpreter.getPath());\n+      \n+      mismatchWarningBar_.setVisible(mismatch);\n+   }\n+\n+   @Override\n+   public ImageResource getIcon()\n+   {\n+      return new ImageResource2x(res_.iconPython2x());\n+   }\n+\n+   @Override\n+   public String getName()\n+   {\n+      return \"Python\";\n+   }\n+\n+   @Override\n+   protected void initialize(UserPrefs prefs)\n+   {\n+      String pythonPath = prefs.pythonDefaultInterpreter().getValue();\n+      if (!StringUtil.isNullOrEmpty(pythonPath))\n+         tbPythonInterpreter_.setText(pythonPath);\n+      \n+      server_.pythonActiveInterpreter(new ServerRequestCallback<PythonInterpreter>()\n+      {\n+         @Override\n+         public void onResponseReceived(PythonInterpreter response)\n+         {\n+            checkForMismatch(response);\n+         }\n+\n+         @Override\n+         public void onError(ServerError error)\n+         {\n+            Debug.logError(error);\n+         }\n+      });\n+   }\n+   \n+   @Override\n+   public RestartRequirement onApply(UserPrefs prefs)\n+   {\n+      RestartRequirement requirement = super.onApply(prefs);\n+      \n+      String oldValue = prefs.pythonDefaultInterpreter().getGlobalValue();\n+      String newValue = tbPythonInterpreter_.getText();\n+      \n+      boolean isSet =\n+            !StringUtil.isNullOrEmpty(newValue) &&\n+            !StringUtil.equals(newValue, PYTHON_PLACEHOLDER_TEXT);\n+      \n+      if (isSet && !StringUtil.equals(oldValue, newValue))\n+      {\n+         prefs.pythonDefaultInterpreter().setGlobalValue(newValue);\n+         requirement.setSessionRestartRequired(true);\n+      }\n+      \n+      return requirement;\n+   }\n+   \n+   \n+\n+   public interface Styles extends CssResource\n+   {\n+      String description();\n+      String invalid();\n+   }\n+\n+   public interface Resources extends ClientBundle\n+   {\n+      @Source(\"PythonPreferencesPane.css\")\n+      Styles styles();\n+   }\n+\n+   private final InfoBar mismatchWarningBar_;\n+   private final PythonDialogResources res_;\n+   private final PythonServerOperations server_;\n+   private final TextBoxWithButton tbPythonInterpreter_;\n+   private final SimplePanel container_ = new SimplePanel();\n+   \n+   private PythonInterpreter activeInterpreter_;\n+   \n+   private static final String PYTHON_PLACEHOLDER_TEXT = \"(No interpreted selected)\";", "originalCommit": "52b1df3f4f90bc5c871b93d0bfcc8865609cc4be", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f433c5b69c3a7506816210d6dabce35f82da5508", "chunk": "diff --git a/src/gwt/src/org/rstudio/studio/client/workbench/prefs/views/PythonPreferencesPane.java b/src/gwt/src/org/rstudio/studio/client/workbench/prefs/views/PythonPreferencesPane.java\nindex 5aefae3e68..7674383604 100644\n--- a/src/gwt/src/org/rstudio/studio/client/workbench/prefs/views/PythonPreferencesPane.java\n+++ b/src/gwt/src/org/rstudio/studio/client/workbench/prefs/views/PythonPreferencesPane.java\n\n@@ -59,7 +59,7 @@ public class PythonPreferencesPane extends PreferencesPane\n       \n       tbPythonInterpreter_ = new TextBoxWithButton(\n             \"Python interpreter:\",\n-            \"(No interpreter selected)\",\n+            PYTHON_PLACEHOLDER_TEXT,\n             \"Select...\",\n             null,\n             ElementIds.TextBoxButtonId.PYTHON_DEFAULT_INTERPRETER,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk4MjA2Mw==", "url": "https://github.com/rstudio/rstudio/pull/7497#discussion_r465982063", "bodyText": "The listbox should have a label for screen readers (for a visual user it's obvious what it's for but it's an unlabeled control to a screen reader):\nwidgets_.setAriaLabel(\"Python Interpreters\");", "author": "gtritchie", "createdAt": "2020-08-05T20:23:25Z", "path": "src/gwt/src/org/rstudio/studio/client/workbench/prefs/views/python/PythonInterpreterSelectionDialog.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * PythonInterpreterSelectionDialog.java\n+ *\n+ * Copyright (C) 2020 by RStudio, PBC\n+ *\n+ * Unless you have received this program directly from RStudio pursuant\n+ * to the terms of a commercial license agreement with RStudio, then\n+ * this program is licensed to you under the terms of version 3 of the\n+ * GNU Affero General Public License. This program is distributed WITHOUT\n+ * ANY EXPRESS OR IMPLIED WARRANTY, INCLUDING THOSE OF NON-INFRINGEMENT,\n+ * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE. Please refer to the\n+ * AGPL (http://www.gnu.org/licenses/agpl-3.0.txt) for more details.\n+ *\n+ */\n+package org.rstudio.studio.client.workbench.prefs.views.python;\n+\n+import org.rstudio.core.client.js.JsUtil;\n+import org.rstudio.core.client.widget.ModalDialog;\n+import org.rstudio.core.client.widget.OperationWithInput;\n+import org.rstudio.core.client.widget.WidgetListBox;\n+import org.rstudio.studio.client.workbench.prefs.views.PythonInterpreter;\n+\n+import com.google.gwt.aria.client.Roles;\n+import com.google.gwt.core.client.JsArray;\n+import com.google.gwt.user.client.ui.Widget;\n+\n+public class PythonInterpreterSelectionDialog extends ModalDialog<PythonInterpreter>\n+{\n+   public PythonInterpreterSelectionDialog(final JsArray<PythonInterpreter> interpreters,\n+                                           final OperationWithInput<PythonInterpreter> operation)\n+   {\n+      super(\"Python Interpreters\", Roles.getDialogRole(), operation);\n+      setOkButtonCaption(\"Select\");\n+      \n+      widgets_ = new WidgetListBox<PythonInterpreterListEntryUi>();", "originalCommit": "52b1df3f4f90bc5c871b93d0bfcc8865609cc4be", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f433c5b69c3a7506816210d6dabce35f82da5508", "chunk": "diff --git a/src/gwt/src/org/rstudio/studio/client/workbench/prefs/views/python/PythonInterpreterSelectionDialog.java b/src/gwt/src/org/rstudio/studio/client/workbench/prefs/views/python/PythonInterpreterSelectionDialog.java\nindex 0251ca9d7b..5b4f0b930d 100644\n--- a/src/gwt/src/org/rstudio/studio/client/workbench/prefs/views/python/PythonInterpreterSelectionDialog.java\n+++ b/src/gwt/src/org/rstudio/studio/client/workbench/prefs/views/python/PythonInterpreterSelectionDialog.java\n\n@@ -33,6 +33,8 @@ public class PythonInterpreterSelectionDialog extends ModalDialog<PythonInterpre\n       setOkButtonCaption(\"Select\");\n       \n       widgets_ = new WidgetListBox<PythonInterpreterListEntryUi>();\n+      widgets_.setAriaLabel(\"Python Interpreters\");\n+      \n       for (PythonInterpreter interpreter : JsUtil.asIterable(interpreters))\n          if (interpreter.getVersion() != null)\n             widgets_.addItem(new PythonInterpreterListEntryUi(interpreter));\n"}}, {"oid": "f433c5b69c3a7506816210d6dabce35f82da5508", "url": "https://github.com/rstudio/rstudio/commit/f433c5b69c3a7506816210d6dabce35f82da5508", "message": "accessibility feedback", "committedDate": "2020-08-06T18:35:44Z", "type": "commit"}, {"oid": "9bb359b0f45533d282dfcb859a6bd8c2d58b94bf", "url": "https://github.com/rstudio/rstudio/commit/9bb359b0f45533d282dfcb859a6bd8c2d58b94bf", "message": "track and update python as prefs change", "committedDate": "2020-08-06T22:42:40Z", "type": "commit"}]}