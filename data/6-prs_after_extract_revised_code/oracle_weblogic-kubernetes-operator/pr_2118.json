{"pr_number": 2118, "pr_title": "Retry behavior for synchronous calls during initialization", "pr_createdAt": "2020-12-23T22:23:15Z", "pr_url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2118", "timeline": [{"oid": "3ae8b98a50b48781f3ddfbd52ff4b57d4e36b10b", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3ae8b98a50b48781f3ddfbd52ff4b57d4e36b10b", "message": "Retry behavior for synchronous calls during initialization", "committedDate": "2020-12-23T22:11:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMyMTc4Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2118#discussion_r548321786", "bodyText": "What happened if it is a RuntimeException but not an ApiException?  Do we want to limit the number of retries or make it retry forever (hopefully the condition can be resolved)?", "author": "jshum2479", "createdAt": "2020-12-23T23:44:35Z", "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/CallBuilder.java", "diffHunk": "@@ -594,6 +600,40 @@ public VersionInfo readVersionCode() throws ApiException {\n     return DISPATCHER.execute(factory, requestParams, helper);\n   }\n \n+  /**\n+   * Execute a synchronous call with a retry on failure.\n+   * @param call The call\n+   * @param retryDelaySeconds Retry delay in seconds\n+   * @param <T> Call return type\n+   * @return Results of operation, if successful\n+   * @throws Exception Exception types other than ApiException, which will cause failure\n+   */\n+  public <T> T executeSynchronousCallWithRetry(Callable<T> call, int retryDelaySeconds) throws Exception {\n+    T result = null;\n+    boolean complete = false;\n+    do {\n+      try {\n+        result = call.call();\n+        complete = true;\n+      } catch (RuntimeException re) {", "originalCommit": "3ae8b98a50b48781f3ddfbd52ff4b57d4e36b10b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODU1MzQxMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2118#discussion_r548553412", "bodyText": "I'll think about other exceptions... I didn't want to limit the number of retries here because the operator cannot go on until it can connect to the master and the operator will eventually be killed by the liveness probe.", "author": "rjeberhard", "createdAt": "2020-12-24T15:04:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODMyMTc4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "bb16edec075e8d30c3f7e7429ee407d90ca18e10", "chunk": "diff --git a/operator/src/main/java/oracle/kubernetes/operator/helpers/CallBuilder.java b/operator/src/main/java/oracle/kubernetes/operator/helpers/CallBuilder.java\nindex da016096fc..fd25aff955 100644\n--- a/operator/src/main/java/oracle/kubernetes/operator/helpers/CallBuilder.java\n+++ b/operator/src/main/java/oracle/kubernetes/operator/helpers/CallBuilder.java\n\n@@ -620,8 +620,8 @@ public class CallBuilder {\n         if (cause instanceof ApiException) {\n           LOGGER.warning(MessageKeys.EXCEPTION, cause);\n         }\n-      } catch (ApiException ae) {\n-        LOGGER.warning(MessageKeys.EXCEPTION, ae);\n+      } catch (Throwable t) {\n+        LOGGER.warning(MessageKeys.EXCEPTION, t);\n       }\n \n       if (complete) {\n"}}, {"oid": "1286b17415521b08c918a382d93e0dc25d6dc138", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/1286b17415521b08c918a382d93e0dc25d6dc138", "message": "Merge remote-tracking branch 'origin/develop' into owls-86461", "committedDate": "2021-01-04T21:26:55Z", "type": "commit"}, {"oid": "bb16edec075e8d30c3f7e7429ee407d90ca18e10", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/bb16edec075e8d30c3f7e7429ee407d90ca18e10", "message": "Add initialization retry tuning", "committedDate": "2021-01-04T22:15:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAxODQzMA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2118#discussion_r552018430", "bodyText": "Does the ApiException ever get nested further down?  Is there ever a case where you need to loop through the causes looking for ApiException?", "author": "ddsharpe", "createdAt": "2021-01-05T15:50:20Z", "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/CallBuilder.java", "diffHunk": "@@ -594,6 +600,40 @@ public VersionInfo readVersionCode() throws ApiException {\n     return DISPATCHER.execute(factory, requestParams, helper);\n   }\n \n+  /**\n+   * Execute a synchronous call with a retry on failure.\n+   * @param call The call\n+   * @param retryDelaySeconds Retry delay in seconds\n+   * @param <T> Call return type\n+   * @return Results of operation, if successful\n+   * @throws Exception Exception types other than ApiException, which will cause failure\n+   */\n+  public <T> T executeSynchronousCallWithRetry(Callable<T> call, int retryDelaySeconds) throws Exception {\n+    T result = null;\n+    boolean complete = false;\n+    do {\n+      try {\n+        result = call.call();\n+        complete = true;\n+      } catch (RuntimeException re) {\n+        Throwable cause = re.getCause();", "originalCommit": "bb16edec075e8d30c3f7e7429ee407d90ca18e10", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "156014bb0634fbc6e2ea45a57347e99ad70c3ba9", "chunk": "diff --git a/operator/src/main/java/oracle/kubernetes/operator/helpers/CallBuilder.java b/operator/src/main/java/oracle/kubernetes/operator/helpers/CallBuilder.java\nindex fd25aff955..a6a02058ce 100644\n--- a/operator/src/main/java/oracle/kubernetes/operator/helpers/CallBuilder.java\n+++ b/operator/src/main/java/oracle/kubernetes/operator/helpers/CallBuilder.java\n\n@@ -609,6 +609,19 @@ public class CallBuilder {\n    * @throws Exception Exception types other than ApiException, which will cause failure\n    */\n   public <T> T executeSynchronousCallWithRetry(Callable<T> call, int retryDelaySeconds) throws Exception {\n+    /*\n+     * Implementation Note: synchronous calls are only allowed during operator initialization.\n+     * All make-right work must be done with the asynchronous calling pattern. Therefore, since\n+     * we know that this method will only be invoked during operator initialization, we've chosen\n+     * not to put a limit on the number of retries. This is acceptable because the liveness probe will\n+     * eventually kill the operator if the initialization sequence does not complete.\n+     *\n+     * This call was specifically added to address the Istio-related use case where the operator attempts\n+     * to initialize prior to the Istio Envoy sidecar completing its initialization as described in this\n+     * Istio bug: https://github.com/istio/istio/issues/11130. However, the pattern will also work for\n+     * use cases where the Kubernetes master happens to temporarily unavailable just as the operator is\n+     * starting.\n+     */\n     T result = null;\n     boolean complete = false;\n     do {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAyMDEwNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2118#discussion_r552020106", "bodyText": "Please add a comment here that we expect the liveness probe to cancel this process if it \"retries forever\".  The next coder may not understand the assumption/expectation.", "author": "ddsharpe", "createdAt": "2021-01-05T15:52:59Z", "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/CallBuilder.java", "diffHunk": "@@ -594,6 +600,40 @@ public VersionInfo readVersionCode() throws ApiException {\n     return DISPATCHER.execute(factory, requestParams, helper);\n   }\n \n+  /**\n+   * Execute a synchronous call with a retry on failure.\n+   * @param call The call\n+   * @param retryDelaySeconds Retry delay in seconds\n+   * @param <T> Call return type\n+   * @return Results of operation, if successful\n+   * @throws Exception Exception types other than ApiException, which will cause failure\n+   */\n+  public <T> T executeSynchronousCallWithRetry(Callable<T> call, int retryDelaySeconds) throws Exception {\n+    T result = null;\n+    boolean complete = false;\n+    do {\n+      try {\n+        result = call.call();\n+        complete = true;\n+      } catch (RuntimeException re) {\n+        Throwable cause = re.getCause();\n+        if (cause instanceof ApiException) {\n+          LOGGER.warning(MessageKeys.EXCEPTION, cause);\n+        }\n+      } catch (Throwable t) {\n+        LOGGER.warning(MessageKeys.EXCEPTION, t);", "originalCommit": "bb16edec075e8d30c3f7e7429ee407d90ca18e10", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "156014bb0634fbc6e2ea45a57347e99ad70c3ba9", "chunk": "diff --git a/operator/src/main/java/oracle/kubernetes/operator/helpers/CallBuilder.java b/operator/src/main/java/oracle/kubernetes/operator/helpers/CallBuilder.java\nindex fd25aff955..a6a02058ce 100644\n--- a/operator/src/main/java/oracle/kubernetes/operator/helpers/CallBuilder.java\n+++ b/operator/src/main/java/oracle/kubernetes/operator/helpers/CallBuilder.java\n\n@@ -609,6 +609,19 @@ public class CallBuilder {\n    * @throws Exception Exception types other than ApiException, which will cause failure\n    */\n   public <T> T executeSynchronousCallWithRetry(Callable<T> call, int retryDelaySeconds) throws Exception {\n+    /*\n+     * Implementation Note: synchronous calls are only allowed during operator initialization.\n+     * All make-right work must be done with the asynchronous calling pattern. Therefore, since\n+     * we know that this method will only be invoked during operator initialization, we've chosen\n+     * not to put a limit on the number of retries. This is acceptable because the liveness probe will\n+     * eventually kill the operator if the initialization sequence does not complete.\n+     *\n+     * This call was specifically added to address the Istio-related use case where the operator attempts\n+     * to initialize prior to the Istio Envoy sidecar completing its initialization as described in this\n+     * Istio bug: https://github.com/istio/istio/issues/11130. However, the pattern will also work for\n+     * use cases where the Kubernetes master happens to temporarily unavailable just as the operator is\n+     * starting.\n+     */\n     T result = null;\n     boolean complete = false;\n     do {\n"}}, {"oid": "156014bb0634fbc6e2ea45a57347e99ad70c3ba9", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/156014bb0634fbc6e2ea45a57347e99ad70c3ba9", "message": "Add implementation note", "committedDate": "2021-01-05T16:19:40Z", "type": "commit"}]}