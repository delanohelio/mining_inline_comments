{"pr_number": 2017, "pr_title": "Ignore testUpdateImageName if the image tag is 14.1.1.0-11", "pr_createdAt": "2020-10-29T22:43:28Z", "pr_url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2017", "timeline": [{"oid": "2a65d465072bdbfe1926f0766f4442fcc5a63d1a", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/2a65d465072bdbfe1926f0766f4442fcc5a63d1a", "message": "abort the test if the image tag is 14.1.1.0-11", "committedDate": "2020-10-27T17:00:53Z", "type": "commit"}, {"oid": "ead3e1c88fa24afee48ca8e589955f2cde8b0a3b", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ead3e1c88fa24afee48ca8e589955f2cde8b0a3b", "message": "Merge remote-tracking branch 'origin/develop' into ignoreTest", "committedDate": "2020-10-27T17:08:38Z", "type": "commit"}, {"oid": "ad439031ba12fd7e43c87dc888d16d0e493af162", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ad439031ba12fd7e43c87dc888d16d0e493af162", "message": "minor change", "committedDate": "2020-10-29T16:27:50Z", "type": "commit"}, {"oid": "4fc09d7dd0234c9e1c23980bd2c6f76d230700ff", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/4fc09d7dd0234c9e1c23980bd2c6f76d230700ff", "message": "Merge remote-tracking branch 'origin/develop' into ignoreTest", "committedDate": "2020-10-29T16:32:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyMzA1NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2017#discussion_r514623054", "bodyText": "Hi Maggie, Instead of modifying the framework methods you can use conditional check to skip a test. You can use the following annotation.", "author": "sankarpn", "createdAt": "2020-10-29T23:23:58Z", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/extensions/IntegrationTestWatcher.java", "diffHunk": "@@ -211,8 +211,15 @@ public void interceptTestMethod(Invocation<Void> invocation,\n   @Override\n   public void handleTestExecutionException(ExtensionContext context, Throwable throwable)\n       throws Throwable {\n-    printHeader(String.format(\"Test failed %s()\", methodName), \"!\");\n-    getLogger().severe(getStackTraceAsString(throwable));\n+    getLogger().info(\"Test Execution Exception is: \" + throwable.getMessage());", "originalCommit": "4fc09d7dd0234c9e1c23980bd2c6f76d230700ff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0e37855eb8b2a837ea58871aa95b6fd26f987e68", "chunk": "diff --git a/integration-tests/src/test/java/oracle/weblogic/kubernetes/extensions/IntegrationTestWatcher.java b/integration-tests/src/test/java/oracle/weblogic/kubernetes/extensions/IntegrationTestWatcher.java\nindex ed6e432068..db2f2c1ef9 100644\n--- a/integration-tests/src/test/java/oracle/weblogic/kubernetes/extensions/IntegrationTestWatcher.java\n+++ b/integration-tests/src/test/java/oracle/weblogic/kubernetes/extensions/IntegrationTestWatcher.java\n\n@@ -211,15 +211,8 @@ public class IntegrationTestWatcher implements\n   @Override\n   public void handleTestExecutionException(ExtensionContext context, Throwable throwable)\n       throws Throwable {\n-    getLogger().info(\"Test Execution Exception is: \" + throwable.getMessage());\n-    if (throwable.getMessage().contains(\"assumption is not true\")) {\n-      printHeader(String.format(\"Test aborted %s()\", methodName), \"!\");\n-      printHeader(String.format(\"Please check assumeTrue condition for test method %s()\", methodName), \"!\");\n-      getLogger().warning(getStackTraceAsString(throwable));\n-    } else {\n-      printHeader(String.format(\"Test failed %s()\", methodName), \"!\");\n-      getLogger().severe(getStackTraceAsString(throwable));\n-    }\n+    printHeader(String.format(\"Test failed %s()\", methodName), \"!\");\n+    getLogger().severe(getStackTraceAsString(throwable));\n     collectLogs(context, \"test\");\n     throw throwable;\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyMzM5Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2017#discussion_r514623393", "bodyText": "`  class WebLogicImageCondition implements ExecutionCondition {\n@Override\npublic ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext context) {\n  if (WEBLOGIC_IMAGE_TAG.equals(WLS_UPDATE_IMAGE_TAG)) {\n    return ConditionEvaluationResult.\n        disabled(String.format(\"No latest image availbale to continue test. Skipping test!\"));\n  } else {\n    return ConditionEvaluationResult.\n        enabled(String.format(\"Updating image to '%s'. Continuing test!\", WLS_UPDATE_IMAGE_TAG));\n  }\n}\n\n}\n@retention(RetentionPolicy.RUNTIME)\n@ExtendWith(WebLogicImageCondition.class)\n@interface AssumeWebLogicImage {\n}`", "author": "sankarpn", "createdAt": "2020-10-29T23:24:47Z", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIntrospectVersion.java", "diffHunk": "@@ -848,12 +850,15 @@ public void testCreateNewCluster() {\n    * To: \"image: container-registry.oracle.com/middleware/weblogic:14.1.1.0-11\"\n    * Verify all the pods are restarted and back to ready state\n    * Verify the admin server is accessible and cluster members are healthy\n+   * This test will be aborted if the image tag is: 14.1.1.0-11\n    */\n   @Order(5)\n   @Test\n   @DisplayName(\"Verify server pods are restarted by updating image name\")\n   public void testUpdateImageName() {\n-\n+    logger.info(\"In the testUpdateImageName() the image version is: \" + WEBLOGIC_IMAGE_TAG);", "originalCommit": "4fc09d7dd0234c9e1c23980bd2c6f76d230700ff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyMzcwMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2017#discussion_r514623701", "bodyText": "Then you can annotate the test method with @AssumeWebLogicImage", "author": "sankarpn", "createdAt": "2020-10-29T23:25:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyMzM5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE0NDE1OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2017#discussion_r515144158", "bodyText": "@sankarpn Thanks for your input. Working on it.", "author": "maggiehe00", "createdAt": "2020-10-30T14:37:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyMzM5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "0e37855eb8b2a837ea58871aa95b6fd26f987e68", "chunk": "diff --git a/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIntrospectVersion.java b/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIntrospectVersion.java\nindex 2778904fe2..6d501b648e 100644\n--- a/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIntrospectVersion.java\n+++ b/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIntrospectVersion.java\n\n@@ -850,17 +849,15 @@ public class ItIntrospectVersion {\n    * To: \"image: container-registry.oracle.com/middleware/weblogic:14.1.1.0-11\"\n    * Verify all the pods are restarted and back to ready state\n    * Verify the admin server is accessible and cluster members are healthy\n-   * This test will be aborted if the image tag is: 14.1.1.0-11\n+   * This test will be skipped if the image tag is the latest WebLogic image tag\n    */\n   @Order(5)\n+  @AssumeWebLogicImage\n   @Test\n   @DisplayName(\"Verify server pods are restarted by updating image name\")\n   public void testUpdateImageName() {\n-    logger.info(\"In the testUpdateImageName() the image version is: \" + WEBLOGIC_IMAGE_TAG);\n-    logger.info(\"This test will be ABORTED if WebLogic image version is:  14.1.1.0-11\");\n-    assumeTrue(!WEBLOGIC_IMAGE_TAG.equals(\"14.1.1.0-11\"));\n-    final String domainNamespace = introDomainNamespace;\n \n+    final String domainNamespace = introDomainNamespace;\n     final String adminServerName = \"admin-server\";\n     final String adminServerPodName = domainUid + \"-\" + adminServerName;\n     final String managedServerNameBase = \"cl2-ms-\";\n"}}, {"oid": "0e37855eb8b2a837ea58871aa95b6fd26f987e68", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0e37855eb8b2a837ea58871aa95b6fd26f987e68", "message": "implement the custom annotation @AssumeWebLogicImage", "committedDate": "2020-10-30T21:06:07Z", "type": "commit"}, {"oid": "3088ebb3cfdfa292ad30e9a4a54b20dac8fa7dca", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3088ebb3cfdfa292ad30e9a4a54b20dac8fa7dca", "message": "Merge remote-tracking branch 'origin/develop' into ignoreTest", "committedDate": "2020-10-30T21:12:26Z", "type": "commit"}, {"oid": "81fa97dd09c71576cbc9e4181fd1a1325a678f96", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/81fa97dd09c71576cbc9e4181fd1a1325a678f96", "message": "checkstyple", "committedDate": "2020-10-30T21:55:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA5MzM0Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2017#discussion_r516093343", "bodyText": "Hi Maggie, Since this is the only test using this annotation you can put these 2 methods directly in the test class. There is no need to add extra classes IMO.", "author": "sankarpn", "createdAt": "2020-11-02T16:27:03Z", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/annotations/AssumeWebLogicImage.java", "diffHunk": "@@ -0,0 +1,20 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.", "originalCommit": "81fa97dd09c71576cbc9e4181fd1a1325a678f96", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "20d8865a4399c327779e3cd1cf9c554a974fedd7", "chunk": "diff --git a/integration-tests/src/test/java/oracle/weblogic/kubernetes/annotations/AssumeWebLogicImage.java b/integration-tests/src/test/java/oracle/weblogic/kubernetes/annotations/AssumeWebLogicImage.java\ndeleted file mode 100644\nindex 1a8337dd9e..0000000000\n--- a/integration-tests/src/test/java/oracle/weblogic/kubernetes/annotations/AssumeWebLogicImage.java\n+++ /dev/null\n\n@@ -1,20 +0,0 @@\n-// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n-// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n-\n-package oracle.weblogic.kubernetes.annotations;\n-\n-import java.lang.annotation.ElementType;\n-import java.lang.annotation.Retention;\n-import java.lang.annotation.RetentionPolicy;\n-import java.lang.annotation.Target;\n-\n-import oracle.weblogic.kubernetes.extensions.WebLogicImageCondition;\n-import org.junit.jupiter.api.Tag;\n-import org.junit.jupiter.api.extension.ExtendWith;\n-\n-@Target({ElementType.TYPE, ElementType.METHOD})\n-@Retention(RetentionPolicy.RUNTIME)\n-@Tag(\"assume-weblogic-image\")\n-@ExtendWith(WebLogicImageCondition.class)\n-public @interface AssumeWebLogicImage {\n-}\n"}}, {"oid": "20d8865a4399c327779e3cd1cf9c554a974fedd7", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/20d8865a4399c327779e3cd1cf9c554a974fedd7", "message": "adding the review comments", "committedDate": "2020-11-02T20:39:48Z", "type": "commit"}, {"oid": "e483d73460aa533f3a4a3987691828a9ddd409ab", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e483d73460aa533f3a4a3987691828a9ddd409ab", "message": "Merge remote-tracking branch 'origin/develop' into ignoreTest", "committedDate": "2020-11-02T20:41:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkzMzM3Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2017#discussion_r516933372", "bodyText": "Do we need this annotation? There is no annotation called \"assume-weblogic-image\" right?", "author": "sankarpn", "createdAt": "2020-11-03T20:21:17Z", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItIntrospectVersion.java", "diffHunk": "@@ -1014,4 +1025,40 @@ public void tearDownAll() {\n     }\n   }\n \n+  /**\n+  *  JUnit5 extension class to implement ExecutionCondition for the custom\n+  *  annotation @AssumeWebLogicImage.\n+  */\n+  private static class WebLogicImageCondition implements ExecutionCondition {\n+\n+    /**\n+     * Determine if the the test \"testUpdateImageName\" will be skipped based on WebLogic image tag.\n+     * Skip the test if the image tag is the latest one.\n+     *\n+     * @param context the current extension context\n+     * @return ConditionEvaluationResult disabled if the image tag is the latest one, enabled if the\n+     *         image tag is not the latest one\n+    */\n+    @Override\n+    public ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext context) {\n+      if (WEBLOGIC_IMAGE_TAG.equals(WLS_LATEST_IMAGE_TAG)) {\n+        getLogger().info(\"WebLogic image tag is {0}. No latest image available to continue test. Skipping test\",\n+            WLS_LATEST_IMAGE_TAG);\n+        return ConditionEvaluationResult\n+            .disabled(String.format(\"No latest image available to continue test. Skipping test!\"));\n+      } else {\n+        getLogger().info(\"Updating image to {0}. Continuing test!\", WLS_UPDATE_IMAGE_TAG);\n+        return ConditionEvaluationResult\n+            .enabled(String.format(\"Updating image to {0}. Continuing test!\", WLS_UPDATE_IMAGE_TAG));\n+      }\n+    }\n+  }\n+\n+  @Target({ElementType.TYPE, ElementType.METHOD})\n+  @Retention(RetentionPolicy.RUNTIME)\n+  @Tag(\"assume-weblogic-image\")", "originalCommit": "e483d73460aa533f3a4a3987691828a9ddd409ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQyNTU0MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2017#discussion_r517425541", "bodyText": "Right now there is no use for \"assume-weblogic-image\". But  it won't hurt to add Tag name in case we need it later for different test plans/test cases, just like @tag(\"integration\") or @tag(\"must-not-run-in-parallel\")", "author": "maggiehe00", "createdAt": "2020-11-04T15:25:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkzMzM3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ4MjAwNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2017#discussion_r517482004", "bodyText": "ok alright.", "author": "sankarpn", "createdAt": "2020-11-04T16:43:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkzMzM3Mg=="}], "type": "inlineReview", "revised_code": null}]}