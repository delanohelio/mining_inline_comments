{"pr_number": 1884, "pr_title": "Adding operator restart use cases from Junit4 tests", "pr_createdAt": "2020-08-25T19:05:58Z", "pr_url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1884", "timeline": [{"oid": "4d394be9acc34276f75f8172f76eaf09d714275a", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/4d394be9acc34276f75f8172f76eaf09d714275a", "message": "adding operator pod restart tests from Junit4", "committedDate": "2020-08-25T16:00:46Z", "type": "commit"}, {"oid": "2ecf73445bbb62af50ebb6f4e0245a8b2d0aeb48", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/2ecf73445bbb62af50ebb6f4e0245a8b2d0aeb48", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into operator_restart_tests", "committedDate": "2020-08-25T16:05:43Z", "type": "commit"}, {"oid": "84d7b13b026c1c410dfb1714342bca372f8f2fd0", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/84d7b13b026c1c410dfb1714342bca372f8f2fd0", "message": "renaming file", "committedDate": "2020-08-25T16:08:53Z", "type": "commit"}, {"oid": "005aa1cd7bc3460ef95bd61d93a65aa838214784", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/005aa1cd7bc3460ef95bd61d93a65aa838214784", "message": "code refactor", "committedDate": "2020-08-25T16:46:21Z", "type": "commit"}, {"oid": "b0075bf77ddc1024ec82333072c20d74555e6fe3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b0075bf77ddc1024ec82333072c20d74555e6fe3", "message": "code refactor", "committedDate": "2020-08-25T18:55:06Z", "type": "commit"}, {"oid": "a0b7f2a08fadef3570dc9ce79f396dfd19a42df8", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a0b7f2a08fadef3570dc9ce79f396dfd19a42df8", "message": "log exception", "committedDate": "2020-08-25T19:01:52Z", "type": "commit"}, {"oid": "8d631844c6776381da1186ccdce5381a694c2347", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8d631844c6776381da1186ccdce5381a694c2347", "message": "code refactor", "committedDate": "2020-08-25T19:05:28Z", "type": "commit"}, {"oid": "396edaa99dd700e7b3e5743cc062a11b4dab302d", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/396edaa99dd700e7b3e5743cc062a11b4dab302d", "message": "delete Junit4 test class", "committedDate": "2020-08-25T19:34:51Z", "type": "commit"}, {"oid": "ea5d4b954a952da3a09f95b50f0eabcf305cca09", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ea5d4b954a952da3a09f95b50f0eabcf305cca09", "message": "fix refactored method", "committedDate": "2020-08-25T19:44:41Z", "type": "commit"}, {"oid": "840dde970267bb90fd60ed2540d6adebd05db54d", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/840dde970267bb90fd60ed2540d6adebd05db54d", "message": "deleting Junit4 test classes which are converted", "committedDate": "2020-08-25T19:57:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ1MjkyMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1884#discussion_r477452923", "bodyText": "kill --> stop/shutdown the admin and manged sever in the domain by changing the StartupPolicy to NEVER", "author": "anpanigr", "createdAt": "2020-08-26T17:02:36Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItOperatorRestart.java", "diffHunk": "@@ -104,6 +112,96 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n         replicaCount);\n   }\n \n+  /**\n+   * Stop Operator and kill admin and managed server pods.", "originalCommit": "840dde970267bb90fd60ed2540d6adebd05db54d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUwMDc4NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1884#discussion_r477500784", "bodyText": "changing StartupPolicy doesn't work as Operator is stopped first. Its actually deleting the server pods, can change the wording to delete the admin and managed server pods.", "author": "vanajamukkara", "createdAt": "2020-08-26T18:25:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ1MjkyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUxNTUyMA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1884#discussion_r477515520", "bodyText": "modified", "author": "vanajamukkara", "createdAt": "2020-08-26T18:52:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ1MjkyMw=="}], "type": "inlineReview", "revised_code": {"commit": "c03f3066dec0a2a86e1e6b73e2e3b06f004b7277", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItOperatorRestart.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItOperatorRestart.java\nindex 17db144a95..2f25a765b4 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItOperatorRestart.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItOperatorRestart.java\n\n@@ -113,10 +109,9 @@ public class ItOperatorRestart {\n   }\n \n   /**\n-   * Stop Operator and kill admin and managed server pods.\n+   * Stop Operator and delete the admin and managed server pods.\n    * Restart Operator and verify admin and managed servers are started.\n    */\n-  @Order(1)\n   @Test\n   @DisplayName(\"Stop operator, delete all the server pods and restart operator, verify servers are started\")\n   public void testRestartOperatorAndVerifyDomainUp() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUwMTIzNQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1884#discussion_r477501235", "bodyText": "Delete the Order annotation from all methods if we do not need Order in the class", "author": "anpanigr", "createdAt": "2020-08-26T18:26:11Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItOperatorRestart.java", "diffHunk": "@@ -116,8 +214,6 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n    */\n   @Test", "originalCommit": "840dde970267bb90fd60ed2540d6adebd05db54d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU1MzA5NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1884#discussion_r477553094", "bodyText": "done", "author": "vanajamukkara", "createdAt": "2020-08-26T19:56:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUwMTIzNQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "c03f3066dec0a2a86e1e6b73e2e3b06f004b7277", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c03f3066dec0a2a86e1e6b73e2e3b06f004b7277", "message": "addressing review comments", "committedDate": "2020-08-26T18:50:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUzODg5Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1884#discussion_r477538892", "bodyText": "Make sure the Rolling Restart and Operator Restart has been occurring simultaneously.", "author": "anpanigr", "createdAt": "2020-08-26T19:29:20Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItOperatorRestart.java", "diffHunk": "@@ -116,8 +208,6 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n    */\n   @Test\n   @DisplayName(\"Restart operator when the domain is rolling after the admin credentials are changed\")", "originalCommit": "c03f3066dec0a2a86e1e6b73e2e3b06f004b7277", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUzOTkzNQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1884#discussion_r477539935", "bodyText": "will add the check to see if the last managed server pod is deleted in this existing test...", "author": "vanajamukkara", "createdAt": "2020-08-26T19:31:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUzODg5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU1MzQ1OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1884#discussion_r477553459", "bodyText": "admin server gets terminated first when rolling restart happens..added check for the same", "author": "vanajamukkara", "createdAt": "2020-08-26T19:56:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUzODg5Mg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "770eee47797fc53f7bedf429b1a723fb762a01c4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/770eee47797fc53f7bedf429b1a723fb762a01c4", "message": "fix logic to wait for rolling restart to start in existing test", "committedDate": "2020-08-26T19:53:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU3NzQ5NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1884#discussion_r477577494", "bodyText": "In CommonTestUtils.java, we have a similar test method:\npublic static void checkPodReadyAndServiceExists(String podName, String domainUid, String namespace)", "author": "xiancao", "createdAt": "2020-08-26T20:43:09Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItOperatorRestart.java", "diffHunk": "@@ -244,4 +344,30 @@ private void restartOperatorAndVerify() {\n     assertFalse(opPodNameNew.equals(opPodName),\n         \"The operator names before and after a restart should be different\");\n   }\n+\n+  private void checkServiceExistsAndPodReady() {", "originalCommit": "770eee47797fc53f7bedf429b1a723fb762a01c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU5MDUzMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1884#discussion_r477590531", "bodyText": "thanks for pointing it out ...", "author": "vanajamukkara", "createdAt": "2020-08-26T21:08:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU3NzQ5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU5MjQ1Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1884#discussion_r477592457", "bodyText": "done", "author": "vanajamukkara", "createdAt": "2020-08-26T21:12:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU3NzQ5NA=="}], "type": "inlineReview", "revised_code": {"commit": "0b6c4b9b19a1d9d75495874960e5bf7c9b7605bf", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItOperatorRestart.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItOperatorRestart.java\nindex 576f67ef2e..b2b41b7e6e 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItOperatorRestart.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItOperatorRestart.java\n\n@@ -345,29 +361,4 @@ public class ItOperatorRestart {\n         \"The operator names before and after a restart should be different\");\n   }\n \n-  private void checkServiceExistsAndPodReady() {\n-    logger.info(\"Check admin service {0} is created in namespace {1}\",\n-        adminServerPodName, domainNamespace);\n-    checkServiceExists(adminServerPodName, domainNamespace);\n-\n-    // check managed server services created\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Check managed server service {0} is created in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkServiceExists(managedServerPrefix + i, domainNamespace);\n-    }\n-\n-    // check admin server pod is ready\n-    logger.info(\"Wait for admin server pod {0} to be ready in namespace {1}\",\n-        adminServerPodName, domainNamespace);\n-    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n-\n-    // check managed server pods are ready\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n-          managedServerPrefix + i, domainNamespace);\n-      checkPodReady(managedServerPrefix + i, domainUid, domainNamespace);\n-    }\n-\n-  }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU4MzAyNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1884#discussion_r477583024", "bodyText": "you can just call checkPodDoesNotExist(podName, null, namespace)", "author": "xiancao", "createdAt": "2020-08-26T20:54:21Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "diffHunk": "@@ -1189,6 +1189,28 @@ public static void checkPodDoesNotExist(String podName, String domainUid, String\n                 podName, namespace)));\n   }\n \n+\n+  /**\n+   * Check pod does not exist in the specified namespace.\n+   *\n+   * @param podName pod name to check\n+   * @param namespace the namespace in which to check whether the pod exists\n+   */\n+  public static void checkPodDoesNotExist(String podName, String namespace) {", "originalCommit": "770eee47797fc53f7bedf429b1a723fb762a01c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU5MjM4MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1884#discussion_r477592380", "bodyText": "done", "author": "vanajamukkara", "createdAt": "2020-08-26T21:12:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU4MzAyNA=="}], "type": "inlineReview", "revised_code": {"commit": "0b6c4b9b19a1d9d75495874960e5bf7c9b7605bf", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java\nindex df59686a6a..317207b443 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java\n\n@@ -1189,28 +1189,6 @@ public class CommonTestUtils {\n                 podName, namespace)));\n   }\n \n-\n-  /**\n-   * Check pod does not exist in the specified namespace.\n-   *\n-   * @param podName pod name to check\n-   * @param namespace the namespace in which to check whether the pod exists\n-   */\n-  public static void checkPodDoesNotExist(String podName, String namespace) {\n-    LoggingFacade logger = getLogger();\n-    withStandardRetryPolicy\n-        .conditionEvaluationListener(\n-            condition -> logger.info(\"Waiting for pod {0} to be deleted in namespace {1} \"\n-                                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n-                        podName,\n-                        namespace,\n-                        condition.getElapsedTimeInMS(),\n-                        condition.getRemainingTimeInMS()))\n-            .until(assertDoesNotThrow(() -> podDoesNotExist(podName, null, namespace),\n-                    String.format(\"podDoesNotExist failed with ApiException for pod %s in namespace %s\",\n-                            podName, namespace)));\n-  }\n-\n   /**\n    * Check service does not exist in the specified namespace.\n    *\n"}}, {"oid": "0b6c4b9b19a1d9d75495874960e5bf7c9b7605bf", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0b6c4b9b19a1d9d75495874960e5bf7c9b7605bf", "message": "address review comments", "committedDate": "2020-08-26T21:08:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ5OTQzNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1884#discussion_r478499437", "bodyText": "Same issue as previous comment.  Also, the error message is exactly the same as the previous one.  It might be better to include the filename in the log message so you know which file is failing.\nThis logger format is incorrect. If you are using this method\npublic void info(String msg, Object... params)\nthen the code should be\nlogger.info(\"Exception while copying file to pod {0}\", ioex.getMessage())\nor if you are using this method\npublic void info(String msg, Throwable thrown)\nthen the code should be\nlogger.info(\"Exception while copying file to pod\", ioex)", "author": "ddsharpe", "createdAt": "2020-08-27T15:19:04Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/BuildApplication.java", "diffHunk": "@@ -156,30 +156,31 @@ public static Path buildApplication(Path appSrcPath, Map<String, String> antPara\n       Kubernetes.copyFileToPod(namespace, webLogicPod.getMetadata().getName(),\n           null, zipFile, Paths.get(\"/u01\", zipFile.getFileName().toString()));\n     } catch (ApiException | IOException  ioex) {\n-      logger.info(ioex.getMessage());\n+      logger.info(\"Exception while copying file to pod {0}\", ioex);\n     }\n     try {\n       //copy the build script to /u01 location inside pod\n       Kubernetes.copyFileToPod(namespace, webLogicPod.getMetadata().getName(),\n           null, BUILD_SCRIPT_SOURCE_PATH, Paths.get(\"/u01\", BUILD_SCRIPT));\n     } catch (ApiException | IOException  ioex) {\n-      logger.info(ioex.getMessage());\n+      logger.info(\"Exception while copying file to pod {0}\", ioex);", "originalCommit": "0b6c4b9b19a1d9d75495874960e5bf7c9b7605bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba51f573b9f90f4c5d44c2b0f8dbb1066122943e", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/BuildApplication.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/BuildApplication.java\nindex 6fc3056dbe..c779f9cb15 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/BuildApplication.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/BuildApplication.java\n\n@@ -156,14 +156,14 @@ public class BuildApplication {\n       Kubernetes.copyFileToPod(namespace, webLogicPod.getMetadata().getName(),\n           null, zipFile, Paths.get(\"/u01\", zipFile.getFileName().toString()));\n     } catch (ApiException | IOException  ioex) {\n-      logger.info(\"Exception while copying file to pod {0}\", ioex);\n+      logger.info(\"Exception while copying file \" + zipFile + \" to pod\", ioex);\n     }\n     try {\n       //copy the build script to /u01 location inside pod\n       Kubernetes.copyFileToPod(namespace, webLogicPod.getMetadata().getName(),\n           null, BUILD_SCRIPT_SOURCE_PATH, Paths.get(\"/u01\", BUILD_SCRIPT));\n     } catch (ApiException | IOException  ioex) {\n-      logger.info(\"Exception while copying file to pod {0}\", ioex);\n+      logger.info(\"Exception while copying file \" + zipFile + \" to pod\", ioex);\n     }\n     try {\n       //Kubernetes.exec(webLogicPod, new String[]{\"/bin/sh\", \"/u01/\" + BUILD_SCRIPT});\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODUwMTU4NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1884#discussion_r478501585", "bodyText": "This logger format is incorrect. If you are using this method\npublic void info(String msg, Object... params)\nthen the code should be\nlogger.info(\"Exception while copying file to pod {0}\", ioex.getMessage())\nor if you are using this method\npublic void info(String msg, Throwable thrown)\nthen the code should be\nlogger.info(\"Exception while copying file to pod\", ioex)", "author": "ddsharpe", "createdAt": "2020-08-27T15:22:03Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/BuildApplication.java", "diffHunk": "@@ -156,30 +156,31 @@ public static Path buildApplication(Path appSrcPath, Map<String, String> antPara\n       Kubernetes.copyFileToPod(namespace, webLogicPod.getMetadata().getName(),\n           null, zipFile, Paths.get(\"/u01\", zipFile.getFileName().toString()));\n     } catch (ApiException | IOException  ioex) {\n-      logger.info(ioex.getMessage());\n+      logger.info(\"Exception while copying file to pod {0}\", ioex);", "originalCommit": "0b6c4b9b19a1d9d75495874960e5bf7c9b7605bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba51f573b9f90f4c5d44c2b0f8dbb1066122943e", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/BuildApplication.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/BuildApplication.java\nindex 6fc3056dbe..c779f9cb15 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/BuildApplication.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/BuildApplication.java\n\n@@ -156,14 +156,14 @@ public class BuildApplication {\n       Kubernetes.copyFileToPod(namespace, webLogicPod.getMetadata().getName(),\n           null, zipFile, Paths.get(\"/u01\", zipFile.getFileName().toString()));\n     } catch (ApiException | IOException  ioex) {\n-      logger.info(\"Exception while copying file to pod {0}\", ioex);\n+      logger.info(\"Exception while copying file \" + zipFile + \" to pod\", ioex);\n     }\n     try {\n       //copy the build script to /u01 location inside pod\n       Kubernetes.copyFileToPod(namespace, webLogicPod.getMetadata().getName(),\n           null, BUILD_SCRIPT_SOURCE_PATH, Paths.get(\"/u01\", BUILD_SCRIPT));\n     } catch (ApiException | IOException  ioex) {\n-      logger.info(\"Exception while copying file to pod {0}\", ioex);\n+      logger.info(\"Exception while copying file \" + zipFile + \" to pod\", ioex);\n     }\n     try {\n       //Kubernetes.exec(webLogicPod, new String[]{\"/bin/sh\", \"/u01/\" + BUILD_SCRIPT});\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODUwMjQ5MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1884#discussion_r478502490", "bodyText": "Same as previous comment", "author": "ddsharpe", "createdAt": "2020-08-27T15:23:21Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/BuildApplication.java", "diffHunk": "@@ -156,30 +156,31 @@ public static Path buildApplication(Path appSrcPath, Map<String, String> antPara\n       Kubernetes.copyFileToPod(namespace, webLogicPod.getMetadata().getName(),\n           null, zipFile, Paths.get(\"/u01\", zipFile.getFileName().toString()));\n     } catch (ApiException | IOException  ioex) {\n-      logger.info(ioex.getMessage());\n+      logger.info(\"Exception while copying file to pod {0}\", ioex);\n     }\n     try {\n       //copy the build script to /u01 location inside pod\n       Kubernetes.copyFileToPod(namespace, webLogicPod.getMetadata().getName(),\n           null, BUILD_SCRIPT_SOURCE_PATH, Paths.get(\"/u01\", BUILD_SCRIPT));\n     } catch (ApiException | IOException  ioex) {\n-      logger.info(ioex.getMessage());\n+      logger.info(\"Exception while copying file to pod {0}\", ioex);\n     }\n     try {\n       //Kubernetes.exec(webLogicPod, new String[]{\"/bin/sh\", \"/u01/\" + BUILD_SCRIPT});\n       ExecResult exec = Exec.exec(webLogicPod, null, false, \"/bin/sh\", \"/u01/\" + BUILD_SCRIPT);\n       if (exec.stdout() != null) {\n-        logger.info(exec.stdout());\n+        logger.info(\"Exec stdout {0}\", exec.stdout());\n       }\n       if (exec.stderr() != null) {\n-        logger.info(exec.stderr());\n+        logger.info(\"Exec stderr {0}\", exec.stderr());\n       }\n       assertEquals(0, exec.exitValue(), \"Exec into \" + webLogicPod.getMetadata().getName()\n-          + \" to build an application failed\");\n+          + \" to build an application failed with exit value \" + exec.exitValue());\n+\n       Kubernetes.copyDirectoryFromPod(webLogicPod,\n           Paths.get(APPLICATIONS_PATH, archiveDistDir).toString(), destArchiveBaseDir);\n     } catch (ApiException | IOException | InterruptedException ioex) {\n-      logger.info(ioex.getMessage());\n+      logger.info(\"Exception while copying file from pod {0}\", ioex);", "originalCommit": "0b6c4b9b19a1d9d75495874960e5bf7c9b7605bf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ba51f573b9f90f4c5d44c2b0f8dbb1066122943e", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/BuildApplication.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/BuildApplication.java\nindex 6fc3056dbe..c779f9cb15 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/BuildApplication.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/BuildApplication.java\n\n@@ -156,14 +156,14 @@ public class BuildApplication {\n       Kubernetes.copyFileToPod(namespace, webLogicPod.getMetadata().getName(),\n           null, zipFile, Paths.get(\"/u01\", zipFile.getFileName().toString()));\n     } catch (ApiException | IOException  ioex) {\n-      logger.info(\"Exception while copying file to pod {0}\", ioex);\n+      logger.info(\"Exception while copying file \" + zipFile + \" to pod\", ioex);\n     }\n     try {\n       //copy the build script to /u01 location inside pod\n       Kubernetes.copyFileToPod(namespace, webLogicPod.getMetadata().getName(),\n           null, BUILD_SCRIPT_SOURCE_PATH, Paths.get(\"/u01\", BUILD_SCRIPT));\n     } catch (ApiException | IOException  ioex) {\n-      logger.info(\"Exception while copying file to pod {0}\", ioex);\n+      logger.info(\"Exception while copying file \" + zipFile + \" to pod\", ioex);\n     }\n     try {\n       //Kubernetes.exec(webLogicPod, new String[]{\"/bin/sh\", \"/u01/\" + BUILD_SCRIPT});\n"}}, {"oid": "ba51f573b9f90f4c5d44c2b0f8dbb1066122943e", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ba51f573b9f90f4c5d44c2b0f8dbb1066122943e", "message": "fix log message", "committedDate": "2020-08-27T15:55:15Z", "type": "commit"}]}