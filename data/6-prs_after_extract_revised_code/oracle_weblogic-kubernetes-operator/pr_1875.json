{"pr_number": 1875, "pr_title": "Consolidate multiple Mii test classes to a single ItClass ", "pr_createdAt": "2020-08-17T15:25:36Z", "pr_url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875", "timeline": [{"oid": "9c73418a9266ff3f88e9ac8166318c641a9a730c", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/9c73418a9266ff3f88e9ac8166318c641a9a730c", "message": "Consolidate Mii Domains and remove junit4 tests", "committedDate": "2020-08-14T21:34:52Z", "type": "commit"}, {"oid": "43a364c6bf96310137f1f80ff346762981ebd2bd", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/43a364c6bf96310137f1f80ff346762981ebd2bd", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into consolidate-miidom", "committedDate": "2020-08-14T21:35:33Z", "type": "commit"}, {"oid": "8f1edafc201f1de18ede778e28982070a99a2818", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8f1edafc201f1de18ede778e28982070a99a2818", "message": "removed more Junit4 Mii tests", "committedDate": "2020-08-16T17:13:40Z", "type": "commit"}, {"oid": "29f22d110d941ea9533816f54abec814aee70972", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/29f22d110d941ea9533816f54abec814aee70972", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into consolidate-miidom", "committedDate": "2020-08-17T15:26:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIzOTA1NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r472239054", "bodyText": "I am wondering if the initAll method can be modified to use some of the comment test util methods.", "author": "doxiao", "createdAt": "2020-08-18T14:27:18Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -237,10 +275,22 @@ public static void initAll(@Namespaces(2) List<String> namespaces) {\n     assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \"weblogicenc\",\n             \"weblogicenc\", domainNamespace),\n              String.format(\"createSecret failed for %s\", encryptionSecretName));\n-    // create the domain CR with no configmap", "originalCommit": "29f22d110d941ea9533816f54abec814aee70972", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMxNTk0OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r474315948", "bodyText": "added CommonTestUtils.installAndVerifyOperator to remove the extra code. Thanks for the suggestion.", "author": "anpanigr", "createdAt": "2020-08-20T22:56:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIzOTA1NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI0MDc2MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r472240761", "bodyText": "Javadoc here needs some cleanup, such as removing the space in the beginning of a line, and adding a period at the end of a sentence.", "author": "doxiao", "createdAt": "2020-08-18T14:29:32Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -285,20 +335,208 @@ public void beforeEach() {\n     }\n   }\n \n+  /**\n+   * Create a WebLogic domain with a defined configmap in configuration/model ", "originalCommit": "29f22d110d941ea9533816f54abec814aee70972", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEyOTgwNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473129806", "bodyText": "done", "author": "anpanigr", "createdAt": "2020-08-19T15:46:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI0MDc2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "1285a972188e83c1b3744103aed389a53a35a107", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\nindex 0701755e9c..1eddf0b82c 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\n\n@@ -337,11 +337,11 @@ class ItMiiUpdateDomainConfig {\n \n   /**\n    * Create a WebLogic domain with a defined configmap in configuration/model \n-   *  section of the domain resource.\n+   * section of the domain resource.\n    * The configmap has multiple sparse WDT model files that define \n-   *  a JDBCSystemResource, a JMSSystemResource and a WLDFSystemResource.\n+   * a JDBCSystemResource, a JMSSystemResource and a WLDFSystemResource.\n    * Verify all the SystemResource configurations using the rest API call \n-   *   using adminserver's public nodeport\n+   * using the public nodeport of the administration server.\n    */\n   @Test\n   @Order(1)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI0NDkxMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r472244911", "bodyText": "What is the replica count in the initial configuration?", "author": "doxiao", "createdAt": "2020-08-18T14:34:56Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -351,18 +589,16 @@ public void testAddMiiClusteriWithNoReplica() {\n   /**\n    * Create a configmap with a sparse model file to add a dynamic cluster.", "originalCommit": "29f22d110d941ea9533816f54abec814aee70972", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEyOTY4OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473129688", "bodyText": "Initial replica count is 2", "author": "anpanigr", "createdAt": "2020-08-19T15:46:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI0NDkxMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI0NTcxNQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r472245715", "bodyText": "javadoc needs some cleanup.", "author": "doxiao", "createdAt": "2020-08-18T14:36:01Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -507,6 +741,72 @@ public void testAddMiiConfiguredCluster() {\n     logger.info(\"Found new managed server configuration\");\n   }\n \n+  /**\n+   * Start a WebLogic domain with model-in-imge ", "originalCommit": "29f22d110d941ea9533816f54abec814aee70972", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEyOTQ3NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473129475", "bodyText": "done", "author": "anpanigr", "createdAt": "2020-08-19T15:46:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI0NTcxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "1285a972188e83c1b3744103aed389a53a35a107", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\nindex 0701755e9c..1eddf0b82c 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\n\n@@ -742,12 +742,12 @@ class ItMiiUpdateDomainConfig {\n   }\n \n   /**\n-   * Start a WebLogic domain with model-in-imge \n+   * Start a WebLogic domain with model-in-imge.\n    * Patch domain CRD with new webLogicCredentialsSecret.\n    * Update domainRestartVersion to trigger a rolling restart of server pods.\n    * make sure all the server pods are re-started in a rolling fashion. \n-   * Check the validitity of new credentials by accessing \n-   *  WebLogic RESTful Management Services.\n+   * Check the validity of new credentials by accessing \n+   * WebLogic RESTful Management Services.\n    */\n   @Test\n   @Order(7)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI3Mjg1Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r472272856", "bodyText": "typo \"repicar\".", "author": "doxiao", "createdAt": "2020-08-18T15:12:09Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -285,20 +335,208 @@ public void beforeEach() {\n     }\n   }\n \n+  /**\n+   * Create a WebLogic domain with a defined configmap in configuration/model \n+   *  section of the domain resource.\n+   * The configmap has multiple sparse WDT model files that define \n+   *  a JDBCSystemResource, a JMSSystemResource and a WLDFSystemResource.\n+   * Verify all the SystemResource configurations using the rest API call \n+   *   using adminserver's public nodeport\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"Verify the pre-configured SystemResources in a model-in-image domain\")\n+  public void testMiiCheckSystemResources() {\n+    ExecResult result = null;\n+    result = checkSystemResourceConfiguration(\"JDBCSystemResources\", \"TestDataSource\");\n+    assertNotNull(result, \"CheckJDBCSystemResources returned null\");\n+    logger.info(\"CheckJDBCSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"JDBCSystemResource not found\");\n+    logger.info(\"Found the JDBCSystemResource configuration\");\n+\n+    result = null;\n+    result = checkSystemResourceConfiguration(\"JMSSystemResources\", \"TestClusterJmsModule\");\n+    assertNotNull(result, \"CheckJMSSystemResources returned null\");\n+    logger.info(\"CheckJMSSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"JMSSystemResource not found\");\n+    logger.info(\"Found the JMSSystemResource configuration\");\n+\n+    result = null;\n+    result = checkSystemResourceConfiguration(\"WLDFSystemResources\", \"TestWldfModule\");\n+    assertNotNull(result, \"CheckWLDFSystemResources returned null\");\n+    logger.info(\"CheckWLDFSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"WLDFSystemResource not found\");\n+    logger.info(\"Found the WLDFSystemResource configuration\");\n+\n+    result = null;\n+    result = checkJdbcRuntime(\"TestDataSource\");\n+    logger.info(\"checkJdbcRuntime: returned {0}\", result.toString());\n+    assertTrue(result.stdout().contains(\"jdbc:oracle:thin:localhost\"),\n+         String.format(\"DB URL does not match with RuntimeMBean Info\"));\n+    assertTrue(result.stdout().contains(\"scott\"),\n+         String.format(\"DB user name does not match with RuntimeMBean Info\"));\n+    logger.info(\"Found the JDBCSystemResource configuration\");\n+\n+  }\n+\n+  /**\n+   * Start a WebLogic domain using model-in-image with JMS/JDBC SystemResource.\n+   * Create a configmap to delete JMS/JDBC System Resource.\n+   * Patch the domain resource with the configmap.\n+   * Update the restart version of the domain resource.\n+   * Verify rolling restart of the domain by comparing PodCreationTimestamp\n+   * for all the server pods before and after rolling restart.\n+   * Verify System Resource are deleted from the domain.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"Delete SystemResources from a model-in-image domain\")\n+  public void testMiiDeleteSystemResources() {\n+\n+    String configMapName = \"deletesysrescm\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.delete.sysresources.yaml\"));\n+\n+    LinkedHashMap<String, DateTime> pods = new LinkedHashMap<>();\n+    // get the creation time of the admin server pod before patching\n+    DateTime adminPodCreationTime = getPodCreationTime(domainNamespace,adminServerPodName);\n+    pods.put(adminServerPodName, adminPodCreationTime);\n+    // get the creation time of the managed server pods before patching\n+    for (int i = 1; i <= replicaCount; i++) {\n+      pods.put(managedServerPrefix + i, getPodCreationTime(domainNamespace, managedServerPrefix + i));\n+    }\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/configuration/model/configMap\\\",\")\n+        .append(\" \\\"value\\\":  \\\"\" + configMapName + \"\\\"\")\n+        .append(\" }]\");\n+    logger.log(Level.INFO, \"Configmap patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean cmPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(configMap)  failed \");\n+    assertTrue(cmPatched, \"patchDomainCustomResource(configMap) failed\");\n+\n+    String newRestartVersion = patchDomainResourceWithNewRestartVersion(domainUid, domainNamespace);\n+    logger.log(Level.INFO, \"New restart version is {0}\", newRestartVersion);\n+    \n+    assertTrue(assertDoesNotThrow(\n+        () -> (verifyRollingRestartOccurred(pods, 1, domainNamespace)),\n+         \"More than one pod was restarted at same time\"),\n+        \"Rolling restart failed\");\n+\n+    // Even if pods are created, need the service to created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+   \n+    ExecResult result = null;\n+    result = checkSystemResourceConfiguration(\"JDBCSystemResources\", \"TestDataSource\");\n+    assertNotNull(result, \"CheckJDBCSystemResources returned null\");\n+    logger.info(\"CheckJDBCSystemResource returned {0}\", result.toString());\n+    assertEquals(\"404\", result.stdout(), \"JDBCSystemResource not found\");\n+    logger.info(\"JDBCSystemResource configuration not found\");\n+\n+    result = null;\n+    result = checkSystemResourceConfiguration(\"JMSSystemResources\", \"TestClusterJmsModule\");\n+    assertNotNull(result, \"CheckJMSSystemResources returned null\");\n+    logger.info(\"CheckJMSSystemResource returned {0}\", result.toString());\n+    assertEquals(\"404\", result.stdout(), \"JMSSystemResource not found\");\n+    logger.info(\"JMSSystemResource configuration not found\");\n+\n+  }\n+\n+  /**\n+   * Start a WebLogic domain using model-in-image.\n+   * Create a configmap with sparse JDBC/JMS model files.\n+   * Patch the domain resource with the configmap.\n+   * Update the restart version of the domain resource.\n+   * Verify rolling restart of the domain by comparing PodCreationTimestamp\n+   * for all the server pods before and after rolling restart.\n+   * Verify SystemResource configurations using Rest API call to admin server.\n+   */\n+  @Test\n+  @Order(3)\n+  @DisplayName(\"Add New JDBC/JMS SystemResources to a model-in-image domain\")\n+  public void testMiiAddSystemResources() {\n+\n+    logger.info(\"Use same database secret created in befreAll() method\");\n+    String configMapName = \"dsjmsconfigmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.jdbc2.yaml\", \"model.jms2.yaml\"));\n+\n+    LinkedHashMap<String, DateTime> pods = new LinkedHashMap<>();\n+    // get the creation time of the admin server pod before patching\n+    DateTime adminPodCreationTime = getPodCreationTime(domainNamespace,adminServerPodName);\n+    pods.put(adminServerPodName, adminPodCreationTime);\n+    // get the creation time of the managed server pods before patching\n+    for (int i = 1; i <= replicaCount; i++) {\n+      pods.put(managedServerPrefix + i, getPodCreationTime(domainNamespace, managedServerPrefix + i));\n+    }\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/configuration/model/configMap\\\",\")\n+        .append(\" \\\"value\\\":  \\\"\" + configMapName + \"\\\"\")\n+        .append(\" }]\");\n+    logger.log(Level.INFO, \"Configmap patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean cmPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(configMap)  failed \");\n+    assertTrue(cmPatched, \"patchDomainCustomResource(configMap) failed\");\n+\n+    String newRestartVersion = patchDomainResourceWithNewRestartVersion(domainUid, domainNamespace);\n+    logger.log(Level.INFO, \"New restart version is {0}\", newRestartVersion);\n+    \n+    assertTrue(assertDoesNotThrow(\n+        () -> (verifyRollingRestartOccurred(pods, 1, domainNamespace)),\n+         \"More than one pod was restarted at same time\"),\n+        \"Rolling restart failed\");\n+\n+    // Even if pods are created, need the service to created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+    ExecResult result = null;\n+    result = checkSystemResourceConfiguration(\"JDBCSystemResources\", \"TestDataSource2\");\n+    assertNotNull(result, \"CheckJDBCSystemResources returned null\");\n+    logger.info(\"CheckJDBCSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"JDBCSystemResource not found\");\n+    logger.info(\"Found the JDBCSystemResource configuration\");\n+\n+    result = null;\n+    result = checkSystemResourceConfiguration(\"JMSSystemResources\", \"TestClusterJmsModule2\");\n+    assertNotNull(result, \"CheckJMSSystemResources returned null\");\n+    logger.info(\"CheckJMSSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"JMSSystemResource not found\");\n+    logger.info(\"Found the JMSSystemResource configuration\");\n+  }\n+\n   /**\n    * Patch the domain resource with the configmap to add a cluster.\n-   * Update the restart version of the domain resource to 1.\n+   * Update the restart version of the domain resource.\n    * Verify rolling restart of the domain by comparing PodCreationTimestamp\n    * before and after rolling restart.\n-   * Verify servers from new cluster are not in running state, because i\n+   * Verify servers from new cluster are not in running state, because \n    * the spec level replica count to zero(default).\n    */\n   @Test\n-  @Order(1)\n-  @DisplayName(\"Add a cluster to model in image domain with default replica count\")\n-  @Slow\n-  @MustNotRunInParallel\n-  public void testAddMiiClusteriWithNoReplica() {\n+  @Order(4)\n+  @DisplayName(\"Add a dynamic cluster to a model-in-image domain with default repicar count\")", "originalCommit": "29f22d110d941ea9533816f54abec814aee70972", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEyOTQwNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473129406", "bodyText": "done", "author": "anpanigr", "createdAt": "2020-08-19T15:45:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI3Mjg1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "1285a972188e83c1b3744103aed389a53a35a107", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\nindex 0701755e9c..1eddf0b82c 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\n\n@@ -337,11 +337,11 @@ class ItMiiUpdateDomainConfig {\n \n   /**\n    * Create a WebLogic domain with a defined configmap in configuration/model \n-   *  section of the domain resource.\n+   * section of the domain resource.\n    * The configmap has multiple sparse WDT model files that define \n-   *  a JDBCSystemResource, a JMSSystemResource and a WLDFSystemResource.\n+   * a JDBCSystemResource, a JMSSystemResource and a WLDFSystemResource.\n    * Verify all the SystemResource configurations using the rest API call \n-   *   using adminserver's public nodeport\n+   * using the public nodeport of the administration server.\n    */\n   @Test\n   @Order(1)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI3NjA4OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r472276089", "bodyText": "Are we deleting multiple system resources? If so, modify the javadoc to use plural.", "author": "doxiao", "createdAt": "2020-08-18T15:16:35Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -285,20 +335,208 @@ public void beforeEach() {\n     }\n   }\n \n+  /**\n+   * Create a WebLogic domain with a defined configmap in configuration/model \n+   *  section of the domain resource.\n+   * The configmap has multiple sparse WDT model files that define \n+   *  a JDBCSystemResource, a JMSSystemResource and a WLDFSystemResource.\n+   * Verify all the SystemResource configurations using the rest API call \n+   *   using adminserver's public nodeport\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"Verify the pre-configured SystemResources in a model-in-image domain\")\n+  public void testMiiCheckSystemResources() {\n+    ExecResult result = null;\n+    result = checkSystemResourceConfiguration(\"JDBCSystemResources\", \"TestDataSource\");\n+    assertNotNull(result, \"CheckJDBCSystemResources returned null\");\n+    logger.info(\"CheckJDBCSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"JDBCSystemResource not found\");\n+    logger.info(\"Found the JDBCSystemResource configuration\");\n+\n+    result = null;\n+    result = checkSystemResourceConfiguration(\"JMSSystemResources\", \"TestClusterJmsModule\");\n+    assertNotNull(result, \"CheckJMSSystemResources returned null\");\n+    logger.info(\"CheckJMSSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"JMSSystemResource not found\");\n+    logger.info(\"Found the JMSSystemResource configuration\");\n+\n+    result = null;\n+    result = checkSystemResourceConfiguration(\"WLDFSystemResources\", \"TestWldfModule\");\n+    assertNotNull(result, \"CheckWLDFSystemResources returned null\");\n+    logger.info(\"CheckWLDFSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"WLDFSystemResource not found\");\n+    logger.info(\"Found the WLDFSystemResource configuration\");\n+\n+    result = null;\n+    result = checkJdbcRuntime(\"TestDataSource\");\n+    logger.info(\"checkJdbcRuntime: returned {0}\", result.toString());\n+    assertTrue(result.stdout().contains(\"jdbc:oracle:thin:localhost\"),\n+         String.format(\"DB URL does not match with RuntimeMBean Info\"));\n+    assertTrue(result.stdout().contains(\"scott\"),\n+         String.format(\"DB user name does not match with RuntimeMBean Info\"));\n+    logger.info(\"Found the JDBCSystemResource configuration\");\n+\n+  }\n+\n+  /**\n+   * Start a WebLogic domain using model-in-image with JMS/JDBC SystemResource.", "originalCommit": "29f22d110d941ea9533816f54abec814aee70972", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEyOTM0Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473129347", "bodyText": "done", "author": "anpanigr", "createdAt": "2020-08-19T15:45:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI3NjA4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "1285a972188e83c1b3744103aed389a53a35a107", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\nindex 0701755e9c..1eddf0b82c 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\n\n@@ -337,11 +337,11 @@ class ItMiiUpdateDomainConfig {\n \n   /**\n    * Create a WebLogic domain with a defined configmap in configuration/model \n-   *  section of the domain resource.\n+   * section of the domain resource.\n    * The configmap has multiple sparse WDT model files that define \n-   *  a JDBCSystemResource, a JMSSystemResource and a WLDFSystemResource.\n+   * a JDBCSystemResource, a JMSSystemResource and a WLDFSystemResource.\n    * Verify all the SystemResource configurations using the rest API call \n-   *   using adminserver's public nodeport\n+   * using the public nodeport of the administration server.\n    */\n   @Test\n   @Order(1)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4NTY0OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r472285648", "bodyText": "Typo \"validitity\".", "author": "doxiao", "createdAt": "2020-08-18T15:29:23Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -507,6 +741,72 @@ public void testAddMiiConfiguredCluster() {\n     logger.info(\"Found new managed server configuration\");\n   }\n \n+  /**\n+   * Start a WebLogic domain with model-in-imge \n+   * Patch domain CRD with new webLogicCredentialsSecret.\n+   * Update domainRestartVersion to trigger a rolling restart of server pods.\n+   * make sure all the server pods are re-started in a rolling fashion. \n+   * Check the validitity of new credentials by accessing ", "originalCommit": "29f22d110d941ea9533816f54abec814aee70972", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEyOTI5MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473129291", "bodyText": "done", "author": "anpanigr", "createdAt": "2020-08-19T15:45:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4NTY0OA=="}], "type": "inlineReview", "revised_code": {"commit": "1285a972188e83c1b3744103aed389a53a35a107", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\nindex 0701755e9c..1eddf0b82c 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\n\n@@ -742,12 +742,12 @@ class ItMiiUpdateDomainConfig {\n   }\n \n   /**\n-   * Start a WebLogic domain with model-in-imge \n+   * Start a WebLogic domain with model-in-imge.\n    * Patch domain CRD with new webLogicCredentialsSecret.\n    * Update domainRestartVersion to trigger a rolling restart of server pods.\n    * make sure all the server pods are re-started in a rolling fashion. \n-   * Check the validitity of new credentials by accessing \n-   *  WebLogic RESTful Management Services.\n+   * Check the validity of new credentials by accessing \n+   * WebLogic RESTful Management Services.\n    */\n   @Test\n   @Order(7)\n"}}, {"oid": "1285a972188e83c1b3744103aed389a53a35a107", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/1285a972188e83c1b3744103aed389a53a35a107", "message": "Resolve Review comments", "committedDate": "2020-08-19T15:47:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1Nzc1Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473257753", "bodyText": "SystemResource typo, Check the SystemResources in a pre-configured ConfigMap", "author": "vanajamukkara", "createdAt": "2020-08-19T19:07:34Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -81,21 +84,55 @@\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonPatchTestUtils.patchDomainWithNewSecretAndVerify;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.verifyCredentials;\n import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n import static org.awaitility.Awaitility.with;\n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+/**\n+ * This test class verifies the following scenerios\n+ *\n+ * <p>testMiiCheckSystemResources\n+ *  Check the SystemResourece in a pre-configured in ConfigMap", "originalCommit": "1285a972188e83c1b3744103aed389a53a35a107", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM5MzQ0Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473393443", "bodyText": "done", "author": "anpanigr", "createdAt": "2020-08-19T22:35:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1Nzc1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "6543606400e588367f5ab30ec61c44009890a0b0", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\nindex 1eddf0b82c..00379e3bdb 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\n\n@@ -95,7 +97,6 @@ import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n import static org.awaitility.Awaitility.with;\n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1ODU0MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473258540", "bodyText": "SystemResources", "author": "vanajamukkara", "createdAt": "2020-08-19T19:09:03Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -81,21 +84,55 @@\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonPatchTestUtils.patchDomainWithNewSecretAndVerify;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.verifyCredentials;\n import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n import static org.awaitility.Awaitility.with;\n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+/**\n+ * This test class verifies the following scenerios\n+ *\n+ * <p>testMiiCheckSystemResources\n+ *  Check the SystemResourece in a pre-configured in ConfigMap\n+ *\n+ * <p>testMiiDeleteSystemResources\n+ *  Delete SystemResourece(s) defined in WebLogic domain ", "originalCommit": "1285a972188e83c1b3744103aed389a53a35a107", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM5MzUxNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473393517", "bodyText": "done", "author": "anpanigr", "createdAt": "2020-08-19T22:35:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1ODU0MA=="}], "type": "inlineReview", "revised_code": {"commit": "6543606400e588367f5ab30ec61c44009890a0b0", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\nindex 1eddf0b82c..00379e3bdb 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\n\n@@ -95,7 +97,6 @@ import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n import static org.awaitility.Awaitility.with;\n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1ODk4NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473258985", "bodyText": "managed typo", "author": "vanajamukkara", "createdAt": "2020-08-19T19:09:55Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -81,21 +84,55 @@\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonPatchTestUtils.patchDomainWithNewSecretAndVerify;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.verifyCredentials;\n import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n import static org.awaitility.Awaitility.with;\n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+/**\n+ * This test class verifies the following scenerios\n+ *\n+ * <p>testMiiCheckSystemResources\n+ *  Check the SystemResourece in a pre-configured in ConfigMap\n+ *\n+ * <p>testMiiDeleteSystemResources\n+ *  Delete SystemResourece(s) defined in WebLogic domain \n+ *\n+ * <p>testMiiAddSystemResources\n+ *  Add new SystemResources to a running domain\n+ *\n+ * <p>testMiiAddDynmicClusteriWithNoReplica\n+ *  Add a new dynamic WebLogic cluster to a running domain with default Replica\n+ *  count(zero), so that no manged server on the new cluster is activated.", "originalCommit": "1285a972188e83c1b3744103aed389a53a35a107", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM5Mzk5MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473393990", "bodyText": "done", "author": "anpanigr", "createdAt": "2020-08-19T22:36:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1ODk4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "6543606400e588367f5ab30ec61c44009890a0b0", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\nindex 1eddf0b82c..00379e3bdb 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\n\n@@ -95,7 +97,6 @@ import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n import static org.awaitility.Awaitility.with;\n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1OTA1MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473259051", "bodyText": "managed typo", "author": "vanajamukkara", "createdAt": "2020-08-19T19:10:03Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -81,21 +84,55 @@\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonPatchTestUtils.patchDomainWithNewSecretAndVerify;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.verifyCredentials;\n import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n import static org.awaitility.Awaitility.with;\n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+/**\n+ * This test class verifies the following scenerios\n+ *\n+ * <p>testMiiCheckSystemResources\n+ *  Check the SystemResourece in a pre-configured in ConfigMap\n+ *\n+ * <p>testMiiDeleteSystemResources\n+ *  Delete SystemResourece(s) defined in WebLogic domain \n+ *\n+ * <p>testMiiAddSystemResources\n+ *  Add new SystemResources to a running domain\n+ *\n+ * <p>testMiiAddDynmicClusteriWithNoReplica\n+ *  Add a new dynamic WebLogic cluster to a running domain with default Replica\n+ *  count(zero), so that no manged server on the new cluster is activated.\n+ *\n+ * <p>testMiiAddDynamicCluster\n+ *  Add a new dynamic WebLogic cluster to a running domain with non-zero Replica\n+ *  count so that required number of manged servers(s) on new cluster get  ", "originalCommit": "1285a972188e83c1b3744103aed389a53a35a107", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM5NDA3Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473394076", "bodyText": "done", "author": "anpanigr", "createdAt": "2020-08-19T22:36:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1OTA1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "6543606400e588367f5ab30ec61c44009890a0b0", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\nindex 1eddf0b82c..00379e3bdb 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\n\n@@ -95,7 +97,6 @@ import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n import static org.awaitility.Awaitility.with;\n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1OTE0NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473259144", "bodyText": "activated", "author": "vanajamukkara", "createdAt": "2020-08-19T19:10:13Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -81,21 +84,55 @@\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonPatchTestUtils.patchDomainWithNewSecretAndVerify;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.verifyCredentials;\n import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n import static org.awaitility.Awaitility.with;\n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+/**\n+ * This test class verifies the following scenerios\n+ *\n+ * <p>testMiiCheckSystemResources\n+ *  Check the SystemResourece in a pre-configured in ConfigMap\n+ *\n+ * <p>testMiiDeleteSystemResources\n+ *  Delete SystemResourece(s) defined in WebLogic domain \n+ *\n+ * <p>testMiiAddSystemResources\n+ *  Add new SystemResources to a running domain\n+ *\n+ * <p>testMiiAddDynmicClusteriWithNoReplica\n+ *  Add a new dynamic WebLogic cluster to a running domain with default Replica\n+ *  count(zero), so that no manged server on the new cluster is activated.\n+ *\n+ * <p>testMiiAddDynamicCluster\n+ *  Add a new dynamic WebLogic cluster to a running domain with non-zero Replica\n+ *  count so that required number of manged servers(s) on new cluster get  \n+ *  activted after rolling restart. ", "originalCommit": "1285a972188e83c1b3744103aed389a53a35a107", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM5NDYxOQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473394619", "bodyText": "done", "author": "anpanigr", "createdAt": "2020-08-19T22:37:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1OTE0NA=="}], "type": "inlineReview", "revised_code": {"commit": "6543606400e588367f5ab30ec61c44009890a0b0", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\nindex 1eddf0b82c..00379e3bdb 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\n\n@@ -95,7 +97,6 @@ import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n import static org.awaitility.Awaitility.with;\n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1OTY5NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473259694", "bodyText": "administrative", "author": "vanajamukkara", "createdAt": "2020-08-19T19:11:19Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -81,21 +84,55 @@\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonPatchTestUtils.patchDomainWithNewSecretAndVerify;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.verifyCredentials;\n import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n import static org.awaitility.Awaitility.with;\n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+/**\n+ * This test class verifies the following scenerios\n+ *\n+ * <p>testMiiCheckSystemResources\n+ *  Check the SystemResourece in a pre-configured in ConfigMap\n+ *\n+ * <p>testMiiDeleteSystemResources\n+ *  Delete SystemResourece(s) defined in WebLogic domain \n+ *\n+ * <p>testMiiAddSystemResources\n+ *  Add new SystemResources to a running domain\n+ *\n+ * <p>testMiiAddDynmicClusteriWithNoReplica\n+ *  Add a new dynamic WebLogic cluster to a running domain with default Replica\n+ *  count(zero), so that no manged server on the new cluster is activated.\n+ *\n+ * <p>testMiiAddDynamicCluster\n+ *  Add a new dynamic WebLogic cluster to a running domain with non-zero Replica\n+ *  count so that required number of manged servers(s) on new cluster get  \n+ *  activted after rolling restart. \n+ *\n+ * <p>testMiiAddConfiguredCluster\n+ *  Add a new configured WebLogic cluster to a running domain \n+ *\n+ * <p>testMiiUpdateWebLogicCredential\n+ *  Update the adminstrative credential of a running domain by updating the ", "originalCommit": "1285a972188e83c1b3744103aed389a53a35a107", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIzMTI3Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r474231276", "bodyText": "done", "author": "anpanigr", "createdAt": "2020-08-20T19:43:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1OTY5NA=="}], "type": "inlineReview", "revised_code": {"commit": "6543606400e588367f5ab30ec61c44009890a0b0", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\nindex 1eddf0b82c..00379e3bdb 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\n\n@@ -95,7 +97,6 @@ import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n import static org.awaitility.Awaitility.with;\n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI2MTUxMA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473261510", "bodyText": "remove old code and use installAndVerifyOperator utility method in initAll()", "author": "vanajamukkara", "createdAt": "2020-08-19T19:14:43Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -81,21 +84,55 @@\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.operatorIsReady;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.podDoesNotExist;\n import static oracle.weblogic.kubernetes.assertions.TestAssertions.verifyRollingRestartOccurred;\n+import static oracle.weblogic.kubernetes.utils.CommonPatchTestUtils.patchDomainWithNewSecretAndVerify;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReady;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createConfigMapAndVerify;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getPodCreationTime;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.verifyCredentials;\n import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n import static org.awaitility.Awaitility.with;\n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+/**\n+ * This test class verifies the following scenerios\n+ *\n+ * <p>testMiiCheckSystemResources\n+ *  Check the SystemResourece in a pre-configured in ConfigMap\n+ *\n+ * <p>testMiiDeleteSystemResources\n+ *  Delete SystemResourece(s) defined in WebLogic domain \n+ *\n+ * <p>testMiiAddSystemResources\n+ *  Add new SystemResources to a running domain\n+ *\n+ * <p>testMiiAddDynmicClusteriWithNoReplica\n+ *  Add a new dynamic WebLogic cluster to a running domain with default Replica\n+ *  count(zero), so that no manged server on the new cluster is activated.\n+ *\n+ * <p>testMiiAddDynamicCluster\n+ *  Add a new dynamic WebLogic cluster to a running domain with non-zero Replica\n+ *  count so that required number of manged servers(s) on new cluster get  \n+ *  activted after rolling restart. \n+ *\n+ * <p>testMiiAddConfiguredCluster\n+ *  Add a new configured WebLogic cluster to a running domain \n+ *\n+ * <p>testMiiUpdateWebLogicCredential\n+ *  Update the adminstrative credential of a running domain by updating the \n+ *  secret and activating a rolling restart.\n+ */\n+\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@DisplayName(\"Test to add a cluster to model in image domain\")\n+@DisplayName(\"Test add SystemResources, Clusters to model in image domain\")\n @IntegrationTest\n-class ItMiiAddCluster {\n+class ItMiiUpdateDomainConfig {", "originalCommit": "1285a972188e83c1b3744103aed389a53a35a107", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDMxNzI0Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r474317247", "bodyText": "Added installAndVerifyOperator to replace the old code.", "author": "anpanigr", "createdAt": "2020-08-20T23:00:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI2MTUxMA=="}], "type": "inlineReview", "revised_code": {"commit": "6543606400e588367f5ab30ec61c44009890a0b0", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\nindex 1eddf0b82c..00379e3bdb 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\n\n@@ -95,7 +97,6 @@ import static oracle.weblogic.kubernetes.utils.ExecCommand.exec;\n import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n import static org.awaitility.Awaitility.with;\n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3NDUzNQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473274535", "bodyText": "If you want to refactor the code in the same PR, you can use the below code, change return type to boolean\nreturn new Command()\n          .withParams(new CommandParams()\n              .command(curlString.toString()))\n          .executeAndVerify(\"200\");\n\nFrom the calling code,\nassertTrue(checkSystemResourceConfiguration(\"JDBCSystemResources\", \"TestDataSource\"), \"JDBCSystemResource is not found\");", "author": "vanajamukkara", "createdAt": "2020-08-19T19:39:58Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -685,4 +1006,50 @@ private void createClusterConfigMap(String configMapName, String modelFile) {\n     assertTrue(cmCreated, String.format(\"createConfigMap failed while creating ConfigMap %s\", configMapName));\n   }\n \n+  private ExecResult checkSystemResourceConfiguration(String resourcesType, String resourcesName) {\n+\n+    int adminServiceNodePort = getServiceNodePort(domainNamespace, adminServerPodName + \"-external\", \"default\");\n+    ExecResult result = null;\n+    curlString = new StringBuffer(\"status=$(curl --user weblogic:welcome1 \");\n+    curlString.append(\"http://\" + K8S_NODEPORT_HOST + \":\" + adminServiceNodePort)\n+         .append(\"/management/weblogic/latest/domainConfig\")\n+         .append(\"/\")\n+         .append(resourcesType)\n+         .append(\"/\")\n+         .append(resourcesName)\n+         .append(\"/\")\n+         .append(\" --silent --show-error \")\n+         .append(\" -o /dev/null \")\n+         .append(\" -w %{http_code});\")\n+         .append(\"echo ${status}\");\n+    logger.info(\"checkSystemResource: curl command {0}\", new String(curlString));\n+    try {\n+      result = exec(new String(curlString), true);", "originalCommit": "1285a972188e83c1b3744103aed389a53a35a107", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQxMzI0OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473413248", "bodyText": "In some case I check for 200 and in some cases I check for 404. So I updated the utility method to check for 200 by default and used assertTrue/assertFalse to verify the availability of SystemResource", "author": "anpanigr", "createdAt": "2020-08-19T23:02:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3NDUzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "6543606400e588367f5ab30ec61c44009890a0b0", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\nindex 1eddf0b82c..00379e3bdb 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\n\n@@ -1006,7 +983,7 @@ class ItMiiUpdateDomainConfig {\n     assertTrue(cmCreated, String.format(\"createConfigMap failed while creating ConfigMap %s\", configMapName));\n   }\n \n-  private ExecResult checkSystemResourceConfiguration(String resourcesType, String resourcesName) {\n+  private boolean checkSystemResourceConfiguration(String resourcesType, String resourcesName) {\n \n     int adminServiceNodePort = getServiceNodePort(domainNamespace, adminServerPodName + \"-external\", \"default\");\n     ExecResult result = null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3NTEwNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473275104", "bodyText": "you can replace these lines with single line if you refactor the code, scroll down to check checkSystemResourceConfiguration()", "author": "vanajamukkara", "createdAt": "2020-08-19T19:41:05Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -285,20 +335,208 @@ public void beforeEach() {\n     }\n   }\n \n+  /**\n+   * Create a WebLogic domain with a defined configmap in configuration/model \n+   * section of the domain resource.\n+   * The configmap has multiple sparse WDT model files that define \n+   * a JDBCSystemResource, a JMSSystemResource and a WLDFSystemResource.\n+   * Verify all the SystemResource configurations using the rest API call \n+   * using the public nodeport of the administration server.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"Verify the pre-configured SystemResources in a model-in-image domain\")\n+  public void testMiiCheckSystemResources() {\n+    ExecResult result = null;\n+    result = checkSystemResourceConfiguration(\"JDBCSystemResources\", \"TestDataSource\");", "originalCommit": "1285a972188e83c1b3744103aed389a53a35a107", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ4ODM5NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473488395", "bodyText": "done", "author": "anpanigr", "createdAt": "2020-08-20T00:53:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3NTEwNA=="}], "type": "inlineReview", "revised_code": {"commit": "6543606400e588367f5ab30ec61c44009890a0b0", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\nindex 1eddf0b82c..00379e3bdb 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\n\n@@ -347,28 +348,20 @@ class ItMiiUpdateDomainConfig {\n   @Order(1)\n   @DisplayName(\"Verify the pre-configured SystemResources in a model-in-image domain\")\n   public void testMiiCheckSystemResources() {\n-    ExecResult result = null;\n-    result = checkSystemResourceConfiguration(\"JDBCSystemResources\", \"TestDataSource\");\n-    assertNotNull(result, \"CheckJDBCSystemResources returned null\");\n-    logger.info(\"CheckJDBCSystemResource returned {0}\", result.toString());\n-    assertEquals(\"200\", result.stdout(), \"JDBCSystemResource not found\");\n+\n+    assertTrue(checkSystemResourceConfiguration(\"JDBCSystemResources\", \n+        \"TestDataSource\"), \"JDBCSystemResource not found\");\n     logger.info(\"Found the JDBCSystemResource configuration\");\n \n-    result = null;\n-    result = checkSystemResourceConfiguration(\"JMSSystemResources\", \"TestClusterJmsModule\");\n-    assertNotNull(result, \"CheckJMSSystemResources returned null\");\n-    logger.info(\"CheckJMSSystemResource returned {0}\", result.toString());\n-    assertEquals(\"200\", result.stdout(), \"JMSSystemResource not found\");\n+    assertTrue(checkSystemResourceConfiguration(\"JMSSystemResources\", \n+        \"TestClusterJmsModule\"), \"JMSSystemResources not found\");\n     logger.info(\"Found the JMSSystemResource configuration\");\n \n-    result = null;\n-    result = checkSystemResourceConfiguration(\"WLDFSystemResources\", \"TestWldfModule\");\n-    assertNotNull(result, \"CheckWLDFSystemResources returned null\");\n-    logger.info(\"CheckWLDFSystemResource returned {0}\", result.toString());\n-    assertEquals(\"200\", result.stdout(), \"WLDFSystemResource not found\");\n+    assertTrue(checkSystemResourceConfiguration(\"WLDFSystemResources\", \n+        \"TestWldfModule\"), \"WLDFSystemResources not found\");\n     logger.info(\"Found the WLDFSystemResource configuration\");\n \n-    result = null;\n+    ExecResult result = null;\n     result = checkJdbcRuntime(\"TestDataSource\");\n     logger.info(\"checkJdbcRuntime: returned {0}\", result.toString());\n     assertTrue(result.stdout().contains(\"jdbc:oracle:thin:localhost\"),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3NTE3MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473275170", "bodyText": "same as above", "author": "vanajamukkara", "createdAt": "2020-08-19T19:41:16Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -285,20 +335,208 @@ public void beforeEach() {\n     }\n   }\n \n+  /**\n+   * Create a WebLogic domain with a defined configmap in configuration/model \n+   * section of the domain resource.\n+   * The configmap has multiple sparse WDT model files that define \n+   * a JDBCSystemResource, a JMSSystemResource and a WLDFSystemResource.\n+   * Verify all the SystemResource configurations using the rest API call \n+   * using the public nodeport of the administration server.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"Verify the pre-configured SystemResources in a model-in-image domain\")\n+  public void testMiiCheckSystemResources() {\n+    ExecResult result = null;\n+    result = checkSystemResourceConfiguration(\"JDBCSystemResources\", \"TestDataSource\");\n+    assertNotNull(result, \"CheckJDBCSystemResources returned null\");\n+    logger.info(\"CheckJDBCSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"JDBCSystemResource not found\");\n+    logger.info(\"Found the JDBCSystemResource configuration\");\n+\n+    result = null;\n+    result = checkSystemResourceConfiguration(\"JMSSystemResources\", \"TestClusterJmsModule\");", "originalCommit": "1285a972188e83c1b3744103aed389a53a35a107", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ4ODQzNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473488436", "bodyText": "done", "author": "anpanigr", "createdAt": "2020-08-20T00:53:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3NTE3MA=="}], "type": "inlineReview", "revised_code": {"commit": "6543606400e588367f5ab30ec61c44009890a0b0", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\nindex 1eddf0b82c..00379e3bdb 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\n\n@@ -347,28 +348,20 @@ class ItMiiUpdateDomainConfig {\n   @Order(1)\n   @DisplayName(\"Verify the pre-configured SystemResources in a model-in-image domain\")\n   public void testMiiCheckSystemResources() {\n-    ExecResult result = null;\n-    result = checkSystemResourceConfiguration(\"JDBCSystemResources\", \"TestDataSource\");\n-    assertNotNull(result, \"CheckJDBCSystemResources returned null\");\n-    logger.info(\"CheckJDBCSystemResource returned {0}\", result.toString());\n-    assertEquals(\"200\", result.stdout(), \"JDBCSystemResource not found\");\n+\n+    assertTrue(checkSystemResourceConfiguration(\"JDBCSystemResources\", \n+        \"TestDataSource\"), \"JDBCSystemResource not found\");\n     logger.info(\"Found the JDBCSystemResource configuration\");\n \n-    result = null;\n-    result = checkSystemResourceConfiguration(\"JMSSystemResources\", \"TestClusterJmsModule\");\n-    assertNotNull(result, \"CheckJMSSystemResources returned null\");\n-    logger.info(\"CheckJMSSystemResource returned {0}\", result.toString());\n-    assertEquals(\"200\", result.stdout(), \"JMSSystemResource not found\");\n+    assertTrue(checkSystemResourceConfiguration(\"JMSSystemResources\", \n+        \"TestClusterJmsModule\"), \"JMSSystemResources not found\");\n     logger.info(\"Found the JMSSystemResource configuration\");\n \n-    result = null;\n-    result = checkSystemResourceConfiguration(\"WLDFSystemResources\", \"TestWldfModule\");\n-    assertNotNull(result, \"CheckWLDFSystemResources returned null\");\n-    logger.info(\"CheckWLDFSystemResource returned {0}\", result.toString());\n-    assertEquals(\"200\", result.stdout(), \"WLDFSystemResource not found\");\n+    assertTrue(checkSystemResourceConfiguration(\"WLDFSystemResources\", \n+        \"TestWldfModule\"), \"WLDFSystemResources not found\");\n     logger.info(\"Found the WLDFSystemResource configuration\");\n \n-    result = null;\n+    ExecResult result = null;\n     result = checkJdbcRuntime(\"TestDataSource\");\n     logger.info(\"checkJdbcRuntime: returned {0}\", result.toString());\n     assertTrue(result.stdout().contains(\"jdbc:oracle:thin:localhost\"),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3NTU4NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473275584", "bodyText": "Resources", "author": "vanajamukkara", "createdAt": "2020-08-19T19:42:06Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -285,20 +335,208 @@ public void beforeEach() {\n     }\n   }\n \n+  /**\n+   * Create a WebLogic domain with a defined configmap in configuration/model \n+   * section of the domain resource.\n+   * The configmap has multiple sparse WDT model files that define \n+   * a JDBCSystemResource, a JMSSystemResource and a WLDFSystemResource.\n+   * Verify all the SystemResource configurations using the rest API call \n+   * using the public nodeport of the administration server.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"Verify the pre-configured SystemResources in a model-in-image domain\")\n+  public void testMiiCheckSystemResources() {\n+    ExecResult result = null;\n+    result = checkSystemResourceConfiguration(\"JDBCSystemResources\", \"TestDataSource\");\n+    assertNotNull(result, \"CheckJDBCSystemResources returned null\");\n+    logger.info(\"CheckJDBCSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"JDBCSystemResource not found\");\n+    logger.info(\"Found the JDBCSystemResource configuration\");\n+\n+    result = null;\n+    result = checkSystemResourceConfiguration(\"JMSSystemResources\", \"TestClusterJmsModule\");\n+    assertNotNull(result, \"CheckJMSSystemResources returned null\");\n+    logger.info(\"CheckJMSSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"JMSSystemResource not found\");\n+    logger.info(\"Found the JMSSystemResource configuration\");\n+\n+    result = null;\n+    result = checkSystemResourceConfiguration(\"WLDFSystemResources\", \"TestWldfModule\");\n+    assertNotNull(result, \"CheckWLDFSystemResources returned null\");\n+    logger.info(\"CheckWLDFSystemResource returned {0}\", result.toString());\n+    assertEquals(\"200\", result.stdout(), \"WLDFSystemResource not found\");\n+    logger.info(\"Found the WLDFSystemResource configuration\");\n+\n+    result = null;\n+    result = checkJdbcRuntime(\"TestDataSource\");\n+    logger.info(\"checkJdbcRuntime: returned {0}\", result.toString());\n+    assertTrue(result.stdout().contains(\"jdbc:oracle:thin:localhost\"),\n+         String.format(\"DB URL does not match with RuntimeMBean Info\"));\n+    assertTrue(result.stdout().contains(\"scott\"),\n+         String.format(\"DB user name does not match with RuntimeMBean Info\"));\n+    logger.info(\"Found the JDBCSystemResource configuration\");\n+\n+  }\n+\n+  /**\n+   * Start a WebLogic domain using model-in-image with JMS/JDBC SystemResources.\n+   * Create a configmap to delete JMS/JDBC SystemResources.\n+   * Patch the domain resource with the configmap.\n+   * Update the restart version of the domain resource.\n+   * Verify rolling restart of the domain by comparing PodCreationTimestamp\n+   * for all the server pods before and after rolling restart.\n+   * Verify System Resource are deleted from the domain.", "originalCommit": "1285a972188e83c1b3744103aed389a53a35a107", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM5NTQwMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473395403", "bodyText": "done", "author": "anpanigr", "createdAt": "2020-08-19T22:38:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3NTU4NA=="}], "type": "inlineReview", "revised_code": {"commit": "6543606400e588367f5ab30ec61c44009890a0b0", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\nindex 1eddf0b82c..00379e3bdb 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\n\n@@ -347,28 +348,20 @@ class ItMiiUpdateDomainConfig {\n   @Order(1)\n   @DisplayName(\"Verify the pre-configured SystemResources in a model-in-image domain\")\n   public void testMiiCheckSystemResources() {\n-    ExecResult result = null;\n-    result = checkSystemResourceConfiguration(\"JDBCSystemResources\", \"TestDataSource\");\n-    assertNotNull(result, \"CheckJDBCSystemResources returned null\");\n-    logger.info(\"CheckJDBCSystemResource returned {0}\", result.toString());\n-    assertEquals(\"200\", result.stdout(), \"JDBCSystemResource not found\");\n+\n+    assertTrue(checkSystemResourceConfiguration(\"JDBCSystemResources\", \n+        \"TestDataSource\"), \"JDBCSystemResource not found\");\n     logger.info(\"Found the JDBCSystemResource configuration\");\n \n-    result = null;\n-    result = checkSystemResourceConfiguration(\"JMSSystemResources\", \"TestClusterJmsModule\");\n-    assertNotNull(result, \"CheckJMSSystemResources returned null\");\n-    logger.info(\"CheckJMSSystemResource returned {0}\", result.toString());\n-    assertEquals(\"200\", result.stdout(), \"JMSSystemResource not found\");\n+    assertTrue(checkSystemResourceConfiguration(\"JMSSystemResources\", \n+        \"TestClusterJmsModule\"), \"JMSSystemResources not found\");\n     logger.info(\"Found the JMSSystemResource configuration\");\n \n-    result = null;\n-    result = checkSystemResourceConfiguration(\"WLDFSystemResources\", \"TestWldfModule\");\n-    assertNotNull(result, \"CheckWLDFSystemResources returned null\");\n-    logger.info(\"CheckWLDFSystemResource returned {0}\", result.toString());\n-    assertEquals(\"200\", result.stdout(), \"WLDFSystemResource not found\");\n+    assertTrue(checkSystemResourceConfiguration(\"WLDFSystemResources\", \n+        \"TestWldfModule\"), \"WLDFSystemResources not found\");\n     logger.info(\"Found the WLDFSystemResource configuration\");\n \n-    result = null;\n+    ExecResult result = null;\n     result = checkJdbcRuntime(\"TestDataSource\");\n     logger.info(\"checkJdbcRuntime: returned {0}\", result.toString());\n     assertTrue(result.stdout().contains(\"jdbc:oracle:thin:localhost\"),\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3NzE5NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473277195", "bodyText": "Patch the domain CRD with new credentials secret.", "author": "vanajamukkara", "createdAt": "2020-08-19T19:45:16Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -507,6 +741,72 @@ public void testAddMiiConfiguredCluster() {\n     logger.info(\"Found new managed server configuration\");\n   }\n \n+  /**\n+   * Start a WebLogic domain with model-in-imge.\n+   * Patch domain CRD with new webLogicCredentialsSecret.", "originalCommit": "1285a972188e83c1b3744103aed389a53a35a107", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM5NjQyNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r473396424", "bodyText": "modified:  Patch the domain CRD with a new credentials secret", "author": "anpanigr", "createdAt": "2020-08-19T22:39:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI3NzE5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "6543606400e588367f5ab30ec61c44009890a0b0", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\nindex 1eddf0b82c..00379e3bdb 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\n\n@@ -743,7 +720,7 @@ class ItMiiUpdateDomainConfig {\n \n   /**\n    * Start a WebLogic domain with model-in-imge.\n-   * Patch domain CRD with new webLogicCredentialsSecret.\n+   * Patch the domain CRD with a new credentials secret.\n    * Update domainRestartVersion to trigger a rolling restart of server pods.\n    * make sure all the server pods are re-started in a rolling fashion. \n    * Check the validity of new credentials by accessing \n"}}, {"oid": "6543606400e588367f5ab30ec61c44009890a0b0", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/6543606400e588367f5ab30ec61c44009890a0b0", "message": "Modify the logic to check SystemResources", "committedDate": "2020-08-20T00:49:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA3NTUyMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r474075523", "bodyText": "Typo \"repica\".", "author": "doxiao", "createdAt": "2020-08-20T15:33:57Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -285,20 +336,184 @@ public void beforeEach() {\n     }\n   }\n \n+  /**\n+   * Create a WebLogic domain with a defined configmap in configuration/model \n+   * section of the domain resource.\n+   * The configmap has multiple sparse WDT model files that define \n+   * a JDBCSystemResource, a JMSSystemResource and a WLDFSystemResource.\n+   * Verify all the SystemResource configurations using the rest API call \n+   * using the public nodeport of the administration server.\n+   */\n+  @Test\n+  @Order(1)\n+  @DisplayName(\"Verify the pre-configured SystemResources in a model-in-image domain\")\n+  public void testMiiCheckSystemResources() {\n+\n+    assertTrue(checkSystemResourceConfiguration(\"JDBCSystemResources\", \n+        \"TestDataSource\"), \"JDBCSystemResource not found\");\n+    logger.info(\"Found the JDBCSystemResource configuration\");\n+\n+    assertTrue(checkSystemResourceConfiguration(\"JMSSystemResources\", \n+        \"TestClusterJmsModule\"), \"JMSSystemResources not found\");\n+    logger.info(\"Found the JMSSystemResource configuration\");\n+\n+    assertTrue(checkSystemResourceConfiguration(\"WLDFSystemResources\", \n+        \"TestWldfModule\"), \"WLDFSystemResources not found\");\n+    logger.info(\"Found the WLDFSystemResource configuration\");\n+\n+    ExecResult result = null;\n+    result = checkJdbcRuntime(\"TestDataSource\");\n+    logger.info(\"checkJdbcRuntime: returned {0}\", result.toString());\n+    assertTrue(result.stdout().contains(\"jdbc:oracle:thin:localhost\"),\n+         String.format(\"DB URL does not match with RuntimeMBean Info\"));\n+    assertTrue(result.stdout().contains(\"scott\"),\n+         String.format(\"DB user name does not match with RuntimeMBean Info\"));\n+    logger.info(\"Found the JDBCSystemResource configuration\");\n+\n+  }\n+\n+  /**\n+   * Start a WebLogic domain using model-in-image with JMS/JDBC SystemResources.\n+   * Create a configmap to delete JMS/JDBC SystemResources.\n+   * Patch the domain resource with the configmap.\n+   * Update the restart version of the domain resource.\n+   * Verify rolling restart of the domain by comparing PodCreationTimestamp\n+   * for all the server pods before and after rolling restart.\n+   * Verify SystemResources are deleted from the domain.\n+   */\n+  @Test\n+  @Order(2)\n+  @DisplayName(\"Delete SystemResources from a model-in-image domain\")\n+  public void testMiiDeleteSystemResources() {\n+\n+    String configMapName = \"deletesysrescm\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.delete.sysresources.yaml\"));\n+\n+    LinkedHashMap<String, DateTime> pods = new LinkedHashMap<>();\n+    // get the creation time of the admin server pod before patching\n+    DateTime adminPodCreationTime = getPodCreationTime(domainNamespace,adminServerPodName);\n+    pods.put(adminServerPodName, adminPodCreationTime);\n+    // get the creation time of the managed server pods before patching\n+    for (int i = 1; i <= replicaCount; i++) {\n+      pods.put(managedServerPrefix + i, getPodCreationTime(domainNamespace, managedServerPrefix + i));\n+    }\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/configuration/model/configMap\\\",\")\n+        .append(\" \\\"value\\\":  \\\"\" + configMapName + \"\\\"\")\n+        .append(\" }]\");\n+    logger.log(Level.INFO, \"Configmap patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean cmPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(configMap)  failed \");\n+    assertTrue(cmPatched, \"patchDomainCustomResource(configMap) failed\");\n+\n+    String newRestartVersion = patchDomainResourceWithNewRestartVersion(domainUid, domainNamespace);\n+    logger.log(Level.INFO, \"New restart version is {0}\", newRestartVersion);\n+    \n+    assertTrue(assertDoesNotThrow(\n+        () -> (verifyRollingRestartOccurred(pods, 1, domainNamespace)),\n+         \"More than one pod was restarted at same time\"),\n+        \"Rolling restart failed\");\n+\n+    // Even if pods are created, need the service to created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+   \n+    assertFalse(checkSystemResourceConfiguration(\"JDBCSystemResources\", \n+         \"TestDataSource\"), \"JDBCSystemResource should be deleted\");\n+    assertFalse(checkSystemResourceConfiguration(\"JMSSystemResources\", \n+         \"TestClusterJmsModule\"), \"JMSSystemResources should be deleted\");\n+  }\n+\n+  /**\n+   * Start a WebLogic domain using model-in-image.\n+   * Create a configmap with sparse JDBC/JMS model files.\n+   * Patch the domain resource with the configmap.\n+   * Update the restart version of the domain resource.\n+   * Verify rolling restart of the domain by comparing PodCreationTimestamp\n+   * for all the server pods before and after rolling restart.\n+   * Verify SystemResource configurations using Rest API call to admin server.\n+   */\n+  @Test\n+  @Order(3)\n+  @DisplayName(\"Add New JDBC/JMS SystemResources to a model-in-image domain\")\n+  public void testMiiAddSystemResources() {\n+\n+    logger.info(\"Use same database secret created in befreAll() method\");\n+    String configMapName = \"dsjmsconfigmap\";\n+    createConfigMapAndVerify(\n+        configMapName, domainUid, domainNamespace,\n+        Arrays.asList(\"model.jdbc2.yaml\", \"model.jms2.yaml\"));\n+\n+    LinkedHashMap<String, DateTime> pods = new LinkedHashMap<>();\n+    // get the creation time of the admin server pod before patching\n+    DateTime adminPodCreationTime = getPodCreationTime(domainNamespace,adminServerPodName);\n+    pods.put(adminServerPodName, adminPodCreationTime);\n+    // get the creation time of the managed server pods before patching\n+    for (int i = 1; i <= replicaCount; i++) {\n+      pods.put(managedServerPrefix + i, getPodCreationTime(domainNamespace, managedServerPrefix + i));\n+    }\n+\n+    StringBuffer patchStr = null;\n+    patchStr = new StringBuffer(\"[{\");\n+    patchStr.append(\"\\\"op\\\": \\\"replace\\\",\")\n+        .append(\" \\\"path\\\": \\\"/spec/configuration/model/configMap\\\",\")\n+        .append(\" \\\"value\\\":  \\\"\" + configMapName + \"\\\"\")\n+        .append(\" }]\");\n+    logger.log(Level.INFO, \"Configmap patch string: {0}\", patchStr);\n+\n+    patch = new V1Patch(new String(patchStr));\n+    boolean cmPatched = assertDoesNotThrow(() ->\n+            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n+        \"patchDomainCustomResource(configMap)  failed \");\n+    assertTrue(cmPatched, \"patchDomainCustomResource(configMap) failed\");\n+\n+    String newRestartVersion = patchDomainResourceWithNewRestartVersion(domainUid, domainNamespace);\n+    logger.log(Level.INFO, \"New restart version is {0}\", newRestartVersion);\n+    \n+    assertTrue(assertDoesNotThrow(\n+        () -> (verifyRollingRestartOccurred(pods, 1, domainNamespace)),\n+         \"More than one pod was restarted at same time\"),\n+        \"Rolling restart failed\");\n+\n+    // Even if pods are created, need the service to created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Check managed server service {0} created in namespace {1}\",\n+          managedServerPrefix + i, domainNamespace);\n+      checkServiceExists(managedServerPrefix + i, domainNamespace);\n+    }\n+\n+    assertTrue(checkSystemResourceConfiguration(\"JDBCSystemResources\", \n+          \"TestDataSource2\"), \"JDBCSystemResource not found\");\n+    logger.info(\"Found the JDBCSystemResource configuration\");\n+\n+    assertTrue(checkSystemResourceConfiguration(\"JMSSystemResources\", \n+          \"TestClusterJmsModule2\"), \"JMSSystemResources not found\");\n+    logger.info(\"Found the JMSSystemResource configuration\");\n+  }\n+\n   /**\n    * Patch the domain resource with the configmap to add a cluster.\n-   * Update the restart version of the domain resource to 1.\n+   * Update the restart version of the domain resource.\n    * Verify rolling restart of the domain by comparing PodCreationTimestamp\n    * before and after rolling restart.\n-   * Verify servers from new cluster are not in running state, because i\n+   * Verify servers from new cluster are not in running state, because \n    * the spec level replica count to zero(default).\n    */\n   @Test\n-  @Order(1)\n-  @DisplayName(\"Add a cluster to model in image domain with default replica count\")\n-  @Slow\n-  @MustNotRunInParallel\n-  public void testAddMiiClusteriWithNoReplica() {\n+  @Order(4)\n+  @DisplayName(\"Add a dynamic cluster to a model-in-image domain with default repica count\")", "originalCommit": "6543606400e588367f5ab30ec61c44009890a0b0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b17a72592f1de7239a81da7393745704c0eae0b9", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\nindex 00379e3bdb..fb1547d183 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\n\n@@ -350,15 +350,15 @@ class ItMiiUpdateDomainConfig {\n   public void testMiiCheckSystemResources() {\n \n     assertTrue(checkSystemResourceConfiguration(\"JDBCSystemResources\", \n-        \"TestDataSource\"), \"JDBCSystemResource not found\");\n+        \"TestDataSource\", \"200\"), \"JDBCSystemResource not found\");\n     logger.info(\"Found the JDBCSystemResource configuration\");\n \n     assertTrue(checkSystemResourceConfiguration(\"JMSSystemResources\", \n-        \"TestClusterJmsModule\"), \"JMSSystemResources not found\");\n+        \"TestClusterJmsModule\", \"200\"), \"JMSSystemResources not found\");\n     logger.info(\"Found the JMSSystemResource configuration\");\n \n     assertTrue(checkSystemResourceConfiguration(\"WLDFSystemResources\", \n-        \"TestWldfModule\"), \"WLDFSystemResources not found\");\n+        \"TestWldfModule\", \"200\"), \"WLDFSystemResources not found\");\n     logger.info(\"Found the WLDFSystemResource configuration\");\n \n     ExecResult result = null;\n"}}, {"oid": "e1670d3d3fce79ee8ce6c2614197548cd38aca29", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e1670d3d3fce79ee8ce6c2614197548cd38aca29", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into consolidate-miidom", "committedDate": "2020-08-20T15:47:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIyNTMxMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r474225312", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *  Check the SystemResoureces in a pre-configured in ConfigMap\n          \n          \n            \n             *  Check the System Resources in a pre-configured ConfigMap", "author": "vanajamukkara", "createdAt": "2020-08-20T19:36:37Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -92,10 +101,39 @@\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+/**\n+ * This test class verifies the following scenerios\n+ *\n+ * <p>testMiiCheckSystemResources\n+ *  Check the SystemResoureces in a pre-configured in ConfigMap", "originalCommit": "e1670d3d3fce79ee8ce6c2614197548cd38aca29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIzNTA3OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r474235079", "bodyText": "done", "author": "anpanigr", "createdAt": "2020-08-20T19:50:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIyNTMxMg=="}], "type": "inlineReview", "revised_code": {"commit": "b17a72592f1de7239a81da7393745704c0eae0b9", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\nindex 00379e3bdb..fb1547d183 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\n\n@@ -105,13 +105,13 @@ import static org.junit.jupiter.api.Assertions.assertTrue;\n  * This test class verifies the following scenerios\n  *\n  * <p>testMiiCheckSystemResources\n- *  Check the SystemResoureces in a pre-configured in ConfigMap\n+ *  Check the System Resources in a pre-configured ConfigMap\n  *\n  * <p>testMiiDeleteSystemResources\n- *  Delete SystemResoureces defined in WebLogic domain \n+ *  Delete System Resources defined in a WebLogic domain \n  *\n  * <p>testMiiAddSystemResources\n- *  Add new SystemResources to a running domain\n+ *  Add new System Resources to a running WebLogic domain\n  *\n  * <p>testMiiAddDynmicClusteriWithNoReplica\n  *  Add a new dynamic WebLogic cluster to a running domain with default Replica\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIyNTY0Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r474225646", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *  Delete SystemResoureces defined in WebLogic domain \n          \n          \n            \n             *  Delete System Resources defined in WebLogic domain", "author": "vanajamukkara", "createdAt": "2020-08-20T19:36:57Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java", "diffHunk": "@@ -92,10 +101,39 @@\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+/**\n+ * This test class verifies the following scenerios\n+ *\n+ * <p>testMiiCheckSystemResources\n+ *  Check the SystemResoureces in a pre-configured in ConfigMap\n+ *\n+ * <p>testMiiDeleteSystemResources\n+ *  Delete SystemResoureces defined in WebLogic domain ", "originalCommit": "e1670d3d3fce79ee8ce6c2614197548cd38aca29", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIzNDgyNQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1875#discussion_r474234825", "bodyText": "done", "author": "anpanigr", "createdAt": "2020-08-20T19:50:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIyNTY0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "b17a72592f1de7239a81da7393745704c0eae0b9", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\nindex 00379e3bdb..fb1547d183 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiUpdateDomainConfig.java\n\n@@ -105,13 +105,13 @@ import static org.junit.jupiter.api.Assertions.assertTrue;\n  * This test class verifies the following scenerios\n  *\n  * <p>testMiiCheckSystemResources\n- *  Check the SystemResoureces in a pre-configured in ConfigMap\n+ *  Check the System Resources in a pre-configured ConfigMap\n  *\n  * <p>testMiiDeleteSystemResources\n- *  Delete SystemResoureces defined in WebLogic domain \n+ *  Delete System Resources defined in a WebLogic domain \n  *\n  * <p>testMiiAddSystemResources\n- *  Add new SystemResources to a running domain\n+ *  Add new System Resources to a running WebLogic domain\n  *\n  * <p>testMiiAddDynmicClusteriWithNoReplica\n  *  Add a new dynamic WebLogic cluster to a running domain with default Replica\n"}}, {"oid": "b17a72592f1de7239a81da7393745704c0eae0b9", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b17a72592f1de7239a81da7393745704c0eae0b9", "message": "Resolved few more typos", "committedDate": "2020-08-20T21:41:52Z", "type": "commit"}, {"oid": "6d6b0db9282927ccb40bf5dc1aca61d5b3d035f6", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/6d6b0db9282927ccb40bf5dc1aca61d5b3d035f6", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into consolidate-miidom", "committedDate": "2020-08-20T21:42:07Z", "type": "commit"}, {"oid": "63a37c28057e51eca685ba33b584519d9be71da6", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/63a37c28057e51eca685ba33b584519d9be71da6", "message": "Updated the initAll() with  installAndVerifyOperator replacing the old code", "committedDate": "2020-08-20T23:11:51Z", "type": "commit"}, {"oid": "c53c9538a82e716f1a28b59e55b71d0300db5dbd", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c53c9538a82e716f1a28b59e55b71d0300db5dbd", "message": "Modify the assetion for delete resources", "committedDate": "2020-08-21T00:31:22Z", "type": "commit"}]}