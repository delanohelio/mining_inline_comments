{"pr_number": 1514, "pr_title": "K8s client api initial impl for feedback on usage", "pr_createdAt": "2020-03-30T04:52:29Z", "pr_url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1514", "timeline": [{"oid": "6ef3b6dcbc7d2c0a6e022c1201fa0cf78753e812", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/6ef3b6dcbc7d2c0a6e022c1201fa0cf78753e812", "message": "K8s client api initial impl for feedback on usage", "committedDate": "2020-03-30T04:38:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0MTA0Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1514#discussion_r400141046", "bodyText": "let's use log not sop", "author": "markxnelson", "createdAt": "2020-03-30T12:10:48Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -32,7 +78,18 @@ public static List listDeployments() {\n     // --------------------------- namespaces -----------------------------------\n \n     public static boolean createNamespace(String name) {\n-        return true;\n+        V1ObjectMeta meta = new V1ObjectMeta();\n+        meta.name(name);\n+        V1Namespace namespace = new V1Namespace();\n+        namespace.metadata(meta);\n+        try {\n+            namespace = coreV1Api.createNamespace(namespace, pretty, null, null);\n+            System.out.println(\"Kubernetes.createNamespace namespace: \" + namespace);", "originalCommit": "6ef3b6dcbc7d2c0a6e022c1201fa0cf78753e812", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxNjU0NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1514#discussion_r400416545", "bodyText": "Changed to use logger.", "author": "lennyphan", "createdAt": "2020-03-30T18:49:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0MTA0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "114ad731cdf52aa31231b83b9474b06e680848fd", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java\nindex b0c25e974f..0efbf7dfb1 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java\n\n@@ -77,19 +78,19 @@ public class Kubernetes {\n \n     // --------------------------- namespaces -----------------------------------\n \n-    public static boolean createNamespace(String name) {\n-        V1ObjectMeta meta = new V1ObjectMeta();\n-        meta.name(name);\n-        V1Namespace namespace = new V1Namespace();\n-        namespace.metadata(meta);\n-        try {\n-            namespace = coreV1Api.createNamespace(namespace, pretty, null, null);\n-            System.out.println(\"Kubernetes.createNamespace namespace: \" + namespace);\n-            return true;\n-        } catch (ApiException e) {\n-            e.printStackTrace();\n-        }\n-        return false;\n+    public static boolean createNamespace(String name) throws ApiException {\n+        V1ObjectMeta meta = new V1ObjectMeta().name(name);\n+        V1Namespace namespace = new V1Namespace().metadata(meta);\n+\n+        namespace = coreV1Api.createNamespace(\n+                namespace, // name of the Namespace\n+                pretty, // pretty print output\n+                null, // indicates that modifications should not be persisted\n+                null // fieldManager is a name associated with the actor\n+                // or entity that is making these changes\n+        );\n+\n+        return true;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0MTMwOA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1514#discussion_r400141308", "bodyText": "probably a good idea to return the exception", "author": "markxnelson", "createdAt": "2020-03-30T12:11:16Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -32,7 +78,18 @@ public static List listDeployments() {\n     // --------------------------- namespaces -----------------------------------\n \n     public static boolean createNamespace(String name) {\n-        return true;\n+        V1ObjectMeta meta = new V1ObjectMeta();\n+        meta.name(name);\n+        V1Namespace namespace = new V1Namespace();\n+        namespace.metadata(meta);\n+        try {\n+            namespace = coreV1Api.createNamespace(namespace, pretty, null, null);\n+            System.out.println(\"Kubernetes.createNamespace namespace: \" + namespace);\n+            return true;\n+        } catch (ApiException e) {\n+            e.printStackTrace();", "originalCommit": "6ef3b6dcbc7d2c0a6e022c1201fa0cf78753e812", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMxOTIyMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1514#discussion_r400319222", "bodyText": "@markxnelson Should we catch Throwable throughout ?", "author": "tbarnes-us", "createdAt": "2020-03-30T16:16:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0MTMwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMyMzQwOA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1514#discussion_r400323408", "bodyText": "I prefer to catch the most specific object and handle it", "author": "markxnelson", "createdAt": "2020-03-30T16:22:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0MTMwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzMDA5Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1514#discussion_r400330096", "bodyText": "I realize that's SOP for system programming in Java to narrowly only check for the checked exceptions.  But I have two counter thoughts to this.  One, we're talking about testing here - so 'happy path' programming is far more acceptable.   Two, if there's an insistence not to catch Runtime/Throwable throughout, then there will be\ncases where an exception will float out of a library all the way up to the highest level.  But I thought the goal you set out was to prevent this from happening.  For example, there's a (sad IMO) school of thought these days that even normal paths can normally throw runtimes - even some JDBC drivers do that unfortunately - and we've no clue in a callout to external library what the hell it's going to throw...", "author": "tbarnes-us", "createdAt": "2020-03-30T16:32:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0MTMwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDMzMTM4Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1514#discussion_r400331383", "bodyText": "Even in system programming catch Throwable tends to be useful.  For calls to the 'outside' we've found we had to do that in WL in many places.  Calling customer code.  Calling shaky external libraries.", "author": "tbarnes-us", "createdAt": "2020-03-30T16:33:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0MTMwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM4ODg2Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1514#discussion_r400388866", "bodyText": "Hi Mark, can you clarify here?  I assume you want to just declare the exception in the throws clause and have it propagate up?   Just a little confusion on my part relative to the discussion about handling the types of exceptions.  Thanks for clarifying.", "author": "lennyphan", "createdAt": "2020-03-30T18:03:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0MTMwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM5MTE2NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1514#discussion_r400391164", "bodyText": "yeah, i am thinking about the test in the calling method where we say something like\nassert.DoesNotThrow(whatever(), ApiException.class, e,\n  String.format(\"could not do whatever, got exception %s\", e))\n\nso we have the exception and we can print out a meaningful error message", "author": "markxnelson", "createdAt": "2020-03-30T18:06:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0MTMwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxNjc5NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1514#discussion_r400416795", "bodyText": "Added throws clause to method signature.", "author": "lennyphan", "createdAt": "2020-03-30T18:49:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0MTMwOA=="}], "type": "inlineReview", "revised_code": {"commit": "114ad731cdf52aa31231b83b9474b06e680848fd", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java\nindex b0c25e974f..0efbf7dfb1 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java\n\n@@ -77,19 +78,19 @@ public class Kubernetes {\n \n     // --------------------------- namespaces -----------------------------------\n \n-    public static boolean createNamespace(String name) {\n-        V1ObjectMeta meta = new V1ObjectMeta();\n-        meta.name(name);\n-        V1Namespace namespace = new V1Namespace();\n-        namespace.metadata(meta);\n-        try {\n-            namespace = coreV1Api.createNamespace(namespace, pretty, null, null);\n-            System.out.println(\"Kubernetes.createNamespace namespace: \" + namespace);\n-            return true;\n-        } catch (ApiException e) {\n-            e.printStackTrace();\n-        }\n-        return false;\n+    public static boolean createNamespace(String name) throws ApiException {\n+        V1ObjectMeta meta = new V1ObjectMeta().name(name);\n+        V1Namespace namespace = new V1Namespace().metadata(meta);\n+\n+        namespace = coreV1Api.createNamespace(\n+                namespace, // name of the Namespace\n+                pretty, // pretty print output\n+                null, // indicates that modifications should not be persisted\n+                null // fieldManager is a name associated with the actor\n+                // or entity that is making these changes\n+        );\n+\n+        return true;\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0MjU3Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1514#discussion_r400142576", "bodyText": "nit pick - put each param on a new line - maybe put a comment after them to say what they are, since the six nulls seem a bit magical :)", "author": "markxnelson", "createdAt": "2020-03-30T12:13:30Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -54,4 +111,83 @@ public static String createUniqueNamespace() {\n         }\n     }\n \n+    public static List<String> listNamespaces() {\n+        ArrayList<String> nameSpaces = new ArrayList<>();\n+        try {\n+            V1NamespaceList namespaceList = coreV1Api.listNamespace(pretty, allowWatchBookmarks, null, null, null, null, resourceVersion, timeoutSeconds, false);\n+\n+            for (V1Namespace namespace : namespaceList.getItems()) {\n+                nameSpaces.add(namespace.getMetadata().getName());\n+            }\n+        } catch (ApiException e) {\n+            e.printStackTrace();\n+        }\n+\n+        return nameSpaces;\n+    }\n+\n+    public static boolean deleteNamespace(String name) {\n+        V1DeleteOptions deleteOptions = new V1DeleteOptions();\n+        try {\n+            V1Status status = coreV1Api.deleteNamespace(name, pretty, null, timeoutSeconds, false, \"Foreground\", deleteOptions);\n+            return true;\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+        return false;\n+    }\n+\n+    // --------------------------- Custom Resource Domain -----------------------------------\n+\n+    public static boolean createDomain(String domainUID, String namespace, String domainYAML) {\n+        final String localVarPath =\n+                DOMAIN_PATH.replaceAll(\"\\\\{namespace\\\\}\", apiClient.escapeString(namespace));\n+\n+        Object json = null;\n+        try {\n+            json = convertYamlToJson(domainYAML);\n+            Object response = customObjectsApi.createClusterCustomObject(DOMAIN_GROUP, DOMAIN_VERSION, localVarPath, json, null);\n+            return true;\n+        } catch (ApiException | IOException e) {\n+            e.printStackTrace();\n+        }\n+        return false;\n+    }\n+\n+    private static Object convertYamlToJson(String yamlFile) throws IOException {\n+        ObjectMapper yamlReader = new ObjectMapper(new YAMLFactory());\n+        Object yamlObj = yamlReader.readValue(new File(yamlFile), Object.class);\n+        System.out.println(\"Kubernetes.convertYamlToJson yaml: \" + yamlObj);\n+\n+        ObjectMapper jsonWriter = new ObjectMapper();\n+        String writeValueAsString = jsonWriter.writeValueAsString(yamlObj);\n+        System.out.println(\"Kubernetes.convertYamlToJson writeValueAsString: \" + writeValueAsString);\n+        JsonNode root = new ObjectMapper().readTree(writeValueAsString);\n+        return root;\n+    }\n+\n+    public static List<String> listDomains(String namespace) {\n+        ArrayList<String> domains = new ArrayList<>();\n+        try {\n+            Map response = (Map) customObjectsApi.listNamespacedCustomObject(DOMAIN_GROUP, DOMAIN_VERSION, namespace, DOMAIN_PLURAL, null,", "originalCommit": "6ef3b6dcbc7d2c0a6e022c1201fa0cf78753e812", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIzNjYxOQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1514#discussion_r400236619", "bodyText": "Yeah, it's too bad they don't have a builder for requests (I'll validate that this is still correct).", "author": "rjeberhard", "createdAt": "2020-03-30T14:28:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0MjU3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxNzE1Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1514#discussion_r400417157", "bodyText": "split params to individual lines and added comments to explain parameter meaning.", "author": "lennyphan", "createdAt": "2020-03-30T18:50:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0MjU3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "114ad731cdf52aa31231b83b9474b06e680848fd", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java\nindex b0c25e974f..0efbf7dfb1 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java\n\n@@ -111,71 +112,95 @@ public class Kubernetes {\n         }\n     }\n \n-    public static List<String> listNamespaces() {\n+    public static List<String> listNamespaces() throws ApiException {\n         ArrayList<String> nameSpaces = new ArrayList<>();\n-        try {\n-            V1NamespaceList namespaceList = coreV1Api.listNamespace(pretty, allowWatchBookmarks, null, null, null, null, resourceVersion, timeoutSeconds, false);\n \n-            for (V1Namespace namespace : namespaceList.getItems()) {\n-                nameSpaces.add(namespace.getMetadata().getName());\n-            }\n-        } catch (ApiException e) {\n-            e.printStackTrace();\n+        V1NamespaceList namespaceList = coreV1Api.listNamespace(\n+                pretty, // pretty print output\n+                allowWatchBookmarks, // allowWatchBookmarks requests watch events with type \"BOOKMARK\"\n+                null, // set when retrieving more results from the server\n+                null, // selector to restrict the list of returned objects by their fields\n+                null, // selector to restrict the list of returned objects by their labels\n+                null, // maximum number of responses to return for a list call\n+                resourceVersion, // shows changes that occur after that particular version of a resource\n+                timeoutSeconds, // Timeout for the list/watch call\n+                false // Watch for changes to the described resources\n+        );\n+\n+        for (V1Namespace namespace : namespaceList.getItems()) {\n+            nameSpaces.add(namespace.getMetadata().getName());\n         }\n \n         return nameSpaces;\n     }\n \n-    public static boolean deleteNamespace(String name) {\n+    public static boolean deleteNamespace(String name) throws ApiException {\n         V1DeleteOptions deleteOptions = new V1DeleteOptions();\n-        try {\n-            V1Status status = coreV1Api.deleteNamespace(name, pretty, null, timeoutSeconds, false, \"Foreground\", deleteOptions);\n-            return true;\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-        return false;\n+\n+        V1Status status = coreV1Api.deleteNamespace(\n+                name, // name of the Namespace\n+                pretty, // pretty print output\n+                null, // indicates that modifications should not be persisted\n+                0, // duration in seconds before the object should be deleted\n+                false, // Should the dependent objects be orphaned\n+                \"Foreground\", // Whether and how garbage collection will be performed\n+                deleteOptions\n+        );\n+        return true;\n+\n     }\n \n     // --------------------------- Custom Resource Domain -----------------------------------\n \n-    public static boolean createDomain(String domainUID, String namespace, String domainYAML) {\n+    public static boolean createDomain(String domainUID, String namespace, String domainYAML) throws IOException, ApiException {\n         final String localVarPath =\n                 DOMAIN_PATH.replaceAll(\"\\\\{namespace\\\\}\", apiClient.escapeString(namespace));\n \n         Object json = null;\n-        try {\n-            json = convertYamlToJson(domainYAML);\n-            Object response = customObjectsApi.createClusterCustomObject(DOMAIN_GROUP, DOMAIN_VERSION, localVarPath, json, null);\n-            return true;\n-        } catch (ApiException | IOException e) {\n-            e.printStackTrace();\n-        }\n-        return false;\n+\n+        json = convertYamlToJson(domainYAML);\n+        Object response = customObjectsApi.createNamespacedCustomObject(\n+                DOMAIN_GROUP, // custom resource's group name\n+                DOMAIN_VERSION, // //custom resource's version\n+                namespace, // custom resource's namespace\n+                localVarPath, // custom resource's plural name\n+                json, // JSON schema of the Resource to create\n+                null // pretty print output\n+        );\n+        return true;\n+\n     }\n \n     private static Object convertYamlToJson(String yamlFile) throws IOException {\n         ObjectMapper yamlReader = new ObjectMapper(new YAMLFactory());\n         Object yamlObj = yamlReader.readValue(new File(yamlFile), Object.class);\n-        System.out.println(\"Kubernetes.convertYamlToJson yaml: \" + yamlObj);\n+        logger.info(\"Kubernetes.convertYamlToJson yaml: \" + yamlObj);\n \n         ObjectMapper jsonWriter = new ObjectMapper();\n         String writeValueAsString = jsonWriter.writeValueAsString(yamlObj);\n-        System.out.println(\"Kubernetes.convertYamlToJson writeValueAsString: \" + writeValueAsString);\n+        logger.info(\"Kubernetes.convertYamlToJson writeValueAsString: \" + writeValueAsString);\n         JsonNode root = new ObjectMapper().readTree(writeValueAsString);\n         return root;\n     }\n \n-    public static List<String> listDomains(String namespace) {\n+    public static List<String> listDomains(String namespace) throws ApiException {\n         ArrayList<String> domains = new ArrayList<>();\n-        try {\n-            Map response = (Map) customObjectsApi.listNamespacedCustomObject(DOMAIN_GROUP, DOMAIN_VERSION, namespace, DOMAIN_PLURAL, null,\n-                    null, null, null,null, null, timeoutSeconds,\n-                    false);\n-            domains = getDomainNames(namespace, domains, response);\n-        } catch (ApiException e) {\n-            e.printStackTrace();\n-        }\n+\n+        Map response = (Map) customObjectsApi.listNamespacedCustomObject(\n+                DOMAIN_GROUP, // custom resource's group name\n+                DOMAIN_VERSION, //custom resource's version\n+                namespace, // custom resource's namespace\n+                DOMAIN_PLURAL, // custom resource's plural name\n+                null, // pretty print output\n+                null, // set when retrieving more results from the server\n+                null, // selector to restrict the list of returned objects by their fields\n+                null, // selector to restrict the list of returned objects by their labels\n+                null, // maximum number of responses to return for a list call\n+                null, // shows changes that occur after that particular version of a resource\n+                timeoutSeconds, // Timeout for the list/watch call\n+                false // Watch for changes to the described resources\n+        );\n+        domains = getDomainNames(namespace, domains, response);\n \n         return domains;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyMjAyMA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1514#discussion_r400222020", "bodyText": "Why did this get changed? The (c) is part of the check-style.", "author": "ddsharpe", "createdAt": "2020-03-30T14:10:25Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Namespace.java", "diffHunk": "@@ -1,10 +1,12 @@\n-// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Copyright 2020, Oracle Corporation and/or its affiliates.", "originalCommit": "6ef3b6dcbc7d2c0a6e022c1201fa0cf78753e812", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIzOTIyNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1514#discussion_r400239226", "bodyText": "Ah, Thanks.  this is a copy over issue.  I created a different branch for the PR and pulled over my modified file that has an older copyright. Thanks.", "author": "lennyphan", "createdAt": "2020-03-30T14:32:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyMjAyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxNzQzNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1514#discussion_r400417437", "bodyText": "Corrected copyright.", "author": "lennyphan", "createdAt": "2020-03-30T18:50:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyMjAyMA=="}], "type": "inlineReview", "revised_code": {"commit": "114ad731cdf52aa31231b83b9474b06e680848fd", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Namespace.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Namespace.java\nindex be94b880b1..5e98dd31ec 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Namespace.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Namespace.java\n\n@@ -1,27 +1,28 @@\n-// Copyright 2020, Oracle Corporation and/or its affiliates.\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n // Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n \n package oracle.weblogic.kubernetes.actions.impl;\n \n+import io.kubernetes.client.openapi.ApiException;\n import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n \n import java.util.List;\n \n public class Namespace {\n \n-    public static String createUniqueNamespace() {\n+    public static String createUniqueNamespace() throws ApiException {\n         return Kubernetes.createUniqueNamespace();\n     }\n \n-    public static boolean createNamespace(String name) {\n+    public static boolean createNamespace(String name) throws ApiException {\n         return Kubernetes.createNamespace(name);\n     }\n \n-    public static List<String> listNamespaces() {\n+    public static List<String> listNamespaces() throws ApiException {\n         return Kubernetes.listNamespaces();\n     }\n \n-    public static boolean deleteNamespace(String name) {\n+    public static boolean deleteNamespace(String name) throws ApiException {\n         return Kubernetes.deleteNamespace(name);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyMjIxMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1514#discussion_r400222212", "bodyText": "same issue, (c)", "author": "ddsharpe", "createdAt": "2020-03-30T14:10:38Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -1,10 +1,29 @@\n-// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Copyright 2020, Oracle Corporation and/or its affiliates.", "originalCommit": "6ef3b6dcbc7d2c0a6e022c1201fa0cf78753e812", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "114ad731cdf52aa31231b83b9474b06e680848fd", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java\nindex b0c25e974f..0efbf7dfb1 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java\n\n@@ -1,4 +1,4 @@\n-// Copyright 2020, Oracle Corporation and/or its affiliates.\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n // Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n \n package oracle.weblogic.kubernetes.actions.impl.primitive;\n"}}, {"oid": "114ad731cdf52aa31231b83b9474b06e680848fd", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/114ad731cdf52aa31231b83b9474b06e680848fd", "message": "Changes based on initial feedback", "committedDate": "2020-03-30T18:41:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxNTYxNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1514#discussion_r400415617", "bodyText": "For the moment, updated the test to surround with try-catch until we learn how to handle exceptions with JUnit 5 assertions, as noted from Mark.", "author": "lennyphan", "createdAt": "2020-03-30T18:47:39Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleDomainValidation.java", "diffHunk": "@@ -30,8 +32,19 @@ public void testCreatingDomain() {\n         String domainYAML= \"something\";\n \n         // get a new unique namespace\n-        String namespace = createUniqueNamespace();\n-        logger.info(String.format(\"Got a new namespace called %s\", namespace));\n+        String namespace = null;\n+        try {\n+            namespace = createUniqueNamespace();\n+            logger.info(String.format(\"Got a new namespace called %s\", namespace));\n+        } catch (ApiException e) {\n+            // TODO: test in the calling method where we say something like\n+            //\n+            //  assert.DoesNotThrow(whatever(), ApiException.class, e,\n+            //    String.format(\"could not do whatever, got exception %s\", e))\n+            //\n+            //  so we have the exception and we can print out a meaningful error message\n+        }\n+", "originalCommit": "114ad731cdf52aa31231b83b9474b06e680848fd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "156ccdc41fc96aed5e0fec1d9665b5c034a45fc1", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleDomainValidation.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleDomainValidation.java\nindex b3b53be1b6..f7e94b80e0 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleDomainValidation.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleDomainValidation.java\n\n@@ -23,59 +23,59 @@ import static org.junit.jupiter.api.Assertions.assertTrue;\n @IntegrationTest\n class ItSimpleDomainValidation implements LoggedTest {\n \n-    @Test\n-    @DisplayName(\"Create a domain\")\n-    @Slow\n-    public void testCreatingDomain() {\n+  @Test\n+  @DisplayName(\"Create a domain\")\n+  @Slow\n+  public void testCreatingDomain() {\n \n-        String domainUID = \"domain1\";\n-        String domainYAML= \"something\";\n+    String domainUID = \"domain1\";\n+    String domainYAML = \"something\";\n \n-        // get a new unique namespace\n-        String namespace = null;\n-        try {\n-            namespace = createUniqueNamespace();\n-            logger.info(String.format(\"Got a new namespace called %s\", namespace));\n-        } catch (ApiException e) {\n-            // TODO: test in the calling method where we say something like\n-            //\n-            //  assert.DoesNotThrow(whatever(), ApiException.class, e,\n-            //    String.format(\"could not do whatever, got exception %s\", e))\n-            //\n-            //  so we have the exception and we can print out a meaningful error message\n-        }\n-\n-\n-        // create the domain CR\n-        boolean success = createDomainCustomResource(domainUID, namespace, domainYAML);\n-        assertTrue(success);\n+    // get a new unique namespace\n+    String namespace = null;\n+    try {\n+      namespace = createUniqueNamespace();\n+      logger.info(String.format(\"Got a new namespace called %s\", namespace));\n+    } catch (ApiException e) {\n+      // TODO: test in the calling method where we say something like\n+      //\n+      //  assert.DoesNotThrow(whatever(), ApiException.class, e,\n+      //    String.format(\"could not do whatever, got exception %s\", e))\n+      //\n+      //  so we have the exception and we can print out a meaningful error message\n+    }\n \n-        // wait for the domain to exist\n-        with().pollDelay(30, SECONDS)\n-                .and().with().pollInterval(10, SECONDS)\n-                .conditionEvaluationListener(\n-                        condition -> logger.info(() -> String.format(\"Waiting for domain to be running (elapsed time %dms, remaining time %dms)\",\n-                                condition.getElapsedTimeInMS(),\n-                                condition.getRemainingTimeInMS())))\n-                // and here we can set the maximum time we are prepared to wait\n-                .await().atMost(5, MINUTES)\n-                // operatorIsRunning() is one of our custom, reusable assertions\n-                .until(domainExists(domainUID, namespace));\n+    // create the domain CR\n+    boolean success = createDomainCustomResource(domainUID, namespace, domainYAML);\n+    assertTrue(success);\n \n-        // wait for the admin server pod to exist\n+    // wait for the domain to exist\n+    with().pollDelay(30, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .conditionEvaluationListener(\n+            condition -> logger.info(() ->\n+                String.format(\"Waiting for domain to be running (elapsed time %dms, remaining time %dms)\",\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS())))\n+        // and here we can set the maximum time we are prepared to wait\n+        .await().atMost(5, MINUTES)\n+        // operatorIsRunning() is one of our custom, reusable assertions\n+        .until(domainExists(domainUID, namespace));\n \n-        // wait for the managed servers to exist\n+    // wait for the admin server pod to exist\n \n-        // Delete namespace\n-        try {\n-            deleteNamespace(namespace);\n-            logger.info(\"Deleted namespace: \" + namespace);\n-        } catch (Exception e) {\n-            // TODO: Fix as there is a known bug that delete can return either the object\n-            //  just deleted or a status.  We can workaround by either retrying or using\n-            //  the general GenericKubernetesApi client class and doing our own type checks\n-        }\n+    // wait for the managed servers to exist\n \n+    // Delete namespace\n+    try {\n+      deleteNamespace(namespace);\n+      logger.info(\"Deleted namespace: \" + namespace);\n+    } catch (Exception e) {\n+      // TODO: Fix as there is a known bug that delete can return either the object\n+      //  just deleted or a status.  We can workaround by either retrying or using\n+      //  the general GenericKubernetesApi client class and doing our own type checks\n     }\n \n+  }\n+\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxNTgyNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1514#discussion_r400415826", "bodyText": "Same as above comment.", "author": "lennyphan", "createdAt": "2020-03-30T18:48:00Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleDomainValidation.java", "diffHunk": "@@ -53,6 +66,16 @@ public void testCreatingDomain() {\n \n         // wait for the managed servers to exist\n \n+        // Delete namespace\n+        try {\n+            deleteNamespace(namespace);\n+            logger.info(\"Deleted namespace: \" + namespace);\n+        } catch (Exception e) {\n+            // TODO: Fix as there is a known bug that delete can return either the object\n+            //  just deleted or a status.  We can workaround by either retrying or using\n+            //  the general GenericKubernetesApi client class and doing our own type checks\n+        }\n+", "originalCommit": "114ad731cdf52aa31231b83b9474b06e680848fd", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "156ccdc41fc96aed5e0fec1d9665b5c034a45fc1", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleDomainValidation.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleDomainValidation.java\nindex b3b53be1b6..f7e94b80e0 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleDomainValidation.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleDomainValidation.java\n\n@@ -23,59 +23,59 @@ import static org.junit.jupiter.api.Assertions.assertTrue;\n @IntegrationTest\n class ItSimpleDomainValidation implements LoggedTest {\n \n-    @Test\n-    @DisplayName(\"Create a domain\")\n-    @Slow\n-    public void testCreatingDomain() {\n+  @Test\n+  @DisplayName(\"Create a domain\")\n+  @Slow\n+  public void testCreatingDomain() {\n \n-        String domainUID = \"domain1\";\n-        String domainYAML= \"something\";\n+    String domainUID = \"domain1\";\n+    String domainYAML = \"something\";\n \n-        // get a new unique namespace\n-        String namespace = null;\n-        try {\n-            namespace = createUniqueNamespace();\n-            logger.info(String.format(\"Got a new namespace called %s\", namespace));\n-        } catch (ApiException e) {\n-            // TODO: test in the calling method where we say something like\n-            //\n-            //  assert.DoesNotThrow(whatever(), ApiException.class, e,\n-            //    String.format(\"could not do whatever, got exception %s\", e))\n-            //\n-            //  so we have the exception and we can print out a meaningful error message\n-        }\n-\n-\n-        // create the domain CR\n-        boolean success = createDomainCustomResource(domainUID, namespace, domainYAML);\n-        assertTrue(success);\n+    // get a new unique namespace\n+    String namespace = null;\n+    try {\n+      namespace = createUniqueNamespace();\n+      logger.info(String.format(\"Got a new namespace called %s\", namespace));\n+    } catch (ApiException e) {\n+      // TODO: test in the calling method where we say something like\n+      //\n+      //  assert.DoesNotThrow(whatever(), ApiException.class, e,\n+      //    String.format(\"could not do whatever, got exception %s\", e))\n+      //\n+      //  so we have the exception and we can print out a meaningful error message\n+    }\n \n-        // wait for the domain to exist\n-        with().pollDelay(30, SECONDS)\n-                .and().with().pollInterval(10, SECONDS)\n-                .conditionEvaluationListener(\n-                        condition -> logger.info(() -> String.format(\"Waiting for domain to be running (elapsed time %dms, remaining time %dms)\",\n-                                condition.getElapsedTimeInMS(),\n-                                condition.getRemainingTimeInMS())))\n-                // and here we can set the maximum time we are prepared to wait\n-                .await().atMost(5, MINUTES)\n-                // operatorIsRunning() is one of our custom, reusable assertions\n-                .until(domainExists(domainUID, namespace));\n+    // create the domain CR\n+    boolean success = createDomainCustomResource(domainUID, namespace, domainYAML);\n+    assertTrue(success);\n \n-        // wait for the admin server pod to exist\n+    // wait for the domain to exist\n+    with().pollDelay(30, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .conditionEvaluationListener(\n+            condition -> logger.info(() ->\n+                String.format(\"Waiting for domain to be running (elapsed time %dms, remaining time %dms)\",\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS())))\n+        // and here we can set the maximum time we are prepared to wait\n+        .await().atMost(5, MINUTES)\n+        // operatorIsRunning() is one of our custom, reusable assertions\n+        .until(domainExists(domainUID, namespace));\n \n-        // wait for the managed servers to exist\n+    // wait for the admin server pod to exist\n \n-        // Delete namespace\n-        try {\n-            deleteNamespace(namespace);\n-            logger.info(\"Deleted namespace: \" + namespace);\n-        } catch (Exception e) {\n-            // TODO: Fix as there is a known bug that delete can return either the object\n-            //  just deleted or a status.  We can workaround by either retrying or using\n-            //  the general GenericKubernetesApi client class and doing our own type checks\n-        }\n+    // wait for the managed servers to exist\n \n+    // Delete namespace\n+    try {\n+      deleteNamespace(namespace);\n+      logger.info(\"Deleted namespace: \" + namespace);\n+    } catch (Exception e) {\n+      // TODO: Fix as there is a known bug that delete can return either the object\n+      //  just deleted or a status.  We can workaround by either retrying or using\n+      //  the general GenericKubernetesApi client class and doing our own type checks\n     }\n \n+  }\n+\n }\n"}}, {"oid": "124cf5c9f139e0680749f68af5deff55ae3aefc6", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/124cf5c9f139e0680749f68af5deff55ae3aefc6", "message": "Merged and resolved updates from mii-new-integration-tests branch", "committedDate": "2020-03-30T20:11:51Z", "type": "commit"}, {"oid": "261f4daddb558f3fef9478e3d36cbf7a65032a69", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/261f4daddb558f3fef9478e3d36cbf7a65032a69", "message": "implement delete PV/PVC, secrets, and config maps", "committedDate": "2020-03-30T23:20:19Z", "type": "commit"}, {"oid": "156ccdc41fc96aed5e0fec1d9665b5c034a45fc1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/156ccdc41fc96aed5e0fec1d9665b5c034a45fc1", "message": "merge checkstyle changes", "committedDate": "2020-03-31T01:11:02Z", "type": "commit"}, {"oid": "0ae760f6236bbdc75f094d47dfe02c54b7344c43", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0ae760f6236bbdc75f094d47dfe02c54b7344c43", "message": "create/delete domain custom resource", "committedDate": "2020-03-31T04:56:01Z", "type": "commit"}, {"oid": "c54f018d21eee330007eec8ac61f367fb0b9559e", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c54f018d21eee330007eec8ac61f367fb0b9559e", "message": "Updated javadoc", "committedDate": "2020-03-31T05:54:55Z", "type": "commit"}, {"oid": "43cf0a83f7d9bf8feb8f56448e0fb18ce74eb5d0", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/43cf0a83f7d9bf8feb8f56448e0fb18ce74eb5d0", "message": "Use Assertions.assertDoesNotThrow() instead of try-catch", "committedDate": "2020-03-31T12:56:17Z", "type": "commit"}, {"oid": "bb5f01514045cf20ebf170c8918576566849a672", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/bb5f01514045cf20ebf170c8918576566849a672", "message": "Use Assertions.assertDoesNotThrow()", "committedDate": "2020-03-31T13:04:41Z", "type": "commit"}]}