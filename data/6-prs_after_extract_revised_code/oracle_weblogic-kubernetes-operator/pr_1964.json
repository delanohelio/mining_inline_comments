{"pr_number": 1964, "pr_title": "Add Tests for DataHome Override in Domain Custom Resource", "pr_createdAt": "2020-10-01T17:36:43Z", "pr_url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1964", "timeline": [{"oid": "56bdfdd10c16c2cb81d14bafeb6b177ead15ab15", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/56bdfdd10c16c2cb81d14bafeb6b177ead15ab15", "message": "add tests for dataHome override", "committedDate": "2020-09-30T19:22:14Z", "type": "commit"}, {"oid": "87bbd9d5da8d9afa14685e14717c9b5934479a6c", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/87bbd9d5da8d9afa14685e14717c9b5934479a6c", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into xc-owls75000", "committedDate": "2020-09-30T19:22:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwMjEzNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1964#discussion_r498502134", "bodyText": "Move the description to javadoc section for the test method", "author": "anpanigr", "createdAt": "2020-10-01T20:42:36Z", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItParameterizedDomain.java", "diffHunk": "@@ -444,6 +450,172 @@ public void testLivenessProbe() {\n         .isTrue();\n   }\n \n+  @Test\n+  @DisplayName(\"Test dataHome override in a domain with domain in image type\")\n+  public void testDataHomeOverrideDomainInImage() {", "originalCommit": "87bbd9d5da8d9afa14685e14717c9b5934479a6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4MTMzNQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1964#discussion_r498981335", "bodyText": "fixed", "author": "xiancao", "createdAt": "2020-10-02T18:22:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwMjEzNA=="}], "type": "inlineReview", "revised_code": {"commit": "a7bfe4d66934ed46a02b889bb4d305e2f529c8c7", "chunk": "diff --git a/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItParameterizedDomain.java b/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItParameterizedDomain.java\nindex 7bca0a3daa..690fa0478a 100644\n--- a/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItParameterizedDomain.java\n+++ b/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItParameterizedDomain.java\n\n@@ -450,15 +440,18 @@ class ItParameterizedDomain {\n         .isTrue();\n   }\n \n+  /**\n+   * Verify dataHome override in a domain with domain in image type.\n+   * In this domain, set dataHome to /u01/oracle/mydata in domain custom resource\n+   * The domain contains JMS and File Store configuration\n+   * File store directory is set to /u01/oracle/customFileStore in the model file which should be overridden by dataHome\n+   * File store and JMS server are targeted to the WebLogic cluster cluster-1\n+   * see resource/wdt-models/wdt-singlecluster-multiapps-usingprop-wls.yaml\n+   */\n   @Test\n   @DisplayName(\"Test dataHome override in a domain with domain in image type\")\n   public void testDataHomeOverrideDomainInImage() {\n-    // in this domain, set dataHome to /u01/oracle/mydata in domain custom resource\n-    // the domain contains JMS and File Store configuration\n-    // File store directory is set to /u01/oracle/customFileStore/ in the model file which should be overridden\n-    // by dataHome\n-    // File store and JMS server are target to cluster-1\n-    // see resource/wdt-models/wdt-singlecluster-multiapps-usingprop-wls.yaml\n+\n     assertDomainNotNull(domainInImage);\n     String domainUid = domainInImage.getSpec().getDomainUid();\n     String domainNamespace = domainInImage.getMetadata().getNamespace();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwMjc1OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1964#discussion_r498502759", "bodyText": "File store and JMS server are targeted to the WebLogic cluster cluster-1", "author": "anpanigr", "createdAt": "2020-10-01T20:44:03Z", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItParameterizedDomain.java", "diffHunk": "@@ -444,6 +450,172 @@ public void testLivenessProbe() {\n         .isTrue();\n   }\n \n+  @Test\n+  @DisplayName(\"Test dataHome override in a domain with domain in image type\")\n+  public void testDataHomeOverrideDomainInImage() {\n+    // in this domain, set dataHome to /u01/oracle/mydata in domain custom resource\n+    // the domain contains JMS and File Store configuration\n+    // File store directory is set to /u01/oracle/customFileStore/ in the model file which should be overridden\n+    // by dataHome\n+    // File store and JMS server are target to cluster-1", "originalCommit": "87bbd9d5da8d9afa14685e14717c9b5934479a6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4MTM5NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1964#discussion_r498981395", "bodyText": "fixed", "author": "xiancao", "createdAt": "2020-10-02T18:22:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwMjc1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "a7bfe4d66934ed46a02b889bb4d305e2f529c8c7", "chunk": "diff --git a/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItParameterizedDomain.java b/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItParameterizedDomain.java\nindex 7bca0a3daa..690fa0478a 100644\n--- a/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItParameterizedDomain.java\n+++ b/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItParameterizedDomain.java\n\n@@ -450,15 +440,18 @@ class ItParameterizedDomain {\n         .isTrue();\n   }\n \n+  /**\n+   * Verify dataHome override in a domain with domain in image type.\n+   * In this domain, set dataHome to /u01/oracle/mydata in domain custom resource\n+   * The domain contains JMS and File Store configuration\n+   * File store directory is set to /u01/oracle/customFileStore in the model file which should be overridden by dataHome\n+   * File store and JMS server are targeted to the WebLogic cluster cluster-1\n+   * see resource/wdt-models/wdt-singlecluster-multiapps-usingprop-wls.yaml\n+   */\n   @Test\n   @DisplayName(\"Test dataHome override in a domain with domain in image type\")\n   public void testDataHomeOverrideDomainInImage() {\n-    // in this domain, set dataHome to /u01/oracle/mydata in domain custom resource\n-    // the domain contains JMS and File Store configuration\n-    // File store directory is set to /u01/oracle/customFileStore/ in the model file which should be overridden\n-    // by dataHome\n-    // File store and JMS server are target to cluster-1\n-    // see resource/wdt-models/wdt-singlecluster-multiapps-usingprop-wls.yaml\n+\n     assertDomainNotNull(domainInImage);\n     String domainUid = domainInImage.getSpec().getDomainUid();\n     String domainNamespace = domainInImage.getMetadata().getNamespace();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwNDk3NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1964#discussion_r498504974", "bodyText": "Move description to javadoc section\nProvide a complete sentence  [ in this domain, dataHome is not specified ]\ne.g. Create a Domain Resource with defined dataHome.", "author": "anpanigr", "createdAt": "2020-10-01T20:48:46Z", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItParameterizedDomain.java", "diffHunk": "@@ -444,6 +450,172 @@ public void testLivenessProbe() {\n         .isTrue();\n   }\n \n+  @Test\n+  @DisplayName(\"Test dataHome override in a domain with domain in image type\")\n+  public void testDataHomeOverrideDomainInImage() {\n+    // in this domain, set dataHome to /u01/oracle/mydata in domain custom resource\n+    // the domain contains JMS and File Store configuration\n+    // File store directory is set to /u01/oracle/customFileStore/ in the model file which should be overridden\n+    // by dataHome\n+    // File store and JMS server are target to cluster-1\n+    // see resource/wdt-models/wdt-singlecluster-multiapps-usingprop-wls.yaml\n+    assertDomainNotNull(domainInImage);\n+    String domainUid = domainInImage.getSpec().getDomainUid();\n+    String domainNamespace = domainInImage.getMetadata().getNamespace();\n+\n+    // check in admin server pod, there is no data file for JMS server created\n+    String dataFileToCheck = DATA_HOME_OVERRIDE + \"/\" + domainUid + \"/FILESTORE-0000000.DAT\";\n+    String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+    assertFalse(assertDoesNotThrow(\n+        () -> doesFileExistInPod(domainNamespace, adminServerPodName, dataFileToCheck),\n+        String.format(\"exception thrown when checking file %s exists in pod %s in namespace %s\",\n+            dataFileToCheck, adminServerPodName, domainNamespace)),\n+        String.format(\"%s exists in pod %s in namespace %s, expects not exist\",\n+            dataFileToCheck, adminServerPodName, domainNamespace));\n+\n+    // check in admin server pod, the default admin server data file moved to DATA_HOME_OVERRIDE\n+    String defaultAdminDataFile = DATA_HOME_OVERRIDE + \"/\" + domainUid + \"/_WLS_ADMIN-SERVER000000.DAT\";\n+    assertTrue(assertDoesNotThrow(() ->\n+        doesFileExistInPod(domainNamespace, adminServerPodName, defaultAdminDataFile),\n+        String.format(\"exception thrown when checking file %s exists in pod %s in namespace %s\",\n+            dataFileToCheck, adminServerPodName, domainNamespace)),\n+        String.format(\"can not find file %s in pod %s in namespace %s\",\n+            defaultAdminDataFile, adminServerPodName, domainNamespace));\n+\n+    // check in managed server pod, the custom data file for JMS and default managed server datafile are created\n+    // in DATA_HOME_OVERRIDE\n+    for (int i = 1; i <= replicaCount; i++) {\n+      String managedServerPodName = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE + i;\n+      String customDataFile = DATA_HOME_OVERRIDE + \"/\" + domainUid + \"/FILESTORE-0@MANAGED-SERVER\" + i + \"000000.DAT\";\n+      assertTrue(assertDoesNotThrow(() ->\n+              doesFileExistInPod(domainNamespace, managedServerPodName, customDataFile),\n+          String.format(\"exception thrown when checking file %s exists in pod %s in namespace %s\",\n+              customDataFile, managedServerPodName, domainNamespace)),\n+          String.format(\"can not find file %s in pod %s in namespace %s\",\n+              customDataFile, managedServerPodName, domainNamespace));\n+\n+      String defaultMSDataFile = DATA_HOME_OVERRIDE + \"/\" + domainUid + \"/_WLS_MANAGED-SERVER\" + i + \"000000.DAT\";\n+      assertTrue(assertDoesNotThrow(() ->\n+              doesFileExistInPod(domainNamespace, managedServerPodName, defaultMSDataFile),\n+          String.format(\"exception thrown when checking file %s exists in pod %s in namespace %s\",\n+              defaultMSDataFile, managedServerPodName, domainNamespace)),\n+          String.format(\"can not find file %s in pod %s in namespace %s\",\n+              defaultMSDataFile, managedServerPodName, domainNamespace));\n+    }\n+  }\n+\n+  @Test\n+  @DisplayName(\"Test dataHome override in a domain with model in image type\")\n+  public void testDataHomeOverrideMiiDomain() {\n+    // in this domain, dataHome is not specified", "originalCommit": "87bbd9d5da8d9afa14685e14717c9b5934479a6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4MTQ1NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1964#discussion_r498981454", "bodyText": "fixed", "author": "xiancao", "createdAt": "2020-10-02T18:22:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwNDk3NA=="}], "type": "inlineReview", "revised_code": {"commit": "a7bfe4d66934ed46a02b889bb4d305e2f529c8c7", "chunk": "diff --git a/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItParameterizedDomain.java b/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItParameterizedDomain.java\nindex 7bca0a3daa..690fa0478a 100644\n--- a/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItParameterizedDomain.java\n+++ b/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItParameterizedDomain.java\n\n@@ -450,15 +440,18 @@ class ItParameterizedDomain {\n         .isTrue();\n   }\n \n+  /**\n+   * Verify dataHome override in a domain with domain in image type.\n+   * In this domain, set dataHome to /u01/oracle/mydata in domain custom resource\n+   * The domain contains JMS and File Store configuration\n+   * File store directory is set to /u01/oracle/customFileStore in the model file which should be overridden by dataHome\n+   * File store and JMS server are targeted to the WebLogic cluster cluster-1\n+   * see resource/wdt-models/wdt-singlecluster-multiapps-usingprop-wls.yaml\n+   */\n   @Test\n   @DisplayName(\"Test dataHome override in a domain with domain in image type\")\n   public void testDataHomeOverrideDomainInImage() {\n-    // in this domain, set dataHome to /u01/oracle/mydata in domain custom resource\n-    // the domain contains JMS and File Store configuration\n-    // File store directory is set to /u01/oracle/customFileStore/ in the model file which should be overridden\n-    // by dataHome\n-    // File store and JMS server are target to cluster-1\n-    // see resource/wdt-models/wdt-singlecluster-multiapps-usingprop-wls.yaml\n+\n     assertDomainNotNull(domainInImage);\n     String domainUid = domainInImage.getSpec().getDomainUid();\n     String domainNamespace = domainInImage.getMetadata().getNamespace();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwNTQxOA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1964#discussion_r498505418", "bodyText": "File store and JMS server are targeted to the admin server", "author": "anpanigr", "createdAt": "2020-10-01T20:49:43Z", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItParameterizedDomain.java", "diffHunk": "@@ -444,6 +450,172 @@ public void testLivenessProbe() {\n         .isTrue();\n   }\n \n+  @Test\n+  @DisplayName(\"Test dataHome override in a domain with domain in image type\")\n+  public void testDataHomeOverrideDomainInImage() {\n+    // in this domain, set dataHome to /u01/oracle/mydata in domain custom resource\n+    // the domain contains JMS and File Store configuration\n+    // File store directory is set to /u01/oracle/customFileStore/ in the model file which should be overridden\n+    // by dataHome\n+    // File store and JMS server are target to cluster-1\n+    // see resource/wdt-models/wdt-singlecluster-multiapps-usingprop-wls.yaml\n+    assertDomainNotNull(domainInImage);\n+    String domainUid = domainInImage.getSpec().getDomainUid();\n+    String domainNamespace = domainInImage.getMetadata().getNamespace();\n+\n+    // check in admin server pod, there is no data file for JMS server created\n+    String dataFileToCheck = DATA_HOME_OVERRIDE + \"/\" + domainUid + \"/FILESTORE-0000000.DAT\";\n+    String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+    assertFalse(assertDoesNotThrow(\n+        () -> doesFileExistInPod(domainNamespace, adminServerPodName, dataFileToCheck),\n+        String.format(\"exception thrown when checking file %s exists in pod %s in namespace %s\",\n+            dataFileToCheck, adminServerPodName, domainNamespace)),\n+        String.format(\"%s exists in pod %s in namespace %s, expects not exist\",\n+            dataFileToCheck, adminServerPodName, domainNamespace));\n+\n+    // check in admin server pod, the default admin server data file moved to DATA_HOME_OVERRIDE\n+    String defaultAdminDataFile = DATA_HOME_OVERRIDE + \"/\" + domainUid + \"/_WLS_ADMIN-SERVER000000.DAT\";\n+    assertTrue(assertDoesNotThrow(() ->\n+        doesFileExistInPod(domainNamespace, adminServerPodName, defaultAdminDataFile),\n+        String.format(\"exception thrown when checking file %s exists in pod %s in namespace %s\",\n+            dataFileToCheck, adminServerPodName, domainNamespace)),\n+        String.format(\"can not find file %s in pod %s in namespace %s\",\n+            defaultAdminDataFile, adminServerPodName, domainNamespace));\n+\n+    // check in managed server pod, the custom data file for JMS and default managed server datafile are created\n+    // in DATA_HOME_OVERRIDE\n+    for (int i = 1; i <= replicaCount; i++) {\n+      String managedServerPodName = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE + i;\n+      String customDataFile = DATA_HOME_OVERRIDE + \"/\" + domainUid + \"/FILESTORE-0@MANAGED-SERVER\" + i + \"000000.DAT\";\n+      assertTrue(assertDoesNotThrow(() ->\n+              doesFileExistInPod(domainNamespace, managedServerPodName, customDataFile),\n+          String.format(\"exception thrown when checking file %s exists in pod %s in namespace %s\",\n+              customDataFile, managedServerPodName, domainNamespace)),\n+          String.format(\"can not find file %s in pod %s in namespace %s\",\n+              customDataFile, managedServerPodName, domainNamespace));\n+\n+      String defaultMSDataFile = DATA_HOME_OVERRIDE + \"/\" + domainUid + \"/_WLS_MANAGED-SERVER\" + i + \"000000.DAT\";\n+      assertTrue(assertDoesNotThrow(() ->\n+              doesFileExistInPod(domainNamespace, managedServerPodName, defaultMSDataFile),\n+          String.format(\"exception thrown when checking file %s exists in pod %s in namespace %s\",\n+              defaultMSDataFile, managedServerPodName, domainNamespace)),\n+          String.format(\"can not find file %s in pod %s in namespace %s\",\n+              defaultMSDataFile, managedServerPodName, domainNamespace));\n+    }\n+  }\n+\n+  @Test\n+  @DisplayName(\"Test dataHome override in a domain with model in image type\")\n+  public void testDataHomeOverrideMiiDomain() {\n+    // in this domain, dataHome is not specified\n+    // the domain contains JMS and File Store configuration\n+    // File store directory is set to /u01/oracle/customFileStore/ in the model file which should not be overridden\n+    // by dataHome\n+    // File store and JMS server are target to admin server", "originalCommit": "87bbd9d5da8d9afa14685e14717c9b5934479a6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4MTUwOA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1964#discussion_r498981508", "bodyText": "fixed", "author": "xiancao", "createdAt": "2020-10-02T18:22:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwNTQxOA=="}], "type": "inlineReview", "revised_code": {"commit": "a7bfe4d66934ed46a02b889bb4d305e2f529c8c7", "chunk": "diff --git a/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItParameterizedDomain.java b/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItParameterizedDomain.java\nindex 7bca0a3daa..690fa0478a 100644\n--- a/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItParameterizedDomain.java\n+++ b/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItParameterizedDomain.java\n\n@@ -450,15 +440,18 @@ class ItParameterizedDomain {\n         .isTrue();\n   }\n \n+  /**\n+   * Verify dataHome override in a domain with domain in image type.\n+   * In this domain, set dataHome to /u01/oracle/mydata in domain custom resource\n+   * The domain contains JMS and File Store configuration\n+   * File store directory is set to /u01/oracle/customFileStore in the model file which should be overridden by dataHome\n+   * File store and JMS server are targeted to the WebLogic cluster cluster-1\n+   * see resource/wdt-models/wdt-singlecluster-multiapps-usingprop-wls.yaml\n+   */\n   @Test\n   @DisplayName(\"Test dataHome override in a domain with domain in image type\")\n   public void testDataHomeOverrideDomainInImage() {\n-    // in this domain, set dataHome to /u01/oracle/mydata in domain custom resource\n-    // the domain contains JMS and File Store configuration\n-    // File store directory is set to /u01/oracle/customFileStore/ in the model file which should be overridden\n-    // by dataHome\n-    // File store and JMS server are target to cluster-1\n-    // see resource/wdt-models/wdt-singlecluster-multiapps-usingprop-wls.yaml\n+\n     assertDomainNotNull(domainInImage);\n     String domainUid = domainInImage.getSpec().getDomainUid();\n     String domainNamespace = domainInImage.getMetadata().getNamespace();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwNjE2NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1964#discussion_r498506165", "bodyText": "Move the description to javadoc with complete sentences, as per comments on previous method", "author": "anpanigr", "createdAt": "2020-10-01T20:51:16Z", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItParameterizedDomain.java", "diffHunk": "@@ -444,6 +450,172 @@ public void testLivenessProbe() {\n         .isTrue();\n   }\n \n+  @Test\n+  @DisplayName(\"Test dataHome override in a domain with domain in image type\")\n+  public void testDataHomeOverrideDomainInImage() {\n+    // in this domain, set dataHome to /u01/oracle/mydata in domain custom resource\n+    // the domain contains JMS and File Store configuration\n+    // File store directory is set to /u01/oracle/customFileStore/ in the model file which should be overridden\n+    // by dataHome\n+    // File store and JMS server are target to cluster-1\n+    // see resource/wdt-models/wdt-singlecluster-multiapps-usingprop-wls.yaml\n+    assertDomainNotNull(domainInImage);\n+    String domainUid = domainInImage.getSpec().getDomainUid();\n+    String domainNamespace = domainInImage.getMetadata().getNamespace();\n+\n+    // check in admin server pod, there is no data file for JMS server created\n+    String dataFileToCheck = DATA_HOME_OVERRIDE + \"/\" + domainUid + \"/FILESTORE-0000000.DAT\";\n+    String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+    assertFalse(assertDoesNotThrow(\n+        () -> doesFileExistInPod(domainNamespace, adminServerPodName, dataFileToCheck),\n+        String.format(\"exception thrown when checking file %s exists in pod %s in namespace %s\",\n+            dataFileToCheck, adminServerPodName, domainNamespace)),\n+        String.format(\"%s exists in pod %s in namespace %s, expects not exist\",\n+            dataFileToCheck, adminServerPodName, domainNamespace));\n+\n+    // check in admin server pod, the default admin server data file moved to DATA_HOME_OVERRIDE\n+    String defaultAdminDataFile = DATA_HOME_OVERRIDE + \"/\" + domainUid + \"/_WLS_ADMIN-SERVER000000.DAT\";\n+    assertTrue(assertDoesNotThrow(() ->\n+        doesFileExistInPod(domainNamespace, adminServerPodName, defaultAdminDataFile),\n+        String.format(\"exception thrown when checking file %s exists in pod %s in namespace %s\",\n+            dataFileToCheck, adminServerPodName, domainNamespace)),\n+        String.format(\"can not find file %s in pod %s in namespace %s\",\n+            defaultAdminDataFile, adminServerPodName, domainNamespace));\n+\n+    // check in managed server pod, the custom data file for JMS and default managed server datafile are created\n+    // in DATA_HOME_OVERRIDE\n+    for (int i = 1; i <= replicaCount; i++) {\n+      String managedServerPodName = domainUid + \"-\" + MANAGED_SERVER_NAME_BASE + i;\n+      String customDataFile = DATA_HOME_OVERRIDE + \"/\" + domainUid + \"/FILESTORE-0@MANAGED-SERVER\" + i + \"000000.DAT\";\n+      assertTrue(assertDoesNotThrow(() ->\n+              doesFileExistInPod(domainNamespace, managedServerPodName, customDataFile),\n+          String.format(\"exception thrown when checking file %s exists in pod %s in namespace %s\",\n+              customDataFile, managedServerPodName, domainNamespace)),\n+          String.format(\"can not find file %s in pod %s in namespace %s\",\n+              customDataFile, managedServerPodName, domainNamespace));\n+\n+      String defaultMSDataFile = DATA_HOME_OVERRIDE + \"/\" + domainUid + \"/_WLS_MANAGED-SERVER\" + i + \"000000.DAT\";\n+      assertTrue(assertDoesNotThrow(() ->\n+              doesFileExistInPod(domainNamespace, managedServerPodName, defaultMSDataFile),\n+          String.format(\"exception thrown when checking file %s exists in pod %s in namespace %s\",\n+              defaultMSDataFile, managedServerPodName, domainNamespace)),\n+          String.format(\"can not find file %s in pod %s in namespace %s\",\n+              defaultMSDataFile, managedServerPodName, domainNamespace));\n+    }\n+  }\n+\n+  @Test\n+  @DisplayName(\"Test dataHome override in a domain with model in image type\")\n+  public void testDataHomeOverrideMiiDomain() {\n+    // in this domain, dataHome is not specified\n+    // the domain contains JMS and File Store configuration\n+    // File store directory is set to /u01/oracle/customFileStore/ in the model file which should not be overridden\n+    // by dataHome\n+    // File store and JMS server are target to admin server\n+    // see resource/wdt-models/model-multiclusterdomain-sampleapp-wls.yaml\n+    assertDomainNotNull(miiDomain);\n+    String domainUid = miiDomain.getSpec().getDomainUid();\n+    String domainNamespace = miiDomain.getMetadata().getNamespace();\n+\n+    // check in admin server pod, there is a data file for JMS server created in /u01/oracle/customFileStore\n+    String dataFileToCheck = \"/u01/oracle/customFileStore/FILESTORE-0000000.DAT\";\n+    String adminServerPodName = domainUid + \"-\" + ADMIN_SERVER_NAME_BASE;\n+    assertTrue(assertDoesNotThrow(\n+        () -> doesFileExistInPod(domainNamespace, adminServerPodName, dataFileToCheck),\n+        String.format(\"exception thrown when checking file %s exists in pod %s in namespace %s\",\n+            dataFileToCheck, adminServerPodName, domainNamespace)),\n+        String.format(\"did not find file %s in pod %s in namespace %s\",\n+            dataFileToCheck, adminServerPodName, domainNamespace));\n+\n+    // check in admin server pod, the default admin server data file is in default data store\n+    String defaultAdminDataFile =\n+        \"/u01/domains/\" + domainUid + \"/servers/admin-server/data/store/default/_WLS_ADMIN-SERVER000000.DAT\";\n+    assertTrue(assertDoesNotThrow(() ->\n+            doesFileExistInPod(domainNamespace, adminServerPodName, defaultAdminDataFile),\n+        String.format(\"exception thrown when checking file %s exists in pod %s in namespace %s\",\n+            dataFileToCheck, adminServerPodName, domainNamespace)),\n+        String.format(\"did not find file %s in pod %s in namespace %s\",\n+            defaultAdminDataFile, adminServerPodName, domainNamespace));\n+\n+    // check in managed server pod, there is no custom data file for JMS is created\n+    for (int i = 1; i <= replicaCount; i++) {\n+      for (int j = 1; j <= NUMBER_OF_CLUSTERS_MIIDOMAIN; j++) {\n+        String managedServerPodName = domainUid + \"-cluster-\" + j + \"-\" + MANAGED_SERVER_NAME_BASE + i;\n+        String customDataFile = \"/u01/oracle/customFileStore/FILESTORE-0@MANAGED-SERVER\" + i + \"000000.DAT\";\n+        assertFalse(assertDoesNotThrow(() ->\n+                doesFileExistInPod(domainNamespace, managedServerPodName, customDataFile),\n+            String.format(\"exception thrown when checking file %s exists in pod %s in namespace %s\",\n+                customDataFile, managedServerPodName, domainNamespace)),\n+            String.format(\"found file %s in pod %s in namespace %s, expect not exist\",\n+                customDataFile, managedServerPodName, domainNamespace));\n+\n+        String defaultMSDataFile = \"/u01/domains/\" + domainUid + \"/servers/cluster-\" + j + \"-managed-server\" + i\n+            + \"/data/store/default/_WLS_CLUSTER-\" + j + \"-MANAGED-SERVER\" + i + \"000000.DAT\";\n+        assertTrue(assertDoesNotThrow(() ->\n+                doesFileExistInPod(domainNamespace, managedServerPodName, defaultMSDataFile),\n+            String.format(\"exception thrown when checking file %s exists in pod %s in namespace %s\",\n+                defaultMSDataFile, managedServerPodName, domainNamespace)),\n+            String.format(\"can not find file %s in pod %s in namespace %s\",\n+                defaultMSDataFile, managedServerPodName, domainNamespace));\n+      }\n+    }\n+  }\n+\n+  @Test\n+  @DisplayName(\"Test dataHome override in a domain with domain on PV type\")\n+  public void testDataHomeOverrideDomainOnPV() {", "originalCommit": "87bbd9d5da8d9afa14685e14717c9b5934479a6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4MTU3OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1964#discussion_r498981579", "bodyText": "fixed", "author": "xiancao", "createdAt": "2020-10-02T18:22:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUwNjE2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "a7bfe4d66934ed46a02b889bb4d305e2f529c8c7", "chunk": "diff --git a/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItParameterizedDomain.java b/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItParameterizedDomain.java\nindex 7bca0a3daa..690fa0478a 100644\n--- a/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItParameterizedDomain.java\n+++ b/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItParameterizedDomain.java\n\n@@ -450,15 +440,18 @@ class ItParameterizedDomain {\n         .isTrue();\n   }\n \n+  /**\n+   * Verify dataHome override in a domain with domain in image type.\n+   * In this domain, set dataHome to /u01/oracle/mydata in domain custom resource\n+   * The domain contains JMS and File Store configuration\n+   * File store directory is set to /u01/oracle/customFileStore in the model file which should be overridden by dataHome\n+   * File store and JMS server are targeted to the WebLogic cluster cluster-1\n+   * see resource/wdt-models/wdt-singlecluster-multiapps-usingprop-wls.yaml\n+   */\n   @Test\n   @DisplayName(\"Test dataHome override in a domain with domain in image type\")\n   public void testDataHomeOverrideDomainInImage() {\n-    // in this domain, set dataHome to /u01/oracle/mydata in domain custom resource\n-    // the domain contains JMS and File Store configuration\n-    // File store directory is set to /u01/oracle/customFileStore/ in the model file which should be overridden\n-    // by dataHome\n-    // File store and JMS server are target to cluster-1\n-    // see resource/wdt-models/wdt-singlecluster-multiapps-usingprop-wls.yaml\n+\n     assertDomainNotNull(domainInImage);\n     String domainUid = domainInImage.getSpec().getDomainUid();\n     String domainNamespace = domainInImage.getMetadata().getNamespace();\n"}}, {"oid": "ff1c5242f38d167ce16aed6c395f7b85df5df7fc", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ff1c5242f38d167ce16aed6c395f7b85df5df7fc", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into xc-owls75000", "committedDate": "2020-10-02T17:06:11Z", "type": "commit"}, {"oid": "a7bfe4d66934ed46a02b889bb4d305e2f529c8c7", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a7bfe4d66934ed46a02b889bb4d305e2f529c8c7", "message": "address Pani's comments", "committedDate": "2020-10-02T18:20:08Z", "type": "commit"}]}