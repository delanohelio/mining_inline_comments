{"pr_number": 1485, "pr_title": "OWLS-80458  New Upgrade Usecase ", "pr_createdAt": "2020-03-21T21:26:04Z", "pr_url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485", "timeline": [{"oid": "18d71f8685399bf17e54b877cb6aa44bf3b8dc35", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/18d71f8685399bf17e54b877cb6aa44bf3b8dc35", "message": "Added Upgrade Test 2.5.0 to latest", "committedDate": "2020-03-20T15:31:28Z", "type": "commit"}, {"oid": "67ccfa229ce63767974e8ccc6fdcc3444e67328c", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/67ccfa229ce63767974e8ccc6fdcc3444e67328c", "message": "Resolution to checkstyle Error", "committedDate": "2020-03-20T15:41:44Z", "type": "commit"}, {"oid": "329b0f32f7d62e502fc3be61b5716c8157572c68", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/329b0f32f7d62e502fc3be61b5716c8157572c68", "message": "Added provison for logging, comment ApiVersion Check", "committedDate": "2020-03-20T21:58:05Z", "type": "commit"}, {"oid": "92a004172d5de002c28729452793b488a3fd7f82", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/92a004172d5de002c28729452793b488a3fd7f82", "message": "Modified Upgrade Test to use DomainOnPv; add extra parameter to skip the domain image build", "committedDate": "2020-03-23T23:25:42Z", "type": "commit"}, {"oid": "89f9470e812ac564a0208f837bfc153e6ab53657", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/89f9470e812ac564a0208f837bfc153e6ab53657", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into OWLS-80458", "committedDate": "2020-03-23T23:26:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE3OTg4Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397179886", "bodyText": "Why are we switching from Domain in Image to Domain in PV?  If we need to test Domain in PV here, we should ADD it (or add a copy of this test for PV), not remove Domain in Image.", "author": "ddsharpe", "createdAt": "2020-03-24T14:08:37Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -322,15 +272,11 @@ private void setupOperatorAndDomain(String operatorGitRelease, String operatorRe\n     domNs.add(DOM_NS);\n     operatorMap.put(\"domainNamespaces\", domNs);\n     operator = TestUtils.createOperator(operatorMap, Operator.RestCertType.LEGACY);\n-    // TestUtils.exec(\"kubectl get all --all-namespaces\", true);\n-\n-    // Map<String, Object> wlstDomainMap = TestUtils.loadYaml(DOMAININIMAGE_WLST_YAML);\n-    Map<String, Object> wlstDomainMap = createDomainInImageMap(getNewSuffixCount(), false, testClassName);\n+    Map<String, Object> wlstDomainMap = createDomainMap(getNewSuffixCount(),testClassName);", "originalCommit": "89f9470e812ac564a0208f837bfc153e6ab53657", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE5MjI4Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397192287", "bodyText": "The purpose of the Upgrade Usecase is to verify the ability of the Upgrade Operator to manage the existing Weblogic Domain. Will the upgrade process takes a different code path based on domain model used.\nAnother Reason :   I have modified the domain-in-image sample script  ( in develop) to skip the domain image creation if the image exits to reduce the test execution time.  But this change is not available in master ( 2.5.0 branch), so I can not use this  feature while creating domain in older release to start the Domain", "author": "anpanigr", "createdAt": "2020-03-24T14:24:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE3OTg4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU1OTgzMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397559832", "bodyText": "@ddsharpe does this resolve your concern?", "author": "markxnelson", "createdAt": "2020-03-25T01:32:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE3OTg4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyNjU3Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r398226573", "bodyText": "@ddsharpe", "author": "markxnelson", "createdAt": "2020-03-25T23:13:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE3OTg4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg4NDQ1Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r398884456", "bodyText": "confirmed derek is ok with the response", "author": "markxnelson", "createdAt": "2020-03-26T20:52:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE3OTg4Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwNDIzMA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397204230", "bodyText": "remove this method as its not used", "author": "vanajamukkara", "createdAt": "2020-03-24T14:40:10Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -238,41 +141,74 @@ public void testOperatorUpgradeFrom2_3_0() throws Exception {\n    * @param restart boolean parameter used to determine if a restart of domain is checked\n    * @throws Exception when upgrade fails or basic usecase testing or scaling fails.\n    */\n-  private void upgradeOperator(boolean restart) throws Exception {\n+  private void upgradeOperator() throws Exception {\n     operator.callHelmUpgrade(\"image=\" + OP_TARGET_RELEASE);\n-    if (restart) {\n-      checkDomainRollingRestarted();\n-    }\n-    checkOperatorVersion();\n+    checkDomainNotRestarted();\n+    checkCrdVersion();\n+    // checkDomainApiVersion(); Not Needed \n     testClusterScaling(operator, domain, false);\n   }\n \n   /**\n-   * checks the expected version of the upgraded operator in a loop. In Jenkins it takes nearly 8\n-   * minutes to show the updated value of the domain CRD.\n+   * Checks Expected/Upgraded ApiVersion of the Domain Object in a loop. \n+   * In Jenkins it takes nearly 8 minutes to show the updated value \n+   * \n+   * The .apiVersion of the domain will not be updated until the domain is \n+   * written again (e.g. by the operator when updating status)\n+   * This contributes to long time period. We can skip this check \n    *\n    * @throws Exception when version does not match\n    */\n-  private void checkOperatorVersion() throws Exception {\n+  private void checkDomainApiVersion() throws Exception {", "originalCommit": "89f9470e812ac564a0208f837bfc153e6ab53657", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIzNzI3OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397237278", "bodyText": "Keeping it if we can decrease the time by revisiting the product code in future.", "author": "anpanigr", "createdAt": "2020-03-24T15:21:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwNDIzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIzOTE2Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397239163", "bodyText": "@rjeberhard confirmed we don't need to verify domain resource apiVersion, checking crd apiVersion is enough. Ryan, can you please confirm again.", "author": "vanajamukkara", "createdAt": "2020-03-24T15:24:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwNDIzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0MDk4NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397240984", "bodyText": "Yes, correct.  We do not need to confirm that the operator updates the .apiVersion of a Domain resource.  I'm just interested in the CRD version and then the checks that the pods don't roll and that the domain remains manageable.", "author": "rjeberhard", "createdAt": "2020-03-24T15:26:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwNDIzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI1OTk1MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397259951", "bodyText": "@anpanigr you can remove the method", "author": "vanajamukkara", "createdAt": "2020-03-24T15:50:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwNDIzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM5Nzg0MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397397840", "bodyText": "removed the method to check DomainApi version", "author": "anpanigr", "createdAt": "2020-03-24T19:10:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwNDIzMA=="}], "type": "inlineReview", "revised_code": {"commit": "7ef1946602c5913a105db01fcd01b3ac9c5afa30", "chunk": "diff --git a/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java b/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\nindex 6a1bae2f00..d78dfa8ac2 100644\n--- a/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\n+++ b/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\n\n@@ -138,51 +144,18 @@ public class ItOperatorUpgrade extends BaseTest {\n   /**\n    * Upgrades operator to develop branch by using the helm upgrade.\n    *\n-   * @param restart boolean parameter used to determine if a restart of domain is checked\n    * @throws Exception when upgrade fails or basic usecase testing or scaling fails.\n    */\n   private void upgradeOperator() throws Exception {\n     operator.callHelmUpgrade(\"image=\" + OP_TARGET_RELEASE);\n-    checkDomainNotRestarted();\n     checkCrdVersion();\n-    // checkDomainApiVersion(); Not Needed \n+    System.out.println(\"Before Upgrade M1CTS[\" + M1_CTS + \"]\");\n+    System.out.println(\"Before Upgrade M2CTS[\" + M2_CTS + \"]\");\n+    System.out.println(\"Before Upgrade ADMINCTS[\" + ADMIN_CTS + \"]\");\n+    checkDomainNotRestarted();\n     testClusterScaling(operator, domain, false);\n   }\n \n-  /**\n-   * Checks Expected/Upgraded ApiVersion of the Domain Object in a loop. \n-   * In Jenkins it takes nearly 8 minutes to show the updated value \n-   * \n-   * The .apiVersion of the domain will not be updated until the domain is \n-   * written again (e.g. by the operator when updating status)\n-   * This contributes to long time period. We can skip this check \n-   *\n-   * @throws Exception when version does not match\n-   */\n-  private void checkDomainApiVersion() throws Exception {\n-    boolean result = false;\n-    LoggerHelper.getLocal().log(\n-        Level.INFO,\n-        \"Checking for the domain apiVersion \"\n-            + getDomainApiVersion()\n-            + \" in a loop for up to 15 minutes\");\n-    for (int i = 0; i < 120; i++) {\n-      ExecResult exec =\n-          TestUtils.exec(\n-              \"kubectl get domain -n \" + DOM_NS + \"  \" + DUID + \" -o jsonpath={.apiVersion}\", true);\n-      if (exec.stdout().contains(getDomainApiVersion())) {\n-        int ttime = 10 * (i - 1); \n-        LoggerHelper.getLocal().log(Level.INFO, \"Got the expected API Version after [\" + ttime + \"] Seconds\");\n-        result = true;\n-        break;\n-      }\n-      Thread.sleep(1000 * 10);\n-    }\n-    if (!result) {\n-      throw new RuntimeException(\"FAILURE: Didn't get the expected API Version\");\n-    }\n-  }\n-\n   /**\n    * Checks the expected Upgraded Version of CustomResourceDefintion (CRD) \n    * in default NameSpace in a loop. \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwNzQyMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397207421", "bodyText": "use BaseTest.getMaxIterationsPod() and BaseTest.getWaitTimePod() - these are controlled from properties file or env var. we use these across the tests if we check for something in loop.", "author": "vanajamukkara", "createdAt": "2020-03-24T14:44:00Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -238,41 +141,74 @@ public void testOperatorUpgradeFrom2_3_0() throws Exception {\n    * @param restart boolean parameter used to determine if a restart of domain is checked\n    * @throws Exception when upgrade fails or basic usecase testing or scaling fails.\n    */\n-  private void upgradeOperator(boolean restart) throws Exception {\n+  private void upgradeOperator() throws Exception {\n     operator.callHelmUpgrade(\"image=\" + OP_TARGET_RELEASE);\n-    if (restart) {\n-      checkDomainRollingRestarted();\n-    }\n-    checkOperatorVersion();\n+    checkDomainNotRestarted();\n+    checkCrdVersion();\n+    // checkDomainApiVersion(); Not Needed \n     testClusterScaling(operator, domain, false);\n   }\n \n   /**\n-   * checks the expected version of the upgraded operator in a loop. In Jenkins it takes nearly 8\n-   * minutes to show the updated value of the domain CRD.\n+   * Checks Expected/Upgraded ApiVersion of the Domain Object in a loop. \n+   * In Jenkins it takes nearly 8 minutes to show the updated value \n+   * \n+   * The .apiVersion of the domain will not be updated until the domain is \n+   * written again (e.g. by the operator when updating status)\n+   * This contributes to long time period. We can skip this check \n    *\n    * @throws Exception when version does not match\n    */\n-  private void checkOperatorVersion() throws Exception {\n+  private void checkDomainApiVersion() throws Exception {\n     boolean result = false;\n     LoggerHelper.getLocal().log(\n         Level.INFO,\n         \"Checking for the domain apiVersion \"\n             + getDomainApiVersion()\n             + \" in a loop for up to 15 minutes\");\n-    for (int i = 0; i < 900; i = i + 10) {\n+    for (int i = 0; i < 120; i++) {\n       ExecResult exec =\n           TestUtils.exec(\n               \"kubectl get domain -n \" + DOM_NS + \"  \" + DUID + \" -o jsonpath={.apiVersion}\", true);\n       if (exec.stdout().contains(getDomainApiVersion())) {\n-        LoggerHelper.getLocal().log(Level.INFO, \"Got the expected apiVersion\");\n+        int ttime = 10 * (i - 1); \n+        LoggerHelper.getLocal().log(Level.INFO, \"Got the expected API Version after [\" + ttime + \"] Seconds\");\n+        result = true;\n+        break;\n+      }\n+      Thread.sleep(1000 * 10);\n+    }\n+    if (!result) {\n+      throw new RuntimeException(\"FAILURE: Didn't get the expected API Version\");\n+    }\n+  }\n+\n+  /**\n+   * Checks the expected Upgraded Version of CustomResourceDefintion (CRD) \n+   * in default NameSpace in a loop. \n+   *\n+   * @throws Exception when version does not match\n+   */\n+  private void checkCrdVersion() throws Exception {\n+    boolean result = false;\n+    LoggerHelper.getLocal().log(\n+        Level.INFO,\n+        \"Checking for the CRD Version \"\n+            + getDomainApiVersion()\n+            + \" in a loop for up to 15 minutes\");\n+    for (int i = 0; i < 900; i = i + 10) {", "originalCommit": "89f9470e812ac564a0208f837bfc153e6ab53657", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIzNzY1MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397237651", "bodyText": "Done", "author": "anpanigr", "createdAt": "2020-03-24T15:22:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwNzQyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "7ef1946602c5913a105db01fcd01b3ac9c5afa30", "chunk": "diff --git a/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java b/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\nindex 6a1bae2f00..d78dfa8ac2 100644\n--- a/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\n+++ b/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\n\n@@ -138,51 +144,18 @@ public class ItOperatorUpgrade extends BaseTest {\n   /**\n    * Upgrades operator to develop branch by using the helm upgrade.\n    *\n-   * @param restart boolean parameter used to determine if a restart of domain is checked\n    * @throws Exception when upgrade fails or basic usecase testing or scaling fails.\n    */\n   private void upgradeOperator() throws Exception {\n     operator.callHelmUpgrade(\"image=\" + OP_TARGET_RELEASE);\n-    checkDomainNotRestarted();\n     checkCrdVersion();\n-    // checkDomainApiVersion(); Not Needed \n+    System.out.println(\"Before Upgrade M1CTS[\" + M1_CTS + \"]\");\n+    System.out.println(\"Before Upgrade M2CTS[\" + M2_CTS + \"]\");\n+    System.out.println(\"Before Upgrade ADMINCTS[\" + ADMIN_CTS + \"]\");\n+    checkDomainNotRestarted();\n     testClusterScaling(operator, domain, false);\n   }\n \n-  /**\n-   * Checks Expected/Upgraded ApiVersion of the Domain Object in a loop. \n-   * In Jenkins it takes nearly 8 minutes to show the updated value \n-   * \n-   * The .apiVersion of the domain will not be updated until the domain is \n-   * written again (e.g. by the operator when updating status)\n-   * This contributes to long time period. We can skip this check \n-   *\n-   * @throws Exception when version does not match\n-   */\n-  private void checkDomainApiVersion() throws Exception {\n-    boolean result = false;\n-    LoggerHelper.getLocal().log(\n-        Level.INFO,\n-        \"Checking for the domain apiVersion \"\n-            + getDomainApiVersion()\n-            + \" in a loop for up to 15 minutes\");\n-    for (int i = 0; i < 120; i++) {\n-      ExecResult exec =\n-          TestUtils.exec(\n-              \"kubectl get domain -n \" + DOM_NS + \"  \" + DUID + \" -o jsonpath={.apiVersion}\", true);\n-      if (exec.stdout().contains(getDomainApiVersion())) {\n-        int ttime = 10 * (i - 1); \n-        LoggerHelper.getLocal().log(Level.INFO, \"Got the expected API Version after [\" + ttime + \"] Seconds\");\n-        result = true;\n-        break;\n-      }\n-      Thread.sleep(1000 * 10);\n-    }\n-    if (!result) {\n-      throw new RuntimeException(\"FAILURE: Didn't get the expected API Version\");\n-    }\n-  }\n-\n   /**\n    * Checks the expected Upgraded Version of CustomResourceDefintion (CRD) \n    * in default NameSpace in a loop. \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwOTA0NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397209045", "bodyText": "if rolling restart is triggered, do u see it immediately or will there be little lag? checking once immediately is enough to make sure rolling restart is not triggered?", "author": "vanajamukkara", "createdAt": "2020-03-24T14:46:00Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -293,6 +229,20 @@ private void checkDomainRollingRestarted() throws Exception {\n     }\n   }\n \n+  /**\n+   * Check whether the weblogic server instances are still RUNNING \n+   * not restarted due to Operator Upgrade\n+   *\n+   * @throws Exception If restarted\n+   */\n+  private void checkDomainNotRestarted() throws Exception {\n+    TestUtils.checkPodReady(DUID + \"-\" + domain.getAdminServerName(), DOM_NS);\n+    for (int i = 2; i >= 1; i--) {", "originalCommit": "89f9470e812ac564a0208f837bfc153e6ab53657", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxNTg1Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397215857", "bodyText": "Combining here since @markxnelson made the same comment below... Checking that the operator doesn't restart pods is a bit tricky.  The operator will respond very quickly to check all existing domains after it starts, so if the operator hasn't started the deletion of any pods within a few seconds then it isn't rolling the servers.  You can check if pods are in the process of being deleted by checking the .metadata.deletionTimestamp.", "author": "rjeberhard", "createdAt": "2020-03-24T14:54:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwOTA0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI5NTIyMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397295223", "bodyText": "Here should I expect a NULL value for {.metadata.deletionTimestamp}\n$ kubectl get po/operatordomain250-managed-server1 -n weblogic-domain250 -o  jsonpath={.metadata.deletionTimestamp}\nI get a NULL value while the pod are RUNNING\nOR I can compare the creationTimestamp before and after Upgrade.  Both MUST be same", "author": "anpanigr", "createdAt": "2020-03-24T16:34:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwOTA0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI5NzcxMA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397297710", "bodyText": "Yes, that's right.  Oh, and for completeness you should check that the .metadata.creationTimesamp.  I don't think it's an or...", "author": "rjeberhard", "createdAt": "2020-03-24T16:37:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwOTA0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyMzY1MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397523651", "bodyText": "I added the logic to check the creationTimesamp before and after upgrade to make sure that the server pod has not been re-stared due to upgrade.", "author": "anpanigr", "createdAt": "2020-03-24T23:31:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwOTA0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "7ef1946602c5913a105db01fcd01b3ac9c5afa30", "chunk": "diff --git a/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java b/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\nindex 6a1bae2f00..d78dfa8ac2 100644\n--- a/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\n+++ b/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\n\n@@ -231,17 +204,26 @@ public class ItOperatorUpgrade extends BaseTest {\n \n   /**\n    * Check whether the weblogic server instances are still RUNNING \n-   * not restarted due to Operator Upgrade\n+   * not restarted due to Operator Upgrade by comparing the creationTimestamp\n+   * before and after upgrade\n    *\n    * @throws Exception If restarted\n    */\n   private void checkDomainNotRestarted() throws Exception {\n     TestUtils.checkPodReady(DUID + \"-\" + domain.getAdminServerName(), DOM_NS);\n     for (int i = 2; i >= 1; i--) {\n-      LoggerHelper.getLocal().log(Level.INFO,\n-          \"Checking if managed server pod(\" + DUID + \"--managed-server\" + i + \") is RUNNING\");\n-      TestUtils.checkPodReady(DUID + \"-managed-server\" + i, DOM_NS);\n+     TestUtils.checkPodReady(DUID + \"-managed-server\" + i, DOM_NS);\n     }\n+    String m1 = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-managed-server1\");\n+    String m2 = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-managed-server2\");\n+    String admin = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-admin-server\");\n+    System.out.println(\"After Upgrade M1CTS[\" + m1 + \"]\");\n+    System.out.println(\"After Upgrade M2CTS[\" + m2 + \"]\");\n+    System.out.println(\"After Upgrade M2CTS[\" + admin + \"]\");\n+\n+    Assertions.assertEquals(M1_CTS, m1);\n+    Assertions.assertEquals(M2_CTS, m2);\n+    Assertions.assertEquals(ADMIN_CTS, admin);\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE5ODgxMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397198813", "bodyText": "the comment says we want to check they have not been restarted, but this just checks if they are running, not if they wer restarted.  is the comment wrong? or does the code need to be improved to check for restart?", "author": "markxnelson", "createdAt": "2020-03-24T14:33:06Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -293,6 +229,20 @@ private void checkDomainRollingRestarted() throws Exception {\n     }\n   }\n \n+  /**\n+   * Check whether the weblogic server instances are still RUNNING \n+   * not restarted due to Operator Upgrade\n+   *\n+   * @throws Exception If restarted\n+   */\n+  private void checkDomainNotRestarted() throws Exception {\n+    TestUtils.checkPodReady(DUID + \"-\" + domain.getAdminServerName(), DOM_NS);\n+    for (int i = 2; i >= 1; i--) {\n+      LoggerHelper.getLocal().log(Level.INFO,\n+          \"Checking if managed server pod(\" + DUID + \"--managed-server\" + i + \") is RUNNING\");\n+      TestUtils.checkPodReady(DUID + \"-managed-server\" + i, DOM_NS);", "originalCommit": "89f9470e812ac564a0208f837bfc153e6ab53657", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyMzgyMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397523821", "bodyText": "I added the logic to check the creationTimesamp before and after upgrade to make sure that the server pod has not been re-stared due to upgrade.", "author": "anpanigr", "createdAt": "2020-03-24T23:31:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE5ODgxMw=="}], "type": "inlineReview", "revised_code": {"commit": "7ef1946602c5913a105db01fcd01b3ac9c5afa30", "chunk": "diff --git a/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java b/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\nindex 6a1bae2f00..d78dfa8ac2 100644\n--- a/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\n+++ b/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\n\n@@ -231,17 +204,26 @@ public class ItOperatorUpgrade extends BaseTest {\n \n   /**\n    * Check whether the weblogic server instances are still RUNNING \n-   * not restarted due to Operator Upgrade\n+   * not restarted due to Operator Upgrade by comparing the creationTimestamp\n+   * before and after upgrade\n    *\n    * @throws Exception If restarted\n    */\n   private void checkDomainNotRestarted() throws Exception {\n     TestUtils.checkPodReady(DUID + \"-\" + domain.getAdminServerName(), DOM_NS);\n     for (int i = 2; i >= 1; i--) {\n-      LoggerHelper.getLocal().log(Level.INFO,\n-          \"Checking if managed server pod(\" + DUID + \"--managed-server\" + i + \") is RUNNING\");\n-      TestUtils.checkPodReady(DUID + \"-managed-server\" + i, DOM_NS);\n+     TestUtils.checkPodReady(DUID + \"-managed-server\" + i, DOM_NS);\n     }\n+    String m1 = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-managed-server1\");\n+    String m2 = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-managed-server2\");\n+    String admin = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-admin-server\");\n+    System.out.println(\"After Upgrade M1CTS[\" + m1 + \"]\");\n+    System.out.println(\"After Upgrade M2CTS[\" + m2 + \"]\");\n+    System.out.println(\"After Upgrade M2CTS[\" + admin + \"]\");\n+\n+    Assertions.assertEquals(M1_CTS, m1);\n+    Assertions.assertEquals(M2_CTS, m2);\n+    Assertions.assertEquals(ADMIN_CTS, admin);\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE5OTkyNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397199924", "bodyText": "didn't we discuss this and realize that the 15 minute wait was only needed for a domain to be updated?  and that we only need to check the CRD apiVersion is udpated, not a CR (instance)?", "author": "markxnelson", "createdAt": "2020-03-24T14:34:29Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -238,41 +141,74 @@ public void testOperatorUpgradeFrom2_3_0() throws Exception {\n    * @param restart boolean parameter used to determine if a restart of domain is checked\n    * @throws Exception when upgrade fails or basic usecase testing or scaling fails.\n    */\n-  private void upgradeOperator(boolean restart) throws Exception {\n+  private void upgradeOperator() throws Exception {\n     operator.callHelmUpgrade(\"image=\" + OP_TARGET_RELEASE);\n-    if (restart) {\n-      checkDomainRollingRestarted();\n-    }\n-    checkOperatorVersion();\n+    checkDomainNotRestarted();\n+    checkCrdVersion();\n+    // checkDomainApiVersion(); Not Needed \n     testClusterScaling(operator, domain, false);\n   }\n \n   /**\n-   * checks the expected version of the upgraded operator in a loop. In Jenkins it takes nearly 8\n-   * minutes to show the updated value of the domain CRD.\n+   * Checks Expected/Upgraded ApiVersion of the Domain Object in a loop. \n+   * In Jenkins it takes nearly 8 minutes to show the updated value \n+   * \n+   * The .apiVersion of the domain will not be updated until the domain is \n+   * written again (e.g. by the operator when updating status)\n+   * This contributes to long time period. We can skip this check \n    *\n    * @throws Exception when version does not match\n    */\n-  private void checkOperatorVersion() throws Exception {\n+  private void checkDomainApiVersion() throws Exception {\n     boolean result = false;\n     LoggerHelper.getLocal().log(\n         Level.INFO,\n         \"Checking for the domain apiVersion \"\n             + getDomainApiVersion()\n             + \" in a loop for up to 15 minutes\");\n-    for (int i = 0; i < 900; i = i + 10) {\n+    for (int i = 0; i < 120; i++) {\n       ExecResult exec =\n           TestUtils.exec(\n               \"kubectl get domain -n \" + DOM_NS + \"  \" + DUID + \" -o jsonpath={.apiVersion}\", true);\n       if (exec.stdout().contains(getDomainApiVersion())) {\n-        LoggerHelper.getLocal().log(Level.INFO, \"Got the expected apiVersion\");\n+        int ttime = 10 * (i - 1); \n+        LoggerHelper.getLocal().log(Level.INFO, \"Got the expected API Version after [\" + ttime + \"] Seconds\");\n+        result = true;\n+        break;\n+      }\n+      Thread.sleep(1000 * 10);\n+    }\n+    if (!result) {\n+      throw new RuntimeException(\"FAILURE: Didn't get the expected API Version\");\n+    }\n+  }\n+\n+  /**\n+   * Checks the expected Upgraded Version of CustomResourceDefintion (CRD) \n+   * in default NameSpace in a loop. \n+   *\n+   * @throws Exception when version does not match\n+   */\n+  private void checkCrdVersion() throws Exception {\n+    boolean result = false;\n+    LoggerHelper.getLocal().log(\n+        Level.INFO,\n+        \"Checking for the CRD Version \"\n+            + getDomainApiVersion()\n+            + \" in a loop for up to 15 minutes\");", "originalCommit": "89f9470e812ac564a0208f837bfc153e6ab53657", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwOTA5Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397209096", "bodyText": "@rjeberhard ^^ ?", "author": "markxnelson", "createdAt": "2020-03-24T14:46:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE5OTkyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwOTg1Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397209857", "bodyText": "oh i see you removed the call on 148 to this method -- so can this method be deleted now? not needed?", "author": "markxnelson", "createdAt": "2020-03-24T14:47:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE5OTkyNA=="}], "type": "inlineReview", "revised_code": {"commit": "7ef1946602c5913a105db01fcd01b3ac9c5afa30", "chunk": "diff --git a/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java b/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\nindex 6a1bae2f00..d78dfa8ac2 100644\n--- a/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\n+++ b/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\n\n@@ -138,51 +144,18 @@ public class ItOperatorUpgrade extends BaseTest {\n   /**\n    * Upgrades operator to develop branch by using the helm upgrade.\n    *\n-   * @param restart boolean parameter used to determine if a restart of domain is checked\n    * @throws Exception when upgrade fails or basic usecase testing or scaling fails.\n    */\n   private void upgradeOperator() throws Exception {\n     operator.callHelmUpgrade(\"image=\" + OP_TARGET_RELEASE);\n-    checkDomainNotRestarted();\n     checkCrdVersion();\n-    // checkDomainApiVersion(); Not Needed \n+    System.out.println(\"Before Upgrade M1CTS[\" + M1_CTS + \"]\");\n+    System.out.println(\"Before Upgrade M2CTS[\" + M2_CTS + \"]\");\n+    System.out.println(\"Before Upgrade ADMINCTS[\" + ADMIN_CTS + \"]\");\n+    checkDomainNotRestarted();\n     testClusterScaling(operator, domain, false);\n   }\n \n-  /**\n-   * Checks Expected/Upgraded ApiVersion of the Domain Object in a loop. \n-   * In Jenkins it takes nearly 8 minutes to show the updated value \n-   * \n-   * The .apiVersion of the domain will not be updated until the domain is \n-   * written again (e.g. by the operator when updating status)\n-   * This contributes to long time period. We can skip this check \n-   *\n-   * @throws Exception when version does not match\n-   */\n-  private void checkDomainApiVersion() throws Exception {\n-    boolean result = false;\n-    LoggerHelper.getLocal().log(\n-        Level.INFO,\n-        \"Checking for the domain apiVersion \"\n-            + getDomainApiVersion()\n-            + \" in a loop for up to 15 minutes\");\n-    for (int i = 0; i < 120; i++) {\n-      ExecResult exec =\n-          TestUtils.exec(\n-              \"kubectl get domain -n \" + DOM_NS + \"  \" + DUID + \" -o jsonpath={.apiVersion}\", true);\n-      if (exec.stdout().contains(getDomainApiVersion())) {\n-        int ttime = 10 * (i - 1); \n-        LoggerHelper.getLocal().log(Level.INFO, \"Got the expected API Version after [\" + ttime + \"] Seconds\");\n-        result = true;\n-        break;\n-      }\n-      Thread.sleep(1000 * 10);\n-    }\n-    if (!result) {\n-      throw new RuntimeException(\"FAILURE: Didn't get the expected API Version\");\n-    }\n-  }\n-\n   /**\n    * Checks the expected Upgraded Version of CustomResourceDefintion (CRD) \n    * in default NameSpace in a loop. \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwMDY3Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397200677", "bodyText": "does this need to be a RuntimeException? not just a regular Exception?", "author": "markxnelson", "createdAt": "2020-03-24T14:35:31Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -238,41 +141,74 @@ public void testOperatorUpgradeFrom2_3_0() throws Exception {\n    * @param restart boolean parameter used to determine if a restart of domain is checked\n    * @throws Exception when upgrade fails or basic usecase testing or scaling fails.\n    */\n-  private void upgradeOperator(boolean restart) throws Exception {\n+  private void upgradeOperator() throws Exception {\n     operator.callHelmUpgrade(\"image=\" + OP_TARGET_RELEASE);\n-    if (restart) {\n-      checkDomainRollingRestarted();\n-    }\n-    checkOperatorVersion();\n+    checkDomainNotRestarted();\n+    checkCrdVersion();\n+    // checkDomainApiVersion(); Not Needed \n     testClusterScaling(operator, domain, false);\n   }\n \n   /**\n-   * checks the expected version of the upgraded operator in a loop. In Jenkins it takes nearly 8\n-   * minutes to show the updated value of the domain CRD.\n+   * Checks Expected/Upgraded ApiVersion of the Domain Object in a loop. \n+   * In Jenkins it takes nearly 8 minutes to show the updated value \n+   * \n+   * The .apiVersion of the domain will not be updated until the domain is \n+   * written again (e.g. by the operator when updating status)\n+   * This contributes to long time period. We can skip this check \n    *\n    * @throws Exception when version does not match\n    */\n-  private void checkOperatorVersion() throws Exception {\n+  private void checkDomainApiVersion() throws Exception {\n     boolean result = false;\n     LoggerHelper.getLocal().log(\n         Level.INFO,\n         \"Checking for the domain apiVersion \"\n             + getDomainApiVersion()\n             + \" in a loop for up to 15 minutes\");\n-    for (int i = 0; i < 900; i = i + 10) {\n+    for (int i = 0; i < 120; i++) {\n       ExecResult exec =\n           TestUtils.exec(\n               \"kubectl get domain -n \" + DOM_NS + \"  \" + DUID + \" -o jsonpath={.apiVersion}\", true);\n       if (exec.stdout().contains(getDomainApiVersion())) {\n-        LoggerHelper.getLocal().log(Level.INFO, \"Got the expected apiVersion\");\n+        int ttime = 10 * (i - 1); \n+        LoggerHelper.getLocal().log(Level.INFO, \"Got the expected API Version after [\" + ttime + \"] Seconds\");\n+        result = true;\n+        break;\n+      }\n+      Thread.sleep(1000 * 10);\n+    }\n+    if (!result) {\n+      throw new RuntimeException(\"FAILURE: Didn't get the expected API Version\");\n+    }\n+  }\n+\n+  /**\n+   * Checks the expected Upgraded Version of CustomResourceDefintion (CRD) \n+   * in default NameSpace in a loop. \n+   *\n+   * @throws Exception when version does not match\n+   */\n+  private void checkCrdVersion() throws Exception {\n+    boolean result = false;\n+    LoggerHelper.getLocal().log(\n+        Level.INFO,\n+        \"Checking for the CRD Version \"\n+            + getDomainApiVersion()\n+            + \" in a loop for up to 15 minutes\");\n+    for (int i = 0; i < 900; i = i + 10) {\n+      ExecResult exec =\n+          TestUtils.exec(\n+              \"kubectl get crd domains.weblogic.oracle -o jsonpath='{.spec.versions[?(@.storage==true)].name}'\", true);\n+      if (exec.stdout().contains(getCrdVersion())) {\n+        LoggerHelper.getLocal().log(Level.INFO, \"Got expected CRD Version\");\n         result = true;\n         break;\n       }\n       Thread.sleep(1000 * 10);\n     }\n     if (!result) {\n-      throw new RuntimeException(\"FAILURE: Didn't get the expected operator version\");\n+      throw new RuntimeException(\"FAILURE: Didn't get expected CRD Version\");", "originalCommit": "89f9470e812ac564a0208f837bfc153e6ab53657", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI3ODI5Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397278297", "bodyText": "Modified as follows  ..\nthrow new Exception(\"FAILURE: Didn't get expected CRD Version\");", "author": "anpanigr", "createdAt": "2020-03-24T16:13:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwMDY3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMwMjE5Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397302196", "bodyText": "well that's great that you changed it, but the question was does it need to be a RE?", "author": "markxnelson", "createdAt": "2020-03-24T16:43:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwMDY3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyNDMwOQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397524309", "bodyText": "Junit fails when the method throws any Exception, it does not matter it is a RE or simple Exception.", "author": "anpanigr", "createdAt": "2020-03-24T23:33:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwMDY3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "7ef1946602c5913a105db01fcd01b3ac9c5afa30", "chunk": "diff --git a/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java b/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\nindex 6a1bae2f00..d78dfa8ac2 100644\n--- a/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\n+++ b/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\n\n@@ -138,51 +144,18 @@ public class ItOperatorUpgrade extends BaseTest {\n   /**\n    * Upgrades operator to develop branch by using the helm upgrade.\n    *\n-   * @param restart boolean parameter used to determine if a restart of domain is checked\n    * @throws Exception when upgrade fails or basic usecase testing or scaling fails.\n    */\n   private void upgradeOperator() throws Exception {\n     operator.callHelmUpgrade(\"image=\" + OP_TARGET_RELEASE);\n-    checkDomainNotRestarted();\n     checkCrdVersion();\n-    // checkDomainApiVersion(); Not Needed \n+    System.out.println(\"Before Upgrade M1CTS[\" + M1_CTS + \"]\");\n+    System.out.println(\"Before Upgrade M2CTS[\" + M2_CTS + \"]\");\n+    System.out.println(\"Before Upgrade ADMINCTS[\" + ADMIN_CTS + \"]\");\n+    checkDomainNotRestarted();\n     testClusterScaling(operator, domain, false);\n   }\n \n-  /**\n-   * Checks Expected/Upgraded ApiVersion of the Domain Object in a loop. \n-   * In Jenkins it takes nearly 8 minutes to show the updated value \n-   * \n-   * The .apiVersion of the domain will not be updated until the domain is \n-   * written again (e.g. by the operator when updating status)\n-   * This contributes to long time period. We can skip this check \n-   *\n-   * @throws Exception when version does not match\n-   */\n-  private void checkDomainApiVersion() throws Exception {\n-    boolean result = false;\n-    LoggerHelper.getLocal().log(\n-        Level.INFO,\n-        \"Checking for the domain apiVersion \"\n-            + getDomainApiVersion()\n-            + \" in a loop for up to 15 minutes\");\n-    for (int i = 0; i < 120; i++) {\n-      ExecResult exec =\n-          TestUtils.exec(\n-              \"kubectl get domain -n \" + DOM_NS + \"  \" + DUID + \" -o jsonpath={.apiVersion}\", true);\n-      if (exec.stdout().contains(getDomainApiVersion())) {\n-        int ttime = 10 * (i - 1); \n-        LoggerHelper.getLocal().log(Level.INFO, \"Got the expected API Version after [\" + ttime + \"] Seconds\");\n-        result = true;\n-        break;\n-      }\n-      Thread.sleep(1000 * 10);\n-    }\n-    if (!result) {\n-      throw new RuntimeException(\"FAILURE: Didn't get the expected API Version\");\n-    }\n-  }\n-\n   /**\n    * Checks the expected Upgraded Version of CustomResourceDefintion (CRD) \n    * in default NameSpace in a loop. \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxMDI4Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397210282", "bodyText": "none of the javadoc in this file is javadoc compliant.  can you please run javadoc and fix the errors?", "author": "markxnelson", "createdAt": "2020-03-24T14:47:35Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -293,6 +229,20 @@ private void checkDomainRollingRestarted() throws Exception {\n     }\n   }\n \n+  /**\n+   * Check whether the weblogic server instances are still RUNNING ", "originalCommit": "89f9470e812ac564a0208f837bfc153e6ab53657", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI3NDk3MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397274970", "bodyText": "Does the style check plugin does not check for javadoc compatibility. When I run \"javaoc  ItOperatorUpgrade.java\" It only complains about the missing package as follows ...\nItOperatorUpgrade.java:19: error: package org.junit.jupiter.api does not exist\nimport org.junit.jupiter.api.AfterEach;", "author": "anpanigr", "createdAt": "2020-03-24T16:08:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxMDI4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI5OTk1NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397299955", "bodyText": "i get this error:\n/home/mark/jdk-11.0.6/bin/javadoc -private -splitindex -d /home/mark/operator/weblogic-kubernetes-operator/integration-tests/target/site @/tmp/javadoc_args\nLoading source file /home/mark/operator/weblogic-kubernetes-operator/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java...\nConstructing Javadoc information...\nStandard Doclet version 11.0.6\nBuilding tree for all the packages and classes...\nGenerating /home/mark/operator/weblogic-kubernetes-operator/integration-tests/target/site/oracle/kubernetes/operator/ItOperatorUpgrade.html...\n/home/mark/operator/weblogic-kubernetes-operator/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java:141: error: @param name not found\n   * @param restart boolean parameter used to determine if a restart of domain is checked\n            ^\n\nthe ide shows it too:", "author": "markxnelson", "createdAt": "2020-03-24T16:40:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxMDI4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMwMDYzMA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397300630", "bodyText": "", "author": "markxnelson", "createdAt": "2020-03-24T16:41:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxMDI4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2MTkwNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397561906", "bodyText": "Please spell \"WebLogic\" right too", "author": "markxnelson", "createdAt": "2020-03-25T01:40:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxMDI4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU4OTE0OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397589149", "bodyText": "Replaced  WebLogic --> Weblogic", "author": "anpanigr", "createdAt": "2020-03-25T03:24:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxMDI4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgyMDg0NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397820844", "bodyText": "@anpanigr, the product name has the capital L.  The correct name is \"WebLogic\"", "author": "rjeberhard", "createdAt": "2020-03-25T12:37:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxMDI4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzOTAxMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397939011", "bodyText": "i cant see the update - still appears to say weblogic", "author": "markxnelson", "createdAt": "2020-03-25T15:19:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxMDI4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAxNzI4Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r398017283", "bodyText": "Modified in latest commit on March 25", "author": "anpanigr", "createdAt": "2020-03-25T17:00:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIxMDI4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "7ef1946602c5913a105db01fcd01b3ac9c5afa30", "chunk": "diff --git a/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java b/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\nindex 6a1bae2f00..d78dfa8ac2 100644\n--- a/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\n+++ b/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\n\n@@ -231,17 +204,26 @@ public class ItOperatorUpgrade extends BaseTest {\n \n   /**\n    * Check whether the weblogic server instances are still RUNNING \n-   * not restarted due to Operator Upgrade\n+   * not restarted due to Operator Upgrade by comparing the creationTimestamp\n+   * before and after upgrade\n    *\n    * @throws Exception If restarted\n    */\n   private void checkDomainNotRestarted() throws Exception {\n     TestUtils.checkPodReady(DUID + \"-\" + domain.getAdminServerName(), DOM_NS);\n     for (int i = 2; i >= 1; i--) {\n-      LoggerHelper.getLocal().log(Level.INFO,\n-          \"Checking if managed server pod(\" + DUID + \"--managed-server\" + i + \") is RUNNING\");\n-      TestUtils.checkPodReady(DUID + \"-managed-server\" + i, DOM_NS);\n+     TestUtils.checkPodReady(DUID + \"-managed-server\" + i, DOM_NS);\n     }\n+    String m1 = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-managed-server1\");\n+    String m2 = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-managed-server2\");\n+    String admin = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-admin-server\");\n+    System.out.println(\"After Upgrade M1CTS[\" + m1 + \"]\");\n+    System.out.println(\"After Upgrade M2CTS[\" + m2 + \"]\");\n+    System.out.println(\"After Upgrade M2CTS[\" + admin + \"]\");\n+\n+    Assertions.assertEquals(M1_CTS, m1);\n+    Assertions.assertEquals(M2_CTS, m2);\n+    Assertions.assertEquals(ADMIN_CTS, admin);\n   }\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIyMzIxMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397223212", "bodyText": "should check this actually worked by trying to get the crd again", "author": "markxnelson", "createdAt": "2020-03-24T15:03:32Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -89,145 +104,33 @@ public void cleanupOperatorAndDomain() throws Exception {\n         operator.destroy();\n       }\n       TestUtils.exec(\"rm -rf \" + Paths.get(opUpgradeTmpDir).toString());\n+      TestUtils.exec(\"kubectl delete crd domains.weblogic.oracle --ignore-not-found\");", "originalCommit": "89f9470e812ac564a0208f837bfc153e6ab53657", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUyNTEwMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397525101", "bodyText": "This is the cleanup section, when we delete the CRD from default NameSpace after the test is completed, so that it will not interfere with other test", "author": "anpanigr", "createdAt": "2020-03-24T23:35:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIyMzIxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2MTQzMA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397561430", "bodyText": "CRD's are not namespaced, they are at the cluster scope.  So deleting a CRD by definition would almost certainly interfere with other tests.\nThe original question stands though - you are no checking that it was deleted.", "author": "markxnelson", "createdAt": "2020-03-25T01:38:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIyMzIxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYwMjQwNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397602406", "bodyText": "Upgrade test will not be running in parallel with other Tests, so deleting a CRD will not affect any other tests.  I have added an Assertion to make sure CRD is deleted completely form K8s.\nTestUtils.exec(\"kubectl delete crd domains.weblogic.oracle --ignore-not-found\");\n// Make sure domain CRD is deleted form k8s\nExecResult result = TestUtils.exec(\"kubectl get crd domains.weblogic.oracle\");\nAssertions.assertEquals(1, result.exitValue());", "author": "anpanigr", "createdAt": "2020-03-25T04:23:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIyMzIxMg=="}], "type": "inlineReview", "revised_code": {"commit": "7ef1946602c5913a105db01fcd01b3ac9c5afa30", "chunk": "diff --git a/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java b/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\nindex 6a1bae2f00..d78dfa8ac2 100644\n--- a/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\n+++ b/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\n\n@@ -130,6 +132,10 @@ public class ItOperatorUpgrade extends BaseTest {\n     OP_SA = \"operator-sa250\";\n     DUID = \"operatordomain250\";\n     setupOperatorAndDomain(\"release/2.5.0\", \"2.5.0\");\n+\n+    M1_CTS = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-managed-server1\");\n+    M2_CTS = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-managed-server2\");\n+    ADMIN_CTS = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-admin-server\");\n     upgradeOperator();\n     testCompletedSuccessfully = true;\n     LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIyMzY4Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397223683", "bodyText": "there is not restart param in the method signature", "author": "markxnelson", "createdAt": "2020-03-24T15:04:08Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -238,41 +141,74 @@ public void testOperatorUpgradeFrom2_3_0() throws Exception {\n    * @param restart boolean parameter used to determine if a restart of domain is checked", "originalCommit": "89f9470e812ac564a0208f837bfc153e6ab53657", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ef1946602c5913a105db01fcd01b3ac9c5afa30", "chunk": "diff --git a/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java b/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\nindex 6a1bae2f00..d78dfa8ac2 100644\n--- a/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\n+++ b/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\n\n@@ -138,51 +144,18 @@ public class ItOperatorUpgrade extends BaseTest {\n   /**\n    * Upgrades operator to develop branch by using the helm upgrade.\n    *\n-   * @param restart boolean parameter used to determine if a restart of domain is checked\n    * @throws Exception when upgrade fails or basic usecase testing or scaling fails.\n    */\n   private void upgradeOperator() throws Exception {\n     operator.callHelmUpgrade(\"image=\" + OP_TARGET_RELEASE);\n-    checkDomainNotRestarted();\n     checkCrdVersion();\n-    // checkDomainApiVersion(); Not Needed \n+    System.out.println(\"Before Upgrade M1CTS[\" + M1_CTS + \"]\");\n+    System.out.println(\"Before Upgrade M2CTS[\" + M2_CTS + \"]\");\n+    System.out.println(\"Before Upgrade ADMINCTS[\" + ADMIN_CTS + \"]\");\n+    checkDomainNotRestarted();\n     testClusterScaling(operator, domain, false);\n   }\n \n-  /**\n-   * Checks Expected/Upgraded ApiVersion of the Domain Object in a loop. \n-   * In Jenkins it takes nearly 8 minutes to show the updated value \n-   * \n-   * The .apiVersion of the domain will not be updated until the domain is \n-   * written again (e.g. by the operator when updating status)\n-   * This contributes to long time period. We can skip this check \n-   *\n-   * @throws Exception when version does not match\n-   */\n-  private void checkDomainApiVersion() throws Exception {\n-    boolean result = false;\n-    LoggerHelper.getLocal().log(\n-        Level.INFO,\n-        \"Checking for the domain apiVersion \"\n-            + getDomainApiVersion()\n-            + \" in a loop for up to 15 minutes\");\n-    for (int i = 0; i < 120; i++) {\n-      ExecResult exec =\n-          TestUtils.exec(\n-              \"kubectl get domain -n \" + DOM_NS + \"  \" + DUID + \" -o jsonpath={.apiVersion}\", true);\n-      if (exec.stdout().contains(getDomainApiVersion())) {\n-        int ttime = 10 * (i - 1); \n-        LoggerHelper.getLocal().log(Level.INFO, \"Got the expected API Version after [\" + ttime + \"] Seconds\");\n-        result = true;\n-        break;\n-      }\n-      Thread.sleep(1000 * 10);\n-    }\n-    if (!result) {\n-      throw new RuntimeException(\"FAILURE: Didn't get the expected API Version\");\n-    }\n-  }\n-\n   /**\n    * Checks the expected Upgraded Version of CustomResourceDefintion (CRD) \n    * in default NameSpace in a loop. \n"}}, {"oid": "7ef1946602c5913a105db01fcd01b3ac9c5afa30", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7ef1946602c5913a105db01fcd01b3ac9c5afa30", "message": "Added Server creationTimestamp to verify upgrade, resolution to misc review comment", "committedDate": "2020-03-24T23:28:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2MDM2Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397560367", "bodyText": "RuntimeException again?", "author": "markxnelson", "createdAt": "2020-03-25T01:34:20Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -238,41 +141,74 @@ public void testOperatorUpgradeFrom2_3_0() throws Exception {\n    * @param restart boolean parameter used to determine if a restart of domain is checked\n    * @throws Exception when upgrade fails or basic usecase testing or scaling fails.\n    */\n-  private void upgradeOperator(boolean restart) throws Exception {\n+  private void upgradeOperator() throws Exception {\n     operator.callHelmUpgrade(\"image=\" + OP_TARGET_RELEASE);\n-    if (restart) {\n-      checkDomainRollingRestarted();\n-    }\n-    checkOperatorVersion();\n+    checkDomainNotRestarted();\n+    checkCrdVersion();\n+    // checkDomainApiVersion(); Not Needed \n     testClusterScaling(operator, domain, false);\n   }\n \n   /**\n-   * checks the expected version of the upgraded operator in a loop. In Jenkins it takes nearly 8\n-   * minutes to show the updated value of the domain CRD.\n+   * Checks Expected/Upgraded ApiVersion of the Domain Object in a loop. \n+   * In Jenkins it takes nearly 8 minutes to show the updated value \n+   * \n+   * The .apiVersion of the domain will not be updated until the domain is \n+   * written again (e.g. by the operator when updating status)\n+   * This contributes to long time period. We can skip this check \n    *\n    * @throws Exception when version does not match\n    */\n-  private void checkOperatorVersion() throws Exception {\n+  private void checkDomainApiVersion() throws Exception {\n     boolean result = false;\n     LoggerHelper.getLocal().log(\n         Level.INFO,\n         \"Checking for the domain apiVersion \"\n             + getDomainApiVersion()\n             + \" in a loop for up to 15 minutes\");\n-    for (int i = 0; i < 900; i = i + 10) {\n+    for (int i = 0; i < 120; i++) {\n       ExecResult exec =\n           TestUtils.exec(\n               \"kubectl get domain -n \" + DOM_NS + \"  \" + DUID + \" -o jsonpath={.apiVersion}\", true);\n       if (exec.stdout().contains(getDomainApiVersion())) {\n-        LoggerHelper.getLocal().log(Level.INFO, \"Got the expected apiVersion\");\n+        int ttime = 10 * (i - 1); \n+        LoggerHelper.getLocal().log(Level.INFO, \"Got the expected API Version after [\" + ttime + \"] Seconds\");\n+        result = true;\n+        break;\n+      }\n+      Thread.sleep(1000 * 10);\n+    }\n+    if (!result) {\n+      throw new RuntimeException(\"FAILURE: Didn't get the expected API Version\");", "originalCommit": "89f9470e812ac564a0208f837bfc153e6ab53657", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU4MTcwNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397581704", "bodyText": "$ grep RuntimeException  ItOperatorUpgrade.java\n$\nMay be something wring with Review board", "author": "anpanigr", "createdAt": "2020-03-25T02:56:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2MDM2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "780f714a8c454f54dab4fa5bd7253201f093bd08", "chunk": "diff --git a/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java b/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\nindex 6a1bae2f00..d53f50bc50 100644\n--- a/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\n+++ b/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\n\n@@ -138,51 +150,15 @@ public class ItOperatorUpgrade extends BaseTest {\n   /**\n    * Upgrades operator to develop branch by using the helm upgrade.\n    *\n-   * @param restart boolean parameter used to determine if a restart of domain is checked\n    * @throws Exception when upgrade fails or basic usecase testing or scaling fails.\n    */\n   private void upgradeOperator() throws Exception {\n     operator.callHelmUpgrade(\"image=\" + OP_TARGET_RELEASE);\n-    checkDomainNotRestarted();\n     checkCrdVersion();\n-    // checkDomainApiVersion(); Not Needed \n+    checkDomainNotRestarted();\n     testClusterScaling(operator, domain, false);\n   }\n \n-  /**\n-   * Checks Expected/Upgraded ApiVersion of the Domain Object in a loop. \n-   * In Jenkins it takes nearly 8 minutes to show the updated value \n-   * \n-   * The .apiVersion of the domain will not be updated until the domain is \n-   * written again (e.g. by the operator when updating status)\n-   * This contributes to long time period. We can skip this check \n-   *\n-   * @throws Exception when version does not match\n-   */\n-  private void checkDomainApiVersion() throws Exception {\n-    boolean result = false;\n-    LoggerHelper.getLocal().log(\n-        Level.INFO,\n-        \"Checking for the domain apiVersion \"\n-            + getDomainApiVersion()\n-            + \" in a loop for up to 15 minutes\");\n-    for (int i = 0; i < 120; i++) {\n-      ExecResult exec =\n-          TestUtils.exec(\n-              \"kubectl get domain -n \" + DOM_NS + \"  \" + DUID + \" -o jsonpath={.apiVersion}\", true);\n-      if (exec.stdout().contains(getDomainApiVersion())) {\n-        int ttime = 10 * (i - 1); \n-        LoggerHelper.getLocal().log(Level.INFO, \"Got the expected API Version after [\" + ttime + \"] Seconds\");\n-        result = true;\n-        break;\n-      }\n-      Thread.sleep(1000 * 10);\n-    }\n-    if (!result) {\n-      throw new RuntimeException(\"FAILURE: Didn't get the expected API Version\");\n-    }\n-  }\n-\n   /**\n    * Checks the expected Upgraded Version of CustomResourceDefintion (CRD) \n    * in default NameSpace in a loop. \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2MDU2Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397560563", "bodyText": "i could be wrong, but i think a Thread.sleep() needs to be in a try { .. } catch (InterruptedException) {} \n@rjeberhard ?", "author": "markxnelson", "createdAt": "2020-03-25T01:35:12Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -238,41 +141,74 @@ public void testOperatorUpgradeFrom2_3_0() throws Exception {\n    * @param restart boolean parameter used to determine if a restart of domain is checked\n    * @throws Exception when upgrade fails or basic usecase testing or scaling fails.\n    */\n-  private void upgradeOperator(boolean restart) throws Exception {\n+  private void upgradeOperator() throws Exception {\n     operator.callHelmUpgrade(\"image=\" + OP_TARGET_RELEASE);\n-    if (restart) {\n-      checkDomainRollingRestarted();\n-    }\n-    checkOperatorVersion();\n+    checkDomainNotRestarted();\n+    checkCrdVersion();\n+    // checkDomainApiVersion(); Not Needed \n     testClusterScaling(operator, domain, false);\n   }\n \n   /**\n-   * checks the expected version of the upgraded operator in a loop. In Jenkins it takes nearly 8\n-   * minutes to show the updated value of the domain CRD.\n+   * Checks Expected/Upgraded ApiVersion of the Domain Object in a loop. \n+   * In Jenkins it takes nearly 8 minutes to show the updated value \n+   * \n+   * The .apiVersion of the domain will not be updated until the domain is \n+   * written again (e.g. by the operator when updating status)\n+   * This contributes to long time period. We can skip this check \n    *\n    * @throws Exception when version does not match\n    */\n-  private void checkOperatorVersion() throws Exception {\n+  private void checkDomainApiVersion() throws Exception {\n     boolean result = false;\n     LoggerHelper.getLocal().log(\n         Level.INFO,\n         \"Checking for the domain apiVersion \"\n             + getDomainApiVersion()\n             + \" in a loop for up to 15 minutes\");\n-    for (int i = 0; i < 900; i = i + 10) {\n+    for (int i = 0; i < 120; i++) {\n       ExecResult exec =\n           TestUtils.exec(\n               \"kubectl get domain -n \" + DOM_NS + \"  \" + DUID + \" -o jsonpath={.apiVersion}\", true);\n       if (exec.stdout().contains(getDomainApiVersion())) {\n-        LoggerHelper.getLocal().log(Level.INFO, \"Got the expected apiVersion\");\n+        int ttime = 10 * (i - 1); \n+        LoggerHelper.getLocal().log(Level.INFO, \"Got the expected API Version after [\" + ttime + \"] Seconds\");\n+        result = true;\n+        break;\n+      }\n+      Thread.sleep(1000 * 10);", "originalCommit": "89f9470e812ac564a0208f837bfc153e6ab53657", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYwNTE5MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397605190", "bodyText": "Added InterruptedException to the Thread.sleep\ntry {\nThread.sleep(BaseTest.getWaitTimePod() * 1000);\n} catch (InterruptedException e) {\nSystem.out.println(\"Got InterruptedException \" + e);\n}", "author": "anpanigr", "createdAt": "2020-03-25T04:36:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2MDU2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "780f714a8c454f54dab4fa5bd7253201f093bd08", "chunk": "diff --git a/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java b/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\nindex 6a1bae2f00..d53f50bc50 100644\n--- a/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\n+++ b/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\n\n@@ -138,51 +150,15 @@ public class ItOperatorUpgrade extends BaseTest {\n   /**\n    * Upgrades operator to develop branch by using the helm upgrade.\n    *\n-   * @param restart boolean parameter used to determine if a restart of domain is checked\n    * @throws Exception when upgrade fails or basic usecase testing or scaling fails.\n    */\n   private void upgradeOperator() throws Exception {\n     operator.callHelmUpgrade(\"image=\" + OP_TARGET_RELEASE);\n-    checkDomainNotRestarted();\n     checkCrdVersion();\n-    // checkDomainApiVersion(); Not Needed \n+    checkDomainNotRestarted();\n     testClusterScaling(operator, domain, false);\n   }\n \n-  /**\n-   * Checks Expected/Upgraded ApiVersion of the Domain Object in a loop. \n-   * In Jenkins it takes nearly 8 minutes to show the updated value \n-   * \n-   * The .apiVersion of the domain will not be updated until the domain is \n-   * written again (e.g. by the operator when updating status)\n-   * This contributes to long time period. We can skip this check \n-   *\n-   * @throws Exception when version does not match\n-   */\n-  private void checkDomainApiVersion() throws Exception {\n-    boolean result = false;\n-    LoggerHelper.getLocal().log(\n-        Level.INFO,\n-        \"Checking for the domain apiVersion \"\n-            + getDomainApiVersion()\n-            + \" in a loop for up to 15 minutes\");\n-    for (int i = 0; i < 120; i++) {\n-      ExecResult exec =\n-          TestUtils.exec(\n-              \"kubectl get domain -n \" + DOM_NS + \"  \" + DUID + \" -o jsonpath={.apiVersion}\", true);\n-      if (exec.stdout().contains(getDomainApiVersion())) {\n-        int ttime = 10 * (i - 1); \n-        LoggerHelper.getLocal().log(Level.INFO, \"Got the expected API Version after [\" + ttime + \"] Seconds\");\n-        result = true;\n-        break;\n-      }\n-      Thread.sleep(1000 * 10);\n-    }\n-    if (!result) {\n-      throw new RuntimeException(\"FAILURE: Didn't get the expected API Version\");\n-    }\n-  }\n-\n   /**\n    * Checks the expected Upgraded Version of CustomResourceDefintion (CRD) \n    * in default NameSpace in a loop. \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2MTU3Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397561572", "bodyText": "log? not sop?", "author": "markxnelson", "createdAt": "2020-03-25T01:38:46Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -89,190 +106,82 @@ public void cleanupOperatorAndDomain() throws Exception {\n         operator.destroy();\n       }\n       TestUtils.exec(\"rm -rf \" + Paths.get(opUpgradeTmpDir).toString());\n+      TestUtils.exec(\"kubectl delete crd domains.weblogic.oracle --ignore-not-found\");\n       //ExecResult result = cleanup();\n       LoggerHelper.getLocal().log(Level.INFO, \"+++++++++++++++Done AfterTest cleanup+++++++++++++++++++++\");\n     }\n   }\n \n   /**\n-   * Test for upgrading Operator from release 2.0 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_0() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator20\";\n-    OP_DEP_NAME = \"operator-upgrade20\";\n-    OP_SA = \"operator-sa20\";\n-    DOM_NS = \"weblogic-domain20\";\n-    DUID = \"operatordomain20\";\n-    setupOperatorAndDomain(\"2.0\", \"2.0\");\n-    upgradeOperator(true);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.0.1 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_0_1() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator201\";\n-    OP_DEP_NAME = \"operator-upgrade201\";\n-    OP_SA = \"operator-sa201\";\n-    DOM_NS = \"weblogic-domain201\";\n-    DUID = \"operatordomain201\";\n-    setupOperatorAndDomain(\"release/2.0.1\", \"2.0.1\");\n-    upgradeOperator(true);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.1 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_1() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator21\";\n-    OP_DEP_NAME = \"operator-upgrade21\";\n-    OP_SA = \"operator-sa21\";\n-    DOM_NS = \"weblogic-domain21\";\n-    DUID = \"operatordomain21\";\n-    setupOperatorAndDomain(\"release/2.1\", \"2.1\");\n-    upgradeOperator(false);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.2.0 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_2_0() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator220\";\n-    OP_DEP_NAME = \"operator-upgrade220\";\n-    OP_SA = \"operator-sa220\";\n-    DOM_NS = \"weblogic-domain220\";\n-    DUID = \"operatordomain220\";\n-    setupOperatorAndDomain(\"release/2.2\", \"2.2.0\");\n-    upgradeOperator(false);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.2.1 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_2_1() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator221\";\n-    OP_DEP_NAME = \"operator-upgrade221\";\n-    OP_SA = \"operator-sa221\";\n-    DOM_NS = \"weblogic-domain221\";\n-    DUID = \"operatordomain221\";\n-    setupOperatorAndDomain(\"release/2.2.1\", \"2.2.1\");\n-    upgradeOperator(false);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.3.0 to develop branch.\n+   * Test for upgrading Operator from release 2.5.0 to develop branch.\n    *\n    * @throws Exception when upgrade fails\n    */\n   @Test\n-  public void testOperatorUpgradeFrom2_3_0() throws Exception {\n+  public void testOperatorUpgradeFrom2_5_0() throws Exception {\n     Assumptions.assumeTrue(QUICKTEST);\n     testCompletedSuccessfully = false;\n     String testMethod = new Object() {\n     }.getClass().getEnclosingMethod().getName();\n     logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator230\";\n-    OP_DEP_NAME = \"operator-upgrade230\";\n-    OP_SA = \"operator-sa230\";\n-    DOM_NS = \"weblogic-domain230\";\n-    DUID = \"operatordomain230\";\n-    setupOperatorAndDomain(\"release/2.3.0\", \"2.3.0\");\n-    upgradeOperator(false);\n+    OP_NS = \"weblogic-operator250\";\n+    DOM_NS = \"weblogic-domain250\";\n+    namespaceList.append(OP_NS);\n+    namespaceList.append(\" \").append(DOM_NS);\n+    OP_DEP_NAME = \"operator-upgrade250\";\n+    OP_SA = \"operator-sa250\";\n+    DUID = \"operatordomain250\";\n+    setupOperatorAndDomain(\"release/2.5.0\", \"2.5.0\");\n+\n+    M1_CTS = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-managed-server1\");\n+    M2_CTS = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-managed-server2\");\n+    ADMIN_CTS = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-admin-server\");\n+    upgradeOperator();\n     testCompletedSuccessfully = true;\n     LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n   }\n \n   /**\n    * Upgrades operator to develop branch by using the helm upgrade.\n    *\n-   * @param restart boolean parameter used to determine if a restart of domain is checked\n    * @throws Exception when upgrade fails or basic usecase testing or scaling fails.\n    */\n-  private void upgradeOperator(boolean restart) throws Exception {\n+  private void upgradeOperator() throws Exception {\n     operator.callHelmUpgrade(\"image=\" + OP_TARGET_RELEASE);\n-    if (restart) {\n-      checkDomainRollingRestarted();\n-    }\n-    checkOperatorVersion();\n+    checkCrdVersion();\n+    System.out.println(\"Before Upgrade M1CTS[\" + M1_CTS + \"]\");", "originalCommit": "7ef1946602c5913a105db01fcd01b3ac9c5afa30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2MzA3MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397563071", "bodyText": "same comment as below - what does M1CTS mean to the person who has to read this log message?", "author": "markxnelson", "createdAt": "2020-03-25T01:44:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2MTU3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU4NTc0Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397585743", "bodyText": "Move the information to testOperatorUpgradeFrom2_5_0() with detail info\n// Save the CreateTimeStamp for the server pod(s) to compare with CreateTimeStamp after upgrade to make sure the pod(s) are not re-stated\nManaged1_CreateTimeStamp = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-managed-server1\");\nManaged2_CreateTimeStamp = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-managed-server2\");\nAdmin_CreateTimeStamp = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-admin-server\");\nSystem.out.println(\"Before Upgrade CreateTimeStamp for managed-server1 pod [\" + Managed1_CreateTimeStamp + \"]\");\nSystem.out.println(\"Before Upgrade CreateTimeStamp for managed-server2 pod [\" + Managed2_CreateTimeStamp + \"]\");\nSystem.out.println(\"Before Upgrade CreateTimeStamp for admin-server pod [\" + Admin_CreateTimeStamp + \"]\");", "author": "anpanigr", "createdAt": "2020-03-25T03:11:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2MTU3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "780f714a8c454f54dab4fa5bd7253201f093bd08", "chunk": "diff --git a/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java b/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\nindex d78dfa8ac2..d53f50bc50 100644\n--- a/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\n+++ b/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\n\n@@ -107,7 +106,9 @@ public class ItOperatorUpgrade extends BaseTest {\n       }\n       TestUtils.exec(\"rm -rf \" + Paths.get(opUpgradeTmpDir).toString());\n       TestUtils.exec(\"kubectl delete crd domains.weblogic.oracle --ignore-not-found\");\n-      //ExecResult result = cleanup();\n+      // Make sure domain CRD is deleted form k8s \n+      ExecResult result = TestUtils.exec(\"kubectl get crd domains.weblogic.oracle\");\n+      Assertions.assertEquals(1, result.exitValue());\n       LoggerHelper.getLocal().log(Level.INFO, \"+++++++++++++++Done AfterTest cleanup+++++++++++++++++++++\");\n     }\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2MTgzMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397561833", "bodyText": "enclose in try? @rjeberhard ?", "author": "markxnelson", "createdAt": "2020-03-25T01:39:46Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -89,190 +106,82 @@ public void cleanupOperatorAndDomain() throws Exception {\n         operator.destroy();\n       }\n       TestUtils.exec(\"rm -rf \" + Paths.get(opUpgradeTmpDir).toString());\n+      TestUtils.exec(\"kubectl delete crd domains.weblogic.oracle --ignore-not-found\");\n       //ExecResult result = cleanup();\n       LoggerHelper.getLocal().log(Level.INFO, \"+++++++++++++++Done AfterTest cleanup+++++++++++++++++++++\");\n     }\n   }\n \n   /**\n-   * Test for upgrading Operator from release 2.0 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_0() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator20\";\n-    OP_DEP_NAME = \"operator-upgrade20\";\n-    OP_SA = \"operator-sa20\";\n-    DOM_NS = \"weblogic-domain20\";\n-    DUID = \"operatordomain20\";\n-    setupOperatorAndDomain(\"2.0\", \"2.0\");\n-    upgradeOperator(true);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.0.1 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_0_1() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator201\";\n-    OP_DEP_NAME = \"operator-upgrade201\";\n-    OP_SA = \"operator-sa201\";\n-    DOM_NS = \"weblogic-domain201\";\n-    DUID = \"operatordomain201\";\n-    setupOperatorAndDomain(\"release/2.0.1\", \"2.0.1\");\n-    upgradeOperator(true);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.1 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_1() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator21\";\n-    OP_DEP_NAME = \"operator-upgrade21\";\n-    OP_SA = \"operator-sa21\";\n-    DOM_NS = \"weblogic-domain21\";\n-    DUID = \"operatordomain21\";\n-    setupOperatorAndDomain(\"release/2.1\", \"2.1\");\n-    upgradeOperator(false);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.2.0 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_2_0() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator220\";\n-    OP_DEP_NAME = \"operator-upgrade220\";\n-    OP_SA = \"operator-sa220\";\n-    DOM_NS = \"weblogic-domain220\";\n-    DUID = \"operatordomain220\";\n-    setupOperatorAndDomain(\"release/2.2\", \"2.2.0\");\n-    upgradeOperator(false);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.2.1 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_2_1() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator221\";\n-    OP_DEP_NAME = \"operator-upgrade221\";\n-    OP_SA = \"operator-sa221\";\n-    DOM_NS = \"weblogic-domain221\";\n-    DUID = \"operatordomain221\";\n-    setupOperatorAndDomain(\"release/2.2.1\", \"2.2.1\");\n-    upgradeOperator(false);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.3.0 to develop branch.\n+   * Test for upgrading Operator from release 2.5.0 to develop branch.\n    *\n    * @throws Exception when upgrade fails\n    */\n   @Test\n-  public void testOperatorUpgradeFrom2_3_0() throws Exception {\n+  public void testOperatorUpgradeFrom2_5_0() throws Exception {\n     Assumptions.assumeTrue(QUICKTEST);\n     testCompletedSuccessfully = false;\n     String testMethod = new Object() {\n     }.getClass().getEnclosingMethod().getName();\n     logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator230\";\n-    OP_DEP_NAME = \"operator-upgrade230\";\n-    OP_SA = \"operator-sa230\";\n-    DOM_NS = \"weblogic-domain230\";\n-    DUID = \"operatordomain230\";\n-    setupOperatorAndDomain(\"release/2.3.0\", \"2.3.0\");\n-    upgradeOperator(false);\n+    OP_NS = \"weblogic-operator250\";\n+    DOM_NS = \"weblogic-domain250\";\n+    namespaceList.append(OP_NS);\n+    namespaceList.append(\" \").append(DOM_NS);\n+    OP_DEP_NAME = \"operator-upgrade250\";\n+    OP_SA = \"operator-sa250\";\n+    DUID = \"operatordomain250\";\n+    setupOperatorAndDomain(\"release/2.5.0\", \"2.5.0\");\n+\n+    M1_CTS = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-managed-server1\");\n+    M2_CTS = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-managed-server2\");\n+    ADMIN_CTS = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-admin-server\");\n+    upgradeOperator();\n     testCompletedSuccessfully = true;\n     LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n   }\n \n   /**\n    * Upgrades operator to develop branch by using the helm upgrade.\n    *\n-   * @param restart boolean parameter used to determine if a restart of domain is checked\n    * @throws Exception when upgrade fails or basic usecase testing or scaling fails.\n    */\n-  private void upgradeOperator(boolean restart) throws Exception {\n+  private void upgradeOperator() throws Exception {\n     operator.callHelmUpgrade(\"image=\" + OP_TARGET_RELEASE);\n-    if (restart) {\n-      checkDomainRollingRestarted();\n-    }\n-    checkOperatorVersion();\n+    checkCrdVersion();\n+    System.out.println(\"Before Upgrade M1CTS[\" + M1_CTS + \"]\");\n+    System.out.println(\"Before Upgrade M2CTS[\" + M2_CTS + \"]\");\n+    System.out.println(\"Before Upgrade ADMINCTS[\" + ADMIN_CTS + \"]\");\n+    checkDomainNotRestarted();\n     testClusterScaling(operator, domain, false);\n   }\n \n   /**\n-   * checks the expected version of the upgraded operator in a loop. In Jenkins it takes nearly 8\n-   * minutes to show the updated value of the domain CRD.\n+   * Checks the expected Upgraded Version of CustomResourceDefintion (CRD) \n+   * in default NameSpace in a loop. \n    *\n    * @throws Exception when version does not match\n    */\n-  private void checkOperatorVersion() throws Exception {\n+  private void checkCrdVersion() throws Exception {\n     boolean result = false;\n     LoggerHelper.getLocal().log(\n         Level.INFO,\n-        \"Checking for the domain apiVersion \"\n+        \"Checking for the CRD Version \"\n             + getDomainApiVersion()\n             + \" in a loop for up to 15 minutes\");\n-    for (int i = 0; i < 900; i = i + 10) {\n+    for (int i = 0; i < BaseTest.getMaxIterationsPod(); i++) {\n       ExecResult exec =\n           TestUtils.exec(\n-              \"kubectl get domain -n \" + DOM_NS + \"  \" + DUID + \" -o jsonpath={.apiVersion}\", true);\n-      if (exec.stdout().contains(getDomainApiVersion())) {\n-        LoggerHelper.getLocal().log(Level.INFO, \"Got the expected apiVersion\");\n+              \"kubectl get crd domains.weblogic.oracle -o jsonpath='{.spec.versions[?(@.storage==true)].name}'\", true);\n+      if (exec.stdout().contains(getCrdVersion())) {\n+        LoggerHelper.getLocal().log(Level.INFO, \"Got expected CRD Version\");\n         result = true;\n         break;\n       }\n-      Thread.sleep(1000 * 10);\n+      Thread.sleep(BaseTest.getWaitTimePod() * 1000);", "originalCommit": "7ef1946602c5913a105db01fcd01b3ac9c5afa30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYwNzQ4NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397607484", "bodyText": "Added InterruptedException", "author": "anpanigr", "createdAt": "2020-03-25T04:47:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2MTgzMw=="}], "type": "inlineReview", "revised_code": {"commit": "780f714a8c454f54dab4fa5bd7253201f093bd08", "chunk": "diff --git a/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java b/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\nindex d78dfa8ac2..d53f50bc50 100644\n--- a/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\n+++ b/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\n\n@@ -107,7 +106,9 @@ public class ItOperatorUpgrade extends BaseTest {\n       }\n       TestUtils.exec(\"rm -rf \" + Paths.get(opUpgradeTmpDir).toString());\n       TestUtils.exec(\"kubectl delete crd domains.weblogic.oracle --ignore-not-found\");\n-      //ExecResult result = cleanup();\n+      // Make sure domain CRD is deleted form k8s \n+      ExecResult result = TestUtils.exec(\"kubectl get crd domains.weblogic.oracle\");\n+      Assertions.assertEquals(1, result.exitValue());\n       LoggerHelper.getLocal().log(Level.INFO, \"+++++++++++++++Done AfterTest cleanup+++++++++++++++++++++\");\n     }\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2MTk5NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397561995", "bodyText": "log not sop?", "author": "markxnelson", "createdAt": "2020-03-25T01:40:33Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -293,6 +202,29 @@ private void checkDomainRollingRestarted() throws Exception {\n     }\n   }\n \n+  /**\n+   * Check whether the weblogic server instances are still RUNNING \n+   * not restarted due to Operator Upgrade by comparing the creationTimestamp\n+   * before and after upgrade\n+   *\n+   * @throws Exception If restarted\n+   */\n+  private void checkDomainNotRestarted() throws Exception {\n+    TestUtils.checkPodReady(DUID + \"-\" + domain.getAdminServerName(), DOM_NS);\n+    for (int i = 2; i >= 1; i--) {\n+     TestUtils.checkPodReady(DUID + \"-managed-server\" + i, DOM_NS);\n+    }\n+    String m1 = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-managed-server1\");\n+    String m2 = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-managed-server2\");\n+    String admin = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-admin-server\");\n+    System.out.println(\"After Upgrade M1CTS[\" + m1 + \"]\");", "originalCommit": "7ef1946602c5913a105db01fcd01b3ac9c5afa30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2Mjg4Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397562882", "bodyText": "what's an M1CTS?  think of the person reading this log message, who is probably not you. how do they know what this means?", "author": "markxnelson", "createdAt": "2020-03-25T01:44:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2MTk5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU4NDY0NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397584645", "bodyText": "Modified the Log Message as follows ...\nprintln(\"After Upgrade CreateTimeStamp for managed-server1 pod [\" + m1 + \"]\");\nprintln (\"After Upgrade CreateTimeStamp for managed-server2 pod [\" + m2 + \"]\");\nprintln(\"After Upgrade CreateTimeStamp for admin-server pod [\" + admin + \"]\");", "author": "anpanigr", "createdAt": "2020-03-25T03:07:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2MTk5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "780f714a8c454f54dab4fa5bd7253201f093bd08", "chunk": "diff --git a/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java b/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\nindex d78dfa8ac2..d53f50bc50 100644\n--- a/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\n+++ b/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\n\n@@ -212,22 +219,21 @@ public class ItOperatorUpgrade extends BaseTest {\n   private void checkDomainNotRestarted() throws Exception {\n     TestUtils.checkPodReady(DUID + \"-\" + domain.getAdminServerName(), DOM_NS);\n     for (int i = 2; i >= 1; i--) {\n-     TestUtils.checkPodReady(DUID + \"-managed-server\" + i, DOM_NS);\n+      TestUtils.checkPodReady(DUID + \"-managed-server\" + i, DOM_NS);\n     }\n     String m1 = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-managed-server1\");\n     String m2 = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-managed-server2\");\n     String admin = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-admin-server\");\n-    System.out.println(\"After Upgrade M1CTS[\" + m1 + \"]\");\n-    System.out.println(\"After Upgrade M2CTS[\" + m2 + \"]\");\n-    System.out.println(\"After Upgrade M2CTS[\" + admin + \"]\");\n-\n-    Assertions.assertEquals(M1_CTS, m1);\n-    Assertions.assertEquals(M2_CTS, m2);\n-    Assertions.assertEquals(ADMIN_CTS, admin);\n+    System.out.println(\"After Upgrade CreateTimeStamp for managed-server1 pod [\" + m1 + \"]\");\n+    System.out.println(\"After Upgrade CreateTimeStamp for managed-server2 pod [\" + m2 + \"]\");\n+    System.out.println(\"After Upgrade CreateTimeStamp for admin-server pod [\" + admin + \"]\");\n+    Assertions.assertEquals(Managed1_CreateTimeStamp, m1);\n+    Assertions.assertEquals(Managed2_CreateTimeStamp, m2);\n+    Assertions.assertEquals(Admin_CreateTimeStamp, admin);\n   }\n \n   /**\n-   * Creates operator based on operatorRelease passed to it and then creates a WebLogic domain\n+   * Creates operator based on operatorRelease passed to it and then creates a Weblogic domain\n    * controlled by that operator.\n    *\n    * @param operatorGitRelease Git branch name of the operator release version\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2MjE4MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397562180", "bodyText": "missing javadoc", "author": "markxnelson", "createdAt": "2020-03-25T01:41:21Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/utils/TestUtils.java", "diffHunk": "@@ -1980,4 +1980,36 @@ public static ExecResult kubectlpatch(String domainUid, String domainNS, String\n     return exec(cmd, true);\n   }\n \n+  /**", "originalCommit": "7ef1946602c5913a105db01fcd01b3ac9c5afa30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzOTY3OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397939679", "bodyText": "its still missing.....", "author": "markxnelson", "createdAt": "2020-03-25T15:20:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2MjE4MA=="}], "type": "inlineReview", "revised_code": {"commit": "780f714a8c454f54dab4fa5bd7253201f093bd08", "chunk": "diff --git a/integration-tests/src/test/java/oracle/kubernetes/operator/utils/TestUtils.java b/integration-tests/src/test/java/oracle/kubernetes/operator/utils/TestUtils.java\nindex 64a967e61a..1e60cefeb3 100644\n--- a/integration-tests/src/test/java/oracle/kubernetes/operator/utils/TestUtils.java\n+++ b/integration-tests/src/test/java/oracle/kubernetes/operator/utils/TestUtils.java\n\n@@ -1981,8 +1981,9 @@ public class TestUtils {\n   }\n \n   /**\n-   * @param namesapce\n-   * @param pod name\n+   * @param namespace\n+   * @param pod \n+   *\n    * @return creationTimestamp of the Pod \n    * @throws Exception on failure\n    */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2MjI1NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397562254", "bodyText": "log not sop", "author": "markxnelson", "createdAt": "2020-03-25T01:41:39Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/utils/TestUtils.java", "diffHunk": "@@ -1980,4 +1980,36 @@ public static ExecResult kubectlpatch(String domainUid, String domainNS, String\n     return exec(cmd, true);\n   }\n \n+  /**\n+   * @param namesapce\n+   * @param pod name\n+   * @return creationTimestamp of the Pod \n+   * @throws Exception on failure\n+   */\n+  public static String getCreationTimeStamp(String namespace, String pod) throws Exception {\n+    String kcmd = \"kubectl get pod \"\n+              + pod \n+              + \" --namespace \"\n+              + namespace\n+              + \" -o jsonpath='{.metadata.creationTimestamp}'\";\n+    System.out.println(\"KUBECTL CMD \" + kcmd);", "originalCommit": "7ef1946602c5913a105db01fcd01b3ac9c5afa30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU4NjYwMA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397586600", "bodyText": "Removed the Debug print statement.", "author": "anpanigr", "createdAt": "2020-03-25T03:15:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2MjI1NA=="}], "type": "inlineReview", "revised_code": {"commit": "780f714a8c454f54dab4fa5bd7253201f093bd08", "chunk": "diff --git a/integration-tests/src/test/java/oracle/kubernetes/operator/utils/TestUtils.java b/integration-tests/src/test/java/oracle/kubernetes/operator/utils/TestUtils.java\nindex 64a967e61a..1e60cefeb3 100644\n--- a/integration-tests/src/test/java/oracle/kubernetes/operator/utils/TestUtils.java\n+++ b/integration-tests/src/test/java/oracle/kubernetes/operator/utils/TestUtils.java\n\n@@ -1981,8 +1981,9 @@ public class TestUtils {\n   }\n \n   /**\n-   * @param namesapce\n-   * @param pod name\n+   * @param namespace\n+   * @param pod \n+   *\n    * @return creationTimestamp of the Pod \n    * @throws Exception on failure\n    */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2MjMyNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397562326", "bodyText": "missing javadoc.\ntypo in param name", "author": "markxnelson", "createdAt": "2020-03-25T01:41:55Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/utils/TestUtils.java", "diffHunk": "@@ -1980,4 +1980,36 @@ public static ExecResult kubectlpatch(String domainUid, String domainNS, String\n     return exec(cmd, true);\n   }\n \n+  /**\n+   * @param namesapce\n+   * @param pod name\n+   * @return creationTimestamp of the Pod \n+   * @throws Exception on failure\n+   */\n+  public static String getCreationTimeStamp(String namespace, String pod) throws Exception {\n+    String kcmd = \"kubectl get pod \"\n+              + pod \n+              + \" --namespace \"\n+              + namespace\n+              + \" -o jsonpath='{.metadata.creationTimestamp}'\";\n+    System.out.println(\"KUBECTL CMD \" + kcmd);\n+    ExecResult result = ExecCommand.exec(kcmd);\n+    return result.stdout().trim();\n+  }\n+\n+  /**\n+   * @param namesapce", "originalCommit": "7ef1946602c5913a105db01fcd01b3ac9c5afa30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU4Nzc3Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397587777", "bodyText": "fixed the typo", "author": "anpanigr", "createdAt": "2020-03-25T03:19:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2MjMyNg=="}], "type": "inlineReview", "revised_code": {"commit": "780f714a8c454f54dab4fa5bd7253201f093bd08", "chunk": "diff --git a/integration-tests/src/test/java/oracle/kubernetes/operator/utils/TestUtils.java b/integration-tests/src/test/java/oracle/kubernetes/operator/utils/TestUtils.java\nindex 64a967e61a..1e60cefeb3 100644\n--- a/integration-tests/src/test/java/oracle/kubernetes/operator/utils/TestUtils.java\n+++ b/integration-tests/src/test/java/oracle/kubernetes/operator/utils/TestUtils.java\n\n@@ -1981,8 +1981,9 @@ public class TestUtils {\n   }\n \n   /**\n-   * @param namesapce\n-   * @param pod name\n+   * @param namespace\n+   * @param pod \n+   *\n    * @return creationTimestamp of the Pod \n    * @throws Exception on failure\n    */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2MzIxNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397563217", "bodyText": "its kinda weird to get these here, and then print them in the upgradeOperator() method", "author": "markxnelson", "createdAt": "2020-03-25T01:45:33Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -89,190 +106,82 @@ public void cleanupOperatorAndDomain() throws Exception {\n         operator.destroy();\n       }\n       TestUtils.exec(\"rm -rf \" + Paths.get(opUpgradeTmpDir).toString());\n+      TestUtils.exec(\"kubectl delete crd domains.weblogic.oracle --ignore-not-found\");\n       //ExecResult result = cleanup();\n       LoggerHelper.getLocal().log(Level.INFO, \"+++++++++++++++Done AfterTest cleanup+++++++++++++++++++++\");\n     }\n   }\n \n   /**\n-   * Test for upgrading Operator from release 2.0 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_0() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator20\";\n-    OP_DEP_NAME = \"operator-upgrade20\";\n-    OP_SA = \"operator-sa20\";\n-    DOM_NS = \"weblogic-domain20\";\n-    DUID = \"operatordomain20\";\n-    setupOperatorAndDomain(\"2.0\", \"2.0\");\n-    upgradeOperator(true);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.0.1 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_0_1() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator201\";\n-    OP_DEP_NAME = \"operator-upgrade201\";\n-    OP_SA = \"operator-sa201\";\n-    DOM_NS = \"weblogic-domain201\";\n-    DUID = \"operatordomain201\";\n-    setupOperatorAndDomain(\"release/2.0.1\", \"2.0.1\");\n-    upgradeOperator(true);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.1 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_1() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator21\";\n-    OP_DEP_NAME = \"operator-upgrade21\";\n-    OP_SA = \"operator-sa21\";\n-    DOM_NS = \"weblogic-domain21\";\n-    DUID = \"operatordomain21\";\n-    setupOperatorAndDomain(\"release/2.1\", \"2.1\");\n-    upgradeOperator(false);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.2.0 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_2_0() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator220\";\n-    OP_DEP_NAME = \"operator-upgrade220\";\n-    OP_SA = \"operator-sa220\";\n-    DOM_NS = \"weblogic-domain220\";\n-    DUID = \"operatordomain220\";\n-    setupOperatorAndDomain(\"release/2.2\", \"2.2.0\");\n-    upgradeOperator(false);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.2.1 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_2_1() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator221\";\n-    OP_DEP_NAME = \"operator-upgrade221\";\n-    OP_SA = \"operator-sa221\";\n-    DOM_NS = \"weblogic-domain221\";\n-    DUID = \"operatordomain221\";\n-    setupOperatorAndDomain(\"release/2.2.1\", \"2.2.1\");\n-    upgradeOperator(false);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.3.0 to develop branch.\n+   * Test for upgrading Operator from release 2.5.0 to develop branch.\n    *\n    * @throws Exception when upgrade fails\n    */\n   @Test\n-  public void testOperatorUpgradeFrom2_3_0() throws Exception {\n+  public void testOperatorUpgradeFrom2_5_0() throws Exception {\n     Assumptions.assumeTrue(QUICKTEST);\n     testCompletedSuccessfully = false;\n     String testMethod = new Object() {\n     }.getClass().getEnclosingMethod().getName();\n     logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator230\";\n-    OP_DEP_NAME = \"operator-upgrade230\";\n-    OP_SA = \"operator-sa230\";\n-    DOM_NS = \"weblogic-domain230\";\n-    DUID = \"operatordomain230\";\n-    setupOperatorAndDomain(\"release/2.3.0\", \"2.3.0\");\n-    upgradeOperator(false);\n+    OP_NS = \"weblogic-operator250\";\n+    DOM_NS = \"weblogic-domain250\";\n+    namespaceList.append(OP_NS);\n+    namespaceList.append(\" \").append(DOM_NS);\n+    OP_DEP_NAME = \"operator-upgrade250\";\n+    OP_SA = \"operator-sa250\";\n+    DUID = \"operatordomain250\";\n+    setupOperatorAndDomain(\"release/2.5.0\", \"2.5.0\");\n+\n+    M1_CTS = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-managed-server1\");", "originalCommit": "7ef1946602c5913a105db01fcd01b3ac9c5afa30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU4NjM3OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397586378", "bodyText": "Move the CreateTimeStamp Info into @test Method", "author": "anpanigr", "createdAt": "2020-03-25T03:14:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU2MzIxNw=="}], "type": "inlineReview", "revised_code": {"commit": "780f714a8c454f54dab4fa5bd7253201f093bd08", "chunk": "diff --git a/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java b/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\nindex d78dfa8ac2..d53f50bc50 100644\n--- a/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\n+++ b/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\n\n@@ -107,7 +106,9 @@ public class ItOperatorUpgrade extends BaseTest {\n       }\n       TestUtils.exec(\"rm -rf \" + Paths.get(opUpgradeTmpDir).toString());\n       TestUtils.exec(\"kubectl delete crd domains.weblogic.oracle --ignore-not-found\");\n-      //ExecResult result = cleanup();\n+      // Make sure domain CRD is deleted form k8s \n+      ExecResult result = TestUtils.exec(\"kubectl get crd domains.weblogic.oracle\");\n+      Assertions.assertEquals(1, result.exitValue());\n       LoggerHelper.getLocal().log(Level.INFO, \"+++++++++++++++Done AfterTest cleanup+++++++++++++++++++++\");\n     }\n   }\n"}}, {"oid": "780f714a8c454f54dab4fa5bd7253201f093bd08", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/780f714a8c454f54dab4fa5bd7253201f093bd08", "message": "addressed more review comments", "committedDate": "2020-03-25T04:38:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzOTQzNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397939437", "bodyText": "WebLogic spelled wrong", "author": "markxnelson", "createdAt": "2020-03-25T15:20:27Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -293,9 +209,31 @@ private void checkDomainRollingRestarted() throws Exception {\n     }\n   }\n \n+  /**\n+   * Check whether the weblogic server instances are still RUNNING \n+   * not restarted due to Operator Upgrade by comparing the creationTimestamp\n+   * before and after upgrade\n+   *\n+   * @throws Exception If restarted\n+   */\n+  private void checkDomainNotRestarted() throws Exception {\n+    TestUtils.checkPodReady(DUID + \"-\" + domain.getAdminServerName(), DOM_NS);\n+    for (int i = 2; i >= 1; i--) {\n+      TestUtils.checkPodReady(DUID + \"-managed-server\" + i, DOM_NS);\n+    }\n+    String m1 = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-managed-server1\");\n+    String m2 = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-managed-server2\");\n+    String admin = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-admin-server\");\n+    System.out.println(\"After Upgrade CreateTimeStamp for managed-server1 pod [\" + m1 + \"]\");\n+    System.out.println(\"After Upgrade CreateTimeStamp for managed-server2 pod [\" + m2 + \"]\");\n+    System.out.println(\"After Upgrade CreateTimeStamp for admin-server pod [\" + admin + \"]\");\n+    Assertions.assertEquals(Managed1_CreateTimeStamp, m1);\n+    Assertions.assertEquals(Managed2_CreateTimeStamp, m2);\n+    Assertions.assertEquals(Admin_CreateTimeStamp, admin);\n+  }\n \n   /**\n-   * Creates operator based on operatorRelease passed to it and then creates a WebLogic domain\n+   * Creates operator based on operatorRelease passed to it and then creates a Weblogic domain", "originalCommit": "780f714a8c454f54dab4fa5bd7253201f093bd08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI0Njg3Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r398246876", "bodyText": "done", "author": "anpanigr", "createdAt": "2020-03-26T00:16:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzOTQzNw=="}], "type": "inlineReview", "revised_code": {"commit": "05411e0dbee3b2e986ac29affca2ff4a101d648d", "chunk": "diff --git a/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java b/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\nindex d53f50bc50..11b1570704 100644\n--- a/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\n+++ b/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\n\n@@ -210,7 +211,7 @@ public class ItOperatorUpgrade extends BaseTest {\n   }\n \n   /**\n-   * Check whether the weblogic server instances are still RUNNING \n+   * Check whether the WebLogic server instances are still RUNNING \n    * not restarted due to Operator Upgrade by comparing the creationTimestamp\n    * before and after upgrade\n    *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzOTgzMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r397939832", "bodyText": "write javadoc", "author": "markxnelson", "createdAt": "2020-03-25T15:20:57Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/utils/TestUtils.java", "diffHunk": "@@ -1980,4 +1980,37 @@ public static ExecResult kubectlpatch(String domainUid, String domainNS, String\n     return exec(cmd, true);\n   }\n \n+  /**\n+   * @param namespace\n+   * @param pod \n+   *\n+   * @return creationTimestamp of the Pod \n+   * @throws Exception on failure\n+   */\n+  public static String getCreationTimeStamp(String namespace, String pod) throws Exception {\n+    String kcmd = \"kubectl get pod \"\n+              + pod \n+              + \" --namespace \"\n+              + namespace\n+              + \" -o jsonpath='{.metadata.creationTimestamp}'\";\n+    ExecResult result = ExecCommand.exec(kcmd);\n+    return result.stdout().trim();\n+  }\n+\n+  /**\n+   * @param namespace", "originalCommit": "780f714a8c454f54dab4fa5bd7253201f093bd08", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI0NjgxNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r398246816", "bodyText": "done", "author": "anpanigr", "createdAt": "2020-03-26T00:16:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzOTgzMg=="}], "type": "inlineReview", "revised_code": {"commit": "05411e0dbee3b2e986ac29affca2ff4a101d648d", "chunk": "diff --git a/integration-tests/src/test/java/oracle/kubernetes/operator/utils/TestUtils.java b/integration-tests/src/test/java/oracle/kubernetes/operator/utils/TestUtils.java\nindex 1e60cefeb3..dd56795a81 100644\n--- a/integration-tests/src/test/java/oracle/kubernetes/operator/utils/TestUtils.java\n+++ b/integration-tests/src/test/java/oracle/kubernetes/operator/utils/TestUtils.java\n\n@@ -1981,9 +1981,9 @@ public class TestUtils {\n   }\n \n   /**\n-   * @param namespace\n-   * @param pod \n-   *\n+   * Utility method to find CreationTimeStamp for a Pod\n+   * @param namespace namespace for the pod\n+   * @param pod       name of the pod\n    * @return creationTimestamp of the Pod \n    * @throws Exception on failure\n    */\n"}}, {"oid": "05411e0dbee3b2e986ac29affca2ff4a101d648d", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/05411e0dbee3b2e986ac29affca2ff4a101d648d", "message": "Resolution to more triage Comment, replace TestUtils.exec with ExecCommand.exec during crd cleanup", "committedDate": "2020-03-25T16:43:52Z", "type": "commit"}, {"oid": "a1b000ce2953ba9768c182d1765629a22ad52e80", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a1b000ce2953ba9768c182d1765629a22ad52e80", "message": "Modified the variable Names", "committedDate": "2020-03-25T22:48:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyNTc2Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r398225762", "bodyText": "yeah, i know it is an exception, you are meant to explain why", "author": "markxnelson", "createdAt": "2020-03-25T23:10:44Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -49,11 +54,24 @@\n    */\n   @BeforeAll\n   public static void staticPrepare() throws Exception {\n+    namespaceList = new StringBuffer();\n     testClassName = new Object() {\n     }.getClass().getEnclosingClass().getSimpleName();\n     initialize(APP_PROPS_FILE, testClassName);\n   }\n \n+  /**\n+   * Releases k8s cluster lease, archives result, pv directories.\n+   *\n+   * @throws Exception exception", "originalCommit": "a1b000ce2953ba9768c182d1765629a22ad52e80", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIzNjAxNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r398236017", "bodyText": "This is standard junit lifecycle method being used across all test classes.   What you want me to explain more here.", "author": "anpanigr", "createdAt": "2020-03-25T23:41:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyNTc2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIzODMyMA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r398238320", "bodyText": "which is better:\n @throws Exception exception\nor\n @throws Exception if unable to collect diagnostics and clean up resources.\nJust because it is done wrong elsewhere, does not make it right to do it wrong here.", "author": "markxnelson", "createdAt": "2020-03-25T23:48:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyNTc2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIzOTc3Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r398239777", "bodyText": "or, you could just say\n   * @throws Exception if tearDown() fails\n   * @see BaseTest#tearDown\n\nwhich produces:", "author": "markxnelson", "createdAt": "2020-03-25T23:52:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyNTc2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI0NjY4NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r398246685", "bodyText": "Added\n@throws Exception if tearDown() fails\n@see BaseTest#tearDown", "author": "anpanigr", "createdAt": "2020-03-26T00:15:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyNTc2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "0a408d4fcb446e2421136bede3b78df784ffea5a", "chunk": "diff --git a/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java b/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\nindex 81bfa3648a..dc90576424 100644\n--- a/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\n+++ b/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\n\n@@ -50,7 +50,7 @@ public class ItOperatorUpgrade extends BaseTest {\n   /**\n    * This method gets called only once before any of the test methods are executed.\n    *\n-   * @throws Exception exception\n+   * @throws Exception exception when test initialization fails\n    */\n   @BeforeAll\n   public static void staticPrepare() throws Exception {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyNjAzMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r398226033", "bodyText": "CRD's are not namespaced resoruces, so this doc is wrong.", "author": "markxnelson", "createdAt": "2020-03-25T23:11:34Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -89,211 +106,110 @@ public void cleanupOperatorAndDomain() throws Exception {\n         operator.destroy();\n       }\n       TestUtils.exec(\"rm -rf \" + Paths.get(opUpgradeTmpDir).toString());\n-      //ExecResult result = cleanup();\n+      TestUtils.exec(\"kubectl delete crd domains.weblogic.oracle --ignore-not-found\");\n+      // Make sure domain CRD is deleted form k8s \n+      ExecResult result = ExecCommand.exec(\"kubectl get crd domains.weblogic.oracle\",true);\n+      Assertions.assertEquals(1, result.exitValue());\n       LoggerHelper.getLocal().log(Level.INFO, \"+++++++++++++++Done AfterTest cleanup+++++++++++++++++++++\");\n     }\n   }\n \n   /**\n-   * Test for upgrading Operator from release 2.0 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_0() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator20\";\n-    OP_DEP_NAME = \"operator-upgrade20\";\n-    OP_SA = \"operator-sa20\";\n-    DOM_NS = \"weblogic-domain20\";\n-    DUID = \"operatordomain20\";\n-    setupOperatorAndDomain(\"2.0\", \"2.0\");\n-    upgradeOperator(true);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.0.1 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_0_1() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator201\";\n-    OP_DEP_NAME = \"operator-upgrade201\";\n-    OP_SA = \"operator-sa201\";\n-    DOM_NS = \"weblogic-domain201\";\n-    DUID = \"operatordomain201\";\n-    setupOperatorAndDomain(\"release/2.0.1\", \"2.0.1\");\n-    upgradeOperator(true);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.1 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_1() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator21\";\n-    OP_DEP_NAME = \"operator-upgrade21\";\n-    OP_SA = \"operator-sa21\";\n-    DOM_NS = \"weblogic-domain21\";\n-    DUID = \"operatordomain21\";\n-    setupOperatorAndDomain(\"release/2.1\", \"2.1\");\n-    upgradeOperator(false);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.2.0 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_2_0() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator220\";\n-    OP_DEP_NAME = \"operator-upgrade220\";\n-    OP_SA = \"operator-sa220\";\n-    DOM_NS = \"weblogic-domain220\";\n-    DUID = \"operatordomain220\";\n-    setupOperatorAndDomain(\"release/2.2\", \"2.2.0\");\n-    upgradeOperator(false);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.2.1 to develop branch.\n+   * Test for upgrading Operator from release 2.5.0 to develop branch.\n    *\n    * @throws Exception when upgrade fails\n    */\n   @Test\n-  public void testOperatorUpgradeFrom2_2_1() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator221\";\n-    OP_DEP_NAME = \"operator-upgrade221\";\n-    OP_SA = \"operator-sa221\";\n-    DOM_NS = \"weblogic-domain221\";\n-    DUID = \"operatordomain221\";\n-    setupOperatorAndDomain(\"release/2.2.1\", \"2.2.1\");\n-    upgradeOperator(false);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.3.0 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_3_0() throws Exception {\n+  public void testOperatorUpgradeFrom2_5_0() throws Exception {\n     Assumptions.assumeTrue(QUICKTEST);\n     testCompletedSuccessfully = false;\n     String testMethod = new Object() {\n     }.getClass().getEnclosingMethod().getName();\n     logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator230\";\n-    OP_DEP_NAME = \"operator-upgrade230\";\n-    OP_SA = \"operator-sa230\";\n-    DOM_NS = \"weblogic-domain230\";\n-    DUID = \"operatordomain230\";\n-    setupOperatorAndDomain(\"release/2.3.0\", \"2.3.0\");\n-    upgradeOperator(false);\n+    OP_NS = \"weblogic-operator250\";\n+    DOM_NS = \"weblogic-domain250\";\n+    namespaceList.append(OP_NS);\n+    namespaceList.append(\" \").append(DOM_NS);\n+    OP_DEP_NAME = \"operator-upgrade250\";\n+    OP_SA = \"operator-sa250\";\n+    DUID = \"operatordomain250\";\n+    setupOperatorAndDomain(\"release/2.5.0\", \"2.5.0\");\n+\n+    // Save the CreateTimeStamp for the server pod(s) to compare with \n+    // CreateTimeStamp after upgrade to make sure the pod(s) are not re-stated\n+    managed1CreateTimeStamp = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-managed-server1\");\n+    managed2CreateTimeStamp = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-managed-server2\");\n+    adminCreateTimeStamp = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-admin-server\");\n+    upgradeOperator();\n     testCompletedSuccessfully = true;\n     LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n   }\n \n   /**\n    * Upgrades operator to develop branch by using the helm upgrade.\n    *\n-   * @param restart boolean parameter used to determine if a restart of domain is checked\n    * @throws Exception when upgrade fails or basic usecase testing or scaling fails.\n    */\n-  private void upgradeOperator(boolean restart) throws Exception {\n+  private void upgradeOperator() throws Exception {\n     operator.callHelmUpgrade(\"image=\" + OP_TARGET_RELEASE);\n-    if (restart) {\n-      checkDomainRollingRestarted();\n-    }\n-    checkOperatorVersion();\n+    checkCrdVersion();\n+    checkDomainNotRestarted();\n     testClusterScaling(operator, domain, false);\n   }\n \n   /**\n-   * checks the expected version of the upgraded operator in a loop. In Jenkins it takes nearly 8\n-   * minutes to show the updated value of the domain CRD.\n+   * Checks the expected Upgraded Version of CustomResourceDefintion (CRD) ", "originalCommit": "a1b000ce2953ba9768c182d1765629a22ad52e80", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI0NjUyOQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r398246529", "bodyText": "Remove the line containing default ns", "author": "anpanigr", "createdAt": "2020-03-26T00:15:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyNjAzMw=="}], "type": "inlineReview", "revised_code": {"commit": "0a408d4fcb446e2421136bede3b78df784ffea5a", "chunk": "diff --git a/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java b/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\nindex 81bfa3648a..dc90576424 100644\n--- a/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\n+++ b/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\n\n@@ -159,23 +159,22 @@ public class ItOperatorUpgrade extends BaseTest {\n \n   /**\n    * Checks the expected Upgraded Version of CustomResourceDefintion (CRD) \n-   * in default NameSpace in a loop. \n    *\n    * @throws Exception when version does not match\n    */\n   private void checkCrdVersion() throws Exception {\n     boolean result = false;\n+    ExecResult exec = null;\n     LoggerHelper.getLocal().log(\n         Level.INFO,\n         \"Checking for the CRD Version \"\n             + getCrdVersion()\n             + \" in a loop \");\n     for (int i = 0; i < BaseTest.getMaxIterationsPod(); i++) {\n-      ExecResult exec =\n-          TestUtils.exec(\n+      exec = TestUtils.exec(\n               \"kubectl get crd domains.weblogic.oracle -o jsonpath='{.spec.versions[?(@.storage==true)].name}'\", true);\n       if (exec.stdout().contains(getCrdVersion())) {\n-        LoggerHelper.getLocal().log(Level.INFO, \"Got expected CRD Version\");\n+        LoggerHelper.getLocal().log(Level.INFO, \"Got Expected CRD Version\");\n         result = true;\n         break;\n       }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyNjI2NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1485#discussion_r398226265", "bodyText": "include in the message what you did get, and what you expected to get", "author": "markxnelson", "createdAt": "2020-03-25T23:12:15Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java", "diffHunk": "@@ -89,211 +106,110 @@ public void cleanupOperatorAndDomain() throws Exception {\n         operator.destroy();\n       }\n       TestUtils.exec(\"rm -rf \" + Paths.get(opUpgradeTmpDir).toString());\n-      //ExecResult result = cleanup();\n+      TestUtils.exec(\"kubectl delete crd domains.weblogic.oracle --ignore-not-found\");\n+      // Make sure domain CRD is deleted form k8s \n+      ExecResult result = ExecCommand.exec(\"kubectl get crd domains.weblogic.oracle\",true);\n+      Assertions.assertEquals(1, result.exitValue());\n       LoggerHelper.getLocal().log(Level.INFO, \"+++++++++++++++Done AfterTest cleanup+++++++++++++++++++++\");\n     }\n   }\n \n   /**\n-   * Test for upgrading Operator from release 2.0 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_0() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator20\";\n-    OP_DEP_NAME = \"operator-upgrade20\";\n-    OP_SA = \"operator-sa20\";\n-    DOM_NS = \"weblogic-domain20\";\n-    DUID = \"operatordomain20\";\n-    setupOperatorAndDomain(\"2.0\", \"2.0\");\n-    upgradeOperator(true);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.0.1 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_0_1() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator201\";\n-    OP_DEP_NAME = \"operator-upgrade201\";\n-    OP_SA = \"operator-sa201\";\n-    DOM_NS = \"weblogic-domain201\";\n-    DUID = \"operatordomain201\";\n-    setupOperatorAndDomain(\"release/2.0.1\", \"2.0.1\");\n-    upgradeOperator(true);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.1 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_1() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator21\";\n-    OP_DEP_NAME = \"operator-upgrade21\";\n-    OP_SA = \"operator-sa21\";\n-    DOM_NS = \"weblogic-domain21\";\n-    DUID = \"operatordomain21\";\n-    setupOperatorAndDomain(\"release/2.1\", \"2.1\");\n-    upgradeOperator(false);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.2.0 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_2_0() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator220\";\n-    OP_DEP_NAME = \"operator-upgrade220\";\n-    OP_SA = \"operator-sa220\";\n-    DOM_NS = \"weblogic-domain220\";\n-    DUID = \"operatordomain220\";\n-    setupOperatorAndDomain(\"release/2.2\", \"2.2.0\");\n-    upgradeOperator(false);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.2.1 to develop branch.\n+   * Test for upgrading Operator from release 2.5.0 to develop branch.\n    *\n    * @throws Exception when upgrade fails\n    */\n   @Test\n-  public void testOperatorUpgradeFrom2_2_1() throws Exception {\n-    Assumptions.assumeTrue(FULLTEST);\n-    testCompletedSuccessfully = false;\n-    String testMethod = new Object() {\n-    }.getClass().getEnclosingMethod().getName();\n-    logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator221\";\n-    OP_DEP_NAME = \"operator-upgrade221\";\n-    OP_SA = \"operator-sa221\";\n-    DOM_NS = \"weblogic-domain221\";\n-    DUID = \"operatordomain221\";\n-    setupOperatorAndDomain(\"release/2.2.1\", \"2.2.1\");\n-    upgradeOperator(false);\n-    testCompletedSuccessfully = true;\n-    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n-  }\n-\n-  /**\n-   * Test for upgrading Operator from release 2.3.0 to develop branch.\n-   *\n-   * @throws Exception when upgrade fails\n-   */\n-  @Test\n-  public void testOperatorUpgradeFrom2_3_0() throws Exception {\n+  public void testOperatorUpgradeFrom2_5_0() throws Exception {\n     Assumptions.assumeTrue(QUICKTEST);\n     testCompletedSuccessfully = false;\n     String testMethod = new Object() {\n     }.getClass().getEnclosingMethod().getName();\n     logTestBegin(testMethod);\n-    OP_NS = \"weblogic-operator230\";\n-    OP_DEP_NAME = \"operator-upgrade230\";\n-    OP_SA = \"operator-sa230\";\n-    DOM_NS = \"weblogic-domain230\";\n-    DUID = \"operatordomain230\";\n-    setupOperatorAndDomain(\"release/2.3.0\", \"2.3.0\");\n-    upgradeOperator(false);\n+    OP_NS = \"weblogic-operator250\";\n+    DOM_NS = \"weblogic-domain250\";\n+    namespaceList.append(OP_NS);\n+    namespaceList.append(\" \").append(DOM_NS);\n+    OP_DEP_NAME = \"operator-upgrade250\";\n+    OP_SA = \"operator-sa250\";\n+    DUID = \"operatordomain250\";\n+    setupOperatorAndDomain(\"release/2.5.0\", \"2.5.0\");\n+\n+    // Save the CreateTimeStamp for the server pod(s) to compare with \n+    // CreateTimeStamp after upgrade to make sure the pod(s) are not re-stated\n+    managed1CreateTimeStamp = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-managed-server1\");\n+    managed2CreateTimeStamp = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-managed-server2\");\n+    adminCreateTimeStamp = TestUtils.getCreationTimeStamp(DOM_NS,DUID + \"-admin-server\");\n+    upgradeOperator();\n     testCompletedSuccessfully = true;\n     LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethod);\n   }\n \n   /**\n    * Upgrades operator to develop branch by using the helm upgrade.\n    *\n-   * @param restart boolean parameter used to determine if a restart of domain is checked\n    * @throws Exception when upgrade fails or basic usecase testing or scaling fails.\n    */\n-  private void upgradeOperator(boolean restart) throws Exception {\n+  private void upgradeOperator() throws Exception {\n     operator.callHelmUpgrade(\"image=\" + OP_TARGET_RELEASE);\n-    if (restart) {\n-      checkDomainRollingRestarted();\n-    }\n-    checkOperatorVersion();\n+    checkCrdVersion();\n+    checkDomainNotRestarted();\n     testClusterScaling(operator, domain, false);\n   }\n \n   /**\n-   * checks the expected version of the upgraded operator in a loop. In Jenkins it takes nearly 8\n-   * minutes to show the updated value of the domain CRD.\n+   * Checks the expected Upgraded Version of CustomResourceDefintion (CRD) \n+   * in default NameSpace in a loop. \n    *\n    * @throws Exception when version does not match\n    */\n-  private void checkOperatorVersion() throws Exception {\n+  private void checkCrdVersion() throws Exception {\n     boolean result = false;\n     LoggerHelper.getLocal().log(\n         Level.INFO,\n-        \"Checking for the domain apiVersion \"\n-            + getDomainApiVersion()\n-            + \" in a loop for up to 15 minutes\");\n-    for (int i = 0; i < 900; i = i + 10) {\n+        \"Checking for the CRD Version \"\n+            + getCrdVersion()\n+            + \" in a loop \");\n+    for (int i = 0; i < BaseTest.getMaxIterationsPod(); i++) {\n       ExecResult exec =\n           TestUtils.exec(\n-              \"kubectl get domain -n \" + DOM_NS + \"  \" + DUID + \" -o jsonpath={.apiVersion}\", true);\n-      if (exec.stdout().contains(getDomainApiVersion())) {\n-        LoggerHelper.getLocal().log(Level.INFO, \"Got the expected apiVersion\");\n+              \"kubectl get crd domains.weblogic.oracle -o jsonpath='{.spec.versions[?(@.storage==true)].name}'\", true);\n+      if (exec.stdout().contains(getCrdVersion())) {\n+        LoggerHelper.getLocal().log(Level.INFO, \"Got expected CRD Version\");\n         result = true;\n         break;\n       }\n-      Thread.sleep(1000 * 10);\n+      try { \n+        Thread.sleep(BaseTest.getWaitTimePod() * 1000); \n+      } catch (InterruptedException e) {\n+        LoggerHelper.getLocal().log(Level.INFO,\"Got InterruptedException \" + e);\n+      } \n     }\n     if (!result) {\n-      throw new RuntimeException(\"FAILURE: Didn't get the expected operator version\");\n+      throw new Exception(\"FAILURE: Didn't get expected CRD Version\");", "originalCommit": "a1b000ce2953ba9768c182d1765629a22ad52e80", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0a408d4fcb446e2421136bede3b78df784ffea5a", "chunk": "diff --git a/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java b/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\nindex 81bfa3648a..dc90576424 100644\n--- a/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\n+++ b/integration-tests/src/test/java/oracle/kubernetes/operator/ItOperatorUpgrade.java\n\n@@ -159,23 +159,22 @@ public class ItOperatorUpgrade extends BaseTest {\n \n   /**\n    * Checks the expected Upgraded Version of CustomResourceDefintion (CRD) \n-   * in default NameSpace in a loop. \n    *\n    * @throws Exception when version does not match\n    */\n   private void checkCrdVersion() throws Exception {\n     boolean result = false;\n+    ExecResult exec = null;\n     LoggerHelper.getLocal().log(\n         Level.INFO,\n         \"Checking for the CRD Version \"\n             + getCrdVersion()\n             + \" in a loop \");\n     for (int i = 0; i < BaseTest.getMaxIterationsPod(); i++) {\n-      ExecResult exec =\n-          TestUtils.exec(\n+      exec = TestUtils.exec(\n               \"kubectl get crd domains.weblogic.oracle -o jsonpath='{.spec.versions[?(@.storage==true)].name}'\", true);\n       if (exec.stdout().contains(getCrdVersion())) {\n-        LoggerHelper.getLocal().log(Level.INFO, \"Got expected CRD Version\");\n+        LoggerHelper.getLocal().log(Level.INFO, \"Got Expected CRD Version\");\n         result = true;\n         break;\n       }\n"}}, {"oid": "0a408d4fcb446e2421136bede3b78df784ffea5a", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0a408d4fcb446e2421136bede3b78df784ffea5a", "message": "Added more info to Exception", "committedDate": "2020-03-26T00:17:08Z", "type": "commit"}, {"oid": "28a406382fc7e4c35bb5dacaf5de5b743e2802fd", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/28a406382fc7e4c35bb5dacaf5de5b743e2802fd", "message": "Merge branch 'develop' into OWLS-80458", "committedDate": "2020-03-26T20:53:40Z", "type": "commit"}]}