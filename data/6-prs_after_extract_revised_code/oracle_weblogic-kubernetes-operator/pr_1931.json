{"pr_number": 1931, "pr_title": "Integration test for secure nodeport service", "pr_createdAt": "2020-09-17T19:25:14Z", "pr_url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931", "timeline": [{"oid": "8342b309c35a0180e1f9673d5487f32c16606c6c", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8342b309c35a0180e1f9673d5487f32c16606c6c", "message": "Initial check-in", "committedDate": "2020-09-17T19:17:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIwMzYyOQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492203629", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @DisplayName(\"Test secure nodePort service through admin port and default-admin channel in domain CRD in a mii domain\")\n          \n          \n            \n            @DisplayName(\"Test secure nodePort service through admin port and default-admin channel in domain CR in a mii domain\")", "author": "sankarpn", "createdAt": "2020-09-21T16:46:10Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java", "diffHunk": "@@ -0,0 +1,312 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.KIND_REPO;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createConfigMap;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOCRRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the `default-admin` service is provisioned when \n+ * a channel called `default-admin` is added to domain custom resource \n+ * definition and `AdministrationPortEnabled` is set to true.\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test secure nodePort service through admin port and default-admin channel in domain CRD in a mii domain\")", "originalCommit": "8342b309c35a0180e1f9673d5487f32c16606c6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1Mjg4Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492252882", "bodyText": "Modified\n@DisplayName(Test secure nodePort service through admin port and default-admin channel in a mii domain\")", "author": "anpanigr", "createdAt": "2020-09-21T18:10:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIwMzYyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "94e459e05db86120ca95a52ecd0f9dcdf33b1854", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\nindex 66f8dd08de..558b4dab31 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\n\n@@ -64,12 +64,11 @@ import static org.junit.jupiter.api.Assertions.assertTrue;\n \n /**\n  * This test class verifies the `default-admin` service is provisioned when \n- * a channel called `default-admin` is added to domain custom resource \n- * definition and `AdministrationPortEnabled` is set to true.\n+ * a channel called `default-admin` is added to domain resource and \n+ * `AdministrationPortEnabled` is set to true.\n  */\n-\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@DisplayName(\"Test secure nodePort service through admin port and default-admin channel in domain CRD in a mii domain\")\n+@DisplayName(\"Test secure nodePort service through admin port and default-admin channel in a mii domain\")\n @IntegrationTest\n class ItSecureAdminNodePort {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIwMzg4Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492203886", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * definition and `AdministrationPortEnabled` is set to true.\n          \n          \n            \n             * and `AdministrationPortEnabled` is set to true.", "author": "sankarpn", "createdAt": "2020-09-21T16:46:36Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java", "diffHunk": "@@ -0,0 +1,312 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.KIND_REPO;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createConfigMap;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOCRRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the `default-admin` service is provisioned when \n+ * a channel called `default-admin` is added to domain custom resource \n+ * definition and `AdministrationPortEnabled` is set to true.", "originalCommit": "8342b309c35a0180e1f9673d5487f32c16606c6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1Mjk3Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492252973", "bodyText": "done", "author": "anpanigr", "createdAt": "2020-09-21T18:10:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIwMzg4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "94e459e05db86120ca95a52ecd0f9dcdf33b1854", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\nindex 66f8dd08de..558b4dab31 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\n\n@@ -64,12 +64,11 @@ import static org.junit.jupiter.api.Assertions.assertTrue;\n \n /**\n  * This test class verifies the `default-admin` service is provisioned when \n- * a channel called `default-admin` is added to domain custom resource \n- * definition and `AdministrationPortEnabled` is set to true.\n+ * a channel called `default-admin` is added to domain resource and \n+ * `AdministrationPortEnabled` is set to true.\n  */\n-\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@DisplayName(\"Test secure nodePort service through admin port and default-admin channel in domain CRD in a mii domain\")\n+@DisplayName(\"Test secure nodePort service through admin port and default-admin channel in a mii domain\")\n @IntegrationTest\n class ItSecureAdminNodePort {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIwNDI4Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492204282", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @TestMethodOrder(MethodOrderer.OrderAnnotation.class)", "author": "sankarpn", "createdAt": "2020-09-21T16:47:16Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java", "diffHunk": "@@ -0,0 +1,312 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.KIND_REPO;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createConfigMap;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOCRRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the `default-admin` service is provisioned when \n+ * a channel called `default-admin` is added to domain custom resource \n+ * definition and `AdministrationPortEnabled` is set to true.\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)", "originalCommit": "8342b309c35a0180e1f9673d5487f32c16606c6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk0ODUxOQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492948519", "bodyText": "removed the empty line", "author": "anpanigr", "createdAt": "2020-09-22T18:29:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIwNDI4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "94e459e05db86120ca95a52ecd0f9dcdf33b1854", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\nindex 66f8dd08de..558b4dab31 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\n\n@@ -64,12 +64,11 @@ import static org.junit.jupiter.api.Assertions.assertTrue;\n \n /**\n  * This test class verifies the `default-admin` service is provisioned when \n- * a channel called `default-admin` is added to domain custom resource \n- * definition and `AdministrationPortEnabled` is set to true.\n+ * a channel called `default-admin` is added to domain resource and \n+ * `AdministrationPortEnabled` is set to true.\n  */\n-\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@DisplayName(\"Test secure nodePort service through admin port and default-admin channel in domain CRD in a mii domain\")\n+@DisplayName(\"Test secure nodePort service through admin port and default-admin channel in a mii domain\")\n @IntegrationTest\n class ItSecureAdminNodePort {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIwNTA5NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492205095", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Create domain resource definition.\n          \n          \n            \n               * Create domain resource.", "author": "sankarpn", "createdAt": "2020-09-21T16:48:41Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java", "diffHunk": "@@ -0,0 +1,312 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.KIND_REPO;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createConfigMap;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOCRRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the `default-admin` service is provisioned when \n+ * a channel called `default-admin` is added to domain custom resource \n+ * definition and `AdministrationPortEnabled` is set to true.\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test secure nodePort service through admin port and default-admin channel in domain CRD in a mii domain\")\n+@IntegrationTest\n+class ItSecureAdminNodePort {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String wlsBaseImage = WLS_BASE_IMAGE_NAME + \":\" + WLS_BASE_IMAGE_TAG;\n+  private static boolean isUseSecret = true;\n+  private static int replicaCount = 2;\n+  private static final String domainUid = \"mii-default-admin\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private final String adminServerName = \"admin-server\";\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource definition.", "originalCommit": "8342b309c35a0180e1f9673d5487f32c16606c6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1MzI3NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492253274", "bodyText": "done", "author": "anpanigr", "createdAt": "2020-09-21T18:11:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIwNTA5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "94e459e05db86120ca95a52ecd0f9dcdf33b1854", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\nindex 66f8dd08de..558b4dab31 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\n\n@@ -64,12 +64,11 @@ import static org.junit.jupiter.api.Assertions.assertTrue;\n \n /**\n  * This test class verifies the `default-admin` service is provisioned when \n- * a channel called `default-admin` is added to domain custom resource \n- * definition and `AdministrationPortEnabled` is set to true.\n+ * a channel called `default-admin` is added to domain resource and \n+ * `AdministrationPortEnabled` is set to true.\n  */\n-\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@DisplayName(\"Test secure nodePort service through admin port and default-admin channel in domain CRD in a mii domain\")\n+@DisplayName(\"Test secure nodePort service through admin port and default-admin channel in a mii domain\")\n @IntegrationTest\n class ItSecureAdminNodePort {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIwNTU2NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492205564", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                logger.info(\"Creating unique namespace for Operator\");\n          \n          \n            \n                logger.info(\"Assigning unique namespace for Operator\");", "author": "sankarpn", "createdAt": "2020-09-21T16:49:25Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java", "diffHunk": "@@ -0,0 +1,312 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.KIND_REPO;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createConfigMap;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOCRRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the `default-admin` service is provisioned when \n+ * a channel called `default-admin` is added to domain custom resource \n+ * definition and `AdministrationPortEnabled` is set to true.\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test secure nodePort service through admin port and default-admin channel in domain CRD in a mii domain\")\n+@IntegrationTest\n+class ItSecureAdminNodePort {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String wlsBaseImage = WLS_BASE_IMAGE_NAME + \":\" + WLS_BASE_IMAGE_TAG;\n+  private static boolean isUseSecret = true;\n+  private static int replicaCount = 2;\n+  private static final String domainUid = \"mii-default-admin\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private final String adminServerName = \"admin-server\";\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource definition.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");", "originalCommit": "8342b309c35a0180e1f9673d5487f32c16606c6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1MzQ1NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492253454", "bodyText": "Replaced Creating ->Assigning", "author": "anpanigr", "createdAt": "2020-09-21T18:11:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIwNTU2NA=="}], "type": "inlineReview", "revised_code": {"commit": "94e459e05db86120ca95a52ecd0f9dcdf33b1854", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\nindex 66f8dd08de..558b4dab31 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\n\n@@ -64,12 +64,11 @@ import static org.junit.jupiter.api.Assertions.assertTrue;\n \n /**\n  * This test class verifies the `default-admin` service is provisioned when \n- * a channel called `default-admin` is added to domain custom resource \n- * definition and `AdministrationPortEnabled` is set to true.\n+ * a channel called `default-admin` is added to domain resource and \n+ * `AdministrationPortEnabled` is set to true.\n  */\n-\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@DisplayName(\"Test secure nodePort service through admin port and default-admin channel in domain CRD in a mii domain\")\n+@DisplayName(\"Test secure nodePort service through admin port and default-admin channel in a mii domain\")\n @IntegrationTest\n class ItSecureAdminNodePort {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIwNTc2MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492205760", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                logger.info(\"Creating unique namespace for Domain\");\n          \n          \n            \n                logger.info(\"Assigning unique namespace for Domain\");", "author": "sankarpn", "createdAt": "2020-09-21T16:49:43Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java", "diffHunk": "@@ -0,0 +1,312 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.KIND_REPO;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createConfigMap;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOCRRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the `default-admin` service is provisioned when \n+ * a channel called `default-admin` is added to domain custom resource \n+ * definition and `AdministrationPortEnabled` is set to true.\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test secure nodePort service through admin port and default-admin channel in domain CRD in a mii domain\")\n+@IntegrationTest\n+class ItSecureAdminNodePort {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String wlsBaseImage = WLS_BASE_IMAGE_NAME + \":\" + WLS_BASE_IMAGE_TAG;\n+  private static boolean isUseSecret = true;\n+  private static int replicaCount = 2;\n+  private static final String domainUid = \"mii-default-admin\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private final String adminServerName = \"admin-server\";\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource definition.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");", "originalCommit": "8342b309c35a0180e1f9673d5487f32c16606c6c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94e459e05db86120ca95a52ecd0f9dcdf33b1854", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\nindex 66f8dd08de..558b4dab31 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\n\n@@ -64,12 +64,11 @@ import static org.junit.jupiter.api.Assertions.assertTrue;\n \n /**\n  * This test class verifies the `default-admin` service is provisioned when \n- * a channel called `default-admin` is added to domain custom resource \n- * definition and `AdministrationPortEnabled` is set to true.\n+ * a channel called `default-admin` is added to domain resource and \n+ * `AdministrationPortEnabled` is set to true.\n  */\n-\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@DisplayName(\"Test secure nodePort service through admin port and default-admin channel in domain CRD in a mii domain\")\n+@DisplayName(\"Test secure nodePort service through admin port and default-admin channel in a mii domain\")\n @IntegrationTest\n class ItSecureAdminNodePort {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIwNjM1NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492206354", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n          \n          \n            \n                assertDoesNotThrow(() -> createDomainSecret(adminSecretName, ADMIN_USERNAME_DEFAULT,", "author": "sankarpn", "createdAt": "2020-09-21T16:50:43Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java", "diffHunk": "@@ -0,0 +1,312 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.KIND_REPO;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createConfigMap;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOCRRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the `default-admin` service is provisioned when \n+ * a channel called `default-admin` is added to domain custom resource \n+ * definition and `AdministrationPortEnabled` is set to true.\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test secure nodePort service through admin port and default-admin channel in domain CRD in a mii domain\")\n+@IntegrationTest\n+class ItSecureAdminNodePort {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String wlsBaseImage = WLS_BASE_IMAGE_NAME + \":\" + WLS_BASE_IMAGE_TAG;\n+  private static boolean isUseSecret = true;\n+  private static int replicaCount = 2;\n+  private static final String domainUid = \"mii-default-admin\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private final String adminServerName = \"admin-server\";\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource definition.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",", "originalCommit": "8342b309c35a0180e1f9673d5487f32c16606c6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk2ODU0MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492968541", "bodyText": "modified weblogic--> ADMIN_USERNAME_DEFAULT welcome --> ADMIN_PASSWORD_DEFAULT", "author": "anpanigr", "createdAt": "2020-09-22T19:03:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIwNjM1NA=="}], "type": "inlineReview", "revised_code": {"commit": "94e459e05db86120ca95a52ecd0f9dcdf33b1854", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\nindex 66f8dd08de..558b4dab31 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\n\n@@ -64,12 +64,11 @@ import static org.junit.jupiter.api.Assertions.assertTrue;\n \n /**\n  * This test class verifies the `default-admin` service is provisioned when \n- * a channel called `default-admin` is added to domain custom resource \n- * definition and `AdministrationPortEnabled` is set to true.\n+ * a channel called `default-admin` is added to domain resource and \n+ * `AdministrationPortEnabled` is set to true.\n  */\n-\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@DisplayName(\"Test secure nodePort service through admin port and default-admin channel in domain CRD in a mii domain\")\n+@DisplayName(\"Test secure nodePort service through admin port and default-admin channel in a mii domain\")\n @IntegrationTest\n class ItSecureAdminNodePort {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIwNjUyNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492206527", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"welcome1\", domainNamespace),\n          \n          \n            \n                        ADMIN_PASSWORD_DEFAULT, domainNamespace),", "author": "sankarpn", "createdAt": "2020-09-21T16:51:02Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java", "diffHunk": "@@ -0,0 +1,312 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.KIND_REPO;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createConfigMap;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOCRRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the `default-admin` service is provisioned when \n+ * a channel called `default-admin` is added to domain custom resource \n+ * definition and `AdministrationPortEnabled` is set to true.\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test secure nodePort service through admin port and default-admin channel in domain CRD in a mii domain\")\n+@IntegrationTest\n+class ItSecureAdminNodePort {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String wlsBaseImage = WLS_BASE_IMAGE_NAME + \":\" + WLS_BASE_IMAGE_TAG;\n+  private static boolean isUseSecret = true;\n+  private static int replicaCount = 2;\n+  private static final String domainUid = \"mii-default-admin\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private final String adminServerName = \"admin-server\";\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource definition.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),", "originalCommit": "8342b309c35a0180e1f9673d5487f32c16606c6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk2ODY2Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492968662", "bodyText": "modified weblogic--> ADMIN_USERNAME_DEFAULT welcome --> ADMIN_PASSWORD_DEFAULT", "author": "anpanigr", "createdAt": "2020-09-22T19:03:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIwNjUyNw=="}], "type": "inlineReview", "revised_code": {"commit": "94e459e05db86120ca95a52ecd0f9dcdf33b1854", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\nindex 66f8dd08de..558b4dab31 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\n\n@@ -64,12 +64,11 @@ import static org.junit.jupiter.api.Assertions.assertTrue;\n \n /**\n  * This test class verifies the `default-admin` service is provisioned when \n- * a channel called `default-admin` is added to domain custom resource \n- * definition and `AdministrationPortEnabled` is set to true.\n+ * a channel called `default-admin` is added to domain resource and \n+ * `AdministrationPortEnabled` is set to true.\n  */\n-\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@DisplayName(\"Test secure nodePort service through admin port and default-admin channel in domain CRD in a mii domain\")\n+@DisplayName(\"Test secure nodePort service through admin port and default-admin channel in a mii domain\")\n @IntegrationTest\n class ItSecureAdminNodePort {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIwODUyNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492208527", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Create a domain CRD with a channel with the name `default-admin`.\n          \n          \n            \n               * Create a domain CR with a channel `default-admin`.", "author": "sankarpn", "createdAt": "2020-09-21T16:54:35Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java", "diffHunk": "@@ -0,0 +1,312 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.KIND_REPO;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createConfigMap;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOCRRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the `default-admin` service is provisioned when \n+ * a channel called `default-admin` is added to domain custom resource \n+ * definition and `AdministrationPortEnabled` is set to true.\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test secure nodePort service through admin port and default-admin channel in domain CRD in a mii domain\")\n+@IntegrationTest\n+class ItSecureAdminNodePort {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String wlsBaseImage = WLS_BASE_IMAGE_NAME + \":\" + WLS_BASE_IMAGE_TAG;\n+  private static boolean isUseSecret = true;\n+  private static int replicaCount = 2;\n+  private static final String domainUid = \"mii-default-admin\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private final String adminServerName = \"admin-server\";\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource definition.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \n+            \"weblogicenc\", \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"default-admin-configmap\";\n+    String yamlString = \"topology:\\n\"\n+        + \"  AdministrationPortEnabled: true\\n\"\n+        + \"  AdministrationPort: '9010'\\n\";\n+\n+    createModelConfigMap(configMapName, yamlString);\n+\n+    //determine if the tests are running in Kind cluster. if true use images from Kind registry\n+    if (KIND_REPO != null) {\n+      String kindRepoImage = KIND_REPO + wlsBaseImage.substring(TestConstants.OCR_REGISTRY.length() + 1);\n+      logger.info(\"Using image {0}\", kindRepoImage);\n+      wlsBaseImage = kindRepoImage;\n+      isUseSecret = false;\n+    } else {\n+      // create pull secrets for WebLogic image when running in non Kind Kubernetes cluster\n+      createOCRRepoSecret(domainNamespace);\n+    }\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify all k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+    logger.info(\"Check admin service and pod {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReadyAndServiceExists(adminServerPodName, domainUid, domainNamespace);\n+    // check managed server services and pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server services and pods are created in namespace {0}\",\n+          domainNamespace);\n+      checkPodReadyAndServiceExists(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+  }\n+\n+  /**\n+   * Create a WebLogic domain with `AdministrationPortEnabled: true`.\n+   * Create a domain CRD with a channel with the name `default-admin`.", "originalCommit": "8342b309c35a0180e1f9673d5487f32c16606c6c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94e459e05db86120ca95a52ecd0f9dcdf33b1854", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\nindex 66f8dd08de..558b4dab31 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\n\n@@ -64,12 +64,11 @@ import static org.junit.jupiter.api.Assertions.assertTrue;\n \n /**\n  * This test class verifies the `default-admin` service is provisioned when \n- * a channel called `default-admin` is added to domain custom resource \n- * definition and `AdministrationPortEnabled` is set to true.\n+ * a channel called `default-admin` is added to domain resource and \n+ * `AdministrationPortEnabled` is set to true.\n  */\n-\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@DisplayName(\"Test secure nodePort service through admin port and default-admin channel in domain CRD in a mii domain\")\n+@DisplayName(\"Test secure nodePort service through admin port and default-admin channel in a mii domain\")\n @IntegrationTest\n class ItSecureAdminNodePort {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIwOTA4Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492209083", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                logger.info(\"Executing defaukt-admin nodeport curl command {0}\", curlCmd);\n          \n          \n            \n                logger.info(\"Executing default-admin nodeport curl command {0}\", curlCmd);", "author": "sankarpn", "createdAt": "2020-09-21T16:55:25Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java", "diffHunk": "@@ -0,0 +1,312 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.KIND_REPO;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createConfigMap;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOCRRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the `default-admin` service is provisioned when \n+ * a channel called `default-admin` is added to domain custom resource \n+ * definition and `AdministrationPortEnabled` is set to true.\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test secure nodePort service through admin port and default-admin channel in domain CRD in a mii domain\")\n+@IntegrationTest\n+class ItSecureAdminNodePort {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String wlsBaseImage = WLS_BASE_IMAGE_NAME + \":\" + WLS_BASE_IMAGE_TAG;\n+  private static boolean isUseSecret = true;\n+  private static int replicaCount = 2;\n+  private static final String domainUid = \"mii-default-admin\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private final String adminServerName = \"admin-server\";\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource definition.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \n+            \"weblogicenc\", \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"default-admin-configmap\";\n+    String yamlString = \"topology:\\n\"\n+        + \"  AdministrationPortEnabled: true\\n\"\n+        + \"  AdministrationPort: '9010'\\n\";\n+\n+    createModelConfigMap(configMapName, yamlString);\n+\n+    //determine if the tests are running in Kind cluster. if true use images from Kind registry\n+    if (KIND_REPO != null) {\n+      String kindRepoImage = KIND_REPO + wlsBaseImage.substring(TestConstants.OCR_REGISTRY.length() + 1);\n+      logger.info(\"Using image {0}\", kindRepoImage);\n+      wlsBaseImage = kindRepoImage;\n+      isUseSecret = false;\n+    } else {\n+      // create pull secrets for WebLogic image when running in non Kind Kubernetes cluster\n+      createOCRRepoSecret(domainNamespace);\n+    }\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify all k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+    logger.info(\"Check admin service and pod {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReadyAndServiceExists(adminServerPodName, domainUid, domainNamespace);\n+    // check managed server services and pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server services and pods are created in namespace {0}\",\n+          domainNamespace);\n+      checkPodReadyAndServiceExists(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+  }\n+\n+  /**\n+   * Create a WebLogic domain with `AdministrationPortEnabled: true`.\n+   * Create a domain CRD with a channel with the name `default-admin`.\n+   * Make sure an external NodePort service is created in domain namespace.\n+   * Make sure WebLogic console is accessible through the `default-admin` service.  \n+   * Make sure WebLogic console is not accessible through the `default` service.  \n+   */\n+  @Test\n+  @DisplayName(\"Verify the secure service through administration port\")\n+  public void testVerifyAdminPortService() {\n+    int sslNodePort = getServiceNodePort(\n+         domainNamespace, adminServerPodName + \"-external\", \"default-admin\");\n+    logger.info(\"Found the administration service nodePort {0}\", sslNodePort);\n+    String curlCmd = \"curl -sk --show-error --noproxy '*' \"\n+        + \" https://\" + K8S_NODEPORT_HOST + \":\" + sslNodePort\n+        + \"/console/login/LoginForm.jsp --write-out %{http_code} -o /dev/null\";\n+    logger.info(\"Executing defaukt-admin nodeport curl command {0}\", curlCmd);", "originalCommit": "8342b309c35a0180e1f9673d5487f32c16606c6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk2OTE5MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492969191", "bodyText": "done", "author": "anpanigr", "createdAt": "2020-09-22T19:04:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIwOTA4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "94e459e05db86120ca95a52ecd0f9dcdf33b1854", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\nindex 66f8dd08de..558b4dab31 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\n\n@@ -64,12 +64,11 @@ import static org.junit.jupiter.api.Assertions.assertTrue;\n \n /**\n  * This test class verifies the `default-admin` service is provisioned when \n- * a channel called `default-admin` is added to domain custom resource \n- * definition and `AdministrationPortEnabled` is set to true.\n+ * a channel called `default-admin` is added to domain resource and \n+ * `AdministrationPortEnabled` is set to true.\n  */\n-\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@DisplayName(\"Test secure nodePort service through admin port and default-admin channel in domain CRD in a mii domain\")\n+@DisplayName(\"Test secure nodePort service through admin port and default-admin channel in a mii domain\")\n @IntegrationTest\n class ItSecureAdminNodePort {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxMTY4NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492211685", "bodyText": "This doesn't seems to wait until the service is ready, it tries for 10 iterations in 1 second apart.", "author": "sankarpn", "createdAt": "2020-09-21T16:59:56Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java", "diffHunk": "@@ -0,0 +1,312 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.KIND_REPO;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createConfigMap;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOCRRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the `default-admin` service is provisioned when \n+ * a channel called `default-admin` is added to domain custom resource \n+ * definition and `AdministrationPortEnabled` is set to true.\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test secure nodePort service through admin port and default-admin channel in domain CRD in a mii domain\")\n+@IntegrationTest\n+class ItSecureAdminNodePort {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String wlsBaseImage = WLS_BASE_IMAGE_NAME + \":\" + WLS_BASE_IMAGE_TAG;\n+  private static boolean isUseSecret = true;\n+  private static int replicaCount = 2;\n+  private static final String domainUid = \"mii-default-admin\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private final String adminServerName = \"admin-server\";\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource definition.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \n+            \"weblogicenc\", \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"default-admin-configmap\";\n+    String yamlString = \"topology:\\n\"\n+        + \"  AdministrationPortEnabled: true\\n\"\n+        + \"  AdministrationPort: '9010'\\n\";\n+\n+    createModelConfigMap(configMapName, yamlString);\n+\n+    //determine if the tests are running in Kind cluster. if true use images from Kind registry\n+    if (KIND_REPO != null) {\n+      String kindRepoImage = KIND_REPO + wlsBaseImage.substring(TestConstants.OCR_REGISTRY.length() + 1);\n+      logger.info(\"Using image {0}\", kindRepoImage);\n+      wlsBaseImage = kindRepoImage;\n+      isUseSecret = false;\n+    } else {\n+      // create pull secrets for WebLogic image when running in non Kind Kubernetes cluster\n+      createOCRRepoSecret(domainNamespace);\n+    }\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify all k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+    logger.info(\"Check admin service and pod {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReadyAndServiceExists(adminServerPodName, domainUid, domainNamespace);\n+    // check managed server services and pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server services and pods are created in namespace {0}\",\n+          domainNamespace);\n+      checkPodReadyAndServiceExists(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+  }\n+\n+  /**\n+   * Create a WebLogic domain with `AdministrationPortEnabled: true`.\n+   * Create a domain CRD with a channel with the name `default-admin`.\n+   * Make sure an external NodePort service is created in domain namespace.\n+   * Make sure WebLogic console is accessible through the `default-admin` service.  \n+   * Make sure WebLogic console is not accessible through the `default` service.  \n+   */\n+  @Test\n+  @DisplayName(\"Verify the secure service through administration port\")\n+  public void testVerifyAdminPortService() {\n+    int sslNodePort = getServiceNodePort(\n+         domainNamespace, adminServerPodName + \"-external\", \"default-admin\");\n+    logger.info(\"Found the administration service nodePort {0}\", sslNodePort);\n+    String curlCmd = \"curl -sk --show-error --noproxy '*' \"\n+        + \" https://\" + K8S_NODEPORT_HOST + \":\" + sslNodePort\n+        + \"/console/login/LoginForm.jsp --write-out %{http_code} -o /dev/null\";\n+    logger.info(\"Executing defaukt-admin nodeport curl command {0}\", curlCmd);\n+    assertTrue(callWebAppAndWaitTillReady(curlCmd, 10));", "originalCommit": "8342b309c35a0180e1f9673d5487f32c16606c6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxMzQ0Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492213446", "bodyText": "You can use this dynamic wait if you really want to wait till ready.\nwithStandardRetryPolicy\n    .conditionEvaluationListener(\n        condition -> logger.info(\"Waiting for clusterview app in admin server is accessible after restart\"\n            + \"(elapsed time {0} ms, remaining time {1} ms)\",\n            condition.getElapsedTimeInMS(),\n            condition.getRemainingTimeInMS()))\n    .until((Callable<Boolean>) () -> {\n      HttpResponse<String> response = assertDoesNotThrow(() -> OracleHttpClient.get(baseUri + serverListUri, true));\n      return response.statusCode() == 200;\n    });", "author": "sankarpn", "createdAt": "2020-09-21T17:02:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxMTY4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA4OTQwMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r493089402", "bodyText": "Now I have added a check for the NodePort Service to make sure that, it finds a valid integer port.\nint nodePort = getServiceNodePort(\n       domainNamespace, adminServerPodName + \"-external\", \"default\");\nassertTrue(nodePort != -1 ,  \"Could not get the default external service node port\");", "author": "anpanigr", "createdAt": "2020-09-22T23:30:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxMTY4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "94e459e05db86120ca95a52ecd0f9dcdf33b1854", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\nindex 66f8dd08de..558b4dab31 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\n\n@@ -64,12 +64,11 @@ import static org.junit.jupiter.api.Assertions.assertTrue;\n \n /**\n  * This test class verifies the `default-admin` service is provisioned when \n- * a channel called `default-admin` is added to domain custom resource \n- * definition and `AdministrationPortEnabled` is set to true.\n+ * a channel called `default-admin` is added to domain resource and \n+ * `AdministrationPortEnabled` is set to true.\n  */\n-\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@DisplayName(\"Test secure nodePort service through admin port and default-admin channel in domain CRD in a mii domain\")\n+@DisplayName(\"Test secure nodePort service through admin port and default-admin channel in a mii domain\")\n @IntegrationTest\n class ItSecureAdminNodePort {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxNTQwOA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492215408", "bodyText": "same as above comment", "author": "sankarpn", "createdAt": "2020-09-21T17:06:30Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java", "diffHunk": "@@ -0,0 +1,312 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.KIND_REPO;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createConfigMap;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOCRRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the `default-admin` service is provisioned when \n+ * a channel called `default-admin` is added to domain custom resource \n+ * definition and `AdministrationPortEnabled` is set to true.\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test secure nodePort service through admin port and default-admin channel in domain CRD in a mii domain\")\n+@IntegrationTest\n+class ItSecureAdminNodePort {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String wlsBaseImage = WLS_BASE_IMAGE_NAME + \":\" + WLS_BASE_IMAGE_TAG;\n+  private static boolean isUseSecret = true;\n+  private static int replicaCount = 2;\n+  private static final String domainUid = \"mii-default-admin\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private final String adminServerName = \"admin-server\";\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource definition.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \n+            \"weblogicenc\", \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"default-admin-configmap\";\n+    String yamlString = \"topology:\\n\"\n+        + \"  AdministrationPortEnabled: true\\n\"\n+        + \"  AdministrationPort: '9010'\\n\";\n+\n+    createModelConfigMap(configMapName, yamlString);\n+\n+    //determine if the tests are running in Kind cluster. if true use images from Kind registry\n+    if (KIND_REPO != null) {\n+      String kindRepoImage = KIND_REPO + wlsBaseImage.substring(TestConstants.OCR_REGISTRY.length() + 1);\n+      logger.info(\"Using image {0}\", kindRepoImage);\n+      wlsBaseImage = kindRepoImage;\n+      isUseSecret = false;\n+    } else {\n+      // create pull secrets for WebLogic image when running in non Kind Kubernetes cluster\n+      createOCRRepoSecret(domainNamespace);\n+    }\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify all k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+    logger.info(\"Check admin service and pod {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReadyAndServiceExists(adminServerPodName, domainUid, domainNamespace);\n+    // check managed server services and pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server services and pods are created in namespace {0}\",\n+          domainNamespace);\n+      checkPodReadyAndServiceExists(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+  }\n+\n+  /**\n+   * Create a WebLogic domain with `AdministrationPortEnabled: true`.\n+   * Create a domain CRD with a channel with the name `default-admin`.\n+   * Make sure an external NodePort service is created in domain namespace.\n+   * Make sure WebLogic console is accessible through the `default-admin` service.  \n+   * Make sure WebLogic console is not accessible through the `default` service.  \n+   */\n+  @Test\n+  @DisplayName(\"Verify the secure service through administration port\")\n+  public void testVerifyAdminPortService() {\n+    int sslNodePort = getServiceNodePort(\n+         domainNamespace, adminServerPodName + \"-external\", \"default-admin\");\n+    logger.info(\"Found the administration service nodePort {0}\", sslNodePort);\n+    String curlCmd = \"curl -sk --show-error --noproxy '*' \"\n+        + \" https://\" + K8S_NODEPORT_HOST + \":\" + sslNodePort\n+        + \"/console/login/LoginForm.jsp --write-out %{http_code} -o /dev/null\";\n+    logger.info(\"Executing defaukt-admin nodeport curl command {0}\", curlCmd);\n+    assertTrue(callWebAppAndWaitTillReady(curlCmd, 10));\n+    logger.info(\"WebLogic console is accessible thru default-admin service\");\n+\n+    int nodePort = getServiceNodePort(\n+           domainNamespace, adminServerPodName + \"-external\", \"default\");\n+    logger.info(\"Found the default service nodePort {0}\", nodePort);\n+    curlCmd = \"curl -s --show-error --noproxy '*' \"\n+        + \" http://\" + K8S_NODEPORT_HOST + \":\" + nodePort\n+        + \"/console/login/LoginForm.jsp --write-out %{http_code} -o /dev/null\";\n+    logger.info(\"Executing default nodeport curl command {0}\", curlCmd);\n+    assertFalse(callWebAppAndWaitTillReady(curlCmd, 5));", "originalCommit": "8342b309c35a0180e1f9673d5487f32c16606c6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA4OTUzMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r493089532", "bodyText": "Now I have added a check for the NodePort Service to make sure that, it finds a valid integer port.\nint nodePort = getServiceNodePort(\ndomainNamespace, adminServerPodName + \"-external\", \"default\");\nassertTrue(nodePort != -1 ,  \"Could not get the default external service node port\");", "author": "anpanigr", "createdAt": "2020-09-22T23:30:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxNTQwOA=="}], "type": "inlineReview", "revised_code": {"commit": "94e459e05db86120ca95a52ecd0f9dcdf33b1854", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\nindex 66f8dd08de..558b4dab31 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\n\n@@ -64,12 +64,11 @@ import static org.junit.jupiter.api.Assertions.assertTrue;\n \n /**\n  * This test class verifies the `default-admin` service is provisioned when \n- * a channel called `default-admin` is added to domain custom resource \n- * definition and `AdministrationPortEnabled` is set to true.\n+ * a channel called `default-admin` is added to domain resource and \n+ * `AdministrationPortEnabled` is set to true.\n  */\n-\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@DisplayName(\"Test secure nodePort service through admin port and default-admin channel in domain CRD in a mii domain\")\n+@DisplayName(\"Test secure nodePort service through admin port and default-admin channel in a mii domain\")\n @IntegrationTest\n class ItSecureAdminNodePort {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxNjM1MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492216351", "bodyText": "why not use the createSecretWithUsernamePassword from CommonTestUtils?", "author": "sankarpn", "createdAt": "2020-09-21T17:08:09Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java", "diffHunk": "@@ -0,0 +1,312 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.KIND_REPO;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createConfigMap;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOCRRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the `default-admin` service is provisioned when \n+ * a channel called `default-admin` is added to domain custom resource \n+ * definition and `AdministrationPortEnabled` is set to true.\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test secure nodePort service through admin port and default-admin channel in domain CRD in a mii domain\")\n+@IntegrationTest\n+class ItSecureAdminNodePort {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String wlsBaseImage = WLS_BASE_IMAGE_NAME + \":\" + WLS_BASE_IMAGE_TAG;\n+  private static boolean isUseSecret = true;\n+  private static int replicaCount = 2;\n+  private static final String domainUid = \"mii-default-admin\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private final String adminServerName = \"admin-server\";\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource definition.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \n+            \"weblogicenc\", \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"default-admin-configmap\";\n+    String yamlString = \"topology:\\n\"\n+        + \"  AdministrationPortEnabled: true\\n\"\n+        + \"  AdministrationPort: '9010'\\n\";\n+\n+    createModelConfigMap(configMapName, yamlString);\n+\n+    //determine if the tests are running in Kind cluster. if true use images from Kind registry\n+    if (KIND_REPO != null) {\n+      String kindRepoImage = KIND_REPO + wlsBaseImage.substring(TestConstants.OCR_REGISTRY.length() + 1);\n+      logger.info(\"Using image {0}\", kindRepoImage);\n+      wlsBaseImage = kindRepoImage;\n+      isUseSecret = false;\n+    } else {\n+      // create pull secrets for WebLogic image when running in non Kind Kubernetes cluster\n+      createOCRRepoSecret(domainNamespace);\n+    }\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify all k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+    logger.info(\"Check admin service and pod {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReadyAndServiceExists(adminServerPodName, domainUid, domainNamespace);\n+    // check managed server services and pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server services and pods are created in namespace {0}\",\n+          domainNamespace);\n+      checkPodReadyAndServiceExists(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+  }\n+\n+  /**\n+   * Create a WebLogic domain with `AdministrationPortEnabled: true`.\n+   * Create a domain CRD with a channel with the name `default-admin`.\n+   * Make sure an external NodePort service is created in domain namespace.\n+   * Make sure WebLogic console is accessible through the `default-admin` service.  \n+   * Make sure WebLogic console is not accessible through the `default` service.  \n+   */\n+  @Test\n+  @DisplayName(\"Verify the secure service through administration port\")\n+  public void testVerifyAdminPortService() {\n+    int sslNodePort = getServiceNodePort(\n+         domainNamespace, adminServerPodName + \"-external\", \"default-admin\");\n+    logger.info(\"Found the administration service nodePort {0}\", sslNodePort);\n+    String curlCmd = \"curl -sk --show-error --noproxy '*' \"\n+        + \" https://\" + K8S_NODEPORT_HOST + \":\" + sslNodePort\n+        + \"/console/login/LoginForm.jsp --write-out %{http_code} -o /dev/null\";\n+    logger.info(\"Executing defaukt-admin nodeport curl command {0}\", curlCmd);\n+    assertTrue(callWebAppAndWaitTillReady(curlCmd, 10));\n+    logger.info(\"WebLogic console is accessible thru default-admin service\");\n+\n+    int nodePort = getServiceNodePort(\n+           domainNamespace, adminServerPodName + \"-external\", \"default\");\n+    logger.info(\"Found the default service nodePort {0}\", nodePort);\n+    curlCmd = \"curl -s --show-error --noproxy '*' \"\n+        + \" http://\" + K8S_NODEPORT_HOST + \":\" + nodePort\n+        + \"/console/login/LoginForm.jsp --write-out %{http_code} -o /dev/null\";\n+    logger.info(\"Executing default nodeport curl command {0}\", curlCmd);\n+    assertFalse(callWebAppAndWaitTillReady(curlCmd, 5));\n+    logger.info(\"WebLogic console is not accessible thru default service\");\n+  }\n+\n+  private static void createDomainSecret(String secretName, String username, String password, String domNamespace)", "originalCommit": "8342b309c35a0180e1f9673d5487f32c16606c6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk5OTQ5Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492999496", "bodyText": "Modified test to use  CommonTestUtils method", "author": "anpanigr", "createdAt": "2020-09-22T20:02:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxNjM1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "94e459e05db86120ca95a52ecd0f9dcdf33b1854", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\nindex 66f8dd08de..558b4dab31 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\n\n@@ -64,12 +64,11 @@ import static org.junit.jupiter.api.Assertions.assertTrue;\n \n /**\n  * This test class verifies the `default-admin` service is provisioned when \n- * a channel called `default-admin` is added to domain custom resource \n- * definition and `AdministrationPortEnabled` is set to true.\n+ * a channel called `default-admin` is added to domain resource and \n+ * `AdministrationPortEnabled` is set to true.\n  */\n-\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@DisplayName(\"Test secure nodePort service through admin port and default-admin channel in domain CRD in a mii domain\")\n+@DisplayName(\"Test secure nodePort service through admin port and default-admin channel in a mii domain\")\n @IntegrationTest\n class ItSecureAdminNodePort {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxNzU0NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492217544", "bodyText": "update comment wrt this testcase", "author": "sankarpn", "createdAt": "2020-09-21T17:10:15Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java", "diffHunk": "@@ -0,0 +1,312 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.KIND_REPO;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createConfigMap;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOCRRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the `default-admin` service is provisioned when \n+ * a channel called `default-admin` is added to domain custom resource \n+ * definition and `AdministrationPortEnabled` is set to true.\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test secure nodePort service through admin port and default-admin channel in domain CRD in a mii domain\")\n+@IntegrationTest\n+class ItSecureAdminNodePort {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String wlsBaseImage = WLS_BASE_IMAGE_NAME + \":\" + WLS_BASE_IMAGE_TAG;\n+  private static boolean isUseSecret = true;\n+  private static int replicaCount = 2;\n+  private static final String domainUid = \"mii-default-admin\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private final String adminServerName = \"admin-server\";\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource definition.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \n+            \"weblogicenc\", \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"default-admin-configmap\";\n+    String yamlString = \"topology:\\n\"\n+        + \"  AdministrationPortEnabled: true\\n\"\n+        + \"  AdministrationPort: '9010'\\n\";\n+\n+    createModelConfigMap(configMapName, yamlString);\n+\n+    //determine if the tests are running in Kind cluster. if true use images from Kind registry\n+    if (KIND_REPO != null) {\n+      String kindRepoImage = KIND_REPO + wlsBaseImage.substring(TestConstants.OCR_REGISTRY.length() + 1);\n+      logger.info(\"Using image {0}\", kindRepoImage);\n+      wlsBaseImage = kindRepoImage;\n+      isUseSecret = false;\n+    } else {\n+      // create pull secrets for WebLogic image when running in non Kind Kubernetes cluster\n+      createOCRRepoSecret(domainNamespace);\n+    }\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify all k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+    logger.info(\"Check admin service and pod {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReadyAndServiceExists(adminServerPodName, domainUid, domainNamespace);\n+    // check managed server services and pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server services and pods are created in namespace {0}\",\n+          domainNamespace);\n+      checkPodReadyAndServiceExists(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+  }\n+\n+  /**\n+   * Create a WebLogic domain with `AdministrationPortEnabled: true`.\n+   * Create a domain CRD with a channel with the name `default-admin`.\n+   * Make sure an external NodePort service is created in domain namespace.\n+   * Make sure WebLogic console is accessible through the `default-admin` service.  \n+   * Make sure WebLogic console is not accessible through the `default` service.  \n+   */\n+  @Test\n+  @DisplayName(\"Verify the secure service through administration port\")\n+  public void testVerifyAdminPortService() {\n+    int sslNodePort = getServiceNodePort(\n+         domainNamespace, adminServerPodName + \"-external\", \"default-admin\");\n+    logger.info(\"Found the administration service nodePort {0}\", sslNodePort);\n+    String curlCmd = \"curl -sk --show-error --noproxy '*' \"\n+        + \" https://\" + K8S_NODEPORT_HOST + \":\" + sslNodePort\n+        + \"/console/login/LoginForm.jsp --write-out %{http_code} -o /dev/null\";\n+    logger.info(\"Executing defaukt-admin nodeport curl command {0}\", curlCmd);\n+    assertTrue(callWebAppAndWaitTillReady(curlCmd, 10));\n+    logger.info(\"WebLogic console is accessible thru default-admin service\");\n+\n+    int nodePort = getServiceNodePort(\n+           domainNamespace, adminServerPodName + \"-external\", \"default\");\n+    logger.info(\"Found the default service nodePort {0}\", nodePort);\n+    curlCmd = \"curl -s --show-error --noproxy '*' \"\n+        + \" http://\" + K8S_NODEPORT_HOST + \":\" + nodePort\n+        + \"/console/login/LoginForm.jsp --write-out %{http_code} -o /dev/null\";\n+    logger.info(\"Executing default nodeport curl command {0}\", curlCmd);\n+    assertFalse(callWebAppAndWaitTillReady(curlCmd, 5));\n+    logger.info(\"WebLogic console is not accessible thru default service\");\n+  }\n+\n+  private static void createDomainSecret(String secretName, String username, String password, String domNamespace)\n+          throws ApiException {\n+    Map<String, String> secretMap = new HashMap();\n+    secretMap.put(\"username\", username);\n+    secretMap.put(\"password\", password);\n+    boolean secretCreated = assertDoesNotThrow(() -> createSecret(new V1Secret()\n+            .metadata(new V1ObjectMeta()\n+                    .name(secretName)\n+                    .namespace(domNamespace))\n+            .stringData(secretMap)), \"Create secret failed with ApiException\");\n+    assertTrue(secretCreated, String.format(\"create secret failed for %s in namespace %s\", secretName, domNamespace));\n+  }\n+\n+  private static void createDomainResource(\n+      String domainUid, String domNamespace, String adminSecretName,\n+      String repoSecretName, String encryptionSecretName, \n+      int replicaCount, String configmapName) {\n+    // create the domain CR\n+    Domain domain = new Domain()\n+            .apiVersion(DOMAIN_API_VERSION)\n+            .kind(\"Domain\")\n+            .metadata(new V1ObjectMeta()\n+                    .name(domainUid)\n+                    .namespace(domNamespace))\n+            .spec(new DomainSpec()\n+                    .domainUid(domainUid)\n+                    .domainHomeSourceType(\"FromModel\")\n+                    .image(MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG)\n+                    .addImagePullSecretsItem(new V1LocalObjectReference()\n+                            .name(repoSecretName))\n+                    .webLogicCredentialsSecret(new V1SecretReference()\n+                            .name(adminSecretName)\n+                            .namespace(domNamespace))\n+                    .includeServerOutInPodLog(true)\n+                    .serverStartPolicy(\"IF_NEEDED\")\n+                    .serverPod(new ServerPod()\n+                            .addEnvItem(new V1EnvVar()\n+                                    .name(\"JAVA_OPTIONS\")\n+                                    .value(\"-Dweblogic.security.SSL.ignoreHostnameVerification=true\"))\n+                            .addEnvItem(new V1EnvVar()\n+                                    .name(\"USER_MEM_ARGS\")\n+                                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n+                    .adminServer(new AdminServer()\n+                            .serverStartState(\"RUNNING\")\n+                            .adminService(new AdminService()\n+                                    .addChannelsItem(new Channel()\n+                                            .channelName(\"default\")\n+                                            .nodePort(0))\n+                                    .addChannelsItem(new Channel()\n+                                            .channelName(\"default-admin\")\n+                                            .nodePort(0))))\n+                    .addClustersItem(new Cluster()\n+                            .clusterName(\"cluster-1\")\n+                            .replicas(replicaCount)\n+                            .serverStartState(\"RUNNING\"))\n+                    .configuration(new Configuration()\n+                            .model(new Model()\n+                                    .domainType(\"WLS\")\n+                                    .configMap(configmapName)\n+                                    .runtimeEncryptionSecret(encryptionSecretName))\n+                        .introspectorJobActiveDeadlineSeconds(300L)));\n+\n+    logger.info(\"Create domain custom resource for domainUid {0} in namespace {1}\",\n+            domainUid, domNamespace);\n+    boolean domCreated = assertDoesNotThrow(() -> createDomainCustomResource(domain),\n+            String.format(\"Create domain custom resource failed with ApiException for %s in namespace %s\",\n+                    domainUid, domNamespace));\n+    assertTrue(domCreated, String.format(\"Create domain custom resource failed with ApiException \"\n+                    + \"for %s in namespace %s\", domainUid, domNamespace));\n+  }\n+\n+  // Crate a ConfigMap with a model to add a 2 independent managed servers", "originalCommit": "8342b309c35a0180e1f9673d5487f32c16606c6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk3NDI0NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492974244", "bodyText": "Modified as follows ...\ncreate a ConfigMap with a model file that set AdministrationPortEnabled to  true", "author": "anpanigr", "createdAt": "2020-09-22T19:14:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxNzU0NA=="}], "type": "inlineReview", "revised_code": {"commit": "94e459e05db86120ca95a52ecd0f9dcdf33b1854", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\nindex 66f8dd08de..558b4dab31 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\n\n@@ -64,12 +64,11 @@ import static org.junit.jupiter.api.Assertions.assertTrue;\n \n /**\n  * This test class verifies the `default-admin` service is provisioned when \n- * a channel called `default-admin` is added to domain custom resource \n- * definition and `AdministrationPortEnabled` is set to true.\n+ * a channel called `default-admin` is added to domain resource and \n+ * `AdministrationPortEnabled` is set to true.\n  */\n-\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@DisplayName(\"Test secure nodePort service through admin port and default-admin channel in domain CRD in a mii domain\")\n+@DisplayName(\"Test secure nodePort service through admin port and default-admin channel in a mii domain\")\n @IntegrationTest\n class ItSecureAdminNodePort {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxODA2MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492218061", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * definition and SSL is enabled in WebLogic configuration.\n          \n          \n            \n             * and SSL is enabled in WebLogic configuration.", "author": "sankarpn", "createdAt": "2020-09-21T17:11:08Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java", "diffHunk": "@@ -0,0 +1,313 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.KIND_REPO;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createConfigMap;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOCRRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the `default-secure` service is provisioned when \n+ * a channel called `default-secure` is added to domain custom resource \n+ * definition and SSL is enabled in WebLogic configuration.", "originalCommit": "8342b309c35a0180e1f9673d5487f32c16606c6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk3MTYzOQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492971639", "bodyText": "Modified as follows ....\nThis test class verifies the default-secure service is provisioned when\na channel called default-secure is added to domain resource and\nSSL is enabled in WebLogic configuration.", "author": "anpanigr", "createdAt": "2020-09-22T19:09:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxODA2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "94e459e05db86120ca95a52ecd0f9dcdf33b1854", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java\nindex e2472c9980..eecaa10da5 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java\n\n@@ -63,12 +63,11 @@ import static org.junit.jupiter.api.Assertions.assertTrue;\n \n /**\n  * This test class verifies the `default-secure` service is provisioned when \n- * a channel called `default-secure` is added to domain custom resource \n- * definition and SSL is enabled in WebLogic configuration.\n+ * a channel called `default-secure` is added to domain resource \n+ * and SSL is enabled in WebLogic configuration.\n  */\n-\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@DisplayName(\"Test secure nodePort service through SSL port and default-secure channel in domain CRD in a mii domain\")\n+@DisplayName(\"Test secure nodePort service through SSL port and default-secure channel in a mii domain\")\n @IntegrationTest\n class ItSecureNodePort {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxODIyMA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492218220", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @TestMethodOrder(MethodOrderer.OrderAnnotation.class)", "author": "sankarpn", "createdAt": "2020-09-21T17:11:22Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java", "diffHunk": "@@ -0,0 +1,313 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.KIND_REPO;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createConfigMap;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOCRRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the `default-secure` service is provisioned when \n+ * a channel called `default-secure` is added to domain custom resource \n+ * definition and SSL is enabled in WebLogic configuration.\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)", "originalCommit": "8342b309c35a0180e1f9673d5487f32c16606c6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk3MDEyMA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492970120", "bodyText": "done", "author": "anpanigr", "createdAt": "2020-09-22T19:06:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxODIyMA=="}], "type": "inlineReview", "revised_code": {"commit": "94e459e05db86120ca95a52ecd0f9dcdf33b1854", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java\nindex e2472c9980..eecaa10da5 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java\n\n@@ -63,12 +63,11 @@ import static org.junit.jupiter.api.Assertions.assertTrue;\n \n /**\n  * This test class verifies the `default-secure` service is provisioned when \n- * a channel called `default-secure` is added to domain custom resource \n- * definition and SSL is enabled in WebLogic configuration.\n+ * a channel called `default-secure` is added to domain resource \n+ * and SSL is enabled in WebLogic configuration.\n  */\n-\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@DisplayName(\"Test secure nodePort service through SSL port and default-secure channel in domain CRD in a mii domain\")\n+@DisplayName(\"Test secure nodePort service through SSL port and default-secure channel in a mii domain\")\n @IntegrationTest\n class ItSecureNodePort {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxODQwMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492218401", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @DisplayName(\"Test secure nodePort service through SSL port and default-secure channel in domain CRD in a mii domain\")\n          \n          \n            \n            @DisplayName(\"Test secure nodePort service through SSL port and default-secure channel in domain CR in a mii domain\")", "author": "sankarpn", "createdAt": "2020-09-21T17:11:44Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java", "diffHunk": "@@ -0,0 +1,313 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.KIND_REPO;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createConfigMap;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOCRRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the `default-secure` service is provisioned when \n+ * a channel called `default-secure` is added to domain custom resource \n+ * definition and SSL is enabled in WebLogic configuration.\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test secure nodePort service through SSL port and default-secure channel in domain CRD in a mii domain\")", "originalCommit": "8342b309c35a0180e1f9673d5487f32c16606c6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk3NDgxMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492974811", "bodyText": "@DisplayName(\"Test secure nodePort service through SSL port and default-secure channel in a mii domain\")", "author": "anpanigr", "createdAt": "2020-09-22T19:15:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxODQwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "94e459e05db86120ca95a52ecd0f9dcdf33b1854", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java\nindex e2472c9980..eecaa10da5 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java\n\n@@ -63,12 +63,11 @@ import static org.junit.jupiter.api.Assertions.assertTrue;\n \n /**\n  * This test class verifies the `default-secure` service is provisioned when \n- * a channel called `default-secure` is added to domain custom resource \n- * definition and SSL is enabled in WebLogic configuration.\n+ * a channel called `default-secure` is added to domain resource \n+ * and SSL is enabled in WebLogic configuration.\n  */\n-\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@DisplayName(\"Test secure nodePort service through SSL port and default-secure channel in domain CRD in a mii domain\")\n+@DisplayName(\"Test secure nodePort service through SSL port and default-secure channel in a mii domain\")\n @IntegrationTest\n class ItSecureNodePort {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxODY5OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492218698", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                logger.info(\"Creating unique namespace for Operator\");\n          \n          \n            \n                logger.info(\"Assigning unique namespace for Operator\");", "author": "sankarpn", "createdAt": "2020-09-21T17:12:13Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java", "diffHunk": "@@ -0,0 +1,313 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.KIND_REPO;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createConfigMap;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOCRRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the `default-secure` service is provisioned when \n+ * a channel called `default-secure` is added to domain custom resource \n+ * definition and SSL is enabled in WebLogic configuration.\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test secure nodePort service through SSL port and default-secure channel in domain CRD in a mii domain\")\n+@IntegrationTest\n+class ItSecureNodePort {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String wlsBaseImage = WLS_BASE_IMAGE_NAME + \":\" + WLS_BASE_IMAGE_TAG;\n+  private static boolean isUseSecret = true;\n+  private static int replicaCount = 2;\n+  private static final String domainUid = \"mii-default-secure\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private final String adminServerName = \"admin-server\";\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource definition.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");", "originalCommit": "8342b309c35a0180e1f9673d5487f32c16606c6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk3NTg3NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492975874", "bodyText": "done", "author": "anpanigr", "createdAt": "2020-09-22T19:17:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxODY5OA=="}], "type": "inlineReview", "revised_code": {"commit": "94e459e05db86120ca95a52ecd0f9dcdf33b1854", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java\nindex e2472c9980..eecaa10da5 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java\n\n@@ -63,12 +63,11 @@ import static org.junit.jupiter.api.Assertions.assertTrue;\n \n /**\n  * This test class verifies the `default-secure` service is provisioned when \n- * a channel called `default-secure` is added to domain custom resource \n- * definition and SSL is enabled in WebLogic configuration.\n+ * a channel called `default-secure` is added to domain resource \n+ * and SSL is enabled in WebLogic configuration.\n  */\n-\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@DisplayName(\"Test secure nodePort service through SSL port and default-secure channel in domain CRD in a mii domain\")\n+@DisplayName(\"Test secure nodePort service through SSL port and default-secure channel in a mii domain\")\n @IntegrationTest\n class ItSecureNodePort {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxODgzMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492218831", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                logger.info(\"Creating unique namespace for Domain\");\n          \n          \n            \n                logger.info(\"Assigning unique namespace for Domain\");", "author": "sankarpn", "createdAt": "2020-09-21T17:12:28Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java", "diffHunk": "@@ -0,0 +1,313 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.KIND_REPO;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createConfigMap;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOCRRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the `default-secure` service is provisioned when \n+ * a channel called `default-secure` is added to domain custom resource \n+ * definition and SSL is enabled in WebLogic configuration.\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test secure nodePort service through SSL port and default-secure channel in domain CRD in a mii domain\")\n+@IntegrationTest\n+class ItSecureNodePort {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String wlsBaseImage = WLS_BASE_IMAGE_NAME + \":\" + WLS_BASE_IMAGE_TAG;\n+  private static boolean isUseSecret = true;\n+  private static int replicaCount = 2;\n+  private static final String domainUid = \"mii-default-secure\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private final String adminServerName = \"admin-server\";\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource definition.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");", "originalCommit": "8342b309c35a0180e1f9673d5487f32c16606c6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk3NTEwNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492975106", "bodyText": "done", "author": "anpanigr", "createdAt": "2020-09-22T19:16:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxODgzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "94e459e05db86120ca95a52ecd0f9dcdf33b1854", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java\nindex e2472c9980..eecaa10da5 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java\n\n@@ -63,12 +63,11 @@ import static org.junit.jupiter.api.Assertions.assertTrue;\n \n /**\n  * This test class verifies the `default-secure` service is provisioned when \n- * a channel called `default-secure` is added to domain custom resource \n- * definition and SSL is enabled in WebLogic configuration.\n+ * a channel called `default-secure` is added to domain resource \n+ * and SSL is enabled in WebLogic configuration.\n  */\n-\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@DisplayName(\"Test secure nodePort service through SSL port and default-secure channel in domain CRD in a mii domain\")\n+@DisplayName(\"Test secure nodePort service through SSL port and default-secure channel in a mii domain\")\n @IntegrationTest\n class ItSecureNodePort {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxOTMyMA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492219320", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n          \n          \n            \n                assertDoesNotThrow(() -> createDomainSecret(adminSecretName, ADMIN_USERNAME_DEFAULT,", "author": "sankarpn", "createdAt": "2020-09-21T17:13:17Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java", "diffHunk": "@@ -0,0 +1,313 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.KIND_REPO;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createConfigMap;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOCRRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the `default-secure` service is provisioned when \n+ * a channel called `default-secure` is added to domain custom resource \n+ * definition and SSL is enabled in WebLogic configuration.\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test secure nodePort service through SSL port and default-secure channel in domain CRD in a mii domain\")\n+@IntegrationTest\n+class ItSecureNodePort {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String wlsBaseImage = WLS_BASE_IMAGE_NAME + \":\" + WLS_BASE_IMAGE_TAG;\n+  private static boolean isUseSecret = true;\n+  private static int replicaCount = 2;\n+  private static final String domainUid = \"mii-default-secure\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private final String adminServerName = \"admin-server\";\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource definition.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",", "originalCommit": "8342b309c35a0180e1f9673d5487f32c16606c6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk3NTE4Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492975183", "bodyText": "done", "author": "anpanigr", "createdAt": "2020-09-22T19:16:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxOTMyMA=="}], "type": "inlineReview", "revised_code": {"commit": "94e459e05db86120ca95a52ecd0f9dcdf33b1854", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java\nindex e2472c9980..eecaa10da5 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java\n\n@@ -63,12 +63,11 @@ import static org.junit.jupiter.api.Assertions.assertTrue;\n \n /**\n  * This test class verifies the `default-secure` service is provisioned when \n- * a channel called `default-secure` is added to domain custom resource \n- * definition and SSL is enabled in WebLogic configuration.\n+ * a channel called `default-secure` is added to domain resource \n+ * and SSL is enabled in WebLogic configuration.\n  */\n-\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@DisplayName(\"Test secure nodePort service through SSL port and default-secure channel in domain CRD in a mii domain\")\n+@DisplayName(\"Test secure nodePort service through SSL port and default-secure channel in a mii domain\")\n @IntegrationTest\n class ItSecureNodePort {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxOTUwOQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492219509", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"welcome1\", domainNamespace),\n          \n          \n            \n                        ADMIN_PASSWORD_DEFAULT , domainNamespace),", "author": "sankarpn", "createdAt": "2020-09-21T17:13:37Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java", "diffHunk": "@@ -0,0 +1,313 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.KIND_REPO;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createConfigMap;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOCRRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the `default-secure` service is provisioned when \n+ * a channel called `default-secure` is added to domain custom resource \n+ * definition and SSL is enabled in WebLogic configuration.\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test secure nodePort service through SSL port and default-secure channel in domain CRD in a mii domain\")\n+@IntegrationTest\n+class ItSecureNodePort {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String wlsBaseImage = WLS_BASE_IMAGE_NAME + \":\" + WLS_BASE_IMAGE_TAG;\n+  private static boolean isUseSecret = true;\n+  private static int replicaCount = 2;\n+  private static final String domainUid = \"mii-default-secure\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private final String adminServerName = \"admin-server\";\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource definition.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),", "originalCommit": "8342b309c35a0180e1f9673d5487f32c16606c6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk3NTI2NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492975265", "bodyText": "done", "author": "anpanigr", "createdAt": "2020-09-22T19:16:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxOTUwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "94e459e05db86120ca95a52ecd0f9dcdf33b1854", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java\nindex e2472c9980..eecaa10da5 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java\n\n@@ -63,12 +63,11 @@ import static org.junit.jupiter.api.Assertions.assertTrue;\n \n /**\n  * This test class verifies the `default-secure` service is provisioned when \n- * a channel called `default-secure` is added to domain custom resource \n- * definition and SSL is enabled in WebLogic configuration.\n+ * a channel called `default-secure` is added to domain resource \n+ * and SSL is enabled in WebLogic configuration.\n  */\n-\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@DisplayName(\"Test secure nodePort service through SSL port and default-secure channel in domain CRD in a mii domain\")\n+@DisplayName(\"Test secure nodePort service through SSL port and default-secure channel in a mii domain\")\n @IntegrationTest\n class ItSecureNodePort {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyMjk2NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492222965", "bodyText": "where are you using this wlsBaseImage  image?", "author": "sankarpn", "createdAt": "2020-09-21T17:19:30Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java", "diffHunk": "@@ -0,0 +1,312 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.KIND_REPO;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createConfigMap;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOCRRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the `default-admin` service is provisioned when \n+ * a channel called `default-admin` is added to domain custom resource \n+ * definition and `AdministrationPortEnabled` is set to true.\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test secure nodePort service through admin port and default-admin channel in domain CRD in a mii domain\")\n+@IntegrationTest\n+class ItSecureAdminNodePort {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String wlsBaseImage = WLS_BASE_IMAGE_NAME + \":\" + WLS_BASE_IMAGE_TAG;\n+  private static boolean isUseSecret = true;\n+  private static int replicaCount = 2;\n+  private static final String domainUid = \"mii-default-admin\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private final String adminServerName = \"admin-server\";\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource definition.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \n+            \"weblogicenc\", \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"default-admin-configmap\";\n+    String yamlString = \"topology:\\n\"\n+        + \"  AdministrationPortEnabled: true\\n\"\n+        + \"  AdministrationPort: '9010'\\n\";\n+\n+    createModelConfigMap(configMapName, yamlString);\n+\n+    //determine if the tests are running in Kind cluster. if true use images from Kind registry", "originalCommit": "8342b309c35a0180e1f9673d5487f32c16606c6c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "94e459e05db86120ca95a52ecd0f9dcdf33b1854", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\nindex 66f8dd08de..558b4dab31 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\n\n@@ -64,12 +64,11 @@ import static org.junit.jupiter.api.Assertions.assertTrue;\n \n /**\n  * This test class verifies the `default-admin` service is provisioned when \n- * a channel called `default-admin` is added to domain custom resource \n- * definition and `AdministrationPortEnabled` is set to true.\n+ * a channel called `default-admin` is added to domain resource and \n+ * `AdministrationPortEnabled` is set to true.\n  */\n-\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@DisplayName(\"Test secure nodePort service through admin port and default-admin channel in domain CRD in a mii domain\")\n+@DisplayName(\"Test secure nodePort service through admin port and default-admin channel in a mii domain\")\n @IntegrationTest\n class ItSecureAdminNodePort {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyMzI0NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492223245", "bodyText": "where are you using this wlsBaseImage image?", "author": "sankarpn", "createdAt": "2020-09-21T17:19:48Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java", "diffHunk": "@@ -0,0 +1,313 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.KIND_REPO;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createConfigMap;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOCRRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the `default-secure` service is provisioned when \n+ * a channel called `default-secure` is added to domain custom resource \n+ * definition and SSL is enabled in WebLogic configuration.\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test secure nodePort service through SSL port and default-secure channel in domain CRD in a mii domain\")\n+@IntegrationTest\n+class ItSecureNodePort {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String wlsBaseImage = WLS_BASE_IMAGE_NAME + \":\" + WLS_BASE_IMAGE_TAG;\n+  private static boolean isUseSecret = true;\n+  private static int replicaCount = 2;\n+  private static final String domainUid = \"mii-default-secure\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private final String adminServerName = \"admin-server\";\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource definition.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \n+            \"weblogicenc\", \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"default-secure-configmap\";\n+    String yamlString = \"topology:\\n\"\n+        + \"  Server:\\n\"\n+        + \"    'admin-server':\\n\"\n+        + \"       SSL: \\n\"\n+        + \"         Enabled: true \\n\"\n+        + \"         ListenPort: '7008' \\n\";\n+    createModelConfigMap(configMapName, yamlString);\n+\n+    //determine if the tests are running in Kind cluster. if true use images from Kind registry", "originalCommit": "8342b309c35a0180e1f9673d5487f32c16606c6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA1MjU5MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r493052591", "bodyText": "These are boiler plate generic code from existing Mii Domain Class.  I am not building any domain images in this class. The ImageBuilder class will build the domain image by default.", "author": "anpanigr", "createdAt": "2020-09-22T21:47:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyMzI0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "94e459e05db86120ca95a52ecd0f9dcdf33b1854", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java\nindex e2472c9980..eecaa10da5 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java\n\n@@ -63,12 +63,11 @@ import static org.junit.jupiter.api.Assertions.assertTrue;\n \n /**\n  * This test class verifies the `default-secure` service is provisioned when \n- * a channel called `default-secure` is added to domain custom resource \n- * definition and SSL is enabled in WebLogic configuration.\n+ * a channel called `default-secure` is added to domain resource \n+ * and SSL is enabled in WebLogic configuration.\n  */\n-\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@DisplayName(\"Test secure nodePort service through SSL port and default-secure channel in domain CRD in a mii domain\")\n+@DisplayName(\"Test secure nodePort service through SSL port and default-secure channel in a mii domain\")\n @IntegrationTest\n class ItSecureNodePort {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyMzU5Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492223592", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Create a domain CRD with a channel with the name `default-secure`.\n          \n          \n            \n               * Create a domain CR with a channel with the name `default-secure`.", "author": "sankarpn", "createdAt": "2020-09-21T17:20:21Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java", "diffHunk": "@@ -0,0 +1,313 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.KIND_REPO;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createConfigMap;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOCRRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the `default-secure` service is provisioned when \n+ * a channel called `default-secure` is added to domain custom resource \n+ * definition and SSL is enabled in WebLogic configuration.\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test secure nodePort service through SSL port and default-secure channel in domain CRD in a mii domain\")\n+@IntegrationTest\n+class ItSecureNodePort {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String wlsBaseImage = WLS_BASE_IMAGE_NAME + \":\" + WLS_BASE_IMAGE_TAG;\n+  private static boolean isUseSecret = true;\n+  private static int replicaCount = 2;\n+  private static final String domainUid = \"mii-default-secure\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private final String adminServerName = \"admin-server\";\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource definition.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \n+            \"weblogicenc\", \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"default-secure-configmap\";\n+    String yamlString = \"topology:\\n\"\n+        + \"  Server:\\n\"\n+        + \"    'admin-server':\\n\"\n+        + \"       SSL: \\n\"\n+        + \"         Enabled: true \\n\"\n+        + \"         ListenPort: '7008' \\n\";\n+    createModelConfigMap(configMapName, yamlString);\n+\n+    //determine if the tests are running in Kind cluster. if true use images from Kind registry\n+    if (KIND_REPO != null) {\n+      String kindRepoImage = KIND_REPO + wlsBaseImage.substring(TestConstants.OCR_REGISTRY.length() + 1);\n+      logger.info(\"Using image {0}\", kindRepoImage);\n+      wlsBaseImage = kindRepoImage;\n+      isUseSecret = false;\n+    } else {\n+      // create pull secrets for WebLogic image when running in non Kind Kubernetes cluster\n+      createOCRRepoSecret(domainNamespace);\n+    }\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify all k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+    logger.info(\"Check admin service and pod {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReadyAndServiceExists(adminServerPodName, domainUid, domainNamespace);\n+    // check managed server services and pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server services and pods are created in namespace {0}\",\n+          domainNamespace);\n+      checkPodReadyAndServiceExists(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+  }\n+\n+  /**\n+   * Create a WebLogic domain with SSL enabled in WebLogic configuration.\n+   * Create a domain CRD with a channel with the name `default-secure`.", "originalCommit": "8342b309c35a0180e1f9673d5487f32c16606c6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1MzUxNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492253517", "bodyText": "done", "author": "anpanigr", "createdAt": "2020-09-21T18:11:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyMzU5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "94e459e05db86120ca95a52ecd0f9dcdf33b1854", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java\nindex e2472c9980..eecaa10da5 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java\n\n@@ -63,12 +63,11 @@ import static org.junit.jupiter.api.Assertions.assertTrue;\n \n /**\n  * This test class verifies the `default-secure` service is provisioned when \n- * a channel called `default-secure` is added to domain custom resource \n- * definition and SSL is enabled in WebLogic configuration.\n+ * a channel called `default-secure` is added to domain resource \n+ * and SSL is enabled in WebLogic configuration.\n  */\n-\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@DisplayName(\"Test secure nodePort service through SSL port and default-secure channel in domain CRD in a mii domain\")\n+@DisplayName(\"Test secure nodePort service through SSL port and default-secure channel in a mii domain\")\n @IntegrationTest\n class ItSecureNodePort {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyNDQ5MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492224491", "bodyText": "same comment as the other test class", "author": "sankarpn", "createdAt": "2020-09-21T17:21:53Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java", "diffHunk": "@@ -0,0 +1,313 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.KIND_REPO;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createConfigMap;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOCRRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the `default-secure` service is provisioned when \n+ * a channel called `default-secure` is added to domain custom resource \n+ * definition and SSL is enabled in WebLogic configuration.\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test secure nodePort service through SSL port and default-secure channel in domain CRD in a mii domain\")\n+@IntegrationTest\n+class ItSecureNodePort {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String wlsBaseImage = WLS_BASE_IMAGE_NAME + \":\" + WLS_BASE_IMAGE_TAG;\n+  private static boolean isUseSecret = true;\n+  private static int replicaCount = 2;\n+  private static final String domainUid = \"mii-default-secure\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private final String adminServerName = \"admin-server\";\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource definition.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \n+            \"weblogicenc\", \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"default-secure-configmap\";\n+    String yamlString = \"topology:\\n\"\n+        + \"  Server:\\n\"\n+        + \"    'admin-server':\\n\"\n+        + \"       SSL: \\n\"\n+        + \"         Enabled: true \\n\"\n+        + \"         ListenPort: '7008' \\n\";\n+    createModelConfigMap(configMapName, yamlString);\n+\n+    //determine if the tests are running in Kind cluster. if true use images from Kind registry\n+    if (KIND_REPO != null) {\n+      String kindRepoImage = KIND_REPO + wlsBaseImage.substring(TestConstants.OCR_REGISTRY.length() + 1);\n+      logger.info(\"Using image {0}\", kindRepoImage);\n+      wlsBaseImage = kindRepoImage;\n+      isUseSecret = false;\n+    } else {\n+      // create pull secrets for WebLogic image when running in non Kind Kubernetes cluster\n+      createOCRRepoSecret(domainNamespace);\n+    }\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify all k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+    logger.info(\"Check admin service and pod {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReadyAndServiceExists(adminServerPodName, domainUid, domainNamespace);\n+    // check managed server services and pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server services and pods are created in namespace {0}\",\n+          domainNamespace);\n+      checkPodReadyAndServiceExists(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+  }\n+\n+  /**\n+   * Create a WebLogic domain with SSL enabled in WebLogic configuration.\n+   * Create a domain CRD with a channel with the name `default-secure`.\n+   * Make sure an external NodePort service is created in domain namespace.\n+   * Make sure WebLogic console is accessible through the `default-secure` service. \n+   * Make sure WebLogic console is accessible through the `default` service.  \n+   */\n+  @Test\n+  @DisplayName(\"Verify the secure service through SSL port\")\n+  public void testVerifySecurePortService() {\n+    int sslNodePort = getServiceNodePort(\n+         domainNamespace, adminServerPodName + \"-external\", \"default-secure\");\n+    logger.info(\"Found the administration service nodePort {0}\", sslNodePort);\n+    String curlCmd = \"curl -sk --show-error --noproxy '*' \"\n+        + \" https://\" + K8S_NODEPORT_HOST + \":\" + sslNodePort\n+        + \"/console/login/LoginForm.jsp --write-out %{http_code} -o /dev/null\";\n+    logger.info(\"Executing defaukt-admin nodeport curl command {0}\", curlCmd);\n+    assertTrue(callWebAppAndWaitTillReady(curlCmd, 10));", "originalCommit": "8342b309c35a0180e1f9673d5487f32c16606c6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA1MjYwMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r493052603", "bodyText": "These are boiler plate generic code from existing Mii Domain Class.  I am not building any domain images in this class. The ImageBuilder class will build the domain image by default.", "author": "anpanigr", "createdAt": "2020-09-22T21:47:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyNDQ5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "94e459e05db86120ca95a52ecd0f9dcdf33b1854", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java\nindex e2472c9980..eecaa10da5 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java\n\n@@ -63,12 +63,11 @@ import static org.junit.jupiter.api.Assertions.assertTrue;\n \n /**\n  * This test class verifies the `default-secure` service is provisioned when \n- * a channel called `default-secure` is added to domain custom resource \n- * definition and SSL is enabled in WebLogic configuration.\n+ * a channel called `default-secure` is added to domain resource \n+ * and SSL is enabled in WebLogic configuration.\n  */\n-\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@DisplayName(\"Test secure nodePort service through SSL port and default-secure channel in domain CRD in a mii domain\")\n+@DisplayName(\"Test secure nodePort service through SSL port and default-secure channel in a mii domain\")\n @IntegrationTest\n class ItSecureNodePort {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyNDczNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492224736", "bodyText": "same comment as the other test class", "author": "sankarpn", "createdAt": "2020-09-21T17:22:18Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java", "diffHunk": "@@ -0,0 +1,313 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.KIND_REPO;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createConfigMap;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOCRRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the `default-secure` service is provisioned when \n+ * a channel called `default-secure` is added to domain custom resource \n+ * definition and SSL is enabled in WebLogic configuration.\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test secure nodePort service through SSL port and default-secure channel in domain CRD in a mii domain\")\n+@IntegrationTest\n+class ItSecureNodePort {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String wlsBaseImage = WLS_BASE_IMAGE_NAME + \":\" + WLS_BASE_IMAGE_TAG;\n+  private static boolean isUseSecret = true;\n+  private static int replicaCount = 2;\n+  private static final String domainUid = \"mii-default-secure\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private final String adminServerName = \"admin-server\";\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource definition.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \n+            \"weblogicenc\", \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"default-secure-configmap\";\n+    String yamlString = \"topology:\\n\"\n+        + \"  Server:\\n\"\n+        + \"    'admin-server':\\n\"\n+        + \"       SSL: \\n\"\n+        + \"         Enabled: true \\n\"\n+        + \"         ListenPort: '7008' \\n\";\n+    createModelConfigMap(configMapName, yamlString);\n+\n+    //determine if the tests are running in Kind cluster. if true use images from Kind registry\n+    if (KIND_REPO != null) {\n+      String kindRepoImage = KIND_REPO + wlsBaseImage.substring(TestConstants.OCR_REGISTRY.length() + 1);\n+      logger.info(\"Using image {0}\", kindRepoImage);\n+      wlsBaseImage = kindRepoImage;\n+      isUseSecret = false;\n+    } else {\n+      // create pull secrets for WebLogic image when running in non Kind Kubernetes cluster\n+      createOCRRepoSecret(domainNamespace);\n+    }\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify all k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+    logger.info(\"Check admin service and pod {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReadyAndServiceExists(adminServerPodName, domainUid, domainNamespace);\n+    // check managed server services and pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server services and pods are created in namespace {0}\",\n+          domainNamespace);\n+      checkPodReadyAndServiceExists(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+  }\n+\n+  /**\n+   * Create a WebLogic domain with SSL enabled in WebLogic configuration.\n+   * Create a domain CRD with a channel with the name `default-secure`.\n+   * Make sure an external NodePort service is created in domain namespace.\n+   * Make sure WebLogic console is accessible through the `default-secure` service. \n+   * Make sure WebLogic console is accessible through the `default` service.  \n+   */\n+  @Test\n+  @DisplayName(\"Verify the secure service through SSL port\")\n+  public void testVerifySecurePortService() {\n+    int sslNodePort = getServiceNodePort(\n+         domainNamespace, adminServerPodName + \"-external\", \"default-secure\");\n+    logger.info(\"Found the administration service nodePort {0}\", sslNodePort);\n+    String curlCmd = \"curl -sk --show-error --noproxy '*' \"\n+        + \" https://\" + K8S_NODEPORT_HOST + \":\" + sslNodePort\n+        + \"/console/login/LoginForm.jsp --write-out %{http_code} -o /dev/null\";\n+    logger.info(\"Executing defaukt-admin nodeport curl command {0}\", curlCmd);\n+    assertTrue(callWebAppAndWaitTillReady(curlCmd, 10));\n+    logger.info(\"WebLogic console is accessible thru default-secure service\");\n+\n+    int nodePort = getServiceNodePort(\n+           domainNamespace, adminServerPodName + \"-external\", \"default\");\n+    logger.info(\"Found the default service nodePort {0}\", nodePort);\n+    curlCmd = \"curl -s --show-error --noproxy '*' \"\n+        + \" http://\" + K8S_NODEPORT_HOST + \":\" + nodePort\n+        + \"/console/login/LoginForm.jsp --write-out %{http_code} -o /dev/null\";\n+    logger.info(\"Executing default nodeport curl command {0}\", curlCmd);\n+    assertTrue(callWebAppAndWaitTillReady(curlCmd, 5));", "originalCommit": "8342b309c35a0180e1f9673d5487f32c16606c6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1MzU1OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492253559", "bodyText": "done", "author": "anpanigr", "createdAt": "2020-09-21T18:11:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyNDczNg=="}], "type": "inlineReview", "revised_code": {"commit": "94e459e05db86120ca95a52ecd0f9dcdf33b1854", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java\nindex e2472c9980..eecaa10da5 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java\n\n@@ -63,12 +63,11 @@ import static org.junit.jupiter.api.Assertions.assertTrue;\n \n /**\n  * This test class verifies the `default-secure` service is provisioned when \n- * a channel called `default-secure` is added to domain custom resource \n- * definition and SSL is enabled in WebLogic configuration.\n+ * a channel called `default-secure` is added to domain resource \n+ * and SSL is enabled in WebLogic configuration.\n  */\n-\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@DisplayName(\"Test secure nodePort service through SSL port and default-secure channel in domain CRD in a mii domain\")\n+@DisplayName(\"Test secure nodePort service through SSL port and default-secure channel in a mii domain\")\n @IntegrationTest\n class ItSecureNodePort {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyNDk1MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492224950", "bodyText": "same comment as the other test class", "author": "sankarpn", "createdAt": "2020-09-21T17:22:42Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java", "diffHunk": "@@ -0,0 +1,313 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.KIND_REPO;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createConfigMap;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOCRRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the `default-secure` service is provisioned when \n+ * a channel called `default-secure` is added to domain custom resource \n+ * definition and SSL is enabled in WebLogic configuration.\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test secure nodePort service through SSL port and default-secure channel in domain CRD in a mii domain\")\n+@IntegrationTest\n+class ItSecureNodePort {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String wlsBaseImage = WLS_BASE_IMAGE_NAME + \":\" + WLS_BASE_IMAGE_TAG;\n+  private static boolean isUseSecret = true;\n+  private static int replicaCount = 2;\n+  private static final String domainUid = \"mii-default-secure\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private final String adminServerName = \"admin-server\";\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource definition.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \n+            \"weblogicenc\", \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"default-secure-configmap\";\n+    String yamlString = \"topology:\\n\"\n+        + \"  Server:\\n\"\n+        + \"    'admin-server':\\n\"\n+        + \"       SSL: \\n\"\n+        + \"         Enabled: true \\n\"\n+        + \"         ListenPort: '7008' \\n\";\n+    createModelConfigMap(configMapName, yamlString);\n+\n+    //determine if the tests are running in Kind cluster. if true use images from Kind registry\n+    if (KIND_REPO != null) {\n+      String kindRepoImage = KIND_REPO + wlsBaseImage.substring(TestConstants.OCR_REGISTRY.length() + 1);\n+      logger.info(\"Using image {0}\", kindRepoImage);\n+      wlsBaseImage = kindRepoImage;\n+      isUseSecret = false;\n+    } else {\n+      // create pull secrets for WebLogic image when running in non Kind Kubernetes cluster\n+      createOCRRepoSecret(domainNamespace);\n+    }\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify all k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+    logger.info(\"Check admin service and pod {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReadyAndServiceExists(adminServerPodName, domainUid, domainNamespace);\n+    // check managed server services and pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server services and pods are created in namespace {0}\",\n+          domainNamespace);\n+      checkPodReadyAndServiceExists(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+  }\n+\n+  /**\n+   * Create a WebLogic domain with SSL enabled in WebLogic configuration.\n+   * Create a domain CRD with a channel with the name `default-secure`.\n+   * Make sure an external NodePort service is created in domain namespace.\n+   * Make sure WebLogic console is accessible through the `default-secure` service. \n+   * Make sure WebLogic console is accessible through the `default` service.  \n+   */\n+  @Test\n+  @DisplayName(\"Verify the secure service through SSL port\")\n+  public void testVerifySecurePortService() {\n+    int sslNodePort = getServiceNodePort(\n+         domainNamespace, adminServerPodName + \"-external\", \"default-secure\");\n+    logger.info(\"Found the administration service nodePort {0}\", sslNodePort);\n+    String curlCmd = \"curl -sk --show-error --noproxy '*' \"\n+        + \" https://\" + K8S_NODEPORT_HOST + \":\" + sslNodePort\n+        + \"/console/login/LoginForm.jsp --write-out %{http_code} -o /dev/null\";\n+    logger.info(\"Executing defaukt-admin nodeport curl command {0}\", curlCmd);\n+    assertTrue(callWebAppAndWaitTillReady(curlCmd, 10));\n+    logger.info(\"WebLogic console is accessible thru default-secure service\");\n+\n+    int nodePort = getServiceNodePort(\n+           domainNamespace, adminServerPodName + \"-external\", \"default\");\n+    logger.info(\"Found the default service nodePort {0}\", nodePort);\n+    curlCmd = \"curl -s --show-error --noproxy '*' \"\n+        + \" http://\" + K8S_NODEPORT_HOST + \":\" + nodePort\n+        + \"/console/login/LoginForm.jsp --write-out %{http_code} -o /dev/null\";\n+    logger.info(\"Executing default nodeport curl command {0}\", curlCmd);\n+    assertTrue(callWebAppAndWaitTillReady(curlCmd, 5));\n+    logger.info(\"WebLogic console is accessible thru default service\");\n+  }\n+\n+  private static void createDomainSecret(String secretName, String username, String password, String domNamespace)", "originalCommit": "8342b309c35a0180e1f9673d5487f32c16606c6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1MzYwOQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492253609", "bodyText": "done", "author": "anpanigr", "createdAt": "2020-09-21T18:11:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyNDk1MA=="}], "type": "inlineReview", "revised_code": {"commit": "94e459e05db86120ca95a52ecd0f9dcdf33b1854", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java\nindex e2472c9980..eecaa10da5 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java\n\n@@ -63,12 +63,11 @@ import static org.junit.jupiter.api.Assertions.assertTrue;\n \n /**\n  * This test class verifies the `default-secure` service is provisioned when \n- * a channel called `default-secure` is added to domain custom resource \n- * definition and SSL is enabled in WebLogic configuration.\n+ * a channel called `default-secure` is added to domain resource \n+ * and SSL is enabled in WebLogic configuration.\n  */\n-\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@DisplayName(\"Test secure nodePort service through SSL port and default-secure channel in domain CRD in a mii domain\")\n+@DisplayName(\"Test secure nodePort service through SSL port and default-secure channel in a mii domain\")\n @IntegrationTest\n class ItSecureNodePort {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyNTEwMA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492225100", "bodyText": "same comment as the other test class", "author": "sankarpn", "createdAt": "2020-09-21T17:22:58Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java", "diffHunk": "@@ -0,0 +1,313 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.KIND_REPO;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createConfigMap;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOCRRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the `default-secure` service is provisioned when \n+ * a channel called `default-secure` is added to domain custom resource \n+ * definition and SSL is enabled in WebLogic configuration.\n+ */\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test secure nodePort service through SSL port and default-secure channel in domain CRD in a mii domain\")\n+@IntegrationTest\n+class ItSecureNodePort {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String wlsBaseImage = WLS_BASE_IMAGE_NAME + \":\" + WLS_BASE_IMAGE_TAG;\n+  private static boolean isUseSecret = true;\n+  private static int replicaCount = 2;\n+  private static final String domainUid = \"mii-default-secure\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private final String adminServerName = \"admin-server\";\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource definition.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Creating unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Creating unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),\n+            String.format(\"createSecret failed for %s\", adminSecretName));\n+\n+    // create encryption secret\n+    logger.info(\"Create encryption secret\");\n+    String encryptionSecretName = \"encryptionsecret\";\n+    assertDoesNotThrow(() -> createDomainSecret(encryptionSecretName, \n+            \"weblogicenc\", \"weblogicenc\", domainNamespace),\n+             String.format(\"createSecret failed for %s\", encryptionSecretName));\n+\n+    String configMapName = \"default-secure-configmap\";\n+    String yamlString = \"topology:\\n\"\n+        + \"  Server:\\n\"\n+        + \"    'admin-server':\\n\"\n+        + \"       SSL: \\n\"\n+        + \"         Enabled: true \\n\"\n+        + \"         ListenPort: '7008' \\n\";\n+    createModelConfigMap(configMapName, yamlString);\n+\n+    //determine if the tests are running in Kind cluster. if true use images from Kind registry\n+    if (KIND_REPO != null) {\n+      String kindRepoImage = KIND_REPO + wlsBaseImage.substring(TestConstants.OCR_REGISTRY.length() + 1);\n+      logger.info(\"Using image {0}\", kindRepoImage);\n+      wlsBaseImage = kindRepoImage;\n+      isUseSecret = false;\n+    } else {\n+      // create pull secrets for WebLogic image when running in non Kind Kubernetes cluster\n+      createOCRRepoSecret(domainNamespace);\n+    }\n+\n+    // create the domain CR with a pre-defined configmap\n+    createDomainResource(domainUid, domainNamespace, adminSecretName,\n+        REPO_SECRET_NAME, encryptionSecretName,\n+        replicaCount, configMapName);\n+\n+    // wait for the domain to exist\n+    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                domainUid,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n+  }\n+\n+  /**\n+   * Verify all server pods are running.\n+   * Verify all k8s services for all servers are created.\n+   */\n+  @BeforeEach\n+  public void beforeEach() {\n+    logger.info(\"Check admin service and pod {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkPodReadyAndServiceExists(adminServerPodName, domainUid, domainNamespace);\n+    // check managed server services and pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      logger.info(\"Wait for managed server services and pods are created in namespace {0}\",\n+          domainNamespace);\n+      checkPodReadyAndServiceExists(managedServerPrefix + i, domainUid, domainNamespace);\n+    }\n+  }\n+\n+  /**\n+   * Create a WebLogic domain with SSL enabled in WebLogic configuration.\n+   * Create a domain CRD with a channel with the name `default-secure`.\n+   * Make sure an external NodePort service is created in domain namespace.\n+   * Make sure WebLogic console is accessible through the `default-secure` service. \n+   * Make sure WebLogic console is accessible through the `default` service.  \n+   */\n+  @Test\n+  @DisplayName(\"Verify the secure service through SSL port\")\n+  public void testVerifySecurePortService() {\n+    int sslNodePort = getServiceNodePort(\n+         domainNamespace, adminServerPodName + \"-external\", \"default-secure\");\n+    logger.info(\"Found the administration service nodePort {0}\", sslNodePort);\n+    String curlCmd = \"curl -sk --show-error --noproxy '*' \"\n+        + \" https://\" + K8S_NODEPORT_HOST + \":\" + sslNodePort\n+        + \"/console/login/LoginForm.jsp --write-out %{http_code} -o /dev/null\";\n+    logger.info(\"Executing defaukt-admin nodeport curl command {0}\", curlCmd);\n+    assertTrue(callWebAppAndWaitTillReady(curlCmd, 10));\n+    logger.info(\"WebLogic console is accessible thru default-secure service\");\n+\n+    int nodePort = getServiceNodePort(\n+           domainNamespace, adminServerPodName + \"-external\", \"default\");\n+    logger.info(\"Found the default service nodePort {0}\", nodePort);\n+    curlCmd = \"curl -s --show-error --noproxy '*' \"\n+        + \" http://\" + K8S_NODEPORT_HOST + \":\" + nodePort\n+        + \"/console/login/LoginForm.jsp --write-out %{http_code} -o /dev/null\";\n+    logger.info(\"Executing default nodeport curl command {0}\", curlCmd);\n+    assertTrue(callWebAppAndWaitTillReady(curlCmd, 5));\n+    logger.info(\"WebLogic console is accessible thru default service\");\n+  }\n+\n+  private static void createDomainSecret(String secretName, String username, String password, String domNamespace)\n+          throws ApiException {\n+    Map<String, String> secretMap = new HashMap();\n+    secretMap.put(\"username\", username);\n+    secretMap.put(\"password\", password);\n+    boolean secretCreated = assertDoesNotThrow(() -> createSecret(new V1Secret()\n+            .metadata(new V1ObjectMeta()\n+                    .name(secretName)\n+                    .namespace(domNamespace))\n+            .stringData(secretMap)), \"Create secret failed with ApiException\");\n+    assertTrue(secretCreated, String.format(\"create secret failed for %s in namespace %s\", secretName, domNamespace));\n+  }\n+\n+  private static void createDomainResource(\n+      String domainUid, String domNamespace, String adminSecretName,\n+      String repoSecretName, String encryptionSecretName, \n+      int replicaCount, String configmapName) {\n+    // create the domain CR\n+    Domain domain = new Domain()\n+            .apiVersion(DOMAIN_API_VERSION)\n+            .kind(\"Domain\")\n+            .metadata(new V1ObjectMeta()\n+                    .name(domainUid)\n+                    .namespace(domNamespace))\n+            .spec(new DomainSpec()\n+                    .domainUid(domainUid)\n+                    .domainHomeSourceType(\"FromModel\")\n+                    .image(MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG)\n+                    .addImagePullSecretsItem(new V1LocalObjectReference()\n+                            .name(repoSecretName))\n+                    .webLogicCredentialsSecret(new V1SecretReference()\n+                            .name(adminSecretName)\n+                            .namespace(domNamespace))\n+                    .includeServerOutInPodLog(true)\n+                    .serverStartPolicy(\"IF_NEEDED\")\n+                    .serverPod(new ServerPod()\n+                            .addEnvItem(new V1EnvVar()\n+                                    .name(\"JAVA_OPTIONS\")\n+                                    .value(\"-Dweblogic.security.SSL.ignoreHostnameVerification=true\"))\n+                            .addEnvItem(new V1EnvVar()\n+                                    .name(\"USER_MEM_ARGS\")\n+                                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n+                    .adminServer(new AdminServer()\n+                            .serverStartState(\"RUNNING\")\n+                            .adminService(new AdminService()\n+                                    .addChannelsItem(new Channel()\n+                                            .channelName(\"default\")\n+                                            .nodePort(0))\n+                                    .addChannelsItem(new Channel()\n+                                            .channelName(\"default-secure\")\n+                                            .nodePort(0))))\n+                    .addClustersItem(new Cluster()\n+                            .clusterName(\"cluster-1\")\n+                            .replicas(replicaCount)\n+                            .serverStartState(\"RUNNING\"))\n+                    .configuration(new Configuration()\n+                            .model(new Model()\n+                                    .domainType(\"WLS\")\n+                                    .configMap(configmapName)\n+                                    .runtimeEncryptionSecret(encryptionSecretName))\n+                        .introspectorJobActiveDeadlineSeconds(300L)));\n+\n+    logger.info(\"Create domain custom resource for domainUid {0} in namespace {1}\",\n+            domainUid, domNamespace);\n+    boolean domCreated = assertDoesNotThrow(() -> createDomainCustomResource(domain),\n+            String.format(\"Create domain custom resource failed with ApiException for %s in namespace %s\",\n+                    domainUid, domNamespace));\n+    assertTrue(domCreated, String.format(\"Create domain custom resource failed with ApiException \"\n+                    + \"for %s in namespace %s\", domainUid, domNamespace));\n+  }\n+\n+  // Crate a ConfigMap with a model to add a 2 independent managed servers", "originalCommit": "8342b309c35a0180e1f9673d5487f32c16606c6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1MzY3Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492253677", "bodyText": "done", "author": "anpanigr", "createdAt": "2020-09-21T18:11:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyNTEwMA=="}], "type": "inlineReview", "revised_code": {"commit": "94e459e05db86120ca95a52ecd0f9dcdf33b1854", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java\nindex e2472c9980..eecaa10da5 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java\n\n@@ -63,12 +63,11 @@ import static org.junit.jupiter.api.Assertions.assertTrue;\n \n /**\n  * This test class verifies the `default-secure` service is provisioned when \n- * a channel called `default-secure` is added to domain custom resource \n- * definition and SSL is enabled in WebLogic configuration.\n+ * a channel called `default-secure` is added to domain resource \n+ * and SSL is enabled in WebLogic configuration.\n  */\n-\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@DisplayName(\"Test secure nodePort service through SSL port and default-secure channel in domain CRD in a mii domain\")\n+@DisplayName(\"Test secure nodePort service through SSL port and default-secure channel in a mii domain\")\n @IntegrationTest\n class ItSecureNodePort {\n \n"}}, {"oid": "b106e2e6f4a47899e864653da873dfac59060284", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b106e2e6f4a47899e864653da873dfac59060284", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into sec-service", "committedDate": "2020-09-21T18:08:08Z", "type": "commit"}, {"oid": "94e459e05db86120ca95a52ecd0f9dcdf33b1854", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/94e459e05db86120ca95a52ecd0f9dcdf33b1854", "message": "Review comments", "committedDate": "2020-09-21T18:08:59Z", "type": "commit"}, {"oid": "659e2974ec31cb43500f83703ee5862d3c594624", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/659e2974ec31cb43500f83703ee5862d3c594624", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into sec-service", "committedDate": "2020-09-22T15:09:46Z", "type": "commit"}, {"oid": "90a7ae61386b3a9f9b4b536b40dbbec54b94a9be", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/90a7ae61386b3a9f9b4b536b40dbbec54b94a9be", "message": "Sync up develop branch", "committedDate": "2020-09-22T15:38:25Z", "type": "commit"}, {"oid": "26b51fd2e2571d49dbf4011af43f098a823f717e", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/26b51fd2e2571d49dbf4011af43f098a823f717e", "message": "Review comments resolution", "committedDate": "2020-09-22T21:55:26Z", "type": "commit"}, {"oid": "33306838fa59d7734b917f7debddc87872bbc5fb", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/33306838fa59d7734b917f7debddc87872bbc5fb", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into sec-service", "committedDate": "2020-09-22T21:55:40Z", "type": "commit"}, {"oid": "fa2a3394c95847bf3c18ee33f7baa2fe51e64497", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/fa2a3394c95847bf3c18ee33f7baa2fe51e64497", "message": "Add check the availability of exteranal service", "committedDate": "2020-09-22T23:27:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkzNTY1NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492935655", "bodyText": "There is only test in this class, we don't need test method order", "author": "sankarpn", "createdAt": "2020-09-22T18:09:11Z", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java", "diffHunk": "@@ -0,0 +1,311 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.KIND_REPO;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createConfigMap;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOCRRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the `default-admin` service is provisioned when \n+ * a channel called `default-admin` is added to domain resource and \n+ * `AdministrationPortEnabled` is set to true.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)", "originalCommit": "90a7ae61386b3a9f9b4b536b40dbbec54b94a9be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk3NDg0Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r493974842", "bodyText": "done", "author": "anpanigr", "createdAt": "2020-09-24T00:40:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkzNTY1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "26b51fd2e2571d49dbf4011af43f098a823f717e", "chunk": "diff --git a/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java b/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\nindex 558b4dab31..b5a5e070b6 100644\n--- a/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\n+++ b/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\n\n@@ -7,12 +7,10 @@ import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n-import io.kubernetes.client.openapi.ApiException;\n import io.kubernetes.client.openapi.models.V1ConfigMap;\n import io.kubernetes.client.openapi.models.V1EnvVar;\n import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n import io.kubernetes.client.openapi.models.V1ObjectMeta;\n-import io.kubernetes.client.openapi.models.V1Secret;\n import io.kubernetes.client.openapi.models.V1SecretReference;\n import oracle.weblogic.domain.AdminServer;\n import oracle.weblogic.domain.AdminService;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkzNzE5Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r492937193", "bodyText": "You  can use ADMIN_USERNAME_DEFAULT, and ADMIN_PASSWORD_DEFAULT instead of hard coding it", "author": "sankarpn", "createdAt": "2020-09-22T18:11:42Z", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java", "diffHunk": "@@ -0,0 +1,311 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1Secret;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.KIND_REPO;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createConfigMap;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createSecret;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOCRRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the `default-admin` service is provisioned when \n+ * a channel called `default-admin` is added to domain resource and \n+ * `AdministrationPortEnabled` is set to true.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test secure nodePort service through admin port and default-admin channel in a mii domain\")\n+@IntegrationTest\n+class ItSecureAdminNodePort {\n+\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static ConditionFactory withStandardRetryPolicy = null;\n+  private static String wlsBaseImage = WLS_BASE_IMAGE_NAME + \":\" + WLS_BASE_IMAGE_TAG;\n+  private static boolean isUseSecret = true;\n+  private static int replicaCount = 2;\n+  private static final String domainUid = \"mii-default-admin\";\n+  private StringBuffer curlString = null;\n+\n+  private StringBuffer checkCluster = null;\n+  private static Map<String, Object> secretNameMap;\n+\n+  private final String adminServerPodName = domainUid + \"-admin-server\";\n+  private final String managedServerPrefix = domainUid + \"-managed-server\";\n+  private final String adminServerName = \"admin-server\";\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Install Operator.\n+   * Create domain resource.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+    // create standard, reusable retry/backoff policy\n+    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(10, SECONDS)\n+        .atMost(5, MINUTES).await();\n+\n+    // get a new unique opNamespace\n+    logger.info(\"Assigning unique namespace for Operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n+    opNamespace = namespaces.get(0);\n+\n+    logger.info(\"Assigning unique namespace for Domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // install and verify operator\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    // Create the repo secret to pull the image\n+    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n+          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n+\n+    // create secret for admin credentials\n+    logger.info(\"Create secret for admin credentials\");\n+    String adminSecretName = \"weblogic-credentials\";\n+    assertDoesNotThrow(() -> createDomainSecret(adminSecretName,\"weblogic\",\n+            \"welcome1\", domainNamespace),", "originalCommit": "90a7ae61386b3a9f9b4b536b40dbbec54b94a9be", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk3NTIyOA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r493975228", "bodyText": "done", "author": "anpanigr", "createdAt": "2020-09-24T00:41:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkzNzE5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "26b51fd2e2571d49dbf4011af43f098a823f717e", "chunk": "diff --git a/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java b/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\nindex 558b4dab31..b5a5e070b6 100644\n--- a/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\n+++ b/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\n\n@@ -7,12 +7,10 @@ import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n-import io.kubernetes.client.openapi.ApiException;\n import io.kubernetes.client.openapi.models.V1ConfigMap;\n import io.kubernetes.client.openapi.models.V1EnvVar;\n import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n import io.kubernetes.client.openapi.models.V1ObjectMeta;\n-import io.kubernetes.client.openapi.models.V1Secret;\n import io.kubernetes.client.openapi.models.V1SecretReference;\n import oracle.weblogic.domain.AdminServer;\n import oracle.weblogic.domain.AdminService;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5Njg2OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r493096869", "bodyText": "There is only one test method in this class, why do you need TestMethodOrder?", "author": "sankarpn", "createdAt": "2020-09-22T23:54:48Z", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java", "diffHunk": "@@ -0,0 +1,301 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.KIND_REPO;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createConfigMap;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOCRRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the `default-secure` service is provisioned when \n+ * a channel called `default-secure` is added to domain resource and \n+ * SSL is enabled in WebLogic configuration.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)", "originalCommit": "fa2a3394c95847bf3c18ee33f7baa2fe51e64497", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk3NTMwOA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r493975308", "bodyText": "done", "author": "anpanigr", "createdAt": "2020-09-24T00:41:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5Njg2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "380bea4ee8b2cda4c05e1bdbe7df671bc472ce35", "chunk": "diff --git a/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java b/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java\ndeleted file mode 100644\nindex abe24d73f7..0000000000\n--- a/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java\n+++ /dev/null\n\n@@ -1,301 +0,0 @@\n-// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n-// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n-\n-package oracle.weblogic.kubernetes;\n-\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-import io.kubernetes.client.openapi.models.V1ConfigMap;\n-import io.kubernetes.client.openapi.models.V1EnvVar;\n-import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n-import io.kubernetes.client.openapi.models.V1ObjectMeta;\n-import io.kubernetes.client.openapi.models.V1SecretReference;\n-import oracle.weblogic.domain.AdminServer;\n-import oracle.weblogic.domain.AdminService;\n-import oracle.weblogic.domain.Channel;\n-import oracle.weblogic.domain.Cluster;\n-import oracle.weblogic.domain.Configuration;\n-import oracle.weblogic.domain.Domain;\n-import oracle.weblogic.domain.DomainSpec;\n-import oracle.weblogic.domain.Model;\n-import oracle.weblogic.domain.ServerPod;\n-import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n-import oracle.weblogic.kubernetes.annotations.Namespaces;\n-import oracle.weblogic.kubernetes.logging.LoggingFacade;\n-import org.awaitility.core.ConditionFactory;\n-import org.junit.jupiter.api.BeforeAll;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.DisplayName;\n-import org.junit.jupiter.api.MethodOrderer;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.TestMethodOrder;\n-\n-import static java.util.concurrent.TimeUnit.MINUTES;\n-import static java.util.concurrent.TimeUnit.SECONDS;\n-import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n-import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n-import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n-import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n-import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n-import static oracle.weblogic.kubernetes.TestConstants.KIND_REPO;\n-import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n-import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n-import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n-import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n-import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n-import static oracle.weblogic.kubernetes.actions.TestActions.createConfigMap;\n-import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n-import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n-import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n-import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n-import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n-import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOCRRepoSecret;\n-import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n-import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n-import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n-import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n-import static org.awaitility.Awaitility.with;\n-import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-\n-/**\n- * This test class verifies the `default-secure` service is provisioned when \n- * a channel called `default-secure` is added to domain resource and \n- * SSL is enabled in WebLogic configuration.\n- */\n-@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@DisplayName(\"Test secure nodePort service through SSL port and default-secure channel in a mii domain\")\n-@IntegrationTest\n-class ItSecureNodePort {\n-\n-  private static String opNamespace = null;\n-  private static String domainNamespace = null;\n-  private static ConditionFactory withStandardRetryPolicy = null;\n-  private static String wlsBaseImage = WLS_BASE_IMAGE_NAME + \":\" + WLS_BASE_IMAGE_TAG;\n-  private static boolean isUseSecret = true;\n-  private static int replicaCount = 2;\n-  private static final String domainUid = \"mii-default-secure\";\n-  private StringBuffer curlString = null;\n-\n-  private StringBuffer checkCluster = null;\n-  private static Map<String, Object> secretNameMap;\n-\n-  private final String adminServerPodName = domainUid + \"-admin-server\";\n-  private final String managedServerPrefix = domainUid + \"-managed-server\";\n-  private final String adminServerName = \"admin-server\";\n-\n-  private static LoggingFacade logger = null;\n-\n-  /**\n-   * Install Operator.\n-   * Create domain resource.\n-   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n-   JUnit engine parameter resolution mechanism\n-   */\n-  @BeforeAll\n-  public static void initAll(@Namespaces(2) List<String> namespaces) {\n-    logger = getLogger();\n-    // create standard, reusable retry/backoff policy\n-    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n-        .and().with().pollInterval(10, SECONDS)\n-        .atMost(5, MINUTES).await();\n-\n-    // get a new unique opNamespace\n-    logger.info(\"Assigning unique namespace for Operator\");\n-    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n-    opNamespace = namespaces.get(0);\n-\n-    logger.info(\"Assigning unique namespace for Domain\");\n-    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n-    domainNamespace = namespaces.get(1);\n-\n-    // install and verify operator\n-    installAndVerifyOperator(opNamespace, domainNamespace);\n-\n-    // Create the repo secret to pull the image\n-    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n-          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n-\n-    // create secret for admin credentials\n-    logger.info(\"Create secret for admin credentials\");\n-    String adminSecretName = \"weblogic-credentials\";\n-    createSecretWithUsernamePassword(adminSecretName, domainNamespace,\n-            ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n-\n-    // create encryption secret\n-    logger.info(\"Create encryption secret\");\n-    String encryptionSecretName = \"encryptionsecret\";\n-    createSecretWithUsernamePassword(encryptionSecretName, domainNamespace,\n-            \"weblogicenc\", \"weblogicenc\");\n-\n-    String configMapName = \"default-secure-configmap\";\n-    String yamlString = \"topology:\\n\"\n-        + \"  Server:\\n\"\n-        + \"    'admin-server':\\n\"\n-        + \"       SSL: \\n\"\n-        + \"         Enabled: true \\n\"\n-        + \"         ListenPort: '7008' \\n\";\n-    createModelConfigMap(configMapName, yamlString);\n-\n-    //determine if the tests are running in Kind cluster. if true use images from Kind registry\n-    if (KIND_REPO != null) {\n-      String kindRepoImage = KIND_REPO + wlsBaseImage.substring(TestConstants.OCR_REGISTRY.length() + 1);\n-      logger.info(\"Using image {0}\", kindRepoImage);\n-      wlsBaseImage = kindRepoImage;\n-      isUseSecret = false;\n-    } else {\n-      // create pull secrets for WebLogic image when running in non Kind Kubernetes cluster\n-      createOCRRepoSecret(domainNamespace);\n-    }\n-\n-    // create the domain CR with a pre-defined configmap\n-    createDomainResource(domainUid, domainNamespace, adminSecretName,\n-        REPO_SECRET_NAME, encryptionSecretName,\n-        replicaCount, configMapName);\n-\n-    // wait for the domain to exist\n-    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n-    withStandardRetryPolicy\n-        .conditionEvaluationListener(\n-            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n-                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n-                domainUid,\n-                domainNamespace,\n-                condition.getElapsedTimeInMS(),\n-                condition.getRemainingTimeInMS()))\n-        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n-  }\n-\n-  /**\n-   * Verify all server pods are running.\n-   * Verify all k8s services for all servers are created.\n-   */\n-  @BeforeEach\n-  public void beforeEach() {\n-    logger.info(\"Check admin service and pod {0} is created in namespace {1}\",\n-        adminServerPodName, domainNamespace);\n-    checkPodReadyAndServiceExists(adminServerPodName, domainUid, domainNamespace);\n-    // check managed server services and pods are ready\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Wait for managed server services and pods are created in namespace {0}\",\n-          domainNamespace);\n-      checkPodReadyAndServiceExists(managedServerPrefix + i, domainUid, domainNamespace);\n-    }\n-  }\n-\n-  /**\n-   * Create a WebLogic domain with SSL enabled in WebLogic configuration.\n-   * Create a domain resource with a channel with the name `default-secure`.\n-   * Make sure an external NodePort service is created in domain namespace.\n-   * Make sure WebLogic console is accessible through the `default-secure` service. \n-   * Make sure WebLogic console is accessible through the `default` service.  \n-   */\n-  @Test\n-  @DisplayName(\"Verify the secure service through SSL port\")\n-  public void testVerifySecurePortService() {\n-    int sslNodePort = getServiceNodePort(\n-         domainNamespace, adminServerPodName + \"-external\", \"default-secure\");\n-    assertTrue(sslNodePort != -1,\n-          \"Could not get the default-secure external service node port\");\n-    logger.info(\"Found the administration service nodePort {0}\", sslNodePort);\n-    String curlCmd = \"curl -sk --show-error --noproxy '*' \"\n-        + \" https://\" + K8S_NODEPORT_HOST + \":\" + sslNodePort\n-        + \"/console/login/LoginForm.jsp --write-out %{http_code} -o /dev/null\";\n-    logger.info(\"Executing default-admin nodeport curl command {0}\", curlCmd);\n-    assertTrue(callWebAppAndWaitTillReady(curlCmd, 10));\n-    logger.info(\"WebLogic console is accessible thru default-secure service\");\n-    \n-    int nodePort = getServiceNodePort(\n-           domainNamespace, adminServerPodName + \"-external\", \"default\");\n-    assertTrue(nodePort != -1,\n-          \"Could not get the default external service node port\");\n-    logger.info(\"Found the default service nodePort {0}\", nodePort);\n-    String curlCmd2 = \"curl -s --show-error --noproxy '*' \"\n-        + \" http://\" + K8S_NODEPORT_HOST + \":\" + nodePort\n-        + \"/console/login/LoginForm.jsp --write-out %{http_code} -o /dev/null\";\n-    logger.info(\"Executing default nodeport curl command {0}\", curlCmd);\n-    assertTrue(callWebAppAndWaitTillReady(curlCmd2, 5));\n-    logger.info(\"WebLogic console is accessible thru default service\");\n-  }\n-\n-  private static void createDomainResource(\n-      String domainUid, String domNamespace, String adminSecretName,\n-      String repoSecretName, String encryptionSecretName, \n-      int replicaCount, String configmapName) {\n-    // create the domain CR\n-    Domain domain = new Domain()\n-            .apiVersion(DOMAIN_API_VERSION)\n-            .kind(\"Domain\")\n-            .metadata(new V1ObjectMeta()\n-                    .name(domainUid)\n-                    .namespace(domNamespace))\n-            .spec(new DomainSpec()\n-                    .domainUid(domainUid)\n-                    .domainHomeSourceType(\"FromModel\")\n-                    .image(MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG)\n-                    .addImagePullSecretsItem(new V1LocalObjectReference()\n-                            .name(repoSecretName))\n-                    .webLogicCredentialsSecret(new V1SecretReference()\n-                            .name(adminSecretName)\n-                            .namespace(domNamespace))\n-                    .includeServerOutInPodLog(true)\n-                    .serverStartPolicy(\"IF_NEEDED\")\n-                    .serverPod(new ServerPod()\n-                            .addEnvItem(new V1EnvVar()\n-                                    .name(\"JAVA_OPTIONS\")\n-                                    .value(\"-Dweblogic.security.SSL.ignoreHostnameVerification=true\"))\n-                            .addEnvItem(new V1EnvVar()\n-                                    .name(\"USER_MEM_ARGS\")\n-                                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n-                    .adminServer(new AdminServer()\n-                            .serverStartState(\"RUNNING\")\n-                            .adminService(new AdminService()\n-                                    .addChannelsItem(new Channel()\n-                                            .channelName(\"default\")\n-                                            .nodePort(0))\n-                                    .addChannelsItem(new Channel()\n-                                            .channelName(\"default-secure\")\n-                                            .nodePort(0))))\n-                    .addClustersItem(new Cluster()\n-                            .clusterName(\"cluster-1\")\n-                            .replicas(replicaCount)\n-                            .serverStartState(\"RUNNING\"))\n-                    .configuration(new Configuration()\n-                            .model(new Model()\n-                                    .domainType(\"WLS\")\n-                                    .configMap(configmapName)\n-                                    .runtimeEncryptionSecret(encryptionSecretName))\n-                        .introspectorJobActiveDeadlineSeconds(300L)));\n-\n-    logger.info(\"Create domain custom resource for domainUid {0} in namespace {1}\",\n-            domainUid, domNamespace);\n-    boolean domCreated = assertDoesNotThrow(() -> createDomainCustomResource(domain),\n-            String.format(\"Create domain custom resource failed with ApiException for %s in namespace %s\",\n-                    domainUid, domNamespace));\n-    assertTrue(domCreated, String.format(\"Create domain custom resource failed with ApiException \"\n-                    + \"for %s in namespace %s\", domainUid, domNamespace));\n-  }\n-\n-  // create a ConfigMap with a model that enable SSL on the Administration server\n-  private static void createModelConfigMap(String configMapName, String model) {\n-    Map<String, String> labels = new HashMap<>();\n-    labels.put(\"weblogic.domainUid\", domainUid);\n-    Map<String, String> data = new HashMap<>();\n-    data.put(\"model.adminport.yaml\", model);\n-\n-    V1ConfigMap configMap = new V1ConfigMap()\n-        .data(data)\n-        .metadata(new V1ObjectMeta()\n-            .labels(labels)\n-            .name(configMapName)\n-            .namespace(domainNamespace));\n-\n-    boolean cmCreated = assertDoesNotThrow(() -> createConfigMap(configMap),\n-        String.format(\"Can't create ConfigMap %s\", configMapName));\n-    assertTrue(cmCreated, String.format(\"createConfigMap failed %s\", configMapName));\n-  }\n-\n-}\n"}}, {"oid": "a15a1a0cb85ec015d1f6f21c5d3919a86bd1c443", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a15a1a0cb85ec015d1f6f21c5d3919a86bd1c443", "message": "Resolve more review comments", "committedDate": "2020-09-23T01:24:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzczODg4Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r493738886", "bodyText": "as we discussed please change the It class name", "author": "vanajamukkara", "createdAt": "2020-09-23T16:44:25Z", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java", "diffHunk": "@@ -0,0 +1,281 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createConfigMap;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the `default-admin` service is provisioned when \n+ * a channel called `default-admin` is added to domain resource and \n+ * `AdministrationPortEnabled` is set to true.\n+ */\n+@DisplayName(\"Test secure nodePort service through admin port and default-admin channel in a mii domain\")\n+@IntegrationTest\n+class ItSecureAdminNodePort {", "originalCommit": "a15a1a0cb85ec015d1f6f21c5d3919a86bd1c443", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk3NTQ2Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r493975467", "bodyText": "Now the class name is ItDefaultAdminNodePort", "author": "anpanigr", "createdAt": "2020-09-24T00:42:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzczODg4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "380bea4ee8b2cda4c05e1bdbe7df671bc472ce35", "chunk": "diff --git a/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java b/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDefaultAdminNodePort.java\nsimilarity index 99%\nrename from integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\nrename to integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDefaultAdminNodePort.java\nindex 8af35ab32d..2f84ed8815 100644\n--- a/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureAdminNodePort.java\n+++ b/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDefaultAdminNodePort.java\n\n@@ -63,7 +63,7 @@ import static org.junit.jupiter.api.Assertions.assertTrue;\n  */\n @DisplayName(\"Test secure nodePort service through admin port and default-admin channel in a mii domain\")\n @IntegrationTest\n-class ItSecureAdminNodePort {\n+class ItDefaultAdminNodePort {\n \n   private static String opNamespace = null;\n   private static String domainNamespace = null;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzczOTM5OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r493739398", "bodyText": "as discussed move this test to an existing mii domain", "author": "vanajamukkara", "createdAt": "2020-09-23T16:45:10Z", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java", "diffHunk": "@@ -0,0 +1,301 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.kubernetes.client.openapi.models.V1ConfigMap;\n+import io.kubernetes.client.openapi.models.V1EnvVar;\n+import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1SecretReference;\n+import oracle.weblogic.domain.AdminServer;\n+import oracle.weblogic.domain.AdminService;\n+import oracle.weblogic.domain.Channel;\n+import oracle.weblogic.domain.Cluster;\n+import oracle.weblogic.domain.Configuration;\n+import oracle.weblogic.domain.Domain;\n+import oracle.weblogic.domain.DomainSpec;\n+import oracle.weblogic.domain.Model;\n+import oracle.weblogic.domain.ServerPod;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.KIND_REPO;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createConfigMap;\n+import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOCRRepoSecret;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * This test class verifies the `default-secure` service is provisioned when \n+ * a channel called `default-secure` is added to domain resource and \n+ * SSL is enabled in WebLogic configuration.\n+ */\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+@DisplayName(\"Test secure nodePort service through SSL port and default-secure channel in a mii domain\")\n+@IntegrationTest\n+class ItSecureNodePort {", "originalCommit": "a15a1a0cb85ec015d1f6f21c5d3919a86bd1c443", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk3NTc3OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1931#discussion_r493975778", "bodyText": "Moved the test into ItMiiDomain.java and merger the method  testCreateMiiDomain()", "author": "anpanigr", "createdAt": "2020-09-24T00:43:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzczOTM5OA=="}], "type": "inlineReview", "revised_code": {"commit": "380bea4ee8b2cda4c05e1bdbe7df671bc472ce35", "chunk": "diff --git a/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java b/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java\ndeleted file mode 100644\nindex abe24d73f7..0000000000\n--- a/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSecureNodePort.java\n+++ /dev/null\n\n@@ -1,301 +0,0 @@\n-// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n-// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n-\n-package oracle.weblogic.kubernetes;\n-\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-import io.kubernetes.client.openapi.models.V1ConfigMap;\n-import io.kubernetes.client.openapi.models.V1EnvVar;\n-import io.kubernetes.client.openapi.models.V1LocalObjectReference;\n-import io.kubernetes.client.openapi.models.V1ObjectMeta;\n-import io.kubernetes.client.openapi.models.V1SecretReference;\n-import oracle.weblogic.domain.AdminServer;\n-import oracle.weblogic.domain.AdminService;\n-import oracle.weblogic.domain.Channel;\n-import oracle.weblogic.domain.Cluster;\n-import oracle.weblogic.domain.Configuration;\n-import oracle.weblogic.domain.Domain;\n-import oracle.weblogic.domain.DomainSpec;\n-import oracle.weblogic.domain.Model;\n-import oracle.weblogic.domain.ServerPod;\n-import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n-import oracle.weblogic.kubernetes.annotations.Namespaces;\n-import oracle.weblogic.kubernetes.logging.LoggingFacade;\n-import org.awaitility.core.ConditionFactory;\n-import org.junit.jupiter.api.BeforeAll;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.DisplayName;\n-import org.junit.jupiter.api.MethodOrderer;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.TestMethodOrder;\n-\n-import static java.util.concurrent.TimeUnit.MINUTES;\n-import static java.util.concurrent.TimeUnit.SECONDS;\n-import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n-import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n-import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_API_VERSION;\n-import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n-import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n-import static oracle.weblogic.kubernetes.TestConstants.KIND_REPO;\n-import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_NAME;\n-import static oracle.weblogic.kubernetes.TestConstants.MII_BASIC_IMAGE_TAG;\n-import static oracle.weblogic.kubernetes.TestConstants.REPO_SECRET_NAME;\n-import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_NAME;\n-import static oracle.weblogic.kubernetes.actions.ActionConstants.WLS_BASE_IMAGE_TAG;\n-import static oracle.weblogic.kubernetes.actions.TestActions.createConfigMap;\n-import static oracle.weblogic.kubernetes.actions.TestActions.createDomainCustomResource;\n-import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n-import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n-import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n-import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createDockerRegistrySecret;\n-import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createOCRRepoSecret;\n-import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n-import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n-import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n-import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n-import static org.awaitility.Awaitility.with;\n-import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-\n-/**\n- * This test class verifies the `default-secure` service is provisioned when \n- * a channel called `default-secure` is added to domain resource and \n- * SSL is enabled in WebLogic configuration.\n- */\n-@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n-@DisplayName(\"Test secure nodePort service through SSL port and default-secure channel in a mii domain\")\n-@IntegrationTest\n-class ItSecureNodePort {\n-\n-  private static String opNamespace = null;\n-  private static String domainNamespace = null;\n-  private static ConditionFactory withStandardRetryPolicy = null;\n-  private static String wlsBaseImage = WLS_BASE_IMAGE_NAME + \":\" + WLS_BASE_IMAGE_TAG;\n-  private static boolean isUseSecret = true;\n-  private static int replicaCount = 2;\n-  private static final String domainUid = \"mii-default-secure\";\n-  private StringBuffer curlString = null;\n-\n-  private StringBuffer checkCluster = null;\n-  private static Map<String, Object> secretNameMap;\n-\n-  private final String adminServerPodName = domainUid + \"-admin-server\";\n-  private final String managedServerPrefix = domainUid + \"-managed-server\";\n-  private final String adminServerName = \"admin-server\";\n-\n-  private static LoggingFacade logger = null;\n-\n-  /**\n-   * Install Operator.\n-   * Create domain resource.\n-   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n-   JUnit engine parameter resolution mechanism\n-   */\n-  @BeforeAll\n-  public static void initAll(@Namespaces(2) List<String> namespaces) {\n-    logger = getLogger();\n-    // create standard, reusable retry/backoff policy\n-    withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n-        .and().with().pollInterval(10, SECONDS)\n-        .atMost(5, MINUTES).await();\n-\n-    // get a new unique opNamespace\n-    logger.info(\"Assigning unique namespace for Operator\");\n-    assertNotNull(namespaces.get(0), \"Namespace list is null\");\n-    opNamespace = namespaces.get(0);\n-\n-    logger.info(\"Assigning unique namespace for Domain\");\n-    assertNotNull(namespaces.get(1), \"Namespace list is null\");\n-    domainNamespace = namespaces.get(1);\n-\n-    // install and verify operator\n-    installAndVerifyOperator(opNamespace, domainNamespace);\n-\n-    // Create the repo secret to pull the image\n-    assertDoesNotThrow(() -> createDockerRegistrySecret(domainNamespace),\n-          String.format(\"createSecret failed for %s\", REPO_SECRET_NAME));\n-\n-    // create secret for admin credentials\n-    logger.info(\"Create secret for admin credentials\");\n-    String adminSecretName = \"weblogic-credentials\";\n-    createSecretWithUsernamePassword(adminSecretName, domainNamespace,\n-            ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n-\n-    // create encryption secret\n-    logger.info(\"Create encryption secret\");\n-    String encryptionSecretName = \"encryptionsecret\";\n-    createSecretWithUsernamePassword(encryptionSecretName, domainNamespace,\n-            \"weblogicenc\", \"weblogicenc\");\n-\n-    String configMapName = \"default-secure-configmap\";\n-    String yamlString = \"topology:\\n\"\n-        + \"  Server:\\n\"\n-        + \"    'admin-server':\\n\"\n-        + \"       SSL: \\n\"\n-        + \"         Enabled: true \\n\"\n-        + \"         ListenPort: '7008' \\n\";\n-    createModelConfigMap(configMapName, yamlString);\n-\n-    //determine if the tests are running in Kind cluster. if true use images from Kind registry\n-    if (KIND_REPO != null) {\n-      String kindRepoImage = KIND_REPO + wlsBaseImage.substring(TestConstants.OCR_REGISTRY.length() + 1);\n-      logger.info(\"Using image {0}\", kindRepoImage);\n-      wlsBaseImage = kindRepoImage;\n-      isUseSecret = false;\n-    } else {\n-      // create pull secrets for WebLogic image when running in non Kind Kubernetes cluster\n-      createOCRRepoSecret(domainNamespace);\n-    }\n-\n-    // create the domain CR with a pre-defined configmap\n-    createDomainResource(domainUid, domainNamespace, adminSecretName,\n-        REPO_SECRET_NAME, encryptionSecretName,\n-        replicaCount, configMapName);\n-\n-    // wait for the domain to exist\n-    logger.info(\"Check for domain custom resource in namespace {0}\", domainNamespace);\n-    withStandardRetryPolicy\n-        .conditionEvaluationListener(\n-            condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n-                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n-                domainUid,\n-                domainNamespace,\n-                condition.getElapsedTimeInMS(),\n-                condition.getRemainingTimeInMS()))\n-        .until(domainExists(domainUid, DOMAIN_VERSION, domainNamespace));\n-  }\n-\n-  /**\n-   * Verify all server pods are running.\n-   * Verify all k8s services for all servers are created.\n-   */\n-  @BeforeEach\n-  public void beforeEach() {\n-    logger.info(\"Check admin service and pod {0} is created in namespace {1}\",\n-        adminServerPodName, domainNamespace);\n-    checkPodReadyAndServiceExists(adminServerPodName, domainUid, domainNamespace);\n-    // check managed server services and pods are ready\n-    for (int i = 1; i <= replicaCount; i++) {\n-      logger.info(\"Wait for managed server services and pods are created in namespace {0}\",\n-          domainNamespace);\n-      checkPodReadyAndServiceExists(managedServerPrefix + i, domainUid, domainNamespace);\n-    }\n-  }\n-\n-  /**\n-   * Create a WebLogic domain with SSL enabled in WebLogic configuration.\n-   * Create a domain resource with a channel with the name `default-secure`.\n-   * Make sure an external NodePort service is created in domain namespace.\n-   * Make sure WebLogic console is accessible through the `default-secure` service. \n-   * Make sure WebLogic console is accessible through the `default` service.  \n-   */\n-  @Test\n-  @DisplayName(\"Verify the secure service through SSL port\")\n-  public void testVerifySecurePortService() {\n-    int sslNodePort = getServiceNodePort(\n-         domainNamespace, adminServerPodName + \"-external\", \"default-secure\");\n-    assertTrue(sslNodePort != -1,\n-          \"Could not get the default-secure external service node port\");\n-    logger.info(\"Found the administration service nodePort {0}\", sslNodePort);\n-    String curlCmd = \"curl -sk --show-error --noproxy '*' \"\n-        + \" https://\" + K8S_NODEPORT_HOST + \":\" + sslNodePort\n-        + \"/console/login/LoginForm.jsp --write-out %{http_code} -o /dev/null\";\n-    logger.info(\"Executing default-admin nodeport curl command {0}\", curlCmd);\n-    assertTrue(callWebAppAndWaitTillReady(curlCmd, 10));\n-    logger.info(\"WebLogic console is accessible thru default-secure service\");\n-    \n-    int nodePort = getServiceNodePort(\n-           domainNamespace, adminServerPodName + \"-external\", \"default\");\n-    assertTrue(nodePort != -1,\n-          \"Could not get the default external service node port\");\n-    logger.info(\"Found the default service nodePort {0}\", nodePort);\n-    String curlCmd2 = \"curl -s --show-error --noproxy '*' \"\n-        + \" http://\" + K8S_NODEPORT_HOST + \":\" + nodePort\n-        + \"/console/login/LoginForm.jsp --write-out %{http_code} -o /dev/null\";\n-    logger.info(\"Executing default nodeport curl command {0}\", curlCmd);\n-    assertTrue(callWebAppAndWaitTillReady(curlCmd2, 5));\n-    logger.info(\"WebLogic console is accessible thru default service\");\n-  }\n-\n-  private static void createDomainResource(\n-      String domainUid, String domNamespace, String adminSecretName,\n-      String repoSecretName, String encryptionSecretName, \n-      int replicaCount, String configmapName) {\n-    // create the domain CR\n-    Domain domain = new Domain()\n-            .apiVersion(DOMAIN_API_VERSION)\n-            .kind(\"Domain\")\n-            .metadata(new V1ObjectMeta()\n-                    .name(domainUid)\n-                    .namespace(domNamespace))\n-            .spec(new DomainSpec()\n-                    .domainUid(domainUid)\n-                    .domainHomeSourceType(\"FromModel\")\n-                    .image(MII_BASIC_IMAGE_NAME + \":\" + MII_BASIC_IMAGE_TAG)\n-                    .addImagePullSecretsItem(new V1LocalObjectReference()\n-                            .name(repoSecretName))\n-                    .webLogicCredentialsSecret(new V1SecretReference()\n-                            .name(adminSecretName)\n-                            .namespace(domNamespace))\n-                    .includeServerOutInPodLog(true)\n-                    .serverStartPolicy(\"IF_NEEDED\")\n-                    .serverPod(new ServerPod()\n-                            .addEnvItem(new V1EnvVar()\n-                                    .name(\"JAVA_OPTIONS\")\n-                                    .value(\"-Dweblogic.security.SSL.ignoreHostnameVerification=true\"))\n-                            .addEnvItem(new V1EnvVar()\n-                                    .name(\"USER_MEM_ARGS\")\n-                                    .value(\"-Djava.security.egd=file:/dev/./urandom \")))\n-                    .adminServer(new AdminServer()\n-                            .serverStartState(\"RUNNING\")\n-                            .adminService(new AdminService()\n-                                    .addChannelsItem(new Channel()\n-                                            .channelName(\"default\")\n-                                            .nodePort(0))\n-                                    .addChannelsItem(new Channel()\n-                                            .channelName(\"default-secure\")\n-                                            .nodePort(0))))\n-                    .addClustersItem(new Cluster()\n-                            .clusterName(\"cluster-1\")\n-                            .replicas(replicaCount)\n-                            .serverStartState(\"RUNNING\"))\n-                    .configuration(new Configuration()\n-                            .model(new Model()\n-                                    .domainType(\"WLS\")\n-                                    .configMap(configmapName)\n-                                    .runtimeEncryptionSecret(encryptionSecretName))\n-                        .introspectorJobActiveDeadlineSeconds(300L)));\n-\n-    logger.info(\"Create domain custom resource for domainUid {0} in namespace {1}\",\n-            domainUid, domNamespace);\n-    boolean domCreated = assertDoesNotThrow(() -> createDomainCustomResource(domain),\n-            String.format(\"Create domain custom resource failed with ApiException for %s in namespace %s\",\n-                    domainUid, domNamespace));\n-    assertTrue(domCreated, String.format(\"Create domain custom resource failed with ApiException \"\n-                    + \"for %s in namespace %s\", domainUid, domNamespace));\n-  }\n-\n-  // create a ConfigMap with a model that enable SSL on the Administration server\n-  private static void createModelConfigMap(String configMapName, String model) {\n-    Map<String, String> labels = new HashMap<>();\n-    labels.put(\"weblogic.domainUid\", domainUid);\n-    Map<String, String> data = new HashMap<>();\n-    data.put(\"model.adminport.yaml\", model);\n-\n-    V1ConfigMap configMap = new V1ConfigMap()\n-        .data(data)\n-        .metadata(new V1ObjectMeta()\n-            .labels(labels)\n-            .name(configMapName)\n-            .namespace(domainNamespace));\n-\n-    boolean cmCreated = assertDoesNotThrow(() -> createConfigMap(configMap),\n-        String.format(\"Can't create ConfigMap %s\", configMapName));\n-    assertTrue(cmCreated, String.format(\"createConfigMap failed %s\", configMapName));\n-  }\n-\n-}\n"}}, {"oid": "e42a72a3ab647563e4272abfa95e38881b71ba2b", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e42a72a3ab647563e4272abfa95e38881b71ba2b", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into sec-service", "committedDate": "2020-09-23T17:39:46Z", "type": "commit"}, {"oid": "380bea4ee8b2cda4c05e1bdbe7df671bc472ce35", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/380bea4ee8b2cda4c05e1bdbe7df671bc472ce35", "message": "Consolidate the test doamin and rename the class", "committedDate": "2020-09-23T22:50:25Z", "type": "commit"}, {"oid": "0e14f5cfc12dcba3532cda5de60dfa74b05153f3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0e14f5cfc12dcba3532cda5de60dfa74b05153f3", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into sec-service", "committedDate": "2020-09-23T22:50:47Z", "type": "commit"}, {"oid": "cc23530287619e69e05a7e05b7e0cd0d4c595dae", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/cc23530287619e69e05a7e05b7e0cd0d4c595dae", "message": "Fixed few typos", "committedDate": "2020-09-24T13:56:13Z", "type": "commit"}]}