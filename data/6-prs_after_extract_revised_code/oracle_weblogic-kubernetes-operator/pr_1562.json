{"pr_number": 1562, "pr_title": "Adding diagnostic log collection feature to integration tests", "pr_createdAt": "2020-04-14T20:51:13Z", "pr_url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562", "timeline": [{"oid": "479386ec0c496260d646818bd0e4a5b154269134", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/479386ec0c496260d646818bd0e4a5b154269134", "message": "Adding diagnostic features to integration test", "committedDate": "2020-04-14T03:28:15Z", "type": "commit"}, {"oid": "bbaf7a22a84af5603b29a1f106674fa548ffcacf", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/bbaf7a22a84af5603b29a1f106674fa548ffcacf", "message": "wip", "committedDate": "2020-04-14T03:57:57Z", "type": "commit"}, {"oid": "982f386db010bb9d920d76ebdb40d7ce531cb3ca", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/982f386db010bb9d920d76ebdb40d7ce531cb3ca", "message": "wip", "committedDate": "2020-04-14T04:03:55Z", "type": "commit"}, {"oid": "f90145459fd402bf983824b8e4f188a44a30bc86", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f90145459fd402bf983824b8e4f188a44a30bc86", "message": "wip", "committedDate": "2020-04-14T04:05:27Z", "type": "commit"}, {"oid": "6bd0f84fc36adaff6900223dca211d2aa0f1bbfe", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/6bd0f84fc36adaff6900223dca211d2aa0f1bbfe", "message": "wip", "committedDate": "2020-04-14T04:23:49Z", "type": "commit"}, {"oid": "b3e2381bbedcb1cc00845ae0eb57e20cb979aa44", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b3e2381bbedcb1cc00845ae0eb57e20cb979aa44", "message": "initial implementation of diagnostic logging", "committedDate": "2020-04-14T06:49:10Z", "type": "commit"}, {"oid": "792ca7f29f6c85c426e4fc15f9df0ced53a2255f", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/792ca7f29f6c85c426e4fc15f9df0ced53a2255f", "message": "wip", "committedDate": "2020-04-14T17:59:21Z", "type": "commit"}, {"oid": "cd639a4988a3cbfe55f23d96746543230893c8a4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/cd639a4988a3cbfe55f23d96746543230893c8a4", "message": "changed the implementation to use LifecycleMethodExecutionExceptionHandler", "committedDate": "2020-04-14T18:47:04Z", "type": "commit"}, {"oid": "bf4687aa59af17c94b5b8297be83dd8bad172d52", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/bf4687aa59af17c94b5b8297be83dd8bad172d52", "message": "Added javadoc", "committedDate": "2020-04-14T20:45:56Z", "type": "commit"}, {"oid": "41ac7400ade6fb0324c2fe2c0843d84931196041", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/41ac7400ade6fb0324c2fe2c0843d84931196041", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into tests-diagnostics2", "committedDate": "2020-04-14T21:00:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQzNDgwNQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r408434805", "bodyText": "The above tagging won't be necessary if the decision is to use LogginUtil.getNSListIntersecting( )\nPlease add your review comments as to which way to use to get the namespace list.", "author": "sankarpn", "createdAt": "2020-04-14T21:05:24Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "diffHunk": "@@ -56,12 +58,16 @@\n @ExtendWith(Timing.class)\n // by implementing the LoggedTest, we will automatically get a logger injected and it\n // will also automatically log entry/exit messages for each test method.\n+@ExtendWith(IntegrationTestWatcher.class)\n class ItSimpleOperatorValidation implements LoggedTest {\n \n   private HelmParams opHelmParams = null;\n   private V1ServiceAccount serviceAccount = null;\n+  @NamespaceList\n   private String opNamespace = null;\n+  @NamespaceList\n   private String domainNamespace1 = null;\n+  @NamespaceList", "originalCommit": "41ac7400ade6fb0324c2fe2c0843d84931196041", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQzOTY2MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r408439660", "bodyText": "this is not what i was looking for, let's discuss at the daily meeting", "author": "markxnelson", "createdAt": "2020-04-14T21:14:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQzNDgwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk2MDQ4Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r409960482", "bodyText": "Implemented the new method of creating namespaces based on the Annotation at the method parameter. The TestWatcher creates it and passes it to the test method for use. The list is can be used for log collection and can be used for cleanup once the test is done.", "author": "sankarpn", "createdAt": "2020-04-17T02:44:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQzNDgwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "9c74956828ce8383c8f85e544426240c9bb58030", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java\nindex ccb4f959ad..c75dfb46d7 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java\n\n@@ -59,15 +60,13 @@ import static org.awaitility.Awaitility.with;\n // by implementing the LoggedTest, we will automatically get a logger injected and it\n // will also automatically log entry/exit messages for each test method.\n @ExtendWith(IntegrationTestWatcher.class)\n+@ITNamespaces(numofns = 3)\n class ItSimpleOperatorValidation implements LoggedTest {\n \n   private HelmParams opHelmParams = null;\n   private V1ServiceAccount serviceAccount = null;\n-  @NamespaceList\n   private String opNamespace = null;\n-  @NamespaceList\n   private String domainNamespace1 = null;\n-  @NamespaceList\n   private String domainNamespace2 = null;\n \n \n"}}, {"oid": "b7205e091ea1a6559c7ac01af786524e2c4fcb2e", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b7205e091ea1a6559c7ac01af786524e2c4fcb2e", "message": "fix newline", "committedDate": "2020-04-14T21:07:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQzOTg4NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r408439885", "bodyText": "fix javadoc", "author": "markxnelson", "createdAt": "2020-04-14T21:15:00Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -191,8 +228,18 @@ public static List listDeployments() {\n     return new ArrayList();\n   }\n \n-  // --------------------------- pods -----------------------------------------\n+  /**\n+   * List all deployments in a given namespace", "originalCommit": "b7205e091ea1a6559c7ac01af786524e2c4fcb2e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY4OTA3OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411689078", "bodyText": "fixed", "author": "sankarpn", "createdAt": "2020-04-20T21:00:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQzOTg4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY5MTM5OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411691399", "bodyText": "fixed", "author": "sankarpn", "createdAt": "2020-04-20T21:04:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQzOTg4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "097c03845a5208be14f945917e217971e7d22e8a", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java\nindex 351ca7c891..02d71529c8 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java\n\n@@ -229,10 +229,9 @@ public class Kubernetes implements LoggedTest {\n   }\n \n   /**\n-   * List all deployments in a given namespace\n-   *\n-   * @param namespace\n-   * @return V1DeploymentList\n+   * List all deployments in a given namespace.\n+   * @param namespace Namespace in which to list the deployments\n+   * @return V1DeploymentList of deployments in the Kubernetes cluster\n    */\n   public static V1DeploymentList listDeployments(String namespace) {\n     KubernetesApiResponse<V1DeploymentList> list = deploymentClient.list(namespace);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ0MDMyMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r408440322", "bodyText": "fix", "author": "markxnelson", "createdAt": "2020-04-14T21:15:52Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -621,19 +775,27 @@ public static boolean deleteSecret(String name, String namespace) throws ApiExce\n     if (response.getObject() != null) {\n       logger.info(\n           \"Received after-deletion status of the requested object, will be deleting \"\n-              + \"secret in background!\");\n+          + \"secret in background!\");\n     }\n \n     return true;\n   }\n \n-  // --------------------------- pv/pvc ---------------------------\n+  /**\n+   * List secrets in a given namespace", "originalCommit": "b7205e091ea1a6559c7ac01af786524e2c4fcb2e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY5MDI3OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411690279", "bodyText": "fixed", "author": "sankarpn", "createdAt": "2020-04-20T21:02:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ0MDMyMg=="}], "type": "inlineReview", "revised_code": {"commit": "097c03845a5208be14f945917e217971e7d22e8a", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java\nindex 351ca7c891..02d71529c8 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java\n\n@@ -782,9 +777,9 @@ public class Kubernetes implements LoggedTest {\n   }\n \n   /**\n-   * List secrets in a given namespace\n-   * @param namespace\n-   * @return V1SecretList\n+   * List secrets in the Kubernetes cluster.\n+   * @param namespace Namespace in which to query\n+   * @return V1SecretList of secrets in the Kubernetes cluster\n    */\n   public static V1SecretList listSecrets(String namespace) {\n     KubernetesApiResponse<V1SecretList> list = secretClient.list(namespace);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ0MDQ3OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r408440478", "bodyText": "fix", "author": "markxnelson", "createdAt": "2020-04-14T21:16:13Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -733,21 +906,40 @@ public static boolean deletePvc(String name, String namespace)\n     if (!response.isSuccess()) {\n       logger.warning(\n           \"Failed to delete persistent volume claim '\" + name + \"' from namespace: \"\n-              + namespace + \" with HTTP status code: \" + response.getHttpStatusCode());\n+          + namespace + \" with HTTP status code: \" + response.getHttpStatusCode());\n       return false;\n     }\n \n     if (response.getObject() != null) {\n       logger.info(\n           \"Received after-deletion status of the requested object, will be deleting \"\n-              + \"persistent volume claim in background!\");\n+          + \"persistent volume claim in background!\");\n     }\n \n     return true;\n   }\n \n-  // --------------------------- service account ---------------------------\n+  /**\n+   * List all persistent volumes", "originalCommit": "b7205e091ea1a6559c7ac01af786524e2c4fcb2e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY5MDU1OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411690559", "bodyText": "fixed", "author": "sankarpn", "createdAt": "2020-04-20T21:03:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ0MDQ3OA=="}], "type": "inlineReview", "revised_code": {"commit": "097c03845a5208be14f945917e217971e7d22e8a", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java\nindex 351ca7c891..02d71529c8 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java\n\n@@ -920,9 +915,8 @@ public class Kubernetes implements LoggedTest {\n   }\n \n   /**\n-   * List all persistent volumes\n-   *\n-   * @return V1PersistentVolumeList\n+   * List all persistent volumes in the Kubernetes cluster.\n+   * @return V1PersistentVolumeList of Persistent Volumes in Kubernetes cluster\n    */\n   public static V1PersistentVolumeList listPersistenVolumes() {\n     KubernetesApiResponse<V1PersistentVolumeList> list = pvClient.list();\n"}}, {"oid": "097c03845a5208be14f945917e217971e7d22e8a", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/097c03845a5208be14f945917e217971e7d22e8a", "message": "fixed javadocs in Kubernetes.java", "committedDate": "2020-04-14T21:55:50Z", "type": "commit"}, {"oid": "b35df6ec3b32accebd456716f6ff42c9c44813a5", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b35df6ec3b32accebd456716f6ff42c9c44813a5", "message": "debuggging", "committedDate": "2020-04-14T23:29:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU1ODQ4NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r408558485", "bodyText": "What should be log directory I should be using here ?", "author": "sankarpn", "createdAt": "2020-04-15T03:24:04Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/extensions/IntegrationTestWatcher.java", "diffHunk": "@@ -0,0 +1,266 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.extensions;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Method;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import oracle.weblogic.kubernetes.utils.LoggingUtil;\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.AfterEachCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.BeforeTestExecutionCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.InvocationInterceptor;\n+import org.junit.jupiter.api.extension.LifecycleMethodExecutionExceptionHandler;\n+import org.junit.jupiter.api.extension.ReflectiveInvocationContext;\n+import org.junit.jupiter.api.extension.TestExecutionExceptionHandler;\n+import org.junit.jupiter.api.extension.TestWatcher;\n+\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+\n+/**\n+ * JUnit5 extension class to intercept test execution at various\n+ * levels and collect logs in Kubernetes cluster for all artifacts\n+ * in the namespace used by the tests. The tests has to tag their classes\n+ * with @ExtendWith(IntegrationTestWatcher.class) for the automatic log\n+ * collection to work.\n+ */\n+public class IntegrationTestWatcher implements\n+    AfterAllCallback,\n+    AfterEachCallback,\n+    BeforeAllCallback,\n+    BeforeEachCallback,\n+    BeforeTestExecutionCallback,\n+    InvocationInterceptor,\n+    LifecycleMethodExecutionExceptionHandler,\n+    TestExecutionExceptionHandler,\n+    TestWatcher {\n+\n+  private String className;\n+  private String methodName;\n+  private static final String LOGS_DIR = System.getProperty(\"java.io.tmpdir\");", "originalCommit": "b35df6ec3b32accebd456716f6ff42c9c44813a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY5MTAxMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411691012", "bodyText": "fixed to use RESULT_ROOT if set or tmp dir", "author": "sankarpn", "createdAt": "2020-04-20T21:04:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU1ODQ4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "622175e10a1333878489eeb782f9b6be55d93776", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/extensions/IntegrationTestWatcher.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/extensions/IntegrationTestWatcher.java\nindex cc96b6da0f..5536abfe63 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/extensions/IntegrationTestWatcher.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/extensions/IntegrationTestWatcher.java\n\n@@ -45,6 +45,9 @@ public class IntegrationTestWatcher implements\n \n   private String className;\n   private String methodName;\n+  /**\n+   * Directory to store logs.\n+   */\n   private static final String LOGS_DIR = System.getProperty(\"java.io.tmpdir\");\n \n   /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU2MDg2Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r408560867", "bodyText": "what should be property I should be using here ?", "author": "sankarpn", "createdAt": "2020-04-15T03:33:55Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java", "diffHunk": "@@ -0,0 +1,197 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.utils;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import io.kubernetes.client.openapi.models.V1Pod;\n+import io.kubernetes.client.openapi.models.V1PodList;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+import oracle.weblogic.kubernetes.annotations.NamespaceList;\n+\n+import static io.kubernetes.client.util.Yaml.dump;\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+\n+/**\n+ * A utility class to collect log messages from Kubernetes cluster.\n+ */\n+public class LoggingUtil {\n+\n+  private static final String LOGS_DIR = System.getProperty(\"java.io.tmpdir\");", "originalCommit": "b35df6ec3b32accebd456716f6ff42c9c44813a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY5MTA5Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411691097", "bodyText": "fixed to use RESULT_ROOT if set or tmp dir", "author": "sankarpn", "createdAt": "2020-04-20T21:04:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU2MDg2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "622175e10a1333878489eeb782f9b6be55d93776", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\nindex 44d6a03990..6911a1fd1f 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\n\n@@ -12,12 +12,9 @@ import java.nio.file.Paths;\n import java.text.SimpleDateFormat;\n import java.util.Date;\n import java.util.HashSet;\n-import java.util.List;\n import java.util.Set;\n \n import io.kubernetes.client.openapi.ApiException;\n-import io.kubernetes.client.openapi.models.V1Pod;\n-import io.kubernetes.client.openapi.models.V1PodList;\n import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n import oracle.weblogic.kubernetes.annotations.NamespaceList;\n \n"}}, {"oid": "622175e10a1333878489eeb782f9b6be55d93776", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/622175e10a1333878489eeb782f9b6be55d93776", "message": "fix javadocs", "committedDate": "2020-04-15T04:17:04Z", "type": "commit"}, {"oid": "c0065c45ce50474d7a7d7e33a97563bcb002355c", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c0065c45ce50474d7a7d7e33a97563bcb002355c", "message": "Merge branch 'develop' into tests-diagnostics2", "committedDate": "2020-04-16T15:35:02Z", "type": "commit"}, {"oid": "9c74956828ce8383c8f85e544426240c9bb58030", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/9c74956828ce8383c8f85e544426240c9bb58030", "message": "changed the implmentation for namespace collectioin", "committedDate": "2020-04-17T01:10:26Z", "type": "commit"}, {"oid": "921ae914edd3bd7f57b64ab316a6c8a75034de2c", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/921ae914edd3bd7f57b64ab316a6c8a75034de2c", "message": "Merge branch 'develop' into tests-diagnostics2", "committedDate": "2020-04-17T01:11:40Z", "type": "commit"}, {"oid": "81b824c7baed769decdc111f6edec4d0e23e8943", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/81b824c7baed769decdc111f6edec4d0e23e8943", "message": "added test status overrides", "committedDate": "2020-04-17T01:32:09Z", "type": "commit"}, {"oid": "ea9174a3067ea042de8c26fe20659aa1416479aa", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ea9174a3067ea042de8c26fe20659aa1416479aa", "message": "Fix javadocs", "committedDate": "2020-04-17T02:30:03Z", "type": "commit"}, {"oid": "5c738420969a164df7aeac011cbe060f3bd42c01", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5c738420969a164df7aeac011cbe060f3bd42c01", "message": "Fix for the empty namespace list", "committedDate": "2020-04-17T02:54:00Z", "type": "commit"}, {"oid": "f637150a0cc781af3181dcc93f978328b6eba1d1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f637150a0cc781af3181dcc93f978328b6eba1d1", "message": "remove debug code", "committedDate": "2020-04-17T02:55:25Z", "type": "commit"}, {"oid": "04fad989601658544a886ee2ef522310329978fc", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/04fad989601658544a886ee2ef522310329978fc", "message": "Get domain object lists using CustomObjectsApi", "committedDate": "2020-04-17T20:46:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ3NTQxMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r410475413", "bodyText": "numofns is kind of cryptic.  Is there a reason not to make this more verbose?", "author": "ddsharpe", "createdAt": "2020-04-17T21:19:57Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -83,6 +84,8 @@\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n @DisplayName(\"Test to create model in image domain and start the domain\")\n @ExtendWith(Timing.class)\n+@ExtendWith(IntegrationTestWatcher.class)\n+@ITNamespaces(numofns = 2)", "originalCommit": "04fad989601658544a886ee2ef522310329978fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4MjM2Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r410482366", "bodyText": "Just wanted to keep the name shorter. Is \"namespacesRequired\" is good enough ?", "author": "sankarpn", "createdAt": "2020-04-17T21:38:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ3NTQxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwNjI5MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411506291", "bodyText": "can't it just be Namespaces(2) ?", "author": "markxnelson", "createdAt": "2020-04-20T16:11:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ3NTQxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYzMjI2Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411632262", "bodyText": "Removed the annotation at class level and moved it to method parameter per Derek's comments.\nAlso renamed it as Namespaces with default field. So method signature can use Namespaces(2)", "author": "sankarpn", "createdAt": "2020-04-20T19:25:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ3NTQxMw=="}], "type": "inlineReview", "revised_code": {"commit": "6891b97de91530307c81dfb4f83d0d6156503217", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java\nindex 4b634adc15..74337b06b6 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java\n\n@@ -78,14 +75,12 @@ import static oracle.weblogic.kubernetes.assertions.TestAssertions.serviceExists\n import static oracle.weblogic.kubernetes.utils.FileUtils.checkDirectory;\n import static org.awaitility.Awaitility.with;\n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n // Test to create model in image domain and verify the domain started successfully\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n @DisplayName(\"Test to create model in image domain and start the domain\")\n-@ExtendWith(Timing.class)\n-@ExtendWith(IntegrationTestWatcher.class)\n-@ITNamespaces(numofns = 2)\n class ItMiiDomain implements LoggedTest {\n \n   // operator constants\n"}}, {"oid": "be1cebc1f0447b1ee6ad1f6673375696a24a76fe", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/be1cebc1f0447b1ee6ad1f6673375696a24a76fe", "message": "Catch the exception", "committedDate": "2020-04-17T22:01:28Z", "type": "commit"}, {"oid": "f795f98f6a1eb5440a30ef5cdf795a05f0acd7d0", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f795f98f6a1eb5440a30ef5cdf795a05f0acd7d0", "message": "Merge branch 'develop' into tests-diagnostics2", "committedDate": "2020-04-17T22:01:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5NTAxMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r410495011", "bodyText": "Wouldn't this annotation be better on the method using it?\nLike:\npublic void testCreatingDomain(@ITNamespaces(numofns = 1) List namespaces)", "author": "ddsharpe", "createdAt": "2020-04-17T22:13:43Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleDomainValidation.java", "diffHunk": "@@ -34,19 +39,23 @@\n \n @DisplayName(\"Simple validation of basic domain functions\")\n @IntegrationTest\n+//Every test class needs to tagged with this annotation for log collection and namespace creation.\n+@ExtendWith(IntegrationTestWatcher.class)\n+// The ITNamespaces numofns value is used to create the number of unique namespaces needed by the test.\n+// The namespace list is available for use by all methods in the test class.\n+@ITNamespaces(numofns = 1) //", "originalCommit": "f795f98f6a1eb5440a30ef5cdf795a05f0acd7d0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUwOTgzOA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r410509838", "bodyText": "Yes we can do this. Lets see what others think.\nA minor thing is, it has to be placed at every method that wants to create new namespaces.", "author": "sankarpn", "createdAt": "2020-04-17T23:11:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5NTAxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYzMjM4Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411632386", "bodyText": "Done", "author": "sankarpn", "createdAt": "2020-04-20T19:25:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5NTAxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "6891b97de91530307c81dfb4f83d0d6156503217", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleDomainValidation.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleDomainValidation.java\nindex 16c1d084b9..5ff2b9dddb 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleDomainValidation.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleDomainValidation.java\n\n@@ -38,18 +36,14 @@ import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n @DisplayName(\"Simple validation of basic domain functions\")\n-@IntegrationTest\n //Every test class needs to tagged with this annotation for log collection and namespace creation.\n-@ExtendWith(IntegrationTestWatcher.class)\n-// The ITNamespaces numofns value is used to create the number of unique namespaces needed by the test.\n-// The namespace list is available for use by all methods in the test class.\n-@ITNamespaces(numofns = 1) //\n+@IntegrationTest\n class ItSimpleDomainValidation implements LoggedTest {\n \n   @Test\n   @DisplayName(\"Create a domain\")\n   @Slow\n-  public void testCreatingDomain(List namespaces) {  // parameter namespaces created with Annotation ITNamespaces\n+  public void testCreatingDomain(@Namespaces(1)List namespaces) {\n \n     final String domainUID = \"domain1\";\n \n"}}, {"oid": "43e86cf288fce78a347e854a338c8120d0e67d3f", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/43e86cf288fce78a347e854a338c8120d0e67d3f", "message": "Remove double message logging", "committedDate": "2020-04-17T22:16:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwNTkyMA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411505920", "bodyText": "maybe we should just have a single extension - are there example of when we would would want one of these but not the other @ddsharpe @rjeberhard? i can't think of any", "author": "markxnelson", "createdAt": "2020-04-20T16:11:12Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -83,6 +84,8 @@\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n @DisplayName(\"Test to create model in image domain and start the domain\")\n @ExtendWith(Timing.class)\n+@ExtendWith(IntegrationTestWatcher.class)", "originalCommit": "43e86cf288fce78a347e854a338c8120d0e67d3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYzMzE5Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411633193", "bodyText": "Removed the Timing extension and moved the @ExtendWith(IntegrationTestWatcher.class)  from test class to IntegrationTest interface.\nThe IntegrationTestWatcher implements methods that were in Timing.java", "author": "sankarpn", "createdAt": "2020-04-20T19:27:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwNTkyMA=="}], "type": "inlineReview", "revised_code": {"commit": "6891b97de91530307c81dfb4f83d0d6156503217", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java\nindex 4b634adc15..74337b06b6 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java\n\n@@ -78,14 +75,12 @@ import static oracle.weblogic.kubernetes.assertions.TestAssertions.serviceExists\n import static oracle.weblogic.kubernetes.utils.FileUtils.checkDirectory;\n import static org.awaitility.Awaitility.with;\n import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n // Test to create model in image domain and verify the domain started successfully\n @TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n @DisplayName(\"Test to create model in image domain and start the domain\")\n-@ExtendWith(Timing.class)\n-@ExtendWith(IntegrationTestWatcher.class)\n-@ITNamespaces(numofns = 2)\n class ItMiiDomain implements LoggedTest {\n \n   // operator constants\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwNjcwMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411506701", "bodyText": "can you change the initAll method signature?", "author": "markxnelson", "createdAt": "2020-04-20T16:12:12Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -120,22 +123,18 @@\n    * Install Operator.\n    */\n   @BeforeAll\n-  public static void initAll() {\n+  public static void initAll(List namespaces) {", "originalCommit": "43e86cf288fce78a347e854a338c8120d0e67d3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYzMzI5OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411633299", "bodyText": "Done", "author": "sankarpn", "createdAt": "2020-04-20T19:27:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwNjcwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "6891b97de91530307c81dfb4f83d0d6156503217", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java\nindex 4b634adc15..74337b06b6 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java\n\n@@ -121,9 +116,11 @@ class ItMiiDomain implements LoggedTest {\n \n   /**\n    * Install Operator.\n+   * @param namespaces namespace list created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution\n    */\n   @BeforeAll\n-  public static void initAll(List namespaces) {\n+  public static void initAll(@Namespaces(2)List namespaces) {\n     // create standard, reusbale retry/backoff policy\n     withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n         .and().with().pollInterval(10, SECONDS)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwNzI1Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411507257", "bodyText": "needs null check", "author": "markxnelson", "createdAt": "2020-04-20T16:12:59Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -120,22 +123,18 @@\n    * Install Operator.\n    */\n   @BeforeAll\n-  public static void initAll() {\n+  public static void initAll(List namespaces) {\n     // create standard, reusbale retry/backoff policy\n     withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n         .and().with().pollInterval(10, SECONDS)\n         .atMost(5, MINUTES).await();\n \n     // get a new unique opNamespace\n     logger.info(\"Creating unique namespace for Operator\");\n-    opNamespace = assertDoesNotThrow(() -> createUniqueNamespace(),\n-        \"Failed to create unique namespace due to ApiException\");\n-    logger.info(\"Created a new namespace called {0}\", opNamespace);\n+    opNamespace = (String)namespaces.get(0);", "originalCommit": "43e86cf288fce78a347e854a338c8120d0e67d3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYzMzQwNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411633404", "bodyText": "fixed", "author": "sankarpn", "createdAt": "2020-04-20T19:27:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwNzI1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "6891b97de91530307c81dfb4f83d0d6156503217", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java\nindex 4b634adc15..74337b06b6 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java\n\n@@ -121,9 +116,11 @@ class ItMiiDomain implements LoggedTest {\n \n   /**\n    * Install Operator.\n+   * @param namespaces namespace list created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution\n    */\n   @BeforeAll\n-  public static void initAll(List namespaces) {\n+  public static void initAll(@Namespaces(2)List namespaces) {\n     // create standard, reusbale retry/backoff policy\n     withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n         .and().with().pollInterval(10, SECONDS)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxMzU5NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411513594", "bodyText": "if it is true/false, then why is it null?", "author": "markxnelson", "createdAt": "2020-04-20T16:21:33Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -216,18 +258,24 @@ public static String getPodLog(String name, String namespace) throws ApiExceptio\n    */\n   public static String getPodLog(String name, String namespace, String container)\n       throws ApiException {\n-    String log = coreV1Api.readNamespacedPodLog(\n-        name, // name of the Pod\n-        namespace, // name of the Namespace\n-        container, // container for which to stream logs\n-        null, //  true/false Follow the log stream of the pod\n-        null, // number of bytes to read from the server before terminating the log output\n-        PRETTY, // pretty print output\n-        null, // true/false, Return previous terminated container logs\n-        null, // relative time (seconds) before the current time from which to show logs\n-        null, // number of lines from the end of the logs to show\n-        null // true/false, add timestamp at the beginning of every line of log output\n-    );\n+    String log = null;\n+    try {\n+      log = coreV1Api.readNamespacedPodLog(\n+          name, // name of the Pod\n+          namespace, // name of the Namespace\n+          container, // container for which to stream logs\n+          null, //  true/false Follow the log stream of the pod\n+          null, // number of bytes to read from the server before terminating the log output\n+          PRETTY, // pretty print output\n+          null, // true/false, Return previous terminated container logs", "originalCommit": "43e86cf288fce78a347e854a338c8120d0e67d3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYzNDI1NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411634255", "bodyText": "Boolean object, changed the comment", "author": "sankarpn", "createdAt": "2020-04-20T19:28:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxMzU5NA=="}], "type": "inlineReview", "revised_code": {"commit": "afe9a5379eb7419bcfa16ad40782c55fb82183f3", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java\nindex d31cf41460..b94f174078 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java\n\n@@ -270,7 +270,7 @@ public class Kubernetes implements LoggedTest {\n           null, // true/false, Return previous terminated container logs\n           null, // relative time (seconds) before the current time from which to show logs\n           null, // number of lines from the end of the logs to show\n-          null // true/false, add timestamp at the beginning of every line of log output\n+          null // Boolean, add timestamp at the beginning of every line of log output\n       );\n     } catch (ApiException apex) {\n       logger.severe(apex.getResponseBody());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxMzkyMA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411513920", "bodyText": "missing @returns", "author": "markxnelson", "createdAt": "2020-04-20T16:22:01Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -257,8 +304,37 @@ public static boolean deletePod(String name, String namespace) throws ApiExcepti\n     return true;\n   }\n \n-  // --------------------------- namespaces -----------------------------------\n+  /**\n+   * List all pods in given namespace.\n+   *\n+   * @param namespace Namespace in which to list all pods\n+   * @param labelSelectors with which the pods are decorated\n+   * @throws ApiException when there is error in querying the cluster", "originalCommit": "43e86cf288fce78a347e854a338c8120d0e67d3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYzNDY1Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411634652", "bodyText": "fixed", "author": "sankarpn", "createdAt": "2020-04-20T19:29:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxMzkyMA=="}], "type": "inlineReview", "revised_code": {"commit": "afe9a5379eb7419bcfa16ad40782c55fb82183f3", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java\nindex d31cf41460..b94f174078 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java\n\n@@ -309,6 +309,7 @@ public class Kubernetes implements LoggedTest {\n    *\n    * @param namespace Namespace in which to list all pods\n    * @param labelSelectors with which the pods are decorated\n+   * @return V1PodList list of pods\n    * @throws ApiException when there is error in querying the cluster\n    */\n   public static V1PodList listPods(String namespace, String labelSelectors) throws ApiException {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxNDU3NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411514575", "bodyText": "don't swallow the stack trace", "author": "markxnelson", "createdAt": "2020-04-20T16:22:56Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -468,12 +598,73 @@ public static Domain getDomainCustomResource(String domainUID, String namespace)\n    * @return List of Domain Custom Resources\n    */\n   public static DomainList listDomains(String namespace) {\n-    KubernetesApiResponse<DomainList> response = crdClient.list(namespace);\n+    KubernetesApiResponse<DomainList> response = null;\n+    try {\n+      response = crdClient.list(namespace);\n+    } catch (Exception ex) {\n+      logger.warning(ex.getMessage());", "originalCommit": "43e86cf288fce78a347e854a338c8120d0e67d3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYzNDkzNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411634934", "bodyText": "fixed", "author": "sankarpn", "createdAt": "2020-04-20T19:30:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxNDU3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUyMjY5Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r412522693", "bodyText": "i don't see the fix", "author": "markxnelson", "createdAt": "2020-04-21T22:03:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxNDU3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU0NDI0Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r412544243", "bodyText": "Now you should see it.", "author": "sankarpn", "createdAt": "2020-04-21T22:49:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxNDU3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "afe9a5379eb7419bcfa16ad40782c55fb82183f3", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java\nindex d31cf41460..b94f174078 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java\n\n@@ -603,6 +604,7 @@ public class Kubernetes implements LoggedTest {\n       response = crdClient.list(namespace);\n     } catch (Exception ex) {\n       logger.warning(ex.getMessage());\n+      throw ex;\n     }\n     return response != null ? response.getObject() : new DomainList();\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxNTc0NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411515745", "bodyText": "does this handle all namespaces?", "author": "markxnelson", "createdAt": "2020-04-20T16:24:29Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -733,21 +960,38 @@ public static boolean deletePvc(String name, String namespace)\n     if (!response.isSuccess()) {\n       logger.warning(\n           \"Failed to delete persistent volume claim '\" + name + \"' from namespace: \"\n-              + namespace + \" with HTTP status code: \" + response.getHttpStatusCode());\n+          + namespace + \" with HTTP status code: \" + response.getHttpStatusCode());\n       return false;\n     }\n \n     if (response.getObject() != null) {\n       logger.info(\n           \"Received after-deletion status of the requested object, will be deleting \"\n-              + \"persistent volume claim in background!\");\n+          + \"persistent volume claim in background!\");\n     }\n \n     return true;\n   }\n \n-  // --------------------------- service account ---------------------------\n+  /**\n+   * List all persistent volumes in the Kubernetes cluster.\n+   * @return V1PersistentVolumeList of Persistent Volumes in Kubernetes cluster\n+   */\n+  public static V1PersistentVolumeList listPersistenVolumes() {\n+    KubernetesApiResponse<V1PersistentVolumeList> list = pvClient.list();\n+    return list.getObject();\n+  }\n \n+  /**\n+   * List all persistent volume claims in the Kubernetes cluster.", "originalCommit": "43e86cf288fce78a347e854a338c8120d0e67d3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY2MDY5OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411660699", "bodyText": "Yes it lists persistent volume claims in all namespaces. I also added another overloaded method to handle namespace specific list.", "author": "sankarpn", "createdAt": "2020-04-20T20:13:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxNTc0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ2MDQyMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r412460421", "bodyText": "Let's call it listPersistentVolumeClaimsAllNamespaces() then.  Also, why would we ever need this as the diagnostics should be per-namespace.", "author": "rjeberhard", "createdAt": "2020-04-21T20:14:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxNTc0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ5OTE2Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r412499166", "bodyText": "changed the name to listPersistentVolumeClaimsAllNamespaces. I added this method when we need to query all namespaces in the cluster in case needed.", "author": "sankarpn", "createdAt": "2020-04-21T21:19:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxNTc0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUyNjM3OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r412526378", "bodyText": "where do we need this?  as opposed to just looking in a single namespace?", "author": "markxnelson", "createdAt": "2020-04-21T22:10:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxNTc0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU0NDA2NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r412544065", "bodyText": "removed listPersistentVolumeClaimsAllNamespaces()", "author": "sankarpn", "createdAt": "2020-04-21T22:48:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUxNTc0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "003cc75548b7d6b251aa5a0fb2d80366b14c512b", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java\nindex d31cf41460..a7845d6455 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java\n\n@@ -982,6 +984,16 @@ public class Kubernetes implements LoggedTest {\n     return list.getObject();\n   }\n \n+  /**\n+   * List persistent volume claims in the namespace.\n+   * @param namespace name of the namespace in which to list\n+   * @return V1PersistentVolumeClaimList of Persistent Volume Claims in namespace\n+   */\n+  public static V1PersistentVolumeClaimList listPersistenVolumeClaims(String namespace) {\n+    KubernetesApiResponse<V1PersistentVolumeClaimList> list = pvcClient.list(namespace);\n+    return list.getObject();\n+  }\n+\n   /**\n    * List all persistent volume claims in the Kubernetes cluster.\n    * @return V1PersistentVolumeClaimList of Persistent Volume Claims in Kubernetes cluster\n"}}, {"oid": "6891b97de91530307c81dfb4f83d0d6156503217", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/6891b97de91530307c81dfb4f83d0d6156503217", "message": "wip", "committedDate": "2020-04-20T17:53:48Z", "type": "commit"}, {"oid": "dfa599d17d6c389145a3bb16da7a12045a03d99d", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/dfa599d17d6c389145a3bb16da7a12045a03d99d", "message": "wip", "committedDate": "2020-04-20T18:01:09Z", "type": "commit"}, {"oid": "9bf9a0efcb8ebaeb62621bc26887cd069cda1096", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/9bf9a0efcb8ebaeb62621bc26887cd069cda1096", "message": "wip", "committedDate": "2020-04-20T18:06:14Z", "type": "commit"}, {"oid": "822577620703fcf203bcde4c2d5ebffe7a43a575", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/822577620703fcf203bcde4c2d5ebffe7a43a575", "message": "wip", "committedDate": "2020-04-20T18:19:04Z", "type": "commit"}, {"oid": "b359dd2557e9f15e92dd36903ff43bab45dd5acd", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b359dd2557e9f15e92dd36903ff43bab45dd5acd", "message": "wip", "committedDate": "2020-04-20T18:19:58Z", "type": "commit"}, {"oid": "924d87c26c07e2584fd88dd27e44cdda34a810c4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/924d87c26c07e2584fd88dd27e44cdda34a810c4", "message": "wip", "committedDate": "2020-04-20T18:28:46Z", "type": "commit"}, {"oid": "8fc7b76483ca820ec0cf39c12fa44b8cd156e16d", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8fc7b76483ca820ec0cf39c12fa44b8cd156e16d", "message": "wip", "committedDate": "2020-04-20T18:49:16Z", "type": "commit"}, {"oid": "3dee091e7a7b153c087a24970f9d51e68bdb7f4e", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3dee091e7a7b153c087a24970f9d51e68bdb7f4e", "message": "wip", "committedDate": "2020-04-20T18:59:20Z", "type": "commit"}, {"oid": "23086cb9d6e137ce0318ea3300995989462708dc", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/23086cb9d6e137ce0318ea3300995989462708dc", "message": "wip", "committedDate": "2020-04-20T19:05:51Z", "type": "commit"}, {"oid": "df817e6c032505fd8aa2ddf0420b2ae3933b27a8", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/df817e6c032505fd8aa2ddf0420b2ae3933b27a8", "message": "wip", "committedDate": "2020-04-20T19:07:17Z", "type": "commit"}, {"oid": "dc88af28fd4734289e1541d4ca1805c7ebdb57f8", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/dc88af28fd4734289e1541d4ca1805c7ebdb57f8", "message": "wip", "committedDate": "2020-04-20T19:08:52Z", "type": "commit"}, {"oid": "48bf46d455393f63ba461b5a2ce3b0858f6009c9", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/48bf46d455393f63ba461b5a2ce3b0858f6009c9", "message": "wip", "committedDate": "2020-04-20T19:14:21Z", "type": "commit"}, {"oid": "afe9a5379eb7419bcfa16ad40782c55fb82183f3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/afe9a5379eb7419bcfa16ad40782c55fb82183f3", "message": "fix javadoc", "committedDate": "2020-04-20T19:33:02Z", "type": "commit"}, {"oid": "003cc75548b7d6b251aa5a0fb2d80366b14c512b", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/003cc75548b7d6b251aa5a0fb2d80366b14c512b", "message": "fixed pvc list", "committedDate": "2020-04-20T19:42:07Z", "type": "commit"}, {"oid": "abd6d7a2bf397cb23722e0508dafc57eff72300f", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/abd6d7a2bf397cb23722e0508dafc57eff72300f", "message": "use RESULT_ROOT in Jenkins or tmp dir for local runs", "committedDate": "2020-04-20T20:38:19Z", "type": "commit"}, {"oid": "6c6a6b456d4847587c1eeb2ebc9c57c166db21be", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/6c6a6b456d4847587c1eeb2ebc9c57c166db21be", "message": "Merge branch 'develop' into tests-diagnostics2", "committedDate": "2020-04-20T20:50:39Z", "type": "commit"}, {"oid": "83590f09c398e5b8b38fa192d8111a4929f33fa3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/83590f09c398e5b8b38fa192d8111a4929f33fa3", "message": "fix comment", "committedDate": "2020-04-20T20:56:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcwMjU4OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411702589", "bodyText": "Shouldn't be this be checking if the call was successful?", "author": "rjeberhard", "createdAt": "2020-04-20T21:25:11Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -198,18 +236,22 @@ private static void initializeGenericKubernetesApiClients() {\n   }\n \n   // ------------------------  deployments -----------------------------------\n-\n   public static boolean createDeployment(String deploymentYaml) {\n     // do something with the command!!!\n     return true;\n   }\n \n-  public static List listDeployments() {\n-    return new ArrayList();\n+  /**\n+   * List all deployments in a given namespace.\n+   * @param namespace Namespace in which to list the deployments\n+   * @return V1DeploymentList of deployments in the Kubernetes cluster\n+   */\n+  public static V1DeploymentList listDeployments(String namespace) {\n+    KubernetesApiResponse<V1DeploymentList> list = deploymentClient.list(namespace);\n+    return list.getObject();", "originalCommit": "83590f09c398e5b8b38fa192d8111a4929f33fa3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc1MTM3OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411751379", "bodyText": "Fixed", "author": "sankarpn", "createdAt": "2020-04-20T23:09:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcwMjU4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "47fbecb9de66f6004687cc00d8ab9324590535c9", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java\nindex 7f124e8e38..a0866cb236 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java\n\n@@ -248,7 +248,12 @@ public class Kubernetes implements LoggedTest {\n    */\n   public static V1DeploymentList listDeployments(String namespace) {\n     KubernetesApiResponse<V1DeploymentList> list = deploymentClient.list(namespace);\n-    return list.getObject();\n+    if (list.isSuccess()) {\n+      return list.getObject();\n+    } else {\n+      logger.warning(\"Failed to list deployments, status code {0}\", list.getHttpStatusCode());\n+      return null;\n+    }\n   }\n \n   // --------------------------- pods -----------------------------------------\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcwMzI3MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411703271", "bodyText": "Just curious, why are we using GenericKubernetesApi for everything except Pod?", "author": "rjeberhard", "createdAt": "2020-04-20T21:26:19Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -233,18 +275,24 @@ public static String getPodLog(String name, String namespace) throws ApiExceptio\n    */\n   public static String getPodLog(String name, String namespace, String container)\n       throws ApiException {\n-    String log = coreV1Api.readNamespacedPodLog(\n-        name, // name of the Pod\n-        namespace, // name of the Namespace\n-        container, // container for which to stream logs\n-        null, //  true/false Follow the log stream of the pod\n-        null, // number of bytes to read from the server before terminating the log output\n-        PRETTY, // pretty print output\n-        null, // true/false, Return previous terminated container logs\n-        null, // relative time (seconds) before the current time from which to show logs\n-        null, // number of lines from the end of the logs to show\n-        null // true/false, add timestamp at the beginning of every line of log output\n-    );\n+    String log = null;\n+    try {\n+      log = coreV1Api.readNamespacedPodLog(", "originalCommit": "83590f09c398e5b8b38fa192d8111a4929f33fa3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcwNDI3Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411704273", "bodyText": "Actually, looks like we're using both kinds of API's.  It doesn't really matter.", "author": "rjeberhard", "createdAt": "2020-04-20T21:28:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcwMzI3MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcwNDkyOQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411704929", "bodyText": "Why default to 0 instead of 1?  Wouldn't zero be when the annotation is not used.", "author": "rjeberhard", "createdAt": "2020-04-20T21:29:24Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/annotations/Namespaces.java", "diffHunk": "@@ -0,0 +1,18 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.annotations;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Annotation interface to define the number of namespaces needed by the test.\n+ */\n+@Target({ElementType.PARAMETER})\n+@Retention(RetentionPolicy.RUNTIME)\n+public @interface Namespaces {\n+  int value() default 0;", "originalCommit": "83590f09c398e5b8b38fa192d8111a4929f33fa3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcxMjMzNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411712337", "bodyText": "I wanted the test developers to get used to mentioning the number of namespaces they require. If no values I don't know what this annotation means.( at least for me)", "author": "sankarpn", "createdAt": "2020-04-20T21:42:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcwNDkyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "1eca58126d744529ca18235b9257e01b8452f77a", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/annotations/Namespaces.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/annotations/Namespaces.java\nindex 035cc8da2a..83a3fe401c 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/annotations/Namespaces.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/annotations/Namespaces.java\n\n@@ -14,5 +14,9 @@ import java.lang.annotation.Target;\n @Target({ElementType.PARAMETER})\n @Retention(RetentionPolicy.RUNTIME)\n public @interface Namespaces {\n+  /**\n+   * Gets the value of the number of namespaces required.\n+   * @return integer value of the number of namespaces required\n+   */\n   int value() default 0;\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcwNTg0Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411705843", "bodyText": "We need some way to label PV's.  This will generate a lot of data since it will grab all PV's, including those associated with domains from other tests.", "author": "rjeberhard", "createdAt": "2020-04-20T21:31:03Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java", "diffHunk": "@@ -0,0 +1,119 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.utils;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+\n+import static io.kubernetes.client.util.Yaml.dump;\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+\n+/**\n+ * A utility class to collect logs for artifacts in Kubernetes cluster.\n+ */\n+public class LoggingUtil {\n+\n+  /**\n+   * Directory to store logs.\n+   */\n+  private static final String LOGS_DIR = System.getProperty(\"RESULT_ROOT\",\n+        System.getProperty(\"java.io.tmpdir\"));\n+\n+  /**\n+   * Collect logs for artifacts in Kubernetes cluster for current running test object. This method can be called\n+   * anywhere in the test by passing the test instance object and list namespaces.\n+   * <p>\n+   * The collected logs are written in the LOGS_DIR/IT_TEST_CLASSNAME/CURRENT_TIMESTAMP directory.\n+   *\n+   * @param itInstance the integration test instance\n+   * @param namespaces list of namespaces used by the test instance\n+   */\n+  public static void collectLogs(Object itInstance, List namespaces) {\n+    logger.info(\"Collecting logs...\");\n+    String resultDirExt = new SimpleDateFormat(\"yyyyMMddHHmmss\").format(new Date());\n+    try {\n+      Path resultDir = Files.createDirectories(\n+          Paths.get(LOGS_DIR, itInstance.getClass().getSimpleName(),\n+              resultDirExt));\n+      for (var namespace : namespaces) {\n+        LoggingUtil.generateLog((String) namespace, resultDir);\n+      }\n+    } catch (IOException ex) {\n+      logger.warning(ex.getMessage());\n+    } catch (ApiException ex) {\n+      logger.warning(ex.getResponseBody());\n+    }\n+  }\n+\n+  /**\n+   * Queries the Kubernetes cluster to get the logs for various artifacts and writes it to the resultDir.\n+   *\n+   * @param namespace in which to query cluster for artifacts\n+   * @param resultDir existing directory to write log files\n+   * @throws IOException when writing to log files fail\n+   * @throws ApiException when Kubernetes cluster query fails\n+   */\n+  public static void generateLog(String namespace, Path resultDir) throws IOException, ApiException {\n+    logger.info(\"Collecting logs in namespace : {0}\", namespace);\n+    // get service accounts\n+    writeToFile(Kubernetes.listServiceAccounts(namespace), resultDir.toString(), namespace + \"_sa.log\");\n+    // get namespaces\n+    writeToFile(Kubernetes.listNamespacesAsObjects(), resultDir.toString(), namespace + \"_ns.log\");\n+    // get pv\n+    writeToFile(Kubernetes.listPersistenVolumes(), resultDir.toString(), namespace + \"_pv.log\");", "originalCommit": "83590f09c398e5b8b38fa192d8111a4929f33fa3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcwNjE1OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411706159", "bodyText": "Maybe just grab PV's associated with PVC's we have in the namespace?", "author": "rjeberhard", "createdAt": "2020-04-20T21:31:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcwNTg0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTc1MTgxNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r411751816", "bodyText": "Grabbing the weblogic.domainUID value from PVC and using that to list PVs.", "author": "sankarpn", "createdAt": "2020-04-20T23:10:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTcwNTg0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "47fbecb9de66f6004687cc00d8ab9324590535c9", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\nindex 2ec50b46c3..135e9ca844 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\n\n@@ -69,10 +69,18 @@ public class LoggingUtil {\n     writeToFile(Kubernetes.listServiceAccounts(namespace), resultDir.toString(), namespace + \"_sa.log\");\n     // get namespaces\n     writeToFile(Kubernetes.listNamespacesAsObjects(), resultDir.toString(), namespace + \"_ns.log\");\n-    // get pv\n-    writeToFile(Kubernetes.listPersistenVolumes(), resultDir.toString(), namespace + \"_pv.log\");\n     // get pvc\n-    writeToFile(Kubernetes.listPersistenVolumeClaims(namespace), resultDir.toString(), namespace + \"_pvc.log\");\n+    writeToFile(Kubernetes.listPersistentVolumeClaims(namespace), resultDir.toString(), namespace + \"_pvc.log\");\n+    // get pv based on the weblogic.domainUID in pvc\n+    for (var pvc : Kubernetes.listPersistentVolumeClaims(namespace).getItems()) {\n+      if (pvc.getMetadata() != null\n+          && pvc.getMetadata().getLabels() != null\n+          && pvc.getMetadata().getLabels().get(\"weblogic.domainUID\") != null) {\n+        String label = pvc.getMetadata().getLabels().get(\"weblogic.domainUID\");\n+        writeToFile(Kubernetes.listPersistentVolumes(\n+            String.format(\"weblogic.domainUID in (%s)\", label)), resultDir.toString(), label + \"_pv.log\");\n+      }\n+    }\n     // get secrets\n     writeToFile(Kubernetes.listSecrets(namespace), resultDir.toString(), namespace + \"_secrets.log\");\n     // get configmaps\n"}}, {"oid": "47fbecb9de66f6004687cc00d8ab9324590535c9", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/47fbecb9de66f6004687cc00d8ab9324590535c9", "message": "changes as per Ryan's comments", "committedDate": "2020-04-20T23:05:39Z", "type": "commit"}, {"oid": "ca282b99ab3c2059354ee4a62e3c3846f42f73c2", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ca282b99ab3c2059354ee4a62e3c3846f42f73c2", "message": "fix pv location", "committedDate": "2020-04-20T23:16:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ1OTIwNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r412459204", "bodyText": "I'm confused.  Why do we still have these methods?", "author": "rjeberhard", "createdAt": "2020-04-21T20:12:17Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -579,12 +716,74 @@ public static boolean patchDomainCustomResource(String domainUID, String namespa\n    * @return List of Domain Custom Resources\n    */\n   public static DomainList listDomains(String namespace) {\n-    KubernetesApiResponse<DomainList> response = crdClient.list(namespace);\n+    KubernetesApiResponse<DomainList> response = null;\n+    try {\n+      response = crdClient.list(namespace);\n+    } catch (Exception ex) {\n+      logger.warning(ex.getMessage());\n+      throw ex;\n+    }\n     return response != null ? response.getObject() : new DomainList();\n   }\n \n-  // --------------------------- config map ---------------------------\n \n+  /**\n+   * Get Domain Custom Resource objects in all namespaces.\n+   *\n+   * @return Object Domain Custom Resources object\n+   */\n+  public static Object getDomainObjects() {", "originalCommit": "ca282b99ab3c2059354ee4a62e3c3846f42f73c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ5NzE4MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r412497181", "bodyText": "Removed it.", "author": "sankarpn", "createdAt": "2020-04-21T21:16:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ1OTIwNA=="}], "type": "inlineReview", "revised_code": {"commit": "cfc62f94a608a77f36b9b965e3b888330361380a", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java\nindex a0866cb236..a99032a069 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java\n\n@@ -721,68 +721,11 @@ public class Kubernetes implements LoggedTest {\n       response = crdClient.list(namespace);\n     } catch (Exception ex) {\n       logger.warning(ex.getMessage());\n-      throw ex;\n+      return new DomainList();\n     }\n     return response != null ? response.getObject() : new DomainList();\n   }\n \n-\n-  /**\n-   * Get Domain Custom Resource objects in all namespaces.\n-   *\n-   * @return Object Domain Custom Resources object\n-   */\n-  public static Object getDomainObjects() {\n-    Object domainObjects = null;\n-    try {\n-      domainObjects = customObjectsApi.listClusterCustomObject(\n-          DOMAIN_GROUP, // custom resource's group name\n-          DOMAIN_VERSION, // custom resource's version\n-          DOMAIN_PLURAL, // custom resource's plural name\n-          PRETTY, // pretty print\n-          null, //conitnue fetching\n-          null, // field selector\n-          null, // label selector\n-          null, // limit the number of objects to get\n-          null, // resource version\n-          TIMEOUT_SECONDS, // timeout\n-          ALLOW_WATCH_BOOKMARKS // allow watch book marks\n-      );\n-    } catch (ApiException ex) {\n-      logger.severe(ex.getResponseBody());\n-    }\n-    return domainObjects;\n-  }\n-\n-  /**\n-   * Get Domain Custom Resource objects in given namespace.\n-   *\n-   * @param namespace the namespace in which to list custom objects\n-   * @return Object Domain Custom Resources object\n-   */\n-  public static Object getDomainObjects(String namespace) {\n-    Object domainObjects = null;\n-    try {\n-      domainObjects = customObjectsApi.listNamespacedCustomObject(\n-          DOMAIN_GROUP, // custom resource's group name\n-          DOMAIN_VERSION, // custom resource's version\n-          namespace, // namespace\n-          DOMAIN_PLURAL, // custom resource's plural name\n-          PRETTY, // pretty print\n-          null, //conitnue fetching\n-          null, // field selector\n-          null, // label selector\n-          null, // limit the number of objects to get\n-          null, // resource version\n-          TIMEOUT_SECONDS, // timeout\n-          ALLOW_WATCH_BOOKMARKS // allow watch book marks\n-      );\n-    } catch (ApiException ex) {\n-      logger.severe(ex.getResponseBody());\n-    }\n-    return domainObjects;\n-  }\n-\n   // --------------------------- config map ---------------------------\n   /**\n    * Create a Kubernetes Config Map.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ2MjYzNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r412462634", "bodyText": "I only want details for the named namespace", "author": "rjeberhard", "createdAt": "2020-04-21T20:18:08Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java", "diffHunk": "@@ -0,0 +1,127 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.utils;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Kubernetes;\n+\n+import static io.kubernetes.client.util.Yaml.dump;\n+import static oracle.weblogic.kubernetes.extensions.LoggedTest.logger;\n+\n+/**\n+ * A utility class to collect logs for artifacts in Kubernetes cluster.\n+ */\n+public class LoggingUtil {\n+\n+  /**\n+   * Directory to store logs.\n+   */\n+  private static final String LOGS_DIR = System.getProperty(\"RESULT_ROOT\",\n+        System.getProperty(\"java.io.tmpdir\"));\n+\n+  /**\n+   * Collect logs for artifacts in Kubernetes cluster for current running test object. This method can be called\n+   * anywhere in the test by passing the test instance object and list namespaces.\n+   * <p>\n+   * The collected logs are written in the LOGS_DIR/IT_TEST_CLASSNAME/CURRENT_TIMESTAMP directory.\n+   *\n+   * @param itInstance the integration test instance\n+   * @param namespaces list of namespaces used by the test instance\n+   */\n+  public static void collectLogs(Object itInstance, List namespaces) {\n+    logger.info(\"Collecting logs...\");\n+    String resultDirExt = new SimpleDateFormat(\"yyyyMMddHHmmss\").format(new Date());\n+    try {\n+      Path resultDir = Files.createDirectories(\n+          Paths.get(LOGS_DIR, itInstance.getClass().getSimpleName(),\n+              resultDirExt));\n+      for (var namespace : namespaces) {\n+        LoggingUtil.generateLog((String) namespace, resultDir);\n+      }\n+    } catch (IOException ex) {\n+      logger.warning(ex.getMessage());\n+    } catch (ApiException ex) {\n+      logger.warning(ex.getResponseBody());\n+    }\n+  }\n+\n+  /**\n+   * Queries the Kubernetes cluster to get the logs for various artifacts and writes it to the resultDir.\n+   *\n+   * @param namespace in which to query cluster for artifacts\n+   * @param resultDir existing directory to write log files\n+   * @throws IOException when writing to log files fail\n+   * @throws ApiException when Kubernetes cluster query fails\n+   */\n+  public static void generateLog(String namespace, Path resultDir) throws IOException, ApiException {\n+    logger.info(\"Collecting logs in namespace : {0}\", namespace);\n+    // get service accounts\n+    writeToFile(Kubernetes.listServiceAccounts(namespace), resultDir.toString(), namespace + \"_sa.log\");\n+    // get namespaces\n+    writeToFile(Kubernetes.listNamespacesAsObjects(), resultDir.toString(), namespace + \"_ns.log\");", "originalCommit": "ca282b99ab3c2059354ee4a62e3c3846f42f73c2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ5NzQ4Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r412497486", "bodyText": "Logging only the named namespace.", "author": "sankarpn", "createdAt": "2020-04-21T21:16:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ2MjYzNA=="}], "type": "inlineReview", "revised_code": {"commit": "cfc62f94a608a77f36b9b965e3b888330361380a", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\nindex 135e9ca844..6633c29278 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\n\n@@ -65,12 +65,20 @@ public class LoggingUtil {\n    */\n   public static void generateLog(String namespace, Path resultDir) throws IOException, ApiException {\n     logger.info(\"Collecting logs in namespace : {0}\", namespace);\n+\n     // get service accounts\n     writeToFile(Kubernetes.listServiceAccounts(namespace), resultDir.toString(), namespace + \"_sa.log\");\n+\n     // get namespaces\n-    writeToFile(Kubernetes.listNamespacesAsObjects(), resultDir.toString(), namespace + \"_ns.log\");\n+    for (var ns: Kubernetes.listNamespacesAsObjects().getItems()) {\n+      if (namespace.equals(ns.getMetadata().getName())) {\n+        writeToFile(ns, resultDir.toString(), namespace + \"_ns.log\");\n+      }\n+    }\n+\n     // get pvc\n     writeToFile(Kubernetes.listPersistentVolumeClaims(namespace), resultDir.toString(), namespace + \"_pvc.log\");\n+\n     // get pv based on the weblogic.domainUID in pvc\n     for (var pvc : Kubernetes.listPersistentVolumeClaims(namespace).getItems()) {\n       if (pvc.getMetadata() != null\n"}}, {"oid": "cfc62f94a608a77f36b9b965e3b888330361380a", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/cfc62f94a608a77f36b9b965e3b888330361380a", "message": "Changes as per Ryan's comments", "committedDate": "2020-04-21T20:36:26Z", "type": "commit"}, {"oid": "0b232167ad73991c6a2c3959592226967c143fd1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0b232167ad73991c6a2c3959592226967c143fd1", "message": "remove getting logs for all domains", "committedDate": "2020-04-21T20:58:57Z", "type": "commit"}, {"oid": "d2f6db5dc0dda6c32d91cb482f301bcdcb3b34ef", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d2f6db5dc0dda6c32d91cb482f301bcdcb3b34ef", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into tests-diagnostics2", "committedDate": "2020-04-21T21:10:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUyMDM0MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r412520340", "bodyText": "fix", "author": "markxnelson", "createdAt": "2020-04-21T21:58:31Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -122,20 +119,24 @@\n \n   /**\n    * Install Operator.\n+   * @param namespaces listof namespaces created by the IntegrationTestWatcher by the", "originalCommit": "d2f6db5dc0dda6c32d91cb482f301bcdcb3b34ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUzMTAxNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r412531016", "bodyText": "isn't that the typo \"listof\" or something else ?", "author": "sankarpn", "createdAt": "2020-04-21T22:20:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUyMDM0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUzNzc5NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r412537795", "bodyText": "Fixed the typo \"listof\"", "author": "sankarpn", "createdAt": "2020-04-21T22:35:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUyMDM0MA=="}], "type": "inlineReview", "revised_code": {"commit": "d583a8c74d4591fc4a6415359d4efe95ce57d730", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java\nindex c74618797e..b3377ebbcb 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java\n\n@@ -119,7 +119,7 @@ class ItMiiDomain implements LoggedTest {\n \n   /**\n    * Install Operator.\n-   * @param namespaces listof namespaces created by the IntegrationTestWatcher by the\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n    JUnit engine parameter resolution mechanism\n    */\n   @BeforeAll\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUyMTAwNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r412521007", "bodyText": "use for x : namespaces instead -- less brittle", "author": "markxnelson", "createdAt": "2020-04-21T21:59:49Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java", "diffHunk": "@@ -77,17 +71,20 @@\n   // like these two:\n   @Slow\n   @MustNotRunInParallel\n-  public void testInstallingOperator(List namespaces) {\n+  public void testInstallingOperator(@Namespaces(3) List<String> namespaces) {\n     // this first example is an operation that we wait for.\n     // installOperator() is one of our custom, reusable actions.\n     // imagine that installOperator() will try to install the operator, by creating\n     // the kubernetes deployment.  this will complete quickly, and will either be\n     // successful or not.\n \n     // get unique namespaces for operator and domains\n-    opNamespace = (String)namespaces.get(0);\n-    domainNamespace1 = (String)namespaces.get(1);\n-    domainNamespace2 = (String)namespaces.get(2);\n+    for (int i = 0; i < 3; i++) {", "originalCommit": "d2f6db5dc0dda6c32d91cb482f301bcdcb3b34ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUzNzkzMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r412537932", "bodyText": "Changed to forEach", "author": "sankarpn", "createdAt": "2020-04-21T22:35:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUyMTAwNw=="}], "type": "inlineReview", "revised_code": {"commit": "d583a8c74d4591fc4a6415359d4efe95ce57d730", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java\nindex 42c5b56270..85de93ff8f 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSimpleOperatorValidation.java\n\n@@ -77,11 +77,10 @@ class ItSimpleOperatorValidation implements LoggedTest {\n     // imagine that installOperator() will try to install the operator, by creating\n     // the kubernetes deployment.  this will complete quickly, and will either be\n     // successful or not.\n-\n     // get unique namespaces for operator and domains\n-    for (int i = 0; i < 3; i++) {\n-      assertNotNull(namespaces.get(i), \"Namespace \" + i + \"is null\");\n-    }\n+    namespaces.forEach((namespace) -> {\n+      assertNotNull(namespace, \"Namespace \" + namespace + \"is null\");\n+    });\n     opNamespace = namespaces.get(0);\n     domainNamespace1 = namespaces.get(1);\n     domainNamespace2 = namespaces.get(2);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUyNjcyMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r412526721", "bodyText": "use for over collection", "author": "markxnelson", "createdAt": "2020-04-21T22:11:04Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/extensions/IntegrationTestWatcher.java", "diffHunk": "@@ -85,21 +89,20 @@ public boolean supportsParameter(ParameterContext parameterContext,\n   @Override\n   public Object resolveParameter(ParameterContext parameterContext,\n       ExtensionContext extensionContext) throws ParameterResolutionException {\n-    Object requiredTestInstance = extensionContext.getRequiredTestInstance();\n-    List<String> namespaces = null;\n-\n-    if (requiredTestInstance.getClass().isAnnotationPresent(ITNamespaces.class)) {\n-      ITNamespaces itNsTag = requiredTestInstance.getClass().getAnnotation(ITNamespaces.class);\n-      logger.info(\"Creating {0} unique namespaces for the test\", itNsTag.numofns());\n-      namespaces = new ArrayList();\n-      for (int i = 1; i <= itNsTag.numofns(); i++) {\n-        String namespace = assertDoesNotThrow(() -> createUniqueNamespace(),\n-            \"Failed to create unique namespace due to ApiException\");\n-        namespaces.add(namespace);\n-        logger.info(\"Created a new namespace called {0}\", namespace);\n-      }\n+    Namespaces ns = parameterContext.findAnnotation(Namespaces.class).get();\n+    List<String> namespaces = new ArrayList();\n+    for (int i = 1; i <= ns.value(); i++) {", "originalCommit": "d2f6db5dc0dda6c32d91cb482f301bcdcb3b34ef", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUzNzMyMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r412537323", "bodyText": "Sorry I don't understand what you mean by \"use for over collection\" , can you elaborate ?", "author": "sankarpn", "createdAt": "2020-04-21T22:34:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUyNjcyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzExMjYyMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r413112621", "bodyText": "Looking at this again, @markxnelson, he's not iterating over a collection but generating the required count of namespaces per the value from the annotation.", "author": "rjeberhard", "createdAt": "2020-04-22T16:04:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUyNjcyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzEyNzk4MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r413127981", "bodyText": "ah ok, i see, thanks, please ignore", "author": "markxnelson", "createdAt": "2020-04-22T16:24:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUyNjcyMQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "d583a8c74d4591fc4a6415359d4efe95ce57d730", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d583a8c74d4591fc4a6415359d4efe95ce57d730", "message": "Address Mark comments", "committedDate": "2020-04-21T22:35:39Z", "type": "commit"}, {"oid": "6d66d998594e21e098e75b7cbc90057bfb314106", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/6d66d998594e21e098e75b7cbc90057bfb314106", "message": "address mark's review comments", "committedDate": "2020-04-21T22:49:57Z", "type": "commit"}, {"oid": "1eca58126d744529ca18235b9257e01b8452f77a", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/1eca58126d744529ca18235b9257e01b8452f77a", "message": "Merge branch 'develop' into tests-diagnostics2", "committedDate": "2020-04-22T17:09:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI0MTU2MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r413241560", "bodyText": "It's a small point, but you changed \"reusable\" from the correct spelling to an incorrect one.", "author": "rjeberhard", "createdAt": "2020-04-22T19:00:01Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -119,24 +119,24 @@\n \n   /**\n    * Install Operator.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the\n+   JUnit engine parameter resolution mechanism\n    */\n   @BeforeAll\n-  public static void initAll() {\n-    // create standard, reusable retry/backoff policy\n+  public static void initAll(@Namespaces(2) List<String> namespaces) {\n+    // create standard, reusbale retry/backoff policy", "originalCommit": "1eca58126d744529ca18235b9257e01b8452f77a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI1MTUwMA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r413251500", "bodyText": "Thanks for catching that. Your eyes are sharp :-)\nFixed.", "author": "sankarpn", "createdAt": "2020-04-22T19:15:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI0MTU2MA=="}], "type": "inlineReview", "revised_code": {"commit": "cc14c0a91bbd396f89cb567bd51424dd271d2fd4", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java\nindex 4b0ac65ae5..153ce35f3d 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java\n\n@@ -124,7 +124,7 @@ class ItMiiDomain implements LoggedTest {\n    */\n   @BeforeAll\n   public static void initAll(@Namespaces(2) List<String> namespaces) {\n-    // create standard, reusbale retry/backoff policy\n+    // create standard, reusable retry/backoff policy\n     withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n         .and().with().pollInterval(10, SECONDS)\n         .atMost(5, MINUTES).await();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI0MzUwOQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r413243509", "bodyText": "replica sets", "author": "rjeberhard", "createdAt": "2020-04-22T19:02:55Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -975,12 +1239,46 @@ public static boolean deleteService(String name, String namespace) {\n     if (response.getObject() != null) {\n       logger.info(\n           \"Received after-deletion status of the requested object, will be deleting \"\n-              + \"service in background!\");\n+          + \"service in background!\");\n     }\n \n     return true;\n   }\n \n+  // --------------------------- jobs ---------------------------\n+  /**\n+   * Get a list of all jobs in the given namespace.\n+   *\n+   * @param namespace in which to list the jobs\n+   * @return V1JobList of jobs from Kubernetes cluster\n+   */\n+  public static V1JobList listJobs(String namespace) {\n+    KubernetesApiResponse<V1JobList> list = jobClient.list(namespace);\n+    if (list.isSuccess()) {\n+      return list.getObject();\n+    } else {\n+      logger.warning(\"Failed to list jobs, status code {0}\", list.getHttpStatusCode());\n+      return null;\n+    }\n+  }\n+\n+  // --------------------------- resplica sets ---------------------------", "originalCommit": "1eca58126d744529ca18235b9257e01b8452f77a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI1MTYyMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r413251623", "bodyText": "Fixed.", "author": "sankarpn", "createdAt": "2020-04-22T19:15:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI0MzUwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "cc14c0a91bbd396f89cb567bd51424dd271d2fd4", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java\nindex 037c029b71..1464bb8471 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java\n\n@@ -1262,7 +1262,7 @@ public class Kubernetes implements LoggedTest {\n     }\n   }\n \n-  // --------------------------- resplica sets ---------------------------\n+  // --------------------------- replica sets ---------------------------\n   /**\n    * Get a list of all replica sets in the given namespace.\n    *\n"}}, {"oid": "cc14c0a91bbd396f89cb567bd51424dd271d2fd4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/cc14c0a91bbd396f89cb567bd51424dd271d2fd4", "message": "correct the typos", "committedDate": "2020-04-22T19:13:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI2NTMxMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r413265311", "bodyText": "i would be find to say @param namespaces injected by JUnit extension", "author": "markxnelson", "createdAt": "2020-04-22T19:35:20Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiDomain.java", "diffHunk": "@@ -119,24 +119,24 @@\n \n   /**\n    * Install Operator.\n+   * @param namespaces list of namespaces created by the IntegrationTestWatcher by the", "originalCommit": "cc14c0a91bbd396f89cb567bd51424dd271d2fd4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI5Mzc1Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1562#discussion_r413293753", "bodyText": "Modified it.", "author": "sankarpn", "createdAt": "2020-04-22T20:10:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI2NTMxMQ=="}], "type": "inlineReview", "revised_code": null}]}