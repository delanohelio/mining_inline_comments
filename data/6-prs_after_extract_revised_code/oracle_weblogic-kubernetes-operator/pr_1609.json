{"pr_number": 1609, "pr_title": "Add support in diagnostic logging to archive PV", "pr_createdAt": "2020-04-28T23:05:01Z", "pr_url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609", "timeline": [{"oid": "7f87e9721fbf7ddd76cec76ce8f2657e7b8ac503", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7f87e9721fbf7ddd76cec76ce8f2657e7b8ac503", "message": "Added methods to copy persistent volume contents to the client machine\nby the use of a temporary pod. Creating a temporary pod to mount to same\nvolume used by the tests.\n\nAlso few more fixes in the logging of files", "committedDate": "2020-04-28T22:13:39Z", "type": "commit"}, {"oid": "005c529d3e82abc879eb92319e66eda4a174da0c", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/005c529d3e82abc879eb92319e66eda4a174da0c", "message": "Enable the cleanup method", "committedDate": "2020-04-28T22:29:45Z", "type": "commit"}, {"oid": "7e16aff484f9d1a9cf2c5bb643d78455433c8c79", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7e16aff484f9d1a9cf2c5bb643d78455433c8c79", "message": "Add javadocs", "committedDate": "2020-04-28T23:00:22Z", "type": "commit"}, {"oid": "5811d1c715bee09827f987c5458bad1c640004fd", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5811d1c715bee09827f987c5458bad1c640004fd", "message": "Correct typo", "committedDate": "2020-04-28T23:15:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwNzU3Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r417007573", "bodyText": "desired state of the ...", "author": "markxnelson", "createdAt": "2020-04-29T00:39:42Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/TestAssertions.java", "diffHunk": "@@ -187,4 +187,18 @@ public static boolean doesImageExist(String searchString) {\n   public static boolean isHelmReleaseDeployed(String releaseName, String namespace) {\n     return Helm.isReleaseDeployed(releaseName, namespace);\n   }\n+\n+  /**\n+   * Check if a persistent volume is in a given state.\n+   *\n+   * @param name name of the persistent volume\n+   * @param state state of the persistent volume to match", "originalCommit": "5811d1c715bee09827f987c5458bad1c640004fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA5ODI2NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r418098264", "bodyText": "Since I removed the pvc and pv creation this assertion is no loner needed.", "author": "sankarpn", "createdAt": "2020-04-30T15:31:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwNzU3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "837254b9d20390bef8b5b0a71f4e49c91f04702c", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/TestAssertions.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/TestAssertions.java\nindex 38492a8ffc..2e1f7e5cd9 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/TestAssertions.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/TestAssertions.java\n\n@@ -192,7 +192,7 @@ public class TestAssertions {\n    * Check if a persistent volume is in a given state.\n    *\n    * @param name name of the persistent volume\n-   * @param state state of the persistent volume to match\n+   * @param state desired state of the persistent volume to match\n    * @return true if state matches otherwise false\n    */\n   public static Callable<Boolean> isPersistentVolumeInState(String name, String state) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwNzY1Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r417007652", "bodyText": "feels like an enum would make sense for the state arg", "author": "markxnelson", "createdAt": "2020-04-29T00:40:02Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/TestAssertions.java", "diffHunk": "@@ -187,4 +187,18 @@ public static boolean doesImageExist(String searchString) {\n   public static boolean isHelmReleaseDeployed(String releaseName, String namespace) {\n     return Helm.isReleaseDeployed(releaseName, namespace);\n   }\n+\n+  /**\n+   * Check if a persistent volume is in a given state.\n+   *\n+   * @param name name of the persistent volume\n+   * @param state state of the persistent volume to match\n+   * @return true if state matches otherwise false\n+   */\n+  public static Callable<Boolean> isPersistentVolumeInState(String name, String state) {", "originalCommit": "5811d1c715bee09827f987c5458bad1c640004fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA5ODQ0Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r418098442", "bodyText": "see my above comment", "author": "sankarpn", "createdAt": "2020-04-30T15:31:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwNzY1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "837254b9d20390bef8b5b0a71f4e49c91f04702c", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/TestAssertions.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/TestAssertions.java\nindex 38492a8ffc..2e1f7e5cd9 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/TestAssertions.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/TestAssertions.java\n\n@@ -192,7 +192,7 @@ public class TestAssertions {\n    * Check if a persistent volume is in a given state.\n    *\n    * @param name name of the persistent volume\n-   * @param state state of the persistent volume to match\n+   * @param state desired state of the persistent volume to match\n    * @return true if state matches otherwise false\n    */\n   public static Callable<Boolean> isPersistentVolumeInState(String name, String state) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwNzczOQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r417007739", "bodyText": "desired state...", "author": "markxnelson", "createdAt": "2020-04-29T00:40:24Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Kubernetes.java", "diffHunk": "@@ -300,6 +303,25 @@ public static void listServices(String namespace, String labelSelectors) throws\n     }\n   }\n \n+  /**\n+   * Check if a persistent volume is in a given state.\n+   *\n+   * @param name name of the persistent volume\n+   * @param state state of the persistent volume to match", "originalCommit": "5811d1c715bee09827f987c5458bad1c640004fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA5ODg4NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r418098884", "bodyText": "the method is removed", "author": "sankarpn", "createdAt": "2020-04-30T15:31:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwNzczOQ=="}], "type": "inlineReview", "revised_code": {"commit": "837254b9d20390bef8b5b0a71f4e49c91f04702c", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Kubernetes.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Kubernetes.java\nindex 5e3ee3cd18..51a2872abe 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Kubernetes.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/assertions/impl/Kubernetes.java\n\n@@ -307,7 +307,7 @@ public class Kubernetes {\n    * Check if a persistent volume is in a given state.\n    *\n    * @param name name of the persistent volume\n-   * @param state state of the persistent volume to match\n+   * @param state desired state of the persistent volume to match\n    * @return true if state matches otherwise false\n    */\n   public static boolean isPersistentVolumeInState(String name, String state) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwOTAwMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r417009001", "bodyText": "not sure if this is reliable\nspec.volumeName and spec.storageClassName might be better\nand/or get the pv and check its claim name matches", "author": "markxnelson", "createdAt": "2020-04-29T00:44:57Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java", "diffHunk": "@@ -55,75 +83,142 @@ public static void collectLogs(Object itInstance, List namespaces) {\n    *\n    * @param namespace in which to query cluster for artifacts\n    * @param resultDir existing directory to write log files\n-   * @throws IOException when writing to log files fail\n-   * @throws ApiException when Kubernetes cluster query fails\n    */\n-  public static void generateLog(String namespace, Path resultDir) throws IOException, ApiException {\n+  public static void collectLogs(String namespace, String resultDir) {\n     logger.info(\"Collecting logs in namespace : {0}\", namespace);\n \n     // get service accounts\n-    writeToFile(Kubernetes.listServiceAccounts(namespace), resultDir.toString(), namespace + \"_sa.log\");\n+    try {\n+      writeToFile(Kubernetes.listServiceAccounts(namespace), resultDir, namespace + \"_sa.log\");\n+    } catch (Exception ex) {\n+      logger.warning(ex.getMessage());\n+    }\n \n     // get namespaces\n-    for (var ns: Kubernetes.listNamespacesAsObjects().getItems()) {\n-      if (namespace.equals(ns.getMetadata().getName())) {\n-        writeToFile(ns, resultDir.toString(), namespace + \"_ns.log\");\n+    try {\n+      for (var ns : Kubernetes.listNamespacesAsObjects().getItems()) {\n+        if (namespace.equals(ns.getMetadata().getName())) {\n+          writeToFile(ns, resultDir, namespace + \"_ns.log\");\n+        }\n       }\n+    } catch (Exception ex) {\n+      logger.warning(ex.getMessage());\n     }\n \n     // get pvc\n-    writeToFile(Kubernetes.listPersistentVolumeClaims(namespace), resultDir.toString(), namespace + \"_pvc.log\");\n-\n-    // get pv based on the weblogic.domainUID in pvc\n-    for (var pvc : Kubernetes.listPersistentVolumeClaims(namespace).getItems()) {\n-      if (pvc.getMetadata() != null\n-          && pvc.getMetadata().getLabels() != null\n-          && pvc.getMetadata().getLabels().get(\"weblogic.domainUID\") != null) {\n-        String label = pvc.getMetadata().getLabels().get(\"weblogic.domainUID\");\n-        writeToFile(Kubernetes.listPersistentVolumes(\n-            String.format(\"weblogic.domainUID in (%s)\", label)), resultDir.toString(), label + \"_pv.log\");\n+    try {\n+      writeToFile(Kubernetes.listPersistentVolumeClaims(namespace), resultDir, namespace + \"_pvc.log\");\n+    } catch (Exception ex) {\n+      logger.warning(ex.getMessage());\n+    }\n+\n+    // get pv configuration and pv files based on the weblogic.domainUid label in pvc\n+    try {\n+      for (var pvc : Kubernetes.listPersistentVolumeClaims(namespace).getItems()) {\n+        String label = Optional.ofNullable(pvc)", "originalCommit": "5811d1c715bee09827f987c5458bad1c640004fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA5OTY2NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r418099664", "bodyText": "changed the implementation to match storageclass, volume name and claim name to find the PV used by the test in that namespace.", "author": "sankarpn", "createdAt": "2020-04-30T15:33:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwOTAwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "837254b9d20390bef8b5b0a71f4e49c91f04702c", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\nindex 4603e02baa..035986934a 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\n\n@@ -89,7 +89,7 @@ public class LoggingUtil {\n \n     // get service accounts\n     try {\n-      writeToFile(Kubernetes.listServiceAccounts(namespace), resultDir, namespace + \"_sa.log\");\n+      writeToFile(Kubernetes.listServiceAccounts(namespace), resultDir, namespace + \".list.service-accounts.log\");\n     } catch (Exception ex) {\n       logger.warning(ex.getMessage());\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwOTIzNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r417009236", "bodyText": "let's improve the file names to make it easier for someone looking at them to know what they are, e.g. namespace.list.service-accounts.log  and so on..\nnamespace, get/list/whatever, type, name", "author": "markxnelson", "createdAt": "2020-04-29T00:46:01Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java", "diffHunk": "@@ -55,75 +83,142 @@ public static void collectLogs(Object itInstance, List namespaces) {\n    *\n    * @param namespace in which to query cluster for artifacts\n    * @param resultDir existing directory to write log files\n-   * @throws IOException when writing to log files fail\n-   * @throws ApiException when Kubernetes cluster query fails\n    */\n-  public static void generateLog(String namespace, Path resultDir) throws IOException, ApiException {\n+  public static void collectLogs(String namespace, String resultDir) {\n     logger.info(\"Collecting logs in namespace : {0}\", namespace);\n \n     // get service accounts\n-    writeToFile(Kubernetes.listServiceAccounts(namespace), resultDir.toString(), namespace + \"_sa.log\");\n+    try {\n+      writeToFile(Kubernetes.listServiceAccounts(namespace), resultDir, namespace + \"_sa.log\");", "originalCommit": "5811d1c715bee09827f987c5458bad1c640004fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA5OTc2Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r418099762", "bodyText": "fixed", "author": "sankarpn", "createdAt": "2020-04-30T15:33:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwOTIzNg=="}], "type": "inlineReview", "revised_code": {"commit": "837254b9d20390bef8b5b0a71f4e49c91f04702c", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\nindex 4603e02baa..035986934a 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\n\n@@ -89,7 +89,7 @@ public class LoggingUtil {\n \n     // get service accounts\n     try {\n-      writeToFile(Kubernetes.listServiceAccounts(namespace), resultDir, namespace + \"_sa.log\");\n+      writeToFile(Kubernetes.listServiceAccounts(namespace), resultDir, namespace + \".list.service-accounts.log\");\n     } catch (Exception ex) {\n       logger.warning(ex.getMessage());\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwOTYxNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r417009614", "bodyText": "include namespace, name, in the log message", "author": "markxnelson", "createdAt": "2020-04-29T00:47:30Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java", "diffHunk": "@@ -55,75 +83,142 @@ public static void collectLogs(Object itInstance, List namespaces) {\n    *\n    * @param namespace in which to query cluster for artifacts\n    * @param resultDir existing directory to write log files\n-   * @throws IOException when writing to log files fail\n-   * @throws ApiException when Kubernetes cluster query fails\n    */\n-  public static void generateLog(String namespace, Path resultDir) throws IOException, ApiException {\n+  public static void collectLogs(String namespace, String resultDir) {\n     logger.info(\"Collecting logs in namespace : {0}\", namespace);\n \n     // get service accounts\n-    writeToFile(Kubernetes.listServiceAccounts(namespace), resultDir.toString(), namespace + \"_sa.log\");\n+    try {\n+      writeToFile(Kubernetes.listServiceAccounts(namespace), resultDir, namespace + \"_sa.log\");\n+    } catch (Exception ex) {\n+      logger.warning(ex.getMessage());\n+    }\n \n     // get namespaces\n-    for (var ns: Kubernetes.listNamespacesAsObjects().getItems()) {\n-      if (namespace.equals(ns.getMetadata().getName())) {\n-        writeToFile(ns, resultDir.toString(), namespace + \"_ns.log\");\n+    try {\n+      for (var ns : Kubernetes.listNamespacesAsObjects().getItems()) {\n+        if (namespace.equals(ns.getMetadata().getName())) {\n+          writeToFile(ns, resultDir, namespace + \"_ns.log\");\n+        }\n       }\n+    } catch (Exception ex) {\n+      logger.warning(ex.getMessage());\n     }\n \n     // get pvc\n-    writeToFile(Kubernetes.listPersistentVolumeClaims(namespace), resultDir.toString(), namespace + \"_pvc.log\");\n-\n-    // get pv based on the weblogic.domainUID in pvc\n-    for (var pvc : Kubernetes.listPersistentVolumeClaims(namespace).getItems()) {\n-      if (pvc.getMetadata() != null\n-          && pvc.getMetadata().getLabels() != null\n-          && pvc.getMetadata().getLabels().get(\"weblogic.domainUID\") != null) {\n-        String label = pvc.getMetadata().getLabels().get(\"weblogic.domainUID\");\n-        writeToFile(Kubernetes.listPersistentVolumes(\n-            String.format(\"weblogic.domainUID in (%s)\", label)), resultDir.toString(), label + \"_pv.log\");\n+    try {\n+      writeToFile(Kubernetes.listPersistentVolumeClaims(namespace), resultDir, namespace + \"_pvc.log\");\n+    } catch (Exception ex) {\n+      logger.warning(ex.getMessage());\n+    }\n+\n+    // get pv configuration and pv files based on the weblogic.domainUid label in pvc\n+    try {\n+      for (var pvc : Kubernetes.listPersistentVolumeClaims(namespace).getItems()) {\n+        String label = Optional.ofNullable(pvc)\n+            .map(metadata -> metadata.getMetadata())\n+            .map(labels -> labels.getLabels())\n+            .map(labels -> labels.get(\"weblogic.domainUid\")).get();\n+\n+        // get the persistent volumes based on label weblogic.domainUid\n+        V1PersistentVolumeList pvList = Kubernetes\n+            .listPersistentVolumes(String.format(\"weblogic.domainUid = %s\", label));\n+        // write the persistent volume configurations to log\n+        writeToFile(pvList, resultDir, label + \"_pv.log\");\n+\n+        // dump files stored in persistent volumes to\n+        // RESULT_DIR/PVC_NAME/PV_NAME location\n+        for (var pv : pvList.getItems()) {\n+          String claimName = pvc.getMetadata().getName();\n+          String pvName = pv.getMetadata().getName();\n+          String hostPath = pv.getSpec().getHostPath().getPath();\n+          try {\n+            copyFromPV(namespace, hostPath,\n+                Files.createDirectories(\n+                    Paths.get(resultDir, claimName, pvName)));\n+          } catch (ApiException apex) {\n+            logger.warning(apex.getResponseBody());\n+          } catch (Exception ex) {\n+            ex.printStackTrace();\n+            logger.warning(ex.getMessage());\n+          }\n+        }\n+        logger.info(\"Done archiving the persistent volumes\");", "originalCommit": "5811d1c715bee09827f987c5458bad1c640004fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEwMjMyOA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r418102328", "bodyText": "The copyDirectoryFromPod method  will print messages about the copy. The above logging is removed to be consistent with other write methods.", "author": "sankarpn", "createdAt": "2020-04-30T15:36:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwOTYxNA=="}], "type": "inlineReview", "revised_code": {"commit": "837254b9d20390bef8b5b0a71f4e49c91f04702c", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\nindex 4603e02baa..035986934a 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\n\n@@ -89,7 +89,7 @@ public class LoggingUtil {\n \n     // get service accounts\n     try {\n-      writeToFile(Kubernetes.listServiceAccounts(namespace), resultDir, namespace + \"_sa.log\");\n+      writeToFile(Kubernetes.listServiceAccounts(namespace), resultDir, namespace + \".list.service-accounts.log\");\n     } catch (Exception ex) {\n       logger.warning(ex.getMessage());\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwOTg5OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r417009899", "bodyText": "pv's are not namespaced - explain what the namespace param is for more clearly", "author": "markxnelson", "createdAt": "2020-04-29T00:48:52Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java", "diffHunk": "@@ -137,4 +232,162 @@ private static void writeToFile(Object obj, String resultDir, String fileName) t\n     }\n   }\n \n-}\n+  /**\n+   * Copy files from persistent volume to local folder.\n+   * @param namespace name of the namespace", "originalCommit": "5811d1c715bee09827f987c5458bad1c640004fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEwMzUxNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r418103514", "bodyText": "modified the descriptions to be more clear.\nFor the record\nThe namespace is used for creating the temporary pod not for pv.", "author": "sankarpn", "createdAt": "2020-04-30T15:38:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAwOTg5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "837254b9d20390bef8b5b0a71f4e49c91f04702c", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\nindex 4603e02baa..035986934a 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\n\n@@ -234,12 +226,12 @@ public class LoggingUtil {\n \n   /**\n    * Copy files from persistent volume to local folder.\n-   * @param namespace name of the namespace\n-   * @param hostPath the persistent volume host path\n+   * @param namespace name of the namespace, used for creating temporary pod.\n+   * @param srcPath the path to be mounted in persistent volume for temporary pod to access\n    * @param destinationPath destination folder to copy the files to\n    * @throws ApiException when pod interaction fails\n    */\n-  private static void copyFromPV(String namespace, String hostPath, Path destinationPath) throws ApiException {\n+  private static void copyFromPV(String namespace, String srcPath, Path destinationPath) throws ApiException {\n     V1Pod pvPod = null;\n     try {\n       // create a temporary pod to get access to the interested persistent volume\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxMDE2Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r417010162", "bodyText": "what does hostPath mean in this context?  there is a storage provider in k8s called HostPath -- are you talking about that? if not, pick a better/different name to avoid confusion", "author": "markxnelson", "createdAt": "2020-04-29T00:49:41Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java", "diffHunk": "@@ -137,4 +232,162 @@ private static void writeToFile(Object obj, String resultDir, String fileName) t\n     }\n   }\n \n-}\n+  /**\n+   * Copy files from persistent volume to local folder.\n+   * @param namespace name of the namespace\n+   * @param hostPath the persistent volume host path", "originalCommit": "5811d1c715bee09827f987c5458bad1c640004fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEwNjIzMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r418106232", "bodyText": "The hostPath object from persistent volume configuration of ineterest.\nI thought of creating the one-off pod with a new pvc and pv based on the hostPath object from the PV that needs to be archived.\nNow I removed that new pv and pvc creation and using the pv/pvc from the test to be used in the one-off pod.", "author": "sankarpn", "createdAt": "2020-04-30T15:42:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxMDE2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "837254b9d20390bef8b5b0a71f4e49c91f04702c", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\nindex 4603e02baa..035986934a 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\n\n@@ -234,12 +226,12 @@ public class LoggingUtil {\n \n   /**\n    * Copy files from persistent volume to local folder.\n-   * @param namespace name of the namespace\n-   * @param hostPath the persistent volume host path\n+   * @param namespace name of the namespace, used for creating temporary pod.\n+   * @param srcPath the path to be mounted in persistent volume for temporary pod to access\n    * @param destinationPath destination folder to copy the files to\n    * @throws ApiException when pod interaction fails\n    */\n-  private static void copyFromPV(String namespace, String hostPath, Path destinationPath) throws ApiException {\n+  private static void copyFromPV(String namespace, String srcPath, Path destinationPath) throws ApiException {\n     V1Pod pvPod = null;\n     try {\n       // create a temporary pod to get access to the interested persistent volume\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxMDIzNQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r417010235", "bodyText": "why do you need ns? why not just use default?", "author": "markxnelson", "createdAt": "2020-04-29T00:50:04Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java", "diffHunk": "@@ -137,4 +232,162 @@ private static void writeToFile(Object obj, String resultDir, String fileName) t\n     }\n   }\n \n-}\n+  /**\n+   * Copy files from persistent volume to local folder.\n+   * @param namespace name of the namespace\n+   * @param hostPath the persistent volume host path\n+   * @param destinationPath destination folder to copy the files to\n+   * @throws ApiException when pod interaction fails\n+   */\n+  private static void copyFromPV(String namespace, String hostPath, Path destinationPath) throws ApiException {\n+    V1Pod pvPod = null;\n+    try {\n+      // create a temporary pod to get access to the interested persistent volume\n+      pvPod = setupPVPod(namespace, hostPath);", "originalCommit": "5811d1c715bee09827f987c5458bad1c640004fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODExMDA4OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r418110089", "bodyText": "I am creating the one-off pod in the same namespace the test used, also to create the one-off pod with a namespace appended to its name.\nSo even if there is a problem in one-off pod deletion, when the test runs the cleanup util everything in that test namespace gets wiped out.", "author": "sankarpn", "createdAt": "2020-04-30T15:48:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxMDIzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "837254b9d20390bef8b5b0a71f4e49c91f04702c", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\nindex 4603e02baa..035986934a 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\n\n@@ -234,12 +226,12 @@ public class LoggingUtil {\n \n   /**\n    * Copy files from persistent volume to local folder.\n-   * @param namespace name of the namespace\n-   * @param hostPath the persistent volume host path\n+   * @param namespace name of the namespace, used for creating temporary pod.\n+   * @param srcPath the path to be mounted in persistent volume for temporary pod to access\n    * @param destinationPath destination folder to copy the files to\n    * @throws ApiException when pod interaction fails\n    */\n-  private static void copyFromPV(String namespace, String hostPath, Path destinationPath) throws ApiException {\n+  private static void copyFromPV(String namespace, String srcPath, Path destinationPath) throws ApiException {\n     V1Pod pvPod = null;\n     try {\n       // create a temporary pod to get access to the interested persistent volume\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxMDMzMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r417010331", "bodyText": "you are not creating a PV right?", "author": "markxnelson", "createdAt": "2020-04-29T00:50:27Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java", "diffHunk": "@@ -137,4 +232,162 @@ private static void writeToFile(Object obj, String resultDir, String fileName) t\n     }\n   }\n \n-}\n+  /**\n+   * Copy files from persistent volume to local folder.\n+   * @param namespace name of the namespace\n+   * @param hostPath the persistent volume host path\n+   * @param destinationPath destination folder to copy the files to\n+   * @throws ApiException when pod interaction fails\n+   */\n+  private static void copyFromPV(String namespace, String hostPath, Path destinationPath) throws ApiException {\n+    V1Pod pvPod = null;\n+    try {\n+      // create a temporary pod to get access to the interested persistent volume\n+      pvPod = setupPVPod(namespace, hostPath);\n+      copyDirectoryFromPod(pvPod, hostPath, destinationPath);\n+    } finally {\n+      // remove the temporary pod\n+      if (pvPod != null) {\n+        cleanupPVPod(namespace);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Creates temporary pod with persistent volume claim and persistent volume using host path.", "originalCommit": "5811d1c715bee09827f987c5458bad1c640004fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODExMDE5Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r418110192", "bodyText": "removed the pv creation", "author": "sankarpn", "createdAt": "2020-04-30T15:48:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxMDMzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "837254b9d20390bef8b5b0a71f4e49c91f04702c", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\nindex 4603e02baa..035986934a 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\n\n@@ -234,12 +226,12 @@ public class LoggingUtil {\n \n   /**\n    * Copy files from persistent volume to local folder.\n-   * @param namespace name of the namespace\n-   * @param hostPath the persistent volume host path\n+   * @param namespace name of the namespace, used for creating temporary pod.\n+   * @param srcPath the path to be mounted in persistent volume for temporary pod to access\n    * @param destinationPath destination folder to copy the files to\n    * @throws ApiException when pod interaction fails\n    */\n-  private static void copyFromPV(String namespace, String hostPath, Path destinationPath) throws ApiException {\n+  private static void copyFromPV(String namespace, String srcPath, Path destinationPath) throws ApiException {\n     V1Pod pvPod = null;\n     try {\n       // create a temporary pod to get access to the interested persistent volume\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxMDM1NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r417010355", "bodyText": "what namespace?", "author": "markxnelson", "createdAt": "2020-04-29T00:50:33Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java", "diffHunk": "@@ -137,4 +232,162 @@ private static void writeToFile(Object obj, String resultDir, String fileName) t\n     }\n   }\n \n-}\n+  /**\n+   * Copy files from persistent volume to local folder.\n+   * @param namespace name of the namespace\n+   * @param hostPath the persistent volume host path\n+   * @param destinationPath destination folder to copy the files to\n+   * @throws ApiException when pod interaction fails\n+   */\n+  private static void copyFromPV(String namespace, String hostPath, Path destinationPath) throws ApiException {\n+    V1Pod pvPod = null;\n+    try {\n+      // create a temporary pod to get access to the interested persistent volume\n+      pvPod = setupPVPod(namespace, hostPath);\n+      copyDirectoryFromPod(pvPod, hostPath, destinationPath);\n+    } finally {\n+      // remove the temporary pod\n+      if (pvPod != null) {\n+        cleanupPVPod(namespace);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Creates temporary pod with persistent volume claim and persistent volume using host path.\n+   *\n+   * @param namespace name of the namespace", "originalCommit": "5811d1c715bee09827f987c5458bad1c640004fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE0MDY0OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r418140649", "bodyText": "modified the description to give more details", "author": "sankarpn", "createdAt": "2020-04-30T16:34:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxMDM1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "837254b9d20390bef8b5b0a71f4e49c91f04702c", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\nindex 4603e02baa..035986934a 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\n\n@@ -234,12 +226,12 @@ public class LoggingUtil {\n \n   /**\n    * Copy files from persistent volume to local folder.\n-   * @param namespace name of the namespace\n-   * @param hostPath the persistent volume host path\n+   * @param namespace name of the namespace, used for creating temporary pod.\n+   * @param srcPath the path to be mounted in persistent volume for temporary pod to access\n    * @param destinationPath destination folder to copy the files to\n    * @throws ApiException when pod interaction fails\n    */\n-  private static void copyFromPV(String namespace, String hostPath, Path destinationPath) throws ApiException {\n+  private static void copyFromPV(String namespace, String srcPath, Path destinationPath) throws ApiException {\n     V1Pod pvPod = null;\n     try {\n       // create a temporary pod to get access to the interested persistent volume\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxMDM3MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r417010370", "bodyText": "same", "author": "markxnelson", "createdAt": "2020-04-29T00:50:37Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java", "diffHunk": "@@ -137,4 +232,162 @@ private static void writeToFile(Object obj, String resultDir, String fileName) t\n     }\n   }\n \n-}\n+  /**\n+   * Copy files from persistent volume to local folder.\n+   * @param namespace name of the namespace\n+   * @param hostPath the persistent volume host path\n+   * @param destinationPath destination folder to copy the files to\n+   * @throws ApiException when pod interaction fails\n+   */\n+  private static void copyFromPV(String namespace, String hostPath, Path destinationPath) throws ApiException {\n+    V1Pod pvPod = null;\n+    try {\n+      // create a temporary pod to get access to the interested persistent volume\n+      pvPod = setupPVPod(namespace, hostPath);\n+      copyDirectoryFromPod(pvPod, hostPath, destinationPath);\n+    } finally {\n+      // remove the temporary pod\n+      if (pvPod != null) {\n+        cleanupPVPod(namespace);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Creates temporary pod with persistent volume claim and persistent volume using host path.\n+   *\n+   * @param namespace name of the namespace\n+   * @param hostPath host path from ineterested persistent volume", "originalCommit": "5811d1c715bee09827f987c5458bad1c640004fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE0MDc0NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r418140745", "bodyText": "modified the description", "author": "sankarpn", "createdAt": "2020-04-30T16:34:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxMDM3MA=="}], "type": "inlineReview", "revised_code": {"commit": "837254b9d20390bef8b5b0a71f4e49c91f04702c", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\nindex 4603e02baa..035986934a 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\n\n@@ -234,12 +226,12 @@ public class LoggingUtil {\n \n   /**\n    * Copy files from persistent volume to local folder.\n-   * @param namespace name of the namespace\n-   * @param hostPath the persistent volume host path\n+   * @param namespace name of the namespace, used for creating temporary pod.\n+   * @param srcPath the path to be mounted in persistent volume for temporary pod to access\n    * @param destinationPath destination folder to copy the files to\n    * @throws ApiException when pod interaction fails\n    */\n-  private static void copyFromPV(String namespace, String hostPath, Path destinationPath) throws ApiException {\n+  private static void copyFromPV(String namespace, String srcPath, Path destinationPath) throws ApiException {\n     V1Pod pvPod = null;\n     try {\n       // create a temporary pod to get access to the interested persistent volume\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxMDUxNQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r417010515", "bodyText": "i am lost here - why are you creating a PV?", "author": "markxnelson", "createdAt": "2020-04-29T00:51:09Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java", "diffHunk": "@@ -137,4 +232,162 @@ private static void writeToFile(Object obj, String resultDir, String fileName) t\n     }\n   }\n \n-}\n+  /**\n+   * Copy files from persistent volume to local folder.\n+   * @param namespace name of the namespace\n+   * @param hostPath the persistent volume host path\n+   * @param destinationPath destination folder to copy the files to\n+   * @throws ApiException when pod interaction fails\n+   */\n+  private static void copyFromPV(String namespace, String hostPath, Path destinationPath) throws ApiException {\n+    V1Pod pvPod = null;\n+    try {\n+      // create a temporary pod to get access to the interested persistent volume\n+      pvPod = setupPVPod(namespace, hostPath);\n+      copyDirectoryFromPod(pvPod, hostPath, destinationPath);\n+    } finally {\n+      // remove the temporary pod\n+      if (pvPod != null) {\n+        cleanupPVPod(namespace);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Creates temporary pod with persistent volume claim and persistent volume using host path.\n+   *\n+   * @param namespace name of the namespace\n+   * @param hostPath host path from ineterested persistent volume\n+   * @return V1Pod pod object\n+   * @throws ApiException when create pod fails\n+   */\n+  private static V1Pod setupPVPod(String namespace, String hostPath) throws ApiException {\n+\n+    ConditionFactory withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(5, SECONDS)\n+        .atMost(1, MINUTES).await();\n+\n+    // create a pvc and pv to get access to the host path of the target pv\n+    final String pvcName = \"pv-pod-pvc-\" + namespace;\n+    final String pvName = \"pv-pod-pv-\" + namespace;\n+\n+    V1PersistentVolume v1pv = new V1PersistentVolume()", "originalCommit": "5811d1c715bee09827f987c5458bad1c640004fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxMDc1OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r417010759", "bodyText": "i don't understand what this method is doing. javadoc says it is copying from a pv, so the pv must already exist, right?", "author": "markxnelson", "createdAt": "2020-04-29T00:51:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxMDUxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE0NDIwNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r418144207", "bodyText": "The initial implementation was to create a new one-off pod with its own pvc and pv (using the hostPath location from the pv used by the test, where the contents need to be archived are located)\nNow I changed the code such that the one-off pod will use the existing pvc/pv used by the test. Mount it under /shared in one-off pod and copy it.", "author": "sankarpn", "createdAt": "2020-04-30T16:40:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxMDUxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "837254b9d20390bef8b5b0a71f4e49c91f04702c", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\nindex 4603e02baa..035986934a 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\n\n@@ -234,12 +226,12 @@ public class LoggingUtil {\n \n   /**\n    * Copy files from persistent volume to local folder.\n-   * @param namespace name of the namespace\n-   * @param hostPath the persistent volume host path\n+   * @param namespace name of the namespace, used for creating temporary pod.\n+   * @param srcPath the path to be mounted in persistent volume for temporary pod to access\n    * @param destinationPath destination folder to copy the files to\n    * @throws ApiException when pod interaction fails\n    */\n-  private static void copyFromPV(String namespace, String hostPath, Path destinationPath) throws ApiException {\n+  private static void copyFromPV(String namespace, String srcPath, Path destinationPath) throws ApiException {\n     V1Pod pvPod = null;\n     try {\n       // create a temporary pod to get access to the interested persistent volume\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxMDg0Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r417010843", "bodyText": "don't use nginx... use oraclelinux:7-slim", "author": "markxnelson", "createdAt": "2020-04-29T00:52:14Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java", "diffHunk": "@@ -137,4 +232,162 @@ private static void writeToFile(Object obj, String resultDir, String fileName) t\n     }\n   }\n \n-}\n+  /**\n+   * Copy files from persistent volume to local folder.\n+   * @param namespace name of the namespace\n+   * @param hostPath the persistent volume host path\n+   * @param destinationPath destination folder to copy the files to\n+   * @throws ApiException when pod interaction fails\n+   */\n+  private static void copyFromPV(String namespace, String hostPath, Path destinationPath) throws ApiException {\n+    V1Pod pvPod = null;\n+    try {\n+      // create a temporary pod to get access to the interested persistent volume\n+      pvPod = setupPVPod(namespace, hostPath);\n+      copyDirectoryFromPod(pvPod, hostPath, destinationPath);\n+    } finally {\n+      // remove the temporary pod\n+      if (pvPod != null) {\n+        cleanupPVPod(namespace);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Creates temporary pod with persistent volume claim and persistent volume using host path.\n+   *\n+   * @param namespace name of the namespace\n+   * @param hostPath host path from ineterested persistent volume\n+   * @return V1Pod pod object\n+   * @throws ApiException when create pod fails\n+   */\n+  private static V1Pod setupPVPod(String namespace, String hostPath) throws ApiException {\n+\n+    ConditionFactory withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(5, SECONDS)\n+        .atMost(1, MINUTES).await();\n+\n+    // create a pvc and pv to get access to the host path of the target pv\n+    final String pvcName = \"pv-pod-pvc-\" + namespace;\n+    final String pvName = \"pv-pod-pv-\" + namespace;\n+\n+    V1PersistentVolume v1pv = new V1PersistentVolume()\n+        .spec(new V1PersistentVolumeSpec()\n+            .addAccessModesItem(\"ReadWriteMany\")\n+            .storageClassName(namespace + \"-weblogic-domain-storage-class\")\n+            .putCapacityItem(\"storage\", Quantity.fromString(\"2Gi\"))\n+            .persistentVolumeReclaimPolicy(\"Recycle\")\n+            .hostPath(new V1HostPathVolumeSource().path(hostPath)))\n+        .metadata(new V1ObjectMetaBuilder()\n+            .withName(pvName)\n+            .build());\n+    TestActions.createPersistentVolume(v1pv);\n+\n+    V1PersistentVolumeClaim v1pvc = new V1PersistentVolumeClaim()\n+        .spec(new V1PersistentVolumeClaimSpec()\n+            .volumeName(pvName)\n+            .addAccessModesItem(\"ReadWriteMany\")\n+            .storageClassName(namespace + \"-weblogic-domain-storage-class\")\n+            .resources(new V1ResourceRequirements()\n+                .putRequestsItem(\"storage\", Quantity.fromString(\"2Gi\"))))\n+        .metadata(new V1ObjectMetaBuilder()\n+            .withName(pvcName)\n+            .withNamespace(namespace)\n+            .build());\n+    TestActions.createPersistentVolumeClaim(v1pvc);\n+\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pv to be bound, \"\n+                + \"(elapsed time {0} , remaining time {1}\",\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(isPersistentVolumeInState(pvName, \"Bound\"));\n+\n+    final String podName = \"pv-pod-\" + namespace;\n+    V1Pod podBody = new V1Pod()\n+        .spec(new V1PodSpec()\n+            .containers(Arrays.asList(\n+                new V1Container()\n+                    .name(\"pv-container\")\n+                    .image(\"nginx\")", "originalCommit": "5811d1c715bee09827f987c5458bad1c640004fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE0NTAyMA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r418145020", "bodyText": "The copy api needs tar utility in the one-off pod, oraclelinux:7-slim doesn't have it. Instead using a oraclelinux:latest image", "author": "sankarpn", "createdAt": "2020-04-30T16:41:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxMDg0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "837254b9d20390bef8b5b0a71f4e49c91f04702c", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\nindex 4603e02baa..035986934a 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\n\n@@ -234,12 +226,12 @@ public class LoggingUtil {\n \n   /**\n    * Copy files from persistent volume to local folder.\n-   * @param namespace name of the namespace\n-   * @param hostPath the persistent volume host path\n+   * @param namespace name of the namespace, used for creating temporary pod.\n+   * @param srcPath the path to be mounted in persistent volume for temporary pod to access\n    * @param destinationPath destination folder to copy the files to\n    * @throws ApiException when pod interaction fails\n    */\n-  private static void copyFromPV(String namespace, String hostPath, Path destinationPath) throws ApiException {\n+  private static void copyFromPV(String namespace, String srcPath, Path destinationPath) throws ApiException {\n     V1Pod pvPod = null;\n     try {\n       // create a temporary pod to get access to the interested persistent volume\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxMDg5MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r417010891", "bodyText": "what?", "author": "markxnelson", "createdAt": "2020-04-29T00:52:31Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java", "diffHunk": "@@ -137,4 +232,162 @@ private static void writeToFile(Object obj, String resultDir, String fileName) t\n     }\n   }\n \n-}\n+  /**\n+   * Copy files from persistent volume to local folder.\n+   * @param namespace name of the namespace\n+   * @param hostPath the persistent volume host path\n+   * @param destinationPath destination folder to copy the files to\n+   * @throws ApiException when pod interaction fails\n+   */\n+  private static void copyFromPV(String namespace, String hostPath, Path destinationPath) throws ApiException {\n+    V1Pod pvPod = null;\n+    try {\n+      // create a temporary pod to get access to the interested persistent volume\n+      pvPod = setupPVPod(namespace, hostPath);\n+      copyDirectoryFromPod(pvPod, hostPath, destinationPath);\n+    } finally {\n+      // remove the temporary pod\n+      if (pvPod != null) {\n+        cleanupPVPod(namespace);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Creates temporary pod with persistent volume claim and persistent volume using host path.\n+   *\n+   * @param namespace name of the namespace\n+   * @param hostPath host path from ineterested persistent volume\n+   * @return V1Pod pod object\n+   * @throws ApiException when create pod fails\n+   */\n+  private static V1Pod setupPVPod(String namespace, String hostPath) throws ApiException {\n+\n+    ConditionFactory withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(5, SECONDS)\n+        .atMost(1, MINUTES).await();\n+\n+    // create a pvc and pv to get access to the host path of the target pv\n+    final String pvcName = \"pv-pod-pvc-\" + namespace;\n+    final String pvName = \"pv-pod-pv-\" + namespace;\n+\n+    V1PersistentVolume v1pv = new V1PersistentVolume()\n+        .spec(new V1PersistentVolumeSpec()\n+            .addAccessModesItem(\"ReadWriteMany\")\n+            .storageClassName(namespace + \"-weblogic-domain-storage-class\")\n+            .putCapacityItem(\"storage\", Quantity.fromString(\"2Gi\"))\n+            .persistentVolumeReclaimPolicy(\"Recycle\")\n+            .hostPath(new V1HostPathVolumeSource().path(hostPath)))\n+        .metadata(new V1ObjectMetaBuilder()\n+            .withName(pvName)\n+            .build());\n+    TestActions.createPersistentVolume(v1pv);\n+\n+    V1PersistentVolumeClaim v1pvc = new V1PersistentVolumeClaim()\n+        .spec(new V1PersistentVolumeClaimSpec()\n+            .volumeName(pvName)\n+            .addAccessModesItem(\"ReadWriteMany\")\n+            .storageClassName(namespace + \"-weblogic-domain-storage-class\")\n+            .resources(new V1ResourceRequirements()\n+                .putRequestsItem(\"storage\", Quantity.fromString(\"2Gi\"))))\n+        .metadata(new V1ObjectMetaBuilder()\n+            .withName(pvcName)\n+            .withNamespace(namespace)\n+            .build());\n+    TestActions.createPersistentVolumeClaim(v1pvc);\n+\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pv to be bound, \"\n+                + \"(elapsed time {0} , remaining time {1}\",\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(isPersistentVolumeInState(pvName, \"Bound\"));\n+\n+    final String podName = \"pv-pod-\" + namespace;\n+    V1Pod podBody = new V1Pod()\n+        .spec(new V1PodSpec()\n+            .containers(Arrays.asList(\n+                new V1Container()\n+                    .name(\"pv-container\")\n+                    .image(\"nginx\")\n+                    .imagePullPolicy(\"IfNotPresent\")\n+                    .volumeMounts(Arrays.asList(\n+                        new V1VolumeMount()\n+                            .name(pvName)\n+                            .mountPath(\"/shared\")))))\n+            .volumes(Arrays.asList(\n+                new V1Volume()\n+                    .name(pvName)\n+                    .persistentVolumeClaim(\n+                        new V1PersistentVolumeClaimVolumeSource()\n+                            .claimName(pvcName)))))\n+        .metadata(new V1ObjectMeta().name(podName))\n+        .apiVersion(\"v1\")\n+        .kind(\"Pod\");\n+    V1Pod pvPod = Kubernetes.createPod(namespace, podBody);\n+\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for {0} to be ready in namespace {1}, \"\n+                + \"(elapsed time {2} , remaining time {3}\",\n+                podName,\n+                namespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(podReady(podName, null, namespace));\n+    return pvPod;\n+  }\n+\n+  /**\n+   * Delete the temporary pv pod.\n+   * @param namespace name", "originalCommit": "5811d1c715bee09827f987c5458bad1c640004fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE0NTM1Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r418145357", "bodyText": "modified the description, the namespace is where the one-off pod running.", "author": "sankarpn", "createdAt": "2020-04-30T16:42:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxMDg5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "837254b9d20390bef8b5b0a71f4e49c91f04702c", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\nindex 4603e02baa..035986934a 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\n\n@@ -234,12 +226,12 @@ public class LoggingUtil {\n \n   /**\n    * Copy files from persistent volume to local folder.\n-   * @param namespace name of the namespace\n-   * @param hostPath the persistent volume host path\n+   * @param namespace name of the namespace, used for creating temporary pod.\n+   * @param srcPath the path to be mounted in persistent volume for temporary pod to access\n    * @param destinationPath destination folder to copy the files to\n    * @throws ApiException when pod interaction fails\n    */\n-  private static void copyFromPV(String namespace, String hostPath, Path destinationPath) throws ApiException {\n+  private static void copyFromPV(String namespace, String srcPath, Path destinationPath) throws ApiException {\n     V1Pod pvPod = null;\n     try {\n       // create a temporary pod to get access to the interested persistent volume\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxMDk2Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r417010966", "bodyText": "fix wording", "author": "markxnelson", "createdAt": "2020-04-29T00:52:46Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java", "diffHunk": "@@ -137,4 +232,162 @@ private static void writeToFile(Object obj, String resultDir, String fileName) t\n     }\n   }\n \n-}\n+  /**\n+   * Copy files from persistent volume to local folder.\n+   * @param namespace name of the namespace\n+   * @param hostPath the persistent volume host path\n+   * @param destinationPath destination folder to copy the files to\n+   * @throws ApiException when pod interaction fails\n+   */\n+  private static void copyFromPV(String namespace, String hostPath, Path destinationPath) throws ApiException {\n+    V1Pod pvPod = null;\n+    try {\n+      // create a temporary pod to get access to the interested persistent volume\n+      pvPod = setupPVPod(namespace, hostPath);\n+      copyDirectoryFromPod(pvPod, hostPath, destinationPath);\n+    } finally {\n+      // remove the temporary pod\n+      if (pvPod != null) {\n+        cleanupPVPod(namespace);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Creates temporary pod with persistent volume claim and persistent volume using host path.\n+   *\n+   * @param namespace name of the namespace\n+   * @param hostPath host path from ineterested persistent volume\n+   * @return V1Pod pod object\n+   * @throws ApiException when create pod fails\n+   */\n+  private static V1Pod setupPVPod(String namespace, String hostPath) throws ApiException {\n+\n+    ConditionFactory withStandardRetryPolicy = with().pollDelay(2, SECONDS)\n+        .and().with().pollInterval(5, SECONDS)\n+        .atMost(1, MINUTES).await();\n+\n+    // create a pvc and pv to get access to the host path of the target pv\n+    final String pvcName = \"pv-pod-pvc-\" + namespace;\n+    final String pvName = \"pv-pod-pv-\" + namespace;\n+\n+    V1PersistentVolume v1pv = new V1PersistentVolume()\n+        .spec(new V1PersistentVolumeSpec()\n+            .addAccessModesItem(\"ReadWriteMany\")\n+            .storageClassName(namespace + \"-weblogic-domain-storage-class\")\n+            .putCapacityItem(\"storage\", Quantity.fromString(\"2Gi\"))\n+            .persistentVolumeReclaimPolicy(\"Recycle\")\n+            .hostPath(new V1HostPathVolumeSource().path(hostPath)))\n+        .metadata(new V1ObjectMetaBuilder()\n+            .withName(pvName)\n+            .build());\n+    TestActions.createPersistentVolume(v1pv);\n+\n+    V1PersistentVolumeClaim v1pvc = new V1PersistentVolumeClaim()\n+        .spec(new V1PersistentVolumeClaimSpec()\n+            .volumeName(pvName)\n+            .addAccessModesItem(\"ReadWriteMany\")\n+            .storageClassName(namespace + \"-weblogic-domain-storage-class\")\n+            .resources(new V1ResourceRequirements()\n+                .putRequestsItem(\"storage\", Quantity.fromString(\"2Gi\"))))\n+        .metadata(new V1ObjectMetaBuilder()\n+            .withName(pvcName)\n+            .withNamespace(namespace)\n+            .build());\n+    TestActions.createPersistentVolumeClaim(v1pvc);\n+\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pv to be bound, \"\n+                + \"(elapsed time {0} , remaining time {1}\",\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(isPersistentVolumeInState(pvName, \"Bound\"));\n+\n+    final String podName = \"pv-pod-\" + namespace;\n+    V1Pod podBody = new V1Pod()\n+        .spec(new V1PodSpec()\n+            .containers(Arrays.asList(\n+                new V1Container()\n+                    .name(\"pv-container\")\n+                    .image(\"nginx\")\n+                    .imagePullPolicy(\"IfNotPresent\")\n+                    .volumeMounts(Arrays.asList(\n+                        new V1VolumeMount()\n+                            .name(pvName)\n+                            .mountPath(\"/shared\")))))\n+            .volumes(Arrays.asList(\n+                new V1Volume()\n+                    .name(pvName)\n+                    .persistentVolumeClaim(\n+                        new V1PersistentVolumeClaimVolumeSource()\n+                            .claimName(pvcName)))))\n+        .metadata(new V1ObjectMeta().name(podName))\n+        .apiVersion(\"v1\")\n+        .kind(\"Pod\");\n+    V1Pod pvPod = Kubernetes.createPod(namespace, podBody);\n+\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for {0} to be ready in namespace {1}, \"\n+                + \"(elapsed time {2} , remaining time {3}\",\n+                podName,\n+                namespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(podReady(podName, null, namespace));\n+    return pvPod;\n+  }\n+\n+  /**\n+   * Delete the temporary pv pod.\n+   * @param namespace name\n+   * @throws ApiException when pod deletion fails\n+   */\n+  private static void cleanupPVPod(String namespace) throws ApiException {\n+    Kubernetes.deletePod(\"pv-pod-\" + namespace, namespace);\n+    Kubernetes.deletePvc(\"pv-pod-pvc-\" + namespace, namespace);\n+    Kubernetes.deletePv(\"pv-pod-pv-\" + namespace);\n+  }\n+\n+  // there is currently a bug in the copy API which leaves i/o stream left open", "originalCommit": "5811d1c715bee09827f987c5458bad1c640004fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE0NTQyOA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1609#discussion_r418145428", "bodyText": "fixed", "author": "sankarpn", "createdAt": "2020-04-30T16:42:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAxMDk2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "837254b9d20390bef8b5b0a71f4e49c91f04702c", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\nindex 4603e02baa..035986934a 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/LoggingUtil.java\n\n@@ -234,12 +226,12 @@ public class LoggingUtil {\n \n   /**\n    * Copy files from persistent volume to local folder.\n-   * @param namespace name of the namespace\n-   * @param hostPath the persistent volume host path\n+   * @param namespace name of the namespace, used for creating temporary pod.\n+   * @param srcPath the path to be mounted in persistent volume for temporary pod to access\n    * @param destinationPath destination folder to copy the files to\n    * @throws ApiException when pod interaction fails\n    */\n-  private static void copyFromPV(String namespace, String hostPath, Path destinationPath) throws ApiException {\n+  private static void copyFromPV(String namespace, String srcPath, Path destinationPath) throws ApiException {\n     V1Pod pvPod = null;\n     try {\n       // create a temporary pod to get access to the interested persistent volume\n"}}, {"oid": "837254b9d20390bef8b5b0a71f4e49c91f04702c", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/837254b9d20390bef8b5b0a71f4e49c91f04702c", "message": "Addressing review comments", "committedDate": "2020-04-29T15:24:12Z", "type": "commit"}, {"oid": "a7c177d1c8b1b7e26d13c21751612793d2a440c9", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a7c177d1c8b1b7e26d13c21751612793d2a440c9", "message": "Addressing the review comments", "committedDate": "2020-04-30T01:03:27Z", "type": "commit"}, {"oid": "3fe9120d2a8d83200f9ef249319bb4885b26258c", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3fe9120d2a8d83200f9ef249319bb4885b26258c", "message": "Removed the persistent volume related assertions since it is no loner\nneeded", "committedDate": "2020-04-30T01:06:12Z", "type": "commit"}, {"oid": "219bb78e3c0ebd5e8755ae8c0601b2173fe58ec5", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/219bb78e3c0ebd5e8755ae8c0601b2173fe58ec5", "message": "Change the pod container image to use oraclelinux instead of nginx\nand wait for temp pod to be deleted", "committedDate": "2020-04-30T03:54:35Z", "type": "commit"}, {"oid": "d1080ae2db8a04dd3c4bef5ce9c795c06c5b7e06", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d1080ae2db8a04dd3c4bef5ce9c795c06c5b7e06", "message": "javadoc fix", "committedDate": "2020-04-30T04:01:59Z", "type": "commit"}, {"oid": "383dbe1674776ef486ad2cc6ad76494df761e77b", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/383dbe1674776ef486ad2cc6ad76494df761e77b", "message": "fic formatting", "committedDate": "2020-04-30T16:54:41Z", "type": "commit"}, {"oid": "455940531f491342c7f57b41a3cd6a917b046323", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/455940531f491342c7f57b41a3cd6a917b046323", "message": "Merge branch 'develop' into archive-pv", "committedDate": "2020-05-01T20:00:01Z", "type": "commit"}, {"oid": "f7a7769a59b170a958036f0988b749d90907a186", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f7a7769a59b170a958036f0988b749d90907a186", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into archive-pv", "committedDate": "2020-05-04T16:19:27Z", "type": "commit"}]}