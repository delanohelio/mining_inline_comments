{"pr_number": 1670, "pr_title": "Add new rolling re-start assertion to ItClasses", "pr_createdAt": "2020-05-22T00:48:16Z", "pr_url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1670", "timeline": [{"oid": "f54185a1825d7c62fc2c3444eda1a060ecb2e5be", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f54185a1825d7c62fc2c3444eda1a060ecb2e5be", "message": "Add new rolling re-start assertion to ItClass", "committedDate": "2020-05-22T00:41:32Z", "type": "commit"}, {"oid": "63e82c0f92357b31efa4e0ae944de7d6b79820cc", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/63e82c0f92357b31efa4e0ae944de7d6b79820cc", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into mii-rolrestart", "committedDate": "2020-05-22T00:52:18Z", "type": "commit"}, {"oid": "2c017f1cb6d70b9f4f786be34732e9fd6f60e6cb", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/2c017f1cb6d70b9f4f786be34732e9fd6f60e6cb", "message": "Fixed few INFO statements", "committedDate": "2020-05-22T01:36:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI3MTk2Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1670#discussion_r429271962", "bodyText": "This method is duplicated in multiple test classes now. Shall we make it a test action?", "author": "doxiao", "createdAt": "2020-05-22T14:14:36Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiAddCluster.java", "diffHunk": "@@ -767,37 +712,57 @@ private void createClusterConfigMap(String configMapName, String modelFile) {\n     assertTrue(cmCreated, String.format(\"createConfigMap failed while creating ConfigMap %s\", configMapName));\n   }     \n \n-  private String getadminPodCreationTime() {\n-\n-    String adminPodCreationTime =\n-        assertDoesNotThrow(() -> getPodCreationTimestamp(domainNamespace, \"\", adminServerPodName),\n-            String.format(\"Couldn't get PodCreationTime for pod %s\", adminServerPodName));\n-    assertNotNull(adminPodCreationTime, \"adminPodCreationTime returned null\");\n-    logger.info(\"Domain {0} in namespace {1}, admin server pod {2} creationTimestamp before patching is {3}\",\n-        domainUid,\n-        domainNamespace,\n-        adminServerPodName,\n-        adminPodCreationTime);\n-    return adminPodCreationTime;\n+  /**\n+   * Get the PodCreationTimestamp of a pod in a namespace.\n+   * \n+   * @param namespace Kubernetes namespace that the domain is hosted\n+   * @param podName name of the pod \n+   * @return PodCreationTimestamp of the pod\n+   */\n+  private String getPodCreationTime(String namespace, String podName) {\n+    String podCreationTime =\n+        assertDoesNotThrow(() -> getPodCreationTimestamp(namespace, \"\", podName),\n+            String.format(\"Couldn't get PodCreationTime for pod %s\", podName));\n+    assertNotNull(podCreationTime, \"Got null PodCreationTimestamp\");\n+    logger.info(\"PodCreationTimestamp for pod ${0} in namespace ${1} is {2}\",\n+        namespace,\n+        podName,\n+        podCreationTime);\n+    return podCreationTime;\n   }\n \n-  private List<String> getManagedServerPodTimestampList() {\n-    List<String> managedServerPodTimestampList = new ArrayList<>();\n-    assertDoesNotThrow(\n-        () -> { \n-          for (int i = 1; i <= replicaCount; i++) {\n-            String managedServerPodName = managedServerPrefix + i;\n-            String creationTime = getPodCreationTimestamp(domainNamespace,\"\", managedServerPodName);\n-            managedServerPodTimestampList.add(creationTime);\n-            logger.info(\"Domain {0} in namespace {1}, managed server pod {2} creationTimestamp before patching is {3}\",\n-                domainUid,\n-                domainNamespace,\n-                managedServerPodName,\n-                creationTime);\n-          } \n-        },\n-        String.format(\"Failed to get creationTimestamp for managed server pods\"));\n-    return managedServerPodTimestampList;\n+  /**\n+   * Patch the domain resource with a new restartVersion.\n+   * \n+   * @param domainResourceName name of the domain resource\n+   * @param namespace Kubernetes namespace that the domain is hosted\n+   * @return restartVersion new restartVersion of the domain resource\n+   */\n+  private String patchDomainResourceWithNewRestartVersion(", "originalCommit": "2c017f1cb6d70b9f4f786be34732e9fd6f60e6cb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQzMDc5OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1670#discussion_r429430799", "bodyText": "Added follwwing methos(s) to  utils/CommonTestUtils.java\npatchDomainResourceWithNewRestartVersion()\ngetPodCreationTime()", "author": "anpanigr", "createdAt": "2020-05-22T19:59:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI3MTk2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "a7fa5166328cc2410111235d724d6b6958a5eefc", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiAddCluster.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiAddCluster.java\nindex 0a340ddeef..2745fd2772 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiAddCluster.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiAddCluster.java\n\n@@ -712,57 +682,4 @@ class ItMiiAddCluster implements LoggedTest {\n     assertTrue(cmCreated, String.format(\"createConfigMap failed while creating ConfigMap %s\", configMapName));\n   }     \n \n-  /**\n-   * Get the PodCreationTimestamp of a pod in a namespace.\n-   * \n-   * @param namespace Kubernetes namespace that the domain is hosted\n-   * @param podName name of the pod \n-   * @return PodCreationTimestamp of the pod\n-   */\n-  private String getPodCreationTime(String namespace, String podName) {\n-    String podCreationTime =\n-        assertDoesNotThrow(() -> getPodCreationTimestamp(namespace, \"\", podName),\n-            String.format(\"Couldn't get PodCreationTime for pod %s\", podName));\n-    assertNotNull(podCreationTime, \"Got null PodCreationTimestamp\");\n-    logger.info(\"PodCreationTimestamp for pod ${0} in namespace ${1} is {2}\",\n-        namespace,\n-        podName,\n-        podCreationTime);\n-    return podCreationTime;\n-  }\n-\n-  /**\n-   * Patch the domain resource with a new restartVersion.\n-   * \n-   * @param domainResourceName name of the domain resource\n-   * @param namespace Kubernetes namespace that the domain is hosted\n-   * @return restartVersion new restartVersion of the domain resource\n-   */\n-  private String patchDomainResourceWithNewRestartVersion(\n-      String domainResourceName, String namespace) {\n-    String oldVersion = assertDoesNotThrow(\n-        () -> getDomainCustomResource(domainResourceName, namespace).getSpec().getRestartVersion(),\n-        String.format(\"Failed to get the restartVersion of %s in namespace %s\", domainResourceName, namespace));\n-    int newVersion = oldVersion == null ? 1 : Integer.valueOf(oldVersion) + 1;\n-    logger.info(\"Update domain resource {0} in namespace {1} restartVersion from {2} to {3}\",\n-        domainResourceName, namespace, oldVersion, newVersion);\n-\n-    StringBuffer patchStr = new StringBuffer(\"[{\");\n-    patchStr.append(\" \\\"op\\\": \\\"replace\\\",\")\n-        .append(\" \\\"path\\\": \\\"/spec/restartVersion\\\",\")\n-        .append(\" \\\"value\\\": \\\"\")\n-        .append(newVersion)\n-        .append(\"\\\"\")\n-        .append(\" }]\");\n-\n-    logger.log(Level.INFO, \"Restart version patch string: {0}\", patchStr);\n-    V1Patch patch = new V1Patch(new String(patchStr));\n-    boolean rvPatched = assertDoesNotThrow(() ->\n-            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n-        \"patchDomainCustomResource(restartVersion)  failed \");\n-    assertTrue(rvPatched, \"patchDomainCustomResource(restartVersion) failed\");\n-\n-    return String.valueOf(newVersion);\n-  }\n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI3NTUyNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1670#discussion_r429275527", "bodyText": "The code that get the creation timestamp of all servers and add it to a map is duplicated in the test cases.\nConsider make it a common test util method?", "author": "doxiao", "createdAt": "2020-05-22T14:20:33Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiAddCluster.java", "diffHunk": "@@ -473,12 +448,15 @@ public void testAddMiiConfiguredCluster() {\n     String configMapName = \"configclusterconfigmap\";\n     createClusterConfigMap(configMapName, \"model.config.cluster.yaml\");\n \n-    // get the creation time of the admin server pod before patching\n-    String adminPodCreationTime = getadminPodCreationTime();\n+    LinkedHashMap<String, String> pods = new LinkedHashMap<>();\n \n+    // get the creation time of the admin server pod before patching\n+    String adminPodCreationTime = getPodCreationTime(domainNamespace, adminServerPodName);", "originalCommit": "2c017f1cb6d70b9f4f786be34732e9fd6f60e6cb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQzMTExNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1670#discussion_r429431117", "bodyText": "Done. Added method(s) to utils/CommonTestUtils.java", "author": "anpanigr", "createdAt": "2020-05-22T20:00:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI3NTUyNw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI3NjA1Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1670#discussion_r429276053", "bodyText": "This method is also duplicated in test classes now. Make it a test action or common test util method?", "author": "doxiao", "createdAt": "2020-05-22T14:21:26Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiAddCluster.java", "diffHunk": "@@ -767,37 +712,57 @@ private void createClusterConfigMap(String configMapName, String modelFile) {\n     assertTrue(cmCreated, String.format(\"createConfigMap failed while creating ConfigMap %s\", configMapName));\n   }     \n \n-  private String getadminPodCreationTime() {\n-\n-    String adminPodCreationTime =\n-        assertDoesNotThrow(() -> getPodCreationTimestamp(domainNamespace, \"\", adminServerPodName),\n-            String.format(\"Couldn't get PodCreationTime for pod %s\", adminServerPodName));\n-    assertNotNull(adminPodCreationTime, \"adminPodCreationTime returned null\");\n-    logger.info(\"Domain {0} in namespace {1}, admin server pod {2} creationTimestamp before patching is {3}\",\n-        domainUid,\n-        domainNamespace,\n-        adminServerPodName,\n-        adminPodCreationTime);\n-    return adminPodCreationTime;\n+  /**\n+   * Get the PodCreationTimestamp of a pod in a namespace.\n+   * \n+   * @param namespace Kubernetes namespace that the domain is hosted\n+   * @param podName name of the pod \n+   * @return PodCreationTimestamp of the pod\n+   */\n+  private String getPodCreationTime(String namespace, String podName) {", "originalCommit": "2c017f1cb6d70b9f4f786be34732e9fd6f60e6cb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQzMTE4Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1670#discussion_r429431182", "bodyText": "Done. Added method(s) to utils/CommonTestUtils.java", "author": "anpanigr", "createdAt": "2020-05-22T20:00:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI3NjA1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "a7fa5166328cc2410111235d724d6b6958a5eefc", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiAddCluster.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiAddCluster.java\nindex 0a340ddeef..2745fd2772 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiAddCluster.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiAddCluster.java\n\n@@ -712,57 +682,4 @@ class ItMiiAddCluster implements LoggedTest {\n     assertTrue(cmCreated, String.format(\"createConfigMap failed while creating ConfigMap %s\", configMapName));\n   }     \n \n-  /**\n-   * Get the PodCreationTimestamp of a pod in a namespace.\n-   * \n-   * @param namespace Kubernetes namespace that the domain is hosted\n-   * @param podName name of the pod \n-   * @return PodCreationTimestamp of the pod\n-   */\n-  private String getPodCreationTime(String namespace, String podName) {\n-    String podCreationTime =\n-        assertDoesNotThrow(() -> getPodCreationTimestamp(namespace, \"\", podName),\n-            String.format(\"Couldn't get PodCreationTime for pod %s\", podName));\n-    assertNotNull(podCreationTime, \"Got null PodCreationTimestamp\");\n-    logger.info(\"PodCreationTimestamp for pod ${0} in namespace ${1} is {2}\",\n-        namespace,\n-        podName,\n-        podCreationTime);\n-    return podCreationTime;\n-  }\n-\n-  /**\n-   * Patch the domain resource with a new restartVersion.\n-   * \n-   * @param domainResourceName name of the domain resource\n-   * @param namespace Kubernetes namespace that the domain is hosted\n-   * @return restartVersion new restartVersion of the domain resource\n-   */\n-  private String patchDomainResourceWithNewRestartVersion(\n-      String domainResourceName, String namespace) {\n-    String oldVersion = assertDoesNotThrow(\n-        () -> getDomainCustomResource(domainResourceName, namespace).getSpec().getRestartVersion(),\n-        String.format(\"Failed to get the restartVersion of %s in namespace %s\", domainResourceName, namespace));\n-    int newVersion = oldVersion == null ? 1 : Integer.valueOf(oldVersion) + 1;\n-    logger.info(\"Update domain resource {0} in namespace {1} restartVersion from {2} to {3}\",\n-        domainResourceName, namespace, oldVersion, newVersion);\n-\n-    StringBuffer patchStr = new StringBuffer(\"[{\");\n-    patchStr.append(\" \\\"op\\\": \\\"replace\\\",\")\n-        .append(\" \\\"path\\\": \\\"/spec/restartVersion\\\",\")\n-        .append(\" \\\"value\\\": \\\"\")\n-        .append(newVersion)\n-        .append(\"\\\"\")\n-        .append(\" }]\");\n-\n-    logger.log(Level.INFO, \"Restart version patch string: {0}\", patchStr);\n-    V1Patch patch = new V1Patch(new String(patchStr));\n-    boolean rvPatched = assertDoesNotThrow(() ->\n-            patchDomainCustomResource(domainUid, domainNamespace, patch, \"application/json-patch+json\"),\n-        \"patchDomainCustomResource(restartVersion)  failed \");\n-    assertTrue(rvPatched, \"patchDomainCustomResource(restartVersion) failed\");\n-\n-    return String.valueOf(newVersion);\n-  }\n-\n }\n"}}, {"oid": "a7fa5166328cc2410111235d724d6b6958a5eefc", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a7fa5166328cc2410111235d724d6b6958a5eefc", "message": "Added common utility methods into CommonTestUtils class, refactored the test classes", "committedDate": "2020-05-22T19:55:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyNjcxNQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1670#discussion_r430126715", "bodyText": "Please add this method in TestActions.java class.", "author": "vanajamukkara", "createdAt": "2020-05-26T02:30:39Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java", "diffHunk": "@@ -751,4 +755,58 @@ public static void scaleAndVerifyCluster(String clusterName,\n       }\n     }\n   }\n+\n+  /**\n+   * Get the PodCreationTimestamp of a pod in a namespace.\n+   * \n+   * @param namespace Kubernetes namespace that the domain is hosted\n+   * @param podName name of the pod \n+   * @return PodCreationTimestamp of the pod\n+   */\n+  public static String getPodCreationTime(String namespace, String podName) {\n+    String podCreationTime =\n+        assertDoesNotThrow(() -> getPodCreationTimestamp(namespace, \"\", podName),\n+            String.format(\"Couldn't get PodCreationTimestamp for pod %s\", podName));\n+    assertNotNull(podCreationTime, \"Got null PodCreationTimestamp\");\n+    logger.info(\"PodCreationTimestamp for pod ${0} in namespace ${1} is {2}\",\n+        namespace,\n+        podName,\n+        podCreationTime);\n+    return podCreationTime;\n+  }\n+\n+  /**", "originalCommit": "a7fa5166328cc2410111235d724d6b6958a5eefc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ4MTg0MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1670#discussion_r430481840", "bodyText": "We have already a static method TestActions.getPodCreationTimestamp,  the current convenient utility method uses the same.  By using the utility method we are hiding details of the assertion to be duplicated everywhere.  Some test uses the TestActions.getPodCreationTimestamp directly.", "author": "anpanigr", "createdAt": "2020-05-26T15:02:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyNjcxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ4MzU3Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1670#discussion_r430483572", "bodyText": "Agree for getPodCreationTime. My comment is for patchDomainResourceWithNewRestartVersion method.", "author": "vanajamukkara", "createdAt": "2020-05-26T15:05:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyNjcxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUxMzI3Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1670#discussion_r430513272", "bodyText": "patchDomainResourceWithNewRestartVersion() is a one-off utility used in MII tests only not a commonly used action.", "author": "anpanigr", "createdAt": "2020-05-26T15:41:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyNjcxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUyNDM0MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1670#discussion_r430524341", "bodyText": "yes, it is still an action right. This is similar to patchDomainCustomResource action method. We need to identify the actions over utility methods, otherwise we will have all methods added as utility methods like in old JUnit 4 TestUtils.java class, it will grow big, that's my only concern.", "author": "vanajamukkara", "createdAt": "2020-05-26T15:56:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyNjcxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY4MjIzNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1670#discussion_r430682234", "bodyText": "moved the patchDomainResourceWithNewRestartVersion  into TestAction", "author": "anpanigr", "createdAt": "2020-05-26T20:16:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDEyNjcxNQ=="}], "type": "inlineReview", "revised_code": {"commit": "422f6850c006fbd7e2b2b52e379b979d80ce7c3e", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java\nindex 4d3538423c..6ed8e55967 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/utils/CommonTestUtils.java\n\n@@ -775,38 +771,4 @@ public class CommonTestUtils {\n     return podCreationTime;\n   }\n \n-  /**\n-   * Patch the domain resource with a new restartVersion.\n-   * \n-   * @param domainResourceName name of the domain resource\n-   * @param namespace Kubernetes namespace that the domain is hosted\n-   * @return restartVersion new restartVersion of the domain resource\n-   */\n-  public static String patchDomainResourceWithNewRestartVersion(\n-      String domainResourceName, String namespace) {\n-    String oldVersion = assertDoesNotThrow(\n-        () -> getDomainCustomResource(domainResourceName, namespace).getSpec().getRestartVersion(),\n-        String.format(\"Failed to get the restartVersion of %s in namespace %s\", domainResourceName, namespace));\n-    int newVersion = oldVersion == null ? 1 : Integer.valueOf(oldVersion) + 1;\n-    logger.info(\"Update domain resource {0} in namespace {1} restartVersion from {2} to {3}\",\n-        domainResourceName, namespace, oldVersion, newVersion);\n-\n-    StringBuffer patchStr = new StringBuffer(\"[{\");\n-    patchStr.append(\" \\\"op\\\": \\\"replace\\\",\")\n-        .append(\" \\\"path\\\": \\\"/spec/restartVersion\\\",\")\n-        .append(\" \\\"value\\\": \\\"\")\n-        .append(newVersion)\n-        .append(\"\\\"\")\n-        .append(\" }]\");\n-\n-    logger.log(Level.INFO, \"Restart version patch string: {0}\", patchStr);\n-    V1Patch patch = new V1Patch(new String(patchStr));\n-    boolean rvPatched = assertDoesNotThrow(() ->\n-            patchDomainCustomResource(domainResourceName, namespace, patch, \"application/json-patch+json\"),\n-        \"patchDomainCustomResource(restartVersion)  failed \");\n-    assertTrue(rvPatched, \"patchDomainCustomResource(restartVersion) failed\");\n-\n-    return String.valueOf(newVersion);\n-  }\n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU4ODE4NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1670#discussion_r430588185", "bodyText": "This has to be done right after checkPodReady(adminServerPodName, domainUid, domainNamespace);", "author": "sankarpn", "createdAt": "2020-05-26T17:35:21Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDomainOnPV.java", "diffHunk": "@@ -283,24 +283,24 @@ public void testDomainOnPvUsingWlst() throws IOException {\n     // check admin server pod is ready\n     logger.info(\"Waiting for admin server pod {0} to be ready in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkPodReady(adminServerPodName);\n+    checkPodReady(adminServerPodName, domainUid, domainNamespace);\n \n     // check managed server pods are ready\n     for (int i = 1; i <= replicaCount; i++) {\n       logger.info(\"Wait for managed server pod {0} to be ready in namespace {1}\",\n           managedServerPodNamePrefix + i, domainNamespace);\n-      checkPodReady(managedServerPodNamePrefix + i);\n+      checkPodReady(managedServerPodNamePrefix + i, domainUid, domainNamespace);\n     }\n \n     logger.info(\"Check admin service {0} is created in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkServiceCreated(adminServerPodName);\n+    checkServiceExists(adminServerPodName, domainNamespace);", "originalCommit": "a7fa5166328cc2410111235d724d6b6958a5eefc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU5Njg2MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1670#discussion_r430596860", "bodyText": "done", "author": "anpanigr", "createdAt": "2020-05-26T17:50:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU4ODE4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "d0093d60cdb34725e822606f576a4913658cb3aa", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDomainOnPV.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDomainOnPV.java\nindex 91561edbd0..640620c1d0 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDomainOnPV.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItDomainOnPV.java\n\n@@ -284,6 +284,9 @@ public class ItDomainOnPV implements LoggedTest {\n     logger.info(\"Waiting for admin server pod {0} to be ready in namespace {1}\",\n         adminServerPodName, domainNamespace);\n     checkPodReady(adminServerPodName, domainUid, domainNamespace);\n+    logger.info(\"Check admin service {0} is created in namespace {1}\",\n+        adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);\n \n     // check managed server pods are ready\n     for (int i = 1; i <= replicaCount; i++) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU4ODg0OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1670#discussion_r430588849", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // get the creation time of the admin server pod before patching\n          \n          \n            \n                // get the creation time of the server pods before patching", "author": "sankarpn", "createdAt": "2020-05-26T17:36:31Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiAddCluster.java", "diffHunk": "@@ -302,12 +303,14 @@ public void testAddMiiClusteriWithNoReplica() {\n     String configMapName = \"noreplicaconfigmap\";\n     createClusterConfigMap(configMapName, \"model.config.cluster.yaml\");\n \n-    // get the creation time of the admin server pod before patching\n-    String adminPodCreationTime = getadminPodCreationTime();\n+    LinkedHashMap<String, String> pods = new LinkedHashMap<>();\n \n-    // get the creation time of the managed server pods before patching\n-    List<String> managedServerPodOriginalTimestampList = new ArrayList<>();\n-    managedServerPodOriginalTimestampList = getManagedServerPodTimestampList();\n+    // get the creation time of the admin server pod before patching", "originalCommit": "a7fa5166328cc2410111235d724d6b6958a5eefc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU5NzgwNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1670#discussion_r430597806", "bodyText": "done", "author": "anpanigr", "createdAt": "2020-05-26T17:51:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU4ODg0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "d0093d60cdb34725e822606f576a4913658cb3aa", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiAddCluster.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiAddCluster.java\nindex 2745fd2772..0214824334 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiAddCluster.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiAddCluster.java\n\n@@ -305,7 +304,7 @@ class ItMiiAddCluster implements LoggedTest {\n \n     LinkedHashMap<String, String> pods = new LinkedHashMap<>();\n \n-    // get the creation time of the admin server pod before patching\n+    // get the creation time of the server pods before patching\n     String adminPodCreationTime = getPodCreationTime(domainNamespace, adminServerPodName);\n     pods.put(adminServerPodName, adminPodCreationTime);\n     for (int i = 1; i <= replicaCount; i++) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU5MDg3NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1670#discussion_r430590874", "bodyText": "In all It classes, the service existence check should be done right after admin pod ready check. Otherwise  if there are errors in creating the service the assertion will fail at waiting for managed server to come up when the actual problem was in the service creation of admin server pod.", "author": "sankarpn", "createdAt": "2020-05-26T17:39:53Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/ItMiiConfigMap.java", "diffHunk": "@@ -332,13 +331,13 @@ public void testCreateMiiConfigMapDomain() {\n \n     logger.info(\"Check admin service {0} is created in namespace {1}\",\n         adminServerPodName, domainNamespace);\n-    checkServiceCreated(adminServerPodName, domainNamespace);\n+    checkServiceExists(adminServerPodName, domainNamespace);", "originalCommit": "a7fa5166328cc2410111235d724d6b6958a5eefc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYwMDIyNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1670#discussion_r430600227", "bodyText": "done", "author": "anpanigr", "createdAt": "2020-05-26T17:55:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU5MDg3NA=="}], "type": "inlineReview", "revised_code": null}, {"oid": "d0093d60cdb34725e822606f576a4913658cb3aa", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d0093d60cdb34725e822606f576a4913658cb3aa", "message": "Resolved PR review comments", "committedDate": "2020-05-26T18:33:45Z", "type": "commit"}, {"oid": "422f6850c006fbd7e2b2b52e379b979d80ce7c3e", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/422f6850c006fbd7e2b2b52e379b979d80ce7c3e", "message": "Moved patchDomainResourceWithNewRestartVersion to TestAction classs", "committedDate": "2020-05-26T20:14:08Z", "type": "commit"}, {"oid": "6e548aed683f9a9666418abd0429c7a06ea150c9", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/6e548aed683f9a9666418abd0429c7a06ea150c9", "message": "Merge branch 'develop' of https://github.com/oracle/weblogic-kubernetes-operator into mii-rolrestart", "committedDate": "2020-05-26T20:14:24Z", "type": "commit"}]}