{"pr_number": 1389, "pr_title": "Upgrade Kubernetes Java client to 7.0.0", "pr_createdAt": "2020-01-15T15:33:22Z", "pr_url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1389", "timeline": [{"oid": "b7ef53dca7c655b4d41528f784a82d174dbaeb69", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b7ef53dca7c655b4d41528f784a82d174dbaeb69", "message": "Move to client version 7.0.0", "committedDate": "2019-12-09T20:14:20Z", "type": "commit"}, {"oid": "7ba24d27d5c0eb4773c62be7a4ebe323ca468f6b", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7ba24d27d5c0eb4773c62be7a4ebe323ca468f6b", "message": "Merge remote-tracking branch 'origin/develop' into client-7.0.0", "committedDate": "2020-01-07T22:52:17Z", "type": "commit"}, {"oid": "1be1ba218419c0ac9e35d2821f4916c32b0b1424", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/1be1ba218419c0ac9e35d2821f4916c32b0b1424", "message": "Kubernetes java-client version 7.0.0", "committedDate": "2020-01-14T00:46:44Z", "type": "commit"}, {"oid": "dacfea581189dd4e44400fa1366142ddb8a22e0f", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/dacfea581189dd4e44400fa1366142ddb8a22e0f", "message": "Correct parameter", "committedDate": "2020-01-14T21:42:30Z", "type": "commit"}, {"oid": "5e07b1c7aea4c0aa3b663ed7cfa3dcc29a4a10d0", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5e07b1c7aea4c0aa3b663ed7cfa3dcc29a4a10d0", "message": "Missing copyrights", "committedDate": "2020-01-15T14:16:05Z", "type": "commit"}, {"oid": "3bd69c8ff069302c126e3f6799c8219bc8cb50f7", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3bd69c8ff069302c126e3f6799c8219bc8cb50f7", "message": "Disable unnecessary API client pooling", "committedDate": "2020-01-15T14:36:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk1MTE0MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1389#discussion_r366951140", "bodyText": "I don't support spurious changes like this", "author": "markxnelson", "createdAt": "2020-01-15T15:47:35Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItManagedCoherence.java", "diffHunk": "@@ -221,20 +221,20 @@ public void testCreateCoherenceDomainInImageUsingWlst() throws Exception {\n     LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethodName);\n   }\n \n-  private void createDomainAndDeployApp(Map<String, Object> domainMap, String domainUID) throws Exception {\n+  private void createDomainAndDeployApp(Map<String, Object> domainMap, String domainUid) throws Exception {", "originalCommit": "3bd69c8ff069302c126e3f6799c8219bc8cb50f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk2MTUzMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1389#discussion_r366961533", "bodyText": "Yeah, I fixed the CheckStyle errors.  I'm not sure why these aren't being caught when others commit.  @ddsharpe, any ideas?", "author": "rjeberhard", "createdAt": "2020-01-15T16:04:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk1MTE0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAzMjU3Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1389#discussion_r367032573", "bodyText": "I fully support changes like this.  This is technical debt resolution.  The original code did not meet our coding standard, and is therefore technical debt.  The code was originally allowed in because nobody caught it, and the checkstyle implementation was flawed.", "author": "ddsharpe", "createdAt": "2020-01-15T18:20:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk1MTE0MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk1MTI3Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1389#discussion_r366951276", "bodyText": "spurious", "author": "markxnelson", "createdAt": "2020-01-15T15:47:49Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItOperator.java", "diffHunk": "@@ -355,10 +355,10 @@ public void testOperatorRestUsingCertificateChain() throws Exception {\n     LoggerHelper.getLocal().log(Level.INFO, \"Creating operatorForBackwardCompatibility\");\n     Map<String, Object> operatorMap = createOperatorMap(getNewSuffixCount(),\n               true, testClassName);\n-    Operator operatorForRESTCertChain =\n+    Operator operatorForRestCertChain =", "originalCommit": "3bd69c8ff069302c126e3f6799c8219bc8cb50f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAzMjgwMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1389#discussion_r367032803", "bodyText": "Same, technical debt resolution.  Ok by me.", "author": "ddsharpe", "createdAt": "2020-01-15T18:21:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk1MTI3Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk1MTg3Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1389#discussion_r366951876", "bodyText": "this documentation does not tell me anything more that the variable name did", "author": "markxnelson", "createdAt": "2020-01-15T15:48:44Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/utils/PersistentVolume.java", "diffHunk": "@@ -19,11 +18,11 @@\n   private String dirPath;\n \n   /**\n-   * Create PV directory and k8s pv and pvc for the domain\n+   * Create PV directory and k8s pv and pvc for the domain.\n    *\n-   * @param dirPath\n-   * @param pvMap\n-   * @throws Exception\n+   * @param dirPath directory path", "originalCommit": "3bd69c8ff069302c126e3f6799c8219bc8cb50f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk2MTk2MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1389#discussion_r366961960", "bodyText": "Right... again, this was CheckStyle.  It's a CS issue if you have JavaDoc but without text.", "author": "rjeberhard", "createdAt": "2020-01-15T16:04:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk1MTg3Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk1MzE1Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1389#discussion_r366953157", "bodyText": "this makes me nervous - can you explain more about why we do this?", "author": "markxnelson", "createdAt": "2020-01-15T15:50:50Z", "path": "operator/src/main/java/oracle/kubernetes/operator/builders/WatchBuilder.java", "diffHunk": "@@ -234,21 +237,24 @@ public WatchBuilder withTimeoutSeconds(Integer timeoutSeconds) {\n     @Override\n     public Call apply(ApiClient client, CallParams callParams) {\n       // Ensure that client doesn't time out before call or watch\n-      client.getHttpClient().setReadTimeout(getSocketTimeout(callParams), TimeUnit.SECONDS);\n+      // infinite timeout", "originalCommit": "3bd69c8ff069302c126e3f6799c8219bc8cb50f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk2MjQ3OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1389#discussion_r366962478", "bodyText": "Yes, we've had this behavior for a while.  It's even recommended in the client sample watch.  You don't want the HTTP request timing out underneath a watch that doesn't have any traffic for a long time.", "author": "rjeberhard", "createdAt": "2020-01-15T16:05:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk1MzE1Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk1MzM3NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1389#discussion_r366953374", "bodyText": "this seems to repeat a lot - can this not be refactored?", "author": "markxnelson", "createdAt": "2020-01-15T15:51:13Z", "path": "operator/src/main/java/oracle/kubernetes/operator/builders/WatchBuilder.java", "diffHunk": "@@ -394,21 +411,24 @@ public Call apply(ApiClient client, CallParams callParams) {\n     @Override\n     public Call apply(ApiClient client, CallParams callParams) {\n       // Ensure that client doesn't time out before call or watch\n-      client.getHttpClient().setReadTimeout(getSocketTimeout(callParams), TimeUnit.SECONDS);\n+      // infinite timeout", "originalCommit": "3bd69c8ff069302c126e3f6799c8219bc8cb50f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk1NDM5Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1389#discussion_r366954393", "bodyText": "i would like to see a comment here explaining why - for future generations of developers", "author": "markxnelson", "createdAt": "2020-01-15T15:52:54Z", "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/ClientPool.java", "diffHunk": "@@ -53,7 +58,10 @@ public static ClientPool getInstance() {\n \n   @Override\n   protected ApiClient create() {\n-    return getApiClient();\n+    // disable pooling and always return the same instance", "originalCommit": "3bd69c8ff069302c126e3f6799c8219bc8cb50f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk2Mjg0NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1389#discussion_r366962844", "bodyText": "Can do", "author": "rjeberhard", "createdAt": "2020-01-15T16:06:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk1NDM5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "b94005b0c148b0cbb25a8b13e3913e3dcad86470", "chunk": "diff --git a/operator/src/main/java/oracle/kubernetes/operator/helpers/ClientPool.java b/operator/src/main/java/oracle/kubernetes/operator/helpers/ClientPool.java\nindex 283499457d..028e40bd34 100644\n--- a/operator/src/main/java/oracle/kubernetes/operator/helpers/ClientPool.java\n+++ b/operator/src/main/java/oracle/kubernetes/operator/helpers/ClientPool.java\n\n@@ -58,7 +58,11 @@ public class ClientPool extends Pool<ApiClient> {\n \n   @Override\n   protected ApiClient create() {\n-    // disable pooling and always return the same instance\n+    // We no longer need this connection pooling because OkHttp 3 now supports\n+    // connection pooling within each instance.  Prior to the Kubernetes Java\n+    // client, version 7.0.0, the ApiClient held an instance of the OkHttp 2\n+    // HTTP client, which was single threaded.\n+    // Disable pooling and always return the same instance\n     return instance.updateAndGet(prev -> {\n       return prev != null ? prev : getApiClient();\n     });\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk1NDc0NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1389#discussion_r366954745", "bodyText": "spurious", "author": "markxnelson", "createdAt": "2020-01-15T15:53:29Z", "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/LegalNames.java", "diffHunk": "@@ -125,7 +130,7 @@ public static String toDns1123LegalName(String value) {\n    * @param fieldName Name of the field to be checked\n    * @return true if the value needs to be DNS1123 legal, false otherwise\n    */\n-  public static boolean isDNS1123Required(String fieldName) {\n+  public static boolean isDns1123Required(String fieldName) {", "originalCommit": "3bd69c8ff069302c126e3f6799c8219bc8cb50f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk2OTg2OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1389#discussion_r366969869", "bodyText": "We're generally using String.isNullOrEmpty rather than this combination", "author": "russgold", "createdAt": "2020-01-15T16:18:33Z", "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/LegalNames.java", "diffHunk": "@@ -99,6 +99,11 @@ public static String toDns1123LegalName(String value) {\n       return null;\n     }\n \n+    configuredValue = configuredValue.trim();\n+    if (configuredValue == null || configuredValue.isEmpty()) {\n+      return null;", "originalCommit": "3bd69c8ff069302c126e3f6799c8219bc8cb50f7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b94005b0c148b0cbb25a8b13e3913e3dcad86470", "chunk": "diff --git a/operator/src/main/java/oracle/kubernetes/operator/helpers/LegalNames.java b/operator/src/main/java/oracle/kubernetes/operator/helpers/LegalNames.java\nindex 0abb865253..23f802614b 100644\n--- a/operator/src/main/java/oracle/kubernetes/operator/helpers/LegalNames.java\n+++ b/operator/src/main/java/oracle/kubernetes/operator/helpers/LegalNames.java\n\n@@ -100,7 +101,7 @@ public class LegalNames {\n     }\n \n     configuredValue = configuredValue.trim();\n-    if (configuredValue == null || configuredValue.isEmpty()) {\n+    if (Strings.isNullOrEmpty(configuredValue)) {\n       return null;\n     }\n \n"}}, {"oid": "b94005b0c148b0cbb25a8b13e3913e3dcad86470", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b94005b0c148b0cbb25a8b13e3913e3dcad86470", "message": "Review comments", "committedDate": "2020-01-15T20:44:09Z", "type": "commit"}]}