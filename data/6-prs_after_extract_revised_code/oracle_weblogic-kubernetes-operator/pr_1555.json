{"pr_number": 1555, "pr_title": "Replace java.util.Logger with logging facade", "pr_createdAt": "2020-04-10T20:48:59Z", "pr_url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1555", "timeline": [{"oid": "27b18eda0ef24323be1ed3dea0b2ee51b1146747", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/27b18eda0ef24323be1ed3dea0b2ee51b1146747", "message": "brought LoggingFacade over from main code to replace java.util.Logger", "committedDate": "2020-04-10T20:14:07Z", "type": "commit"}, {"oid": "36b45d00efdfa7a41e074811d54b77f1b6824f80", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/36b45d00efdfa7a41e074811d54b77f1b6824f80", "message": "fixed a couple typos", "committedDate": "2020-04-10T20:43:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk0MjM3NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1555#discussion_r406942374", "bodyText": "spelling - too", "author": "markxnelson", "createdAt": "2020-04-10T20:59:52Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Command.java", "diffHunk": "@@ -39,18 +40,15 @@ private Command params(CommandParams params) {\n   }\n \n   public boolean executeAndVerify() {\n-    logger.info(\"Executing command \" + params.command());\n+    logger.info(\"Executing command {0}\", params.command());\n     try {\n       ExecResult result = ExecCommand.exec(\n           params.command(), \n           params.redirect(),\n           params.env());\n       return result.exitValue() == 0;\n-    } catch (IOException ioe) {\n-      logger.warning(\"Failed too run the command due to \" + ioe.getMessage());\n-      return false;\n-    } catch (InterruptedException ie) {\n-      logger.warning(\"Failed too run the command due to \" + ie.getMessage());\n+    } catch (IOException | InterruptedException ie) {\n+      logger.warning(\"Failed too run the command due to {0}\", ie.getMessage());", "originalCommit": "36b45d00efdfa7a41e074811d54b77f1b6824f80", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "70c48ecd3a541d89ce24a4631352517ac13c76bd", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Command.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Command.java\nindex 9bec9b021d..07f13c1cba 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Command.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Command.java\n\n@@ -48,7 +48,7 @@ public class Command {\n           params.env());\n       return result.exitValue() == 0;\n     } catch (IOException | InterruptedException ie) {\n-      logger.warning(\"Failed too run the command due to {0}\", ie.getMessage());\n+      logger.warning(\"Failed to run the command due to {0}\", ie.getMessage());\n       return false;\n     }\n   }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk0Mjk2Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1555#discussion_r406942967", "bodyText": "i know you didn't touch this, but this seems pretty unreliable - we often see issues with stuck namespaces -- we should strengthen this", "author": "markxnelson", "createdAt": "2020-04-10T21:01:42Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/primitive/Kubernetes.java", "diffHunk": "@@ -351,8 +349,7 @@ public static boolean deleteNamespace(String name) throws ApiException {\n \n     if (response.getObject() != null) {", "originalCommit": "36b45d00efdfa7a41e074811d54b77f1b6824f80", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk3MjU2Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1555#discussion_r406972562", "bodyText": "can we create a JIRA to fix this please?", "author": "markxnelson", "createdAt": "2020-04-10T22:44:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk0Mjk2Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk0MzQyNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1555#discussion_r406943424", "bodyText": "can we make this WKO-TRACE?", "author": "markxnelson", "createdAt": "2020-04-10T21:03:02Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/logging/LoggingFacade.java", "diffHunk": "@@ -0,0 +1,629 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.logging;\n+\n+import java.text.MessageFormat;\n+import java.util.Arrays;\n+import java.util.logging.ConsoleHandler;\n+import java.util.logging.Handler;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/** Centralized logging for the operator. */\n+public class LoggingFacade {\n+\n+  public static final String TRACE = \"OWLS-KO-TRACE: \";", "originalCommit": "36b45d00efdfa7a41e074811d54b77f1b6824f80", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2Nzc1NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1555#discussion_r406967755", "bodyText": "This is a copy of the LoggingFacade object in the main line.  You want to have a different value in this version of the facade than the one in mainline?  But, I do like WKO better than OWLS-KO", "author": "ddsharpe", "createdAt": "2020-04-10T22:24:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk0MzQyNA=="}], "type": "inlineReview", "revised_code": {"commit": "70c48ecd3a541d89ce24a4631352517ac13c76bd", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/logging/LoggingFacade.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/logging/LoggingFacade.java\nindex c0c02a7351..43ea9c1996 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/logging/LoggingFacade.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/logging/LoggingFacade.java\n\n@@ -18,10 +18,12 @@ public class LoggingFacade {\n   private final Logger logger;\n \n   /**\n-   * Construct logging facade.\n-   * @param logger logger\n+   * Use LoggingFactory.getLogger() to get new instances of a LoggingFacade logger.\n+   * LoggingFacade wraps java.util.logging.Logger to provide convenience methods that improve\n+   * and simplify the logging API.\n+   * @param logger a resolved java.util.logging.Logger with bundle\n    */\n-  public LoggingFacade(Logger logger) {\n+  LoggingFacade(Logger logger) {\n     this.logger = logger;\n \n     final Logger parentLogger = Logger.getAnonymousLogger().getParent();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk0MzUyOQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1555#discussion_r406943529", "bodyText": "please improve javadoc", "author": "markxnelson", "createdAt": "2020-04-10T21:03:19Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/logging/LoggingFacade.java", "diffHunk": "@@ -0,0 +1,629 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.logging;\n+\n+import java.text.MessageFormat;\n+import java.util.Arrays;\n+import java.util.logging.ConsoleHandler;\n+import java.util.logging.Handler;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/** Centralized logging for the operator. */\n+public class LoggingFacade {\n+\n+  public static final String TRACE = \"OWLS-KO-TRACE: \";\n+  protected static final String CLASS = LoggingFacade.class.getName();\n+  private final Logger logger;\n+\n+  /**\n+   * Construct logging facade.\n+   * @param logger logger", "originalCommit": "36b45d00efdfa7a41e074811d54b77f1b6824f80", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2Nzg5OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1555#discussion_r406967898", "bodyText": "Not my Javadoc...", "author": "ddsharpe", "createdAt": "2020-04-10T22:25:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk0MzUyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "70c48ecd3a541d89ce24a4631352517ac13c76bd", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/logging/LoggingFacade.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/logging/LoggingFacade.java\nindex c0c02a7351..43ea9c1996 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/logging/LoggingFacade.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/logging/LoggingFacade.java\n\n@@ -18,10 +18,12 @@ public class LoggingFacade {\n   private final Logger logger;\n \n   /**\n-   * Construct logging facade.\n-   * @param logger logger\n+   * Use LoggingFactory.getLogger() to get new instances of a LoggingFacade logger.\n+   * LoggingFacade wraps java.util.logging.Logger to provide convenience methods that improve\n+   * and simplify the logging API.\n+   * @param logger a resolved java.util.logging.Logger with bundle\n    */\n-  public LoggingFacade(Logger logger) {\n+  LoggingFacade(Logger logger) {\n     this.logger = logger;\n \n     final Logger parentLogger = Logger.getAnonymousLogger().getParent();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk0MzcxMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1555#discussion_r406943711", "bodyText": "sage advice", "author": "markxnelson", "createdAt": "2020-04-10T21:03:51Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/logging/LoggingFacade.java", "diffHunk": "@@ -0,0 +1,629 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.logging;\n+\n+import java.text.MessageFormat;\n+import java.util.Arrays;\n+import java.util.logging.ConsoleHandler;\n+import java.util.logging.Handler;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/** Centralized logging for the operator. */\n+public class LoggingFacade {\n+\n+  public static final String TRACE = \"OWLS-KO-TRACE: \";\n+  protected static final String CLASS = LoggingFacade.class.getName();\n+  private final Logger logger;\n+\n+  /**\n+   * Construct logging facade.\n+   * @param logger logger\n+   */\n+  public LoggingFacade(Logger logger) {\n+    this.logger = logger;\n+\n+    final Logger parentLogger = Logger.getAnonymousLogger().getParent();\n+    final Handler[] handlers = parentLogger.getHandlers();\n+    for (final Handler handler : handlers) {\n+      if (handler instanceof ConsoleHandler) {\n+        parentLogger.removeHandler(handler);\n+      }\n+    }\n+\n+    ConsoleHandler handler = new ConsoleHandler();\n+    logger.addHandler(handler);\n+  }\n+\n+  /**\n+   * Converts an array to a loggable string.\n+   *\n+   * @param value the object to log\n+   * @param password true if the value is a password that should not be logged\n+   * @return a loggable string\n+   */\n+  public static Object convertArraysForLogging(Object value, boolean password) {\n+    // Don't log passwords.", "originalCommit": "36b45d00efdfa7a41e074811d54b77f1b6824f80", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "70c48ecd3a541d89ce24a4631352517ac13c76bd", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/logging/LoggingFacade.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/logging/LoggingFacade.java\nindex c0c02a7351..43ea9c1996 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/logging/LoggingFacade.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/logging/LoggingFacade.java\n\n@@ -18,10 +18,12 @@ public class LoggingFacade {\n   private final Logger logger;\n \n   /**\n-   * Construct logging facade.\n-   * @param logger logger\n+   * Use LoggingFactory.getLogger() to get new instances of a LoggingFacade logger.\n+   * LoggingFacade wraps java.util.logging.Logger to provide convenience methods that improve\n+   * and simplify the logging API.\n+   * @param logger a resolved java.util.logging.Logger with bundle\n    */\n-  public LoggingFacade(Logger logger) {\n+  LoggingFacade(Logger logger) {\n     this.logger = logger;\n \n     final Logger parentLogger = Logger.getAnonymousLogger().getParent();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk0NDExMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1555#discussion_r406944113", "bodyText": "this comment looks like it is incorrect", "author": "markxnelson", "createdAt": "2020-04-10T21:05:05Z", "path": "new-integration-tests/src/test/java/oracle/weblogic/kubernetes/logging/LoggingFacade.java", "diffHunk": "@@ -0,0 +1,629 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes.logging;\n+\n+import java.text.MessageFormat;\n+import java.util.Arrays;\n+import java.util.logging.ConsoleHandler;\n+import java.util.logging.Handler;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+/** Centralized logging for the operator. */\n+public class LoggingFacade {\n+\n+  public static final String TRACE = \"OWLS-KO-TRACE: \";\n+  protected static final String CLASS = LoggingFacade.class.getName();\n+  private final Logger logger;\n+\n+  /**\n+   * Construct logging facade.\n+   * @param logger logger\n+   */\n+  public LoggingFacade(Logger logger) {\n+    this.logger = logger;\n+\n+    final Logger parentLogger = Logger.getAnonymousLogger().getParent();\n+    final Handler[] handlers = parentLogger.getHandlers();\n+    for (final Handler handler : handlers) {\n+      if (handler instanceof ConsoleHandler) {\n+        parentLogger.removeHandler(handler);\n+      }\n+    }\n+\n+    ConsoleHandler handler = new ConsoleHandler();\n+    logger.addHandler(handler);\n+  }\n+\n+  /**\n+   * Converts an array to a loggable string.\n+   *\n+   * @param value the object to log\n+   * @param password true if the value is a password that should not be logged\n+   * @return a loggable string\n+   */\n+  public static Object convertArraysForLogging(Object value, boolean password) {\n+    // Don't log passwords.\n+    if (password) {\n+      return \"***\";\n+    }\n+\n+    Object result = value;\n+    if (value != null) {\n+      // Convert any object arrays such as String arrays.\n+      if (Object[].class.isAssignableFrom(value.getClass())) {\n+        Object[] array = Object[].class.cast(value);\n+        result = Arrays.toString(array);\n+      } else if (value.getClass().isArray()) {\n+        // Any other arrays are primitive arrays which must be cast to\n+        // the correct primitive type.\n+        Class<?> type = value.getClass().getComponentType();\n+        if (type == boolean.class) {\n+          result = Arrays.toString((boolean[]) value);\n+        } else if (type == byte.class) {\n+          result = Arrays.toString((byte[]) value);\n+        } else if (type == char.class) {\n+          result = Arrays.toString((char[]) value);\n+        } else if (type == double.class) {\n+          result = Arrays.toString((double[]) value);\n+        } else if (type == float.class) {\n+          result = Arrays.toString((float[]) value);\n+        } else if (type == int.class) {\n+          result = Arrays.toString((int[]) value);\n+        } else if (type == long.class) {\n+          result = Arrays.toString((long[]) value);\n+        } else if (type == short.class) {\n+          result = Arrays.toString((short[]) value);\n+        }\n+      }\n+    }\n+    return result;\n+  }\n+\n+  /**\n+   * Logs a message at the CONFIG level.\n+   *\n+   * @param msg message to log\n+   */\n+  public void config(String msg) {\n+    if (isConfigEnabled()) {\n+      CallerDetails details = inferCaller();\n+      logger.logp(Level.CONFIG, details.clazz, details.method, msg);\n+    }\n+  }\n+\n+  /**\n+   * Logs a message which requires parameters at the CONFIG level.\n+   *\n+   * @param msg message to log\n+   * @param params vararg list of parameters to use when logging the message\n+   */\n+  public void config(String msg, Object... params) {\n+    if (isConfigEnabled()) {\n+      CallerDetails details = inferCaller();\n+      logger.logp(Level.CONFIG, details.clazz, details.method, msg, params);\n+    }\n+  }\n+\n+  /**\n+   * Logs a message which accompanies a Throwable at the CONFIG level.\n+   *\n+   * @param msg the message to log\n+   * @param thrown an Exception to include in the logged message\n+   */\n+  public void config(String msg, Throwable thrown) {\n+    if (isConfigEnabled()) {\n+      CallerDetails details = inferCaller();\n+      logger.logp(Level.CONFIG, details.clazz, details.method, msg, thrown);\n+    }\n+  }\n+\n+  /** Logs a method entry. The calling class and method names will be inferred. */\n+  public void entering() {\n+    if (isFinerEnabled()) {\n+      CallerDetails details = inferCaller();\n+      logger.entering(details.clazz, details.method);\n+    }\n+  }\n+\n+  /**\n+   * Logs a method entry, with a list of arguments of interest. The calling class and method names\n+   * will be inferred. Warning: Depending on the nature of the arguments, it may be required to cast\n+   * those of type String to Object, to ensure that this variant is called as expected, instead of\n+   * one of those referenced below.\n+   *\n+   * @param params varargs list of objects to include in the log message\n+   */\n+  public void entering(Object... params) {\n+    if (isFinerEnabled()) {\n+      CallerDetails details = inferCaller();\n+      logger.entering(details.clazz, details.method, params);\n+    }\n+  }\n+\n+  /** Logs a method exit. The calling class and method names will be inferred. */\n+  public void exiting() {\n+    if (isFinerEnabled()) {\n+      CallerDetails details = inferCaller();\n+      logger.exiting(details.clazz, details.method);\n+    }\n+  }\n+\n+  /**\n+   * Logs a method exit, with a result object. The calling class and method names will be inferred.\n+   *\n+   * @param result object to log which is the result of the method call\n+   */\n+  public void exiting(Object result) {\n+    if (isFinerEnabled()) {\n+      CallerDetails details = inferCaller();\n+      logger.exiting(details.clazz, details.method, result);\n+    }\n+  }\n+\n+  /**\n+   * Logs a message at the FINE level.\n+   *\n+   * @param msg the message to log\n+   */\n+  public void fine(String msg) {\n+    if (isFineEnabled()) {\n+      CallerDetails details = inferCaller();\n+      logger.logp(Level.FINE, details.clazz, details.method, msg);\n+    }\n+  }\n+\n+  /**\n+   * Logs a message which requires parameters at the FINE level.\n+   *\n+   * @param msg the message to log\n+   * @param params varargs list of objects to include in the log message\n+   */\n+  public void fine(String msg, Object... params) {\n+    if (isFineEnabled()) {\n+      CallerDetails details = inferCaller();\n+      logger.logp(Level.FINE, details.clazz, details.method, msg, params);\n+    }\n+  }\n+\n+  /**\n+   * Logs a message which accompanies a Throwable at the FINE level.\n+   *\n+   * @param msg the message to log\n+   * @param thrown an Exception to include in the logged message\n+   */\n+  public void fine(String msg, Throwable thrown) {\n+    if (isFineEnabled()) {\n+      CallerDetails details = inferCaller();\n+      logger.logp(Level.FINE, details.clazz, details.method, msg, thrown);\n+    }\n+  }\n+\n+  /**\n+   * Logs a message at the FINER level.\n+   *\n+   * @param msg the message to log\n+   */\n+  public void finer(String msg) {\n+    if (isFinerEnabled()) {\n+      CallerDetails details = inferCaller();\n+      logger.logp(Level.FINER, details.clazz, details.method, msg);\n+    }\n+  }\n+\n+  /**\n+   * Logs a message which requires parameters at the FINER level.\n+   *\n+   * @param msg the message to log\n+   * @param params varargs list of objects to include in the log message\n+   */\n+  public void finer(String msg, Object... params) {\n+    if (isFinerEnabled()) {\n+      CallerDetails details = inferCaller();\n+      logger.logp(Level.FINER, details.clazz, details.method, msg, params);\n+    }\n+  }\n+\n+  /**\n+   * Logs a message which accompanies a Throwable at the FINER level.\n+   *\n+   * @param msg the message to log\n+   * @param thrown an Exception to include in the logged message\n+   */\n+  public void finer(String msg, Throwable thrown) {\n+    if (isFinerEnabled()) {\n+      CallerDetails details = inferCaller();\n+      logger.logp(Level.FINER, details.clazz, details.method, msg, thrown);\n+    }\n+  }\n+\n+  /**\n+   * Logs a message at the FINEST level.\n+   *\n+   * @param msg the message to log\n+   */\n+  public void finest(String msg) {\n+    if (isFinestEnabled()) {\n+      CallerDetails details = inferCaller();\n+      logger.logp(Level.FINEST, details.clazz, details.method, msg);\n+    }\n+  }\n+\n+  /**\n+   * Logs a message which requires parameters at the FINEST level.\n+   *\n+   * @param msg the message to log\n+   * @param params varargs list of objects to include in the log message\n+   */\n+  public void finest(String msg, Object... params) {\n+    if (isFinestEnabled()) {\n+      CallerDetails details = inferCaller();\n+      logger.logp(Level.FINEST, details.clazz, details.method, msg, params);\n+    }\n+  }\n+\n+  /**\n+   * Logs a message which accompanies a Throwable at the FINEST level.\n+   *\n+   * @param msg the message to log\n+   * @param thrown an Exception to include in the logged message\n+   */\n+  public void finest(String msg, Throwable thrown) {\n+    if (isFinestEnabled()) {\n+      CallerDetails details = inferCaller();\n+      logger.logp(Level.FINEST, details.clazz, details.method, msg, thrown);\n+    }\n+  }\n+\n+  /**\n+   * Returns the level at which the underlying logger operates.\n+   *\n+   * @return a Level object at which logger is operating\n+   */\n+  public Level getLevel() {\n+    return logger.getLevel();\n+  }\n+\n+  /**\n+   * Sets the level at which the underlying Logger operates. This should not be called in the\n+   * general case; levels should be set via OOB configuration (a configuration file exposed by the\n+   * logging implementation, management API, etc).\n+   *\n+   * @param newLevel Level to set\n+   */\n+  public void setLevel(Level newLevel) {\n+    logger.setLevel(newLevel);\n+  }\n+\n+  /**\n+   * Returns the name of the underlying logger.\n+   *\n+   * @return a String with the name of the logger\n+   */\n+  public String getName() {\n+    return logger.getName();\n+  }\n+\n+  /**\n+   * Returns the underlying logger. This should only be used when component code calls others' code,\n+   * and that code requires that we provide it with a Logger.\n+   *\n+   * @return the underlying Logger object\n+   */\n+  public Logger getUnderlyingLogger() {\n+    return logger;\n+  }\n+\n+  /**\n+   * Logs a message at the INFO level.\n+   *\n+   * @param msg the message to log\n+   */\n+  public void info(String msg) {\n+    if (isInfoEnabled()) {\n+      CallerDetails details = inferCaller();\n+      logger.logp(Level.INFO, details.clazz, details.method, msg);\n+    }\n+  }\n+\n+  /**\n+   * Logs a message which requires parameters at the INFO level.\n+   *\n+   * @param msg the message to log\n+   * @param params varargs list of objects to include in the log message\n+   */\n+  public void info(String msg, Object... params) {\n+    if (isInfoEnabled()) {\n+      CallerDetails details = inferCaller();\n+      logger.logp(Level.INFO, details.clazz, details.method, msg, params);\n+    }\n+  }\n+\n+  /**\n+   * Logs a message which accompanies a Throwable at the INFO level.\n+   *\n+   * @param msg the message to log\n+   * @param thrown an Exception to include in the logged message\n+   */\n+  public void info(String msg, Throwable thrown) {\n+    if (isInfoEnabled()) {\n+      CallerDetails details = inferCaller();\n+      logger.logp(Level.INFO, details.clazz, details.method, msg, thrown);\n+    }\n+  }\n+\n+  /**\n+   * Checks if a message at CONFIG level would actually be logged.\n+   *\n+   * @return <code>true</code> if logging at the CONFIG level\n+   */\n+  public boolean isConfigEnabled() {\n+    return logger.isLoggable(Level.CONFIG);\n+  }\n+\n+  /**\n+   * Checks if a message at FINE level would actually be logged.\n+   *\n+   * @return <code>true</code> if logging at the FINE level\n+   */\n+  public boolean isFineEnabled() {\n+    return logger.isLoggable(Level.FINE);\n+  }\n+\n+  /**\n+   * Checks if a message at FINER level would actually be logged.\n+   *\n+   * @return <code>true</code> if logging at the FINER level\n+   */\n+  public boolean isFinerEnabled() {\n+    return logger.isLoggable(Level.FINER);\n+  }\n+\n+  /**\n+   * Checks if a message at FINEST level would actually be logged.\n+   *\n+   * @return <code>true</code> if logging at the FINEST level\n+   */\n+  public boolean isFinestEnabled() {\n+    return logger.isLoggable(Level.FINEST);\n+  }\n+\n+  /**\n+   * Checks if a message at INFO level would actually be logged.\n+   *\n+   * @return <code>true</code> if logging at the INFO level\n+   */\n+  public boolean isInfoEnabled() {\n+    return logger.isLoggable(Level.INFO);\n+  }\n+\n+  /**\n+   * Checks if a message at the provided level would actually be logged.\n+   *\n+   * @param level a Level object to check against\n+   * @return <code>true</code> if logging at the level specified\n+   */\n+  public boolean isLoggable(Level level) {\n+    return logger.isLoggable(level);\n+  }\n+\n+  /**\n+   * Checks if a message at SEVERE level would actually be logged.\n+   *\n+   * @return <code>true</code> if logging at the SEVERE level\n+   */\n+  public boolean isSevereEnabled() {\n+    return logger.isLoggable(Level.SEVERE);\n+  }\n+\n+  /**\n+   * Checks if a message at WARNING level would actually be logged.\n+   *\n+   * @return <code>true</code> if logging at the WARNING level\n+   */\n+  public boolean isWarningEnabled() {\n+    return logger.isLoggable(Level.WARNING);\n+  }\n+\n+  /**\n+   * Logs a message at the requested level. Normally, one of the level-specific methods should be\n+   * used instead.\n+   *\n+   * @param level Level at which log log the message\n+   * @param msg the message to log\n+   */\n+  public void log(Level level, String msg) {\n+    if (isLoggable(level)) {\n+      CallerDetails details = inferCaller();\n+      logger.logp(level, details.clazz, details.method, msg);\n+    }\n+  }\n+\n+  /**\n+   * Logs a message which requires parameters. This replaces the Logger equivalents taking a single\n+   * param or an Object array, and is backward-compatible with them. Calling the per-Level methods\n+   * is preferred, but this is present for completeness.\n+   *\n+   * @param level Level at which log log the message\n+   * @param msg the message to log\n+   * @param params varargs list of objects to include in the log message\n+   * @see Logger#log(java.util.logging.Level, String, Object[])\n+   */\n+  public void log(Level level, String msg, Object... params) {\n+    if (isLoggable(level)) {\n+      CallerDetails details = inferCaller();\n+      logger.logp(level, details.clazz, details.method, msg, params);\n+    }\n+  }\n+\n+  /**\n+   * Logs a message which accompanies a Throwable. Calling equivalent per-Level method is preferred,\n+   * but this is present for completeness.\n+   *\n+   * @param level Level at which log log the message\n+   * @param msg the message to log\n+   * @param thrown an Exception to include in the logged message\n+   */\n+  public void log(Level level, String msg, Throwable thrown) {\n+    if (isLoggable(level)) {\n+      CallerDetails details = inferCaller();\n+      logger.logp(level, details.clazz, details.method, msg, thrown);\n+    }\n+  }\n+\n+  /**\n+   * Logs a message at the SEVERE level.\n+   *\n+   * @param msg the message to log\n+   */\n+  public void severe(String msg) {\n+    if (isSevereEnabled()) {\n+      CallerDetails details = inferCaller();\n+      logger.logp(Level.SEVERE, details.clazz, details.method, msg);\n+    }\n+  }\n+\n+  /**\n+   * Logs a message which requires parameters at the SEVERE level.\n+   *\n+   * @param msg the message to log\n+   * @param params varargs list of objects to include in the log message\n+   */\n+  public void severe(String msg, Object... params) {\n+    if (isSevereEnabled()) {\n+      CallerDetails details = inferCaller();\n+      logger.logp(Level.SEVERE, details.clazz, details.method, msg, params);\n+    }\n+  }\n+\n+  /**\n+   * Logs a message which accompanies a Throwable at the SEVERE level.\n+   *\n+   * @param msg the message to log\n+   * @param thrown an Exception to include in the logged message\n+   */\n+  public void severe(String msg, Throwable thrown) {\n+    if (isSevereEnabled()) {\n+      CallerDetails details = inferCaller();\n+      logger.logp(Level.SEVERE, details.clazz, details.method, msg, thrown);\n+    }\n+  }\n+\n+  /**\n+   * Logs that an exception will be thrown. The calling class and method names will be inferred.\n+   *\n+   * @param pending an Exception to include in the logged message\n+   */\n+  public void throwing(Throwable pending) {\n+    if (isFinerEnabled()) {\n+      CallerDetails details = inferCaller();\n+      logger.throwing(details.clazz, details.method, pending);\n+    }\n+  }\n+\n+  /**\n+   * Logs a message at the WARNING level.\n+   *\n+   * @param msg the message to log\n+   */\n+  public void warning(String msg) {\n+    if (isWarningEnabled()) {\n+      CallerDetails details = inferCaller();\n+      logger.logp(Level.WARNING, details.clazz, details.method, msg);\n+    }\n+  }\n+\n+  /**\n+   * Logs a message which requires parameters at the WARNING level.\n+   *\n+   * @param msg the message to log\n+   * @param params varargs list of objects to include in the log message\n+   */\n+  public void warning(String msg, Object... params) {\n+    if (isWarningEnabled()) {\n+      CallerDetails details = inferCaller();\n+      logger.logp(Level.WARNING, details.clazz, details.method, msg, params);\n+    }\n+  }\n+\n+  /**\n+   * Logs a message which accompanies a Throwable at the WARNING level.\n+   *\n+   * @param msg the message to log\n+   * @param thrown an Exception to include in the logged message\n+   */\n+  public void warning(String msg, Throwable thrown) {\n+    if (isWarningEnabled()) {\n+      CallerDetails details = inferCaller();\n+      logger.logp(Level.WARNING, details.clazz, details.method, msg, thrown);\n+    }\n+  }\n+\n+  /**\n+   * Logs a trace message with the ID FMW-TRACE at the FINER level.\n+   *\n+   * @param msg the message to log\n+   */\n+  public void trace(String msg) {\n+    finer(TRACE + msg);\n+  }\n+\n+  /**\n+   * Logs a trace message with the ID FMW-TRACE at the FINER level.\n+   *\n+   * @param msg the message to log\n+   * @param args parameters to the trace message\n+   */\n+  public void trace(String msg, Object... args) {\n+    finer(TRACE + msg, args);\n+  }\n+\n+  /**\n+   * Returns a formatted message.\n+   *\n+   * @param msg the message to be formatted, which is key to the resource bundle\n+   * @param args parameters to the message\n+   * @return A formatted message\n+   */\n+  public String getFormattedMessage(String msg, Object... args) {\n+    try {\n+      return MessageFormat.format(logger.getResourceBundle().getString(msg), args);\n+    } catch (Exception ex) {\n+      return msg;\n+    }\n+  }\n+\n+  /**\n+   * Obtains caller details, class name and method, to be provided to the actual Logger. This code\n+   * is adapted from ODLLogRecord, which should yield consistency in reporting using PlatformLogger", "originalCommit": "36b45d00efdfa7a41e074811d54b77f1b6824f80", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2ODU0NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1555#discussion_r406968545", "bodyText": "You added it to the code.... You should know.", "author": "ddsharpe", "createdAt": "2020-04-10T22:27:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk0NDExMw=="}], "type": "inlineReview", "revised_code": {"commit": "70c48ecd3a541d89ce24a4631352517ac13c76bd", "chunk": "diff --git a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/logging/LoggingFacade.java b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/logging/LoggingFacade.java\nindex c0c02a7351..43ea9c1996 100644\n--- a/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/logging/LoggingFacade.java\n+++ b/new-integration-tests/src/test/java/oracle/weblogic/kubernetes/logging/LoggingFacade.java\n\n@@ -18,10 +18,12 @@ public class LoggingFacade {\n   private final Logger logger;\n \n   /**\n-   * Construct logging facade.\n-   * @param logger logger\n+   * Use LoggingFactory.getLogger() to get new instances of a LoggingFacade logger.\n+   * LoggingFacade wraps java.util.logging.Logger to provide convenience methods that improve\n+   * and simplify the logging API.\n+   * @param logger a resolved java.util.logging.Logger with bundle\n    */\n-  public LoggingFacade(Logger logger) {\n+  LoggingFacade(Logger logger) {\n     this.logger = logger;\n \n     final Logger parentLogger = Logger.getAnonymousLogger().getParent();\n"}}, {"oid": "70c48ecd3a541d89ce24a4631352517ac13c76bd", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/70c48ecd3a541d89ce24a4631352517ac13c76bd", "message": "Javadoc cleanup per review comments", "committedDate": "2020-04-10T22:39:25Z", "type": "commit"}]}