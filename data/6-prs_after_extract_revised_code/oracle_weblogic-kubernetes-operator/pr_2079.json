{"pr_number": 2079, "pr_title": "Owls 72813 generate events", "pr_createdAt": "2020-11-30T17:49:31Z", "pr_url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2079", "timeline": [{"oid": "716920339e7123eac4861058e646449c62f47f50", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/716920339e7123eac4861058e646449c62f47f50", "message": "generate k8s events for key domain activities", "committedDate": "2020-11-19T14:47:06Z", "type": "commit"}, {"oid": "51557f8f708b1f4c4e6a0c625f5f454c5745ebe4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/51557f8f708b1f4c4e6a0c625f5f454c5745ebe4", "message": "cleanup", "committedDate": "2020-11-19T15:31:01Z", "type": "commit"}, {"oid": "17af30f2f6a5bad2cfc1dc682865f266d1565631", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/17af30f2f6a5bad2cfc1dc682865f266d1565631", "message": "more cleanup", "committedDate": "2020-11-19T19:47:07Z", "type": "commit"}, {"oid": "e587d944d82e40f16c525c858029185e057bbec6", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e587d944d82e40f16c525c858029185e057bbec6", "message": "Merge remote-tracking branch 'origin/develop' into OWLS-72813-generate-events", "committedDate": "2020-11-19T19:49:09Z", "type": "commit"}, {"oid": "e2deda7286b5bd7820dc3d163e1ccf98f8804710", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e2deda7286b5bd7820dc3d163e1ccf98f8804710", "message": "turn on debugging", "committedDate": "2020-11-19T21:39:26Z", "type": "commit"}, {"oid": "1bb7d361987dfd8a4eaf6b5283c326b84c5cd358", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/1bb7d361987dfd8a4eaf6b5283c326b84c5cd358", "message": "work in progress", "committedDate": "2020-11-20T03:30:15Z", "type": "commit"}, {"oid": "a3a64943280d802c6fefa52aca19ae9259e41db6", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a3a64943280d802c6fefa52aca19ae9259e41db6", "message": "refactoring", "committedDate": "2020-11-20T04:43:00Z", "type": "commit"}, {"oid": "0558cb7399872d14d5a3e31bf4519a00a4a21312", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0558cb7399872d14d5a3e31bf4519a00a4a21312", "message": "temporarily disable event component instance", "committedDate": "2020-11-20T05:41:29Z", "type": "commit"}, {"oid": "d8f459b589a31d5a402a63548abde3233f1d52df", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d8f459b589a31d5a402a63548abde3233f1d52df", "message": "disable unit test", "committedDate": "2020-11-20T05:58:14Z", "type": "commit"}, {"oid": "4d45bddee05c227d7b14cd8d0229cfd1d8de7b08", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/4d45bddee05c227d7b14cd8d0229cfd1d8de7b08", "message": "enable unit test", "committedDate": "2020-11-20T06:00:57Z", "type": "commit"}, {"oid": "6f1e45e0c8230aeaa19e042e1df26980c9eafe61", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/6f1e45e0c8230aeaa19e042e1df26980c9eafe61", "message": "work in progress", "committedDate": "2020-11-20T14:41:07Z", "type": "commit"}, {"oid": "329404a2a2c5e6eca79510bba2252980308bfaa8", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/329404a2a2c5e6eca79510bba2252980308bfaa8", "message": "use pod env to pass in operator pod name", "committedDate": "2020-11-20T15:53:05Z", "type": "commit"}, {"oid": "37144d0b50de5e3a9c9afff7a523e01fded4ba27", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/37144d0b50de5e3a9c9afff7a523e01fded4ba27", "message": "cleanup", "committedDate": "2020-11-20T16:48:32Z", "type": "commit"}, {"oid": "f23d3030952f5d83fb88aee7d162e249fd03ac2c", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f23d3030952f5d83fb88aee7d162e249fd03ac2c", "message": "minor fix", "committedDate": "2020-11-20T16:52:33Z", "type": "commit"}, {"oid": "75b86567dbd496371f240c23eef0f49d8270f29e", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/75b86567dbd496371f240c23eef0f49d8270f29e", "message": "add constants", "committedDate": "2020-11-20T18:17:22Z", "type": "commit"}, {"oid": "361dc1c51f247d4d34a3e82c259d8e8bdcd09e29", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/361dc1c51f247d4d34a3e82c259d8e8bdcd09e29", "message": "minor change", "committedDate": "2020-11-20T19:17:16Z", "type": "commit"}, {"oid": "8f02ab5e5415ce26942cf4a6620b4fcfef910aa5", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8f02ab5e5415ce26942cf4a6620b4fcfef910aa5", "message": "use HelmAccess", "committedDate": "2020-11-20T19:31:55Z", "type": "commit"}, {"oid": "cf5197397115d24d83bd2081158bdd87d1617946", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/cf5197397115d24d83bd2081158bdd87d1617946", "message": "use operator as the involved object", "committedDate": "2020-11-20T21:44:15Z", "type": "commit"}, {"oid": "1a2d18350c847218c949dcf3599db95e1514f6d7", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/1a2d18350c847218c949dcf3599db95e1514f6d7", "message": "add unit test case for involved object", "committedDate": "2020-11-20T23:13:04Z", "type": "commit"}, {"oid": "c4b720a801d90d4f8eba6021a05ff3f5df4fc15a", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c4b720a801d90d4f8eba6021a05ff3f5df4fc15a", "message": "minor change", "committedDate": "2020-11-22T00:35:33Z", "type": "commit"}, {"oid": "6f7f3189b1d506ab4b3783d7572417e1a3904850", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/6f7f3189b1d506ab4b3783d7572417e1a3904850", "message": "adjust event as needed", "committedDate": "2020-11-23T17:26:34Z", "type": "commit"}, {"oid": "457eeeaea334c60177e47122ac8253c56c02ba24", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/457eeeaea334c60177e47122ac8253c56c02ba24", "message": "minor change", "committedDate": "2020-11-23T17:27:57Z", "type": "commit"}, {"oid": "393b1ddc007fa3340cc7585bf330b49c2fcd3530", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/393b1ddc007fa3340cc7585bf330b49c2fcd3530", "message": "Merge remote-tracking branch 'origin/develop' into OWLS-72813-generate-events", "committedDate": "2020-11-23T17:28:49Z", "type": "commit"}, {"oid": "43524b8c658ead9543186d491886579930107adf", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/43524b8c658ead9543186d491886579930107adf", "message": "make sure retry event is in place", "committedDate": "2020-11-23T18:51:06Z", "type": "commit"}, {"oid": "73ece642382a7b43e31ddda248823ae99c589e20", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/73ece642382a7b43e31ddda248823ae99c589e20", "message": "fine tune falure retry event", "committedDate": "2020-11-23T20:31:08Z", "type": "commit"}, {"oid": "6a72d6532b4f5f93cba3fd74529f1d7d0e45208e", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/6a72d6532b4f5f93cba3fd74529f1d7d0e45208e", "message": "minor fix", "committedDate": "2020-11-23T20:44:45Z", "type": "commit"}, {"oid": "b15183084547a0d73628c914bab300bd943bde04", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b15183084547a0d73628c914bab300bd943bde04", "message": "refactoring", "committedDate": "2020-11-23T22:57:51Z", "type": "commit"}, {"oid": "75a74f8cfa26fa6b0ab5b0b348e3b758b289a113", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/75a74f8cfa26fa6b0ab5b0b348e3b758b289a113", "message": "minor fix", "committedDate": "2020-11-24T00:16:41Z", "type": "commit"}, {"oid": "36ccbd5e048db620828fe9abed90504cdc023a3a", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/36ccbd5e048db620828fe9abed90504cdc023a3a", "message": "add unit test for action", "committedDate": "2020-11-24T00:31:11Z", "type": "commit"}, {"oid": "fa8c3305c70a7473f3b88233966c4cd4ed360f0e", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/fa8c3305c70a7473f3b88233966c4cd4ed360f0e", "message": "turn off debugging", "committedDate": "2020-11-24T00:37:03Z", "type": "commit"}, {"oid": "5e6738ebacaa4b0733a5f08d3109b010ffd978af", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5e6738ebacaa4b0733a5f08d3109b010ffd978af", "message": "cleanup unit test", "committedDate": "2020-11-24T03:29:28Z", "type": "commit"}, {"oid": "bb7f9eb791c607dc1eedbcad9985de0c75340504", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/bb7f9eb791c607dc1eedbcad9985de0c75340504", "message": "rename method and minor changes", "committedDate": "2020-11-24T22:42:55Z", "type": "commit"}, {"oid": "4d769e1e704a2df6bd2c99ca91b9bf82e3a53483", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/4d769e1e704a2df6bd2c99ca91b9bf82e3a53483", "message": "more refactoring", "committedDate": "2020-11-25T22:07:31Z", "type": "commit"}, {"oid": "0486f5483c31bb9927765b7458295e6abb298a55", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0486f5483c31bb9927765b7458295e6abb298a55", "message": "minor fix", "committedDate": "2020-11-26T02:23:49Z", "type": "commit"}, {"oid": "516e53eddc1a40f002622a30caff9078417dc6a6", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/516e53eddc1a40f002622a30caff9078417dc6a6", "message": "change the event names", "committedDate": "2020-11-30T15:43:42Z", "type": "commit"}, {"oid": "536aee5ee82fe67bdb89c3dc6bd5b7794296c599", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/536aee5ee82fe67bdb89c3dc6bd5b7794296c599", "message": "Merge remote-tracking branch 'origin/develop' into OWLS-72813-generate-events", "committedDate": "2020-11-30T15:55:58Z", "type": "commit"}, {"oid": "5ad38be0d011b2ba591b4022bbccf922f7ecbad8", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5ad38be0d011b2ba591b4022bbccf922f7ecbad8", "message": "add more info to the involved object", "committedDate": "2020-12-01T03:59:32Z", "type": "commit"}, {"oid": "0a409205f2d4164d9cc5a4515a93e3429f255585", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0a409205f2d4164d9cc5a4515a93e3429f255585", "message": "minor cleanup and refactoring", "committedDate": "2020-12-01T15:26:35Z", "type": "commit"}, {"oid": "99ccc4096b0ce116995e51b813f2fee8e51a44ad", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/99ccc4096b0ce116995e51b813f2fee8e51a44ad", "message": "minor change to event name", "committedDate": "2020-12-01T19:30:34Z", "type": "commit"}, {"oid": "4a8f6e03fe9e579979518c69c979eefb7670d858", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/4a8f6e03fe9e579979518c69c979eefb7670d858", "message": "minor fix to the retry count", "committedDate": "2020-12-01T20:04:11Z", "type": "commit"}, {"oid": "190d42bab3c920b9572fa906661081a9e88448db", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/190d42bab3c920b9572fa906661081a9e88448db", "message": "add initial version of the doc", "committedDate": "2020-12-02T19:19:29Z", "type": "commit"}, {"oid": "f641de34bbddfb4eccc7ab9e776fc407ae5e680c", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f641de34bbddfb4eccc7ab9e776fc407ae5e680c", "message": "fine tune the behavior", "committedDate": "2020-12-03T17:56:10Z", "type": "commit"}, {"oid": "fd2ff925556b86c9077769186fbe5bdda614c04d", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/fd2ff925556b86c9077769186fbe5bdda614c04d", "message": "adjustment", "committedDate": "2020-12-04T19:16:39Z", "type": "commit"}, {"oid": "5343dd9fc5896c8bf3766dfe2d100b1a4003164d", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5343dd9fc5896c8bf3766dfe2d100b1a4003164d", "message": "adjust handling of introspector fatal errors", "committedDate": "2020-12-06T21:51:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYyNDQ2MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2079#discussion_r537624460", "bodyText": "Looks like a typo -> EXCEEDE.", "author": "ankedia", "createdAt": "2020-12-07T16:03:43Z", "path": "operator/src/main/java/oracle/kubernetes/operator/DomainStatusUpdater.java", "diffHunk": "@@ -51,10 +53,15 @@\n \n import static oracle.kubernetes.operator.LabelConstants.CLUSTERNAME_LABEL;\n import static oracle.kubernetes.operator.ProcessingConstants.DOMAIN_TOPOLOGY;\n+import static oracle.kubernetes.operator.ProcessingConstants.EXCEEDE_INTROSPECTOR_MAX_RETRY_COUNT_ERROR_MSG;", "originalCommit": "5343dd9fc5896c8bf3766dfe2d100b1a4003164d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYzMTcxNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2079#discussion_r537631716", "bodyText": "good catch. will fix it.", "author": "doxiao", "createdAt": "2020-12-07T16:12:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYyNDQ2MA=="}], "type": "inlineReview", "revised_code": {"commit": "1b7d95c5d157f9293bd1876054eda0732e94e242", "chunk": "diff --git a/operator/src/main/java/oracle/kubernetes/operator/DomainStatusUpdater.java b/operator/src/main/java/oracle/kubernetes/operator/DomainStatusUpdater.java\nindex 4e54e54b82..1c16650459 100644\n--- a/operator/src/main/java/oracle/kubernetes/operator/DomainStatusUpdater.java\n+++ b/operator/src/main/java/oracle/kubernetes/operator/DomainStatusUpdater.java\n\n@@ -53,7 +53,7 @@ import oracle.kubernetes.weblogic.domain.model.ServerStatus;\n \n import static oracle.kubernetes.operator.LabelConstants.CLUSTERNAME_LABEL;\n import static oracle.kubernetes.operator.ProcessingConstants.DOMAIN_TOPOLOGY;\n-import static oracle.kubernetes.operator.ProcessingConstants.EXCEEDE_INTROSPECTOR_MAX_RETRY_COUNT_ERROR_MSG;\n+import static oracle.kubernetes.operator.ProcessingConstants.EXCEEDED_INTROSPECTOR_MAX_RETRY_COUNT_ERROR_MSG;\n import static oracle.kubernetes.operator.ProcessingConstants.FATAL_INTROSPECTOR_ERROR;\n import static oracle.kubernetes.operator.ProcessingConstants.FATAL_INTROSPECTOR_ERROR_MSG;\n import static oracle.kubernetes.operator.ProcessingConstants.SERVER_HEALTH_MAP;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYzMTM5Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2079#discussion_r537631392", "bodyText": "Minor nitpick- The and word is repeated in comment.", "author": "ankedia", "createdAt": "2020-12-07T16:12:15Z", "path": "operator/src/main/java/oracle/kubernetes/operator/DomainStatusUpdater.java", "diffHunk": "@@ -139,13 +174,14 @@ public static Step createAvailableStep(String reason, Step next) {\n   }\n \n   /**\n-   * Asynchronous step to set Domain condition to Failed after an asynchronous call failure.\n+   * Asynchronous step to set Domain condition to Failed after an asynchronous call failure and\n+   * and to generate DOMAIN_PROCESSING_FAILED event.", "originalCommit": "5343dd9fc5896c8bf3766dfe2d100b1a4003164d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a90cd7b819336bda1721862aa4b87bb145b6c3fe", "chunk": "diff --git a/operator/src/main/java/oracle/kubernetes/operator/DomainStatusUpdater.java b/operator/src/main/java/oracle/kubernetes/operator/DomainStatusUpdater.java\nindex 4e54e54b82..35d7a14550 100644\n--- a/operator/src/main/java/oracle/kubernetes/operator/DomainStatusUpdater.java\n+++ b/operator/src/main/java/oracle/kubernetes/operator/DomainStatusUpdater.java\n\n@@ -174,14 +174,14 @@ public class DomainStatusUpdater {\n   }\n \n   /**\n-   * Asynchronous step to set Domain condition to Failed after an asynchronous call failure and\n+   * Asynchronous steps to set Domain condition to Failed after an asynchronous call failure\n    * and to generate DOMAIN_PROCESSING_FAILED event.\n    *\n    * @param callResponse the response from an unrecoverable call\n    * @param next Next step\n    * @return Step\n    */\n-  public static Step createFailedAndEventStep(CallResponse<?> callResponse, Step next) {\n+  public static Step createFailureRelatedSteps(CallResponse<?> callResponse, Step next) {\n     FailureStatusSource failure = UnrecoverableErrorBuilder.fromFailedCall(callResponse);\n \n     LOGGER.severe(MessageKeys.CALL_FAILED, failure.getMessage(), failure.getReason());\n"}}, {"oid": "1b7d95c5d157f9293bd1876054eda0732e94e242", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/1b7d95c5d157f9293bd1876054eda0732e94e242", "message": "fix a typo", "committedDate": "2020-12-07T16:25:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYyMDI3MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2079#discussion_r537620270", "bodyText": "Every call to withEventData appears to create a new EventData instance, using an EventItem. Why not simply pass the event Item and let the withEventData call create the EventData in one place?", "author": "russgold", "createdAt": "2020-12-07T15:58:21Z", "path": "operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java", "diffHunk": "@@ -414,17 +420,26 @@ public void dispatchDomainWatch(Watch.Response<Domain> item) {\n \n   private void handleAddedDomain(Domain domain) {\n     LOGGER.info(MessageKeys.WATCH_DOMAIN, domain.getDomainUid());\n-    createMakeRightOperation(new DomainPresenceInfo(domain)).interrupt().withExplicitRecheck().execute();\n+    createMakeRightOperation(new DomainPresenceInfo(domain))\n+        .interrupt()\n+        .withExplicitRecheck()\n+        .withEventData(new EventData(EventItem.DOMAIN_CREATED))", "originalCommit": "5343dd9fc5896c8bf3766dfe2d100b1a4003164d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY2NDY4Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2079#discussion_r537664683", "bodyText": "Some of the callers provide a message too when they create a new EventData. We'll either need to have a withEventData that takes two parameters, or two signatures -- one with EventItem only and the other with both, or only one with both parameters (then some code paths would have to pass in a null for the second parameter - message).", "author": "doxiao", "createdAt": "2020-12-07T16:55:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYyMDI3MA=="}], "type": "inlineReview", "revised_code": {"commit": "a90cd7b819336bda1721862aa4b87bb145b6c3fe", "chunk": "diff --git a/operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java b/operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java\nindex f948e1495d..ce2ed7724e 100644\n--- a/operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java\n+++ b/operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java\n\n@@ -423,7 +423,7 @@ public class DomainProcessorImpl implements DomainProcessor {\n     createMakeRightOperation(new DomainPresenceInfo(domain))\n         .interrupt()\n         .withExplicitRecheck()\n-        .withEventData(new EventData(EventItem.DOMAIN_CREATED))\n+        .withEventData(EventItem.DOMAIN_CREATED, null)\n         .execute();\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYyMjA3MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2079#discussion_r537622070", "bodyText": "good rename. shouldContinue reads more easily.", "author": "russgold", "createdAt": "2020-12-07T16:00:39Z", "path": "operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java", "diffHunk": "@@ -631,51 +655,30 @@ public boolean wasInspectionRun() {\n       return inspectionRun;\n     }\n \n-    private boolean isShouldContinue() {\n+    private boolean shouldContinue() {", "originalCommit": "5343dd9fc5896c8bf3766dfe2d100b1a4003164d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b7d95c5d157f9293bd1876054eda0732e94e242", "chunk": "diff --git a/operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java b/operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java\nindex f948e1495d..065f58d954 100644\n--- a/operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java\n+++ b/operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java\n\n@@ -665,7 +665,7 @@ public class DomainProcessorImpl implements DomainProcessor {\n       } else if (needReportAbortedEvent()) {\n         return true;\n       } else if (hasExceededRetryCount() && !isImgRestartIntrospectVerChanged(liveInfo, cachedInfo)) {\n-        LOGGER.fine(ProcessingConstants.EXCEEDE_INTROSPECTOR_MAX_RETRY_COUNT_ERROR_MSG);\n+        LOGGER.fine(ProcessingConstants.EXCEEDED_INTROSPECTOR_MAX_RETRY_COUNT_ERROR_MSG);\n         return false;\n       } else if (isFatalIntrospectorError(existingError)) {\n         LOGGER.fine(ProcessingConstants.FATAL_INTROSPECTOR_ERROR_MSG);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYyMzQ4NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2079#discussion_r537623485", "bodyText": "For consistency with similar methods, please use shouldReportAbortedEvent", "author": "russgold", "createdAt": "2020-12-07T16:02:27Z", "path": "operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java", "diffHunk": "@@ -631,51 +655,30 @@ public boolean wasInspectionRun() {\n       return inspectionRun;\n     }\n \n-    private boolean isShouldContinue() {\n+    private boolean shouldContinue() {\n       DomainPresenceInfo cachedInfo = getExistingDomainPresenceInfo(getNamespace(), getDomainUid());\n-      int currentIntrospectFailureRetryCount = Optional.ofNullable(liveInfo)\n-          .map(DomainPresenceInfo::getDomain)\n-          .map(Domain::getStatus)\n-          .map(DomainStatus::getIntrospectJobFailureCount)\n-          .orElse(0);\n-\n-      String existingError = Optional.ofNullable(liveInfo)\n-          .map(DomainPresenceInfo::getDomain)\n-          .map(Domain::getStatus)\n-          .map(DomainStatus::getMessage)\n-          .orElse(null);\n \n-      boolean exceededFailureRetryCount = (currentIntrospectFailureRetryCount\n-          >= DomainPresence.getDomainPresenceFailureRetryMaxCount());\n+      String existingError = getExistingError();\n \n-      boolean isVersionsChanged = isImgRestartIntrospectVerChanged(liveInfo, cachedInfo);\n-\n-      if (cachedInfo == null || cachedInfo.getDomain() == null) {\n+      if (isNewDomain(cachedInfo)) {\n+        return true;\n+      } else if (needReportAbortedEvent()) {", "originalCommit": "5343dd9fc5896c8bf3766dfe2d100b1a4003164d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "1b7d95c5d157f9293bd1876054eda0732e94e242", "chunk": "diff --git a/operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java b/operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java\nindex f948e1495d..065f58d954 100644\n--- a/operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java\n+++ b/operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java\n\n@@ -665,7 +665,7 @@ public class DomainProcessorImpl implements DomainProcessor {\n       } else if (needReportAbortedEvent()) {\n         return true;\n       } else if (hasExceededRetryCount() && !isImgRestartIntrospectVerChanged(liveInfo, cachedInfo)) {\n-        LOGGER.fine(ProcessingConstants.EXCEEDE_INTROSPECTOR_MAX_RETRY_COUNT_ERROR_MSG);\n+        LOGGER.fine(ProcessingConstants.EXCEEDED_INTROSPECTOR_MAX_RETRY_COUNT_ERROR_MSG);\n         return false;\n       } else if (isFatalIntrospectorError(existingError)) {\n         LOGGER.fine(ProcessingConstants.FATAL_INTROSPECTOR_ERROR_MSG);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYyOTkwMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2079#discussion_r537629903", "bodyText": "There is no need to create step as a local variable, here. You could more cleanly simply return the created object. IntelliJ should have made this recommendation (look for the yellow bars on the right margin).\nYou might also consider using Optional. In this case, the entire method would be something like:\nprivate Step getEventStep(final Step next) {\n  return Optional.ofNullable(eventData).map(ed -> Step.chain(createEventStep(ed), next)).orElse(next);\n}", "author": "russgold", "createdAt": "2020-12-07T16:10:23Z", "path": "operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java", "diffHunk": "@@ -706,9 +769,24 @@ private void internalMakeRightDomainPresence() {\n     }\n \n     private StepAndPacket createDomainPlanSteps(Packet packet) {\n+      if (containsAbortedEventData()) {\n+        return new StepAndPacket(Step.chain(createEventStep(eventData), new TailStep()), packet);\n+      }\n+\n       return new StepAndPacket(\n-          createPopulatePacketServerMapsStep(createSteps()),\n-          packet);\n+          getEventStep(Step.chain(createPopulatePacketServerMapsStep(),  createSteps())), packet);\n+    }\n+\n+    private Step getEventStep(Step next) {\n+      if (eventData != null) {\n+        Step step = Step.chain(createEventStep(eventData), next);", "originalCommit": "5343dd9fc5896c8bf3766dfe2d100b1a4003164d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a90cd7b819336bda1721862aa4b87bb145b6c3fe", "chunk": "diff --git a/operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java b/operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java\nindex f948e1495d..ce2ed7724e 100644\n--- a/operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java\n+++ b/operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java\n\n@@ -778,15 +778,11 @@ public class DomainProcessorImpl implements DomainProcessor {\n     }\n \n     private Step getEventStep(Step next) {\n-      if (eventData != null) {\n-        Step step = Step.chain(createEventStep(eventData), next);\n-        return step;\n-      }\n-      return next;\n+      return Optional.ofNullable(eventData).map(ed -> Step.chain(createEventStep(ed), next)).orElse(next);\n     }\n \n     private boolean containsAbortedEventData() {\n-      return eventData != null && eventData.getItem() == DOMAIN_PROCESSING_ABORTED;\n+      return Optional.ofNullable(eventData).map(EventData::isProcessingAbortedEvent).orElse(false);\n     }\n \n     private Domain getDomain() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYzMjQyOA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2079#discussion_r537632428", "bodyText": "Here, too, Optional is designed for cases like this. You could write:\n    return Optional.ofNullable(eventData).map(EventData::isDomainProcessingAborted).orElse(false);\n\nif you added the appropriate method to EventData.", "author": "russgold", "createdAt": "2020-12-07T16:13:39Z", "path": "operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java", "diffHunk": "@@ -706,9 +769,24 @@ private void internalMakeRightDomainPresence() {\n     }\n \n     private StepAndPacket createDomainPlanSteps(Packet packet) {\n+      if (containsAbortedEventData()) {\n+        return new StepAndPacket(Step.chain(createEventStep(eventData), new TailStep()), packet);\n+      }\n+\n       return new StepAndPacket(\n-          createPopulatePacketServerMapsStep(createSteps()),\n-          packet);\n+          getEventStep(Step.chain(createPopulatePacketServerMapsStep(),  createSteps())), packet);\n+    }\n+\n+    private Step getEventStep(Step next) {\n+      if (eventData != null) {\n+        Step step = Step.chain(createEventStep(eventData), next);\n+        return step;\n+      }\n+      return next;\n+    }\n+", "originalCommit": "5343dd9fc5896c8bf3766dfe2d100b1a4003164d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a90cd7b819336bda1721862aa4b87bb145b6c3fe", "chunk": "diff --git a/operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java b/operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java\nindex f948e1495d..ce2ed7724e 100644\n--- a/operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java\n+++ b/operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java\n\n@@ -778,15 +778,11 @@ public class DomainProcessorImpl implements DomainProcessor {\n     }\n \n     private Step getEventStep(Step next) {\n-      if (eventData != null) {\n-        Step step = Step.chain(createEventStep(eventData), next);\n-        return step;\n-      }\n-      return next;\n+      return Optional.ofNullable(eventData).map(ed -> Step.chain(createEventStep(ed), next)).orElse(next);\n     }\n \n     private boolean containsAbortedEventData() {\n-      return eventData != null && eventData.getItem() == DOMAIN_PROCESSING_ABORTED;\n+      return Optional.ofNullable(eventData).map(EventData::isProcessingAbortedEvent).orElse(false);\n     }\n \n     private Domain getDomain() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYzMzI1NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2079#discussion_r537633255", "bodyText": "missing 'I' in the method name.", "author": "russgold", "createdAt": "2020-12-07T16:14:44Z", "path": "operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java", "diffHunk": "@@ -747,53 +825,32 @@ private static boolean isSpecChanged(DomainPresenceInfo liveInfo, DomainPresence\n   }\n \n   private static boolean isImgRestartIntrospectVerChanged(DomainPresenceInfo liveInfo, DomainPresenceInfo cachedInfo) {\n-    String liveIntrospectVersion = Optional.ofNullable(liveInfo)\n-        .map(DomainPresenceInfo::getDomain)\n-        .map(Domain::getSpec)\n-        .map(DomainSpec::getIntrospectVersion)\n-        .orElse(null);\n+    return !Objects.equals(getIntrospectVersion(liveInfo), getIntrospectVersion(cachedInfo))\n+        || !Objects.equals(getRestartVersion(liveInfo), getRestartVersion(cachedInfo))\n+        || !Objects.equals(getntrospectImage(liveInfo), getntrospectImage(cachedInfo));\n+  }\n \n-    String cachedIntropectVersion = Optional.ofNullable(cachedInfo)\n+  private static String getntrospectImage(DomainPresenceInfo info) {", "originalCommit": "5343dd9fc5896c8bf3766dfe2d100b1a4003164d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a90cd7b819336bda1721862aa4b87bb145b6c3fe", "chunk": "diff --git a/operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java b/operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java\nindex f948e1495d..ce2ed7724e 100644\n--- a/operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java\n+++ b/operator/src/main/java/oracle/kubernetes/operator/DomainProcessorImpl.java\n\n@@ -827,10 +823,10 @@ public class DomainProcessorImpl implements DomainProcessor {\n   private static boolean isImgRestartIntrospectVerChanged(DomainPresenceInfo liveInfo, DomainPresenceInfo cachedInfo) {\n     return !Objects.equals(getIntrospectVersion(liveInfo), getIntrospectVersion(cachedInfo))\n         || !Objects.equals(getRestartVersion(liveInfo), getRestartVersion(cachedInfo))\n-        || !Objects.equals(getntrospectImage(liveInfo), getntrospectImage(cachedInfo));\n+        || !Objects.equals(getIntrospectImage(liveInfo), getIntrospectImage(cachedInfo));\n   }\n \n-  private static String getntrospectImage(DomainPresenceInfo info) {\n+  private static String getIntrospectImage(DomainPresenceInfo info) {\n     return Optional.ofNullable(info)\n         .map(DomainPresenceInfo::getDomain)\n         .map(Domain::getSpec)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYzNjEyNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2079#discussion_r537636124", "bodyText": "The name is a bit confusing as \"Failed\" is an adjective and \"EventStep\" is a modified noun. The two are not parallel and should not be connected with \"and.\" I cannot tell the intent. Is it creating a step to report a failure event? If so, perhaps createFailureEventStep would be a better name.\nOr is it necessarily creating two steps? If so, \"Step\" should be plural, assuming that they are closely related.\nIn general, \"and\" in a method name is a warning that the method is doing two things, not just one.", "author": "russgold", "createdAt": "2020-12-07T16:18:32Z", "path": "operator/src/main/java/oracle/kubernetes/operator/DomainStatusUpdater.java", "diffHunk": "@@ -139,13 +174,14 @@ public static Step createAvailableStep(String reason, Step next) {\n   }\n \n   /**\n-   * Asynchronous step to set Domain condition to Failed after an asynchronous call failure.\n+   * Asynchronous step to set Domain condition to Failed after an asynchronous call failure and\n+   * and to generate DOMAIN_PROCESSING_FAILED event.\n    *\n    * @param callResponse the response from an unrecoverable call\n    * @param next Next step\n    * @return Step\n    */\n-  public static Step createFailedStep(CallResponse<?> callResponse, Step next) {\n+  public static Step createFailedAndEventStep(CallResponse<?> callResponse, Step next) {", "originalCommit": "5343dd9fc5896c8bf3766dfe2d100b1a4003164d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyODkyNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2079#discussion_r537828924", "bodyText": "I changed the name to createFailureRelatedSteps.", "author": "doxiao", "createdAt": "2020-12-07T21:00:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYzNjEyNA=="}], "type": "inlineReview", "revised_code": {"commit": "a90cd7b819336bda1721862aa4b87bb145b6c3fe", "chunk": "diff --git a/operator/src/main/java/oracle/kubernetes/operator/DomainStatusUpdater.java b/operator/src/main/java/oracle/kubernetes/operator/DomainStatusUpdater.java\nindex 4e54e54b82..35d7a14550 100644\n--- a/operator/src/main/java/oracle/kubernetes/operator/DomainStatusUpdater.java\n+++ b/operator/src/main/java/oracle/kubernetes/operator/DomainStatusUpdater.java\n\n@@ -174,14 +174,14 @@ public class DomainStatusUpdater {\n   }\n \n   /**\n-   * Asynchronous step to set Domain condition to Failed after an asynchronous call failure and\n+   * Asynchronous steps to set Domain condition to Failed after an asynchronous call failure\n    * and to generate DOMAIN_PROCESSING_FAILED event.\n    *\n    * @param callResponse the response from an unrecoverable call\n    * @param next Next step\n    * @return Step\n    */\n-  public static Step createFailedAndEventStep(CallResponse<?> callResponse, Step next) {\n+  public static Step createFailureRelatedSteps(CallResponse<?> callResponse, Step next) {\n     FailureStatusSource failure = UnrecoverableErrorBuilder.fromFailedCall(callResponse);\n \n     LOGGER.severe(MessageKeys.CALL_FAILED, failure.getMessage(), failure.getReason());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY0MTE5Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2079#discussion_r537641193", "bodyText": "Good use of enums", "author": "russgold", "createdAt": "2020-12-07T16:24:54Z", "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/EventHelper.java", "diffHunk": "@@ -0,0 +1,328 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator.helpers;\n+\n+import java.util.Optional;\n+\n+import io.kubernetes.client.openapi.models.V1Event;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1ObjectReference;\n+import oracle.kubernetes.operator.KubernetesConstants;\n+import oracle.kubernetes.operator.LabelConstants;\n+import oracle.kubernetes.operator.ProcessingConstants;\n+import oracle.kubernetes.operator.logging.LoggingFacade;\n+import oracle.kubernetes.operator.logging.LoggingFactory;\n+import oracle.kubernetes.operator.logging.MessageKeys;\n+import oracle.kubernetes.operator.steps.DefaultResponseStep;\n+import oracle.kubernetes.operator.work.NextAction;\n+import oracle.kubernetes.operator.work.Packet;\n+import oracle.kubernetes.operator.work.Step;\n+import org.joda.time.DateTime;\n+\n+import static oracle.kubernetes.operator.EventConstants.DOMAIN_CHANGED_EVENT;\n+import static oracle.kubernetes.operator.EventConstants.DOMAIN_CHANGED_PATTERN;\n+import static oracle.kubernetes.operator.EventConstants.DOMAIN_CREATED_EVENT;\n+import static oracle.kubernetes.operator.EventConstants.DOMAIN_CREATED_PATTERN;\n+import static oracle.kubernetes.operator.EventConstants.DOMAIN_DELETED_EVENT;\n+import static oracle.kubernetes.operator.EventConstants.DOMAIN_DELETED_PATTERN;\n+import static oracle.kubernetes.operator.EventConstants.DOMAIN_PROCESSING_ABORTED_EVENT;\n+import static oracle.kubernetes.operator.EventConstants.DOMAIN_PROCESSING_ABORTED_PATTERN;\n+import static oracle.kubernetes.operator.EventConstants.DOMAIN_PROCESSING_COMPLETED_EVENT;\n+import static oracle.kubernetes.operator.EventConstants.DOMAIN_PROCESSING_COMPLETED_PATTERN;\n+import static oracle.kubernetes.operator.EventConstants.DOMAIN_PROCESSING_FAILED_EVENT;\n+import static oracle.kubernetes.operator.EventConstants.DOMAIN_PROCESSING_FAILED_PATTERN;\n+import static oracle.kubernetes.operator.EventConstants.DOMAIN_PROCESSING_RETRYING_EVENT;\n+import static oracle.kubernetes.operator.EventConstants.DOMAIN_PROCESSING_RETRYING_PATTERN;\n+import static oracle.kubernetes.operator.EventConstants.DOMAIN_PROCESSING_STARTING_EVENT;\n+import static oracle.kubernetes.operator.EventConstants.DOMAIN_PROCESSING_STARTING_PATTERN;\n+import static oracle.kubernetes.operator.EventConstants.EVENT_NORMAL;\n+import static oracle.kubernetes.operator.EventConstants.EVENT_WARNING;\n+import static oracle.kubernetes.operator.EventConstants.WEBLOGIC_OPERATOR_COMPONENT;\n+import static oracle.kubernetes.operator.helpers.EventHelper.EventItem.DOMAIN_PROCESSING_ABORTED;\n+import static oracle.kubernetes.operator.helpers.EventHelper.EventItem.DOMAIN_PROCESSING_COMPLETED;\n+import static oracle.kubernetes.operator.helpers.EventHelper.EventItem.DOMAIN_PROCESSING_STARTING;\n+import static oracle.kubernetes.operator.helpers.NamespaceHelper.getOperatorPodName;\n+\n+/** A Helper Class for the operator to create Kubernetes Events at the key points in the operator's workflow. */\n+public class EventHelper {\n+  private static final LoggingFacade LOGGER = LoggingFactory.getLogger(\"Operator\", \"Operator\");\n+\n+  /**\n+   * Factory for {@link Step} that asynchronously create an event.\n+   *\n+   * @param eventData event item\n+   * @return Step for creating an event\n+   */\n+  public static Step createEventStep(\n+      EventData eventData) {\n+    return new CreateEventStep(eventData);\n+  }\n+\n+  public static class CreateEventStep extends Step {\n+    private final EventData eventData;\n+\n+    CreateEventStep(EventData eventData) {\n+      this.eventData = eventData;\n+    }\n+\n+    @Override\n+    public NextAction apply(Packet packet) {\n+      if (hasProcessingNotStarted(packet) && (eventData.eventItem == DOMAIN_PROCESSING_COMPLETED)) {\n+        return doNext(packet);\n+      }\n+\n+      if (isDuplicatedStartedEvent(packet)) {\n+        return doNext(packet);\n+      }\n+\n+      LOGGER.fine(MessageKeys.CREATING_EVENT, eventData.eventItem);\n+\n+      packet.put(ProcessingConstants.EVENT_TYPE, eventData.eventItem);\n+\n+      V1Event event = createEvent(packet, eventData);\n+      return doNext(new CallBuilder()\n+              .createEventAsync(\n+                  event.getMetadata().getNamespace(),\n+                  event,\n+                  new DefaultResponseStep<>(getNext())),\n+          packet);\n+\n+    }\n+\n+    private boolean hasNotFailedOrRetried(Packet packet) {\n+      return packet.get(ProcessingConstants.EVENT_TYPE) != EventItem.DOMAIN_PROCESSING_FAILED\n+          && packet.get(ProcessingConstants.EVENT_TYPE) != EventItem.DOMAIN_PROCESSING_RETRYING;\n+    }\n+\n+    private boolean isDuplicatedStartedEvent(Packet packet) {\n+      return eventData.eventItem == EventItem.DOMAIN_PROCESSING_STARTING\n+          && packet.get(ProcessingConstants.EVENT_TYPE) == EventItem.DOMAIN_PROCESSING_STARTING;\n+    }\n+\n+    private boolean hasProcessingNotStarted(Packet packet) {\n+      return packet.get(ProcessingConstants.EVENT_TYPE) != DOMAIN_PROCESSING_STARTING;\n+    }\n+\n+  }\n+\n+  private static V1Event createEvent(\n+      Packet packet,\n+      EventData eventData) {\n+    DomainPresenceInfo info = packet.getSpi(DomainPresenceInfo.class);\n+    return new V1Event()\n+        .metadata(createMetadata(info, eventData.eventItem.getReason()))\n+        .reportingComponent(WEBLOGIC_OPERATOR_COMPONENT)\n+        .reportingInstance(getOperatorPodName())\n+        .lastTimestamp(eventData.eventItem.getLastTimestamp())\n+        .type(eventData.eventItem.getType())\n+        .reason(eventData.eventItem.getReason())\n+        .message(eventData.eventItem.getMessage(info, eventData))\n+        .involvedObject(createInvolvedObject(info));\n+  }\n+\n+  private static V1ObjectReference createInvolvedObject(DomainPresenceInfo info) {\n+    return new V1ObjectReference()\n+        .name(info.getDomainUid())\n+        .namespace(info.getNamespace())\n+        .kind(KubernetesConstants.DOMAIN)\n+        .apiVersion(KubernetesConstants.API_VERSION_WEBLOGIC_ORACLE);\n+  }\n+\n+  private static V1ObjectMeta createMetadata(\n+      DomainPresenceInfo info,\n+      String reason) {\n+    final V1ObjectMeta metadata =\n+        new V1ObjectMeta()\n+            .name(String.format(\"%s.%s.%s\", info.getDomainUid(), reason, System.currentTimeMillis()))\n+            .namespace(info.getNamespace());\n+\n+    metadata\n+        .putLabelsItem(LabelConstants.DOMAINUID_LABEL, info.getDomainUid())\n+        .putLabelsItem(LabelConstants.CREATEDBYOPERATOR_LABEL, \"true\");\n+\n+    return metadata;\n+  }\n+\n+  public enum EventItem {", "originalCommit": "5343dd9fc5896c8bf3766dfe2d100b1a4003164d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a90cd7b819336bda1721862aa4b87bb145b6c3fe", "chunk": "diff --git a/operator/src/main/java/oracle/kubernetes/operator/helpers/EventHelper.java b/operator/src/main/java/oracle/kubernetes/operator/helpers/EventHelper.java\nindex 7198bf63f0..160f87fbd4 100644\n--- a/operator/src/main/java/oracle/kubernetes/operator/helpers/EventHelper.java\n+++ b/operator/src/main/java/oracle/kubernetes/operator/helpers/EventHelper.java\n\n@@ -4,6 +4,7 @@\n package oracle.kubernetes.operator.helpers;\n \n import java.util.Optional;\n+import javax.validation.constraints.NotNull;\n \n import io.kubernetes.client.openapi.models.V1Event;\n import io.kubernetes.client.openapi.models.V1ObjectMeta;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY0Mjg5MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2079#discussion_r537642890", "bodyText": "you can simply use is(true) here. The compiler will do the necessary unboxing.", "author": "russgold", "createdAt": "2020-12-07T16:26:59Z", "path": "operator/src/test/java/oracle/kubernetes/operator/helpers/EventHelperTest.java", "diffHunk": "@@ -0,0 +1,408 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator.helpers;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import com.meterware.simplestub.Memento;\n+import com.meterware.simplestub.StaticStubSupport;\n+import io.kubernetes.client.openapi.models.V1Event;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1ObjectReference;\n+import oracle.kubernetes.operator.DomainProcessorDelegateStub;\n+import oracle.kubernetes.operator.DomainProcessorImpl;\n+import oracle.kubernetes.operator.DomainProcessorTestSetup;\n+import oracle.kubernetes.operator.EventConstants;\n+import oracle.kubernetes.operator.MakeRightDomainOperation;\n+import oracle.kubernetes.operator.helpers.EventHelper.EventData;\n+import oracle.kubernetes.operator.work.Step;\n+import oracle.kubernetes.operator.work.TerminalStep;\n+import oracle.kubernetes.utils.TestUtils;\n+import oracle.kubernetes.weblogic.domain.DomainConfigurator;\n+import oracle.kubernetes.weblogic.domain.DomainConfiguratorFactory;\n+import oracle.kubernetes.weblogic.domain.model.Domain;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static oracle.kubernetes.operator.DomainProcessorTestSetup.NS;\n+import static oracle.kubernetes.operator.DomainProcessorTestSetup.UID;\n+import static oracle.kubernetes.operator.DomainStatusUpdater.createFailedAndEventStep;\n+import static oracle.kubernetes.operator.EventConstants.DOMAIN_CHANGED_PATTERN;\n+import static oracle.kubernetes.operator.EventConstants.DOMAIN_CREATED_PATTERN;\n+import static oracle.kubernetes.operator.EventConstants.DOMAIN_DELETED_PATTERN;\n+import static oracle.kubernetes.operator.EventConstants.DOMAIN_PROCESSING_ABORTED_PATTERN;\n+import static oracle.kubernetes.operator.EventConstants.DOMAIN_PROCESSING_COMPLETED_PATTERN;\n+import static oracle.kubernetes.operator.EventConstants.DOMAIN_PROCESSING_FAILED_EVENT;\n+import static oracle.kubernetes.operator.EventConstants.DOMAIN_PROCESSING_FAILED_PATTERN;\n+import static oracle.kubernetes.operator.EventConstants.DOMAIN_PROCESSING_RETRYING_PATTERN;\n+import static oracle.kubernetes.operator.EventConstants.DOMAIN_PROCESSING_STARTING_EVENT;\n+import static oracle.kubernetes.operator.EventConstants.DOMAIN_PROCESSING_STARTING_PATTERN;\n+import static oracle.kubernetes.operator.EventConstants.WEBLOGIC_OPERATOR_COMPONENT;\n+import static oracle.kubernetes.operator.KubernetesConstants.OPERATOR_NAMESPACE_ENV;\n+import static oracle.kubernetes.operator.KubernetesConstants.OPERATOR_POD_NAME_ENV;\n+import static oracle.kubernetes.operator.ProcessingConstants.JOB_POD_NAME;\n+import static oracle.kubernetes.operator.helpers.EventHelper.EventItem.DOMAIN_CHANGED;\n+import static oracle.kubernetes.operator.helpers.EventHelper.EventItem.DOMAIN_CREATED;\n+import static oracle.kubernetes.operator.helpers.EventHelper.EventItem.DOMAIN_DELETED;\n+import static oracle.kubernetes.operator.helpers.EventHelper.EventItem.DOMAIN_PROCESSING_ABORTED;\n+import static oracle.kubernetes.operator.helpers.EventHelper.EventItem.DOMAIN_PROCESSING_COMPLETED;\n+import static oracle.kubernetes.operator.helpers.EventHelper.EventItem.DOMAIN_PROCESSING_FAILED;\n+import static oracle.kubernetes.operator.helpers.EventHelper.EventItem.DOMAIN_PROCESSING_RETRYING;\n+import static oracle.kubernetes.operator.helpers.EventHelper.EventItem.DOMAIN_PROCESSING_STARTING;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+public class EventHelperTest {\n+  private static final String OPERATOR_POD_NAME = \"my-weblogic-operator-1234\";\n+  private static final String OP_NS = \"operator-namespace\";\n+\n+  private final List<Memento> mementos = new ArrayList<>();\n+  private final KubernetesTestSupport testSupport = new KubernetesTestSupport();\n+  private final DomainProcessorDelegateStub processorDelegate = DomainProcessorDelegateStub.createDelegate(testSupport);\n+  private final DomainProcessorImpl processor = new DomainProcessorImpl(processorDelegate);\n+  private final Domain domain = DomainProcessorTestSetup.createTestDomain();\n+  private final Map<String, Map<String, DomainPresenceInfo>> presenceInfoMap = new HashMap<>();\n+  private final DomainPresenceInfo info = new DomainPresenceInfo(domain);\n+  private final MakeRightDomainOperation makeRightOperation\n+      = processor.createMakeRightOperation(info);\n+  private final String jobPodName = LegalNames.toJobIntrospectorName(UID);\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    mementos.add(TestUtils.silenceOperatorLogger());\n+    mementos.add(testSupport.install());\n+    mementos.add(StaticStubSupport.install(DomainProcessorImpl.class, \"DOMAINS\", presenceInfoMap));\n+    mementos.add(TuningParametersStub.install());\n+    mementos.add(HelmAccessStub.install());\n+\n+    testSupport.addToPacket(JOB_POD_NAME, jobPodName);\n+    testSupport.addDomainPresenceInfo(info);\n+    testSupport.defineResources(domain);\n+    DomainProcessorTestSetup.defineRequiredResources(testSupport);\n+    HelmAccessStub.defineVariable(OPERATOR_NAMESPACE_ENV, OP_NS);\n+    HelmAccessStub.defineVariable(OPERATOR_POD_NAME_ENV, OPERATOR_POD_NAME);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    mementos.forEach(Memento::revert);\n+  }\n+\n+  @Test\n+  public void whenDomainMakeRightCalled_domainProcessingStartedEventCreated() {\n+    makeRightOperation.execute();\n+\n+    assertThat(\"Event DOMAIN_PROCESSING_STARTED\",\n+        containsEvent(getEvents(), DOMAIN_PROCESSING_STARTING_EVENT), is(Boolean.TRUE));\n+  }\n+\n+  @Test\n+  public void whenDomainMakeRightCalled_domainProcessingStartedEventCreatedWithExpectedNamespace() {\n+    makeRightOperation.execute();\n+\n+    assertThat(\"Event DOMAIN_PROCESSING_STARTED message\",\n+        containsEventWithNamespace(getEvents(),\n+            DOMAIN_PROCESSING_STARTING_EVENT),\n+        is(Boolean.TRUE));", "originalCommit": "5343dd9fc5896c8bf3766dfe2d100b1a4003164d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a90cd7b819336bda1721862aa4b87bb145b6c3fe", "chunk": "diff --git a/operator/src/test/java/oracle/kubernetes/operator/helpers/EventHelperTest.java b/operator/src/test/java/oracle/kubernetes/operator/helpers/EventHelperTest.java\nindex 117035e3dc..606a21886e 100644\n--- a/operator/src/test/java/oracle/kubernetes/operator/helpers/EventHelperTest.java\n+++ b/operator/src/test/java/oracle/kubernetes/operator/helpers/EventHelperTest.java\n\n@@ -32,7 +32,7 @@ import org.junit.Test;\n \n import static oracle.kubernetes.operator.DomainProcessorTestSetup.NS;\n import static oracle.kubernetes.operator.DomainProcessorTestSetup.UID;\n-import static oracle.kubernetes.operator.DomainStatusUpdater.createFailedAndEventStep;\n+import static oracle.kubernetes.operator.DomainStatusUpdater.createFailureRelatedSteps;\n import static oracle.kubernetes.operator.EventConstants.DOMAIN_CHANGED_PATTERN;\n import static oracle.kubernetes.operator.EventConstants.DOMAIN_CREATED_PATTERN;\n import static oracle.kubernetes.operator.EventConstants.DOMAIN_DELETED_PATTERN;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY0NTU0Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2079#discussion_r537645542", "bodyText": "Intellij should be warning you here that you are accessing static methods using an instance. Pay attention to its warnings. Once you have changed this to use the preferred syntax for static methods, you can combine some lines to make the method shorter.", "author": "russgold", "createdAt": "2020-12-07T16:30:17Z", "path": "operator/src/test/java/oracle/kubernetes/operator/helpers/EventHelperTest.java", "diffHunk": "@@ -0,0 +1,408 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator.helpers;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import com.meterware.simplestub.Memento;\n+import com.meterware.simplestub.StaticStubSupport;\n+import io.kubernetes.client.openapi.models.V1Event;\n+import io.kubernetes.client.openapi.models.V1ObjectMeta;\n+import io.kubernetes.client.openapi.models.V1ObjectReference;\n+import oracle.kubernetes.operator.DomainProcessorDelegateStub;\n+import oracle.kubernetes.operator.DomainProcessorImpl;\n+import oracle.kubernetes.operator.DomainProcessorTestSetup;\n+import oracle.kubernetes.operator.EventConstants;\n+import oracle.kubernetes.operator.MakeRightDomainOperation;\n+import oracle.kubernetes.operator.helpers.EventHelper.EventData;\n+import oracle.kubernetes.operator.work.Step;\n+import oracle.kubernetes.operator.work.TerminalStep;\n+import oracle.kubernetes.utils.TestUtils;\n+import oracle.kubernetes.weblogic.domain.DomainConfigurator;\n+import oracle.kubernetes.weblogic.domain.DomainConfiguratorFactory;\n+import oracle.kubernetes.weblogic.domain.model.Domain;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static oracle.kubernetes.operator.DomainProcessorTestSetup.NS;\n+import static oracle.kubernetes.operator.DomainProcessorTestSetup.UID;\n+import static oracle.kubernetes.operator.DomainStatusUpdater.createFailedAndEventStep;\n+import static oracle.kubernetes.operator.EventConstants.DOMAIN_CHANGED_PATTERN;\n+import static oracle.kubernetes.operator.EventConstants.DOMAIN_CREATED_PATTERN;\n+import static oracle.kubernetes.operator.EventConstants.DOMAIN_DELETED_PATTERN;\n+import static oracle.kubernetes.operator.EventConstants.DOMAIN_PROCESSING_ABORTED_PATTERN;\n+import static oracle.kubernetes.operator.EventConstants.DOMAIN_PROCESSING_COMPLETED_PATTERN;\n+import static oracle.kubernetes.operator.EventConstants.DOMAIN_PROCESSING_FAILED_EVENT;\n+import static oracle.kubernetes.operator.EventConstants.DOMAIN_PROCESSING_FAILED_PATTERN;\n+import static oracle.kubernetes.operator.EventConstants.DOMAIN_PROCESSING_RETRYING_PATTERN;\n+import static oracle.kubernetes.operator.EventConstants.DOMAIN_PROCESSING_STARTING_EVENT;\n+import static oracle.kubernetes.operator.EventConstants.DOMAIN_PROCESSING_STARTING_PATTERN;\n+import static oracle.kubernetes.operator.EventConstants.WEBLOGIC_OPERATOR_COMPONENT;\n+import static oracle.kubernetes.operator.KubernetesConstants.OPERATOR_NAMESPACE_ENV;\n+import static oracle.kubernetes.operator.KubernetesConstants.OPERATOR_POD_NAME_ENV;\n+import static oracle.kubernetes.operator.ProcessingConstants.JOB_POD_NAME;\n+import static oracle.kubernetes.operator.helpers.EventHelper.EventItem.DOMAIN_CHANGED;\n+import static oracle.kubernetes.operator.helpers.EventHelper.EventItem.DOMAIN_CREATED;\n+import static oracle.kubernetes.operator.helpers.EventHelper.EventItem.DOMAIN_DELETED;\n+import static oracle.kubernetes.operator.helpers.EventHelper.EventItem.DOMAIN_PROCESSING_ABORTED;\n+import static oracle.kubernetes.operator.helpers.EventHelper.EventItem.DOMAIN_PROCESSING_COMPLETED;\n+import static oracle.kubernetes.operator.helpers.EventHelper.EventItem.DOMAIN_PROCESSING_FAILED;\n+import static oracle.kubernetes.operator.helpers.EventHelper.EventItem.DOMAIN_PROCESSING_RETRYING;\n+import static oracle.kubernetes.operator.helpers.EventHelper.EventItem.DOMAIN_PROCESSING_STARTING;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+public class EventHelperTest {\n+  private static final String OPERATOR_POD_NAME = \"my-weblogic-operator-1234\";\n+  private static final String OP_NS = \"operator-namespace\";\n+\n+  private final List<Memento> mementos = new ArrayList<>();\n+  private final KubernetesTestSupport testSupport = new KubernetesTestSupport();\n+  private final DomainProcessorDelegateStub processorDelegate = DomainProcessorDelegateStub.createDelegate(testSupport);\n+  private final DomainProcessorImpl processor = new DomainProcessorImpl(processorDelegate);\n+  private final Domain domain = DomainProcessorTestSetup.createTestDomain();\n+  private final Map<String, Map<String, DomainPresenceInfo>> presenceInfoMap = new HashMap<>();\n+  private final DomainPresenceInfo info = new DomainPresenceInfo(domain);\n+  private final MakeRightDomainOperation makeRightOperation\n+      = processor.createMakeRightOperation(info);\n+  private final String jobPodName = LegalNames.toJobIntrospectorName(UID);\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    mementos.add(TestUtils.silenceOperatorLogger());\n+    mementos.add(testSupport.install());\n+    mementos.add(StaticStubSupport.install(DomainProcessorImpl.class, \"DOMAINS\", presenceInfoMap));\n+    mementos.add(TuningParametersStub.install());\n+    mementos.add(HelmAccessStub.install());\n+\n+    testSupport.addToPacket(JOB_POD_NAME, jobPodName);\n+    testSupport.addDomainPresenceInfo(info);\n+    testSupport.defineResources(domain);\n+    DomainProcessorTestSetup.defineRequiredResources(testSupport);\n+    HelmAccessStub.defineVariable(OPERATOR_NAMESPACE_ENV, OP_NS);\n+    HelmAccessStub.defineVariable(OPERATOR_POD_NAME_ENV, OPERATOR_POD_NAME);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    mementos.forEach(Memento::revert);\n+  }\n+\n+  @Test\n+  public void whenDomainMakeRightCalled_domainProcessingStartedEventCreated() {\n+    makeRightOperation.execute();\n+\n+    assertThat(\"Event DOMAIN_PROCESSING_STARTED\",\n+        containsEvent(getEvents(), DOMAIN_PROCESSING_STARTING_EVENT), is(Boolean.TRUE));\n+  }\n+\n+  @Test\n+  public void whenDomainMakeRightCalled_domainProcessingStartedEventCreatedWithExpectedNamespace() {\n+    makeRightOperation.execute();\n+\n+    assertThat(\"Event DOMAIN_PROCESSING_STARTED message\",\n+        containsEventWithNamespace(getEvents(),\n+            DOMAIN_PROCESSING_STARTING_EVENT),\n+        is(Boolean.TRUE));\n+  }\n+\n+  @Test\n+  public void whenDomainMakeRightCalled_domainProcessingStartedEventCreatedWithExpectedMessage() {\n+    makeRightOperation.execute();\n+\n+    assertThat(\"Event DOMAIN_PROCESSING_STARTED message\",\n+        containsEventWithMessage(getEvents(),\n+            DOMAIN_PROCESSING_STARTING_EVENT,\n+            String.format(DOMAIN_PROCESSING_STARTING_PATTERN, UID)),\n+            is(Boolean.TRUE));\n+  }\n+\n+  @Test\n+  public void whenDomainMakeRightCalled_domainProcessingStartedEventCreatedWithInvolvedObject()\n+      throws Exception {\n+    makeRightOperation.execute();\n+\n+    assertThat(\"Event involved object\",\n+        containsEventWithInvolvedObject(getEvents(), DOMAIN_PROCESSING_STARTING_EVENT, UID, NS),\n+        is(Boolean.TRUE));\n+  }\n+\n+  @Test\n+  public void whenDomainMakeRightCalled_domainProcessingStartedEventCreatedWithReportingComponent()\n+      throws Exception {\n+    makeRightOperation.execute();\n+\n+    assertThat(\"Event reporting component\",\n+        containsEventWithComponent(getEvents(), DOMAIN_PROCESSING_STARTING_EVENT),\n+        is(Boolean.TRUE));\n+  }\n+\n+  @Test\n+  public void whenDomainMakeRightCalled_domainProcessingStartedEventCreatedWithReportingInstance()\n+      throws Exception {\n+    String namespaceFromHelm = NamespaceHelper.getOperatorNamespace();\n+\n+    testSupport.runSteps(\n+        new EventHelper().createEventStep(\n+            new EventData(DOMAIN_PROCESSING_STARTING)\n+        ));\n+\n+    assertThat(\"Operator namespace \",\n+        namespaceFromHelm, equalTo(OP_NS));\n+\n+    assertThat(\"Event reporting instance\",\n+        containsEventWithInstance(getEvents(), DOMAIN_PROCESSING_STARTING_EVENT, OPERATOR_POD_NAME),\n+        is(Boolean.TRUE));\n+  }\n+\n+  @Test\n+  public void whenCreateEventStepCalled_domainProcessingSucceededEventCreated() {\n+    testSupport.runSteps(Step.chain(\n+        new EventHelper().createEventStep(", "originalCommit": "5343dd9fc5896c8bf3766dfe2d100b1a4003164d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a90cd7b819336bda1721862aa4b87bb145b6c3fe", "chunk": "diff --git a/operator/src/test/java/oracle/kubernetes/operator/helpers/EventHelperTest.java b/operator/src/test/java/oracle/kubernetes/operator/helpers/EventHelperTest.java\nindex 117035e3dc..606a21886e 100644\n--- a/operator/src/test/java/oracle/kubernetes/operator/helpers/EventHelperTest.java\n+++ b/operator/src/test/java/oracle/kubernetes/operator/helpers/EventHelperTest.java\n\n@@ -32,7 +32,7 @@ import org.junit.Test;\n \n import static oracle.kubernetes.operator.DomainProcessorTestSetup.NS;\n import static oracle.kubernetes.operator.DomainProcessorTestSetup.UID;\n-import static oracle.kubernetes.operator.DomainStatusUpdater.createFailedAndEventStep;\n+import static oracle.kubernetes.operator.DomainStatusUpdater.createFailureRelatedSteps;\n import static oracle.kubernetes.operator.EventConstants.DOMAIN_CHANGED_PATTERN;\n import static oracle.kubernetes.operator.EventConstants.DOMAIN_CREATED_PATTERN;\n import static oracle.kubernetes.operator.EventConstants.DOMAIN_DELETED_PATTERN;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY3MDI1MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2079#discussion_r537670251", "bodyText": "It looks like this is only called from getActiveDeadlineSeconds() in JobStepContext in same package and can be package protected instead of public.", "author": "ankedia", "createdAt": "2020-12-07T17:02:09Z", "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/DomainPresenceInfo.java", "diffHunk": "@@ -429,7 +429,7 @@ public int incrementAndGetFailureCount() {\n     return retryCount.incrementAndGet();\n   }\n \n-  int getRetryCount() {\n+  public int getRetryCount() {", "originalCommit": "5343dd9fc5896c8bf3766dfe2d100b1a4003164d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a90cd7b819336bda1721862aa4b87bb145b6c3fe", "chunk": "diff --git a/operator/src/main/java/oracle/kubernetes/operator/helpers/DomainPresenceInfo.java b/operator/src/main/java/oracle/kubernetes/operator/helpers/DomainPresenceInfo.java\nindex d6965311ea..231917aa42 100644\n--- a/operator/src/main/java/oracle/kubernetes/operator/helpers/DomainPresenceInfo.java\n+++ b/operator/src/main/java/oracle/kubernetes/operator/helpers/DomainPresenceInfo.java\n\n@@ -429,7 +429,7 @@ public class DomainPresenceInfo {\n     return retryCount.incrementAndGet();\n   }\n \n-  public int getRetryCount() {\n+  int getRetryCount() {\n     return retryCount.get();\n   }\n \n"}}, {"oid": "d742016b2937f2e20caee6da7f795448598f0268", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d742016b2937f2e20caee6da7f795448598f0268", "message": "edits", "committedDate": "2020-12-07T17:57:30Z", "type": "commit"}, {"oid": "a90cd7b819336bda1721862aa4b87bb145b6c3fe", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a90cd7b819336bda1721862aa4b87bb145b6c3fe", "message": "address review comments", "committedDate": "2020-12-07T19:50:08Z", "type": "commit"}, {"oid": "52b9dd5995944044bb14d1831ecef8e6721e1885", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/52b9dd5995944044bb14d1831ecef8e6721e1885", "message": "merge", "committedDate": "2020-12-07T19:56:51Z", "type": "commit"}, {"oid": "e5c3a9d2d8bb892ebda275611ba8a363fb61616b", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e5c3a9d2d8bb892ebda275611ba8a363fb61616b", "message": "minor fix", "committedDate": "2020-12-07T20:43:57Z", "type": "commit"}, {"oid": "64683dc3901791a18746b40e4ea58e323a13fc2c", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/64683dc3901791a18746b40e4ea58e323a13fc2c", "message": "minor doc: add reference to domain eventing in MII debugging doc", "committedDate": "2020-12-08T16:50:48Z", "type": "commit"}, {"oid": "cb9f1fdcfa31c5bc110368204d734b252c2f0276", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/cb9f1fdcfa31c5bc110368204d734b252c2f0276", "message": "Minor doc update", "committedDate": "2020-12-08T17:23:16Z", "type": "commit"}, {"oid": "4cd0c50d57f3138d706e60220f2143df51025edf", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/4cd0c50d57f3138d706e60220f2143df51025edf", "message": "add one more command example in doc", "committedDate": "2020-12-08T18:15:18Z", "type": "commit"}, {"oid": "ed1bc3fc997e621e47ef03d578d86575b8610b04", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ed1bc3fc997e621e47ef03d578d86575b8610b04", "message": "Merge pull request #2091 from oracle/OWLS-72813-minor-doc-update\n\nminor doc: add reference to domain eventing in MII debugging doc", "committedDate": "2020-12-08T18:20:58Z", "type": "commit"}, {"oid": "67bf58b2f53c0979d251016e12cadfd48c735372", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/67bf58b2f53c0979d251016e12cadfd48c735372", "message": "minor doc fix", "committedDate": "2020-12-08T18:30:55Z", "type": "commit"}, {"oid": "84215a523e54f23ad83037fabb7943aee3cb4c5a", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/84215a523e54f23ad83037fabb7943aee3cb4c5a", "message": "Merge branch 'OWLS-72813-generate-events' of https://github.com/oracle/weblogic-kubernetes-operator into OWLS-72813-generate-events", "committedDate": "2020-12-08T18:36:51Z", "type": "commit"}]}