{"pr_number": 2002, "pr_title": "Owls83995 - Sample scripts to shutdown and start a specific managed server/cluster/domain", "pr_createdAt": "2020-10-20T22:18:33Z", "pr_url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2002", "timeline": [{"oid": "e5b1044e1c6f4e1b6f03c7415cd47831caeb5cb1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e5b1044e1c6f4e1b6f03c7415cd47831caeb5cb1", "message": "More changes based on review comments.", "committedDate": "2020-11-04T18:57:36Z", "type": "commit"}, {"oid": "b17410af5db9216b91a2e914ba43e7d42931efc0", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b17410af5db9216b91a2e914ba43e7d42931efc0", "message": "Chnages for latest review comments.", "committedDate": "2020-11-04T19:42:06Z", "type": "commit"}, {"oid": "38d442d172b9395ee42f9f3b6064b276836226a2", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/38d442d172b9395ee42f9f3b6064b276836226a2", "message": "Remove unused action variable and assignments.", "committedDate": "2020-11-04T19:45:47Z", "type": "commit"}, {"oid": "e4bf493c36e213789df96ec5e5aaa053ded34d82", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e4bf493c36e213789df96ec5e5aaa053ded34d82", "message": "Fix the logic to display error when config map not found and return policy without quotes.", "committedDate": "2020-11-04T21:17:18Z", "type": "commit"}, {"oid": "b775210bb752a166d72866d91abcd5c52d738d44", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b775210bb752a166d72866d91abcd5c52d738d44", "message": "Changes for latest review comments.", "committedDate": "2020-11-04T22:03:48Z", "type": "commit"}, {"oid": "c1f109d0c415c668df7229e2282f67a437d75e60", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c1f109d0c415c668df7229e2282f67a437d75e60", "message": "Changes for latest round of review comments.", "committedDate": "2020-11-04T22:50:01Z", "type": "commit"}, {"oid": "2c5ae36c97a39ad655f6e2d14e9488c3304bf949", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/2c5ae36c97a39ad655f6e2d14e9488c3304bf949", "message": "use printError instead of echo", "committedDate": "2020-11-04T23:23:13Z", "type": "commit"}, {"oid": "899073a9d2619e1a2df64be00897885625d90f20", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/899073a9d2619e1a2df64be00897885625d90f20", "message": "Changes to remove integration tests and doc review comments.", "committedDate": "2020-11-05T16:03:59Z", "type": "commit"}, {"oid": "4d6de237ab8886843ad94de6f5e81d9faca70470", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/4d6de237ab8886843ad94de6f5e81d9faca70470", "message": "owls-83995 - Scripts to start/stop a managed server/cluster/domain", "committedDate": "2020-10-20T21:44:29Z", "type": "commit"}, {"oid": "e20b630f9144b047442eda245291a0005caab9cd", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/e20b630f9144b047442eda245291a0005caab9cd", "message": "fix method comments", "committedDate": "2020-10-20T21:55:52Z", "type": "commit"}, {"oid": "7a2b1e3c49f3f8e6e872f5be124ada9faf196b09", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7a2b1e3c49f3f8e6e872f5be124ada9faf196b09", "message": "Minor changes", "committedDate": "2020-10-20T22:11:19Z", "type": "commit"}, {"oid": "cf096af2d9aff28849c2a4e7684c83400bacb64a", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/cf096af2d9aff28849c2a4e7684c83400bacb64a", "message": "Address review comments and fix script comments/usages.", "committedDate": "2020-10-21T13:16:12Z", "type": "commit"}, {"oid": "302a597d3ee2cf9744c27f818496402459648ecf", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/302a597d3ee2cf9744c27f818496402459648ecf", "message": "Added integration tests, made few doc changes based on review comments and minor fix.", "committedDate": "2020-10-22T00:38:54Z", "type": "commit"}, {"oid": "a1346894ee0d4df0858c572abc5bec3e6f8c3b1f", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/a1346894ee0d4df0858c572abc5bec3e6f8c3b1f", "message": "Clarify script usage, updated README file and minor changes.", "committedDate": "2020-10-22T14:01:53Z", "type": "commit"}, {"oid": "97b7fcd21856634cef2e0a5dd3207850509f50dc", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/97b7fcd21856634cef2e0a5dd3207850509f50dc", "message": "Changes to add script usage details", "committedDate": "2020-10-22T15:59:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMxODAwNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2002#discussion_r510318006", "bodyText": "Please change this directory to be different from one used in ItSamples. Otherwise when both these tests are running in parallel one might delete this directory and tests will fail.", "author": "sankarpn", "createdAt": "2020-10-22T16:58:53Z", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItLifecycleSampleScripts.java", "diffHunk": "@@ -0,0 +1,448 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.BASE_IMAGES_REPO_SECRET;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.PV_ROOT;\n+import static oracle.weblogic.kubernetes.TestConstants.WEBLOGIC_IMAGE_TO_USE_IN_SPEC;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WORK_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deletePersistentVolume;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvcExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkClusterReplicaCountMatches;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretForBaseImages;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.replaceStringInFile;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.apache.commons.io.FileUtils.copyDirectory;\n+import static org.apache.commons.io.FileUtils.deleteDirectory;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to domain lifecycle sample scripts.\n+ */\n+@DisplayName(\"Verify the domain lifecycle sample scripts\")\n+@IntegrationTest\n+public class ItLifecycleSampleScripts {\n+\n+  public static final String SERVER_LIFECYCLE = \"Server\";\n+  public static final String CLUSTER_LIFECYCLE = \"Cluster\";\n+  public static final String DOMAIN = \"DOMAIN\";\n+  public static final String STOP_SERVER_SCRIPT = \"stopServer.sh\";\n+  public static final String START_SERVER_SCRIPT = \"startServer.sh\";\n+  public static final String STOP_CLUSTER_SCRIPT = \"stopCluster.sh\";\n+  public static final String START_CLUSTER_SCRIPT = \"startCluster.sh\";\n+  public static final String STOP_DOMAIN_SCRIPT = \"stopDomain.sh\";\n+  public static final String START_DOMAIN_SCRIPT = \"startDomain.sh\";\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static String domainName = \"domain1\";\n+  private final int replicaCount = 2;\n+  private final String clusterName = \"cluster-1\";\n+  private final String adminServerName = \"admin-server\";\n+  private final String managedServerNameBase = \"managed-server\";\n+\n+  private final String adminServerPodName = domainName + \"-\" + adminServerName;\n+  private final String managedServerPodNamePrefix = domainName + \"-\" + managedServerNameBase;\n+  private final Path samplePath = Paths.get(ITTESTS_DIR, \"../kubernetes/samples\");\n+  private final Path domainLifecycleSamplePath = Paths.get(samplePath + \"/scripts/domain-lifecycle\");\n+  private final Path tempSamplePath = Paths.get(WORK_DIR, \"sample-testing\");", "originalCommit": "97b7fcd21856634cef2e0a5dd3207850509f50dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM2OTY5MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2002#discussion_r510369690", "bodyText": "I have changed the directory to lifecycle-scripts-testing. Thanks.", "author": "ankedia", "createdAt": "2020-10-22T18:25:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMxODAwNg=="}], "type": "inlineReview", "revised_code": {"commit": "e5b1044e1c6f4e1b6f03c7415cd47831caeb5cb1", "chunk": "diff --git a/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItLifecycleSampleScripts.java b/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSamples.java\nsimilarity index 80%\nrename from integration-tests/src/test/java/oracle/weblogic/kubernetes/ItLifecycleSampleScripts.java\nrename to integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSamples.java\nindex a13e07279e..c5729140c7 100644\n--- a/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItLifecycleSampleScripts.java\n+++ b/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSamples.java\n\n@@ -16,9 +16,10 @@ import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n import oracle.weblogic.kubernetes.annotations.Namespaces;\n import oracle.weblogic.kubernetes.logging.LoggingFacade;\n import org.awaitility.core.ConditionFactory;\n-import org.junit.jupiter.api.AfterAll;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n import org.junit.jupiter.params.ParameterizedTest;\n import org.junit.jupiter.params.provider.MethodSource;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMxOTc4OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2002#discussion_r510319788", "bodyText": "There is only 1 domain created in this test", "author": "sankarpn", "createdAt": "2020-10-22T17:01:39Z", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItLifecycleSampleScripts.java", "diffHunk": "@@ -0,0 +1,448 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.BASE_IMAGES_REPO_SECRET;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.PV_ROOT;\n+import static oracle.weblogic.kubernetes.TestConstants.WEBLOGIC_IMAGE_TO_USE_IN_SPEC;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WORK_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deletePersistentVolume;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvcExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkClusterReplicaCountMatches;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretForBaseImages;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.replaceStringInFile;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.apache.commons.io.FileUtils.copyDirectory;\n+import static org.apache.commons.io.FileUtils.deleteDirectory;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to domain lifecycle sample scripts.\n+ */\n+@DisplayName(\"Verify the domain lifecycle sample scripts\")\n+@IntegrationTest\n+public class ItLifecycleSampleScripts {\n+\n+  public static final String SERVER_LIFECYCLE = \"Server\";\n+  public static final String CLUSTER_LIFECYCLE = \"Cluster\";\n+  public static final String DOMAIN = \"DOMAIN\";\n+  public static final String STOP_SERVER_SCRIPT = \"stopServer.sh\";\n+  public static final String START_SERVER_SCRIPT = \"startServer.sh\";\n+  public static final String STOP_CLUSTER_SCRIPT = \"stopCluster.sh\";\n+  public static final String START_CLUSTER_SCRIPT = \"startCluster.sh\";\n+  public static final String STOP_DOMAIN_SCRIPT = \"stopDomain.sh\";\n+  public static final String START_DOMAIN_SCRIPT = \"startDomain.sh\";\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static String domainName = \"domain1\";\n+  private final int replicaCount = 2;\n+  private final String clusterName = \"cluster-1\";\n+  private final String adminServerName = \"admin-server\";\n+  private final String managedServerNameBase = \"managed-server\";\n+\n+  private final String adminServerPodName = domainName + \"-\" + adminServerName;\n+  private final String managedServerPodNamePrefix = domainName + \"-\" + managedServerNameBase;\n+  private final Path samplePath = Paths.get(ITTESTS_DIR, \"../kubernetes/samples\");\n+  private final Path domainLifecycleSamplePath = Paths.get(samplePath + \"/scripts/domain-lifecycle\");\n+  private final Path tempSamplePath = Paths.get(WORK_DIR, \"sample-testing\");\n+  private final Path sampleBase =\n+          Paths.get(tempSamplePath.toString(), \"scripts/create-weblogic-domain/domain-home-on-pv\");\n+\n+  private static final String[] params = {\"wlst:domain1\"};\n+\n+  // create standard, reusable retry/backoff policy\n+  private static final ConditionFactory withStandardRetryPolicy\n+      = with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(10, MINUTES).await();\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Assigns unique namespaces for operator and domains and installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace is null\");\n+    opNamespace = namespaces.get(0);\n+    logger.info(\"Assign a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // create pull secrets for WebLogic image when running in non Kind Kubernetes cluster\n+    // this secret is used only for non-kind cluster\n+    createSecretForBaseImages(domainNamespace);\n+\n+    // install operator and verify its running in ready state\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    //create and start WebLogic domain using domain-home-on-pv sample scripts\n+    createDomain(sampleBase);\n+  }\n+\n+  /**\n+   * Test scripts for stopping and starting a managed server.\n+   */\n+  @ParameterizedTest\n+  @MethodSource(\"paramProvider\")\n+  @DisplayName(\"Test server lifecycle samples scripts\")\n+  public void testServerLifecycleScripts() {\n+\n+    // Verify that stopServer script execution shuts down server pod and replica count is decremented\n+    String serverName = managedServerNameBase + \"1\";\n+    executeLifecycleScript(STOP_SERVER_SCRIPT, SERVER_LIFECYCLE, serverName);\n+    checkPodDoesNotExist(managedServerPodNamePrefix + \"1\", domainName, domainNamespace);\n+    assertDoesNotThrow(() -> {\n+      checkClusterReplicaCountMatches(clusterName, domainName, domainNamespace, 1);\n+    });\n+\n+    // Verify that startServer script execution starts server pod and replica count is incremented\n+    executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, serverName);\n+    checkPodExists(managedServerPodNamePrefix + \"1\", domainName, domainNamespace);\n+    assertDoesNotThrow(() -> {\n+      checkClusterReplicaCountMatches(clusterName, domainName, domainNamespace, 2);\n+    });\n+  }\n+\n+  /**\n+   * Test scripts for stopping and starting a managed server while keeping replica count constant.\n+   */\n+  @ParameterizedTest\n+  @MethodSource(\"paramProvider\")\n+  @DisplayName(\"Test server lifecycle samples scripts with constant replica count\")\n+  public void testServerLifecycleScriptsWithConstantReplicaCount() {\n+    String serverName = managedServerNameBase + \"1\";\n+    String keepReplicaCountConstantParameter = \"-k\";\n+    // Verify that replica count is not changed when using \"-k\" parameter and a replacement server is started\n+    executeLifecycleScript(STOP_SERVER_SCRIPT, SERVER_LIFECYCLE, serverName, keepReplicaCountConstantParameter);\n+    checkPodDoesNotExist(managedServerPodNamePrefix + \"1\", domainName, domainNamespace);\n+    checkPodExists(managedServerPodNamePrefix + \"3\", domainName, domainNamespace);\n+    assertDoesNotThrow(() -> {\n+      checkClusterReplicaCountMatches(clusterName, domainName, domainNamespace, 2);\n+    });\n+\n+    // Verify that replica count is not changed when using \"-k\" parameter and replacement server is shutdown\n+    executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, serverName, keepReplicaCountConstantParameter);\n+    checkPodExists(managedServerPodNamePrefix + \"1\", domainName, domainNamespace);\n+    checkPodDoesNotExist(managedServerPodNamePrefix + \"3\", domainName, domainNamespace);\n+    assertDoesNotThrow(() -> {\n+      checkClusterReplicaCountMatches(clusterName, domainName, domainNamespace, 2);\n+    });\n+  }\n+\n+  /**\n+   * Test scripts for stopping and starting a cluster.\n+   */\n+  @ParameterizedTest\n+  @MethodSource(\"paramProvider\")\n+  @DisplayName(\"Test cluster lifecycle scripts\")\n+  public void testClusterLifecycleScripts() {\n+\n+    // Verify all clustered server pods are shut down after stopCluster script execution\n+    executeLifecycleScript(STOP_CLUSTER_SCRIPT, CLUSTER_LIFECYCLE, clusterName);\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodDoesNotExist(managedServerPodNamePrefix + i, domainName, domainNamespace);\n+    }\n+\n+    // Verify all clustered server pods are started after startCluster script execution\n+    executeLifecycleScript(START_CLUSTER_SCRIPT, CLUSTER_LIFECYCLE, clusterName);\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodExists(managedServerPodNamePrefix + i, domainName, domainNamespace);\n+    }\n+  }\n+\n+  /**\n+   * Test scripts for stopping and starting a domain.\n+   */\n+  @ParameterizedTest\n+  @MethodSource(\"paramProvider\")\n+  @DisplayName(\"Test domain lifecycle scripts\")\n+  public void testDomainLifecycleScripts() {\n+    // Verify all WebLogic server instance pods are shut down after stopDomain script execution\n+    executeLifecycleScript(STOP_DOMAIN_SCRIPT, DOMAIN, null);\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodDoesNotExist(managedServerPodNamePrefix + i, domainName, domainNamespace);\n+    }\n+    checkPodDoesNotExist(adminServerPodName, domainName, domainNamespace);\n+\n+    // Verify all WebLogic server instance pods are started after startDomain script execution\n+    executeLifecycleScript(START_DOMAIN_SCRIPT, DOMAIN, null);\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodExists(managedServerPodNamePrefix + i, domainName, domainNamespace);\n+    }\n+    checkPodExists(adminServerPodName, domainName, domainNamespace);\n+  }\n+\n+  // Function to execute domain lifecyle scripts\n+  private void executeLifecycleScript(String script, String scriptType, String entityName) {\n+    executeLifecycleScript(script, scriptType, entityName, \"\");\n+  }\n+\n+  // Function to execute domain lifecyle scripts\n+  private void executeLifecycleScript(String script, String scriptType, String entityName, String extraParams) {\n+    CommandParams params;\n+    boolean result;\n+    String commonParameters = \" -d \" + domainName + \" -n \" + domainNamespace;\n+    params = new CommandParams().defaults();\n+    if (scriptType.equals(SERVER_LIFECYCLE)) {\n+      params.command(\"sh \"\n+              + Paths.get(domainLifecycleSamplePath.toString(), \"/\" + script).toString()\n+              + commonParameters + \" -s \" + entityName + \" \" + extraParams);\n+    } else if (scriptType.equals(CLUSTER_LIFECYCLE)) {\n+      params.command(\"sh \"\n+              + Paths.get(domainLifecycleSamplePath.toString(), \"/\" + script).toString()\n+              + commonParameters + \" -c \" + entityName);\n+    } else {\n+      params.command(\"sh \"\n+              + Paths.get(domainLifecycleSamplePath.toString(), \"/\" + script).toString()\n+              + commonParameters);\n+    }\n+    result = Command.withParams(params).execute();\n+    assertTrue(result, \"Failed to execute script \" + script);\n+  }\n+\n+  // generates the stream of objects used by parametrized test.\n+  private static Stream<String> paramProvider() {\n+    return Arrays.stream(params);\n+  }\n+\n+  // Create domain using doamain-home-on-pv sample script and verify admin/managed pods are ready\n+  private void createDomain(Path sampleBase) {\n+    //copy the samples directory to a temporary location\n+    setupSample();\n+    //create PV and PVC used by the domain\n+    createPvPvc(domainName);\n+\n+    //create WebLogic secrets for the domain\n+    createSecretWithUsernamePassword(domainName + \"-weblogic-credentials\", domainNamespace,\n+            ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n+\n+    // change namespace from default to custom, set wlst or wdt, domain name, and t3PublicAddress\n+    assertDoesNotThrow(() -> {\n+      replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n+              \"namespace: default\", \"namespace: \" + domainNamespace);\n+      replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n+              \"#t3PublicAddress:\", \"t3PublicAddress: \" + K8S_NODEPORT_HOST);\n+      replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n+              \"image: container-registry.oracle.com/middleware/weblogic:12.2.1.4\",\n+              \"image: \" + WEBLOGIC_IMAGE_TO_USE_IN_SPEC);\n+      replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n+              \"#imagePullSecretName:\", \"imagePullSecretName: \" + BASE_IMAGES_REPO_SECRET);\n+    });\n+\n+    // run create-domain.sh to create domain.yaml file\n+    CommandParams params = new CommandParams().defaults();\n+    params.command(\"sh \"\n+            + Paths.get(sampleBase.toString(), \"create-domain.sh\").toString()\n+            + \" -i \" + Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString()\n+            + \" -o \"\n+            + Paths.get(sampleBase.toString()));\n+\n+    boolean result = Command.withParams(params).execute();\n+    assertTrue(result, \"Failed to create domain.yaml\");\n+\n+    // run kubectl to create the domain\n+    params = new CommandParams().defaults();\n+    params.command(\"kubectl apply -f \"\n+            + Paths.get(sampleBase.toString(), \"weblogic-domains/\" + domainName + \"/domain.yaml\").toString());\n+\n+    result = Command.withParams(params).execute();\n+    assertTrue(result, \"Failed to create domain custom resource\");\n+\n+    // wait for the domain to exist\n+    logger.info(\"Checking for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+              .conditionEvaluationListener(\n+                  condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                                  + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                            domainName,\n+                            domainNamespace,\n+                            condition.getElapsedTimeInMS(),\n+                            condition.getRemainingTimeInMS()))\n+              .until(domainExists(domainName, DOMAIN_VERSION, domainNamespace));\n+\n+    // verify the admin server service and pod is created\n+    checkPodReadyAndServiceExists(adminServerPodName, domainName, domainNamespace);\n+\n+    // verify managed server services created and pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodReadyAndServiceExists(managedServerPodNamePrefix + i, domainName, domainNamespace);\n+    }\n+\n+  }\n+\n+  // copy samples directory to a temporary location\n+  private void setupSample() {\n+    assertDoesNotThrow(() -> {\n+      // copy ITTESTS_DIR + \"../kubernates/samples\" to WORK_DIR + \"/sample-testing\"\n+      logger.info(\"Deleting and recreating {0}\", tempSamplePath);\n+      Files.createDirectories(tempSamplePath);\n+      deleteDirectory(tempSamplePath.toFile());\n+      Files.createDirectories(tempSamplePath);\n+\n+      logger.info(\"Copying {0} to {1}\", samplePath, tempSamplePath);\n+      copyDirectory(samplePath.toFile(), tempSamplePath.toFile());\n+    });\n+  }\n+\n+  // create persistent volume and persistent volume claims used by the samples\n+  private void createPvPvc(String domainName) {\n+\n+    String pvName = domainName + \"-weblogic-sample-pv\";\n+    String pvcName = domainName + \"-weblogic-sample-pvc\";\n+\n+    Path pvpvcBase = Paths.get(tempSamplePath.toString(),\n+        \"scripts/create-weblogic-domain-pv-pvc\");\n+\n+    // create pv and pvc\n+    assertDoesNotThrow(() -> {\n+      // when tests are running in local box the PV directories need to exist\n+      Path pvHostPath = null;\n+      pvHostPath = Files.createDirectories(Paths.get(PV_ROOT, this.getClass().getSimpleName(), pvName));\n+\n+      logger.info(\"Creating PV directory host path {0}\", pvHostPath);\n+      deleteDirectory(pvHostPath.toFile());\n+      Files.createDirectories(pvHostPath);\n+\n+      // set the pvHostPath in create-pv-pvc-inputs.yaml\n+      replaceStringInFile(Paths.get(pvpvcBase.toString(), \"create-pv-pvc-inputs.yaml\").toString(),\n+          \"#weblogicDomainStoragePath: /scratch/k8s_dir\", \"weblogicDomainStoragePath: \" + pvHostPath);\n+      // set the namespace in create-pv-pvc-inputs.yaml\n+      replaceStringInFile(Paths.get(pvpvcBase.toString(), \"create-pv-pvc-inputs.yaml\").toString(),\n+          \"namespace: default\", \"namespace: \" + domainNamespace);\n+      // set the baseName to domain name in create-pv-pvc-inputs.yaml\n+      replaceStringInFile(Paths.get(pvpvcBase.toString(), \"create-pv-pvc-inputs.yaml\").toString(),\n+          \"baseName: weblogic-sample\", \"baseName: \" + domainName + \"-weblogic-sample\");\n+      // set the pv storage policy to Recycle in create-pv-pvc-inputs.yaml\n+      replaceStringInFile(Paths.get(pvpvcBase.toString(), \"create-pv-pvc-inputs.yaml\").toString(),\n+          \"weblogicDomainStorageReclaimPolicy: Retain\", \"weblogicDomainStorageReclaimPolicy: Recycle\");\n+    });\n+\n+    // generate the create-pv-pvc-inputs.yaml\n+    CommandParams params = new CommandParams().defaults();\n+    params.command(\"sh \"\n+        + Paths.get(pvpvcBase.toString(), \"create-pv-pvc.sh\").toString()\n+        + \" -i \" + Paths.get(pvpvcBase.toString(), \"create-pv-pvc-inputs.yaml\").toString()\n+        + \" -o \"\n+        + Paths.get(pvpvcBase.toString()));\n+\n+    boolean result = Command.withParams(params).execute();\n+    assertTrue(result, \"Failed to create create-pv-pvc-inputs.yaml\");\n+\n+    //create pv and pvc\n+    params = new CommandParams().defaults();\n+    params.command(\"kubectl create -f \" + Paths.get(pvpvcBase.toString(),\n+        \"pv-pvcs/\" + domainName + \"-weblogic-sample-pv.yaml\").toString());\n+    result = Command.withParams(params).execute();\n+    assertTrue(result, \"Failed to create pv\");\n+\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pv {0} to be ready, \"\n+                + \"(elapsed time {1}ms, remaining time {2}ms)\",\n+                pvName,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> pvExists(pvName, null),\n+            String.format(\"pvExists failed with ApiException for pv %s\",\n+                pvName)));\n+\n+    params = new CommandParams().defaults();\n+    params.command(\"kubectl create -f \" + Paths.get(pvpvcBase.toString(),\n+        \"pv-pvcs/\" + domainName + \"-weblogic-sample-pvc.yaml\").toString());\n+    result = Command.withParams(params).execute();\n+    assertTrue(result, \"Failed to create pvc\");\n+\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pv {0} to be ready in namespace {1} \"\n+                + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                pvcName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> pvcExists(pvcName, domainNamespace),\n+            String.format(\"pvcExists failed with ApiException for pvc %s\",\n+                pvcName)));\n+\n+  }\n+\n+  /**\n+   * Delete the persistent volumes since the pv is not decorated with label.\n+   */\n+  @AfterAll\n+  public void tearDownAll() {\n+    deleteDomain();\n+    for (String domainName : new String[]{\"domain1\", \"domain2\"}) {", "originalCommit": "97b7fcd21856634cef2e0a5dd3207850509f50dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM2OTg1MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2002#discussion_r510369851", "bodyText": "Fixed.", "author": "ankedia", "createdAt": "2020-10-22T18:25:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMxOTc4OA=="}], "type": "inlineReview", "revised_code": {"commit": "e5b1044e1c6f4e1b6f03c7415cd47831caeb5cb1", "chunk": "diff --git a/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItLifecycleSampleScripts.java b/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSamples.java\nsimilarity index 80%\nrename from integration-tests/src/test/java/oracle/weblogic/kubernetes/ItLifecycleSampleScripts.java\nrename to integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSamples.java\nindex a13e07279e..c5729140c7 100644\n--- a/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItLifecycleSampleScripts.java\n+++ b/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSamples.java\n\n@@ -16,9 +16,10 @@ import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n import oracle.weblogic.kubernetes.annotations.Namespaces;\n import oracle.weblogic.kubernetes.logging.LoggingFacade;\n import org.awaitility.core.ConditionFactory;\n-import org.junit.jupiter.api.AfterAll;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n import org.junit.jupiter.params.ParameterizedTest;\n import org.junit.jupiter.params.provider.MethodSource;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMyMDUzNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2002#discussion_r510320536", "bodyText": "Are you planning to add more domain types for these tests? If not you don't need to Parameterize the tests, since only 1 domain is created.", "author": "sankarpn", "createdAt": "2020-10-22T17:03:01Z", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItLifecycleSampleScripts.java", "diffHunk": "@@ -0,0 +1,448 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.BASE_IMAGES_REPO_SECRET;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.PV_ROOT;\n+import static oracle.weblogic.kubernetes.TestConstants.WEBLOGIC_IMAGE_TO_USE_IN_SPEC;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WORK_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deletePersistentVolume;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvcExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkClusterReplicaCountMatches;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretForBaseImages;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.replaceStringInFile;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.apache.commons.io.FileUtils.copyDirectory;\n+import static org.apache.commons.io.FileUtils.deleteDirectory;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to domain lifecycle sample scripts.\n+ */\n+@DisplayName(\"Verify the domain lifecycle sample scripts\")\n+@IntegrationTest\n+public class ItLifecycleSampleScripts {\n+\n+  public static final String SERVER_LIFECYCLE = \"Server\";\n+  public static final String CLUSTER_LIFECYCLE = \"Cluster\";\n+  public static final String DOMAIN = \"DOMAIN\";\n+  public static final String STOP_SERVER_SCRIPT = \"stopServer.sh\";\n+  public static final String START_SERVER_SCRIPT = \"startServer.sh\";\n+  public static final String STOP_CLUSTER_SCRIPT = \"stopCluster.sh\";\n+  public static final String START_CLUSTER_SCRIPT = \"startCluster.sh\";\n+  public static final String STOP_DOMAIN_SCRIPT = \"stopDomain.sh\";\n+  public static final String START_DOMAIN_SCRIPT = \"startDomain.sh\";\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static String domainName = \"domain1\";\n+  private final int replicaCount = 2;\n+  private final String clusterName = \"cluster-1\";\n+  private final String adminServerName = \"admin-server\";\n+  private final String managedServerNameBase = \"managed-server\";\n+\n+  private final String adminServerPodName = domainName + \"-\" + adminServerName;\n+  private final String managedServerPodNamePrefix = domainName + \"-\" + managedServerNameBase;\n+  private final Path samplePath = Paths.get(ITTESTS_DIR, \"../kubernetes/samples\");\n+  private final Path domainLifecycleSamplePath = Paths.get(samplePath + \"/scripts/domain-lifecycle\");\n+  private final Path tempSamplePath = Paths.get(WORK_DIR, \"sample-testing\");\n+  private final Path sampleBase =\n+          Paths.get(tempSamplePath.toString(), \"scripts/create-weblogic-domain/domain-home-on-pv\");\n+\n+  private static final String[] params = {\"wlst:domain1\"};\n+\n+  // create standard, reusable retry/backoff policy\n+  private static final ConditionFactory withStandardRetryPolicy\n+      = with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(10, MINUTES).await();\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Assigns unique namespaces for operator and domains and installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace is null\");\n+    opNamespace = namespaces.get(0);\n+    logger.info(\"Assign a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // create pull secrets for WebLogic image when running in non Kind Kubernetes cluster\n+    // this secret is used only for non-kind cluster\n+    createSecretForBaseImages(domainNamespace);\n+\n+    // install operator and verify its running in ready state\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    //create and start WebLogic domain using domain-home-on-pv sample scripts\n+    createDomain(sampleBase);\n+  }\n+\n+  /**\n+   * Test scripts for stopping and starting a managed server.\n+   */\n+  @ParameterizedTest", "originalCommit": "97b7fcd21856634cef2e0a5dd3207850509f50dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM3MDMwNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2002#discussion_r510370304", "bodyText": "Removed the ParameterizedTest annotation.", "author": "ankedia", "createdAt": "2020-10-22T18:26:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMyMDUzNg=="}], "type": "inlineReview", "revised_code": {"commit": "e5b1044e1c6f4e1b6f03c7415cd47831caeb5cb1", "chunk": "diff --git a/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItLifecycleSampleScripts.java b/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSamples.java\nsimilarity index 80%\nrename from integration-tests/src/test/java/oracle/weblogic/kubernetes/ItLifecycleSampleScripts.java\nrename to integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSamples.java\nindex a13e07279e..c5729140c7 100644\n--- a/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItLifecycleSampleScripts.java\n+++ b/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSamples.java\n\n@@ -16,9 +16,10 @@ import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n import oracle.weblogic.kubernetes.annotations.Namespaces;\n import oracle.weblogic.kubernetes.logging.LoggingFacade;\n import org.awaitility.core.ConditionFactory;\n-import org.junit.jupiter.api.AfterAll;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n import org.junit.jupiter.params.ParameterizedTest;\n import org.junit.jupiter.params.provider.MethodSource;\n \n"}}, {"oid": "fde5cb83c7e2c78df33e9b35c67a2e4304512303", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/fde5cb83c7e2c78df33e9b35c67a2e4304512303", "message": "Address PR review comments", "committedDate": "2020-10-22T18:20:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM3MDE4MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2002#discussion_r510370180", "bodyText": "Since the tests are not parameterized you can remove this line.", "author": "sankarpn", "createdAt": "2020-10-22T18:26:31Z", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItLifecycleSampleScripts.java", "diffHunk": "@@ -0,0 +1,446 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.BASE_IMAGES_REPO_SECRET;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.PV_ROOT;\n+import static oracle.weblogic.kubernetes.TestConstants.WEBLOGIC_IMAGE_TO_USE_IN_SPEC;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WORK_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deletePersistentVolume;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvcExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkClusterReplicaCountMatches;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretForBaseImages;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.replaceStringInFile;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.apache.commons.io.FileUtils.copyDirectory;\n+import static org.apache.commons.io.FileUtils.deleteDirectory;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to domain lifecycle sample scripts.\n+ */\n+@DisplayName(\"Verify the domain lifecycle sample scripts\")\n+@IntegrationTest\n+public class ItLifecycleSampleScripts {\n+\n+  public static final String SERVER_LIFECYCLE = \"Server\";\n+  public static final String CLUSTER_LIFECYCLE = \"Cluster\";\n+  public static final String DOMAIN = \"DOMAIN\";\n+  public static final String STOP_SERVER_SCRIPT = \"stopServer.sh\";\n+  public static final String START_SERVER_SCRIPT = \"startServer.sh\";\n+  public static final String STOP_CLUSTER_SCRIPT = \"stopCluster.sh\";\n+  public static final String START_CLUSTER_SCRIPT = \"startCluster.sh\";\n+  public static final String STOP_DOMAIN_SCRIPT = \"stopDomain.sh\";\n+  public static final String START_DOMAIN_SCRIPT = \"startDomain.sh\";\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static String domainName = \"domain1\";\n+  private final int replicaCount = 2;\n+  private final String clusterName = \"cluster-1\";\n+  private final String adminServerName = \"admin-server\";\n+  private final String managedServerNameBase = \"managed-server\";\n+\n+  private final String adminServerPodName = domainName + \"-\" + adminServerName;\n+  private final String managedServerPodNamePrefix = domainName + \"-\" + managedServerNameBase;\n+  private final Path samplePath = Paths.get(ITTESTS_DIR, \"../kubernetes/samples\");\n+  private final Path domainLifecycleSamplePath = Paths.get(samplePath + \"/scripts/domain-lifecycle\");\n+  private final Path tempSamplePath = Paths.get(WORK_DIR, \"lifecycle-scripts-testing\");\n+  private final Path sampleBase =\n+          Paths.get(tempSamplePath.toString(), \"scripts/create-weblogic-domain/domain-home-on-pv\");\n+\n+  private static final String[] params = {\"wlst:domain1\"};\n+\n+  // create standard, reusable retry/backoff policy\n+  private static final ConditionFactory withStandardRetryPolicy\n+      = with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(10, MINUTES).await();\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Assigns unique namespaces for operator and domains and installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace is null\");\n+    opNamespace = namespaces.get(0);\n+    logger.info(\"Assign a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // create pull secrets for WebLogic image when running in non Kind Kubernetes cluster\n+    // this secret is used only for non-kind cluster\n+    createSecretForBaseImages(domainNamespace);\n+\n+    // install operator and verify its running in ready state\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    //create and start WebLogic domain using domain-home-on-pv sample scripts\n+    createDomain(sampleBase);\n+  }\n+\n+  /**\n+   * Test scripts for stopping and starting a managed server.\n+   */\n+  @Test\n+  @MethodSource(\"paramProvider\")\n+  @DisplayName(\"Test server lifecycle samples scripts\")\n+  public void testServerLifecycleScripts() {\n+\n+    // Verify that stopServer script execution shuts down server pod and replica count is decremented\n+    String serverName = managedServerNameBase + \"1\";\n+    executeLifecycleScript(STOP_SERVER_SCRIPT, SERVER_LIFECYCLE, serverName);\n+    checkPodDoesNotExist(managedServerPodNamePrefix + \"1\", domainName, domainNamespace);\n+    assertDoesNotThrow(() -> {\n+      checkClusterReplicaCountMatches(clusterName, domainName, domainNamespace, 1);\n+    });\n+\n+    // Verify that startServer script execution starts server pod and replica count is incremented\n+    executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, serverName);\n+    checkPodExists(managedServerPodNamePrefix + \"1\", domainName, domainNamespace);\n+    assertDoesNotThrow(() -> {\n+      checkClusterReplicaCountMatches(clusterName, domainName, domainNamespace, 2);\n+    });\n+  }\n+\n+  /**\n+   * Test scripts for stopping and starting a managed server while keeping replica count constant.\n+   */\n+  @Test\n+  @MethodSource(\"paramProvider\")\n+  @DisplayName(\"Test server lifecycle samples scripts with constant replica count\")\n+  public void testServerLifecycleScriptsWithConstantReplicaCount() {\n+    String serverName = managedServerNameBase + \"1\";\n+    String keepReplicaCountConstantParameter = \"-k\";\n+    // Verify that replica count is not changed when using \"-k\" parameter and a replacement server is started\n+    executeLifecycleScript(STOP_SERVER_SCRIPT, SERVER_LIFECYCLE, serverName, keepReplicaCountConstantParameter);\n+    checkPodDoesNotExist(managedServerPodNamePrefix + \"1\", domainName, domainNamespace);\n+    checkPodExists(managedServerPodNamePrefix + \"3\", domainName, domainNamespace);\n+    assertDoesNotThrow(() -> {\n+      checkClusterReplicaCountMatches(clusterName, domainName, domainNamespace, 2);\n+    });\n+\n+    // Verify that replica count is not changed when using \"-k\" parameter and replacement server is shutdown\n+    executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, serverName, keepReplicaCountConstantParameter);\n+    checkPodExists(managedServerPodNamePrefix + \"1\", domainName, domainNamespace);\n+    checkPodDoesNotExist(managedServerPodNamePrefix + \"3\", domainName, domainNamespace);\n+    assertDoesNotThrow(() -> {\n+      checkClusterReplicaCountMatches(clusterName, domainName, domainNamespace, 2);\n+    });\n+  }\n+\n+  /**\n+   * Test scripts for stopping and starting a cluster.\n+   */\n+  @Test\n+  @MethodSource(\"paramProvider\")", "originalCommit": "fde5cb83c7e2c78df33e9b35c67a2e4304512303", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM5NDQ0MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2002#discussion_r510394441", "bodyText": "Done.", "author": "ankedia", "createdAt": "2020-10-22T19:08:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM3MDE4MA=="}], "type": "inlineReview", "revised_code": {"commit": "e5b1044e1c6f4e1b6f03c7415cd47831caeb5cb1", "chunk": "diff --git a/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItLifecycleSampleScripts.java b/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSamples.java\nsimilarity index 80%\nrename from integration-tests/src/test/java/oracle/weblogic/kubernetes/ItLifecycleSampleScripts.java\nrename to integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSamples.java\nindex 7ecb663f55..c5729140c7 100644\n--- a/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItLifecycleSampleScripts.java\n+++ b/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSamples.java\n\n@@ -16,10 +16,11 @@ import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n import oracle.weblogic.kubernetes.annotations.Namespaces;\n import oracle.weblogic.kubernetes.logging.LoggingFacade;\n import org.awaitility.core.ConditionFactory;\n-import org.junit.jupiter.api.AfterAll;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Order;\n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n import org.junit.jupiter.params.provider.MethodSource;\n \n import static java.util.concurrent.TimeUnit.MINUTES;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM3MDQwMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2002#discussion_r510370403", "bodyText": "You don't need this method", "author": "sankarpn", "createdAt": "2020-10-22T18:26:53Z", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItLifecycleSampleScripts.java", "diffHunk": "@@ -0,0 +1,446 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.BASE_IMAGES_REPO_SECRET;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.PV_ROOT;\n+import static oracle.weblogic.kubernetes.TestConstants.WEBLOGIC_IMAGE_TO_USE_IN_SPEC;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WORK_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deletePersistentVolume;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvcExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkClusterReplicaCountMatches;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretForBaseImages;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.replaceStringInFile;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.apache.commons.io.FileUtils.copyDirectory;\n+import static org.apache.commons.io.FileUtils.deleteDirectory;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to domain lifecycle sample scripts.\n+ */\n+@DisplayName(\"Verify the domain lifecycle sample scripts\")\n+@IntegrationTest\n+public class ItLifecycleSampleScripts {\n+\n+  public static final String SERVER_LIFECYCLE = \"Server\";\n+  public static final String CLUSTER_LIFECYCLE = \"Cluster\";\n+  public static final String DOMAIN = \"DOMAIN\";\n+  public static final String STOP_SERVER_SCRIPT = \"stopServer.sh\";\n+  public static final String START_SERVER_SCRIPT = \"startServer.sh\";\n+  public static final String STOP_CLUSTER_SCRIPT = \"stopCluster.sh\";\n+  public static final String START_CLUSTER_SCRIPT = \"startCluster.sh\";\n+  public static final String STOP_DOMAIN_SCRIPT = \"stopDomain.sh\";\n+  public static final String START_DOMAIN_SCRIPT = \"startDomain.sh\";\n+  private static String opNamespace = null;\n+  private static String domainNamespace = null;\n+  private static String domainName = \"domain1\";\n+  private final int replicaCount = 2;\n+  private final String clusterName = \"cluster-1\";\n+  private final String adminServerName = \"admin-server\";\n+  private final String managedServerNameBase = \"managed-server\";\n+\n+  private final String adminServerPodName = domainName + \"-\" + adminServerName;\n+  private final String managedServerPodNamePrefix = domainName + \"-\" + managedServerNameBase;\n+  private final Path samplePath = Paths.get(ITTESTS_DIR, \"../kubernetes/samples\");\n+  private final Path domainLifecycleSamplePath = Paths.get(samplePath + \"/scripts/domain-lifecycle\");\n+  private final Path tempSamplePath = Paths.get(WORK_DIR, \"lifecycle-scripts-testing\");\n+  private final Path sampleBase =\n+          Paths.get(tempSamplePath.toString(), \"scripts/create-weblogic-domain/domain-home-on-pv\");\n+\n+  private static final String[] params = {\"wlst:domain1\"};\n+\n+  // create standard, reusable retry/backoff policy\n+  private static final ConditionFactory withStandardRetryPolicy\n+      = with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(10, MINUTES).await();\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Assigns unique namespaces for operator and domains and installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public void initAll(@Namespaces(2) List<String> namespaces) {\n+    logger = getLogger();\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace is null\");\n+    opNamespace = namespaces.get(0);\n+    logger.info(\"Assign a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // create pull secrets for WebLogic image when running in non Kind Kubernetes cluster\n+    // this secret is used only for non-kind cluster\n+    createSecretForBaseImages(domainNamespace);\n+\n+    // install operator and verify its running in ready state\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    //create and start WebLogic domain using domain-home-on-pv sample scripts\n+    createDomain(sampleBase);\n+  }\n+\n+  /**\n+   * Test scripts for stopping and starting a managed server.\n+   */\n+  @Test\n+  @MethodSource(\"paramProvider\")\n+  @DisplayName(\"Test server lifecycle samples scripts\")\n+  public void testServerLifecycleScripts() {\n+\n+    // Verify that stopServer script execution shuts down server pod and replica count is decremented\n+    String serverName = managedServerNameBase + \"1\";\n+    executeLifecycleScript(STOP_SERVER_SCRIPT, SERVER_LIFECYCLE, serverName);\n+    checkPodDoesNotExist(managedServerPodNamePrefix + \"1\", domainName, domainNamespace);\n+    assertDoesNotThrow(() -> {\n+      checkClusterReplicaCountMatches(clusterName, domainName, domainNamespace, 1);\n+    });\n+\n+    // Verify that startServer script execution starts server pod and replica count is incremented\n+    executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, serverName);\n+    checkPodExists(managedServerPodNamePrefix + \"1\", domainName, domainNamespace);\n+    assertDoesNotThrow(() -> {\n+      checkClusterReplicaCountMatches(clusterName, domainName, domainNamespace, 2);\n+    });\n+  }\n+\n+  /**\n+   * Test scripts for stopping and starting a managed server while keeping replica count constant.\n+   */\n+  @Test\n+  @MethodSource(\"paramProvider\")\n+  @DisplayName(\"Test server lifecycle samples scripts with constant replica count\")\n+  public void testServerLifecycleScriptsWithConstantReplicaCount() {\n+    String serverName = managedServerNameBase + \"1\";\n+    String keepReplicaCountConstantParameter = \"-k\";\n+    // Verify that replica count is not changed when using \"-k\" parameter and a replacement server is started\n+    executeLifecycleScript(STOP_SERVER_SCRIPT, SERVER_LIFECYCLE, serverName, keepReplicaCountConstantParameter);\n+    checkPodDoesNotExist(managedServerPodNamePrefix + \"1\", domainName, domainNamespace);\n+    checkPodExists(managedServerPodNamePrefix + \"3\", domainName, domainNamespace);\n+    assertDoesNotThrow(() -> {\n+      checkClusterReplicaCountMatches(clusterName, domainName, domainNamespace, 2);\n+    });\n+\n+    // Verify that replica count is not changed when using \"-k\" parameter and replacement server is shutdown\n+    executeLifecycleScript(START_SERVER_SCRIPT, SERVER_LIFECYCLE, serverName, keepReplicaCountConstantParameter);\n+    checkPodExists(managedServerPodNamePrefix + \"1\", domainName, domainNamespace);\n+    checkPodDoesNotExist(managedServerPodNamePrefix + \"3\", domainName, domainNamespace);\n+    assertDoesNotThrow(() -> {\n+      checkClusterReplicaCountMatches(clusterName, domainName, domainNamespace, 2);\n+    });\n+  }\n+\n+  /**\n+   * Test scripts for stopping and starting a cluster.\n+   */\n+  @Test\n+  @MethodSource(\"paramProvider\")\n+  @DisplayName(\"Test cluster lifecycle scripts\")\n+  public void testClusterLifecycleScripts() {\n+\n+    // Verify all clustered server pods are shut down after stopCluster script execution\n+    executeLifecycleScript(STOP_CLUSTER_SCRIPT, CLUSTER_LIFECYCLE, clusterName);\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodDoesNotExist(managedServerPodNamePrefix + i, domainName, domainNamespace);\n+    }\n+\n+    // Verify all clustered server pods are started after startCluster script execution\n+    executeLifecycleScript(START_CLUSTER_SCRIPT, CLUSTER_LIFECYCLE, clusterName);\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodExists(managedServerPodNamePrefix + i, domainName, domainNamespace);\n+    }\n+  }\n+\n+  /**\n+   * Test scripts for stopping and starting a domain.\n+   */\n+  @Test\n+  @MethodSource(\"paramProvider\")\n+  @DisplayName(\"Test domain lifecycle scripts\")\n+  public void testDomainLifecycleScripts() {\n+    // Verify all WebLogic server instance pods are shut down after stopDomain script execution\n+    executeLifecycleScript(STOP_DOMAIN_SCRIPT, DOMAIN, null);\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodDoesNotExist(managedServerPodNamePrefix + i, domainName, domainNamespace);\n+    }\n+    checkPodDoesNotExist(adminServerPodName, domainName, domainNamespace);\n+\n+    // Verify all WebLogic server instance pods are started after startDomain script execution\n+    executeLifecycleScript(START_DOMAIN_SCRIPT, DOMAIN, null);\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodExists(managedServerPodNamePrefix + i, domainName, domainNamespace);\n+    }\n+    checkPodExists(adminServerPodName, domainName, domainNamespace);\n+  }\n+\n+  // Function to execute domain lifecyle scripts\n+  private void executeLifecycleScript(String script, String scriptType, String entityName) {\n+    executeLifecycleScript(script, scriptType, entityName, \"\");\n+  }\n+\n+  // Function to execute domain lifecyle scripts\n+  private void executeLifecycleScript(String script, String scriptType, String entityName, String extraParams) {\n+    CommandParams params;\n+    boolean result;\n+    String commonParameters = \" -d \" + domainName + \" -n \" + domainNamespace;\n+    params = new CommandParams().defaults();\n+    if (scriptType.equals(SERVER_LIFECYCLE)) {\n+      params.command(\"sh \"\n+              + Paths.get(domainLifecycleSamplePath.toString(), \"/\" + script).toString()\n+              + commonParameters + \" -s \" + entityName + \" \" + extraParams);\n+    } else if (scriptType.equals(CLUSTER_LIFECYCLE)) {\n+      params.command(\"sh \"\n+              + Paths.get(domainLifecycleSamplePath.toString(), \"/\" + script).toString()\n+              + commonParameters + \" -c \" + entityName);\n+    } else {\n+      params.command(\"sh \"\n+              + Paths.get(domainLifecycleSamplePath.toString(), \"/\" + script).toString()\n+              + commonParameters);\n+    }\n+    result = Command.withParams(params).execute();\n+    assertTrue(result, \"Failed to execute script \" + script);\n+  }\n+\n+  // generates the stream of objects used by parametrized test.", "originalCommit": "fde5cb83c7e2c78df33e9b35c67a2e4304512303", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM5NDQ3Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2002#discussion_r510394473", "bodyText": "Removed.", "author": "ankedia", "createdAt": "2020-10-22T19:08:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM3MDQwMw=="}], "type": "inlineReview", "revised_code": {"commit": "e5b1044e1c6f4e1b6f03c7415cd47831caeb5cb1", "chunk": "diff --git a/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItLifecycleSampleScripts.java b/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSamples.java\nsimilarity index 80%\nrename from integration-tests/src/test/java/oracle/weblogic/kubernetes/ItLifecycleSampleScripts.java\nrename to integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSamples.java\nindex 7ecb663f55..c5729140c7 100644\n--- a/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItLifecycleSampleScripts.java\n+++ b/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSamples.java\n\n@@ -16,10 +16,11 @@ import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n import oracle.weblogic.kubernetes.annotations.Namespaces;\n import oracle.weblogic.kubernetes.logging.LoggingFacade;\n import org.awaitility.core.ConditionFactory;\n-import org.junit.jupiter.api.AfterAll;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Order;\n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n import org.junit.jupiter.params.provider.MethodSource;\n \n import static java.util.concurrent.TimeUnit.MINUTES;\n"}}, {"oid": "2927762ee4a04cfd8747c2ac6df56200dbf7e991", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/2927762ee4a04cfd8747c2ac6df56200dbf7e991", "message": "Review comment and cleanup.", "committedDate": "2020-10-22T18:51:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyMjc1Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2002#discussion_r510422757", "bodyText": "You can add these tests into existing ItSamples.java. You can use the domain that's already created/started by the test in ItSamples to verify your scripts. That saves time for domain creation/startup and all the tests for verifying the samples will be in one class.", "author": "vanajamukkara", "createdAt": "2020-10-22T20:01:21Z", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItLifecycleSampleScripts.java", "diffHunk": "@@ -0,0 +1,432 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.BASE_IMAGES_REPO_SECRET;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.PV_ROOT;\n+import static oracle.weblogic.kubernetes.TestConstants.WEBLOGIC_IMAGE_TO_USE_IN_SPEC;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WORK_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.deletePersistentVolume;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainDoesNotExist;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvcExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkClusterReplicaCountMatches;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodDoesNotExist;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretForBaseImages;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.replaceStringInFile;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.apache.commons.io.FileUtils.copyDirectory;\n+import static org.apache.commons.io.FileUtils.deleteDirectory;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to domain lifecycle sample scripts.\n+ */\n+@DisplayName(\"Verify the domain lifecycle sample scripts\")\n+@IntegrationTest\n+public class ItLifecycleSampleScripts {\n+\n+  public static final String SERVER_LIFECYCLE = \"Server\";\n+  public static final String CLUSTER_LIFECYCLE = \"Cluster\";\n+  public static final String DOMAIN = \"DOMAIN\";\n+  public static final String STOP_SERVER_SCRIPT = \"stopServer.sh\";\n+  public static final String START_SERVER_SCRIPT = \"startServer.sh\";\n+  public static final String STOP_CLUSTER_SCRIPT = \"stopCluster.sh\";\n+  public static final String START_CLUSTER_SCRIPT = \"startCluster.sh\";\n+  public static final String STOP_DOMAIN_SCRIPT = \"stopDomain.sh\";\n+  public static final String START_DOMAIN_SCRIPT = \"startDomain.sh\";\n+  private static String domainNamespace = null;\n+  private static final String domainName = \"domain1\";\n+  private final int replicaCount = 2;\n+  private final String clusterName = \"cluster-1\";\n+  private final String adminServerName = \"admin-server\";\n+  private final String managedServerNameBase = \"managed-server\";\n+\n+  private final String adminServerPodName = domainName + \"-\" + adminServerName;\n+  private final String managedServerPodNamePrefix = domainName + \"-\" + managedServerNameBase;\n+  private final Path samplePath = Paths.get(ITTESTS_DIR, \"../kubernetes/samples\");\n+  private final Path domainLifecycleSamplePath = Paths.get(samplePath + \"/scripts/domain-lifecycle\");\n+  private final Path tempSamplePath = Paths.get(WORK_DIR, \"lifecycle-scripts-testing\");\n+  private final Path sampleBase =\n+          Paths.get(tempSamplePath.toString(), \"scripts/create-weblogic-domain/domain-home-on-pv\");\n+\n+  // create standard, reusable retry/backoff policy\n+  private static final ConditionFactory withStandardRetryPolicy\n+      = with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(10, MINUTES).await();\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Assigns unique namespaces for operator and domains and installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public void initAll(@Namespaces(2) List<String> namespaces) {\n+    String opNamespace = namespaces.get(0);\n+\n+    logger = getLogger();\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    assertNotNull(namespaces.get(0), \"Namespace is null\");\n+    logger.info(\"Assign a unique namespace for WebLogic domain\");\n+    assertNotNull(namespaces.get(1), \"Namespace is null\");\n+    domainNamespace = namespaces.get(1);\n+\n+    // create pull secrets for WebLogic image when running in non Kind Kubernetes cluster\n+    // this secret is used only for non-kind cluster\n+    createSecretForBaseImages(domainNamespace);\n+\n+    // install operator and verify its running in ready state\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+\n+    //create and start WebLogic domain using domain-home-on-pv sample scripts\n+    createDomain(sampleBase);\n+  }\n+\n+  /**\n+   * Test scripts for stopping and starting a managed server.\n+   */\n+  @Test\n+  @DisplayName(\"Test server lifecycle samples scripts\")\n+  public void testServerLifecycleScripts() {", "originalCommit": "2927762ee4a04cfd8747c2ac6df56200dbf7e991", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzODcyNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2002#discussion_r510438727", "bodyText": "I'm not sure if adding these tests as it is in ItSamples.java will work since ItSamples creates 2 types of domains (using WLST and WDT) and domain lifecycle tests will get executed twice (once for each type of domain). That'll increase the test execution time. Also, coupling the two tests with different goals in the same class might make it hard to understand and maintain. Domain creation is a pre-requisite for lifecycle scripts testing and if saving time is a concern, maybe we can prioritize and run ItSamples or ItLifecycleSampleScripts test less frequently (e.g. weekly instead of nightly). Please let me know what you think. Thanks.", "author": "ankedia", "createdAt": "2020-10-22T20:31:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyMjc1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0NzU3OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2002#discussion_r510447579", "bodyText": "The test you are going to add is not a parameterized test, it will be executed only once. Your test is going to use the domain that is started by the existing test. I think the goal is same, test sample scripts.", "author": "vanajamukkara", "createdAt": "2020-10-22T20:48:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyMjc1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ2ODQ3MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2002#discussion_r510468471", "bodyText": "It seems ItSamples needs some refactoring. I tried adding above tests in ItSamples and got below error. Looks like domain is not created when stopServer.sh script got executed.\n<10-22-2020 21:23:15>  <oracle.weblogic.kubernetes.actions.impl.primitive.Command execute> <Executing command sh /scratch/akedia/wls-k8s-files/weblogic-kubernetes-operator/integration-tests/../kubernetes/samples/scripts/domain-lifecycle/stopServer.sh -d domain1 -n ns-svss -s managed-server1 >\n<10-22-2020 21:23:15>  <oracle.weblogic.kubernetes.actions.impl.primitive.Command execute> <The command execution failed because it returned non-zero exit value: ExecResult: exitValue = 1, stdout = , stderr = Error from server (NotFound): pods \"domain1-managed-server1\" not found.>", "author": "ankedia", "createdAt": "2020-10-22T21:28:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyMjc1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwMjY5Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2002#discussion_r510502697", "bodyText": "Anil, It could be because of the order in which the tests are executed. Your lifecycle tests might have executed before the test method that creates the domain. You can use Order annotation to execute the tests in the way you want. Please see ItIntrospectVersion.java for example for test ordering.", "author": "sankarpn", "createdAt": "2020-10-22T22:54:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyMjc1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUzNTc0MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2002#discussion_r510535741", "bodyText": "@sankarpn and I looked at it together. Currently domain creation and deletion method are not generic and it makes certain assumption about directory structure. For e.g. files created for domain1 are re-used for domain2 and domain1 directories are deleted before domain2 creation begins. Hence deletion of both domains towards the end of test fails. I can look into this tomorrow or as Pani suggested below, it can be done as part of another integration tests JIRA.", "author": "ankedia", "createdAt": "2020-10-23T00:44:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyMjc1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTIyMTA0Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2002#discussion_r511221042", "bodyText": "Fixed. With Sankar's help, the test methods are merged in ItSamples and I have deleted ItLifecycleSampleScripts.java.", "author": "ankedia", "createdAt": "2020-10-24T01:00:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyMjc1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "e5b1044e1c6f4e1b6f03c7415cd47831caeb5cb1", "chunk": "diff --git a/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItLifecycleSampleScripts.java b/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSamples.java\nsimilarity index 78%\nrename from integration-tests/src/test/java/oracle/weblogic/kubernetes/ItLifecycleSampleScripts.java\nrename to integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSamples.java\nindex 0452514b8e..c5729140c7 100644\n--- a/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItLifecycleSampleScripts.java\n+++ b/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItSamples.java\n\n@@ -6,7 +6,9 @@ package oracle.weblogic.kubernetes;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n+import java.util.Arrays;\n import java.util.List;\n+import java.util.stream.Stream;\n \n import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n"}}, {"oid": "01e630767ff07db1d11fa96ea6eeef74524ea8e1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/01e630767ff07db1d11fa96ea6eeef74524ea8e1", "message": "Documentation changes based on PR review comments.", "committedDate": "2020-10-23T18:47:46Z", "type": "commit"}, {"oid": "4eba0729462b6caff0e89559a453d4bceee2e94a", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/4eba0729462b6caff0e89559a453d4bceee2e94a", "message": "Fully qualified replica value as per review comments", "committedDate": "2020-10-23T19:22:16Z", "type": "commit"}, {"oid": "eadad48da542495358be1733fd413650c888bdd0", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/eadad48da542495358be1733fd413650c888bdd0", "message": "edit docs", "committedDate": "2020-10-23T20:21:50Z", "type": "commit"}, {"oid": "5845883cfa6f8086904ab24a5c4b5d8a68ecd416", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5845883cfa6f8086904ab24a5c4b5d8a68ecd416", "message": "edit README", "committedDate": "2020-10-23T20:25:15Z", "type": "commit"}, {"oid": "1fda64add638aedfbbf5a6530ae23ae18de1ca9b", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/1fda64add638aedfbbf5a6530ae23ae18de1ca9b", "message": "Address PR review comments", "committedDate": "2020-10-23T20:54:22Z", "type": "commit"}, {"oid": "71922ebc0d6a3c6ce3dbdcf81ecd9c67a5aa336d", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/71922ebc0d6a3c6ce3dbdcf81ecd9c67a5aa336d", "message": "Changes to address PR review comments and removed ItLifecycleSampleScripts class by adding methods in ItSamples", "committedDate": "2020-10-23T22:23:24Z", "type": "commit"}, {"oid": "d66c1a8d25cdaf276753334ece524002f96cdf08", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d66c1a8d25cdaf276753334ece524002f96cdf08", "message": "fix indentation", "committedDate": "2020-10-23T22:29:51Z", "type": "commit"}, {"oid": "05c5a3f80408f65b3b6f9fdad445e81e01ea4266", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/05c5a3f80408f65b3b6f9fdad445e81e01ea4266", "message": "fix comment and typo", "committedDate": "2020-10-23T22:36:22Z", "type": "commit"}, {"oid": "0ba9537453fffa37b1890fcbff8a9a165edc62ce", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0ba9537453fffa37b1890fcbff8a9a165edc62ce", "message": "Added validation as per review comment.", "committedDate": "2020-10-24T00:30:29Z", "type": "commit"}, {"oid": "0ab8bd0e37a89d3856d3f58a075ff73bdb93ff7e", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0ab8bd0e37a89d3856d3f58a075ff73bdb93ff7e", "message": "changes to address review comment and minor cleanup", "committedDate": "2020-10-25T23:05:45Z", "type": "commit"}, {"oid": "3950815b74a3e442198346cff88ea0103a2780ee", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3950815b74a3e442198346cff88ea0103a2780ee", "message": "PR review comment - changes to assume default policy is IF_NEEDED if policy is not set at domain level.", "committedDate": "2020-10-26T16:30:05Z", "type": "commit"}, {"oid": "2859f0865a7a5ced929e3d6eb7d793fea231ee3f", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/2859f0865a7a5ced929e3d6eb7d793fea231ee3f", "message": "changes for new algorithm as documented on http://aseng-wiki.us.oracle.com/asengwiki/pages/viewpage.action?pageId=5280694898", "committedDate": "2020-10-30T22:47:40Z", "type": "commit"}, {"oid": "81e04869b8bb243f182ac6b22999043e465e210f", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/81e04869b8bb243f182ac6b22999043e465e210f", "message": "More changes for new algorithm.", "committedDate": "2020-10-31T17:19:49Z", "type": "commit"}, {"oid": "c6c287b5e4406c8bfb80275de446b340a9ec6ef7", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c6c287b5e4406c8bfb80275de446b340a9ec6ef7", "message": "code refactoring and minor doc update.", "committedDate": "2020-11-01T17:42:32Z", "type": "commit"}, {"oid": "3456c6829e97258fb6099f0dfca2212bb5bc3d9f", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3456c6829e97258fb6099f0dfca2212bb5bc3d9f", "message": "Minor change for dynamic server name validation", "committedDate": "2020-11-02T05:05:34Z", "type": "commit"}, {"oid": "df3c33f1d2ff36840d937115ca2428f2246011ac", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/df3c33f1d2ff36840d937115ca2428f2246011ac", "message": "Changes to address review comments.", "committedDate": "2020-11-02T20:58:30Z", "type": "commit"}, {"oid": "3e028fb390ab44274ced681d23255f8504f6ecb6", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3e028fb390ab44274ced681d23255f8504f6ecb6", "message": "More review comment changes and cleanup.", "committedDate": "2020-11-03T05:46:27Z", "type": "commit"}, {"oid": "10feb9907e6a6ae987998b1792243ac22d041cb1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/10feb9907e6a6ae987998b1792243ac22d041cb1", "message": "Unset policy to start independent (stadalone) maanged server instead of ALWAYS.", "committedDate": "2020-11-03T14:48:27Z", "type": "commit"}, {"oid": "15c725a6c333bfd7675506f68ce06f1efa20bd39", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/15c725a6c333bfd7675506f68ce06f1efa20bd39", "message": "Latest review comment changes.", "committedDate": "2020-11-03T21:52:18Z", "type": "commit"}]}