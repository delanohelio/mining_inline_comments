{"pr_number": 2112, "pr_title": "Integration test for JRF domain on PV sample", "pr_createdAt": "2020-12-18T03:23:10Z", "pr_url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2112", "timeline": [{"oid": "d7fb85a2789babb9e1df60e58863830ba48aa3e3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d7fb85a2789babb9e1df60e58863830ba48aa3e3", "message": "v1 of FMW sample", "committedDate": "2020-12-15T02:39:30Z", "type": "commit"}, {"oid": "62f7375cdbe969e60b8b987b46f177d489299099", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/62f7375cdbe969e60b8b987b46f177d489299099", "message": "modify creating PV dir code", "committedDate": "2020-12-17T00:28:50Z", "type": "commit"}, {"oid": "f4e2e43276f0549915b6dc862c95a20439927cc1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f4e2e43276f0549915b6dc862c95a20439927cc1", "message": "minor edition", "committedDate": "2020-12-17T00:38:16Z", "type": "commit"}, {"oid": "4494de3fdc289cb9c3a934403789cb6a3c58e1b4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/4494de3fdc289cb9c3a934403789cb6a3c58e1b4", "message": "Merge remote-tracking branch 'origin/develop' into fmwsample", "committedDate": "2020-12-17T00:43:12Z", "type": "commit"}, {"oid": "58e78b589c0478174e0ab62e0e4e0b667bf0d6ac", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/58e78b589c0478174e0ab62e0e4e0b667bf0d6ac", "message": "modify the dir permission", "committedDate": "2020-12-17T19:37:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI5MjE0OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2112#discussion_r547292149", "bodyText": "Modify the test name to  testFmwfDomainInPvSampleUsingWlst()\nLet us substitute the word JRF->FMW  across the file to have a consistent Naming convention as the class name.", "author": "anpanigr", "createdAt": "2020-12-22T13:58:10Z", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItFmwSample.java", "diffHunk": "@@ -0,0 +1,473 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.BASE_IMAGES_REPO_SECRET;\n+import static oracle.weblogic.kubernetes.TestConstants.DB_IMAGE_TO_USE_IN_SPEC;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.FMWINFRA_IMAGE_TO_USE_IN_SPEC;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.PV_ROOT;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WORK_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.impl.primitive.Command.defaultCommandParams;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvcExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createRcuSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretForBaseImages;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getExternalServicePodName;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.DbUtils.getNewSuffixCount;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.replaceStringInFile;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.apache.commons.io.FileUtils.copyDirectory;\n+import static org.apache.commons.io.FileUtils.deleteDirectory;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to FMW domain samples.\n+ */\n+@DisplayName(\"Verify the JRF domain on pv sample using wlst\")\n+@IntegrationTest\n+public class ItFmwSample {\n+\n+  private static String dbNamespace = null;\n+  private static String domainNamespace = null;\n+\n+  private static final Path samplePath = Paths.get(ITTESTS_DIR, \"../kubernetes/samples\");\n+  private static final Path tempSamplePath = Paths.get(WORK_DIR, \"sample-testing\");\n+  private final String domainUid = \"jrfsamplepv\";\n+\n+  private static final String RCUSCHEMAPREFIX = \"jrfsamplepv\";\n+  private static final String ORACLEDBURLPREFIX = \"oracle-db.\";\n+  private static final String ORACLEDBSUFFIX = \".svc.cluster.local:1521/devpdb.k8s\";\n+  private static final String RCUSYSUSERNAME = \"sys\";\n+  private static final String RCUSYSPASSWORD = \"Oradoc_db1\";\n+  private static final String RCUSCHEMAUSERNAME = \"myrcuuser\";\n+  private static final String RCUSCHEMAPASSWORD = \"Oradoc_db1\";\n+  private static String dbUrl = null;\n+  // in general the node port range has to be between 30,000 to 32,767\n+  // to avoid port conflict because of the delay in using it, the port here\n+  // starts with 30100\n+  final int t3ChannelPort = getNextFreePort(30172, 32767);\n+\n+  // create standard, reusable retry/backoff policy\n+  private static final ConditionFactory withStandardRetryPolicy\n+      = with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(10, MINUTES).await();\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Start DB service and create RCU schema.\n+   * Assigns unique namespaces for operator and domains.\n+   * Pull FMW image and Oracle DB image if running tests in Kind cluster.\n+   * Installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+    logger = getLogger();\n+\n+    logger.info(\"Assign a unique namespace for DB and RCU\");\n+    assertNotNull(namespaces.get(0), \"Namespace is null\");\n+    dbNamespace = namespaces.get(0);\n+    dbUrl = ORACLEDBURLPREFIX + dbNamespace + ORACLEDBSUFFIX;\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    assertNotNull(namespaces.get(1), \"Namespace is null\");\n+    String opNamespace = namespaces.get(1);\n+\n+    logger.info(\"Assign a unique namespace for JRF domain\");\n+    assertNotNull(namespaces.get(2), \"Namespace is null\");\n+    domainNamespace = namespaces.get(2);\n+\n+    int dbPort = 30011 + getNewSuffixCount();\n+    logger.info(\"Start DB and create RCU schema for namespace: {0}, RCU prefix: {1}, \"\n+        + \"dbUrl: {2}, dbImage: {3},  fmwImage: {4}, dbPort: {5} \", dbNamespace, RCUSCHEMAPREFIX, dbUrl,\n+        DB_IMAGE_TO_USE_IN_SPEC, FMWINFRA_IMAGE_TO_USE_IN_SPEC, dbPort);\n+    assertDoesNotThrow(() -> setupDBandRCUschemaBySample(DB_IMAGE_TO_USE_IN_SPEC, FMWINFRA_IMAGE_TO_USE_IN_SPEC,\n+        RCUSCHEMAPREFIX, dbNamespace, dbPort, dbUrl),\n+        String.format(\"Failed to create RCU schema for prefix %s in the namespace %s with \"\n+        + \"dbUrl %s\", RCUSCHEMAPREFIX, dbNamespace, dbUrl));\n+\n+\n+    // create pull secrets for WebLogic image when running in non Kind Kubernetes cluster\n+    // this secret is used only for non-kind cluster\n+    createSecretForBaseImages(domainNamespace);\n+\n+    // install operator and verify its running in ready state\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+  }\n+\n+  /**\n+   * Test JRF domain on pv samples using domains created by wlst.\n+   * Verify Pod is ready and service exists for both admin server and managed servers.\n+   * Verify EM console is accessible.\n+   */\n+  @Test\n+  @DisplayName(\"Test JRF domain on PV sample\")\n+  public void testJrfDomainInPvUsingWlst() {", "originalCommit": "58e78b589c0478174e0ab62e0e4e0b667bf0d6ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA2MjkxOA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2112#discussion_r552062918", "bodyText": "Done", "author": "maggiehe00", "createdAt": "2021-01-05T16:58:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI5MjE0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "0ec631a358abcd0c45763a8509525919b0ab5d16", "chunk": "diff --git a/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItFmwSample.java b/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItFmwSample.java\nindex 2e6bc04127..6c08d3d4e4 100644\n--- a/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItFmwSample.java\n+++ b/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItFmwSample.java\n\n@@ -1,4 +1,4 @@\n-// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Copyright (c) 2021, Oracle and/or its affiliates.\n // Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n \n package oracle.weblogic.kubernetes;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI5Mzc1Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2112#discussion_r547293756", "bodyText": "Why only on Kind cluster ?  Should the statement be generic as follows ...\nPull FMW image and Oracle DB image if needed.", "author": "anpanigr", "createdAt": "2020-12-22T14:01:09Z", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItFmwSample.java", "diffHunk": "@@ -0,0 +1,473 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.BASE_IMAGES_REPO_SECRET;\n+import static oracle.weblogic.kubernetes.TestConstants.DB_IMAGE_TO_USE_IN_SPEC;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.FMWINFRA_IMAGE_TO_USE_IN_SPEC;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.PV_ROOT;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WORK_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.impl.primitive.Command.defaultCommandParams;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvcExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createRcuSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretForBaseImages;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getExternalServicePodName;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.DbUtils.getNewSuffixCount;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.replaceStringInFile;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.apache.commons.io.FileUtils.copyDirectory;\n+import static org.apache.commons.io.FileUtils.deleteDirectory;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to FMW domain samples.\n+ */\n+@DisplayName(\"Verify the JRF domain on pv sample using wlst\")\n+@IntegrationTest\n+public class ItFmwSample {\n+\n+  private static String dbNamespace = null;\n+  private static String domainNamespace = null;\n+\n+  private static final Path samplePath = Paths.get(ITTESTS_DIR, \"../kubernetes/samples\");\n+  private static final Path tempSamplePath = Paths.get(WORK_DIR, \"sample-testing\");\n+  private final String domainUid = \"jrfsamplepv\";\n+\n+  private static final String RCUSCHEMAPREFIX = \"jrfsamplepv\";\n+  private static final String ORACLEDBURLPREFIX = \"oracle-db.\";\n+  private static final String ORACLEDBSUFFIX = \".svc.cluster.local:1521/devpdb.k8s\";\n+  private static final String RCUSYSUSERNAME = \"sys\";\n+  private static final String RCUSYSPASSWORD = \"Oradoc_db1\";\n+  private static final String RCUSCHEMAUSERNAME = \"myrcuuser\";\n+  private static final String RCUSCHEMAPASSWORD = \"Oradoc_db1\";\n+  private static String dbUrl = null;\n+  // in general the node port range has to be between 30,000 to 32,767\n+  // to avoid port conflict because of the delay in using it, the port here\n+  // starts with 30100\n+  final int t3ChannelPort = getNextFreePort(30172, 32767);\n+\n+  // create standard, reusable retry/backoff policy\n+  private static final ConditionFactory withStandardRetryPolicy\n+      = with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(10, MINUTES).await();\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Start DB service and create RCU schema.\n+   * Assigns unique namespaces for operator and domains.\n+   * Pull FMW image and Oracle DB image if running tests in Kind cluster.", "originalCommit": "58e78b589c0478174e0ab62e0e4e0b667bf0d6ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA2MzAxOA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2112#discussion_r552063018", "bodyText": "Done", "author": "maggiehe00", "createdAt": "2021-01-05T16:58:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzI5Mzc1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "0ec631a358abcd0c45763a8509525919b0ab5d16", "chunk": "diff --git a/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItFmwSample.java b/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItFmwSample.java\nindex 2e6bc04127..6c08d3d4e4 100644\n--- a/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItFmwSample.java\n+++ b/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItFmwSample.java\n\n@@ -1,4 +1,4 @@\n-// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Copyright (c) 2021, Oracle and/or its affiliates.\n // Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n \n package oracle.weblogic.kubernetes;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ4ODM3MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2112#discussion_r551488370", "bodyText": "update the comment since you are using 30172", "author": "sankarpn", "createdAt": "2021-01-04T18:26:25Z", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItFmwSample.java", "diffHunk": "@@ -0,0 +1,473 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.BASE_IMAGES_REPO_SECRET;\n+import static oracle.weblogic.kubernetes.TestConstants.DB_IMAGE_TO_USE_IN_SPEC;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.FMWINFRA_IMAGE_TO_USE_IN_SPEC;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.PV_ROOT;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WORK_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.impl.primitive.Command.defaultCommandParams;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvcExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createRcuSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretForBaseImages;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getExternalServicePodName;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.DbUtils.getNewSuffixCount;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.replaceStringInFile;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.apache.commons.io.FileUtils.copyDirectory;\n+import static org.apache.commons.io.FileUtils.deleteDirectory;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to FMW domain samples.\n+ */\n+@DisplayName(\"Verify the JRF domain on pv sample using wlst\")\n+@IntegrationTest\n+public class ItFmwSample {\n+\n+  private static String dbNamespace = null;\n+  private static String domainNamespace = null;\n+\n+  private static final Path samplePath = Paths.get(ITTESTS_DIR, \"../kubernetes/samples\");\n+  private static final Path tempSamplePath = Paths.get(WORK_DIR, \"sample-testing\");\n+  private final String domainUid = \"jrfsamplepv\";\n+\n+  private static final String RCUSCHEMAPREFIX = \"jrfsamplepv\";\n+  private static final String ORACLEDBURLPREFIX = \"oracle-db.\";\n+  private static final String ORACLEDBSUFFIX = \".svc.cluster.local:1521/devpdb.k8s\";\n+  private static final String RCUSYSUSERNAME = \"sys\";\n+  private static final String RCUSYSPASSWORD = \"Oradoc_db1\";\n+  private static final String RCUSCHEMAUSERNAME = \"myrcuuser\";\n+  private static final String RCUSCHEMAPASSWORD = \"Oradoc_db1\";\n+  private static String dbUrl = null;\n+  // in general the node port range has to be between 30,000 to 32,767\n+  // to avoid port conflict because of the delay in using it, the port here\n+  // starts with 30100", "originalCommit": "58e78b589c0478174e0ab62e0e4e0b667bf0d6ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA2MzEzMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2112#discussion_r552063133", "bodyText": "Done", "author": "maggiehe00", "createdAt": "2021-01-05T16:59:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ4ODM3MA=="}], "type": "inlineReview", "revised_code": {"commit": "0ec631a358abcd0c45763a8509525919b0ab5d16", "chunk": "diff --git a/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItFmwSample.java b/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItFmwSample.java\nindex 2e6bc04127..6c08d3d4e4 100644\n--- a/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItFmwSample.java\n+++ b/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItFmwSample.java\n\n@@ -1,4 +1,4 @@\n-// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Copyright (c) 2021, Oracle and/or its affiliates.\n // Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n \n package oracle.weblogic.kubernetes;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ5NjkxMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2112#discussion_r551496913", "bodyText": "where do we call this script? I don't see it here.", "author": "sankarpn", "createdAt": "2021-01-04T18:43:23Z", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItFmwSample.java", "diffHunk": "@@ -0,0 +1,473 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.BASE_IMAGES_REPO_SECRET;\n+import static oracle.weblogic.kubernetes.TestConstants.DB_IMAGE_TO_USE_IN_SPEC;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.FMWINFRA_IMAGE_TO_USE_IN_SPEC;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.PV_ROOT;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WORK_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.impl.primitive.Command.defaultCommandParams;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvcExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createRcuSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretForBaseImages;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getExternalServicePodName;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.DbUtils.getNewSuffixCount;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.replaceStringInFile;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.apache.commons.io.FileUtils.copyDirectory;\n+import static org.apache.commons.io.FileUtils.deleteDirectory;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to FMW domain samples.\n+ */\n+@DisplayName(\"Verify the JRF domain on pv sample using wlst\")\n+@IntegrationTest\n+public class ItFmwSample {\n+\n+  private static String dbNamespace = null;\n+  private static String domainNamespace = null;\n+\n+  private static final Path samplePath = Paths.get(ITTESTS_DIR, \"../kubernetes/samples\");\n+  private static final Path tempSamplePath = Paths.get(WORK_DIR, \"sample-testing\");\n+  private final String domainUid = \"jrfsamplepv\";\n+\n+  private static final String RCUSCHEMAPREFIX = \"jrfsamplepv\";\n+  private static final String ORACLEDBURLPREFIX = \"oracle-db.\";\n+  private static final String ORACLEDBSUFFIX = \".svc.cluster.local:1521/devpdb.k8s\";\n+  private static final String RCUSYSUSERNAME = \"sys\";\n+  private static final String RCUSYSPASSWORD = \"Oradoc_db1\";\n+  private static final String RCUSCHEMAUSERNAME = \"myrcuuser\";\n+  private static final String RCUSCHEMAPASSWORD = \"Oradoc_db1\";\n+  private static String dbUrl = null;\n+  // in general the node port range has to be between 30,000 to 32,767\n+  // to avoid port conflict because of the delay in using it, the port here\n+  // starts with 30100\n+  final int t3ChannelPort = getNextFreePort(30172, 32767);\n+\n+  // create standard, reusable retry/backoff policy\n+  private static final ConditionFactory withStandardRetryPolicy\n+      = with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(10, MINUTES).await();\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Start DB service and create RCU schema.\n+   * Assigns unique namespaces for operator and domains.\n+   * Pull FMW image and Oracle DB image if running tests in Kind cluster.\n+   * Installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+    logger = getLogger();\n+\n+    logger.info(\"Assign a unique namespace for DB and RCU\");\n+    assertNotNull(namespaces.get(0), \"Namespace is null\");\n+    dbNamespace = namespaces.get(0);\n+    dbUrl = ORACLEDBURLPREFIX + dbNamespace + ORACLEDBSUFFIX;\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    assertNotNull(namespaces.get(1), \"Namespace is null\");\n+    String opNamespace = namespaces.get(1);\n+\n+    logger.info(\"Assign a unique namespace for JRF domain\");\n+    assertNotNull(namespaces.get(2), \"Namespace is null\");\n+    domainNamespace = namespaces.get(2);\n+\n+    int dbPort = 30011 + getNewSuffixCount();\n+    logger.info(\"Start DB and create RCU schema for namespace: {0}, RCU prefix: {1}, \"\n+        + \"dbUrl: {2}, dbImage: {3},  fmwImage: {4}, dbPort: {5} \", dbNamespace, RCUSCHEMAPREFIX, dbUrl,\n+        DB_IMAGE_TO_USE_IN_SPEC, FMWINFRA_IMAGE_TO_USE_IN_SPEC, dbPort);\n+    assertDoesNotThrow(() -> setupDBandRCUschemaBySample(DB_IMAGE_TO_USE_IN_SPEC, FMWINFRA_IMAGE_TO_USE_IN_SPEC,\n+        RCUSCHEMAPREFIX, dbNamespace, dbPort, dbUrl),\n+        String.format(\"Failed to create RCU schema for prefix %s in the namespace %s with \"\n+        + \"dbUrl %s\", RCUSCHEMAPREFIX, dbNamespace, dbUrl));\n+\n+\n+    // create pull secrets for WebLogic image when running in non Kind Kubernetes cluster\n+    // this secret is used only for non-kind cluster\n+    createSecretForBaseImages(domainNamespace);\n+\n+    // install operator and verify its running in ready state\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+  }\n+\n+  /**\n+   * Test JRF domain on pv samples using domains created by wlst.\n+   * Verify Pod is ready and service exists for both admin server and managed servers.\n+   * Verify EM console is accessible.\n+   */\n+  @Test\n+  @DisplayName(\"Test JRF domain on PV sample\")\n+  public void testJrfDomainInPvUsingWlst() {\n+    setupSample();\n+    // create persistent volume and persistent volume claims used by the samples\n+    createPvPvc(domainUid);\n+\n+    //create WebLogic secrets for the domain\n+    createSecretWithUsernamePassword(domainUid + \"-weblogic-credentials\", domainNamespace,\n+            ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n+    // create RCU credential secret\n+    createRcuSecretWithUsernamePassword(domainUid + \"-rcu-credentials\", domainNamespace,\n+        RCUSCHEMAUSERNAME, RCUSCHEMAPASSWORD, RCUSYSUSERNAME, RCUSYSPASSWORD);\n+\n+    Path sampleBase = Paths.get(tempSamplePath.toString(),\n+        \"scripts/create-fmw-infrastructure-domain/domain-home-on-pv\");\n+\n+    //update create-domain-inputs.yaml with the values from this test\n+    updateDomainInputsFile(domainUid, sampleBase);\n+\n+    // change image name\n+    assertDoesNotThrow(() -> {\n+      replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n+              \"image: container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4\",\n+              \"image: \" + FMWINFRA_IMAGE_TO_USE_IN_SPEC);\n+    });\n+\n+    // run create-domain.sh to create domain.yaml file, run kubectl to create the domain and verify\n+    //verify EM console is accessible\n+    createDomainAndVerify(domainUid, sampleBase);\n+\n+  }\n+\n+  private void createDomainAndVerify(String domainName, Path sampleBase) {\n+\n+    // run create-domain.sh to create domain.yaml file\n+    CommandParams params = new CommandParams().defaults();\n+    params.command(\"sh \"\n+            + Paths.get(sampleBase.toString(), \"create-domain.sh\").toString()\n+            + \" -i \" + Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString()\n+            + \" -o \"\n+            + Paths.get(sampleBase.toString()));\n+\n+    logger.info(\"Run create-domain.sh to create domain.yaml file\");\n+    boolean result = Command.withParams(params).execute();\n+    assertTrue(result, \"Failed to create domain.yaml\");\n+\n+    // run kubectl to create the domain\n+    logger.info(\"Run kubectl to create the domain\");\n+    params = new CommandParams().defaults();\n+    params.command(\"kubectl apply -f \"\n+            + Paths.get(sampleBase.toString(), \"weblogic-domains/\" + domainName + \"/domain.yaml\").toString());\n+\n+    result = Command.withParams(params).execute();\n+    assertTrue(result, \"Failed to create domain custom resource\");\n+    logger.info(\"Run create-domain.sh to create the domain\");", "originalCommit": "58e78b589c0478174e0ab62e0e4e0b667bf0d6ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA2NDAzMA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2112#discussion_r552064030", "bodyText": "Sorry, line195 logging infor is a mistake. I removed it. The correct one is line 176\nlogger.info(\"Run create-domain.sh to create domain.yaml file\");\nCommandParams params = new CommandParams().defaults();\nparams.command(\"sh \"\n+ Paths.get(sampleBase.toString(), \"create-domain.sh\").toString()\n+ \" -i \" + Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString()\n+ \" -o \"\n+ Paths.get(sampleBase.toString()));", "author": "maggiehe00", "createdAt": "2021-01-05T17:00:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ5NjkxMw=="}], "type": "inlineReview", "revised_code": {"commit": "0ec631a358abcd0c45763a8509525919b0ab5d16", "chunk": "diff --git a/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItFmwSample.java b/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItFmwSample.java\nindex 2e6bc04127..6c08d3d4e4 100644\n--- a/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItFmwSample.java\n+++ b/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItFmwSample.java\n\n@@ -1,4 +1,4 @@\n-// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Copyright (c) 2021, Oracle and/or its affiliates.\n // Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n \n package oracle.weblogic.kubernetes;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ5NzY4OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2112#discussion_r551497688", "bodyText": "remove commented code", "author": "sankarpn", "createdAt": "2021-01-04T18:44:56Z", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItFmwSample.java", "diffHunk": "@@ -0,0 +1,473 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.BASE_IMAGES_REPO_SECRET;\n+import static oracle.weblogic.kubernetes.TestConstants.DB_IMAGE_TO_USE_IN_SPEC;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.FMWINFRA_IMAGE_TO_USE_IN_SPEC;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.PV_ROOT;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WORK_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.impl.primitive.Command.defaultCommandParams;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvcExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createRcuSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretForBaseImages;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getExternalServicePodName;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.DbUtils.getNewSuffixCount;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.replaceStringInFile;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.apache.commons.io.FileUtils.copyDirectory;\n+import static org.apache.commons.io.FileUtils.deleteDirectory;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to FMW domain samples.\n+ */\n+@DisplayName(\"Verify the JRF domain on pv sample using wlst\")\n+@IntegrationTest\n+public class ItFmwSample {\n+\n+  private static String dbNamespace = null;\n+  private static String domainNamespace = null;\n+\n+  private static final Path samplePath = Paths.get(ITTESTS_DIR, \"../kubernetes/samples\");\n+  private static final Path tempSamplePath = Paths.get(WORK_DIR, \"sample-testing\");\n+  private final String domainUid = \"jrfsamplepv\";\n+\n+  private static final String RCUSCHEMAPREFIX = \"jrfsamplepv\";\n+  private static final String ORACLEDBURLPREFIX = \"oracle-db.\";\n+  private static final String ORACLEDBSUFFIX = \".svc.cluster.local:1521/devpdb.k8s\";\n+  private static final String RCUSYSUSERNAME = \"sys\";\n+  private static final String RCUSYSPASSWORD = \"Oradoc_db1\";\n+  private static final String RCUSCHEMAUSERNAME = \"myrcuuser\";\n+  private static final String RCUSCHEMAPASSWORD = \"Oradoc_db1\";\n+  private static String dbUrl = null;\n+  // in general the node port range has to be between 30,000 to 32,767\n+  // to avoid port conflict because of the delay in using it, the port here\n+  // starts with 30100\n+  final int t3ChannelPort = getNextFreePort(30172, 32767);\n+\n+  // create standard, reusable retry/backoff policy\n+  private static final ConditionFactory withStandardRetryPolicy\n+      = with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(10, MINUTES).await();\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Start DB service and create RCU schema.\n+   * Assigns unique namespaces for operator and domains.\n+   * Pull FMW image and Oracle DB image if running tests in Kind cluster.\n+   * Installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+    logger = getLogger();\n+\n+    logger.info(\"Assign a unique namespace for DB and RCU\");\n+    assertNotNull(namespaces.get(0), \"Namespace is null\");\n+    dbNamespace = namespaces.get(0);\n+    dbUrl = ORACLEDBURLPREFIX + dbNamespace + ORACLEDBSUFFIX;\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    assertNotNull(namespaces.get(1), \"Namespace is null\");\n+    String opNamespace = namespaces.get(1);\n+\n+    logger.info(\"Assign a unique namespace for JRF domain\");\n+    assertNotNull(namespaces.get(2), \"Namespace is null\");\n+    domainNamespace = namespaces.get(2);\n+\n+    int dbPort = 30011 + getNewSuffixCount();\n+    logger.info(\"Start DB and create RCU schema for namespace: {0}, RCU prefix: {1}, \"\n+        + \"dbUrl: {2}, dbImage: {3},  fmwImage: {4}, dbPort: {5} \", dbNamespace, RCUSCHEMAPREFIX, dbUrl,\n+        DB_IMAGE_TO_USE_IN_SPEC, FMWINFRA_IMAGE_TO_USE_IN_SPEC, dbPort);\n+    assertDoesNotThrow(() -> setupDBandRCUschemaBySample(DB_IMAGE_TO_USE_IN_SPEC, FMWINFRA_IMAGE_TO_USE_IN_SPEC,\n+        RCUSCHEMAPREFIX, dbNamespace, dbPort, dbUrl),\n+        String.format(\"Failed to create RCU schema for prefix %s in the namespace %s with \"\n+        + \"dbUrl %s\", RCUSCHEMAPREFIX, dbNamespace, dbUrl));\n+\n+\n+    // create pull secrets for WebLogic image when running in non Kind Kubernetes cluster\n+    // this secret is used only for non-kind cluster\n+    createSecretForBaseImages(domainNamespace);\n+\n+    // install operator and verify its running in ready state\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+  }\n+\n+  /**\n+   * Test JRF domain on pv samples using domains created by wlst.\n+   * Verify Pod is ready and service exists for both admin server and managed servers.\n+   * Verify EM console is accessible.\n+   */\n+  @Test\n+  @DisplayName(\"Test JRF domain on PV sample\")\n+  public void testJrfDomainInPvUsingWlst() {\n+    setupSample();\n+    // create persistent volume and persistent volume claims used by the samples\n+    createPvPvc(domainUid);\n+\n+    //create WebLogic secrets for the domain\n+    createSecretWithUsernamePassword(domainUid + \"-weblogic-credentials\", domainNamespace,\n+            ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n+    // create RCU credential secret\n+    createRcuSecretWithUsernamePassword(domainUid + \"-rcu-credentials\", domainNamespace,\n+        RCUSCHEMAUSERNAME, RCUSCHEMAPASSWORD, RCUSYSUSERNAME, RCUSYSPASSWORD);\n+\n+    Path sampleBase = Paths.get(tempSamplePath.toString(),\n+        \"scripts/create-fmw-infrastructure-domain/domain-home-on-pv\");\n+\n+    //update create-domain-inputs.yaml with the values from this test\n+    updateDomainInputsFile(domainUid, sampleBase);\n+\n+    // change image name\n+    assertDoesNotThrow(() -> {\n+      replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n+              \"image: container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4\",\n+              \"image: \" + FMWINFRA_IMAGE_TO_USE_IN_SPEC);\n+    });\n+\n+    // run create-domain.sh to create domain.yaml file, run kubectl to create the domain and verify\n+    //verify EM console is accessible\n+    createDomainAndVerify(domainUid, sampleBase);\n+\n+  }\n+\n+  private void createDomainAndVerify(String domainName, Path sampleBase) {\n+\n+    // run create-domain.sh to create domain.yaml file\n+    CommandParams params = new CommandParams().defaults();\n+    params.command(\"sh \"\n+            + Paths.get(sampleBase.toString(), \"create-domain.sh\").toString()\n+            + \" -i \" + Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString()\n+            + \" -o \"\n+            + Paths.get(sampleBase.toString()));\n+\n+    logger.info(\"Run create-domain.sh to create domain.yaml file\");\n+    boolean result = Command.withParams(params).execute();\n+    assertTrue(result, \"Failed to create domain.yaml\");\n+\n+    // run kubectl to create the domain\n+    logger.info(\"Run kubectl to create the domain\");\n+    params = new CommandParams().defaults();\n+    params.command(\"kubectl apply -f \"\n+            + Paths.get(sampleBase.toString(), \"weblogic-domains/\" + domainName + \"/domain.yaml\").toString());\n+\n+    result = Command.withParams(params).execute();\n+    assertTrue(result, \"Failed to create domain custom resource\");\n+    logger.info(\"Run create-domain.sh to create the domain\");\n+\n+    // wait for the domain to exist\n+    logger.info(\"Checking for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+            .conditionEvaluationListener(\n+                condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                            domainName,\n+                            domainNamespace,\n+                            condition.getElapsedTimeInMS(),\n+                            condition.getRemainingTimeInMS()))\n+            .until(domainExists(domainName, DOMAIN_VERSION, domainNamespace));\n+\n+    final String adminServerName = \"admin-server\";\n+    final String adminServerPodName = domainName + \"-\" + adminServerName;\n+\n+    final String managedServerNameBase = \"managed-server\";\n+    String managedServerPodNamePrefix = domainName + \"-\" + managedServerNameBase;\n+    int replicaCount = 2;\n+\n+    // verify the admin server service and pod is created\n+    checkPodReadyAndServiceExists(adminServerPodName, domainName, domainNamespace);\n+\n+    // verify managed server services created and pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodReadyAndServiceExists(managedServerPodNamePrefix + i, domainName, domainNamespace);\n+    }\n+\n+    checkAccessToEMconsole(adminServerPodName);\n+  }\n+\n+  private void createPvPvc(String domainUid) {\n+\n+    String pvName = domainUid + \"-weblogic-sample-pv\";\n+    String pvcName = domainUid + \"-weblogic-sample-pvc\";\n+\n+    Path pvpvcBase = Paths.get(tempSamplePath.toString(),\n+        \"scripts/create-weblogic-domain-pv-pvc\");\n+\n+    // create pv and pvc\n+    assertDoesNotThrow(() -> {\n+      // when tests are running in local box the PV directories need to exist\n+      Path pvHostPathBase;\n+      pvHostPathBase = Files.createDirectories(Paths.get(PV_ROOT, this.getClass().getSimpleName()));\n+      Path pvHostPath;\n+      pvHostPath = Files.createDirectories(Paths.get(PV_ROOT, this.getClass().getSimpleName(), pvName));\n+\n+      logger.info(\"Creating PV directory host path {0}\", pvHostPath);\n+      deleteDirectory(pvHostPath.toFile());\n+      Files.createDirectories(pvHostPath);\n+      String command1  = \"chmod -R 777 \" + pvHostPathBase;\n+      logger.info(\"Command1 to be executed: \" + command1);\n+      assertTrue(new Command()\n+          .withParams(new CommandParams()\n+            .command(command1))\n+          .execute(), \"Failed to chmod \" + PV_ROOT);\n+\n+      // set the pvHostPath in create-pv-pvc-inputs.yaml\n+      replaceStringInFile(Paths.get(pvpvcBase.toString(), \"create-pv-pvc-inputs.yaml\").toString(),\n+          \"#weblogicDomainStoragePath: /scratch/k8s_dir\", \"weblogicDomainStoragePath: \" + pvHostPath);\n+      // set the namespace in create-pv-pvc-inputs.yaml\n+      replaceStringInFile(Paths.get(pvpvcBase.toString(), \"create-pv-pvc-inputs.yaml\").toString(),\n+          \"namespace: default\", \"namespace: \" + domainNamespace);\n+      // set the pv storage policy to Recycle in create-pv-pvc-inputs.yaml\n+      replaceStringInFile(Paths.get(pvpvcBase.toString(), \"create-pv-pvc-inputs.yaml\").toString(),\n+          \"weblogicDomainStorageReclaimPolicy: Retain\", \"weblogicDomainStorageReclaimPolicy: Recycle\");\n+      replaceStringInFile(Paths.get(pvpvcBase.toString(), \"create-pv-pvc-inputs.yaml\").toString(),\n+          \"domainUID:\", \"domainUID: \" + domainUid);\n+    });\n+\n+    // generate the create-pv-pvc-inputs.yaml\n+    CommandParams params = new CommandParams().defaults();\n+    params.command(\"sh \"\n+        + Paths.get(pvpvcBase.toString(), \"create-pv-pvc.sh\").toString()\n+        + \" -i \" + Paths.get(pvpvcBase.toString(), \"create-pv-pvc-inputs.yaml\").toString()\n+        + \" -o \"\n+        + Paths.get(pvpvcBase.toString()));\n+\n+    boolean result = Command.withParams(params).execute();\n+    assertTrue(result, \"Failed to create create-pv-pvc-inputs.yaml\");\n+\n+    //create pv and pvc\n+    params = new CommandParams().defaults();\n+    params.command(\"kubectl create -f \" + Paths.get(pvpvcBase.toString(),\n+        \"pv-pvcs/\" + domainUid + \"-weblogic-sample-pv.yaml\").toString());\n+    result = Command.withParams(params).execute();\n+    assertTrue(result, \"Failed to create pv\");\n+\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pv {0} to be ready, \"\n+                + \"(elapsed time {1}ms, remaining time {2}ms)\",\n+                pvName,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> pvExists(pvName, null),\n+            String.format(\"pvExists failed with ApiException for pv %s\",\n+                pvName)));\n+\n+    params = new CommandParams().defaults();\n+    params.command(\"kubectl create -f \" + Paths.get(pvpvcBase.toString(),\n+        \"pv-pvcs/\" + domainUid + \"-weblogic-sample-pvc.yaml\").toString());\n+    result = Command.withParams(params).execute();\n+    assertTrue(result, \"Failed to create pvc\");\n+\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pv {0} to be ready in namespace {1} \"\n+                + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                pvcName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> pvcExists(pvcName, domainNamespace),\n+            String.format(\"pvcExists failed with ApiException for pvc %s\",\n+                pvcName)));\n+\n+  }\n+\n+  // copy samples directory to a temporary location\n+  private static void setupSample() {\n+    assertDoesNotThrow(() -> {\n+      // copy ITTESTS_DIR + \"../kubernates/samples\" to WORK_DIR + \"/sample-testing\"\n+      logger.info(\"Deleting and recreating {0}\", tempSamplePath);\n+      //Files.createDirectories(tempSamplePath);", "originalCommit": "58e78b589c0478174e0ab62e0e4e0b667bf0d6ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA2NDE5OA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2112#discussion_r552064198", "bodyText": "Done", "author": "maggiehe00", "createdAt": "2021-01-05T17:00:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ5NzY4OA=="}], "type": "inlineReview", "revised_code": {"commit": "0ec631a358abcd0c45763a8509525919b0ab5d16", "chunk": "diff --git a/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItFmwSample.java b/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItFmwSample.java\nindex 2e6bc04127..6c08d3d4e4 100644\n--- a/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItFmwSample.java\n+++ b/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItFmwSample.java\n\n@@ -1,4 +1,4 @@\n-// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Copyright (c) 2021, Oracle and/or its affiliates.\n // Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n \n package oracle.weblogic.kubernetes;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ5ODQ3MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2112#discussion_r551498470", "bodyText": "is 2 seconds enough? do you want to replace it with a dynamic wait?", "author": "sankarpn", "createdAt": "2021-01-04T18:46:25Z", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/ItFmwSample.java", "diffHunk": "@@ -0,0 +1,473 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.weblogic.kubernetes;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+\n+import io.kubernetes.client.openapi.ApiException;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.Command;\n+import oracle.weblogic.kubernetes.actions.impl.primitive.CommandParams;\n+import oracle.weblogic.kubernetes.annotations.IntegrationTest;\n+import oracle.weblogic.kubernetes.annotations.Namespaces;\n+import oracle.weblogic.kubernetes.logging.LoggingFacade;\n+import org.awaitility.core.ConditionFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+import static java.util.concurrent.TimeUnit.MINUTES;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_PASSWORD_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.ADMIN_USERNAME_DEFAULT;\n+import static oracle.weblogic.kubernetes.TestConstants.BASE_IMAGES_REPO_SECRET;\n+import static oracle.weblogic.kubernetes.TestConstants.DB_IMAGE_TO_USE_IN_SPEC;\n+import static oracle.weblogic.kubernetes.TestConstants.DOMAIN_VERSION;\n+import static oracle.weblogic.kubernetes.TestConstants.FMWINFRA_IMAGE_TO_USE_IN_SPEC;\n+import static oracle.weblogic.kubernetes.TestConstants.K8S_NODEPORT_HOST;\n+import static oracle.weblogic.kubernetes.TestConstants.PV_ROOT;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.ITTESTS_DIR;\n+import static oracle.weblogic.kubernetes.actions.ActionConstants.WORK_DIR;\n+import static oracle.weblogic.kubernetes.actions.TestActions.getServiceNodePort;\n+import static oracle.weblogic.kubernetes.actions.impl.primitive.Command.defaultCommandParams;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.domainExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvExists;\n+import static oracle.weblogic.kubernetes.assertions.TestAssertions.pvcExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.checkPodReadyAndServiceExists;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createRcuSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretForBaseImages;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.createSecretWithUsernamePassword;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.getExternalServicePodName;\n+import static oracle.weblogic.kubernetes.utils.CommonTestUtils.installAndVerifyOperator;\n+import static oracle.weblogic.kubernetes.utils.DbUtils.getNewSuffixCount;\n+import static oracle.weblogic.kubernetes.utils.FileUtils.replaceStringInFile;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.callWebAppAndWaitTillReady;\n+import static oracle.weblogic.kubernetes.utils.TestUtils.getNextFreePort;\n+import static oracle.weblogic.kubernetes.utils.ThreadSafeLogger.getLogger;\n+import static org.apache.commons.io.FileUtils.copyDirectory;\n+import static org.apache.commons.io.FileUtils.deleteDirectory;\n+import static org.awaitility.Awaitility.with;\n+import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+/**\n+ * Tests related to FMW domain samples.\n+ */\n+@DisplayName(\"Verify the JRF domain on pv sample using wlst\")\n+@IntegrationTest\n+public class ItFmwSample {\n+\n+  private static String dbNamespace = null;\n+  private static String domainNamespace = null;\n+\n+  private static final Path samplePath = Paths.get(ITTESTS_DIR, \"../kubernetes/samples\");\n+  private static final Path tempSamplePath = Paths.get(WORK_DIR, \"sample-testing\");\n+  private final String domainUid = \"jrfsamplepv\";\n+\n+  private static final String RCUSCHEMAPREFIX = \"jrfsamplepv\";\n+  private static final String ORACLEDBURLPREFIX = \"oracle-db.\";\n+  private static final String ORACLEDBSUFFIX = \".svc.cluster.local:1521/devpdb.k8s\";\n+  private static final String RCUSYSUSERNAME = \"sys\";\n+  private static final String RCUSYSPASSWORD = \"Oradoc_db1\";\n+  private static final String RCUSCHEMAUSERNAME = \"myrcuuser\";\n+  private static final String RCUSCHEMAPASSWORD = \"Oradoc_db1\";\n+  private static String dbUrl = null;\n+  // in general the node port range has to be between 30,000 to 32,767\n+  // to avoid port conflict because of the delay in using it, the port here\n+  // starts with 30100\n+  final int t3ChannelPort = getNextFreePort(30172, 32767);\n+\n+  // create standard, reusable retry/backoff policy\n+  private static final ConditionFactory withStandardRetryPolicy\n+      = with().pollDelay(2, SECONDS)\n+          .and().with().pollInterval(10, SECONDS)\n+          .atMost(10, MINUTES).await();\n+\n+  private static LoggingFacade logger = null;\n+\n+  /**\n+   * Start DB service and create RCU schema.\n+   * Assigns unique namespaces for operator and domains.\n+   * Pull FMW image and Oracle DB image if running tests in Kind cluster.\n+   * Installs operator.\n+   *\n+   * @param namespaces injected by JUnit\n+   */\n+  @BeforeAll\n+  public static void initAll(@Namespaces(3) List<String> namespaces) {\n+    logger = getLogger();\n+\n+    logger.info(\"Assign a unique namespace for DB and RCU\");\n+    assertNotNull(namespaces.get(0), \"Namespace is null\");\n+    dbNamespace = namespaces.get(0);\n+    dbUrl = ORACLEDBURLPREFIX + dbNamespace + ORACLEDBSUFFIX;\n+\n+    logger.info(\"Assign a unique namespace for operator\");\n+    assertNotNull(namespaces.get(1), \"Namespace is null\");\n+    String opNamespace = namespaces.get(1);\n+\n+    logger.info(\"Assign a unique namespace for JRF domain\");\n+    assertNotNull(namespaces.get(2), \"Namespace is null\");\n+    domainNamespace = namespaces.get(2);\n+\n+    int dbPort = 30011 + getNewSuffixCount();\n+    logger.info(\"Start DB and create RCU schema for namespace: {0}, RCU prefix: {1}, \"\n+        + \"dbUrl: {2}, dbImage: {3},  fmwImage: {4}, dbPort: {5} \", dbNamespace, RCUSCHEMAPREFIX, dbUrl,\n+        DB_IMAGE_TO_USE_IN_SPEC, FMWINFRA_IMAGE_TO_USE_IN_SPEC, dbPort);\n+    assertDoesNotThrow(() -> setupDBandRCUschemaBySample(DB_IMAGE_TO_USE_IN_SPEC, FMWINFRA_IMAGE_TO_USE_IN_SPEC,\n+        RCUSCHEMAPREFIX, dbNamespace, dbPort, dbUrl),\n+        String.format(\"Failed to create RCU schema for prefix %s in the namespace %s with \"\n+        + \"dbUrl %s\", RCUSCHEMAPREFIX, dbNamespace, dbUrl));\n+\n+\n+    // create pull secrets for WebLogic image when running in non Kind Kubernetes cluster\n+    // this secret is used only for non-kind cluster\n+    createSecretForBaseImages(domainNamespace);\n+\n+    // install operator and verify its running in ready state\n+    installAndVerifyOperator(opNamespace, domainNamespace);\n+  }\n+\n+  /**\n+   * Test JRF domain on pv samples using domains created by wlst.\n+   * Verify Pod is ready and service exists for both admin server and managed servers.\n+   * Verify EM console is accessible.\n+   */\n+  @Test\n+  @DisplayName(\"Test JRF domain on PV sample\")\n+  public void testJrfDomainInPvUsingWlst() {\n+    setupSample();\n+    // create persistent volume and persistent volume claims used by the samples\n+    createPvPvc(domainUid);\n+\n+    //create WebLogic secrets for the domain\n+    createSecretWithUsernamePassword(domainUid + \"-weblogic-credentials\", domainNamespace,\n+            ADMIN_USERNAME_DEFAULT, ADMIN_PASSWORD_DEFAULT);\n+    // create RCU credential secret\n+    createRcuSecretWithUsernamePassword(domainUid + \"-rcu-credentials\", domainNamespace,\n+        RCUSCHEMAUSERNAME, RCUSCHEMAPASSWORD, RCUSYSUSERNAME, RCUSYSPASSWORD);\n+\n+    Path sampleBase = Paths.get(tempSamplePath.toString(),\n+        \"scripts/create-fmw-infrastructure-domain/domain-home-on-pv\");\n+\n+    //update create-domain-inputs.yaml with the values from this test\n+    updateDomainInputsFile(domainUid, sampleBase);\n+\n+    // change image name\n+    assertDoesNotThrow(() -> {\n+      replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n+              \"image: container-registry.oracle.com/middleware/fmw-infrastructure:12.2.1.4\",\n+              \"image: \" + FMWINFRA_IMAGE_TO_USE_IN_SPEC);\n+    });\n+\n+    // run create-domain.sh to create domain.yaml file, run kubectl to create the domain and verify\n+    //verify EM console is accessible\n+    createDomainAndVerify(domainUid, sampleBase);\n+\n+  }\n+\n+  private void createDomainAndVerify(String domainName, Path sampleBase) {\n+\n+    // run create-domain.sh to create domain.yaml file\n+    CommandParams params = new CommandParams().defaults();\n+    params.command(\"sh \"\n+            + Paths.get(sampleBase.toString(), \"create-domain.sh\").toString()\n+            + \" -i \" + Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString()\n+            + \" -o \"\n+            + Paths.get(sampleBase.toString()));\n+\n+    logger.info(\"Run create-domain.sh to create domain.yaml file\");\n+    boolean result = Command.withParams(params).execute();\n+    assertTrue(result, \"Failed to create domain.yaml\");\n+\n+    // run kubectl to create the domain\n+    logger.info(\"Run kubectl to create the domain\");\n+    params = new CommandParams().defaults();\n+    params.command(\"kubectl apply -f \"\n+            + Paths.get(sampleBase.toString(), \"weblogic-domains/\" + domainName + \"/domain.yaml\").toString());\n+\n+    result = Command.withParams(params).execute();\n+    assertTrue(result, \"Failed to create domain custom resource\");\n+    logger.info(\"Run create-domain.sh to create the domain\");\n+\n+    // wait for the domain to exist\n+    logger.info(\"Checking for domain custom resource in namespace {0}\", domainNamespace);\n+    withStandardRetryPolicy\n+            .conditionEvaluationListener(\n+                condition -> logger.info(\"Waiting for domain {0} to be created in namespace {1} \"\n+                                    + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                            domainName,\n+                            domainNamespace,\n+                            condition.getElapsedTimeInMS(),\n+                            condition.getRemainingTimeInMS()))\n+            .until(domainExists(domainName, DOMAIN_VERSION, domainNamespace));\n+\n+    final String adminServerName = \"admin-server\";\n+    final String adminServerPodName = domainName + \"-\" + adminServerName;\n+\n+    final String managedServerNameBase = \"managed-server\";\n+    String managedServerPodNamePrefix = domainName + \"-\" + managedServerNameBase;\n+    int replicaCount = 2;\n+\n+    // verify the admin server service and pod is created\n+    checkPodReadyAndServiceExists(adminServerPodName, domainName, domainNamespace);\n+\n+    // verify managed server services created and pods are ready\n+    for (int i = 1; i <= replicaCount; i++) {\n+      checkPodReadyAndServiceExists(managedServerPodNamePrefix + i, domainName, domainNamespace);\n+    }\n+\n+    checkAccessToEMconsole(adminServerPodName);\n+  }\n+\n+  private void createPvPvc(String domainUid) {\n+\n+    String pvName = domainUid + \"-weblogic-sample-pv\";\n+    String pvcName = domainUid + \"-weblogic-sample-pvc\";\n+\n+    Path pvpvcBase = Paths.get(tempSamplePath.toString(),\n+        \"scripts/create-weblogic-domain-pv-pvc\");\n+\n+    // create pv and pvc\n+    assertDoesNotThrow(() -> {\n+      // when tests are running in local box the PV directories need to exist\n+      Path pvHostPathBase;\n+      pvHostPathBase = Files.createDirectories(Paths.get(PV_ROOT, this.getClass().getSimpleName()));\n+      Path pvHostPath;\n+      pvHostPath = Files.createDirectories(Paths.get(PV_ROOT, this.getClass().getSimpleName(), pvName));\n+\n+      logger.info(\"Creating PV directory host path {0}\", pvHostPath);\n+      deleteDirectory(pvHostPath.toFile());\n+      Files.createDirectories(pvHostPath);\n+      String command1  = \"chmod -R 777 \" + pvHostPathBase;\n+      logger.info(\"Command1 to be executed: \" + command1);\n+      assertTrue(new Command()\n+          .withParams(new CommandParams()\n+            .command(command1))\n+          .execute(), \"Failed to chmod \" + PV_ROOT);\n+\n+      // set the pvHostPath in create-pv-pvc-inputs.yaml\n+      replaceStringInFile(Paths.get(pvpvcBase.toString(), \"create-pv-pvc-inputs.yaml\").toString(),\n+          \"#weblogicDomainStoragePath: /scratch/k8s_dir\", \"weblogicDomainStoragePath: \" + pvHostPath);\n+      // set the namespace in create-pv-pvc-inputs.yaml\n+      replaceStringInFile(Paths.get(pvpvcBase.toString(), \"create-pv-pvc-inputs.yaml\").toString(),\n+          \"namespace: default\", \"namespace: \" + domainNamespace);\n+      // set the pv storage policy to Recycle in create-pv-pvc-inputs.yaml\n+      replaceStringInFile(Paths.get(pvpvcBase.toString(), \"create-pv-pvc-inputs.yaml\").toString(),\n+          \"weblogicDomainStorageReclaimPolicy: Retain\", \"weblogicDomainStorageReclaimPolicy: Recycle\");\n+      replaceStringInFile(Paths.get(pvpvcBase.toString(), \"create-pv-pvc-inputs.yaml\").toString(),\n+          \"domainUID:\", \"domainUID: \" + domainUid);\n+    });\n+\n+    // generate the create-pv-pvc-inputs.yaml\n+    CommandParams params = new CommandParams().defaults();\n+    params.command(\"sh \"\n+        + Paths.get(pvpvcBase.toString(), \"create-pv-pvc.sh\").toString()\n+        + \" -i \" + Paths.get(pvpvcBase.toString(), \"create-pv-pvc-inputs.yaml\").toString()\n+        + \" -o \"\n+        + Paths.get(pvpvcBase.toString()));\n+\n+    boolean result = Command.withParams(params).execute();\n+    assertTrue(result, \"Failed to create create-pv-pvc-inputs.yaml\");\n+\n+    //create pv and pvc\n+    params = new CommandParams().defaults();\n+    params.command(\"kubectl create -f \" + Paths.get(pvpvcBase.toString(),\n+        \"pv-pvcs/\" + domainUid + \"-weblogic-sample-pv.yaml\").toString());\n+    result = Command.withParams(params).execute();\n+    assertTrue(result, \"Failed to create pv\");\n+\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pv {0} to be ready, \"\n+                + \"(elapsed time {1}ms, remaining time {2}ms)\",\n+                pvName,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> pvExists(pvName, null),\n+            String.format(\"pvExists failed with ApiException for pv %s\",\n+                pvName)));\n+\n+    params = new CommandParams().defaults();\n+    params.command(\"kubectl create -f \" + Paths.get(pvpvcBase.toString(),\n+        \"pv-pvcs/\" + domainUid + \"-weblogic-sample-pvc.yaml\").toString());\n+    result = Command.withParams(params).execute();\n+    assertTrue(result, \"Failed to create pvc\");\n+\n+    withStandardRetryPolicy\n+        .conditionEvaluationListener(\n+            condition -> logger.info(\"Waiting for pv {0} to be ready in namespace {1} \"\n+                + \"(elapsed time {2}ms, remaining time {3}ms)\",\n+                pvcName,\n+                domainNamespace,\n+                condition.getElapsedTimeInMS(),\n+                condition.getRemainingTimeInMS()))\n+        .until(assertDoesNotThrow(() -> pvcExists(pvcName, domainNamespace),\n+            String.format(\"pvcExists failed with ApiException for pvc %s\",\n+                pvcName)));\n+\n+  }\n+\n+  // copy samples directory to a temporary location\n+  private static void setupSample() {\n+    assertDoesNotThrow(() -> {\n+      // copy ITTESTS_DIR + \"../kubernates/samples\" to WORK_DIR + \"/sample-testing\"\n+      logger.info(\"Deleting and recreating {0}\", tempSamplePath);\n+      //Files.createDirectories(tempSamplePath);\n+      deleteDirectory(tempSamplePath.toFile());\n+      Files.createDirectories(tempSamplePath);\n+\n+      logger.info(\"Copying {0} to {1}\", samplePath, tempSamplePath);\n+      copyDirectory(samplePath.toFile(), tempSamplePath.toFile());\n+    });\n+\n+    String command = \"chmod -R 755 \" + tempSamplePath;\n+    logger.info(\"The command to be executed: \" + command); //TODO\n+    assertTrue(new Command()\n+        .withParams(new CommandParams()\n+            .command(command))\n+        .execute(), \"Failed to chmod tempSamplePath\");\n+  }\n+\n+  private void updateDomainInputsFile(String domainUid, Path sampleBase) {\n+    // change namespace from default to custom, domain name, and t3PublicAddress\n+    assertDoesNotThrow(() -> {\n+      replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n+              \"namespace: default\", \"namespace: \" + domainNamespace);\n+      replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n+              \"domain1\", domainUid);\n+      replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n+              \"#t3PublicAddress:\", \"t3PublicAddress: \" + K8S_NODEPORT_HOST);\n+      replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n+              \"t3ChannelPort: 30012\", \"t3ChannelPort: \" + t3ChannelPort);\n+      replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n+              \"exposeAdminT3Channel: false\", \"exposeAdminT3Channel: true\");\n+      replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n+              \"exposeAdminNodePort: false\", \"exposeAdminNodePort: true\");\n+      replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n+              \"#imagePullSecretName:\", \"imagePullSecretName: \" + BASE_IMAGES_REPO_SECRET);\n+      replaceStringInFile(Paths.get(sampleBase.toString(), \"create-domain-inputs.yaml\").toString(),\n+              \"rcuDatabaseURL: database:1521/service\", \"rcuDatabaseURL: \" + dbUrl);\n+    });\n+  }\n+\n+  /**\n+   * Start Oracle DB instance, create rcu pod and load database schema in the specified namespace.\n+   *\n+   * @param dbImage image name of database\n+   * @param fmwImage image name of FMW\n+   * @param rcuSchemaPrefix rcu SchemaPrefix\n+   * @param dbNamespace namespace where DB and RCU schema are going to start\n+   * @param dbPort NodePort of DB\n+   * @param dbUrl URL of DB\n+   * @throws Exception if any error occurs when setting up RCU database\n+   */\n+\n+  private static void setupDBandRCUschemaBySample(String dbImage, String fmwImage,\n+       String rcuSchemaPrefix, String dbNamespace, int dbPort, String dbUrl) throws ApiException {\n+    LoggingFacade logger = getLogger();\n+\n+    setupSample();\n+    // create pull secrets when running in non Kind Kubernetes cluster\n+    // this secret is used only for non-kind cluster\n+    createSecretForBaseImages(dbNamespace);\n+\n+    logger.info(\"Start Oracle DB with dbImage: {0}, dbPort: {1}, dbNamespace: {2}\",\n+        dbImage, dbPort, dbNamespace);\n+    startOracleDB(dbImage, dbPort, dbNamespace);\n+    logger.info(\"Create RCU schema with fmwImage: {0}, rcuSchemaPrefix: {1}, dbUrl: {2}, \"\n+        + \" dbNamespace: {3}:\", fmwImage, rcuSchemaPrefix, dbUrl, dbNamespace);\n+    createRcuSchema(fmwImage, rcuSchemaPrefix, dbUrl, dbNamespace);\n+\n+  }\n+\n+  /**\n+   * Start Oracle DB pod and service in the specified namespace.\n+   *\n+   * @param dbBaseImageName full image name for DB deployment\n+   * @param dbPort NodePort of DB\n+   * @param dbNamespace namespace where DB instance is going to start\n+   */\n+  private static synchronized void startOracleDB(String dbBaseImageName, int dbPort, String dbNamespace) {\n+    LoggingFacade logger = getLogger();\n+\n+    Path dbSamplePathBase = Paths.get(tempSamplePath.toString(), \"/scripts/create-oracle-db-service/\");\n+    String script = Paths.get(dbSamplePathBase.toString(),  \"start-db-service.sh\").toString();\n+    logger.info(\"Script for startOracleDB: {0}\", script);\n+\n+    String command = script\n+        + \" -i \" + dbBaseImageName\n+        + \" -p \" + dbPort\n+        + \" -s \" + BASE_IMAGES_REPO_SECRET\n+        + \" -n \" + dbNamespace;\n+    logger.info(\"Command for startOracleDb: {0}\", command);\n+    assertTrue(() -> Command.withParams(\n+        defaultCommandParams()\n+            .command(command)\n+            .saveResults(true)\n+            .redirect(true))\n+        .execute(), \"Failed to execute command: \" + command);\n+\n+    // sleep for a while to make sure the DB pod is created\n+    try {\n+      Thread.sleep(2 * 1000);", "originalCommit": "58e78b589c0478174e0ab62e0e4e0b667bf0d6ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA2NzYzMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/2112#discussion_r552067632", "bodyText": "I increased it to 10 seconds.\nI tried dynamic one before without success.", "author": "maggiehe00", "createdAt": "2021-01-05T17:06:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ5ODQ3MA=="}], "type": "inlineReview", "revised_code": {"commit": "0ec631a358abcd0c45763a8509525919b0ab5d16", "chunk": "diff --git a/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItFmwSample.java b/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItFmwSample.java\nindex 2e6bc04127..6c08d3d4e4 100644\n--- a/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItFmwSample.java\n+++ b/integration-tests/src/test/java/oracle/weblogic/kubernetes/ItFmwSample.java\n\n@@ -1,4 +1,4 @@\n-// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Copyright (c) 2021, Oracle and/or its affiliates.\n // Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n \n package oracle.weblogic.kubernetes;\n"}}, {"oid": "f70084482012035b0730d1662670d299278decad", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/f70084482012035b0730d1662670d299278decad", "message": "Merge remote-tracking branch 'origin/develop' into fmwsample", "committedDate": "2021-01-05T07:10:32Z", "type": "commit"}, {"oid": "0ec631a358abcd0c45763a8509525919b0ab5d16", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/0ec631a358abcd0c45763a8509525919b0ab5d16", "message": "addessing review comments", "committedDate": "2021-01-05T08:06:22Z", "type": "commit"}, {"oid": "65332d2ff4bb687ad0a0a37d50858b4f25bf88b8", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/65332d2ff4bb687ad0a0a37d50858b4f25bf88b8", "message": "minor comment modification", "committedDate": "2021-01-05T16:56:39Z", "type": "commit"}]}