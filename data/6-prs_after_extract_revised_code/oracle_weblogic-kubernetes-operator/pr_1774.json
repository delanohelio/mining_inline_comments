{"pr_number": 1774, "pr_title": "Parse all resource versions using BigInteger", "pr_createdAt": "2020-06-29T22:36:25Z", "pr_url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1774", "timeline": [{"oid": "8efdf087294435faf557aad98d811f4302d29c6d", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8efdf087294435faf557aad98d811f4302d29c6d", "message": "Parse all resource versions using BigInteger", "committedDate": "2020-06-29T22:33:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwNjI5MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1774#discussion_r447706290", "bodyText": "Long.parseLong can throw NumberFormatException - why would you swallow it for BigInteger?", "author": "dldnh", "createdAt": "2020-06-30T14:00:58Z", "path": "operator/src/main/java/oracle/kubernetes/operator/Watcher.java", "diffHunk": "@@ -226,12 +227,16 @@ private long computeNextResourceVersionFromMessage(V1Status status) {\n         if (index2 > 0) {\n           String val = message.substring(index1 + 1, index2);\n           if (!isNullOrEmpty(val)) {\n-            return Long.parseLong(val);\n+            try {\n+              return new BigInteger(val);\n+            } catch (NumberFormatException nfe) {", "originalCommit": "8efdf087294435faf557aad98d811f4302d29c6d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6662c6a7060d3966f7f8fe01adcb4ef1ad6c6fc1", "chunk": "diff --git a/operator/src/main/java/oracle/kubernetes/operator/Watcher.java b/operator/src/main/java/oracle/kubernetes/operator/Watcher.java\nindex 4adb578046..43f6f04d69 100644\n--- a/operator/src/main/java/oracle/kubernetes/operator/Watcher.java\n+++ b/operator/src/main/java/oracle/kubernetes/operator/Watcher.java\n\n@@ -225,14 +223,7 @@ abstract class Watcher<T> {\n       if (index1 > 0) {\n         int index2 = message.indexOf(')', index1 + 1);\n         if (index2 > 0) {\n-          String val = message.substring(index1 + 1, index2);\n-          if (!isNullOrEmpty(val)) {\n-            try {\n-              return new BigInteger(val);\n-            } catch (NumberFormatException nfe) {\n-              // no-op\n-            }\n-          }\n+          return KubernetesUtils.getResourceVersion(message.substring(index1 + 1, index2));\n         }\n       }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwNzU1MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1774#discussion_r447707550", "bodyText": "why swallow the NumberFormatException?", "author": "dldnh", "createdAt": "2020-06-30T14:02:39Z", "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/KubernetesUtils.java", "diffHunk": "@@ -128,14 +129,22 @@ public static boolean isFirstNewer(V1ObjectMeta first, V1ObjectMeta second) {\n     DateTime time2 = second.getCreationTimestamp();\n \n     if (time1.equals(time2)) {\n-      return getResourceVersion(first) > getResourceVersion(second);\n+      return getResourceVersion(first).compareTo(getResourceVersion(second)) > 0;\n     } else {\n       return time1.isAfter(time2);\n     }\n   }\n \n-  private static int getResourceVersion(V1ObjectMeta metadata) {\n-    return Integer.parseInt(metadata.getResourceVersion());\n+  private static BigInteger getResourceVersion(V1ObjectMeta metadata) {\n+    String resVersion = metadata.getResourceVersion();\n+    if (resVersion != null) {\n+      try {\n+        return new BigInteger(resVersion);\n+      } catch (NumberFormatException nfe) {\n+        // no-op", "originalCommit": "8efdf087294435faf557aad98d811f4302d29c6d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6662c6a7060d3966f7f8fe01adcb4ef1ad6c6fc1", "chunk": "diff --git a/operator/src/main/java/oracle/kubernetes/operator/helpers/KubernetesUtils.java b/operator/src/main/java/oracle/kubernetes/operator/helpers/KubernetesUtils.java\nindex 58260fd766..d5956a4473 100644\n--- a/operator/src/main/java/oracle/kubernetes/operator/helpers/KubernetesUtils.java\n+++ b/operator/src/main/java/oracle/kubernetes/operator/helpers/KubernetesUtils.java\n\n@@ -135,13 +136,41 @@ public class KubernetesUtils {\n     }\n   }\n \n-  private static BigInteger getResourceVersion(V1ObjectMeta metadata) {\n-    String resVersion = metadata.getResourceVersion();\n-    if (resVersion != null) {\n+  /**\n+   * Parse the resource version from the metadata. According to the Kubernetes design documentation,\n+   * https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/\n+   *  api-conventions.md#concurrency-control-and-consistency, the resource version is technically opaque; however,\n+   * the Kubernetes design also requires that clients be able to list changes to resources \"after\" the last\n+   * change to the same or different resource. Therefore, all Kubernetes implementations use a increasing positive\n+   * integer value for the resource version. This can be useful to detect out-of-order watch events. This method\n+   * parses the metadata's resource version into a big integer or to 0, if the value is not parsable.\n+   * @param metadata Meta data containing resource version\n+   * @return The integer value of the resource version or 0, if the value is not parsable\n+   */\n+  public static BigInteger getResourceVersion(V1ObjectMeta metadata) {\n+    if (metadata != null) {\n+      return getResourceVersion(metadata.getResourceVersion());\n+    }\n+    return BigInteger.ZERO;\n+  }\n+\n+  /**\n+   * Parse the resource version. According to the Kubernetes design documentation,\n+   * https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/\n+   *  api-conventions.md#concurrency-control-and-consistency, the resource version is technically opaque; however,\n+   * the Kubernetes design also requires that clients be able to list changes to resources \"after\" the last\n+   * change to the same or different resource. Therefore, all Kubernetes implementations use a increasing positive\n+   * integer value for the resource version. This can be useful to detect out-of-order watch events. This method\n+   * parses the metadata's resource version into a big integer or to 0, if the value is not parsable.\n+   * @param resVersion resource version\n+   * @return The integer value of the resource version or 0, if the value is not parsable\n+   */\n+  public static BigInteger getResourceVersion(String resVersion) {\n+    if (!isNullOrEmpty(resVersion)) {\n       try {\n         return new BigInteger(resVersion);\n       } catch (NumberFormatException nfe) {\n-        // no-op\n+        // no-op, fall through and return 0\n       }\n     }\n     return BigInteger.ZERO;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcxMDgzOA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1774#discussion_r447710838", "bodyText": "no op or return BI.ZERO?", "author": "markxnelson", "createdAt": "2020-06-30T14:07:04Z", "path": "operator/src/main/java/oracle/kubernetes/operator/Watcher.java", "diffHunk": "@@ -226,12 +227,16 @@ private long computeNextResourceVersionFromMessage(V1Status status) {\n         if (index2 > 0) {\n           String val = message.substring(index1 + 1, index2);\n           if (!isNullOrEmpty(val)) {\n-            return Long.parseLong(val);\n+            try {\n+              return new BigInteger(val);\n+            } catch (NumberFormatException nfe) {\n+              // no-op", "originalCommit": "8efdf087294435faf557aad98d811f4302d29c6d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6662c6a7060d3966f7f8fe01adcb4ef1ad6c6fc1", "chunk": "diff --git a/operator/src/main/java/oracle/kubernetes/operator/Watcher.java b/operator/src/main/java/oracle/kubernetes/operator/Watcher.java\nindex 4adb578046..43f6f04d69 100644\n--- a/operator/src/main/java/oracle/kubernetes/operator/Watcher.java\n+++ b/operator/src/main/java/oracle/kubernetes/operator/Watcher.java\n\n@@ -225,14 +223,7 @@ abstract class Watcher<T> {\n       if (index1 > 0) {\n         int index2 = message.indexOf(')', index1 + 1);\n         if (index2 > 0) {\n-          String val = message.substring(index1 + 1, index2);\n-          if (!isNullOrEmpty(val)) {\n-            try {\n-              return new BigInteger(val);\n-            } catch (NumberFormatException nfe) {\n-              // no-op\n-            }\n-          }\n+          return KubernetesUtils.getResourceVersion(message.substring(index1 + 1, index2));\n         }\n       }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcxMTM2Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1774#discussion_r447711363", "bodyText": "no op or zero?", "author": "markxnelson", "createdAt": "2020-06-30T14:07:43Z", "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/KubernetesUtils.java", "diffHunk": "@@ -128,14 +129,22 @@ public static boolean isFirstNewer(V1ObjectMeta first, V1ObjectMeta second) {\n     DateTime time2 = second.getCreationTimestamp();\n \n     if (time1.equals(time2)) {\n-      return getResourceVersion(first) > getResourceVersion(second);\n+      return getResourceVersion(first).compareTo(getResourceVersion(second)) > 0;\n     } else {\n       return time1.isAfter(time2);\n     }\n   }\n \n-  private static int getResourceVersion(V1ObjectMeta metadata) {\n-    return Integer.parseInt(metadata.getResourceVersion());\n+  private static BigInteger getResourceVersion(V1ObjectMeta metadata) {\n+    String resVersion = metadata.getResourceVersion();\n+    if (resVersion != null) {\n+      try {\n+        return new BigInteger(resVersion);\n+      } catch (NumberFormatException nfe) {\n+        // no-op", "originalCommit": "8efdf087294435faf557aad98d811f4302d29c6d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6662c6a7060d3966f7f8fe01adcb4ef1ad6c6fc1", "chunk": "diff --git a/operator/src/main/java/oracle/kubernetes/operator/helpers/KubernetesUtils.java b/operator/src/main/java/oracle/kubernetes/operator/helpers/KubernetesUtils.java\nindex 58260fd766..d5956a4473 100644\n--- a/operator/src/main/java/oracle/kubernetes/operator/helpers/KubernetesUtils.java\n+++ b/operator/src/main/java/oracle/kubernetes/operator/helpers/KubernetesUtils.java\n\n@@ -135,13 +136,41 @@ public class KubernetesUtils {\n     }\n   }\n \n-  private static BigInteger getResourceVersion(V1ObjectMeta metadata) {\n-    String resVersion = metadata.getResourceVersion();\n-    if (resVersion != null) {\n+  /**\n+   * Parse the resource version from the metadata. According to the Kubernetes design documentation,\n+   * https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/\n+   *  api-conventions.md#concurrency-control-and-consistency, the resource version is technically opaque; however,\n+   * the Kubernetes design also requires that clients be able to list changes to resources \"after\" the last\n+   * change to the same or different resource. Therefore, all Kubernetes implementations use a increasing positive\n+   * integer value for the resource version. This can be useful to detect out-of-order watch events. This method\n+   * parses the metadata's resource version into a big integer or to 0, if the value is not parsable.\n+   * @param metadata Meta data containing resource version\n+   * @return The integer value of the resource version or 0, if the value is not parsable\n+   */\n+  public static BigInteger getResourceVersion(V1ObjectMeta metadata) {\n+    if (metadata != null) {\n+      return getResourceVersion(metadata.getResourceVersion());\n+    }\n+    return BigInteger.ZERO;\n+  }\n+\n+  /**\n+   * Parse the resource version. According to the Kubernetes design documentation,\n+   * https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/\n+   *  api-conventions.md#concurrency-control-and-consistency, the resource version is technically opaque; however,\n+   * the Kubernetes design also requires that clients be able to list changes to resources \"after\" the last\n+   * change to the same or different resource. Therefore, all Kubernetes implementations use a increasing positive\n+   * integer value for the resource version. This can be useful to detect out-of-order watch events. This method\n+   * parses the metadata's resource version into a big integer or to 0, if the value is not parsable.\n+   * @param resVersion resource version\n+   * @return The integer value of the resource version or 0, if the value is not parsable\n+   */\n+  public static BigInteger getResourceVersion(String resVersion) {\n+    if (!isNullOrEmpty(resVersion)) {\n       try {\n         return new BigInteger(resVersion);\n       } catch (NumberFormatException nfe) {\n-        // no-op\n+        // no-op, fall through and return 0\n       }\n     }\n     return BigInteger.ZERO;\n"}}, {"oid": "6662c6a7060d3966f7f8fe01adcb4ef1ad6c6fc1", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/6662c6a7060d3966f7f8fe01adcb4ef1ad6c6fc1", "message": "Clarify behavior when failing to parse resource version", "committedDate": "2020-06-30T15:41:36Z", "type": "commit"}, {"oid": "4821d48dad89ea853fba617820c87a79e8587fe3", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/4821d48dad89ea853fba617820c87a79e8587fe3", "message": "Watcher use resource version directly", "committedDate": "2020-06-30T17:51:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwNDAyOQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1774#discussion_r447904029", "bodyText": "you say you will return the value or zero, but you seem to return the value or null", "author": "markxnelson", "createdAt": "2020-06-30T18:46:06Z", "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/KubernetesUtils.java", "diffHunk": "@@ -128,14 +130,47 @@ public static boolean isFirstNewer(V1ObjectMeta first, V1ObjectMeta second) {\n     DateTime time2 = second.getCreationTimestamp();\n \n     if (time1.equals(time2)) {\n-      return getResourceVersion(first) > getResourceVersion(second);\n+      return getResourceVersion(first).compareTo(getResourceVersion(second)) > 0;\n     } else {\n       return time1.isAfter(time2);\n     }\n   }\n \n-  private static int getResourceVersion(V1ObjectMeta metadata) {\n-    return Integer.parseInt(metadata.getResourceVersion());\n+  /**\n+   * Parse the resource version from the metadata. According to the Kubernetes design documentation,\n+   * https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/\n+   *  api-conventions.md#concurrency-control-and-consistency, the resource version is technically opaque; however,\n+   * the Kubernetes design also requires that clients be able to list changes to resources \"after\" the last\n+   * change to the same or different resource. Therefore, all Kubernetes implementations use a increasing positive\n+   * integer value for the resource version. This can be useful to detect out-of-order watch events. This method\n+   * parses the metadata's resource version into a big integer or to 0, if the value is not parsable.\n+   * @param metadata Meta data containing resource version\n+   * @return The integer value of the resource version or 0, if the value is not parsable", "originalCommit": "4821d48dad89ea853fba617820c87a79e8587fe3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwNzU5MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1774#discussion_r447907591", "bodyText": "That's not correct. This method may pass null as the parameter to getResourceVersion(String), which will return 0.", "author": "rjeberhard", "createdAt": "2020-06-30T18:52:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwNDAyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwODY3NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1774#discussion_r447908675", "bodyText": "ah ok, my bad. thanks", "author": "markxnelson", "createdAt": "2020-06-30T18:53:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwNDAyOQ=="}], "type": "inlineReview", "revised_code": null}]}