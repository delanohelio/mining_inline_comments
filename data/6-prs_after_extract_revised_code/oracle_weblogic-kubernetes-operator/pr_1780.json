{"pr_number": 1780, "pr_title": "Remove old situation configuration entries from the introspector map", "pr_createdAt": "2020-07-01T22:56:47Z", "pr_url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1780", "timeline": [{"oid": "c8de65179d8d61a92756c8d82a35f01c41f49946", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c8de65179d8d61a92756c8d82a35f01c41f49946", "message": "Remove old situation configuration entries from the introspector map", "committedDate": "2020-07-01T22:31:06Z", "type": "commit"}, {"oid": "aad4f5a882255a5ef270b53f8da78cffc8f38a34", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/aad4f5a882255a5ef270b53f8da78cffc8f38a34", "message": "simplify implementation", "committedDate": "2020-07-01T22:55:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3MTc3MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1780#discussion_r448671771", "bodyText": "If we have an introspect job result that short circuited and therefore has no file entries that get parsed out, can we still get here?  If so, the existingMap will be stripped of its Sit-Cfg keys, and the update at line 308 looks it will consequently (improperly) remove all Cfg from the introspect cm.", "author": "tbarnes-us", "createdAt": "2020-07-01T23:45:01Z", "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/ConfigMapHelper.java", "diffHunk": "@@ -284,10 +301,10 @@ boolean isCompatibleMap(V1ConfigMap existingMap) {\n       public NextAction onSuccess(Packet packet, CallResponse<V1ConfigMap> callResponse) {\n         DomainPresenceInfo.fromPacket(packet).map(DomainPresenceInfo::getDomain).map(Domain::getIntrospectVersion)\n               .ifPresent(value -> addLabel(INTROSPECTION_STATE_LABEL, value));\n-        V1ConfigMap existingMap = callResponse.getResult();\n+        V1ConfigMap existingMap = withPreservedData(callResponse.getResult());", "originalCommit": "aad4f5a882255a5ef270b53f8da78cffc8f38a34", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3NjEyMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1780#discussion_r448676121", "bodyText": "I am not familiar with this code. But can it handle the situation where the existing override cm is recreated with different config.xml? Is the code only looks for the files in the map or does it looks for changes in the data of those files as well?", "author": "sankarpn", "createdAt": "2020-07-02T00:00:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3MTc3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5NzczMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1780#discussion_r448697732", "bodyText": "I added a unit test, and it was indeed removing the entries because of the way the test code works, but would not have done so in production.\nThis code, in ConfigMapHelper.IntrospectionConfigMapStep\n    public NextAction apply(Packet packet) {\n      IntrospectionLoader loader = new IntrospectionLoader(packet, this);\n      if (loader.isTopologyNotValid()) {\n        return doNext(reportTopologyErrorsAndStop(), packet);\n      } else if (loader.getDomainConfig() == null)  {  // <-- short-circuit\n        return doNext(loader.createIntrospectionVersionUpdateStep(), packet);\n      } else {\n        LOGGER.fine(MessageKeys.WLS_CONFIGURATION_READ, timeSinceJobStart(packet), loader.getDomainConfig());\n        loader.updatePacket();\n        return doNext(loader.createValidationStep(), packet);\n      }\n    }\n\ndetects the short-circuit case in the second branch, and creates a step that only patches a label. Thus, it wouldn't change any of the entries; however, since the local copy in the configmap steps was actually the same instance as the simulated configmap, it was causing the test to fail. I have fixed that by not updating the local copy in the patch-only case, but I should really fix the simulated Kubernetes. This isn't the first time I've had trouble testing a complex case.", "author": "russgold", "createdAt": "2020-07-02T01:25:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3MTc3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODc0NDAwNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1780#discussion_r448744007", "bodyText": "Thanks Russ - I hope that's the only possible path where the candidate map is empty of Sit-Cfg files.  If we can't be sure, then the code could guard against the possibility by only calling 'withPreservedData' when the candidate replacement map actually contains Sit-Cfg files (the introspector currently always generates at least one Sit-Cfg file when it doesn't short-circuit).\nBTW I too am curious about Sankar's question above, and also think that this code path only appears to check for key existence when making decisions - it doesn't seem to check for differences.", "author": "tbarnes-us", "createdAt": "2020-07-02T04:38:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3MTc3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgzODgzOA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1780#discussion_r448838838", "bodyText": "It checks for differences in the pre-existing code.", "author": "russgold", "createdAt": "2020-07-02T08:34:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY3MTc3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "57cfcd2d98624046c1f2335c13fe1053d1d68e11", "chunk": "diff --git a/operator/src/main/java/oracle/kubernetes/operator/helpers/ConfigMapHelper.java b/operator/src/main/java/oracle/kubernetes/operator/helpers/ConfigMapHelper.java\nindex 8c09aaf67f..fbdcda33b1 100644\n--- a/operator/src/main/java/oracle/kubernetes/operator/helpers/ConfigMapHelper.java\n+++ b/operator/src/main/java/oracle/kubernetes/operator/helpers/ConfigMapHelper.java\n\n@@ -301,7 +301,7 @@ public class ConfigMapHelper {\n       public NextAction onSuccess(Packet packet, CallResponse<V1ConfigMap> callResponse) {\n         DomainPresenceInfo.fromPacket(packet).map(DomainPresenceInfo::getDomain).map(Domain::getIntrospectVersion)\n               .ifPresent(value -> addLabel(INTROSPECTION_STATE_LABEL, value));\n-        V1ConfigMap existingMap = withPreservedData(callResponse.getResult());\n+        V1ConfigMap existingMap = withoutTransientData(callResponse.getResult());\n         if (existingMap == null) {\n           return doNext(createConfigMap(getNext()), packet);\n         } else if (isIncompatibleMap(existingMap)) {\n"}}, {"oid": "57cfcd2d98624046c1f2335c13fe1053d1d68e11", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/57cfcd2d98624046c1f2335c13fe1053d1d68e11", "message": "Don't remove transient entries on introspector short-circuit", "committedDate": "2020-07-02T01:19:01Z", "type": "commit"}]}