{"pr_number": 1990, "pr_title": "OWLS 84741: Scaling failed on Jenkins when setting Dedicated to true & io.kubernetes.client.openapi.ApiException: Not Found", "pr_createdAt": "2020-10-14T17:13:31Z", "pr_url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1990", "timeline": [{"oid": "6065ec9e873a6bd8884877309ad4f78811ef81cb", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/6065ec9e873a6bd8884877309ad4f78811ef81cb", "message": "Use REST client's access token for authentication and authorization", "committedDate": "2020-10-12T22:45:26Z", "type": "commit"}, {"oid": "9af2a9c3334aaade4fdc4aefbdb9c4a69a8ba723", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/9af2a9c3334aaade4fdc4aefbdb9c4a69a8ba723", "message": "Enable testDedicatedModeSameNamespaceScale", "committedDate": "2020-10-13T19:12:08Z", "type": "commit"}, {"oid": "3cbf21375e0ea27d955c5a2b0347c99c026bd1f0", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/3cbf21375e0ea27d955c5a2b0347c99c026bd1f0", "message": "Add patch permissions to rolebinding", "committedDate": "2020-10-14T00:08:02Z", "type": "commit"}, {"oid": "43c8e0ef1369599d9dc77c539f9e6dd9ef176ee6", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/43c8e0ef1369599d9dc77c539f9e6dd9ef176ee6", "message": "Code cleanup", "committedDate": "2020-10-14T16:23:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEyODUyMA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1990#discussion_r505128520", "bodyText": "Please try to avoid reflection in tests. We set statics this way in tests because it allows us to deal with dependency injection, and those should be relatively rare cases. Changing instance fields this way, though, is hard to read and very apt to lead to surprising results. If we need to set the field in a test, create a setter for it and comment that it is intended for unit testing.\nIn this case, I would even recommend a fluent interface, so you could do something like:\n  RestBackendImpl restBackendImpl = new RestBackendImpl(\"\", \"\", Collections.singletonList(NS))\n                                          .withAuthorizationProxy(authorizationProxyStub);\n\n\nIt would make the test easier to read.", "author": "russgold", "createdAt": "2020-10-15T02:34:28Z", "path": "operator/src/test/java/oracle/kubernetes/operator/rest/RestBackendImplTest.java", "diffHunk": "@@ -326,6 +335,74 @@ public void verify_getWlsDomainConfig_doesNotReturnNull_whenScanIsNull() {\n     assertThat(wlsDomainConfig, notNullValue());\n   }\n \n+  @Test\n+  public void verify_initializeCallBuilder_withAccessToken_userInfoIsNull() {\n+    RestBackendImpl restBackendImpl = new RestBackendImpl(\"\", \"\", Collections.singletonList(NS));\n+    assertThat(restBackendImpl.getUserInfo(), nullValue());\n+  }\n+\n+  @Test\n+  public void verify_initializeCallBuilder_withTokenReview_userInfoNotNull() {\n+    RestBackEndStub restBackEndStub = new RestBackEndStub(\"\", \"\", Collections.singletonList(NS));\n+    assertThat(restBackEndStub.getUserInfo(), notNullValue());\n+  }\n+\n+  @Test\n+  public void verify_authorizationCheck_notCalled_whenAuthenticateWithTokenReviewIsFalse()\n+      throws NoSuchFieldException, IllegalAccessException {\n+    RestBackendImpl restBackendImpl = new RestBackendImpl(\"\", \"\", Collections.singletonList(NS));\n+    AuthorizationProxyStub authorizationProxyStub = new AuthorizationProxyStub();\n+    Field nameField = restBackendImpl.getClass()", "originalCommit": "43c8e0ef1369599d9dc77c539f9e6dd9ef176ee6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc0NzAyMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1990#discussion_r509747021", "bodyText": "Changed to more fluent interface per recommendation.", "author": "lennyphan", "createdAt": "2020-10-21T22:13:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEyODUyMA=="}], "type": "inlineReview", "revised_code": {"commit": "23294dafcd9fccd9f4caea6717c226b95a66dcf0", "chunk": "diff --git a/operator/src/test/java/oracle/kubernetes/operator/rest/RestBackendImplTest.java b/operator/src/test/java/oracle/kubernetes/operator/rest/RestBackendImplTest.java\nindex 92b76d3e38..730ec531b3 100644\n--- a/operator/src/test/java/oracle/kubernetes/operator/rest/RestBackendImplTest.java\n+++ b/operator/src/test/java/oracle/kubernetes/operator/rest/RestBackendImplTest.java\n\n@@ -336,53 +334,43 @@ public class RestBackendImplTest {\n   }\n \n   @Test\n-  public void verify_initializeCallBuilder_withAccessToken_userInfoIsNull() {\n-    RestBackendImpl restBackendImpl = new RestBackendImpl(\"\", \"\", Collections.singletonList(NS));\n-    assertThat(restBackendImpl.getUserInfo(), nullValue());\n+  public void vwhenUsingAccessToken_userInfoIsNull() {\n+    HelmAccessStub.defineVariable(\"TOKEN_REVIEW_AUTHENTICATION\", \"false\");\n+    RestBackendImpl restBackend = new RestBackendImpl(\"\", \"\", Collections.singletonList(NS));\n+    assertThat(restBackend.getUserInfo(), nullValue());\n   }\n \n   @Test\n-  public void verify_initializeCallBuilder_withTokenReview_userInfoNotNull() {\n-    RestBackEndStub restBackEndStub = new RestBackEndStub(\"\", \"\", Collections.singletonList(NS));\n-    assertThat(restBackEndStub.getUserInfo(), notNullValue());\n+  public void whenUsingTokenReview_userInfoNotNull() {\n+    HelmAccessStub.defineVariable(\"TOKEN_REVIEW_AUTHENTICATION\", \"true\");\n+    RestBackendImpl restBackend = new RestBackendImpl(\"\", \"\", Collections.singletonList(NS));\n+    assertThat(restBackend.getUserInfo(), notNullValue());\n   }\n \n   @Test\n-  public void verify_authorizationCheck_notCalled_whenAuthenticateWithTokenReviewIsFalse()\n-      throws NoSuchFieldException, IllegalAccessException {\n-    RestBackendImpl restBackendImpl = new RestBackendImpl(\"\", \"\", Collections.singletonList(NS));\n+  public void whenUsingAccessToken_authorizationCheckNotCalled() {\n     AuthorizationProxyStub authorizationProxyStub = new AuthorizationProxyStub();\n-    Field nameField = restBackendImpl.getClass()\n-        .getDeclaredField(\"atz\");\n-    nameField.setAccessible(true);\n-\n-    nameField.set(restBackendImpl, authorizationProxyStub);\n+    RestBackendImpl restBackendImpl = new RestBackendImpl(\"\", \"\", Collections.singletonList(NS))\n+        .withAuthorizationProxy(authorizationProxyStub);\n     restBackendImpl.getClusters(NAME1);\n     assertThat(authorizationProxyStub.atzCheck, is(false));\n   }\n \n   @Test\n-  public void verify_authorizationCheck_isCalled_whenAuthenticateWithTokenReviewIsTrue()\n-      throws NoSuchFieldException, IllegalAccessException {\n-    RestBackEndStub restBackEndStub = new RestBackEndStub(\"\", \"\", Collections.singletonList(NS));\n+  public void whenUsingTokenReview_authorizationCheckCalled() {\n+    HelmAccessStub.defineVariable(\"TOKEN_REVIEW_AUTHENTICATION\", \"true\");\n     AuthorizationProxyStub authorizationProxyStub = new AuthorizationProxyStub();\n-    Field nameField = restBackEndStub.getClass()\n-        .getSuperclass()\n-        .getDeclaredField(\"atz\");\n-    nameField.setAccessible(true);\n-\n-    nameField.set(restBackEndStub, authorizationProxyStub);\n-    restBackEndStub.getClusters(NAME1);\n+    RestBackendImpl restBackend = new RestBackendImpl(\"\", \"\", Collections.singletonList(NS))\n+        .withAuthorizationProxy(authorizationProxyStub);\n+    restBackend.getClusters(NAME1);\n     assertThat(authorizationProxyStub.atzCheck, is(true));\n   }\n \n   @Test\n-  public void verify_apiClient_configured_with_AccessTokenAuthentication()\n-      throws IllegalAccessException {\n-    RestBackendImpl restBackendImpl = new RestBackendImpl(\"\", \"1234\", Collections.singletonList(NS));\n-    CallBuilder callBuilder = getValue(restBackendImpl, \"callBuilder\");\n-    ClientPool pool = getValue(callBuilder, \"helper\");\n-    ApiClient apiClient = pool.take();\n+  public void whenUsingAccessToken_configureApiClient() {\n+    HelmAccessStub.defineVariable(\"TOKEN_REVIEW_AUTHENTICATION\", \"false\");\n+    RestBackendImpl restBackend = new RestBackendImpl(\"\", \"1234\", Collections.singletonList(NS));\n+    ApiClient apiClient = restBackend.getCallBuilder().getClientPool().take();\n     Authentication authentication = apiClient.getAuthentication(\"BearerToken\");\n     assertThat(authentication instanceof ApiKeyAuth, is(true));\n     String apiKey = ((ApiKeyAuth) authentication).getApiKey();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEyOTQ5Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1990#discussion_r505129492", "bodyText": "You can improve these test names. There is no need to say verify, for example, as all tests do verification of something. I have found a useful convention is something like: \"whenCONDITION_EXPECTATION\". I make it a point to have at most one underscore in test names, just to separate logical parts.\nSo this one could be, for example, whenUsingTokenReview_configureApiClient", "author": "russgold", "createdAt": "2020-10-15T02:38:01Z", "path": "operator/src/test/java/oracle/kubernetes/operator/rest/RestBackendImplTest.java", "diffHunk": "@@ -326,6 +335,74 @@ public void verify_getWlsDomainConfig_doesNotReturnNull_whenScanIsNull() {\n     assertThat(wlsDomainConfig, notNullValue());\n   }\n \n+  @Test\n+  public void verify_initializeCallBuilder_withAccessToken_userInfoIsNull() {\n+    RestBackendImpl restBackendImpl = new RestBackendImpl(\"\", \"\", Collections.singletonList(NS));\n+    assertThat(restBackendImpl.getUserInfo(), nullValue());\n+  }\n+\n+  @Test\n+  public void verify_initializeCallBuilder_withTokenReview_userInfoNotNull() {\n+    RestBackEndStub restBackEndStub = new RestBackEndStub(\"\", \"\", Collections.singletonList(NS));\n+    assertThat(restBackEndStub.getUserInfo(), notNullValue());\n+  }\n+\n+  @Test\n+  public void verify_authorizationCheck_notCalled_whenAuthenticateWithTokenReviewIsFalse()\n+      throws NoSuchFieldException, IllegalAccessException {\n+    RestBackendImpl restBackendImpl = new RestBackendImpl(\"\", \"\", Collections.singletonList(NS));\n+    AuthorizationProxyStub authorizationProxyStub = new AuthorizationProxyStub();\n+    Field nameField = restBackendImpl.getClass()\n+        .getDeclaredField(\"atz\");\n+    nameField.setAccessible(true);\n+\n+    nameField.set(restBackendImpl, authorizationProxyStub);\n+    restBackendImpl.getClusters(NAME1);\n+    assertThat(authorizationProxyStub.atzCheck, is(false));\n+  }\n+\n+  @Test\n+  public void verify_authorizationCheck_isCalled_whenAuthenticateWithTokenReviewIsTrue()\n+      throws NoSuchFieldException, IllegalAccessException {\n+    RestBackEndStub restBackEndStub = new RestBackEndStub(\"\", \"\", Collections.singletonList(NS));\n+    AuthorizationProxyStub authorizationProxyStub = new AuthorizationProxyStub();\n+    Field nameField = restBackEndStub.getClass()\n+        .getSuperclass()\n+        .getDeclaredField(\"atz\");\n+    nameField.setAccessible(true);\n+\n+    nameField.set(restBackEndStub, authorizationProxyStub);\n+    restBackEndStub.getClusters(NAME1);\n+    assertThat(authorizationProxyStub.atzCheck, is(true));\n+  }\n+\n+  @Test\n+  public void verify_apiClient_configured_with_AccessTokenAuthentication()\n+      throws IllegalAccessException {\n+    RestBackendImpl restBackendImpl = new RestBackendImpl(\"\", \"1234\", Collections.singletonList(NS));\n+    CallBuilder callBuilder = getValue(restBackendImpl, \"callBuilder\");\n+    ClientPool pool = getValue(callBuilder, \"helper\");\n+    ApiClient apiClient = pool.take();\n+    Authentication authentication = apiClient.getAuthentication(\"BearerToken\");\n+    assertThat(authentication instanceof ApiKeyAuth, is(true));\n+    String apiKey = ((ApiKeyAuth) authentication).getApiKey();\n+    assertThat(apiKey, is(\"1234\"));\n+  }\n+\n+  @Test\n+  public void verify_apiClient_configured_whenAuthenticateWithTokenReviewIsTrue()", "originalCommit": "43c8e0ef1369599d9dc77c539f9e6dd9ef176ee6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "23294dafcd9fccd9f4caea6717c226b95a66dcf0", "chunk": "diff --git a/operator/src/test/java/oracle/kubernetes/operator/rest/RestBackendImplTest.java b/operator/src/test/java/oracle/kubernetes/operator/rest/RestBackendImplTest.java\nindex 92b76d3e38..730ec531b3 100644\n--- a/operator/src/test/java/oracle/kubernetes/operator/rest/RestBackendImplTest.java\n+++ b/operator/src/test/java/oracle/kubernetes/operator/rest/RestBackendImplTest.java\n\n@@ -336,53 +334,43 @@ public class RestBackendImplTest {\n   }\n \n   @Test\n-  public void verify_initializeCallBuilder_withAccessToken_userInfoIsNull() {\n-    RestBackendImpl restBackendImpl = new RestBackendImpl(\"\", \"\", Collections.singletonList(NS));\n-    assertThat(restBackendImpl.getUserInfo(), nullValue());\n+  public void vwhenUsingAccessToken_userInfoIsNull() {\n+    HelmAccessStub.defineVariable(\"TOKEN_REVIEW_AUTHENTICATION\", \"false\");\n+    RestBackendImpl restBackend = new RestBackendImpl(\"\", \"\", Collections.singletonList(NS));\n+    assertThat(restBackend.getUserInfo(), nullValue());\n   }\n \n   @Test\n-  public void verify_initializeCallBuilder_withTokenReview_userInfoNotNull() {\n-    RestBackEndStub restBackEndStub = new RestBackEndStub(\"\", \"\", Collections.singletonList(NS));\n-    assertThat(restBackEndStub.getUserInfo(), notNullValue());\n+  public void whenUsingTokenReview_userInfoNotNull() {\n+    HelmAccessStub.defineVariable(\"TOKEN_REVIEW_AUTHENTICATION\", \"true\");\n+    RestBackendImpl restBackend = new RestBackendImpl(\"\", \"\", Collections.singletonList(NS));\n+    assertThat(restBackend.getUserInfo(), notNullValue());\n   }\n \n   @Test\n-  public void verify_authorizationCheck_notCalled_whenAuthenticateWithTokenReviewIsFalse()\n-      throws NoSuchFieldException, IllegalAccessException {\n-    RestBackendImpl restBackendImpl = new RestBackendImpl(\"\", \"\", Collections.singletonList(NS));\n+  public void whenUsingAccessToken_authorizationCheckNotCalled() {\n     AuthorizationProxyStub authorizationProxyStub = new AuthorizationProxyStub();\n-    Field nameField = restBackendImpl.getClass()\n-        .getDeclaredField(\"atz\");\n-    nameField.setAccessible(true);\n-\n-    nameField.set(restBackendImpl, authorizationProxyStub);\n+    RestBackendImpl restBackendImpl = new RestBackendImpl(\"\", \"\", Collections.singletonList(NS))\n+        .withAuthorizationProxy(authorizationProxyStub);\n     restBackendImpl.getClusters(NAME1);\n     assertThat(authorizationProxyStub.atzCheck, is(false));\n   }\n \n   @Test\n-  public void verify_authorizationCheck_isCalled_whenAuthenticateWithTokenReviewIsTrue()\n-      throws NoSuchFieldException, IllegalAccessException {\n-    RestBackEndStub restBackEndStub = new RestBackEndStub(\"\", \"\", Collections.singletonList(NS));\n+  public void whenUsingTokenReview_authorizationCheckCalled() {\n+    HelmAccessStub.defineVariable(\"TOKEN_REVIEW_AUTHENTICATION\", \"true\");\n     AuthorizationProxyStub authorizationProxyStub = new AuthorizationProxyStub();\n-    Field nameField = restBackEndStub.getClass()\n-        .getSuperclass()\n-        .getDeclaredField(\"atz\");\n-    nameField.setAccessible(true);\n-\n-    nameField.set(restBackEndStub, authorizationProxyStub);\n-    restBackEndStub.getClusters(NAME1);\n+    RestBackendImpl restBackend = new RestBackendImpl(\"\", \"\", Collections.singletonList(NS))\n+        .withAuthorizationProxy(authorizationProxyStub);\n+    restBackend.getClusters(NAME1);\n     assertThat(authorizationProxyStub.atzCheck, is(true));\n   }\n \n   @Test\n-  public void verify_apiClient_configured_with_AccessTokenAuthentication()\n-      throws IllegalAccessException {\n-    RestBackendImpl restBackendImpl = new RestBackendImpl(\"\", \"1234\", Collections.singletonList(NS));\n-    CallBuilder callBuilder = getValue(restBackendImpl, \"callBuilder\");\n-    ClientPool pool = getValue(callBuilder, \"helper\");\n-    ApiClient apiClient = pool.take();\n+  public void whenUsingAccessToken_configureApiClient() {\n+    HelmAccessStub.defineVariable(\"TOKEN_REVIEW_AUTHENTICATION\", \"false\");\n+    RestBackendImpl restBackend = new RestBackendImpl(\"\", \"1234\", Collections.singletonList(NS));\n+    ApiClient apiClient = restBackend.getCallBuilder().getClientPool().take();\n     Authentication authentication = apiClient.getAuthentication(\"BearerToken\");\n     assertThat(authentication instanceof ApiKeyAuth, is(true));\n     String apiKey = ((ApiKeyAuth) authentication).getApiKey();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEzMDg3Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1990#discussion_r505130872", "bodyText": "Where is this environment variable defined? Is it in Helm? If so, prefer the HelmAccess class. There is already a HelmAccessStub to facilitate unit testing.", "author": "russgold", "createdAt": "2020-10-15T02:42:45Z", "path": "operator/src/main/java/oracle/kubernetes/operator/rest/RestBackendImpl.java", "diffHunk": "@@ -417,6 +450,15 @@ private WebApplicationException createWebApplicationException(int status, String\n     return new WebApplicationException(rb.build());\n   }\n \n+  protected boolean authenticateWithTokenReview() {\n+    return \"true\".equalsIgnoreCase(Optional.ofNullable(getEnvVariable.apply(\"TOKEN_REVIEW_AUTHENTICATION\"))", "originalCommit": "43c8e0ef1369599d9dc77c539f9e6dd9ef176ee6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkwMDM1MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1990#discussion_r505900350", "bodyText": "Please look at what Dongbo did in #1979. There the pattern is that there are values that can be passed to the Helm chart that preserve the pre-existing behavior. The chart puts the value into the operator's ConfigMap, which can then be accessed through the TuningParameters. Note: the Java code needs to handle the variable's not being present as it won't be present on a Helm upgrade.", "author": "rjeberhard", "createdAt": "2020-10-15T22:29:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEzMDg3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAyMDE5Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1990#discussion_r506020192", "bodyText": "Just to confirm Ryan, from looking at Dongbo's change, you want the property that controls the new vs old behavior to be defined the values.yaml of the Operator's helm chart and this will then be copied to the Operator's configmap which then can be accessed from TuningParameters? The property won't be defined as an environment variable nor system property.", "author": "lennyphan", "createdAt": "2020-10-16T03:17:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEzMDg3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzgyNTEwOA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1990#discussion_r507825108", "bodyText": "That's correct.", "author": "rjeberhard", "createdAt": "2020-10-19T15:01:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEzMDg3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc0NzMzOA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1990#discussion_r509747338", "bodyText": "Change to use TuningParameters.", "author": "lennyphan", "createdAt": "2020-10-21T22:14:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEzMDg3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "23294dafcd9fccd9f4caea6717c226b95a66dcf0", "chunk": "diff --git a/operator/src/main/java/oracle/kubernetes/operator/rest/RestBackendImpl.java b/operator/src/main/java/oracle/kubernetes/operator/rest/RestBackendImpl.java\nindex c2d466a4bc..d56139d277 100644\n--- a/operator/src/main/java/oracle/kubernetes/operator/rest/RestBackendImpl.java\n+++ b/operator/src/main/java/oracle/kubernetes/operator/rest/RestBackendImpl.java\n\n@@ -451,7 +428,7 @@ public class RestBackendImpl implements RestBackend {\n   }\n \n   protected boolean authenticateWithTokenReview() {\n-    return \"true\".equalsIgnoreCase(Optional.ofNullable(getEnvVariable.apply(\"TOKEN_REVIEW_AUTHENTICATION\"))\n+    return \"true\".equalsIgnoreCase(Optional.ofNullable(HelmAccess.getHelmVariable(\"TOKEN_REVIEW_AUTHENTICATION\"))\n         .orElse(\"false\"));\n   }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEzNjEwMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1990#discussion_r505136102", "bodyText": "It would probably be cleaner to add a fluent method to CallBuilder that would allow you to say something like:\n  new CallBuilder().withAuthentication(new AccessTokenAuthentication(accessToken))\n\nIf the authentication is null, you'd get the current behavior. That would allow this logic to be moved into CallBuilder, where it really belongs. This isn't a REST thing.\nBut this whole bit of code seems needlessly complex. Find a way to simplify it, please.", "author": "russgold", "createdAt": "2020-10-15T03:01:14Z", "path": "operator/src/main/java/oracle/kubernetes/operator/rest/RestBackendImpl.java", "diffHunk": "@@ -89,13 +97,38 @@\n   RestBackendImpl(String principal, String accessToken, Collection<String> domainNamespaces) {\n     LOGGER.entering(principal, domainNamespaces);\n     this.principal = principal;\n-    userInfo = authenticate(accessToken);\n+    initializeCallBuilder(accessToken);\n     this.domainNamespaces = domainNamespaces;\n     LOGGER.exiting();\n   }\n \n+  private void initializeCallBuilder(String accessToken) {", "originalCommit": "43c8e0ef1369599d9dc77c539f9e6dd9ef176ee6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc0OTUwOA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1990#discussion_r509749508", "bodyText": "moved AccessTokenAuthentication logic CallBuilder as suggested.  Isolated to callbuilder as that's where it's more suited and relevant.", "author": "lennyphan", "createdAt": "2020-10-21T22:17:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEzNjEwMg=="}], "type": "inlineReview", "revised_code": {"commit": "23294dafcd9fccd9f4caea6717c226b95a66dcf0", "chunk": "diff --git a/operator/src/main/java/oracle/kubernetes/operator/rest/RestBackendImpl.java b/operator/src/main/java/oracle/kubernetes/operator/rest/RestBackendImpl.java\nindex c2d466a4bc..d56139d277 100644\n--- a/operator/src/main/java/oracle/kubernetes/operator/rest/RestBackendImpl.java\n+++ b/operator/src/main/java/oracle/kubernetes/operator/rest/RestBackendImpl.java\n\n@@ -97,33 +91,13 @@ public class RestBackendImpl implements RestBackend {\n   RestBackendImpl(String principal, String accessToken, Collection<String> domainNamespaces) {\n     LOGGER.entering(principal, domainNamespaces);\n     this.principal = principal;\n-    initializeCallBuilder(accessToken);\n+    userInfo = authenticate(accessToken);\n+    callBuilder = userInfo != null ? new CallBuilder() :\n+        new CallBuilder().withAuthentication(accessToken);\n     this.domainNamespaces = domainNamespaces;\n     LOGGER.exiting();\n   }\n \n-  private void initializeCallBuilder(String accessToken) {\n-    if (authenticateWithTokenReview()) {\n-      userInfo = authenticate(accessToken);\n-      callBuilder = new CallBuilder();\n-    } else {\n-      ClientPool pool = new ClientPool();\n-      pool.setApiClient(createApiClient(accessToken));\n-      userInfo = null;\n-      callBuilder = new CallBuilder(pool);\n-    }\n-  }\n-\n-  private ApiClient createApiClient(String accessToken) {\n-    try {\n-      ClientBuilder builder = ClientBuilder.standard();\n-      return builder.setAuthentication(\n-          new AccessTokenAuthentication(accessToken)).build();\n-    } catch (IOException e) {\n-      throw new RuntimeException(e);\n-    }\n-  }\n-\n   private void authorize(String domainUid, Operation operation) {\n     LOGGER.entering(domainUid, operation);\n     if (!authenticateWithTokenReview()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEzNjQwNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1990#discussion_r505136407", "bodyText": "Seems an odd place to break this method. Can it really not fit on one line?", "author": "russgold", "createdAt": "2020-10-15T03:02:25Z", "path": "operator/src/test/java/oracle/kubernetes/operator/rest/RestBackendImplTest.java", "diffHunk": "@@ -334,10 +411,86 @@ private void setupScanCache() {\n     config = configSupport.createDomainConfig();\n   }\n \n+  @SuppressWarnings(\"unchecked\")\n+  public static <T> T getValue(Object object, String fieldName) throws IllegalAccessException {\n+    return (T) getValue(object, getField(object.getClass(), fieldName));\n+  }\n+\n+  private static Object getValue(Object object, Field field) throws IllegalAccessException {\n+    boolean wasAccessible = field.isAccessible();\n+    try {\n+      field.setAccessible(true);\n+      return field.get(object);\n+    } finally {\n+      field.setAccessible(wasAccessible);\n+    }\n+  }\n+\n+  private static Field getField(Class<?> aaClass, String fieldName) {\n+    assert aaClass != null : \"No such field '\" + fieldName + \"'\";\n+\n+    try {\n+      return aaClass.getDeclaredField(fieldName);\n+    } catch (NoSuchFieldException e) {\n+      return getField(aaClass.getSuperclass(), fieldName);\n+    }\n+  }\n+\n   private class TopologyRetrieverStub implements TopologyRetriever {\n     @Override\n     public WlsDomainConfig getWlsDomainConfig(String ns, String domainUid) {\n       return config;\n     }\n   }\n+\n+  private class RestBackEndStub extends RestBackendImpl {\n+\n+    /**\n+     * Construct a RestBackendImpl that is used to handle one WebLogic operator REST request.\n+     *\n+     * @param principal        is the name of the Kubernetes user to use when calling the Kubernetes\n+     *                         REST api.\n+     * @param accessToken      is the access token of the Kubernetes service account of the client\n+     *                         calling the WebLogic operator REST api.\n+     * @param domainNamespaces a list of Kubernetes namepaces that contain domains that the WebLogic\n+     */\n+    RestBackEndStub(String principal, String accessToken,", "originalCommit": "43c8e0ef1369599d9dc77c539f9e6dd9ef176ee6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc0OTY1MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1990#discussion_r509749651", "bodyText": "Fixed.", "author": "lennyphan", "createdAt": "2020-10-21T22:17:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEzNjQwNw=="}], "type": "inlineReview", "revised_code": {"commit": "23294dafcd9fccd9f4caea6717c226b95a66dcf0", "chunk": "diff --git a/operator/src/test/java/oracle/kubernetes/operator/rest/RestBackendImplTest.java b/operator/src/test/java/oracle/kubernetes/operator/rest/RestBackendImplTest.java\nindex 92b76d3e38..730ec531b3 100644\n--- a/operator/src/test/java/oracle/kubernetes/operator/rest/RestBackendImplTest.java\n+++ b/operator/src/test/java/oracle/kubernetes/operator/rest/RestBackendImplTest.java\n\n@@ -411,31 +397,6 @@ public class RestBackendImplTest {\n     config = configSupport.createDomainConfig();\n   }\n \n-  @SuppressWarnings(\"unchecked\")\n-  public static <T> T getValue(Object object, String fieldName) throws IllegalAccessException {\n-    return (T) getValue(object, getField(object.getClass(), fieldName));\n-  }\n-\n-  private static Object getValue(Object object, Field field) throws IllegalAccessException {\n-    boolean wasAccessible = field.isAccessible();\n-    try {\n-      field.setAccessible(true);\n-      return field.get(object);\n-    } finally {\n-      field.setAccessible(wasAccessible);\n-    }\n-  }\n-\n-  private static Field getField(Class<?> aaClass, String fieldName) {\n-    assert aaClass != null : \"No such field '\" + fieldName + \"'\";\n-\n-    try {\n-      return aaClass.getDeclaredField(fieldName);\n-    } catch (NoSuchFieldException e) {\n-      return getField(aaClass.getSuperclass(), fieldName);\n-    }\n-  }\n-\n   private class TopologyRetrieverStub implements TopologyRetriever {\n     @Override\n     public WlsDomainConfig getWlsDomainConfig(String ns, String domainUid) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg5Nzk1Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1990#discussion_r505897956", "bodyText": "We are adding a required role verb (this seems correct), but reminds me that we need to document this requirement in the scaling and/or RBAC documentation. Similarly, we need to document how to create the correct roles and role bindings so that the service account used with the scaling API has the necessary permissions.", "author": "rjeberhard", "createdAt": "2020-10-15T22:23:35Z", "path": "integration-tests/src/test/java/oracle/weblogic/kubernetes/actions/impl/Domain.java", "diffHunk": "@@ -534,6 +534,7 @@ private static boolean createRbacApiObjectsForWLDFScript(String domainNamespace,\n               .addResourcesItem(\"domains\")\n               .addVerbsItem(\"get\")\n               .addVerbsItem(\"list\")\n+              .addVerbsItem(\"patch\")", "originalCommit": "43c8e0ef1369599d9dc77c539f9e6dd9ef176ee6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMzMzgwMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1990#discussion_r510333803", "bodyText": "Updated documentation in /userguide/managing-operators/using-the-operator/using-helm.md, /userguide/managing-operators/using-the-operator/the-rest-api.md, /userguide/managing-domains/domain-lifecycle/scaling.md, and /kubernetes/charts/weblogic-operator/values.yaml", "author": "lennyphan", "createdAt": "2020-10-22T17:25:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg5Nzk1Ng=="}], "type": "inlineReview", "revised_code": null}, {"oid": "23294dafcd9fccd9f4caea6717c226b95a66dcf0", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/23294dafcd9fccd9f4caea6717c226b95a66dcf0", "message": "Changes from initial code review", "committedDate": "2020-10-16T18:36:07Z", "type": "commit"}, {"oid": "d7f774a7489106831f0fc5d7b73b2cf220817394", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/d7f774a7489106831f0fc5d7b73b2cf220817394", "message": "Merge remote-tracking branch 'origin/develop' into OWLS-84741\n\nMerge latest from develop", "committedDate": "2020-10-16T18:41:21Z", "type": "commit"}, {"oid": "ba8a35ae74ecf3aec77229a361dbd04d88ccab1d", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/ba8a35ae74ecf3aec77229a361dbd04d88ccab1d", "message": "Use TuningParameters to acccess property to control Operator's REST API authentiction and authorization implementation", "committedDate": "2020-10-16T21:55:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc2MzE3Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1990#discussion_r507763172", "bodyText": "We've been using the Guava method\nStrings.isNullOrEmpty()\n\nfor cases like this.", "author": "russgold", "createdAt": "2020-10-19T13:51:54Z", "path": "operator/src/main/java/oracle/kubernetes/operator/helpers/CallBuilder.java", "diffHunk": "@@ -1907,4 +1910,31 @@ private Call readPodLogAsync(\n   private CancellableCall wrap(Call call) {\n     return new CallWrapper(call);\n   }\n+\n+  public ClientPool getClientPool() {\n+    return this.helper;\n+  }\n+\n+  /**\n+   * Create AccessTokenAuthentication component for authenticating user represented by\n+   * the given token.\n+   * @param accessToken - User's Bearer token\n+   * @return - this CallBuilder instance\n+   */\n+  public CallBuilder withAuthentication(String accessToken) {\n+    if (accessToken != null && !accessToken.isEmpty()) {", "originalCommit": "ba8a35ae74ecf3aec77229a361dbd04d88ccab1d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMzNDM3Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1990#discussion_r510334372", "bodyText": "Changed to use Guava method.", "author": "lennyphan", "createdAt": "2020-10-22T17:25:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc2MzE3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "8a8dad53070fe3190a43747f5a0f324729d5bf6a", "chunk": "diff --git a/operator/src/main/java/oracle/kubernetes/operator/helpers/CallBuilder.java b/operator/src/main/java/oracle/kubernetes/operator/helpers/CallBuilder.java\nindex 691bb1fc75..864a475281 100644\n--- a/operator/src/main/java/oracle/kubernetes/operator/helpers/CallBuilder.java\n+++ b/operator/src/main/java/oracle/kubernetes/operator/helpers/CallBuilder.java\n\n@@ -1922,7 +1923,7 @@ public class CallBuilder {\n    * @return - this CallBuilder instance\n    */\n   public CallBuilder withAuthentication(String accessToken) {\n-    if (accessToken != null && !accessToken.isEmpty()) {\n+    if (!Strings.isNullOrEmpty(accessToken)) {\n       this.helper = new ClientPool().withApiClient(createApiClient(accessToken));\n     }\n     return this;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc3NDU3Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1990#discussion_r507774577", "bodyText": "typo: \"when\" rather than \"vwhen\"", "author": "russgold", "createdAt": "2020-10-19T14:04:52Z", "path": "operator/src/test/java/oracle/kubernetes/operator/rest/RestBackendImplTest.java", "diffHunk": "@@ -336,66 +335,52 @@ public void verify_getWlsDomainConfig_doesNotReturnNull_whenScanIsNull() {\n   }\n \n   @Test\n-  public void verify_initializeCallBuilder_withAccessToken_userInfoIsNull() {\n-    RestBackendImpl restBackendImpl = new RestBackendImpl(\"\", \"\", Collections.singletonList(NS));\n-    assertThat(restBackendImpl.getUserInfo(), nullValue());\n+  public void vwhenUsingAccessToken_userInfoIsNull() {", "originalCommit": "ba8a35ae74ecf3aec77229a361dbd04d88ccab1d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMzNDQ5MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1990#discussion_r510334490", "bodyText": "fixed typo", "author": "lennyphan", "createdAt": "2020-10-22T17:26:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzc3NDU3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "8a8dad53070fe3190a43747f5a0f324729d5bf6a", "chunk": "diff --git a/operator/src/test/java/oracle/kubernetes/operator/rest/RestBackendImplTest.java b/operator/src/test/java/oracle/kubernetes/operator/rest/RestBackendImplTest.java\nindex 85ca42f8e0..bcb6f73569 100644\n--- a/operator/src/test/java/oracle/kubernetes/operator/rest/RestBackendImplTest.java\n+++ b/operator/src/test/java/oracle/kubernetes/operator/rest/RestBackendImplTest.java\n\n@@ -335,7 +335,7 @@ public class RestBackendImplTest {\n   }\n \n   @Test\n-  public void vwhenUsingAccessToken_userInfoIsNull() {\n+  public void whenUsingAccessToken_userInfoIsNull() {\n     RestBackendImpl restBackend = new RestBackendImpl(\"\", \"\", Collections.singletonList(NS));\n     assertThat(restBackend.getUserInfo(), nullValue());\n   }\n"}}, {"oid": "8a8dad53070fe3190a43747f5a0f324729d5bf6a", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/8a8dad53070fe3190a43747f5a0f324729d5bf6a", "message": "Code review changes", "committedDate": "2020-10-19T21:43:32Z", "type": "commit"}, {"oid": "6e1df5a5a2f398b8487d00b72b6938e720b131a8", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/6e1df5a5a2f398b8487d00b72b6938e720b131a8", "message": "merge latest from develop", "committedDate": "2020-10-21T17:15:56Z", "type": "commit"}, {"oid": "086f1679215656995a753d1e431b9376f35cae38", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/086f1679215656995a753d1e431b9376f35cae38", "message": "documentation updates", "committedDate": "2020-10-21T22:09:19Z", "type": "commit"}, {"oid": "bf48df15fbc6c5ba9b80596ff53bec882ee57324", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/bf48df15fbc6c5ba9b80596ff53bec882ee57324", "message": "document patch verb", "committedDate": "2020-10-22T02:50:19Z", "type": "commit"}, {"oid": "67d85006a5d024349f7c22dd973356bec2384c32", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/67d85006a5d024349f7c22dd973356bec2384c32", "message": "documentation changes based on review", "committedDate": "2020-10-22T17:20:14Z", "type": "commit"}, {"oid": "245e0fc451450831d04741f3afe6a0b5c077a720", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/245e0fc451450831d04741f3afe6a0b5c077a720", "message": "use code font for appropriate parameters", "committedDate": "2020-10-22T19:19:56Z", "type": "commit"}]}