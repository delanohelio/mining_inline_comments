{"pr_number": 1495, "pr_title": "two automated test case for Wdt Config Update w single Model File jenkins-ignore", "pr_createdAt": "2020-03-25T16:01:33Z", "pr_url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495", "timeline": [{"oid": "c8062b2d53e7dd61e5ab027b9d4067c0bc7c72b9", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/c8062b2d53e7dd61e5ab027b9d4067c0bc7c72b9", "message": "The first test case for OWLS-80444 Automate Wdt Config Override with single Model File jenkins-ignore", "committedDate": "2020-03-25T15:51:54Z", "type": "commit"}, {"oid": "41d9df03dd170d1a804b71db9671e614e47c5c55", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/41d9df03dd170d1a804b71db9671e614e47c5c55", "message": "Modified TestUtils.java jenkins-ignore", "committedDate": "2020-03-25T19:14:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyODY0Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r398228646", "bodyText": "explain why an exception might be thrown, we already know it is an exception", "author": "markxnelson", "createdAt": "2020-03-25T23:19:20Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java", "diffHunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator;\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.logging.Level;\n+\n+import oracle.kubernetes.operator.utils.Domain;\n+import oracle.kubernetes.operator.utils.DomainCrd;\n+import oracle.kubernetes.operator.utils.ExecResult;\n+import oracle.kubernetes.operator.utils.LoggerHelper;\n+import oracle.kubernetes.operator.utils.Operator;\n+import oracle.kubernetes.operator.utils.Operator.RestCertType;\n+import oracle.kubernetes.operator.utils.TestUtils;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Simple JUnit test file used for testing Model in Image.\n+ *\n+ * <p>This test is used for creating domain using model in image.\n+ */\n+\n+public class ItModelInImageOverride extends MiiBaseTest {\n+  private static Operator operator;\n+  private static Domain domain;\n+  private static String domainNS;\n+  private static String testClassName;\n+  private static StringBuffer namespaceList;\n+  private static final String configMapSuffix = \"-mii-config-map\";\n+\n+  /**\n+   * This method gets called only once before any of the test methods are executed. It does the\n+   * initialization of the integration test properties defined in OperatorIT.properties and setting\n+   * the resultRoot, pvRoot and projectRoot attributes.\n+   *\n+   * @throws Exception exception", "originalCommit": "41d9df03dd170d1a804b71db9671e614e47c5c55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIzODgwMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r398238803", "bodyText": "change to:\n\n@throws Exception exception if initializing the application properties\n\n     and creates directories for results fails.", "author": "hzhao-github", "createdAt": "2020-03-25T23:49:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyODY0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "b55d8189ef02962e3c741174d137480386cd22b4", "chunk": "diff --git a/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java b/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java\nindex 793950823f..f80ca829a4 100644\n--- a/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java\n+++ b/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java\n\n@@ -28,7 +28,8 @@ import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n /**\n- * Simple JUnit test file used for testing Model in Image.\n+ * This JUnit test is used for testing\n+ * Wdt Config Override with Model File(s) to existing MII domain\n  *\n  * <p>This test is used for creating domain using model in image.\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyODc1Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r398228757", "bodyText": "no need to say \"simple JUnit test file\" -- just say what it does", "author": "markxnelson", "createdAt": "2020-03-25T23:19:43Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java", "diffHunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator;\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.logging.Level;\n+\n+import oracle.kubernetes.operator.utils.Domain;\n+import oracle.kubernetes.operator.utils.DomainCrd;\n+import oracle.kubernetes.operator.utils.ExecResult;\n+import oracle.kubernetes.operator.utils.LoggerHelper;\n+import oracle.kubernetes.operator.utils.Operator;\n+import oracle.kubernetes.operator.utils.Operator.RestCertType;\n+import oracle.kubernetes.operator.utils.TestUtils;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Simple JUnit test file used for testing Model in Image.", "originalCommit": "41d9df03dd170d1a804b71db9671e614e47c5c55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIzNjE3Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r398236172", "bodyText": "changed to:\n\nThis JUnit test is used for testing\nWdt Config Override with Model File(s) to existing MII domain", "author": "hzhao-github", "createdAt": "2020-03-25T23:41:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyODc1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "b55d8189ef02962e3c741174d137480386cd22b4", "chunk": "diff --git a/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java b/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java\nindex 793950823f..f80ca829a4 100644\n--- a/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java\n+++ b/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java\n\n@@ -28,7 +28,8 @@ import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n /**\n- * Simple JUnit test file used for testing Model in Image.\n+ * This JUnit test is used for testing\n+ * Wdt Config Override with Model File(s) to existing MII domain\n  *\n  * <p>This test is used for creating domain using model in image.\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyODk5OQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r398228999", "bodyText": "no need to sat the method is called before every test, we know that already :)", "author": "markxnelson", "createdAt": "2020-03-25T23:20:27Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java", "diffHunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator;\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.logging.Level;\n+\n+import oracle.kubernetes.operator.utils.Domain;\n+import oracle.kubernetes.operator.utils.DomainCrd;\n+import oracle.kubernetes.operator.utils.ExecResult;\n+import oracle.kubernetes.operator.utils.LoggerHelper;\n+import oracle.kubernetes.operator.utils.Operator;\n+import oracle.kubernetes.operator.utils.Operator.RestCertType;\n+import oracle.kubernetes.operator.utils.TestUtils;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Simple JUnit test file used for testing Model in Image.\n+ *\n+ * <p>This test is used for creating domain using model in image.\n+ */\n+\n+public class ItModelInImageOverride extends MiiBaseTest {\n+  private static Operator operator;\n+  private static Domain domain;\n+  private static String domainNS;\n+  private static String testClassName;\n+  private static StringBuffer namespaceList;\n+  private static final String configMapSuffix = \"-mii-config-map\";\n+\n+  /**\n+   * This method gets called only once before any of the test methods are executed. It does the\n+   * initialization of the integration test properties defined in OperatorIT.properties and setting\n+   * the resultRoot, pvRoot and projectRoot attributes.\n+   *\n+   * @throws Exception exception\n+   */\n+  @BeforeAll\n+  public static void staticPrepare() throws Exception {\n+    namespaceList = new StringBuffer();\n+    testClassName = new Object() {\n+    }.getClass().getEnclosingClass().getSimpleName();\n+    // initialize test properties and create the directories\n+    initialize(APP_PROPS_FILE, testClassName);\n+  }\n+\n+  /**\n+   * This method gets called before every test. It creates the result/pv root directories", "originalCommit": "41d9df03dd170d1a804b71db9671e614e47c5c55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIzNzUzNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r398237537", "bodyText": "change to:\n\nThis method creates the result/pv root directories for the test.", "author": "hzhao-github", "createdAt": "2020-03-25T23:45:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyODk5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "b55d8189ef02962e3c741174d137480386cd22b4", "chunk": "diff --git a/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java b/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java\nindex 793950823f..f80ca829a4 100644\n--- a/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java\n+++ b/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java\n\n@@ -28,7 +28,8 @@ import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n /**\n- * Simple JUnit test file used for testing Model in Image.\n+ * This JUnit test is used for testing\n+ * Wdt Config Override with Model File(s) to existing MII domain\n  *\n  * <p>This test is used for creating domain using model in image.\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyOTIyMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r398229222", "bodyText": "do we really  need to create operator before each test? seems a little heavy weight", "author": "markxnelson", "createdAt": "2020-03-25T23:21:12Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java", "diffHunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator;\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.logging.Level;\n+\n+import oracle.kubernetes.operator.utils.Domain;\n+import oracle.kubernetes.operator.utils.DomainCrd;\n+import oracle.kubernetes.operator.utils.ExecResult;\n+import oracle.kubernetes.operator.utils.LoggerHelper;\n+import oracle.kubernetes.operator.utils.Operator;\n+import oracle.kubernetes.operator.utils.Operator.RestCertType;\n+import oracle.kubernetes.operator.utils.TestUtils;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Simple JUnit test file used for testing Model in Image.\n+ *\n+ * <p>This test is used for creating domain using model in image.\n+ */\n+\n+public class ItModelInImageOverride extends MiiBaseTest {\n+  private static Operator operator;\n+  private static Domain domain;\n+  private static String domainNS;\n+  private static String testClassName;\n+  private static StringBuffer namespaceList;\n+  private static final String configMapSuffix = \"-mii-config-map\";\n+\n+  /**\n+   * This method gets called only once before any of the test methods are executed. It does the\n+   * initialization of the integration test properties defined in OperatorIT.properties and setting\n+   * the resultRoot, pvRoot and projectRoot attributes.\n+   *\n+   * @throws Exception exception\n+   */\n+  @BeforeAll\n+  public static void staticPrepare() throws Exception {\n+    namespaceList = new StringBuffer();\n+    testClassName = new Object() {\n+    }.getClass().getEnclosingClass().getSimpleName();\n+    // initialize test properties and create the directories\n+    initialize(APP_PROPS_FILE, testClassName);\n+  }\n+\n+  /**\n+   * This method gets called before every test. It creates the result/pv root directories\n+   * for the test. Creates the operator and domain if its not running.\n+   *\n+   * @throws Exception exception if result/pv/operator/domain creation fails\n+   */\n+  @BeforeEach\n+  public void prepare() throws Exception {\n+    createResultAndPvDirs(testClassName);\n+\n+    // create operator1\n+    if (operator == null) {\n+      Map<String, Object> operatorMap = createOperatorMap(getNewSuffixCount(),\n+          true, testClassName);\n+      operator = TestUtils.createOperator(operatorMap, RestCertType.SELF_SIGNED);", "originalCommit": "41d9df03dd170d1a804b71db9671e614e47c5c55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIzOTg3MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r398239870", "bodyText": "Let me ask Vanaja this question", "author": "hzhao-github", "createdAt": "2020-03-25T23:52:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyOTIyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY1MzYzNA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r398653634", "bodyText": "Hi Mark, here is Vanaja's response. Hope that it answers your question. If you think we still could improve here, just let QA know, we can discuss.\nVanajakshi Mukkara  8:11 AM\n@huizhao Current tests create one operator for each test class, same operator is used for all the test methods in the class. We do this so that each test class can run independent of other tests while running in parallel.", "author": "hzhao-github", "createdAt": "2020-03-26T15:15:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyOTIyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4NjEyMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r399586122", "bodyText": "right, but you have this in a @beforeeach not a @BeforeAll\nso this will do if for every test method, which is not what vanaja said -one per class", "author": "markxnelson", "createdAt": "2020-03-27T23:49:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyOTIyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1ODA5Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r400458097", "bodyText": "it may cause extra works if we wanted to merge \"static staticPrepare()\" and \"non-static prepare()\" methods, because:\n\nin staticPrepare() , it calls a static method in its parent class, so this method has to be a static one\nCreating Operator method calls non-static method in Operator.java and BaseTest.java, so I can't move it to staticPrepare()\nEven though beforeEach annotation is used, Operator is still created once due to the condition check if)operator != null)\nIf we wanted to get rid of this beforeEach annotation when creating Operator, it need changes in our test framework.\n\nafter discussing with Mark, we will keep as it is for now", "author": "hzhao-github", "createdAt": "2020-03-30T20:00:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyOTIyMg=="}], "type": "inlineReview", "revised_code": {"commit": "b55d8189ef02962e3c741174d137480386cd22b4", "chunk": "diff --git a/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java b/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java\nindex 793950823f..f80ca829a4 100644\n--- a/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java\n+++ b/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java\n\n@@ -28,7 +28,8 @@ import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n /**\n- * Simple JUnit test file used for testing Model in Image.\n+ * This JUnit test is used for testing\n+ * Wdt Config Override with Model File(s) to existing MII domain\n  *\n  * <p>This test is used for creating domain using model in image.\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyOTMzNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r398229337", "bodyText": "why?", "author": "markxnelson", "createdAt": "2020-03-25T23:21:32Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java", "diffHunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator;\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.logging.Level;\n+\n+import oracle.kubernetes.operator.utils.Domain;\n+import oracle.kubernetes.operator.utils.DomainCrd;\n+import oracle.kubernetes.operator.utils.ExecResult;\n+import oracle.kubernetes.operator.utils.LoggerHelper;\n+import oracle.kubernetes.operator.utils.Operator;\n+import oracle.kubernetes.operator.utils.Operator.RestCertType;\n+import oracle.kubernetes.operator.utils.TestUtils;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Simple JUnit test file used for testing Model in Image.\n+ *\n+ * <p>This test is used for creating domain using model in image.\n+ */\n+\n+public class ItModelInImageOverride extends MiiBaseTest {\n+  private static Operator operator;\n+  private static Domain domain;\n+  private static String domainNS;\n+  private static String testClassName;\n+  private static StringBuffer namespaceList;\n+  private static final String configMapSuffix = \"-mii-config-map\";\n+\n+  /**\n+   * This method gets called only once before any of the test methods are executed. It does the\n+   * initialization of the integration test properties defined in OperatorIT.properties and setting\n+   * the resultRoot, pvRoot and projectRoot attributes.\n+   *\n+   * @throws Exception exception\n+   */\n+  @BeforeAll\n+  public static void staticPrepare() throws Exception {\n+    namespaceList = new StringBuffer();\n+    testClassName = new Object() {\n+    }.getClass().getEnclosingClass().getSimpleName();\n+    // initialize test properties and create the directories\n+    initialize(APP_PROPS_FILE, testClassName);\n+  }\n+\n+  /**\n+   * This method gets called before every test. It creates the result/pv root directories\n+   * for the test. Creates the operator and domain if its not running.\n+   *\n+   * @throws Exception exception if result/pv/operator/domain creation fails\n+   */\n+  @BeforeEach\n+  public void prepare() throws Exception {\n+    createResultAndPvDirs(testClassName);\n+\n+    // create operator1\n+    if (operator == null) {\n+      Map<String, Object> operatorMap = createOperatorMap(getNewSuffixCount(),\n+          true, testClassName);\n+      operator = TestUtils.createOperator(operatorMap, RestCertType.SELF_SIGNED);\n+      Assertions.assertNotNull(operator);\n+      domainNS = ((ArrayList<String>) operatorMap.get(\"domainNamespaces\")).get(0);\n+      namespaceList.append((String)operatorMap.get(\"namespace\"));\n+      namespaceList.append(\" \").append(domainNS);\n+    }\n+  }\n+\n+  /**\n+   * Releases k8s cluster lease, archives result, pv directories.\n+   *\n+   * @throws Exception exception\n+   */\n+  @AfterAll\n+  public static void staticUnPrepare() throws Exception {\n+    tearDown(new Object() {\n+    }.getClass().getEnclosingClass().getSimpleName(), namespaceList.toString());\n+\n+    LoggerHelper.getLocal().info(\"SUCCESS\");\n+  }\n+\n+  /**\n+   * Create a domain using model in image and having configmap in the domain.yaml\n+   * before deploying the domain. After deploying the domain crd,\n+   * re-create the configmap with a model file that define a JDBC DataSource\n+   * and update the domain crd to new config map and change domain\n+   * restartVersion to reload the model, generate new config and initiate a\n+   * rolling restart.\n+   *\n+   * @throws Exception exception", "originalCommit": "41d9df03dd170d1a804b71db9671e614e47c5c55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI5MTkxMA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r398291910", "bodyText": "I removed and change the doc to \"to new config map\" because cm name remains same.\n\nCreate a domain using model in image and having configmap in the domain.yaml\nbefore deploying the domain. After deploying the domain crd,\nre-create the configmap with a model file that define a JDBC DataSource\nand update the domain crd to change domain restartVersion\nto reload the model, generate new config and initiate a rolling restart.\n\nThe purpose of changing restartVersion is to trigger Inspector to do rolling restart per Tom and Johnny", "author": "hzhao-github", "createdAt": "2020-03-26T03:05:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyOTMzNw=="}], "type": "inlineReview", "revised_code": {"commit": "b55d8189ef02962e3c741174d137480386cd22b4", "chunk": "diff --git a/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java b/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java\nindex 793950823f..f80ca829a4 100644\n--- a/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java\n+++ b/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java\n\n@@ -28,7 +28,8 @@ import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n /**\n- * Simple JUnit test file used for testing Model in Image.\n+ * This JUnit test is used for testing\n+ * Wdt Config Override with Model File(s) to existing MII domain\n  *\n  * <p>This test is used for creating domain using model in image.\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyOTQ2NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r398229464", "bodyText": "recreate? or update?", "author": "markxnelson", "createdAt": "2020-03-25T23:21:52Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java", "diffHunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator;\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.logging.Level;\n+\n+import oracle.kubernetes.operator.utils.Domain;\n+import oracle.kubernetes.operator.utils.DomainCrd;\n+import oracle.kubernetes.operator.utils.ExecResult;\n+import oracle.kubernetes.operator.utils.LoggerHelper;\n+import oracle.kubernetes.operator.utils.Operator;\n+import oracle.kubernetes.operator.utils.Operator.RestCertType;\n+import oracle.kubernetes.operator.utils.TestUtils;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Simple JUnit test file used for testing Model in Image.\n+ *\n+ * <p>This test is used for creating domain using model in image.\n+ */\n+\n+public class ItModelInImageOverride extends MiiBaseTest {\n+  private static Operator operator;\n+  private static Domain domain;\n+  private static String domainNS;\n+  private static String testClassName;\n+  private static StringBuffer namespaceList;\n+  private static final String configMapSuffix = \"-mii-config-map\";\n+\n+  /**\n+   * This method gets called only once before any of the test methods are executed. It does the\n+   * initialization of the integration test properties defined in OperatorIT.properties and setting\n+   * the resultRoot, pvRoot and projectRoot attributes.\n+   *\n+   * @throws Exception exception\n+   */\n+  @BeforeAll\n+  public static void staticPrepare() throws Exception {\n+    namespaceList = new StringBuffer();\n+    testClassName = new Object() {\n+    }.getClass().getEnclosingClass().getSimpleName();\n+    // initialize test properties and create the directories\n+    initialize(APP_PROPS_FILE, testClassName);\n+  }\n+\n+  /**\n+   * This method gets called before every test. It creates the result/pv root directories\n+   * for the test. Creates the operator and domain if its not running.\n+   *\n+   * @throws Exception exception if result/pv/operator/domain creation fails\n+   */\n+  @BeforeEach\n+  public void prepare() throws Exception {\n+    createResultAndPvDirs(testClassName);\n+\n+    // create operator1\n+    if (operator == null) {\n+      Map<String, Object> operatorMap = createOperatorMap(getNewSuffixCount(),\n+          true, testClassName);\n+      operator = TestUtils.createOperator(operatorMap, RestCertType.SELF_SIGNED);\n+      Assertions.assertNotNull(operator);\n+      domainNS = ((ArrayList<String>) operatorMap.get(\"domainNamespaces\")).get(0);\n+      namespaceList.append((String)operatorMap.get(\"namespace\"));\n+      namespaceList.append(\" \").append(domainNS);\n+    }\n+  }\n+\n+  /**\n+   * Releases k8s cluster lease, archives result, pv directories.\n+   *\n+   * @throws Exception exception\n+   */\n+  @AfterAll\n+  public static void staticUnPrepare() throws Exception {\n+    tearDown(new Object() {\n+    }.getClass().getEnclosingClass().getSimpleName(), namespaceList.toString());\n+\n+    LoggerHelper.getLocal().info(\"SUCCESS\");\n+  }\n+\n+  /**\n+   * Create a domain using model in image and having configmap in the domain.yaml\n+   * before deploying the domain. After deploying the domain crd,\n+   * re-create the configmap with a model file that define a JDBC DataSource", "originalCommit": "41d9df03dd170d1a804b71db9671e614e47c5c55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMwMDIzMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r398300233", "bodyText": "I delete it first and then create it again. Should it be re-created?", "author": "hzhao-github", "createdAt": "2020-03-26T03:39:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyOTQ2NA=="}], "type": "inlineReview", "revised_code": {"commit": "b55d8189ef02962e3c741174d137480386cd22b4", "chunk": "diff --git a/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java b/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java\nindex 793950823f..f80ca829a4 100644\n--- a/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java\n+++ b/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java\n\n@@ -28,7 +28,8 @@ import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n /**\n- * Simple JUnit test file used for testing Model in Image.\n+ * This JUnit test is used for testing\n+ * Wdt Config Override with Model File(s) to existing MII domain\n  *\n  * <p>This test is used for creating domain using model in image.\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyOTc1Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r398229757", "bodyText": "this is a really nice test, i like this, i can read it understand the intent easily.", "author": "markxnelson", "createdAt": "2020-03-25T23:22:46Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java", "diffHunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator;\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.logging.Level;\n+\n+import oracle.kubernetes.operator.utils.Domain;\n+import oracle.kubernetes.operator.utils.DomainCrd;\n+import oracle.kubernetes.operator.utils.ExecResult;\n+import oracle.kubernetes.operator.utils.LoggerHelper;\n+import oracle.kubernetes.operator.utils.Operator;\n+import oracle.kubernetes.operator.utils.Operator.RestCertType;\n+import oracle.kubernetes.operator.utils.TestUtils;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Simple JUnit test file used for testing Model in Image.\n+ *\n+ * <p>This test is used for creating domain using model in image.\n+ */\n+\n+public class ItModelInImageOverride extends MiiBaseTest {\n+  private static Operator operator;\n+  private static Domain domain;\n+  private static String domainNS;\n+  private static String testClassName;\n+  private static StringBuffer namespaceList;\n+  private static final String configMapSuffix = \"-mii-config-map\";\n+\n+  /**\n+   * This method gets called only once before any of the test methods are executed. It does the\n+   * initialization of the integration test properties defined in OperatorIT.properties and setting\n+   * the resultRoot, pvRoot and projectRoot attributes.\n+   *\n+   * @throws Exception exception\n+   */\n+  @BeforeAll\n+  public static void staticPrepare() throws Exception {\n+    namespaceList = new StringBuffer();\n+    testClassName = new Object() {\n+    }.getClass().getEnclosingClass().getSimpleName();\n+    // initialize test properties and create the directories\n+    initialize(APP_PROPS_FILE, testClassName);\n+  }\n+\n+  /**\n+   * This method gets called before every test. It creates the result/pv root directories\n+   * for the test. Creates the operator and domain if its not running.\n+   *\n+   * @throws Exception exception if result/pv/operator/domain creation fails\n+   */\n+  @BeforeEach\n+  public void prepare() throws Exception {\n+    createResultAndPvDirs(testClassName);\n+\n+    // create operator1\n+    if (operator == null) {\n+      Map<String, Object> operatorMap = createOperatorMap(getNewSuffixCount(),\n+          true, testClassName);\n+      operator = TestUtils.createOperator(operatorMap, RestCertType.SELF_SIGNED);\n+      Assertions.assertNotNull(operator);\n+      domainNS = ((ArrayList<String>) operatorMap.get(\"domainNamespaces\")).get(0);\n+      namespaceList.append((String)operatorMap.get(\"namespace\"));\n+      namespaceList.append(\" \").append(domainNS);\n+    }\n+  }\n+\n+  /**\n+   * Releases k8s cluster lease, archives result, pv directories.\n+   *\n+   * @throws Exception exception\n+   */\n+  @AfterAll\n+  public static void staticUnPrepare() throws Exception {\n+    tearDown(new Object() {\n+    }.getClass().getEnclosingClass().getSimpleName(), namespaceList.toString());\n+\n+    LoggerHelper.getLocal().info(\"SUCCESS\");\n+  }\n+\n+  /**\n+   * Create a domain using model in image and having configmap in the domain.yaml\n+   * before deploying the domain. After deploying the domain crd,\n+   * re-create the configmap with a model file that define a JDBC DataSource\n+   * and update the domain crd to new config map and change domain\n+   * restartVersion to reload the model, generate new config and initiate a\n+   * rolling restart.\n+   *\n+   * @throws Exception exception\n+   */\n+  @Test\n+  public void testMiiOverrideNonExistJdbc() throws Exception {\n+    Assumptions.assumeTrue(QUICKTEST);\n+    String testMethodName = new Object() {\n+    }.getClass().getEnclosingMethod().getName();\n+    logTestBegin(testMethodName);\n+    LoggerHelper.getLocal().log(Level.INFO,\n+        \"Creating Domain & waiting for the script to complete execution\");\n+    boolean testCompletedSuccessfully = false;\n+    try {\n+      // create Domain using the image created by MII", "originalCommit": "41d9df03dd170d1a804b71db9671e614e47c5c55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI5OTM0Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r398299347", "bodyText": "Thanks. I just added a python file to verify dsResource values like readTimeout, DS name, etc. Ready for the second test case :)", "author": "hzhao-github", "createdAt": "2020-03-26T03:35:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIyOTc1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "b55d8189ef02962e3c741174d137480386cd22b4", "chunk": "diff --git a/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java b/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java\nindex 793950823f..f80ca829a4 100644\n--- a/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java\n+++ b/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java\n\n@@ -28,7 +28,8 @@ import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n /**\n- * Simple JUnit test file used for testing Model in Image.\n+ * This JUnit test is used for testing\n+ * Wdt Config Override with Model File(s) to existing MII domain\n  *\n  * <p>This test is used for creating domain using model in image.\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIzMjUwMw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r398232503", "bodyText": "this is a really nice method, logs what it is doing, puts the command in a string, which it prints and execs, so no chance of someone coming along later and updating one but not the other, the assertion is specific and has a reasonable message.", "author": "markxnelson", "createdAt": "2020-03-25T23:30:44Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java", "diffHunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator;\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.logging.Level;\n+\n+import oracle.kubernetes.operator.utils.Domain;\n+import oracle.kubernetes.operator.utils.DomainCrd;\n+import oracle.kubernetes.operator.utils.ExecResult;\n+import oracle.kubernetes.operator.utils.LoggerHelper;\n+import oracle.kubernetes.operator.utils.Operator;\n+import oracle.kubernetes.operator.utils.Operator.RestCertType;\n+import oracle.kubernetes.operator.utils.TestUtils;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Simple JUnit test file used for testing Model in Image.\n+ *\n+ * <p>This test is used for creating domain using model in image.\n+ */\n+\n+public class ItModelInImageOverride extends MiiBaseTest {\n+  private static Operator operator;\n+  private static Domain domain;\n+  private static String domainNS;\n+  private static String testClassName;\n+  private static StringBuffer namespaceList;\n+  private static final String configMapSuffix = \"-mii-config-map\";\n+\n+  /**\n+   * This method gets called only once before any of the test methods are executed. It does the\n+   * initialization of the integration test properties defined in OperatorIT.properties and setting\n+   * the resultRoot, pvRoot and projectRoot attributes.\n+   *\n+   * @throws Exception exception\n+   */\n+  @BeforeAll\n+  public static void staticPrepare() throws Exception {\n+    namespaceList = new StringBuffer();\n+    testClassName = new Object() {\n+    }.getClass().getEnclosingClass().getSimpleName();\n+    // initialize test properties and create the directories\n+    initialize(APP_PROPS_FILE, testClassName);\n+  }\n+\n+  /**\n+   * This method gets called before every test. It creates the result/pv root directories\n+   * for the test. Creates the operator and domain if its not running.\n+   *\n+   * @throws Exception exception if result/pv/operator/domain creation fails\n+   */\n+  @BeforeEach\n+  public void prepare() throws Exception {\n+    createResultAndPvDirs(testClassName);\n+\n+    // create operator1\n+    if (operator == null) {\n+      Map<String, Object> operatorMap = createOperatorMap(getNewSuffixCount(),\n+          true, testClassName);\n+      operator = TestUtils.createOperator(operatorMap, RestCertType.SELF_SIGNED);\n+      Assertions.assertNotNull(operator);\n+      domainNS = ((ArrayList<String>) operatorMap.get(\"domainNamespaces\")).get(0);\n+      namespaceList.append((String)operatorMap.get(\"namespace\"));\n+      namespaceList.append(\" \").append(domainNS);\n+    }\n+  }\n+\n+  /**\n+   * Releases k8s cluster lease, archives result, pv directories.\n+   *\n+   * @throws Exception exception\n+   */\n+  @AfterAll\n+  public static void staticUnPrepare() throws Exception {\n+    tearDown(new Object() {\n+    }.getClass().getEnclosingClass().getSimpleName(), namespaceList.toString());\n+\n+    LoggerHelper.getLocal().info(\"SUCCESS\");\n+  }\n+\n+  /**\n+   * Create a domain using model in image and having configmap in the domain.yaml\n+   * before deploying the domain. After deploying the domain crd,\n+   * re-create the configmap with a model file that define a JDBC DataSource\n+   * and update the domain crd to new config map and change domain\n+   * restartVersion to reload the model, generate new config and initiate a\n+   * rolling restart.\n+   *\n+   * @throws Exception exception\n+   */\n+  @Test\n+  public void testMiiOverrideNonExistJdbc() throws Exception {\n+    Assumptions.assumeTrue(QUICKTEST);\n+    String testMethodName = new Object() {\n+    }.getClass().getEnclosingMethod().getName();\n+    logTestBegin(testMethodName);\n+    LoggerHelper.getLocal().log(Level.INFO,\n+        \"Creating Domain & waiting for the script to complete execution\");\n+    boolean testCompletedSuccessfully = false;\n+    try {\n+      // create Domain using the image created by MII\n+      createDomainUsingMii();\n+\n+      // override config\n+      wdtConfigOverride();\n+\n+      // update domain yaml with restartVersion and\n+      // apply the domain yaml, verify domain restarted\n+      modifyDomainYamlWithRestartVersion();\n+\n+      // verify the test result\n+      verifyJdbcOverride();\n+\n+      testCompletedSuccessfully = true;\n+    } finally {\n+      if (domain != null && (JENKINS || testCompletedSuccessfully)) {\n+        TestUtils.deleteWeblogicDomainResources(domain.getDomainUid());\n+      }\n+    }\n+\n+    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethodName);\n+  }\n+\n+  private void createDomainUsingMii() throws Exception {\n+    LoggerHelper.getLocal().log(Level.INFO,\n+        \"Creating Domain & waiting for the script to complete execution\");\n+    // config map before deploying domain crd\n+    Map<String, Object> domainMap =\n+        createModelInImageMap(getNewSuffixCount(), testClassName);\n+    final String cmName = domainMap.get(\"domainUID\") + configMapSuffix;\n+    domainMap.put(\"namespace\", domainNS);\n+    // params passed to mii\n+    domainMap.put(\"wdtModelFile\", \"./model.wls.yaml\");\n+    domainMap.put(\"wdtModelPropertiesFile\", \"./model.empty.properties\");\n+    // params to create cm\n+    String cmModelFile = \"./model.properties\";\n+    domainMap.put(\"miiConfigMap\", cmName);\n+    domainMap.put(\"miiConfigMapFileOrDir\", cmModelFile);\n+\n+    // create domain and verify\n+    domain = TestUtils.createDomain(domainMap);\n+    domain.verifyDomainCreated();\n+  }\n+\n+  private void wdtConfigOverride() throws Exception {\n+    LoggerHelper.getLocal().log(Level.INFO, \"Creating configMap\");\n+    String origDir = BaseTest.getProjectRoot()\n+        + \"/integration-tests/src/test/resources/model-in-image\";\n+    String origModelFile = origDir + \"/model.jdbc.yaml\";\n+    String origPropFile = origDir + \"/model.jdbc.properties\";\n+    String destDir = getResultDir() + \"/samples/model-in-image-override\";;\n+    String destModelFile = destDir + \"/model.jdbc_2.yaml\";\n+    String destPropFile = destDir + \"/model.jdbc_2.properties\";\n+    Files.createDirectories(Paths.get(destDir));\n+\n+    TestUtils.copyFile(origModelFile, destModelFile);\n+    TestUtils.copyFile(origPropFile, destPropFile);\n+\n+    // Re-create config map after deploying domain crd\n+    final String domainUid = domain.getDomainUid();\n+    final String cmName = domainUid + configMapSuffix;\n+    final String label = \"weblogic.domainUID=\" + domainUid;\n+\n+    TestUtils.createConfigMap(cmName, destDir, domainNS, label);\n+  }\n+\n+  private void modifyDomainYamlWithRestartVersion()\n+      throws Exception {\n+    String originalYaml =\n+        getUserProjectsDir()\n+            + \"/weblogic-domains/\"\n+            + domain.getDomainUid()\n+            + \"/domain.yaml\";\n+\n+    // Modify the original domain yaml to include restartVersion in admin server node\n+    DomainCrd crd = new DomainCrd(originalYaml);\n+    Map<String, String> objectNode = new HashMap();\n+    objectNode.put(\"restartVersion\", \"v1.1\");\n+    crd.addObjectNodeToDomain(objectNode);\n+    String modYaml = crd.getYamlTree();\n+    LoggerHelper.getLocal().log(Level.INFO, modYaml);\n+\n+    // Write the modified yaml to a new file\n+    Path path = Paths.get(getUserProjectsDir()\n+        + \"/weblogic-domains/\"\n+        + domain.getDomainUid(), \"modified.domain.yaml\");\n+    LoggerHelper.getLocal().log(Level.INFO, \"Path of the modified domain.yaml :{0}\", path.toString());\n+    Charset charset = StandardCharsets.UTF_8;\n+    Files.write(path, modYaml.getBytes(charset));\n+\n+    // Apply the new yaml to update the domain crd\n+    LoggerHelper.getLocal().log(Level.INFO, \"kubectl apply -f {0}\", path.toString());\n+    ExecResult exec = TestUtils.exec(\"kubectl apply -f \" + path.toString());\n+    LoggerHelper.getLocal().log(Level.INFO, exec.stdout());\n+    LoggerHelper.getLocal().log(Level.INFO, \"Verifying if the domain is restarted\");\n+    domain.verifyDomainRestarted();\n+  }\n+\n+  private void verifyJdbcOverride() throws Exception {\n+    // get domain name", "originalCommit": "41d9df03dd170d1a804b71db9671e614e47c5c55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMwMjA2MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r398302060", "bodyText": "Thanks,Mark for encouragement :)", "author": "hzhao-github", "createdAt": "2020-03-26T03:47:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIzMjUwMw=="}], "type": "inlineReview", "revised_code": {"commit": "b55d8189ef02962e3c741174d137480386cd22b4", "chunk": "diff --git a/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java b/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java\nindex 793950823f..f80ca829a4 100644\n--- a/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java\n+++ b/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java\n\n@@ -28,7 +28,8 @@ import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n /**\n- * Simple JUnit test file used for testing Model in Image.\n+ * This JUnit test is used for testing\n+ * Wdt Config Override with Model File(s) to existing MII domain\n  *\n  * <p>This test is used for creating domain using model in image.\n  */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIzMjU3NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r398232575", "bodyText": "should this be an assumption or an assertion?", "author": "markxnelson", "createdAt": "2020-03-25T23:30:56Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java", "diffHunk": "@@ -0,0 +1,246 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator;\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.logging.Level;\n+\n+import oracle.kubernetes.operator.utils.Domain;\n+import oracle.kubernetes.operator.utils.DomainCrd;\n+import oracle.kubernetes.operator.utils.ExecResult;\n+import oracle.kubernetes.operator.utils.LoggerHelper;\n+import oracle.kubernetes.operator.utils.Operator;\n+import oracle.kubernetes.operator.utils.Operator.RestCertType;\n+import oracle.kubernetes.operator.utils.TestUtils;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Simple JUnit test file used for testing Model in Image.\n+ *\n+ * <p>This test is used for creating domain using model in image.\n+ */\n+\n+public class ItModelInImageOverride extends MiiBaseTest {\n+  private static Operator operator;\n+  private static Domain domain;\n+  private static String domainNS;\n+  private static String testClassName;\n+  private static StringBuffer namespaceList;\n+  private static final String configMapSuffix = \"-mii-config-map\";\n+\n+  /**\n+   * This method gets called only once before any of the test methods are executed. It does the\n+   * initialization of the integration test properties defined in OperatorIT.properties and setting\n+   * the resultRoot, pvRoot and projectRoot attributes.\n+   *\n+   * @throws Exception exception\n+   */\n+  @BeforeAll\n+  public static void staticPrepare() throws Exception {\n+    namespaceList = new StringBuffer();\n+    testClassName = new Object() {\n+    }.getClass().getEnclosingClass().getSimpleName();\n+    // initialize test properties and create the directories\n+    initialize(APP_PROPS_FILE, testClassName);\n+  }\n+\n+  /**\n+   * This method gets called before every test. It creates the result/pv root directories\n+   * for the test. Creates the operator and domain if its not running.\n+   *\n+   * @throws Exception exception if result/pv/operator/domain creation fails\n+   */\n+  @BeforeEach\n+  public void prepare() throws Exception {\n+    createResultAndPvDirs(testClassName);\n+\n+    // create operator1\n+    if (operator == null) {\n+      Map<String, Object> operatorMap = createOperatorMap(getNewSuffixCount(),\n+          true, testClassName);\n+      operator = TestUtils.createOperator(operatorMap, RestCertType.SELF_SIGNED);\n+      Assertions.assertNotNull(operator);\n+      domainNS = ((ArrayList<String>) operatorMap.get(\"domainNamespaces\")).get(0);\n+      namespaceList.append((String)operatorMap.get(\"namespace\"));\n+      namespaceList.append(\" \").append(domainNS);\n+    }\n+  }\n+\n+  /**\n+   * Releases k8s cluster lease, archives result, pv directories.\n+   *\n+   * @throws Exception exception\n+   */\n+  @AfterAll\n+  public static void staticUnPrepare() throws Exception {\n+    tearDown(new Object() {\n+    }.getClass().getEnclosingClass().getSimpleName(), namespaceList.toString());\n+\n+    LoggerHelper.getLocal().info(\"SUCCESS\");\n+  }\n+\n+  /**\n+   * Create a domain using model in image and having configmap in the domain.yaml\n+   * before deploying the domain. After deploying the domain crd,\n+   * re-create the configmap with a model file that define a JDBC DataSource\n+   * and update the domain crd to new config map and change domain\n+   * restartVersion to reload the model, generate new config and initiate a\n+   * rolling restart.\n+   *\n+   * @throws Exception exception\n+   */\n+  @Test\n+  public void testMiiOverrideNonExistJdbc() throws Exception {\n+    Assumptions.assumeTrue(QUICKTEST);\n+    String testMethodName = new Object() {\n+    }.getClass().getEnclosingMethod().getName();\n+    logTestBegin(testMethodName);\n+    LoggerHelper.getLocal().log(Level.INFO,\n+        \"Creating Domain & waiting for the script to complete execution\");\n+    boolean testCompletedSuccessfully = false;\n+    try {\n+      // create Domain using the image created by MII\n+      createDomainUsingMii();\n+\n+      // override config\n+      wdtConfigOverride();\n+\n+      // update domain yaml with restartVersion and\n+      // apply the domain yaml, verify domain restarted\n+      modifyDomainYamlWithRestartVersion();\n+\n+      // verify the test result\n+      verifyJdbcOverride();\n+\n+      testCompletedSuccessfully = true;\n+    } finally {\n+      if (domain != null && (JENKINS || testCompletedSuccessfully)) {\n+        TestUtils.deleteWeblogicDomainResources(domain.getDomainUid());\n+      }\n+    }\n+\n+    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethodName);\n+  }\n+\n+  private void createDomainUsingMii() throws Exception {\n+    LoggerHelper.getLocal().log(Level.INFO,\n+        \"Creating Domain & waiting for the script to complete execution\");\n+    // config map before deploying domain crd\n+    Map<String, Object> domainMap =\n+        createModelInImageMap(getNewSuffixCount(), testClassName);\n+    final String cmName = domainMap.get(\"domainUID\") + configMapSuffix;\n+    domainMap.put(\"namespace\", domainNS);\n+    // params passed to mii\n+    domainMap.put(\"wdtModelFile\", \"./model.wls.yaml\");\n+    domainMap.put(\"wdtModelPropertiesFile\", \"./model.empty.properties\");\n+    // params to create cm\n+    String cmModelFile = \"./model.properties\";\n+    domainMap.put(\"miiConfigMap\", cmName);\n+    domainMap.put(\"miiConfigMapFileOrDir\", cmModelFile);\n+\n+    // create domain and verify\n+    domain = TestUtils.createDomain(domainMap);\n+    domain.verifyDomainCreated();\n+  }\n+\n+  private void wdtConfigOverride() throws Exception {\n+    LoggerHelper.getLocal().log(Level.INFO, \"Creating configMap\");\n+    String origDir = BaseTest.getProjectRoot()\n+        + \"/integration-tests/src/test/resources/model-in-image\";\n+    String origModelFile = origDir + \"/model.jdbc.yaml\";\n+    String origPropFile = origDir + \"/model.jdbc.properties\";\n+    String destDir = getResultDir() + \"/samples/model-in-image-override\";;\n+    String destModelFile = destDir + \"/model.jdbc_2.yaml\";\n+    String destPropFile = destDir + \"/model.jdbc_2.properties\";\n+    Files.createDirectories(Paths.get(destDir));\n+\n+    TestUtils.copyFile(origModelFile, destModelFile);\n+    TestUtils.copyFile(origPropFile, destPropFile);\n+\n+    // Re-create config map after deploying domain crd\n+    final String domainUid = domain.getDomainUid();\n+    final String cmName = domainUid + configMapSuffix;\n+    final String label = \"weblogic.domainUID=\" + domainUid;\n+\n+    TestUtils.createConfigMap(cmName, destDir, domainNS, label);\n+  }\n+\n+  private void modifyDomainYamlWithRestartVersion()\n+      throws Exception {\n+    String originalYaml =\n+        getUserProjectsDir()\n+            + \"/weblogic-domains/\"\n+            + domain.getDomainUid()\n+            + \"/domain.yaml\";\n+\n+    // Modify the original domain yaml to include restartVersion in admin server node\n+    DomainCrd crd = new DomainCrd(originalYaml);\n+    Map<String, String> objectNode = new HashMap();\n+    objectNode.put(\"restartVersion\", \"v1.1\");\n+    crd.addObjectNodeToDomain(objectNode);\n+    String modYaml = crd.getYamlTree();\n+    LoggerHelper.getLocal().log(Level.INFO, modYaml);\n+\n+    // Write the modified yaml to a new file\n+    Path path = Paths.get(getUserProjectsDir()\n+        + \"/weblogic-domains/\"\n+        + domain.getDomainUid(), \"modified.domain.yaml\");\n+    LoggerHelper.getLocal().log(Level.INFO, \"Path of the modified domain.yaml :{0}\", path.toString());\n+    Charset charset = StandardCharsets.UTF_8;\n+    Files.write(path, modYaml.getBytes(charset));\n+\n+    // Apply the new yaml to update the domain crd\n+    LoggerHelper.getLocal().log(Level.INFO, \"kubectl apply -f {0}\", path.toString());\n+    ExecResult exec = TestUtils.exec(\"kubectl apply -f \" + path.toString());\n+    LoggerHelper.getLocal().log(Level.INFO, exec.stdout());\n+    LoggerHelper.getLocal().log(Level.INFO, \"Verifying if the domain is restarted\");\n+    domain.verifyDomainRestarted();\n+  }\n+\n+  private void verifyJdbcOverride() throws Exception {\n+    // get domain name\n+    StringBuffer cmdKubectlSh = new StringBuffer(\"kubectl get domain -n \");\n+    cmdKubectlSh\n+        .append(domainNS)\n+        .append(\" -o=jsonpath='{.items[0].metadata.name}'\");\n+\n+    LoggerHelper.getLocal().log(Level.INFO, \"Command to exec: \" + cmdKubectlSh);\n+    ExecResult result = TestUtils.exec(cmdKubectlSh.toString());\n+    String domainName = result.stdout();\n+    LoggerHelper.getLocal().log(Level.INFO, \"Domain name is: \" + domainName);\n+\n+    // check JDBC DS override\n+    cmdKubectlSh = new StringBuffer(\"kubectl -n \");\n+    cmdKubectlSh\n+        .append(domainNS)\n+        .append(\" exec -it \")\n+        .append(domain.getDomainUid())\n+        .append(\"-\")\n+        .append(domain.getAdminServerName())\n+        .append(\" -- bash -c 'cd /u01/oracle/user_projects/domains/\")\n+        .append(domainName)\n+        .append(\"/config/jdbc/\")\n+        .append(\" && grep -R jdbc/generic1\")\n+        .append(\"'\");\n+\n+    LoggerHelper.getLocal().log(Level.INFO, \"Command to exec: \" + cmdKubectlSh);\n+    result = TestUtils.exec(cmdKubectlSh.toString());\n+    LoggerHelper.getLocal().log(Level.INFO, \"JDBC DS info from server pod: \" + result.stdout());\n+\n+    Assumptions.assumeTrue(result.stdout().contains(\"<jndi-name>jdbc/generic1</jndi-name>\"),", "originalCommit": "41d9df03dd170d1a804b71db9671e614e47c5c55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODMxMzc2Mw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r398313763", "bodyText": "You are right, should be assertion so that the failures can be registered as a failed test. fixed", "author": "hzhao-github", "createdAt": "2020-03-26T04:38:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODIzMjU3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "b55d8189ef02962e3c741174d137480386cd22b4", "chunk": "diff --git a/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java b/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java\nindex 793950823f..f80ca829a4 100644\n--- a/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java\n+++ b/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java\n\n@@ -28,7 +28,8 @@ import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n /**\n- * Simple JUnit test file used for testing Model in Image.\n+ * This JUnit test is used for testing\n+ * Wdt Config Override with Model File(s) to existing MII domain\n  *\n  * <p>This test is used for creating domain using model in image.\n  */\n"}}, {"oid": "b55d8189ef02962e3c741174d137480386cd22b4", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b55d8189ef02962e3c741174d137480386cd22b4", "message": "Added python file to verify JDBC DS prop in server pod jenkins-ignore", "committedDate": "2020-03-26T03:27:47Z", "type": "commit"}, {"oid": "5408aa2c33aa9fd5a944b6ebe9055fc352a0abf8", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/5408aa2c33aa9fd5a944b6ebe9055fc352a0abf8", "message": "Changes b ased on the comments jenkins-ignore", "committedDate": "2020-03-26T05:58:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYyNDE5MQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r398624191", "bodyText": "This method is there in MiiBaseTest.java, why do u need this here again?", "author": "vanajamukkara", "createdAt": "2020-03-26T14:38:46Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java", "diffHunk": "@@ -0,0 +1,348 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator;\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.logging.Level;\n+\n+import oracle.kubernetes.operator.utils.Domain;\n+import oracle.kubernetes.operator.utils.DomainCrd;\n+import oracle.kubernetes.operator.utils.ExecResult;\n+import oracle.kubernetes.operator.utils.LoggerHelper;\n+import oracle.kubernetes.operator.utils.Operator;\n+import oracle.kubernetes.operator.utils.Operator.RestCertType;\n+import oracle.kubernetes.operator.utils.TestUtils;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * This JUnit test is used for testing\n+ * Wdt Config Override with Model File(s) to existing MII domain\n+ *\n+ * <p>This test is used for creating domain using model in image.\n+ */\n+\n+public class ItModelInImageOverride extends MiiBaseTest {\n+  private static Operator operator;\n+  private static Domain domain;\n+  private static String domainNS;\n+  private static String testClassName;\n+  private static StringBuffer namespaceList;\n+  private static final String configMapSuffix = \"-mii-config-map\";\n+  private static final String jndiName = \"jdbc/generic1\";\n+  private static final String dsName = \"MyDataSource\";\n+  private static final String readTimeout_1 = \"30001\";\n+  private static final String readTimeout_2 = \"30002\";\n+\n+  /**\n+   * This method does the initialization of the integration test\n+   * properties defined in OperatorIT.properties and setting\n+   * the resultRoot, pvRoot and projectRoot attributes.\n+   *\n+   * @throws Exception exception if initializing the application properties\n+   *          and creates directories for results fails.\n+   */\n+  @BeforeAll\n+  public static void staticPrepare() throws Exception {\n+    namespaceList = new StringBuffer();\n+    testClassName = new Object() {\n+    }.getClass().getEnclosingClass().getSimpleName();\n+    // initialize test properties and create the directories\n+    initialize(APP_PROPS_FILE, testClassName);\n+  }\n+\n+  /**\n+   * This method creates the result/pv root directories for the test.\n+   * Creates the operator if its not running.\n+   *\n+   * @throws Exception exception if result/pv/operator/domain creation fails\n+   */\n+  @BeforeEach\n+  public void prepare() throws Exception {\n+    createResultAndPvDirs(testClassName);\n+\n+    // create operator1\n+    if (operator == null) {\n+      Map<String, Object> operatorMap = createOperatorMap(getNewSuffixCount(),\n+          true, testClassName);\n+      operator = TestUtils.createOperator(operatorMap, RestCertType.SELF_SIGNED);\n+      Assertions.assertNotNull(operator);\n+      domainNS = ((ArrayList<String>) operatorMap.get(\"domainNamespaces\")).get(0);\n+      namespaceList.append((String)operatorMap.get(\"namespace\"));\n+      namespaceList.append(\" \").append(domainNS);\n+    }\n+  }\n+\n+  /**\n+   * Releases k8s cluster lease, archives result, pv directories.\n+   *\n+   * @throws Exception exception\n+   */\n+  @AfterAll\n+  public static void staticUnPrepare() throws Exception {\n+    tearDown(new Object() {\n+    }.getClass().getEnclosingClass().getSimpleName(), namespaceList.toString());\n+\n+    LoggerHelper.getLocal().info(\"SUCCESS\");\n+  }\n+\n+  /**\n+   * Create a domain using model in image and having configmap in the domain.yaml\n+   * before deploying the domain. After deploying the domain crd,\n+   * re-create the configmap with a model file that define a JDBC DataSource\n+   * and update the domain crd to change domain restartVersion\n+   * to reload the model, generate new config and initiate a rolling restart.\n+   *\n+   * @throws Exception exception\n+   */\n+  @Test\n+  public void testMiiOverrideNonExistJdbc() throws Exception {\n+    Assumptions.assumeTrue(QUICKTEST);\n+    String testMethodName = new Object() {\n+    }.getClass().getEnclosingMethod().getName();\n+    logTestBegin(testMethodName);\n+    LoggerHelper.getLocal().log(Level.INFO,\n+        \"Creating Domain & waiting for the script to complete execution\");\n+    boolean testCompletedSuccessfully = false;\n+    try {\n+      // create Domain using the image created by MII\n+      createDomainUsingMii();\n+\n+      // override config\n+      wdtConfigOverride();\n+\n+      // update domain yaml with restartVersion and\n+      // apply the domain yaml, verify domain restarted\n+      modifyDomainYamlWithRestartVersion();\n+\n+      // verify the test result by checking override config file on server pod\n+      verifyJdbcOverride();\n+\n+      // verify the test result by getting JDBC DS props via WLST on server pod\n+      Set<String> jdbcResourcesToVerify = new HashSet<String>();\n+      // verify JDBC DS name and value of read timeout\n+      jdbcResourcesToVerify.add(\"datasource.name.1=\" + dsName);\n+      jdbcResourcesToVerify.add(\"datasource.readTimeout.1=\" + readTimeout_1);\n+\n+      verifyJdbcResources(jdbcResourcesToVerify);\n+\n+      testCompletedSuccessfully = true;\n+    } finally {\n+      if (domain != null && (JENKINS || testCompletedSuccessfully)) {\n+        TestUtils.deleteWeblogicDomainResources(domain.getDomainUid());\n+      }\n+    }\n+\n+    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethodName);\n+  }\n+\n+  private void createDomainUsingMii() throws Exception {\n+    LoggerHelper.getLocal().log(Level.INFO,\n+        \"Creating Domain & waiting for the script to complete execution\");\n+    // config map before deploying domain crd\n+    Map<String, Object> domainMap =\n+        createModelInImageMap(getNewSuffixCount(), testClassName);\n+    final String cmName = domainMap.get(\"domainUID\") + configMapSuffix;\n+    domainMap.put(\"namespace\", domainNS);\n+    // params passed to mii\n+    domainMap.put(\"wdtModelFile\", \"./model.wls.yaml\");\n+    domainMap.put(\"wdtModelPropertiesFile\", \"./model.empty.properties\");\n+    // params to create cm\n+    String cmModelFile = \"./model.properties\";\n+    domainMap.put(\"miiConfigMap\", cmName);\n+    domainMap.put(\"miiConfigMapFileOrDir\", cmModelFile);\n+\n+    // create domain and verify\n+    domain = TestUtils.createDomain(domainMap);\n+    domain.verifyDomainCreated();\n+  }\n+\n+  private void wdtConfigOverride() throws Exception {\n+    LoggerHelper.getLocal().log(Level.INFO, \"Creating configMap\");\n+    String origDir = BaseTest.getProjectRoot()\n+        + \"/integration-tests/src/test/resources/model-in-image\";\n+    String origModelFile = origDir + \"/model.jdbc.yaml\";\n+    String origPropFile = origDir + \"/model.jdbc.properties\";\n+    String destDir = getResultDir() + \"/samples/model-in-image-override\";;\n+    String destModelFile = destDir + \"/model.jdbc_2.yaml\";\n+    String destPropFile = destDir + \"/model.jdbc_2.properties\";\n+    Files.createDirectories(Paths.get(destDir));\n+\n+    TestUtils.copyFile(origModelFile, destModelFile);\n+    TestUtils.copyFile(origPropFile, destPropFile);\n+\n+    // Re-create config map after deploying domain crd\n+    final String domainUid = domain.getDomainUid();\n+    final String cmName = domainUid + configMapSuffix;\n+    final String label = \"weblogic.domainUID=\" + domainUid;\n+\n+    TestUtils.createConfigMap(cmName, destDir, domainNS, label);\n+  }\n+\n+  private void modifyDomainYamlWithRestartVersion()", "originalCommit": "5408aa2c33aa9fd5a944b6ebe9055fc352a0abf8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY2MDIwMQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r398660201", "bodyText": "modifyDomainYamlWithNewConfigMapAndDomainRestartVersion in MiiBaseTest.java does two things:\n\nreplace cm name with a new one\nadd restartVersion: v1.1\n\nIn my test,\n\nI don't need to create a brand new cm, I just re-create the existing one, so \"replacing cm with a new name\" doesn't apply to my test\nrestartVersion is hard coded, I need it to be flex for later test case.\n\nI can move modifyDomainYamlWithRestartVersion() in my test suite to MiiBaseTest.java though, if you like. Just let me know.", "author": "hzhao-github", "createdAt": "2020-03-26T15:23:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYyNDE5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "7658283a0fab03a9fda7dedb4e782e40469ce621", "chunk": "diff --git a/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java b/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java\nindex b71a154839..84e7c6b325 100644\n--- a/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java\n+++ b/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java\n\n@@ -3,13 +3,10 @@\n \n package oracle.kubernetes.operator;\n \n-import java.nio.charset.Charset;\n import java.nio.charset.StandardCharsets;\n import java.nio.file.Files;\n-import java.nio.file.Path;\n import java.nio.file.Paths;\n import java.util.ArrayList;\n-import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYyNTM1NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r398625354", "bodyText": "Check MiiBaseTest.createMIIDomainWithConfigMap()", "author": "vanajamukkara", "createdAt": "2020-03-26T14:40:14Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java", "diffHunk": "@@ -0,0 +1,348 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator;\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.logging.Level;\n+\n+import oracle.kubernetes.operator.utils.Domain;\n+import oracle.kubernetes.operator.utils.DomainCrd;\n+import oracle.kubernetes.operator.utils.ExecResult;\n+import oracle.kubernetes.operator.utils.LoggerHelper;\n+import oracle.kubernetes.operator.utils.Operator;\n+import oracle.kubernetes.operator.utils.Operator.RestCertType;\n+import oracle.kubernetes.operator.utils.TestUtils;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * This JUnit test is used for testing\n+ * Wdt Config Override with Model File(s) to existing MII domain\n+ *\n+ * <p>This test is used for creating domain using model in image.\n+ */\n+\n+public class ItModelInImageOverride extends MiiBaseTest {\n+  private static Operator operator;\n+  private static Domain domain;\n+  private static String domainNS;\n+  private static String testClassName;\n+  private static StringBuffer namespaceList;\n+  private static final String configMapSuffix = \"-mii-config-map\";\n+  private static final String jndiName = \"jdbc/generic1\";\n+  private static final String dsName = \"MyDataSource\";\n+  private static final String readTimeout_1 = \"30001\";\n+  private static final String readTimeout_2 = \"30002\";\n+\n+  /**\n+   * This method does the initialization of the integration test\n+   * properties defined in OperatorIT.properties and setting\n+   * the resultRoot, pvRoot and projectRoot attributes.\n+   *\n+   * @throws Exception exception if initializing the application properties\n+   *          and creates directories for results fails.\n+   */\n+  @BeforeAll\n+  public static void staticPrepare() throws Exception {\n+    namespaceList = new StringBuffer();\n+    testClassName = new Object() {\n+    }.getClass().getEnclosingClass().getSimpleName();\n+    // initialize test properties and create the directories\n+    initialize(APP_PROPS_FILE, testClassName);\n+  }\n+\n+  /**\n+   * This method creates the result/pv root directories for the test.\n+   * Creates the operator if its not running.\n+   *\n+   * @throws Exception exception if result/pv/operator/domain creation fails\n+   */\n+  @BeforeEach\n+  public void prepare() throws Exception {\n+    createResultAndPvDirs(testClassName);\n+\n+    // create operator1\n+    if (operator == null) {\n+      Map<String, Object> operatorMap = createOperatorMap(getNewSuffixCount(),\n+          true, testClassName);\n+      operator = TestUtils.createOperator(operatorMap, RestCertType.SELF_SIGNED);\n+      Assertions.assertNotNull(operator);\n+      domainNS = ((ArrayList<String>) operatorMap.get(\"domainNamespaces\")).get(0);\n+      namespaceList.append((String)operatorMap.get(\"namespace\"));\n+      namespaceList.append(\" \").append(domainNS);\n+    }\n+  }\n+\n+  /**\n+   * Releases k8s cluster lease, archives result, pv directories.\n+   *\n+   * @throws Exception exception\n+   */\n+  @AfterAll\n+  public static void staticUnPrepare() throws Exception {\n+    tearDown(new Object() {\n+    }.getClass().getEnclosingClass().getSimpleName(), namespaceList.toString());\n+\n+    LoggerHelper.getLocal().info(\"SUCCESS\");\n+  }\n+\n+  /**\n+   * Create a domain using model in image and having configmap in the domain.yaml\n+   * before deploying the domain. After deploying the domain crd,\n+   * re-create the configmap with a model file that define a JDBC DataSource\n+   * and update the domain crd to change domain restartVersion\n+   * to reload the model, generate new config and initiate a rolling restart.\n+   *\n+   * @throws Exception exception\n+   */\n+  @Test\n+  public void testMiiOverrideNonExistJdbc() throws Exception {\n+    Assumptions.assumeTrue(QUICKTEST);\n+    String testMethodName = new Object() {\n+    }.getClass().getEnclosingMethod().getName();\n+    logTestBegin(testMethodName);\n+    LoggerHelper.getLocal().log(Level.INFO,\n+        \"Creating Domain & waiting for the script to complete execution\");\n+    boolean testCompletedSuccessfully = false;\n+    try {\n+      // create Domain using the image created by MII\n+      createDomainUsingMii();\n+\n+      // override config\n+      wdtConfigOverride();\n+\n+      // update domain yaml with restartVersion and\n+      // apply the domain yaml, verify domain restarted\n+      modifyDomainYamlWithRestartVersion();\n+\n+      // verify the test result by checking override config file on server pod\n+      verifyJdbcOverride();\n+\n+      // verify the test result by getting JDBC DS props via WLST on server pod\n+      Set<String> jdbcResourcesToVerify = new HashSet<String>();\n+      // verify JDBC DS name and value of read timeout\n+      jdbcResourcesToVerify.add(\"datasource.name.1=\" + dsName);\n+      jdbcResourcesToVerify.add(\"datasource.readTimeout.1=\" + readTimeout_1);\n+\n+      verifyJdbcResources(jdbcResourcesToVerify);\n+\n+      testCompletedSuccessfully = true;\n+    } finally {\n+      if (domain != null && (JENKINS || testCompletedSuccessfully)) {\n+        TestUtils.deleteWeblogicDomainResources(domain.getDomainUid());\n+      }\n+    }\n+\n+    LoggerHelper.getLocal().log(Level.INFO, \"SUCCESS - \" + testMethodName);\n+  }\n+\n+  private void createDomainUsingMii() throws Exception {", "originalCommit": "5408aa2c33aa9fd5a944b6ebe9055fc352a0abf8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY2MzYzMg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r398663632", "bodyText": "When I started coding, this method doesn't existing and I need the model files to be passed as params. Good we have it now. Will change to use it. Thanks", "author": "hzhao-github", "createdAt": "2020-03-26T15:28:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYyNTM1NA=="}], "type": "inlineReview", "revised_code": {"commit": "7658283a0fab03a9fda7dedb4e782e40469ce621", "chunk": "diff --git a/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java b/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java\nindex b71a154839..84e7c6b325 100644\n--- a/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java\n+++ b/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java\n\n@@ -3,13 +3,10 @@\n \n package oracle.kubernetes.operator;\n \n-import java.nio.charset.Charset;\n import java.nio.charset.StandardCharsets;\n import java.nio.file.Files;\n-import java.nio.file.Path;\n import java.nio.file.Paths;\n import java.util.ArrayList;\n-import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.Map;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYzNDM2NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r398634364", "bodyText": "Check MiiBaseTest.modifyDomainYamlWithNewConfigMapAndDomainRestartVersion(), if you want you can refactor it or add another method in MiiBaseTest as you need these methods in other MII tests also.", "author": "vanajamukkara", "createdAt": "2020-03-26T14:51:46Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java", "diffHunk": "@@ -0,0 +1,348 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator;\n+\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.logging.Level;\n+\n+import oracle.kubernetes.operator.utils.Domain;\n+import oracle.kubernetes.operator.utils.DomainCrd;\n+import oracle.kubernetes.operator.utils.ExecResult;\n+import oracle.kubernetes.operator.utils.LoggerHelper;\n+import oracle.kubernetes.operator.utils.Operator;\n+import oracle.kubernetes.operator.utils.Operator.RestCertType;\n+import oracle.kubernetes.operator.utils.TestUtils;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * This JUnit test is used for testing\n+ * Wdt Config Override with Model File(s) to existing MII domain\n+ *\n+ * <p>This test is used for creating domain using model in image.\n+ */\n+\n+public class ItModelInImageOverride extends MiiBaseTest {\n+  private static Operator operator;\n+  private static Domain domain;\n+  private static String domainNS;\n+  private static String testClassName;\n+  private static StringBuffer namespaceList;\n+  private static final String configMapSuffix = \"-mii-config-map\";\n+  private static final String jndiName = \"jdbc/generic1\";\n+  private static final String dsName = \"MyDataSource\";\n+  private static final String readTimeout_1 = \"30001\";\n+  private static final String readTimeout_2 = \"30002\";\n+\n+  /**\n+   * This method does the initialization of the integration test\n+   * properties defined in OperatorIT.properties and setting\n+   * the resultRoot, pvRoot and projectRoot attributes.\n+   *\n+   * @throws Exception exception if initializing the application properties\n+   *          and creates directories for results fails.\n+   */\n+  @BeforeAll\n+  public static void staticPrepare() throws Exception {\n+    namespaceList = new StringBuffer();\n+    testClassName = new Object() {\n+    }.getClass().getEnclosingClass().getSimpleName();\n+    // initialize test properties and create the directories\n+    initialize(APP_PROPS_FILE, testClassName);\n+  }\n+\n+  /**\n+   * This method creates the result/pv root directories for the test.\n+   * Creates the operator if its not running.\n+   *\n+   * @throws Exception exception if result/pv/operator/domain creation fails\n+   */\n+  @BeforeEach\n+  public void prepare() throws Exception {\n+    createResultAndPvDirs(testClassName);\n+\n+    // create operator1\n+    if (operator == null) {\n+      Map<String, Object> operatorMap = createOperatorMap(getNewSuffixCount(),\n+          true, testClassName);\n+      operator = TestUtils.createOperator(operatorMap, RestCertType.SELF_SIGNED);\n+      Assertions.assertNotNull(operator);\n+      domainNS = ((ArrayList<String>) operatorMap.get(\"domainNamespaces\")).get(0);\n+      namespaceList.append((String)operatorMap.get(\"namespace\"));\n+      namespaceList.append(\" \").append(domainNS);\n+    }\n+  }\n+\n+  /**\n+   * Releases k8s cluster lease, archives result, pv directories.\n+   *\n+   * @throws Exception exception\n+   */\n+  @AfterAll\n+  public static void staticUnPrepare() throws Exception {\n+    tearDown(new Object() {\n+    }.getClass().getEnclosingClass().getSimpleName(), namespaceList.toString());\n+\n+    LoggerHelper.getLocal().info(\"SUCCESS\");\n+  }\n+\n+  /**\n+   * Create a domain using model in image and having configmap in the domain.yaml\n+   * before deploying the domain. After deploying the domain crd,\n+   * re-create the configmap with a model file that define a JDBC DataSource\n+   * and update the domain crd to change domain restartVersion\n+   * to reload the model, generate new config and initiate a rolling restart.\n+   *\n+   * @throws Exception exception\n+   */\n+  @Test\n+  public void testMiiOverrideNonExistJdbc() throws Exception {\n+    Assumptions.assumeTrue(QUICKTEST);\n+    String testMethodName = new Object() {\n+    }.getClass().getEnclosingMethod().getName();\n+    logTestBegin(testMethodName);\n+    LoggerHelper.getLocal().log(Level.INFO,\n+        \"Creating Domain & waiting for the script to complete execution\");\n+    boolean testCompletedSuccessfully = false;\n+    try {\n+      // create Domain using the image created by MII\n+      createDomainUsingMii();\n+\n+      // override config\n+      wdtConfigOverride();\n+\n+      // update domain yaml with restartVersion and\n+      // apply the domain yaml, verify domain restarted\n+      modifyDomainYamlWithRestartVersion();", "originalCommit": "5408aa2c33aa9fd5a944b6ebe9055fc352a0abf8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY2NDY1Ng==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r398664656", "bodyText": "Ok. Will move my to MiiBaseTerst.java. Thanks", "author": "hzhao-github", "createdAt": "2020-03-26T15:29:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYzNDM2NA=="}], "type": "inlineReview", "revised_code": {"commit": "7658283a0fab03a9fda7dedb4e782e40469ce621", "chunk": "diff --git a/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java b/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java\nindex b71a154839..84e7c6b325 100644\n--- a/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java\n+++ b/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java\n\n@@ -3,13 +3,10 @@\n \n package oracle.kubernetes.operator;\n \n-import java.nio.charset.Charset;\n import java.nio.charset.StandardCharsets;\n import java.nio.file.Files;\n-import java.nio.file.Path;\n import java.nio.file.Paths;\n import java.util.ArrayList;\n-import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.Map;\n"}}, {"oid": "7658283a0fab03a9fda7dedb4e782e40469ce621", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7658283a0fab03a9fda7dedb4e782e40469ce621", "message": "Added the 2nd test case jenkins-ignore", "committedDate": "2020-03-27T07:51:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU1OTQ5NQ==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r399559495", "bodyText": "In the method modifyDomainYamlWithRestartVersion can't we use  kubectl patch command to update the Restart Version instead of modifying the domain.yaml file. We can get the current version and add +1 to it.  No need to get VersionNumber parameter. It will be easier to port to Junit5 where we will be using kubectl API.", "author": "anpanigr", "createdAt": "2020-03-27T22:05:15Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/MiiBaseTest.java", "diffHunk": "@@ -116,4 +116,57 @@ public void modifyDomainYamlWithNewConfigMapAndDomainRestartVersion(\n     LoggerHelper.getLocal().log(Level.INFO, exec.stdout());\n \n   }\n+\n+  /**\n+   * Modify the domain yaml to change domain-level restart version.\n+   * @param domain the domain\n+   * @param versionNo version number of domain\n+   *\n+   * @throws Exception on failure\n+   */\n+  protected void modifyDomainYamlWithRestartVersion(", "originalCommit": "7658283a0fab03a9fda7dedb4e782e40469ce621", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg3ODU2Nw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r399878567", "bodyText": "solved", "author": "hzhao-github", "createdAt": "2020-03-30T00:38:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU1OTQ5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "7e9a5e6f60f5cfae3b258d3171c1da7e6149f3db", "chunk": "diff --git a/integration-tests/src/test/java/oracle/kubernetes/operator/MiiBaseTest.java b/integration-tests/src/test/java/oracle/kubernetes/operator/MiiBaseTest.java\nindex 9e63e90602..cc3be08915 100644\n--- a/integration-tests/src/test/java/oracle/kubernetes/operator/MiiBaseTest.java\n+++ b/integration-tests/src/test/java/oracle/kubernetes/operator/MiiBaseTest.java\n\n@@ -119,41 +119,68 @@ public class MiiBaseTest extends BaseTest {\n \n   /**\n    * Modify the domain yaml to change domain-level restart version.\n-   * @param domain the domain\n+   * @param domainNS the domain namespace\n+   * @param domainUid the domain UID\n    * @param versionNo version number of domain\n    *\n-   * @throws Exception on failure\n+   * @throws Exception if patching domain fails\n    */\n   protected void modifyDomainYamlWithRestartVersion(\n-      Domain domain, String versionNo) throws Exception {\n-    String originalYaml =\n-        getUserProjectsDir()\n-        + \"/weblogic-domains/\"\n-        + domain.getDomainUid()\n-        + \"/domain.yaml\";\n+      Domain domain, String domainNS) throws Exception {\n+    String versionNo = getRestartVersion(domainNS, domain.getDomainUid());\n+    StringBuffer patchDomainCmd = new StringBuffer(\"kubectl -n \");\n+    patchDomainCmd\n+        .append(domainNS)\n+        .append(\" patch domain \")\n+        .append(domain.getDomainUid())\n+        .append(\" --type='json' \")\n+        .append(\" -p='[{\\\"op\\\": \\\"replace\\\", \\\"path\\\": \\\"/spec/restartVersion\\\", \\\"value\\\": \\\"'\")\n+        .append(versionNo)\n+        .append(\"'\\\" }]'\");\n+\n+    // patching the domain\n+    LoggerHelper.getLocal().log(Level.INFO, \"Command to patch domain: \" + patchDomainCmd);\n+    ExecResult result = TestUtils.exec(patchDomainCmd.toString());\n+    LoggerHelper.getLocal().log(Level.INFO, \"Domain patch result: \" + result.stdout());\n+\n+    // verify the domain restarted\n+    domain.verifyAdminServerRestarted();\n+    domain.verifyManagedServersRestarted();\n+  }\n \n-    // Modify the original domain yaml to include restartVersion in admin server node\n-    DomainCrd crd = new DomainCrd(originalYaml);\n-    Map<String, String> objectNode = new HashMap();\n-    objectNode.put(\"restartVersion\", versionNo);\n-    crd.addObjectNodeToDomain(objectNode);\n-    String modYaml = crd.getYamlTree();\n-    LoggerHelper.getLocal().log(Level.INFO, modYaml);\n+  private String getRestartVersion(String domainNS, String domainUid) throws Exception {\n+    String versionNo = \"1\";\n+    StringBuffer getVersionCmd = new StringBuffer(\"kubectl -n \");\n+    getVersionCmd\n+        .append(domainNS)\n+        .append(\" get domain \")\n+        .append(domainUid)\n+        .append(\"-o=jsonpath='{.spec.restartVersion}'\");\n+\n+    LoggerHelper.getLocal().log(Level.INFO, \"Command to get restartVersion: \" + getVersionCmd);\n+    try {\n+      ExecResult result = TestUtils.exec(getVersionCmd.toString());\n+      String existinVersion = result.stdout();\n+      LoggerHelper.getLocal().log(Level.INFO, \"Existing restartVersion is: \" + existinVersion);\n+\n+      // check restartVersion number is digit\n+      if (existinVersion.matches(\"-?(0|[1-9]\\\\d*)\")) {\n+        int number = Integer.parseInt(existinVersion);\n+        // if restartVersion is a digit, increase it by 1\n+        versionNo = String.valueOf(Integer.parseInt(versionNo) + number);\n+      } else {\n+        // if restartVersion is not a digit, append 1 to it\n+        versionNo = existinVersion + versionNo;\n+      }\n+    } catch (Exception ex) {\n+      if (ex.getMessage().contains(\"not found\")) {\n+        LoggerHelper.getLocal().log(Level.INFO, \"Not Version num found. Set the restartVersion the first time\");\n+      }\n+    }\n \n-    // Write the modified yaml to a new file\n-    Path path = Paths.get(getUserProjectsDir()\n-        + \"/weblogic-domains/\"\n-        + domain.getDomainUid(), \"modified.domain.yaml\");\n-    LoggerHelper.getLocal().log(Level.INFO, \"Path of the modified domain.yaml :{0}\", path.toString());\n-    Charset charset = StandardCharsets.UTF_8;\n-    Files.write(path, modYaml.getBytes(charset));\n+    LoggerHelper.getLocal().log(Level.INFO, \"New restartVersion is: \" + versionNo);\n \n-    // Apply the new yaml to update the domain crd\n-    LoggerHelper.getLocal().log(Level.INFO, \"kubectl apply -f {0}\", path.toString());\n-    ExecResult exec = TestUtils.exec(\"kubectl apply -f \" + path.toString());\n-    LoggerHelper.getLocal().log(Level.INFO, exec.stdout());\n-    LoggerHelper.getLocal().log(Level.INFO, \"Verifying if the domain is restarted\");\n-    domain.verifyDomainRestarted();\n+    return versionNo;\n   }\n \n   enum WdtDomainType {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4NTUyNg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r399585526", "bodyText": "delete line 30 - we know junit tests are used for testing", "author": "markxnelson", "createdAt": "2020-03-27T23:46:36Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java", "diffHunk": "@@ -0,0 +1,405 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.logging.Level;\n+\n+import oracle.kubernetes.operator.utils.Domain;\n+import oracle.kubernetes.operator.utils.ExecResult;\n+import oracle.kubernetes.operator.utils.LoggerHelper;\n+import oracle.kubernetes.operator.utils.Operator;\n+import oracle.kubernetes.operator.utils.Operator.RestCertType;\n+import oracle.kubernetes.operator.utils.TestUtils;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * This JUnit test is used for testing", "originalCommit": "7658283a0fab03a9fda7dedb4e782e40469ce621", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYwMDkzOA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r399600938", "bodyText": "done", "author": "hzhao-github", "createdAt": "2020-03-28T01:21:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4NTUyNg=="}], "type": "inlineReview", "revised_code": {"commit": "7e9a5e6f60f5cfae3b258d3171c1da7e6149f3db", "chunk": "diff --git a/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java b/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java\nindex 84e7c6b325..fa4ee0df9b 100644\n--- a/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java\n+++ b/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java\n\n@@ -27,7 +27,6 @@ import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n /**\n- * This JUnit test is used for testing\n  * Wdt Config Override with Model File(s) to existing MII domain\n  *\n  * <p>This test is used for creating domain using model in image.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4NTgwNw==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r399585807", "bodyText": "you don't  need type & name on @throws\njust say @throws exception if initializing........", "author": "markxnelson", "createdAt": "2020-03-27T23:47:54Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java", "diffHunk": "@@ -0,0 +1,405 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.logging.Level;\n+\n+import oracle.kubernetes.operator.utils.Domain;\n+import oracle.kubernetes.operator.utils.ExecResult;\n+import oracle.kubernetes.operator.utils.LoggerHelper;\n+import oracle.kubernetes.operator.utils.Operator;\n+import oracle.kubernetes.operator.utils.Operator.RestCertType;\n+import oracle.kubernetes.operator.utils.TestUtils;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * This JUnit test is used for testing\n+ * Wdt Config Override with Model File(s) to existing MII domain\n+ *\n+ * <p>This test is used for creating domain using model in image.\n+ */\n+\n+public class ItModelInImageOverride extends MiiBaseTest {\n+  private static Operator operator;\n+  private static Domain domain;\n+  private static String domainNS;\n+  private static String testClassName;\n+  private static StringBuffer namespaceList;\n+  private static final String configMapSuffix = \"-mii-config-map\";\n+  private static final String dsName = \"MyDataSource\";\n+  private static final String readTimeout_1 = \"30001\";\n+  private static final String readTimeout_2 = \"30002\";\n+\n+  /**\n+   * This method does the initialization of the integration test\n+   * properties defined in OperatorIT.properties and setting\n+   * the resultRoot, pvRoot and projectRoot attributes.\n+   *\n+   * @throws Exception exception if initializing the application properties", "originalCommit": "7658283a0fab03a9fda7dedb4e782e40469ce621", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYwMTE1MA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r399601150", "bodyText": "Exception is removed", "author": "hzhao-github", "createdAt": "2020-03-28T01:23:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4NTgwNw=="}], "type": "inlineReview", "revised_code": {"commit": "7e9a5e6f60f5cfae3b258d3171c1da7e6149f3db", "chunk": "diff --git a/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java b/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java\nindex 84e7c6b325..fa4ee0df9b 100644\n--- a/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java\n+++ b/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java\n\n@@ -27,7 +27,6 @@ import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n /**\n- * This JUnit test is used for testing\n  * Wdt Config Override with Model File(s) to existing MII domain\n  *\n  * <p>This test is used for creating domain using model in image.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4NjE1NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r399586154", "bodyText": "fix this", "author": "markxnelson", "createdAt": "2020-03-27T23:49:26Z", "path": "integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java", "diffHunk": "@@ -0,0 +1,405 @@\n+// Copyright (c) 2020, Oracle Corporation and/or its affiliates.\n+// Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.\n+\n+package oracle.kubernetes.operator;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.logging.Level;\n+\n+import oracle.kubernetes.operator.utils.Domain;\n+import oracle.kubernetes.operator.utils.ExecResult;\n+import oracle.kubernetes.operator.utils.LoggerHelper;\n+import oracle.kubernetes.operator.utils.Operator;\n+import oracle.kubernetes.operator.utils.Operator.RestCertType;\n+import oracle.kubernetes.operator.utils.TestUtils;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * This JUnit test is used for testing\n+ * Wdt Config Override with Model File(s) to existing MII domain\n+ *\n+ * <p>This test is used for creating domain using model in image.\n+ */\n+\n+public class ItModelInImageOverride extends MiiBaseTest {\n+  private static Operator operator;\n+  private static Domain domain;\n+  private static String domainNS;\n+  private static String testClassName;\n+  private static StringBuffer namespaceList;\n+  private static final String configMapSuffix = \"-mii-config-map\";\n+  private static final String dsName = \"MyDataSource\";\n+  private static final String readTimeout_1 = \"30001\";\n+  private static final String readTimeout_2 = \"30002\";\n+\n+  /**\n+   * This method does the initialization of the integration test\n+   * properties defined in OperatorIT.properties and setting\n+   * the resultRoot, pvRoot and projectRoot attributes.\n+   *\n+   * @throws Exception exception if initializing the application properties\n+   *          and creates directories for results fails.\n+   */\n+  @BeforeAll\n+  public static void staticPrepare() throws Exception {\n+    namespaceList = new StringBuffer();\n+    testClassName = new Object() {\n+    }.getClass().getEnclosingClass().getSimpleName();\n+    // initialize test properties and create the directories\n+    initialize(APP_PROPS_FILE, testClassName);\n+  }\n+\n+  /**\n+   * This method creates the result/pv root directories for the test.\n+   * Creates the operator if its not running.\n+   *\n+   * @throws Exception exception if result/pv/operator/domain creation fails\n+   */\n+  @BeforeEach\n+  public void prepare() throws Exception {\n+    createResultAndPvDirs(testClassName);\n+\n+    // create operator1\n+    if (operator == null) {\n+      Map<String, Object> operatorMap = createOperatorMap(getNewSuffixCount(),\n+          true, testClassName);\n+      operator = TestUtils.createOperator(operatorMap, RestCertType.SELF_SIGNED);\n+      Assertions.assertNotNull(operator);\n+      domainNS = ((ArrayList<String>) operatorMap.get(\"domainNamespaces\")).get(0);\n+      namespaceList.append((String)operatorMap.get(\"namespace\"));\n+      namespaceList.append(\" \").append(domainNS);\n+    }\n+  }\n+\n+  /**\n+   * Releases k8s cluster lease, archives result, pv directories.\n+   *\n+   * @throws Exception exception", "originalCommit": "7658283a0fab03a9fda7dedb4e782e40469ce621", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4NjI5Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r399586292", "bodyText": "stopping here - resubmit when you fix the basic stuff..", "author": "markxnelson", "createdAt": "2020-03-27T23:50:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4NjE1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYwMTk5NA==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r399601994", "bodyText": "fixed all :(", "author": "hzhao-github", "createdAt": "2020-03-28T01:29:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4NjE1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc0MTI5Mg==", "url": "https://github.com/oracle/weblogic-kubernetes-operator/pull/1495#discussion_r399741292", "bodyText": "fixed all :(", "author": "hzhao-github", "createdAt": "2020-03-29T03:59:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4NjE1NA=="}], "type": "inlineReview", "revised_code": {"commit": "7e9a5e6f60f5cfae3b258d3171c1da7e6149f3db", "chunk": "diff --git a/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java b/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java\nindex 84e7c6b325..fa4ee0df9b 100644\n--- a/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java\n+++ b/integration-tests/src/test/java/oracle/kubernetes/operator/ItModelInImageOverride.java\n\n@@ -27,7 +27,6 @@ import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n \n /**\n- * This JUnit test is used for testing\n  * Wdt Config Override with Model File(s) to existing MII domain\n  *\n  * <p>This test is used for creating domain using model in image.\n"}}, {"oid": "7e9a5e6f60f5cfae3b258d3171c1da7e6149f3db", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/7e9a5e6f60f5cfae3b258d3171c1da7e6149f3db", "message": "Used patch domain to restart domain jenkins-ignore", "committedDate": "2020-03-30T00:36:21Z", "type": "commit"}, {"oid": "633c9c87695ca756519945585d1f48a67b1bd062", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/633c9c87695ca756519945585d1f48a67b1bd062", "message": "Changed test case names jenkins-ignore", "committedDate": "2020-03-30T23:17:48Z", "type": "commit"}, {"oid": "b644b16a7bca57cad33ab2114369c6c39c8be0e9", "url": "https://github.com/oracle/weblogic-kubernetes-operator/commit/b644b16a7bca57cad33ab2114369c6c39c8be0e9", "message": "Synced up with latestb model-in-image jenkins-ignore", "committedDate": "2020-03-31T19:06:53Z", "type": "commit"}]}