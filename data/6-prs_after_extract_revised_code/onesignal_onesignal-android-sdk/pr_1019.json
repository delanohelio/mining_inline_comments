{"pr_number": 1019, "pr_title": "Fixes rare IllegalThreadStateException from Thread.start()", "pr_createdAt": "2020-05-15T21:53:53Z", "pr_url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1019", "timeline": [{"oid": "0668bd21ee15e7934bcb5c8065437c1da12631ce", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/0668bd21ee15e7934bcb5c8065437c1da12631ce", "message": "* The root issue is that Thread.start() could be called a 2nd time if\nthere was a problem getting a Handler after starting the thread.\nGetting a Handler instance was used as the deturming factor if the\nthread had started or not.\n* When calling `Thread.start()` there is no guarantee that the thread\nhas started after finishing or that is may have alrady completed.\n* To overcome the following 2 changes were made\n  1. Override `HandlerThread`'s `onLooperPrepared`\n     - Moving our `getLooper()` call here guarantees it will never be `null`\n     - Then this means we can create a new `Handler` everytime successfully\n  2. Added a boolean to make sure we only call `start()` once\n     - `threadStartCalled` is set to `true` after `start()` is called.\n     - This is needed as `onLooperPrepared` may not fire by the time some\n       other part of the OneSignal SDK calls `scheduleFlushToDiskJob`\n       again.", "committedDate": "2020-05-15T21:54:16Z", "type": "forcePushed"}, {"oid": "286cc641db7ee7eeed1bd9851516d1253f3dc5f5", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/286cc641db7ee7eeed1bd9851516d1253f3dc5f5", "message": "Fixes rare `IllegalThreadStateException` `start()`\n\n* The root issue is that `Thread.start()` could be called a 2nd time if\nthere was a problem getting a Handler after starting the thread.\nGetting a Handler instance was used as the deturming factor if the\nthread had started or not.\n* When calling `Thread.start()` there is no guarantee that the thread\nhas started after finishing or that is may have alrady completed.\n* To overcome the following 2 changes were made\n  1. Override `HandlerThread`'s `onLooperPrepared`\n     - Moving our `getLooper()` call here guarantees it will never be `null`\n     - Then this means we can create a new `Handler` everytime successfully\n  2. Added a boolean to make sure we only call `start()` once\n     - `threadStartCalled` is set to `true` after `start()` is called.\n     - This is needed as `onLooperPrepared` may not fire by the time some\n       other part of the OneSignal SDK calls `scheduleFlushToDiskJob`\n       again.", "committedDate": "2020-05-15T21:55:34Z", "type": "commit"}, {"oid": "286cc641db7ee7eeed1bd9851516d1253f3dc5f5", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/286cc641db7ee7eeed1bd9851516d1253f3dc5f5", "message": "Fixes rare `IllegalThreadStateException` `start()`\n\n* The root issue is that `Thread.start()` could be called a 2nd time if\nthere was a problem getting a Handler after starting the thread.\nGetting a Handler instance was used as the deturming factor if the\nthread had started or not.\n* When calling `Thread.start()` there is no guarantee that the thread\nhas started after finishing or that is may have alrady completed.\n* To overcome the following 2 changes were made\n  1. Override `HandlerThread`'s `onLooperPrepared`\n     - Moving our `getLooper()` call here guarantees it will never be `null`\n     - Then this means we can create a new `Handler` everytime successfully\n  2. Added a boolean to make sure we only call `start()` once\n     - `threadStartCalled` is set to `true` after `start()` is called.\n     - This is needed as `onLooperPrepared` may not fire by the time some\n       other part of the OneSignal SDK calls `scheduleFlushToDiskJob`\n       again.", "committedDate": "2020-05-15T21:55:34Z", "type": "forcePushed"}, {"oid": "0ba8308d796f39cefb923d5d1282a93adb43c076", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/0ba8308d796f39cefb923d5d1282a93adb43c076", "message": "Clean up startThread\n\n* Now that we have fixed the root cuase we can remove all the\nexpection handling from startThread", "committedDate": "2020-05-15T22:01:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA4MTI5NA==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1019#discussion_r426081294", "bodyText": "do you still need this call, cant you depend only on onLooperPrepared?", "author": "Jeasmine", "createdAt": "2020-05-15T23:00:12Z", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalPrefs.java", "diffHunk": "@@ -132,113 +132,52 @@\n             super(name);\n         }\n \n+        @Override\n+        protected void onLooperPrepared() {\n+            super.onLooperPrepared();\n+\n+            // Getting handler here as onLooperPrepared guarantees getLooper() will not return null\n+            mHandler = new Handler(getLooper());\n+            scheduleFlushToDiskJob();\n+        }\n+\n         private synchronized void startDelayedWrite() {\n             // A Context is required to write,\n             //   if not available now later OneSignal.setContext will call this again.\n             if (OneSignal.appContext == null)\n                 return;\n \n-            if (mHandler == null) {\n-                startThread();\n-                mHandler = new Handler(getLooper());\n-            }\n+            startThread();\n+            scheduleFlushToDiskJob();", "originalCommit": "0ba8308d796f39cefb923d5d1282a93adb43c076", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA4Mzk0OA==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1019#discussion_r426083948", "bodyText": "onLooperPrepared will take care of the first flush. For 2nd, 3rd, etc calls we have to call scheduleFlushToDiskJob again to setup a new delayed write.\nSince you had this question is there anything I can change to make this less confusing? Maybe just a comment here?", "author": "jkasten2", "createdAt": "2020-05-15T23:12:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA4MTI5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA4NTExNQ==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1019#discussion_r426085115", "bodyText": "oh, I see, so looper is only prepared once. Maybe a comment with what you said, like a reminder if I have the same question again \ud83d\ude02", "author": "Jeasmine", "createdAt": "2020-05-15T23:17:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA4MTI5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgwNTEzMA==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1019#discussion_r426805130", "bodyText": "@Jeasmine Fixed!", "author": "jkasten2", "createdAt": "2020-05-18T18:05:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA4MTI5NA=="}], "type": "inlineReview", "revised_code": {"commit": "72b71508b99edddfaf3948af21a7b3da70b815ff", "chunk": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalPrefs.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalPrefs.java\nindex 0120dc27..c016476c 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalPrefs.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalPrefs.java\n\n@@ -136,9 +136,11 @@ class OneSignalPrefs {\n         protected void onLooperPrepared() {\n             super.onLooperPrepared();\n \n-            // Getting handler here as onLooperPrepared guarantees getLooper() will not return null\n+            // Getting handler here as onLooperPrepared guarantees getLooper() will be non-null\n             mHandler = new Handler(getLooper());\n-            scheduleFlushToDiskJob();\n+\n+            // Kicks off our first flush, startDelayedWrite will schedule all flushes after that\n+            scheduleFlushToDisk();\n         }\n \n         private synchronized void startDelayedWrite() {\n"}}, {"oid": "72b71508b99edddfaf3948af21a7b3da70b815ff", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/72b71508b99edddfaf3948af21a7b3da70b815ff", "message": "Comments and readability clean up", "committedDate": "2020-05-18T18:05:30Z", "type": "commit"}]}