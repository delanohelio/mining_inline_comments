{"pr_number": 1156, "pr_title": "Rename and refactor before major release", "pr_createdAt": "2020-09-23T03:45:09Z", "pr_url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1156", "timeline": [{"oid": "83b28d1a252f4ecba2eec114c72cdc54d677da03", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/83b28d1a252f4ecba2eec114c72cdc54d677da03", "message": "Rename and refactor before major release\n\n* Rename NotificationProcessingHandler to OSRemoteNotificationReceivedHandler\n* Rename notificationProcessing to remoteNotificationReceived\n* Rename NotificationOpenedHandler to OSNotificationOpenedHandler\n* Rename OSNotificationOpenResult to OSNotificationOpenedResult\n* Refactor notificationProcessing instead of receiving OSNotificationReceived receive OSNotificationReceivedEvent\n* Refactor notificationWillShowInForeground instead of receiving AppNotificationGenerationJob receive OSNotificationReceivedEvent\n* Create single source of true OSNotification\n* Delete OSNotificationPayload, all data is now on OSNotification\n* Create OSMutableNotification\n* Delete AppNotificationGenerationJob", "committedDate": "2020-09-23T15:47:31Z", "type": "forcePushed"}, {"oid": "9b77b562b9ea89e72c51776325adfa1783ab4b2e", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/9b77b562b9ea89e72c51776325adfa1783ab4b2e", "message": "Rename and refactor before major release\n\n* Rename NotificationProcessingHandler to OSRemoteNotificationReceivedHandler\n* Rename notificationProcessing to remoteNotificationReceived\n* Rename NotificationOpenedHandler to OSNotificationOpenedHandler\n* Rename OSNotificationOpenResult to OSNotificationOpenedResult\n* Refactor notificationProcessing instead of receiving OSNotificationReceived receive OSNotificationReceivedEvent\n* Refactor notificationWillShowInForeground instead of receiving AppNotificationGenerationJob receive OSNotificationReceivedEvent\n* Create single source of true OSNotification\n* Delete OSNotificationPayload, all data is now on OSNotification\n* Create OSMutableNotification\n* Delete AppNotificationGenerationJob", "committedDate": "2020-09-23T16:18:29Z", "type": "forcePushed"}, {"oid": "dadf930c80dc3b2f46cf4ec12a6ba75b1ebe68d3", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/dadf930c80dc3b2f46cf4ec12a6ba75b1ebe68d3", "message": "Rename and refactor before major release\n\n* Rename NotificationProcessingHandler to OSRemoteNotificationReceivedHandler\n* Rename notificationProcessing to remoteNotificationReceived\n* Rename NotificationOpenedHandler to OSNotificationOpenedHandler\n* Rename OSNotificationOpenResult to OSNotificationOpenedResult\n* Refactor notificationProcessing instead of receiving OSNotificationReceived receive OSNotificationReceivedEvent\n* Refactor notificationWillShowInForeground instead of receiving AppNotificationGenerationJob receive OSNotificationReceivedEvent\n* Create single source of true OSNotification\n* Delete OSNotificationPayload, all data is now on OSNotification\n* Create OSMutableNotification\n* Delete AppNotificationGenerationJob", "committedDate": "2020-09-23T18:18:08Z", "type": "forcePushed"}, {"oid": "eeef0b40278db962b90b7028ae687cf010776963", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/eeef0b40278db962b90b7028ae687cf010776963", "message": "Rename and refactor before major release\n\n* Rename NotificationProcessingHandler to OSRemoteNotificationReceivedHandler\n* Rename notificationProcessing to remoteNotificationReceived\n* Rename NotificationOpenedHandler to OSNotificationOpenedHandler\n* Rename OSNotificationOpenResult to OSNotificationOpenedResult\n* Refactor notificationProcessing instead of receiving OSNotificationReceived receive OSNotificationReceivedEvent\n* Refactor notificationWillShowInForeground instead of receiving AppNotificationGenerationJob receive OSNotificationReceivedEvent\n* Create single source of true OSNotification\n* Delete OSNotificationPayload, all data is now on OSNotification\n* Create OSMutableNotification\n* Delete AppNotificationGenerationJob", "committedDate": "2020-09-23T18:38:51Z", "type": "forcePushed"}, {"oid": "93128bcfc6cf7ed986fcab959b33472d2dea0b53", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/93128bcfc6cf7ed986fcab959b33472d2dea0b53", "message": "Rename and refactor before major release\n\n* Rename NotificationProcessingHandler to OSRemoteNotificationReceivedHandler\n* Rename notificationProcessing to remoteNotificationReceived\n* Rename NotificationOpenedHandler to OSNotificationOpenedHandler\n* Rename OSNotificationOpenResult to OSNotificationOpenedResult\n* Refactor notificationProcessing instead of receiving OSNotificationReceived receive OSNotificationReceivedEvent\n* Refactor notificationWillShowInForeground instead of receiving AppNotificationGenerationJob receive OSNotificationReceivedEvent\n* Create single source of true OSNotification\n* Delete OSNotificationPayload, all data is now on OSNotification\n* Create OSMutableNotification\n* Delete AppNotificationGenerationJob", "committedDate": "2020-09-23T18:53:59Z", "type": "forcePushed"}, {"oid": "9363c761f8ec3417a407adde4444d7a40598322c", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/9363c761f8ec3417a407adde4444d7a40598322c", "message": "Rename and refactor before major release\n\n* Rename NotificationProcessingHandler to OSRemoteNotificationReceivedHandler\n* Rename notificationProcessing to remoteNotificationReceived\n* Rename NotificationOpenedHandler to OSNotificationOpenedHandler\n* Rename OSNotificationOpenResult to OSNotificationOpenedResult\n* Refactor notificationProcessing instead of receiving OSNotificationReceived receive OSNotificationReceivedEvent\n* Refactor notificationWillShowInForeground instead of receiving AppNotificationGenerationJob receive OSNotificationReceivedEvent\n* Create single source of true OSNotification\n* Delete OSNotificationPayload, all data is now on OSNotification\n* Create OSMutableNotification\n* Delete AppNotificationGenerationJob", "committedDate": "2020-09-23T19:42:40Z", "type": "commit"}, {"oid": "9363c761f8ec3417a407adde4444d7a40598322c", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/9363c761f8ec3417a407adde4444d7a40598322c", "message": "Rename and refactor before major release\n\n* Rename NotificationProcessingHandler to OSRemoteNotificationReceivedHandler\n* Rename notificationProcessing to remoteNotificationReceived\n* Rename NotificationOpenedHandler to OSNotificationOpenedHandler\n* Rename OSNotificationOpenResult to OSNotificationOpenedResult\n* Refactor notificationProcessing instead of receiving OSNotificationReceived receive OSNotificationReceivedEvent\n* Refactor notificationWillShowInForeground instead of receiving AppNotificationGenerationJob receive OSNotificationReceivedEvent\n* Create single source of true OSNotification\n* Delete OSNotificationPayload, all data is now on OSNotification\n* Create OSMutableNotification\n* Delete AppNotificationGenerationJob", "committedDate": "2020-09-23T19:42:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg2MDQ4MQ==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1156#discussion_r493860481", "bodyText": "Should be com.onesignal.NotificationServiceExtension, update example as well.", "author": "jkasten2", "createdAt": "2020-09-23T20:00:38Z", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSNotificationController.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Modified MIT License\n+ *\n+ * Copyright 2016 OneSignal\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * 1. The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * 2. All copies of substantial portions of the Software may only be used in connection\n+ * with services provided by OneSignal.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package com.onesignal;\n+\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.core.app.NotificationCompat;\n+\n+import org.json.JSONObject;\n+\n+import static com.onesignal.OSUtils.isStringEmpty;\n+\n+public class OSNotificationController {\n+\n+   // The extension service app AndroidManifest.xml meta data tag key name\n+   private static final String EXTENSION_SERVICE_META_DATA_TAG_NAME = \"com.onesignal.NotificationExtensionServiceClass\";", "originalCommit": "9363c761f8ec3417a407adde4444d7a40598322c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d91616b39b5976edd2f54d999cd054530d8ff757", "chunk": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSNotificationController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSNotificationController.java\nindex 4083a92f..c05703d2 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSNotificationController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSNotificationController.java\n\n@@ -40,7 +40,7 @@ import static com.onesignal.OSUtils.isStringEmpty;\n public class OSNotificationController {\n \n    // The extension service app AndroidManifest.xml meta data tag key name\n-   private static final String EXTENSION_SERVICE_META_DATA_TAG_NAME = \"com.onesignal.NotificationExtensionServiceClass\";\n+   private static final String EXTENSION_SERVICE_META_DATA_TAG_NAME = \"com.onesignal.NotificationServiceExtension\";\n \n    private final OSNotificationGenerationJob notificationJob;\n    boolean isRestoring;\n"}}, {"oid": "d91616b39b5976edd2f54d999cd054530d8ff757", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/d91616b39b5976edd2f54d999cd054530d8ff757", "message": "Rename from NotificationExtensionServiceClass to NotificationServiceExtension", "committedDate": "2020-09-23T20:59:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkwMjIwOQ==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1156#discussion_r493902209", "bodyText": "This is passing isBackgroundLogic but the param name for processJobForDisplay is callForegroundLogic.\nSeems like we are flipping the logic here when we should not? Or just one of the names wrong?", "author": "jkasten2", "createdAt": "2020-09-23T21:20:29Z", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSNotificationController.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/**\n+ * Modified MIT License\n+ *\n+ * Copyright 2016 OneSignal\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * 1. The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * 2. All copies of substantial portions of the Software may only be used in connection\n+ * with services provided by OneSignal.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package com.onesignal;\n+\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.core.app.NotificationCompat;\n+\n+import org.json.JSONObject;\n+\n+import static com.onesignal.OSUtils.isStringEmpty;\n+\n+public class OSNotificationController {\n+\n+   // The extension service app AndroidManifest.xml meta data tag key name\n+   private static final String EXTENSION_SERVICE_META_DATA_TAG_NAME = \"com.onesignal.NotificationServiceExtension\";\n+\n+   private final OSNotificationGenerationJob notificationJob;\n+   boolean isRestoring;\n+   boolean isBackgroundLogic;\n+\n+   OSNotificationController(OSNotificationGenerationJob notificationJob, boolean isRestoring, boolean isBackgroundLogic) {\n+      this.isRestoring = isRestoring;\n+      this.isBackgroundLogic = isBackgroundLogic;\n+      this.notificationJob = notificationJob;\n+   }\n+\n+   OSNotificationController(Context context, JSONObject jsonPayload, boolean isRestoring, boolean isBackgroundLogic, Long timestamp) {\n+      this.isRestoring = isRestoring;\n+      this.isBackgroundLogic = isBackgroundLogic;\n+\n+      notificationJob = createNotificationJobFromCurrent(context, jsonPayload, timestamp);\n+   }\n+\n+   /**\n+    * Using current {@link OSNotificationController} class attributes, builds a {@link OSNotificationGenerationJob}\n+    *    instance and returns it\n+    * <br/><br/>\n+    * @see OSNotificationGenerationJob\n+    */\n+   private OSNotificationGenerationJob createNotificationJobFromCurrent(Context context, JSONObject jsonPayload, Long timestamp) {\n+      OSNotificationGenerationJob notificationJob = new OSNotificationGenerationJob(context);\n+      notificationJob.setJsonPayload(jsonPayload);\n+      notificationJob.setShownTimeStamp(timestamp);\n+      notificationJob.setRestoring(isRestoring);\n+      return notificationJob;\n+   }\n+\n+   /**\n+    * Called from {@link OSNotificationReceivedEvent#complete(OSNotification)} class\n+    * If the notification modified by the user is null, the notification will be silent, otherwise will be displayed\n+    * <br/><br/>\n+    * @param originalNotification the notification received\n+    * @param notification the notification sent by the user, might be modified\n+    * @see OSNotificationReceivedEvent#complete(OSNotification)\n+    */\n+   void processNotification(OSNotification originalNotification, @Nullable OSNotification notification) {\n+      OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"processNotification called from Thread: \" + Thread.currentThread().toString());\n+      if (notification != null) {\n+         // Save as processed to prevent possible duplicate calls from canonical ids\n+         boolean display = isStringEmpty(notification.getBody());\n+         if (!display) {\n+            notDisplayNotificationLogic(originalNotification);\n+         } else {\n+            // Set modified notification\n+            notificationJob.setNotification(notification);\n+            NotificationBundleProcessor.processJobForDisplay(this, isBackgroundLogic);", "originalCommit": "6d7c149514c6ab396da8ec59b7dea86795a032f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkwNzgyNg==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1156#discussion_r493907826", "bodyText": "one name is wrong", "author": "Jeasmine", "createdAt": "2020-09-23T21:32:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkwMjIwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "4f4983e76745bbb80ba5e0747177fa1dd19726fe", "chunk": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSNotificationController.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSNotificationController.java\nindex c05703d2..2e735bfb 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSNotificationController.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSNotificationController.java\n\n@@ -29,9 +29,7 @@ package com.onesignal;\n \n import android.content.Context;\n \n-import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n-import androidx.core.app.NotificationCompat;\n \n import org.json.JSONObject;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkwNDA1Mg==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1156#discussion_r493904052", "bodyText": "I think we just need to pass in notification here and remove the comment.\nIf we make a copy then the notification.setNotificationExtender they may have set would not work.", "author": "jkasten2", "createdAt": "2020-09-23T21:24:32Z", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSNotificationReceivedEvent.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/**\n+ * Modified MIT License\n+ *\n+ * Copyright 2016 OneSignal\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * 1. The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * 2. All copies of substantial portions of the Software may only be used in connection\n+ * with services provided by OneSignal.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package com.onesignal;\n+\n+import androidx.annotation.Nullable;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+public class OSNotificationReceivedEvent {\n+\n+   // Timeout time in seconds before auto calling\n+   private static final long PROCESS_NOTIFICATION_TIMEOUT = 25 * 1_000L;\n+\n+   private final OSNotificationController controller;\n+   private final OSTimeoutHandler timeoutHandler;\n+   private final Runnable timeoutRunnable;\n+\n+   private final OSNotification notification;\n+   // Used to toggle when complete is called so it can not be called more than once\n+   private boolean isComplete = false;\n+\n+   OSNotificationReceivedEvent(OSNotificationController controller, OSNotification notification) {\n+      this.notification = notification;\n+      this.controller = controller;\n+\n+      timeoutHandler = OSTimeoutHandler.getTimeoutHandler();\n+      timeoutRunnable = new Runnable() {\n+         @Override\n+         public void run() {\n+            OneSignal.Log(OneSignal.LOG_LEVEL.DEBUG, \"Running complete from OSNotificationReceivedEvent timeout runnable!\");\n+            complete(getNotification());\n+         }\n+      };\n+      timeoutHandler.startTimeout(PROCESS_NOTIFICATION_TIMEOUT, timeoutRunnable);\n+   }\n+\n+   /**\n+    * Method to continue with notification processing.\n+    * User must call complete within 25 seconds or the original notification will be displayed.\n+    *\n+    * @param notification can be null to omit displaying the notification,\n+    *                     or OSMutableNotification to modify the notification to display\n+    */\n+   public synchronized void complete(@Nullable OSNotification notification) {\n+      timeoutHandler.destroyTimeout(timeoutRunnable);\n+\n+      if (isComplete) {\n+         OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"OSNotificationReceivedEvent already completed\");\n+         return;\n+      }\n+\n+      isComplete = true;\n+\n+      // Pass copies to controller, to avoid modifying objects accessed by the user\n+      controller.processNotification(this.notification.copy(), notification != null ? notification.copy() : null);", "originalCommit": "6d7c149514c6ab396da8ec59b7dea86795a032f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkwODU4MA==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1156#discussion_r493908580", "bodyText": "the setNotificationExtender is being copied too, just wanted to avoid the possibility of the user of calling complete under the handler and then after complete, access the android id, or doing something else under the mutable notification\nExample:\nnotificationEvent.complete(mutableNotification);\nmutableNotification.setAndroidId(111)", "author": "Jeasmine", "createdAt": "2020-09-23T21:34:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkwNDA1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkwOTA1OA==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1156#discussion_r493909058", "bodyText": "ah gotcha, sorry I missed that, you are right", "author": "jkasten2", "createdAt": "2020-09-23T21:35:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkwNDA1Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkwOTUzMg==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1156#discussion_r493909532", "bodyText": "Rename class to AppRemoteNotificationServiceExtension to match the new NotificationServiceExtension naming.", "author": "jkasten2", "createdAt": "2020-09-23T21:36:45Z", "path": "Examples/OneSignalDemo/app/src/main/java/com/onesignal/sdktest/notification/AppRemoteNotificationExtensionService.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package com.onesignal.sdktest.notification;\n+\n+import android.content.Context;\n+\n+import com.onesignal.OSMutableNotification;\n+import com.onesignal.OSNotification;\n+import com.onesignal.OSNotificationOpenedResult;\n+import com.onesignal.OSNotificationReceivedEvent;\n+import com.onesignal.OneSignal;\n+import com.onesignal.sdktest.R;\n+\n+public class AppRemoteNotificationExtensionService implements", "originalCommit": "6d7c149514c6ab396da8ec59b7dea86795a032f8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5ff8ec6790251740d54ac30ff74a7f646cb1c62a", "chunk": "diff --git a/Examples/OneSignalDemo/app/src/main/java/com/onesignal/sdktest/notification/AppRemoteNotificationExtensionService.java b/Examples/OneSignalDemo/app/src/main/java/com/onesignal/sdktest/notification/NotificationServiceExtension.java\nsimilarity index 96%\nrename from Examples/OneSignalDemo/app/src/main/java/com/onesignal/sdktest/notification/AppRemoteNotificationExtensionService.java\nrename to Examples/OneSignalDemo/app/src/main/java/com/onesignal/sdktest/notification/NotificationServiceExtension.java\nindex cbbe7c94..548c500c 100644\n--- a/Examples/OneSignalDemo/app/src/main/java/com/onesignal/sdktest/notification/AppRemoteNotificationExtensionService.java\n+++ b/Examples/OneSignalDemo/app/src/main/java/com/onesignal/sdktest/notification/NotificationServiceExtension.java\n\n@@ -9,7 +9,7 @@ import com.onesignal.OSNotificationReceivedEvent;\n import com.onesignal.OneSignal;\n import com.onesignal.sdktest.R;\n \n-public class AppRemoteNotificationExtensionService implements\n+public class NotificationServiceExtension implements\n         OneSignal.OSRemoteNotificationReceivedHandler,\n         OneSignal.OSNotificationOpenedHandler {\n \n"}}, {"oid": "4f4983e76745bbb80ba5e0747177fa1dd19726fe", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/4f4983e76745bbb80ba5e0747177fa1dd19726fe", "message": "Add android Id mutate test and fix test due to service renaming\n\n* Update Demo app remove additional data access under foreground handler\n* Fix test fue to service renaming\n* Add test for checking android Id is not being mutated after calling complete", "committedDate": "2020-09-23T22:21:30Z", "type": "commit"}, {"oid": "4f4983e76745bbb80ba5e0747177fa1dd19726fe", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/4f4983e76745bbb80ba5e0747177fa1dd19726fe", "message": "Add android Id mutate test and fix test due to service renaming\n\n* Update Demo app remove additional data access under foreground handler\n* Fix test fue to service renaming\n* Add test for checking android Id is not being mutated after calling complete", "committedDate": "2020-09-23T22:21:30Z", "type": "forcePushed"}, {"oid": "5ff8ec6790251740d54ac30ff74a7f646cb1c62a", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/5ff8ec6790251740d54ac30ff74a7f646cb1c62a", "message": "Rename demo app Service to NotificationServiceExtension", "committedDate": "2020-09-23T22:24:24Z", "type": "commit"}, {"oid": "3d6f3bb31820d7ca1a64249a621f5ff91f360c6c", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/3d6f3bb31820d7ca1a64249a621f5ff91f360c6c", "message": "Add failing test for saving notification before complete finished\n\n* Given that the code is running procedural if foreground handler doesnt call in the same thread complete, then code will continue running, and will end on saving notification before timer or user complete is runned.\n* Display timeout is respected by saving notification is not.", "committedDate": "2020-09-23T23:32:19Z", "type": "commit"}, {"oid": "b2985c70160e1ef0a2c4266fa2c69a36272d229a", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/b2985c70160e1ef0a2c4266fa2c69a36272d229a", "message": "Upgrade gradle version", "committedDate": "2020-09-23T23:32:40Z", "type": "commit"}, {"oid": "24c7292098096f10ee7c3d4633248975f6bcd290", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/24c7292098096f10ee7c3d4633248975f6bcd290", "message": "Avoid continue logic when having foreground handler\n\n* When having foreground handler active, stop processing notification, it will be processed by user or timer complete", "committedDate": "2020-09-24T00:04:19Z", "type": "forcePushed"}, {"oid": "5a559dd2cbe6dd460b1c035d260923347e177b3c", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/5a559dd2cbe6dd460b1c035d260923347e177b3c", "message": "Avoid continue logic when having foreground handler\n\n* When having foreground handler active, stop processing notification, it will be processed by user or timer complete", "committedDate": "2020-09-24T00:08:18Z", "type": "commit"}, {"oid": "5a559dd2cbe6dd460b1c035d260923347e177b3c", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/5a559dd2cbe6dd460b1c035d260923347e177b3c", "message": "Avoid continue logic when having foreground handler\n\n* When having foreground handler active, stop processing notification, it will be processed by user or timer complete", "committedDate": "2020-09-24T00:08:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2NjIwMg==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1156#discussion_r494366202", "bodyText": "Remove payload, the properties below should be on the mainObj", "author": "jkasten2", "createdAt": "2020-09-24T14:29:13Z", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSNotification.java", "diffHunk": "@@ -36,90 +38,465 @@\n import java.util.ArrayList;\n import java.util.List;\n \n+import static com.onesignal.GenerateNotification.BUNDLE_KEY_ACTION_ID;\n+import static com.onesignal.NotificationBundleProcessor.PUSH_ADDITIONAL_DATA_KEY;\n+\n /**\n  * The notification the user received\n  * <br/><br/>\n- * {@link #isAppInFocus} - Was app in focus.\n- * {@link #shown} - Was notification shown to the user. Will be {@code false} for silent notifications.\n  * {@link #androidNotificationId} - Android Notification ID assigned to the notification. Can be used to cancel or replace the notification\n- * {@link #payload} - Payload received from OneSignal\n- * {@link #displayOption} - How the notification will be displayed to the user, includes options:\n- *    {@link OSNotificationDisplay#SILENT}\n- *    {@link OSNotificationDisplay#NOTIFICATION}\n- * <br/><br/>\n  * {@link #groupedNotifications} - If the notification is a summary notification for a group, this will contain\n  * all notification payloads it was created from.\n  */\n public class OSNotification {\n \n-   // Will be set if a summary notification is opened.\n-   // The payload will be the most recent notification received.\n-   private List<OSNotificationPayload> groupedNotifications;\n+   private NotificationCompat.Extender notificationExtender;\n \n-   // Notification payload received from OneSignal\n-   private OSNotificationPayload payload;\n+   /**\n+    * Summary notifications grouped\n+    * Notification payload will have the most recent notification received.\n+    */\n+   @Nullable\n+   private List<OSNotification> groupedNotifications;\n \n-   private OSNotificationDisplay displayOption;\n+   /**\n+    * Android notification id. Can later be used to dismiss the notification programmatically.\n+    */\n+   private int androidNotificationId;\n \n-   // Is app Active.\n-   private boolean isAppInFocus;\n+   private String notificationId;\n+   private String templateName;\n+   private String templateId;\n+   private String title;\n+   private String body;\n+   private JSONObject additionalData;\n+   private String smallIcon;\n+   private String largeIcon;\n+   private String bigPicture;\n+   private String smallIconAccentColor;\n+   private String launchURL;\n+   private String sound;\n+   private String ledColor;\n+   private int lockScreenVisibility = 1;\n+   private String groupKey;\n+   private String groupMessage;\n+   private List<ActionButton> actionButtons;\n+   private String fromProjectNumber;\n+   private BackgroundImageLayout backgroundImageLayout;\n+   private String collapseId;\n+   private int priority;\n+   private String rawPayload;\n \n-   // Was it displayed to the user.\n-   private boolean shown;\n+   protected OSNotification() {\n+   }\n \n-   // Android notification id. Can later be used to dismiss the notification programmatically.\n-   private int androidNotificationId;\n+   OSNotification(@NonNull JSONObject payload) {\n+      this(null, payload, 0);\n+   }\n+\n+   OSNotification(@NonNull JSONObject payload, int androidNotificationId) {\n+      this(null, payload, androidNotificationId);\n+   }\n \n-   public OSNotification(List<OSNotificationPayload> groupedNotifications, OSNotificationPayload payload,\n-                         OSNotificationDisplay displayOption) {\n-      this(groupedNotifications, payload, displayOption, false, false, 0);\n+   OSNotification(@Nullable List<OSNotification> groupedNotifications, @NonNull JSONObject payload) {\n+      this(groupedNotifications, payload, 0);\n    }\n \n-   public OSNotification(List<OSNotificationPayload> groupedNotifications, OSNotificationPayload payload,\n-                         OSNotificationDisplay displayOption, boolean isAppInFocus,\n-                         boolean shown, int androidNotificationId) {\n+   OSNotification(@Nullable List<OSNotification> groupedNotifications, @NonNull JSONObject jsonPayload, int androidNotificationId) {\n+      initPayloadData(jsonPayload);\n       this.groupedNotifications = groupedNotifications;\n-      this.payload = payload;\n-      this.displayOption = displayOption;\n-      this.isAppInFocus = isAppInFocus;\n-      this.shown = shown;\n       this.androidNotificationId = androidNotificationId;\n    }\n \n-   public OSNotification(JSONObject jsonObject) {\n-      isAppInFocus = jsonObject.optBoolean(\"isAppInFocus\");\n-      shown = jsonObject.optBoolean(\"shown\", shown);\n-      androidNotificationId = jsonObject.optInt(\"androidNotificationId\");\n-      displayOption = OSNotificationDisplay.values()[jsonObject.optInt(\"displayType\")];\n+   protected OSNotification(OSNotification notification) {\n+      this.notificationExtender = notification.notificationExtender;\n+      this.groupedNotifications = notification.groupedNotifications;\n+      this.androidNotificationId = notification.androidNotificationId;\n+      this.notificationId = notification.notificationId;\n+      this.templateName = notification.templateName;\n+      this.templateId = notification.templateId;\n+      this.title = notification.title;\n+      this.body = notification.body;\n+      this.additionalData = notification.additionalData;\n+      this.largeIcon = notification.largeIcon;\n+      this.bigPicture = notification.bigPicture;\n+      this.smallIconAccentColor = notification.smallIconAccentColor;\n+      this.launchURL = notification.launchURL;\n+      this.sound = notification.sound;\n+      this.ledColor = notification.ledColor;\n+      this.lockScreenVisibility = notification.lockScreenVisibility;\n+      this.groupKey = notification.groupKey;\n+      this.groupMessage = notification.groupMessage;\n+      this.actionButtons = notification.actionButtons;\n+      this.fromProjectNumber = notification.fromProjectNumber;\n+      this.backgroundImageLayout = notification.backgroundImageLayout;\n+      this.collapseId = notification.collapseId;\n+      this.priority = notification.priority;\n+      this.rawPayload = notification.rawPayload;\n+   }\n+\n+   private void initPayloadData(JSONObject currentJsonPayload) {\n+      JSONObject customJson;\n+      try {\n+         customJson = NotificationBundleProcessor.getCustomJSONObject(currentJsonPayload);\n+      } catch (Throwable t) {\n+         OneSignal.Log(OneSignal.LOG_LEVEL.ERROR, \"Error assigning OSNotificationReceivedEvent payload values!\", t);\n+         return;\n+      }\n+\n+      notificationId = customJson.optString(\"i\");\n+      templateId = customJson.optString(\"ti\");\n+      templateName = customJson.optString(\"tn\");\n+      rawPayload = currentJsonPayload.toString();\n+      additionalData = customJson.optJSONObject(PUSH_ADDITIONAL_DATA_KEY);\n+      launchURL = customJson.optString(\"u\", null);\n+\n+      body = currentJsonPayload.optString(\"alert\", null);\n+      title = currentJsonPayload.optString(\"title\", null);\n+      smallIcon = currentJsonPayload.optString(\"sicon\", null);\n+      bigPicture = currentJsonPayload.optString(\"bicon\", null);\n+      largeIcon = currentJsonPayload.optString(\"licon\", null);\n+      sound = currentJsonPayload.optString(\"sound\", null);\n+      groupKey = currentJsonPayload.optString(\"grp\", null);\n+      groupMessage = currentJsonPayload.optString(\"grp_msg\", null);\n+      smallIconAccentColor = currentJsonPayload.optString(\"bgac\", null);\n+      ledColor = currentJsonPayload.optString(\"ledc\", null);\n+      String visibility = currentJsonPayload.optString(\"vis\", null);\n+      if (visibility != null)\n+         lockScreenVisibility = Integer.parseInt(visibility);\n+      fromProjectNumber = currentJsonPayload.optString(\"from\", null);\n+      priority = currentJsonPayload.optInt(\"pri\", 0);\n+      String collapseKey = currentJsonPayload.optString(\"collapse_key\", null);\n+      if (!\"do_not_collapse\".equals(collapseKey))\n+         collapseId = collapseKey;\n+\n+      try {\n+         setActionButtons();\n+      } catch (Throwable t) {\n+         OneSignal.Log(OneSignal.LOG_LEVEL.ERROR, \"Error assigning OSNotificationReceivedEvent.actionButtons values!\", t);\n+      }\n+\n+      try {\n+         setBackgroundImageLayout(currentJsonPayload);\n+      } catch (Throwable t) {\n+         OneSignal.Log(OneSignal.LOG_LEVEL.ERROR, \"Error assigning OSNotificationReceivedEvent.backgroundImageLayout values!\", t);\n+      }\n+   }\n+\n+   private void setActionButtons() throws Throwable {\n+      if (additionalData != null && additionalData.has(\"actionButtons\")) {\n+         JSONArray jsonActionButtons = additionalData.getJSONArray(\"actionButtons\");\n+         actionButtons = new ArrayList<>();\n \n-      if (jsonObject.has(\"groupedNotifications\")) {\n-         JSONArray jsonArray = jsonObject.optJSONArray(\"groupedNotifications\");\n-         groupedNotifications = new ArrayList<>();\n-         for (int i = 0; i < jsonArray.length(); i++)\n-            groupedNotifications.add(new OSNotificationPayload(jsonArray.optJSONObject(i)));\n+         for (int i = 0; i < jsonActionButtons.length(); i++) {\n+            JSONObject jsonActionButton = jsonActionButtons.getJSONObject(i);\n+            ActionButton actionButton = new ActionButton();\n+            actionButton.id = jsonActionButton.optString(\"id\", null);\n+            actionButton.text = jsonActionButton.optString(\"text\", null);\n+            actionButton.icon = jsonActionButton.optString(\"icon\", null);\n+            actionButtons.add(actionButton);\n+         }\n+         additionalData.remove(BUNDLE_KEY_ACTION_ID);\n+         additionalData.remove(\"actionButtons\");\n       }\n+   }\n+\n+   private void setBackgroundImageLayout(JSONObject currentJsonPayload) throws Throwable {\n+      String jsonStrBgImage = currentJsonPayload.optString(\"bg_img\", null);\n+      if (jsonStrBgImage != null) {\n+         JSONObject jsonBgImage = new JSONObject(jsonStrBgImage);\n+         backgroundImageLayout = new BackgroundImageLayout();\n+         backgroundImageLayout.image = jsonBgImage.optString(\"img\");\n+         backgroundImageLayout.titleTextColor = jsonBgImage.optString(\"tc\");\n+         backgroundImageLayout.bodyTextColor = jsonBgImage.optString(\"bc\");\n+      }\n+   }\n+\n+   public OSMutableNotification mutableCopy() {\n+      return new OSMutableNotification(this);\n+   }\n+\n+   OSNotification copy() {\n+      return new OSNotificationBuilder()\n+              .setNotificationExtender(notificationExtender)\n+              .setGroupedNotifications(groupedNotifications)\n+              .setAndroidNotificationId(androidNotificationId)\n+              .setNotificationID(notificationId)\n+              .setTemplateName(templateName)\n+              .setTemplateId(templateId)\n+              .setTitle(title)\n+              .setBody(body)\n+              .setAdditionalData(additionalData)\n+              .setSmallIcon(smallIcon)\n+              .setLargeIcon(largeIcon)\n+              .setBigPicture(bigPicture)\n+              .setSmallIconAccentColor(smallIconAccentColor)\n+              .setLaunchURL(launchURL)\n+              .setSound(sound)\n+              .setLedColor(ledColor)\n+              .setLockScreenVisibility(lockScreenVisibility)\n+              .setGroupKey(groupKey)\n+              .setGroupMessage(groupMessage)\n+              .setActionButtons(actionButtons)\n+              .setFromProjectNumber(fromProjectNumber)\n+              .setBackgroundImageLayout(backgroundImageLayout)\n+              .setCollapseId(collapseId)\n+              .setPriority(priority)\n+              .setRawPayload(rawPayload)\n+              .build();\n+   }\n+\n+   public NotificationCompat.Extender getNotificationExtender() {\n+      return notificationExtender;\n+   }\n+\n+   protected void setNotificationExtender(NotificationCompat.Extender notificationExtender) {\n+      this.notificationExtender = notificationExtender;\n+   }\n+\n+   boolean hasNotificationId() {\n+      return androidNotificationId != 0;\n+   }\n+\n+   public int getAndroidNotificationId() {\n+      return androidNotificationId;\n+   }\n+\n+   protected void setAndroidNotificationId(int androidNotificationId) {\n+      this.androidNotificationId = androidNotificationId;\n+   }\n+\n+   @Nullable\n+   public List<OSNotification> getGroupedNotifications() {\n+      return groupedNotifications;\n+   }\n+\n+   void setGroupedNotifications(@Nullable List<OSNotification> groupedNotifications) {\n+      this.groupedNotifications = groupedNotifications;\n+   }\n+\n+   public String getNotificationId() {\n+      return notificationId;\n+   }\n+\n+   void setNotificationId(String notificationId) {\n+      this.notificationId = notificationId;\n+   }\n+\n+   public String getTemplateName() {\n+      return templateName;\n+   }\n+\n+   void setTemplateName(String templateName) {\n+      this.templateName = templateName;\n+   }\n+\n+   public String getTemplateId() {\n+      return templateId;\n+   }\n+\n+   void setTemplateId(String templateId) {\n+      this.templateId = templateId;\n+   }\n+\n+   public String getTitle() {\n+      return title;\n+   }\n+\n+   void setTitle(String title) {\n+      this.title = title;\n+   }\n+\n+   public String getBody() {\n+      return body;\n+   }\n+\n+   void setBody(String body) {\n+      this.body = body;\n+   }\n+\n+   public JSONObject getAdditionalData() {\n+      return additionalData;\n+   }\n+\n+   void setAdditionalData(JSONObject additionalData) {\n+      this.additionalData = additionalData;\n+   }\n+\n+   public String getSmallIcon() {\n+      return smallIcon;\n+   }\n+\n+   void setSmallIcon(String smallIcon) {\n+      this.smallIcon = smallIcon;\n+   }\n+\n+   public String getLargeIcon() {\n+      return largeIcon;\n+   }\n+\n+   void setLargeIcon(String largeIcon) {\n+      this.largeIcon = largeIcon;\n+   }\n+\n+   public String getBigPicture() {\n+      return bigPicture;\n+   }\n+\n+   void setBigPicture(String bigPicture) {\n+      this.bigPicture = bigPicture;\n+   }\n+\n+   public String getSmallIconAccentColor() {\n+      return smallIconAccentColor;\n+   }\n+\n+   void setSmallIconAccentColor(String smallIconAccentColor) {\n+      this.smallIconAccentColor = smallIconAccentColor;\n+   }\n+\n+   public String getLaunchURL() {\n+      return launchURL;\n+   }\n+\n+   void setLaunchURL(String launchURL) {\n+      this.launchURL = launchURL;\n+   }\n+\n+   public String getSound() {\n+      return sound;\n+   }\n+\n+   void setSound(String sound) {\n+      this.sound = sound;\n+   }\n+\n+   public String getLedColor() {\n+      return ledColor;\n+   }\n+\n+   void setLedColor(String ledColor) {\n+      this.ledColor = ledColor;\n+   }\n+\n+   public int getLockScreenVisibility() {\n+      return lockScreenVisibility;\n+   }\n+\n+   void setLockScreenVisibility(int lockScreenVisibility) {\n+      this.lockScreenVisibility = lockScreenVisibility;\n+   }\n+\n+   public String getGroupKey() {\n+      return groupKey;\n+   }\n+\n+   void setGroupKey(String groupKey) {\n+      this.groupKey = groupKey;\n+   }\n+\n+   public String getGroupMessage() {\n+      return groupMessage;\n+   }\n \n-      if (jsonObject.has(\"payload\"))\n-         payload = new OSNotificationPayload(jsonObject.optJSONObject(\"payload\"));\n+   void setGroupMessage(String groupMessage) {\n+      this.groupMessage = groupMessage;\n+   }\n+\n+   public List<ActionButton> getActionButtons() {\n+      return actionButtons;\n+   }\n+\n+   void setActionButtons(List<ActionButton> actionButtons) {\n+      this.actionButtons = actionButtons;\n+   }\n+\n+   public String getFromProjectNumber() {\n+      return fromProjectNumber;\n+   }\n+\n+   void setFromProjectNumber(String fromProjectNumber) {\n+      this.fromProjectNumber = fromProjectNumber;\n+   }\n+\n+   public BackgroundImageLayout getBackgroundImageLayout() {\n+      return backgroundImageLayout;\n+   }\n+\n+   void setBackgroundImageLayout(BackgroundImageLayout backgroundImageLayout) {\n+      this.backgroundImageLayout = backgroundImageLayout;\n+   }\n+\n+   public String getCollapseId() {\n+      return collapseId;\n+   }\n+\n+   void setCollapseId(String collapseId) {\n+      this.collapseId = collapseId;\n+   }\n+\n+   public int getPriority() {\n+      return priority;\n+   }\n+\n+   void setPriority(int priority) {\n+      this.priority = priority;\n+   }\n+\n+   public String getRawPayload() {\n+      return rawPayload;\n+   }\n+\n+   void setRawPayload(String rawPayload) {\n+      this.rawPayload = rawPayload;\n    }\n \n    public JSONObject toJSONObject() {\n       JSONObject mainObj = new JSONObject();\n \n       try {\n-         mainObj.put(\"isAppInFocus\", isAppInFocus);\n-         mainObj.put(\"shown\", shown);\n          mainObj.put(\"androidNotificationId\", androidNotificationId);\n-         mainObj.put(\"displayType\", displayOption.ordinal());\n \n          if (groupedNotifications != null) {\n             JSONArray payloadJsonArray = new JSONArray();\n-            for (OSNotificationPayload payload : groupedNotifications)\n-               payloadJsonArray.put(payload.toJSONObject());\n+            for (OSNotification notification : groupedNotifications)\n+               payloadJsonArray.put(notification.toJSONObject());\n             mainObj.put(\"groupedNotifications\", payloadJsonArray);\n          }\n \n-         mainObj.put(\"payload\", payload.toJSONObject());\n+         JSONObject payload = new JSONObject();", "originalCommit": "5a559dd2cbe6dd460b1c035d260923347e177b3c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8a179223eab413546fa84200e6d14bc6a93600d", "chunk": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSNotification.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSNotification.java\nindex 56b26f56..cbf59c78 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSNotification.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSNotification.java\n\n@@ -464,39 +464,35 @@ public class OSNotification {\n             mainObj.put(\"groupedNotifications\", payloadJsonArray);\n          }\n \n-         JSONObject payload = new JSONObject();\n-\n-         payload.put(\"notificationID\", notificationId);\n-         payload.put(\"title\", title);\n-         payload.put(\"body\", body);\n-         payload.put(\"smallIcon\", smallIcon);\n-         payload.put(\"largeIcon\", largeIcon);\n-         payload.put(\"bigPicture\", bigPicture);\n-         payload.put(\"smallIconAccentColor\", smallIconAccentColor);\n-         payload.put(\"launchURL\", launchURL);\n-         payload.put(\"sound\", sound);\n-         payload.put(\"ledColor\", ledColor);\n-         payload.put(\"lockScreenVisibility\", lockScreenVisibility);\n-         payload.put(\"groupKey\", groupKey);\n-         payload.put(\"groupMessage\", groupMessage);\n-         payload.put(\"fromProjectNumber\", fromProjectNumber);\n-         payload.put(\"collapseId\", collapseId);\n-         payload.put(\"priority\", priority);\n+         mainObj.put(\"notificationId\", notificationId);\n+         mainObj.put(\"title\", title);\n+         mainObj.put(\"body\", body);\n+         mainObj.put(\"smallIcon\", smallIcon);\n+         mainObj.put(\"largeIcon\", largeIcon);\n+         mainObj.put(\"bigPicture\", bigPicture);\n+         mainObj.put(\"smallIconAccentColor\", smallIconAccentColor);\n+         mainObj.put(\"launchURL\", launchURL);\n+         mainObj.put(\"sound\", sound);\n+         mainObj.put(\"ledColor\", ledColor);\n+         mainObj.put(\"lockScreenVisibility\", lockScreenVisibility);\n+         mainObj.put(\"groupKey\", groupKey);\n+         mainObj.put(\"groupMessage\", groupMessage);\n+         mainObj.put(\"fromProjectNumber\", fromProjectNumber);\n+         mainObj.put(\"collapseId\", collapseId);\n+         mainObj.put(\"priority\", priority);\n \n          if (additionalData != null)\n-            payload.put(\"additionalData\", additionalData);\n+            mainObj.put(\"additionalData\", additionalData);\n \n          if (actionButtons != null) {\n             JSONArray actionButtonJsonArray = new JSONArray();\n             for (ActionButton actionButton : actionButtons) {\n                actionButtonJsonArray.put(actionButton.toJSONObject());\n             }\n-            payload.put(\"actionButtons\", actionButtonJsonArray);\n+            mainObj.put(\"actionButtons\", actionButtonJsonArray);\n          }\n \n-         payload.put(\"rawPayload\", rawPayload);\n-\n-         mainObj.put(\"payload\", payload);\n+         mainObj.put(\"rawPayload\", rawPayload);\n       }\n       catch(JSONException e) {\n          e.printStackTrace();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2NjQxMg==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1156#discussion_r494366412", "bodyText": "notificationID should be notificationId", "author": "jkasten2", "createdAt": "2020-09-24T14:29:27Z", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSNotification.java", "diffHunk": "@@ -36,90 +38,465 @@\n import java.util.ArrayList;\n import java.util.List;\n \n+import static com.onesignal.GenerateNotification.BUNDLE_KEY_ACTION_ID;\n+import static com.onesignal.NotificationBundleProcessor.PUSH_ADDITIONAL_DATA_KEY;\n+\n /**\n  * The notification the user received\n  * <br/><br/>\n- * {@link #isAppInFocus} - Was app in focus.\n- * {@link #shown} - Was notification shown to the user. Will be {@code false} for silent notifications.\n  * {@link #androidNotificationId} - Android Notification ID assigned to the notification. Can be used to cancel or replace the notification\n- * {@link #payload} - Payload received from OneSignal\n- * {@link #displayOption} - How the notification will be displayed to the user, includes options:\n- *    {@link OSNotificationDisplay#SILENT}\n- *    {@link OSNotificationDisplay#NOTIFICATION}\n- * <br/><br/>\n  * {@link #groupedNotifications} - If the notification is a summary notification for a group, this will contain\n  * all notification payloads it was created from.\n  */\n public class OSNotification {\n \n-   // Will be set if a summary notification is opened.\n-   // The payload will be the most recent notification received.\n-   private List<OSNotificationPayload> groupedNotifications;\n+   private NotificationCompat.Extender notificationExtender;\n \n-   // Notification payload received from OneSignal\n-   private OSNotificationPayload payload;\n+   /**\n+    * Summary notifications grouped\n+    * Notification payload will have the most recent notification received.\n+    */\n+   @Nullable\n+   private List<OSNotification> groupedNotifications;\n \n-   private OSNotificationDisplay displayOption;\n+   /**\n+    * Android notification id. Can later be used to dismiss the notification programmatically.\n+    */\n+   private int androidNotificationId;\n \n-   // Is app Active.\n-   private boolean isAppInFocus;\n+   private String notificationId;\n+   private String templateName;\n+   private String templateId;\n+   private String title;\n+   private String body;\n+   private JSONObject additionalData;\n+   private String smallIcon;\n+   private String largeIcon;\n+   private String bigPicture;\n+   private String smallIconAccentColor;\n+   private String launchURL;\n+   private String sound;\n+   private String ledColor;\n+   private int lockScreenVisibility = 1;\n+   private String groupKey;\n+   private String groupMessage;\n+   private List<ActionButton> actionButtons;\n+   private String fromProjectNumber;\n+   private BackgroundImageLayout backgroundImageLayout;\n+   private String collapseId;\n+   private int priority;\n+   private String rawPayload;\n \n-   // Was it displayed to the user.\n-   private boolean shown;\n+   protected OSNotification() {\n+   }\n \n-   // Android notification id. Can later be used to dismiss the notification programmatically.\n-   private int androidNotificationId;\n+   OSNotification(@NonNull JSONObject payload) {\n+      this(null, payload, 0);\n+   }\n+\n+   OSNotification(@NonNull JSONObject payload, int androidNotificationId) {\n+      this(null, payload, androidNotificationId);\n+   }\n \n-   public OSNotification(List<OSNotificationPayload> groupedNotifications, OSNotificationPayload payload,\n-                         OSNotificationDisplay displayOption) {\n-      this(groupedNotifications, payload, displayOption, false, false, 0);\n+   OSNotification(@Nullable List<OSNotification> groupedNotifications, @NonNull JSONObject payload) {\n+      this(groupedNotifications, payload, 0);\n    }\n \n-   public OSNotification(List<OSNotificationPayload> groupedNotifications, OSNotificationPayload payload,\n-                         OSNotificationDisplay displayOption, boolean isAppInFocus,\n-                         boolean shown, int androidNotificationId) {\n+   OSNotification(@Nullable List<OSNotification> groupedNotifications, @NonNull JSONObject jsonPayload, int androidNotificationId) {\n+      initPayloadData(jsonPayload);\n       this.groupedNotifications = groupedNotifications;\n-      this.payload = payload;\n-      this.displayOption = displayOption;\n-      this.isAppInFocus = isAppInFocus;\n-      this.shown = shown;\n       this.androidNotificationId = androidNotificationId;\n    }\n \n-   public OSNotification(JSONObject jsonObject) {\n-      isAppInFocus = jsonObject.optBoolean(\"isAppInFocus\");\n-      shown = jsonObject.optBoolean(\"shown\", shown);\n-      androidNotificationId = jsonObject.optInt(\"androidNotificationId\");\n-      displayOption = OSNotificationDisplay.values()[jsonObject.optInt(\"displayType\")];\n+   protected OSNotification(OSNotification notification) {\n+      this.notificationExtender = notification.notificationExtender;\n+      this.groupedNotifications = notification.groupedNotifications;\n+      this.androidNotificationId = notification.androidNotificationId;\n+      this.notificationId = notification.notificationId;\n+      this.templateName = notification.templateName;\n+      this.templateId = notification.templateId;\n+      this.title = notification.title;\n+      this.body = notification.body;\n+      this.additionalData = notification.additionalData;\n+      this.largeIcon = notification.largeIcon;\n+      this.bigPicture = notification.bigPicture;\n+      this.smallIconAccentColor = notification.smallIconAccentColor;\n+      this.launchURL = notification.launchURL;\n+      this.sound = notification.sound;\n+      this.ledColor = notification.ledColor;\n+      this.lockScreenVisibility = notification.lockScreenVisibility;\n+      this.groupKey = notification.groupKey;\n+      this.groupMessage = notification.groupMessage;\n+      this.actionButtons = notification.actionButtons;\n+      this.fromProjectNumber = notification.fromProjectNumber;\n+      this.backgroundImageLayout = notification.backgroundImageLayout;\n+      this.collapseId = notification.collapseId;\n+      this.priority = notification.priority;\n+      this.rawPayload = notification.rawPayload;\n+   }\n+\n+   private void initPayloadData(JSONObject currentJsonPayload) {\n+      JSONObject customJson;\n+      try {\n+         customJson = NotificationBundleProcessor.getCustomJSONObject(currentJsonPayload);\n+      } catch (Throwable t) {\n+         OneSignal.Log(OneSignal.LOG_LEVEL.ERROR, \"Error assigning OSNotificationReceivedEvent payload values!\", t);\n+         return;\n+      }\n+\n+      notificationId = customJson.optString(\"i\");\n+      templateId = customJson.optString(\"ti\");\n+      templateName = customJson.optString(\"tn\");\n+      rawPayload = currentJsonPayload.toString();\n+      additionalData = customJson.optJSONObject(PUSH_ADDITIONAL_DATA_KEY);\n+      launchURL = customJson.optString(\"u\", null);\n+\n+      body = currentJsonPayload.optString(\"alert\", null);\n+      title = currentJsonPayload.optString(\"title\", null);\n+      smallIcon = currentJsonPayload.optString(\"sicon\", null);\n+      bigPicture = currentJsonPayload.optString(\"bicon\", null);\n+      largeIcon = currentJsonPayload.optString(\"licon\", null);\n+      sound = currentJsonPayload.optString(\"sound\", null);\n+      groupKey = currentJsonPayload.optString(\"grp\", null);\n+      groupMessage = currentJsonPayload.optString(\"grp_msg\", null);\n+      smallIconAccentColor = currentJsonPayload.optString(\"bgac\", null);\n+      ledColor = currentJsonPayload.optString(\"ledc\", null);\n+      String visibility = currentJsonPayload.optString(\"vis\", null);\n+      if (visibility != null)\n+         lockScreenVisibility = Integer.parseInt(visibility);\n+      fromProjectNumber = currentJsonPayload.optString(\"from\", null);\n+      priority = currentJsonPayload.optInt(\"pri\", 0);\n+      String collapseKey = currentJsonPayload.optString(\"collapse_key\", null);\n+      if (!\"do_not_collapse\".equals(collapseKey))\n+         collapseId = collapseKey;\n+\n+      try {\n+         setActionButtons();\n+      } catch (Throwable t) {\n+         OneSignal.Log(OneSignal.LOG_LEVEL.ERROR, \"Error assigning OSNotificationReceivedEvent.actionButtons values!\", t);\n+      }\n+\n+      try {\n+         setBackgroundImageLayout(currentJsonPayload);\n+      } catch (Throwable t) {\n+         OneSignal.Log(OneSignal.LOG_LEVEL.ERROR, \"Error assigning OSNotificationReceivedEvent.backgroundImageLayout values!\", t);\n+      }\n+   }\n+\n+   private void setActionButtons() throws Throwable {\n+      if (additionalData != null && additionalData.has(\"actionButtons\")) {\n+         JSONArray jsonActionButtons = additionalData.getJSONArray(\"actionButtons\");\n+         actionButtons = new ArrayList<>();\n \n-      if (jsonObject.has(\"groupedNotifications\")) {\n-         JSONArray jsonArray = jsonObject.optJSONArray(\"groupedNotifications\");\n-         groupedNotifications = new ArrayList<>();\n-         for (int i = 0; i < jsonArray.length(); i++)\n-            groupedNotifications.add(new OSNotificationPayload(jsonArray.optJSONObject(i)));\n+         for (int i = 0; i < jsonActionButtons.length(); i++) {\n+            JSONObject jsonActionButton = jsonActionButtons.getJSONObject(i);\n+            ActionButton actionButton = new ActionButton();\n+            actionButton.id = jsonActionButton.optString(\"id\", null);\n+            actionButton.text = jsonActionButton.optString(\"text\", null);\n+            actionButton.icon = jsonActionButton.optString(\"icon\", null);\n+            actionButtons.add(actionButton);\n+         }\n+         additionalData.remove(BUNDLE_KEY_ACTION_ID);\n+         additionalData.remove(\"actionButtons\");\n       }\n+   }\n+\n+   private void setBackgroundImageLayout(JSONObject currentJsonPayload) throws Throwable {\n+      String jsonStrBgImage = currentJsonPayload.optString(\"bg_img\", null);\n+      if (jsonStrBgImage != null) {\n+         JSONObject jsonBgImage = new JSONObject(jsonStrBgImage);\n+         backgroundImageLayout = new BackgroundImageLayout();\n+         backgroundImageLayout.image = jsonBgImage.optString(\"img\");\n+         backgroundImageLayout.titleTextColor = jsonBgImage.optString(\"tc\");\n+         backgroundImageLayout.bodyTextColor = jsonBgImage.optString(\"bc\");\n+      }\n+   }\n+\n+   public OSMutableNotification mutableCopy() {\n+      return new OSMutableNotification(this);\n+   }\n+\n+   OSNotification copy() {\n+      return new OSNotificationBuilder()\n+              .setNotificationExtender(notificationExtender)\n+              .setGroupedNotifications(groupedNotifications)\n+              .setAndroidNotificationId(androidNotificationId)\n+              .setNotificationID(notificationId)\n+              .setTemplateName(templateName)\n+              .setTemplateId(templateId)\n+              .setTitle(title)\n+              .setBody(body)\n+              .setAdditionalData(additionalData)\n+              .setSmallIcon(smallIcon)\n+              .setLargeIcon(largeIcon)\n+              .setBigPicture(bigPicture)\n+              .setSmallIconAccentColor(smallIconAccentColor)\n+              .setLaunchURL(launchURL)\n+              .setSound(sound)\n+              .setLedColor(ledColor)\n+              .setLockScreenVisibility(lockScreenVisibility)\n+              .setGroupKey(groupKey)\n+              .setGroupMessage(groupMessage)\n+              .setActionButtons(actionButtons)\n+              .setFromProjectNumber(fromProjectNumber)\n+              .setBackgroundImageLayout(backgroundImageLayout)\n+              .setCollapseId(collapseId)\n+              .setPriority(priority)\n+              .setRawPayload(rawPayload)\n+              .build();\n+   }\n+\n+   public NotificationCompat.Extender getNotificationExtender() {\n+      return notificationExtender;\n+   }\n+\n+   protected void setNotificationExtender(NotificationCompat.Extender notificationExtender) {\n+      this.notificationExtender = notificationExtender;\n+   }\n+\n+   boolean hasNotificationId() {\n+      return androidNotificationId != 0;\n+   }\n+\n+   public int getAndroidNotificationId() {\n+      return androidNotificationId;\n+   }\n+\n+   protected void setAndroidNotificationId(int androidNotificationId) {\n+      this.androidNotificationId = androidNotificationId;\n+   }\n+\n+   @Nullable\n+   public List<OSNotification> getGroupedNotifications() {\n+      return groupedNotifications;\n+   }\n+\n+   void setGroupedNotifications(@Nullable List<OSNotification> groupedNotifications) {\n+      this.groupedNotifications = groupedNotifications;\n+   }\n+\n+   public String getNotificationId() {\n+      return notificationId;\n+   }\n+\n+   void setNotificationId(String notificationId) {\n+      this.notificationId = notificationId;\n+   }\n+\n+   public String getTemplateName() {\n+      return templateName;\n+   }\n+\n+   void setTemplateName(String templateName) {\n+      this.templateName = templateName;\n+   }\n+\n+   public String getTemplateId() {\n+      return templateId;\n+   }\n+\n+   void setTemplateId(String templateId) {\n+      this.templateId = templateId;\n+   }\n+\n+   public String getTitle() {\n+      return title;\n+   }\n+\n+   void setTitle(String title) {\n+      this.title = title;\n+   }\n+\n+   public String getBody() {\n+      return body;\n+   }\n+\n+   void setBody(String body) {\n+      this.body = body;\n+   }\n+\n+   public JSONObject getAdditionalData() {\n+      return additionalData;\n+   }\n+\n+   void setAdditionalData(JSONObject additionalData) {\n+      this.additionalData = additionalData;\n+   }\n+\n+   public String getSmallIcon() {\n+      return smallIcon;\n+   }\n+\n+   void setSmallIcon(String smallIcon) {\n+      this.smallIcon = smallIcon;\n+   }\n+\n+   public String getLargeIcon() {\n+      return largeIcon;\n+   }\n+\n+   void setLargeIcon(String largeIcon) {\n+      this.largeIcon = largeIcon;\n+   }\n+\n+   public String getBigPicture() {\n+      return bigPicture;\n+   }\n+\n+   void setBigPicture(String bigPicture) {\n+      this.bigPicture = bigPicture;\n+   }\n+\n+   public String getSmallIconAccentColor() {\n+      return smallIconAccentColor;\n+   }\n+\n+   void setSmallIconAccentColor(String smallIconAccentColor) {\n+      this.smallIconAccentColor = smallIconAccentColor;\n+   }\n+\n+   public String getLaunchURL() {\n+      return launchURL;\n+   }\n+\n+   void setLaunchURL(String launchURL) {\n+      this.launchURL = launchURL;\n+   }\n+\n+   public String getSound() {\n+      return sound;\n+   }\n+\n+   void setSound(String sound) {\n+      this.sound = sound;\n+   }\n+\n+   public String getLedColor() {\n+      return ledColor;\n+   }\n+\n+   void setLedColor(String ledColor) {\n+      this.ledColor = ledColor;\n+   }\n+\n+   public int getLockScreenVisibility() {\n+      return lockScreenVisibility;\n+   }\n+\n+   void setLockScreenVisibility(int lockScreenVisibility) {\n+      this.lockScreenVisibility = lockScreenVisibility;\n+   }\n+\n+   public String getGroupKey() {\n+      return groupKey;\n+   }\n+\n+   void setGroupKey(String groupKey) {\n+      this.groupKey = groupKey;\n+   }\n+\n+   public String getGroupMessage() {\n+      return groupMessage;\n+   }\n \n-      if (jsonObject.has(\"payload\"))\n-         payload = new OSNotificationPayload(jsonObject.optJSONObject(\"payload\"));\n+   void setGroupMessage(String groupMessage) {\n+      this.groupMessage = groupMessage;\n+   }\n+\n+   public List<ActionButton> getActionButtons() {\n+      return actionButtons;\n+   }\n+\n+   void setActionButtons(List<ActionButton> actionButtons) {\n+      this.actionButtons = actionButtons;\n+   }\n+\n+   public String getFromProjectNumber() {\n+      return fromProjectNumber;\n+   }\n+\n+   void setFromProjectNumber(String fromProjectNumber) {\n+      this.fromProjectNumber = fromProjectNumber;\n+   }\n+\n+   public BackgroundImageLayout getBackgroundImageLayout() {\n+      return backgroundImageLayout;\n+   }\n+\n+   void setBackgroundImageLayout(BackgroundImageLayout backgroundImageLayout) {\n+      this.backgroundImageLayout = backgroundImageLayout;\n+   }\n+\n+   public String getCollapseId() {\n+      return collapseId;\n+   }\n+\n+   void setCollapseId(String collapseId) {\n+      this.collapseId = collapseId;\n+   }\n+\n+   public int getPriority() {\n+      return priority;\n+   }\n+\n+   void setPriority(int priority) {\n+      this.priority = priority;\n+   }\n+\n+   public String getRawPayload() {\n+      return rawPayload;\n+   }\n+\n+   void setRawPayload(String rawPayload) {\n+      this.rawPayload = rawPayload;\n    }\n \n    public JSONObject toJSONObject() {\n       JSONObject mainObj = new JSONObject();\n \n       try {\n-         mainObj.put(\"isAppInFocus\", isAppInFocus);\n-         mainObj.put(\"shown\", shown);\n          mainObj.put(\"androidNotificationId\", androidNotificationId);\n-         mainObj.put(\"displayType\", displayOption.ordinal());\n \n          if (groupedNotifications != null) {\n             JSONArray payloadJsonArray = new JSONArray();\n-            for (OSNotificationPayload payload : groupedNotifications)\n-               payloadJsonArray.put(payload.toJSONObject());\n+            for (OSNotification notification : groupedNotifications)\n+               payloadJsonArray.put(notification.toJSONObject());\n             mainObj.put(\"groupedNotifications\", payloadJsonArray);\n          }\n \n-         mainObj.put(\"payload\", payload.toJSONObject());\n+         JSONObject payload = new JSONObject();\n+\n+         payload.put(\"notificationID\", notificationId);", "originalCommit": "5a559dd2cbe6dd460b1c035d260923347e177b3c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8a179223eab413546fa84200e6d14bc6a93600d", "chunk": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSNotification.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSNotification.java\nindex 56b26f56..cbf59c78 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSNotification.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSNotification.java\n\n@@ -464,39 +464,35 @@ public class OSNotification {\n             mainObj.put(\"groupedNotifications\", payloadJsonArray);\n          }\n \n-         JSONObject payload = new JSONObject();\n-\n-         payload.put(\"notificationID\", notificationId);\n-         payload.put(\"title\", title);\n-         payload.put(\"body\", body);\n-         payload.put(\"smallIcon\", smallIcon);\n-         payload.put(\"largeIcon\", largeIcon);\n-         payload.put(\"bigPicture\", bigPicture);\n-         payload.put(\"smallIconAccentColor\", smallIconAccentColor);\n-         payload.put(\"launchURL\", launchURL);\n-         payload.put(\"sound\", sound);\n-         payload.put(\"ledColor\", ledColor);\n-         payload.put(\"lockScreenVisibility\", lockScreenVisibility);\n-         payload.put(\"groupKey\", groupKey);\n-         payload.put(\"groupMessage\", groupMessage);\n-         payload.put(\"fromProjectNumber\", fromProjectNumber);\n-         payload.put(\"collapseId\", collapseId);\n-         payload.put(\"priority\", priority);\n+         mainObj.put(\"notificationId\", notificationId);\n+         mainObj.put(\"title\", title);\n+         mainObj.put(\"body\", body);\n+         mainObj.put(\"smallIcon\", smallIcon);\n+         mainObj.put(\"largeIcon\", largeIcon);\n+         mainObj.put(\"bigPicture\", bigPicture);\n+         mainObj.put(\"smallIconAccentColor\", smallIconAccentColor);\n+         mainObj.put(\"launchURL\", launchURL);\n+         mainObj.put(\"sound\", sound);\n+         mainObj.put(\"ledColor\", ledColor);\n+         mainObj.put(\"lockScreenVisibility\", lockScreenVisibility);\n+         mainObj.put(\"groupKey\", groupKey);\n+         mainObj.put(\"groupMessage\", groupMessage);\n+         mainObj.put(\"fromProjectNumber\", fromProjectNumber);\n+         mainObj.put(\"collapseId\", collapseId);\n+         mainObj.put(\"priority\", priority);\n \n          if (additionalData != null)\n-            payload.put(\"additionalData\", additionalData);\n+            mainObj.put(\"additionalData\", additionalData);\n \n          if (actionButtons != null) {\n             JSONArray actionButtonJsonArray = new JSONArray();\n             for (ActionButton actionButton : actionButtons) {\n                actionButtonJsonArray.put(actionButton.toJSONObject());\n             }\n-            payload.put(\"actionButtons\", actionButtonJsonArray);\n+            mainObj.put(\"actionButtons\", actionButtonJsonArray);\n          }\n \n-         payload.put(\"rawPayload\", rawPayload);\n-\n-         mainObj.put(\"payload\", payload);\n+         mainObj.put(\"rawPayload\", rawPayload);\n       }\n       catch(JSONException e) {\n          e.printStackTrace();\n"}}, {"oid": "b09259b846d30bb1e832ca643f5cc9b4abfe75f5", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/b09259b846d30bb1e832ca643f5cc9b4abfe75f5", "message": "Fix testNotificationReceivedWhenAppInFocus failing test\n\n* Test is failing for duplicate notification, if complete is not called then notification might not be saved at the time the notification arrive again. It is ok for beta 1, but will be fixed on the future", "committedDate": "2020-09-24T16:32:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ2MjA3OA==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1156#discussion_r494462078", "bodyText": "This comment is out of date. I suggest we replace it with this.\n    /**\n    * Implement this interface on a class with a default public constructor and provide class with namespace\n    * as a value to a new `meta-data` tag with the key name of \"com.onesignal.NotificationServiceExtension\" in\n    * your AndroidManifest.xml.\n    *    ex. <meta-data android:name=\"com.onesignal.NotificationServiceExtension\" android:value=\"com.company.MyNotificationExtensionService\" />\n    * <br/><br/>\n    * Allows for modification of a notification by calling {@link OSNotification#mutableCopy}\n    *    instance and passing it into {@link OSMutableNotification#setExtender(NotificationCompat.Extender)}\n    * To display the notification, call {@link OSNotificationReceivedEvent#complete(OSNotification)} with a notification instance.\n    * To omit displaying a notification call {@link OSNotificationReceivedEvent#complete(OSNotification)} with null.\n    */", "author": "jkasten2", "createdAt": "2020-09-24T16:42:37Z", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java", "diffHunk": "@@ -174,50 +138,49 @@ public boolean isAppClose() {\n     * Naming can be whatever makes the most sense to the developer, but to actually activate any\n     *    implemented interfaces, a metadata tag with a specific OneSignal key and then file path value\n     *    must be added to the apps AndroidManifest.xml\n-    *       ex. <meta-data android:name=\"com.onesignal.NotificationExtensionServiceClass\" android:value=\"com.company.ExtensionService\" />\n+    *       ex. <meta-data android:name=\"com.onesignal.NotificationServiceExtension\" android:value=\"com.company.ExtensionService\" />", "originalCommit": "5a559dd2cbe6dd460b1c035d260923347e177b3c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c8a179223eab413546fa84200e6d14bc6a93600d", "chunk": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\nindex e72eeabe..8e968d15 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n\n@@ -134,18 +135,15 @@ public class OneSignal {\n    }\n \n    /**\n-    * Meant to be implemented within a custom made NotificationExtensionService\n-    * Naming can be whatever makes the most sense to the developer, but to actually activate any\n-    *    implemented interfaces, a metadata tag with a specific OneSignal key and then file path value\n-    *    must be added to the apps AndroidManifest.xml\n-    *       ex. <meta-data android:name=\"com.onesignal.NotificationServiceExtension\" android:value=\"com.company.ExtensionService\" />\n+    * Implement this interface on a class with a default public constructor and provide class with namespace\n+    * as a value to a new `meta-data` tag with the key name of \"com.onesignal.NotificationServiceExtension\" in\n+    * your AndroidManifest.xml.\n+    *    ex. <meta-data android:name=\"com.onesignal.NotificationServiceExtension\" android:value=\"com.company.MyNotificationExtensionService\" />\n     * <br/><br/>\n-    * Allows for modification of a notifications payload by creating a {@link OSNotificationController.OverrideSettings}\n-    *    instance and passing it into {@link OSNotificationReceivedEvent#setModifiedContent(OSNotificationController.OverrideSettings)}\n-    * To display the notification, call {@link OSNotificationReceivedEvent#display()}\n-    * Finally, to notify the SDK that the processing work is done, call {@link OSNotificationReceivedEvent#complete()}\n-    * <br/><br/>\n-    * TODO: Update docs with new OSRemoteNotificationReceivedHandler, this would be replacing the old NotificationExtenderService\n+    * Allows for modification of a notification by calling {@link OSNotification#mutableCopy}\n+    *    instance and passing it into {@link OSMutableNotification#setExtender(NotificationCompat.Extender)}\n+    * To display the notification, call {@link OSNotificationReceivedEvent#complete(OSNotification)} with a notification instance.\n+    * To omit displaying a notification call {@link OSNotificationReceivedEvent#complete(OSNotification)} with null.\n     */\n    public interface OSRemoteNotificationReceivedHandler {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ2ODYzNw==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1156#discussion_r494468637", "bodyText": "Follow up from this comment\n#1156 (review)\nThis also should be renamed, as this callForegroundLogic ends up becoming fromBackgroundLogic in the processJobForDisplay(OSNotificationController notificationController, boolean opened, boolean fromBackgroundLogic) below", "author": "jkasten2", "createdAt": "2020-09-24T16:53:10Z", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/NotificationBundleProcessor.java", "diffHunk": "@@ -112,51 +112,63 @@ static void processFromFCMIntentService(Context context, BundleCompat bundle, OS\n \n     /**\n      * Recommended method to process notification before displaying\n-     * Only use the {@link NotificationBundleProcessor#processJobForDisplay(OSNotificationGenerationJob, boolean, boolean)}\n+     * Only use the {@link NotificationBundleProcessor#processJobForDisplay(OSNotificationGenerationJob, boolean)}\n      *  in the event where you want to mark a notification as opened or displayed different than the defaults\n      */\n     @WorkerThread\n-    static int processJobForDisplay(OSNotificationGenerationJob notificationJob) {\n-        return processJobForDisplay(notificationJob, false, true);\n+    static int processJobForDisplay(OSNotificationGenerationJob notificationJob, boolean callForegroundLogic) {\n+        OSNotificationController notificationController = new OSNotificationController(notificationJob, notificationJob.isRestoring(), true);\n+        return processJobForDisplay(notificationController, false, callForegroundLogic);", "originalCommit": "5a559dd2cbe6dd460b1c035d260923347e177b3c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ3NzExNQ==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1156#discussion_r494477115", "bodyText": "good catch!", "author": "Jeasmine", "createdAt": "2020-09-24T17:07:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ2ODYzNw=="}], "type": "inlineReview", "revised_code": {"commit": "c8a179223eab413546fa84200e6d14bc6a93600d", "chunk": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/NotificationBundleProcessor.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/NotificationBundleProcessor.java\nindex e9bb9d31..0e91614f 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/NotificationBundleProcessor.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/NotificationBundleProcessor.java\n\n@@ -116,9 +116,9 @@ class NotificationBundleProcessor {\n      *  in the event where you want to mark a notification as opened or displayed different than the defaults\n      */\n     @WorkerThread\n-    static int processJobForDisplay(OSNotificationGenerationJob notificationJob, boolean callForegroundLogic) {\n+    static int processJobForDisplay(OSNotificationGenerationJob notificationJob, boolean fromBackgroundLogic) {\n         OSNotificationController notificationController = new OSNotificationController(notificationJob, notificationJob.isRestoring(), true);\n-        return processJobForDisplay(notificationController, false, callForegroundLogic);\n+        return processJobForDisplay(notificationController, false, fromBackgroundLogic);\n     }\n \n     @WorkerThread\n"}}, {"oid": "c8a179223eab413546fa84200e6d14bc6a93600d", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/c8a179223eab413546fa84200e6d14bc6a93600d", "message": "Code cleaning\n\n* Manifest service declaration is not needed anymore since we only depend on metadata\n* Rename notificationID json key to notificationId\n* Remove payload object from toJSONObject", "committedDate": "2020-09-24T17:05:32Z", "type": "commit"}, {"oid": "c8a179223eab413546fa84200e6d14bc6a93600d", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/c8a179223eab413546fa84200e6d14bc6a93600d", "message": "Code cleaning\n\n* Manifest service declaration is not needed anymore since we only depend on metadata\n* Rename notificationID json key to notificationId\n* Remove payload object from toJSONObject", "committedDate": "2020-09-24T17:05:32Z", "type": "forcePushed"}]}