{"pr_number": 1137, "pr_title": "Avoid displaying notification if user not calls display() ", "pr_createdAt": "2020-09-07T21:45:19Z", "pr_url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1137", "timeline": [{"oid": "8dd567f83438bf6384f618c251c92cbd56f64d21", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/8dd567f83438bf6384f618c251c92cbd56f64d21", "message": "Avoid displaying notification if user not calls display()\n\n  * If display() is not called on notificationProcessing under NotificationProcessingHandler service, notification should not display and foreground handler should not be called.", "committedDate": "2020-09-07T21:47:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY0NDM2OA==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1137#discussion_r484644368", "bodyText": "The boolean internalComplete was added to OSNotificationReceived in this PR. I think we should use this name here to keep it consistent.", "author": "jkasten2", "createdAt": "2020-09-08T04:33:54Z", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSNotificationExtender.java", "diffHunk": "@@ -133,34 +133,42 @@ OSNotificationDisplayedResult displayNotification() {\n     * <br/><br/>\n     * @see OSNotificationReceived#complete()\n     */\n-   void processNotification() {\n-      // If the developer did not call display from notificationProcessing handler\n-      if (!developerProcessed) {\n-\n+   void processNotification(boolean internalFlow) {", "originalCommit": "8dd567f83438bf6384f618c251c92cbd56f64d21", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dd385a8ce24c1e359ce82fab96d0acb826e0f541", "chunk": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSNotificationExtender.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSNotificationExtender.java\nindex 10550f33..3aa56ccc 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSNotificationExtender.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OSNotificationExtender.java\n\n@@ -133,10 +133,10 @@ public class OSNotificationExtender {\n     * <br/><br/>\n     * @see OSNotificationReceived#complete()\n     */\n-   void processNotification(boolean internalFlow) {\n-      // If processNotification comes from an OneSignal flow, no callbacks/extenders/services continue with common flow.\n+   void processNotification(boolean internalComplete) {\n+      // If processNotification comes from an OneSignal flow, no callbacks/extenders/services called then continue with common flow.\n       // Check for display not called by developer to avoid duplicated handles under developer extenders service implementation failure\n-      if (internalFlow && !developerProcessed) {\n+      if (internalComplete && !developerProcessed) {\n          // Save as processed to prevent possible duplicate calls from canonical ids\n          boolean display = NotificationBundleProcessor.shouldDisplay(jsonPayload.optString(\"alert\"));\n          if (!display)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY0OTQ0NA==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1137#discussion_r484649444", "bodyText": "Should have threadAndTaskWait(); or something here to wait for the timeout to fire.", "author": "jkasten2", "createdAt": "2020-09-08T04:55:29Z", "path": "OneSignalSDK/unittest/src/test/java/com/test/onesignal/GenerateNotificationRunner.java", "diffHunk": "@@ -1553,6 +1554,167 @@ public void notificationProcessing(Context context, OSNotificationReceived notif\n       }\n    }\n \n+   @Test\n+   @Config(shadows = { ShadowGenerateNotification.class })\n+   public void testNotificationProcessing_displayNotCalled() throws Exception {\n+      // 1. Setup correct notification extension service class\n+      startNotificationExtensionService(\"com.test.onesignal.GenerateNotificationRunner$\" +\n+              \"NotificationExtensionService_notificationProcessingDisplayNotCalled\");\n+\n+      // 2. Add app context and setup the established notification extension service\n+      OneSignal.setAppContext(ApplicationProvider.getApplicationContext());\n+      OneSignal_setupNotificationExtensionServiceClass();\n+\n+      // 3. Receive a notification\n+      Bundle bundle = getBaseNotifBundle();\n+      FCMBroadcastReceiver_processBundle(blankActivity, bundle);\n+      threadAndTaskWait();\n+\n+      // 4. Make sure service was called\n+      assertNotNull(lastNotificationReceived);\n+\n+      // 5. Make sure running on main thread check was not called, this is only called for showing the notification\n+      assertFalse(ShadowGenerateNotification.isRunningOnMainThreadCheckCalled());\n+\n+      // 6. Make sure 1 notification exists in DB\n+      assertNotificationDbRecords(1);\n+   }\n+\n+   @Test\n+   @Config(shadows = { ShadowGenerateNotification.class })\n+   public void testNotificationProcessingAndForegroundHandler_displayNotCalled_notCallsForegroundHandler() throws Exception {\n+      // 1. Setup correct notification extension service class\n+      startNotificationExtensionService(\"com.test.onesignal.GenerateNotificationRunner$\" +\n+              \"NotificationExtensionService_notificationProcessingDisplayNotCalled\");\n+\n+      // 2. Init OneSignal\n+      OneSignal.setAppId(\"b2f7f966-d8cc-11e4-bed1-df8f05be55ba\");\n+      OneSignal.setAppContext(blankActivity);\n+      OneSignal.setNotificationWillShowInForegroundHandler(new OneSignal.AppNotificationWillShowInForegroundHandler() {\n+         @Override\n+         public void notificationWillShowInForeground(OSNotificationGenerationJob.AppNotificationGenerationJob notificationJob) {\n+            lastAppNotificationJob = notificationJob;\n+            // Call complete to end without waiting default 30 second timeout\n+            notificationJob.complete();\n+         }\n+      });\n+      threadAndTaskWait();\n+\n+      blankActivityController.resume();\n+      threadAndTaskWait();\n+\n+      // 3. Receive a notification in foreground\n+      FCMBroadcastReceiver_processBundle(blankActivity, getBaseNotifBundle());\n+      threadAndTaskWait();\n+\n+      // 4. Make sure service was called\n+      assertNotNull(lastNotificationReceived);\n+\n+      // 5. Make sure running on main thread check was not called, this is only called for showing the notification\n+      assertFalse(ShadowGenerateNotification.isRunningOnMainThreadCheckCalled());\n+\n+      // 6. Make sure the AppNotificationJob is null\n+      assertNull(lastAppNotificationJob);\n+\n+      // 7. Make sure 1 notification exists in DB\n+      assertNotificationDbRecords(1);\n+   }\n+\n+   /**\n+    * @see #testNotificationProcessing_displayNotCalled\n+    * @see #testNotificationProcessingAndForegroundHandler_displayNotCalled_notCallsForegroundHandler\n+    */\n+   public static class NotificationExtensionService_notificationProcessingDisplayNotCalled implements OneSignal.NotificationProcessingHandler {\n+\n+      @Override\n+      public void notificationProcessing(Context context, OSNotificationReceived notification) {\n+         lastNotificationReceived = notification;\n+\n+         // No call display, this will avoid notification display\n+\n+         // Complete is called to end NotificationProcessingHandler\n+         notification.complete();\n+      }\n+   }\n+\n+   @Test\n+   @Config(shadows = { ShadowGenerateNotification.class })\n+   public void testNotificationProcessing_completeNotCalled() throws Exception {\n+      // 1. Setup correct notification extension service class\n+      startNotificationExtensionService(\"com.test.onesignal.GenerateNotificationRunner$\" +\n+              \"NotificationExtensionService_notificationProcessingCompleteNotCalled\");\n+\n+      // 2. Add app context and setup the established notification extension service\n+      OneSignal.setAppContext(ApplicationProvider.getApplicationContext());\n+      OneSignal_setupNotificationExtensionServiceClass();\n+\n+      // 3. Receive a notification\n+      Bundle bundle = getBaseNotifBundle();\n+      FCMBroadcastReceiver_processBundle(blankActivity, bundle);\n+      threadAndTaskWait();\n+\n+      // 4. Make sure service was called\n+      assertNotNull(lastNotificationReceived);\n+\n+      // 5. Make sure 1 notification exists in DB\n+      assertNotificationDbRecords(1);\n+   }\n+\n+   @Test\n+   @Config(shadows = { ShadowGenerateNotification.class })\n+   public void testNotificationProcessingAndForegroundHandler_completeNotCalled_callsForegroundHandler() throws Exception {\n+      // 1. Setup correct notification extension service class\n+      startNotificationExtensionService(\"com.test.onesignal.GenerateNotificationRunner$\" +\n+              \"NotificationExtensionService_notificationProcessingCompleteNotCalled\");\n+\n+      // 2. Init OneSignal\n+      OneSignal.setAppId(\"b2f7f966-d8cc-11e4-bed1-df8f05be55ba\");\n+      OneSignal.setAppContext(blankActivity);\n+      OneSignal.setNotificationWillShowInForegroundHandler(new OneSignal.AppNotificationWillShowInForegroundHandler() {\n+         @Override\n+         public void notificationWillShowInForeground(OSNotificationGenerationJob.AppNotificationGenerationJob notificationJob) {\n+            lastAppNotificationJob = notificationJob;\n+            // Call complete to end without waiting default 30 second timeout\n+            notificationJob.complete();\n+         }\n+      });\n+      threadAndTaskWait();\n+\n+      blankActivityController.resume();\n+      threadAndTaskWait();\n+\n+      // 3. Receive a notification in foreground\n+      FCMBroadcastReceiver_processBundle(blankActivity, getBaseNotifBundle());\n+      threadAndTaskWait();\n+\n+      // 4. Make sure service was called\n+      assertNotNull(lastNotificationReceived);\n+\n+      // 5. Make sure the AppNotificationJob is not null\n+      assertNotNull(lastAppNotificationJob);\n+      assertEquals(OneSignal.OSNotificationDisplay.NOTIFICATION, lastAppNotificationJob.getNotificationDisplayOption());\n+\n+      // 6. Make sure 1 notification exists in DB\n+      assertNotificationDbRecords(1);\n+   }\n+\n+   /**\n+    * @see #testNotificationProcessing_completeNotCalled\n+    * @see #testNotificationProcessingAndForegroundHandler_completeNotCalled_callsForegroundHandler\n+    */\n+   public static class NotificationExtensionService_notificationProcessingCompleteNotCalled implements OneSignal.NotificationProcessingHandler {\n+\n+      @Override\n+      public void notificationProcessing(Context context, OSNotificationReceived notification) {\n+         lastNotificationReceived = notification;\n+\n+         // Display called to show notification\n+         OSNotificationDisplayedResult notificationDisplayedResult = notification.display();\n+\n+         // Complete not called to end NotificationProcessingHandler, depend on timeout to finish", "originalCommit": "8dd567f83438bf6384f618c251c92cbd56f64d21", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAzOTc4NQ==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1137#discussion_r485039785", "bodyText": "We already have the\nFCMBroadcastReceiver_processBundle(blankActivity, getBaseNotifBundle());\nthreadAndTaskWait();\n\nthat threadAndTaskWait should cover the timeout fire \ud83e\udd14", "author": "Jeasmine", "createdAt": "2020-09-08T16:13:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY0OTQ0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEwMTU2Nw==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1137#discussion_r485101567", "bodyText": "ah sorry my bad, this is a class to be used by the two tests above. Ignore my comment here.", "author": "jkasten2", "createdAt": "2020-09-08T18:01:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY0OTQ0NA=="}], "type": "inlineReview", "revised_code": {"commit": "e547ce73ec005101ba107cb0b6f2a6f3e6ce0aee", "chunk": "diff --git a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/GenerateNotificationRunner.java b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/GenerateNotificationRunner.java\nindex 27193c36..daf02ee6 100644\n--- a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/GenerateNotificationRunner.java\n+++ b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/GenerateNotificationRunner.java\n\n@@ -1590,7 +1590,7 @@ public class GenerateNotificationRunner {\n       // 2. Init OneSignal\n       OneSignal.setAppId(\"b2f7f966-d8cc-11e4-bed1-df8f05be55ba\");\n       OneSignal.setAppContext(blankActivity);\n-      OneSignal.setNotificationWillShowInForegroundHandler(new OneSignal.AppNotificationWillShowInForegroundHandler() {\n+      OneSignal.setNotificationWillShowInForegroundHandler(new OneSignal.NotificationWillShowInForegroundHandler() {\n          @Override\n          public void notificationWillShowInForeground(OSNotificationGenerationJob.AppNotificationGenerationJob notificationJob) {\n             lastAppNotificationJob = notificationJob;\n"}}, {"oid": "dd385a8ce24c1e359ce82fab96d0acb826e0f541", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/dd385a8ce24c1e359ce82fab96d0acb826e0f541", "message": "Codereview comments", "committedDate": "2020-09-08T18:16:22Z", "type": "forcePushed"}, {"oid": "e547ce73ec005101ba107cb0b6f2a6f3e6ce0aee", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/e547ce73ec005101ba107cb0b6f2a6f3e6ce0aee", "message": "Avoid displaying notification if user not calls display()\n\n  * If display() is not called on notificationProcessing under NotificationProcessingHandler service, notification should not display and foreground handler should not be called.", "committedDate": "2020-09-08T18:31:45Z", "type": "commit"}, {"oid": "00eaea9c4126efdd332375b70b169ff4907d6369", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/00eaea9c4126efdd332375b70b169ff4907d6369", "message": "Set up NotificationProcessingHandler even if remote params or privacy consent is granted (#1138)\n\n* setupNotificationExtensionServiceClass method must be called even if remote params aren't called, in that way the user service callback is called\r\n  * If privacy consent isn't granted then subscription shouldn't happen then notifications will not arrive, because of that it is safe to init service even if we don't have remote params or privacy consent", "committedDate": "2020-09-08T18:31:45Z", "type": "commit"}, {"oid": "00eaea9c4126efdd332375b70b169ff4907d6369", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/00eaea9c4126efdd332375b70b169ff4907d6369", "message": "Set up NotificationProcessingHandler even if remote params or privacy consent is granted (#1138)\n\n* setupNotificationExtensionServiceClass method must be called even if remote params aren't called, in that way the user service callback is called\r\n  * If privacy consent isn't granted then subscription shouldn't happen then notifications will not arrive, because of that it is safe to init service even if we don't have remote params or privacy consent", "committedDate": "2020-09-08T18:31:45Z", "type": "forcePushed"}]}