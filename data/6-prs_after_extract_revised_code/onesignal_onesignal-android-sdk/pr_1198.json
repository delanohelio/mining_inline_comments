{"pr_number": 1198, "pr_title": "Fix on_focus not completing if app process is stopped", "pr_createdAt": "2020-10-27T19:02:16Z", "pr_url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1198", "timeline": [{"oid": "b5d59ffa9cf17394b9b2337858b3db20c78972fb", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/b5d59ffa9cf17394b9b2337858b3db20c78972fb", "message": "Schedule focus delay with service\n\n* Reuse OSBackgroundSync", "committedDate": "2020-10-27T21:14:36Z", "type": "forcePushed"}, {"oid": "83ecbb2a3b17a701eecdb42786bde9d2de52f1a3", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/83ecbb2a3b17a701eecdb42786bde9d2de52f1a3", "message": "Schedule focus delay with service\n\n* Reuse OSBackgroundSync", "committedDate": "2020-10-28T00:02:07Z", "type": "forcePushed"}, {"oid": "4df561c639135250c6ccc5ebcc2c46fcf955ae5a", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/4df561c639135250c6ccc5ebcc2c46fcf955ae5a", "message": "Schedule focus delay with service\n\n* Reuse OSBackgroundSync", "committedDate": "2020-10-28T00:12:18Z", "type": "forcePushed"}, {"oid": "11a83436878383d943b2a55ad73088b130456b1c", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/11a83436878383d943b2a55ad73088b130456b1c", "message": "Schedule focus delay with service\n\n* Reuse OSBackgroundSync", "committedDate": "2020-10-28T16:33:37Z", "type": "forcePushed"}, {"oid": "a009e76662bed2d55894e7d8ec7d026d0abc1d70", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/a009e76662bed2d55894e7d8ec7d026d0abc1d70", "message": "Schedule focus delay with service\n\n* Reuse OSBackgroundSync", "committedDate": "2020-10-28T21:12:09Z", "type": "forcePushed"}, {"oid": "b8489acac7069159e9d83ad3901793589cddfb85", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/b8489acac7069159e9d83ad3901793589cddfb85", "message": "Schedule focus delay with service\n\n* Reuse OSBackgroundSync", "committedDate": "2020-10-28T22:10:37Z", "type": "forcePushed"}, {"oid": "94135cc62d52e9a6361a85abd1add14529aaf343", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/94135cc62d52e9a6361a85abd1add14529aaf343", "message": "Schedule focus delay with service\n\n* Reuse OSBackgroundSync", "committedDate": "2020-10-28T22:28:58Z", "type": "forcePushed"}, {"oid": "94767756495a7039a1e02498b257f28e75128d29", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/94767756495a7039a1e02498b257f28e75128d29", "message": "Schedule focus delay with service\n\n* Focus delay was a postDelay that if the application ended before postDelay ran then on_focus schedule won't happen\n* Create OSFocusDelaySync and reuse OSBackgroundSync\n* Save unsent time and influences as fast as the user left the application\n* Create OSFocusTimeProcessorFactory for influence saving", "committedDate": "2020-10-29T04:13:34Z", "type": "forcePushed"}, {"oid": "b30392f4a02e1d8ae945177641c49a8fe8e9efd4", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/b30392f4a02e1d8ae945177641c49a8fe8e9efd4", "message": "Make an abstract class for SyncService common methods\n\n* We want to re-use SyncServiceUtils background sync methods", "committedDate": "2020-10-29T04:26:10Z", "type": "commit"}, {"oid": "396e9a90bc78adbeb930a258376b57cbe8ebfe5e", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/396e9a90bc78adbeb930a258376b57cbe8ebfe5e", "message": "Schedule focus delay with service\n\n* Focus delay was a postDelay that if the application ended before postDelay ran then on_focus schedule won't happen\n* Create OSFocusDelaySync and reuse OSBackgroundSync\n* Save unsent time and influences as fast as the user left the application\n* Create OSFocusTimeProcessorFactory for influence saving", "committedDate": "2020-10-29T04:26:24Z", "type": "forcePushed"}, {"oid": "8d433ec7b5d56ec4dea81050266c7dc9ca1d3a1a", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/8d433ec7b5d56ec4dea81050266c7dc9ca1d3a1a", "message": "Schedule focus delay with service\n\n* Focus delay was a postDelay that if the application ended before postDelay ran then on_focus schedule won't happen\n* Create OSFocusDelaySync and reuse OSBackgroundSync\n* Save unsent time and influences as fast as the user left the application\n* Create OSFocusTimeProcessorFactory for influence saving", "committedDate": "2020-10-29T04:31:56Z", "type": "forcePushed"}, {"oid": "94253513332f602d610c747f8ec6492712aa2176", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/94253513332f602d610c747f8ec6492712aa2176", "message": "Schedule focus delay with service\n\n* Focus delay was a postDelay that if the application ended before postDelay ran then on_focus schedule won't happen\n* Create OSFocusDelaySync and reuse OSBackgroundSync\n* Save unsent time and influences as fast as the user left the application\n* Create OSFocusTimeProcessorFactory for influence saving", "committedDate": "2020-10-29T04:34:35Z", "type": "forcePushed"}, {"oid": "00edd6369a3011f27f75dcafb01366873d77cbb5", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/00edd6369a3011f27f75dcafb01366873d77cbb5", "message": "Schedule focus delay with service\n\n* Focus delay was a postDelay that if the application ended before postDelay ran then on_focus schedule won't happen\n* Create OSFocusDelaySync and reuse OSBackgroundSync\n* Save unsent time and influences as fast as the user left the application\n* Create OSFocusTimeProcessorFactory to get proper processor from influences", "committedDate": "2020-10-29T04:37:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyOTkzMA==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1198#discussion_r514629930", "bodyText": "We don't want this to be a public method, it should only be called internally by the SDK.", "author": "jkasten2", "createdAt": "2020-10-29T23:46:06Z", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java", "diffHunk": "@@ -316,6 +316,10 @@ static boolean isInitDone() {\n    static boolean isInForeground() {\n       return inForeground;\n    }\n+   public static void setInForeground(boolean inForeground) {", "originalCommit": "00edd6369a3011f27f75dcafb01366873d77cbb5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNTM5MQ==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1198#discussion_r514635391", "bodyText": "good catch! this was actually only for debugging", "author": "Jeasmine", "createdAt": "2020-10-30T00:04:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyOTkzMA=="}], "type": "inlineReview", "revised_code": {"commit": "9a1129ea9dc4e4e953101ea579d9bb6f56fc5292", "chunk": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\nindex 0eab6b74..1c025035 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n\n@@ -316,9 +316,8 @@ public class OneSignal {\n    static boolean isInForeground() {\n       return inForeground;\n    }\n-   public static void setInForeground(boolean inForeground) {\n+   static void setInForeground(boolean inForeground) {\n       OneSignal.inForeground = inForeground;\n-      logger.debug(\"Foreground set to: \" + inForeground);\n    }\n \n    // Tells the action taken to enter the app\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzMTIwOA==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1198#discussion_r514631208", "bodyText": "\ud83d\udc4d Nice helper!\nIt was a lot of line changes, would be nice in the future if this it was its own commit. That way it is easier to review the other changes in smaller chunks.", "author": "jkasten2", "createdAt": "2020-10-29T23:50:13Z", "path": "OneSignalSDK/unittest/src/test/java/com/test/onesignal/TestHelpers.java", "diffHunk": "@@ -499,26 +503,97 @@ public static void assertMainThread() {\n          Assert.fail(\"assertMainThread - Not running on main thread when expected to!\");\n    }\n \n-\n+   static void stopJobs() throws Exception {\n+      JobScheduler jobScheduler =\n+              (JobScheduler) ApplicationProvider.getApplicationContext().getSystemService(Context.JOB_SCHEDULER_SERVICE);\n+      if (jobScheduler != null) {\n+         List<JobInfo> jobs = jobScheduler.getAllPendingJobs();\n+         for (JobInfo jobInfo : jobs) {\n+            stopJob(jobInfo);\n+            threadAndTaskWait();\n+         }\n+      }\n+   }\n    public static @Nullable JobInfo getNextJob() {\n+      return getJob(0);\n+   }\n+\n+   private static @Nullable JobInfo getJob(int index) {\n       JobScheduler jobScheduler =\n-         (JobScheduler)ApplicationProvider.getApplicationContext().getSystemService(Context.JOB_SCHEDULER_SERVICE);\n+              (JobScheduler)ApplicationProvider.getApplicationContext().getSystemService(Context.JOB_SCHEDULER_SERVICE);\n       List<JobInfo> jobs = jobScheduler.getAllPendingJobs();\n-      if (jobs.size() == 0)\n+      if (jobs.size() == 0 || jobs.size() <= index)\n          return null;\n-      return jobs.get(0);\n+      else\n+         return jobs.get(index);\n    }\n \n    public static void runNextJob() {\n       try {\n          Class jobClass = Class.forName(getNextJob().getService().getClassName());\n-         JobService jobService = (JobService)Robolectric.buildService(jobClass).create().get();\n-         jobService.onStartJob(null);\n+         runJob(jobClass);\n       } catch (ClassNotFoundException e) {\n          e.printStackTrace();\n       }\n    }\n \n+   public static void runJob(Class jobClass) {\n+      JobService jobService = (JobService) Robolectric.buildService(jobClass).create().get();\n+      jobService.onStartJob(null);\n+   }\n+\n+   public static void stopJob(JobInfo jobInfo) {\n+      try {\n+         Class jobClass = Class.forName(jobInfo.getService().getClassName());\n+         JobService jobService = (JobService) Robolectric.buildService(jobClass).create().get();\n+         jobService.jobFinished(null, false);\n+      } catch (ClassNotFoundException e) {\n+         e.printStackTrace();\n+      }\n+   }\n+\n+   public static void assertNumberOfServicesAvailable(int quantity) {\n+      JobScheduler jobScheduler =\n+              (JobScheduler)ApplicationProvider.getApplicationContext().getSystemService(Context.JOB_SCHEDULER_SERVICE);\n+      List<JobInfo> jobs = jobScheduler.getAllPendingJobs();\n+      assertEquals(quantity, jobs.size());\n+   }\n+\n+   public static void assertAndRunNextJob(Class jobClass) {\n+      assertNumberOfServicesAvailable(1);\n+      assertNextJob(jobClass);\n+      runNextJob();\n+   }\n+\n+   public static void assertAndRunJobAtIndex(Class jobClass, int index) {\n+      assertNextJob(jobClass, index);\n+      runJob(jobClass);\n+   }\n+\n+   public static void assertNextJob(Class jobClass) {\n+      assertNextJob(jobClass, 0);\n+   }\n+\n+   public static void assertNextJob(Class jobClass, int index) {\n+      assertEquals(jobClass.getName(), getJob(index).getService().getClassName());\n+   }\n+\n+   public static void pauseActivity(ActivityController activityController) throws Exception {", "originalCommit": "00edd6369a3011f27f75dcafb01366873d77cbb5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "9a1129ea9dc4e4e953101ea579d9bb6f56fc5292", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/9a1129ea9dc4e4e953101ea579d9bb6f56fc5292", "message": "Schedule focus delay with service\n\n* Focus delay was a postDelay that if the application ended before postDelay ran then on_focus schedule won't happen\n* Create OSFocusDelaySync and reuse OSBackgroundSync\n* Save unsent time and influences as fast as the user left the application\n* Create OSFocusTimeProcessorFactory to get proper processor from influences", "committedDate": "2020-11-04T15:28:34Z", "type": "commit"}, {"oid": "9a1129ea9dc4e4e953101ea579d9bb6f56fc5292", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/9a1129ea9dc4e4e953101ea579d9bb6f56fc5292", "message": "Schedule focus delay with service\n\n* Focus delay was a postDelay that if the application ended before postDelay ran then on_focus schedule won't happen\n* Create OSFocusDelaySync and reuse OSBackgroundSync\n* Save unsent time and influences as fast as the user left the application\n* Create OSFocusTimeProcessorFactory to get proper processor from influences", "committedDate": "2020-11-04T15:28:34Z", "type": "forcePushed"}]}