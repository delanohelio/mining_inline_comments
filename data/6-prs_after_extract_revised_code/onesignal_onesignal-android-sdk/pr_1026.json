{"pr_number": 1026, "pr_title": "HMS device_type detection and HMS token registration ", "pr_createdAt": "2020-05-21T02:04:01Z", "pr_url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1026", "timeline": [{"oid": "1c6b45472b1d80cdd2dddc5e51f1f67eb193b259", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/1c6b45472b1d80cdd2dddc5e51f1f67eb193b259", "message": "Added getDeviceType tests", "committedDate": "2020-05-28T04:24:33Z", "type": "forcePushed"}, {"oid": "35b7ededd88f3b4bc6fb7ce6d9b9f81d8e1c408e", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/35b7ededd88f3b4bc6fb7ce6d9b9f81d8e1c408e", "message": "Added getDeviceType tests", "committedDate": "2020-05-28T04:37:27Z", "type": "forcePushed"}, {"oid": "88a9573b67a007df0850df0102ec94f723a07059", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/88a9573b67a007df0850df0102ec94f723a07059", "message": "Added tests for PushRegistratorHMS", "committedDate": "2020-05-28T09:29:39Z", "type": "forcePushed"}, {"oid": "d46eb631a9017436360895e51e2a42ce91cc2d2a", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/d46eb631a9017436360895e51e2a42ce91cc2d2a", "message": "Added tests for PushRegistratorHMS", "committedDate": "2020-05-28T09:31:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQzNzYxOQ==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1026#discussion_r433437619", "bodyText": "Convert ShowUpdateGPSDialog to lowercase first letter?\nshowUpdateGPSDialog", "author": "mikechoch", "createdAt": "2020-06-01T19:19:47Z", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/GooglePlayServicesUpgradePrompt.java", "diffHunk": "@@ -39,7 +28,7 @@ private static boolean isGooglePlayStoreInstalled() {\n    }\n \n    static void ShowUpdateGPSDialog() {", "originalCommit": "d46eb631a9017436360895e51e2a42ce91cc2d2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY5OTc4MQ==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1026#discussion_r435699781", "bodyText": "\ud83d\udc4d Good catch, might as well clean this up while in here", "author": "jkasten2", "createdAt": "2020-06-05T05:38:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQzNzYxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "5c2ca10d73f6ae97d9d7d4c02d6177c33098bf9a", "chunk": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/GooglePlayServicesUpgradePrompt.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/GooglePlayServicesUpgradePrompt.java\nindex b7d3550c..20117d75 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/GooglePlayServicesUpgradePrompt.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/GooglePlayServicesUpgradePrompt.java\n\n@@ -27,8 +27,8 @@ class GooglePlayServicesUpgradePrompt {\n       return false;\n    }\n \n-   static void ShowUpdateGPSDialog() {\n-      if (new OSUtils().getDeviceType() != UserState.DEVICE_TYPE_ANDROID || !isGooglePlayStoreInstalled())\n+   static void showUpdateGPSDialog() {\n+      if (!OSUtils.isAndroidDeviceType() || !isGooglePlayStoreInstalled())\n          return;\n \n       boolean userSelectedSkip =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQzODQyOA==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1026#discussion_r433438428", "bodyText": "Maybe we can refactor something along these lines across the codebase?\nUserState deviceType = new OSUtils().getDeviceType();\nif (!deviceType.isAndroidDevice() || !isGooglePlayStoreInstalled())\n\nThis would make the getDeviceType() return UserState instead of int though\nSeems a bit out of scope for this but thought I would bring it up\nSo maybe...?\nint deviceType = new OSUtils().getDeviceType();\nif (deviceType != UserState.DEVICE_TYPE_ANDROID || !isGooglePlayStoreInstalled())", "author": "mikechoch", "createdAt": "2020-06-01T19:21:26Z", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/GooglePlayServicesUpgradePrompt.java", "diffHunk": "@@ -39,7 +28,7 @@ private static boolean isGooglePlayStoreInstalled() {\n    }\n \n    static void ShowUpdateGPSDialog() {\n-      if (isGMSInstalledAndEnabled() || !isGooglePlayStoreInstalled())\n+      if (new OSUtils().getDeviceType() != UserState.DEVICE_TYPE_ANDROID || !isGooglePlayStoreInstalled())", "originalCommit": "d46eb631a9017436360895e51e2a42ce91cc2d2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU2MDc2Mw==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1026#discussion_r433560763", "bodyText": "Uhm maybe have on OSUtils a method\nboolean isAndroidDevice(){\nreturn getDeviceType() == UserState.DEVICE_TYPE_ANDROID;\n}\nif that make sense", "author": "Jeasmine", "createdAt": "2020-06-02T00:41:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQzODQyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTY5OTI1MQ==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1026#discussion_r435699251", "bodyText": "@Jeasmine I like your suggestion to clean this up. Using this definition which is static and includes DeviceType in the name for completeness.\n   static boolean isAndroidDeviceType() {\n      return new OSUtils().getDeviceType() == UserState.DEVICE_TYPE_ANDROID;\n   }", "author": "jkasten2", "createdAt": "2020-06-05T05:36:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQzODQyOA=="}], "type": "inlineReview", "revised_code": {"commit": "5c2ca10d73f6ae97d9d7d4c02d6177c33098bf9a", "chunk": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/GooglePlayServicesUpgradePrompt.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/GooglePlayServicesUpgradePrompt.java\nindex b7d3550c..20117d75 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/GooglePlayServicesUpgradePrompt.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/GooglePlayServicesUpgradePrompt.java\n\n@@ -27,8 +27,8 @@ class GooglePlayServicesUpgradePrompt {\n       return false;\n    }\n \n-   static void ShowUpdateGPSDialog() {\n-      if (new OSUtils().getDeviceType() != UserState.DEVICE_TYPE_ANDROID || !isGooglePlayStoreInstalled())\n+   static void showUpdateGPSDialog() {\n+      if (!OSUtils.isAndroidDeviceType() || !isGooglePlayStoreInstalled())\n          return;\n \n       boolean userSelectedSkip =\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ0NDU3MA==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1026#discussion_r433444570", "bodyText": "Just an overall comment for these UnitTests, maybe we should offer some steps explaining what each line truly means or create more specific test names.\nThis one is a good example and offers clarity\nsupportsFCMAndADM_PreferADM\nbut even could be testDevice_withFCMAndADMSupport_prefersADM\nhowever, this one\nsupportedHMS_isHuawei\ncould be\ntestDevice_withHMSSupport_prefersHMS\nI'm probably being to critical though since it only took me a few seconds to figure out the pattern here. I guess this could stay the same since I recognized the consistent pattern, but wanted to bring it up to see what you thought.", "author": "mikechoch", "createdAt": "2020-06-01T19:33:19Z", "path": "OneSignalSDK/unittest/src/test/java/com/test/onesignal/DeviceTypeTestsRunner.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.test.onesignal;\r\n+\r\n+import com.onesignal.OneSignal;\r\n+import com.onesignal.ShadowOSUtils;\r\n+import com.onesignal.StaticResetHelper;\r\n+\r\n+import org.junit.Before;\r\n+import org.junit.BeforeClass;\r\n+import org.junit.Test;\r\n+import org.junit.runner.RunWith;\r\n+import org.robolectric.RobolectricTestRunner;\r\n+import org.robolectric.RuntimeEnvironment;\r\n+import org.robolectric.annotation.Config;\r\n+import org.robolectric.shadows.ShadowLog;\r\n+\r\n+import static com.onesignal.OneSignalPackagePrivateHelper.UserState.DEVICE_TYPE_ANDROID;\r\n+import static com.onesignal.OneSignalPackagePrivateHelper.UserState.DEVICE_TYPE_HUAWEI;\r\n+import static com.onesignal.OneSignalPackagePrivateHelper.UserState.DEVICE_TYPE_FIREOS;\r\n+import static com.onesignal.OneSignalPackagePrivateHelper.getDeviceType;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+@Config(\r\n+    packageName = \"com.onesignal.example\",\r\n+    shadows = {\r\n+        ShadowOSUtils.class\r\n+    },\r\n+    sdk = 26\r\n+)\r\n+@RunWith(RobolectricTestRunner.class)\r\n+public class DeviceTypeTestsRunner {\r\n+\r\n+    @BeforeClass // Runs only once, before any tests\r\n+    public static void setUpClass() throws Exception {\r\n+        ShadowLog.stream = System.out;\r\n+        TestHelpers.beforeTestSuite();\r\n+        StaticResetHelper.saveStaticValues();\r\n+    }\r\n+\r\n+    @Before\r\n+    public void beforeEachTest() throws Exception {\r\n+        TestHelpers.beforeTestInitAndCleanup();\r\n+        OneSignal.setAppContext(RuntimeEnvironment.application);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void noAvailablePushChannels_defaultsToAndroid() {\r\n+        assertEquals(DEVICE_TYPE_ANDROID, getDeviceType());\r\n+    }\r\n+\r\n+    @Test\r\n+    public void onlyADM_isFireOS() {\r\n+        ShadowOSUtils.supportsADM = true;\r\n+        assertEquals(DEVICE_TYPE_FIREOS, getDeviceType());\r\n+    }\r\n+\r\n+    @Test\r\n+    public void onlyFCM_isAndroid() {\r\n+        ShadowOSUtils.hasFCMLibrary = true;\r\n+        assertEquals(DEVICE_TYPE_ANDROID, getDeviceType());\r\n+    }\r\n+\r\n+    @Test\r\n+    public void FCMAndGMSEnabled_isAndroid() {\r\n+        ShadowOSUtils.isGMSInstalledAndEnabled = true;\r\n+        ShadowOSUtils.hasFCMLibrary = true;\r\n+        assertEquals(DEVICE_TYPE_ANDROID, getDeviceType());\r\n+    }\r\n+\r\n+    @Test\r\n+    public void onlyGCM_isAndroid() {\r\n+        ShadowOSUtils.hasGCMLibrary = true;\r\n+        assertEquals(DEVICE_TYPE_ANDROID, getDeviceType());\r\n+    }\r\n+\r\n+    @Test\r\n+    public void GCMAndGMSEnabled_isAndroid() {\r\n+        ShadowOSUtils.isGMSInstalledAndEnabled = true;\r\n+        ShadowOSUtils.hasGCMLibrary = true;\r\n+        assertEquals(DEVICE_TYPE_ANDROID, getDeviceType());\r\n+    }\r\n+\r\n+    @Test\r\n+    public void supportedHMS_isHuawei() {\r\n+        ShadowOSUtils.isHMSCoreInstalledAndEnabled = true;\r\n+        ShadowOSUtils.hasHMSAvailability = true;\r\n+        ShadowOSUtils.hasHMSPushKitLibrary = true;\r\n+\r\n+        assertEquals(DEVICE_TYPE_HUAWEI, getDeviceType());\r\n+    }\r\n+\r\n+    @Test\r\n+    public void supportsFCMAndHMS_PreferAndroid() {\r\n+        ShadowOSUtils.isGMSInstalledAndEnabled = true;\r\n+        ShadowOSUtils.hasFCMLibrary = true;\r\n+\r\n+        ShadowOSUtils.isHMSCoreInstalledAndEnabled = true;\r\n+        ShadowOSUtils.hasHMSAvailability = true;\r\n+        ShadowOSUtils.hasHMSPushKitLibrary = true;\r\n+\r\n+        // Prefer Google Services over Huawei if both available\r\n+        assertEquals(DEVICE_TYPE_ANDROID, getDeviceType());\r\n+    }\r\n+\r\n+    @Test\r\n+    public void hasFCMButNoGMSOnDeviceAndHasHMS_isHuawei() {\r\n+        ShadowOSUtils.isGMSInstalledAndEnabled = false;\r\n+        ShadowOSUtils.hasFCMLibrary = true;\r\n+\r\n+        ShadowOSUtils.isHMSCoreInstalledAndEnabled = true;\r\n+        ShadowOSUtils.hasHMSAvailability = true;\r\n+        ShadowOSUtils.hasHMSPushKitLibrary = true;\r\n+\r\n+        // Use HMS since device does not have the \"Google Play services\" app or it is disabled\r\n+        assertEquals(DEVICE_TYPE_HUAWEI, getDeviceType());\r\n+    }\r\n+\r\n+    @Test\r\n+    public void supportsFCMAndADM_PreferADM() {\r\n+        ShadowOSUtils.isGMSInstalledAndEnabled = true;\r\n+        ShadowOSUtils.hasFCMLibrary = true;\r\n+\r\n+        ShadowOSUtils.supportsADM = true;\r\n+\r\n+        // Prefer ADM as if available it will always be native to the device\r\n+        assertEquals(DEVICE_TYPE_FIREOS, getDeviceType());\r\n+    }\r\n+}\r", "originalCommit": "d46eb631a9017436360895e51e2a42ce91cc2d2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcwMjcyMA==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1026#discussion_r435702720", "bodyText": "Adding testDevice_ seems reducend if prefixing each test with it.\nThe pattern I was going for was state_expectedResult.\nI agree that we should narrow down a naming pattern, since the scope of this problem is limited to HMS only lets defer", "author": "jkasten2", "createdAt": "2020-06-05T05:49:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ0NDU3MA=="}], "type": "inlineReview", "revised_code": {"commit": "d2c93bb087e96e29f5e973770eb817b5b4be88b2", "chunk": "diff --git a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/DeviceTypeTestsRunner.java b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/DeviceTypeTestsRunner.java\ndeleted file mode 100644\nindex 693ab248..00000000\n--- a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/DeviceTypeTestsRunner.java\n+++ /dev/null\n\n@@ -1,128 +0,0 @@\n-package com.test.onesignal;\n-\n-import com.onesignal.OneSignal;\n-import com.onesignal.ShadowOSUtils;\n-import com.onesignal.StaticResetHelper;\n-\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.robolectric.RobolectricTestRunner;\n-import org.robolectric.RuntimeEnvironment;\n-import org.robolectric.annotation.Config;\n-import org.robolectric.shadows.ShadowLog;\n-\n-import static com.onesignal.OneSignalPackagePrivateHelper.UserState.DEVICE_TYPE_ANDROID;\n-import static com.onesignal.OneSignalPackagePrivateHelper.UserState.DEVICE_TYPE_HUAWEI;\n-import static com.onesignal.OneSignalPackagePrivateHelper.UserState.DEVICE_TYPE_FIREOS;\n-import static com.onesignal.OneSignalPackagePrivateHelper.getDeviceType;\n-\n-import static org.junit.Assert.assertEquals;\n-\n-@Config(\n-    packageName = \"com.onesignal.example\",\n-    shadows = {\n-        ShadowOSUtils.class\n-    },\n-    sdk = 26\n-)\n-@RunWith(RobolectricTestRunner.class)\n-public class DeviceTypeTestsRunner {\n-\n-    @BeforeClass // Runs only once, before any tests\n-    public static void setUpClass() throws Exception {\n-        ShadowLog.stream = System.out;\n-        TestHelpers.beforeTestSuite();\n-        StaticResetHelper.saveStaticValues();\n-    }\n-\n-    @Before\n-    public void beforeEachTest() throws Exception {\n-        TestHelpers.beforeTestInitAndCleanup();\n-        OneSignal.setAppContext(RuntimeEnvironment.application);\n-    }\n-\n-    @Test\n-    public void noAvailablePushChannels_defaultsToAndroid() {\n-        assertEquals(DEVICE_TYPE_ANDROID, getDeviceType());\n-    }\n-\n-    @Test\n-    public void onlyADM_isFireOS() {\n-        ShadowOSUtils.supportsADM = true;\n-        assertEquals(DEVICE_TYPE_FIREOS, getDeviceType());\n-    }\n-\n-    @Test\n-    public void onlyFCM_isAndroid() {\n-        ShadowOSUtils.hasFCMLibrary = true;\n-        assertEquals(DEVICE_TYPE_ANDROID, getDeviceType());\n-    }\n-\n-    @Test\n-    public void FCMAndGMSEnabled_isAndroid() {\n-        ShadowOSUtils.isGMSInstalledAndEnabled = true;\n-        ShadowOSUtils.hasFCMLibrary = true;\n-        assertEquals(DEVICE_TYPE_ANDROID, getDeviceType());\n-    }\n-\n-    @Test\n-    public void onlyGCM_isAndroid() {\n-        ShadowOSUtils.hasGCMLibrary = true;\n-        assertEquals(DEVICE_TYPE_ANDROID, getDeviceType());\n-    }\n-\n-    @Test\n-    public void GCMAndGMSEnabled_isAndroid() {\n-        ShadowOSUtils.isGMSInstalledAndEnabled = true;\n-        ShadowOSUtils.hasGCMLibrary = true;\n-        assertEquals(DEVICE_TYPE_ANDROID, getDeviceType());\n-    }\n-\n-    @Test\n-    public void supportedHMS_isHuawei() {\n-        ShadowOSUtils.isHMSCoreInstalledAndEnabled = true;\n-        ShadowOSUtils.hasHMSAvailability = true;\n-        ShadowOSUtils.hasHMSPushKitLibrary = true;\n-\n-        assertEquals(DEVICE_TYPE_HUAWEI, getDeviceType());\n-    }\n-\n-    @Test\n-    public void supportsFCMAndHMS_PreferAndroid() {\n-        ShadowOSUtils.isGMSInstalledAndEnabled = true;\n-        ShadowOSUtils.hasFCMLibrary = true;\n-\n-        ShadowOSUtils.isHMSCoreInstalledAndEnabled = true;\n-        ShadowOSUtils.hasHMSAvailability = true;\n-        ShadowOSUtils.hasHMSPushKitLibrary = true;\n-\n-        // Prefer Google Services over Huawei if both available\n-        assertEquals(DEVICE_TYPE_ANDROID, getDeviceType());\n-    }\n-\n-    @Test\n-    public void hasFCMButNoGMSOnDeviceAndHasHMS_isHuawei() {\n-        ShadowOSUtils.isGMSInstalledAndEnabled = false;\n-        ShadowOSUtils.hasFCMLibrary = true;\n-\n-        ShadowOSUtils.isHMSCoreInstalledAndEnabled = true;\n-        ShadowOSUtils.hasHMSAvailability = true;\n-        ShadowOSUtils.hasHMSPushKitLibrary = true;\n-\n-        // Use HMS since device does not have the \"Google Play services\" app or it is disabled\n-        assertEquals(DEVICE_TYPE_HUAWEI, getDeviceType());\n-    }\n-\n-    @Test\n-    public void supportsFCMAndADM_PreferADM() {\n-        ShadowOSUtils.isGMSInstalledAndEnabled = true;\n-        ShadowOSUtils.hasFCMLibrary = true;\n-\n-        ShadowOSUtils.supportsADM = true;\n-\n-        // Prefer ADM as if available it will always be native to the device\n-        assertEquals(DEVICE_TYPE_FIREOS, getDeviceType());\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ0NTYyOQ==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1026#discussion_r433445629", "bodyText": "Should we throw these Assert helpers inside another class like JsonAsserts and RestClientAsserts\nmaybe DeviceTypeAsserts?", "author": "mikechoch", "createdAt": "2020-06-01T19:35:36Z", "path": "OneSignalSDK/unittest/src/test/java/com/test/onesignal/PushRegistratorHMSIntegrationTestsRunner.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.test.onesignal;\r\n+\r\n+import android.annotation.SuppressLint;\r\n+import android.app.Activity;\r\n+\r\n+import com.huawei.hms.common.ApiException;\r\n+import com.huawei.hms.support.api.client.Status;\r\n+import com.onesignal.InAppMessagingHelpers;\r\n+import com.onesignal.OneSignal;\r\n+import static com.onesignal.OneSignalPackagePrivateHelper.UserState.PUSH_STATUS_HMS_TOKEN_TIMEOUT;\r\n+import static com.onesignal.OneSignalPackagePrivateHelper.UserState.PUSH_STATUS_HMS_API_EXCEPTION_OTHER;\r\n+import com.onesignal.ShadowCustomTabsClient;\r\n+import com.onesignal.ShadowCustomTabsSession;\r\n+import com.onesignal.ShadowHmsInstanceId;\r\n+import com.onesignal.ShadowOSUtils;\r\n+import com.onesignal.ShadowOneSignalRestClient;\r\n+import com.onesignal.ShadowPushRegistratorHMS;\r\n+import com.onesignal.StaticResetHelper;\r\n+import com.onesignal.example.BlankActivity;\r\n+\r\n+import org.json.JSONException;\r\n+import org.junit.Before;\r\n+import org.junit.BeforeClass;\r\n+import org.junit.Test;\r\n+import org.junit.runner.RunWith;\r\n+import org.robolectric.Robolectric;\r\n+import org.robolectric.RobolectricTestRunner;\r\n+import org.robolectric.android.controller.ActivityController;\r\n+import org.robolectric.annotation.Config;\r\n+import org.robolectric.shadows.ShadowLog;\r\n+\r\n+import static com.test.onesignal.RestClientAsserts.assertHuaweiPlayerCreateAtIndex;\r\n+import static com.test.onesignal.RestClientAsserts.assertPlayerCreateNotSubscribedAtIndex;\r\n+import static com.test.onesignal.RestClientAsserts.assertPlayerCreateSubscribedAtIndex;\r\n+import static com.test.onesignal.RestClientAsserts.assertPlayerCreateWithNotificationTypesAtIndex;\r\n+import static com.test.onesignal.RestClientAsserts.assertRestCalls;\r\n+import static com.test.onesignal.TestHelpers.threadAndTaskWait;\r\n+\r\n+@Config(\r\n+    packageName = \"com.onesignal.example\",\r\n+    shadows = {\r\n+        ShadowOSUtils.class,\r\n+        ShadowOneSignalRestClient.class,\r\n+        ShadowCustomTabsClient.class,\r\n+        ShadowCustomTabsSession.class,\r\n+        ShadowHmsInstanceId.class,\r\n+        ShadowPushRegistratorHMS.class\r\n+    },\r\n+    sdk = 26\r\n+)\r\n+@RunWith(RobolectricTestRunner.class)\r\n+public class PushRegistratorHMSIntegrationTestsRunner {\r\n+\r\n+    @SuppressLint(\"StaticFieldLeak\")\r\n+    private static Activity blankActivity;\r\n+    private static ActivityController<BlankActivity> blankActivityController;\r\n+\r\n+    @BeforeClass // Runs only once, before any tests\r\n+    public static void setUpClass() throws Exception {\r\n+        ShadowLog.stream = System.out;\r\n+        TestHelpers.beforeTestSuite();\r\n+        StaticResetHelper.saveStaticValues();\r\n+    }\r\n+\r\n+    @Before\r\n+    public void beforeEachTest() throws Exception {\r\n+        TestHelpers.beforeTestInitAndCleanup();\r\n+\r\n+        ShadowOSUtils.supportsHMS(true);\r\n+\r\n+        blankActivityController = Robolectric.buildActivity(BlankActivity.class).create();\r\n+        blankActivity = blankActivityController.get();\r\n+    }\r\n+\r\n+    private static void assertHuaweiSubscribe() throws JSONException {\r", "originalCommit": "d46eb631a9017436360895e51e2a42ce91cc2d2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcwNDI3OQ==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1026#discussion_r435704279", "bodyText": "It could go into RestClientAsserts, however it does include assertRestCalls(2); which is very specific to the UnitTest in this class.\nA method code be added to RestClientAsserts that includes these two lines, but since this probably won't be used in any other test classes I think it best to leave as is.\nassertHuaweiPlayerCreateAtIndex(1);\nassertPlayerCreateSubscribedAtIndex(1);", "author": "jkasten2", "createdAt": "2020-06-05T05:54:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ0NTYyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "d2c93bb087e96e29f5e973770eb817b5b4be88b2", "chunk": "diff --git a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/PushRegistratorHMSIntegrationTestsRunner.java b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/PushRegistratorHMSIntegrationTestsRunner.java\ndeleted file mode 100644\nindex 8e443007..00000000\n--- a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/PushRegistratorHMSIntegrationTestsRunner.java\n+++ /dev/null\n\n@@ -1,128 +0,0 @@\n-package com.test.onesignal;\n-\n-import android.annotation.SuppressLint;\n-import android.app.Activity;\n-\n-import com.huawei.hms.common.ApiException;\n-import com.huawei.hms.support.api.client.Status;\n-import com.onesignal.InAppMessagingHelpers;\n-import com.onesignal.OneSignal;\n-import static com.onesignal.OneSignalPackagePrivateHelper.UserState.PUSH_STATUS_HMS_TOKEN_TIMEOUT;\n-import static com.onesignal.OneSignalPackagePrivateHelper.UserState.PUSH_STATUS_HMS_API_EXCEPTION_OTHER;\n-import com.onesignal.ShadowCustomTabsClient;\n-import com.onesignal.ShadowCustomTabsSession;\n-import com.onesignal.ShadowHmsInstanceId;\n-import com.onesignal.ShadowOSUtils;\n-import com.onesignal.ShadowOneSignalRestClient;\n-import com.onesignal.ShadowPushRegistratorHMS;\n-import com.onesignal.StaticResetHelper;\n-import com.onesignal.example.BlankActivity;\n-\n-import org.json.JSONException;\n-import org.junit.Before;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.robolectric.Robolectric;\n-import org.robolectric.RobolectricTestRunner;\n-import org.robolectric.android.controller.ActivityController;\n-import org.robolectric.annotation.Config;\n-import org.robolectric.shadows.ShadowLog;\n-\n-import static com.test.onesignal.RestClientAsserts.assertHuaweiPlayerCreateAtIndex;\n-import static com.test.onesignal.RestClientAsserts.assertPlayerCreateNotSubscribedAtIndex;\n-import static com.test.onesignal.RestClientAsserts.assertPlayerCreateSubscribedAtIndex;\n-import static com.test.onesignal.RestClientAsserts.assertPlayerCreateWithNotificationTypesAtIndex;\n-import static com.test.onesignal.RestClientAsserts.assertRestCalls;\n-import static com.test.onesignal.TestHelpers.threadAndTaskWait;\n-\n-@Config(\n-    packageName = \"com.onesignal.example\",\n-    shadows = {\n-        ShadowOSUtils.class,\n-        ShadowOneSignalRestClient.class,\n-        ShadowCustomTabsClient.class,\n-        ShadowCustomTabsSession.class,\n-        ShadowHmsInstanceId.class,\n-        ShadowPushRegistratorHMS.class\n-    },\n-    sdk = 26\n-)\n-@RunWith(RobolectricTestRunner.class)\n-public class PushRegistratorHMSIntegrationTestsRunner {\n-\n-    @SuppressLint(\"StaticFieldLeak\")\n-    private static Activity blankActivity;\n-    private static ActivityController<BlankActivity> blankActivityController;\n-\n-    @BeforeClass // Runs only once, before any tests\n-    public static void setUpClass() throws Exception {\n-        ShadowLog.stream = System.out;\n-        TestHelpers.beforeTestSuite();\n-        StaticResetHelper.saveStaticValues();\n-    }\n-\n-    @Before\n-    public void beforeEachTest() throws Exception {\n-        TestHelpers.beforeTestInitAndCleanup();\n-\n-        ShadowOSUtils.supportsHMS(true);\n-\n-        blankActivityController = Robolectric.buildActivity(BlankActivity.class).create();\n-        blankActivity = blankActivityController.get();\n-    }\n-\n-    private static void assertHuaweiSubscribe() throws JSONException {\n-        assertHuaweiPlayerCreateAtIndex(1);\n-        assertPlayerCreateSubscribedAtIndex(1);\n-        assertRestCalls(2);\n-    }\n-\n-    private static void assertHuaweiUnsubscribeWithError(int notification_types) throws JSONException {\n-        assertHuaweiPlayerCreateAtIndex(1);\n-        assertPlayerCreateNotSubscribedAtIndex(1);\n-        assertPlayerCreateWithNotificationTypesAtIndex(notification_types, 1);\n-        assertRestCalls(2);\n-    }\n-\n-    private void OneSignalInit() throws Exception {\n-        OneSignal.setLogLevel(OneSignal.LOG_LEVEL.VERBOSE, OneSignal.LOG_LEVEL.NONE);\n-        OneSignal.init(blankActivity, \"123456789\", InAppMessagingHelpers.ONESIGNAL_APP_ID);\n-        blankActivityController.resume();\n-        threadAndTaskWait();\n-    }\n-\n-    @Test\n-    public void successfulHMS_shouldRegisterSubscribed() throws Exception {\n-        OneSignalInit();\n-        assertHuaweiSubscribe();\n-    }\n-\n-    @Test\n-    public void HMSTimeout_shouldRegisterUnsubscribed() throws Exception {\n-        ShadowHmsInstanceId.token = null;\n-        OneSignalInit();\n-\n-        assertHuaweiUnsubscribeWithError(PUSH_STATUS_HMS_TOKEN_TIMEOUT);\n-    }\n-\n-    @Test\n-    public void HMSUnknownException_shouldRegisterUnsubscribed() throws Exception {\n-        ShadowHmsInstanceId.throwException = new ApiException(new Status(0));\n-        OneSignalInit();\n-\n-        assertHuaweiUnsubscribeWithError(PUSH_STATUS_HMS_API_EXCEPTION_OTHER);\n-    }\n-\n-    @Test\n-    public void EMUIPre10Device_shouldRegister() throws Exception {\n-        // Direct calls to HmsInstanceId.getToken always return null on EMUI9 and older\n-        ShadowHmsInstanceId.token = null;\n-        // However HmsMessageServiceOneSignal.onNewToken should fire in the background giving us the token\n-        ShadowPushRegistratorHMS.backgroundSuccessful = true;\n-\n-        OneSignalInit();\n-\n-        assertHuaweiSubscribe();\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU2MDM2Ng==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1026#discussion_r433560366", "bodyText": "do you need to sleep the thread? cant this be runnable with post delay?", "author": "Jeasmine", "createdAt": "2020-06-02T00:39:40Z", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/PushRegistratorHMS.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.onesignal;\r\n+\r\n+import android.content.Context;\r\n+import android.support.annotation.NonNull;\r\n+import android.support.annotation.Nullable;\r\n+import android.text.TextUtils;\r\n+\r\n+import com.huawei.agconnect.config.AGConnectServicesConfig;\r\n+import com.huawei.hms.aaid.HmsInstanceId;\r\n+import com.huawei.hms.common.ApiException;\r\n+import com.huawei.hms.push.HmsMessaging;\r\n+import com.huawei.hms.support.api.entity.core.CommonCode;\r\n+\r\n+import static com.onesignal.OneSignal.LOG_LEVEL;\r\n+\r\n+class PushRegistratorHMS implements PushRegistrator {\r\n+\r\n+    static final String HMS_CLIENT_APP_ID = \"client/app_id\";\r\n+\r\n+    private static final int NEW_TOKEN_TIMEOUT_MS = 30_000;\r\n+\r\n+    private static boolean callbackSuccessful;\r\n+    private @Nullable static RegisteredHandler registeredHandler;\r\n+\r\n+    static void fireCallback(String token) {\r\n+        if (registeredHandler == null)\r\n+            return;\r\n+        callbackSuccessful = true;\r\n+        registeredHandler.complete(token, UserState.PUSH_STATUS_SUBSCRIBED);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void registerForPush(@NonNull final Context context, final String senderId, @NonNull final RegisteredHandler callback) {\r\n+        registeredHandler = callback;\r\n+        new Thread(new Runnable() {\r\n+            @Override\r\n+            public void run() {\r\n+                try {\r\n+                    getHMSTokenTask(context, callback);\r\n+                } catch (ApiException e) {\r\n+                    OneSignal.Log(LOG_LEVEL.ERROR, \"HMS ApiException getting Huawei push token!\", e);\r\n+\r\n+                    int pushStatus;\r\n+                    if (e.getStatusCode() == CommonCode.ErrorCode.ARGUMENTS_INVALID)\r\n+                        pushStatus = UserState.PUSH_STATUS_HMS_ARGUMENTS_INVALID;\r\n+                    else\r\n+                        pushStatus = UserState.PUSH_STATUS_HMS_API_EXCEPTION_OTHER;\r\n+\r\n+                    callback.complete(null, pushStatus);\r\n+                }\r\n+            }\r\n+        }, \"OS_HMS_GET_TOKEN\").start();\r\n+    }\r\n+\r\n+    private synchronized void getHMSTokenTask(@NonNull Context context, @NonNull RegisteredHandler callback) throws ApiException {\r\n+        // TODO: See if we can handle an exact message like this\r\n+        // 2020-04-14 23:06:36.164 1565-1743/com.onesignal.example E/HMSSDK_Util: In getMetaDataAppId, Failed to read meta data for the AppID.\r\n+\r\n+        String appId = AGConnectServicesConfig.fromContext(context).getString(HMS_CLIENT_APP_ID);\r\n+        HmsInstanceId hmsInstanceId = HmsInstanceId.getInstance(context);\r\n+\r\n+        String pushToken = hmsInstanceId.getToken(appId, HmsMessaging.DEFAULT_TOKEN_SCOPE);\r\n+\r\n+        if (!TextUtils.isEmpty(pushToken)) {\r\n+            OneSignal.Log(LOG_LEVEL.INFO, \"Device registered for HMS, push token = \" + pushToken);\r\n+            callback.complete(pushToken, UserState.PUSH_STATUS_SUBSCRIBED);\r\n+        }\r\n+        else\r\n+            waitForOnNewPushTokenEvent(callback);\r\n+    }\r\n+\r\n+    private static void doTimeOutWait() {\r\n+        try {\r\n+            Thread.sleep(NEW_TOKEN_TIMEOUT_MS);\r", "originalCommit": "d46eb631a9017436360895e51e2a42ce91cc2d2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcwMDY3NQ==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1026#discussion_r435700675", "bodyText": "This sleep is running on it's own thread created from the registerForPush above. What are the benefits of using postDelayed? Since this is it's own thread we would also need to start a looper is why I am asking.", "author": "jkasten2", "createdAt": "2020-06-05T05:41:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU2MDM2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAyODA5Mg==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1026#discussion_r436028092", "bodyText": "I was worried if the thread was being shared, but is it all runs in the same thread I suppose there is no harm. The postDelay was to not leave a thread without doing nothing.", "author": "Jeasmine", "createdAt": "2020-06-05T16:21:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU2MDM2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "d2c93bb087e96e29f5e973770eb817b5b4be88b2", "chunk": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/PushRegistratorHMS.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/PushRegistratorHMS.java\ndeleted file mode 100644\nindex f0ae6acc..00000000\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/PushRegistratorHMS.java\n+++ /dev/null\n\n@@ -1,88 +0,0 @@\n-package com.onesignal;\n-\n-import android.content.Context;\n-import android.support.annotation.NonNull;\n-import android.support.annotation.Nullable;\n-import android.text.TextUtils;\n-\n-import com.huawei.agconnect.config.AGConnectServicesConfig;\n-import com.huawei.hms.aaid.HmsInstanceId;\n-import com.huawei.hms.common.ApiException;\n-import com.huawei.hms.push.HmsMessaging;\n-import com.huawei.hms.support.api.entity.core.CommonCode;\n-\n-import static com.onesignal.OneSignal.LOG_LEVEL;\n-\n-class PushRegistratorHMS implements PushRegistrator {\n-\n-    static final String HMS_CLIENT_APP_ID = \"client/app_id\";\n-\n-    private static final int NEW_TOKEN_TIMEOUT_MS = 30_000;\n-\n-    private static boolean callbackSuccessful;\n-    private @Nullable static RegisteredHandler registeredHandler;\n-\n-    static void fireCallback(String token) {\n-        if (registeredHandler == null)\n-            return;\n-        callbackSuccessful = true;\n-        registeredHandler.complete(token, UserState.PUSH_STATUS_SUBSCRIBED);\n-    }\n-\n-    @Override\n-    public void registerForPush(@NonNull final Context context, final String senderId, @NonNull final RegisteredHandler callback) {\n-        registeredHandler = callback;\n-        new Thread(new Runnable() {\n-            @Override\n-            public void run() {\n-                try {\n-                    getHMSTokenTask(context, callback);\n-                } catch (ApiException e) {\n-                    OneSignal.Log(LOG_LEVEL.ERROR, \"HMS ApiException getting Huawei push token!\", e);\n-\n-                    int pushStatus;\n-                    if (e.getStatusCode() == CommonCode.ErrorCode.ARGUMENTS_INVALID)\n-                        pushStatus = UserState.PUSH_STATUS_HMS_ARGUMENTS_INVALID;\n-                    else\n-                        pushStatus = UserState.PUSH_STATUS_HMS_API_EXCEPTION_OTHER;\n-\n-                    callback.complete(null, pushStatus);\n-                }\n-            }\n-        }, \"OS_HMS_GET_TOKEN\").start();\n-    }\n-\n-    private synchronized void getHMSTokenTask(@NonNull Context context, @NonNull RegisteredHandler callback) throws ApiException {\n-        // TODO: See if we can handle an exact message like this\n-        // 2020-04-14 23:06:36.164 1565-1743/com.onesignal.example E/HMSSDK_Util: In getMetaDataAppId, Failed to read meta data for the AppID.\n-\n-        String appId = AGConnectServicesConfig.fromContext(context).getString(HMS_CLIENT_APP_ID);\n-        HmsInstanceId hmsInstanceId = HmsInstanceId.getInstance(context);\n-\n-        String pushToken = hmsInstanceId.getToken(appId, HmsMessaging.DEFAULT_TOKEN_SCOPE);\n-\n-        if (!TextUtils.isEmpty(pushToken)) {\n-            OneSignal.Log(LOG_LEVEL.INFO, \"Device registered for HMS, push token = \" + pushToken);\n-            callback.complete(pushToken, UserState.PUSH_STATUS_SUBSCRIBED);\n-        }\n-        else\n-            waitForOnNewPushTokenEvent(callback);\n-    }\n-\n-    private static void doTimeOutWait() {\n-        try {\n-            Thread.sleep(NEW_TOKEN_TIMEOUT_MS);\n-        } catch (InterruptedException e) {\n-        }\n-    }\n-\n-    // If EMUI 9.x or older getToken will always return null.\n-    // We must wait for HmsMessageService.onNewToken to fire instead.\n-    void waitForOnNewPushTokenEvent(@NonNull RegisteredHandler callback) {\n-        doTimeOutWait();\n-        if (!callbackSuccessful) {\n-            OneSignal.Log(OneSignal.LOG_LEVEL.ERROR, \"HmsMessageServiceOneSignal.onNewToken timed out.\");\n-            callback.complete(null, UserState.PUSH_STATUS_HMS_TOKEN_TIMEOUT);\n-        }\n-    }\n-}\n"}}, {"oid": "fdc57d57527312dcd0d925da8d9c1f7866f2cb70", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/fdc57d57527312dcd0d925da8d9c1f7866f2cb70", "message": "Added tests for PushRegistratorHMS", "committedDate": "2020-06-05T04:56:35Z", "type": "forcePushed"}, {"oid": "d2c93bb087e96e29f5e973770eb817b5b4be88b2", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/d2c93bb087e96e29f5e973770eb817b5b4be88b2", "message": "HMS device_type detection and value\n\n* Added Huawei as device_type 13\n* Added detecting if HMS exists and only use it if\nGoogle play servcies is not on the device and is not enabled.", "committedDate": "2020-06-05T05:14:54Z", "type": "commit"}, {"oid": "6d4a62e7cecd34bc0b2951126b48bf8c5d0e6258", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/6d4a62e7cecd34bc0b2951126b48bf8c5d0e6258", "message": "Added Huawei Gradle dependencies", "committedDate": "2020-06-05T05:14:54Z", "type": "commit"}, {"oid": "e3411be396968b29fc738481f46af9ea8e5a2815", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/e3411be396968b29fc738481f46af9ea8e5a2815", "message": "Added PushRegistratorHMS", "committedDate": "2020-06-05T05:14:54Z", "type": "commit"}, {"oid": "d028114c5e6dfb3b3d1fca7c70df28f09d25e055", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/d028114c5e6dfb3b3d1fca7c70df28f09d25e055", "message": "Added getDeviceType tests", "committedDate": "2020-06-05T05:14:54Z", "type": "commit"}, {"oid": "3d812ace140d1c82ee86b288c37b645ee6278956", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/3d812ace140d1c82ee86b288c37b645ee6278956", "message": "Added tests for PushRegistratorHMS", "committedDate": "2020-06-05T05:15:40Z", "type": "commit"}, {"oid": "3d812ace140d1c82ee86b288c37b645ee6278956", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/3d812ace140d1c82ee86b288c37b645ee6278956", "message": "Added tests for PushRegistratorHMS", "committedDate": "2020-06-05T05:15:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAxODM4MA==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1026#discussion_r436018380", "bodyText": "You can use the new utils function", "author": "Jeasmine", "createdAt": "2020-06-05T16:04:07Z", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java", "diffHunk": "@@ -972,10 +972,14 @@ private static PushRegistrator getPushRegistrator() {\n       int deviceType = osUtils.getDeviceType();\n       if (deviceType == UserState.DEVICE_TYPE_FIREOS)\n          mPushRegistrator = new PushRegistratorADM();\n-      else if (OSUtils.hasFCMLibrary())\n-         mPushRegistrator = new PushRegistratorFCM();\n+      else if (new OSUtils().getDeviceType() == UserState.DEVICE_TYPE_ANDROID) {", "originalCommit": "8ba3957508a568e7b2dba9d1ea6c4631521fbed9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAxOTIzOQ==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1026#discussion_r436019239", "bodyText": "oh I think the new util function is in the other PR \ud83d\ude22", "author": "Jeasmine", "createdAt": "2020-06-05T16:05:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAxODM4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc4NTI0Nw==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1026#discussion_r437785247", "bodyText": "Added to this one, since it is a better fit anyway", "author": "jkasten2", "createdAt": "2020-06-09T23:55:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAxODM4MA=="}], "type": "inlineReview", "revised_code": {"commit": "5c2ca10d73f6ae97d9d7d4c02d6177c33098bf9a", "chunk": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\nindex 039c129b..df9d09b6 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n\n@@ -969,10 +969,9 @@ public class OneSignal {\n       if (mPushRegistrator != null)\n          return mPushRegistrator;\n \n-      int deviceType = osUtils.getDeviceType();\n-      if (deviceType == UserState.DEVICE_TYPE_FIREOS)\n+      if (OSUtils.isFireOSDeviceType())\n          mPushRegistrator = new PushRegistratorADM();\n-      else if (new OSUtils().getDeviceType() == UserState.DEVICE_TYPE_ANDROID) {\n+      else if (OSUtils.isAndroidDeviceType()) {\n          if (OSUtils.hasFCMLibrary())\n             mPushRegistrator = new PushRegistratorFCM();\n          else\n"}}, {"oid": "5c2ca10d73f6ae97d9d7d4c02d6177c33098bf9a", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/5c2ca10d73f6ae97d9d7d4c02d6177c33098bf9a", "message": "Added is*DeviceType helpers\n\n* Also fix method name casing on showUpdateGPSDialog", "committedDate": "2020-06-09T23:48:20Z", "type": "commit"}, {"oid": "5c2ca10d73f6ae97d9d7d4c02d6177c33098bf9a", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/5c2ca10d73f6ae97d9d7d4c02d6177c33098bf9a", "message": "Added is*DeviceType helpers\n\n* Also fix method name casing on showUpdateGPSDialog", "committedDate": "2020-06-09T23:48:20Z", "type": "forcePushed"}]}