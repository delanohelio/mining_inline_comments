{"pr_number": 1005, "pr_title": " Make IAM influence after IAM display, Add click action handler", "pr_createdAt": "2020-05-05T16:08:49Z", "pr_url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1005", "timeline": [{"oid": "fdf8614a10cdb4e3f4549893276729799854bb3f", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/fdf8614a10cdb4e3f4549893276729799854bb3f", "message": "Add Click Action handler for outcomes\n\n   * If the user sends and outcome from the click action handler callback, that outcome should be DIRECT influenced by IAM\n   * DIRECT influences by IAM can be from click action handler or click action outcome", "committedDate": "2020-05-05T16:10:10Z", "type": "forcePushed"}, {"oid": "2d534751b52f0edaf8084317b995bca44c896d7f", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/2d534751b52f0edaf8084317b995bca44c896d7f", "message": "Add Click Action handler for outcomes\n\n   * If the user sends and outcome from the click action handler callback, that outcome should be DIRECT influenced by IAM\n   * DIRECT influences by IAM can be from click action handler or click action outcome", "committedDate": "2020-05-05T17:34:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0MzA4OQ==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1005#discussion_r421243089", "bodyText": "We can remove outcomes_ from the string as this is under the outcomes json key anyway. v2_enabled I think is the most clear.\nWe should keep OUTCOMES_ in the name so it is clear when we use it though.", "author": "jkasten2", "createdAt": "2020-05-07T05:11:36Z", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java", "diffHunk": "@@ -92,12 +92,12 @@ public String toString() {\n    private static int androidParamsRetries = 0;\n \n    private static final String OUTCOME_PARAM = \"outcomes\";\n-   private static final String V2_PARAM = \"v2_active\";\n+   private static final String OUTCOMES_V2_SERVICE_PARAM = \"outcomes_v2_service_enabled\";", "originalCommit": "2d534751b52f0edaf8084317b995bca44c896d7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e172b53a0266686435fb2a0a75e3ec3cd5426e9e", "chunk": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java\nindex e3f2c8b4..e584c06f 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java\n\n@@ -92,7 +92,7 @@ public class OneSignalRemoteParams {\n    private static int androidParamsRetries = 0;\n \n    private static final String OUTCOME_PARAM = \"outcomes\";\n-   private static final String OUTCOMES_V2_SERVICE_PARAM = \"outcomes_v2_service_enabled\";\n+   private static final String OUTCOMES_V2_SERVICE_PARAM = \"v2_enabled\";\n    private static final String ENABLED_PARAM = \"enabled\";\n    private static final String DIRECT_PARAM = \"direct\";\n    private static final String INDIRECT_PARAM = \"indirect\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc4NDAyMQ==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1005#discussion_r421784021", "bodyText": "rename this test maybe?\ntestIAMActionSendsOutcome_usingOutcomesV2 or\ntestOnIAMActionSendsOutcome_usingOutcomesV2", "author": "mikechoch", "createdAt": "2020-05-07T20:47:42Z", "path": "OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java", "diffHunk": "@@ -633,6 +635,160 @@ public void testInAppMessageClickActionOutcomeWithValue() throws Exception {\n         assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n     }\n \n+    @Test\n+    public void testOnMessageActionOccurredOnMessageSendOutcomeV2() throws Exception {", "originalCommit": "2d534751b52f0edaf8084317b995bca44c896d7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e172b53a0266686435fb2a0a75e3ec3cd5426e9e", "chunk": "diff --git a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\nindex d4604bb4..52da333c 100644\n--- a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n+++ b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n\n@@ -636,7 +623,7 @@ public class InAppMessageIntegrationTests {\n     }\n \n     @Test\n-    public void testOnMessageActionOccurredOnMessageSendOutcomeV2() throws Exception {\n+    public void testOnIAMActionSendsOutcome_usingOutcomesV2() throws Exception {\n         // Enable IAM v2\n         preferences = new MockOSSharedPreferences();\n         preferences.saveBool(preferences.getPreferencesName(), preferences.getOutcomesV2KeyName(), true);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc5MzUyOQ==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1005#discussion_r421793529", "bodyText": "rename this test maybe?\ntestIAMActionSendsOutcome_afterDismiss_usingOutcomesV2 or\ntestOnIAMActionSendsOutcome_afterDismiss_usingOutcomesV2", "author": "mikechoch", "createdAt": "2020-05-07T21:04:57Z", "path": "OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java", "diffHunk": "@@ -633,6 +635,160 @@ public void testInAppMessageClickActionOutcomeWithValue() throws Exception {\n         assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n     }\n \n+    @Test\n+    public void testOnMessageActionOccurredOnMessageSendOutcomeV2() throws Exception {\n+        // Enable IAM v2\n+        preferences = new MockOSSharedPreferences();\n+        preferences.saveBool(preferences.getPreferencesName(), preferences.getOutcomesV2KeyName(), true);\n+        trackerFactory = new OSTrackerFactory(preferences, new MockOSLog());\n+        sessionManager = new MockSessionManager(OneSignal_getSessionListener(), trackerFactory, new MockOSLog());\n+\n+        OneSignal_setSharedPreferences(preferences);\n+        OneSignal_setTrackerFactory(trackerFactory);\n+        OneSignal_setSessionManager(sessionManager);\n+\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.CUSTOM, \"test_1\", OSTestTrigger.OSTriggerOperator.EQUAL_TO.toString(), 2);\n+\n+        setMockRegistrationResponseWithMessages(new ArrayList<OSTestInAppMessage>() {{\n+            add(message);\n+        }});\n+\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // Enable influence outcomes\n+        trackerFactory.saveInfluenceParams(new OneSignalPackagePrivateHelper.RemoteOutcomeParams());\n+\n+        final OSInAppMessageAction[] lastAction = new OSInAppMessageAction[1];\n+        OneSignal.getCurrentOrNewInitBuilder().setInAppMessageClickHandler(new OneSignal.InAppMessageClickHandler() {\n+            @Override\n+            public void inAppMessageClicked(OSInAppMessageAction result) {\n+                lastAction[0] = result;\n+                // Ensure we are on the main thread when running the callback, since the app developer\n+                //   will most likely need to update UI.\n+                assertMainThread();\n+\n+                OneSignal.sendOutcome(\"test\");\n+                // Ensure outcome is sent\n+                ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(4);\n+\n+                assertEquals(\"outcomes/measure_sources\", iamOutcomeRequest.url);\n+                // Requests: Param request + Players Request + IAM Request + Impression + Outcome Request\n+                assertEquals(5, ShadowOneSignalRestClient.requests.size());\n+                assertFalse(iamOutcomeRequest.payload.has(\"weight\"));\n+                try {\n+                    // Check outcome was DIRECT from IAM\n+                    assertEquals(\"test\", iamOutcomeRequest.payload.get(\"id\"));\n+                    assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n+                    JSONObject sources = iamOutcomeRequest.payload.getJSONObject(\"sources\");\n+                    JSONObject direct = sources.getJSONObject(\"direct\");\n+                    JSONArray iamIds = direct.getJSONArray(\"in_app_message_ids\");\n+                    assertEquals(0, direct.getJSONArray(\"notification_ids\").length());\n+                    assertEquals(1, iamIds.length());\n+                    assertEquals(message.messageId, iamIds.get(0));\n+                    assertFalse(sources.has(\"indirect\"));\n+                } catch (JSONException e) {\n+                    e.printStackTrace();\n+                }\n+            }\n+        });\n+        threadAndTaskWait();\n+\n+        // Add trigger to make IAM display\n+        OneSignal.addTrigger(\"test_1\", 2);\n+        assertEquals(1, OneSignalPackagePrivateHelper.getInAppMessageDisplayQueue().size());\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message,\n+                new JSONObject() {{\n+                    put(\"id\", \"button_id_123\");\n+                    put(\"name\", \"my_click_name\");\n+                }}\n+        );\n+\n+        // Ensure we fire public callback that In-App was clicked.\n+        assertEquals(lastAction[0].clickName, \"my_click_name\");\n+    }\n+\n+    @Test\n+    public void testOnMessageActionOccurredOnMessageSendOutcomeV2AfterDismiss() throws Exception {", "originalCommit": "2d534751b52f0edaf8084317b995bca44c896d7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e172b53a0266686435fb2a0a75e3ec3cd5426e9e", "chunk": "diff --git a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\nindex d4604bb4..52da333c 100644\n--- a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n+++ b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n\n@@ -636,7 +623,7 @@ public class InAppMessageIntegrationTests {\n     }\n \n     @Test\n-    public void testOnMessageActionOccurredOnMessageSendOutcomeV2() throws Exception {\n+    public void testOnIAMActionSendsOutcome_usingOutcomesV2() throws Exception {\n         // Enable IAM v2\n         preferences = new MockOSSharedPreferences();\n         preferences.saveBool(preferences.getPreferencesName(), preferences.getOutcomesV2KeyName(), true);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc5NTMxMw==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1005#discussion_r421795313", "bodyText": "fix extra tabbing", "author": "mikechoch", "createdAt": "2020-05-07T21:08:24Z", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java", "diffHunk": "@@ -1041,8 +1041,8 @@ public void complete(OneSignalRemoteParams.Params params) {\n             );\n             OneSignalPrefs.saveBool(\n                OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_OS_OUTCOMES_V2,\n-                    params.influenceParams.v2Enabled\n+               preferences.getOutcomesV2KeyName(),\n+                    params.influenceParams.outcomesV2ServiceEnabled", "originalCommit": "2d534751b52f0edaf8084317b995bca44c896d7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e172b53a0266686435fb2a0a75e3ec3cd5426e9e", "chunk": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\nindex cba56bbe..94cdc161 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java\n\n@@ -1042,7 +1045,7 @@ public class OneSignal {\n             OneSignalPrefs.saveBool(\n                OneSignalPrefs.PREFS_ONESIGNAL,\n                preferences.getOutcomesV2KeyName(),\n-                    params.influenceParams.outcomesV2ServiceEnabled\n+               params.influenceParams.outcomesV2ServiceEnabled\n             );\n             logger.debug(\"OneSignal saveInfluenceParams: \" + params.influenceParams.toString());\n             trackerFactory.saveInfluenceParams(params.influenceParams);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc5ODk2OQ==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1005#discussion_r421798969", "bodyText": "Rename?\nvalidateRepositoryVersion or\nvalidateOutcomeRepositoryVersion", "author": "mikechoch", "createdAt": "2020-05-07T21:15:43Z", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/outcomes/OSOutcomeEventsFactory.java", "diffHunk": "@@ -23,11 +23,22 @@ public OSOutcomeEventsFactory(OSLogger logger, OneSignalAPIClient apiClient, One\n     public OSOutcomeEventsRepository getRepository() {\n         if (repository == null)\n             createRepository();\n+        else\n+            checkVersionChanged();\n         return repository;\n     }\n \n+    private void checkVersionChanged() {", "originalCommit": "2d534751b52f0edaf8084317b995bca44c896d7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e172b53a0266686435fb2a0a75e3ec3cd5426e9e", "chunk": "diff --git a/OneSignalSDK/onesignal/src/main/java/com/onesignal/outcomes/OSOutcomeEventsFactory.java b/OneSignalSDK/onesignal/src/main/java/com/onesignal/outcomes/OSOutcomeEventsFactory.java\nindex 6515f199..ca06355b 100644\n--- a/OneSignalSDK/onesignal/src/main/java/com/onesignal/outcomes/OSOutcomeEventsFactory.java\n+++ b/OneSignalSDK/onesignal/src/main/java/com/onesignal/outcomes/OSOutcomeEventsFactory.java\n\n@@ -24,11 +24,11 @@ public class OSOutcomeEventsFactory {\n         if (repository == null)\n             createRepository();\n         else\n-            checkVersionChanged();\n+            validateRepositoryVersion();\n         return repository;\n     }\n \n-    private void checkVersionChanged() {\n+    private void validateRepositoryVersion() {\n         if (!outcomeEventsCache.isOutcomesV2ServiceEnabled() && repository instanceof OSOutcomeEventsV1Repository)\n             return;\n         if (outcomeEventsCache.isOutcomesV2ServiceEnabled() && repository instanceof OSOutcomeEventsV2Repository)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgwNDMxNg==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1005#discussion_r421804316", "bodyText": "Below you are doing a lot of Request asserts\nWe should continuously update RestClientAsserts.java whenever we find new endpoints for testing\nAsk me for help or check the current implementation and try to mimic it for the measure_sources endpoint", "author": "mikechoch", "createdAt": "2020-05-07T21:26:25Z", "path": "OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java", "diffHunk": "@@ -633,6 +635,160 @@ public void testInAppMessageClickActionOutcomeWithValue() throws Exception {\n         assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n     }\n \n+    @Test\n+    public void testOnMessageActionOccurredOnMessageSendOutcomeV2() throws Exception {\n+        // Enable IAM v2\n+        preferences = new MockOSSharedPreferences();\n+        preferences.saveBool(preferences.getPreferencesName(), preferences.getOutcomesV2KeyName(), true);\n+        trackerFactory = new OSTrackerFactory(preferences, new MockOSLog());\n+        sessionManager = new MockSessionManager(OneSignal_getSessionListener(), trackerFactory, new MockOSLog());\n+\n+        OneSignal_setSharedPreferences(preferences);\n+        OneSignal_setTrackerFactory(trackerFactory);\n+        OneSignal_setSessionManager(sessionManager);\n+\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.CUSTOM, \"test_1\", OSTestTrigger.OSTriggerOperator.EQUAL_TO.toString(), 2);\n+\n+        setMockRegistrationResponseWithMessages(new ArrayList<OSTestInAppMessage>() {{\n+            add(message);\n+        }});\n+\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // Enable influence outcomes\n+        trackerFactory.saveInfluenceParams(new OneSignalPackagePrivateHelper.RemoteOutcomeParams());\n+\n+        final OSInAppMessageAction[] lastAction = new OSInAppMessageAction[1];\n+        OneSignal.getCurrentOrNewInitBuilder().setInAppMessageClickHandler(new OneSignal.InAppMessageClickHandler() {\n+            @Override\n+            public void inAppMessageClicked(OSInAppMessageAction result) {\n+                lastAction[0] = result;\n+                // Ensure we are on the main thread when running the callback, since the app developer\n+                //   will most likely need to update UI.\n+                assertMainThread();\n+\n+                OneSignal.sendOutcome(\"test\");\n+                // Ensure outcome is sent\n+                ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(4);", "originalCommit": "2d534751b52f0edaf8084317b995bca44c896d7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e172b53a0266686435fb2a0a75e3ec3cd5426e9e", "chunk": "diff --git a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\nindex d4604bb4..52da333c 100644\n--- a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n+++ b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n\n@@ -636,7 +623,7 @@ public class InAppMessageIntegrationTests {\n     }\n \n     @Test\n-    public void testOnMessageActionOccurredOnMessageSendOutcomeV2() throws Exception {\n+    public void testOnIAMActionSendsOutcome_usingOutcomesV2() throws Exception {\n         // Enable IAM v2\n         preferences = new MockOSSharedPreferences();\n         preferences.saveBool(preferences.getPreferencesName(), preferences.getOutcomesV2KeyName(), true);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgwNDU5NQ==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1005#discussion_r421804595", "bodyText": "Use RestClientAsserts.java, similar to above comment", "author": "mikechoch", "createdAt": "2020-05-07T21:26:56Z", "path": "OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java", "diffHunk": "@@ -633,6 +635,160 @@ public void testInAppMessageClickActionOutcomeWithValue() throws Exception {\n         assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n     }\n \n+    @Test\n+    public void testOnMessageActionOccurredOnMessageSendOutcomeV2() throws Exception {\n+        // Enable IAM v2\n+        preferences = new MockOSSharedPreferences();\n+        preferences.saveBool(preferences.getPreferencesName(), preferences.getOutcomesV2KeyName(), true);\n+        trackerFactory = new OSTrackerFactory(preferences, new MockOSLog());\n+        sessionManager = new MockSessionManager(OneSignal_getSessionListener(), trackerFactory, new MockOSLog());\n+\n+        OneSignal_setSharedPreferences(preferences);\n+        OneSignal_setTrackerFactory(trackerFactory);\n+        OneSignal_setSessionManager(sessionManager);\n+\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.CUSTOM, \"test_1\", OSTestTrigger.OSTriggerOperator.EQUAL_TO.toString(), 2);\n+\n+        setMockRegistrationResponseWithMessages(new ArrayList<OSTestInAppMessage>() {{\n+            add(message);\n+        }});\n+\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // Enable influence outcomes\n+        trackerFactory.saveInfluenceParams(new OneSignalPackagePrivateHelper.RemoteOutcomeParams());\n+\n+        final OSInAppMessageAction[] lastAction = new OSInAppMessageAction[1];\n+        OneSignal.getCurrentOrNewInitBuilder().setInAppMessageClickHandler(new OneSignal.InAppMessageClickHandler() {\n+            @Override\n+            public void inAppMessageClicked(OSInAppMessageAction result) {\n+                lastAction[0] = result;\n+                // Ensure we are on the main thread when running the callback, since the app developer\n+                //   will most likely need to update UI.\n+                assertMainThread();\n+\n+                OneSignal.sendOutcome(\"test\");\n+                // Ensure outcome is sent\n+                ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(4);\n+\n+                assertEquals(\"outcomes/measure_sources\", iamOutcomeRequest.url);\n+                // Requests: Param request + Players Request + IAM Request + Impression + Outcome Request\n+                assertEquals(5, ShadowOneSignalRestClient.requests.size());\n+                assertFalse(iamOutcomeRequest.payload.has(\"weight\"));\n+                try {\n+                    // Check outcome was DIRECT from IAM\n+                    assertEquals(\"test\", iamOutcomeRequest.payload.get(\"id\"));\n+                    assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n+                    JSONObject sources = iamOutcomeRequest.payload.getJSONObject(\"sources\");\n+                    JSONObject direct = sources.getJSONObject(\"direct\");\n+                    JSONArray iamIds = direct.getJSONArray(\"in_app_message_ids\");\n+                    assertEquals(0, direct.getJSONArray(\"notification_ids\").length());\n+                    assertEquals(1, iamIds.length());\n+                    assertEquals(message.messageId, iamIds.get(0));\n+                    assertFalse(sources.has(\"indirect\"));\n+                } catch (JSONException e) {\n+                    e.printStackTrace();\n+                }\n+            }\n+        });\n+        threadAndTaskWait();\n+\n+        // Add trigger to make IAM display\n+        OneSignal.addTrigger(\"test_1\", 2);\n+        assertEquals(1, OneSignalPackagePrivateHelper.getInAppMessageDisplayQueue().size());\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message,\n+                new JSONObject() {{\n+                    put(\"id\", \"button_id_123\");\n+                    put(\"name\", \"my_click_name\");\n+                }}\n+        );\n+\n+        // Ensure we fire public callback that In-App was clicked.\n+        assertEquals(lastAction[0].clickName, \"my_click_name\");\n+    }\n+\n+    @Test\n+    public void testOnMessageActionOccurredOnMessageSendOutcomeV2AfterDismiss() throws Exception {\n+        // Enable IAM v2\n+        preferences = new MockOSSharedPreferences();\n+        preferences.saveBool(preferences.getPreferencesName(), preferences.getOutcomesV2KeyName(), true);\n+        trackerFactory = new OSTrackerFactory(preferences, new MockOSLog());\n+        sessionManager = new MockSessionManager(OneSignal_getSessionListener(), trackerFactory, new MockOSLog());\n+\n+        OneSignal_setSharedPreferences(preferences);\n+        OneSignal_setTrackerFactory(trackerFactory);\n+        OneSignal_setSessionManager(sessionManager);\n+\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.CUSTOM, \"test_1\", OSTestTrigger.OSTriggerOperator.EQUAL_TO.toString(), 2);\n+\n+        setMockRegistrationResponseWithMessages(new ArrayList<OSTestInAppMessage>() {{\n+            add(message);\n+        }});\n+\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // Enable influence outcomes\n+        trackerFactory.saveInfluenceParams(new OneSignalPackagePrivateHelper.RemoteOutcomeParams());\n+\n+        final OSInAppMessageAction[] lastAction = new OSInAppMessageAction[1];\n+        OneSignal.getCurrentOrNewInitBuilder().setInAppMessageClickHandler(new OneSignal.InAppMessageClickHandler() {\n+            @Override\n+            public void inAppMessageClicked(OSInAppMessageAction result) {\n+                lastAction[0] = result;\n+                // Ensure we are on the main thread when running the callback, since the app developer\n+                //   will most likely need to update UI.\n+                assertMainThread();\n+            }\n+        });\n+        threadAndTaskWait();\n+\n+        // Add trigger to make IAM display\n+        OneSignal.addTrigger(\"test_1\", 2);\n+        assertEquals(1, OneSignalPackagePrivateHelper.getInAppMessageDisplayQueue().size());\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message,\n+                new JSONObject() {{\n+                    put(\"id\", \"button_id_123\");\n+                    put(\"name\", \"my_click_name\");\n+                }}\n+        );\n+\n+        // Ensure we fire public callback that In-App was clicked.\n+        assertEquals(lastAction[0].clickName, \"my_click_name\");\n+\n+        OneSignalPackagePrivateHelper.dismissCurrentMessage();\n+\n+        OneSignal.sendOutcome(\"test1\");\n+        // Ensure outcome is sent but with INDIRECT influence from IAM\n+        ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(5);", "originalCommit": "2d534751b52f0edaf8084317b995bca44c896d7f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e172b53a0266686435fb2a0a75e3ec3cd5426e9e", "chunk": "diff --git a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\nindex d4604bb4..52da333c 100644\n--- a/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n+++ b/OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java\n\n@@ -636,7 +623,7 @@ public class InAppMessageIntegrationTests {\n     }\n \n     @Test\n-    public void testOnMessageActionOccurredOnMessageSendOutcomeV2() throws Exception {\n+    public void testOnIAMActionSendsOutcome_usingOutcomesV2() throws Exception {\n         // Enable IAM v2\n         preferences = new MockOSSharedPreferences();\n         preferences.saveBool(preferences.getPreferencesName(), preferences.getOutcomesV2KeyName(), true);\n"}}, {"oid": "e172b53a0266686435fb2a0a75e3ec3cd5426e9e", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/e172b53a0266686435fb2a0a75e3ec3cd5426e9e", "message": "CodeReview comments", "committedDate": "2020-05-08T22:44:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIxNjcwNQ==", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1005#discussion_r423216705", "bodyText": "NICE!", "author": "mikechoch", "createdAt": "2020-05-11T17:55:06Z", "path": "OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java", "diffHunk": "@@ -633,6 +622,130 @@ public void testInAppMessageClickActionOutcomeWithValue() throws Exception {\n         assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n     }\n \n+    @Test\n+    public void testOnIAMActionSendsOutcome_usingOutcomesV2() throws Exception {\n+        // Enable IAM v2\n+        preferences = new MockOSSharedPreferences();\n+        preferences.saveBool(preferences.getPreferencesName(), preferences.getOutcomesV2KeyName(), true);\n+        trackerFactory = new OSTrackerFactory(preferences, new MockOSLog());\n+        sessionManager = new MockSessionManager(OneSignal_getSessionListener(), trackerFactory, new MockOSLog());\n+\n+        OneSignal_setSharedPreferences(preferences);\n+        OneSignal_setTrackerFactory(trackerFactory);\n+        OneSignal_setSessionManager(sessionManager);\n+\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.CUSTOM, \"test_1\", OSTestTrigger.OSTriggerOperator.EQUAL_TO.toString(), 2);\n+\n+        setMockRegistrationResponseWithMessages(new ArrayList<OSTestInAppMessage>() {{\n+            add(message);\n+        }});\n+\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // Enable influence outcomes\n+        trackerFactory.saveInfluenceParams(new OneSignalPackagePrivateHelper.RemoteOutcomeParams());\n+\n+        final OSInAppMessageAction[] lastAction = new OSInAppMessageAction[1];\n+        OneSignal.getCurrentOrNewInitBuilder().setInAppMessageClickHandler(new OneSignal.InAppMessageClickHandler() {\n+            @Override\n+            public void inAppMessageClicked(OSInAppMessageAction result) {\n+                lastAction[0] = result;\n+                // Ensure we are on the main thread when running the callback, since the app developer\n+                //   will most likely need to update UI.\n+                assertMainThread();\n+\n+                OneSignal.sendOutcome(\"test\");\n+                try {\n+                    // Ensure outcome is sent\n+                    assertMeasureOnV2AtIndex(4, \"test\", new JSONArray().put(message.messageId), new JSONArray(), null, null);", "originalCommit": "e172b53a0266686435fb2a0a75e3ec3cd5426e9e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "1cdd6a9b7b123010a2cf68e3162ef62117c55385", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/1cdd6a9b7b123010a2cf68e3162ef62117c55385", "message": "Make IAM influence after IAM display, Add click action handler\n\n   * Changes Tests to accomplish new functionality\n   * Minor improvements changes\n   * If the user sends and outcome from the click action handler callback,\n     that outcome should be DIRECT influenced by IAM\n     DIRECT influences by IAM can be from click action handler or click action outcome", "committedDate": "2020-05-11T18:11:32Z", "type": "commit"}, {"oid": "1cdd6a9b7b123010a2cf68e3162ef62117c55385", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/1cdd6a9b7b123010a2cf68e3162ef62117c55385", "message": "Make IAM influence after IAM display, Add click action handler\n\n   * Changes Tests to accomplish new functionality\n   * Minor improvements changes\n   * If the user sends and outcome from the click action handler callback,\n     that outcome should be DIRECT influenced by IAM\n     DIRECT influences by IAM can be from click action handler or click action outcome", "committedDate": "2020-05-11T18:11:32Z", "type": "forcePushed"}]}