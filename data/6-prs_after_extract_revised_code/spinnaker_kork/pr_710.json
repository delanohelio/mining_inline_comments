{"pr_number": 710, "pr_title": " refactor(eureka): Move Eureka out of kork-core into kork-eureka", "pr_createdAt": "2020-07-08T19:39:54Z", "pr_url": "https://github.com/spinnaker/kork/pull/710", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwNzc0OA==", "url": "https://github.com/spinnaker/kork/pull/710#discussion_r451807748", "bodyText": "I think there should be a spring.factories in here referencing this config, and I also think that PlatformComponents in kork-core needs to remove this from its Import but I don't see that change in here", "author": "cfieber", "createdAt": "2020-07-08T20:30:31Z", "path": "kork-eureka/src/main/java/com/netflix/spinnaker/kork/eureka/EurekaComponents.java", "diffHunk": "@@ -16,6 +16,8 @@\n \n package com.netflix.spinnaker.kork.eureka;", "originalCommit": "a9c0f1d09244d75ecc3ba0266bcbc9374d987958", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg2NDI1MQ==", "url": "https://github.com/spinnaker/kork/pull/710#discussion_r451864251", "bodyText": "Ah, yarp. I did do that, but didn't push it.", "author": "robzienert", "createdAt": "2020-07-08T22:41:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwNzc0OA=="}], "type": "inlineReview", "revised_code": {"commit": "d284942b3f683e3f17a0a4d5b6a499da9709cc4c", "chunk": "diff --git a/kork-eureka/src/main/java/com/netflix/spinnaker/kork/eureka/EurekaComponents.java b/kork-eureka/src/main/java/com/netflix/spinnaker/kork/eureka/EurekaConfiguration.java\nsimilarity index 68%\nrename from kork-eureka/src/main/java/com/netflix/spinnaker/kork/eureka/EurekaComponents.java\nrename to kork-eureka/src/main/java/com/netflix/spinnaker/kork/eureka/EurekaConfiguration.java\nindex c6f3d65..c5e71b4 100644\n--- a/kork-eureka/src/main/java/com/netflix/spinnaker/kork/eureka/EurekaComponents.java\n+++ b/kork-eureka/src/main/java/com/netflix/spinnaker/kork/eureka/EurekaConfiguration.java\n\n@@ -16,37 +16,26 @@\n \n package com.netflix.spinnaker.kork.eureka;\n \n-import static com.netflix.spinnaker.kork.eureka.InstanceStatusBridge.fromEureka;\n-\n import com.netflix.appinfo.*;\n import com.netflix.discovery.DefaultEurekaClientConfig;\n import com.netflix.discovery.DiscoveryClient;\n import com.netflix.discovery.EurekaClient;\n import com.netflix.discovery.EurekaClientConfig;\n-import com.netflix.discovery.StatusChangeEvent;\n import com.netflix.eventbus.impl.EventBusImpl;\n import com.netflix.eventbus.spi.EventBus;\n-import com.netflix.eventbus.spi.InvalidSubscriberException;\n-import com.netflix.eventbus.spi.Subscribe;\n-import com.netflix.spinnaker.kork.discovery.DiscoveryStatusChangeEvent;\n-import com.netflix.spinnaker.kork.discovery.InstanceStatus;\n-import com.netflix.spinnaker.kork.discovery.RemoteStatusChangedEvent;\n-import com.netflix.spinnaker.kork.exceptions.SystemException;\n import java.util.Map;\n import java.util.Objects;\n-import javax.annotation.PreDestroy;\n import javax.inject.Provider;\n import org.springframework.boot.actuate.health.HealthAggregator;\n import org.springframework.boot.actuate.health.HealthIndicator;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.context.annotation.*;\n \n @Configuration\n-@ConditionalOnProperty(\"eureka.enabled\")\n @EnableConfigurationProperties(EurekaConfigurationProperties.class)\n-public class EurekaComponents {\n+public class EurekaConfiguration {\n+\n   @Bean\n   public EventBus eventBus() {\n     return new EventBusImpl();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwOTIzMQ==", "url": "https://github.com/spinnaker/kork/pull/710#discussion_r451809231", "bodyText": "I think it might be worth adding another autoconfiguration class here conditional on eureka.enabled=false that publishes a Status UP event (I know something similar exists in orca and others that try to control polling activity based on in-service status for the case where there is no discovery service):\nhttps://github.com/spinnaker/orca/blob/master/orca-eureka/src/main/java/com/netflix/spinnaker/orca/eureka/NoDiscoveryApplicationStatusPublisher.java", "author": "cfieber", "createdAt": "2020-07-08T20:33:40Z", "path": "kork-eureka/src/main/java/com/netflix/spinnaker/kork/eureka/EurekaComponents.java", "diffHunk": "@@ -16,6 +16,8 @@\n \n package com.netflix.spinnaker.kork.eureka;\n \n+import static com.netflix.spinnaker.kork.eureka.InstanceStatusBridge.fromEureka;\n+\n import com.netflix.appinfo.*;", "originalCommit": "a9c0f1d09244d75ecc3ba0266bcbc9374d987958", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwOTgwNA==", "url": "https://github.com/spinnaker/kork/pull/710#discussion_r451809804", "bodyText": "alternatively there could be an autoconfiguration in kork-core that supplies that ConditionalOnMissingBean, and this configuration could be flagged to AutoConfigureBefore that configuration so the conditional stuff actually works", "author": "cfieber", "createdAt": "2020-07-08T20:34:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwOTIzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "d284942b3f683e3f17a0a4d5b6a499da9709cc4c", "chunk": "diff --git a/kork-eureka/src/main/java/com/netflix/spinnaker/kork/eureka/EurekaComponents.java b/kork-eureka/src/main/java/com/netflix/spinnaker/kork/eureka/EurekaConfiguration.java\nsimilarity index 68%\nrename from kork-eureka/src/main/java/com/netflix/spinnaker/kork/eureka/EurekaComponents.java\nrename to kork-eureka/src/main/java/com/netflix/spinnaker/kork/eureka/EurekaConfiguration.java\nindex c6f3d65..c5e71b4 100644\n--- a/kork-eureka/src/main/java/com/netflix/spinnaker/kork/eureka/EurekaComponents.java\n+++ b/kork-eureka/src/main/java/com/netflix/spinnaker/kork/eureka/EurekaConfiguration.java\n\n@@ -16,37 +16,26 @@\n \n package com.netflix.spinnaker.kork.eureka;\n \n-import static com.netflix.spinnaker.kork.eureka.InstanceStatusBridge.fromEureka;\n-\n import com.netflix.appinfo.*;\n import com.netflix.discovery.DefaultEurekaClientConfig;\n import com.netflix.discovery.DiscoveryClient;\n import com.netflix.discovery.EurekaClient;\n import com.netflix.discovery.EurekaClientConfig;\n-import com.netflix.discovery.StatusChangeEvent;\n import com.netflix.eventbus.impl.EventBusImpl;\n import com.netflix.eventbus.spi.EventBus;\n-import com.netflix.eventbus.spi.InvalidSubscriberException;\n-import com.netflix.eventbus.spi.Subscribe;\n-import com.netflix.spinnaker.kork.discovery.DiscoveryStatusChangeEvent;\n-import com.netflix.spinnaker.kork.discovery.InstanceStatus;\n-import com.netflix.spinnaker.kork.discovery.RemoteStatusChangedEvent;\n-import com.netflix.spinnaker.kork.exceptions.SystemException;\n import java.util.Map;\n import java.util.Objects;\n-import javax.annotation.PreDestroy;\n import javax.inject.Provider;\n import org.springframework.boot.actuate.health.HealthAggregator;\n import org.springframework.boot.actuate.health.HealthIndicator;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.context.annotation.*;\n \n @Configuration\n-@ConditionalOnProperty(\"eureka.enabled\")\n @EnableConfigurationProperties(EurekaConfigurationProperties.class)\n-public class EurekaComponents {\n+public class EurekaConfiguration {\n+\n   @Bean\n   public EventBus eventBus() {\n     return new EventBusImpl();\n"}}, {"oid": "d284942b3f683e3f17a0a4d5b6a499da9709cc4c", "url": "https://github.com/spinnaker/kork/commit/d284942b3f683e3f17a0a4d5b6a499da9709cc4c", "message": "refactor(eureka): Move Eureka out of kork-core into kork-eureka", "committedDate": "2020-07-09T17:06:21Z", "type": "forcePushed"}, {"oid": "0130f6ca189f4ba556484f972d2bf04a6a90cb40", "url": "https://github.com/spinnaker/kork/commit/0130f6ca189f4ba556484f972d2bf04a6a90cb40", "message": "refactor(eureka): Move Eureka out of kork-core into kork-eureka", "committedDate": "2020-07-09T17:06:37Z", "type": "forcePushed"}, {"oid": "0d77525f5933a0e402110cf1b5f42625bf0a7a72", "url": "https://github.com/spinnaker/kork/commit/0d77525f5933a0e402110cf1b5f42625bf0a7a72", "message": "refactor(eureka): Move Eureka out of kork-core into kork-eureka", "committedDate": "2020-07-09T17:09:32Z", "type": "forcePushed"}, {"oid": "077b42ea9e8b2c18e047847ecf09b0a67d4c93cd", "url": "https://github.com/spinnaker/kork/commit/077b42ea9e8b2c18e047847ecf09b0a67d4c93cd", "message": "refactor(eureka): Move Eureka out of kork-core into kork-eureka", "committedDate": "2020-07-09T17:10:10Z", "type": "forcePushed"}, {"oid": "6365b6016a6f1c63d097688a3070c9196dd4d6fc", "url": "https://github.com/spinnaker/kork/commit/6365b6016a6f1c63d097688a3070c9196dd4d6fc", "message": "refactor(eureka): Move Eureka out of kork-core into kork-eureka", "committedDate": "2020-07-09T18:08:20Z", "type": "commit"}, {"oid": "6365b6016a6f1c63d097688a3070c9196dd4d6fc", "url": "https://github.com/spinnaker/kork/commit/6365b6016a6f1c63d097688a3070c9196dd4d6fc", "message": "refactor(eureka): Move Eureka out of kork-core into kork-eureka", "committedDate": "2020-07-09T18:08:20Z", "type": "forcePushed"}]}