{"pr_number": 788, "pr_title": "feat(plugins): Add extension point to append to exception messages delivered to end-users", "pr_createdAt": "2020-09-23T23:04:08Z", "pr_url": "https://github.com/spinnaker/kork/pull/788", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk0MjkyNg==", "url": "https://github.com/spinnaker/kork/pull/788#discussion_r493942926", "bodyText": "Also moved this to kork-api.  I think we should migrate all of kork-exceptions to kork-api.  I know we have plugins that pull in kork-exceptions, so all the more reason to get ahead of this and do it soon.", "author": "jonsie", "createdAt": "2020-09-23T23:05:41Z", "path": "kork-api/src/main/java/com/netflix/spinnaker/kork/api/exceptions/ExceptionSummary.java", "diffHunk": "@@ -30,55 +27,8 @@\n  */\n @Getter\n @Builder\n-@Wither\n public class ExceptionSummary {", "originalCommit": "57031e9780cfcec5be04a8e11e1d3c96a3c11bc5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk0MzMxNQ==", "url": "https://github.com/spinnaker/kork/pull/788#discussion_r493943315", "bodyText": "This code was lifted and shifted from ExceptionSummary to this service ExceptionSummaryService.  The main difference here is that we build the user message via the UserMessageService.\nThis is a breaking change and there will be a corresponding CloudDriver PR.", "author": "jonsie", "createdAt": "2020-09-23T23:06:58Z", "path": "kork-core/src/main/java/com/netflix/spinnaker/kork/web/exceptions/ExceptionSummaryService.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.netflix.spinnaker.kork.web.exceptions;\n+\n+import com.netflix.spinnaker.kork.api.exceptions.ExceptionSummary;\n+import com.netflix.spinnaker.kork.api.exceptions.ExceptionSummary.TraceDetail;\n+import com.netflix.spinnaker.kork.api.exceptions.ExceptionSummary.TraceDetail.TraceDetailBuilder;\n+import com.netflix.spinnaker.kork.exceptions.HasAdditionalAttributes;\n+import com.netflix.spinnaker.kork.exceptions.SpinnakerException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Builds a {@link ExceptionSummary} object from a given Exception. This object is meant to help\n+ * provide context to end-users to help resolve issues, while still offering enough detail for\n+ * operators and developers to trace internal bugs.\n+ */\n+public class ExceptionSummaryService {\n+\n+  private final UserMessageService userMessageService;\n+\n+  public ExceptionSummaryService(UserMessageService userMessageService) {\n+    this.userMessageService = userMessageService;\n+  }\n+\n+  /**\n+   * Provides the {@link ExceptionSummary} given the thrown exception.\n+   *\n+   * @param throwable {@link Throwable}\n+   * @return {@link ExceptionSummary}\n+   */\n+  public ExceptionSummary summary(Throwable throwable) {\n+    List<TraceDetail> details = new ArrayList<>();\n+\n+    Throwable cause = throwable;\n+    do {\n+      details.add(createTraceDetail(cause));\n+      cause = cause.getCause();\n+    } while (cause != null);\n+\n+    List<TraceDetail> reversedDetails = new ArrayList<>(details);\n+    Collections.reverse(reversedDetails);\n+\n+    Boolean retryable =\n+        reversedDetails.stream()\n+            .filter(d -> d.getRetryable() != null)\n+            .findFirst()\n+            .map(TraceDetail::getRetryable)\n+            .orElse(null);\n+\n+    return ExceptionSummary.builder()\n+        .cause(details.get(details.size() - 1).getMessage())\n+        .message(details.get(0).getMessage())\n+        .details(reversedDetails)\n+        .retryable(retryable)\n+        .build();\n+  }\n+\n+  private TraceDetail createTraceDetail(Throwable throwable) {\n+    TraceDetailBuilder detailBuilder = TraceDetail.builder().message(throwable.getMessage());\n+\n+    if (throwable instanceof SpinnakerException) {\n+      SpinnakerException spinnakerException = (SpinnakerException) throwable;\n+\n+      detailBuilder\n+          .userMessage(\n+              userMessageService.toUserMessage(throwable, spinnakerException.getUserMessage()))", "originalCommit": "57031e9780cfcec5be04a8e11e1d3c96a3c11bc5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "56cb1be552ea74f8dc959b0ac478c81154ffe1ba", "chunk": "diff --git a/kork-core/src/main/java/com/netflix/spinnaker/kork/web/exceptions/ExceptionSummaryService.java b/kork-core/src/main/java/com/netflix/spinnaker/kork/web/exceptions/ExceptionSummaryService.java\nindex b6d62a1e..cb869054 100644\n--- a/kork-core/src/main/java/com/netflix/spinnaker/kork/web/exceptions/ExceptionSummaryService.java\n+++ b/kork-core/src/main/java/com/netflix/spinnaker/kork/web/exceptions/ExceptionSummaryService.java\n\n@@ -63,7 +63,7 @@ public class ExceptionSummaryService {\n \n       detailBuilder\n           .userMessage(\n-              userMessageService.toUserMessage(throwable, spinnakerException.getUserMessage()))\n+              userMessageService.userMessage(throwable, spinnakerException.getUserMessage()))\n           .retryable(spinnakerException.getRetryable());\n     }\n     if (throwable instanceof HasAdditionalAttributes) {\n"}}, {"oid": "af05df82fabef84c2355d46033858d9730e20696", "url": "https://github.com/spinnaker/kork/commit/af05df82fabef84c2355d46033858d9730e20696", "message": "feat(plugins): Add extension point to append to exception messages delivered to end-users", "committedDate": "2020-09-24T03:27:56Z", "type": "forcePushed"}, {"oid": "cf73b620ff4ddb7cc44b993bf0af3e6c63396cf6", "url": "https://github.com/spinnaker/kork/commit/cf73b620ff4ddb7cc44b993bf0af3e6c63396cf6", "message": "feat(plugins): Add extension point to append to exception messages delivered to end-users", "committedDate": "2020-09-24T03:47:32Z", "type": "forcePushed"}, {"oid": "5959c56b9fcb906b81ba74443ab5d57c606f4653", "url": "https://github.com/spinnaker/kork/commit/5959c56b9fcb906b81ba74443ab5d57c606f4653", "message": "feat(plugins): Add extension point to append to exception messages delivered to end-users", "committedDate": "2020-09-24T03:50:17Z", "type": "forcePushed"}, {"oid": "56cb1be552ea74f8dc959b0ac478c81154ffe1ba", "url": "https://github.com/spinnaker/kork/commit/56cb1be552ea74f8dc959b0ac478c81154ffe1ba", "message": "feat(plugins): Add extension point to append to exception messages delivered to end-users", "committedDate": "2020-09-24T17:08:19Z", "type": "commit"}, {"oid": "56cb1be552ea74f8dc959b0ac478c81154ffe1ba", "url": "https://github.com/spinnaker/kork/commit/56cb1be552ea74f8dc959b0ac478c81154ffe1ba", "message": "feat(plugins): Add extension point to append to exception messages delivered to end-users", "committedDate": "2020-09-24T17:08:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU4ODA2OQ==", "url": "https://github.com/spinnaker/kork/pull/788#discussion_r494588069", "bodyText": "Maybe worth using @NonnullByDefault in package-info.java?", "author": "robzienert", "createdAt": "2020-09-24T20:22:03Z", "path": "kork-api/src/main/java/com/netflix/spinnaker/kork/api/exceptions/AccessDeniedDetails.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.netflix.spinnaker.kork.api.exceptions;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Details regarding an access denied exception.\n+ *\n+ * <p>TODO(jonsie): We need to migrate fiat-api into a kork module (like kork-authz) so that we can\n+ * create a proper fiat-api module which would provide things like Fiat's Authorization and\n+ * ResourceType objects. For now, this object just uses strings to represent resource type and\n+ * authorization, but eventually should support types provided from fiat-api.\n+ */\n+public class AccessDeniedDetails implements ExceptionDetails {\n+  @Nonnull private final String resourceType;\n+  @Nonnull private final String resourceName;\n+  @Nullable private final String authorization;", "originalCommit": "56cb1be552ea74f8dc959b0ac478c81154ffe1ba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bc25d6eff4cdad6865a8539d5ba2fd0d37cf2acf", "chunk": "diff --git a/kork-api/src/main/java/com/netflix/spinnaker/kork/api/exceptions/AccessDeniedDetails.java b/kork-api/src/main/java/com/netflix/spinnaker/kork/api/exceptions/AccessDeniedDetails.java\nindex c5200ebb..cd6218de 100644\n--- a/kork-api/src/main/java/com/netflix/spinnaker/kork/api/exceptions/AccessDeniedDetails.java\n+++ b/kork-api/src/main/java/com/netflix/spinnaker/kork/api/exceptions/AccessDeniedDetails.java\n\n@@ -1,6 +1,5 @@\n package com.netflix.spinnaker.kork.api.exceptions;\n \n-import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU4ODQwNA==", "url": "https://github.com/spinnaker/kork/pull/788#discussion_r494588404", "bodyText": "Using @NonnullByDefault would also correctly apply @Nonnull here, which is good - since it would be a javac warning as-is.", "author": "robzienert", "createdAt": "2020-09-24T20:22:40Z", "path": "kork-api/src/main/java/com/netflix/spinnaker/kork/api/exceptions/AccessDeniedDetails.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.netflix.spinnaker.kork.api.exceptions;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Details regarding an access denied exception.\n+ *\n+ * <p>TODO(jonsie): We need to migrate fiat-api into a kork module (like kork-authz) so that we can\n+ * create a proper fiat-api module which would provide things like Fiat's Authorization and\n+ * ResourceType objects. For now, this object just uses strings to represent resource type and\n+ * authorization, but eventually should support types provided from fiat-api.\n+ */\n+public class AccessDeniedDetails implements ExceptionDetails {\n+  @Nonnull private final String resourceType;\n+  @Nonnull private final String resourceName;\n+  @Nullable private final String authorization;\n+\n+  public AccessDeniedDetails(String resourceType, String resourceName, String authorization) {", "originalCommit": "56cb1be552ea74f8dc959b0ac478c81154ffe1ba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bc25d6eff4cdad6865a8539d5ba2fd0d37cf2acf", "chunk": "diff --git a/kork-api/src/main/java/com/netflix/spinnaker/kork/api/exceptions/AccessDeniedDetails.java b/kork-api/src/main/java/com/netflix/spinnaker/kork/api/exceptions/AccessDeniedDetails.java\nindex c5200ebb..cd6218de 100644\n--- a/kork-api/src/main/java/com/netflix/spinnaker/kork/api/exceptions/AccessDeniedDetails.java\n+++ b/kork-api/src/main/java/com/netflix/spinnaker/kork/api/exceptions/AccessDeniedDetails.java\n\n@@ -1,6 +1,5 @@\n package com.netflix.spinnaker.kork.api.exceptions;\n \n-import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU4OTMzNg==", "url": "https://github.com/spinnaker/kork/pull/788#discussion_r494589336", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Builds a {@link ExceptionSummary} object from a given Exception. This object is meant to help\n          \n          \n            \n             * Builds an {@link ExceptionSummary} object from a given Exception. This object is meant to help", "author": "robzienert", "createdAt": "2020-09-24T20:24:36Z", "path": "kork-core/src/main/java/com/netflix/spinnaker/kork/web/exceptions/ExceptionSummaryService.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.netflix.spinnaker.kork.web.exceptions;\n+\n+import com.netflix.spinnaker.kork.api.exceptions.ExceptionSummary;\n+import com.netflix.spinnaker.kork.api.exceptions.ExceptionSummary.TraceDetail;\n+import com.netflix.spinnaker.kork.api.exceptions.ExceptionSummary.TraceDetail.TraceDetailBuilder;\n+import com.netflix.spinnaker.kork.exceptions.HasAdditionalAttributes;\n+import com.netflix.spinnaker.kork.exceptions.SpinnakerException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Builds a {@link ExceptionSummary} object from a given Exception. This object is meant to help", "originalCommit": "56cb1be552ea74f8dc959b0ac478c81154ffe1ba", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bc25d6eff4cdad6865a8539d5ba2fd0d37cf2acf", "chunk": "diff --git a/kork-core/src/main/java/com/netflix/spinnaker/kork/web/exceptions/ExceptionSummaryService.java b/kork-core/src/main/java/com/netflix/spinnaker/kork/web/exceptions/ExceptionSummaryService.java\nindex cb869054..d0776377 100644\n--- a/kork-core/src/main/java/com/netflix/spinnaker/kork/web/exceptions/ExceptionSummaryService.java\n+++ b/kork-core/src/main/java/com/netflix/spinnaker/kork/web/exceptions/ExceptionSummaryService.java\n\n@@ -1,5 +1,6 @@\n package com.netflix.spinnaker.kork.web.exceptions;\n \n+import com.netflix.spinnaker.kork.api.exceptions.ExceptionDetails;\n import com.netflix.spinnaker.kork.api.exceptions.ExceptionSummary;\n import com.netflix.spinnaker.kork.api.exceptions.ExceptionSummary.TraceDetail;\n import com.netflix.spinnaker.kork.api.exceptions.ExceptionSummary.TraceDetail.TraceDetailBuilder;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU5MTA0OQ==", "url": "https://github.com/spinnaker/kork/pull/788#discussion_r494591049", "bodyText": "Perhaps decorateException or something? It's always weird when a method takes the same name as the class that it belongs to. For someone who isn't familiar with the codebase, a call to userMessageService.userMessage(e, \"Hello\") is going to pretty confusing.", "author": "robzienert", "createdAt": "2020-09-24T20:27:55Z", "path": "kork-core/src/main/java/com/netflix/spinnaker/kork/web/exceptions/UserMessageService.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.netflix.spinnaker.kork.web.exceptions;\n+\n+import com.netflix.spinnaker.kork.api.exceptions.ExceptionDetails;\n+import com.netflix.spinnaker.kork.api.exceptions.UserMessage;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.springframework.beans.factory.ObjectProvider;\n+\n+/**\n+ * Used to add additional information to an exception message. Messages on exceptions are immutable,\n+ * so this is mostly used when a message is pulled from an exception prior to being sent to an end\n+ * user.\n+ */\n+public class UserMessageService {\n+\n+  private final ObjectProvider<List<UserMessage>> userMessagesProvider;\n+\n+  public UserMessageService(ObjectProvider<List<UserMessage>> userMessagesProvider) {\n+    this.userMessagesProvider = userMessagesProvider;\n+  }\n+\n+  /**\n+   * Provided an exception type, original message, and optional exception details, return a message\n+   * for the end-user.\n+   *\n+   * @param throwable {@link Throwable}\n+   * @param message The user exception message\n+   * @param exceptionDetails Additional {@link ExceptionDetails} about the exception.\n+   * @return The final exception message for the end-user.\n+   */\n+  public String userMessage(", "originalCommit": "56cb1be552ea74f8dc959b0ac478c81154ffe1ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU5NDUzOA==", "url": "https://github.com/spinnaker/kork/pull/788#discussion_r494594538", "bodyText": "Yeah I struggled with the name of this service - wasn't happy with what I settled on.  Gonna have a think on this.", "author": "jonsie", "createdAt": "2020-09-24T20:34:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU5MTA0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYyMDYzNg==", "url": "https://github.com/spinnaker/kork/pull/788#discussion_r494620636", "bodyText": "Ok, gonna go with ExceptionMessageDecorator#decorate.  That way that arguments passed to decorate are more self explanatory.", "author": "jonsie", "createdAt": "2020-09-24T21:27:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU5MTA0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "bc25d6eff4cdad6865a8539d5ba2fd0d37cf2acf", "chunk": "diff --git a/kork-core/src/main/java/com/netflix/spinnaker/kork/web/exceptions/UserMessageService.java b/kork-core/src/main/java/com/netflix/spinnaker/kork/web/exceptions/ExceptionMessageDecorator.java\nsimilarity index 78%\nrename from kork-core/src/main/java/com/netflix/spinnaker/kork/web/exceptions/UserMessageService.java\nrename to kork-core/src/main/java/com/netflix/spinnaker/kork/web/exceptions/ExceptionMessageDecorator.java\nindex 1440bf8b..cee30899 100644\n--- a/kork-core/src/main/java/com/netflix/spinnaker/kork/web/exceptions/UserMessageService.java\n+++ b/kork-core/src/main/java/com/netflix/spinnaker/kork/web/exceptions/ExceptionMessageDecorator.java\n\n@@ -8,14 +8,14 @@ import org.springframework.beans.factory.ObjectProvider;\n \n /**\n  * Used to add additional information to an exception message. Messages on exceptions are immutable,\n- * so this is mostly used when a message is pulled from an exception prior to being sent to an end\n- * user.\n+ * so this is mostly used when a message is pulled from an exception prior to being sent to an\n+ * end-user.\n  */\n-public class UserMessageService {\n+public class ExceptionMessageDecorator {\n \n   private final ObjectProvider<List<UserMessage>> userMessagesProvider;\n \n-  public UserMessageService(ObjectProvider<List<UserMessage>> userMessagesProvider) {\n+  public ExceptionMessageDecorator(ObjectProvider<List<UserMessage>> userMessagesProvider) {\n     this.userMessagesProvider = userMessagesProvider;\n   }\n \n"}}, {"oid": "bc25d6eff4cdad6865a8539d5ba2fd0d37cf2acf", "url": "https://github.com/spinnaker/kork/commit/bc25d6eff4cdad6865a8539d5ba2fd0d37cf2acf", "message": "fix(plugins): Rename UserMessageService to ExceptionMessageDecorator and add NonnullByDefault", "committedDate": "2020-09-24T21:28:34Z", "type": "commit"}, {"oid": "5993ad6264ea356c0d6b0b370310eaa643b39198", "url": "https://github.com/spinnaker/kork/commit/5993ad6264ea356c0d6b0b370310eaa643b39198", "message": "chore(*): Address minor typos", "committedDate": "2020-09-24T21:30:18Z", "type": "commit"}, {"oid": "574eed9edaee5b55e635a2aaff8c31a9bc9c433f", "url": "https://github.com/spinnaker/kork/commit/574eed9edaee5b55e635a2aaff8c31a9bc9c433f", "message": "fix(plugins): One last rename - rename from UserMessage to ExceptionMessage", "committedDate": "2020-09-24T21:44:57Z", "type": "commit"}, {"oid": "d64b1ffa073d8089300167bf0545649ed62d4f03", "url": "https://github.com/spinnaker/kork/commit/d64b1ffa073d8089300167bf0545649ed62d4f03", "message": "fix(plugins): More cleanup as a result of renaming", "committedDate": "2020-09-24T21:54:54Z", "type": "commit"}]}