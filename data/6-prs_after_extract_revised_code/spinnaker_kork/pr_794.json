{"pr_number": 794, "pr_title": "feat(exceptions): Support decorating error messages that are the result of validation errors", "pr_createdAt": "2020-09-30T20:58:41Z", "pr_url": "https://github.com/spinnaker/kork/pull/794", "timeline": [{"oid": "c1167510066b10162f2351c3b7002f1cc06f5372", "url": "https://github.com/spinnaker/kork/commit/c1167510066b10162f2351c3b7002f1cc06f5372", "message": "feat(exceptions): Support decorating error messages that are the result of validation errors", "committedDate": "2020-09-30T20:58:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc5NzA1Nw==", "url": "https://github.com/spinnaker/kork/pull/794#discussion_r497797057", "bodyText": "Deleted this concept of supports - the implementation of the two message functions will just determine if the throwable or errorCode are supported.", "author": "jonsie", "createdAt": "2020-09-30T20:59:43Z", "path": "kork-api/src/main/java/com/netflix/spinnaker/kork/api/exceptions/ExceptionMessage.java", "diffHunk": "@@ -12,12 +13,6 @@\n  */\n public interface ExceptionMessage extends SpinnakerExtensionPoint {\n \n-  /**\n-   * The user message generated will largely be based off the exception type, so check if this\n-   * implementation supports the specified exception type.\n-   */\n-  boolean supports(Class<? extends Throwable> throwable);", "originalCommit": "c1167510066b10162f2351c3b7002f1cc06f5372", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc5NzUyMw==", "url": "https://github.com/spinnaker/kork/pull/794#discussion_r497797523", "bodyText": "Unrelated - just noticed I missed an exception message decoration spot in GenericExceptionHandlers.", "author": "jonsie", "createdAt": "2020-09-30T21:00:35Z", "path": "kork-web/src/main/java/com/netflix/spinnaker/kork/web/exceptions/GenericExceptionHandlers.java", "diffHunk": "@@ -76,7 +76,8 @@ public void handleNotFoundException(\n   public void handleInvalidRequestException(\n       Exception e, HttpServletResponse response, HttpServletRequest request) throws IOException {\n     storeException(request, response, e);\n-    response.sendError(HttpStatus.BAD_REQUEST.value(), e.getMessage());\n+    response.sendError(\n+        HttpStatus.BAD_REQUEST.value(), exceptionMessageDecorator.decorate(e, e.getMessage()));", "originalCommit": "c1167510066b10162f2351c3b7002f1cc06f5372", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc5OTQxNw==", "url": "https://github.com/spinnaker/kork/pull/794#discussion_r497799417", "bodyText": "Support decorating an exception message based off an errorCode.  This will typically come from a CloudDriver validation error (UPDATE: actually we send off these validation errors from a few other services too).", "author": "jonsie", "createdAt": "2020-09-30T21:04:21Z", "path": "kork-api/src/main/java/com/netflix/spinnaker/kork/api/exceptions/ExceptionMessage.java", "diffHunk": "@@ -27,6 +22,17 @@\n    * @return The string to append to the message. Note that this will not modify the original\n    *     exception message but only append to the message that is delivered to the end-user.\n    */\n-  @Nullable\n-  String message(Throwable throwable, @Nullable ExceptionDetails exceptionDetails);\n+  Optional<String> message(Throwable throwable, @Nullable ExceptionDetails exceptionDetails);\n+\n+  /**\n+   * Create the message.\n+   *\n+   * @param errorCode The error code. This typically comes into play when using Spring's Errors\n+   *     during validation, prior to throwing an exception.\n+   * @param exceptionDetails Additional details about the error that can be used to inform the\n+   *     message.\n+   * @return The string to append to the message. Note that this will not modify the original\n+   *     exception message but only append to the message that is delivered to the end-user.\n+   */\n+  Optional<String> message(String errorCode, @Nullable ExceptionDetails exceptionDetails);", "originalCommit": "c1167510066b10162f2351c3b7002f1cc06f5372", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}]}