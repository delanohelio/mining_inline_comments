{"pr_number": 1375, "pr_title": "Compute star bus voltages of threeWindingsTransformers and boundary bus voltages of dangling lines", "pr_createdAt": "2020-06-26T16:59:44Z", "pr_url": "https://github.com/powsybl/powsybl-core/pull/1375", "timeline": [{"oid": "ca8074fa1887ce6a4b33eea5f32c83a289f18c55", "url": "https://github.com/powsybl/powsybl-core/commit/ca8074fa1887ce6a4b33eea5f32c83a289f18c55", "message": "Calulate star bus voltage and danglingLine dummy bus voltage.\n\nSigned-off-by: Jos\u00e9 Antonio Marqu\u00e9s <marquesja@aia.es>", "committedDate": "2020-06-25T16:13:05Z", "type": "commit"}, {"oid": "1a45517dc37b1ead3b26275f821967fe0b38809f", "url": "https://github.com/powsybl/powsybl-core/commit/1a45517dc37b1ead3b26275f821967fe0b38809f", "message": "Pretty names\n\nSigned-off-by: Jos\u00e9 Antonio Marqu\u00e9s <marquesja@aia.es>", "committedDate": "2020-06-26T13:40:18Z", "type": "commit"}, {"oid": "edb65cb92fed4dd042f5fad8789c55a7ee7ab428", "url": "https://github.com/powsybl/powsybl-core/commit/edb65cb92fed4dd042f5fad8789c55a7ee7ab428", "message": "Add unitary tests\n\nSigned-off-by: Jos\u00e9 Antonio Marqu\u00e9s <marquesja@aia.es>", "committedDate": "2020-06-26T16:39:26Z", "type": "commit"}, {"oid": "7239fc326d5f72678fbee5fe0ff33a69768e7ef1", "url": "https://github.com/powsybl/powsybl-core/commit/7239fc326d5f72678fbee5fe0ff33a69768e7ef1", "message": "Merge branch 'master' into iidm_voltages_t3wts_danglingLines", "committedDate": "2020-06-26T16:40:22Z", "type": "commit"}, {"oid": "d18bfa7096bf9422cc80af6edc301f1ee36cd885", "url": "https://github.com/powsybl/powsybl-core/commit/d18bfa7096bf9422cc80af6edc301f1ee36cd885", "message": "Merge branch 'master' into iidm_voltages_t3wts_danglingLines", "committedDate": "2020-07-02T07:46:38Z", "type": "commit"}, {"oid": "e3e4f279c9755f986c0678aa851d3f205b9359a0", "url": "https://github.com/powsybl/powsybl-core/commit/e3e4f279c9755f986c0678aa851d3f205b9359a0", "message": "add unitary test\n\nSigned-off-by: Jos\u00e9 Antonio Marqu\u00e9s <marquesja@aia.es>", "committedDate": "2020-07-02T08:53:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg3NTY0OQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1375#discussion_r448875649", "bodyText": "Do we miss the parameter twtSplitShuntAdmittance here ? It is a parameter for the loadflow but it could be used here.", "author": "annetill", "createdAt": "2020-07-02T09:34:47Z", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/DanglingLineData.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.util;\n+\n+import org.apache.commons.math3.complex.Complex;\n+import com.powsybl.iidm.network.DanglingLine;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+public class DanglingLineData {\n+\n+    private final String id;\n+\n+    private final double r;\n+    private final double x;\n+    private final double g1;\n+    private final double g2;\n+    private final double b1;\n+    private final double b2;\n+\n+    private final double u1;\n+    private final double theta1;\n+    private final double p0;\n+    private final double q0;\n+\n+    double boundaryBusU;\n+    double boundaryBusTheta;\n+\n+    public DanglingLineData(DanglingLine danglingLine) {\n+\n+        id = danglingLine.getId();\n+        r = danglingLine.getR();\n+        x = danglingLine.getX();\n+        g1 = danglingLine.getG();\n+        b1 = danglingLine.getB();\n+        g2 = 0.0;", "originalCommit": "e3e4f279c9755f986c0678aa851d3f205b9359a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ2MDkyMA==", "url": "https://github.com/powsybl/powsybl-core/pull/1375#discussion_r449460920", "bodyText": "The twtSplitShuntAdmittance parameter is only for transformers. The shunt admittance is always split in lines, but we are not sure about dangling lines. We are checking if we should split or not.", "author": "marqueslanauja", "createdAt": "2020-07-03T08:48:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg3NTY0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjAyNzE4NA==", "url": "https://github.com/powsybl/powsybl-core/pull/1375#discussion_r452027184", "bodyText": "Why do you say that the shunt admittance is always split for lines and dangling lines ? In IIDM, you can have what you want as B1, G1, B2 and G2 and it does not mean for me that it is split in 2 equal parts. So where do you have seen this in the code ? If you are right, I am not sure to understand why we leave the possibility to set B1, G1, B2 and G2. In a dangling line, as you have only B and G, you have the right to split it or not when running the powerflow. In the open loadflow, we split it for example.", "author": "annetill", "createdAt": "2020-07-09T07:45:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg3NTY0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjExMzQ4Nw==", "url": "https://github.com/powsybl/powsybl-core/pull/1375#discussion_r452113487", "bodyText": "When I said that the shunt admittance is always split for lines I was referring in the cgmes conversion.  In CGMES model the total shunt admittance is received and is split in the conversion process. I prefer the line model with G1, B1, G2, B2 attributes as it is more generic and allows a \"clean convert process\" from standard tools, like Psse, that use in line model the same four attributes. I should prefer also to have the four attributes in the danglingLine model, to be coherent with the line model and to eliminate the possibility of splitting when running the load flow.  There is only one real model so i prefer to have an iidm model that allows me to eliminate all these ambiguities in the convert process.", "author": "marqueslanauja", "createdAt": "2020-07-09T10:15:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg3NTY0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1MzEwMA==", "url": "https://github.com/powsybl/powsybl-core/pull/1375#discussion_r452153100", "bodyText": "Thanks for your answer. I think that for dangling line, we only have a B and a G because a dangling line is a part of a merged line, but I agree if we have a computation on a not merged network, it is wierd.\nAs you PR is over IIDM (and not CGMES model), we have to take B1, G1, B2 and G2 for a line and for dangling line, I agree that it could be better to split it as you have done as we don't have the 4 attributes...", "author": "annetill", "createdAt": "2020-07-09T11:35:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg3NTY0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "03471f1d853a4b1541d9c64d7047e008b4677396", "chunk": "diff --git a/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/DanglingLineData.java b/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/DanglingLineData.java\nindex e24a81a46..696c967ce 100644\n--- a/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/DanglingLineData.java\n+++ b/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/DanglingLineData.java\n\n@@ -37,10 +37,10 @@ public class DanglingLineData {\n         id = danglingLine.getId();\n         r = danglingLine.getR();\n         x = danglingLine.getX();\n-        g1 = danglingLine.getG();\n-        b1 = danglingLine.getB();\n-        g2 = 0.0;\n-        b2 = 0.0;\n+        g1 = danglingLine.getG() / 2.0;\n+        b1 = danglingLine.getB() / 2.0;\n+        g2 = danglingLine.getG() / 2.0;\n+        b2 = danglingLine.getB() / 2.0;\n         p0 = danglingLine.getP0();\n         q0 = danglingLine.getQ0();\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg3NjY2Mg==", "url": "https://github.com/powsybl/powsybl-core/pull/1375#discussion_r448876662", "bodyText": "It is here an approximation ? As r and x are not equal to zero ?", "author": "annetill", "createdAt": "2020-07-02T09:36:32Z", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/DanglingLineData.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.util;\n+\n+import org.apache.commons.math3.complex.Complex;\n+import com.powsybl.iidm.network.DanglingLine;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+public class DanglingLineData {\n+\n+    private final String id;\n+\n+    private final double r;\n+    private final double x;\n+    private final double g1;\n+    private final double g2;\n+    private final double b1;\n+    private final double b2;\n+\n+    private final double u1;\n+    private final double theta1;\n+    private final double p0;\n+    private final double q0;\n+\n+    double boundaryBusU;\n+    double boundaryBusTheta;\n+\n+    public DanglingLineData(DanglingLine danglingLine) {\n+\n+        id = danglingLine.getId();\n+        r = danglingLine.getR();\n+        x = danglingLine.getX();\n+        g1 = danglingLine.getG();\n+        b1 = danglingLine.getB();\n+        g2 = 0.0;\n+        b2 = 0.0;\n+        p0 = danglingLine.getP0();\n+        q0 = danglingLine.getQ0();\n+\n+        u1 = getV(danglingLine);\n+        theta1 = getTheta(danglingLine);\n+\n+        boundaryBusU = Double.NaN;\n+        boundaryBusTheta = Double.NaN;\n+\n+        Complex v1 = new Complex(u1 * Math.cos(theta1), u1 * Math.sin(theta1));\n+\n+        Complex vBoundaryBus = new Complex(Double.NaN, Double.NaN);\n+        if (p0 == 0.0 && q0 == 0.0) {\n+            LinkData.BranchAdmittanceMatrix adm = LinkData.calculateBranchAdmittance(r, x, 1.0, 0.0, 1.0, 0.0, new Complex(g1, b1), new Complex(g2, b2));\n+            vBoundaryBus = adm.y21.multiply(v1).negate().divide(adm.y22);\n+        } else {\n+\n+            // Two buses Loadflow\n+            double pBoundaryBus = -p0;", "originalCommit": "e3e4f279c9755f986c0678aa851d3f205b9359a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE1ODg3OQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1375#discussion_r449158879", "bodyText": "No, the exact voltage at the boundary bus it is calculated. It is a two bus Loadflow and can be solved as it is a second degree equation.", "author": "marqueslanauja", "createdAt": "2020-07-02T17:12:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg3NjY2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI3ODA5NA==", "url": "https://github.com/powsybl/powsybl-core/pull/1375#discussion_r452278094", "bodyText": "I am going to trust you for this second degree equation resolution, I have tried but I am a bit lost with sigmar and sigmai part. But I understand well the equation system, so I think I am going to trust you.", "author": "annetill", "createdAt": "2020-07-09T14:52:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg3NjY2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM0ODc3MQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1375#discussion_r452348771", "bodyText": "Try this link Two-buses Toni Trias the father of HELM explains how to solve the two buses problem exactly (second degree equation) and how to solve it applying the HELM methodology to this particular case.", "author": "marqueslanauja", "createdAt": "2020-07-09T16:38:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg3NjY2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY0MjY5Mw==", "url": "https://github.com/powsybl/powsybl-core/pull/1375#discussion_r452642693", "bodyText": "Thanks a lot and I have succeed with that help. I wonder about the support of this resolution in Powsybl. Mabye, could you add the link you gave me in the comment of the code or more comments ? We don't have our background but we will need to support that code in the future.", "author": "annetill", "createdAt": "2020-07-10T06:16:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg3NjY2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "03471f1d853a4b1541d9c64d7047e008b4677396", "chunk": "diff --git a/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/DanglingLineData.java b/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/DanglingLineData.java\nindex e24a81a46..696c967ce 100644\n--- a/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/DanglingLineData.java\n+++ b/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/DanglingLineData.java\n\n@@ -37,10 +37,10 @@ public class DanglingLineData {\n         id = danglingLine.getId();\n         r = danglingLine.getR();\n         x = danglingLine.getX();\n-        g1 = danglingLine.getG();\n-        b1 = danglingLine.getB();\n-        g2 = 0.0;\n-        b2 = 0.0;\n+        g1 = danglingLine.getG() / 2.0;\n+        b1 = danglingLine.getB() / 2.0;\n+        g2 = danglingLine.getG() / 2.0;\n+        b2 = danglingLine.getB() / 2.0;\n         p0 = danglingLine.getP0();\n         q0 = danglingLine.getQ0();\n \n"}}, {"oid": "03471f1d853a4b1541d9c64d7047e008b4677396", "url": "https://github.com/powsybl/powsybl-core/commit/03471f1d853a4b1541d9c64d7047e008b4677396", "message": "split shunt admittance\n\nSigned-off-by: Jos\u00e9 Antonio Marqu\u00e9s <marquesja@aia.es>", "committedDate": "2020-07-08T07:24:53Z", "type": "commit"}, {"oid": "7e04021f10861c1de899e4e4fc74fb11968ab0d9", "url": "https://github.com/powsybl/powsybl-core/commit/7e04021f10861c1de899e4e4fc74fb11968ab0d9", "message": "Merge branch 'master' into iidm_voltages_t3wts_danglingLines", "committedDate": "2020-07-08T08:32:17Z", "type": "commit"}, {"oid": "237418f2e70c73900c88fd1a302db7527ceb5927", "url": "https://github.com/powsybl/powsybl-core/commit/237418f2e70c73900c88fd1a302db7527ceb5927", "message": "Merge branch 'master' into iidm_voltages_t3wts_danglingLines", "committedDate": "2020-07-09T15:10:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMxNzU5NQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1375#discussion_r452317595", "bodyText": "We could use\nangle=getAngle(danglingLine)\nComplex v1 = ComplexUtils.polar2Complex(v, Math.toRadians(angle));\n\nSo the conversion degrees -> radians is in a single point, and the creation of complex from polar coordinates is explicit.", "author": "zamarrenolm", "createdAt": "2020-07-09T15:48:52Z", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/DanglingLineData.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.util;\n+\n+import org.apache.commons.math3.complex.Complex;\n+import com.powsybl.iidm.network.DanglingLine;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+public class DanglingLineData {\n+\n+    private final String id;\n+\n+    private final double r;\n+    private final double x;\n+    private final double g1;\n+    private final double g2;\n+    private final double b1;\n+    private final double b2;\n+\n+    private final double u1;\n+    private final double theta1;\n+    private final double p0;\n+    private final double q0;\n+\n+    double boundaryBusU;\n+    double boundaryBusTheta;\n+\n+    public DanglingLineData(DanglingLine danglingLine) {\n+\n+        id = danglingLine.getId();\n+        r = danglingLine.getR();\n+        x = danglingLine.getX();\n+        g1 = danglingLine.getG() / 2.0;\n+        b1 = danglingLine.getB() / 2.0;\n+        g2 = danglingLine.getG() / 2.0;\n+        b2 = danglingLine.getB() / 2.0;\n+        p0 = danglingLine.getP0();\n+        q0 = danglingLine.getQ0();\n+\n+        u1 = getV(danglingLine);\n+        theta1 = getTheta(danglingLine);\n+\n+        boundaryBusU = Double.NaN;\n+        boundaryBusTheta = Double.NaN;\n+\n+        Complex v1 = new Complex(u1 * Math.cos(theta1), u1 * Math.sin(theta1));", "originalCommit": "237418f2e70c73900c88fd1a302db7527ceb5927", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ5NDI2MA==", "url": "https://github.com/powsybl/powsybl-core/pull/1375#discussion_r453494260", "bodyText": "Solved", "author": "marqueslanauja", "createdAt": "2020-07-13T08:51:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMxNzU5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "d5ad8ddfb572b2c07eaaeda50e154efd993df215", "chunk": "diff --git a/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/DanglingLineData.java b/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/DanglingLineData.java\nindex 696c967ce..33585e56e 100644\n--- a/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/DanglingLineData.java\n+++ b/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/DanglingLineData.java\n\n@@ -7,6 +7,8 @@\n package com.powsybl.iidm.network.util;\n \n import org.apache.commons.math3.complex.Complex;\n+import org.apache.commons.math3.complex.ComplexUtils;\n+\n import com.powsybl.iidm.network.DanglingLine;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMyMDc4NQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1375#discussion_r452320785", "bodyText": "Maybe we could make s0 = new Complex(pBoundaryBus, qBoundaryBus) and then let sigma be also a Complex number calculated from zt and s0, so we end up with more compact code (less potential errors)", "author": "zamarrenolm", "createdAt": "2020-07-09T15:53:49Z", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/DanglingLineData.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.util;\n+\n+import org.apache.commons.math3.complex.Complex;\n+import com.powsybl.iidm.network.DanglingLine;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+public class DanglingLineData {\n+\n+    private final String id;\n+\n+    private final double r;\n+    private final double x;\n+    private final double g1;\n+    private final double g2;\n+    private final double b1;\n+    private final double b2;\n+\n+    private final double u1;\n+    private final double theta1;\n+    private final double p0;\n+    private final double q0;\n+\n+    double boundaryBusU;\n+    double boundaryBusTheta;\n+\n+    public DanglingLineData(DanglingLine danglingLine) {\n+\n+        id = danglingLine.getId();\n+        r = danglingLine.getR();\n+        x = danglingLine.getX();\n+        g1 = danglingLine.getG() / 2.0;\n+        b1 = danglingLine.getB() / 2.0;\n+        g2 = danglingLine.getG() / 2.0;\n+        b2 = danglingLine.getB() / 2.0;\n+        p0 = danglingLine.getP0();\n+        q0 = danglingLine.getQ0();\n+\n+        u1 = getV(danglingLine);\n+        theta1 = getTheta(danglingLine);\n+\n+        boundaryBusU = Double.NaN;\n+        boundaryBusTheta = Double.NaN;\n+\n+        Complex v1 = new Complex(u1 * Math.cos(theta1), u1 * Math.sin(theta1));\n+\n+        Complex vBoundaryBus = new Complex(Double.NaN, Double.NaN);\n+        if (p0 == 0.0 && q0 == 0.0) {\n+            LinkData.BranchAdmittanceMatrix adm = LinkData.calculateBranchAdmittance(r, x, 1.0, 0.0, 1.0, 0.0, new Complex(g1, b1), new Complex(g2, b2));\n+            vBoundaryBus = adm.y21.multiply(v1).negate().divide(adm.y22);\n+        } else {\n+\n+            // Two buses Loadflow\n+            double pBoundaryBus = -p0;\n+            double qBoundaryBus = -q0;\n+            Complex ytr = new Complex(r, x).reciprocal();\n+            Complex ysh2 = new Complex(g2, b2);\n+            Complex zt = ytr.add(ysh2).reciprocal();\n+            Complex v0 = ytr.multiply(v1).divide(ytr.add(ysh2));\n+            double v02 = v0.abs() * v0.abs();\n+\n+            double sigmar = (zt.getImaginary() * qBoundaryBus + zt.getReal() * pBoundaryBus) / v02;\n+            double sigmai = (zt.getImaginary() * pBoundaryBus - zt.getReal() * qBoundaryBus) / v02;", "originalCommit": "237418f2e70c73900c88fd1a302db7527ceb5927", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ5Mzc4Nw==", "url": "https://github.com/powsybl/powsybl-core/pull/1375#discussion_r453493787", "bodyText": "Done", "author": "marqueslanauja", "createdAt": "2020-07-13T08:50:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMyMDc4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "d5ad8ddfb572b2c07eaaeda50e154efd993df215", "chunk": "diff --git a/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/DanglingLineData.java b/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/DanglingLineData.java\nindex 696c967ce..33585e56e 100644\n--- a/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/DanglingLineData.java\n+++ b/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/DanglingLineData.java\n\n@@ -7,6 +7,8 @@\n package com.powsybl.iidm.network.util;\n \n import org.apache.commons.math3.complex.Complex;\n+import org.apache.commons.math3.complex.ComplexUtils;\n+\n import com.powsybl.iidm.network.DanglingLine;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMyMjEwMw==", "url": "https://github.com/powsybl/powsybl-core/pull/1375#discussion_r452322103", "bodyText": "I think we could get always the voltage and angle from the BusView Bus. Why trying to obtain it from BusBreakerView first ?", "author": "zamarrenolm", "createdAt": "2020-07-09T15:55:46Z", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/DanglingLineData.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.iidm.network.util;\n+\n+import org.apache.commons.math3.complex.Complex;\n+import com.powsybl.iidm.network.DanglingLine;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+public class DanglingLineData {\n+\n+    private final String id;\n+\n+    private final double r;\n+    private final double x;\n+    private final double g1;\n+    private final double g2;\n+    private final double b1;\n+    private final double b2;\n+\n+    private final double u1;\n+    private final double theta1;\n+    private final double p0;\n+    private final double q0;\n+\n+    double boundaryBusU;\n+    double boundaryBusTheta;\n+\n+    public DanglingLineData(DanglingLine danglingLine) {\n+\n+        id = danglingLine.getId();\n+        r = danglingLine.getR();\n+        x = danglingLine.getX();\n+        g1 = danglingLine.getG() / 2.0;\n+        b1 = danglingLine.getB() / 2.0;\n+        g2 = danglingLine.getG() / 2.0;\n+        b2 = danglingLine.getB() / 2.0;\n+        p0 = danglingLine.getP0();\n+        q0 = danglingLine.getQ0();\n+\n+        u1 = getV(danglingLine);\n+        theta1 = getTheta(danglingLine);\n+\n+        boundaryBusU = Double.NaN;\n+        boundaryBusTheta = Double.NaN;\n+\n+        Complex v1 = new Complex(u1 * Math.cos(theta1), u1 * Math.sin(theta1));\n+\n+        Complex vBoundaryBus = new Complex(Double.NaN, Double.NaN);\n+        if (p0 == 0.0 && q0 == 0.0) {\n+            LinkData.BranchAdmittanceMatrix adm = LinkData.calculateBranchAdmittance(r, x, 1.0, 0.0, 1.0, 0.0, new Complex(g1, b1), new Complex(g2, b2));\n+            vBoundaryBus = adm.y21.multiply(v1).negate().divide(adm.y22);\n+        } else {\n+\n+            // Two buses Loadflow\n+            double pBoundaryBus = -p0;\n+            double qBoundaryBus = -q0;\n+            Complex ytr = new Complex(r, x).reciprocal();\n+            Complex ysh2 = new Complex(g2, b2);\n+            Complex zt = ytr.add(ysh2).reciprocal();\n+            Complex v0 = ytr.multiply(v1).divide(ytr.add(ysh2));\n+            double v02 = v0.abs() * v0.abs();\n+\n+            double sigmar = (zt.getImaginary() * qBoundaryBus + zt.getReal() * pBoundaryBus) / v02;\n+            double sigmai = (zt.getImaginary() * pBoundaryBus - zt.getReal() * qBoundaryBus) / v02;\n+            double d = 0.25 + sigmar - sigmai * sigmai;\n+            // d < 0 Collapsed network\n+            if (d >= 0) {\n+                vBoundaryBus = new Complex(0.5 + Math.sqrt(d), sigmai).multiply(v0);\n+            }\n+        }\n+\n+        boundaryBusU = vBoundaryBus.abs();\n+        boundaryBusTheta = vBoundaryBus.getArgument();\n+    }\n+\n+    private static double getV(DanglingLine danglingLine) {\n+        if (danglingLine.getTerminal().getBusBreakerView() != null) {", "originalCommit": "237418f2e70c73900c88fd1a302db7527ceb5927", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ5Mzk2MQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1375#discussion_r453493961", "bodyText": "Done", "author": "marqueslanauja", "createdAt": "2020-07-13T08:50:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMyMjEwMw=="}], "type": "inlineReview", "revised_code": {"commit": "d5ad8ddfb572b2c07eaaeda50e154efd993df215", "chunk": "diff --git a/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/DanglingLineData.java b/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/DanglingLineData.java\nindex 696c967ce..33585e56e 100644\n--- a/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/DanglingLineData.java\n+++ b/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/DanglingLineData.java\n\n@@ -7,6 +7,8 @@\n package com.powsybl.iidm.network.util;\n \n import org.apache.commons.math3.complex.Complex;\n+import org.apache.commons.math3.complex.ComplexUtils;\n+\n import com.powsybl.iidm.network.DanglingLine;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMyMzE2Ng==", "url": "https://github.com/powsybl/powsybl-core/pull/1375#discussion_r452323166", "bodyText": "I suggest we use v1 = ComplexUtils.polar2Complex(u1, theta1)", "author": "zamarrenolm", "createdAt": "2020-07-09T15:57:25Z", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/TwtData.java", "diffHunk": "@@ -310,8 +345,20 @@ private void calculateThreeConnectedLegsFlow(double u1, double theta1, double u2\n         return LinkData.flowBothEnds(admittance.y11, admittance.y12, admittance.y21, admittance.y22, v1, v2);\n     }\n \n-    private Complex calculateOneConnectedLegFlow(double u, double theta,\n-        LinkData.BranchAdmittanceMatrix admittanceMatrixLeg, LinkData.BranchAdmittanceMatrix admittanceMatrixFirstOpenLeg,\n+    private Complex calculateTwoConnectedLegsStarBusVoltage(double u1, double theta1, double u2, double theta2,\n+        LinkData.BranchAdmittanceMatrix admittanceMatrixLeg1, LinkData.BranchAdmittanceMatrix admittanceMatrixLeg2,\n+        LinkData.BranchAdmittanceMatrix admittanceMatrixOpenLeg) {\n+\n+        Complex v1 = new Complex(u1 * Math.cos(theta1), u1 * Math.sin(theta1));\n+        Complex v2 = new Complex(u2 * Math.cos(theta2), u2 * Math.sin(theta2));", "originalCommit": "237418f2e70c73900c88fd1a302db7527ceb5927", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUxNjA1MA==", "url": "https://github.com/powsybl/powsybl-core/pull/1375#discussion_r452516050", "bodyText": "Done", "author": "marqueslanauja", "createdAt": "2020-07-09T22:04:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMyMzE2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "d5ad8ddfb572b2c07eaaeda50e154efd993df215", "chunk": "diff --git a/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/TwtData.java b/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/TwtData.java\nindex f63b3fb97..d4dd8a8fa 100644\n--- a/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/TwtData.java\n+++ b/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/util/TwtData.java\n\n@@ -336,8 +337,8 @@ public class TwtData {\n         LinkData.BranchAdmittanceMatrix admittanceMatrixLeg1, LinkData.BranchAdmittanceMatrix admittanceMatrixLeg2,\n         LinkData.BranchAdmittanceMatrix admittanceMatrixOpenLeg) {\n \n-        Complex v1 = new Complex(u1 * Math.cos(theta1), u1 * Math.sin(theta1));\n-        Complex v2 = new Complex(u2 * Math.cos(theta2), u2 * Math.sin(theta2));\n+        Complex v1 = ComplexUtils.polar2Complex(u1, theta1);\n+        Complex v2 = ComplexUtils.polar2Complex(u2, theta2);\n \n         LinkData.BranchAdmittanceMatrix admittance = calculateTwoConnectedLegsAdmittance(admittanceMatrixLeg1,\n             admittanceMatrixLeg2, admittanceMatrixOpenLeg);\n"}}, {"oid": "d5ad8ddfb572b2c07eaaeda50e154efd993df215", "url": "https://github.com/powsybl/powsybl-core/commit/d5ad8ddfb572b2c07eaaeda50e154efd993df215", "message": "Apply reviewer comments\n\nSigned-off-by: Jos\u00e9 Antonio Marqu\u00e9s <marquesja@aia.es>", "committedDate": "2020-07-09T22:11:00Z", "type": "commit"}, {"oid": "687b93a86a2af408fefda5acc623856c57147251", "url": "https://github.com/powsybl/powsybl-core/commit/687b93a86a2af408fefda5acc623856c57147251", "message": "Apply reviewer comments\n\nSigned-off-by: Jos\u00e9 Antonio Marqu\u00e9s <marquesja@aia.es>", "committedDate": "2020-07-13T08:36:35Z", "type": "commit"}, {"oid": "aee18f4895ff59d689500eb80b5ceeac33c30593", "url": "https://github.com/powsybl/powsybl-core/commit/aee18f4895ff59d689500eb80b5ceeac33c30593", "message": "Merge branch 'master' into iidm_voltages_t3wts_danglingLines", "committedDate": "2020-07-13T08:36:52Z", "type": "commit"}]}