{"pr_number": 1485, "pr_title": "Prepare for integration: CGMES SSH export using only Network data", "pr_createdAt": "2020-09-25T06:08:53Z", "pr_url": "https://github.com/powsybl/powsybl-core/pull/1485", "timeline": [{"oid": "3c63aa4bd4200c0253ecf50f7d527c897c353116", "url": "https://github.com/powsybl/powsybl-core/commit/3c63aa4bd4200c0253ecf50f7d527c897c353116", "message": "Implement CgmesExportContext\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>", "committedDate": "2020-09-22T08:30:19Z", "type": "commit"}, {"oid": "fd88f62e3a3fa1ac0622f57704bf8c6f6dc5d047", "url": "https://github.com/powsybl/powsybl-core/commit/fd88f62e3a3fa1ac0622f57704bf8c6f6dc5d047", "message": "Implement StateVariablesExport\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>", "committedDate": "2020-09-22T09:06:11Z", "type": "commit"}, {"oid": "6154eeb1de7c1bf69d72dcca938b811b100f44f5", "url": "https://github.com/powsybl/powsybl-core/commit/6154eeb1de7c1bf69d72dcca938b811b100f44f5", "message": "Rename dangling line's aliases in order to know which terminal is the boundary terminal\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>", "committedDate": "2020-09-22T11:24:45Z", "type": "commit"}, {"oid": "37ae2603545d39ee25ab4415ead5e6bc9e8efc08", "url": "https://github.com/powsybl/powsybl-core/commit/37ae2603545d39ee25ab4415ead5e6bc9e8efc08", "message": "Add SV injections\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>", "committedDate": "2020-09-22T11:41:11Z", "type": "commit"}, {"oid": "ec0f554b399fa04bf1fda46ac5a0aeecc66afe6e", "url": "https://github.com/powsybl/powsybl-core/commit/ec0f554b399fa04bf1fda46ac5a0aeecc66afe6e", "message": "SvInjection are set as fictitious\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>", "committedDate": "2020-09-22T11:47:49Z", "type": "commit"}, {"oid": "1952939d9687e087dc699fac1dddb95685256ced", "url": "https://github.com/powsybl/powsybl-core/commit/1952939d9687e087dc699fac1dddb95685256ced", "message": "Refactor complexity of writeTopologicalIslands\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>", "committedDate": "2020-09-22T12:12:07Z", "type": "commit"}, {"oid": "364dfd34f7ba9075d4e2e94ca41cddf67abbb395", "url": "https://github.com/powsybl/powsybl-core/commit/364dfd34f7ba9075d4e2e94ca41cddf67abbb395", "message": "Add test + small correction\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>", "committedDate": "2020-09-22T13:59:59Z", "type": "commit"}, {"oid": "94dbdc2341c2a205a1de8a41411eb495adbe689c", "url": "https://github.com/powsybl/powsybl-core/commit/94dbdc2341c2a205a1de8a41411eb495adbe689c", "message": "Add test\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>", "committedDate": "2020-09-22T14:47:46Z", "type": "commit"}, {"oid": "2127dc461711b0bda6ad04f2529ac4f6acf2cb0c", "url": "https://github.com/powsybl/powsybl-core/commit/2127dc461711b0bda6ad04f2529ac4f6acf2cb0c", "message": "Don't use deprecated method\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>", "committedDate": "2020-09-22T14:50:27Z", "type": "commit"}, {"oid": "bd36bb4cee107edd7cfe1e61897bbf4fb2e1e12c", "url": "https://github.com/powsybl/powsybl-core/commit/bd36bb4cee107edd7cfe1e61897bbf4fb2e1e12c", "message": "Add test for CgmesExportContext\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>", "committedDate": "2020-09-23T07:48:25Z", "type": "commit"}, {"oid": "62c4fa768c1583d6665fdf892673559fc02661b1", "url": "https://github.com/powsybl/powsybl-core/commit/62c4fa768c1583d6665fdf892673559fc02661b1", "message": "reorganize constants and helper methods to prepare for reuse by next Steady State Hypothesis export\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-09-24T10:34:21Z", "type": "commit"}, {"oid": "47381979f5aafe3867eff5fc28c34ba5dfdfdd88", "url": "https://github.com/powsybl/powsybl-core/commit/47381979f5aafe3867eff5fc28c34ba5dfdfdd88", "message": "use constant for CGMES prefix in alias\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-09-24T10:51:55Z", "type": "commit"}, {"oid": "fc865c391d17e184c3ec0672d74723b513e68662", "url": "https://github.com/powsybl/powsybl-core/commit/fc865c391d17e184c3ec0672d74723b513e68662", "message": "fix SV export for dangling lines\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-09-24T11:01:23Z", "type": "commit"}, {"oid": "43545252d73964db171de5a1969f2e9519b02b2f", "url": "https://github.com/powsybl/powsybl-core/commit/43545252d73964db171de5a1969f2e9519b02b2f", "message": "prepare SSH export for integration\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-09-24T19:18:52Z", "type": "commit"}, {"oid": "82bc7e5f010e034fa4909dd35b60c1b9744dc5a0", "url": "https://github.com/powsybl/powsybl-core/commit/82bc7e5f010e034fa4909dd35b60c1b9744dc5a0", "message": "annotate missing object in export (static var compensator)\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-09-25T06:27:06Z", "type": "commit"}, {"oid": "2dc8fa716de35bc36e48883b924883c4c4a83d12", "url": "https://github.com/powsybl/powsybl-core/commit/2dc8fa716de35bc36e48883b924883c4c4a83d12", "message": "Merge branch 'master' into integration_cgmes_new_ssh_export\n\nSigned-off-by: Luma <zamarrenolm@aia.es>\n\n# Conflicts:\n#\tcgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/CgmesExportContext.java\n#\tcgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/update/StateVariablesExport.java\n#\tcgmes/cgmes-conversion/src/test/java/com/powsybl/cgmes/conversion/test/update/CgmesExportContextTest.java\n#\tcgmes/cgmes-conversion/src/test/java/com/powsybl/cgmes/conversion/test/update/StateVariablesExportTest.java", "committedDate": "2020-09-28T17:46:29Z", "type": "commit"}, {"oid": "b038c7431f3881280ff578ee12fc088368de05e3", "url": "https://github.com/powsybl/powsybl-core/commit/b038c7431f3881280ff578ee12fc088368de05e3", "message": "updates after merge with master\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-09-28T18:31:45Z", "type": "commit"}, {"oid": "97ea6925f4aea35a9753412b7e1cf5c04163ab25", "url": "https://github.com/powsybl/powsybl-core/commit/97ea6925f4aea35a9753412b7e1cf5c04163ab25", "message": "regulating controls, control areas and metadata (duplicated metadata extensions, duplicated test code)\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-09-29T10:28:01Z", "type": "commit"}, {"oid": "e400e06ead586448da6d46df176249b74a435ccb", "url": "https://github.com/powsybl/powsybl-core/commit/e400e06ead586448da6d46df176249b74a435ccb", "message": "remove intermediate inner class Property\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-09-29T11:18:17Z", "type": "commit"}, {"oid": "13563e28489a277d13928cd350fa9dc81f8f6182", "url": "https://github.com/powsybl/powsybl-core/commit/13563e28489a277d13928cd350fa9dc81f8f6182", "message": "revert local test changes in abstract converter test\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-09-29T11:28:28Z", "type": "commit"}, {"oid": "25a6537d97933151d492d846b1c300c8476a95eb", "url": "https://github.com/powsybl/powsybl-core/commit/25a6537d97933151d492d846b1c300c8476a95eb", "message": "fix imports\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-09-29T11:29:05Z", "type": "commit"}, {"oid": "833589017b009fa876611bb4e31a7ac0d3d9591d", "url": "https://github.com/powsybl/powsybl-core/commit/833589017b009fa876611bb4e31a7ac0d3d9591d", "message": "comment local tests\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-09-29T12:37:26Z", "type": "commit"}, {"oid": "10ae2109523359d8c02949c0e04271e1bee4b0de", "url": "https://github.com/powsybl/powsybl-core/commit/10ae2109523359d8c02949c0e04271e1bee4b0de", "message": "export static var compensators (with test unit) and fix type name for nonlinear shunt compensators\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-09-29T14:52:57Z", "type": "commit"}, {"oid": "5c2db2b89a5d048746a3274ef5d3359c8250683f", "url": "https://github.com/powsybl/powsybl-core/commit/5c2db2b89a5d048746a3274ef5d3359c8250683f", "message": "export test package; common code for xml comparison\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-09-30T06:31:43Z", "type": "commit"}, {"oid": "a0f30bf45a95eae80c0186e3ba75addcd365e21c", "url": "https://github.com/powsybl/powsybl-core/commit/a0f30bf45a95eae80c0186e3ba75addcd365e21c", "message": "Merge branch 'master' into integration_cgmes_new_ssh_export", "committedDate": "2020-09-30T07:10:51Z", "type": "commit"}, {"oid": "b5d62356cd7a80f856681331add2e43514fd013f", "url": "https://github.com/powsybl/powsybl-core/commit/b5d62356cd7a80f856681331add2e43514fd013f", "message": "Merge branch 'master' into integration_cgmes_new_ssh_export", "committedDate": "2020-09-30T11:26:08Z", "type": "commit"}, {"oid": "474484d3252b1836e0483376e89100e1f32c248f", "url": "https://github.com/powsybl/powsybl-core/commit/474484d3252b1836e0483376e89100e1f32c248f", "message": "export package\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-09-30T11:31:33Z", "type": "commit"}, {"oid": "4f315983a55846018b0b4a1357ff35d3b49f32c1", "url": "https://github.com/powsybl/powsybl-core/commit/4f315983a55846018b0b4a1357ff35d3b49f32c1", "message": "all diff xml with numeric difference evaluator\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-09-30T15:01:52Z", "type": "commit"}, {"oid": "aab1d8888b86d30444c2fd4057a4ae008e743e50", "url": "https://github.com/powsybl/powsybl-core/commit/aab1d8888b86d30444c2fd4057a4ae008e743e50", "message": "remove local testing\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-09-30T15:04:07Z", "type": "commit"}, {"oid": "4f8f580efa21779ad86f0c8c1f0a92c6f2d03d1e", "url": "https://github.com/powsybl/powsybl-core/commit/4f8f580efa21779ad86f0c8c1f0a92c6f2d03d1e", "message": "refactor code common to SV and SSH export tests\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-09-30T16:11:16Z", "type": "commit"}, {"oid": "f38c277b5e8cf17fdbcdb5c10635f07bdaaeced0", "url": "https://github.com/powsybl/powsybl-core/commit/f38c277b5e8cf17fdbcdb5c10635f07bdaaeced0", "message": "remove fixme labels in comments\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-09-30T16:27:26Z", "type": "commit"}, {"oid": "09ce80a1de3a918cc5a8699c619612eb5c2b6474", "url": "https://github.com/powsybl/powsybl-core/commit/09ce80a1de3a918cc5a8699c619612eb5c2b6474", "message": "fix xmlunit dependency explicit version redefinition\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-09-30T16:46:29Z", "type": "commit"}, {"oid": "c3d79eeabdcab324f9dae814399832746e3e2e00", "url": "https://github.com/powsybl/powsybl-core/commit/c3d79eeabdcab324f9dae814399832746e3e2e00", "message": "fixes in SSH export and tests after review of real-world test cases\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-09-30T18:40:10Z", "type": "commit"}, {"oid": "47974b48f6c7d10fea0b22cacfbe5af7d5862be1", "url": "https://github.com/powsybl/powsybl-core/commit/47974b48f6c7d10fea0b22cacfbe5af7d5862be1", "message": "use numerical comparison\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-09-30T18:49:16Z", "type": "commit"}, {"oid": "d4e3a891c42f23f1d36d066cac55369ce9b850de", "url": "https://github.com/powsybl/powsybl-core/commit/d4e3a891c42f23f1d36d066cac55369ce9b850de", "message": "fix bug detected by sonar\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-09-30T19:05:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0NTY4OA==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r498845688", "bodyText": "params is never null. Furthermore, you should use  ConversionParameters.readBooleanParameter here.", "author": "MioRtia", "createdAt": "2020-10-02T14:09:53Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CgmesExport.java", "diffHunk": "@@ -27,22 +38,50 @@\n \n     @Override\n     public void export(Network network, Properties params, DataSource ds) {\n-\n-        // Right now the network must contain the original CgmesModel\n-        // In the future it should be possible to export to CGMES\n-        // directly from an IIDM Network,\n-        // without the need for the original CgmesModel\n+        Objects.requireNonNull(network);\n         CgmesModelExtension ext = network.getExtension(CgmesModelExtension.class);\n-        if (ext == null) {\n-            throw new CgmesModelException(\"No extension for CGMES model found in Network\");\n+        if (params != null && Boolean.valueOf(params.getProperty(\"cgmes.export.usingOnlyNetwork\"))) {", "originalCommit": "d4e3a891c42f23f1d36d066cac55369ce9b850de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU2MDE0MA==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r501560140", "bodyText": "params may be null when called from specific unit tests. A Conversion Parameter has been added to the CgmesExport class. By the way, the generic Exporter interface does not define getParameters like its Importer counterpart.", "author": "zamarrenolm", "createdAt": "2020-10-08T09:01:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0NTY4OA=="}], "type": "inlineReview", "revised_code": {"commit": "9a0b2e8b8187fb90416fdca388dedd69989fa758", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CgmesExport.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CgmesExport.java\nindex acba0edb7..e634be7d8 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CgmesExport.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CgmesExport.java\n\n@@ -36,11 +42,15 @@ import com.powsybl.iidm.network.Network;\n @AutoService(Exporter.class)\n public class CgmesExport implements Exporter {\n \n+    public List<Parameter> getParameters() {\n+        return Collections.unmodifiableList(STATIC_PARAMETERS);\n+    }\n+\n     @Override\n     public void export(Network network, Properties params, DataSource ds) {\n         Objects.requireNonNull(network);\n         CgmesModelExtension ext = network.getExtension(CgmesModelExtension.class);\n-        if (params != null && Boolean.valueOf(params.getProperty(\"cgmes.export.usingOnlyNetwork\"))) {\n+        if (params != null && ConversionParameters.readBooleanParameter(USING_ONLY_NETWORK, params, USING_ONLY_NETWORK_PARAMETER)) {\n             if (ext != null) {\n                 CgmesModel cgmesSource = ext.getCgmesModel();\n                 if (cgmesSource != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0NjEwMA==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r498846100", "bodyText": "Not sure why an exception is thrown? We could just ignore it.", "author": "MioRtia", "createdAt": "2020-10-02T14:10:34Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CgmesExport.java", "diffHunk": "@@ -27,22 +38,50 @@\n \n     @Override\n     public void export(Network network, Properties params, DataSource ds) {\n-\n-        // Right now the network must contain the original CgmesModel\n-        // In the future it should be possible to export to CGMES\n-        // directly from an IIDM Network,\n-        // without the need for the original CgmesModel\n+        Objects.requireNonNull(network);\n         CgmesModelExtension ext = network.getExtension(CgmesModelExtension.class);\n-        if (ext == null) {\n-            throw new CgmesModelException(\"No extension for CGMES model found in Network\");\n+        if (params != null && Boolean.valueOf(params.getProperty(\"cgmes.export.usingOnlyNetwork\"))) {\n+            if (ext != null) {\n+                CgmesModel cgmesSource = ext.getCgmesModel();\n+                if (cgmesSource != null) {\n+                    throw new CgmesModelException(\"CGMES model should not be available as Network extension\");", "originalCommit": "d4e3a891c42f23f1d36d066cac55369ce9b850de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU2MjMxNw==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r501562317", "bodyText": "Check has been removed.", "author": "zamarrenolm", "createdAt": "2020-10-08T09:05:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0NjEwMA=="}], "type": "inlineReview", "revised_code": {"commit": "9a0b2e8b8187fb90416fdca388dedd69989fa758", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CgmesExport.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CgmesExport.java\nindex acba0edb7..e634be7d8 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CgmesExport.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CgmesExport.java\n\n@@ -36,11 +42,15 @@ import com.powsybl.iidm.network.Network;\n @AutoService(Exporter.class)\n public class CgmesExport implements Exporter {\n \n+    public List<Parameter> getParameters() {\n+        return Collections.unmodifiableList(STATIC_PARAMETERS);\n+    }\n+\n     @Override\n     public void export(Network network, Properties params, DataSource ds) {\n         Objects.requireNonNull(network);\n         CgmesModelExtension ext = network.getExtension(CgmesModelExtension.class);\n-        if (params != null && Boolean.valueOf(params.getProperty(\"cgmes.export.usingOnlyNetwork\"))) {\n+        if (params != null && ConversionParameters.readBooleanParameter(USING_ONLY_NETWORK, params, USING_ONLY_NETWORK_PARAMETER)) {\n             if (ext != null) {\n                 CgmesModel cgmesSource = ext.getCgmesModel();\n                 if (cgmesSource != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0NzYyMA==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r498847620", "bodyText": "Don't really think it should be a property? I think it should use a parameter cgmes.export.base-name (if not filled, use network.getNameOrId()). Ideally, it should also be a field in CgmesExportContext but I will probably do it in a later PR.", "author": "MioRtia", "createdAt": "2020-10-02T14:13:08Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CgmesExport.java", "diffHunk": "@@ -27,22 +38,50 @@\n \n     @Override\n     public void export(Network network, Properties params, DataSource ds) {\n-\n-        // Right now the network must contain the original CgmesModel\n-        // In the future it should be possible to export to CGMES\n-        // directly from an IIDM Network,\n-        // without the need for the original CgmesModel\n+        Objects.requireNonNull(network);\n         CgmesModelExtension ext = network.getExtension(CgmesModelExtension.class);\n-        if (ext == null) {\n-            throw new CgmesModelException(\"No extension for CGMES model found in Network\");\n+        if (params != null && Boolean.valueOf(params.getProperty(\"cgmes.export.usingOnlyNetwork\"))) {\n+            if (ext != null) {\n+                CgmesModel cgmesSource = ext.getCgmesModel();\n+                if (cgmesSource != null) {\n+                    throw new CgmesModelException(\"CGMES model should not be available as Network extension\");\n+                }\n+            }\n+            exportUsingOnlyNetwork(network, ds);\n+        } else {\n+            if (ext == null) {\n+                throw new CgmesModelException(\"CGMES model is required and not found in Network extension\");\n+            }\n+            exportUsingOriginalCgmesModel(network, ds, ext);\n         }\n-        CgmesUpdate cgmesUpdate = ext.getCgmesUpdate();\n+    }\n \n+    private void exportUsingOnlyNetwork(Network network, DataSource ds) {\n+        // At this point only SSH, SV can be exported when relying only in Network data\n+        // (minimum amount of CGMES references are expected as aliases/properties/extensions)\n+        String baseName = network.hasProperty(\"baseName\") ? network.getProperty(\"baseName\") : network.getNameOrId();", "originalCommit": "d4e3a891c42f23f1d36d066cac55369ce9b850de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU4MDM0Mg==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r501580342", "bodyText": "Defined a new BASE_NAME parameter in CgmesExport.", "author": "zamarrenolm", "createdAt": "2020-10-08T09:33:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0NzYyMA=="}], "type": "inlineReview", "revised_code": {"commit": "9a0b2e8b8187fb90416fdca388dedd69989fa758", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CgmesExport.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CgmesExport.java\nindex acba0edb7..e634be7d8 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CgmesExport.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CgmesExport.java\n\n@@ -36,11 +42,15 @@ import com.powsybl.iidm.network.Network;\n @AutoService(Exporter.class)\n public class CgmesExport implements Exporter {\n \n+    public List<Parameter> getParameters() {\n+        return Collections.unmodifiableList(STATIC_PARAMETERS);\n+    }\n+\n     @Override\n     public void export(Network network, Properties params, DataSource ds) {\n         Objects.requireNonNull(network);\n         CgmesModelExtension ext = network.getExtension(CgmesModelExtension.class);\n-        if (params != null && Boolean.valueOf(params.getProperty(\"cgmes.export.usingOnlyNetwork\"))) {\n+        if (params != null && ConversionParameters.readBooleanParameter(USING_ONLY_NETWORK, params, USING_ONLY_NETWORK_PARAMETER)) {\n             if (ext != null) {\n                 CgmesModel cgmesSource = ext.getCgmesModel();\n                 if (cgmesSource != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg1MDc3Mg==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r498850772", "bodyText": "I don't really agree with throwing a PowsyblException in any case. You should do:\ncatch (IOException e) {\n   throw new UncheckedIOException(e);\n} catch (XMLStreamException e) {\n    throw new UncheckedXmlStreamException(e);\n}\nYou can write this only once at the end of the method (not twice)", "author": "MioRtia", "createdAt": "2020-10-02T14:18:29Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CgmesExport.java", "diffHunk": "@@ -27,22 +38,50 @@\n \n     @Override\n     public void export(Network network, Properties params, DataSource ds) {\n-\n-        // Right now the network must contain the original CgmesModel\n-        // In the future it should be possible to export to CGMES\n-        // directly from an IIDM Network,\n-        // without the need for the original CgmesModel\n+        Objects.requireNonNull(network);\n         CgmesModelExtension ext = network.getExtension(CgmesModelExtension.class);\n-        if (ext == null) {\n-            throw new CgmesModelException(\"No extension for CGMES model found in Network\");\n+        if (params != null && Boolean.valueOf(params.getProperty(\"cgmes.export.usingOnlyNetwork\"))) {\n+            if (ext != null) {\n+                CgmesModel cgmesSource = ext.getCgmesModel();\n+                if (cgmesSource != null) {\n+                    throw new CgmesModelException(\"CGMES model should not be available as Network extension\");\n+                }\n+            }\n+            exportUsingOnlyNetwork(network, ds);\n+        } else {\n+            if (ext == null) {\n+                throw new CgmesModelException(\"CGMES model is required and not found in Network extension\");\n+            }\n+            exportUsingOriginalCgmesModel(network, ds, ext);\n         }\n-        CgmesUpdate cgmesUpdate = ext.getCgmesUpdate();\n+    }\n \n+    private void exportUsingOnlyNetwork(Network network, DataSource ds) {\n+        // At this point only SSH, SV can be exported when relying only in Network data\n+        // (minimum amount of CGMES references are expected as aliases/properties/extensions)\n+        String baseName = network.hasProperty(\"baseName\") ? network.getProperty(\"baseName\") : network.getNameOrId();\n+        String filenameSv = baseName + \"_SV.xml\";\n+        String filenameSsh = baseName + \"_SSH.xml\";\n+        CgmesExportContext context = new CgmesExportContext(network);\n+        try (OutputStream os = ds.newOutputStream(filenameSv, false)) {\n+            XMLStreamWriter writer = XmlUtil.initializeWriter(true, \"    \", os);\n+            StateVariablesExport.write(network, writer, context);\n+        } catch (IOException | XMLStreamException x) {\n+            throw new PowsyblException(\"Exporting to CGMES using only Network\");\n+        }", "originalCommit": "d4e3a891c42f23f1d36d066cac55369ce9b850de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU4NDIyOA==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r501584228", "bodyText": "Done. Defined a single try-with-resources block for export SV and SSH export", "author": "zamarrenolm", "createdAt": "2020-10-08T09:39:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg1MDc3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "9a0b2e8b8187fb90416fdca388dedd69989fa758", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CgmesExport.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CgmesExport.java\nindex acba0edb7..e634be7d8 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CgmesExport.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CgmesExport.java\n\n@@ -36,11 +42,15 @@ import com.powsybl.iidm.network.Network;\n @AutoService(Exporter.class)\n public class CgmesExport implements Exporter {\n \n+    public List<Parameter> getParameters() {\n+        return Collections.unmodifiableList(STATIC_PARAMETERS);\n+    }\n+\n     @Override\n     public void export(Network network, Properties params, DataSource ds) {\n         Objects.requireNonNull(network);\n         CgmesModelExtension ext = network.getExtension(CgmesModelExtension.class);\n-        if (params != null && Boolean.valueOf(params.getProperty(\"cgmes.export.usingOnlyNetwork\"))) {\n+        if (params != null && ConversionParameters.readBooleanParameter(USING_ONLY_NETWORK, params, USING_ONLY_NETWORK_PARAMETER)) {\n             if (ext != null) {\n                 CgmesModel cgmesSource = ext.getCgmesModel();\n                 if (cgmesSource != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg1MjE2OA==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r498852168", "bodyText": "To confirm, but maybe it might be a good idea to use the extension in powsybl-balance-adjustements . I will look into it.", "author": "MioRtia", "createdAt": "2020-10-02T14:20:53Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Conversion.java", "diffHunk": "@@ -306,6 +311,34 @@ private void addCgmesSvMetadata(Network network) {\n         }\n     }\n \n+    private void addCgmesSshMetadata(Network network) {\n+        PropertyBags sshDescription = cgmes.fullModel(CgmesSubset.STEADY_STATE_HYPOTHESIS.getProfile());\n+        if (sshDescription != null && !sshDescription.isEmpty()) {\n+            CgmesSshMetadataAdder adder = network.newExtension(CgmesSshMetadataAdder.class)\n+                    .setDescription(sshDescription.get(0).getId(\"description\"))\n+                    .setSshVersion(sshDescription.get(0).asInt(\"version\"))\n+                    .setModelingAuthoritySet(sshDescription.get(0).getId(\"modelingAuthoritySet\"));\n+            sshDescription.pluckLocals(\"DependentOn\").forEach(adder::addDependency);\n+            adder.add();\n+        }\n+    }\n+\n+    private void addCgmesSshControlAreas(Network network) {\n+        PropertyBags sshControlAreas = cgmes.controlAreas();\n+        if (sshControlAreas != null && !sshControlAreas.isEmpty()) {\n+            CgmesSshControlAreasAdder adder = network.newExtension(CgmesSshControlAreasAdder.class);\n+\n+            sshControlAreas.forEach(sshControlArea -> {\n+                String id = sshControlArea.getId(\"ControlArea\");\n+                double netInterchange = sshControlArea.asDouble(\"netInterchange\");\n+                double pTolerance = sshControlArea.asDouble(\"pTolerance\");\n+                ControlArea controlArea = new ControlArea(id, netInterchange, pTolerance);\n+                adder.addControlArea(controlArea);\n+            });\n+            adder.add();\n+        }\n+    }", "originalCommit": "d4e3a891c42f23f1d36d066cac55369ce9b850de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU4NTE1OA==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r501585158", "bodyText": "We will analyse the powsybl-balance-adjustements extension for a later refactoring.", "author": "zamarrenolm", "createdAt": "2020-10-08T09:41:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg1MjE2OA=="}], "type": "inlineReview", "revised_code": {"commit": "0f5757632bf32333390ee33f6966ad0fbc296e45", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Conversion.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Conversion.java\nindex 5424a3fcd..c0d52bb06 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Conversion.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Conversion.java\n\n@@ -323,19 +321,10 @@ public class Conversion {\n         }\n     }\n \n-    private void addCgmesSshControlAreas(Network network) {\n+    private void addCgmesSshControlAreas(Network network, Context context) {\n         PropertyBags sshControlAreas = cgmes.controlAreas();\n         if (sshControlAreas != null && !sshControlAreas.isEmpty()) {\n-            CgmesSshControlAreasAdder adder = network.newExtension(CgmesSshControlAreasAdder.class);\n-\n-            sshControlAreas.forEach(sshControlArea -> {\n-                String id = sshControlArea.getId(\"ControlArea\");\n-                double netInterchange = sshControlArea.asDouble(\"netInterchange\");\n-                double pTolerance = sshControlArea.asDouble(\"pTolerance\");\n-                ControlArea controlArea = new ControlArea(id, netInterchange, pTolerance);\n-                adder.addControlArea(controlArea);\n-            });\n-            adder.add();\n+            context.ignored(\"ControlAreas\", \"Unsupported in current version\");\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg1MjkyMA==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r498852920", "bodyText": "Is it useful? If the RegulatingControl only regulates generators, we can put the targetDeadband as 0.", "author": "MioRtia", "createdAt": "2020-10-02T14:22:04Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForGenerators.java", "diffHunk": "@@ -117,6 +117,9 @@ private boolean setRegulatingControlVoltage(String controlId,\n                     .add();\n         }\n \n+        gen.setProperty(\"RegulatingControl\", controlId);\n+        gen.setProperty(\"targetDeadBand\", String.valueOf(control.getTargetDeadBand()));", "originalCommit": "d4e3a891c42f23f1d36d066cac55369ce9b850de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU4NjMyNQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r501586325", "bodyText": "We tried to keep the original value read from input data, even it is not applicable in IIDM for generators. Some regulating controls in conformity test cases have targetDeadband != 0.", "author": "zamarrenolm", "createdAt": "2020-10-08T09:43:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg1MjkyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMzMjc1Mw==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r506332753", "bodyText": "The RegulatingControlId is not stored as an alias in the generator ? I think that maybe we have two options :\n\nWith the option USING_ONLY_NETWORK_PARAMETER, we should introduce default values and not relying too much on properties ;\nWith the option that use the CGMES model, you retriev all the information.\n@MioRtia and @mathbagu what do you think ?", "author": "annetill", "createdAt": "2020-10-16T11:47:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg1MjkyMA=="}], "type": "inlineReview", "revised_code": {"commit": "13a598e5bbe8f552b25bac848908da82af05f42d", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForGenerators.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForGenerators.java\nindex b0b3ddb88..d96f6ce4d 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForGenerators.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForGenerators.java\n\n@@ -116,9 +116,7 @@ public class RegulatingControlMappingForGenerators {\n                     .withQPercent(qPercent)\n                     .add();\n         }\n-\n-        gen.setProperty(\"RegulatingControl\", controlId);\n-        gen.setProperty(\"targetDeadBand\", String.valueOf(control.getTargetDeadBand()));\n+        gen.setProperty(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"RegulatingControl\", controlId);\n \n         return true;\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg1NDU1OA==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r498854558", "bodyText": "Just for me, the modifications in this class regards the updating of the original SSH export? If yes, it may be easier to review in another PR...", "author": "MioRtia", "createdAt": "2020-10-02T14:24:53Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMapping.java", "diffHunk": "@@ -58,7 +58,7 @@ public RegulatingControlMappingForStaticVarCompensators forStaticVarCompensators\n         return regulatingControlMappingForStaticVarCompensators;\n     }\n \n-    static class RegulatingControl {\n+    public static class RegulatingControl {", "originalCommit": "d4e3a891c42f23f1d36d066cac55369ce9b850de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU4NzI0NQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r501587245", "bodyText": "Yes the modification is related to SSH export. The change was very small (only visibility of inner class), so we decided to include it here.", "author": "zamarrenolm", "createdAt": "2020-10-08T09:44:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg1NDU1OA=="}], "type": "inlineReview", "revised_code": {"commit": "56c9f12cafecb0f1f50a28e4fb73512856320940", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMapping.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMapping.java\nindex e8a2493b1..1a563547b 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMapping.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMapping.java\n\n@@ -58,7 +58,7 @@ public class RegulatingControlMapping {\n         return regulatingControlMappingForStaticVarCompensators;\n     }\n \n-    public static class RegulatingControl {\n+    static class RegulatingControl {\n         final String mode;\n         final String cgmesTerminal;\n         final boolean enabled;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg1NzE1OQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r498857159", "bodyText": "Not sure it is warranted. Is it useful to keep information that are not consistent? I understand it is useful for debug purposes but is there another usecase where this information is meaningful?", "author": "MioRtia", "createdAt": "2020-10-02T14:29:02Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForShuntCompensators.java", "diffHunk": "@@ -57,10 +57,15 @@ private void apply(ShuntCompensator shuntCompensator, CgmesRegulatingControlForS\n         if (cgmesRc == null) {\n             return;\n         }\n+        String rcId = cgmesRc.regulatingControlId;\n+\n+        // We are saving the relationship with the\n+        // original regulating control even if it is not enabled\n+        // or if we are not able to set it properly in IIDM\n         if (!cgmesRc.controlEnabled) {\n+            setAdditionalProperties(shuntCompensator, rcId);", "originalCommit": "d4e3a891c42f23f1d36d066cac55369ce9b850de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU4OTg4Nw==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r501589887", "bodyText": "We want to keep original regulating control information without changing the current logic about its use in IIDM.", "author": "zamarrenolm", "createdAt": "2020-10-08T09:48:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg1NzE1OQ=="}], "type": "inlineReview", "revised_code": {"commit": "13a598e5bbe8f552b25bac848908da82af05f42d", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForShuntCompensators.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForShuntCompensators.java\nindex 77910c890..0a3887a38 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForShuntCompensators.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForShuntCompensators.java\n\n@@ -59,13 +59,6 @@ public class RegulatingControlMappingForShuntCompensators {\n         }\n         String rcId = cgmesRc.regulatingControlId;\n \n-        // We are saving the relationship with the\n-        // original regulating control even if it is not enabled\n-        // or if we are not able to set it properly in IIDM\n-        if (!cgmesRc.controlEnabled) {\n-            setAdditionalProperties(shuntCompensator, rcId);\n-            return;\n-        }\n         if (rcId == null) {\n             context.missing(\"Regulating Control ID not defined\");\n             setDefaultRegulatingControl(shuntCompensator);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg1NzM5Nw==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r498857397", "bodyText": "Does it happen when this method is called?", "author": "MioRtia", "createdAt": "2020-10-02T14:29:20Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForShuntCompensators.java", "diffHunk": "@@ -95,6 +100,21 @@ private void setRegulatingControl(ShuntCompensator shuntCompensator, RegulatingC\n         }\n         // Take default terminal if it has not been defined in CGMES files (it is never null)\n         shuntCompensator.setRegulatingTerminal(parent.getRegulatingTerminal(shuntCompensator, rc.cgmesTerminal));\n+\n+        shuntCompensator.setProperty(\"RegulatingControl\", rcId);\n+    }\n+\n+    private void setAdditionalProperties(ShuntCompensator shuntCompensator, String rcId) {\n+        if (rcId == null) {\n+            return;\n+        }", "originalCommit": "d4e3a891c42f23f1d36d066cac55369ce9b850de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU5MDY1Nw==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r501590657", "bodyText": "yes it could happen", "author": "zamarrenolm", "createdAt": "2020-10-08T09:50:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg1NzM5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "13a598e5bbe8f552b25bac848908da82af05f42d", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForShuntCompensators.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForShuntCompensators.java\nindex 77910c890..0a3887a38 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForShuntCompensators.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForShuntCompensators.java\n\n@@ -90,31 +83,18 @@ public class RegulatingControlMappingForShuntCompensators {\n                 .setVoltageRegulatorOn(true); // SSH controlEnabled attribute is true when this method is called\n     }\n \n-    private void setRegulatingControl(ShuntCompensator shuntCompensator, String rcId, RegulatingControl rc) {\n+    private void setRegulatingControl(ShuntCompensator shuntCompensator, String rcId, RegulatingControl rc, boolean controlEnabled) {\n         shuntCompensator.setTargetV(rc.targetValue)\n                 .setTargetDeadband(rc.targetDeadband);\n         if (rc.targetValue > 0) {\n-            shuntCompensator.setVoltageRegulatorOn(rc.enabled);\n+            // The regulating control is enabled and the equipment participation in the control is enabled\n+            shuntCompensator.setVoltageRegulatorOn(rc.enabled && controlEnabled);\n         } else  {\n             shuntCompensator.setVoltageRegulatorOn(false);\n         }\n         // Take default terminal if it has not been defined in CGMES files (it is never null)\n         shuntCompensator.setRegulatingTerminal(parent.getRegulatingTerminal(shuntCompensator, rc.cgmesTerminal));\n-\n-        shuntCompensator.setProperty(\"RegulatingControl\", rcId);\n-    }\n-\n-    private void setAdditionalProperties(ShuntCompensator shuntCompensator, String rcId) {\n-        if (rcId == null) {\n-            return;\n-        }\n-        RegulatingControl rc = parent.cachedRegulatingControls().get(rcId);\n-        if (rc == null) {\n-            return;\n-        }\n-        shuntCompensator.setProperty(\"RegulatingControl\", rcId);\n-        shuntCompensator.setProperty(\"targetValue\", String.valueOf(rc.targetValue));\n-        shuntCompensator.setProperty(\"targetDeadBand\", String.valueOf(rc.targetDeadband));\n+        shuntCompensator.setProperty(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"RegulatingControl\", rcId);\n     }\n \n     private static class CgmesRegulatingControlForShuntCompensator {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg1Nzc4MQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r498857781", "bodyText": "Does it happen when this method is called?", "author": "MioRtia", "createdAt": "2020-10-02T14:29:54Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForShuntCompensators.java", "diffHunk": "@@ -95,6 +100,21 @@ private void setRegulatingControl(ShuntCompensator shuntCompensator, RegulatingC\n         }\n         // Take default terminal if it has not been defined in CGMES files (it is never null)\n         shuntCompensator.setRegulatingTerminal(parent.getRegulatingTerminal(shuntCompensator, rc.cgmesTerminal));\n+\n+        shuntCompensator.setProperty(\"RegulatingControl\", rcId);\n+    }\n+\n+    private void setAdditionalProperties(ShuntCompensator shuntCompensator, String rcId) {\n+        if (rcId == null) {\n+            return;\n+        }\n+        RegulatingControl rc = parent.cachedRegulatingControls().get(rcId);\n+        if (rc == null) {\n+            return;", "originalCommit": "d4e3a891c42f23f1d36d066cac55369ce9b850de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU5MTUwNQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r501591505", "bodyText": "yes, it could happen; we keep the same logic that when regulating control is processed", "author": "zamarrenolm", "createdAt": "2020-10-08T09:51:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg1Nzc4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "13a598e5bbe8f552b25bac848908da82af05f42d", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForShuntCompensators.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForShuntCompensators.java\nindex 77910c890..0a3887a38 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForShuntCompensators.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForShuntCompensators.java\n\n@@ -90,31 +83,18 @@ public class RegulatingControlMappingForShuntCompensators {\n                 .setVoltageRegulatorOn(true); // SSH controlEnabled attribute is true when this method is called\n     }\n \n-    private void setRegulatingControl(ShuntCompensator shuntCompensator, String rcId, RegulatingControl rc) {\n+    private void setRegulatingControl(ShuntCompensator shuntCompensator, String rcId, RegulatingControl rc, boolean controlEnabled) {\n         shuntCompensator.setTargetV(rc.targetValue)\n                 .setTargetDeadband(rc.targetDeadband);\n         if (rc.targetValue > 0) {\n-            shuntCompensator.setVoltageRegulatorOn(rc.enabled);\n+            // The regulating control is enabled and the equipment participation in the control is enabled\n+            shuntCompensator.setVoltageRegulatorOn(rc.enabled && controlEnabled);\n         } else  {\n             shuntCompensator.setVoltageRegulatorOn(false);\n         }\n         // Take default terminal if it has not been defined in CGMES files (it is never null)\n         shuntCompensator.setRegulatingTerminal(parent.getRegulatingTerminal(shuntCompensator, rc.cgmesTerminal));\n-\n-        shuntCompensator.setProperty(\"RegulatingControl\", rcId);\n-    }\n-\n-    private void setAdditionalProperties(ShuntCompensator shuntCompensator, String rcId) {\n-        if (rcId == null) {\n-            return;\n-        }\n-        RegulatingControl rc = parent.cachedRegulatingControls().get(rcId);\n-        if (rc == null) {\n-            return;\n-        }\n-        shuntCompensator.setProperty(\"RegulatingControl\", rcId);\n-        shuntCompensator.setProperty(\"targetValue\", String.valueOf(rc.targetValue));\n-        shuntCompensator.setProperty(\"targetDeadBand\", String.valueOf(rc.targetDeadband));\n+        shuntCompensator.setProperty(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"RegulatingControl\", rcId);\n     }\n \n     private static class CgmesRegulatingControlForShuntCompensator {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg1NzkzNg==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r498857936", "bodyText": "See questions above", "author": "MioRtia", "createdAt": "2020-10-02T14:30:07Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForShuntCompensators.java", "diffHunk": "@@ -95,6 +100,21 @@ private void setRegulatingControl(ShuntCompensator shuntCompensator, RegulatingC\n         }\n         // Take default terminal if it has not been defined in CGMES files (it is never null)\n         shuntCompensator.setRegulatingTerminal(parent.getRegulatingTerminal(shuntCompensator, rc.cgmesTerminal));\n+\n+        shuntCompensator.setProperty(\"RegulatingControl\", rcId);\n+    }\n+\n+    private void setAdditionalProperties(ShuntCompensator shuntCompensator, String rcId) {\n+        if (rcId == null) {\n+            return;\n+        }\n+        RegulatingControl rc = parent.cachedRegulatingControls().get(rcId);\n+        if (rc == null) {\n+            return;\n+        }\n+        shuntCompensator.setProperty(\"RegulatingControl\", rcId);\n+        shuntCompensator.setProperty(\"targetValue\", String.valueOf(rc.targetValue));\n+        shuntCompensator.setProperty(\"targetDeadBand\", String.valueOf(rc.targetDeadband));", "originalCommit": "d4e3a891c42f23f1d36d066cac55369ce9b850de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU5MTc3OA==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r501591778", "bodyText": "trying to keep original data about regulating control", "author": "zamarrenolm", "createdAt": "2020-10-08T09:51:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg1NzkzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMzOTQ3Mw==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r506339473", "bodyText": "Why do we need the targetValue as property as we have it in IIDM ?", "author": "annetill", "createdAt": "2020-10-16T11:56:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg1NzkzNg=="}], "type": "inlineReview", "revised_code": {"commit": "13a598e5bbe8f552b25bac848908da82af05f42d", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForShuntCompensators.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForShuntCompensators.java\nindex 77910c890..0a3887a38 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForShuntCompensators.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForShuntCompensators.java\n\n@@ -90,31 +83,18 @@ public class RegulatingControlMappingForShuntCompensators {\n                 .setVoltageRegulatorOn(true); // SSH controlEnabled attribute is true when this method is called\n     }\n \n-    private void setRegulatingControl(ShuntCompensator shuntCompensator, String rcId, RegulatingControl rc) {\n+    private void setRegulatingControl(ShuntCompensator shuntCompensator, String rcId, RegulatingControl rc, boolean controlEnabled) {\n         shuntCompensator.setTargetV(rc.targetValue)\n                 .setTargetDeadband(rc.targetDeadband);\n         if (rc.targetValue > 0) {\n-            shuntCompensator.setVoltageRegulatorOn(rc.enabled);\n+            // The regulating control is enabled and the equipment participation in the control is enabled\n+            shuntCompensator.setVoltageRegulatorOn(rc.enabled && controlEnabled);\n         } else  {\n             shuntCompensator.setVoltageRegulatorOn(false);\n         }\n         // Take default terminal if it has not been defined in CGMES files (it is never null)\n         shuntCompensator.setRegulatingTerminal(parent.getRegulatingTerminal(shuntCompensator, rc.cgmesTerminal));\n-\n-        shuntCompensator.setProperty(\"RegulatingControl\", rcId);\n-    }\n-\n-    private void setAdditionalProperties(ShuntCompensator shuntCompensator, String rcId) {\n-        if (rcId == null) {\n-            return;\n-        }\n-        RegulatingControl rc = parent.cachedRegulatingControls().get(rcId);\n-        if (rc == null) {\n-            return;\n-        }\n-        shuntCompensator.setProperty(\"RegulatingControl\", rcId);\n-        shuntCompensator.setProperty(\"targetValue\", String.valueOf(rc.targetValue));\n-        shuntCompensator.setProperty(\"targetDeadBand\", String.valueOf(rc.targetDeadband));\n+        shuntCompensator.setProperty(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"RegulatingControl\", rcId);\n     }\n \n     private static class CgmesRegulatingControlForShuntCompensator {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg1ODU3Nw==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r498858577", "bodyText": "Same remark as for generators: if a regulating control only regulates svc, maybe we can considerate the deadband is 0 and not keep this information from the CGMES file.", "author": "MioRtia", "createdAt": "2020-10-02T14:31:05Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForStaticVarCompensators.java", "diffHunk": "@@ -123,6 +123,8 @@ private boolean setRegulatingControl(CgmesRegulatingControlForStaticVarCompensat\n         }\n         svc.setRegulatingTerminal(terminal);\n \n+        svc.setProperty(\"RegulatingControl\", rc.regulatingControlId);\n+        svc.setProperty(\"targetDeadBand\", String.valueOf(control.getTargetDeadBand()));", "originalCommit": "d4e3a891c42f23f1d36d066cac55369ce9b850de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU5MjIzNg==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r501592236", "bodyText": "trying to keep original data about regulating control (the conformity tests contain examples of deadband != 0)", "author": "zamarrenolm", "createdAt": "2020-10-08T09:52:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg1ODU3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "13a598e5bbe8f552b25bac848908da82af05f42d", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForStaticVarCompensators.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForStaticVarCompensators.java\nindex 4d5596509..5d080f617 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForStaticVarCompensators.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForStaticVarCompensators.java\n\n@@ -123,8 +123,7 @@ public class RegulatingControlMappingForStaticVarCompensators {\n         }\n         svc.setRegulatingTerminal(terminal);\n \n-        svc.setProperty(\"RegulatingControl\", rc.regulatingControlId);\n-        svc.setProperty(\"targetDeadBand\", String.valueOf(control.getTargetDeadBand()));\n+        svc.setProperty(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"RegulatingControl\", rc.regulatingControlId);\n         return okSet;\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg1OTI3Ng==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r498859276", "bodyText": "Just for me, can a generating unit be linked to several synchronous machines?", "author": "MioRtia", "createdAt": "2020-10-02T14:32:17Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/SynchronousMachineConversion.java", "diffHunk": "@@ -60,6 +60,14 @@ public void convert() {\n         if (p.asInt(\"referencePriority\", 0) > 0) {\n             SlackTerminal.reset(g.getTerminal().getVoltageLevel(), g.getTerminal());\n         }\n+        if (p.containsKey(\"normalPF\")) {\n+            // Convert to double then to string to have canonical representation of number\n+            g.setProperty(\"GeneratingUnit.normalPF\", Double.valueOf(p.get(\"normalPF\")).toString());\n+        }\n+        String generatingUnit = p.getId(\"GeneratingUnit\");\n+        if (generatingUnit != null) {\n+            g.setProperty(\"GeneratingUnit\", generatingUnit);", "originalCommit": "d4e3a891c42f23f1d36d066cac55369ce9b850de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU5NDg5MA==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r501594890", "bodyText": "Yes, a GeneratingUnit can contain one or more synchronous machines. From CGMES doc, a GeneratingUnit is defined as A single or set of synchronous machines for converting mechanical power into alternating-current power.", "author": "zamarrenolm", "createdAt": "2020-10-08T09:56:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg1OTI3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "5680e64a5fa33b674d97fafc0109f699a789709a", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/SynchronousMachineConversion.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/SynchronousMachineConversion.java\nindex b60c41b70..0fbe6abb6 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/SynchronousMachineConversion.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/SynchronousMachineConversion.java\n\n@@ -61,8 +62,13 @@ public class SynchronousMachineConversion extends AbstractReactiveLimitsOwnerCon\n             SlackTerminal.reset(g.getTerminal().getVoltageLevel(), g.getTerminal());\n         }\n         if (p.containsKey(\"normalPF\")) {\n-            // Convert to double then to string to have canonical representation of number\n-            g.setProperty(\"GeneratingUnit.normalPF\", Double.valueOf(p.get(\"normalPF\")).toString());\n+            // Extension power control adder attribute \"droop\"\n+            // is documented as the participation factor when distributed slack is enabled\n+            // We map the normal participation factor from CGMES to droop\n+            g.newExtension(ActivePowerControlAdder.class)\n+                    .withParticipate(true)\n+                    .withDroop((float) p.asDouble(\"normalPF\"))\n+                    .add();\n         }\n         String generatingUnit = p.getId(\"GeneratingUnit\");\n         if (generatingUnit != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg2MDA5OQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r498860099", "bodyText": "This method is private. If we are sure the regulatingControlId is not null when the method is called, it is not useful for me to check it.", "author": "MioRtia", "createdAt": "2020-10-02T14:33:43Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/AbstractTransformerConversion.java", "diffHunk": "@@ -120,4 +122,81 @@ protected void addAliases(Identifiable<?> identifiable) {\n             }\n         }\n     }\n+\n+    private static RegulatingControl getRegulatingControl(Context context, String regulatingControlId) {\n+        Objects.requireNonNull(regulatingControlId);", "originalCommit": "d4e3a891c42f23f1d36d066cac55369ce9b850de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU5NTg5Nw==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r501595897", "bodyText": "Done", "author": "zamarrenolm", "createdAt": "2020-10-08T09:58:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg2MDA5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "dc63ef485403f229712f098a5c1e6575834af450", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/AbstractTransformerConversion.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/AbstractTransformerConversion.java\nindex e1934b7da..30fb0bf62 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/AbstractTransformerConversion.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/AbstractTransformerConversion.java\n\n@@ -124,7 +123,6 @@ abstract class AbstractTransformerConversion extends AbstractConductingEquipment\n     }\n \n     private static RegulatingControl getRegulatingControl(Context context, String regulatingControlId) {\n-        Objects.requireNonNull(regulatingControlId);\n         return context.regulatingControlMapping().cachedRegulatingControls().get(regulatingControlId);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg2MzcyOQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r498863729", "bodyText": "Do you need this because it is done after combination? Can't it be done the same way for hidden and non hidden tap changers?", "author": "MioRtia", "createdAt": "2020-10-02T14:39:59Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/AbstractTransformerConversion.java", "diffHunk": "@@ -120,4 +122,81 @@ protected void addAliases(Identifiable<?> identifiable) {\n             }\n         }\n     }\n+\n+    private static RegulatingControl getRegulatingControl(Context context, String regulatingControlId) {\n+        Objects.requireNonNull(regulatingControlId);\n+        return context.regulatingControlMapping().cachedRegulatingControls().get(regulatingControlId);\n+    }\n+\n+    protected void addCgmesDataAsProperties(Identifiable<?> transformer, TapChanger rtc, TapChanger ptc, Context context) {\n+        addRatioTapChangerProperties(transformer, rtc, context);\n+        addPhaseTapChangerProperties(transformer, ptc, context);\n+    }\n+\n+    private static void  addRatioTapChangerProperties(Identifiable<?> transformer, TapChanger rtc, Context context) {\n+        if (rtc == null || rtc.getId() == null) {\n+            return;\n+        }\n+\n+        if (rtc.getRegulatingControlId() != null) {\n+            String key = String.format(\"RatioTapChanger.%s.TapChangerControl\", rtc.getId());\n+            transformer.setProperty(key, rtc.getRegulatingControlId());\n+        }\n+\n+        if (rtc.getHiddenCombinedTapChanger() != null) {\n+            defineHiddenTapChangerProperties(transformer, rtc, rtc.getHiddenCombinedTapChanger(), \"RatioTapChanger\", context);\n+        }", "originalCommit": "d4e3a891c42f23f1d36d066cac55369ce9b850de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU5NzAwMQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r501597001", "bodyText": "they must be done in a different way for hidden and not-hidden. Hidden after combination do not exist in IIDM Network, and non-hidden properties are taken from Network object.", "author": "zamarrenolm", "createdAt": "2020-10-08T10:00:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg2MzcyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "dc63ef485403f229712f098a5c1e6575834af450", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/AbstractTransformerConversion.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/AbstractTransformerConversion.java\nindex e1934b7da..30fb0bf62 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/AbstractTransformerConversion.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/AbstractTransformerConversion.java\n\n@@ -124,7 +123,6 @@ abstract class AbstractTransformerConversion extends AbstractConductingEquipment\n     }\n \n     private static RegulatingControl getRegulatingControl(Context context, String regulatingControlId) {\n-        Objects.requireNonNull(regulatingControlId);\n         return context.regulatingControlMapping().cachedRegulatingControls().get(regulatingControlId);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg2NTQ3Ng==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r498865476", "bodyText": "Can you explain this comment to me?", "author": "MioRtia", "createdAt": "2020-10-02T14:42:54Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/export/CgmesExportContext.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.cgmes.conversion.export;\n+\n+import com.powsybl.cgmes.conversion.elements.CgmesTopologyKind;\n+import com.powsybl.cgmes.conversion.extensions.CgmesSshMetadata;\n+import com.powsybl.cgmes.conversion.extensions.CgmesSvMetadata;\n+import com.powsybl.cgmes.conversion.extensions.CimCharacteristics;\n+import com.powsybl.cgmes.model.CgmesNamespace;\n+\n+import com.powsybl.iidm.network.Network;\n+import org.joda.time.DateTime;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ */\n+public class CgmesExportContext {\n+\n+    private int cimVersion = 16;\n+    private CgmesTopologyKind topologyKind = CgmesTopologyKind.BUS_BRANCH;\n+    private DateTime scenarioTime = DateTime.now();\n+\n+    private ModelDescription svModelDescription = new ModelDescription(\"SV Model\", CgmesNamespace.SV_PROFILE);\n+    private ModelDescription sshModelDescription = new ModelDescription(\"SSH Model\", CgmesNamespace.SSH_PROFILE);\n+\n+    private boolean exportBoundaryPowerFlows = false;\n+\n+    public static final class ModelDescription {\n+\n+        private String description = \"Model\";\n+        private int version = 1;\n+        private final List<String> dependencies = new ArrayList<>();\n+        private String modelingAuthoritySet = \"powsybl.org\";\n+        // TODO Each model may have a list of profiles, not only one", "originalCommit": "d4e3a891c42f23f1d36d066cac55369ce9b850de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYwMDcxMw==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r501600713", "bodyText": "This is a comment relevant if we try to build a generic ModelDescription class. In general a single file CGMES XML can contain references to multiple profiles. For example an EQ file may contain references to EquipmentBoundary, EquipmentCore, EquipmentOperation (if it is node-breaker), ShortCircuit, ...", "author": "zamarrenolm", "createdAt": "2020-10-08T10:06:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg2NTQ3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "880c0cc4a38a8f12a5cbb2ca1bb6f5d162ac51bd", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/export/CgmesExportContext.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/export/CgmesExportContext.java\nindex e7c2571d5..407adb500 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/export/CgmesExportContext.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/export/CgmesExportContext.java\n\n@@ -36,7 +36,7 @@ public class CgmesExportContext {\n \n     public static final class ModelDescription {\n \n-        private String description = \"Model\";\n+        private String description;\n         private int version = 1;\n         private final List<String> dependencies = new ArrayList<>();\n         private String modelingAuthoritySet = \"powsybl.org\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg3MDYzNA==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r498870634", "bodyText": "Delete this empty line", "author": "MioRtia", "createdAt": "2020-10-02T14:51:01Z", "path": "commons/src/test/java/com/powsybl/commons/AbstractConverterTest.java", "diffHunk": "@@ -9,6 +9,7 @@\n import com.google.common.io.ByteStreams;\n import com.google.common.jimfs.Configuration;\n import com.google.common.jimfs.Jimfs;\n+", "originalCommit": "d4e3a891c42f23f1d36d066cac55369ce9b850de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYwMTc2OQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r501601769", "bodyText": "Removed", "author": "zamarrenolm", "createdAt": "2020-10-08T10:07:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg3MDYzNA=="}], "type": "inlineReview", "revised_code": {"commit": "dc63ef485403f229712f098a5c1e6575834af450", "chunk": "diff --git a/commons/src/test/java/com/powsybl/commons/AbstractConverterTest.java b/commons/src/test/java/com/powsybl/commons/AbstractConverterTest.java\nindex fcd35b9e1..4c6dd5f83 100644\n--- a/commons/src/test/java/com/powsybl/commons/AbstractConverterTest.java\n+++ b/commons/src/test/java/com/powsybl/commons/AbstractConverterTest.java\n\n@@ -9,7 +9,6 @@ package com.powsybl.commons;\n import com.google.common.io.ByteStreams;\n import com.google.common.jimfs.Configuration;\n import com.google.common.jimfs.Jimfs;\n-\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Rule;\n"}}, {"oid": "9a0b2e8b8187fb90416fdca388dedd69989fa758", "url": "https://github.com/powsybl/powsybl-core/commit/9a0b2e8b8187fb90416fdca388dedd69989fa758", "message": "add conversion parameter to export to use only Network data and not original CGMES model\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-10-08T09:01:28Z", "type": "commit"}, {"oid": "62546bf5abd0f7e079bcffdae9652ee1695f57e2", "url": "https://github.com/powsybl/powsybl-core/commit/62546bf5abd0f7e079bcffdae9652ee1695f57e2", "message": "remove unneeded check\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-10-08T09:05:00Z", "type": "commit"}, {"oid": "b01a19d905258c07d037122764766627e124afa6", "url": "https://github.com/powsybl/powsybl-core/commit/b01a19d905258c07d037122764766627e124afa6", "message": "base-name of export as a conversion parameter; fix read parameter call\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-10-08T09:32:32Z", "type": "commit"}, {"oid": "dca3e41f6d6c77fe426473239ba2cda32dc4f09d", "url": "https://github.com/powsybl/powsybl-core/commit/dca3e41f6d6c77fe426473239ba2cda32dc4f09d", "message": "specific unchecked exceptions, single block try-with-resources for SV and SSH files\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-10-08T09:39:15Z", "type": "commit"}, {"oid": "7db5818eff3650c88dece67eed65d208e4b41345", "url": "https://github.com/powsybl/powsybl-core/commit/7db5818eff3650c88dece67eed65d208e4b41345", "message": "remove unneeded import\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-10-08T09:47:03Z", "type": "commit"}, {"oid": "dc63ef485403f229712f098a5c1e6575834af450", "url": "https://github.com/powsybl/powsybl-core/commit/dc63ef485403f229712f098a5c1e6575834af450", "message": "minor edits: remove non-required non-null check, remove empty line\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-10-08T10:08:41Z", "type": "commit"}, {"oid": "a483c426ab51c1c5d9e2e9c4843e53138633819c", "url": "https://github.com/powsybl/powsybl-core/commit/a483c426ab51c1c5d9e2e9c4843e53138633819c", "message": "Merge branch 'master' into integration_cgmes_new_ssh_export", "committedDate": "2020-10-08T10:40:31Z", "type": "commit"}, {"oid": "a338f37b32967ea02668fb9fe1f8f5112826d9c9", "url": "https://github.com/powsybl/powsybl-core/commit/a338f37b32967ea02668fb9fe1f8f5112826d9c9", "message": "Merge branch 'master' into integration_cgmes_new_ssh_export", "committedDate": "2020-10-09T06:31:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMzNzAwMQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r506337001", "bodyText": "I am not sure we have to support this as we don't have the use-case (or the workflow) because it could lead to bad choices for the extension CgmesSshControlAreas. It could be a generic extension shared by UCTE and CGMES workflows. This extension can be an extension of a voltage level or a substation, that only say in which control area the voltage levl or the substation belong. And then, we will have a processing to compute the net position each time, without storing it.", "author": "annetill", "createdAt": "2020-10-16T11:53:26Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Conversion.java", "diffHunk": "@@ -306,6 +311,34 @@ private void addCgmesSvMetadata(Network network) {\n         }\n     }\n \n+    private void addCgmesSshMetadata(Network network) {\n+        PropertyBags sshDescription = cgmes.fullModel(CgmesSubset.STEADY_STATE_HYPOTHESIS.getProfile());\n+        if (sshDescription != null && !sshDescription.isEmpty()) {\n+            CgmesSshMetadataAdder adder = network.newExtension(CgmesSshMetadataAdder.class)\n+                    .setDescription(sshDescription.get(0).getId(\"description\"))\n+                    .setSshVersion(sshDescription.get(0).asInt(\"version\"))\n+                    .setModelingAuthoritySet(sshDescription.get(0).getId(\"modelingAuthoritySet\"));\n+            sshDescription.pluckLocals(\"DependentOn\").forEach(adder::addDependency);\n+            adder.add();\n+        }\n+    }\n+\n+    private void addCgmesSshControlAreas(Network network) {", "originalCommit": "a338f37b32967ea02668fb9fe1f8f5112826d9c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0f5757632bf32333390ee33f6966ad0fbc296e45", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Conversion.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Conversion.java\nindex 5424a3fcd..c0d52bb06 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Conversion.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Conversion.java\n\n@@ -323,19 +321,10 @@ public class Conversion {\n         }\n     }\n \n-    private void addCgmesSshControlAreas(Network network) {\n+    private void addCgmesSshControlAreas(Network network, Context context) {\n         PropertyBags sshControlAreas = cgmes.controlAreas();\n         if (sshControlAreas != null && !sshControlAreas.isEmpty()) {\n-            CgmesSshControlAreasAdder adder = network.newExtension(CgmesSshControlAreasAdder.class);\n-\n-            sshControlAreas.forEach(sshControlArea -> {\n-                String id = sshControlArea.getId(\"ControlArea\");\n-                double netInterchange = sshControlArea.asDouble(\"netInterchange\");\n-                double pTolerance = sshControlArea.asDouble(\"pTolerance\");\n-                ControlArea controlArea = new ControlArea(id, netInterchange, pTolerance);\n-                adder.addControlArea(controlArea);\n-            });\n-            adder.add();\n+            context.ignored(\"ControlAreas\", \"Unsupported in current version\");\n         }\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM0MjU2OA==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r506342568", "bodyText": "We don't have an extension for that ? What is the difference with ActivePowerControl ?", "author": "annetill", "createdAt": "2020-10-16T12:00:07Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/SynchronousMachineConversion.java", "diffHunk": "@@ -60,6 +60,14 @@ public void convert() {\n         if (p.asInt(\"referencePriority\", 0) > 0) {\n             SlackTerminal.reset(g.getTerminal().getVoltageLevel(), g.getTerminal());\n         }\n+        if (p.containsKey(\"normalPF\")) {\n+            // Convert to double then to string to have canonical representation of number\n+            g.setProperty(\"GeneratingUnit.normalPF\", Double.valueOf(p.get(\"normalPF\")).toString());", "originalCommit": "a338f37b32967ea02668fb9fe1f8f5112826d9c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM0MzIzMw==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r506343233", "bodyText": "Do we really need a property ? Increase an extension ?", "author": "annetill", "createdAt": "2020-10-16T12:01:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM0MjU2OA=="}], "type": "inlineReview", "revised_code": {"commit": "5680e64a5fa33b674d97fafc0109f699a789709a", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/SynchronousMachineConversion.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/SynchronousMachineConversion.java\nindex b60c41b70..0fbe6abb6 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/SynchronousMachineConversion.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/SynchronousMachineConversion.java\n\n@@ -61,8 +62,13 @@ public class SynchronousMachineConversion extends AbstractReactiveLimitsOwnerCon\n             SlackTerminal.reset(g.getTerminal().getVoltageLevel(), g.getTerminal());\n         }\n         if (p.containsKey(\"normalPF\")) {\n-            // Convert to double then to string to have canonical representation of number\n-            g.setProperty(\"GeneratingUnit.normalPF\", Double.valueOf(p.get(\"normalPF\")).toString());\n+            // Extension power control adder attribute \"droop\"\n+            // is documented as the participation factor when distributed slack is enabled\n+            // We map the normal participation factor from CGMES to droop\n+            g.newExtension(ActivePowerControlAdder.class)\n+                    .withParticipate(true)\n+                    .withDroop((float) p.asDouble(\"normalPF\"))\n+                    .add();\n         }\n         String generatingUnit = p.getId(\"GeneratingUnit\");\n         if (generatingUnit != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM0NTE2MA==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r506345160", "bodyText": "Why do we need all these properties ? We have most of these information in IIDM tap changer, no ?", "author": "annetill", "createdAt": "2020-10-16T12:03:46Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/AbstractTransformerConversion.java", "diffHunk": "@@ -120,4 +121,80 @@ protected void addAliases(Identifiable<?> identifiable) {\n             }\n         }\n     }\n+\n+    private static RegulatingControl getRegulatingControl(Context context, String regulatingControlId) {\n+        return context.regulatingControlMapping().cachedRegulatingControls().get(regulatingControlId);\n+    }\n+\n+    protected void addCgmesDataAsProperties(Identifiable<?> transformer, TapChanger rtc, TapChanger ptc, Context context) {\n+        addRatioTapChangerProperties(transformer, rtc, context);\n+        addPhaseTapChangerProperties(transformer, ptc, context);\n+    }\n+\n+    private static void  addRatioTapChangerProperties(Identifiable<?> transformer, TapChanger rtc, Context context) {\n+        if (rtc == null || rtc.getId() == null) {\n+            return;\n+        }\n+\n+        if (rtc.getRegulatingControlId() != null) {\n+            String key = String.format(\"RatioTapChanger.%s.TapChangerControl\", rtc.getId());\n+            transformer.setProperty(key, rtc.getRegulatingControlId());\n+        }\n+\n+        if (rtc.getHiddenCombinedTapChanger() != null) {\n+            defineHiddenTapChangerProperties(transformer, rtc, rtc.getHiddenCombinedTapChanger(), \"RatioTapChanger\", context);\n+        }\n+    }\n+\n+    private static void  addPhaseTapChangerProperties(Identifiable<?> transformer, TapChanger ptc, Context context) {\n+        if (ptc == null || ptc.getId() == null) {\n+            return;\n+        }\n+\n+        if (ptc.getRegulatingControlId() != null) {\n+            String key = String.format(\"PhaseTapChanger.%s.TapChangerControl\", ptc.getId());\n+            transformer.setProperty(key, ptc.getRegulatingControlId());\n+        }\n+        if (ptc.getType() != null) {\n+            String key = String.format(\"PhaseTapChanger.%s.type\", ptc.getId());\n+            transformer.setProperty(key, ptc.getType());\n+        }\n+\n+        if (ptc.getHiddenCombinedTapChanger() != null) {\n+            defineHiddenTapChangerProperties(transformer, ptc, ptc.getHiddenCombinedTapChanger(), \"PhaseTapChanger\", context);\n+\n+            String key = String.format(\"PhaseTapChanger.%s.type\", ptc.getHiddenCombinedTapChanger().getId());\n+            transformer.setProperty(key, ptc.getHiddenCombinedTapChanger().getType());\n+        }\n+    }\n+\n+    private static void defineHiddenTapChangerProperties(Identifiable<?> transformer, TapChanger tc, TapChanger hiddenTc, String propertyTag, Context context) {", "originalCommit": "a338f37b32967ea02668fb9fe1f8f5112826d9c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM0NTc4OQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r506345789", "bodyText": "We have to use IIDM model in priority.", "author": "annetill", "createdAt": "2020-10-16T12:04:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM0NTE2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU0NDU0NQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r507544545", "bodyText": "@zamarrenolm How much does it happen?\nAnother thing: for a hidden tap changer, I would rather have an extension than a lot of properties...", "author": "miovd", "createdAt": "2020-10-19T07:56:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM0NTE2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU0NTc4Ng==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r507545786", "bodyText": "@zamarrenolm If it doesn't happen a lot and if there is no physical sense, we can afford to lose them (maybe with a warning?)", "author": "miovd", "createdAt": "2020-10-19T07:58:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM0NTE2MA=="}], "type": "inlineReview", "revised_code": {"commit": "1eb453ca70812eddde237c34050afd931ba862b2", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/AbstractTransformerConversion.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/AbstractTransformerConversion.java\nindex 30fb0bf62..9cb42e045 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/AbstractTransformerConversion.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/AbstractTransformerConversion.java\n\n@@ -126,74 +126,32 @@ abstract class AbstractTransformerConversion extends AbstractConductingEquipment\n         return context.regulatingControlMapping().cachedRegulatingControls().get(regulatingControlId);\n     }\n \n-    protected void addCgmesDataAsProperties(Identifiable<?> transformer, TapChanger rtc, TapChanger ptc, Context context) {\n-        addRatioTapChangerProperties(transformer, rtc, context);\n-        addPhaseTapChangerProperties(transformer, ptc, context);\n+    protected void addCgmesReferences(Identifiable<?> transformer, TapChanger rtc, TapChanger ptc, Context context) {\n+        addCgmesReferences(transformer, rtc, \"RatioTapChanger\", context);\n+        addCgmesReferences(transformer, ptc, \"PhaseTapChanger\", context);\n     }\n \n-    private static void  addRatioTapChangerProperties(Identifiable<?> transformer, TapChanger rtc, Context context) {\n-        if (rtc == null || rtc.getId() == null) {\n+    private static void addCgmesReferences(Identifiable<?> transformer, TapChanger tc, String ratioPhaseTag, Context context) {\n+        if (tc == null || tc.getId() == null) {\n             return;\n         }\n-\n-        if (rtc.getRegulatingControlId() != null) {\n-            String key = String.format(\"RatioTapChanger.%s.TapChangerControl\", rtc.getId());\n-            transformer.setProperty(key, rtc.getRegulatingControlId());\n-        }\n-\n-        if (rtc.getHiddenCombinedTapChanger() != null) {\n-            defineHiddenTapChangerProperties(transformer, rtc, rtc.getHiddenCombinedTapChanger(), \"RatioTapChanger\", context);\n+        if (tc.getRegulatingControlId() != null) {\n+            String key = String.format(\"%s.%s.TapChangerControl\", ratioPhaseTag, tc.getId());\n+            transformer.setProperty(key, tc.getRegulatingControlId());\n         }\n-    }\n-\n-    private static void  addPhaseTapChangerProperties(Identifiable<?> transformer, TapChanger ptc, Context context) {\n-        if (ptc == null || ptc.getId() == null) {\n-            return;\n+        if (tc.getType() != null) {\n+            String key = String.format(\"%s.%s.type\", ratioPhaseTag, tc.getId());\n+            transformer.setProperty(key, tc.getType());\n         }\n-\n-        if (ptc.getRegulatingControlId() != null) {\n-            String key = String.format(\"PhaseTapChanger.%s.TapChangerControl\", ptc.getId());\n-            transformer.setProperty(key, ptc.getRegulatingControlId());\n-        }\n-        if (ptc.getType() != null) {\n-            String key = String.format(\"PhaseTapChanger.%s.type\", ptc.getId());\n-            transformer.setProperty(key, ptc.getType());\n-        }\n-\n-        if (ptc.getHiddenCombinedTapChanger() != null) {\n-            defineHiddenTapChangerProperties(transformer, ptc, ptc.getHiddenCombinedTapChanger(), \"PhaseTapChanger\", context);\n-\n-            String key = String.format(\"PhaseTapChanger.%s.type\", ptc.getHiddenCombinedTapChanger().getId());\n-            transformer.setProperty(key, ptc.getHiddenCombinedTapChanger().getType());\n-        }\n-    }\n-\n-    private static void defineHiddenTapChangerProperties(Identifiable<?> transformer, TapChanger tc, TapChanger hiddenTc, String propertyTag, Context context) {\n-\n-        String key = String.format(\"%s.%s.hiddenTapChangerId\", propertyTag, tc.getId());\n-        transformer.setProperty(key, hiddenTc.getId());\n-\n-        key = String.format(\"%s.%s.controlEnabled\", propertyTag, hiddenTc.getId());\n-        transformer.setProperty(key, String.valueOf(hiddenTc.isTapChangerControlEnabled()));\n-\n-        key = String.format(\"%s.%s.step\", propertyTag, hiddenTc.getId());\n-        transformer.setProperty(key, String.valueOf(hiddenTc.getTapPosition()));\n-\n-        if (hiddenTc.getRegulatingControlId() != null) {\n-            key = String.format(\"%s.%s.tapChangerControl\", propertyTag, hiddenTc.getId());\n-            transformer.setProperty(key, hiddenTc.getRegulatingControlId());\n-\n-            RegulatingControl rc = getRegulatingControl(context, hiddenTc.getRegulatingControlId());\n-            if (rc != null) {\n-                // isRegulating always false in hidden tapChangers\n-                key = String.format(\"%s.%s.isRegulating\", propertyTag, hiddenTc.getId());\n-                transformer.setProperty(key, \"false\");\n-\n-                key = String.format(\"%s.%s.targetValue\", propertyTag, hiddenTc.getId());\n-                transformer.setProperty(key, String.valueOf(rc.getTargetValue()));\n-\n-                key = String.format(\"%s.%s.targetDeadBand\", propertyTag, hiddenTc.getId());\n-                transformer.setProperty(key, String.valueOf(rc.getTargetDeadBand()));\n+        TapChanger tch = tc.getHiddenCombinedTapChanger();\n+        if (tch != null) {\n+            String key = String.format(\"%s.%s.hiddenTapChangerId\", ratioPhaseTag, tc.getId());\n+            transformer.setProperty(key, tch.getId());\n+            key = String.format(\"%s.%s.step\", ratioPhaseTag, tch.getId());\n+            transformer.setProperty(key, String.valueOf(tch.getTapPosition()));\n+            if (tch.getType() != null) {\n+                key = String.format(\"%s.%s.type\", ratioPhaseTag, tch.getId());\n+                transformer.setProperty(key, tch.getType());\n             }\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM1MTQ2OA==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r506351468", "bodyText": "For hidden combined tap changer: see my comment about the two modes of the conversion. I am not sure we have to support that in the mode USING_ONLY_NETWORK_PARAMETER.", "author": "annetill", "createdAt": "2020-10-16T12:12:17Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/TapChanger.java", "diffHunk": "@@ -173,6 +180,11 @@ public TapChanger setTapChangerControlEnabled(boolean tapChangerControlEnabled)\n         return this;\n     }\n \n+    public TapChanger setHiddenCombinedTapChanger(TapChanger hiddenCombinedTapChanger) {", "originalCommit": "a338f37b32967ea02668fb9fe1f8f5112826d9c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "56c9f12cafecb0f1f50a28e4fb73512856320940", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/TapChanger.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/TapChanger.java\nindex cb17577a6..7a8eddcf9 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/TapChanger.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/TapChanger.java\n\n@@ -180,11 +173,6 @@ public class TapChanger {\n         return this;\n     }\n \n-    public TapChanger setHiddenCombinedTapChanger(TapChanger hiddenCombinedTapChanger) {\n-        this.hiddenCombinedTapChanger = hiddenCombinedTapChanger;\n-        return this;\n-    }\n-\n     public Step beginStep() {\n         return new Step();\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM1Mzk0Mw==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r506353943", "bodyText": "I am really not sure about this extension as we don't have the use case.Maybe we have to accept to not support these fields in the beginning.", "author": "annetill", "createdAt": "2020-10-16T12:15:45Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/extensions/CgmesSshControlAreas.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.cgmes.conversion.extensions;\n+\n+import com.powsybl.cgmes.conversion.extensions.CgmesSshControlAreasImpl.ControlArea;\n+import com.powsybl.commons.extensions.Extension;\n+import com.powsybl.iidm.network.Network;\n+\n+import java.util.List;\n+\n+/**\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n+ */\n+public interface CgmesSshControlAreas extends Extension<Network> {", "originalCommit": "a338f37b32967ea02668fb9fe1f8f5112826d9c9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0f5757632bf32333390ee33f6966ad0fbc296e45", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/extensions/CgmesSshControlAreas.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/extensions/CgmesSshControlAreas.java\ndeleted file mode 100644\nindex e141588db..000000000\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/extensions/CgmesSshControlAreas.java\n+++ /dev/null\n\n@@ -1,27 +0,0 @@\n-/**\n- * Copyright (c) 2020, RTE (http://www.rte-france.com)\n- * This Source Code Form is subject to the terms of the Mozilla Public\n- * License, v. 2.0. If a copy of the MPL was not distributed with this\n- * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n- */\n-package com.powsybl.cgmes.conversion.extensions;\n-\n-import com.powsybl.cgmes.conversion.extensions.CgmesSshControlAreasImpl.ControlArea;\n-import com.powsybl.commons.extensions.Extension;\n-import com.powsybl.iidm.network.Network;\n-\n-import java.util.List;\n-\n-/**\n- * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n- * @author Jos\u00e9 Antonio Marqu\u00e9s <marquesja at aia.es>\n- */\n-public interface CgmesSshControlAreas extends Extension<Network> {\n-\n-    List<ControlArea> getControlAreas();\n-\n-    @Override\n-    default String getName() {\n-        return \"cgmesSshControlAreas\";\n-    }\n-}\n"}}, {"oid": "daa24e9ca44d97f1168dfe3befd37aadfb74b125", "url": "https://github.com/powsybl/powsybl-core/commit/daa24e9ca44d97f1168dfe3befd37aadfb74b125", "message": "Merge branch 'master' into integration_cgmes_new_ssh_export", "committedDate": "2020-10-27T09:59:49Z", "type": "commit"}, {"oid": "0f5757632bf32333390ee33f6966ad0fbc296e45", "url": "https://github.com/powsybl/powsybl-core/commit/0f5757632bf32333390ee33f6966ad0fbc296e45", "message": "remove support for control areas\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-10-27T11:26:07Z", "type": "commit"}, {"oid": "5680e64a5fa33b674d97fafc0109f699a789709a", "url": "https://github.com/powsybl/powsybl-core/commit/5680e64a5fa33b674d97fafc0109f699a789709a", "message": "Map CGMES generating unit normalPF to participation factor (droop) in IIDM active power control extension\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-10-27T14:24:55Z", "type": "commit"}, {"oid": "0df9017afba27a41ef1323d82c0e7e6b6133c424", "url": "https://github.com/powsybl/powsybl-core/commit/0df9017afba27a41ef1323d82c0e7e6b6133c424", "message": "avoid unneeded boxing (sonar)\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-10-27T14:41:32Z", "type": "commit"}, {"oid": "8dfe3e3e1c2c377da5fa070ed1f0ae25479d86a6", "url": "https://github.com/powsybl/powsybl-core/commit/8dfe3e3e1c2c377da5fa070ed1f0ae25479d86a6", "message": "write scenario time preserving time zone\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-10-28T16:20:05Z", "type": "commit"}, {"oid": "ed424e10168b2fb08f8ebf1a67d53357cdf9387c", "url": "https://github.com/powsybl/powsybl-core/commit/ed424e10168b2fb08f8ebf1a67d53357cdf9387c", "message": "parse scenario time preserving time zone, use UTC if no zone provided, fix tests\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-10-28T22:57:46Z", "type": "commit"}, {"oid": "1eb453ca70812eddde237c34050afd931ba862b2", "url": "https://github.com/powsybl/powsybl-core/commit/1eb453ca70812eddde237c34050afd931ba862b2", "message": "store minimum data for combined hidden tap changers", "committedDate": "2020-10-29T15:39:53Z", "type": "commit"}, {"oid": "bd2ecb8e4057fb964fdf79a15984a938cc117848", "url": "https://github.com/powsybl/powsybl-core/commit/bd2ecb8e4057fb964fdf79a15984a938cc117848", "message": "simplify code, avoid duplications\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-10-30T10:48:48Z", "type": "commit"}, {"oid": "f3a94575061e5ac9a7f61e3c2dbdfe53cb47e754", "url": "https://github.com/powsybl/powsybl-core/commit/f3a94575061e5ac9a7f61e3c2dbdfe53cb47e754", "message": "simplify code, avoid duplications\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-10-30T16:04:09Z", "type": "commit"}, {"oid": "656de608cdc46c42c3a34140c054b4ae75e189e1", "url": "https://github.com/powsybl/powsybl-core/commit/656de608cdc46c42c3a34140c054b4ae75e189e1", "message": "fix style\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-11-02T11:43:21Z", "type": "commit"}, {"oid": "bf145a62de700fd07db3dda08dd33db5d8190aa6", "url": "https://github.com/powsybl/powsybl-core/commit/bf145a62de700fd07db3dda08dd33db5d8190aa6", "message": "Merge branch 'master' into integration_cgmes_new_ssh_export", "committedDate": "2020-11-16T06:55:57Z", "type": "commit"}, {"oid": "13a598e5bbe8f552b25bac848908da82af05f42d", "url": "https://github.com/powsybl/powsybl-core/commit/13a598e5bbe8f552b25bac848908da82af05f42d", "message": "for regulating controls the only property stored in network is the CGMES identifier (pending adjustment of unit tests)\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-11-16T08:45:08Z", "type": "commit"}, {"oid": "9a44a5a5f3f48d11e3252538448704815a4381d2", "url": "https://github.com/powsybl/powsybl-core/commit/9a44a5a5f3f48d11e3252538448704815a4381d2", "message": "store shunt regulating control data even if equipment does not participate (keeping shunt voltage regulation as off)\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-11-16T15:02:08Z", "type": "commit"}, {"oid": "a1fc667f2fc4e0b8a9de799e7e4f23bf15dbbf3d", "url": "https://github.com/powsybl/powsybl-core/commit/a1fc667f2fc4e0b8a9de799e7e4f23bf15dbbf3d", "message": "combine shared regulating control data from multiple equipment when exporting to SSH\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-11-16T15:50:38Z", "type": "commit"}, {"oid": "f4f38f0f6a8c31ce920e457b21b2c68265ce54e7", "url": "https://github.com/powsybl/powsybl-core/commit/f4f38f0f6a8c31ce920e457b21b2c68265ce54e7", "message": "Merge branch 'master' into integration_cgmes_new_ssh_export\n\nSigned-off-by: Luma <zamarrenolm@aia.es>\n\n# Conflicts:\n#\tcgmes/cgmes-conversion/src/test/java/com/powsybl/cgmes/conversion/test/update/StateVariablesExportTest.java", "committedDate": "2020-11-16T18:54:36Z", "type": "commit"}, {"oid": "3ff6740f70728b8436124927ef68d6461db704cb", "url": "https://github.com/powsybl/powsybl-core/commit/3ff6740f70728b8436124927ef68d6461db704cb", "message": "fix tests; ensure filenames follow required filename convention\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-11-16T19:23:01Z", "type": "commit"}, {"oid": "b8b6a783de1222ce8136f1387a966fd633eb37a2", "url": "https://github.com/powsybl/powsybl-core/commit/b8b6a783de1222ce8136f1387a966fd633eb37a2", "message": "adjust tests\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-11-17T14:14:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQzODMyNQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r529438325", "bodyText": "params is never supposed to be null, I think it is okay to throw a NullPointerException if it happens (otherwise, it would have a different behavior than the other exporters and that might be weird)", "author": "MioRtia", "createdAt": "2020-11-24T10:44:26Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CgmesExport.java", "diffHunk": "@@ -7,42 +7,91 @@\n \n package com.powsybl.cgmes.conversion;\n \n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.UncheckedIOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n import java.util.Properties;\n \n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamWriter;\n+\n import com.google.auto.service.AutoService;\n+import com.google.common.collect.ImmutableList;\n+import com.powsybl.cgmes.conversion.export.CgmesExportContext;\n+import com.powsybl.cgmes.conversion.export.StateVariablesAdder;\n+import com.powsybl.cgmes.conversion.export.StateVariablesExport;\n+import com.powsybl.cgmes.conversion.export.SteadyStateHypothesisExport;\n import com.powsybl.cgmes.conversion.update.CgmesUpdate;\n-import com.powsybl.cgmes.conversion.update.StateVariablesAdder;\n import com.powsybl.cgmes.model.CgmesModel;\n import com.powsybl.cgmes.model.CgmesModelException;\n import com.powsybl.cgmes.model.CgmesModelFactory;\n import com.powsybl.commons.datasource.DataSource;\n+import com.powsybl.commons.exceptions.UncheckedXmlStreamException;\n+import com.powsybl.commons.xml.XmlUtil;\n+import com.powsybl.iidm.ConversionParameters;\n import com.powsybl.iidm.export.Exporter;\n import com.powsybl.iidm.network.Network;\n+import com.powsybl.iidm.parameters.Parameter;\n+import com.powsybl.iidm.parameters.ParameterType;\n \n /**\n  * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n  */\n @AutoService(Exporter.class)\n public class CgmesExport implements Exporter {\n \n+    public List<Parameter> getParameters() {\n+        return Collections.unmodifiableList(STATIC_PARAMETERS);\n+    }\n+\n     @Override\n     public void export(Network network, Properties params, DataSource ds) {\n+        Objects.requireNonNull(network);\n+        if (params != null && ConversionParameters.readBooleanParameter(getFormat(), params, USING_ONLY_NETWORK_PARAMETER)) {", "originalCommit": "b8b6a783de1222ce8136f1387a966fd633eb37a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYyNzY1OA==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r529627658", "bodyText": "Sorry, I always thought parameters in Exporters.export API could be null. In fact TestExporter in package com.powsybl.iidm.export and a few related tests use parameters == null.\nAlso, I followed the XmlExporter, where the parameters are used in the createExportOptions method, that finally ends in the ConversionParameters.readParameter method, where parameters is explicitly checked for null, so null is also allowed in iidm-xml-converter.\nAm I right ? Am I missing something ?", "author": "zamarrenolm", "createdAt": "2020-11-24T15:21:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQzODMyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE2NjY5OA==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r530166698", "bodyText": "You are right parameters can be null, I stand corrected!\nHowever, an issue remains: it means network can't be exported using only network when params is null, why is that? The test params != null should be removed for me", "author": "miovd", "createdAt": "2020-11-25T07:51:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQzODMyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE4NjM2Ng==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r530186366", "bodyText": "Totally right, there is no need to check for params != null. The ConversionParameters.readBooleanParameter will take care of parameters received as Properties, ignoring them if they are null or overriding configuration if they are provided.", "author": "zamarrenolm", "createdAt": "2020-11-25T08:28:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQzODMyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "991cb69ac2bf2780c1ac4e0eb1775e350253ea3e", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CgmesExport.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CgmesExport.java\nindex eeccb8400..86c0a813b 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CgmesExport.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CgmesExport.java\n\n@@ -7,17 +7,6 @@\n \n package com.powsybl.cgmes.conversion;\n \n-import java.io.IOException;\n-import java.io.OutputStream;\n-import java.io.UncheckedIOException;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Objects;\n-import java.util.Properties;\n-\n-import javax.xml.stream.XMLStreamException;\n-import javax.xml.stream.XMLStreamWriter;\n-\n import com.google.auto.service.AutoService;\n import com.google.common.collect.ImmutableList;\n import com.powsybl.cgmes.conversion.export.CgmesExportContext;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NDU0Mw==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r529474543", "bodyText": "I think this method can be static", "author": "MioRtia", "createdAt": "2020-11-24T11:29:03Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CgmesExport.java", "diffHunk": "@@ -7,42 +7,91 @@\n \n package com.powsybl.cgmes.conversion;\n \n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.UncheckedIOException;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n import java.util.Properties;\n \n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamWriter;\n+\n import com.google.auto.service.AutoService;\n+import com.google.common.collect.ImmutableList;\n+import com.powsybl.cgmes.conversion.export.CgmesExportContext;\n+import com.powsybl.cgmes.conversion.export.StateVariablesAdder;\n+import com.powsybl.cgmes.conversion.export.StateVariablesExport;\n+import com.powsybl.cgmes.conversion.export.SteadyStateHypothesisExport;\n import com.powsybl.cgmes.conversion.update.CgmesUpdate;\n-import com.powsybl.cgmes.conversion.update.StateVariablesAdder;\n import com.powsybl.cgmes.model.CgmesModel;\n import com.powsybl.cgmes.model.CgmesModelException;\n import com.powsybl.cgmes.model.CgmesModelFactory;\n import com.powsybl.commons.datasource.DataSource;\n+import com.powsybl.commons.exceptions.UncheckedXmlStreamException;\n+import com.powsybl.commons.xml.XmlUtil;\n+import com.powsybl.iidm.ConversionParameters;\n import com.powsybl.iidm.export.Exporter;\n import com.powsybl.iidm.network.Network;\n+import com.powsybl.iidm.parameters.Parameter;\n+import com.powsybl.iidm.parameters.ParameterType;\n \n /**\n  * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n  */\n @AutoService(Exporter.class)\n public class CgmesExport implements Exporter {\n \n+    public List<Parameter> getParameters() {\n+        return Collections.unmodifiableList(STATIC_PARAMETERS);\n+    }\n+\n     @Override\n     public void export(Network network, Properties params, DataSource ds) {\n+        Objects.requireNonNull(network);\n+        if (params != null && ConversionParameters.readBooleanParameter(getFormat(), params, USING_ONLY_NETWORK_PARAMETER)) {\n+            exportUsingOnlyNetwork(network, params, ds);\n+        } else {\n+            CgmesModelExtension ext = network.getExtension(CgmesModelExtension.class);\n+            if (ext == null) {\n+                throw new CgmesModelException(\"CGMES model is required and not found in Network extension\");\n+            }\n+            exportUsingOriginalCgmesModel(network, ds, ext);\n+        }\n+    }\n+\n+    private String baseName(Network network, Properties params) {\n+        String baseName = ConversionParameters.readStringParameter(getFormat(), params, BASE_NAME_PARAMETER);\n+        return baseName != null ? baseName : network.getNameOrId();\n+    }\n \n-        // Right now the network must contain the original CgmesModel\n-        // In the future it should be possible to export to CGMES\n-        // directly from an IIDM Network,\n-        // without the need for the original CgmesModel\n-        CgmesModelExtension ext = network.getExtension(CgmesModelExtension.class);\n-        if (ext == null) {\n-            throw new CgmesModelException(\"No extension for CGMES model found in Network\");\n+    private void exportUsingOnlyNetwork(Network network, Properties params, DataSource ds) {\n+        // At this point only SSH, SV can be exported when relying only in Network data\n+        // (minimum amount of CGMES references are expected as aliases/properties/extensions)\n+        String baseName = baseName(network, params);\n+        String filenameSv = baseName + \"_SV.xml\";\n+        String filenameSsh = baseName + \"_SSH.xml\";\n+        CgmesExportContext context = new CgmesExportContext(network);\n+        try (OutputStream osv = ds.newOutputStream(filenameSv, false);\n+                OutputStream ossh = ds.newOutputStream(filenameSsh, false)) {\n+            XMLStreamWriter writer;\n+            writer = XmlUtil.initializeWriter(true, \"    \", osv);\n+            StateVariablesExport.write(network, writer, context);\n+            writer = XmlUtil.initializeWriter(true, \"    \", ossh);\n+            SteadyStateHypothesisExport.write(network, writer, context);\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        } catch (XMLStreamException e) {\n+            throw new UncheckedXmlStreamException(e);\n         }\n-        CgmesUpdate cgmesUpdate = ext.getCgmesUpdate();\n+    }\n \n+    private void exportUsingOriginalCgmesModel(Network network, DataSource ds, CgmesModelExtension ext) {", "originalCommit": "b8b6a783de1222ce8136f1387a966fd633eb37a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYzMTM3Nw==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r529631377", "bodyText": "fixed", "author": "zamarrenolm", "createdAt": "2020-11-24T15:25:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NDU0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "991cb69ac2bf2780c1ac4e0eb1775e350253ea3e", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CgmesExport.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CgmesExport.java\nindex eeccb8400..86c0a813b 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CgmesExport.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CgmesExport.java\n\n@@ -7,17 +7,6 @@\n \n package com.powsybl.cgmes.conversion;\n \n-import java.io.IOException;\n-import java.io.OutputStream;\n-import java.io.UncheckedIOException;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Objects;\n-import java.util.Properties;\n-\n-import javax.xml.stream.XMLStreamException;\n-import javax.xml.stream.XMLStreamWriter;\n-\n import com.google.auto.service.AutoService;\n import com.google.common.collect.ImmutableList;\n import com.powsybl.cgmes.conversion.export.CgmesExportContext;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NjE1Nw==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r529476157", "bodyText": "Maybe add a TODO comment", "author": "MioRtia", "createdAt": "2020-11-24T11:31:46Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Conversion.java", "diffHunk": "@@ -306,6 +309,25 @@ private void addCgmesSvMetadata(Network network) {\n         }\n     }\n \n+    private void addCgmesSshMetadata(Network network) {\n+        PropertyBags sshDescription = cgmes.fullModel(CgmesSubset.STEADY_STATE_HYPOTHESIS.getProfile());\n+        if (sshDescription != null && !sshDescription.isEmpty()) {\n+            CgmesSshMetadataAdder adder = network.newExtension(CgmesSshMetadataAdder.class)\n+                    .setDescription(sshDescription.get(0).getId(\"description\"))\n+                    .setSshVersion(sshDescription.get(0).asInt(\"version\"))\n+                    .setModelingAuthoritySet(sshDescription.get(0).getId(\"modelingAuthoritySet\"));\n+            sshDescription.pluckLocals(\"DependentOn\").forEach(adder::addDependency);\n+            adder.add();\n+        }\n+    }\n+\n+    private void addCgmesSshControlAreas(Network network, Context context) {\n+        PropertyBags sshControlAreas = cgmes.controlAreas();\n+        if (sshControlAreas != null && !sshControlAreas.isEmpty()) {\n+            context.ignored(\"ControlAreas\", \"Unsupported in current version\");", "originalCommit": "b8b6a783de1222ce8136f1387a966fd633eb37a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYzMTUyNA==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r529631524", "bodyText": "added TODO comment", "author": "zamarrenolm", "createdAt": "2020-11-24T15:25:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ3NjE1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "991cb69ac2bf2780c1ac4e0eb1775e350253ea3e", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Conversion.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Conversion.java\nindex cb81bbb63..bb09fb6a7 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Conversion.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Conversion.java\n\n@@ -324,6 +324,7 @@ public class Conversion {\n     private void addCgmesSshControlAreas(Network network, Context context) {\n         PropertyBags sshControlAreas = cgmes.controlAreas();\n         if (sshControlAreas != null && !sshControlAreas.isEmpty()) {\n+            // TODO Develop conversion after IIDM modelling of control areas or define extension\n             context.ignored(\"ControlAreas\", \"Unsupported in current version\");\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU0Nzc3MA==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r529547770", "bodyText": "Why is it necessary?", "author": "MioRtia", "createdAt": "2020-11-24T13:34:00Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/AbstractTransformerConversion.java", "diffHunk": "@@ -109,15 +109,41 @@ protected void addAliases(Identifiable<?> identifiable) {\n         if (ptcs != null) {\n             for (int  i = 0; i < ptcs.size(); i++) {\n                 int index = i + 1;\n-                Optional.ofNullable(ptcs.get(i)).ifPresent(ptc -> identifiable.addAlias(ptc, Conversion.CGMES_PREFIX_ALIAS + CgmesNames.PHASE_TAP_CHANGER + index));\n+                Optional.ofNullable(ptcs.get(i)).ifPresent(ptc -> identifiable.addAlias(ptc, Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + index));\n             }\n         }\n         List<String> rtcs = context.cgmes().ratioTapChangerListForPowerTransformer(identifiable.getId());\n         if (rtcs != null) {\n             for (int i = 0; i < rtcs.size(); i++) {\n                 int index = i + 1;\n-                Optional.ofNullable(rtcs.get(i)).ifPresent(rtc -> identifiable.addAlias(rtc, Conversion.CGMES_PREFIX_ALIAS + CgmesNames.RATIO_TAP_CHANGER + index));\n+                Optional.ofNullable(rtcs.get(i)).ifPresent(rtc -> identifiable.addAlias(rtc, Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + index));\n             }\n         }\n     }\n+\n+    protected static void addCgmesReferences(Identifiable<?> transformer, TapChanger tc) {\n+        if (tc == null || tc.getId() == null) {\n+            return;\n+        }\n+        if (tc.getRegulatingControlId() != null) {\n+            transformer.setProperty(cgmesReferenceKey(tc.getId(), \"TapChangerControl\"), tc.getRegulatingControlId());\n+        }\n+        if (tc.getType() != null) {\n+            transformer.setProperty(cgmesReferenceKey(tc.getId(), \"type\"), tc.getType());\n+        }\n+        TapChanger tch = tc.getHiddenCombinedTapChanger();\n+        if (tch != null) {\n+            // All the tap changers have already been added as aliases,\n+            // Through properties we only label which one has been combined and kept hidden\n+            transformer.setProperty(cgmesReferenceKey(tc.getId(), \"hiddenTapChangerId\"), tch.getId());\n+            transformer.setProperty(cgmesReferenceKey(tch.getId(), \"step\"), String.valueOf(tch.getTapPosition()));\n+            if (tch.getType() != null) {\n+                transformer.setProperty(cgmesReferenceKey(tch.getId(), \"type\"), tch.getType());\n+            }", "originalCommit": "b8b6a783de1222ce8136f1387a966fd633eb37a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY0MzU2Ng==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r529643566", "bodyText": "For phase tap changers, the subtype of tap changer (Linear, non-Linear Asymmetrical, non-Linear Symmetrical) must be stored as a property because the subtype class name is required for proper SSH export. The XML element must be named with the subtype. An example for the MicroGrid test case:\n  <cim:PhaseTapChangerAsymmetrical rdf:about=\"#_6ebbef67-3061-4236-a6fd-6ccc4595f6c3\">\n    <cim:TapChanger.step>10</cim:TapChanger.step>\n    <cim:TapChanger.controlEnabled>true</cim:TapChanger.controlEnabled>\n  </cim:PhaseTapChangerAsymmetrical>\nIn PowSyBl all phase tap changers are tabular, and there is no other way to recover this information from the IIDM PhaseTapChanger object, so we decided to save it as a property.", "author": "zamarrenolm", "createdAt": "2020-11-24T15:34:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU0Nzc3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE2OTM2MA==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r530169360", "bodyText": "Okay! In this case, I wrote it in SSHExport file, but in export, the default type should be tabular", "author": "miovd", "createdAt": "2020-11-25T07:56:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU0Nzc3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIwODcwOA==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r530208708", "bodyText": "You are right, I fixed the default value (PhaseTapChanger is an abstract class in CGMES, a subtype must be used, and default should be PhaseTapChangerTabular, according to IIDM modelling).", "author": "zamarrenolm", "createdAt": "2020-11-25T09:04:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU0Nzc3MA=="}], "type": "inlineReview", "revised_code": {"commit": "8a8d7e12477c86dc8384890485c7b629fa626ba7", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/AbstractTransformerConversion.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/AbstractTransformerConversion.java\nindex 992ed0067..ec6e737d4 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/AbstractTransformerConversion.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/AbstractTransformerConversion.java\n\n@@ -109,14 +109,14 @@ abstract class AbstractTransformerConversion extends AbstractConductingEquipment\n         if (ptcs != null) {\n             for (int  i = 0; i < ptcs.size(); i++) {\n                 int index = i + 1;\n-                Optional.ofNullable(ptcs.get(i)).ifPresent(ptc -> identifiable.addAlias(ptc, Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + index));\n+                Optional.ofNullable(ptcs.get(i)).ifPresent(ptc -> identifiable.addAlias(ptc, Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + index, context.config().isEnsureIdAliasUnicity()));\n             }\n         }\n         List<String> rtcs = context.cgmes().ratioTapChangerListForPowerTransformer(identifiable.getId());\n         if (rtcs != null) {\n             for (int i = 0; i < rtcs.size(); i++) {\n                 int index = i + 1;\n-                Optional.ofNullable(rtcs.get(i)).ifPresent(rtc -> identifiable.addAlias(rtc, Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + index));\n+                Optional.ofNullable(rtcs.get(i)).ifPresent(rtc -> identifiable.addAlias(rtc, Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + index, context.config().isEnsureIdAliasUnicity()));\n             }\n         }\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU0OTAyOA==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r529549028", "bodyText": "I didn't find out where you added the regulatingControlId of transformers?", "author": "MioRtia", "createdAt": "2020-11-24T13:35:51Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForTransformers.java", "diffHunk": "@@ -64,9 +64,10 @@ public CgmesRegulatingControlRatio buildRegulatingControlRatio(String id, String\n         return rtc;\n     }\n \n-    public CgmesRegulatingControlPhase buildRegulatingControlPhase(String regulatingControlId,\n+    public CgmesRegulatingControlPhase buildRegulatingControlPhase(String id, String regulatingControlId,", "originalCommit": "b8b6a783de1222ce8136f1387a966fd633eb37a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY1MzIwNA==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r529653204", "bodyText": "In the AbstractTransformerConversion.addCgmesReferences method:\nif (tc.getRegulatingControlId() != null) {\n    transformer.setProperty(cgmesReferenceKey(tc.getId(), \"TapChangerControl\"), tc.getRegulatingControlId());\n}", "author": "zamarrenolm", "createdAt": "2020-11-24T15:40:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU0OTAyOA=="}], "type": "inlineReview", "revised_code": {"commit": "56c9f12cafecb0f1f50a28e4fb73512856320940", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForTransformers.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForTransformers.java\nindex 0d70edf86..4ee08886e 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForTransformers.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForTransformers.java\n\n@@ -64,10 +59,9 @@ public class RegulatingControlMappingForTransformers {\n         return rtc;\n     }\n \n-    public CgmesRegulatingControlPhase buildRegulatingControlPhase(String id, String regulatingControlId,\n+    public CgmesRegulatingControlPhase buildRegulatingControlPhase(String regulatingControlId,\n         boolean tapChangerControlEnabled, boolean ltcFlag) {\n         CgmesRegulatingControlPhase rtc = new CgmesRegulatingControlPhase();\n-        rtc.id = id;\n         rtc.regulatingControlId = regulatingControlId;\n         rtc.tapChangerControlEnabled = tapChangerControlEnabled;\n         rtc.ltcFlag = ltcFlag;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU1MDQ1Mg==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r529550452", "bodyText": "Is this case supposed to happen? If not, throw an AssertionError", "author": "MioRtia", "createdAt": "2020-11-24T13:37:56Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/export/SteadyStateHypothesisExport.java", "diffHunk": "@@ -0,0 +1,577 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.cgmes.conversion.export;\n+\n+import com.powsybl.cgmes.conversion.Conversion;\n+import com.powsybl.cgmes.model.CgmesNames;\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.exceptions.UncheckedXmlStreamException;\n+import com.powsybl.iidm.network.*;\n+import com.powsybl.iidm.network.extensions.ActivePowerControl;\n+import com.powsybl.iidm.network.extensions.LoadDetail;\n+import com.powsybl.iidm.network.extensions.SlackTerminal;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamWriter;\n+import java.util.*;\n+\n+import static com.powsybl.cgmes.model.CgmesNamespace.RDF_NAMESPACE;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ */\n+public final class SteadyStateHypothesisExport {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(SteadyStateHypothesisExport.class);\n+\n+    private static final String REGULATING_CONTROL_PROPERTY = Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"RegulatingControl\";\n+    private static final String GENERATING_UNIT_PROPERTY = Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"GeneratingUnit\";\n+\n+    private SteadyStateHypothesisExport() {\n+    }\n+\n+    public static void write(Network network, XMLStreamWriter writer, CgmesExportContext context) {\n+        final Map<String, List<RegulatingControlView>> regulatingControlViews = new HashMap<>();\n+        String cimNamespace = context.getCimNamespace();\n+\n+        try {\n+            CgmesExportUtil.writeRdfRoot(context.getCimVersion(), writer);\n+\n+            if (context.getCimVersion() == 16) {\n+                CgmesExportUtil.writeModelDescription(writer, context.getSshModelDescription(), context);\n+            }\n+\n+            writeEnergyConsumers(network, cimNamespace, writer);\n+            writeEquivalentInjections(network, cimNamespace, writer);\n+            writeTapChangers(network, cimNamespace, regulatingControlViews, writer);\n+            writeSynchronousMachines(network, cimNamespace, regulatingControlViews, writer);\n+            writeShuntCompensators(network, cimNamespace, regulatingControlViews, writer);\n+            writeStaticVarCompensators(network, cimNamespace, regulatingControlViews, writer);\n+            writeRegulatingControls(regulatingControlViews, cimNamespace, writer);\n+            writeGeneratingUnitsParticitationFactors(network, cimNamespace, writer);\n+            // TODO writeControlAreas\n+            writeTerminals(network, cimNamespace, writer);\n+\n+            writer.writeEndDocument();\n+        } catch (XMLStreamException e) {\n+            throw new UncheckedXmlStreamException(e);\n+        }\n+    }\n+\n+    private static void writeTerminals(Network network, String cimNamespace, XMLStreamWriter writer) {\n+        for (Connectable<?> c : network.getConnectables()) {\n+            for (Terminal t : c.getTerminals()) {\n+                writeTerminal(t, c, cimNamespace, writer);\n+            }\n+        }\n+        for (DanglingLine dl : network.getDanglingLines()) {\n+            // Terminal for equivalent injection at boundary is always connected\n+            dl.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"EquivalentInjectionTerminal\")\n+                    .ifPresent(tid -> writeTerminal(tid, true, cimNamespace, writer));\n+            // Terminal for boundary side of original line/switch is always connected\n+            dl.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"Terminal_Boundary\")\n+                    .ifPresent(tid -> writeTerminal(tid, true, cimNamespace, writer));\n+        }\n+    }\n+\n+    private static void writeEquivalentInjections(Network network, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n+        // One equivalent injection for every dangling line\n+        for (DanglingLine dl : network.getDanglingLines()) {\n+            writeEquivalentInjection(dl, cimNamespace, writer);\n+        }\n+    }\n+\n+    private static void writeTapChangers(Network network, String cimNamespace, Map<String, List<RegulatingControlView>> regulatingControlViews, XMLStreamWriter writer) throws XMLStreamException {\n+        for (TwoWindingsTransformer twt : network.getTwoWindingsTransformers()) {\n+            if (twt.hasPhaseTapChanger()) {\n+                String ptcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + 1)\n+                        .orElseGet(() -> twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + 2).orElseThrow(PowsyblException::new));\n+                writeTapChanger(twt, ptcId, twt.getPhaseTapChanger(), CgmesNames.PHASE_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n+            } else if (twt.hasRatioTapChanger()) {\n+                String rtcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + 1)\n+                        .orElseGet(() -> twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + 2).orElseThrow(PowsyblException::new));\n+                writeTapChanger(twt, rtcId, twt.getRatioTapChanger(), CgmesNames.RATIO_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n+            }\n+        }\n+\n+        for (ThreeWindingsTransformer twt : network.getThreeWindingsTransformers()) {\n+            int i = 1;\n+            for (ThreeWindingsTransformer.Leg leg : Arrays.asList(twt.getLeg1(), twt.getLeg2(), twt.getLeg3())) {\n+                if (leg.hasPhaseTapChanger()) {\n+                    String ptcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + i).orElseThrow(PowsyblException::new);\n+                    writeTapChanger(twt, ptcId, leg.getPhaseTapChanger(), CgmesNames.PHASE_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n+                } else if (leg.hasRatioTapChanger()) {\n+                    String rtcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + i).orElseThrow(PowsyblException::new);\n+                    writeTapChanger(twt, rtcId, leg.getRatioTapChanger(), CgmesNames.RATIO_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n+                }\n+                i++;\n+            }\n+        }\n+    }\n+\n+    private static void writeTapChanger(Identifiable<?> eq, String tcId, TapChanger<?, ?> tc, String defaultType, Map<String, List<RegulatingControlView>> regulatingControlViews, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n+        String type = eq.getProperty(cgmesTapChangerReferenceKey(tcId, \"type\"), defaultType);\n+        writeTapChanger(type, tcId, tc, cimNamespace, writer);\n+        addRegulatingControlView(tc, tcId, eq, regulatingControlViews);\n+        writeHiddenTapChanger(eq, tcId, defaultType, cimNamespace, writer);\n+    }\n+\n+    private static void writeShuntCompensators(Network network, String cimNamespace, Map<String, List<RegulatingControlView>> regulatingControlViews, XMLStreamWriter writer) throws XMLStreamException {\n+        for (ShuntCompensator s : network.getShuntCompensators()) {\n+            String linearNonlinear;\n+            switch (s.getModelType()) {\n+                case LINEAR:\n+                    linearNonlinear = \"Linear\";\n+                    break;\n+                case NON_LINEAR:\n+                    linearNonlinear = \"Nonlinear\";\n+                    break;\n+                default:\n+                    linearNonlinear = \"\";\n+                    break;", "originalCommit": "b8b6a783de1222ce8136f1387a966fd633eb37a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY2MjY4Ng==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r529662686", "bodyText": "AssertionError thrown", "author": "zamarrenolm", "createdAt": "2020-11-24T15:47:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU1MDQ1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "991cb69ac2bf2780c1ac4e0eb1775e350253ea3e", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/export/SteadyStateHypothesisExport.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/export/SteadyStateHypothesisExport.java\nindex 6c5a8aa14..d5b02d0cc 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/export/SteadyStateHypothesisExport.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/export/SteadyStateHypothesisExport.java\n\n@@ -125,20 +125,19 @@ public final class SteadyStateHypothesisExport {\n \n     private static void writeShuntCompensators(Network network, String cimNamespace, Map<String, List<RegulatingControlView>> regulatingControlViews, XMLStreamWriter writer) throws XMLStreamException {\n         for (ShuntCompensator s : network.getShuntCompensators()) {\n-            String linearNonlinear;\n+            String shuntType;\n             switch (s.getModelType()) {\n                 case LINEAR:\n-                    linearNonlinear = \"Linear\";\n+                    shuntType = \"Linear\";\n                     break;\n                 case NON_LINEAR:\n-                    linearNonlinear = \"Nonlinear\";\n+                    shuntType = \"Nonlinear\";\n                     break;\n                 default:\n-                    linearNonlinear = \"\";\n-                    break;\n+                    throw new AssertionError(\"Unexpected shunt model type: \" + s.getModelType());\n             }\n             boolean controlEnabled = s.isVoltageRegulatorOn();\n-            writer.writeStartElement(cimNamespace, linearNonlinear + \"ShuntCompensator\");\n+            writer.writeStartElement(cimNamespace, shuntType + \"ShuntCompensator\");\n             writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + s.getId());\n             writer.writeStartElement(cimNamespace, \"ShuntCompensator.sections\");\n             writer.writeCharacters(CgmesExportUtil.format(s.getSectionCount()));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU1MDY3NA==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r529550674", "bodyText": "Maybe call it shuntType?", "author": "MioRtia", "createdAt": "2020-11-24T13:38:18Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/export/SteadyStateHypothesisExport.java", "diffHunk": "@@ -0,0 +1,577 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.cgmes.conversion.export;\n+\n+import com.powsybl.cgmes.conversion.Conversion;\n+import com.powsybl.cgmes.model.CgmesNames;\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.exceptions.UncheckedXmlStreamException;\n+import com.powsybl.iidm.network.*;\n+import com.powsybl.iidm.network.extensions.ActivePowerControl;\n+import com.powsybl.iidm.network.extensions.LoadDetail;\n+import com.powsybl.iidm.network.extensions.SlackTerminal;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamWriter;\n+import java.util.*;\n+\n+import static com.powsybl.cgmes.model.CgmesNamespace.RDF_NAMESPACE;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ */\n+public final class SteadyStateHypothesisExport {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(SteadyStateHypothesisExport.class);\n+\n+    private static final String REGULATING_CONTROL_PROPERTY = Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"RegulatingControl\";\n+    private static final String GENERATING_UNIT_PROPERTY = Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"GeneratingUnit\";\n+\n+    private SteadyStateHypothesisExport() {\n+    }\n+\n+    public static void write(Network network, XMLStreamWriter writer, CgmesExportContext context) {\n+        final Map<String, List<RegulatingControlView>> regulatingControlViews = new HashMap<>();\n+        String cimNamespace = context.getCimNamespace();\n+\n+        try {\n+            CgmesExportUtil.writeRdfRoot(context.getCimVersion(), writer);\n+\n+            if (context.getCimVersion() == 16) {\n+                CgmesExportUtil.writeModelDescription(writer, context.getSshModelDescription(), context);\n+            }\n+\n+            writeEnergyConsumers(network, cimNamespace, writer);\n+            writeEquivalentInjections(network, cimNamespace, writer);\n+            writeTapChangers(network, cimNamespace, regulatingControlViews, writer);\n+            writeSynchronousMachines(network, cimNamespace, regulatingControlViews, writer);\n+            writeShuntCompensators(network, cimNamespace, regulatingControlViews, writer);\n+            writeStaticVarCompensators(network, cimNamespace, regulatingControlViews, writer);\n+            writeRegulatingControls(regulatingControlViews, cimNamespace, writer);\n+            writeGeneratingUnitsParticitationFactors(network, cimNamespace, writer);\n+            // TODO writeControlAreas\n+            writeTerminals(network, cimNamespace, writer);\n+\n+            writer.writeEndDocument();\n+        } catch (XMLStreamException e) {\n+            throw new UncheckedXmlStreamException(e);\n+        }\n+    }\n+\n+    private static void writeTerminals(Network network, String cimNamespace, XMLStreamWriter writer) {\n+        for (Connectable<?> c : network.getConnectables()) {\n+            for (Terminal t : c.getTerminals()) {\n+                writeTerminal(t, c, cimNamespace, writer);\n+            }\n+        }\n+        for (DanglingLine dl : network.getDanglingLines()) {\n+            // Terminal for equivalent injection at boundary is always connected\n+            dl.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"EquivalentInjectionTerminal\")\n+                    .ifPresent(tid -> writeTerminal(tid, true, cimNamespace, writer));\n+            // Terminal for boundary side of original line/switch is always connected\n+            dl.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"Terminal_Boundary\")\n+                    .ifPresent(tid -> writeTerminal(tid, true, cimNamespace, writer));\n+        }\n+    }\n+\n+    private static void writeEquivalentInjections(Network network, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n+        // One equivalent injection for every dangling line\n+        for (DanglingLine dl : network.getDanglingLines()) {\n+            writeEquivalentInjection(dl, cimNamespace, writer);\n+        }\n+    }\n+\n+    private static void writeTapChangers(Network network, String cimNamespace, Map<String, List<RegulatingControlView>> regulatingControlViews, XMLStreamWriter writer) throws XMLStreamException {\n+        for (TwoWindingsTransformer twt : network.getTwoWindingsTransformers()) {\n+            if (twt.hasPhaseTapChanger()) {\n+                String ptcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + 1)\n+                        .orElseGet(() -> twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + 2).orElseThrow(PowsyblException::new));\n+                writeTapChanger(twt, ptcId, twt.getPhaseTapChanger(), CgmesNames.PHASE_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n+            } else if (twt.hasRatioTapChanger()) {\n+                String rtcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + 1)\n+                        .orElseGet(() -> twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + 2).orElseThrow(PowsyblException::new));\n+                writeTapChanger(twt, rtcId, twt.getRatioTapChanger(), CgmesNames.RATIO_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n+            }\n+        }\n+\n+        for (ThreeWindingsTransformer twt : network.getThreeWindingsTransformers()) {\n+            int i = 1;\n+            for (ThreeWindingsTransformer.Leg leg : Arrays.asList(twt.getLeg1(), twt.getLeg2(), twt.getLeg3())) {\n+                if (leg.hasPhaseTapChanger()) {\n+                    String ptcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + i).orElseThrow(PowsyblException::new);\n+                    writeTapChanger(twt, ptcId, leg.getPhaseTapChanger(), CgmesNames.PHASE_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n+                } else if (leg.hasRatioTapChanger()) {\n+                    String rtcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + i).orElseThrow(PowsyblException::new);\n+                    writeTapChanger(twt, rtcId, leg.getRatioTapChanger(), CgmesNames.RATIO_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n+                }\n+                i++;\n+            }\n+        }\n+    }\n+\n+    private static void writeTapChanger(Identifiable<?> eq, String tcId, TapChanger<?, ?> tc, String defaultType, Map<String, List<RegulatingControlView>> regulatingControlViews, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n+        String type = eq.getProperty(cgmesTapChangerReferenceKey(tcId, \"type\"), defaultType);\n+        writeTapChanger(type, tcId, tc, cimNamespace, writer);\n+        addRegulatingControlView(tc, tcId, eq, regulatingControlViews);\n+        writeHiddenTapChanger(eq, tcId, defaultType, cimNamespace, writer);\n+    }\n+\n+    private static void writeShuntCompensators(Network network, String cimNamespace, Map<String, List<RegulatingControlView>> regulatingControlViews, XMLStreamWriter writer) throws XMLStreamException {\n+        for (ShuntCompensator s : network.getShuntCompensators()) {\n+            String linearNonlinear;", "originalCommit": "b8b6a783de1222ce8136f1387a966fd633eb37a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY2Mzk1OQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r529663959", "bodyText": "renamed", "author": "zamarrenolm", "createdAt": "2020-11-24T15:48:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU1MDY3NA=="}], "type": "inlineReview", "revised_code": {"commit": "991cb69ac2bf2780c1ac4e0eb1775e350253ea3e", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/export/SteadyStateHypothesisExport.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/export/SteadyStateHypothesisExport.java\nindex 6c5a8aa14..d5b02d0cc 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/export/SteadyStateHypothesisExport.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/export/SteadyStateHypothesisExport.java\n\n@@ -125,20 +125,19 @@ public final class SteadyStateHypothesisExport {\n \n     private static void writeShuntCompensators(Network network, String cimNamespace, Map<String, List<RegulatingControlView>> regulatingControlViews, XMLStreamWriter writer) throws XMLStreamException {\n         for (ShuntCompensator s : network.getShuntCompensators()) {\n-            String linearNonlinear;\n+            String shuntType;\n             switch (s.getModelType()) {\n                 case LINEAR:\n-                    linearNonlinear = \"Linear\";\n+                    shuntType = \"Linear\";\n                     break;\n                 case NON_LINEAR:\n-                    linearNonlinear = \"Nonlinear\";\n+                    shuntType = \"Nonlinear\";\n                     break;\n                 default:\n-                    linearNonlinear = \"\";\n-                    break;\n+                    throw new AssertionError(\"Unexpected shunt model type: \" + s.getModelType());\n             }\n             boolean controlEnabled = s.isVoltageRegulatorOn();\n-            writer.writeStartElement(cimNamespace, linearNonlinear + \"ShuntCompensator\");\n+            writer.writeStartElement(cimNamespace, shuntType + \"ShuntCompensator\");\n             writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + s.getId());\n             writer.writeStartElement(cimNamespace, \"ShuntCompensator.sections\");\n             writer.writeCharacters(CgmesExportUtil.format(s.getSectionCount()));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU1MjcxOA==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r529552718", "bodyText": "Add default case and throw an exception", "author": "MioRtia", "createdAt": "2020-11-24T13:41:21Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/export/SteadyStateHypothesisExport.java", "diffHunk": "@@ -0,0 +1,577 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.cgmes.conversion.export;\n+\n+import com.powsybl.cgmes.conversion.Conversion;\n+import com.powsybl.cgmes.model.CgmesNames;\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.exceptions.UncheckedXmlStreamException;\n+import com.powsybl.iidm.network.*;\n+import com.powsybl.iidm.network.extensions.ActivePowerControl;\n+import com.powsybl.iidm.network.extensions.LoadDetail;\n+import com.powsybl.iidm.network.extensions.SlackTerminal;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamWriter;\n+import java.util.*;\n+\n+import static com.powsybl.cgmes.model.CgmesNamespace.RDF_NAMESPACE;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ */\n+public final class SteadyStateHypothesisExport {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(SteadyStateHypothesisExport.class);\n+\n+    private static final String REGULATING_CONTROL_PROPERTY = Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"RegulatingControl\";\n+    private static final String GENERATING_UNIT_PROPERTY = Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"GeneratingUnit\";\n+\n+    private SteadyStateHypothesisExport() {\n+    }\n+\n+    public static void write(Network network, XMLStreamWriter writer, CgmesExportContext context) {\n+        final Map<String, List<RegulatingControlView>> regulatingControlViews = new HashMap<>();\n+        String cimNamespace = context.getCimNamespace();\n+\n+        try {\n+            CgmesExportUtil.writeRdfRoot(context.getCimVersion(), writer);\n+\n+            if (context.getCimVersion() == 16) {\n+                CgmesExportUtil.writeModelDescription(writer, context.getSshModelDescription(), context);\n+            }\n+\n+            writeEnergyConsumers(network, cimNamespace, writer);\n+            writeEquivalentInjections(network, cimNamespace, writer);\n+            writeTapChangers(network, cimNamespace, regulatingControlViews, writer);\n+            writeSynchronousMachines(network, cimNamespace, regulatingControlViews, writer);\n+            writeShuntCompensators(network, cimNamespace, regulatingControlViews, writer);\n+            writeStaticVarCompensators(network, cimNamespace, regulatingControlViews, writer);\n+            writeRegulatingControls(regulatingControlViews, cimNamespace, writer);\n+            writeGeneratingUnitsParticitationFactors(network, cimNamespace, writer);\n+            // TODO writeControlAreas\n+            writeTerminals(network, cimNamespace, writer);\n+\n+            writer.writeEndDocument();\n+        } catch (XMLStreamException e) {\n+            throw new UncheckedXmlStreamException(e);\n+        }\n+    }\n+\n+    private static void writeTerminals(Network network, String cimNamespace, XMLStreamWriter writer) {\n+        for (Connectable<?> c : network.getConnectables()) {\n+            for (Terminal t : c.getTerminals()) {\n+                writeTerminal(t, c, cimNamespace, writer);\n+            }\n+        }\n+        for (DanglingLine dl : network.getDanglingLines()) {\n+            // Terminal for equivalent injection at boundary is always connected\n+            dl.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"EquivalentInjectionTerminal\")\n+                    .ifPresent(tid -> writeTerminal(tid, true, cimNamespace, writer));\n+            // Terminal for boundary side of original line/switch is always connected\n+            dl.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"Terminal_Boundary\")\n+                    .ifPresent(tid -> writeTerminal(tid, true, cimNamespace, writer));\n+        }\n+    }\n+\n+    private static void writeEquivalentInjections(Network network, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n+        // One equivalent injection for every dangling line\n+        for (DanglingLine dl : network.getDanglingLines()) {\n+            writeEquivalentInjection(dl, cimNamespace, writer);\n+        }\n+    }\n+\n+    private static void writeTapChangers(Network network, String cimNamespace, Map<String, List<RegulatingControlView>> regulatingControlViews, XMLStreamWriter writer) throws XMLStreamException {\n+        for (TwoWindingsTransformer twt : network.getTwoWindingsTransformers()) {\n+            if (twt.hasPhaseTapChanger()) {\n+                String ptcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + 1)\n+                        .orElseGet(() -> twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + 2).orElseThrow(PowsyblException::new));\n+                writeTapChanger(twt, ptcId, twt.getPhaseTapChanger(), CgmesNames.PHASE_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n+            } else if (twt.hasRatioTapChanger()) {\n+                String rtcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + 1)\n+                        .orElseGet(() -> twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + 2).orElseThrow(PowsyblException::new));\n+                writeTapChanger(twt, rtcId, twt.getRatioTapChanger(), CgmesNames.RATIO_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n+            }\n+        }\n+\n+        for (ThreeWindingsTransformer twt : network.getThreeWindingsTransformers()) {\n+            int i = 1;\n+            for (ThreeWindingsTransformer.Leg leg : Arrays.asList(twt.getLeg1(), twt.getLeg2(), twt.getLeg3())) {\n+                if (leg.hasPhaseTapChanger()) {\n+                    String ptcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + i).orElseThrow(PowsyblException::new);\n+                    writeTapChanger(twt, ptcId, leg.getPhaseTapChanger(), CgmesNames.PHASE_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n+                } else if (leg.hasRatioTapChanger()) {\n+                    String rtcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + i).orElseThrow(PowsyblException::new);\n+                    writeTapChanger(twt, rtcId, leg.getRatioTapChanger(), CgmesNames.RATIO_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n+                }\n+                i++;\n+            }\n+        }\n+    }\n+\n+    private static void writeTapChanger(Identifiable<?> eq, String tcId, TapChanger<?, ?> tc, String defaultType, Map<String, List<RegulatingControlView>> regulatingControlViews, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n+        String type = eq.getProperty(cgmesTapChangerReferenceKey(tcId, \"type\"), defaultType);\n+        writeTapChanger(type, tcId, tc, cimNamespace, writer);\n+        addRegulatingControlView(tc, tcId, eq, regulatingControlViews);\n+        writeHiddenTapChanger(eq, tcId, defaultType, cimNamespace, writer);\n+    }\n+\n+    private static void writeShuntCompensators(Network network, String cimNamespace, Map<String, List<RegulatingControlView>> regulatingControlViews, XMLStreamWriter writer) throws XMLStreamException {\n+        for (ShuntCompensator s : network.getShuntCompensators()) {\n+            String linearNonlinear;\n+            switch (s.getModelType()) {\n+                case LINEAR:\n+                    linearNonlinear = \"Linear\";\n+                    break;\n+                case NON_LINEAR:\n+                    linearNonlinear = \"Nonlinear\";\n+                    break;\n+                default:\n+                    linearNonlinear = \"\";\n+                    break;\n+            }\n+            boolean controlEnabled = s.isVoltageRegulatorOn();\n+            writer.writeStartElement(cimNamespace, linearNonlinear + \"ShuntCompensator\");\n+            writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + s.getId());\n+            writer.writeStartElement(cimNamespace, \"ShuntCompensator.sections\");\n+            writer.writeCharacters(CgmesExportUtil.format(s.getSectionCount()));\n+            writer.writeEndElement();\n+            writer.writeStartElement(cimNamespace, \"RegulatingCondEq.controlEnabled\");\n+            writer.writeCharacters(Boolean.toString(controlEnabled));\n+            writer.writeEndElement();\n+            writer.writeEndElement();\n+            addRegulatingControlView(s, regulatingControlViews);\n+        }\n+    }\n+\n+    private static void addRegulatingControlView(ShuntCompensator s, Map<String, List<RegulatingControlView>> regulatingControlViews) {\n+        if (s.hasProperty(REGULATING_CONTROL_PROPERTY)) {\n+            // PowSyBl has considered the control as discrete, with a certain targetDeadband\n+            // The target value is stored in kV by PowSyBl, so unit multiplier is \"k\"\n+            String rcid = s.getProperty(REGULATING_CONTROL_PROPERTY);\n+            RegulatingControlView rcv = new RegulatingControlView(rcid, RegulatingControlType.REGULATING_CONTROL, true,\n+                s.isVoltageRegulatorOn(), s.getTargetDeadband(), s.getTargetV(), \"k\");\n+            regulatingControlViews.computeIfAbsent(rcid, k -> new ArrayList<>()).add(rcv);\n+        }\n+    }\n+\n+    private static void writeSynchronousMachines(Network network, String cimNamespace, Map<String, List<RegulatingControlView>> regulatingControlViews, XMLStreamWriter writer) throws XMLStreamException {\n+        for (Generator g : network.getGenerators()) {\n+            boolean controlEnabled = g.isVoltageRegulatorOn();\n+            writer.writeStartElement(cimNamespace, \"SynchronousMachine\");\n+            writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + g.getId());\n+            writer.writeStartElement(cimNamespace, \"RegulatingCondEq.controlEnabled\");\n+            writer.writeCharacters(Boolean.toString(controlEnabled));\n+            writer.writeEndElement();\n+            writer.writeStartElement(cimNamespace, \"RotatingMachine.p\");\n+            writer.writeCharacters(CgmesExportUtil.format(g.getTerminal().getP()));\n+            writer.writeEndElement();\n+            writer.writeStartElement(cimNamespace, \"RotatingMachine.q\");\n+            writer.writeCharacters(CgmesExportUtil.format(g.getTerminal().getQ()));\n+            writer.writeEndElement();\n+            writer.writeStartElement(cimNamespace, \"SynchronousMachine.referencePriority\");\n+            // reference priority is used for angle reference selection (slack)\n+            writer.writeCharacters(isInSlackBus(g) ? \"1\" : \"0\");\n+            writer.writeEndElement();\n+            writer.writeEmptyElement(cimNamespace, \"SynchronousMachine.operatingMode\");\n+            // All generators in PowSyBl are considered as generator, not motor\n+            writer.writeAttribute(RDF_NAMESPACE, CgmesNames.RESOURCE, cimNamespace + \"SynchronousMachineOperatingMode.generator\");\n+            writer.writeEndElement();\n+\n+            addRegulatingControlView(g, regulatingControlViews);\n+        }\n+    }\n+\n+    private static void addRegulatingControlView(Generator g, Map<String, List<RegulatingControlView>> regulatingControlViews) {\n+        if (g.hasProperty(REGULATING_CONTROL_PROPERTY)) {\n+            // PowSyBl has considered the control as continuous and with targetDeadband of size 0\n+            // The target value is stored in kV by PowSyBl, so unit multiplier is \"k\"\n+            String rcid = g.getProperty(REGULATING_CONTROL_PROPERTY);\n+            double targetDeadband = 0;\n+            RegulatingControlView rcv = new RegulatingControlView(rcid, RegulatingControlType.REGULATING_CONTROL, false,\n+                g.isVoltageRegulatorOn(), targetDeadband, g.getTargetV(), \"k\");\n+            regulatingControlViews.computeIfAbsent(rcid, k -> new ArrayList<>()).add(rcv);\n+        }\n+    }\n+\n+    private static void writeStaticVarCompensators(Network network, String cimNamespace, Map<String, List<RegulatingControlView>> regulatingControlViews, XMLStreamWriter writer) throws XMLStreamException {\n+        for (StaticVarCompensator svc : network.getStaticVarCompensators()) {\n+            StaticVarCompensator.RegulationMode regulationMode = svc.getRegulationMode();\n+            boolean controlEnabled = regulationMode != StaticVarCompensator.RegulationMode.OFF;\n+            writer.writeStartElement(cimNamespace, \"StaticVarCompensator\");\n+            writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + svc.getId());\n+            writer.writeStartElement(cimNamespace, \"RegulatingCondEq.controlEnabled\");\n+            writer.writeCharacters(Boolean.toString(controlEnabled));\n+            writer.writeEndElement();\n+            writer.writeStartElement(cimNamespace, \"StaticVarCompensator.q\");\n+            writer.writeCharacters(CgmesExportUtil.format(svc.getTerminal().getQ()));\n+            writer.writeEndElement();\n+            writer.writeEndElement();\n+\n+            if (svc.hasProperty(REGULATING_CONTROL_PROPERTY)) {\n+                String rcid = svc.getProperty(REGULATING_CONTROL_PROPERTY);\n+                double targetDeadband = 0;\n+                // Regulating control could be reactive power or voltage\n+                double targetValue;\n+                String multiplier;\n+                if (regulationMode == StaticVarCompensator.RegulationMode.VOLTAGE) {\n+                    targetValue = svc.getVoltageSetpoint();\n+                    multiplier = \"k\";\n+                } else if (regulationMode == StaticVarCompensator.RegulationMode.REACTIVE_POWER) {\n+                    targetValue = svc.getReactivePowerSetpoint();\n+                    multiplier = \"M\";\n+                } else {\n+                    targetValue = 0;\n+                    multiplier = \"k\";\n+                }\n+                RegulatingControlView rcv = new RegulatingControlView(rcid, RegulatingControlType.REGULATING_CONTROL, false,\n+                        controlEnabled, targetDeadband, targetValue, multiplier);\n+                regulatingControlViews.computeIfAbsent(rcid, k -> new ArrayList<>()).add(rcv);\n+            }\n+        }\n+    }\n+\n+    private static boolean isInSlackBus(Generator g) {\n+        VoltageLevel vl = g.getTerminal().getVoltageLevel();\n+        SlackTerminal slackTerminal = vl.getExtension(SlackTerminal.class);\n+        if (slackTerminal != null) {\n+            Bus slackBus = slackTerminal.getTerminal().getBusBreakerView().getBus();\n+            if (slackBus == g.getTerminal().getBusBreakerView().getBus()) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private static void writeTapChanger(String type, String id, TapChanger<?, ?> tc, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n+        writeTapChanger(type, id, tc.isRegulating(), tc.getTapPosition(), cimNamespace, writer);\n+    }\n+\n+    private static void writeTapChanger(String type, String id, boolean controlEnabled, int step, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n+        writer.writeStartElement(cimNamespace, type);\n+        writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + id);\n+        writer.writeStartElement(cimNamespace, \"TapChanger.controlEnabled\");\n+        writer.writeCharacters(Boolean.toString(controlEnabled));\n+        writer.writeEndElement();\n+        writer.writeStartElement(cimNamespace, \"TapChanger.step\");\n+        writer.writeCharacters(CgmesExportUtil.format(step));\n+        writer.writeEndElement();\n+        writer.writeEndElement();\n+    }\n+\n+    private static void addRegulatingControlView(TapChanger tc, String tcId, Identifiable<?> eq, Map<String, List<RegulatingControlView>> regulatingControlViews) {\n+        // Multiple tap changers can be stored at the same equipment\n+        // We use the tap changer id as part of the key for storing the tap changer control id\n+        String key = String.format(\"%s%s.TapChangerControl\", Conversion.CGMES_PREFIX_ALIAS_PROPERTIES, tcId);\n+        if (eq.hasProperty(key)) {\n+            String controlId = eq.getProperty(key);\n+            RegulatingControlView rcv = null;\n+            if (tc instanceof RatioTapChanger) {\n+                rcv = new RegulatingControlView(controlId,\n+                        RegulatingControlType.TAP_CHANGER_CONTROL,\n+                        true,\n+                        tc.isRegulating(),\n+                        tc.getTargetDeadband(),\n+                        ((RatioTapChanger) tc).getTargetV(),\n+                        // Unit multiplier is k for ratio tap changers (regulation value is a voltage in kV)\n+                        \"k\");\n+            } else if (tc instanceof PhaseTapChanger) {\n+                rcv = new RegulatingControlView(controlId,\n+                        RegulatingControlType.TAP_CHANGER_CONTROL,\n+                        true,\n+                        tc.isRegulating(),\n+                        tc.getTargetDeadband(),\n+                        ((PhaseTapChanger) tc).getRegulationValue(),\n+                        // Unit multiplier is M for phase tap changers (regulation value is an active power flow in MW)\n+                        \"M\");\n+            }\n+            if (rcv != null) {\n+                regulatingControlViews.computeIfAbsent(controlId, k -> new ArrayList<>()).add(rcv);\n+            }\n+        }\n+    }\n+\n+    private static String cgmesTapChangerReferenceKey(String tcId, String property) {\n+        return String.format(\"%s%s.%s\", Conversion.CGMES_PREFIX_ALIAS_PROPERTIES, tcId, property);\n+    }\n+\n+    private static void writeHiddenTapChanger(Identifiable<?> eq, String tcId, String defaultType, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n+        String key = cgmesTapChangerReferenceKey(tcId, \"hiddenTapChangerId\");\n+        if (!eq.hasProperty(key)) {\n+            return;\n+        }\n+        String hiddenTcId = eq.getProperty(key);\n+        int step = Integer.parseInt(eq.getProperty(cgmesTapChangerReferenceKey(hiddenTcId, \"step\")));\n+        String type = eq.getProperty(cgmesTapChangerReferenceKey(hiddenTcId, \"type\"), defaultType);\n+        writeTapChanger(type, hiddenTcId, false, step, cimNamespace, writer);\n+    }\n+\n+    private static void writeRegulatingControls(Map<String, List<RegulatingControlView>> regulatingControlViews, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n+        for (List<RegulatingControlView> views : regulatingControlViews.values()) {\n+            writeRegulatingControl(combineRegulatingControlViews(views), cimNamespace, writer);\n+        }\n+    }\n+\n+    private static RegulatingControlView combineRegulatingControlViews(List<RegulatingControlView> rcs) {\n+        RegulatingControlView combined = rcs.get(0);\n+        if (rcs.size() > 1) {\n+            LOG.warn(\"Multiple views ({}) for regulating control {} are combined\", rcs.size(), rcs.get(0).id);\n+        }\n+        for (int k = 1; k < rcs.size(); k++) {\n+            RegulatingControlView current = rcs.get(k);\n+            if (combined.targetDeadband == 0 && current.targetDeadband > 0) {\n+                combined.targetDeadband = current.targetDeadband;\n+            }\n+            if (!combined.discrete && current.discrete) {\n+                combined.discrete = true;\n+            }\n+            if (!combined.controlEnabled && current.controlEnabled) {\n+                combined.controlEnabled = true;\n+            }\n+        }\n+        return combined;\n+    }\n+\n+    private static void writeRegulatingControl(RegulatingControlView rc, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n+        writer.writeStartElement(cimNamespace, regulatingControlClassname(rc.type));\n+        writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + rc.id);\n+        writer.writeStartElement(cimNamespace, \"RegulatingControl.discrete\");\n+        writer.writeCharacters(Boolean.toString(rc.discrete));\n+        writer.writeEndElement();\n+        writer.writeStartElement(cimNamespace, \"RegulatingControl.enabled\");\n+        writer.writeCharacters(Boolean.toString(rc.controlEnabled));\n+        writer.writeEndElement();\n+        writer.writeStartElement(cimNamespace, \"RegulatingControl.targetDeadband\");\n+        writer.writeCharacters(CgmesExportUtil.format(rc.targetDeadband));\n+        writer.writeEndElement();\n+        writer.writeStartElement(cimNamespace, \"RegulatingControl.targetValue\");\n+        writer.writeCharacters(CgmesExportUtil.format(rc.targetValue));\n+        writer.writeEndElement();\n+        writer.writeEmptyElement(cimNamespace, \"RegulatingControl.targetValueUnitMultiplier\");\n+        writer.writeAttribute(RDF_NAMESPACE, \"resource\", cimNamespace + \"UnitMultiplier.\" + rc.targetValueUnitMultiplier);\n+        writer.writeEndElement();\n+    }\n+\n+    private static String regulatingControlClassname(RegulatingControlType type) {\n+        if (type == RegulatingControlType.TAP_CHANGER_CONTROL) {\n+            return \"TapChangerControl\";\n+        } else {\n+            return \"RegulatingControl\";\n+        }\n+    }\n+\n+    private static void writeTerminal(Terminal t, Connectable<?> c, String cimNamespace, XMLStreamWriter writer) {\n+        Optional<String> tid;\n+        if (c instanceof DanglingLine) {\n+            tid = c.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"Terminal_Network\");\n+        } else {\n+            int numt = 0;\n+            if (c.getTerminals().size() == 1) {\n+                numt = 1;\n+            } else {\n+                if (c instanceof Injection) {\n+                    // An injection should have only one terminal\n+                } else if (c instanceof Branch) {\n+                    switch (((Branch<?>) c).getSide(t)) {\n+                        case ONE:\n+                            numt = 1;\n+                            break;\n+                        case TWO:\n+                            numt = 2;\n+                            break;", "originalCommit": "b8b6a783de1222ce8136f1387a966fd633eb37a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY2NjIyMA==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r529666220", "bodyText": "done", "author": "zamarrenolm", "createdAt": "2020-11-24T15:50:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU1MjcxOA=="}], "type": "inlineReview", "revised_code": {"commit": "991cb69ac2bf2780c1ac4e0eb1775e350253ea3e", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/export/SteadyStateHypothesisExport.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/export/SteadyStateHypothesisExport.java\nindex 6c5a8aa14..d5b02d0cc 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/export/SteadyStateHypothesisExport.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/export/SteadyStateHypothesisExport.java\n\n@@ -125,20 +125,19 @@ public final class SteadyStateHypothesisExport {\n \n     private static void writeShuntCompensators(Network network, String cimNamespace, Map<String, List<RegulatingControlView>> regulatingControlViews, XMLStreamWriter writer) throws XMLStreamException {\n         for (ShuntCompensator s : network.getShuntCompensators()) {\n-            String linearNonlinear;\n+            String shuntType;\n             switch (s.getModelType()) {\n                 case LINEAR:\n-                    linearNonlinear = \"Linear\";\n+                    shuntType = \"Linear\";\n                     break;\n                 case NON_LINEAR:\n-                    linearNonlinear = \"Nonlinear\";\n+                    shuntType = \"Nonlinear\";\n                     break;\n                 default:\n-                    linearNonlinear = \"\";\n-                    break;\n+                    throw new AssertionError(\"Unexpected shunt model type: \" + s.getModelType());\n             }\n             boolean controlEnabled = s.isVoltageRegulatorOn();\n-            writer.writeStartElement(cimNamespace, linearNonlinear + \"ShuntCompensator\");\n+            writer.writeStartElement(cimNamespace, shuntType + \"ShuntCompensator\");\n             writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + s.getId());\n             writer.writeStartElement(cimNamespace, \"ShuntCompensator.sections\");\n             writer.writeCharacters(CgmesExportUtil.format(s.getSectionCount()));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU1MjgxOQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r529552819", "bodyText": "Same remark", "author": "MioRtia", "createdAt": "2020-11-24T13:41:29Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/export/SteadyStateHypothesisExport.java", "diffHunk": "@@ -0,0 +1,577 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.cgmes.conversion.export;\n+\n+import com.powsybl.cgmes.conversion.Conversion;\n+import com.powsybl.cgmes.model.CgmesNames;\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.exceptions.UncheckedXmlStreamException;\n+import com.powsybl.iidm.network.*;\n+import com.powsybl.iidm.network.extensions.ActivePowerControl;\n+import com.powsybl.iidm.network.extensions.LoadDetail;\n+import com.powsybl.iidm.network.extensions.SlackTerminal;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamWriter;\n+import java.util.*;\n+\n+import static com.powsybl.cgmes.model.CgmesNamespace.RDF_NAMESPACE;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ */\n+public final class SteadyStateHypothesisExport {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(SteadyStateHypothesisExport.class);\n+\n+    private static final String REGULATING_CONTROL_PROPERTY = Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"RegulatingControl\";\n+    private static final String GENERATING_UNIT_PROPERTY = Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"GeneratingUnit\";\n+\n+    private SteadyStateHypothesisExport() {\n+    }\n+\n+    public static void write(Network network, XMLStreamWriter writer, CgmesExportContext context) {\n+        final Map<String, List<RegulatingControlView>> regulatingControlViews = new HashMap<>();\n+        String cimNamespace = context.getCimNamespace();\n+\n+        try {\n+            CgmesExportUtil.writeRdfRoot(context.getCimVersion(), writer);\n+\n+            if (context.getCimVersion() == 16) {\n+                CgmesExportUtil.writeModelDescription(writer, context.getSshModelDescription(), context);\n+            }\n+\n+            writeEnergyConsumers(network, cimNamespace, writer);\n+            writeEquivalentInjections(network, cimNamespace, writer);\n+            writeTapChangers(network, cimNamespace, regulatingControlViews, writer);\n+            writeSynchronousMachines(network, cimNamespace, regulatingControlViews, writer);\n+            writeShuntCompensators(network, cimNamespace, regulatingControlViews, writer);\n+            writeStaticVarCompensators(network, cimNamespace, regulatingControlViews, writer);\n+            writeRegulatingControls(regulatingControlViews, cimNamespace, writer);\n+            writeGeneratingUnitsParticitationFactors(network, cimNamespace, writer);\n+            // TODO writeControlAreas\n+            writeTerminals(network, cimNamespace, writer);\n+\n+            writer.writeEndDocument();\n+        } catch (XMLStreamException e) {\n+            throw new UncheckedXmlStreamException(e);\n+        }\n+    }\n+\n+    private static void writeTerminals(Network network, String cimNamespace, XMLStreamWriter writer) {\n+        for (Connectable<?> c : network.getConnectables()) {\n+            for (Terminal t : c.getTerminals()) {\n+                writeTerminal(t, c, cimNamespace, writer);\n+            }\n+        }\n+        for (DanglingLine dl : network.getDanglingLines()) {\n+            // Terminal for equivalent injection at boundary is always connected\n+            dl.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"EquivalentInjectionTerminal\")\n+                    .ifPresent(tid -> writeTerminal(tid, true, cimNamespace, writer));\n+            // Terminal for boundary side of original line/switch is always connected\n+            dl.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"Terminal_Boundary\")\n+                    .ifPresent(tid -> writeTerminal(tid, true, cimNamespace, writer));\n+        }\n+    }\n+\n+    private static void writeEquivalentInjections(Network network, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n+        // One equivalent injection for every dangling line\n+        for (DanglingLine dl : network.getDanglingLines()) {\n+            writeEquivalentInjection(dl, cimNamespace, writer);\n+        }\n+    }\n+\n+    private static void writeTapChangers(Network network, String cimNamespace, Map<String, List<RegulatingControlView>> regulatingControlViews, XMLStreamWriter writer) throws XMLStreamException {\n+        for (TwoWindingsTransformer twt : network.getTwoWindingsTransformers()) {\n+            if (twt.hasPhaseTapChanger()) {\n+                String ptcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + 1)\n+                        .orElseGet(() -> twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + 2).orElseThrow(PowsyblException::new));\n+                writeTapChanger(twt, ptcId, twt.getPhaseTapChanger(), CgmesNames.PHASE_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n+            } else if (twt.hasRatioTapChanger()) {\n+                String rtcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + 1)\n+                        .orElseGet(() -> twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + 2).orElseThrow(PowsyblException::new));\n+                writeTapChanger(twt, rtcId, twt.getRatioTapChanger(), CgmesNames.RATIO_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n+            }\n+        }\n+\n+        for (ThreeWindingsTransformer twt : network.getThreeWindingsTransformers()) {\n+            int i = 1;\n+            for (ThreeWindingsTransformer.Leg leg : Arrays.asList(twt.getLeg1(), twt.getLeg2(), twt.getLeg3())) {\n+                if (leg.hasPhaseTapChanger()) {\n+                    String ptcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + i).orElseThrow(PowsyblException::new);\n+                    writeTapChanger(twt, ptcId, leg.getPhaseTapChanger(), CgmesNames.PHASE_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n+                } else if (leg.hasRatioTapChanger()) {\n+                    String rtcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + i).orElseThrow(PowsyblException::new);\n+                    writeTapChanger(twt, rtcId, leg.getRatioTapChanger(), CgmesNames.RATIO_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n+                }\n+                i++;\n+            }\n+        }\n+    }\n+\n+    private static void writeTapChanger(Identifiable<?> eq, String tcId, TapChanger<?, ?> tc, String defaultType, Map<String, List<RegulatingControlView>> regulatingControlViews, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n+        String type = eq.getProperty(cgmesTapChangerReferenceKey(tcId, \"type\"), defaultType);\n+        writeTapChanger(type, tcId, tc, cimNamespace, writer);\n+        addRegulatingControlView(tc, tcId, eq, regulatingControlViews);\n+        writeHiddenTapChanger(eq, tcId, defaultType, cimNamespace, writer);\n+    }\n+\n+    private static void writeShuntCompensators(Network network, String cimNamespace, Map<String, List<RegulatingControlView>> regulatingControlViews, XMLStreamWriter writer) throws XMLStreamException {\n+        for (ShuntCompensator s : network.getShuntCompensators()) {\n+            String linearNonlinear;\n+            switch (s.getModelType()) {\n+                case LINEAR:\n+                    linearNonlinear = \"Linear\";\n+                    break;\n+                case NON_LINEAR:\n+                    linearNonlinear = \"Nonlinear\";\n+                    break;\n+                default:\n+                    linearNonlinear = \"\";\n+                    break;\n+            }\n+            boolean controlEnabled = s.isVoltageRegulatorOn();\n+            writer.writeStartElement(cimNamespace, linearNonlinear + \"ShuntCompensator\");\n+            writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + s.getId());\n+            writer.writeStartElement(cimNamespace, \"ShuntCompensator.sections\");\n+            writer.writeCharacters(CgmesExportUtil.format(s.getSectionCount()));\n+            writer.writeEndElement();\n+            writer.writeStartElement(cimNamespace, \"RegulatingCondEq.controlEnabled\");\n+            writer.writeCharacters(Boolean.toString(controlEnabled));\n+            writer.writeEndElement();\n+            writer.writeEndElement();\n+            addRegulatingControlView(s, regulatingControlViews);\n+        }\n+    }\n+\n+    private static void addRegulatingControlView(ShuntCompensator s, Map<String, List<RegulatingControlView>> regulatingControlViews) {\n+        if (s.hasProperty(REGULATING_CONTROL_PROPERTY)) {\n+            // PowSyBl has considered the control as discrete, with a certain targetDeadband\n+            // The target value is stored in kV by PowSyBl, so unit multiplier is \"k\"\n+            String rcid = s.getProperty(REGULATING_CONTROL_PROPERTY);\n+            RegulatingControlView rcv = new RegulatingControlView(rcid, RegulatingControlType.REGULATING_CONTROL, true,\n+                s.isVoltageRegulatorOn(), s.getTargetDeadband(), s.getTargetV(), \"k\");\n+            regulatingControlViews.computeIfAbsent(rcid, k -> new ArrayList<>()).add(rcv);\n+        }\n+    }\n+\n+    private static void writeSynchronousMachines(Network network, String cimNamespace, Map<String, List<RegulatingControlView>> regulatingControlViews, XMLStreamWriter writer) throws XMLStreamException {\n+        for (Generator g : network.getGenerators()) {\n+            boolean controlEnabled = g.isVoltageRegulatorOn();\n+            writer.writeStartElement(cimNamespace, \"SynchronousMachine\");\n+            writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + g.getId());\n+            writer.writeStartElement(cimNamespace, \"RegulatingCondEq.controlEnabled\");\n+            writer.writeCharacters(Boolean.toString(controlEnabled));\n+            writer.writeEndElement();\n+            writer.writeStartElement(cimNamespace, \"RotatingMachine.p\");\n+            writer.writeCharacters(CgmesExportUtil.format(g.getTerminal().getP()));\n+            writer.writeEndElement();\n+            writer.writeStartElement(cimNamespace, \"RotatingMachine.q\");\n+            writer.writeCharacters(CgmesExportUtil.format(g.getTerminal().getQ()));\n+            writer.writeEndElement();\n+            writer.writeStartElement(cimNamespace, \"SynchronousMachine.referencePriority\");\n+            // reference priority is used for angle reference selection (slack)\n+            writer.writeCharacters(isInSlackBus(g) ? \"1\" : \"0\");\n+            writer.writeEndElement();\n+            writer.writeEmptyElement(cimNamespace, \"SynchronousMachine.operatingMode\");\n+            // All generators in PowSyBl are considered as generator, not motor\n+            writer.writeAttribute(RDF_NAMESPACE, CgmesNames.RESOURCE, cimNamespace + \"SynchronousMachineOperatingMode.generator\");\n+            writer.writeEndElement();\n+\n+            addRegulatingControlView(g, regulatingControlViews);\n+        }\n+    }\n+\n+    private static void addRegulatingControlView(Generator g, Map<String, List<RegulatingControlView>> regulatingControlViews) {\n+        if (g.hasProperty(REGULATING_CONTROL_PROPERTY)) {\n+            // PowSyBl has considered the control as continuous and with targetDeadband of size 0\n+            // The target value is stored in kV by PowSyBl, so unit multiplier is \"k\"\n+            String rcid = g.getProperty(REGULATING_CONTROL_PROPERTY);\n+            double targetDeadband = 0;\n+            RegulatingControlView rcv = new RegulatingControlView(rcid, RegulatingControlType.REGULATING_CONTROL, false,\n+                g.isVoltageRegulatorOn(), targetDeadband, g.getTargetV(), \"k\");\n+            regulatingControlViews.computeIfAbsent(rcid, k -> new ArrayList<>()).add(rcv);\n+        }\n+    }\n+\n+    private static void writeStaticVarCompensators(Network network, String cimNamespace, Map<String, List<RegulatingControlView>> regulatingControlViews, XMLStreamWriter writer) throws XMLStreamException {\n+        for (StaticVarCompensator svc : network.getStaticVarCompensators()) {\n+            StaticVarCompensator.RegulationMode regulationMode = svc.getRegulationMode();\n+            boolean controlEnabled = regulationMode != StaticVarCompensator.RegulationMode.OFF;\n+            writer.writeStartElement(cimNamespace, \"StaticVarCompensator\");\n+            writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + svc.getId());\n+            writer.writeStartElement(cimNamespace, \"RegulatingCondEq.controlEnabled\");\n+            writer.writeCharacters(Boolean.toString(controlEnabled));\n+            writer.writeEndElement();\n+            writer.writeStartElement(cimNamespace, \"StaticVarCompensator.q\");\n+            writer.writeCharacters(CgmesExportUtil.format(svc.getTerminal().getQ()));\n+            writer.writeEndElement();\n+            writer.writeEndElement();\n+\n+            if (svc.hasProperty(REGULATING_CONTROL_PROPERTY)) {\n+                String rcid = svc.getProperty(REGULATING_CONTROL_PROPERTY);\n+                double targetDeadband = 0;\n+                // Regulating control could be reactive power or voltage\n+                double targetValue;\n+                String multiplier;\n+                if (regulationMode == StaticVarCompensator.RegulationMode.VOLTAGE) {\n+                    targetValue = svc.getVoltageSetpoint();\n+                    multiplier = \"k\";\n+                } else if (regulationMode == StaticVarCompensator.RegulationMode.REACTIVE_POWER) {\n+                    targetValue = svc.getReactivePowerSetpoint();\n+                    multiplier = \"M\";\n+                } else {\n+                    targetValue = 0;\n+                    multiplier = \"k\";\n+                }\n+                RegulatingControlView rcv = new RegulatingControlView(rcid, RegulatingControlType.REGULATING_CONTROL, false,\n+                        controlEnabled, targetDeadband, targetValue, multiplier);\n+                regulatingControlViews.computeIfAbsent(rcid, k -> new ArrayList<>()).add(rcv);\n+            }\n+        }\n+    }\n+\n+    private static boolean isInSlackBus(Generator g) {\n+        VoltageLevel vl = g.getTerminal().getVoltageLevel();\n+        SlackTerminal slackTerminal = vl.getExtension(SlackTerminal.class);\n+        if (slackTerminal != null) {\n+            Bus slackBus = slackTerminal.getTerminal().getBusBreakerView().getBus();\n+            if (slackBus == g.getTerminal().getBusBreakerView().getBus()) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private static void writeTapChanger(String type, String id, TapChanger<?, ?> tc, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n+        writeTapChanger(type, id, tc.isRegulating(), tc.getTapPosition(), cimNamespace, writer);\n+    }\n+\n+    private static void writeTapChanger(String type, String id, boolean controlEnabled, int step, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n+        writer.writeStartElement(cimNamespace, type);\n+        writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + id);\n+        writer.writeStartElement(cimNamespace, \"TapChanger.controlEnabled\");\n+        writer.writeCharacters(Boolean.toString(controlEnabled));\n+        writer.writeEndElement();\n+        writer.writeStartElement(cimNamespace, \"TapChanger.step\");\n+        writer.writeCharacters(CgmesExportUtil.format(step));\n+        writer.writeEndElement();\n+        writer.writeEndElement();\n+    }\n+\n+    private static void addRegulatingControlView(TapChanger tc, String tcId, Identifiable<?> eq, Map<String, List<RegulatingControlView>> regulatingControlViews) {\n+        // Multiple tap changers can be stored at the same equipment\n+        // We use the tap changer id as part of the key for storing the tap changer control id\n+        String key = String.format(\"%s%s.TapChangerControl\", Conversion.CGMES_PREFIX_ALIAS_PROPERTIES, tcId);\n+        if (eq.hasProperty(key)) {\n+            String controlId = eq.getProperty(key);\n+            RegulatingControlView rcv = null;\n+            if (tc instanceof RatioTapChanger) {\n+                rcv = new RegulatingControlView(controlId,\n+                        RegulatingControlType.TAP_CHANGER_CONTROL,\n+                        true,\n+                        tc.isRegulating(),\n+                        tc.getTargetDeadband(),\n+                        ((RatioTapChanger) tc).getTargetV(),\n+                        // Unit multiplier is k for ratio tap changers (regulation value is a voltage in kV)\n+                        \"k\");\n+            } else if (tc instanceof PhaseTapChanger) {\n+                rcv = new RegulatingControlView(controlId,\n+                        RegulatingControlType.TAP_CHANGER_CONTROL,\n+                        true,\n+                        tc.isRegulating(),\n+                        tc.getTargetDeadband(),\n+                        ((PhaseTapChanger) tc).getRegulationValue(),\n+                        // Unit multiplier is M for phase tap changers (regulation value is an active power flow in MW)\n+                        \"M\");\n+            }\n+            if (rcv != null) {\n+                regulatingControlViews.computeIfAbsent(controlId, k -> new ArrayList<>()).add(rcv);\n+            }\n+        }\n+    }\n+\n+    private static String cgmesTapChangerReferenceKey(String tcId, String property) {\n+        return String.format(\"%s%s.%s\", Conversion.CGMES_PREFIX_ALIAS_PROPERTIES, tcId, property);\n+    }\n+\n+    private static void writeHiddenTapChanger(Identifiable<?> eq, String tcId, String defaultType, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n+        String key = cgmesTapChangerReferenceKey(tcId, \"hiddenTapChangerId\");\n+        if (!eq.hasProperty(key)) {\n+            return;\n+        }\n+        String hiddenTcId = eq.getProperty(key);\n+        int step = Integer.parseInt(eq.getProperty(cgmesTapChangerReferenceKey(hiddenTcId, \"step\")));\n+        String type = eq.getProperty(cgmesTapChangerReferenceKey(hiddenTcId, \"type\"), defaultType);\n+        writeTapChanger(type, hiddenTcId, false, step, cimNamespace, writer);\n+    }\n+\n+    private static void writeRegulatingControls(Map<String, List<RegulatingControlView>> regulatingControlViews, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n+        for (List<RegulatingControlView> views : regulatingControlViews.values()) {\n+            writeRegulatingControl(combineRegulatingControlViews(views), cimNamespace, writer);\n+        }\n+    }\n+\n+    private static RegulatingControlView combineRegulatingControlViews(List<RegulatingControlView> rcs) {\n+        RegulatingControlView combined = rcs.get(0);\n+        if (rcs.size() > 1) {\n+            LOG.warn(\"Multiple views ({}) for regulating control {} are combined\", rcs.size(), rcs.get(0).id);\n+        }\n+        for (int k = 1; k < rcs.size(); k++) {\n+            RegulatingControlView current = rcs.get(k);\n+            if (combined.targetDeadband == 0 && current.targetDeadband > 0) {\n+                combined.targetDeadband = current.targetDeadband;\n+            }\n+            if (!combined.discrete && current.discrete) {\n+                combined.discrete = true;\n+            }\n+            if (!combined.controlEnabled && current.controlEnabled) {\n+                combined.controlEnabled = true;\n+            }\n+        }\n+        return combined;\n+    }\n+\n+    private static void writeRegulatingControl(RegulatingControlView rc, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n+        writer.writeStartElement(cimNamespace, regulatingControlClassname(rc.type));\n+        writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + rc.id);\n+        writer.writeStartElement(cimNamespace, \"RegulatingControl.discrete\");\n+        writer.writeCharacters(Boolean.toString(rc.discrete));\n+        writer.writeEndElement();\n+        writer.writeStartElement(cimNamespace, \"RegulatingControl.enabled\");\n+        writer.writeCharacters(Boolean.toString(rc.controlEnabled));\n+        writer.writeEndElement();\n+        writer.writeStartElement(cimNamespace, \"RegulatingControl.targetDeadband\");\n+        writer.writeCharacters(CgmesExportUtil.format(rc.targetDeadband));\n+        writer.writeEndElement();\n+        writer.writeStartElement(cimNamespace, \"RegulatingControl.targetValue\");\n+        writer.writeCharacters(CgmesExportUtil.format(rc.targetValue));\n+        writer.writeEndElement();\n+        writer.writeEmptyElement(cimNamespace, \"RegulatingControl.targetValueUnitMultiplier\");\n+        writer.writeAttribute(RDF_NAMESPACE, \"resource\", cimNamespace + \"UnitMultiplier.\" + rc.targetValueUnitMultiplier);\n+        writer.writeEndElement();\n+    }\n+\n+    private static String regulatingControlClassname(RegulatingControlType type) {\n+        if (type == RegulatingControlType.TAP_CHANGER_CONTROL) {\n+            return \"TapChangerControl\";\n+        } else {\n+            return \"RegulatingControl\";\n+        }\n+    }\n+\n+    private static void writeTerminal(Terminal t, Connectable<?> c, String cimNamespace, XMLStreamWriter writer) {\n+        Optional<String> tid;\n+        if (c instanceof DanglingLine) {\n+            tid = c.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"Terminal_Network\");\n+        } else {\n+            int numt = 0;\n+            if (c.getTerminals().size() == 1) {\n+                numt = 1;\n+            } else {\n+                if (c instanceof Injection) {\n+                    // An injection should have only one terminal\n+                } else if (c instanceof Branch) {\n+                    switch (((Branch<?>) c).getSide(t)) {\n+                        case ONE:\n+                            numt = 1;\n+                            break;\n+                        case TWO:\n+                            numt = 2;\n+                            break;\n+                    }\n+                } else if (c instanceof ThreeWindingsTransformer) {\n+                    switch (((ThreeWindingsTransformer) c).getSide(t)) {\n+                        case ONE:\n+                            numt = 1;\n+                            break;\n+                        case TWO:\n+                            numt = 2;\n+                            break;\n+                        case THREE:\n+                            numt = 3;\n+                            break;", "originalCommit": "b8b6a783de1222ce8136f1387a966fd633eb37a2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY2NjM5Ng==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r529666396", "bodyText": "done", "author": "zamarrenolm", "createdAt": "2020-11-24T15:50:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU1MjgxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "991cb69ac2bf2780c1ac4e0eb1775e350253ea3e", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/export/SteadyStateHypothesisExport.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/export/SteadyStateHypothesisExport.java\nindex 6c5a8aa14..d5b02d0cc 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/export/SteadyStateHypothesisExport.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/export/SteadyStateHypothesisExport.java\n\n@@ -125,20 +125,19 @@ public final class SteadyStateHypothesisExport {\n \n     private static void writeShuntCompensators(Network network, String cimNamespace, Map<String, List<RegulatingControlView>> regulatingControlViews, XMLStreamWriter writer) throws XMLStreamException {\n         for (ShuntCompensator s : network.getShuntCompensators()) {\n-            String linearNonlinear;\n+            String shuntType;\n             switch (s.getModelType()) {\n                 case LINEAR:\n-                    linearNonlinear = \"Linear\";\n+                    shuntType = \"Linear\";\n                     break;\n                 case NON_LINEAR:\n-                    linearNonlinear = \"Nonlinear\";\n+                    shuntType = \"Nonlinear\";\n                     break;\n                 default:\n-                    linearNonlinear = \"\";\n-                    break;\n+                    throw new AssertionError(\"Unexpected shunt model type: \" + s.getModelType());\n             }\n             boolean controlEnabled = s.isVoltageRegulatorOn();\n-            writer.writeStartElement(cimNamespace, linearNonlinear + \"ShuntCompensator\");\n+            writer.writeStartElement(cimNamespace, shuntType + \"ShuntCompensator\");\n             writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + s.getId());\n             writer.writeStartElement(cimNamespace, \"ShuntCompensator.sections\");\n             writer.writeCharacters(CgmesExportUtil.format(s.getSectionCount()));\n"}}, {"oid": "991cb69ac2bf2780c1ac4e0eb1775e350253ea3e", "url": "https://github.com/powsybl/powsybl-core/commit/991cb69ac2bf2780c1ac4e0eb1775e350253ea3e", "message": "after reviewer feedback\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-11-24T15:56:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE2ODY4NQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r530168685", "bodyText": "I think it is not the case when this method is called but the defaultType should be tabular", "author": "MioRtia", "createdAt": "2020-11-25T07:55:12Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/export/SteadyStateHypothesisExport.java", "diffHunk": "@@ -0,0 +1,580 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.cgmes.conversion.export;\n+\n+import com.powsybl.cgmes.conversion.Conversion;\n+import com.powsybl.cgmes.model.CgmesNames;\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.exceptions.UncheckedXmlStreamException;\n+import com.powsybl.iidm.network.*;\n+import com.powsybl.iidm.network.extensions.ActivePowerControl;\n+import com.powsybl.iidm.network.extensions.LoadDetail;\n+import com.powsybl.iidm.network.extensions.SlackTerminal;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamWriter;\n+import java.util.*;\n+\n+import static com.powsybl.cgmes.model.CgmesNamespace.RDF_NAMESPACE;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ */\n+public final class SteadyStateHypothesisExport {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(SteadyStateHypothesisExport.class);\n+\n+    private static final String REGULATING_CONTROL_PROPERTY = Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"RegulatingControl\";\n+    private static final String GENERATING_UNIT_PROPERTY = Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"GeneratingUnit\";\n+\n+    private SteadyStateHypothesisExport() {\n+    }\n+\n+    public static void write(Network network, XMLStreamWriter writer, CgmesExportContext context) {\n+        final Map<String, List<RegulatingControlView>> regulatingControlViews = new HashMap<>();\n+        String cimNamespace = context.getCimNamespace();\n+\n+        try {\n+            CgmesExportUtil.writeRdfRoot(context.getCimVersion(), writer);\n+\n+            if (context.getCimVersion() == 16) {\n+                CgmesExportUtil.writeModelDescription(writer, context.getSshModelDescription(), context);\n+            }\n+\n+            writeEnergyConsumers(network, cimNamespace, writer);\n+            writeEquivalentInjections(network, cimNamespace, writer);\n+            writeTapChangers(network, cimNamespace, regulatingControlViews, writer);\n+            writeSynchronousMachines(network, cimNamespace, regulatingControlViews, writer);\n+            writeShuntCompensators(network, cimNamespace, regulatingControlViews, writer);\n+            writeStaticVarCompensators(network, cimNamespace, regulatingControlViews, writer);\n+            writeRegulatingControls(regulatingControlViews, cimNamespace, writer);\n+            writeGeneratingUnitsParticitationFactors(network, cimNamespace, writer);\n+            // TODO writeControlAreas\n+            writeTerminals(network, cimNamespace, writer);\n+\n+            writer.writeEndDocument();\n+        } catch (XMLStreamException e) {\n+            throw new UncheckedXmlStreamException(e);\n+        }\n+    }\n+\n+    private static void writeTerminals(Network network, String cimNamespace, XMLStreamWriter writer) {\n+        for (Connectable<?> c : network.getConnectables()) {\n+            for (Terminal t : c.getTerminals()) {\n+                writeTerminal(t, c, cimNamespace, writer);\n+            }\n+        }\n+        for (DanglingLine dl : network.getDanglingLines()) {\n+            // Terminal for equivalent injection at boundary is always connected\n+            dl.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"EquivalentInjectionTerminal\")\n+                    .ifPresent(tid -> writeTerminal(tid, true, cimNamespace, writer));\n+            // Terminal for boundary side of original line/switch is always connected\n+            dl.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"Terminal_Boundary\")\n+                    .ifPresent(tid -> writeTerminal(tid, true, cimNamespace, writer));\n+        }\n+    }\n+\n+    private static void writeEquivalentInjections(Network network, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n+        // One equivalent injection for every dangling line\n+        for (DanglingLine dl : network.getDanglingLines()) {\n+            writeEquivalentInjection(dl, cimNamespace, writer);\n+        }\n+    }\n+\n+    private static void writeTapChangers(Network network, String cimNamespace, Map<String, List<RegulatingControlView>> regulatingControlViews, XMLStreamWriter writer) throws XMLStreamException {\n+        for (TwoWindingsTransformer twt : network.getTwoWindingsTransformers()) {\n+            if (twt.hasPhaseTapChanger()) {\n+                String ptcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + 1)\n+                        .orElseGet(() -> twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + 2).orElseThrow(PowsyblException::new));\n+                writeTapChanger(twt, ptcId, twt.getPhaseTapChanger(), CgmesNames.PHASE_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n+            } else if (twt.hasRatioTapChanger()) {\n+                String rtcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + 1)\n+                        .orElseGet(() -> twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + 2).orElseThrow(PowsyblException::new));\n+                writeTapChanger(twt, rtcId, twt.getRatioTapChanger(), CgmesNames.RATIO_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n+            }\n+        }\n+\n+        for (ThreeWindingsTransformer twt : network.getThreeWindingsTransformers()) {\n+            int i = 1;\n+            for (ThreeWindingsTransformer.Leg leg : Arrays.asList(twt.getLeg1(), twt.getLeg2(), twt.getLeg3())) {\n+                if (leg.hasPhaseTapChanger()) {\n+                    String ptcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + i).orElseThrow(PowsyblException::new);\n+                    writeTapChanger(twt, ptcId, leg.getPhaseTapChanger(), CgmesNames.PHASE_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n+                } else if (leg.hasRatioTapChanger()) {\n+                    String rtcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + i).orElseThrow(PowsyblException::new);\n+                    writeTapChanger(twt, rtcId, leg.getRatioTapChanger(), CgmesNames.RATIO_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n+                }\n+                i++;\n+            }\n+        }\n+    }\n+\n+    private static void writeTapChanger(Identifiable<?> eq, String tcId, TapChanger<?, ?> tc, String defaultType, Map<String, List<RegulatingControlView>> regulatingControlViews, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {", "originalCommit": "991cb69ac2bf2780c1ac4e0eb1775e350253ea3e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIwNzc4MA==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r530207780", "bodyText": "You are right, I was using PhaseTapChanger as default type for phase tap changers, but that is an abstract class in CGMES and can not . The right default value por tap changers, if no type information is provided in properties, should be PhaseTapChangerTabular.", "author": "zamarrenolm", "createdAt": "2020-11-25T09:03:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE2ODY4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "dd0cdee3dfe3054eca2e6cb37b6a07486bea3334", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/export/SteadyStateHypothesisExport.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/export/SteadyStateHypothesisExport.java\nindex d5b02d0cc..da6488e98 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/export/SteadyStateHypothesisExport.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/export/SteadyStateHypothesisExport.java\n\n@@ -93,7 +93,7 @@ public final class SteadyStateHypothesisExport {\n             if (twt.hasPhaseTapChanger()) {\n                 String ptcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + 1)\n                         .orElseGet(() -> twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + 2).orElseThrow(PowsyblException::new));\n-                writeTapChanger(twt, ptcId, twt.getPhaseTapChanger(), CgmesNames.PHASE_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n+                writeTapChanger(twt, ptcId, twt.getPhaseTapChanger(), CgmesNames.PHASE_TAP_CHANGER_TABULAR, regulatingControlViews, cimNamespace, writer);\n             } else if (twt.hasRatioTapChanger()) {\n                 String rtcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + 1)\n                         .orElseGet(() -> twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + 2).orElseThrow(PowsyblException::new));\n"}}, {"oid": "0d42d56291029534d5c2d32a4524617d6ce21562", "url": "https://github.com/powsybl/powsybl-core/commit/0d42d56291029534d5c2d32a4524617d6ce21562", "message": "params can be null, ConversionParameters will read parameter from module config\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-11-25T08:31:56Z", "type": "commit"}, {"oid": "dd0cdee3dfe3054eca2e6cb37b6a07486bea3334", "url": "https://github.com/powsybl/powsybl-core/commit/dd0cdee3dfe3054eca2e6cb37b6a07486bea3334", "message": "default phase tap changer type is tabular\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-11-25T09:05:40Z", "type": "commit"}, {"oid": "9e9c570894ee6322cd2a13205a5b868c49bc101c", "url": "https://github.com/powsybl/powsybl-core/commit/9e9c570894ee6322cd2a13205a5b868c49bc101c", "message": "Merge branch 'master' into integration_cgmes_new_ssh_export", "committedDate": "2020-11-26T17:13:25Z", "type": "commit"}, {"oid": "051d3cdaf92b36c88d23367eeaba76ba7de48603", "url": "https://github.com/powsybl/powsybl-core/commit/051d3cdaf92b36c88d23367eeaba76ba7de48603", "message": "consider switches and its terminals\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-11-26T17:20:31Z", "type": "commit"}, {"oid": "61afdfad732dd14312a1597d7a146588444c064c", "url": "https://github.com/powsybl/powsybl-core/commit/61afdfad732dd14312a1597d7a146588444c064c", "message": "transformers may have a phase tap changer and a ratio tap changer\n\nSigned-off-by: Luma <zamarrenolm@aia.es>", "committedDate": "2020-11-27T11:58:03Z", "type": "commit"}, {"oid": "8a8d7e12477c86dc8384890485c7b629fa626ba7", "url": "https://github.com/powsybl/powsybl-core/commit/8a8d7e12477c86dc8384890485c7b629fa626ba7", "message": "Merge branch 'master' into integration_cgmes_new_ssh_export\n\nSigned-off-by: Luma <zamarrenolm@aia.es>\n\n# Conflicts:\n#\tcgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/AbstractConductingEquipmentConversion.java\n#\tcgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/AbstractTransformerConversion.java", "committedDate": "2020-11-27T12:19:47Z", "type": "commit"}, {"oid": "a0ff7fcf423a970a242221e29ddb86c427d80b22", "url": "https://github.com/powsybl/powsybl-core/commit/a0ff7fcf423a970a242221e29ddb86c427d80b22", "message": "Merge branch 'master' into integration_cgmes_new_ssh_export\n\nSigned-off-by: Luma <zamarrenolm@aia.es>\n\n# Conflicts:\n#\tcgmes/cgmes-conversion/src/test/java/com/powsybl/cgmes/conversion/test/update/StateVariablesExportTest.java\n#\tcgmes/cgmes-model/src/main/resources/CIM16.sparql", "committedDate": "2020-12-04T11:52:31Z", "type": "commit"}, {"oid": "b03be2d1e2d38912d1a01f686403a088c7d4ef07", "url": "https://github.com/powsybl/powsybl-core/commit/b03be2d1e2d38912d1a01f686403a088c7d4ef07", "message": "Merge branch 'master' into integration_cgmes_new_ssh_export", "committedDate": "2020-12-04T13:40:32Z", "type": "commit"}, {"oid": "38b2967f085ecdf9db35727b4be50c063a5fecb3", "url": "https://github.com/powsybl/powsybl-core/commit/38b2967f085ecdf9db35727b4be50c063a5fecb3", "message": "Merge branch 'master' into integration_cgmes_new_ssh_export", "committedDate": "2020-12-04T15:43:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE4ODA1Ng==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r536188056", "bodyText": "I think that to be coherent with the other parameters, it is better to choose use-only-network. Documentation has to be updated. I can make it if you want.", "author": "annetill", "createdAt": "2020-12-04T15:39:15Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CgmesExport.java", "diffHunk": "@@ -59,4 +107,22 @@ public String getComment() {\n     public String getFormat() {\n         return \"CGMES\";\n     }\n+\n+    public static final String USING_ONLY_NETWORK = \"iidm.export.cgmes.using-only-network\";", "originalCommit": "b03be2d1e2d38912d1a01f686403a088c7d4ef07", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "56c9f12cafecb0f1f50a28e4fb73512856320940", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CgmesExport.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CgmesExport.java\nindex 9c90cd2c0..30d0aab2a 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CgmesExport.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CgmesExport.java\n\n@@ -107,22 +59,4 @@ public class CgmesExport implements Exporter {\n     public String getFormat() {\n         return \"CGMES\";\n     }\n-\n-    public static final String USING_ONLY_NETWORK = \"iidm.export.cgmes.using-only-network\";\n-    public static final String BASE_NAME = \"iidm.export.cgmes.base-name\";\n-\n-    private static final Parameter USING_ONLY_NETWORK_PARAMETER = new Parameter(\n-            USING_ONLY_NETWORK,\n-            ParameterType.BOOLEAN,\n-            \"Export to CGMES using only information present in IIDM Network (including extensions and aliases)\",\n-            Boolean.FALSE);\n-    private static final Parameter BASE_NAME_PARAMETER = new Parameter(\n-            BASE_NAME,\n-            ParameterType.STRING,\n-            \"Basename for output files\",\n-            null);\n-\n-    private static final List<Parameter> STATIC_PARAMETERS = ImmutableList.of(\n-            USING_ONLY_NETWORK_PARAMETER,\n-            BASE_NAME_PARAMETER);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5NjY1NQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r536196655", "bodyText": "Indeed this could lead to strong differences during the import, as you did for generators and tap changers. It would be better to have this in a separate PR. If not, for sure I have to perform functional tests to evalaute the impact on the import.", "author": "annetill", "createdAt": "2020-12-04T15:51:26Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForShuntCompensators.java", "diffHunk": "@@ -85,16 +100,20 @@ private void setDefaultRegulatingControl(ShuntCompensator shuntCompensator) {\n                 .setVoltageRegulatorOn(true); // SSH controlEnabled attribute is true when this method is called\n     }\n \n-    private void setRegulatingControl(ShuntCompensator shuntCompensator, RegulatingControl rc) {\n+    private void setRegulatingControl(ShuntCompensator shuntCompensator, String rcId, RegulatingControl rc, boolean controlEnabled) {\n         shuntCompensator.setTargetV(rc.targetValue)\n                 .setTargetDeadband(rc.targetDeadband);\n         if (rc.targetValue > 0) {\n-            shuntCompensator.setVoltageRegulatorOn(rc.enabled);\n+            // For the IIDM regulating control to be enabled\n+            // both the equipment participation in the control and\n+            // the regulating control itself should be enabled\n+            shuntCompensator.setVoltageRegulatorOn(rc.enabled && controlEnabled);", "originalCommit": "38b2967f085ecdf9db35727b4be50c063a5fecb3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "56c9f12cafecb0f1f50a28e4fb73512856320940", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForShuntCompensators.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForShuntCompensators.java\nindex 2252a0471..a62245ba1 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForShuntCompensators.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForShuntCompensators.java\n\n@@ -100,20 +85,16 @@ public class RegulatingControlMappingForShuntCompensators {\n                 .setVoltageRegulatorOn(true); // SSH controlEnabled attribute is true when this method is called\n     }\n \n-    private void setRegulatingControl(ShuntCompensator shuntCompensator, String rcId, RegulatingControl rc, boolean controlEnabled) {\n+    private void setRegulatingControl(ShuntCompensator shuntCompensator, RegulatingControl rc) {\n         shuntCompensator.setTargetV(rc.targetValue)\n                 .setTargetDeadband(rc.targetDeadband);\n         if (rc.targetValue > 0) {\n-            // For the IIDM regulating control to be enabled\n-            // both the equipment participation in the control and\n-            // the regulating control itself should be enabled\n-            shuntCompensator.setVoltageRegulatorOn(rc.enabled && controlEnabled);\n+            shuntCompensator.setVoltageRegulatorOn(rc.enabled);\n         } else  {\n             shuntCompensator.setVoltageRegulatorOn(false);\n         }\n         // Take default terminal if it has not been defined in CGMES files (it is never null)\n         shuntCompensator.setRegulatingTerminal(parent.getRegulatingTerminal(shuntCompensator, rc.cgmesTerminal));\n-        shuntCompensator.setProperty(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"RegulatingControl\", rcId);\n     }\n \n     private static class CgmesRegulatingControlForShuntCompensator {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjE5NzQwNA==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r536197404", "bodyText": "I think that I have to test that to be sure that the normalPF is what we expect as droop.", "author": "annetill", "createdAt": "2020-12-04T15:52:24Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/SynchronousMachineConversion.java", "diffHunk": "@@ -60,6 +62,19 @@ public void convert() {\n         if (p.asInt(\"referencePriority\", 0) > 0) {\n             SlackTerminal.reset(g.getTerminal().getVoltageLevel(), g.getTerminal());\n         }\n+        if (p.containsKey(\"normalPF\")) {\n+            // Extension power control adder attribute \"droop\"\n+            // is documented as the participation factor when distributed slack is enabled\n+            // We map the normal participation factor from CGMES to droop\n+            g.newExtension(ActivePowerControlAdder.class)", "originalCommit": "38b2967f085ecdf9db35727b4be50c063a5fecb3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "56c9f12cafecb0f1f50a28e4fb73512856320940", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/SynchronousMachineConversion.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/SynchronousMachineConversion.java\nindex 125050044..6ae063360 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/SynchronousMachineConversion.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/SynchronousMachineConversion.java\n\n@@ -62,19 +60,6 @@ public class SynchronousMachineConversion extends AbstractReactiveLimitsOwnerCon\n         if (p.asInt(\"referencePriority\", 0) > 0) {\n             SlackTerminal.reset(g.getTerminal().getVoltageLevel(), g.getTerminal());\n         }\n-        if (p.containsKey(\"normalPF\")) {\n-            // Extension power control adder attribute \"droop\"\n-            // is documented as the participation factor when distributed slack is enabled\n-            // We map the normal participation factor from CGMES to droop\n-            g.newExtension(ActivePowerControlAdder.class)\n-                    .withParticipate(true)\n-                    .withDroop((float) p.asDouble(\"normalPF\"))\n-                    .add();\n-        }\n-        String generatingUnit = p.getId(\"GeneratingUnit\");\n-        if (generatingUnit != null) {\n-            g.setProperty(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"GeneratingUnit\", generatingUnit);\n-        }\n \n         context.regulatingControlMapping().forGenerators().add(g.getId(), p);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwNDA0OQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r536204049", "bodyText": "I am not sure to get how we should model an open switch. Do we have to modify only the status and keep the terminals connected?", "author": "annetill", "createdAt": "2020-12-04T16:01:51Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/export/SteadyStateHypothesisExport.java", "diffHunk": "@@ -0,0 +1,629 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.cgmes.conversion.export;\n+\n+import com.powsybl.cgmes.conversion.Conversion;\n+import com.powsybl.cgmes.model.CgmesNames;\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.exceptions.UncheckedXmlStreamException;\n+import com.powsybl.iidm.network.*;\n+import com.powsybl.iidm.network.extensions.ActivePowerControl;\n+import com.powsybl.iidm.network.extensions.LoadDetail;\n+import com.powsybl.iidm.network.extensions.SlackTerminal;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamWriter;\n+import java.util.*;\n+\n+import static com.powsybl.cgmes.model.CgmesNamespace.RDF_NAMESPACE;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ */\n+public final class SteadyStateHypothesisExport {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(SteadyStateHypothesisExport.class);\n+\n+    private static final String REGULATING_CONTROL_PROPERTY = Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"RegulatingControl\";\n+    private static final String GENERATING_UNIT_PROPERTY = Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"GeneratingUnit\";\n+\n+    private SteadyStateHypothesisExport() {\n+    }\n+\n+    public static void write(Network network, XMLStreamWriter writer, CgmesExportContext context) {\n+        final Map<String, List<RegulatingControlView>> regulatingControlViews = new HashMap<>();\n+        String cimNamespace = context.getCimNamespace();\n+\n+        try {\n+            CgmesExportUtil.writeRdfRoot(context.getCimVersion(), writer);\n+\n+            if (context.getCimVersion() == 16) {\n+                CgmesExportUtil.writeModelDescription(writer, context.getSshModelDescription(), context);\n+            }\n+\n+            writeEnergyConsumers(network, cimNamespace, writer);\n+            writeEquivalentInjections(network, cimNamespace, writer);\n+            writeTapChangers(network, cimNamespace, regulatingControlViews, writer);\n+            writeSynchronousMachines(network, cimNamespace, regulatingControlViews, writer);\n+            writeShuntCompensators(network, cimNamespace, regulatingControlViews, writer);\n+            writeStaticVarCompensators(network, cimNamespace, regulatingControlViews, writer);\n+            writeRegulatingControls(regulatingControlViews, cimNamespace, writer);\n+            writeGeneratingUnitsParticitationFactors(network, cimNamespace, writer);\n+            // FIXME open status of retained switches in bus-branch models\n+            writeSwitches(network, cimNamespace, writer);\n+            // TODO writeControlAreas\n+            writeTerminals(network, cimNamespace, writer);\n+\n+            writer.writeEndDocument();\n+        } catch (XMLStreamException e) {\n+            throw new UncheckedXmlStreamException(e);\n+        }\n+    }\n+\n+    private static void writeSwitches(Network network, String cimNamespace, XMLStreamWriter writer) {\n+        for (Switch sw : network.getSwitches()) {\n+            writeSwitch(sw, cimNamespace, writer);\n+        }\n+    }\n+\n+    private static final String ALIAS_TYPE_TERMINAL_1 = Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.TERMINAL + \"1\";\n+    private static final String ALIAS_TYPE_TERMINAL_2 = Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.TERMINAL + \"2\";\n+\n+    private static void writeTerminals(Network network, String cimNamespace, XMLStreamWriter writer) {\n+        for (Connectable<?> c : network.getConnectables()) {\n+            for (Terminal t : c.getTerminals()) {\n+                writeTerminal(t, c, cimNamespace, writer);\n+            }\n+        }\n+        for (Switch sw : network.getSwitches()) {\n+            // Terminals for switches are exported as always connected\n+            // The status of the switch is \"open\" if any of the original terminals were not connected\n+            // An original \"closed\" switch with any terminal disconnected\n+            // will be exported as \"open\" with terminals connected\n+            sw.getAliasFromType(ALIAS_TYPE_TERMINAL_1)", "originalCommit": "38b2967f085ecdf9db35727b4be50c063a5fecb3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "56c9f12cafecb0f1f50a28e4fb73512856320940", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/export/SteadyStateHypothesisExport.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/export/SteadyStateHypothesisExport.java\ndeleted file mode 100644\nindex 64a90f2e0..000000000\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/export/SteadyStateHypothesisExport.java\n+++ /dev/null\n\n@@ -1,629 +0,0 @@\n-/**\n- * Copyright (c) 2020, RTE (http://www.rte-france.com)\n- * This Source Code Form is subject to the terms of the Mozilla Public\n- * License, v. 2.0. If a copy of the MPL was not distributed with this\n- * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n- */\n-package com.powsybl.cgmes.conversion.export;\n-\n-import com.powsybl.cgmes.conversion.Conversion;\n-import com.powsybl.cgmes.model.CgmesNames;\n-import com.powsybl.commons.PowsyblException;\n-import com.powsybl.commons.exceptions.UncheckedXmlStreamException;\n-import com.powsybl.iidm.network.*;\n-import com.powsybl.iidm.network.extensions.ActivePowerControl;\n-import com.powsybl.iidm.network.extensions.LoadDetail;\n-import com.powsybl.iidm.network.extensions.SlackTerminal;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import javax.xml.stream.XMLStreamException;\n-import javax.xml.stream.XMLStreamWriter;\n-import java.util.*;\n-\n-import static com.powsybl.cgmes.model.CgmesNamespace.RDF_NAMESPACE;\n-\n-/**\n- * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n- * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n- */\n-public final class SteadyStateHypothesisExport {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(SteadyStateHypothesisExport.class);\n-\n-    private static final String REGULATING_CONTROL_PROPERTY = Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"RegulatingControl\";\n-    private static final String GENERATING_UNIT_PROPERTY = Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"GeneratingUnit\";\n-\n-    private SteadyStateHypothesisExport() {\n-    }\n-\n-    public static void write(Network network, XMLStreamWriter writer, CgmesExportContext context) {\n-        final Map<String, List<RegulatingControlView>> regulatingControlViews = new HashMap<>();\n-        String cimNamespace = context.getCimNamespace();\n-\n-        try {\n-            CgmesExportUtil.writeRdfRoot(context.getCimVersion(), writer);\n-\n-            if (context.getCimVersion() == 16) {\n-                CgmesExportUtil.writeModelDescription(writer, context.getSshModelDescription(), context);\n-            }\n-\n-            writeEnergyConsumers(network, cimNamespace, writer);\n-            writeEquivalentInjections(network, cimNamespace, writer);\n-            writeTapChangers(network, cimNamespace, regulatingControlViews, writer);\n-            writeSynchronousMachines(network, cimNamespace, regulatingControlViews, writer);\n-            writeShuntCompensators(network, cimNamespace, regulatingControlViews, writer);\n-            writeStaticVarCompensators(network, cimNamespace, regulatingControlViews, writer);\n-            writeRegulatingControls(regulatingControlViews, cimNamespace, writer);\n-            writeGeneratingUnitsParticitationFactors(network, cimNamespace, writer);\n-            // FIXME open status of retained switches in bus-branch models\n-            writeSwitches(network, cimNamespace, writer);\n-            // TODO writeControlAreas\n-            writeTerminals(network, cimNamespace, writer);\n-\n-            writer.writeEndDocument();\n-        } catch (XMLStreamException e) {\n-            throw new UncheckedXmlStreamException(e);\n-        }\n-    }\n-\n-    private static void writeSwitches(Network network, String cimNamespace, XMLStreamWriter writer) {\n-        for (Switch sw : network.getSwitches()) {\n-            writeSwitch(sw, cimNamespace, writer);\n-        }\n-    }\n-\n-    private static final String ALIAS_TYPE_TERMINAL_1 = Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.TERMINAL + \"1\";\n-    private static final String ALIAS_TYPE_TERMINAL_2 = Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.TERMINAL + \"2\";\n-\n-    private static void writeTerminals(Network network, String cimNamespace, XMLStreamWriter writer) {\n-        for (Connectable<?> c : network.getConnectables()) {\n-            for (Terminal t : c.getTerminals()) {\n-                writeTerminal(t, c, cimNamespace, writer);\n-            }\n-        }\n-        for (Switch sw : network.getSwitches()) {\n-            // Terminals for switches are exported as always connected\n-            // The status of the switch is \"open\" if any of the original terminals were not connected\n-            // An original \"closed\" switch with any terminal disconnected\n-            // will be exported as \"open\" with terminals connected\n-            sw.getAliasFromType(ALIAS_TYPE_TERMINAL_1)\n-                .ifPresent(tid1 -> writeTerminal(tid1, true, cimNamespace, writer));\n-            sw.getAliasFromType(ALIAS_TYPE_TERMINAL_2)\n-                .ifPresent(tid2 -> writeTerminal(tid2, true, cimNamespace, writer));\n-        }\n-        for (DanglingLine dl : network.getDanglingLines()) {\n-            // Terminal for equivalent injection at boundary is always connected\n-            dl.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"EquivalentInjectionTerminal\")\n-                    .ifPresent(tid -> writeTerminal(tid, true, cimNamespace, writer));\n-            // Terminal for boundary side of original line/switch is always connected\n-            dl.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"Terminal_Boundary\")\n-                    .ifPresent(tid -> writeTerminal(tid, true, cimNamespace, writer));\n-        }\n-    }\n-\n-    private static void writeEquivalentInjections(Network network, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n-        // One equivalent injection for every dangling line\n-        for (DanglingLine dl : network.getDanglingLines()) {\n-            writeEquivalentInjection(dl, cimNamespace, writer);\n-        }\n-    }\n-\n-    private static void writeTapChangers(Network network, String cimNamespace, Map<String, List<RegulatingControlView>> regulatingControlViews, XMLStreamWriter writer) throws XMLStreamException {\n-        for (TwoWindingsTransformer twt : network.getTwoWindingsTransformers()) {\n-            if (twt.hasPhaseTapChanger()) {\n-                String ptcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + 1)\n-                        .orElseGet(() -> twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + 2).orElseThrow(PowsyblException::new));\n-                writeTapChanger(twt, ptcId, twt.getPhaseTapChanger(), CgmesNames.PHASE_TAP_CHANGER_TABULAR, regulatingControlViews, cimNamespace, writer);\n-            }\n-            if (twt.hasRatioTapChanger()) {\n-                String rtcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + 1)\n-                        .orElseGet(() -> twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + 2).orElseThrow(PowsyblException::new));\n-                writeTapChanger(twt, rtcId, twt.getRatioTapChanger(), CgmesNames.RATIO_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n-            }\n-        }\n-\n-        for (ThreeWindingsTransformer twt : network.getThreeWindingsTransformers()) {\n-            int i = 1;\n-            for (ThreeWindingsTransformer.Leg leg : Arrays.asList(twt.getLeg1(), twt.getLeg2(), twt.getLeg3())) {\n-                if (leg.hasPhaseTapChanger()) {\n-                    String ptcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + i).orElseThrow(PowsyblException::new);\n-                    writeTapChanger(twt, ptcId, leg.getPhaseTapChanger(), CgmesNames.PHASE_TAP_CHANGER_TABULAR, regulatingControlViews, cimNamespace, writer);\n-                }\n-                if (leg.hasRatioTapChanger()) {\n-                    String rtcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + i).orElseThrow(PowsyblException::new);\n-                    writeTapChanger(twt, rtcId, leg.getRatioTapChanger(), CgmesNames.RATIO_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n-                }\n-                i++;\n-            }\n-        }\n-    }\n-\n-    private static void writeTapChanger(Identifiable<?> eq, String tcId, TapChanger<?, ?> tc, String defaultType, Map<String, List<RegulatingControlView>> regulatingControlViews, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n-        String type = eq.getProperty(cgmesTapChangerReferenceKey(tcId, \"type\"), defaultType);\n-        writeTapChanger(type, tcId, tc, cimNamespace, writer);\n-        addRegulatingControlView(tc, tcId, eq, regulatingControlViews);\n-        writeHiddenTapChanger(eq, tcId, defaultType, cimNamespace, writer);\n-    }\n-\n-    private static void writeShuntCompensators(Network network, String cimNamespace, Map<String, List<RegulatingControlView>> regulatingControlViews, XMLStreamWriter writer) throws XMLStreamException {\n-        for (ShuntCompensator s : network.getShuntCompensators()) {\n-            String shuntType;\n-            switch (s.getModelType()) {\n-                case LINEAR:\n-                    shuntType = \"Linear\";\n-                    break;\n-                case NON_LINEAR:\n-                    shuntType = \"Nonlinear\";\n-                    break;\n-                default:\n-                    throw new AssertionError(\"Unexpected shunt model type: \" + s.getModelType());\n-            }\n-            boolean controlEnabled = s.isVoltageRegulatorOn();\n-            writer.writeStartElement(cimNamespace, shuntType + \"ShuntCompensator\");\n-            writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + s.getId());\n-            writer.writeStartElement(cimNamespace, \"ShuntCompensator.sections\");\n-            writer.writeCharacters(CgmesExportUtil.format(s.getSectionCount()));\n-            writer.writeEndElement();\n-            writer.writeStartElement(cimNamespace, \"RegulatingCondEq.controlEnabled\");\n-            writer.writeCharacters(Boolean.toString(controlEnabled));\n-            writer.writeEndElement();\n-            writer.writeEndElement();\n-            addRegulatingControlView(s, regulatingControlViews);\n-        }\n-    }\n-\n-    private static void addRegulatingControlView(ShuntCompensator s, Map<String, List<RegulatingControlView>> regulatingControlViews) {\n-        if (s.hasProperty(REGULATING_CONTROL_PROPERTY)) {\n-            // PowSyBl has considered the control as discrete, with a certain targetDeadband\n-            // The target value is stored in kV by PowSyBl, so unit multiplier is \"k\"\n-            String rcid = s.getProperty(REGULATING_CONTROL_PROPERTY);\n-            RegulatingControlView rcv = new RegulatingControlView(rcid, RegulatingControlType.REGULATING_CONTROL, true,\n-                s.isVoltageRegulatorOn(), s.getTargetDeadband(), s.getTargetV(), \"k\");\n-            regulatingControlViews.computeIfAbsent(rcid, k -> new ArrayList<>()).add(rcv);\n-        }\n-    }\n-\n-    private static void writeSynchronousMachines(Network network, String cimNamespace, Map<String, List<RegulatingControlView>> regulatingControlViews, XMLStreamWriter writer) throws XMLStreamException {\n-        for (Generator g : network.getGenerators()) {\n-            boolean controlEnabled = g.isVoltageRegulatorOn();\n-            writer.writeStartElement(cimNamespace, \"SynchronousMachine\");\n-            writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + g.getId());\n-            writer.writeStartElement(cimNamespace, \"RegulatingCondEq.controlEnabled\");\n-            writer.writeCharacters(Boolean.toString(controlEnabled));\n-            writer.writeEndElement();\n-            writer.writeStartElement(cimNamespace, \"RotatingMachine.p\");\n-            writer.writeCharacters(CgmesExportUtil.format(g.getTerminal().getP()));\n-            writer.writeEndElement();\n-            writer.writeStartElement(cimNamespace, \"RotatingMachine.q\");\n-            writer.writeCharacters(CgmesExportUtil.format(g.getTerminal().getQ()));\n-            writer.writeEndElement();\n-            writer.writeStartElement(cimNamespace, \"SynchronousMachine.referencePriority\");\n-            // reference priority is used for angle reference selection (slack)\n-            writer.writeCharacters(isInSlackBus(g) ? \"1\" : \"0\");\n-            writer.writeEndElement();\n-            writer.writeEmptyElement(cimNamespace, \"SynchronousMachine.operatingMode\");\n-            // All generators in PowSyBl are considered as generator, not motor\n-            writer.writeAttribute(RDF_NAMESPACE, CgmesNames.RESOURCE, cimNamespace + \"SynchronousMachineOperatingMode.generator\");\n-            writer.writeEndElement();\n-\n-            addRegulatingControlView(g, regulatingControlViews);\n-        }\n-    }\n-\n-    private static void addRegulatingControlView(Generator g, Map<String, List<RegulatingControlView>> regulatingControlViews) {\n-        if (g.hasProperty(REGULATING_CONTROL_PROPERTY)) {\n-            // PowSyBl has considered the control as continuous and with targetDeadband of size 0\n-            // The target value is stored in kV by PowSyBl, so unit multiplier is \"k\"\n-            String rcid = g.getProperty(REGULATING_CONTROL_PROPERTY);\n-            double targetDeadband = 0;\n-            RegulatingControlView rcv = new RegulatingControlView(rcid, RegulatingControlType.REGULATING_CONTROL, false,\n-                g.isVoltageRegulatorOn(), targetDeadband, g.getTargetV(), \"k\");\n-            regulatingControlViews.computeIfAbsent(rcid, k -> new ArrayList<>()).add(rcv);\n-        }\n-    }\n-\n-    private static void writeStaticVarCompensators(Network network, String cimNamespace, Map<String, List<RegulatingControlView>> regulatingControlViews, XMLStreamWriter writer) throws XMLStreamException {\n-        for (StaticVarCompensator svc : network.getStaticVarCompensators()) {\n-            StaticVarCompensator.RegulationMode regulationMode = svc.getRegulationMode();\n-            boolean controlEnabled = regulationMode != StaticVarCompensator.RegulationMode.OFF;\n-            writer.writeStartElement(cimNamespace, \"StaticVarCompensator\");\n-            writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + svc.getId());\n-            writer.writeStartElement(cimNamespace, \"RegulatingCondEq.controlEnabled\");\n-            writer.writeCharacters(Boolean.toString(controlEnabled));\n-            writer.writeEndElement();\n-            writer.writeStartElement(cimNamespace, \"StaticVarCompensator.q\");\n-            writer.writeCharacters(CgmesExportUtil.format(svc.getTerminal().getQ()));\n-            writer.writeEndElement();\n-            writer.writeEndElement();\n-\n-            if (svc.hasProperty(REGULATING_CONTROL_PROPERTY)) {\n-                String rcid = svc.getProperty(REGULATING_CONTROL_PROPERTY);\n-                double targetDeadband = 0;\n-                // Regulating control could be reactive power or voltage\n-                double targetValue;\n-                String multiplier;\n-                if (regulationMode == StaticVarCompensator.RegulationMode.VOLTAGE) {\n-                    targetValue = svc.getVoltageSetpoint();\n-                    multiplier = \"k\";\n-                } else if (regulationMode == StaticVarCompensator.RegulationMode.REACTIVE_POWER) {\n-                    targetValue = svc.getReactivePowerSetpoint();\n-                    multiplier = \"M\";\n-                } else {\n-                    targetValue = 0;\n-                    multiplier = \"k\";\n-                }\n-                RegulatingControlView rcv = new RegulatingControlView(rcid, RegulatingControlType.REGULATING_CONTROL, false,\n-                        controlEnabled, targetDeadband, targetValue, multiplier);\n-                regulatingControlViews.computeIfAbsent(rcid, k -> new ArrayList<>()).add(rcv);\n-            }\n-        }\n-    }\n-\n-    private static boolean isInSlackBus(Generator g) {\n-        VoltageLevel vl = g.getTerminal().getVoltageLevel();\n-        SlackTerminal slackTerminal = vl.getExtension(SlackTerminal.class);\n-        if (slackTerminal != null) {\n-            Bus slackBus = slackTerminal.getTerminal().getBusBreakerView().getBus();\n-            if (slackBus == g.getTerminal().getBusBreakerView().getBus()) {\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n-\n-    private static void writeTapChanger(String type, String id, TapChanger<?, ?> tc, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n-        writeTapChanger(type, id, tc.isRegulating(), tc.getTapPosition(), cimNamespace, writer);\n-    }\n-\n-    private static void writeTapChanger(String type, String id, boolean controlEnabled, int step, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n-        writer.writeStartElement(cimNamespace, type);\n-        writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + id);\n-        writer.writeStartElement(cimNamespace, \"TapChanger.controlEnabled\");\n-        writer.writeCharacters(Boolean.toString(controlEnabled));\n-        writer.writeEndElement();\n-        writer.writeStartElement(cimNamespace, \"TapChanger.step\");\n-        writer.writeCharacters(CgmesExportUtil.format(step));\n-        writer.writeEndElement();\n-        writer.writeEndElement();\n-    }\n-\n-    private static void addRegulatingControlView(TapChanger tc, String tcId, Identifiable<?> eq, Map<String, List<RegulatingControlView>> regulatingControlViews) {\n-        // Multiple tap changers can be stored at the same equipment\n-        // We use the tap changer id as part of the key for storing the tap changer control id\n-        String key = String.format(\"%s%s.TapChangerControl\", Conversion.CGMES_PREFIX_ALIAS_PROPERTIES, tcId);\n-        if (eq.hasProperty(key)) {\n-            String controlId = eq.getProperty(key);\n-            RegulatingControlView rcv = null;\n-            if (tc instanceof RatioTapChanger) {\n-                rcv = new RegulatingControlView(controlId,\n-                        RegulatingControlType.TAP_CHANGER_CONTROL,\n-                        true,\n-                        tc.isRegulating(),\n-                        tc.getTargetDeadband(),\n-                        ((RatioTapChanger) tc).getTargetV(),\n-                        // Unit multiplier is k for ratio tap changers (regulation value is a voltage in kV)\n-                        \"k\");\n-            } else if (tc instanceof PhaseTapChanger) {\n-                rcv = new RegulatingControlView(controlId,\n-                        RegulatingControlType.TAP_CHANGER_CONTROL,\n-                        true,\n-                        tc.isRegulating(),\n-                        tc.getTargetDeadband(),\n-                        ((PhaseTapChanger) tc).getRegulationValue(),\n-                        // Unit multiplier is M for phase tap changers (regulation value is an active power flow in MW)\n-                        \"M\");\n-            }\n-            if (rcv != null) {\n-                regulatingControlViews.computeIfAbsent(controlId, k -> new ArrayList<>()).add(rcv);\n-            }\n-        }\n-    }\n-\n-    private static String cgmesTapChangerReferenceKey(String tcId, String property) {\n-        return String.format(\"%s%s.%s\", Conversion.CGMES_PREFIX_ALIAS_PROPERTIES, tcId, property);\n-    }\n-\n-    private static void writeHiddenTapChanger(Identifiable<?> eq, String tcId, String defaultType, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n-        String key = cgmesTapChangerReferenceKey(tcId, \"hiddenTapChangerId\");\n-        if (!eq.hasProperty(key)) {\n-            return;\n-        }\n-        String hiddenTcId = eq.getProperty(key);\n-        int step = Integer.parseInt(eq.getProperty(cgmesTapChangerReferenceKey(hiddenTcId, \"step\")));\n-        String type = eq.getProperty(cgmesTapChangerReferenceKey(hiddenTcId, \"type\"), defaultType);\n-        writeTapChanger(type, hiddenTcId, false, step, cimNamespace, writer);\n-    }\n-\n-    private static void writeRegulatingControls(Map<String, List<RegulatingControlView>> regulatingControlViews, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n-        for (List<RegulatingControlView> views : regulatingControlViews.values()) {\n-            writeRegulatingControl(combineRegulatingControlViews(views), cimNamespace, writer);\n-        }\n-    }\n-\n-    private static RegulatingControlView combineRegulatingControlViews(List<RegulatingControlView> rcs) {\n-        RegulatingControlView combined = rcs.get(0);\n-        if (rcs.size() > 1) {\n-            LOG.warn(\"Multiple views ({}) for regulating control {} are combined\", rcs.size(), rcs.get(0).id);\n-        }\n-        for (int k = 1; k < rcs.size(); k++) {\n-            RegulatingControlView current = rcs.get(k);\n-            if (combined.targetDeadband == 0 && current.targetDeadband > 0) {\n-                combined.targetDeadband = current.targetDeadband;\n-            }\n-            if (!combined.discrete && current.discrete) {\n-                combined.discrete = true;\n-            }\n-            if (!combined.controlEnabled && current.controlEnabled) {\n-                combined.controlEnabled = true;\n-            }\n-        }\n-        return combined;\n-    }\n-\n-    private static void writeRegulatingControl(RegulatingControlView rc, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n-        writer.writeStartElement(cimNamespace, regulatingControlClassname(rc.type));\n-        writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + rc.id);\n-        writer.writeStartElement(cimNamespace, \"RegulatingControl.discrete\");\n-        writer.writeCharacters(Boolean.toString(rc.discrete));\n-        writer.writeEndElement();\n-        writer.writeStartElement(cimNamespace, \"RegulatingControl.enabled\");\n-        writer.writeCharacters(Boolean.toString(rc.controlEnabled));\n-        writer.writeEndElement();\n-        writer.writeStartElement(cimNamespace, \"RegulatingControl.targetDeadband\");\n-        writer.writeCharacters(CgmesExportUtil.format(rc.targetDeadband));\n-        writer.writeEndElement();\n-        writer.writeStartElement(cimNamespace, \"RegulatingControl.targetValue\");\n-        writer.writeCharacters(CgmesExportUtil.format(rc.targetValue));\n-        writer.writeEndElement();\n-        writer.writeEmptyElement(cimNamespace, \"RegulatingControl.targetValueUnitMultiplier\");\n-        writer.writeAttribute(RDF_NAMESPACE, \"resource\", cimNamespace + \"UnitMultiplier.\" + rc.targetValueUnitMultiplier);\n-        writer.writeEndElement();\n-    }\n-\n-    private static String regulatingControlClassname(RegulatingControlType type) {\n-        if (type == RegulatingControlType.TAP_CHANGER_CONTROL) {\n-            return \"TapChangerControl\";\n-        } else {\n-            return \"RegulatingControl\";\n-        }\n-    }\n-\n-    private static void writeSwitch(Switch sw, String cimNamespace, XMLStreamWriter writer) {\n-        try {\n-            writer.writeStartElement(cimNamespace, switchClassname(sw.getKind()));\n-            writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + sw.getId());\n-            writer.writeStartElement(cimNamespace, \"Switch.open\");\n-            writer.writeCharacters(Boolean.toString(sw.isOpen()));\n-            writer.writeEndElement();\n-            writer.writeEndElement();\n-        } catch (XMLStreamException e) {\n-            throw new UncheckedXmlStreamException(e);\n-        }\n-    }\n-\n-    private static String switchClassname(SwitchKind kind) {\n-        switch (kind) {\n-            case BREAKER:\n-                return \"Breaker\";\n-            case DISCONNECTOR:\n-                return \"Disconnector\";\n-            case LOAD_BREAK_SWITCH:\n-                return \"LoadBreakSwitch\";\n-            default:\n-                throw new AssertionError(\"Unexpected switch king \" + kind);\n-        }\n-    }\n-\n-    private static void writeTerminal(Terminal t, Connectable<?> c, String cimNamespace, XMLStreamWriter writer) {\n-        Optional<String> tid;\n-        if (c instanceof DanglingLine) {\n-            tid = c.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"Terminal_Network\");\n-        } else {\n-            int numt = 0;\n-            if (c.getTerminals().size() == 1) {\n-                numt = 1;\n-            } else {\n-                if (c instanceof Injection) {\n-                    // An injection should have only one terminal\n-                } else if (c instanceof Branch) {\n-                    switch (((Branch<?>) c).getSide(t)) {\n-                        case ONE:\n-                            numt = 1;\n-                            break;\n-                        case TWO:\n-                            numt = 2;\n-                            break;\n-                        default:\n-                            throw new AssertionError(\"Incorrect branch side \" + ((Branch<?>) c).getSide(t));\n-                    }\n-                } else if (c instanceof ThreeWindingsTransformer) {\n-                    switch (((ThreeWindingsTransformer) c).getSide(t)) {\n-                        case ONE:\n-                            numt = 1;\n-                            break;\n-                        case TWO:\n-                            numt = 2;\n-                            break;\n-                        case THREE:\n-                            numt = 3;\n-                            break;\n-                        default:\n-                            throw new AssertionError(\"Incorrect three-windings transformer side \" + ((ThreeWindingsTransformer) c).getSide(t));\n-                    }\n-                } else {\n-                    throw new PowsyblException(\"Unexpected Connectable instance: \" + c.getClass());\n-                }\n-            }\n-            tid = c.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.TERMINAL + numt);\n-        }\n-        if (tid.isPresent()) {\n-            writeTerminal(tid.get(), t.isConnected(), cimNamespace, writer);\n-        } else {\n-            LOG.error(\"Alias not found for terminal {} in connectable {}\", t, c.getId());\n-        }\n-    }\n-\n-    private static void writeTerminal(String terminalId, boolean connected, String cimNamespace, XMLStreamWriter writer) {\n-        try {\n-            writer.writeStartElement(cimNamespace, CgmesNames.TERMINAL);\n-            writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + terminalId);\n-            writer.writeStartElement(cimNamespace, \"ACDCTerminal.connected\");\n-            writer.writeCharacters(Boolean.toString(connected));\n-            writer.writeEndElement();\n-            writer.writeEndElement();\n-        } catch (XMLStreamException e) {\n-            throw new UncheckedXmlStreamException(e);\n-        }\n-    }\n-\n-    private static void writeEquivalentInjection(DanglingLine dl, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n-        Optional<String> ei = dl.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"EquivalentInjection\");\n-        if (ei.isPresent()) {\n-            writer.writeStartElement(cimNamespace, \"EquivalentInjection\");\n-            writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + ei.get());\n-            writer.writeStartElement(cimNamespace, \"EquivalentInjection.p\");\n-            writer.writeCharacters(CgmesExportUtil.format(dl.getP0()));\n-            writer.writeEndElement();\n-            writer.writeStartElement(cimNamespace, \"EquivalentInjection.q\");\n-            writer.writeCharacters(CgmesExportUtil.format(dl.getQ0()));\n-            writer.writeEndElement();\n-            // regulationStatus and regulationTarget are optional,\n-            // but test cases contain the attributes with disabled and 0\n-            boolean regulationStatus = false;\n-            double regulationTarget = 0;\n-            if (dl.getGeneration() != null) {\n-                regulationStatus = dl.getGeneration().isVoltageRegulationOn();\n-                regulationTarget = dl.getGeneration().getTargetV();\n-            }\n-            writer.writeStartElement(cimNamespace, \"EquivalentInjection.regulationStatus\");\n-            writer.writeCharacters(Boolean.toString(regulationStatus));\n-            writer.writeEndElement();\n-            writer.writeStartElement(cimNamespace, \"EquivalentInjection.regulationTarget\");\n-            writer.writeCharacters(CgmesExportUtil.format(regulationTarget));\n-            writer.writeEndElement();\n-            writer.writeEndElement();\n-        }\n-    }\n-\n-    private static void writeEnergyConsumers(Network network, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n-        for (Load load : network.getLoads()) {\n-            writeSshEnergyConsumer(load.getId(), load.getP0(), load.getQ0(), load.getExtension(LoadDetail.class), cimNamespace, writer);\n-        }\n-    }\n-\n-    private static void writeSshEnergyConsumer(String id, double p, double q, LoadDetail loadDetail, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n-        writer.writeStartElement(cimNamespace, loadClassName(loadDetail));\n-        writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + id);\n-        writer.writeStartElement(cimNamespace, \"EnergyConsumer.p\");\n-        writer.writeCharacters(CgmesExportUtil.format(p));\n-        writer.writeEndElement();\n-        writer.writeStartElement(cimNamespace, \"EnergyConsumer.q\");\n-        writer.writeCharacters(CgmesExportUtil.format(q));\n-        writer.writeEndElement();\n-        writer.writeEndElement();\n-    }\n-\n-    private static String loadClassName(LoadDetail loadDetail) {\n-        if (loadDetail != null) {\n-            // Conform load if fixed part is zero and variable part is non-zero\n-            if (loadDetail.getFixedActivePower() == 0 && loadDetail.getFixedReactivePower() == 0\n-                    && (loadDetail.getVariableActivePower() != 0 || loadDetail.getVariableReactivePower() != 0)) {\n-                return \"ConformLoad\";\n-            }\n-            // NonConform load if fixed part is non-zero and variable part is all zero\n-            if (loadDetail.getVariableActivePower() == 0 && loadDetail.getVariableReactivePower() == 0\n-                    && (loadDetail.getFixedActivePower() != 0 || loadDetail.getFixedReactivePower() != 0)) {\n-                return \"NonConformLoad\";\n-            }\n-        }\n-        return \"EnergyConsumer\";\n-    }\n-\n-    private static void writeGeneratingUnitsParticitationFactors(Network network, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n-        // Multiple generators may share the same generation unit,\n-        // we will choose the participation factor from the last generator that references the generating unit\n-        // We only consider generators that have participation factors\n-        Map<String, GeneratingUnit> generatingUnits = new HashMap<>();\n-        for (Generator g : network.getGenerators()) {\n-            GeneratingUnit gu = generatingUnitForGenerator(g);\n-            if (gu != null) {\n-                generatingUnits.put(gu.id, gu);\n-            }\n-        }\n-        for (GeneratingUnit gu : generatingUnits.values()) {\n-            writeGeneratingUnitParticipationFactor(gu, cimNamespace, writer);\n-        }\n-    }\n-\n-    private static GeneratingUnit generatingUnitForGenerator(Generator g) {\n-        if (g.hasProperty(GENERATING_UNIT_PROPERTY)) {\n-            ActivePowerControl apc = g.getExtension(ActivePowerControl.class);\n-            if (apc != null) {\n-                GeneratingUnit gu = new GeneratingUnit();\n-                gu.id = g.getProperty(GENERATING_UNIT_PROPERTY);\n-                gu.participationFactor = apc.getDroop();\n-                gu.className = generatingUnitClassname(g);\n-                return gu;\n-            }\n-        }\n-        return null;\n-    }\n-\n-    private static void writeGeneratingUnitParticipationFactor(GeneratingUnit gu, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n-        writer.writeStartElement(cimNamespace, gu.className);\n-        writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + gu.id);\n-        writer.writeStartElement(cimNamespace, \"GeneratingUnit.normalPF\");\n-        writer.writeCharacters(CgmesExportUtil.format(gu.participationFactor));\n-        writer.writeEndElement();\n-        writer.writeEndElement();\n-    }\n-\n-    private static String generatingUnitClassname(Generator g) {\n-        EnergySource energySource = g.getEnergySource();\n-        if (energySource == EnergySource.HYDRO) {\n-            return \"HydroGeneratingUnit\";\n-        } else if (energySource == EnergySource.NUCLEAR) {\n-            return \"NuclearGeneratingUnit\";\n-        } else if (energySource == EnergySource.SOLAR) {\n-            return \"SolarGeneratingUnit\";\n-        } else if (energySource == EnergySource.THERMAL) {\n-            return \"ThermalGeneratingUnit\";\n-        } else if (energySource == EnergySource.WIND) {\n-            return \"WindGeneratingUnit\";\n-        } else {\n-            return \"GeneratingUnit\";\n-        }\n-    }\n-\n-    private enum RegulatingControlType {\n-        REGULATING_CONTROL, TAP_CHANGER_CONTROL\n-    }\n-\n-    private static class GeneratingUnit {\n-        String id;\n-        String className;\n-        double participationFactor;\n-    }\n-\n-    static class RegulatingControlView {\n-        String id;\n-        RegulatingControlType type;\n-        boolean discrete;\n-        boolean controlEnabled;\n-        double targetDeadband;\n-        double targetValue;\n-        String targetValueUnitMultiplier;\n-\n-        RegulatingControlView(String id, RegulatingControlType type, boolean discrete, boolean controlEnabled,\n-                              double targetDeadband, double targetValue, String targetValueUnitMultiplier) {\n-            this.id = id;\n-            this.type = type;\n-            this.discrete = discrete;\n-            this.controlEnabled = controlEnabled;\n-            this.targetDeadband = targetDeadband;\n-            this.targetValue = targetValue;\n-            this.targetValueUnitMultiplier = targetValueUnitMultiplier;\n-        }\n-    }\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIwOTk1Ng==", "url": "https://github.com/powsybl/powsybl-core/pull/1485#discussion_r536209956", "bodyText": "Is it working if the generator is not connected?", "author": "annetill", "createdAt": "2020-12-04T16:10:47Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/export/SteadyStateHypothesisExport.java", "diffHunk": "@@ -0,0 +1,629 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.cgmes.conversion.export;\n+\n+import com.powsybl.cgmes.conversion.Conversion;\n+import com.powsybl.cgmes.model.CgmesNames;\n+import com.powsybl.commons.PowsyblException;\n+import com.powsybl.commons.exceptions.UncheckedXmlStreamException;\n+import com.powsybl.iidm.network.*;\n+import com.powsybl.iidm.network.extensions.ActivePowerControl;\n+import com.powsybl.iidm.network.extensions.LoadDetail;\n+import com.powsybl.iidm.network.extensions.SlackTerminal;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.stream.XMLStreamWriter;\n+import java.util.*;\n+\n+import static com.powsybl.cgmes.model.CgmesNamespace.RDF_NAMESPACE;\n+\n+/**\n+ * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n+ * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n+ */\n+public final class SteadyStateHypothesisExport {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(SteadyStateHypothesisExport.class);\n+\n+    private static final String REGULATING_CONTROL_PROPERTY = Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"RegulatingControl\";\n+    private static final String GENERATING_UNIT_PROPERTY = Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"GeneratingUnit\";\n+\n+    private SteadyStateHypothesisExport() {\n+    }\n+\n+    public static void write(Network network, XMLStreamWriter writer, CgmesExportContext context) {\n+        final Map<String, List<RegulatingControlView>> regulatingControlViews = new HashMap<>();\n+        String cimNamespace = context.getCimNamespace();\n+\n+        try {\n+            CgmesExportUtil.writeRdfRoot(context.getCimVersion(), writer);\n+\n+            if (context.getCimVersion() == 16) {\n+                CgmesExportUtil.writeModelDescription(writer, context.getSshModelDescription(), context);\n+            }\n+\n+            writeEnergyConsumers(network, cimNamespace, writer);\n+            writeEquivalentInjections(network, cimNamespace, writer);\n+            writeTapChangers(network, cimNamespace, regulatingControlViews, writer);\n+            writeSynchronousMachines(network, cimNamespace, regulatingControlViews, writer);\n+            writeShuntCompensators(network, cimNamespace, regulatingControlViews, writer);\n+            writeStaticVarCompensators(network, cimNamespace, regulatingControlViews, writer);\n+            writeRegulatingControls(regulatingControlViews, cimNamespace, writer);\n+            writeGeneratingUnitsParticitationFactors(network, cimNamespace, writer);\n+            // FIXME open status of retained switches in bus-branch models\n+            writeSwitches(network, cimNamespace, writer);\n+            // TODO writeControlAreas\n+            writeTerminals(network, cimNamespace, writer);\n+\n+            writer.writeEndDocument();\n+        } catch (XMLStreamException e) {\n+            throw new UncheckedXmlStreamException(e);\n+        }\n+    }\n+\n+    private static void writeSwitches(Network network, String cimNamespace, XMLStreamWriter writer) {\n+        for (Switch sw : network.getSwitches()) {\n+            writeSwitch(sw, cimNamespace, writer);\n+        }\n+    }\n+\n+    private static final String ALIAS_TYPE_TERMINAL_1 = Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.TERMINAL + \"1\";\n+    private static final String ALIAS_TYPE_TERMINAL_2 = Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.TERMINAL + \"2\";\n+\n+    private static void writeTerminals(Network network, String cimNamespace, XMLStreamWriter writer) {\n+        for (Connectable<?> c : network.getConnectables()) {\n+            for (Terminal t : c.getTerminals()) {\n+                writeTerminal(t, c, cimNamespace, writer);\n+            }\n+        }\n+        for (Switch sw : network.getSwitches()) {\n+            // Terminals for switches are exported as always connected\n+            // The status of the switch is \"open\" if any of the original terminals were not connected\n+            // An original \"closed\" switch with any terminal disconnected\n+            // will be exported as \"open\" with terminals connected\n+            sw.getAliasFromType(ALIAS_TYPE_TERMINAL_1)\n+                .ifPresent(tid1 -> writeTerminal(tid1, true, cimNamespace, writer));\n+            sw.getAliasFromType(ALIAS_TYPE_TERMINAL_2)\n+                .ifPresent(tid2 -> writeTerminal(tid2, true, cimNamespace, writer));\n+        }\n+        for (DanglingLine dl : network.getDanglingLines()) {\n+            // Terminal for equivalent injection at boundary is always connected\n+            dl.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"EquivalentInjectionTerminal\")\n+                    .ifPresent(tid -> writeTerminal(tid, true, cimNamespace, writer));\n+            // Terminal for boundary side of original line/switch is always connected\n+            dl.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"Terminal_Boundary\")\n+                    .ifPresent(tid -> writeTerminal(tid, true, cimNamespace, writer));\n+        }\n+    }\n+\n+    private static void writeEquivalentInjections(Network network, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n+        // One equivalent injection for every dangling line\n+        for (DanglingLine dl : network.getDanglingLines()) {\n+            writeEquivalentInjection(dl, cimNamespace, writer);\n+        }\n+    }\n+\n+    private static void writeTapChangers(Network network, String cimNamespace, Map<String, List<RegulatingControlView>> regulatingControlViews, XMLStreamWriter writer) throws XMLStreamException {\n+        for (TwoWindingsTransformer twt : network.getTwoWindingsTransformers()) {\n+            if (twt.hasPhaseTapChanger()) {\n+                String ptcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + 1)\n+                        .orElseGet(() -> twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + 2).orElseThrow(PowsyblException::new));\n+                writeTapChanger(twt, ptcId, twt.getPhaseTapChanger(), CgmesNames.PHASE_TAP_CHANGER_TABULAR, regulatingControlViews, cimNamespace, writer);\n+            }\n+            if (twt.hasRatioTapChanger()) {\n+                String rtcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + 1)\n+                        .orElseGet(() -> twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + 2).orElseThrow(PowsyblException::new));\n+                writeTapChanger(twt, rtcId, twt.getRatioTapChanger(), CgmesNames.RATIO_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n+            }\n+        }\n+\n+        for (ThreeWindingsTransformer twt : network.getThreeWindingsTransformers()) {\n+            int i = 1;\n+            for (ThreeWindingsTransformer.Leg leg : Arrays.asList(twt.getLeg1(), twt.getLeg2(), twt.getLeg3())) {\n+                if (leg.hasPhaseTapChanger()) {\n+                    String ptcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + i).orElseThrow(PowsyblException::new);\n+                    writeTapChanger(twt, ptcId, leg.getPhaseTapChanger(), CgmesNames.PHASE_TAP_CHANGER_TABULAR, regulatingControlViews, cimNamespace, writer);\n+                }\n+                if (leg.hasRatioTapChanger()) {\n+                    String rtcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + i).orElseThrow(PowsyblException::new);\n+                    writeTapChanger(twt, rtcId, leg.getRatioTapChanger(), CgmesNames.RATIO_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n+                }\n+                i++;\n+            }\n+        }\n+    }\n+\n+    private static void writeTapChanger(Identifiable<?> eq, String tcId, TapChanger<?, ?> tc, String defaultType, Map<String, List<RegulatingControlView>> regulatingControlViews, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n+        String type = eq.getProperty(cgmesTapChangerReferenceKey(tcId, \"type\"), defaultType);\n+        writeTapChanger(type, tcId, tc, cimNamespace, writer);\n+        addRegulatingControlView(tc, tcId, eq, regulatingControlViews);\n+        writeHiddenTapChanger(eq, tcId, defaultType, cimNamespace, writer);\n+    }\n+\n+    private static void writeShuntCompensators(Network network, String cimNamespace, Map<String, List<RegulatingControlView>> regulatingControlViews, XMLStreamWriter writer) throws XMLStreamException {\n+        for (ShuntCompensator s : network.getShuntCompensators()) {\n+            String shuntType;\n+            switch (s.getModelType()) {\n+                case LINEAR:\n+                    shuntType = \"Linear\";\n+                    break;\n+                case NON_LINEAR:\n+                    shuntType = \"Nonlinear\";\n+                    break;\n+                default:\n+                    throw new AssertionError(\"Unexpected shunt model type: \" + s.getModelType());\n+            }\n+            boolean controlEnabled = s.isVoltageRegulatorOn();\n+            writer.writeStartElement(cimNamespace, shuntType + \"ShuntCompensator\");\n+            writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + s.getId());\n+            writer.writeStartElement(cimNamespace, \"ShuntCompensator.sections\");\n+            writer.writeCharacters(CgmesExportUtil.format(s.getSectionCount()));\n+            writer.writeEndElement();\n+            writer.writeStartElement(cimNamespace, \"RegulatingCondEq.controlEnabled\");\n+            writer.writeCharacters(Boolean.toString(controlEnabled));\n+            writer.writeEndElement();\n+            writer.writeEndElement();\n+            addRegulatingControlView(s, regulatingControlViews);\n+        }\n+    }\n+\n+    private static void addRegulatingControlView(ShuntCompensator s, Map<String, List<RegulatingControlView>> regulatingControlViews) {\n+        if (s.hasProperty(REGULATING_CONTROL_PROPERTY)) {\n+            // PowSyBl has considered the control as discrete, with a certain targetDeadband\n+            // The target value is stored in kV by PowSyBl, so unit multiplier is \"k\"\n+            String rcid = s.getProperty(REGULATING_CONTROL_PROPERTY);\n+            RegulatingControlView rcv = new RegulatingControlView(rcid, RegulatingControlType.REGULATING_CONTROL, true,\n+                s.isVoltageRegulatorOn(), s.getTargetDeadband(), s.getTargetV(), \"k\");\n+            regulatingControlViews.computeIfAbsent(rcid, k -> new ArrayList<>()).add(rcv);\n+        }\n+    }\n+\n+    private static void writeSynchronousMachines(Network network, String cimNamespace, Map<String, List<RegulatingControlView>> regulatingControlViews, XMLStreamWriter writer) throws XMLStreamException {\n+        for (Generator g : network.getGenerators()) {\n+            boolean controlEnabled = g.isVoltageRegulatorOn();\n+            writer.writeStartElement(cimNamespace, \"SynchronousMachine\");\n+            writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + g.getId());\n+            writer.writeStartElement(cimNamespace, \"RegulatingCondEq.controlEnabled\");\n+            writer.writeCharacters(Boolean.toString(controlEnabled));\n+            writer.writeEndElement();\n+            writer.writeStartElement(cimNamespace, \"RotatingMachine.p\");\n+            writer.writeCharacters(CgmesExportUtil.format(g.getTerminal().getP()));\n+            writer.writeEndElement();\n+            writer.writeStartElement(cimNamespace, \"RotatingMachine.q\");\n+            writer.writeCharacters(CgmesExportUtil.format(g.getTerminal().getQ()));\n+            writer.writeEndElement();\n+            writer.writeStartElement(cimNamespace, \"SynchronousMachine.referencePriority\");\n+            // reference priority is used for angle reference selection (slack)\n+            writer.writeCharacters(isInSlackBus(g) ? \"1\" : \"0\");\n+            writer.writeEndElement();\n+            writer.writeEmptyElement(cimNamespace, \"SynchronousMachine.operatingMode\");\n+            // All generators in PowSyBl are considered as generator, not motor\n+            writer.writeAttribute(RDF_NAMESPACE, CgmesNames.RESOURCE, cimNamespace + \"SynchronousMachineOperatingMode.generator\");\n+            writer.writeEndElement();\n+\n+            addRegulatingControlView(g, regulatingControlViews);\n+        }\n+    }\n+\n+    private static void addRegulatingControlView(Generator g, Map<String, List<RegulatingControlView>> regulatingControlViews) {\n+        if (g.hasProperty(REGULATING_CONTROL_PROPERTY)) {\n+            // PowSyBl has considered the control as continuous and with targetDeadband of size 0\n+            // The target value is stored in kV by PowSyBl, so unit multiplier is \"k\"\n+            String rcid = g.getProperty(REGULATING_CONTROL_PROPERTY);\n+            double targetDeadband = 0;\n+            RegulatingControlView rcv = new RegulatingControlView(rcid, RegulatingControlType.REGULATING_CONTROL, false,\n+                g.isVoltageRegulatorOn(), targetDeadband, g.getTargetV(), \"k\");\n+            regulatingControlViews.computeIfAbsent(rcid, k -> new ArrayList<>()).add(rcv);\n+        }\n+    }\n+\n+    private static void writeStaticVarCompensators(Network network, String cimNamespace, Map<String, List<RegulatingControlView>> regulatingControlViews, XMLStreamWriter writer) throws XMLStreamException {\n+        for (StaticVarCompensator svc : network.getStaticVarCompensators()) {\n+            StaticVarCompensator.RegulationMode regulationMode = svc.getRegulationMode();\n+            boolean controlEnabled = regulationMode != StaticVarCompensator.RegulationMode.OFF;\n+            writer.writeStartElement(cimNamespace, \"StaticVarCompensator\");\n+            writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + svc.getId());\n+            writer.writeStartElement(cimNamespace, \"RegulatingCondEq.controlEnabled\");\n+            writer.writeCharacters(Boolean.toString(controlEnabled));\n+            writer.writeEndElement();\n+            writer.writeStartElement(cimNamespace, \"StaticVarCompensator.q\");\n+            writer.writeCharacters(CgmesExportUtil.format(svc.getTerminal().getQ()));\n+            writer.writeEndElement();\n+            writer.writeEndElement();\n+\n+            if (svc.hasProperty(REGULATING_CONTROL_PROPERTY)) {\n+                String rcid = svc.getProperty(REGULATING_CONTROL_PROPERTY);\n+                double targetDeadband = 0;\n+                // Regulating control could be reactive power or voltage\n+                double targetValue;\n+                String multiplier;\n+                if (regulationMode == StaticVarCompensator.RegulationMode.VOLTAGE) {\n+                    targetValue = svc.getVoltageSetpoint();\n+                    multiplier = \"k\";\n+                } else if (regulationMode == StaticVarCompensator.RegulationMode.REACTIVE_POWER) {\n+                    targetValue = svc.getReactivePowerSetpoint();\n+                    multiplier = \"M\";\n+                } else {\n+                    targetValue = 0;\n+                    multiplier = \"k\";\n+                }\n+                RegulatingControlView rcv = new RegulatingControlView(rcid, RegulatingControlType.REGULATING_CONTROL, false,\n+                        controlEnabled, targetDeadband, targetValue, multiplier);\n+                regulatingControlViews.computeIfAbsent(rcid, k -> new ArrayList<>()).add(rcv);\n+            }\n+        }\n+    }\n+\n+    private static boolean isInSlackBus(Generator g) {\n+        VoltageLevel vl = g.getTerminal().getVoltageLevel();\n+        SlackTerminal slackTerminal = vl.getExtension(SlackTerminal.class);\n+        if (slackTerminal != null) {\n+            Bus slackBus = slackTerminal.getTerminal().getBusBreakerView().getBus();\n+            if (slackBus == g.getTerminal().getBusBreakerView().getBus()) {", "originalCommit": "38b2967f085ecdf9db35727b4be50c063a5fecb3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "56c9f12cafecb0f1f50a28e4fb73512856320940", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/export/SteadyStateHypothesisExport.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/export/SteadyStateHypothesisExport.java\ndeleted file mode 100644\nindex 64a90f2e0..000000000\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/export/SteadyStateHypothesisExport.java\n+++ /dev/null\n\n@@ -1,629 +0,0 @@\n-/**\n- * Copyright (c) 2020, RTE (http://www.rte-france.com)\n- * This Source Code Form is subject to the terms of the Mozilla Public\n- * License, v. 2.0. If a copy of the MPL was not distributed with this\n- * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n- */\n-package com.powsybl.cgmes.conversion.export;\n-\n-import com.powsybl.cgmes.conversion.Conversion;\n-import com.powsybl.cgmes.model.CgmesNames;\n-import com.powsybl.commons.PowsyblException;\n-import com.powsybl.commons.exceptions.UncheckedXmlStreamException;\n-import com.powsybl.iidm.network.*;\n-import com.powsybl.iidm.network.extensions.ActivePowerControl;\n-import com.powsybl.iidm.network.extensions.LoadDetail;\n-import com.powsybl.iidm.network.extensions.SlackTerminal;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import javax.xml.stream.XMLStreamException;\n-import javax.xml.stream.XMLStreamWriter;\n-import java.util.*;\n-\n-import static com.powsybl.cgmes.model.CgmesNamespace.RDF_NAMESPACE;\n-\n-/**\n- * @author Miora Ralambotiana <miora.ralambotiana at rte-france.com>\n- * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n- */\n-public final class SteadyStateHypothesisExport {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(SteadyStateHypothesisExport.class);\n-\n-    private static final String REGULATING_CONTROL_PROPERTY = Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"RegulatingControl\";\n-    private static final String GENERATING_UNIT_PROPERTY = Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"GeneratingUnit\";\n-\n-    private SteadyStateHypothesisExport() {\n-    }\n-\n-    public static void write(Network network, XMLStreamWriter writer, CgmesExportContext context) {\n-        final Map<String, List<RegulatingControlView>> regulatingControlViews = new HashMap<>();\n-        String cimNamespace = context.getCimNamespace();\n-\n-        try {\n-            CgmesExportUtil.writeRdfRoot(context.getCimVersion(), writer);\n-\n-            if (context.getCimVersion() == 16) {\n-                CgmesExportUtil.writeModelDescription(writer, context.getSshModelDescription(), context);\n-            }\n-\n-            writeEnergyConsumers(network, cimNamespace, writer);\n-            writeEquivalentInjections(network, cimNamespace, writer);\n-            writeTapChangers(network, cimNamespace, regulatingControlViews, writer);\n-            writeSynchronousMachines(network, cimNamespace, regulatingControlViews, writer);\n-            writeShuntCompensators(network, cimNamespace, regulatingControlViews, writer);\n-            writeStaticVarCompensators(network, cimNamespace, regulatingControlViews, writer);\n-            writeRegulatingControls(regulatingControlViews, cimNamespace, writer);\n-            writeGeneratingUnitsParticitationFactors(network, cimNamespace, writer);\n-            // FIXME open status of retained switches in bus-branch models\n-            writeSwitches(network, cimNamespace, writer);\n-            // TODO writeControlAreas\n-            writeTerminals(network, cimNamespace, writer);\n-\n-            writer.writeEndDocument();\n-        } catch (XMLStreamException e) {\n-            throw new UncheckedXmlStreamException(e);\n-        }\n-    }\n-\n-    private static void writeSwitches(Network network, String cimNamespace, XMLStreamWriter writer) {\n-        for (Switch sw : network.getSwitches()) {\n-            writeSwitch(sw, cimNamespace, writer);\n-        }\n-    }\n-\n-    private static final String ALIAS_TYPE_TERMINAL_1 = Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.TERMINAL + \"1\";\n-    private static final String ALIAS_TYPE_TERMINAL_2 = Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.TERMINAL + \"2\";\n-\n-    private static void writeTerminals(Network network, String cimNamespace, XMLStreamWriter writer) {\n-        for (Connectable<?> c : network.getConnectables()) {\n-            for (Terminal t : c.getTerminals()) {\n-                writeTerminal(t, c, cimNamespace, writer);\n-            }\n-        }\n-        for (Switch sw : network.getSwitches()) {\n-            // Terminals for switches are exported as always connected\n-            // The status of the switch is \"open\" if any of the original terminals were not connected\n-            // An original \"closed\" switch with any terminal disconnected\n-            // will be exported as \"open\" with terminals connected\n-            sw.getAliasFromType(ALIAS_TYPE_TERMINAL_1)\n-                .ifPresent(tid1 -> writeTerminal(tid1, true, cimNamespace, writer));\n-            sw.getAliasFromType(ALIAS_TYPE_TERMINAL_2)\n-                .ifPresent(tid2 -> writeTerminal(tid2, true, cimNamespace, writer));\n-        }\n-        for (DanglingLine dl : network.getDanglingLines()) {\n-            // Terminal for equivalent injection at boundary is always connected\n-            dl.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"EquivalentInjectionTerminal\")\n-                    .ifPresent(tid -> writeTerminal(tid, true, cimNamespace, writer));\n-            // Terminal for boundary side of original line/switch is always connected\n-            dl.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"Terminal_Boundary\")\n-                    .ifPresent(tid -> writeTerminal(tid, true, cimNamespace, writer));\n-        }\n-    }\n-\n-    private static void writeEquivalentInjections(Network network, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n-        // One equivalent injection for every dangling line\n-        for (DanglingLine dl : network.getDanglingLines()) {\n-            writeEquivalentInjection(dl, cimNamespace, writer);\n-        }\n-    }\n-\n-    private static void writeTapChangers(Network network, String cimNamespace, Map<String, List<RegulatingControlView>> regulatingControlViews, XMLStreamWriter writer) throws XMLStreamException {\n-        for (TwoWindingsTransformer twt : network.getTwoWindingsTransformers()) {\n-            if (twt.hasPhaseTapChanger()) {\n-                String ptcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + 1)\n-                        .orElseGet(() -> twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + 2).orElseThrow(PowsyblException::new));\n-                writeTapChanger(twt, ptcId, twt.getPhaseTapChanger(), CgmesNames.PHASE_TAP_CHANGER_TABULAR, regulatingControlViews, cimNamespace, writer);\n-            }\n-            if (twt.hasRatioTapChanger()) {\n-                String rtcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + 1)\n-                        .orElseGet(() -> twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + 2).orElseThrow(PowsyblException::new));\n-                writeTapChanger(twt, rtcId, twt.getRatioTapChanger(), CgmesNames.RATIO_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n-            }\n-        }\n-\n-        for (ThreeWindingsTransformer twt : network.getThreeWindingsTransformers()) {\n-            int i = 1;\n-            for (ThreeWindingsTransformer.Leg leg : Arrays.asList(twt.getLeg1(), twt.getLeg2(), twt.getLeg3())) {\n-                if (leg.hasPhaseTapChanger()) {\n-                    String ptcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.PHASE_TAP_CHANGER + i).orElseThrow(PowsyblException::new);\n-                    writeTapChanger(twt, ptcId, leg.getPhaseTapChanger(), CgmesNames.PHASE_TAP_CHANGER_TABULAR, regulatingControlViews, cimNamespace, writer);\n-                }\n-                if (leg.hasRatioTapChanger()) {\n-                    String rtcId = twt.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.RATIO_TAP_CHANGER + i).orElseThrow(PowsyblException::new);\n-                    writeTapChanger(twt, rtcId, leg.getRatioTapChanger(), CgmesNames.RATIO_TAP_CHANGER, regulatingControlViews, cimNamespace, writer);\n-                }\n-                i++;\n-            }\n-        }\n-    }\n-\n-    private static void writeTapChanger(Identifiable<?> eq, String tcId, TapChanger<?, ?> tc, String defaultType, Map<String, List<RegulatingControlView>> regulatingControlViews, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n-        String type = eq.getProperty(cgmesTapChangerReferenceKey(tcId, \"type\"), defaultType);\n-        writeTapChanger(type, tcId, tc, cimNamespace, writer);\n-        addRegulatingControlView(tc, tcId, eq, regulatingControlViews);\n-        writeHiddenTapChanger(eq, tcId, defaultType, cimNamespace, writer);\n-    }\n-\n-    private static void writeShuntCompensators(Network network, String cimNamespace, Map<String, List<RegulatingControlView>> regulatingControlViews, XMLStreamWriter writer) throws XMLStreamException {\n-        for (ShuntCompensator s : network.getShuntCompensators()) {\n-            String shuntType;\n-            switch (s.getModelType()) {\n-                case LINEAR:\n-                    shuntType = \"Linear\";\n-                    break;\n-                case NON_LINEAR:\n-                    shuntType = \"Nonlinear\";\n-                    break;\n-                default:\n-                    throw new AssertionError(\"Unexpected shunt model type: \" + s.getModelType());\n-            }\n-            boolean controlEnabled = s.isVoltageRegulatorOn();\n-            writer.writeStartElement(cimNamespace, shuntType + \"ShuntCompensator\");\n-            writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + s.getId());\n-            writer.writeStartElement(cimNamespace, \"ShuntCompensator.sections\");\n-            writer.writeCharacters(CgmesExportUtil.format(s.getSectionCount()));\n-            writer.writeEndElement();\n-            writer.writeStartElement(cimNamespace, \"RegulatingCondEq.controlEnabled\");\n-            writer.writeCharacters(Boolean.toString(controlEnabled));\n-            writer.writeEndElement();\n-            writer.writeEndElement();\n-            addRegulatingControlView(s, regulatingControlViews);\n-        }\n-    }\n-\n-    private static void addRegulatingControlView(ShuntCompensator s, Map<String, List<RegulatingControlView>> regulatingControlViews) {\n-        if (s.hasProperty(REGULATING_CONTROL_PROPERTY)) {\n-            // PowSyBl has considered the control as discrete, with a certain targetDeadband\n-            // The target value is stored in kV by PowSyBl, so unit multiplier is \"k\"\n-            String rcid = s.getProperty(REGULATING_CONTROL_PROPERTY);\n-            RegulatingControlView rcv = new RegulatingControlView(rcid, RegulatingControlType.REGULATING_CONTROL, true,\n-                s.isVoltageRegulatorOn(), s.getTargetDeadband(), s.getTargetV(), \"k\");\n-            regulatingControlViews.computeIfAbsent(rcid, k -> new ArrayList<>()).add(rcv);\n-        }\n-    }\n-\n-    private static void writeSynchronousMachines(Network network, String cimNamespace, Map<String, List<RegulatingControlView>> regulatingControlViews, XMLStreamWriter writer) throws XMLStreamException {\n-        for (Generator g : network.getGenerators()) {\n-            boolean controlEnabled = g.isVoltageRegulatorOn();\n-            writer.writeStartElement(cimNamespace, \"SynchronousMachine\");\n-            writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + g.getId());\n-            writer.writeStartElement(cimNamespace, \"RegulatingCondEq.controlEnabled\");\n-            writer.writeCharacters(Boolean.toString(controlEnabled));\n-            writer.writeEndElement();\n-            writer.writeStartElement(cimNamespace, \"RotatingMachine.p\");\n-            writer.writeCharacters(CgmesExportUtil.format(g.getTerminal().getP()));\n-            writer.writeEndElement();\n-            writer.writeStartElement(cimNamespace, \"RotatingMachine.q\");\n-            writer.writeCharacters(CgmesExportUtil.format(g.getTerminal().getQ()));\n-            writer.writeEndElement();\n-            writer.writeStartElement(cimNamespace, \"SynchronousMachine.referencePriority\");\n-            // reference priority is used for angle reference selection (slack)\n-            writer.writeCharacters(isInSlackBus(g) ? \"1\" : \"0\");\n-            writer.writeEndElement();\n-            writer.writeEmptyElement(cimNamespace, \"SynchronousMachine.operatingMode\");\n-            // All generators in PowSyBl are considered as generator, not motor\n-            writer.writeAttribute(RDF_NAMESPACE, CgmesNames.RESOURCE, cimNamespace + \"SynchronousMachineOperatingMode.generator\");\n-            writer.writeEndElement();\n-\n-            addRegulatingControlView(g, regulatingControlViews);\n-        }\n-    }\n-\n-    private static void addRegulatingControlView(Generator g, Map<String, List<RegulatingControlView>> regulatingControlViews) {\n-        if (g.hasProperty(REGULATING_CONTROL_PROPERTY)) {\n-            // PowSyBl has considered the control as continuous and with targetDeadband of size 0\n-            // The target value is stored in kV by PowSyBl, so unit multiplier is \"k\"\n-            String rcid = g.getProperty(REGULATING_CONTROL_PROPERTY);\n-            double targetDeadband = 0;\n-            RegulatingControlView rcv = new RegulatingControlView(rcid, RegulatingControlType.REGULATING_CONTROL, false,\n-                g.isVoltageRegulatorOn(), targetDeadband, g.getTargetV(), \"k\");\n-            regulatingControlViews.computeIfAbsent(rcid, k -> new ArrayList<>()).add(rcv);\n-        }\n-    }\n-\n-    private static void writeStaticVarCompensators(Network network, String cimNamespace, Map<String, List<RegulatingControlView>> regulatingControlViews, XMLStreamWriter writer) throws XMLStreamException {\n-        for (StaticVarCompensator svc : network.getStaticVarCompensators()) {\n-            StaticVarCompensator.RegulationMode regulationMode = svc.getRegulationMode();\n-            boolean controlEnabled = regulationMode != StaticVarCompensator.RegulationMode.OFF;\n-            writer.writeStartElement(cimNamespace, \"StaticVarCompensator\");\n-            writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + svc.getId());\n-            writer.writeStartElement(cimNamespace, \"RegulatingCondEq.controlEnabled\");\n-            writer.writeCharacters(Boolean.toString(controlEnabled));\n-            writer.writeEndElement();\n-            writer.writeStartElement(cimNamespace, \"StaticVarCompensator.q\");\n-            writer.writeCharacters(CgmesExportUtil.format(svc.getTerminal().getQ()));\n-            writer.writeEndElement();\n-            writer.writeEndElement();\n-\n-            if (svc.hasProperty(REGULATING_CONTROL_PROPERTY)) {\n-                String rcid = svc.getProperty(REGULATING_CONTROL_PROPERTY);\n-                double targetDeadband = 0;\n-                // Regulating control could be reactive power or voltage\n-                double targetValue;\n-                String multiplier;\n-                if (regulationMode == StaticVarCompensator.RegulationMode.VOLTAGE) {\n-                    targetValue = svc.getVoltageSetpoint();\n-                    multiplier = \"k\";\n-                } else if (regulationMode == StaticVarCompensator.RegulationMode.REACTIVE_POWER) {\n-                    targetValue = svc.getReactivePowerSetpoint();\n-                    multiplier = \"M\";\n-                } else {\n-                    targetValue = 0;\n-                    multiplier = \"k\";\n-                }\n-                RegulatingControlView rcv = new RegulatingControlView(rcid, RegulatingControlType.REGULATING_CONTROL, false,\n-                        controlEnabled, targetDeadband, targetValue, multiplier);\n-                regulatingControlViews.computeIfAbsent(rcid, k -> new ArrayList<>()).add(rcv);\n-            }\n-        }\n-    }\n-\n-    private static boolean isInSlackBus(Generator g) {\n-        VoltageLevel vl = g.getTerminal().getVoltageLevel();\n-        SlackTerminal slackTerminal = vl.getExtension(SlackTerminal.class);\n-        if (slackTerminal != null) {\n-            Bus slackBus = slackTerminal.getTerminal().getBusBreakerView().getBus();\n-            if (slackBus == g.getTerminal().getBusBreakerView().getBus()) {\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n-\n-    private static void writeTapChanger(String type, String id, TapChanger<?, ?> tc, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n-        writeTapChanger(type, id, tc.isRegulating(), tc.getTapPosition(), cimNamespace, writer);\n-    }\n-\n-    private static void writeTapChanger(String type, String id, boolean controlEnabled, int step, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n-        writer.writeStartElement(cimNamespace, type);\n-        writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + id);\n-        writer.writeStartElement(cimNamespace, \"TapChanger.controlEnabled\");\n-        writer.writeCharacters(Boolean.toString(controlEnabled));\n-        writer.writeEndElement();\n-        writer.writeStartElement(cimNamespace, \"TapChanger.step\");\n-        writer.writeCharacters(CgmesExportUtil.format(step));\n-        writer.writeEndElement();\n-        writer.writeEndElement();\n-    }\n-\n-    private static void addRegulatingControlView(TapChanger tc, String tcId, Identifiable<?> eq, Map<String, List<RegulatingControlView>> regulatingControlViews) {\n-        // Multiple tap changers can be stored at the same equipment\n-        // We use the tap changer id as part of the key for storing the tap changer control id\n-        String key = String.format(\"%s%s.TapChangerControl\", Conversion.CGMES_PREFIX_ALIAS_PROPERTIES, tcId);\n-        if (eq.hasProperty(key)) {\n-            String controlId = eq.getProperty(key);\n-            RegulatingControlView rcv = null;\n-            if (tc instanceof RatioTapChanger) {\n-                rcv = new RegulatingControlView(controlId,\n-                        RegulatingControlType.TAP_CHANGER_CONTROL,\n-                        true,\n-                        tc.isRegulating(),\n-                        tc.getTargetDeadband(),\n-                        ((RatioTapChanger) tc).getTargetV(),\n-                        // Unit multiplier is k for ratio tap changers (regulation value is a voltage in kV)\n-                        \"k\");\n-            } else if (tc instanceof PhaseTapChanger) {\n-                rcv = new RegulatingControlView(controlId,\n-                        RegulatingControlType.TAP_CHANGER_CONTROL,\n-                        true,\n-                        tc.isRegulating(),\n-                        tc.getTargetDeadband(),\n-                        ((PhaseTapChanger) tc).getRegulationValue(),\n-                        // Unit multiplier is M for phase tap changers (regulation value is an active power flow in MW)\n-                        \"M\");\n-            }\n-            if (rcv != null) {\n-                regulatingControlViews.computeIfAbsent(controlId, k -> new ArrayList<>()).add(rcv);\n-            }\n-        }\n-    }\n-\n-    private static String cgmesTapChangerReferenceKey(String tcId, String property) {\n-        return String.format(\"%s%s.%s\", Conversion.CGMES_PREFIX_ALIAS_PROPERTIES, tcId, property);\n-    }\n-\n-    private static void writeHiddenTapChanger(Identifiable<?> eq, String tcId, String defaultType, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n-        String key = cgmesTapChangerReferenceKey(tcId, \"hiddenTapChangerId\");\n-        if (!eq.hasProperty(key)) {\n-            return;\n-        }\n-        String hiddenTcId = eq.getProperty(key);\n-        int step = Integer.parseInt(eq.getProperty(cgmesTapChangerReferenceKey(hiddenTcId, \"step\")));\n-        String type = eq.getProperty(cgmesTapChangerReferenceKey(hiddenTcId, \"type\"), defaultType);\n-        writeTapChanger(type, hiddenTcId, false, step, cimNamespace, writer);\n-    }\n-\n-    private static void writeRegulatingControls(Map<String, List<RegulatingControlView>> regulatingControlViews, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n-        for (List<RegulatingControlView> views : regulatingControlViews.values()) {\n-            writeRegulatingControl(combineRegulatingControlViews(views), cimNamespace, writer);\n-        }\n-    }\n-\n-    private static RegulatingControlView combineRegulatingControlViews(List<RegulatingControlView> rcs) {\n-        RegulatingControlView combined = rcs.get(0);\n-        if (rcs.size() > 1) {\n-            LOG.warn(\"Multiple views ({}) for regulating control {} are combined\", rcs.size(), rcs.get(0).id);\n-        }\n-        for (int k = 1; k < rcs.size(); k++) {\n-            RegulatingControlView current = rcs.get(k);\n-            if (combined.targetDeadband == 0 && current.targetDeadband > 0) {\n-                combined.targetDeadband = current.targetDeadband;\n-            }\n-            if (!combined.discrete && current.discrete) {\n-                combined.discrete = true;\n-            }\n-            if (!combined.controlEnabled && current.controlEnabled) {\n-                combined.controlEnabled = true;\n-            }\n-        }\n-        return combined;\n-    }\n-\n-    private static void writeRegulatingControl(RegulatingControlView rc, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n-        writer.writeStartElement(cimNamespace, regulatingControlClassname(rc.type));\n-        writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + rc.id);\n-        writer.writeStartElement(cimNamespace, \"RegulatingControl.discrete\");\n-        writer.writeCharacters(Boolean.toString(rc.discrete));\n-        writer.writeEndElement();\n-        writer.writeStartElement(cimNamespace, \"RegulatingControl.enabled\");\n-        writer.writeCharacters(Boolean.toString(rc.controlEnabled));\n-        writer.writeEndElement();\n-        writer.writeStartElement(cimNamespace, \"RegulatingControl.targetDeadband\");\n-        writer.writeCharacters(CgmesExportUtil.format(rc.targetDeadband));\n-        writer.writeEndElement();\n-        writer.writeStartElement(cimNamespace, \"RegulatingControl.targetValue\");\n-        writer.writeCharacters(CgmesExportUtil.format(rc.targetValue));\n-        writer.writeEndElement();\n-        writer.writeEmptyElement(cimNamespace, \"RegulatingControl.targetValueUnitMultiplier\");\n-        writer.writeAttribute(RDF_NAMESPACE, \"resource\", cimNamespace + \"UnitMultiplier.\" + rc.targetValueUnitMultiplier);\n-        writer.writeEndElement();\n-    }\n-\n-    private static String regulatingControlClassname(RegulatingControlType type) {\n-        if (type == RegulatingControlType.TAP_CHANGER_CONTROL) {\n-            return \"TapChangerControl\";\n-        } else {\n-            return \"RegulatingControl\";\n-        }\n-    }\n-\n-    private static void writeSwitch(Switch sw, String cimNamespace, XMLStreamWriter writer) {\n-        try {\n-            writer.writeStartElement(cimNamespace, switchClassname(sw.getKind()));\n-            writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + sw.getId());\n-            writer.writeStartElement(cimNamespace, \"Switch.open\");\n-            writer.writeCharacters(Boolean.toString(sw.isOpen()));\n-            writer.writeEndElement();\n-            writer.writeEndElement();\n-        } catch (XMLStreamException e) {\n-            throw new UncheckedXmlStreamException(e);\n-        }\n-    }\n-\n-    private static String switchClassname(SwitchKind kind) {\n-        switch (kind) {\n-            case BREAKER:\n-                return \"Breaker\";\n-            case DISCONNECTOR:\n-                return \"Disconnector\";\n-            case LOAD_BREAK_SWITCH:\n-                return \"LoadBreakSwitch\";\n-            default:\n-                throw new AssertionError(\"Unexpected switch king \" + kind);\n-        }\n-    }\n-\n-    private static void writeTerminal(Terminal t, Connectable<?> c, String cimNamespace, XMLStreamWriter writer) {\n-        Optional<String> tid;\n-        if (c instanceof DanglingLine) {\n-            tid = c.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"Terminal_Network\");\n-        } else {\n-            int numt = 0;\n-            if (c.getTerminals().size() == 1) {\n-                numt = 1;\n-            } else {\n-                if (c instanceof Injection) {\n-                    // An injection should have only one terminal\n-                } else if (c instanceof Branch) {\n-                    switch (((Branch<?>) c).getSide(t)) {\n-                        case ONE:\n-                            numt = 1;\n-                            break;\n-                        case TWO:\n-                            numt = 2;\n-                            break;\n-                        default:\n-                            throw new AssertionError(\"Incorrect branch side \" + ((Branch<?>) c).getSide(t));\n-                    }\n-                } else if (c instanceof ThreeWindingsTransformer) {\n-                    switch (((ThreeWindingsTransformer) c).getSide(t)) {\n-                        case ONE:\n-                            numt = 1;\n-                            break;\n-                        case TWO:\n-                            numt = 2;\n-                            break;\n-                        case THREE:\n-                            numt = 3;\n-                            break;\n-                        default:\n-                            throw new AssertionError(\"Incorrect three-windings transformer side \" + ((ThreeWindingsTransformer) c).getSide(t));\n-                    }\n-                } else {\n-                    throw new PowsyblException(\"Unexpected Connectable instance: \" + c.getClass());\n-                }\n-            }\n-            tid = c.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + CgmesNames.TERMINAL + numt);\n-        }\n-        if (tid.isPresent()) {\n-            writeTerminal(tid.get(), t.isConnected(), cimNamespace, writer);\n-        } else {\n-            LOG.error(\"Alias not found for terminal {} in connectable {}\", t, c.getId());\n-        }\n-    }\n-\n-    private static void writeTerminal(String terminalId, boolean connected, String cimNamespace, XMLStreamWriter writer) {\n-        try {\n-            writer.writeStartElement(cimNamespace, CgmesNames.TERMINAL);\n-            writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + terminalId);\n-            writer.writeStartElement(cimNamespace, \"ACDCTerminal.connected\");\n-            writer.writeCharacters(Boolean.toString(connected));\n-            writer.writeEndElement();\n-            writer.writeEndElement();\n-        } catch (XMLStreamException e) {\n-            throw new UncheckedXmlStreamException(e);\n-        }\n-    }\n-\n-    private static void writeEquivalentInjection(DanglingLine dl, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n-        Optional<String> ei = dl.getAliasFromType(Conversion.CGMES_PREFIX_ALIAS_PROPERTIES + \"EquivalentInjection\");\n-        if (ei.isPresent()) {\n-            writer.writeStartElement(cimNamespace, \"EquivalentInjection\");\n-            writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + ei.get());\n-            writer.writeStartElement(cimNamespace, \"EquivalentInjection.p\");\n-            writer.writeCharacters(CgmesExportUtil.format(dl.getP0()));\n-            writer.writeEndElement();\n-            writer.writeStartElement(cimNamespace, \"EquivalentInjection.q\");\n-            writer.writeCharacters(CgmesExportUtil.format(dl.getQ0()));\n-            writer.writeEndElement();\n-            // regulationStatus and regulationTarget are optional,\n-            // but test cases contain the attributes with disabled and 0\n-            boolean regulationStatus = false;\n-            double regulationTarget = 0;\n-            if (dl.getGeneration() != null) {\n-                regulationStatus = dl.getGeneration().isVoltageRegulationOn();\n-                regulationTarget = dl.getGeneration().getTargetV();\n-            }\n-            writer.writeStartElement(cimNamespace, \"EquivalentInjection.regulationStatus\");\n-            writer.writeCharacters(Boolean.toString(regulationStatus));\n-            writer.writeEndElement();\n-            writer.writeStartElement(cimNamespace, \"EquivalentInjection.regulationTarget\");\n-            writer.writeCharacters(CgmesExportUtil.format(regulationTarget));\n-            writer.writeEndElement();\n-            writer.writeEndElement();\n-        }\n-    }\n-\n-    private static void writeEnergyConsumers(Network network, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n-        for (Load load : network.getLoads()) {\n-            writeSshEnergyConsumer(load.getId(), load.getP0(), load.getQ0(), load.getExtension(LoadDetail.class), cimNamespace, writer);\n-        }\n-    }\n-\n-    private static void writeSshEnergyConsumer(String id, double p, double q, LoadDetail loadDetail, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n-        writer.writeStartElement(cimNamespace, loadClassName(loadDetail));\n-        writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + id);\n-        writer.writeStartElement(cimNamespace, \"EnergyConsumer.p\");\n-        writer.writeCharacters(CgmesExportUtil.format(p));\n-        writer.writeEndElement();\n-        writer.writeStartElement(cimNamespace, \"EnergyConsumer.q\");\n-        writer.writeCharacters(CgmesExportUtil.format(q));\n-        writer.writeEndElement();\n-        writer.writeEndElement();\n-    }\n-\n-    private static String loadClassName(LoadDetail loadDetail) {\n-        if (loadDetail != null) {\n-            // Conform load if fixed part is zero and variable part is non-zero\n-            if (loadDetail.getFixedActivePower() == 0 && loadDetail.getFixedReactivePower() == 0\n-                    && (loadDetail.getVariableActivePower() != 0 || loadDetail.getVariableReactivePower() != 0)) {\n-                return \"ConformLoad\";\n-            }\n-            // NonConform load if fixed part is non-zero and variable part is all zero\n-            if (loadDetail.getVariableActivePower() == 0 && loadDetail.getVariableReactivePower() == 0\n-                    && (loadDetail.getFixedActivePower() != 0 || loadDetail.getFixedReactivePower() != 0)) {\n-                return \"NonConformLoad\";\n-            }\n-        }\n-        return \"EnergyConsumer\";\n-    }\n-\n-    private static void writeGeneratingUnitsParticitationFactors(Network network, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n-        // Multiple generators may share the same generation unit,\n-        // we will choose the participation factor from the last generator that references the generating unit\n-        // We only consider generators that have participation factors\n-        Map<String, GeneratingUnit> generatingUnits = new HashMap<>();\n-        for (Generator g : network.getGenerators()) {\n-            GeneratingUnit gu = generatingUnitForGenerator(g);\n-            if (gu != null) {\n-                generatingUnits.put(gu.id, gu);\n-            }\n-        }\n-        for (GeneratingUnit gu : generatingUnits.values()) {\n-            writeGeneratingUnitParticipationFactor(gu, cimNamespace, writer);\n-        }\n-    }\n-\n-    private static GeneratingUnit generatingUnitForGenerator(Generator g) {\n-        if (g.hasProperty(GENERATING_UNIT_PROPERTY)) {\n-            ActivePowerControl apc = g.getExtension(ActivePowerControl.class);\n-            if (apc != null) {\n-                GeneratingUnit gu = new GeneratingUnit();\n-                gu.id = g.getProperty(GENERATING_UNIT_PROPERTY);\n-                gu.participationFactor = apc.getDroop();\n-                gu.className = generatingUnitClassname(g);\n-                return gu;\n-            }\n-        }\n-        return null;\n-    }\n-\n-    private static void writeGeneratingUnitParticipationFactor(GeneratingUnit gu, String cimNamespace, XMLStreamWriter writer) throws XMLStreamException {\n-        writer.writeStartElement(cimNamespace, gu.className);\n-        writer.writeAttribute(RDF_NAMESPACE, \"about\", \"#\" + gu.id);\n-        writer.writeStartElement(cimNamespace, \"GeneratingUnit.normalPF\");\n-        writer.writeCharacters(CgmesExportUtil.format(gu.participationFactor));\n-        writer.writeEndElement();\n-        writer.writeEndElement();\n-    }\n-\n-    private static String generatingUnitClassname(Generator g) {\n-        EnergySource energySource = g.getEnergySource();\n-        if (energySource == EnergySource.HYDRO) {\n-            return \"HydroGeneratingUnit\";\n-        } else if (energySource == EnergySource.NUCLEAR) {\n-            return \"NuclearGeneratingUnit\";\n-        } else if (energySource == EnergySource.SOLAR) {\n-            return \"SolarGeneratingUnit\";\n-        } else if (energySource == EnergySource.THERMAL) {\n-            return \"ThermalGeneratingUnit\";\n-        } else if (energySource == EnergySource.WIND) {\n-            return \"WindGeneratingUnit\";\n-        } else {\n-            return \"GeneratingUnit\";\n-        }\n-    }\n-\n-    private enum RegulatingControlType {\n-        REGULATING_CONTROL, TAP_CHANGER_CONTROL\n-    }\n-\n-    private static class GeneratingUnit {\n-        String id;\n-        String className;\n-        double participationFactor;\n-    }\n-\n-    static class RegulatingControlView {\n-        String id;\n-        RegulatingControlType type;\n-        boolean discrete;\n-        boolean controlEnabled;\n-        double targetDeadband;\n-        double targetValue;\n-        String targetValueUnitMultiplier;\n-\n-        RegulatingControlView(String id, RegulatingControlType type, boolean discrete, boolean controlEnabled,\n-                              double targetDeadband, double targetValue, String targetValueUnitMultiplier) {\n-            this.id = id;\n-            this.type = type;\n-            this.discrete = discrete;\n-            this.controlEnabled = controlEnabled;\n-            this.targetDeadband = targetDeadband;\n-            this.targetValue = targetValue;\n-            this.targetValueUnitMultiplier = targetValueUnitMultiplier;\n-        }\n-    }\n-}\n"}}, {"oid": "880c0cc4a38a8f12a5cbb2ca1bb6f5d162ac51bd", "url": "https://github.com/powsybl/powsybl-core/commit/880c0cc4a38a8f12a5cbb2ca1bb6f5d162ac51bd", "message": "Small modification\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>", "committedDate": "2020-12-11T10:00:27Z", "type": "commit"}, {"oid": "ecb67faf0f1d74b4996691f563128fc9745333a3", "url": "https://github.com/powsybl/powsybl-core/commit/ecb67faf0f1d74b4996691f563128fc9745333a3", "message": "Always write model description dates referred to UTC\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>", "committedDate": "2020-12-11T10:00:55Z", "type": "commit"}, {"oid": "56c9f12cafecb0f1f50a28e4fb73512856320940", "url": "https://github.com/powsybl/powsybl-core/commit/56c9f12cafecb0f1f50a28e4fb73512856320940", "message": "Revert \"always write model description dates referred to UTC (#1563)\"\n\nThis reverts commit 125c085\n\nSigned-off-by: RALAMBOTIANA MIORA <miora.ralambotiana@rte-france.com>", "committedDate": "2020-12-11T10:02:03Z", "type": "commit"}, {"oid": "21e3d5472937fcff93d95837e5b06e587a31d869", "url": "https://github.com/powsybl/powsybl-core/commit/21e3d5472937fcff93d95837e5b06e587a31d869", "message": "Merge branch 'master' into integration_cgmes_new_ssh_export", "committedDate": "2020-12-11T10:02:23Z", "type": "commit"}]}