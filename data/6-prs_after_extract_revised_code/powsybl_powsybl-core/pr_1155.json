{"pr_number": 1155, "pr_title": "Modify the sensitivity API to allow for post-contingency sensitivity analyses", "pr_createdAt": "2020-02-11T16:29:27Z", "pr_url": "https://github.com/powsybl/powsybl-core/pull/1155", "timeline": [{"oid": "8ecf28768b2008b2d29fbaab27e7a53d5e6bc533", "url": "https://github.com/powsybl/powsybl-core/commit/8ecf28768b2008b2d29fbaab27e7a53d5e6bc533", "message": "Try to ensure backward compatibility of the sensi api\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>", "committedDate": "2020-02-27T13:05:11Z", "type": "forcePushed"}, {"oid": "b7ee0d89644b7c54d0dcc448a9c4321f4c4268be", "url": "https://github.com/powsybl/powsybl-core/commit/b7ee0d89644b7c54d0dcc448a9c4321f4c4268be", "message": "Try to ensure backward compatibility of the sensi api\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>", "committedDate": "2020-02-27T13:08:01Z", "type": "forcePushed"}, {"oid": "c00a0304e7d791f14e9b8f5a374f2e5c043836ec", "url": "https://github.com/powsybl/powsybl-core/commit/c00a0304e7d791f14e9b8f5a374f2e5c043836ec", "message": "Modify the sensitivity results to output the sensitivity values for each contingency\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>", "committedDate": "2020-02-28T10:32:45Z", "type": "forcePushed"}, {"oid": "ba6bcdba1112434ccec229cc263daf9b9bf3a9b3", "url": "https://github.com/powsybl/powsybl-core/commit/ba6bcdba1112434ccec229cc263daf9b9bf3a9b3", "message": "Modify the sensitivity results to output the sensitivity values for each contingency\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>", "committedDate": "2020-02-28T10:34:53Z", "type": "forcePushed"}, {"oid": "e2e45b9f0f4ca15892f5e6191e307210d71f0d82", "url": "https://github.com/powsybl/powsybl-core/commit/e2e45b9f0f4ca15892f5e6191e307210d71f0d82", "message": "Add a systematic sensitivity test\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>", "committedDate": "2020-03-02T14:08:10Z", "type": "forcePushed"}, {"oid": "76d007a4eb878fc5c1d1d38ae81686d988a1c040", "url": "https://github.com/powsybl/powsybl-core/commit/76d007a4eb878fc5c1d1d38ae81686d988a1c040", "message": "Add a systematic sensitivity test\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>", "committedDate": "2020-03-02T14:29:53Z", "type": "forcePushed"}, {"oid": "319b97a8f7009bd4e6f19f722082c0af03058211", "url": "https://github.com/powsybl/powsybl-core/commit/319b97a8f7009bd4e6f19f722082c0af03058211", "message": "Add a systematic sensitivity test\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>", "committedDate": "2020-03-02T14:40:23Z", "type": "forcePushed"}, {"oid": "2290faa3a04182c0ab25a5d66ca37d6a42946def", "url": "https://github.com/powsybl/powsybl-core/commit/2290faa3a04182c0ab25a5d66ca37d6a42946def", "message": "Refactor the CSV exporter: add tests on contingency results, avoid duplicated code, and fix the getComment function\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>", "committedDate": "2020-03-02T17:02:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcyOTg0NA==", "url": "https://github.com/powsybl/powsybl-core/pull/1155#discussion_r387729844", "bodyText": "add a default implementation to prevent breaking change here", "author": "MioRtia", "createdAt": "2020-03-04T15:12:19Z", "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputation.java", "diffHunk": "@@ -28,12 +29,24 @@\n  */\n public interface SensitivityComputation extends Versionable {\n     /**\n-     * Run an asynchronous sensitivity computation job using given parameters and input provider\n+     * Run an asynchronous systematic sensitivity computation job using given parameters and input provider\n      *\n      * @param factorsProvider sensitivity factors provider for the computation\n+     * @param contingenciesProvider contingencies provider for the computation\n      * @param workingStateId id of the network base state for the computation\n      * @param sensiParameters sensitivity computation parameters\n-     * @return the sensitivity computation results\n+     * @return the sensitivity computation results in N and N-1\n+     */\n+    CompletableFuture<SensitivityComputationResults> run(SensitivityFactorsProvider factorsProvider, ContingenciesProvider contingenciesProvider, String workingStateId, SensitivityComputationParameters sensiParameters);", "originalCommit": "2290faa3a04182c0ab25a5d66ca37d6a42946def", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgyODQxMQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1155#discussion_r388828411", "bodyText": "I had thought of handling that on the implementation side, is it wrong?", "author": "agnesLeroy", "createdAt": "2020-03-06T10:32:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcyOTg0NA=="}], "type": "inlineReview", "revised_code": {"commit": "ddc84f1c9536cbba445a59702db2f3199ff9aee3", "chunk": "diff --git a/sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputation.java b/sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputation.java\nindex 3f83d1900..e6ebca220 100644\n--- a/sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputation.java\n+++ b/sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputation.java\n\n@@ -29,25 +29,25 @@ import java.util.concurrent.CompletableFuture;\n  */\n public interface SensitivityComputation extends Versionable {\n     /**\n-     * Run an asynchronous systematic sensitivity computation job using given parameters and input provider\n+     * Run an asynchronous single sensitivity computation job using given parameters and input provider\n      *\n      * @param factorsProvider sensitivity factors provider for the computation\n-     * @param contingenciesProvider contingencies provider for the computation\n      * @param workingStateId id of the network base state for the computation\n      * @param sensiParameters sensitivity computation parameters\n-     * @return the sensitivity computation results in N and N-1\n+     * @return the sensitivity computation results on the given situation\n      */\n-    CompletableFuture<SensitivityComputationResults> run(SensitivityFactorsProvider factorsProvider, ContingenciesProvider contingenciesProvider, String workingStateId, SensitivityComputationParameters sensiParameters);\n-\n+    CompletableFuture<SensitivityComputationResults> run(SensitivityFactorsProvider factorsProvider, String workingStateId, SensitivityComputationParameters sensiParameters);\n \n     /**\n-     * Run an asynchronous single sensitivity computation job using given parameters and input provider\n+     * Run an asynchronous sensitivity analysis job using given parameters and input provider\n      *\n      * @param factorsProvider sensitivity factors provider for the computation\n+     * @param contingenciesProvider contingencies provider for the computation\n      * @param workingStateId id of the network base state for the computation\n      * @param sensiParameters sensitivity computation parameters\n-     * @return the sensitivity computation results on the given situation\n+     * @return the sensitivity computation results in N and N-1\n      */\n-    CompletableFuture<SensitivityComputationResults> run(SensitivityFactorsProvider factorsProvider, String workingStateId, SensitivityComputationParameters sensiParameters);\n-\n+    default CompletableFuture<SensitivityComputationResults> run(SensitivityFactorsProvider factorsProvider, ContingenciesProvider contingenciesProvider, String workingStateId, SensitivityComputationParameters sensiParameters) {\n+        throw new UnsupportedOperationException(\"Not implemented\");\n+    }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzczNTA4Nw==", "url": "https://github.com/powsybl/powsybl-core/pull/1155#discussion_r387735087", "bodyText": "Not sure having this field is a good idea. It could lead to inconsistent data (e.g. empty contingencies map and contingenciesPresent as true or non-empty contingencies map and contingenciesPresent as false. Why do you need this field? Isn't it enough to check that sensitivityValueContingencies is empty or not?", "author": "MioRtia", "createdAt": "2020-03-04T15:19:46Z", "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java", "diffHunk": "@@ -41,23 +51,34 @@\n     @JsonProperty(\"values\")\n     private final List<SensitivityValue> sensitivityValues;\n \n+    @JsonProperty(\"contingencies present\")\n+    private final boolean contingenciesPresent;", "originalCommit": "2290faa3a04182c0ab25a5d66ca37d6a42946def", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ddc84f1c9536cbba445a59702db2f3199ff9aee3", "chunk": "diff --git a/sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java b/sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java\nindex 5d7cf2d4a..a042a85a0 100644\n--- a/sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java\n+++ b/sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java\n\n@@ -51,10 +51,7 @@ public class SensitivityComputationResults {\n     @JsonProperty(\"values\")\n     private final List<SensitivityValue> sensitivityValues;\n \n-    @JsonProperty(\"contingencies present\")\n-    private final boolean contingenciesPresent;\n-\n-    @JsonProperty(\"contingencies values\")\n+    @JsonProperty(\"contingenciesValues\")\n     private final Map<String, List<SensitivityValue>> sensitivityValuesContingencies;\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzczNjQ2OQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1155#discussion_r387736469", "bodyText": "Same remark as above. This method can return !sensitivityValuesContingencies.isEmpty()", "author": "MioRtia", "createdAt": "2020-03-04T15:21:47Z", "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java", "diffHunk": "@@ -90,61 +111,142 @@ public String getLogs() {\n     }\n \n     /**\n-     * Get a collection of all the sensitivity values.\n+     * Get a collection of all the sensitivity values in state N.\n      *\n-     * @return a collection of all the sensitivity values.\n+     * @return a collection of all the sensitivity values in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValues() {\n         return Collections.unmodifiableCollection(sensitivityValues);\n     }\n \n+\n     /**\n-     * Get a collection of all the sensitivity values associated with given function.\n+     * Get a collection of all the sensitivity values associated with given function in state N.\n      *\n      * @param function sensitivity function\n-     * @return a collection of all the sensitivity values associated with given function\n+     * @return a collection of all the sensitivity values associated with given function in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValuesByFunction(SensitivityFunction function) {\n         return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)).collect(Collectors.toList());\n     }\n \n     /**\n-     * Get a collection of all the sensitivity values associated with given variable\n+     * Get a collection of all the sensitivity values associated with given variable in state N.\n      *\n      * @param variable sensitivity variable\n-     * @return a collection of all the sensitivity values associated with given variable\n+     * @return a collection of all the sensitivity values associated with given variable in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValuesByVariable(SensitivityVariable variable) {\n         return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getVariable().equals(variable)).collect(Collectors.toList());\n     }\n \n     /**\n-     * Get the sensitivity value associated with given function and given variable\n+     * Get the sensitivity value associated with given function and given variable in state N.\n      *\n      * @param function sensitivity function\n      * @param variable sensitivity variable\n-     * @return the sensitivity value associated with given function and given variable\n+     * @return the sensitivity value associated with given function and given variable in state N.\n      */\n     public SensitivityValue getSensitivityValue(SensitivityFunction function, SensitivityVariable variable) {\n         Optional<SensitivityValue> returnValue = sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)\n-            && sensitivityValue.getFactor().getVariable().equals(variable)).findAny();\n+                && sensitivityValue.getFactor().getVariable().equals(variable)).findAny();\n         if (!returnValue.isPresent()) {\n-            throw new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s.\", function.getId(), variable.getId()));\n+            throw new NoSuchElementException(String.format(VALUE_NOT_FOUND, function.getId(), variable.getId()));\n         }\n         return returnValue.get();\n     }\n \n     /**\n-     * Get the sensitivity value associated with given factor\n+     * Get the sensitivity value associated with given factor in state N.\n      *\n      * @param factor sensitivity factor\n-     * @return the sensitivity value associated with given function and given variable\n+     * @return the sensitivity value associated with given function and given variable in state N.\n      */\n     public SensitivityValue getSensitivityValue(SensitivityFactor factor) {\n         Optional<SensitivityValue> returnValue = sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().equals(factor)).findAny();\n         if (!returnValue.isPresent()) {\n-            throw new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s.\", factor.getFunction().getId(), factor.getVariable().getId()));\n+            throw new NoSuchElementException(String.format(VALUE_NOT_FOUND, factor.getFunction().getId(), factor.getVariable().getId()));\n         }\n         return returnValue.get();\n     }\n+\n+    /**\n+     * Get the status of the presence of contingencies\n+     *\n+     * @return true if the computation contains contingencies, false otherwise\n+     */\n+    public boolean contingenciesArePresent() {\n+        return contingenciesPresent;", "originalCommit": "2290faa3a04182c0ab25a5d66ca37d6a42946def", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ddc84f1c9536cbba445a59702db2f3199ff9aee3", "chunk": "diff --git a/sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java b/sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java\nindex 5d7cf2d4a..a042a85a0 100644\n--- a/sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java\n+++ b/sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java\n\n@@ -127,7 +122,8 @@ public class SensitivityComputationResults {\n      * @return a collection of all the sensitivity values associated with given function in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValuesByFunction(SensitivityFunction function) {\n-        return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)).collect(Collectors.toList());\n+        return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function))\n+                .collect(Collectors.toList());\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzczNzI5MQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1155#discussion_r387737291", "bodyText": "Return a copy of the map and not the map itself to prevent unsafe changes:\nreturn Collections.unmodifiableMap(sensitivityValuesContingencies);", "author": "MioRtia", "createdAt": "2020-03-04T15:23:04Z", "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java", "diffHunk": "@@ -90,61 +111,142 @@ public String getLogs() {\n     }\n \n     /**\n-     * Get a collection of all the sensitivity values.\n+     * Get a collection of all the sensitivity values in state N.\n      *\n-     * @return a collection of all the sensitivity values.\n+     * @return a collection of all the sensitivity values in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValues() {\n         return Collections.unmodifiableCollection(sensitivityValues);\n     }\n \n+\n     /**\n-     * Get a collection of all the sensitivity values associated with given function.\n+     * Get a collection of all the sensitivity values associated with given function in state N.\n      *\n      * @param function sensitivity function\n-     * @return a collection of all the sensitivity values associated with given function\n+     * @return a collection of all the sensitivity values associated with given function in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValuesByFunction(SensitivityFunction function) {\n         return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)).collect(Collectors.toList());\n     }\n \n     /**\n-     * Get a collection of all the sensitivity values associated with given variable\n+     * Get a collection of all the sensitivity values associated with given variable in state N.\n      *\n      * @param variable sensitivity variable\n-     * @return a collection of all the sensitivity values associated with given variable\n+     * @return a collection of all the sensitivity values associated with given variable in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValuesByVariable(SensitivityVariable variable) {\n         return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getVariable().equals(variable)).collect(Collectors.toList());\n     }\n \n     /**\n-     * Get the sensitivity value associated with given function and given variable\n+     * Get the sensitivity value associated with given function and given variable in state N.\n      *\n      * @param function sensitivity function\n      * @param variable sensitivity variable\n-     * @return the sensitivity value associated with given function and given variable\n+     * @return the sensitivity value associated with given function and given variable in state N.\n      */\n     public SensitivityValue getSensitivityValue(SensitivityFunction function, SensitivityVariable variable) {\n         Optional<SensitivityValue> returnValue = sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)\n-            && sensitivityValue.getFactor().getVariable().equals(variable)).findAny();\n+                && sensitivityValue.getFactor().getVariable().equals(variable)).findAny();\n         if (!returnValue.isPresent()) {\n-            throw new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s.\", function.getId(), variable.getId()));\n+            throw new NoSuchElementException(String.format(VALUE_NOT_FOUND, function.getId(), variable.getId()));\n         }\n         return returnValue.get();\n     }\n \n     /**\n-     * Get the sensitivity value associated with given factor\n+     * Get the sensitivity value associated with given factor in state N.\n      *\n      * @param factor sensitivity factor\n-     * @return the sensitivity value associated with given function and given variable\n+     * @return the sensitivity value associated with given function and given variable in state N.\n      */\n     public SensitivityValue getSensitivityValue(SensitivityFactor factor) {\n         Optional<SensitivityValue> returnValue = sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().equals(factor)).findAny();\n         if (!returnValue.isPresent()) {\n-            throw new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s.\", factor.getFunction().getId(), factor.getVariable().getId()));\n+            throw new NoSuchElementException(String.format(VALUE_NOT_FOUND, factor.getFunction().getId(), factor.getVariable().getId()));\n         }\n         return returnValue.get();\n     }\n+\n+    /**\n+     * Get the status of the presence of contingencies\n+     *\n+     * @return true if the computation contains contingencies, false otherwise\n+     */\n+    public boolean contingenciesArePresent() {\n+        return contingenciesPresent;\n+    }\n+\n+    /**\n+     * Get a collection of all the sensitivity values for all contingencies.\n+     *\n+     * @return a collection of all the sensitivity values for all contingencies.\n+     */\n+    public Map<String, List<SensitivityValue>> getSensitivityValuesContingencies() {\n+        return sensitivityValuesContingencies;", "originalCommit": "2290faa3a04182c0ab25a5d66ca37d6a42946def", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ddc84f1c9536cbba445a59702db2f3199ff9aee3", "chunk": "diff --git a/sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java b/sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java\nindex 5d7cf2d4a..a042a85a0 100644\n--- a/sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java\n+++ b/sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java\n\n@@ -127,7 +122,8 @@ public class SensitivityComputationResults {\n      * @return a collection of all the sensitivity values associated with given function in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValuesByFunction(SensitivityFunction function) {\n-        return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)).collect(Collectors.toList());\n+        return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function))\n+                .collect(Collectors.toList());\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzczODI4OQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1155#discussion_r387738289", "bodyText": "Don't set directly the map but set as copy to prevent unsafe changes:\nthis.sensitivityValuesContingencies = Collections.unmodifiableMap(sensitivityValuesContingencies);", "author": "MioRtia", "createdAt": "2020-03-04T15:24:31Z", "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java", "diffHunk": "@@ -41,23 +51,34 @@\n     @JsonProperty(\"values\")\n     private final List<SensitivityValue> sensitivityValues;\n \n+    @JsonProperty(\"contingencies present\")\n+    private final boolean contingenciesPresent;\n+\n+    @JsonProperty(\"contingencies values\")\n+    private final Map<String, List<SensitivityValue>> sensitivityValuesContingencies;\n+\n     /**\n      * Hades2 sensitivity computation results\n      *\n      * @param ok true if the computation succeeded, false otherwise\n      * @param metrics map of metrics about the computation\n      * @param logs computation logs\n-     * @param values result values of the senstivity computation. Must be non null.\n+     * @param sensitivityValues result values of the senstivity computation in N\n+     * @param sensitivityValuesContingencies result values of the senstivity computation on contingencies\n      */\n     @JsonCreator\n     public SensitivityComputationResults(@JsonProperty(\"ok\") boolean ok,\n                                          @JsonProperty(\"metrics\") Map<String, String> metrics,\n                                          @JsonProperty(\"logs\") String logs,\n-                                         @JsonProperty(\"values\") List<SensitivityValue> values) {\n+                                         @JsonProperty(\"values\") List<SensitivityValue> sensitivityValues,\n+                                         @JsonProperty(\"contingencies present\") boolean contingenciesPresent,\n+                                         @JsonProperty(\"contingencyId values\") Map<String, List<SensitivityValue>> sensitivityValuesContingencies) {\n         this.ok = ok;\n         this.metrics = Objects.requireNonNull(metrics);\n         this.logs = Objects.requireNonNull(logs);\n-        this.sensitivityValues = Objects.requireNonNull(values);\n+        this.sensitivityValues = Objects.requireNonNull(sensitivityValues);\n+        this.contingenciesPresent = contingenciesPresent;\n+        this.sensitivityValuesContingencies = sensitivityValuesContingencies;", "originalCommit": "2290faa3a04182c0ab25a5d66ca37d6a42946def", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ddc84f1c9536cbba445a59702db2f3199ff9aee3", "chunk": "diff --git a/sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java b/sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java\nindex 5d7cf2d4a..a042a85a0 100644\n--- a/sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java\n+++ b/sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java\n\n@@ -51,10 +51,7 @@ public class SensitivityComputationResults {\n     @JsonProperty(\"values\")\n     private final List<SensitivityValue> sensitivityValues;\n \n-    @JsonProperty(\"contingencies present\")\n-    private final boolean contingenciesPresent;\n-\n-    @JsonProperty(\"contingencies values\")\n+    @JsonProperty(\"contingenciesValues\")\n     private final Map<String, List<SensitivityValue>> sensitivityValuesContingencies;\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzczOTAwMw==", "url": "https://github.com/powsybl/powsybl-core/pull/1155#discussion_r387739003", "bodyText": "Indent to make it more readable:\nsensitivityValuesContingencies.get(contingencyId).stream()\n     .filter(sensitivityValue -> sensitivityValue.getFactor().getVariable().equals(variable))\n     .collect(Collectors.toList());", "author": "MioRtia", "createdAt": "2020-03-04T15:25:28Z", "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java", "diffHunk": "@@ -90,61 +111,142 @@ public String getLogs() {\n     }\n \n     /**\n-     * Get a collection of all the sensitivity values.\n+     * Get a collection of all the sensitivity values in state N.\n      *\n-     * @return a collection of all the sensitivity values.\n+     * @return a collection of all the sensitivity values in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValues() {\n         return Collections.unmodifiableCollection(sensitivityValues);\n     }\n \n+\n     /**\n-     * Get a collection of all the sensitivity values associated with given function.\n+     * Get a collection of all the sensitivity values associated with given function in state N.\n      *\n      * @param function sensitivity function\n-     * @return a collection of all the sensitivity values associated with given function\n+     * @return a collection of all the sensitivity values associated with given function in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValuesByFunction(SensitivityFunction function) {\n         return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)).collect(Collectors.toList());\n     }\n \n     /**\n-     * Get a collection of all the sensitivity values associated with given variable\n+     * Get a collection of all the sensitivity values associated with given variable in state N.\n      *\n      * @param variable sensitivity variable\n-     * @return a collection of all the sensitivity values associated with given variable\n+     * @return a collection of all the sensitivity values associated with given variable in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValuesByVariable(SensitivityVariable variable) {\n         return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getVariable().equals(variable)).collect(Collectors.toList());\n     }\n \n     /**\n-     * Get the sensitivity value associated with given function and given variable\n+     * Get the sensitivity value associated with given function and given variable in state N.\n      *\n      * @param function sensitivity function\n      * @param variable sensitivity variable\n-     * @return the sensitivity value associated with given function and given variable\n+     * @return the sensitivity value associated with given function and given variable in state N.\n      */\n     public SensitivityValue getSensitivityValue(SensitivityFunction function, SensitivityVariable variable) {\n         Optional<SensitivityValue> returnValue = sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)\n-            && sensitivityValue.getFactor().getVariable().equals(variable)).findAny();\n+                && sensitivityValue.getFactor().getVariable().equals(variable)).findAny();\n         if (!returnValue.isPresent()) {\n-            throw new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s.\", function.getId(), variable.getId()));\n+            throw new NoSuchElementException(String.format(VALUE_NOT_FOUND, function.getId(), variable.getId()));\n         }\n         return returnValue.get();\n     }\n \n     /**\n-     * Get the sensitivity value associated with given factor\n+     * Get the sensitivity value associated with given factor in state N.\n      *\n      * @param factor sensitivity factor\n-     * @return the sensitivity value associated with given function and given variable\n+     * @return the sensitivity value associated with given function and given variable in state N.\n      */\n     public SensitivityValue getSensitivityValue(SensitivityFactor factor) {\n         Optional<SensitivityValue> returnValue = sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().equals(factor)).findAny();\n         if (!returnValue.isPresent()) {\n-            throw new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s.\", factor.getFunction().getId(), factor.getVariable().getId()));\n+            throw new NoSuchElementException(String.format(VALUE_NOT_FOUND, factor.getFunction().getId(), factor.getVariable().getId()));\n         }\n         return returnValue.get();\n     }\n+\n+    /**\n+     * Get the status of the presence of contingencies\n+     *\n+     * @return true if the computation contains contingencies, false otherwise\n+     */\n+    public boolean contingenciesArePresent() {\n+        return contingenciesPresent;\n+    }\n+\n+    /**\n+     * Get a collection of all the sensitivity values for all contingencies.\n+     *\n+     * @return a collection of all the sensitivity values for all contingencies.\n+     */\n+    public Map<String, List<SensitivityValue>> getSensitivityValuesContingencies() {\n+        return sensitivityValuesContingencies;\n+    }\n+\n+    /**\n+     * Get a collection of all the sensitivity values associated with given function\n+     * for a specific contingency.\n+     *\n+     * @param function sensitivity function\n+     * @param contingencyId the ID of the considered contingency\n+     * @return a collection of all the sensitivity values associated with given function for the given contingencyId\n+     */\n+    public Collection<SensitivityValue> getSensitivityValuesByFunction(SensitivityFunction function, String contingencyId) {\n+        return sensitivityValuesContingencies.get(contingencyId).stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)).collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * Get a collection of all the sensitivity values associated with given variable\n+     * for a specific contingency.\n+     *\n+     * @param variable sensitivity variable\n+     * @param contingencyId the ID of the considered contingency\n+     * @return a collection of all the sensitivity values associated with given variable\n+     */\n+    public Collection<SensitivityValue> getSensitivityValuesByVariable(SensitivityVariable variable, String contingencyId) {\n+        return sensitivityValuesContingencies.get(contingencyId).stream().filter(sensitivityValue -> sensitivityValue.getFactor().getVariable().equals(variable)).collect(Collectors.toList());\n+    }", "originalCommit": "2290faa3a04182c0ab25a5d66ca37d6a42946def", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ddc84f1c9536cbba445a59702db2f3199ff9aee3", "chunk": "diff --git a/sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java b/sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java\nindex 5d7cf2d4a..a042a85a0 100644\n--- a/sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java\n+++ b/sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java\n\n@@ -127,7 +122,8 @@ public class SensitivityComputationResults {\n      * @return a collection of all the sensitivity values associated with given function in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValuesByFunction(SensitivityFunction function) {\n-        return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)).collect(Collectors.toList());\n+        return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function))\n+                .collect(Collectors.toList());\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc0MDQzNw==", "url": "https://github.com/powsybl/powsybl-core/pull/1155#discussion_r387740437", "bodyText": "You can simplify this code:\nreturn sensitivityValuesContingencies.get(contingencyId).stream()\n    .filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)\n                && sensitivityValue.getFactor().getVariable().equals(variable))\n    .findFirst()\n    .orElseThrow(() -> new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s at contingencyId %s.\", function.getId(), variable.getId(), contingencyId)));", "author": "MioRtia", "createdAt": "2020-03-04T15:27:24Z", "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java", "diffHunk": "@@ -90,61 +111,142 @@ public String getLogs() {\n     }\n \n     /**\n-     * Get a collection of all the sensitivity values.\n+     * Get a collection of all the sensitivity values in state N.\n      *\n-     * @return a collection of all the sensitivity values.\n+     * @return a collection of all the sensitivity values in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValues() {\n         return Collections.unmodifiableCollection(sensitivityValues);\n     }\n \n+\n     /**\n-     * Get a collection of all the sensitivity values associated with given function.\n+     * Get a collection of all the sensitivity values associated with given function in state N.\n      *\n      * @param function sensitivity function\n-     * @return a collection of all the sensitivity values associated with given function\n+     * @return a collection of all the sensitivity values associated with given function in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValuesByFunction(SensitivityFunction function) {\n         return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)).collect(Collectors.toList());\n     }\n \n     /**\n-     * Get a collection of all the sensitivity values associated with given variable\n+     * Get a collection of all the sensitivity values associated with given variable in state N.\n      *\n      * @param variable sensitivity variable\n-     * @return a collection of all the sensitivity values associated with given variable\n+     * @return a collection of all the sensitivity values associated with given variable in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValuesByVariable(SensitivityVariable variable) {\n         return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getVariable().equals(variable)).collect(Collectors.toList());\n     }\n \n     /**\n-     * Get the sensitivity value associated with given function and given variable\n+     * Get the sensitivity value associated with given function and given variable in state N.\n      *\n      * @param function sensitivity function\n      * @param variable sensitivity variable\n-     * @return the sensitivity value associated with given function and given variable\n+     * @return the sensitivity value associated with given function and given variable in state N.\n      */\n     public SensitivityValue getSensitivityValue(SensitivityFunction function, SensitivityVariable variable) {\n         Optional<SensitivityValue> returnValue = sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)\n-            && sensitivityValue.getFactor().getVariable().equals(variable)).findAny();\n+                && sensitivityValue.getFactor().getVariable().equals(variable)).findAny();\n         if (!returnValue.isPresent()) {\n-            throw new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s.\", function.getId(), variable.getId()));\n+            throw new NoSuchElementException(String.format(VALUE_NOT_FOUND, function.getId(), variable.getId()));\n         }\n         return returnValue.get();\n     }\n \n     /**\n-     * Get the sensitivity value associated with given factor\n+     * Get the sensitivity value associated with given factor in state N.\n      *\n      * @param factor sensitivity factor\n-     * @return the sensitivity value associated with given function and given variable\n+     * @return the sensitivity value associated with given function and given variable in state N.\n      */\n     public SensitivityValue getSensitivityValue(SensitivityFactor factor) {\n         Optional<SensitivityValue> returnValue = sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().equals(factor)).findAny();\n         if (!returnValue.isPresent()) {\n-            throw new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s.\", factor.getFunction().getId(), factor.getVariable().getId()));\n+            throw new NoSuchElementException(String.format(VALUE_NOT_FOUND, factor.getFunction().getId(), factor.getVariable().getId()));\n         }\n         return returnValue.get();\n     }\n+\n+    /**\n+     * Get the status of the presence of contingencies\n+     *\n+     * @return true if the computation contains contingencies, false otherwise\n+     */\n+    public boolean contingenciesArePresent() {\n+        return contingenciesPresent;\n+    }\n+\n+    /**\n+     * Get a collection of all the sensitivity values for all contingencies.\n+     *\n+     * @return a collection of all the sensitivity values for all contingencies.\n+     */\n+    public Map<String, List<SensitivityValue>> getSensitivityValuesContingencies() {\n+        return sensitivityValuesContingencies;\n+    }\n+\n+    /**\n+     * Get a collection of all the sensitivity values associated with given function\n+     * for a specific contingency.\n+     *\n+     * @param function sensitivity function\n+     * @param contingencyId the ID of the considered contingency\n+     * @return a collection of all the sensitivity values associated with given function for the given contingencyId\n+     */\n+    public Collection<SensitivityValue> getSensitivityValuesByFunction(SensitivityFunction function, String contingencyId) {\n+        return sensitivityValuesContingencies.get(contingencyId).stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)).collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * Get a collection of all the sensitivity values associated with given variable\n+     * for a specific contingency.\n+     *\n+     * @param variable sensitivity variable\n+     * @param contingencyId the ID of the considered contingency\n+     * @return a collection of all the sensitivity values associated with given variable\n+     */\n+    public Collection<SensitivityValue> getSensitivityValuesByVariable(SensitivityVariable variable, String contingencyId) {\n+        return sensitivityValuesContingencies.get(contingencyId).stream().filter(sensitivityValue -> sensitivityValue.getFactor().getVariable().equals(variable)).collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * Get the sensitivity value associated with given function and given variable for a specific contingency.\n+     *\n+     * @param function sensitivity function\n+     * @param variable sensitivity variable\n+     * @param contingencyId the ID of the considered contingency\n+     * @return the sensitivity value associated with given function and given variable\n+     */\n+    public SensitivityValue getSensitivityValue(SensitivityFunction function, SensitivityVariable variable, String contingencyId) {\n+        Optional<SensitivityValue> returnValue;\n+        returnValue = sensitivityValuesContingencies.get(contingencyId).stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)\n+                && sensitivityValue.getFactor().getVariable().equals(variable)).findAny();\n+        if (!returnValue.isPresent()) {\n+            throw new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s at contingencyId %s.\", function.getId(), variable.getId(), contingencyId));\n+        }\n+        return returnValue.get();", "originalCommit": "2290faa3a04182c0ab25a5d66ca37d6a42946def", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ddc84f1c9536cbba445a59702db2f3199ff9aee3", "chunk": "diff --git a/sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java b/sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java\nindex 5d7cf2d4a..a042a85a0 100644\n--- a/sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java\n+++ b/sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java\n\n@@ -127,7 +122,8 @@ public class SensitivityComputationResults {\n      * @return a collection of all the sensitivity values associated with given function in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValuesByFunction(SensitivityFunction function) {\n-        return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)).collect(Collectors.toList());\n+        return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function))\n+                .collect(Collectors.toList());\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc0MDgyMg==", "url": "https://github.com/powsybl/powsybl-core/pull/1155#discussion_r387740822", "bodyText": "Same as above, this code can be simplified. (Code of other similar methods of this class can be simplified as well)", "author": "MioRtia", "createdAt": "2020-03-04T15:27:54Z", "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java", "diffHunk": "@@ -90,61 +111,142 @@ public String getLogs() {\n     }\n \n     /**\n-     * Get a collection of all the sensitivity values.\n+     * Get a collection of all the sensitivity values in state N.\n      *\n-     * @return a collection of all the sensitivity values.\n+     * @return a collection of all the sensitivity values in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValues() {\n         return Collections.unmodifiableCollection(sensitivityValues);\n     }\n \n+\n     /**\n-     * Get a collection of all the sensitivity values associated with given function.\n+     * Get a collection of all the sensitivity values associated with given function in state N.\n      *\n      * @param function sensitivity function\n-     * @return a collection of all the sensitivity values associated with given function\n+     * @return a collection of all the sensitivity values associated with given function in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValuesByFunction(SensitivityFunction function) {\n         return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)).collect(Collectors.toList());\n     }\n \n     /**\n-     * Get a collection of all the sensitivity values associated with given variable\n+     * Get a collection of all the sensitivity values associated with given variable in state N.\n      *\n      * @param variable sensitivity variable\n-     * @return a collection of all the sensitivity values associated with given variable\n+     * @return a collection of all the sensitivity values associated with given variable in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValuesByVariable(SensitivityVariable variable) {\n         return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getVariable().equals(variable)).collect(Collectors.toList());\n     }\n \n     /**\n-     * Get the sensitivity value associated with given function and given variable\n+     * Get the sensitivity value associated with given function and given variable in state N.\n      *\n      * @param function sensitivity function\n      * @param variable sensitivity variable\n-     * @return the sensitivity value associated with given function and given variable\n+     * @return the sensitivity value associated with given function and given variable in state N.\n      */\n     public SensitivityValue getSensitivityValue(SensitivityFunction function, SensitivityVariable variable) {\n         Optional<SensitivityValue> returnValue = sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)\n-            && sensitivityValue.getFactor().getVariable().equals(variable)).findAny();\n+                && sensitivityValue.getFactor().getVariable().equals(variable)).findAny();\n         if (!returnValue.isPresent()) {\n-            throw new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s.\", function.getId(), variable.getId()));\n+            throw new NoSuchElementException(String.format(VALUE_NOT_FOUND, function.getId(), variable.getId()));\n         }\n         return returnValue.get();\n     }\n \n     /**\n-     * Get the sensitivity value associated with given factor\n+     * Get the sensitivity value associated with given factor in state N.\n      *\n      * @param factor sensitivity factor\n-     * @return the sensitivity value associated with given function and given variable\n+     * @return the sensitivity value associated with given function and given variable in state N.\n      */\n     public SensitivityValue getSensitivityValue(SensitivityFactor factor) {\n         Optional<SensitivityValue> returnValue = sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().equals(factor)).findAny();\n         if (!returnValue.isPresent()) {\n-            throw new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s.\", factor.getFunction().getId(), factor.getVariable().getId()));\n+            throw new NoSuchElementException(String.format(VALUE_NOT_FOUND, factor.getFunction().getId(), factor.getVariable().getId()));\n         }\n         return returnValue.get();\n     }\n+\n+    /**\n+     * Get the status of the presence of contingencies\n+     *\n+     * @return true if the computation contains contingencies, false otherwise\n+     */\n+    public boolean contingenciesArePresent() {\n+        return contingenciesPresent;\n+    }\n+\n+    /**\n+     * Get a collection of all the sensitivity values for all contingencies.\n+     *\n+     * @return a collection of all the sensitivity values for all contingencies.\n+     */\n+    public Map<String, List<SensitivityValue>> getSensitivityValuesContingencies() {\n+        return sensitivityValuesContingencies;\n+    }\n+\n+    /**\n+     * Get a collection of all the sensitivity values associated with given function\n+     * for a specific contingency.\n+     *\n+     * @param function sensitivity function\n+     * @param contingencyId the ID of the considered contingency\n+     * @return a collection of all the sensitivity values associated with given function for the given contingencyId\n+     */\n+    public Collection<SensitivityValue> getSensitivityValuesByFunction(SensitivityFunction function, String contingencyId) {\n+        return sensitivityValuesContingencies.get(contingencyId).stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)).collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * Get a collection of all the sensitivity values associated with given variable\n+     * for a specific contingency.\n+     *\n+     * @param variable sensitivity variable\n+     * @param contingencyId the ID of the considered contingency\n+     * @return a collection of all the sensitivity values associated with given variable\n+     */\n+    public Collection<SensitivityValue> getSensitivityValuesByVariable(SensitivityVariable variable, String contingencyId) {\n+        return sensitivityValuesContingencies.get(contingencyId).stream().filter(sensitivityValue -> sensitivityValue.getFactor().getVariable().equals(variable)).collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * Get the sensitivity value associated with given function and given variable for a specific contingency.\n+     *\n+     * @param function sensitivity function\n+     * @param variable sensitivity variable\n+     * @param contingencyId the ID of the considered contingency\n+     * @return the sensitivity value associated with given function and given variable\n+     */\n+    public SensitivityValue getSensitivityValue(SensitivityFunction function, SensitivityVariable variable, String contingencyId) {\n+        Optional<SensitivityValue> returnValue;\n+        returnValue = sensitivityValuesContingencies.get(contingencyId).stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)\n+                && sensitivityValue.getFactor().getVariable().equals(variable)).findAny();\n+        if (!returnValue.isPresent()) {\n+            throw new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s at contingencyId %s.\", function.getId(), variable.getId(), contingencyId));\n+        }\n+        return returnValue.get();\n+    }\n+\n+    /**\n+     * Get the sensitivity value associated with given factor for a specific contingency\n+     *\n+     * @param factor sensitivity factor\n+     * @param contingencyId the ID of the considered contingency\n+     * @return the sensitivity value associated with given function and given variable\n+     */\n+    public SensitivityValue getSensitivityValue(SensitivityFactor factor, String contingencyId) {\n+        Optional<SensitivityValue> returnValue;\n+        returnValue = sensitivityValuesContingencies.get(contingencyId).stream().filter(sensitivityValue -> sensitivityValue.getFactor().equals(factor)).findAny();\n+        if (!returnValue.isPresent()) {\n+            throw new NoSuchElementException(String.format(VALUE_NOT_FOUND, factor.getFunction().getId(), factor.getVariable().getId()));\n+        }\n+        return returnValue.get();", "originalCommit": "2290faa3a04182c0ab25a5d66ca37d6a42946def", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ddc84f1c9536cbba445a59702db2f3199ff9aee3", "chunk": "diff --git a/sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java b/sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java\nindex 5d7cf2d4a..a042a85a0 100644\n--- a/sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java\n+++ b/sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java\n\n@@ -127,7 +122,8 @@ public class SensitivityComputationResults {\n      * @return a collection of all the sensitivity values associated with given function in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValuesByFunction(SensitivityFunction function) {\n-        return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)).collect(Collectors.toList());\n+        return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function))\n+                .collect(Collectors.toList());\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc0MjcwNg==", "url": "https://github.com/powsybl/powsybl-core/pull/1155#discussion_r387742706", "bodyText": "Don't set directly the list but set as copy to prevent unsafe changes:\nthis.sensitivityValues = Collections.unmodifiableList(Objects.requireNonNull(sensitivityValues));", "author": "MioRtia", "createdAt": "2020-03-04T15:30:09Z", "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java", "diffHunk": "@@ -41,23 +51,34 @@\n     @JsonProperty(\"values\")\n     private final List<SensitivityValue> sensitivityValues;\n \n+    @JsonProperty(\"contingencies present\")\n+    private final boolean contingenciesPresent;\n+\n+    @JsonProperty(\"contingencies values\")\n+    private final Map<String, List<SensitivityValue>> sensitivityValuesContingencies;\n+\n     /**\n      * Hades2 sensitivity computation results\n      *\n      * @param ok true if the computation succeeded, false otherwise\n      * @param metrics map of metrics about the computation\n      * @param logs computation logs\n-     * @param values result values of the senstivity computation. Must be non null.\n+     * @param sensitivityValues result values of the senstivity computation in N\n+     * @param sensitivityValuesContingencies result values of the senstivity computation on contingencies\n      */\n     @JsonCreator\n     public SensitivityComputationResults(@JsonProperty(\"ok\") boolean ok,\n                                          @JsonProperty(\"metrics\") Map<String, String> metrics,\n                                          @JsonProperty(\"logs\") String logs,\n-                                         @JsonProperty(\"values\") List<SensitivityValue> values) {\n+                                         @JsonProperty(\"values\") List<SensitivityValue> sensitivityValues,\n+                                         @JsonProperty(\"contingencies present\") boolean contingenciesPresent,\n+                                         @JsonProperty(\"contingencyId values\") Map<String, List<SensitivityValue>> sensitivityValuesContingencies) {\n         this.ok = ok;\n         this.metrics = Objects.requireNonNull(metrics);\n         this.logs = Objects.requireNonNull(logs);\n-        this.sensitivityValues = Objects.requireNonNull(values);\n+        this.sensitivityValues = Objects.requireNonNull(sensitivityValues);", "originalCommit": "2290faa3a04182c0ab25a5d66ca37d6a42946def", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ddc84f1c9536cbba445a59702db2f3199ff9aee3", "chunk": "diff --git a/sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java b/sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java\nindex 5d7cf2d4a..a042a85a0 100644\n--- a/sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java\n+++ b/sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java\n\n@@ -51,10 +51,7 @@ public class SensitivityComputationResults {\n     @JsonProperty(\"values\")\n     private final List<SensitivityValue> sensitivityValues;\n \n-    @JsonProperty(\"contingencies present\")\n-    private final boolean contingenciesPresent;\n-\n-    @JsonProperty(\"contingencies values\")\n+    @JsonProperty(\"contingenciesValues\")\n     private final Map<String, List<SensitivityValue>> sensitivityValuesContingencies;\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc0NjM1MA==", "url": "https://github.com/powsybl/powsybl-core/pull/1155#discussion_r387746350", "bodyText": "CsvSensitivityComputationResultExporter implements this interface and seems to be able to export a result of a sensitivity computation with contingencies, why is \"without contingency\" specified here?", "author": "MioRtia", "createdAt": "2020-03-04T15:35:10Z", "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/converter/SensitivityComputationResultExporter.java", "diffHunk": "@@ -30,7 +30,7 @@\n     String getComment();\n \n     /**\n-     * Export a result of a sensitivity computation\n+     * Export a result of a sensitivity computation without contingency", "originalCommit": "2290faa3a04182c0ab25a5d66ca37d6a42946def", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ddc84f1c9536cbba445a59702db2f3199ff9aee3", "chunk": "diff --git a/sensitivity-api/src/main/java/com/powsybl/sensitivity/converter/SensitivityComputationResultExporter.java b/sensitivity-api/src/main/java/com/powsybl/sensitivity/converter/SensitivityComputationResultExporter.java\nindex 9f43d4dfa..612855a85 100644\n--- a/sensitivity-api/src/main/java/com/powsybl/sensitivity/converter/SensitivityComputationResultExporter.java\n+++ b/sensitivity-api/src/main/java/com/powsybl/sensitivity/converter/SensitivityComputationResultExporter.java\n\n@@ -30,7 +30,7 @@ public interface SensitivityComputationResultExporter {\n     String getComment();\n \n     /**\n-     * Export a result of a sensitivity computation without contingency\n+     * Export a result of a sensitivity computation\n      *\n      * @param result The result of the sensitivity computation\n      * @param writer The writer used for the export\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc1NDY1OQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1155#discussion_r387754659", "bodyText": "I know that JSON format allows whitespaces in properties but shouldn't we use camel case instead to be consistent with other results serialization?", "author": "MioRtia", "createdAt": "2020-03-04T15:47:03Z", "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java", "diffHunk": "@@ -41,23 +51,34 @@\n     @JsonProperty(\"values\")\n     private final List<SensitivityValue> sensitivityValues;\n \n+    @JsonProperty(\"contingencies present\")\n+    private final boolean contingenciesPresent;\n+\n+    @JsonProperty(\"contingencies values\")", "originalCommit": "2290faa3a04182c0ab25a5d66ca37d6a42946def", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ddc84f1c9536cbba445a59702db2f3199ff9aee3", "chunk": "diff --git a/sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java b/sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java\nindex 5d7cf2d4a..a042a85a0 100644\n--- a/sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java\n+++ b/sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java\n\n@@ -51,10 +51,7 @@ public class SensitivityComputationResults {\n     @JsonProperty(\"values\")\n     private final List<SensitivityValue> sensitivityValues;\n \n-    @JsonProperty(\"contingencies present\")\n-    private final boolean contingenciesPresent;\n-\n-    @JsonProperty(\"contingencies values\")\n+    @JsonProperty(\"contingenciesValues\")\n     private final Map<String, List<SensitivityValue>> sensitivityValuesContingencies;\n \n     /**\n"}}, {"oid": "ddc84f1c9536cbba445a59702db2f3199ff9aee3", "url": "https://github.com/powsybl/powsybl-core/commit/ddc84f1c9536cbba445a59702db2f3199ff9aee3", "message": "Modify some comments\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>", "committedDate": "2020-03-11T10:03:08Z", "type": "forcePushed"}, {"oid": "593f43fd6c965e9b4a77be7cde9e6aa80b1386a0", "url": "https://github.com/powsybl/powsybl-core/commit/593f43fd6c965e9b4a77be7cde9e6aa80b1386a0", "message": "Modify some comments\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>", "committedDate": "2020-03-12T16:01:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzExNDQyOQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1155#discussion_r393114429", "bodyText": "Perhaps it could be good to create a constant just like VALUE_NOT_FOUND for the message", "author": "murgeyseb", "createdAt": "2020-03-16T15:35:08Z", "path": "sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java", "diffHunk": "@@ -89,61 +105,144 @@ public String getLogs() {\n     }\n \n     /**\n-     * Get a collection of all the sensitivity values.\n+     * Get a collection of all the sensitivity values in state N.\n      *\n-     * @return a collection of all the sensitivity values.\n+     * @return a collection of all the sensitivity values in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValues() {\n         return Collections.unmodifiableCollection(sensitivityValues);\n     }\n \n+\n     /**\n-     * Get a collection of all the sensitivity values associated with given function.\n+     * Get a collection of all the sensitivity values associated with given function in state N.\n      *\n      * @param function sensitivity function\n-     * @return a collection of all the sensitivity values associated with given function\n+     * @return a collection of all the sensitivity values associated with given function in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValuesByFunction(SensitivityFunction function) {\n-        return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)).collect(Collectors.toList());\n+        return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function))\n+                .collect(Collectors.toList());\n     }\n \n     /**\n-     * Get a collection of all the sensitivity values associated with given variable\n+     * Get a collection of all the sensitivity values associated with given variable in state N.\n      *\n      * @param variable sensitivity variable\n-     * @return a collection of all the sensitivity values associated with given variable\n+     * @return a collection of all the sensitivity values associated with given variable in state N.\n      */\n     public Collection<SensitivityValue> getSensitivityValuesByVariable(SensitivityVariable variable) {\n-        return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getVariable().equals(variable)).collect(Collectors.toList());\n+        return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getVariable().equals(variable))\n+                .collect(Collectors.toList());\n     }\n \n     /**\n-     * Get the sensitivity value associated with given function and given variable\n+     * Get the sensitivity value associated with given function and given variable in state N.\n      *\n      * @param function sensitivity function\n      * @param variable sensitivity variable\n-     * @return the sensitivity value associated with given function and given variable\n+     * @return the sensitivity value associated with given function and given variable in state N.\n      */\n     public SensitivityValue getSensitivityValue(SensitivityFunction function, SensitivityVariable variable) {\n         Optional<SensitivityValue> returnValue = sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)\n-            && sensitivityValue.getFactor().getVariable().equals(variable)).findAny();\n+                && sensitivityValue.getFactor().getVariable().equals(variable)).findAny();\n         if (!returnValue.isPresent()) {\n-            throw new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s.\", function.getId(), variable.getId()));\n+            throw new NoSuchElementException(String.format(VALUE_NOT_FOUND, function.getId(), variable.getId()));\n         }\n         return returnValue.get();\n     }\n \n     /**\n-     * Get the sensitivity value associated with given factor\n+     * Get the sensitivity value associated with given factor in state N.\n      *\n      * @param factor sensitivity factor\n-     * @return the sensitivity value associated with given function and given variable\n+     * @return the sensitivity value associated with given function and given variable in state N.\n      */\n     public SensitivityValue getSensitivityValue(SensitivityFactor factor) {\n         Optional<SensitivityValue> returnValue = sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().equals(factor)).findAny();\n         if (!returnValue.isPresent()) {\n-            throw new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s.\", factor.getFunction().getId(), factor.getVariable().getId()));\n+            throw new NoSuchElementException(String.format(VALUE_NOT_FOUND, factor.getFunction().getId(), factor.getVariable().getId()));\n         }\n         return returnValue.get();\n     }\n+\n+    /**\n+     * Get the status of the presence of contingencies\n+     *\n+     * @return true if the computation contains contingencies, false otherwise\n+     */\n+    public boolean contingenciesArePresent() {\n+        return !sensitivityValuesContingencies.isEmpty();\n+    }\n+\n+    /**\n+     * Get a collection of all the sensitivity values for all contingencies.\n+     *\n+     * @return a collection of all the sensitivity values for all contingencies.\n+     */\n+    public Map<String, List<SensitivityValue>> getSensitivityValuesContingencies() {\n+        return Collections.unmodifiableMap(sensitivityValuesContingencies);\n+    }\n+\n+    /**\n+     * Get a collection of all the sensitivity values associated with given function\n+     * for a specific contingency.\n+     *\n+     * @param function sensitivity function\n+     * @param contingencyId the ID of the considered contingency\n+     * @return a collection of all the sensitivity values associated with given function for the given contingencyId\n+     */\n+    public Collection<SensitivityValue> getSensitivityValuesByFunction(SensitivityFunction function, String contingencyId) {\n+        return sensitivityValuesContingencies.get(contingencyId).stream()\n+                .filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function))\n+                .collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * Get a collection of all the sensitivity values associated with given variable\n+     * for a specific contingency.\n+     *\n+     * @param variable sensitivity variable\n+     * @param contingencyId the ID of the considered contingency\n+     * @return a collection of all the sensitivity values associated with given variable\n+     */\n+    public Collection<SensitivityValue> getSensitivityValuesByVariable(SensitivityVariable variable, String contingencyId) {\n+        return sensitivityValuesContingencies.get(contingencyId).stream()\n+                .filter(sensitivityValue -> sensitivityValue.getFactor().getVariable().equals(variable))\n+                .collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * Get the sensitivity value associated with given function and given variable for a specific contingency.\n+     *\n+     * @param function sensitivity function\n+     * @param variable sensitivity variable\n+     * @param contingencyId the ID of the considered contingency\n+     * @return the sensitivity value associated with given function and given variable\n+     */\n+    public SensitivityValue getSensitivityValue(SensitivityFunction function, SensitivityVariable variable, String contingencyId) {\n+        return sensitivityValuesContingencies.get(contingencyId).stream()\n+                .filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)\n+                        && sensitivityValue.getFactor().getVariable().equals(variable))\n+                .findFirst()\n+                .orElseThrow(() -> new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s at contingencyId %s.\", function.getId(), variable.getId(), contingencyId)));", "originalCommit": "593f43fd6c965e9b4a77be7cde9e6aa80b1386a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzEzNzgxMA==", "url": "https://github.com/powsybl/powsybl-core/pull/1155#discussion_r393137810", "bodyText": "Done", "author": "agnesLeroy", "createdAt": "2020-03-16T16:08:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzExNDQyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "a4d4a3657ef7260e956e51f31270b6ccb1eb34df", "chunk": "diff --git a/sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java b/sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java\nindex 1828f6a42..cb80c9884 100644\n--- a/sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java\n+++ b/sensitivity-api/src/main/java/com/powsybl/sensitivity/SensitivityComputationResults.java\n\n@@ -105,144 +89,61 @@ public class SensitivityComputationResults {\n     }\n \n     /**\n-     * Get a collection of all the sensitivity values in state N.\n+     * Get a collection of all the sensitivity values.\n      *\n-     * @return a collection of all the sensitivity values in state N.\n+     * @return a collection of all the sensitivity values.\n      */\n     public Collection<SensitivityValue> getSensitivityValues() {\n         return Collections.unmodifiableCollection(sensitivityValues);\n     }\n \n-\n     /**\n-     * Get a collection of all the sensitivity values associated with given function in state N.\n+     * Get a collection of all the sensitivity values associated with given function.\n      *\n      * @param function sensitivity function\n-     * @return a collection of all the sensitivity values associated with given function in state N.\n+     * @return a collection of all the sensitivity values associated with given function\n      */\n     public Collection<SensitivityValue> getSensitivityValuesByFunction(SensitivityFunction function) {\n-        return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function))\n-                .collect(Collectors.toList());\n+        return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)).collect(Collectors.toList());\n     }\n \n     /**\n-     * Get a collection of all the sensitivity values associated with given variable in state N.\n+     * Get a collection of all the sensitivity values associated with given variable\n      *\n      * @param variable sensitivity variable\n-     * @return a collection of all the sensitivity values associated with given variable in state N.\n+     * @return a collection of all the sensitivity values associated with given variable\n      */\n     public Collection<SensitivityValue> getSensitivityValuesByVariable(SensitivityVariable variable) {\n-        return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getVariable().equals(variable))\n-                .collect(Collectors.toList());\n+        return sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getVariable().equals(variable)).collect(Collectors.toList());\n     }\n \n     /**\n-     * Get the sensitivity value associated with given function and given variable in state N.\n+     * Get the sensitivity value associated with given function and given variable\n      *\n      * @param function sensitivity function\n      * @param variable sensitivity variable\n-     * @return the sensitivity value associated with given function and given variable in state N.\n+     * @return the sensitivity value associated with given function and given variable\n      */\n     public SensitivityValue getSensitivityValue(SensitivityFunction function, SensitivityVariable variable) {\n         Optional<SensitivityValue> returnValue = sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)\n-                && sensitivityValue.getFactor().getVariable().equals(variable)).findAny();\n+            && sensitivityValue.getFactor().getVariable().equals(variable)).findAny();\n         if (!returnValue.isPresent()) {\n-            throw new NoSuchElementException(String.format(VALUE_NOT_FOUND, function.getId(), variable.getId()));\n+            throw new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s.\", function.getId(), variable.getId()));\n         }\n         return returnValue.get();\n     }\n \n     /**\n-     * Get the sensitivity value associated with given factor in state N.\n+     * Get the sensitivity value associated with given factor\n      *\n      * @param factor sensitivity factor\n-     * @return the sensitivity value associated with given function and given variable in state N.\n+     * @return the sensitivity value associated with given function and given variable\n      */\n     public SensitivityValue getSensitivityValue(SensitivityFactor factor) {\n         Optional<SensitivityValue> returnValue = sensitivityValues.stream().filter(sensitivityValue -> sensitivityValue.getFactor().equals(factor)).findAny();\n         if (!returnValue.isPresent()) {\n-            throw new NoSuchElementException(String.format(VALUE_NOT_FOUND, factor.getFunction().getId(), factor.getVariable().getId()));\n+            throw new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s.\", factor.getFunction().getId(), factor.getVariable().getId()));\n         }\n         return returnValue.get();\n     }\n-\n-    /**\n-     * Get the status of the presence of contingencies\n-     *\n-     * @return true if the computation contains contingencies, false otherwise\n-     */\n-    public boolean contingenciesArePresent() {\n-        return !sensitivityValuesContingencies.isEmpty();\n-    }\n-\n-    /**\n-     * Get a collection of all the sensitivity values for all contingencies.\n-     *\n-     * @return a collection of all the sensitivity values for all contingencies.\n-     */\n-    public Map<String, List<SensitivityValue>> getSensitivityValuesContingencies() {\n-        return Collections.unmodifiableMap(sensitivityValuesContingencies);\n-    }\n-\n-    /**\n-     * Get a collection of all the sensitivity values associated with given function\n-     * for a specific contingency.\n-     *\n-     * @param function sensitivity function\n-     * @param contingencyId the ID of the considered contingency\n-     * @return a collection of all the sensitivity values associated with given function for the given contingencyId\n-     */\n-    public Collection<SensitivityValue> getSensitivityValuesByFunction(SensitivityFunction function, String contingencyId) {\n-        return sensitivityValuesContingencies.get(contingencyId).stream()\n-                .filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function))\n-                .collect(Collectors.toList());\n-    }\n-\n-    /**\n-     * Get a collection of all the sensitivity values associated with given variable\n-     * for a specific contingency.\n-     *\n-     * @param variable sensitivity variable\n-     * @param contingencyId the ID of the considered contingency\n-     * @return a collection of all the sensitivity values associated with given variable\n-     */\n-    public Collection<SensitivityValue> getSensitivityValuesByVariable(SensitivityVariable variable, String contingencyId) {\n-        return sensitivityValuesContingencies.get(contingencyId).stream()\n-                .filter(sensitivityValue -> sensitivityValue.getFactor().getVariable().equals(variable))\n-                .collect(Collectors.toList());\n-    }\n-\n-    /**\n-     * Get the sensitivity value associated with given function and given variable for a specific contingency.\n-     *\n-     * @param function sensitivity function\n-     * @param variable sensitivity variable\n-     * @param contingencyId the ID of the considered contingency\n-     * @return the sensitivity value associated with given function and given variable\n-     */\n-    public SensitivityValue getSensitivityValue(SensitivityFunction function, SensitivityVariable variable, String contingencyId) {\n-        return sensitivityValuesContingencies.get(contingencyId).stream()\n-                .filter(sensitivityValue -> sensitivityValue.getFactor().getFunction().equals(function)\n-                        && sensitivityValue.getFactor().getVariable().equals(variable))\n-                .findFirst()\n-                .orElseThrow(() -> new NoSuchElementException(String.format(\"Sensitivity value not found for function %s and variable %s at contingencyId %s.\", function.getId(), variable.getId(), contingencyId)));\n-    }\n-\n-    /**\n-     * Get the sensitivity value associated with given factor for a specific contingency\n-     *\n-     * @param factor sensitivity factor\n-     * @param contingencyId the ID of the considered contingency\n-     * @return the sensitivity value associated with given function and given variable\n-     */\n-    public SensitivityValue getSensitivityValue(SensitivityFactor factor, String contingencyId) {\n-        return sensitivityValuesContingencies.get(contingencyId).stream()\n-                .filter(sensitivityValue -> sensitivityValue.getFactor().equals(factor))\n-                .findFirst()\n-                .orElseThrow(() -> new NoSuchElementException(String.format(VALUE_NOT_FOUND, factor.getFunction().getId(), factor.getVariable().getId())));\n-    }\n-\n-    public static SensitivityComputationResults empty() {\n-        return new SensitivityComputationResults(false, Collections.emptyMap(), \"\", Collections.emptyList(), Collections.emptyMap());\n-    }\n }\n"}}, {"oid": "a4d4a3657ef7260e956e51f31270b6ccb1eb34df", "url": "https://github.com/powsybl/powsybl-core/commit/a4d4a3657ef7260e956e51f31270b6ccb1eb34df", "message": "Add a list of contingencies as an argument of the sensitivity computation\n\n- This makes it possible to run systematic sensitivity calculations with Hades2\n- We should probably consider modifying the sensitivity API so that it really\n  gives access to a single sensitivity computation, while creating a systematic-sensitivity-api to include\n  a security-analysis-like systematic sensitivity.\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>", "committedDate": "2020-03-19T14:39:18Z", "type": "commit"}, {"oid": "0b9c1462954c0553c939dd4aaf9d387f935879a2", "url": "https://github.com/powsybl/powsybl-core/commit/0b9c1462954c0553c939dd4aaf9d387f935879a2", "message": "Modify the sensitivity results to output the sensitivity values for each contingency\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>", "committedDate": "2020-03-19T14:39:18Z", "type": "commit"}, {"oid": "00309b69caeae1e32edd29cc47ea4a77eee18e85", "url": "https://github.com/powsybl/powsybl-core/commit/00309b69caeae1e32edd29cc47ea4a77eee18e85", "message": "Add systematic sensitivity tests and remove code smells\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>", "committedDate": "2020-03-19T14:39:18Z", "type": "commit"}, {"oid": "37117567e60b640577a838437fda7d95dfb73dd2", "url": "https://github.com/powsybl/powsybl-core/commit/37117567e60b640577a838437fda7d95dfb73dd2", "message": "Refactor the CSV exporter: add tests on contingency results, avoid duplicated code, and fix the getComment function\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>", "committedDate": "2020-03-19T14:39:18Z", "type": "commit"}, {"oid": "94bb33dad37c71ea5914cc70081983297b495d0c", "url": "https://github.com/powsybl/powsybl-core/commit/94bb33dad37c71ea5914cc70081983297b495d0c", "message": "Fixes based on Miora's review\n\n- Fix pom file\n- Remove useless boolean attribute contingenciesPresent from SensitivityComputationResults\n- Fix JSON parameter case\n- Prevent unsafe changes on sensitivityValues and sensitivityValuesContingencies\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>", "committedDate": "2020-03-19T14:39:18Z", "type": "commit"}, {"oid": "9d41c71c638322b800bc69938cc241b1970cbdf8", "url": "https://github.com/powsybl/powsybl-core/commit/9d41c71c638322b800bc69938cc241b1970cbdf8", "message": "Add default implementation for the sensitivity run with contingencies to avoid introducing a breaking change\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>", "committedDate": "2020-03-19T14:39:18Z", "type": "commit"}, {"oid": "05ea7fd5a6434323b5f0de75625748cd1ca19535", "url": "https://github.com/powsybl/powsybl-core/commit/05ea7fd5a6434323b5f0de75625748cd1ca19535", "message": "Modify some comments\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>", "committedDate": "2020-03-19T14:39:19Z", "type": "commit"}, {"oid": "7a97cdc59c9b291e05408722e5c959d512a01405", "url": "https://github.com/powsybl/powsybl-core/commit/7a97cdc59c9b291e05408722e5c959d512a01405", "message": "Create variable for error message\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>", "committedDate": "2020-03-19T14:39:19Z", "type": "commit"}, {"oid": "7a97cdc59c9b291e05408722e5c959d512a01405", "url": "https://github.com/powsybl/powsybl-core/commit/7a97cdc59c9b291e05408722e5c959d512a01405", "message": "Create variable for error message\n\nSigned-off-by: Agn\u00e8s Leroy <agnes.leroy@rte-france.com>", "committedDate": "2020-03-19T14:39:19Z", "type": "forcePushed"}]}