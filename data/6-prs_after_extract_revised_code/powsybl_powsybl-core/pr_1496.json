{"pr_number": 1496, "pr_title": "[IIDM] Allow to reuse DanglingLineAdder twice", "pr_createdAt": "2020-10-02T09:56:11Z", "pr_url": "https://github.com/powsybl/powsybl-core/pull/1496", "timeline": [{"oid": "eed42ce51c8d142b0ec12b3146bf509b6619b982", "url": "https://github.com/powsybl/powsybl-core/commit/eed42ce51c8d142b0ec12b3146bf509b6619b982", "message": "Build new Generation if needed on each DanglingLineAdder.add\n\nSigned-off-by: Thomas ADAM <tadam@silicom.fr>", "committedDate": "2020-10-02T09:37:49Z", "type": "commit"}, {"oid": "7a227bf9e4383b76a8d70da6bb9972d955cc313b", "url": "https://github.com/powsybl/powsybl-core/commit/7a227bf9e4383b76a8d70da6bb9972d955cc313b", "message": "Rebuild\n\nSigned-off-by: Thomas ADAM <tadam@silicom.fr>", "committedDate": "2020-10-02T15:15:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM4MjUwNA==", "url": "https://github.com/powsybl/powsybl-core/pull/1496#discussion_r499382504", "bodyText": "assertNotSame? Both could be equal (you're lucky because of the default implementation, but I could consider two generations equals if the have the same characteristics, but not attached to the same danglingLine).", "author": "mathbagu", "createdAt": "2020-10-05T07:08:01Z", "path": "iidm/iidm-tck/src/test/java/com/powsybl/iidm/network/tck/AbstractDanglingLineTest.java", "diffHunk": "@@ -274,6 +274,10 @@ public void withRegulatingCapabilityTests() {\n                 .add();\n         assertNotNull(generation.getReactiveLimits());\n         assertTrue(generation.getReactiveLimits() instanceof MinMaxReactiveLimits);\n+\n+        // Test if new Generation is instantiate at each add\n+        DanglingLine dl2 = adder.setId(id + \"_2\").add();\n+        assertNotEquals(dl.getGeneration(), dl2.getGeneration());", "originalCommit": "7a227bf9e4383b76a8d70da6bb9972d955cc313b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "32fdc3479e89b26e7c5fa36d96a885bae3c2cbd0", "chunk": "diff --git a/iidm/iidm-tck/src/test/java/com/powsybl/iidm/network/tck/AbstractDanglingLineTest.java b/iidm/iidm-tck/src/test/java/com/powsybl/iidm/network/tck/AbstractDanglingLineTest.java\nindex c4ddcd623..a1078af85 100644\n--- a/iidm/iidm-tck/src/test/java/com/powsybl/iidm/network/tck/AbstractDanglingLineTest.java\n+++ b/iidm/iidm-tck/src/test/java/com/powsybl/iidm/network/tck/AbstractDanglingLineTest.java\n\n@@ -277,7 +277,7 @@ public abstract class AbstractDanglingLineTest {\n \n         // Test if new Generation is instantiate at each add\n         DanglingLine dl2 = adder.setId(id + \"_2\").add();\n-        assertNotEquals(dl.getGeneration(), dl2.getGeneration());\n+        assertNotSame(dl.getGeneration(), dl2.getGeneration());\n     }\n \n     private void createDanglingLine(String id, String name, double r, double x, double g, double b,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM4MzEyMA==", "url": "https://github.com/powsybl/powsybl-core/pull/1496#discussion_r499383120", "bodyText": "This is arguable: I think we should keep the tests here: It's not possible to update the GenerationAdder after you have called the add(). So you should be noticed that it's not complete when we consider it should be fully completed.\n@MioRtia @tadam50 What do you think?", "author": "mathbagu", "createdAt": "2020-10-05T07:09:27Z", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineAdderImpl.java", "diffHunk": "@@ -64,10 +64,6 @@ public GenerationAdder setTargetV(double targetV) {\n \n         @Override\n         public DanglingLineAdder add() {\n-            ValidationUtil.checkActivePowerLimits(DanglingLineAdderImpl.this, minP, maxP);\n-            ValidationUtil.checkActivePowerSetpoint(DanglingLineAdderImpl.this, targetP);\n-            ValidationUtil.checkVoltageControl(DanglingLineAdderImpl.this, voltageRegulationOn, targetV, targetQ);", "originalCommit": "7a227bf9e4383b76a8d70da6bb9972d955cc313b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM5NjkxMA==", "url": "https://github.com/powsybl/powsybl-core/pull/1496#discussion_r499396910", "bodyText": "My mistake. I'm agree with you. I think validation checks must be done as soon as possible.", "author": "tadam50", "createdAt": "2020-10-05T07:39:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM4MzEyMA=="}], "type": "inlineReview", "revised_code": {"commit": "32fdc3479e89b26e7c5fa36d96a885bae3c2cbd0", "chunk": "diff --git a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineAdderImpl.java b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineAdderImpl.java\nindex f58036a21..909409ae8 100644\n--- a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineAdderImpl.java\n+++ b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineAdderImpl.java\n\n@@ -64,6 +64,9 @@ class DanglingLineAdderImpl extends AbstractInjectionAdder<DanglingLineAdderImpl\n \n         @Override\n         public DanglingLineAdder add() {\n+            ValidationUtil.checkActivePowerLimits(DanglingLineAdderImpl.this, minP, maxP);\n+            ValidationUtil.checkActivePowerSetpoint(DanglingLineAdderImpl.this, targetP);\n+            ValidationUtil.checkVoltageControl(DanglingLineAdderImpl.this, voltageRegulationOn, targetV, targetQ);\n             return DanglingLineAdderImpl.this;\n         }\n     }\n"}}, {"oid": "32fdc3479e89b26e7c5fa36d96a885bae3c2cbd0", "url": "https://github.com/powsybl/powsybl-core/commit/32fdc3479e89b26e7c5fa36d96a885bae3c2cbd0", "message": "Taking PR remarks into account\n\nSigned-off-by: Thomas ADAM <tadam@silicom.fr>", "committedDate": "2020-10-05T07:43:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ1ODk2Mw==", "url": "https://github.com/powsybl/powsybl-core/pull/1496#discussion_r502458963", "bodyText": "not sure this is correct: I would write\nreturn new GenerationAdderImpl(this);\n\nAnd in the GenerationAdder::add method, I would set the generationAdder of the parent. I don't know if it changes something, but it's seems better to me that the DanglingLineAdder is modified only once the GenerationAdder has been filled.", "author": "mathbagu", "createdAt": "2020-10-09T14:17:04Z", "path": "iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineAdderImpl.java", "diffHunk": "@@ -148,7 +147,8 @@ public DanglingLineAdder setUcteXnodeCode(String ucteXnodeCode) {\n \n     @Override\n     public GenerationAdder newGeneration() {\n-        return new GenerationAdderImpl();\n+        generationAdder = new GenerationAdderImpl();\n+        return generationAdder;", "originalCommit": "32fdc3479e89b26e7c5fa36d96a885bae3c2cbd0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ4NTA5OA==", "url": "https://github.com/powsybl/powsybl-core/pull/1496#discussion_r502485098", "bodyText": "Regarding what you did for three windings transformers, it's coherent", "author": "mathbagu", "createdAt": "2020-10-09T14:52:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ1ODk2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzEzNjk4NQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1496#discussion_r503136985", "bodyText": "Indeed, set the generationAdder in GenerationAdder::add, after validity checks, seems a better solution.\nDanglingLineAdder will be set only with a GenerationAdder well filled", "author": "tadam50", "createdAt": "2020-10-12T08:48:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ1ODk2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "1badc5ce3474106b6b4aacf8ce0e02e8cb4436e2", "chunk": "diff --git a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineAdderImpl.java b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineAdderImpl.java\nindex 909409ae8..215c5d9d4 100644\n--- a/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineAdderImpl.java\n+++ b/iidm/iidm-impl/src/main/java/com/powsybl/iidm/network/impl/DanglingLineAdderImpl.java\n\n@@ -147,8 +148,7 @@ class DanglingLineAdderImpl extends AbstractInjectionAdder<DanglingLineAdderImpl\n \n     @Override\n     public GenerationAdder newGeneration() {\n-        generationAdder = new GenerationAdderImpl();\n-        return generationAdder;\n+        return new GenerationAdderImpl();\n     }\n \n     @Override\n"}}, {"oid": "1badc5ce3474106b6b4aacf8ce0e02e8cb4436e2", "url": "https://github.com/powsybl/powsybl-core/commit/1badc5ce3474106b6b4aacf8ce0e02e8cb4436e2", "message": "Move internal adder set into add method\n\nSigned-off-by: Thomas ADAM <tadam@silicom.fr>", "committedDate": "2020-10-13T08:21:31Z", "type": "commit"}, {"oid": "d3a211954ea01bd84452cba6a581e92e2887e160", "url": "https://github.com/powsybl/powsybl-core/commit/d3a211954ea01bd84452cba6a581e92e2887e160", "message": "Merge branch 'master' into issue_1489_danglinglines", "committedDate": "2020-10-15T08:11:49Z", "type": "commit"}]}