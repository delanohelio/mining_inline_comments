{"pr_number": 1119, "pr_title": "Allow to choose the name of the default iidm implementation instead o\u2026", "pr_createdAt": "2020-01-17T16:45:51Z", "pr_url": "https://github.com/powsybl/powsybl-core/pull/1119", "timeline": [{"oid": "2a90376f4ecf4c65f4312bd62897b0d1c54ee26a", "url": "https://github.com/powsybl/powsybl-core/commit/2a90376f4ecf4c65f4312bd62897b0d1c54ee26a", "message": "Allow to choose the name of the default iidm implementation instead of the hardcoded 'Default'\n\nSigned-off-by: Jon Harper <jon.harper87@gmail.com>", "committedDate": "2020-01-20T10:13:51Z", "type": "forcePushed"}, {"oid": "ab5b04db69a309c4af54648cbe6d66aeb88045b6", "url": "https://github.com/powsybl/powsybl-core/commit/ab5b04db69a309c4af54648cbe6d66aeb88045b6", "message": "Allow to choose the name of the default iidm implementation instead of the hardcoded 'Default'\n\nSigned-off-by: Jon Harper <jon.harper87@gmail.com>", "committedDate": "2020-01-20T10:48:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUxMjAwOQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1119#discussion_r368512009", "bodyText": "Should you name the property default? Isn't impl more understandable for example?", "author": "MioRtia", "createdAt": "2020-01-20T12:01:27Z", "path": "iidm/iidm-api/src/main/java/com/powsybl/iidm/network/NetworkFactory.java", "diffHunk": "@@ -47,7 +48,11 @@ static NetworkFactory find(String name) {\n      * @return default {@code NetworkFactory} instance.\n      */\n     static NetworkFactory findDefault() {\n-        return find(NetworkFactoryConstants.DEFAULT);\n+        String defaultName = PlatformConfig.defaultConfig()\n+                .getOptionalModuleConfig(\"iidm\")\n+                .map(module -> module.getStringProperty(\"default\"))", "originalCommit": "ab5b04db69a309c4af54648cbe6d66aeb88045b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUxNjIyNg==", "url": "https://github.com/powsybl/powsybl-core/pull/1119#discussion_r368516226", "bodyText": "I chose this to be consistent with the loadflow.default configuration", "author": "jonenst", "createdAt": "2020-01-20T12:12:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUxMjAwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUyODMzMw==", "url": "https://github.com/powsybl/powsybl-core/pull/1119#discussion_r368528333", "bodyText": "As we known that IIDM \"branding\" should one day disappear and just call it \"the powsybl network model\", I would have named it:\nnetwork:\n    default-impl-name: xxx", "author": "geofjamg", "createdAt": "2020-01-20T12:43:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUxMjAwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU1NTIxOQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1119#discussion_r368555219", "bodyText": "network-model:\n   default: xxx\n?\nIf we use default-impl-name, we should update the loadflow.default config for consistency", "author": "jonenst", "createdAt": "2020-01-20T13:46:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUxMjAwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg3OTU0Ng==", "url": "https://github.com/powsybl/powsybl-core/pull/1119#discussion_r368879546", "bodyText": "I actually prefer @geofjamg's proposition, given than we will then update the loadflow config names to be consistent.", "author": "miovd", "createdAt": "2020-01-21T09:05:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUxMjAwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "9282c351384560e71efc8532a3bc5f3894bde1c1", "chunk": "diff --git a/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/NetworkFactory.java b/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/NetworkFactory.java\nindex e2d61c101..a3a76a2e5 100644\n--- a/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/NetworkFactory.java\n+++ b/iidm/iidm-api/src/main/java/com/powsybl/iidm/network/NetworkFactory.java\n\n@@ -48,11 +43,7 @@ public interface NetworkFactory {\n      * @return default {@code NetworkFactory} instance.\n      */\n     static NetworkFactory findDefault() {\n-        String defaultName = PlatformConfig.defaultConfig()\n-                .getOptionalModuleConfig(\"iidm\")\n-                .map(module -> module.getStringProperty(\"default\"))\n-                .orElse(NetworkFactoryConstants.DEFAULT);\n-        return find(defaultName);\n+        return find(null);\n     }\n \n     /**\n"}}, {"oid": "5e09f090d4552230704f21c5acbc53dbdea94194", "url": "https://github.com/powsybl/powsybl-core/commit/5e09f090d4552230704f21c5acbc53dbdea94194", "message": "Allow to choose the name of the default iidm implementation instead of the hardcoded 'Default'\n\nSigned-off-by: Jon Harper <jon.harper87@gmail.com>", "committedDate": "2020-01-20T12:12:48Z", "type": "forcePushed"}, {"oid": "9282c351384560e71efc8532a3bc5f3894bde1c1", "url": "https://github.com/powsybl/powsybl-core/commit/9282c351384560e71efc8532a3bc5f3894bde1c1", "message": "Move the providers static variables inside the PlatformConfigNameProvider class\n\nSigned-off-by: Jon Harper <jon.harper87@gmail.com>", "committedDate": "2020-01-24T19:00:51Z", "type": "forcePushed"}, {"oid": "5c823d4dcd9f5ed4b198f56ab3c0ee6fd972df8f", "url": "https://github.com/powsybl/powsybl-core/commit/5c823d4dcd9f5ed4b198f56ab3c0ee6fd972df8f", "message": "Move the providers static variables inside the PlatformConfigNameProvider class\n\nSigned-off-by: Jon Harper <jon.harper87@gmail.com>", "committedDate": "2020-01-27T10:05:07Z", "type": "forcePushed"}, {"oid": "1547f3c98d175653101252c17b26c97231df6741", "url": "https://github.com/powsybl/powsybl-core/commit/1547f3c98d175653101252c17b26c97231df6741", "message": "Move the providers static variables inside the PlatformConfigNameProvider class\n\nSigned-off-by: Jon Harper <jon.harper87@gmail.com>", "committedDate": "2020-01-27T11:58:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI0NjA3Mw==", "url": "https://github.com/powsybl/powsybl-core/pull/1119#discussion_r371246073", "bodyText": "Not sure I understand how this method is different from getName()? It is never overriden in the code, is it? In which case would it be overriden?", "author": "MioRtia", "createdAt": "2020-01-27T13:44:18Z", "path": "commons/src/main/java/com/powsybl/commons/config/PlatformConfigNamedProvider.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.config;\n+\n+import com.google.common.collect.Lists;\n+import com.powsybl.commons.PowsyblException;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.ServiceLoader;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A provider that can be loaded by by Java's ServiceLoader based on its name\n+ * present in an entry in the PlatformConfig.\n+ *\n+ * @author Jon Harper <jon.harper at rte-france.com>\n+ */\n+public interface PlatformConfigNamedProvider {\n+\n+    /**\n+     * Get the name.\n+     *\n+     * @return the name\n+     */\n+    String getName();\n+\n+    /**\n+     * Get the Provider name used for identifying this provider in the\n+     * PlatformConfig. Defaults to getName(). Override this method only getName() is\n+     * already implemented and returns the wrong name.\n+     *\n+     * @return the name\n+     */\n+    default String getPlatformConfigName() {", "originalCommit": "1547f3c98d175653101252c17b26c97231df6741", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM1ODgyNw==", "url": "https://github.com/powsybl/powsybl-core/pull/1119#discussion_r371358827", "bodyText": "This is done to automatically reuse the implement of \"getName\" methods from other interfaces (e.g. Versionable ) in most cases, but still allow to have different names in case you need it. It is not currently needed in our code now.", "author": "jonenst", "createdAt": "2020-01-27T16:52:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI0NjA3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUxMjc1MA==", "url": "https://github.com/powsybl/powsybl-core/pull/1119#discussion_r372512750", "bodyText": "ok", "author": "miovd", "createdAt": "2020-01-29T17:06:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI0NjA3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "eaabdaec202bd8458d1633051f6b32c235a043bb", "chunk": "diff --git a/commons/src/main/java/com/powsybl/commons/config/PlatformConfigNamedProvider.java b/commons/src/main/java/com/powsybl/commons/config/PlatformConfigNamedProvider.java\nindex 6f67fbdec..48daa0494 100644\n--- a/commons/src/main/java/com/powsybl/commons/config/PlatformConfigNamedProvider.java\n+++ b/commons/src/main/java/com/powsybl/commons/config/PlatformConfigNamedProvider.java\n\n@@ -6,17 +6,12 @@\n  */\n package com.powsybl.commons.config;\n \n-import com.google.common.collect.Lists;\n import com.powsybl.commons.PowsyblException;\n \n import java.util.Arrays;\n import java.util.List;\n-import java.util.Map;\n import java.util.Objects;\n import java.util.Optional;\n-import java.util.ServiceLoader;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.function.Function;\n import java.util.stream.Collectors;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI0NjI0Mg==", "url": "https://github.com/powsybl/powsybl-core/pull/1119#discussion_r371246242", "bodyText": "Small typo:\n\nOverride this method only if getName() is", "author": "MioRtia", "createdAt": "2020-01-27T13:44:39Z", "path": "commons/src/main/java/com/powsybl/commons/config/PlatformConfigNamedProvider.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.config;\n+\n+import com.google.common.collect.Lists;\n+import com.powsybl.commons.PowsyblException;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.ServiceLoader;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A provider that can be loaded by by Java's ServiceLoader based on its name\n+ * present in an entry in the PlatformConfig.\n+ *\n+ * @author Jon Harper <jon.harper at rte-france.com>\n+ */\n+public interface PlatformConfigNamedProvider {\n+\n+    /**\n+     * Get the name.\n+     *\n+     * @return the name\n+     */\n+    String getName();\n+\n+    /**\n+     * Get the Provider name used for identifying this provider in the\n+     * PlatformConfig. Defaults to getName(). Override this method only getName() is", "originalCommit": "1547f3c98d175653101252c17b26c97231df6741", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQzNTM2Mg==", "url": "https://github.com/powsybl/powsybl-core/pull/1119#discussion_r372435362", "bodyText": "done", "author": "jonenst", "createdAt": "2020-01-29T15:03:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI0NjI0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "eaabdaec202bd8458d1633051f6b32c235a043bb", "chunk": "diff --git a/commons/src/main/java/com/powsybl/commons/config/PlatformConfigNamedProvider.java b/commons/src/main/java/com/powsybl/commons/config/PlatformConfigNamedProvider.java\nindex 6f67fbdec..48daa0494 100644\n--- a/commons/src/main/java/com/powsybl/commons/config/PlatformConfigNamedProvider.java\n+++ b/commons/src/main/java/com/powsybl/commons/config/PlatformConfigNamedProvider.java\n\n@@ -6,17 +6,12 @@\n  */\n package com.powsybl.commons.config;\n \n-import com.google.common.collect.Lists;\n import com.powsybl.commons.PowsyblException;\n \n import java.util.Arrays;\n import java.util.List;\n-import java.util.Map;\n import java.util.Objects;\n import java.util.Optional;\n-import java.util.ServiceLoader;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.function.Function;\n import java.util.stream.Collectors;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY0OTI3NQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1119#discussion_r371649275", "bodyText": "Coding style: Indent this code like in the previous method", "author": "mathbagu", "createdAt": "2020-01-28T07:52:50Z", "path": "commons/src/main/java/com/powsybl/commons/config/PlatformConfigNamedProvider.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.config;\n+\n+import com.google.common.collect.Lists;\n+import com.powsybl.commons.PowsyblException;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.ServiceLoader;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A provider that can be loaded by by Java's ServiceLoader based on its name\n+ * present in an entry in the PlatformConfig.\n+ *\n+ * @author Jon Harper <jon.harper at rte-france.com>\n+ */\n+public interface PlatformConfigNamedProvider {\n+\n+    /**\n+     * Get the name.\n+     *\n+     * @return the name\n+     */\n+    String getName();\n+\n+    /**\n+     * Get the Provider name used for identifying this provider in the\n+     * PlatformConfig. Defaults to getName(). Override this method only getName() is\n+     * already implemented and returns the wrong name.\n+     *\n+     * @return the name\n+     */\n+    default String getPlatformConfigName() {\n+        return getName();\n+    }\n+\n+    /**\n+     * A utility class to find providers in the {@link PlatformConfig} by their\n+     * names configured in standard fields. the find* methods use the standard\n+     * fields while the find*BackwardsCompatible methods also look in the legacy\n+     * fields.\n+     *\n+     * @author Jon harper <jon.harper at rte-france.com>\n+     * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n+     */\n+    static final class Finder {\n+\n+        private Finder() {\n+        }\n+\n+        private static final String DEFAULT_SERVICE_IMPL_NAME_PROPERTY = \"default-impl-name\";\n+        private static final String LEGACY_SERVICE_IMPL_NAME_PROPERTY = \"default\";\n+\n+        private static final Map<Class<? extends PlatformConfigNamedProvider>, List<? extends PlatformConfigNamedProvider>> PROVIDERS = new ConcurrentHashMap<>();\n+\n+        /**\n+         * Find the default provider configured in the standard field of\n+         * {@code moduleName} in {@code platformConfig} among the {@code providers}\n+         * arguments based on its name.\n+         *\n+         * @return the provider\n+         */\n+        public static <T extends PlatformConfigNamedProvider> T findDefault(String moduleName,\n+                Class<T> clazz, PlatformConfig platformConfig) {\n+            return find(null, moduleName,\n+                    Arrays.asList(DEFAULT_SERVICE_IMPL_NAME_PROPERTY), clazz,\n+                    platformConfig);\n+        }\n+\n+        /**\n+         * Find the provider among the {@code providers} based on its {@code name}, or\n+         * if {@code name} is null find the default provider like @{link findDefault}\n+         *\n+         * @return the provider\n+         */\n+        public static <T extends PlatformConfigNamedProvider> T find(String name, String moduleName,\n+                Class<T> clazz, PlatformConfig platformConfig) {\n+            return find(name, moduleName,\n+                    Arrays.asList(DEFAULT_SERVICE_IMPL_NAME_PROPERTY), clazz,\n+                    platformConfig);\n+        }\n+\n+        /**\n+         * Find the default provider configured in the standard field or the legacy\n+         * field of {@code moduleName} in {@code platformConfig} among the\n+         * {@code providers} arguments based on its name.\n+         *\n+         * @deprecated Use {@link #findDefault} instead\n+         *\n+         * @return the provider\n+         */\n+        @Deprecated\n+        public static <T extends PlatformConfigNamedProvider> T findDefaultBackwardsCompatible(\n+                String moduleName, Class<T> clazz, PlatformConfig platformConfig) {\n+            return find(null, moduleName,\n+                    Arrays.asList(DEFAULT_SERVICE_IMPL_NAME_PROPERTY,\n+                    LEGACY_SERVICE_IMPL_NAME_PROPERTY), clazz, platformConfig);\n+        }\n+\n+        /**\n+         * Find the provider among the {@code providers} based on its {@code name}, or\n+         * if {@code name} is null find the default provider like @{link\n+         * findDefaultBackwardsCompatible}\n+         *\n+         * @deprecated Use {@link #find} instead\n+         *\n+         * @return the provider\n+         */\n+        @Deprecated\n+        public static <T extends PlatformConfigNamedProvider> T findBackwardsCompatible(String name,\n+                String moduleName, Class<T> clazz, PlatformConfig platformConfig) {\n+            return find(name, moduleName,\n+                    Arrays.asList(DEFAULT_SERVICE_IMPL_NAME_PROPERTY,\n+                            LEGACY_SERVICE_IMPL_NAME_PROPERTY),\n+                    clazz, platformConfig);", "originalCommit": "1547f3c98d175653101252c17b26c97231df6741", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQzNTMyMg==", "url": "https://github.com/powsybl/powsybl-core/pull/1119#discussion_r372435322", "bodyText": "ok", "author": "jonenst", "createdAt": "2020-01-29T15:03:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY0OTI3NQ=="}], "type": "inlineReview", "revised_code": {"commit": "eaabdaec202bd8458d1633051f6b32c235a043bb", "chunk": "diff --git a/commons/src/main/java/com/powsybl/commons/config/PlatformConfigNamedProvider.java b/commons/src/main/java/com/powsybl/commons/config/PlatformConfigNamedProvider.java\nindex 6f67fbdec..48daa0494 100644\n--- a/commons/src/main/java/com/powsybl/commons/config/PlatformConfigNamedProvider.java\n+++ b/commons/src/main/java/com/powsybl/commons/config/PlatformConfigNamedProvider.java\n\n@@ -6,17 +6,12 @@\n  */\n package com.powsybl.commons.config;\n \n-import com.google.common.collect.Lists;\n import com.powsybl.commons.PowsyblException;\n \n import java.util.Arrays;\n import java.util.List;\n-import java.util.Map;\n import java.util.Objects;\n import java.util.Optional;\n-import java.util.ServiceLoader;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.function.Function;\n import java.util.stream.Collectors;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY0OTQ2NA==", "url": "https://github.com/powsybl/powsybl-core/pull/1119#discussion_r371649464", "bodyText": "Coding style: To increase the readability, we should write 1 stream function per line", "author": "mathbagu", "createdAt": "2020-01-28T07:53:26Z", "path": "commons/src/main/java/com/powsybl/commons/config/PlatformConfigNamedProvider.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.config;\n+\n+import com.google.common.collect.Lists;\n+import com.powsybl.commons.PowsyblException;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.ServiceLoader;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A provider that can be loaded by by Java's ServiceLoader based on its name\n+ * present in an entry in the PlatformConfig.\n+ *\n+ * @author Jon Harper <jon.harper at rte-france.com>\n+ */\n+public interface PlatformConfigNamedProvider {\n+\n+    /**\n+     * Get the name.\n+     *\n+     * @return the name\n+     */\n+    String getName();\n+\n+    /**\n+     * Get the Provider name used for identifying this provider in the\n+     * PlatformConfig. Defaults to getName(). Override this method only getName() is\n+     * already implemented and returns the wrong name.\n+     *\n+     * @return the name\n+     */\n+    default String getPlatformConfigName() {\n+        return getName();\n+    }\n+\n+    /**\n+     * A utility class to find providers in the {@link PlatformConfig} by their\n+     * names configured in standard fields. the find* methods use the standard\n+     * fields while the find*BackwardsCompatible methods also look in the legacy\n+     * fields.\n+     *\n+     * @author Jon harper <jon.harper at rte-france.com>\n+     * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n+     */\n+    static final class Finder {\n+\n+        private Finder() {\n+        }\n+\n+        private static final String DEFAULT_SERVICE_IMPL_NAME_PROPERTY = \"default-impl-name\";\n+        private static final String LEGACY_SERVICE_IMPL_NAME_PROPERTY = \"default\";\n+\n+        private static final Map<Class<? extends PlatformConfigNamedProvider>, List<? extends PlatformConfigNamedProvider>> PROVIDERS = new ConcurrentHashMap<>();\n+\n+        /**\n+         * Find the default provider configured in the standard field of\n+         * {@code moduleName} in {@code platformConfig} among the {@code providers}\n+         * arguments based on its name.\n+         *\n+         * @return the provider\n+         */\n+        public static <T extends PlatformConfigNamedProvider> T findDefault(String moduleName,\n+                Class<T> clazz, PlatformConfig platformConfig) {\n+            return find(null, moduleName,\n+                    Arrays.asList(DEFAULT_SERVICE_IMPL_NAME_PROPERTY), clazz,\n+                    platformConfig);\n+        }\n+\n+        /**\n+         * Find the provider among the {@code providers} based on its {@code name}, or\n+         * if {@code name} is null find the default provider like @{link findDefault}\n+         *\n+         * @return the provider\n+         */\n+        public static <T extends PlatformConfigNamedProvider> T find(String name, String moduleName,\n+                Class<T> clazz, PlatformConfig platformConfig) {\n+            return find(name, moduleName,\n+                    Arrays.asList(DEFAULT_SERVICE_IMPL_NAME_PROPERTY), clazz,\n+                    platformConfig);\n+        }\n+\n+        /**\n+         * Find the default provider configured in the standard field or the legacy\n+         * field of {@code moduleName} in {@code platformConfig} among the\n+         * {@code providers} arguments based on its name.\n+         *\n+         * @deprecated Use {@link #findDefault} instead\n+         *\n+         * @return the provider\n+         */\n+        @Deprecated\n+        public static <T extends PlatformConfigNamedProvider> T findDefaultBackwardsCompatible(\n+                String moduleName, Class<T> clazz, PlatformConfig platformConfig) {\n+            return find(null, moduleName,\n+                    Arrays.asList(DEFAULT_SERVICE_IMPL_NAME_PROPERTY,\n+                    LEGACY_SERVICE_IMPL_NAME_PROPERTY), clazz, platformConfig);\n+        }\n+\n+        /**\n+         * Find the provider among the {@code providers} based on its {@code name}, or\n+         * if {@code name} is null find the default provider like @{link\n+         * findDefaultBackwardsCompatible}\n+         *\n+         * @deprecated Use {@link #find} instead\n+         *\n+         * @return the provider\n+         */\n+        @Deprecated\n+        public static <T extends PlatformConfigNamedProvider> T findBackwardsCompatible(String name,\n+                String moduleName, Class<T> clazz, PlatformConfig platformConfig) {\n+            return find(name, moduleName,\n+                    Arrays.asList(DEFAULT_SERVICE_IMPL_NAME_PROPERTY,\n+                            LEGACY_SERVICE_IMPL_NAME_PROPERTY),\n+                    clazz, platformConfig);\n+        }\n+\n+        private static Optional<String> getOptionalFirstProperty(ModuleConfig moduleConfig,\n+                List<String> propertyNames) {\n+            return propertyNames.stream().map(moduleConfig::getOptionalStringProperty)\n+                    .filter(Optional::isPresent).map(Optional::get).findFirst();", "originalCommit": "1547f3c98d175653101252c17b26c97231df6741", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQzNTI2Mw==", "url": "https://github.com/powsybl/powsybl-core/pull/1119#discussion_r372435263", "bodyText": "ok", "author": "jonenst", "createdAt": "2020-01-29T15:03:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY0OTQ2NA=="}], "type": "inlineReview", "revised_code": {"commit": "eaabdaec202bd8458d1633051f6b32c235a043bb", "chunk": "diff --git a/commons/src/main/java/com/powsybl/commons/config/PlatformConfigNamedProvider.java b/commons/src/main/java/com/powsybl/commons/config/PlatformConfigNamedProvider.java\nindex 6f67fbdec..48daa0494 100644\n--- a/commons/src/main/java/com/powsybl/commons/config/PlatformConfigNamedProvider.java\n+++ b/commons/src/main/java/com/powsybl/commons/config/PlatformConfigNamedProvider.java\n\n@@ -6,17 +6,12 @@\n  */\n package com.powsybl.commons.config;\n \n-import com.google.common.collect.Lists;\n import com.powsybl.commons.PowsyblException;\n \n import java.util.Arrays;\n import java.util.List;\n-import java.util.Map;\n import java.util.Objects;\n import java.util.Optional;\n-import java.util.ServiceLoader;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.function.Function;\n import java.util.stream.Collectors;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY1MDM4MQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1119#discussion_r371650381", "bodyText": "We discussed about this few days ago... You propose to remove this assertion, because, if the name is not null we don't need platformConfig. Did you change your mind?", "author": "mathbagu", "createdAt": "2020-01-28T07:56:10Z", "path": "commons/src/main/java/com/powsybl/commons/config/PlatformConfigNamedProvider.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.config;\n+\n+import com.google.common.collect.Lists;\n+import com.powsybl.commons.PowsyblException;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.ServiceLoader;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A provider that can be loaded by by Java's ServiceLoader based on its name\n+ * present in an entry in the PlatformConfig.\n+ *\n+ * @author Jon Harper <jon.harper at rte-france.com>\n+ */\n+public interface PlatformConfigNamedProvider {\n+\n+    /**\n+     * Get the name.\n+     *\n+     * @return the name\n+     */\n+    String getName();\n+\n+    /**\n+     * Get the Provider name used for identifying this provider in the\n+     * PlatformConfig. Defaults to getName(). Override this method only getName() is\n+     * already implemented and returns the wrong name.\n+     *\n+     * @return the name\n+     */\n+    default String getPlatformConfigName() {\n+        return getName();\n+    }\n+\n+    /**\n+     * A utility class to find providers in the {@link PlatformConfig} by their\n+     * names configured in standard fields. the find* methods use the standard\n+     * fields while the find*BackwardsCompatible methods also look in the legacy\n+     * fields.\n+     *\n+     * @author Jon harper <jon.harper at rte-france.com>\n+     * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n+     */\n+    static final class Finder {\n+\n+        private Finder() {\n+        }\n+\n+        private static final String DEFAULT_SERVICE_IMPL_NAME_PROPERTY = \"default-impl-name\";\n+        private static final String LEGACY_SERVICE_IMPL_NAME_PROPERTY = \"default\";\n+\n+        private static final Map<Class<? extends PlatformConfigNamedProvider>, List<? extends PlatformConfigNamedProvider>> PROVIDERS = new ConcurrentHashMap<>();\n+\n+        /**\n+         * Find the default provider configured in the standard field of\n+         * {@code moduleName} in {@code platformConfig} among the {@code providers}\n+         * arguments based on its name.\n+         *\n+         * @return the provider\n+         */\n+        public static <T extends PlatformConfigNamedProvider> T findDefault(String moduleName,\n+                Class<T> clazz, PlatformConfig platformConfig) {\n+            return find(null, moduleName,\n+                    Arrays.asList(DEFAULT_SERVICE_IMPL_NAME_PROPERTY), clazz,\n+                    platformConfig);\n+        }\n+\n+        /**\n+         * Find the provider among the {@code providers} based on its {@code name}, or\n+         * if {@code name} is null find the default provider like @{link findDefault}\n+         *\n+         * @return the provider\n+         */\n+        public static <T extends PlatformConfigNamedProvider> T find(String name, String moduleName,\n+                Class<T> clazz, PlatformConfig platformConfig) {\n+            return find(name, moduleName,\n+                    Arrays.asList(DEFAULT_SERVICE_IMPL_NAME_PROPERTY), clazz,\n+                    platformConfig);\n+        }\n+\n+        /**\n+         * Find the default provider configured in the standard field or the legacy\n+         * field of {@code moduleName} in {@code platformConfig} among the\n+         * {@code providers} arguments based on its name.\n+         *\n+         * @deprecated Use {@link #findDefault} instead\n+         *\n+         * @return the provider\n+         */\n+        @Deprecated\n+        public static <T extends PlatformConfigNamedProvider> T findDefaultBackwardsCompatible(\n+                String moduleName, Class<T> clazz, PlatformConfig platformConfig) {\n+            return find(null, moduleName,\n+                    Arrays.asList(DEFAULT_SERVICE_IMPL_NAME_PROPERTY,\n+                    LEGACY_SERVICE_IMPL_NAME_PROPERTY), clazz, platformConfig);\n+        }\n+\n+        /**\n+         * Find the provider among the {@code providers} based on its {@code name}, or\n+         * if {@code name} is null find the default provider like @{link\n+         * findDefaultBackwardsCompatible}\n+         *\n+         * @deprecated Use {@link #find} instead\n+         *\n+         * @return the provider\n+         */\n+        @Deprecated\n+        public static <T extends PlatformConfigNamedProvider> T findBackwardsCompatible(String name,\n+                String moduleName, Class<T> clazz, PlatformConfig platformConfig) {\n+            return find(name, moduleName,\n+                    Arrays.asList(DEFAULT_SERVICE_IMPL_NAME_PROPERTY,\n+                            LEGACY_SERVICE_IMPL_NAME_PROPERTY),\n+                    clazz, platformConfig);\n+        }\n+\n+        private static Optional<String> getOptionalFirstProperty(ModuleConfig moduleConfig,\n+                List<String> propertyNames) {\n+            return propertyNames.stream().map(moduleConfig::getOptionalStringProperty)\n+                    .filter(Optional::isPresent).map(Optional::get).findFirst();\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        private static <K, V, T extends V> T alwaysSameComputeIfAbsent(\n+                Map<K, V> map, K key,\n+                Function<? super K, T> mappingFunction) {\n+            // Casting to (T) is safe if we awlays pass the same T argument for a given key\n+            return (T) map.computeIfAbsent(key, mappingFunction);\n+        }\n+\n+        private static <T extends PlatformConfigNamedProvider> T find(String name,\n+                String moduleName, List<String> propertyNames, Class<T> clazz,\n+                PlatformConfig platformConfig) {\n+            List<T> providers = alwaysSameComputeIfAbsent(PROVIDERS, clazz,\n+                k -> Lists.newArrayList(ServiceLoader.load(clazz)));\n+            return find(name, moduleName, propertyNames, providers, platformConfig);\n+        }\n+\n+        // package private for tests\n+        static <T extends PlatformConfigNamedProvider> T find(String name,\n+                String moduleName, List<String> propertyNames, List<T> providers,\n+                PlatformConfig platformConfig) {\n+            Objects.requireNonNull(providers);\n+            Objects.requireNonNull(platformConfig);", "originalCommit": "1547f3c98d175653101252c17b26c97231df6741", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQzNDU0Mw==", "url": "https://github.com/powsybl/powsybl-core/pull/1119#discussion_r372434543", "bodyText": "Yes, I find it more robust to always require non null. This avoids problems when the code \"works\" when the name is not null, but suddenly name becomes null and it doesn't work anymore.\nWe can rework the API in the future in a separate PR to not give this API where parameters are used depending on whether other parameters are null", "author": "jonenst", "createdAt": "2020-01-29T15:02:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY1MDM4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "eaabdaec202bd8458d1633051f6b32c235a043bb", "chunk": "diff --git a/commons/src/main/java/com/powsybl/commons/config/PlatformConfigNamedProvider.java b/commons/src/main/java/com/powsybl/commons/config/PlatformConfigNamedProvider.java\nindex 6f67fbdec..48daa0494 100644\n--- a/commons/src/main/java/com/powsybl/commons/config/PlatformConfigNamedProvider.java\n+++ b/commons/src/main/java/com/powsybl/commons/config/PlatformConfigNamedProvider.java\n\n@@ -6,17 +6,12 @@\n  */\n package com.powsybl.commons.config;\n \n-import com.google.common.collect.Lists;\n import com.powsybl.commons.PowsyblException;\n \n import java.util.Arrays;\n import java.util.List;\n-import java.util.Map;\n import java.util.Objects;\n import java.util.Optional;\n-import java.util.ServiceLoader;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.function.Function;\n import java.util.stream.Collectors;\n \n /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY3OTc1Ng==", "url": "https://github.com/powsybl/powsybl-core/pull/1119#discussion_r371679756", "bodyText": "Should be renamed?", "author": "geofjamg", "createdAt": "2020-01-28T09:10:24Z", "path": "commons/src/main/java/com/powsybl/commons/config/PlatformConfigNamedProvider.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.commons.config;\n+\n+import com.google.common.collect.Lists;\n+import com.powsybl.commons.PowsyblException;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.ServiceLoader;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A provider that can be loaded by by Java's ServiceLoader based on its name\n+ * present in an entry in the PlatformConfig.\n+ *\n+ * @author Jon Harper <jon.harper at rte-france.com>\n+ */\n+public interface PlatformConfigNamedProvider {\n+\n+    /**\n+     * Get the name.\n+     *\n+     * @return the name\n+     */\n+    String getName();\n+\n+    /**\n+     * Get the Provider name used for identifying this provider in the\n+     * PlatformConfig. Defaults to getName(). Override this method only getName() is\n+     * already implemented and returns the wrong name.\n+     *\n+     * @return the name\n+     */\n+    default String getPlatformConfigName() {\n+        return getName();\n+    }\n+\n+    /**\n+     * A utility class to find providers in the {@link PlatformConfig} by their\n+     * names configured in standard fields. the find* methods use the standard\n+     * fields while the find*BackwardsCompatible methods also look in the legacy\n+     * fields.\n+     *\n+     * @author Jon harper <jon.harper at rte-france.com>\n+     * @author Geoffroy Jamgotchian <geoffroy.jamgotchian at rte-france.com>\n+     */\n+    static final class Finder {\n+\n+        private Finder() {\n+        }\n+\n+        private static final String DEFAULT_SERVICE_IMPL_NAME_PROPERTY = \"default-impl-name\";\n+        private static final String LEGACY_SERVICE_IMPL_NAME_PROPERTY = \"default\";\n+\n+        private static final Map<Class<? extends PlatformConfigNamedProvider>, List<? extends PlatformConfigNamedProvider>> PROVIDERS = new ConcurrentHashMap<>();\n+\n+        /**\n+         * Find the default provider configured in the standard field of\n+         * {@code moduleName} in {@code platformConfig} among the {@code providers}\n+         * arguments based on its name.\n+         *\n+         * @return the provider\n+         */\n+        public static <T extends PlatformConfigNamedProvider> T findDefault(String moduleName,\n+                Class<T> clazz, PlatformConfig platformConfig) {\n+            return find(null, moduleName,\n+                    Arrays.asList(DEFAULT_SERVICE_IMPL_NAME_PROPERTY), clazz,\n+                    platformConfig);\n+        }\n+\n+        /**\n+         * Find the provider among the {@code providers} based on its {@code name}, or\n+         * if {@code name} is null find the default provider like @{link findDefault}\n+         *\n+         * @return the provider\n+         */\n+        public static <T extends PlatformConfigNamedProvider> T find(String name, String moduleName,\n+                Class<T> clazz, PlatformConfig platformConfig) {\n+            return find(name, moduleName,\n+                    Arrays.asList(DEFAULT_SERVICE_IMPL_NAME_PROPERTY), clazz,\n+                    platformConfig);\n+        }\n+\n+        /**\n+         * Find the default provider configured in the standard field or the legacy\n+         * field of {@code moduleName} in {@code platformConfig} among the\n+         * {@code providers} arguments based on its name.\n+         *\n+         * @deprecated Use {@link #findDefault} instead\n+         *\n+         * @return the provider\n+         */\n+        @Deprecated\n+        public static <T extends PlatformConfigNamedProvider> T findDefaultBackwardsCompatible(\n+                String moduleName, Class<T> clazz, PlatformConfig platformConfig) {\n+            return find(null, moduleName,\n+                    Arrays.asList(DEFAULT_SERVICE_IMPL_NAME_PROPERTY,\n+                    LEGACY_SERVICE_IMPL_NAME_PROPERTY), clazz, platformConfig);\n+        }\n+\n+        /**\n+         * Find the provider among the {@code providers} based on its {@code name}, or\n+         * if {@code name} is null find the default provider like @{link\n+         * findDefaultBackwardsCompatible}\n+         *\n+         * @deprecated Use {@link #find} instead\n+         *\n+         * @return the provider\n+         */\n+        @Deprecated\n+        public static <T extends PlatformConfigNamedProvider> T findBackwardsCompatible(String name,\n+                String moduleName, Class<T> clazz, PlatformConfig platformConfig) {\n+            return find(name, moduleName,\n+                    Arrays.asList(DEFAULT_SERVICE_IMPL_NAME_PROPERTY,\n+                            LEGACY_SERVICE_IMPL_NAME_PROPERTY),\n+                    clazz, platformConfig);\n+        }\n+\n+        private static Optional<String> getOptionalFirstProperty(ModuleConfig moduleConfig,\n+                List<String> propertyNames) {\n+            return propertyNames.stream().map(moduleConfig::getOptionalStringProperty)\n+                    .filter(Optional::isPresent).map(Optional::get).findFirst();\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        private static <K, V, T extends V> T alwaysSameComputeIfAbsent(\n+                Map<K, V> map, K key,\n+                Function<? super K, T> mappingFunction) {\n+            // Casting to (T) is safe if we awlays pass the same T argument for a given key\n+            return (T) map.computeIfAbsent(key, mappingFunction);\n+        }\n+\n+        private static <T extends PlatformConfigNamedProvider> T find(String name,\n+                String moduleName, List<String> propertyNames, Class<T> clazz,\n+                PlatformConfig platformConfig) {\n+            List<T> providers = alwaysSameComputeIfAbsent(PROVIDERS, clazz,\n+                k -> Lists.newArrayList(ServiceLoader.load(clazz)));\n+            return find(name, moduleName, propertyNames, providers, platformConfig);\n+        }\n+\n+        // package private for tests\n+        static <T extends PlatformConfigNamedProvider> T find(String name,\n+                String moduleName, List<String> propertyNames, List<T> providers,\n+                PlatformConfig platformConfig) {\n+            Objects.requireNonNull(providers);\n+            Objects.requireNonNull(platformConfig);\n+\n+            if (providers.isEmpty()) {\n+                throw new PowsyblException(\"No \" + moduleName + \" providers found\");\n+            }\n+\n+            // if no implementation name is provided through the API we look for information\n+            // in platform configuration\n+            String finalName = name != null ? name\n+                    : platformConfig.getOptionalModuleConfig(moduleName)\n+                            .flatMap(mc -> getOptionalFirstProperty(mc, propertyNames))\n+                            .orElse(null);\n+            T provider;\n+            if (providers.size() == 1 && finalName == null) {\n+                // no information to select the implementation but only one provider, so we can\n+                // use it by default\n+                // (that is be the most common use case)\n+                provider = providers.get(0);\n+            } else {\n+                if (providers.size() > 1 && finalName == null) {\n+                    // several providers and no information to select which one to choose, we can\n+                    // only throw\n+                    // an exception\n+                    List<String> loadFlowNames = providers.stream()", "originalCommit": "1547f3c98d175653101252c17b26c97231df6741", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQzNTE2MQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1119#discussion_r372435161", "bodyText": "done. I used clazz.getSimpleName() in the message because this is expected to be used on our classes which have very specific names (e.g. LoadFlowProvider)", "author": "jonenst", "createdAt": "2020-01-29T15:03:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY3OTc1Ng=="}], "type": "inlineReview", "revised_code": {"commit": "eaabdaec202bd8458d1633051f6b32c235a043bb", "chunk": "diff --git a/commons/src/main/java/com/powsybl/commons/config/PlatformConfigNamedProvider.java b/commons/src/main/java/com/powsybl/commons/config/PlatformConfigNamedProvider.java\nindex 6f67fbdec..48daa0494 100644\n--- a/commons/src/main/java/com/powsybl/commons/config/PlatformConfigNamedProvider.java\n+++ b/commons/src/main/java/com/powsybl/commons/config/PlatformConfigNamedProvider.java\n\n@@ -6,17 +6,12 @@\n  */\n package com.powsybl.commons.config;\n \n-import com.google.common.collect.Lists;\n import com.powsybl.commons.PowsyblException;\n \n import java.util.Arrays;\n import java.util.List;\n-import java.util.Map;\n import java.util.Objects;\n import java.util.Optional;\n-import java.util.ServiceLoader;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.function.Function;\n import java.util.stream.Collectors;\n \n /**\n"}}, {"oid": "eaabdaec202bd8458d1633051f6b32c235a043bb", "url": "https://github.com/powsybl/powsybl-core/commit/eaabdaec202bd8458d1633051f6b32c235a043bb", "message": "Refactor provider loading from platformconfig into PlatformConfigNamedProvider\n\nSigned-off-by: Jon Harper <jon.harper87@gmail.com>", "committedDate": "2020-01-29T15:17:37Z", "type": "commit"}, {"oid": "3038e78ff653bbe3393b4a5216a8b85563c0eea6", "url": "https://github.com/powsybl/powsybl-core/commit/3038e78ff653bbe3393b4a5216a8b85563c0eea6", "message": "Allow to choose iidm implementation from platformConfig\n\nSigned-off-by: Jon Harper <jon.harper87@gmail.com>", "committedDate": "2020-01-29T15:30:30Z", "type": "commit"}, {"oid": "61bd280b1cf0b68b25f42e0c8cdad57e94ee4590", "url": "https://github.com/powsybl/powsybl-core/commit/61bd280b1cf0b68b25f42e0c8cdad57e94ee4590", "message": "Move the providers static variables inside the PlatformConfigNameProvider class\n\nSigned-off-by: Jon Harper <jon.harper87@gmail.com>", "committedDate": "2020-01-29T15:30:48Z", "type": "commit"}, {"oid": "61bd280b1cf0b68b25f42e0c8cdad57e94ee4590", "url": "https://github.com/powsybl/powsybl-core/commit/61bd280b1cf0b68b25f42e0c8cdad57e94ee4590", "message": "Move the providers static variables inside the PlatformConfigNameProvider class\n\nSigned-off-by: Jon Harper <jon.harper87@gmail.com>", "committedDate": "2020-01-29T15:30:48Z", "type": "forcePushed"}, {"oid": "5e616852088be29f24a41136fe10f544b038299c", "url": "https://github.com/powsybl/powsybl-core/commit/5e616852088be29f24a41136fe10f544b038299c", "message": "Merge branch 'master' into default-iidm", "committedDate": "2020-02-03T08:27:00Z", "type": "commit"}, {"oid": "d5b9a0001cc26761f0d5bea37e76b3e3f5bddb8a", "url": "https://github.com/powsybl/powsybl-core/commit/d5b9a0001cc26761f0d5bea37e76b3e3f5bddb8a", "message": "Merge branch 'master' into default-iidm", "committedDate": "2020-02-03T10:39:51Z", "type": "commit"}]}