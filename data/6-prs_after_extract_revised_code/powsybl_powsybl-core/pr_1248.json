{"pr_number": 1248, "pr_title": "Enable the configuration YML to be updated by a JSON file", "pr_createdAt": "2020-03-30T13:39:10Z", "pr_url": "https://github.com/powsybl/powsybl-core/pull/1248", "timeline": [{"oid": "77278a0420dbaab6a53bd372fcb5002511600f0c", "url": "https://github.com/powsybl/powsybl-core/commit/77278a0420dbaab6a53bd372fcb5002511600f0c", "message": "correcting json parser #743\n\nSigned-off-by: Etienn3L <lesoteti@gm0winl226.bureau.si.interne>", "committedDate": "2020-03-31T10:24:02Z", "type": "forcePushed"}, {"oid": "fdf47fb37b1ab0a0c0f3f46534f29b0bb2aedaf1", "url": "https://github.com/powsybl/powsybl-core/commit/fdf47fb37b1ab0a0c0f3f46534f29b0bb2aedaf1", "message": "correcting json parser #743\n\nSigned-off-by: Etienne Lesot <etienne.lesot@rte-france.com>", "committedDate": "2020-03-31T11:54:31Z", "type": "forcePushed"}, {"oid": "f3f79fb4f82c1d7671353f83f603bf113c54b6f7", "url": "https://github.com/powsybl/powsybl-core/commit/f3f79fb4f82c1d7671353f83f603bf113c54b6f7", "message": "correcting json parser #743\n\nSigned-off-by: Etienne Lesot <etienne.lesot@rte-france.com>", "committedDate": "2020-03-31T14:26:33Z", "type": "forcePushed"}, {"oid": "e787289fed303da6e9b41dd8d7bbdabb2b867383", "url": "https://github.com/powsybl/powsybl-core/commit/e787289fed303da6e9b41dd8d7bbdabb2b867383", "message": "correcting json parser #743\n\nSigned-off-by: Etienne Lesot <etienne.lesot@rte-france.com>", "committedDate": "2020-04-01T08:47:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUwNjgwMQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r401506801", "bodyText": "I think it would be slightly better to do the same thing as before here:\njust call the deserialize() method which will read the json and overwrite the extension", "author": "sylvlecl", "createdAt": "2020-04-01T10:15:39Z", "path": "commons/src/main/java/com/powsybl/commons/extensions/ExtensionJsonSerializer.java", "diffHunk": "@@ -23,4 +23,8 @@\n     void serialize(E extension, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException;\n \n     E deserialize(JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException;\n+\n+    default E deserializeAndUpdate(JsonParser jsonParser, DeserializationContext deserializationContext, E parameters) throws IOException {\n+        return parameters;", "originalCommit": "e787289fed303da6e9b41dd8d7bbdabb2b867383", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "37af54a8d3a9d6acf787fff4addc485d363941a7", "chunk": "diff --git a/commons/src/main/java/com/powsybl/commons/extensions/ExtensionJsonSerializer.java b/commons/src/main/java/com/powsybl/commons/extensions/ExtensionJsonSerializer.java\nindex 7d764ea594..82c39cf371 100644\n--- a/commons/src/main/java/com/powsybl/commons/extensions/ExtensionJsonSerializer.java\n+++ b/commons/src/main/java/com/powsybl/commons/extensions/ExtensionJsonSerializer.java\n\n@@ -25,6 +25,6 @@ public interface ExtensionJsonSerializer<T extends Extendable, E extends Extensi\n     E deserialize(JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException;\n \n     default E deserializeAndUpdate(JsonParser jsonParser, DeserializationContext deserializationContext, E parameters) throws IOException {\n-        return parameters;\n+        return deserialize(jsonParser, deserializationContext);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxMDgzOQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r401510839", "bodyText": "I think here there will be an issue if you have multiple extensions : the one you get is not necessarily of type E !\nMaybe what you can do is use getExtensionByName instead of iterating on all extensions.", "author": "sylvlecl", "createdAt": "2020-04-01T10:22:39Z", "path": "commons/src/main/java/com/powsybl/commons/json/JsonUtil.java", "diffHunk": "@@ -216,6 +216,51 @@ public static void writeOptionalIntegerField(JsonGenerator jsonGenerator, String\n         return notFound;\n     }\n \n+    public static <T extends Extendable> List<Extension<T>> updateExtensions(JsonParser parser, DeserializationContext context,\n+                                                                             ExtensionProviders<? extends ExtensionJsonSerializer> supplier, T toUpdatedParameters) throws IOException {\n+        return updateExtensions(parser, context, SUPPLIER.get(), null, toUpdatedParameters);\n+    }\n+\n+    public static <T extends Extendable> List<Extension<T>> updateExtensions(JsonParser parser, DeserializationContext context,\n+                                                                             ExtensionProviders<? extends ExtensionJsonSerializer> supplier, Set<String> extensionsNotFound, T toUpdateExtension) throws IOException {\n+        Objects.requireNonNull(parser);\n+        Objects.requireNonNull(context);\n+        Objects.requireNonNull(supplier);\n+        Objects.requireNonNull(toUpdateExtension);\n+\n+        List<Extension<T>> extensions = new ArrayList<>();\n+        while (parser.nextToken() != JsonToken.END_OBJECT) {\n+            Extension<T> extension = updateExtension(parser, context, supplier, extensionsNotFound, toUpdateExtension);\n+            if (extension != null) {\n+                extensions.add(extension);\n+            }\n+        }\n+        return extensions;\n+    }\n+\n+    public static <T extends Extendable, E extends Extension<T>> E updateExtension(JsonParser parser, DeserializationContext context,\n+                                                                                   ExtensionProviders<? extends ExtensionJsonSerializer> supplier, Set<String> extensionsNotFound, T toUpdateExtensions) throws IOException {\n+        String extensionName = parser.getCurrentName();\n+        ExtensionJsonSerializer<T, E> extensionJsonSerializer = supplier.findProvider(extensionName);\n+        if (extensionJsonSerializer != null) {\n+            parser.nextToken();\n+            for (Object ext : toUpdateExtensions.getExtensions()) {\n+                if (ext != null) {\n+                    E toUpdateExtension = (E) ext;", "originalCommit": "e787289fed303da6e9b41dd8d7bbdabb2b867383", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxMTIzNw==", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r401511237", "bodyText": "Note: you could check this with a unit test with 2 extensions.", "author": "sylvlecl", "createdAt": "2020-04-01T10:23:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxMDgzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "37af54a8d3a9d6acf787fff4addc485d363941a7", "chunk": "diff --git a/commons/src/main/java/com/powsybl/commons/json/JsonUtil.java b/commons/src/main/java/com/powsybl/commons/json/JsonUtil.java\nindex c1470168c5..e44b142f6f 100644\n--- a/commons/src/main/java/com/powsybl/commons/json/JsonUtil.java\n+++ b/commons/src/main/java/com/powsybl/commons/json/JsonUtil.java\n\n@@ -222,15 +222,15 @@ public final class JsonUtil {\n     }\n \n     public static <T extends Extendable> List<Extension<T>> updateExtensions(JsonParser parser, DeserializationContext context,\n-                                                                             ExtensionProviders<? extends ExtensionJsonSerializer> supplier, Set<String> extensionsNotFound, T toUpdateExtension) throws IOException {\n+                                                                             ExtensionProviders<? extends ExtensionJsonSerializer> supplier, Set<String> extensionsNotFound, T toUpdatedParameters) throws IOException {\n         Objects.requireNonNull(parser);\n         Objects.requireNonNull(context);\n         Objects.requireNonNull(supplier);\n-        Objects.requireNonNull(toUpdateExtension);\n+        Objects.requireNonNull(toUpdatedParameters);\n \n         List<Extension<T>> extensions = new ArrayList<>();\n         while (parser.nextToken() != JsonToken.END_OBJECT) {\n-            Extension<T> extension = updateExtension(parser, context, supplier, extensionsNotFound, toUpdateExtension);\n+            Extension<T> extension = updateExtension(parser, context, supplier, extensionsNotFound, toUpdatedParameters);\n             if (extension != null) {\n                 extensions.add(extension);\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxMTc1OA==", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r401511758", "bodyText": "I suggest to leave the default implementation for those extensions where it's not really useful to implement it, it will save some lines of code :)", "author": "sylvlecl", "createdAt": "2020-04-01T10:24:18Z", "path": "commons/src/test/java/com/powsybl/commons/extensions/BarExtSerializer.java", "diffHunk": "@@ -33,6 +37,28 @@ public BarExt deserialize(JsonParser parser, DeserializationContext deserializat\n         return null;\n     }\n \n+    private interface SerializationSpec {\n+\n+        @JsonIgnore\n+        String getName();\n+\n+        @JsonIgnore\n+        Foo getExtendable();\n+    }\n+\n+    private static ObjectMapper createMapper() {\n+        return JsonUtil.createObjectMapper()\n+                .addMixIn(BarExt.class, SerializationSpec.class);\n+    }\n+\n+    @Override\n+    public BarExt deserializeAndUpdate(JsonParser jsonParser, DeserializationContext deserializationContext, BarExt parameters) throws IOException {", "originalCommit": "e787289fed303da6e9b41dd8d7bbdabb2b867383", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxMzUwNA==", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r401513504", "bodyText": "Maybe for this test we should add a second parameter, like you did in loadflow tests, because here we don't check if other parameters still have their initial value.", "author": "sylvlecl", "createdAt": "2020-04-01T10:27:36Z", "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionTest.java", "diffHunk": "@@ -109,4 +108,15 @@ public void testWriteJson() throws IOException {\n             assertTrue(notFound.contains(\"BarExt\"));\n         }\n     }\n+\n+    @Test\n+    public void testUpdateAndDeserialize() throws IOException {\n+        Foo foo = new Foo();\n+        FooExt fooExt = new FooExt(false);\n+        foo.addExtension(FooExt.class, fooExt);\n+        boolean initValue = foo.getExtension(FooExt.class).getValue();\n+        FooDeserializer.update(getClass().getResourceAsStream(\"/extensionsUpdate.json\"), foo);\n+        assertNotEquals(initValue, foo.getExtension(FooExt.class).getValue());\n+        assertEquals(foo.getExtension(FooExt.class).getValue(), true);", "originalCommit": "e787289fed303da6e9b41dd8d7bbdabb2b867383", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "37af54a8d3a9d6acf787fff4addc485d363941a7", "chunk": "diff --git a/commons/src/test/java/com/powsybl/commons/extensions/ExtensionTest.java b/commons/src/test/java/com/powsybl/commons/extensions/ExtensionTest.java\nindex 0bd32b760a..7b9a6c0544 100644\n--- a/commons/src/test/java/com/powsybl/commons/extensions/ExtensionTest.java\n+++ b/commons/src/test/java/com/powsybl/commons/extensions/ExtensionTest.java\n\n@@ -112,11 +112,23 @@ public class ExtensionTest extends AbstractConverterTest {\n     @Test\n     public void testUpdateAndDeserialize() throws IOException {\n         Foo foo = new Foo();\n-        FooExt fooExt = new FooExt(false);\n+        FooExt fooExt = new FooExt(false, \"Bonjour\");\n         foo.addExtension(FooExt.class, fooExt);\n-        boolean initValue = foo.getExtension(FooExt.class).getValue();\n         FooDeserializer.update(getClass().getResourceAsStream(\"/extensionsUpdate.json\"), foo);\n-        assertNotEquals(initValue, foo.getExtension(FooExt.class).getValue());\n-        assertEquals(foo.getExtension(FooExt.class).getValue(), true);\n+        assertEquals(true, foo.getExtension(FooExt.class).getValue());\n+        assertEquals(\"Bonjour\", foo.getExtension(FooExt.class).getValue2());\n+    }\n+\n+    @Test\n+    public void testUpdateWith2Extensions() throws IOException {\n+        Foo foo = new Foo();\n+        FooExt fooExt = new FooExt(false, \"Bonjour\");\n+        BarExt barExt = new BarExt(true);\n+        foo.addExtension(FooExt.class, fooExt);\n+        foo.addExtension(BarExt.class, barExt);\n+        FooDeserializer.update(getClass().getResourceAsStream(\"/extensions.json\"), foo);\n+        assertEquals(true, foo.getExtension(FooExt.class).getValue());\n+        assertEquals(\"Bonjour\", foo.getExtension(FooExt.class).getValue2());\n+        assertEquals(false, foo.getExtension(BarExt.class).getValue());\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0MjAzMw==", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r401542033", "bodyText": "I think it's better to leave the default implementation here.", "author": "sylvlecl", "createdAt": "2020-04-01T11:22:46Z", "path": "contingency/contingency-api/src/test/java/com/powsybl/contingency/json/ContingencyJsonTest.java", "diffHunk": "@@ -123,6 +123,11 @@ public DummyExtension deserialize(JsonParser jsonParser, DeserializationContext\n             return new DummyExtension();\n         }\n \n+        @Override\n+        public DummyExtension deserializeAndUpdate(JsonParser jsonParser, DeserializationContext deserializationContext, DummyExtension parameters) throws IOException {", "originalCommit": "e787289fed303da6e9b41dd8d7bbdabb2b867383", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "37af54a8d3a9d6acf787fff4addc485d363941a7", "chunk": "diff --git a/contingency/contingency-api/src/test/java/com/powsybl/contingency/json/ContingencyJsonTest.java b/contingency/contingency-api/src/test/java/com/powsybl/contingency/json/ContingencyJsonTest.java\nindex b1e923d62a..b78df41454 100644\n--- a/contingency/contingency-api/src/test/java/com/powsybl/contingency/json/ContingencyJsonTest.java\n+++ b/contingency/contingency-api/src/test/java/com/powsybl/contingency/json/ContingencyJsonTest.java\n\n@@ -123,11 +123,6 @@ public class ContingencyJsonTest extends AbstractConverterTest {\n             return new DummyExtension();\n         }\n \n-        @Override\n-        public DummyExtension deserializeAndUpdate(JsonParser jsonParser, DeserializationContext deserializationContext, DummyExtension parameters) throws IOException {\n-            return null;\n-        }\n-\n         @Override\n         public String getExtensionName() {\n             return \"dummy-extension\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0MzEyOQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r401543129", "bodyText": "As we are in an update operation here (since we have an initial value of parameters, I think it's simpler to call updateExtensions in any case. If there is no extension, it will have the same behaviour anyway.", "author": "sylvlecl", "createdAt": "2020-04-01T11:24:51Z", "path": "loadflow/loadflow-api/src/main/java/com/powsybl/loadflow/json/LoadFlowParametersDeserializer.java", "diffHunk": "@@ -71,16 +69,18 @@ public LoadFlowParameters deserialize(JsonParser parser, DeserializationContext\n \n                 case \"extensions\":\n                     parser.nextToken();\n-                    extensions = JsonUtil.readExtensions(parser, deserializationContext, JsonLoadFlowParameters.getExtensionSerializers());\n+                    if (parameters.getExtensions().size() > 0) {", "originalCommit": "e787289fed303da6e9b41dd8d7bbdabb2b867383", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "37af54a8d3a9d6acf787fff4addc485d363941a7", "chunk": "diff --git a/loadflow/loadflow-api/src/main/java/com/powsybl/loadflow/json/LoadFlowParametersDeserializer.java b/loadflow/loadflow-api/src/main/java/com/powsybl/loadflow/json/LoadFlowParametersDeserializer.java\nindex 15d8d5bb1e..0c1399f829 100644\n--- a/loadflow/loadflow-api/src/main/java/com/powsybl/loadflow/json/LoadFlowParametersDeserializer.java\n+++ b/loadflow/loadflow-api/src/main/java/com/powsybl/loadflow/json/LoadFlowParametersDeserializer.java\n\n@@ -69,11 +69,7 @@ public class LoadFlowParametersDeserializer extends StdDeserializer<LoadFlowPara\n \n                 case \"extensions\":\n                     parser.nextToken();\n-                    if (parameters.getExtensions().size() > 0) {\n-                        extensions = JsonUtil.updateExtensions(parser, deserializationContext, JsonLoadFlowParameters.getExtensionSerializers(), null, parameters);\n-                    } else {\n-                        extensions = JsonUtil.readExtensions(parser, deserializationContext, JsonLoadFlowParameters.getExtensionSerializers());\n-                    }\n+                    extensions = JsonUtil.updateExtensions(parser, deserializationContext, JsonLoadFlowParameters.getExtensionSerializers(), null, parameters);\n                     break;\n \n                 default:\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0MzMyMQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r401543321", "bodyText": "Don't forget to delete it ;)", "author": "sylvlecl", "createdAt": "2020-04-01T11:25:16Z", "path": "loadflow/loadflow-api/src/main/java/com/powsybl/loadflow/tools/RunLoadFlowTool.java", "diffHunk": "@@ -160,6 +161,7 @@ public void run(CommandLine line, ToolRunningContext context) throws Exception {\n         }\n \n         LoadFlowParameters params = LoadFlowParameters.load();\n+        // System.out.print(\"parametre avant fusion : \");", "originalCommit": "e787289fed303da6e9b41dd8d7bbdabb2b867383", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "37af54a8d3a9d6acf787fff4addc485d363941a7", "chunk": "diff --git a/loadflow/loadflow-api/src/main/java/com/powsybl/loadflow/tools/RunLoadFlowTool.java b/loadflow/loadflow-api/src/main/java/com/powsybl/loadflow/tools/RunLoadFlowTool.java\nindex 8d0e130c35..2758d4b239 100644\n--- a/loadflow/loadflow-api/src/main/java/com/powsybl/loadflow/tools/RunLoadFlowTool.java\n+++ b/loadflow/loadflow-api/src/main/java/com/powsybl/loadflow/tools/RunLoadFlowTool.java\n\n@@ -161,7 +161,6 @@ public class RunLoadFlowTool implements Tool {\n         }\n \n         LoadFlowParameters params = LoadFlowParameters.load();\n-        // System.out.print(\"parametre avant fusion : \");\n         if (line.hasOption(PARAMETERS_FILE)) {\n             Path parametersFile = context.getFileSystem().getPath(line.getOptionValue(PARAMETERS_FILE));\n             JsonLoadFlowParameters.update(params, parametersFile);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0NDY2Mg==", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r401544662", "bodyText": "Same as for load flow parameters : I think it's simpler to call the \"update\" event when there is no extension.", "author": "sylvlecl", "createdAt": "2020-04-01T11:27:48Z", "path": "security-analysis/security-analysis-api/src/main/java/com/powsybl/security/json/SecurityAnalysisParametersDeserializer.java", "diffHunk": "@@ -51,16 +49,17 @@ public SecurityAnalysisParameters deserialize(JsonParser parser, Deserialization\n \n                 case \"extensions\":\n                     parser.nextToken();\n-                    extensions = JsonUtil.readExtensions(parser, deserializationContext, JsonSecurityAnalysisParameters.getExtensionSerializers());\n+                    if (parameters.getExtensions().size() > 0) {", "originalCommit": "e787289fed303da6e9b41dd8d7bbdabb2b867383", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "37af54a8d3a9d6acf787fff4addc485d363941a7", "chunk": "diff --git a/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/json/SecurityAnalysisParametersDeserializer.java b/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/json/SecurityAnalysisParametersDeserializer.java\nindex e65bc96945..a45b019489 100644\n--- a/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/json/SecurityAnalysisParametersDeserializer.java\n+++ b/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/json/SecurityAnalysisParametersDeserializer.java\n\n@@ -49,11 +49,7 @@ public class SecurityAnalysisParametersDeserializer extends StdDeserializer<Secu\n \n                 case \"extensions\":\n                     parser.nextToken();\n-                    if (parameters.getExtensions().size() > 0) {\n-                        extensions = JsonUtil.updateExtensions(parser, deserializationContext, JsonSecurityAnalysisParameters.getExtensionSerializers(), null, parameters);\n-                    } else {\n-                        extensions = JsonUtil.readExtensions(parser, deserializationContext, JsonSecurityAnalysisParameters.getExtensionSerializers());\n-                    }\n+                    extensions = JsonUtil.updateExtensions(parser, deserializationContext, JsonSecurityAnalysisParameters.getExtensionSerializers(), null, parameters);\n                     break;\n                 default:\n                     throw new AssertionError(\"Unexpected field: \" + parser.getCurrentName());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0NTcxOA==", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r401545718", "bodyText": "Probably better to leave the default implementation instead.", "author": "sylvlecl", "createdAt": "2020-04-01T11:29:49Z", "path": "sensitivity-api/src/test/java/com/powsybl/sensitivity/json/JsonSensitivityComputationParametersTest.java", "diffHunk": "@@ -89,6 +89,11 @@ public DummyExtension deserialize(JsonParser jsonParser, DeserializationContext\n             return new DummyExtension();\n         }\n \n+        @Override\n+        public DummyExtension deserializeAndUpdate(JsonParser jsonParser, DeserializationContext deserializationContext, DummyExtension parameters) throws IOException {", "originalCommit": "e787289fed303da6e9b41dd8d7bbdabb2b867383", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "37af54a8d3a9d6acf787fff4addc485d363941a7", "chunk": "diff --git a/sensitivity-api/src/test/java/com/powsybl/sensitivity/json/JsonSensitivityComputationParametersTest.java b/sensitivity-api/src/test/java/com/powsybl/sensitivity/json/JsonSensitivityComputationParametersTest.java\nindex 5824f1b612..7c1831ef21 100644\n--- a/sensitivity-api/src/test/java/com/powsybl/sensitivity/json/JsonSensitivityComputationParametersTest.java\n+++ b/sensitivity-api/src/test/java/com/powsybl/sensitivity/json/JsonSensitivityComputationParametersTest.java\n\n@@ -89,11 +89,6 @@ public class JsonSensitivityComputationParametersTest extends AbstractConverterT\n             return new DummyExtension();\n         }\n \n-        @Override\n-        public DummyExtension deserializeAndUpdate(JsonParser jsonParser, DeserializationContext deserializationContext, DummyExtension parameters) throws IOException {\n-            return null;\n-        }\n-\n         @Override\n         public String getExtensionName() {\n             return \"dummy-extension\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0NTg1NQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r401545855", "bodyText": "Same : I think it's better to leave the default implementation here.", "author": "sylvlecl", "createdAt": "2020-04-01T11:30:06Z", "path": "dynamic-simulation/dynamic-simulation-api/src/test/java/com/powsybl/dynamicsimulation/json/JsonDynamicSimulationParametersTest.java", "diffHunk": "@@ -89,6 +89,11 @@ public DummyExtension deserialize(JsonParser jsonParser, DeserializationContext\n             return new DummyExtension();\n         }\n \n+        @Override\n+        public DummyExtension deserializeAndUpdate(JsonParser jsonParser, DeserializationContext deserializationContext, DummyExtension parameters) throws IOException {", "originalCommit": "e787289fed303da6e9b41dd8d7bbdabb2b867383", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "37af54a8d3a9d6acf787fff4addc485d363941a7", "chunk": "diff --git a/dynamic-simulation/dynamic-simulation-api/src/test/java/com/powsybl/dynamicsimulation/json/JsonDynamicSimulationParametersTest.java b/dynamic-simulation/dynamic-simulation-api/src/test/java/com/powsybl/dynamicsimulation/json/JsonDynamicSimulationParametersTest.java\nindex d63b009d5d..81c004ee72 100644\n--- a/dynamic-simulation/dynamic-simulation-api/src/test/java/com/powsybl/dynamicsimulation/json/JsonDynamicSimulationParametersTest.java\n+++ b/dynamic-simulation/dynamic-simulation-api/src/test/java/com/powsybl/dynamicsimulation/json/JsonDynamicSimulationParametersTest.java\n\n@@ -89,11 +89,6 @@ public class JsonDynamicSimulationParametersTest extends AbstractConverterTest {\n             return new DummyExtension();\n         }\n \n-        @Override\n-        public DummyExtension deserializeAndUpdate(JsonParser jsonParser, DeserializationContext deserializationContext, DummyExtension parameters) throws IOException {\n-            return null;\n-        }\n-\n         @Override\n         public String getExtensionName() {\n             return \"dummy-extension\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0ODUyNw==", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r401548527", "bodyText": "Detail for the assertions:\nthe first parameter should be the \"expected\" value, so here it would be more logical to invert the 2 parameters (same for other assertions).", "author": "sylvlecl", "createdAt": "2020-04-01T11:35:26Z", "path": "security-analysis/security-analysis-api/src/test/java/com/powsybl/security/json/JsonSecurityAnalysisParametersTest.java", "diffHunk": "@@ -61,12 +63,61 @@ public void readError() throws IOException {\n         }\n     }\n \n+    @Test\n+    public void updateExtensions() {\n+        SecurityAnalysisParameters parameters = new SecurityAnalysisParameters();\n+        DummyExtension extension = new DummyExtension();\n+        extension.setParameterBoolean(false);\n+        extension.setParameterString(\"Bonjour\");\n+        extension.setParameterDouble(2.8);\n+        DummyExtension oldExtension = new DummyExtension(extension);\n+        parameters.addExtension(DummyExtension.class, extension);\n+        JsonSecurityAnalysisParameters.update(parameters, getClass().getResourceAsStream(\"/SecurityAnalysisParametersExtensionUpdate.json\"));\n+        DummyExtension updatedExtension = parameters.getExtension(DummyExtension.class);\n+        assertEquals(updatedExtension.isParameterBoolean(), oldExtension.isParameterBoolean());", "originalCommit": "e787289fed303da6e9b41dd8d7bbdabb2b867383", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "37af54a8d3a9d6acf787fff4addc485d363941a7", "chunk": "diff --git a/security-analysis/security-analysis-api/src/test/java/com/powsybl/security/json/JsonSecurityAnalysisParametersTest.java b/security-analysis/security-analysis-api/src/test/java/com/powsybl/security/json/JsonSecurityAnalysisParametersTest.java\nindex ccf80d685d..4bea87897a 100644\n--- a/security-analysis/security-analysis-api/src/test/java/com/powsybl/security/json/JsonSecurityAnalysisParametersTest.java\n+++ b/security-analysis/security-analysis-api/src/test/java/com/powsybl/security/json/JsonSecurityAnalysisParametersTest.java\n\n@@ -74,9 +73,9 @@ public class JsonSecurityAnalysisParametersTest extends AbstractConverterTest {\n         parameters.addExtension(DummyExtension.class, extension);\n         JsonSecurityAnalysisParameters.update(parameters, getClass().getResourceAsStream(\"/SecurityAnalysisParametersExtensionUpdate.json\"));\n         DummyExtension updatedExtension = parameters.getExtension(DummyExtension.class);\n-        assertEquals(updatedExtension.isParameterBoolean(), oldExtension.isParameterBoolean());\n-        assertEquals(updatedExtension.getParameterDouble(), oldExtension.getParameterDouble(), 0.01);\n-        assertNotEquals(updatedExtension.getParameterString(), oldExtension.getParameterString());\n+        assertEquals(oldExtension.isParameterBoolean(), updatedExtension.isParameterBoolean());\n+        assertEquals(oldExtension.getParameterDouble(), updatedExtension.getParameterDouble(), 0.01);\n+        assertNotEquals(oldExtension.getParameterString(), updatedExtension.getParameterString());\n     }\n \n     static class DummyExtension extends AbstractExtension<SecurityAnalysisParameters> {\n"}}, {"oid": "37af54a8d3a9d6acf787fff4addc485d363941a7", "url": "https://github.com/powsybl/powsybl-core/commit/37af54a8d3a9d6acf787fff4addc485d363941a7", "message": "correcting json parser #743\n\nSigned-off-by: Etienne Lesot <etienne.lesot@rte-france.com>", "committedDate": "2020-04-01T13:03:36Z", "type": "forcePushed"}, {"oid": "effbfd0894d5e1d24924ed462033754ec5a0a9ff", "url": "https://github.com/powsybl/powsybl-core/commit/effbfd0894d5e1d24924ed462033754ec5a0a9ff", "message": "correcting json parser #743\n\nSigned-off-by: Etienne Lesot <etienne.lesot@rte-france.com>", "committedDate": "2020-04-02T09:56:00Z", "type": "forcePushed"}, {"oid": "564b518698ec568d1bb4101361b801f6af8875ea", "url": "https://github.com/powsybl/powsybl-core/commit/564b518698ec568d1bb4101361b801f6af8875ea", "message": "correcting json parser #743\n\nSigned-off-by: Etienne Lesot <etienne.lesot@rte-france.com>", "committedDate": "2020-04-02T10:19:23Z", "type": "forcePushed"}, {"oid": "d6254d117b6a34bcb5f8e0ba77320582aeac47e5", "url": "https://github.com/powsybl/powsybl-core/commit/d6254d117b6a34bcb5f8e0ba77320582aeac47e5", "message": "correcting json parser #743\n\nSigned-off-by: Etienne Lesot <etienne.lesot@rte-france.com>", "committedDate": "2020-04-06T13:53:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk3OTI4OA==", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r403979288", "bodyText": "@sylvlecl I agree that this should be the default implementation if we want to prevent breaking the API but isn't it a bit error-prone?", "author": "MioRtia", "createdAt": "2020-04-06T10:15:05Z", "path": "commons/src/main/java/com/powsybl/commons/extensions/ExtensionJsonSerializer.java", "diffHunk": "@@ -23,4 +23,8 @@\n     void serialize(E extension, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException;\n \n     E deserialize(JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException;\n+\n+    default E deserializeAndUpdate(JsonParser jsonParser, DeserializationContext deserializationContext, E parameters) throws IOException {\n+        return deserialize(jsonParser, deserializationContext);", "originalCommit": "564b518698ec568d1bb4101361b801f6af8875ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE4NjM2MA==", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r404186360", "bodyText": "You're right that it's error-prone. I think the options are:\n\ndo it this way, and existing extensions will keep behaving as today, BUT new extensions could \"forget\" to actually implement this\nthrow an exception as default implementation, but I think it's not a good option since it will compile but fail at runtime\ndo not implement it, and make it a breaking change, but in that case it's gonna be inconvenient for users\n\nMaybe the best option is to keep the current approach but insist in javadoc that the method must be implemented for updates to work correctly ?", "author": "sylvlecl", "createdAt": "2020-04-06T15:33:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk3OTI4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM5NzI0OQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r405397249", "bodyText": "I added some javadoc to insist on the need to implement the method for the feature to work properly.", "author": "sylvlecl", "createdAt": "2020-04-08T09:45:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk3OTI4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA0OTQ1MA==", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r406049450", "bodyText": "I agree it should also be documented in the migration guide for people/projects with custom extensions in my opinion.", "author": "miovd", "createdAt": "2020-04-09T08:43:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk3OTI4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIzMzc2NQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r408233765", "bodyText": "I have added a section in the migration guide !", "author": "sylvlecl", "createdAt": "2020-04-14T15:35:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk3OTI4OA=="}], "type": "inlineReview", "revised_code": {"commit": "c9f732f438d42106bbbee29744e068bd5be62536", "chunk": "diff --git a/commons/src/main/java/com/powsybl/commons/extensions/ExtensionJsonSerializer.java b/commons/src/main/java/com/powsybl/commons/extensions/ExtensionJsonSerializer.java\nindex 82c39cf371..7cb958d061 100644\n--- a/commons/src/main/java/com/powsybl/commons/extensions/ExtensionJsonSerializer.java\n+++ b/commons/src/main/java/com/powsybl/commons/extensions/ExtensionJsonSerializer.java\n\n@@ -14,17 +14,29 @@ import com.fasterxml.jackson.databind.SerializerProvider;\n import java.io.IOException;\n \n /**\n- * An ExtensionProvider able to serialize/deserialize extensions from JSON.\n+ * An {@link ExtensionProvider} able to serialize/deserialize extensions from JSON.\n  *\n  * @author Mathieu Bague <mathieu.bague at rte-france.com>\n  */\n public interface ExtensionJsonSerializer<T extends Extendable, E extends Extension<T>> extends ExtensionProvider<T, E> {\n \n+    /**\n+     * Serializes the provided extension to JSON.\n+     */\n     void serialize(E extension, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException;\n \n+    /**\n+     * Deserializes the provided JSON to an extension of type {@code E}.\n+     */\n     E deserialize(JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException;\n \n-    default E deserializeAndUpdate(JsonParser jsonParser, DeserializationContext deserializationContext, E parameters) throws IOException {\n+    /**\n+     * Deserializes the provided JSON to update the provided extension. Returns the updated extension.\n+     *\n+     * <p>The default implementation only returns a new object as provided by {@link #deserialize(JsonParser, DeserializationContext)},\n+     * therefore interface implementations must provide their own implementation if they want the extension to actually be updatable from JSON.\n+     */\n+    default E deserializeAndUpdate(JsonParser jsonParser, DeserializationContext deserializationContext, E extension) throws IOException {\n         return deserialize(jsonParser, deserializationContext);\n     }\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk4NjgyOA==", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r403986828", "bodyText": "Since this method is public, you should maybe call Objects.requireNonNull for parameters which must be not null", "author": "MioRtia", "createdAt": "2020-04-06T10:28:09Z", "path": "commons/src/main/java/com/powsybl/commons/json/JsonUtil.java", "diffHunk": "@@ -217,6 +217,48 @@ public static void writeOptionalIntegerField(JsonGenerator jsonGenerator, String\n         return notFound;\n     }\n \n+    public static <T extends Extendable> List<Extension<T>> updateExtensions(JsonParser parser, DeserializationContext context,\n+                                                                             ExtensionProviders<? extends ExtensionJsonSerializer> supplier, T toUpdatedParameters) throws IOException {\n+        return updateExtensions(parser, context, SUPPLIER.get(), null, toUpdatedParameters);\n+    }\n+\n+    public static <T extends Extendable> List<Extension<T>> updateExtensions(JsonParser parser, DeserializationContext context,\n+                                                                             ExtensionProviders<? extends ExtensionJsonSerializer> supplier, Set<String> extensionsNotFound, T toUpdatedParameters) throws IOException {\n+        Objects.requireNonNull(parser);\n+        Objects.requireNonNull(context);\n+        Objects.requireNonNull(supplier);\n+        Objects.requireNonNull(toUpdatedParameters);\n+\n+        List<Extension<T>> extensions = new ArrayList<>();\n+        while (parser.nextToken() != JsonToken.END_OBJECT) {\n+            Extension<T> extension = updateExtension(parser, context, supplier, extensionsNotFound, toUpdatedParameters);\n+            if (extension != null) {\n+                extensions.add(extension);\n+            }\n+        }\n+        return extensions;\n+    }\n+\n+    public static <T extends Extendable, E extends Extension<T>> E updateExtension(JsonParser parser, DeserializationContext context,", "originalCommit": "564b518698ec568d1bb4101361b801f6af8875ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE2NzQ4OA==", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r404167488", "bodyText": "the only method calling this one have already the requirements (non null) and there is no require non null on the method \"readExtension\" which is similar, maybe requirements can be add to both methods ?", "author": "EtienneLt", "createdAt": "2020-04-06T15:09:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk4NjgyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE2ODAwMQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r404168001", "bodyText": "Or both methods can be private ?", "author": "EtienneLt", "createdAt": "2020-04-06T15:09:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk4NjgyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE2OTk3MQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r404169971", "bodyText": "Yes, if this method is only called in updateExtensions, it might be better to keep it private. I think readExtension is public because it is called elsewhere (not in this repository but in another project using powsybl-core) but if Objects.requireNonNull is not called then, it is by mistake I think.", "author": "miovd", "createdAt": "2020-04-06T15:12:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk4NjgyOA=="}], "type": "inlineReview", "revised_code": {"commit": "d6254d117b6a34bcb5f8e0ba77320582aeac47e5", "chunk": "diff --git a/commons/src/main/java/com/powsybl/commons/json/JsonUtil.java b/commons/src/main/java/com/powsybl/commons/json/JsonUtil.java\nindex 8bb10e992c..1e92ea7ea2 100644\n--- a/commons/src/main/java/com/powsybl/commons/json/JsonUtil.java\n+++ b/commons/src/main/java/com/powsybl/commons/json/JsonUtil.java\n\n@@ -217,9 +217,13 @@ public final class JsonUtil {\n         return notFound;\n     }\n \n+    public static <T extends Extendable> List<Extension<T>> updateExtensions(JsonParser parser, DeserializationContext context, T toUpdatedParameters) throws IOException {\n+        return updateExtensions(parser, context, SUPPLIER.get(), null, toUpdatedParameters);\n+    }\n+\n     public static <T extends Extendable> List<Extension<T>> updateExtensions(JsonParser parser, DeserializationContext context,\n                                                                              ExtensionProviders<? extends ExtensionJsonSerializer> supplier, T toUpdatedParameters) throws IOException {\n-        return updateExtensions(parser, context, SUPPLIER.get(), null, toUpdatedParameters);\n+        return updateExtensions(parser, context, supplier, null, toUpdatedParameters);\n     }\n \n     public static <T extends Extendable> List<Extension<T>> updateExtensions(JsonParser parser, DeserializationContext context,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA1MzU4NA==", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r404053584", "bodyText": "I would avoid using french words (even in tests)", "author": "MioRtia", "createdAt": "2020-04-06T12:31:46Z", "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionTest.java", "diffHunk": "@@ -109,4 +108,27 @@ public void testWriteJson() throws IOException {\n             assertTrue(notFound.contains(\"BarExt\"));\n         }\n     }\n+\n+    @Test\n+    public void testUpdateAndDeserialize() throws IOException {\n+        Foo foo = new Foo();\n+        FooExt fooExt = new FooExt(false, \"Bonjour\");", "originalCommit": "564b518698ec568d1bb4101361b801f6af8875ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE0MjMyNw==", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r404142327", "bodyText": "Ok I'll change that", "author": "EtienneLt", "createdAt": "2020-04-06T14:37:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA1MzU4NA=="}], "type": "inlineReview", "revised_code": {"commit": "d6254d117b6a34bcb5f8e0ba77320582aeac47e5", "chunk": "diff --git a/commons/src/test/java/com/powsybl/commons/extensions/ExtensionTest.java b/commons/src/test/java/com/powsybl/commons/extensions/ExtensionTest.java\nindex 7b9a6c0544..dcb78eaf72 100644\n--- a/commons/src/test/java/com/powsybl/commons/extensions/ExtensionTest.java\n+++ b/commons/src/test/java/com/powsybl/commons/extensions/ExtensionTest.java\n\n@@ -115,7 +115,7 @@ public class ExtensionTest extends AbstractConverterTest {\n         FooExt fooExt = new FooExt(false, \"Bonjour\");\n         foo.addExtension(FooExt.class, fooExt);\n         FooDeserializer.update(getClass().getResourceAsStream(\"/extensionsUpdate.json\"), foo);\n-        assertEquals(true, foo.getExtension(FooExt.class).getValue());\n+        assertTrue(foo.getExtension(FooExt.class).getValue());\n         assertEquals(\"Bonjour\", foo.getExtension(FooExt.class).getValue2());\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA1MzY2MA==", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r404053660", "bodyText": "Same remark", "author": "MioRtia", "createdAt": "2020-04-06T12:31:54Z", "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionTest.java", "diffHunk": "@@ -109,4 +108,27 @@ public void testWriteJson() throws IOException {\n             assertTrue(notFound.contains(\"BarExt\"));\n         }\n     }\n+\n+    @Test\n+    public void testUpdateAndDeserialize() throws IOException {\n+        Foo foo = new Foo();\n+        FooExt fooExt = new FooExt(false, \"Bonjour\");\n+        foo.addExtension(FooExt.class, fooExt);\n+        FooDeserializer.update(getClass().getResourceAsStream(\"/extensionsUpdate.json\"), foo);\n+        assertEquals(true, foo.getExtension(FooExt.class).getValue());\n+        assertEquals(\"Bonjour\", foo.getExtension(FooExt.class).getValue2());\n+    }\n+\n+    @Test\n+    public void testUpdateWith2Extensions() throws IOException {\n+        Foo foo = new Foo();\n+        FooExt fooExt = new FooExt(false, \"Bonjour\");", "originalCommit": "564b518698ec568d1bb4101361b801f6af8875ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d6254d117b6a34bcb5f8e0ba77320582aeac47e5", "chunk": "diff --git a/commons/src/test/java/com/powsybl/commons/extensions/ExtensionTest.java b/commons/src/test/java/com/powsybl/commons/extensions/ExtensionTest.java\nindex 7b9a6c0544..dcb78eaf72 100644\n--- a/commons/src/test/java/com/powsybl/commons/extensions/ExtensionTest.java\n+++ b/commons/src/test/java/com/powsybl/commons/extensions/ExtensionTest.java\n\n@@ -115,7 +115,7 @@ public class ExtensionTest extends AbstractConverterTest {\n         FooExt fooExt = new FooExt(false, \"Bonjour\");\n         foo.addExtension(FooExt.class, fooExt);\n         FooDeserializer.update(getClass().getResourceAsStream(\"/extensionsUpdate.json\"), foo);\n-        assertEquals(true, foo.getExtension(FooExt.class).getValue());\n+        assertTrue(foo.getExtension(FooExt.class).getValue());\n         assertEquals(\"Bonjour\", foo.getExtension(FooExt.class).getValue2());\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA1Mzc0Ng==", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r404053746", "bodyText": "Same remark", "author": "MioRtia", "createdAt": "2020-04-06T12:32:05Z", "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionTest.java", "diffHunk": "@@ -109,4 +108,27 @@ public void testWriteJson() throws IOException {\n             assertTrue(notFound.contains(\"BarExt\"));\n         }\n     }\n+\n+    @Test\n+    public void testUpdateAndDeserialize() throws IOException {\n+        Foo foo = new Foo();\n+        FooExt fooExt = new FooExt(false, \"Bonjour\");\n+        foo.addExtension(FooExt.class, fooExt);\n+        FooDeserializer.update(getClass().getResourceAsStream(\"/extensionsUpdate.json\"), foo);\n+        assertEquals(true, foo.getExtension(FooExt.class).getValue());\n+        assertEquals(\"Bonjour\", foo.getExtension(FooExt.class).getValue2());\n+    }\n+\n+    @Test\n+    public void testUpdateWith2Extensions() throws IOException {\n+        Foo foo = new Foo();\n+        FooExt fooExt = new FooExt(false, \"Bonjour\");\n+        BarExt barExt = new BarExt(true);\n+        foo.addExtension(FooExt.class, fooExt);\n+        foo.addExtension(BarExt.class, barExt);\n+        FooDeserializer.update(getClass().getResourceAsStream(\"/extensions.json\"), foo);\n+        assertEquals(true, foo.getExtension(FooExt.class).getValue());\n+        assertEquals(\"Bonjour\", foo.getExtension(FooExt.class).getValue2());", "originalCommit": "564b518698ec568d1bb4101361b801f6af8875ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d6254d117b6a34bcb5f8e0ba77320582aeac47e5", "chunk": "diff --git a/commons/src/test/java/com/powsybl/commons/extensions/ExtensionTest.java b/commons/src/test/java/com/powsybl/commons/extensions/ExtensionTest.java\nindex 7b9a6c0544..dcb78eaf72 100644\n--- a/commons/src/test/java/com/powsybl/commons/extensions/ExtensionTest.java\n+++ b/commons/src/test/java/com/powsybl/commons/extensions/ExtensionTest.java\n\n@@ -115,7 +115,7 @@ public class ExtensionTest extends AbstractConverterTest {\n         FooExt fooExt = new FooExt(false, \"Bonjour\");\n         foo.addExtension(FooExt.class, fooExt);\n         FooDeserializer.update(getClass().getResourceAsStream(\"/extensionsUpdate.json\"), foo);\n-        assertEquals(true, foo.getExtension(FooExt.class).getValue());\n+        assertTrue(foo.getExtension(FooExt.class).getValue());\n         assertEquals(\"Bonjour\", foo.getExtension(FooExt.class).getValue2());\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA1MzgxNA==", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r404053814", "bodyText": "Same remark", "author": "MioRtia", "createdAt": "2020-04-06T12:32:11Z", "path": "commons/src/test/java/com/powsybl/commons/extensions/ExtensionTest.java", "diffHunk": "@@ -109,4 +108,27 @@ public void testWriteJson() throws IOException {\n             assertTrue(notFound.contains(\"BarExt\"));\n         }\n     }\n+\n+    @Test\n+    public void testUpdateAndDeserialize() throws IOException {\n+        Foo foo = new Foo();\n+        FooExt fooExt = new FooExt(false, \"Bonjour\");\n+        foo.addExtension(FooExt.class, fooExt);\n+        FooDeserializer.update(getClass().getResourceAsStream(\"/extensionsUpdate.json\"), foo);\n+        assertEquals(true, foo.getExtension(FooExt.class).getValue());\n+        assertEquals(\"Bonjour\", foo.getExtension(FooExt.class).getValue2());", "originalCommit": "564b518698ec568d1bb4101361b801f6af8875ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d6254d117b6a34bcb5f8e0ba77320582aeac47e5", "chunk": "diff --git a/commons/src/test/java/com/powsybl/commons/extensions/ExtensionTest.java b/commons/src/test/java/com/powsybl/commons/extensions/ExtensionTest.java\nindex 7b9a6c0544..dcb78eaf72 100644\n--- a/commons/src/test/java/com/powsybl/commons/extensions/ExtensionTest.java\n+++ b/commons/src/test/java/com/powsybl/commons/extensions/ExtensionTest.java\n\n@@ -115,7 +115,7 @@ public class ExtensionTest extends AbstractConverterTest {\n         FooExt fooExt = new FooExt(false, \"Bonjour\");\n         foo.addExtension(FooExt.class, fooExt);\n         FooDeserializer.update(getClass().getResourceAsStream(\"/extensionsUpdate.json\"), foo);\n-        assertEquals(true, foo.getExtension(FooExt.class).getValue());\n+        assertTrue(foo.getExtension(FooExt.class).getValue());\n         assertEquals(\"Bonjour\", foo.getExtension(FooExt.class).getValue2());\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDA1NTQyNg==", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r404055426", "bodyText": "Same remark", "author": "MioRtia", "createdAt": "2020-04-06T12:34:59Z", "path": "security-analysis/security-analysis-api/src/test/java/com/powsybl/security/json/JsonSecurityAnalysisParametersTest.java", "diffHunk": "@@ -61,12 +62,61 @@ public void readError() throws IOException {\n         }\n     }\n \n+    @Test\n+    public void updateExtensions() {\n+        SecurityAnalysisParameters parameters = new SecurityAnalysisParameters();\n+        DummyExtension extension = new DummyExtension();\n+        extension.setParameterBoolean(false);\n+        extension.setParameterString(\"Bonjour\");", "originalCommit": "564b518698ec568d1bb4101361b801f6af8875ea", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3209cad79e72b6df13e30963a1ed16056d13bb77", "chunk": "diff --git a/security-analysis/security-analysis-api/src/test/java/com/powsybl/security/json/JsonSecurityAnalysisParametersTest.java b/security-analysis/security-analysis-api/src/test/java/com/powsybl/security/json/JsonSecurityAnalysisParametersTest.java\nindex d87af0d3cb..36bf24afe7 100644\n--- a/security-analysis/security-analysis-api/src/test/java/com/powsybl/security/json/JsonSecurityAnalysisParametersTest.java\n+++ b/security-analysis/security-analysis-api/src/test/java/com/powsybl/security/json/JsonSecurityAnalysisParametersTest.java\n\n@@ -67,7 +67,7 @@ public class JsonSecurityAnalysisParametersTest extends AbstractConverterTest {\n         SecurityAnalysisParameters parameters = new SecurityAnalysisParameters();\n         DummyExtension extension = new DummyExtension();\n         extension.setParameterBoolean(false);\n-        extension.setParameterString(\"Bonjour\");\n+        extension.setParameterString(\"test\");\n         extension.setParameterDouble(2.8);\n         DummyExtension oldExtension = new DummyExtension(extension);\n         parameters.addExtension(DummyExtension.class, extension);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDEzNjQyMg==", "url": "https://github.com/powsybl/powsybl-core/pull/1248#discussion_r404136422", "bodyText": "I think it can be refactored with readExtensions and readExtension, it looks similar.", "author": "MioRtia", "createdAt": "2020-04-06T14:29:37Z", "path": "commons/src/main/java/com/powsybl/commons/json/JsonUtil.java", "diffHunk": "@@ -217,6 +217,52 @@ public static void writeOptionalIntegerField(JsonGenerator jsonGenerator, String\n         return notFound;\n     }\n \n+    public static <T extends Extendable> List<Extension<T>> updateExtensions(JsonParser parser, DeserializationContext context, T toUpdatedParameters) throws IOException {\n+        return updateExtensions(parser, context, SUPPLIER.get(), null, toUpdatedParameters);\n+    }\n+\n+    public static <T extends Extendable> List<Extension<T>> updateExtensions(JsonParser parser, DeserializationContext context,\n+                                                                             ExtensionProviders<? extends ExtensionJsonSerializer> supplier, T toUpdatedParameters) throws IOException {\n+        return updateExtensions(parser, context, supplier, null, toUpdatedParameters);\n+    }\n+\n+    public static <T extends Extendable> List<Extension<T>> updateExtensions(JsonParser parser, DeserializationContext context,\n+                                                                             ExtensionProviders<? extends ExtensionJsonSerializer> supplier, Set<String> extensionsNotFound, T toUpdatedParameters) throws IOException {\n+        Objects.requireNonNull(parser);\n+        Objects.requireNonNull(context);\n+        Objects.requireNonNull(supplier);\n+        Objects.requireNonNull(toUpdatedParameters);\n+\n+        List<Extension<T>> extensions = new ArrayList<>();\n+        while (parser.nextToken() != JsonToken.END_OBJECT) {\n+            Extension<T> extension = updateExtension(parser, context, supplier, extensionsNotFound, toUpdatedParameters);\n+            if (extension != null) {\n+                extensions.add(extension);\n+            }\n+        }\n+        return extensions;\n+    }\n+\n+    public static <T extends Extendable, E extends Extension<T>> E updateExtension(JsonParser parser, DeserializationContext context,\n+                                                                                   ExtensionProviders<? extends ExtensionJsonSerializer> supplier, Set<String> extensionsNotFound, T toUpdateExtensions) throws IOException {\n+        String extensionName = parser.getCurrentName();\n+        ExtensionJsonSerializer<T, E> extensionJsonSerializer = supplier.findProvider(extensionName);\n+        if (extensionJsonSerializer != null) {\n+            parser.nextToken();\n+            if (toUpdateExtensions.getExtensionByName(extensionName) != null) {\n+                return extensionJsonSerializer.deserializeAndUpdate(parser, context, (E) toUpdateExtensions.getExtensionByName(extensionName));\n+            } else {\n+                return extensionJsonSerializer.deserialize(parser, context);\n+            }\n+        } else {\n+            if (extensionsNotFound != null) {\n+                extensionsNotFound.add(extensionName);\n+            }\n+            skip(parser);\n+            return null;\n+        }\n+    }\n+", "originalCommit": "d6254d117b6a34bcb5f8e0ba77320582aeac47e5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3209cad79e72b6df13e30963a1ed16056d13bb77", "chunk": "diff --git a/commons/src/main/java/com/powsybl/commons/json/JsonUtil.java b/commons/src/main/java/com/powsybl/commons/json/JsonUtil.java\nindex 1e92ea7ea2..50e9a79756 100644\n--- a/commons/src/main/java/com/powsybl/commons/json/JsonUtil.java\n+++ b/commons/src/main/java/com/powsybl/commons/json/JsonUtil.java\n\n@@ -231,7 +231,6 @@ public final class JsonUtil {\n         Objects.requireNonNull(parser);\n         Objects.requireNonNull(context);\n         Objects.requireNonNull(supplier);\n-        Objects.requireNonNull(toUpdatedParameters);\n \n         List<Extension<T>> extensions = new ArrayList<>();\n         while (parser.nextToken() != JsonToken.END_OBJECT) {\n"}}, {"oid": "3209cad79e72b6df13e30963a1ed16056d13bb77", "url": "https://github.com/powsybl/powsybl-core/commit/3209cad79e72b6df13e30963a1ed16056d13bb77", "message": "correcting json parser #743\n\nSigned-off-by: Etienne Lesot <etienne.lesot@rte-france.com>", "committedDate": "2020-04-07T11:36:32Z", "type": "forcePushed"}, {"oid": "33c6205cd8ea2b93b3849b6d1f640b55a632e8ed", "url": "https://github.com/powsybl/powsybl-core/commit/33c6205cd8ea2b93b3849b6d1f640b55a632e8ed", "message": "correcting json parser #743\n\nSigned-off-by: Etienne Lesot <etienne.lesot@rte-france.com>", "committedDate": "2020-04-07T11:44:34Z", "type": "commit"}, {"oid": "33c6205cd8ea2b93b3849b6d1f640b55a632e8ed", "url": "https://github.com/powsybl/powsybl-core/commit/33c6205cd8ea2b93b3849b6d1f640b55a632e8ed", "message": "correcting json parser #743\n\nSigned-off-by: Etienne Lesot <etienne.lesot@rte-france.com>", "committedDate": "2020-04-07T11:44:34Z", "type": "forcePushed"}, {"oid": "c9f732f438d42106bbbee29744e068bd5be62536", "url": "https://github.com/powsybl/powsybl-core/commit/c9f732f438d42106bbbee29744e068bd5be62536", "message": "Add some javadoc to encourage implementation of update method.\nRemove minor changes unrelated to this feature.\n\nSigned-off-by: Sylvain Leclerc <sylvain.leclerc@rte-france.com>", "committedDate": "2020-04-08T09:42:38Z", "type": "commit"}, {"oid": "f6d85bb95fae0d717b69f9515628236802acc4c5", "url": "https://github.com/powsybl/powsybl-core/commit/f6d85bb95fae0d717b69f9515628236802acc4c5", "message": "Merge branch 'master' into json_parser", "committedDate": "2020-04-09T08:44:15Z", "type": "commit"}, {"oid": "bf7da23a75bd331623110f3947937a0491f09fa1", "url": "https://github.com/powsybl/powsybl-core/commit/bf7da23a75bd331623110f3947937a0491f09fa1", "message": "Merge branch 'master' into json_parser", "committedDate": "2020-04-14T15:35:25Z", "type": "commit"}, {"oid": "c7722257719d292d50c885511d48df4b6ad2b68f", "url": "https://github.com/powsybl/powsybl-core/commit/c7722257719d292d50c885511d48df4b6ad2b68f", "message": "Merge branch 'master' into json_parser", "committedDate": "2020-04-15T07:59:55Z", "type": "commit"}, {"oid": "66d7f0bed93109bc8a2f976c4464cfba525193aa", "url": "https://github.com/powsybl/powsybl-core/commit/66d7f0bed93109bc8a2f976c4464cfba525193aa", "message": "Merge branch 'master' into json_parser", "committedDate": "2020-04-15T08:06:11Z", "type": "commit"}]}