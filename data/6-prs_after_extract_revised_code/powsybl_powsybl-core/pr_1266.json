{"pr_number": 1266, "pr_title": "[PERF] Context logs : postpone String building and check log level", "pr_createdAt": "2020-04-08T07:27:40Z", "pr_url": "https://github.com/powsybl/powsybl-core/pull/1266", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM0OTczNQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405349735", "bodyText": "In that specific case, a simple concatenation should be more efficient. What do you think?", "author": "mathbagu", "createdAt": "2020-04-08T08:31:24Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Conversion.java", "diffHunk": "@@ -336,8 +337,8 @@ private void newConvertTransformers(Context context) {\n             } else if (ends.size() == 3) {\n                 c = new NewThreeWindingsTransformerConversion(ends, context);\n             } else {\n-                String what = String.format(\"PowerTransformer %s\", t);\n-                String reason = String.format(\"Has %d ends. Only 2 or 3 ends are supported\", ends.size());\n+                Supplier<String> what = () -> String.format(\"PowerTransformer %s\", t);", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3362184f8c0782e58ac6a121096a2f4b5724a87a", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Conversion.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Conversion.java\nindex a08e52088..6bf610caa 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Conversion.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Conversion.java\n\n@@ -337,7 +337,7 @@ public class Conversion {\n             } else if (ends.size() == 3) {\n                 c = new NewThreeWindingsTransformerConversion(ends, context);\n             } else {\n-                Supplier<String> what = () -> String.format(\"PowerTransformer %s\", t);\n+                String what = \"PowerTransformer \" + t;\n                 Supplier<String> reason = () -> String.format(\"Has %d ends. Only 2 or 3 ends are supported\", ends.size());\n                 context.invalid(what, reason);\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM0OTgzMw==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405349833", "bodyText": "Same question here", "author": "mathbagu", "createdAt": "2020-04-08T08:31:35Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Conversion.java", "diffHunk": "@@ -365,8 +366,8 @@ private void convertTransformers(Context context) {\n                     } else if (ends.size() == 3) {\n                         c = new ThreeWindingsTransformerConversion(ends, context);\n                     } else {\n-                        String what = String.format(\"PowerTransformer %s\", t);\n-                        String reason = String.format(\"Has %d ends. Only 2 or 3 ends are supported\",\n+                        Supplier<String> what = () -> String.format(\"PowerTransformer %s\", t);", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3362184f8c0782e58ac6a121096a2f4b5724a87a", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Conversion.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Conversion.java\nindex a08e52088..6bf610caa 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Conversion.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Conversion.java\n\n@@ -366,7 +366,7 @@ public class Conversion {\n                     } else if (ends.size() == 3) {\n                         c = new ThreeWindingsTransformerConversion(ends, context);\n                     } else {\n-                        Supplier<String> what = () -> String.format(\"PowerTransformer %s\", t);\n+                        String what = \"PowerTransformer \" + t;\n                         Supplier<String> reason = () -> String.format(\"Has %d ends. Only 2 or 3 ends are supported\",\n                                 ends.size());\n                         context.invalid(what, reason);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MDI2Mw==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405350263", "bodyText": "Same question here.", "author": "mathbagu", "createdAt": "2020-04-08T08:32:15Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CurrentLimitsMapping.java", "diffHunk": "@@ -32,7 +32,7 @@ public CurrentLimitsAdder getCurrentLimitsAdder(String id, Supplier<CurrentLimit\n     void addAll() {\n         for (Map.Entry<String, CurrentLimitsAdder> entry : adders.entrySet()) {\n             if (Double.isNaN(entry.getValue().getPermanentLimit())) {\n-                context.ignored(String.format(\"Operational Limit Set of %s\", entry.getKey()), \"An operational limit set must at least contain one value for permanent limit.\");\n+                context.ignored(() -> String.format(\"Operational Limit Set of %s\", entry.getKey()), () -> \"An operational limit set must at least contain one value for permanent limit.\");", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3362184f8c0782e58ac6a121096a2f4b5724a87a", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CurrentLimitsMapping.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CurrentLimitsMapping.java\nindex 3091b1aac..ca71cd6da 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CurrentLimitsMapping.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/CurrentLimitsMapping.java\n\n@@ -32,7 +32,7 @@ public class CurrentLimitsMapping {\n     void addAll() {\n         for (Map.Entry<String, CurrentLimitsAdder> entry : adders.entrySet()) {\n             if (Double.isNaN(entry.getValue().getPermanentLimit())) {\n-                context.ignored(() -> String.format(\"Operational Limit Set of %s\", entry.getKey()), () -> \"An operational limit set must at least contain one value for permanent limit.\");\n+                context.ignored(\"Operational Limit Set of \" + entry.getKey(), \"An operational limit set must at least contain one value for permanent limit.\");\n             } else {\n                 entry.getValue().add();\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MDk2Ng==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405350966", "bodyText": "Introduce a version without supplier: there is no reason to create a supplier here, a simple String is OK as there is no parameters", "author": "mathbagu", "createdAt": "2020-04-08T08:33:19Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForGenerators.java", "diffHunk": "@@ -96,7 +96,7 @@ private boolean setRegulatingControlVoltage(String controlId,\n         if (control.targetValue <= 0.0 || Double.isNaN(control.targetValue)) {\n             targetV = terminal.getVoltageLevel().getNominalV();\n             terminal = gen.getTerminal();\n-            context.fixed(controlId, \"Invalid value for regulating target value. Regulation considered as local.\", control.targetValue, targetV);\n+            context.fixed(controlId, () -> \"Invalid value for regulating target value. Regulation considered as local.\", control.targetValue, targetV);", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3362184f8c0782e58ac6a121096a2f4b5724a87a", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForGenerators.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForGenerators.java\nindex 5b53c5686..cb2cd1e21 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForGenerators.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForGenerators.java\n\n@@ -96,7 +96,7 @@ public class RegulatingControlMappingForGenerators {\n         if (control.targetValue <= 0.0 || Double.isNaN(control.targetValue)) {\n             targetV = terminal.getVoltageLevel().getNominalV();\n             terminal = gen.getTerminal();\n-            context.fixed(controlId, () -> \"Invalid value for regulating target value. Regulation considered as local.\", control.targetValue, targetV);\n+            context.fixed(controlId, \"Invalid value for regulating target value. Regulation considered as local.\", control.targetValue, targetV);\n         } else {\n             targetV = control.targetValue;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MTQzNQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405351435", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:34:04Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForTransformers.java", "diffHunk": "@@ -277,7 +277,7 @@ private void setPhaseTapChangerControl(boolean regulating, CgmesRegulatingContro\n         } else if (control.mode.endsWith(\"activepower\")) {\n             okSet = setPtcRegulatingControlActivePower(regulating, rc.ltcFlag, control, ptc, context);\n         } else if (!control.mode.endsWith(\"fixed\")) {\n-            context.fixed(control.mode, \"Unsupported regulating mode for Phase tap changer. Considered as FIXED_TAP\");\n+            context.fixed(control.mode, () -> \"Unsupported regulating mode for Phase tap changer. Considered as FIXED_TAP\");", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3362184f8c0782e58ac6a121096a2f4b5724a87a", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForTransformers.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForTransformers.java\nindex 744da9050..1bb5ebf2e 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForTransformers.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/RegulatingControlMappingForTransformers.java\n\n@@ -277,7 +277,7 @@ public class RegulatingControlMappingForTransformers {\n         } else if (control.mode.endsWith(\"activepower\")) {\n             okSet = setPtcRegulatingControlActivePower(regulating, rc.ltcFlag, control, ptc, context);\n         } else if (!control.mode.endsWith(\"fixed\")) {\n-            context.fixed(control.mode, () -> \"Unsupported regulating mode for Phase tap changer. Considered as FIXED_TAP\");\n+            context.fixed(control.mode, \"Unsupported regulating mode for Phase tap changer. Considered as FIXED_TAP\");\n         }\n         control.setCorrectlySet(okSet);\n     }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MTYwMw==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405351603", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:34:21Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/AbstractBranchConversion.java", "diffHunk": "@@ -31,11 +31,11 @@ public boolean valid() {\n         String node2 = nodeId(2);\n         if (context.boundary().containsNode(node1)\n                 || context.boundary().containsNode(node2)) {\n-            invalid(\"Has \" + nodeIdPropertyName() + \" on boundary\");\n+            invalid(() -> \"Has \" + nodeIdPropertyName() + \" on boundary\");\n             return false;\n         }\n         if (!p.containsKey(\"r\") || !p.containsKey(\"x\")) {\n-            invalid(\"No r,x attributes\");\n+            invalid(() -> \"No r,x attributes\");", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3362184f8c0782e58ac6a121096a2f4b5724a87a", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/AbstractBranchConversion.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/AbstractBranchConversion.java\nindex 0066bae51..5077103a2 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/AbstractBranchConversion.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/AbstractBranchConversion.java\n\n@@ -31,11 +31,11 @@ public abstract class AbstractBranchConversion extends AbstractConductingEquipme\n         String node2 = nodeId(2);\n         if (context.boundary().containsNode(node1)\n                 || context.boundary().containsNode(node2)) {\n-            invalid(() -> \"Has \" + nodeIdPropertyName() + \" on boundary\");\n+            invalid(\"Has \" + nodeIdPropertyName() + \" on boundary\");\n             return false;\n         }\n         if (!p.containsKey(\"r\") || !p.containsKey(\"x\")) {\n-            invalid(() -> \"No r,x attributes\");\n+            invalid(\"No r,x attributes\");\n             return false;\n         }\n         return true;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MTcyMQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405351721", "bodyText": "A simple concatenation seems ok", "author": "mathbagu", "createdAt": "2020-04-08T08:34:36Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/AbstractObjectConversion.java", "diffHunk": "@@ -62,46 +63,46 @@ public static int fromContinuous(double value) {\n \n     public boolean presentMandatoryProperty(String pname) {\n         if (!p.containsKey(pname)) {\n-            invalid(String.format(\"Missing property %s\", pname));\n+            invalid(() -> String.format(\"Missing property %s\", pname));", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3362184f8c0782e58ac6a121096a2f4b5724a87a", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/AbstractObjectConversion.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/AbstractObjectConversion.java\nindex c713bc8a3..153ae2877 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/AbstractObjectConversion.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/AbstractObjectConversion.java\n\n@@ -63,7 +63,7 @@ public abstract class AbstractObjectConversion {\n \n     public boolean presentMandatoryProperty(String pname) {\n         if (!p.containsKey(pname)) {\n-            invalid(() -> String.format(\"Missing property %s\", pname));\n+            invalid(\"Missing property \" + pname);\n             return false;\n         }\n         return true;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MTkzMQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405351931", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:34:58Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/AbstractReactiveLimitsOwnerConversion.java", "diffHunk": "@@ -78,7 +79,7 @@ protected void convertReactiveLimits(Generator g) {\n                 }\n                 rcca.add();\n             } else if (qRanges.size() == 1) {\n-                fixed(\"reactive capability curve\", \"only one point\");\n+                fixed(\"reactive capability curve\", () -> \"only one point\");", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3362184f8c0782e58ac6a121096a2f4b5724a87a", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/AbstractReactiveLimitsOwnerConversion.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/AbstractReactiveLimitsOwnerConversion.java\nindex 1465703da..24af66aad 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/AbstractReactiveLimitsOwnerConversion.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/AbstractReactiveLimitsOwnerConversion.java\n\n@@ -79,7 +79,7 @@ public abstract class AbstractReactiveLimitsOwnerConversion extends AbstractCond\n                 }\n                 rcca.add();\n             } else if (qRanges.size() == 1) {\n-                fixed(\"reactive capability curve\", () -> \"only one point\");\n+                fixed(\"reactive capability curve\", \"only one point\");\n                 Map.Entry<Double, Range<Double>> e = qRanges.entrySet().iterator().next();\n                 Range<Double> qRange = e.getValue();\n                 g.newMinMaxReactiveLimits()\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MjAxMg==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405352012", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:35:07Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/AcDcConverterConversion.java", "diffHunk": "@@ -32,7 +32,7 @@ public boolean valid() {\n             return false;\n         }\n         if (converterType == null) {\n-            invalid(String.format(\"Type %s\", p.getLocal(\"type\")));\n+            invalid(() -> String.format(\"Type %s\", p.getLocal(\"type\")));", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3362184f8c0782e58ac6a121096a2f4b5724a87a", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/AcDcConverterConversion.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/hvdc/AcDcConverterConversion.java\nsimilarity index 62%\nrename from cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/AcDcConverterConversion.java\nrename to cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/hvdc/AcDcConverterConversion.java\nindex 57505d88f..d12e5786f 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/AcDcConverterConversion.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/hvdc/AcDcConverterConversion.java\n\n@@ -32,21 +45,15 @@ public class AcDcConverterConversion extends AbstractConductingEquipmentConversi\n             return false;\n         }\n         if (converterType == null) {\n-            invalid(() -> String.format(\"Type %s\", p.getLocal(\"type\")));\n+            invalid(\"Type \" + p.getLocal(\"type\"));\n             return false;\n         }\n         return true;\n     }\n \n-    enum VscRegulation {\n-        REACTIVE_POWER,\n-        VOLTAGE\n-    }\n-\n     @Override\n     public void convert() {\n         Objects.requireNonNull(converterType);\n-        HvdcConverterStation<?> c = null;\n         if (converterType.equals(HvdcType.VSC)) {\n             VscRegulation vscRegulation = decodeVscRegulation(p.getLocal(\"qPccControl\"));\n             boolean voltageRegulatorOn = false;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MjExOA==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405352118", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:35:18Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/DcLineSegmentConversion.java", "diffHunk": "@@ -213,7 +213,7 @@ private double r() {\n         double r = p.asDouble(\"r\", 0);\n         if (r < 0) {\n             double r1 = 0.1;\n-            fixed(\"resistance\", \"was negative\", r, r1);\n+            fixed(\"resistance\", () -> \"was negative\", r, r1);", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3362184f8c0782e58ac6a121096a2f4b5724a87a", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/DcLineSegmentConversion.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/DcLineSegmentConversion.java\ndeleted file mode 100644\nindex 225e6ed40..000000000\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/DcLineSegmentConversion.java\n+++ /dev/null\n\n@@ -1,263 +0,0 @@\n-/**\n- * Copyright (c) 2017-2018, RTE (http://www.rte-france.com)\n- * This Source Code Form is subject to the terms of the Mozilla Public\n- * License, v. 2.0. If a copy of the MPL was not distributed with this\n- * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n- */\n-\n-package com.powsybl.cgmes.conversion.elements;\n-\n-import java.util.Objects;\n-\n-import com.powsybl.cgmes.conversion.Context;\n-import com.powsybl.cgmes.model.CgmesNames;\n-import com.powsybl.commons.PowsyblException;\n-import com.powsybl.iidm.network.HvdcConverterStation;\n-import com.powsybl.iidm.network.HvdcLine;\n-import com.powsybl.iidm.network.HvdcLineAdder;\n-import com.powsybl.iidm.network.LccConverterStation;\n-import com.powsybl.triplestore.api.PropertyBag;\n-\n-/**\n- * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n- */\n-public class DcLineSegmentConversion extends AbstractIdentifiedObjectConversion {\n-\n-    private static final String TARGET_PPCC = \"targetPpcc\";\n-\n-    public DcLineSegmentConversion(PropertyBag l, Context context) {\n-        super(\"DCLineSegment\", l, context);\n-\n-        iconverter1 = context.dc().converterAt(l.getId(\"DCTerminal1\"));\n-        iconverter2 = context.dc().converterAt(l.getId(\"DCTerminal2\"));\n-        cconverter1 = context.dc().cgmesConverterFor(iconverter1);\n-        cconverter2 = context.dc().cgmesConverterFor(iconverter2);\n-    }\n-\n-    private static double getPAc(PropertyBag p) {\n-        return Double.isNaN(p.asDouble(TARGET_PPCC)) ? 0 : p.asDouble(TARGET_PPCC); // targetPpcc is the real power injection target in the AC grid in CGMES\n-    }\n-\n-    private void updateLossFactor1(double pAC1, double poleLossP1, HvdcLine.ConvertersMode mode) {\n-        if (mode.equals(HvdcLine.ConvertersMode.SIDE_1_RECTIFIER_SIDE_2_INVERTER)) { // pAC1 > 0\n-            iconverter1.setLossFactor((float) (poleLossP1 / pAC1) * 100);\n-        } else if (mode.equals(HvdcLine.ConvertersMode.SIDE_1_INVERTER_SIDE_2_RECTIFIER) && Math.abs(pAC1) + poleLossP1 != 0) { // pAC1 < 0\n-            iconverter1.setLossFactor((float) (poleLossP1 / (Math.abs(pAC1) + poleLossP1)) * 100);\n-        }\n-    }\n-\n-    private void updateLossFactor1FromPAC2(double pAC2, double poleLossP1, double poleLossP2, HvdcLine.ConvertersMode mode) {\n-        if (mode.equals(HvdcLine.ConvertersMode.SIDE_1_RECTIFIER_SIDE_2_INVERTER) && (Math.abs(pAC2) + poleLossP2 + poleLossP1) != 0) { // pAC2 < 0\n-            // lossFactor1 = poleLossP1 / pAC1 * 100\n-            // pAC1 = pDC + poleLossP1 = pAC2 + poleLossP2 + poleLossP1\n-            iconverter1.setLossFactor((float) (poleLossP1 / (Math.abs(pAC2) + poleLossP2 + poleLossP1)) * 100);\n-        } else if (mode.equals(HvdcLine.ConvertersMode.SIDE_1_INVERTER_SIDE_2_RECTIFIER) && (pAC2 - poleLossP2) != 0) { // pAC2 > 0\n-            // lossFactor1 = poleLossP1 / pDC * 100\n-            // pDC = pAC2 - poleLossP2\n-            iconverter1.setLossFactor((float) (poleLossP1 / (pAC2 - poleLossP2)) * 100);\n-        }\n-    }\n-\n-    private void updateLossFactor2(double pAC2, double poleLossP2, HvdcLine.ConvertersMode mode) {\n-        if (mode.equals(HvdcLine.ConvertersMode.SIDE_1_INVERTER_SIDE_2_RECTIFIER)) { // pAC2 > 0\n-            iconverter2.setLossFactor((float) (poleLossP2 / pAC2) * 100);\n-        } else if (mode.equals(HvdcLine.ConvertersMode.SIDE_1_RECTIFIER_SIDE_2_INVERTER) && Math.abs(pAC2) + poleLossP2 != 0) { // pAC2 < 0\n-            iconverter2.setLossFactor((float) (poleLossP2 / (Math.abs(pAC2) + poleLossP2)) * 100);\n-        }\n-    }\n-\n-    private void updateLossFactor2FromPAC1(double pAC1, double poleLossP1, double poleLossP2, HvdcLine.ConvertersMode mode) {\n-        if (mode.equals(HvdcLine.ConvertersMode.SIDE_1_RECTIFIER_SIDE_2_INVERTER) && (pAC1 - poleLossP1) != 0) { // pAC1 > 0\n-            // lossFactor2 = poleLossP2 / pDC * 100\n-            // pDC = pAC1 - poleLossP1\n-            iconverter2.setLossFactor((float) (poleLossP2 / (pAC1 - poleLossP1)) * 100);\n-        } else if (mode.equals(HvdcLine.ConvertersMode.SIDE_1_INVERTER_SIDE_2_RECTIFIER) && (Math.abs(pAC1) + poleLossP1 + poleLossP2) != 0) { // pAC1 < 0\n-            // lossFactor2 = poleLossP2 / (pDC + poleLossP2) * 100\n-            // pDC = pAC1 + poleLossP1\n-            iconverter2.setLossFactor((float) (poleLossP2 / (Math.abs(pAC1) + poleLossP1 + poleLossP2)) * 100);\n-        }\n-    }\n-\n-    private void updatePowerFactor() {\n-        if (iconverter1.getHvdcType() == HvdcConverterStation.HvdcType.LCC) {\n-            double powerFactor1 = iconverter1.getTerminal().getP() / Math.hypot(iconverter1.getTerminal().getP(), iconverter1.getTerminal().getQ());\n-            if (!Double.isNaN(powerFactor1)) {\n-                ((LccConverterStation) iconverter1).setPowerFactor((float) powerFactor1);\n-            }\n-            double powerFactor2 = iconverter2.getTerminal().getP() / Math.hypot(iconverter2.getTerminal().getP(), iconverter2.getTerminal().getQ());\n-            if (!Double.isNaN(powerFactor2)) {\n-                ((LccConverterStation) iconverter2).setPowerFactor((float) powerFactor2);\n-            }\n-        }\n-    }\n-\n-    private void updateConverterStations(double pAC1, double pAC2, double poleLossP1, double poleLossP2, HvdcLine.ConvertersMode mode) {\n-\n-        // update loss factors\n-        if (pAC1 != 0 && pAC2 != 0) {\n-            // we only keep one as we are not sure if pAC1 and pAC2 are consistent\n-            if (mode.equals(HvdcLine.ConvertersMode.SIDE_1_RECTIFIER_SIDE_2_INVERTER)) { // we ignore pAC2\n-                updateLossFactor1(pAC1, poleLossP1, mode);\n-                updateLossFactor2FromPAC1(pAC1, poleLossP1, poleLossP2, mode);\n-            } else if (mode.equals(HvdcLine.ConvertersMode.SIDE_1_INVERTER_SIDE_2_RECTIFIER)) { // we ignore pAC1\n-                updateLossFactor1FromPAC2(pAC2, poleLossP1, poleLossP2, mode);\n-                updateLossFactor2(pAC2, poleLossP2, mode);\n-            }\n-        } else if (pAC1 != 0) { // pAC2 == 0\n-            updateLossFactor1(pAC1, poleLossP1, mode);\n-            updateLossFactor2FromPAC1(pAC1, poleLossP1, poleLossP2, mode);\n-        } else if (pAC2 != 0) { // pAC1 == 0\n-            updateLossFactor1FromPAC2(pAC2, poleLossP1, poleLossP2, mode);\n-            updateLossFactor2(pAC2, poleLossP2, mode);\n-        } // else (i.e. pAC1 == 0 && pAC2 == 0) do nothing: loss factors are null and stations are probably disconnected\n-\n-        // update power factors\n-        updatePowerFactor();\n-    }\n-\n-    private static double getPDc(double pAC1, double pAC2, double poleLossP1, double poleLossP2, HvdcLine.ConvertersMode mode) {\n-        if (mode.equals(HvdcLine.ConvertersMode.SIDE_1_RECTIFIER_SIDE_2_INVERTER)) {\n-            if (pAC1 != 0) {\n-                return pAC1 - poleLossP1;\n-            } else if (pAC2 != 0) {\n-                return Math.abs(pAC2) + poleLossP2;\n-            }\n-        } else if (mode.equals(HvdcLine.ConvertersMode.SIDE_1_INVERTER_SIDE_2_RECTIFIER)) {\n-            if (pAC2 != 0) {\n-                return pAC2 - poleLossP2;\n-            } else if (pAC1 != 0) {\n-                return Math.abs(pAC1) + poleLossP1;\n-            }\n-        }\n-        return 0;\n-    }\n-\n-    private static double getMaxP(double pAC1, double pAC2, HvdcLine.ConvertersMode mode) {\n-        if (mode.equals(HvdcLine.ConvertersMode.SIDE_1_RECTIFIER_SIDE_2_INVERTER)) {\n-            if (pAC1 != 0) {\n-                return 1.2 * pAC1;\n-            }\n-            return 1.2 * Math.abs(pAC2);\n-        }\n-        if (pAC2 != 0) {\n-            return 1.2 * pAC2;\n-        }\n-        return 1.2 * Math.abs(pAC1);\n-    }\n-\n-    @Override\n-    public boolean valid() {\n-        if (iconverter1 == null || iconverter2 == null) {\n-            if (iconverter1 == null) {\n-                missing(\"Converter1\");\n-            } else {\n-                iconverter1.remove();\n-            }\n-            if (iconverter2 == null) {\n-                missing(\"Converter2\");\n-            } else {\n-                iconverter2.remove();\n-            }\n-        } else if (!iconverter1.getHvdcType().equals(iconverter2.getHvdcType())) {\n-            iconverter1.remove();\n-            iconverter2.remove();\n-            invalid(() -> String.format(\"HVDC converter station %s and HVDC converter station %s are linked and of different types\",\n-                    iconverter1.getId(), iconverter2.getId()));\n-        } else {\n-            return true;\n-        }\n-        return false;\n-    }\n-\n-    @Override\n-    public void convert() {\n-        Objects.requireNonNull(iconverter1);\n-        Objects.requireNonNull(iconverter2);\n-\n-        HvdcLine.ConvertersMode mode = decodeMode();\n-\n-        // poleLossP is the active power loss at a DC Pole\n-        // for lossless operation: P(DC) = P(AC) => lossFactor = 0\n-        // for rectifier operation (conversion from AC to DC) with losses: P(DC) = P(AC) - poleLossP\n-        // In IIDM, for rectifier operation P(DC) / P(AC) = 1 - lossFactor / 100\n-        // => P(DC) / P(AC) = 1 - poleLossP / P(AC) = 1 - lossFactor / 100\n-        // for inverter operation (conversion from DC to AC) with losses: P(DC) = P(AC) + poleLossP\n-        // In IIDM, for inverter operation P(AC) / P(DC) = 1 - lossFactor / 100\n-        // => P(AC) / P(DC) = 1 - poleLossP / P(DC) = 1 - poleLossP / (P(AC) + poleLossP) = 1 - lossFactor / 100\n-        double poleLossP1 = cconverter1.asDouble(\"poleLossP\");\n-        double poleLossP2 = cconverter2.asDouble(\"poleLossP\");\n-\n-        // load sign convention is used i.e. positive sign means flow out from a node\n-        // i.e. pACx >= 0 if converterx is rectifier and pACx <= 0 if converterx is inverter\n-        double pAC1 = getPAc(cconverter1);\n-        double pAC2 = getPAc(cconverter2);\n-\n-        updateConverterStations(pAC1, pAC2, poleLossP1, poleLossP2, mode);\n-\n-        double maxP = getMaxP(pAC1, pAC2, mode); // arbitrary value because there is no maxP attribute in CGMES\n-        missing(\"maxP\", maxP);\n-\n-        HvdcLineAdder adder = context.network().newHvdcLine()\n-                .setR(r())\n-                .setNominalV(ratedUdc())\n-                .setActivePowerSetpoint(getPDc(pAC1, pAC2, poleLossP1, poleLossP2, mode))\n-                .setMaxP(maxP)\n-                .setConvertersMode(mode)\n-                .setConverterStationId1(iconverter1.getId())\n-                .setConverterStationId2(iconverter2.getId());\n-        identify(adder);\n-        adder.add();\n-    }\n-\n-    private double r() {\n-        double r = p.asDouble(\"r\", 0);\n-        if (r < 0) {\n-            double r1 = 0.1;\n-            fixed(\"resistance\", () -> \"was negative\", r, r1);\n-            r = r1;\n-        }\n-        return r;\n-    }\n-\n-    private double ratedUdc() {\n-        double ratedUdc1 = cconverter1.asDouble(CgmesNames.RATED_UDC);\n-        double ratedUdc2 = cconverter2.asDouble(CgmesNames.RATED_UDC);\n-        if (ratedUdc1 != 0) {\n-            return ratedUdc1;\n-        }\n-        return ratedUdc2;\n-    }\n-\n-    private HvdcLine.ConvertersMode decodeMode() {\n-        String mode1 = cconverter1.getLocal(\"operatingMode\");\n-        String mode2 = cconverter2.getLocal(\"operatingMode\");\n-\n-        if (iconverter1.getHvdcType().equals(HvdcConverterStation.HvdcType.LCC)) {\n-            if (inverter(mode1) && rectifier(mode2)) {\n-                return HvdcLine.ConvertersMode.SIDE_1_INVERTER_SIDE_2_RECTIFIER;\n-            } else if (rectifier(mode1) && inverter(mode2)) {\n-                return HvdcLine.ConvertersMode.SIDE_1_RECTIFIER_SIDE_2_INVERTER;\n-            }\n-        } else {\n-            if (cconverter1.asDouble(TARGET_PPCC) > 0 || cconverter2.asDouble(TARGET_PPCC) < 0) {\n-                return HvdcLine.ConvertersMode.SIDE_1_RECTIFIER_SIDE_2_INVERTER;\n-            } else {\n-                return HvdcLine.ConvertersMode.SIDE_1_INVERTER_SIDE_2_RECTIFIER;\n-            }\n-        }\n-        throw new PowsyblException(\"Unexpected HVDC type: \" + iconverter1.getHvdcType());\n-    }\n-\n-    private static boolean inverter(String operatingMode) {\n-        return operatingMode.toLowerCase().endsWith(\"inverter\");\n-    }\n-\n-    private static boolean rectifier(String operatingMode) {\n-        return operatingMode.toLowerCase().endsWith(\"rectifier\");\n-    }\n-\n-    private HvdcConverterStation<?> iconverter1;\n-    private HvdcConverterStation<?> iconverter2;\n-    private PropertyBag cconverter1;\n-    private PropertyBag cconverter2;\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MjE3OQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405352179", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:35:23Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/EquivalentBranchConversion.java", "diffHunk": "@@ -38,7 +38,7 @@ public void convert() {\n             // then EquivalentBranch.r21 is assumed equal to EquivalentBranch.r.\n             // Usage rule:\n             // EquivalentBranch is a result of network reduction prior to the data exchange.\n-            invalid(\"Impedance 21 different of impedance 12 not supported\");\n+            invalid(() -> \"Impedance 21 different of impedance 12 not supported\");", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3362184f8c0782e58ac6a121096a2f4b5724a87a", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/EquivalentBranchConversion.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/EquivalentBranchConversion.java\nindex 7eb49b92c..3080f4b13 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/EquivalentBranchConversion.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/EquivalentBranchConversion.java\n\n@@ -38,7 +38,7 @@ public class EquivalentBranchConversion extends AbstractBranchConversion {\n             // then EquivalentBranch.r21 is assumed equal to EquivalentBranch.r.\n             // Usage rule:\n             // EquivalentBranch is a result of network reduction prior to the data exchange.\n-            invalid(() -> \"Impedance 21 different of impedance 12 not supported\");\n+            invalid(\"Impedance 21 different of impedance 12 not supported\");\n         }\n         double bch = 0;\n         double gch = 0;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MjIyNg==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405352226", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:35:29Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/EquivalentInjectionConversion.java", "diffHunk": "@@ -50,7 +50,7 @@ public void convert() {\n         if (terminalConnected() && regulationStatus) {\n             targetV = p.asDouble(REGULATION_TARGET);\n             if (targetV == 0) {\n-                fixed(REGULATION_TARGET, \"Target voltage value can not be zero\", targetV,\n+                fixed(REGULATION_TARGET, () -> \"Target voltage value can not be zero\", targetV,", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3362184f8c0782e58ac6a121096a2f4b5724a87a", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/EquivalentInjectionConversion.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/EquivalentInjectionConversion.java\nindex 17d65c2f6..65533b65b 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/EquivalentInjectionConversion.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/EquivalentInjectionConversion.java\n\n@@ -50,7 +50,7 @@ public class EquivalentInjectionConversion extends AbstractReactiveLimitsOwnerCo\n         if (terminalConnected() && regulationStatus) {\n             targetV = p.asDouble(REGULATION_TARGET);\n             if (targetV == 0) {\n-                fixed(REGULATION_TARGET, () -> \"Target voltage value can not be zero\", targetV,\n+                fixed(REGULATION_TARGET, \"Target voltage value can not be zero\", targetV,\n                         voltageLevel().getNominalV());\n                 targetV = voltageLevel().getNominalV();\n             }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MjYzNQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405352635", "bodyText": "I don't understand why you change this.", "author": "mathbagu", "createdAt": "2020-04-08T08:36:09Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/NodeConversion.java", "diffHunk": "@@ -163,15 +164,13 @@ public void setVoltageAngleNodeBreaker() {\n         VoltageLevel.NodeBreakerView topo = vl.getNodeBreakerView();\n         String connectivityNode = id;\n         int iidmNode = context.nodeMapping().iidmNodeForConnectivityNode(connectivityNode, vl);\n-        if (!topo.hasAttachedEquipment(iidmNode)) {\n-            LOG.error(\"ConnectivityNode {} with voltage and angle is not valid in IIDM\", connectivityNode);\n-            return;\n-        }\n         // To obtain a bus for which we want to set voltage:\n         // If there no Terminal at this IIDM node,\n         // then find from it the first connected node with a Terminal\n-        Terminal t = topo.getOptionalTerminal(iidmNode)\n-                .orElseGet(() -> new FirstTerminalTraverser(topo, iidmNode).firstTerminal());\n+        Terminal t = topo.getTerminal(iidmNode);\n+        if (t == null) {\n+            t = new FirstTerminalTraverser(topo, iidmNode).firstTerminal();\n+        }", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU5MjEzMA==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405592130", "bodyText": "@lcosson: any feedback?", "author": "mathbagu", "createdAt": "2020-04-08T15:00:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MjYzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyNTQ3Mg==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r406025472", "bodyText": "Very sorry about that, it looks like I miss-merged this file. Thank God for PR's!\nCorrecting...", "author": "lcosson", "createdAt": "2020-04-09T08:02:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MjYzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "3362184f8c0782e58ac6a121096a2f4b5724a87a", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/NodeConversion.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/NodeConversion.java\nindex 74fbbdf1e..d0f63323a 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/NodeConversion.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/NodeConversion.java\n\n@@ -164,13 +164,15 @@ public class NodeConversion extends AbstractIdentifiedObjectConversion {\n         VoltageLevel.NodeBreakerView topo = vl.getNodeBreakerView();\n         String connectivityNode = id;\n         int iidmNode = context.nodeMapping().iidmNodeForConnectivityNode(connectivityNode, vl);\n+        if (!topo.hasAttachedEquipment(iidmNode)) {\n+            LOG.error(\"ConnectivityNode {} with voltage and angle is not valid in IIDM\", connectivityNode);\n+            return;\n+        }\n         // To obtain a bus for which we want to set voltage:\n         // If there no Terminal at this IIDM node,\n         // then find from it the first connected node with a Terminal\n-        Terminal t = topo.getTerminal(iidmNode);\n-        if (t == null) {\n-            t = new FirstTerminalTraverser(topo, iidmNode).firstTerminal();\n-        }\n+        Terminal t = topo.getOptionalTerminal(iidmNode)\n+                .orElseGet(() -> new FirstTerminalTraverser(topo, iidmNode).firstTerminal());\n         if (t == null) {\n             LOG.error(\"Can't find a Terminal to obtain a Bus to set Voltage, Angle. ConnectivityNode {}\", id);\n             return;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1Mjc5Nw==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405352797", "bodyText": "Why do you remove this log?", "author": "mathbagu", "createdAt": "2020-04-08T08:36:27Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/NodeConversion.java", "diffHunk": "@@ -163,15 +164,13 @@ public void setVoltageAngleNodeBreaker() {\n         VoltageLevel.NodeBreakerView topo = vl.getNodeBreakerView();\n         String connectivityNode = id;\n         int iidmNode = context.nodeMapping().iidmNodeForConnectivityNode(connectivityNode, vl);\n-        if (!topo.hasAttachedEquipment(iidmNode)) {\n-            LOG.error(\"ConnectivityNode {} with voltage and angle is not valid in IIDM\", connectivityNode);\n-            return;\n-        }", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU5MTk3OA==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405591978", "bodyText": "@lcosson: any feedback?", "author": "mathbagu", "createdAt": "2020-04-08T15:00:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1Mjc5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyNTM0OA==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r406025348", "bodyText": "Very sorry about that, it looks like I miss-merged this file. Thank God for PR's!\nCorrecting...", "author": "lcosson", "createdAt": "2020-04-09T08:02:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1Mjc5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "3362184f8c0782e58ac6a121096a2f4b5724a87a", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/NodeConversion.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/NodeConversion.java\nindex 74fbbdf1e..d0f63323a 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/NodeConversion.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/NodeConversion.java\n\n@@ -164,13 +164,15 @@ public class NodeConversion extends AbstractIdentifiedObjectConversion {\n         VoltageLevel.NodeBreakerView topo = vl.getNodeBreakerView();\n         String connectivityNode = id;\n         int iidmNode = context.nodeMapping().iidmNodeForConnectivityNode(connectivityNode, vl);\n+        if (!topo.hasAttachedEquipment(iidmNode)) {\n+            LOG.error(\"ConnectivityNode {} with voltage and angle is not valid in IIDM\", connectivityNode);\n+            return;\n+        }\n         // To obtain a bus for which we want to set voltage:\n         // If there no Terminal at this IIDM node,\n         // then find from it the first connected node with a Terminal\n-        Terminal t = topo.getTerminal(iidmNode);\n-        if (t == null) {\n-            t = new FirstTerminalTraverser(topo, iidmNode).firstTerminal();\n-        }\n+        Terminal t = topo.getOptionalTerminal(iidmNode)\n+                .orElseGet(() -> new FirstTerminalTraverser(topo, iidmNode).firstTerminal());\n         if (t == null) {\n             LOG.error(\"Can't find a Terminal to obtain a Bus to set Voltage, Angle. ConnectivityNode {}\", id);\n             return;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1Mjk2OA==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405352968", "bodyText": "Same question?", "author": "mathbagu", "createdAt": "2020-04-08T08:36:43Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/NodeConversion.java", "diffHunk": "@@ -184,8 +183,8 @@ public void setVoltageAngleNodeBreaker() {\n                 return;\n             }\n             LOG.warn(\n-                \"Can't find a bus from the Bus View to set Voltage and Angle, we use the bus {} from the Bus/Breaker view. Connectivity node {}\",\n-                bus, id);\n+                    \"Can't find a calculated Bus to set Voltage, Angle, but found a configured Bus {}. Connectivity node {}\",\n+                    bus, id);", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU5MjI1Ng==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405592256", "bodyText": "@lcosson: any feedback", "author": "mathbagu", "createdAt": "2020-04-08T15:01:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1Mjk2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyNTQxMw==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r406025413", "bodyText": "Very sorry about that, it looks like I miss-merged this file. Thank God for PR's!\nCorrecting...", "author": "lcosson", "createdAt": "2020-04-09T08:02:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1Mjk2OA=="}], "type": "inlineReview", "revised_code": {"commit": "3362184f8c0782e58ac6a121096a2f4b5724a87a", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/NodeConversion.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/NodeConversion.java\nindex 74fbbdf1e..d0f63323a 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/NodeConversion.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/NodeConversion.java\n\n@@ -183,7 +185,7 @@ public class NodeConversion extends AbstractIdentifiedObjectConversion {\n                 return;\n             }\n             LOG.warn(\n-                    \"Can't find a calculated Bus to set Voltage, Angle, but found a configured Bus {}. Connectivity node {}\",\n+                    \"Can't find a bus from the Bus View to set Voltage and Angle, we use the bus {} from the Bus/Breaker view. Connectivity node {}\",\n                     bus, id);\n         }\n         setVoltageAngle(bus);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MzEzNA==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405353134", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:36:57Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/OperationalLimitConversion.java", "diffHunk": "@@ -72,7 +74,7 @@ private void createCurrentLimitsAdder(int terminalNumber, Identifiable<?> identi\n         } else if (identifiable instanceof TwoWindingsTransformer) {\n             Branch<?> b = (Branch<?>) identifiable;\n             if (terminalNumber == -1) {\n-                context.ignored(CURRENT_LIMIT, \"Defined for Equipment TwoWindingsTransformer. Should be defined for one Terminal of Two\");\n+                context.ignored(CURRENT_LIMIT, () -> \"Defined for Equipment TwoWindingsTransformer. Should be defined for one Terminal of Two\");", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3362184f8c0782e58ac6a121096a2f4b5724a87a", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/OperationalLimitConversion.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/OperationalLimitConversion.java\nindex 7abefebdb..5c6c11da9 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/OperationalLimitConversion.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/OperationalLimitConversion.java\n\n@@ -74,7 +74,7 @@ public class OperationalLimitConversion extends AbstractIdentifiedObjectConversi\n         } else if (identifiable instanceof TwoWindingsTransformer) {\n             Branch<?> b = (Branch<?>) identifiable;\n             if (terminalNumber == -1) {\n-                context.ignored(CURRENT_LIMIT, () -> \"Defined for Equipment TwoWindingsTransformer. Should be defined for one Terminal of Two\");\n+                context.ignored(CURRENT_LIMIT, \"Defined for Equipment TwoWindingsTransformer. Should be defined for one Terminal of Two\");\n                 notAssigned(b);\n             } else {\n                 createCurrentLimitsAdder(terminalNumber, b);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MzE3Nw==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405353177", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:37:02Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/OperationalLimitConversion.java", "diffHunk": "@@ -101,7 +103,7 @@ public boolean valid() {\n     public void convert() {\n         double value = p.asDouble(\"value\");\n         if (value <= 0) {\n-            context.ignored(OPERATIONAL_LIMIT, \"value is <= 0\");\n+            context.ignored(OPERATIONAL_LIMIT, () -> \"value is <= 0\");", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3362184f8c0782e58ac6a121096a2f4b5724a87a", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/OperationalLimitConversion.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/OperationalLimitConversion.java\nindex 7abefebdb..5c6c11da9 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/OperationalLimitConversion.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/OperationalLimitConversion.java\n\n@@ -103,7 +103,7 @@ public class OperationalLimitConversion extends AbstractIdentifiedObjectConversi\n     public void convert() {\n         double value = p.asDouble(\"value\");\n         if (value <= 0) {\n-            context.ignored(OPERATIONAL_LIMIT, () -> \"value is <= 0\");\n+            context.ignored(OPERATIONAL_LIMIT, \"value is <= 0\");\n             return;\n         }\n         String limitSubclass = p.getLocal(OPERATIONAL_LIMIT_SUBCLASS);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MzM5NQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405353395", "bodyText": "A simple concatenation seems ok", "author": "mathbagu", "createdAt": "2020-04-08T08:37:26Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/PhaseTapChangerConversion.java", "diffHunk": "@@ -98,7 +99,7 @@ public boolean valid() {\n             return false;\n         }\n         if (!validType()) {\n-            invalid(String.format(\"Unexpected phaseTapChangerType %s\", ptcType));\n+            invalid(() -> String.format(\"Unexpected phaseTapChangerType %s\", ptcType));", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3362184f8c0782e58ac6a121096a2f4b5724a87a", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/PhaseTapChangerConversion.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/PhaseTapChangerConversion.java\nindex ee7063826..775cdf87e 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/PhaseTapChangerConversion.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/PhaseTapChangerConversion.java\n\n@@ -99,7 +98,7 @@ public class PhaseTapChangerConversion extends AbstractIdentifiedObjectConversio\n             return false;\n         }\n         if (!validType()) {\n-            invalid(() -> String.format(\"Unexpected phaseTapChangerType %s\", ptcType));\n+            invalid(\"Unexpected phaseTapChangerType \" + ptcType);\n             return false;\n         }\n         return true;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MzQ5OQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405353499", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:37:37Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/PhaseTapChangerConversion.java", "diffHunk": "@@ -192,8 +193,8 @@ private double fixing(PropertyBag point, String attr, double defaultValue, Strin\n         double value = point.asDouble(attr, defaultValue);\n         if (Double.isNaN(value)) {\n             fixed(\n-                    \"PhaseTapChangerTablePoint \" + attr + \" for step \" + step + \" in table \" + tableId,\n-                    \"invalid value \" + point.get(attr));\n+                \"PhaseTapChangerTablePoint \" + attr + \" for step \" + step + \" in table \" + tableId,\n+                () -> \"invalid value \" + point.get(attr));", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU5Mjk0MA==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405592940", "bodyText": "@lcosson: I think there is no reason to use a supplier here.", "author": "mathbagu", "createdAt": "2020-04-08T15:02:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MzQ5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyMDUyMA==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r406020520", "bodyText": "My bad, correcting this...", "author": "lcosson", "createdAt": "2020-04-09T07:53:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MzQ5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "3362184f8c0782e58ac6a121096a2f4b5724a87a", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/PhaseTapChangerConversion.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/PhaseTapChangerConversion.java\nindex ee7063826..775cdf87e 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/PhaseTapChangerConversion.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/PhaseTapChangerConversion.java\n\n@@ -194,7 +193,7 @@ public class PhaseTapChangerConversion extends AbstractIdentifiedObjectConversio\n         if (Double.isNaN(value)) {\n             fixed(\n                 \"PhaseTapChangerTablePoint \" + attr + \" for step \" + step + \" in table \" + tableId,\n-                () -> \"invalid value \" + point.get(attr));\n+                \"invalid value \" + point.get(attr));\n             return defaultValue;\n         }\n         return value;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1Mzc0MQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405353741", "bodyText": "I don't understand this refactoring", "author": "mathbagu", "createdAt": "2020-04-08T08:38:00Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/PhaseTapChangerConversion.java", "diffHunk": "@@ -425,9 +426,11 @@ private boolean gatherxStepMinMax(double[] xs) {\n         boolean xStepRangeIsConsistent = true;\n         if (xStepMin < 0 || xStepMax <= 0 || xStepMin > xStepMax) {\n             xStepRangeIsConsistent = false;\n-            String reason = String.format(\"Inconsistent xStepMin, xStepMax [%f, %f]\",\n-                    xStepMin,\n-                    xStepMax);\n+            final double xStepMinParam = xStepMin;\n+            final double xStepMaxParam = xStepMax;\n+            Supplier<String> reason = () -> String.format(\"Inconsistent xStepMin, xStepMax [%f, %f]\",\n+                    xStepMinParam,\n+                    xStepMaxParam);", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU3MDA4MA==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405570080", "bodyText": "I think it may be because lambda only allows final constants. Maybe with double[]? Not sure if it is equivalent, performance wise.", "author": "miovd", "createdAt": "2020-04-08T14:31:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1Mzc0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU5MzUwOQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405593509", "bodyText": "I miss something during my first review.", "author": "mathbagu", "createdAt": "2020-04-08T15:02:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1Mzc0MQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1MzgzNQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405353835", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:38:08Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/PhaseTapChangerConversion.java", "diffHunk": "@@ -224,7 +225,7 @@ private double du() {\n             du = voltageStepIncrement / 100;\n         } else {\n             double defaultValue = 1;\n-            String reason = \"Not present or not valid value for voltageStepIncrementOutOfPhase or voltageStepIncrement\";\n+            Supplier<String> reason = () -> \"Not present or not valid value for voltageStepIncrementOutOfPhase or voltageStepIncrement\";", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3362184f8c0782e58ac6a121096a2f4b5724a87a", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/PhaseTapChangerConversion.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/PhaseTapChangerConversion.java\nindex ee7063826..775cdf87e 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/PhaseTapChangerConversion.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/PhaseTapChangerConversion.java\n\n@@ -225,7 +224,7 @@ public class PhaseTapChangerConversion extends AbstractIdentifiedObjectConversio\n             du = voltageStepIncrement / 100;\n         } else {\n             double defaultValue = 1;\n-            Supplier<String> reason = () -> \"Not present or not valid value for voltageStepIncrementOutOfPhase or voltageStepIncrement\";\n+            String reason = \"Not present or not valid value for voltageStepIncrementOutOfPhase or voltageStepIncrement\";\n             invalid(\"du\", reason, defaultValue);\n             du = defaultValue / 100;\n         }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1Mzg5MQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405353891", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:38:13Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/RatioTapChangerConversion.java", "diffHunk": "@@ -45,7 +46,7 @@ public RatioTapChangerConversion(PropertyBag rtc, Context context) {\n     @Override\n     public boolean valid() {\n         if (tx2 == null && tx3 == null) {\n-            invalid(\"Missing transformer\");\n+            invalid(() -> \"Missing transformer\");", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3362184f8c0782e58ac6a121096a2f4b5724a87a", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/RatioTapChangerConversion.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/RatioTapChangerConversion.java\nindex 7d6bbe3d9..0ed2531e9 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/RatioTapChangerConversion.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/RatioTapChangerConversion.java\n\n@@ -46,7 +46,7 @@ public class RatioTapChangerConversion extends AbstractIdentifiedObjectConversio\n     @Override\n     public boolean valid() {\n         if (tx2 == null && tx3 == null) {\n-            invalid(() -> \"Missing transformer\");\n+            invalid(\"Missing transformer\");\n             return false;\n         }\n         if (tx3 != null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1Mzk0Mw==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405353943", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:38:19Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/RatioTapChangerConversion.java", "diffHunk": "@@ -59,9 +60,9 @@ public boolean valid() {\n                 // Check if the step is at neutral and regulating control is disabled\n                 boolean regulating = p.asBoolean(\"regulatingControlEnabled\", false);\n                 if (position == neutralStep && !regulating) {\n-                    ignored(reason0 + \", but is at neutralStep and regulating control disabled\");\n+                    ignored(() -> reason0 + \", but is at neutralStep and regulating control disabled\");", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3362184f8c0782e58ac6a121096a2f4b5724a87a", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/RatioTapChangerConversion.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/RatioTapChangerConversion.java\nindex 7d6bbe3d9..0ed2531e9 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/RatioTapChangerConversion.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/RatioTapChangerConversion.java\n\n@@ -60,7 +60,7 @@ public class RatioTapChangerConversion extends AbstractIdentifiedObjectConversio\n                 // Check if the step is at neutral and regulating control is disabled\n                 boolean regulating = p.asBoolean(\"regulatingControlEnabled\", false);\n                 if (position == neutralStep && !regulating) {\n-                    ignored(() -> reason0 + \", but is at neutralStep and regulating control disabled\");\n+                    ignored(reason0 + \", but is at neutralStep and regulating control disabled\");\n                 } else {\n                     Supplier<String> reason = () -> String.format(\n                             \"%s, tap step: %d, regulating control enabled: %b\",\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1NDAwMQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405354001", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:38:26Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/RatioTapChangerConversion.java", "diffHunk": "@@ -79,7 +80,7 @@ public boolean valid() {\n     public void convert() {\n         RatioTapChangerAdder rtca = adder();\n         if (rtca == null) {\n-            invalid(\"Could not create ratio tap changer adder\");\n+            invalid(() -> \"Could not create ratio tap changer adder\");", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3362184f8c0782e58ac6a121096a2f4b5724a87a", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/RatioTapChangerConversion.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/RatioTapChangerConversion.java\nindex 7d6bbe3d9..0ed2531e9 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/RatioTapChangerConversion.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/RatioTapChangerConversion.java\n\n@@ -80,7 +80,7 @@ public class RatioTapChangerConversion extends AbstractIdentifiedObjectConversio\n     public void convert() {\n         RatioTapChangerAdder rtca = adder();\n         if (rtca == null) {\n-            invalid(() -> \"Could not create ratio tap changer adder\");\n+            invalid(\"Could not create ratio tap changer adder\");\n             return;\n         }\n         rtca.setLowTapPosition(lowStep).setTapPosition(position);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1NDA2MQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405354061", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:38:33Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/RatioTapChangerConversion.java", "diffHunk": "@@ -170,8 +171,8 @@ private double fixing(PropertyBag point, String attr, double defaultValue, Strin\n         double value = point.asDouble(attr, defaultValue);\n         if (Double.isNaN(value)) {\n             fixed(\n-                    \"RatioTapChangerTablePoint \" + attr + \" for step \" + step + \" in table \" + tableId,\n-                    \"invalid value \" + point.get(attr));\n+                \"RatioTapChangerTablePoint \" + attr + \" for step \" + step + \" in table \" + tableId,\n+                () -> \"invalid value \" + point.get(attr));", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU5Mzg2MQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405593861", "bodyText": "@lcosson: I think there is no reason to use a supplier here.", "author": "mathbagu", "createdAt": "2020-04-08T15:03:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1NDA2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyMDkxNg==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r406020916", "bodyText": "My bad, correcting this...", "author": "lcosson", "createdAt": "2020-04-09T07:53:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1NDA2MQ=="}], "type": "inlineReview", "revised_code": {"commit": "3362184f8c0782e58ac6a121096a2f4b5724a87a", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/RatioTapChangerConversion.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/RatioTapChangerConversion.java\nindex 7d6bbe3d9..0ed2531e9 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/RatioTapChangerConversion.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/RatioTapChangerConversion.java\n\n@@ -172,7 +172,7 @@ public class RatioTapChangerConversion extends AbstractIdentifiedObjectConversio\n         if (Double.isNaN(value)) {\n             fixed(\n                 \"RatioTapChangerTablePoint \" + attr + \" for step \" + step + \" in table \" + tableId,\n-                () -> \"invalid value \" + point.get(attr));\n+                \"invalid value \" + point.get(attr));\n             return defaultValue;\n         }\n         return value;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1NDE0MQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405354141", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:38:39Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/ShuntConversion.java", "diffHunk": "@@ -60,7 +60,7 @@ public void convert() {\n         }\n         if (bPerSection == 0) {\n             float bPerSectionFixed = Float.MIN_VALUE;\n-            fixed(CgmesNames.B_PER_SECTION, \"Can not be zero\", bPerSection, bPerSectionFixed);\n+            fixed(CgmesNames.B_PER_SECTION, () -> \"Can not be zero\", bPerSection, bPerSectionFixed);", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3362184f8c0782e58ac6a121096a2f4b5724a87a", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/ShuntConversion.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/ShuntConversion.java\nindex 82ead78ef..c7929f820 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/ShuntConversion.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/ShuntConversion.java\n\n@@ -60,7 +60,7 @@ public class ShuntConversion extends AbstractConductingEquipmentConversion {\n         }\n         if (bPerSection == 0) {\n             float bPerSectionFixed = Float.MIN_VALUE;\n-            fixed(CgmesNames.B_PER_SECTION, () -> \"Can not be zero\", bPerSection, bPerSectionFixed);\n+            fixed(CgmesNames.B_PER_SECTION, \"Can not be zero\", bPerSection, bPerSectionFixed);\n             bPerSection = bPerSectionFixed;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1NDIxMQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405354211", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:38:44Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/StaticVarCompensatorConversion.java", "diffHunk": "@@ -25,7 +25,7 @@ public StaticVarCompensatorConversion(PropertyBag svc, Context context) {\n     @Override\n     public void convert() {\n         double slope = p.asDouble(\"slope\", 0.0);\n-        ignored(String.format(\"Slope %f\", slope));\n+        ignored(() -> String.format(\"Slope %f\", slope));", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3362184f8c0782e58ac6a121096a2f4b5724a87a", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/StaticVarCompensatorConversion.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/StaticVarCompensatorConversion.java\nindex fb3721534..9210e799d 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/StaticVarCompensatorConversion.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/StaticVarCompensatorConversion.java\n\n@@ -25,7 +25,7 @@ public class StaticVarCompensatorConversion extends AbstractConductingEquipmentC\n     @Override\n     public void convert() {\n         double slope = p.asDouble(\"slope\", 0.0);\n-        ignored(() -> String.format(\"Slope %f\", slope));\n+        ignored(\"Slope \" + slope);\n \n         double capacitiveRating = p.asDouble(\"capacitiveRating\", 0.0);\n         double inductiveRating = p.asDouble(\"inductiveRating\", 0.0);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1NDM1Mw==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405354353", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:38:56Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/SwitchConversion.java", "diffHunk": "@@ -33,7 +35,7 @@ public boolean valid() {\n             return false;\n         }\n         if (busId(1).equals(busId(2))) {\n-            ignored(String.format(\"end buses are the same bus %s\", busId(1)));\n+            ignored(() -> String.format(\"end buses are the same bus %s\", busId(1)));", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3362184f8c0782e58ac6a121096a2f4b5724a87a", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/SwitchConversion.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/SwitchConversion.java\nindex 1db1027b0..cc6972c79 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/SwitchConversion.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/SwitchConversion.java\n\n@@ -35,7 +35,7 @@ public class SwitchConversion extends AbstractConductingEquipmentConversion {\n             return false;\n         }\n         if (busId(1).equals(busId(2))) {\n-            ignored(() -> String.format(\"end buses are the same bus %s\", busId(1)));\n+            ignored(\"end buses are the same bus \" + busId(1));\n             return false;\n         }\n         if ((isBoundary(1) || isBoundary(2)) && LOG.isWarnEnabled()) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1NDM5OA==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405354398", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:39:02Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/ThreeWindingsTransformerConversion.java", "diffHunk": "@@ -38,7 +38,7 @@ public boolean valid() {\n         if (context.boundary().containsNode(nodeId(1))\n             || context.boundary().containsNode(nodeId(2))\n             || context.boundary().containsNode(nodeId(3))) {\n-            invalid(\"3 windings transformer end point at boundary is not supported\");\n+            invalid(() -> \"3 windings transformer end point at boundary is not supported\");", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3362184f8c0782e58ac6a121096a2f4b5724a87a", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/ThreeWindingsTransformerConversion.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/ThreeWindingsTransformerConversion.java\nindex 7ba2c99ba..6b24dac5d 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/ThreeWindingsTransformerConversion.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/ThreeWindingsTransformerConversion.java\n\n@@ -38,7 +38,7 @@ public class ThreeWindingsTransformerConversion extends AbstractConductingEquipm\n         if (context.boundary().containsNode(nodeId(1))\n             || context.boundary().containsNode(nodeId(2))\n             || context.boundary().containsNode(nodeId(3))) {\n-            invalid(() -> \"3 windings transformer end point at boundary is not supported\");\n+            invalid(\"3 windings transformer end point at boundary is not supported\");\n             return false;\n         }\n         // This should not happen,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1NDUxNg==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405354516", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:39:11Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/TwoWindingsTransformerConversion.java", "diffHunk": "@@ -36,7 +38,7 @@ public boolean valid() {\n         }\n         if (context.boundary().containsNode(nodeId(1))\n                 || context.boundary().containsNode(nodeId(2))) {\n-            invalid(\"2 windings transformer end point at boundary is not supported\");\n+            invalid(() -> \"2 windings transformer end point at boundary is not supported\");", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3362184f8c0782e58ac6a121096a2f4b5724a87a", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/TwoWindingsTransformerConversion.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/TwoWindingsTransformerConversion.java\nindex 008253a16..947be263f 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/TwoWindingsTransformerConversion.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/TwoWindingsTransformerConversion.java\n\n@@ -38,7 +38,7 @@ public class TwoWindingsTransformerConversion extends AbstractConductingEquipmen\n         }\n         if (context.boundary().containsNode(nodeId(1))\n                 || context.boundary().containsNode(nodeId(2))) {\n-            invalid(() -> \"2 windings transformer end point at boundary is not supported\");\n+            invalid(\"2 windings transformer end point at boundary is not supported\");\n             return false;\n         }\n         return true;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1NDU4Mw==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405354583", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:39:17Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/TwoWindingsTransformerConversion.java", "diffHunk": "@@ -121,7 +123,7 @@ private void addTapChangers(TwoWindingsTransformer tx) {\n         int rtcSide = 0;\n         if (rtc1 != null) {\n             if (rtc2 != null) {\n-                String reason = \"Unsupported modelling: two winding transformer with two ratio tap changers\";\n+                Supplier<String> reason = () -> \"Unsupported modelling: two winding transformer with two ratio tap changers\";", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3362184f8c0782e58ac6a121096a2f4b5724a87a", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/TwoWindingsTransformerConversion.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/TwoWindingsTransformerConversion.java\nindex 008253a16..947be263f 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/TwoWindingsTransformerConversion.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/TwoWindingsTransformerConversion.java\n\n@@ -123,7 +123,7 @@ public class TwoWindingsTransformerConversion extends AbstractConductingEquipmen\n         int rtcSide = 0;\n         if (rtc1 != null) {\n             if (rtc2 != null) {\n-                Supplier<String> reason = () -> \"Unsupported modelling: two winding transformer with two ratio tap changers\";\n+                String reason = \"Unsupported modelling: two winding transformer with two ratio tap changers\";\n                 invalid(reason);\n                 throw new PowsyblException(\n                         String.format(\"TwoWindingTransformer %s %s\", id, reason));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1NDY1Mg==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405354652", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:39:23Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/TwoWindingsTransformerConversion.java", "diffHunk": "@@ -139,7 +141,7 @@ private void addTapChangers(TwoWindingsTransformer tx) {\n         int ptcSide = 0;\n         if (ptc1 != null) {\n             if (ptc2 != null) {\n-                String reason = \"Unsupported modelling: transformer with two phase tap changers\";\n+                Supplier<String> reason = () -> \"Unsupported modelling: transformer with two phase tap changers\";", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3362184f8c0782e58ac6a121096a2f4b5724a87a", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/TwoWindingsTransformerConversion.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/TwoWindingsTransformerConversion.java\nindex 008253a16..947be263f 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/TwoWindingsTransformerConversion.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/TwoWindingsTransformerConversion.java\n\n@@ -141,7 +141,7 @@ public class TwoWindingsTransformerConversion extends AbstractConductingEquipmen\n         int ptcSide = 0;\n         if (ptc1 != null) {\n             if (ptc2 != null) {\n-                Supplier<String> reason = () -> \"Unsupported modelling: transformer with two phase tap changers\";\n+                String reason = \"Unsupported modelling: transformer with two phase tap changers\";\n                 invalid(reason);\n                 throw new PowsyblException(\n                         String.format(\"TwoWindingTransformer %s %s\", id, reason));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1NDgwOQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405354809", "bodyText": "Same question about the refactoring", "author": "mathbagu", "createdAt": "2020-04-08T08:39:36Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/TwoWindingsTransformerConversion.java", "diffHunk": "@@ -154,10 +156,12 @@ private void addTapChangers(TwoWindingsTransformer tx) {\n             context.tapChangerTransformers().add(ptc, tx, \"ptc\", ptcSide);\n         }\n         if (rtcSide > 0 && ptcSide > 0 && rtcSide != ptcSide) {\n-            String reason = String.format(\n+            final String rtcParam = rtc;\n+            final String ptcParam = ptc;\n+            Supplier<String> reason = () -> String.format(\n                     \"Unsupported modelling: transformer with ratio and tap changer not on the same winding, rtc: %s, ptc: %s\",\n-                    rtc,\n-                    ptc);\n+                    rtcParam,\n+                    ptcParam);", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1NDkyMQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405354921", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:39:46Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/CgmesPhaseTapChangerBuilder.java", "diffHunk": "@@ -33,7 +33,7 @@\n     public TapChanger build() {\n         if (!validType()) {\n             String type = p.getLocal(CgmesNames.PHASE_TAP_CHANGER_TYPE).toLowerCase();\n-            context.invalid(CgmesNames.PHASE_TAP_CHANGER_TYPE, String.format(\"Unexpected type %s\", type));\n+            context.invalid(CgmesNames.PHASE_TAP_CHANGER_TYPE, () -> String.format(\"Unexpected type %s\", type));", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3362184f8c0782e58ac6a121096a2f4b5724a87a", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/CgmesPhaseTapChangerBuilder.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/CgmesPhaseTapChangerBuilder.java\nindex 4e22eb2af..2b01a6828 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/CgmesPhaseTapChangerBuilder.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/CgmesPhaseTapChangerBuilder.java\n\n@@ -32,8 +33,8 @@ public class CgmesPhaseTapChangerBuilder extends AbstractCgmesTapChangerBuilder\n     @Override\n     public TapChanger build() {\n         if (!validType()) {\n-            String type = p.getLocal(CgmesNames.PHASE_TAP_CHANGER_TYPE).toLowerCase();\n-            context.invalid(CgmesNames.PHASE_TAP_CHANGER_TYPE, () -> String.format(\"Unexpected type %s\", type));\n+            Supplier<String> type = () -> \"Unexpected type \" + p.getLocal(CgmesNames.PHASE_TAP_CHANGER_TYPE).toLowerCase();\n+            context.invalid(CgmesNames.PHASE_TAP_CHANGER_TYPE, type);\n             return null;\n         }\n         return super.build();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1NDk2OA==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405354968", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:39:50Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/NewTwoWindingsTransformerConversion.java", "diffHunk": "@@ -66,7 +66,7 @@ public boolean valid() {\n         }\n         if (context.boundary().containsNode(nodeId(1))\n             || context.boundary().containsNode(nodeId(2))) {\n-            invalid(\"2 windings transformer end point at boundary is not supported\");\n+            invalid(() -> \"2 windings transformer end point at boundary is not supported\");", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3362184f8c0782e58ac6a121096a2f4b5724a87a", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/NewTwoWindingsTransformerConversion.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/NewTwoWindingsTransformerConversion.java\nindex 37921803c..38a30c622 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/NewTwoWindingsTransformerConversion.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/NewTwoWindingsTransformerConversion.java\n\n@@ -66,7 +66,7 @@ public class NewTwoWindingsTransformerConversion extends AbstractTransformerConv\n         }\n         if (context.boundary().containsNode(nodeId(1))\n             || context.boundary().containsNode(nodeId(2))) {\n-            invalid(() -> \"2 windings transformer end point at boundary is not supported\");\n+            invalid(\"2 windings transformer end point at boundary is not supported\");\n             return false;\n         }\n         return true;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM1NTA2MQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405355061", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-08T08:39:58Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/TapChangerConversion.java", "diffHunk": "@@ -135,7 +135,7 @@ private static TapChanger combineTapChanger(TapChanger tc1, TapChanger tc2) {\n     */\n     private TapChanger tapChangerFixPosition(TapChanger tc) {\n         if (tc.getLowTapPosition() != tc.getHighTapPosition()) {\n-            context.fixed(String.format(\"TapChanger Id %s fixed tap at position %d \", tc.getId(), tc.getTapPosition()), \"\");\n+            context.fixed(String.format(\"TapChanger Id %s fixed tap at position %d \", tc.getId(), tc.getTapPosition()), () -> \"\");", "originalCommit": "4c5caf65839359dd19843dad2a0f4ddca3bb8ab0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3362184f8c0782e58ac6a121096a2f4b5724a87a", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/TapChangerConversion.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/TapChangerConversion.java\nindex 31309e19b..2990429b1 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/TapChangerConversion.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/TapChangerConversion.java\n\n@@ -135,7 +135,7 @@ public class TapChangerConversion {\n     */\n     private TapChanger tapChangerFixPosition(TapChanger tc) {\n         if (tc.getLowTapPosition() != tc.getHighTapPosition()) {\n-            context.fixed(String.format(\"TapChanger Id %s fixed tap at position %d \", tc.getId(), tc.getTapPosition()), () -> \"\");\n+            context.fixed(() -> String.format(\"TapChanger Id %s fixed tap at position %d \", tc.getId(), tc.getTapPosition()), \"\");\n         }\n         TapChanger tapChanger = baseCloneTapChanger(tc);\n         tapChanger.setLowTapPosition(tapChanger.getTapPosition());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU5NDUzNA==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r405594534", "bodyText": "@lcosson I think there is no reason to create a Supplier here", "author": "mathbagu", "createdAt": "2020-04-08T15:04:07Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/AbstractCgmesTapChangerBuilder.java", "diffHunk": "@@ -79,8 +79,8 @@ protected TapChanger build() {\n         double value = point.asDouble(attr, defaultValue);\n         if (Double.isNaN(value)) {\n             context.fixed(\n-                    \"RatioTapChangerTablePoint \" + attr + \" for step \" + step + \" in table \" + tableId,\n-                    \"invalid value \" + point.get(attr));\n+                \"RatioTapChangerTablePoint \" + attr + \" for step \" + step + \" in table \" + tableId,\n+                () -> \"invalid value \" + point.get(attr));", "originalCommit": "70e7c7afc166ba8b44059e4603991db410050c78", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAyMTM1NA==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r406021354", "bodyText": "My bad, correcting this...", "author": "lcosson", "createdAt": "2020-04-09T07:54:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU5NDUzNA=="}], "type": "inlineReview", "revised_code": {"commit": "3362184f8c0782e58ac6a121096a2f4b5724a87a", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/AbstractCgmesTapChangerBuilder.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/AbstractCgmesTapChangerBuilder.java\nindex c62e683f8..61dff6120 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/AbstractCgmesTapChangerBuilder.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/elements/transformers/AbstractCgmesTapChangerBuilder.java\n\n@@ -80,7 +80,7 @@ abstract class AbstractCgmesTapChangerBuilder {\n         if (Double.isNaN(value)) {\n             context.fixed(\n                 \"RatioTapChangerTablePoint \" + attr + \" for step \" + step + \" in table \" + tableId,\n-                () -> \"invalid value \" + point.get(attr));\n+                \"invalid value \" + point.get(attr));\n             return defaultValue;\n         }\n         return value;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc3NTc3Nw==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r406775777", "bodyText": "Are you sure they are public?", "author": "mathbagu", "createdAt": "2020-04-10T14:13:38Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Context.java", "diffHunk": "@@ -29,6 +30,12 @@\n  * @author Luma Zamarre\u00f1o <zamarrenolm at aia.es>\n  */\n public class Context {\n+\n+    // Log messages\n+    public static final String FIXED_REASON = \"Fixed {}. Reason: {}\";\n+    public static final String INVALID_REASON = \"Invalid {}. Reason: {}\";\n+    public static final String IGNORED_REASON = \"Ignored {}. Reason: {}\";", "originalCommit": "95722ecdf6072e756a04be902f28ad0251a6a363", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3362184f8c0782e58ac6a121096a2f4b5724a87a", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Context.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Context.java\nindex d779165b8..592a43bfc 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Context.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Context.java\n\n@@ -32,9 +33,9 @@ import com.powsybl.triplestore.api.PropertyBags;\n public class Context {\n \n     // Log messages\n-    public static final String FIXED_REASON = \"Fixed {}. Reason: {}\";\n-    public static final String INVALID_REASON = \"Invalid {}. Reason: {}\";\n-    public static final String IGNORED_REASON = \"Ignored {}. Reason: {}\";\n+    private static final String FIXED_REASON = \"Fixed {}. Reason: {}\";\n+    private static final String INVALID_REASON = \"Invalid {}. Reason: {}\";\n+    private static final String IGNORED_REASON = \"Ignored {}. Reason: {}\";\n \n     public Context(CgmesModel cgmes, Config config, Network network) {\n         this.cgmes = Objects.requireNonNull(cgmes);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2ODE4Ng==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r407168186", "bodyText": "I think adding a check for log level enabled before a call with string constants does not offer performance improvement, the log library will do the same check in the implementation (https://stackoverflow.com/questions/8788096/log-info-using-log-isinfoenabled). Personally I prefer removing the check for such one-line calls, to improve readability.", "author": "zamarrenolm", "createdAt": "2020-04-12T08:53:38Z", "path": "cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Context.java", "diffHunk": "@@ -215,39 +222,85 @@ public void anotherLineConversion(ACLineSegmentConversion c) {\n     }\n \n     public void endLinesConversion() {\n-        String enough = countLinesWithSvPowerFlowsAtEnds < countLines ? \"FEW\" : \"ENOUGH\";\n-        LOG.info(\"{} lines with SvPowerFlow values at ends: {} / {}\",\n-                enough,\n-                countLinesWithSvPowerFlowsAtEnds,\n-                countLines);\n+        if (LOG.isInfoEnabled()) {\n+            String enough = countLinesWithSvPowerFlowsAtEnds < countLines ? \"FEW\" : \"ENOUGH\";\n+            LOG.info(\"{} lines with SvPowerFlow values at ends: {} / {}\",\n+                    enough,\n+                    countLinesWithSvPowerFlowsAtEnds,\n+                    countLines);\n+        }\n     }\n \n     public void invalid(String what, String reason) {\n-        LOG.warn(\"Invalid {}. Reason: {}\", what, reason);\n+        if (LOG.isWarnEnabled()) {\n+            LOG.warn(INVALID_REASON, what, reason);", "originalCommit": "848be50060c8273821f610b57db274b392cf03c3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkxMjYxNQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r407912615", "bodyText": "I see your point, but then it's like for the partial use of Suppliers with @mathbagu : what's the policy ? Should we say \"prefer doing stuff that way in general\" or \"work on a case by case basis\" ?", "author": "lcosson", "createdAt": "2020-04-14T07:10:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2ODE4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk1MTczOQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1266#discussion_r407951739", "bodyText": "Looking to the code of logback, the log methods use a chain of filter to define to decide if a LogEvent has to be created. There are two different implementation of LogFilter, and in that case, the TurboFilter are used. These filters have to be really fast. So I think, we can follow Luma's advice.", "author": "mathbagu", "createdAt": "2020-04-14T08:19:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2ODE4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "3362184f8c0782e58ac6a121096a2f4b5724a87a", "chunk": "diff --git a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Context.java b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Context.java\nindex 0dbc77d91..592a43bfc 100644\n--- a/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Context.java\n+++ b/cgmes/cgmes-conversion/src/main/java/com/powsybl/cgmes/conversion/Context.java\n\n@@ -222,19 +223,15 @@ public class Context {\n     }\n \n     public void endLinesConversion() {\n-        if (LOG.isInfoEnabled()) {\n-            String enough = countLinesWithSvPowerFlowsAtEnds < countLines ? \"FEW\" : \"ENOUGH\";\n-            LOG.info(\"{} lines with SvPowerFlow values at ends: {} / {}\",\n-                    enough,\n-                    countLinesWithSvPowerFlowsAtEnds,\n-                    countLines);\n-        }\n+        String enough = countLinesWithSvPowerFlowsAtEnds < countLines ? \"FEW\" : \"ENOUGH\";\n+        LOG.info(\"{} lines with SvPowerFlow values at ends: {} / {}\",\n+                enough,\n+                countLinesWithSvPowerFlowsAtEnds,\n+                countLines);\n     }\n \n     public void invalid(String what, String reason) {\n-        if (LOG.isWarnEnabled()) {\n-            LOG.warn(INVALID_REASON, what, reason);\n-        }\n+        LOG.warn(INVALID_REASON, what, reason);\n     }\n \n     public void invalid(String what, Supplier<String> reason) {\n"}}, {"oid": "3362184f8c0782e58ac6a121096a2f4b5724a87a", "url": "https://github.com/powsybl/powsybl-core/commit/3362184f8c0782e58ac6a121096a2f4b5724a87a", "message": "Improve context logging performance, using suppliers and checking log level\n\nSigned-off-by: Laurent Cosson <lcosson@silicom.fr>\nSigned-off-by: Mathieu BAGUE <mathieu.bague@rte-france.com>", "committedDate": "2020-04-16T16:15:20Z", "type": "commit"}, {"oid": "3362184f8c0782e58ac6a121096a2f4b5724a87a", "url": "https://github.com/powsybl/powsybl-core/commit/3362184f8c0782e58ac6a121096a2f4b5724a87a", "message": "Improve context logging performance, using suppliers and checking log level\n\nSigned-off-by: Laurent Cosson <lcosson@silicom.fr>\nSigned-off-by: Mathieu BAGUE <mathieu.bague@rte-france.com>", "committedDate": "2020-04-16T16:15:20Z", "type": "forcePushed"}]}