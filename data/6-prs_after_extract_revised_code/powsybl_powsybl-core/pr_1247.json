{"pr_number": 1247, "pr_title": "Improve security analysis interceptor", "pr_createdAt": "2020-03-27T11:24:50Z", "pr_url": "https://github.com/powsybl/powsybl-core/pull/1247", "timeline": [{"oid": "4c609c08e4e5d2443013efef84721077fe9b7d6e", "url": "https://github.com/powsybl/powsybl-core/commit/4c609c08e4e5d2443013efef84721077fe9b7d6e", "message": "Consume extensions while building post result.\n\nThe post builder takes extensions when it created.\nBinding extensions on the ContingencyContext before the context is consumed by interceptors.\n\nSigned-off-by: yichen88 <tang.yichenyves@gmail.com>", "committedDate": "2020-03-27T12:32:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0MzQxOQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1247#discussion_r400143419", "bodyText": "Since we should not anymore subclass the builder, is it necessary / useful to make it protected?", "author": "sylvlecl", "createdAt": "2020-03-30T12:14:50Z", "path": "security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java", "diffHunk": "@@ -26,8 +28,8 @@\n public class SecurityAnalysisResultBuilder {\n \n     private final LimitViolationFilter filter;\n-    private final RunningContext context;\n-    private final List<SecurityAnalysisInterceptor> interceptors;\n+    protected final RunningContext context;", "originalCommit": "a4f2bed5dc74d53cb679eafc8133026c6aa6cc67", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3ceafe32a7e7e1ac448b578c220efaedea799641", "chunk": "diff --git a/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java b/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java\nindex e1ae3a393..fb9f81304 100644\n--- a/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java\n+++ b/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java\n\n@@ -28,8 +26,8 @@ import java.util.*;\n public class SecurityAnalysisResultBuilder {\n \n     private final LimitViolationFilter filter;\n-    protected final RunningContext context;\n-    protected final List<SecurityAnalysisInterceptor> interceptors;\n+    private final RunningContext context;\n+    private final List<SecurityAnalysisInterceptor> interceptors;\n \n     // Below are volatile objects used for building the actual complete result\n     private LimitViolationsResult preContingencyResult;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0MzUwOA==", "url": "https://github.com/powsybl/powsybl-core/pull/1247#discussion_r400143508", "bodyText": "Same question.", "author": "sylvlecl", "createdAt": "2020-03-30T12:14:59Z", "path": "security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java", "diffHunk": "@@ -26,8 +28,8 @@\n public class SecurityAnalysisResultBuilder {\n \n     private final LimitViolationFilter filter;\n-    private final RunningContext context;\n-    private final List<SecurityAnalysisInterceptor> interceptors;\n+    protected final RunningContext context;\n+    protected final List<SecurityAnalysisInterceptor> interceptors;", "originalCommit": "a4f2bed5dc74d53cb679eafc8133026c6aa6cc67", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3ceafe32a7e7e1ac448b578c220efaedea799641", "chunk": "diff --git a/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java b/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java\nindex e1ae3a393..fb9f81304 100644\n--- a/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java\n+++ b/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java\n\n@@ -28,8 +26,8 @@ import java.util.*;\n public class SecurityAnalysisResultBuilder {\n \n     private final LimitViolationFilter filter;\n-    protected final RunningContext context;\n-    protected final List<SecurityAnalysisInterceptor> interceptors;\n+    private final RunningContext context;\n+    private final List<SecurityAnalysisInterceptor> interceptors;\n \n     // Below are volatile objects used for building the actual complete result\n     private LimitViolationsResult preContingencyResult;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0NzQyMQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1247#discussion_r400147421", "bodyText": "Maybe it would be better to add the extensions through the builder?\nLike\nbuilder.addContextExtension(class, ext)", "author": "sylvlecl", "createdAt": "2020-03-30T12:21:33Z", "path": "security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java", "diffHunk": "@@ -62,13 +64,23 @@ public PreContingencyResultBuilder preContingency() {\n \n     /**\n      * Initiates the creation of the result for one {@link Contingency}.\n-     * @param contingency  the contingency for which a result should be created\n+     * @param contingency the contingency for which a result should be created\n      * @return a {@link PostContingencyResultBuilder} instance.\n      */\n     public PostContingencyResultBuilder contingency(Contingency contingency) {\n         return new PostContingencyResultBuilder(contingency);\n     }\n \n+    /**\n+     * Initiates the creation of a post-contingency result\n+     * @param contingency the contingency for which a result should be created\n+     * @param contingencyContextExtensions extensions for {@link com.powsybl.security.interceptors.ContingencyContext}\n+     * @return a {@link PostContingencyResultBuilder} instance\n+     */\n+    public PostContingencyResultBuilder contingency(Contingency contingency, Collection<Extension<ContingencyContext>> contingencyContextExtensions) {", "originalCommit": "a4f2bed5dc74d53cb679eafc8133026c6aa6cc67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxODQ4NQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1247#discussion_r400218485", "bodyText": "OK, if there is a method like that, maybe we dont need to subclass builder anymore.\nCurrently, a sub-builder is doing this part(binding extensions).", "author": "yichen88", "createdAt": "2020-03-30T14:05:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0NzQyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "3ceafe32a7e7e1ac448b578c220efaedea799641", "chunk": "diff --git a/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java b/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java\nindex e1ae3a393..fb9f81304 100644\n--- a/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java\n+++ b/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java\n\n@@ -64,23 +62,13 @@ public class SecurityAnalysisResultBuilder {\n \n     /**\n      * Initiates the creation of the result for one {@link Contingency}.\n-     * @param contingency the contingency for which a result should be created\n+     * @param contingency  the contingency for which a result should be created\n      * @return a {@link PostContingencyResultBuilder} instance.\n      */\n     public PostContingencyResultBuilder contingency(Contingency contingency) {\n         return new PostContingencyResultBuilder(contingency);\n     }\n \n-    /**\n-     * Initiates the creation of a post-contingency result\n-     * @param contingency the contingency for which a result should be created\n-     * @param contingencyContextExtensions extensions for {@link com.powsybl.security.interceptors.ContingencyContext}\n-     * @return a {@link PostContingencyResultBuilder} instance\n-     */\n-    public PostContingencyResultBuilder contingency(Contingency contingency, Collection<Extension<ContingencyContext>> contingencyContextExtensions) {\n-        return new PostContingencyResultBuilder(contingency, contingencyContextExtensions);\n-    }\n-\n     /**\n      * Finalizes the result.\n      * @return the N situation result builder\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0ODkwOA==", "url": "https://github.com/powsybl/powsybl-core/pull/1247#discussion_r400148908", "bodyText": "Should we provide a default implementation so that new implementations do not have to implement this deprecated method ?", "author": "sylvlecl", "createdAt": "2020-03-30T12:24:00Z", "path": "security-analysis/security-analysis-api/src/main/java/com/powsybl/security/interceptors/SecurityAnalysisInterceptor.java", "diffHunk": "@@ -15,9 +16,44 @@\n  */\n public interface SecurityAnalysisInterceptor {\n \n+    /**\n+     * Callback after the pre-contingency analysis result is created\n+     * @param context The running context\n+     * @param preContingencyResult\n+     */\n     void onPreContingencyResult(RunningContext context, LimitViolationsResult preContingencyResult);\n \n+    /**\n+     * Deprecated. Use {@link #onPostContingencyResult(ContingencyContext context, PostContingencyResult postContingencyResult)}\n+     * @param context\n+     * @param postContingencyResult\n+     */\n+    @Deprecated\n     void onPostContingencyResult(RunningContext context, PostContingencyResult postContingencyResult);", "originalCommit": "a4f2bed5dc74d53cb679eafc8133026c6aa6cc67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg3Mjk0Mw==", "url": "https://github.com/powsybl/powsybl-core/pull/1247#discussion_r400872943", "bodyText": "The new InterceptorImpl should extends DefaultSecurityAnalysisInterceptor", "author": "yichen88", "createdAt": "2020-03-31T12:29:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0ODkwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc4Mjc2Nw==", "url": "https://github.com/powsybl/powsybl-core/pull/1247#discussion_r402782767", "bodyText": "You cannot assume that: a developper could inherit from the interface directly. If you deprecate a method, you have to provide a default implementation to make it possible to remove it without breaking things.\nWithout a default implementation, I need to implement it in my subclass so removing this method from the API will break my code.", "author": "mathbagu", "createdAt": "2020-04-03T07:21:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0ODkwOA=="}], "type": "inlineReview", "revised_code": {"commit": "3ceafe32a7e7e1ac448b578c220efaedea799641", "chunk": "diff --git a/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/interceptors/SecurityAnalysisInterceptor.java b/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/interceptors/SecurityAnalysisInterceptor.java\nindex ff9542021..5273f9fca 100644\n--- a/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/interceptors/SecurityAnalysisInterceptor.java\n+++ b/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/interceptors/SecurityAnalysisInterceptor.java\n\n@@ -16,44 +15,9 @@ import com.powsybl.security.SecurityAnalysisResult;\n  */\n public interface SecurityAnalysisInterceptor {\n \n-    /**\n-     * Callback after the pre-contingency analysis result is created\n-     * @param context The running context\n-     * @param preContingencyResult\n-     */\n     void onPreContingencyResult(RunningContext context, LimitViolationsResult preContingencyResult);\n \n-    /**\n-     * Deprecated. Use {@link #onPostContingencyResult(ContingencyContext context, PostContingencyResult postContingencyResult)}\n-     * @param context\n-     * @param postContingencyResult\n-     */\n-    @Deprecated\n     void onPostContingencyResult(RunningContext context, PostContingencyResult postContingencyResult);\n \n-    /**\n-     * Callback after the post-contingency result is created\n-     * @param context\n-     * @param postContingencyResult\n-     */\n-    default void onPostContingencyResult(ContingencyContext context, PostContingencyResult postContingencyResult) {\n-        onPostContingencyResult(context.getRunningContext(), postContingencyResult);\n-    }\n-\n-    /**\n-     * Callback after the result is created\n-     * @param context\n-     * @param result\n-     */\n     void onSecurityAnalysisResult(RunningContext context, SecurityAnalysisResult result);\n-\n-    /**\n-     * Callback after a limit violation detected\n-     * @param context a violation context\n-     * @param limitViolation the limit violation; never {@literal null}\n-     */\n-    default void onLimitViolation(ViolationContext context, LimitViolation limitViolation) {\n-\n-    }\n-\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc4MTY3MA==", "url": "https://github.com/powsybl/powsybl-core/pull/1247#discussion_r402781670", "bodyText": "From my point of view, this is not a good design. With this one, we fill the SecurityAnalysisResultBuilder with a lot of information that are used only once.\nThe use case is:\n\nthe SecurityAnalysisResultBuilder is responsible on creating the contingencies and the violations.\nthe SecurityAnalysisInterceptors are responsible on adding the additional data to the contingencies and the violations\n\nThe SecurityAnalysisInterceptors need a way to access to the network or to another data source (the result of the simulation). I think we should keep only the RunningContext with extensions. However, the Interceptors should have a new notification method to distinguish the violation creation in pre and post contingency state:\npublic void onLimitViolation(RunningContext, Contingency contingency, LimitViolation violation);\n\nWith the contingency name, and the violation, the extension in the running context should be able to retrieve the relevant information from an additional datasource. In that case, I'm not convinced we should keep ViolationContext and ContingencyContext, but only RunningContext, that is global to the simulation. Separate everything in really small classes make the API hard to understand.", "author": "mathbagu", "createdAt": "2020-04-03T07:18:47Z", "path": "security-analysis/security-analysis-api/src/test/java/com/powsybl/security/SecurityAnalysisResultBuilderTest.java", "diffHunk": "@@ -33,29 +37,46 @@ public void failedResult() {\n \n     @Test\n     public void completeResult() {\n+        SecurityAnalysisInterceptor securityAnalysisInterceptorMock = new MockInterceptor();\n+        MockViolationContextExt preVioContextExt = new MockViolationContextExt();\n \n         SecurityAnalysisResultBuilder builder = new SecurityAnalysisResultBuilder(new LimitViolationFilter(),\n-                new RunningContext(network, network.getVariantManager().getWorkingVariantId()));\n+                new RunningContext(network, network.getVariantManager().getWorkingVariantId()), Collections.singleton(securityAnalysisInterceptorMock));\n \n         VoltageLevel vl = network.getVoltageLevel(\"VLHV1\");\n         vl.getBusView().getBusStream().forEach(b -> b.setV(410));\n \n+        SecurityAnalysisResultBuilder.PreContingencyResultBuilder preContingencyResultBuilder = builder.preContingency();\n+        SecurityAnalysisResultBuilder securityAnalysisResultBuilder = preContingencyResultBuilder.setComputationOk(true)\n+                .addViolationContextExtension(Security.checkLimits(network).get(0), preVioContextExt)", "originalCommit": "6112de13dbba9316b74daf295919d90941dbbb9f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg1NjYyNA==", "url": "https://github.com/powsybl/powsybl-core/pull/1247#discussion_r402856624", "bodyText": "The design with more specific ViolationContext and ContingencyContext comes from a comment from @jonenst about not changing the currently immutable class. If we keep only one RunningContext but make it very \"mutable\" by adding and removing extensions, it will not be possible to ensure its consistency, in particular in case of concurrent use.\nI think we could keep only the RunningContext class as you propose, but in that case it's important to create a new one for each notification of the interceptor, so that it stays thread safe.", "author": "sylvlecl", "createdAt": "2020-04-03T08:58:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc4MTY3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjg3MzA0Nw==", "url": "https://github.com/powsybl/powsybl-core/pull/1247#discussion_r402873047", "bodyText": "Then, don't make the RunningContext mutable using the extension mechanism and create subclasses? I think creating a lot of small objects with very short life cycle is not a good idea. You can also create a decorator to hide methods you don't want someone use (probably removing an extension). There is a lot of way to solve this, isn't it?", "author": "mathbagu", "createdAt": "2020-04-03T09:20:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc4MTY3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkwMjgwMw==", "url": "https://github.com/powsybl/powsybl-core/pull/1247#discussion_r402902803", "bodyText": "But then again you leave the implentation deal with a big unique stateful object, which is not convenient for thread safety, and may prevent to use the result builder \"on the go\": you will need to read all the result in order to be able to create your context.\nIt will not either be more performant I think, because you will probably need to create maps and search in them frequently, whereas small objects carry just the information you need.", "author": "sylvlecl", "createdAt": "2020-04-03T10:13:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc4MTY3MA=="}], "type": "inlineReview", "revised_code": {"commit": "3ceafe32a7e7e1ac448b578c220efaedea799641", "chunk": "diff --git a/security-analysis/security-analysis-api/src/test/java/com/powsybl/security/SecurityAnalysisResultBuilderTest.java b/security-analysis/security-analysis-api/src/test/java/com/powsybl/security/SecurityAnalysisResultBuilderTest.java\nindex c16d42fee..9aaedbd7f 100644\n--- a/security-analysis/security-analysis-api/src/test/java/com/powsybl/security/SecurityAnalysisResultBuilderTest.java\n+++ b/security-analysis/security-analysis-api/src/test/java/com/powsybl/security/SecurityAnalysisResultBuilderTest.java\n\n@@ -37,24 +33,13 @@ public class SecurityAnalysisResultBuilderTest {\n \n     @Test\n     public void completeResult() {\n-        SecurityAnalysisInterceptor securityAnalysisInterceptorMock = new MockInterceptor();\n-        MockViolationContextExt preVioContextExt = new MockViolationContextExt();\n \n         SecurityAnalysisResultBuilder builder = new SecurityAnalysisResultBuilder(new LimitViolationFilter(),\n-                new RunningContext(network, network.getVariantManager().getWorkingVariantId()), Collections.singleton(securityAnalysisInterceptorMock));\n+                new RunningContext(network, network.getVariantManager().getWorkingVariantId()));\n \n         VoltageLevel vl = network.getVoltageLevel(\"VLHV1\");\n         vl.getBusView().getBusStream().forEach(b -> b.setV(410));\n \n-        SecurityAnalysisResultBuilder.PreContingencyResultBuilder preContingencyResultBuilder = builder.preContingency();\n-        SecurityAnalysisResultBuilder securityAnalysisResultBuilder = preContingencyResultBuilder.setComputationOk(true)\n-                .addViolationContextExtension(Security.checkLimits(network).get(0), preVioContextExt)\n-                .endPreContingency();\n-        SecurityAnalysisResult build = securityAnalysisResultBuilder.build();\n-        LimitViolationsResult preContingencyResult = build.getPreContingencyResult();\n-        assertEquals(1, preContingencyResult.getLimitViolations().size());\n-        assertEquals(1, preVioContextExt.calledCount);\n-\n         builder.preContingency()\n                 .setComputationOk(true)\n                 .addViolations(Security.checkLimits(network))\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc4MzY3Nw==", "url": "https://github.com/powsybl/powsybl-core/pull/1247#discussion_r402783677", "bodyText": "We should not create a ViolationContext each time a violation is created. I think this is the responisibility of the extension to offer a way to retrieve relevant information from the violation (and the current contingency).\nSee below for more details.", "author": "mathbagu", "createdAt": "2020-04-03T07:22:52Z", "path": "security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java", "diffHunk": "@@ -94,20 +97,58 @@ public SecurityAnalysisResult build() {\n \n         protected final List<LimitViolation> violations = new ArrayList<>();\n \n+        protected final Map<LimitViolation, List<Extension<ViolationContext>>> extensionsByViolation = new HashMap<>();\n+\n         public B setComputationOk(boolean computationOk) {\n             this.computationOk = computationOk;\n             return (B) this;\n         }\n \n         public B addViolation(LimitViolation violation) {\n             violations.add(Objects.requireNonNull(violation));\n+            extensionsByViolation.put(violation, new ArrayList<>());\n             return (B) this;\n         }\n \n         public B addViolations(List<LimitViolation> violations) {\n-            violations.forEach(this::addViolation);\n+            Objects.requireNonNull(violations).forEach(this::addViolation);\n             return (B) this;\n         }\n+\n+        /**\n+         * @param limitViolation if it exists already, binding extension to it. Otherwise, it would be added first.\n+         * @param extension\n+         * @return\n+         */\n+        public B addViolationContextExtension(LimitViolation limitViolation, Extension<ViolationContext> extension) {\n+            Objects.requireNonNull(limitViolation);\n+            Objects.requireNonNull(extension);\n+            if (!violations.contains(limitViolation)) {\n+                this.addViolation(limitViolation);\n+            }\n+            extensionsByViolation.computeIfAbsent(limitViolation, lv -> new ArrayList<>());\n+            extensionsByViolation.computeIfPresent(limitViolation, (lv, list) -> {\n+                list.add(extension);\n+                return list;\n+            });\n+            return (B) this;\n+        }", "originalCommit": "6112de13dbba9316b74daf295919d90941dbbb9f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3ceafe32a7e7e1ac448b578c220efaedea799641", "chunk": "diff --git a/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java b/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java\nindex b5a4f079f..fb9f81304 100644\n--- a/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java\n+++ b/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java\n\n@@ -97,8 +94,6 @@ public class SecurityAnalysisResultBuilder {\n \n         protected final List<LimitViolation> violations = new ArrayList<>();\n \n-        protected final Map<LimitViolation, List<Extension<ViolationContext>>> extensionsByViolation = new HashMap<>();\n-\n         public B setComputationOk(boolean computationOk) {\n             this.computationOk = computationOk;\n             return (B) this;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc4MzkzNw==", "url": "https://github.com/powsybl/powsybl-core/pull/1247#discussion_r402783937", "bodyText": "Same remark here", "author": "mathbagu", "createdAt": "2020-04-03T07:23:21Z", "path": "security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java", "diffHunk": "@@ -132,19 +173,33 @@ public SecurityAnalysisResultBuilder endPreContingency() {\n     public class PostContingencyResultBuilder extends AbstractLimitViolationsResultBuilder<PostContingencyResultBuilder> {\n \n         private final Contingency contingency;\n+        private final List<Extension<ContingencyContext>> contingencyContextExtensions;\n \n         PostContingencyResultBuilder(Contingency contingency) {\n             this.contingency = Objects.requireNonNull(contingency);\n+            this.contingencyContextExtensions = new ArrayList<>();\n+        }\n+\n+        public PostContingencyResultBuilder addContingencyContextExtension(Extension<ContingencyContext> extension) {\n+            contingencyContextExtensions.add(Objects.requireNonNull(extension));\n+            return this;\n+        }\n+\n+        public PostContingencyResultBuilder addContingencyContextExtensions(List<Extension<ContingencyContext>> extensions) {\n+            Objects.requireNonNull(extensions).forEach(this::addContingencyContextExtension);\n+            return this;", "originalCommit": "6112de13dbba9316b74daf295919d90941dbbb9f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3ceafe32a7e7e1ac448b578c220efaedea799641", "chunk": "diff --git a/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java b/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java\nindex b5a4f079f..fb9f81304 100644\n--- a/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java\n+++ b/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java\n\n@@ -173,21 +132,9 @@ public class SecurityAnalysisResultBuilder {\n     public class PostContingencyResultBuilder extends AbstractLimitViolationsResultBuilder<PostContingencyResultBuilder> {\n \n         private final Contingency contingency;\n-        private final List<Extension<ContingencyContext>> contingencyContextExtensions;\n \n         PostContingencyResultBuilder(Contingency contingency) {\n             this.contingency = Objects.requireNonNull(contingency);\n-            this.contingencyContextExtensions = new ArrayList<>();\n-        }\n-\n-        public PostContingencyResultBuilder addContingencyContextExtension(Extension<ContingencyContext> extension) {\n-            contingencyContextExtensions.add(Objects.requireNonNull(extension));\n-            return this;\n-        }\n-\n-        public PostContingencyResultBuilder addContingencyContextExtensions(List<Extension<ContingencyContext>> extensions) {\n-            Objects.requireNonNull(extensions).forEach(this::addContingencyContextExtension);\n-            return this;\n         }\n \n         /**\n"}}, {"oid": "3ceafe32a7e7e1ac448b578c220efaedea799641", "url": "https://github.com/powsybl/powsybl-core/commit/3ceafe32a7e7e1ac448b578c220efaedea799641", "message": "Change the design of the SecurityAnalysisResultBuilder (#1207)\n\n* Change the design of the SecurityAnalysisResultBuilder\r\n\r\nSigned-off-by: Mathieu BAGUE <mathieu.bague@rte-france.com>\n(cherry picked from commit 63cc9c74bcfaff7dd16ec78d7100f2a607a4eef2)", "committedDate": "2020-04-03T15:46:30Z", "type": "commit"}, {"oid": "19a0e60637832a46541ae982f7787cf730dcb595", "url": "https://github.com/powsybl/powsybl-core/commit/19a0e60637832a46541ae982f7787cf730dcb595", "message": "Improve security analysis interceptor\n\nAdd two more methods in interceptor and two contexts correspondent.\n\nMake interceptors protected\n\nSigned-off-by: yichen88 <tang.yichenyves@gmail.com>\n\nImprove interceptor\n\nSigned-off-by: yichen88 <tang.yichenyves@gmail.com>", "committedDate": "2020-04-03T15:46:48Z", "type": "commit"}, {"oid": "0e42b4d039f3e2c7ca7334810658e976e0c10480", "url": "https://github.com/powsybl/powsybl-core/commit/0e42b4d039f3e2c7ca7334810658e976e0c10480", "message": "Consume extensions while building post result.\n\nThe post builder takes extensions when it created.\nBinding extensions on the ContingencyContext before the context is consumed by interceptors.\n\nSigned-off-by: yichen88 <tang.yichenyves@gmail.com>", "committedDate": "2020-04-03T15:46:51Z", "type": "commit"}, {"oid": "ea974e122e6edf410756d1597d26c0c3a9cd20ed", "url": "https://github.com/powsybl/powsybl-core/commit/ea974e122e6edf410756d1597d26c0c3a9cd20ed", "message": "Add deprecated annotation\n\nSigned-off-by: yichen88 <tang.yichenyves@gmail.com>", "committedDate": "2020-04-03T15:46:56Z", "type": "commit"}, {"oid": "d083bcef54563ad1a78c0f65228c9915e135b313", "url": "https://github.com/powsybl/powsybl-core/commit/d083bcef54563ad1a78c0f65228c9915e135b313", "message": "Some fix.\n\nRemove Violation/Contingency out of its context and make it independent in parameters.\n\nSigned-off-by: yichen88 <tang.yichenyves@gmail.com>", "committedDate": "2020-04-03T15:46:59Z", "type": "commit"}, {"oid": "3e47d220e057786b6bc478c316b018c58ad23068", "url": "https://github.com/powsybl/powsybl-core/commit/3e47d220e057786b6bc478c316b018c58ad23068", "message": "Fix binding extensions by builder.\n\nSigned-off-by: yichen88 <tang.yichenyves@gmail.com>", "committedDate": "2020-04-03T15:47:03Z", "type": "commit"}, {"oid": "4e5b10eeb79c60acfe95c7ad8d0062dcf5f4b6d8", "url": "https://github.com/powsybl/powsybl-core/commit/4e5b10eeb79c60acfe95c7ad8d0062dcf5f4b6d8", "message": "Fix CurrentLimitViolationInterceptor to use new method\n\nSigned-off-by: yichen88 <tang.yichenyves@gmail.com>", "committedDate": "2020-04-03T15:47:07Z", "type": "commit"}, {"oid": "b9fd370910f02c356daf628ad2aedb7af0667c6f", "url": "https://github.com/powsybl/powsybl-core/commit/b9fd370910f02c356daf628ad2aedb7af0667c6f", "message": "Some fix\n\nSigned-off-by: yichen88 <tang.yichenyves@gmail.com>", "committedDate": "2020-04-03T15:47:11Z", "type": "commit"}, {"oid": "b9fd370910f02c356daf628ad2aedb7af0667c6f", "url": "https://github.com/powsybl/powsybl-core/commit/b9fd370910f02c356daf628ad2aedb7af0667c6f", "message": "Some fix\n\nSigned-off-by: yichen88 <tang.yichenyves@gmail.com>", "committedDate": "2020-04-03T15:47:11Z", "type": "forcePushed"}, {"oid": "84e5d6329e8cddde81fac2649fd1d1184cbf78ae", "url": "https://github.com/powsybl/powsybl-core/commit/84e5d6329e8cddde81fac2649fd1d1184cbf78ae", "message": "Refactor\n\nSigned-off-by: yichen88 <tang.yichenyves@gmail.com>", "committedDate": "2020-04-06T19:01:34Z", "type": "commit"}, {"oid": "cabd94fbddd319ad6bb7a3b6fdde28fa02dd640d", "url": "https://github.com/powsybl/powsybl-core/commit/cabd94fbddd319ad6bb7a3b6fdde28fa02dd640d", "message": "Refactor\n\nSigned-off-by: yichen88 <tang.yichenyves@gmail.com>", "committedDate": "2020-04-07T08:40:36Z", "type": "commit"}, {"oid": "27ba79ed3b693589dbc6036af69a46ed14207c6b", "url": "https://github.com/powsybl/powsybl-core/commit/27ba79ed3b693589dbc6036af69a46ed14207c6b", "message": "Refactor\n\nSigned-off-by: yichen88 <tang.yichenyves@gmail.com>", "committedDate": "2020-04-07T10:04:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDcwNDgwNg==", "url": "https://github.com/powsybl/powsybl-core/pull/1247#discussion_r404704806", "bodyText": "!!", "author": "yichen88", "createdAt": "2020-04-07T10:29:47Z", "path": "security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java", "diffHunk": "@@ -26,179 +26,177 @@\n public class SecurityAnalysisResultBuilder {\n \n     private final LimitViolationFilter filter;\n-    private final RunningContext context;\n+    private final SecurityAnalysisResultContext context;\n     private final List<SecurityAnalysisInterceptor> interceptors;\n \n     // Below are volatile objects used for building the actual complete result\n     private LimitViolationsResult preContingencyResult;\n-    private List<PostContingencyResult> postContingencyResults;\n+    private final List<PostContingencyResult> postContingencyResults = Collections.synchronizedList(new ArrayList<>());\n \n-    private ResultBuilder currentBuilder = null;\n-\n-    public SecurityAnalysisResultBuilder(LimitViolationFilter filter, RunningContext context,\n+    public SecurityAnalysisResultBuilder(LimitViolationFilter filter, SecurityAnalysisResultContext context,\n                                          Collection<SecurityAnalysisInterceptor> interceptors) {\n         this.filter = Objects.requireNonNull(filter);\n         this.context = Objects.requireNonNull(context);\n         this.interceptors = ImmutableList.copyOf(interceptors);\n-        this.postContingencyResults = new ArrayList<>();\n     }\n \n-    public SecurityAnalysisResultBuilder(LimitViolationFilter filter, RunningContext context) {\n+    public SecurityAnalysisResultBuilder(LimitViolationFilter filter, SecurityAnalysisResultContext context) {\n         this(filter, context, Collections.emptyList());\n     }\n \n-    /**\n-     * Initiates the creation of the result for one {@link Contingency}.\n-     * @param contingency  the contingency for which a result should be created\n-     * @return             this SecurityAnalysisResultBuilder instance\n-     */\n-    public SecurityAnalysisResultBuilder contingency(Contingency contingency) {\n-        if (currentBuilder != null) {\n-            throw new IllegalStateException(\"Cannot start a new post-contingency result\");\n-        }\n-        currentBuilder = new PostContingencyResultBuilder(contingency);\n-        return this;\n+    private void setPreContingencyResult(LimitViolationsResult preContingencyResult) {\n+        this.preContingencyResult = Objects.requireNonNull(preContingencyResult);\n     }\n \n-    /**\n-     * Initiates the creation of the result for N situation.\n-     * @return this SecurityAnalysisResultBuilder instance.\n-     */\n-    public SecurityAnalysisResultBuilder preContingency() {\n-        if (currentBuilder != null) {\n-            throw new IllegalStateException(\"Cannot start a new pre-contingency result\");\n-        }\n-\n-        currentBuilder = new PreContingencyResultBuilder();\n-        return this;\n+    private void addPostContingencyResult(PostContingencyResult result) {\n+        postContingencyResults.add(Objects.requireNonNull(result));\n     }\n \n     /**\n-     * Finalize the creation of the PreContingencyResult instance\n-     * @return this SecurityAnalysisResultBuilder instance.\n+     * Initiates the creation of the result for N situation.\n+     * @return a {@link PreContingencyResultBuilder} instance.\n      */\n-    public SecurityAnalysisResultBuilder endPreContingency() {\n-        if (currentBuilder instanceof PreContingencyResultBuilder) {\n-            ((PreContingencyResultBuilder) currentBuilder).endPreContingency();\n-            currentBuilder = null;\n-            return this;\n-        }\n-\n-        throw new IllegalStateException(\"Cannot create the pre-contingency result\");\n+    public PreContingencyResultBuilder preContingency() {\n+        return new PreContingencyResultBuilder(context);\n     }\n \n-    /**\n-     * Finalize the creation of the PostContingencyResult instance\n-     * @return this SecurityAnalysisResultBuilder instance.\n-     */\n-    public SecurityAnalysisResultBuilder endContingency() {\n-        if (currentBuilder instanceof PostContingencyResultBuilder) {\n-            ((PostContingencyResultBuilder) currentBuilder).endContingency();\n-            currentBuilder = null;\n-            return this;\n-        }\n-\n-        throw new IllegalStateException(\"Cannot create the post-contingency result\");\n+    public PreContingencyResultBuilder preContingency(SecurityAnalysisResultContext context) {\n+        return new PreContingencyResultBuilder(context);\n     }\n \n     /**\n-     * Add a violation for the current result\n-     * @return this SecurityAnalysisResultBuilder instance.\n+     * Initiates the creation of the result for one {@link Contingency}.\n+     * @param contingency the contingency for which a result should be created\n+     * @return a {@link PostContingencyResultBuilder} instance.\n      */\n-    public SecurityAnalysisResultBuilder addViolation(LimitViolation violation) {\n-        if (currentBuilder == null) {\n-            throw new IllegalStateException(\"Cannot add the violation: currentBuilder is not set\");\n-        }\n-\n-        currentBuilder.addViolation(violation);\n-        return this;\n+    public PostContingencyResultBuilder contingency(Contingency contingency) {\n+        return new PostContingencyResultBuilder(contingency);\n     }\n \n-    public SecurityAnalysisResultBuilder setComputationOk(boolean computationOk) {\n-        if (currentBuilder == null) {\n-            throw new IllegalStateException(\"Cannot set computation status: currentBuilder is not set\");\n-        }\n-\n-        currentBuilder.setComputationOk(computationOk);\n-        return this;\n+    public PostContingencyResultBuilder contingency(Contingency contingency, SecurityAnalysisResultContext resultContext) {\n+        return new PostContingencyResultBuilder(contingency, resultContext);\n     }\n \n     /**\n      * Finalizes the result.\n      * @return the N situation result builder\n      */\n     public SecurityAnalysisResult build() {\n-        if (currentBuilder != null) {\n-            throw new IllegalStateException(\"Cannot build the result: the currentBuilder is not terminated\");\n-        }\n         if (preContingencyResult == null) {\n             throw new IllegalStateException(\"Pre-contingency result is not yet defined, cannot build security analysis result.\");\n         }\n \n         SecurityAnalysisResult res = new SecurityAnalysisResult(preContingencyResult, postContingencyResults);\n         res.setNetworkMetadata(new NetworkMetadata(context.getNetwork()));\n-        interceptors.forEach(i -> i.onSecurityAnalysisResult(context, res));\n+        interceptors.forEach(i -> i.onSecurityAnalysisResult(res, context));\n \n         return res;\n     }\n \n     /**\n-     * Provides access to the security analysis running context to children classes.\n-     * @return the security analysis running context.\n+     * Base class for the pre and post contingency builders.\n      */\n-    protected RunningContext getContext() {\n-        return context;\n-    }\n+    public abstract class AbstractLimitViolationsResultBuilder<B extends AbstractLimitViolationsResultBuilder<B>> {\n \n-    private interface ResultBuilder {\n+        protected boolean computationOk;\n \n-        void setComputationOk(boolean computationOk);\n+        protected final List<LimitViolation> violations = new ArrayList<>();\n \n-        void addViolation(LimitViolation violation);\n+        protected final SecurityAnalysisResultContext resultContext;\n \n-    }\n+        public B setComputationOk(boolean computationOk) {\n+            this.computationOk = computationOk;\n+            return (B) this;\n+        }\n \n-    private class LimitViolationsResultBuilder implements ResultBuilder {\n+        public AbstractLimitViolationsResultBuilder(SecurityAnalysisResultContext resultContext) {\n+            this.resultContext = resultContext;\n+        }\n \n-        protected boolean computationOk;\n+        public B addViolation(LimitViolation violation) {\n+            addViolation(violation, resultContext);\n+            return (B) this;\n+        }\n \n-        protected final List<LimitViolation> violations = new ArrayList<>();\n+        public B addViolation(LimitViolation violation, SecurityAnalysisResultContext context) {\n+            Objects.requireNonNull(context);\n+            interceptors.forEach(i -> i.onLimitViolation(violation, context));\n+            violations.add(Objects.requireNonNull(violation));\n+            return (B) this;\n+        }\n \n-        @Override\n-        public void setComputationOk(boolean computationOk) {\n-            this.computationOk = computationOk;\n+        public B addViolations(List<LimitViolation> violations, SecurityAnalysisResultContext context) {\n+            Objects.requireNonNull(violations).forEach(limitViolation -> addViolation(limitViolation, context));\n+            return (B) this;\n         }\n \n-        @Override\n-        public void addViolation(LimitViolation violation) {\n-            violations.add(Objects.requireNonNull(violation));\n+        public B addViolations(List<LimitViolation> violations) {\n+            return addViolations(violations, resultContext);\n         }\n \n+        protected List<LimitViolation> filterViolations(SecurityAnalysisResultContext context, LimitViolationFilter filter, List<SecurityAnalysisInterceptor> interceptors) {\n+            List<LimitViolation> filteredViolations = filter.apply(violations, context.getNetwork());\n+            return filteredViolations;\n+        }\n     }\n \n-    private class PreContingencyResultBuilder extends LimitViolationsResultBuilder {\n+    /**\n+     * Builder for the pre-contingency result\n+     */\n+    public class PreContingencyResultBuilder extends AbstractLimitViolationsResultBuilder<PreContingencyResultBuilder> {\n \n-        void endPreContingency() {\n-            List<LimitViolation> filteredViolations = filter.apply(violations, context.getNetwork());\n+        public PreContingencyResultBuilder(SecurityAnalysisResultContext resultContext) {\n+            super(resultContext);\n+        }\n+\n+        /**\n+         * Finalize the creation of the PreContingencyResult instance\n+         * @return the parent {@link SecurityAnalysisResultBuilder} instance.\n+         */\n+        public SecurityAnalysisResultBuilder endPreContingency() {\n+            List<LimitViolation> filteredViolations = filterViolations(resultContext, filter, interceptors);\n             LimitViolationsResult res = new LimitViolationsResult(computationOk, filteredViolations);\n-            interceptors.forEach(i -> i.onPreContingencyResult(context, res));\n-            preContingencyResult = res;\n+//            interceptors.forEach(i -> i.onPreContingencyResult(context, res));", "originalCommit": "27ba79ed3b693589dbc6036af69a46ed14207c6b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a75e97ca8181200c5038d52e4a1e47a382fbeaee", "chunk": "diff --git a/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java b/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java\nindex e7bc5ec4c..0091dae7d 100644\n--- a/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java\n+++ b/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java\n\n@@ -134,10 +134,6 @@ public class SecurityAnalysisResultBuilder {\n             return addViolations(violations, resultContext);\n         }\n \n-        protected List<LimitViolation> filterViolations(SecurityAnalysisResultContext context, LimitViolationFilter filter, List<SecurityAnalysisInterceptor> interceptors) {\n-            List<LimitViolation> filteredViolations = filter.apply(violations, context.getNetwork());\n-            return filteredViolations;\n-        }\n     }\n \n     /**\n"}}, {"oid": "a75e97ca8181200c5038d52e4a1e47a382fbeaee", "url": "https://github.com/powsybl/powsybl-core/commit/a75e97ca8181200c5038d52e4a1e47a382fbeaee", "message": "Fix names in test\n\nSigned-off-by: yichen88 <tang.yichenyves@gmail.com>", "committedDate": "2020-04-07T14:31:18Z", "type": "commit"}, {"oid": "47dbeaed905a5dceffdbec9cbdb2c7f1bc940212", "url": "https://github.com/powsybl/powsybl-core/commit/47dbeaed905a5dceffdbec9cbdb2c7f1bc940212", "message": "Some clean\n\nSigned-off-by: yichen88 <tang.yichenyves@gmail.com>", "committedDate": "2020-04-07T15:12:43Z", "type": "commit"}, {"oid": "47dbeaed905a5dceffdbec9cbdb2c7f1bc940212", "url": "https://github.com/powsybl/powsybl-core/commit/47dbeaed905a5dceffdbec9cbdb2c7f1bc940212", "message": "Some clean\n\nSigned-off-by: yichen88 <tang.yichenyves@gmail.com>", "committedDate": "2020-04-07T15:12:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzMTQzOQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1247#discussion_r404931439", "bodyText": "Would slightly prefer to name it DefaultSecurityAnalysisResultContext because the \"Impl\" suffix sounds as if it's the only implementation of the context.", "author": "sylvlecl", "createdAt": "2020-04-07T16:08:08Z", "path": "security-analysis/security-analysis-api/src/main/java/com/powsybl/security/interceptors/SecurityAnalysisResultContextImpl.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/**\n+ * Copyright (c) 2020, RTE (http://www.rte-france.com)\n+ * This Source Code Form is subject to the terms of the Mozilla Public\n+ * License, v. 2.0. If a copy of the MPL was not distributed with this\n+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n+ */\n+package com.powsybl.security.interceptors;\n+\n+import com.powsybl.iidm.network.Network;\n+\n+import java.util.Objects;\n+\n+/**\n+ * @author Yichen TANG <yichen.tang at rte-france.com>\n+ */\n+public class SecurityAnalysisResultContextImpl implements SecurityAnalysisResultContext {", "originalCommit": "47dbeaed905a5dceffdbec9cbdb2c7f1bc940212", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9e127eafe4d6b5f45534ec2156114952f943b7ca", "chunk": "diff --git a/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/interceptors/SecurityAnalysisResultContextImpl.java b/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/interceptors/DefaultSecurityAnalysisResultContext.java\nsimilarity index 79%\nrename from security-analysis/security-analysis-api/src/main/java/com/powsybl/security/interceptors/SecurityAnalysisResultContextImpl.java\nrename to security-analysis/security-analysis-api/src/main/java/com/powsybl/security/interceptors/DefaultSecurityAnalysisResultContext.java\nindex 37dd3c478..66248e1d3 100644\n--- a/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/interceptors/SecurityAnalysisResultContextImpl.java\n+++ b/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/interceptors/DefaultSecurityAnalysisResultContext.java\n\n@@ -13,11 +13,11 @@ import java.util.Objects;\n /**\n  * @author Yichen TANG <yichen.tang at rte-france.com>\n  */\n-public class SecurityAnalysisResultContextImpl implements SecurityAnalysisResultContext {\n+public class DefaultSecurityAnalysisResultContext implements SecurityAnalysisResultContext {\n \n     private final Network network;\n \n-    public SecurityAnalysisResultContextImpl(Network network) {\n+    public DefaultSecurityAnalysisResultContext(Network network) {\n         this.network = Objects.requireNonNull(network);\n     }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzNjgzNw==", "url": "https://github.com/powsybl/powsybl-core/pull/1247#discussion_r404936837", "bodyText": "I finally don't think it's a good idea to add those default implementations, because they will not have the same behaviour as the original methods (because passed variant ID is not the same).\nI think it's less error-prone to force the implementations to adapt on migration.", "author": "sylvlecl", "createdAt": "2020-04-07T16:15:31Z", "path": "security-analysis/security-analysis-api/src/main/java/com/powsybl/security/interceptors/SecurityAnalysisInterceptor.java", "diffHunk": "@@ -15,9 +18,80 @@\n  */\n public interface SecurityAnalysisInterceptor {\n \n+    /**\n+     * @Deprected. Use {@link #onPreContingencyResult(LimitViolationsResult, SecurityAnalysisResultContext)}\n+     * Callback after the pre-contingency analysis result is created\n+     * @param context The running context\n+     * @param preContingencyResult\n+     */\n+    @Deprecated\n     void onPreContingencyResult(RunningContext context, LimitViolationsResult preContingencyResult);\n \n-    void onPostContingencyResult(RunningContext context, PostContingencyResult postContingencyResult);\n+    /**\n+     * @Deprecated. Use {@link #onPostContingencyResult(PostContingencyResult, SecurityAnalysisResultContext)}\n+     * @param context\n+     * @param postContingencyResult\n+     */\n+    @Deprecated\n+    default void onPostContingencyResult(RunningContext context, PostContingencyResult postContingencyResult) {\n+        onPostContingencyResult(postContingencyResult, context);\n+    }\n+\n+    /**\n+     * @Deprecated. Use {@link #onSecurityAnalysisResult(SecurityAnalysisResult, SecurityAnalysisResultContext)}\n+     * Callback after the result is created\n+     * @param context\n+     * @param result\n+     */\n+    @Deprecated\n+    default void onSecurityAnalysisResult(RunningContext context, SecurityAnalysisResult result) {\n+        onSecurityAnalysisResult(result, context);\n+    }\n+\n+    /**\n+     * Callback after the pre-contingency result is built.\n+     * @param preContingencyResult\n+     * @param context\n+     */\n+    default void onPreContingencyResult(LimitViolationsResult preContingencyResult, SecurityAnalysisResultContext context) {\n+        onPreContingencyResult(new RunningContext(context.getNetwork(), VariantManagerConstants.INITIAL_VARIANT_ID), preContingencyResult);", "originalCommit": "47dbeaed905a5dceffdbec9cbdb2c7f1bc940212", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9e127eafe4d6b5f45534ec2156114952f943b7ca", "chunk": "diff --git a/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/interceptors/SecurityAnalysisInterceptor.java b/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/interceptors/SecurityAnalysisInterceptor.java\nindex bc8328a2d..65af09dc8 100644\n--- a/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/interceptors/SecurityAnalysisInterceptor.java\n+++ b/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/interceptors/SecurityAnalysisInterceptor.java\n\n@@ -19,16 +18,18 @@ import com.powsybl.security.SecurityAnalysisResult;\n public interface SecurityAnalysisInterceptor {\n \n     /**\n-     * @Deprected. Use {@link #onPreContingencyResult(LimitViolationsResult, SecurityAnalysisResultContext)}\n+     * @deprecated Use {@link #onPreContingencyResult(LimitViolationsResult, SecurityAnalysisResultContext)}\n      * Callback after the pre-contingency analysis result is created\n      * @param context The running context\n      * @param preContingencyResult\n      */\n     @Deprecated\n-    void onPreContingencyResult(RunningContext context, LimitViolationsResult preContingencyResult);\n+    default void onPreContingencyResult(RunningContext context, LimitViolationsResult preContingencyResult) {\n+        onPreContingencyResult(preContingencyResult, context);\n+    }\n \n     /**\n-     * @Deprecated. Use {@link #onPostContingencyResult(PostContingencyResult, SecurityAnalysisResultContext)}\n+     * @deprecated Use {@link #onPostContingencyResult(PostContingencyResult, SecurityAnalysisResultContext)}\n      * @param context\n      * @param postContingencyResult\n      */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk1MzU3Ng==", "url": "https://github.com/powsybl/powsybl-core/pull/1247#discussion_r404953576", "bodyText": "Maybe we should rename the argument to avoid confusion with the class field.", "author": "sylvlecl", "createdAt": "2020-04-07T16:39:12Z", "path": "security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java", "diffHunk": "@@ -57,18 +57,26 @@ private void addPostContingencyResult(PostContingencyResult result) {\n      * @return a {@link PreContingencyResultBuilder} instance.\n      */\n     public PreContingencyResultBuilder preContingency() {\n-        return new PreContingencyResultBuilder();\n+        return new PreContingencyResultBuilder(context);\n+    }\n+\n+    public PreContingencyResultBuilder preContingency(SecurityAnalysisResultContext context) {", "originalCommit": "47dbeaed905a5dceffdbec9cbdb2c7f1bc940212", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA3MDg0MQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1247#discussion_r405070841", "bodyText": "/**\n         * Adds a {@link LimitViolation} to the builder.\n         * The default result context would be supplied to interceptors.\n         * @param violation\n         * @return\n         */\n        public B addViolation(LimitViolation violation) {\n            addViolation(violation, resultContext);\n            return (B) this;\n        }\nI am not sure for this part.", "author": "yichen88", "createdAt": "2020-04-07T19:50:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk1MzU3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTM0MzE4OA==", "url": "https://github.com/powsybl/powsybl-core/pull/1247#discussion_r405343188", "bodyText": "It looks good to me :) As a convenience we allow the implementation to provide only a context at the beginning, and we pass it along to all calls.\nIt ensures that a context is always given to the interceptors.", "author": "sylvlecl", "createdAt": "2020-04-08T08:20:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk1MzU3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "9e127eafe4d6b5f45534ec2156114952f943b7ca", "chunk": "diff --git a/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java b/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java\nindex 0091dae7d..2223df2e0 100644\n--- a/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java\n+++ b/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java\n\n@@ -60,8 +60,13 @@ public class SecurityAnalysisResultBuilder {\n         return new PreContingencyResultBuilder(context);\n     }\n \n-    public PreContingencyResultBuilder preContingency(SecurityAnalysisResultContext context) {\n-        return new PreContingencyResultBuilder(context);\n+    /**\n+     * Initiates the creation of the result for N situation\n+     * @param preContingencyResultContext the context used when create the result\n+     * @return a {@link PreContingencyResultBuilder} instance.\n+     */\n+    public PreContingencyResultBuilder preContingency(SecurityAnalysisResultContext preContingencyResultContext) {\n+        return new PreContingencyResultBuilder(preContingencyResultContext);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk1ODI0Nw==", "url": "https://github.com/powsybl/powsybl-core/pull/1247#discussion_r404958247", "bodyText": "Better to move the non null check at the method start now.", "author": "sylvlecl", "createdAt": "2020-04-07T16:46:15Z", "path": "security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java", "diffHunk": "@@ -80,49 +88,71 @@ public SecurityAnalysisResult build() {\n \n         SecurityAnalysisResult res = new SecurityAnalysisResult(preContingencyResult, postContingencyResults);\n         res.setNetworkMetadata(new NetworkMetadata(context.getNetwork()));\n-        interceptors.forEach(i -> i.onSecurityAnalysisResult(context, res));\n+        interceptors.forEach(i -> i.onSecurityAnalysisResult(res, context));\n \n         return res;\n     }\n \n     /**\n      * Base class for the pre and post contingency builders.\n      */\n-    public abstract static class AbstractLimitViolationsResultBuilder<B extends AbstractLimitViolationsResultBuilder<B>> {\n+    public abstract class AbstractLimitViolationsResultBuilder<B extends AbstractLimitViolationsResultBuilder<B>> {\n \n         protected boolean computationOk;\n \n         protected final List<LimitViolation> violations = new ArrayList<>();\n \n+        protected final SecurityAnalysisResultContext resultContext;\n+\n         public B setComputationOk(boolean computationOk) {\n             this.computationOk = computationOk;\n             return (B) this;\n         }\n \n+        public AbstractLimitViolationsResultBuilder(SecurityAnalysisResultContext resultContext) {\n+            this.resultContext = resultContext;\n+        }\n+\n         public B addViolation(LimitViolation violation) {\n+            addViolation(violation, resultContext);\n+            return (B) this;\n+        }\n+\n+        public B addViolation(LimitViolation violation, SecurityAnalysisResultContext context) {\n+            Objects.requireNonNull(context);\n+            interceptors.forEach(i -> i.onLimitViolation(violation, context));\n             violations.add(Objects.requireNonNull(violation));", "originalCommit": "47dbeaed905a5dceffdbec9cbdb2c7f1bc940212", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9e127eafe4d6b5f45534ec2156114952f943b7ca", "chunk": "diff --git a/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java b/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java\nindex 0091dae7d..2223df2e0 100644\n--- a/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java\n+++ b/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java\n\n@@ -109,24 +120,39 @@ public class SecurityAnalysisResultBuilder {\n             return (B) this;\n         }\n \n+        /**\n+         * Initiates a result builder with a {@link SecurityAnalysisResultContext}.\n+         * @param resultContext The context would be used when creation result or as default context when a limit violation added.\n+         */\n         public AbstractLimitViolationsResultBuilder(SecurityAnalysisResultContext resultContext) {\n             this.resultContext = resultContext;\n         }\n \n+        /**\n+         * Adds a {@link LimitViolation} to the builder.\n+         * The default result context would be supplied to interceptors.\n+         * @param violation\n+         * @return\n+         */\n         public B addViolation(LimitViolation violation) {\n             addViolation(violation, resultContext);\n             return (B) this;\n         }\n \n-        public B addViolation(LimitViolation violation, SecurityAnalysisResultContext context) {\n-            Objects.requireNonNull(context);\n-            interceptors.forEach(i -> i.onLimitViolation(violation, context));\n+        /**\n+         * Adds a {@link LimitViolation} to the builder with a context.\n+         * @param violation the context would be supplied to interceptors.\n+         * @return\n+         */\n+        public B addViolation(LimitViolation violation, SecurityAnalysisResultContext limitViolationContext) {\n+            Objects.requireNonNull(limitViolationContext);\n             violations.add(Objects.requireNonNull(violation));\n+            interceptors.forEach(i -> i.onLimitViolation(violation, limitViolationContext));\n             return (B) this;\n         }\n \n-        public B addViolations(List<LimitViolation> violations, SecurityAnalysisResultContext context) {\n-            Objects.requireNonNull(violations).forEach(limitViolation -> addViolation(limitViolation, context));\n+        public B addViolations(List<LimitViolation> violations, SecurityAnalysisResultContext limitViolationContext) {\n+            Objects.requireNonNull(violations).forEach(limitViolation -> addViolation(limitViolation, limitViolationContext));\n             return (B) this;\n         }\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk1OTMyNA==", "url": "https://github.com/powsybl/powsybl-core/pull/1247#discussion_r404959324", "bodyText": "It should be removed.", "author": "sylvlecl", "createdAt": "2020-04-07T16:47:54Z", "path": "security-analysis/security-analysis-api/src/main/java/com/powsybl/security/interceptors/DefaultSecurityAnalysisInterceptor.java", "diffHunk": "@@ -23,12 +25,33 @@ public void onPreContingencyResult(RunningContext context, LimitViolationsResult\n     }\n \n     @Override\n-    public void onPostContingencyResult(RunningContext context, PostContingencyResult postContingencyResult) {\n+    public void onSecurityAnalysisResult(RunningContext context, SecurityAnalysisResult result) {", "originalCommit": "47dbeaed905a5dceffdbec9cbdb2c7f1bc940212", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9e127eafe4d6b5f45534ec2156114952f943b7ca", "chunk": "diff --git a/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/interceptors/DefaultSecurityAnalysisInterceptor.java b/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/interceptors/DefaultSecurityAnalysisInterceptor.java\nindex 830695b54..9cc3cf08f 100644\n--- a/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/interceptors/DefaultSecurityAnalysisInterceptor.java\n+++ b/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/interceptors/DefaultSecurityAnalysisInterceptor.java\n\n@@ -19,16 +19,6 @@ import com.powsybl.security.SecurityAnalysisResult;\n  */\n public class DefaultSecurityAnalysisInterceptor implements SecurityAnalysisInterceptor {\n \n-    @Override\n-    public void onPreContingencyResult(RunningContext context, LimitViolationsResult preContingencyResult) {\n-        // Nothing to do\n-    }\n-\n-    @Override\n-    public void onSecurityAnalysisResult(RunningContext context, SecurityAnalysisResult result) {\n-        // Nothing to do\n-    }\n-\n     @Override\n     public void onPreContingencyResult(LimitViolationsResult preContingencyResult, SecurityAnalysisResultContext context) {\n \n"}}, {"oid": "9e127eafe4d6b5f45534ec2156114952f943b7ca", "url": "https://github.com/powsybl/powsybl-core/commit/9e127eafe4d6b5f45534ec2156114952f943b7ca", "message": "Rename and add javadoc\n\nSigned-off-by: yichen88 <tang.yichenyves@gmail.com>", "committedDate": "2020-04-07T19:47:49Z", "type": "commit"}, {"oid": "f86129c7a8b0ed6d212e61d1e8e8d984be764582", "url": "https://github.com/powsybl/powsybl-core/commit/f86129c7a8b0ed6d212e61d1e8e8d984be764582", "message": "Add default behavior in new api to smoothly convert to old api\n\nSigned-off-by: yichen88 <tang.yichenyves@gmail.com>", "committedDate": "2020-04-08T09:47:12Z", "type": "forcePushed"}, {"oid": "714830add6a5486c1c4ae2b6ae0bc73b4cac9408", "url": "https://github.com/powsybl/powsybl-core/commit/714830add6a5486c1c4ae2b6ae0bc73b4cac9408", "message": "Add default behavior in new api to smoothly convert to old api\n\nSigned-off-by: yichen88 <tang.yichenyves@gmail.com>", "committedDate": "2020-04-08T10:52:47Z", "type": "commit"}, {"oid": "714830add6a5486c1c4ae2b6ae0bc73b4cac9408", "url": "https://github.com/powsybl/powsybl-core/commit/714830add6a5486c1c4ae2b6ae0bc73b4cac9408", "message": "Add default behavior in new api to smoothly convert to old api\n\nSigned-off-by: yichen88 <tang.yichenyves@gmail.com>", "committedDate": "2020-04-08T10:52:47Z", "type": "forcePushed"}, {"oid": "81cc4e9f154294685f3b4eeae487aba04b96265f", "url": "https://github.com/powsybl/powsybl-core/commit/81cc4e9f154294685f3b4eeae487aba04b96265f", "message": "Add javadoc to explain more the interceptor/context design.\n\nSigned-off-by: Sylvain Leclerc <sylvain.leclerc@rte-france.com>", "committedDate": "2020-04-08T11:30:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxMDUyNw==", "url": "https://github.com/powsybl/powsybl-core/pull/1247#discussion_r405610527", "bodyText": "We should remove this method, and pass the context in the postContingency() method, to have a symmetrical design", "author": "mathbagu", "createdAt": "2020-04-08T15:25:42Z", "path": "security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java", "diffHunk": "@@ -26,179 +26,198 @@\n public class SecurityAnalysisResultBuilder {\n \n     private final LimitViolationFilter filter;\n-    private final RunningContext context;\n+    private final SecurityAnalysisResultContext context;\n     private final List<SecurityAnalysisInterceptor> interceptors;\n \n     // Below are volatile objects used for building the actual complete result\n     private LimitViolationsResult preContingencyResult;\n-    private List<PostContingencyResult> postContingencyResults;\n+    private final List<PostContingencyResult> postContingencyResults = Collections.synchronizedList(new ArrayList<>());\n \n-    private ResultBuilder currentBuilder = null;\n-\n-    public SecurityAnalysisResultBuilder(LimitViolationFilter filter, RunningContext context,\n+    public SecurityAnalysisResultBuilder(LimitViolationFilter filter, SecurityAnalysisResultContext context,\n                                          Collection<SecurityAnalysisInterceptor> interceptors) {\n         this.filter = Objects.requireNonNull(filter);\n         this.context = Objects.requireNonNull(context);\n         this.interceptors = ImmutableList.copyOf(interceptors);\n-        this.postContingencyResults = new ArrayList<>();\n     }\n \n-    public SecurityAnalysisResultBuilder(LimitViolationFilter filter, RunningContext context) {\n+    public SecurityAnalysisResultBuilder(LimitViolationFilter filter, SecurityAnalysisResultContext context) {\n         this(filter, context, Collections.emptyList());\n     }\n \n-    /**\n-     * Initiates the creation of the result for one {@link Contingency}.\n-     * @param contingency  the contingency for which a result should be created\n-     * @return             this SecurityAnalysisResultBuilder instance\n-     */\n-    public SecurityAnalysisResultBuilder contingency(Contingency contingency) {\n-        if (currentBuilder != null) {\n-            throw new IllegalStateException(\"Cannot start a new post-contingency result\");\n-        }\n-        currentBuilder = new PostContingencyResultBuilder(contingency);\n-        return this;\n+    private void setPreContingencyResult(LimitViolationsResult preContingencyResult) {\n+        this.preContingencyResult = Objects.requireNonNull(preContingencyResult);\n+    }\n+\n+    private void addPostContingencyResult(PostContingencyResult result) {\n+        postContingencyResults.add(Objects.requireNonNull(result));\n     }\n \n     /**\n      * Initiates the creation of the result for N situation.\n-     * @return this SecurityAnalysisResultBuilder instance.\n+     * @return a {@link PreContingencyResultBuilder} instance.\n      */\n-    public SecurityAnalysisResultBuilder preContingency() {\n-        if (currentBuilder != null) {\n-            throw new IllegalStateException(\"Cannot start a new pre-contingency result\");\n-        }\n-\n-        currentBuilder = new PreContingencyResultBuilder();\n-        return this;\n+    public PreContingencyResultBuilder preContingency() {\n+        return new PreContingencyResultBuilder(context);\n     }\n \n     /**\n-     * Finalize the creation of the PreContingencyResult instance\n-     * @return this SecurityAnalysisResultBuilder instance.\n+     * Initiates the creation of the result for N situation\n+     * @param preContingencyResultContext the context used when create the result\n+     * @return a {@link PreContingencyResultBuilder} instance.\n      */\n-    public SecurityAnalysisResultBuilder endPreContingency() {\n-        if (currentBuilder instanceof PreContingencyResultBuilder) {\n-            ((PreContingencyResultBuilder) currentBuilder).endPreContingency();\n-            currentBuilder = null;\n-            return this;\n-        }\n-\n-        throw new IllegalStateException(\"Cannot create the pre-contingency result\");\n+    public PreContingencyResultBuilder preContingency(SecurityAnalysisResultContext preContingencyResultContext) {\n+        return new PreContingencyResultBuilder(preContingencyResultContext);\n     }\n \n     /**\n-     * Finalize the creation of the PostContingencyResult instance\n-     * @return this SecurityAnalysisResultBuilder instance.\n+     * Initiates the creation of the result for one {@link Contingency}.\n+     * @param contingency the contingency for which a result should be created\n+     * @return a {@link PostContingencyResultBuilder} instance.\n      */\n-    public SecurityAnalysisResultBuilder endContingency() {\n-        if (currentBuilder instanceof PostContingencyResultBuilder) {\n-            ((PostContingencyResultBuilder) currentBuilder).endContingency();\n-            currentBuilder = null;\n-            return this;\n-        }\n-\n-        throw new IllegalStateException(\"Cannot create the post-contingency result\");\n+    public PostContingencyResultBuilder contingency(Contingency contingency) {\n+        return new PostContingencyResultBuilder(contingency);\n     }\n \n     /**\n-     * Add a violation for the current result\n-     * @return this SecurityAnalysisResultBuilder instance.\n+     * Initiates the creation of the result for one {@link Contingency}\n+     * @param contingency the contingency for which a result should be created\n+     * @param postContingencyResultContext the context used when create the result\n+     * @return a {@link PostContingencyResultBuilder} instance.\n      */\n-    public SecurityAnalysisResultBuilder addViolation(LimitViolation violation) {\n-        if (currentBuilder == null) {\n-            throw new IllegalStateException(\"Cannot add the violation: currentBuilder is not set\");\n-        }\n-\n-        currentBuilder.addViolation(violation);\n-        return this;\n-    }\n-\n-    public SecurityAnalysisResultBuilder setComputationOk(boolean computationOk) {\n-        if (currentBuilder == null) {\n-            throw new IllegalStateException(\"Cannot set computation status: currentBuilder is not set\");\n-        }\n-\n-        currentBuilder.setComputationOk(computationOk);\n-        return this;\n+    public PostContingencyResultBuilder contingency(Contingency contingency, SecurityAnalysisResultContext postContingencyResultContext) {\n+        return new PostContingencyResultBuilder(contingency, postContingencyResultContext);\n     }\n \n     /**\n      * Finalizes the result.\n      * @return the N situation result builder\n      */\n     public SecurityAnalysisResult build() {\n-        if (currentBuilder != null) {\n-            throw new IllegalStateException(\"Cannot build the result: the currentBuilder is not terminated\");\n-        }\n         if (preContingencyResult == null) {\n             throw new IllegalStateException(\"Pre-contingency result is not yet defined, cannot build security analysis result.\");\n         }\n \n         SecurityAnalysisResult res = new SecurityAnalysisResult(preContingencyResult, postContingencyResults);\n         res.setNetworkMetadata(new NetworkMetadata(context.getNetwork()));\n-        interceptors.forEach(i -> i.onSecurityAnalysisResult(context, res));\n+        interceptors.forEach(i -> i.onSecurityAnalysisResult(res, context));\n \n         return res;\n     }\n \n     /**\n-     * Provides access to the security analysis running context to children classes.\n-     * @return the security analysis running context.\n+     * Base class for the pre and post contingency builders.\n      */\n-    protected RunningContext getContext() {\n-        return context;\n-    }\n+    public abstract class AbstractLimitViolationsResultBuilder<B extends AbstractLimitViolationsResultBuilder<B>> {\n \n-    private interface ResultBuilder {\n+        protected boolean computationOk;\n \n-        void setComputationOk(boolean computationOk);\n+        protected final List<LimitViolation> violations = new ArrayList<>();\n \n-        void addViolation(LimitViolation violation);\n+        protected final SecurityAnalysisResultContext resultContext;\n \n-    }\n+        public B setComputationOk(boolean computationOk) {\n+            this.computationOk = computationOk;\n+            return (B) this;\n+        }\n \n-    private class LimitViolationsResultBuilder implements ResultBuilder {\n+        /**\n+         * Initiates a result builder with a {@link SecurityAnalysisResultContext}.\n+         * @param resultContext The context would be used when creation result or as default context when a limit violation added.\n+         */\n+        public AbstractLimitViolationsResultBuilder(SecurityAnalysisResultContext resultContext) {\n+            this.resultContext = resultContext;\n+        }\n \n-        protected boolean computationOk;\n+        /**\n+         * Adds a {@link LimitViolation} to the builder.\n+         * The default result context would be supplied to interceptors.\n+         * @param violation\n+         * @return\n+         */\n+        public B addViolation(LimitViolation violation) {\n+            addViolation(violation, resultContext);\n+            return (B) this;\n+        }\n \n-        protected final List<LimitViolation> violations = new ArrayList<>();\n+        /**\n+         * Adds a {@link LimitViolation} to the builder with a context.\n+         * @param violation the context would be supplied to interceptors.\n+         * @return\n+         */\n+        public B addViolation(LimitViolation violation, SecurityAnalysisResultContext limitViolationContext) {\n+            Objects.requireNonNull(limitViolationContext);\n+            violations.add(Objects.requireNonNull(violation));\n+            interceptors.forEach(i -> i.onLimitViolation(violation, limitViolationContext));\n+            return (B) this;\n+        }\n \n-        @Override\n-        public void setComputationOk(boolean computationOk) {\n-            this.computationOk = computationOk;\n+        public B addViolations(List<LimitViolation> violations, SecurityAnalysisResultContext limitViolationContext) {\n+            Objects.requireNonNull(violations).forEach(limitViolation -> addViolation(limitViolation, limitViolationContext));\n+            return (B) this;\n         }\n \n-        @Override\n-        public void addViolation(LimitViolation violation) {\n-            violations.add(Objects.requireNonNull(violation));\n+        public B addViolations(List<LimitViolation> violations) {\n+            return addViolations(violations, resultContext);\n         }\n \n     }\n \n-    private class PreContingencyResultBuilder extends LimitViolationsResultBuilder {\n+    /**\n+     * Builder for the pre-contingency result\n+     */\n+    public class PreContingencyResultBuilder extends AbstractLimitViolationsResultBuilder<PreContingencyResultBuilder> {\n+\n+        public PreContingencyResultBuilder(SecurityAnalysisResultContext resultContext) {\n+            super(resultContext);\n+        }\n \n-        void endPreContingency() {\n+        /**\n+         * Finalize the creation of the PreContingencyResult instance\n+         * @return the parent {@link SecurityAnalysisResultBuilder} instance.\n+         */\n+        public SecurityAnalysisResultBuilder endPreContingency() {\n             List<LimitViolation> filteredViolations = filter.apply(violations, context.getNetwork());\n             LimitViolationsResult res = new LimitViolationsResult(computationOk, filteredViolations);\n-            interceptors.forEach(i -> i.onPreContingencyResult(context, res));\n-            preContingencyResult = res;\n+            interceptors.forEach(i -> i.onPreContingencyResult(res, resultContext));\n+            setPreContingencyResult(res);\n+\n+            return SecurityAnalysisResultBuilder.this;\n         }\n     }\n \n-    private class PostContingencyResultBuilder extends LimitViolationsResultBuilder {\n+    public class PostContingencyResultBuilder extends AbstractLimitViolationsResultBuilder<PostContingencyResultBuilder> {\n \n         private final Contingency contingency;\n \n         PostContingencyResultBuilder(Contingency contingency) {\n+            super(context);\n+            this.contingency = Objects.requireNonNull(contingency);\n+        }", "originalCommit": "81cc4e9f154294685f3b4eeae487aba04b96265f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "45bf5226522814b94090dd0e10e878a6a0b8382a", "chunk": "diff --git a/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java b/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java\nindex 2223df2e0..9455d30f7 100644\n--- a/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java\n+++ b/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java\n\n@@ -75,7 +75,7 @@ public class SecurityAnalysisResultBuilder {\n      * @return a {@link PostContingencyResultBuilder} instance.\n      */\n     public PostContingencyResultBuilder contingency(Contingency contingency) {\n-        return new PostContingencyResultBuilder(contingency);\n+        return new PostContingencyResultBuilder(contingency, context);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxMTU5OA==", "url": "https://github.com/powsybl/powsybl-core/pull/1247#discussion_r405611598", "bodyText": "It seems that the context is never null. Is it a coincidence or a choice. I think we should assert that it's not null there and in the SecurityAnalysisResultBuilder constructor.", "author": "mathbagu", "createdAt": "2020-04-08T15:27:12Z", "path": "security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java", "diffHunk": "@@ -26,179 +26,198 @@\n public class SecurityAnalysisResultBuilder {\n \n     private final LimitViolationFilter filter;\n-    private final RunningContext context;\n+    private final SecurityAnalysisResultContext context;\n     private final List<SecurityAnalysisInterceptor> interceptors;\n \n     // Below are volatile objects used for building the actual complete result\n     private LimitViolationsResult preContingencyResult;\n-    private List<PostContingencyResult> postContingencyResults;\n+    private final List<PostContingencyResult> postContingencyResults = Collections.synchronizedList(new ArrayList<>());\n \n-    private ResultBuilder currentBuilder = null;\n-\n-    public SecurityAnalysisResultBuilder(LimitViolationFilter filter, RunningContext context,\n+    public SecurityAnalysisResultBuilder(LimitViolationFilter filter, SecurityAnalysisResultContext context,\n                                          Collection<SecurityAnalysisInterceptor> interceptors) {\n         this.filter = Objects.requireNonNull(filter);\n         this.context = Objects.requireNonNull(context);\n         this.interceptors = ImmutableList.copyOf(interceptors);\n-        this.postContingencyResults = new ArrayList<>();\n     }\n \n-    public SecurityAnalysisResultBuilder(LimitViolationFilter filter, RunningContext context) {\n+    public SecurityAnalysisResultBuilder(LimitViolationFilter filter, SecurityAnalysisResultContext context) {\n         this(filter, context, Collections.emptyList());\n     }\n \n-    /**\n-     * Initiates the creation of the result for one {@link Contingency}.\n-     * @param contingency  the contingency for which a result should be created\n-     * @return             this SecurityAnalysisResultBuilder instance\n-     */\n-    public SecurityAnalysisResultBuilder contingency(Contingency contingency) {\n-        if (currentBuilder != null) {\n-            throw new IllegalStateException(\"Cannot start a new post-contingency result\");\n-        }\n-        currentBuilder = new PostContingencyResultBuilder(contingency);\n-        return this;\n+    private void setPreContingencyResult(LimitViolationsResult preContingencyResult) {\n+        this.preContingencyResult = Objects.requireNonNull(preContingencyResult);\n+    }\n+\n+    private void addPostContingencyResult(PostContingencyResult result) {\n+        postContingencyResults.add(Objects.requireNonNull(result));\n     }\n \n     /**\n      * Initiates the creation of the result for N situation.\n-     * @return this SecurityAnalysisResultBuilder instance.\n+     * @return a {@link PreContingencyResultBuilder} instance.\n      */\n-    public SecurityAnalysisResultBuilder preContingency() {\n-        if (currentBuilder != null) {\n-            throw new IllegalStateException(\"Cannot start a new pre-contingency result\");\n-        }\n-\n-        currentBuilder = new PreContingencyResultBuilder();\n-        return this;\n+    public PreContingencyResultBuilder preContingency() {\n+        return new PreContingencyResultBuilder(context);\n     }\n \n     /**\n-     * Finalize the creation of the PreContingencyResult instance\n-     * @return this SecurityAnalysisResultBuilder instance.\n+     * Initiates the creation of the result for N situation\n+     * @param preContingencyResultContext the context used when create the result\n+     * @return a {@link PreContingencyResultBuilder} instance.\n      */\n-    public SecurityAnalysisResultBuilder endPreContingency() {\n-        if (currentBuilder instanceof PreContingencyResultBuilder) {\n-            ((PreContingencyResultBuilder) currentBuilder).endPreContingency();\n-            currentBuilder = null;\n-            return this;\n-        }\n-\n-        throw new IllegalStateException(\"Cannot create the pre-contingency result\");\n+    public PreContingencyResultBuilder preContingency(SecurityAnalysisResultContext preContingencyResultContext) {\n+        return new PreContingencyResultBuilder(preContingencyResultContext);\n     }\n \n     /**\n-     * Finalize the creation of the PostContingencyResult instance\n-     * @return this SecurityAnalysisResultBuilder instance.\n+     * Initiates the creation of the result for one {@link Contingency}.\n+     * @param contingency the contingency for which a result should be created\n+     * @return a {@link PostContingencyResultBuilder} instance.\n      */\n-    public SecurityAnalysisResultBuilder endContingency() {\n-        if (currentBuilder instanceof PostContingencyResultBuilder) {\n-            ((PostContingencyResultBuilder) currentBuilder).endContingency();\n-            currentBuilder = null;\n-            return this;\n-        }\n-\n-        throw new IllegalStateException(\"Cannot create the post-contingency result\");\n+    public PostContingencyResultBuilder contingency(Contingency contingency) {\n+        return new PostContingencyResultBuilder(contingency);\n     }\n \n     /**\n-     * Add a violation for the current result\n-     * @return this SecurityAnalysisResultBuilder instance.\n+     * Initiates the creation of the result for one {@link Contingency}\n+     * @param contingency the contingency for which a result should be created\n+     * @param postContingencyResultContext the context used when create the result\n+     * @return a {@link PostContingencyResultBuilder} instance.\n      */\n-    public SecurityAnalysisResultBuilder addViolation(LimitViolation violation) {\n-        if (currentBuilder == null) {\n-            throw new IllegalStateException(\"Cannot add the violation: currentBuilder is not set\");\n-        }\n-\n-        currentBuilder.addViolation(violation);\n-        return this;\n-    }\n-\n-    public SecurityAnalysisResultBuilder setComputationOk(boolean computationOk) {\n-        if (currentBuilder == null) {\n-            throw new IllegalStateException(\"Cannot set computation status: currentBuilder is not set\");\n-        }\n-\n-        currentBuilder.setComputationOk(computationOk);\n-        return this;\n+    public PostContingencyResultBuilder contingency(Contingency contingency, SecurityAnalysisResultContext postContingencyResultContext) {\n+        return new PostContingencyResultBuilder(contingency, postContingencyResultContext);\n     }\n \n     /**\n      * Finalizes the result.\n      * @return the N situation result builder\n      */\n     public SecurityAnalysisResult build() {\n-        if (currentBuilder != null) {\n-            throw new IllegalStateException(\"Cannot build the result: the currentBuilder is not terminated\");\n-        }\n         if (preContingencyResult == null) {\n             throw new IllegalStateException(\"Pre-contingency result is not yet defined, cannot build security analysis result.\");\n         }\n \n         SecurityAnalysisResult res = new SecurityAnalysisResult(preContingencyResult, postContingencyResults);\n         res.setNetworkMetadata(new NetworkMetadata(context.getNetwork()));\n-        interceptors.forEach(i -> i.onSecurityAnalysisResult(context, res));\n+        interceptors.forEach(i -> i.onSecurityAnalysisResult(res, context));\n \n         return res;\n     }\n \n     /**\n-     * Provides access to the security analysis running context to children classes.\n-     * @return the security analysis running context.\n+     * Base class for the pre and post contingency builders.\n      */\n-    protected RunningContext getContext() {\n-        return context;\n-    }\n+    public abstract class AbstractLimitViolationsResultBuilder<B extends AbstractLimitViolationsResultBuilder<B>> {\n \n-    private interface ResultBuilder {\n+        protected boolean computationOk;\n \n-        void setComputationOk(boolean computationOk);\n+        protected final List<LimitViolation> violations = new ArrayList<>();\n \n-        void addViolation(LimitViolation violation);\n+        protected final SecurityAnalysisResultContext resultContext;\n \n-    }\n+        public B setComputationOk(boolean computationOk) {\n+            this.computationOk = computationOk;\n+            return (B) this;\n+        }\n \n-    private class LimitViolationsResultBuilder implements ResultBuilder {\n+        /**\n+         * Initiates a result builder with a {@link SecurityAnalysisResultContext}.\n+         * @param resultContext The context would be used when creation result or as default context when a limit violation added.\n+         */\n+        public AbstractLimitViolationsResultBuilder(SecurityAnalysisResultContext resultContext) {\n+            this.resultContext = resultContext;", "originalCommit": "81cc4e9f154294685f3b4eeae487aba04b96265f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY4MDg0MQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1247#discussion_r405680841", "bodyText": "Made it private and check non null on two usages", "author": "yichen88", "createdAt": "2020-04-08T17:08:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxMTU5OA=="}], "type": "inlineReview", "revised_code": {"commit": "45bf5226522814b94090dd0e10e878a6a0b8382a", "chunk": "diff --git a/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java b/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java\nindex 2223df2e0..9455d30f7 100644\n--- a/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java\n+++ b/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java\n\n@@ -75,7 +75,7 @@ public class SecurityAnalysisResultBuilder {\n      * @return a {@link PostContingencyResultBuilder} instance.\n      */\n     public PostContingencyResultBuilder contingency(Contingency contingency) {\n-        return new PostContingencyResultBuilder(contingency);\n+        return new PostContingencyResultBuilder(contingency, context);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxMjI3OA==", "url": "https://github.com/powsybl/powsybl-core/pull/1247#discussion_r405612278", "bodyText": "Look, we are not consistent", "author": "mathbagu", "createdAt": "2020-04-08T15:28:03Z", "path": "security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java", "diffHunk": "@@ -26,179 +26,198 @@\n public class SecurityAnalysisResultBuilder {\n \n     private final LimitViolationFilter filter;\n-    private final RunningContext context;\n+    private final SecurityAnalysisResultContext context;\n     private final List<SecurityAnalysisInterceptor> interceptors;\n \n     // Below are volatile objects used for building the actual complete result\n     private LimitViolationsResult preContingencyResult;\n-    private List<PostContingencyResult> postContingencyResults;\n+    private final List<PostContingencyResult> postContingencyResults = Collections.synchronizedList(new ArrayList<>());\n \n-    private ResultBuilder currentBuilder = null;\n-\n-    public SecurityAnalysisResultBuilder(LimitViolationFilter filter, RunningContext context,\n+    public SecurityAnalysisResultBuilder(LimitViolationFilter filter, SecurityAnalysisResultContext context,\n                                          Collection<SecurityAnalysisInterceptor> interceptors) {\n         this.filter = Objects.requireNonNull(filter);\n         this.context = Objects.requireNonNull(context);\n         this.interceptors = ImmutableList.copyOf(interceptors);\n-        this.postContingencyResults = new ArrayList<>();\n     }\n \n-    public SecurityAnalysisResultBuilder(LimitViolationFilter filter, RunningContext context) {\n+    public SecurityAnalysisResultBuilder(LimitViolationFilter filter, SecurityAnalysisResultContext context) {\n         this(filter, context, Collections.emptyList());\n     }\n \n-    /**\n-     * Initiates the creation of the result for one {@link Contingency}.\n-     * @param contingency  the contingency for which a result should be created\n-     * @return             this SecurityAnalysisResultBuilder instance\n-     */\n-    public SecurityAnalysisResultBuilder contingency(Contingency contingency) {\n-        if (currentBuilder != null) {\n-            throw new IllegalStateException(\"Cannot start a new post-contingency result\");\n-        }\n-        currentBuilder = new PostContingencyResultBuilder(contingency);\n-        return this;\n+    private void setPreContingencyResult(LimitViolationsResult preContingencyResult) {\n+        this.preContingencyResult = Objects.requireNonNull(preContingencyResult);\n+    }\n+\n+    private void addPostContingencyResult(PostContingencyResult result) {\n+        postContingencyResults.add(Objects.requireNonNull(result));\n     }\n \n     /**\n      * Initiates the creation of the result for N situation.\n-     * @return this SecurityAnalysisResultBuilder instance.\n+     * @return a {@link PreContingencyResultBuilder} instance.\n      */\n-    public SecurityAnalysisResultBuilder preContingency() {\n-        if (currentBuilder != null) {\n-            throw new IllegalStateException(\"Cannot start a new pre-contingency result\");\n-        }\n-\n-        currentBuilder = new PreContingencyResultBuilder();\n-        return this;\n+    public PreContingencyResultBuilder preContingency() {\n+        return new PreContingencyResultBuilder(context);\n     }\n \n     /**\n-     * Finalize the creation of the PreContingencyResult instance\n-     * @return this SecurityAnalysisResultBuilder instance.\n+     * Initiates the creation of the result for N situation\n+     * @param preContingencyResultContext the context used when create the result\n+     * @return a {@link PreContingencyResultBuilder} instance.\n      */\n-    public SecurityAnalysisResultBuilder endPreContingency() {\n-        if (currentBuilder instanceof PreContingencyResultBuilder) {\n-            ((PreContingencyResultBuilder) currentBuilder).endPreContingency();\n-            currentBuilder = null;\n-            return this;\n-        }\n-\n-        throw new IllegalStateException(\"Cannot create the pre-contingency result\");\n+    public PreContingencyResultBuilder preContingency(SecurityAnalysisResultContext preContingencyResultContext) {\n+        return new PreContingencyResultBuilder(preContingencyResultContext);\n     }\n \n     /**\n-     * Finalize the creation of the PostContingencyResult instance\n-     * @return this SecurityAnalysisResultBuilder instance.\n+     * Initiates the creation of the result for one {@link Contingency}.\n+     * @param contingency the contingency for which a result should be created\n+     * @return a {@link PostContingencyResultBuilder} instance.\n      */\n-    public SecurityAnalysisResultBuilder endContingency() {\n-        if (currentBuilder instanceof PostContingencyResultBuilder) {\n-            ((PostContingencyResultBuilder) currentBuilder).endContingency();\n-            currentBuilder = null;\n-            return this;\n-        }\n-\n-        throw new IllegalStateException(\"Cannot create the post-contingency result\");\n+    public PostContingencyResultBuilder contingency(Contingency contingency) {\n+        return new PostContingencyResultBuilder(contingency);\n     }\n \n     /**\n-     * Add a violation for the current result\n-     * @return this SecurityAnalysisResultBuilder instance.\n+     * Initiates the creation of the result for one {@link Contingency}\n+     * @param contingency the contingency for which a result should be created\n+     * @param postContingencyResultContext the context used when create the result\n+     * @return a {@link PostContingencyResultBuilder} instance.\n      */\n-    public SecurityAnalysisResultBuilder addViolation(LimitViolation violation) {\n-        if (currentBuilder == null) {\n-            throw new IllegalStateException(\"Cannot add the violation: currentBuilder is not set\");\n-        }\n-\n-        currentBuilder.addViolation(violation);\n-        return this;\n-    }\n-\n-    public SecurityAnalysisResultBuilder setComputationOk(boolean computationOk) {\n-        if (currentBuilder == null) {\n-            throw new IllegalStateException(\"Cannot set computation status: currentBuilder is not set\");\n-        }\n-\n-        currentBuilder.setComputationOk(computationOk);\n-        return this;\n+    public PostContingencyResultBuilder contingency(Contingency contingency, SecurityAnalysisResultContext postContingencyResultContext) {\n+        return new PostContingencyResultBuilder(contingency, postContingencyResultContext);\n     }\n \n     /**\n      * Finalizes the result.\n      * @return the N situation result builder\n      */\n     public SecurityAnalysisResult build() {\n-        if (currentBuilder != null) {\n-            throw new IllegalStateException(\"Cannot build the result: the currentBuilder is not terminated\");\n-        }\n         if (preContingencyResult == null) {\n             throw new IllegalStateException(\"Pre-contingency result is not yet defined, cannot build security analysis result.\");\n         }\n \n         SecurityAnalysisResult res = new SecurityAnalysisResult(preContingencyResult, postContingencyResults);\n         res.setNetworkMetadata(new NetworkMetadata(context.getNetwork()));\n-        interceptors.forEach(i -> i.onSecurityAnalysisResult(context, res));\n+        interceptors.forEach(i -> i.onSecurityAnalysisResult(res, context));\n \n         return res;\n     }\n \n     /**\n-     * Provides access to the security analysis running context to children classes.\n-     * @return the security analysis running context.\n+     * Base class for the pre and post contingency builders.\n      */\n-    protected RunningContext getContext() {\n-        return context;\n-    }\n+    public abstract class AbstractLimitViolationsResultBuilder<B extends AbstractLimitViolationsResultBuilder<B>> {\n \n-    private interface ResultBuilder {\n+        protected boolean computationOk;\n \n-        void setComputationOk(boolean computationOk);\n+        protected final List<LimitViolation> violations = new ArrayList<>();\n \n-        void addViolation(LimitViolation violation);\n+        protected final SecurityAnalysisResultContext resultContext;\n \n-    }\n+        public B setComputationOk(boolean computationOk) {\n+            this.computationOk = computationOk;\n+            return (B) this;\n+        }\n \n-    private class LimitViolationsResultBuilder implements ResultBuilder {\n+        /**\n+         * Initiates a result builder with a {@link SecurityAnalysisResultContext}.\n+         * @param resultContext The context would be used when creation result or as default context when a limit violation added.\n+         */\n+        public AbstractLimitViolationsResultBuilder(SecurityAnalysisResultContext resultContext) {\n+            this.resultContext = resultContext;\n+        }\n \n-        protected boolean computationOk;\n+        /**\n+         * Adds a {@link LimitViolation} to the builder.\n+         * The default result context would be supplied to interceptors.\n+         * @param violation\n+         * @return\n+         */\n+        public B addViolation(LimitViolation violation) {\n+            addViolation(violation, resultContext);\n+            return (B) this;\n+        }\n \n-        protected final List<LimitViolation> violations = new ArrayList<>();\n+        /**\n+         * Adds a {@link LimitViolation} to the builder with a context.\n+         * @param violation the context would be supplied to interceptors.\n+         * @return\n+         */\n+        public B addViolation(LimitViolation violation, SecurityAnalysisResultContext limitViolationContext) {\n+            Objects.requireNonNull(limitViolationContext);\n+            violations.add(Objects.requireNonNull(violation));\n+            interceptors.forEach(i -> i.onLimitViolation(violation, limitViolationContext));\n+            return (B) this;\n+        }\n \n-        @Override\n-        public void setComputationOk(boolean computationOk) {\n-            this.computationOk = computationOk;\n+        public B addViolations(List<LimitViolation> violations, SecurityAnalysisResultContext limitViolationContext) {\n+            Objects.requireNonNull(violations).forEach(limitViolation -> addViolation(limitViolation, limitViolationContext));\n+            return (B) this;\n         }\n \n-        @Override\n-        public void addViolation(LimitViolation violation) {\n-            violations.add(Objects.requireNonNull(violation));\n+        public B addViolations(List<LimitViolation> violations) {\n+            return addViolations(violations, resultContext);\n         }\n \n     }\n \n-    private class PreContingencyResultBuilder extends LimitViolationsResultBuilder {\n+    /**\n+     * Builder for the pre-contingency result\n+     */\n+    public class PreContingencyResultBuilder extends AbstractLimitViolationsResultBuilder<PreContingencyResultBuilder> {\n+\n+        public PreContingencyResultBuilder(SecurityAnalysisResultContext resultContext) {\n+            super(resultContext);\n+        }\n \n-        void endPreContingency() {\n+        /**\n+         * Finalize the creation of the PreContingencyResult instance\n+         * @return the parent {@link SecurityAnalysisResultBuilder} instance.\n+         */\n+        public SecurityAnalysisResultBuilder endPreContingency() {\n             List<LimitViolation> filteredViolations = filter.apply(violations, context.getNetwork());\n             LimitViolationsResult res = new LimitViolationsResult(computationOk, filteredViolations);\n-            interceptors.forEach(i -> i.onPreContingencyResult(context, res));\n-            preContingencyResult = res;\n+            interceptors.forEach(i -> i.onPreContingencyResult(res, resultContext));\n+            setPreContingencyResult(res);\n+\n+            return SecurityAnalysisResultBuilder.this;\n         }\n     }\n \n-    private class PostContingencyResultBuilder extends LimitViolationsResultBuilder {\n+    public class PostContingencyResultBuilder extends AbstractLimitViolationsResultBuilder<PostContingencyResultBuilder> {\n \n         private final Contingency contingency;\n \n         PostContingencyResultBuilder(Contingency contingency) {\n+            super(context);\n+            this.contingency = Objects.requireNonNull(contingency);\n+        }\n+\n+        PostContingencyResultBuilder(Contingency contingency, SecurityAnalysisResultContext resultContext) {\n+            super(resultContext);\n             this.contingency = Objects.requireNonNull(contingency);\n         }\n \n-        void endContingency() {\n+        @Override\n+        public PostContingencyResultBuilder addViolation(LimitViolation violation, SecurityAnalysisResultContext limitViolationContext) {\n+            Objects.requireNonNull(limitViolationContext);", "originalCommit": "81cc4e9f154294685f3b4eeae487aba04b96265f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "45bf5226522814b94090dd0e10e878a6a0b8382a", "chunk": "diff --git a/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java b/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java\nindex 2223df2e0..9455d30f7 100644\n--- a/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java\n+++ b/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/SecurityAnalysisResultBuilder.java\n\n@@ -75,7 +75,7 @@ public class SecurityAnalysisResultBuilder {\n      * @return a {@link PostContingencyResultBuilder} instance.\n      */\n     public PostContingencyResultBuilder contingency(Contingency contingency) {\n-        return new PostContingencyResultBuilder(contingency);\n+        return new PostContingencyResultBuilder(contingency, context);\n     }\n \n     /**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxMzI4OQ==", "url": "https://github.com/powsybl/powsybl-core/pull/1247#discussion_r405613289", "bodyText": "Sonar require an explanation when a method is let empty. Please every method in this class", "author": "mathbagu", "createdAt": "2020-04-08T15:29:21Z", "path": "security-analysis/security-analysis-api/src/main/java/com/powsybl/security/interceptors/DefaultSecurityAnalysisInterceptor.java", "diffHunk": "@@ -18,17 +20,28 @@\n public class DefaultSecurityAnalysisInterceptor implements SecurityAnalysisInterceptor {", "originalCommit": "81cc4e9f154294685f3b4eeae487aba04b96265f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "45bf5226522814b94090dd0e10e878a6a0b8382a", "chunk": "diff --git a/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/interceptors/DefaultSecurityAnalysisInterceptor.java b/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/interceptors/DefaultSecurityAnalysisInterceptor.java\nindex 9cc3cf08f..3b9bc4f91 100644\n--- a/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/interceptors/DefaultSecurityAnalysisInterceptor.java\n+++ b/security-analysis/security-analysis-api/src/main/java/com/powsybl/security/interceptors/DefaultSecurityAnalysisInterceptor.java\n\n@@ -21,27 +21,27 @@ public class DefaultSecurityAnalysisInterceptor implements SecurityAnalysisInter\n \n     @Override\n     public void onPreContingencyResult(LimitViolationsResult preContingencyResult, SecurityAnalysisResultContext context) {\n-\n+        // nothing to do\n     }\n \n     @Override\n     public void onPostContingencyResult(PostContingencyResult postContingencyResult, SecurityAnalysisResultContext context) {\n-\n+        // nothing to do\n     }\n \n     @Override\n     public void onSecurityAnalysisResult(SecurityAnalysisResult result, SecurityAnalysisResultContext context) {\n-\n+        // nothing to do\n     }\n \n     @Override\n     public void onLimitViolation(LimitViolation limitViolation, SecurityAnalysisResultContext context) {\n-\n+        // nothing to do\n     }\n \n     @Override\n     public void onLimitViolation(Contingency contingency, LimitViolation limitViolation, SecurityAnalysisResultContext context) {\n-\n+        // nothing to do\n     }\n \n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxNDU2MA==", "url": "https://github.com/powsybl/powsybl-core/pull/1247#discussion_r405614560", "bodyText": "Fix javadoc and explain why method are let empty with a comment", "author": "mathbagu", "createdAt": "2020-04-08T15:31:03Z", "path": "security-analysis/security-analysis-api/src/main/java/com/powsybl/security/interceptors/SecurityAnalysisInterceptor.java", "diffHunk": "@@ -6,18 +6,114 @@\n  */\n package com.powsybl.security.interceptors;\n \n+import com.powsybl.contingency.Contingency;\n+import com.powsybl.security.LimitViolation;\n import com.powsybl.security.LimitViolationsResult;\n import com.powsybl.security.PostContingencyResult;\n import com.powsybl.security.SecurityAnalysisResult;\n \n /**\n+ *\n+ * Security analysis interceptors are notified at various steps of the construction of\n+ * the {@link SecurityAnalysisResult}, for instance when adding new {@link LimitViolation limit violations}.\n+ * This mechanism allows for example users of the {@link com.powsybl.security.SecurityAnalysis} to add\n+ * additional information in the result, as {@link com.powsybl.commons.extensions.Extension extensions}.\n+ *\n+ * <p>Some of this information can be retrieved from the provided {@link SecurityAnalysisResultContext}.\n+ * Implementations of the security analysis can provide implementation-specific information by providing\n+ * their own implementation of this context.\n+ *\n+ * <p>Note that the contexts provided to the various methods can be different objects, in order\n+ * to provide more specific information, for example for violations or contingencies.\n+ * This can also be helpful to guarantee thread safety, if the result builder is used concurrently.\n+ *\n+ *\n  * @author Mathieu Bague <mathieu.bague at rte-france.com>\n  */\n public interface SecurityAnalysisInterceptor {\n \n-    void onPreContingencyResult(RunningContext context, LimitViolationsResult preContingencyResult);\n+    /**\n+     * @deprecated Use {@link #onPreContingencyResult(LimitViolationsResult, SecurityAnalysisResultContext)}\n+     * Callback after the pre-contingency analysis result is created\n+     * @param context The running context\n+     * @param preContingencyResult\n+     */\n+    @Deprecated\n+    default void onPreContingencyResult(RunningContext context, LimitViolationsResult preContingencyResult) {\n+        onPreContingencyResult(preContingencyResult, context);\n+    }\n \n-    void onPostContingencyResult(RunningContext context, PostContingencyResult postContingencyResult);\n+    /**\n+     * @deprecated Use {@link #onPostContingencyResult(PostContingencyResult, SecurityAnalysisResultContext)}\n+     * @param context\n+     * @param postContingencyResult\n+     */\n+    @Deprecated\n+    default void onPostContingencyResult(RunningContext context, PostContingencyResult postContingencyResult) {\n+        onPostContingencyResult(postContingencyResult, context);\n+    }\n+\n+    /**\n+     * @deprecated Use {@link #onSecurityAnalysisResult(SecurityAnalysisResult, SecurityAnalysisResultContext)}\n+     * Callback after the result is created\n+     * @param context\n+     * @param result\n+     */\n+    @Deprecated\n+    default void onSecurityAnalysisResult(RunningContext context, SecurityAnalysisResult result) {\n+        onSecurityAnalysisResult(result, context);\n+    }\n+\n+    /**\n+     * Callback after the pre-contingency result is built.\n+     * @param preContingencyResult\n+     * @param context\n+     */\n+    default void onPreContingencyResult(LimitViolationsResult preContingencyResult, SecurityAnalysisResultContext context) {\n+        if (context instanceof RunningContext) {\n+            onPreContingencyResult((RunningContext) context, preContingencyResult);\n+        }\n+    }\n+\n+    /**\n+     * Callback after the post-contingency result is built.\n+     * @param context\n+     * @param postContingencyResult\n+     */\n+    default void onPostContingencyResult(PostContingencyResult postContingencyResult, SecurityAnalysisResultContext context) {\n+        if (context instanceof RunningContext) {\n+            onPostContingencyResult((RunningContext) context, postContingencyResult);\n+        }\n+    }\n+\n+    /**\n+     * Callback after the security-analysis result is built.\n+     * @param result\n+     * @param context\n+     */\n+    default void onSecurityAnalysisResult(SecurityAnalysisResult result, SecurityAnalysisResultContext context) {\n+        if (context instanceof RunningContext) {\n+            onSecurityAnalysisResult((RunningContext) context, result);\n+        }\n+    }\n+\n+    /**\n+     * Callback when a violation is detected on N situation.\n+     * @param limitViolation\n+     * @param context\n+     */\n+    default void onLimitViolation(LimitViolation limitViolation, SecurityAnalysisResultContext context) {\n+\n+    }\n+\n+    /**\n+     * Callback when a violation is detected on N-1 situation.\n+     * @param contingency\n+     * @param limitViolation\n+     * @param context\n+     */\n+    default void onLimitViolation(Contingency contingency, LimitViolation limitViolation, SecurityAnalysisResultContext context) {\n+\n+    }\n \n-    void onSecurityAnalysisResult(RunningContext context, SecurityAnalysisResult result);\n }", "originalCommit": "81cc4e9f154294685f3b4eeae487aba04b96265f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "45bf5226522814b94090dd0e10e878a6a0b8382a", "url": "https://github.com/powsybl/powsybl-core/commit/45bf5226522814b94090dd0e10e878a6a0b8382a", "message": "Some fix\n\nSigned-off-by: yichen88 <tang.yichenyves@gmail.com>", "committedDate": "2020-04-08T17:11:48Z", "type": "commit"}, {"oid": "64720916f851492cb4791060cae80ad4656718a1", "url": "https://github.com/powsybl/powsybl-core/commit/64720916f851492cb4791060cae80ad4656718a1", "message": "Small fixes\n\nSigned-off-by: Mathieu BAGUE <mathieu.bague@rte-france.com>", "committedDate": "2020-04-09T12:12:15Z", "type": "commit"}, {"oid": "f34bc5ae1a1b86c2a56feb1e3d17176ed136963e", "url": "https://github.com/powsybl/powsybl-core/commit/f34bc5ae1a1b86c2a56feb1e3d17176ed136963e", "message": "Merge branch 'master' into improve_interceptor", "committedDate": "2020-04-09T12:13:53Z", "type": "commit"}]}