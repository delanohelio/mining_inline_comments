{"pr_number": 3466, "pr_title": "#3171 Support for futures markets in orders", "pr_createdAt": "2020-03-24T08:06:17Z", "pr_url": "https://github.com/knowm/XChange/pull/3466", "timeline": [{"oid": "75cccd0d27b8b84dba8c74c67c2003d512595025", "url": "https://github.com/knowm/XChange/commit/75cccd0d27b8b84dba8c74c67c2003d512595025", "message": "#3171 Unfortunatley I had to refactor two xchange implmetations a little\nfor correct json deserialisation.", "committedDate": "2020-03-24T08:03:56Z", "type": "commit"}, {"oid": "1c1402600ca8e9b41bf0ea089fbf45746d7c05c9", "url": "https://github.com/knowm/XChange/commit/1c1402600ca8e9b41bf0ea089fbf45746d7c05c9", "message": "#3171", "committedDate": "2020-03-24T08:21:06Z", "type": "commit"}, {"oid": "d9ee762140409cdff1599818798b3a9958e9afad", "url": "https://github.com/knowm/XChange/commit/d9ee762140409cdff1599818798b3a9958e9afad", "message": "#3171", "committedDate": "2020-03-24T08:21:27Z", "type": "commit"}, {"oid": "849bae2f8783fab366d9f19260f290a826241006", "url": "https://github.com/knowm/XChange/commit/849bae2f8783fab366d9f19260f290a826241006", "message": "#3171 couple of xchange implementations calling order builders directly\nand need casting to CurrencyPair", "committedDate": "2020-03-24T08:44:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4MTIzNg==", "url": "https://github.com/knowm/XChange/pull/3466#discussion_r396981236", "bodyText": "first of all is this needed here for the Instrument refactor to work?\nsecondly you should not write deserializer for DTOs that can be easily deserialized by Jackson it self if you just use Jacksons annotations properly", "author": "walec51", "createdAt": "2020-03-24T08:40:11Z", "path": "xchange-therock/src/main/java/org/knowm/xchange/therock/dto/marketdata/TheRockTicker.java", "diffHunk": "@@ -3,21 +3,71 @@\n import com.fasterxml.jackson.databind.PropertyNamingStrategy;\n import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n import com.fasterxml.jackson.databind.annotation.JsonNaming;\n+import java.io.Serializable;\n import java.math.BigDecimal;\n import java.util.Date;\n import org.knowm.xchange.currency.CurrencyPair;\n-import org.knowm.xchange.utils.jackson.CurrencyPairDeserializer;\n+import org.knowm.xchange.therock.utils.jackson.TheRockTickerDeserializer;\n \n /** @author Matija Mazi */\n @JsonNaming(PropertyNamingStrategy.SnakeCaseStrategy.class)\n-public class TheRockTicker {\n+@JsonDeserialize(using = TheRockTickerDeserializer.class)", "originalCommit": "d9ee762140409cdff1599818798b3a9958e9afad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAwMzk3NQ==", "url": "https://github.com/knowm/XChange/pull/3466#discussion_r397003975", "bodyText": "Hi Adam,\nThe issue I was struggling with, if we leave it as is we have:\n`@JsonNaming(PropertyNamingStrategy.SnakeCaseStrategy.class)\npublic class TheRockTicker {\n@JsonDeserialize(using = CurrencyPairDeserializer.class)\nprivate CurrencyPair fundId`\nBut when we go to deserialize it, jackson cannot work out the type for fundId as CurrencyPair.\ncom.fasterxml.jackson.databind.exc.InvalidTypeIdException:  Missing type id when trying to resolve subtype of [simple type, class org.knowm.xchange.currency.CurrencyPair]: missing type id property 'type' (for POJO property 'fund_id')\nThought the JsonDeserialize annotation would have resolved the type, but it did not. So I tried to force it to use the CurrencyPairDeserializer by having a custom deserializer. Suggestions welcomed on which annotation might work.", "author": "douggie", "createdAt": "2020-03-24T09:18:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4MTIzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAxOTcwNQ==", "url": "https://github.com/knowm/XChange/pull/3466#discussion_r397019705", "bodyText": "yes and that is because these annotations:\n@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = \"type\")\n@JsonSubTypes({@Type(value = CurrencyPair.class, name = \"currencyPair\")})\n\non Instrument which currently make no sense if we serialize / deserialize CurrencyPair as a string\na string will never have a property type - we will probably have to have a custom deserializer for Insturment to determine its concrete class\nI see you have already provided one InstrumentDeserializer - which is better then having a custom deserializer for every DTO that uses the Insturment class - this would be a show stopper for this refactor\nfor now remove those annotation\nwe also must think how will we serialize / deserialize derivatives\nin your InstrumentDeserializer you detect if the string is a currency pair based on the number of / characters - that is ok\nbut how will we distinguish futures from options? could you give some examples how their ticker symbols look on exchanges?", "author": "walec51", "createdAt": "2020-03-24T09:42:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4MTIzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE1OTIyNg==", "url": "https://github.com/knowm/XChange/pull/3466#discussion_r397159226", "bodyText": "Thanks so much for suggestions, yeah a customer deserializer seems the way to go.\nIt is not ideal, but deserialising from strings we can count the /\nCurrencyPair (Base/Counter)\nBTC/USD\nFutures/Swaps (Base/Counter/Prompt)\nBTC/USD/200925\nOptions (Base/Counter/Prompt/StrikePrice/Put?Call)\nBTC/USD/22MAR20/5375/C\nExamples\nOkex Futures\nBTC-USD-200925\nKraken Futures\nfi_xbtusd_180615\nDerbit options\nBTC-22MAR20-5375-C", "author": "douggie", "createdAt": "2020-03-24T13:40:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4MTIzNg=="}], "type": "inlineReview", "revised_code": {"commit": "252918b854264c2cc2c73a77152d1026212149e7", "chunk": "diff --git a/xchange-therock/src/main/java/org/knowm/xchange/therock/dto/marketdata/TheRockTicker.java b/xchange-therock/src/main/java/org/knowm/xchange/therock/dto/marketdata/TheRockTicker.java\nindex bf31d997b2..3f19746c3b 100644\n--- a/xchange-therock/src/main/java/org/knowm/xchange/therock/dto/marketdata/TheRockTicker.java\n+++ b/xchange-therock/src/main/java/org/knowm/xchange/therock/dto/marketdata/TheRockTicker.java\n\n@@ -3,71 +3,21 @@ package org.knowm.xchange.therock.dto.marketdata;\n import com.fasterxml.jackson.databind.PropertyNamingStrategy;\n import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n import com.fasterxml.jackson.databind.annotation.JsonNaming;\n-import java.io.Serializable;\n import java.math.BigDecimal;\n import java.util.Date;\n import org.knowm.xchange.currency.CurrencyPair;\n-import org.knowm.xchange.therock.utils.jackson.TheRockTickerDeserializer;\n+import org.knowm.xchange.utils.jackson.CurrencyPairDeserializer;\n \n /** @author Matija Mazi */\n @JsonNaming(PropertyNamingStrategy.SnakeCaseStrategy.class)\n-@JsonDeserialize(using = TheRockTickerDeserializer.class)\n-public class TheRockTicker implements Serializable {\n-  /** */\n-  private static final long serialVersionUID = -4662345648477360478L;\n+public class TheRockTicker {\n \n+  @JsonDeserialize(using = CurrencyPairDeserializer.class)\n   private CurrencyPair fundId;\n+\n   private Date date;\n-  private BigDecimal bid;\n-  private BigDecimal ask;\n-  private BigDecimal last;\n-  private BigDecimal volume;\n-  private BigDecimal volumeTraded;\n-  private BigDecimal open;\n-  private BigDecimal high;\n-  private BigDecimal low;\n-  private BigDecimal close;\n-\n-  /**\n-   * This constructor is called to create a TheRockTicker object\n-   *\n-   * @param fundId The trade type (BID side or ASK side)\n-   * @param date The depth of this trade\n-   * @param bid The price (either the bid or the ask)\n-   * @param ask The timestamp of the trade according to the exchange's server, null if not provided\n-   * @param last The id of the trade\n-   * @param volume The orderId of the maker in the trade\n-   * @param volumeTraded The orderId of the taker in the trade\n-   * @param open The orderId of the taker in the trade\n-   * @param high The orderId of the taker in the trade\n-   * @param low The orderId of the taker in the trade\n-   * @param close The orderId of the taker in the trade\n-   */\n-  public TheRockTicker(\n-      CurrencyPair fundId,\n-      Date date,\n-      BigDecimal bid,\n-      BigDecimal ask,\n-      BigDecimal last,\n-      BigDecimal volume,\n-      BigDecimal volumeTraded,\n-      BigDecimal open,\n-      BigDecimal high,\n-      BigDecimal low,\n-      BigDecimal close) {\n-\n-    this.fundId = fundId;\n-    this.date = date;\n-    this.bid = bid;\n-    this.ask = ask;\n-    this.last = last;\n-    this.volume = volume;\n-    this.volumeTraded = volumeTraded;\n-    this.open = open;\n-    this.high = high;\n-    this.low = low;\n-    this.close = close;\n-  }\n+\n+  private BigDecimal bid, ask, last, volume, volumeTraded, open, high, low, close;\n \n   public CurrencyPair getFundId() {\n     return fundId;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4MjI5Mg==", "url": "https://github.com/knowm/XChange/pull/3466#discussion_r396982292", "bodyText": "so now we have an over complicated deserialization mechanism to the rock DTOs with less test coverage\nrestore this test, remove the deserializers, use Jackson annotation on DTOs\nbesides this looks unrelated to the futures feature - if so then separate this to a different PR", "author": "walec51", "createdAt": "2020-03-24T08:42:09Z", "path": "xchange-therock/src/test/java/org/knowm/xchange/therock/dto/TheRockDtoTest.java", "diffHunk": "@@ -1,115 +0,0 @@\n-package org.knowm.xchange.therock.dto;\n-\n-import static org.assertj.core.api.Assertions.assertThat;\n-\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.math.BigDecimal;\n-import java.nio.file.Paths;\n-import java.text.ParseException;\n-import java.text.SimpleDateFormat;\n-import java.util.Arrays;\n-import java.util.Date;\n-import java.util.LinkedList;\n-import org.junit.Test;\n-import org.knowm.xchange.currency.CurrencyPair;\n-import org.knowm.xchange.therock.TheRock;\n-import org.knowm.xchange.therock.dto.account.TheRockBalance;\n-import org.knowm.xchange.therock.dto.account.TheRockBalances;\n-import org.knowm.xchange.therock.dto.account.TheRockWithdrawalResponse;\n-import org.knowm.xchange.therock.dto.marketdata.TheRockTicker;\n-import org.knowm.xchange.therock.dto.trade.TheRockOrder;\n-import org.knowm.xchange.therock.dto.trade.TheRockOrders;\n-\n-public class TheRockDtoTest {\n-\n-  private static ObjectMapper mapper = new ObjectMapper();\n-\n-  private static <T> T parse(Class<T> theClass) throws IOException {\n-    LinkedList<String> linkedList =\n-        new LinkedList<>(\n-            Arrays.asList(new Object() {}.getClass().getPackage().getName().split(\"\\\\.\")));\n-    linkedList.add(theClass.getSimpleName() + \".json\");\n-    String filename =\n-        Paths.get(linkedList.removeFirst(), linkedList.toArray(new String[0])).toString();\n-    return parse(filename, theClass);\n-  }\n-\n-  private static <E> E parse(String filename, Class<E> type) throws java.io.IOException {\n-    InputStream is = TheRockDtoTest.class.getResourceAsStream(\"/\" + filename);\n-    return mapper.readValue(is, type);\n-  }\n-\n-  @Test\n-  public void testTicker() throws Exception {", "originalCommit": "d9ee762140409cdff1599818798b3a9958e9afad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE1OTcwNw==", "url": "https://github.com/knowm/XChange/pull/3466#discussion_r397159707", "bodyText": "removed, custom deserializer added to instrument.", "author": "douggie", "createdAt": "2020-03-24T13:41:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4MjI5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "252918b854264c2cc2c73a77152d1026212149e7", "chunk": "diff --git a/xchange-therock/src/test/java/org/knowm/xchange/therock/dto/TheRockDtoTest.java b/xchange-therock/src/test/java/org/knowm/xchange/therock/dto/TheRockDtoTest.java\nnew file mode 100644\nindex 0000000000..01dae917ac\n--- /dev/null\n+++ b/xchange-therock/src/test/java/org/knowm/xchange/therock/dto/TheRockDtoTest.java\n\n@@ -0,0 +1,115 @@\n+package org.knowm.xchange.therock.dto;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.math.BigDecimal;\n+import java.nio.file.Paths;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.LinkedList;\n+import org.junit.Test;\n+import org.knowm.xchange.currency.CurrencyPair;\n+import org.knowm.xchange.therock.TheRock;\n+import org.knowm.xchange.therock.dto.account.TheRockBalance;\n+import org.knowm.xchange.therock.dto.account.TheRockBalances;\n+import org.knowm.xchange.therock.dto.account.TheRockWithdrawalResponse;\n+import org.knowm.xchange.therock.dto.marketdata.TheRockTicker;\n+import org.knowm.xchange.therock.dto.trade.TheRockOrder;\n+import org.knowm.xchange.therock.dto.trade.TheRockOrders;\n+\n+public class TheRockDtoTest {\n+\n+  private static ObjectMapper mapper = new ObjectMapper();\n+\n+  private static <T> T parse(Class<T> theClass) throws IOException {\n+    LinkedList<String> linkedList =\n+        new LinkedList<>(\n+            Arrays.asList(new Object() {}.getClass().getPackage().getName().split(\"\\\\.\")));\n+    linkedList.add(theClass.getSimpleName() + \".json\");\n+    String filename =\n+        Paths.get(linkedList.removeFirst(), linkedList.toArray(new String[0])).toString();\n+    return parse(filename, theClass);\n+  }\n+\n+  private static <E> E parse(String filename, Class<E> type) throws java.io.IOException {\n+    InputStream is = TheRockDtoTest.class.getResourceAsStream(\"/\" + filename);\n+    return mapper.readValue(is, type);\n+  }\n+\n+  @Test\n+  public void testTicker() throws Exception {\n+    final TheRockTicker json = parse(TheRockTicker.class);\n+    assertThat(json.getVolume()).isEqualTo(new BigDecimal(\"25726.86\"));\n+    assertThat(json.getDate()).isEqualTo(getDate(\"2015-06-13T17:17:45.847+00:00\"));\n+    assertThat(json.getFundId()).isEqualTo(CurrencyPair.BTC_EUR);\n+  }\n+\n+  @Test\n+  public void testBalance() throws Exception {\n+    final TheRockBalance json = parse(TheRockBalance.class);\n+    assertThat(json.getCurrency()).isEqualTo(\"LTC\");\n+    assertThat(json.getBalance()).isEqualTo(new BigDecimal(\"6.50884835\"));\n+    assertThat(json.getTradingBalance()).isEqualTo(new BigDecimal(\"2.30884835\"));\n+  }\n+\n+  @Test\n+  public void testBalances() throws Exception {\n+    final TheRockBalances json = parse(TheRockBalances.class);\n+    assertThat(json.getBalances()).hasSize(2);\n+    final TheRockBalance balance = json.getBalances().get(0);\n+    assertThat(balance.getCurrency()).isEqualTo(\"LTC\");\n+    assertThat(balance.getBalance()).isEqualTo(new BigDecimal(\"6.50884835\"));\n+    assertThat(balance.getTradingBalance()).isEqualTo(new BigDecimal(\"2.30884835\"));\n+  }\n+\n+  @Test\n+  public void testOrder() throws Exception {\n+    final TheRockOrder json = parse(TheRockOrder.class);\n+    assertThat(json.getId()).isEqualTo(4325578);\n+    assertThat(json.getFundId()).isEqualTo(new TheRock.Pair(CurrencyPair.BTC_EUR));\n+    assertThat(json.getPrice()).isEqualTo(new BigDecimal(\"0.0102\"));\n+  }\n+\n+  @Test\n+  public void testOrders() throws Exception {\n+    final TheRockOrders json = parse(TheRockOrders.class);\n+    TheRockOrder order1 = json.getOrders()[0];\n+    assertThat(order1.getId()).isEqualTo(54000000);\n+    assertThat(order1.getFundId()).isEqualTo(new TheRock.Pair(CurrencyPair.BTC_EUR));\n+    assertThat(order1.getPrice()).isEqualTo(new BigDecimal(\"506.46\"));\n+    assertThat(order1.getAmount()).isEqualTo(new BigDecimal(\"0.624\"));\n+    assertThat(order1.getAmountUnfilled()).isEqualTo(new BigDecimal(\"0.624\"));\n+\n+    final TheRockOrder order2 = json.getOrders()[1];\n+    assertThat(order2.getId()).isEqualTo(54000001);\n+    assertThat(order2.getFundId()).isEqualTo(new TheRock.Pair(CurrencyPair.BTC_EUR));\n+    assertThat(order2.getPrice()).isEqualTo(new BigDecimal(\"504.11\"));\n+    assertThat(order2.getAmount()).isEqualTo(new BigDecimal(\"0.399\"));\n+    assertThat(order2.getAmountUnfilled()).isEqualTo(new BigDecimal(\"0.399\"));\n+  }\n+\n+  @Test\n+  public void testException() throws Exception {\n+    final TheRockException json = parse(TheRockException.class);\n+    assertThat(json.getMessage()).contains(\"CNYUSD is not a valid value for param fund_id\");\n+    assertThat(json.getErrors()).hasSize(1);\n+    assertThat(json.getErrors().get(0).getMessage())\n+        .isEqualTo(\"CNYUSD is not a valid value for param fund_id\");\n+    assertThat(json.getErrors().get(0).getCode()).isEqualTo(11);\n+  }\n+\n+  @Test\n+  public void testWithdrawalResponse() throws Exception {\n+    final TheRockWithdrawalResponse json = parse(TheRockWithdrawalResponse.class);\n+    assertThat(json.getTransactionId()).isEqualTo(65088485);\n+  }\n+\n+  private Date getDate(String dateStr) throws ParseException {\n+    return new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSX\").parse(dateStr);\n+  }\n+}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAzNzA1NQ==", "url": "https://github.com/knowm/XChange/pull/3466#discussion_r397037055", "bodyText": "I think we could also just change this to\nprivate String fundId;\n\nmapping this to an CurrencyPair here is to early\nan adapter should do this - even if the mapping is trivial", "author": "walec51", "createdAt": "2020-03-24T10:10:29Z", "path": "xchange-therock/src/main/java/org/knowm/xchange/therock/dto/marketdata/TheRockTicker.java", "diffHunk": "@@ -3,21 +3,71 @@\n import com.fasterxml.jackson.databind.PropertyNamingStrategy;\n import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n import com.fasterxml.jackson.databind.annotation.JsonNaming;\n+import java.io.Serializable;\n import java.math.BigDecimal;\n import java.util.Date;\n import org.knowm.xchange.currency.CurrencyPair;\n-import org.knowm.xchange.utils.jackson.CurrencyPairDeserializer;\n+import org.knowm.xchange.therock.utils.jackson.TheRockTickerDeserializer;\n \n /** @author Matija Mazi */\n @JsonNaming(PropertyNamingStrategy.SnakeCaseStrategy.class)\n-public class TheRockTicker {\n+@JsonDeserialize(using = TheRockTickerDeserializer.class)\n+public class TheRockTicker implements Serializable {\n+  /** */\n+  private static final long serialVersionUID = -4662345648477360478L;\n \n-  @JsonDeserialize(using = CurrencyPairDeserializer.class)\n   private CurrencyPair fundId;", "originalCommit": "849bae2f8783fab366d9f19260f290a826241006", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE2MDI4NA==", "url": "https://github.com/knowm/XChange/pull/3466#discussion_r397160284", "bodyText": "shall we just leave this unchanged, it seems to work with the custom instrument deserializer.", "author": "douggie", "createdAt": "2020-03-24T13:41:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAzNzA1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "252918b854264c2cc2c73a77152d1026212149e7", "chunk": "diff --git a/xchange-therock/src/main/java/org/knowm/xchange/therock/dto/marketdata/TheRockTicker.java b/xchange-therock/src/main/java/org/knowm/xchange/therock/dto/marketdata/TheRockTicker.java\nindex bf31d997b2..3f19746c3b 100644\n--- a/xchange-therock/src/main/java/org/knowm/xchange/therock/dto/marketdata/TheRockTicker.java\n+++ b/xchange-therock/src/main/java/org/knowm/xchange/therock/dto/marketdata/TheRockTicker.java\n\n@@ -3,71 +3,21 @@ package org.knowm.xchange.therock.dto.marketdata;\n import com.fasterxml.jackson.databind.PropertyNamingStrategy;\n import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n import com.fasterxml.jackson.databind.annotation.JsonNaming;\n-import java.io.Serializable;\n import java.math.BigDecimal;\n import java.util.Date;\n import org.knowm.xchange.currency.CurrencyPair;\n-import org.knowm.xchange.therock.utils.jackson.TheRockTickerDeserializer;\n+import org.knowm.xchange.utils.jackson.CurrencyPairDeserializer;\n \n /** @author Matija Mazi */\n @JsonNaming(PropertyNamingStrategy.SnakeCaseStrategy.class)\n-@JsonDeserialize(using = TheRockTickerDeserializer.class)\n-public class TheRockTicker implements Serializable {\n-  /** */\n-  private static final long serialVersionUID = -4662345648477360478L;\n+public class TheRockTicker {\n \n+  @JsonDeserialize(using = CurrencyPairDeserializer.class)\n   private CurrencyPair fundId;\n+\n   private Date date;\n-  private BigDecimal bid;\n-  private BigDecimal ask;\n-  private BigDecimal last;\n-  private BigDecimal volume;\n-  private BigDecimal volumeTraded;\n-  private BigDecimal open;\n-  private BigDecimal high;\n-  private BigDecimal low;\n-  private BigDecimal close;\n-\n-  /**\n-   * This constructor is called to create a TheRockTicker object\n-   *\n-   * @param fundId The trade type (BID side or ASK side)\n-   * @param date The depth of this trade\n-   * @param bid The price (either the bid or the ask)\n-   * @param ask The timestamp of the trade according to the exchange's server, null if not provided\n-   * @param last The id of the trade\n-   * @param volume The orderId of the maker in the trade\n-   * @param volumeTraded The orderId of the taker in the trade\n-   * @param open The orderId of the taker in the trade\n-   * @param high The orderId of the taker in the trade\n-   * @param low The orderId of the taker in the trade\n-   * @param close The orderId of the taker in the trade\n-   */\n-  public TheRockTicker(\n-      CurrencyPair fundId,\n-      Date date,\n-      BigDecimal bid,\n-      BigDecimal ask,\n-      BigDecimal last,\n-      BigDecimal volume,\n-      BigDecimal volumeTraded,\n-      BigDecimal open,\n-      BigDecimal high,\n-      BigDecimal low,\n-      BigDecimal close) {\n-\n-    this.fundId = fundId;\n-    this.date = date;\n-    this.bid = bid;\n-    this.ask = ask;\n-    this.last = last;\n-    this.volume = volume;\n-    this.volumeTraded = volumeTraded;\n-    this.open = open;\n-    this.high = high;\n-    this.low = low;\n-    this.close = close;\n-  }\n+\n+  private BigDecimal bid, ask, last, volume, volumeTraded, open, high, low, close;\n \n   public CurrencyPair getFundId() {\n     return fundId;\n"}}, {"oid": "252918b854264c2cc2c73a77152d1026212149e7", "url": "https://github.com/knowm/XChange/commit/252918b854264c2cc2c73a77152d1026212149e7", "message": "#3171", "committedDate": "2020-03-24T13:33:52Z", "type": "commit"}, {"oid": "82d76b15ecaf2a21de9da2ff6752a76771e44e30", "url": "https://github.com/knowm/XChange/commit/82d76b15ecaf2a21de9da2ff6752a76771e44e30", "message": "#3171", "committedDate": "2020-03-24T13:45:19Z", "type": "commit"}, {"oid": "63be81f16277a2f7e3f9fd2efd5dc7489fcfb9ec", "url": "https://github.com/knowm/XChange/commit/63be81f16277a2f7e3f9fd2efd5dc7489fcfb9ec", "message": "#3171", "committedDate": "2020-03-24T13:45:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM4NDEzNg==", "url": "https://github.com/knowm/XChange/pull/3466#discussion_r398384136", "bodyText": "change this javadoc to\n/**\n  * @deprecated\n  * CurrencyPair is a subtype of Instrument - this method will throw\n  * an exception if the order was for a derivative\n  * <p> use {@link #getInstrument()} instead\n  */\n\nthat example in blockquote is not needed", "author": "walec51", "createdAt": "2020-03-26T08:14:54Z", "path": "xchange-core/src/main/java/org/knowm/xchange/dto/Order.java", "diffHunk": "@@ -224,10 +221,27 @@ public void setAveragePrice(BigDecimal averagePrice) {\n \n     this.averagePrice = averagePrice;\n   }\n-\n+  /**\n+   * @deprecated CurrencyPair is a subtype of instrument <br>\n+   *     use {@link #getInstrument()} instead like this:\n+   *     <blockquote>\n+   *     <pre>\n+   * getInstrument()\n+   * </pre>\n+   *     </blockquote>", "originalCommit": "63be81f16277a2f7e3f9fd2efd5dc7489fcfb9ec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY1NjU3OQ==", "url": "https://github.com/knowm/XChange/pull/3466#discussion_r398656579", "bodyText": "updated", "author": "douggie", "createdAt": "2020-03-26T15:19:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM4NDEzNg=="}], "type": "inlineReview", "revised_code": {"commit": "31eebb510961ede33431d64f1d26067194c1f806", "chunk": "diff --git a/xchange-core/src/main/java/org/knowm/xchange/dto/Order.java b/xchange-core/src/main/java/org/knowm/xchange/dto/Order.java\nindex 0969bcdbfb..b3a6638f04 100644\n--- a/xchange-core/src/main/java/org/knowm/xchange/dto/Order.java\n+++ b/xchange-core/src/main/java/org/knowm/xchange/dto/Order.java\n\n@@ -221,14 +223,11 @@ public abstract class Order implements Serializable {\n \n     this.averagePrice = averagePrice;\n   }\n+\n   /**\n-   * @deprecated CurrencyPair is a subtype of instrument <br>\n-   *     use {@link #getInstrument()} instead like this:\n-   *     <blockquote>\n-   *     <pre>\n-   * getInstrument()\n-   * </pre>\n-   *     </blockquote>\n+   * @deprecated CurrencyPair is a subtype of Instrument - this method will throw an exception if\n+   *     the order was for a derivative\n+   *     <p>use {@link #getInstrument()} instead\n    */\n   @Deprecated\n   public CurrencyPair getCurrencyPair() {\n"}}, {"oid": "31eebb510961ede33431d64f1d26067194c1f806", "url": "https://github.com/knowm/XChange/commit/31eebb510961ede33431d64f1d26067194c1f806", "message": "#3171 updated javadoc", "committedDate": "2020-03-26T15:18:59Z", "type": "commit"}]}