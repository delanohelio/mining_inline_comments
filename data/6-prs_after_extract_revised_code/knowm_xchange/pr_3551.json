{"pr_number": 3551, "pr_title": "[Streaming][Coinjar] - Added streaming implementation", "pr_createdAt": "2020-06-08T23:41:25Z", "pr_url": "https://github.com/knowm/XChange/pull/3551", "timeline": [{"oid": "bd016d05eb49ec8f57ccaf7503bb8959d02879c7", "url": "https://github.com/knowm/XChange/commit/bd016d05eb49ec8f57ccaf7503bb8959d02879c7", "message": "[Coinjar] - Added streaming implementation", "committedDate": "2020-06-08T23:40:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIyNDQ0Nw==", "url": "https://github.com/knowm/XChange/pull/3551#discussion_r443224447", "bodyText": "Always safer to use LimitOrder.Builder for this. The constructors aren't particularly stable.", "author": "badgerwithagun", "createdAt": "2020-06-21T14:23:01Z", "path": "xchange-stream-coinjar/src/main/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingAdapters.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package info.bitrich.xchangestream.coinjar;\n+\n+import info.bitrich.xchangestream.coinjar.dto.CoinjarWebSocketBookEvent;\n+import java.math.BigDecimal;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.knowm.xchange.currency.Currency;\n+import org.knowm.xchange.currency.CurrencyPair;\n+import org.knowm.xchange.dto.Order;\n+import org.knowm.xchange.dto.trade.LimitOrder;\n+\n+class CoinjarStreamingAdapters {\n+\n+  public static CurrencyPair adaptTopicToCurrencyPair(String topic) {\n+    if (topic.startsWith(\"book\")) {\n+      topic = topic.substring(5);\n+      Currency base = new Currency(topic.substring(0, 3));\n+      Currency counter = new Currency(topic.substring(3, 6));\n+      return new CurrencyPair(base, counter);\n+    } else throw new IllegalArgumentException(\"Cannot determine topic from topic name \" + topic);\n+  }\n+\n+  public static String adaptCurrencyPairToBookTopic(CurrencyPair pair) {\n+    return \"book:\" + pair.base.toString() + pair.counter.toString();\n+  }\n+\n+  public static LimitOrder toLimitOrder(\n+      CoinjarWebSocketBookEvent.Payload.Order order,\n+      CurrencyPair currencyPair,\n+      Order.OrderType orderType) {\n+    return new LimitOrder(", "originalCommit": "bd016d05eb49ec8f57ccaf7503bb8959d02879c7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5ec136824fe39c5e94b7d79c9f2f39258607ba8f", "chunk": "diff --git a/xchange-stream-coinjar/src/main/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingAdapters.java b/xchange-stream-coinjar/src/main/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingAdapters.java\nindex 1424678c62..9c1a705ca1 100644\n--- a/xchange-stream-coinjar/src/main/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingAdapters.java\n+++ b/xchange-stream-coinjar/src/main/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingAdapters.java\n\n@@ -1,13 +1,21 @@\n package info.bitrich.xchangestream.coinjar;\n \n import info.bitrich.xchangestream.coinjar.dto.CoinjarWebSocketBookEvent;\n-import java.math.BigDecimal;\n-import java.util.List;\n-import java.util.stream.Collectors;\n+import info.bitrich.xchangestream.coinjar.dto.CoinjarWebSocketOrderEvent;\n+import info.bitrich.xchangestream.coinjar.dto.CoinjarWebSocketUserTradeEvent;\n+import org.knowm.xchange.coinjar.CoinjarAdapters;\n import org.knowm.xchange.currency.Currency;\n import org.knowm.xchange.currency.CurrencyPair;\n import org.knowm.xchange.dto.Order;\n import org.knowm.xchange.dto.trade.LimitOrder;\n+import org.knowm.xchange.dto.trade.MarketOrder;\n+import org.knowm.xchange.dto.trade.UserTrade;\n+\n+import java.math.BigDecimal;\n+import java.sql.Date;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.stream.Collectors;\n \n class CoinjarStreamingAdapters {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIyNjA3NA==", "url": "https://github.com/knowm/XChange/pull/3551#discussion_r443226074", "bodyText": "What's the reason for this difference between the default specification from CoinjarExchange and CoinjarStreamingExchange?", "author": "badgerwithagun", "createdAt": "2020-06-21T14:39:31Z", "path": "xchange-stream-coinjar/src/main/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingExchange.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package info.bitrich.xchangestream.coinjar;\n+\n+import info.bitrich.xchangestream.core.ProductSubscription;\n+import info.bitrich.xchangestream.core.StreamingExchange;\n+import io.reactivex.Completable;\n+import io.reactivex.Observable;\n+import org.knowm.xchange.ExchangeSpecification;\n+import org.knowm.xchange.coinjar.CoinjarExchange;\n+\n+public class CoinjarStreamingExchange extends CoinjarExchange implements StreamingExchange {\n+\n+  private static final String API_URI = \"wss://feed.exchange.coinjar.com/socket/websocket\";\n+\n+  private CoinjarStreamingService streamingService;\n+  private CoinjarStreamingMarketDataService streamingMarketDataService;\n+\n+  @Override\n+  protected void initServices() {\n+    super.initServices();\n+\n+    this.streamingService = createStreamingService();\n+    this.streamingMarketDataService = new CoinjarStreamingMarketDataService(streamingService);\n+  }\n+\n+  private CoinjarStreamingService createStreamingService() {\n+    return new CoinjarStreamingService(API_URI, this.exchangeSpecification.getApiKey());\n+  }\n+\n+  @Override\n+  public Completable connect(ProductSubscription... args) {\n+    return streamingService.connect();\n+  }\n+\n+  @Override\n+  public Completable disconnect() {\n+    return streamingService.disconnect();\n+  }\n+\n+  @Override\n+  public boolean isAlive() {\n+    return streamingService.isSocketOpen();\n+  }\n+\n+  @Override\n+  public Observable<Throwable> reconnectFailure() {\n+    return streamingService.subscribeReconnectFailure();\n+  }\n+\n+  @Override\n+  public Observable<Object> connectionSuccess() {\n+    return streamingService.subscribeConnectionSuccess();\n+  }\n+\n+  @Override\n+  public ExchangeSpecification getDefaultExchangeSpecification() {\n+    ExchangeSpecification spec = super.getDefaultExchangeSpecification();\n+    spec.setShouldLoadRemoteMetaData(false);", "originalCommit": "bd016d05eb49ec8f57ccaf7503bb8959d02879c7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5ec136824fe39c5e94b7d79c9f2f39258607ba8f", "chunk": "diff --git a/xchange-stream-coinjar/src/main/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingExchange.java b/xchange-stream-coinjar/src/main/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingExchange.java\nindex dc74f76a1e..a240824145 100644\n--- a/xchange-stream-coinjar/src/main/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingExchange.java\n+++ b/xchange-stream-coinjar/src/main/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingExchange.java\n\n@@ -5,6 +5,9 @@ import info.bitrich.xchangestream.core.StreamingExchange;\n import io.reactivex.Completable;\n import io.reactivex.Observable;\n import org.knowm.xchange.ExchangeSpecification;\n+import info.bitrich.xchangestream.core.StreamingTradeService;\n+import io.reactivex.Completable;\n+import io.reactivex.Observable;\n import org.knowm.xchange.coinjar.CoinjarExchange;\n \n public class CoinjarStreamingExchange extends CoinjarExchange implements StreamingExchange {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIyNjk0Nw==", "url": "https://github.com/knowm/XChange/pull/3551#discussion_r443226947", "bodyText": "Capital \"I\" on Integration - not sure if it's needed to prevent Surefire picking up this test, but best practice anyway.", "author": "badgerwithagun", "createdAt": "2020-06-21T14:47:40Z", "path": "xchange-stream-coinjar/src/test/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingMarketDataServiceintegration.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package info.bitrich.xchangestream.coinjar;\n+\n+import info.bitrich.xchangestream.core.StreamingExchange;\n+import info.bitrich.xchangestream.core.StreamingExchangeFactory;\n+import info.bitrich.xchangestream.core.StreamingMarketDataService;\n+import io.reactivex.disposables.Disposable;\n+import org.junit.Test;\n+import org.knowm.xchange.ExchangeSpecification;\n+import org.knowm.xchange.currency.CurrencyPair;\n+\n+public class CoinjarStreamingMarketDataServiceintegration {", "originalCommit": "bd016d05eb49ec8f57ccaf7503bb8959d02879c7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5ec136824fe39c5e94b7d79c9f2f39258607ba8f", "chunk": "diff --git a/xchange-stream-coinjar/src/test/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingMarketDataServiceintegration.java b/xchange-stream-coinjar/src/test/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingMarketDataServiceintegration.java\nindex 3bc9c5acb1..ae81e69c9e 100644\n--- a/xchange-stream-coinjar/src/test/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingMarketDataServiceintegration.java\n+++ b/xchange-stream-coinjar/src/test/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingMarketDataServiceintegration.java\n\n@@ -8,7 +8,7 @@ import org.junit.Test;\n import org.knowm.xchange.ExchangeSpecification;\n import org.knowm.xchange.currency.CurrencyPair;\n \n-public class CoinjarStreamingMarketDataServiceintegration {\n+public class CoinjarStreamingMarketDataServiceIntegration {\n \n   @Test\n   public void runTest() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIyODA5NA==", "url": "https://github.com/knowm/XChange/pull/3551#discussion_r443228094", "bodyText": "Should this be NotYetImplementedForExchangeException, or does Coinjar actually not support tickers or trades?", "author": "badgerwithagun", "createdAt": "2020-06-21T15:00:35Z", "path": "xchange-stream-coinjar/src/main/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingMarketDataService.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package info.bitrich.xchangestream.coinjar;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+import info.bitrich.xchangestream.coinjar.dto.CoinjarWebSocketBookEvent;\n+import info.bitrich.xchangestream.core.StreamingMarketDataService;\n+import info.bitrich.xchangestream.service.netty.StreamingObjectMapperHelper;\n+import io.reactivex.Observable;\n+import java.math.BigDecimal;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.SortedMap;\n+import org.knowm.xchange.currency.CurrencyPair;\n+import org.knowm.xchange.dto.Order;\n+import org.knowm.xchange.dto.marketdata.OrderBook;\n+import org.knowm.xchange.dto.marketdata.Ticker;\n+import org.knowm.xchange.dto.marketdata.Trade;\n+import org.knowm.xchange.dto.trade.LimitOrder;\n+import org.knowm.xchange.exceptions.NotAvailableFromExchangeException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+class CoinjarStreamingMarketDataService implements StreamingMarketDataService {\n+\n+  private static final Logger logger =\n+      LoggerFactory.getLogger(CoinjarStreamingMarketDataService.class);\n+\n+  private final ObjectMapper mapper = StreamingObjectMapperHelper.getObjectMapper();\n+\n+  private final CoinjarStreamingService service;\n+\n+  private final Map<CurrencyPair, SortedMap<BigDecimal, LimitOrder>> bids = Maps.newConcurrentMap();\n+  private final Map<CurrencyPair, SortedMap<BigDecimal, LimitOrder>> asks = Maps.newConcurrentMap();\n+\n+  public CoinjarStreamingMarketDataService(CoinjarStreamingService service) {\n+    this.service = service;\n+  }\n+\n+  private static void updateOrderbook(Map<BigDecimal, LimitOrder> book, List<LimitOrder> orders) {\n+    orders.forEach(\n+        order -> {\n+          if (order.getOriginalAmount().compareTo(BigDecimal.ZERO) > 0) {\n+            book.put(order.getLimitPrice(), order);\n+          } else {\n+            book.remove(order.getLimitPrice());\n+          }\n+        });\n+  }\n+\n+  private OrderBook handleOrderbookEvent(CoinjarWebSocketBookEvent event) {\n+    final CurrencyPair pairFromEvent =\n+        CoinjarStreamingAdapters.adaptTopicToCurrencyPair(event.topic);\n+    switch (event.event) {\n+      case CoinjarWebSocketBookEvent.UPDATE:\n+      case CoinjarWebSocketBookEvent.INIT:\n+        updateOrderbook(\n+            bids.get(pairFromEvent),\n+            CoinjarStreamingAdapters.toLimitOrders(\n+                event.payload.bids, pairFromEvent, Order.OrderType.BID));\n+        updateOrderbook(\n+            asks.get(pairFromEvent),\n+            CoinjarStreamingAdapters.toLimitOrders(\n+                event.payload.asks, pairFromEvent, Order.OrderType.ASK));\n+        break;\n+    }\n+    return new OrderBook(\n+        null,\n+        Lists.newArrayList(asks.get(pairFromEvent).values()),\n+        Lists.newArrayList(bids.get(pairFromEvent).values()));\n+  }\n+\n+  @Override\n+  public Observable<OrderBook> getOrderBook(CurrencyPair currencyPair, Object... args) {\n+    String channelName = CoinjarStreamingAdapters.adaptCurrencyPairToBookTopic(currencyPair);\n+    this.asks.put(currencyPair, Maps.newTreeMap(BigDecimal::compareTo));\n+    this.bids.put(currencyPair, Maps.newTreeMap((o1, o2) -> Math.negateExact(o1.compareTo(o2))));\n+    return service\n+        .subscribeChannel(channelName)\n+        .doOnError(\n+            throwable -> {\n+              logger.warn(\n+                  \"encoutered error while subscribing to channel \" + channelName, throwable);\n+            })\n+        .map(\n+            node -> {\n+              CoinjarWebSocketBookEvent orderEvent =\n+                  mapper.treeToValue(node, CoinjarWebSocketBookEvent.class);\n+              return this.handleOrderbookEvent(orderEvent);\n+            })\n+        .filter(orderbook -> !orderbook.getBids().isEmpty() && !orderbook.getAsks().isEmpty());\n+  }\n+\n+  @Override\n+  public Observable<Ticker> getTicker(CurrencyPair currencyPair, Object... args) {\n+    throw new NotAvailableFromExchangeException();", "originalCommit": "bd016d05eb49ec8f57ccaf7503bb8959d02879c7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5ec136824fe39c5e94b7d79c9f2f39258607ba8f", "chunk": "diff --git a/xchange-stream-coinjar/src/main/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingMarketDataService.java b/xchange-stream-coinjar/src/main/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingMarketDataService.java\nindex f838840929..10da153925 100644\n--- a/xchange-stream-coinjar/src/main/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingMarketDataService.java\n+++ b/xchange-stream-coinjar/src/main/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingMarketDataService.java\n\n@@ -17,7 +17,7 @@ import org.knowm.xchange.dto.marketdata.OrderBook;\n import org.knowm.xchange.dto.marketdata.Ticker;\n import org.knowm.xchange.dto.marketdata.Trade;\n import org.knowm.xchange.dto.trade.LimitOrder;\n-import org.knowm.xchange.exceptions.NotAvailableFromExchangeException;\n+import org.knowm.xchange.exceptions.NotYetImplementedForExchangeException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIyODMzNA==", "url": "https://github.com/knowm/XChange/pull/3551#discussion_r443228334", "bodyText": "This doesn't look like it will play well with two concurrent subscriptions to the same currency pair.", "author": "badgerwithagun", "createdAt": "2020-06-21T15:03:30Z", "path": "xchange-stream-coinjar/src/main/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingMarketDataService.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package info.bitrich.xchangestream.coinjar;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n+import info.bitrich.xchangestream.coinjar.dto.CoinjarWebSocketBookEvent;\n+import info.bitrich.xchangestream.core.StreamingMarketDataService;\n+import info.bitrich.xchangestream.service.netty.StreamingObjectMapperHelper;\n+import io.reactivex.Observable;\n+import java.math.BigDecimal;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.SortedMap;\n+import org.knowm.xchange.currency.CurrencyPair;\n+import org.knowm.xchange.dto.Order;\n+import org.knowm.xchange.dto.marketdata.OrderBook;\n+import org.knowm.xchange.dto.marketdata.Ticker;\n+import org.knowm.xchange.dto.marketdata.Trade;\n+import org.knowm.xchange.dto.trade.LimitOrder;\n+import org.knowm.xchange.exceptions.NotAvailableFromExchangeException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+class CoinjarStreamingMarketDataService implements StreamingMarketDataService {\n+\n+  private static final Logger logger =\n+      LoggerFactory.getLogger(CoinjarStreamingMarketDataService.class);\n+\n+  private final ObjectMapper mapper = StreamingObjectMapperHelper.getObjectMapper();\n+\n+  private final CoinjarStreamingService service;\n+\n+  private final Map<CurrencyPair, SortedMap<BigDecimal, LimitOrder>> bids = Maps.newConcurrentMap();\n+  private final Map<CurrencyPair, SortedMap<BigDecimal, LimitOrder>> asks = Maps.newConcurrentMap();\n+\n+  public CoinjarStreamingMarketDataService(CoinjarStreamingService service) {\n+    this.service = service;\n+  }\n+\n+  private static void updateOrderbook(Map<BigDecimal, LimitOrder> book, List<LimitOrder> orders) {\n+    orders.forEach(\n+        order -> {\n+          if (order.getOriginalAmount().compareTo(BigDecimal.ZERO) > 0) {\n+            book.put(order.getLimitPrice(), order);\n+          } else {\n+            book.remove(order.getLimitPrice());\n+          }\n+        });\n+  }\n+\n+  private OrderBook handleOrderbookEvent(CoinjarWebSocketBookEvent event) {\n+    final CurrencyPair pairFromEvent =\n+        CoinjarStreamingAdapters.adaptTopicToCurrencyPair(event.topic);\n+    switch (event.event) {\n+      case CoinjarWebSocketBookEvent.UPDATE:\n+      case CoinjarWebSocketBookEvent.INIT:\n+        updateOrderbook(\n+            bids.get(pairFromEvent),\n+            CoinjarStreamingAdapters.toLimitOrders(\n+                event.payload.bids, pairFromEvent, Order.OrderType.BID));\n+        updateOrderbook(\n+            asks.get(pairFromEvent),\n+            CoinjarStreamingAdapters.toLimitOrders(\n+                event.payload.asks, pairFromEvent, Order.OrderType.ASK));\n+        break;\n+    }\n+    return new OrderBook(\n+        null,\n+        Lists.newArrayList(asks.get(pairFromEvent).values()),\n+        Lists.newArrayList(bids.get(pairFromEvent).values()));\n+  }\n+\n+  @Override\n+  public Observable<OrderBook> getOrderBook(CurrencyPair currencyPair, Object... args) {\n+    String channelName = CoinjarStreamingAdapters.adaptCurrencyPairToBookTopic(currencyPair);\n+    this.asks.put(currencyPair, Maps.newTreeMap(BigDecimal::compareTo));", "originalCommit": "bd016d05eb49ec8f57ccaf7503bb8959d02879c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA3OTMwMw==", "url": "https://github.com/knowm/XChange/pull/3551#discussion_r452079303", "bodyText": "I've addressed the above issues and will look at this one, it's not a scenario i'm using but that should probably be fixed before merging.", "author": "nielsdraaisma", "createdAt": "2020-07-09T09:15:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIyODMzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg2NTU2Mg==", "url": "https://github.com/knowm/XChange/pull/3551#discussion_r524865562", "bodyText": "Having had another look at this, it's probably safe to roll out as is, each subscription has it's own orderbook which get updated for subscription. Although it's not the most efficient way when multiple subscriptions are present, that seems to be a common way of implementing this in various other streaming exchanges.", "author": "nielsdraaisma", "createdAt": "2020-11-17T03:43:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIyODMzNA=="}], "type": "inlineReview", "revised_code": {"commit": "5ec136824fe39c5e94b7d79c9f2f39258607ba8f", "chunk": "diff --git a/xchange-stream-coinjar/src/main/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingMarketDataService.java b/xchange-stream-coinjar/src/main/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingMarketDataService.java\nindex f838840929..10da153925 100644\n--- a/xchange-stream-coinjar/src/main/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingMarketDataService.java\n+++ b/xchange-stream-coinjar/src/main/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingMarketDataService.java\n\n@@ -17,7 +17,7 @@ import org.knowm.xchange.dto.marketdata.OrderBook;\n import org.knowm.xchange.dto.marketdata.Ticker;\n import org.knowm.xchange.dto.marketdata.Trade;\n import org.knowm.xchange.dto.trade.LimitOrder;\n-import org.knowm.xchange.exceptions.NotAvailableFromExchangeException;\n+import org.knowm.xchange.exceptions.NotYetImplementedForExchangeException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n"}}, {"oid": "5ec136824fe39c5e94b7d79c9f2f39258607ba8f", "url": "https://github.com/knowm/XChange/commit/5ec136824fe39c5e94b7d79c9f2f39258607ba8f", "message": "[Streaming][Coinjar] - Review comments, added userTrades and orderChanges", "committedDate": "2020-07-28T06:26:29Z", "type": "commit"}, {"oid": "429f2416d39a48a0306f919e022b4eaf3599abcb", "url": "https://github.com/knowm/XChange/commit/429f2416d39a48a0306f919e022b4eaf3599abcb", "message": "[Streaming][Coinjar] - Fixed pom file", "committedDate": "2020-07-28T06:29:02Z", "type": "commit"}, {"oid": "484749dafe6be98a44e2567d8b17dd8d8851f67b", "url": "https://github.com/knowm/XChange/commit/484749dafe6be98a44e2567d8b17dd8d8851f67b", "message": "[Streaming][Coinjar] - Fixed pom file", "committedDate": "2020-07-28T06:30:50Z", "type": "commit"}, {"oid": "5a8266e3167cf55f6e3fba0882ba739a80d21cbb", "url": "https://github.com/knowm/XChange/commit/5a8266e3167cf55f6e3fba0882ba739a80d21cbb", "message": "Rename CoinjarStreamingMarketDataServiceintegration.java to CoinjarStreamingMarketDataServiceIntegration.java", "committedDate": "2020-07-28T07:05:41Z", "type": "commit"}, {"oid": "3de2b640a2ab3cf38b2043d98284d57ff69b114d", "url": "https://github.com/knowm/XChange/commit/3de2b640a2ab3cf38b2043d98284d57ff69b114d", "message": "[Streaming][Coinjar] - Fixed imports", "committedDate": "2020-07-28T07:13:26Z", "type": "commit"}, {"oid": "48405add0c84da525d8421060c564a77d1fff1f2", "url": "https://github.com/knowm/XChange/commit/48405add0c84da525d8421060c564a77d1fff1f2", "message": "Merge branch 'add-coinjar-stream' of github.com:nielsdraaisma/XChange into add-coinjar-stream", "committedDate": "2020-07-28T07:14:46Z", "type": "commit"}, {"oid": "762921cb03895d8e0ebe7c0bd7f3a87da03f6c58", "url": "https://github.com/knowm/XChange/commit/762921cb03895d8e0ebe7c0bd7f3a87da03f6c58", "message": "Merged develop", "committedDate": "2020-11-17T03:39:44Z", "type": "commit"}, {"oid": "cc408ba09208f980b01692738862996b48a4fe2b", "url": "https://github.com/knowm/XChange/commit/cc408ba09208f980b01692738862996b48a4fe2b", "message": "Removed invalid manual example", "committedDate": "2020-11-17T04:24:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMzMTI4OA==", "url": "https://github.com/knowm/XChange/pull/3551#discussion_r525331288", "bodyText": "does this work with LINK?", "author": "earce", "createdAt": "2020-11-17T17:05:39Z", "path": "xchange-stream-coinjar/src/main/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingAdapters.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package info.bitrich.xchangestream.coinjar;\n+\n+import info.bitrich.xchangestream.coinjar.dto.CoinjarWebSocketBookEvent;\n+import info.bitrich.xchangestream.coinjar.dto.CoinjarWebSocketOrderEvent;\n+import info.bitrich.xchangestream.coinjar.dto.CoinjarWebSocketUserTradeEvent;\n+import java.math.BigDecimal;\n+import java.sql.Date;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.knowm.xchange.coinjar.CoinjarAdapters;\n+import org.knowm.xchange.currency.Currency;\n+import org.knowm.xchange.currency.CurrencyPair;\n+import org.knowm.xchange.dto.Order;\n+import org.knowm.xchange.dto.trade.LimitOrder;\n+import org.knowm.xchange.dto.trade.MarketOrder;\n+import org.knowm.xchange.dto.trade.UserTrade;\n+\n+class CoinjarStreamingAdapters {\n+\n+  public static CurrencyPair adaptTopicToCurrencyPair(String topic) {\n+    if (topic.startsWith(\"book\")) {\n+      topic = topic.substring(5);\n+      Currency base = new Currency(topic.substring(0, 3));\n+      Currency counter = new Currency(topic.substring(3, 6));\n+      return new CurrencyPair(base, counter);", "originalCommit": "cc408ba09208f980b01692738862996b48a4fe2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU4Mjc1NQ==", "url": "https://github.com/knowm/XChange/pull/3551#discussion_r525582755", "bodyText": "No, updated this logic to follow coinjar's logic that adds a - when either of the assets has four chars.", "author": "nielsdraaisma", "createdAt": "2020-11-17T23:01:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMzMTI4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU5MDA3NA==", "url": "https://github.com/knowm/XChange/pull/3551#discussion_r525590074", "bodyText": "should this code not be updated to use that updated logic here?", "author": "earce", "createdAt": "2020-11-17T23:19:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMzMTI4OA=="}], "type": "inlineReview", "revised_code": {"commit": "625ecc589a463bf4751ca6a38c0e54fb75a4e0c4", "chunk": "diff --git a/xchange-stream-coinjar/src/main/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingAdapters.java b/xchange-stream-coinjar/src/main/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingAdapters.java\nindex 565842b5ac..8aa76c2ff2 100644\n--- a/xchange-stream-coinjar/src/main/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingAdapters.java\n+++ b/xchange-stream-coinjar/src/main/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingAdapters.java\n\n@@ -28,7 +28,11 @@ class CoinjarStreamingAdapters {\n   }\n \n   public static String adaptCurrencyPairToBookTopic(CurrencyPair pair) {\n-    return \"book:\" + pair.base.toString() + pair.counter.toString();\n+    String sep = \"\";\n+    if ( pair.base.getCurrencyCode().length() > 3 || pair.counter.getCurrencyCode().length() > 3){\n+      sep = \"-\";\n+    }\n+    return \"book:\" + pair.base.toString() + sep + pair.counter.toString();\n   }\n \n   public static LimitOrder toLimitOrder(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMzODg2OQ==", "url": "https://github.com/knowm/XChange/pull/3551#discussion_r525338869", "bodyText": "I don't this is is the right way to set this up because if you have disconnect and reconnect this will publish a message for every reconnect you have had during the course of your application. So if you disconnect 2 times and reconnect a 3rd this will publish your message 3 times a second when you reconnect.\nYou can test this by breaking internet connection deliberately and seeing how many time the message gets published. Something like (with your parameters and ping message):\n    Observable.interval(1, TimeUnit.SECONDS) .subscribe( t -> { if (isSocketOpen()) webSocketChannel.writeAndFlush(new PingWebSocketFrame()); });\nShould accomplish what you want", "author": "earce", "createdAt": "2020-11-17T17:14:27Z", "path": "xchange-stream-coinjar/src/main/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingService.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package info.bitrich.xchangestream.coinjar;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import info.bitrich.xchangestream.coinjar.dto.CoinjarHeartbeat;\n+import info.bitrich.xchangestream.coinjar.dto.CoinjarWebSocketSubscribeMessage;\n+import info.bitrich.xchangestream.coinjar.dto.CoinjarWebSocketUnsubscribeMessage;\n+import info.bitrich.xchangestream.service.netty.JsonNettyStreamingService;\n+import io.reactivex.Observable;\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+class CoinjarStreamingService extends JsonNettyStreamingService {\n+\n+  private final AtomicInteger refCount = new AtomicInteger();\n+\n+  private String apiKey;\n+\n+  public CoinjarStreamingService(String apiUrl, String apiKey) {\n+    super(apiUrl);\n+    this.apiKey = apiKey;\n+    this.subscribeConnectionSuccess()", "originalCommit": "cc408ba09208f980b01692738862996b48a4fe2b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU4MjgzMw==", "url": "https://github.com/knowm/XChange/pull/3551#discussion_r525582833", "bodyText": "Done, good catch.", "author": "nielsdraaisma", "createdAt": "2020-11-17T23:01:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMzODg2OQ=="}], "type": "inlineReview", "revised_code": {"commit": "625ecc589a463bf4751ca6a38c0e54fb75a4e0c4", "chunk": "diff --git a/xchange-stream-coinjar/src/main/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingService.java b/xchange-stream-coinjar/src/main/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingService.java\nindex f1b44dfc19..c7b3194877 100644\n--- a/xchange-stream-coinjar/src/main/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingService.java\n+++ b/xchange-stream-coinjar/src/main/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingService.java\n\n@@ -19,16 +19,11 @@ class CoinjarStreamingService extends JsonNettyStreamingService {\n   public CoinjarStreamingService(String apiUrl, String apiKey) {\n     super(apiUrl);\n     this.apiKey = apiKey;\n-    this.subscribeConnectionSuccess()\n-        .forEach(\n-            (l) -> {\n-              Observable.interval(30, TimeUnit.SECONDS)\n-                  .forEach(\n-                      (ll) -> {\n-                        if (this.isSocketOpen()) {\n-                          this.sendObjectMessage(new CoinjarHeartbeat(refCount.incrementAndGet()));\n-                        }\n-                      });\n+    Observable.interval(30, TimeUnit.SECONDS)\n+            .subscribe( t -> {\n+              if (this.isSocketOpen()) {\n+                this.sendObjectMessage(new CoinjarHeartbeat(refCount.incrementAndGet()));\n+              }\n             });\n   }\n \n"}}, {"oid": "625ecc589a463bf4751ca6a38c0e54fb75a4e0c4", "url": "https://github.com/knowm/XChange/commit/625ecc589a463bf4751ca6a38c0e54fb75a4e0c4", "message": "Fixed heartbeat schedule, fixed currency mapping for currencies with  more than 3 chars", "committedDate": "2020-11-17T22:58:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU5MDU3OA==", "url": "https://github.com/knowm/XChange/pull/3551#discussion_r525590578", "bodyText": "being pedantic here but can you just inline this?", "author": "earce", "createdAt": "2020-11-17T23:20:41Z", "path": "xchange-stream-coinjar/src/main/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingExchange.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package info.bitrich.xchangestream.coinjar;\n+\n+import info.bitrich.xchangestream.core.ProductSubscription;\n+import info.bitrich.xchangestream.core.StreamingExchange;\n+import info.bitrich.xchangestream.core.StreamingTradeService;\n+import io.reactivex.Completable;\n+import io.reactivex.Observable;\n+import org.knowm.xchange.coinjar.CoinjarExchange;\n+\n+public class CoinjarStreamingExchange extends CoinjarExchange implements StreamingExchange {\n+\n+  private static final String API_URI = \"wss://feed.exchange.coinjar.com/socket/websocket\";\n+\n+  private CoinjarStreamingService streamingService;\n+  private CoinjarStreamingMarketDataService streamingMarketDataService;\n+  private CoinjarStreamingTradeService streamingTradeService;\n+\n+  @Override\n+  protected void initServices() {\n+    super.initServices();\n+\n+    this.streamingService = createStreamingService();\n+    this.streamingMarketDataService = new CoinjarStreamingMarketDataService(streamingService);\n+    this.streamingTradeService = new CoinjarStreamingTradeService(streamingService);\n+  }\n+\n+  private CoinjarStreamingService createStreamingService() {\n+    return new CoinjarStreamingService(API_URI, this.exchangeSpecification.getApiKey());\n+  }", "originalCommit": "625ecc589a463bf4751ca6a38c0e54fb75a4e0c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU5NDM0OA==", "url": "https://github.com/knowm/XChange/pull/3551#discussion_r525594348", "bodyText": "Done", "author": "nielsdraaisma", "createdAt": "2020-11-17T23:30:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU5MDU3OA=="}], "type": "inlineReview", "revised_code": {"commit": "66a7d8d1ea51eec60c540ff104a007ddad1e3ce6", "chunk": "diff --git a/xchange-stream-coinjar/src/main/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingExchange.java b/xchange-stream-coinjar/src/main/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingExchange.java\nindex 571ab6bb4a..739e39c0c7 100644\n--- a/xchange-stream-coinjar/src/main/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingExchange.java\n+++ b/xchange-stream-coinjar/src/main/java/info/bitrich/xchangestream/coinjar/CoinjarStreamingExchange.java\n\n@@ -19,15 +19,11 @@ public class CoinjarStreamingExchange extends CoinjarExchange implements Streami\n   protected void initServices() {\n     super.initServices();\n \n-    this.streamingService = createStreamingService();\n+    this.streamingService = new CoinjarStreamingService(API_URI, this.exchangeSpecification.getApiKey());\n     this.streamingMarketDataService = new CoinjarStreamingMarketDataService(streamingService);\n     this.streamingTradeService = new CoinjarStreamingTradeService(streamingService);\n   }\n \n-  private CoinjarStreamingService createStreamingService() {\n-    return new CoinjarStreamingService(API_URI, this.exchangeSpecification.getApiKey());\n-  }\n-\n   @Override\n   public Completable connect(ProductSubscription... args) {\n     return streamingService.connect();\n"}}, {"oid": "66a7d8d1ea51eec60c540ff104a007ddad1e3ce6", "url": "https://github.com/knowm/XChange/commit/66a7d8d1ea51eec60c540ff104a007ddad1e3ce6", "message": "Removed pom dependency, inlined coinjar streamingService creation", "committedDate": "2020-11-17T23:30:48Z", "type": "commit"}, {"oid": "6dda04c176242b9323003cbe7712b8ea4bdc89be", "url": "https://github.com/knowm/XChange/commit/6dda04c176242b9323003cbe7712b8ea4bdc89be", "message": "Fixed coinjar streaming adapter for four character markets", "committedDate": "2020-11-17T23:41:04Z", "type": "commit"}]}