{"pr_number": 3534, "pr_title": "[Core-Stream] Roll up of two excluded open PR during merge", "pr_createdAt": "2020-05-24T02:29:56Z", "pr_url": "https://github.com/knowm/XChange/pull/3534", "timeline": [{"oid": "e3bc023f2b0f6287962e41e8d470abac771494d6", "url": "https://github.com/knowm/XChange/commit/e3bc023f2b0f6287962e41e8d470abac771494d6", "message": "[Core]NettyStreamingService using PublishSubject for connect/fail handling #566", "committedDate": "2020-05-24T02:18:32Z", "type": "commit"}, {"oid": "cd4f56d038e61e5e5e92223d16c594d6e2cf777b", "url": "https://github.com/knowm/XChange/commit/cd4f56d038e61e5e5e92223d16c594d6e2cf777b", "message": "[core] subscribeChannel unnecessary onError #522", "committedDate": "2020-05-24T02:23:59Z", "type": "commit"}, {"oid": "91a0e0a36665c570fc4846f75fc24cc1f5c15373", "url": "https://github.com/knowm/XChange/commit/91a0e0a36665c570fc4846f75fc24cc1f5c15373", "message": "run fmt", "committedDate": "2020-05-24T13:16:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY0NzQxMA==", "url": "https://github.com/knowm/XChange/pull/3534#discussion_r429647410", "bodyText": "Do we want to log more information about what the error that occurred here was?", "author": "earce", "createdAt": "2020-05-24T15:22:07Z", "path": "xchange-stream-service-netty/src/main/java/info/bitrich/xchangestream/service/netty/NettyStreamingService.java", "diffHunk": "@@ -375,16 +374,23 @@ public void sendMessage(String message) {\n                     Subscription newSubscription = new Subscription(e, channelName, args);\n                     try {\n                       sendMessage(getSubscribeMessage(channelName, args));\n-                    } catch (IOException throwable) {\n-                      e.onError(throwable);\n+                    } catch (\n+                        Exception\n+                            throwable) { // if getSubscribeMessage throws this, it is because it\n+                      // needs to report\n+                      e.onError(throwable); // a problem creating the message\n                     }\n                     return newSubscription;\n                   });\n             })\n         .doOnDispose(\n             () -> {\n               if (channels.remove(channelId) != null) {\n-                sendMessage(getUnsubscribeMessage(channelId));\n+                try {\n+                  sendMessage(getUnsubscribeMessage(channelId));\n+                } catch (IOException e) {\n+                  LOG.error(\"Failed to unsubscribe channel: {}\", channelId);", "originalCommit": "91a0e0a36665c570fc4846f75fc24cc1f5c15373", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY4MzQ4NA==", "url": "https://github.com/knowm/XChange/pull/3534#discussion_r429683484", "bodyText": "Well do we really care why it failed to unsubscribe on an IOException?  I assume the socket has gone anyway, and the message (should be warn) is just to avoid eating the exception.", "author": "mdvx", "createdAt": "2020-05-24T23:00:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY0NzQxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY4MzY4Ng==", "url": "https://github.com/knowm/XChange/pull/3534#discussion_r429683686", "bodyText": "Probably not, but in some cases this information may yield more color as to what is going on, figured it made sense to consider.", "author": "earce", "createdAt": "2020-05-24T23:03:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY0NzQxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk2NzM4MQ==", "url": "https://github.com/knowm/XChange/pull/3534#discussion_r429967381", "bodyText": "Hm, on principle, eating an unknown exception without a stack trace isn't the best idea IMO.   If you know what it is and want to suppress noise, fine, but as you say below, this could be caused by anything.  I should have spotted this, sorry.", "author": "badgerwithagun", "createdAt": "2020-05-25T14:35:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY0NzQxMA=="}], "type": "inlineReview", "revised_code": {"commit": "f0a7de2111caa4edad4d99c6fa32d24a08bffc08", "chunk": "diff --git a/xchange-stream-service-netty/src/main/java/info/bitrich/xchangestream/service/netty/NettyStreamingService.java b/xchange-stream-service-netty/src/main/java/info/bitrich/xchangestream/service/netty/NettyStreamingService.java\nindex 96f2c24bb4..04142aacb9 100644\n--- a/xchange-stream-service-netty/src/main/java/info/bitrich/xchangestream/service/netty/NettyStreamingService.java\n+++ b/xchange-stream-service-netty/src/main/java/info/bitrich/xchangestream/service/netty/NettyStreamingService.java\n\n@@ -389,7 +389,9 @@ public abstract class NettyStreamingService<T> extends ConnectableService {\n                 try {\n                   sendMessage(getUnsubscribeMessage(channelId));\n                 } catch (IOException e) {\n-                  LOG.error(\"Failed to unsubscribe channel: {}\", channelId);\n+                  LOG.debug(\"Failed to unsubscribe channel: {} {}\", channelId, e.toString());\n+                } catch (Exception e) {\n+                  LOG.warn(\"Failed to unsubscribe channel: {}\", channelId, e);\n                 }\n               }\n             })\n"}}, {"oid": "f0a7de2111caa4edad4d99c6fa32d24a08bffc08", "url": "https://github.com/knowm/XChange/commit/f0a7de2111caa4edad4d99c6fa32d24a08bffc08", "message": "But this is better error handling", "committedDate": "2020-05-24T23:04:36Z", "type": "commit"}, {"oid": "8a573063b468b01887f38d1a4fd7e7f46509a551", "url": "https://github.com/knowm/XChange/commit/8a573063b468b01887f38d1a4fd7e7f46509a551", "message": "format", "committedDate": "2020-05-24T23:04:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc4OTk0Ng==", "url": "https://github.com/knowm/XChange/pull/3534#discussion_r429789946", "bodyText": "sendMessage itself is asynchronous - I've been thinking for a while that it should return a Completable (see #3518). Is that likely to be a problem for you here? Are you only worried about exceptions from getUnsubscribeMessage and getSubscribeMessage?", "author": "badgerwithagun", "createdAt": "2020-05-25T08:01:03Z", "path": "xchange-stream-service-netty/src/main/java/info/bitrich/xchangestream/service/netty/NettyStreamingService.java", "diffHunk": "@@ -375,16 +374,25 @@ public void sendMessage(String message) {\n                     Subscription newSubscription = new Subscription(e, channelName, args);\n                     try {\n                       sendMessage(getSubscribeMessage(channelName, args));\n-                    } catch (IOException throwable) {\n-                      e.onError(throwable);\n+                    } catch (\n+                        Exception\n+                            throwable) { // if getSubscribeMessage throws this, it is because it\n+                      // needs to report\n+                      e.onError(throwable); // a problem creating the message\n                     }\n                     return newSubscription;\n                   });\n             })\n         .doOnDispose(\n             () -> {\n               if (channels.remove(channelId) != null) {\n-                sendMessage(getUnsubscribeMessage(channelId));\n+                try {\n+                  sendMessage(getUnsubscribeMessage(channelId));", "originalCommit": "8a573063b468b01887f38d1a4fd7e7f46509a551", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk2Mjk1OQ==", "url": "https://github.com/knowm/XChange/pull/3534#discussion_r429962959", "bodyText": "Are you only worried about exceptions from getUnsubscribeMessage and getSubscribeMessage?\n\nYes, they are overrides, so code is not trustworthy", "author": "mdvx", "createdAt": "2020-05-25T14:26:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc4OTk0Ng=="}], "type": "inlineReview", "revised_code": null}]}