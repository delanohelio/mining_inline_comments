{"pr_number": 289, "pr_title": "Unit test added for UserConfiguration and ProjectClassLoader", "pr_createdAt": "2020-07-13T05:37:36Z", "pr_url": "https://github.com/eclipse/jkube/pull/289", "timeline": [{"oid": "0861e81236b7223c131c36a56561dc7c38feb0ac", "url": "https://github.com/eclipse/jkube/commit/0861e81236b7223c131c36a56561dc7c38feb0ac", "message": "E2E test for karaf-camel-test\n\nSigned-off-by: anandrkskd <anandrkskd@gmail.com>", "committedDate": "2020-07-13T05:39:37Z", "type": "forcePushed"}, {"oid": "c24625ee0b484b82ef01837e83bfbacb3549b365", "url": "https://github.com/eclipse/jkube/commit/c24625ee0b484b82ef01837e83bfbacb3549b365", "message": "Unit test added for UserConfiguration and ProjectClassLoader test\n\nSigned-off-by: anandrkskd <anandrkskd@gmail.com>", "committedDate": "2020-07-13T06:04:16Z", "type": "forcePushed"}, {"oid": "f81254c8d91022638841bf7dc5f89aa952f5c2ca", "url": "https://github.com/eclipse/jkube/commit/f81254c8d91022638841bf7dc5f89aa952f5c2ca", "message": "Unit test added for UserConfiguration and ProjectClassLoader test\n\nSigned-off-by: anandrkskd <anandrkskd@gmail.com>", "committedDate": "2020-07-13T11:25:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY1NzcwNw==", "url": "https://github.com/eclipse/jkube/pull/289#discussion_r453657707", "bodyText": "If I'm not mistaken all the tests seem to be having this block where you set up ProjectClassLoader maybe you can move this to some function or maybe move it to @Before, you can make ProjectClassLoaders as a member variable and then initialize it in @Before block, it would be called automatically before each test execution", "author": "rohanKanojia", "createdAt": "2020-07-13T13:41:29Z", "path": "jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/ProjectClassLoadersTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/**\n+ * Copyright (c) 2019 Red Hat, Inc.\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at:\n+ *\n+ *     https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Red Hat, Inc. - initial API and implementation\n+ */\n+package org.eclipse.jkube.kit.common.util;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import java.io.File;\n+import java.net.URLClassLoader;\n+import java.util.Arrays;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class ProjectClassLoadersTest {\n+    @Rule\n+    public TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+    @Test\n+    public void testIsClassInCompileClasspathWhenTrue() throws  Exception{\n+        //Given\n+        boolean all = true;\n+        File applicationProp =  new File(getClass().getResource(\"/util/spring-boot-application.properties\").getPath());\n+        File targetFolder = temporaryFolder.newFolder(\"target\");\n+        File classesInTarget = new File(targetFolder, \"classes\");\n+        File applicationPropertiesInsideTarget = new File(classesInTarget, \"application.properties\");\n+        FileUtils.copyFile(applicationProp, applicationPropertiesInsideTarget);\n+        URLClassLoader compileclassLoader = ClassUtil.createClassLoader(Arrays.asList(classesInTarget.getAbsolutePath(), applicationProp.getAbsolutePath()), classesInTarget.getAbsolutePath());\n+        ProjectClassLoaders object = new ProjectClassLoaders(compileclassLoader);\n+\n+        //When\n+        boolean result  =  object.isClassInCompileClasspath(all);\n+\n+        //Then\n+        assertTrue(result);\n+    }\n+    @Test\n+    public void testIsClassInCompileClasspathWhenFalse() throws  Exception{\n+        //Given\n+        boolean all = false;\n+        File applicationProp =  new File(getClass().getResource(\"/util/spring-boot-application.properties\").getPath());\n+        File targetFolder = temporaryFolder.newFolder(\"target\");\n+        File classesInTarget = new File(targetFolder, \"classes\");\n+        File applicationPropertiesInsideTarget = new File(classesInTarget, \"application.properties\");\n+        FileUtils.copyFile(applicationProp, applicationPropertiesInsideTarget);\n+        URLClassLoader compileclassLoader = ClassUtil.createClassLoader(Arrays.asList(classesInTarget.getAbsolutePath(), applicationProp.getAbsolutePath()), classesInTarget.getAbsolutePath());\n+        ProjectClassLoaders object = new ProjectClassLoaders(compileclassLoader);\n+\n+        //When\n+        boolean result  =  object.isClassInCompileClasspath(all,\"ProjectClassLoadersTest\",\"UserConfigurationCompare\");\n+\n+        //Then\n+        assertFalse(result);\n+    }\n+\n+    @Test\n+    public void testIsClassInCompileClasspathWhenHasAllClassesTrue() throws  Exception{\n+        //Given\n+        boolean all = true;\n+        File applicationProp =  new File(getClass().getResource(\"/util/spring-boot-application.properties\").getPath());\n+        File targetFolder = temporaryFolder.newFolder(\"target\");\n+        File classesInTarget = new File(targetFolder, \"classes\");\n+        File applicationPropertiesInsideTarget = new File(classesInTarget, \"application.properties\");\n+        FileUtils.copyFile(applicationProp, applicationPropertiesInsideTarget);\n+        URLClassLoader compileclassLoader = ClassUtil.createClassLoader(Arrays.asList(classesInTarget.getAbsolutePath(), applicationProp.getAbsolutePath()), classesInTarget.getAbsolutePath());\n+        ProjectClassLoaders object = new ProjectClassLoaders(compileclassLoader);", "originalCommit": "f81254c8d91022638841bf7dc5f89aa952f5c2ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cd81009efccbc4815284a9ff8f321cd2436b47ab", "chunk": "diff --git a/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/ProjectClassLoadersTest.java b/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/ProjectClassLoadersTest.java\nindex c6750cf6..9796e80d 100644\n--- a/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/ProjectClassLoadersTest.java\n+++ b/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/ProjectClassLoadersTest.java\n\n@@ -22,17 +22,15 @@ import java.io.File;\n import java.net.URLClassLoader;\n import java.util.Arrays;\n \n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.*;\n \n public class ProjectClassLoadersTest {\n     @Rule\n     public TemporaryFolder temporaryFolder = new TemporaryFolder();\n \n-    @Test\n-    public void testIsClassInCompileClasspathWhenTrue() throws  Exception{\n-        //Given\n-        boolean all = true;\n+\n+    private ProjectClassLoaders before() throws  Exception {\n+\n         File applicationProp =  new File(getClass().getResource(\"/util/spring-boot-application.properties\").getPath());\n         File targetFolder = temporaryFolder.newFolder(\"target\");\n         File classesInTarget = new File(targetFolder, \"classes\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY2MjQ2NA==", "url": "https://github.com/eclipse/jkube/pull/289#discussion_r453662464", "bodyText": "EMPTY_LIST is not type safe. Use Collections.emptyList()", "author": "rohanKanojia", "createdAt": "2020-07-13T13:48:08Z", "path": "jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/UserConfigurationCompareTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2019 Red Hat, Inc.\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at:\n+ *\n+ *     https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Red Hat, Inc. - initial API and implementation\n+ */\n+package org.eclipse.jkube.kit.common.util;\n+\n+import io.fabric8.kubernetes.api.model.KubernetesListBuilder;\n+import io.fabric8.kubernetes.api.model.ObjectMetaBuilder;\n+import io.fabric8.kubernetes.api.model.apps.DeploymentBuilder;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class UserConfigurationCompareTest {\n+\n+    @Test\n+    public void TestConfigEqualWhenEqual() {\n+        //Given\n+        Object entity1 = \"Hello\";\n+        Object entity2 = \"Hello\";\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenEitherNull() {\n+        //Given\n+        Object entity1 = null;\n+        Object entity2 = \"new\";\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertFalse(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenMapAndEqual() {\n+        //Given\n+        Map<String, String> entity1 = new HashMap();\n+        Map<String, String> entity2 = new HashMap();\n+        entity1.put(\"item1\", \"code\");\n+        entity2.put(\"item1\", \"code\");\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+    @Test\n+    public void TestConfigEqualWhenMapAndNotEqual() {\n+        //Given\n+        Map<String, String> entity1 = new HashMap();\n+        Map<String, String> entity2 = new HashMap();\n+        entity1.put(\"item\", \"code\");\n+        entity2.put(\"item1\", \"code\");\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertFalse(result);\n+    }\n+\n+\n+    @Test\n+    public void TestConfigEqualWhenObjectMetaIsTrue() {\n+        //Given\n+        Object entity1 = new ObjectMetaBuilder().withName(\"test1\").withAnnotations(Collections.singletonMap(\"foo\", \"bar\")).build();\n+        Object entity2 = new ObjectMetaBuilder().withName(\"test1\").withAnnotations(Collections.singletonMap(\"foo\",\"bar\")).build();\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenCollectionWhenFalse(){\n+        //Given\n+        ArrayList<String> anandList = new ArrayList<>();\n+        Object entity1 = Collections.singletonList(anandList);\n+        Object entity2 = Collections.EMPTY_LIST;", "originalCommit": "f81254c8d91022638841bf7dc5f89aa952f5c2ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cd81009efccbc4815284a9ff8f321cd2436b47ab", "chunk": "diff --git a/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/UserConfigurationCompareTest.java b/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/UserConfigurationCompareTest.java\nindex d2a9e75b..d8c90161 100644\n--- a/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/UserConfigurationCompareTest.java\n+++ b/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/UserConfigurationCompareTest.java\n\n@@ -29,7 +29,7 @@ import static org.junit.Assert.assertTrue;\n public class UserConfigurationCompareTest {\n \n     @Test\n-    public void TestConfigEqualWhenEqual() {\n+    public void testConfigEqualWhenEqual() {\n         //Given\n         Object entity1 = \"Hello\";\n         Object entity2 = \"Hello\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY2MzA0NQ==", "url": "https://github.com/eclipse/jkube/pull/289#discussion_r453663045", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Object entity2 = Collections.EMPTY_SET;\n          \n          \n            \n                    Object entity2 = Collections.emptySet()", "author": "rohanKanojia", "createdAt": "2020-07-13T13:49:02Z", "path": "jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/UserConfigurationCompareTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2019 Red Hat, Inc.\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at:\n+ *\n+ *     https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Red Hat, Inc. - initial API and implementation\n+ */\n+package org.eclipse.jkube.kit.common.util;\n+\n+import io.fabric8.kubernetes.api.model.KubernetesListBuilder;\n+import io.fabric8.kubernetes.api.model.ObjectMetaBuilder;\n+import io.fabric8.kubernetes.api.model.apps.DeploymentBuilder;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class UserConfigurationCompareTest {\n+\n+    @Test\n+    public void TestConfigEqualWhenEqual() {\n+        //Given\n+        Object entity1 = \"Hello\";\n+        Object entity2 = \"Hello\";\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenEitherNull() {\n+        //Given\n+        Object entity1 = null;\n+        Object entity2 = \"new\";\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertFalse(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenMapAndEqual() {\n+        //Given\n+        Map<String, String> entity1 = new HashMap();\n+        Map<String, String> entity2 = new HashMap();\n+        entity1.put(\"item1\", \"code\");\n+        entity2.put(\"item1\", \"code\");\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+    @Test\n+    public void TestConfigEqualWhenMapAndNotEqual() {\n+        //Given\n+        Map<String, String> entity1 = new HashMap();\n+        Map<String, String> entity2 = new HashMap();\n+        entity1.put(\"item\", \"code\");\n+        entity2.put(\"item1\", \"code\");\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertFalse(result);\n+    }\n+\n+\n+    @Test\n+    public void TestConfigEqualWhenObjectMetaIsTrue() {\n+        //Given\n+        Object entity1 = new ObjectMetaBuilder().withName(\"test1\").withAnnotations(Collections.singletonMap(\"foo\", \"bar\")).build();\n+        Object entity2 = new ObjectMetaBuilder().withName(\"test1\").withAnnotations(Collections.singletonMap(\"foo\",\"bar\")).build();\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenCollectionWhenFalse(){\n+        //Given\n+        ArrayList<String> anandList = new ArrayList<>();\n+        Object entity1 = Collections.singletonList(anandList);\n+        Object entity2 = Collections.EMPTY_LIST;\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1,entity2);\n+        //Then\n+        assertFalse(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenCollectionWhenTrue(){\n+        //Given\n+        Object entity1 = Collections.EMPTY_LIST;\n+        Object entity2 = Collections.EMPTY_SET;", "originalCommit": "f81254c8d91022638841bf7dc5f89aa952f5c2ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cd81009efccbc4815284a9ff8f321cd2436b47ab", "chunk": "diff --git a/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/UserConfigurationCompareTest.java b/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/UserConfigurationCompareTest.java\nindex d2a9e75b..d8c90161 100644\n--- a/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/UserConfigurationCompareTest.java\n+++ b/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/UserConfigurationCompareTest.java\n\n@@ -29,7 +29,7 @@ import static org.junit.Assert.assertTrue;\n public class UserConfigurationCompareTest {\n \n     @Test\n-    public void TestConfigEqualWhenEqual() {\n+    public void testConfigEqualWhenEqual() {\n         //Given\n         Object entity1 = \"Hello\";\n         Object entity2 = \"Hello\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY2MzM1MQ==", "url": "https://github.com/eclipse/jkube/pull/289#discussion_r453663351", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Object entity1 = Collections.EMPTY_LIST;\n          \n          \n            \n                    Object entity1 = Collections.emptyList();", "author": "rohanKanojia", "createdAt": "2020-07-13T13:49:27Z", "path": "jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/UserConfigurationCompareTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2019 Red Hat, Inc.\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at:\n+ *\n+ *     https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Red Hat, Inc. - initial API and implementation\n+ */\n+package org.eclipse.jkube.kit.common.util;\n+\n+import io.fabric8.kubernetes.api.model.KubernetesListBuilder;\n+import io.fabric8.kubernetes.api.model.ObjectMetaBuilder;\n+import io.fabric8.kubernetes.api.model.apps.DeploymentBuilder;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class UserConfigurationCompareTest {\n+\n+    @Test\n+    public void TestConfigEqualWhenEqual() {\n+        //Given\n+        Object entity1 = \"Hello\";\n+        Object entity2 = \"Hello\";\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenEitherNull() {\n+        //Given\n+        Object entity1 = null;\n+        Object entity2 = \"new\";\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertFalse(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenMapAndEqual() {\n+        //Given\n+        Map<String, String> entity1 = new HashMap();\n+        Map<String, String> entity2 = new HashMap();\n+        entity1.put(\"item1\", \"code\");\n+        entity2.put(\"item1\", \"code\");\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+    @Test\n+    public void TestConfigEqualWhenMapAndNotEqual() {\n+        //Given\n+        Map<String, String> entity1 = new HashMap();\n+        Map<String, String> entity2 = new HashMap();\n+        entity1.put(\"item\", \"code\");\n+        entity2.put(\"item1\", \"code\");\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertFalse(result);\n+    }\n+\n+\n+    @Test\n+    public void TestConfigEqualWhenObjectMetaIsTrue() {\n+        //Given\n+        Object entity1 = new ObjectMetaBuilder().withName(\"test1\").withAnnotations(Collections.singletonMap(\"foo\", \"bar\")).build();\n+        Object entity2 = new ObjectMetaBuilder().withName(\"test1\").withAnnotations(Collections.singletonMap(\"foo\",\"bar\")).build();\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenCollectionWhenFalse(){\n+        //Given\n+        ArrayList<String> anandList = new ArrayList<>();\n+        Object entity1 = Collections.singletonList(anandList);\n+        Object entity2 = Collections.EMPTY_LIST;\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1,entity2);\n+        //Then\n+        assertFalse(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenCollectionWhenTrue(){\n+        //Given\n+        Object entity1 = Collections.EMPTY_LIST;", "originalCommit": "f81254c8d91022638841bf7dc5f89aa952f5c2ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cd81009efccbc4815284a9ff8f321cd2436b47ab", "chunk": "diff --git a/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/UserConfigurationCompareTest.java b/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/UserConfigurationCompareTest.java\nindex d2a9e75b..d8c90161 100644\n--- a/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/UserConfigurationCompareTest.java\n+++ b/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/UserConfigurationCompareTest.java\n\n@@ -29,7 +29,7 @@ import static org.junit.Assert.assertTrue;\n public class UserConfigurationCompareTest {\n \n     @Test\n-    public void TestConfigEqualWhenEqual() {\n+    public void testConfigEqualWhenEqual() {\n         //Given\n         Object entity1 = \"Hello\";\n         Object entity2 = \"Hello\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY2Mzk3MQ==", "url": "https://github.com/eclipse/jkube/pull/289#discussion_r453663971", "bodyText": "nit, here test name is TestConfigEqual but you're comparing two non-equal entities. Is this okay?", "author": "rohanKanojia", "createdAt": "2020-07-13T13:50:16Z", "path": "jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/UserConfigurationCompareTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2019 Red Hat, Inc.\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at:\n+ *\n+ *     https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Red Hat, Inc. - initial API and implementation\n+ */\n+package org.eclipse.jkube.kit.common.util;\n+\n+import io.fabric8.kubernetes.api.model.KubernetesListBuilder;\n+import io.fabric8.kubernetes.api.model.ObjectMetaBuilder;\n+import io.fabric8.kubernetes.api.model.apps.DeploymentBuilder;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class UserConfigurationCompareTest {\n+\n+    @Test\n+    public void TestConfigEqualWhenEqual() {\n+        //Given\n+        Object entity1 = \"Hello\";\n+        Object entity2 = \"Hello\";\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenEitherNull() {\n+        //Given\n+        Object entity1 = null;\n+        Object entity2 = \"new\";\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertFalse(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenMapAndEqual() {\n+        //Given\n+        Map<String, String> entity1 = new HashMap();\n+        Map<String, String> entity2 = new HashMap();\n+        entity1.put(\"item1\", \"code\");\n+        entity2.put(\"item1\", \"code\");\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+    @Test\n+    public void TestConfigEqualWhenMapAndNotEqual() {\n+        //Given\n+        Map<String, String> entity1 = new HashMap();\n+        Map<String, String> entity2 = new HashMap();\n+        entity1.put(\"item\", \"code\");\n+        entity2.put(\"item1\", \"code\");\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertFalse(result);\n+    }\n+\n+\n+    @Test\n+    public void TestConfigEqualWhenObjectMetaIsTrue() {\n+        //Given\n+        Object entity1 = new ObjectMetaBuilder().withName(\"test1\").withAnnotations(Collections.singletonMap(\"foo\", \"bar\")).build();\n+        Object entity2 = new ObjectMetaBuilder().withName(\"test1\").withAnnotations(Collections.singletonMap(\"foo\",\"bar\")).build();\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenCollectionWhenFalse(){\n+        //Given\n+        ArrayList<String> anandList = new ArrayList<>();\n+        Object entity1 = Collections.singletonList(anandList);\n+        Object entity2 = Collections.EMPTY_LIST;\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1,entity2);\n+        //Then\n+        assertFalse(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenCollectionWhenTrue(){\n+        //Given\n+        Object entity1 = Collections.EMPTY_LIST;\n+        Object entity2 = Collections.EMPTY_SET;\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1,entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+\n+\n+    @Test\n+    public void TestConfigEqual() {", "originalCommit": "f81254c8d91022638841bf7dc5f89aa952f5c2ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDc5NjI5Ng==", "url": "https://github.com/eclipse/jkube/pull/289#discussion_r454796296", "bodyText": "Also remember this is not Go, methods never start with capital/uppercase letters since it will confuse readers of your code who will understand you are referencing a class wherever you call that method (this is not so bad for a test case method, but we should try to adhere to conventions).", "author": "manusa", "createdAt": "2020-07-15T05:13:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY2Mzk3MQ=="}], "type": "inlineReview", "revised_code": {"commit": "cd81009efccbc4815284a9ff8f321cd2436b47ab", "chunk": "diff --git a/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/UserConfigurationCompareTest.java b/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/UserConfigurationCompareTest.java\nindex d2a9e75b..d8c90161 100644\n--- a/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/UserConfigurationCompareTest.java\n+++ b/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/UserConfigurationCompareTest.java\n\n@@ -29,7 +29,7 @@ import static org.junit.Assert.assertTrue;\n public class UserConfigurationCompareTest {\n \n     @Test\n-    public void TestConfigEqualWhenEqual() {\n+    public void testConfigEqualWhenEqual() {\n         //Given\n         Object entity1 = \"Hello\";\n         Object entity2 = \"Hello\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY2NzEzNw==", "url": "https://github.com/eclipse/jkube/pull/289#discussion_r453667137", "bodyText": "In my opinion it's not a good idea do create an object of UserConfigurationCompare . You should use some actual Kubernetes Objects using builders like this:\n    Deployment deployment1 = new DeploymentBuilder().withNewMetadata()\n      .withName(\"deployment1\")\n      .addToLabels(\"key1\", \"value1\")\n      .withResourceVersion(\"1\")\n      .withGeneration(1L)\n      .endMetadata()\n      .withNewSpec()\n      .withNewSelector()\n      .addToMatchLabels(\"key1\", \"value1\")\n      .endSelector()\n      .withReplicas(0)\n      .endSpec()\n      .withNewStatus()\n      .withReplicas(1)\n      .withObservedGeneration(1L)\n      .endStatus()\n      .build();\n    Deployment deployment1 = new DeploymentBuilder().withNewMetadata()\n      .withName(\"deployment1\")\n      .addToLabels(Collections.singletonMap(\"key1\", \"value1\"))\n      .withResourceVersion(\"1\")\n      .withGeneration(1L)\n      .endMetadata()\n      .withNewSpec()\n      .withNewSelector()\n      .addToMatchLabels(\"key1\", \"value1\")\n      .endSelector()\n      .withReplicas(0)\n      .endSpec()\n      .withNewStatus()\n      .withReplicas(1)\n      .withObservedGeneration(1L)\n      .endStatus()\n      .build();\n     // When\n     boolean result = UserConfigurationCompare.configEqual(deployment1, deployment2);\n     // Then\n     assertFalse(result);", "author": "rohanKanojia", "createdAt": "2020-07-13T13:54:45Z", "path": "jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/UserConfigurationCompareTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2019 Red Hat, Inc.\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at:\n+ *\n+ *     https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Red Hat, Inc. - initial API and implementation\n+ */\n+package org.eclipse.jkube.kit.common.util;\n+\n+import io.fabric8.kubernetes.api.model.KubernetesListBuilder;\n+import io.fabric8.kubernetes.api.model.ObjectMetaBuilder;\n+import io.fabric8.kubernetes.api.model.apps.DeploymentBuilder;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class UserConfigurationCompareTest {\n+\n+    @Test\n+    public void TestConfigEqualWhenEqual() {\n+        //Given\n+        Object entity1 = \"Hello\";\n+        Object entity2 = \"Hello\";\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenEitherNull() {\n+        //Given\n+        Object entity1 = null;\n+        Object entity2 = \"new\";\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertFalse(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenMapAndEqual() {\n+        //Given\n+        Map<String, String> entity1 = new HashMap();\n+        Map<String, String> entity2 = new HashMap();\n+        entity1.put(\"item1\", \"code\");\n+        entity2.put(\"item1\", \"code\");\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+    @Test\n+    public void TestConfigEqualWhenMapAndNotEqual() {\n+        //Given\n+        Map<String, String> entity1 = new HashMap();\n+        Map<String, String> entity2 = new HashMap();\n+        entity1.put(\"item\", \"code\");\n+        entity2.put(\"item1\", \"code\");\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertFalse(result);\n+    }\n+\n+\n+    @Test\n+    public void TestConfigEqualWhenObjectMetaIsTrue() {\n+        //Given\n+        Object entity1 = new ObjectMetaBuilder().withName(\"test1\").withAnnotations(Collections.singletonMap(\"foo\", \"bar\")).build();\n+        Object entity2 = new ObjectMetaBuilder().withName(\"test1\").withAnnotations(Collections.singletonMap(\"foo\",\"bar\")).build();\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenCollectionWhenFalse(){\n+        //Given\n+        ArrayList<String> anandList = new ArrayList<>();\n+        Object entity1 = Collections.singletonList(anandList);\n+        Object entity2 = Collections.EMPTY_LIST;\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1,entity2);\n+        //Then\n+        assertFalse(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenCollectionWhenTrue(){\n+        //Given\n+        Object entity1 = Collections.EMPTY_LIST;\n+        Object entity2 = Collections.EMPTY_SET;\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1,entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+\n+\n+    @Test\n+    public void TestConfigEqual() {\n+        //Given\n+        Object entity1 = \"asda\";\n+        Object entity2 = \"asdasda\";\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertFalse(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenKDTO() {\n+        //Given\n+        Object entity1 = new UserConfigurationCompare();\n+        Object entity2 = new UserConfigurationCompare();\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+    @Test\n+    public void TestConfigEqualWhenNotKDTO() {\n+        //Given\n+        Object entity1 = new KubernetesListBuilder().addToItems(new DeploymentBuilder().build()); //\n+        Object entity2 = new KubernetesListBuilder().addToItems(new DeploymentBuilder().build()); //\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+    @Test\n+    public void TestConfigEqualWhenKDTOWithObj() {\n+        //Given\n+        Object entity1 = new UserConfigurationCompare();", "originalCommit": "f81254c8d91022638841bf7dc5f89aa952f5c2ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cd81009efccbc4815284a9ff8f321cd2436b47ab", "chunk": "diff --git a/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/UserConfigurationCompareTest.java b/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/UserConfigurationCompareTest.java\nindex d2a9e75b..d8c90161 100644\n--- a/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/UserConfigurationCompareTest.java\n+++ b/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/UserConfigurationCompareTest.java\n\n@@ -29,7 +29,7 @@ import static org.junit.Assert.assertTrue;\n public class UserConfigurationCompareTest {\n \n     @Test\n-    public void TestConfigEqualWhenEqual() {\n+    public void testConfigEqualWhenEqual() {\n         //Given\n         Object entity1 = \"Hello\";\n         Object entity2 = \"Hello\";\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY2ODI2Mg==", "url": "https://github.com/eclipse/jkube/pull/289#discussion_r453668262", "bodyText": "Use some Kubernetes object rather than using UserConfigurationCompare. Bdw, this class doesn't even have any member field. I'm not sure how your logic would be getting tested.", "author": "rohanKanojia", "createdAt": "2020-07-13T13:56:17Z", "path": "jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/UserConfigurationCompareTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * Copyright (c) 2019 Red Hat, Inc.\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at:\n+ *\n+ *     https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Red Hat, Inc. - initial API and implementation\n+ */\n+package org.eclipse.jkube.kit.common.util;\n+\n+import io.fabric8.kubernetes.api.model.KubernetesListBuilder;\n+import io.fabric8.kubernetes.api.model.ObjectMetaBuilder;\n+import io.fabric8.kubernetes.api.model.apps.DeploymentBuilder;\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class UserConfigurationCompareTest {\n+\n+    @Test\n+    public void TestConfigEqualWhenEqual() {\n+        //Given\n+        Object entity1 = \"Hello\";\n+        Object entity2 = \"Hello\";\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenEitherNull() {\n+        //Given\n+        Object entity1 = null;\n+        Object entity2 = \"new\";\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertFalse(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenMapAndEqual() {\n+        //Given\n+        Map<String, String> entity1 = new HashMap();\n+        Map<String, String> entity2 = new HashMap();\n+        entity1.put(\"item1\", \"code\");\n+        entity2.put(\"item1\", \"code\");\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+    @Test\n+    public void TestConfigEqualWhenMapAndNotEqual() {\n+        //Given\n+        Map<String, String> entity1 = new HashMap();\n+        Map<String, String> entity2 = new HashMap();\n+        entity1.put(\"item\", \"code\");\n+        entity2.put(\"item1\", \"code\");\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertFalse(result);\n+    }\n+\n+\n+    @Test\n+    public void TestConfigEqualWhenObjectMetaIsTrue() {\n+        //Given\n+        Object entity1 = new ObjectMetaBuilder().withName(\"test1\").withAnnotations(Collections.singletonMap(\"foo\", \"bar\")).build();\n+        Object entity2 = new ObjectMetaBuilder().withName(\"test1\").withAnnotations(Collections.singletonMap(\"foo\",\"bar\")).build();\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenCollectionWhenFalse(){\n+        //Given\n+        ArrayList<String> anandList = new ArrayList<>();\n+        Object entity1 = Collections.singletonList(anandList);\n+        Object entity2 = Collections.EMPTY_LIST;\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1,entity2);\n+        //Then\n+        assertFalse(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenCollectionWhenTrue(){\n+        //Given\n+        Object entity1 = Collections.EMPTY_LIST;\n+        Object entity2 = Collections.EMPTY_SET;\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1,entity2);\n+        //Then\n+        assertTrue(result);\n+    }\n+\n+\n+    @Test\n+    public void TestConfigEqual() {\n+        //Given\n+        Object entity1 = \"asda\";\n+        Object entity2 = \"asdasda\";\n+        //When\n+        boolean result = UserConfigurationCompare.configEqual(entity1, entity2);\n+        //Then\n+        assertFalse(result);\n+    }\n+\n+    @Test\n+    public void TestConfigEqualWhenKDTO() {\n+        //Given\n+        Object entity1 = new UserConfigurationCompare();\n+        Object entity2 = new UserConfigurationCompare();", "originalCommit": "f81254c8d91022638841bf7dc5f89aa952f5c2ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cd81009efccbc4815284a9ff8f321cd2436b47ab", "chunk": "diff --git a/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/UserConfigurationCompareTest.java b/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/UserConfigurationCompareTest.java\nindex d2a9e75b..d8c90161 100644\n--- a/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/UserConfigurationCompareTest.java\n+++ b/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/UserConfigurationCompareTest.java\n\n@@ -29,7 +29,7 @@ import static org.junit.Assert.assertTrue;\n public class UserConfigurationCompareTest {\n \n     @Test\n-    public void TestConfigEqualWhenEqual() {\n+    public void testConfigEqualWhenEqual() {\n         //Given\n         Object entity1 = \"Hello\";\n         Object entity2 = \"Hello\";\n"}}, {"oid": "cd81009efccbc4815284a9ff8f321cd2436b47ab", "url": "https://github.com/eclipse/jkube/commit/cd81009efccbc4815284a9ff8f321cd2436b47ab", "message": "Unit test added for UserConfiguration and ProjectClassLoader test\n\nSigned-off-by: anandrkskd <anandrkskd@gmail.com>", "committedDate": "2020-07-17T06:14:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI3MjQ3OQ==", "url": "https://github.com/eclipse/jkube/pull/289#discussion_r456272479", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            \n          \n          \n            \n                private ProjectClassLoaders before() throws  Exception {\n          \n          \n            \n                private URLClassLoader compileClassLoader;\n          \n          \n            \n            \n          \n          \n            \n                @Before\n          \n          \n            \n                private void setUp() throws Exception {\n          \n          \n            \n                  /* ... */\n          \n          \n            \n                  compileClassLoader = /* ... */;", "author": "manusa", "createdAt": "2020-07-17T07:38:28Z", "path": "jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/ProjectClassLoadersTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/**\n+ * Copyright (c) 2019 Red Hat, Inc.\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at:\n+ *\n+ *     https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Red Hat, Inc. - initial API and implementation\n+ */\n+package org.eclipse.jkube.kit.common.util;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import java.io.File;\n+import java.net.URLClassLoader;\n+import java.util.Arrays;\n+\n+import static org.junit.Assert.*;\n+\n+public class ProjectClassLoadersTest {\n+    @Rule\n+    public TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+\n+    private ProjectClassLoaders before() throws  Exception {", "originalCommit": "cd81009efccbc4815284a9ff8f321cd2436b47ab", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a63d4ee9c53532011f79708d8285c54739ebe82a", "chunk": "diff --git a/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/ProjectClassLoadersTest.java b/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/ProjectClassLoadersTest.java\nindex 9796e80d..7cef78d0 100644\n--- a/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/ProjectClassLoadersTest.java\n+++ b/jkube-kit/common/src/test/java/org/eclipse/jkube/kit/common/util/ProjectClassLoadersTest.java\n\n@@ -14,6 +14,7 @@\n package org.eclipse.jkube.kit.common.util;\n \n import org.apache.commons.io.FileUtils;\n+import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.TemporaryFolder;\n"}}, {"oid": "a63d4ee9c53532011f79708d8285c54739ebe82a", "url": "https://github.com/eclipse/jkube/commit/a63d4ee9c53532011f79708d8285c54739ebe82a", "message": "Unit test added for UserConfiguration and ProjectClassLoader test\n\nSigned-off-by: anandrkskd <anandrkskd@gmail.com>", "committedDate": "2020-07-20T05:27:41Z", "type": "commit"}, {"oid": "a63d4ee9c53532011f79708d8285c54739ebe82a", "url": "https://github.com/eclipse/jkube/commit/a63d4ee9c53532011f79708d8285c54739ebe82a", "message": "Unit test added for UserConfiguration and ProjectClassLoader test\n\nSigned-off-by: anandrkskd <anandrkskd@gmail.com>", "committedDate": "2020-07-20T05:27:41Z", "type": "forcePushed"}]}