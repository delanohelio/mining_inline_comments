{"pr_number": 212, "pr_title": "Fix #173: Use OpenShift compliant git/vcs annotations", "pr_createdAt": "2020-05-26T14:14:01Z", "pr_url": "https://github.com/eclipse/jkube/pull/212", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQxOTA5NA==", "url": "https://github.com/eclipse/jkube/pull/212#discussion_r432419094", "bodyText": "It would be better if the function was pure and instead of creating side effects in the input annotations variable you returned a new Map with the annotations. This map can then be appended (if applicable) to the existing variable using putAll.", "author": "manusa", "createdAt": "2020-05-29T11:20:19Z", "path": "jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/GitEnricher.java", "diffHunk": "@@ -101,58 +81,80 @@ public void create(PlatformMode platformMode, KubernetesListBuilder builder) {\n         builder.accept(new TypedVisitor<ServiceBuilder>() {\n             @Override\n             public void visit(ServiceBuilder serviceBuilder) {\n-                serviceBuilder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                serviceBuilder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<DeploymentBuilder>() {\n             @Override\n             public void visit(DeploymentBuilder builder) {\n-                builder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<DeploymentConfigBuilder>() {\n             @Override\n             public void visit(DeploymentConfigBuilder builder) {\n-                builder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<ReplicaSetBuilder>() {\n             @Override\n             public void visit(ReplicaSetBuilder builder) {\n-                builder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<ReplicationControllerBuilder>() {\n             @Override\n             public void visit(ReplicationControllerBuilder builder) {\n-                builder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<DaemonSetBuilder>() {\n             @Override\n             public void visit(DaemonSetBuilder builder) {\n-                builder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<StatefulSetBuilder>() {\n             @Override\n             public void visit(StatefulSetBuilder builder) {\n-                builder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<JobBuilder>() {\n             @Override\n             public void visit(JobBuilder builder) {\n-                builder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n     }\n+\n+    protected void addAnnotations(PlatformMode platformMode, Map<String, String> annotations, String gitRemoteUrl, String branch, String commitId) {", "originalCommit": "e85a88be2c79b06a4fc59f9dbdf19d3ef3baa407", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "dad32d51ff10093445dc316f48861aa4e1dc1028", "chunk": "diff --git a/jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/GitEnricher.java b/jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/GitEnricher.java\nindex 5349e28d..f4dcd9f6 100644\n--- a/jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/GitEnricher.java\n+++ b/jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/GitEnricher.java\n\n@@ -135,20 +135,24 @@ public class GitEnricher extends BaseEnricher {\n         });\n     }\n \n-    protected void addAnnotations(PlatformMode platformMode, Map<String, String> annotations, String gitRemoteUrl, String branch, String commitId) {\n-        addAnnotation(annotations, JKubeAnnotations.GIT_BRANCH.value(), branch);\n-        addAnnotation(annotations, JKubeAnnotations.GIT_COMMIT.value(), commitId);\n-        addAnnotation(annotations, JKubeAnnotations.GIT_URL.value(), gitRemoteUrl);\n+    protected static Map<String, String> addAnnotations(PlatformMode platformMode, String gitRemoteUrl, String branch, String commitId) {\n+        Map<String, String> annotationsToBeAdded = new HashMap<>();\n+        annotationsToBeAdded.putAll(addAnnotation(JKubeAnnotations.GIT_BRANCH.value(), branch));\n+        annotationsToBeAdded.putAll(addAnnotation(JKubeAnnotations.GIT_COMMIT.value(), commitId));\n+        annotationsToBeAdded.putAll(addAnnotation(JKubeAnnotations.GIT_URL.value(), gitRemoteUrl));\n         if (platformMode.equals(PlatformMode.openshift)) {\n-            addAnnotation(annotations, OpenShiftAnnotations.VCS_URI.value(), gitRemoteUrl);\n-            addAnnotation(annotations, OpenShiftAnnotations.VCS_REF.value(), branch);\n+            annotationsToBeAdded.putAll(addAnnotation(OpenShiftAnnotations.VCS_URI.value(), gitRemoteUrl));\n+            annotationsToBeAdded.putAll(addAnnotation(OpenShiftAnnotations.VCS_REF.value(), branch));\n         }\n+        return annotationsToBeAdded;\n     }\n \n-    private void addAnnotation(Map<String, String> annotation, String key, String value) {\n-        if (annotation != null && value != null && key != null) {\n-            annotation.put(key, value);\n+    private static Map<String, String> addAnnotation(String key, String value) {\n+        Map<String, String> newAnnotation = new HashMap<>();\n+        if (value != null && key != null) {\n+            newAnnotation.put(key, value);\n         }\n+        return newAnnotation;\n     }\n \n     private String getGitRemoteUrl(Repository repository) {\n"}}, {"oid": "dad32d51ff10093445dc316f48861aa4e1dc1028", "url": "https://github.com/eclipse/jkube/commit/dad32d51ff10093445dc316f48861aa4e1dc1028", "message": "Fix #173: Use OpenShift compliant git/vcs annotations", "committedDate": "2020-06-01T06:38:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA2OTEyMg==", "url": "https://github.com/eclipse/jkube/pull/212#discussion_r433069122", "bodyText": "nit: this method is not adding any annotations but generating/inferring them. Method should be named something like getAnnotations generateAnnotations inferAnnotations or sth like that.", "author": "manusa", "createdAt": "2020-06-01T06:49:50Z", "path": "jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/GitEnricher.java", "diffHunk": "@@ -101,58 +81,84 @@ public void create(PlatformMode platformMode, KubernetesListBuilder builder) {\n         builder.accept(new TypedVisitor<ServiceBuilder>() {\n             @Override\n             public void visit(ServiceBuilder serviceBuilder) {\n-                serviceBuilder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                serviceBuilder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<DeploymentBuilder>() {\n             @Override\n             public void visit(DeploymentBuilder builder) {\n-                builder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<DeploymentConfigBuilder>() {\n             @Override\n             public void visit(DeploymentConfigBuilder builder) {\n-                builder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<ReplicaSetBuilder>() {\n             @Override\n             public void visit(ReplicaSetBuilder builder) {\n-                builder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<ReplicationControllerBuilder>() {\n             @Override\n             public void visit(ReplicationControllerBuilder builder) {\n-                builder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<DaemonSetBuilder>() {\n             @Override\n             public void visit(DaemonSetBuilder builder) {\n-                builder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<StatefulSetBuilder>() {\n             @Override\n             public void visit(StatefulSetBuilder builder) {\n-                builder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<JobBuilder>() {\n             @Override\n             public void visit(JobBuilder builder) {\n-                builder.editMetadata().addToAnnotations(getAnnotations()).endMetadata();\n+                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n             }\n         });\n     }\n+\n+    protected static Map<String, String> addAnnotations(PlatformMode platformMode, String gitRemoteUrl, String branch, String commitId) {", "originalCommit": "dad32d51ff10093445dc316f48861aa4e1dc1028", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b45ce1772898dd0193ef0d2a0c8e893aeb909325", "chunk": "diff --git a/jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/GitEnricher.java b/jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/GitEnricher.java\nindex f4dcd9f6..98808647 100644\n--- a/jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/GitEnricher.java\n+++ b/jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/GitEnricher.java\n\n@@ -81,61 +81,61 @@ public class GitEnricher extends BaseEnricher {\n         builder.accept(new TypedVisitor<ServiceBuilder>() {\n             @Override\n             public void visit(ServiceBuilder serviceBuilder) {\n-                serviceBuilder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n+                serviceBuilder.editMetadata().addToAnnotations(getAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<DeploymentBuilder>() {\n             @Override\n             public void visit(DeploymentBuilder builder) {\n-                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n+                builder.editMetadata().addToAnnotations(getAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<DeploymentConfigBuilder>() {\n             @Override\n             public void visit(DeploymentConfigBuilder builder) {\n-                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n+                builder.editMetadata().addToAnnotations(getAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<ReplicaSetBuilder>() {\n             @Override\n             public void visit(ReplicaSetBuilder builder) {\n-                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n+                builder.editMetadata().addToAnnotations(getAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<ReplicationControllerBuilder>() {\n             @Override\n             public void visit(ReplicationControllerBuilder builder) {\n-                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n+                builder.editMetadata().addToAnnotations(getAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<DaemonSetBuilder>() {\n             @Override\n             public void visit(DaemonSetBuilder builder) {\n-                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n+                builder.editMetadata().addToAnnotations(getAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<StatefulSetBuilder>() {\n             @Override\n             public void visit(StatefulSetBuilder builder) {\n-                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n+                builder.editMetadata().addToAnnotations(getAnnotations(platformMode)).endMetadata();\n             }\n         });\n \n         builder.accept(new TypedVisitor<JobBuilder>() {\n             @Override\n             public void visit(JobBuilder builder) {\n-                builder.editMetadata().addToAnnotations(addAnnotations(platformMode)).endMetadata();\n+                builder.editMetadata().addToAnnotations(getAnnotations(platformMode)).endMetadata();\n             }\n         });\n     }\n \n-    protected static Map<String, String> addAnnotations(PlatformMode platformMode, String gitRemoteUrl, String branch, String commitId) {\n+    protected static Map<String, String> getAnnotations(PlatformMode platformMode, String gitRemoteUrl, String branch, String commitId) {\n         Map<String, String> annotationsToBeAdded = new HashMap<>();\n         annotationsToBeAdded.putAll(addAnnotation(JKubeAnnotations.GIT_BRANCH.value(), branch));\n         annotationsToBeAdded.putAll(addAnnotation(JKubeAnnotations.GIT_COMMIT.value(), commitId));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzA2OTc2OQ==", "url": "https://github.com/eclipse/jkube/pull/212#discussion_r433069769", "bodyText": "Some corner or edge cases should be tested: null method parameter values, etc.", "author": "manusa", "createdAt": "2020-06-01T06:52:01Z", "path": "jkube-kit/enricher/generic/src/test/java/org/eclipse/jkube/enricher/generic/GitEnricherTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * Copyright (c) 2019 Red Hat, Inc.\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at:\n+ *\n+ *     https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Red Hat, Inc. - initial API and implementation\n+ */\n+package org.eclipse.jkube.enricher.generic;\n+\n+import org.eclipse.jkube.kit.config.resource.JKubeAnnotations;\n+import org.eclipse.jkube.kit.config.resource.OpenShiftAnnotations;\n+import org.eclipse.jkube.kit.config.resource.PlatformMode;\n+import org.junit.Test;\n+\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class GitEnricherTest {", "originalCommit": "dad32d51ff10093445dc316f48861aa4e1dc1028", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b45ce1772898dd0193ef0d2a0c8e893aeb909325", "chunk": "diff --git a/jkube-kit/enricher/generic/src/test/java/org/eclipse/jkube/enricher/generic/GitEnricherTest.java b/jkube-kit/enricher/generic/src/test/java/org/eclipse/jkube/enricher/generic/GitEnricherTest.java\nindex 9a44f17f..df9ad9a8 100644\n--- a/jkube-kit/enricher/generic/src/test/java/org/eclipse/jkube/enricher/generic/GitEnricherTest.java\n+++ b/jkube-kit/enricher/generic/src/test/java/org/eclipse/jkube/enricher/generic/GitEnricherTest.java\n\n@@ -21,6 +21,7 @@ import org.junit.Test;\n import java.util.Map;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n \n public class GitEnricherTest {\n \n"}}, {"oid": "b45ce1772898dd0193ef0d2a0c8e893aeb909325", "url": "https://github.com/eclipse/jkube/commit/b45ce1772898dd0193ef0d2a0c8e893aeb909325", "message": "Fix #173: Use OpenShift compliant git/vcs annotations", "committedDate": "2020-06-01T07:45:00Z", "type": "commit"}, {"oid": "b45ce1772898dd0193ef0d2a0c8e893aeb909325", "url": "https://github.com/eclipse/jkube/commit/b45ce1772898dd0193ef0d2a0c8e893aeb909325", "message": "Fix #173: Use OpenShift compliant git/vcs annotations", "committedDate": "2020-06-01T07:45:00Z", "type": "forcePushed"}]}