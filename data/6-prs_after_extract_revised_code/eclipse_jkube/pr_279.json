{"pr_number": 279, "pr_title": "Fix #267: openshift-maven-plugin does not update Routes", "pr_createdAt": "2020-07-06T03:36:12Z", "pr_url": "https://github.com/eclipse/jkube/pull/279", "timeline": [{"oid": "578e1a17e0f592e62696173fdc111c8444f9b280", "url": "https://github.com/eclipse/jkube/commit/578e1a17e0f592e62696173fdc111c8444f9b280", "message": "Fix #267: openshift-maven-plugin does not update Routes\n\nSigned-off-by: Marcos Trejo <marcos.trejo@gmail.com>", "committedDate": "2020-07-05T09:45:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI5OTQ2Mw==", "url": "https://github.com/eclipse/jkube/pull/279#discussion_r451299463", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .andReply(collector.record(\"get-route\").andReturn(404, \"\"))\n          \n          \n            \n                            .andReply(collector.record(\"get-route\").andReturn(HttpURLConnection.HTTP_NOT_FOUND, \"\"))", "author": "rohanKanojia", "createdAt": "2020-07-08T05:54:13Z", "path": "jkube-kit/config/service/src/test/java/org/eclipse/jkube/kit/config/service/ApplyServiceTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package org.eclipse.jkube.kit.config.service;\n+\n+import io.fabric8.openshift.api.model.Route;\n+import io.fabric8.openshift.api.model.RouteBuilder;\n+import io.fabric8.openshift.client.server.mock.OpenShiftMockServer;\n+import mockit.Mocked;\n+import org.eclipse.jkube.kit.common.KitLogger;\n+import org.eclipse.jkube.kit.config.service.openshift.WebServerEventCollector;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class ApplyServiceTest {\n+\n+    @Mocked\n+    private KitLogger log;\n+\n+    private OpenShiftMockServer mockServer = new OpenShiftMockServer(false);\n+\n+    private ApplyService applyService;\n+\n+    @Before\n+    public void setUp() {\n+        applyService = new ApplyService(mockServer.createOpenShiftClient(), log);\n+    }\n+\n+    @Test\n+    public void testCreateRoute() throws Exception {\n+        Route route = buildRoute();\n+\n+        WebServerEventCollector<OpenShiftMockServer> collector = new WebServerEventCollector<>(mockServer);\n+        mockServer.expect().get()\n+                .withPath(\"/apis/route.openshift.io/v1/namespaces/default/routes/route\")\n+                .andReply(collector.record(\"get-route\").andReturn(404, \"\"))", "originalCommit": "578e1a17e0f592e62696173fdc111c8444f9b280", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU4MTQ1MQ==", "url": "https://github.com/eclipse/jkube/pull/279#discussion_r452581451", "bodyText": "Updated", "author": "mtrejo", "createdAt": "2020-07-10T01:56:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI5OTQ2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "3c2bb1e14c804950fbb68d069ba1df1aaab867e8", "chunk": "diff --git a/jkube-kit/config/service/src/test/java/org/eclipse/jkube/kit/config/service/ApplyServiceTest.java b/jkube-kit/config/service/src/test/java/org/eclipse/jkube/kit/config/service/ApplyServiceTest.java\nindex 9c420d3e..262f362b 100644\n--- a/jkube-kit/config/service/src/test/java/org/eclipse/jkube/kit/config/service/ApplyServiceTest.java\n+++ b/jkube-kit/config/service/src/test/java/org/eclipse/jkube/kit/config/service/ApplyServiceTest.java\n\n@@ -1,3 +1,17 @@\n+/**\n+ * Copyright (c) 2019 Red Hat, Inc.\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at:\n+ *\n+ *     https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Red Hat, Inc. - initial API and implementation\n+ */\n+\n package org.eclipse.jkube.kit.config.service;\n \n import io.fabric8.openshift.api.model.Route;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI5OTU4NA==", "url": "https://github.com/eclipse/jkube/pull/279#discussion_r451299584", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .andReply(collector.record(\"new-route\").andReturn(201, route))\n          \n          \n            \n                            .andReply(collector.record(\"new-route\").andReturn(HttpURLConnection.HTTP_CREATED, route))", "author": "rohanKanojia", "createdAt": "2020-07-08T05:54:35Z", "path": "jkube-kit/config/service/src/test/java/org/eclipse/jkube/kit/config/service/ApplyServiceTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package org.eclipse.jkube.kit.config.service;\n+\n+import io.fabric8.openshift.api.model.Route;\n+import io.fabric8.openshift.api.model.RouteBuilder;\n+import io.fabric8.openshift.client.server.mock.OpenShiftMockServer;\n+import mockit.Mocked;\n+import org.eclipse.jkube.kit.common.KitLogger;\n+import org.eclipse.jkube.kit.config.service.openshift.WebServerEventCollector;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class ApplyServiceTest {\n+\n+    @Mocked\n+    private KitLogger log;\n+\n+    private OpenShiftMockServer mockServer = new OpenShiftMockServer(false);\n+\n+    private ApplyService applyService;\n+\n+    @Before\n+    public void setUp() {\n+        applyService = new ApplyService(mockServer.createOpenShiftClient(), log);\n+    }\n+\n+    @Test\n+    public void testCreateRoute() throws Exception {\n+        Route route = buildRoute();\n+\n+        WebServerEventCollector<OpenShiftMockServer> collector = new WebServerEventCollector<>(mockServer);\n+        mockServer.expect().get()\n+                .withPath(\"/apis/route.openshift.io/v1/namespaces/default/routes/route\")\n+                .andReply(collector.record(\"get-route\").andReturn(404, \"\"))\n+                .always();\n+        mockServer.expect().post()\n+                .withPath(\"/apis/route.openshift.io/v1/namespaces/default/routes\")\n+                .andReply(collector.record(\"new-route\").andReturn(201, route))", "originalCommit": "578e1a17e0f592e62696173fdc111c8444f9b280", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU4MTU5Mw==", "url": "https://github.com/eclipse/jkube/pull/279#discussion_r452581593", "bodyText": "Updated", "author": "mtrejo", "createdAt": "2020-07-10T01:57:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI5OTU4NA=="}], "type": "inlineReview", "revised_code": {"commit": "3c2bb1e14c804950fbb68d069ba1df1aaab867e8", "chunk": "diff --git a/jkube-kit/config/service/src/test/java/org/eclipse/jkube/kit/config/service/ApplyServiceTest.java b/jkube-kit/config/service/src/test/java/org/eclipse/jkube/kit/config/service/ApplyServiceTest.java\nindex 9c420d3e..262f362b 100644\n--- a/jkube-kit/config/service/src/test/java/org/eclipse/jkube/kit/config/service/ApplyServiceTest.java\n+++ b/jkube-kit/config/service/src/test/java/org/eclipse/jkube/kit/config/service/ApplyServiceTest.java\n\n@@ -1,3 +1,17 @@\n+/**\n+ * Copyright (c) 2019 Red Hat, Inc.\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at:\n+ *\n+ *     https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Red Hat, Inc. - initial API and implementation\n+ */\n+\n package org.eclipse.jkube.kit.config.service;\n \n import io.fabric8.openshift.api.model.Route;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI5OTc2Mg==", "url": "https://github.com/eclipse/jkube/pull/279#discussion_r451299762", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .andReply(collector.record(\"get-route\").andReturn(404, \"\"))\n          \n          \n            \n                            .andReply(collector.record(\"get-route\").andReturn(HttpURLConnection.HTTP_NOT_FOUND, \"\"))", "author": "rohanKanojia", "createdAt": "2020-07-08T05:55:06Z", "path": "jkube-kit/config/service/src/test/java/org/eclipse/jkube/kit/config/service/ApplyServiceTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package org.eclipse.jkube.kit.config.service;\n+\n+import io.fabric8.openshift.api.model.Route;\n+import io.fabric8.openshift.api.model.RouteBuilder;\n+import io.fabric8.openshift.client.server.mock.OpenShiftMockServer;\n+import mockit.Mocked;\n+import org.eclipse.jkube.kit.common.KitLogger;\n+import org.eclipse.jkube.kit.config.service.openshift.WebServerEventCollector;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class ApplyServiceTest {\n+\n+    @Mocked\n+    private KitLogger log;\n+\n+    private OpenShiftMockServer mockServer = new OpenShiftMockServer(false);\n+\n+    private ApplyService applyService;\n+\n+    @Before\n+    public void setUp() {\n+        applyService = new ApplyService(mockServer.createOpenShiftClient(), log);\n+    }\n+\n+    @Test\n+    public void testCreateRoute() throws Exception {\n+        Route route = buildRoute();\n+\n+        WebServerEventCollector<OpenShiftMockServer> collector = new WebServerEventCollector<>(mockServer);\n+        mockServer.expect().get()\n+                .withPath(\"/apis/route.openshift.io/v1/namespaces/default/routes/route\")\n+                .andReply(collector.record(\"get-route\").andReturn(404, \"\"))\n+                .always();\n+        mockServer.expect().post()\n+                .withPath(\"/apis/route.openshift.io/v1/namespaces/default/routes\")\n+                .andReply(collector.record(\"new-route\").andReturn(201, route))\n+                .once();\n+\n+        applyService.apply(route, \"route.yml\");\n+\n+        collector.assertEventsRecordedInOrder(\"get-route\", \"new-route\");\n+    }\n+\n+    @Test\n+    public void testCreateRouteInServiceOnlyMode() throws Exception {\n+        Route route = buildRoute();\n+\n+        WebServerEventCollector<OpenShiftMockServer> collector = new WebServerEventCollector<>(mockServer);\n+        mockServer.expect().get()\n+                .withPath(\"/apis/route.openshift.io/v1/namespaces/default/routes/route\")\n+                .andReply(collector.record(\"get-route\").andReturn(404, \"\"))", "originalCommit": "578e1a17e0f592e62696173fdc111c8444f9b280", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU4MTcyMg==", "url": "https://github.com/eclipse/jkube/pull/279#discussion_r452581722", "bodyText": "Updated", "author": "mtrejo", "createdAt": "2020-07-10T01:58:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI5OTc2Mg=="}], "type": "inlineReview", "revised_code": {"commit": "3c2bb1e14c804950fbb68d069ba1df1aaab867e8", "chunk": "diff --git a/jkube-kit/config/service/src/test/java/org/eclipse/jkube/kit/config/service/ApplyServiceTest.java b/jkube-kit/config/service/src/test/java/org/eclipse/jkube/kit/config/service/ApplyServiceTest.java\nindex 9c420d3e..262f362b 100644\n--- a/jkube-kit/config/service/src/test/java/org/eclipse/jkube/kit/config/service/ApplyServiceTest.java\n+++ b/jkube-kit/config/service/src/test/java/org/eclipse/jkube/kit/config/service/ApplyServiceTest.java\n\n@@ -1,3 +1,17 @@\n+/**\n+ * Copyright (c) 2019 Red Hat, Inc.\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at:\n+ *\n+ *     https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Red Hat, Inc. - initial API and implementation\n+ */\n+\n package org.eclipse.jkube.kit.config.service;\n \n import io.fabric8.openshift.api.model.Route;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI5OTg2NQ==", "url": "https://github.com/eclipse/jkube/pull/279#discussion_r451299865", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .andReply(collector.record(\"get-route\").andReturn(404, \"\"))\n          \n          \n            \n                            .andReply(collector.record(\"get-route\").andReturn(HttpURLConnection.HTTP_NOT_FOUND, \"\"))", "author": "rohanKanojia", "createdAt": "2020-07-08T05:55:21Z", "path": "jkube-kit/config/service/src/test/java/org/eclipse/jkube/kit/config/service/ApplyServiceTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package org.eclipse.jkube.kit.config.service;\n+\n+import io.fabric8.openshift.api.model.Route;\n+import io.fabric8.openshift.api.model.RouteBuilder;\n+import io.fabric8.openshift.client.server.mock.OpenShiftMockServer;\n+import mockit.Mocked;\n+import org.eclipse.jkube.kit.common.KitLogger;\n+import org.eclipse.jkube.kit.config.service.openshift.WebServerEventCollector;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class ApplyServiceTest {\n+\n+    @Mocked\n+    private KitLogger log;\n+\n+    private OpenShiftMockServer mockServer = new OpenShiftMockServer(false);\n+\n+    private ApplyService applyService;\n+\n+    @Before\n+    public void setUp() {\n+        applyService = new ApplyService(mockServer.createOpenShiftClient(), log);\n+    }\n+\n+    @Test\n+    public void testCreateRoute() throws Exception {\n+        Route route = buildRoute();\n+\n+        WebServerEventCollector<OpenShiftMockServer> collector = new WebServerEventCollector<>(mockServer);\n+        mockServer.expect().get()\n+                .withPath(\"/apis/route.openshift.io/v1/namespaces/default/routes/route\")\n+                .andReply(collector.record(\"get-route\").andReturn(404, \"\"))\n+                .always();\n+        mockServer.expect().post()\n+                .withPath(\"/apis/route.openshift.io/v1/namespaces/default/routes\")\n+                .andReply(collector.record(\"new-route\").andReturn(201, route))\n+                .once();\n+\n+        applyService.apply(route, \"route.yml\");\n+\n+        collector.assertEventsRecordedInOrder(\"get-route\", \"new-route\");\n+    }\n+\n+    @Test\n+    public void testCreateRouteInServiceOnlyMode() throws Exception {\n+        Route route = buildRoute();\n+\n+        WebServerEventCollector<OpenShiftMockServer> collector = new WebServerEventCollector<>(mockServer);\n+        mockServer.expect().get()\n+                .withPath(\"/apis/route.openshift.io/v1/namespaces/default/routes/route\")\n+                .andReply(collector.record(\"get-route\").andReturn(404, \"\"))\n+                .always();\n+\n+        applyService.setServicesOnlyMode(true);\n+        applyService.apply(route, \"route.yml\");\n+\n+        collector.assertEventsNotRecorded(\"get-route\");\n+        assertEquals(1, mockServer.getRequestCount());\n+    }\n+\n+    @Test\n+    public void testCreateRouteNotAllowed() throws Exception {\n+        Route route = buildRoute();\n+\n+        WebServerEventCollector<OpenShiftMockServer> collector = new WebServerEventCollector<>(mockServer);\n+        mockServer.expect().get()\n+                .withPath(\"/apis/route.openshift.io/v1/namespaces/default/routes/route\")\n+                .andReply(collector.record(\"get-route\").andReturn(404, \"\"))", "originalCommit": "578e1a17e0f592e62696173fdc111c8444f9b280", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU4MTc1Nw==", "url": "https://github.com/eclipse/jkube/pull/279#discussion_r452581757", "bodyText": "Updated", "author": "mtrejo", "createdAt": "2020-07-10T01:58:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI5OTg2NQ=="}], "type": "inlineReview", "revised_code": {"commit": "3c2bb1e14c804950fbb68d069ba1df1aaab867e8", "chunk": "diff --git a/jkube-kit/config/service/src/test/java/org/eclipse/jkube/kit/config/service/ApplyServiceTest.java b/jkube-kit/config/service/src/test/java/org/eclipse/jkube/kit/config/service/ApplyServiceTest.java\nindex 9c420d3e..262f362b 100644\n--- a/jkube-kit/config/service/src/test/java/org/eclipse/jkube/kit/config/service/ApplyServiceTest.java\n+++ b/jkube-kit/config/service/src/test/java/org/eclipse/jkube/kit/config/service/ApplyServiceTest.java\n\n@@ -1,3 +1,17 @@\n+/**\n+ * Copyright (c) 2019 Red Hat, Inc.\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at:\n+ *\n+ *     https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Red Hat, Inc. - initial API and implementation\n+ */\n+\n package org.eclipse.jkube.kit.config.service;\n \n import io.fabric8.openshift.api.model.Route;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMDE1NA==", "url": "https://github.com/eclipse/jkube/pull/279#discussion_r451300154", "bodyText": "Could you please add license header here?", "author": "rohanKanojia", "createdAt": "2020-07-08T05:56:18Z", "path": "jkube-kit/config/service/src/test/java/org/eclipse/jkube/kit/config/service/ApplyServiceTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package org.eclipse.jkube.kit.config.service;", "originalCommit": "578e1a17e0f592e62696173fdc111c8444f9b280", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU4MTg0NQ==", "url": "https://github.com/eclipse/jkube/pull/279#discussion_r452581845", "bodyText": "Updated", "author": "mtrejo", "createdAt": "2020-07-10T01:58:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMDE1NA=="}], "type": "inlineReview", "revised_code": {"commit": "3c2bb1e14c804950fbb68d069ba1df1aaab867e8", "chunk": "diff --git a/jkube-kit/config/service/src/test/java/org/eclipse/jkube/kit/config/service/ApplyServiceTest.java b/jkube-kit/config/service/src/test/java/org/eclipse/jkube/kit/config/service/ApplyServiceTest.java\nindex 9c420d3e..262f362b 100644\n--- a/jkube-kit/config/service/src/test/java/org/eclipse/jkube/kit/config/service/ApplyServiceTest.java\n+++ b/jkube-kit/config/service/src/test/java/org/eclipse/jkube/kit/config/service/ApplyServiceTest.java\n\n@@ -1,3 +1,17 @@\n+/**\n+ * Copyright (c) 2019 Red Hat, Inc.\n+ * This program and the accompanying materials are made\n+ * available under the terms of the Eclipse Public License 2.0\n+ * which is available at:\n+ *\n+ *     https://www.eclipse.org/legal/epl-2.0/\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *\n+ * Contributors:\n+ *   Red Hat, Inc. - initial API and implementation\n+ */\n+\n package org.eclipse.jkube.kit.config.service;\n \n import io.fabric8.openshift.api.model.Route;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMTU2NA==", "url": "https://github.com/eclipse/jkube/pull/279#discussion_r451301564", "bodyText": "I'm not sure KitLogger supports format specifiers", "author": "rohanKanojia", "createdAt": "2020-07-08T06:00:41Z", "path": "jkube-kit/config/service/src/main/java/org/eclipse/jkube/kit/config/service/ApplyService.java", "diffHunk": "@@ -939,6 +926,17 @@ public void applyService(Service service, String sourceName) throws Exception {\n         }\n     }\n \n+    private <T extends HasMetadata> void doPatchEntity(T oldEntity, T newEntity, String namespace, String sourceName) {\n+        String kind = newEntity.getKind();\n+        log.info(\"Updating {} from {}\", kind, sourceName);", "originalCommit": "578e1a17e0f592e62696173fdc111c8444f9b280", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMzOTU1MA==", "url": "https://github.com/eclipse/jkube/pull/279#discussion_r451339550", "bodyText": "It does, but using String Formatter placeholders, use following log.info(\"Updating %s from %s\", kind, sourceName);", "author": "manusa", "createdAt": "2020-07-08T07:31:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMTU2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU4MjIyMA==", "url": "https://github.com/eclipse/jkube/pull/279#discussion_r452582220", "bodyText": "Thanks for your suggestions, I implemented them all.", "author": "mtrejo", "createdAt": "2020-07-10T01:59:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMTU2NA=="}], "type": "inlineReview", "revised_code": {"commit": "3c2bb1e14c804950fbb68d069ba1df1aaab867e8", "chunk": "diff --git a/jkube-kit/config/service/src/main/java/org/eclipse/jkube/kit/config/service/ApplyService.java b/jkube-kit/config/service/src/main/java/org/eclipse/jkube/kit/config/service/ApplyService.java\nindex 391bee61..34ebde36 100644\n--- a/jkube-kit/config/service/src/main/java/org/eclipse/jkube/kit/config/service/ApplyService.java\n+++ b/jkube-kit/config/service/src/main/java/org/eclipse/jkube/kit/config/service/ApplyService.java\n\n@@ -928,7 +928,7 @@ public class ApplyService {\n \n     private <T extends HasMetadata> void doPatchEntity(T oldEntity, T newEntity, String namespace, String sourceName) {\n         String kind = newEntity.getKind();\n-        log.info(\"Updating {} from {}\", kind, sourceName);\n+        log.info(\"Updating %s from %s\", kind, sourceName);\n         try {\n             Object answer = patchService.compareAndPatchEntity(namespace, newEntity, oldEntity);\n             logGeneratedEntity(\"Updated \" + kind + \": \", namespace, newEntity, answer);\n"}}, {"oid": "3c2bb1e14c804950fbb68d069ba1df1aaab867e8", "url": "https://github.com/eclipse/jkube/commit/3c2bb1e14c804950fbb68d069ba1df1aaab867e8", "message": "Fix #267: openshift-maven-plugin does not update Routes\n\nSigned-off-by: Marcos Trejo <marcos.trejo@gmail.com>", "committedDate": "2020-07-10T01:55:16Z", "type": "commit"}]}