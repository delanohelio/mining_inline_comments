{"pr_number": 398, "pr_title": "Fix for issue #385, WildFly Bootable JAR - Add native support for slim Bootable JAR", "pr_createdAt": "2020-09-23T13:07:02Z", "pr_url": "https://github.com/eclipse/jkube/pull/398", "timeline": [{"oid": "aef2329c0fe8eaadedad283ca4e152caa07c3d44", "url": "https://github.com/eclipse/jkube/commit/aef2329c0fe8eaadedad283ca4e152caa07c3d44", "message": "Fix for issue #385, WildFly Bootable JAR - Add native support for slim Bootable JAR\nSigned-off-by: JF Denise <jdenise@redhat.com>", "committedDate": "2020-09-23T13:50:43Z", "type": "forcePushed"}, {"oid": "4cc272db82eaa310f33bae8f1104a671379dc0cc", "url": "https://github.com/eclipse/jkube/commit/4cc272db82eaa310f33bae8f1104a671379dc0cc", "message": "Fix for issue #385, WildFly Bootable JAR - Add native support for slim Bootable JAR\nSigned-off-by: JF Denise <jdenise@redhat.com>", "committedDate": "2020-09-23T13:57:26Z", "type": "forcePushed"}, {"oid": "0b75508e54d85a2447072cc8195997830fc24d4d", "url": "https://github.com/eclipse/jkube/commit/0b75508e54d85a2447072cc8195997830fc24d4d", "message": "Fix for issue #385, WildFly Bootable JAR - Add native support for slim Bootable JAR\nSigned-off-by: JF Denise <jdenise@redhat.com>", "committedDate": "2020-09-23T14:39:52Z", "type": "forcePushed"}, {"oid": "d5b2aad2e1d875d5fe70fe5455d85a3cbd381c6b", "url": "https://github.com/eclipse/jkube/commit/d5b2aad2e1d875d5fe70fe5455d85a3cbd381c6b", "message": "Fix for issue #385, WildFly Bootable JAR - Add native support for slim Bootable JAR\nSigned-off-by: JF Denise <jdenise@redhat.com>", "committedDate": "2020-09-23T14:56:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgxNTUyNQ==", "url": "https://github.com/eclipse/jkube/pull/398#discussion_r495815525", "bodyText": "Usually you'd want to assert exceptions like this:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        boolean failed = true;\n          \n          \n            \n                        try {\n          \n          \n            \n                            List<AssemblyFileSet> files = generator.addAdditionalFiles();\n          \n          \n            \n                            failed = false;\n          \n          \n            \n                        } catch(Exception ex) {\n          \n          \n            \n                            // XXX Expected\n          \n          \n            \n                        }\n          \n          \n            \n                        if (!failed) {\n          \n          \n            \n                            throw new Exception(\"Test should have failed, no directory for maven repo\");\n          \n          \n            \n                        }\n          \n          \n            \n                        /* Exception result = */assertThrows(Exception.class, () -> {\n          \n          \n            \n                          generator.addAdditionalFiles();\n          \n          \n            \n                          fail(\"Test should have failed, no directory for maven repo\");\n          \n          \n            \n                        });\n          \n          \n            \n                        // Optionally assert exception e.g. assertEquals(\"Expected Message\", result.getMessage());", "author": "manusa", "createdAt": "2020-09-28T09:43:43Z", "path": "jkube-kit/jkube-kit-wildfly-jar/src/test/java/org/eclipse/jkube/wildfly/jar/generator/WildflyJARGeneratorTest.java", "diffHunk": "@@ -53,7 +64,204 @@ public void getEnv() throws IOException {\n         WildflyJARGenerator generator = new WildflyJARGenerator(createGeneratorContext());\n         Map<String, String> extraEnv = generator.getEnv(true);\n         assertNotNull(extraEnv);\n-        assertEquals(3, extraEnv.size());\n+        assertEquals(4, extraEnv.size());\n+    }\n+    \n+    @Test\n+    public void getExtraOptions() throws IOException {\n+        WildflyJARGenerator generator = new WildflyJARGenerator(createGeneratorContext());\n+        List<String> extraOptions = generator.getExtraJavaOptions();\n+        assertNotNull(extraOptions);\n+        assertEquals(1, extraOptions.size());\n+        assertEquals(\"-Djava.net.preferIPv4Stack=true\", extraOptions.get(0));\n+    }\n+    \n+    @Test\n+    public void slimServer(@Mocked final JavaProject project) throws IOException {\n+        Map<String, Object> options = new HashMap<>();\n+        Map<String, String> pluginOptions = new HashMap();\n+        options.put(PLUGIN_OPTIONS, pluginOptions);\n+        pluginOptions.put(JBOSS_MAVEN_DIST, null);\n+        pluginOptions.put(JBOSS_MAVEN_REPO, \"target\" + File.separator + \"myrepo\");\n+        //\n+        Path tmpDir = Files.createTempDirectory(\"bootable-jar-test-project\");\n+        Path targetDir = tmpDir.resolve(\"target\");\n+        Path repoDir = targetDir.resolve(\"myrepo\");\n+        Files.createDirectories(repoDir);\n+        try {\n+            GeneratorContext ctx = contextForSlimServer(project, options, tmpDir);\n+            WildflyJARGenerator generator = new WildflyJARGenerator(ctx);\n+            List<String> extraOptions = generator.getExtraJavaOptions();\n+            assertNotNull(extraOptions);\n+            assertEquals(2, extraOptions.size());\n+            assertEquals(\"-Djava.net.preferIPv4Stack=true\", extraOptions.get(0));\n+            assertEquals(\"-Dmaven.repo.local=/deployments/myrepo\", extraOptions.get(1));\n+            List<AssemblyFileSet> files = generator.addAdditionalFiles();\n+            assertFalse(files.isEmpty());\n+            AssemblyFileSet set = files.get(files.size() - 1);\n+            assertEquals(targetDir.toFile(), set.getDirectory());\n+            assertEquals(1, set.getIncludes().size());\n+            assertEquals(\"myrepo\", set.getIncludes().get(0));\n+        } finally {\n+            Files.delete(repoDir);\n+            Files.delete(targetDir);\n+            Files.delete(tmpDir);\n+        }\n+    }\n+    \n+    @Test\n+    public void slimServerAbsoluteDir(@Mocked final JavaProject project) throws IOException {\n+        Map<String, Object> options = new HashMap<>();\n+        Map<String, String> pluginOptions = new HashMap();\n+        Path tmpDir = Files.createTempDirectory(\"bootable-jar-test-project2\");\n+        Path targetDir = tmpDir.resolve(\"target\");\n+        Path repoDir = targetDir.resolve(\"myrepo\");\n+        Files.createDirectories(repoDir);\n+        options.put(PLUGIN_OPTIONS, pluginOptions);\n+        pluginOptions.put(JBOSS_MAVEN_DIST, null);\n+        pluginOptions.put(JBOSS_MAVEN_REPO, repoDir.toString());\n+        try {\n+            GeneratorContext ctx = contextForSlimServer(project, options, null);\n+            WildflyJARGenerator generator = new WildflyJARGenerator(ctx);\n+            List<String> extraOptions = generator.getExtraJavaOptions();\n+            assertNotNull(extraOptions);\n+            assertEquals(2, extraOptions.size());\n+            assertEquals(\"-Djava.net.preferIPv4Stack=true\", extraOptions.get(0));\n+            assertEquals(\"-Dmaven.repo.local=/deployments/myrepo\", extraOptions.get(1));\n+            List<AssemblyFileSet> files = generator.addAdditionalFiles();\n+            assertFalse(files.isEmpty());\n+            AssemblyFileSet set = files.get(files.size() - 1);\n+            assertEquals(targetDir.toFile(), set.getDirectory());\n+            assertEquals(1, set.getIncludes().size());\n+            assertEquals(\"myrepo\", set.getIncludes().get(0));\n+        } finally {\n+            Files.delete(repoDir);\n+            Files.delete(targetDir);\n+            Files.delete(tmpDir);\n+        }\n+    }\n+    \n+    @Test\n+    public void slimServerNoDir(@Mocked final JavaProject project) throws Exception {\n+        Map<String, Object> options = new HashMap<>();\n+        Map<String, String> pluginOptions = new HashMap();\n+        Path tmpDir = Files.createTempDirectory(\"bootable-jar-test-project2\");\n+        Path targetDir = tmpDir.resolve(\"target\");\n+        Path repoDir = targetDir.resolve(\"myrepo\");\n+        options.put(PLUGIN_OPTIONS, pluginOptions);\n+        pluginOptions.put(JBOSS_MAVEN_DIST, null);\n+        pluginOptions.put(JBOSS_MAVEN_REPO, repoDir.toString());\n+        try {\n+            GeneratorContext ctx = contextForSlimServer(project, options, null);\n+            WildflyJARGenerator generator = new WildflyJARGenerator(ctx);\n+            List<String> extraOptions = generator.getExtraJavaOptions();\n+            assertNotNull(extraOptions);\n+            assertEquals(2, extraOptions.size());\n+            assertEquals(\"-Djava.net.preferIPv4Stack=true\", extraOptions.get(0));\n+            assertEquals(\"-Dmaven.repo.local=/deployments/myrepo\", extraOptions.get(1));\n+            boolean failed = true;\n+            try {\n+                List<AssemblyFileSet> files = generator.addAdditionalFiles();\n+                failed = false;\n+            } catch(Exception ex) {\n+                // XXX Expected\n+            }\n+            if (!failed) {\n+                throw new Exception(\"Test should have failed, no directory for maven repo\");\n+            }", "originalCommit": "d5b2aad2e1d875d5fe70fe5455d85a3cbd381c6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgzMTIyNg==", "url": "https://github.com/eclipse/jkube/pull/398#discussion_r495831226", "bodyText": "@manusa , thank-you, I integrated your suggestion.", "author": "jfdenise", "createdAt": "2020-09-28T10:10:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgxNTUyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "ab40cd12c949fb2eb0a3060d1532ec378dfbb292", "chunk": "diff --git a/jkube-kit/jkube-kit-wildfly-jar/src/test/java/org/eclipse/jkube/wildfly/jar/generator/WildflyJARGeneratorTest.java b/jkube-kit/jkube-kit-wildfly-jar/src/test/java/org/eclipse/jkube/wildfly/jar/generator/WildflyJARGeneratorTest.java\nindex 68f28e70..f62453cd 100644\n--- a/jkube-kit/jkube-kit-wildfly-jar/src/test/java/org/eclipse/jkube/wildfly/jar/generator/WildflyJARGeneratorTest.java\n+++ b/jkube-kit/jkube-kit-wildfly-jar/src/test/java/org/eclipse/jkube/wildfly/jar/generator/WildflyJARGeneratorTest.java\n\n@@ -159,16 +161,12 @@ public class WildflyJARGeneratorTest {\n             assertEquals(2, extraOptions.size());\n             assertEquals(\"-Djava.net.preferIPv4Stack=true\", extraOptions.get(0));\n             assertEquals(\"-Dmaven.repo.local=/deployments/myrepo\", extraOptions.get(1));\n-            boolean failed = true;\n-            try {\n-                List<AssemblyFileSet> files = generator.addAdditionalFiles();\n-                failed = false;\n-            } catch(Exception ex) {\n-                // XXX Expected\n-            }\n-            if (!failed) {\n-                throw new Exception(\"Test should have failed, no directory for maven repo\");\n-            }\n+            Exception result = assertThrows(Exception.class, () -> {\n+                generator.addAdditionalFiles();\n+                fail(\"Test should have failed, no directory for maven repo\");\n+            });\n+            assertEquals(\"Error, WildFly bootable JAR generator can't retrieve \"\n+                    + \"generated maven local cache, directory \" + repoDir + \" doesn't exist.\", result.getMessage());\n         } finally {\n             Files.delete(tmpDir);\n         }\n"}}, {"oid": "ab40cd12c949fb2eb0a3060d1532ec378dfbb292", "url": "https://github.com/eclipse/jkube/commit/ab40cd12c949fb2eb0a3060d1532ec378dfbb292", "message": "Fix for issue #385, WildFly Bootable JAR - Add native support for slim Bootable JAR\nSigned-off-by: JF Denise <jdenise@redhat.com>", "committedDate": "2020-09-28T10:09:35Z", "type": "commit"}, {"oid": "ab40cd12c949fb2eb0a3060d1532ec378dfbb292", "url": "https://github.com/eclipse/jkube/commit/ab40cd12c949fb2eb0a3060d1532ec378dfbb292", "message": "Fix for issue #385, WildFly Bootable JAR - Add native support for slim Bootable JAR\nSigned-off-by: JF Denise <jdenise@redhat.com>", "committedDate": "2020-09-28T10:09:35Z", "type": "forcePushed"}]}