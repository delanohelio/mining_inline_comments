{"pr_number": 213, "pr_title": "Fix #184: IngressEnricher seems to be broken", "pr_createdAt": "2020-05-28T09:58:40Z", "pr_url": "https://github.com/eclipse/jkube/pull/213", "timeline": [{"oid": "97f8e22e22d339498b5c5fc9dfe81b7bcb9304a0", "url": "https://github.com/eclipse/jkube/commit/97f8e22e22d339498b5c5fc9dfe81b7bcb9304a0", "message": "Fix #184: IngressEnricher seems to be broken\n\nPorted PR https://github.com/fabric8io/fabric8-maven-plugin/pull/1730", "committedDate": "2020-05-28T10:14:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyNzg0OA==", "url": "https://github.com/eclipse/jkube/pull/213#discussion_r434327848", "bodyText": "?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return Integer.parseInt(\"0\");\n          \n          \n            \n                    return 0;", "author": "manusa", "createdAt": "2020-06-03T06:07:54Z", "path": "jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/IngressEnricher.java", "diffHunk": "@@ -98,7 +125,7 @@ private Integer getServicePort(ServiceBuilder serviceBuilder) {\n                 }\n             }\n         }\n-        return null;\n+        return Integer.parseInt(\"0\");", "originalCommit": "97f8e22e22d339498b5c5fc9dfe81b7bcb9304a0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ca6c7a34cd920094935829d4e050e04b1b4b3288", "chunk": "diff --git a/jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/IngressEnricher.java b/jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/IngressEnricher.java\nindex 546c2960..5c8833ff 100644\n--- a/jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/IngressEnricher.java\n+++ b/jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/IngressEnricher.java\n\n@@ -125,13 +129,13 @@ public class IngressEnricher extends BaseEnricher {\n                 }\n             }\n         }\n-        return Integer.parseInt(\"0\");\n+        return 0;\n     }\n \n     /**\n      * Returns true if we already have a route created for the given name\n      */\n-    private boolean hasIngress(final KubernetesListBuilder listBuilder, final String name) {\n+    private static boolean hasIngress(final KubernetesListBuilder listBuilder, final String name) {\n         final AtomicBoolean answer = new AtomicBoolean(false);\n         listBuilder.accept(new TypedVisitor<IngressBuilder>() {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyODA4OQ==", "url": "https://github.com/eclipse/jkube/pull/213#discussion_r434328089", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * <p/>\n          \n          \n            \n                 * By default lets ignore the kubernetes services and any service which does not expose ports 80 and 443\n          \n          \n            \n                 * \n          \n          \n            \n                 * <p> By default lets ignore the kubernetes services and any service which does not expose ports 80 and 443", "author": "manusa", "createdAt": "2020-06-03T06:08:33Z", "path": "jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/IngressEnricher.java", "diffHunk": "@@ -119,23 +146,33 @@ public void visit(IngressBuilder builder) {\n         return answer.get();\n     }\n \n-    private boolean isExposedService(ServiceBuilder serviceBuilder) {\n-        Service service = serviceBuilder.build();\n-        return isExposedService(service);\n-    }\n-\n-    private boolean isExposedService(Service service) {\n-        ObjectMeta metadata = service.getMetadata();\n-        if (metadata != null) {\n-            Map<String, String> labels = metadata.getLabels();\n-            if (labels != null) {\n-                if (\"true\".equals(labels.get(\"expose\")) || \"true\".equals(labels.get(JKubeAnnotations.SERVICE_EXPOSE_URL.value()))) {\n+    /**\n+     * Should we try to create an external URL for the given service?\n+     * <p/>\n+     * By default lets ignore the kubernetes services and any service which does not expose ports 80 and 443", "originalCommit": "97f8e22e22d339498b5c5fc9dfe81b7bcb9304a0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ca6c7a34cd920094935829d4e050e04b1b4b3288", "chunk": "diff --git a/jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/IngressEnricher.java b/jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/IngressEnricher.java\nindex 546c2960..5c8833ff 100644\n--- a/jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/IngressEnricher.java\n+++ b/jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/IngressEnricher.java\n\n@@ -148,12 +152,12 @@ public class IngressEnricher extends BaseEnricher {\n \n     /**\n      * Should we try to create an external URL for the given service?\n-     * <p/>\n+     * <p>\n      * By default lets ignore the kubernetes services and any service which does not expose ports 80 and 443\n      *\n      * @return true if we should create an Ingress for this service.\n      */\n-    private boolean shouldCreateExternalURLForService(ServiceBuilder service) {\n+    private static boolean shouldCreateExternalURLForService(ServiceBuilder service, KitLogger log) {\n         String serviceName = service.buildMetadata().getName();\n         ServiceSpec spec = service.buildSpec();\n         if (spec != null && !isKuberentesSystemService(serviceName)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyODYxOA==", "url": "https://github.com/eclipse/jkube/pull/213#discussion_r434328618", "bodyText": "Remove this comment and create an issue instead", "author": "manusa", "createdAt": "2020-06-03T06:10:11Z", "path": "jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/openshift/RouteEnricher.java", "diffHunk": "@@ -104,6 +97,77 @@ private RoutePort createRoutePort(ServiceBuilder serviceBuilder) {\n         return routePort;\n     }\n \n+    private String prepareHostForRoute(String routeDomainPostfix, String name) {\n+        String ret = FileUtil.stripPostfix(name,\"-service\");\n+        ret = FileUtil.stripPostfix(ret,\".\");\n+        ret += \".\";\n+        ret += FileUtil.stripPrefix(routeDomainPostfix, \".\");\n+        return ret;\n+    }\n+\n+    private Set<Integer> getPorts(ServiceBuilder service) {\n+        Set<Integer> answer = new HashSet<>();\n+        if (service != null) {\n+            ServiceSpec spec = getOrCreateSpec(service);\n+            for (ServicePort port : spec.getPorts()) {\n+                answer.add(port.getPort());\n+            }\n+        }\n+        return answer;\n+    }\n+\n+    public static ServiceSpec getOrCreateSpec(ServiceBuilder entity) {\n+        ServiceSpec spec = entity.buildSpec();\n+        if (spec == null) {\n+            spec = new ServiceSpec();\n+            entity.editOrNewSpec().endSpec();\n+        }\n+        return spec;\n+    }\n+\n+    private boolean hasExactlyOneServicePort(ServiceBuilder service, String id) {\n+        Set<Integer> ports = getPorts(service);\n+        if (ports.size() != 1) {\n+            log.info(\"Not generating route for service \" + id + \" as only single port services are supported. Has ports: \" +\n+                    ports);\n+            return false;\n+        } else {\n+            return true;\n+        }\n+    }\n+\n+    private void addRoute(KubernetesListBuilder listBuilder, ServiceBuilder serviceBuilder, List<Route> routes) {\n+        ObjectMeta serviceMetadata = serviceBuilder.buildMetadata();\n+\n+        if (serviceMetadata != null && StringUtils.isNotBlank(serviceMetadata.getName())\n+                && hasExactlyOneServicePort(serviceBuilder, serviceMetadata.getName()) && isExposedService(serviceMetadata, log)) {\n+            String name = serviceMetadata.getName();\n+            if (!hasRoute(listBuilder, name)) {\n+                if (StringUtils.isNotBlank(routeDomainPostfix)) {\n+                    routeDomainPostfix = prepareHostForRoute(routeDomainPostfix, name);\n+                } else {\n+                    routeDomainPostfix = \"\";\n+                }\n+\n+                RoutePort routePort = createRoutePort(serviceBuilder);\n+                if (routePort != null) {\n+                    // TODO one day lets support multiple ports on a Route when the model supports it", "originalCommit": "97f8e22e22d339498b5c5fc9dfe81b7bcb9304a0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ca6c7a34cd920094935829d4e050e04b1b4b3288", "chunk": "diff --git a/jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/openshift/RouteEnricher.java b/jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/openshift/RouteEnricher.java\nindex 08f3d58c..5a26956f 100644\n--- a/jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/openshift/RouteEnricher.java\n+++ b/jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/openshift/RouteEnricher.java\n\n@@ -151,7 +151,6 @@ public class RouteEnricher extends BaseEnricher {\n \n                 RoutePort routePort = createRoutePort(serviceBuilder);\n                 if (routePort != null) {\n-                    // TODO one day lets support multiple ports on a Route when the model supports it\n                     RouteBuilder routeBuilder = new RouteBuilder().\n                             withMetadata(serviceMetadata).\n                             withNewSpec().\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyOTM5Mw==", "url": "https://github.com/eclipse/jkube/pull/213#discussion_r434329393", "bodyText": "What does this imply?", "author": "manusa", "createdAt": "2020-06-03T06:12:25Z", "path": "jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/openshift/RouteEnricher.java", "diffHunk": "@@ -104,6 +97,77 @@ private RoutePort createRoutePort(ServiceBuilder serviceBuilder) {\n         return routePort;\n     }\n \n+    private String prepareHostForRoute(String routeDomainPostfix, String name) {\n+        String ret = FileUtil.stripPostfix(name,\"-service\");\n+        ret = FileUtil.stripPostfix(ret,\".\");\n+        ret += \".\";\n+        ret += FileUtil.stripPrefix(routeDomainPostfix, \".\");\n+        return ret;\n+    }\n+\n+    private Set<Integer> getPorts(ServiceBuilder service) {\n+        Set<Integer> answer = new HashSet<>();\n+        if (service != null) {\n+            ServiceSpec spec = getOrCreateSpec(service);\n+            for (ServicePort port : spec.getPorts()) {\n+                answer.add(port.getPort());\n+            }\n+        }\n+        return answer;\n+    }\n+\n+    public static ServiceSpec getOrCreateSpec(ServiceBuilder entity) {\n+        ServiceSpec spec = entity.buildSpec();\n+        if (spec == null) {\n+            spec = new ServiceSpec();\n+            entity.editOrNewSpec().endSpec();\n+        }\n+        return spec;\n+    }\n+\n+    private boolean hasExactlyOneServicePort(ServiceBuilder service, String id) {\n+        Set<Integer> ports = getPorts(service);\n+        if (ports.size() != 1) {\n+            log.info(\"Not generating route for service \" + id + \" as only single port services are supported. Has ports: \" +\n+                    ports);\n+            return false;\n+        } else {\n+            return true;\n+        }\n+    }\n+\n+    private void addRoute(KubernetesListBuilder listBuilder, ServiceBuilder serviceBuilder, List<Route> routes) {\n+        ObjectMeta serviceMetadata = serviceBuilder.buildMetadata();\n+\n+        if (serviceMetadata != null && StringUtils.isNotBlank(serviceMetadata.getName())\n+                && hasExactlyOneServicePort(serviceBuilder, serviceMetadata.getName()) && isExposedService(serviceMetadata, log)) {\n+            String name = serviceMetadata.getName();\n+            if (!hasRoute(listBuilder, name)) {\n+                if (StringUtils.isNotBlank(routeDomainPostfix)) {\n+                    routeDomainPostfix = prepareHostForRoute(routeDomainPostfix, name);\n+                } else {\n+                    routeDomainPostfix = \"\";\n+                }\n+\n+                RoutePort routePort = createRoutePort(serviceBuilder);\n+                if (routePort != null) {\n+                    // TODO one day lets support multiple ports on a Route when the model supports it\n+                    RouteBuilder routeBuilder = new RouteBuilder().\n+                            withMetadata(serviceMetadata).\n+                            withNewSpec().\n+                            withPort(routePort).\n+                            withNewTo().withKind(\"Service\").withName(name).endTo().\n+                            withHost(routeDomainPostfix.isEmpty() ? null : routeDomainPostfix).\n+                            endSpec();\n+\n+                    // removing `expose : true` label from metadata.", "originalCommit": "97f8e22e22d339498b5c5fc9dfe81b7bcb9304a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIwNjkxMA==", "url": "https://github.com/eclipse/jkube/pull/213#discussion_r435206910", "bodyText": "I think it's about removing expose=true labels added by ExposeEnricher", "author": "rohanKanojia", "createdAt": "2020-06-04T12:15:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyOTM5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIzNjE2Mw==", "url": "https://github.com/eclipse/jkube/pull/213#discussion_r435236163", "bodyText": "Yes, I see that. But what does that expose=true label > ExposeEnricher do?\nI think it something fabric8 only related (hence deprecated) but I may be wrong\nhttps://blog.fabric8.io/additional-kubernetes-controllers-from-fabric8-you-can-use-with-your-microservice-3126a2c4c132\nhttps://github.com/jenkins-x/exposecontroller", "author": "manusa", "createdAt": "2020-06-04T13:04:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyOTM5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "ca6c7a34cd920094935829d4e050e04b1b4b3288", "chunk": "diff --git a/jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/openshift/RouteEnricher.java b/jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/openshift/RouteEnricher.java\nindex 08f3d58c..5a26956f 100644\n--- a/jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/openshift/RouteEnricher.java\n+++ b/jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/openshift/RouteEnricher.java\n\n@@ -151,7 +151,6 @@ public class RouteEnricher extends BaseEnricher {\n \n                 RoutePort routePort = createRoutePort(serviceBuilder);\n                 if (routePort != null) {\n-                    // TODO one day lets support multiple ports on a Route when the model supports it\n                     RouteBuilder routeBuilder = new RouteBuilder().\n                             withMetadata(serviceMetadata).\n                             withNewSpec().\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMzMDM2OQ==", "url": "https://github.com/eclipse/jkube/pull/213#discussion_r434330369", "bodyText": "Is this parameter still supported via properties?", "author": "manusa", "createdAt": "2020-06-03T06:15:14Z", "path": "kubernetes-maven-plugin/plugin/src/main/java/org/eclipse/jkube/maven/plugin/mojo/build/ApplyMojo.java", "diffHunk": "@@ -86,12 +60,6 @@\n     public static final String DEFAULT_KUBERNETES_MANIFEST = \"${basedir}/target/classes/META-INF/jkube/kubernetes.yml\";\n     public static final String DEFAULT_OPENSHIFT_MANIFEST = \"${basedir}/target/classes/META-INF/jkube/openshift.yml\";\n \n-    /**\n-     * The domain added to the service ID when creating OpenShift routes\n-     */\n-    @Parameter(property = \"jkube.domain\")\n-    protected String routeDomain;", "originalCommit": "97f8e22e22d339498b5c5fc9dfe81b7bcb9304a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIwNzE0Mw==", "url": "https://github.com/eclipse/jkube/pull/213#discussion_r435207143", "bodyText": "I have moved this to ResourceMojo since route/ingress generation is no longer part of apply goal", "author": "rohanKanojia", "createdAt": "2020-06-04T12:15:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMzMDM2OQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMzMDQwNg==", "url": "https://github.com/eclipse/jkube/pull/213#discussion_r434330406", "bodyText": "Is this parameter still supported via properties?", "author": "manusa", "createdAt": "2020-06-03T06:15:20Z", "path": "kubernetes-maven-plugin/plugin/src/main/java/org/eclipse/jkube/maven/plugin/mojo/build/ApplyMojo.java", "diffHunk": "@@ -163,16 +131,6 @@\n     @Parameter(property = \"jkube.deploy.ignoreRunningOAuthClients\", defaultValue = \"true\")\n     private boolean ignoreRunningOAuthClients;\n \n-    /**\n-     * Should we create external Ingress/Routes for any LoadBalancer Services which don't already have them.\n-     * <p>\n-     * We now do not do this by default and defer this to the\n-     * <a href=\"https://github.com/jkubeio/exposecontroller/\">exposecontroller</a> to decide\n-     * if Ingress or Router is being used or whether we should use LoadBalancer or NodePorts for single node clusters\n-     */\n-    @Parameter(property = \"jkube.deploy.createExternalUrls\", defaultValue = \"false\")\n-    private boolean createExternalUrls;", "originalCommit": "97f8e22e22d339498b5c5fc9dfe81b7bcb9304a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIwNzQ5OA==", "url": "https://github.com/eclipse/jkube/pull/213#discussion_r435207498", "bodyText": "I have moved this to resource mojo. This flag enables Ingress generation", "author": "rohanKanojia", "createdAt": "2020-06-04T12:16:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMzMDQwNg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "ca6c7a34cd920094935829d4e050e04b1b4b3288", "url": "https://github.com/eclipse/jkube/commit/ca6c7a34cd920094935829d4e050e04b1b4b3288", "message": "Fix #184: IngressEnricher seems to be broken\n\nPorted PR https://github.com/fabric8io/fabric8-maven-plugin/pull/1730", "committedDate": "2020-06-04T12:13:14Z", "type": "forcePushed"}, {"oid": "19c800c40c019926c5154e1cd4617ca2599315f3", "url": "https://github.com/eclipse/jkube/commit/19c800c40c019926c5154e1cd4617ca2599315f3", "message": "Fix #184: IngressEnricher seems to be broken\n\nPorted PR https://github.com/fabric8io/fabric8-maven-plugin/pull/1730", "committedDate": "2020-06-04T13:07:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIzOTIzNQ==", "url": "https://github.com/eclipse/jkube/pull/213#discussion_r435239235", "bodyText": "In general this is considered a bad idea and an anti-pattern (https://en.wikipedia.org/wiki/Constant_interface#:~:text=In%20general%2C%20collecting%20system%20constants,be%20considered%20an%20anti%2Dpattern.)\nIt's better to keep constants near their usage so that context doesn't get lost. Having an EXPOSE_LABEL constant with no other context makes it very hard to understand what its purpose is.", "author": "manusa", "createdAt": "2020-06-04T13:09:04Z", "path": "jkube-kit/enricher/api/src/main/java/org/eclipse/jkube/kit/enricher/api/util/Constants.java", "diffHunk": "@@ -20,5 +20,6 @@\n public class Constants {\n     public static final String RESOURCE_SOURCE_URL_ANNOTATION = \"maven.jkube.io/source-url\";\n     public static final String RESOURCE_APP_CATALOG_ANNOTATION = \"maven.jkube.io/app-catalog\";\n+    public static final String EXPOSE_LABEL = \"expose\";", "originalCommit": "19c800c40c019926c5154e1cd4617ca2599315f3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d3f6e452ee4a7cfc68f5999ddeda36d803f1bf54", "chunk": "diff --git a/jkube-kit/enricher/api/src/main/java/org/eclipse/jkube/kit/enricher/api/util/Constants.java b/jkube-kit/enricher/api/src/main/java/org/eclipse/jkube/kit/enricher/api/util/Constants.java\nindex 01b86ae0..7f9a2839 100644\n--- a/jkube-kit/enricher/api/src/main/java/org/eclipse/jkube/kit/enricher/api/util/Constants.java\n+++ b/jkube-kit/enricher/api/src/main/java/org/eclipse/jkube/kit/enricher/api/util/Constants.java\n\n@@ -20,6 +20,5 @@ package org.eclipse.jkube.kit.enricher.api.util;\n public class Constants {\n     public static final String RESOURCE_SOURCE_URL_ANNOTATION = \"maven.jkube.io/source-url\";\n     public static final String RESOURCE_APP_CATALOG_ANNOTATION = \"maven.jkube.io/app-catalog\";\n-    public static final String EXPOSE_LABEL = \"expose\";\n }\n \n"}}, {"oid": "d3f6e452ee4a7cfc68f5999ddeda36d803f1bf54", "url": "https://github.com/eclipse/jkube/commit/d3f6e452ee4a7cfc68f5999ddeda36d803f1bf54", "message": "Fix #184: IngressEnricher seems to be broken\n\nPorted PR https://github.com/fabric8io/fabric8-maven-plugin/pull/1730", "committedDate": "2020-06-04T16:29:52Z", "type": "commit"}, {"oid": "d3f6e452ee4a7cfc68f5999ddeda36d803f1bf54", "url": "https://github.com/eclipse/jkube/commit/d3f6e452ee4a7cfc68f5999ddeda36d803f1bf54", "message": "Fix #184: IngressEnricher seems to be broken\n\nPorted PR https://github.com/fabric8io/fabric8-maven-plugin/pull/1730", "committedDate": "2020-06-04T16:29:52Z", "type": "forcePushed"}]}