{"pr_number": 349, "pr_title": "Fix #341 : ImageChangeTrigger now gets applied when resource fragments used", "pr_createdAt": "2020-08-07T07:00:20Z", "pr_url": "https://github.com/eclipse/jkube/pull/349", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ1Nzk2Nw==", "url": "https://github.com/eclipse/jkube/pull/349#discussion_r471457967", "bodyText": "Do we always the guarantee that the 0th container is the app container? I think we should add a validation here to keep this logic robust.\nPlease correct me if I'm wrong.", "author": "dev-gaur", "createdAt": "2020-08-17T12:54:22Z", "path": "jkube-kit/enricher/api/src/main/java/org/eclipse/jkube/kit/enricher/api/util/KubernetesResourceUtil.java", "diffHunk": "@@ -650,76 +650,115 @@ public static String mergePodSpec(PodSpecBuilder builder, PodSpec defaultPodSpec\n         int size = defaultContainers.size();\n         if (size > 0) {\n             if (containers == null || containers.isEmpty()) {\n+                defaultApplicationContainerName = defaultContainers.get(0).getName();", "originalCommit": "5a2ac870e33e79e88027c0df03d9e3b247ff858a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ5MzcyOA==", "url": "https://github.com/eclipse/jkube/pull/349#discussion_r471493728", "bodyText": "I think you have a point here. During zero-configuration mode, JKube adds only one container(that's why I assumed it would always work). But if you use XML configuration for ImageConfig, you can add as many containers as you wish and there is no way to specify which one is main application container.", "author": "rohanKanojia", "createdAt": "2020-08-17T13:52:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ1Nzk2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU4Njg5MQ==", "url": "https://github.com/eclipse/jkube/pull/349#discussion_r471586891", "bodyText": "exactly", "author": "dev-gaur", "createdAt": "2020-08-17T16:12:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ1Nzk2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkyMjM4Nw==", "url": "https://github.com/eclipse/jkube/pull/349#discussion_r471922387", "bodyText": "With all the code changes, I just realized that this diverges a lot from the initial proposed solution (I thought that code was only moved around).\nCould we stick to the initial plan (implement simple solution and add the the tests)? This class needs a deep refactor, but with the 1.0 release ahead, it's not the right time to do this.", "author": "manusa", "createdAt": "2020-08-18T05:27:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ1Nzk2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA4NzI4NA==", "url": "https://github.com/eclipse/jkube/pull/349#discussion_r472087284", "bodyText": "After a deeper review, the string returned by this function is absolutely useless and only used as a flag in:\n\n  \n    \n      jkube/jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/ControllerViaPluginConfigurationEnricher.java\n    \n    \n        Lines 123 to 128\n      in\n      89f3649\n    \n    \n    \n    \n\n        \n          \n           public void visit(PodSpecBuilder builder) { \n        \n\n        \n          \n               String defaultApplicationContainerName = KubernetesResourceUtil.mergePodSpec(builder, podSpec, name, getValueFromConfig(SIDECAR, false)); \n        \n\n        \n          \n               if(defaultApplicationContainerName != null) { \n        \n\n        \n          \n                   setProcessingInstruction(NEED_IMAGECHANGE_TRIGGERS, Collections.singletonList(defaultApplicationContainerName)); \n        \n\n        \n          \n               } \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nIt doesn't really matter if the name is the one for the first container, the second, or anything else \"random\".\nWe really need to refactor all of the related methods after the 1.0.0 release", "author": "manusa", "createdAt": "2020-08-18T10:48:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ1Nzk2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "ea226f1bab8b94fd47917217c7ac402f71fe1e95", "chunk": "diff --git a/jkube-kit/enricher/api/src/main/java/org/eclipse/jkube/kit/enricher/api/util/KubernetesResourceUtil.java b/jkube-kit/enricher/api/src/main/java/org/eclipse/jkube/kit/enricher/api/util/KubernetesResourceUtil.java\nindex 2c2fac71..7cd41105 100644\n--- a/jkube-kit/enricher/api/src/main/java/org/eclipse/jkube/kit/enricher/api/util/KubernetesResourceUtil.java\n+++ b/jkube-kit/enricher/api/src/main/java/org/eclipse/jkube/kit/enricher/api/util/KubernetesResourceUtil.java\n\n@@ -650,115 +613,82 @@ public class KubernetesResourceUtil {\n         int size = defaultContainers.size();\n         if (size > 0) {\n             if (containers == null || containers.isEmpty()) {\n-                defaultApplicationContainerName = defaultContainers.get(0).getName();\n                 builder.addToContainers(defaultContainers.toArray(new Container[size]));\n             } else {\n-                defaultApplicationContainerName = mergeFragmentIntoDefaultGeneratedContainers(containers, defaultContainers, sidecarEnabled);\n+                int idx = 0;\n+                for (Container defaultContainer : defaultContainers) {\n+                    Container container = null;\n+                    if(sidecarEnabled) { // Consider container as sidecar\n+                        for (Container fragmentContainer : containers) {\n+                            if (fragmentContainer.getName() == null || fragmentContainer.getName().equals(defaultContainer.getName())) {\n+                                container = fragmentContainer;\n+                                defaultApplicationContainerName = defaultContainer.getName();\n+                                break;\n+                            }\n+                        }\n+                        if (container == null) {\n+                            container = new Container();\n+                            containers.add(container);\n+                        }\n+                    } else { // Old behavior\n+                        if (idx < containers.size()) {\n+                            container = containers.get(idx);\n+                        } else {\n+                            container = new Container();\n+                            containers.add(container);\n+                        }\n+                    }\n+                    // If default container name is not set, add first found\n+                    // container as default application container from resource\n+                    // fragment, if not present set default application container\n+                    // name from JKube generated PodSpec\n+                    if (defaultApplicationContainerName == null) {\n+                        if (container.getName() != null) { // Pick from fragment\n+                            defaultApplicationContainerName = container.getName();\n+                        } else if (defaultContainer.getName() != null) { // Pick from default opinionated PodSpec\n+                            defaultApplicationContainerName = defaultContainer.getName();\n+                        }\n+                    }\n+\n+                    mergeSimpleFields(container, defaultContainer);\n+                    List<EnvVar> defaultEnv = defaultContainer.getEnv();\n+                    if (defaultEnv != null) {\n+                        for (EnvVar envVar : defaultEnv) {\n+                            ensureHasEnv(container, envVar);\n+                        }\n+                    }\n+                    List<ContainerPort> defaultPorts = defaultContainer.getPorts();\n+                    if (defaultPorts != null) {\n+                        for (ContainerPort port : defaultPorts) {\n+                            ensureHasPort(container, port);\n+                        }\n+                    }\n+                    if (container.getReadinessProbe() == null) {\n+                        container.setReadinessProbe(defaultContainer.getReadinessProbe());\n+                    }\n+                    if (container.getLivenessProbe() == null) {\n+                        container.setLivenessProbe(defaultContainer.getLivenessProbe());\n+                    }\n+                    if (container.getSecurityContext() == null) {\n+                        container.setSecurityContext(defaultContainer.getSecurityContext());\n+                    }\n+                    idx++;\n+                }\n                 builder.withContainers(containers);\n             }\n         } else if (!containers.isEmpty()) {\n-            updateFirstBlankNameContainer(containers, defaultName);\n-            defaultApplicationContainerName = defaultName;\n+            // lets default the container name if there's none specified in the custom yaml file\n+            for (Container container : containers) {\n+                if (StringUtils.isBlank(container.getName())) {\n+                    container.setName(defaultName);\n+                    break; // do it for one container only, but not necessarily the first one\n+                }\n+            }\n             builder.withContainers(containers);\n         }\n         return defaultApplicationContainerName; // Return the main application container's name.\n     }\n \n-    private static Container getDefaultApplicationContainer(int idx, List<Container> containers, Container defaultContainer, boolean sidecarEnabled) {\n-        if(sidecarEnabled) { // Consider container as sidecar\n-            return getDefaultApplicationContainerWithSidecarStrategy(containers, defaultContainer);\n-        } else { // Old behavior\n-            return getDefaultApplicationContainerWithOldStrategy(idx, containers);\n-        }\n-    }\n-\n-    private static Container getDefaultApplicationContainerWithSidecarStrategy(List<Container> containers, Container defaultContainer) {\n-        Container container = null;\n-        for (Container fragmentContainer : containers) {\n-            if (fragmentContainer.getName() == null || fragmentContainer.getName().equals(defaultContainer.getName())) {\n-                container = fragmentContainer;\n-                break;\n-            }\n-        }\n-        return container;\n-\n-    }\n-\n-    private static Container getDefaultApplicationContainerWithOldStrategy(int idx, List<Container> containers) {\n-        if (idx < containers.size()) {\n-            return containers.get(idx);\n-        }\n-        return null;\n-    }\n-\n-    private static void mergeFragmentIntoOpinionatedContainer(Container container, Container defaultContainer) {\n-        mergeSimpleFields(container, defaultContainer);\n-        List<EnvVar> defaultEnv = defaultContainer.getEnv();\n-        if (defaultEnv != null) {\n-            for (EnvVar envVar : defaultEnv) {\n-                ensureHasEnv(container, envVar);\n-            }\n-        }\n-        List<ContainerPort> defaultPorts = defaultContainer.getPorts();\n-        if (defaultPorts != null) {\n-            for (ContainerPort port : defaultPorts) {\n-                ensureHasPort(container, port);\n-            }\n-        }\n-        if (container.getReadinessProbe() == null) {\n-            container.setReadinessProbe(defaultContainer.getReadinessProbe());\n-        }\n-        if (container.getLivenessProbe() == null) {\n-            container.setLivenessProbe(defaultContainer.getLivenessProbe());\n-        }\n-        if (container.getSecurityContext() == null) {\n-            container.setSecurityContext(defaultContainer.getSecurityContext());\n-        }\n-    }\n-\n-    private static String updateDefaultApplicationContainerName(String oldName, Container container, Container defaultContainer) {\n-        // If default container name is not set, add first found\n-        // container as default application container from resource\n-        // fragment, if not present set default application container\n-        // name from JKube generated PodSpec\n-        if (oldName == null) {\n-            if (container.getName() != null) { // Pick from fragment\n-                oldName = container.getName();\n-            } else if (defaultContainer.getName() != null) { // Pick from default opinionated PodSpec\n-                oldName = defaultContainer.getName();\n-            }\n-        }\n-        return oldName;\n-    }\n-\n-    private static void updateFirstBlankNameContainer(List<Container> containers, String defaultName) {\n-        // lets default the container name if there's none specified in the custom yaml file\n-        for (Container container : containers) {\n-            if (StringUtils.isBlank(container.getName())) {\n-                container.setName(defaultName);\n-                break; // do it for one container only, but not necessarily the first one\n-            }\n-        }\n-    }\n-\n-    private static String mergeFragmentIntoDefaultGeneratedContainers(List<Container> containers, List<Container> defaultContainers, boolean sidecarEnabled) {\n-        int idx = 0;\n-        String defaultApplicationContainerName = null;\n-        for (Container defaultContainer : defaultContainers) {\n-            Container container = getDefaultApplicationContainer(idx, containers, defaultContainer, sidecarEnabled);\n-            if (container == null) {\n-                container = new Container();\n-                containers.add(container);\n-            }\n-\n-            defaultApplicationContainerName = updateDefaultApplicationContainerName(defaultApplicationContainerName, container, defaultContainer);\n-            mergeFragmentIntoOpinionatedContainer(container, defaultContainer);\n-            idx++;\n-        }\n-\n-        return defaultApplicationContainerName;\n-    }\n-\n     private static void ensureHasEnv(Container container, EnvVar envVar) {\n         List<EnvVar> envVars = container.getEnv();\n         if (envVars == null) {\n"}}, {"oid": "ea226f1bab8b94fd47917217c7ac402f71fe1e95", "url": "https://github.com/eclipse/jkube/commit/ea226f1bab8b94fd47917217c7ac402f71fe1e95", "message": "Fix #341 : ImageChangeTrigger now gets applied when resource fragments used\n\nEarlier due to sidecar refactor, JKube wasn't able to find out\ndefault application container's name for which we need to add\nImageChange triggers during openshift S2I build when we were\nproviding resource fragments in which container name was absent.", "committedDate": "2020-08-18T09:00:22Z", "type": "commit"}, {"oid": "ea226f1bab8b94fd47917217c7ac402f71fe1e95", "url": "https://github.com/eclipse/jkube/commit/ea226f1bab8b94fd47917217c7ac402f71fe1e95", "message": "Fix #341 : ImageChangeTrigger now gets applied when resource fragments used\n\nEarlier due to sidecar refactor, JKube wasn't able to find out\ndefault application container's name for which we need to add\nImageChange triggers during openshift S2I build when we were\nproviding resource fragments in which container name was absent.", "committedDate": "2020-08-18T09:00:22Z", "type": "forcePushed"}]}