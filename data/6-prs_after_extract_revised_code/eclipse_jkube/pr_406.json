{"pr_number": 406, "pr_title": "Fix #382: Add support for merging fragment Route spec with default generated Route", "pr_createdAt": "2020-09-25T12:05:37Z", "pr_url": "https://github.com/eclipse/jkube/pull/406", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc0MDY1MQ==", "url": "https://github.com/eclipse/jkube/pull/406#discussion_r495740651", "bodyText": "There are several things I don't understand here.\n\nWhy did we replace the Set with an ArrayList?\nWhy are we no longer statically initilaizing the collection (The collection is now created each time we invoke the method)?\nIf this collection is to be different depending on where it is invoked (e.g. DefaultControllerEnricher), why aren't we creating an instantiable dedicated util class where the Collection can be customized?", "author": "manusa", "createdAt": "2020-09-28T07:30:55Z", "path": "jkube-kit/enricher/api/src/main/java/org/eclipse/jkube/kit/enricher/api/util/KubernetesResourceUtil.java", "diffHunk": "@@ -727,6 +725,27 @@ private static void ensureHasPort(Container container, ContainerPort port) {\n         ports.add(port);\n     }\n \n+    private static boolean isSimpleFieldType(Class<?> type) {\n+        ArrayList<Class<?>> simpleFieldTypes = new ArrayList<>();\n+        simpleFieldTypes.add(String.class);\n+        simpleFieldTypes.add(Double.class);\n+        simpleFieldTypes.add(Float.class);\n+        simpleFieldTypes.add(Long.class);\n+        simpleFieldTypes.add(Integer.class);\n+        simpleFieldTypes.add(Short.class);\n+        simpleFieldTypes.add(Character.class);\n+        simpleFieldTypes.add(Byte.class);\n+        simpleFieldTypes.add(double.class);\n+        simpleFieldTypes.add(float.class);\n+        simpleFieldTypes.add(long.class);\n+        simpleFieldTypes.add(int.class);\n+        simpleFieldTypes.add(short.class);\n+        simpleFieldTypes.add(char.class);\n+        simpleFieldTypes.add(byte.class);", "originalCommit": "10df4d96f5588d12a2e24d46bdb291087fb2ba91", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc0MzY4Ng==", "url": "https://github.com/eclipse/jkube/pull/406#discussion_r495743686", "bodyText": "This collection only seems to be getting used to distinguish whether a type is primitive or not. I don't think it's contents would vary depending upon the caller. I wanted to use it in RouteEnricher but I found out it's being initialized in DefaultControllerEnricher; which seemed weird to me.", "author": "rohanKanojia", "createdAt": "2020-09-28T07:37:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc0MDY1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc0NTk3Ng==", "url": "https://github.com/eclipse/jkube/pull/406#discussion_r495745976", "bodyText": "regarding replacing Set with ArrayList I think it's a mistake. Let me revert it to Set.", "author": "rohanKanojia", "createdAt": "2020-09-28T07:41:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc0MDY1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgyNjUxMg==", "url": "https://github.com/eclipse/jkube/pull/406#discussion_r495826512", "bodyText": "\ud83d\udc4d\nI'm still missing this \"Why are we no longer statically initializing the collection (The collection is now created each time we invoke the method)?\"", "author": "manusa", "createdAt": "2020-09-28T10:02:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc0MDY1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgyOTc1OA==", "url": "https://github.com/eclipse/jkube/pull/406#discussion_r495829758", "bodyText": "ohk, let me revert to static initialization inside KubernetesResourceUtil", "author": "rohanKanojia", "createdAt": "2020-09-28T10:08:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc0MDY1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU0NDE0MQ==", "url": "https://github.com/eclipse/jkube/pull/406#discussion_r496544141", "bodyText": "I think this one still pending.", "author": "manusa", "createdAt": "2020-09-29T08:44:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc0MDY1MQ=="}], "type": "inlineReview", "revised_code": {"commit": "fca541fff543cc576c625cee84e10ba70894572c", "chunk": "diff --git a/jkube-kit/enricher/api/src/main/java/org/eclipse/jkube/kit/enricher/api/util/KubernetesResourceUtil.java b/jkube-kit/enricher/api/src/main/java/org/eclipse/jkube/kit/enricher/api/util/KubernetesResourceUtil.java\nindex c6a4dcff..f7e1fdec 100644\n--- a/jkube-kit/enricher/api/src/main/java/org/eclipse/jkube/kit/enricher/api/util/KubernetesResourceUtil.java\n+++ b/jkube-kit/enricher/api/src/main/java/org/eclipse/jkube/kit/enricher/api/util/KubernetesResourceUtil.java\n\n@@ -726,7 +726,7 @@ public class KubernetesResourceUtil {\n     }\n \n     private static boolean isSimpleFieldType(Class<?> type) {\n-        ArrayList<Class<?>> simpleFieldTypes = new ArrayList<>();\n+        Set<Class<?>> simpleFieldTypes = new HashSet<>();\n         simpleFieldTypes.add(String.class);\n         simpleFieldTypes.add(Double.class);\n         simpleFieldTypes.add(Float.class);\n"}}, {"oid": "fca541fff543cc576c625cee84e10ba70894572c", "url": "https://github.com/eclipse/jkube/commit/fca541fff543cc576c625cee84e10ba70894572c", "message": "Fix #382: Add support for merging fragment Route spec with default generated Route", "committedDate": "2020-09-28T07:43:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgzMDU3Ng==", "url": "https://github.com/eclipse/jkube/pull/406#discussion_r495830576", "bodyText": "MapUtil.mergeMaps already takes care of the initial checks you've done here (+ preserves immutability)\n\n  \n    \n      jkube/jkube-kit/common/src/main/java/org/eclipse/jkube/kit/common/util/MapUtil.java\n    \n    \n        Lines 59 to 67\n      in\n      645268c\n    \n    \n    \n    \n\n        \n          \n           public static <K,V> Map<K,V> mergeMaps(Map<K, V> map1, Map<K, V> map2) { \n        \n\n        \n          \n               Map<K, V> answer = new HashMap<>(); \n        \n\n        \n          \n               if (map2 != null) { \n        \n\n        \n          \n                   answer.putAll(map2); \n        \n\n        \n          \n               } \n        \n\n        \n          \n               if (map1 != null) { \n        \n\n        \n          \n                   answer.putAll(map1); \n        \n\n        \n          \n               } \n        \n\n        \n          \n               return answer; \n        \n    \n  \n\n\nYou probably just want to do this:\nfinal Map<String, String> answer = MapUtil.mergeMaps(overrideMap, originalMap);\nif (overrideMap != null && originalMap != null) {\n  /* ... */\n}\nreturn answer;", "author": "manusa", "createdAt": "2020-09-28T10:09:43Z", "path": "jkube-kit/enricher/api/src/main/java/org/eclipse/jkube/kit/enricher/api/util/KubernetesResourceUtil.java", "diffHunk": "@@ -983,16 +1002,24 @@ protected static void mergeMetadata(HasMetadata item1, HasMetadata item2) {\n      * when overriding\n      */\n     private static Map<String, String> mergeMapsAndRemoveEmptyStrings(Map<String, String> overrideMap, Map<String, String> originalMap) {\n-        Map<String, String> answer = MapUtil.mergeMaps(overrideMap, originalMap);\n-        Set<Map.Entry<String, String>> entries = overrideMap.entrySet();\n-        for (Map.Entry<String, String> entry : entries) {\n-            String value = entry.getValue();\n-            if (value == null || value.isEmpty()) {\n-                String key = entry.getKey();\n-                answer.remove(key);\n+        if (overrideMap == null && originalMap == null) {\n+            return Collections.emptyMap();\n+        } else if (originalMap == null) {\n+            return overrideMap;\n+        } else if (overrideMap == null) {\n+            return originalMap;", "originalCommit": "fca541fff543cc576c625cee84e10ba70894572c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5a9672b5106ec7b658aa8719ce441321b4785852", "chunk": "diff --git a/jkube-kit/enricher/api/src/main/java/org/eclipse/jkube/kit/enricher/api/util/KubernetesResourceUtil.java b/jkube-kit/enricher/api/src/main/java/org/eclipse/jkube/kit/enricher/api/util/KubernetesResourceUtil.java\nindex f7e1fdec..9d4b3ed1 100644\n--- a/jkube-kit/enricher/api/src/main/java/org/eclipse/jkube/kit/enricher/api/util/KubernetesResourceUtil.java\n+++ b/jkube-kit/enricher/api/src/main/java/org/eclipse/jkube/kit/enricher/api/util/KubernetesResourceUtil.java\n\n@@ -1002,14 +1002,8 @@ public class KubernetesResourceUtil {\n      * when overriding\n      */\n     private static Map<String, String> mergeMapsAndRemoveEmptyStrings(Map<String, String> overrideMap, Map<String, String> originalMap) {\n-        if (overrideMap == null && originalMap == null) {\n-            return Collections.emptyMap();\n-        } else if (originalMap == null) {\n-            return overrideMap;\n-        } else if (overrideMap == null) {\n-            return originalMap;\n-        } else {\n-            Map<String, String> answer = MapUtil.mergeMaps(overrideMap, originalMap);\n+        Map<String, String> answer = MapUtil.mergeMaps(overrideMap, originalMap);\n+        if (overrideMap != null && originalMap != null) {\n             Set<Map.Entry<String, String>> entries = overrideMap.entrySet();\n             for (Map.Entry<String, String> entry : entries) {\n                 String value = entry.getValue();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgzNjQxMQ==", "url": "https://github.com/eclipse/jkube/pull/406#discussion_r495836411", "bodyText": "This comment is completely irrelevant.\nIf you want to add a helpful comment because it's necessary and cannot be inferred with a test, then write something like\n// Update version because of/due to....\nI read the code and still don't understand why the change in the api version is required. This comment only tells me what I can already read in the code.", "author": "manusa", "createdAt": "2020-09-28T10:21:03Z", "path": "jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/openshift/RouteEnricher.java", "diffHunk": "@@ -157,58 +151,111 @@ private boolean hasExactlyOneServicePort(ServiceBuilder service, String id) {\n         }\n     }\n \n-    private void addRoute(KubernetesListBuilder listBuilder, ServiceBuilder serviceBuilder, List<Route> routes) {\n+    private void addRoute(KubernetesListBuilder listBuilder, ServiceBuilder serviceBuilder) {\n         ObjectMeta serviceMetadata = serviceBuilder.buildMetadata();\n \n         if (serviceMetadata != null && StringUtils.isNotBlank(serviceMetadata.getName())\n                 && hasExactlyOneServicePort(serviceBuilder, serviceMetadata.getName()) && isExposedService(serviceMetadata)) {\n             String name = serviceMetadata.getName();\n-            if (!hasRoute(listBuilder, name)) {\n-                if (StringUtils.isNotBlank(routeDomainPostfix)) {\n-                    routeDomainPostfix = prepareHostForRoute(routeDomainPostfix, name);\n-                } else {\n-                    routeDomainPostfix = \"\";\n+            updateRouteDomainPostFixBasedOnServiceName(name);\n+            Route opinionatedRoute = createOpinionatedRouteFromService(serviceBuilder, routeDomainPostfix);\n+            if (opinionatedRoute != null) {\n+                int routeFromFragmentIndex = getRouteIndexWithName(listBuilder, name);\n+                if (routeFromFragmentIndex > 0) { // Merge fragment with Opinionated Route\n+                    Route routeFragment = (Route) listBuilder.buildItems().get(routeFromFragmentIndex);\n+                    Route mergedRoute = mergeRoute(routeFragment, opinionatedRoute);\n+                    KubernetesResourceUtil.removeItemFromKubernetesBuilder(listBuilder, listBuilder.getItems().get(routeFromFragmentIndex));\n+                    listBuilder.addToItems(mergedRoute);\n+                } else { // No fragment provided. Use Opinionated Route.\n+                    listBuilder.addToItems(opinionatedRoute);\n                 }\n+            }\n+        }\n+    }\n \n-                RoutePort routePort = createRoutePort(serviceBuilder);\n-                if (routePort != null) {\n-                    RouteBuilder routeBuilder = new RouteBuilder().\n-                            withMetadata(serviceMetadata).\n-                            withNewSpec().\n-                            withPort(routePort).\n-                            withNewTo().withKind(\"Service\").withName(name).endTo().\n-                            withHost(routeDomainPostfix.isEmpty() ? null : routeDomainPostfix).\n-                            endSpec();\n-\n-                    // removing `expose : true` label from metadata.\n-                    removeLabel(routeBuilder.buildMetadata(), EXPOSE_LABEL, \"true\");\n-                    removeLabel(routeBuilder.buildMetadata(), JKubeAnnotations.SERVICE_EXPOSE_URL.value(), \"true\");\n-                    routeBuilder.withNewMetadataLike(routeBuilder.buildMetadata());\n-                    routes.add(routeBuilder.build());\n-                }\n+    private void updateRouteDomainPostFixBasedOnServiceName(String serviceName) {\n+        if (StringUtils.isNotBlank(routeDomainPostfix)) {\n+            routeDomainPostfix = prepareHostForRoute(routeDomainPostfix, serviceName);\n+        } else {\n+            routeDomainPostfix = \"\";\n+        }\n+    }\n+\n+    static Route mergeRoute(Route routeFromFragment, Route opinionatedRoute) {\n+        // Update ApiVersion to route.openshift.io/v1", "originalCommit": "fca541fff543cc576c625cee84e10ba70894572c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg3NDYxNw==", "url": "https://github.com/eclipse/jkube/pull/406#discussion_r495874617", "bodyText": "#383", "author": "manusa", "createdAt": "2020-09-28T11:38:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgzNjQxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "5a9672b5106ec7b658aa8719ce441321b4785852", "chunk": "diff --git a/jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/openshift/RouteEnricher.java b/jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/openshift/RouteEnricher.java\nindex 610d0b17..b1a7704b 100644\n--- a/jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/openshift/RouteEnricher.java\n+++ b/jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/openshift/RouteEnricher.java\n\n@@ -164,7 +166,7 @@ public class RouteEnricher extends BaseEnricher {\n                 if (routeFromFragmentIndex > 0) { // Merge fragment with Opinionated Route\n                     Route routeFragment = (Route) listBuilder.buildItems().get(routeFromFragmentIndex);\n                     Route mergedRoute = mergeRoute(routeFragment, opinionatedRoute);\n-                    KubernetesResourceUtil.removeItemFromKubernetesBuilder(listBuilder, listBuilder.getItems().get(routeFromFragmentIndex));\n+                    removeItemFromKubernetesBuilder(listBuilder, listBuilder.getItems().get(routeFromFragmentIndex));\n                     listBuilder.addToItems(mergedRoute);\n                 } else { // No fragment provided. Use Opinionated Route.\n                     listBuilder.addToItems(opinionatedRoute);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgzNzE2MA==", "url": "https://github.com/eclipse/jkube/pull/406#discussion_r495837160", "bodyText": "More irrelevant comments, I can read this in the code thanks to the helpful method name mergeMetadata\nIf you do an import static of the method, it will be even more obvious.", "author": "manusa", "createdAt": "2020-09-28T10:22:29Z", "path": "jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/openshift/RouteEnricher.java", "diffHunk": "@@ -157,58 +151,111 @@ private boolean hasExactlyOneServicePort(ServiceBuilder service, String id) {\n         }\n     }\n \n-    private void addRoute(KubernetesListBuilder listBuilder, ServiceBuilder serviceBuilder, List<Route> routes) {\n+    private void addRoute(KubernetesListBuilder listBuilder, ServiceBuilder serviceBuilder) {\n         ObjectMeta serviceMetadata = serviceBuilder.buildMetadata();\n \n         if (serviceMetadata != null && StringUtils.isNotBlank(serviceMetadata.getName())\n                 && hasExactlyOneServicePort(serviceBuilder, serviceMetadata.getName()) && isExposedService(serviceMetadata)) {\n             String name = serviceMetadata.getName();\n-            if (!hasRoute(listBuilder, name)) {\n-                if (StringUtils.isNotBlank(routeDomainPostfix)) {\n-                    routeDomainPostfix = prepareHostForRoute(routeDomainPostfix, name);\n-                } else {\n-                    routeDomainPostfix = \"\";\n+            updateRouteDomainPostFixBasedOnServiceName(name);\n+            Route opinionatedRoute = createOpinionatedRouteFromService(serviceBuilder, routeDomainPostfix);\n+            if (opinionatedRoute != null) {\n+                int routeFromFragmentIndex = getRouteIndexWithName(listBuilder, name);\n+                if (routeFromFragmentIndex > 0) { // Merge fragment with Opinionated Route\n+                    Route routeFragment = (Route) listBuilder.buildItems().get(routeFromFragmentIndex);\n+                    Route mergedRoute = mergeRoute(routeFragment, opinionatedRoute);\n+                    KubernetesResourceUtil.removeItemFromKubernetesBuilder(listBuilder, listBuilder.getItems().get(routeFromFragmentIndex));\n+                    listBuilder.addToItems(mergedRoute);\n+                } else { // No fragment provided. Use Opinionated Route.\n+                    listBuilder.addToItems(opinionatedRoute);\n                 }\n+            }\n+        }\n+    }\n \n-                RoutePort routePort = createRoutePort(serviceBuilder);\n-                if (routePort != null) {\n-                    RouteBuilder routeBuilder = new RouteBuilder().\n-                            withMetadata(serviceMetadata).\n-                            withNewSpec().\n-                            withPort(routePort).\n-                            withNewTo().withKind(\"Service\").withName(name).endTo().\n-                            withHost(routeDomainPostfix.isEmpty() ? null : routeDomainPostfix).\n-                            endSpec();\n-\n-                    // removing `expose : true` label from metadata.\n-                    removeLabel(routeBuilder.buildMetadata(), EXPOSE_LABEL, \"true\");\n-                    removeLabel(routeBuilder.buildMetadata(), JKubeAnnotations.SERVICE_EXPOSE_URL.value(), \"true\");\n-                    routeBuilder.withNewMetadataLike(routeBuilder.buildMetadata());\n-                    routes.add(routeBuilder.build());\n-                }\n+    private void updateRouteDomainPostFixBasedOnServiceName(String serviceName) {\n+        if (StringUtils.isNotBlank(routeDomainPostfix)) {\n+            routeDomainPostfix = prepareHostForRoute(routeDomainPostfix, serviceName);\n+        } else {\n+            routeDomainPostfix = \"\";\n+        }\n+    }\n+\n+    static Route mergeRoute(Route routeFromFragment, Route opinionatedRoute) {\n+        // Update ApiVersion to route.openshift.io/v1\n+        if (routeFromFragment.getApiVersion().equals(\"v1\")) {\n+            routeFromFragment.setApiVersion(opinionatedRoute.getApiVersion());\n+        }\n+\n+        // Merge metadata", "originalCommit": "fca541fff543cc576c625cee84e10ba70894572c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5a9672b5106ec7b658aa8719ce441321b4785852", "chunk": "diff --git a/jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/openshift/RouteEnricher.java b/jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/openshift/RouteEnricher.java\nindex 610d0b17..b1a7704b 100644\n--- a/jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/openshift/RouteEnricher.java\n+++ b/jkube-kit/enricher/generic/src/main/java/org/eclipse/jkube/enricher/generic/openshift/RouteEnricher.java\n\n@@ -164,7 +166,7 @@ public class RouteEnricher extends BaseEnricher {\n                 if (routeFromFragmentIndex > 0) { // Merge fragment with Opinionated Route\n                     Route routeFragment = (Route) listBuilder.buildItems().get(routeFromFragmentIndex);\n                     Route mergedRoute = mergeRoute(routeFragment, opinionatedRoute);\n-                    KubernetesResourceUtil.removeItemFromKubernetesBuilder(listBuilder, listBuilder.getItems().get(routeFromFragmentIndex));\n+                    removeItemFromKubernetesBuilder(listBuilder, listBuilder.getItems().get(routeFromFragmentIndex));\n                     listBuilder.addToItems(mergedRoute);\n                 } else { // No fragment provided. Use Opinionated Route.\n                     listBuilder.addToItems(opinionatedRoute);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgzODMyNg==", "url": "https://github.com/eclipse/jkube/pull/406#discussion_r495838326", "bodyText": "If you preserve indentation. it's much easier to read.\nSurround the code with // @formatter:off // @formatter:on comments so that autoformat won't accidentally break indentation.", "author": "manusa", "createdAt": "2020-09-28T10:24:40Z", "path": "jkube-kit/enricher/generic/src/test/java/org/eclipse/jkube/enricher/generic/openshift/RouteEnricherTest.java", "diffHunk": "@@ -171,6 +168,118 @@ public void testCreateWithDefaultsAndExistingRouteWithMatchingNameInBuilderInOpe\n             .containsExactly(\"Service\", \"Route\");\n         assertThat(klb.build().getItems().get(1))\n             .extracting(\"metadata.name\", \"spec.host\", \"spec.to.kind\", \"spec.to.name\", \"spec.port.targetPort.intVal\")\n-            .contains(\"test-svc\", \"example.com\", null, null, 1337);\n+            .contains(\"test-svc\", \"example.com\", \"Service\", \"test-svc\", 1337);\n+    }\n+\n+    @Test\n+    public void testCreateOpinionatedRouteFromService() {\n+        // Given\n+        ServiceBuilder serviceBuilder = getMockServiceBuilder();\n+\n+        // When\n+        Route route = RouteEnricher.createOpinionatedRouteFromService(serviceBuilder, \"example.com\");\n+\n+        // Then\n+        assertNotNull(route);\n+        assertThat(route)\n+                .extracting(\"metadata.name\", \"spec.host\", \"spec.to.kind\", \"spec.to.name\", \"spec.port.targetPort.intVal\")\n+                .contains(\"test-svc\", \"example.com\", \"Service\", \"test-svc\", 8080);\n+    }\n+\n+    @Test\n+    public void testCreateOpinionatedRouteFromServiceWithNullService() {\n+        // Given\n+        ServiceBuilder serviceBuilder = new ServiceBuilder();\n+\n+        // When\n+        Route route = RouteEnricher.createOpinionatedRouteFromService(serviceBuilder, \"example.com\");\n+\n+        // Then\n+        assertNull(route);\n+    }\n+\n+    @Test\n+    public void testIsExposedService() {\n+       assertTrue(RouteEnricher.isExposedService(new ObjectMetaBuilder().addToLabels(\"expose\", \"true\").build()));\n+       assertTrue(RouteEnricher.isExposedService(new ObjectMetaBuilder().addToLabels(\"jkube.io/exposeUrl\", \"true\").build()));\n+    }\n+\n+    @Test\n+    public void testMergeRouteWithEmptyFragment() {\n+        // Given\n+        Route opinionatedRoute = getMockOpinionatedRoute();\n+        Route fragmentRoute = new RouteBuilder().build();\n+\n+        // When\n+        Route result = RouteEnricher.mergeRoute(fragmentRoute, opinionatedRoute);\n+\n+        // Then\n+        assertNotNull(result);\n+        assertEquals(opinionatedRoute, result);\n+    }\n+\n+    @Test\n+    public void testMergeRouteWithNonEmptyFragment() {\n+        // Given\n+        Route opinionatedRoute = getMockOpinionatedRoute();\n+        Route fragmentRoute = new RouteBuilder()\n+                .withNewSpec()\n+                .withNewTls()\n+                .withInsecureEdgeTerminationPolicy(\"Redirect\")\n+                .withTermination(\"edge\")\n+                .endTls()\n+                .endSpec()\n+                .build();\n+\n+        // When\n+        Route result = RouteEnricher.mergeRoute(fragmentRoute, opinionatedRoute);\n+\n+        // Then\n+        assertNotNull(result);\n+        assertThat(result)\n+                .extracting(\"metadata.name\", \"spec.host\", \"spec.to.kind\", \"spec.to.name\",\n+                        \"spec.port.targetPort.intVal\", \"spec.tls.insecureEdgeTerminationPolicy\", \"spec.tls.termination\")\n+                .contains(\"test-svc\", \"example.com\", \"Service\", \"test-svc\",\n+                        8080, \"Redirect\", \"edge\");\n+    }\n+\n+    private Route getMockOpinionatedRoute() {\n+        return new RouteBuilder()\n+                .withNewMetadata().withName(\"test-svc\").endMetadata()\n+                .withNewSpec()\n+                .withNewPort()\n+                .withNewTargetPort().withIntVal(8080).endTargetPort()\n+                .endPort()\n+                .withHost(\"example.com\")\n+                .withNewTo().withKind(\"Service\").withName(\"test-svc\").endTo()\n+                .withNewTls()\n+                .withInsecureEdgeTerminationPolicy(\"Redirect\")\n+                .withTermination(\"edge\")\n+                .endTls()\n+                .addNewAlternateBackend()\n+                .withKind(\"Service\")\n+                .withName(\"test-svc-2\")\n+                .withWeight(10)\n+                .endAlternateBackend()\n+                .endSpec()\n+                .build();\n+    }\n+\n+    private ServiceBuilder getMockServiceBuilder() {\n+        return new ServiceBuilder()\n+                .editOrNewMetadata()\n+                .withName(\"test-svc\")\n+                .addToLabels(\"expose\", \"true\")\n+                .endMetadata()\n+                .editOrNewSpec()\n+                .addNewPort()\n+                .withName(\"http\")\n+                .withPort(8080)\n+                .withProtocol(\"TCP\")\n+                .withTargetPort(new IntOrString(8080))\n+                .endPort()\n+                .addToSelector(\"group\", \"test\")\n+                .withType(\"LoadBalancer\")\n+                .endSpec();", "originalCommit": "fca541fff543cc576c625cee84e10ba70894572c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5a9672b5106ec7b658aa8719ce441321b4785852", "chunk": "diff --git a/jkube-kit/enricher/generic/src/test/java/org/eclipse/jkube/enricher/generic/openshift/RouteEnricherTest.java b/jkube-kit/enricher/generic/src/test/java/org/eclipse/jkube/enricher/generic/openshift/RouteEnricherTest.java\nindex 9eb49a19..9a29d0a5 100644\n--- a/jkube-kit/enricher/generic/src/test/java/org/eclipse/jkube/enricher/generic/openshift/RouteEnricherTest.java\n+++ b/jkube-kit/enricher/generic/src/test/java/org/eclipse/jkube/enricher/generic/openshift/RouteEnricherTest.java\n\n@@ -244,42 +243,46 @@ public class RouteEnricherTest {\n     }\n \n     private Route getMockOpinionatedRoute() {\n+        // @formatter:off\n         return new RouteBuilder()\n                 .withNewMetadata().withName(\"test-svc\").endMetadata()\n                 .withNewSpec()\n-                .withNewPort()\n-                .withNewTargetPort().withIntVal(8080).endTargetPort()\n-                .endPort()\n-                .withHost(\"example.com\")\n-                .withNewTo().withKind(\"Service\").withName(\"test-svc\").endTo()\n-                .withNewTls()\n-                .withInsecureEdgeTerminationPolicy(\"Redirect\")\n-                .withTermination(\"edge\")\n-                .endTls()\n-                .addNewAlternateBackend()\n-                .withKind(\"Service\")\n-                .withName(\"test-svc-2\")\n-                .withWeight(10)\n-                .endAlternateBackend()\n-                .endSpec()\n+                    .withNewPort()\n+                        .withNewTargetPort().withIntVal(8080).endTargetPort()\n+                    .endPort()\n+                    .withHost(\"example.com\")\n+                    .withNewTo().withKind(\"Service\").withName(\"test-svc\").endTo()\n+                    .withNewTls()\n+                        .withInsecureEdgeTerminationPolicy(\"Redirect\")\n+                        .withTermination(\"edge\")\n+                    .endTls()\n+                    .addNewAlternateBackend()\n+                        .withKind(\"Service\")\n+                        .withName(\"test-svc-2\")\n+                        .withWeight(10)\n+                    .endAlternateBackend()\n+                    .endSpec()\n                 .build();\n+        // @formatter:on\n     }\n \n     private ServiceBuilder getMockServiceBuilder() {\n+        // @formatter:off\n         return new ServiceBuilder()\n                 .editOrNewMetadata()\n-                .withName(\"test-svc\")\n-                .addToLabels(\"expose\", \"true\")\n+                    .withName(\"test-svc\")\n+                    .addToLabels(\"expose\", \"true\")\n                 .endMetadata()\n                 .editOrNewSpec()\n-                .addNewPort()\n-                .withName(\"http\")\n-                .withPort(8080)\n-                .withProtocol(\"TCP\")\n-                .withTargetPort(new IntOrString(8080))\n-                .endPort()\n-                .addToSelector(\"group\", \"test\")\n-                .withType(\"LoadBalancer\")\n+                    .addNewPort()\n+                    .withName(\"http\")\n+                    .withPort(8080)\n+                        .withProtocol(\"TCP\")\n+                        .withTargetPort(new IntOrString(8080))\n+                    .endPort()\n+                    .addToSelector(\"group\", \"test\")\n+                    .withType(\"LoadBalancer\")\n                 .endSpec();\n+        // @formatter:on\n     }\n }\n"}}, {"oid": "5a9672b5106ec7b658aa8719ce441321b4785852", "url": "https://github.com/eclipse/jkube/commit/5a9672b5106ec7b658aa8719ce441321b4785852", "message": "Fix #382: Add support for merging fragment Route spec with default generated Route", "committedDate": "2020-09-28T17:26:45Z", "type": "forcePushed"}, {"oid": "08b3d8a141a36f7b9aea862793fe3165205cc561", "url": "https://github.com/eclipse/jkube/commit/08b3d8a141a36f7b9aea862793fe3165205cc561", "message": "Fix #382: Add support for merging fragment Route spec with default generated Route", "committedDate": "2020-09-29T09:21:51Z", "type": "forcePushed"}, {"oid": "95fabacca2853ef4a6e3c4897c7cabe17aa8136b", "url": "https://github.com/eclipse/jkube/commit/95fabacca2853ef4a6e3c4897c7cabe17aa8136b", "message": "Fix #382: Add support for merging fragment Route spec with default generated Route", "committedDate": "2020-09-29T14:19:49Z", "type": "commit"}, {"oid": "95fabacca2853ef4a6e3c4897c7cabe17aa8136b", "url": "https://github.com/eclipse/jkube/commit/95fabacca2853ef4a6e3c4897c7cabe17aa8136b", "message": "Fix #382: Add support for merging fragment Route spec with default generated Route", "committedDate": "2020-09-29T14:19:49Z", "type": "forcePushed"}]}