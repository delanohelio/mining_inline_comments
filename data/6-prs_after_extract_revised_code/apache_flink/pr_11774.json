{"pr_number": 11774, "pr_title": "[FLINK-17020][runtime] Introduce GlobalDataExchangeMode for JobGraph generation", "pr_createdAt": "2020-04-16T10:22:49Z", "pr_url": "https://github.com/apache/flink/pull/11774", "timeline": [{"oid": "1f72fb850f69449f4ef886ec0cad8a0644bab93d", "url": "https://github.com/apache/flink/commit/1f72fb850f69449f4ef886ec0cad8a0644bab93d", "message": "[FLINK-17020][runtime] Introduce GlobalDataExchangeMode for JobGraph generation", "committedDate": "2020-04-21T03:46:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkyNjE4Ng==", "url": "https://github.com/apache/flink/pull/11774#discussion_r413926186", "bodyText": "Maybe it makes sense to move the added tests to a new class.\nAlso, can be declared static.", "author": "GJL", "createdAt": "2020-04-23T16:05:23Z", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamingJobGraphGeneratorTest.java", "diffHunk": "@@ -898,6 +825,116 @@ public void testSlotSharingOnAllVerticesInSameSlotSharingGroupByDefaultDisabled(\n \t\tassertDistinctSharingGroups(source1Vertex, source2Vertex, map2Vertex);\n \t}\n \n+\t@Test\n+\tpublic void testDefaultGlobalDataExchangeModeIsAllEdgesPipelined() {\n+\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n+\t\tassertThat(streamGraph.getGlobalDataExchangeMode(), is(GlobalDataExchangeMode.ALL_EDGES_PIPELINED));\n+\t}\n+\n+\t@Test\n+\tpublic void testAllEdgesBlockingMode() {\n+\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n+\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.ALL_EDGES_BLOCKING);\n+\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n+\n+\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n+\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n+\t\tfinal JobVertex map1Vertex = verticesSorted.get(1);\n+\t\tfinal JobVertex map2Vertex = verticesSorted.get(2);\n+\n+\t\tassertEquals(ResultPartitionType.BLOCKING, sourceVertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.BLOCKING, map1Vertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.BLOCKING, map2Vertex.getProducedDataSets().get(0).getResultType());\n+\t}\n+\n+\t@Test\n+\tpublic void testAllEdgesPipelinedMode() {\n+\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n+\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.ALL_EDGES_PIPELINED);\n+\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n+\n+\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n+\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n+\t\tfinal JobVertex map1Vertex = verticesSorted.get(1);\n+\t\tfinal JobVertex map2Vertex = verticesSorted.get(2);\n+\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, map1Vertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, map2Vertex.getProducedDataSets().get(0).getResultType());\n+\t}\n+\n+\t@Test\n+\tpublic void testForwardEdgesPipelinedMode() {\n+\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n+\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.FORWARD_EDGES_PIPELINED);\n+\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n+\n+\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n+\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n+\t\tfinal JobVertex map1Vertex = verticesSorted.get(1);\n+\t\tfinal JobVertex map2Vertex = verticesSorted.get(2);\n+\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.BLOCKING, map1Vertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.BLOCKING, map2Vertex.getProducedDataSets().get(0).getResultType());\n+\t}\n+\n+\t@Test\n+\tpublic void testPointwiseEdgesPipelinedMode() {\n+\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n+\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.POINTWISE_EDGES_PIPELINED);\n+\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n+\n+\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n+\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n+\t\tfinal JobVertex map1Vertex = verticesSorted.get(1);\n+\t\tfinal JobVertex map2Vertex = verticesSorted.get(2);\n+\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, map1Vertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.BLOCKING, map2Vertex.getProducedDataSets().get(0).getResultType());\n+\t}\n+\n+\t@Test\n+\tpublic void testGlobalDataExchangeModeDoesNotOverrideSpecifiedShuffleMode() {\n+\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n+\t\tfinal DataStream<Integer> source = env.fromElements(1, 2, 3).setParallelism(1);\n+\t\tfinal DataStream<Integer> forward = new DataStream<>(env, new PartitionTransformation<>(\n+\t\t\tsource.getTransformation(), new ForwardPartitioner<>(), ShuffleMode.PIPELINED));\n+\t\tforward.map(i -> i).startNewChain().setParallelism(1);\n+\t\tfinal StreamGraph streamGraph = env.getStreamGraph();\n+\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.ALL_EDGES_BLOCKING);\n+\n+\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n+\n+\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n+\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n+\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType());\n+\t}\n+\n+\t/**\n+\t * Topology: source(parallelism=1) --(forward)--> map1(parallelism=1)\n+\t *           --(rescale)--> map2(parallelism=2) --(rebalance)--> sink(parallelism=2).\n+\t */\n+\tprivate StreamGraph createStreamGraphForGlobalDataExchangeModeTests() {", "originalCommit": "1f72fb850f69449f4ef886ec0cad8a0644bab93d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI3MDA3OA==", "url": "https://github.com/apache/flink/pull/11774#discussion_r414270078", "bodyText": "Ok. I have moved the tests to StreamingJobGraphGeneratorWithGlobalDataExchangeModeTest.\nAlso make this method static.", "author": "zhuzhurk", "createdAt": "2020-04-24T03:44:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkyNjE4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "b1316cec224ccda73e1eed8226c0b5b61f2c6e21", "chunk": "diff --git a/flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamingJobGraphGeneratorTest.java b/flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamingJobGraphGeneratorTest.java\nindex 8c256afddc..3ee0002b0c 100644\n--- a/flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamingJobGraphGeneratorTest.java\n+++ b/flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamingJobGraphGeneratorTest.java\n\n@@ -825,116 +825,6 @@ public class StreamingJobGraphGeneratorTest extends TestLogger {\n \t\tassertDistinctSharingGroups(source1Vertex, source2Vertex, map2Vertex);\n \t}\n \n-\t@Test\n-\tpublic void testDefaultGlobalDataExchangeModeIsAllEdgesPipelined() {\n-\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n-\t\tassertThat(streamGraph.getGlobalDataExchangeMode(), is(GlobalDataExchangeMode.ALL_EDGES_PIPELINED));\n-\t}\n-\n-\t@Test\n-\tpublic void testAllEdgesBlockingMode() {\n-\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n-\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.ALL_EDGES_BLOCKING);\n-\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n-\n-\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n-\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n-\t\tfinal JobVertex map1Vertex = verticesSorted.get(1);\n-\t\tfinal JobVertex map2Vertex = verticesSorted.get(2);\n-\n-\t\tassertEquals(ResultPartitionType.BLOCKING, sourceVertex.getProducedDataSets().get(0).getResultType());\n-\t\tassertEquals(ResultPartitionType.BLOCKING, map1Vertex.getProducedDataSets().get(0).getResultType());\n-\t\tassertEquals(ResultPartitionType.BLOCKING, map2Vertex.getProducedDataSets().get(0).getResultType());\n-\t}\n-\n-\t@Test\n-\tpublic void testAllEdgesPipelinedMode() {\n-\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n-\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.ALL_EDGES_PIPELINED);\n-\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n-\n-\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n-\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n-\t\tfinal JobVertex map1Vertex = verticesSorted.get(1);\n-\t\tfinal JobVertex map2Vertex = verticesSorted.get(2);\n-\n-\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType());\n-\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, map1Vertex.getProducedDataSets().get(0).getResultType());\n-\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, map2Vertex.getProducedDataSets().get(0).getResultType());\n-\t}\n-\n-\t@Test\n-\tpublic void testForwardEdgesPipelinedMode() {\n-\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n-\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.FORWARD_EDGES_PIPELINED);\n-\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n-\n-\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n-\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n-\t\tfinal JobVertex map1Vertex = verticesSorted.get(1);\n-\t\tfinal JobVertex map2Vertex = verticesSorted.get(2);\n-\n-\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType());\n-\t\tassertEquals(ResultPartitionType.BLOCKING, map1Vertex.getProducedDataSets().get(0).getResultType());\n-\t\tassertEquals(ResultPartitionType.BLOCKING, map2Vertex.getProducedDataSets().get(0).getResultType());\n-\t}\n-\n-\t@Test\n-\tpublic void testPointwiseEdgesPipelinedMode() {\n-\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n-\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.POINTWISE_EDGES_PIPELINED);\n-\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n-\n-\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n-\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n-\t\tfinal JobVertex map1Vertex = verticesSorted.get(1);\n-\t\tfinal JobVertex map2Vertex = verticesSorted.get(2);\n-\n-\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType());\n-\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, map1Vertex.getProducedDataSets().get(0).getResultType());\n-\t\tassertEquals(ResultPartitionType.BLOCKING, map2Vertex.getProducedDataSets().get(0).getResultType());\n-\t}\n-\n-\t@Test\n-\tpublic void testGlobalDataExchangeModeDoesNotOverrideSpecifiedShuffleMode() {\n-\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n-\t\tfinal DataStream<Integer> source = env.fromElements(1, 2, 3).setParallelism(1);\n-\t\tfinal DataStream<Integer> forward = new DataStream<>(env, new PartitionTransformation<>(\n-\t\t\tsource.getTransformation(), new ForwardPartitioner<>(), ShuffleMode.PIPELINED));\n-\t\tforward.map(i -> i).startNewChain().setParallelism(1);\n-\t\tfinal StreamGraph streamGraph = env.getStreamGraph();\n-\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.ALL_EDGES_BLOCKING);\n-\n-\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n-\n-\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n-\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n-\n-\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType());\n-\t}\n-\n-\t/**\n-\t * Topology: source(parallelism=1) --(forward)--> map1(parallelism=1)\n-\t *           --(rescale)--> map2(parallelism=2) --(rebalance)--> sink(parallelism=2).\n-\t */\n-\tprivate StreamGraph createStreamGraphForGlobalDataExchangeModeTests() {\n-\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n-\n-\t\tfinal DataStream<Integer> source = env.fromElements(1, 2, 3).setParallelism(1);\n-\n-\t\tfinal DataStream<Integer> forward = new DataStream<>(env, new PartitionTransformation<>(\n-\t\t\tsource.getTransformation(), new ForwardPartitioner<>(), ShuffleMode.UNDEFINED));\n-\t\tfinal DataStream<Integer> map1 = forward.map(i -> i).startNewChain().setParallelism(1);\n-\n-\t\tfinal DataStream<Integer> rescale = new DataStream<>(env, new PartitionTransformation<>(\n-\t\t\tmap1.getTransformation(), new RescalePartitioner<>(), ShuffleMode.UNDEFINED));\n-\t\tfinal DataStream<Integer> map2 = rescale.map(i -> i).setParallelism(2);\n-\n-\t\tmap2.rebalance().print().setParallelism(2);\n-\n-\t\treturn env.getStreamGraph();\n-\t}\n-\n \tprivate static List<JobVertex> getExpectedVerticesList(List<JobVertex> vertices) {\n \t\tfinal List<JobVertex> verticesMatched = new ArrayList<JobVertex>();\n \t\tfinal List<String> expectedOrder = Arrays.asList(\"source1\", \"source2\", \"map1\", \"map2\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk1OTE0Mg==", "url": "https://github.com/apache/flink/pull/11774#discussion_r413959142", "bodyText": "Is there a benefit compared to calling map1.rescale().map(i -> i).setParallelism(2) ?", "author": "GJL", "createdAt": "2020-04-23T16:49:07Z", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamingJobGraphGeneratorTest.java", "diffHunk": "@@ -898,6 +825,116 @@ public void testSlotSharingOnAllVerticesInSameSlotSharingGroupByDefaultDisabled(\n \t\tassertDistinctSharingGroups(source1Vertex, source2Vertex, map2Vertex);\n \t}\n \n+\t@Test\n+\tpublic void testDefaultGlobalDataExchangeModeIsAllEdgesPipelined() {\n+\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n+\t\tassertThat(streamGraph.getGlobalDataExchangeMode(), is(GlobalDataExchangeMode.ALL_EDGES_PIPELINED));\n+\t}\n+\n+\t@Test\n+\tpublic void testAllEdgesBlockingMode() {\n+\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n+\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.ALL_EDGES_BLOCKING);\n+\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n+\n+\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n+\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n+\t\tfinal JobVertex map1Vertex = verticesSorted.get(1);\n+\t\tfinal JobVertex map2Vertex = verticesSorted.get(2);\n+\n+\t\tassertEquals(ResultPartitionType.BLOCKING, sourceVertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.BLOCKING, map1Vertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.BLOCKING, map2Vertex.getProducedDataSets().get(0).getResultType());\n+\t}\n+\n+\t@Test\n+\tpublic void testAllEdgesPipelinedMode() {\n+\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n+\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.ALL_EDGES_PIPELINED);\n+\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n+\n+\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n+\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n+\t\tfinal JobVertex map1Vertex = verticesSorted.get(1);\n+\t\tfinal JobVertex map2Vertex = verticesSorted.get(2);\n+\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, map1Vertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, map2Vertex.getProducedDataSets().get(0).getResultType());\n+\t}\n+\n+\t@Test\n+\tpublic void testForwardEdgesPipelinedMode() {\n+\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n+\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.FORWARD_EDGES_PIPELINED);\n+\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n+\n+\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n+\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n+\t\tfinal JobVertex map1Vertex = verticesSorted.get(1);\n+\t\tfinal JobVertex map2Vertex = verticesSorted.get(2);\n+\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.BLOCKING, map1Vertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.BLOCKING, map2Vertex.getProducedDataSets().get(0).getResultType());\n+\t}\n+\n+\t@Test\n+\tpublic void testPointwiseEdgesPipelinedMode() {\n+\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n+\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.POINTWISE_EDGES_PIPELINED);\n+\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n+\n+\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n+\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n+\t\tfinal JobVertex map1Vertex = verticesSorted.get(1);\n+\t\tfinal JobVertex map2Vertex = verticesSorted.get(2);\n+\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, map1Vertex.getProducedDataSets().get(0).getResultType());\n+\t\tassertEquals(ResultPartitionType.BLOCKING, map2Vertex.getProducedDataSets().get(0).getResultType());\n+\t}\n+\n+\t@Test\n+\tpublic void testGlobalDataExchangeModeDoesNotOverrideSpecifiedShuffleMode() {\n+\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n+\t\tfinal DataStream<Integer> source = env.fromElements(1, 2, 3).setParallelism(1);\n+\t\tfinal DataStream<Integer> forward = new DataStream<>(env, new PartitionTransformation<>(\n+\t\t\tsource.getTransformation(), new ForwardPartitioner<>(), ShuffleMode.PIPELINED));\n+\t\tforward.map(i -> i).startNewChain().setParallelism(1);\n+\t\tfinal StreamGraph streamGraph = env.getStreamGraph();\n+\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.ALL_EDGES_BLOCKING);\n+\n+\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n+\n+\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n+\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n+\n+\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType());\n+\t}\n+\n+\t/**\n+\t * Topology: source(parallelism=1) --(forward)--> map1(parallelism=1)\n+\t *           --(rescale)--> map2(parallelism=2) --(rebalance)--> sink(parallelism=2).\n+\t */\n+\tprivate StreamGraph createStreamGraphForGlobalDataExchangeModeTests() {\n+\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n+\n+\t\tfinal DataStream<Integer> source = env.fromElements(1, 2, 3).setParallelism(1);\n+\n+\t\tfinal DataStream<Integer> forward = new DataStream<>(env, new PartitionTransformation<>(\n+\t\t\tsource.getTransformation(), new ForwardPartitioner<>(), ShuffleMode.UNDEFINED));\n+\t\tfinal DataStream<Integer> map1 = forward.map(i -> i).startNewChain().setParallelism(1);\n+\n+\t\tfinal DataStream<Integer> rescale = new DataStream<>(env, new PartitionTransformation<>(\n+\t\t\tmap1.getTransformation(), new RescalePartitioner<>(), ShuffleMode.UNDEFINED));\n+\t\tfinal DataStream<Integer> map2 = rescale.map(i -> i).setParallelism(2);", "originalCommit": "1f72fb850f69449f4ef886ec0cad8a0644bab93d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDI2OTgyNg==", "url": "https://github.com/apache/flink/pull/11774#discussion_r414269826", "bodyText": "By specifying ShuffleMode.UNDEFINED these test do not need to have the assumption that  ShuffleMode.UNDEFINED is the default value. So later if the default value is changed it will not break these tests.", "author": "zhuzhurk", "createdAt": "2020-04-24T03:43:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk1OTE0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "b1316cec224ccda73e1eed8226c0b5b61f2c6e21", "chunk": "diff --git a/flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamingJobGraphGeneratorTest.java b/flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamingJobGraphGeneratorTest.java\nindex 8c256afddc..3ee0002b0c 100644\n--- a/flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamingJobGraphGeneratorTest.java\n+++ b/flink-streaming-java/src/test/java/org/apache/flink/streaming/api/graph/StreamingJobGraphGeneratorTest.java\n\n@@ -825,116 +825,6 @@ public class StreamingJobGraphGeneratorTest extends TestLogger {\n \t\tassertDistinctSharingGroups(source1Vertex, source2Vertex, map2Vertex);\n \t}\n \n-\t@Test\n-\tpublic void testDefaultGlobalDataExchangeModeIsAllEdgesPipelined() {\n-\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n-\t\tassertThat(streamGraph.getGlobalDataExchangeMode(), is(GlobalDataExchangeMode.ALL_EDGES_PIPELINED));\n-\t}\n-\n-\t@Test\n-\tpublic void testAllEdgesBlockingMode() {\n-\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n-\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.ALL_EDGES_BLOCKING);\n-\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n-\n-\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n-\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n-\t\tfinal JobVertex map1Vertex = verticesSorted.get(1);\n-\t\tfinal JobVertex map2Vertex = verticesSorted.get(2);\n-\n-\t\tassertEquals(ResultPartitionType.BLOCKING, sourceVertex.getProducedDataSets().get(0).getResultType());\n-\t\tassertEquals(ResultPartitionType.BLOCKING, map1Vertex.getProducedDataSets().get(0).getResultType());\n-\t\tassertEquals(ResultPartitionType.BLOCKING, map2Vertex.getProducedDataSets().get(0).getResultType());\n-\t}\n-\n-\t@Test\n-\tpublic void testAllEdgesPipelinedMode() {\n-\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n-\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.ALL_EDGES_PIPELINED);\n-\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n-\n-\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n-\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n-\t\tfinal JobVertex map1Vertex = verticesSorted.get(1);\n-\t\tfinal JobVertex map2Vertex = verticesSorted.get(2);\n-\n-\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType());\n-\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, map1Vertex.getProducedDataSets().get(0).getResultType());\n-\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, map2Vertex.getProducedDataSets().get(0).getResultType());\n-\t}\n-\n-\t@Test\n-\tpublic void testForwardEdgesPipelinedMode() {\n-\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n-\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.FORWARD_EDGES_PIPELINED);\n-\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n-\n-\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n-\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n-\t\tfinal JobVertex map1Vertex = verticesSorted.get(1);\n-\t\tfinal JobVertex map2Vertex = verticesSorted.get(2);\n-\n-\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType());\n-\t\tassertEquals(ResultPartitionType.BLOCKING, map1Vertex.getProducedDataSets().get(0).getResultType());\n-\t\tassertEquals(ResultPartitionType.BLOCKING, map2Vertex.getProducedDataSets().get(0).getResultType());\n-\t}\n-\n-\t@Test\n-\tpublic void testPointwiseEdgesPipelinedMode() {\n-\t\tfinal StreamGraph streamGraph = createStreamGraphForGlobalDataExchangeModeTests();\n-\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.POINTWISE_EDGES_PIPELINED);\n-\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n-\n-\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n-\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n-\t\tfinal JobVertex map1Vertex = verticesSorted.get(1);\n-\t\tfinal JobVertex map2Vertex = verticesSorted.get(2);\n-\n-\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType());\n-\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, map1Vertex.getProducedDataSets().get(0).getResultType());\n-\t\tassertEquals(ResultPartitionType.BLOCKING, map2Vertex.getProducedDataSets().get(0).getResultType());\n-\t}\n-\n-\t@Test\n-\tpublic void testGlobalDataExchangeModeDoesNotOverrideSpecifiedShuffleMode() {\n-\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n-\t\tfinal DataStream<Integer> source = env.fromElements(1, 2, 3).setParallelism(1);\n-\t\tfinal DataStream<Integer> forward = new DataStream<>(env, new PartitionTransformation<>(\n-\t\t\tsource.getTransformation(), new ForwardPartitioner<>(), ShuffleMode.PIPELINED));\n-\t\tforward.map(i -> i).startNewChain().setParallelism(1);\n-\t\tfinal StreamGraph streamGraph = env.getStreamGraph();\n-\t\tstreamGraph.setGlobalDataExchangeMode(GlobalDataExchangeMode.ALL_EDGES_BLOCKING);\n-\n-\t\tfinal JobGraph jobGraph = StreamingJobGraphGenerator.createJobGraph(streamGraph);\n-\n-\t\tfinal List<JobVertex> verticesSorted = jobGraph.getVerticesSortedTopologicallyFromSources();\n-\t\tfinal JobVertex sourceVertex = verticesSorted.get(0);\n-\n-\t\tassertEquals(ResultPartitionType.PIPELINED_BOUNDED, sourceVertex.getProducedDataSets().get(0).getResultType());\n-\t}\n-\n-\t/**\n-\t * Topology: source(parallelism=1) --(forward)--> map1(parallelism=1)\n-\t *           --(rescale)--> map2(parallelism=2) --(rebalance)--> sink(parallelism=2).\n-\t */\n-\tprivate StreamGraph createStreamGraphForGlobalDataExchangeModeTests() {\n-\t\tfinal StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n-\n-\t\tfinal DataStream<Integer> source = env.fromElements(1, 2, 3).setParallelism(1);\n-\n-\t\tfinal DataStream<Integer> forward = new DataStream<>(env, new PartitionTransformation<>(\n-\t\t\tsource.getTransformation(), new ForwardPartitioner<>(), ShuffleMode.UNDEFINED));\n-\t\tfinal DataStream<Integer> map1 = forward.map(i -> i).startNewChain().setParallelism(1);\n-\n-\t\tfinal DataStream<Integer> rescale = new DataStream<>(env, new PartitionTransformation<>(\n-\t\t\tmap1.getTransformation(), new RescalePartitioner<>(), ShuffleMode.UNDEFINED));\n-\t\tfinal DataStream<Integer> map2 = rescale.map(i -> i).setParallelism(2);\n-\n-\t\tmap2.rebalance().print().setParallelism(2);\n-\n-\t\treturn env.getStreamGraph();\n-\t}\n-\n \tprivate static List<JobVertex> getExpectedVerticesList(List<JobVertex> vertices) {\n \t\tfinal List<JobVertex> verticesMatched = new ArrayList<JobVertex>();\n \t\tfinal List<String> expectedOrder = Arrays.asList(\"source1\", \"source2\", \"map1\", \"map2\");\n"}}, {"oid": "b1316cec224ccda73e1eed8226c0b5b61f2c6e21", "url": "https://github.com/apache/flink/commit/b1316cec224ccda73e1eed8226c0b5b61f2c6e21", "message": "[FLINK-17020][runtime] Introduce GlobalDataExchangeMode for JobGraph generation", "committedDate": "2020-04-24T03:40:18Z", "type": "commit"}, {"oid": "b1316cec224ccda73e1eed8226c0b5b61f2c6e21", "url": "https://github.com/apache/flink/commit/b1316cec224ccda73e1eed8226c0b5b61f2c6e21", "message": "[FLINK-17020][runtime] Introduce GlobalDataExchangeMode for JobGraph generation", "committedDate": "2020-04-24T03:40:18Z", "type": "forcePushed"}]}