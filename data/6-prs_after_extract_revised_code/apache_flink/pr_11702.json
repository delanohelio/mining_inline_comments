{"pr_number": 11702, "pr_title": "[FLINK-16667][python][client] Support new Python dependency configuration options in flink-client.", "pr_createdAt": "2020-04-10T13:22:39Z", "pr_url": "https://github.com/apache/flink/pull/11702", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk3NTg5Mg==", "url": "https://github.com/apache/flink/pull/11702#discussion_r407975892", "bodyText": "The validate is redundant", "author": "dianfu", "createdAt": "2020-04-14T08:58:05Z", "path": "flink-clients/src/main/java/org/apache/flink/client/cli/CliFrontend.java", "diffHunk": "@@ -667,31 +660,17 @@ protected void executeProgram(final Configuration configuration, final PackagedP\n \t *\n \t * @return A PackagedProgram (upon success)\n \t */\n-\tPackagedProgram buildProgram(final ProgramOptions runOptions) throws FileNotFoundException, ProgramInvocationException {\n+\tPackagedProgram buildProgram(final ProgramOptions runOptions)\n+\t\t\tthrows FileNotFoundException, ProgramInvocationException, CliArgsException {\n+\t\trunOptions.validate();", "originalCommit": "b5592f7b7e489318e61567dd3cf1a2f0bbe3beeb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk3NjQ4MA==", "url": "https://github.com/apache/flink/pull/11702#discussion_r407976480", "bodyText": "ditto", "author": "dianfu", "createdAt": "2020-04-14T08:58:58Z", "path": "flink-clients/src/main/java/org/apache/flink/client/cli/CliFrontend.java", "diffHunk": "@@ -240,17 +235,15 @@ protected void info(String[] args) throws Exception {\n \n \t\tfinal CommandLine commandLine = CliFrontendParser.parse(commandOptions, args, true);\n \n-\t\tfinal ProgramOptions programOptions = new ProgramOptions(commandLine);\n+\t\tfinal ProgramOptions programOptions = ProgramOptions.create(commandLine);\n \n \t\t// evaluate help flag\n \t\tif (commandLine.hasOption(HELP_OPTION.getOpt())) {\n \t\t\tCliFrontendParser.printHelpForInfo();\n \t\t\treturn;\n \t\t}\n \n-\t\tif (programOptions.getJarFilePath() == null) {\n-\t\t\tthrow new CliArgsException(\"The program JAR file was not specified.\");\n-\t\t}\n+\t\tprogramOptions.validate();", "originalCommit": "b5592f7b7e489318e61567dd3cf1a2f0bbe3beeb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aee3e2d050662cf5e45e0108c09354d3d172a84c", "chunk": "diff --git a/flink-clients/src/main/java/org/apache/flink/client/cli/CliFrontend.java b/flink-clients/src/main/java/org/apache/flink/client/cli/CliFrontend.java\nindex b11b513e83..dc64eb30ec 100644\n--- a/flink-clients/src/main/java/org/apache/flink/client/cli/CliFrontend.java\n+++ b/flink-clients/src/main/java/org/apache/flink/client/cli/CliFrontend.java\n\n@@ -243,8 +241,6 @@ public class CliFrontend {\n \t\t\treturn;\n \t\t}\n \n-\t\tprogramOptions.validate();\n-\n \t\t// -------- build the packaged program -------------\n \n \t\tLOG.info(\"Building program from JAR file\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk3NjcwMw==", "url": "https://github.com/apache/flink/pull/11702#discussion_r407976703", "bodyText": "The validate could be removed as it will be executed in buildProgram", "author": "dianfu", "createdAt": "2020-04-14T08:59:14Z", "path": "flink-clients/src/main/java/org/apache/flink/client/cli/CliFrontend.java", "diffHunk": "@@ -176,20 +176,15 @@ protected void run(String[] args) throws Exception {\n \t\tfinal Options commandOptions = CliFrontendParser.getRunCommandOptions();\n \t\tfinal CommandLine commandLine = getCommandLine(commandOptions, args, true);\n \n-\t\tfinal ProgramOptions programOptions = new ProgramOptions(commandLine);\n+\t\tfinal ProgramOptions programOptions = ProgramOptions.create(commandLine);\n \n \t\t// evaluate help flag\n \t\tif (commandLine.hasOption(HELP_OPTION.getOpt())) {\n \t\t\tCliFrontendParser.printHelpForRun(customCommandLines);\n \t\t\treturn;\n \t\t}\n \n-\t\tif (!programOptions.isPython()) {\n-\t\t\t// Java program should be specified a JAR file\n-\t\t\tif (programOptions.getJarFilePath() == null) {\n-\t\t\t\tthrow new CliArgsException(\"Java program should be specified a JAR file.\");\n-\t\t\t}\n-\t\t}\n+\t\tprogramOptions.validate();", "originalCommit": "b5592f7b7e489318e61567dd3cf1a2f0bbe3beeb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aee3e2d050662cf5e45e0108c09354d3d172a84c", "chunk": "diff --git a/flink-clients/src/main/java/org/apache/flink/client/cli/CliFrontend.java b/flink-clients/src/main/java/org/apache/flink/client/cli/CliFrontend.java\nindex b11b513e83..dc64eb30ec 100644\n--- a/flink-clients/src/main/java/org/apache/flink/client/cli/CliFrontend.java\n+++ b/flink-clients/src/main/java/org/apache/flink/client/cli/CliFrontend.java\n\n@@ -184,8 +184,6 @@ public class CliFrontend {\n \t\t\treturn;\n \t\t}\n \n-\t\tprogramOptions.validate();\n-\n \t\tfinal PackagedProgram program;\n \t\ttry {\n \t\t\tLOG.info(\"Building program from JAR file\");\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk3ODIwNw==", "url": "https://github.com/apache/flink/pull/11702#discussion_r407978207", "bodyText": "unnecessary change", "author": "dianfu", "createdAt": "2020-04-14T09:01:33Z", "path": "flink-clients/src/main/java/org/apache/flink/client/cli/ProgramOptions.java", "diffHunk": "@@ -22,43 +22,36 @@\n import org.apache.flink.runtime.jobgraph.SavepointRestoreSettings;\n \n import org.apache.commons.cli.CommandLine;\n-import org.apache.commons.cli.Option;\n \n import java.net.MalformedURLException;\n import java.net.URL;\n import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.HashSet;\n import java.util.List;\n-import java.util.Set;\n \n import static org.apache.flink.client.cli.CliFrontendParser.ARGS_OPTION;\n import static org.apache.flink.client.cli.CliFrontendParser.CLASSPATH_OPTION;\n import static org.apache.flink.client.cli.CliFrontendParser.CLASS_OPTION;\n import static org.apache.flink.client.cli.CliFrontendParser.DETACHED_OPTION;\n import static org.apache.flink.client.cli.CliFrontendParser.JAR_OPTION;\n import static org.apache.flink.client.cli.CliFrontendParser.PARALLELISM_OPTION;\n-import static org.apache.flink.client.cli.CliFrontendParser.PYARCHIVE_OPTION;\n-import static org.apache.flink.client.cli.CliFrontendParser.PYEXEC_OPTION;\n-import static org.apache.flink.client.cli.CliFrontendParser.PYFILES_OPTION;\n-import static org.apache.flink.client.cli.CliFrontendParser.PYMODULE_OPTION;\n-import static org.apache.flink.client.cli.CliFrontendParser.PYREQUIREMENTS_OPTION;\n-import static org.apache.flink.client.cli.CliFrontendParser.PY_OPTION;\n import static org.apache.flink.client.cli.CliFrontendParser.SHUTDOWN_IF_ATTACHED_OPTION;\n import static org.apache.flink.client.cli.CliFrontendParser.YARN_DETACHED_OPTION;\n+import static org.apache.flink.client.cli.PythonProgramOptions.containsPythonDependency;\n+import static org.apache.flink.client.cli.PythonProgramOptions.isPython;\n \n /**\n  * Base class for command line options that refer to a JAR file program.\n  */\n public class ProgramOptions extends CommandLineOptions {\n \n-\tprivate final String jarFilePath;\n+\tprivate String jarFilePath;\n \n-\tprivate final String entryPointClass;\n+\tprotected String entryPointClass;\n \n \tprivate final List<URL> classpaths;\n \n-\tprivate final String[] programArgs;", "originalCommit": "b5592f7b7e489318e61567dd3cf1a2f0bbe3beeb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aee3e2d050662cf5e45e0108c09354d3d172a84c", "chunk": "diff --git a/flink-clients/src/main/java/org/apache/flink/client/cli/ProgramOptions.java b/flink-clients/src/main/java/org/apache/flink/client/cli/ProgramOptions.java\nindex 5d6f82178b..79d0a0449d 100644\n--- a/flink-clients/src/main/java/org/apache/flink/client/cli/ProgramOptions.java\n+++ b/flink-clients/src/main/java/org/apache/flink/client/cli/ProgramOptions.java\n\n@@ -19,6 +19,11 @@\n package org.apache.flink.client.cli;\n \n import org.apache.flink.api.common.ExecutionConfig;\n+import org.apache.flink.configuration.ConfigUtils;\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.configuration.CoreOptions;\n+import org.apache.flink.configuration.DeploymentOptions;\n+import org.apache.flink.configuration.PipelineOptions;\n import org.apache.flink.runtime.jobgraph.SavepointRestoreSettings;\n \n import org.apache.commons.cli.CommandLine;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk4MTc2NQ==", "url": "https://github.com/apache/flink/pull/11702#discussion_r407981765", "bodyText": "Remove to reflect the flink-python class.", "author": "dianfu", "createdAt": "2020-04-14T09:07:21Z", "path": "flink-clients/src/main/java/org/apache/flink/client/cli/PythonProgramOptions.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.client.cli;\n+\n+import org.apache.flink.client.program.PackagedProgramUtils;\n+import org.apache.flink.configuration.Configuration;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.Option;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.apache.flink.client.cli.CliFrontendParser.ARGS_OPTION;\n+import static org.apache.flink.client.cli.CliFrontendParser.CLASS_OPTION;\n+import static org.apache.flink.client.cli.CliFrontendParser.PYARCHIVE_OPTION;\n+import static org.apache.flink.client.cli.CliFrontendParser.PYEXEC_OPTION;\n+import static org.apache.flink.client.cli.CliFrontendParser.PYFILES_OPTION;\n+import static org.apache.flink.client.cli.CliFrontendParser.PYMODULE_OPTION;\n+import static org.apache.flink.client.cli.CliFrontendParser.PYREQUIREMENTS_OPTION;\n+import static org.apache.flink.client.cli.CliFrontendParser.PY_OPTION;\n+\n+/**\n+ * The class for command line options that refer to a Python program or JAR program with Python command line options.\n+ */\n+public class PythonProgramOptions extends ProgramOptions {\n+\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(PythonProgramOptions.class);\n+\n+\tprivate final Configuration pythonConfiguration;\n+\n+\tPythonProgramOptions(CommandLine line) throws CliArgsException {\n+\t\tsuper(line);\n+\t\ttry {\n+\t\t\tClassLoader classLoader;\n+\t\t\ttry {\n+\t\t\t\tclassLoader = new URLClassLoader(\n+\t\t\t\t\tnew URL[]{PackagedProgramUtils.getPythonJar()},\n+\t\t\t\t\tThread.currentThread().getContextClassLoader());\n+\t\t\t} catch (RuntimeException e) {\n+\t\t\t\tLOG.warn(\n+\t\t\t\t\t\"An attempt to load the flink-python jar from the \\\"opt\\\" directory failed, \" +\n+\t\t\t\t\t\t\"fall back to use the context class loader to reflect the flink-python class.\", e);", "originalCommit": "b5592f7b7e489318e61567dd3cf1a2f0bbe3beeb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aee3e2d050662cf5e45e0108c09354d3d172a84c", "chunk": "diff --git a/flink-clients/src/main/java/org/apache/flink/client/cli/PythonProgramOptions.java b/flink-python/src/main/java/org/apache/flink/client/cli/PythonProgramOptions.java\nsimilarity index 52%\nrename from flink-clients/src/main/java/org/apache/flink/client/cli/PythonProgramOptions.java\nrename to flink-python/src/main/java/org/apache/flink/client/cli/PythonProgramOptions.java\nindex d342e2519e..2dee745e8d 100644\n--- a/flink-clients/src/main/java/org/apache/flink/client/cli/PythonProgramOptions.java\n+++ b/flink-python/src/main/java/org/apache/flink/client/cli/PythonProgramOptions.java\n\n@@ -18,71 +18,35 @@\n \n package org.apache.flink.client.cli;\n \n-import org.apache.flink.client.program.PackagedProgramUtils;\n import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.python.util.PythonDependencyUtils;\n \n import org.apache.commons.cli.CommandLine;\n import org.apache.commons.cli.Option;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n-import java.net.URL;\n-import java.net.URLClassLoader;\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n \n import static org.apache.flink.client.cli.CliFrontendParser.ARGS_OPTION;\n-import static org.apache.flink.client.cli.CliFrontendParser.CLASS_OPTION;\n-import static org.apache.flink.client.cli.CliFrontendParser.PYARCHIVE_OPTION;\n-import static org.apache.flink.client.cli.CliFrontendParser.PYEXEC_OPTION;\n-import static org.apache.flink.client.cli.CliFrontendParser.PYFILES_OPTION;\n import static org.apache.flink.client.cli.CliFrontendParser.PYMODULE_OPTION;\n-import static org.apache.flink.client.cli.CliFrontendParser.PYREQUIREMENTS_OPTION;\n import static org.apache.flink.client.cli.CliFrontendParser.PY_OPTION;\n+import static org.apache.flink.client.cli.ProgramOptionsUtils.isPythonEntryPoint;\n \n /**\n  * The class for command line options that refer to a Python program or JAR program with Python command line options.\n  */\n public class PythonProgramOptions extends ProgramOptions {\n \n-\tprivate static final Logger LOG = LoggerFactory.getLogger(PythonProgramOptions.class);\n-\n \tprivate final Configuration pythonConfiguration;\n \n-\tPythonProgramOptions(CommandLine line) throws CliArgsException {\n+\tprivate final boolean isPython;\n+\n+\tpublic PythonProgramOptions(CommandLine line) throws CliArgsException {\n \t\tsuper(line);\n-\t\ttry {\n-\t\t\tClassLoader classLoader;\n-\t\t\ttry {\n-\t\t\t\tclassLoader = new URLClassLoader(\n-\t\t\t\t\tnew URL[]{PackagedProgramUtils.getPythonJar()},\n-\t\t\t\t\tThread.currentThread().getContextClassLoader());\n-\t\t\t} catch (RuntimeException e) {\n-\t\t\t\tLOG.warn(\n-\t\t\t\t\t\"An attempt to load the flink-python jar from the \\\"opt\\\" directory failed, \" +\n-\t\t\t\t\t\t\"fall back to use the context class loader to reflect the flink-python class.\", e);\n-\t\t\t\tclassLoader = Thread.currentThread().getContextClassLoader();\n-\t\t\t}\n-\t\t\tClass<?> utilClazz = Class.forName(\n-\t\t\t\t\"org.apache.flink.python.util.PythonDependencyUtils\",\n-\t\t\t\tfalse,\n-\t\t\t\tclassLoader);\n-\t\t\tMethod utilMethod = utilClazz.getMethod(\n-\t\t\t\t\"parseCommandLine\",\n-\t\t\t\tCommandLine.class);\n-\t\t\tpythonConfiguration = (Configuration) utilMethod.invoke(null, line);\n-\t\t} catch (NoSuchMethodException |\n-\t\t\tIllegalAccessException |\n-\t\t\tInvocationTargetException |\n-\t\t\tClassNotFoundException e) {\n-\t\t\tthrow new CliArgsException(\n-\t\t\t\t\"Python command line option detected but the flink-python module seems to be missing \" +\n-\t\t\t\t\t\"or not working as expected.\", e);\n-\t\t}\n+\t\tisPython = isPythonEntryPoint(line);\n+\t\tpythonConfiguration = PythonDependencyUtils.parsePythonDependencyConfiguration(line);\n \t\t// If the job is Python Shell job, the entry point class name is PythonGateWayServer.\n \t\t// Otherwise, the entry point class of python job is PythonDriver\n \t\tif (entryPointClass == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk4MjY1OA==", "url": "https://github.com/apache/flink/pull/11702#discussion_r407982658", "bodyText": "utilMethod -> parseCommandLineMethod", "author": "dianfu", "createdAt": "2020-04-14T09:08:37Z", "path": "flink-clients/src/main/java/org/apache/flink/client/cli/PythonProgramOptions.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.client.cli;\n+\n+import org.apache.flink.client.program.PackagedProgramUtils;\n+import org.apache.flink.configuration.Configuration;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.Option;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.apache.flink.client.cli.CliFrontendParser.ARGS_OPTION;\n+import static org.apache.flink.client.cli.CliFrontendParser.CLASS_OPTION;\n+import static org.apache.flink.client.cli.CliFrontendParser.PYARCHIVE_OPTION;\n+import static org.apache.flink.client.cli.CliFrontendParser.PYEXEC_OPTION;\n+import static org.apache.flink.client.cli.CliFrontendParser.PYFILES_OPTION;\n+import static org.apache.flink.client.cli.CliFrontendParser.PYMODULE_OPTION;\n+import static org.apache.flink.client.cli.CliFrontendParser.PYREQUIREMENTS_OPTION;\n+import static org.apache.flink.client.cli.CliFrontendParser.PY_OPTION;\n+\n+/**\n+ * The class for command line options that refer to a Python program or JAR program with Python command line options.\n+ */\n+public class PythonProgramOptions extends ProgramOptions {\n+\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(PythonProgramOptions.class);\n+\n+\tprivate final Configuration pythonConfiguration;\n+\n+\tPythonProgramOptions(CommandLine line) throws CliArgsException {\n+\t\tsuper(line);\n+\t\ttry {\n+\t\t\tClassLoader classLoader;\n+\t\t\ttry {\n+\t\t\t\tclassLoader = new URLClassLoader(\n+\t\t\t\t\tnew URL[]{PackagedProgramUtils.getPythonJar()},\n+\t\t\t\t\tThread.currentThread().getContextClassLoader());\n+\t\t\t} catch (RuntimeException e) {\n+\t\t\t\tLOG.warn(\n+\t\t\t\t\t\"An attempt to load the flink-python jar from the \\\"opt\\\" directory failed, \" +\n+\t\t\t\t\t\t\"fall back to use the context class loader to reflect the flink-python class.\", e);\n+\t\t\t\tclassLoader = Thread.currentThread().getContextClassLoader();\n+\t\t\t}\n+\t\t\tClass<?> utilClazz = Class.forName(\n+\t\t\t\t\"org.apache.flink.python.util.PythonDependencyUtils\",\n+\t\t\t\tfalse,\n+\t\t\t\tclassLoader);\n+\t\t\tMethod utilMethod = utilClazz.getMethod(", "originalCommit": "b5592f7b7e489318e61567dd3cf1a2f0bbe3beeb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aee3e2d050662cf5e45e0108c09354d3d172a84c", "chunk": "diff --git a/flink-clients/src/main/java/org/apache/flink/client/cli/PythonProgramOptions.java b/flink-python/src/main/java/org/apache/flink/client/cli/PythonProgramOptions.java\nsimilarity index 52%\nrename from flink-clients/src/main/java/org/apache/flink/client/cli/PythonProgramOptions.java\nrename to flink-python/src/main/java/org/apache/flink/client/cli/PythonProgramOptions.java\nindex d342e2519e..2dee745e8d 100644\n--- a/flink-clients/src/main/java/org/apache/flink/client/cli/PythonProgramOptions.java\n+++ b/flink-python/src/main/java/org/apache/flink/client/cli/PythonProgramOptions.java\n\n@@ -18,71 +18,35 @@\n \n package org.apache.flink.client.cli;\n \n-import org.apache.flink.client.program.PackagedProgramUtils;\n import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.python.util.PythonDependencyUtils;\n \n import org.apache.commons.cli.CommandLine;\n import org.apache.commons.cli.Option;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n-import java.net.URL;\n-import java.net.URLClassLoader;\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n \n import static org.apache.flink.client.cli.CliFrontendParser.ARGS_OPTION;\n-import static org.apache.flink.client.cli.CliFrontendParser.CLASS_OPTION;\n-import static org.apache.flink.client.cli.CliFrontendParser.PYARCHIVE_OPTION;\n-import static org.apache.flink.client.cli.CliFrontendParser.PYEXEC_OPTION;\n-import static org.apache.flink.client.cli.CliFrontendParser.PYFILES_OPTION;\n import static org.apache.flink.client.cli.CliFrontendParser.PYMODULE_OPTION;\n-import static org.apache.flink.client.cli.CliFrontendParser.PYREQUIREMENTS_OPTION;\n import static org.apache.flink.client.cli.CliFrontendParser.PY_OPTION;\n+import static org.apache.flink.client.cli.ProgramOptionsUtils.isPythonEntryPoint;\n \n /**\n  * The class for command line options that refer to a Python program or JAR program with Python command line options.\n  */\n public class PythonProgramOptions extends ProgramOptions {\n \n-\tprivate static final Logger LOG = LoggerFactory.getLogger(PythonProgramOptions.class);\n-\n \tprivate final Configuration pythonConfiguration;\n \n-\tPythonProgramOptions(CommandLine line) throws CliArgsException {\n+\tprivate final boolean isPython;\n+\n+\tpublic PythonProgramOptions(CommandLine line) throws CliArgsException {\n \t\tsuper(line);\n-\t\ttry {\n-\t\t\tClassLoader classLoader;\n-\t\t\ttry {\n-\t\t\t\tclassLoader = new URLClassLoader(\n-\t\t\t\t\tnew URL[]{PackagedProgramUtils.getPythonJar()},\n-\t\t\t\t\tThread.currentThread().getContextClassLoader());\n-\t\t\t} catch (RuntimeException e) {\n-\t\t\t\tLOG.warn(\n-\t\t\t\t\t\"An attempt to load the flink-python jar from the \\\"opt\\\" directory failed, \" +\n-\t\t\t\t\t\t\"fall back to use the context class loader to reflect the flink-python class.\", e);\n-\t\t\t\tclassLoader = Thread.currentThread().getContextClassLoader();\n-\t\t\t}\n-\t\t\tClass<?> utilClazz = Class.forName(\n-\t\t\t\t\"org.apache.flink.python.util.PythonDependencyUtils\",\n-\t\t\t\tfalse,\n-\t\t\t\tclassLoader);\n-\t\t\tMethod utilMethod = utilClazz.getMethod(\n-\t\t\t\t\"parseCommandLine\",\n-\t\t\t\tCommandLine.class);\n-\t\t\tpythonConfiguration = (Configuration) utilMethod.invoke(null, line);\n-\t\t} catch (NoSuchMethodException |\n-\t\t\tIllegalAccessException |\n-\t\t\tInvocationTargetException |\n-\t\t\tClassNotFoundException e) {\n-\t\t\tthrow new CliArgsException(\n-\t\t\t\t\"Python command line option detected but the flink-python module seems to be missing \" +\n-\t\t\t\t\t\"or not working as expected.\", e);\n-\t\t}\n+\t\tisPython = isPythonEntryPoint(line);\n+\t\tpythonConfiguration = PythonDependencyUtils.parsePythonDependencyConfiguration(line);\n \t\t// If the job is Python Shell job, the entry point class name is PythonGateWayServer.\n \t\t// Otherwise, the entry point class of python job is PythonDriver\n \t\tif (entryPointClass == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk4NDE0Ng==", "url": "https://github.com/apache/flink/pull/11702#discussion_r407984146", "bodyText": "Rename to containsPythonDependencyOptions?", "author": "dianfu", "createdAt": "2020-04-14T09:10:57Z", "path": "flink-clients/src/main/java/org/apache/flink/client/cli/PythonProgramOptions.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.client.cli;\n+\n+import org.apache.flink.client.program.PackagedProgramUtils;\n+import org.apache.flink.configuration.Configuration;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.Option;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.apache.flink.client.cli.CliFrontendParser.ARGS_OPTION;\n+import static org.apache.flink.client.cli.CliFrontendParser.CLASS_OPTION;\n+import static org.apache.flink.client.cli.CliFrontendParser.PYARCHIVE_OPTION;\n+import static org.apache.flink.client.cli.CliFrontendParser.PYEXEC_OPTION;\n+import static org.apache.flink.client.cli.CliFrontendParser.PYFILES_OPTION;\n+import static org.apache.flink.client.cli.CliFrontendParser.PYMODULE_OPTION;\n+import static org.apache.flink.client.cli.CliFrontendParser.PYREQUIREMENTS_OPTION;\n+import static org.apache.flink.client.cli.CliFrontendParser.PY_OPTION;\n+\n+/**\n+ * The class for command line options that refer to a Python program or JAR program with Python command line options.\n+ */\n+public class PythonProgramOptions extends ProgramOptions {\n+\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(PythonProgramOptions.class);\n+\n+\tprivate final Configuration pythonConfiguration;\n+\n+\tPythonProgramOptions(CommandLine line) throws CliArgsException {\n+\t\tsuper(line);\n+\t\ttry {\n+\t\t\tClassLoader classLoader;\n+\t\t\ttry {\n+\t\t\t\tclassLoader = new URLClassLoader(\n+\t\t\t\t\tnew URL[]{PackagedProgramUtils.getPythonJar()},\n+\t\t\t\t\tThread.currentThread().getContextClassLoader());\n+\t\t\t} catch (RuntimeException e) {\n+\t\t\t\tLOG.warn(\n+\t\t\t\t\t\"An attempt to load the flink-python jar from the \\\"opt\\\" directory failed, \" +\n+\t\t\t\t\t\t\"fall back to use the context class loader to reflect the flink-python class.\", e);\n+\t\t\t\tclassLoader = Thread.currentThread().getContextClassLoader();\n+\t\t\t}\n+\t\t\tClass<?> utilClazz = Class.forName(\n+\t\t\t\t\"org.apache.flink.python.util.PythonDependencyUtils\",\n+\t\t\t\tfalse,\n+\t\t\t\tclassLoader);\n+\t\t\tMethod utilMethod = utilClazz.getMethod(\n+\t\t\t\t\"parseCommandLine\",\n+\t\t\t\tCommandLine.class);\n+\t\t\tpythonConfiguration = (Configuration) utilMethod.invoke(null, line);\n+\t\t} catch (NoSuchMethodException |\n+\t\t\tIllegalAccessException |\n+\t\t\tInvocationTargetException |\n+\t\t\tClassNotFoundException e) {\n+\t\t\tthrow new CliArgsException(\n+\t\t\t\t\"Python command line option detected but the flink-python module seems to be missing \" +\n+\t\t\t\t\t\"or not working as expected.\", e);\n+\t\t}\n+\t\t// If the job is Python Shell job, the entry point class name is PythonGateWayServer.\n+\t\t// Otherwise, the entry point class of python job is PythonDriver\n+\t\tif (entryPointClass == null) {\n+\t\t\tentryPointClass = \"org.apache.flink.client.python.PythonDriver\";\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tprotected String[] extractProgramArgs(CommandLine line) {\n+\t\tString[] args;\n+\t\tif (isPython(line)) {\n+\t\t\tString[] rawArgs = line.hasOption(ARGS_OPTION.getOpt()) ?\n+\t\t\t\tline.getOptionValues(ARGS_OPTION.getOpt()) :\n+\t\t\t\tline.getArgs();\n+\t\t\t// copy python related parameters to program args and place them in front of user parameters\n+\t\t\tList<String> pyArgList = new ArrayList<>();\n+\t\t\tSet<Option> pyOptions = new HashSet<>();\n+\t\t\tpyOptions.add(PY_OPTION);\n+\t\t\tpyOptions.add(PYMODULE_OPTION);\n+\t\t\tfor (Option option : line.getOptions()) {\n+\t\t\t\tif (pyOptions.contains(option)) {\n+\t\t\t\t\tpyArgList.add(\"--\" + option.getLongOpt());\n+\t\t\t\t\tpyArgList.add(option.getValue());\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tString[] newArgs = pyArgList.toArray(new String[rawArgs.length + pyArgList.size()]);\n+\t\t\tSystem.arraycopy(rawArgs, 0, newArgs, pyArgList.size(), rawArgs.length);\n+\t\t\targs = newArgs;\n+\t\t} else {\n+\t\t\targs = super.extractProgramArgs(line);\n+\t\t}\n+\n+\t\treturn args;\n+\t}\n+\n+\t@Override\n+\tpublic void validate() throws CliArgsException {}\n+\n+\tpublic static boolean isPython(CommandLine line) {\n+\t\treturn line.hasOption(PY_OPTION.getOpt()) ||\n+\t\t\tline.hasOption(PYMODULE_OPTION.getOpt()) ||\n+\t\t\t\"org.apache.flink.client.python.PythonGatewayServer\".equals(line.getOptionValue(CLASS_OPTION.getOpt()));\n+\t}\n+\n+\tpublic static boolean containsPythonDependency(CommandLine line) {", "originalCommit": "b5592f7b7e489318e61567dd3cf1a2f0bbe3beeb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aee3e2d050662cf5e45e0108c09354d3d172a84c", "chunk": "diff --git a/flink-clients/src/main/java/org/apache/flink/client/cli/PythonProgramOptions.java b/flink-python/src/main/java/org/apache/flink/client/cli/PythonProgramOptions.java\nsimilarity index 52%\nrename from flink-clients/src/main/java/org/apache/flink/client/cli/PythonProgramOptions.java\nrename to flink-python/src/main/java/org/apache/flink/client/cli/PythonProgramOptions.java\nindex d342e2519e..2dee745e8d 100644\n--- a/flink-clients/src/main/java/org/apache/flink/client/cli/PythonProgramOptions.java\n+++ b/flink-python/src/main/java/org/apache/flink/client/cli/PythonProgramOptions.java\n\n@@ -18,71 +18,35 @@\n \n package org.apache.flink.client.cli;\n \n-import org.apache.flink.client.program.PackagedProgramUtils;\n import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.python.util.PythonDependencyUtils;\n \n import org.apache.commons.cli.CommandLine;\n import org.apache.commons.cli.Option;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n-import java.net.URL;\n-import java.net.URLClassLoader;\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n \n import static org.apache.flink.client.cli.CliFrontendParser.ARGS_OPTION;\n-import static org.apache.flink.client.cli.CliFrontendParser.CLASS_OPTION;\n-import static org.apache.flink.client.cli.CliFrontendParser.PYARCHIVE_OPTION;\n-import static org.apache.flink.client.cli.CliFrontendParser.PYEXEC_OPTION;\n-import static org.apache.flink.client.cli.CliFrontendParser.PYFILES_OPTION;\n import static org.apache.flink.client.cli.CliFrontendParser.PYMODULE_OPTION;\n-import static org.apache.flink.client.cli.CliFrontendParser.PYREQUIREMENTS_OPTION;\n import static org.apache.flink.client.cli.CliFrontendParser.PY_OPTION;\n+import static org.apache.flink.client.cli.ProgramOptionsUtils.isPythonEntryPoint;\n \n /**\n  * The class for command line options that refer to a Python program or JAR program with Python command line options.\n  */\n public class PythonProgramOptions extends ProgramOptions {\n \n-\tprivate static final Logger LOG = LoggerFactory.getLogger(PythonProgramOptions.class);\n-\n \tprivate final Configuration pythonConfiguration;\n \n-\tPythonProgramOptions(CommandLine line) throws CliArgsException {\n+\tprivate final boolean isPython;\n+\n+\tpublic PythonProgramOptions(CommandLine line) throws CliArgsException {\n \t\tsuper(line);\n-\t\ttry {\n-\t\t\tClassLoader classLoader;\n-\t\t\ttry {\n-\t\t\t\tclassLoader = new URLClassLoader(\n-\t\t\t\t\tnew URL[]{PackagedProgramUtils.getPythonJar()},\n-\t\t\t\t\tThread.currentThread().getContextClassLoader());\n-\t\t\t} catch (RuntimeException e) {\n-\t\t\t\tLOG.warn(\n-\t\t\t\t\t\"An attempt to load the flink-python jar from the \\\"opt\\\" directory failed, \" +\n-\t\t\t\t\t\t\"fall back to use the context class loader to reflect the flink-python class.\", e);\n-\t\t\t\tclassLoader = Thread.currentThread().getContextClassLoader();\n-\t\t\t}\n-\t\t\tClass<?> utilClazz = Class.forName(\n-\t\t\t\t\"org.apache.flink.python.util.PythonDependencyUtils\",\n-\t\t\t\tfalse,\n-\t\t\t\tclassLoader);\n-\t\t\tMethod utilMethod = utilClazz.getMethod(\n-\t\t\t\t\"parseCommandLine\",\n-\t\t\t\tCommandLine.class);\n-\t\t\tpythonConfiguration = (Configuration) utilMethod.invoke(null, line);\n-\t\t} catch (NoSuchMethodException |\n-\t\t\tIllegalAccessException |\n-\t\t\tInvocationTargetException |\n-\t\t\tClassNotFoundException e) {\n-\t\t\tthrow new CliArgsException(\n-\t\t\t\t\"Python command line option detected but the flink-python module seems to be missing \" +\n-\t\t\t\t\t\"or not working as expected.\", e);\n-\t\t}\n+\t\tisPython = isPythonEntryPoint(line);\n+\t\tpythonConfiguration = PythonDependencyUtils.parsePythonDependencyConfiguration(line);\n \t\t// If the job is Python Shell job, the entry point class name is PythonGateWayServer.\n \t\t// Otherwise, the entry point class of python job is PythonDriver\n \t\tif (entryPointClass == null) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk4ODYwOA==", "url": "https://github.com/apache/flink/pull/11702#discussion_r407988608", "bodyText": "Rename to parsePythonDependencyConfiguration", "author": "dianfu", "createdAt": "2020-04-14T09:17:48Z", "path": "flink-python/src/main/java/org/apache/flink/python/util/PythonDependencyUtils.java", "diffHunk": "@@ -77,6 +83,23 @@ public static Configuration configurePythonDependencies(\n \t\treturn pythonDependencyManager.getConfigWithPythonDependencyOptions();\n \t}\n \n+\tpublic static Configuration parseCommandLine(CommandLine commandLine) {", "originalCommit": "b5592f7b7e489318e61567dd3cf1a2f0bbe3beeb", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aee3e2d050662cf5e45e0108c09354d3d172a84c", "chunk": "diff --git a/flink-python/src/main/java/org/apache/flink/python/util/PythonDependencyUtils.java b/flink-python/src/main/java/org/apache/flink/python/util/PythonDependencyUtils.java\nindex 5c161a6893..3790fe7ee8 100644\n--- a/flink-python/src/main/java/org/apache/flink/python/util/PythonDependencyUtils.java\n+++ b/flink-python/src/main/java/org/apache/flink/python/util/PythonDependencyUtils.java\n\n@@ -83,7 +83,7 @@ public class PythonDependencyUtils {\n \t\treturn pythonDependencyManager.getConfigWithPythonDependencyOptions();\n \t}\n \n-\tpublic static Configuration parseCommandLine(CommandLine commandLine) {\n+\tpublic static Configuration parsePythonDependencyConfiguration(CommandLine commandLine) {\n \t\tConfiguration config = new Configuration();\n \t\tif (commandLine.hasOption(PYFILES_OPTION.getOpt())) {\n \t\t\tconfig.set(PythonOptions.PYTHON_FILES, commandLine.getOptionValue(PYFILES_OPTION.getOpt()));\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMyMzAwNA==", "url": "https://github.com/apache/flink/pull/11702#discussion_r411323004", "bodyText": "Instead of the instanceof here, I think it's better to add a method to ProgramOptions for adding additional configuration. Something like (addToConfiguration(Configuration). On the base ProgramOptions this would do nothing but in PythonProgramOptions this would add the additional python configuration.\nIf we really want to do it nicely, though, we can even add the current code in this method here to the new ProgramOptions.addToConfiguration(). This way we treat everything the same.", "author": "aljoscha", "createdAt": "2020-04-20T12:05:26Z", "path": "flink-clients/src/main/java/org/apache/flink/client/cli/ExecutionConfigAccessor.java", "diffHunk": "@@ -74,6 +74,11 @@ public static ExecutionConfigAccessor fromProgramOptions(final ProgramOptions op\n \n \t\tSavepointRestoreSettings.toConfiguration(options.getSavepointRestoreSettings(), configuration);\n \n+\t\t// If the Python configuration exists, write them to the configuration for Python program/UDF execution.\n+\t\tif (options instanceof PythonProgramOptions) {", "originalCommit": "0b9a26621863e55b841416daed123ee367033d70", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMyOTk5MA==", "url": "https://github.com/apache/flink/pull/11702#discussion_r411329990", "bodyText": "Ah, better name is probably applyToConfiguration(), and hand in a Configuration.", "author": "aljoscha", "createdAt": "2020-04-20T12:17:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMyMzAwNA=="}], "type": "inlineReview", "revised_code": {"commit": "aee3e2d050662cf5e45e0108c09354d3d172a84c", "chunk": "diff --git a/flink-clients/src/main/java/org/apache/flink/client/cli/ExecutionConfigAccessor.java b/flink-clients/src/main/java/org/apache/flink/client/cli/ExecutionConfigAccessor.java\nindex 493a57de71..2bb42dc96c 100644\n--- a/flink-clients/src/main/java/org/apache/flink/client/cli/ExecutionConfigAccessor.java\n+++ b/flink-clients/src/main/java/org/apache/flink/client/cli/ExecutionConfigAccessor.java\n\n@@ -62,23 +61,9 @@ public class ExecutionConfigAccessor {\n \n \t\tfinal Configuration configuration = new Configuration();\n \n-\t\tif (options.getParallelism() != ExecutionConfig.PARALLELISM_DEFAULT) {\n-\t\t\tconfiguration.setInteger(CoreOptions.DEFAULT_PARALLELISM, options.getParallelism());\n-\t\t}\n-\n-\t\tconfiguration.setBoolean(DeploymentOptions.ATTACHED, !options.getDetachedMode());\n-\t\tconfiguration.setBoolean(DeploymentOptions.SHUTDOWN_IF_ATTACHED, options.isShutdownOnAttachedExit());\n-\n-\t\tConfigUtils.encodeCollectionToConfig(configuration, PipelineOptions.CLASSPATHS, options.getClasspaths(), URL::toString);\n+\t\toptions.applyToConfiguration(configuration);\n \t\tConfigUtils.encodeCollectionToConfig(configuration, PipelineOptions.JARS, jobJars, URL::toString);\n \n-\t\tSavepointRestoreSettings.toConfiguration(options.getSavepointRestoreSettings(), configuration);\n-\n-\t\t// If the Python configuration exists, write them to the configuration for Python program/UDF execution.\n-\t\tif (options instanceof PythonProgramOptions) {\n-\t\t\tconfiguration.addAll(((PythonProgramOptions) options).getPythonConfiguration());\n-\t\t}\n-\n \t\treturn new ExecutionConfigAccessor(configuration);\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg3NzE4NA==", "url": "https://github.com/apache/flink/pull/11702#discussion_r411877184", "bodyText": "typo: createPythonPropramOptions  -> createPythonProgramOptions", "author": "dianfu", "createdAt": "2020-04-21T05:21:32Z", "path": "flink-clients/src/main/java/org/apache/flink/client/cli/ProgramOptions.java", "diffHunk": "@@ -184,10 +175,65 @@ public SavepointRestoreSettings getSavepointRestoreSettings() {\n \t\treturn savepointSettings;\n \t}\n \n-\t/**\n-\t * Indicates whether the job is a Python job.\n-\t */\n-\tpublic boolean isPython() {\n-\t\treturn isPython;\n+\tpublic void applyToConfiguration(Configuration configuration) {\n+\t\tif (getParallelism() != ExecutionConfig.PARALLELISM_DEFAULT) {\n+\t\t\tconfiguration.setInteger(CoreOptions.DEFAULT_PARALLELISM, getParallelism());\n+\t\t}\n+\n+\t\tconfiguration.setBoolean(DeploymentOptions.ATTACHED, !getDetachedMode());\n+\t\tconfiguration.setBoolean(DeploymentOptions.SHUTDOWN_IF_ATTACHED, isShutdownOnAttachedExit());\n+\t\tConfigUtils.encodeCollectionToConfig(configuration, PipelineOptions.CLASSPATHS, getClasspaths(), URL::toString);\n+\t\tSavepointRestoreSettings.toConfiguration(getSavepointRestoreSettings(), configuration);\n+\t}\n+\n+\tpublic static ProgramOptions create(CommandLine line) throws CliArgsException {\n+\t\tif (isPython(line) || containsPythonDependencyOptions(line)) {\n+\t\t\treturn createPythonPropramOptions(line);", "originalCommit": "b839e592856b50429a5097c7094d883fdbef1f2d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aee3e2d050662cf5e45e0108c09354d3d172a84c", "chunk": "diff --git a/flink-clients/src/main/java/org/apache/flink/client/cli/ProgramOptions.java b/flink-clients/src/main/java/org/apache/flink/client/cli/ProgramOptions.java\nindex 2108d7380f..79d0a0449d 100644\n--- a/flink-clients/src/main/java/org/apache/flink/client/cli/ProgramOptions.java\n+++ b/flink-clients/src/main/java/org/apache/flink/client/cli/ProgramOptions.java\n\n@@ -187,53 +176,10 @@ public class ProgramOptions extends CommandLineOptions {\n \t}\n \n \tpublic static ProgramOptions create(CommandLine line) throws CliArgsException {\n-\t\tif (isPython(line) || containsPythonDependencyOptions(line)) {\n-\t\t\treturn createPythonPropramOptions(line);\n+\t\tif (isPythonEntryPoint(line) || containsPythonDependencyOptions(line)) {\n+\t\t\treturn createPythonProgramOptions(line);\n \t\t} else {\n \t\t\treturn new ProgramOptions(line);\n \t\t}\n \t}\n-\n-\tstatic boolean isPython(CommandLine line) {\n-\t\treturn line.hasOption(PY_OPTION.getOpt()) ||\n-\t\t\tline.hasOption(PYMODULE_OPTION.getOpt()) ||\n-\t\t\t\"org.apache.flink.client.python.PythonGatewayServer\".equals(line.getOptionValue(CLASS_OPTION.getOpt()));\n-\t}\n-\n-\tprivate static boolean containsPythonDependencyOptions(CommandLine line) {\n-\t\treturn line.hasOption(PYFILES_OPTION.getOpt()) ||\n-\t\t\tline.hasOption(PYREQUIREMENTS_OPTION.getOpt()) ||\n-\t\t\tline.hasOption(PYARCHIVE_OPTION.getOpt()) ||\n-\t\t\tline.hasOption(PYEXEC_OPTION.getOpt());\n-\t}\n-\n-\tprivate static ProgramOptions createPythonPropramOptions(CommandLine line) throws CliArgsException {\n-\t\ttry {\n-\t\t\tClassLoader classLoader;\n-\t\t\ttry {\n-\t\t\t\tclassLoader = new URLClassLoader(\n-\t\t\t\t\tnew URL[]{PackagedProgramUtils.getPythonJar()},\n-\t\t\t\t\tThread.currentThread().getContextClassLoader());\n-\t\t\t} catch (RuntimeException e) {\n-\t\t\t\tLOG.warn(\n-\t\t\t\t\t\"An attempt to load the flink-python jar from the \\\"opt\\\" directory failed, \" +\n-\t\t\t\t\t\t\"fall back to use the context class loader.\", e);\n-\t\t\t\tclassLoader = Thread.currentThread().getContextClassLoader();\n-\t\t\t}\n-\t\t\tClass<?> pythonProgramOptionsClazz = Class.forName(\n-\t\t\t\t\"org.apache.flink.client.cli.PythonProgramOptions\",\n-\t\t\t\tfalse,\n-\t\t\t\tclassLoader);\n-\t\t\tConstructor<?> constructor = pythonProgramOptionsClazz.getConstructor(CommandLine.class);\n-\t\t\treturn (ProgramOptions) constructor.newInstance(line);\n-\t\t} catch (InstantiationException |\n-\t\t\t\tInvocationTargetException |\n-\t\t\t\tNoSuchMethodException |\n-\t\t\t\tIllegalAccessException |\n-\t\t\t\tClassNotFoundException e) {\n-\t\t\tthrow new CliArgsException(\n-\t\t\t\t\"Python command line option detected but the flink-python module seems to be missing \" +\n-\t\t\t\t\t\"or not working as expected.\", e);\n-\t\t}\n-\t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg4MzEyNg==", "url": "https://github.com/apache/flink/pull/11702#discussion_r411883126", "bodyText": "The name isPython is confusing. Considering the class PythonProgramOptions is specify for Python, should it always be true? I guess you mean isEntryPointPython? If so we should rename the variable isPython and the util method isPython to isEntryPointPython. What do you think?", "author": "dianfu", "createdAt": "2020-04-21T05:37:58Z", "path": "flink-python/src/main/java/org/apache/flink/client/cli/PythonProgramOptions.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.client.cli;\n+\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.python.util.PythonDependencyUtils;\n+\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.Option;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.apache.flink.client.cli.CliFrontendParser.ARGS_OPTION;\n+import static org.apache.flink.client.cli.CliFrontendParser.PYMODULE_OPTION;\n+import static org.apache.flink.client.cli.CliFrontendParser.PY_OPTION;\n+\n+/**\n+ * The class for command line options that refer to a Python program or JAR program with Python command line options.\n+ */\n+public class PythonProgramOptions extends ProgramOptions {\n+\n+\tprivate final Configuration pythonConfiguration;\n+\n+\tprivate final boolean isPython;\n+\n+\tpublic PythonProgramOptions(CommandLine line) throws CliArgsException {\n+\t\tsuper(line);\n+\t\tisPython = isPython(line);", "originalCommit": "b839e592856b50429a5097c7094d883fdbef1f2d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aee3e2d050662cf5e45e0108c09354d3d172a84c", "chunk": "diff --git a/flink-python/src/main/java/org/apache/flink/client/cli/PythonProgramOptions.java b/flink-python/src/main/java/org/apache/flink/client/cli/PythonProgramOptions.java\nindex 169a62c9aa..2dee745e8d 100644\n--- a/flink-python/src/main/java/org/apache/flink/client/cli/PythonProgramOptions.java\n+++ b/flink-python/src/main/java/org/apache/flink/client/cli/PythonProgramOptions.java\n\n@@ -32,6 +32,7 @@ import java.util.Set;\n import static org.apache.flink.client.cli.CliFrontendParser.ARGS_OPTION;\n import static org.apache.flink.client.cli.CliFrontendParser.PYMODULE_OPTION;\n import static org.apache.flink.client.cli.CliFrontendParser.PY_OPTION;\n+import static org.apache.flink.client.cli.ProgramOptionsUtils.isPythonEntryPoint;\n \n /**\n  * The class for command line options that refer to a Python program or JAR program with Python command line options.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg4NDE4OA==", "url": "https://github.com/apache/flink/pull/11702#discussion_r411884188", "bodyText": "Should we move these kinds of util methods to a class such as ProgramOptionsUtils to make ProgramOptions more clean?  What's your thought? @aljoscha", "author": "dianfu", "createdAt": "2020-04-21T05:40:49Z", "path": "flink-clients/src/main/java/org/apache/flink/client/cli/ProgramOptions.java", "diffHunk": "@@ -184,10 +175,65 @@ public SavepointRestoreSettings getSavepointRestoreSettings() {\n \t\treturn savepointSettings;\n \t}\n \n-\t/**\n-\t * Indicates whether the job is a Python job.\n-\t */\n-\tpublic boolean isPython() {\n-\t\treturn isPython;\n+\tpublic void applyToConfiguration(Configuration configuration) {\n+\t\tif (getParallelism() != ExecutionConfig.PARALLELISM_DEFAULT) {\n+\t\t\tconfiguration.setInteger(CoreOptions.DEFAULT_PARALLELISM, getParallelism());\n+\t\t}\n+\n+\t\tconfiguration.setBoolean(DeploymentOptions.ATTACHED, !getDetachedMode());\n+\t\tconfiguration.setBoolean(DeploymentOptions.SHUTDOWN_IF_ATTACHED, isShutdownOnAttachedExit());\n+\t\tConfigUtils.encodeCollectionToConfig(configuration, PipelineOptions.CLASSPATHS, getClasspaths(), URL::toString);\n+\t\tSavepointRestoreSettings.toConfiguration(getSavepointRestoreSettings(), configuration);\n+\t}\n+\n+\tpublic static ProgramOptions create(CommandLine line) throws CliArgsException {\n+\t\tif (isPython(line) || containsPythonDependencyOptions(line)) {\n+\t\t\treturn createPythonPropramOptions(line);\n+\t\t} else {\n+\t\t\treturn new ProgramOptions(line);\n+\t\t}\n+\t}\n+\n+\tstatic boolean isPython(CommandLine line) {", "originalCommit": "b839e592856b50429a5097c7094d883fdbef1f2d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aee3e2d050662cf5e45e0108c09354d3d172a84c", "chunk": "diff --git a/flink-clients/src/main/java/org/apache/flink/client/cli/ProgramOptions.java b/flink-clients/src/main/java/org/apache/flink/client/cli/ProgramOptions.java\nindex 2108d7380f..79d0a0449d 100644\n--- a/flink-clients/src/main/java/org/apache/flink/client/cli/ProgramOptions.java\n+++ b/flink-clients/src/main/java/org/apache/flink/client/cli/ProgramOptions.java\n\n@@ -187,53 +176,10 @@ public class ProgramOptions extends CommandLineOptions {\n \t}\n \n \tpublic static ProgramOptions create(CommandLine line) throws CliArgsException {\n-\t\tif (isPython(line) || containsPythonDependencyOptions(line)) {\n-\t\t\treturn createPythonPropramOptions(line);\n+\t\tif (isPythonEntryPoint(line) || containsPythonDependencyOptions(line)) {\n+\t\t\treturn createPythonProgramOptions(line);\n \t\t} else {\n \t\t\treturn new ProgramOptions(line);\n \t\t}\n \t}\n-\n-\tstatic boolean isPython(CommandLine line) {\n-\t\treturn line.hasOption(PY_OPTION.getOpt()) ||\n-\t\t\tline.hasOption(PYMODULE_OPTION.getOpt()) ||\n-\t\t\t\"org.apache.flink.client.python.PythonGatewayServer\".equals(line.getOptionValue(CLASS_OPTION.getOpt()));\n-\t}\n-\n-\tprivate static boolean containsPythonDependencyOptions(CommandLine line) {\n-\t\treturn line.hasOption(PYFILES_OPTION.getOpt()) ||\n-\t\t\tline.hasOption(PYREQUIREMENTS_OPTION.getOpt()) ||\n-\t\t\tline.hasOption(PYARCHIVE_OPTION.getOpt()) ||\n-\t\t\tline.hasOption(PYEXEC_OPTION.getOpt());\n-\t}\n-\n-\tprivate static ProgramOptions createPythonPropramOptions(CommandLine line) throws CliArgsException {\n-\t\ttry {\n-\t\t\tClassLoader classLoader;\n-\t\t\ttry {\n-\t\t\t\tclassLoader = new URLClassLoader(\n-\t\t\t\t\tnew URL[]{PackagedProgramUtils.getPythonJar()},\n-\t\t\t\t\tThread.currentThread().getContextClassLoader());\n-\t\t\t} catch (RuntimeException e) {\n-\t\t\t\tLOG.warn(\n-\t\t\t\t\t\"An attempt to load the flink-python jar from the \\\"opt\\\" directory failed, \" +\n-\t\t\t\t\t\t\"fall back to use the context class loader.\", e);\n-\t\t\t\tclassLoader = Thread.currentThread().getContextClassLoader();\n-\t\t\t}\n-\t\t\tClass<?> pythonProgramOptionsClazz = Class.forName(\n-\t\t\t\t\"org.apache.flink.client.cli.PythonProgramOptions\",\n-\t\t\t\tfalse,\n-\t\t\t\tclassLoader);\n-\t\t\tConstructor<?> constructor = pythonProgramOptionsClazz.getConstructor(CommandLine.class);\n-\t\t\treturn (ProgramOptions) constructor.newInstance(line);\n-\t\t} catch (InstantiationException |\n-\t\t\t\tInvocationTargetException |\n-\t\t\t\tNoSuchMethodException |\n-\t\t\t\tIllegalAccessException |\n-\t\t\t\tClassNotFoundException e) {\n-\t\t\tthrow new CliArgsException(\n-\t\t\t\t\"Python command line option detected but the flink-python module seems to be missing \" +\n-\t\t\t\t\t\"or not working as expected.\", e);\n-\t\t}\n-\t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg4NjIwMQ==", "url": "https://github.com/apache/flink/pull/11702#discussion_r411886201", "bodyText": "What about create a PythonProgramOptionsTest and move this test case there.", "author": "dianfu", "createdAt": "2020-04-21T05:45:41Z", "path": "flink-python/src/test/java/org/apache/flink/python/util/PythonDependencyUtilsTest.java", "diffHunk": "@@ -184,20 +197,83 @@ public void testPythonExecutables() {\n \t\tverifyConfiguration(expectedConfiguration, actual);\n \t}\n \n+\t@Test\n+\tpublic void testCreateProgramOptionsWithPythonCommandLine() throws CliArgsException {", "originalCommit": "b839e592856b50429a5097c7094d883fdbef1f2d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aee3e2d050662cf5e45e0108c09354d3d172a84c", "chunk": "diff --git a/flink-python/src/test/java/org/apache/flink/python/util/PythonDependencyUtilsTest.java b/flink-python/src/test/java/org/apache/flink/python/util/PythonDependencyUtilsTest.java\nindex bb00aeed7e..6ea39193ea 100644\n--- a/flink-python/src/test/java/org/apache/flink/python/util/PythonDependencyUtilsTest.java\n+++ b/flink-python/src/test/java/org/apache/flink/python/util/PythonDependencyUtilsTest.java\n\n@@ -197,69 +184,6 @@ public class PythonDependencyUtilsTest {\n \t\tverifyConfiguration(expectedConfiguration, actual);\n \t}\n \n-\t@Test\n-\tpublic void testCreateProgramOptionsWithPythonCommandLine() throws CliArgsException {\n-\t\tOptions options = getPythonCommandLineOptions();\n-\t\tString[] parameters = {\n-\t\t\t\"-py\", \"test.py\",\n-\t\t\t\"-pym\", \"test\",\n-\t\t\t\"-pyfs\", \"test1.py,test2.zip,test3.egg,test4_dir\",\n-\t\t\t\"-pyreq\", \"a.txt#b_dir\",\n-\t\t\t\"-pyarch\", \"c.zip#venv,d.zip\",\n-\t\t\t\"-pyexec\", \"bin/python\",\n-\t\t\t\"userarg1\", \"userarg2\"\n-\t\t};\n-\n-\t\tCommandLine line = CliFrontendParser.parse(options, parameters, false);\n-\t\tPythonProgramOptions programOptions = (PythonProgramOptions) ProgramOptions.create(line);\n-\t\tConfiguration config = new Configuration();\n-\t\tprogramOptions.applyToConfiguration(config);\n-\t\tassertEquals(\"test1.py,test2.zip,test3.egg,test4_dir\", config.get(PythonOptions.PYTHON_FILES));\n-\t\tassertEquals(\"a.txt#b_dir\", config.get(PYTHON_REQUIREMENTS));\n-\t\tassertEquals(\"c.zip#venv,d.zip\", config.get(PythonOptions.PYTHON_ARCHIVES));\n-\t\tassertEquals(\"bin/python\", config.get(PYTHON_EXECUTABLE));\n-\t\tassertArrayEquals(\n-\t\t\tnew String[] {\"--python\", \"test.py\", \"--pyModule\", \"test\", \"userarg1\", \"userarg2\"},\n-\t\t\tprogramOptions.getProgramArgs());\n-\t}\n-\n-\t@Test\n-\tpublic void testCreateProgramOptionsWithLongOptions() throws CliArgsException {\n-\t\tOptions options = getPythonCommandLineOptions();\n-\t\tString[] args = {\n-\t\t\t\"--python\", \"xxx.py\",\n-\t\t\t\"--pyModule\", \"xxx\",\n-\t\t\t\"--pyFiles\", \"/absolute/a.py,relative/b.py,relative/c.py\",\n-\t\t\t\"--pyRequirements\", \"d.txt#e_dir\",\n-\t\t\t\"--pyExecutable\", \"/usr/bin/python\",\n-\t\t\t\"--pyArchives\", \"g.zip,h.zip#data,h.zip#data2\",\n-\t\t\t\"userarg1\", \"userarg2\"\n-\t\t};\n-\n-\t\tCommandLine line = CliFrontendParser.parse(options, args, false);\n-\t\tPythonProgramOptions programOptions = (PythonProgramOptions) ProgramOptions.create(line);\n-\t\tConfiguration config = new Configuration();\n-\t\tprogramOptions.applyToConfiguration(config);\n-\t\tassertEquals(\"/absolute/a.py,relative/b.py,relative/c.py\", config.get(PythonOptions.PYTHON_FILES));\n-\t\tassertEquals(\"d.txt#e_dir\", config.get(PYTHON_REQUIREMENTS));\n-\t\tassertEquals(\"g.zip,h.zip#data,h.zip#data2\", config.get(PythonOptions.PYTHON_ARCHIVES));\n-\t\tassertEquals(\"/usr/bin/python\", config.get(PYTHON_EXECUTABLE));\n-\t\tassertArrayEquals(\n-\t\t\tnew String[] {\"--python\", \"xxx.py\", \"--pyModule\", \"xxx\", \"userarg1\", \"userarg2\"},\n-\t\t\tprogramOptions.getProgramArgs());\n-\t}\n-\n-\tprivate Options getPythonCommandLineOptions() {\n-\t\tOptions options = new Options();\n-\t\toptions.addOption(PY_OPTION);\n-\t\toptions.addOption(PYFILES_OPTION);\n-\t\toptions.addOption(PYMODULE_OPTION);\n-\t\toptions.addOption(PYREQUIREMENTS_OPTION);\n-\t\toptions.addOption(PYARCHIVE_OPTION);\n-\t\toptions.addOption(PYEXEC_OPTION);\n-\t\treturn options;\n-\t}\n-\n \tprivate void verifyCachedFiles(Map<String, String> expected) {\n \t\tMap<String, String> actual =\n \t\t\tcachedFiles.stream().collect(Collectors.toMap(\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg4NjI0OQ==", "url": "https://github.com/apache/flink/pull/11702#discussion_r411886249", "bodyText": "ditto", "author": "dianfu", "createdAt": "2020-04-21T05:45:50Z", "path": "flink-python/src/test/java/org/apache/flink/python/util/PythonDependencyUtilsTest.java", "diffHunk": "@@ -184,20 +197,83 @@ public void testPythonExecutables() {\n \t\tverifyConfiguration(expectedConfiguration, actual);\n \t}\n \n+\t@Test\n+\tpublic void testCreateProgramOptionsWithPythonCommandLine() throws CliArgsException {\n+\t\tOptions options = getPythonCommandLineOptions();\n+\t\tString[] parameters = {\n+\t\t\t\"-py\", \"test.py\",\n+\t\t\t\"-pym\", \"test\",\n+\t\t\t\"-pyfs\", \"test1.py,test2.zip,test3.egg,test4_dir\",\n+\t\t\t\"-pyreq\", \"a.txt#b_dir\",\n+\t\t\t\"-pyarch\", \"c.zip#venv,d.zip\",\n+\t\t\t\"-pyexec\", \"bin/python\",\n+\t\t\t\"userarg1\", \"userarg2\"\n+\t\t};\n+\n+\t\tCommandLine line = CliFrontendParser.parse(options, parameters, false);\n+\t\tPythonProgramOptions programOptions = (PythonProgramOptions) ProgramOptions.create(line);\n+\t\tConfiguration config = new Configuration();\n+\t\tprogramOptions.applyToConfiguration(config);\n+\t\tassertEquals(\"test1.py,test2.zip,test3.egg,test4_dir\", config.get(PythonOptions.PYTHON_FILES));\n+\t\tassertEquals(\"a.txt#b_dir\", config.get(PYTHON_REQUIREMENTS));\n+\t\tassertEquals(\"c.zip#venv,d.zip\", config.get(PythonOptions.PYTHON_ARCHIVES));\n+\t\tassertEquals(\"bin/python\", config.get(PYTHON_EXECUTABLE));\n+\t\tassertArrayEquals(\n+\t\t\tnew String[] {\"--python\", \"test.py\", \"--pyModule\", \"test\", \"userarg1\", \"userarg2\"},\n+\t\t\tprogramOptions.getProgramArgs());\n+\t}\n+\n+\t@Test\n+\tpublic void testCreateProgramOptionsWithLongOptions() throws CliArgsException {", "originalCommit": "b839e592856b50429a5097c7094d883fdbef1f2d", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "aee3e2d050662cf5e45e0108c09354d3d172a84c", "chunk": "diff --git a/flink-python/src/test/java/org/apache/flink/python/util/PythonDependencyUtilsTest.java b/flink-python/src/test/java/org/apache/flink/python/util/PythonDependencyUtilsTest.java\nindex bb00aeed7e..6ea39193ea 100644\n--- a/flink-python/src/test/java/org/apache/flink/python/util/PythonDependencyUtilsTest.java\n+++ b/flink-python/src/test/java/org/apache/flink/python/util/PythonDependencyUtilsTest.java\n\n@@ -197,69 +184,6 @@ public class PythonDependencyUtilsTest {\n \t\tverifyConfiguration(expectedConfiguration, actual);\n \t}\n \n-\t@Test\n-\tpublic void testCreateProgramOptionsWithPythonCommandLine() throws CliArgsException {\n-\t\tOptions options = getPythonCommandLineOptions();\n-\t\tString[] parameters = {\n-\t\t\t\"-py\", \"test.py\",\n-\t\t\t\"-pym\", \"test\",\n-\t\t\t\"-pyfs\", \"test1.py,test2.zip,test3.egg,test4_dir\",\n-\t\t\t\"-pyreq\", \"a.txt#b_dir\",\n-\t\t\t\"-pyarch\", \"c.zip#venv,d.zip\",\n-\t\t\t\"-pyexec\", \"bin/python\",\n-\t\t\t\"userarg1\", \"userarg2\"\n-\t\t};\n-\n-\t\tCommandLine line = CliFrontendParser.parse(options, parameters, false);\n-\t\tPythonProgramOptions programOptions = (PythonProgramOptions) ProgramOptions.create(line);\n-\t\tConfiguration config = new Configuration();\n-\t\tprogramOptions.applyToConfiguration(config);\n-\t\tassertEquals(\"test1.py,test2.zip,test3.egg,test4_dir\", config.get(PythonOptions.PYTHON_FILES));\n-\t\tassertEquals(\"a.txt#b_dir\", config.get(PYTHON_REQUIREMENTS));\n-\t\tassertEquals(\"c.zip#venv,d.zip\", config.get(PythonOptions.PYTHON_ARCHIVES));\n-\t\tassertEquals(\"bin/python\", config.get(PYTHON_EXECUTABLE));\n-\t\tassertArrayEquals(\n-\t\t\tnew String[] {\"--python\", \"test.py\", \"--pyModule\", \"test\", \"userarg1\", \"userarg2\"},\n-\t\t\tprogramOptions.getProgramArgs());\n-\t}\n-\n-\t@Test\n-\tpublic void testCreateProgramOptionsWithLongOptions() throws CliArgsException {\n-\t\tOptions options = getPythonCommandLineOptions();\n-\t\tString[] args = {\n-\t\t\t\"--python\", \"xxx.py\",\n-\t\t\t\"--pyModule\", \"xxx\",\n-\t\t\t\"--pyFiles\", \"/absolute/a.py,relative/b.py,relative/c.py\",\n-\t\t\t\"--pyRequirements\", \"d.txt#e_dir\",\n-\t\t\t\"--pyExecutable\", \"/usr/bin/python\",\n-\t\t\t\"--pyArchives\", \"g.zip,h.zip#data,h.zip#data2\",\n-\t\t\t\"userarg1\", \"userarg2\"\n-\t\t};\n-\n-\t\tCommandLine line = CliFrontendParser.parse(options, args, false);\n-\t\tPythonProgramOptions programOptions = (PythonProgramOptions) ProgramOptions.create(line);\n-\t\tConfiguration config = new Configuration();\n-\t\tprogramOptions.applyToConfiguration(config);\n-\t\tassertEquals(\"/absolute/a.py,relative/b.py,relative/c.py\", config.get(PythonOptions.PYTHON_FILES));\n-\t\tassertEquals(\"d.txt#e_dir\", config.get(PYTHON_REQUIREMENTS));\n-\t\tassertEquals(\"g.zip,h.zip#data,h.zip#data2\", config.get(PythonOptions.PYTHON_ARCHIVES));\n-\t\tassertEquals(\"/usr/bin/python\", config.get(PYTHON_EXECUTABLE));\n-\t\tassertArrayEquals(\n-\t\t\tnew String[] {\"--python\", \"xxx.py\", \"--pyModule\", \"xxx\", \"userarg1\", \"userarg2\"},\n-\t\t\tprogramOptions.getProgramArgs());\n-\t}\n-\n-\tprivate Options getPythonCommandLineOptions() {\n-\t\tOptions options = new Options();\n-\t\toptions.addOption(PY_OPTION);\n-\t\toptions.addOption(PYFILES_OPTION);\n-\t\toptions.addOption(PYMODULE_OPTION);\n-\t\toptions.addOption(PYREQUIREMENTS_OPTION);\n-\t\toptions.addOption(PYARCHIVE_OPTION);\n-\t\toptions.addOption(PYEXEC_OPTION);\n-\t\treturn options;\n-\t}\n-\n \tprivate void verifyCachedFiles(Map<String, String> expected) {\n \t\tMap<String, String> actual =\n \t\t\tcachedFiles.stream().collect(Collectors.toMap(\n"}}, {"oid": "aee3e2d050662cf5e45e0108c09354d3d172a84c", "url": "https://github.com/apache/flink/commit/aee3e2d050662cf5e45e0108c09354d3d172a84c", "message": "fix typo and extract static methods to utility class.", "committedDate": "2020-04-22T05:58:07Z", "type": "forcePushed"}, {"oid": "04791a54491c2258861c4404d19f2bc2c1280599", "url": "https://github.com/apache/flink/commit/04791a54491c2258861c4404d19f2bc2c1280599", "message": "[FLINK-16667][python][client] Support new Python dependency configuration options in flink-client.", "committedDate": "2020-04-22T12:19:58Z", "type": "forcePushed"}, {"oid": "62449677aa28239499200d3444b3a6d0b0ba0a7d", "url": "https://github.com/apache/flink/commit/62449677aa28239499200d3444b3a6d0b0ba0a7d", "message": "[FLINK-16667][python][client] Support new Python dependency configuration options in flink-client.", "committedDate": "2020-04-22T12:27:11Z", "type": "forcePushed"}, {"oid": "bcff401a64a53ffee42c3319d6714c29e5d39c51", "url": "https://github.com/apache/flink/commit/bcff401a64a53ffee42c3319d6714c29e5d39c51", "message": "[FLINK-16667][python][client] Support new Python dependency configuration options in flink-client.", "committedDate": "2020-04-22T12:46:27Z", "type": "forcePushed"}, {"oid": "aa13b691fb546649d5f2880930d9d83f850b937e", "url": "https://github.com/apache/flink/commit/aa13b691fb546649d5f2880930d9d83f850b937e", "message": "[FLINK-16667][python][client] Support new Python dependency configuration options in flink-client.", "committedDate": "2020-04-23T08:35:26Z", "type": "commit"}, {"oid": "aa13b691fb546649d5f2880930d9d83f850b937e", "url": "https://github.com/apache/flink/commit/aa13b691fb546649d5f2880930d9d83f850b937e", "message": "[FLINK-16667][python][client] Support new Python dependency configuration options in flink-client.", "committedDate": "2020-04-23T08:35:26Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg1ODU0OQ==", "url": "https://github.com/apache/flink/pull/11702#discussion_r413858549", "bodyText": "I think that's not always necessary, if the user jar is in the lib folder it's enough to specify an entrypoint Class.", "author": "aljoscha", "createdAt": "2020-04-23T14:44:50Z", "path": "flink-clients/src/main/java/org/apache/flink/client/cli/ProgramOptions.java", "diffHunk": "@@ -152,6 +112,26 @@ public ProgramOptions(CommandLine line) throws CliArgsException {\n \t\tthis.savepointSettings = CliFrontendParser.createSavepointRestoreSettings(line);\n \t}\n \n+\tprotected String[] extractProgramArgs(CommandLine line) {\n+\t\tString[] args = line.hasOption(ARGS_OPTION.getOpt()) ?\n+\t\t\tline.getOptionValues(ARGS_OPTION.getOpt()) :\n+\t\t\tline.getArgs();\n+\n+\t\tif (args.length > 0 && !line.hasOption(JAR_OPTION.getOpt())) {\n+\t\t\tjarFilePath = args[0];\n+\t\t\targs = Arrays.copyOfRange(args, 1, args.length);\n+\t\t}\n+\n+\t\treturn args;\n+\t}\n+\n+\tpublic void validate() throws CliArgsException {\n+\t\t// Java program should be specified a JAR file\n+\t\tif (getJarFilePath() == null) {\n+\t\t\tthrow new CliArgsException(\"Java program should be specified a JAR file.\");", "originalCommit": "aa13b691fb546649d5f2880930d9d83f850b937e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg4NDg4NA==", "url": "https://github.com/apache/flink/pull/11702#discussion_r413884884", "bodyText": "Yes, either of entrypoint class and jar file is enough. But before this PR, we only check whether ProgramOptions.getJarFilePath() is null in CliFrontend, so I kept the original logic in the validate method. It is ok for me to change this validate logic in this PR. What do you think?", "author": "WeiZhong94", "createdAt": "2020-04-23T15:14:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg1ODU0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ1NzI0Mg==", "url": "https://github.com/apache/flink/pull/11702#discussion_r414457242", "bodyText": "I see, then leave it as is.", "author": "aljoscha", "createdAt": "2020-04-24T10:08:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg1ODU0OQ=="}], "type": "inlineReview", "revised_code": null}]}