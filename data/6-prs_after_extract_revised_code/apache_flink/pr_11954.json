{"pr_number": 11954, "pr_title": "[FLINK-17420][table sql / api]Cannot alias Tuple and Row fields when  converting DataStream to Table", "pr_createdAt": "2020-04-30T04:50:50Z", "pr_url": "https://github.com/apache/flink/pull/11954", "timeline": [{"oid": "6a37ff126c35f1d7b35fb50ccff89f200967b2da", "url": "https://github.com/apache/flink/commit/6a37ff126c35f1d7b35fb50ccff89f200967b2da", "message": "[FLINK-17420][table sql / api]Cannot alias Tuple and Row fields when converting DataStream to Table", "committedDate": "2020-04-30T04:46:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE1ODIxMA==", "url": "https://github.com/apache/flink/pull/11954#discussion_r420158210", "bodyText": "Could you backport the tests from the master?", "author": "dawidwys", "createdAt": "2020-05-05T14:34:58Z", "path": "flink-table/flink-table-api-java/src/test/java/org/apache/flink/table/typeutils/FieldInfoUtilsTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.typeutils;\n+\n+import org.apache.flink.api.common.typeinfo.TypeInformation;\n+import org.apache.flink.api.common.typeinfo.Types;\n+import org.apache.flink.api.java.typeutils.RowTypeInfo;\n+import org.apache.flink.table.api.DataTypes;\n+import org.apache.flink.table.expressions.Expression;\n+import org.apache.flink.table.expressions.UnresolvedCallExpression;\n+import org.apache.flink.table.expressions.UnresolvedReferenceExpression;\n+import org.apache.flink.table.expressions.ValueLiteralExpression;\n+import org.apache.flink.table.functions.BuiltInFunctionDefinitions;\n+import org.apache.flink.table.functions.FunctionIdentifier;\n+import org.apache.flink.table.types.DataType;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+\n+/**\n+ * Test suite for {@link FieldInfoUtils}.\n+ */\n+public class FieldInfoUtilsTest {\n+\n+\tprivate static final RowTypeInfo typeInfo = new RowTypeInfo(", "originalCommit": "6a37ff126c35f1d7b35fb50ccff89f200967b2da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ5MjY2NA==", "url": "https://github.com/apache/flink/pull/11954#discussion_r420492664", "bodyText": "sure", "author": "leonardBang", "createdAt": "2020-05-06T00:59:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE1ODIxMA=="}], "type": "inlineReview", "revised_code": {"commit": "c5e67bf6cfb59353b1109c060b82820920d30ff8", "chunk": "diff --git a/flink-table/flink-table-api-java/src/test/java/org/apache/flink/table/typeutils/FieldInfoUtilsTest.java b/flink-table/flink-table-api-java/src/test/java/org/apache/flink/table/typeutils/FieldInfoUtilsTest.java\nindex 0c33273f886..9b9a892d1ce 100644\n--- a/flink-table/flink-table-api-java/src/test/java/org/apache/flink/table/typeutils/FieldInfoUtilsTest.java\n+++ b/flink-table/flink-table-api-java/src/test/java/org/apache/flink/table/typeutils/FieldInfoUtilsTest.java\n\n@@ -20,75 +20,135 @@ package org.apache.flink.table.typeutils;\n \n import org.apache.flink.api.common.typeinfo.TypeInformation;\n import org.apache.flink.api.common.typeinfo.Types;\n+import org.apache.flink.api.java.typeutils.PojoField;\n+import org.apache.flink.api.java.typeutils.PojoTypeInfo;\n import org.apache.flink.api.java.typeutils.RowTypeInfo;\n-import org.apache.flink.table.api.DataTypes;\n import org.apache.flink.table.expressions.Expression;\n import org.apache.flink.table.expressions.UnresolvedCallExpression;\n import org.apache.flink.table.expressions.UnresolvedReferenceExpression;\n import org.apache.flink.table.expressions.ValueLiteralExpression;\n import org.apache.flink.table.functions.BuiltInFunctionDefinitions;\n-import org.apache.flink.table.functions.FunctionIdentifier;\n-import org.apache.flink.table.types.DataType;\n \n import org.junit.Assert;\n import org.junit.Test;\n+import org.junit.experimental.runners.Enclosed;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n \n+import java.sql.Timestamp;\n import java.util.Arrays;\n+import java.util.Collection;\n+\n+import static org.apache.flink.table.functions.BuiltInFunctionDefinitions.PROCTIME;\n \n /**\n  * Test suite for {@link FieldInfoUtils}.\n  */\n+@RunWith(Enclosed.class)\n public class FieldInfoUtilsTest {\n \n-\tprivate static final RowTypeInfo typeInfo = new RowTypeInfo(\n-\t\tnew TypeInformation[]{Types.INT, Types.LONG, Types.STRING},\n-\t\tnew String[]{\"f0\", \"f1\", \"f2\"});\n-\n-\t@Test\n-\tpublic void testByPositionMode() {\n-\t\tFieldInfoUtils.TypeInfoSchema schema = FieldInfoUtils.getFieldsInfo(\n-\t\t\ttypeInfo,\n-\t\t\tnew Expression[]{\n-\t\t\t\tnew UnresolvedReferenceExpression(\"aa\"),\n-\t\t\t\tnew UnresolvedReferenceExpression(\"bb\"),\n-\t\t\t\tnew UnresolvedReferenceExpression(\"cc\")});\n-\n-\t\tAssert.assertEquals(\"[aa, bb, cc]\", Arrays.asList(schema.getFieldNames()).toString());\n-\t\tAssert.assertArrayEquals(new DataType[]{DataTypes.INT(), DataTypes.BIGINT(), DataTypes.STRING()}, schema.getFieldTypes());\n-\t}\n+\t/**\n+\t * Test for ByNameMode.\n+\t */\n+\t@RunWith(Parameterized.class)\n+\tpublic static final class TestByNameMode {\n+\n+\t\t@Parameterized.Parameters(name = \"{0}\")\n+\t\tpublic static Collection<TypeInformation> parameters() throws Exception {\n+\t\t\treturn Arrays.asList(\n+\t\t\t\tnew RowTypeInfo(\n+\t\t\t\t\tnew TypeInformation[]{Types.INT, Types.LONG, Types.SQL_TIMESTAMP},\n+\t\t\t\t\tnew String[]{\"f0\", \"f1\", \"f2\"}),\n+\t\t\t\tnew PojoTypeInfo(MyPojo.class, Arrays.asList(\n+\t\t\t\t\tnew PojoField(MyPojo.class.getDeclaredField(\"f0\"), Types.INT),\n+\t\t\t\t\tnew PojoField(MyPojo.class.getDeclaredField(\"f1\"), Types.LONG),\n+\t\t\t\t\tnew PojoField(MyPojo.class.getDeclaredField(\"f2\"), Types.SQL_TIMESTAMP))));\n+\t\t}\n+\n+\t\t@Parameterized.Parameter\n+\t\tpublic TypeInformation typeInfo;\n+\n+\t\t@Test\n+\t\tpublic void testByNameModeReorder() {\n+\t\t\tFieldInfoUtils.TypeInfoSchema schema = FieldInfoUtils.getFieldsInfo(\n+\t\t\t\ttypeInfo,\n+\t\t\t\tnew Expression[]{\n+\t\t\t\t\tnew UnresolvedReferenceExpression(\"f2\"),\n+\t\t\t\t\tnew UnresolvedReferenceExpression(\"f1\"),\n+\t\t\t\t\tnew UnresolvedReferenceExpression(\"f0\")});\n+\n+\t\t\tAssert.assertArrayEquals(new String[]{\"f2\", \"f1\", \"f0\"}, schema.getFieldNames());\n+\t\t}\n+\n+\t\t@Test\n+\t\tpublic void testByNameModeReorderAndRename() {\n+\t\t\tFieldInfoUtils.TypeInfoSchema schema = FieldInfoUtils.getFieldsInfo(\n+\t\t\t\ttypeInfo,\n+\t\t\t\tnew Expression[]{\n+\t\t\t\t\tnew UnresolvedCallExpression(\n+\t\t\t\t\t\tBuiltInFunctionDefinitions.AS,\n+\t\t\t\t\t\tArrays.asList(new UnresolvedReferenceExpression(\"f1\"), new ValueLiteralExpression(\"aa\"))),\n+\t\t\t\t\tnew UnresolvedCallExpression(\n+\t\t\t\t\t\tBuiltInFunctionDefinitions.AS,\n+\t\t\t\t\t\tArrays.asList(new UnresolvedReferenceExpression(\"f0\"), new ValueLiteralExpression(\"bb\"))),\n+\t\t\t\t\tnew UnresolvedCallExpression(\n+\t\t\t\t\t\tBuiltInFunctionDefinitions.AS,\n+\t\t\t\t\t\tArrays.asList(new UnresolvedReferenceExpression(\"f2\"), new ValueLiteralExpression(\"cc\")))\n+\t\t\t\t});\n \n-\t@Test\n-\tpublic void testByNameModeReorder() {\n-\t\tFieldInfoUtils.TypeInfoSchema schema = FieldInfoUtils.getFieldsInfo(\n-\t\t\ttypeInfo,\n-\t\t\tnew Expression[]{\n-\t\t\t\tnew UnresolvedReferenceExpression(\"f2\"),\n-\t\t\t\tnew UnresolvedReferenceExpression(\"f1\"),\n-\t\t\t\tnew UnresolvedReferenceExpression(\"f0\")});\n-\n-\t\tAssert.assertEquals(\"[f2, f1, f0]\", Arrays.asList(schema.getFieldNames()).toString());\n-\t\tAssert.assertArrayEquals(new DataType[]{DataTypes.STRING(), DataTypes.BIGINT(), DataTypes.INT()}, schema.getFieldTypes());\n+\t\t\tAssert.assertArrayEquals(new String[]{\"aa\", \"bb\", \"cc\"}, schema.getFieldNames());\n+\t\t}\n+\n+\t\t/**\n+\t\t * Test Pojo class.\n+\t\t */\n+\t\tpublic static class MyPojo {\n+\t\t\tpublic int f0;\n+\t\t\tpublic long f1;\n+\t\t\tpublic Timestamp f2;\n+\n+\t\t\tpublic MyPojo() {\n+\t\t\t}\n+\t\t}\n \t}\n \n-\t@Test\n-\tpublic void testByNameModeReorderAndRename() {\n-\t\tFieldInfoUtils.TypeInfoSchema schema = FieldInfoUtils.getFieldsInfo(\n-\t\t\ttypeInfo,\n-\t\t\tnew Expression[]{\n-\t\t\t\tnew UnresolvedCallExpression(\n-\t\t\t\t\tFunctionIdentifier.of(\"as\"),\n-\t\t\t\t\tBuiltInFunctionDefinitions.AS,\n-\t\t\t\t\tArrays.asList(new UnresolvedReferenceExpression(\"f1\"), new ValueLiteralExpression(\"aa\"))),\n-\t\t\t\tnew UnresolvedCallExpression(\n-\t\t\t\t\tFunctionIdentifier.of(\"as\"),\n-\t\t\t\t\tBuiltInFunctionDefinitions.AS,\n-\t\t\t\t\tArrays.asList(new UnresolvedReferenceExpression(\"f0\"), new ValueLiteralExpression(\"bb\"))),\n-\t\t\t\tnew UnresolvedCallExpression(\n-\t\t\t\t\tFunctionIdentifier.of(\"as\"),\n-\t\t\t\t\tBuiltInFunctionDefinitions.AS,\n-\t\t\t\t\tArrays.asList(new UnresolvedReferenceExpression(\"f2\"), new ValueLiteralExpression(\"cc\")))});\n-\n-\t\tAssert.assertEquals(\"[aa, bb, cc]\", Arrays.asList(schema.getFieldNames()).toString());\n-\t\tAssert.assertArrayEquals(new DataType[]{DataTypes.BIGINT(), DataTypes.INT(), DataTypes.STRING()}, schema.getFieldTypes());\n+\t/**\n+\t * Test for ByPositionMode.\n+\t */\n+\tpublic static final class TestByPositionMode {\n+\t\tprivate static final RowTypeInfo rowTypeInfo = new RowTypeInfo(\n+\t\t\tnew TypeInformation[]{Types.INT, Types.LONG, Types.SQL_TIMESTAMP},\n+\t\t\tnew String[]{\"f0\", \"f1\", \"f2\"});\n+\n+\t\t@Test\n+\t\tpublic void testByPositionMode() {\n+\t\t\tFieldInfoUtils.TypeInfoSchema schema = FieldInfoUtils.getFieldsInfo(\n+\t\t\t\trowTypeInfo,\n+\t\t\t\tnew Expression[]{\n+\t\t\t\t\tnew UnresolvedReferenceExpression(\"aa\"),\n+\t\t\t\t\tnew UnresolvedReferenceExpression(\"bb\"),\n+\t\t\t\t\tnew UnresolvedReferenceExpression(\"cc\")});\n+\n+\t\t\tAssert.assertArrayEquals(new String[]{\"aa\", \"bb\", \"cc\"}, schema.getFieldNames());\n+\t\t}\n+\n+\t\t@Test\n+\t\tpublic void testByPositionModeProcTime() {\n+\t\t\tFieldInfoUtils.TypeInfoSchema schema = FieldInfoUtils.getFieldsInfo(\n+\t\t\t\trowTypeInfo,\n+\t\t\t\tnew Expression[]{\n+\t\t\t\t\tnew UnresolvedReferenceExpression(\"aa\"),\n+\t\t\t\t\tnew UnresolvedReferenceExpression(\"bb\"),\n+\t\t\t\t\tnew UnresolvedReferenceExpression(\"cc\"),\n+\t\t\t\t\tnew UnresolvedCallExpression(\n+\t\t\t\t\t\tBuiltInFunctionDefinitions.AS,\n+\t\t\t\t\t\tArrays.asList(\n+\t\t\t\t\t\t\tnew UnresolvedCallExpression(\n+\t\t\t\t\t\t\t\tPROCTIME,\n+\t\t\t\t\t\t\t\tArrays.asList(new UnresolvedReferenceExpression(\"cc\"))),\n+\t\t\t\t\t\t\tnew ValueLiteralExpression(\"proctime\")))});\n+\n+\t\t\tAssert.assertArrayEquals(new String[]{\"aa\", \"bb\", \"cc\", \"proctime\"}, schema.getFieldNames());\n+\t\t}\n \t}\n }\n"}}, {"oid": "c5e67bf6cfb59353b1109c060b82820920d30ff8", "url": "https://github.com/apache/flink/commit/c5e67bf6cfb59353b1109c060b82820920d30ff8", "message": "address comment", "committedDate": "2020-05-06T01:56:57Z", "type": "commit"}]}