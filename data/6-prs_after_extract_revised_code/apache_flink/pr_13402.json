{"pr_number": 13402, "pr_title": "[FLINK-19262][API/DataStream] Can not setParallelism for FLIP-27 source", "pr_createdAt": "2020-09-16T11:38:08Z", "pr_url": "https://github.com/apache/flink/pull/13402", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM3MTQwNA==", "url": "https://github.com/apache/flink/pull/13402#discussion_r489371404", "bodyText": "int is OK.", "author": "JingsongLi", "createdAt": "2020-09-16T11:42:29Z", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/api/datastream/DataStreamSourceTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.api.datastream;\n+\n+import org.apache.flink.api.common.eventtime.WatermarkStrategy;\n+import org.apache.flink.api.connector.source.Boundedness;\n+import org.apache.flink.api.connector.source.mocks.MockSource;\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Unit test for {@link DataStreamSource}.\n+ */\n+public class DataStreamSourceTest {\n+\n+\t/**\n+\t * test Constructor for new Sources (FLIP-27).\n+\t */\n+\t@Test\n+\tpublic void testConstructor(){\n+\t\tInteger expectParallelism = 100;", "originalCommit": "0b3231fcf0cbe8d16feb855dc287d09977c11de7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM5MzcyMw==", "url": "https://github.com/apache/flink/pull/13402#discussion_r489393723", "bodyText": "ok", "author": "pyscala", "createdAt": "2020-09-16T12:22:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM3MTQwNA=="}], "type": "inlineReview", "revised_code": {"commit": "d827137220829e71ea5e7f753502339d2a1d5c48", "chunk": "diff --git a/flink-streaming-java/src/test/java/org/apache/flink/streaming/api/datastream/DataStreamSourceTest.java b/flink-streaming-java/src/test/java/org/apache/flink/streaming/api/datastream/DataStreamSourceTest.java\nindex 74c49f1ee9..31c964cea4 100644\n--- a/flink-streaming-java/src/test/java/org/apache/flink/streaming/api/datastream/DataStreamSourceTest.java\n+++ b/flink-streaming-java/src/test/java/org/apache/flink/streaming/api/datastream/DataStreamSourceTest.java\n\n@@ -36,21 +36,18 @@ public class DataStreamSourceTest {\n \t */\n \t@Test\n \tpublic void testConstructor(){\n-\t\tInteger expectParallelism = 100;\n-\t\tBoolean expectIsParallel = true;\n+\t\tint expectParallelism = 100;\n+\t\tboolean expectIsParallel = true;\n \t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n \t\tMockSource mockSource = new MockSource(Boundedness.BOUNDED, 10);\n-\t\tDataStreamSource<Integer> stream = new DataStreamSource<Integer>(\n-\t\t\tenv,\n+\t\tDataStreamSource<Integer> stream = env.fromSource(\n \t\t\tmockSource,\n-\t\t\tWatermarkStrategy.noWatermarks() ,\n-\t\t\tnull,\n+\t\t\tWatermarkStrategy.noWatermarks(),\n \t\t\t\"TestingSource\");\n-\t\tstream.setParallelism(100);\n+\t\tstream.setParallelism(expectParallelism);\n \n \t\tassertEquals(expectIsParallel, stream.isParallel);\n \n-\t\tInteger actual = Integer.valueOf(stream.getParallelism());\n-\t\tassertEquals(expectParallelism, actual);\n+\t\tassertEquals(expectParallelism, stream.getParallelism());\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM3MTUxMw==", "url": "https://github.com/apache/flink/pull/13402#discussion_r489371513", "bodyText": "ditto boolean", "author": "JingsongLi", "createdAt": "2020-09-16T11:42:41Z", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/api/datastream/DataStreamSourceTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.api.datastream;\n+\n+import org.apache.flink.api.common.eventtime.WatermarkStrategy;\n+import org.apache.flink.api.connector.source.Boundedness;\n+import org.apache.flink.api.connector.source.mocks.MockSource;\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Unit test for {@link DataStreamSource}.\n+ */\n+public class DataStreamSourceTest {\n+\n+\t/**\n+\t * test Constructor for new Sources (FLIP-27).\n+\t */\n+\t@Test\n+\tpublic void testConstructor(){\n+\t\tInteger expectParallelism = 100;\n+\t\tBoolean expectIsParallel = true;", "originalCommit": "0b3231fcf0cbe8d16feb855dc287d09977c11de7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM5MzY3NA==", "url": "https://github.com/apache/flink/pull/13402#discussion_r489393674", "bodyText": "ok", "author": "pyscala", "createdAt": "2020-09-16T12:22:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM3MTUxMw=="}], "type": "inlineReview", "revised_code": {"commit": "d827137220829e71ea5e7f753502339d2a1d5c48", "chunk": "diff --git a/flink-streaming-java/src/test/java/org/apache/flink/streaming/api/datastream/DataStreamSourceTest.java b/flink-streaming-java/src/test/java/org/apache/flink/streaming/api/datastream/DataStreamSourceTest.java\nindex 74c49f1ee9..31c964cea4 100644\n--- a/flink-streaming-java/src/test/java/org/apache/flink/streaming/api/datastream/DataStreamSourceTest.java\n+++ b/flink-streaming-java/src/test/java/org/apache/flink/streaming/api/datastream/DataStreamSourceTest.java\n\n@@ -36,21 +36,18 @@ public class DataStreamSourceTest {\n \t */\n \t@Test\n \tpublic void testConstructor(){\n-\t\tInteger expectParallelism = 100;\n-\t\tBoolean expectIsParallel = true;\n+\t\tint expectParallelism = 100;\n+\t\tboolean expectIsParallel = true;\n \t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n \t\tMockSource mockSource = new MockSource(Boundedness.BOUNDED, 10);\n-\t\tDataStreamSource<Integer> stream = new DataStreamSource<Integer>(\n-\t\t\tenv,\n+\t\tDataStreamSource<Integer> stream = env.fromSource(\n \t\t\tmockSource,\n-\t\t\tWatermarkStrategy.noWatermarks() ,\n-\t\t\tnull,\n+\t\t\tWatermarkStrategy.noWatermarks(),\n \t\t\t\"TestingSource\");\n-\t\tstream.setParallelism(100);\n+\t\tstream.setParallelism(expectParallelism);\n \n \t\tassertEquals(expectIsParallel, stream.isParallel);\n \n-\t\tInteger actual = Integer.valueOf(stream.getParallelism());\n-\t\tassertEquals(expectParallelism, actual);\n+\t\tassertEquals(expectParallelism, stream.getParallelism());\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM3MTgyMA==", "url": "https://github.com/apache/flink/pull/13402#discussion_r489371820", "bodyText": "use expectParallelism", "author": "JingsongLi", "createdAt": "2020-09-16T11:43:14Z", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/api/datastream/DataStreamSourceTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.api.datastream;\n+\n+import org.apache.flink.api.common.eventtime.WatermarkStrategy;\n+import org.apache.flink.api.connector.source.Boundedness;\n+import org.apache.flink.api.connector.source.mocks.MockSource;\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Unit test for {@link DataStreamSource}.\n+ */\n+public class DataStreamSourceTest {\n+\n+\t/**\n+\t * test Constructor for new Sources (FLIP-27).\n+\t */\n+\t@Test\n+\tpublic void testConstructor(){\n+\t\tInteger expectParallelism = 100;\n+\t\tBoolean expectIsParallel = true;\n+\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n+\t\tMockSource mockSource = new MockSource(Boundedness.BOUNDED, 10);\n+\t\tDataStreamSource<Integer> stream = new DataStreamSource<Integer>(\n+\t\t\tenv,\n+\t\t\tmockSource,\n+\t\t\tWatermarkStrategy.noWatermarks() ,\n+\t\t\tnull,\n+\t\t\t\"TestingSource\");\n+\t\tstream.setParallelism(100);", "originalCommit": "0b3231fcf0cbe8d16feb855dc287d09977c11de7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM5MzYwNA==", "url": "https://github.com/apache/flink/pull/13402#discussion_r489393604", "bodyText": "sorry for careless.", "author": "pyscala", "createdAt": "2020-09-16T12:22:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM3MTgyMA=="}], "type": "inlineReview", "revised_code": {"commit": "d827137220829e71ea5e7f753502339d2a1d5c48", "chunk": "diff --git a/flink-streaming-java/src/test/java/org/apache/flink/streaming/api/datastream/DataStreamSourceTest.java b/flink-streaming-java/src/test/java/org/apache/flink/streaming/api/datastream/DataStreamSourceTest.java\nindex 74c49f1ee9..31c964cea4 100644\n--- a/flink-streaming-java/src/test/java/org/apache/flink/streaming/api/datastream/DataStreamSourceTest.java\n+++ b/flink-streaming-java/src/test/java/org/apache/flink/streaming/api/datastream/DataStreamSourceTest.java\n\n@@ -36,21 +36,18 @@ public class DataStreamSourceTest {\n \t */\n \t@Test\n \tpublic void testConstructor(){\n-\t\tInteger expectParallelism = 100;\n-\t\tBoolean expectIsParallel = true;\n+\t\tint expectParallelism = 100;\n+\t\tboolean expectIsParallel = true;\n \t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n \t\tMockSource mockSource = new MockSource(Boundedness.BOUNDED, 10);\n-\t\tDataStreamSource<Integer> stream = new DataStreamSource<Integer>(\n-\t\t\tenv,\n+\t\tDataStreamSource<Integer> stream = env.fromSource(\n \t\t\tmockSource,\n-\t\t\tWatermarkStrategy.noWatermarks() ,\n-\t\t\tnull,\n+\t\t\tWatermarkStrategy.noWatermarks(),\n \t\t\t\"TestingSource\");\n-\t\tstream.setParallelism(100);\n+\t\tstream.setParallelism(expectParallelism);\n \n \t\tassertEquals(expectIsParallel, stream.isParallel);\n \n-\t\tInteger actual = Integer.valueOf(stream.getParallelism());\n-\t\tassertEquals(expectParallelism, actual);\n+\t\tassertEquals(expectParallelism, stream.getParallelism());\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM3MjQyNw==", "url": "https://github.com/apache/flink/pull/13402#discussion_r489372427", "bodyText": "Use env.fromSource(mockSource, WatermarkStrategy.noWatermarks(), \"TestingSource\")", "author": "JingsongLi", "createdAt": "2020-09-16T11:44:19Z", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/api/datastream/DataStreamSourceTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.api.datastream;\n+\n+import org.apache.flink.api.common.eventtime.WatermarkStrategy;\n+import org.apache.flink.api.connector.source.Boundedness;\n+import org.apache.flink.api.connector.source.mocks.MockSource;\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Unit test for {@link DataStreamSource}.\n+ */\n+public class DataStreamSourceTest {\n+\n+\t/**\n+\t * test Constructor for new Sources (FLIP-27).\n+\t */\n+\t@Test\n+\tpublic void testConstructor(){\n+\t\tInteger expectParallelism = 100;\n+\t\tBoolean expectIsParallel = true;\n+\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n+\t\tMockSource mockSource = new MockSource(Boundedness.BOUNDED, 10);\n+\t\tDataStreamSource<Integer> stream = new DataStreamSource<Integer>(", "originalCommit": "0b3231fcf0cbe8d16feb855dc287d09977c11de7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM5Mzg0MA==", "url": "https://github.com/apache/flink/pull/13402#discussion_r489393840", "bodyText": "good idea.", "author": "pyscala", "createdAt": "2020-09-16T12:22:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM3MjQyNw=="}], "type": "inlineReview", "revised_code": {"commit": "d827137220829e71ea5e7f753502339d2a1d5c48", "chunk": "diff --git a/flink-streaming-java/src/test/java/org/apache/flink/streaming/api/datastream/DataStreamSourceTest.java b/flink-streaming-java/src/test/java/org/apache/flink/streaming/api/datastream/DataStreamSourceTest.java\nindex 74c49f1ee9..31c964cea4 100644\n--- a/flink-streaming-java/src/test/java/org/apache/flink/streaming/api/datastream/DataStreamSourceTest.java\n+++ b/flink-streaming-java/src/test/java/org/apache/flink/streaming/api/datastream/DataStreamSourceTest.java\n\n@@ -36,21 +36,18 @@ public class DataStreamSourceTest {\n \t */\n \t@Test\n \tpublic void testConstructor(){\n-\t\tInteger expectParallelism = 100;\n-\t\tBoolean expectIsParallel = true;\n+\t\tint expectParallelism = 100;\n+\t\tboolean expectIsParallel = true;\n \t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n \t\tMockSource mockSource = new MockSource(Boundedness.BOUNDED, 10);\n-\t\tDataStreamSource<Integer> stream = new DataStreamSource<Integer>(\n-\t\t\tenv,\n+\t\tDataStreamSource<Integer> stream = env.fromSource(\n \t\t\tmockSource,\n-\t\t\tWatermarkStrategy.noWatermarks() ,\n-\t\t\tnull,\n+\t\t\tWatermarkStrategy.noWatermarks(),\n \t\t\t\"TestingSource\");\n-\t\tstream.setParallelism(100);\n+\t\tstream.setParallelism(expectParallelism);\n \n \t\tassertEquals(expectIsParallel, stream.isParallel);\n \n-\t\tInteger actual = Integer.valueOf(stream.getParallelism());\n-\t\tassertEquals(expectParallelism, actual);\n+\t\tassertEquals(expectParallelism, stream.getParallelism());\n \t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU2Mzg0Mw==", "url": "https://github.com/apache/flink/pull/13402#discussion_r489563843", "bodyText": "There is still a format issue here.\nI think this might not be caught automatically by the checkstyle tools.", "author": "StephanEwen", "createdAt": "2020-09-16T16:20:27Z", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/api/datastream/DataStreamSourceTest.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.api.datastream;\n+\n+import org.apache.flink.api.common.eventtime.WatermarkStrategy;\n+import org.apache.flink.api.connector.source.Boundedness;\n+import org.apache.flink.api.connector.source.mocks.MockSource;\n+import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Unit test for {@link DataStreamSource}.\n+ */\n+public class DataStreamSourceTest {\n+\n+\t/**\n+\t * test Constructor for new Sources (FLIP-27).\n+\t */\n+\t@Test\n+\tpublic void testConstructor(){", "originalCommit": "4b7f5b86b91caffdb8436913467d165254000745", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg5MjMzMQ==", "url": "https://github.com/apache/flink/pull/13402#discussion_r489892331", "bodyText": "Thanks for your reminder.", "author": "pyscala", "createdAt": "2020-09-17T02:27:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU2Mzg0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg5MjkyMQ==", "url": "https://github.com/apache/flink/pull/13402#discussion_r489892921", "bodyText": "@pyscala I think Stephan means: testConstructor() { instead of testConstructor(){.", "author": "JingsongLi", "createdAt": "2020-09-17T02:28:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU2Mzg0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTkxNTk5MA==", "url": "https://github.com/apache/flink/pull/13402#discussion_r489915990", "bodyText": "Done.", "author": "pyscala", "createdAt": "2020-09-17T03:05:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU2Mzg0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "7dba1fa46fecbad4534c560ed3c016b0d69a0d1e", "chunk": "diff --git a/flink-streaming-java/src/test/java/org/apache/flink/streaming/api/datastream/DataStreamSourceTest.java b/flink-streaming-java/src/test/java/org/apache/flink/streaming/api/datastream/DataStreamSourceTest.java\nindex 31c964cea4..74c49f1ee9 100644\n--- a/flink-streaming-java/src/test/java/org/apache/flink/streaming/api/datastream/DataStreamSourceTest.java\n+++ b/flink-streaming-java/src/test/java/org/apache/flink/streaming/api/datastream/DataStreamSourceTest.java\n\n@@ -36,18 +36,21 @@ public class DataStreamSourceTest {\n \t */\n \t@Test\n \tpublic void testConstructor(){\n-\t\tint expectParallelism = 100;\n-\t\tboolean expectIsParallel = true;\n+\t\tInteger expectParallelism = 100;\n+\t\tBoolean expectIsParallel = true;\n \t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n \t\tMockSource mockSource = new MockSource(Boundedness.BOUNDED, 10);\n-\t\tDataStreamSource<Integer> stream = env.fromSource(\n+\t\tDataStreamSource<Integer> stream = new DataStreamSource<Integer>(\n+\t\t\tenv,\n \t\t\tmockSource,\n-\t\t\tWatermarkStrategy.noWatermarks(),\n+\t\t\tWatermarkStrategy.noWatermarks() ,\n+\t\t\tnull,\n \t\t\t\"TestingSource\");\n-\t\tstream.setParallelism(expectParallelism);\n+\t\tstream.setParallelism(100);\n \n \t\tassertEquals(expectIsParallel, stream.isParallel);\n \n-\t\tassertEquals(expectParallelism, stream.getParallelism());\n+\t\tInteger actual = Integer.valueOf(stream.getParallelism());\n+\t\tassertEquals(expectParallelism, actual);\n \t}\n }\n"}}, {"oid": "7dba1fa46fecbad4534c560ed3c016b0d69a0d1e", "url": "https://github.com/apache/flink/commit/7dba1fa46fecbad4534c560ed3c016b0d69a0d1e", "message": "[FLINK-19262][API/DataStream] Can not setParallelism for FLIP-27 source", "committedDate": "2020-09-17T02:18:51Z", "type": "commit"}, {"oid": "d827137220829e71ea5e7f753502339d2a1d5c48", "url": "https://github.com/apache/flink/commit/d827137220829e71ea5e7f753502339d2a1d5c48", "message": "code clean up", "committedDate": "2020-09-17T02:20:29Z", "type": "commit"}, {"oid": "f4a438df036bada30853b6450931e5b116dce9a1", "url": "https://github.com/apache/flink/commit/f4a438df036bada30853b6450931e5b116dce9a1", "message": "fix checkstyle issues & get the latest code", "committedDate": "2020-09-17T02:24:08Z", "type": "commit"}, {"oid": "f4a438df036bada30853b6450931e5b116dce9a1", "url": "https://github.com/apache/flink/commit/f4a438df036bada30853b6450931e5b116dce9a1", "message": "fix checkstyle issues & get the latest code", "committedDate": "2020-09-17T02:24:08Z", "type": "forcePushed"}, {"oid": "83ff7dd5e54dca0b65e99cbf6409dbf6ae0428a4", "url": "https://github.com/apache/flink/commit/83ff7dd5e54dca0b65e99cbf6409dbf6ae0428a4", "message": "fix checkstyle issues", "committedDate": "2020-09-17T03:03:55Z", "type": "commit"}]}