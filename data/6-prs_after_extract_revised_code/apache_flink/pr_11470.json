{"pr_number": 11470, "pr_title": "[FLINK-16671][python] Support for defining scopes and variables on Python metric group", "pr_createdAt": "2020-03-21T07:49:56Z", "pr_url": "https://github.com/apache/flink/pull/11470", "timeline": [{"oid": "1dc75d4ab724db97f14dfc63e2c286e87f1a3bb0", "url": "https://github.com/apache/flink/commit/1dc75d4ab724db97f14dfc63e2c286e87f1a3bb0", "message": "[FLINK-16671][python] Support for defining scopes and variables on Python metric group", "committedDate": "2020-03-21T13:34:09Z", "type": "commit"}, {"oid": "1dc75d4ab724db97f14dfc63e2c286e87f1a3bb0", "url": "https://github.com/apache/flink/commit/1dc75d4ab724db97f14dfc63e2c286e87f1a3bb0", "message": "[FLINK-16671][python] Support for defining scopes and variables on Python metric group", "committedDate": "2020-03-21T13:34:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYzMDQxNA==", "url": "https://github.com/apache/flink/pull/11470#discussion_r397630414", "bodyText": "Annotate it as @nullable?", "author": "dianfu", "createdAt": "2020-03-25T06:21:49Z", "path": "flink-python/src/main/java/org/apache/flink/python/AbstractPythonFunctionRunner.java", "diffHunk": "@@ -116,17 +119,24 @@\n \t */\n \tprotected transient DataOutputViewStreamWrapper baosWrapper;\n \n+\t/**\n+\t * The flinkMetricContainer will be set to null if metric is configured to be turned off.\n+\t */\n+\t@Nullable protected FlinkMetricContainer flinkMetricContainer;\n+\n \tpublic AbstractPythonFunctionRunner(\n \t\tString taskName,\n \t\tFnDataReceiver<byte[]> resultReceiver,\n \t\tPythonEnvironmentManager environmentManager,\n \t\tStateRequestHandler stateRequestHandler,\n-\t\tMap<String, String> jobOptions) {\n+\t\tMap<String, String> jobOptions,\n+\t\tFlinkMetricContainer flinkMetricContainer) {", "originalCommit": "1dc75d4ab724db97f14dfc63e2c286e87f1a3bb0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8d1f67cb854839dc8a1eb92bd000c74ff466cc9", "chunk": "diff --git a/flink-python/src/main/java/org/apache/flink/python/AbstractPythonFunctionRunner.java b/flink-python/src/main/java/org/apache/flink/python/AbstractPythonFunctionRunner.java\nindex 917180c8531..fb6a4c1d68a 100644\n--- a/flink-python/src/main/java/org/apache/flink/python/AbstractPythonFunctionRunner.java\n+++ b/flink-python/src/main/java/org/apache/flink/python/AbstractPythonFunctionRunner.java\n\n@@ -130,7 +131,7 @@ public abstract class AbstractPythonFunctionRunner<IN> implements PythonFunction\n \t\tPythonEnvironmentManager environmentManager,\n \t\tStateRequestHandler stateRequestHandler,\n \t\tMap<String, String> jobOptions,\n-\t\tFlinkMetricContainer flinkMetricContainer) {\n+\t\t@Nullable FlinkMetricContainer flinkMetricContainer) {\n \t\tthis.taskName = Preconditions.checkNotNull(taskName);\n \t\tthis.resultReceiver = Preconditions.checkNotNull(resultReceiver);\n \t\tthis.environmentManager = Preconditions.checkNotNull(environmentManager);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYzNTk4OA==", "url": "https://github.com/apache/flink/pull/11470#discussion_r397635988", "bodyText": "What about name it as \"python.metrics.enabled\" or something else as this configuration is not only used for Python UDF, but will also used for the Python DataStream API which maybe introduced in the future?", "author": "dianfu", "createdAt": "2020-03-25T06:41:08Z", "path": "flink-python/src/main/java/org/apache/flink/python/PythonOptions.java", "diffHunk": "@@ -81,4 +81,13 @@\n \t\t\t\"buffer of a Python worker. The memory will be accounted as managed memory if the \" +\n \t\t\t\"actual memory allocated to an operator is no less than the total memory of a Python \" +\n \t\t\t\"worker. Otherwise, this configuration takes no effect.\");\n+\n+\t/**\n+\t * The configuration to enable or disable metric for Python UDFs.\n+\t */\n+\tpublic static final ConfigOption<Boolean> PYTHON_UDF_METRIC_ENABLED = ConfigOptions\n+\t\t.key(\"python.udf.metric.enabled\")", "originalCommit": "1dc75d4ab724db97f14dfc63e2c286e87f1a3bb0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8d1f67cb854839dc8a1eb92bd000c74ff466cc9", "chunk": "diff --git a/flink-python/src/main/java/org/apache/flink/python/PythonOptions.java b/flink-python/src/main/java/org/apache/flink/python/PythonOptions.java\nindex e95ced81be6..020a6390e8b 100644\n--- a/flink-python/src/main/java/org/apache/flink/python/PythonOptions.java\n+++ b/flink-python/src/main/java/org/apache/flink/python/PythonOptions.java\n\n@@ -83,11 +83,11 @@ public class PythonOptions {\n \t\t\t\"worker. Otherwise, this configuration takes no effect.\");\n \n \t/**\n-\t * The configuration to enable or disable metric for Python UDFs.\n+\t * The configuration to enable or disable metric for Python execution.\n \t */\n-\tpublic static final ConfigOption<Boolean> PYTHON_UDF_METRIC_ENABLED = ConfigOptions\n-\t\t.key(\"python.udf.metric.enabled\")\n+\tpublic static final ConfigOption<Boolean> PYTHON_METRIC_ENABLED = ConfigOptions\n+\t\t.key(\"python.metric.enabled\")\n \t\t.defaultValue(true)\n-\t\t.withDescription(\"When it is false, metric for Python UDFs will be disabled. You can \" +\n-\t\t\t\"disable the metric to achieve a better performance at some circumstance.\");\n+\t\t.withDescription(\"When it is false, metric for Python will be disabled. You can \" +\n+\t\t\t\"disable the metric to achieve better performance at some circumstance.\");\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYzOTA5MQ==", "url": "https://github.com/apache/flink/pull/11470#discussion_r397639091", "bodyText": "What about move this method to AbstractPythonFunctionRunner as the metrics will not only be used by UDF/UDTF, but will also be used by UDAF and the Python DataStream API which maybe introduced in the future?", "author": "dianfu", "createdAt": "2020-03-25T06:50:56Z", "path": "flink-python/src/main/java/org/apache/flink/table/runtime/runners/python/AbstractPythonStatelessFunctionRunner.java", "diffHunk": "@@ -250,4 +252,15 @@ public RowType getOutputType() {\n \t */\n \t@VisibleForTesting\n \tpublic abstract FlinkFnApi.UserDefinedFunctions getUserDefinedFunctionsProto();\n+\n+\t/**\n+\t * Gets the proto representation of the base MetricGroup used for all user-defined functions.\n+\t */\n+\tprotected FlinkFnApi.MetricGroupInfo getBaseMetricGroupInfo() {", "originalCommit": "1dc75d4ab724db97f14dfc63e2c286e87f1a3bb0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8d1f67cb854839dc8a1eb92bd000c74ff466cc9", "chunk": "diff --git a/flink-python/src/main/java/org/apache/flink/table/runtime/runners/python/AbstractPythonStatelessFunctionRunner.java b/flink-python/src/main/java/org/apache/flink/table/runtime/runners/python/AbstractPythonStatelessFunctionRunner.java\nindex 6259f9b0753..89b2068e8ad 100644\n--- a/flink-python/src/main/java/org/apache/flink/table/runtime/runners/python/AbstractPythonStatelessFunctionRunner.java\n+++ b/flink-python/src/main/java/org/apache/flink/table/runtime/runners/python/AbstractPythonStatelessFunctionRunner.java\n\n@@ -252,15 +252,4 @@ public abstract class AbstractPythonStatelessFunctionRunner<IN> extends Abstract\n \t */\n \t@VisibleForTesting\n \tpublic abstract FlinkFnApi.UserDefinedFunctions getUserDefinedFunctionsProto();\n-\n-\t/**\n-\t * Gets the proto representation of the base MetricGroup used for all user-defined functions.\n-\t */\n-\tprotected FlinkFnApi.MetricGroupInfo getBaseMetricGroupInfo() {\n-\t\tif (flinkMetricContainer != null) {\n-\t\t\treturn flinkMetricContainer.getBaseMetricGroupInfo();\n-\t\t} else {\n-\t\t\treturn FlinkFnApi.MetricGroupInfo.newBuilder().build();\n-\t\t}\n-\t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY0MzM5MQ==", "url": "https://github.com/apache/flink/pull/11470#discussion_r397643391", "bodyText": "Mark it as @Internal", "author": "dianfu", "createdAt": "2020-03-25T07:04:59Z", "path": "flink-python/src/main/java/org/apache/flink/python/metric/FlinkMetricContainer.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.python.metric;\n+\n+import org.apache.flink.configuration.GlobalConfiguration;\n+import org.apache.flink.configuration.MetricOptions;\n+import org.apache.flink.fnexecution.v1.FlinkFnApi;\n+import org.apache.flink.metrics.MetricGroup;\n+\n+import java.util.Arrays;\n+\n+/**\n+ * Helper class for forwarding metric group information from Java to Python and forward Python\n+ * metrics to Java accumulators and metrics.\n+ */\n+public class FlinkMetricContainer {", "originalCommit": "1dc75d4ab724db97f14dfc63e2c286e87f1a3bb0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b8d1f67cb854839dc8a1eb92bd000c74ff466cc9", "chunk": "diff --git a/flink-python/src/main/java/org/apache/flink/python/metric/FlinkMetricContainer.java b/flink-python/src/main/java/org/apache/flink/python/metric/FlinkMetricContainer.java\nindex 0f88e12b747..e895fb56605 100644\n--- a/flink-python/src/main/java/org/apache/flink/python/metric/FlinkMetricContainer.java\n+++ b/flink-python/src/main/java/org/apache/flink/python/metric/FlinkMetricContainer.java\n\n@@ -18,6 +18,7 @@\n \n package org.apache.flink.python.metric;\n \n+import org.apache.flink.annotation.Internal;\n import org.apache.flink.configuration.GlobalConfiguration;\n import org.apache.flink.configuration.MetricOptions;\n import org.apache.flink.fnexecution.v1.FlinkFnApi;\n"}}, {"oid": "b8d1f67cb854839dc8a1eb92bd000c74ff466cc9", "url": "https://github.com/apache/flink/commit/b8d1f67cb854839dc8a1eb92bd000c74ff466cc9", "message": "address comments", "committedDate": "2020-03-25T08:50:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg4NzA3NA==", "url": "https://github.com/apache/flink/pull/11470#discussion_r397887074", "bodyText": "Unnecessary change", "author": "dianfu", "createdAt": "2020-03-25T14:15:20Z", "path": "flink-python/src/main/java/org/apache/flink/python/AbstractPythonFunctionRunner.java", "diffHunk": "@@ -55,7 +59,7 @@\n \n \tprivate static final String MAIN_INPUT_ID = \"input\";\n \n-\tprivate final String taskName;\n+\tprotected final String taskName;", "originalCommit": "b8d1f67cb854839dc8a1eb92bd000c74ff466cc9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7a7a44b62e4243ed454e174f957f2429cf0f067b", "chunk": "diff --git a/flink-python/src/main/java/org/apache/flink/python/AbstractPythonFunctionRunner.java b/flink-python/src/main/java/org/apache/flink/python/AbstractPythonFunctionRunner.java\nindex fb6a4c1d68a..a5afe8183cd 100644\n--- a/flink-python/src/main/java/org/apache/flink/python/AbstractPythonFunctionRunner.java\n+++ b/flink-python/src/main/java/org/apache/flink/python/AbstractPythonFunctionRunner.java\n\n@@ -59,7 +58,7 @@ public abstract class AbstractPythonFunctionRunner<IN> implements PythonFunction\n \n \tprivate static final String MAIN_INPUT_ID = \"input\";\n \n-\tprotected final String taskName;\n+\tprivate final String taskName;\n \n \t/**\n \t * The Python function execution result receiver.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg4NzYzNQ==", "url": "https://github.com/apache/flink/pull/11470#discussion_r397887635", "bodyText": "Change to private?", "author": "dianfu", "createdAt": "2020-03-25T14:16:04Z", "path": "flink-python/src/main/java/org/apache/flink/python/AbstractPythonFunctionRunner.java", "diffHunk": "@@ -116,17 +120,24 @@\n \t */\n \tprotected transient DataOutputViewStreamWrapper baosWrapper;\n \n+\t/**\n+\t * The flinkMetricContainer will be set to null if metric is configured to be turned off.\n+\t */\n+\t@Nullable protected FlinkMetricContainer flinkMetricContainer;", "originalCommit": "b8d1f67cb854839dc8a1eb92bd000c74ff466cc9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7a7a44b62e4243ed454e174f957f2429cf0f067b", "chunk": "diff --git a/flink-python/src/main/java/org/apache/flink/python/AbstractPythonFunctionRunner.java b/flink-python/src/main/java/org/apache/flink/python/AbstractPythonFunctionRunner.java\nindex fb6a4c1d68a..a5afe8183cd 100644\n--- a/flink-python/src/main/java/org/apache/flink/python/AbstractPythonFunctionRunner.java\n+++ b/flink-python/src/main/java/org/apache/flink/python/AbstractPythonFunctionRunner.java\n\n@@ -123,7 +122,7 @@ public abstract class AbstractPythonFunctionRunner<IN> implements PythonFunction\n \t/**\n \t * The flinkMetricContainer will be set to null if metric is configured to be turned off.\n \t */\n-\t@Nullable protected FlinkMetricContainer flinkMetricContainer;\n+\t@Nullable private FlinkMetricContainer flinkMetricContainer;\n \n \tpublic AbstractPythonFunctionRunner(\n \t\tString taskName,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg4ODkwMg==", "url": "https://github.com/apache/flink/pull/11470#discussion_r397888902", "bodyText": "What about remove the used for all user-defined functions as metrics will be used not only for UDF?", "author": "dianfu", "createdAt": "2020-03-25T14:17:51Z", "path": "flink-python/src/main/java/org/apache/flink/python/AbstractPythonFunctionRunner.java", "diffHunk": "@@ -224,4 +235,15 @@ public JobBundleFactory createJobBundleFactory(Struct pipelineOptions) throws Ex\n \tpublic abstract ExecutableStage createExecutableStage() throws Exception;\n \n \tpublic abstract OutputReceiverFactory createOutputReceiverFactory();\n+\n+\t/**\n+\t * Gets the proto representation of the base MetricGroup used for all user-defined functions.", "originalCommit": "b8d1f67cb854839dc8a1eb92bd000c74ff466cc9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7a7a44b62e4243ed454e174f957f2429cf0f067b", "chunk": "diff --git a/flink-python/src/main/java/org/apache/flink/python/AbstractPythonFunctionRunner.java b/flink-python/src/main/java/org/apache/flink/python/AbstractPythonFunctionRunner.java\nindex fb6a4c1d68a..a5afe8183cd 100644\n--- a/flink-python/src/main/java/org/apache/flink/python/AbstractPythonFunctionRunner.java\n+++ b/flink-python/src/main/java/org/apache/flink/python/AbstractPythonFunctionRunner.java\n\n@@ -235,15 +234,4 @@ public abstract class AbstractPythonFunctionRunner<IN> implements PythonFunction\n \tpublic abstract ExecutableStage createExecutableStage() throws Exception;\n \n \tpublic abstract OutputReceiverFactory createOutputReceiverFactory();\n-\n-\t/**\n-\t * Gets the proto representation of the base MetricGroup used for all user-defined functions.\n-\t */\n-\tprotected FlinkFnApi.MetricGroupInfo getBaseMetricGroupInfo() {\n-\t\tif (flinkMetricContainer != null) {\n-\t\t\treturn flinkMetricContainer.getBaseMetricGroupInfo();\n-\t\t} else {\n-\t\t\treturn FlinkFnApi.MetricGroupInfo.newBuilder().build();\n-\t\t}\n-\t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg5MTM3MQ==", "url": "https://github.com/apache/flink/pull/11470#discussion_r397891371", "bodyText": "Rename to some other name like testPythonMetric or testPythonMetricEnable?", "author": "dianfu", "createdAt": "2020-03-25T14:20:55Z", "path": "flink-python/src/test/java/org/apache/flink/python/PythonOptionsTest.java", "diffHunk": "@@ -95,4 +95,17 @@ public void testArrowBatchSize() {\n \t\tfinal int actualArrowBatchSize = configuration.getInteger(PythonOptions.MAX_ARROW_BATCH_SIZE);\n \t\tassertThat(actualArrowBatchSize, is(equalTo(expectedArrowBatchSize)));\n \t}\n+\n+\t@Test\n+\tpublic void testPthonUDFMetricEnabled() {", "originalCommit": "b8d1f67cb854839dc8a1eb92bd000c74ff466cc9", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7a7a44b62e4243ed454e174f957f2429cf0f067b", "chunk": "diff --git a/flink-python/src/test/java/org/apache/flink/python/PythonOptionsTest.java b/flink-python/src/test/java/org/apache/flink/python/PythonOptionsTest.java\nindex a6e2c293220..0db5c021332 100644\n--- a/flink-python/src/test/java/org/apache/flink/python/PythonOptionsTest.java\n+++ b/flink-python/src/test/java/org/apache/flink/python/PythonOptionsTest.java\n\n@@ -97,7 +97,7 @@ public class PythonOptionsTest {\n \t}\n \n \t@Test\n-\tpublic void testPthonUDFMetricEnabled() {\n+\tpublic void testPthonMetricEnabled() {\n \t\tfinal Configuration configuration = new Configuration();\n \t\tfinal boolean isMetricEnabled = configuration.getBoolean(PythonOptions.PYTHON_METRIC_ENABLED);\n \t\tassertThat(isMetricEnabled, is(equalTo(PythonOptions.PYTHON_METRIC_ENABLED.defaultValue())));\n"}}, {"oid": "7a7a44b62e4243ed454e174f957f2429cf0f067b", "url": "https://github.com/apache/flink/commit/7a7a44b62e4243ed454e174f957f2429cf0f067b", "message": "remove get_all_variables, get_scope_components and get_metric_identifier", "committedDate": "2020-03-26T08:40:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQxMjI3Ng==", "url": "https://github.com/apache/flink/pull/11470#discussion_r398412276", "bodyText": "Remove for Python UDFs.?", "author": "dianfu", "createdAt": "2020-03-26T09:04:32Z", "path": "flink-python/src/main/java/org/apache/flink/python/PythonConfig.java", "diffHunk": "@@ -103,6 +103,11 @@\n \t@Nullable\n \tprivate final String pythonExec;\n \n+\t/**\n+\t * Whether metric is enabled for Python UDFs.", "originalCommit": "7a7a44b62e4243ed454e174f957f2429cf0f067b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cd7f5ca1b3d716a5e34ba4256a33c6817f125480", "chunk": "diff --git a/flink-python/src/main/java/org/apache/flink/python/PythonConfig.java b/flink-python/src/main/java/org/apache/flink/python/PythonConfig.java\nindex 8632f83e0f9..3c7461c00f4 100644\n--- a/flink-python/src/main/java/org/apache/flink/python/PythonConfig.java\n+++ b/flink-python/src/main/java/org/apache/flink/python/PythonConfig.java\n\n@@ -104,7 +104,7 @@ public class PythonConfig implements Serializable {\n \tprivate final String pythonExec;\n \n \t/**\n-\t * Whether metric is enabled for Python UDFs.\n+\t * Whether metric is enabled.\n \t */\n \tprivate final boolean metricEnabled;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQxMjYzMw==", "url": "https://github.com/apache/flink/pull/11470#discussion_r398412633", "bodyText": "typo: Pthon -> Python", "author": "dianfu", "createdAt": "2020-03-26T09:05:13Z", "path": "flink-python/src/test/java/org/apache/flink/python/PythonOptionsTest.java", "diffHunk": "@@ -95,4 +95,17 @@ public void testArrowBatchSize() {\n \t\tfinal int actualArrowBatchSize = configuration.getInteger(PythonOptions.MAX_ARROW_BATCH_SIZE);\n \t\tassertThat(actualArrowBatchSize, is(equalTo(expectedArrowBatchSize)));\n \t}\n+\n+\t@Test\n+\tpublic void testPthonMetricEnabled() {", "originalCommit": "7a7a44b62e4243ed454e174f957f2429cf0f067b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cd7f5ca1b3d716a5e34ba4256a33c6817f125480", "chunk": "diff --git a/flink-python/src/test/java/org/apache/flink/python/PythonOptionsTest.java b/flink-python/src/test/java/org/apache/flink/python/PythonOptionsTest.java\nindex 0db5c021332..1e31b1cbe12 100644\n--- a/flink-python/src/test/java/org/apache/flink/python/PythonOptionsTest.java\n+++ b/flink-python/src/test/java/org/apache/flink/python/PythonOptionsTest.java\n\n@@ -97,7 +97,7 @@ public class PythonOptionsTest {\n \t}\n \n \t@Test\n-\tpublic void testPthonMetricEnabled() {\n+\tpublic void testPythonMetricEnabled() {\n \t\tfinal Configuration configuration = new Configuration();\n \t\tfinal boolean isMetricEnabled = configuration.getBoolean(PythonOptions.PYTHON_METRIC_ENABLED);\n \t\tassertThat(isMetricEnabled, is(equalTo(PythonOptions.PYTHON_METRIC_ENABLED.defaultValue())));\n"}}, {"oid": "cd7f5ca1b3d716a5e34ba4256a33c6817f125480", "url": "https://github.com/apache/flink/commit/cd7f5ca1b3d716a5e34ba4256a33c6817f125480", "message": "fix typo", "committedDate": "2020-03-26T09:14:22Z", "type": "commit"}]}