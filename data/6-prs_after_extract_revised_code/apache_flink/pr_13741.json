{"pr_number": 13741, "pr_title": "[FLINK-19680][checkpointing] Announce timeoutable CheckpointBarriers", "pr_createdAt": "2020-10-22T06:52:35Z", "pr_url": "https://github.com/apache/flink/pull/13741", "timeline": [{"oid": "1d5e07a51aa4c2ad129dae99e1e34c02f217ec4b", "url": "https://github.com/apache/flink/commit/1d5e07a51aa4c2ad129dae99e1e34c02f217ec4b", "message": "[FLINK-19680][checkpointing] Announce timeoutable CheckpointBarriers", "committedDate": "2020-10-22T13:01:52Z", "type": "forcePushed"}, {"oid": "152532018780b987ea2447abd20097375457655f", "url": "https://github.com/apache/flink/commit/152532018780b987ea2447abd20097375457655f", "message": "[FLINK-19680][checkpointing] Announce timeoutable CheckpointBarriers", "committedDate": "2020-10-22T20:39:09Z", "type": "forcePushed"}, {"oid": "eef96ff91e5f02a5f777d17cce91e860816ca15b", "url": "https://github.com/apache/flink/commit/eef96ff91e5f02a5f777d17cce91e860816ca15b", "message": "[FLINK-19680][checkpointing] Announce timeoutable CheckpointBarriers", "committedDate": "2020-10-24T15:07:42Z", "type": "forcePushed"}, {"oid": "827c2f19269d5ef5ff2ff6fb214b30dd12955b01", "url": "https://github.com/apache/flink/commit/827c2f19269d5ef5ff2ff6fb214b30dd12955b01", "message": "[FLINK-19680][checkpointing] Announce timeoutable CheckpointBarriers", "committedDate": "2020-10-24T16:28:49Z", "type": "forcePushed"}, {"oid": "33b05f3143953a3bcb7a526326034cfd3bc6da5b", "url": "https://github.com/apache/flink/commit/33b05f3143953a3bcb7a526326034cfd3bc6da5b", "message": "[FLINK-19680][checkpointing] Announce timeoutable CheckpointBarriers", "committedDate": "2020-10-25T09:59:31Z", "type": "forcePushed"}, {"oid": "35aaad405a63bb56ff1be4aa45028b22058c0858", "url": "https://github.com/apache/flink/commit/35aaad405a63bb56ff1be4aa45028b22058c0858", "message": "[FLINK-19680][checkpointing] Announce timeoutable CheckpointBarriers", "committedDate": "2020-10-25T13:35:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkyNTc3MA==", "url": "https://github.com/apache/flink/pull/13741#discussion_r511925770", "bodyText": "Typo is commit msg.", "author": "AHeise", "createdAt": "2020-10-26T12:34:54Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/AlternatingController.java", "diffHunk": "@@ -35,7 +35,6 @@\n \tprivate final AlignedController alignedController;\n \tprivate final UnalignedController unalignedController;\n \tprivate  CheckpointBarrierBehaviourController activeController;\n-\tprivate long lastSeenBarrierId;", "originalCommit": "d5799cc5ba94c7268fac36dfcaf10981a6b5579b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0d10faf6bd4440199a69cd13663b646fc6af1550", "chunk": "diff --git a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/AlternatingController.java b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/AlternatingController.java\nindex bf14cc88723..a228aa27436 100644\n--- a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/AlternatingController.java\n+++ b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/AlternatingController.java\n\n@@ -35,6 +35,7 @@ public class AlternatingController implements CheckpointBarrierBehaviourControll\n \tprivate final AlignedController alignedController;\n \tprivate final UnalignedController unalignedController;\n \tprivate  CheckpointBarrierBehaviourController activeController;\n+\tprivate long lastSeenBarrierId;\n \n \tpublic AlternatingController(\n \t\t\tAlignedController alignedController,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkyNTk1Ng==", "url": "https://github.com/apache/flink/pull/13741#discussion_r511925956", "bodyText": "Can you fix the double-spacing here as well?", "author": "AHeise", "createdAt": "2020-10-26T12:35:12Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/AlternatingController.java", "diffHunk": "@@ -35,7 +35,6 @@\n \tprivate final AlignedController alignedController;\n \tprivate final UnalignedController unalignedController;\n \tprivate  CheckpointBarrierBehaviourController activeController;", "originalCommit": "d5799cc5ba94c7268fac36dfcaf10981a6b5579b", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0d10faf6bd4440199a69cd13663b646fc6af1550", "chunk": "diff --git a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/AlternatingController.java b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/AlternatingController.java\nindex bf14cc88723..a228aa27436 100644\n--- a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/AlternatingController.java\n+++ b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/AlternatingController.java\n\n@@ -35,6 +35,7 @@ public class AlternatingController implements CheckpointBarrierBehaviourControll\n \tprivate final AlignedController alignedController;\n \tprivate final UnalignedController unalignedController;\n \tprivate  CheckpointBarrierBehaviourController activeController;\n+\tprivate long lastSeenBarrierId;\n \n \tpublic AlternatingController(\n \t\t\tAlignedController alignedController,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkyNzY1MQ==", "url": "https://github.com/apache/flink/pull/13741#discussion_r511927651", "bodyText": "nit: double indent. Also in various other places in this commit. Ignore if intended.", "author": "AHeise", "createdAt": "2020-10-26T12:38:13Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointCoordinator.java", "diffHunk": "@@ -773,11 +776,12 @@ private void snapshotTaskState(\n \t\tExecution[] executions,\n \t\tboolean advanceToEndOfTime) {\n \n-\t\tfinal CheckpointOptions checkpointOptions = new CheckpointOptions(\n-\t\t\tprops.getCheckpointType(),\n-\t\t\tcheckpointStorageLocation.getLocationReference(),\n-\t\t\tisExactlyOnceMode,\n-\t\t\tprops.getCheckpointType() == CheckpointType.CHECKPOINT && unalignedCheckpointsEnabled);\n+\t\tfinal CheckpointOptions checkpointOptions = CheckpointOptions.create(\n+\t\t\t\tprops.getCheckpointType(),", "originalCommit": "1e26fb076f97cb27397a1d76d26aff11790e438f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "564a0cc9738ae323ad037c72258f86f7f03d7409", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointCoordinator.java b/flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointCoordinator.java\nindex fd4aee2be5a..5281b21ca9b 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointCoordinator.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointCoordinator.java\n\n@@ -777,11 +777,11 @@ public class CheckpointCoordinator {\n \t\tboolean advanceToEndOfTime) {\n \n \t\tfinal CheckpointOptions checkpointOptions = CheckpointOptions.create(\n-\t\t\t\tprops.getCheckpointType(),\n-\t\t\t\tcheckpointStorageLocation.getLocationReference(),\n-\t\t\t\tisExactlyOnceMode,\n-\t\t\t\tunalignedCheckpointsEnabled,\n-\t\t\t\talignmentTimeout);\n+\t\t\tprops.getCheckpointType(),\n+\t\t\tcheckpointStorageLocation.getLocationReference(),\n+\t\t\tisExactlyOnceMode,\n+\t\t\tunalignedCheckpointsEnabled,\n+\t\t\talignmentTimeout);\n \n \t\t// send the messages to the tasks that trigger their checkpoint\n \t\tfor (Execution execution: executions) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkzMDE3Mg==", "url": "https://github.com/apache/flink/pull/13741#discussion_r511930172", "bodyText": "Could you motivate (in commit msg) why this is a property of the checkpoint vs. a config of the task?\nI don't mind this solution but I want to understand the reason. Intuitively, I'd put it into the task config, which would ultimately allow a fine-grain checkpoint configuration for each operator.\nDo you plan to adjust the alignmentTimeout when the barrier travels downstream?", "author": "AHeise", "createdAt": "2020-10-26T12:42:38Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointOptions.java", "diffHunk": "@@ -47,29 +50,56 @@\n \n \tprivate final boolean isUnalignedCheckpoint;\n \n+\tprivate final long alignmentTimeout;", "originalCommit": "1e26fb076f97cb27397a1d76d26aff11790e438f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE3OTUxMA==", "url": "https://github.com/apache/flink/pull/13741#discussion_r512179510", "bodyText": "No, alignmentTimeout is a global timeout, measured against the CheckpointBarrier#getTimestamp, so since the creation of the CheckpointBarrier on the CheckpointCoordinator. If CheckpointCoordinator has timed out on an upstream task, it will be timed out for any downstream operator as well.", "author": "pnowojski", "createdAt": "2020-10-26T18:28:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkzMDE3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "564a0cc9738ae323ad037c72258f86f7f03d7409", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointOptions.java b/flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointOptions.java\nindex 3f39aa15042..126ba0b4bd5 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointOptions.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointOptions.java\n\n@@ -60,11 +60,11 @@ public class CheckpointOptions implements Serializable {\n \t\t\tlong alignmentTimeout) {\n \t\tboolean canBeUnaligned = checkpointType == CheckpointType.CHECKPOINT && unalignedCheckpointsEnabled;\n \t\treturn new CheckpointOptions(\n-\t\t\t\tcheckpointType,\n-\t\t\t\tlocationReference,\n-\t\t\t\tisExactlyOnceMode,\n-\t\t\t\tcanBeUnaligned && alignmentTimeout == 0,\n-\t\t\t\tcanBeUnaligned ? alignmentTimeout : NO_ALIGNMENT_TIME_OUT);\n+\t\t\tcheckpointType,\n+\t\t\tlocationReference,\n+\t\t\tisExactlyOnceMode,\n+\t\t\tcanBeUnaligned && alignmentTimeout == 0,\n+\t\t\tcanBeUnaligned ? alignmentTimeout : NO_ALIGNMENT_TIME_OUT);\n \t}\n \n \t@VisibleForTesting\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkzMDg1Mg==", "url": "https://github.com/apache/flink/pull/13741#discussion_r511930852", "bodyText": "Have NO_ALIGNMENT_TIME_OUT = -1?", "author": "AHeise", "createdAt": "2020-10-26T12:43:53Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointOptions.java", "diffHunk": "@@ -47,29 +50,56 @@\n \n \tprivate final boolean isUnalignedCheckpoint;\n \n+\tprivate final long alignmentTimeout;\n+\n+\tpublic static CheckpointOptions create(\n+\t\t\tCheckpointType checkpointType,\n+\t\t\tCheckpointStorageLocationReference locationReference,\n+\t\t\tboolean isExactlyOnceMode,\n+\t\t\tboolean unalignedCheckpointsEnabled,\n+\t\t\tlong alignmentTimeout) {\n+\t\tboolean canBeUnaligned = checkpointType == CheckpointType.CHECKPOINT && unalignedCheckpointsEnabled;\n+\t\treturn new CheckpointOptions(\n+\t\t\t\tcheckpointType,\n+\t\t\t\tlocationReference,\n+\t\t\t\tisExactlyOnceMode,\n+\t\t\t\tcanBeUnaligned && alignmentTimeout == 0,\n+\t\t\t\tcanBeUnaligned ? alignmentTimeout : NO_ALIGNMENT_TIME_OUT);\n+\t}\n+\n \t@VisibleForTesting\n \tpublic CheckpointOptions(\n \t\t\tCheckpointType checkpointType,\n \t\t\tCheckpointStorageLocationReference targetLocation) {\n-\t\tthis(checkpointType, targetLocation, true, false);\n+\t\tthis(checkpointType, targetLocation, true, false, NO_ALIGNMENT_TIME_OUT);\n \t}\n \n \tpublic CheckpointOptions(\n \t\t\tCheckpointType checkpointType,\n \t\t\tCheckpointStorageLocationReference targetLocation,\n \t\t\tboolean isExactlyOnceMode,\n-\t\t\tboolean isUnalignedCheckpoint) {\n+\t\t\tboolean isUnalignedCheckpoint,\n+\t\t\tlong alignmentTimeout) {\n \n \t\tthis.checkpointType = checkNotNull(checkpointType);\n \t\tthis.targetLocation = checkNotNull(targetLocation);\n \t\tthis.isExactlyOnceMode = isExactlyOnceMode;\n \t\tthis.isUnalignedCheckpoint = isUnalignedCheckpoint;\n+\t\tthis.alignmentTimeout = alignmentTimeout;\n \t}\n \n \tpublic boolean needsAlignment() {\n \t\treturn isExactlyOnceMode() && (getCheckpointType().isSavepoint() || !isUnalignedCheckpoint());\n \t}\n \n+\tpublic long getAlignmentTimeout() {\n+\t\treturn alignmentTimeout;\n+\t}\n+\n+\tpublic boolean isTimeoutable() {\n+\t\treturn alignmentTimeout > 0 && alignmentTimeout != NO_ALIGNMENT_TIME_OUT;", "originalCommit": "1e26fb076f97cb27397a1d76d26aff11790e438f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIzMzE1Mw==", "url": "https://github.com/apache/flink/pull/13741#discussion_r512233153", "bodyText": "Initially I had this, but Long.MAX_VALUE works better with getAlignmentTimeout(), as Long.MAX_VALUE is for all of the practical purposes NO_ALIGNMENT_TIME_OUT :)", "author": "pnowojski", "createdAt": "2020-10-26T20:01:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkzMDg1Mg=="}], "type": "inlineReview", "revised_code": {"commit": "564a0cc9738ae323ad037c72258f86f7f03d7409", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointOptions.java b/flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointOptions.java\nindex 3f39aa15042..126ba0b4bd5 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointOptions.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointOptions.java\n\n@@ -60,11 +60,11 @@ public class CheckpointOptions implements Serializable {\n \t\t\tlong alignmentTimeout) {\n \t\tboolean canBeUnaligned = checkpointType == CheckpointType.CHECKPOINT && unalignedCheckpointsEnabled;\n \t\treturn new CheckpointOptions(\n-\t\t\t\tcheckpointType,\n-\t\t\t\tlocationReference,\n-\t\t\t\tisExactlyOnceMode,\n-\t\t\t\tcanBeUnaligned && alignmentTimeout == 0,\n-\t\t\t\tcanBeUnaligned ? alignmentTimeout : NO_ALIGNMENT_TIME_OUT);\n+\t\t\tcheckpointType,\n+\t\t\tlocationReference,\n+\t\t\tisExactlyOnceMode,\n+\t\t\tcanBeUnaligned && alignmentTimeout == 0,\n+\t\t\tcanBeUnaligned ? alignmentTimeout : NO_ALIGNMENT_TIME_OUT);\n \t}\n \n \t@VisibleForTesting\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkzMjQwNw==", "url": "https://github.com/apache/flink/pull/13741#discussion_r511932407", "bodyText": "Quite technical compared to the other descriptions (=too precise).\n\n\"If timeout is (set to) 0, checkpoints will always start unaligned.\"", "author": "AHeise", "createdAt": "2020-10-26T12:46:40Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/environment/ExecutionCheckpointingOptions.java", "diffHunk": "@@ -143,4 +143,20 @@\n \t\t\t\t\tTextElement.code(CheckpointingMode.EXACTLY_ONCE.toString()),\n \t\t\t\t\tTextElement.code(MAX_CONCURRENT_CHECKPOINTS.key()))\n \t\t\t\t.build());\n+\n+\tpublic static final ConfigOption<Duration> ALIGNMENT_TIMEOUT =\n+\t\tConfigOptions.key(\"execution.checkpointing.alignment-timeout\")\n+\t\t\t.durationType()\n+\t\t\t.defaultValue(Duration.ofSeconds(30))\n+\t\t\t.withDescription(Description.builder()\n+\t\t\t\t.text(\"Only relevant if %s is enabled.\", TextElement.code(ENABLE_UNALIGNED.key()))\n+\t\t\t\t.linebreak()\n+\t\t\t\t.linebreak()\n+\t\t\t\t.text(\"If timeout has value equal to 0, checkpoints will always start unaligned.\")", "originalCommit": "1e26fb076f97cb27397a1d76d26aff11790e438f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "564a0cc9738ae323ad037c72258f86f7f03d7409", "chunk": "diff --git a/flink-streaming-java/src/main/java/org/apache/flink/streaming/api/environment/ExecutionCheckpointingOptions.java b/flink-streaming-java/src/main/java/org/apache/flink/streaming/api/environment/ExecutionCheckpointingOptions.java\nindex 4ffaed8b4f7..8fd7ff9d5ce 100644\n--- a/flink-streaming-java/src/main/java/org/apache/flink/streaming/api/environment/ExecutionCheckpointingOptions.java\n+++ b/flink-streaming-java/src/main/java/org/apache/flink/streaming/api/environment/ExecutionCheckpointingOptions.java\n\n@@ -152,10 +152,10 @@ public class ExecutionCheckpointingOptions {\n \t\t\t\t.text(\"Only relevant if %s is enabled.\", TextElement.code(ENABLE_UNALIGNED.key()))\n \t\t\t\t.linebreak()\n \t\t\t\t.linebreak()\n-\t\t\t\t.text(\"If timeout has value equal to 0, checkpoints will always start unaligned.\")\n+\t\t\t\t.text(\"If timeout is 0, checkpoints will always start unaligned.\")\n \t\t\t\t.linebreak()\n \t\t\t\t.linebreak()\n-\t\t\t\t.text(\"If time has value greater then 0, checkpoints will start aligned. \" +\n+\t\t\t\t.text(\"If timeout has a positive value, checkpoints will start aligned. \" +\n \t\t\t\t\t\"If during checkpointing, checkpoint start delay exceeds this timeout, alignment \" +\n \t\t\t\t\t\"will timeout and checkpoint barrier will start working as unaligned checkpoint.\")\n \t\t\t\t.build());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkzNjcxNw==", "url": "https://github.com/apache/flink/pull/13741#discussion_r511936717", "bodyText": "\"If timeout is (set to) non-zero/positive value, checkpoints will...\"", "author": "AHeise", "createdAt": "2020-10-26T12:54:09Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/api/environment/ExecutionCheckpointingOptions.java", "diffHunk": "@@ -143,4 +143,20 @@\n \t\t\t\t\tTextElement.code(CheckpointingMode.EXACTLY_ONCE.toString()),\n \t\t\t\t\tTextElement.code(MAX_CONCURRENT_CHECKPOINTS.key()))\n \t\t\t\t.build());\n+\n+\tpublic static final ConfigOption<Duration> ALIGNMENT_TIMEOUT =\n+\t\tConfigOptions.key(\"execution.checkpointing.alignment-timeout\")\n+\t\t\t.durationType()\n+\t\t\t.defaultValue(Duration.ofSeconds(30))\n+\t\t\t.withDescription(Description.builder()\n+\t\t\t\t.text(\"Only relevant if %s is enabled.\", TextElement.code(ENABLE_UNALIGNED.key()))\n+\t\t\t\t.linebreak()\n+\t\t\t\t.linebreak()\n+\t\t\t\t.text(\"If timeout has value equal to 0, checkpoints will always start unaligned.\")\n+\t\t\t\t.linebreak()\n+\t\t\t\t.linebreak()\n+\t\t\t\t.text(\"If time has value greater then 0, checkpoints will start aligned. \" +", "originalCommit": "1e26fb076f97cb27397a1d76d26aff11790e438f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "564a0cc9738ae323ad037c72258f86f7f03d7409", "chunk": "diff --git a/flink-streaming-java/src/main/java/org/apache/flink/streaming/api/environment/ExecutionCheckpointingOptions.java b/flink-streaming-java/src/main/java/org/apache/flink/streaming/api/environment/ExecutionCheckpointingOptions.java\nindex 4ffaed8b4f7..8fd7ff9d5ce 100644\n--- a/flink-streaming-java/src/main/java/org/apache/flink/streaming/api/environment/ExecutionCheckpointingOptions.java\n+++ b/flink-streaming-java/src/main/java/org/apache/flink/streaming/api/environment/ExecutionCheckpointingOptions.java\n\n@@ -152,10 +152,10 @@ public class ExecutionCheckpointingOptions {\n \t\t\t\t.text(\"Only relevant if %s is enabled.\", TextElement.code(ENABLE_UNALIGNED.key()))\n \t\t\t\t.linebreak()\n \t\t\t\t.linebreak()\n-\t\t\t\t.text(\"If timeout has value equal to 0, checkpoints will always start unaligned.\")\n+\t\t\t\t.text(\"If timeout is 0, checkpoints will always start unaligned.\")\n \t\t\t\t.linebreak()\n \t\t\t\t.linebreak()\n-\t\t\t\t.text(\"If time has value greater then 0, checkpoints will start aligned. \" +\n+\t\t\t\t.text(\"If timeout has a positive value, checkpoints will start aligned. \" +\n \t\t\t\t\t\"If during checkpointing, checkpoint start delay exceeds this timeout, alignment \" +\n \t\t\t\t\t\"will timeout and checkpoint barrier will start working as unaligned checkpoint.\")\n \t\t\t\t.build());\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkzOTI4OQ==", "url": "https://github.com/apache/flink/pull/13741#discussion_r511939289", "bodyText": "Instead of checking it during deserialization on all buffers, why not simply check it in DataType enum once?\nIn particular, I don't see the need to ever announce priority events.", "author": "AHeise", "createdAt": "2020-10-26T12:58:27Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannel.java", "diffHunk": "@@ -471,6 +475,40 @@ public void onBuffer(Buffer buffer, int sequenceNumber, int backlog) throws IOEx\n \t\t}\n \t}\n \n+\tprivate void checkPriorityXorAnnouncement(Buffer buffer) {", "originalCommit": "35aaad405a63bb56ff1be4aa45028b22058c0858", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "564a0cc9738ae323ad037c72258f86f7f03d7409", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannel.java b/flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannel.java\nindex 35cd227000f..a66b35e7cb1 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannel.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannel.java\n\n@@ -475,15 +473,6 @@ public class RemoteInputChannel extends InputChannel implements ChannelStateHold\n \t\t}\n \t}\n \n-\tprivate void checkPriorityXorAnnouncement(Buffer buffer) {\n-\t\tDataType dataType = buffer.getDataType();\n-\t\tcheckState(\n-\t\t\t\tdataType.requiresAnnouncement() ^ dataType.hasPriority(),\n-\t\t\t\t\"Buffer [%s] with dataType [%s] has both priority and requires announcement, which is not supported.\",\n-\t\t\t\tbuffer,\n-\t\t\t\tdataType);\n-\t}\n-\n \t/**\n \t * @return {@code true} if this was first priority buffer added.\n \t */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk0MTA2Nw==", "url": "https://github.com/apache/flink/pull/13741#discussion_r511941067", "bodyText": "if (dataType.hasPriority() || dataType.requiresAnnouncement()) {\n  firstPriorityEvent = addPriorityBuffer(announce(sequenceBuffer));\n}\nif (!dataType.hasPriority()) {\n  receivedBuffers.add(sequenceBuffer);\n  channelStatePersister.maybePersist(buffer);\n}", "author": "AHeise", "createdAt": "2020-10-26T13:01:34Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannel.java", "diffHunk": "@@ -437,19 +440,20 @@ public void onBuffer(Buffer buffer, int sequenceNumber, int backlog) throws IOEx\n \n \t\t\t\twasEmpty = receivedBuffers.isEmpty();\n \n-\t\t\t\tif (buffer.getDataType().hasPriority()) {\n-\t\t\t\t\treceivedBuffers.addPriorityElement(new SequenceBuffer(buffer, sequenceNumber));\n-\t\t\t\t\tif (channelStatePersister.checkForBarrier(buffer)) {\n-\t\t\t\t\t\t// checkpoint was not yet started by task thread,\n-\t\t\t\t\t\t// so remember the numbers of buffers to spill for the time when it will be started\n-\t\t\t\t\t\tnumBuffersOvertaken = receivedBuffers.getNumUnprioritizedElements();\n-\t\t\t\t\t}\n-\t\t\t\t\tfirstPriorityEvent = receivedBuffers.getNumPriorityElements() == 1;\n+\t\t\t\tSequenceBuffer sequenceBuffer = new SequenceBuffer(buffer, sequenceNumber);\n+\t\t\t\tDataType dataType = buffer.getDataType();\n+\t\t\t\tif (dataType.hasPriority()) {\n+\t\t\t\t\tcheckPriorityXorAnnouncement(buffer);\n+\t\t\t\t\tfirstPriorityEvent = addPriorityBuffer(sequenceBuffer);\n \t\t\t\t} else {\n-\t\t\t\t\treceivedBuffers.add(new SequenceBuffer(buffer, sequenceNumber));\n+\t\t\t\t\treceivedBuffers.add(sequenceBuffer);\n \t\t\t\t\tchannelStatePersister.maybePersist(buffer);\n-\t\t\t\t}\n \n+\t\t\t\t\tif (dataType.requiresAnnouncement()) {\n+\t\t\t\t\t\tcheckPriorityXorAnnouncement(buffer);\n+\t\t\t\t\t\tfirstPriorityEvent = addPriorityBuffer(announce(sequenceBuffer));\n+\t\t\t\t\t}", "originalCommit": "35aaad405a63bb56ff1be4aa45028b22058c0858", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg1NDc3NA==", "url": "https://github.com/apache/flink/pull/13741#discussion_r512854774", "bodyText": "This is incorrect, it would have to be:\n\t\t\t\tif (dataType.requiresAnnouncement()) {\n\t\t\t\t\tfirstPriorityEvent = addPriorityBuffer(announce(sequenceBuffer));\n\t\t\t\t}\n\t\t\t\tif (dataType.hasPriority()) {\n\t\t\t\t\tfirstPriorityEvent = addPriorityBuffer(sequenceBuffer);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treceivedBuffers.add(sequenceBuffer);\n\t\t\t\t\tchannelStatePersister.maybePersist(buffer);\n\t\t\t\t}\n\nbut that would suggest priority event can be announced, hence I moved\n\t\t\t\tif (dataType.requiresAnnouncement()) {\n\t\t\t\t\tfirstPriorityEvent = addPriorityBuffer(announce(sequenceBuffer));\n\t\t\t\t}\n\ninto the non priority branch.", "author": "pnowojski", "createdAt": "2020-10-27T16:44:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk0MTA2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIzODgxMA==", "url": "https://github.com/apache/flink/pull/13741#discussion_r513238810", "bodyText": "Missed the announce part.", "author": "AHeise", "createdAt": "2020-10-28T07:52:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk0MTA2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "564a0cc9738ae323ad037c72258f86f7f03d7409", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannel.java b/flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannel.java\nindex 35cd227000f..a66b35e7cb1 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannel.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/io/network/partition/consumer/RemoteInputChannel.java\n\n@@ -443,14 +443,12 @@ public class RemoteInputChannel extends InputChannel implements ChannelStateHold\n \t\t\t\tSequenceBuffer sequenceBuffer = new SequenceBuffer(buffer, sequenceNumber);\n \t\t\t\tDataType dataType = buffer.getDataType();\n \t\t\t\tif (dataType.hasPriority()) {\n-\t\t\t\t\tcheckPriorityXorAnnouncement(buffer);\n \t\t\t\t\tfirstPriorityEvent = addPriorityBuffer(sequenceBuffer);\n-\t\t\t\t} else {\n+\t\t\t\t}\n+\t\t\t\telse {\n \t\t\t\t\treceivedBuffers.add(sequenceBuffer);\n \t\t\t\t\tchannelStatePersister.maybePersist(buffer);\n-\n \t\t\t\t\tif (dataType.requiresAnnouncement()) {\n-\t\t\t\t\t\tcheckPriorityXorAnnouncement(buffer);\n \t\t\t\t\t\tfirstPriorityEvent = addPriorityBuffer(announce(sequenceBuffer));\n \t\t\t\t\t}\n \t\t\t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk0MzMxMg==", "url": "https://github.com/apache/flink/pull/13741#discussion_r511943312", "bodyText": "I was hoping that we could make the announcement mechanism a bit independent of checkpoints. I don't see how we can generalize DataType, but I could imagine having a generic AnnouncementEvent.", "author": "AHeise", "createdAt": "2020-10-26T13:05:37Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/api/CheckpointBarrierAnnouncement.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.io.network.api;\n+\n+import org.apache.flink.core.memory.DataInputView;\n+import org.apache.flink.core.memory.DataOutputView;\n+import org.apache.flink.runtime.event.RuntimeEvent;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+\n+/**\n+ * {@link CheckpointBarrierAnnouncement} is announcing presence or receiving of a {@link CheckpointBarrier}.\n+ * That {@link #announcedBarrier} is identified by it's sequence number.\n+ */\n+public class CheckpointBarrierAnnouncement extends RuntimeEvent {", "originalCommit": "35aaad405a63bb56ff1be4aa45028b22058c0858", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIzNTUwNw==", "url": "https://github.com/apache/flink/pull/13741#discussion_r512235507", "bodyText": "At the same time, I'm not sure if we will ever need announcement of other events and it would either:\n\nrequire checkState very early on, and still complicate the code a little bit\nadd checkState later and complicate the code even more", "author": "pnowojski", "createdAt": "2020-10-26T20:06:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk0MzMxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM5MTUzMQ==", "url": "https://github.com/apache/flink/pull/13741#discussion_r513391531", "bodyText": "Okay let's go with specialized and generalize when a second use case pops up.", "author": "AHeise", "createdAt": "2020-10-28T12:08:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk0MzMxMg=="}], "type": "inlineReview", "revised_code": {"commit": "564a0cc9738ae323ad037c72258f86f7f03d7409", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/io/network/api/CheckpointBarrierAnnouncement.java b/flink-runtime/src/main/java/org/apache/flink/runtime/io/network/api/EventAnnouncement.java\nsimilarity index 72%\nrename from flink-runtime/src/main/java/org/apache/flink/runtime/io/network/api/CheckpointBarrierAnnouncement.java\nrename to flink-runtime/src/main/java/org/apache/flink/runtime/io/network/api/EventAnnouncement.java\nindex fc48668fc39..ddfe27caed5 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/io/network/api/CheckpointBarrierAnnouncement.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/io/network/api/EventAnnouncement.java\n\n@@ -20,27 +20,28 @@ package org.apache.flink.runtime.io.network.api;\n \n import org.apache.flink.core.memory.DataInputView;\n import org.apache.flink.core.memory.DataOutputView;\n+import org.apache.flink.runtime.event.AbstractEvent;\n import org.apache.flink.runtime.event.RuntimeEvent;\n \n import java.io.IOException;\n import java.util.Objects;\n \n /**\n- * {@link CheckpointBarrierAnnouncement} is announcing presence or receiving of a {@link CheckpointBarrier}.\n- * That {@link #announcedBarrier} is identified by it's sequence number.\n+ * {@link EventAnnouncement} is announcing presence or receiving of an {@link AbstractEvent}.\n+ * That {@link #announcedEvent} is identified by it's sequence number.\n  */\n-public class CheckpointBarrierAnnouncement extends RuntimeEvent {\n+public class EventAnnouncement extends RuntimeEvent {\n \n-\tprivate final CheckpointBarrier announcedBarrier;\n+\tprivate final AbstractEvent announcedEvent;\n \tprivate final int sequenceNumber;\n \n-\tpublic CheckpointBarrierAnnouncement(CheckpointBarrier announcedBarrier, int sequenceNumber) {\n-\t\tthis.announcedBarrier = announcedBarrier;\n+\tpublic EventAnnouncement(AbstractEvent announcedEvent, int sequenceNumber) {\n+\t\tthis.announcedEvent = announcedEvent;\n \t\tthis.sequenceNumber = sequenceNumber;\n \t}\n \n-\tpublic CheckpointBarrier getAnnouncedBarrier() {\n-\t\treturn announcedBarrier;\n+\tpublic AbstractEvent getAnnouncedEvent() {\n+\t\treturn announcedEvent;\n \t}\n \n \tpublic int getSequenceNumber() {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk0NTgxOA==", "url": "https://github.com/apache/flink/pull/13741#discussion_r511945818", "bodyText": "Why did you move this method?", "author": "AHeise", "createdAt": "2020-10-26T13:09:46Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/buffer/Buffer.java", "diffHunk": "@@ -292,21 +313,37 @@ public boolean isEvent() {\n \t\t\treturn isEvent;\n \t\t}\n \n+\t\tpublic boolean isBlockingUpstream() {", "originalCommit": "35aaad405a63bb56ff1be4aa45028b22058c0858", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "564a0cc9738ae323ad037c72258f86f7f03d7409", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/io/network/buffer/Buffer.java b/flink-runtime/src/main/java/org/apache/flink/runtime/io/network/buffer/Buffer.java\nindex 39f09e5a270..16dc1d205c4 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/io/network/buffer/Buffer.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/io/network/buffer/Buffer.java\n\n@@ -313,14 +321,14 @@ public interface Buffer {\n \t\t\treturn isEvent;\n \t\t}\n \n-\t\tpublic boolean isBlockingUpstream() {\n-\t\t\treturn isBlockingUpstream;\n-\t\t}\n-\n \t\tpublic boolean hasPriority() {\n \t\t\treturn hasPriority;\n \t\t}\n \n+\t\tpublic boolean isBlockingUpstream() {\n+\t\t\treturn isBlockingUpstream;\n+\t\t}\n+\n \t\tpublic boolean requiresAnnouncement() {\n \t\t\treturn requiresAnnouncement;\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk0NTg0NA==", "url": "https://github.com/apache/flink/pull/13741#discussion_r511945844", "bodyText": "As a set before, I'm not a huge fan of this very specific DataTypes. (Why don't we have an DataType just for EndOfPartitionEvents as well?) I also think that ALIGNED_CHECKPOINT_BARRIER is on a different level than all other types.\nOne option that I could see is to just have ANNOUNCED_EVENT_BUFFER(false, true, true, false, true).", "author": "AHeise", "createdAt": "2020-10-26T13:09:50Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/buffer/Buffer.java", "diffHunk": "@@ -247,41 +247,62 @@\n \t\t/**\n \t\t * {@link #NONE} indicates that there is no buffer.\n \t\t */\n-\t\tNONE(false, false, false, false),\n+\t\tNONE(false, false, false, false, false),\n \n \t\t/**\n \t\t * {@link #DATA_BUFFER} indicates that this buffer represents a non-event data buffer.\n \t\t */\n-\t\tDATA_BUFFER(true, false, false, false),\n+\t\tDATA_BUFFER(true, false, false, false, false),\n \n \t\t/**\n \t\t * {@link #EVENT_BUFFER} indicates that this buffer represents serialized data of an event.\n \t\t * Note that this type can be further divided into more fine-grained event types\n \t\t * like {@link #ALIGNED_CHECKPOINT_BARRIER} and etc.\n \t\t */\n-\t\tEVENT_BUFFER(false, true, false, false),\n+\t\tEVENT_BUFFER(false, true, false, false, false),\n \n \t\t/**\n \t\t * Same as EVENT_BUFFER, but the event has been prioritized (e.g. it skipped buffers).\n \t\t */\n-\t\tPRIORITIZED_EVENT_BUFFER(false, true, false, true),\n+\t\tPRIORITIZED_EVENT_BUFFER(false, true, false, true, false),\n \n \t\t/**\n \t\t * {@link #ALIGNED_CHECKPOINT_BARRIER} indicates that this buffer represents a\n \t\t * serialized checkpoint barrier of aligned exactly-once checkpoint mode.\n \t\t */\n-\t\tALIGNED_CHECKPOINT_BARRIER(false, true, true, false);\n+\t\tALIGNED_CHECKPOINT_BARRIER(false, true, true, false, false),\n+\n+\t\t/**\n+\t\t * {@link #TIMEOUTABLE_ALIGNED_CHECKPOINT_BARRIER} indicates that this buffer represents a\n+\t\t * serialized checkpoint barrier of aligned exactly-once checkpoint mode, that can be time-out'ed\n+\t\t * to an unaligned checkpoint barrier.\n+\t\t */\n+\t\tTIMEOUTABLE_ALIGNED_CHECKPOINT_BARRIER(false, true, true, false, true);", "originalCommit": "35aaad405a63bb56ff1be4aa45028b22058c0858", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "564a0cc9738ae323ad037c72258f86f7f03d7409", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/io/network/buffer/Buffer.java b/flink-runtime/src/main/java/org/apache/flink/runtime/io/network/buffer/Buffer.java\nindex 39f09e5a270..16dc1d205c4 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/io/network/buffer/Buffer.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/io/network/buffer/Buffer.java\n\n@@ -298,6 +300,12 @@ public interface Buffer {\n \t\t\t\tboolean isBlockingUpstream,\n \t\t\t\tboolean hasPriority,\n \t\t\t\tboolean requiresAnnouncement) {\n+\t\t\tcheckState(\n+\t\t\t\t!(requiresAnnouncement && hasPriority),\n+\t\t\t\t\"DataType [%s] has both priority and requires announcement, which is not supported \" +\n+\t\t\t\t\t\"and doesn't make sense. There should be no need for announcing priority events, which are always \" +\n+\t\t\t\t\t\"overtaking in-flight data.\",\n+\t\t\t\tthis);\n \t\t\tthis.isBuffer = isBuffer;\n \t\t\tthis.isEvent = isEvent;\n \t\t\tthis.isBlockingUpstream = isBlockingUpstream;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTk0NjE1MQ==", "url": "https://github.com/apache/flink/pull/13741#discussion_r511946151", "bodyText": "Add TODO instead?", "author": "AHeise", "createdAt": "2020-10-26T13:10:19Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/SingleCheckpointBarrierHandler.java", "diffHunk": "@@ -147,6 +148,13 @@ public void processBarrier(CheckpointBarrier barrier, InputChannelInfo channelIn\n \t\t}\n \t}\n \n+\t@Override\n+\tpublic void processBarrierAnnouncement(\n+\t\t\tCheckpointBarrierAnnouncement barrierAnnouncement,\n+\t\t\tInputChannelInfo channelInfo) throws IOException {\n+\t\t// Ignore for now.", "originalCommit": "35aaad405a63bb56ff1be4aa45028b22058c0858", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "564a0cc9738ae323ad037c72258f86f7f03d7409", "chunk": "diff --git a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/SingleCheckpointBarrierHandler.java b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/SingleCheckpointBarrierHandler.java\nindex c01108a0b22..54f31a11931 100644\n--- a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/SingleCheckpointBarrierHandler.java\n+++ b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/SingleCheckpointBarrierHandler.java\n\n@@ -150,9 +149,10 @@ public class SingleCheckpointBarrierHandler extends CheckpointBarrierHandler {\n \n \t@Override\n \tpublic void processBarrierAnnouncement(\n-\t\t\tCheckpointBarrierAnnouncement barrierAnnouncement,\n+\t\t\tCheckpointBarrier announcedBarrier,\n+\t\t\tint sequenceNumber,\n \t\t\tInputChannelInfo channelInfo) throws IOException {\n-\t\t// Ignore for now.\n+\t\t// TODO: FLINK-19681\n \t}\n \n \t@Override\n"}}, {"oid": "564a0cc9738ae323ad037c72258f86f7f03d7409", "url": "https://github.com/apache/flink/commit/564a0cc9738ae323ad037c72258f86f7f03d7409", "message": "[FLINK-19680][checkpointing] Announce timeoutable CheckpointBarriers", "committedDate": "2020-10-27T16:49:17Z", "type": "forcePushed"}, {"oid": "fd9a7059d4b4fa7c0760f2c82731436fe1d1312a", "url": "https://github.com/apache/flink/commit/fd9a7059d4b4fa7c0760f2c82731436fe1d1312a", "message": "[FLINK-19680][checkpointing] Announce timeoutable CheckpointBarriers", "committedDate": "2020-10-27T17:05:01Z", "type": "forcePushed"}, {"oid": "ab71efa489d12df19be9eeb6cc814ee60206598c", "url": "https://github.com/apache/flink/commit/ab71efa489d12df19be9eeb6cc814ee60206598c", "message": "[FLINK-19680][checkpointing] Announce timeoutable CheckpointBarriers", "committedDate": "2020-10-28T12:09:00Z", "type": "forcePushed"}, {"oid": "0d10faf6bd4440199a69cd13663b646fc6af1550", "url": "https://github.com/apache/flink/commit/0d10faf6bd4440199a69cd13663b646fc6af1550", "message": "[hotfix][network] Remove unused EventSerializer#isEvent method", "committedDate": "2020-10-28T15:42:22Z", "type": "commit"}, {"oid": "5fad496c9938cbbdd84e4c26b88ef51159790c9a", "url": "https://github.com/apache/flink/commit/5fad496c9938cbbdd84e4c26b88ef51159790c9a", "message": "[hotfix][network] Rename ALIGNED_EXACTLY_ONCE_CHECKPOINT_BARRIER and improve java docs in DataType", "committedDate": "2020-10-28T15:42:23Z", "type": "commit"}, {"oid": "1dfa0ec0c990a8ea94bfc36339ea35629eca8f90", "url": "https://github.com/apache/flink/commit/1dfa0ec0c990a8ea94bfc36339ea35629eca8f90", "message": "[hotfix][checkpointing] Remove unused variable in AlternatingController", "committedDate": "2020-10-28T15:42:23Z", "type": "commit"}, {"oid": "1d1c13ab6c67e122c1750ab1a3120ae2dc8f67a6", "url": "https://github.com/apache/flink/commit/1d1c13ab6c67e122c1750ab1a3120ae2dc8f67a6", "message": "[FLINK-19680][checkpointing] Provide alignment timeout checkpoint option", "committedDate": "2020-10-28T15:42:23Z", "type": "commit"}, {"oid": "42483b09d6194fdab365ee9696522c9c75688391", "url": "https://github.com/apache/flink/commit/42483b09d6194fdab365ee9696522c9c75688391", "message": "[FLINK-19680][checkpointing] Announce timeoutable CheckpointBarriers", "committedDate": "2020-10-28T15:43:49Z", "type": "commit"}, {"oid": "42483b09d6194fdab365ee9696522c9c75688391", "url": "https://github.com/apache/flink/commit/42483b09d6194fdab365ee9696522c9c75688391", "message": "[FLINK-19680][checkpointing] Announce timeoutable CheckpointBarriers", "committedDate": "2020-10-28T15:43:49Z", "type": "forcePushed"}]}