{"pr_number": 12364, "pr_title": "[FLINK-17986] Fix check in FsCheckpointStateOutputStream.write", "pr_createdAt": "2020-05-27T16:55:10Z", "pr_url": "https://github.com/apache/flink/pull/12364", "timeline": [{"oid": "6eef6ad43c519d62837d4e22246a4090a1aa1bd8", "url": "https://github.com/apache/flink/commit/6eef6ad43c519d62837d4e22246a4090a1aa1bd8", "message": "[FLINK-17986] Fix check in FsCheckpointStateOutputStream.write", "committedDate": "2020-05-27T18:11:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYwMTEyNg==", "url": "https://github.com/apache/flink/pull/12364#discussion_r431601126", "bodyText": "add an additional\nstream.write(new byte[10]);\n\ncall to also check the other write method for the flushing problem?", "author": "pnowojski", "createdAt": "2020-05-28T06:07:39Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/state/filesystem/FsCheckpointStreamFactoryTest.java", "diffHunk": "@@ -57,6 +57,23 @@ public void createStateDirectories() throws IOException {\n \t//  tests\n \t// ------------------------------------------------------------------------\n \n+\t@Test\n+\t@SuppressWarnings(\"ConstantConditions\")\n+\tpublic void testWriteFlushesIfAboveThreshold() throws IOException {\n+\t\tint fileSizeThreshold = 100;\n+\t\tfinal FsCheckpointStreamFactory factory = createFactory(FileSystem.getLocalFileSystem(), fileSizeThreshold, fileSizeThreshold);\n+\t\tfinal FsCheckpointStreamFactory.FsCheckpointStateOutputStream stream = factory.createCheckpointStateOutputStream(CheckpointedStateScope.EXCLUSIVE);\n+\t\tstream.write(new byte[fileSizeThreshold]);\n+\t\tFile[] files = new File(exclusiveStateDir.toUri()).listFiles();\n+\t\tassertEquals(1, files.length);\n+\t\tFile file = files[0];\n+\t\tassertEquals(fileSizeThreshold, file.length());\n+\t\tfor (int i = 0; i < fileSizeThreshold; i++) {\n+\t\t\tstream.write(127); // should buffer without flushing\n+\t\t}", "originalCommit": "6eef6ad43c519d62837d4e22246a4090a1aa1bd8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYzOTA1Mg==", "url": "https://github.com/apache/flink/pull/12364#discussion_r431639052", "bodyText": "Done.", "author": "rkhachatryan", "createdAt": "2020-05-28T07:36:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYwMTEyNg=="}], "type": "inlineReview", "revised_code": {"commit": "aa65f31c2e89e08a8671a3748e2a516ee183220c", "chunk": "diff --git a/flink-runtime/src/test/java/org/apache/flink/runtime/state/filesystem/FsCheckpointStreamFactoryTest.java b/flink-runtime/src/test/java/org/apache/flink/runtime/state/filesystem/FsCheckpointStreamFactoryTest.java\nindex f4efdcca52f..53d77464c6a 100644\n--- a/flink-runtime/src/test/java/org/apache/flink/runtime/state/filesystem/FsCheckpointStreamFactoryTest.java\n+++ b/flink-runtime/src/test/java/org/apache/flink/runtime/state/filesystem/FsCheckpointStreamFactoryTest.java\n\n@@ -68,9 +68,8 @@ public class FsCheckpointStreamFactoryTest {\n \t\tassertEquals(1, files.length);\n \t\tFile file = files[0];\n \t\tassertEquals(fileSizeThreshold, file.length());\n-\t\tfor (int i = 0; i < fileSizeThreshold; i++) {\n-\t\t\tstream.write(127); // should buffer without flushing\n-\t\t}\n+\t\tstream.write(new byte[fileSizeThreshold - 1]); // should buffer without flushing\n+\t\tstream.write(127); // should buffer without flushing\n \t\tassertEquals(fileSizeThreshold, file.length());\n \t}\n \n"}}, {"oid": "aa65f31c2e89e08a8671a3748e2a516ee183220c", "url": "https://github.com/apache/flink/commit/aa65f31c2e89e08a8671a3748e2a516ee183220c", "message": "[FLINK-17986] Fix check in FsCheckpointStateOutputStream.write", "committedDate": "2020-05-28T07:20:00Z", "type": "commit"}, {"oid": "aa65f31c2e89e08a8671a3748e2a516ee183220c", "url": "https://github.com/apache/flink/commit/aa65f31c2e89e08a8671a3748e2a516ee183220c", "message": "[FLINK-17986] Fix check in FsCheckpointStateOutputStream.write", "committedDate": "2020-05-28T07:20:00Z", "type": "forcePushed"}]}