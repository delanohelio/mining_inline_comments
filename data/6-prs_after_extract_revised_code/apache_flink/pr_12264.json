{"pr_number": 12264, "pr_title": "[FLINK-17558][netty] Release partitions asynchronously", "pr_createdAt": "2020-05-20T08:53:46Z", "pr_url": "https://github.com/apache/flink/pull/12264", "timeline": [{"oid": "9dbaf3094c0942b96a01060aba9d4ffbad9d1857", "url": "https://github.com/apache/flink/commit/9dbaf3094c0942b96a01060aba9d4ffbad9d1857", "message": "[FLINK-17558][netty] Release partitions asynchronously", "committedDate": "2020-05-20T09:35:48Z", "type": "forcePushed"}, {"oid": "eafbd98c812227cb7d9ce7158de1a23309855509", "url": "https://github.com/apache/flink/commit/eafbd98c812227cb7d9ce7158de1a23309855509", "message": "test", "committedDate": "2020-05-20T13:40:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzNDI3Mg==", "url": "https://github.com/apache/flink/pull/12264#discussion_r428034272", "bodyText": "We might be able to unify this configuration option with ClusterOptions.CLUSTER_IO_EXECUTOR_POOL_SIZE.", "author": "tillrohrmann", "createdAt": "2020-05-20T13:58:41Z", "path": "flink-core/src/main/java/org/apache/flink/configuration/TaskManagerOptions.java", "diffHunk": "@@ -490,6 +490,13 @@\n \t\t\t\t+ \" size will be used. The exact size of JVM Overhead can be explicitly specified by setting the min/max\"\n \t\t\t\t+ \" size to the same value.\");\n \n+\t@Documentation.ExcludeFromDocumentation(\"This option just serves as a last-ditch escape hatch.\")\n+\tpublic static final ConfigOption<Integer> NUM_IO_THREADS =\n+\t\tkey(\"taskmanager.io.threads.num\")\n+\t\t\t.intType()\n+\t\t\t.defaultValue(2)\n+\t\t\t.withDescription(\"The number of threads to use for non-critical IO operations.\");", "originalCommit": "eafbd98c812227cb7d9ce7158de1a23309855509", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg5Njk3Mg==", "url": "https://github.com/apache/flink/pull/12264#discussion_r429896972", "bodyText": "hmm...maybe; the use-cases are quite different though?\nCLUSTER_IO_EXECUTOR_POOL_SIZE is currently used for the pool we use for the HA executor pool, which is probably pretty important stuff.\nMeanwhile, on the TM it is mostly about disk cleanup.\nShould these really be controlled through the same option? If a user sees a problem with slow disk cleanup and increases the pool size, should this really affect the HA side?", "author": "zentol", "createdAt": "2020-05-25T11:59:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzNDI3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM4MTEwMA==", "url": "https://github.com/apache/flink/pull/12264#discussion_r430381100", "bodyText": "The HighAvailabilityServices use the ioExecutor for I/O tasks. Concretely, they use it do dispose a completed checkpoint. In that sense it is also an I/O operation and I think they could be served by the same executor. But in order to keep the scope smaller, we don't have to do it in this PR.", "author": "tillrohrmann", "createdAt": "2020-05-26T12:40:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzNDI3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "42ae0c981090777aef671df310ec77eadbed5608", "chunk": "diff --git a/flink-core/src/main/java/org/apache/flink/configuration/TaskManagerOptions.java b/flink-core/src/main/java/org/apache/flink/configuration/TaskManagerOptions.java\nindex 9f7e30e712..f375e26843 100644\n--- a/flink-core/src/main/java/org/apache/flink/configuration/TaskManagerOptions.java\n+++ b/flink-core/src/main/java/org/apache/flink/configuration/TaskManagerOptions.java\n\n@@ -490,13 +490,6 @@ public class TaskManagerOptions {\n \t\t\t\t+ \" size will be used. The exact size of JVM Overhead can be explicitly specified by setting the min/max\"\n \t\t\t\t+ \" size to the same value.\");\n \n-\t@Documentation.ExcludeFromDocumentation(\"This option just serves as a last-ditch escape hatch.\")\n-\tpublic static final ConfigOption<Integer> NUM_IO_THREADS =\n-\t\tkey(\"taskmanager.io.threads.num\")\n-\t\t\t.intType()\n-\t\t\t.defaultValue(2)\n-\t\t\t.withDescription(\"The number of threads to use for non-critical IO operations.\");\n-\n \t// ------------------------------------------------------------------------\n \t//  Task Options\n \t// ------------------------------------------------------------------------\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzOTkzNQ==", "url": "https://github.com/apache/flink/pull/12264#discussion_r428039935", "bodyText": "Can the ioExecutor also replace the taskIOExecutor?", "author": "tillrohrmann", "createdAt": "2020-05-20T14:05:39Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/taskexecutor/TaskManagerServices.java", "diffHunk": "@@ -265,10 +265,15 @@ public static TaskManagerServices fromConfiguration(\n \t\t// start the I/O manager, it will create some temp directories.\n \t\tfinal IOManager ioManager = new IOManagerAsync(taskManagerServicesConfiguration.getTmpDirPaths());\n \n+\t\tfinal ExecutorService ioExecutor = Executors.newFixedThreadPool(", "originalCommit": "eafbd98c812227cb7d9ce7158de1a23309855509", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg5NDY5NQ==", "url": "https://github.com/apache/flink/pull/12264#discussion_r429894695", "bodyText": "Technically yes, but I wouldn't know how many threads the executor should have. It is also easier to judge how many you'd need if the task and TM operations are separated.", "author": "zentol", "createdAt": "2020-05-25T11:53:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzOTkzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM4NDQ5Mg==", "url": "https://github.com/apache/flink/pull/12264#discussion_r430384492", "bodyText": "I think we should really unify them. taskIOExecutor is effectively the same as ioExecutor because it is used by the TaskExecutorLocalStateStoresManager for discarding local state. I think it is better to use common thread pools until we have a really good reason for separating thread pools. Creating more thread pools will also increase the required resource foot print.\nConcerning the number of threads, I would suggest to use ClusterOptions.CLUSTER_IO_EXECUTOR_POOL_SIZE which defaults to the number of available cores if it has not been specified. This will also allow users to increase the thread pool if things take too long with a single thread.", "author": "tillrohrmann", "createdAt": "2020-05-26T12:46:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzOTkzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU2NDMzOA==", "url": "https://github.com/apache/flink/pull/12264#discussion_r430564338", "bodyText": "Well, one reason is uncertainty.\nDo you know how many resources the state cleanup currently siphons from the RpcService executor?\nI don't disagree with your take in general, but as is the PR is pretty safe to back-port to older versions.\nI'm not so sure about this if we include the taskIOExecutor change; we don't have to look back very far for issues when we moved things away from the RPC executor (FLINK-17248).", "author": "zentol", "createdAt": "2020-05-26T16:54:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzOTkzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg5NzI2Mw==", "url": "https://github.com/apache/flink/pull/12264#discussion_r430897263", "bodyText": "I think it is actually a good idea to move it away from the RpcService's executor because this is the same pool which is used to run the RpcEndpoints.", "author": "tillrohrmann", "createdAt": "2020-05-27T07:00:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzOTkzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "42ae0c981090777aef671df310ec77eadbed5608", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/taskexecutor/TaskManagerServices.java b/flink-runtime/src/main/java/org/apache/flink/runtime/taskexecutor/TaskManagerServices.java\nindex 96824faf14..ee737c111a 100755\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/taskexecutor/TaskManagerServices.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/taskexecutor/TaskManagerServices.java\n\n@@ -265,15 +265,10 @@ public class TaskManagerServices {\n \t\t// start the I/O manager, it will create some temp directories.\n \t\tfinal IOManager ioManager = new IOManagerAsync(taskManagerServicesConfiguration.getTmpDirPaths());\n \n-\t\tfinal ExecutorService ioExecutor = Executors.newFixedThreadPool(\n-\t\t\ttaskManagerServicesConfiguration.getNumIoThreads(),\n-\t\t\tnew ExecutorThreadFactory(\"taskexecutor-io\"));\n-\n \t\tfinal ShuffleEnvironment<?, ?> shuffleEnvironment = createShuffleEnvironment(\n \t\t\ttaskManagerServicesConfiguration,\n \t\t\ttaskEventDispatcher,\n-\t\t\ttaskManagerMetricGroup,\n-\t\t\tioExecutor);\n+\t\t\ttaskManagerMetricGroup);\n \t\tfinal int listeningDataPort = shuffleEnvironment.start();\n \n \t\tfinal KvStateService kvStateService = KvStateService.fromConfiguration(taskManagerServicesConfiguration);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA0MjAxMA==", "url": "https://github.com/apache/flink/pull/12264#discussion_r428042010", "bodyText": "I guess a OneShotLatch would also work here if the test threads call the trigger on it.", "author": "tillrohrmann", "createdAt": "2020-05-20T14:08:19Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/io/network/NettyShuffleEnvironmentTest.java", "diffHunk": "@@ -100,6 +105,27 @@ public void testRegisterTaskWithInsufficientBuffers() throws Exception {\n \t\ttestRegisterTaskWithLimitedBuffers(bufferCount);\n \t}\n \n+\t@Test\n+\tpublic void testSlowIODoesNotBlockRelease() throws Exception {\n+\t\tBlockerSync sync = new BlockerSync();", "originalCommit": "eafbd98c812227cb7d9ce7158de1a23309855509", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg5MzI4MA==", "url": "https://github.com/apache/flink/pull/12264#discussion_r429893280", "bodyText": "I used a BlockerSync since it allows blocking without throwing checked exceptions.\nOneShotLatch#await throwing InterruptedException is a bit annoying. Maybe we should change that; for testing purposes it seems irrelevant?", "author": "zentol", "createdAt": "2020-05-25T11:50:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA0MjAxMA=="}], "type": "inlineReview", "revised_code": {"commit": "42ae0c981090777aef671df310ec77eadbed5608", "chunk": "diff --git a/flink-runtime/src/test/java/org/apache/flink/runtime/io/network/NettyShuffleEnvironmentTest.java b/flink-runtime/src/test/java/org/apache/flink/runtime/io/network/NettyShuffleEnvironmentTest.java\nindex 62aba7ecd7..826f15c8e8 100644\n--- a/flink-runtime/src/test/java/org/apache/flink/runtime/io/network/NettyShuffleEnvironmentTest.java\n+++ b/flink-runtime/src/test/java/org/apache/flink/runtime/io/network/NettyShuffleEnvironmentTest.java\n\n@@ -105,27 +100,6 @@ public class NettyShuffleEnvironmentTest extends TestLogger {\n \t\ttestRegisterTaskWithLimitedBuffers(bufferCount);\n \t}\n \n-\t@Test\n-\tpublic void testSlowIODoesNotBlockRelease() throws Exception {\n-\t\tBlockerSync sync = new BlockerSync();\n-\t\tResultPartitionManager blockingResultPartitionManager = new ResultPartitionManager() {\n-\t\t\t@Override\n-\t\t\tpublic void releasePartition(ResultPartitionID partitionId, Throwable cause) {\n-\t\t\t\tsync.blockNonInterruptible();\n-\t\t\t\tsuper.releasePartition(partitionId, cause);\n-\t\t\t}\n-\t\t};\n-\n-\t\tNettyShuffleEnvironment shuffleEnvironment = new NettyShuffleEnvironmentBuilder()\n-\t\t\t.setResultPartitionManager(blockingResultPartitionManager)\n-\t\t\t.setIoExecutor(Executors.newFixedThreadPool(1))\n-\t\t\t.build();\n-\n-\t\tshuffleEnvironment.releasePartitionsLocally(Collections.singleton(new ResultPartitionID()));\n-\t\tsync.awaitBlocker();\n-\t\tsync.releaseBlocker();\n-\t}\n-\n \tprivate void testRegisterTaskWithLimitedBuffers(int bufferPoolSize) throws Exception {\n \t\tfinal NettyShuffleEnvironment network = new NettyShuffleEnvironmentBuilder()\n \t\t\t.setNumNetworkBuffers(bufferPoolSize)\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA0NzAzNQ==", "url": "https://github.com/apache/flink/pull/12264#discussion_r428047035", "bodyText": "I would suggest to also shut this executor service down at the end of the test. It might be necessary to unblock the release operation for this.", "author": "tillrohrmann", "createdAt": "2020-05-20T14:14:37Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/taskexecutor/TaskExecutorPartitionLifecycleTest.java", "diffHunk": "@@ -280,7 +273,65 @@ public void testClusterPartitionRelease() throws Exception {\n \t\t);\n \t}\n \n-\tprivate <C> void testPartitionRelease(PartitionTrackerSetup<C> partitionTrackerSetup, TestAction<C> testAction) throws Exception {\n+\t@Test\n+\tpublic void testBlockingLocalPartitionReleaseDoesNotBlockTaskExecutor() throws Exception {\n+\t\tBlockerSync sync = new BlockerSync();\n+\t\tResultPartitionManager blockingResultPartitionManager = new ResultPartitionManager() {\n+\t\t\t@Override\n+\t\t\tpublic void releasePartition(ResultPartitionID partitionId, Throwable cause) {\n+\t\t\t\tsync.blockNonInterruptible();\n+\t\t\t\tsuper.releasePartition(partitionId, cause);\n+\t\t\t}\n+\t\t};\n+\n+\t\tNettyShuffleEnvironment shuffleEnvironment = new NettyShuffleEnvironmentBuilder()\n+\t\t\t.setResultPartitionManager(blockingResultPartitionManager)\n+\t\t\t.setIoExecutor(java.util.concurrent.Executors.newFixedThreadPool(1))", "originalCommit": "eafbd98c812227cb7d9ce7158de1a23309855509", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "42ae0c981090777aef671df310ec77eadbed5608", "chunk": "diff --git a/flink-runtime/src/test/java/org/apache/flink/runtime/taskexecutor/TaskExecutorPartitionLifecycleTest.java b/flink-runtime/src/test/java/org/apache/flink/runtime/taskexecutor/TaskExecutorPartitionLifecycleTest.java\nindex d066e756fd..9cc5d697f2 100644\n--- a/flink-runtime/src/test/java/org/apache/flink/runtime/taskexecutor/TaskExecutorPartitionLifecycleTest.java\n+++ b/flink-runtime/src/test/java/org/apache/flink/runtime/taskexecutor/TaskExecutorPartitionLifecycleTest.java\n\n@@ -273,65 +280,7 @@ public class TaskExecutorPartitionLifecycleTest extends TestLogger {\n \t\t);\n \t}\n \n-\t@Test\n-\tpublic void testBlockingLocalPartitionReleaseDoesNotBlockTaskExecutor() throws Exception {\n-\t\tBlockerSync sync = new BlockerSync();\n-\t\tResultPartitionManager blockingResultPartitionManager = new ResultPartitionManager() {\n-\t\t\t@Override\n-\t\t\tpublic void releasePartition(ResultPartitionID partitionId, Throwable cause) {\n-\t\t\t\tsync.blockNonInterruptible();\n-\t\t\t\tsuper.releasePartition(partitionId, cause);\n-\t\t\t}\n-\t\t};\n-\n-\t\tNettyShuffleEnvironment shuffleEnvironment = new NettyShuffleEnvironmentBuilder()\n-\t\t\t.setResultPartitionManager(blockingResultPartitionManager)\n-\t\t\t.setIoExecutor(java.util.concurrent.Executors.newFixedThreadPool(1))\n-\t\t\t.build();\n-\n-\t\tfinal CompletableFuture<ResultPartitionID> startTrackingFuture = new CompletableFuture<>();\n-\t\tfinal TaskExecutorPartitionTracker partitionTracker = new TaskExecutorPartitionTrackerImpl(shuffleEnvironment) {\n-\t\t\t@Override\n-\t\t\tpublic void startTrackingPartition(JobID producingJobId, TaskExecutorPartitionInfo partitionInfo) {\n-\t\t\t\tsuper.startTrackingPartition(producingJobId, partitionInfo);\n-\t\t\t\tstartTrackingFuture.complete(partitionInfo.getResultPartitionId());\n-\t\t\t}\n-\t\t};\n-\n-\t\tinternalTestPartitionRelease(\n-\t\t\tpartitionTracker,\n-\t\t\tshuffleEnvironment,\n-\t\t\tstartTrackingFuture,\n-\t\t\t(jobId, resultPartitionDeploymentDescriptor, taskExecutor, taskExecutorGateway) -> {\n-\t\t\t\tfinal IntermediateDataSetID dataSetId = resultPartitionDeploymentDescriptor.getResultId();\n-\n-\t\t\t\ttaskExecutorGateway.releaseClusterPartitions(Collections.singleton(dataSetId), timeout);\n-\n-\t\t\t\t// execute some operation to check whether the TaskExecutor is blocked\n-\t\t\t\ttaskExecutorGateway.canBeReleased().get(5, TimeUnit.SECONDS);\n-\t\t\t}\n-\t\t);\n-\t}\n-\n-\tprivate void testPartitionRelease(PartitionTrackerSetup partitionTrackerSetup, TestAction testAction) throws Exception {\n-\t\tfinal TestingTaskExecutorPartitionTracker partitionTracker = new TestingTaskExecutorPartitionTracker();\n-\t\tfinal CompletableFuture<ResultPartitionID> startTrackingFuture = new CompletableFuture<>();\n-\t\tpartitionTracker.setStartTrackingPartitionsConsumer((jobId, partitionInfo) -> startTrackingFuture.complete(partitionInfo.getResultPartitionId()));\n-\t\tpartitionTrackerSetup.accept(partitionTracker);\n-\n-\t\tinternalTestPartitionRelease(\n-\t\t\tpartitionTracker,\n-\t\t\tnew NettyShuffleEnvironmentBuilder().build(),\n-\t\t\tstartTrackingFuture,\n-\t\t\ttestAction\n-\t\t);\n-\t}\n-\n-\tprivate void internalTestPartitionRelease(\n-\t\t\tTaskExecutorPartitionTracker partitionTracker,\n-\t\t\tShuffleEnvironment<?, ?> shuffleEnvironment,\n-\t\t\tCompletableFuture<ResultPartitionID> startTrackingFuture,\n-\t\t\tTestAction testAction) throws Exception {\n+\tprivate <C> void testPartitionRelease(PartitionTrackerSetup<C> partitionTrackerSetup, TestAction<C> testAction) throws Exception {\n \n \t\tfinal ResultPartitionDeploymentDescriptor taskResultPartitionDescriptor =\n \t\t\tPartitionTestUtils.createPartitionDeploymentDescriptor(ResultPartitionType.BLOCKING);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM4NzIwMA==", "url": "https://github.com/apache/flink/pull/12264#discussion_r430387200", "bodyText": "I would suggest to use ExecutorUtils.gracefulShutdown.", "author": "tillrohrmann", "createdAt": "2020-05-26T12:51:14Z", "path": "flink-test-utils-parent/flink-test-utils-junit/src/main/java/org/apache/flink/testutils/executor/TestExecutorServiceResource.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.testutils.executor;\n+\n+import org.junit.rules.ExternalResource;\n+\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Resource which starts an {@link ExecutorService} for testing purposes.\n+ */\n+public class TestExecutorServiceResource extends ExternalResource {\n+\n+\tprivate final Supplier<ExecutorService> serviceFactory;\n+\n+\tprivate ExecutorService executorService;\n+\n+\tpublic TestExecutorServiceResource(Supplier<ExecutorService> serviceFactory) {\n+\t\tthis.serviceFactory = serviceFactory;\n+\t}\n+\n+\t@Override\n+\tprotected void before() throws Throwable {\n+\t\texecutorService = serviceFactory.get();\n+\t}\n+\n+\tpublic ExecutorService getExecutorService() {\n+\t\treturn executorService;\n+\t}\n+\n+\t@Override\n+\tprotected void after() {\n+\t\tif (executorService != null) {\n+\t\t\texecutorService.shutdown();", "originalCommit": "f5cc207a54d0adfd24c548c544f34a9ca13d145a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "42ae0c981090777aef671df310ec77eadbed5608", "chunk": "diff --git a/flink-test-utils-parent/flink-test-utils-junit/src/main/java/org/apache/flink/testutils/executor/TestExecutorServiceResource.java b/flink-test-utils-parent/flink-test-utils-junit/src/main/java/org/apache/flink/testutils/executor/TestExecutorServiceResource.java\ndeleted file mode 100644\nindex 78d5bc9489..0000000000\n--- a/flink-test-utils-parent/flink-test-utils-junit/src/main/java/org/apache/flink/testutils/executor/TestExecutorServiceResource.java\n+++ /dev/null\n\n@@ -1,53 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.flink.testutils.executor;\n-\n-import org.junit.rules.ExternalResource;\n-\n-import java.util.concurrent.ExecutorService;\n-import java.util.function.Supplier;\n-\n-/**\n- * Resource which starts an {@link ExecutorService} for testing purposes.\n- */\n-public class TestExecutorServiceResource extends ExternalResource {\n-\n-\tprivate final Supplier<ExecutorService> serviceFactory;\n-\n-\tprivate ExecutorService executorService;\n-\n-\tpublic TestExecutorServiceResource(Supplier<ExecutorService> serviceFactory) {\n-\t\tthis.serviceFactory = serviceFactory;\n-\t}\n-\n-\t@Override\n-\tprotected void before() throws Throwable {\n-\t\texecutorService = serviceFactory.get();\n-\t}\n-\n-\tpublic ExecutorService getExecutorService() {\n-\t\treturn executorService;\n-\t}\n-\n-\t@Override\n-\tprotected void after() {\n-\t\tif (executorService != null) {\n-\t\t\texecutorService.shutdown();\n-\t\t}\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM4ODA0Ng==", "url": "https://github.com/apache/flink/pull/12264#discussion_r430388046", "bodyText": "This class seems to duplicate TestingScheduledExecutor.", "author": "tillrohrmann", "createdAt": "2020-05-26T12:52:37Z", "path": "flink-test-utils-parent/flink-test-utils-junit/src/main/java/org/apache/flink/testutils/executor/TestExecutorServiceResource.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.testutils.executor;\n+\n+import org.junit.rules.ExternalResource;\n+\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Resource which starts an {@link ExecutorService} for testing purposes.\n+ */\n+public class TestExecutorServiceResource extends ExternalResource {", "originalCommit": "f5cc207a54d0adfd24c548c544f34a9ca13d145a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU0ODk0NA==", "url": "https://github.com/apache/flink/pull/12264#discussion_r430548944", "bodyText": "I wouldn't say that it is a duplicate since one works against the java ExecutorService while the other against the flink-runtime ScheduledExecutor.\nThey are ultimately similar yes, but this one is usable without depending on flink-runtime (in particular, without depending on the flink-runtime test-jar).", "author": "zentol", "createdAt": "2020-05-26T16:32:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM4ODA0Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg5NzQ5Mw==", "url": "https://github.com/apache/flink/pull/12264#discussion_r430897493", "bodyText": "Can we unify them and get rid of one of them?", "author": "tillrohrmann", "createdAt": "2020-05-27T07:00:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM4ODA0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "42ae0c981090777aef671df310ec77eadbed5608", "chunk": "diff --git a/flink-test-utils-parent/flink-test-utils-junit/src/main/java/org/apache/flink/testutils/executor/TestExecutorServiceResource.java b/flink-test-utils-parent/flink-test-utils-junit/src/main/java/org/apache/flink/testutils/executor/TestExecutorServiceResource.java\ndeleted file mode 100644\nindex 78d5bc9489..0000000000\n--- a/flink-test-utils-parent/flink-test-utils-junit/src/main/java/org/apache/flink/testutils/executor/TestExecutorServiceResource.java\n+++ /dev/null\n\n@@ -1,53 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.flink.testutils.executor;\n-\n-import org.junit.rules.ExternalResource;\n-\n-import java.util.concurrent.ExecutorService;\n-import java.util.function.Supplier;\n-\n-/**\n- * Resource which starts an {@link ExecutorService} for testing purposes.\n- */\n-public class TestExecutorServiceResource extends ExternalResource {\n-\n-\tprivate final Supplier<ExecutorService> serviceFactory;\n-\n-\tprivate ExecutorService executorService;\n-\n-\tpublic TestExecutorServiceResource(Supplier<ExecutorService> serviceFactory) {\n-\t\tthis.serviceFactory = serviceFactory;\n-\t}\n-\n-\t@Override\n-\tprotected void before() throws Throwable {\n-\t\texecutorService = serviceFactory.get();\n-\t}\n-\n-\tpublic ExecutorService getExecutorService() {\n-\t\treturn executorService;\n-\t}\n-\n-\t@Override\n-\tprotected void after() {\n-\t\tif (executorService != null) {\n-\t\t\texecutorService.shutdown();\n-\t\t}\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA2NjA1Ng==", "url": "https://github.com/apache/flink/pull/12264#discussion_r431066056", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tfinal int numIoThreads = ClusterEntrypointUtils.getPoolSize(configuration) * 4;\n          \n          \n            \n            \t\tfinal int numIoThreads = ClusterEntrypointUtils.getPoolSize(configuration);\n          \n      \n    \n    \n  \n\nI will update getPoolSize to return the new default value of 4 * cores as part of changing the type of the thread pool on the JM side.", "author": "tillrohrmann", "createdAt": "2020-05-27T12:06:46Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/taskexecutor/TaskManagerServicesConfiguration.java", "diffHunk": "@@ -270,7 +271,8 @@ public static TaskManagerServicesConfiguration fromConfiguration(\n \n \t\tfinal String[] alwaysParentFirstLoaderPatterns = CoreOptions.getParentFirstLoaderPatterns(configuration);\n \n-\t\tfinal int numIoThreads = configuration.get(TaskManagerOptions.NUM_IO_THREADS);\n+\t\t// multiply core-count to be on the safer side, since we used a pool with size=64 in the past\n+\t\tfinal int numIoThreads = ClusterEntrypointUtils.getPoolSize(configuration) * 4;", "originalCommit": "084e28079e239e9485c36f843348323c9a81ad6a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "42ae0c981090777aef671df310ec77eadbed5608", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/taskexecutor/TaskManagerServicesConfiguration.java b/flink-runtime/src/main/java/org/apache/flink/runtime/taskexecutor/TaskManagerServicesConfiguration.java\nindex ce0ce6bccb..bb50b628e3 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/taskexecutor/TaskManagerServicesConfiguration.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/taskexecutor/TaskManagerServicesConfiguration.java\n\n@@ -271,9 +262,6 @@ public class TaskManagerServicesConfiguration {\n \n \t\tfinal String[] alwaysParentFirstLoaderPatterns = CoreOptions.getParentFirstLoaderPatterns(configuration);\n \n-\t\t// multiply core-count to be on the safer side, since we used a pool with size=64 in the past\n-\t\tfinal int numIoThreads = ClusterEntrypointUtils.getPoolSize(configuration) * 4;\n-\n \t\treturn new TaskManagerServicesConfiguration(\n \t\t\tconfiguration,\n \t\t\tresourceID,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA2NjczMw==", "url": "https://github.com/apache/flink/pull/12264#discussion_r431066733", "bodyText": "The name executorService could have been kept.", "author": "tillrohrmann", "createdAt": "2020-05-27T12:08:02Z", "path": "flink-test-utils-parent/flink-test-utils-junit/src/main/java/org/apache/flink/testutils/executor/TestExecutorResource.java", "diffHunk": "@@ -19,35 +19,37 @@\n \n import org.junit.rules.ExternalResource;\n \n+import java.util.concurrent.Executor;\n import java.util.concurrent.ExecutorService;\n import java.util.function.Supplier;\n \n /**\n- * Resource which starts an {@link ExecutorService} for testing purposes.\n+ * Resource which starts/stops an {@link ExecutorService} for testing purposes.\n  */\n-public class TestExecutorServiceResource extends ExternalResource {\n+public class TestExecutorResource extends ExternalResource {\n \n \tprivate final Supplier<ExecutorService> serviceFactory;\n \n-\tprivate ExecutorService executorService;\n+\tprivate ExecutorService executor;", "originalCommit": "084e28079e239e9485c36f843348323c9a81ad6a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "42ae0c981090777aef671df310ec77eadbed5608", "chunk": "diff --git a/flink-test-utils-parent/flink-test-utils-junit/src/main/java/org/apache/flink/testutils/executor/TestExecutorResource.java b/flink-test-utils-parent/flink-test-utils-junit/src/main/java/org/apache/flink/testutils/executor/TestExecutorResource.java\ndeleted file mode 100644\nindex 032ce8389b..0000000000\n--- a/flink-test-utils-parent/flink-test-utils-junit/src/main/java/org/apache/flink/testutils/executor/TestExecutorResource.java\n+++ /dev/null\n\n@@ -1,55 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.flink.testutils.executor;\n-\n-import org.junit.rules.ExternalResource;\n-\n-import java.util.concurrent.Executor;\n-import java.util.concurrent.ExecutorService;\n-import java.util.function.Supplier;\n-\n-/**\n- * Resource which starts/stops an {@link ExecutorService} for testing purposes.\n- */\n-public class TestExecutorResource extends ExternalResource {\n-\n-\tprivate final Supplier<ExecutorService> serviceFactory;\n-\n-\tprivate ExecutorService executor;\n-\n-\tpublic TestExecutorResource(Supplier<ExecutorService> serviceFactory) {\n-\t\tthis.serviceFactory = serviceFactory;\n-\t}\n-\n-\t@Override\n-\tprotected void before() throws Throwable {\n-\t\texecutor = serviceFactory.get();\n-\t}\n-\n-\tpublic Executor getExecutor() {\n-\t\t// only return an Executor since this resource is in charge of the life cycle\n-\t\treturn executor;\n-\t}\n-\n-\t@Override\n-\tprotected void after() {\n-\t\tif (executor != null) {\n-\t\t\texecutor.shutdown();\n-\t\t}\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA2ODM5NQ==", "url": "https://github.com/apache/flink/pull/12264#discussion_r431068395", "bodyText": "This could be moved into the fromConfiguration method. Given that the TaskManagerServices is responsible for managing the created ExecutorService, I think it is fine to move the creation into the fromConfiguration method.", "author": "tillrohrmann", "createdAt": "2020-05-27T12:11:12Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/taskexecutor/TaskManagerRunner.java", "diffHunk": "@@ -366,11 +367,15 @@ public static TaskExecutor startTaskManager(\n \t\t\tresourceID,\n \t\t\ttaskManagerServicesConfiguration.getSystemResourceMetricsProbingInterval());\n \n+\t\tfinal ExecutorService ioExecutor = Executors.newCachedThreadPool(\n+\t\t\ttaskManagerServicesConfiguration.getNumIoThreads(),\n+\t\t\tnew ExecutorThreadFactory(\"flink-taskexecutor-io\"));", "originalCommit": "084e28079e239e9485c36f843348323c9a81ad6a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA3MTIzMA==", "url": "https://github.com/apache/flink/pull/12264#discussion_r431071230", "bodyText": "initially that was the plan, but the TaskExecutorLocalStateStoresManagerTest passes in a Executors.directExecutor() into TaskManagerServices.fromConfiguration.", "author": "zentol", "createdAt": "2020-05-27T12:16:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA2ODM5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA3NDYzMQ==", "url": "https://github.com/apache/flink/pull/12264#discussion_r431074631", "bodyText": "although this doesn't seem related to the correctness of the test.", "author": "zentol", "createdAt": "2020-05-27T12:22:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA2ODM5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA5MDkxNA==", "url": "https://github.com/apache/flink/pull/12264#discussion_r431090914", "bodyText": "Jup. It is also a bit odd that TaskExecutorLocalStateStoresManagerTest.testCreationFromConfig needs to create a TaskManagerServices instance in order to test the TaskExecutorLocalStateStoresManager. I think one could test the same if one factored the creation of the TaskExecutorLocalStateStoresManager out into a separate method which is called by TaskManagerServices.fromConfiguration().", "author": "tillrohrmann", "createdAt": "2020-05-27T12:49:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA2ODM5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA5MTkwMA==", "url": "https://github.com/apache/flink/pull/12264#discussion_r431091900", "bodyText": "But we can also keep it as is. The important aspect is that everyone knows that fromConfiguration takes ownership over the passed ioExecutor.", "author": "tillrohrmann", "createdAt": "2020-05-27T12:50:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA2ODM5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "42ae0c981090777aef671df310ec77eadbed5608", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/taskexecutor/TaskManagerRunner.java b/flink-runtime/src/main/java/org/apache/flink/runtime/taskexecutor/TaskManagerRunner.java\nindex 977270086b..88786bf0bc 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/taskexecutor/TaskManagerRunner.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/taskexecutor/TaskManagerRunner.java\n\n@@ -367,15 +366,11 @@ public class TaskManagerRunner implements FatalErrorHandler, AutoCloseableAsync\n \t\t\tresourceID,\n \t\t\ttaskManagerServicesConfiguration.getSystemResourceMetricsProbingInterval());\n \n-\t\tfinal ExecutorService ioExecutor = Executors.newCachedThreadPool(\n-\t\t\ttaskManagerServicesConfiguration.getNumIoThreads(),\n-\t\t\tnew ExecutorThreadFactory(\"flink-taskexecutor-io\"));\n-\n \t\tTaskManagerServices taskManagerServices = TaskManagerServices.fromConfiguration(\n \t\t\ttaskManagerServicesConfiguration,\n \t\t\tblobCacheService.getPermanentBlobService(),\n \t\t\ttaskManagerMetricGroup.f1,\n-\t\t\tioExecutor);\n+\t\t\trpcService.getExecutor()); // TODO replace this later with some dedicated executor for io.\n \n \t\tTaskManagerConfiguration taskManagerConfiguration =\n \t\t\tTaskManagerConfiguration.fromConfiguration(configuration, taskExecutorResourceSpec, externalAddress);\n"}}, {"oid": "42ae0c981090777aef671df310ec77eadbed5608", "url": "https://github.com/apache/flink/commit/42ae0c981090777aef671df310ec77eadbed5608", "message": "[hotfix][tests] Remove unused TestingScheduledExecutor", "committedDate": "2020-05-27T19:23:16Z", "type": "commit"}, {"oid": "b2f7396d4ddf39a1a4dedf257fb4156ae89fd1ed", "url": "https://github.com/apache/flink/commit/b2f7396d4ddf39a1a4dedf257fb4156ae89fd1ed", "message": "[hotfix][tests] Shutdown TaskmanagerServices", "committedDate": "2020-05-27T19:23:29Z", "type": "commit"}, {"oid": "8cf00b9f6fd8b76256883eedbdb8e79dea3c35dc", "url": "https://github.com/apache/flink/commit/8cf00b9f6fd8b76256883eedbdb8e79dea3c35dc", "message": "[FLINK-17558][netty] Release partitions asynchronously", "committedDate": "2020-05-27T19:23:41Z", "type": "forcePushed"}, {"oid": "f174f4d49ca01b532d30e5dd7b11b6e28ebd3de6", "url": "https://github.com/apache/flink/commit/f174f4d49ca01b532d30e5dd7b11b6e28ebd3de6", "message": "[FLINK-17558][runtime] Add Executors#newCachedThreadPool", "committedDate": "2020-05-28T11:40:02Z", "type": "commit"}, {"oid": "d538076ce98ffcdae3092366f413009e8b611c1f", "url": "https://github.com/apache/flink/commit/d538076ce98ffcdae3092366f413009e8b611c1f", "message": "[FLINK-17558][tests] Simplify partition tracker setup", "committedDate": "2020-05-28T11:40:02Z", "type": "commit"}, {"oid": "001b5c3e983799e49ef6822414ea6315dbbb9092", "url": "https://github.com/apache/flink/commit/001b5c3e983799e49ef6822414ea6315dbbb9092", "message": "[FLINK-17558][tests] Extract ShuffleEnvironment/PartitionTracker setup", "committedDate": "2020-05-28T11:40:02Z", "type": "commit"}, {"oid": "5df317832afdf91eadf36967ac5d0ed6e9f4b3fc", "url": "https://github.com/apache/flink/commit/5df317832afdf91eadf36967ac5d0ed6e9f4b3fc", "message": "[FLINK-17558][netty] Release partitions asynchronously", "committedDate": "2020-05-28T11:40:02Z", "type": "commit"}, {"oid": "5df317832afdf91eadf36967ac5d0ed6e9f4b3fc", "url": "https://github.com/apache/flink/commit/5df317832afdf91eadf36967ac5d0ed6e9f4b3fc", "message": "[FLINK-17558][netty] Release partitions asynchronously", "committedDate": "2020-05-28T11:40:02Z", "type": "forcePushed"}]}