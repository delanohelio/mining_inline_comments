{"pr_number": 12042, "pr_title": "[FLINK-16367] [table] Introduce TableEnvironment#createStatementSet api", "pr_createdAt": "2020-05-08T13:15:13Z", "pr_url": "https://github.com/apache/flink/pull/12042", "timeline": [{"oid": "4e7e6ed50a36257a3e12cf9166d2d53742a148de", "url": "https://github.com/apache/flink/commit/4e7e6ed50a36257a3e12cf9166d2d53742a148de", "message": "[FLINK-16367] [table] Introduce TableEnvironment#createStatementSet api", "committedDate": "2020-05-08T13:14:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE1MzQ3Mw==", "url": "https://github.com/apache/flink/pull/12042#discussion_r422153473", "bodyText": "move this before operations", "author": "KurtYoung", "createdAt": "2020-05-08T13:49:00Z", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/StatementSetImpl.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.api.internal;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.table.api.ExplainDetail;\n+import org.apache.flink.table.api.StatementSet;\n+import org.apache.flink.table.api.Table;\n+import org.apache.flink.table.api.TableException;\n+import org.apache.flink.table.api.TableResult;\n+import org.apache.flink.table.catalog.ObjectIdentifier;\n+import org.apache.flink.table.catalog.UnresolvedIdentifier;\n+import org.apache.flink.table.operations.CatalogSinkModifyOperation;\n+import org.apache.flink.table.operations.ModifyOperation;\n+import org.apache.flink.table.operations.Operation;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Implementation for {@link StatementSet}.\n+ */\n+@Internal\n+class StatementSetImpl implements StatementSet {\n+\tprivate List<ModifyOperation> operations = new ArrayList<>();\n+\tprivate final TableEnvironmentInternal tableEnvironment;", "originalCommit": "4e7e6ed50a36257a3e12cf9166d2d53742a148de", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "95af2c710bc1453b1930b46dbed83708f08fcc7a", "chunk": "diff --git a/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/StatementSetImpl.java b/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/StatementSetImpl.java\nindex 973257af634..7852ca41f15 100644\n--- a/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/StatementSetImpl.java\n+++ b/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/StatementSetImpl.java\n\n@@ -40,8 +40,8 @@ import java.util.stream.Collectors;\n  */\n @Internal\n class StatementSetImpl implements StatementSet {\n-\tprivate List<ModifyOperation> operations = new ArrayList<>();\n \tprivate final TableEnvironmentInternal tableEnvironment;\n+\tprivate List<ModifyOperation> operations = new ArrayList<>();\n \n \tprotected StatementSetImpl(TableEnvironmentInternal tableEnvironment) {\n \t\tthis.tableEnvironment = tableEnvironment;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE1Nzc0Mw==", "url": "https://github.com/apache/flink/pull/12042#discussion_r422157743", "bodyText": "how about using the target table name as the column name?", "author": "KurtYoung", "createdAt": "2020-05-08T13:56:54Z", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java", "diffHunk": "@@ -654,13 +655,39 @@ public TableResult executeSql(String statement) {\n \t\treturn executeOperation(operations.get(0));\n \t}\n \n+\t@Override\n+\tpublic StatementSet createStatementSet() {\n+\t\treturn new StatementSetImpl(this);\n+\t}\n+\n \t@Override\n \tpublic TableResult executeInternal(List<ModifyOperation> operations) {\n-\t\tif (operations.size() != 1) {\n-\t\t\tthrow new TableException(\"Only one ModifyOperation is supported now.\");\n-\t\t}\n+\t\tList<Transformation<?>> transformations = translate(operations);\n+\t\tString jobName = extractJobName(operations);\n+\t\tPipeline pipeline = execEnv.createPipeline(transformations, tableConfig, jobName);\n+\t\ttry {\n+\t\t\tJobClient jobClient = execEnv.executeAsync(pipeline);\n+\t\t\tTableSchema.Builder builder = TableSchema.builder();\n+\t\t\tObject[] affectedRowCounts = new Long[operations.size()];\n+\t\t\tfor (int i = 0; i < operations.size(); ++i) {\n+\t\t\t\t// if only one operation, field name is 'affected_rowcount', else is 'affected_rowcount_$i'\n+\t\t\t\tString fieldName = \"affected_rowcount\";", "originalCommit": "4e7e6ed50a36257a3e12cf9166d2d53742a148de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIzMjYwNg==", "url": "https://github.com/apache/flink/pull/12042#discussion_r422232606", "bodyText": "I think \"affected_rowcount\" is necessary, how about \"affected_rowcount_sink_table_name\" ?", "author": "godfreyhe", "createdAt": "2020-05-08T16:13:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE1Nzc0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0MDU2MQ==", "url": "https://github.com/apache/flink/pull/12042#discussion_r422440561", "bodyText": "Seems too long to me, I think most users are aware of this bigint is representing the row count inserted into the table", "author": "KurtYoung", "createdAt": "2020-05-09T02:02:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE1Nzc0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0MTE3OQ==", "url": "https://github.com/apache/flink/pull/12042#discussion_r422441179", "bodyText": "in fact, the table qualified name may be long. in addition, we may need to add catalog name and database name to distinguish between tables with the same name.", "author": "godfreyhe", "createdAt": "2020-05-09T02:08:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE1Nzc0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ0Mjk0OA==", "url": "https://github.com/apache/flink/pull/12042#discussion_r422442948", "bodyText": "Yes, that will be long. But if we don't show this, after we display some real row counts in the future, it would be impossible for users to understand the meaning.", "author": "KurtYoung", "createdAt": "2020-05-09T02:26:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE1Nzc0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2NDA0Ng==", "url": "https://github.com/apache/flink/pull/12042#discussion_r422464046", "bodyText": "yes, if there are many sinks.\nI will try to extract sink identifier names as the shortest form (also make sure them are unique) to reduce the length of field name", "author": "godfreyhe", "createdAt": "2020-05-09T07:30:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE1Nzc0Mw=="}], "type": "inlineReview", "revised_code": {"commit": "124d6f95811f3312e17a1a0fdb5ad10e21d1fe06", "chunk": "diff --git a/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java b/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java\nindex d64e10e8ee2..a871f864754 100644\n--- a/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java\n+++ b/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java\n\n@@ -663,19 +665,16 @@ public class TableEnvironmentImpl implements TableEnvironmentInternal {\n \t@Override\n \tpublic TableResult executeInternal(List<ModifyOperation> operations) {\n \t\tList<Transformation<?>> transformations = translate(operations);\n-\t\tString jobName = extractJobName(operations);\n+\t\tList<String> sinkIdentifierNames = extractSinkIdentifierNames(operations);\n+\t\tString jobName = \"insert_into_\" + String.join(\",\", sinkIdentifierNames);\n \t\tPipeline pipeline = execEnv.createPipeline(transformations, tableConfig, jobName);\n \t\ttry {\n \t\t\tJobClient jobClient = execEnv.executeAsync(pipeline);\n \t\t\tTableSchema.Builder builder = TableSchema.builder();\n \t\t\tObject[] affectedRowCounts = new Long[operations.size()];\n \t\t\tfor (int i = 0; i < operations.size(); ++i) {\n-\t\t\t\t// if only one operation, field name is 'affected_rowcount', else is 'affected_rowcount_$i'\n-\t\t\t\tString fieldName = \"affected_rowcount\";\n-\t\t\t\tif (operations.size() > 1) {\n-\t\t\t\t\tfieldName = fieldName + \"_\" + i;\n-\t\t\t\t}\n-\t\t\t\tbuilder.field(fieldName, DataTypes.BIGINT());\n+\t\t\t\t// use sink identifier name as field name\n+\t\t\t\tbuilder.field(sinkIdentifierNames.get(i), DataTypes.BIGINT());\n \t\t\t\taffectedRowCounts[i] = -1L;\n \t\t\t}\n \n"}}, {"oid": "95af2c710bc1453b1930b46dbed83708f08fcc7a", "url": "https://github.com/apache/flink/commit/95af2c710bc1453b1930b46dbed83708f08fcc7a", "message": "minor update", "committedDate": "2020-05-08T16:15:55Z", "type": "commit"}, {"oid": "124d6f95811f3312e17a1a0fdb5ad10e21d1fe06", "url": "https://github.com/apache/flink/commit/124d6f95811f3312e17a1a0fdb5ad10e21d1fe06", "message": "address kurt's comment", "committedDate": "2020-05-09T08:41:39Z", "type": "commit"}, {"oid": "8b565b90f9b2d13629f95c15095229b6c0273c1b", "url": "https://github.com/apache/flink/commit/8b565b90f9b2d13629f95c15095229b6c0273c1b", "message": "address hequn's comment", "committedDate": "2020-05-09T08:45:07Z", "type": "commit"}, {"oid": "67032e8cb903a95ec384d6e5e55150dc5c4a8144", "url": "https://github.com/apache/flink/commit/67032e8cb903a95ec384d6e5e55150dc5c4a8144", "message": "add TODO", "committedDate": "2020-05-09T10:18:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ4NjY3MQ==", "url": "https://github.com/apache/flink/pull/12042#discussion_r422486671", "bodyText": "I would prefer to keep it simple for now, just use the full identify is enough.", "author": "KurtYoung", "createdAt": "2020-05-09T11:49:18Z", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java", "diffHunk": "@@ -894,14 +907,48 @@ private TableResult buildShowResult(String[] objects) {\n \t\t\t\t.build();\n \t}\n \n-\tprivate String extractJobName(Operation operation) {\n-\t\tString tableName;\n-\t\tif (operation instanceof CatalogSinkModifyOperation) {\n-\t\t\ttableName = ((CatalogSinkModifyOperation) operation).getTableIdentifier().toString();\n-\t\t} else {\n-\t\t\tthrow new UnsupportedOperationException(\"Unsupported operation: \" + operation);\n+\t/**\n+\t * extract sink identifier names from {@link ModifyOperation}s.\n+\t *\n+\t * <p>This method will keep the shortest form of an identifier,\n+\t * which should be unique between all identifiers. e.g.\n+\t * cat.db.tbl1, cat.db.tbl2, cat.db1.tbl3, cat.db2.tbl3, cat1.db.tbl4, cat2.db.tbl4\n+\t * the result is\n+\t * tbl1, tbl2, db1.tbl3, db2.tbl3, cat1.db.tbl4, cat2.db.tbl4\n+\t */\n+\tprivate List<String> extractSinkIdentifierNames(List<ModifyOperation> operations) {", "originalCommit": "67032e8cb903a95ec384d6e5e55150dc5c4a8144", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a3ce5de621cabc2ca7aba0037d1616afa6178b17", "chunk": "diff --git a/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java b/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java\nindex a871f864754..8e1ba418e74 100644\n--- a/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java\n+++ b/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/api/internal/TableEnvironmentImpl.java\n\n@@ -909,45 +907,17 @@ public class TableEnvironmentImpl implements TableEnvironmentInternal {\n \n \t/**\n \t * extract sink identifier names from {@link ModifyOperation}s.\n-\t *\n-\t * <p>This method will keep the shortest form of an identifier,\n-\t * which should be unique between all identifiers. e.g.\n-\t * cat.db.tbl1, cat.db.tbl2, cat.db1.tbl3, cat.db2.tbl3, cat1.db.tbl4, cat2.db.tbl4\n-\t * the result is\n-\t * tbl1, tbl2, db1.tbl3, db2.tbl3, cat1.db.tbl4, cat2.db.tbl4\n \t */\n \tprivate List<String> extractSinkIdentifierNames(List<ModifyOperation> operations) {\n-\t\tList<ObjectIdentifier> identifiers = new ArrayList<>(operations.size());\n-\t\tMap<String, List<String>> tableName2DatabaseNames = new HashMap<>();\n+\t\tList<String> tableNames = new ArrayList<>(operations.size());\n \t\tfor (ModifyOperation operation : operations) {\n \t\t\tif (operation instanceof CatalogSinkModifyOperation) {\n \t\t\t\tObjectIdentifier identifier = ((CatalogSinkModifyOperation) operation).getTableIdentifier();\n-\t\t\t\tidentifiers.add(identifier);\n-\t\t\t\tString tableName = identifier.getObjectName();\n-\t\t\t\tif (!tableName2DatabaseNames.containsKey(tableName)) {\n-\t\t\t\t\ttableName2DatabaseNames.put(tableName, new ArrayList<>());\n-\t\t\t\t}\n-\t\t\t\ttableName2DatabaseNames.get(tableName).add(identifier.getDatabaseName());\n+\t\t\t\ttableNames.add(identifier.asSummaryString());\n \t\t\t} else {\n \t\t\t\tthrow new UnsupportedOperationException(\"Unsupported operation: \" + operation);\n \t\t\t}\n \t\t}\n-\n-\t\tList<String> tableNames = new ArrayList<>(identifiers.size());\n-\t\tfor (ObjectIdentifier i : identifiers) {\n-\t\t\tList<String> databaseNames = tableName2DatabaseNames.get(i.getObjectName());\n-\t\t\tif (databaseNames.size() == 1) {\n-\t\t\t\t// current table name is unique\n-\t\t\t\ttableNames.add(i.getObjectName());\n-\t\t\t} else if (databaseNames.size() == new HashSet<>(databaseNames).size()) {\n-\t\t\t\t// current table name is not unique while database names associated with current table name are unique\n-\t\t\t\ttableNames.add(String.join(\".\", i.getDatabaseName(), i.getObjectName()));\n-\t\t\t} else {\n-\t\t\t\t// use full name\n-\t\t\t\ttableNames.add(String.join(\".\", i.getCatalogName(), i.getDatabaseName(),i.getObjectName()));\n-\t\t\t}\n-\t\t}\n-\n \t\treturn tableNames;\n \t}\n \n"}}, {"oid": "a3ce5de621cabc2ca7aba0037d1616afa6178b17", "url": "https://github.com/apache/flink/commit/a3ce5de621cabc2ca7aba0037d1616afa6178b17", "message": "address kurt's comment", "committedDate": "2020-05-09T14:30:47Z", "type": "commit"}, {"oid": "b81c9a59867b94c5941f43087f7dd2a359ba07a5", "url": "https://github.com/apache/flink/commit/b81c9a59867b94c5941f43087f7dd2a359ba07a5", "message": "fix python checkstyle", "committedDate": "2020-05-10T01:16:07Z", "type": "commit"}]}