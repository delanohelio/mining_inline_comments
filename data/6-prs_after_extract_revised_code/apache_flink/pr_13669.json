{"pr_number": 13669, "pr_title": "[FLINK-19684][Connector][jdbc]  Fix the Jdbc-connector's  'lookup.max-retries' option implementation ", "pr_createdAt": "2020-10-16T16:42:42Z", "pr_url": "https://github.com/apache/flink/pull/13669", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc4MTIzNQ==", "url": "https://github.com/apache/flink/pull/13669#discussion_r506781235", "bodyText": "sink.max-retries configuration in JdbcBatchingOutputFormat is similar with this, could you also have a change?\nBTW, Commit message should contain issue id etc, following\nhttps://flink.apache.org/contributing/code-style-and-quality-pull-requests.html", "author": "wangxlong", "createdAt": "2020-10-17T02:01:22Z", "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/table/JdbcRowDataLookupFunction.java", "diffHunk": "@@ -147,7 +147,7 @@ public void eval(Object... keys) {\n \t\t\t}\n \t\t}\n \n-\t\tfor (int retry = 1; retry <= maxRetryTimes; retry++) {\n+\t\tfor (int retry = 0; retry <= maxRetryTimes; retry++) {", "originalCommit": "9af35f28ff24e32827dd43dce1009045d0ae671f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc4NTMwNQ==", "url": "https://github.com/apache/flink/pull/13669#discussion_r506785305", "bodyText": "Thanks for your review.", "author": "caozhen1937", "createdAt": "2020-10-17T02:51:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc4MTIzNQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ2NjA5Nw==", "url": "https://github.com/apache/flink/pull/13669#discussion_r508466097", "bodyText": "throw new IllegalArgumentException(String.format(\n    \"The value of '%s' option shouldn't be negative, but is %s.\",\n    LOOKUP_MAX_RETRIES.key(),\n    config.get(LOOKUP_MAX_RETRIES)));", "author": "wuchong", "createdAt": "2020-10-20T12:40:37Z", "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableFactory.java", "diffHunk": "@@ -308,6 +308,14 @@ private void validateConfigOptions(ReadableConfig config) {\n \t\t\tLOOKUP_CACHE_MAX_ROWS,\n \t\t\tLOOKUP_CACHE_TTL\n \t\t});\n+\n+\t\tif (config.get(LOOKUP_MAX_RETRIES) <= 0) {\n+\t\t\tthrow new IllegalArgumentException(\"The 'lookup.max-retries' should be greater than 0.\");", "originalCommit": "d1ac38bd0191d3595711142498ba0c37203be49c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ2NjM2OQ==", "url": "https://github.com/apache/flink/pull/13669#discussion_r508466369", "bodyText": "Use the option variable instead of hard code the option key.", "author": "wuchong", "createdAt": "2020-10-20T12:41:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ2NjA5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "91c30bcb00e8bdfae2d14f6a4dfd0924517ce071", "chunk": "diff --git a/flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableFactory.java b/flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableFactory.java\nindex 5e3795c92f0..bb3a32e9eba 100644\n--- a/flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableFactory.java\n+++ b/flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableFactory.java\n\n@@ -309,12 +309,18 @@ public class JdbcDynamicTableFactory implements DynamicTableSourceFactory, Dynam\n \t\t\tLOOKUP_CACHE_TTL\n \t\t});\n \n-\t\tif (config.get(LOOKUP_MAX_RETRIES) <= 0) {\n-\t\t\tthrow new IllegalArgumentException(\"The 'lookup.max-retries' should be greater than 0.\");\n+\t\tif (config.get(LOOKUP_MAX_RETRIES) < 0) {\n+\t\t\tthrow new IllegalArgumentException(String.format(\n+\t\t\t\t\"The value of '%s' option shouldn't be negative, but is %s.\",\n+\t\t\t\tLOOKUP_MAX_RETRIES.key(),\n+\t\t\t\tconfig.get(LOOKUP_MAX_RETRIES)));\n \t\t}\n \n-\t\tif (config.get(SINK_MAX_RETRIES) <= 0) {\n-\t\t\tthrow new IllegalArgumentException(\"The 'sink.max-retries' should be greater than 0.\");\n+\t\tif (config.get(SINK_MAX_RETRIES) < 0) {\n+\t\t\tthrow new IllegalArgumentException(String.format(\n+\t\t\t\t\"The value of '%s' option shouldn't be negative, but is %s.\",\n+\t\t\t\tSINK_MAX_RETRIES.key(),\n+\t\t\t\tconfig.get(SINK_MAX_RETRIES)));\n \t\t}\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ2Njk4Mw==", "url": "https://github.com/apache/flink/pull/13669#discussion_r508466983", "bodyText": "ditto.", "author": "wuchong", "createdAt": "2020-10-20T12:41:58Z", "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableFactory.java", "diffHunk": "@@ -308,6 +308,14 @@ private void validateConfigOptions(ReadableConfig config) {\n \t\t\tLOOKUP_CACHE_MAX_ROWS,\n \t\t\tLOOKUP_CACHE_TTL\n \t\t});\n+\n+\t\tif (config.get(LOOKUP_MAX_RETRIES) <= 0) {\n+\t\t\tthrow new IllegalArgumentException(\"The 'lookup.max-retries' should be greater than 0.\");\n+\t\t}\n+\n+\t\tif (config.get(SINK_MAX_RETRIES) <= 0) {\n+\t\t\tthrow new IllegalArgumentException(\"The 'sink.max-retries' should be greater than 0.\");", "originalCommit": "d1ac38bd0191d3595711142498ba0c37203be49c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "91c30bcb00e8bdfae2d14f6a4dfd0924517ce071", "chunk": "diff --git a/flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableFactory.java b/flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableFactory.java\nindex 5e3795c92f0..bb3a32e9eba 100644\n--- a/flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableFactory.java\n+++ b/flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableFactory.java\n\n@@ -309,12 +309,18 @@ public class JdbcDynamicTableFactory implements DynamicTableSourceFactory, Dynam\n \t\t\tLOOKUP_CACHE_TTL\n \t\t});\n \n-\t\tif (config.get(LOOKUP_MAX_RETRIES) <= 0) {\n-\t\t\tthrow new IllegalArgumentException(\"The 'lookup.max-retries' should be greater than 0.\");\n+\t\tif (config.get(LOOKUP_MAX_RETRIES) < 0) {\n+\t\t\tthrow new IllegalArgumentException(String.format(\n+\t\t\t\t\"The value of '%s' option shouldn't be negative, but is %s.\",\n+\t\t\t\tLOOKUP_MAX_RETRIES.key(),\n+\t\t\t\tconfig.get(LOOKUP_MAX_RETRIES)));\n \t\t}\n \n-\t\tif (config.get(SINK_MAX_RETRIES) <= 0) {\n-\t\t\tthrow new IllegalArgumentException(\"The 'sink.max-retries' should be greater than 0.\");\n+\t\tif (config.get(SINK_MAX_RETRIES) < 0) {\n+\t\t\tthrow new IllegalArgumentException(String.format(\n+\t\t\t\t\"The value of '%s' option shouldn't be negative, but is %s.\",\n+\t\t\t\tSINK_MAX_RETRIES.key(),\n+\t\t\t\tconfig.get(SINK_MAX_RETRIES)));\n \t\t}\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ2NzE2OA==", "url": "https://github.com/apache/flink/pull/13669#discussion_r508467168", "bodyText": "I think it can equal to zero?", "author": "wuchong", "createdAt": "2020-10-20T12:42:14Z", "path": "flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableFactory.java", "diffHunk": "@@ -308,6 +308,14 @@ private void validateConfigOptions(ReadableConfig config) {\n \t\t\tLOOKUP_CACHE_MAX_ROWS,\n \t\t\tLOOKUP_CACHE_TTL\n \t\t});\n+\n+\t\tif (config.get(LOOKUP_MAX_RETRIES) <= 0) {", "originalCommit": "d1ac38bd0191d3595711142498ba0c37203be49c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ3NTEwNw==", "url": "https://github.com/apache/flink/pull/13669#discussion_r508475107", "bodyText": "Yes,you are right,my mistake.", "author": "caozhen1937", "createdAt": "2020-10-20T12:53:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ2NzE2OA=="}], "type": "inlineReview", "revised_code": {"commit": "91c30bcb00e8bdfae2d14f6a4dfd0924517ce071", "chunk": "diff --git a/flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableFactory.java b/flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableFactory.java\nindex 5e3795c92f0..bb3a32e9eba 100644\n--- a/flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableFactory.java\n+++ b/flink-connectors/flink-connector-jdbc/src/main/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableFactory.java\n\n@@ -309,12 +309,18 @@ public class JdbcDynamicTableFactory implements DynamicTableSourceFactory, Dynam\n \t\t\tLOOKUP_CACHE_TTL\n \t\t});\n \n-\t\tif (config.get(LOOKUP_MAX_RETRIES) <= 0) {\n-\t\t\tthrow new IllegalArgumentException(\"The 'lookup.max-retries' should be greater than 0.\");\n+\t\tif (config.get(LOOKUP_MAX_RETRIES) < 0) {\n+\t\t\tthrow new IllegalArgumentException(String.format(\n+\t\t\t\t\"The value of '%s' option shouldn't be negative, but is %s.\",\n+\t\t\t\tLOOKUP_MAX_RETRIES.key(),\n+\t\t\t\tconfig.get(LOOKUP_MAX_RETRIES)));\n \t\t}\n \n-\t\tif (config.get(SINK_MAX_RETRIES) <= 0) {\n-\t\t\tthrow new IllegalArgumentException(\"The 'sink.max-retries' should be greater than 0.\");\n+\t\tif (config.get(SINK_MAX_RETRIES) < 0) {\n+\t\t\tthrow new IllegalArgumentException(String.format(\n+\t\t\t\t\"The value of '%s' option shouldn't be negative, but is %s.\",\n+\t\t\t\tSINK_MAX_RETRIES.key(),\n+\t\t\t\tconfig.get(SINK_MAX_RETRIES)));\n \t\t}\n \t}\n \n"}}, {"oid": "91c30bcb00e8bdfae2d14f6a4dfd0924517ce071", "url": "https://github.com/apache/flink/commit/91c30bcb00e8bdfae2d14f6a4dfd0924517ce071", "message": "[FLINK-19684][jdbc] Fix 'max-retries' option doesn't work when set to zero", "committedDate": "2020-10-27T05:54:24Z", "type": "commit"}, {"oid": "91c30bcb00e8bdfae2d14f6a4dfd0924517ce071", "url": "https://github.com/apache/flink/commit/91c30bcb00e8bdfae2d14f6a4dfd0924517ce071", "message": "[FLINK-19684][jdbc] Fix 'max-retries' option doesn't work when set to zero", "committedDate": "2020-10-27T05:54:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQwNTczMQ==", "url": "https://github.com/apache/flink/pull/13669#discussion_r512405731", "bodyText": "SELECT * can't test lookup ability.", "author": "wuchong", "createdAt": "2020-10-27T04:11:13Z", "path": "flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableSourceITCase.java", "diffHunk": "@@ -125,6 +125,45 @@ public void testJdbcSource() throws Exception {\n \t\tassertEquals(expected, result);\n \t}\n \n+\t@Test\n+\tpublic void testJdbcSourceWithLookupMaxRetries() throws Exception {\n+\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n+\t\tEnvironmentSettings envSettings = EnvironmentSettings.newInstance()\n+\t\t\t.useBlinkPlanner()\n+\t\t\t.inStreamingMode()\n+\t\t\t.build();\n+\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n+\n+\t\ttEnv.executeSql(\n+\t\t\t\"CREATE TABLE \" + INPUT_TABLE + \"(\" +\n+\t\t\t\t\"id BIGINT,\" +\n+\t\t\t\t\"timestamp6_col TIMESTAMP(6),\" +\n+\t\t\t\t\"timestamp9_col TIMESTAMP(9),\" +\n+\t\t\t\t\"time_col TIME,\" +\n+\t\t\t\t\"real_col FLOAT,\" +\n+\t\t\t\t\"double_col DOUBLE,\" +\n+\t\t\t\t\"decimal_col DECIMAL(10, 4)\" +\n+\t\t\t\t\") WITH (\" +\n+\t\t\t\t\"  'connector'='jdbc',\" +\n+\t\t\t\t\"  'url'='\" + DB_URL + \"',\" +\n+\t\t\t\t\"  'lookup.max-retries'='0',\" +\n+\t\t\t\t\"  'table-name'='\" + INPUT_TABLE + \"'\" +\n+\t\t\t\t\")\"\n+\t\t);\n+\n+\t\tIterator<Row> collected = tEnv.executeSql(\"SELECT id FROM \" + INPUT_TABLE).collect();", "originalCommit": "43d89c648207fe8dd3ecb6be95df0d5255381138", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ1MjM3MA==", "url": "https://github.com/apache/flink/pull/13669#discussion_r512452370", "bodyText": "Thank you.", "author": "caozhen1937", "createdAt": "2020-10-27T06:55:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQwNTczMQ=="}], "type": "inlineReview", "revised_code": {"commit": "91c30bcb00e8bdfae2d14f6a4dfd0924517ce071", "chunk": "diff --git a/flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableSourceITCase.java b/flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableSourceITCase.java\nindex dee3a8941f3..ad5332554a5 100644\n--- a/flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableSourceITCase.java\n+++ b/flink-connectors/flink-connector-jdbc/src/test/java/org/apache/flink/connector/jdbc/table/JdbcDynamicTableSourceITCase.java\n\n@@ -125,45 +125,6 @@ public class JdbcDynamicTableSourceITCase extends AbstractTestBase {\n \t\tassertEquals(expected, result);\n \t}\n \n-\t@Test\n-\tpublic void testJdbcSourceWithLookupMaxRetries() throws Exception {\n-\t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n-\t\tEnvironmentSettings envSettings = EnvironmentSettings.newInstance()\n-\t\t\t.useBlinkPlanner()\n-\t\t\t.inStreamingMode()\n-\t\t\t.build();\n-\t\tStreamTableEnvironment tEnv = StreamTableEnvironment.create(env, envSettings);\n-\n-\t\ttEnv.executeSql(\n-\t\t\t\"CREATE TABLE \" + INPUT_TABLE + \"(\" +\n-\t\t\t\t\"id BIGINT,\" +\n-\t\t\t\t\"timestamp6_col TIMESTAMP(6),\" +\n-\t\t\t\t\"timestamp9_col TIMESTAMP(9),\" +\n-\t\t\t\t\"time_col TIME,\" +\n-\t\t\t\t\"real_col FLOAT,\" +\n-\t\t\t\t\"double_col DOUBLE,\" +\n-\t\t\t\t\"decimal_col DECIMAL(10, 4)\" +\n-\t\t\t\t\") WITH (\" +\n-\t\t\t\t\"  'connector'='jdbc',\" +\n-\t\t\t\t\"  'url'='\" + DB_URL + \"',\" +\n-\t\t\t\t\"  'lookup.max-retries'='0',\" +\n-\t\t\t\t\"  'table-name'='\" + INPUT_TABLE + \"'\" +\n-\t\t\t\t\")\"\n-\t\t);\n-\n-\t\tIterator<Row> collected = tEnv.executeSql(\"SELECT id FROM \" + INPUT_TABLE).collect();\n-\t\tList<String> result = CollectionUtil.iteratorToList(collected).stream()\n-\t\t\t.map(Row::toString)\n-\t\t\t.sorted()\n-\t\t\t.collect(Collectors.toList());\n-\t\tList<String> expected =\n-\t\t\tStream.of(\n-\t\t\t\t\"1,2020-01-01T15:35:00.123456,2020-01-01T15:35:00.123456789,15:35,1.175E-37,1.79769E308,100.1234\",\n-\t\t\t\t\"2,2020-01-01T15:36:01.123456,2020-01-01T15:36:01.123456789,15:36:01,-1.175E-37,-1.79769E308,101.1234\")\n-\t\t\t\t.sorted().collect(Collectors.toList());\n-\t\tassertEquals(expected, result);\n-\t}\n-\n \t@Test\n \tpublic void testProject() throws Exception {\n \t\tStreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n"}}]}