{"pr_number": 13101, "pr_title": "[FLINK-18867][hive] Generic table stored in Hive catalog is incompati\u2026", "pr_createdAt": "2020-08-10T08:31:39Z", "pr_url": "https://github.com/apache/flink/pull/13101", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMxMjU3MA==", "url": "https://github.com/apache/flink/pull/13101#discussion_r468312570", "bodyText": "Can we add tests for all types and watermarks and computed columns?", "author": "JingsongLi", "createdAt": "2020-08-11T03:59:23Z", "path": "flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/table/catalog/hive/HiveCatalogGenericMetadataTest.java", "diffHunk": "@@ -65,6 +69,43 @@ public void testGenericTableSchema() throws Exception {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testTableSchemaCompatibility() throws Exception {\n+\t\tcatalog.createDatabase(db1, createDb(), false);\n+\t\tObjectPath tablePath = new ObjectPath(db1, \"generic110\");\n+\n+\t\t// create a table with old schema properties\n+\t\tTable hiveTable = org.apache.hadoop.hive.ql.metadata.Table.getEmptyTable(tablePath.getDatabaseName(),\n+\t\t\t\ttablePath.getObjectName());\n+\t\t// create table generic110 (c char(265), vc varchar(65536), ts timestamp(3), watermark for ts as ts)\n+\t\thiveTable.setDbName(tablePath.getDatabaseName());\n+\t\thiveTable.setTableName(tablePath.getObjectName());\n+\t\thiveTable.getParameters().put(CatalogConfig.IS_GENERIC, \"true\");", "originalCommit": "52a3dda64175007c4eb7b0d24edb71d95ccdaebf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f27468b909083982fb67ae622c7fc19bb8d7bda", "chunk": "diff --git a/flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/table/catalog/hive/HiveCatalogGenericMetadataTest.java b/flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/table/catalog/hive/HiveCatalogGenericMetadataTest.java\nindex 0029ec4b99..bb83d944ce 100644\n--- a/flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/table/catalog/hive/HiveCatalogGenericMetadataTest.java\n+++ b/flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/table/catalog/hive/HiveCatalogGenericMetadataTest.java\n\n@@ -69,43 +65,6 @@ public class HiveCatalogGenericMetadataTest extends HiveCatalogMetadataTestBase\n \t\t}\n \t}\n \n-\t@Test\n-\tpublic void testTableSchemaCompatibility() throws Exception {\n-\t\tcatalog.createDatabase(db1, createDb(), false);\n-\t\tObjectPath tablePath = new ObjectPath(db1, \"generic110\");\n-\n-\t\t// create a table with old schema properties\n-\t\tTable hiveTable = org.apache.hadoop.hive.ql.metadata.Table.getEmptyTable(tablePath.getDatabaseName(),\n-\t\t\t\ttablePath.getObjectName());\n-\t\t// create table generic110 (c char(265), vc varchar(65536), ts timestamp(3), watermark for ts as ts)\n-\t\thiveTable.setDbName(tablePath.getDatabaseName());\n-\t\thiveTable.setTableName(tablePath.getObjectName());\n-\t\thiveTable.getParameters().put(CatalogConfig.IS_GENERIC, \"true\");\n-\t\thiveTable.getParameters().put(\"flink.generic.table.schema.0.name\", \"c\");\n-\t\thiveTable.getParameters().put(\"flink.generic.table.schema.0.data-type\", \"CHAR(265)\");\n-\t\thiveTable.getParameters().put(\"flink.generic.table.schema.1.name\", \"vc\");\n-\t\thiveTable.getParameters().put(\"flink.generic.table.schema.1.data-type\", \"VARCHAR(65536)\");\n-\t\thiveTable.getParameters().put(\"flink.generic.table.schema.2.name\", \"ts\");\n-\t\thiveTable.getParameters().put(\"flink.generic.table.schema.2.data-type\", \"TIMESTAMP(3)\");\n-\t\thiveTable.getParameters().put(\"flink.generic.table.schema.watermark.0.rowtime\", \"ts\");\n-\t\thiveTable.getParameters().put(\"flink.generic.table.schema.watermark.0.strategy.data-type\", \"TIMESTAMP(3)\");\n-\t\thiveTable.getParameters().put(\"flink.generic.table.schema.watermark.0.strategy.expr\", \"ts\");\n-\n-\t\ttry {\n-\t\t\t((HiveCatalog) catalog).client.createTable(hiveTable);\n-\t\t\tCatalogBaseTable catalogBaseTable = catalog.getTable(tablePath);\n-\t\t\tassertTrue(Boolean.parseBoolean(catalogBaseTable.getOptions().get(CatalogConfig.IS_GENERIC)));\n-\t\t\tTableSchema expectedSchema = TableSchema.builder()\n-\t\t\t\t\t.fields(new String[]{\"c\", \"vc\", \"ts\"},\n-\t\t\t\t\t\t\tnew DataType[]{DataTypes.CHAR(265), DataTypes.VARCHAR(65536), DataTypes.TIMESTAMP(3)})\n-\t\t\t\t\t.watermark(\"ts\", \"ts\", DataTypes.TIMESTAMP(3))\n-\t\t\t\t\t.build();\n-\t\t\tassertEquals(expectedSchema, catalogBaseTable.getSchema());\n-\t\t} finally {\n-\t\t\tcatalog.dropTable(tablePath, true);\n-\t\t}\n-\t}\n-\n \t// ------ partitions ------\n \n \t@Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMxMjk3MQ==", "url": "https://github.com/apache/flink/pull/13101#discussion_r468312971", "bodyText": "Can add a comments: NOTE: Do not modify this test, it is important to forward compatibility..", "author": "JingsongLi", "createdAt": "2020-08-11T04:00:57Z", "path": "flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/table/catalog/hive/HiveCatalogGenericMetadataTest.java", "diffHunk": "@@ -65,6 +69,43 @@ public void testGenericTableSchema() throws Exception {\n \t\t}\n \t}\n \n+\t@Test", "originalCommit": "52a3dda64175007c4eb7b0d24edb71d95ccdaebf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f27468b909083982fb67ae622c7fc19bb8d7bda", "chunk": "diff --git a/flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/table/catalog/hive/HiveCatalogGenericMetadataTest.java b/flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/table/catalog/hive/HiveCatalogGenericMetadataTest.java\nindex 0029ec4b99..bb83d944ce 100644\n--- a/flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/table/catalog/hive/HiveCatalogGenericMetadataTest.java\n+++ b/flink-connectors/flink-connector-hive/src/test/java/org/apache/flink/table/catalog/hive/HiveCatalogGenericMetadataTest.java\n\n@@ -69,43 +65,6 @@ public class HiveCatalogGenericMetadataTest extends HiveCatalogMetadataTestBase\n \t\t}\n \t}\n \n-\t@Test\n-\tpublic void testTableSchemaCompatibility() throws Exception {\n-\t\tcatalog.createDatabase(db1, createDb(), false);\n-\t\tObjectPath tablePath = new ObjectPath(db1, \"generic110\");\n-\n-\t\t// create a table with old schema properties\n-\t\tTable hiveTable = org.apache.hadoop.hive.ql.metadata.Table.getEmptyTable(tablePath.getDatabaseName(),\n-\t\t\t\ttablePath.getObjectName());\n-\t\t// create table generic110 (c char(265), vc varchar(65536), ts timestamp(3), watermark for ts as ts)\n-\t\thiveTable.setDbName(tablePath.getDatabaseName());\n-\t\thiveTable.setTableName(tablePath.getObjectName());\n-\t\thiveTable.getParameters().put(CatalogConfig.IS_GENERIC, \"true\");\n-\t\thiveTable.getParameters().put(\"flink.generic.table.schema.0.name\", \"c\");\n-\t\thiveTable.getParameters().put(\"flink.generic.table.schema.0.data-type\", \"CHAR(265)\");\n-\t\thiveTable.getParameters().put(\"flink.generic.table.schema.1.name\", \"vc\");\n-\t\thiveTable.getParameters().put(\"flink.generic.table.schema.1.data-type\", \"VARCHAR(65536)\");\n-\t\thiveTable.getParameters().put(\"flink.generic.table.schema.2.name\", \"ts\");\n-\t\thiveTable.getParameters().put(\"flink.generic.table.schema.2.data-type\", \"TIMESTAMP(3)\");\n-\t\thiveTable.getParameters().put(\"flink.generic.table.schema.watermark.0.rowtime\", \"ts\");\n-\t\thiveTable.getParameters().put(\"flink.generic.table.schema.watermark.0.strategy.data-type\", \"TIMESTAMP(3)\");\n-\t\thiveTable.getParameters().put(\"flink.generic.table.schema.watermark.0.strategy.expr\", \"ts\");\n-\n-\t\ttry {\n-\t\t\t((HiveCatalog) catalog).client.createTable(hiveTable);\n-\t\t\tCatalogBaseTable catalogBaseTable = catalog.getTable(tablePath);\n-\t\t\tassertTrue(Boolean.parseBoolean(catalogBaseTable.getOptions().get(CatalogConfig.IS_GENERIC)));\n-\t\t\tTableSchema expectedSchema = TableSchema.builder()\n-\t\t\t\t\t.fields(new String[]{\"c\", \"vc\", \"ts\"},\n-\t\t\t\t\t\t\tnew DataType[]{DataTypes.CHAR(265), DataTypes.VARCHAR(65536), DataTypes.TIMESTAMP(3)})\n-\t\t\t\t\t.watermark(\"ts\", \"ts\", DataTypes.TIMESTAMP(3))\n-\t\t\t\t\t.build();\n-\t\t\tassertEquals(expectedSchema, catalogBaseTable.getSchema());\n-\t\t} finally {\n-\t\t\tcatalog.dropTable(tablePath, true);\n-\t\t}\n-\t}\n-\n \t// ------ partitions ------\n \n \t@Test\n"}}, {"oid": "6f27468b909083982fb67ae622c7fc19bb8d7bda", "url": "https://github.com/apache/flink/commit/6f27468b909083982fb67ae622c7fc19bb8d7bda", "message": "[FLINK-18867][hive] Generic table stored in Hive catalog is incompatible between 1.10 and 1.11", "committedDate": "2020-08-12T04:17:01Z", "type": "commit"}, {"oid": "9ef0229eb02141a237275ff939fe1eadbfab4b56", "url": "https://github.com/apache/flink/commit/9ef0229eb02141a237275ff939fe1eadbfab4b56", "message": "add test", "committedDate": "2020-08-12T04:17:01Z", "type": "commit"}, {"oid": "949eed92f0f0b4ab3a05f54d63ed8abd3e9a8aa0", "url": "https://github.com/apache/flink/commit/949eed92f0f0b4ab3a05f54d63ed8abd3e9a8aa0", "message": "add more test", "committedDate": "2020-08-12T04:17:01Z", "type": "commit"}, {"oid": "eceed6165aa76b70b26af967197050bbacc36071", "url": "https://github.com/apache/flink/commit/eceed6165aa76b70b26af967197050bbacc36071", "message": "checkstyle", "committedDate": "2020-08-12T04:17:35Z", "type": "commit"}, {"oid": "eceed6165aa76b70b26af967197050bbacc36071", "url": "https://github.com/apache/flink/commit/eceed6165aa76b70b26af967197050bbacc36071", "message": "checkstyle", "committedDate": "2020-08-12T04:17:35Z", "type": "forcePushed"}]}