{"pr_number": 13625, "pr_title": "[FLINK-19623][table-planner-blink] Introduce ExecEdge to describe information on input edges for ExecNode", "pr_createdAt": "2020-10-14T04:19:16Z", "pr_url": "https://github.com/apache/flink/pull/13625", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUwOTE0OQ==", "url": "https://github.com/apache/flink/pull/13625#discussion_r505509149", "bodyText": "It's better we could use Builder to create an ExecEdge, because all single nodes' priority is always 0, many nodes provide unknown RequiredShuffle, and maybe there are more properties will be added in the future, e.g. source/target node", "author": "godfreyhe", "createdAt": "2020-10-15T12:42:31Z", "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/ExecEdge.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.plan.nodes.exec;\n+\n+/**\n+ * The representation of an edge connecting two {@link ExecNode}.\n+ */\n+public class ExecEdge {\n+\n+\tprivate final RequiredShuffle requiredShuffle;\n+\tprivate final EdgeBehavior edgeBehavior;\n+\t// the priority of this edge read by the target node\n+\t// the smaller the integer, the higher the priority\n+\t// same integer indicates the same priority\n+\tprivate final int priority;\n+\n+\tpublic ExecEdge(RequiredShuffle requiredShuffle, EdgeBehavior edgeBehavior, int priority) {", "originalCommit": "1d3dfd2b49f980db8ac9189ad4bf0d310e19468c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6006a6b99245968721e5f7cc3bd3fa2e78851c2d", "chunk": "diff --git a/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/ExecEdge.java b/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/ExecEdge.java\nindex 2f5a963894a..5f9ed745d05 100644\n--- a/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/ExecEdge.java\n+++ b/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/ExecEdge.java\n\n@@ -18,21 +18,23 @@\n \n package org.apache.flink.table.planner.plan.nodes.exec;\n \n+import org.apache.flink.util.Preconditions;\n+\n /**\n  * The representation of an edge connecting two {@link ExecNode}.\n  */\n public class ExecEdge {\n \n \tprivate final RequiredShuffle requiredShuffle;\n-\tprivate final EdgeBehavior edgeBehavior;\n+\tprivate final DamBehavior damBehavior;\n \t// the priority of this edge read by the target node\n \t// the smaller the integer, the higher the priority\n \t// same integer indicates the same priority\n \tprivate final int priority;\n \n-\tpublic ExecEdge(RequiredShuffle requiredShuffle, EdgeBehavior edgeBehavior, int priority) {\n+\tprivate ExecEdge(RequiredShuffle requiredShuffle, DamBehavior damBehavior, int priority) {\n \t\tthis.requiredShuffle = requiredShuffle;\n-\t\tthis.edgeBehavior = edgeBehavior;\n+\t\tthis.damBehavior = damBehavior;\n \t\tthis.priority = priority;\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUxMDIwNg==", "url": "https://github.com/apache/flink/pull/13625#discussion_r505510206", "bodyText": "require keys is not empty here.", "author": "godfreyhe", "createdAt": "2020-10-15T12:44:05Z", "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/ExecEdge.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.plan.nodes.exec;\n+\n+/**\n+ * The representation of an edge connecting two {@link ExecNode}.\n+ */\n+public class ExecEdge {\n+\n+\tprivate final RequiredShuffle requiredShuffle;\n+\tprivate final EdgeBehavior edgeBehavior;\n+\t// the priority of this edge read by the target node\n+\t// the smaller the integer, the higher the priority\n+\t// same integer indicates the same priority\n+\tprivate final int priority;\n+\n+\tpublic ExecEdge(RequiredShuffle requiredShuffle, EdgeBehavior edgeBehavior, int priority) {\n+\t\tthis.requiredShuffle = requiredShuffle;\n+\t\tthis.edgeBehavior = edgeBehavior;\n+\t\tthis.priority = priority;\n+\t}\n+\n+\tpublic RequiredShuffle getRequiredShuffle() {\n+\t\treturn requiredShuffle;\n+\t}\n+\n+\tpublic EdgeBehavior getEdgeBehavior() {\n+\t\treturn edgeBehavior;\n+\t}\n+\n+\tpublic int getPriority() {\n+\t\treturn priority;\n+\t}\n+\n+\t/**\n+\t * The required shuffle for records when passing this edge.\n+\t */\n+\tpublic static class RequiredShuffle {\n+\n+\t\tprivate final ShuffleType type;\n+\t\tprivate final int[] keys;\n+\n+\t\tprivate RequiredShuffle(ShuffleType type, int[] keys) {\n+\t\t\tthis.type = type;\n+\t\t\tthis.keys = keys;\n+\t\t}\n+\n+\t\tpublic ShuffleType getType() {\n+\t\t\treturn type;\n+\t\t}\n+\n+\t\tpublic int[] getKeys() {\n+\t\t\treturn keys;\n+\t\t}\n+\n+\t\tpublic static RequiredShuffle any() {\n+\t\t\treturn new RequiredShuffle(ShuffleType.ANY, new int[0]);\n+\t\t}\n+\n+\t\tpublic static RequiredShuffle hash(int[] keys) {\n+\t\t\tif (keys.length == 0) {", "originalCommit": "1d3dfd2b49f980db8ac9189ad4bf0d310e19468c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6006a6b99245968721e5f7cc3bd3fa2e78851c2d", "chunk": "diff --git a/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/ExecEdge.java b/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/ExecEdge.java\nindex 2f5a963894a..5f9ed745d05 100644\n--- a/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/ExecEdge.java\n+++ b/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/ExecEdge.java\n\n@@ -18,21 +18,23 @@\n \n package org.apache.flink.table.planner.plan.nodes.exec;\n \n+import org.apache.flink.util.Preconditions;\n+\n /**\n  * The representation of an edge connecting two {@link ExecNode}.\n  */\n public class ExecEdge {\n \n \tprivate final RequiredShuffle requiredShuffle;\n-\tprivate final EdgeBehavior edgeBehavior;\n+\tprivate final DamBehavior damBehavior;\n \t// the priority of this edge read by the target node\n \t// the smaller the integer, the higher the priority\n \t// same integer indicates the same priority\n \tprivate final int priority;\n \n-\tpublic ExecEdge(RequiredShuffle requiredShuffle, EdgeBehavior edgeBehavior, int priority) {\n+\tprivate ExecEdge(RequiredShuffle requiredShuffle, DamBehavior damBehavior, int priority) {\n \t\tthis.requiredShuffle = requiredShuffle;\n-\t\tthis.edgeBehavior = edgeBehavior;\n+\t\tthis.damBehavior = damBehavior;\n \t\tthis.priority = priority;\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUxMDQ4Mw==", "url": "https://github.com/apache/flink/pull/13625#discussion_r505510483", "bodyText": "add some comments for the public apis", "author": "godfreyhe", "createdAt": "2020-10-15T12:44:34Z", "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/ExecEdge.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.plan.nodes.exec;\n+\n+/**\n+ * The representation of an edge connecting two {@link ExecNode}.\n+ */\n+public class ExecEdge {\n+\n+\tprivate final RequiredShuffle requiredShuffle;\n+\tprivate final EdgeBehavior edgeBehavior;\n+\t// the priority of this edge read by the target node\n+\t// the smaller the integer, the higher the priority\n+\t// same integer indicates the same priority\n+\tprivate final int priority;\n+\n+\tpublic ExecEdge(RequiredShuffle requiredShuffle, EdgeBehavior edgeBehavior, int priority) {\n+\t\tthis.requiredShuffle = requiredShuffle;\n+\t\tthis.edgeBehavior = edgeBehavior;\n+\t\tthis.priority = priority;\n+\t}\n+\n+\tpublic RequiredShuffle getRequiredShuffle() {\n+\t\treturn requiredShuffle;\n+\t}\n+\n+\tpublic EdgeBehavior getEdgeBehavior() {\n+\t\treturn edgeBehavior;\n+\t}\n+\n+\tpublic int getPriority() {\n+\t\treturn priority;\n+\t}\n+\n+\t/**\n+\t * The required shuffle for records when passing this edge.\n+\t */\n+\tpublic static class RequiredShuffle {\n+\n+\t\tprivate final ShuffleType type;\n+\t\tprivate final int[] keys;\n+\n+\t\tprivate RequiredShuffle(ShuffleType type, int[] keys) {\n+\t\t\tthis.type = type;\n+\t\t\tthis.keys = keys;\n+\t\t}\n+\n+\t\tpublic ShuffleType getType() {\n+\t\t\treturn type;\n+\t\t}\n+\n+\t\tpublic int[] getKeys() {\n+\t\t\treturn keys;\n+\t\t}\n+\n+\t\tpublic static RequiredShuffle any() {", "originalCommit": "1d3dfd2b49f980db8ac9189ad4bf0d310e19468c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6006a6b99245968721e5f7cc3bd3fa2e78851c2d", "chunk": "diff --git a/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/ExecEdge.java b/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/ExecEdge.java\nindex 2f5a963894a..5f9ed745d05 100644\n--- a/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/ExecEdge.java\n+++ b/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/ExecEdge.java\n\n@@ -18,21 +18,23 @@\n \n package org.apache.flink.table.planner.plan.nodes.exec;\n \n+import org.apache.flink.util.Preconditions;\n+\n /**\n  * The representation of an edge connecting two {@link ExecNode}.\n  */\n public class ExecEdge {\n \n \tprivate final RequiredShuffle requiredShuffle;\n-\tprivate final EdgeBehavior edgeBehavior;\n+\tprivate final DamBehavior damBehavior;\n \t// the priority of this edge read by the target node\n \t// the smaller the integer, the higher the priority\n \t// same integer indicates the same priority\n \tprivate final int priority;\n \n-\tpublic ExecEdge(RequiredShuffle requiredShuffle, EdgeBehavior edgeBehavior, int priority) {\n+\tprivate ExecEdge(RequiredShuffle requiredShuffle, DamBehavior damBehavior, int priority) {\n \t\tthis.requiredShuffle = requiredShuffle;\n-\t\tthis.edgeBehavior = edgeBehavior;\n+\t\tthis.damBehavior = damBehavior;\n \t\tthis.priority = priority;\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUxMTIyNg==", "url": "https://github.com/apache/flink/pull/13625#discussion_r505511226", "bodyText": "provide another constructor private RequiredShuffle(ShuffleType type)", "author": "godfreyhe", "createdAt": "2020-10-15T12:45:37Z", "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/ExecEdge.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.plan.nodes.exec;\n+\n+/**\n+ * The representation of an edge connecting two {@link ExecNode}.\n+ */\n+public class ExecEdge {\n+\n+\tprivate final RequiredShuffle requiredShuffle;\n+\tprivate final EdgeBehavior edgeBehavior;\n+\t// the priority of this edge read by the target node\n+\t// the smaller the integer, the higher the priority\n+\t// same integer indicates the same priority\n+\tprivate final int priority;\n+\n+\tpublic ExecEdge(RequiredShuffle requiredShuffle, EdgeBehavior edgeBehavior, int priority) {\n+\t\tthis.requiredShuffle = requiredShuffle;\n+\t\tthis.edgeBehavior = edgeBehavior;\n+\t\tthis.priority = priority;\n+\t}\n+\n+\tpublic RequiredShuffle getRequiredShuffle() {\n+\t\treturn requiredShuffle;\n+\t}\n+\n+\tpublic EdgeBehavior getEdgeBehavior() {\n+\t\treturn edgeBehavior;\n+\t}\n+\n+\tpublic int getPriority() {\n+\t\treturn priority;\n+\t}\n+\n+\t/**\n+\t * The required shuffle for records when passing this edge.\n+\t */\n+\tpublic static class RequiredShuffle {\n+\n+\t\tprivate final ShuffleType type;\n+\t\tprivate final int[] keys;\n+\n+\t\tprivate RequiredShuffle(ShuffleType type, int[] keys) {\n+\t\t\tthis.type = type;\n+\t\t\tthis.keys = keys;\n+\t\t}\n+\n+\t\tpublic ShuffleType getType() {\n+\t\t\treturn type;\n+\t\t}\n+\n+\t\tpublic int[] getKeys() {\n+\t\t\treturn keys;\n+\t\t}\n+\n+\t\tpublic static RequiredShuffle any() {\n+\t\t\treturn new RequiredShuffle(ShuffleType.ANY, new int[0]);\n+\t\t}\n+\n+\t\tpublic static RequiredShuffle hash(int[] keys) {\n+\t\t\tif (keys.length == 0) {\n+\t\t\t\treturn new RequiredShuffle(ShuffleType.ANY, keys);\n+\t\t\t} else {\n+\t\t\t\treturn new RequiredShuffle(ShuffleType.HASH, keys);\n+\t\t\t}\n+\t\t}\n+\n+\t\tpublic static RequiredShuffle broadcast() {\n+\t\t\treturn new RequiredShuffle(ShuffleType.BROADCAST, new int[0]);\n+\t\t}\n+\n+\t\tpublic static RequiredShuffle singleton() {\n+\t\t\treturn new RequiredShuffle(ShuffleType.SINGLETON, new int[0]);\n+\t\t}\n+\n+\t\tpublic static RequiredShuffle unknown() {\n+\t\t\treturn new RequiredShuffle(ShuffleType.UNKNOWN, new int[0]);", "originalCommit": "1d3dfd2b49f980db8ac9189ad4bf0d310e19468c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6006a6b99245968721e5f7cc3bd3fa2e78851c2d", "chunk": "diff --git a/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/ExecEdge.java b/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/ExecEdge.java\nindex 2f5a963894a..5f9ed745d05 100644\n--- a/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/ExecEdge.java\n+++ b/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/ExecEdge.java\n\n@@ -18,21 +18,23 @@\n \n package org.apache.flink.table.planner.plan.nodes.exec;\n \n+import org.apache.flink.util.Preconditions;\n+\n /**\n  * The representation of an edge connecting two {@link ExecNode}.\n  */\n public class ExecEdge {\n \n \tprivate final RequiredShuffle requiredShuffle;\n-\tprivate final EdgeBehavior edgeBehavior;\n+\tprivate final DamBehavior damBehavior;\n \t// the priority of this edge read by the target node\n \t// the smaller the integer, the higher the priority\n \t// same integer indicates the same priority\n \tprivate final int priority;\n \n-\tpublic ExecEdge(RequiredShuffle requiredShuffle, EdgeBehavior edgeBehavior, int priority) {\n+\tprivate ExecEdge(RequiredShuffle requiredShuffle, DamBehavior damBehavior, int priority) {\n \t\tthis.requiredShuffle = requiredShuffle;\n-\t\tthis.edgeBehavior = edgeBehavior;\n+\t\tthis.damBehavior = damBehavior;\n \t\tthis.priority = priority;\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUxMzEzMw==", "url": "https://github.com/apache/flink/pull/13625#discussion_r505513133", "bodyText": "use ExecNode instead of partition to describe the target", "author": "godfreyhe", "createdAt": "2020-10-15T12:48:32Z", "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/ExecEdge.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.plan.nodes.exec;\n+\n+/**\n+ * The representation of an edge connecting two {@link ExecNode}.\n+ */\n+public class ExecEdge {\n+\n+\tprivate final RequiredShuffle requiredShuffle;\n+\tprivate final EdgeBehavior edgeBehavior;\n+\t// the priority of this edge read by the target node\n+\t// the smaller the integer, the higher the priority\n+\t// same integer indicates the same priority\n+\tprivate final int priority;\n+\n+\tpublic ExecEdge(RequiredShuffle requiredShuffle, EdgeBehavior edgeBehavior, int priority) {\n+\t\tthis.requiredShuffle = requiredShuffle;\n+\t\tthis.edgeBehavior = edgeBehavior;\n+\t\tthis.priority = priority;\n+\t}\n+\n+\tpublic RequiredShuffle getRequiredShuffle() {\n+\t\treturn requiredShuffle;\n+\t}\n+\n+\tpublic EdgeBehavior getEdgeBehavior() {\n+\t\treturn edgeBehavior;\n+\t}\n+\n+\tpublic int getPriority() {\n+\t\treturn priority;\n+\t}\n+\n+\t/**\n+\t * The required shuffle for records when passing this edge.\n+\t */\n+\tpublic static class RequiredShuffle {\n+\n+\t\tprivate final ShuffleType type;\n+\t\tprivate final int[] keys;\n+\n+\t\tprivate RequiredShuffle(ShuffleType type, int[] keys) {\n+\t\t\tthis.type = type;\n+\t\t\tthis.keys = keys;\n+\t\t}\n+\n+\t\tpublic ShuffleType getType() {\n+\t\t\treturn type;\n+\t\t}\n+\n+\t\tpublic int[] getKeys() {\n+\t\t\treturn keys;\n+\t\t}\n+\n+\t\tpublic static RequiredShuffle any() {\n+\t\t\treturn new RequiredShuffle(ShuffleType.ANY, new int[0]);\n+\t\t}\n+\n+\t\tpublic static RequiredShuffle hash(int[] keys) {\n+\t\t\tif (keys.length == 0) {\n+\t\t\t\treturn new RequiredShuffle(ShuffleType.ANY, keys);\n+\t\t\t} else {\n+\t\t\t\treturn new RequiredShuffle(ShuffleType.HASH, keys);\n+\t\t\t}\n+\t\t}\n+\n+\t\tpublic static RequiredShuffle broadcast() {\n+\t\t\treturn new RequiredShuffle(ShuffleType.BROADCAST, new int[0]);\n+\t\t}\n+\n+\t\tpublic static RequiredShuffle singleton() {\n+\t\t\treturn new RequiredShuffle(ShuffleType.SINGLETON, new int[0]);\n+\t\t}\n+\n+\t\tpublic static RequiredShuffle unknown() {\n+\t\t\treturn new RequiredShuffle(ShuffleType.UNKNOWN, new int[0]);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Enumeration which describes the shuffle type for records when passing this edge.\n+\t */\n+\tpublic enum ShuffleType {\n+\n+\t\t/**\n+\t\t * Any type of shuffle is OK when passing through this edge.\n+\t\t */\n+\t\tANY,\n+\n+\t\t/**\n+\t\t * Records are shuffle by hash when passing through this edge.\n+\t\t */\n+\t\tHASH,\n+\n+\t\t/**\n+\t\t * Each sub-partition contains full records.", "originalCommit": "1d3dfd2b49f980db8ac9189ad4bf0d310e19468c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6006a6b99245968721e5f7cc3bd3fa2e78851c2d", "chunk": "diff --git a/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/ExecEdge.java b/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/ExecEdge.java\nindex 2f5a963894a..5f9ed745d05 100644\n--- a/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/ExecEdge.java\n+++ b/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/ExecEdge.java\n\n@@ -18,21 +18,23 @@\n \n package org.apache.flink.table.planner.plan.nodes.exec;\n \n+import org.apache.flink.util.Preconditions;\n+\n /**\n  * The representation of an edge connecting two {@link ExecNode}.\n  */\n public class ExecEdge {\n \n \tprivate final RequiredShuffle requiredShuffle;\n-\tprivate final EdgeBehavior edgeBehavior;\n+\tprivate final DamBehavior damBehavior;\n \t// the priority of this edge read by the target node\n \t// the smaller the integer, the higher the priority\n \t// same integer indicates the same priority\n \tprivate final int priority;\n \n-\tpublic ExecEdge(RequiredShuffle requiredShuffle, EdgeBehavior edgeBehavior, int priority) {\n+\tprivate ExecEdge(RequiredShuffle requiredShuffle, DamBehavior damBehavior, int priority) {\n \t\tthis.requiredShuffle = requiredShuffle;\n-\t\tthis.edgeBehavior = edgeBehavior;\n+\t\tthis.damBehavior = damBehavior;\n \t\tthis.priority = priority;\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU0MDE3OQ==", "url": "https://github.com/apache/flink/pull/13625#discussion_r505540179", "bodyText": "EdgeDamBehavior ?", "author": "godfreyhe", "createdAt": "2020-10-15T13:26:33Z", "path": "flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/ExecEdge.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.planner.plan.nodes.exec;\n+\n+/**\n+ * The representation of an edge connecting two {@link ExecNode}.\n+ */\n+public class ExecEdge {\n+\n+\tprivate final RequiredShuffle requiredShuffle;\n+\tprivate final EdgeBehavior edgeBehavior;\n+\t// the priority of this edge read by the target node\n+\t// the smaller the integer, the higher the priority\n+\t// same integer indicates the same priority\n+\tprivate final int priority;\n+\n+\tpublic ExecEdge(RequiredShuffle requiredShuffle, EdgeBehavior edgeBehavior, int priority) {\n+\t\tthis.requiredShuffle = requiredShuffle;\n+\t\tthis.edgeBehavior = edgeBehavior;\n+\t\tthis.priority = priority;\n+\t}\n+\n+\tpublic RequiredShuffle getRequiredShuffle() {\n+\t\treturn requiredShuffle;\n+\t}\n+\n+\tpublic EdgeBehavior getEdgeBehavior() {\n+\t\treturn edgeBehavior;\n+\t}\n+\n+\tpublic int getPriority() {\n+\t\treturn priority;\n+\t}\n+\n+\t/**\n+\t * The required shuffle for records when passing this edge.\n+\t */\n+\tpublic static class RequiredShuffle {\n+\n+\t\tprivate final ShuffleType type;\n+\t\tprivate final int[] keys;\n+\n+\t\tprivate RequiredShuffle(ShuffleType type, int[] keys) {\n+\t\t\tthis.type = type;\n+\t\t\tthis.keys = keys;\n+\t\t}\n+\n+\t\tpublic ShuffleType getType() {\n+\t\t\treturn type;\n+\t\t}\n+\n+\t\tpublic int[] getKeys() {\n+\t\t\treturn keys;\n+\t\t}\n+\n+\t\tpublic static RequiredShuffle any() {\n+\t\t\treturn new RequiredShuffle(ShuffleType.ANY, new int[0]);\n+\t\t}\n+\n+\t\tpublic static RequiredShuffle hash(int[] keys) {\n+\t\t\tif (keys.length == 0) {\n+\t\t\t\treturn new RequiredShuffle(ShuffleType.ANY, keys);\n+\t\t\t} else {\n+\t\t\t\treturn new RequiredShuffle(ShuffleType.HASH, keys);\n+\t\t\t}\n+\t\t}\n+\n+\t\tpublic static RequiredShuffle broadcast() {\n+\t\t\treturn new RequiredShuffle(ShuffleType.BROADCAST, new int[0]);\n+\t\t}\n+\n+\t\tpublic static RequiredShuffle singleton() {\n+\t\t\treturn new RequiredShuffle(ShuffleType.SINGLETON, new int[0]);\n+\t\t}\n+\n+\t\tpublic static RequiredShuffle unknown() {\n+\t\t\treturn new RequiredShuffle(ShuffleType.UNKNOWN, new int[0]);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Enumeration which describes the shuffle type for records when passing this edge.\n+\t */\n+\tpublic enum ShuffleType {\n+\n+\t\t/**\n+\t\t * Any type of shuffle is OK when passing through this edge.\n+\t\t */\n+\t\tANY,\n+\n+\t\t/**\n+\t\t * Records are shuffle by hash when passing through this edge.\n+\t\t */\n+\t\tHASH,\n+\n+\t\t/**\n+\t\t * Each sub-partition contains full records.\n+\t\t */\n+\t\tBROADCAST,\n+\n+\t\t/**\n+\t\t * The parallelism of the target node must be 1.\n+\t\t */\n+\t\tSINGLETON,\n+\n+\t\t/**\n+\t\t * Unknown shuffle type, will be filled out in the future.\n+\t\t */\n+\t\tUNKNOWN\n+\t}\n+\n+\t/**\n+\t * Enumeration which describes how an output record from the source node\n+\t * may trigger the output of the target node.\n+\t */\n+\tpublic enum EdgeBehavior {", "originalCommit": "1d3dfd2b49f980db8ac9189ad4bf0d310e19468c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA1NDYxOQ==", "url": "https://github.com/apache/flink/pull/13625#discussion_r506054619", "bodyText": "DamBehavior seems to be a better name. This is an inner class so we do not need to worry that this class might be confused with the DamBehavior in runtime.", "author": "tsreaper", "createdAt": "2020-10-16T05:08:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTU0MDE3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "6006a6b99245968721e5f7cc3bd3fa2e78851c2d", "chunk": "diff --git a/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/ExecEdge.java b/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/ExecEdge.java\nindex 2f5a963894a..5f9ed745d05 100644\n--- a/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/ExecEdge.java\n+++ b/flink-table/flink-table-planner-blink/src/main/java/org/apache/flink/table/planner/plan/nodes/exec/ExecEdge.java\n\n@@ -18,21 +18,23 @@\n \n package org.apache.flink.table.planner.plan.nodes.exec;\n \n+import org.apache.flink.util.Preconditions;\n+\n /**\n  * The representation of an edge connecting two {@link ExecNode}.\n  */\n public class ExecEdge {\n \n \tprivate final RequiredShuffle requiredShuffle;\n-\tprivate final EdgeBehavior edgeBehavior;\n+\tprivate final DamBehavior damBehavior;\n \t// the priority of this edge read by the target node\n \t// the smaller the integer, the higher the priority\n \t// same integer indicates the same priority\n \tprivate final int priority;\n \n-\tpublic ExecEdge(RequiredShuffle requiredShuffle, EdgeBehavior edgeBehavior, int priority) {\n+\tprivate ExecEdge(RequiredShuffle requiredShuffle, DamBehavior damBehavior, int priority) {\n \t\tthis.requiredShuffle = requiredShuffle;\n-\t\tthis.edgeBehavior = edgeBehavior;\n+\t\tthis.damBehavior = damBehavior;\n \t\tthis.priority = priority;\n \t}\n \n"}}, {"oid": "27bf96c7efa7327dd35a58aeacfabdd12c33b216", "url": "https://github.com/apache/flink/commit/27bf96c7efa7327dd35a58aeacfabdd12c33b216", "message": "[FLINK-19623][table-planner-blink] Introduce ExecEdge to describe information on input edges for ExecNode", "committedDate": "2020-10-19T03:39:14Z", "type": "commit"}, {"oid": "6012feb56e556606391eb81c2a0bf7c679405f9c", "url": "https://github.com/apache/flink/commit/6012feb56e556606391eb81c2a0bf7c679405f9c", "message": "[fix] Fix scalastyle", "committedDate": "2020-10-19T03:39:14Z", "type": "commit"}, {"oid": "6006a6b99245968721e5f7cc3bd3fa2e78851c2d", "url": "https://github.com/apache/flink/commit/6006a6b99245968721e5f7cc3bd3fa2e78851c2d", "message": "[fix] Fix comments", "committedDate": "2020-10-19T03:39:14Z", "type": "commit"}, {"oid": "890b235a6e83e5d1a8da263b46ee7806e049aa10", "url": "https://github.com/apache/flink/commit/890b235a6e83e5d1a8da263b46ee7806e049aa10", "message": "[fix] Add comments on RequiredShuffle.unknown()", "committedDate": "2020-10-19T03:39:14Z", "type": "commit"}, {"oid": "439f2ce1af9395549218913c1774ce4351160121", "url": "https://github.com/apache/flink/commit/439f2ce1af9395549218913c1774ce4351160121", "message": "[fix] Remove unused import", "committedDate": "2020-10-19T03:39:14Z", "type": "commit"}, {"oid": "f190d98cb57794be7ec0ddf92feb1a32a07e783f", "url": "https://github.com/apache/flink/commit/f190d98cb57794be7ec0ddf92feb1a32a07e783f", "message": "[fix] Fix comments", "committedDate": "2020-10-19T03:39:14Z", "type": "commit"}, {"oid": "741d91fc746bf5a05bf1ddc6f0e88e3fab3fefd2", "url": "https://github.com/apache/flink/commit/741d91fc746bf5a05bf1ddc6f0e88e3fab3fefd2", "message": "[fix] Fix comments and rebase", "committedDate": "2020-10-19T04:44:41Z", "type": "commit"}, {"oid": "193e9a611b030c9809eabeb057a31bce9b22b151", "url": "https://github.com/apache/flink/commit/193e9a611b030c9809eabeb057a31bce9b22b151", "message": "[fix] Fix comments", "committedDate": "2020-10-19T07:06:46Z", "type": "commit"}, {"oid": "56fa69f06d5d075aff0ceb8cb721fe41eb3f89ee", "url": "https://github.com/apache/flink/commit/56fa69f06d5d075aff0ceb8cb721fe41eb3f89ee", "message": "[fix] Fix failed tests", "committedDate": "2020-10-19T08:44:00Z", "type": "commit"}]}