{"pr_number": 13562, "pr_title": "[FLINK-18662][metrics][checkpointing] Provide processed/persisted bytes metrics and update alignment time metric.", "pr_createdAt": "2020-10-08T12:52:21Z", "pr_url": "https://github.com/apache/flink/pull/13562", "timeline": [{"oid": "5e969c447dc974811f30315ad75c450832e48c96", "url": "https://github.com/apache/flink/commit/5e969c447dc974811f30315ad75c450832e48c96", "message": "[FLINK-18662][docs][metrics] Update the metrics documentation to reflect current state.", "committedDate": "2020-10-08T12:59:46Z", "type": "forcePushed"}, {"oid": "e60b28287696df3780e6aff0a61b6e324a344373", "url": "https://github.com/apache/flink/commit/e60b28287696df3780e6aff0a61b6e324a344373", "message": "[FLINK-18662][docs][metrics] Update the metrics documentation to reflect current state.", "committedDate": "2020-10-08T13:21:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyMTU4NA==", "url": "https://github.com/apache/flink/pull/13562#discussion_r501721584", "bodyText": "Is that change really necessary? Javadoc of Executor could explicitly states that this is thread-independent:\n\nAn object that executes submitted Runnable tasks. This interface provides a way of decoupling task submission from the mechanics of how each task will be run, including details of thread use, scheduling, etc. An Executor is normally used instead of explicitly creating threads\n\nSo I'd say it's async by nature.", "author": "AHeise", "createdAt": "2020-10-08T13:30:13Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorImpl.java", "diffHunk": "@@ -76,7 +76,7 @@\n \n \tprivate final CachingCheckpointStorageWorkerView checkpointStorage;\n \tprivate final String taskName;\n-\tprivate final ExecutorService executorService;", "originalCommit": "d755319b4c93305096b2f0854f1e30731729a121", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg0NTcxNw==", "url": "https://github.com/apache/flink/pull/13562#discussion_r501845717", "bodyText": "Hmmm, I was referring to AsyncCheckpointRunnable. I will rename it maybe to asyncOperationsThreadPool to make it compliant with the org.apache.flink.streaming.runtime.tasks.StreamTask#asyncOperationsThreadPool", "author": "pnowojski", "createdAt": "2020-10-08T16:16:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyMTU4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU2NTU5MQ==", "url": "https://github.com/apache/flink/pull/13562#discussion_r502565591", "bodyText": "Okay, that's better, although I dislike ThreadPool suffix (too technical but in reality it's also only one thread). But that's a nit now.", "author": "AHeise", "createdAt": "2020-10-09T17:10:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyMTU4NA=="}], "type": "inlineReview", "revised_code": {"commit": "bb689c444aea5e6480635ce6a5e976ff6b8169d5", "chunk": "diff --git a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorImpl.java b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorImpl.java\nindex 628e7249023..c36467d27ca 100644\n--- a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorImpl.java\n+++ b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/SubtaskCheckpointCoordinatorImpl.java\n\n@@ -76,7 +76,7 @@ class SubtaskCheckpointCoordinatorImpl implements SubtaskCheckpointCoordinator {\n \n \tprivate final CachingCheckpointStorageWorkerView checkpointStorage;\n \tprivate final String taskName;\n-\tprivate final ExecutorService asyncExecutorService;\n+\tprivate final ExecutorService asyncOperationsThreadPool;\n \tprivate final Environment env;\n \tprivate final AsyncExceptionHandler asyncExceptionHandler;\n \tprivate final ChannelStateWriter channelStateWriter;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyMjEzNQ==", "url": "https://github.com/apache/flink/pull/13562#discussion_r501722135", "bodyText": "\ud83d\udc4d", "author": "AHeise", "createdAt": "2020-10-08T13:31:01Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/AsyncCheckpointRunnable.java", "diffHunk": "@@ -90,6 +90,11 @@ public boolean isRunning() {\n \n \t@Override\n \tpublic void run() {\n+\t\tfinal long asyncStartNanos = System.nanoTime();\n+\t\tfinal long asyncStartDelayMillis = (asyncStartNanos - asyncConstructionNanos) / 1_000_000L;\n+\t\tLOG.debug(\"{} - started executing asynchronous part of checkpoint {}. Asynchronous start delay: {} ms\",", "originalCommit": "7df37e53bbf33d54ec22f278e9bbb1ea17f4c747", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb689c444aea5e6480635ce6a5e976ff6b8169d5", "chunk": "diff --git a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/AsyncCheckpointRunnable.java b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/AsyncCheckpointRunnable.java\nindex 63ed7b5cbf2..b5c35b57930 100644\n--- a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/AsyncCheckpointRunnable.java\n+++ b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/AsyncCheckpointRunnable.java\n\n@@ -97,11 +100,13 @@ final class AsyncCheckpointRunnable implements Runnable, Closeable {\n \n \t\tFileSystemSafetyNet.initializeSafetyNetForThread();\n \t\ttry {\n+\n \t\t\tregisterConsumer.accept(this);\n \n \t\t\tTaskStateSnapshot jobManagerTaskOperatorSubtaskStates = new TaskStateSnapshot(operatorSnapshotsInProgress.size());\n \t\t\tTaskStateSnapshot localTaskOperatorSubtaskStates = new TaskStateSnapshot(operatorSnapshotsInProgress.size());\n \n+\t\t\tlong bytesPersistedDuringAlignment = 0;\n \t\t\tfor (Map.Entry<OperatorID, OperatorSnapshotFutures> entry : operatorSnapshotsInProgress.entrySet()) {\n \n \t\t\t\tOperatorID operatorID = entry.getKey();\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyNzk4MQ==", "url": "https://github.com/apache/flink/pull/13562#discussion_r501727981", "bodyText": "I'd go with debug", "author": "AHeise", "createdAt": "2020-10-08T13:39:02Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointedInputGate.java", "diffHunk": "@@ -97,8 +104,13 @@ private void processPriorityEvents() throws IOException, InterruptedException {\n \n \tprivate void waitForPriorityEvents(InputGate inputGate, MailboxExecutor mailboxExecutor) {\n \t\tfinal CompletableFuture<?> priorityEventAvailableFuture = inputGate.getPriorityEventAvailableFuture();\n-\t\tpriorityEventAvailableFuture.thenRun(() ->\n-\t\t\tmailboxExecutor.execute(this::processPriorityEvents, \"process priority event @ gate %s\", inputGate));\n+\t\tFutureUtils.assertNoException(priorityEventAvailableFuture.thenRun(() -> {\n+\t\t\ttry {\n+\t\t\t\tmailboxExecutor.execute(this::processPriorityEvents, \"process priority event @ gate %s\", inputGate);\n+\t\t\t} catch (RejectedExecutionException ex) {\n+\t\t\t\tLOG.info(\"Ignored RejectedExecutionException in CheckpointedInputGate.waitForPriorityEvents\");", "originalCommit": "56ea0975016c7a531dd80571c1d63e1e530cdda1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb689c444aea5e6480635ce6a5e976ff6b8169d5", "chunk": "diff --git a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointedInputGate.java b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointedInputGate.java\nindex 85e52758845..ff9621d2f0c 100644\n--- a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointedInputGate.java\n+++ b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointedInputGate.java\n\n@@ -104,11 +104,11 @@ public class CheckpointedInputGate implements PullingAsyncDataInput<BufferOrEven\n \n \tprivate void waitForPriorityEvents(InputGate inputGate, MailboxExecutor mailboxExecutor) {\n \t\tfinal CompletableFuture<?> priorityEventAvailableFuture = inputGate.getPriorityEventAvailableFuture();\n-\t\tFutureUtils.assertNoException(priorityEventAvailableFuture.thenRun(() -> {\n+\t\tassertNoException(priorityEventAvailableFuture.thenRun(() -> {\n \t\t\ttry {\n \t\t\t\tmailboxExecutor.execute(this::processPriorityEvents, \"process priority event @ gate %s\", inputGate);\n \t\t\t} catch (RejectedExecutionException ex) {\n-\t\t\t\tLOG.info(\"Ignored RejectedExecutionException in CheckpointedInputGate.waitForPriorityEvents\");\n+\t\t\t\tLOG.debug(\"Ignored RejectedExecutionException in CheckpointedInputGate.waitForPriorityEvents\");\n \t\t\t}\n \t\t}));\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyODIxNA==", "url": "https://github.com/apache/flink/pull/13562#discussion_r501728214", "bodyText": "static import for consistency?", "author": "AHeise", "createdAt": "2020-10-08T13:39:19Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointedInputGate.java", "diffHunk": "@@ -97,8 +104,13 @@ private void processPriorityEvents() throws IOException, InterruptedException {\n \n \tprivate void waitForPriorityEvents(InputGate inputGate, MailboxExecutor mailboxExecutor) {\n \t\tfinal CompletableFuture<?> priorityEventAvailableFuture = inputGate.getPriorityEventAvailableFuture();\n-\t\tpriorityEventAvailableFuture.thenRun(() ->\n-\t\t\tmailboxExecutor.execute(this::processPriorityEvents, \"process priority event @ gate %s\", inputGate));\n+\t\tFutureUtils.assertNoException(priorityEventAvailableFuture.thenRun(() -> {", "originalCommit": "56ea0975016c7a531dd80571c1d63e1e530cdda1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb689c444aea5e6480635ce6a5e976ff6b8169d5", "chunk": "diff --git a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointedInputGate.java b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointedInputGate.java\nindex 85e52758845..ff9621d2f0c 100644\n--- a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointedInputGate.java\n+++ b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointedInputGate.java\n\n@@ -104,11 +104,11 @@ public class CheckpointedInputGate implements PullingAsyncDataInput<BufferOrEven\n \n \tprivate void waitForPriorityEvents(InputGate inputGate, MailboxExecutor mailboxExecutor) {\n \t\tfinal CompletableFuture<?> priorityEventAvailableFuture = inputGate.getPriorityEventAvailableFuture();\n-\t\tFutureUtils.assertNoException(priorityEventAvailableFuture.thenRun(() -> {\n+\t\tassertNoException(priorityEventAvailableFuture.thenRun(() -> {\n \t\t\ttry {\n \t\t\t\tmailboxExecutor.execute(this::processPriorityEvents, \"process priority event @ gate %s\", inputGate);\n \t\t\t} catch (RejectedExecutionException ex) {\n-\t\t\t\tLOG.info(\"Ignored RejectedExecutionException in CheckpointedInputGate.waitForPriorityEvents\");\n+\t\t\t\tLOG.debug(\"Ignored RejectedExecutionException in CheckpointedInputGate.waitForPriorityEvents\");\n \t\t\t}\n \t\t}));\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyODc1Nw==", "url": "https://github.com/apache/flink/pull/13562#discussion_r501728757", "bodyText": "commit message: [task/network]?", "author": "AHeise", "createdAt": "2020-10-08T13:40:01Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/io/network/buffer/LocalBufferPool.java", "diffHunk": "@@ -33,6 +33,7 @@\n import java.util.concurrent.CompletableFuture;", "originalCommit": "56ea0975016c7a531dd80571c1d63e1e530cdda1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b929c43d11121772599648bc6d0b584782a4d73c", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/io/network/buffer/LocalBufferPool.java b/flink-runtime/src/main/java/org/apache/flink/runtime/io/network/buffer/LocalBufferPool.java\nindex 062e871e4ae..4e45be7acb8 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/io/network/buffer/LocalBufferPool.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/io/network/buffer/LocalBufferPool.java\n\n@@ -33,7 +33,6 @@ import java.util.ArrayDeque;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.ExecutionException;\n \n-import static org.apache.flink.runtime.concurrent.FutureUtils.assertNoException;\n import static org.apache.flink.util.Preconditions.checkArgument;\n import static org.apache.flink.util.Preconditions.checkState;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyOTQxMQ==", "url": "https://github.com/apache/flink/pull/13562#discussion_r501729411", "bodyText": "\ud83d\udc4d . Should also make debugging easier as size ~ sequence number.", "author": "AHeise", "createdAt": "2020-10-08T13:40:54Z", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAlignerTest.java", "diffHunk": "@@ -863,19 +860,11 @@ private static BufferOrEvent createCancellationBarrier(long checkpointId, int ch\n \n \tprivate static BufferOrEvent createBuffer(int channel) {\n \t\tfinal int size = sizeCounter++;\n-\t\tbyte[] bytes = new byte[size];\n-\t\tRND.nextBytes(bytes);\n-\n-\t\tMemorySegment memory = MemorySegmentFactory.allocateUnpooledSegment(PAGE_SIZE);\n-\t\tmemory.put(0, bytes);\n-\n-\t\tBuffer buf = new NetworkBuffer(memory, FreeingBufferRecycler.INSTANCE);\n-\t\tbuf.setSize(size);\n-\n-\t\t// retain an additional time so it does not get disposed after being read by the input gate\n-\t\tbuf.retainBuffer();\n+\t\treturn createBuffer(channel, size);", "originalCommit": "74fac5278c3c78523fb69c82be0123fc542e17e0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb689c444aea5e6480635ce6a5e976ff6b8169d5", "chunk": "diff --git a/flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAlignerTest.java b/flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAlignerTest.java\nindex a466733990f..8e08b024f48 100644\n--- a/flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAlignerTest.java\n+++ b/flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAlignerTest.java\n\n@@ -863,7 +950,7 @@ public class CheckpointBarrierAlignerTest {\n \t\treturn createBuffer(channel, size);\n \t}\n \n-\tprivate static BufferOrEvent createBuffer(int channel, int size) {\n+\tstatic BufferOrEvent createBuffer(int channel, int size) {\n \t\treturn new BufferOrEvent(TestBufferFactory.createBuffer(size), new InputChannelInfo(0, channel));\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTczMDQ0OQ==", "url": "https://github.com/apache/flink/pull/13562#discussion_r501730449", "bodyText": "Maybe it should be put in top level and used by both tests? (So just one handler instead of 2)", "author": "AHeise", "createdAt": "2020-10-08T13:42:13Z", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnalignerTest.java", "diffHunk": "@@ -720,54 +720,17 @@ private CheckpointBarrier buildCheckpointBarrier(long id) {\n \t/**\n \t * The invokable handler used for triggering checkpoint and validation.\n \t */\n-\tprivate class ValidatingCheckpointHandler extends AbstractInvokable {\n-\n-\t\tprivate long nextExpectedCheckpointId;\n-\n-\t\tprivate long lastCanceledCheckpointId;\n+\tstatic class ValidatingCheckpointHandler extends CheckpointBarrierAlignerTest.ValidatingCheckpointHandler {", "originalCommit": "dee8fc74a69e952f9e6979ce93f038b7a02aaab2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg1MTUxOQ==", "url": "https://github.com/apache/flink/pull/13562#discussion_r501851519", "bodyText": "This handler works a little bit differently, so it must stay here. I can pull the CheckpointBarrierAlignerTest.ValidatingCheckpointHandler up.", "author": "pnowojski", "createdAt": "2020-10-08T16:24:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTczMDQ0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "bb689c444aea5e6480635ce6a5e976ff6b8169d5", "chunk": "diff --git a/flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnalignerTest.java b/flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnalignerTest.java\nindex 1b001bbf43f..c26b12f9b0d 100644\n--- a/flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnalignerTest.java\n+++ b/flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnalignerTest.java\n\n@@ -720,7 +738,7 @@ public class CheckpointBarrierUnalignerTest {\n \t/**\n \t * The invokable handler used for triggering checkpoint and validation.\n \t */\n-\tstatic class ValidatingCheckpointHandler extends CheckpointBarrierAlignerTest.ValidatingCheckpointHandler {\n+\tstatic class ValidatingCheckpointHandler extends org.apache.flink.streaming.runtime.io.ValidatingCheckpointHandler {\n \n \t\tpublic ValidatingCheckpointHandler(long nextExpectedCheckpointId) {\n \t\t\tsuper(nextExpectedCheckpointId);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTczMTM2Ng==", "url": "https://github.com/apache/flink/pull/13562#discussion_r501731366", "bodyText": "\ud83d\udc4d to using builder pattern.", "author": "AHeise", "createdAt": "2020-10-08T13:43:29Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointMetricsBuilder.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.runtime.checkpoint;\n+\n+import javax.annotation.concurrent.NotThreadSafe;\n+\n+/**\n+ * A builder for {@link CheckpointMetrics}.\n+ *\n+ * <p>This class is not thread safe, but parts of it can actually be used from different threads.\n+ */\n+@NotThreadSafe\n+public class CheckpointMetricsBuilder {", "originalCommit": "5ebc2640ccf4ba7a632a3580fee3718ae5695d3a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb689c444aea5e6480635ce6a5e976ff6b8169d5", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointMetricsBuilder.java b/flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointMetricsBuilder.java\nindex 28321ea400d..27b467ad077 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointMetricsBuilder.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointMetricsBuilder.java\n\n@@ -18,8 +18,15 @@\n \n package org.apache.flink.runtime.checkpoint;\n \n+import org.apache.flink.runtime.concurrent.FutureUtils;\n+\n import javax.annotation.concurrent.NotThreadSafe;\n \n+import java.util.concurrent.CompletableFuture;\n+\n+import static org.apache.flink.runtime.concurrent.FutureUtils.getWithoutException;\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n /**\n  * A builder for {@link CheckpointMetrics}.\n  *\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTczMTk1NQ==", "url": "https://github.com/apache/flink/pull/13562#discussion_r501731955", "bodyText": "@ThreadSafe?", "author": "AHeise", "createdAt": "2020-10-08T13:44:17Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointMetrics.java", "diffHunk": "@@ -31,68 +31,49 @@\n \tprivate static final long serialVersionUID = 1L;", "originalCommit": "5ebc2640ccf4ba7a632a3580fee3718ae5695d3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg2NDA4Mg==", "url": "https://github.com/apache/flink/pull/13562#discussion_r501864082", "bodyText": "It happens to be (as immutable object), but I would rather avoid giving contract for that.", "author": "pnowojski", "createdAt": "2020-10-08T16:45:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTczMTk1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "bb689c444aea5e6480635ce6a5e976ff6b8169d5", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointMetrics.java b/flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointMetrics.java\nindex 12c7b35d2a8..36cb3646021 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointMetrics.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointMetrics.java\n\n@@ -30,6 +30,10 @@ public class CheckpointMetrics implements Serializable {\n \n \tprivate static final long serialVersionUID = 1L;\n \n+\tprivate final long bytesProcessedDuringAlignment;\n+\n+\tprivate final long bytesPersistedDuringAlignment;\n+\n \t/** The duration (in nanoseconds) that the stream alignment for the checkpoint took. */\n \tprivate final long alignmentDurationNanos;\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTczMjY4NQ==", "url": "https://github.com/apache/flink/pull/13562#discussion_r501732685", "bodyText": "CheckpointMetrics -> CheckpointMetricsBuilder?", "author": "AHeise", "createdAt": "2020-10-08T13:45:12Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/AsyncCheckpointRunnable.java", "diffHunk": "@@ -268,4 +271,22 @@ private void logFailedCleanupAttempt() {\n \t\t\tcheckpointMetaData.getCheckpointId());\n \t}\n \n+\t/**\n+\t * Helper class that allows to calculate metrics in the task and update/report them in\n+\t * {@link AsyncCheckpointRunnable}. For example it allows to update {@link CheckpointMetrics}", "originalCommit": "5ebc2640ccf4ba7a632a3580fee3718ae5695d3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ5NDM2OQ==", "url": "https://github.com/apache/flink/pull/13562#discussion_r502494369", "bodyText": "Ops, that's a dead/left over code. Removed.", "author": "pnowojski", "createdAt": "2020-10-09T15:05:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTczMjY4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "389cbc085474545ea3db19bb0b5769eebefa2bdc", "chunk": "diff --git a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/AsyncCheckpointRunnable.java b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/AsyncCheckpointRunnable.java\nindex 351d11034d8..3679b68f67b 100644\n--- a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/AsyncCheckpointRunnable.java\n+++ b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/AsyncCheckpointRunnable.java\n\n@@ -270,23 +273,4 @@ final class AsyncCheckpointRunnable implements Runnable, Closeable {\n \t\t\ttaskName,\n \t\t\tcheckpointMetaData.getCheckpointId());\n \t}\n-\n-\t/**\n-\t * Helper class that allows to calculate metrics in the task and update/report them in\n-\t * {@link AsyncCheckpointRunnable}. For example it allows to update {@link CheckpointMetrics}\n-\t * after construction of the {@link AsyncCheckpointRunnable}.\n-\t */\n-\tpublic static class TaskToAsyncCheckpointMetricsReporter {\n-\t\tprivate final CompletableFuture<Long> alignmentDurationNanos = new CompletableFuture<>();\n-\n-\t\tpublic long getAlignmentDurationNanos() {\n-\t\t\tcheckState(alignmentDurationNanos.isDone());\n-\t\t\treturn FutureUtils.getWithoutException(alignmentDurationNanos);\n-\t\t}\n-\n-\t\tpublic void setAlignmentDurationNanos(long value) {\n-\t\t\tcheckState(!alignmentDurationNanos.isDone());\n-\t\t\talignmentDurationNanos.complete(value);\n-\t\t}\n-\t}\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc0MDAzOQ==", "url": "https://github.com/apache/flink/pull/13562#discussion_r501740039", "bodyText": "Isn't that potentially swallowing exceptions again?", "author": "AHeise", "createdAt": "2020-10-08T13:54:39Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointMetricsBuilder.java", "diffHunk": "@@ -69,8 +86,9 @@ public long getCheckpointStartDelayNanos() {\n \t}\n \n \tpublic CheckpointMetrics build() {\n+\t\tcheckState(alignmentDurationNanos.isDone());\n \t\treturn new CheckpointMetrics(\n-\t\t\talignmentDurationNanos,\n+\t\t\tFutureUtils.getWithoutException(alignmentDurationNanos),", "originalCommit": "d383ad55e608bb37f6a05c67ef62bb20c1f2f221", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg2NjQ1OA==", "url": "https://github.com/apache/flink/pull/13562#discussion_r501866458", "bodyText": "Theoretically. In practise it can not happen, but I've changed the checkState to:\n\t\tcheckState(alignmentDurationNanos.isDone() && !alignmentDurationNanos.isCompletedExceptionally());", "author": "pnowojski", "createdAt": "2020-10-08T16:49:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc0MDAzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjIyNzUwNw==", "url": "https://github.com/apache/flink/pull/13562#discussion_r502227507", "bodyText": "That's a good idea. We could move this check to some FutureUtils#isCompletedNormally, it would also be good to chain the original exception to the checkstate there.", "author": "AHeise", "createdAt": "2020-10-09T07:03:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc0MDAzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "bb689c444aea5e6480635ce6a5e976ff6b8169d5", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointMetricsBuilder.java b/flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointMetricsBuilder.java\nindex 37534339dcb..27b467ad077 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointMetricsBuilder.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointMetricsBuilder.java\n\n@@ -86,9 +107,12 @@ public class CheckpointMetricsBuilder {\n \t}\n \n \tpublic CheckpointMetrics build() {\n-\t\tcheckState(alignmentDurationNanos.isDone());\n+\t\tcheckState(alignmentDurationNanos.isDone() && !alignmentDurationNanos.isCompletedExceptionally());\n+\t\tcheckState(bytesProcessedDuringAlignment.isDone() && !bytesProcessedDuringAlignment.isCompletedExceptionally());\n \t\treturn new CheckpointMetrics(\n-\t\t\tFutureUtils.getWithoutException(alignmentDurationNanos),\n+\t\t\tgetWithoutException(bytesProcessedDuringAlignment),\n+\t\t\tbytesPersistedDuringAlignment,\n+\t\t\tgetWithoutException(alignmentDurationNanos),\n \t\t\tsyncDurationMillis,\n \t\t\tasyncDurationMillis,\n \t\t\tcheckpointStartDelayNanos);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc0MDg3Mw==", "url": "https://github.com/apache/flink/pull/13562#discussion_r501740873", "bodyText": "Again this swallows exception and if it does you get null instead of the default.", "author": "AHeise", "createdAt": "2020-10-08T13:55:41Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/concurrent/FutureUtils.java", "diffHunk": "@@ -1054,6 +1054,16 @@ public void onComplete(Throwable failure, U success) {\n \t\treturn null;\n \t}\n \n+\t/**\n+\t * @return the result of completable future, or the defaultValue if it has not yet completed.\n+\t */\n+\tpublic static <T> T getOrDefault(CompletableFuture<T> future, T defaultValue) {\n+\t\tif (future.isDone()) {\n+\t\t\treturn getWithoutException(future);", "originalCommit": "d383ad55e608bb37f6a05c67ef62bb20c1f2f221", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb689c444aea5e6480635ce6a5e976ff6b8169d5", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/concurrent/FutureUtils.java b/flink-runtime/src/main/java/org/apache/flink/runtime/concurrent/FutureUtils.java\nindex df1d8fa3062..042739b63db 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/concurrent/FutureUtils.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/concurrent/FutureUtils.java\n\n@@ -1058,7 +1058,7 @@ public class FutureUtils {\n \t * @return the result of completable future, or the defaultValue if it has not yet completed.\n \t */\n \tpublic static <T> T getOrDefault(CompletableFuture<T> future, T defaultValue) {\n-\t\tif (future.isDone()) {\n+\t\tif (future.isDone() && !future.isCompletedExceptionally()) {\n \t\t\treturn getWithoutException(future);\n \t\t}\n \t\treturn defaultValue;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc0MjI1Mg==", "url": "https://github.com/apache/flink/pull/13562#discussion_r501742252", "bodyText": "Potential NPE (fixed with proper getOrDefault).", "author": "AHeise", "createdAt": "2020-10-08T13:57:28Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierHandler.java", "diffHunk": "@@ -75,7 +86,11 @@ public void close() throws IOException {\n \tpublic abstract long getLatestCheckpointId();\n \n \tpublic long getAlignmentDurationNanos() {\n-\t\treturn 0;\n+\t\tif (startOfAlignmentTimestamp <= 0) {\n+\t\t\treturn FutureUtils.getOrDefault(latestAlignmentDurationNanos, 0L);", "originalCommit": "d383ad55e608bb37f6a05c67ef62bb20c1f2f221", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb689c444aea5e6480635ce6a5e976ff6b8169d5", "chunk": "diff --git a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierHandler.java b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierHandler.java\nindex 3b0739e33fa..4662d320cd4 100644\n--- a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierHandler.java\n+++ b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierHandler.java\n\n@@ -86,10 +94,10 @@ public abstract class CheckpointBarrierHandler implements Closeable {\n \tpublic abstract long getLatestCheckpointId();\n \n \tpublic long getAlignmentDurationNanos() {\n-\t\tif (startOfAlignmentTimestamp <= 0) {\n-\t\t\treturn FutureUtils.getOrDefault(latestAlignmentDurationNanos, 0L);\n-\t\t} else {\n+\t\tif (isDuringAlignment()) {\n \t\t\treturn System.nanoTime() - startOfAlignmentTimestamp;\n+\t\t} else {\n+\t\t\treturn FutureUtils.getOrDefault(latestAlignmentDurationNanos, 0L);\n \t\t}\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc0NzQyOQ==", "url": "https://github.com/apache/flink/pull/13562#discussion_r501747429", "bodyText": "System.nanoTime could potentially return negative values and the difference is still plausible. I'd probably just use a specific tag value (no need to encode unset as null).", "author": "AHeise", "createdAt": "2020-10-08T14:04:14Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierHandler.java", "diffHunk": "@@ -75,7 +86,11 @@ public void close() throws IOException {\n \tpublic abstract long getLatestCheckpointId();\n \n \tpublic long getAlignmentDurationNanos() {\n-\t\treturn 0;\n+\t\tif (startOfAlignmentTimestamp <= 0) {", "originalCommit": "d383ad55e608bb37f6a05c67ef62bb20c1f2f221", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb689c444aea5e6480635ce6a5e976ff6b8169d5", "chunk": "diff --git a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierHandler.java b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierHandler.java\nindex 3b0739e33fa..4662d320cd4 100644\n--- a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierHandler.java\n+++ b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierHandler.java\n\n@@ -86,10 +94,10 @@ public abstract class CheckpointBarrierHandler implements Closeable {\n \tpublic abstract long getLatestCheckpointId();\n \n \tpublic long getAlignmentDurationNanos() {\n-\t\tif (startOfAlignmentTimestamp <= 0) {\n-\t\t\treturn FutureUtils.getOrDefault(latestAlignmentDurationNanos, 0L);\n-\t\t} else {\n+\t\tif (isDuringAlignment()) {\n \t\t\treturn System.nanoTime() - startOfAlignmentTimestamp;\n+\t\t} else {\n+\t\t\treturn FutureUtils.getOrDefault(latestAlignmentDurationNanos, 0L);\n \t\t}\n \t}\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc1MTc0Mw==", "url": "https://github.com/apache/flink/pull/13562#discussion_r501751743", "bodyText": "again could be negative.", "author": "AHeise", "createdAt": "2020-10-08T14:09:54Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierHandler.java", "diffHunk": "@@ -106,13 +121,38 @@ protected void notifyAbortOnCancellationBarrier(long checkpointId) throws IOExce\n \t}\n \n \tprotected void notifyAbort(long checkpointId, CheckpointException cause) throws IOException {\n+\t\tresetAlignment();\n \t\ttoNotifyOnCheckpoint.abortCheckpointOnBarrier(checkpointId, cause);\n \t}\n \n \tprotected void markCheckpointStart(long checkpointCreationTimestamp) {\n \t\tlatestCheckpointStartDelayNanos = 1_000_000 * Math.max(\n \t\t\t0,\n \t\t\tSystem.currentTimeMillis() - checkpointCreationTimestamp);\n+\n+\t\tresetAlignment();\n+\t\tstartOfAlignmentTimestamp = System.nanoTime();\n+\t}\n+\n+\tprotected void markAlignmentEnd() {\n+\t\tif (startOfAlignmentTimestamp > 0) {", "originalCommit": "d383ad55e608bb37f6a05c67ef62bb20c1f2f221", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb689c444aea5e6480635ce6a5e976ff6b8169d5", "chunk": "diff --git a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierHandler.java b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierHandler.java\nindex 3b0739e33fa..4662d320cd4 100644\n--- a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierHandler.java\n+++ b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierHandler.java\n\n@@ -135,7 +144,7 @@ public abstract class CheckpointBarrierHandler implements Closeable {\n \t}\n \n \tprotected void markAlignmentEnd() {\n-\t\tif (startOfAlignmentTimestamp > 0) {\n+\t\tif (isDuringAlignment()) {\n \t\t\tmarkAlignmentEnd(System.nanoTime() - startOfAlignmentTimestamp);\n \t\t}\n \t\telse {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc1MjE0Mw==", "url": "https://github.com/apache/flink/pull/13562#discussion_r501752143", "bodyText": "Extract constant and use it for field initialization and comparisons.", "author": "AHeise", "createdAt": "2020-10-08T14:10:24Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierHandler.java", "diffHunk": "@@ -106,13 +121,38 @@ protected void notifyAbortOnCancellationBarrier(long checkpointId) throws IOExce\n \t}\n \n \tprotected void notifyAbort(long checkpointId, CheckpointException cause) throws IOException {\n+\t\tresetAlignment();\n \t\ttoNotifyOnCheckpoint.abortCheckpointOnBarrier(checkpointId, cause);\n \t}\n \n \tprotected void markCheckpointStart(long checkpointCreationTimestamp) {\n \t\tlatestCheckpointStartDelayNanos = 1_000_000 * Math.max(\n \t\t\t0,\n \t\t\tSystem.currentTimeMillis() - checkpointCreationTimestamp);\n+\n+\t\tresetAlignment();\n+\t\tstartOfAlignmentTimestamp = System.nanoTime();\n+\t}\n+\n+\tprotected void markAlignmentEnd() {\n+\t\tif (startOfAlignmentTimestamp > 0) {\n+\t\t\tmarkAlignmentEnd(System.nanoTime() - startOfAlignmentTimestamp);\n+\t\t}\n+\t\telse {\n+\t\t\tmarkAlignmentEnd(0);\n+\t\t}\n+\t}\n+\n+\tprotected void markAlignmentEnd(long alignmentDuration) {\n+\t\tif (!latestAlignmentDurationNanos.isDone()) {\n+\t\t\tlatestAlignmentDurationNanos.complete(alignmentDuration);\n+\t\t}\n+\t\tstartOfAlignmentTimestamp = 0;", "originalCommit": "d383ad55e608bb37f6a05c67ef62bb20c1f2f221", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb689c444aea5e6480635ce6a5e976ff6b8169d5", "chunk": "diff --git a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierHandler.java b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierHandler.java\nindex 3b0739e33fa..4662d320cd4 100644\n--- a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierHandler.java\n+++ b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierHandler.java\n\n@@ -135,7 +144,7 @@ public abstract class CheckpointBarrierHandler implements Closeable {\n \t}\n \n \tprotected void markAlignmentEnd() {\n-\t\tif (startOfAlignmentTimestamp > 0) {\n+\t\tif (isDuringAlignment()) {\n \t\t\tmarkAlignmentEnd(System.nanoTime() - startOfAlignmentTimestamp);\n \t\t}\n \t\telse {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc1NjYxMw==", "url": "https://github.com/apache/flink/pull/13562#discussion_r501756613", "bodyText": "This method is odd: It doesn't really fit to markCheckpointStart (markAlignmentEnd() does). Maybe it should simply be called setAlignmentDuration?", "author": "AHeise", "createdAt": "2020-10-08T14:16:12Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierHandler.java", "diffHunk": "@@ -106,13 +121,38 @@ protected void notifyAbortOnCancellationBarrier(long checkpointId) throws IOExce\n \t}\n \n \tprotected void notifyAbort(long checkpointId, CheckpointException cause) throws IOException {\n+\t\tresetAlignment();\n \t\ttoNotifyOnCheckpoint.abortCheckpointOnBarrier(checkpointId, cause);\n \t}\n \n \tprotected void markCheckpointStart(long checkpointCreationTimestamp) {\n \t\tlatestCheckpointStartDelayNanos = 1_000_000 * Math.max(\n \t\t\t0,\n \t\t\tSystem.currentTimeMillis() - checkpointCreationTimestamp);\n+\n+\t\tresetAlignment();\n+\t\tstartOfAlignmentTimestamp = System.nanoTime();\n+\t}\n+\n+\tprotected void markAlignmentEnd() {\n+\t\tif (startOfAlignmentTimestamp > 0) {\n+\t\t\tmarkAlignmentEnd(System.nanoTime() - startOfAlignmentTimestamp);\n+\t\t}\n+\t\telse {\n+\t\t\tmarkAlignmentEnd(0);\n+\t\t}\n+\t}\n+\n+\tprotected void markAlignmentEnd(long alignmentDuration) {", "originalCommit": "d383ad55e608bb37f6a05c67ef62bb20c1f2f221", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3NTU3Mw==", "url": "https://github.com/apache/flink/pull/13562#discussion_r501875573", "bodyText": "but setAlignmentDuration doesn't capture the fact, that it also finishes the alignment . It might be named finishAlignmentWithDuration(duration) but I think it's better to make it consistent with the markAlignmentEnd() version. This after all ends the alignment, but it's just bypassing the System.nanoTime() - startOfAlignmentTimestamp check.", "author": "pnowojski", "createdAt": "2020-10-08T17:03:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc1NjYxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjIzMDM3Mw==", "url": "https://github.com/apache/flink/pull/13562#discussion_r502230373", "bodyText": "I see your point and would be going with the current solution, but I'd like to add one more point before that:\n\nbut setAlignmentDuration doesn't capture the fact, that it also finishes the alignment .\nThe tracker never starts an alignment and thus can't finish it. The only plausible method would be markCheckpointStart, which shouldn't fiddle with alignment times imho (which would also avoid calling setAlignmentDuration as it's 0 by default).", "author": "AHeise", "createdAt": "2020-10-09T07:10:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc1NjYxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUwNjUyNw==", "url": "https://github.com/apache/flink/pull/13562#discussion_r502506527", "bodyText": "According to now newly redefined alignmentDuration, CheckpointBarrierTracker does start the alignment. Through markCheckpointStart. Should I rename the markCheckpointStart to markAlignmentStart?", "author": "pnowojski", "createdAt": "2020-10-09T15:24:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc1NjYxMw=="}], "type": "inlineReview", "revised_code": {"commit": "bb689c444aea5e6480635ce6a5e976ff6b8169d5", "chunk": "diff --git a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierHandler.java b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierHandler.java\nindex 3b0739e33fa..4662d320cd4 100644\n--- a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierHandler.java\n+++ b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierHandler.java\n\n@@ -135,7 +144,7 @@ public abstract class CheckpointBarrierHandler implements Closeable {\n \t}\n \n \tprotected void markAlignmentEnd() {\n-\t\tif (startOfAlignmentTimestamp > 0) {\n+\t\tif (isDuringAlignment()) {\n \t\t\tmarkAlignmentEnd(System.nanoTime() - startOfAlignmentTimestamp);\n \t\t}\n \t\telse {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc1ODcyMA==", "url": "https://github.com/apache/flink/pull/13562#discussion_r501758720", "bodyText": "This looks suboptimal: markCheckpointStart calls resetAlignment which calls markAlignmentEnd(0). Then we call it again, but this time, it's completely different behavior.\nMaybe we need:\n\nmarkCheckpointStart\nmarkAlignmentStart (not for tracker just for (Un)Aligner))\nmarkAlignmentEnd (just for (Un)Aligner))\nsetAlignmentDuration (for all)", "author": "AHeise", "createdAt": "2020-10-08T14:19:04Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierTracker.java", "diffHunk": "@@ -82,7 +82,9 @@ public void processBarrier(CheckpointBarrier receivedBarrier, InputChannelInfo c\n \n \t\t// fast path for single channel trackers\n \t\tif (totalNumberOfInputChannels == 1) {\n-\t\t\tnotifyCheckpoint(receivedBarrier, 0);\n+\t\t\tmarkCheckpointStart(receivedBarrier.getTimestamp());\n+\t\t\tmarkAlignmentEnd(0);", "originalCommit": "d383ad55e608bb37f6a05c67ef62bb20c1f2f221", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg4MDgxNw==", "url": "https://github.com/apache/flink/pull/13562#discussion_r501880817", "bodyText": "I'm not sure if I'm following your suggested change? If you ignore how are those methods implemented under the hood, those calls here make sense.\nWe are firt marking start of the checkpoint, and we are marking that it finished immediately, with the duration of 0. (note that the first call is also setting the checkpointStartDelay).\nThis is the only place, where those two calls are called one beside another, if I would extracted this to a separate method, that would be a slight overkill.\nNow about how are they implemented under the hood, it's done in order to avoid a bit of code duplication.", "author": "pnowojski", "createdAt": "2020-10-08T17:12:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc1ODcyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjIzMzA3Mw==", "url": "https://github.com/apache/flink/pull/13562#discussion_r502233073", "bodyText": "I'd just decouple the two metrics of checkpoint start duration and alignment times. For tracker, there is no semantics of alignment. We have an extra call to System.nanoTime() that is completely unnecessary (here I don't worry about performance). It feels like a mismatch of abstraction. Similarly, when you optimize 1 channel cases, there is just no alignment happening, which you simulate by ending it early and explicitly overwrite the measurement.", "author": "AHeise", "createdAt": "2020-10-09T07:16:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc1ODcyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUwNzc0Mg==", "url": "https://github.com/apache/flink/pull/13562#discussion_r502507742", "bodyText": "As written above. There is alignment for tracker. We are waiting until we receive all of the checkpoint barriers, just as unaligned checkpoints are doing. Tracker just as unaligner is not blocking the input channels. The only difference is:\n\nactual checkpoint/snapshot is done at the last barrier, not the first\n\nand as a consequence of that, there is no need for in-flight data.", "author": "pnowojski", "createdAt": "2020-10-09T15:26:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc1ODcyMA=="}], "type": "inlineReview", "revised_code": {"commit": "66db0a46b9b05cb54250658b745ae5c99322c829", "chunk": "diff --git a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierTracker.java b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierTracker.java\nindex dd8151623e4..5d0580907d0 100644\n--- a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierTracker.java\n+++ b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierTracker.java\n\n@@ -82,8 +82,7 @@ public class CheckpointBarrierTracker extends CheckpointBarrierHandler {\n \n \t\t// fast path for single channel trackers\n \t\tif (totalNumberOfInputChannels == 1) {\n-\t\t\tmarkCheckpointStart(receivedBarrier.getTimestamp());\n-\t\t\tmarkAlignmentEnd(0);\n+\t\t\tmarkAlignmentStartAndEnd(receivedBarrier.getTimestamp());\n \t\t\tnotifyCheckpoint(receivedBarrier);\n \t\t\treturn;\n \t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2MTI4OQ==", "url": "https://github.com/apache/flink/pull/13562#discussion_r501761289", "bodyText": "While this is technically the correct way, it might be overengineered. I'm wonder what impact a few ns alignment has? Don't we render ms anyways?", "author": "AHeise", "createdAt": "2020-10-08T14:22:10Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnaligner.java", "diffHunk": "@@ -104,12 +104,19 @@ public void processBarrier(CheckpointBarrier barrier, InputChannelInfo channelIn\n \t\t\tfor (final CheckpointableInput input : inputs) {\n \t\t\t\tinput.checkpointStarted(barrier);\n \t\t\t}\n-\t\t\tnotifyCheckpoint(barrier, 0);\n+\t\t\tnotifyCheckpoint(barrier);\n \t\t}\n \t\tif (currentCheckpointId == barrierId) {\n \t\t\tLOG.debug(\"{}: Received barrier from channel {} @ {}.\", taskName, channelInfo, barrierId);\n \n \t\t\tif (++numBarriersReceived == numOpenChannels) {\n+\t\t\t\tif (getNumOpenChannels() > 1) {\n+\t\t\t\t\tmarkAlignmentEnd();\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\t// Make sure to report 0 for single channel case\n+\t\t\t\t\tmarkAlignmentEnd(0);", "originalCommit": "d383ad55e608bb37f6a05c67ef62bb20c1f2f221", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg4MTYzOA==", "url": "https://github.com/apache/flink/pull/13562#discussion_r501881638", "bodyText": "I would be afraid It would be confusing for the users, \"how can there be alignment with single channel?!\", if ever this happened to cause metric value to be 1ms (in case of some machine hiccup).", "author": "pnowojski", "createdAt": "2020-10-08T17:14:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2MTI4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "66db0a46b9b05cb54250658b745ae5c99322c829", "chunk": "diff --git a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnaligner.java b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnaligner.java\nindex 535737d2252..fd2e4e06334 100644\n--- a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnaligner.java\n+++ b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnaligner.java\n\n@@ -113,10 +117,6 @@ public class CheckpointBarrierUnaligner extends CheckpointBarrierHandler {\n \t\t\t\tif (getNumOpenChannels() > 1) {\n \t\t\t\t\tmarkAlignmentEnd();\n \t\t\t\t}\n-\t\t\t\telse {\n-\t\t\t\t\t// Make sure to report 0 for single channel case\n-\t\t\t\t\tmarkAlignmentEnd(0);\n-\t\t\t\t}\n \t\t\t\tallBarriersReceivedFuture.complete(null);\n \t\t\t\tresetPendingCheckpoint(barrierId);\n \t\t\t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2MzAyOQ==", "url": "https://github.com/apache/flink/pull/13562#discussion_r501763029", "bodyText": "Why is that moved down?", "author": "AHeise", "createdAt": "2020-10-08T14:24:19Z", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnalignerTest.java", "diffHunk": "@@ -236,25 +235,32 @@ public void testMetrics() throws Exception {\n \n \t\tThread.sleep(sleepTime);\n \n+\t\tlong alignmentStartNanos = System.nanoTime();\n+\n \t\taddSequence(inputGate,\n \t\t\tcreateBuffer(0, bufferSize), createBuffer(1, bufferSize), createBuffer(2, bufferSize),\n \t\t\tcreateBarrier(checkpointId, 1, checkpointBarrierCreation),\n \t\t\tcreateBuffer(0, bufferSize), createBuffer(1, bufferSize), createBuffer(2, bufferSize),\n \t\t\tcreateBarrier(checkpointId, 0),\n \t\t\tcreateBuffer(0, bufferSize), createBuffer(1, bufferSize), createBuffer(2, bufferSize));\n \n-\t\tlong startDelay = System.currentTimeMillis() - checkpointBarrierCreation;", "originalCommit": "d383ad55e608bb37f6a05c67ef62bb20c1f2f221", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUwOTIzOA==", "url": "https://github.com/apache/flink/pull/13562#discussion_r502509238", "bodyText": "ops, reverted.", "author": "pnowojski", "createdAt": "2020-10-09T15:28:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2MzAyOQ=="}], "type": "inlineReview", "revised_code": {"commit": "bb689c444aea5e6480635ce6a5e976ff6b8169d5", "chunk": "diff --git a/flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnalignerTest.java b/flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnalignerTest.java\nindex 0ca0a6b5fa2..c26b12f9b0d 100644\n--- a/flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnalignerTest.java\n+++ b/flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnalignerTest.java\n\n@@ -261,6 +261,9 @@ public class CheckpointBarrierUnalignerTest {\n \t\tassertTrue(handler.getLastAlignmentDurationNanos().isDone());\n \t\tassertThat(handler.getLastAlignmentDurationNanos().get() / 1_000_000, Matchers.greaterThanOrEqualTo(sleepTime));\n \t\tassertThat(handler.getLastAlignmentDurationNanos().get(), Matchers.lessThanOrEqualTo(alignmentDuration));\n+\n+\t\tassertTrue(handler.getLastBytesProcessedDuringAlignment().isDone());\n+\t\tassertThat(handler.getLastBytesProcessedDuringAlignment().get(), Matchers.equalTo(6L * bufferSize));\n \t}\n \n \t@Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgwNjk4Mw==", "url": "https://github.com/apache/flink/pull/13562#discussion_r501806983", "bodyText": "is(both(greaterThanOrEqualTo(sleepTime)).and(lessThanOrEqualTo(startDelay))) to show that it's a range?", "author": "AHeise", "createdAt": "2020-10-08T15:21:01Z", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierTrackerTest.java", "diffHunk": "@@ -347,9 +365,119 @@ public void testInterleavedCancellationBarriers() throws Exception {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testMetrics() throws Exception {\n+\t\tList<BufferOrEvent> output = new ArrayList<>();\n+\t\tValidatingCheckpointHandler handler = new ValidatingCheckpointHandler();\n+\t\tint numberOfChannels = 3;\n+\t\tinputGate = createCheckpointedInputGate(numberOfChannels, handler);\n+\t\tint[] sequenceNumbers = new int[numberOfChannels];\n+\n+\t\tint bufferSize = 100;\n+\t\tlong checkpointId = 1;\n+\t\tlong sleepTime = 10;\n+\n+\t\tlong checkpointBarrierCreation = System.currentTimeMillis();\n+\t\tlong alignmentStartNanos = System.nanoTime();\n+\n+\t\tThread.sleep(sleepTime);\n+\n+\t\taddSequence(\n+\t\t\tinputGate,\n+\t\t\toutput,\n+\t\t\tsequenceNumbers,\n+\t\t\tcreateBuffer(0, bufferSize), createBuffer(1, bufferSize), createBuffer(2, bufferSize),\n+\t\t\tcreateBarrier(checkpointId, 1, checkpointBarrierCreation),\n+\t\t\tcreateBuffer(0, bufferSize), createBuffer(2, bufferSize),\n+\t\t\tcreateBarrier(checkpointId, 0),\n+\t\t\tcreateBuffer(2, bufferSize));\n+\n+\t\tThread.sleep(sleepTime);\n+\n+\t\taddSequence(inputGate,\n+\t\t\toutput,\n+\t\t\tsequenceNumbers,\n+\t\t\tcreateBarrier(checkpointId, 2),\n+\t\t\tcreateBuffer(0, bufferSize), createBuffer(1, bufferSize), createBuffer(2, bufferSize),\n+\t\t\tcreateEndOfPartition(0), createEndOfPartition(1), createEndOfPartition(2));\n+\n+\t\tlong startDelay = System.currentTimeMillis() - checkpointBarrierCreation;\n+\t\tlong alignmentDuration = System.nanoTime() - alignmentStartNanos;\n+\n+\t\tassertThat(inputGate.getCheckpointStartDelayNanos() / 1_000_000, Matchers.greaterThanOrEqualTo(sleepTime));\n+\t\tassertThat(inputGate.getCheckpointStartDelayNanos() / 1_000_000, Matchers.lessThanOrEqualTo(startDelay));", "originalCommit": "d383ad55e608bb37f6a05c67ef62bb20c1f2f221", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb689c444aea5e6480635ce6a5e976ff6b8169d5", "chunk": "diff --git a/flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierTrackerTest.java b/flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierTrackerTest.java\nindex d1b0c67a58a..ce75aa8222e 100644\n--- a/flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierTrackerTest.java\n+++ b/flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierTrackerTest.java\n\n@@ -404,15 +407,13 @@ public class CheckpointBarrierTrackerTest {\n \t\tlong startDelay = System.currentTimeMillis() - checkpointBarrierCreation;\n \t\tlong alignmentDuration = System.nanoTime() - alignmentStartNanos;\n \n-\t\tassertThat(inputGate.getCheckpointStartDelayNanos() / 1_000_000, Matchers.greaterThanOrEqualTo(sleepTime));\n-\t\tassertThat(inputGate.getCheckpointStartDelayNanos() / 1_000_000, Matchers.lessThanOrEqualTo(startDelay));\n+\t\tassertThat(inputGate.getCheckpointStartDelayNanos() / 1_000_000, is(both(greaterThanOrEqualTo(sleepTime)).and(lessThanOrEqualTo(startDelay))));\n \n \t\tassertTrue(handler.getLastAlignmentDurationNanos().isDone());\n-\t\tassertThat(handler.getLastAlignmentDurationNanos().get() / 1_000_000, Matchers.greaterThanOrEqualTo(sleepTime));\n-\t\tassertThat(handler.getLastAlignmentDurationNanos().get(), Matchers.lessThanOrEqualTo(alignmentDuration));\n+\t\tassertThat(handler.getLastAlignmentDurationNanos().get() / 1_000_000, is(both(greaterThanOrEqualTo(sleepTime)).and(lessThanOrEqualTo(alignmentDuration))));\n \n-\t\tassertTrue(handler.lastBytesProcessedDuringAlignment.isDone());\n-\t\tassertThat(handler.lastBytesProcessedDuringAlignment.get(), Matchers.equalTo(3L * bufferSize));\n+\t\tassertTrue(handler.getLastBytesProcessedDuringAlignment().isDone());\n+\t\tassertThat(handler.getLastBytesProcessedDuringAlignment().get(), equalTo(3L * bufferSize));\n \t}\n \n \t@Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgwOTc0OA==", "url": "https://github.com/apache/flink/pull/13562#discussion_r501809748", "bodyText": "Are you really sure that you this changed semantics of alignment in tracker is correct? Afaik it used to 0 always.\nIf yes, I'd expect some documentation/changelog to go with that (haven't checked later commits yet). Also please add that to the commit message.", "author": "AHeise", "createdAt": "2020-10-08T15:24:40Z", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierTrackerTest.java", "diffHunk": "@@ -347,9 +365,119 @@ public void testInterleavedCancellationBarriers() throws Exception {\n \t\t}\n \t}\n \n+\t@Test\n+\tpublic void testMetrics() throws Exception {\n+\t\tList<BufferOrEvent> output = new ArrayList<>();\n+\t\tValidatingCheckpointHandler handler = new ValidatingCheckpointHandler();\n+\t\tint numberOfChannels = 3;\n+\t\tinputGate = createCheckpointedInputGate(numberOfChannels, handler);\n+\t\tint[] sequenceNumbers = new int[numberOfChannels];\n+\n+\t\tint bufferSize = 100;\n+\t\tlong checkpointId = 1;\n+\t\tlong sleepTime = 10;\n+\n+\t\tlong checkpointBarrierCreation = System.currentTimeMillis();\n+\t\tlong alignmentStartNanos = System.nanoTime();\n+\n+\t\tThread.sleep(sleepTime);\n+\n+\t\taddSequence(\n+\t\t\tinputGate,\n+\t\t\toutput,\n+\t\t\tsequenceNumbers,\n+\t\t\tcreateBuffer(0, bufferSize), createBuffer(1, bufferSize), createBuffer(2, bufferSize),\n+\t\t\tcreateBarrier(checkpointId, 1, checkpointBarrierCreation),\n+\t\t\tcreateBuffer(0, bufferSize), createBuffer(2, bufferSize),\n+\t\t\tcreateBarrier(checkpointId, 0),\n+\t\t\tcreateBuffer(2, bufferSize));\n+\n+\t\tThread.sleep(sleepTime);\n+\n+\t\taddSequence(inputGate,\n+\t\t\toutput,\n+\t\t\tsequenceNumbers,\n+\t\t\tcreateBarrier(checkpointId, 2),\n+\t\t\tcreateBuffer(0, bufferSize), createBuffer(1, bufferSize), createBuffer(2, bufferSize),\n+\t\t\tcreateEndOfPartition(0), createEndOfPartition(1), createEndOfPartition(2));\n+\n+\t\tlong startDelay = System.currentTimeMillis() - checkpointBarrierCreation;\n+\t\tlong alignmentDuration = System.nanoTime() - alignmentStartNanos;\n+\n+\t\tassertThat(inputGate.getCheckpointStartDelayNanos() / 1_000_000, Matchers.greaterThanOrEqualTo(sleepTime));\n+\t\tassertThat(inputGate.getCheckpointStartDelayNanos() / 1_000_000, Matchers.lessThanOrEqualTo(startDelay));\n+\n+\t\tassertTrue(handler.getLastAlignmentDurationNanos().isDone());\n+\t\tassertThat(handler.getLastAlignmentDurationNanos().get() / 1_000_000, Matchers.greaterThanOrEqualTo(sleepTime));", "originalCommit": "d383ad55e608bb37f6a05c67ef62bb20c1f2f221", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg4NDYwMg==", "url": "https://github.com/apache/flink/pull/13562#discussion_r501884602", "bodyText": "Yes, it's modifying the semantic of this metric. Keeping the old behaviour for CheckpointBarrierTracker doesn't make much sense, as CheckpointBarrierUnaligner behaves in this regards almost as CheckpointBarrierTracker.\nI've modified the documentation in the final commit. I think that's a good point, that we should add this to release notes. I will add this info also to the commit message.", "author": "pnowojski", "createdAt": "2020-10-08T17:18:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgwOTc0OA=="}], "type": "inlineReview", "revised_code": {"commit": "bb689c444aea5e6480635ce6a5e976ff6b8169d5", "chunk": "diff --git a/flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierTrackerTest.java b/flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierTrackerTest.java\nindex d1b0c67a58a..ce75aa8222e 100644\n--- a/flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierTrackerTest.java\n+++ b/flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierTrackerTest.java\n\n@@ -404,15 +407,13 @@ public class CheckpointBarrierTrackerTest {\n \t\tlong startDelay = System.currentTimeMillis() - checkpointBarrierCreation;\n \t\tlong alignmentDuration = System.nanoTime() - alignmentStartNanos;\n \n-\t\tassertThat(inputGate.getCheckpointStartDelayNanos() / 1_000_000, Matchers.greaterThanOrEqualTo(sleepTime));\n-\t\tassertThat(inputGate.getCheckpointStartDelayNanos() / 1_000_000, Matchers.lessThanOrEqualTo(startDelay));\n+\t\tassertThat(inputGate.getCheckpointStartDelayNanos() / 1_000_000, is(both(greaterThanOrEqualTo(sleepTime)).and(lessThanOrEqualTo(startDelay))));\n \n \t\tassertTrue(handler.getLastAlignmentDurationNanos().isDone());\n-\t\tassertThat(handler.getLastAlignmentDurationNanos().get() / 1_000_000, Matchers.greaterThanOrEqualTo(sleepTime));\n-\t\tassertThat(handler.getLastAlignmentDurationNanos().get(), Matchers.lessThanOrEqualTo(alignmentDuration));\n+\t\tassertThat(handler.getLastAlignmentDurationNanos().get() / 1_000_000, is(both(greaterThanOrEqualTo(sleepTime)).and(lessThanOrEqualTo(alignmentDuration))));\n \n-\t\tassertTrue(handler.lastBytesProcessedDuringAlignment.isDone());\n-\t\tassertThat(handler.lastBytesProcessedDuringAlignment.get(), Matchers.equalTo(3L * bufferSize));\n+\t\tassertTrue(handler.getLastBytesProcessedDuringAlignment().isDone());\n+\t\tassertThat(handler.getLastBytesProcessedDuringAlignment().get(), equalTo(3L * bufferSize));\n \t}\n \n \t@Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxMjI1NA==", "url": "https://github.com/apache/flink/pull/13562#discussion_r501812254", "bodyText": "Is the previous commit even \"correct\" without this change? It feels that they should be squashed.", "author": "AHeise", "createdAt": "2020-10-08T15:28:00Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAligner.java", "diffHunk": "@@ -122,6 +122,8 @@ public void processBarrier(CheckpointBarrier receivedBarrier, InputChannelInfo c\n \t\t\tif (barrierId > currentCheckpointId) {\n \t\t\t\t// new checkpoint\n \t\t\t\tcurrentCheckpointId = barrierId;\n+\t\t\t\tmarkCheckpointStart(receivedBarrier.getTimestamp());", "originalCommit": "7a88a725ad55904cbfcc7e2a03b96f54754b650c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg4ODQ3OA==", "url": "https://github.com/apache/flink/pull/13562#discussion_r501888478", "bodyText": "Yes. The previous commit is just as correct as the master branch in this regard. This is pre-existing bug on master, that is a completely independent issue compared to the previous commit (providing alignmentDurationNanos metric for unaligned and at-least-once CheckpointBarrierHandlers).", "author": "pnowojski", "createdAt": "2020-10-08T17:25:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxMjI1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjIzMzc2Mw==", "url": "https://github.com/apache/flink/pull/13562#discussion_r502233763", "bodyText": "Could you add fix(or similar) to the commit message to make it clear that this currently broken.", "author": "AHeise", "createdAt": "2020-10-09T07:18:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxMjI1NA=="}], "type": "inlineReview", "revised_code": {"commit": "66db0a46b9b05cb54250658b745ae5c99322c829", "chunk": "diff --git a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAligner.java b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAligner.java\nindex 5c97053852b..e6fbb920147 100644\n--- a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAligner.java\n+++ b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAligner.java\n\n@@ -122,8 +121,7 @@ public class CheckpointBarrierAligner extends CheckpointBarrierHandler {\n \t\t\tif (barrierId > currentCheckpointId) {\n \t\t\t\t// new checkpoint\n \t\t\t\tcurrentCheckpointId = barrierId;\n-\t\t\t\tmarkCheckpointStart(receivedBarrier.getTimestamp());\n-\t\t\t\tmarkAlignmentEnd(0);\n+\t\t\t\tmarkAlignmentStartAndEnd(receivedBarrier.getTimestamp());\n \t\t\t\tnotifyCheckpoint(receivedBarrier);\n \t\t\t}\n \t\t\treturn;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxMzQwMg==", "url": "https://github.com/apache/flink/pull/13562#discussion_r501813402", "bodyText": "nit: no newline?", "author": "AHeise", "createdAt": "2020-10-08T15:29:36Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/metrics/MetricNames.java", "diffHunk": "@@ -68,6 +68,8 @@ private MetricNames() {\n \tpublic static final String CHECKPOINT_ALIGNMENT_TIME = \"checkpointAlignmentTime\";\n \tpublic static final String CHECKPOINT_START_DELAY_TIME = \"checkpointStartDelayNanos\";\n ", "originalCommit": "a93d22f3c0482bcddec37b2e61c335fcfb604630", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg4OTM5OQ==", "url": "https://github.com/apache/flink/pull/13562#discussion_r501889399", "bodyText": "actually, those values are not used, as I gave up at providing those metrics at the TM level, so... removing those changes.", "author": "pnowojski", "createdAt": "2020-10-08T17:26:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxMzQwMg=="}], "type": "inlineReview", "revised_code": {"commit": "bb689c444aea5e6480635ce6a5e976ff6b8169d5", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/metrics/MetricNames.java b/flink-runtime/src/main/java/org/apache/flink/runtime/metrics/MetricNames.java\nindex 0f1ad589c49..9cad0ed3169 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/metrics/MetricNames.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/metrics/MetricNames.java\n\n@@ -68,8 +68,6 @@ public class MetricNames {\n \tpublic static final String CHECKPOINT_ALIGNMENT_TIME = \"checkpointAlignmentTime\";\n \tpublic static final String CHECKPOINT_START_DELAY_TIME = \"checkpointStartDelayNanos\";\n \n-\tpublic static final String CHECKPOINT_PERSISTED_DATA = \"checkpointPersistedData\";\n-\n \tpublic static String currentInputWatermarkName(int index) {\n \t\treturn String.format(IO_CURRENT_INPUT_WATERMARK_PATERN, index);\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxNDM0NQ==", "url": "https://github.com/apache/flink/pull/13562#discussion_r501814345", "bodyText": "Just to double-check, that should also account mini state that is stored into _metadata right?", "author": "AHeise", "createdAt": "2020-10-08T15:30:52Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/AsyncCheckpointRunnable.java", "diffHunk": "@@ -121,11 +123,15 @@ public void run() {\n \t\t\t\tlocalTaskOperatorSubtaskStates.putSubtaskStateByOperatorID(\n \t\t\t\t\toperatorID,\n \t\t\t\t\tfinalizedSnapshots.getTaskLocalState());\n+\n+\t\t\t\tbytesPersistedDuringAlignment += finalizedSnapshots.getJobManagerOwnedState().getResultSubpartitionState().getStateSize();\n+\t\t\t\tbytesPersistedDuringAlignment += finalizedSnapshots.getJobManagerOwnedState().getInputChannelState().getStateSize();\n \t\t\t}\n \n \t\t\tfinal long asyncEndNanos = System.nanoTime();\n \t\t\tfinal long asyncDurationMillis = (asyncEndNanos - asyncConstructionNanos) / 1_000_000L;\n \n+\t\t\tcheckpointMetrics.setBytesPersistedDuringAlignment(bytesPersistedDuringAlignment);", "originalCommit": "a93d22f3c0482bcddec37b2e61c335fcfb604630", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg5MDAwOA==", "url": "https://github.com/apache/flink/pull/13562#discussion_r501890008", "bodyText": "? What do you mean?", "author": "pnowojski", "createdAt": "2020-10-08T17:27:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxNDM0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjIzMTExNQ==", "url": "https://github.com/apache/flink/pull/13562#discussion_r502231115", "bodyText": "Just want to make sure that we are correctly accounting small channel states that are not stored in separate files.", "author": "AHeise", "createdAt": "2020-10-09T07:12:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxNDM0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUxMjM2NQ==", "url": "https://github.com/apache/flink/pull/13562#discussion_r502512365", "bodyText": "To the best of my knowledge, this is exactly the same code path that's being used for other places where we are reporting state/checkpoint size. I would assume it's working correctly and in my manual tests I've seen values as low as tens of bytes, so I think it's fine.", "author": "pnowojski", "createdAt": "2020-10-09T15:33:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxNDM0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "b929c43d11121772599648bc6d0b584782a4d73c", "chunk": "diff --git a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/AsyncCheckpointRunnable.java b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/AsyncCheckpointRunnable.java\nindex b5c35b57930..0ff80f79395 100644\n--- a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/AsyncCheckpointRunnable.java\n+++ b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/AsyncCheckpointRunnable.java\n\n@@ -123,15 +115,11 @@ final class AsyncCheckpointRunnable implements Runnable, Closeable {\n \t\t\t\tlocalTaskOperatorSubtaskStates.putSubtaskStateByOperatorID(\n \t\t\t\t\toperatorID,\n \t\t\t\t\tfinalizedSnapshots.getTaskLocalState());\n-\n-\t\t\t\tbytesPersistedDuringAlignment += finalizedSnapshots.getJobManagerOwnedState().getResultSubpartitionState().getStateSize();\n-\t\t\t\tbytesPersistedDuringAlignment += finalizedSnapshots.getJobManagerOwnedState().getInputChannelState().getStateSize();\n \t\t\t}\n \n \t\t\tfinal long asyncEndNanos = System.nanoTime();\n-\t\t\tfinal long asyncDurationMillis = (asyncEndNanos - asyncConstructionNanos) / 1_000_000L;\n+\t\t\tfinal long asyncDurationMillis = (asyncEndNanos - asyncStartNanos) / 1_000_000L;\n \n-\t\t\tcheckpointMetrics.setBytesPersistedDuringAlignment(bytesPersistedDuringAlignment);\n \t\t\tcheckpointMetrics.setAsyncDurationMillis(asyncDurationMillis);\n \n \t\t\tif (asyncCheckpointState.compareAndSet(AsyncCheckpointState.RUNNING, AsyncCheckpointState.COMPLETED)) {\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxNTU2NA==", "url": "https://github.com/apache/flink/pull/13562#discussion_r501815564", "bodyText": "I second my suggestion to pull it to top-level.", "author": "AHeise", "createdAt": "2020-10-08T15:32:29Z", "path": "flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAlignerTest.java", "diffHunk": "@@ -913,7 +915,8 @@ private static void validateAlignmentTime(long alignmentStartTimestamp, Checkpoi\n \t\tprotected long nextExpectedCheckpointId;\n \t\tprotected long triggeredCheckpointCounter = 0;\n \t\tprotected long abortedCheckpointCounter = 0;\n-\t\tprivate CompletableFuture<Long> lastAlignmentDurationNanos;\n+\t\tprotected CompletableFuture<Long> lastAlignmentDurationNanos;\n+\t\tprotected List<Long> triggeredCheckpoints = new ArrayList<>();\n \n \t\tpublic ValidatingCheckpointHandler() {", "originalCommit": "fdb413e0d1f52500f9da7d7e5fa50ca70358d73a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb689c444aea5e6480635ce6a5e976ff6b8169d5", "chunk": "diff --git a/flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAlignerTest.java b/flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAlignerTest.java\nindex 92c09dd1503..8e08b024f48 100644\n--- a/flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAlignerTest.java\n+++ b/flink-streaming-java/src/test/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierAlignerTest.java\n\n@@ -905,98 +989,6 @@ public class CheckpointBarrierAlignerTest {\n \t//  Testing Mocks\n \t// ------------------------------------------------------------------------\n \n-\t/**\n-\t * The invokable handler used for triggering checkpoint and validation.\n-\t */\n-\tstatic class ValidatingCheckpointHandler extends AbstractInvokable {\n-\n-\t\tprotected CheckpointFailureReason failureReason;\n-\t\tprotected long lastCanceledCheckpointId = -1L;\n-\t\tprotected long nextExpectedCheckpointId;\n-\t\tprotected long triggeredCheckpointCounter = 0;\n-\t\tprotected long abortedCheckpointCounter = 0;\n-\t\tprotected CompletableFuture<Long> lastAlignmentDurationNanos;\n-\t\tprotected List<Long> triggeredCheckpoints = new ArrayList<>();\n-\n-\t\tpublic ValidatingCheckpointHandler() {\n-\t\t\tthis(-1);\n-\t\t}\n-\n-\t\tpublic ValidatingCheckpointHandler(long nextExpectedCheckpointId) {\n-\t\t\tsuper(new DummyEnvironment(\"test\", 1, 0));\n-\t\t\tthis.nextExpectedCheckpointId = nextExpectedCheckpointId;\n-\t\t}\n-\n-\t\tpublic void setNextExpectedCheckpointId(long nextExpectedCheckpointId) {\n-\t\t\tthis.nextExpectedCheckpointId = nextExpectedCheckpointId;\n-\t\t}\n-\n-\t\tpublic CheckpointFailureReason getCheckpointFailureReason() {\n-\t\t\treturn failureReason;\n-\t\t}\n-\n-\t\tpublic long getLastCanceledCheckpointId() {\n-\t\t\treturn lastCanceledCheckpointId;\n-\t\t}\n-\n-\t\tpublic long getTriggeredCheckpointCounter() {\n-\t\t\treturn triggeredCheckpointCounter;\n-\t\t}\n-\n-\t\tpublic long getAbortedCheckpointCounter() {\n-\t\t\treturn abortedCheckpointCounter;\n-\t\t}\n-\n-\t\tpublic long getNextExpectedCheckpointId() {\n-\t\t\treturn nextExpectedCheckpointId;\n-\t\t}\n-\n-\t\tpublic CompletableFuture<Long> getLastAlignmentDurationNanos() {\n-\t\t\treturn lastAlignmentDurationNanos;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void invoke() {\n-\t\t\tthrow new UnsupportedOperationException();\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic Future<Boolean> triggerCheckpointAsync(\n-\t\t\t\tCheckpointMetaData checkpointMetaData,\n-\t\t\t\tCheckpointOptions checkpointOptions,\n-\t\t\t\tboolean advanceToEndOfEventTime) {\n-\t\t\tthrow new UnsupportedOperationException(\"should never be called\");\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void triggerCheckpointOnBarrier(\n-\t\t\t\tCheckpointMetaData checkpointMetaData,\n-\t\t\t\tCheckpointOptions checkpointOptions,\n-\t\t\t\tCheckpointMetricsBuilder checkpointMetrics) {\n-\t\t\tassertTrue(\"wrong checkpoint id\", nextExpectedCheckpointId == -1L ||\n-\t\t\t\tnextExpectedCheckpointId == checkpointMetaData.getCheckpointId());\n-\t\t\tassertTrue(checkpointMetaData.getTimestamp() > 0);\n-\n-\t\t\tlastAlignmentDurationNanos = checkpointMetrics.getAlignmentDurationNanos();\n-\t\t\tnextExpectedCheckpointId = checkpointMetaData.getCheckpointId() + 1;\n-\t\t\ttriggeredCheckpointCounter++;\n-\n-\t\t\ttriggeredCheckpoints.add(checkpointMetaData.getCheckpointId());\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void abortCheckpointOnBarrier(long checkpointId, Throwable cause) {\n-\t\t\tlastCanceledCheckpointId = checkpointId;\n-\t\t\tfailureReason = ((CheckpointException) cause).getCheckpointFailureReason();\n-\t\t\tabortedCheckpointCounter++;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic Future<Void> notifyCheckpointCompleteAsync(long checkpointId) {\n-\t\t\tthrow new UnsupportedOperationException(\"should never be called\");\n-\t\t}\n-\t}\n-\n \t/**\n \t * A validation matcher for checkpoint exception against failure reason.\n \t */\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxNjYzMA==", "url": "https://github.com/apache/flink/pull/13562#discussion_r501816630", "bodyText": "nit: already use static import in original commit.", "author": "AHeise", "createdAt": "2020-10-08T15:34:08Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointMetricsBuilder.java", "diffHunk": "@@ -92,9 +108,11 @@ public long getCheckpointStartDelayNanos() {\n \n \tpublic CheckpointMetrics build() {\n \t\tcheckState(alignmentDurationNanos.isDone());\n+\t\tcheckState(bytesProcessedDuringAlignment.isDone());\n \t\treturn new CheckpointMetrics(\n+\t\t\tgetWithoutException(bytesProcessedDuringAlignment),\n \t\t\tbytesPersistedDuringAlignment,\n-\t\t\tFutureUtils.getWithoutException(alignmentDurationNanos),", "originalCommit": "65f18ef4f1a850c561917475a259fdfa779c10f8", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb689c444aea5e6480635ce6a5e976ff6b8169d5", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointMetricsBuilder.java b/flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointMetricsBuilder.java\nindex c3e4543fdfe..27b467ad077 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointMetricsBuilder.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/checkpoint/CheckpointMetricsBuilder.java\n\n@@ -107,8 +107,8 @@ public class CheckpointMetricsBuilder {\n \t}\n \n \tpublic CheckpointMetrics build() {\n-\t\tcheckState(alignmentDurationNanos.isDone());\n-\t\tcheckState(bytesProcessedDuringAlignment.isDone());\n+\t\tcheckState(alignmentDurationNanos.isDone() && !alignmentDurationNanos.isCompletedExceptionally());\n+\t\tcheckState(bytesProcessedDuringAlignment.isDone() && !bytesProcessedDuringAlignment.isCompletedExceptionally());\n \t\treturn new CheckpointMetrics(\n \t\t\tgetWithoutException(bytesProcessedDuringAlignment),\n \t\t\tbytesPersistedDuringAlignment,\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgyMzM5Mg==", "url": "https://github.com/apache/flink/pull/13562#discussion_r501823392", "bodyText": "At this point, I was wondering if we really need all futures? At the point where we are calling metrics#build, we are assuming everything is done anyways. Wouldn't it be enough to just sync(builder) when setting the final values?", "author": "AHeise", "createdAt": "2020-10-08T15:43:48Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierHandler.java", "diffHunk": "@@ -56,6 +56,13 @@\n \t/** The timestamp as in {@link System#nanoTime()} at which the last alignment started. */\n \tprivate long startOfAlignmentTimestamp;\n \n+\t/**\n+\t * Cumulative counter of bytes processed during alignment. Once we complete alignment, we will\n+\t * put this value into the {@link #latestBytesProcessedDuringAlignment}.\n+\t */\n+\tprivate long bytesProcessedDuringAlignment;\n+\tprivate CompletableFuture<Long> latestBytesProcessedDuringAlignment = new CompletableFuture<>();", "originalCommit": "65f18ef4f1a850c561917475a259fdfa779c10f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgyNDcwMQ==", "url": "https://github.com/apache/flink/pull/13562#discussion_r501824701", "bodyText": "We could even pull up Unaligner#allBarriersReceivedFuture to have a future to listen to and at which time we can expect the handler to have updated all metrics.", "author": "AHeise", "createdAt": "2020-10-08T15:45:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgyMzM5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg5MTU5NA==", "url": "https://github.com/apache/flink/pull/13562#discussion_r501891594", "bodyText": "Can you elaborate? Do you mean making CheckpointMetricsBuilder a thread safe class as a whole? I think that would be a bit worse. With futures I can get away from this. CheckpointMetricsBuilder is non thread safe, it can be only used from a single thread (it can be handed over to another thread of course). At the same time, the current interface clearly shows that two of the metrics are supplied asynchronously from somewhere else, with just one simple contract: they must be supplied before building the metrics.", "author": "pnowojski", "createdAt": "2020-10-08T17:30:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgyMzM5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjIzNjkzMw==", "url": "https://github.com/apache/flink/pull/13562#discussion_r502236933", "bodyText": "No, I meant adding an explicit synchonization point while filling the builder.\nIn handler, on finish alignment:\nsynchronized(checkpointMetrics) {\n  checkpointMetrics.setBytesProcessedDuringAlignment(bytesProcessedDuringAlignment);\n  checkpointMetrics.setAlignmentDurationNanos(System.nanoTime() - startOfAlignmentTimestamp);\n  ...\n}\nallBarriersReceivedFuture.complete(null);\n\nIn task thread, on checkpoint ended\n  assert allBarriersReceivedFuture.isDone();\n  synchronized(checkpointMetrics) {\n     checkpointMetrics.setSyncTime(...);\n     ...\n     checkpointMetrics.build();\n  }", "author": "AHeise", "createdAt": "2020-10-09T07:25:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgyMzM5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjIzODQxNQ==", "url": "https://github.com/apache/flink/pull/13562#discussion_r502238415", "bodyText": "Alternatively, have two CheckpointMetrics(Builder) that are thread local for the different metrics. Then have one future in handler CompleteableFuture<CheckpointAlignmentMetrics> alignmentFuture (subsuming allBarriersReceivedFuture). That's probably much easier.", "author": "AHeise", "createdAt": "2020-10-09T07:28:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgyMzM5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUxNDg5NA==", "url": "https://github.com/apache/flink/pull/13562#discussion_r502514894", "bodyText": "The first option that you proposed I think is really bad. It looks like you would like to have some external synchronisation, while keeping the class itself non thread safe.\nAlso I would strongly against making parts of the CheckpointMetrics(Builder) class thread safe (it's super confusing which methods are and which are not thread safe).\nOn the other hand, yes, I was thinking about introducing some extra pojo, that would replace two CompletableFutures with one with some poko, yes, it would be probably slightly better. Is it really worth the extra effort/code? IMO not.", "author": "pnowojski", "createdAt": "2020-10-09T15:37:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgyMzM5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU3NTExNQ==", "url": "https://github.com/apache/flink/pull/13562#discussion_r502575115", "bodyText": "Okay then leave it as is and keep that in mind as an option when adding additional metrics.", "author": "AHeise", "createdAt": "2020-10-09T17:28:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgyMzM5Mg=="}], "type": "inlineReview", "revised_code": {"commit": "bb689c444aea5e6480635ce6a5e976ff6b8169d5", "chunk": "diff --git a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierHandler.java b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierHandler.java\nindex 81f33ea9a23..4662d320cd4 100644\n--- a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierHandler.java\n+++ b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierHandler.java\n\n@@ -54,7 +55,7 @@ public abstract class CheckpointBarrierHandler implements Closeable {\n \tprivate long latestCheckpointStartDelayNanos;\n \n \t/** The timestamp as in {@link System#nanoTime()} at which the last alignment started. */\n-\tprivate long startOfAlignmentTimestamp;\n+\tprivate long startOfAlignmentTimestamp = OUTSIDE_OF_ALIGNMENT;\n \n \t/**\n \t * Cumulative counter of bytes processed during alignment. Once we complete alignment, we will\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgzMDUwNA==", "url": "https://github.com/apache/flink/pull/13562#discussion_r501830504", "bodyText": "atypical to see equals be used for longs.", "author": "AHeise", "createdAt": "2020-10-08T15:53:41Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/rest/messages/checkpoints/CheckpointStatistics.java", "diffHunk": "@@ -200,6 +214,8 @@ public boolean equals(Object o) {\n \t\t\tstateSize == that.stateSize &&\n \t\t\tduration == that.duration &&\n \t\t\talignmentBuffered == that.alignmentBuffered &&\n+\t\t\tObjects.equals(processedData, that.processedData) &&", "originalCommit": "6a864dce8d9959c338f09e056e3e970f104c9624", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb689c444aea5e6480635ce6a5e976ff6b8169d5", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/rest/messages/checkpoints/CheckpointStatistics.java b/flink-runtime/src/main/java/org/apache/flink/runtime/rest/messages/checkpoints/CheckpointStatistics.java\nindex 2a4bda77d39..888c1f5a42f 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/rest/messages/checkpoints/CheckpointStatistics.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/rest/messages/checkpoints/CheckpointStatistics.java\n\n@@ -214,8 +214,8 @@ public class CheckpointStatistics implements ResponseBody {\n \t\t\tstateSize == that.stateSize &&\n \t\t\tduration == that.duration &&\n \t\t\talignmentBuffered == that.alignmentBuffered &&\n-\t\t\tObjects.equals(processedData, that.processedData) &&\n-\t\t\tObjects.equals(persistedData, that.persistedData) &&\n+\t\t\tprocessedData == processedData &&\n+\t\t\tpersistedData == that.persistedData &&\n \t\t\tnumSubtasks == that.numSubtasks &&\n \t\t\tnumAckSubtasks == that.numAckSubtasks &&\n \t\t\tstatus == that.status &&\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgzMTE5NA==", "url": "https://github.com/apache/flink/pull/13562#discussion_r501831194", "bodyText": "should probably be a separate commit by your standards, but this PR already has enough commits for me ;)", "author": "AHeise", "createdAt": "2020-10-08T15:54:38Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/checkpoint/SubtaskStateStatsTest.java", "diffHunk": "@@ -56,39 +72,4 @@ public void testSimpleAccess() throws Exception {\n \t\tassertEquals(0, stats.getEndToEndDuration(ackTimestamp + 1));\n \t}\n \n-\t/**\n-\t * Tests that the snapshot is actually serializable.\n-\t */\n-\t@Test\n-\tpublic void testIsJavaSerializable() throws Exception {", "originalCommit": "6a864dce8d9959c338f09e056e3e970f104c9624", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg5NjE1NQ==", "url": "https://github.com/apache/flink/pull/13562#discussion_r501896155", "bodyText": "True... :(", "author": "pnowojski", "createdAt": "2020-10-08T17:37:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgzMTE5NA=="}], "type": "inlineReview", "revised_code": {"commit": "b929c43d11121772599648bc6d0b584782a4d73c", "chunk": "diff --git a/flink-runtime/src/test/java/org/apache/flink/runtime/checkpoint/SubtaskStateStatsTest.java b/flink-runtime/src/test/java/org/apache/flink/runtime/checkpoint/SubtaskStateStatsTest.java\nindex 75274664224..68ef7969af8 100644\n--- a/flink-runtime/src/test/java/org/apache/flink/runtime/checkpoint/SubtaskStateStatsTest.java\n+++ b/flink-runtime/src/test/java/org/apache/flink/runtime/checkpoint/SubtaskStateStatsTest.java\n\n@@ -72,4 +56,39 @@ public class SubtaskStateStatsTest {\n \t\tassertEquals(0, stats.getEndToEndDuration(ackTimestamp + 1));\n \t}\n \n+\t/**\n+\t * Tests that the snapshot is actually serializable.\n+\t */\n+\t@Test\n+\tpublic void testIsJavaSerializable() throws Exception {\n+\t\tSubtaskStateStats stats = new SubtaskStateStats(\n+\t\t\t0,\n+\t\t\tInteger.MAX_VALUE + 1L,\n+\t\t\tInteger.MAX_VALUE + 2L,\n+\t\t\tInteger.MAX_VALUE + 3L,\n+\t\t\tInteger.MAX_VALUE + 4L,\n+\t\t\tInteger.MAX_VALUE + 6L,\n+\t\t\tInteger.MAX_VALUE + 7L);\n+\n+\n+\t\tSubtaskStateStats copy = CommonTestUtils.createCopySerializable(stats);\n+\n+\t\tassertEquals(0, copy.getSubtaskIndex());\n+\t\tassertEquals(Integer.MAX_VALUE + 1L, copy.getAckTimestamp());\n+\t\tassertEquals(Integer.MAX_VALUE + 2L, copy.getStateSize());\n+\t\tassertEquals(Integer.MAX_VALUE + 3L, copy.getSyncCheckpointDuration());\n+\t\tassertEquals(Integer.MAX_VALUE + 4L, copy.getAsyncCheckpointDuration());\n+\t\tassertEquals(Integer.MAX_VALUE + 6L, copy.getAlignmentDuration());\n+\t\tassertEquals(Integer.MAX_VALUE + 7L, stats.getCheckpointStartDelay());\n+\n+\t\t// Check duration helper\n+\t\tlong ackTimestamp = copy.getAckTimestamp();\n+\t\tlong triggerTimestamp = ackTimestamp - 10123;\n+\t\tassertEquals(10123, copy.getEndToEndDuration(triggerTimestamp));\n+\n+\t\t// Trigger timestamp < ack timestamp\n+\t\tassertEquals(0, copy.getEndToEndDuration(ackTimestamp + 1));\n+\n+\t}\n+\n }\n"}}, {"oid": "bb689c444aea5e6480635ce6a5e976ff6b8169d5", "url": "https://github.com/apache/flink/commit/bb689c444aea5e6480635ce6a5e976ff6b8169d5", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures", "committedDate": "2020-10-08T17:40:24Z", "type": "forcePushed"}, {"oid": "bc7f0db4d137fdd415ca36942165dd9ad992baca", "url": "https://github.com/apache/flink/commit/bc7f0db4d137fdd415ca36942165dd9ad992baca", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures", "committedDate": "2020-10-08T19:23:51Z", "type": "forcePushed"}, {"oid": "ae76f49a6a5829342757376b6cdbfb03936fae2e", "url": "https://github.com/apache/flink/commit/ae76f49a6a5829342757376b6cdbfb03936fae2e", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures", "committedDate": "2020-10-08T20:22:50Z", "type": "forcePushed"}, {"oid": "1264444a0a100bc1775296c92563baced8b340c8", "url": "https://github.com/apache/flink/commit/1264444a0a100bc1775296c92563baced8b340c8", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures", "committedDate": "2020-10-09T09:42:24Z", "type": "forcePushed"}, {"oid": "9e1454b755c3220b262268ddb3ced79f4e5b82cc", "url": "https://github.com/apache/flink/commit/9e1454b755c3220b262268ddb3ced79f4e5b82cc", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures", "committedDate": "2020-10-09T13:27:43Z", "type": "forcePushed"}, {"oid": "389cbc085474545ea3db19bb0b5769eebefa2bdc", "url": "https://github.com/apache/flink/commit/389cbc085474545ea3db19bb0b5769eebefa2bdc", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures", "committedDate": "2020-10-09T15:43:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU2NzMwMw==", "url": "https://github.com/apache/flink/pull/13562#discussion_r502567303", "bodyText": "isCompletedNormally(future)?\nI'd even go with\nT value = getWithoutException(future);\nreturn value != null ? value : defaultValue;", "author": "AHeise", "createdAt": "2020-10-09T17:14:01Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/concurrent/FutureUtils.java", "diffHunk": "@@ -1054,6 +1073,16 @@ public void onComplete(Throwable failure, U success) {\n \t\treturn null;\n \t}\n \n+\t/**\n+\t * @return the result of completable future, or the defaultValue if it has not yet completed.\n+\t */\n+\tpublic static <T> T getOrDefault(CompletableFuture<T> future, T defaultValue) {\n+\t\tif (future.isDone() && !future.isCompletedExceptionally()) {", "originalCommit": "877e30b31c28ca5cbed7bada59cdf41a65fdf024", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "66db0a46b9b05cb54250658b745ae5c99322c829", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/concurrent/FutureUtils.java b/flink-runtime/src/main/java/org/apache/flink/runtime/concurrent/FutureUtils.java\nindex 9adae332442..ed093782e35 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/concurrent/FutureUtils.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/concurrent/FutureUtils.java\n\n@@ -1077,10 +1077,8 @@ public class FutureUtils {\n \t * @return the result of completable future, or the defaultValue if it has not yet completed.\n \t */\n \tpublic static <T> T getOrDefault(CompletableFuture<T> future, T defaultValue) {\n-\t\tif (future.isDone() && !future.isCompletedExceptionally()) {\n-\t\t\treturn getWithoutException(future);\n-\t\t}\n-\t\treturn defaultValue;\n+\t\tT value = getWithoutException(future);\n+\t\treturn value == null ? defaultValue : value;\n \t}\n \n \t/**\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU3ODQ1Nw==", "url": "https://github.com/apache/flink/pull/13562#discussion_r502578457", "bodyText": "I'd rather extend IllegalStateException and then translate that to a RejectedExecutionException in executor#execute. It doesn't make sense to throw an RejectedExecutionException on #quiesce or #yield.", "author": "AHeise", "createdAt": "2020-10-09T17:35:39Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/mailbox/TaskMailbox.java", "diffHunk": "@@ -225,4 +226,13 @@ public boolean isAcceptingMails() {\n \t * @param runnable the runnable to execute\n \t */\n \tvoid runExclusively(Runnable runnable);\n+\n+\t/**\n+\t * Exception thrown when {@link TaskMailbox} is closed.\n+\t */\n+\tclass MailboxClosedException extends RejectedExecutionException {", "originalCommit": "1fd09fc55953cb013c90751efbc457c4acf7be73", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "66db0a46b9b05cb54250658b745ae5c99322c829", "chunk": "diff --git a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/mailbox/TaskMailbox.java b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/mailbox/TaskMailbox.java\nindex 05d9496f1b8..1cb1e5f8e05 100644\n--- a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/mailbox/TaskMailbox.java\n+++ b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/tasks/mailbox/TaskMailbox.java\n\n@@ -230,7 +229,7 @@ public interface TaskMailbox {\n \t/**\n \t * Exception thrown when {@link TaskMailbox} is closed.\n \t */\n-\tclass MailboxClosedException extends RejectedExecutionException {\n+\tclass MailboxClosedException extends IllegalStateException {\n \t\tpublic MailboxClosedException(String message) {\n \t\t\tsuper(message);\n \t\t}\n"}}, {"oid": "1afa2ceb2989769c830d585628c4ce870311233c", "url": "https://github.com/apache/flink/commit/1afa2ceb2989769c830d585628c4ce870311233c", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures", "committedDate": "2020-10-12T12:04:41Z", "type": "forcePushed"}, {"oid": "66db0a46b9b05cb54250658b745ae5c99322c829", "url": "https://github.com/apache/flink/commit/66db0a46b9b05cb54250658b745ae5c99322c829", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures", "committedDate": "2020-10-12T13:00:58Z", "type": "forcePushed"}, {"oid": "b11530522ab1765981dd302abb9f70e2096ba9b3", "url": "https://github.com/apache/flink/commit/b11530522ab1765981dd302abb9f70e2096ba9b3", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures", "committedDate": "2020-10-12T13:28:46Z", "type": "forcePushed"}, {"oid": "20eb2f46e0b0c80012126de354f26320a5c663c4", "url": "https://github.com/apache/flink/commit/20eb2f46e0b0c80012126de354f26320a5c663c4", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures", "committedDate": "2020-10-12T16:57:09Z", "type": "forcePushed"}, {"oid": "7f4fc5df6855d31d929b5549f7dfa1a1509dea40", "url": "https://github.com/apache/flink/commit/7f4fc5df6855d31d929b5549f7dfa1a1509dea40", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures", "committedDate": "2020-10-12T17:50:59Z", "type": "forcePushed"}, {"oid": "362bf96cdc6240d8f6a3b800b19ead9f55379636", "url": "https://github.com/apache/flink/commit/362bf96cdc6240d8f6a3b800b19ead9f55379636", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures", "committedDate": "2020-10-13T08:38:33Z", "type": "forcePushed"}, {"oid": "a825e2e8e363ffc75c884733e38155cd892a7e7c", "url": "https://github.com/apache/flink/commit/a825e2e8e363ffc75c884733e38155cd892a7e7c", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures", "committedDate": "2020-10-13T09:07:45Z", "type": "forcePushed"}, {"oid": "945ab598d03a38f4a5703014efe1f8582124f75e", "url": "https://github.com/apache/flink/commit/945ab598d03a38f4a5703014efe1f8582124f75e", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures", "committedDate": "2020-10-13T10:21:40Z", "type": "forcePushed"}, {"oid": "367fc39d03be5ec414dd8c5e7d399fcc25b6a6c5", "url": "https://github.com/apache/flink/commit/367fc39d03be5ec414dd8c5e7d399fcc25b6a6c5", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures", "committedDate": "2020-10-13T12:36:30Z", "type": "forcePushed"}, {"oid": "b929c43d11121772599648bc6d0b584782a4d73c", "url": "https://github.com/apache/flink/commit/b929c43d11121772599648bc6d0b584782a4d73c", "message": "[hotfix][test] Deduplicate TaskStateStatsTest code", "committedDate": "2020-10-13T15:07:33Z", "type": "commit"}, {"oid": "33391727152b276aa1b5ac64212bb7c0299429ed", "url": "https://github.com/apache/flink/commit/33391727152b276aa1b5ac64212bb7c0299429ed", "message": "[hotfix][task] Rename SubtaskCheckpointCoordinator#executorService to asyncOperationsThreadPool", "committedDate": "2020-10-13T15:07:33Z", "type": "commit"}, {"oid": "002d9a974adfc5c6401fb8738004d46ec88be47b", "url": "https://github.com/apache/flink/commit/002d9a974adfc5c6401fb8738004d46ec88be47b", "message": "[hotfix][task] Log when AsyncCheckpointRunnalbe starts executing (with the execution delay)", "committedDate": "2020-10-13T15:07:33Z", "type": "commit"}, {"oid": "44111977cabf3dcad617dc5d00e969290d095dab", "url": "https://github.com/apache/flink/commit/44111977cabf3dcad617dc5d00e969290d095dab", "message": "[hotfix][test] Remove unnecessary abstraction in CheckpointBarrierAlignerTestBase", "committedDate": "2020-10-13T15:07:34Z", "type": "commit"}, {"oid": "da0c6b0901ca0572212865436b0fdcc4599378b2", "url": "https://github.com/apache/flink/commit/da0c6b0901ca0572212865436b0fdcc4599378b2", "message": "[hotfix][test] Simplify CheckpointBarrierAlignerTest", "committedDate": "2020-10-13T15:07:34Z", "type": "commit"}, {"oid": "427774c8f46b50a964bfe62da495345adca17c55", "url": "https://github.com/apache/flink/commit/427774c8f46b50a964bfe62da495345adca17c55", "message": "[hotfix][test] Deduplicate code of ValidatingCheckpointHandler", "committedDate": "2020-10-13T15:07:34Z", "type": "commit"}, {"oid": "12e06ce4ce3c6b7793b028b74c77f07c96cf97ce", "url": "https://github.com/apache/flink/commit/12e06ce4ce3c6b7793b028b74c77f07c96cf97ce", "message": "[hotfix][test] Fix method naming in CheckpointBarrierTrackerTest", "committedDate": "2020-10-13T15:07:34Z", "type": "commit"}, {"oid": "45825f5d4ca69c0cb249ff6789b9a996077d4faf", "url": "https://github.com/apache/flink/commit/45825f5d4ca69c0cb249ff6789b9a996077d4faf", "message": "[FLINK-18662][task] Introduce CheckpointMetricsBuilder\n\nThis will later allow to solve in a hopefully elegant way the issue, that\nsome checkpoint metrics are calculated after AsyncCheckpointRunnable's construction.\nCheckpointMetricsBuilder will be able to collect those additional metrics via CompletableFuture's\nwhile CheckpointMetrics class will remain a serializable class used in the RPC.", "committedDate": "2020-10-13T15:07:35Z", "type": "commit"}, {"oid": "cea8baab7308cd276969112849fda6d09ed72b0b", "url": "https://github.com/apache/flink/commit/cea8baab7308cd276969112849fda6d09ed72b0b", "message": "[FLINK-18662][task] Calculate alignmentDurationNanos for unaligned checkpoints and CheckpointBarrierTracker\n\nThis is modifing the alignmentDurationNanos metric for the CheckpointBarrierTracker. Previously it was\nalways 0, now it's defined as the duration between processing first and the last checkpoint barrier.", "committedDate": "2020-10-13T15:07:35Z", "type": "commit"}, {"oid": "a9d8211277ab31f27c67561080fe4423bc143b9c", "url": "https://github.com/apache/flink/commit/a9d8211277ab31f27c67561080fe4423bc143b9c", "message": "[FLINK-19487][task] Fix calculation of checkpoinStartDelay for single channel CheckpointBarrierAligner\n\nPreviously for one single channel this metric was always zero", "committedDate": "2020-10-13T15:07:35Z", "type": "commit"}, {"oid": "2ee37a8892ff6ffebb80931ad6a78aa2f6c0b353", "url": "https://github.com/apache/flink/commit/2ee37a8892ff6ffebb80931ad6a78aa2f6c0b353", "message": "[FLINK-18662][task] Add persisted bytes to CheckpointMetrics", "committedDate": "2020-10-13T15:07:35Z", "type": "commit"}, {"oid": "e8c9ef4f6f3701b19ac94a99d2353f0ead2d803e", "url": "https://github.com/apache/flink/commit/e8c9ef4f6f3701b19ac94a99d2353f0ead2d803e", "message": "[hotfix][test] Use ValidatingCheckpointHandler in AlternatingCheckpointBarrierHandlerTest", "committedDate": "2020-10-13T15:07:36Z", "type": "commit"}, {"oid": "b6e04c18e9c01b721d5fc873dcb092f540bd0999", "url": "https://github.com/apache/flink/commit/b6e04c18e9c01b721d5fc873dcb092f540bd0999", "message": "[FLINK-18662][task] Calculate processed bytes during alignment metric", "committedDate": "2020-10-13T15:07:36Z", "type": "commit"}, {"oid": "4b4b811a23d4e124114a7aa930fa78212754ffc7", "url": "https://github.com/apache/flink/commit/4b4b811a23d4e124114a7aa930fa78212754ffc7", "message": "[FLINK-18662][metrics] Expose persisted and processed bytes metrics to the REST and Web UI", "committedDate": "2020-10-13T15:07:36Z", "type": "commit"}, {"oid": "83a241d5ec7fd0fac56cf38456cad269e362c736", "url": "https://github.com/apache/flink/commit/83a241d5ec7fd0fac56cf38456cad269e362c736", "message": "[FLINK-18662][docs][metrics] Update the metrics documentation to reflect current state.", "committedDate": "2020-10-13T15:07:37Z", "type": "commit"}, {"oid": "090080be2585aca724429cb96a3088a6f827d9e0", "url": "https://github.com/apache/flink/commit/090080be2585aca724429cb96a3088a6f827d9e0", "message": "[hotfix][task] Throw MailboxClosedException if TaskMailbox is closing instead of IllegalStateException\n\nThis will allow to handle this particular exception, instead of catching IllegalStateException", "committedDate": "2020-10-13T15:07:37Z", "type": "commit"}, {"oid": "c8b1d62855fd445b419bf8330bb260b08e9870c4", "url": "https://github.com/apache/flink/commit/c8b1d62855fd445b419bf8330bb260b08e9870c4", "message": "[hotfix][test] Do not hide original exception in ShuffleCompressionITCase", "committedDate": "2020-10-13T15:07:37Z", "type": "commit"}, {"oid": "49d645dc215ed438d3ef2297be9dd5802b0b8196", "url": "https://github.com/apache/flink/commit/49d645dc215ed438d3ef2297be9dd5802b0b8196", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures", "committedDate": "2020-10-13T15:07:37Z", "type": "commit"}, {"oid": "49d645dc215ed438d3ef2297be9dd5802b0b8196", "url": "https://github.com/apache/flink/commit/49d645dc215ed438d3ef2297be9dd5802b0b8196", "message": "[hotfix][task][network] Do not swallow exceptions from actions chained to the availability futures", "committedDate": "2020-10-13T15:07:37Z", "type": "forcePushed"}]}