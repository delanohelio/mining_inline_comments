{"pr_number": 11570, "pr_title": "[FLINK-16830][table-api] Let users use Row/List/Map/Seq directly in Expression DSL", "pr_createdAt": "2020-03-30T15:42:10Z", "pr_url": "https://github.com/apache/flink/pull/11570", "timeline": [{"oid": "846f4a051c92d2b6899881e6f8e8615458d74d79", "url": "https://github.com/apache/flink/commit/846f4a051c92d2b6899881e6f8e8615458d74d79", "message": "[FLINK-16830][table-api] Let users use Row/List/Map/Seq directly in Expression DSL\n\nThis PR implements conversion logic from Row/List/Map/Seq to a corresponding Expression. From now on users can use those types in the Expression DSL without the need to converting those types manually.\n\nIt is also a prerequisite to use those type directly in TableEnvironment#fromValues.", "committedDate": "2020-03-30T15:59:14Z", "type": "forcePushed"}, {"oid": "d8aeca956d2ac04033dc2a4e81b99cb95d56af78", "url": "https://github.com/apache/flink/commit/d8aeca956d2ac04033dc2a4e81b99cb95d56af78", "message": "[FLINK-16830][table-api] Let users use Row/List/Map/Seq directly in Expression DSL\n\nThis PR implements conversion logic from Row/List/Map/Seq to a corresponding Expression. From now on users can use those types in the Expression DSL without the need to converting those types manually.\n\nIt is also a prerequisite to use those type directly in TableEnvironment#fromValues.", "committedDate": "2020-03-31T12:34:00Z", "type": "forcePushed"}, {"oid": "bd38b0c506cb0f0bbf174837828b279f0150fcbf", "url": "https://github.com/apache/flink/commit/bd38b0c506cb0f0bbf174837828b279f0150fcbf", "message": "[FLINK-16830][table-api] Let users use Row/List/Map/Seq directly in Expression DSL\n\nThis PR implements conversion logic from Row/List/Map/Seq to a corresponding Expression. From now on users can use those types in the Expression DSL without the need to converting those types manually.\n\nIt is also a prerequisite to use those type directly in TableEnvironment#fromValues.", "committedDate": "2020-03-31T13:18:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDAyMjQ3MQ==", "url": "https://github.com/apache/flink/pull/11570#discussion_r404022471", "bodyText": "nit: we are still in the same class and don't need to fully qualify the method", "author": "twalthr", "createdAt": "2020-04-06T11:35:41Z", "path": "flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/expressions/ApiExpressionUtils.java", "diffHunk": "@@ -52,14 +63,151 @@ private ApiExpressionUtils() {\n \t\t// private\n \t}\n \n+\t/**\n+\t * Converts a given object to an expression.\n+\t *\n+\t * <p>It converts:\n+\t * <ul>\n+\t *     <li>{@link Row} to a call to a row constructor expression</li>\n+\t *     <li>{@link Map} to a call to a map constructor expression</li>\n+\t *     <li>{@link List} to a call to an array constructor expression</li>\n+\t *     <li>arrays to a call to an array constructor expression</li>\n+\t *     <li>Scala's {@code Seq} to an array constructor via reflection</li>\n+\t *     <li>Scala's {@code Map} to a map constructor via reflection</li>\n+\t *     <li>Scala's {@code BigDecimal} to a DECIMAL literal</li>\n+\t *     <li>if none of the above applies, the function tries to convert the object\n+\t *          to a value literal with {@link #valueLiteral(Object)}</li>\n+\t * </ul>\n+\t *\n+\t * @param expression An object to convert to an expression\n+\t */\n \tpublic static Expression objectToExpression(Object expression) {\n \t\tif (expression instanceof ApiExpression) {\n \t\t\treturn ((ApiExpression) expression).toExpr();\n \t\t} else if (expression instanceof Expression) {\n \t\t\treturn (Expression) expression;\n+\t\t} else if (expression instanceof Row) {\n+\t\t\treturn convertRow((Row) expression);\n+\t\t} else if (expression instanceof Map) {\n+\t\t\treturn convertJavaMap((Map<?, ?>) expression);\n+\t\t} else if (expression instanceof List) {\n+\t\t\treturn convertJavaList((List<?>) expression);\n+\t\t} else if (expression.getClass().isArray()) {\n+\t\t\treturn convertArray(expression);\n \t\t} else {\n-\t\t\treturn valueLiteral(expression);\n+\t\t\treturn convertScala(expression).orElseGet(() -> valueLiteral(expression));\n+\t\t}\n+\t}\n+\n+\tprivate static Expression convertRow(Row expression) {\n+\t\tList<Expression> fields = IntStream.range(0, expression.getArity())\n+\t\t\t.mapToObj(expression::getField)\n+\t\t\t.map(ApiExpressionUtils::objectToExpression)\n+\t\t\t.collect(Collectors.toList());\n+\n+\t\treturn ApiExpressionUtils.unresolvedCall(BuiltInFunctionDefinitions.ROW, fields);", "originalCommit": "bd38b0c506cb0f0bbf174837828b279f0150fcbf", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4ed2ea4c463de0618eefa31a5ac3ad4b97f158be", "chunk": "diff --git a/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/expressions/ApiExpressionUtils.java b/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/expressions/ApiExpressionUtils.java\nindex 7f1955d8bc8..1d8998af5b8 100644\n--- a/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/expressions/ApiExpressionUtils.java\n+++ b/flink-table/flink-table-api-java/src/main/java/org/apache/flink/table/expressions/ApiExpressionUtils.java\n\n@@ -105,7 +105,7 @@ public final class ApiExpressionUtils {\n \t\t\t.map(ApiExpressionUtils::objectToExpression)\n \t\t\t.collect(Collectors.toList());\n \n-\t\treturn ApiExpressionUtils.unresolvedCall(BuiltInFunctionDefinitions.ROW, fields);\n+\t\treturn unresolvedCall(BuiltInFunctionDefinitions.ROW, fields);\n \t}\n \n \tprivate static Expression convertJavaMap(Map<?, ?> expression) {\n"}}, {"oid": "4ed2ea4c463de0618eefa31a5ac3ad4b97f158be", "url": "https://github.com/apache/flink/commit/4ed2ea4c463de0618eefa31a5ac3ad4b97f158be", "message": "[FLINK-16830][table-api] Let users use Row/List/Map/Seq directly in Expression DSL\n\nThis PR implements conversion logic from Row/List/Map/Seq to a corresponding Expression. From now on users can use those types in the Expression DSL without the need to converting those types manually.\n\nIt is also a prerequisite to use those type directly in TableEnvironment#fromValues.", "committedDate": "2020-04-06T13:59:07Z", "type": "forcePushed"}, {"oid": "17aa82d9ba36e0a6bb3d9bc24ff04f276ffb0219", "url": "https://github.com/apache/flink/commit/17aa82d9ba36e0a6bb3d9bc24ff04f276ffb0219", "message": "[FLINK-16830][table-api] Let users use Row/List/Map/Seq directly in Expression DSL\n\nThis PR implements conversion logic from Row/List/Map/Seq to a corresponding Expression. From now on users can use those types in the Expression DSL without the need to converting those types manually.\n\nIt is also a prerequisite to use those type directly in TableEnvironment#fromValues.", "committedDate": "2020-04-06T15:14:34Z", "type": "commit"}, {"oid": "17aa82d9ba36e0a6bb3d9bc24ff04f276ffb0219", "url": "https://github.com/apache/flink/commit/17aa82d9ba36e0a6bb3d9bc24ff04f276ffb0219", "message": "[FLINK-16830][table-api] Let users use Row/List/Map/Seq directly in Expression DSL\n\nThis PR implements conversion logic from Row/List/Map/Seq to a corresponding Expression. From now on users can use those types in the Expression DSL without the need to converting those types manually.\n\nIt is also a prerequisite to use those type directly in TableEnvironment#fromValues.", "committedDate": "2020-04-06T15:14:34Z", "type": "forcePushed"}]}