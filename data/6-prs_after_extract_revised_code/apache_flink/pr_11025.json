{"pr_number": 11025, "pr_title": "[FLINK-15919][core][mem] MemoryManager shouldn't allow releasing more memory than reserved", "pr_createdAt": "2020-02-05T13:11:11Z", "pr_url": "https://github.com/apache/flink/pull/11025", "timeline": [{"oid": "7d609a8c9220aabc92acff8adff28968e1780fc0", "url": "https://github.com/apache/flink/commit/7d609a8c9220aabc92acff8adff28968e1780fc0", "message": "[FLINK-15919][core][mem] MemoryManager shouldn't allow releasing more memory than reserved", "committedDate": "2020-02-05T13:04:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI0ODE0Mg==", "url": "https://github.com/apache/flink/pull/11025#discussion_r375248142", "bodyText": "I'd suggest to create a separate test for this part.", "author": "tillrohrmann", "createdAt": "2020-02-05T13:17:34Z", "path": "flink-runtime/src/test/java/org/apache/flink/runtime/memory/MemoryManagerTest.java", "diffHunk": "@@ -264,6 +265,30 @@ public void testMemoryReservation() throws MemoryReservationException {\n \t\tmemoryManager.releaseAllMemory(owner, MemoryType.OFF_HEAP);\n \t}\n \n+\t@Test\n+\tpublic void testMemoryReleaseMoreThanReserved() throws MemoryReservationException {\n+\t\tObject owner = new Object();\n+\t\tObject owner2 = new Object();\n+\t\tlong totalHeapMemorySize = memoryManager.availableMemory(MemoryType.HEAP);\n+\t\t// to prevent memory size exceeding the maximum, reserve some memory from another owner.\n+\t\tmemoryManager.reserveMemory(owner2, MemoryType.HEAP, PAGE_SIZE);\n+\n+\t\t// test reserve once and release multiple times\n+\t\tmemoryManager.reserveMemory(owner, MemoryType.HEAP, PAGE_SIZE);\n+\t\tmemoryManager.releaseMemory(owner, MemoryType.HEAP, PAGE_SIZE);\n+\t\tmemoryManager.releaseMemory(owner, MemoryType.HEAP, PAGE_SIZE);\n+\t\tlong heapMemoryLeft = memoryManager.availableMemory(MemoryType.HEAP);\n+\t\tassertEquals(\"Memory leak happens\", totalHeapMemorySize - PAGE_SIZE, heapMemoryLeft);\n+\n+\t\t// test release more than the left reserved size\n+\t\tmemoryManager.reserveMemory(owner, MemoryType.HEAP, PAGE_SIZE);\n+\t\tmemoryManager.releaseMemory(owner, MemoryType.HEAP, PAGE_SIZE / 2);\n+\t\tmemoryManager.releaseMemory(owner, MemoryType.HEAP, PAGE_SIZE);\n+\t\theapMemoryLeft = memoryManager.availableMemory(MemoryType.HEAP);\n+\t\tassertEquals(\"Memory leak happens\", totalHeapMemorySize - PAGE_SIZE, heapMemoryLeft);\n+\t\tmemoryManager.releaseAllMemory(owner2, MemoryType.HEAP);", "originalCommit": "7d609a8c9220aabc92acff8adff28968e1780fc0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d73ea754eb0bf68b062c4981c1c8bbcd370fdbb0", "chunk": "diff --git a/flink-runtime/src/test/java/org/apache/flink/runtime/memory/MemoryManagerTest.java b/flink-runtime/src/test/java/org/apache/flink/runtime/memory/MemoryManagerTest.java\nindex ef16ab30e2a..5eb356d6c51 100644\n--- a/flink-runtime/src/test/java/org/apache/flink/runtime/memory/MemoryManagerTest.java\n+++ b/flink-runtime/src/test/java/org/apache/flink/runtime/memory/MemoryManagerTest.java\n\n@@ -266,41 +266,52 @@ public class MemoryManagerTest {\n \t}\n \n \t@Test\n-\tpublic void testMemoryReleaseMoreThanReserved() throws MemoryReservationException {\n+\tpublic void testCannotReserveBeyondTheLimit() throws MemoryReservationException {\n+\t\tObject owner = new Object();\n+\t\tmemoryManager.reserveMemory(owner, MemoryType.OFF_HEAP, memoryManager.getMemorySizeByType(MemoryType.OFF_HEAP));\n+\t\ttestCannotReserveAnymore(MemoryType.OFF_HEAP, 1L);\n+\t\tmemoryManager.releaseAllMemory(owner, MemoryType.OFF_HEAP);\n+\t}\n+\n+\t@Test\n+\tpublic void testMemoryTooBigReservation() {\n+\t\tlong size = memoryManager.getMemorySizeByType(MemoryType.HEAP) + PAGE_SIZE;\n+\t\ttestCannotReserveAnymore(MemoryType.HEAP, size);\n+\t}\n+\n+\t@Test\n+\tpublic void testMemoryReleaseMultipleTimes() throws MemoryReservationException {\n \t\tObject owner = new Object();\n \t\tObject owner2 = new Object();\n+\t\tint rounds = 5;\n \t\tlong totalHeapMemorySize = memoryManager.availableMemory(MemoryType.HEAP);\n \t\t// to prevent memory size exceeding the maximum, reserve some memory from another owner.\n \t\tmemoryManager.reserveMemory(owner2, MemoryType.HEAP, PAGE_SIZE);\n \n-\t\t// test reserve once and release multiple times\n+\t\t// reserve once and release multiple times\n \t\tmemoryManager.reserveMemory(owner, MemoryType.HEAP, PAGE_SIZE);\n-\t\tmemoryManager.releaseMemory(owner, MemoryType.HEAP, PAGE_SIZE);\n-\t\tmemoryManager.releaseMemory(owner, MemoryType.HEAP, PAGE_SIZE);\n+\t\tfor (int i = 0; i < rounds; i++) {\n+\t\t\tmemoryManager.releaseMemory(owner, MemoryType.HEAP, PAGE_SIZE);\n+\t\t}\n \t\tlong heapMemoryLeft = memoryManager.availableMemory(MemoryType.HEAP);\n \t\tassertEquals(\"Memory leak happens\", totalHeapMemorySize - PAGE_SIZE, heapMemoryLeft);\n-\n-\t\t// test release more than the left reserved size\n-\t\tmemoryManager.reserveMemory(owner, MemoryType.HEAP, PAGE_SIZE);\n-\t\tmemoryManager.releaseMemory(owner, MemoryType.HEAP, PAGE_SIZE / 2);\n-\t\tmemoryManager.releaseMemory(owner, MemoryType.HEAP, PAGE_SIZE);\n-\t\theapMemoryLeft = memoryManager.availableMemory(MemoryType.HEAP);\n-\t\tassertEquals(\"Memory leak happens\", totalHeapMemorySize - PAGE_SIZE, heapMemoryLeft);\n \t\tmemoryManager.releaseAllMemory(owner2, MemoryType.HEAP);\n \t}\n \n \t@Test\n-\tpublic void testCannotReserveBeyondTheLimit() throws MemoryReservationException {\n+\tpublic void testMemoryReleaseMoreThanReserved() throws MemoryReservationException {\n \t\tObject owner = new Object();\n-\t\tmemoryManager.reserveMemory(owner, MemoryType.OFF_HEAP, memoryManager.getMemorySizeByType(MemoryType.OFF_HEAP));\n-\t\ttestCannotReserveAnymore(MemoryType.OFF_HEAP, 1L);\n-\t\tmemoryManager.releaseAllMemory(owner, MemoryType.OFF_HEAP);\n-\t}\n+\t\tObject owner2 = new Object();\n+\t\tlong totalHeapMemorySize = memoryManager.availableMemory(MemoryType.HEAP);\n+\t\t// to prevent memory size exceeding the maximum, reserve some memory from another owner.\n+\t\tmemoryManager.reserveMemory(owner2, MemoryType.HEAP, PAGE_SIZE);\n \n-\t@Test\n-\tpublic void testMemoryTooBigReservation() {\n-\t\tlong size = memoryManager.getMemorySizeByType(MemoryType.HEAP) + PAGE_SIZE;\n-\t\ttestCannotReserveAnymore(MemoryType.HEAP, size);\n+\t\t// release more than reserved size\n+\t\tmemoryManager.reserveMemory(owner, MemoryType.HEAP, PAGE_SIZE);\n+\t\tmemoryManager.releaseMemory(owner, MemoryType.HEAP, PAGE_SIZE * 2);\n+\t\tlong heapMemoryLeft = memoryManager.availableMemory(MemoryType.HEAP);\n+\t\tassertEquals(\"Memory leak happens\", totalHeapMemorySize - PAGE_SIZE, heapMemoryLeft);\n+\t\tmemoryManager.releaseAllMemory(owner2, MemoryType.HEAP);\n \t}\n \n \t@Test\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI1NDY3MQ==", "url": "https://github.com/apache/flink/pull/11025#discussion_r375254671", "bodyText": "I'd suggest to change this block into:\npublic void releaseMemory(Object owner, MemoryType memoryType, long size) {\n\tcheckMemoryReservationPreconditions(owner, memoryType, size);\n\tif (size == 0L) {\n\t\treturn;\n\t}\n\n\treservedMemory.compute(owner, (o, reservations) -> {\n\t\tif (reservations != null) {\n\t\t\treservations.compute(\n\t\t\t\tmemoryType,\n\t\t\t\t(mt, currentlyReserved) -> {\n\t\t\t\t\tlong newReservedMemory = 0;\n\t\t\t\t\tif (currentlyReserved != null) {\n\t\t\t\t\t\tif (currentlyReserved < size) {\n\t\t\t\t\t\t\tLOG.warn(\n\t\t\t\t\t\t\t\t\"Trying to release more memory {} than it was reserved {} so far for the owner {}\",\n\t\t\t\t\t\t\t\tsize,\n\t\t\t\t\t\t\t\tcurrentlyReserved,\n\t\t\t\t\t\t\t\towner);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tnewReservedMemory = releaseAndCalculateReservedMemory(size, memoryType, currentlyReserved);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn newReservedMemory == 0 ? null : newReservedMemory;\n\t\t\t\t});\n\t\t}\n\t\t//noinspection ReturnOfNull\n\t\treturn reservations == null || reservations.isEmpty() ? null : reservations;\n\t});\n}\n\nprivate long releaseAndCalculateReservedMemory(long memoryToFree, MemoryType memoryType, long currentlyReserved) {\n\tfinal long effectiveMemoryToRelease = Math.min(currentlyReserved, memoryToFree);\n\tbudgetByType.releaseBudgetForKey(memoryType, effectiveMemoryToRelease);\n\n\treturn currentlyReserved - effectiveMemoryToRelease;\n}", "author": "tillrohrmann", "createdAt": "2020-02-05T13:30:56Z", "path": "flink-runtime/src/main/java/org/apache/flink/runtime/memory/MemoryManager.java", "diffHunk": "@@ -501,17 +503,21 @@ public void releaseMemory(Object owner, MemoryType memoryType, long size) {\n \t\t\t\t\t\t\t\tsize,\n \t\t\t\t\t\t\t\tcurrentlyReserved == null ? 0 : currentlyReserved,\n \t\t\t\t\t\t\t\towner);\n+\t\t\t\t\t\t\tif (currentlyReserved != null) {\n+\t\t\t\t\t\t\t\treleasedSize.set(currentlyReserved);\n+\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t//noinspection ReturnOfNull\n \t\t\t\t\t\t\treturn null;\n \t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\treleasedSize.set(size);\n \t\t\t\t\t\t\treturn currentlyReserved - size;\n \t\t\t\t\t\t}\n \t\t\t\t\t});\n \t\t\t}\n \t\t\t//noinspection ReturnOfNull\n \t\t\treturn reservations == null || reservations.isEmpty() ? null : reservations;\n \t\t});\n-\t\tbudgetByType.releaseBudgetForKey(memoryType, size);\n+\t\tbudgetByType.releaseBudgetForKey(memoryType, releasedSize.get());", "originalCommit": "7d609a8c9220aabc92acff8adff28968e1780fc0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d73ea754eb0bf68b062c4981c1c8bbcd370fdbb0", "chunk": "diff --git a/flink-runtime/src/main/java/org/apache/flink/runtime/memory/MemoryManager.java b/flink-runtime/src/main/java/org/apache/flink/runtime/memory/MemoryManager.java\nindex 6d5dca15475..3bcfa7c285e 100644\n--- a/flink-runtime/src/main/java/org/apache/flink/runtime/memory/MemoryManager.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/memory/MemoryManager.java\n\n@@ -491,33 +490,37 @@ public class MemoryManager {\n \t\t\treturn;\n \t\t}\n \n-\t\tAtomicLong releasedSize = new AtomicLong();\n \t\treservedMemory.compute(owner, (o, reservations) -> {\n \t\t\tif (reservations != null) {\n \t\t\t\treservations.compute(\n \t\t\t\t\tmemoryType,\n \t\t\t\t\t(mt, currentlyReserved) -> {\n-\t\t\t\t\t\tif (currentlyReserved == null || currentlyReserved < size) {\n-\t\t\t\t\t\t\tLOG.warn(\n-\t\t\t\t\t\t\t\t\"Trying to release more memory {} than it was reserved {} so far for the owner {}\",\n-\t\t\t\t\t\t\t\tsize,\n-\t\t\t\t\t\t\t\tcurrentlyReserved == null ? 0 : currentlyReserved,\n-\t\t\t\t\t\t\t\towner);\n-\t\t\t\t\t\t\tif (currentlyReserved != null) {\n-\t\t\t\t\t\t\t\treleasedSize.set(currentlyReserved);\n+\t\t\t\t\t\tlong newReservedMemory = 0;\n+\t\t\t\t\t\tif (currentlyReserved != null) {\n+\t\t\t\t\t\t\tif (currentlyReserved < size) {\n+\t\t\t\t\t\t\t\tLOG.warn(\n+\t\t\t\t\t\t\t\t\t\"Trying to release more memory {} than it was reserved {} so far for the owner {}\",\n+\t\t\t\t\t\t\t\t\tsize,\n+\t\t\t\t\t\t\t\t\tcurrentlyReserved,\n+\t\t\t\t\t\t\t\t\towner);\n \t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t//noinspection ReturnOfNull\n-\t\t\t\t\t\t\treturn null;\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\treleasedSize.set(size);\n-\t\t\t\t\t\t\treturn currentlyReserved - size;\n+\n+\t\t\t\t\t\t\tnewReservedMemory = releaseAndCalculateReservedMemory(size, memoryType, currentlyReserved);\n \t\t\t\t\t\t}\n+\n+\t\t\t\t\t\treturn newReservedMemory == 0 ? null : newReservedMemory;\n \t\t\t\t\t});\n \t\t\t}\n \t\t\t//noinspection ReturnOfNull\n \t\t\treturn reservations == null || reservations.isEmpty() ? null : reservations;\n \t\t});\n-\t\tbudgetByType.releaseBudgetForKey(memoryType, releasedSize.get());\n+\t}\n+\n+\tprivate long releaseAndCalculateReservedMemory(long memoryToFree, MemoryType memoryType, long currentlyReserved) {\n+\t\tfinal long effectiveMemoryToRelease = Math.min(currentlyReserved, memoryToFree);\n+\t\tbudgetByType.releaseBudgetForKey(memoryType, effectiveMemoryToRelease);\n+\n+\t\treturn currentlyReserved - effectiveMemoryToRelease;\n \t}\n \n \tprivate void checkMemoryReservationPreconditions(Object owner, MemoryType memoryType, long size) {\n"}}, {"oid": "d73ea754eb0bf68b062c4981c1c8bbcd370fdbb0", "url": "https://github.com/apache/flink/commit/d73ea754eb0bf68b062c4981c1c8bbcd370fdbb0", "message": "Address review comments", "committedDate": "2020-02-05T17:03:07Z", "type": "commit"}, {"oid": "eaa43635bc165b55a7dbc170b4cba7fb28d5979e", "url": "https://github.com/apache/flink/commit/eaa43635bc165b55a7dbc170b4cba7fb28d5979e", "message": "Minor: remove unused import", "committedDate": "2020-02-05T17:04:55Z", "type": "commit"}, {"oid": "ea980f386e41dac4d34bf6950f9ed1094ac6f6f3", "url": "https://github.com/apache/flink/commit/ea980f386e41dac4d34bf6950f9ed1094ac6f6f3", "message": "Minor: Reinforce test case not to exceeding the budget limit with multiple memory release", "committedDate": "2020-02-05T17:31:31Z", "type": "commit"}]}