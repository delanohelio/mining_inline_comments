{"pr_number": 13760, "pr_title": "[FLINK-19627][table-runtime] Introduce multiple input operator for batch", "pr_createdAt": "2020-10-23T07:06:14Z", "pr_url": "https://github.com/apache/flink/pull/13760", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDgyODM3Ng==", "url": "https://github.com/apache/flink/pull/13760#discussion_r510828376", "bodyText": "nit: use line comment instead of block comment", "author": "tsreaper", "createdAt": "2020-10-23T11:49:55Z", "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/InputSelectionHandler.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.multipleinput.input;\n+\n+import org.apache.flink.streaming.api.operators.InputSelection;\n+import org.apache.flink.streaming.api.operators.MultipleInputStreamOperator;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+/**\n+ * This handler is mainly used for selecting the next available input index\n+ * according to read priority in {@link MultipleInputStreamOperator}.\n+ *\n+ * <p>Input read order: the input with high priority (the value of read order is lower)\n+ * will be read first, the inputs with same priorities will be read fairly.\n+ */\n+public class InputSelectionHandler {\n+\tprivate final List<InputSpec> inputSpecs;\n+\tprivate final int numberOfInput;\n+\t/**\n+\t * All inputs ids sorted by priority.\n+\t */\n+\tprivate final List<List<Integer>> sortedAvailableInputs;", "originalCommit": "3dcac98f384df333595164ab13f022edb2c62f26", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4871bcd0e44d61ecf8e02364759266214005a9b2", "chunk": "diff --git a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/InputSelectionHandler.java b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/InputSelectionHandler.java\nindex 28fafa139e..fa8dd21c57 100644\n--- a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/InputSelectionHandler.java\n+++ b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/InputSelectionHandler.java\n\n@@ -21,13 +21,14 @@ package org.apache.flink.table.runtime.operators.multipleinput.input;\n import org.apache.flink.streaming.api.operators.InputSelection;\n import org.apache.flink.streaming.api.operators.MultipleInputStreamOperator;\n \n-import javax.annotation.Nullable;\n-\n import java.util.ArrayList;\n+import java.util.LinkedList;\n import java.util.List;\n import java.util.SortedMap;\n import java.util.TreeMap;\n \n+import static org.apache.flink.util.Preconditions.checkState;\n+\n /**\n  * This handler is mainly used for selecting the next available input index\n  * according to read priority in {@link MultipleInputStreamOperator}.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDgzMjEwMg==", "url": "https://github.com/apache/flink/pull/13760#discussion_r510832102", "bodyText": "nit: Preconditions.checkState?", "author": "tsreaper", "createdAt": "2020-10-23T11:57:30Z", "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/InputSelectionHandler.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.multipleinput.input;\n+\n+import org.apache.flink.streaming.api.operators.InputSelection;\n+import org.apache.flink.streaming.api.operators.MultipleInputStreamOperator;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+/**\n+ * This handler is mainly used for selecting the next available input index\n+ * according to read priority in {@link MultipleInputStreamOperator}.\n+ *\n+ * <p>Input read order: the input with high priority (the value of read order is lower)\n+ * will be read first, the inputs with same priorities will be read fairly.\n+ */\n+public class InputSelectionHandler {\n+\tprivate final List<InputSpec> inputSpecs;\n+\tprivate final int numberOfInput;\n+\t/**\n+\t * All inputs ids sorted by priority.\n+\t */\n+\tprivate final List<List<Integer>> sortedAvailableInputs;\n+\tprivate InputSelection inputSelection;\n+\n+\tpublic InputSelectionHandler(List<InputSpec> inputSpecs) {\n+\t\tthis.inputSpecs = inputSpecs;\n+\t\tthis.numberOfInput = inputSpecs.size();\n+\t\tthis.sortedAvailableInputs = buildSortedAvailableInputs();\n+\t\t// read the highest priority inputs first\n+\t\tthis.inputSelection = buildInputSelection(sortedAvailableInputs.get(0));\n+\t}\n+\n+\tpublic InputSelection getInputSelection() {\n+\t\treturn inputSelection;\n+\t}\n+\n+\tpublic void endInput(int inputId) {\n+\t\tList<Integer> inputIds = sortedAvailableInputs.get(0);\n+\t\tif (!inputIds.remove(Integer.valueOf(inputId))) {\n+\t\t\tthrow new RuntimeException(\"This should not happen.\");\n+\t\t}", "originalCommit": "3dcac98f384df333595164ab13f022edb2c62f26", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4871bcd0e44d61ecf8e02364759266214005a9b2", "chunk": "diff --git a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/InputSelectionHandler.java b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/InputSelectionHandler.java\nindex 28fafa139e..fa8dd21c57 100644\n--- a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/InputSelectionHandler.java\n+++ b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/InputSelectionHandler.java\n\n@@ -21,13 +21,14 @@ package org.apache.flink.table.runtime.operators.multipleinput.input;\n import org.apache.flink.streaming.api.operators.InputSelection;\n import org.apache.flink.streaming.api.operators.MultipleInputStreamOperator;\n \n-import javax.annotation.Nullable;\n-\n import java.util.ArrayList;\n+import java.util.LinkedList;\n import java.util.List;\n import java.util.SortedMap;\n import java.util.TreeMap;\n \n+import static org.apache.flink.util.Preconditions.checkState;\n+\n /**\n  * This handler is mainly used for selecting the next available input index\n  * according to read priority in {@link MultipleInputStreamOperator}.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDgzMjQ4Mg==", "url": "https://github.com/apache/flink/pull/13760#discussion_r510832482", "bodyText": "Use LinkedList instead, as we need to remove its head frequently in endInput.", "author": "tsreaper", "createdAt": "2020-10-23T11:58:19Z", "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/InputSelectionHandler.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.multipleinput.input;\n+\n+import org.apache.flink.streaming.api.operators.InputSelection;\n+import org.apache.flink.streaming.api.operators.MultipleInputStreamOperator;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+/**\n+ * This handler is mainly used for selecting the next available input index\n+ * according to read priority in {@link MultipleInputStreamOperator}.\n+ *\n+ * <p>Input read order: the input with high priority (the value of read order is lower)\n+ * will be read first, the inputs with same priorities will be read fairly.\n+ */\n+public class InputSelectionHandler {\n+\tprivate final List<InputSpec> inputSpecs;\n+\tprivate final int numberOfInput;\n+\t/**\n+\t * All inputs ids sorted by priority.\n+\t */\n+\tprivate final List<List<Integer>> sortedAvailableInputs;\n+\tprivate InputSelection inputSelection;\n+\n+\tpublic InputSelectionHandler(List<InputSpec> inputSpecs) {\n+\t\tthis.inputSpecs = inputSpecs;\n+\t\tthis.numberOfInput = inputSpecs.size();\n+\t\tthis.sortedAvailableInputs = buildSortedAvailableInputs();\n+\t\t// read the highest priority inputs first\n+\t\tthis.inputSelection = buildInputSelection(sortedAvailableInputs.get(0));\n+\t}\n+\n+\tpublic InputSelection getInputSelection() {\n+\t\treturn inputSelection;\n+\t}\n+\n+\tpublic void endInput(int inputId) {\n+\t\tList<Integer> inputIds = sortedAvailableInputs.get(0);\n+\t\tif (!inputIds.remove(Integer.valueOf(inputId))) {\n+\t\t\tthrow new RuntimeException(\"This should not happen.\");\n+\t\t}\n+\t\tif (inputIds.isEmpty()) {\n+\t\t\t// remove the finished input\n+\t\t\tsortedAvailableInputs.remove(0);\n+\n+\t\t\tif (sortedAvailableInputs.isEmpty()) {\n+\t\t\t\t// all input are finished\n+\t\t\t\tinputIds = null;\n+\t\t\t} else {\n+\t\t\t\t// read next one\n+\t\t\t\tinputIds = sortedAvailableInputs.get(0);\n+\t\t\t}\n+\t\t\tinputSelection = buildInputSelection(inputIds);\n+\t\t}\n+\t}\n+\n+\tprivate List<List<Integer>> buildSortedAvailableInputs() {\n+\t\tfinal SortedMap<Integer, List<Integer>> orderedAvailableInputIds = new TreeMap<>();\n+\t\tfor (InputSpec inputSpec : inputSpecs) {\n+\t\t\tList<Integer> inputIds = orderedAvailableInputIds\n+\t\t\t\t\t.computeIfAbsent(inputSpec.getReadOrder(), k -> new ArrayList<>());\n+\t\t\tinputIds.add(inputSpec.getMultipleInputId());\n+\t\t}\n+\t\treturn new ArrayList<>(orderedAvailableInputIds.values());", "originalCommit": "3dcac98f384df333595164ab13f022edb2c62f26", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4871bcd0e44d61ecf8e02364759266214005a9b2", "chunk": "diff --git a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/InputSelectionHandler.java b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/InputSelectionHandler.java\nindex 28fafa139e..fa8dd21c57 100644\n--- a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/InputSelectionHandler.java\n+++ b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/InputSelectionHandler.java\n\n@@ -21,13 +21,14 @@ package org.apache.flink.table.runtime.operators.multipleinput.input;\n import org.apache.flink.streaming.api.operators.InputSelection;\n import org.apache.flink.streaming.api.operators.MultipleInputStreamOperator;\n \n-import javax.annotation.Nullable;\n-\n import java.util.ArrayList;\n+import java.util.LinkedList;\n import java.util.List;\n import java.util.SortedMap;\n import java.util.TreeMap;\n \n+import static org.apache.flink.util.Preconditions.checkState;\n+\n /**\n  * This handler is mainly used for selecting the next available input index\n  * according to read priority in {@link MultipleInputStreamOperator}.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDgzMzc0OQ==", "url": "https://github.com/apache/flink/pull/13760#discussion_r510833749", "bodyText": "inputIds might be null", "author": "tsreaper", "createdAt": "2020-10-23T12:00:44Z", "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/InputSelectionHandler.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.multipleinput.input;\n+\n+import org.apache.flink.streaming.api.operators.InputSelection;\n+import org.apache.flink.streaming.api.operators.MultipleInputStreamOperator;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+/**\n+ * This handler is mainly used for selecting the next available input index\n+ * according to read priority in {@link MultipleInputStreamOperator}.\n+ *\n+ * <p>Input read order: the input with high priority (the value of read order is lower)\n+ * will be read first, the inputs with same priorities will be read fairly.\n+ */\n+public class InputSelectionHandler {\n+\tprivate final List<InputSpec> inputSpecs;\n+\tprivate final int numberOfInput;\n+\t/**\n+\t * All inputs ids sorted by priority.\n+\t */\n+\tprivate final List<List<Integer>> sortedAvailableInputs;\n+\tprivate InputSelection inputSelection;\n+\n+\tpublic InputSelectionHandler(List<InputSpec> inputSpecs) {\n+\t\tthis.inputSpecs = inputSpecs;\n+\t\tthis.numberOfInput = inputSpecs.size();\n+\t\tthis.sortedAvailableInputs = buildSortedAvailableInputs();\n+\t\t// read the highest priority inputs first\n+\t\tthis.inputSelection = buildInputSelection(sortedAvailableInputs.get(0));\n+\t}\n+\n+\tpublic InputSelection getInputSelection() {\n+\t\treturn inputSelection;\n+\t}\n+\n+\tpublic void endInput(int inputId) {\n+\t\tList<Integer> inputIds = sortedAvailableInputs.get(0);\n+\t\tif (!inputIds.remove(Integer.valueOf(inputId))) {\n+\t\t\tthrow new RuntimeException(\"This should not happen.\");\n+\t\t}\n+\t\tif (inputIds.isEmpty()) {\n+\t\t\t// remove the finished input\n+\t\t\tsortedAvailableInputs.remove(0);\n+\n+\t\t\tif (sortedAvailableInputs.isEmpty()) {\n+\t\t\t\t// all input are finished\n+\t\t\t\tinputIds = null;\n+\t\t\t} else {\n+\t\t\t\t// read next one\n+\t\t\t\tinputIds = sortedAvailableInputs.get(0);\n+\t\t\t}\n+\t\t\tinputSelection = buildInputSelection(inputIds);", "originalCommit": "3dcac98f384df333595164ab13f022edb2c62f26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUzOTA2OA==", "url": "https://github.com/apache/flink/pull/13760#discussion_r511539068", "bodyText": "buildInputSelection already handles the null case", "author": "godfreyhe", "createdAt": "2020-10-25T02:52:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDgzMzc0OQ=="}], "type": "inlineReview", "revised_code": {"commit": "4871bcd0e44d61ecf8e02364759266214005a9b2", "chunk": "diff --git a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/InputSelectionHandler.java b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/InputSelectionHandler.java\nindex 28fafa139e..fa8dd21c57 100644\n--- a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/InputSelectionHandler.java\n+++ b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/InputSelectionHandler.java\n\n@@ -21,13 +21,14 @@ package org.apache.flink.table.runtime.operators.multipleinput.input;\n import org.apache.flink.streaming.api.operators.InputSelection;\n import org.apache.flink.streaming.api.operators.MultipleInputStreamOperator;\n \n-import javax.annotation.Nullable;\n-\n import java.util.ArrayList;\n+import java.util.LinkedList;\n import java.util.List;\n import java.util.SortedMap;\n import java.util.TreeMap;\n \n+import static org.apache.flink.util.Preconditions.checkState;\n+\n /**\n  * This handler is mainly used for selecting the next available input index\n  * according to read priority in {@link MultipleInputStreamOperator}.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDgzNDAzNQ==", "url": "https://github.com/apache/flink/pull/13760#discussion_r510834035", "bodyText": "Should be InputSelection.None according to the logic of endInput?", "author": "tsreaper", "createdAt": "2020-10-23T12:01:17Z", "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/InputSelectionHandler.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.multipleinput.input;\n+\n+import org.apache.flink.streaming.api.operators.InputSelection;\n+import org.apache.flink.streaming.api.operators.MultipleInputStreamOperator;\n+\n+import javax.annotation.Nullable;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n+\n+/**\n+ * This handler is mainly used for selecting the next available input index\n+ * according to read priority in {@link MultipleInputStreamOperator}.\n+ *\n+ * <p>Input read order: the input with high priority (the value of read order is lower)\n+ * will be read first, the inputs with same priorities will be read fairly.\n+ */\n+public class InputSelectionHandler {\n+\tprivate final List<InputSpec> inputSpecs;\n+\tprivate final int numberOfInput;\n+\t/**\n+\t * All inputs ids sorted by priority.\n+\t */\n+\tprivate final List<List<Integer>> sortedAvailableInputs;\n+\tprivate InputSelection inputSelection;\n+\n+\tpublic InputSelectionHandler(List<InputSpec> inputSpecs) {\n+\t\tthis.inputSpecs = inputSpecs;\n+\t\tthis.numberOfInput = inputSpecs.size();\n+\t\tthis.sortedAvailableInputs = buildSortedAvailableInputs();\n+\t\t// read the highest priority inputs first\n+\t\tthis.inputSelection = buildInputSelection(sortedAvailableInputs.get(0));\n+\t}\n+\n+\tpublic InputSelection getInputSelection() {\n+\t\treturn inputSelection;\n+\t}\n+\n+\tpublic void endInput(int inputId) {\n+\t\tList<Integer> inputIds = sortedAvailableInputs.get(0);\n+\t\tif (!inputIds.remove(Integer.valueOf(inputId))) {\n+\t\t\tthrow new RuntimeException(\"This should not happen.\");\n+\t\t}\n+\t\tif (inputIds.isEmpty()) {\n+\t\t\t// remove the finished input\n+\t\t\tsortedAvailableInputs.remove(0);\n+\n+\t\t\tif (sortedAvailableInputs.isEmpty()) {\n+\t\t\t\t// all input are finished\n+\t\t\t\tinputIds = null;\n+\t\t\t} else {\n+\t\t\t\t// read next one\n+\t\t\t\tinputIds = sortedAvailableInputs.get(0);\n+\t\t\t}\n+\t\t\tinputSelection = buildInputSelection(inputIds);\n+\t\t}\n+\t}\n+\n+\tprivate List<List<Integer>> buildSortedAvailableInputs() {\n+\t\tfinal SortedMap<Integer, List<Integer>> orderedAvailableInputIds = new TreeMap<>();\n+\t\tfor (InputSpec inputSpec : inputSpecs) {\n+\t\t\tList<Integer> inputIds = orderedAvailableInputIds\n+\t\t\t\t\t.computeIfAbsent(inputSpec.getReadOrder(), k -> new ArrayList<>());\n+\t\t\tinputIds.add(inputSpec.getMultipleInputId());\n+\t\t}\n+\t\treturn new ArrayList<>(orderedAvailableInputIds.values());\n+\t}\n+\n+\tprivate InputSelection buildInputSelection(@Nullable List<Integer> inputIds) {\n+\t\tif (inputIds == null) {\n+\t\t\t// TODO throw exception ?\n+\t\t\treturn InputSelection.ALL;", "originalCommit": "3dcac98f384df333595164ab13f022edb2c62f26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUzOTAyMg==", "url": "https://github.com/apache/flink/pull/13760#discussion_r511539022", "bodyText": "None is not been defined in InputSelection", "author": "godfreyhe", "createdAt": "2020-10-25T02:51:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDgzNDAzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "4871bcd0e44d61ecf8e02364759266214005a9b2", "chunk": "diff --git a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/InputSelectionHandler.java b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/InputSelectionHandler.java\nindex 28fafa139e..fa8dd21c57 100644\n--- a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/InputSelectionHandler.java\n+++ b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/InputSelectionHandler.java\n\n@@ -21,13 +21,14 @@ package org.apache.flink.table.runtime.operators.multipleinput.input;\n import org.apache.flink.streaming.api.operators.InputSelection;\n import org.apache.flink.streaming.api.operators.MultipleInputStreamOperator;\n \n-import javax.annotation.Nullable;\n-\n import java.util.ArrayList;\n+import java.util.LinkedList;\n import java.util.List;\n import java.util.SortedMap;\n import java.util.TreeMap;\n \n+import static org.apache.flink.util.Preconditions.checkState;\n+\n /**\n  * This handler is mainly used for selecting the next available input index\n  * according to read priority in {@link MultipleInputStreamOperator}.\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg0MDcwMw==", "url": "https://github.com/apache/flink/pull/13760#discussion_r510840703", "bodyText": "FirstInputOfTwoInputs?", "author": "tsreaper", "createdAt": "2020-10-23T12:14:10Z", "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/FirstInputOfTwoInput.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.multipleinput.input;\n+\n+import org.apache.flink.streaming.api.operators.Input;\n+import org.apache.flink.streaming.api.operators.TwoInputStreamOperator;\n+import org.apache.flink.streaming.api.watermark.Watermark;\n+import org.apache.flink.streaming.runtime.streamrecord.LatencyMarker;\n+import org.apache.flink.streaming.runtime.streamrecord.StreamRecord;\n+import org.apache.flink.table.data.RowData;\n+\n+/**\n+ * {@link Input} for the first input of {@link SecondInputOfTwoInput}.\n+ */\n+public class FirstInputOfTwoInput extends InputBase {", "originalCommit": "3dcac98f384df333595164ab13f022edb2c62f26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUzOTEwOA==", "url": "https://github.com/apache/flink/pull/13760#discussion_r511539108", "bodyText": "There are many classes named TwoInputXXX", "author": "godfreyhe", "createdAt": "2020-10-25T02:53:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg0MDcwMw=="}], "type": "inlineReview", "revised_code": {"commit": "4871bcd0e44d61ecf8e02364759266214005a9b2", "chunk": "diff --git a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/FirstInputOfTwoInput.java b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/FirstInputOfTwoInput.java\nindex fb92a1acf9..701238fcf2 100644\n--- a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/FirstInputOfTwoInput.java\n+++ b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/FirstInputOfTwoInput.java\n\n@@ -26,7 +26,7 @@ import org.apache.flink.streaming.runtime.streamrecord.StreamRecord;\n import org.apache.flink.table.data.RowData;\n \n /**\n- * {@link Input} for the first input of {@link SecondInputOfTwoInput}.\n+ * {@link Input} for the first input of {@link TwoInputStreamOperator}.\n  */\n public class FirstInputOfTwoInput extends InputBase {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg0MDc5NQ==", "url": "https://github.com/apache/flink/pull/13760#discussion_r510840795", "bodyText": "ditto", "author": "tsreaper", "createdAt": "2020-10-23T12:14:21Z", "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/SecondInputOfTwoInput.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.multipleinput.input;\n+\n+import org.apache.flink.streaming.api.operators.Input;\n+import org.apache.flink.streaming.api.operators.TwoInputStreamOperator;\n+import org.apache.flink.streaming.api.watermark.Watermark;\n+import org.apache.flink.streaming.runtime.streamrecord.LatencyMarker;\n+import org.apache.flink.streaming.runtime.streamrecord.StreamRecord;\n+import org.apache.flink.table.data.RowData;\n+\n+/**\n+ * {@link Input} for the second input of {@link SecondInputOfTwoInput}.\n+ */\n+public class SecondInputOfTwoInput extends InputBase {", "originalCommit": "3dcac98f384df333595164ab13f022edb2c62f26", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4871bcd0e44d61ecf8e02364759266214005a9b2", "chunk": "diff --git a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/SecondInputOfTwoInput.java b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/SecondInputOfTwoInput.java\nindex 6659343ebf..58102106d6 100644\n--- a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/SecondInputOfTwoInput.java\n+++ b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/SecondInputOfTwoInput.java\n\n@@ -26,7 +26,7 @@ import org.apache.flink.streaming.runtime.streamrecord.StreamRecord;\n import org.apache.flink.table.data.RowData;\n \n /**\n- * {@link Input} for the second input of {@link SecondInputOfTwoInput}.\n+ * {@link Input} for the second input of {@link TwoInputStreamOperator}.\n  */\n public class SecondInputOfTwoInput extends InputBase {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg0MDk4NA==", "url": "https://github.com/apache/flink/pull/13760#discussion_r510840984", "bodyText": "Should be TwoInputStreamOperator?", "author": "tsreaper", "createdAt": "2020-10-23T12:14:44Z", "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/FirstInputOfTwoInput.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.multipleinput.input;\n+\n+import org.apache.flink.streaming.api.operators.Input;\n+import org.apache.flink.streaming.api.operators.TwoInputStreamOperator;\n+import org.apache.flink.streaming.api.watermark.Watermark;\n+import org.apache.flink.streaming.runtime.streamrecord.LatencyMarker;\n+import org.apache.flink.streaming.runtime.streamrecord.StreamRecord;\n+import org.apache.flink.table.data.RowData;\n+\n+/**\n+ * {@link Input} for the first input of {@link SecondInputOfTwoInput}.", "originalCommit": "3dcac98f384df333595164ab13f022edb2c62f26", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4871bcd0e44d61ecf8e02364759266214005a9b2", "chunk": "diff --git a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/FirstInputOfTwoInput.java b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/FirstInputOfTwoInput.java\nindex fb92a1acf9..701238fcf2 100644\n--- a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/FirstInputOfTwoInput.java\n+++ b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/FirstInputOfTwoInput.java\n\n@@ -26,7 +26,7 @@ import org.apache.flink.streaming.runtime.streamrecord.StreamRecord;\n import org.apache.flink.table.data.RowData;\n \n /**\n- * {@link Input} for the first input of {@link SecondInputOfTwoInput}.\n+ * {@link Input} for the first input of {@link TwoInputStreamOperator}.\n  */\n public class FirstInputOfTwoInput extends InputBase {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg0MTEyOA==", "url": "https://github.com/apache/flink/pull/13760#discussion_r510841128", "bodyText": "ditto", "author": "tsreaper", "createdAt": "2020-10-23T12:14:58Z", "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/SecondInputOfTwoInput.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.multipleinput.input;\n+\n+import org.apache.flink.streaming.api.operators.Input;\n+import org.apache.flink.streaming.api.operators.TwoInputStreamOperator;\n+import org.apache.flink.streaming.api.watermark.Watermark;\n+import org.apache.flink.streaming.runtime.streamrecord.LatencyMarker;\n+import org.apache.flink.streaming.runtime.streamrecord.StreamRecord;\n+import org.apache.flink.table.data.RowData;\n+\n+/**\n+ * {@link Input} for the second input of {@link SecondInputOfTwoInput}.", "originalCommit": "3dcac98f384df333595164ab13f022edb2c62f26", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4871bcd0e44d61ecf8e02364759266214005a9b2", "chunk": "diff --git a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/SecondInputOfTwoInput.java b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/SecondInputOfTwoInput.java\nindex 6659343ebf..58102106d6 100644\n--- a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/SecondInputOfTwoInput.java\n+++ b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/input/SecondInputOfTwoInput.java\n\n@@ -26,7 +26,7 @@ import org.apache.flink.streaming.runtime.streamrecord.StreamRecord;\n import org.apache.flink.table.data.RowData;\n \n /**\n- * {@link Input} for the second input of {@link SecondInputOfTwoInput}.\n+ * {@link Input} for the second input of {@link TwoInputStreamOperator}.\n  */\n public class SecondInputOfTwoInput extends InputBase {\n \n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg0NTM0OA==", "url": "https://github.com/apache/flink/pull/13760#discussion_r510845348", "bodyText": "TwoInput -> TwoInputs. There are some other class names with the same issue.", "author": "tsreaper", "createdAt": "2020-10-23T12:22:27Z", "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/output/CopyingFirstInputOfTwoInputStreamOperatorOutput.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.multipleinput.output;\n+\n+import org.apache.flink.api.common.typeutils.TypeSerializer;\n+import org.apache.flink.streaming.api.operators.Output;\n+import org.apache.flink.streaming.api.operators.TwoInputStreamOperator;\n+import org.apache.flink.streaming.runtime.streamrecord.StreamRecord;\n+import org.apache.flink.table.data.RowData;\n+\n+/**\n+ * An {@link Output} that can be used to emit copying elements and other messages\n+ * for the first input of {@link TwoInputStreamOperator}.\n+ */\n+public class CopyingFirstInputOfTwoInputStreamOperatorOutput extends FirstInputOfTwoInputStreamOperatorOutput {", "originalCommit": "97e346b1c872e148a2a9fa6f4f6fa1f6142f2cbe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4871bcd0e44d61ecf8e02364759266214005a9b2", "chunk": "diff --git a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/output/CopyingFirstInputOfTwoInputStreamOperatorOutput.java b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/output/CopyingFirstInputOfTwoInputStreamOperatorOutput.java\ndeleted file mode 100644\nindex c01aa07599..0000000000\n--- a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/output/CopyingFirstInputOfTwoInputStreamOperatorOutput.java\n+++ /dev/null\n\n@@ -1,57 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.flink.table.runtime.operators.multipleinput.output;\n-\n-import org.apache.flink.api.common.typeutils.TypeSerializer;\n-import org.apache.flink.streaming.api.operators.Output;\n-import org.apache.flink.streaming.api.operators.TwoInputStreamOperator;\n-import org.apache.flink.streaming.runtime.streamrecord.StreamRecord;\n-import org.apache.flink.table.data.RowData;\n-\n-/**\n- * An {@link Output} that can be used to emit copying elements and other messages\n- * for the first input of {@link TwoInputStreamOperator}.\n- */\n-public class CopyingFirstInputOfTwoInputStreamOperatorOutput extends FirstInputOfTwoInputStreamOperatorOutput {\n-\n-\tprivate final TwoInputStreamOperator<RowData, RowData, RowData> operator;\n-\tprivate final TypeSerializer<RowData> serializer;\n-\n-\tpublic CopyingFirstInputOfTwoInputStreamOperatorOutput(\n-\t\t\tTwoInputStreamOperator<RowData, RowData, RowData> operator,\n-\t\t\tTypeSerializer<RowData> serializer) {\n-\t\tsuper(operator);\n-\t\tthis.operator = operator;\n-\t\tthis.serializer = serializer;\n-\t}\n-\n-\tprotected <X> void pushToOperator(StreamRecord<X> record) {\n-\t\ttry {\n-\t\t\t// we know that the given outputTag matches our OutputTag so the record\n-\t\t\t// must be of the type that our operator expects.\n-\t\t\t@SuppressWarnings(\"unchecked\")\n-\t\t\tStreamRecord<RowData> castRecord = (StreamRecord<RowData>) record;\n-\t\t\tStreamRecord<RowData> copy = castRecord.copy(serializer.copy(castRecord.getValue()));\n-\n-\t\t\toperator.processElement1(copy);\n-\t\t} catch (Exception e) {\n-\t\t\tthrow new ExceptionInMultipleInputOperatorException(e);\n-\t\t}\n-\t}\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg0OTg1MA==", "url": "https://github.com/apache/flink/pull/13760#discussion_r510849850", "bodyText": "MultipleInputOperatorException?", "author": "tsreaper", "createdAt": "2020-10-23T12:30:54Z", "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/output/ExceptionInMultipleInputOperatorException.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.multipleinput.output;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.streaming.api.operators.MultipleInputStreamOperator;\n+import org.apache.flink.util.WrappingRuntimeException;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * A special exception that signifies that the cause exception came from a {@link MultipleInputStreamOperator}.\n+ */\n+@Internal\n+public class ExceptionInMultipleInputOperatorException extends WrappingRuntimeException {", "originalCommit": "97e346b1c872e148a2a9fa6f4f6fa1f6142f2cbe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUzOTI5OA==", "url": "https://github.com/apache/flink/pull/13760#discussion_r511539298", "bodyText": "similar to ExceptionInChainedOperatorException", "author": "godfreyhe", "createdAt": "2020-10-25T02:56:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg0OTg1MA=="}], "type": "inlineReview", "revised_code": {"commit": "4871bcd0e44d61ecf8e02364759266214005a9b2", "chunk": "diff --git a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/output/ExceptionInMultipleInputOperatorException.java b/flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/SyncPreferredLocationsRetriever.java\nsimilarity index 50%\nrename from flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/output/ExceptionInMultipleInputOperatorException.java\nrename to flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/SyncPreferredLocationsRetriever.java\nindex 1b1fbeaaf1..722b918b76 100644\n--- a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/output/ExceptionInMultipleInputOperatorException.java\n+++ b/flink-runtime/src/main/java/org/apache/flink/runtime/scheduler/SyncPreferredLocationsRetriever.java\n\n@@ -16,27 +16,28 @@\n  * limitations under the License.\n  */\n \n-package org.apache.flink.table.runtime.operators.multipleinput.output;\n+package org.apache.flink.runtime.scheduler;\n \n-import org.apache.flink.annotation.Internal;\n-import org.apache.flink.streaming.api.operators.MultipleInputStreamOperator;\n-import org.apache.flink.util.WrappingRuntimeException;\n+import org.apache.flink.runtime.scheduler.strategy.ExecutionVertexID;\n+import org.apache.flink.runtime.taskmanager.TaskManagerLocation;\n \n-import static java.util.Objects.requireNonNull;\n+import java.util.Collection;\n+import java.util.Set;\n \n /**\n- * A special exception that signifies that the cause exception came from a {@link MultipleInputStreamOperator}.\n+ * Component to retrieve the preferred locations of an execution vertex.\n  */\n-@Internal\n-public class ExceptionInMultipleInputOperatorException extends WrappingRuntimeException {\n+@FunctionalInterface\n+public interface SyncPreferredLocationsRetriever {\n \n-\tprivate static final long serialVersionUID = 1L;\n-\n-\tpublic ExceptionInMultipleInputOperatorException(Throwable cause) {\n-\t\tthis(\"Could not forward element to next operator\", cause);\n-\t}\n-\n-\tpublic ExceptionInMultipleInputOperatorException(String message, Throwable cause) {\n-\t\tsuper(message, requireNonNull(cause));\n-\t}\n+\t/**\n+\t * Returns preferred locations of an execution vertex.\n+\t *\n+\t * @param executionVertexId id of the execution vertex\n+\t * @param producersToIgnore producer vertices to ignore when calculating input locations\n+\t * @return future of preferred locations\n+\t */\n+\tCollection<TaskManagerLocation> getPreferredLocations(\n+\t\tExecutionVertexID executionVertexId,\n+\t\tSet<ExecutionVertexID> producersToIgnore);\n }\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTYwNTY4Ng==", "url": "https://github.com/apache/flink/pull/13760#discussion_r511605686", "bodyText": "This does not seem to be correct. See TableStreamOperator#computeMemorySize and its usage in SortMergeJoinOperator.", "author": "tsreaper", "createdAt": "2020-10-25T14:40:57Z", "path": "flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/BatchMultipleInputStreamOperator.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.table.runtime.operators.multipleinput;\n+\n+import org.apache.flink.configuration.Configuration;\n+import org.apache.flink.core.memory.ManagedMemoryUseCase;\n+import org.apache.flink.streaming.api.graph.StreamConfig;\n+import org.apache.flink.streaming.api.operators.BoundedMultiInput;\n+import org.apache.flink.streaming.api.operators.InputSelectable;\n+import org.apache.flink.streaming.api.operators.InputSelection;\n+import org.apache.flink.streaming.api.operators.StreamOperatorParameters;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.runtime.operators.multipleinput.input.InputSelectionHandler;\n+import org.apache.flink.table.runtime.operators.multipleinput.input.InputSpec;\n+\n+import java.util.List;\n+\n+import static org.apache.flink.util.Preconditions.checkState;\n+\n+/**\n+ * A {@link MultipleInputStreamOperatorBase} to handle batch operators.\n+ */\n+public class BatchMultipleInputStreamOperator\n+\t\textends MultipleInputStreamOperatorBase\n+\t\timplements BoundedMultiInput, InputSelectable {\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\tprivate final InputSelectionHandler inputSelectionHandler;\n+\n+\tpublic BatchMultipleInputStreamOperator(\n+\t\t\tStreamOperatorParameters<RowData> parameters,\n+\t\t\tList<InputSpec> inputSpecs,\n+\t\t\tList<TableOperatorWrapper<?>> headWrapper,\n+\t\t\tTableOperatorWrapper<?> tailWrapper) {\n+\t\tsuper(parameters, inputSpecs, headWrapper, tailWrapper);\n+\t\tinputSelectionHandler = new InputSelectionHandler(inputSpecs);\n+\t}\n+\n+\t@Override\n+\tpublic void endInput(int inputId) throws Exception {\n+\t\tinputSelectionHandler.endInput(inputId);\n+\t\tInputSpec inputSpec = inputSpecMap.get(inputId);\n+\t\tinputSpec.getOutput().endOperatorInput(inputSpec.getOutputOpInputId());\n+\t}\n+\n+\t@Override\n+\tpublic InputSelection nextSelection() {\n+\t\treturn inputSelectionHandler.getInputSelection();\n+\t}\n+\n+\tprotected StreamConfig createStreamConfig(\n+\t\t\tStreamOperatorParameters<RowData> multipleInputOperatorParameters,\n+\t\t\tTableOperatorWrapper<?> wrapper) {\n+\t\tStreamConfig streamConfig = super.createStreamConfig(multipleInputOperatorParameters, wrapper);\n+\t\tcheckState(wrapper.getManagedMemoryFraction() >= 0);\n+\t\tConfiguration taskManagerConfig = getRuntimeContext().getTaskManagerRuntimeInfo().getConfiguration();\n+\t\tdouble managedMemoryFraction = multipleInputOperatorParameters.getStreamConfig()\n+\t\t\t\t.getManagedMemoryFractionOperatorUseCaseOfSlot(\n+\t\t\t\t\t\tManagedMemoryUseCase.BATCH_OP,\n+\t\t\t\t\t\ttaskManagerConfig,\n+\t\t\t\t\t\tgetRuntimeContext().getUserCodeClassLoader()) *\n+\t\t\t\twrapper.getManagedMemoryFraction();\n+\t\tstreamConfig.setManagedMemoryFractionOperatorOfUseCase(ManagedMemoryUseCase.BATCH_OP, managedMemoryFraction);", "originalCommit": "8939025b83a01f41702926602ec1ed5abfbd98e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ1NjY4Mw==", "url": "https://github.com/apache/flink/pull/13760#discussion_r512456683", "bodyText": "The problem is not caused here, but by the integer overflow at line 100 in BatchExecMultipleInputNode. I have fixed it.", "author": "godfreyhe", "createdAt": "2020-10-27T07:07:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTYwNTY4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "4871bcd0e44d61ecf8e02364759266214005a9b2", "chunk": "diff --git a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/BatchMultipleInputStreamOperator.java b/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/BatchMultipleInputStreamOperator.java\ndeleted file mode 100644\nindex d56fdfcc8e..0000000000\n--- a/flink-table/flink-table-runtime-blink/src/main/java/org/apache/flink/table/runtime/operators/multipleinput/BatchMultipleInputStreamOperator.java\n+++ /dev/null\n\n@@ -1,83 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.flink.table.runtime.operators.multipleinput;\n-\n-import org.apache.flink.configuration.Configuration;\n-import org.apache.flink.core.memory.ManagedMemoryUseCase;\n-import org.apache.flink.streaming.api.graph.StreamConfig;\n-import org.apache.flink.streaming.api.operators.BoundedMultiInput;\n-import org.apache.flink.streaming.api.operators.InputSelectable;\n-import org.apache.flink.streaming.api.operators.InputSelection;\n-import org.apache.flink.streaming.api.operators.StreamOperatorParameters;\n-import org.apache.flink.table.data.RowData;\n-import org.apache.flink.table.runtime.operators.multipleinput.input.InputSelectionHandler;\n-import org.apache.flink.table.runtime.operators.multipleinput.input.InputSpec;\n-\n-import java.util.List;\n-\n-import static org.apache.flink.util.Preconditions.checkState;\n-\n-/**\n- * A {@link MultipleInputStreamOperatorBase} to handle batch operators.\n- */\n-public class BatchMultipleInputStreamOperator\n-\t\textends MultipleInputStreamOperatorBase\n-\t\timplements BoundedMultiInput, InputSelectable {\n-\tprivate static final long serialVersionUID = 1L;\n-\n-\tprivate final InputSelectionHandler inputSelectionHandler;\n-\n-\tpublic BatchMultipleInputStreamOperator(\n-\t\t\tStreamOperatorParameters<RowData> parameters,\n-\t\t\tList<InputSpec> inputSpecs,\n-\t\t\tList<TableOperatorWrapper<?>> headWrapper,\n-\t\t\tTableOperatorWrapper<?> tailWrapper) {\n-\t\tsuper(parameters, inputSpecs, headWrapper, tailWrapper);\n-\t\tinputSelectionHandler = new InputSelectionHandler(inputSpecs);\n-\t}\n-\n-\t@Override\n-\tpublic void endInput(int inputId) throws Exception {\n-\t\tinputSelectionHandler.endInput(inputId);\n-\t\tInputSpec inputSpec = inputSpecMap.get(inputId);\n-\t\tinputSpec.getOutput().endOperatorInput(inputSpec.getOutputOpInputId());\n-\t}\n-\n-\t@Override\n-\tpublic InputSelection nextSelection() {\n-\t\treturn inputSelectionHandler.getInputSelection();\n-\t}\n-\n-\tprotected StreamConfig createStreamConfig(\n-\t\t\tStreamOperatorParameters<RowData> multipleInputOperatorParameters,\n-\t\t\tTableOperatorWrapper<?> wrapper) {\n-\t\tStreamConfig streamConfig = super.createStreamConfig(multipleInputOperatorParameters, wrapper);\n-\t\tcheckState(wrapper.getManagedMemoryFraction() >= 0);\n-\t\tConfiguration taskManagerConfig = getRuntimeContext().getTaskManagerRuntimeInfo().getConfiguration();\n-\t\tdouble managedMemoryFraction = multipleInputOperatorParameters.getStreamConfig()\n-\t\t\t\t.getManagedMemoryFractionOperatorUseCaseOfSlot(\n-\t\t\t\t\t\tManagedMemoryUseCase.BATCH_OP,\n-\t\t\t\t\t\ttaskManagerConfig,\n-\t\t\t\t\t\tgetRuntimeContext().getUserCodeClassLoader()) *\n-\t\t\t\twrapper.getManagedMemoryFraction();\n-\t\tstreamConfig.setManagedMemoryFractionOperatorOfUseCase(ManagedMemoryUseCase.BATCH_OP, managedMemoryFraction);\n-\t\treturn streamConfig;\n-\t}\n-\n-}\n"}}, {"oid": "4871bcd0e44d61ecf8e02364759266214005a9b2", "url": "https://github.com/apache/flink/commit/4871bcd0e44d61ecf8e02364759266214005a9b2", "message": "[FLINK-19627][table-runtime] Introduce OneInput, FirstInputOfTwoInput, SecondInputOfTwoInput, InputSelectionHandler for multiple input operator", "committedDate": "2020-10-27T12:43:50Z", "type": "commit"}, {"oid": "a9a1819319fdeace7469a7fd40128881b69d0e9b", "url": "https://github.com/apache/flink/commit/a9a1819319fdeace7469a7fd40128881b69d0e9b", "message": "[FLINK-19627][table-runtime] Introduce different Output sub-classes for multiple input operator", "committedDate": "2020-10-27T12:43:51Z", "type": "commit"}, {"oid": "b1353f7422a706cd50502d62b988b06154d33ffc", "url": "https://github.com/apache/flink/commit/b1353f7422a706cd50502d62b988b06154d33ffc", "message": "[FLINK-19627][table-runtime] Introduce multiple input operator for batch", "committedDate": "2020-10-27T12:43:51Z", "type": "commit"}, {"oid": "b1353f7422a706cd50502d62b988b06154d33ffc", "url": "https://github.com/apache/flink/commit/b1353f7422a706cd50502d62b988b06154d33ffc", "message": "[FLINK-19627][table-runtime] Introduce multiple input operator for batch", "committedDate": "2020-10-27T12:43:51Z", "type": "forcePushed"}]}