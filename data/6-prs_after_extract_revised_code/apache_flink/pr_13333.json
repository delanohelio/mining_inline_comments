{"pr_number": 13333, "pr_title": "[FLINK-18823][format] Support serialization for debezium-json format", "pr_createdAt": "2020-09-06T12:08:45Z", "pr_url": "https://github.com/apache/flink/pull/13333", "timeline": [{"oid": "f5080f287764107c195255c44235170c2fb64d23", "url": "https://github.com/apache/flink/commit/f5080f287764107c195255c44235170c2fb64d23", "message": "[FLINK-18823][format] Support serialization for debezium-json format", "committedDate": "2020-09-06T12:01:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg1NTQ2NQ==", "url": "https://github.com/apache/flink/pull/13333#discussion_r484855465", "bodyText": "Indent.", "author": "wuchong", "createdAt": "2020-09-08T11:49:18Z", "path": "flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/debezium/DebeziumJsonFormatFactory.java", "diffHunk": "@@ -104,7 +105,31 @@ public ChangelogMode getChangelogMode() {\n \tpublic EncodingFormat<SerializationSchema<RowData>> createEncodingFormat(\n \t\t\tDynamicTableFactory.Context context,\n \t\t\tReadableConfig formatOptions) {\n-\t\tthrow new UnsupportedOperationException(\"Debezium format doesn't support as a sink format yet.\");\n+\t\tFactoryUtil.validateFactoryOptions(this, formatOptions);\n+\t\tTimestampFormat timestampFormat = JsonOptions.getTimestampFormat(formatOptions);\n+\n+\t\treturn new EncodingFormat<SerializationSchema<RowData>>() {\n+\n+\t\t\t@Override\n+\t\t\tpublic ChangelogMode getChangelogMode() {\n+\t\t\t\treturn ChangelogMode.newBuilder()\n+\t\t\t\t\t.addContainedKind(RowKind.INSERT)\n+\t\t\t\t\t.addContainedKind(RowKind.UPDATE_BEFORE)\n+\t\t\t\t\t.addContainedKind(RowKind.UPDATE_AFTER)\n+\t\t\t\t\t.addContainedKind(RowKind.DELETE)\n+\t\t\t\t\t.build();\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic SerializationSchema<RowData> createRuntimeEncoder(\n+\t\t\t\tDynamicTableSink.Context context, DataType consumedDataType) {", "originalCommit": "f5080f287764107c195255c44235170c2fb64d23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f902c61af21db28cb6e946302dbfaf9e60bb6d3", "chunk": "diff --git a/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/debezium/DebeziumJsonFormatFactory.java b/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/debezium/DebeziumJsonFormatFactory.java\nindex 656b0d773d8..d81f7a1bf79 100644\n--- a/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/debezium/DebeziumJsonFormatFactory.java\n+++ b/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/debezium/DebeziumJsonFormatFactory.java\n\n@@ -121,13 +121,9 @@ public class DebeziumJsonFormatFactory implements DeserializationFormatFactory,\n \t\t\t}\n \n \t\t\t@Override\n-\t\t\tpublic SerializationSchema<RowData> createRuntimeEncoder(\n-\t\t\t\tDynamicTableSink.Context context, DataType consumedDataType) {\n+\t\t\tpublic SerializationSchema<RowData> createRuntimeEncoder(DynamicTableSink.Context context, DataType consumedDataType) {\n \t\t\t\tfinal RowType rowType = (RowType) consumedDataType.getLogicalType();\n-\t\t\t\treturn new DebeziumJsonSerializationSchema(\n-\t\t\t\t\trowType,\n-\t\t\t\t\ttimestampFormat\n-\t\t\t\t\t);\n+\t\t\t\treturn new DebeziumJsonSerializationSchema(rowType, timestampFormat);\n \t\t\t}\n \t\t};\n \t}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg1NjczOQ==", "url": "https://github.com/apache/flink/pull/13333#discussion_r484856739", "bodyText": "The insert and delete operation string in debezium should be \"c\" and \"d\".", "author": "wuchong", "createdAt": "2020-09-08T11:51:50Z", "path": "flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/debezium/DebeziumJsonSerializationSchema.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.formats.json.debezium;\n+\n+import org.apache.flink.api.common.serialization.SerializationSchema;\n+import org.apache.flink.formats.json.JsonRowDataSerializationSchema;\n+import org.apache.flink.formats.json.TimestampFormat;\n+import org.apache.flink.table.api.DataTypes;\n+import org.apache.flink.table.data.GenericRowData;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.data.StringData;\n+import org.apache.flink.table.types.DataType;\n+import org.apache.flink.table.types.logical.RowType;\n+import org.apache.flink.types.RowKind;\n+\n+import java.util.Objects;\n+\n+import static java.lang.String.format;\n+import static org.apache.flink.table.types.utils.TypeConversions.fromLogicalToDataType;\n+\n+/**\n+ * Serialization schema from Flink Table/SQL internal data structure {@link RowData} to Debezium JSON.\n+ *\n+ * @see <a href=\"https://debezium.io/\">Debezium</a>\n+ */\n+public class DebeziumJsonSerializationSchema implements SerializationSchema<RowData> {\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\tprivate static final StringData OP_INSERT = StringData.fromString(\"INSERT\"); // insert\n+\tprivate static final StringData OP_DELETE = StringData.fromString(\"DELETE\"); // delete", "originalCommit": "f5080f287764107c195255c44235170c2fb64d23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f902c61af21db28cb6e946302dbfaf9e60bb6d3", "chunk": "diff --git a/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/debezium/DebeziumJsonSerializationSchema.java b/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/debezium/DebeziumJsonSerializationSchema.java\nindex 60b33783736..3b879212868 100644\n--- a/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/debezium/DebeziumJsonSerializationSchema.java\n+++ b/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/debezium/DebeziumJsonSerializationSchema.java\n\n@@ -42,8 +42,8 @@ import static org.apache.flink.table.types.utils.TypeConversions.fromLogicalToDa\n public class DebeziumJsonSerializationSchema implements SerializationSchema<RowData> {\n \tprivate static final long serialVersionUID = 1L;\n \n-\tprivate static final StringData OP_INSERT = StringData.fromString(\"INSERT\"); // insert\n-\tprivate static final StringData OP_DELETE = StringData.fromString(\"DELETE\"); // delete\n+\tprivate static final StringData OP_INSERT = StringData.fromString(\"c\"); // insert\n+\tprivate static final StringData OP_DELETE = StringData.fromString(\"d\"); // delete\n \n \t/** The serializer to serialize Debezium JSON data. **/\n \tprivate final JsonRowDataSerializationSchema jsonSerializer;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg1NzI5Ng==", "url": "https://github.com/apache/flink/pull/13333#discussion_r484857296", "bodyText": "This is wrong. Debezium serialize insert data in \"after\", but delete data in \"before\".", "author": "wuchong", "createdAt": "2020-09-08T11:52:53Z", "path": "flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/debezium/DebeziumJsonSerializationSchema.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.formats.json.debezium;\n+\n+import org.apache.flink.api.common.serialization.SerializationSchema;\n+import org.apache.flink.formats.json.JsonRowDataSerializationSchema;\n+import org.apache.flink.formats.json.TimestampFormat;\n+import org.apache.flink.table.api.DataTypes;\n+import org.apache.flink.table.data.GenericRowData;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.data.StringData;\n+import org.apache.flink.table.types.DataType;\n+import org.apache.flink.table.types.logical.RowType;\n+import org.apache.flink.types.RowKind;\n+\n+import java.util.Objects;\n+\n+import static java.lang.String.format;\n+import static org.apache.flink.table.types.utils.TypeConversions.fromLogicalToDataType;\n+\n+/**\n+ * Serialization schema from Flink Table/SQL internal data structure {@link RowData} to Debezium JSON.\n+ *\n+ * @see <a href=\"https://debezium.io/\">Debezium</a>\n+ */\n+public class DebeziumJsonSerializationSchema implements SerializationSchema<RowData> {\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\tprivate static final StringData OP_INSERT = StringData.fromString(\"INSERT\"); // insert\n+\tprivate static final StringData OP_DELETE = StringData.fromString(\"DELETE\"); // delete\n+\n+\t/** The serializer to serialize Debezium JSON data. **/\n+\tprivate final JsonRowDataSerializationSchema jsonSerializer;\n+\n+\tprivate transient GenericRowData genericRowData;\n+\n+\tpublic DebeziumJsonSerializationSchema(RowType rowType, TimestampFormat timestampFormat) {\n+\t\tjsonSerializer = new JsonRowDataSerializationSchema(\n+\t\t\tcreateJsonRowType(fromLogicalToDataType(rowType)),\n+\t\t\ttimestampFormat);\n+\t}\n+\n+\t@Override\n+\tpublic void open(InitializationContext context) {\n+\t\tgenericRowData = new GenericRowData(2);\n+\t}\n+\n+\t@Override\n+\tpublic byte[] serialize(RowData rowData) {\n+\t\ttry {\n+\t\t\tgenericRowData.setField(0, rowData);", "originalCommit": "f5080f287764107c195255c44235170c2fb64d23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f902c61af21db28cb6e946302dbfaf9e60bb6d3", "chunk": "diff --git a/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/debezium/DebeziumJsonSerializationSchema.java b/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/debezium/DebeziumJsonSerializationSchema.java\nindex 60b33783736..3b879212868 100644\n--- a/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/debezium/DebeziumJsonSerializationSchema.java\n+++ b/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/debezium/DebeziumJsonSerializationSchema.java\n\n@@ -42,8 +42,8 @@ import static org.apache.flink.table.types.utils.TypeConversions.fromLogicalToDa\n public class DebeziumJsonSerializationSchema implements SerializationSchema<RowData> {\n \tprivate static final long serialVersionUID = 1L;\n \n-\tprivate static final StringData OP_INSERT = StringData.fromString(\"INSERT\"); // insert\n-\tprivate static final StringData OP_DELETE = StringData.fromString(\"DELETE\"); // delete\n+\tprivate static final StringData OP_INSERT = StringData.fromString(\"c\"); // insert\n+\tprivate static final StringData OP_DELETE = StringData.fromString(\"d\"); // delete\n \n \t/** The serializer to serialize Debezium JSON data. **/\n \tprivate final JsonRowDataSerializationSchema jsonSerializer;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg1NzM4Mg==", "url": "https://github.com/apache/flink/pull/13333#discussion_r484857382", "bodyText": "This is wrong. Debezium serialize insert data in \"after\", but delete data in \"before\".", "author": "wuchong", "createdAt": "2020-09-08T11:53:02Z", "path": "flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/debezium/DebeziumJsonSerializationSchema.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.formats.json.debezium;\n+\n+import org.apache.flink.api.common.serialization.SerializationSchema;\n+import org.apache.flink.formats.json.JsonRowDataSerializationSchema;\n+import org.apache.flink.formats.json.TimestampFormat;\n+import org.apache.flink.table.api.DataTypes;\n+import org.apache.flink.table.data.GenericRowData;\n+import org.apache.flink.table.data.RowData;\n+import org.apache.flink.table.data.StringData;\n+import org.apache.flink.table.types.DataType;\n+import org.apache.flink.table.types.logical.RowType;\n+import org.apache.flink.types.RowKind;\n+\n+import java.util.Objects;\n+\n+import static java.lang.String.format;\n+import static org.apache.flink.table.types.utils.TypeConversions.fromLogicalToDataType;\n+\n+/**\n+ * Serialization schema from Flink Table/SQL internal data structure {@link RowData} to Debezium JSON.\n+ *\n+ * @see <a href=\"https://debezium.io/\">Debezium</a>\n+ */\n+public class DebeziumJsonSerializationSchema implements SerializationSchema<RowData> {\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\tprivate static final StringData OP_INSERT = StringData.fromString(\"INSERT\"); // insert\n+\tprivate static final StringData OP_DELETE = StringData.fromString(\"DELETE\"); // delete\n+\n+\t/** The serializer to serialize Debezium JSON data. **/\n+\tprivate final JsonRowDataSerializationSchema jsonSerializer;\n+\n+\tprivate transient GenericRowData genericRowData;\n+\n+\tpublic DebeziumJsonSerializationSchema(RowType rowType, TimestampFormat timestampFormat) {\n+\t\tjsonSerializer = new JsonRowDataSerializationSchema(\n+\t\t\tcreateJsonRowType(fromLogicalToDataType(rowType)),\n+\t\t\ttimestampFormat);\n+\t}\n+\n+\t@Override\n+\tpublic void open(InitializationContext context) {\n+\t\tgenericRowData = new GenericRowData(2);\n+\t}\n+\n+\t@Override\n+\tpublic byte[] serialize(RowData rowData) {\n+\t\ttry {\n+\t\t\tgenericRowData.setField(0, rowData);\n+\t\t\tgenericRowData.setField(1, rowKind2String(rowData.getRowKind()));\n+\t\t\treturn jsonSerializer.serialize(genericRowData);\n+\t\t} catch (Throwable t) {\n+\t\t\tthrow new RuntimeException(format(\"Could not serialize row '%s'.\", rowData), t);\n+\t\t}\n+\t}\n+\n+\tprivate StringData rowKind2String(RowKind rowKind) {\n+\t\tswitch (rowKind) {\n+\t\t\tcase INSERT:\n+\t\t\tcase UPDATE_AFTER:\n+\t\t\t\treturn OP_INSERT;\n+\t\t\tcase UPDATE_BEFORE:\n+\t\t\tcase DELETE:\n+\t\t\t\treturn OP_DELETE;\n+\t\t\tdefault:\n+\t\t\t\tthrow new UnsupportedOperationException(format(\"Unsupported operation '%s' for row kind.\", rowKind));\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object o) {\n+\t\tif (this == o) {\n+\t\t\treturn true;\n+\t\t}\n+\t\tif (o == null || getClass() != o.getClass()) {\n+\t\t\treturn false;\n+\t\t}\n+\t\tDebeziumJsonSerializationSchema that = (DebeziumJsonSerializationSchema) o;\n+\t\treturn Objects.equals(jsonSerializer, that.jsonSerializer);\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\treturn Objects.hash(jsonSerializer);\n+\t}\n+\n+\tprivate static RowType createJsonRowType(DataType databaseSchema) {\n+\t\t// Debezium JSON contains some other information, e.g. \"source\", \"ts_ms\"\n+\t\t// but we don't need them.\n+\t\treturn (RowType) DataTypes.ROW(\n+\t\t\tDataTypes.FIELD(\"after\", databaseSchema),", "originalCommit": "f5080f287764107c195255c44235170c2fb64d23", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "6f902c61af21db28cb6e946302dbfaf9e60bb6d3", "chunk": "diff --git a/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/debezium/DebeziumJsonSerializationSchema.java b/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/debezium/DebeziumJsonSerializationSchema.java\nindex 60b33783736..3b879212868 100644\n--- a/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/debezium/DebeziumJsonSerializationSchema.java\n+++ b/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/debezium/DebeziumJsonSerializationSchema.java\n\n@@ -42,8 +42,8 @@ import static org.apache.flink.table.types.utils.TypeConversions.fromLogicalToDa\n public class DebeziumJsonSerializationSchema implements SerializationSchema<RowData> {\n \tprivate static final long serialVersionUID = 1L;\n \n-\tprivate static final StringData OP_INSERT = StringData.fromString(\"INSERT\"); // insert\n-\tprivate static final StringData OP_DELETE = StringData.fromString(\"DELETE\"); // delete\n+\tprivate static final StringData OP_INSERT = StringData.fromString(\"c\"); // insert\n+\tprivate static final StringData OP_DELETE = StringData.fromString(\"d\"); // delete\n \n \t/** The serializer to serialize Debezium JSON data. **/\n \tprivate final JsonRowDataSerializationSchema jsonSerializer;\n"}}, {"oid": "6f902c61af21db28cb6e946302dbfaf9e60bb6d3", "url": "https://github.com/apache/flink/commit/6f902c61af21db28cb6e946302dbfaf9e60bb6d3", "message": "[FLINK-18823][format] Support serialization for debezium-json format", "committedDate": "2020-09-09T06:55:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQyODY0Mg==", "url": "https://github.com/apache/flink/pull/13333#discussion_r485428642", "bodyText": "We should also consider UPDATE_AFTER and UPDATE_BEFORE .", "author": "wuchong", "createdAt": "2020-09-09T08:23:24Z", "path": "flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/debezium/DebeziumJsonSerializationSchema.java", "diffHunk": "@@ -58,14 +58,20 @@ public DebeziumJsonSerializationSchema(RowType rowType, TimestampFormat timestam\n \n \t@Override\n \tpublic void open(InitializationContext context) {\n-\t\tgenericRowData = new GenericRowData(2);\n+\t\tgenericRowData = new GenericRowData(3);\n \t}\n \n \t@Override\n \tpublic byte[] serialize(RowData rowData) {\n \t\ttry {\n-\t\t\tgenericRowData.setField(0, rowData);\n-\t\t\tgenericRowData.setField(1, rowKind2String(rowData.getRowKind()));\n+\t\t\tif (RowKind.INSERT == rowData.getRowKind()) {", "originalCommit": "6f902c61af21db28cb6e946302dbfaf9e60bb6d3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "bb34b6bc717ae235ce8a3985601617f5be839de5", "chunk": "diff --git a/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/debezium/DebeziumJsonSerializationSchema.java b/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/debezium/DebeziumJsonSerializationSchema.java\nindex 3b879212868..f94c8137190 100644\n--- a/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/debezium/DebeziumJsonSerializationSchema.java\n+++ b/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/debezium/DebeziumJsonSerializationSchema.java\n\n@@ -64,33 +63,27 @@ public class DebeziumJsonSerializationSchema implements SerializationSchema<RowD\n \t@Override\n \tpublic byte[] serialize(RowData rowData) {\n \t\ttry {\n-\t\t\tif (RowKind.INSERT == rowData.getRowKind()) {\n-\t\t\t\tgenericRowData.setField(0,  null);\n-\t\t\t\tgenericRowData.setField(1, rowData);\n-\t\t\t} else if (RowKind.DELETE == rowData.getRowKind()) {\n-\t\t\t\tgenericRowData.setField(0,  rowData);\n-\t\t\t\tgenericRowData.setField(1, null);\n+\t\t\tswitch (rowData.getRowKind()) {\n+\t\t\t\tcase INSERT:\n+\t\t\t\tcase UPDATE_AFTER:\n+\t\t\t\t\tgenericRowData.setField(0,  null);\n+\t\t\t\t\tgenericRowData.setField(1, rowData);\n+\t\t\t\t\tgenericRowData.setField(2,  OP_INSERT);\n+\t\t\t\t\treturn jsonSerializer.serialize(genericRowData);\n+\t\t\t\tcase UPDATE_BEFORE:\n+\t\t\t\tcase DELETE:\n+\t\t\t\t\tgenericRowData.setField(0,  rowData);\n+\t\t\t\t\tgenericRowData.setField(1, null);\n+\t\t\t\t\tgenericRowData.setField(2,  OP_DELETE);\n+\t\t\t\t\treturn jsonSerializer.serialize(genericRowData);\n+\t\t\t\tdefault:\n+\t\t\t\t\tthrow new UnsupportedOperationException(format(\"Unsupported operation '%s' for row kind.\", rowData.getRowKind()));\n \t\t\t}\n-\t\t\tgenericRowData.setField(2, rowKind2String(rowData.getRowKind()));\n-\t\t\treturn jsonSerializer.serialize(genericRowData);\n \t\t} catch (Throwable t) {\n \t\t\tthrow new RuntimeException(format(\"Could not serialize row '%s'.\", rowData), t);\n \t\t}\n \t}\n \n-\tprivate StringData rowKind2String(RowKind rowKind) {\n-\t\tswitch (rowKind) {\n-\t\t\tcase INSERT:\n-\t\t\tcase UPDATE_AFTER:\n-\t\t\t\treturn OP_INSERT;\n-\t\t\tcase UPDATE_BEFORE:\n-\t\t\tcase DELETE:\n-\t\t\t\treturn OP_DELETE;\n-\t\t\tdefault:\n-\t\t\t\tthrow new UnsupportedOperationException(format(\"Unsupported operation '%s' for row kind.\", rowKind));\n-\t\t}\n-\t}\n-\n \t@Override\n \tpublic boolean equals(Object o) {\n \t\tif (this == o) {\n"}}, {"oid": "bb34b6bc717ae235ce8a3985601617f5be839de5", "url": "https://github.com/apache/flink/commit/bb34b6bc717ae235ce8a3985601617f5be839de5", "message": "[FLINK-18823][format] Support serialization for debezium-json format", "committedDate": "2020-09-09T09:23:30Z", "type": "commit"}]}