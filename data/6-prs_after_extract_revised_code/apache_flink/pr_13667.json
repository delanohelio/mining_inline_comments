{"pr_number": 13667, "pr_title": "[FLINK-19679] Deduplicate code between CheckpointBarrierUnaligner and CheckpointBarrierAligner", "pr_createdAt": "2020-10-16T14:22:04Z", "pr_url": "https://github.com/apache/flink/pull/13667", "timeline": [{"oid": "0db61dd630af893d1cdcfef6b654ab09c478c53b", "url": "https://github.com/apache/flink/commit/0db61dd630af893d1cdcfef6b654ab09c478c53b", "message": "[FLINK-19679][task] Migrate AlternatingCheckpointBarrierHandler to the generic SingleCheckpointBarrierHandler", "committedDate": "2020-10-16T14:53:33Z", "type": "forcePushed"}, {"oid": "5ab532006ccbfb5632b4ad60053203a5e5dea3a5", "url": "https://github.com/apache/flink/commit/5ab532006ccbfb5632b4ad60053203a5e5dea3a5", "message": "[FLINK-19679][task] Migrate AlternatingCheckpointBarrierHandler to the generic SingleCheckpointBarrierHandler", "committedDate": "2020-10-16T15:00:30Z", "type": "forcePushed"}, {"oid": "de848b220414a40d24a3b6ec2656dcbe1ad30f3a", "url": "https://github.com/apache/flink/commit/de848b220414a40d24a3b6ec2656dcbe1ad30f3a", "message": "[FLINK-19679][task] Migrate AlternatingCheckpointBarrierHandler to the generic SingleCheckpointBarrierHandler", "committedDate": "2020-10-17T08:58:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAxOTUxNA==", "url": "https://github.com/apache/flink/pull/13667#discussion_r508019514", "bodyText": "Is protected visibility intentional?\nI don't see any descendants and would prefer to have them private therefore.\n(ditto: all fields)", "author": "rkhachatryan", "createdAt": "2020-10-19T19:46:51Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/SingleCheckpointBarrierHandler.java", "diffHunk": "@@ -39,57 +39,83 @@\n import java.util.Arrays;\n import java.util.concurrent.CompletableFuture;\n \n+import static org.apache.flink.runtime.checkpoint.CheckpointFailureReason.CHECKPOINT_DECLINED_INPUT_END_OF_STREAM;\n import static org.apache.flink.runtime.checkpoint.CheckpointFailureReason.CHECKPOINT_DECLINED_SUBSUMED;\n \n /**\n- * {@link CheckpointBarrierUnaligner} is used for triggering checkpoint while reading the first barrier\n- * and keeping track of the number of received barriers and consumed barriers.\n+ * {@link SingleCheckpointBarrierHandler} is used for triggering checkpoint while reading the first barrier\n+ * and keeping track of the number of received barriers and consumed barriers. It can handle/track\n+ * just single checkpoint at a time. The behaviour when to actually trigger the checkpoint and\n+ * what the {@link CheckpointableInput} should do is controlled by {@link CheckpointBarrierBehaviourController}.\n  */\n @Internal\n @NotThreadSafe\n-public class CheckpointBarrierUnaligner extends CheckpointBarrierHandler {\n+public class SingleCheckpointBarrierHandler extends CheckpointBarrierHandler {\n \n-\tprivate static final Logger LOG = LoggerFactory.getLogger(CheckpointBarrierUnaligner.class);\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(SingleCheckpointBarrierHandler.class);\n \n-\tprivate final String taskName;\n+\tprotected final String taskName;", "originalCommit": "de848b220414a40d24a3b6ec2656dcbe1ad30f3a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9ca2197ffa4c454cc1acaedbcfca0ac996b3ea5", "chunk": "diff --git a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/SingleCheckpointBarrierHandler.java b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnaligner.java\nsimilarity index 60%\nrename from flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/SingleCheckpointBarrierHandler.java\nrename to flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnaligner.java\nindex b9820a14dc..fd2e4e0633 100644\n--- a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/SingleCheckpointBarrierHandler.java\n+++ b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnaligner.java\n\n@@ -39,83 +39,57 @@ import java.io.IOException;\n import java.util.Arrays;\n import java.util.concurrent.CompletableFuture;\n \n-import static org.apache.flink.runtime.checkpoint.CheckpointFailureReason.CHECKPOINT_DECLINED_INPUT_END_OF_STREAM;\n import static org.apache.flink.runtime.checkpoint.CheckpointFailureReason.CHECKPOINT_DECLINED_SUBSUMED;\n \n /**\n- * {@link SingleCheckpointBarrierHandler} is used for triggering checkpoint while reading the first barrier\n- * and keeping track of the number of received barriers and consumed barriers. It can handle/track\n- * just single checkpoint at a time. The behaviour when to actually trigger the checkpoint and\n- * what the {@link CheckpointableInput} should do is controlled by {@link CheckpointBarrierBehaviourController}.\n+ * {@link CheckpointBarrierUnaligner} is used for triggering checkpoint while reading the first barrier\n+ * and keeping track of the number of received barriers and consumed barriers.\n  */\n @Internal\n @NotThreadSafe\n-public class SingleCheckpointBarrierHandler extends CheckpointBarrierHandler {\n+public class CheckpointBarrierUnaligner extends CheckpointBarrierHandler {\n \n-\tprivate static final Logger LOG = LoggerFactory.getLogger(SingleCheckpointBarrierHandler.class);\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(CheckpointBarrierUnaligner.class);\n \n-\tprotected final String taskName;\n+\tprivate final String taskName;\n \n-\tprotected final CheckpointBarrierBehaviourController controller;\n+\tprivate int numBarriersReceived;\n \n-\tprotected int numBarriersReceived;\n+\t/** A future indicating that all barriers of the a given checkpoint have been read. */\n+\tprivate CompletableFuture<Void> allBarriersReceivedFuture = FutureUtils.completedVoidFuture();\n \n \t/**\n \t * The checkpoint id to guarantee that we would trigger only one checkpoint when reading the same barrier from\n \t * different channels.\n \t */\n-\tprotected long currentCheckpointId = -1L;\n+\tprivate long currentCheckpointId = -1L;\n \n-\tprotected int numOpenChannels;\n+\tprivate int numOpenChannels;\n \n-\tprotected CompletableFuture<Void> allBarriersReceivedFuture = FutureUtils.completedVoidFuture();\n+\tprivate final SubtaskCheckpointCoordinator checkpointCoordinator;\n \n-\t@VisibleForTesting\n-\tstatic SingleCheckpointBarrierHandler createUnalignedCheckpointBarrierHandler(\n+\tprivate final CheckpointableInput[] inputs;\n+\n+\tCheckpointBarrierUnaligner(\n \t\t\tSubtaskCheckpointCoordinator checkpointCoordinator,\n \t\t\tString taskName,\n \t\t\tAbstractInvokable toNotifyOnCheckpoint,\n \t\t\tCheckpointableInput... inputs) {\n-\t\treturn new SingleCheckpointBarrierHandler(\n-\t\t\ttaskName,\n-\t\t\ttoNotifyOnCheckpoint,\n-\t\t\t(int) Arrays.stream(inputs).flatMap(gate -> gate.getChannelInfos().stream()).count(),\n-\t\t\tnew UnalignedController(checkpointCoordinator, inputs));\n-\t}\n-\n-\tSingleCheckpointBarrierHandler(\n-\t\t\tString taskName,\n-\t\t\tAbstractInvokable toNotifyOnCheckpoint,\n-\t\t\tint numOpenChannels,\n-\t\t\tCheckpointBarrierBehaviourController controller) {\n \t\tsuper(toNotifyOnCheckpoint);\n \n \t\tthis.taskName = taskName;\n-\t\tthis.numOpenChannels = numOpenChannels;\n-\t\tthis.controller = controller;\n-\t}\n-\n-\t@Override\n-\tprotected void abortPendingCheckpoint(\n-\t\tlong checkpointId,\n-\t\tCheckpointException exception) throws IOException {\n-\t\tif (checkpointId > currentCheckpointId && isCheckpointPending()) {\n-\t\t\tnumBarriersReceived = 0;\n-\t\t\tcontroller.abortPendingCheckpoint(checkpointId, exception);\n-\t\t\tnotifyAbort(checkpointId, exception);\n-\t\t}\n+\t\tthis.inputs = inputs;\n+\t\tnumOpenChannels = (int) Arrays.stream(inputs).flatMap(gate -> gate.getChannelInfos().stream()).count();\n+\t\tthis.checkpointCoordinator = checkpointCoordinator;\n \t}\n \n \t@Override\n \tpublic void processBarrier(CheckpointBarrier barrier, InputChannelInfo channelInfo) throws IOException {\n \t\tlong barrierId = barrier.getId();\n-\t\tLOG.debug(\"{}: Received barrier from channel {} @ {}.\", taskName, channelInfo, barrierId);\n-\n \t\tif (currentCheckpointId > barrierId || (currentCheckpointId == barrierId && !isCheckpointPending())) {\n-\t\t\tcontroller.obsoleteBarrierReceived(channelInfo, barrier);\n+\t\t\t// ignore old and cancelled barriers\n \t\t\treturn;\n \t\t}\n-\n \t\tif (currentCheckpointId < barrierId) {\n \t\t\tif (isCheckpointPending()) {\n \t\t\t\tcancelSubsumedCheckpoint(barrierId);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAyMDc2Mw==", "url": "https://github.com/apache/flink/pull/13667#discussion_r508020763", "bodyText": "This method is not used anymore (now this class uses controller.abortPendingCheckpoint)\nso the method can be deleted.", "author": "rkhachatryan", "createdAt": "2020-10-19T19:49:21Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/SingleCheckpointBarrierHandler.java", "diffHunk": "@@ -39,57 +39,83 @@\n import java.util.Arrays;\n import java.util.concurrent.CompletableFuture;\n \n+import static org.apache.flink.runtime.checkpoint.CheckpointFailureReason.CHECKPOINT_DECLINED_INPUT_END_OF_STREAM;\n import static org.apache.flink.runtime.checkpoint.CheckpointFailureReason.CHECKPOINT_DECLINED_SUBSUMED;\n \n /**\n- * {@link CheckpointBarrierUnaligner} is used for triggering checkpoint while reading the first barrier\n- * and keeping track of the number of received barriers and consumed barriers.\n+ * {@link SingleCheckpointBarrierHandler} is used for triggering checkpoint while reading the first barrier\n+ * and keeping track of the number of received barriers and consumed barriers. It can handle/track\n+ * just single checkpoint at a time. The behaviour when to actually trigger the checkpoint and\n+ * what the {@link CheckpointableInput} should do is controlled by {@link CheckpointBarrierBehaviourController}.\n  */\n @Internal\n @NotThreadSafe\n-public class CheckpointBarrierUnaligner extends CheckpointBarrierHandler {\n+public class SingleCheckpointBarrierHandler extends CheckpointBarrierHandler {\n \n-\tprivate static final Logger LOG = LoggerFactory.getLogger(CheckpointBarrierUnaligner.class);\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(SingleCheckpointBarrierHandler.class);\n \n-\tprivate final String taskName;\n+\tprotected final String taskName;\n \n-\tprivate int numBarriersReceived;\n+\tprotected final CheckpointBarrierBehaviourController controller;\n \n-\t/** A future indicating that all barriers of the a given checkpoint have been read. */\n-\tprivate CompletableFuture<Void> allBarriersReceivedFuture = FutureUtils.completedVoidFuture();\n+\tprotected int numBarriersReceived;\n \n \t/**\n \t * The checkpoint id to guarantee that we would trigger only one checkpoint when reading the same barrier from\n \t * different channels.\n \t */\n-\tprivate long currentCheckpointId = -1L;\n+\tprotected long currentCheckpointId = -1L;\n \n-\tprivate int numOpenChannels;\n+\tprotected int numOpenChannels;\n \n-\tprivate final SubtaskCheckpointCoordinator checkpointCoordinator;\n+\tprotected CompletableFuture<Void> allBarriersReceivedFuture = FutureUtils.completedVoidFuture();\n \n-\tprivate final CheckpointableInput[] inputs;\n-\n-\tCheckpointBarrierUnaligner(\n+\t@VisibleForTesting\n+\tstatic SingleCheckpointBarrierHandler createUnalignedCheckpointBarrierHandler(\n \t\t\tSubtaskCheckpointCoordinator checkpointCoordinator,\n \t\t\tString taskName,\n \t\t\tAbstractInvokable toNotifyOnCheckpoint,\n \t\t\tCheckpointableInput... inputs) {\n+\t\treturn new SingleCheckpointBarrierHandler(\n+\t\t\ttaskName,\n+\t\t\ttoNotifyOnCheckpoint,\n+\t\t\t(int) Arrays.stream(inputs).flatMap(gate -> gate.getChannelInfos().stream()).count(),\n+\t\t\tnew UnalignedController(checkpointCoordinator, inputs));\n+\t}\n+\n+\tSingleCheckpointBarrierHandler(\n+\t\t\tString taskName,\n+\t\t\tAbstractInvokable toNotifyOnCheckpoint,\n+\t\t\tint numOpenChannels,\n+\t\t\tCheckpointBarrierBehaviourController controller) {\n \t\tsuper(toNotifyOnCheckpoint);\n \n \t\tthis.taskName = taskName;\n-\t\tthis.inputs = inputs;\n-\t\tnumOpenChannels = (int) Arrays.stream(inputs).flatMap(gate -> gate.getChannelInfos().stream()).count();\n-\t\tthis.checkpointCoordinator = checkpointCoordinator;\n+\t\tthis.numOpenChannels = numOpenChannels;\n+\t\tthis.controller = controller;\n+\t}\n+\n+\t@Override\n+\tprotected void abortPendingCheckpoint(", "originalCommit": "de848b220414a40d24a3b6ec2656dcbe1ad30f3a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a9ca2197ffa4c454cc1acaedbcfca0ac996b3ea5", "chunk": "diff --git a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/SingleCheckpointBarrierHandler.java b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnaligner.java\nsimilarity index 60%\nrename from flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/SingleCheckpointBarrierHandler.java\nrename to flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnaligner.java\nindex b9820a14dc..fd2e4e0633 100644\n--- a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/SingleCheckpointBarrierHandler.java\n+++ b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierUnaligner.java\n\n@@ -39,83 +39,57 @@ import java.io.IOException;\n import java.util.Arrays;\n import java.util.concurrent.CompletableFuture;\n \n-import static org.apache.flink.runtime.checkpoint.CheckpointFailureReason.CHECKPOINT_DECLINED_INPUT_END_OF_STREAM;\n import static org.apache.flink.runtime.checkpoint.CheckpointFailureReason.CHECKPOINT_DECLINED_SUBSUMED;\n \n /**\n- * {@link SingleCheckpointBarrierHandler} is used for triggering checkpoint while reading the first barrier\n- * and keeping track of the number of received barriers and consumed barriers. It can handle/track\n- * just single checkpoint at a time. The behaviour when to actually trigger the checkpoint and\n- * what the {@link CheckpointableInput} should do is controlled by {@link CheckpointBarrierBehaviourController}.\n+ * {@link CheckpointBarrierUnaligner} is used for triggering checkpoint while reading the first barrier\n+ * and keeping track of the number of received barriers and consumed barriers.\n  */\n @Internal\n @NotThreadSafe\n-public class SingleCheckpointBarrierHandler extends CheckpointBarrierHandler {\n+public class CheckpointBarrierUnaligner extends CheckpointBarrierHandler {\n \n-\tprivate static final Logger LOG = LoggerFactory.getLogger(SingleCheckpointBarrierHandler.class);\n+\tprivate static final Logger LOG = LoggerFactory.getLogger(CheckpointBarrierUnaligner.class);\n \n-\tprotected final String taskName;\n+\tprivate final String taskName;\n \n-\tprotected final CheckpointBarrierBehaviourController controller;\n+\tprivate int numBarriersReceived;\n \n-\tprotected int numBarriersReceived;\n+\t/** A future indicating that all barriers of the a given checkpoint have been read. */\n+\tprivate CompletableFuture<Void> allBarriersReceivedFuture = FutureUtils.completedVoidFuture();\n \n \t/**\n \t * The checkpoint id to guarantee that we would trigger only one checkpoint when reading the same barrier from\n \t * different channels.\n \t */\n-\tprotected long currentCheckpointId = -1L;\n+\tprivate long currentCheckpointId = -1L;\n \n-\tprotected int numOpenChannels;\n+\tprivate int numOpenChannels;\n \n-\tprotected CompletableFuture<Void> allBarriersReceivedFuture = FutureUtils.completedVoidFuture();\n+\tprivate final SubtaskCheckpointCoordinator checkpointCoordinator;\n \n-\t@VisibleForTesting\n-\tstatic SingleCheckpointBarrierHandler createUnalignedCheckpointBarrierHandler(\n+\tprivate final CheckpointableInput[] inputs;\n+\n+\tCheckpointBarrierUnaligner(\n \t\t\tSubtaskCheckpointCoordinator checkpointCoordinator,\n \t\t\tString taskName,\n \t\t\tAbstractInvokable toNotifyOnCheckpoint,\n \t\t\tCheckpointableInput... inputs) {\n-\t\treturn new SingleCheckpointBarrierHandler(\n-\t\t\ttaskName,\n-\t\t\ttoNotifyOnCheckpoint,\n-\t\t\t(int) Arrays.stream(inputs).flatMap(gate -> gate.getChannelInfos().stream()).count(),\n-\t\t\tnew UnalignedController(checkpointCoordinator, inputs));\n-\t}\n-\n-\tSingleCheckpointBarrierHandler(\n-\t\t\tString taskName,\n-\t\t\tAbstractInvokable toNotifyOnCheckpoint,\n-\t\t\tint numOpenChannels,\n-\t\t\tCheckpointBarrierBehaviourController controller) {\n \t\tsuper(toNotifyOnCheckpoint);\n \n \t\tthis.taskName = taskName;\n-\t\tthis.numOpenChannels = numOpenChannels;\n-\t\tthis.controller = controller;\n-\t}\n-\n-\t@Override\n-\tprotected void abortPendingCheckpoint(\n-\t\tlong checkpointId,\n-\t\tCheckpointException exception) throws IOException {\n-\t\tif (checkpointId > currentCheckpointId && isCheckpointPending()) {\n-\t\t\tnumBarriersReceived = 0;\n-\t\t\tcontroller.abortPendingCheckpoint(checkpointId, exception);\n-\t\t\tnotifyAbort(checkpointId, exception);\n-\t\t}\n+\t\tthis.inputs = inputs;\n+\t\tnumOpenChannels = (int) Arrays.stream(inputs).flatMap(gate -> gate.getChannelInfos().stream()).count();\n+\t\tthis.checkpointCoordinator = checkpointCoordinator;\n \t}\n \n \t@Override\n \tpublic void processBarrier(CheckpointBarrier barrier, InputChannelInfo channelInfo) throws IOException {\n \t\tlong barrierId = barrier.getId();\n-\t\tLOG.debug(\"{}: Received barrier from channel {} @ {}.\", taskName, channelInfo, barrierId);\n-\n \t\tif (currentCheckpointId > barrierId || (currentCheckpointId == barrierId && !isCheckpointPending())) {\n-\t\t\tcontroller.obsoleteBarrierReceived(channelInfo, barrier);\n+\t\t\t// ignore old and cancelled barriers\n \t\t\treturn;\n \t\t}\n-\n \t\tif (currentCheckpointId < barrierId) {\n \t\t\tif (isCheckpointPending()) {\n \t\t\t\tcancelSubsumedCheckpoint(barrierId);\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAyMzMzMA==", "url": "https://github.com/apache/flink/pull/13667#discussion_r508023330", "bodyText": "Returning boolean from these two (first/last) methods seem unclear and error-prone to me.\nHow about\n\nintroducing enum CheckpointTriggerStrategy { ON_FIRST_BARRIER, ON_LAST_BARRIER }\na method CheckpointBarrierBehaviourController.getTriggerStrategy\nreturning void from first/last\n?", "author": "rkhachatryan", "createdAt": "2020-10-19T19:54:09Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierBehaviourController.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.runtime.io;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.runtime.checkpoint.CheckpointException;\n+import org.apache.flink.runtime.checkpoint.channel.InputChannelInfo;\n+import org.apache.flink.runtime.io.network.api.CheckpointBarrier;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Controls when the checkpoint should be actually triggered.\n+ */\n+@Internal\n+public interface CheckpointBarrierBehaviourController {\n+\n+\tvoid barrierReceived(InputChannelInfo channelInfo, CheckpointBarrier barrier);\n+\n+\t/**\n+\t * @return {@code true} if checkpoint should be triggered.\n+\t */\n+\tboolean firstBarrierReceived(InputChannelInfo channelInfo, CheckpointBarrier barrier) throws IOException;", "originalCommit": "de848b220414a40d24a3b6ec2656dcbe1ad30f3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM5MzExNA==", "url": "https://github.com/apache/flink/pull/13667#discussion_r508393114", "bodyText": "For passive timeouting aligned checkpoints I'm planning to at least return boolean from barrierReceived() or barrierAnnouncementReceived()\nFor active timeouting there will be some even more elaborate/complicated/non trivial triggering mechanism on some timeout. I'm not entirely sure how this would be implemented (but this might not make it to 1.12, so we could put this aside for the time being).\nI wanted to have the control mechanism when to trigger checkpoint encapsulated in the SingleCheckpointBarrierHandler and not hard coded inside the CheckpointBarrierHandler. Having an enum, would move this logic actually to the CheckpointBarrierHandler, which would have hard coded if-ologic code what to do where, instead of encapsulating it inside the controller.\nI'm not sure how error prone this is. Please take a look how trivial are those classes. Controllers are trivial. Contract for triggering the checkpoints between them is also trivial - return true. (for active timeout this might be replaced by some other callback)\n\nAll in all I think enum would be a bad idea even now and also a step in a wrong direction considering the future planned changes.", "author": "pnowojski", "createdAt": "2020-10-20T10:37:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAyMzMzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ4MjUxMw==", "url": "https://github.com/apache/flink/pull/13667#discussion_r508482513", "bodyText": "I see your point. Let's put it aside at least until we have design/implementation of new triggers.", "author": "rkhachatryan", "createdAt": "2020-10-20T13:04:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAyMzMzMA=="}], "type": "inlineReview", "revised_code": {"commit": "a9ca2197ffa4c454cc1acaedbcfca0ac996b3ea5", "chunk": "diff --git a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierBehaviourController.java b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierBehaviourController.java\ndeleted file mode 100644\nindex c6553bb9a3..0000000000\n--- a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierBehaviourController.java\n+++ /dev/null\n\n@@ -1,49 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.flink.streaming.runtime.io;\n-\n-import org.apache.flink.annotation.Internal;\n-import org.apache.flink.runtime.checkpoint.CheckpointException;\n-import org.apache.flink.runtime.checkpoint.channel.InputChannelInfo;\n-import org.apache.flink.runtime.io.network.api.CheckpointBarrier;\n-\n-import java.io.IOException;\n-\n-/**\n- * Controls when the checkpoint should be actually triggered.\n- */\n-@Internal\n-public interface CheckpointBarrierBehaviourController {\n-\n-\tvoid barrierReceived(InputChannelInfo channelInfo, CheckpointBarrier barrier);\n-\n-\t/**\n-\t * @return {@code true} if checkpoint should be triggered.\n-\t */\n-\tboolean firstBarrierReceived(InputChannelInfo channelInfo, CheckpointBarrier barrier) throws IOException;\n-\n-\t/**\n-\t * @return {@code true} if checkpoint should be triggered.\n-\t */\n-\tboolean lastBarrierReceived(InputChannelInfo channelInfo, CheckpointBarrier barrier) throws IOException;\n-\n-\tvoid abortPendingCheckpoint(long cancelledId, CheckpointException exception) throws IOException;\n-\n-\tvoid obsoleteBarrierReceived(InputChannelInfo channelInfo, CheckpointBarrier barrier) throws IOException;\n-}\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAyNTQwNQ==", "url": "https://github.com/apache/flink/pull/13667#discussion_r508025405", "bodyText": "The relation between lastBarrierReceived and barrierReceived is not very clear: whether barrierReceived will be called for the last barrier and in which order. The same for firstBarrierReceived.\nHow about renaming to postProcessLastBarrier (and preProcessFirstBarrier)?", "author": "rkhachatryan", "createdAt": "2020-10-19T19:57:43Z", "path": "flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierBehaviourController.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.flink.streaming.runtime.io;\n+\n+import org.apache.flink.annotation.Internal;\n+import org.apache.flink.runtime.checkpoint.CheckpointException;\n+import org.apache.flink.runtime.checkpoint.channel.InputChannelInfo;\n+import org.apache.flink.runtime.io.network.api.CheckpointBarrier;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Controls when the checkpoint should be actually triggered.\n+ */\n+@Internal\n+public interface CheckpointBarrierBehaviourController {\n+\n+\tvoid barrierReceived(InputChannelInfo channelInfo, CheckpointBarrier barrier);\n+\n+\t/**\n+\t * @return {@code true} if checkpoint should be triggered.\n+\t */\n+\tboolean firstBarrierReceived(InputChannelInfo channelInfo, CheckpointBarrier barrier) throws IOException;\n+\n+\t/**\n+\t * @return {@code true} if checkpoint should be triggered.\n+\t */\n+\tboolean lastBarrierReceived(InputChannelInfo channelInfo, CheckpointBarrier barrier) throws IOException;", "originalCommit": "de848b220414a40d24a3b6ec2656dcbe1ad30f3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQwMTE3MA==", "url": "https://github.com/apache/flink/pull/13667#discussion_r508401170", "bodyText": "I have also added a bit of javadocs to explain the contract here.", "author": "pnowojski", "createdAt": "2020-10-20T10:49:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAyNTQwNQ=="}], "type": "inlineReview", "revised_code": {"commit": "a9ca2197ffa4c454cc1acaedbcfca0ac996b3ea5", "chunk": "diff --git a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierBehaviourController.java b/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierBehaviourController.java\ndeleted file mode 100644\nindex c6553bb9a3..0000000000\n--- a/flink-streaming-java/src/main/java/org/apache/flink/streaming/runtime/io/CheckpointBarrierBehaviourController.java\n+++ /dev/null\n\n@@ -1,49 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.flink.streaming.runtime.io;\n-\n-import org.apache.flink.annotation.Internal;\n-import org.apache.flink.runtime.checkpoint.CheckpointException;\n-import org.apache.flink.runtime.checkpoint.channel.InputChannelInfo;\n-import org.apache.flink.runtime.io.network.api.CheckpointBarrier;\n-\n-import java.io.IOException;\n-\n-/**\n- * Controls when the checkpoint should be actually triggered.\n- */\n-@Internal\n-public interface CheckpointBarrierBehaviourController {\n-\n-\tvoid barrierReceived(InputChannelInfo channelInfo, CheckpointBarrier barrier);\n-\n-\t/**\n-\t * @return {@code true} if checkpoint should be triggered.\n-\t */\n-\tboolean firstBarrierReceived(InputChannelInfo channelInfo, CheckpointBarrier barrier) throws IOException;\n-\n-\t/**\n-\t * @return {@code true} if checkpoint should be triggered.\n-\t */\n-\tboolean lastBarrierReceived(InputChannelInfo channelInfo, CheckpointBarrier barrier) throws IOException;\n-\n-\tvoid abortPendingCheckpoint(long cancelledId, CheckpointException exception) throws IOException;\n-\n-\tvoid obsoleteBarrierReceived(InputChannelInfo channelInfo, CheckpointBarrier barrier) throws IOException;\n-}\n"}}, {"oid": "a9ca2197ffa4c454cc1acaedbcfca0ac996b3ea5", "url": "https://github.com/apache/flink/commit/a9ca2197ffa4c454cc1acaedbcfca0ac996b3ea5", "message": "[hotfix][task] Drop CheckpointBarrierHandler#isBlocked method\n\nThis method is only used to provide a checkState, that's not necessary while it will complicate\nrefactoring in the next step.", "committedDate": "2020-10-20T10:26:27Z", "type": "commit"}, {"oid": "42ecbc7f1cff9d498a7ff9f200f6d9976fb29ef1", "url": "https://github.com/apache/flink/commit/42ecbc7f1cff9d498a7ff9f200f6d9976fb29ef1", "message": "[hotfix][test] Fix measuring alignmentDurationNanosMax\n\nPreviously the expected alignmentDurationNanosMax was calculated before checking\nthe actual alignmentDurationNanos. This meant that during a pending checkpoint\nthe time for alignmentDurationNanos was still ticking, and the actual value\ncould exceed the incorrectly calucated expected alignmentDurationNanosMax.", "committedDate": "2020-10-20T10:26:28Z", "type": "commit"}, {"oid": "5e18a9c52d248270d29ccd243b74f088a7669146", "url": "https://github.com/apache/flink/commit/5e18a9c52d248270d29ccd243b74f088a7669146", "message": "[FLINK-19679][task] Migrate AlternatingCheckpointBarrierHandler to the generic SingleCheckpointBarrierHandler", "committedDate": "2020-10-20T10:43:15Z", "type": "forcePushed"}, {"oid": "307a119262b4235ee3287091a8b0c28a0b933d93", "url": "https://github.com/apache/flink/commit/307a119262b4235ee3287091a8b0c28a0b933d93", "message": "[FLINK-19679][task] Migrate AlternatingCheckpointBarrierHandler to the generic SingleCheckpointBarrierHandler", "committedDate": "2020-10-20T10:47:32Z", "type": "forcePushed"}, {"oid": "654a97708aeb6332f913c578ed8f5fd45f0dc86a", "url": "https://github.com/apache/flink/commit/654a97708aeb6332f913c578ed8f5fd45f0dc86a", "message": "[FLINK-19679][task] Replace CheckpointBarrierUnaligner with more generic SingleCheckpointBarrierHandler\n\nUnalignedController provides unaligned checkpoints functionalities.", "committedDate": "2020-10-20T10:48:58Z", "type": "commit"}, {"oid": "f077af6cf38ce5baebac21d40d07472e5c34e0d8", "url": "https://github.com/apache/flink/commit/f077af6cf38ce5baebac21d40d07472e5c34e0d8", "message": "[FLINK-19679][task] Migrate CheckpointBarrierAligner to the generic SingleCheckpointBarrierHandler\n\nAlignedController replaces the custom logic of CheckpointBarrierAligner", "committedDate": "2020-10-20T10:48:59Z", "type": "commit"}, {"oid": "b4efb03da1c6505ce934103e293ac00b1ab919f2", "url": "https://github.com/apache/flink/commit/b4efb03da1c6505ce934103e293ac00b1ab919f2", "message": "[hotfix][test] Remove unused code in AlternatingCheckpointBarrierHandlerTest", "committedDate": "2020-10-20T10:48:59Z", "type": "commit"}, {"oid": "9be8ddb9eb5c86dc7a1d46132c43c2f62007178e", "url": "https://github.com/apache/flink/commit/9be8ddb9eb5c86dc7a1d46132c43c2f62007178e", "message": "[FLINK-19679][task] Migrate AlternatingCheckpointBarrierHandler to the generic SingleCheckpointBarrierHandler", "committedDate": "2020-10-20T10:48:59Z", "type": "commit"}, {"oid": "9be8ddb9eb5c86dc7a1d46132c43c2f62007178e", "url": "https://github.com/apache/flink/commit/9be8ddb9eb5c86dc7a1d46132c43c2f62007178e", "message": "[FLINK-19679][task] Migrate AlternatingCheckpointBarrierHandler to the generic SingleCheckpointBarrierHandler", "committedDate": "2020-10-20T10:48:59Z", "type": "forcePushed"}]}