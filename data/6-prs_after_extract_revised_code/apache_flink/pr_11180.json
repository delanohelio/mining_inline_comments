{"pr_number": 11180, "pr_title": "[FLINK-16220][json] Fix JsonRowSerializationSchema cast exception due\u2026", "pr_createdAt": "2020-02-22T02:54:03Z", "pr_url": "https://github.com/apache/flink/pull/11180", "timeline": [{"oid": "56c928ea39dc0c1b9de3e2669d8e48994b208010", "url": "https://github.com/apache/flink/commit/56c928ea39dc0c1b9de3e2669d8e48994b208010", "message": "[FLINK-16220][json] Fix JsonRowSerializationSchema cast exception due to object reuse", "committedDate": "2020-02-22T02:50:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYzNjA0NA==", "url": "https://github.com/apache/flink/pull/11180#discussion_r393636044", "bodyText": "Have you considered to use if (reuse == null || reuse.isNull()) which might be more straightforward?", "author": "wuchong", "createdAt": "2020-03-17T12:16:42Z", "path": "flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowSerializationSchema.java", "diffHunk": "@@ -360,7 +360,8 @@ private SerializationRuntimeConverter assembleRowConverter(\n \t\treturn (mapper, reuse, object) -> {\n \t\t\tObjectNode node;\n \n-\t\t\tif (reuse == null) {\n+\t\t\t// reuse could be a NullNode if last record is null.\n+\t\t\tif (!(reuse instanceof ObjectNode)) {", "originalCommit": "56c928ea39dc0c1b9de3e2669d8e48994b208010", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY0ODU5MQ==", "url": "https://github.com/apache/flink/pull/11180#discussion_r393648591", "bodyText": "Yes, I write it like if (reuse == null || !(reuse instanceof ObjectNode)) for the first version. But the IDE suggests to remove reuse == null because instanceof can cover that.\nHowever, your way seems more straight forward, and the IDE won't complain about it. I'll change it this way.", "author": "libenchao", "createdAt": "2020-03-17T12:39:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYzNjA0NA=="}], "type": "inlineReview", "revised_code": {"commit": "f1cf2dd26b61af5f530525b09a96a5ac25f5df3f", "chunk": "diff --git a/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowSerializationSchema.java b/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowSerializationSchema.java\nindex 97ed590ad8f..74418767db9 100644\n--- a/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowSerializationSchema.java\n+++ b/flink-formats/flink-json/src/main/java/org/apache/flink/formats/json/JsonRowSerializationSchema.java\n\n@@ -361,7 +361,7 @@ public class JsonRowSerializationSchema implements SerializationSchema<Row> {\n \t\t\tObjectNode node;\n \n \t\t\t// reuse could be a NullNode if last record is null.\n-\t\t\tif (!(reuse instanceof ObjectNode)) {\n+\t\t\tif (reuse == null || reuse.isNull()) {\n \t\t\t\tnode = mapper.createObjectNode();\n \t\t\t} else {\n \t\t\t\tnode = (ObjectNode) reuse;\n"}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYzOTM5Ng==", "url": "https://github.com/apache/flink/pull/11180#discussion_r393639396", "bodyText": "This test can't reproduce the problem. I woudl suggest to have another test, e.g. (of course, we should add null array into it)\n\t@Test\n\tpublic void test() throws IOException {\n\t\tString[] jsons = new String[] {\n\t\t\t\"{\\\"svt\\\":\\\"2020-02-24T12:58:09.209+0800\\\"}\",\n\t\t\t\"{\\\"svt\\\":\\\"2020-02-24T12:58:09.209+0800\\\", \\\"ops\\\":{\\\"id\\\":\\\"281708d0-4092-4c21-9233-931950b6eccf\\\"}}\",\n\t\t\t\"{\\\"svt\\\":\\\"2020-02-24T12:58:09.209+0800\\\"}\",\n\t\t};\n\n\t\tString[] expected = new String[] {\n\t\t\t\"{\\\"svt\\\":\\\"2020-02-24T12:58:09.209+0800\\\",\\\"ops\\\":null}\",\n\t\t\t\"{\\\"svt\\\":\\\"2020-02-24T12:58:09.209+0800\\\",\\\"ops\\\":{\\\"id\\\":\\\"281708d0-4092-4c21-9233-931950b6eccf\\\"}}\",\n\t\t\t\"{\\\"svt\\\":\\\"2020-02-24T12:58:09.209+0800\\\",\\\"ops\\\":null}\",\n\t\t};\n\n\t\tTypeInformation<Row> schema = Types.ROW_NAMED(\n\t\t\tnew String[]{\"svt\", \"ops\"},\n\t\t\tTypes.STRING,\n\t\t\tTypes.ROW_NAMED(new String[]{\"id\"}, Types.STRING));\n\t\tJsonRowDeserializationSchema deserializationSchema = new JsonRowDeserializationSchema.Builder(schema)\n\t\t\t.build();\n\t\tJsonRowSerializationSchema serializationSchema = JsonRowSerializationSchema.builder()\n\t\t\t.withTypeInfo(schema)\n\t\t\t.build();\n\n\t\tfor (int i = 0; i < jsons.length; i++) {\n\t\t\tString json = jsons[i];\n\t\t\tRow row = deserializationSchema.deserialize(json.getBytes());\n\t\t\tString result = new String(serializationSchema.serialize(row));\n\t\t\tassertEquals(expected[i], result);\n\t\t}\n\t}", "author": "wuchong", "createdAt": "2020-03-17T12:23:06Z", "path": "flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonRowSerializationSchemaTest.java", "diffHunk": "@@ -113,6 +114,12 @@ public void testNestedSchema() {\n \t\tassertThat(row, whenSerializedWith(serializationSchema)\n \t\t\t.andDeserializedWith(deserializationSchema)\n \t\t\t.equalsTo(row));\n+\n+\t\trow.setField(3, new int[]{1, 2, 3});\n+\n+\t\tassertThat(row, whenSerializedWith(serializationSchema)", "originalCommit": "56c928ea39dc0c1b9de3e2669d8e48994b208010", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY1Mjk2MQ==", "url": "https://github.com/apache/flink/pull/11180#discussion_r393652961", "bodyText": "Current test can reproduce the problem, because serializationSchema is used twice, for the first time, f4 is null, and for the second time, f4 is not null.\nHowever the test maybe not straight forward and a little fragile which depends on the first use of serializationSchema. I'll add a separate test for this like your example.", "author": "libenchao", "createdAt": "2020-03-17T12:47:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYzOTM5Ng=="}], "type": "inlineReview", "revised_code": {"commit": "f1cf2dd26b61af5f530525b09a96a5ac25f5df3f", "chunk": "diff --git a/flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonRowSerializationSchemaTest.java b/flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonRowSerializationSchemaTest.java\nindex b797eff1b7f..d1f1e4383da 100644\n--- a/flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonRowSerializationSchemaTest.java\n+++ b/flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonRowSerializationSchemaTest.java\n\n@@ -114,12 +145,6 @@ public class JsonRowSerializationSchemaTest {\n \t\tassertThat(row, whenSerializedWith(serializationSchema)\n \t\t\t.andDeserializedWith(deserializationSchema)\n \t\t\t.equalsTo(row));\n-\n-\t\trow.setField(3, new int[]{1, 2, 3});\n-\n-\t\tassertThat(row, whenSerializedWith(serializationSchema)\n-\t\t\t.andDeserializedWith(deserializationSchema)\n-\t\t\t.equalsTo(row));\n \t}\n \n \t@Test\n"}}, {"oid": "f1cf2dd26b61af5f530525b09a96a5ac25f5df3f", "url": "https://github.com/apache/flink/commit/f1cf2dd26b61af5f530525b09a96a5ac25f5df3f", "message": "address comments", "committedDate": "2020-03-17T14:34:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc3Mzg4NA==", "url": "https://github.com/apache/flink/pull/11180#discussion_r394773884", "bodyText": "Could you also verify for array type?", "author": "wuchong", "createdAt": "2020-03-19T03:39:26Z", "path": "flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonRowSerializationSchemaTest.java", "diffHunk": "@@ -91,20 +91,51 @@ public void testSerializationOfTwoRows() throws IOException {\n \t\tassertEquals(row2, deserializationSchema.deserialize(bytes));\n \t}\n \n+\t@Test\n+\tpublic void testMultiRowsWithNullValues() throws IOException {\n+\t\tString[] jsons = new String[] {\n+\t\t\t\"{\\\"svt\\\":\\\"2020-02-24T12:58:09.209+0800\\\"}\",\n+\t\t\t\"{\\\"svt\\\":\\\"2020-02-24T12:58:09.209+0800\\\", \\\"ops\\\":{\\\"id\\\":\\\"281708d0-4092-4c21-9233-931950b6eccf\\\"}}\",\n+\t\t\t\"{\\\"svt\\\":\\\"2020-02-24T12:58:09.209+0800\\\"}\",\n+\t\t};\n+\n+\t\tString[] expected = new String[] {\n+\t\t\t\"{\\\"svt\\\":\\\"2020-02-24T12:58:09.209+0800\\\",\\\"ops\\\":null}\",\n+\t\t\t\"{\\\"svt\\\":\\\"2020-02-24T12:58:09.209+0800\\\",\\\"ops\\\":{\\\"id\\\":\\\"281708d0-4092-4c21-9233-931950b6eccf\\\"}}\",\n+\t\t\t\"{\\\"svt\\\":\\\"2020-02-24T12:58:09.209+0800\\\",\\\"ops\\\":null}\",\n+\t\t};\n+\n+\t\tTypeInformation<Row> schema = Types.ROW_NAMED(\n+\t\t\tnew String[]{\"svt\", \"ops\"},\n+\t\t\tTypes.STRING,\n+\t\t\tTypes.ROW_NAMED(new String[]{\"id\"}, Types.STRING));", "originalCommit": "f1cf2dd26b61af5f530525b09a96a5ac25f5df3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc4MjQ3OA==", "url": "https://github.com/apache/flink/pull/11180#discussion_r394782478", "bodyText": "Done", "author": "libenchao", "createdAt": "2020-03-19T04:18:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc3Mzg4NA=="}], "type": "inlineReview", "revised_code": {"commit": "142438bb79505c78246151b6e13bb163300a73a3", "chunk": "diff --git a/flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonRowSerializationSchemaTest.java b/flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonRowSerializationSchemaTest.java\nindex d1f1e4383da..378f92b896c 100644\n--- a/flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonRowSerializationSchemaTest.java\n+++ b/flink-formats/flink-json/src/test/java/org/apache/flink/formats/json/JsonRowSerializationSchemaTest.java\n\n@@ -95,20 +95,23 @@ public class JsonRowSerializationSchemaTest {\n \tpublic void testMultiRowsWithNullValues() throws IOException {\n \t\tString[] jsons = new String[] {\n \t\t\t\"{\\\"svt\\\":\\\"2020-02-24T12:58:09.209+0800\\\"}\",\n-\t\t\t\"{\\\"svt\\\":\\\"2020-02-24T12:58:09.209+0800\\\", \\\"ops\\\":{\\\"id\\\":\\\"281708d0-4092-4c21-9233-931950b6eccf\\\"}}\",\n+\t\t\t\"{\\\"svt\\\":\\\"2020-02-24T12:58:09.209+0800\\\", \\\"ops\\\":{\\\"id\\\":\\\"281708d0-4092-4c21-9233-931950b6eccf\\\"}, \" +\n+\t\t\t\t\"\\\"ids\\\":[1, 2, 3]}\",\n \t\t\t\"{\\\"svt\\\":\\\"2020-02-24T12:58:09.209+0800\\\"}\",\n \t\t};\n \n \t\tString[] expected = new String[] {\n-\t\t\t\"{\\\"svt\\\":\\\"2020-02-24T12:58:09.209+0800\\\",\\\"ops\\\":null}\",\n-\t\t\t\"{\\\"svt\\\":\\\"2020-02-24T12:58:09.209+0800\\\",\\\"ops\\\":{\\\"id\\\":\\\"281708d0-4092-4c21-9233-931950b6eccf\\\"}}\",\n-\t\t\t\"{\\\"svt\\\":\\\"2020-02-24T12:58:09.209+0800\\\",\\\"ops\\\":null}\",\n+\t\t\t\"{\\\"svt\\\":\\\"2020-02-24T12:58:09.209+0800\\\",\\\"ops\\\":null,\\\"ids\\\":null}\",\n+\t\t\t\"{\\\"svt\\\":\\\"2020-02-24T12:58:09.209+0800\\\",\\\"ops\\\":{\\\"id\\\":\\\"281708d0-4092-4c21-9233-931950b6eccf\\\"},\" +\n+\t\t\t\t\"\\\"ids\\\":[1,2,3]}\",\n+\t\t\t\"{\\\"svt\\\":\\\"2020-02-24T12:58:09.209+0800\\\",\\\"ops\\\":null,\\\"ids\\\":null}\",\n \t\t};\n \n \t\tTypeInformation<Row> schema = Types.ROW_NAMED(\n-\t\t\tnew String[]{\"svt\", \"ops\"},\n+\t\t\tnew String[]{\"svt\", \"ops\", \"ids\"},\n \t\t\tTypes.STRING,\n-\t\t\tTypes.ROW_NAMED(new String[]{\"id\"}, Types.STRING));\n+\t\t\tTypes.ROW_NAMED(new String[]{\"id\"}, Types.STRING),\n+\t\t\tTypes.PRIMITIVE_ARRAY(Types.INT));\n \t\tJsonRowDeserializationSchema deserializationSchema = new JsonRowDeserializationSchema.Builder(schema)\n \t\t\t.build();\n \t\tJsonRowSerializationSchema serializationSchema = JsonRowSerializationSchema.builder()\n"}}, {"oid": "142438bb79505c78246151b6e13bb163300a73a3", "url": "https://github.com/apache/flink/commit/142438bb79505c78246151b6e13bb163300a73a3", "message": "Add array test case to JsonRowSerializationSchema", "committedDate": "2020-03-19T04:15:50Z", "type": "commit"}]}