{"pr_number": 14024, "pr_title": "[FLINK-20079][task] Fix StreamTask initialization order", "pr_createdAt": "2020-11-10T21:45:40Z", "pr_url": "https://github.com/apache/flink/pull/14024", "timeline": [{"oid": "26ec4e6904ae7ae4d307fc10c08bbbc264a820a5", "url": "https://github.com/apache/flink/commit/26ec4e6904ae7ae4d307fc10c08bbbc264a820a5", "message": "[FLINK-20079][task] Initialize operator chain before upstream partition request", "committedDate": "2020-11-10T22:04:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE0Nzg0MQ==", "url": "https://github.com/apache/flink/pull/14024#discussion_r521147841", "bodyText": "Why do we need to reduce the backpressure here? I'm worried that any solution on top of it will only work with a certain minimal flow.\nNote that in ef4f78d#diff-c0d448d637f04cc203de3592d7fab0ba2412f2d75c59dcf6e44cc4a3c18e5851R568 I added a modification to the test that avoids backpressuring during recovery (by applying backpressure only after the first successful checkpoint.", "author": "AHeise", "createdAt": "2020-11-11T06:48:51Z", "path": "flink-tests/src/test/java/org/apache/flink/test/checkpointing/UnalignedCheckpointITCase.java", "diffHunk": "@@ -531,8 +534,10 @@ public void invoke(Long value, Context context) throws Exception {\n \t\t\tstate.numOutput++;\n \n \t\t\tif (state.completedCheckpoints < minCheckpoints) {\n-\t\t\t\t// induce heavy backpressure until enough checkpoints have been written\n-\t\t\t\tThread.sleep(0, 100_000);\n+\t\t\t\t// induce backpressure until enough checkpoints have been written\n+\t\t\t\tif (random.nextInt(1000) == 42) {", "originalCommit": "d206d47d44909992405611c8af17a65cb5be0775", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTIyMDIzMQ==", "url": "https://github.com/apache/flink/pull/14024#discussion_r521220231", "bodyText": "Why do we need to reduce the backpressure here?\n\nThis is a commit from #13827. As far as I understand, the motivation was:\n\nto have higher backpressure (.1ms vs 1ms) for some parts of the stream\nto have unbalanced streams\nreduce running time (was ~1m, now ~10s)\n\nOn average, the change decreases sleep time only by 60% (1-42/1000*10).\n\nI'm worried that any solution on top of it will only work with a certain minimal flow.\n\nWith 1K elements, the sink will sleep 23 times for 1ms, which I think is enough and 1K is a reasonable number of elements for this test.", "author": "rkhachatryan", "createdAt": "2020-11-11T09:17:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE0Nzg0MQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "1531ec1122918c4a30311af8fb3f2dcd9deaf774", "url": "https://github.com/apache/flink/commit/1531ec1122918c4a30311af8fb3f2dcd9deaf774", "message": "[FLINK-20079][task] Initialize operator chain before upstream partition request", "committedDate": "2020-11-11T09:45:27Z", "type": "commit"}, {"oid": "1531ec1122918c4a30311af8fb3f2dcd9deaf774", "url": "https://github.com/apache/flink/commit/1531ec1122918c4a30311af8fb3f2dcd9deaf774", "message": "[FLINK-20079][task] Initialize operator chain before upstream partition request", "committedDate": "2020-11-11T09:45:27Z", "type": "forcePushed"}]}